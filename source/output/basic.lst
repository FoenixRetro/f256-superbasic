
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Dec 30 17:43:39 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVE = 26
=27						ERRID_DRIVEIO = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_DATA                             = $b8; $b8 DATA
=$b9						KWD_DIM                              = $b9; $b9 DIM
=$ba						KWD_DOWNTO                           = $ba; $ba DOWNTO
=$bb						KWD_ELSE                             = $bb; $bb ELSE
=$bc						KWD_FROM                             = $bc; $bc FROM
=$bd						KWD_GFX                              = $bd; $bd GFX
=$be						KWD_GOSUB                            = $be; $be GOSUB
=$bf						KWD_GOTO                             = $bf; $bf GOTO
=$c0						KWD_HERE                             = $c0; $c0 HERE
=$c1						KWD_IMAGE                            = $c1; $c1 IMAGE
=$c2						KWD_INPUT                            = $c2; $c2 INPUT
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_PRINT                            = $cf; $cf PRINT
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_RETURN                           = $d3; $d3 RETURN
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 8f 80	jmp $808f	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 1a bc	jsr $bc1a		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 1d bc	jsr $bc1d		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 d9 bb	jsr $bbd9		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 29 bc	jsr $bc29		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLReadByte:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 5f bc	jsr $bc5f		jsr	Export_KNLReadByte
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLCloseFile:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 42 bc	jsr $bc42		jsr	Export_KNLCloseFile
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						GXGraphicDraw:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						SNDCommand:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 4c bb	jsr $bb4c		jsr	Export_SNDCommand
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						SNDUpdate:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 7f bb	jsr $bb7f		jsr	Export_SNDUpdate
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						TKListConvertLine:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 fd b4	jsr $b4fd		jsr	Export_TKListConvertLine
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						TKTokeniseLine:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 91 b7	jsr $b791		jsr	Export_TKTokeniseLine
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.808f		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8091		9a		txs				txs
.8092		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.8094		09 80		ora #$80			ora 	#$80
.8096		85 00		sta $00				sta 	0
.8098		20 00 a7	jsr $a700			jsr		UpdateFont 					; update font if between FPGA updates.
.809b		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.809e		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80a0		aa		tax				tax
.80a1		a8		tay				tay
.80a2		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.80a5		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80a7		20 67 80	jsr $8067			jsr 	SNDCommand
.80aa		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80ac		a9 ba		lda #$ba			lda 	#Prompt & $FF
.80ae		20 34 90	jsr $9034			jsr 	PrintStringXA
.80b1		20 bb 8a	jsr $8abb			jsr 	NewProgram 					; erase current program
.80b4		4c 05 84	jmp $8405			jmp 	WarmStart					; make same size.
.80b7		4c 05 84	jmp $8405			jmp 	WarmStart
.80ba						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80ba		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 30-Dec-22. "
>80c2		20 62 75 69 6c 74 20 33 30 2d 44 65 63 2d 32 32
>80d2		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80d4		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80d7						AssembleGroup1:
.80d7		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80d9		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80dc		80 02		bra $80e0			bra 	AsmGroup12
.80de						AssembleGroup2:
.80de		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80e0						AsmGroup12:
.80e0		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80e3		68		pla				pla 								; pop the return address to access the information following.
.80e4		fa		plx				plx
.80e5		20 6c 81	jsr $816c			jsr 	AccessParameters 			; get opcode and save as base
.80e8		8d 24 04	sta $0424			sta 	BaseOpcode
.80eb		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80ee		d0 08		bne $80f8			bne 	_AG12HaveMask
.80f0		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80f2		20 74 81	jsr $8174			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80f5		8d 25 04	sta $0425			sta 	ModeMask
.80f8						_AG12HaveMask:
.80f8		20 a8 82	jsr $82a8			jsr 	TypeAndCalculateOperand 	; get zero page type
.80fb		da		phx				phx 								; save found address mode
.80fc		20 d8 81	jsr $81d8			jsr 	AssembleModeX
.80ff		fa		plx				plx  								; restore address mode
.8100		b0 0b		bcs $810d			bcs 	_AG12Exit
.8102		20 0e 81	jsr $810e			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8105		20 d8 81	jsr $81d8			jsr 	AssembleModeX
.8108		b0 03		bcs $810d			bcs 	_AG12Exit
.810a		4c a4 a0	jmp $a0a4			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.810d						_AG12Exit:
.810d		60		rts				rts
.810e						PromoteToAbsolute:
.810e		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8110		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8112		f0 19		beq $812d			beq 	_PTADo
.8114		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8116		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8118		f0 13		beq $812d			beq 	_PTADo
.811a		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.811c		e0 80		cpx #$80			cpx 	#AM_ZEROY
.811e		f0 0d		beq $812d			beq 	_PTADo
.8120		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8122		e0 d1		cpx #$d1			cpx 	#AM_IND
.8124		f0 07		beq $812d			beq 	_PTADo
.8126		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8128		e0 c0		cpx #$c0			cpx 	#AM_INDX
.812a		f0 01		beq $812d			beq 	_PTADo
.812c		60		rts				rts
.812d						_PTADo:
.812d		aa		tax				tax
.812e		60		rts				rts
.812f						AssembleGroup3:
.812f		68		pla				pla 								; get parameters, which is just the opcode.
.8130		fa		plx				plx
.8131		20 6c 81	jsr $816c			jsr 	AccessParameters 			; get and output opcode
.8134		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.8137		20 0c 83	jsr $830c			jsr 	CalculateOperand 			; get a 16 bit operand
.813a		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.813c		38		sec				sec
.813d		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8140		48		pha				pha 								; LSB in A
.8141		a5 60		lda $60				lda 	NSMantissa1
.8143		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8146		aa		tax				tax 								; MSB in X
.8147		68		pla				pla
.8148		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8149		69 7f		adc #$7f			adc 	#$7F
.814b		90 01		bcc $814e			bcc 	_AG3NoCarry
.814d		e8		inx				inx
.814e						_AG3NoCarry:
.814e		38		sec				sec 								; fix back and write out anyways.
.814f		e9 80		sbc #$80			sbc 	#$80
.8151		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.8154		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8156		f0 0a		beq $8162			beq 	_AG3Exit
.8158		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.815b		29 01		and #$01			and 	#1
.815d		f0 03		beq $8162			beq 	_AG3Exit
.815f		4c a9 a0	jmp $a0a9			jmp 	RangeError 					; no, branch is out of range
.8162						_AG3Exit:
.8162		60		rts				rts
.8163						AssembleGroup4:
.8163		68		pla				pla 								; pop address
.8164		fa		plx				plx
.8165		20 6c 81	jsr $816c			jsr 	AccessParameters 			; access and get first
.8168		20 84 81	jsr $8184			jsr 	AssemblerWriteByte 			; output it.
.816b		60		rts				rts
.816c						AccessParameters:
.816c		8d 21 04	sta $0421			sta 	ParamStart
.816f		8e 22 04	stx $0422			stx 	ParamStart+1
.8172		a9 01		lda #$01			lda 	#1
.8174						GetParameter:
.8174		5a		phy				phy
.8175		a8		tay				tay
.8176		ad 21 04	lda $0421			lda 	ParamStart
.8179		85 36		sta $36				sta 	zTemp0
.817b		ad 22 04	lda $0422			lda 	ParamStart+1
.817e		85 37		sta $37				sta 	zTemp0+1
.8180		b1 36		lda ($36),y			lda 	(zTemp0),y
.8182		7a		ply				ply
.8183		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8184						AssemblerWriteByte:
.8184		48		pha			pha
.8185		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8188		29 02		and #$02		and 	#2
.818a		f0 1b		beq $81a7		beq 	_AWBNoPrint
.818c		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.818f		20 c2 81	jsr $81c2		jsr 	PrintHex
.8192		ad 1e 04	lda $041e		lda		AssemblerAddress
.8195		20 c2 81	jsr $81c2		jsr 	PrintHex
.8198		a9 20		lda #$20		lda 	#' '
.819a		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.819d		68		pla			pla 									; print byte
.819e		48		pha			pha
.819f		20 c2 81	jsr $81c2		jsr 	PrintHex
.81a2		a9 0d		lda #$0d		lda 	#13
.81a4		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81a7						_AWBNoPrint:
.81a7		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81aa		85 36		sta $36			sta 	zTemp0
.81ac		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81af		f0 0e		beq $81bf		beq 	_AWBRange
.81b1		85 37		sta $37			sta 	zTemp0+1
.81b3		68		pla			pla 									; write byte out
.81b4		92 36		sta ($36)		sta 	(zTemp0)
.81b6		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81b9		d0 03		bne $81be		bne 	_AWBNoCarry
.81bb		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81be						_AWBNoCarry:
.81be		60		rts			rts
.81bf						_AWBRange:
.81bf		4c a9 a0	jmp $a0a9		jmp 	RangeError
.81c2						PrintHex:
.81c2		48		pha				pha
.81c3		4a		lsr a				lsr 	a
.81c4		4a		lsr a				lsr 	a
.81c5		4a		lsr a				lsr 	a
.81c6		4a		lsr a				lsr 	a
.81c7		20 cb 81	jsr $81cb			jsr 	_PrintNibble
.81ca		68		pla				pla
.81cb						_PrintNibble:
.81cb		29 0f		and #$0f			and 	#15
.81cd		c9 0a		cmp #$0a			cmp 	#10
.81cf		90 02		bcc $81d3			bcc 	_NoShift
.81d1		69 06		adc #$06			adc 	#6
.81d3						_NoShift:
.81d3		69 30		adc #$30			adc 	#48
.81d5		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81d8						AssembleModeX:
.81d8		5a		phy				phy
.81d9		ad 23 04	lda $0423			lda 	IsGroup1
.81dc		f0 17		beq $81f5			beq 	_AMXGroup2
.81de		8a		txa				txa 							; is it in group # 1
.81df		29 40		and #$40			and 	#AM_ISG1
.81e1		f0 4d		beq $8230			beq 	_AMXFail 				; no, give up.
.81e3		8a		txa				txa 							; get back.
.81e4		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81e6		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81e8		d0 22		bne $820c			bne 	_AMXHaveInfo
.81ea		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81ed		c9 81		cmp #$81			cmp 	#$81
.81ef		f0 3f		beq $8230			beq 	_AMXFail
.81f1		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81f3		80 17		bra $820c			bra 	_AMXHaveInfo 			; odd design decision there.
.81f5						_AMXGroup2:
.81f5		8a		txa				txa 							; is it in group 2 ?
.81f6		29 20		and #$20			and 	#AM_ISG2
.81f8		f0 36		beq $8230			beq 	_AMXFail 				; no, give up.
.81fa		8a		txa				txa 							; get the offset into Y
.81fb		29 1f		and #$1f			and 	#$1F
.81fd		4a		lsr a				lsr 	a 						; make it 0-7.
.81fe		4a		lsr a				lsr  	a
.81ff		a8		tay				tay
.8200		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8203						_AMXCheckOkay:
.8203		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8204		88		dey				dey
.8205		10 fc		bpl $8203			bpl 	_AMXCheckOkay
.8207		90 27		bcc $8230			bcc 	_AMXFail 				; not allowed.
.8209		8a		txa				txa  							; get mask back
.820a		29 1f		and #$1f			and 	#$1F
.820c						_AMXHaveInfo:
.820c		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.820e		10 04		bpl $8214			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8210		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8212		d0 1c		bne $8230			bne 	_AMXFail
.8214						_AMXAnySize:
.8214		18		clc				clc 							; add offset to the base opcode
.8215		6d 24 04	adc $0424			adc 	BaseOpcode
.8218						_AMXOutputCode:
.8218		20 84 81	jsr $8184			jsr 	AssemblerWriteByte 		; write the opcode out.
.821b		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.821d		f0 0e		beq $822d			beq 	_AMXExit
.821f		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8221		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.8224		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8226		30 05		bmi $822d			bmi 	_AMXExit
.8228		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.822a		20 84 81	jsr $8184			jsr 	AssemblerWriteByte
.822d						_AMXExit:
.822d		7a		ply				ply
.822e		38		sec				sec
.822f		60		rts				rts
.8230						_AMXFail:
.8230		a0 00		ldy #$00			ldy 	#0
.8232						_AMXCheckOddities:
.8232		8a		txa				txa
.8233		d9 5a 82	cmp $825a,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8236		d0 15		bne $824d			bne 	_AMXCONext
.8238		b9 58 82	lda $8258,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.823b		cd 24 04	cmp $0424			cmp 	BaseOpcode
.823e		d0 0d		bne $824d			bne 	_AMXCONext
.8240		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8242		10 04		bpl $8248			bpl 	_AMXCONotZero
.8244		a5 60		lda $60				lda 	NSMantissa1
.8246		d0 05		bne $824d			bne 	_AMXCONext
.8248						_AMXCONotZero:
.8248		b9 59 82	lda $8259,y			lda 	ExtraOpcode+1,y 		; get new opcode
.824b		80 cb		bra $8218			bra 	_AMXOutputCode 			; and assemble it
.824d						_AMXCONext:
.824d		c8		iny				iny
.824e		c8		iny				iny
.824f		c8		iny				iny
.8250		b9 58 82	lda $8258,y			lda 	ExtraOpcode+0,y 		; end of table
.8253		d0 dd		bne $8232			bne 	_AMXCheckOddities
.8255						_AMXCOFail:
.8255		7a		ply				ply
.8256		18		clc				clc
.8257		60		rts				rts
.8258						ExtraOpcode:
>8258		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>825b		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>825e		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8261		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8264		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8267		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>826a		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>826d		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8270		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8273		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8276		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8277						LabelHere:
.8277		c8		iny				iny 								; skip .
.8278		a2 00		ldx #$00			ldx 	#0 							; get a term
.827a		20 29 99	jsr $9929			jsr 	EvaluateTerm
.827d		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.827f		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8281		d0 22		bne $82a5			bne 	_ALType 					; otherwise typing error
.8283		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8285		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8287		b5 60		lda $60,x			lda 	NSMantissa1,x
.8289		85 37		sta $37				sta 	zTemp0+1
.828b		5a		phy				phy 								; copy address in (64k)
.828c		a0 01		ldy #$01			ldy 	#1
.828e		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8291		92 36		sta ($36)			sta 	(zTemp0)
.8293		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8296		91 36		sta ($36),y			sta 	(zTemp0),y
.8298		c8		iny				iny
.8299		a9 00		lda #$00			lda 	#0 							; zero the rest.
.829b		91 36		sta ($36),y			sta 	(zTemp0),y
.829d		c8		iny				iny
.829e		91 36		sta ($36),y			sta 	(zTemp0),y
.82a0		c8		iny				iny
.82a1		91 36		sta ($36),y			sta 	(zTemp0),y
.82a3		7a		ply				ply
.82a4		60		rts				rts
.82a5						_ALType:
.82a5		4c ae a0	jmp $a0ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82a8						TypeAndCalculateOperand:
.82a8		b1 30		lda ($30),y			lda 	(codePtr),y
.82aa		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82ac		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82ae		f0 5b		beq $830b			beq 	_TACOExit
.82b0		c9 80		cmp #$80			cmp 	#KWC_EOL
.82b2		f0 57		beq $830b			beq 	_TACOExit
.82b4		c8		iny				iny
.82b5		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82b7		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82b9		f0 51		beq $830c			beq 	CalculateOperand
.82bb		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82bd		f0 1f		beq $82de			beq 	_TACOIndirect
.82bf		88		dey				dey 								; undo get of first character
.82c0		20 0c 83	jsr $830c			jsr 	CalculateOperand 			; get operand
.82c3		b1 30		lda ($30),y			lda 	(codePtr),y
.82c5		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82c7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82c9		d0 40		bne $830b			bne 	_TACOExit
.82cb		c8		iny				iny
.82cc		20 16 83	jsr $8316			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82cf		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82d1		c9 58		cmp #$58			cmp 	#'X'
.82d3		f0 36		beq $830b			beq 	_TACOExit
.82d5		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82d7		c9 59		cmp #$59			cmp 	#'Y'
.82d9		f0 30		beq $830b			beq 	_TACOExit
.82db						_TACOSyntax:
.82db		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.82de						_TACOIndirect:
.82de		20 0c 83	jsr $830c			jsr 	CalculateOperand 			; get the operand
.82e1		b1 30		lda ($30),y			lda 	(codePtr),y
.82e3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82e5		f0 17		beq $82fe			beq 	_TACOIndX
.82e7		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82ea		b1 30		lda ($30),y			lda 	(codePtr),y
.82ec		a2 d1		ldx #$d1			ldx 	#AM_IND
.82ee		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82f0		d0 19		bne $830b			bne 	_TACOExit
.82f2		c8		iny				iny
.82f3		20 16 83	jsr $8316			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82f6		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82f8		d0 e1		bne $82db			bne 	_TACOSyntax
.82fa		a2 d0		ldx #$d0			ldx 	#AM_INDY
.82fc		80 0d		bra $830b			bra 	_TACOExit
.82fe						_TACOIndX:
.82fe		c8		iny				iny
.82ff		20 16 83	jsr $8316			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8302		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8304		d0 d5		bne $82db			bne 	_TACOSyntax
.8306		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket			; check )
.8309		a2 c0		ldx #$c0			ldx 	#AM_INDX
.830b						_TACOExit:
.830b		60		rts				rts
.830c						CalculateOperand:
.830c		48		pha				pha
.830d		da		phx				phx
.830e		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8310		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.8313		fa		plx				plx
.8314		68		pla				pla
.8315		60		rts				rts
.8316						TACOCheckXY:
.8316		b1 30		lda ($30),y			lda 	(codePtr),y
.8318		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.831a		c9 40		cmp #$40			cmp 	#$40
.831c		d0 21		bne $833f			bne 	_TCXYFail
.831e		b1 30		lda ($30),y			lda 	(codePtr),y
.8320		18		clc				clc
.8321		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8323		85 37		sta $37				sta 	zTemp0+1
.8325		c8		iny				iny
.8326		b1 30		lda ($30),y			lda 	(codePtr),y
.8328		c8		iny				iny
.8329		85 36		sta $36				sta 	zTemp0
.832b		5a		phy				phy 								; save position
.832c		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.832e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8330		d0 0c		bne $833e			bne 	_TCXYPopFail
.8332		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8334		b1 36		lda ($36),y			lda 	(zTemp0),y
.8336		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8338		f0 08		beq $8342			beq 	_TCXYFound
.833a		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.833c		f0 04		beq $8342			beq 	_TCXYFound
.833e						_TCXYPopFail:
.833e		7a		ply				ply
.833f						_TCXYFail:
.833f		a9 00		lda #$00			lda 	#0
.8341		60		rts				rts
.8342						_TCXYFound:
.8342		7a		ply				ply 								; restore position
.8343		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8345		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8346						BackloadProgram:
.8346		20 bb 8a	jsr $8abb			jsr 	NewProgram 					; does the actual NEW.
.8349		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.834b		a9 9d		lda #$9d			lda 	#_BLLoad & $FF
.834d		20 34 90	jsr $9034			jsr 	PrintStringXA
.8350		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8352		8d 59 06	sta $0659			sta 	BackLoadPage
.8355		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8357		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.835a		a9 60		lda #$60			lda 	#(($6000) >> 8)
.835c		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.835f		a9 ff		lda #$ff			lda 	#$FF
.8361		8d fa ff	sta $fffa			sta 	$FFFA
.8364						_BPLoop:
.8364		a2 ff		ldx #$ff			ldx 	#$FF
.8366		20 b2 83	jsr $83b2			jsr 	BLReadByte 					; read a byte
.8369		c9 00		cmp #$00			cmp 	#0
.836b		f0 29		beq $8396			beq 	_BPExit 					; if 0 exit
.836d		30 27		bmi $8396			bmi 	_BPExit 					; if -ve exit
.836f						_BPCopy:
.836f		e8		inx				inx  								; copy byte into the lineBuffer
.8370		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8373		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8376		20 b2 83	jsr $83b2			jsr 	BLReadByte 					; read next byte
.8379		30 0a		bmi $8385			bmi 	_BPEndLine 					; -ve = EOL
.837b		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.837d		d0 02		bne $8381			bne 	_BPNotTab
.837f		a9 20		lda #$20			lda 	#' '
.8381						_BPNotTab:
.8381		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8383		b0 ea		bcs $836f			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8385						_BPEndLine:
.8385		20 85 80	jsr $8085			jsr 	TKTokeniseLine 				; tokenise the line.
.8388		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.838b		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.838e		f0 d4		beq $8364			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8390		38		sec				sec 								; append not insert
.8391		20 29 a6	jsr $a629			jsr 	MemoryInsertLine 			; append to current program
.8394		80 ce		bra $8364			bra 	_BPLoop
.8396						_BPExit:
.8396		9c fa ff	stz $fffa			stz 	$FFFA
.8399		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear variables etc.
.839c		60		rts				rts
.839d						_BLLoad:
>839d		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83a5		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83b2						BLReadByte:
.83b2		da		phx				phx
.83b3		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83b5		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83b8		85 0b		sta $0b				sta 	8+3
.83ba		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83bd		85 36		sta $36				sta 	zTemp0
.83bf		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83c2		85 37		sta $37				sta 	zTemp0+1
.83c4		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83c6		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83c9		d0 0f		bne $83da			bne 	_BLNoCarry
.83cb		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83ce		10 0a		bpl $83da			bpl 	_BLNoCarry 					; need a new page
.83d0		48		pha				pha
.83d1		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83d3		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83d6		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83d9		68		pla				pla
.83da						_BLNoCarry:
.83da		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83dc		fa		plx				plx
.83dd		c9 00		cmp #$00			cmp 	#0
.83df		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83e0						EditProgramCode:
.83e0		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.83e3		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.83e6		20 cd a6	jsr $a6cd			jsr 	MemorySearch
.83e9		90 05		bcc $83f0			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83eb		d0 03		bne $83f0			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83ed		20 f2 a5	jsr $a5f2			jsr 	MemoryDeleteLine 			; delete the line
.83f0						_EPCNoDelete:
.83f0		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.83f3		c9 80		cmp #$80			cmp 	#KWC_EOL
.83f5		f0 0d		beq $8404			beq 	_EPCNoInsert
.83f7		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.83fa		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83fd		20 cd a6	jsr $a6cd			jsr 	MemorySearch
.8400		18		clc				clc 								; insert at this point.
.8401		20 29 a6	jsr $a629			jsr 	MemoryInsertLine 			; insert the line
.8404						_EPCNoInsert:
.8404		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8405						WarmStart:
.8405		a2 ff		ldx #$ff			ldx 	#$FF
.8407		9a		txs				txs
.8408		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.840a		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.840d		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8410		20 85 80	jsr $8085			jsr 	TKTokeniseLine 				; tokenise the line
.8413		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8416		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8419		d0 17		bne $8432			bne 	_WSEditCode 				; if so,edit code.
.841b		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.841e		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8420		85 30		sta $30				sta 	codePtr
.8422		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8424		85 31		sta $31				sta 	codePtr+1
.8426		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.8429		c9 80		cmp #$80			cmp 	#KWC_EOL
.842b		f0 d8		beq $8405			beq 	WarmStart
.842d		20 4b 8c	jsr $8c4b			jsr 	RUNCodePointerLine 			; execute that line.
.8430		80 d3		bra $8405			bra 	WarmStart
.8432						_WSEditCode:
.8432		20 e0 83	jsr $83e0			jsr 	EditProgramCode 			; edit the program code
.8435		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear all variables etc.
.8438		80 cb		bra $8405			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.843a						AssembleCommand:
.843a		a2 00		ldx #$00			ldx 	#0
.843c		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger 		; start address
.843f		a5 58		lda $58				lda 	NSMantissa0
.8441		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8444		a5 60		lda $60				lda 	NSMantissa1
.8446		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.8449		20 ca 8f	jsr $8fca			jsr 	CheckComma
.844c		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; options 0-3
.844f		a5 58		lda $58				lda 	NSMantissa0
.8451		8d 20 04	sta $0420			sta 	AssemblerControl
.8454		60		rts				rts
.8455		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8456						AssertCommand:
.8456		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8458		20 93 9e	jsr $9e93			jsr 	EvaluateInteger 			; the assert test
.845b		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; exit if result is non zero.
.845e		d0 05		bne $8465			bne 	_ACExit
.8460		a9 0a		lda #$0a		lda	#10
.8462		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.8465						_ACExit:
.8465		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8466						CallCommand:
.8466		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8468		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.846b						_CCClear
.846b		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.846c		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; these are optional sequentially.
.846f		e0 04		cpx #$04			cpx 	#4
.8471		d0 f8		bne $846b			bne 	_CCClear
.8473		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8475						_CCCParam:
.8475		b1 30		lda ($30),y			lda 	(codePtr),y
.8477		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8479		d0 09		bne $8484			bne 	_CCCRun6502
.847b		c8		iny				iny 								; skip comma
.847c		e8		inx				inx	 								; next level
.847d		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8480		e0 03		cpx #$03			cpx 	#3
.8482		90 f1		bcc $8475			bcc 	_CCCParam 					; done all 3 ?
.8484						_CCCRun6502:
.8484		5a		phy				phy 								; save position
.8485		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8487		85 37		sta $37				sta 	zTemp0+1
.8489		a5 58		lda $58				lda 	NSMantissa0
.848b		85 36		sta $36				sta 	zTemp0
.848d		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.848f		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8491		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8493		20 98 84	jsr $8498			jsr 	_CCCZTemp0 					; call zTemp0
.8496		7a		ply				ply 								; restore position and exit
.8497		60		rts				rts
.8498						_CCCZTemp0:
.8498		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.849b						ClearCommand:
.849b		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.849d		85 36		sta $36				sta 	0+zTemp0
.849f		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84a1		85 37		sta $37				sta 	1+zTemp0
.84a3						_ClearZeroLoop:
.84a3		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84a5		f0 24		beq $84cb			beq 	_ClearZeroEnd
.84a7		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84a9		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84ab						_ClearOneVariable:
.84ab		91 36		sta ($36),y			sta 	(zTemp0),y
.84ad		c8		iny				iny
.84ae		c0 08		cpy #$08			cpy 	#8
.84b0		d0 f9		bne $84ab			bne 	_ClearOneVariable
.84b2		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84b4		b1 36		lda ($36),y			lda 	(zTemp0),y
.84b6		c9 18		cmp #$18			cmp 	#NSTProcedure
.84b8		d0 04		bne $84be			bne 	_ClearNotProcedure
.84ba		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84bc		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84be						_ClearNotProcedure:
.84be		18		clc				clc 								; go to the next variable
.84bf		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84c1		65 36		adc $36				adc 	zTemp0
.84c3		85 36		sta $36				sta 	zTemp0
.84c5		90 dc		bcc $84a3			bcc 	_ClearZeroLoop
.84c7		e6 37		inc $37				inc 	zTemp0+1
.84c9		80 d8		bra $84a3			bra 	_ClearZeroLoop
.84cb						_ClearZeroEnd:
.84cb		18		clc				clc
.84cc		a5 36		lda $36				lda 	zTemp0
.84ce		69 01		adc #$01			adc 	#1
.84d0		8d 0c 04	sta $040c			sta 	lowMemPtr
.84d3		a5 37		lda $37				lda 	zTemp0+1
.84d5		69 00		adc #$00			adc 	#0
.84d7		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84da		20 87 b0	jsr $b087			jsr 	StackReset
.84dd		20 ed b0	jsr $b0ed			jsr 	StringSystemInitialise
.84e0		20 cb 8e	jsr $8ecb			jsr 	ProcedureScan
.84e3		20 fa 8b	jsr $8bfa			jsr 	Command_Restore
.84e6		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84e9		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84ec		9c 20 04	stz $0420			stz 	AssemblerControl
.84ef		20 15 9b	jsr $9b15			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84f2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84f3						ClearScreen:
.84f3		5a		phy				phy
.84f4		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.84f6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84f9		7a		ply				ply
.84fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84fb						Command_Data:
.84fb		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.84fd		a2 80		ldx #$80			ldx 	#KWC_EOL
.84ff		20 1d 8f	jsr $8f1d			jsr 	ScanForward
.8502		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8503						DimCommand:
.8503		b1 30		lda ($30),y			lda 	(codePtr),y
.8505		29 c0		and #$c0			and 	#$C0
.8507		c9 40		cmp #$40			cmp 	#$40
.8509		d0 7a		bne $8585			bne 	_DCSyntax 				; n o, error.
.850b		b1 30		lda ($30),y			lda 	(codePtr),y
.850d		18		clc				clc
.850e		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8510		85 3f		sta $3f				sta 	zaTemp+1
.8512		c8		iny				iny
.8513		b1 30		lda ($30),y			lda 	(codePtr),y
.8515		c8		iny				iny
.8516		85 3e		sta $3e				sta 	zaTemp
.8518		5a		phy				phy
.8519		a0 02		ldy #$02			ldy 	#2 						; read type byte
.851b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.851d		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.851f		c9 18		cmp #$18			cmp 	#NSTProcedure
.8521		f0 62		beq $8585			beq 	_DCSyntax
.8523		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8525		29 04		and #$04			and 	#NSBIsArray
.8527		f0 64		beq $858d			beq 	_DCType
.8529		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.852b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.852d		d0 59		bne $8588			bne 	_DCRedefine
.852f		7a		ply				ply
.8530		20 90 85	jsr $8590			jsr 	_DCGetSize 				; get array size, check it.
.8533		5a		phy				phy
.8534		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8536		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8538		7a		ply				ply 							; is there a second (e.g. ,x)
.8539		b1 30		lda ($30),y			lda 	(codePtr),y
.853b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.853d		d0 0a		bne $8549			bne 	_DCOneDimension
.853f		c8		iny				iny 							; skip comma
.8540		20 90 85	jsr $8590			jsr 	_DCGetSize 				; get 2nd array size
.8543		5a		phy				phy
.8544		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8546		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8548		7a		ply				ply
.8549						_DCOneDimension:
.8549		5a		phy				phy 							; save position
.854a		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.854c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854e		aa		tax				tax
.854f		c8		iny				iny
.8550		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8552		e8		inx				inx 							; bump them.
.8553		1a		inc a				inc 	a
.8554		20 d1 9e	jsr $9ed1			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8557		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8559		29 e0		and #$e0			and 	#$E0
.855b		d0 23		bne $8580			bne 	_DCSize
.855d		a0 02		ldy #$02			ldy 	#2 						; get base type
.855f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8561		20 9e 85	jsr $859e			jsr 	ScaleByBaseType 		; scale by base type
.8564		a5 36		lda $36				lda 	zTemp0
.8566		a6 37		ldx $37				ldx 	zTemp0+1
.8568		20 d7 9a	jsr $9ad7			jsr 	AllocateXABytes 		; allocate memory
.856b		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.856d		91 3e		sta ($3e),y			sta 	(zaTemp),y
.856f		c8		iny				iny
.8570		8a		txa				txa
.8571		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8573		7a		ply				ply 							; get position back
.8574		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 		; check )
.8577		b1 30		lda ($30),y			lda 	(codePtr),y
.8579		c8		iny				iny 							; consume in case
.857a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.857c		f0 85		beq $8503			beq 	DimCommand
.857e		88		dey				dey 							; undo consume
.857f		60		rts				rts
.8580						_DCSize:
.8580		a9 16		lda #$16		lda	#22
.8582		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.8585						_DCSyntax:
.8585		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.8588						_DCRedefine:
.8588		a9 15		lda #$15		lda	#21
.858a		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.858d						_DCType:
.858d		4c ae a0	jmp $a0ae			jmp 	TypeError
.8590						_DCGetSize:
.8590		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8592		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 	; get array dimension
.8595		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8597		f0 e7		beq $8580			beq 	_DCSize
.8599		c9 fe		cmp #$fe			cmp 	#254
.859b		f0 e3		beq $8580			beq 	_DCSize
.859d		60		rts				rts
.859e						ScaleByBaseType:
.859e		29 10		and #$10			and 	#NSBIsString 			; is it string
.85a0		d0 19		bne $85bb			bne 	_SBBTString
.85a2		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85a4		48		pha				pha
.85a5		a5 36		lda $36				lda 	zTemp0
.85a7		48		pha				pha
.85a8		06 36		asl $36				asl 	zTemp0 					; x 2
.85aa		26 37		rol $37				rol 	zTemp0+1
.85ac		06 36		asl $36				asl 	zTemp0 					; x 4
.85ae		26 37		rol $37				rol 	zTemp0+1
.85b0		68		pla				pla 							; add stacked value = x 5
.85b1		65 36		adc $36				adc 	zTemp0
.85b3		85 36		sta $36				sta 	zTemp0
.85b5		68		pla				pla
.85b6		65 37		adc $37				adc 	zTemp0+1
.85b8		85 37		sta $37				sta 	zTemp0+1
.85ba		60		rts				rts
.85bb						_SBBTString:
.85bb		06 36		asl $36				asl 	zTemp0
.85bd		26 37		rol $37				rol 	zTemp0+1
.85bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85c0						EndCommand:
.85c0		4c 05 84	jmp $8405			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85c3						ForCommand:
.85c3		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85c5		20 21 b0	jsr $b021			jsr 	StackOpen
.85c8		a2 00		ldx #$00			ldx 	#0
.85ca		20 29 99	jsr $9929			jsr 	EvaluateTerm
.85cd		b5 50		lda $50,x			lda 	NSStatus,x
.85cf		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85d1		d0 47		bne $861a			bne		_FCError
.85d3		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85d5		20 d2 8f	jsr $8fd2			jsr 	CheckNextA
.85d8		e8		inx				inx
.85d9		20 93 9e	jsr $9e93			jsr 	EvaluateInteger 			; <from> in +1
.85dc		b1 30		lda ($30),y			lda 	(codePtr),y
.85de		c8		iny				iny 								; consume it
.85df		48		pha				pha 								; save on stack for later
.85e0		c9 ba		cmp #$ba			cmp 	#KWD_DOWNTO
.85e2		f0 04		beq $85e8			beq 	_FCNoSyntax
.85e4		c9 d8		cmp #$d8			cmp 	#KWD_TO
.85e6		d0 35		bne $861d			bne 	_FCSyntaxError
.85e8						_FCNoSyntax:
.85e8		e8		inx				inx
.85e9		20 93 9e	jsr $9e93			jsr 	EvaluateInteger
.85ec		20 66 b0	jsr $b066			jsr 	STKSaveCodePosition 		; save loop back position
.85ef		68		pla				pla 								; restore DOWNTO or TO
.85f0		5a		phy				phy 								; save Y on the stack
.85f1		49 ba		eor #$ba			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85f3		f0 02		beq $85f7			beq 	_FCNotDownTo
.85f5		a9 02		lda #$02			lda 	#2
.85f7						_FCNotDownTo:
.85f7		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85f8		a0 10		ldy #$10			ldy 	#16
.85fa		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85fc		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.85fe		a5 58		lda $58				lda 	NSMantissa0
.8600		91 34		sta ($34),y			sta 	(basicStack),y
.8602		a5 60		lda $60				lda 	NSMantissa1
.8604		c8		iny				iny
.8605		91 34		sta ($34),y			sta 	(basicStack),y
.8607		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8609		a2 01		ldx #$01			ldx 	#1
.860b		20 20 86	jsr $8620			jsr 	FCIntegerToStack
.860e		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8610		a2 02		ldx #$02			ldx 	#2
.8612		20 20 86	jsr $8620			jsr 	FCIntegerToStack
.8615		20 3b 86	jsr $863b			jsr 	CopyIndexToReference
.8618		7a		ply				ply 								; restore position
.8619		60		rts				rts
.861a						_FCError:
.861a		4c ae a0	jmp $a0ae			jmp 	TypeError
.861d						_FCSyntaxError:
.861d		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.8620						FCIntegerToStack:
.8620		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8622		10 03		bpl $8627			bpl	 	_FCNotNegative
.8624		20 ef 9e	jsr $9eef			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8627						_FCNotNegative:
.8627		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8629		91 34		sta ($34),y			sta 	(basicStack),y
.862b		c8		iny				iny
.862c		b5 60		lda $60,x			lda 	NSMantissa1,x
.862e		91 34		sta ($34),y			sta 	(basicStack),y
.8630		c8		iny				iny
.8631		b5 68		lda $68,x			lda 	NSMantissa2,x
.8633		91 34		sta ($34),y			sta 	(basicStack),y
.8635		c8		iny				iny
.8636		b5 70		lda $70,x			lda 	NSMantissa3,x
.8638		91 34		sta ($34),y			sta 	(basicStack),y
.863a		60		rts				rts
.863b						CopyIndexToReference:
.863b		5a		phy				phy
.863c		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.863e		38		sec				sec 								; (because we copy from offset 8)
.863f		b1 34		lda ($34),y			lda 	(basicStack),y
.8641		e9 08		sbc #$08			sbc 	#8
.8643		85 36		sta $36				sta 	zTemp0
.8645		c8		iny				iny
.8646		b1 34		lda ($34),y			lda 	(basicStack),y
.8648		e9 00		sbc #$00			sbc 	#0
.864a		85 37		sta $37				sta 	zTemp0+1
.864c		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.864e		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8650		b1 34		lda ($34),y			lda 	(basicStack),y
.8652		0a		asl a				asl 	a 							; into carry
.8653		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8655		90 14		bcc $866b			bcc 	_CITRNormal
.8657		38		sec				sec
.8658						_CITRNegative:
.8658		a9 00		lda #$00			lda 	#0
.865a		f1 34		sbc ($34),y			sbc 	(basicStack),y
.865c		91 36		sta ($36),y			sta 	(zTemp0),y
.865e		c8		iny				iny
.865f		ca		dex				dex
.8660		d0 f6		bne $8658			bne 	_CITRNegative
.8662		88		dey				dey 								; look at MSB of mantissa
.8663		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8665		09 80		ora #$80			ora 	#$80
.8667		91 36		sta ($36),y			sta 	(zTemp0),y
.8669		7a		ply				ply
.866a		60		rts				rts
.866b						_CITRNormal:
.866b		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.866d		91 36		sta ($36),y			sta 	(zTemp0),y
.866f		c8		iny				iny
.8670		ca		dex				dex
.8671		d0 f8		bne $866b			bne 	_CITRNormal
.8673		7a		ply				ply 								; and exit.
.8674		60		rts				rts
.8675						NextCommand:
.8675		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8677		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8679		20 4e b0	jsr $b04e			jsr 	StackCheckFrame
.867c		5a		phy				phy
.867d		a0 10		ldy #$10			ldy 	#16 						; get the step count
.867f		b1 34		lda ($34),y			lda 	(basicStack),y
.8681		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8683		30 02		bmi $8687			bmi 	_NCStepNeg
.8685		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8687						_NCStepNeg:
.8687		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8689		a2 04		ldx #$04			ldx 	#4 							; count to bump
.868b		18		clc				clc
.868c						_NCBump:
.868c		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.868e		91 34		sta ($34),y			sta 	(basicStack),y
.8690		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8692		c8		iny				iny 								; next byte
.8693		ca		dex				dex 								; do four times
.8694		d0 f6		bne $868c			bne 	_NCBump
.8696		20 3b 86	jsr $863b			jsr		CopyIndexToReference		; copy it to the reference variable.
.8699		a0 10		ldy #$10			ldy 	#16 						; get step count again
.869b		b1 34		lda ($34),y			lda 	(basicStack),y
.869d		0a		asl a				asl 	a 							; sign bit to carry
.869e		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86a0		85 38		sta $38				sta 	zTemp1
.86a2		90 02		bcc $86a6			bcc 	_NCCompRev 					; use if step is +ve
.86a4		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86a6						_NCCompRev:
.86a6		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86a8		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86aa		85 39		sta $39				sta 	zTemp1+1
.86ac		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86ae		38		sec				sec
.86af						_NCCompare:
.86af		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86b1		b1 34		lda ($34),y			lda 	(basicStack),y
.86b3		a4 39		ldy $39				ldy 	zTemp1+1
.86b5		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86b7		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86b9		e6 39		inc $39				inc 	zTemp1+1
.86bb		ca		dex				dex 								; do it 4 times.
.86bc		d0 f1		bne $86af			bne 	_NCCompare
.86be		50 02		bvc $86c2			bvc 	_NCNoOverflow 				; convert to signed comparison
.86c0		49 80		eor #$80			eor 	#$80
.86c2						_NCNoOverflow:
.86c2		7a		ply				ply 								; restore Y position
.86c3		0a		asl a				asl 	a 							; is bit 7 set.
.86c4		90 04		bcc $86ca			bcc 	_NCLoopBack 				; if no , >= so loop back
.86c6		20 40 b0	jsr $b040			jsr 	StackClose 					; exit the loop
.86c9		60		rts				rts
.86ca						_NCLoopBack:
.86ca		20 77 b0	jsr $b077			jsr 	STKLoadCodePosition 		; loop back
.86cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86ce						Command_GOSUB:
.86ce		a2 00		ldx #$00			ldx 	#0
.86d0		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86d3		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86d5		20 21 b0	jsr $b021			jsr 	StackOpen 					; create frame
.86d8		20 66 b0	jsr $b066			jsr 	STKSaveCodePosition 		; save current position
.86db		4c f1 86	jmp $86f1			jmp 	GotoStackX
.86de						Command_RETURN:
.86de		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86e0		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86e2		20 4e b0	jsr $b04e			jsr 	StackCheckFrame
.86e5		20 77 b0	jsr $b077			jsr 	STKLoadCodePosition 		; restore code position
.86e8		20 40 b0	jsr $b040			jsr 	StackClose
.86eb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86ec						GotoCommand:
.86ec		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86ee		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.86f1						GotoStackX:
.86f1		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86f3		48		pha				pha 								; it is slightly inefficient, just in cases.
.86f4		b5 58		lda $58,x			lda 	NSMantissa0,x
.86f6		fa		plx				plx
.86f7		20 cd a6	jsr $a6cd			jsr 	MemorySearch 				; transfer to line number AX.
.86fa		90 05		bcc $8701			bcc 	_GotoError 					; not found, off end.
.86fc		d0 03		bne $8701			bne 	_GotoError 					; not found exactly
.86fe		4c 44 8c	jmp $8c44			jmp 	RunNewLine 					; and go straight to new line code.
.8701						_GotoError:
.8701		a9 0d		lda #$0d		lda	#13
.8703		4c db 8f	jmp $8fdb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8706						IfCommand:
.8706		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8708		20 74 9e	jsr $9e74			jsr 	EvaluateNumber
.870b		b1 30		lda ($30),y			lda 	(codePtr),y
.870d		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.870f		d0 0a		bne $871b			bne 	_IfStructured 				; we still support it.
.8711		c8		iny				iny 								; consume THEN
.8712		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; is it zero
.8715		f0 01		beq $8718			beq 	_IfFail 					; if fail, go to next line
.8717		60		rts				rts 								; if THEN just continue
.8718						_IfFail:
.8718		4c 2c 8c	jmp $8c2c			jmp 	EOLCommand
.871b						_IfStructured:
.871b		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; is it zero
.871e		d0 07		bne $8727			bne 	_IfExit 					; if not, then continue normally.
.8720		a9 bb		lda #$bb			lda 	#KWD_ELSE 					; look for else/endif
.8722		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8724		20 1d 8f	jsr $8f1d			jsr 	ScanForward 				; and run from there
.8727						_IfExit:
.8727		60		rts				rts
.8728						ElseCode:
.8728		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.872a		aa		tax				tax 								; so just go to the structure exit
.872b		20 1d 8f	jsr $8f1d			jsr 	ScanForward
.872e		60		rts				rts
.872f						EndIf:
.872f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8730						Command_Input:
.8730		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8732		8d 28 04	sta $0428			sta 	isInputFlag
.8735		80 03		bra $873a			bra 	Command_IP_Main
.8737						Command_Print:
.8737		9c 28 04	stz $0428			stz 	isInputFlag 				; clear input flag
.873a						Command_IP_Main:
.873a		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.873b						_CPLoop:
.873b		08		php				php 								; save last action flag
.873c		b1 30		lda ($30),y			lda 	(codePtr),y
.873e		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8740		f0 54		beq $8796			beq 	_CPExit
.8742		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8744		f0 50		beq $8796			beq 	_CPExit
.8746		68		pla				pla 								; throw last action flag
.8747		b1 30		lda ($30),y			lda 	(codePtr),y
.8749		c8		iny				iny
.874a		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.874c		f0 45		beq $8793			beq 	_CPContinueWithSameLine
.874e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8750		f0 3c		beq $878e			beq 	_CPTab
.8752		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8754		f0 34		beq $878a			beq 	_CPNewLine
.8756		88		dey				dey 								; undo the get.
.8757		20 dd 94	jsr $94dd			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.875a		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.875c		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.875e		f0 0d		beq $876d			beq 	_CPIsValue 					; no, display it.
.8760		ad 28 04	lda $0428			lda 	isInputFlag 				; if print, dereference and print.
.8763		f0 05		beq $876a			beq 	_CPIsPrint 					; otherwise display.
.8765		20 9f 87	jsr $879f			jsr 	CIInputValue 				; input a value to the reference
.8768		80 20		bra $878a			bra 	_CPNewLine
.876a						_CPIsPrint:
.876a		20 a2 97	jsr $97a2			jsr 	Dereference 				; dereference if required.
.876d						_CPIsValue:
.876d		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.876f		29 10		and #$10			and 	#NSBIsString
.8771		f0 09		beq $877c			beq 	_CPNumber
.8773		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8775		a5 58		lda $58				lda 	NSMantissa0
.8777		20 02 88	jsr $8802			jsr 	CPPrintStringXA
.877a		80 be		bra $873a			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.877c						_CPNumber:
.877c		a9 05		lda #$05			lda 	#5 							; maximum decimals
.877e		20 5b 9d	jsr $9d5b			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8781		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8783		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8785		20 02 88	jsr $8802			jsr 	CPPrintStringXA 			; print it.
.8788		80 b0		bra $873a			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.878a						_CPNewLine:
.878a		a9 0d		lda #$0d			lda 	#13
.878c		80 02		bra $8790			bra 	_CPPrintChar
.878e						_CPTab:
.878e		a9 09		lda #$09			lda 	#9 							; print TAB
.8790						_CPPrintChar:
.8790		20 15 88	jsr $8815			jsr 	CPPrintVector
.8793						_CPContinueWithSameLine:
.8793		38		sec				sec 								; loop round with carry set, which
.8794		80 a5		bra $873b			bra 	_CPLoop 					; will inhibit final CR
.8796						_CPExit:
.8796		28		plp				plp 								; get last action flag
.8797		b0 05		bcs $879e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8799		a9 0d		lda #$0d			lda 	#13 						; print new line
.879b		20 15 88	jsr $8815			jsr 	CPPrintVector
.879e						_CPExit2:
.879e		60		rts				rts
.879f						CIInputValue:
.879f		a2 00		ldx #$00			ldx 	#0 							; input a line.
.87a1						_CIInputLine:
.87a1		20 18 88	jsr $8818			jsr 	CPInputVector 				; get key
.87a4		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.87a6		f0 1f		beq $87c7			beq 	_CIHaveValue
.87a8		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.87aa		f0 11		beq $87bd			beq 	_CIBackspace
.87ac		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.87ae		90 f1		bcc $87a1			bcc 	_CIInputLine
.87b0		e0 50		cpx #$50			cpx 	#80 						; max length
.87b2		b0 ed		bcs $87a1			bcs 	_CIInputLine
.87b4		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.87b7		e8		inx				inx
.87b8		20 15 88	jsr $8815			jsr 	CPPrintVector 				; echo it.
.87bb		80 e4		bra $87a1			bra 	_CIInputLine
.87bd						_CIBackspace:
.87bd		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87bf		f0 e0		beq $87a1			beq 	_CIInputLine
.87c1		20 15 88	jsr $8815			jsr 	CPPrintVector 				; echo it.
.87c4		ca		dex				dex
.87c5		80 da		bra $87a1			bra 	_CIInputLine
.87c7						_CIHaveValue:
.87c7		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.87ca		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87cc		29 10		and #$10			and 	#NSBIsString
.87ce		f0 17		beq $87e7			beq 	_CIAssignNumber 			; assign a number
.87d0		a2 01		ldx #$01			ldx 	#1
.87d2		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87d4		95 58		sta $58,x			sta 	NSMantissa0,x
.87d6		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87d8		95 60		sta $60,x			sta 	NSMantissa1,x
.87da		74 68		stz $68,x			stz 	NSMantissa2,x
.87dc		74 70		stz $70,x			stz 	NSMantissa3,x
.87de		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87e0		95 50		sta $50,x			sta  	NSStatus,x
.87e2		ca		dex				dex 								; X = 0
.87e3		20 54 88	jsr $8854			jsr 	AssignVariable
.87e6		60		rts				rts
.87e7						_CIAssignNumber:
.87e7		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87e9		85 36		sta $36				sta 	zTemp0
.87eb		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87ed		85 37		sta $37				sta 	zTemp0+1
.87ef		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87f1		20 dd 9c	jsr $9cdd			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87f4		90 07		bcc $87fd			bcc 	_CIIsOkay
.87f6		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.87f8		20 15 88	jsr $8815			jsr 	CPPrintVector
.87fb		80 a2		bra $879f			bra 	CIInputValue
.87fd						_CIIsOkay:
.87fd		ca		dex				dex 								; X = 0
.87fe		20 54 88	jsr $8854			jsr 	AssignVariable
.8801		60		rts				rts
.8802						CPPrintStringXA:
.8802		5a		phy				phy
.8803		86 37		stx $37				stx 	zTemp0+1
.8805		85 36		sta $36				sta 	zTemp0
.8807		a0 00		ldy #$00			ldy 	#0
.8809						_PSXALoop:
.8809		b1 36		lda ($36),y			lda 	(zTemp0),y
.880b		f0 06		beq $8813			beq 	_PSXAExit
.880d		20 15 88	jsr $8815			jsr 	CPPrintVector
.8810		c8		iny				iny
.8811		80 f6		bra $8809			bra 	_PSXALoop
.8813						_PSXAExit:
.8813		7a		ply				ply
.8814		60		rts				rts
.8815						CPPrintVector:
.8815		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8818						CPInputVector:
.8818		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.881b						LetCommand:
.881b		a2 00		ldx #$00			ldx 	#0
.881d		b1 30		lda ($30),y			lda 	(codePtr),y
.881f		c9 10		cmp #$10			cmp 	#KWD_AT
.8821		d0 14		bne $8837			bne 	_LCStandard
.8823		c8		iny				iny 								; skip equal
.8824		20 29 99	jsr $9929			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8827		20 a2 97	jsr $97a2			jsr 	Dereference 				; dereference it to a value
.882a		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.882c		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.882e		95 50		sta $50,x			sta 	NSStatus,x
.8830		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8832		d0 0f		bne $8843			bne 	_LCMain
.8834		4c ae a0	jmp $a0ae			jmp 	TypeError 					; was a reference before.
.8837						_LCStandard:
.8837		ad c7 94	lda $94c7			lda 	PrecedenceLevel+"*"			; precedence > this
.883a		20 e1 94	jsr $94e1			jsr 	EvaluateExpressionAtPrecedence
.883d		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.883f		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8841		f0 0e		beq $8851			beq 	_LetGoProc 					; it's a procedure call.
.8843						_LCMain:
.8843		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8845		20 d2 8f	jsr $8fd2			jsr 	CheckNextA
.8848		e8		inx				inx 								; RHS
.8849		20 6b 9e	jsr $9e6b			jsr 	EvaluateValue
.884c		ca		dex				dex
.884d		20 54 88	jsr $8854			jsr 	AssignVariable
.8850		60		rts				rts
.8851						_LetGoProc:
.8851		4c 02 8b	jmp $8b02			jmp 	CallProcedure
.8854						AssignVariable:
.8854		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8856		48		pha				pha 								; save a copy
.8857		55 51		eor $51,x			eor 	NSStatus+1,x
.8859		29 10		and #$10			and 	#NSBIsString
.885b		d0 0b		bne $8868			bne 	_ASError
.885d		68		pla				pla 								; get back
.885e		29 10		and #$10			and 	#NSBIsString 				; check type
.8860		d0 03		bne $8865			bne 	_ASString
.8862		4c e0 96	jmp $96e0			jmp 	AssignNumber
.8865						_ASString:
.8865		4c 3e 97	jmp $973e			jmp 	AssignString
.8868						_ASError:
.8868		4c ae a0	jmp $a0ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.886b						Command_List:
.886b		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.886e		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8870		20 67 80	jsr $8067			jsr 	SNDCommand
.8873		b1 30		lda ($30),y			lda 	(codePtr),y
.8875		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8877		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8879		f0 6e		beq $88e9			beq 	_CLListProcedure
.887b		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.887d		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.887f		a9 ff		lda #$ff			lda 	#$FF
.8881		85 5f		sta $5f				sta 	NSMantissa0+7
.8883		85 67		sta $67				sta 	NSMantissa1+7
.8885		b1 30		lda ($30),y			lda 	(codePtr),y
.8887		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8889		f0 1a		beq $88a5			beq 	_CLSecond
.888b		20 66 89	jsr $8966			jsr 	CLIsDigit 					; if not digit, list all
.888e		b0 20		bcs $88b0			bcs 	_CLStart
.8890		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8892		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.8895		b1 30		lda ($30),y			lda 	(codePtr),y
.8897		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8899		f0 0a		beq $88a5			beq 	_CLSecond 					; if so go get it
.889b		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.889d		85 5f		sta $5f				sta 	NSMantissa0+7
.889f		a5 64		lda $64				lda 	NSMantissa1+4
.88a1		85 67		sta $67				sta 	NSMantissa1+7
.88a3		80 0b		bra $88b0			bra 	_CLStart
.88a5						_CLSecond:
.88a5		c8		iny				iny 								; consume comma
.88a6		20 66 89	jsr $8966			jsr 	CLIsDigit 					; digit found
.88a9		b0 05		bcs $88b0			bcs 	_CLStart 					; if not, continue listing
.88ab		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.88ad		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.88b0						_CLStart
.88b0		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88b2		85 30		sta $30				sta 	codePtr
.88b4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88b6		85 31		sta $31				sta 	codePtr+1
.88b8						_CLLoop:
.88b8		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.88bb		f0 27		beq $88e4			beq 	_CLBreak
.88bd		b2 30		lda ($30)			lda 	(codePtr)
.88bf		f0 20		beq $88e1			beq 	_CLExit
.88c1		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88c3		20 55 89	jsr $8955			jsr 	CLCompareLineNo
.88c6		90 0c		bcc $88d4			bcc 	_CLNext
.88c8		a2 07		ldx #$07			ldx 	#7
.88ca		20 55 89	jsr $8955			jsr 	CLCompareLineNo
.88cd		f0 02		beq $88d1			beq 	_CLDoThisOne
.88cf		b0 03		bcs $88d4			bcs 	_CLNext
.88d1						_CLDoThisOne:
.88d1		20 42 89	jsr $8942			jsr 	CLListOneLine 				; routine to list the current line.
.88d4						_CLNext:
.88d4		18		clc				clc
.88d5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88d7		65 30		adc $30				adc 	codePtr
.88d9		85 30		sta $30				sta 	codePtr
.88db		90 02		bcc $88df			bcc 	_CREExit
.88dd		e6 31		inc $31				inc 	codePtr+1 					; carry
.88df						_CREExit:
.88df		80 d7		bra $88b8			bra 	_CLLoop
.88e1						_CLExit:
.88e1		4c 05 84	jmp $8405			jmp 	WarmStart
.88e4						_CLBreak:
.88e4		a9 01		lda #$01		lda	#1
.88e6		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.88e9						_CLListProcedure:
.88e9		b1 30		lda ($30),y			lda 	(codePtr),y
.88eb		85 38		sta $38				sta 	zTemp1
.88ed		c8		iny				iny
.88ee		b1 30		lda ($30),y			lda 	(codePtr),y
.88f0		85 39		sta $39				sta 	zTemp1+1
.88f2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88f4		85 30		sta $30				sta 	codePtr
.88f6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88f8		85 31		sta $31				sta 	codePtr+1
.88fa						_CLLPSearch:
.88fa		b2 30		lda ($30)			lda 	(codePtr)
.88fc		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.88fe		f0 e1		beq $88e1			beq 	_CLExit
.8900		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8902		b1 30		lda ($30),y			lda 	(codePtr),y
.8904		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8906		d0 0e		bne $8916			bne 	_CLLPNext
.8908		c8		iny				iny 								; check if PROC this.
.8909		b1 30		lda ($30),y			lda 	(codePtr),y
.890b		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.890d		d0 07		bne $8916			bne 	_CLLPNext
.890f		c8		iny				iny
.8910		b1 30		lda ($30),y			lda 	(codePtr),y
.8912		c5 39		cmp $39				cmp 	zTemp1+1
.8914		f0 0d		beq $8923			beq 	_CLLPFound
.8916						_CLLPNext:
.8916		18		clc				clc
.8917		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8919		65 30		adc $30				adc 	codePtr
.891b		85 30		sta $30				sta 	codePtr
.891d		90 02		bcc $8921			bcc 	_CREExit
.891f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8921						_CREExit:
.8921		80 d7		bra $88fa			bra 	_CLLPSearch
.8923						_CLLPFound:
.8923		b2 30		lda ($30)			lda 	(codePtr)
.8925		f0 ba		beq $88e1			beq 	_CLExit
.8927		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8929		b1 30		lda ($30),y			lda 	(codePtr),y
.892b		48		pha				pha
.892c		20 42 89	jsr $8942			jsr 	CLListOneLine 				; list line and go forward
.892f		18		clc				clc
.8930		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8932		65 30		adc $30				adc 	codePtr
.8934		85 30		sta $30				sta 	codePtr
.8936		90 02		bcc $893a			bcc 	_CREExit
.8938		e6 31		inc $31				inc 	codePtr+1 					; carry
.893a						_CREExit:
.893a		68		pla				pla 								; reached ENDPROC ?
.893b		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.893d		d0 e4		bne $8923			bne 	_CLLPFound
.893f		4c 05 84	jmp $8405			jmp 	WarmStart
.8942						CLListOneLine:
.8942		20 80 8f	jsr $8f80			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8945		20 7b 80	jsr $807b			jsr 	TKListConvertLine 			; convert line into token Buffer
.8948		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.894a		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.894c		20 34 90	jsr $9034			jsr 	PrintStringXA
.894f		a9 0d		lda #$0d			lda 	#13 						; new line
.8951		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8954		60		rts				rts
.8955						CLCompareLineNo:
.8955		38		sec				sec
.8956		a0 01		ldy #$01			ldy 	#1
.8958		b1 30		lda ($30),y			lda 	(codePtr),y
.895a		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.895c		85 36		sta $36				sta 	zTemp0
.895e		c8		iny				iny
.895f		b1 30		lda ($30),y			lda 	(codePtr),y
.8961		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8963		05 36		ora $36				ora 	zTemp0
.8965		60		rts				rts
.8966						CLIsDigit:
.8966		b1 30		lda ($30),y			lda 	(codePtr),y
.8968		c9 30		cmp #$30			cmp 	#"0"
.896a		90 03		bcc $896f			bcc	 	_CLIDExitFalse
.896c		c9 3a		cmp #$3a			cmp 	#"9"+1
.896e		60		rts				rts
.896f						_CLIDExitFalse:
.896f		38		sec				sec
.8970		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8971						Command_Load:
.8971		20 7e 9e	jsr $9e7e			jsr 	EvaluateString 				; file name to load
.8974		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8976		a5 36		lda $36				lda 	zTemp0
.8978		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.897b		b0 2a		bcs $89a7			bcs 	_CLDriveNotFound 			; drive not found (apparently)
.897d		20 bb 8a	jsr $8abb			jsr 	NewProgram 					; does the actual NEW.
.8980						_CLLoop:
.8980		20 ac 89	jsr $89ac			jsr 	LoadReadLine 				; get next line.
.8983		f0 10		beq $8995			beq 	_CLExit 					; end, exit.
.8985		20 85 80	jsr $8085			jsr 	TKTokeniseLine 				; tokenise the line.
.8988		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.898b		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.898e		f0 f0		beq $8980			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8990		20 e0 83	jsr $83e0			jsr 	EditProgramCode 			; do the editing etc.
.8993		80 eb		bra $8980			bra 	_CLLoop
.8995						_CLExit:
.8995		a9 4f		lda #$4f			lda 	#"O"
.8997		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.899a		a9 6b		lda #$6b			lda 	#"k"
.899c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.899f		a9 0d		lda #$0d			lda 	#13
.89a1		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.89a4		4c 05 84	jmp $8405			jmp 	WarmStart
.89a7						_CLDriveNotFound:
.89a7		a9 1a		lda #$1a		lda	#26
.89a9		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.89ac						LoadReadLine:
.89ac		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.89ae		20 c8 89	jsr $89c8			jsr 	LoadReadCharacter
.89b1		f0 14		beq $89c7			beq 	_LRLExit 					; eof ?
.89b3		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.89b5		90 f5		bcc $89ac			bcc 	LoadReadLine
.89b7						_LRLLoop:
.89b7		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.89ba		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.89bd		e8		inx				inx
.89be		20 c8 89	jsr $89c8			jsr 	LoadReadCharacter 			; next line
.89c1		c9 20		cmp #$20			cmp 	#' ' 						; until < space ctrl/eof.
.89c3		b0 f2		bcs $89b7			bcs 	_LRLLoop
.89c5		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.89c7						_LRLExit:
.89c7		60		rts				rts
.89c8						LoadReadCharacter:
.89c8		da		phx				phx
.89c9		5a		phy				phy
.89ca		20 49 80	jsr $8049			jsr 	KNLReadByte 				; read a byte
.89cd		90 06		bcc $89d5			bcc		_LRCExit 					; read okay.
.89cf		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.89d1		d0 13		bne $89e6			bne 	_LRCFatal
.89d3		a9 00		lda #$00			lda 	#0
.89d5						_LRCExit:
.89d5		c9 08		cmp #$08			cmp 	#8 							; convert tab to space
.89d7		d0 02		bne $89db			bne 	_LRCNotTab
.89d9		a9 20		lda #$20			lda 	#' '
.89db						_LRCNotTab:
.89db		c9 0a		cmp #$0a			cmp 	#$0A
.89dd		d0 02		bne $89e1			bne 	_LRCNotLF
.89df		a9 0d		lda #$0d			lda 	#$0D
.89e1						_LRCNotLF:
.89e1		7a		ply				ply
.89e2		fa		plx				plx
.89e3		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.89e5		60		rts				rts
.89e6						_LRCFatal:
.89e6		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.89e8		f0 05		beq $89ef			beq 	_LRFNotFound
.89ea		a9 1b		lda #$1b		lda	#27
.89ec		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.89ef						_LRFNotFound:
.89ef		a9 19		lda #$19		lda	#25
.89f1		4c db 8f	jmp $8fdb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.89f4						Command_LOCAL:
.89f4		a2 00		ldx #$00			ldx 	#0 							; at level 0
.89f6		20 02 8a	jsr $8a02			jsr 	LocaliseNextTerm 			; convert term to a local.
.89f9		b1 30		lda ($30),y			lda 	(codePtr),y
.89fb		c8		iny				iny
.89fc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89fe		f0 f4		beq $89f4			beq 	Command_LOCAL 				; if so, localise another variable.
.8a00		88		dey				dey 								; unpick pre-get
.8a01		60		rts				rts
.8a02						LocaliseNextTerm:
.8a02		20 29 99	jsr $9929			jsr 	EvaluateTerm 				; evaluate the term
.8a05		b5 50		lda $50,x			lda 	NSStatus,x
.8a07		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8a09		f0 5c		beq $8a67			beq		_LNTError
.8a0b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8a0d		85 36		sta $36				sta 	zTemp0
.8a0f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8a11		85 37		sta $37				sta  	zTemp0+1
.8a13		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8a15		29 10		and #$10			and 	#NSBIsString
.8a17		d0 1e		bne $8a37			bne 	_LNTPushString
.8a19		5a		phy				phy
.8a1a		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8a1c						_LNTPushNumLoop:
.8a1c		b1 36		lda ($36),y			lda		(zTemp0),y
.8a1e		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a21		c8		iny				iny
.8a22		c0 05		cpy #$05			cpy 	#5
.8a24		d0 f6		bne $8a1c			bne 	_LNTPushNumLoop
.8a26		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8a28		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a2b		a5 37		lda $37				lda 	zTemp0+1
.8a2d		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a30		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8a32		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a35		7a		ply				ply
.8a36		60		rts				rts
.8a37						_LNTPushString:
.8a37		5a		phy				phy
.8a38		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8a3a		85 38		sta $38				sta 	zTemp1
.8a3c		a0 01		ldy #$01			ldy 	#1
.8a3e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a40		85 39		sta $39				sta 	zTemp1+1
.8a42		a0 00		ldy #$00			ldy 	#0 							; output string
.8a44		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8a46		f0 0a		beq $8a52			beq 	_LNTStringOut
.8a48						_LNTPushStrLoop:
.8a48		b1 38		lda ($38),y			lda 	(zTemp1),y
.8a4a		f0 06		beq $8a52			beq 	_LNTStringOut
.8a4c		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a4f		c8		iny				iny
.8a50		80 f6		bra $8a48			bra 	_LNTPushStrLoop
.8a52						_LNTStringOut:
.8a52		98		tya				tya									; output length (chars written).
.8a53		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a56		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8a58		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a5b		b5 60		lda $60,x			lda 	NSMantissa1,x
.8a5d		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a60		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8a62		20 00 b0	jsr $b000			jsr 	StackPushByte
.8a65		7a		ply				ply
.8a66		60		rts				rts
.8a67						_LNTError:
.8a67		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.8a6a						LocalPopValue:
.8a6a		20 18 b0	jsr $b018			jsr 	StackPopByte
.8a6d		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8a6f		d0 17		bne $8a88			bne 	_LPVString
.8a71		20 18 b0	jsr $b018			jsr 	StackPopByte 				; address
.8a74		85 37		sta $37				sta 	zTemp0+1
.8a76		20 18 b0	jsr $b018			jsr 	StackPopByte
.8a79		85 36		sta $36				sta 	zTemp0
.8a7b		5a		phy				phy
.8a7c		a0 04		ldy #$04			ldy 	#4 							; copy back
.8a7e						_LPVNumberCopy:
.8a7e		20 18 b0	jsr $b018			jsr 	StackPopByte
.8a81		91 36		sta ($36),y			sta 	(zTemp0),y
.8a83		88		dey				dey
.8a84		10 f8		bpl $8a7e			bpl 	_LPVNumberCopy
.8a86		7a		ply				ply 								; and complete
.8a87		60		rts				rts
.8a88						_LPVString:
.8a88		20 18 b0	jsr $b018			jsr 	StackPopByte 				; address of record copied to zTemp0
.8a8b		85 37		sta $37				sta 	zTemp0+1
.8a8d		20 18 b0	jsr $b018			jsr 	StackPopByte
.8a90		85 36		sta $36				sta 	zTemp0
.8a92		5a		phy				phy
.8a93		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8a95		85 38		sta $38				sta 	zTemp1
.8a97		a0 01		ldy #$01			ldy 	#1
.8a99		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a9b		85 39		sta $39				sta 	zTemp1+1
.8a9d		20 18 b0	jsr $b018			jsr 	StackPopByte 				; # chars to get => y
.8aa0		a8		tay				tay
.8aa1		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8aa3		f0 0e		beq $8ab3			beq 	_LPVStringCopied
.8aa5		a9 00		lda #$00			lda 	#0 							; NULL on end
.8aa7		91 38		sta ($38),y			sta 	(zTemp1),y
.8aa9						_LPVStringCopy:
.8aa9		88		dey				dey
.8aaa		30 07		bmi $8ab3			bmi 	_LPVStringCopied
.8aac		20 18 b0	jsr $b018			jsr 	StackPopByte
.8aaf		91 38		sta ($38),y			sta 	(zTemp1),y
.8ab1		80 f6		bra $8aa9			bra 	_LPVStringCopy
.8ab3						_LPVStringCopied:
.8ab3		fa		plx				plx
.8ab4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8ab5						NewCommand:
.8ab5		20 bb 8a	jsr $8abb			jsr 	NewProgram 					; does the actual NEW.
.8ab8		4c 05 84	jmp $8405			jmp 	WarmStart 					; and warm starts straight away.
.8abb						NewProgram:
.8abb		20 af a6	jsr $a6af			jsr 	MemoryNew
.8abe		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8ac1		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear everything.
.8ac4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8ac5						PokeBCommand:
.8ac5		a9 01		lda #$01			lda 	#1
.8ac7		80 0c		bra $8ad5			bra 	PokeCommand
.8ac9						PokeWCommand:
.8ac9		a9 02		lda #$02			lda 	#2
.8acb		80 08		bra $8ad5			bra 	PokeCommand
.8acd						PokeLCommand:
.8acd		a9 03		lda #$03			lda 	#3
.8acf		80 04		bra $8ad5			bra 	PokeCommand
.8ad1						PokeDCommand:
.8ad1		a9 04		lda #$04			lda 	#4
.8ad3		80 00		bra $8ad5			bra 	PokeCommand
.8ad5						PokeCommand:
.8ad5		48		pha				pha 								; save count on stack
.8ad6		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8ad8		20 a6 9e	jsr $9ea6			jsr		Evaluate16BitInteger 		; address
.8adb		20 ca 8f	jsr $8fca			jsr 	CheckComma
.8ade		e8		inx				inx
.8adf		20 93 9e	jsr $9e93			jsr		EvaluateInteger 			; data
.8ae2		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8ae4		85 36		sta $36				sta 	zTemp0
.8ae6		a5 60		lda $60				lda 	NSMantissa1
.8ae8		85 37		sta $37				sta 	zTemp0+1
.8aea		68		pla				pla 								; count -> zTemp1
.8aeb		85 38		sta $38				sta 	zTemp1
.8aed		5a		phy				phy 								; save Y position.
.8aee		a0 00		ldy #$00			ldy 	#0 							; index to write
.8af0		a2 00		ldx #$00			ldx 	#0 							; index to read
.8af2						_PCLoop:
.8af2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8af4		91 36		sta ($36),y			sta 	(zTemp0),y
.8af6		c8		iny				iny 								; next byte to write
.8af7		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8af8		18		clc				clc
.8af9		69 08		adc #$08			adc 	#MathStackSize
.8afb		aa		tax				tax
.8afc		c6 38		dec $38				dec 	zTemp1 						; done them all
.8afe		d0 f2		bne $8af2			bne 	_PCLoop
.8b00		7a		ply				ply 								; restore position.
.8b01		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8b02						CallProcedure:
.8b02		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8b04		b1 30		lda ($30),y			lda 	(codePtr),y
.8b06		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8b08		f0 0c		beq $8b16			beq 	_CPEndParam
.8b0a						_CPParamLoop:
.8b0a		20 6b 9e	jsr $9e6b			jsr 	EvaluateValue 				; get parameter onto stack
.8b0d		e8		inx				inx 								; bump next stack
.8b0e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b10		c8		iny				iny
.8b11		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8b13		f0 f5		beq $8b0a			beq 	_CPParamLoop
.8b15		88		dey				dey 								; unpick.
.8b16						_CPEndParam:
.8b16		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8b19		c8		iny				iny									; skip right bracket
.8b1a		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8b1c		20 21 b0	jsr $b021			jsr 	StackOpen
.8b1f		20 66 b0	jsr $b066			jsr 	STKSaveCodePosition 		; save loop position
.8b22		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8b24		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8b26		a5 60		lda $60				lda 	NSMantissa1
.8b28		85 37		sta $37				sta 	zTemp0+1
.8b2a		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8b2c		b2 36		lda ($36)			lda 	(zTemp0)
.8b2e		85 30		sta $30				sta 	safePtr
.8b30		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b32		85 31		sta $31				sta 	safePtr+1
.8b34		c8		iny				iny
.8b35		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b37		85 32		sta $32				sta 	safePtr+2
.8b39		c8		iny				iny
.8b3a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b3c		85 33		sta $33				sta 	safePtr+3
.8b3e		c8		iny				iny 								; get Y offset -> Y
.8b3f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b41		a8		tay				tay
.8b42		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8b44		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8b47		f0 13		beq $8b5c			beq 	_ParamExit 					; if so, exit.
.8b49						_ParamExtract:
.8b49		ca		dex				dex 								; put a local term on the level before
.8b4a		20 02 8a	jsr $8a02			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8b4d		20 54 88	jsr $8854			jsr 	AssignVariable 				; assign stacked value to the variable.
.8b50		e8		inx				inx 								; advance to next parameter to do.
.8b51		e8		inx				inx
.8b52		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8b55		f0 05		beq $8b5c			beq 	_ParamExit
.8b57		20 ca 8f	jsr $8fca			jsr 	CheckComma 					; comma seperating parameters
.8b5a		80 ed		bra $8b49			bra 	_ParamExtract
.8b5c						_ParamExit:
.8b5c		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 			; check )
.8b5f		60		rts				rts 								; and continue from here
.8b60						Command_ENDPROC:
.8b60		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8b62		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8b64		20 4e b0	jsr $b04e			jsr 	StackCheckFrame
.8b67		20 77 b0	jsr $b077			jsr 	STKLoadCodePosition 		; restore code position
.8b6a		20 40 b0	jsr $b040			jsr 	StackClose
.8b6d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8b6e						Command_Read:
.8b6e		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8b70		20 29 99	jsr $9929			jsr 	EvaluateTerm
.8b73		b5 50		lda $50,x			lda 	NSStatus,x
.8b75		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8b77		f0 4f		beq $8bc8			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8b79		20 11 8c	jsr $8c11			jsr 	SwapDataCodePtrs 			; swap code and data
.8b7c		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8b7f		d0 25		bne $8ba6			bne 	_CRContinueData  			; forward for the next one.
.8b81		b2 30		lda ($30)			lda 	(codePtr)
.8b83		f0 1c		beq $8ba1			beq 	_CRNoData
.8b85						_CRKeepSearching:
.8b85		a9 b8		lda #$b8			lda 	#KWD_DATA 					; scan for instruction
.8b87		a2 80		ldx #$80			ldx 	#KWC_EOL
.8b89		20 1d 8f	jsr $8f1d			jsr 	ScanForward
.8b8c		c9 b8		cmp #$b8			cmp 	#KWD_DATA 					; found data ?
.8b8e		f0 16		beq $8ba6			beq 	_CRHaveData 				; found it
.8b90		18		clc				clc
.8b91		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b93		65 30		adc $30				adc 	codePtr
.8b95		85 30		sta $30				sta 	codePtr
.8b97		90 02		bcc $8b9b			bcc 	_CREExit
.8b99		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b9b						_CREExit:
.8b9b		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8b9d		b2 30		lda ($30)			lda 	(codePtr)
.8b9f		d0 e4		bne $8b85			bne 	_CRKeepSearching
.8ba1						_CRNoData:
.8ba1		a9 0b		lda #$0b		lda	#11
.8ba3		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.8ba6						_CRHaveData:
.8ba6						_CRContinueData:
.8ba6		a2 01		ldx #$01			ldx 	#1
.8ba8		20 6b 9e	jsr $9e6b			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8bab		ca		dex				dex
.8bac		20 54 88	jsr $8854			jsr		AssignVariable 				; do the assignment
.8baf		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8bb2		b1 30		lda ($30),y			lda 	(codePtr),y
.8bb4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8bb6		d0 04		bne $8bbc			bne 	_CRSwapBack
.8bb8		c8		iny				iny 								; consume comma
.8bb9		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8bbc						_CRSwapBack:
.8bbc		20 11 8c	jsr $8c11			jsr 	SwapDataCodePtrs			; swap them back.
.8bbf		b1 30		lda ($30),y			lda 	(codePtr),y
.8bc1		c8		iny				iny
.8bc2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bc4		f0 a8		beq $8b6e			beq 	Command_Read 				; if so go round again.
.8bc6		88		dey				dey 								; unpick get.
.8bc7		60		rts				rts
.8bc8						_CRSyntax:
.8bc8		4c a4 a0	jmp $a0a4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8bcb						RemCommand:
.8bcb		b1 30		lda ($30),y			lda 	(codePtr),y
.8bcd		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8bcf		d0 06		bne $8bd7			bne 	_RMExit
.8bd1		c8		iny				iny 								; point to offset
.8bd2		98		tya				tya 								; A = offset position
.8bd3		38		sec				sec 								; add size +1 hence SEC
.8bd4		71 30		adc ($30),y			adc 	(codePtr),y
.8bd6		a8		tay				tay 								; make current position.
.8bd7						_RMExit:
.8bd7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8bd8						Command_REPEAT:
.8bd8		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8bda		20 21 b0	jsr $b021			jsr 	StackOpen
.8bdd		20 66 b0	jsr $b066			jsr 	STKSaveCodePosition 		; save loop position
.8be0		60		rts				rts
.8be1						Command_UNTIL:
.8be1		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8be3		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8be5		20 4e b0	jsr $b04e			jsr 	StackCheckFrame
.8be8		a2 00		ldx #$00			ldx 	#0
.8bea		20 74 9e	jsr $9e74			jsr 	EvaluateNumber 				; work out the number
.8bed		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; check if zero
.8bf0		f0 04		beq $8bf6			beq 	_CULoopBack 				; if so keep looping
.8bf2		20 40 b0	jsr $b040			jsr 	StackClose		 			; return
.8bf5		60		rts				rts
.8bf6						_CULoopBack:
.8bf6		20 77 b0	jsr $b077			jsr 	STKLoadCodePosition 		; loop back
.8bf9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8bfa						Command_Restore:
.8bfa		20 11 8c	jsr $8c11			jsr 	SwapDataCodePtrs 			; swap code and data
.8bfd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bff		85 30		sta $30				sta 	codePtr
.8c01		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c03		85 31		sta $31				sta 	codePtr+1
.8c05		20 11 8c	jsr $8c11			jsr 	SwapDataCodePtrs 			; put them back
.8c08		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8c0a		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8c0d		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8c10		60		rts				rts
.8c11						SwapDataCodePtrs:
.8c11		da		phx				phx
.8c12		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8c14						_SDCPLoop:
.8c14		b5 30		lda $30,x			lda 	safePtr,x
.8c16		48		pha				pha
.8c17		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8c1a		95 30		sta $30,x			sta 	safePtr,x
.8c1c		68		pla				pla
.8c1d		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8c20		ca		dex				dex
.8c21		10 f1		bpl $8c14			bpl 	_SDCPLoop
.8c23		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8c26		8c 1b 04	sty $041b			sty 	dataPointer+4
.8c29		a8		tay				tay
.8c2a		fa		plx				plx
.8c2b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8c2c						EOLCommand:
.8c2c		18		clc				clc
.8c2d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c2f		65 30		adc $30				adc 	codePtr
.8c31		85 30		sta $30				sta 	codePtr
.8c33		90 02		bcc $8c37			bcc 	_CREExit
.8c35		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c37						_CREExit:
.8c37		80 0b		bra $8c44			bra 	RunNewLine
.8c39						CommandRUN:
.8c39		20 9b 84	jsr $849b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8c3c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c3e		85 30		sta $30				sta 	codePtr
.8c40		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c42		85 31		sta $31				sta 	codePtr+1
.8c44						RunNewLine:
.8c44		b2 30		lda ($30)			lda 	(codePtr)
.8c46		f0 7b		beq $8cc3			beq 	CRNoProgram         		; no then END.
.8c48		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8c4a		9a		txs				txs
.8c4b						RUNCodePointerLine:
.8c4b		a0 02		ldy #$02			ldy 	#2 							; start of program
.8c4d						_CRIncMainLoop:
.8c4d		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8c50		d0 22		bne $8c74			bne 	_CRNoBreakCheck
.8c52		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8c55		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8c58		f0 64		beq $8cbe			beq 	_CRBreak
.8c5a		a5 01		lda $01				lda 	1 							; save I/O 0
.8c5c		48		pha				pha
.8c5d		64 01		stz $01				stz 	1 							; access I/O Page 0
.8c5f		38		sec				sec 								; calculate timer - LastTick
.8c60		ad 59 d6	lda $d659			lda 	$D659
.8c63		aa		tax				tax 								; saving timer in X
.8c64		ed 5c 06	sbc $065c			sbc 	LastTick
.8c67		c9 03		cmp #$03			cmp 	#3
.8c69		90 06		bcc $8c71			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8c6b		8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.8c6e		20 51 9f	jsr $9f51			jsr 	TickHandler 							; go do the code.
.8c71						_NoFireTick:
.8c71		68		pla				pla 								; restore I/O 0
.8c72		85 01		sta $01				sta 	1
.8c74						_CRNoBreakCheck:
.8c74		c8		iny				iny									; next token
.8c75						_CRMainLoop:
.8c75		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8c78		b1 30		lda ($30),y			lda 	(codePtr),y
.8c7a		10 10		bpl $8c8c			bpl 	_CRNotKeyword				; not a token.
.8c7c		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8c7e		b0 04		bcs $8c84			bcs 	_CRIsKeyword
.8c80		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8c82		b0 34		bcs $8cb8			bcs		_CRSyntaxError
.8c84						_CRIsKeyword:
.8c84		c8		iny				iny 								; consume command
.8c85		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8c86		aa		tax				tax 								; put in X for vector jump
.8c87		20 bb 8c	jsr $8cbb			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8c8a		80 e9		bra $8c75			bra 	_CRMainLoop 				; and loop round
.8c8c						_CRNotKeyword:
.8c8c		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8c8e		f0 bd		beq $8c4d			beq 	_CRIncMainLoop
.8c90		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8c92		90 05		bcc $8c99			bcc 	_CRNotVariable
.8c94						_CRGoLet:
.8c94		20 1b 88	jsr $881b			jsr 	LetCommand
.8c97		80 dc		bra $8c75			bra 	_CRMainLoop
.8c99						_CRNotVariable:
.8c99		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8c9b		f0 f7		beq $8c94			beq 	_CRGoLet
.8c9d		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8c9f		f0 f3		beq $8c94			beq 	_CRGoLet
.8ca1		c9 21		cmp #$21			cmp 	#KWD_PLING
.8ca3		f0 ef		beq $8c94			beq 	_CRGoLet
.8ca5		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8ca7		f0 09		beq $8cb2			beq 	_CRGoRem
.8ca9		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8cab		d0 0b		bne $8cb8			bne 	_CRSyntaxError
.8cad		20 77 82	jsr $8277			jsr 	LabelHere
.8cb0		80 c3		bra $8c75			bra 	_CRMainLoop
.8cb2						_CRGoRem:
.8cb2		c8		iny				iny
.8cb3		20 cb 8b	jsr $8bcb			jsr 	RemCommand
.8cb6		80 bd		bra $8c75			bra 	_CRMainLoop
.8cb8						_CRSyntaxError:
.8cb8		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.8cbb						_CRCallVector0:
.8cbb		7c 5a 8d	jmp ($8d5a,x)			jmp 	(VectorSet0,x)
.8cbe						_CRBreak:
.8cbe		a9 01		lda #$01		lda	#1
.8cc0		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.8cc3						CRNoProgram:
.8cc3		4c c0 85	jmp $85c0			jmp 	EndCommand
.8cc6						Shift1Command:
.8cc6		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc8		c8		iny				iny
.8cc9		0a		asl a				asl 	a
.8cca		aa		tax				tax
.8ccb		7c 0c 8e	jmp ($8e0c,x)			jmp 	(VectorSet1,x)
.8cce						Shift2Command:
.8cce		b1 30		lda ($30),y			lda 	(codePtr),y
.8cd0		c8		iny				iny
.8cd1		0a		asl a				asl 	a
.8cd2		aa		tax				tax
.8cd3		7c 3e 8e	jmp ($8e3e,x)			jmp 	(VectorSet2,x)
.8cd6						Unused1:
.8cd6						Unused2:
.8cd6						Unused3:
.8cd6						Unused4:
.8cd6		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
>8cd9								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8cda						VectorSetPunc:
>8cda		93 92					.word	ShiftLeft                        ; $00 <<
>8cdc		7e 90					.word	BinaryCompareLessEqual           ; $01 <=
>8cde		74 90					.word	BinaryCompareNotEqual            ; $02 <>
>8ce0		a4 a0					.word	SyntaxError                      ; $03 !!3
>8ce2		a4 a0					.word	SyntaxError                      ; $04 ><
>8ce4		88 90					.word	BinaryCompareGreaterEqual        ; $05 >=
>8ce6		96 92					.word	ShiftRight                       ; $06 >>
>8ce8		a4 a0					.word	SyntaxError                      ; $07 !!7
>8cea		a4 a0					.word	SyntaxError                      ; $08 !!8
>8cec		a4 a0					.word	SyntaxError                      ; $09 !!9
>8cee		a4 a0					.word	SyntaxError                      ; $0a !!10
>8cf0		a4 a0					.word	SyntaxError                      ; $0b !!11
>8cf2		a4 a0					.word	SyntaxError                      ; $0c !!12
>8cf4		a4 a0					.word	SyntaxError                      ; $0d !!13
>8cf6		a4 a0					.word	SyntaxError                      ; $0e !!14
>8cf8		a4 a0					.word	SyntaxError                      ; $0f !!15
>8cfa		a4 a0					.word	SyntaxError                      ; $10 @
>8cfc		a4 a0					.word	SyntaxError                      ; $11 !!17
>8cfe		a4 a0					.word	SyntaxError                      ; $12 !!18
>8d00		a4 a0					.word	SyntaxError                      ; $13 [
>8d02		3f 91					.word	IntegerDivide                    ; $14 \
>8d04		a4 a0					.word	SyntaxError                      ; $15 ]
>8d06		d1 93					.word	EorInteger                       ; $16 ^
>8d08		a4 a0					.word	SyntaxError                      ; $17 _
>8d0a		a4 a0					.word	SyntaxError                      ; $18 `
>8d0c		a4 a0					.word	SyntaxError                      ; $19 !!25
>8d0e		a4 a0					.word	SyntaxError                      ; $1a !!26
>8d10		a4 a0					.word	SyntaxError                      ; $1b {
>8d12		9c 93					.word	OraInteger                       ; $1c |
>8d14		a4 a0					.word	SyntaxError                      ; $1d }
>8d16		a4 a0					.word	SyntaxError                      ; $1e ~
>8d18		a4 a0					.word	SyntaxError                      ; $1f [7m<7F>[m
>8d1a		a4 a0					.word	SyntaxError                      ; $20
>8d1c		06 94					.word	WordIndirect                     ; $21 !
>8d1e		a4 a0					.word	SyntaxError                      ; $22 "
>8d20		a4 a0					.word	SyntaxError                      ; $23 #
>8d22		a4 a0					.word	SyntaxError                      ; $24 $
>8d24		80 91					.word	IntegerModulus                   ; $25 %
>8d26		67 93					.word	AndInteger                       ; $26 &
>8d28		a4 a0					.word	SyntaxError                      ; $27 '
>8d2a		a4 a0					.word	SyntaxError                      ; $28 (
>8d2c		a4 a0					.word	SyntaxError                      ; $29 )
>8d2e		ee 91					.word	MulInteger                       ; $2a *
>8d30		09 93					.word	AddInteger                       ; $2b +
>8d32		a4 a0					.word	SyntaxError                      ; $2c ,
>8d34		42 93					.word	SubInteger                       ; $2d -
>8d36		a4 a0					.word	SyntaxError                      ; $2e .
>8d38		c0 95					.word	FDivideCommand                   ; $2f /
>8d3a		a4 a0					.word	SyntaxError                      ; $30 0
>8d3c		a4 a0					.word	SyntaxError                      ; $31 1
>8d3e		a4 a0					.word	SyntaxError                      ; $32 2
>8d40		a4 a0					.word	SyntaxError                      ; $33 3
>8d42		a4 a0					.word	SyntaxError                      ; $34 4
>8d44		a4 a0					.word	SyntaxError                      ; $35 5
>8d46		a4 a0					.word	SyntaxError                      ; $36 6
>8d48		a4 a0					.word	SyntaxError                      ; $37 7
>8d4a		a4 a0					.word	SyntaxError                      ; $38 8
>8d4c		a4 a0					.word	SyntaxError                      ; $39 9
>8d4e		a4 a0					.word	SyntaxError                      ; $3a :
>8d50		a4 a0					.word	SyntaxError                      ; $3b ;
>8d52		60 90					.word	BinaryCompareLess                ; $3c <
>8d54		56 90					.word	BinaryCompareEqual               ; $3d =
>8d56		6a 90					.word	BinaryCompareGreater             ; $3e >
>8d58		28 94					.word	ByteIndirect                     ; $3f ?
.8d5a						VectorSet0:
>8d5a		2c 8c					.word	EOLCommand                       ; $80 !0:EOF
>8d5c		c6 8c					.word	Shift1Command                    ; $81 !1:SH1
>8d5e		ce 8c					.word	Shift2Command                    ; $82 !2:SH2
>8d60		aa 9a					.word	AbsUnary                         ; $83 ABS(
>8d62		b8 9a					.word	AllocUnary                       ; $84 ALLOC(
>8d64		28 9b					.word	AscUnary                         ; $85 ASC(
>8d66		0c 9d					.word	ChrUnary                         ; $86 CHR$(
>8d68		43 a5					.word	UnaryEvent                       ; $87 EVENT(
>8d6a		52 90					.word	UnaryFalse                       ; $88 FALSE
>8d6c		35 9b					.word	FracUnary                        ; $89 FRAC(
>8d6e		a4 a0					.word	SyntaxError                      ; $8a GETDATE$(
>8d70		a4 a0					.word	SyntaxError                      ; $8b GETTIME$(
>8d72		cd a4					.word	UnaryHit                         ; $8c HIT(
>8d74		4a 9b					.word	IntUnary                         ; $8d INT(
>8d76		cb 9c					.word	IsValUnary                       ; $8e ISVAL(
>8d78		c7 a5					.word	UnaryJoyB                        ; $8f JOYB(
>8d7a		a0 a5					.word	UnaryJoyX                        ; $90 JOYX(
>8d7c		a3 a5					.word	UnaryJoyY                        ; $91 JOYY(
>8d7e		df 9d					.word	Unary_Left                       ; $92 LEFT$(
>8d80		5b 9b					.word	LenUnary                         ; $93 LEN(
>8d82		79 9b					.word	Unary_Max                        ; $94 MAX(
>8d84		01 9e					.word	Unary_Mid                        ; $95 MID$(
>8d86		75 9b					.word	Unary_Min                        ; $96 MIN(
>8d88		c4 9b					.word	Unary_Not                        ; $97 NOT(
>8d8a		d7 9b					.word	PeekByteUnary                    ; $98 PEEK(
>8d8c		e3 9b					.word	PeekDUnary                       ; $99 PEEKD(
>8d8e		df 9b					.word	PeekLUnary                       ; $9a PEEKL(
>8d90		db 9b					.word	PeekWUnary                       ; $9b PEEKW(
>8d92		7e af					.word	UnaryPlaying                     ; $9c PLAYING(
>8d94		10 9c					.word	Unary_Random                     ; $9d RANDOM(
>8d96		ec 9d					.word	Unary_Right                      ; $9e RIGHT$(
>8d98		2d 9c					.word	Unary_Rnd                        ; $9f RND(
>8d9a		a3 9c					.word	SgnUnary                         ; $a0 SGN(
>8d9c		1e 9d					.word	SpcUnary                         ; $a1 SPC(
>8d9e		39 9d					.word	Unary_Str                        ; $a2 STR$(
>8da0		d9 a5					.word	UnaryTimer                       ; $a3 TIMER(
>8da2		47 90					.word	UnaryTrue                        ; $a4 TRUE
>8da4		c1 9c					.word	ValUnary                         ; $a5 VAL(
>8da6		c3 85					.word	ForCommand                       ; $a6 FOR
>8da8		06 87					.word	IfCommand                        ; $a7 IF
>8daa		d6 8c					.word	Unused1                          ; $a8 PROC
>8dac		d8 8b					.word	Command_REPEAT                   ; $a9 REPEAT
>8dae		93 8f					.word	Command_WHILE                    ; $aa WHILE
>8db0		2f 87					.word	EndIf                            ; $ab ENDIF
>8db2		60 8b					.word	Command_ENDPROC                  ; $ac ENDPROC
>8db4		75 86					.word	NextCommand                      ; $ad NEXT
>8db6		d6 8c					.word	Unused4                          ; $ae THEN
>8db8		e1 8b					.word	Command_UNTIL                    ; $af UNTIL
>8dba		b4 8f					.word	Command_WEND                     ; $b0 WEND
>8dbc		a4 a0					.word	SyntaxError                      ; $b1 BY
>8dbe		66 84					.word	CallCommand                      ; $b2 CALL
>8dc0		81 a2					.word	CircleCommand                    ; $b3 CIRCLE
>8dc2		9b 84					.word	ClearCommand                     ; $b4 CLEAR
>8dc4		f3 84					.word	ClearScreen                      ; $b5 CLS
>8dc6		a4 a0					.word	SyntaxError                      ; $b6 COLOR
>8dc8		a4 a0					.word	SyntaxError                      ; $b7 COLOUR
>8dca		fb 84					.word	Command_Data                     ; $b8 DATA
>8dcc		03 85					.word	DimCommand                       ; $b9 DIM
>8dce		d6 8c					.word	Unused3                          ; $ba DOWNTO
>8dd0		28 87					.word	ElseCode                         ; $bb ELSE
>8dd2		a4 a0					.word	SyntaxError                      ; $bc FROM
>8dd4		a0 a4					.word	GfxCommand                       ; $bd GFX
>8dd6		ce 86					.word	Command_GOSUB                    ; $be GOSUB
>8dd8		ec 86					.word	GotoCommand                      ; $bf GOTO
>8dda		a4 a0					.word	SyntaxError                      ; $c0 HERE
>8ddc		aa a2					.word	ImageCommand                     ; $c1 IMAGE
>8dde		30 87					.word	Command_Input                    ; $c2 INPUT
>8de0		1b 88					.word	LetCommand                       ; $c3 LET
>8de2		fc a2					.word	LineCommand                      ; $c4 LINE
>8de4		f4 89					.word	Command_LOCAL                    ; $c5 LOCAL
>8de6		a4 a0					.word	SyntaxError                      ; $c6 OFF
>8de8		a4 a0					.word	SyntaxError                      ; $c7 ON
>8dea		a4 a0					.word	SyntaxError                      ; $c8 OUTLINE
>8dec		f1 a4					.word	PaletteCommand                   ; $c9 PALETTE
>8dee		f5 a2					.word	PlotCommand                      ; $ca PLOT
>8df0		c5 8a					.word	PokeBCommand                     ; $cb POKE
>8df2		d1 8a					.word	PokeDCommand                     ; $cc POKED
>8df4		cd 8a					.word	PokeLCommand                     ; $cd POKEL
>8df6		c9 8a					.word	PokeWCommand                     ; $ce POKEW
>8df8		37 87					.word	Command_Print                    ; $cf PRINT
>8dfa		6e 8b					.word	Command_Read                     ; $d0 READ
>8dfc		7d a2					.word	RectangleCommand                 ; $d1 RECT
>8dfe		cb 8b					.word	RemCommand                       ; $d2 REM
>8e00		de 86					.word	Command_RETURN                   ; $d3 RETURN
>8e02		a4 a0					.word	SyntaxError                      ; $d4 SOLID
>8e04		9a af					.word	SoundCommand                     ; $d5 SOUND
>8e06		8c a2					.word	SpriteCommand                    ; $d6 SPRITE
>8e08		c6 a2					.word	TextCommand                      ; $d7 TEXT
>8e0a		d6 8c					.word	Unused2                          ; $d8 TO
.8e0c						VectorSet1:
>8e0c		a4 a0					.word	SyntaxError                      ; $80 !0:EOF
>8e0e		a4 a0					.word	SyntaxError                      ; $81 !1:SH1
>8e10		a4 a0					.word	SyntaxError                      ; $82 !2:SH2
>8e12		3a 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8e14		56 84					.word	AssertCommand                    ; $84 ASSERT
>8e16		40 a4					.word	BitmapCtrl                       ; $85 BITMAP
>8e18		c0 85					.word	EndCommand                       ; $86 END
>8e1a		52 af					.word	Explode                          ; $87 EXPLODE
>8e1c		a4 a0					.word	SyntaxError                      ; $88 GO
>8e1e		6b 88					.word	Command_List                     ; $89 LIST
>8e20		71 89					.word	Command_Load                     ; $8a LOAD
>8e22		b5 8a					.word	NewCommand                       ; $8b NEW
>8e24		2e af					.word	PingCommand                      ; $8c PING
>8e26		fa 8b					.word	Command_Restore                  ; $8d RESTORE
>8e28		39 8c					.word	CommandRUN                       ; $8e RUN
>8e2a		a4 a0					.word	SyntaxError                      ; $8f SAVE
>8e2c		a4 a0					.word	SyntaxError                      ; $90 SETDATE
>8e2e		a4 a0					.word	SyntaxError                      ; $91 SETTIME
>8e30		46 af					.word	ShootCommand                     ; $92 SHOOT
>8e32		85 a4					.word	SpritesCtrl                      ; $93 SPRITES
>8e34		c6 8e					.word	StopCommand                      ; $94 STOP
>8e36		a4 a0					.word	SyntaxError                      ; $95 VERIFY
>8e38		3a a5					.word	XGoCommand                       ; $96 XGO
>8e3a		31 a5					.word	XLoadCommand                     ; $97 XLOAD
>8e3c		3a af					.word	ZapCommand                       ; $98 ZAP
.8e3e						VectorSet2:
>8e3e		a4 a0					.word	SyntaxError                      ; $80 !0:EOF
>8e40		a4 a0					.word	SyntaxError                      ; $81 !1:SH1
>8e42		a4 a0					.word	SyntaxError                      ; $82 !2:SH2
>8e44		63 9f					.word	Assemble_adc                     ; $83 ADC
>8e46		5b 9f					.word	Assemble_and                     ; $84 AND
>8e48		77 9f					.word	Assemble_asl                     ; $85 ASL
>8e4a		e1 9f					.word	Assemble_bcc                     ; $86 BCC
>8e4c		e5 9f					.word	Assemble_bcs                     ; $87 BCS
>8e4e		ed 9f					.word	Assemble_beq                     ; $88 BEQ
>8e50		a4 9f					.word	Assemble_bit                     ; $89 BIT
>8e52		d5 9f					.word	Assemble_bmi                     ; $8a BMI
>8e54		e9 9f					.word	Assemble_bne                     ; $8b BNE
>8e56		d1 9f					.word	Assemble_bpl                     ; $8c BPL
>8e58		f1 9f					.word	Assemble_bra                     ; $8d BRA
>8e5a		f5 9f					.word	Assemble_brk                     ; $8e BRK
>8e5c		d9 9f					.word	Assemble_bvc                     ; $8f BVC
>8e5e		dd 9f					.word	Assemble_bvs                     ; $90 BVS
>8e60		fd 9f					.word	Assemble_clc                     ; $91 CLC
>8e62		51 a0					.word	Assemble_cld                     ; $92 CLD
>8e64		11 a0					.word	Assemble_cli                     ; $93 CLI
>8e66		41 a0					.word	Assemble_clv                     ; $94 CLV
>8e68		6f 9f					.word	Assemble_cmp                     ; $95 CMP
>8e6a		b8 9f					.word	Assemble_cpx                     ; $96 CPX
>8e6c		b3 9f					.word	Assemble_cpy                     ; $97 CPY
>8e6e		95 9f					.word	Assemble_dec                     ; $98 DEC
>8e70		4d a0					.word	Assemble_dex                     ; $99 DEX
>8e72		29 a0					.word	Assemble_dey                     ; $9a DEY
>8e74		5f 9f					.word	Assemble_eor                     ; $9b EOR
>8e76		9a 9f					.word	Assemble_inc                     ; $9c INC
>8e78		5d a0					.word	Assemble_inx                     ; $9d INX
>8e7a		49 a0					.word	Assemble_iny                     ; $9e INY
>8e7c		cc 9f					.word	Assemble_jmp                     ; $9f JMP
>8e7e		c7 9f					.word	Assemble_jsr                     ; $a0 JSR
>8e80		6b 9f					.word	Assemble_lda                     ; $a1 LDA
>8e82		90 9f					.word	Assemble_ldx                     ; $a2 LDX
>8e84		ae 9f					.word	Assemble_ldy                     ; $a3 LDY
>8e86		81 9f					.word	Assemble_lsr                     ; $a4 LSR
>8e88		61 a0					.word	Assemble_nop                     ; $a5 NOP
>8e8a		57 9f					.word	Assemble_ora                     ; $a6 ORA
>8e8c		0d a0					.word	Assemble_pha                     ; $a7 PHA
>8e8e		f9 9f					.word	Assemble_php                     ; $a8 PHP
>8e90		55 a0					.word	Assemble_phx                     ; $a9 PHX
>8e92		15 a0					.word	Assemble_phy                     ; $aa PHY
>8e94		1d a0					.word	Assemble_pla                     ; $ab PLA
>8e96		01 a0					.word	Assemble_plp                     ; $ac PLP
>8e98		69 a0					.word	Assemble_plx                     ; $ad PLX
>8e9a		25 a0					.word	Assemble_ply                     ; $ae PLY
>8e9c		7c 9f					.word	Assemble_rol                     ; $af ROL
>8e9e		86 9f					.word	Assemble_ror                     ; $b0 ROR
>8ea0		09 a0					.word	Assemble_rti                     ; $b1 RTI
>8ea2		19 a0					.word	Assemble_rts                     ; $b2 RTS
>8ea4		73 9f					.word	Assemble_sbc                     ; $b3 SBC
>8ea6		05 a0					.word	Assemble_sec                     ; $b4 SEC
>8ea8		65 a0					.word	Assemble_sed                     ; $b5 SED
>8eaa		21 a0					.word	Assemble_sei                     ; $b6 SEI
>8eac		67 9f					.word	Assemble_sta                     ; $b7 STA
>8eae		59 a0					.word	Assemble_stp                     ; $b8 STP
>8eb0		8b 9f					.word	Assemble_stx                     ; $b9 STX
>8eb2		a9 9f					.word	Assemble_sty                     ; $ba STY
>8eb4		9f 9f					.word	Assemble_stz                     ; $bb STZ
>8eb6		3d a0					.word	Assemble_tax                     ; $bc TAX
>8eb8		39 a0					.word	Assemble_tay                     ; $bd TAY
>8eba		c2 9f					.word	Assemble_trb                     ; $be TRB
>8ebc		bd 9f					.word	Assemble_tsb                     ; $bf TSB
>8ebe		45 a0					.word	Assemble_tsx                     ; $c0 TSX
>8ec0		2d a0					.word	Assemble_txa                     ; $c1 TXA
>8ec2		35 a0					.word	Assemble_txs                     ; $c2 TXS
>8ec4		31 a0					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8ec6						StopCommand:
.8ec6		a9 08		lda #$08		lda	#8
.8ec8		4c db 8f	jmp $8fdb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8ecb						ProcedureScan:
.8ecb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ecd		85 30		sta $30				sta 	codePtr
.8ecf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ed1		85 31		sta $31				sta 	codePtr+1
.8ed3						_PSLoop:
.8ed3		b2 30		lda ($30)			lda 	(codePtr)
.8ed5		f0 42		beq $8f19			beq 	_PSExit
.8ed7		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8ed9		b1 30		lda ($30),y			lda 	(codePtr),y
.8edb		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8edd		d0 2d		bne $8f0c			bne 	_PSNext
.8edf		c8		iny				iny 								; get the address of the record to zTemp0 and
.8ee0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ee2		29 c0		and #$c0			and 	#$C0
.8ee4		c9 40		cmp #$40			cmp 	#$40
.8ee6		d0 32		bne $8f1a			bne 	_PSSyntax
.8ee8		b1 30		lda ($30),y			lda 	(codePtr),y
.8eea		18		clc				clc
.8eeb		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8eed		85 37		sta $37				sta 	zTemp0+1
.8eef		c8		iny				iny 								; LSB
.8ef0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ef2		85 36		sta $36				sta 	zTemp0
.8ef4		c8		iny				iny 								; character after variable call.
.8ef5		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8ef6		a0 07		ldy #$07			ldy 	#7
.8ef8		91 36		sta ($36),y			sta 	(zTemp0),y
.8efa		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8efc		a0 02		ldy #$02			ldy 	#2
.8efe		91 36		sta ($36),y			sta 	(zTemp0),y
.8f00		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8f02						_PSCopy:
.8f02		b5 30		lda $30,x			lda 	safePtr,x
.8f04		c8		iny				iny
.8f05		91 36		sta ($36),y			sta 	(zTemp0),y
.8f07		e8		inx				inx
.8f08		e0 04		cpx #$04			cpx 	#4
.8f0a		d0 f6		bne $8f02			bne 	_PSCopy
.8f0c						_PSNext:
.8f0c		18		clc				clc
.8f0d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f0f		65 30		adc $30				adc 	codePtr
.8f11		85 30		sta $30				sta 	codePtr
.8f13		90 02		bcc $8f17			bcc 	_CREExit
.8f15		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f17						_CREExit:
.8f17		80 ba		bra $8ed3			bra 	_PSLoop
.8f19						_PSExit:
.8f19		60		rts				rts
.8f1a						_PSSyntax:
.8f1a		4c a4 a0	jmp $a0a4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8f1d						ScanForward:
.8f1d		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8f1f		86 37		stx $37				stx 	zTemp0+1
.8f21		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8f23						_ScanLoop:
.8f23		b1 30		lda ($30),y			lda 	(codePtr),y
.8f25		c8		iny				iny
.8f26		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8f28		d0 0e		bne $8f38			bne 	_ScanGoNext
.8f2a		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8f2c		f0 04		beq $8f32			beq 	_ScanMatch
.8f2e		c5 37		cmp $37				cmp 	zTemp0+1
.8f30		d0 06		bne $8f38			bne 	_ScanGoNext
.8f32						_ScanMatch:
.8f32		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8f34		d0 01		bne $8f37			bne 	_ScanNotEndEOL
.8f36		88		dey				dey
.8f37						_ScanNotEndEOL:
.8f37		60		rts				rts
.8f38						_ScanGoNext:
.8f38		20 3d 8f	jsr $8f3d			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8f3b		80 e6		bra $8f23			bra 	_ScanLoop
.8f3d						ScanForwardOne:
.8f3d		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8f3f		90 3e		bcc $8f7f			bcc 	_SFWExit
.8f41		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8f43		90 18		bcc $8f5d			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8f45		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8f47		b0 2f		bcs $8f78			bcs 	_ScanSkipData
.8f49		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8f4b		90 32		bcc $8f7f			bcc 	_SFWExit 					; if not, ordinary keywords.
.8f4d		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.8f4f		b0 2e		bcs $8f7f			bcs 	_SFWExit
.8f51		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8f53		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8f55		b0 28		bcs $8f7f			bcs 	_SFWExit
.8f57		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8f59		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8f5b		80 22		bra $8f7f			bra 	_SFWExit
.8f5d						_ScanSkipOne:
.8f5d		c8		iny				iny 								; consume the extra one.
.8f5e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8f60		d0 1d		bne $8f7f			bne 	_SFWExit
.8f62		18		clc				clc
.8f63		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f65		65 30		adc $30				adc 	codePtr
.8f67		85 30		sta $30				sta 	codePtr
.8f69		90 02		bcc $8f6d			bcc 	_CREExit
.8f6b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f6d						_CREExit:
.8f6d		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8f6f		b2 30		lda ($30)			lda 	(codePtr)
.8f71		d0 0c		bne $8f7f			bne 	_SFWExit 					; if not zero, more to scan
.8f73		a9 13		lda #$13		lda	#19
.8f75		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.8f78						_ScanSkipData:
.8f78		88		dey				dey 								; point at data token
.8f79		c8		iny				iny 								; point to offset
.8f7a		98		tya				tya 								; A = offset position
.8f7b		38		sec				sec 								; add size +1 hence SEC
.8f7c		71 30		adc ($30),y			adc 	(codePtr),y
.8f7e		a8		tay				tay 								; make current position.
.8f7f						_SFWExit:
.8f7f		60		rts				rts
.8f80						ScanGetCurrentLineStep:
.8f80		64 38		stz $38				stz 	zTemp1
.8f82		a0 03		ldy #$03			ldy 	#3
.8f84						_SGCLSLoop:
.8f84		b1 30		lda ($30),y			lda 	(codePtr),y
.8f86		c8		iny				iny
.8f87		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8f89		f0 05		beq $8f90			beq 	_SGCLSExit
.8f8b		20 3d 8f	jsr $8f3d			jsr 	ScanForwardOne
.8f8e		80 f4		bra $8f84			bra 	_SGCLSLoop
.8f90						_SGCLSExit:
.8f90		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8f92		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8f93						Command_WHILE:
.8f93		5a		phy				phy 								; save position of the test
.8f94		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8f96		20 74 9e	jsr $9e74			jsr 	EvaluateNumber
.8f99		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; check if zero
.8f9c		f0 0e		beq $8fac			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8f9e		98		tya				tya 								; position *after* test.
.8f9f		7a		ply				ply 								; restore position before test, at WHILE
.8fa0		88		dey				dey 								; so we execute the WHILE command again.
.8fa1		48		pha				pha 								; push after test on the stack
.8fa2		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8fa4		20 21 b0	jsr $b021			jsr 	StackOpen
.8fa7		20 66 b0	jsr $b066			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8faa		7a		ply				ply 								; restore the position *after* the test
.8fab		60		rts				rts
.8fac						_WHExitLoop:
.8fac		68		pla				pla 								; throw post loop position
.8fad		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.8faf		aa		tax				tax
.8fb0		20 1d 8f	jsr $8f1d			jsr 	ScanForward
.8fb3		60		rts				rts
.8fb4						Command_WEND:
.8fb4		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8fb6		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8fb8		20 4e b0	jsr $b04e			jsr 	StackCheckFrame
.8fbb		20 77 b0	jsr $b077			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8fbe		20 40 b0	jsr $b040			jsr 	StackClose		 			; erase the frame
.8fc1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8fc2						CheckRightBracket:
.8fc2		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc4		c8		iny				iny
.8fc5		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8fc7		d0 0f		bne $8fd8			bne 	CNAFail
.8fc9		60		rts				rts
.8fca						CheckComma:
.8fca		b1 30		lda ($30),y			lda 	(codePtr),y
.8fcc		c8		iny				iny
.8fcd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8fcf		d0 07		bne $8fd8			bne 	CNAFail
.8fd1		60		rts				rts
.8fd2						CheckNextA:
.8fd2		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8fd4		d0 02		bne $8fd8			bne 	CNAFail
.8fd6		c8		iny				iny 								; skip character
.8fd7		60		rts				rts 								; and exit
.8fd8						CNAFail:
.8fd8		4c a4 a0	jmp $a0a4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8fdb						ErrorHandler:
.8fdb		a8		tay				tay 								; find the error text
.8fdc		f0 49		beq $9027			beq 	_EHEnd
.8fde		a2 00		ldx #$00			ldx 	#0
.8fe0		a9 bd		lda #$bd			lda 	#((ErrorText) & $FF)
.8fe2		85 36		sta $36				sta 	0+zTemp0
.8fe4		a9 a0		lda #$a0			lda 	#((ErrorText) >> 8)
.8fe6		85 37		sta $37				sta 	1+zTemp0
.8fe8						_EHFind:
.8fe8		88		dey				dey 								; keep looking through text
.8fe9		f0 0e		beq $8ff9			beq 	_EHFound
.8feb						_EHFindZero:
.8feb		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8fed		e6 36		inc $36				inc 	zTemp0
.8fef		d0 02		bne $8ff3			bne 	_EHFNoCarry
.8ff1		e6 37		inc $37				inc 	zTemp0+1
.8ff3						_EHFNoCarry:
.8ff3		c9 00		cmp #$00			cmp 	#0
.8ff5		d0 f4		bne $8feb			bne 	_EHFindZero
.8ff7		80 ef		bra $8fe8			bra 	_EHFind
.8ff9						_EHFound:
.8ff9		a5 36		lda $36				lda 	zTemp0 						; print message
.8ffb		a6 37		ldx $37				ldx 	zTemp0+1
.8ffd		20 34 90	jsr $9034			jsr 	PrintStringXA
.9000		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9002		b1 30		lda ($30),y			lda 	(codePtr),y
.9004		d0 05		bne $900b			bne 	_EHAtMsg
.9006		c8		iny				iny
.9007		b1 30		lda ($30),y			lda 	(codePtr),y
.9009		f0 17		beq $9022			beq 	_EHCREnd
.900b						_EHAtMsg:
.900b		a2 90		ldx #$90			ldx 	#_AtMsg >> 8 				; print " at "
.900d		a9 2a		lda #$2a			lda 	#_AtMsg & $FF
.900f		20 34 90	jsr $9034			jsr 	PrintStringXA
.9012		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9014		b1 30		lda ($30),y			lda 	(codePtr),y
.9016		48		pha				pha
.9017		c8		iny				iny
.9018		b1 30		lda ($30),y			lda 	(codePtr),y
.901a		aa		tax				tax
.901b		68		pla				pla
.901c		20 4a 94	jsr $944a			jsr 	ConvertInt16 				; convert XA to string
.901f		20 34 90	jsr $9034			jsr 	PrintStringXA 				; and print it.
.9022						_EHCREnd:
.9022		a9 0d		lda #$0d			lda 	#13 						; new line
.9024		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9027						_EHEnd:
.9027		4c 05 84	jmp $8405			jmp 	WarmStart
>902a		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9032		20 00
.9034						PrintStringXA:
.9034		5a		phy				phy
.9035		86 37		stx $37				stx 	zTemp0+1
.9037		85 36		sta $36				sta 	zTemp0
.9039		a0 00		ldy #$00			ldy 	#0
.903b						_PSXALoop:
.903b		b1 36		lda ($36),y			lda 	(zTemp0),y
.903d		f0 06		beq $9045			beq 	_PSXAExit
.903f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9042		c8		iny				iny
.9043		80 f6		bra $903b			bra 	_PSXALoop
.9045						_PSXAExit:
.9045		7a		ply				ply
.9046		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9047						UnaryTrue:
.9047		fa		plx				plx
.9048						ReturnTrue:
.9048		a9 01		lda #$01			lda 	#1  						; set to 1
.904a		20 28 9f	jsr $9f28			jsr 	NSMSetByte
.904d		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.904f		95 50		sta $50,x			sta 	NSStatus,x
.9051		60		rts				rts
.9052						UnaryFalse:
.9052		fa		plx				plx
.9053						ReturnFalse:
.9053		4c 26 9f	jmp $9f26			jmp 	NSMSetZero 					; set it all to zero
.9056						BinaryCompareEqual:
.9056		fa		plx				plx
.9057		20 92 90	jsr $9092			jsr 	CompareBaseCode
.905a		c9 00		cmp #$00			cmp 	#0
.905c		f0 ea		beq $9048			beq 	ReturnTrue
.905e		80 f3		bra $9053			bra 	ReturnFalse
.9060						BinaryCompareLess:
.9060		fa		plx				plx
.9061		20 92 90	jsr $9092			jsr 	CompareBaseCode
.9064		c9 ff		cmp #$ff			cmp 	#$FF
.9066		f0 e0		beq $9048			beq 	ReturnTrue
.9068		80 e9		bra $9053			bra 	ReturnFalse
.906a						BinaryCompareGreater:
.906a		fa		plx				plx
.906b		20 92 90	jsr $9092			jsr 	CompareBaseCode
.906e		c9 01		cmp #$01			cmp 	#1
.9070		f0 d6		beq $9048			beq 	ReturnTrue
.9072		80 df		bra $9053			bra 	ReturnFalse
.9074						BinaryCompareNotEqual:
.9074		fa		plx				plx
.9075		20 92 90	jsr $9092			jsr 	CompareBaseCode
.9078		c9 00		cmp #$00			cmp 	#0
.907a		d0 cc		bne $9048			bne 	ReturnTrue
.907c		80 d5		bra $9053			bra 	ReturnFalse
.907e						BinaryCompareLessEqual:
.907e		fa		plx				plx
.907f		20 92 90	jsr $9092			jsr 	CompareBaseCode
.9082		c9 01		cmp #$01			cmp 	#1
.9084		d0 c2		bne $9048			bne 	ReturnTrue
.9086		80 cb		bra $9053			bra 	ReturnFalse
.9088						BinaryCompareGreaterEqual:
.9088		fa		plx				plx
.9089		20 92 90	jsr $9092			jsr 	CompareBaseCode
.908c		c9 ff		cmp #$ff			cmp 	#$FF
.908e		d0 b8		bne $9048			bne 	ReturnTrue
.9090		80 c1		bra $9053			bra 	ReturnFalse
.9092						CompareBaseCode:
.9092		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; make both values if references.
.9095		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9097		15 51		ora $51,x			ora 	NSStatus+1,x
.9099		29 10		and #$10			and 	#NSTString
.909b		d0 37		bne $90d4			bne 	_CBCString 					; if so do string code, which will check if both.
.909d		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.909f		15 79		ora $79,x			ora 	NSExponent+1,x
.90a1		d0 34		bne $90d7			bne 	_CBCFloat
.90a3		b5 50		lda $50,x			lda 	NSStatus,x
.90a5		15 51		ora $51,x			ora 	NSStatus+1,x
.90a7		29 08		and #$08			and 	#NSTFloat
.90a9		d0 2c		bne $90d7			bne 	_CBCFloat
.90ab		20 da 90	jsr $90da			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.90ae		e8		inx				inx
.90af		20 da 90	jsr $90da			jsr 	CompareFixMinusZero
.90b2		ca		dex				dex
.90b3		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.90b5		55 51		eor $51,x			eor 	NSStatus+1,x
.90b7		10 0a		bpl $90c3			bpl 	_CDCSameSign
.90b9		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.90bb		30 14		bmi $90d1			bmi 	_CBCLess 					; return $FF
.90bd						_CBCGreater:
.90bd		a9 01		lda #$01			lda 	#1
.90bf		60		rts				rts
.90c0						_CBCEqual:
.90c0		a9 00		lda #$00			lda 	#0
.90c2		60		rts				rts
.90c3						_CDCSameSign:
.90c3		20 ef 92	jsr $92ef			jsr 	SubTopTwoStack 				; unsigned subtract
.90c6		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; or the mantissa together
.90c9		f0 f5		beq $90c0			beq 	_CBCEqual 					; -0 == 0
.90cb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.90cd		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.90cf		10 ec		bpl $90bd			bpl 	_CBCGreater
.90d1						_CBCLess:
.90d1		a9 ff		lda #$ff			lda 	#$FF
.90d3		60		rts				rts
.90d4						_CBCString:
.90d4		4c 60 92	jmp $9260			jmp 	CompareStrings
.90d7						_CBCFloat:
.90d7		4c aa 95	jmp $95aa			jmp 	CompareFloat
.90da						CompareFixMinusZero:
.90da		20 48 9f	jsr $9f48			jsr 	NSMIsZero
.90dd		d0 02		bne $90e1			bne 	_CFXMZNotZero
.90df		74 50		stz $50,x			stz 	NSStatus,x
.90e1						_CFXMZNotZero:
.90e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.90e2						StringConcat:
.90e2		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.90e4		35 51		and $51,x			and 	NSStatus+1,x
.90e6		29 18		and #$18			and 	#NSBTypeMask
.90e8		c9 10		cmp #$10			cmp 	#NSTString
.90ea		d0 50		bne $913c			bne		_SCType
.90ec		64 38		stz $38				stz 	zTemp1 						; counting total length
.90ee		e8		inx				inx
.90ef		20 0d 91	jsr $910d			jsr 	_SCSetupZ0 					; setup for second
.90f2		20 16 91	jsr $9116			jsr 	_SCLengthZ0 				; length for second
.90f5		ca		dex				dex
.90f6		20 0d 91	jsr $910d			jsr 	_SCSetupZ0 					; setup for first
.90f9		20 16 91	jsr $9116			jsr 	_SCLengthZ0 				; length for first
.90fc		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.90fe		20 11 b1	jsr $b111			jsr 	StringTempAllocate
.9101		20 2d 91	jsr $912d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9104		e8		inx				inx
.9105		20 0d 91	jsr $910d			jsr 	_SCSetupZ0 					; copy second out
.9108		20 2d 91	jsr $912d			jsr 	_SCCopy
.910b		ca		dex				dex
.910c		60		rts				rts
.910d						_SCSetupZ0:
.910d		b5 58		lda $58,x			lda 	NSMantissa0,x
.910f		85 36		sta $36				sta 	zTemp0
.9111		b5 60		lda $60,x			lda 	NSMantissa1,x
.9113		85 37		sta $37				sta 	zTemp0+1
.9115		60		rts				rts
.9116						_SCLengthZ0:
.9116		5a		phy				phy
.9117		a0 00		ldy #$00			ldy 	#0
.9119						_SCLenLoop:
.9119		b1 36		lda ($36),y			lda 	(zTemp0),y
.911b		f0 0e		beq $912b			beq 	_SCLExit
.911d		c8		iny				iny
.911e		e6 38		inc $38				inc 	zTemp1
.9120		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9122		c9 fd		cmp #$fd			cmp 	#253
.9124		d0 f3		bne $9119			bne		_SCLenLoop
.9126		a9 09		lda #$09		lda	#9
.9128		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.912b						_SCLExit:
.912b		7a		ply				ply
.912c		60		rts				rts
.912d						_SCCopy:
.912d		5a		phy				phy
.912e		a0 00		ldy #$00			ldy 	#0
.9130						_SCCopyLoop:
.9130		b1 36		lda ($36),y			lda 	(zTemp0),y
.9132		f0 06		beq $913a			beq 	_SCCExit
.9134		20 4a b1	jsr $b14a			jsr 	StringTempWrite
.9137		c8		iny				iny
.9138		80 f6		bra $9130			bra 	_SCCopyLoop
.913a						_SCCExit:
.913a		7a		ply				ply
.913b		60		rts				rts
.913c						_SCType:
.913c		4c ae a0	jmp $a0ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.913f						IntegerDivide:
.913f		fa		plx				plx
.9140		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9142		15 51		ora $51,x			ora 	NSStatus+1,x
.9144		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9145		0a		asl a				asl 	a
.9146		10 05		bpl $914d			bpl 	_NotRef
.9148		48		pha				pha
.9149		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.914c		68		pla				pla
.914d						_NotRef:
.914d		0a		asl a				asl 	a
.914e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9150		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9152		15 79		ora $79,x			ora 	NSExponent+1,x
.9154		f0 03		beq $9159			beq 	_IntegerCode 				; if clear, then we have two integers
.9156		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.9159						_IntegerCode:
.9159		20 73 91	jsr $9173			jsr 	CheckDivideZero 			; do div zero check
.915c		20 a5 91	jsr $91a5			jsr 	Int32Divide 				; do the division
.915f		20 56 92	jsr $9256			jsr 	CalculateSign 				; calculate result sign
.9162						NSMCopyPlusTwoToZero:
.9162		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9164		95 58		sta $58,x			sta 	NSMantissa0,x
.9166		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9168		95 60		sta $60,x			sta 	NSMantissa1,x
.916a		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.916c		95 68		sta $68,x			sta 	NSMantissa2,x
.916e		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9170		95 70		sta $70,x			sta 	NSMantissa3,x
.9172		60		rts				rts
.9173						CheckDivideZero:
.9173		e8		inx				inx
.9174		20 48 9f	jsr $9f48			jsr 	NSMIsZero
.9177		f0 02		beq $917b			beq 	_CDVError
.9179		ca		dex				dex
.917a		60		rts				rts
.917b						_CDVError:
.917b		a9 03		lda #$03		lda	#3
.917d		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.9180						IntegerModulus:
.9180		fa		plx				plx
.9181		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9183		15 51		ora $51,x			ora 	NSStatus+1,x
.9185		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9186		0a		asl a				asl 	a
.9187		10 05		bpl $918e			bpl 	_NotRef
.9189		48		pha				pha
.918a		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.918d		68		pla				pla
.918e						_NotRef:
.918e		0a		asl a				asl 	a
.918f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9191		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9193		15 79		ora $79,x			ora 	NSExponent+1,x
.9195		f0 03		beq $919a			beq 	_IntegerCode 				; if clear, then we have two integers
.9197		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.919a						_IntegerCode:
.919a						IntegerModulusNoCheck:
.919a		20 73 91	jsr $9173			jsr 	CheckDivideZero 			; do div zero check
.919d		20 a5 91	jsr $91a5			jsr 	Int32Divide 				; do the division
.91a0		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.91a2		56 50		lsr $50,x			lsr 	NSStatus,x
.91a4		60		rts				rts
.91a5						Int32Divide:
.91a5		48		pha				pha 								; save AXY
.91a6		5a		phy				phy
.91a7		20 09 9f	jsr $9f09			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.91aa		20 22 9f	jsr $9f22			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.91ad		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.91af						_I32DivideLoop:
.91af		e8		inx				inx
.91b0		e8		inx				inx
.91b1		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.91b4		ca		dex				dex
.91b5		ca		dex				dex
.91b6		20 36 9f	jsr $9f36			jsr 	NSMRotateLeft
.91b9		20 e4 91	jsr $91e4			jsr 	DivideCheckSubtract 		; check if subtract possible
.91bc		90 02		bcc $91c0			bcc 	_I32DivideNoCarryIn
.91be		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.91c0						_I32DivideNoCarryIn:
.91c0		88		dey				dey 								; loop round till division completed.
.91c1		d0 ec		bne $91af			bne 	_I32DivideLoop
.91c3		7a		ply				ply 								; restore AXY and exit
.91c4		68		pla				pla
.91c5		60		rts				rts
.91c6						Int32ShiftDivide:
.91c6		48		pha				pha 								; save AY
.91c7		5a		phy				phy
.91c8		e8		inx				inx 								; clear S[X+2]
.91c9		e8		inx				inx
.91ca		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.91cd		ca		dex				dex
.91ce		ca		dex				dex
.91cf		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.91d1						_I32SDLoop:
.91d1		20 e4 91	jsr $91e4			jsr 	DivideCheckSubtract 		; check if subtract possible
.91d4		e8		inx				inx
.91d5		e8		inx				inx
.91d6		20 36 9f	jsr $9f36			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.91d9		ca		dex				dex
.91da		ca		dex				dex
.91db		20 36 9f	jsr $9f36			jsr 	NSMRotateLeft
.91de		88		dey				dey 	 							; do 31 times
.91df		d0 f0		bne $91d1			bne 	_I32SDLoop
.91e1		7a		ply				ply 								; restore AY and exit
.91e2		68		pla				pla
.91e3		60		rts				rts
.91e4						DivideCheckSubtract:
.91e4		20 ef 92	jsr $92ef			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.91e7		b0 04		bcs $91ed			bcs 	_DCSExit 					; if carry set, then could do, exit
.91e9		20 d5 92	jsr $92d5			jsr 	AddTopTwoStack 				; add it back in
.91ec		18		clc				clc 								; and return False
.91ed						_DCSExit:
.91ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.91ee						MulInteger:
.91ee		fa		plx				plx
.91ef		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.91f1		15 51		ora $51,x			ora 	NSStatus+1,x
.91f3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.91f4		0a		asl a				asl 	a
.91f5		10 05		bpl $91fc			bpl 	_NotRef
.91f7		48		pha				pha
.91f8		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91fb		68		pla				pla
.91fc						_NotRef:
.91fc		0a		asl a				asl 	a 							; put MSB of type into A:7
.91fd		30 09		bmi $9208			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.91ff		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9201		15 79		ora $79,x			ora 	NSExponent+1,x
.9203		f0 06		beq $920b			beq 	_IntegerCode 				; if clear, then we have two integers
.9205		4c 6c 96	jmp $966c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9208						_StringData:
.9208		4c b8 a0	jmp $a0b8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.920b						_IntegerCode:
.920b		20 18 92	jsr $9218			jsr 	MultiplyShort
.920e		c9 00		cmp #$00			cmp 	#0
.9210		f0 05		beq $9217			beq 	_MIExit
.9212		a9 04		lda #$04		lda	#4
.9214		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.9217						_MIExit:
.9217		60		rts				rts
.9218						MultiplyShort:
.9218		5a		phy				phy 								; save Y
.9219		20 09 9f	jsr $9f09			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.921c		20 22 9f	jsr $9f22			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.921f		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9221						_I32MLoop:
.9221		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9223		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9225		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9227		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9229		f0 25		beq $9250			beq 	_I32MExit 					; exit if zero
.922b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.922d		29 01		and #$01			and 	#1
.922f		f0 0d		beq $923e			beq 	_I32MNoAdd
.9231		20 d5 92	jsr $92d5			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9234		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9236		10 06		bpl $923e			bpl 	_I32MNoAdd
.9238						_I32ShiftRight:
.9238		20 3f 9f	jsr $9f3f			jsr 	NSMShiftRight 				; shift S[X] right
.923b		c8		iny				iny 								; increment shift count
.923c		80 09		bra $9247			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.923e						_I32MNoAdd:
.923e		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9240		70 f6		bvs $9238			bvs 	_I32ShiftRight 				; instead.
.9242		e8		inx				inx
.9243		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9246		ca		dex				dex
.9247						_I32MShiftUpper:
.9247		e8		inx				inx 								; shift S[X+2] right
.9248		e8		inx				inx
.9249		20 3f 9f	jsr $9f3f			jsr 	NSMShiftRight
.924c		ca		dex				dex
.924d		ca		dex				dex
.924e		80 d1		bra $9221			bra 	_I32MLoop 					; try again.
.9250						_I32MExit:
.9250		20 56 92	jsr $9256			jsr 	CalculateSign
.9253		98		tya				tya 								; shift in A
.9254		7a		ply				ply 								; restore Y and exit
.9255		60		rts				rts
.9256						CalculateSign:
.9256		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9258		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.925a		55 51		eor $51,x			eor 	NSStatus+1,x
.925c		0a		asl a				asl 	a 							; shift bit 7 into carry
.925d		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.925f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9260						CompareStrings:
.9260		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9262		35 51		and $51,x			and 	NSStatus+1,x
.9264		29 10		and #$10			and 	#NSBIsString
.9266		f0 28		beq $9290			beq 	_CSTypeError
.9268		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.926a		85 36		sta $36				sta 	zTemp0
.926c		b5 60		lda $60,x			lda 	NSMantissa1,x
.926e		85 37		sta $37				sta 	zTemp0+1
.9270		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9272		85 38		sta $38				sta 	zTemp1
.9274		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9276		85 39		sta $39				sta 	zTemp1+1
.9278		5a		phy				phy 								; save Y so we can access strings
.9279		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.927b						_CSLoop:
.927b		c8		iny				iny
.927c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.927e		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9280		d0 06		bne $9288			bne 	_CSDifferent
.9282		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9284		d0 f5		bne $927b			bne 	_CSLoop 					; still comparing
.9286						_CSExit:
.9286		7a		ply				ply 								; reached end, return zero in A from EOS
.9287		60		rts				rts
.9288						_CSDifferent:
.9288		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.928a		90 fa		bcc $9286			bcc		_CSExit
.928c		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.928e		80 f6		bra $9286			bra 	_CSExit
.9290						_CSTypeError:
.9290		4c ae a0	jmp $a0ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9293						ShiftLeft:
.9293		38		sec				sec 								; common code, carry determines which way.
.9294		80 01		bra $9297			bra 	ShiftMain
.9296						ShiftRight:
.9296		18		clc				clc
.9297						ShiftMain:
.9297		fa		plx				plx 								; restore X
.9298		08		php				php 								; save direction
.9299		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.929b		15 51		ora $51,x			ora 	NSStatus+1,x
.929d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.929e		0a		asl a				asl 	a
.929f		10 05		bpl $92a6			bpl 	_NotRef
.92a1		48		pha				pha
.92a2		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92a5		68		pla				pla
.92a6						_NotRef:
.92a6		0a		asl a				asl 	a
.92a7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92a9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92ab		15 79		ora $79,x			ora 	NSExponent+1,x
.92ad		f0 03		beq $92b2			beq 	_IntegerCode 				; if clear, then we have two integers
.92af		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.92b2						_IntegerCode:
.92b2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.92b4		29 e0		and #$e0			and 	#$E0
.92b6		15 61		ora $61,x			ora 	NSMantissa1+1,x
.92b8		15 69		ora $69,x			ora 	NSMantissa2+1,x
.92ba		15 71		ora $71,x			ora 	NSMantissa3+1,x
.92bc		d0 12		bne $92d0			bne 	_SMExit0 					; if >= 32 it will always return zero.
.92be						_SMLoop:
.92be		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.92c0		30 11		bmi $92d3			bmi 	_SMExit 					; exit if done.
.92c2		28		plp				plp 								; restore direction setting
.92c3		08		php				php
.92c4		90 05		bcc $92cb			bcc 	_SMRight
.92c6		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; shift left if CS
.92c9		80 f3		bra $92be			bra 	_SMLoop
.92cb						_SMRight:
.92cb		20 3f 9f	jsr $9f3f			jsr 	NSMShiftRight 				; shift right if CC
.92ce		80 ee		bra $92be			bra 	_SMLoop
.92d0						_SMExit0:
.92d0		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; return zero.
.92d3						_SMExit:
.92d3		28		plp				plp 								; throw direction
.92d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.92d5						AddTopTwoStack:
.92d5		18		clc				clc
.92d6		b5 58		lda $58,x			lda		NSMantissa0,x
.92d8		75 59		adc $59,x			adc 		NSMantissa0+1,x
.92da		95 58		sta $58,x			sta 	NSMantissa0,x
.92dc		b5 60		lda $60,x			lda		NSMantissa1,x
.92de		75 61		adc $61,x			adc 		NSMantissa1+1,x
.92e0		95 60		sta $60,x			sta 	NSMantissa1,x
.92e2		b5 68		lda $68,x			lda		NSMantissa2,x
.92e4		75 69		adc $69,x			adc 		NSMantissa2+1,x
.92e6		95 68		sta $68,x			sta 	NSMantissa2,x
.92e8		b5 70		lda $70,x			lda		NSMantissa3,x
.92ea		75 71		adc $71,x			adc 		NSMantissa3+1,x
.92ec		95 70		sta $70,x			sta 	NSMantissa3,x
.92ee		60		rts				rts
.92ef						SubTopTwoStack:
.92ef		38		sec				sec
.92f0		b5 58		lda $58,x			lda		NSMantissa0,x
.92f2		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.92f4		95 58		sta $58,x			sta 	NSMantissa0,x
.92f6		b5 60		lda $60,x			lda		NSMantissa1,x
.92f8		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.92fa		95 60		sta $60,x			sta 	NSMantissa1,x
.92fc		b5 68		lda $68,x			lda		NSMantissa2,x
.92fe		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9300		95 68		sta $68,x			sta 	NSMantissa2,x
.9302		b5 70		lda $70,x			lda		NSMantissa3,x
.9304		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9306		95 70		sta $70,x			sta 	NSMantissa3,x
.9308		60		rts				rts
.9309						AddInteger:
.9309		fa		plx				plx
.930a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.930c		15 51		ora $51,x			ora 	NSStatus+1,x
.930e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.930f		0a		asl a				asl 	a
.9310		10 05		bpl $9317			bpl 	_NotRef
.9312		48		pha				pha
.9313		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9316		68		pla				pla
.9317						_NotRef:
.9317		0a		asl a				asl 	a 							; put MSB of type into A:7
.9318		30 09		bmi $9323			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.931a		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.931c		15 79		ora $79,x			ora 	NSExponent+1,x
.931e		f0 06		beq $9326			beq 	_IntegerCode 				; if clear, then we have two integers
.9320		4c 1c 95	jmp $951c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9323						_StringData:
.9323		4c e2 90	jmp $90e2			jmp 	StringConcat							; at least one string - don't know both are strings.
.9326						_IntegerCode:
.9326						AddCode:
.9326		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9328		55 51		eor $51,x			eor 	NSStatus+1,x
.932a		10 a9		bpl $92d5			bpl 	AddTopTwoStack
.932c		20 ef 92	jsr $92ef			jsr 	SubTopTwoStack 				; do a physical subtraction
.932f		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9331		10 07		bpl $933a			bpl 	_AddExit
.9333		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9335		95 50		sta $50,x			sta 	NSStatus,x
.9337		20 ef 9e	jsr $9eef			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.933a						_AddExit:
.933a		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; check for -0
.933d		d0 02		bne $9341			bne 	_AddNonZero
.933f		74 50		stz $50,x			stz 	NSStatus,x
.9341						_AddNonZero:
.9341		60		rts				rts
.9342						SubInteger:
.9342		fa		plx				plx
.9343		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9345		15 51		ora $51,x			ora 	NSStatus+1,x
.9347		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9348		0a		asl a				asl 	a
.9349		10 05		bpl $9350			bpl 	_NotRef
.934b		48		pha				pha
.934c		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.934f		68		pla				pla
.9350						_NotRef:
.9350		0a		asl a				asl 	a 							; put MSB of type into A:7
.9351		30 09		bmi $935c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9353		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9355		15 79		ora $79,x			ora 	NSExponent+1,x
.9357		f0 06		beq $935f			beq 	_IntegerCode 				; if clear, then we have two integers
.9359		4c 21 95	jmp $9521			jmp 	FloatingPointSub 							; otherwise at least one float.
.935c						_StringData:
.935c		4c b8 a0	jmp $a0b8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.935f						_IntegerCode:
.935f		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9361		49 80		eor #$80			eor 	#$80
.9363		95 51		sta $51,x			sta 	NSStatus+1,x
.9365		80 bf		bra $9326			bra 	AddCode 					; and do the same code as add.
.9367						AndInteger:
.9367		fa		plx				plx
.9368		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.936a		15 51		ora $51,x			ora 	NSStatus+1,x
.936c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.936d		0a		asl a				asl 	a
.936e		10 05		bpl $9375			bpl 	_NotRef
.9370		48		pha				pha
.9371		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9374		68		pla				pla
.9375						_NotRef:
.9375		0a		asl a				asl 	a
.9376		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9378		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.937a		15 79		ora $79,x			ora 	NSExponent+1,x
.937c		f0 03		beq $9381			beq 	_IntegerCode 				; if clear, then we have two integers
.937e		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.9381						_IntegerCode:
.9381		b5 58		lda $58,x			lda		NSMantissa0,x
.9383		35 59		and $59,x			and 		NSMantissa0+1,x
.9385		95 58		sta $58,x			sta 	NSMantissa0,x
.9387		b5 60		lda $60,x			lda		NSMantissa1,x
.9389		35 61		and $61,x			and 		NSMantissa1+1,x
.938b		95 60		sta $60,x			sta 	NSMantissa1,x
.938d		b5 68		lda $68,x			lda		NSMantissa2,x
.938f		35 69		and $69,x			and 		NSMantissa2+1,x
.9391		95 68		sta $68,x			sta 	NSMantissa2,x
.9393		b5 70		lda $70,x			lda		NSMantissa3,x
.9395		35 71		and $71,x			and 		NSMantissa3+1,x
.9397		95 70		sta $70,x			sta 	NSMantissa3,x
.9399		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.939b		60		rts				rts
.939c						OraInteger:
.939c		fa		plx				plx
.939d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.939f		15 51		ora $51,x			ora 	NSStatus+1,x
.93a1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93a2		0a		asl a				asl 	a
.93a3		10 05		bpl $93aa			bpl 	_NotRef
.93a5		48		pha				pha
.93a6		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93a9		68		pla				pla
.93aa						_NotRef:
.93aa		0a		asl a				asl 	a
.93ab		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93ad		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93af		15 79		ora $79,x			ora 	NSExponent+1,x
.93b1		f0 03		beq $93b6			beq 	_IntegerCode 				; if clear, then we have two integers
.93b3		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.93b6						_IntegerCode:
.93b6		b5 58		lda $58,x			lda		NSMantissa0,x
.93b8		15 59		ora $59,x			ora 		NSMantissa0+1,x
.93ba		95 58		sta $58,x			sta 	NSMantissa0,x
.93bc		b5 60		lda $60,x			lda		NSMantissa1,x
.93be		15 61		ora $61,x			ora 		NSMantissa1+1,x
.93c0		95 60		sta $60,x			sta 	NSMantissa1,x
.93c2		b5 68		lda $68,x			lda		NSMantissa2,x
.93c4		15 69		ora $69,x			ora 		NSMantissa2+1,x
.93c6		95 68		sta $68,x			sta 	NSMantissa2,x
.93c8		b5 70		lda $70,x			lda		NSMantissa3,x
.93ca		15 71		ora $71,x			ora 		NSMantissa3+1,x
.93cc		95 70		sta $70,x			sta 	NSMantissa3,x
.93ce		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.93d0		60		rts				rts
.93d1						EorInteger:
.93d1		fa		plx				plx
.93d2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93d4		15 51		ora $51,x			ora 	NSStatus+1,x
.93d6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93d7		0a		asl a				asl 	a
.93d8		10 05		bpl $93df			bpl 	_NotRef
.93da		48		pha				pha
.93db		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93de		68		pla				pla
.93df						_NotRef:
.93df		0a		asl a				asl 	a
.93e0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93e2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93e4		15 79		ora $79,x			ora 	NSExponent+1,x
.93e6		f0 03		beq $93eb			beq 	_IntegerCode 				; if clear, then we have two integers
.93e8		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.93eb						_IntegerCode:
.93eb		b5 58		lda $58,x			lda		NSMantissa0,x
.93ed		55 59		eor $59,x			eor 		NSMantissa0+1,x
.93ef		95 58		sta $58,x			sta 	NSMantissa0,x
.93f1		b5 60		lda $60,x			lda		NSMantissa1,x
.93f3		55 61		eor $61,x			eor 		NSMantissa1+1,x
.93f5		95 60		sta $60,x			sta 	NSMantissa1,x
.93f7		b5 68		lda $68,x			lda		NSMantissa2,x
.93f9		55 69		eor $69,x			eor 		NSMantissa2+1,x
.93fb		95 68		sta $68,x			sta 	NSMantissa2,x
.93fd		b5 70		lda $70,x			lda		NSMantissa3,x
.93ff		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9401		95 70		sta $70,x			sta 	NSMantissa3,x
.9403		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9405		60		rts				rts
.9406						WordIndirect:
.9406		fa		plx				plx
.9407		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9409		15 51		ora $51,x			ora 	NSStatus+1,x
.940b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.940c		0a		asl a				asl 	a
.940d		10 05		bpl $9414			bpl 	_NotRef
.940f		48		pha				pha
.9410		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9413		68		pla				pla
.9414						_NotRef:
.9414		0a		asl a				asl 	a
.9415		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9417		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9419		15 79		ora $79,x			ora 	NSExponent+1,x
.941b		f0 03		beq $9420			beq 	_IntegerCode 				; if clear, then we have two integers
.941d		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.9420						_IntegerCode:
.9420		20 26 93	jsr $9326			jsr 	AddCode 					; add the two values
.9423		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9425		95 50		sta $50,x			sta 	NSStatus,x
.9427		60		rts				rts
.9428						ByteIndirect:
.9428		fa		plx				plx
.9429		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.942b		15 51		ora $51,x			ora 	NSStatus+1,x
.942d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.942e		0a		asl a				asl 	a
.942f		10 05		bpl $9436			bpl 	_NotRef
.9431		48		pha				pha
.9432		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9435		68		pla				pla
.9436						_NotRef:
.9436		0a		asl a				asl 	a
.9437		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9439		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.943b		15 79		ora $79,x			ora 	NSExponent+1,x
.943d		f0 03		beq $9442			beq 	_IntegerCode 				; if clear, then we have two integers
.943f		4c ae a0	jmp $a0ae			jmp 	TypeError 					; anything else, type mismatch.
.9442						_IntegerCode:
.9442		20 26 93	jsr $9326			jsr 	AddCode 					; add the two values
.9445		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9447		95 50		sta $50,x			sta 	NSStatus,x
.9449		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.944a						ConvertInt16:
.944a		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.944c		86 60		stx $60				stx 	NSMantissa1
.944e		64 68		stz $68				stz 	NSMantissa2
.9450		64 70		stz $70				stz 	NSMantissa3
.9452		64 50		stz $50				stz 	NSStatus 					; positive integer
.9454		a2 00		ldx #$00			ldx 	#0 							; stack level
.9456		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9458		80 00		bra $945a			bra 	ConvertInt32
.945a						ConvertInt32:
.945a		5a		phy				phy
.945b		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.945d		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.945f		10 08		bpl $9469			bpl 	_CI32NotNeg
.9461		48		pha				pha
.9462		a9 2d		lda #$2d			lda 	#'-'
.9464		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9467		c8		iny				iny
.9468		68		pla				pla
.9469						_CI32NotNeg:
.9469		20 77 94	jsr $9477			jsr 	_CI32DivideConvert 			; recursive conversion
.946c		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.946e		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9471		7a		ply				ply
.9472		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9474		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9476		60		rts				rts
.9477						_CI32DivideConvert:
.9477		e8		inx				inx 								; write to next slot up
.9478		20 28 9f	jsr $9f28			jsr 	NSMSetByte 		 			; write the base out.
.947b		ca		dex				dex
.947c		20 a5 91	jsr $91a5			jsr 	Int32Divide 				; divide
.947f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9481		48		pha				pha
.9482		20 62 91	jsr $9162			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9485		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; is it zero ?
.9488		f0 05		beq $948f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.948a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.948c		20 77 94	jsr $9477			jsr 	_CI32DivideConvert 			; and recusrively call.
.948f						_CI32NoRecurse:
.948f		68		pla				pla 								; remainder
.9490		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9492		90 02		bcc $9496			bcc 	_CI32NotHex
.9494		69 26		adc #$26			adc 	#6+32
.9496						_CI32NotHex:
.9496		69 30		adc #$30			adc 	#48
.9498		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.949b		c8		iny				iny
.949c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.949d						PrecedenceLevel:
>949d		04					.byte	 4	; $00 <<
>949e		02					.byte	 2	; $01 <=
>949f		02					.byte	 2	; $02 <>
>94a0		00					.byte	 0	; $03 !!3
>94a1		00					.byte	 0	; $04 ><
>94a2		02					.byte	 2	; $05 >=
>94a3		04					.byte	 4	; $06 >>
>94a4		00					.byte	 0	; $07 !!7
>94a5		00					.byte	 0	; $08 !!8
>94a6		00					.byte	 0	; $09 !!9
>94a7		00					.byte	 0	; $0a !!10
>94a8		00					.byte	 0	; $0b !!11
>94a9		00					.byte	 0	; $0c !!12
>94aa		00					.byte	 0	; $0d !!13
>94ab		00					.byte	 0	; $0e !!14
>94ac		00					.byte	 0	; $0f !!15
>94ad		00					.byte	 0	; $10 @
>94ae		00					.byte	 0	; $11 !!17
>94af		00					.byte	 0	; $12 !!18
>94b0		00					.byte	 0	; $13 [
>94b1		04					.byte	 4	; $14 \
>94b2		00					.byte	 0	; $15 ]
>94b3		01					.byte	 1	; $16 ^
>94b4		00					.byte	 0	; $17 _
>94b5		00					.byte	 0	; $18 `
>94b6		00					.byte	 0	; $19 !!25
>94b7		00					.byte	 0	; $1a !!26
>94b8		00					.byte	 0	; $1b {
>94b9		01					.byte	 1	; $1c |
>94ba		00					.byte	 0	; $1d }
>94bb		00					.byte	 0	; $1e ~
>94bc		00					.byte	 0	; $1f [7m<7F>[m
>94bd		00					.byte	 0	; $20
>94be		05					.byte	 5	; $21 !
>94bf		00					.byte	 0	; $22 "
>94c0		00					.byte	 0	; $23 #
>94c1		05					.byte	 5	; $24 $
>94c2		04					.byte	 4	; $25 %
>94c3		01					.byte	 1	; $26 &
>94c4		00					.byte	 0	; $27 '
>94c5		00					.byte	 0	; $28 (
>94c6		00					.byte	 0	; $29 )
>94c7		04					.byte	 4	; $2a *
>94c8		03					.byte	 3	; $2b +
>94c9		00					.byte	 0	; $2c ,
>94ca		03					.byte	 3	; $2d -
>94cb		00					.byte	 0	; $2e .
>94cc		04					.byte	 4	; $2f /
>94cd		00					.byte	 0	; $30 0
>94ce		00					.byte	 0	; $31 1
>94cf		00					.byte	 0	; $32 2
>94d0		00					.byte	 0	; $33 3
>94d1		00					.byte	 0	; $34 4
>94d2		00					.byte	 0	; $35 5
>94d3		00					.byte	 0	; $36 6
>94d4		00					.byte	 0	; $37 7
>94d5		00					.byte	 0	; $38 8
>94d6		00					.byte	 0	; $39 9
>94d7		00					.byte	 0	; $3a :
>94d8		00					.byte	 0	; $3b ;
>94d9		02					.byte	 2	; $3c <
>94da		02					.byte	 2	; $3d =
>94db		02					.byte	 2	; $3e >
>94dc		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.94dd						EvaluateExpressionAt0:
.94dd		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.94df						EvaluateExpression:
.94df		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.94e1						EvaluateExpressionAtPrecedence:
.94e1		48		pha				pha 								; save precedence level
.94e2		20 29 99	jsr $9929			jsr 	EvaluateTerm 				; evaluate term into level X.
.94e5		68		pla				pla 								; restore precedence level.
.94e6						_EXPRLoop:
.94e6		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.94e8		b1 30		lda ($30),y			lda 	(codePtr),y
.94ea		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.94ec		b0 25		bcs $9513			bcs 	_EXPRExit
.94ee		da		phx				phx 								; read the operator precedence
.94ef		aa		tax				tax
.94f0		bd 9d 94	lda $949d,x			lda 	PrecedenceLevel,x
.94f3		fa		plx				plx
.94f4		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.94f6		f0 1b		beq $9513			beq 	_EXPRExit
.94f8		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.94fa		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.94fc		c5 37		cmp $37				cmp 	zTemp0+1
.94fe		b0 13		bcs $9513			bcs		_EXPRExit 					; if current >= operator exit
.9500		48		pha				pha 								; save current precedence.
.9501		b1 30		lda ($30),y			lda 	(codePtr),y
.9503		c8		iny				iny
.9504		48		pha				pha
.9505		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9507		e8		inx				inx 								; work out the right hand side.
.9508		20 e1 94	jsr $94e1			jsr 	EvaluateExpressionAtPrecedence
.950b		ca		dex				dex
.950c		68		pla				pla 								; get operator, call the code.
.950d		20 16 95	jsr $9516			jsr 	_EXPRCaller
.9510		68		pla				pla 								; restore precedence level
.9511		80 d3		bra $94e6			bra 	_EXPRLoop 					; and go round.
.9513						_EXPRExit:
.9513		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9515		60		rts				rts
.9516						_EXPRCaller:
.9516		da		phx				phx 								; save on stack, first thing is to restore it
.9517		0a		asl a				asl 	a 							; double so can use vectors into X
.9518		aa		tax				tax
.9519		7c da 8c	jmp ($8cda,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.951c						FloatingPointAdd:
.951c		20 92 96	jsr $9692			jsr 	FloatPrepare 				; prepare for floats
.951f		80 09		bra $952a			bra 	FloatAdd
.9521						FloatingPointSub:
.9521		20 92 96	jsr $9692			jsr 	FloatPrepare 				; prepare for floats
.9524						FloatSubtract:
.9524		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9526		49 80		eor #$80			eor 	#$80
.9528		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.952a						FloatAdd:
.952a		48		pha				pha
.952b		5a		phy				phy
.952c		20 a1 96	jsr $96a1			jsr 	NSNormalise 				; normalise S[X]
.952f		f0 51		beq $9582			beq 	_FAReturn1
.9531		e8		inx				inx 								; normalise S[X+1]
.9532		20 a1 96	jsr $96a1			jsr 	NSNormalise
.9535		ca		dex				dex
.9536		c9 00		cmp #$00			cmp 	#0
.9538		f0 60		beq $959a			beq 	_FAExit 					; if so, just return A
.953a		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.953c		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.953e		f0 18		beq $9558			beq 	_FAExponentsEqual
.9540		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9542		a8		tay				tay
.9543		38		sec				sec 								; do a signed comparison of the exponents.
.9544		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9546		50 02		bvc $954a			bvc 	_FANoSignedChange
.9548		49 80		eor #$80			eor 	#$80
.954a						_FANoSignedChange:
.954a		29 80		and #$80			and 	#$80
.954c		10 02		bpl $9550			bpl 	_FAHaveMax
.954e		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9550						_FAHaveMax:
.9550		20 9d 95	jsr $959d			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9553		e8		inx				inx
.9554		20 9d 95	jsr $959d			jsr 	_FAShiftToExponent
.9557		ca		dex				dex
.9558						_FAExponentsEqual:
.9558		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.955a		55 51		eor $51,x			eor 	NSStatus+1,x
.955c		30 0e		bmi $956c			bmi 	_FADifferentSigns
.955e		20 d5 92	jsr $92d5			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9561		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9563		10 35		bpl $959a			bpl 	_FAExit 					; if no, we are done.
.9565		20 3f 9f	jsr $9f3f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9568		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.956a		80 2e		bra $959a			bra 	_FAExit
.956c						_FADifferentSigns:
.956c		20 ef 92	jsr $92ef			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.956f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9571		10 06		bpl $9579			bpl 	_FACheckZero 				; if no, check for -0
.9573		20 e8 9e	jsr $9ee8			jsr 	NSMNegate 					; netate result
.9576		20 ef 9e	jsr $9eef			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9579						_FACheckZero:
.9579		20 48 9f	jsr $9f48			jsr 	NSMIsZero	 				; check for -0
.957c		d0 1c		bne $959a			bne 	_FAExit
.957e		74 50		stz $50,x			stz 	NSStatus,x
.9580		80 18		bra $959a			bra 	_FAExit
.9582						_FAReturn1:
.9582		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9584		95 58		sta $58,x			sta 	NSMantissa0,x
.9586		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9588		95 60		sta $60,x			sta 	NSMantissa1,x
.958a		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.958c		95 68		sta $68,x			sta 	NSMantissa2,x
.958e		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9590		95 70		sta $70,x			sta 	NSMantissa3,x
.9592		b5 79		lda $79,x			lda 	NSExponent+1,x
.9594		95 78		sta $78,x			sta 	NSExponent,x
.9596		b5 51		lda $51,x			lda 	NSStatus+1,x
.9598		95 50		sta $50,x			sta 	NSStatus,x
.959a						_FAExit:
.959a		7a		ply				ply
.959b		68		pla				pla
.959c		60		rts				rts
.959d						_FAShiftToExponent:
.959d						_FAShiftToExponent2:
.959d		98		tya				tya 								; compare Y to exponent
.959e		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.95a0		f0 07		beq $95a9			beq 	_FASEExit 					; exit if so.
.95a2		20 3f 9f	jsr $9f3f			jsr 	NSMShiftRight	 			; shift the mantissa right
.95a5		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.95a7		80 f4		bra $959d			bra 	_FAShiftToExponent2
.95a9						_FASEExit:
.95a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.95aa						CompareFloat:
.95aa		20 24 95	jsr $9524			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.95ad		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.95af		29 f8		and #$f8			and 	#$F8
.95b1		15 68		ora $68,x			ora 	NSMantissa2,x
.95b3		15 70		ora $70,x			ora 	NSMantissa3,x
.95b5		f0 08		beq $95bf			beq 	_FCExit 					; zero, so approximately identical
.95b7		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.95b9		34 50		bit $50,x			bit 	NSStatus,x
.95bb		10 02		bpl $95bf			bpl 	_FCExit
.95bd						_FCNegative:
.95bd		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.95bf						_FCExit:
.95bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.95c0						FDivideCommand:
.95c0		fa		plx				plx	 								; restore stack position
.95c1		20 92 96	jsr $9692			jsr 	FloatPrepare 				; prepare for floats
.95c4						FloatDivide:
.95c4		48		pha				pha
.95c5		e8		inx				inx
.95c6		20 a1 96	jsr $96a1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95c9		ca		dex				dex
.95ca		c9 00		cmp #$00			cmp 	#0
.95cc		f0 1d		beq $95eb			beq 	_FDZero
.95ce		20 a1 96	jsr $96a1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.95d1		f0 16		beq $95e9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.95d3		20 c6 91	jsr $91c6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.95d6		20 62 91	jsr $9162			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.95d9		20 a1 96	jsr $96a1			jsr		NSNormalise 				; renormalise
.95dc		20 56 92	jsr $9256			jsr 	CalculateSign 				; calculate result sign
.95df		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.95e1		38		sec				sec
.95e2		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.95e4		38		sec				sec
.95e5		e9 1e		sbc #$1e			sbc 	#30
.95e7		95 78		sta $78,x			sta 	NSExponent,x
.95e9						_FDExit:
.95e9		68		pla				pla
.95ea		60		rts				rts
.95eb						_FDZero:
.95eb		a9 03		lda #$03		lda	#3
.95ed		4c db 8f	jmp $8fdb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.95f0						FloatFractionalPart:
.95f0		5a		phy				phy
.95f1		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.95f3		29 7f		and #$7f			and 	#$7F
.95f5		95 50		sta $50,x			sta 	NSStatus,x
.95f7		20 a1 96	jsr $96a1			jsr 	NSNormalise
.95fa		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.95fc		38		sec				sec
.95fd		e9 e0		sbc #$e0			sbc 	#$E0
.95ff		90 29		bcc $962a			bcc 	_FFPExit 					; already fractional
.9601		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9603		b0 22		bcs $9627			bcs 	_FFPZero
.9605		a8		tay				tay 								; put count to do in Y
.9606		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9608		20 2c 96	jsr $962c			jsr 	_FFPPartial
.960b		95 70		sta $70,x			sta 	NSMantissa3,x
.960d		b5 68		lda $68,x			lda 	NSMantissa2,x
.960f		20 2c 96	jsr $962c			jsr 	_FFPPartial
.9612		95 68		sta $68,x			sta 	NSMantissa2,x
.9614		b5 60		lda $60,x			lda 	NSMantissa1,x
.9616		20 2c 96	jsr $962c			jsr 	_FFPPartial
.9619		95 60		sta $60,x			sta 	NSMantissa1,x
.961b		b5 58		lda $58,x			lda 	NSMantissa0,x
.961d		20 2c 96	jsr $962c			jsr 	_FFPPartial
.9620		95 58		sta $58,x			sta 	NSMantissa0,x
.9622		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; zeroed check.
.9625		d0 03		bne $962a			bne 	_FFPExit
.9627						_FFPZero:
.9627		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.962a						_FFPExit:
.962a		7a		ply				ply
.962b		60		rts				rts
.962c						_FFPPartial:
.962c		c0 00		cpy #$00			cpy 	#0 							; no more to do
.962e		f0 17		beq $9647			beq 	_FFFPPExit
.9630		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9632		b0 0c		bcs $9640			bcs 	_FFFPPWholeByte
.9634		5a		phy				phy
.9635						_FFFPPLeft:
.9635		0a		asl a				asl 	a
.9636		88		dey				dey
.9637		d0 fc		bne $9635			bne 	_FFFPPLeft
.9639		7a		ply				ply
.963a						_FFFPPRight:
.963a		4a		lsr a				lsr 	a
.963b		88		dey				dey
.963c		d0 fc		bne $963a			bne 	_FFFPPRight
.963e		80 07		bra $9647			bra 	_FFFPPExit
.9640						_FFFPPWholeByte:
.9640		98		tya				tya 								; subtract 8 from count
.9641		38		sec				sec
.9642		e9 08		sbc #$08			sbc 	#8
.9644		a8		tay				tay
.9645		a9 00		lda #$00			lda 	#0 							; and clear all
.9647						_FFFPPExit:
.9647		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9648						FloatIntegerPart:
.9648		48		pha				pha
.9649		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.964b		f0 1d		beq $966a			beq 	_FIPExit 					; if so do nothing
.964d		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; is it zero ?
.9650		f0 15		beq $9667			beq 	_FIPZero 					; if so return zero.
.9652		20 a1 96	jsr $96a1			jsr 	NSNormalise 				; normalise
.9655		f0 10		beq $9667			beq 	_FIPZero 					; normalised to zero, exit zero
.9657						_FIPShift:
.9657		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9659		10 07		bpl $9662			bpl 	_FIPCheckZero
.965b		20 3f 9f	jsr $9f3f			jsr 	NSMShiftRight 				; shift mantissa right
.965e		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9660		80 f5		bra $9657			bra 	_FIPShift
.9662						_FIPCheckZero:
.9662		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; avoid -0 problem
.9665		d0 03		bne $966a			bne 	_FIPExit 					; set to zero if mantissa zero.
.9667						_FIPZero:
.9667		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.966a						_FIPExit:
.966a		68		pla				pla
.966b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.966c						FloatingPointMultiply:
.966c		20 92 96	jsr $9692			jsr 	FloatPrepare 				; prepare for floats
.966f						FloatMultiply:
.966f		48		pha				pha
.9670		20 a1 96	jsr $96a1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9673		f0 18		beq $968d			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9675		e8		inx				inx
.9676		20 a1 96	jsr $96a1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9679		ca		dex				dex
.967a		c9 00		cmp #$00			cmp 	#0
.967c		f0 0c		beq $968a			beq 	_FDSetZero
.967e		20 18 92	jsr $9218			jsr 	MultiplyShort 				; calculate the result.
.9681		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9683		18		clc				clc
.9684		75 79		adc $79,x			adc 	NSExponent+1,x
.9686		95 78		sta $78,x			sta 	NSExponent,x
.9688		80 03		bra $968d			bra 	_FDExit
.968a						_FDSetZero:
.968a		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; return 0
.968d						_FDExit:
.968d		20 a1 96	jsr $96a1			jsr 	NSNormalise 				; normalise the result
.9690		68		pla				pla
.9691		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9692						FloatPrepare:
.9692		20 9d 97	jsr $979d			jsr 	DereferenceTopTwo 			; dereference the top two values
.9695		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9697		15 51		ora $51,x			ora 	NSStatus+1,x
.9699		29 10		and #$10			and 	#NSBIsString
.969b		d0 01		bne $969e			bne 	_FDType
.969d		60		rts				rts
.969e						_FDType:
.969e		4c ae a0	jmp $a0ae			jmp 	TypeError
.96a1						NSNormalise:
.96a1		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.96a3		29 80		and #$80			and 	#$80
.96a5		09 08		ora #$08			ora 	#NSTFloat
.96a7		95 50		sta $50,x			sta 	NSStatus,x
.96a9		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; if zero exit
.96ac		d0 07		bne $96b5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.96ae		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.96b0		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.96b2		a9 00		lda #$00			lda 	#0 							; set Z flag
.96b4		60		rts				rts
.96b5						_NSNormaliseOptimise:
.96b5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.96b7		d0 19		bne $96d2			bne 	_NSNormaliseLoop
.96b9		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.96bb		30 15		bmi $96d2			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.96bd		95 70		sta $70,x			sta 	NSMantissa3,x
.96bf		b5 60		lda $60,x			lda 	NSMantissa1,x
.96c1		95 68		sta $68,x			sta 	NSMantissa2,x
.96c3		b5 58		lda $58,x			lda 	NSMantissa0,x
.96c5		95 60		sta $60,x			sta 	NSMantissa1,x
.96c7		74 58		stz $58,x			stz 	NSMantissa0,x
.96c9		b5 78		lda $78,x			lda 	NSExponent,x
.96cb		38		sec				sec
.96cc		e9 08		sbc #$08			sbc 	#8
.96ce		95 78		sta $78,x			sta 	NSExponent,x
.96d0		80 e3		bra $96b5			bra 	_NSNormaliseOptimise
.96d2						_NSNormaliseLoop:
.96d2		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.96d4		70 07		bvs $96dd			bvs 	_NSNExit 					; exit if so with Z flag clear
.96d6		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; shift mantissa left
.96d9		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.96db		80 f5		bra $96d2			bra 	_NSNormaliseLoop
.96dd						_NSNExit:
.96dd		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.96df		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.96e0						AssignNumber:
.96e0		5a		phy				phy
.96e1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.96e3		85 36		sta $36				sta 	zTemp0
.96e5		b5 60		lda $60,x			lda 	NSMantissa1,x
.96e7		85 37		sta $37				sta 	zTemp0+1
.96e9		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.96eb		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.96ed		95 50		sta $50,x			sta 	NSStatus,x
.96ef		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.96f1		c9 08		cmp #$08			cmp 	#NSTFloat
.96f3		f0 24		beq $9719			beq 	_ANFloat
.96f5		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.96f7		f0 03		beq $96fc			beq		_ANNotFloat
.96f9		4c a9 a0	jmp $a0a9			jmp 	RangeError					; if it is, report an error.
.96fc						_ANNotFloat:
.96fc		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.96fe		29 03		and #$03			and 	#3
.9700		d0 05		bne $9707			bne 	_ANByteWord
.9702		20 24 97	jsr $9724			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9705		80 1b		bra $9722			bra 	_ANExit
.9707						_ANByteWord:
.9707		48		pha				pha 								; save count
.9708		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.970a		92 36		sta ($36)			sta 	(zTemp0)
.970c		68		pla				pla
.970d		c9 01		cmp #$01			cmp	 	#1
.970f		f0 11		beq $9722			beq 	_ANExit
.9711		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9713		a0 01		ldy #$01			ldy 	#1
.9715		91 36		sta ($36),y			sta 	(zTemp0),y
.9717		80 09		bra $9722			bra 	_ANExit
.9719						_ANFloat:
.9719		20 24 97	jsr $9724			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.971c		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.971e		a0 04		ldy #$04			ldy 	#4
.9720		91 36		sta ($36),y			sta 	(zTemp0),y
.9722						_ANExit:
.9722		7a		ply				ply
.9723		60		rts				rts
.9724						_ANCopy4PackSign:
.9724		a0 03		ldy #$03			ldy 	#3
.9726		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9728		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.972a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.972c		91 36		sta ($36),y			sta 	(zTemp0),y
.972e		88		dey				dey
.972f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9731		91 36		sta ($36),y			sta 	(zTemp0),y
.9733		88		dey				dey
.9734		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9736		91 36		sta ($36),y			sta 	(zTemp0),y
.9738		88		dey				dey
.9739		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.973b		91 36		sta ($36),y			sta 	(zTemp0),y
.973d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.973e						AssignString:
.973e		5a		phy				phy
.973f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9741		85 38		sta $38				sta 	zTemp1
.9743		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9745		85 39		sta $39				sta 	zTemp1+1
.9747		b5 58		lda $58,x			lda 	NSMantissa0,x
.9749		85 36		sta $36				sta 	zTemp0
.974b		b5 60		lda $60,x			lda 	NSMantissa1,x
.974d		85 37		sta $37				sta 	zTemp0+1
.974f		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9751		b1 36		lda ($36),y			lda 	(zTemp0),y
.9753		f0 23		beq $9778			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9755		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9756		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9758		e9 02		sbc #$02			sbc 	#2
.975a		85 3c		sta $3c				sta 	zsTemp
.975c		a0 01		ldy #$01			ldy 	#1
.975e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9760		e9 00		sbc #$00			sbc 	#0
.9762		85 3d		sta $3d				sta 	zsTemp+1
.9764		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9766						_ASGetLength:
.9766		c8		iny				iny
.9767		b1 38		lda ($38),y			lda 	(zTemp1),y
.9769		d0 fb		bne $9766			bne 	_ASGetLength
.976b		98		tya				tya 								; is this length <= current length
.976c		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.976e		90 1e		bcc $978e			bcc 	_ASCopyString
.9770		f0 1c		beq $978e			beq 	_ASCopyString
.9772		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9774		a0 01		ldy #$01			ldy 	#1
.9776		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9778						_ASNewStringRequired:
.9778		e8		inx				inx 								; concrete the new string.
.9779		20 94 b0	jsr $b094			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.977c		ca		dex				dex
.977d		18		clc				clc
.977e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9780		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9782		92 36		sta ($36)			sta 	(zTemp0)
.9784		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9786		69 00		adc #$00			adc 	#0
.9788		a0 01		ldy #$01			ldy 	#1
.978a		91 36		sta ($36),y			sta 	(zTemp0),y
.978c		80 0d		bra $979b			bra 	_ASExit
.978e						_ASCopyString:
.978e		a0 00		ldy #$00			ldy 	#0
.9790						_ASCopyLoop:
.9790		b1 38		lda ($38),y			lda 	(zTemp1),y
.9792		c8		iny				iny
.9793		c8		iny				iny
.9794		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9796		88		dey				dey
.9797		c9 00		cmp #$00			cmp 	#0
.9799		d0 f5		bne $9790			bne 	_ASCopyLoop
.979b						_ASExit:
.979b		7a		ply				ply
.979c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.979d						DereferenceTopTwo:
.979d		e8		inx				inx
.979e		20 a2 97	jsr $97a2			jsr 	Dereference 				; deref x+1
.97a1		ca		dex				dex  								; falls through to deref x
.97a2						Dereference:
.97a2		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.97a4		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.97a6		f0 48		beq $97f0			beq 	_DRFExit 					; not a reference, so exit.
.97a8		5a		phy				phy
.97a9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.97ab		85 36		sta $36				sta 	zTemp0
.97ad		b5 60		lda $60,x			lda 	NSMantissa1,x
.97af		85 37		sta $37				sta 	zTemp0+1
.97b1		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.97b3		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.97b5		95 58		sta $58,x			sta 	NSMantissa0,x
.97b7		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.97b9		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.97bb		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.97bd		f0 0e		beq $97cd			beq 	_DRFDereferenceTwo
.97bf		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.97c1		f0 2f		beq $97f2			beq 	_DRFFull
.97c3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.97c5		29 03		and #$03			and 	#3
.97c7		f0 29		beq $97f2			beq 	_DRFFull 					; the whole word
.97c9		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.97cb		f0 06		beq $97d3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.97cd						_DRFDereferenceTwo:
.97cd		a0 01		ldy #$01			ldy 	#1
.97cf		b1 36		lda ($36),y			lda 	(zTemp0),y
.97d1		95 60		sta $60,x			sta 	NSMantissa1,x
.97d3						_DRFClear23:
.97d3		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.97d5		74 70		stz $70,x			stz 	NSMantissa3,x
.97d7		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.97d9		29 18		and #$18			and 	#NSBTypeMask
.97db		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.97dd		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.97df		d0 0e		bne $97ef			bne 	_DRFNotString
.97e1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.97e3		15 60		ora $60,x			ora 	NSMantissa1,x
.97e5		d0 08		bne $97ef			bne 	_DRFNotString
.97e7		a9 f1		lda #$f1			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.97e9		95 58		sta $58,x			sta 	NSMantissa0,x
.97eb		a9 97		lda #$97			lda 	#_DRFNullString >> 8
.97ed		95 60		sta $60,x			sta 	NSMantissa1,x
.97ef						_DRFNotString
.97ef		7a		ply				ply 								; restore Y and exit
.97f0						_DRFExit:
.97f0		60		rts				rts
.97f1						_DRFNullString:
>97f1		00						.byte 	0
.97f2						_DRFFull:
.97f2		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.97f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.97f6		95 60		sta $60,x			sta 	NSMantissa1,x
.97f8		c8		iny				iny
.97f9		b1 36		lda ($36),y			lda 	(zTemp0),y
.97fb		95 68		sta $68,x			sta 	NSMantissa2,x
.97fd		c8		iny				iny
.97fe		b1 36		lda ($36),y			lda 	(zTemp0),y
.9800		95 70		sta $70,x			sta 	NSMantissa3,x
.9802		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9804		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9806		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9808		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.980a		f0 05		beq $9811			beq 	_DRFNoExponent
.980c		c8		iny				iny 								; if not, read the exponent as well.
.980d		b1 36		lda ($36),y			lda 	(zTemp0),y
.980f		95 78		sta $78,x			sta 	NSExponent,x
.9811						_DRFNoExponent:
.9811		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9813		10 0a		bpl $981f			bpl 	_DRFExit2 					; if not, then exit.
.9815		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9817		95 70		sta $70,x			sta 	NSMantissa3,x
.9819		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.981b		09 80		ora #$80			ora 	#NSBIsNegative
.981d		95 50		sta $50,x			sta 	NSStatus,x
.981f						_DRFExit2:
.981f		7a		ply				ply
.9820		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9821						EncodeNumberStart:
.9821		38		sec				sec
.9822		80 01		bra $9825			bra 	EncodeNumberContinue+1
.9824						EncodeNumberContinue:
.9824		18		clc				clc
.9825						EncodeNumber:
.9825		08		php				php 								; save reset flag.
.9826		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9828		f0 12		beq $983c			beq 	_ENIsOkay
.982a		c9 30		cmp #$30			cmp 	#"0"
.982c		90 04		bcc $9832			bcc 	_ENBadNumber
.982e		c9 3a		cmp #$3a			cmp 	#"9"+1
.9830		90 0a		bcc $983c			bcc 	_ENIsOkay
.9832						_ENBadNumber:
.9832		28		plp				plp 								; throw saved reset
.9833		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9836		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9838		f0 7b		beq $98b5			beq 	_ENConstructFinal
.983a						_ENFail:
.983a		18		clc				clc 								; not allowed
.983b		60		rts				rts
.983c						_ENIsOkay:
.983c		28		plp				plp 								; are we restarting
.983d		90 15		bcc $9854			bcc 	_ENNoRestart
.983f						_ENStartEncode:
.983f		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9841		f0 0c		beq $984f			beq 	_ENFirstDP
.9843		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9845		20 28 9f	jsr $9f28			jsr 	NSMSetByte 					; in single byte mode.
.9848		a9 01		lda #$01			lda 	#ESTA_Low
.984a						_ENExitChange:
.984a		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.984d		38		sec				sec
.984e		60		rts				rts
.984f						_ENFirstDP:
.984f		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; clear integer part
.9852		80 3c		bra $9890			bra 	_ESTASwitchFloat			; go straight to float and exi
.9854						_ENNoRestart:
.9854		48		pha				pha 								; save digit or DP on stack.
.9855		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9858		c9 01		cmp #$01			cmp 	#ESTA_Low
.985a		f0 09		beq $9865			beq  	_ESTALowState
.985c		c9 02		cmp #$02			cmp 	#ESTA_High
.985e		f0 26		beq $9886			beq 	_ESTAHighState
.9860		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9862		f0 38		beq $989c			beq 	_ESTADecimalState
>9864		db						.byte 	$DB 						; causes a break in the emulator
.9865						_ESTALowState:
.9865		68		pla				pla 								; get value back
.9866		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9868		f0 26		beq $9890			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.986a		29 0f		and #$0f			and 	#15 						; make digit
.986c		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.986f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9871		0a		asl a				asl 	a
.9872		0a		asl a				asl 	a
.9873		75 58		adc $58,x			adc 	NSMantissa0,x
.9875		0a		asl a				asl 	a
.9876		6d 06 04	adc $0406			adc 	digitTemp
.9879		95 58		sta $58,x			sta 	NSMantissa0,x
.987b		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.987d		90 05		bcc $9884			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.987f		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9881		8d 05 04	sta $0405			sta 	encodeState
.9884						_ESTANoSwitch:
.9884		38		sec				sec
.9885		60		rts				rts
.9886						_ESTAHighState:
.9886		68		pla				pla 								; get value back
.9887		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9889		f0 05		beq $9890			beq 	_ESTASwitchFloat
.988b		20 e9 98	jsr $98e9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.988e		38		sec				sec
.988f		60		rts				rts
.9890						_ESTASwitchFloat:
.9890		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9893		e8		inx				inx 								; zero the decimal additive.
.9894		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.9897		ca		dex				dex
.9898		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.989a		80 ae		bra $984a			bra 	_ENExitChange
.989c						_ESTADecimalState:
.989c		68		pla				pla 								; digit.
.989d		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.989f		f0 99		beq $983a			beq 	_ENFail
.98a1		e8		inx				inx 								; put digit into fractional part of X+1
.98a2		20 e9 98	jsr $98e9			jsr 	ESTAShiftDigitIntoMantissa
.98a5		ca		dex				dex
.98a6		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.98a9		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.98ac		c9 0b		cmp #$0b			cmp 	#11
.98ae		f0 02		beq $98b2			beq 	_ESTADSFail
.98b0		38		sec				sec
.98b1		60		rts				rts
.98b2						_ESTADSFail:
.98b2		4c a9 a0	jmp $a0a9			jmp 	RangeError
.98b5						_ENConstructFinal:
.98b5		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.98b8		f0 2d		beq $98e7			beq 	_ENCFExit 					; no decimals
.98ba		5a		phy				phy
.98bb		0a		asl a				asl 	a 							; x 4 and CLC
.98bc		0a		asl a				asl 	a
.98bd		6d 07 04	adc $0407			adc 	decimalCount
.98c0		a8		tay				tay
.98c1		b9 68 a0	lda $a068,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.98c4		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.98c6		b9 69 a0	lda $a069,y			lda 	DecimalScalarTable-5+1,y
.98c9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.98cb		b9 6a a0	lda $a06a,y			lda 	DecimalScalarTable-5+2,y
.98ce		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.98d0		b9 6b a0	lda $a06b,y			lda 	DecimalScalarTable-5+3,y
.98d3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.98d5		b9 6c a0	lda $a06c,y			lda 	DecimalScalarTable-5+4,y
.98d8		95 7a		sta $7a,x			sta 	NSExponent+2,x
.98da		a9 08		lda #$08			lda 	#NSTFloat
.98dc		95 52		sta $52,x			sta 	NSStatus+2,x
.98de		7a		ply				ply
.98df		e8		inx				inx 								; multiply decimal const by decimal scalar
.98e0		20 6f 96	jsr $966f			jsr 	FloatMultiply
.98e3		ca		dex				dex
.98e4		20 2a 95	jsr $952a			jsr 	FloatAdd 					; add to integer part.
.98e7						_ENCFExit:
.98e7		18		clc				clc 								; reject the digit.
.98e8		60		rts				rts
.98e9						ESTAShiftDigitIntoMantissa:
.98e9		29 0f		and #$0f			and 	#15 						; save digit
.98eb		48		pha				pha
.98ec		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.98ee		48		pha				pha
.98ef		b5 68		lda $68,x			lda 	NSMantissa2,x
.98f1		48		pha				pha
.98f2		b5 60		lda $60,x			lda 	NSMantissa1,x
.98f4		48		pha				pha
.98f5		b5 58		lda $58,x			lda 	NSMantissa0,x
.98f7		48		pha				pha
.98f8		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; x 2
.98fb		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; x 4
.98fe		18		clc				clc 								; pop mantissa and add
.98ff		68		pla				pla
.9900		75 58		adc $58,x			adc 	NSMantissa0,x
.9902		95 58		sta $58,x			sta 	NSMantissa0,x
.9904		68		pla				pla
.9905		75 60		adc $60,x			adc 	NSMantissa1,x
.9907		95 60		sta $60,x			sta 	NSMantissa1,x
.9909		68		pla				pla
.990a		75 68		adc $68,x			adc 	NSMantissa2,x
.990c		95 68		sta $68,x			sta 	NSMantissa2,x
.990e		68		pla				pla
.990f		75 70		adc $70,x			adc 	NSMantissa3,x
.9911		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9913		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; x 10
.9916		68		pla				pla 								; add digit
.9917		18		clc				clc
.9918		75 58		adc $58,x			adc 	NSMantissa0,x
.991a		95 58		sta $58,x			sta 	NSMantissa0,x
.991c		90 0a		bcc $9928			bcc 	_ESTASDExit
.991e		f6 60		inc $60,x			inc 	NSMantissa1,x
.9920		d0 06		bne $9928			bne 	_ESTASDExit
.9922		f6 68		inc $68,x			inc 	NSMantissa2,x
.9924		d0 02		bne $9928			bne 	_ESTASDExit
.9926		f6 70		inc $70,x			inc 	NSMantissa3,x
.9928						_ESTASDExit:
.9928		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9929						EvaluateTerm:
.9929		b1 30		lda ($30),y			lda 	(codePtr),y
.992b		30 18		bmi $9945			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.992d		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.992f		b0 6c		bcs $999d			bcs 	_ETVariable
.9931		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9933		90 6b		bcc $99a0			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9935		c9 3a		cmp #$3a			cmp 	#'9'+1
.9937		b0 67		bcs $99a0			bcs 	_ETPuncUnary
.9939		20 21 98	jsr $9821			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.993c						_ETNumber:
.993c		c8		iny				iny 								; keep encoding until we have the numbers
.993d		b1 30		lda ($30),y			lda 	(codePtr),y
.993f		20 24 98	jsr $9824			jsr 	EncodeNumberContinue
.9942		b0 f8		bcs $993c			bcs 	_ETNumber 					; go back if accepted.
.9944		60		rts				rts
.9945						_ETCheckUnary:
.9945		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9947		f0 3f		beq $9988			beq 	_ETString
.9949		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.994b		f0 12		beq $995f			beq 	_ETHexConstant
.994d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.994f		90 0b		bcc $995c			bcc 	_ETSyntaxError
.9951		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9953		b0 07		bcs $995c			bcs 	_ETSyntaxError
.9955		da		phx				phx 								; push X on the stack
.9956		0a		asl a				asl 	a 							; put vector x 2 into X
.9957		aa		tax				tax
.9958		c8		iny				iny 								; consume unary function token
.9959		7c 5a 8d	jmp ($8d5a,x)			jmp 	(VectorSet0,x) 				; and do it.
.995c						_ETSyntaxError:
.995c		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.995f						_ETHexConstant:
.995f		c8		iny				iny 								; skip #
.9960		c8		iny				iny 								; skip count
.9961		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; clear result
.9964						_ETHLoop:
.9964		b1 30		lda ($30),y			lda 	(codePtr),y
.9966		c8		iny				iny 								; and consume
.9967		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9969		f0 1c		beq $9987			beq 	_ETHExit
.996b		48		pha				pha 								; save on stack.
.996c		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; x 2
.996f		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; x 4
.9972		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; x 8
.9975		20 35 9f	jsr $9f35			jsr 	NSMShiftLeft 				; x 16
.9978		68		pla				pla 								; ASCII
.9979		c9 41		cmp #$41			cmp 	#'A'
.997b		90 02		bcc $997f			bcc 	_ETHNotChar
.997d		e9 07		sbc #$07			sbc 	#7
.997f						_ETHNotChar:
.997f		29 0f		and #$0f			and 	#15 						; digit now
.9981		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9983		95 58		sta $58,x			sta 	NSMantissa0,x
.9985		80 dd		bra $9964			bra 	_ETHLoop 					; go round.
.9987						_ETHExit:
.9987		60		rts				rts
.9988						_ETString:
.9988		c8		iny				iny 								; look at length
.9989		b1 30		lda ($30),y			lda 	(codePtr),y
.998b		48		pha				pha
.998c		c8		iny				iny 								; first character
.998d		20 bc a6	jsr $a6bc			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9990		68		pla				pla 								; restore count and save
.9991		85 36		sta $36				sta 	zTemp0
.9993		98		tya				tya 								; add length to Y to skip it.
.9994		18		clc				clc
.9995		65 36		adc $36				adc 	zTemp0
.9997		a8		tay				tay
.9998		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.999a		95 50		sta $50,x			sta 	NSStatus,x
.999c		60		rts				rts
.999d						_ETVariable:
.999d		4c f2 99	jmp $99f2			jmp 	VariableHandler
.99a0						_ETPuncUnary:
.99a0		c8		iny				iny 								; consume the unary character
.99a1		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.99a3		f0 2b		beq $99d0			beq 	_ETUnaryNegate
.99a5		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.99a7		f0 36		beq $99df			beq 	_ETDereference
.99a9		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.99ab		f0 3e		beq $99eb			beq 	_ETParenthesis
.99ad		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.99af		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.99b1		f0 06		beq $99b9			beq 	_ETIndirection
.99b3		e6 36		inc $36				inc 	zTemp0
.99b5		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.99b7		d0 a3		bne $995c			bne 	_ETSyntaxError
.99b9						_ETIndirection:
.99b9		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.99bb		1a		inc a				inc 	a
.99bc		48		pha				pha
.99bd		20 29 99	jsr $9929			jsr 	EvaluateTerm				; evaluate the term
.99c0		20 a2 97	jsr $97a2			jsr 	Dereference 				; dereference it.
.99c3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.99c5		d0 06		bne $99cd			bne 	_ETTypeMismatch
.99c7		68		pla				pla 								; indirection 1-2
.99c8		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.99ca		95 50		sta $50,x			sta 	NSStatus,x
.99cc		60		rts				rts
.99cd						_ETTypeMismatch:
.99cd		4c ae a0	jmp $a0ae			jmp 	TypeError
.99d0						_ETUnaryNegate:
.99d0		20 29 99	jsr $9929			jsr 	EvaluateTerm				; evaluate the term
.99d3		20 a2 97	jsr $97a2			jsr 	Dereference 				; dereference it.
.99d6		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.99d8		29 10		and #$10			and 	#NSTString
.99da		d0 f1		bne $99cd			bne 	_ETTypeMismatch
.99dc		4c e8 9e	jmp $9ee8			jmp 	NSMNegate  					; just toggles the sign bit.
.99df						_ETDereference:
.99df		20 29 99	jsr $9929			jsr 	EvaluateTerm				; evaluate the term
.99e2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.99e4		29 20		and #$20			and 	#NSBIsReference
.99e6		f0 e5		beq $99cd			beq 	_ETTypeMismatch
.99e8		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.99ea		60		rts				rts
.99eb						_ETParenthesis:
.99eb		20 df 94	jsr $94df			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.99ee		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 			; check for )
.99f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.99f2						VariableHandler:
.99f2		b1 30		lda ($30),y			lda 	(codePtr),y
.99f4		18		clc				clc
.99f5		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.99f7		85 37		sta $37				sta 	zTemp0+1
.99f9		c8		iny				iny
.99fa		b1 30		lda ($30),y			lda 	(codePtr),y
.99fc		85 36		sta $36				sta 	zTemp0
.99fe		c8		iny				iny
.99ff		18		clc				clc									; copy variable address+3 to mantissa
.9a00		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9a02		95 58		sta $58,x			sta 	NSMantissa0,x
.9a04		a5 37		lda $37				lda 	zTemp0+1
.9a06		69 00		adc #$00			adc 	#0
.9a08		95 60		sta $60,x			sta 	NSMantissa1,x
.9a0a		74 68		stz $68,x			stz 	NSMantissa2,x
.9a0c		74 70		stz $70,x			stz 	NSMantissa3,x
.9a0e		74 78		stz $78,x			stz 	NSExponent,x
.9a10		5a		phy				phy
.9a11		a0 02		ldy #$02			ldy 	#2 							; read type
.9a13		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a15		7a		ply				ply
.9a16		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9a18		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9a1a		95 50		sta $50,x			sta 	NSStatus,x
.9a1c		29 04		and #$04			and 	#NSBIsArray
.9a1e		d0 01		bne $9a21			bne 	_VHArray
.9a20		60		rts				rts
.9a21						_VHArray:
.9a21		e8		inx				inx
.9a22		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9a25		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9a27		95 51		sta $51,x			sta 	NSStatus+1,x
.9a29		b1 30		lda ($30),y			lda 	(codePtr),y
.9a2b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9a2d		d0 06		bne $9a35			bne 	_VHNoSecondIndex
.9a2f		c8		iny				iny 								; skip the comma
.9a30		e8		inx				inx
.9a31		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9a34		ca		dex				dex
.9a35						_VHNoSecondIndex:
.9a35		ca		dex				dex 								; set X back.
.9a36		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 			; and check the right bracket.
.9a39		5a		phy				phy 								; save position
.9a3a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9a3c		85 3e		sta $3e				sta 	zaTemp
.9a3e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a40		85 3f		sta $3f				sta 	zaTemp+1
.9a42		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9a44		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a46		f0 5d		beq $9aa5			beq 	_VHBadArray
.9a48		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9a4a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a4c		f0 02		beq $9a50			beq 	_VHHas2Mask
.9a4e		a9 ff		lda #$ff			lda 	#$FF
.9a50						_VHHas2Mask:
.9a50		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9a52		f0 4c		beq $9aa0			beq 	_VHBadIndex
.9a54		0a		asl a				asl 	a 							; carry will be set if a second index
.9a55		90 08		bcc $9a5f			bcc 	_VHCheckFirstIndex
.9a57		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9a59		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a5b		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9a5d		90 41		bcc $9aa0			bcc 	_VHBadIndex
.9a5f						_VHCheckFirstIndex:
.9a5f		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9a61		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a63		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9a65		90 39		bcc $9aa0			bcc 	_VHBadIndex
.9a67		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9a69		64 37		stz $37				stz 	zTemp0+1
.9a6b		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9a6d		30 0e		bmi $9a7d			bmi 	_VHNoMultiply
.9a6f		da		phx				phx
.9a70		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9a72		48		pha				pha
.9a73		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9a75		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a77		1a		inc a				inc 	a 							; add 1 for zero base
.9a78		fa		plx				plx
.9a79		20 d1 9e	jsr $9ed1			jsr 	Multiply8x8 				; calculate -> Z0
.9a7c		fa		plx				plx
.9a7d						_VHNoMultiply:
.9a7d		18		clc				clc
.9a7e		a5 36		lda $36				lda 	zTemp0
.9a80		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9a82		85 36		sta $36				sta 	zTemp0
.9a84		a5 37		lda $37				lda 	zTemp0+1
.9a86		69 00		adc #$00			adc 	#0
.9a88		85 37		sta $37				sta 	zTemp0+1
.9a8a		b5 50		lda $50,x			lda 	NSStatus,x
.9a8c		20 9e 85	jsr $859e			jsr 	ScaleByBaseType
.9a8f		18		clc				clc
.9a90		b2 3e		lda ($3e)			lda 	(zaTemp)
.9a92		65 36		adc $36				adc 	zTemp0
.9a94		95 58		sta $58,x			sta 	NSMantissa0,x
.9a96		a0 01		ldy #$01			ldy 	#1
.9a98		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a9a		65 37		adc $37				adc 	zTemp0+1
.9a9c		95 60		sta $60,x			sta 	NSMantissa1,x
.9a9e		7a		ply				ply 								; restore position
.9a9f		60		rts				rts
.9aa0						_VHBadIndex:
.9aa0		a9 17		lda #$17		lda	#23
.9aa2		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.9aa5						_VHBadArray:
.9aa5		a9 18		lda #$18		lda	#24
.9aa7		4c db 8f	jmp $8fdb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9aaa						AbsUnary:
.9aaa		fa		plx				plx 								; restore stack pos
.9aab		20 74 9e	jsr $9e74			jsr 	EvaluateNumber 				; get a float or int
.9aae		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9ab1		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9ab3		29 7f		and #$7f			and 	#$7F
.9ab5		95 50		sta $50,x			sta 	NSStatus,x
.9ab7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9ab8						AllocUnary:
.9ab8		fa		plx				plx 								; restore stack pos
.9ab9		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger		; get bytes required.
.9abc		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9abf		da		phx				phx 								; save X/Y
.9ac0		5a		phy				phy
.9ac1		8a		txa				txa 								; copy X into Y
.9ac2		a8		tay				tay
.9ac3		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9ac6		aa		tax				tax
.9ac7		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9aca		20 d7 9a	jsr $9ad7			jsr 	AllocateXABytes 			; allocate memory
.9acd		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9ad0		8a		txa				txa 	 							; typing is 16 bit integer.
.9ad1		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9ad4		7a		ply				ply
.9ad5		fa		plx				plx
.9ad6		60		rts				rts
.9ad7						AllocateXABytes:
.9ad7		5a		phy				phy
.9ad8		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9adb		84 36		sty $36				sty 	zTemp0
.9add		5a		phy				phy
.9ade		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9ae1		84 37		sty $37				sty 	zTemp0+1
.9ae3		5a		phy				phy
.9ae4		18		clc				clc 								; add to low memory pointer
.9ae5		6d 0c 04	adc $040c			adc 	lowMemPtr
.9ae8		8d 0c 04	sta $040c			sta 	lowMemPtr
.9aeb		8a		txa				txa
.9aec		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9aef		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9af2		b0 2f		bcs $9b23			bcs 	CISSMemory
.9af4		20 15 9b	jsr $9b15			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9af7						_ClearMemory:
.9af7		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9afa		c5 36		cmp $36				cmp 	zTemp0
.9afc		d0 07		bne $9b05			bne 	_CMClearNext
.9afe		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9b01		c5 37		cmp $37				cmp 	zTemp0+1
.9b03		f0 0c		beq $9b11			beq 	_CMExit
.9b05						_CMClearNext:
.9b05		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9b07		92 36		sta ($36)			sta 	(zTemp0)
.9b09		e6 36		inc $36				inc 	zTemp0
.9b0b		d0 ea		bne $9af7			bne 	_ClearMemory
.9b0d		e6 37		inc $37				inc		zTemp0+1
.9b0f		80 e6		bra $9af7			bra 	_ClearMemory
.9b11						_CMExit:
.9b11		fa		plx				plx
.9b12		68		pla				pla
.9b13		7a		ply				ply
.9b14		60		rts				rts
.9b15						CheckIdentifierStringSpace:
.9b15		48		pha				pha
.9b16		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9b19		18		clc				clc
.9b1a		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b1c		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9b1f		b0 02		bcs $9b23			bcs 	CISSMemory
.9b21		68		pla				pla
.9b22		60		rts				rts
.9b23						CISSMemory:
.9b23		a9 06		lda #$06		lda	#6
.9b25		4c db 8f	jmp $8fdb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9b28						AscUnary:
.9b28		fa		plx				plx 								; restore stack pos
.9b29		20 7e 9e	jsr $9e7e			jsr 	EvaluateString 				; get a string
.9b2c		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9b2e		20 28 9f	jsr $9f28			jsr 	NSMSetByte 					; ASC("") will return zero.
.9b31		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9b34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9b35						FracUnary:
.9b35		fa		plx				plx 								; restore stack pos
.9b36		20 74 9e	jsr $9e74			jsr 	EvaluateNumber 				; get a float or int
.9b39		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9b3c		b5 50		lda $50,x			lda 	NSStatus,x
.9b3e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9b40		f0 04		beq $9b46			beq 	_IUZero
.9b42		20 f0 95	jsr $95f0			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9b45		60		rts				rts
.9b46						_IUZero:
.9b46		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.9b49		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9b4a						IntUnary:
.9b4a		fa		plx				plx 								; restore stack pos
.9b4b		20 74 9e	jsr $9e74			jsr 	EvaluateNumber 				; get a float or int
.9b4e		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9b51		b5 50		lda $50,x			lda 	NSStatus,x
.9b53		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9b55		f0 03		beq $9b5a			beq 	_IUExit
.9b57		20 48 96	jsr $9648			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9b5a						_IUExit:
.9b5a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9b5b						LenUnary:
.9b5b		fa		plx				plx 								; restore stack pos
.9b5c		20 7e 9e	jsr $9e7e			jsr 	EvaluateString 				; get a string
.9b5f		5a		phy				phy
.9b60		a0 00		ldy #$00			ldy 	#0 							; find length
.9b62						_LenFind:
.9b62		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9b64		f0 06		beq $9b6c			beq 	_LenExit
.9b66		c8		iny				iny
.9b67		d0 f9		bne $9b62			bne 	_LenFind
.9b69		4c a9 a0	jmp $a0a9			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9b6c						_LenExit:
.9b6c		98		tya				tya		 							; return length
.9b6d		20 28 9f	jsr $9f28			jsr 	NSMSetByte
.9b70		7a		ply				ply
.9b71		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9b74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9b75						Unary_Min:
.9b75		a9 01		lda #$01			lda 	#1
.9b77		80 02		bra $9b7b			bra 	UnaryMinMaxMain
.9b79						Unary_Max:
.9b79		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9b7b						UnaryMinMaxMain:
.9b7b		fa		plx				plx 								; get index on number stack
.9b7c		48		pha				pha 								; save comparator
.9b7d		20 6b 9e	jsr $9e6b			jsr 	EvaluateValue 				; get the first value.
.9b80						_UMMMLoop:
.9b80		b1 30		lda ($30),y			lda 	(codePtr),y
.9b82		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9b84		f0 22		beq $9ba8			beq 	_UMMMDone
.9b86		20 ca 8f	jsr $8fca			jsr 	CheckComma 					; must be a comma
.9b89		e8		inx				inx
.9b8a		20 6b 9e	jsr $9e6b			jsr 	EvaluateValue
.9b8d		ca		dex				dex
.9b8e		20 09 9f	jsr $9f09			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9b91		e8		inx				inx
.9b92		20 09 9f	jsr $9f09			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9b95		e8		inx				inx
.9b96		20 92 90	jsr $9092			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9b99		ca		dex				dex
.9b9a		ca		dex				dex
.9b9b		85 36		sta $36				sta 	zTemp0 						; save required result
.9b9d		68		pla				pla 								; get and save comparator
.9b9e		48		pha				pha
.9b9f		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9ba1		d0 dd		bne $9b80			bne 	_UMMMLoop
.9ba3		20 ab 9b	jsr $9bab			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9ba6		80 d8		bra $9b80			bra 	_UMMMLoop
.9ba8						_UMMMDone:
.9ba8		68		pla				pla 								; throw the comparator
.9ba9		c8		iny				iny 								; skip )
.9baa		60		rts				rts
.9bab						ExpCopyAboveDown:
.9bab		b5 51		lda $51,x			lda 	NSStatus+1,x
.9bad		95 50		sta $50,x			sta 	NSStatus,x
.9baf		b5 79		lda $79,x			lda 	NSExponent+1,x
.9bb1		95 78		sta $78,x			sta 	NSExponent,x
.9bb3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9bb5		95 58		sta $58,x			sta 	NSMantissa0,x
.9bb7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9bb9		95 60		sta $60,x			sta 	NSMantissa1,x
.9bbb		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9bbd		95 68		sta $68,x			sta 	NSMantissa2,x
.9bbf		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9bc1		95 70		sta $70,x			sta 	NSMantissa3,x
.9bc3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9bc4						Unary_Not:
.9bc4		fa		plx				plx
.9bc5		20 93 9e	jsr $9e93			jsr 	EvaluateInteger 			; get integer
.9bc8		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9bcb		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; zero mantissa ?
.9bce		f0 04		beq $9bd4			beq 	_NotZero
.9bd0		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.9bd3		60		rts				rts
.9bd4						_NotZero:
.9bd4		4c 48 90	jmp $9048			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9bd7						PeekByteUnary:
.9bd7		a9 01		lda #$01			lda 	#1
.9bd9		80 0a		bra $9be5			bra 	PeekUnary
.9bdb						PeekWUnary:
.9bdb		a9 02		lda #$02			lda 	#2
.9bdd		80 06		bra $9be5			bra 	PeekUnary
.9bdf						PeekLUnary:
.9bdf		a9 03		lda #$03			lda 	#3
.9be1		80 02		bra $9be5			bra 	PeekUnary
.9be3						PeekDUnary:
.9be3		a9 04		lda #$04			lda 	#4
.9be5						PeekUnary:
.9be5		fa		plx				plx 								; restore position.
.9be6		48		pha				pha 								; save count to copy on stack
.9be7		20 a6 9e	jsr $9ea6			jsr		Evaluate16BitInteger 		; address as constant.
.9bea		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9bed		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9bef		85 36		sta $36				sta 	zTemp0
.9bf1		b5 60		lda $60,x			lda 	NSMantissa1,x
.9bf3		85 37		sta $37				sta 	zTemp0+1
.9bf5		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; clear the result to zero.
.9bf8		68		pla				pla 								; count in zTemp2
.9bf9		85 3a		sta $3a				sta 	zTemp2
.9bfb		da		phx				phx 								; save stack position and offset of read
.9bfc		5a		phy				phy
.9bfd		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9bff						_PULoop:
.9bff		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9c01		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9c03		c8		iny				iny 								; next byte to write
.9c04		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9c05		18		clc				clc
.9c06		69 08		adc #$08			adc 	#MathStackSize
.9c08		aa		tax				tax
.9c09		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9c0b		d0 f2		bne $9bff			bne 	_PULoop
.9c0d		7a		ply				ply 								; restore stack/code pos and exit.
.9c0e		fa		plx				plx
.9c0f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9c10						Unary_Random:
.9c10		fa		plx				plx
.9c11		20 82 9c	jsr $9c82			jsr 	Random32Bit 				; get a random number
.9c14		20 6b 9c	jsr $9c6b			jsr 	URCopyToMantissa  			; put in mantissa
.9c17		b1 30		lda ($30),y			lda 	(codePtr),y
.9c19		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9c1b		f0 08		beq $9c25			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9c1d		e8		inx				inx
.9c1e		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9c21		ca		dex				dex
.9c22		20 9a 91	jsr $919a			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9c25						_URNoModulus:
.9c25		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9c27		74 78		stz $78,x			stz 	NSExponent,x
.9c29		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9c2c		60		rts				rts
.9c2d						Unary_Rnd:
.9c2d		fa		plx				plx
.9c2e		20 74 9e	jsr $9e74			jsr 	EvaluateNumber 				; number to use.
.9c31		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 			; closing bracket
.9c34		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9c37		f0 26		beq $9c5f			beq 	_URCopySeed
.9c39		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9c3b		10 1f		bpl $9c5c			bpl 	_URDontSeed
.9c3d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9c3f		49 17		eor #$17			eor 	#$17
.9c41		8d 08 04	sta $0408			sta 	randomSeed+0
.9c44		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c46		49 a5		eor #$a5			eor 	#$A5
.9c48		8d 09 04	sta $0409			sta 	randomSeed+1
.9c4b		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c4d		49 c2		eor #$c2			eor 	#$C2
.9c4f		8d 0a 04	sta $040a			sta 	randomSeed+2
.9c52		b5 70		lda $70,x			lda 	NSMantissa3,x
.9c54		49 9d		eor #$9d			eor 	#$9D
.9c56		8d 0b 04	sta $040b			sta 	randomSeed+3
.9c59		20 82 9c	jsr $9c82			jsr 	Random32Bit
.9c5c						_URDontSeed:
.9c5c		20 82 9c	jsr $9c82			jsr 	Random32Bit 				; generate a number
.9c5f						_URCopySeed:
.9c5f		20 6b 9c	jsr $9c6b			jsr 	URCopyToMantissa 			; copy into mantissa
.9c62		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9c64		95 78		sta $78,x			sta 	NSExponent,x
.9c66		a9 08		lda #$08			lda 	#NSTFloat
.9c68		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9c6a		60		rts				rts
.9c6b						URCopyToMantissa:
.9c6b		ad 08 04	lda $0408			lda 	randomSeed+0
.9c6e		95 58		sta $58,x			sta 	NSMantissa0,x
.9c70		ad 09 04	lda $0409			lda 	randomSeed+1
.9c73		95 60		sta $60,x			sta 	NSMantissa1,x
.9c75		ad 0a 04	lda $040a			lda 	randomSeed+2
.9c78		95 68		sta $68,x			sta 	NSMantissa2,x
.9c7a		ad 0b 04	lda $040b			lda 	randomSeed+3
.9c7d		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9c7f		95 70		sta $70,x			sta 	NSMantissa3,x
.9c81		60		rts				rts
.9c82						Random32Bit:
.9c82		5a		phy				phy
.9c83		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9c85		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9c88		d0 03		bne $9c8d			bne 	_Random1
.9c8a		a8		tay				tay 								; if so do it 256 times
.9c8b		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9c8d						_Random1:
.9c8d		0a		asl a				asl 	a 							; LSFR RNG
.9c8e		2e 09 04	rol $0409			rol 	randomSeed+1
.9c91		2e 0a 04	rol $040a			rol 	randomSeed+2
.9c94		2e 0b 04	rol $040b			rol 	randomSeed+3
.9c97		90 02		bcc $9c9b			bcc 	_Random2
.9c99		49 c5		eor #$c5			eor 	#$C5
.9c9b						_Random2:
.9c9b		88		dey				dey
.9c9c		d0 ef		bne $9c8d			bne 	_Random1
.9c9e		8d 08 04	sta $0408			sta 	randomSeed+0
.9ca1		7a		ply				ply
.9ca2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9ca3						SgnUnary:
.9ca3		fa		plx				plx 								; restore stack pos
.9ca4		20 74 9e	jsr $9e74			jsr 	EvaluateNumber 				; get a float or int
.9ca7		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9caa		20 48 9f	jsr $9f48			jsr 	NSMIsZero 					; if zero
.9cad		f0 0e		beq $9cbd			beq 	_SGZero  					; return Int Zero
.9caf		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9cb1		48		pha				pha
.9cb2		a9 01		lda #$01			lda 	#1 							; set to 1
.9cb4		20 28 9f	jsr $9f28			jsr 	NSMSetByte
.9cb7		68		pla				pla
.9cb8		29 80		and #$80			and		#$80 						; copy the sign byte out
.9cba		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9cbc		60		rts				rts
.9cbd		20 26 9f	jsr $9f26	_SGZero:jsr 	NSMSetZero
.9cc0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9cc1						ValUnary:
.9cc1		fa		plx				plx 								; restore stack pos
.9cc2		20 d7 9c	jsr $9cd7			jsr 	ValMainCode 				; do the main val() code
.9cc5		b0 01		bcs $9cc8			bcs 	_VUError 					; couldn't convert
.9cc7		60		rts				rts
.9cc8						_VUError:
.9cc8		4c ae a0	jmp $a0ae			jmp 	TypeError
.9ccb						IsValUnary:
.9ccb		fa		plx				plx 								; restore stack pos
.9ccc		20 d7 9c	jsr $9cd7			jsr 	ValMainCode 				; do the main val() code
.9ccf		b0 03		bcs $9cd4			bcs 	_VUBad
.9cd1		4c 48 90	jmp $9048			jmp 	ReturnTrue
.9cd4						_VUBad:
.9cd4		4c 53 90	jmp $9053			jmp 	ReturnFalse
.9cd7						ValMainCode:
.9cd7		20 7e 9e	jsr $9e7e			jsr 	EvaluateString 				; get a string
.9cda		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 			; check right bracket present
.9cdd						ValEvaluateZTemp0:
.9cdd		5a		phy				phy
.9cde		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9ce0		f0 17		beq $9cf9			beq 	_VMCFail2
.9ce2		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9ce4		48		pha				pha 								; save first character
.9ce5		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9ce7		d0 01		bne $9cea			bne 	_VMCStart
.9ce9		c8		iny				iny 								; skip over -
.9cea						_VMCStart:
.9cea		38		sec				sec 								; initialise first time round.
.9ceb						_VMCNext:
.9ceb		c8		iny				iny 								; pre-increment
.9cec		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9cee		f0 0c		beq $9cfc			beq 	_VMCSuccess 				; successful.
.9cf0		20 25 98	jsr $9825			jsr 	EncodeNumber 				; send it to the number-builder
.9cf3		90 03		bcc $9cf8			bcc 	_VMCFail 					; if failed, give up.
.9cf5		18		clc				clc 								; next time round, countinue
.9cf6		80 f3		bra $9ceb			bra 	_VMCNext
.9cf8						_VMCFail:
.9cf8		68		pla				pla
.9cf9						_VMCFail2:
.9cf9		7a		ply				ply
.9cfa		38		sec				sec
.9cfb		60		rts				rts
.9cfc						_VMCSuccess:
.9cfc		a9 00		lda #$00			lda 	#0 							; construct final
.9cfe		20 25 98	jsr $9825			jsr 	EncodeNumber 				; by sending a duff value.
.9d01		68		pla				pla 								; if it was -ve
.9d02		c9 2d		cmp #$2d			cmp 	#"-"
.9d04		d0 03		bne $9d09			bne 	_VMCNotNegative
.9d06		20 e8 9e	jsr $9ee8			jsr		NSMNegate 					; negate it.
.9d09						_VMCNotNegative:
.9d09		7a		ply				ply
.9d0a		18		clc				clc
.9d0b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9d0c						ChrUnary:
.9d0c		fa		plx				plx 								; restore stack pos
.9d0d		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9d10		48		pha				pha
.9d11		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9d14		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9d16		20 11 b1	jsr $b111			jsr 	StringTempAllocate
.9d19		68		pla				pla 								; write number to it
.9d1a		20 4a b1	jsr $b14a			jsr 	StringTempWrite
.9d1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9d1e						SpcUnary:
.9d1e		fa		plx				plx 								; restore stack pos
.9d1f		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger			; get value
.9d22		5a		phy				phy
.9d23		48		pha				pha 								; save count
.9d24		20 11 b1	jsr $b111			jsr 	StringTempAllocate
.9d27		7a		ply				ply 								; to do count in Y
.9d28						_SpcLoop:
.9d28		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9d2a		f0 08		beq $9d34			beq 	_SpcExit
.9d2c		a9 20		lda #$20			lda 	#32
.9d2e		20 4a b1	jsr $b14a			jsr 	StringTempWrite
.9d31		88		dey				dey
.9d32		80 f4		bra $9d28			bra 	_SpcLoop
.9d34						_SpcExit:
.9d34		7a		ply				ply
.9d35		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.9d38		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9d39						Unary_Str:
.9d39		fa		plx				plx
.9d3a		20 74 9e	jsr $9e74			jsr 	EvaluateNumber  			; get number
.9d3d		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 			; closing bracket
.9d40		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9d42		20 5b 9d	jsr $9d5b			jsr 	ConvertNumberToString 		; do the conversion.
.9d45		a9 21		lda #$21			lda		#33 						; create buffer
.9d47		20 11 b1	jsr $b111			jsr 	StringTempAllocate 			; allocate memory
.9d4a		da		phx				phx  								; copy the converted string into the buffer.
.9d4b		a2 00		ldx #$00			ldx 	#0
.9d4d						_USCopy:
.9d4d		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9d50		20 4a b1	jsr $b14a			jsr 	StringTempWrite
.9d53		e8		inx				inx
.9d54		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9d57		d0 f4		bne $9d4d			bne 	_USCopy
.9d59		fa		plx				plx
.9d5a		60		rts				rts
.9d5b						ConvertNumberToString:
.9d5b		5a		phy				phy 								; save code position
.9d5c		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9d5f		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9d62		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9d64		10 09		bpl $9d6f			bpl 	_CNTSNotNegative
.9d66		29 7f		and #$7f			and 	#$7F 						; make +ve
.9d68		95 50		sta $50,x			sta 	NSStatus,x
.9d6a		a9 2d		lda #$2d			lda 	#"-"
.9d6c		20 d0 9d	jsr $9dd0			jsr 	WriteDecimalBuffer
.9d6f						_CNTSNotNegative:
.9d6f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9d71		f0 12		beq $9d85			beq 	_CNTSNotFloat
.9d73		e8		inx				inx 								; round up so we don't get too many 6.999999
.9d74		a9 01		lda #$01			lda 	#1
.9d76		20 28 9f	jsr $9f28			jsr 	NSMSetByte
.9d79		ca		dex				dex
.9d7a		b5 78		lda $78,x			lda		NSExponent,x
.9d7c		95 79		sta $79,x			sta 	NSExponent+1,x
.9d7e		a9 08		lda #$08			lda 	#NSTFloat
.9d80		95 51		sta $51,x			sta 	NSStatus+1,x
.9d82		20 2a 95	jsr $952a			jsr 	FloatAdd
.9d85						_CNTSNotFloat:
.9d85		20 b2 9d	jsr $9db2			jsr 	MakePlusTwoString 			; do the integer part.
.9d88		20 f0 95	jsr $95f0			jsr 	FloatFractionalPart 		; get the fractional part
.9d8b		20 a1 96	jsr $96a1			jsr 	NSNormalise					; normalise , exit if zero
.9d8e		f0 20		beq $9db0			beq 	_CNTSExit
.9d90		a9 2e		lda #$2e			lda 	#"."
.9d92		20 d0 9d	jsr $9dd0			jsr 	WriteDecimalBuffer 			; write decimal place
.9d95						_CNTSDecimal:
.9d95		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9d98		30 16		bmi $9db0			bmi 	_CNTSExit
.9d9a		e8		inx				inx 								; x 10.0
.9d9b		a9 0a		lda #$0a			lda 	#10
.9d9d		20 28 9f	jsr $9f28			jsr 	NSMSetByte
.9da0		a9 08		lda #$08			lda 	#NSTFloat
.9da2		95 50		sta $50,x			sta 	NSStatus,x
.9da4		ca		dex				dex
.9da5		20 6f 96	jsr $966f			jsr 	FloatMultiply
.9da8		20 b2 9d	jsr $9db2			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9dab		20 f0 95	jsr $95f0			jsr 	FloatFractionalPart 		; get the fractional part
.9dae		80 e5		bra $9d95			bra 	_CNTSDecimal 				; keep going.
.9db0						_CNTSExit:
.9db0		7a		ply				ply
.9db1		60		rts				rts
.9db2						MakePlusTwoString:
.9db2		da		phx				phx
.9db3		20 09 9f	jsr $9f09			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9db6		e8		inx				inx 								; access it
.9db7		e8		inx				inx
.9db8		20 48 96	jsr $9648			jsr 	FloatIntegerPart 			; make it an integer
.9dbb		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9dbd		20 5a 94	jsr $945a			jsr 	ConvertInt32
.9dc0		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9dc2						_MPTSCopy:
.9dc2		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9dc5		20 d0 9d	jsr $9dd0			jsr 	WriteDecimalBuffer
.9dc8		e8		inx				inx
.9dc9		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9dcc		d0 f4		bne $9dc2			bne 	_MPTSCopy
.9dce		fa		plx				plx
.9dcf		60		rts				rts
.9dd0						WriteDecimalBuffer:
.9dd0		da		phx				phx
.9dd1		ae 15 04	ldx $0415			ldx 	dbOffset
.9dd4		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9dd7		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9dda		ee 15 04	inc $0415			inc 	dbOffset
.9ddd		fa		plx				plx
.9dde		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9ddf						Unary_Left:
.9ddf		fa		plx				plx
.9de0		18		clc				clc 								; only one parameter
.9de1		20 44 9e	jsr $9e44			jsr 	SubstringInitial 			; set up.
.9de4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9de6		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9de8		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9dea		80 25		bra $9e11			bra 	SubstringMain
.9dec						Unary_Right:
.9dec		fa		plx				plx
.9ded		18		clc				clc 								; only one parameter
.9dee		20 44 9e	jsr $9e44			jsr 	SubstringInitial 			; set up.
.9df1		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9df3		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9df5		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9df7		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9df9		b0 02		bcs $9dfd			bcs 	_URNotUnderflow
.9dfb		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9dfd						_URNotUnderflow:
.9dfd		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9dff		80 10		bra $9e11			bra 	SubstringMain
.9e01						Unary_Mid:
.9e01		fa		plx				plx
.9e02		38		sec				sec 								; two parameters
.9e03		20 44 9e	jsr $9e44			jsr 	SubstringInitial 			; set up.
.9e06		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9e08		f0 04		beq $9e0e			beq 	_UMError
.9e0a		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9e0c		80 03		bra $9e11			bra 	SubstringMain
.9e0e						_UMError:
.9e0e		4c b3 a0	jmp $a0b3			jmp 	ArgumentError
.9e11						SubstringMain:
.9e11		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9e13		d5 78		cmp $78,x			cmp 	NSExponent,x
.9e15		b0 27		bcs $9e3e			bcs 	_SSMNull 					; if so, return an empty string.
.9e17		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9e19		f0 23		beq $9e3e			beq 	_SSMNull 					; return empty string.
.9e1b		18		clc				clc 								; add the offset +1 to the address and
.9e1c		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9e1e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e20		85 36		sta $36				sta 	zTemp0
.9e22		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9e24		69 00		adc #$00			adc 	#0
.9e26		85 37		sta $37				sta 	zTemp0+1
.9e28						_SSMNoCarry:
.9e28		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9e2a		20 11 b1	jsr $b111			jsr 	StringTempAllocate 			; allocate that many characters
.9e2d		5a		phy				phy 								; save Y
.9e2e		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9e30						_SSMCopy:
.9e30		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9e32		f0 08		beq $9e3c			beq 	_SSMEString 				; no more to copy
.9e34		20 4a b1	jsr $b14a			jsr 	StringTempWrite 			; and write it out.
.9e37		c8		iny				iny
.9e38		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9e3a		d0 f4		bne $9e30			bne 	_SSMCopy
.9e3c						_SSMEString:
.9e3c		7a		ply				ply
.9e3d						_SSMExit:
.9e3d		60		rts				rts
.9e3e						_SSMNull:
.9e3e		a9 00		lda #$00			lda 	#0
.9e40		20 11 b1	jsr $b111			jsr 	StringTempAllocate
.9e43		60		rts				rts
.9e44						SubstringInitial:
.9e44		da		phx				phx 								; save initial stack position
.9e45		08		php				php 								; save carry on stack indicating 2 parameters
.9e46		20 7e 9e	jsr $9e7e			jsr 	EvaluateString 				; get a string
.9e49		5a		phy				phy 								; calculate length to exponent.
.9e4a		a0 ff		ldy #$ff			ldy 	#$FF
.9e4c						_SIFindLength:
.9e4c		c8		iny				iny
.9e4d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e4f		d0 fb		bne $9e4c			bne 	_SIFindLength
.9e51		98		tya				tya
.9e52		95 78		sta $78,x			sta 	NSExponent,x
.9e54		7a		ply				ply
.9e55		e8		inx				inx
.9e56		20 ca 8f	jsr $8fca			jsr 	CheckComma 					; comma next
.9e59		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get next parameter
.9e5c		28		plp				plp 								; is it the last parameter ?
.9e5d		90 07		bcc $9e66			bcc 	_SSIExit 					; if so, exit.
.9e5f		e8		inx				inx
.9e60		20 ca 8f	jsr $8fca			jsr 	CheckComma 					; comma next
.9e63		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get last parameter
.9e66						_SSIExit:
.9e66		fa		plx				plx
.9e67		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket 			; check closing bracket
.9e6a		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9e6b						EvaluateValue:
.9e6b		48		pha				pha
.9e6c		20 df 94	jsr $94df			jsr		EvaluateExpression 			; expression
.9e6f		20 a2 97	jsr $97a2			jsr 	Dereference					; derefernce it
.9e72		68		pla				pla
.9e73		60		rts				rts
.9e74						EvaluateNumber:
.9e74		20 6b 9e	jsr $9e6b			jsr 	EvaluateValue 				; get a value
.9e77		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9e79		29 10		and #$10			and 	#NSBIsString
.9e7b		d0 13		bne $9e90			bne 	HelperTypeError
.9e7d		60		rts				rts
.9e7e						EvaluateString:
.9e7e		20 6b 9e	jsr $9e6b			jsr 	EvaluateValue 				; get a value
.9e81		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9e83		29 10		and #$10			and 	#NSBIsString
.9e85		f0 09		beq $9e90			beq 	HelperTypeError
.9e87						CopyAddressToTemp0:
.9e87		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9e89		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9e8b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e8d		85 37		sta $37				sta 	zTemp0+1
.9e8f		60		rts				rts
.9e90						HelperTypeError:
.9e90		4c ae a0	jmp $a0ae			jmp 	TypeError
.9e93						EvaluateInteger:
.9e93		20 74 9e	jsr $9e74			jsr 	EvaluateNumber
.9e96		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9e98		d0 09		bne $9ea3			bne 	HelperValueError 			; if not, it's a float.
.9e9a		60		rts				rts
.9e9b						EvaluateUnsignedInteger:
.9e9b		20 93 9e	jsr $9e93			jsr 	EvaluateInteger 			; check integer is +ve
.9e9e		b5 50		lda $50,x			lda 	NSStatus,x
.9ea0		30 01		bmi $9ea3			bmi 	HelperValueError
.9ea2		60		rts				rts
.9ea3						HelperValueError:
.9ea3		4c b3 a0	jmp $a0b3			jmp 	ArgumentError
.9ea6						Evaluate16BitInteger:
.9ea6		20 9b 9e	jsr $9e9b			jsr	 	EvaluateUnsignedInteger		; get integer
.9ea9		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9eab		15 68		ora $68,x			ora 	NSMantissa2,x
.9ead		d0 f4		bne $9ea3			bne 	HelperValueError
.9eaf		60		rts				rts
.9eb0						Evaluate16BitIntegerSigned:
.9eb0		20 93 9e	jsr $9e93			jsr	 	EvaluateInteger				; get integer
.9eb3		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9eb5		15 68		ora $68,x			ora 	NSMantissa2,x
.9eb7		d0 ea		bne $9ea3			bne 	HelperValueError
.9eb9		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9ebb		10 03		bpl $9ec0			bpl 	_EISNotSigned
.9ebd		20 ef 9e	jsr $9eef			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9ec0						_EISNotSigned:
.9ec0		60		rts				rts
.9ec1						Evaluate8BitInteger:
.9ec1		20 9b 9e	jsr $9e9b			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9ec4		d0 dd		bne $9ea3			bne 	HelperValueError
.9ec6		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9ec8		15 68		ora $68,x			ora 	NSMantissa2,x
.9eca		15 60		ora $60,x			ora 	NSMantissa1,x
.9ecc		d0 d5		bne $9ea3			bne 	HelperValueError
.9ece		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ed0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9ed1						Multiply8x8:
.9ed1		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9ed2		85 36		sta $36			  	sta 	zTemp0
.9ed4		86 37		stx $37				stx 	zTemp0+1
.9ed6		a9 00		lda #$00			lda 	#0
.9ed8		a2 08		ldx #$08			ldx 	#8
.9eda						_M88Loop:
.9eda		90 03		bcc $9edf			bcc 	_M88NoAdd
.9edc		18		clc				clc
.9edd		65 37		adc $37				adc 	zTemp0+1
.9edf						_M88NoAdd:
.9edf		6a		ror a				ror 	a
.9ee0		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9ee2		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9ee3		d0 f5		bne $9eda			bne 	_M88Loop
.9ee5		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9ee7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9ee8						NSMNegate:
.9ee8		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9eea		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9eec		95 50		sta $50,x			sta 	NSStatus,x
.9eee		60		rts				rts
.9eef						NSMNegateMantissa:
.9eef		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9ef0		a9 00		lda #$00			lda 	#0
.9ef2		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9ef4		95 58		sta $58,x			sta 	NSMantissa0,x
.9ef6		a9 00		lda #$00			lda 	#0
.9ef8		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9efa		95 60		sta $60,x			sta 	NSMantissa1,x
.9efc		a9 00		lda #$00			lda 	#0
.9efe		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9f00		95 68		sta $68,x			sta 	NSMantissa2,x
.9f02		a9 00		lda #$00			lda 	#0
.9f04		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9f06		95 70		sta $70,x			sta 	NSMantissa3,x
.9f08		60		rts				rts
.9f09						NSMShiftUpTwo:
.9f09		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f0b		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f0d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f0f		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9f11		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f13		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9f15		b5 70		lda $70,x			lda 	NSMantissa3,x
.9f17		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9f19		b5 78		lda $78,x			lda 	NSExponent,x
.9f1b		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9f1d		b5 50		lda $50,x			lda 	NSStatus,x
.9f1f		95 52		sta $52,x			sta 	NSStatus+2,x
.9f21		60		rts				rts
.9f22						NSMSetZeroMantissaOnly:
.9f22		a9 00		lda #$00			lda 	#0
.9f24		80 06		bra $9f2c			bra 	NSMSetMantissa
.9f26						NSMSetZero:
.9f26		a9 00		lda #$00			lda 	#0
.9f28						NSMSetByte:
.9f28		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9f2a		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9f2c						NSMSetMantissa:
.9f2c		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9f2e		74 60		stz $60,x			stz 	NSMantissa1,x
.9f30		74 68		stz $68,x			stz 	NSMantissa2,x
.9f32		74 70		stz $70,x			stz 	NSMantissa3,x
.9f34		60		rts				rts
.9f35						NSMShiftLeft:
.9f35		18		clc				clc
.9f36						NSMRotateLeft:
.9f36		36 58		rol $58,x			rol 	NSMantissa0,x
.9f38		36 60		rol $60,x			rol		NSMantissa1,x
.9f3a		36 68		rol $68,x			rol		NSMantissa2,x
.9f3c		36 70		rol $70,x			rol		NSMantissa3,x
.9f3e		60		rts				rts
.9f3f						NSMShiftRight:
.9f3f		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9f41		76 68		ror $68,x			ror		NSMantissa2,x
.9f43		76 60		ror $60,x			ror		NSMantissa1,x
.9f45		76 58		ror $58,x			ror		NSMantissa0,x
.9f47		60		rts				rts
.9f48						NSMIsZero:
.9f48		b5 70		lda $70,x			lda 	NSMantissa3,x
.9f4a		15 68		ora $68,x			ora		NSMantissa2,x
.9f4c		15 60		ora $60,x			ora		NSMantissa1,x
.9f4e		15 58		ora $58,x			ora		NSMantissa0,x
.9f50		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9f51						TickHandler:
.9f51		5a		phy				phy 								; need to preserve Y
.9f52		20 71 80	jsr $8071			jsr 	SNDUpdate 					; update sound
.9f55		7a		ply				ply
.9f56		60		rts				rts
.065c						LastTick:
>065c								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9f57						Assemble_ora:
.9f57		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f5a		01					.byte $01
.9f5b						Assemble_and:
.9f5b		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f5e		21					.byte $21
.9f5f						Assemble_eor:
.9f5f		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f62		41					.byte $41
.9f63						Assemble_adc:
.9f63		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f66		61					.byte $61
.9f67						Assemble_sta:
.9f67		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f6a		81					.byte $81
.9f6b						Assemble_lda:
.9f6b		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f6e		a1					.byte $a1
.9f6f						Assemble_cmp:
.9f6f		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f72		c1					.byte $c1
.9f73						Assemble_sbc:
.9f73		20 d7 80	jsr $80d7		jsr	AssembleGroup1
>9f76		e1					.byte $e1
.9f77						Assemble_asl:
.9f77		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f7a		02					.byte $02
>9f7b		75					.byte $75
.9f7c						Assemble_rol:
.9f7c		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f7f		22					.byte $22
>9f80		75					.byte $75
.9f81						Assemble_lsr:
.9f81		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f84		42					.byte $42
>9f85		75					.byte $75
.9f86						Assemble_ror:
.9f86		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f89		62					.byte $62
>9f8a		75					.byte $75
.9f8b						Assemble_stx:
.9f8b		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f8e		82					.byte $82
>9f8f		50					.byte $50
.9f90						Assemble_ldx:
.9f90		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f93		a2					.byte $a2
>9f94		d0					.byte $d0
.9f95						Assemble_dec:
.9f95		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f98		c2					.byte $c2
>9f99		55					.byte $55
.9f9a						Assemble_inc:
.9f9a		20 de 80	jsr $80de		jsr	AssembleGroup2
>9f9d		e2					.byte $e2
>9f9e		55					.byte $55
.9f9f						Assemble_stz:
.9f9f		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fa2		60					.byte $60
>9fa3		44					.byte $44
.9fa4						Assemble_bit:
.9fa4		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fa7		20					.byte $20
>9fa8		55					.byte $55
.9fa9						Assemble_sty:
.9fa9		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fac		80					.byte $80
>9fad		54					.byte $54
.9fae						Assemble_ldy:
.9fae		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fb1		a0					.byte $a0
>9fb2		d5					.byte $d5
.9fb3						Assemble_cpy:
.9fb3		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fb6		c0					.byte $c0
>9fb7		d4					.byte $d4
.9fb8						Assemble_cpx:
.9fb8		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fbb		e0					.byte $e0
>9fbc		d0					.byte $d0
.9fbd						Assemble_tsb:
.9fbd		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fc0		00					.byte $00
>9fc1		50					.byte $50
.9fc2						Assemble_trb:
.9fc2		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fc5		10					.byte $10
>9fc6		50					.byte $50
.9fc7						Assemble_jsr:
.9fc7		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fca		14					.byte $14
>9fcb		10					.byte $10
.9fcc						Assemble_jmp:
.9fcc		20 de 80	jsr $80de		jsr	AssembleGroup2
>9fcf		40					.byte $40
>9fd0		10					.byte $10
.9fd1						Assemble_bpl:
.9fd1		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9fd4		10					.byte $10
.9fd5						Assemble_bmi:
.9fd5		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9fd8		30					.byte $30
.9fd9						Assemble_bvc:
.9fd9		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9fdc		50					.byte $50
.9fdd						Assemble_bvs:
.9fdd		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9fe0		70					.byte $70
.9fe1						Assemble_bcc:
.9fe1		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9fe4		90					.byte $90
.9fe5						Assemble_bcs:
.9fe5		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9fe8		b0					.byte $b0
.9fe9						Assemble_bne:
.9fe9		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9fec		d0					.byte $d0
.9fed						Assemble_beq:
.9fed		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9ff0		f0					.byte $f0
.9ff1						Assemble_bra:
.9ff1		20 2f 81	jsr $812f		jsr	AssembleGroup3
>9ff4		80					.byte $80
.9ff5						Assemble_brk:
.9ff5		20 63 81	jsr $8163		jsr	AssembleGroup4
>9ff8		00					.byte $00
.9ff9						Assemble_php:
.9ff9		20 63 81	jsr $8163		jsr	AssembleGroup4
>9ffc		08					.byte $08
.9ffd						Assemble_clc:
.9ffd		20 63 81	jsr $8163		jsr	AssembleGroup4
>a000		18					.byte $18
.a001						Assemble_plp:
.a001		20 63 81	jsr $8163		jsr	AssembleGroup4
>a004		28					.byte $28
.a005						Assemble_sec:
.a005		20 63 81	jsr $8163		jsr	AssembleGroup4
>a008		38					.byte $38
.a009						Assemble_rti:
.a009		20 63 81	jsr $8163		jsr	AssembleGroup4
>a00c		40					.byte $40
.a00d						Assemble_pha:
.a00d		20 63 81	jsr $8163		jsr	AssembleGroup4
>a010		48					.byte $48
.a011						Assemble_cli:
.a011		20 63 81	jsr $8163		jsr	AssembleGroup4
>a014		58					.byte $58
.a015						Assemble_phy:
.a015		20 63 81	jsr $8163		jsr	AssembleGroup4
>a018		5a					.byte $5a
.a019						Assemble_rts:
.a019		20 63 81	jsr $8163		jsr	AssembleGroup4
>a01c		60					.byte $60
.a01d						Assemble_pla:
.a01d		20 63 81	jsr $8163		jsr	AssembleGroup4
>a020		68					.byte $68
.a021						Assemble_sei:
.a021		20 63 81	jsr $8163		jsr	AssembleGroup4
>a024		78					.byte $78
.a025						Assemble_ply:
.a025		20 63 81	jsr $8163		jsr	AssembleGroup4
>a028		7a					.byte $7a
.a029						Assemble_dey:
.a029		20 63 81	jsr $8163		jsr	AssembleGroup4
>a02c		88					.byte $88
.a02d						Assemble_txa:
.a02d		20 63 81	jsr $8163		jsr	AssembleGroup4
>a030		8a					.byte $8a
.a031						Assemble_tya:
.a031		20 63 81	jsr $8163		jsr	AssembleGroup4
>a034		98					.byte $98
.a035						Assemble_txs:
.a035		20 63 81	jsr $8163		jsr	AssembleGroup4
>a038		9a					.byte $9a
.a039						Assemble_tay:
.a039		20 63 81	jsr $8163		jsr	AssembleGroup4
>a03c		a8					.byte $a8
.a03d						Assemble_tax:
.a03d		20 63 81	jsr $8163		jsr	AssembleGroup4
>a040		aa					.byte $aa
.a041						Assemble_clv:
.a041		20 63 81	jsr $8163		jsr	AssembleGroup4
>a044		b8					.byte $b8
.a045						Assemble_tsx:
.a045		20 63 81	jsr $8163		jsr	AssembleGroup4
>a048		ba					.byte $ba
.a049						Assemble_iny:
.a049		20 63 81	jsr $8163		jsr	AssembleGroup4
>a04c		c8					.byte $c8
.a04d						Assemble_dex:
.a04d		20 63 81	jsr $8163		jsr	AssembleGroup4
>a050		ca					.byte $ca
.a051						Assemble_cld:
.a051		20 63 81	jsr $8163		jsr	AssembleGroup4
>a054		d8					.byte $d8
.a055						Assemble_phx:
.a055		20 63 81	jsr $8163		jsr	AssembleGroup4
>a058		da					.byte $da
.a059						Assemble_stp:
.a059		20 63 81	jsr $8163		jsr	AssembleGroup4
>a05c		db					.byte $db
.a05d						Assemble_inx:
.a05d		20 63 81	jsr $8163		jsr	AssembleGroup4
>a060		e8					.byte $e8
.a061						Assemble_nop:
.a061		20 63 81	jsr $8163		jsr	AssembleGroup4
>a064		ea					.byte $ea
.a065						Assemble_sed:
.a065		20 63 81	jsr $8163		jsr	AssembleGroup4
>a068		f8					.byte $f8
.a069						Assemble_plx:
.a069		20 63 81	jsr $8163		jsr	AssembleGroup4
>a06c		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a06d						DecimalScalarTable:
>a06d		66 66 66 66				.dword $66666666 ; 0.1
>a071		de					.byte $de
>a072		1f 85 eb 51				.dword $51eb851f ; 0.01
>a076		db					.byte $db
>a077		4c 37 89 41				.dword $4189374c ; 0.001
>a07b		d8					.byte $d8
>a07c		ac 8b db 68				.dword $68db8bac ; 0.0001
>a080		d4					.byte $d4
>a081		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a085		d1					.byte $d1
>a086		83 de 1b 43				.dword $431bde83 ; 1e-06
>a08a		ce					.byte $ce
>a08b		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a08f		ca					.byte $ca
>a090		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a094		c7					.byte $c7
>a095		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a099		c4					.byte $c4
>a09a		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a09e		c0					.byte $c0
>a09f		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a0a3		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a0a4						SyntaxError:
.a0a4		a9 02		lda #$02		lda	#2
.a0a6		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.a0a9						RangeError:
.a0a9		a9 04		lda #$04		lda	#4
.a0ab		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.a0ae						TypeError:
.a0ae		a9 05		lda #$05		lda	#5
.a0b0		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.a0b3						ArgumentError:
.a0b3		a9 07		lda #$07		lda	#7
.a0b5		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.a0b8						NotDoneError:
.a0b8		a9 0c		lda #$0c		lda	#12
.a0ba		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.a0bd						ErrorText:
>a0bd		42 72 65 61 6b 00			.text	"Break",0
>a0c3		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a0cb		72 72 6f 72 00
>a0d0		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a0d8		20 62 79 20 7a 65 72 6f 00
>a0e1		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a0e9		61 6e 67 65 00
>a0ee		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a0f6		6d 61 74 63 68 00
>a0fc		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a104		65 6d 6f 72 79 00
>a10a		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a112		61 72 67 75 6d 65 6e 74 00
>a11b		53 74 6f 70 00				.text	"Stop",0
>a120		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a128		6f 6f 20 6c 6f 6e 67 00
>a130		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a138		6e 20 66 61 69 6c 65 64 00
>a141		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a149		61 74 61 00
>a14d		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a155		65 6e 74 65 64 00
>a15b		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a163		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a16f		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a177		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a184		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a18c		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a199		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a1a1		68 6f 75 74 20 57 68 69 6c 65 00
>a1ac		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a1b4		68 6f 75 74 20 46 6f 72 00
>a1bd		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a1c5		61 63 6b 20 66 75 6c 6c 00
>a1ce		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a1d6		75 63 74 75 72 65 00
>a1dd		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a1e5		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a1f2		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a1fa		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a208		41 72 72 61 79 20 73 69			.text	"Array size",0
>a210		7a 65 00
>a213		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a21b		79 20 69 6e 64 65 78 00
>a223		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a22b		74 20 64 65 63 6c 61 72 65 64 00
>a236		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a23e		20 66 6f 75 6e 64 00
>a245		44 72 69 76 65 20 6e 6f			.text	"Drive not found",0
>a24d		74 20 66 6f 75 6e 64 00
>a255		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a25d		65 72 72 6f 72 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a263		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 30-Dec-22. "
>a26b		20 62 75 69 6c 74 20 33 30 2d 44 65 63 2d 32 32
>a27b		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a27d						RectangleCommand:
.a27d		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a27f		80 02		bra $a283			bra 	ShapeDrawCmd
.a281						CircleCommand:
.a281		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a283						ShapeDrawCmd:
.a283		20 0d a3	jsr $a30d			jsr 	RunGraphicsCommand
.a286						ShapeDraw:
.a286		0d 5e 06	ora $065e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a289		4c 01 a3	jmp $a301			jmp 	ExecuteGraphicCommand	 	; and complete
.a28c						SpriteCommand:
.a28c		a2 00		ldx #$00			ldx 	#0
.a28e		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get image number.
.a291		5a		phy				phy
.a292		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a294		a6 58		ldx $58				ldx 	NSMantissa0
.a296		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a298		b0 0d		bcs $a2a7			bcs 	_SCRange
.a29a		a0 ff		ldy #$ff			ldy 	#255
.a29c		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a29f		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a2a1		7a		ply				ply
.a2a2		20 0d a3	jsr $a30d			jsr 	RunGraphicsCommand
.a2a5		80 5a		bra $a301			bra 	ExecuteGraphicCommand
.a2a7						_SCRange:
.a2a7		4c a9 a0	jmp $a0a9			jmp 	RangeError
.a2aa						ImageCommand:
.a2aa		a2 00		ldx #$00			ldx 	#0
.a2ac		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get image number.
.a2af		20 0d a3	jsr $a30d			jsr 	RunGraphicsCommand
.a2b2						ImageRunDraw:
.a2b2		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a2b4		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a2b7		ad 64 06	lda $0664			lda 	gxDrawScale
.a2ba		0a		asl a				asl 	a
.a2bb		0a		asl a				asl 	a
.a2bc		0a		asl a				asl 	a
.a2bd		a8		tay				tay
.a2be		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a2c0		a6 58		ldx $58				ldx 	NSMantissa0
.a2c2		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a2c5		60		rts				rts
.a2c6						TextCommand:
.a2c6		a2 00		ldx #$00			ldx 	#0
.a2c8		20 7e 9e	jsr $9e7e			jsr 	EvaluateString 				; get text
.a2cb		20 0d a3	jsr $a30d			jsr 	RunGraphicsCommand
.a2ce						TextRunDraw:
.a2ce		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a2d0		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a2d3		a0 00		ldy #$00			ldy 	#0
.a2d5						_IRDLoop:
.a2d5		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a2d7		85 37		sta $37				sta 	zTemp0+1
.a2d9		a5 58		lda $58				lda 	NSMantissa0
.a2db		85 36		sta $36				sta 	zTemp0
.a2dd		b1 36		lda ($36),y			lda 	(zTemp0),y
.a2df		f0 13		beq $a2f4			beq 	_IRDExit
.a2e1		5a		phy				phy									; save string pos
.a2e2		48		pha				pha 								; save char
.a2e3		ad 64 06	lda $0664			lda 	gxDrawScale 				; get scale
.a2e6		0a		asl a				asl 	a
.a2e7		0a		asl a				asl 	a
.a2e8		0a		asl a				asl 	a
.a2e9		a8		tay				tay
.a2ea		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2ec		fa		plx				plx 								; char to draw
.a2ed		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a2f0		7a		ply				ply 								; restore string pos
.a2f1		c8		iny				iny
.a2f2		90 e1		bcc $a2d5			bcc 	_IRDLoop 					; go back if no error.
.a2f4						_IRDExit:
.a2f4		60		rts				rts
.a2f5						PlotCommand:
.a2f5		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2f7		20 0d a3	jsr $a30d			jsr 	RunGraphicsCommand
.a2fa		80 05		bra $a301			bra 	ExecuteGraphicCommand
.a2fc						LineCommand:
.a2fc		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2fe		20 0d a3	jsr $a30d			jsr 	RunGraphicsCommand
.a301						ExecuteGraphicCommand:
.a301		0d 5d 06	ora $065d			ora 	gxCommandID 				; make a full command
.a304		20 5d 80	jsr $805d			jsr 	GXGraphicDraw 				; draw it and exit
.a307		b0 01		bcs $a30a			bcs 	_EGCError
.a309		60		rts				rts
.a30a						_EGCError:
.a30a		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.a30d						RunGraphicsCommand:
.a30d		8d 5d 06	sta $065d			sta 	gxCommandID					; save TODO graphics command.
.a310		68		pla				pla 								; pop handler address
.a311		fa		plx				plx
.a312		1a		inc a				inc 	a
.a313		d0 01		bne $a316			bne 	_RGINoCarry
.a315		e8		inx				inx
.a316						_RGINoCarry:
.a316		8d 62 06	sta $0662			sta 	gxHandler
.a319		8e 63 06	stx $0663			stx 	gxHandler+1
.a31c						_RGICommandLoop:
.a31c		b1 30		lda ($30),y			lda 	(codePtr),y
.a31e		c8		iny				iny
.a31f		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a321		f0 53		beq $a376			beq 	_RGI_To
.a323		c9 c0		cmp #$c0			cmp 	#KWD_HERE 					; do it here.
.a325		f0 55		beq $a37c			beq 	_RGI_Here
.a327		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a329		f0 3d		beq $a368			beq 	_RGI_Exit
.a32b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a32d		f0 39		beq $a368			beq 	_RGI_Exit
.a32f		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a331		f0 3e		beq $a371			beq 	_RGI_Frame
.a333		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a335		f0 33		beq $a36a			beq 	_RGI_Solid
.a337		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a339		f0 4b		beq $a386			beq 	_RGI_By
.a33b		c9 bc		cmp #$bc			cmp 	#KWD_FROM 					; from
.a33d		f0 17		beq $a356			beq 	_RGI_Move2
.a33f		c9 b9		cmp #$b9			cmp 	#KWD_DIM 					; dim (set scale)
.a341		f0 62		beq $a3a5			beq 	_RGI_Dim
.a343		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a345		f0 74		beq $a3bb			beq 	_RGI_Colour
.a347		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a349		f0 70		beq $a3bb			beq 	_RGI_Colour
.a34b		ae 5d 06	ldx $065d			ldx 	gxCommandID
.a34e		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a350		d0 03		bne $a355			bne 	_RGI_Move 					; move
.a352		4c e3 a3	jmp $a3e3			jmp		_RGI_SpriteInstructions
.a355						_RGI_Move:
.a355		88		dey				dey 								; unpick get.
.a356						_RGI_Move2:
.a356		20 09 a4	jsr $a409			jsr 	GCGetCoordinatePair 		; move to here
.a359		20 30 a4	jsr $a430			jsr 	GCCopyPairToStore 			; save
.a35c		5a		phy				phy
.a35d		20 26 a4	jsr $a426			jsr 	GCLoadAXY 					; load in
.a360		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a362		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a365		7a		ply				ply
.a366		80 b4		bra $a31c			bra 	_RGICommandLoop 			; and go round
.a368						_RGI_Exit:
.a368		88		dey				dey 								; unpick : / EOL
.a369		60		rts				rts
.a36a						_RGI_Solid:
.a36a		a9 02		lda #$02			lda 	#2
.a36c		8d 5e 06	sta $065e			sta 	gxFillSolid
.a36f		80 ab		bra $a31c			bra 	_RGICommandLoop
.a371						_RGI_Frame:
.a371		9c 5e 06	stz $065e			stz 	gxFillSolid
.a374		80 a6		bra $a31c			bra 	_RGICommandLoop
.a376						_RGI_To:
.a376		20 09 a4	jsr $a409			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a379		20 30 a4	jsr $a430			jsr 	GCCopyPairToStore
.a37c						_RGI_Here:
.a37c		5a		phy				phy
.a37d		20 26 a4	jsr $a426			jsr 	GCLoadAXY 					; load it into AXY
.a380		20 e0 a3	jsr $a3e0			jsr 	_RGICallHandler 			; go do whatever it is.
.a383		7a		ply				ply
.a384		80 96		bra $a31c			bra 	_RGICommandLoop 			; and go round
.a386						_RGI_By:
.a386		20 16 a4	jsr $a416			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a389		18		clc				clc
.a38a		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a38c		6d 5f 06	adc $065f			adc 	gxXPos
.a38f		8d 5f 06	sta $065f			sta 	gxXPos
.a392		a5 61		lda $61				lda 	NSMantissa1+1
.a394		6d 60 06	adc $0660			adc 	gxXPos+1
.a397		8d 60 06	sta $0660			sta 	gxXPos+1
.a39a		a5 5a		lda $5a				lda 	NSMantissa0+2
.a39c		18		clc				clc
.a39d		6d 61 06	adc $0661			adc 	gxYPos
.a3a0		8d 61 06	sta $0661			sta 	gxYPos
.a3a3		80 d7		bra $a37c			bra 	_RGI_Here
.a3a5						_RGI_Dim:
.a3a5		a2 01		ldx #$01			ldx	 	#1
.a3a7		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger
.a3aa		a5 59		lda $59				lda 	NSMantissa0+1
.a3ac		c9 00		cmp #$00			cmp 	#0
.a3ae		f0 2d		beq $a3dd			beq 	_RGIRange
.a3b0		c9 09		cmp #$09			cmp 	#8+1
.a3b2		b0 29		bcs $a3dd			bcs		_RGIRange
.a3b4		3a		dec a				dec 	a
.a3b5		8d 64 06	sta $0664			sta 	gxDrawScale
.a3b8		4c 1c a3	jmp $a31c			jmp 	_RGICommandLoop
.a3bb						_RGI_Colour:
.a3bb		a2 01		ldx #$01			ldx 	#1 							; colour
.a3bd		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger
.a3c0		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a3c2		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.a3c5		b1 30		lda ($30),y			lda 	(codePtr),y
.a3c7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a3c9		d0 04		bne $a3cf			bne 	_RGICDefaultMode
.a3cb		c8		iny				iny
.a3cc		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger
.a3cf						_RGICDefaultMode:
.a3cf		5a		phy				phy
.a3d0		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a3d2		a6 59		ldx $59				ldx 	NSMantissa0+1
.a3d4		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a3d6		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a3d9		7a		ply				ply
.a3da		4c 1c a3	jmp $a31c			jmp 	_RGICommandLoop 			; and go round
.a3dd						_RGIRange:
.a3dd		4c a9 a0	jmp $a0a9			jmp 	RangeError
.a3e0						_RGICallHandler:
.a3e0		6c 62 06	jmp ($0662)			jmp 	(gxHandler)
.a3e3						_RGI_SpriteInstructions:
.a3e3		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a3e5		f0 07		beq $a3ee			beq 	_RGISpriteOff
.a3e7		c9 c1		cmp #$c1			cmp 	#KWD_IMAGE
.a3e9		f0 13		beq $a3fe			beq 	_RGISetImage
.a3eb		4c 55 a3	jmp $a355			jmp 	_RGI_Move
.a3ee						_RGISpriteOff:
.a3ee		5a		phy				phy
.a3ef		a0 01		ldy #$01			ldy 	#1
.a3f1		a2 00		ldx #$00			ldx 	#0
.a3f3						_RGIDoCommandLoop:
.a3f3		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3f5		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a3f8		7a		ply				ply
.a3f9		b0 e2		bcs $a3dd			bcs 	_RGIRange
.a3fb		4c 1c a3	jmp $a31c			jmp 	_RGICommandLoop
.a3fe						_RGISetImage:
.a3fe		a2 01		ldx #$01			ldx 	#1
.a400		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger
.a403		5a		phy				phy
.a404		aa		tax				tax
.a405		a0 00		ldy #$00			ldy 	#0
.a407		80 ea		bra $a3f3			bra 	_RGIDoCommandLoop
.a409						GCGetCoordinatePair:
.a409		a2 01		ldx #$01			ldx 	#1
.a40b		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.a40e		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a411		e8		inx				inx
.a412		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.a415		60		rts				rts
.a416						GCSignedCoordinatePair:
.a416		a2 01		ldx #$01			ldx 	#1
.a418		20 b0 9e	jsr $9eb0			jsr 	Evaluate16BitIntegerSigned
.a41b		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a41e		e8		inx				inx
.a41f		20 b0 9e	jsr $9eb0			jsr 	Evaluate16BitIntegerSigned
.a422		60		rts				rts
.a423						_GCCPRange:
.a423		4c a9 a0	jmp $a0a9			jmp 	RangeError
.a426						GCLoadAXY:
.a426		ad 60 06	lda $0660			lda 	gxXPos+1
.a429		ae 5f 06	ldx $065f			ldx 	gxXPos
.a42c		ac 61 06	ldy $0661			ldy 	gxYPos
.a42f		60		rts				rts
.a430						GCCopyPairToStore:
.a430		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a432		8d 5f 06	sta $065f			sta 	gxXPos
.a435		a5 61		lda $61				lda 	NSMantissa1+1
.a437		8d 60 06	sta $0660			sta 	gxXPos+1
.a43a		a5 5a		lda $5a				lda 	NSMantissa0+2
.a43c		8d 61 06	sta $0661			sta 	gxYPos
.a43f		60		rts				rts
.065d						gxCommandID:
>065d								.fill 	1
.065e						gxFillSolid:
>065e								.fill 	1
.065f						gxXPos:
>065f								.fill 	2
.0661						gxYPos:
>0661								.fill 	1
.0662						gxHandler:
>0662								.fill 	2
.0664						gxDrawScale:
>0664								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a440						BitmapCtrl:
.a440		b1 30		lda ($30),y			lda 	(codePtr),y
.a442		c8		iny				iny
.a443		a2 01		ldx #$01			ldx 	#1
.a445		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a447		f0 11		beq $a45a			beq 	BitmapSwitch
.a449		ca		dex				dex
.a44a		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a44c		f0 0c		beq $a45a			beq 	BitmapSwitch
.a44e		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get the colour
.a451		5a		phy				phy
.a452		aa		tax				tax
.a453		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a455		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a458		7a		ply				ply
.a459		60		rts				rts
.a45a						BitmapSwitch:
.a45a		5a		phy				phy
.a45b		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a45d		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a45f		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a462		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a464		a0 00		ldy #$00			ldy 	#0
.a466		a2 ff		ldx #$ff			ldx 	#$FF
.a468		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a46b		9c 5e 06	stz $065e			stz 	gxFillSolid
.a46e		9c 5f 06	stz $065f			stz 	gxXPos
.a471		9c 60 06	stz $0660			stz 	gxXPos+1
.a474		9c 61 06	stz $0661			stz 	gxYPos
.a477		9c 64 06	stz $0664			stz 	gxDrawScale
.a47a		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a47c		a2 00		ldx #$00			ldx 	#0
.a47e		a0 00		ldy #$00			ldy 	#0
.a480		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a483		7a		ply				ply
.a484		60		rts				rts
.a485						SpritesCtrl:
.a485		b1 30		lda ($30),y			lda 	(codePtr),y
.a487		c8		iny				iny
.a488		a2 01		ldx #$01			ldx 	#1
.a48a		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a48c		f0 08		beq $a496			beq 	SpriteSwitch
.a48e		ca		dex				dex
.a48f		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a491		f0 03		beq $a496			beq 	SpriteSwitch
.a493		4c a4 a0	jmp $a0a4			jmp 	SyntaxError
.a496						SpriteSwitch:
.a496		5a		phy				phy
.a497		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a499		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a49b		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a49e		7a		ply				ply
.a49f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a4a0						GfxCommand:
.a4a0		a2 00		ldx #$00			ldx 	#0
.a4a2		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; command
.a4a5		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a4a8		e8		inx				inx
.a4a9		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger 		; X
.a4ac		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a4af		e8		inx				inx
.a4b0		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; Y
.a4b3		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a4b5		4a		lsr a				lsr 	a
.a4b6		d0 12		bne $a4ca			bne 	_GfxError
.a4b8		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a4ba		b0 0e		bcs $a4ca			bcs 	_GfxError 					; bit 7 should have been zero
.a4bc		5a		phy				phy 								; save pos
.a4bd		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a4bf		a6 59		ldx $59				ldx 	NSMantissa0+1
.a4c1		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a4c3		20 5d 80	jsr $805d			jsr 	GXGraphicDraw
.a4c6		b0 02		bcs $a4ca			bcs 	_GfxError
.a4c8		7a		ply				ply 								; restore pos and exit.
.a4c9		60		rts				rts
.a4ca						_GfxError:
.a4ca		4c a9 a0	jmp $a0a9			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a4cd						UnaryHit:
.a4cd		fa		plx				plx
.a4ce		a9 36		lda #$36			lda 	#zTemp0
.a4d0		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4d3		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a4d6		e8		inx				inx
.a4d7		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4da		20 c2 8f	jsr $8fc2			jsr		CheckRightBracket
.a4dd		ca		dex				dex 								; fix back up again.
.a4de		da		phx				phx 								; save X/Y
.a4df		5a		phy				phy
.a4e0		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4e2		b5 58		lda $58,x			lda 	NSMantissa0,x
.a4e4		aa		tax				tax
.a4e5		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4e7		20 5d 80	jsr $805d			jsr 	GXGraphicDraw 				; calculate result
.a4ea		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4eb		7a		ply				ply 								; restore XY
.a4ec		fa		plx				plx
.a4ed		20 28 9f	jsr $9f28			jsr 	NSMSetByte 					; return the hit result
.a4f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a4f1						PaletteCommand:
.a4f1		a2 00		ldx #$00			ldx 	#0
.a4f3		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; colour
.a4f6		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a4f9		e8		inx				inx
.a4fa		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger 		; r
.a4fd		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a500		e8		inx				inx
.a501		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; g
.a504		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a507		e8		inx				inx
.a508		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; b
.a50b		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a50d		85 36		sta $36				sta 	zTemp0
.a50f		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a511		85 37		sta $37				sta 	zTemp0+1
.a513		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a515		26 37		rol $37				rol	 	zTemp0+1
.a517		06 36		asl $36				asl 	zTemp0
.a519		26 37		rol $37				rol	 	zTemp0+1
.a51b		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a51d		85 01		sta $01				sta 	1
.a51f		5a		phy				phy
.a520		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a522		92 36		sta ($36)			sta 	(zTemp0)
.a524		a0 01		ldy #$01			ldy 	#1
.a526		a5 5a		lda $5a				lda 	NSMantissa0+2
.a528		91 36		sta ($36),y			sta 	(zTemp0),y
.a52a		a5 59		lda $59				lda 	NSMantissa0+1
.a52c		c8		iny				iny
.a52d		91 36		sta ($36),y			sta 	(zTemp0),y
.a52f		7a		ply				ply
.a530		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a531						XLoadCommand:
.a531		20 bb 8a	jsr $8abb			jsr 	NewProgram
.a534		20 46 83	jsr $8346			jsr 	BackloadProgram
.a537		4c 05 84	jmp $8405			jmp 	WarmStart
.a53a						XGoCommand:
.a53a		20 bb 8a	jsr $8abb			jsr 	NewProgram
.a53d		20 46 83	jsr $8346			jsr 	BackloadProgram
.a540		4c 39 8c	jmp $8c39			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a543						UnaryEvent:
.a543		fa		plx				plx
.a544		20 dd a5	jsr $a5dd			jsr 	TimerToStackX 				; timer in +0
.a547		e8		inx				inx  								; put reference into +1
.a548		20 29 99	jsr $9929			jsr 	EvaluateTerm
.a54b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a54d		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a54f		d0 4c		bne $a59d			bne 	_UEType
.a551		e8		inx				inx 								; put the step in +2
.a552		20 ca 8f	jsr $8fca			jsr 	CheckComma
.a555		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger
.a558		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.a55b		ca		dex				dex
.a55c		ca		dex				dex
.a55d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a55f		85 36		sta $36				sta 	zTemp0
.a561		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a563		85 37		sta $37				sta 	zTemp0+1
.a565		5a		phy				phy
.a566		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a568		b1 36		lda ($36),y			lda 	(zTemp0),y
.a56a		30 2d		bmi $a599			bmi 	_UEFalse 					; exit if signed.
.a56c		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a56e		b5 58		lda $58,x			lda 	NSMantissa0,x
.a570		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a572		c8		iny				iny
.a573		b5 60		lda $60,x			lda 	NSMantissa1,x
.a575		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a577		c8		iny				iny
.a578		b5 68		lda $68,x			lda 	NSMantissa2,x
.a57a		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a57c		90 1b		bcc $a599			bcc 	_UEFalse 					; no, return FALSE.
.a57e		18		clc				clc
.a57f		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a581		b5 58		lda $58,x			lda 	NSMantissa0,x
.a583		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a585		91 36		sta ($36),y			sta 	(zTemp0),y
.a587		c8		iny				iny
.a588		b5 60		lda $60,x			lda 	NSMantissa1,x
.a58a		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a58c		91 36		sta ($36),y			sta 	(zTemp0),y
.a58e		c8		iny				iny
.a58f		b5 68		lda $68,x			lda 	NSMantissa2,x
.a591		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a593		91 36		sta ($36),y			sta 	(zTemp0),y
.a595		7a		ply				ply
.a596		4c 48 90	jmp $9048			jmp 	ReturnTrue
.a599						_UEFalse:
.a599		7a		ply				ply 								; restore Y
.a59a		4c 53 90	jmp $9053			jmp 	ReturnFalse 				; and return False
.a59d						_UEType:
.a59d		4c ae a0	jmp $a0ae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a5a0						UnaryJoyX:
.a5a0		18		clc				clc
.a5a1		80 01		bra $a5a4			bra 	JoyMain
.a5a3						UnaryJoyY:
.a5a3		38		sec				sec
.a5a4						JoyMain:
.a5a4		fa		plx				plx 								; get pos
.a5a5		08		php				php 								; save carry (set for Y)
.a5a6		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5a9		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.a5ac		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a5af		28		plp				plp
.a5b0		b0 02		bcs $a5b4			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a5b2		4a		lsr a				lsr 	a
.a5b3		4a		lsr a				lsr 	a
.a5b4						_JMNoShift:
.a5b4		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a5b5		b0 07		bcs $a5be			bcs 	JMIsLeft
.a5b7		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a5b8		b0 07		bcs $a5c1			bcs 	JMIsRight
.a5ba		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; zero result
.a5bd		60		rts				rts
.a5be						JMIsLeft:
.a5be		4c 48 90	jmp $9048			jmp 	ReturnTrue
.a5c1						JMIsRight:
.a5c1		a9 01		lda #$01			lda 	#1
.a5c3		20 28 9f	jsr $9f28			jsr 	NSMSetByte
.a5c6		60		rts				rts
.a5c7						UnaryJoyB:
.a5c7		fa		plx				plx 								; get pos
.a5c8		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5cb		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.a5ce		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a5d1		29 10		and #$10			and 	#$10
.a5d3		d0 e9		bne $a5be			bne 	JMIsLeft
.a5d5		20 26 9f	jsr $9f26			jsr 	NSMSetZero
.a5d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a5d9						UnaryTimer:
.a5d9		fa		plx				plx
.a5da		20 c2 8f	jsr $8fc2			jsr 	CheckRightBracket
.a5dd						TimerToStackX:
.a5dd		20 26 9f	jsr $9f26			jsr 	NSMSetZero 					; zero result
.a5e0		64 01		stz $01				stz 	1 							; access I/O
.a5e2		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5e5		95 58		sta $58,x			sta 	NSMantissa0,x
.a5e7		ad 5a d6	lda $d65a			lda 	$D65A
.a5ea		95 60		sta $60,x			sta 	NSMantissa1,x
.a5ec		ad 5b d6	lda $d65b			lda 	$D65B
.a5ef		95 68		sta $68,x			sta 	NSMantissa2,x
.a5f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a5f2						MemoryDeleteLine:
.a5f2		20 11 a6	jsr $a611			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a5f5		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a5f7		a8		tay				tay
.a5f8						_MDDLLoop:
.a5f8		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a5fa		92 30		sta ($30)			sta 	(codePtr)
.a5fc		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a5fe		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a600		d0 07		bne $a609			bne 	_MDLDLNext
.a602		a5 31		lda $31				lda 	codePtr+1
.a604		c5 3b		cmp $3b				cmp 	zTemp2+1
.a606		d0 01		bne $a609			bne 	_MDLDLNext
.a608						_MDDLExit:
.a608		60		rts				rts
.a609						_MDLDLNext:
.a609		e6 30		inc $30				inc 	codePtr						; next byte
.a60b		d0 eb		bne $a5f8			bne 	_MDDLLoop
.a60d		e6 31		inc $31				inc 	codePtr+1
.a60f		80 e7		bra $a5f8			bra 	_MDDLLoop
.a611						IMemoryFindEnd:
.a611		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a613		85 3a		sta $3a				sta 	0+zTemp2
.a615		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a617		85 3b		sta $3b				sta 	1+zTemp2
.a619						_MDLFELoop:
.a619		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a61b		f0 0b		beq $a628			beq 	_MDLFEExit
.a61d		18		clc				clc
.a61e		65 3a		adc $3a				adc 	zTemp2
.a620		85 3a		sta $3a				sta 	zTemp2
.a622		90 f5		bcc $a619			bcc 	_MDLFELoop
.a624		e6 3b		inc $3b				inc 	zTemp2+1
.a626		80 f1		bra $a619			bra 	_MDLFELoop
.a628						_MDLFEExit:
.a628		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a629						MemoryInsertLine:
.a629		08		php				php
.a62a		20 11 a6	jsr $a611			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a62d		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a62f		1a		inc a				inc 	a
.a630		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a632		b0 36		bcs $a66a			bcs 	_MDLIError 					; no, fail.
.a634		28		plp				plp 								; do at a specific point or the end ?
.a635		90 08		bcc $a63f			bcc 	_MDLIFound 					; if specific point already set.
.a637		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a639		85 30		sta $30				sta 	codePtr 					; end.
.a63b		a5 3b		lda $3b				lda 	zTemp2+1
.a63d		85 31		sta $31				sta 	codePtr+1
.a63f						_MDLIFound:
.a63f		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a642		a8		tay				tay
.a643						_MDLIInsert:
.a643		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a645		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a647		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a649		c5 3a		cmp $3a				cmp 	zTemp2
.a64b		d0 06		bne $a653			bne 	_MDLINext
.a64d		a5 31		lda $31				lda 	codePtr+1
.a64f		c5 3b		cmp $3b				cmp 	zTemp2+1
.a651		f0 0a		beq $a65d			beq 	_MDLIHaveSpace
.a653						_MDLINext:
.a653		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a655		d0 02		bne $a659			bne 	_MDLINoBorrow
.a657		c6 3b		dec $3b				dec 	zTemp2+1
.a659						_MDLINoBorrow:
.a659		c6 3a		dec $3a				dec 	zTemp2
.a65b		80 e6		bra $a643			bra 	_MDLIInsert
.a65d						_MDLIHaveSpace:
.a65d		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a660		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a661						_MDLICopy:
.a661		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a664		91 30		sta ($30),y			sta 	(codePtr),y
.a666		88		dey				dey
.a667		10 f8		bpl $a661			bpl 	_MDLICopy
.a669		60		rts				rts
.a66a						_MDLIError:
.a66a		a9 06		lda #$06		lda	#6
.a66c		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.a66f						MDLAppendLine:
.a66f		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a671		85 36		sta $36				sta 	zTemp0
.a673		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a675		85 38		sta $38				sta 	0+zTemp1
.a677		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a679		85 39		sta $39				sta 	1+zTemp1
.a67b		b2 38		lda ($38)			lda 	(zTemp1)
.a67d		d0 0a		bne $a689			bne 	_MDLANoInitialise
.a67f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a681		8d 65 06	sta $0665			sta 	0+AppendPointer
.a684		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a686		8d 66 06	sta $0666			sta 	1+AppendPointer
.a689						_MDLANoInitialise:
.a689		18		clc				clc
.a68a		ad 65 06	lda $0665			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a68d		85 38		sta $38				sta 	zTemp1
.a68f		72 36		adc ($36)			adc 	(zTemp0)
.a691		8d 65 06	sta $0665			sta 	AppendPointer
.a694		ad 66 06	lda $0666			lda 	AppendPointer+1
.a697		85 39		sta $39				sta 	zTemp1+1
.a699		69 00		adc #$00			adc 	#0
.a69b		8d 66 06	sta $0666			sta 	AppendPointer+1
.a69e		a0 00		ldy #$00			ldy 	#0
.a6a0						_MDLACopy:
.a6a0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6a2		91 38		sta ($38),y			sta 	(zTemp1),y
.a6a4		c8		iny				iny
.a6a5		98		tya				tya
.a6a6		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a6a8		d0 f6		bne $a6a0			bne 	_MDLACopy
.a6aa		a9 00		lda #$00			lda 	#0 							; end of program.
.a6ac		91 38		sta ($38),y			sta 	(zTemp1),y
.a6ae		60		rts				rts
.0665						AppendPointer:
>0665								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a6af						MemoryNew:
.a6af		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6b1		85 30		sta $30				sta 	codePtr
.a6b3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6b5		85 31		sta $31				sta 	codePtr+1
.a6b7		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a6b9		92 30		sta ($30)			sta 	(codePtr)
.a6bb		60		rts				rts
.a6bc						MemoryInline:
.a6bc		98		tya				tya 								; put address into stack,x
.a6bd		18		clc				clc  								; get the offset, add codePtr
.a6be		65 30		adc $30				adc 	codePtr
.a6c0		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a6c2		a5 31		lda $31				lda 	codePtr+1
.a6c4		69 00		adc #$00			adc 	#0
.a6c6		95 60		sta $60,x			sta 	NSMantissa1,x
.a6c8		74 68		stz $68,x			stz 	NSMantissa2,x
.a6ca		74 70		stz $70,x			stz 	NSMantissa3,x
.a6cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a6cd						MemorySearch:
.a6cd		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a6cf		86 37		stx $37				stx 	zTemp0+1
.a6d1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6d3		85 30		sta $30				sta 	codePtr
.a6d5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6d7		85 31		sta $31				sta 	codePtr+1
.a6d9						_MTAXLoop:
.a6d9		b2 30		lda ($30)			lda 	(codePtr)
.a6db		18		clc				clc
.a6dc		f0 21		beq $a6ff			beq 	_MTAXExit 					; reached end, exit with CC.
.a6de		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a6e0		b1 30		lda ($30),y			lda 	(codePtr),y
.a6e2		38		sec				sec
.a6e3		e5 36		sbc $36				sbc 	zTemp0
.a6e5		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a6e7		c8		iny				iny 								; do the MSB
.a6e8		b1 30		lda ($30),y			lda 	(codePtr),y
.a6ea		e5 37		sbc $37				sbc 	zTemp0+1
.a6ec		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a6ee		f0 0f		beq $a6ff			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a6f0		b0 0d		bcs $a6ff			bcs 	_MTAXExit 					; current < required exit
.a6f2		18		clc				clc
.a6f3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a6f5		65 30		adc $30				adc 	codePtr
.a6f7		85 30		sta $30				sta 	codePtr
.a6f9		90 02		bcc $a6fd			bcc 	_CREExit
.a6fb		e6 31		inc $31				inc 	codePtr+1 					; carry
.a6fd						_CREExit:
.a6fd		80 da		bra $a6d9			bra 	_MTAXLoop
.a6ff						_MTAXExit:
.a6ff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a700						UpdateFont:
.a700		a5 01		lda $01				lda 	1 							; save position
.a702		48		pha				pha
.a703		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a705		85 01		sta $01				sta 	1
.a707		a9 2e		lda #$2e			lda 	#((FontBinary) & $FF)
.a709		85 36		sta $36				sta 	0+zTemp0
.a70b		a9 a7		lda #$a7			lda 	#((FontBinary) >> 8)
.a70d		85 37		sta $37				sta 	1+zTemp0
.a70f		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a711		85 38		sta $38				sta 	0+zTemp1
.a713		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a715		85 39		sta $39				sta 	1+zTemp1
.a717						_UFCopy1:
.a717		a0 00		ldy #$00			ldy 	#0
.a719						_UFCopy2:
.a719		b1 36		lda ($36),y			lda 	(zTemp0),y
.a71b		91 38		sta ($38),y			sta 	(zTemp1),y
.a71d		c8		iny				iny
.a71e		d0 f9		bne $a719			bne 	_UFCopy2
.a720		e6 37		inc $37				inc 	zTemp0+1
.a722		e6 39		inc $39				inc 	zTemp1+1
.a724		a5 39		lda $39				lda 	zTemp1+1
.a726		c9 c8		cmp #$c8			cmp 	#$C8
.a728		d0 ed		bne $a717			bne 	_UFCopy1
.a72a		68		pla				pla 								; restore.
.a72b		85 01		sta $01				sta 	1
.a72d		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a72e						FontBinary:
>a72e		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a736		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a746		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a756		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a766		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a776		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a786		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a796		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a7a6		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a7b6		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a7c6		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a7d6		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a7e6		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a7f6		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a806		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a816		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a826		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a836		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a846		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a856		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a866		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a876		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a886		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a896		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a8a6		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a8b6		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a8c6		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a8d6		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a8e6		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a8f6		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a906		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a916		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a926		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a936		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a946		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>a956		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a966		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a976		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a986		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a996		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a9a6		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a9b6		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a9c6		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a9d6		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a9e6		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a9f6		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>aa06		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>aa16		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>aa26		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aa36		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aa46		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>aa56		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aa66		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aa76		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aa86		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>aa96		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>aaa6		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>aab6		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aac6		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aad6		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>aae6		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>aaf6		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ab06		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ab16		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ab26		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ab36		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ab46		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ab56		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ab66		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ab76		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ab86		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ab96		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>aba6		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>abb6		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>abc6		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>abd6		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>abe6		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>abf6		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ac06		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ac16		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ac26		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ac36		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ac46		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ac56		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ac66		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ac76		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ac86		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ac96		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>aca6		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>acb6		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>acc6		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>acd6		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ace6		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>acf6		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ad06		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ad16		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ad26		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ad36		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ad46		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ad56		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ad66		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ad76		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ad86		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>ad96		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ada6		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>adb6		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>adc6		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>add6		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ade6		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>adf6		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>ae06		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>ae16		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>ae26		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>ae36		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>ae46		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>ae56		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ae66		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ae76		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>ae86		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>ae96		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>aea6		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>aeb6		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>aec6		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>aed6		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>aee6		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>aef6		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>af06		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>af16		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>af26		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.af2e						PingCommand:
.af2e		5a		phy				phy 								; save pos
.af2f		a9 01		lda #$01			lda 	#1 						; push channel.
.af31		48		pha				pha
.af32		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.af34		a2 03		ldx #$03			ldx 	#3 						; length
.af36		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af38		80 24		bra $af5e			bra 	SoundEffectCommand
.af3a						ZapCommand:
.af3a		5a		phy				phy 								; save pos
.af3b		a9 01		lda #$01			lda 	#1 						; push channel.
.af3d		48		pha				pha
.af3e		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.af40		a2 05		ldx #$05			ldx 	#5 						; length
.af42		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.af44		80 18		bra $af5e			bra 	SoundEffectCommand
.af46						ShootCommand:
.af46		5a		phy				phy 								; save pos
.af47		a9 03		lda #$03			lda 	#3 						; push channel.
.af49		48		pha				pha
.af4a		a9 20		lda #$20			lda 	#32 						; pitch LSB
.af4c		a2 02		ldx #$02			ldx 	#2 						; length
.af4e		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af50		80 0c		bra $af5e			bra 	SoundEffectCommand
.af52						Explode:
.af52		5a		phy				phy 								; save pos
.af53		a9 03		lda #$03			lda 	#3 						; push channel.
.af55		48		pha				pha
.af56		a9 50		lda #$50			lda 	#80 						; pitch LSB
.af58		a2 05		ldx #$05			ldx 	#5 						; length
.af5a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af5c		80 00		bra $af5e			bra 	SoundEffectCommand
.af5e						SoundEffectCommand:
.af5e		8d 67 06	sta $0667			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.af61		9c 68 06	stz $0668			stz 	SoundCommandBlock+1
.af64		a9 0f		lda #$0f			lda 	#15
.af66		8d 69 06	sta $0669			sta 	SoundCommandBlock+2
.af69		8e 6a 06	stx $066a			stx 	SoundCommandBlock+3
.af6c		8c 6b 06	sty $066b			sty 	SoundCommandBlock+4
.af6f		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.af72		68		pla				pla
.af73		09 10		ora #$10			ora 	#$10  						; execute command $11
.af75		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.af77		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.af79		20 67 80	jsr $8067			jsr 	SNDCommand
.af7c		7a		ply				ply
.af7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.af7e						UnaryPlaying:
.af7e		fa		plx				plx
.af7f		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; get channel #
.af82		48		pha				pha
.af83		20 c2 8f	jsr $8fc2			jsr		CheckRightBracket
.af86		68		pla				pla
.af87		c9 04		cmp #$04			cmp 	#4
.af89		b0 0c		bcs $af97			bcs 	_UPNotPlaying
.af8b		09 20		ora #$20			ora 	#$20 						; query playing ?
.af8d		20 67 80	jsr $8067			jsr 	SNDCommand
.af90		c9 00		cmp #$00			cmp 	#0
.af92		f0 03		beq $af97			beq 	_UPNotPlaying
.af94		4c 48 90	jmp $9048			jmp 	ReturnTrue
.af97						_UPNotPlaying:
.af97		4c 53 90	jmp $9053			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.af9a						SoundCommand:
.af9a		b1 30		lda ($30),y			lda 	(codePtr),y
.af9c		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.af9e		d0 09		bne $afa9			bne 	_SNDMain
.afa0		c8		iny				iny 								; skip OFF
.afa1		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.afa3		5a		phy				phy
.afa4		20 67 80	jsr $8067			jsr 	SNDCommand
.afa7		7a		ply				ply
.afa8		60		rts				rts
.afa9						_SNDMain:
.afa9		a2 00		ldx #$00			ldx 	#0
.afab		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; channel
.afae		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.afb0		b0 4b		bcs $affd			bcs 	_SndError
.afb2		e8		inx				inx 								; do the rest in slot 1.
.afb3		20 ca 8f	jsr $8fca			jsr 	CheckComma
.afb6		20 a6 9e	jsr $9ea6			jsr 	Evaluate16BitInteger 		; Pitch
.afb9		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.afbb		c9 10		cmp #$10			cmp 	#16
.afbd		b0 3e		bcs $affd			bcs 	_SndError
.afbf		8d 68 06	sta $0668			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.afc2		b5 58		lda $58,x			lda 	NSMantissa0,x
.afc4		8d 67 06	sta $0667			sta 	SoundCommandBlock
.afc7		20 ca 8f	jsr $8fca			jsr 	CheckComma
.afca		20 c1 9e	jsr $9ec1			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.afcd		8d 6a 06	sta $066a			sta 	SoundCommandBlock+3
.afd0		a9 0f		lda #$0f			lda 	#15
.afd2		8d 69 06	sta $0669			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.afd5		9c 6b 06	stz $066b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.afd8		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.afdb		b1 30		lda ($30),y			lda 	(codePtr),y
.afdd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.afdf		d0 0e		bne $afef			bne 	_SNDPlay
.afe1		c8		iny				iny
.afe2		20 b0 9e	jsr $9eb0			jsr 	Evaluate16BitIntegerSigned 	; Slide
.afe5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.afe7		8d 6b 06	sta $066b			sta 	SoundCommandBlock+4
.afea		b5 60		lda $60,x			lda 	NSMantissa1,x
.afec		8d 6c 06	sta $066c			sta 	SoundCommandBlock+5
.afef						_SNDPlay:
.afef		5a		phy				phy
.aff0		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.aff2		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.aff4		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.aff6		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.aff8		20 67 80	jsr $8067			jsr 	SNDCommand
.affb		7a		ply				ply
.affc		60		rts				rts
.affd						_SndError:
.affd		4c a9 a0	jmp $a0a9			jmp 	RangeError
.0667						SoundCommandBlock:
>0667								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b000						StackPushByte:
.b000		48		pha				pha 								; save byte on stack
.b001		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b003		d0 08		bne $b00d			bne 	_SPBNoBorrow
.b005		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b007		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b009		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b00b		90 06		bcc $b013			bcc 	_SPBMemory
.b00d						_SPBNoBorrow:
.b00d		c6 34		dec $34				dec 	basicStack
.b00f		68		pla				pla 								; get back and write
.b010		92 34		sta ($34)			sta 	(basicStack)
.b012		60		rts				rts
.b013						_SPBMemory:
.b013		a9 12		lda #$12		lda	#18
.b015		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.b018						StackPopByte:
.b018		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b01a		e6 34		inc $34				inc 	basicStack
.b01c		d0 02		bne $b020			bne 	_SPBNoCarry
.b01e		e6 35		inc $35				inc 	basicStack+1
.b020						_SPBNoCarry:
.b020		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b021						StackOpen:
.b021		48		pha				pha 								; save frame byte
.b022		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b024		0a		asl a				asl 	a 							; claim twice this for storage
.b025		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b027		38		sec				sec 								; so basically subtracting from
.b028		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b02a		85 34		sta $34				sta 	basicStack
.b02c		b0 09		bcs $b037			bcs 	_SONoBorrow
>b02e		db						.byte 	$DB 						; causes a break in the emulator
.b02f		c6 35		dec $35				dec 	basicStack+1
.b031		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b033		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b035		90 04		bcc $b03b			bcc 	_SOMemory
.b037						_SONoBorrow:
.b037		68		pla				pla 								; get marker back and write at TOS
.b038		92 34		sta ($34)			sta 	(basicStack)
.b03a		60		rts				rts
.b03b						_SOMemory:
.b03b		a9 12		lda #$12		lda	#18
.b03d		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.b040						StackClose:
.b040		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b042		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b044		0a		asl a				asl 	a 							; claim twice this.
.b045		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b047		85 34		sta $34				sta 	basicStack
.b049		90 02		bcc $b04d			bcc 	_SCExit
.b04b		e6 35		inc $35				inc 	basicStack+1
.b04d						_SCExit:
.b04d		60		rts				rts
.b04e						StackCheckFrame:
.b04e		48		pha				pha
.b04f						_StackRemoveLocals:
.b04f		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b051		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b053		b0 05		bcs $b05a			bcs 	_SCNoLocal
.b055		20 6a 8a	jsr $8a6a			jsr 	LocalPopValue 				; restore the local value
.b058		80 f5		bra $b04f			bra 	_StackRemoveLocals 			; gr round again
.b05a						_SCNoLocal:
.b05a		68		pla				pla 								; get the frame check.
.b05b		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b05d		29 f0		and #$f0			and 	#$F0 						; check type bits
.b05f		d0 01		bne $b062			bne 	_SCFError 					; different, we have structures mixed up
.b061		60		rts				rts
.b062						_SCFError:
.b062		8a		txa				txa 								; report error X
.b063		4c db 8f	jmp $8fdb			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b066						STKSaveCodePosition:
.b066		5a		phy				phy
.b067		98		tya				tya 								; save Y
.b068		a0 05		ldy #$05			ldy 	#5
.b06a		91 34		sta ($34),y			sta 	(basicStack),y
.b06c		88		dey				dey 								; save Code Pointer
.b06d						_STKSaveLoop:
.b06d		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b070		91 34		sta ($34),y			sta 	(basicStack),y
.b072		88		dey				dey
.b073		d0 f8		bne $b06d			bne 	_STKSaveLoop
.b075		7a		ply				ply
.b076		60		rts				rts
.b077						STKLoadCodePosition:
.b077		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b079						_STKLoadLoop:
.b079		b1 34		lda ($34),y			lda 	(basicStack),y
.b07b		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b07e		c8		iny				iny
.b07f		c0 05		cpy #$05			cpy 	#5
.b081		d0 f6		bne $b079			bne 	_STKLoadLoop
.b083		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b085		a8		tay				tay
.b086		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b087						StackReset:
.b087		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b089		85 34		sta $34				sta 	0+basicStack
.b08b		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b08d		85 35		sta $35				sta 	1+basicStack
.b08f		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b091		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b093		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b094						StringConcrete:
.b094		5a		phy				phy 								; save position on stack
.b095		20 15 9b	jsr $9b15			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b098		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b09a		85 38		sta $38				sta 	zTemp1
.b09c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b09e		85 39		sta $39				sta 	zTemp1+1
.b0a0		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b0a2						_SALength:
.b0a2		c8		iny				iny
.b0a3		b1 38		lda ($38),y			lda 	(zTemp1),y
.b0a5		d0 fb		bne $b0a2			bne 	_SALength
.b0a7		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b0a9		b0 3d		bcs $b0e8			bcs 	_SALengthError
.b0ab		98		tya				tya 				 				; length of the new string
.b0ac		18		clc				clc
.b0ad		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b0af		90 02		bcc $b0b3			bcc 	_SAHaveLength
.b0b1		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b0b3						_SAHaveLength:
.b0b3		48		pha				pha 								; save length.
.b0b4		38		sec				sec
.b0b5		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b0b7		6d 0e 04	adc $040e			adc 	stringMemory
.b0ba		8d 0e 04	sta $040e			sta 	stringMemory
.b0bd		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b0bf		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b0c1		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b0c3		6d 0f 04	adc $040f			adc 	stringMemory+1
.b0c6		8d 0f 04	sta $040f			sta 	stringMemory+1
.b0c9		85 3b		sta $3b				sta 	zTemp2+1
.b0cb		95 60		sta $60,x			sta 	NSMantissa1,x
.b0cd		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b0ce		38		sec				sec
.b0cf		e9 03		sbc #$03			sbc 	#3
.b0d1		92 3a		sta ($3a)			sta 	(zTemp2)
.b0d3		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b0d5		a0 01		ldy #$01			ldy 	#1
.b0d7		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b0d9						_SACopyNewString:
.b0d9		a0 00		ldy #$00			ldy 	#0
.b0db						_SACopyNSLoop:
.b0db		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b0dd		c8		iny				iny 								; write two on in string storage
.b0de		c8		iny				iny
.b0df		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b0e1		88		dey				dey 								; this makes it one one.
.b0e2		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b0e4		d0 f5		bne $b0db			bne 	_SACopyNSLoop
.b0e6		7a		ply				ply
.b0e7		60		rts				rts
.b0e8						_SALengthError:
.b0e8		a9 09		lda #$09		lda	#9
.b0ea		4c db 8f	jmp $8fdb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b0ed						StringSystemInitialise:
.b0ed		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b0ef		8d 0e 04	sta $040e			sta 	0+stringMemory
.b0f2		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b0f4		8d 0f 04	sta $040f			sta 	1+stringMemory
.b0f7		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b0fa		60		rts				rts
.b0fb						StringSpaceInitialise:
.b0fb		20 15 9b	jsr $9b15			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b0fe		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b100		8d 10 04	sta $0410			sta 	stringInitialised
.b103		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b106		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b109		ad 0f 04	lda $040f			lda 	stringMemory+1
.b10c		3a		dec a				dec 	a
.b10d		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b110		60		rts				rts
.b111						StringTempAllocate:
.b111		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b113		b0 30		bcs $b145			bcs 	_STALength
.b115		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b118		30 05		bmi $b11f			bmi 	_STAAllocate
.b11a		48		pha				pha 								; save value to subtract.
.b11b		20 fb b0	jsr $b0fb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b11e		68		pla				pla 								; restore it
.b11f						_STAAllocate:
.b11f		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b121		18		clc				clc  								; deliberate allows one more
.b122		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b125		8d 11 04	sta $0411			sta 	stringTempPointer
.b128		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b12a		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b12c		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b12f		69 ff		adc #$ff			adc 	#$FF
.b131		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b134		85 3d		sta $3d				sta 	zsTemp+1
.b136		95 60		sta $60,x			sta 	NSMantissa1,x
.b138		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b13a		74 70		stz $70,x			stz 	NSMantissa3,x
.b13c		a9 10		lda #$10			lda 	#NSTString
.b13e		95 50		sta $50,x			sta 	NSStatus,x
.b140		a9 00		lda #$00			lda 	#0 							; clear the target string
.b142		92 3c		sta ($3c)			sta 	(zsTemp)
.b144		60		rts				rts
.b145						_STALength:
.b145		a9 09		lda #$09		lda	#9
.b147		4c db 8f	jmp $8fdb		jmp	ErrorHandler
.b14a						StringTempWrite:
.b14a		48		pha				pha
.b14b		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b14d		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b14f		d0 02		bne $b153			bne 	_STWNoCarry
.b151		e6 3d		inc $3d				inc 	zsTemp+1
.b153						_STWNoCarry:
.b153		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b155		92 3c		sta ($3c)			sta 	(zsTemp)
.b157		68		pla				pla
.b158		60		rts				rts

;******  Return to file: _basic.asm

.b159						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 6f 06	lda $066f			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 6e 06	sty $066e			sty 	EXTColumn
.c022	a022	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6d 06	inc $066d			inc 	EXTRow  					; bump row
.c02a	a02a	9c 6e 06	stz $066e			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6d 06	lda $066d			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 71 06	cmp $0671			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 6e 06	dec $066e			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 6e 06	stz $066e			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6d 06	dec $066d			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6d 06	lda $066d			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6d 06	dec $066d			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 70 06	sbc $0670			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 6e 06	sty $066e			sty 	EXTColumn
.c081	a081	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 6e 06	sty $066e			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 71 06	lda $0671			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6d 06	cmp $066d			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6d 06	inc $066d			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 6e 06	lda $066e			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 6e 06	sta $066e			sta 	EXTColumn
.c0be	a0be	cd 70 06	cmp $0670			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 6e 06	dec $066e			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackSpace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 6f 06	and $066f			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 6f 06	sta $066f			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 6f 06	ora $066f			ora 	EXTTextColour
.c131	a131	8d 6f 06	sta $066f			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 6f 06	lda $066f			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 6f 06	lda $066f			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 6d 06	stz $066d			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 6e 06	stz $066e			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 6e 06	lda $066e			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 6d 06	lda $066d			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 d9 bb	jsr $bbd9			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 6e 06	lda $066e			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 6e 06	cpy $066e			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 70 06	lda $0670			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066d						EXTRow:
>066d								.fill 	1
.066e						EXTColumn:
>066e								.fill 	1
.066f						EXTTextColour:
>066f								.fill 	1
.0670						EXTScreenWidth:
>0670								.fill 	1
.0671						EXTScreenHeight:
>0671								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 6f 06	sta $066f			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 70 06	sta $0670			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 71 06	sta $0671			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 6d 06	lda $066d			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0672						gxCurrentX:
>0672								.fill 	2
.0674						gxCurrentY:
>0674								.fill 	2
.0676						gxLastX:
>0676								.fill 	2
.0678						gxLastY:
>0678								.fill 	2
.067a						gxX0:
>067a								.fill 	2
.067c						gxY0:
>067c								.fill 	2
.067e						gxX1:
>067e								.fill 	2
.0680						gxY1:
>0680								.fill 	2
.0682						gxSpritesOn:
>0682								.fill 	1
.0683						gxBitmapsOn:
>0683								.fill 	1
.0684						gxBasePage:
>0684								.fill 	1
.0685						gxSpritePage:
>0685								.fill 	1
.0686						gxHeight:
>0686								.fill 	1
.0687						gxMode:
>0687								.fill 	1
.0688						gxColour:
>0688								.fill 	1
.0689						gxEORValue:
>0689								.fill 	1
.068a						gxANDValue:
>068a								.fill 	1
.068b						gxOriginalLUTValue:
>068b								.fill 	1
.068c						gxOffset:
>068c								.fill 	1
.068d						GSCurrentSpriteID:
>068d								.fill 	1
.068e						GSCurrentSpriteAddr:
>068e								.fill 	2
.0690						gxSpriteOffsetBase:
>0690								.fill 	2
.0692						gxSpriteLow:
>0692								.fill 	64
.06d2						gxSpriteHigh:
>06d2								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 76 06	sta $0676,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 74 06	sta $0674			sta 	gxCurrentY
.c7dc	a7dc	9c 75 06	stz $0675			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 72 06	sta $0672			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 73 06	sta $0673			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 73 06	lda $0673			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 72 06	lda $0672			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 74 06	lda $0674			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 86 06	cmp $0686			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 15 07	sta $0715			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 83 06	lda $0683			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 16 07	stz $0716			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 13 07	lda $0713			lda 	gxxCentre					; while x <= y
.c83d	a83d	cd 14 07	cmp $0714			cmp 	gxYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 14 07	lda $0714			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 13 07	lda $0713			lda 	gxxCentre 						; swap X and Y
.c867	a867	ae 14 07	ldx $0714			ldx	 	gxYCentre
.c86a	a86a	8d 14 07	sta $0714			sta 	gxYCentre
.c86d	a86d	8e 13 07	stx $0713			stx 	gxxCentre
.c870	a870	ad 16 07	lda $0716			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 16 07	sta $0716			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 15 07	lda $0715	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 16 07	lda $0716			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 14 07	lda $0714			lda 	gxYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 13 07	lda $0713			lda 	gxxCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	gxPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 15 07	lda $0715			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 14 07	sbc $0714			sbc 	gxYCentre
.c8b1	a8b1	8d 14 07	sta $0714			sta 	gxYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c8c8	a8c8	bd 7f 06	lda $067f,x			lda 	gxX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7b 06	sta $067b,x			sta 	gxX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 16 07	stz $0716			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 13 07	inc $0713			inc 	gxxCentre 					; X++
.c8dd	a8dd	ad 13 07	lda $0713			lda 	gxxCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 13 07	inc $0713			inc 	gxxCentre					; X++
.c8ea	a8ea	ce 14 07	dec $0714			dec 	gxYCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 13 07	lda $0713			lda 	gxxCentre
.c8f1	a8f1	ed 14 07	sbc $0714			sbc 	gxYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 16 07	dec $0716			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 80 06	lda $0680			lda 	gxY1
.c92a	a92a	ed 7c 06	sbc $067c			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 12 07	sta $0712			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 13 07	stz $0713			stz 	gxxCentre
.c93e	a93e	ad 12 07	lda $0712			lda 	gxRadius
.c941	a941	8d 14 07	sta $0714			sta 	gxYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c959	a959	7d 7a 06	adc $067a,x			adc 	gxX0,x
.c95c	a95c	9d 7e 06	sta $067e,x			sta 	gxX1,x
.c95f	a95f	bd 7f 06	lda $067f,x			lda 	gxX1+1,x
.c962	a962	7d 7b 06	adc $067b,x			adc 	gxX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 7f 06	sta $067f,x			sta 	gxX1+1,x
.c969	a969	7e 7e 06	ror $067e,x			ror 	gxX1,x
.c96c	a96c	60		rts				rts
.0712						gxRadius:
>0712								.fill 	1
.0713						gxxCentre:
>0713								.fill 	1
.0714						gxYCentre:
>0714								.fill 	1
.0715						gxIsFillMode:
>0715								.fill 	1
.0716						gxYChanged:
>0716								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 86 06	lda $0686			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 84 06	adc $0684			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 84 06	cmp $0684			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 82 06	stz $0682			stz 	gxSpritesOn
.c9c6	a9c6	9c 83 06	stz $0683			stz 	gxBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 72 06	stz $0672,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 83 06	sta $0683			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 84 06	sta $0684			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 86 06	stx $0686			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 82 06	sta $0682			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 85 06	sta $0685			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	zTemp0
.ca43	aa43	8d 90 06	sta $0690			sta 	gxSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	zTemp0+1
.ca48	aa48	8d 91 06	sta $0691			sta 	gxSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 8f 06	stz $068f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d2 06	stz $06d2,x			stz 	gxSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 83 06	lda $0683			lda 	gxBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8c 06	ldy $068c			ldy 	gxOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8a 06	and $068a			and 	gxANDValue
.ca93	aa93	4d 89 06	eor $0689			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 19 07	lda $0719			lda 	gxIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7a 06	lda $067a			lda 	gxX0 						; compare X, LSB and MSB
.cab1	aab1	4d 7e 06	eor $067e			eor 	gxX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7b 06	lda $067b			lda 	gxX0+1
.cab9	aab9	4d 7f 06	eor $067f			eor 	gxX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 80 06	lda $0680			lda 	gxY1
.cac0	aac0	4d 7c 06	eor $067c			eor 	gxY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1b 07	lda $071b			lda 	gxPosition
.cac8	aac8	6d 1c 07	adc $071c			adc 	gxAdjust
.cacb	aacb	8d 1b 07	sta $071b			sta 	gxPosition
.cace	aace	9c 1e 07	stz $071e			stz 	gxAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 1d 07	cmp $071d			cmp 	gxTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 1e 07	dec $071e			dec 	gxAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 1d 07	sbc $071d			sbc 	gxTotal
.cadf	aadf	8d 1b 07	sta $071b			sta 	gxPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 19 07	lda $0719			lda 	gxIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 1e 07	lda $071e			lda 	gxAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf7	aaf7	ad 1e 07	lda $071e			lda 	gxAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					gxAdjustX:
.cb00	ab00	ad 1a 07	lda $071a			lda 	gxDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7a 06	lda $067a			lda 	gxX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7b 06	dec $067b			dec 	gxX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7a 06	dec $067a			dec 	gxX0
.cb10	ab10	ce 8c 06	dec $068c			dec 	gxOffset 					; pixel left
.cb13	ab13	ad 8c 06	lda $068c			lda 	gxOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7a 06	inc $067a			inc 	gxX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7b 06	inc $067b			inc 	gxX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8c 06	inc $068c			inc 	gxOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7c 06	inc $067c			inc 	gxY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 80 06	lda $0680			lda 	gxY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7c 06	sbc $067c			sbc 	gxY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 18 07	sta $0718			sta 	gxDiffY
.cb58	ab58	9c 1a 07	stz $071a			stz 	gxDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 7e 06	lda $067e			lda 	gxX1
.cb5f	ab5f	ed 7a 06	sbc $067a			sbc 	gxX0
.cb62	ab62	8d 17 07	sta $0717			sta 	gxDiffX
.cb65	ab65	ad 7f 06	lda $067f			lda 	gxX1+1 						; calculate MSB
.cb68	ab68	ed 7b 06	sbc $067b			sbc 	gxX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 17 07	ror $0717			ror 	gxDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 17 07	sbc $0717			sbc 	gxDiffX
.cb78	ab78	8d 17 07	sta $0717			sta 	gxDiffX
.cb7b	ab7b	ce 1a 07	dec $071a			dec 	gxDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 19 07	stz $0719			stz 	gxIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 18 07	lda $0718			lda 	gxDiffY 					; set adjust and total.
.cb84	ab84	8d 1c 07	sta $071c			sta 	gxAdjust
.cb87	ab87	ad 17 07	lda $0717			lda 	gxDiffX
.cb8a	ab8a	8d 1d 07	sta $071d			sta 	gxTotal
.cb8d	ab8d	ad 18 07	lda $0718			lda 	gxDiffY 					; if dy > dx
.cb90	ab90	cd 17 07	cmp $0717			cmp 	gxDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 19 07	dec $0719			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 17 07	lda $0717			lda 	gxDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1c 07	sta $071c			sta 	gxAdjust
.cb9e	ab9e	ad 18 07	lda $0718			lda 	gxDiffY
.cba1	aba1	8d 1d 07	sta $071d			sta 	gxTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 1d 07	lda $071d			lda 	gxTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1b 07	sta $071b			sta 	gxPosition
.cbab	abab	60		rts				rts
.0717						gxDiffX:
>0717								.fill 	1
.0718						gxDiffY:
>0718								.fill 	1
.0719						gxIsDiffYLarger:
>0719								.fill 	1
.071a						gxDXNegative:
>071a								.fill 	1
.071b						gxPosition:
>071b								.fill 	1
.071c						gxAdjust:
>071c								.fill 	1
.071d						gxTotal:
>071d								.fill 	1
.071e						gxAddSelect:
>071e								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 88 06	stx $0688			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 87 06	sta $0687			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8a 06	stz $068a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 88 06	ldx $0688			ldx 	gxColour
.cbbe	abbe	8e 89 06	stx $0689			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8a 06	stx $068a			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 89 06	stz $0689			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8a 06	lda $068a			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8a 06	sta $068a			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbe0	abe0	ac 8c 06	ldy $068c			ldy 	gxOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8a 06	and $068a			and 	gxANDValue
.cbe8	abe8	4d 89 06	eor $0689			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 83 06	lda $0683			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7c 06	lda $067c			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 80 06	cmp $0680			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7c 06	inc $067c			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7c 06	lda $067c			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 80 06	cmp $0680			cmp 	gxY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 7e 06	lda $067e			lda		gxX1
.cc37	ac37	ed 7a 06	sbc $067a			sbc 	gxX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 7f 06	lda $067f			lda 	gxX1+1
.cc3f	ac3f	ed 7b 06	sbc $067b			sbc 	gxX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8c 06	lda $068c			lda 	gxOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8c 06	ldy $068c			ldy 	gxOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8a 06	and $068a			and 	gxANDValue
.cc5c	ac5c	4d 89 06	eor $0689			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8a 06	and $068a			and 	gxANDValue
.cc7a	ac7a	4d 89 06	eor $0689			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8a 06	and $068a			and 	gxANDValue
.cc92	ac92	4d 89 06	eor $0689			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8c 06	sta $068c			sta 	gxOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 1f 07	sta $071f			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 20 07	sta $0720			sta 	gxMask 						; and mask
.ccb9	acb9	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7c 06	lda $067c			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 22 07	sty $0722			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 21 07	stx $0721			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; open the bitmap.
.cccb	accb	ad 24 07	lda $0724			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 23 07	sta $0723			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 24 07	bit $0724			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 20 07	lda $0720			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 23 07	lda $0723			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7c 06	lda $067c			lda 	gxY0 						; off screen
.ccf2	acf2	cd 86 06	cmp $0686			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 1f 07	cmp $071f			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7c 06	sta $067c			sta 	gxY0
.cd0b	ad0b	ae 23 07	ldx $0723			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 1f 07	lda $071f			lda 	gxSize
.cd12	ad12	6d 7a 06	adc $067a			adc 	gxX0
.cd15	ad15	8d 7a 06	sta $067a			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7b 06	inc $067b			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 21 07	jmp ($0721)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8c 06	ldy $068c			ldy 	gxOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 23 07	lda $0723			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 87 06	bit $0687			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 20 07	lda $0720			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 24 07	lda $0724			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8a 06	and $068a			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 1f 07	cmp $071f			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7c 06	inc $067c			inc 	gxY0
.cd73	ad73	60		rts				rts
.071f						gxSize:
>071f								.fill 	1
.0720						gxMask:
>0720								.fill 	1
.0721						gxAcquireVector:
>0721								.fill 	2
.0723						gxScale:
>0723								.fill 	1
.0724						gxUseMode:
>0724								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 87 06	eor $0687			eor 	gxMode
.cd79	ad79	8d 24 07	sta $0724			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 88 06	lda $0688			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 82 06	lda $0682			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 87 06	eor $0687			eor 	gxMode
.cdc6	adc6	8d 24 07	sta $0724			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 25 07	lda $0725			lda 	gxSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 85 06	lda $0685			lda 	gxSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 26 07	ldx $0726			ldx 	gxSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	zTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 28 07	adc $0728			adc 	gxSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 29 07	adc $0729			adc 	gxSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 25 07	cpy $0725			cpy 	gxSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 8d 06	sta $068d			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 8f 06	sta $068f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 8e 06	sta $068e			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 28 07	lda $0728			lda 	gxSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 29 07	lda $0729			lda 	gxSpriteOffset+1
.ce87	ae87	6d 90 06	adc $0690			adc 	gxSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 91 06	lda $0691			lda 	gxSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 26 07	lda $0726			lda 	gxSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 27 07	ora $0727			ora 	gxSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.ceb4	aeb4	ad 26 07	lda $0726			lda 	gxSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d2 06	ora $06d2,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.cec2	aec2	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 82 06	lda $0682			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7a 06	adc $067a			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7b 06	lda $067b			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7c 06	adc $067c			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7b 06	lsr $067b			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7a 06	ror $067a			ror 	gxX0
.cf32	af32	4e 7a 06	lsr $067a			lsr 	gxX0
.cf35	af35	4e 7c 06	lsr $067c			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7c 06	lsr $067c			lsr 	gxY0
.cf3b	af3b	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7a 06	ora $067a			ora 	gxX0
.cf46	af46	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.cf49	af49	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7c 06	ora $067c			ora 	gxY0
.cf51	af51	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8b 06	sta $068b			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8b 06	lda $068b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					gxPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7c 06	lda $067c			lda 	gxY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7a 06	lda $067a			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8c 06	sta $068c			sta 	gxOffset
.cfa3	afa3	ad 7b 06	lda $067b			lda 	gxX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 84 06	adc $0684			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8c 06	lda $068c			lda 	gxOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8c 06	sta $068c			sta 	gxOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 92 06	lda $0692,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 92 06	ora $0692,x			ora 	gxSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d2 06	lda $06d2,y			lda 	gxSpriteHigh,y
.cff5	aff5	7d d2 06	adc $06d2,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d2 06	lda $06d2,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 92 06	lda $0692,y			lda 	gxSpriteLow,y
.d023	b023	fd 92 06	sbc $0692,x			sbc 	gxSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 85 06	lda $0685			lda 	gxSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 29 07	sta $0729			sta 	gxSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 26 07	sta $0726			sta 	gxSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 25 07	sta $0725			sta 	gxSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 27 07	sta $0727			sta 	gxSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 28 07	sta $0728			sta 	gxSpriteOffset
.d070	b070	0e 28 07	asl $0728			asl 	gxSpriteOffset
.d073	b073	2e 29 07	rol $0729			rol 	gxSpriteOffset+1
.d076	b076	0e 28 07	asl $0728			asl 	gxSpriteOffset
.d079	b079	2e 29 07	rol $0729			rol 	gxSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0725						gxSizePixels:
>0725								.fill 	1
.0726						gxSizeBits:
>0726								.fill 	1
.0727						gxSpriteLUT:
>0727								.fill 	1
.0728						gxSpriteOffset:
>0728								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7a 06	lda $067a			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 7e 06	cmp $067e			cmp 	gxX1
.d08d	b08d	ad 7b 06	lda $067b			lda 	gxX0+1
.d090	b090	ed 7f 06	sbc $067f			sbc 	gxX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7c 06	lda $067c			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 80 06	cmp $0680			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7a 06	lda $067a,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7a 06	lda $067a,y			lda 	gxX0,y
.d0bd	b0bd	9d 7a 06	sta $067a,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7a 06	sta $067a,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b8 DATA
>d244	b244	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b9 DIM
>d249	b249	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ba DOWNTO
>d251	b251	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bb ELSE
>d257	b257	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bc FROM
>d25d	b25d	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bd GFX
>d262	b262	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $be GOSUB
>d269	b269	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bf GOTO
>d26f	b26f	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c0 HERE
>d275	b275	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c1 IMAGE
>d27c	b27c	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c2 INPUT
>d283	b283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d288	b288	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d28e	b28e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d295	b295	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d29a	b29a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d29e	b29e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2a6	b2a6	45
>d2a7	b2a7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2af	b2af	45
>d2b0	b2b0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2b6	b2b6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2bc	b2bc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2c3	b2c3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2ca	b2ca	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2d1	b2d1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cf PRINT
>d2d8	b2d8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d2de	b2de	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d2e4	b2e4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d2e9	b2e9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d3 RETURN
>d2f1	b2f1	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d2f8	b2f8	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d2ff	b2ff	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d307	b307	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d30d	b30d	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d311	b311	ff					.text	$FF
.d312	b312					KeywordSet1:
>d312	b312	00 65					.text	0,$65,""               ; $80 !0:EOF
>d314	b314	00 58					.text	0,$58,""               ; $81 !1:SH1
>d316	b316	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d318	b318	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d320	b320	4c 45
>d322	b322	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32a	b32a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d332	b332	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d337	b337	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d33f	b33f	45
>d340	b340	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d344	b344	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d34a	b34a	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d350	b350	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d355	b355	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d35b	b35b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d363	b363	45
>d364	b364	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d369	b369	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $8f SAVE
>d36f	b36f	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $90 SETDATE
>d377	b377	45
>d378	b378	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $91 SETTIME
>d380	b380	45
>d381	b381	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $92 SHOOT
>d388	b388	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $93 SPRITES
>d390	b390	53
>d391	b391	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $94 STOP
>d397	b397	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $95 VERIFY
>d39f	b39f	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $96 XGO
>d3a4	b3a4	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $97 XLOAD
>d3ab	b3ab	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $98 ZAP
>d3b0	b3b0	ff					.text	$FF
.d3b1	b3b1					KeywordSet2:
>d3b1	b3b1	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3b3	b3b3	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3b5	b3b5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3b7	b3b7	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3bc	b3bc	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3c1	b3c1	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3c6	b3c6	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3cb	b3cb	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3d0	b3d0	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3d5	b3d5	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3da	b3da	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3df	b3df	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3e4	b3e4	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3e9	b3e9	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3ee	b3ee	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3f3	b3f3	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3f8	b3f8	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3fd	b3fd	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d402	b402	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d407	b407	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d40c	b40c	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d411	b411	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d416	b416	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d41b	b41b	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d420	b420	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d425	b425	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d42a	b42a	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d42f	b42f	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d434	b434	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d439	b439	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d43e	b43e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d443	b443	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d448	b448	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d44d	b44d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d452	b452	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d457	b457	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d45c	b45c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d461	b461	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d466	b466	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d46b	b46b	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d470	b470	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d475	b475	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d47a	b47a	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d47f	b47f	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d484	b484	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d489	b489	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d48e	b48e	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d493	b493	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d498	b498	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d49d	b49d	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4a2	b4a2	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4a7	b4a7	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4ac	b4ac	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4b1	b4b1	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4b6	b4b6	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4bb	b4bb	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4c0	b4c0	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4c5	b4c5	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4ca	b4ca	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4cf	b4cf	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4d4	b4d4	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4d9	b4d9	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4de	b4de	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4e3	b4e3	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4e8	b4e8	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4ed	b4ed	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4f2	b4f2	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4f7	b4f7	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4fc	b4fc	ff					.text	$FF
.d4fd	b4fd					Export_TKListConvertLine:
.d4fd	b4fd	48		pha				pha 								; save indent on the stack
.d4fe	b4fe	9c 1d 04	stz $041d			stz 	tbOffset
.d501	b501	9c 2d 04	stz $042d			stz 	tokenBuffer
.d504	b504	9c 29 04	stz $0429			stz 	currentListColour
.d507	b507	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d509	b509	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d50c	b50c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d50e	b50e	b1 30		lda ($30),y			lda 	(codePtr),y
.d510	b510	aa		tax				tax
.d511	b511	88		dey				dey
.d512	b512	b1 30		lda ($30),y			lda 	(codePtr),y
.d514	b514	20 f7 b6	jsr $b6f7			jsr 	LCLWriteNumberXA
.d517	b517	68		pla				pla 								; adjustment to indent
.d518	b518	48		pha				pha 								; save on stack
.d519	b519	10 0c		bpl $b527			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d51b	b51b	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d51c	b51c	6d 26 04	adc $0426			adc 	listIndent
.d51f	b51f	8d 26 04	sta $0426			sta 	listIndent
.d522	b522	10 03		bpl $b527			bpl 	_LCNoAdjust
.d524	b524	9c 26 04	stz $0426			stz 	listIndent
.d527	b527					_LCNoAdjust:
.d527	b527	18		clc				clc		 							; work out actual indent.
.d528	b528	ad 26 04	lda $0426			lda 	listIndent
.d52b	b52b	0a		asl a				asl 	a
.d52c	b52c	69 07		adc #$07			adc 	#7
.d52e	b52e	85 36		sta $36				sta 	zTemp0
.d530	b530					_LCPadOut:
.d530	b530	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d532	b532	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d535	b535	ad 1d 04	lda $041d			lda 	tbOffset
.d538	b538	c5 36		cmp $36				cmp 	zTemp0
.d53a	b53a	d0 f4		bne $b530			bne 	_LCPadOut
.d53c	b53c	a0 03		ldy #$03			ldy 	#3 							; start position.
.d53e	b53e					_LCMainLoop:
.d53e	b53e	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d540	b540	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d543	b543	b1 30		lda ($30),y			lda 	(codePtr),y
.d545	b545	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d547	b547	f0 17		beq $b560			beq 	_LCExit
.d549	b549	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d54b	b54b	90 1e		bcc $b56b			bcc 	_LCDoubles
.d54d	b54d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d54f	b54f	90 2a		bcc $b57b			bcc 	_LCShiftPunc
.d551	b551	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d553	b553	90 35		bcc $b58a			bcc 	_LCPunctuation
.d555	b555	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d557	b557	90 51		bcc $b5aa			bcc 	_LCIdentifiers
.d559	b559	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d55b	b55b	90 73		bcc $b5d0			bcc 	_LCTokens
.d55d	b55d	4c 30 b6	jmp $b630			jmp 	_LCData 					; 254-5 are data objects
.d560	b560					_LCExit:
.d560	b560	68		pla				pla 								; get old indent adjust
.d561	b561	30 07		bmi $b56a			bmi 	_LCExit2
.d563	b563	18		clc				clc 								; add to indent if +ve
.d564	b564	6d 26 04	adc $0426			adc 	listIndent
.d567	b567	8d 26 04	sta $0426			sta 	listIndent
.d56a	b56a					_LCExit2:
.d56a	b56a	60		rts				rts
.d56b	b56b					_LCDoubles:
.d56b	b56b	48		pha				pha
.d56c	b56c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d56d	b56d	29 02		and #$02			and 	#2
.d56f	b56f	09 3c		ora #$3c			ora 	#60 						; make < >
.d571	b571	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d574	b574	68		pla				pla 								; restore, do lower bit
.d575	b575	29 03		and #$03			and 	#3
.d577	b577	09 3c		ora #$3c			ora 	#60
.d579	b579	80 0f		bra $b58a			bra		_LCPunctuation 				; print, increment, loop
.d57b	b57b					_LCShiftPunc:
.d57b	b57b	aa		tax				tax 								; save in X
.d57c	b57c	29 07		and #$07			and 	#7 							; lower 3 bits
.d57e	b57e	f0 02		beq $b582			beq 	_LCNoAdd
.d580	b580	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d582	b582					_LCNoAdd:
.d582	b582	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d584	b584	90 02		bcc $b588			bcc 	_LCNoAdd2
.d586	b586	09 20		ora #$20			ora 	#32 						; adds $20
.d588	b588					_LCNoAdd2:
.d588	b588	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d58a	b58a					_LCPunctuation:
.d58a	b58a	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d58c	b58c	d0 03		bne $b591			bne 	_LCPContinue
.d58e	b58e	20 a5 b6	jsr $b6a5			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d591	b591					_LCPContinue:
.d591	b591	c9 2e		cmp #$2e			cmp 	#'.'
.d593	b593	f0 08		beq $b59d			beq 	_LCPIsConstant
.d595	b595	c9 30		cmp #$30			cmp 	#'0'
.d597	b597	90 0b		bcc $b5a4			bcc 	_LCPNotConstant
.d599	b599	c9 3a		cmp #$3a			cmp 	#'9'+1
.d59b	b59b	b0 07		bcs $b5a4			bcs 	_LCPNotConstant
.d59d	b59d					_LCPIsConstant:
.d59d	b59d	48		pha				pha
.d59e	b59e	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5a0	b5a0	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5a3	b5a3	68		pla				pla
.d5a4	b5a4					_LCPNotConstant:
.d5a4	b5a4	c8		iny				iny 								; consume character
.d5a5	b5a5	20 8f b6	jsr $b68f			jsr 	LCLWrite 					; write it out.
.d5a8	b5a8	80 94		bra $b53e			bra 	_LCMainLoop 				; go round again.
.d5aa	b5aa					_LCIdentifiers:
.d5aa	b5aa	18		clc				clc 								; convert to physical address
.d5ab	b5ab	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5ad	b5ad	85 37		sta $37				sta 	zTemp0+1
.d5af	b5af	c8		iny				iny
.d5b0	b5b0	b1 30		lda ($30),y			lda 	(codePtr),y
.d5b2	b5b2	85 36		sta $36				sta 	zTemp0
.d5b4	b5b4	c8		iny				iny
.d5b5	b5b5	5a		phy				phy 								; save position
.d5b6	b5b6	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5b8	b5b8	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5bb	b5bb	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5bd	b5bd					_LCOutIdentifier:
.d5bd	b5bd	c8		iny				iny
.d5be	b5be	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5c0	b5c0	29 7f		and #$7f			and 	#$7F
.d5c2	b5c2	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d5c5	b5c5	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d5c8	b5c8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5ca	b5ca	10 f1		bpl $b5bd			bpl 	_LCOutIdentifier
.d5cc	b5cc	7a		ply				ply 								; restore position
.d5cd	b5cd	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d5d0	b5d0					_LCTokens:
.d5d0	b5d0	aa		tax				tax 								; token in X
.d5d1	b5d1	a9 b1		lda #$b1			lda 	#((KeywordSet2) & $FF)
.d5d3	b5d3	85 36		sta $36				sta 	0+zTemp0
.d5d5	b5d5	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5d7	b5d7	85 37		sta $37				sta 	1+zTemp0
.d5d9	b5d9	e0 82		cpx #$82			cpx 	#$82
.d5db	b5db	f0 16		beq $b5f3			beq 	_LCUseShift
.d5dd	b5dd	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.d5df	b5df	85 36		sta $36				sta 	0+zTemp0
.d5e1	b5e1	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5e3	b5e3	85 37		sta $37				sta 	1+zTemp0
.d5e5	b5e5	e0 81		cpx #$81			cpx 	#$81
.d5e7	b5e7	f0 0a		beq $b5f3			beq 	_LCUseShift
.d5e9	b5e9	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d5eb	b5eb	85 36		sta $36				sta 	0+zTemp0
.d5ed	b5ed	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d5ef	b5ef	85 37		sta $37				sta 	1+zTemp0
.d5f1	b5f1	80 01		bra $b5f4			bra 	_LCNoShift
.d5f3	b5f3					_LCUseShift:
.d5f3	b5f3	c8		iny				iny
.d5f4	b5f4					_LCNoShift:
.d5f4	b5f4	20 b9 b6	jsr $b6b9			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5f7	b5f7	b1 30		lda ($30),y			lda 	(codePtr),y
.d5f9	b5f9	aa		tax				tax 								; into X
.d5fa	b5fa					_LCFindText:
.d5fa	b5fa	ca		dex				dex
.d5fb	b5fb	10 0e		bpl $b60b			bpl 	_LCFoundText 				; found text.
.d5fd	b5fd	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5ff	b5ff	1a		inc a				inc 	a 							; one extra for size
.d600	b600	38		sec				sec 								; one extra for checksum
.d601	b601	65 36		adc $36				adc 	zTemp0 						; go to next token
.d603	b603	85 36		sta $36				sta 	zTemp0
.d605	b605	90 f3		bcc $b5fa			bcc 	_LCFindText
.d607	b607	e6 37		inc $37				inc 	zTemp0+1
.d609	b609	80 ef		bra $b5fa			bra 	_LCFindText
.d60b	b60b					_LCFoundText:
.d60b	b60b	5a		phy				phy 								; save List position
.d60c	b60c	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d60e	b60e	aa		tax				tax
.d60f	b60f	a9 86		lda #$86			lda 	#CLIToken+$80
.d611	b611	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d614	b614	a0 02		ldy #$02			ldy 	#2
.d616	b616					_LCCopyToken:
.d616	b616	b1 36		lda ($36),y			lda 	(zTemp0),y
.d618	b618	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d61b	b61b	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d61e	b61e	c8		iny				iny
.d61f	b61f	ca		dex				dex
.d620	b620	d0 f4		bne $b616			bne 	_LCCopyToken
.d622	b622	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d624	b624	f0 05		beq $b62b			beq 	_LCNoSpace
.d626	b626	a9 20		lda #$20			lda 	#' '
.d628	b628	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d62b	b62b					_LCNoSpace:
.d62b	b62b	7a		ply				ply 								; restore position.
.d62c	b62c	c8		iny				iny 								; consume token
.d62d	b62d	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop 				; and go around again.
.d630	b630					_LCData:
.d630	b630	48		pha				pha 								; save type $FE/$FF
.d631	b631	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d633	b633	c9 fe		cmp #$fe			cmp 	#$FE
.d635	b635	f0 22		beq $b659			beq 	_LCHaveOpener
.d637	b637	a2 22		ldx #$22			ldx 	#'"'
.d639	b639	a9 8f		lda #$8f			lda 	#CLIData+$80
.d63b	b63b	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d63e	b63e	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d640	b640	d0 17		bne $b659			bne 	_LCHaveOpener
.d642	b642	88		dey				dey 								; what precedes it ?
.d643	b643	b1 30		lda ($30),y			lda 	(codePtr),y
.d645	b645	c8		iny				iny
.d646	b646	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d648	b648	d0 0f		bne $b659			bne 	_LCHaveOpener
.d64a	b64a	a9 09		lda #$09			lda 	#9 							; tab
.d64c	b64c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d64f	b64f	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d651	b651	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d654	b654	a9 85		lda #$85			lda 	#CLIFComment+$80
.d656	b656	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d659	b659					_LCHaveOpener:
.d659	b659	8a		txa				txa 								; output prefix (# or ")
.d65a	b65a	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d65d	b65d	c8		iny				iny 								; get count
.d65e	b65e	b1 30		lda ($30),y			lda 	(codePtr),y
.d660	b660	aa		tax				tax
.d661	b661	c8		iny				iny 								; point at first character
.d662	b662					_LCOutData:
.d662	b662	b1 30		lda ($30),y			lda 	(codePtr),y
.d664	b664	c9 00		cmp #$00			cmp 	#0
.d666	b666	f0 03		beq $b66b			beq 	_LCNoPrint
.d668	b668	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d66b	b66b					_LCNoPrint:
.d66b	b66b	c8		iny				iny
.d66c	b66c	ca		dex				dex
.d66d	b66d	d0 f3		bne $b662			bne 	_LCOutData
.d66f	b66f	68		pla				pla 								; closing " required ?
.d670	b670	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d672	b672	d0 0f		bne $b683			bne 	_LCNoQuote
.d674	b674	a9 22		lda #$22			lda 	#'"'
.d676	b676	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d679	b679	ad 6f 06	lda $066f			lda 	EXTTextColour
.d67c	b67c	29 0f		and #$0f			and 	#$0F
.d67e	b67e	09 90		ora #$90			ora 	#$90
.d680	b680	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d683	b683					_LCNoQuote:
.d683	b683	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d686	b686					LCLWriteColour:
.d686	b686	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d689	b689	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d68c	b68c	d0 01		bne $b68f			bne 	LCLWrite 					; if different, output it
.d68e	b68e	60		rts				rts
.d68f	b68f					LCLWrite:
.d68f	b68f	da		phx				phx
.d690	b690	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d693	b693	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d696	b696	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d699	b699	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d69c	b69c	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d69e	b69e	30 03		bmi $b6a3			bmi 	_LCLNoColour
.d6a0	b6a0	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6a3	b6a3					_LCLNoColour:
.d6a3	b6a3	fa		plx				plx
.d6a4	b6a4	60		rts				rts
.d6a5	b6a5					LCLDeleteLastSpace:
.d6a5	b6a5	48		pha				pha
.d6a6	b6a6	da		phx				phx
.d6a7	b6a7	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6aa	b6aa	f0 0a		beq $b6b6			beq 	_LCDLSExit
.d6ac	b6ac	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6af	b6af	c9 20		cmp #$20			cmp 	#' '
.d6b1	b6b1	d0 03		bne $b6b6			bne 	_LCDLSExit
.d6b3	b6b3	ce 1d 04	dec $041d			dec 	tbOffset
.d6b6	b6b6					_LCDLSExit:
.d6b6	b6b6	fa		plx				plx
.d6b7	b6b7	68		pla				pla
.d6b8	b6b8	60		rts				rts
.d6b9	b6b9					LCLCheckSpaceRequired:
.d6b9	b6b9	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6bc	b6bc	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6be	b6be	f0 1b		beq $b6db			beq 	_LCCSRSpace
.d6c0	b6c0	c9 29		cmp #$29			cmp 	#')'
.d6c2	b6c2	f0 17		beq $b6db			beq 	_LCCSRSpace
.d6c4	b6c4	c9 23		cmp #$23			cmp 	#'#'
.d6c6	b6c6	f0 13		beq $b6db			beq 	_LCCSRSpace
.d6c8	b6c8	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase 				; saves a little effort
.d6cb	b6cb	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6cd	b6cd	90 11		bcc $b6e0			bcc 	_LCCSRExit
.d6cf	b6cf	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6d1	b6d1	90 08		bcc $b6db			bcc 	_LCCSRSpace
.d6d3	b6d3	c9 61		cmp #$61			cmp 	#"a"
.d6d5	b6d5	90 09		bcc $b6e0			bcc 	_LCCSRExit
.d6d7	b6d7	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6d9	b6d9	b0 05		bcs $b6e0			bcs 	_LCCSRExit
.d6db	b6db					_LCCSRSpace:
.d6db	b6db	a9 20		lda #$20			lda 	#' '
.d6dd	b6dd	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d6e0	b6e0					_LCCSRExit:
.d6e0	b6e0	60		rts				rts
.d6e1	b6e1					LCLLowerCase:
.d6e1	b6e1	c9 41		cmp #$41			cmp 	#"A"
.d6e3	b6e3	90 06		bcc $b6eb			bcc 	_LCLLCOut
.d6e5	b6e5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6e7	b6e7	b0 02		bcs $b6eb			bcs 	_LCLLCOut
.d6e9	b6e9	69 20		adc #$20			adc 	#$20
.d6eb	b6eb					_LCLLCOut:
.d6eb	b6eb	60		rts				rts
.d6ec	b6ec					LCLUpperCase:
.d6ec	b6ec	c9 61		cmp #$61			cmp 	#"a"
.d6ee	b6ee	90 06		bcc $b6f6			bcc 	_LCLUCOut
.d6f0	b6f0	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6f2	b6f2	b0 02		bcs $b6f6			bcs 	_LCLUCOut
.d6f4	b6f4	e9 1f		sbc #$1f			sbc 	#$1F
.d6f6	b6f6					_LCLUCOut:
.d6f6	b6f6	60		rts				rts
.d6f7	b6f7					LCLWriteNumberXA:
.d6f7	b6f7	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6f9	b6f9					_LCLWNLoop1:
.d6f9	b6f9	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6fb	b6fb					_LCLWNLoop2:
.d6fb	b6fb	48		pha				pha 								; save initial LSB
.d6fc	b6fc	38		sec				sec
.d6fd	b6fd	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6ff	b6ff	f9 30 b7	sbc $b730,y			sbc 	_LCLWNTable,y
.d702	b702	48		pha				pha
.d703	b703	8a		txa				txa
.d704	b704	f9 31 b7	sbc $b731,y			sbc 	_LCLWNTable+1,y
.d707	b707	90 07		bcc $b710			bcc 	_LCLWNUnderflow
.d709	b709	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d70b	b70b	aa		tax				tax 								; update X
.d70c	b70c	68		pla				pla 								; restore A
.d70d	b70d	7a		ply				ply 								; throw original
.d70e	b70e	80 eb		bra $b6fb			bra 	_LCLWNLoop2 				; try again.
.d710	b710					_LCLWNUnderflow:
.d710	b710	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d712	b712	d0 06		bne $b71a			bne 	_LCLWNOut
.d714	b714	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d717	b717	3a		dec a				dec 	a
.d718	b718	f0 04		beq $b71e			beq 	_LCLWNNext
.d71a	b71a					_LCLWNOut:
.d71a	b71a	98		tya				tya
.d71b	b71b	20 2a b7	jsr $b72a			jsr 	_LCLWNOutDigit
.d71e	b71e					_LCLWNNext:
.d71e	b71e	7a		ply				ply 							 	; restore original value.
.d71f	b71f	68		pla				pla
.d720	b720	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d722	b722	c8		iny				iny
.d723	b723	c8		iny				iny
.d724	b724	84 37		sty $37				sty 	zTemp0+1
.d726	b726	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d728	b728	d0 cf		bne $b6f9			bne 	_LCLWNLoop1
.d72a	b72a					_LCLWNOutDigit:
.d72a	b72a	09 30		ora #$30			ora 	#'0'
.d72c	b72c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d72f	b72f	60		rts				rts
.d730	b730					_LCLWNTable:
>d730	b730	10 27						.word 	10000
>d732	b732	e8 03						.word 	1000
>d734	b734	64 00						.word 	100
>d736	b736	0a 00						.word 	10
.d738	b738					TOKSearchTable:
.d738	b738	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d73a	b73a	85 36		sta $36				sta 	zTemp0
.d73c	b73c	a0 00		ldy #$00			ldy 	#0
.d73e	b73e	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d740	b740	85 38		sta $38				sta 	zTemp1
.d742	b742					_TSTLoop:
.d742	b742	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d744	b744	30 49		bmi $b78f			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d746	b746	f0 2e		beq $b776			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d748	b748	c8		iny				iny 								; get the hash
.d749	b749	b1 36		lda ($36),y			lda 	(zTemp0),y
.d74b	b74b	88		dey				dey
.d74c	b74c	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d74f	b74f	d0 25		bne $b776			bne 	_TSTNext
.d751	b751	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d754	b754	38		sec				sec
.d755	b755	ed 00 04	sbc $0400			sbc 	identStart
.d758	b758	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d75a	b75a	d0 1a		bne $b776			bne 	_TSTNext
.d75c	b75c	5a		phy				phy 								; save Y , we might fail to match.
.d75d	b75d	c8		iny				iny 								; point to text
.d75e	b75e	c8		iny				iny
.d75f	b75f	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d762	b762					_TSTCompareName:
.d762	b762	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d765	b765	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d767	b767	d0 0c		bne $b775			bne 	_TSTNextPullY 				; fail, pullY and do next
.d769	b769	e8		inx				inx
.d76a	b76a	c8		iny				iny
.d76b	b76b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d76e	b76e	d0 f2		bne $b762			bne 	_TSTCompareName
.d770	b770	7a		ply				ply 								; throw Y
.d771	b771	a5 38		lda $38				lda 	zTemp1 						; get token #
.d773	b773	38		sec				sec 								; return with CS = passed.
.d774	b774	60		rts				rts
.d775	b775					_TSTNextPullY:
.d775	b775	7a		ply				ply 								; restore current, fall through.
.d776	b776					_TSTNext:
.d776	b776	e6 38		inc $38				inc 	zTemp1 						; token counter
.d778	b778	98		tya				tya
.d779	b779	18		clc				clc
.d77a	b77a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d77c	b77c	1a		inc a				inc 	a 							; +1
.d77d	b77d	1a		inc a				inc 	a 							; +2
.d77e	b77e	a8		tay				tay
.d77f	b77f	10 c1		bpl $b742			bpl 	_TSTLoop 					; if Y < $80 loop back
.d781	b781	98		tya				tya 								; add Y to zTemp0 and reset Y
.d782	b782	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d784	b784	18		clc				clc  								; but have tables > 255 bytes
.d785	b785	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d787	b787	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d789	b789	90 b7		bcc $b742			bcc 	_TSTLoop
.d78b	b78b	e6 37		inc $37				inc 	zTemp0+1
.d78d	b78d	80 b3		bra $b742			bra 	_TSTLoop
.d78f	b78f					_TSTFail:
.d78f	b78f	18		clc				clc
.d790	b790	60		rts				rts
.d791	b791					Export_TKTokeniseLine:
.d791	b791	20 5e b9	jsr $b95e			jsr 	LCLFixLineBufferCase 		; fix line case
.d794	b794	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d796	b796	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d799	b799	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d79c	b79c	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d79f	b79f	a2 ff		ldx #$ff			ldx 	#$FF
.d7a1	b7a1					_TKFindFirst:
.d7a1	b7a1	e8		inx				inx
.d7a2	b7a2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7a5	b7a5	f0 62		beq $b809			beq 	_TKExit
.d7a7	b7a7	c9 20		cmp #$20			cmp 	#' '
.d7a9	b7a9	90 f6		bcc $b7a1			bcc 	_TKFindFirst
.d7ab	b7ab	c9 30		cmp #$30			cmp 	#'0'
.d7ad	b7ad	90 07		bcc $b7b6			bcc 	_TKNoLineNumber
.d7af	b7af	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7b1	b7b1	b0 03		bcs $b7b6			bcs 	_TKNoLineNumber
.d7b3	b7b3	20 88 b9	jsr $b988			jsr 	TOKExtractLineNumber
.d7b6	b7b6					_TKNoLineNumber:
.d7b6	b7b6					_TKTokeniseLoop:
.d7b6	b7b6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7b9	b7b9	f0 4e		beq $b809			beq 	_TKExit
.d7bb	b7bb	e8		inx				inx
.d7bc	b7bc	c9 20		cmp #$20			cmp 	#' '
.d7be	b7be	f0 f6		beq $b7b6			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7c0	b7c0	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7c1	b7c1	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7c3	b7c3	f0 68		beq $b82d			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7c5	b7c5	c9 41		cmp #$41			cmp 	#'A'
.d7c7	b7c7	90 04		bcc $b7cd			bcc 	_TKTokenisePunctuation
.d7c9	b7c9	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7cb	b7cb	90 60		bcc $b82d			bcc 	_TKTokeniseIdentifier
.d7cd	b7cd					_TKTokenisePunctuation:
.d7cd	b7cd	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7cf	b7cf	f0 2e		beq $b7ff			beq 	_TKString
.d7d1	b7d1	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7d3	b7d3	f0 2f		beq $b804			beq 	_TKHexConstant
.d7d5	b7d5	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7d7	b7d7	f0 36		beq $b80f			beq 	_TKCheckDouble
.d7d9	b7d9	c9 3e		cmp #$3e			cmp 	#'>'
.d7db	b7db	f0 32		beq $b80f			beq 	_TKCheckDouble
.d7dd	b7dd					_TKStandardPunctuation:
.d7dd	b7dd	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7e0	b7e0	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7e2	b7e2	90 0e		bcc $b7f2			bcc 	_TKNoShift
.d7e4	b7e4	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7e5	b7e5	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7e7	b7e7	85 36		sta $36				sta 	zTemp0
.d7e9	b7e9	68		pla				pla
.d7ea	b7ea	29 20		and #$20			and 	#32 						; bit 5
.d7ec	b7ec	4a		lsr a				lsr 	a 							; shift into bit 3
.d7ed	b7ed	4a		lsr a				lsr 	a
.d7ee	b7ee	05 36		ora $36				ora 	zTemp0
.d7f0	b7f0	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7f2	b7f2					_TKNoShift:
.d7f2	b7f2	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; write the punctuation character
.d7f5	b7f5	e8		inx				inx 								; consume the character
.d7f6	b7f6	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d7f8	b7f8	d0 bc		bne $b7b6			bne 	_TKTokeniseLoop 			; and loop round again.
.d7fa	b7fa	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment 			; comment checl
.d7fd	b7fd	80 b7		bra $b7b6			bra 	_TKTokeniseLoop
.d7ff	b7ff					_TKString:
.d7ff	b7ff	20 ed b8	jsr $b8ed			jsr 	TOKTokenString
.d802	b802	80 b2		bra $b7b6			bra 	_TKTokeniseLoop
.d804	b804					_TKHexConstant:
.d804	b804	20 28 b9	jsr $b928			jsr 	TOKHexConstant
.d807	b807	80 ad		bra $b7b6			bra 	_TKTokeniseLoop
.d809	b809	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d80b	b80b	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d80e	b80e	60		rts				rts
.d80f	b80f					_TKCheckDouble:
.d80f	b80f	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d812	b812	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d814	b814	90 c7		bcc $b7dd			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d816	b816	c9 3f		cmp #$3f			cmp 	#'>'+1
.d818	b818	b0 c3		bcs $b7dd			bcs 	_TKStandardPunctuation
.d81a	b81a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d81d	b81d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d81f	b81f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d820	b820	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d823	b823	38		sec				sec
.d824	b824	e9 3c		sbc #$3c			sbc 	#'<'
.d826	b826	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; this is in the range 0-7
.d829	b829	e8		inx				inx 								; consume both
.d82a	b82a	e8		inx				inx
.d82b	b82b	80 89		bra $b7b6			bra 	_TKTokeniseLoop
.d82d	b82d					_TKTokeniseIdentifier:
.d82d	b82d	8e 00 04	stx $0400			stx 	identStart 					; save start
.d830	b830	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d833	b833					_TKCheckLoop:
.d833	b833	e8		inx				inx 								; look at next, we know first is identifier already.
.d834	b834	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d837	b837	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d839	b839	f0 f8		beq $b833			beq 	_TKCheckLoop
.d83b	b83b	c9 30		cmp #$30			cmp	 	#"0"
.d83d	b83d	90 0c		bcc $b84b			bcc 	_TKEndIdentifier
.d83f	b83f	c9 3a		cmp #$3a			cmp 	#"9"+1
.d841	b841	90 f0		bcc $b833			bcc 	_TKCheckLoop
.d843	b843	c9 41		cmp #$41			cmp	 	#"A"
.d845	b845	90 04		bcc $b84b			bcc 	_TKEndIdentifier
.d847	b847	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d849	b849	90 e8		bcc $b833			bcc 	_TKCheckLoop
.d84b	b84b					_TKEndIdentifier:
.d84b	b84b	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d84e	b84e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d850	b850	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d852	b852	f0 06		beq $b85a			beq 	_TKHasTypeCharacter
.d854	b854	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d856	b856	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d858	b858	d0 07		bne $b861			bne 	_TKNoTypeCharacter
.d85a	b85a					_TKHasTypeCharacter:
.d85a	b85a	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d85d	b85d	e8		inx				inx 								; consume the type character
.d85e	b85e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d861	b861					_TKNoTypeCharacter:
.d861	b861	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d863	b863	d0 09		bne $b86e			bne 	_TKNoArray
.d865	b865	e8		inx				inx 								; skip the (
.d866	b866	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d869	b869	09 04		ora #$04			ora 	#$04
.d86b	b86b	8d 04 04	sta $0404			sta 	identTypeByte
.d86e	b86e					_TKNoArray:
.d86e	b86e	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d871	b871	20 49 b9	jsr $b949			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d874	b874	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d876	b876	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d878	b878	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d87b	b87b	a2 00		ldx #$00			ldx 	#0
.d87d	b87d	b0 1f		bcs $b89e			bcs 	_TKFoundToken
.d87f	b87f	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d881	b881	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.d883	b883	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d886	b886	a2 81		ldx #$81			ldx 	#$81
.d888	b888	b0 14		bcs $b89e			bcs 	_TKFoundToken
.d88a	b88a	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d88c	b88c	a9 b1		lda #$b1			lda 	#(KeywordSet2) & $FF
.d88e	b88e	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d891	b891	a2 82		ldx #$82			ldx 	#$82
.d893	b893	b0 09		bcs $b89e			bcs 	_TKFoundToken
.d895	b895	20 d9 b9	jsr $b9d9			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d898	b898	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d89b	b89b	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d89e	b89e					_TKFoundToken:
.d89e	b89e	48		pha				pha 								; save token
.d89f	b89f	8a		txa				txa 								; shift in X, is there one ?
.d8a0	b8a0	f0 03		beq $b8a5			beq 	_TKNoTShift
.d8a2	b8a2	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; if so, write it out
.d8a5	b8a5					_TKNoTShift:
.d8a5	b8a5	68		pla				pla 								; restore and write token
.d8a6	b8a6	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d8a9	b8a9	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8ab	b8ab	d0 0d		bne $b8ba			bne 	_TKNotRem 			 		; not shifted ?
.d8ad	b8ad	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d8af	b8af	d0 09		bne $b8ba			bne 	_TKNotRem
.d8b1	b8b1	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8b4	b8b4	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment
.d8b7	b8b7	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop
.d8ba	b8ba					_TKNotRem:
.d8ba	b8ba	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8bd	b8bd	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d8c0	b8c0					TOKCheckComment:
.d8c0	b8c0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8c3	b8c3	e8		inx				inx
.d8c4	b8c4	c9 20		cmp #$20			cmp 	#' '
.d8c6	b8c6	f0 f8		beq $b8c0			beq 	TOKCheckComment
.d8c8	b8c8	ca		dex				dex 								; first non space character
.d8c9	b8c9	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8cb	b8cb	f0 1f		beq $b8ec			beq 	_TOKCCExit 					; then we are okay
.d8cd	b8cd	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8cf	b8cf	f0 1b		beq $b8ec			beq 	_TOKCCExit 					; then we are okay
.d8d1	b8d1	da		phx				phx
.d8d2	b8d2					_TOKCCLowerCase:
.d8d2	b8d2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8d5	b8d5	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d8d7	b8d7	90 09		bcc $b8e2			bcc 	_TOKKCNotUC
.d8d9	b8d9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8db	b8db	b0 05		bcs $b8e2			bcs 	_TOKKCNotUC
.d8dd	b8dd	49 20		eor #$20			eor 	#$20
.d8df	b8df	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d8e2	b8e2					_TOKKCNotUC:
.d8e2	b8e2	e8		inx				inx
.d8e3	b8e3	c9 00		cmp #$00			cmp 	#0
.d8e5	b8e5	d0 eb		bne $b8d2			bne 	_TOKCCLowerCase
.d8e7	b8e7	fa		plx				plx
.d8e8	b8e8	ca		dex				dex 								; tokenise string expects initial skip.
.d8e9	b8e9	20 ed b8	jsr $b8ed			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d8ec	b8ec					_TOKCCExit:
.d8ec	b8ec	60		rts				rts
.d8ed	b8ed					TOKTokenString:
.d8ed	b8ed	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8ef	b8ef	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d8f2	b8f2	e8		inx				inx									; start of quoted string.
.d8f3	b8f3	da		phx				phx 								; push start of string on top
.d8f4	b8f4	ca		dex				dex 								; because we pre-increment
.d8f5	b8f5					_TSFindEnd:
.d8f5	b8f5	e8		inx				inx
.d8f6	b8f6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8f9	b8f9	f0 04		beq $b8ff			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8fb	b8fb	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8fd	b8fd	d0 f6		bne $b8f5			bne 	_TSFindEnd
.d8ff	b8ff					_TSEndOfString:
.d8ff	b8ff	7a		ply				ply  								; so now Y is first character, X is character after end.
.d900	b900	48		pha				pha 								; save terminating character
.d901	b901	20 09 b9	jsr $b909			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d904	b904	68		pla				pla 								; terminating character
.d905	b905	f0 01		beq $b908			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d907	b907	e8		inx				inx
.d908	b908					_TSNotQuote:
.d908	b908	60		rts				rts
.d909	b909					TOKWriteBlockXY:
.d909	b909	86 36		stx $36				stx 	zTemp0 						; save end character
.d90b	b90b	98		tya				tya 								; use 2's complement to work out the byte size
.d90c	b90c	49 ff		eor #$ff			eor 	#$FF
.d90e	b90e	38		sec				sec
.d90f	b90f	65 36		adc $36				adc 	zTemp0
.d911	b911	1a		inc a				inc 	a 							; one extra for NULL
.d912	b912	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d915	b915					_TOBlockLoop:
.d915	b915	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d917	b917	f0 09		beq $b922			beq 	_TOBlockExit
.d919	b919	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d91c	b91c	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d91f	b91f	c8		iny				iny
.d920	b920	80 f3		bra $b915			bra 	_TOBlockLoop
.d922	b922					_TOBlockExit:
.d922	b922	a9 00		lda #$00			lda 	#0 							; add NULL.
.d924	b924	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d927	b927	60		rts				rts
.d928	b928					TOKHexConstant:
.d928	b928	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d92a	b92a	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d92d	b92d	e8		inx				inx									; start of quoted string.
.d92e	b92e	da		phx				phx 								; push start of constant on top
.d92f	b92f	ca		dex				dex
.d930	b930					_THFindLoop:
.d930	b930	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d931	b931	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d934	b934	c9 30		cmp #$30			cmp 	#"0"
.d936	b936	90 0c		bcc $b944			bcc 	_THFoundEnd
.d938	b938	c9 3a		cmp #$3a			cmp 	#"9"+1
.d93a	b93a	90 f4		bcc $b930			bcc 	_THFindLoop
.d93c	b93c	c9 41		cmp #$41			cmp 	#"A"
.d93e	b93e	90 04		bcc $b944			bcc 	_THFoundEnd
.d940	b940	c9 47		cmp #$47			cmp 	#"F"+1
.d942	b942	90 ec		bcc $b930			bcc 	_THFindLoop
.d944	b944					_THFoundEnd:
.d944	b944	7a		ply				ply 								; restore start
.d945	b945	20 09 b9	jsr $b909			jsr 	TOKWriteBlockXY 			; output the block
.d948	b948	60		rts				rts
.d949	b949					TOKCalculateHash:
.d949	b949	da		phx				phx
.d94a	b94a	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d94d	b94d	a9 00		lda #$00			lda 	#0
.d94f	b94f					_TCHLoop:
.d94f	b94f	18		clc				clc
.d950	b950	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d953	b953	e8		inx				inx
.d954	b954	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d957	b957	d0 f6		bne $b94f			bne 	_TCHLoop
.d959	b959	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d95c	b95c	fa		plx				plx
.d95d	b95d	60		rts				rts
.d95e	b95e					LCLFixLineBufferCase:
.d95e	b95e	a2 00		ldx #$00			ldx 	#0
.d960	b960					_FLBCLoop:
.d960	b960	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d963	b963	f0 22		beq $b987			beq 	_FLBCExit 					; end of string.
.d965	b965	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d967	b967	f0 11		beq $b97a			beq 	_FLBCInQuotes
.d969	b969	e8		inx				inx
.d96a	b96a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d96c	b96c	90 f2		bcc $b960			bcc 	_FLBCLoop
.d96e	b96e	c9 7b		cmp #$7b			cmp 	#'z'+1
.d970	b970	b0 ee		bcs $b960			bcs 	_FLBCLoop
.d972	b972	38		sec				sec 								; make U/C
.d973	b973	e9 20		sbc #$20			sbc 	#32
.d975	b975	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d978	b978	80 e6		bra $b960			bra 	_FLBCLoop
.d97a	b97a					_FLBCInQuotes:
.d97a	b97a	e8		inx				inx 								; advance
.d97b	b97b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d97e	b97e	f0 07		beq $b987			beq 	_FLBCExit 					; exit on EOS
.d980	b980	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d982	b982	d0 f6		bne $b97a			bne 	_FLBCInQuotes
.d984	b984	e8		inx				inx 								; skip over it
.d985	b985	80 d9		bra $b960			bra 	_FLBCLoop
.d987	b987					_FLBCExit:
.d987	b987	60		rts				rts
.d988	b988					TOKExtractLineNumber:
.d988	b988	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d98b	b98b	48		pha				pha
.d98c	b98c	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d98f	b98f	48		pha				pha
.d990	b990	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 2
.d993	b993	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 4
.d996	b996	18		clc				clc 								; add stacked value
.d997	b997	68		pla				pla
.d998	b998	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d99b	b99b	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d99e	b99e	68		pla				pla
.d99f	b99f	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9a2	b9a2	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9a5	b9a5	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 10
.d9a8	b9a8	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9ab	b9ab	e8		inx				inx
.d9ac	b9ac	29 0f		and #$0f			and 	#15 						; add to line #
.d9ae	b9ae	18		clc				clc
.d9af	b9af	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9b2	b9b2	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9b5	b9b5	90 03		bcc $b9ba			bcc 	_TLENNoCarry
.d9b7	b9b7	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ba	b9ba					_TLENNoCarry:
.d9ba	b9ba	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9bd	b9bd	c9 30		cmp #$30			cmp 	#'0'
.d9bf	b9bf	90 04		bcc $b9c5			bcc 	_TLENExit
.d9c1	b9c1	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9c3	b9c3	90 c3		bcc $b988			bcc 	TOKExtractLineNumber
.d9c5	b9c5					_TLENExit:
.d9c5	b9c5	60		rts				rts
.d9c6	b9c6					_LCLNTimes2:
.d9c6	b9c6	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9c9	b9c9	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9cc	b9cc	60		rts				rts
.d9cd	b9cd					TOKWriteByte:
.d9cd	b9cd	da		phx				phx
.d9ce	b9ce	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9d1	b9d1	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9d4	b9d4	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9d7	b9d7	fa		plx				plx
.d9d8	b9d8	60		rts				rts
.d9d9	b9d9					TOKCheckCreateVariableRecord:
.d9d9	b9d9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9db	b9db	85 36		sta $36				sta 	0+zTemp0
.d9dd	b9dd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9df	b9df	85 37		sta $37				sta 	1+zTemp0
.d9e1	b9e1					_CCVSearch:
.d9e1	b9e1	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9e3	b9e3	f0 2c		beq $ba11			beq 	_CCVFail
.d9e5	b9e5	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9e7	b9e7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9e9	b9e9	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9ec	b9ec	d0 16		bne $ba04			bne 	_CCVNext
.d9ee	b9ee	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9f0	b9f0	ae 00 04	ldx $0400			ldx 	identStart
.d9f3	b9f3					_CCVCompare:
.d9f3	b9f3	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9f6	b9f6	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9f8	b9f8	e8		inx				inx 								; advance pointers
.d9f9	b9f9	c8		iny				iny
.d9fa	b9fa	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9fb	b9fb	d0 07		bne $ba04			bne 	_CCVNext  					; didn't match go to next.
.d9fd	b9fd	90 f4		bcc $b9f3			bcc 	_CCVCompare 				; not finished yet.
.d9ff	b9ff	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da02	ba02	f0 41		beq $ba45			beq 	_CCVFound 					; yes, we were successful
.da04	ba04					_CCVNext:
.da04	ba04	18		clc				clc 								; go to next record.
.da05	ba05	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da07	ba07	65 36		adc $36				adc 	zTemp0
.da09	ba09	85 36		sta $36				sta 	zTemp0
.da0b	ba0b	90 d4		bcc $b9e1			bcc 	_CCVSearch
.da0d	ba0d	e6 37		inc $37				inc 	zTemp0+1
.da0f	ba0f	80 d0		bra $b9e1			bra 	_CCVSearch
.da11	ba11					_CCVFail:
.da11	ba11	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da13	ba13	ad 03 04	lda $0403			lda 	identHash
.da16	ba16	91 36		sta ($36),y			sta 	(zTemp0),y
.da18	ba18	c8		iny				iny 								; offset 2 is the type byte
.da19	ba19	ad 04 04	lda $0404			lda 	identTypeByte
.da1c	ba1c	91 36		sta ($36),y			sta 	(zTemp0),y
.da1e	ba1e	c8		iny				iny
.da1f	ba1f					_CCVData:
.da1f	ba1f	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da21	ba21	91 36		sta ($36),y			sta 	(zTemp0),y
.da23	ba23	c8		iny				iny
.da24	ba24	c0 08		cpy #$08			cpy 	#8
.da26	ba26	90 f7		bcc $ba1f			bcc 	_CCVData
.da28	ba28	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da2b	ba2b					_CCVCopyName:
.da2b	ba2b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da2e	ba2e	91 36		sta ($36),y			sta 	(zTemp0),y
.da30	ba30	e8		inx				inx
.da31	ba31	c8		iny				iny
.da32	ba32	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da35	ba35	d0 f4		bne $ba2b			bne 	_CCVCopyName
.da37	ba37	98		tya				tya 								; patch offset
.da38	ba38	92 36		sta ($36)			sta 	(zTemp0)
.da3a	ba3a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da3c	ba3c	91 36		sta ($36),y			sta 	(zTemp0),y
.da3e	ba3e	88		dey				dey
.da3f	ba3f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da41	ba41	09 80		ora #$80			ora 	#$80
.da43	ba43	91 36		sta ($36),y			sta 	(zTemp0),y
.da45	ba45					_CCVFound:
.da45	ba45	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da47	ba47	38		sec				sec
.da48	ba48	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da4a	ba4a	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da4c	ba4c	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.da4f	ba4f	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da51	ba51	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.da54	ba54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da55	ba55					SNDCheckChannel:
.da55	ba55	aa		tax				tax
.da56	ba56	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da59	ba59	d0 38		bne $ba93			bne 	_SNDCCExit
.da5b	ba5b	da		phx				phx 								; save current channel
.da5c	ba5c	8a		txa				txa 								; put in A
.da5d	ba5d	20 d9 ba	jsr $bad9			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da60	ba60	68		pla				pla 								; channel # in A
.da61	ba61	90 30		bcc $ba93			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da63	ba63	a8		tay				tay 								; Y is the channel #
.da64	ba64	bd 2d 07	lda $072d,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da67	ba67	99 2c 08	sta $082c,y			sta 	SNDPitchLow,y
.da6a	ba6a	bd 2e 07	lda $072e,x			lda 	SNDQueue+2,x
.da6d	ba6d	99 30 08	sta $0830,y			sta 	SNDPitchHigh,y
.da70	ba70	bd 2f 07	lda $072f,x			lda 	SNDQueue+3,x
.da73	ba73	99 34 08	sta $0834,y			sta 	SNDVolume,y
.da76	ba76	bd 30 07	lda $0730,x			lda 	SNDQueue+4,x
.da79	ba79	99 38 08	sta $0838,y			sta 	SNDTimeLeft,y
.da7c	ba7c	bd 31 07	lda $0731,x			lda 	SNDQueue+5,x
.da7f	ba7f	99 3c 08	sta $083c,y			sta 	SNDAdjustLow,y
.da82	ba82	bd 32 07	lda $0732,x			lda 	SNDQueue+6,x
.da85	ba85	99 40 08	sta $0840,y			sta 	SNDAdjustHigh,y
.da88	ba88	5a		phy				phy 								; save channel #
.da89	ba89	20 f3 ba	jsr $baf3			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da8c	ba8c	ce 2b 07	dec $072b			dec 	SNDLength 					; reduce the queue length.
.da8f	ba8f	68		pla				pla
.da90	ba90	20 94 ba	jsr $ba94			jsr 	SNDUpdateNote 				; update channel A
.da93	ba93					_SNDCCExit:
.da93	ba93	60		rts				rts
.da94	ba94					SNDUpdateNote:
.da94	ba94	aa		tax				tax 								; so we can access records
.da95	ba95	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da96	ba96	0a		asl a				asl 	a
.da97	ba97	0a		asl a				asl 	a
.da98	ba98	0a		asl a				asl 	a
.da99	ba99	0a		asl a				asl 	a
.da9a	ba9a	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da9d	ba9d	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; are we silent
.daa0	baa0	f0 2e		beq $bad0			beq 	_SNDUNIsSilent
.daa2	baa2	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; push channel bits on stack
.daa5	baa5	48		pha				pha
.daa6	baa6	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.daa9	baa9	29 0f		and #$0f			and 	#$0F
.daab	baab	0d 2a 07	ora $072a			ora 	SNDChannelBits 				; set channel bits
.daae	baae	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dab0	bab0	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.dab3	bab3	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.dab6	bab6	8d 2a 07	sta $072a			sta 	SNDChannelBits
.dab9	bab9	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.dabc	babc	4e 2a 07	lsr $072a			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dabf	babf	6a		ror a				ror 	a
.dac0	bac0	4e 2a 07	lsr $072a			lsr 	SNDChannelBits
.dac3	bac3	6a		ror a				ror 	a
.dac4	bac4	4a		lsr a				lsr 	a 							; put in bits 0-5
.dac5	bac5	4a		lsr a				lsr 	a
.dac6	bac6	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts 				; write as rest of pitch register
.dac9	bac9	68		pla				pla
.daca	baca	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.dacc	bacc	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.dacf	bacf	60		rts				rts
.dad0	bad0					_SNDUNIsSilent:
.dad0	bad0	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; channel bits
.dad3	bad3	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dad5	bad5	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts 				; write to the ports
.dad8	bad8	60		rts				rts
.dad9	bad9					SNDFindNextNoteForA:
.dad9	bad9	ac 2b 07	ldy $072b			ldy 	SNDLength 					; queue size into Y
.dadc	badc	f0 13		beq $baf1			beq 	_SNDFNNFail 				; queue empty.
.dade	bade	a2 00		ldx #$00			ldx 	#0
.dae0	bae0					_SNDFNNSearch:
.dae0	bae0	dd 2c 07	cmp $072c,x			cmp 	SNDQueue,x 					; does it match the channel
.dae3	bae3	38		sec				sec
.dae4	bae4	f0 0c		beq $baf2			beq 	_SNDFNNExit 				; if so exit with CS.
.dae6	bae6	e8		inx				inx 								; next queue slot.
.dae7	bae7	e8		inx				inx
.dae8	bae8	e8		inx				inx
.dae9	bae9	e8		inx				inx
.daea	baea	e8		inx				inx
.daeb	baeb	e8		inx				inx
.daec	baec	e8		inx				inx
.daed	baed	e8		inx				inx
.daee	baee	88		dey				dey 								; done the whole queue
.daef	baef	d0 ef		bne $bae0			bne 	_SNDFNNSearch 				; no, go back.
.daf1	baf1					_SNDFNNFail:
.daf1	baf1	18		clc				clc
.daf2	baf2					_SNDFNNExit:
.daf2	baf2	60		rts				rts
.daf3	baf3					SNDDeleteXFromQueue:
.daf3	baf3	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.daf5	baf5	f0 09		beq $bb00			beq 	_SNDDXExit
.daf7	baf7	bd 34 07	lda $0734,x			lda 	SNDQueue+8,x
.dafa	bafa	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.dafd	bafd	e8		inx				inx
.dafe	bafe	80 f3		bra $baf3			bra 	SNDDeleteXFromQueue
.db00	bb00					_SNDDXExit:
.db00	bb00	60		rts				rts
.072a						SNDChannelBits:
>072a								.fill 	1
.db01	bb01					SNDQueueRequest:
.db01	bb01	86 36		stx $36				stx 	zTemp0						; save queue address
.db03	bb03	84 37		sty $37				sty 	zTemp0+1
.db05	bb05	ae 2b 07	ldx $072b			ldx 	SNDLength 					; queue is full, can't take any more.
.db08	bb08	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db0a	bb0a	f0 21		beq $bb2d			beq 	_SNDQRExit
.db0c	bb0c	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db0e	bb0e	48		pha				pha
.db0f	bb0f	8a		txa				txa  								; get offset in queue buffer/
.db10	bb10	0a		asl a				asl 	a
.db11	bb11	0a		asl a				asl 	a
.db12	bb12	0a		asl a				asl 	a
.db13	bb13	aa		tax				tax
.db14	bb14	68		pla				pla 								; get back and push again
.db15	bb15	48		pha				pha
.db16	bb16	9d 2c 07	sta $072c,x			sta 	SNDQueue+0,x 				; save the channel #
.db19	bb19	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db1b	bb1b					_SNDQCopy:
.db1b	bb1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	c8		iny				iny
.db1f	bb1f	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.db22	bb22	c0 06		cpy #$06			cpy 	#6
.db24	bb24	d0 f5		bne $bb1b			bne 	_SNDQCopy
.db26	bb26	ee 2b 07	inc $072b			inc 	SNDLength 					; bump queue length.
.db29	bb29	68		pla				pla 								; get channel # back
.db2a	bb2a	20 55 ba	jsr $ba55			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db2d	bb2d					_SNDQRExit:
.db2d	bb2d	60		rts				rts
.db2e	bb2e					SNDSilenceChannel:
.db2e	bb2e	aa		tax				tax 								; zero time left.
.db2f	bb2f	9e 38 08	stz $0838,x			stz 	SNDTimeLeft,x
.db32	bb32	0a		asl a				asl 	a 							; shift into position
.db33	bb33	0a		asl a				asl 	a
.db34	bb34	0a		asl a				asl 	a
.db35	bb35	0a		asl a				asl 	a
.db36	bb36	0a		asl a				asl 	a
.db37	bb37	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db39	bb39	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.db3c	bb3c	60		rts				rts
.db3d	bb3d					SNDWritePorts:
.db3d	bb3d	da		phx				phx 								; save X
.db3e	bb3e	a6 01		ldx $01				ldx 	1 							; save I/O status
.db40	bb40	64 01		stz $01				stz 	1 							; access I/O page 0
.db42	bb42	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db45	bb45	8d 10 d6	sta $d610			sta 	$D610
.db48	bb48	86 01		stx $01				stx 	1 							; restore I/O
.db4a	bb4a	fa		plx				plx 								; restore X
.db4b	bb4b	60		rts				rts
.db4c	bb4c					Export_SNDCommand:
.db4c	bb4c	da		phx				phx 								; save XY
.db4d	bb4d	5a		phy				phy
.db4e	bb4e	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db50	bb50	f0 1d		beq $bb6f			beq 	_SNDInitialise
.db52	bb52	90 28		bcc $bb7c			bcc 	_SNDExit
.db54	bb54	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db56	bb56	f0 17		beq $bb6f			beq 	_SNDSilence
.db58	bb58	b0 22		bcs $bb7c			bcs 	_SNDExit
.db5a	bb5a	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db5c	bb5c	b0 09		bcs $bb67			bcs 	_SNDQueryPlay
.db5e	bb5e	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db60	bb60	b0 1a		bcs $bb7c			bcs 	_SNDExit
.db62	bb62	20 01 bb	jsr $bb01			jsr 	SNDQueueRequest
.db65	bb65	80 15		bra $bb7c			bra 	_SNDExit
.db67	bb67					_SNDQueryPlay:
.db67	bb67	29 03		and #$03			and 	#3 							; get channel #
.db69	bb69	aa		tax				tax
.db6a	bb6a	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db6d	bb6d	80 0d		bra $bb7c			bra 	_SNDExit
.db6f	bb6f					_SNDInitialise:
.db6f	bb6f					_SNDSilence:
.db6f	bb6f	9c 2b 07	stz $072b			stz 	SNDLength 					; empty the queue.
.db72	bb72	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db74	bb74					_SNDSilenceLoop:
.db74	bb74	48		pha				pha
.db75	bb75	20 2e bb	jsr $bb2e			jsr 	SNDSilenceChannel
.db78	bb78	68		pla				pla
.db79	bb79	3a		dec a				dec 	a
.db7a	bb7a	10 f8		bpl $bb74			bpl 	_SNDSilenceLoop
.db7c	bb7c					_SNDExit:
.db7c	bb7c	7a		ply				ply
.db7d	bb7d	fa		plx				plx
.db7e	bb7e	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072b						SNDLength:
>072b								.fill 	1
.072c						SNDQueue:
>072c								.fill 	SNDQueueSize * 8
.082c						SNDPitchLow:
>082c								.fill 	4
.0830						SNDPitchHigh:
>0830								.fill 	4
.0834						SNDVolume:
>0834								.fill 	4
.0838						SNDTimeLeft:
>0838								.fill 	4
.083c						SNDAdjustLow:
>083c								.fill 	4
.0840						SNDAdjustHigh:
>0840								.fill 	4
.db7f	bb7f					Export_SNDUpdate:
.db7f	bb7f					PagedSNDUpdate:
.db7f	bb7f	ad 38 08	lda $0838			lda 	SNDTimeLeft+0 				; look at time remaining
.db82	bb82	f0 05		beq $bb89			beq 	_SNDUNot0 					; not playing
.db84	bb84	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db86	bb86	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel 			; update it.
.db89	bb89					_SNDUNot0:
.db89	bb89	ad 39 08	lda $0839			lda 	SNDTimeLeft+1
.db8c	bb8c	f0 05		beq $bb93			beq 	_SNDUNot1
.db8e	bb8e	a2 01		ldx #$01			ldx 	#1
.db90	bb90	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.db93	bb93					_SNDUNot1:
.db93	bb93	ad 3a 08	lda $083a			lda 	SNDTimeLeft+2
.db96	bb96	f0 05		beq $bb9d			beq 	_SNDUNot2
.db98	bb98	a2 02		ldx #$02			ldx 	#2
.db9a	bb9a	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.db9d	bb9d					_SNDUNot2:
.db9d	bb9d	ad 3b 08	lda $083b			lda 	SNDTimeLeft+3
.dba0	bba0	f0 05		beq $bba7			beq 	_SNDUNot3
.dba2	bba2	a2 03		ldx #$03			ldx 	#3
.dba4	bba4	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.dba7	bba7					_SNDUNot3:
.dba7	bba7	60		rts				rts
.dba8	bba8					SNDUpdateChannel:
.dba8	bba8	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbaa	bbaa	f0 2c		beq $bbd8			beq 	_SNDUCExit
.dbac	bbac	3a		dec a				dec 	a 							; decrement and update timer
.dbad	bbad	9d 38 08	sta $0838,x			sta 	SNDTimeLeft,x
.dbb0	bbb0	f0 1d		beq $bbcf			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbb2	bbb2	bd 3c 08	lda $083c,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbb5	bbb5	1d 40 08	ora $0840,x			ora 	SNDAdjustHigh,x
.dbb8	bbb8	f0 1e		beq $bbd8			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbba	bbba	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbbb	bbbb	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.dbbe	bbbe	7d 3c 08	adc $083c,x			adc 	SNDAdjustLow,x
.dbc1	bbc1	9d 2c 08	sta $082c,x			sta 	SNDPitchLow,x
.dbc4	bbc4	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x
.dbc7	bbc7	7d 40 08	adc $0840,x			adc 	SNDAdjustHigh,x
.dbca	bbca	29 03		and #$03			and 	#3
.dbcc	bbcc	9d 30 08	sta $0830,x			sta 	SNDPitchHigh,x
.dbcf	bbcf					_SNDUCUpdate:
.dbcf	bbcf	8a		txa				txa 								; which channel.
.dbd0	bbd0	48		pha				pha
.dbd1	bbd1	20 94 ba	jsr $ba94			jsr 	SNDUpdateNote 				; update the current note
.dbd4	bbd4	68		pla				pla
.dbd5	bbd5	20 55 ba	jsr $ba55			jsr 	SNDCheckChannel 			; more to do ?
.dbd8	bbd8					_SNDUCExit:
.dbd8	bbd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dbd9	bbd9					Export_KNLInputSingleCharacter:
.dbd9	bbd9					PagedInputSingleCharacter:
.dbd9	bbd9	da		phx				phx
.dbda	bbda	5a		phy				phy
.dbdb	bbdb					_EISCWait:
.dbdb	bbdb	a5 01		lda $01				lda 	1 							; save I/O 0
.dbdd	bbdd	48		pha				pha
.dbde	bbde	64 01		stz $01				stz 	1 							; access I/O Page 0
.dbe0	bbe0	38		sec				sec 								; calculate timer - LastTick
.dbe1	bbe1	ad 59 d6	lda $d659			lda 	$D659
.dbe4	bbe4	aa		tax				tax 								; saving timer in X
.dbe5	bbe5	ed 5c 06	sbc $065c			sbc 	LastTick
.dbe8	bbe8	c9 03		cmp #$03			cmp 	#3
.dbea	bbea	90 06		bcc $bbf2			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dbec	bbec	8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.dbef	bbef	20 7f bb	jsr $bb7f			jsr 	PagedSNDUpdate 							; go do the code.
.dbf2	bbf2					_NoFireTick:
.dbf2	bbf2	68		pla				pla 								; restore I/O 0
.dbf3	bbf3	85 01		sta $01				sta 	1
.dbf5	bbf5	20 ff bb	jsr $bbff			jsr 	CheckKeyPressed
.dbf8	bbf8	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dbfa	bbfa	f0 df		beq $bbdb			beq 	_EISCWait
.dbfc	bbfc	7a		ply				ply
.dbfd	bbfd	fa		plx				plx
.dbfe	bbfe	60		rts				rts
.dbff	bbff					Export_KNLInkey:
.dbff	bbff					CheckKeyPressed:
.dbff	bbff	a9 44		lda #$44			lda     #<event 					; tell kernel where events go.
.dc01	bc01	85 f0		sta $f0				sta     kernel.args.events+0
.dc03	bc03	a9 08		lda #$08			lda     #>event
.dc05	bc05	85 f1		sta $f1				sta     kernel.args.events+1
.dc07	bc07	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc0a	bc0a	b0 0b		bcs $bc17			bcs 	_CKPNoEvent 				; no event
.dc0c	bc0c	ad 44 08	lda $0844			lda     event.type
.dc0f	bc0f	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc11	bc11	d0 04		bne $bc17			bne 	_CKPNoEvent
.dc13	bc13	ad 49 08	lda $0849			lda     event.key.ascii
.dc16	bc16	60		rts				rts
.dc17	bc17					_CKPNoEvent:
.dc17	bc17	a9 00		lda #$00			lda 	#0
.dc19	bc19	60		rts				rts
.dc1a	bc1a					Export_EXTBreakCheck:
.dc1a	bc1a	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc1d	bc1d					Export_EXTReadController:
.dc1d	bc1d	da		phx				phx
.dc1e	bc1e	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc20	bc20	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc22	bc22	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc25	bc25	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc27	bc27	fa		plx				plx
.dc28	bc28	60		rts				rts
.0844						event
>0844						type        .byte   ?   ; Enum above
>0845						buf         .byte   ?   ; page id or zero
>0846						ext         .byte   ?   ; page id or zero
.0847						key
>0847						keyboard    .byte   ?   ; Keyboard ID
>0848						raw         .byte   ?   ; Raw key ID
>0849						ascii       .byte   ?   ; ASCII value
>084a						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0847						mouse
.0847						delta
>0847						x           .byte   ?
>0848						y           .byte   ?
>0849						z           .byte   ?
>084a						buttons     .byte   ?
.0847						clicks
>0847						inner       .byte   ?
>0848						middle      .byte   ?
>0849						outer       .byte   ?
.0847						udp
>0847						token       .byte   ?   ; TODO: break out into fields
.0847						file
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						data
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						read        .byte   ?   ; Number of bytes actually read
.0849						wrote
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						wrote       .byte   ?   ; Number of bytes actually read
.0847						directory
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						volume
>0849						len         .byte   ?   ; Length of volname (in buf)
>084a						flags       .byte   ?   ; block size, text encoding
.0849						file
>0849						len         .byte   ?
>084a						flags       .byte   ?   ; block scale, text encoding, approx size
.0849						free
>0849						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc29	bc29					Export_KNLOpenFileRead:
.dc29	bc29	48		pha				pha
.dc2a	bc2a	a9 00		lda #$00	        lda     #kernel.args.file.open.READ ; set READ mode.
.dc2c	bc2c	85 f5		sta $f5		        sta     kernel.args.file.open.mode
.dc2e	bc2e	68		pla		        pla
.dc2f	bc2f	20 4b bc	jsr $bc4b			jsr 	KNLSetupFileName
.dc32	bc32	a9 44		lda #$44	        lda     #event & $FF 				; tell kernel where to store event data
.dc34	bc34	85 f0		sta $f0		        sta     kernel.args.events+0
.dc36	bc36	a9 08		lda #$08	        lda     #event >> 8
.dc38	bc38	85 f1		sta $f1		        sta     kernel.args.events+1
.dc3a	bc3a	a9 00		lda #$00			lda 	#0 							; currently drive zero only.
.dc3c	bc3c	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc3e	bc3e	20 5c ff	jsr $ff5c	        jsr     kernel.File.Open 			; open the file and exit.
.dc41	bc41	60		rts		        rts
.dc42	bc42					Export_KNLCloseFile:
.dc42	bc42	ad 47 08	lda $0847			lda     event.file.stream 			; close the stream
.dc45	bc45	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc47	bc47	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					KNLSetupFileName:
.dc4b	bc4b	5a		phy				phy 								; save Y on stack
.dc4c	bc4c	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dc4e	bc4e	86 37		stx $37				stx 	zTemp0+1
.dc50	bc50	85 fb		sta $fb		        sta     kernel.args.file.open.fname+0
.dc52	bc52	86 fc		stx $fc		        stx     kernel.args.file.open.fname+1
.dc54	bc54	a0 ff		ldy #$ff	        ldy 	#$FF 						; get the filename length => Kernel slot
.dc56	bc56					_KNLGetLength:
.dc56	bc56	c8		iny				iny
.dc57	bc57	b1 36		lda ($36),y			lda 	(zTemp0),y
.dc59	bc59	d0 fb		bne $bc56			bne 	_KNLGetLength
.dc5b	bc5b	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dc5d	bc5d	7a		ply				ply
.dc5e	bc5e	60		rts				rts
.dc5f	bc5f					Export_KNLReadByte:
.dc5f	bc5f					EventLoop:
.dc5f	bc5f	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc62	bc62	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc65	bc65	b0 f8		bcs $bc5f			bcs     EventLoop
.dc67	bc67	ad 44 08	lda $0844			lda 	event.type 					; get event
.dc6a	bc6a	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc6c	bc6c	f0 33		beq $bca1			beq 	_KNLRBFail
.dc6e	bc6e	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dc70	bc70	f0 2f		beq $bca1			beq     _KNLRBFail
.dc72	bc72	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc74	bc74	f0 2b		beq $bca1			beq 	_KNLRBFail
.dc76	bc76	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dc78	bc78	f0 27		beq $bca1			beq 	_KNLRBFail
.dc7a	bc7a	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED 	; opened, do first read
.dc7c	bc7c	f0 06		beq $bc84			beq     _KNLRBRequestData
.dc7e	bc7e	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dc80	bc80	f0 07		beq $bc89			beq     _KNLRBAcquireData
.dc82	bc82	80 db		bra $bc5f			bra 	EventLoop
.dc84	bc84					_KNLRBRequestData:
.dc84	bc84	20 a3 bc	jsr $bca3			jsr 	KNLRequestNextByte
.dc87	bc87	80 d6		bra $bc5f			bra 	EventLoop
.dc89	bc89					_KNLRBAcquireData:
.dc89	bc89	a9 01		lda #$01			lda 	#1 							; want a single character
.dc8b	bc8b	85 fd		sta $fd		        sta     kernel.args.recv.buflen
.dc8d	bc8d	a9 36		lda #$36	        lda     #zTemp0 & $FF 				; read it to zTemp0
.dc8f	bc8f	85 fb		sta $fb		        sta     kernel.args.recv.buf+0
.dc91	bc91	a9 00		lda #$00	        lda     #zTemp0 >> 8
.dc93	bc93	85 fc		sta $fc		        sta     kernel.args.recv.buf+1
.dc95	bc95	20 04 ff	jsr $ff04	        jsr     kernel.ReadData				; read the data into the buffer.
.dc98	bc98	a5 36		lda $36		        lda 	zTemp0						; get it
.dc9a	bc9a	48		pha		        pha 								; save it
.dc9b	bc9b	20 a3 bc	jsr $bca3	        jsr 	KNLRequestNextByte 			; request next byte.
.dc9e	bc9e	68		pla		        pla
.dc9f	bc9f	18		clc		        clc 								; return CC
.dca0	bca0	60		rts		        rts
.dca1	bca1					_KNLRBFail:
.dca1	bca1	38		sec				sec
.dca2	bca2	60		rts				rts
.dca3	bca3					KNLRequestNextByte:
.dca3	bca3	ad 47 08	lda $0847	        lda     event.file.stream 			; read which stream ?
.dca6	bca6	85 f3		sta $f3		        sta     kernel.args.file.read.stream
.dca8	bca8	a9 01		lda #$01	        lda     #1 							; so one byte at a time.
.dcaa	bcaa	85 f4		sta $f4		        sta     kernel.args.file.read.buflen
.dcac	bcac	20 60 ff	jsr $ff60	        jsr     kernel.File.Read 			; read request
.dcaf	bcaf	60		rts		        rts

;******  Return to file: _basic.asm


;******  End of listing
