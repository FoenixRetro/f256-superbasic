
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct  4 10:14:32 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					tokenOffset:
>071c							.fill 	1
.071d					tokenLineNumber:
>071d							.fill 	2
.071f					tokenBuffer:
>071f							.fill 	253
.081c					lineBuffer:
>081c							.fill 	MaxLineSize+1
.086d					numberBuffer:
>086d							.fill 	34
.088f					decimalBuffer:
>088f							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 59 84	jsr $8459			jsr 	NewCommand 					; erase current program
.8006	20 36 94	jsr $9436			jsr 	BackloadProgram
.8009	4c a5 85	jmp $85a5			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 72 a0	jsr $a072			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	f0 89					.word	ShiftLeft                        ; $00 <<
>8016	ea 88					.word	BinaryCompareLessEqual           ; $01 <=
>8018	e0 88					.word	BinaryCompareNotEqual            ; $02 <>
>801a	0f 9e					.word	SyntaxError                      ; $03 !!3
>801c	0f 9e					.word	SyntaxError                      ; $04 ><
>801e	f4 88					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	f3 89					.word	ShiftRight                       ; $06 >>
>8022	0f 9e					.word	SyntaxError                      ; $07 !!7
>8024	0f 9e					.word	SyntaxError                      ; $08 !!8
>8026	0f 9e					.word	SyntaxError                      ; $09 !!9
>8028	0f 9e					.word	SyntaxError                      ; $0a !!10
>802a	0f 9e					.word	SyntaxError                      ; $0b !!11
>802c	0f 9e					.word	SyntaxError                      ; $0c !!12
>802e	0f 9e					.word	SyntaxError                      ; $0d !!13
>8030	0f 9e					.word	SyntaxError                      ; $0e !!14
>8032	0f 9e					.word	SyntaxError                      ; $0f !!15
>8034	0f 9e					.word	SyntaxError                      ; $10 @
>8036	0f 9e					.word	SyntaxError                      ; $11 !!17
>8038	0f 9e					.word	SyntaxError                      ; $12 !!18
>803a	0f 9e					.word	SyntaxError                      ; $13 [
>803c	58 99					.word	IntegerDivide                    ; $14 \
>803e	0f 9e					.word	SyntaxError                      ; $15 ]
>8040	79 8b					.word	EorInteger                       ; $16 ^
>8042	0f 9e					.word	SyntaxError                      ; $17 _
>8044	0f 9e					.word	SyntaxError                      ; $18 `
>8046	0f 9e					.word	SyntaxError                      ; $19 !!25
>8048	0f 9e					.word	SyntaxError                      ; $1a !!26
>804a	0f 9e					.word	SyntaxError                      ; $1b {
>804c	33 8b					.word	OraInteger                       ; $1c |
>804e	0f 9e					.word	SyntaxError                      ; $1d }
>8050	0f 9e					.word	SyntaxError                      ; $1e ~
>8052	0f 9e					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	0f 9e					.word	SyntaxError                      ; $20
>8056	bf 8b					.word	WordIndirect                     ; $21 !
>8058	0f 9e					.word	SyntaxError                      ; $22 "
>805a	0f 9e					.word	SyntaxError                      ; $23 #
>805c	0f 9e					.word	SyntaxError                      ; $24 $
>805e	a5 99					.word	IntegerModulus                   ; $25 %
>8060	ed 8a					.word	AndInteger                       ; $26 &
>8062	0f 9e					.word	SyntaxError                      ; $27 '
>8064	0f 9e					.word	SyntaxError                      ; $28 (
>8066	0f 9e					.word	SyntaxError                      ; $29 )
>8068	1a 9a					.word	MulInteger                       ; $2a *
>806a	87 8a					.word	AddInteger                       ; $2b +
>806c	0f 9e					.word	SyntaxError                      ; $2c ,
>806e	c2 8a					.word	SubInteger                       ; $2d -
>8070	0f 9e					.word	SyntaxError                      ; $2e .
>8072	b1 9b					.word	FDivideCommand                   ; $2f /
>8074	0f 9e					.word	SyntaxError                      ; $30 0
>8076	0f 9e					.word	SyntaxError                      ; $31 1
>8078	0f 9e					.word	SyntaxError                      ; $32 2
>807a	0f 9e					.word	SyntaxError                      ; $33 3
>807c	0f 9e					.word	SyntaxError                      ; $34 4
>807e	0f 9e					.word	SyntaxError                      ; $35 5
>8080	0f 9e					.word	SyntaxError                      ; $36 6
>8082	0f 9e					.word	SyntaxError                      ; $37 7
>8084	0f 9e					.word	SyntaxError                      ; $38 8
>8086	0f 9e					.word	SyntaxError                      ; $39 9
>8088	0f 9e					.word	SyntaxError                      ; $3a :
>808a	0f 9e					.word	SyntaxError                      ; $3b ;
>808c	cc 88					.word	BinaryCompareLess                ; $3c <
>808e	c2 88					.word	BinaryCompareEqual               ; $3d =
>8090	d6 88					.word	BinaryCompareGreater             ; $3e >
>8092	e6 8b					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	fa 85					.word	EOLCommand                       ; $80 !0:EOF
>8096	07 86					.word	Shift1Command                    ; $81 !1:SH1
>8098	0f 9e					.word	SyntaxError                      ; $82 !2:SH2
>809a	f7 9c					.word	AbsUnary                         ; $83 ABS(
>809c	b0 90					.word	AllocUnary                       ; $84 ALLOC(
>809e	07 9d					.word	AscUnary                         ; $85 ASC(
>80a0	6b 91					.word	ChrUnary                         ; $86 CHR$(
>80a2	be 88					.word	UnaryFalse                       ; $87 FALSE
>80a4	14 9d					.word	FracUnary                        ; $88 FRAC(
>80a6	2a 9d					.word	IntUnary                         ; $89 INT(
>80a8	80 9d					.word	IsValUnary                       ; $8a ISVAL(
>80aa	45 92					.word	Unary_Left                       ; $8b LEFT$(
>80ac	3c 9d					.word	LenUnary                         ; $8c LEN(
>80ae	6f 92					.word	Unary_Mid                        ; $8d MID$(
>80b0	08 91					.word	Unary_Not                        ; $8e NOT(
>80b2	55 92					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	1e 91					.word	Unary_Rnd                        ; $90 RND(
>80b6	56 9d					.word	SgnUnary                         ; $91 SGN(
>80b8	7d 91					.word	SpcUnary                         ; $92 SPC(
>80ba	98 91					.word	Unary_Str                        ; $93 STR$(
>80bc	b2 88					.word	UnaryTrue                        ; $94 TRUE
>80be	76 9d					.word	ValUnary                         ; $95 VAL(
>80c0	40 82					.word	ForCommand                       ; $96 FOR
>80c2	84 83					.word	IfCommand                        ; $97 IF
>80c4	0f 86					.word	Unused1                          ; $98 PROC
>80c6	51 85					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	17 88					.word	Command_WHILE                    ; $9a WHILE
>80ca	ad 83					.word	EndIf                            ; $9b ENDIF
>80cc	31 99					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	fa 82					.word	NextCommand                      ; $9d NEXT
>80d0	0f 86					.word	Unused4                          ; $9e THEN
>80d2	5a 85					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	38 88					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	0f 9e					.word	SyntaxError                      ; $a2 CLS
>80da	78 81					.word	Command_Data                     ; $a3 DATA
>80dc	80 81					.word	DimCommand                       ; $a4 DIM
>80de	0f 86					.word	Unused3                          ; $a5 DOWNTO
>80e0	a6 83					.word	ElseCode                         ; $a6 ELSE
>80e2	53 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	71 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	ae 83					.word	LetCommand                       ; $a9 LET
>80e8	63 84					.word	Command_Print                    ; $aa PRINT
>80ea	eb 84					.word	Command_Read                     ; $ab READ
>80ec	44 85					.word	RemCommand                       ; $ac REM
>80ee	63 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	0f 86					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	0f 9e					.word	SyntaxError                      ; $80 !0:EOF
>80f4	0f 9e					.word	SyntaxError                      ; $81 !1:SH1
>80f6	0f 9e					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	3d 82					.word	EndCommand                       ; $85 END
>80fe	e7 83					.word	Command_List                     ; $86 LIST
>8100	59 84					.word	NewCommand                       ; $87 NEW
>8102	73 85					.word	Command_Restore                  ; $88 RESTORE
>8104	a5 85					.word	CommandRUN                       ; $89 RUN
>8106	12 86					.word	StopCommand                      ; $8a STOP
.8108					VectorSet2:
>8108	0f 9e					.word	SyntaxError                      ; $80 !0:EOF
>810a	0f 9e					.word	SyntaxError                      ; $81 !1:SH1
>810c	0f 9e					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 10 93	jsr $9310			jsr 	EvaluateInteger 			; the assert test
.8113	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 46 88	jmp $8846		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 25 93	jsr $9325			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 29 94	jsr $9429			jsr 	StackReset
.816e	20 e8 9f	jsr $9fe8			jsr 	StringSystemInitialise
.8171	20 66 87	jsr $8766			jsr 	ProcedureScan
.8174	20 73 85	jsr $8573			jsr 	Command_Restore
.8177	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8178					Command_Data:
.8178	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.817a	a2 80		ldx #$80			ldx 	#KWC_EOL
.817c	20 b8 87	jsr $87b8			jsr 	ScanForward
.817f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8180					DimCommand:
.8180	b1 30		lda ($30),y			lda 	(codePtr),y
.8182	29 c0		and #$c0			and 	#$C0
.8184	c9 40		cmp #$40			cmp 	#$40
.8186	d0 7a		bne $8202			bne 	_DCSyntax
.8188	b1 30		lda ($30),y			lda 	(codePtr),y
.818a	18		clc				clc
.818b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.818d	85 3f		sta $3f				sta 	zaTemp+1
.818f	c8		iny				iny
.8190	b1 30		lda ($30),y			lda 	(codePtr),y
.8192	c8		iny				iny
.8193	85 3e		sta $3e				sta 	zaTemp
.8195	5a		phy				phy
.8196	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8198	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.819a	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.819c	c9 18		cmp #$18			cmp 	#NSTProcedure
.819e	f0 62		beq $8202			beq 	_DCSyntax
.81a0	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.81a2	29 04		and #$04			and 	#NSBIsArray
.81a4	f0 64		beq $820a			beq 	_DCType
.81a6	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.81a8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81aa	d0 59		bne $8205			bne 	_DCRedefine
.81ac	7a		ply				ply
.81ad	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get array size, check it.
.81b0	5a		phy				phy
.81b1	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.81b3	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.81b5	7a		ply				ply 							; is there a second (e.g. ,x)
.81b6	b1 30		lda ($30),y			lda 	(codePtr),y
.81b8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.81ba	d0 0a		bne $81c6			bne 	_DCOneDimension
.81bc	c8		iny				iny 							; skip comma
.81bd	20 0d 82	jsr $820d			jsr 	_DCGetSize 				; get 2nd array size
.81c0	5a		phy				phy
.81c1	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.81c3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81c5	7a		ply				ply
.81c6					_DCOneDimension:
.81c6	5a		phy				phy 							; save position
.81c7	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.81c9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cb	aa		tax				tax
.81cc	c8		iny				iny
.81cd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81cf	e8		inx				inx 							; bump them.
.81d0	1a		inc a				inc 	a
.81d1	20 c1 9d	jsr $9dc1			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.81d4	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.81d6	29 e0		and #$e0			and 	#$E0
.81d8	d0 23		bne $81fd			bne 	_DCSize
.81da	a0 02		ldy #$02			ldy 	#2 						; get base type
.81dc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81de	20 1b 82	jsr $821b			jsr 	ScaleByBaseType 		; scale by base type
.81e1	a5 36		lda $36				lda 	zTemp0
.81e3	a6 37		ldx $37				ldx 	zTemp0+1
.81e5	20 cf 90	jsr $90cf			jsr 	AllocateXABytes 		; allocate memory
.81e8	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.81ea	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81ec	c8		iny				iny
.81ed	8a		txa				txa
.81ee	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81f0	7a		ply				ply 							; get position back
.81f1	20 3f 99	jsr $993f			jsr 	CheckRightBracket 		; check )
.81f4	b1 30		lda ($30),y			lda 	(codePtr),y
.81f6	c8		iny				iny 							; consume in case
.81f7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.81f9	f0 85		beq $8180			beq 	DimCommand
.81fb	88		dey				dey 							; undo consume
.81fc	60		rts				rts
.81fd					_DCSize:
.81fd	a9 16		lda #$16		lda	#22
.81ff	4c 46 88	jmp $8846		jmp	ErrorHandler
.8202					_DCSyntax:
.8202	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError
.8205					_DCRedefine:
.8205	a9 15		lda #$15		lda	#21
.8207	4c 46 88	jmp $8846		jmp	ErrorHandler
.820a					_DCType:
.820a	4c 19 9e	jmp $9e19			jmp 	TypeError
.820d					_DCGetSize:
.820d	a2 00		ldx #$00			ldx 	#0 						; get first index.
.820f	20 31 93	jsr $9331			jsr 	Evaluate8BitInteger 	; get array dimension
.8212	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8214	f0 e7		beq $81fd			beq 	_DCSize
.8216	c9 fe		cmp #$fe			cmp 	#254
.8218	f0 e3		beq $81fd			beq 	_DCSize
.821a	60		rts				rts
.821b					ScaleByBaseType:
.821b	29 10		and #$10			and 	#NSBIsString 			; is it string
.821d	d0 19		bne $8238			bne 	_SBBTString
.821f	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8221	48		pha				pha
.8222	a5 36		lda $36				lda 	zTemp0
.8224	48		pha				pha
.8225	06 36		asl $36				asl 	zTemp0 					; x 2
.8227	26 37		rol $37				rol 	zTemp0+1
.8229	06 36		asl $36				asl 	zTemp0 					; x 4
.822b	26 37		rol $37				rol 	zTemp0+1
.822d	68		pla				pla 							; add stacked value = x 5
.822e	65 36		adc $36				adc 	zTemp0
.8230	85 36		sta $36				sta 	zTemp0
.8232	68		pla				pla
.8233	65 37		adc $37				adc 	zTemp0+1
.8235	85 37		sta $37				sta 	zTemp0+1
.8237	60		rts				rts
.8238					_SBBTString:
.8238	06 36		asl $36				asl 	zTemp0
.823a	26 37		rol $37				rol 	zTemp0+1
.823c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.823d					EndCommand:
.823d	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8240					ForCommand:
.8240	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8242	20 d6 93	jsr $93d6			jsr 	StackOpen
.8245	a2 00		ldx #$00			ldx 	#0
.8247	20 20 8f	jsr $8f20			jsr 	EvaluateTerm
.824a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.824d	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.824f	d0 49		bne $829a			bne		_FCError
.8251	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8253	20 4f 99	jsr $994f			jsr 	CheckNextA
.8256	e8		inx				inx
.8257	20 10 93	jsr $9310			jsr 	EvaluateInteger 			; <from> in +1
.825a	b1 30		lda ($30),y			lda 	(codePtr),y
.825c	c8		iny				iny 								; consume it
.825d	48		pha				pha 								; save on stack for later
.825e	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8260	f0 04		beq $8266			beq 	_FCNoSyntax
.8262	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8264	d0 37		bne $829d			bne 	_FCSyntaxError
.8266					_FCNoSyntax:
.8266	e8		inx				inx
.8267	20 10 93	jsr $9310			jsr 	EvaluateInteger
.826a	20 08 94	jsr $9408			jsr 	STKSaveCodePosition 		; save loop back position
.826d	68		pla				pla 								; restore DOWNTO or TO
.826e	5a		phy				phy 								; save Y on the stack
.826f	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8271	f0 02		beq $8275			beq 	_FCNotDownTo
.8273	a9 02		lda #$02			lda 	#2
.8275					_FCNotDownTo:
.8275	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8276	a0 10		ldy #$10			ldy 	#16
.8278	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.827a	a0 06		ldy #$06			ldy 	#6
.827c	ad 08 06	lda $0608			lda 	NSMantissa0
.827f	91 34		sta ($34),y			sta 	(basicStack),y
.8281	ad 10 06	lda $0610			lda 	NSMantissa1
.8284	c8		iny				iny
.8285	91 34		sta ($34),y			sta 	(basicStack),y
.8287	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8289	a2 01		ldx #$01			ldx 	#1
.828b	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.828e	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8290	a2 02		ldx #$02			ldx 	#2
.8292	20 a0 82	jsr $82a0			jsr 	FCIntegerToStack
.8295	20 c0 82	jsr $82c0			jsr 	CopyIndexToReference
.8298	7a		ply				ply 								; restore position
.8299	60		rts				rts
.829a					_FCError:
.829a	4c 19 9e	jmp $9e19			jmp 	TypeError
.829d					_FCSyntaxError:
.829d	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError
.82a0					FCIntegerToStack:
.82a0	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.82a3	10 03		bpl $82a8			bpl	 	_FCNotNegative
.82a5	20 4e 93	jsr $934e			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.82a8					_FCNotNegative:
.82a8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.82ab	91 34		sta ($34),y			sta 	(basicStack),y
.82ad	c8		iny				iny
.82ae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82b1	91 34		sta ($34),y			sta 	(basicStack),y
.82b3	c8		iny				iny
.82b4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82b7	91 34		sta ($34),y			sta 	(basicStack),y
.82b9	c8		iny				iny
.82ba	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.82bd	91 34		sta ($34),y			sta 	(basicStack),y
.82bf	60		rts				rts
.82c0					CopyIndexToReference:
.82c0	5a		phy				phy
.82c1	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.82c3	38		sec				sec 								; (because we copy from offset 8)
.82c4	b1 34		lda ($34),y			lda 	(basicStack),y
.82c6	e9 08		sbc #$08			sbc 	#8
.82c8	85 36		sta $36				sta 	zTemp0
.82ca	c8		iny				iny
.82cb	b1 34		lda ($34),y			lda 	(basicStack),y
.82cd	e9 00		sbc #$00			sbc 	#0
.82cf	85 37		sta $37				sta 	zTemp0+1
.82d1	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.82d3	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.82d5	b1 34		lda ($34),y			lda 	(basicStack),y
.82d7	0a		asl a				asl 	a 							; into carry
.82d8	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.82da	90 14		bcc $82f0			bcc 	_CITRNormal
.82dc	38		sec				sec
.82dd					_CITRNegative:
.82dd	a9 00		lda #$00			lda 	#0
.82df	f1 34		sbc ($34),y			sbc 	(basicStack),y
.82e1	91 36		sta ($36),y			sta 	(zTemp0),y
.82e3	c8		iny				iny
.82e4	ca		dex				dex
.82e5	d0 f6		bne $82dd			bne 	_CITRNegative
.82e7	88		dey				dey 								; look at MSB of mantissa
.82e8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.82ea	09 80		ora #$80			ora 	#$80
.82ec	91 36		sta ($36),y			sta 	(zTemp0),y
.82ee	7a		ply				ply
.82ef	60		rts				rts
.82f0					_CITRNormal:
.82f0	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.82f2	91 36		sta ($36),y			sta 	(zTemp0),y
.82f4	c8		iny				iny
.82f5	ca		dex				dex
.82f6	d0 f8		bne $82f0			bne 	_CITRNormal
.82f8	7a		ply				ply 								; and exit.
.82f9	60		rts				rts
.82fa					NextCommand:
.82fa	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.82fc	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.82fe	20 fd 93	jsr $93fd			jsr 	StackCheckFrame
.8301	5a		phy				phy
.8302	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8304	b1 34		lda ($34),y			lda 	(basicStack),y
.8306	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8308	30 02		bmi $830c			bmi 	_NCStepNeg
.830a	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.830c					_NCStepNeg:
.830c	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.830e	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8310	18		clc				clc
.8311					_NCBump:
.8311	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8313	91 34		sta ($34),y			sta 	(basicStack),y
.8315	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8317	c8		iny				iny 								; next byte
.8318	ca		dex				dex 								; do four times
.8319	d0 f6		bne $8311			bne 	_NCBump
.831b	20 c0 82	jsr $82c0			jsr		CopyIndexToReference		; copy it to the reference variable.
.831e	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8320	b1 34		lda ($34),y			lda 	(basicStack),y
.8322	0a		asl a				asl 	a 							; sign bit to carry
.8323	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8325	85 38		sta $38				sta 	zTemp1
.8327	90 02		bcc $832b			bcc 	_NCCompRev 					; use if step is +ve
.8329	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.832b					_NCCompRev:
.832b	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.832d	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.832f	85 39		sta $39				sta 	zTemp1+1
.8331	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8333	38		sec				sec
.8334					_NCCompare:
.8334	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8336	b1 34		lda ($34),y			lda 	(basicStack),y
.8338	a4 39		ldy $39				ldy 	zTemp1+1
.833a	f1 34		sbc ($34),y			sbc 	(basicStack),y
.833c	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.833e	e6 39		inc $39				inc 	zTemp1+1
.8340	ca		dex				dex 								; do it 4 times.
.8341	d0 f1		bne $8334			bne 	_NCCompare
.8343	50 02		bvc $8347			bvc 	_NCNoOverflow 				; convert to signed comparison
.8345	49 80		eor #$80			eor 	#$80
.8347					_NCNoOverflow:
.8347	7a		ply				ply 								; restore Y position
.8348	0a		asl a				asl 	a 							; is bit 7 set.
.8349	90 04		bcc $834f			bcc 	_NCLoopback 				; if no , >= so loop back
.834b	20 ef 93	jsr $93ef			jsr 	StackClose 					; exit the loop
.834e	60		rts				rts
.834f					_NCLoopBack:
.834f	20 19 94	jsr $9419			jsr 	STKLoadCodePosition 		; loop back
.8352	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8353					Command_GOSUB:
.8353	a2 00		ldx #$00			ldx 	#0
.8355	20 25 93	jsr $9325			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8358	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.835a	20 d6 93	jsr $93d6			jsr 	StackOpen 					; create frame
.835d	20 08 94	jsr $9408			jsr 	STKSaveCodePosition 		; save current position
.8360	4c 76 83	jmp $8376			jmp 	GotoStackX
.8363					Command_RETURN:
.8363	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8365	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8367	20 fd 93	jsr $93fd			jsr 	StackCheckFrame
.836a	20 19 94	jsr $9419			jsr 	STKLoadCodePosition 		; restore code position
.836d	20 ef 93	jsr $93ef			jsr 	StackClose
.8370	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8371					GotoCommand:
.8371	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8373	20 25 93	jsr $9325			jsr 	Evaluate16BitInteger
.8376					GotoStackX:
.8376	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8379	48		pha				pha 								; it is slightly inefficient, just in cases.
.837a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.837d	fa		plx				plx
.837e	20 ff 98	jsr $98ff			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8381	4c b0 85	jmp $85b0			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8384					IfCommand:
.8384	a2 00		ldx #$00			ldx 	#0 							; If what.
.8386	20 ed 92	jsr $92ed			jsr 	EvaluateNumber
.8389	b1 30		lda ($30),y			lda 	(codePtr),y
.838b	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.838d	d0 0a		bne $8399			bne 	_IFStructured
.838f	c8		iny				iny 								; consume THEN
.8390	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; is it zero
.8393	f0 01		beq $8396			beq 	_IfFail 					; if fail, go to next line
.8395	60		rts				rts 								; if THEN just continue
.8396					_IfFail:
.8396	4c fa 85	jmp $85fa			jmp 	EOLCommand
.8399					_IfStructured:
.8399	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; is it zero
.839c	d0 07		bne $83a5			bne 	_IfExit 					; if not, then continue normally.
.839e	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.83a0	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.83a2	20 b8 87	jsr $87b8			jsr 	ScanForward 				; and run from there/
.83a5					_IfExit:
.83a5	60		rts				rts
.83a6					ElseCode:
.83a6	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.83a8	aa		tax				tax 								; so just go to the structure exit
.83a9	20 b8 87	jsr $87b8			jsr 	ScanForward
.83ac	60		rts				rts
.83ad					EndIf:
.83ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.83ae					LetCommand:
.83ae	a2 00		ldx #$00			ldx 	#0
.83b0	ad 37 8c	lda $8c37			lda 	PrecedenceLevel+"*"			; precedence > this
.83b3	20 51 8c	jsr $8c51			jsr 	EvaluateExpressionAtPrecedence
.83b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.83b9	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.83bb	f0 0e		beq $83cb			beq 	_LetGoProc 					; it's a procedure call.
.83bd	a9 3d		lda #$3d			lda 	#"=" 						; check =
.83bf	20 4f 99	jsr $994f			jsr 	CheckNextA
.83c2	e8		inx				inx 								; RHS
.83c3	20 e4 92	jsr $92e4			jsr 	EvaluateValue
.83c6	ca		dex				dex
.83c7	20 ce 83	jsr $83ce			jsr 	AssignVariable
.83ca	60		rts				rts
.83cb					_LetGoProc:
.83cb	4c ba 84	jmp $84ba			jmp 	CallProcedure
.83ce					AssignVariable:
.83ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.83d1	48		pha				pha 								; save a copy
.83d2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83d5	29 10		and #$10			and 	#NSBIsString
.83d7	d0 0b		bne $83e4			bne 	_ASError
.83d9	68		pla				pla 								; get back
.83da	29 10		and #$10			and 	#NSBIsString 				; check type
.83dc	d0 03		bne $83e1			bne 	_ASString
.83de	4c 8c 8c	jmp $8c8c			jmp 	AssignNumber
.83e1					_ASString:
.83e1	4c fa 8c	jmp $8cfa			jmp 	AssignString
.83e4					_ASError:
.83e4	4c 19 9e	jmp $9e19			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.83e7					Command_List:
.83e7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.83e9	85 30		sta $30				sta 	codePtr
.83eb	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.83ed	85 31		sta $31				sta 	codePtr+1
.83ef	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.83f2	9c 14 06	stz $0614			stz 	NSMantissa1+4
.83f5	a9 ff		lda #$ff			lda 	#$FF
.83f7	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.83fa	8d 17 06	sta $0617			sta 	NSMantissa1+7
.83fd	b1 30		lda ($30),y			lda 	(codePtr),y
.83ff	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8401	f0 1e		beq $8421			beq 	_CLSecond
.8403	20 50 84	jsr $8450			jsr 	CLIsDigit 					; if not digit, list all
.8406	b0 24		bcs $842c			bcs 	_CLLoop
.8408	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.840a	20 25 93	jsr $9325			jsr 	Evaluate16BitInteger
.840d	b1 30		lda ($30),y			lda 	(codePtr),y
.840f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8411	f0 0e		beq $8421			beq 	_CLSecond 					; if so go get it
.8413	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.8416	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8419	8d 14 06	sta $0614			sta 	NSMantissa1+4
.841c	8d 17 06	sta $0617			sta 	NSMantissa1+7
.841f	80 0b		bra $842c			bra 	_CLLoop
.8421					_CLSecond:
.8421	c8		iny				iny 								; consume comma
.8422	20 50 84	jsr $8450			jsr 	CLIsDigit 					; digit found
.8425	b0 05		bcs $842c			bcs 	_CLLoop 					; if not, continue listing
.8427	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8429	20 25 93	jsr $9325			jsr 	Evaluate16BitInteger
.842c					_CLLoop:
.842c	b2 30		lda ($30)			lda 	(codePtr)
.842e	f0 1c		beq $844c			beq 	_CLExit
.8430	20 17 86	jsr $8617			jsr 	ListConvertLine 			; convert line into token Buffer
.8433	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8435	a9 1f		lda #$1f			lda 	#(tokenBuffer & $FF)
.8437	20 9f 88	jsr $889f			jsr 	PrintStringXA
.843a	a9 0d		lda #$0d			lda 	#13 						; new line
.843c	20 72 a0	jsr $a072			jsr 	EXTPrintCharacter
.843f	18		clc				clc
.8440	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8442	65 30		adc $30				adc 	codePtr
.8444	85 30		sta $30				sta 	codePtr
.8446	90 02		bcc $844a			bcc 	_CREExit
.8448	e6 31		inc $31				inc 	codePtr+1
.844a					_CREExit:
.844a	80 e0		bra $842c			bra 	_CLLoop
.844c					_CLExit:
>844c	db						.byte 	$DB 						; causes a break in the emulator
.844d	4c 0c 80	jmp $800c			jmp 	WarmStart
.8450					CLIsDigit:
.8450	c9 30		cmp #$30			cmp 	#"0"
.8452	90 03		bcc $8457			bcc	 	_CLIDExitFalse
.8454	c9 3a		cmp #$3a			cmp 	#"9"+1
.8456	60		rts				rts
.8457					_CLIDExitFalse:
.8457	38		sec				sec
.8458	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8459					NewCommand:
.8459	20 ae 98	jsr $98ae			jsr 	MemoryNew
.845c	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.845f	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.8462	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8463					Command_Print:
.8463	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8464					_CPLoop:
.8464	08		php				php 								; save last action flag
.8465	b1 30		lda ($30),y			lda 	(codePtr),y
.8467	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8469	f0 46		beq $84b1			beq 	_CPExit
.846b	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.846d	f0 42		beq $84b1			beq 	_CPExit
.846f	68		pla				pla 								; throw last action flag
.8470	b1 30		lda ($30),y			lda 	(codePtr),y
.8472	c8		iny				iny
.8473	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8475	f0 37		beq $84ae			beq 	_CPContinueWithSameLine
.8477	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8479	f0 2e		beq $84a9			beq 	_CPTab
.847b	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.847d	f0 26		beq $84a5			beq 	_CPNewLine
.847f	88		dey				dey 								; undo the get.
.8480	a2 00		ldx #$00			ldx 	#0
.8482	20 e4 92	jsr $92e4			jsr 	EvaluateValue 				; get a value into slot 0
.8485	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8488	29 10		and #$10			and 	#NSBIsString
.848a	f0 0b		beq $8497			beq 	_CPNumber
.848c	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.848f	ad 08 06	lda $0608			lda 	NSMantissa0
.8492	20 9f 88	jsr $889f			jsr 	PrintStringXA
.8495	80 cc		bra $8463			bra 	Command_Print 				; loop round clearing carry so NL if end
.8497					_CPNumber:
.8497	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8499	20 ba 91	jsr $91ba			jsr 	ConvertNumberToString 		; convert to string
.849c	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.849e	a9 8f		lda #$8f			lda 	#DecimalBuffer & $FF
.84a0	20 9f 88	jsr $889f			jsr 	PrintStringXA
.84a3	80 be		bra $8463			bra 	Command_Print 				; loop round clearing carry so NL if end
.84a5					_CPNewLine:
.84a5	a9 0d		lda #$0d			lda 	#13
.84a7	80 02		bra $84ab			bra 	_CPPrintChar
.84a9					_CPTab:
.84a9	a9 09		lda #$09			lda 	#9 							; print TAB
.84ab					_CPPrintChar:
.84ab	20 72 a0	jsr $a072			jsr 	EXTPrintCharacter
.84ae					_CPContinueWithSameLine:
.84ae	38		sec				sec 								; loop round with carry set, which
.84af	80 b3		bra $8464			bra 	_CPLoop 					; will inhibit final CR
.84b1					_CPExit:
.84b1	28		plp				plp 								; get last action flag
.84b2	b0 05		bcs $84b9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.84b4	a9 0d		lda #$0d			lda 	#13 						; print new line
.84b6	20 72 a0	jsr $a072			jsr 	EXTPrintCharacter
.84b9					_CPExit2:
.84b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.84ba					CallProcedure:
.84ba	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.84bd	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.84bf	20 d6 93	jsr $93d6			jsr 	StackOpen
.84c2	20 08 94	jsr $9408			jsr 	STKSaveCodePosition 		; save loop position
.84c5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.84c8	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.84ca	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84cd	85 37		sta $37				sta 	zTemp0+1
.84cf	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.84d1	b2 36		lda ($36)			lda 	(zTemp0)
.84d3	85 30		sta $30				sta 	safePtr
.84d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.84d7	85 31		sta $31				sta 	safePtr+1
.84d9	c8		iny				iny
.84da	b1 36		lda ($36),y			lda 	(zTemp0),y
.84dc	85 32		sta $32				sta 	safePtr+2
.84de	c8		iny				iny
.84df	b1 36		lda ($36),y			lda 	(zTemp0),y
.84e1	85 33		sta $33				sta 	safePtr+3
.84e3	c8		iny				iny 								; get Y offset -> Y
.84e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.84e6	a8		tay				tay
.84e7	20 3f 99	jsr $993f			jsr 	CheckRightBracket 			; check )
.84ea	60		rts				rts 								; and continue from here
.9931					Command_ENDPROC:
.9931	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9933	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9935	20 fd 93	jsr $93fd			jsr 	StackCheckFrame
.9938	20 19 94	jsr $9419			jsr 	STKLoadCodePosition 		; restore code position
.993b	20 ef 93	jsr $93ef			jsr 	StackClose
.993e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.84eb					Command_Read:
.84eb	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.84ed	20 20 8f	jsr $8f20			jsr 	EvaluateTerm
.84f0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.84f3	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.84f5	f0 4a		beq $8541			beq 	_CRSyntax 					; check reference (bit 0)
.84f7	20 8a 85	jsr $858a			jsr 	SwapDataCodePtrs 			; swap code and data
.84fa	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.84fd	d0 20		bne $851f			bne 	_CRContinueData
.84ff					_CRKeepSearching:
.84ff	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8501	aa		tax				tax
.8502	20 b8 87	jsr $87b8			jsr 	ScanForward
.8505	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8507	f0 16		beq $851f			beq 	_CRHaveData 				; found it
.8509	18		clc				clc
.850a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.850c	65 30		adc $30				adc 	codePtr
.850e	85 30		sta $30				sta 	codePtr
.8510	90 02		bcc $8514			bcc 	_CREExit
.8512	e6 31		inc $31				inc 	codePtr+1
.8514					_CREExit:
.8514	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8516	b2 30		lda ($30)			lda 	(codePtr)
.8518	d0 e5		bne $84ff			bne 	_CRKeepSearching
.851a	a9 0b		lda #$0b		lda	#11
.851c	4c 46 88	jmp $8846		jmp	ErrorHandler
.851f					_CRHaveData:
.851f					_CRContinueData:
.851f	a2 01		ldx #$01			ldx 	#1
.8521	20 e4 92	jsr $92e4			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8524	ca		dex				dex
.8525	20 ce 83	jsr $83ce			jsr		AssignVariable 				; do the assignment
.8528	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.852b	b1 30		lda ($30),y			lda 	(codePtr),y
.852d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.852f	d0 04		bne $8535			bne 	_CRSwapBack
.8531	c8		iny				iny 								; consume comma
.8532	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.8535					_CRSwapBack:
.8535	20 8a 85	jsr $858a			jsr 	SwapDataCodePtrs			; swap them back.
.8538	b1 30		lda ($30),y			lda 	(codePtr),y
.853a	c8		iny				iny
.853b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.853d	f0 ac		beq $84eb			beq 	Command_Read 				; if so go round again.
.853f	88		dey				dey 								; unpick get.
.8540	60		rts				rts
.8541					_CRSyntax:
.8541	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8544					RemCommand:
.8544	b1 30		lda ($30),y			lda 	(codePtr),y
.8546	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8548	d0 06		bne $8550			bne 	_RMExit
.854a	c8		iny				iny
.854b	98		tya				tya
.854c	38		sec				sec
.854d	71 30		adc ($30),y			adc 	(codePtr),y
.854f	a8		tay				tay
.8550					_RMExit:
.8550	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8551					Command_REPEAT:
.8551	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8553	20 d6 93	jsr $93d6			jsr 	StackOpen
.8556	20 08 94	jsr $9408			jsr 	STKSaveCodePosition 		; save loop position
.8559	60		rts				rts
.855a					Command_UNTIL:
.855a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.855c	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.855e	20 fd 93	jsr $93fd			jsr 	StackCheckFrame
.8561	a2 00		ldx #$00			ldx 	#0
.8563	20 ed 92	jsr $92ed			jsr 	EvaluateNumber 				; work out the number
.8566	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; check if zero
.8569	f0 04		beq $856f			beq 	_CULoopBack 				; if so keep looping
.856b	20 ef 93	jsr $93ef			jsr 	StackClose		 			; return
.856e	60		rts				rts
.856f					_CULoopBack:
.856f	20 19 94	jsr $9419			jsr 	STKLoadCodePosition 		; loop back
.8572	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8573					Command_Restore:
.8573	20 8a 85	jsr $858a			jsr 	SwapDataCodePtrs 			; swap code and data
.8576	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8578	85 30		sta $30				sta 	codePtr
.857a	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.857c	85 31		sta $31				sta 	codePtr+1
.857e	20 8a 85	jsr $858a			jsr 	SwapDataCodePtrs 			; put them back
.8581	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8583	8d 19 07	sta $0719			sta 	dataPointer+4
.8586	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.8589	60		rts				rts
.858a					SwapDataCodePtrs:
.858a	da		phx				phx
.858b	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.858d					_SDCPLoop:
.858d	b5 30		lda $30,x			lda 	safePtr,x
.858f	48		pha				pha
.8590	bd 15 07	lda $0715,x			lda 	dataPointer,x
.8593	95 30		sta $30,x			sta 	safePtr,x
.8595	68		pla				pla
.8596	9d 15 07	sta $0715,x			sta 	dataPointer,x
.8599	ca		dex				dex
.859a	10 f1		bpl $858d			bpl 	_SDCPLoop
.859c	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.859f	8c 19 07	sty $0719			sty 	dataPointer+4
.85a2	a8		tay				tay
.85a3	fa		plx				plx
.85a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.85a5					CommandRUN:
.85a5	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.85a8	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.85aa	85 30		sta $30				sta 	codePtr
.85ac	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.85ae	85 31		sta $31				sta 	codePtr+1
.85b0					RUNNewLine:
.85b0	b2 30		lda ($30)			lda 	(codePtr)
.85b2	f0 43		beq $85f7			beq 	CRNoProgram         		; no then END.
.85b4	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.85b6	9a		txs				txs
.85b7					RUNCodePointerLine:
.85b7	a0 02		ldy #$02			ldy 	#2 							; start of program
.85b9					_CRIncMainLoop:
.85b9	c8		iny				iny
.85ba					_CRMainLoop:
.85ba	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.85bd	b1 30		lda ($30),y			lda 	(codePtr),y
.85bf	10 10		bpl $85d1			bpl 	_CRNotKeyword
.85c1	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.85c3	b0 04		bcs $85c9			bcs 	_CRIsKeyword
.85c5	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.85c7	b0 28		bcs $85f1			bcs		_CRSyntaxError
.85c9					_CRIsKeyword:
.85c9	c8		iny				iny 								; consume command
.85ca	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.85cb	aa		tax				tax 								; put in X for vector jump
.85cc	20 f4 85	jsr $85f4			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.85cf	80 e9		bra $85ba			bra 	_CRMainLoop 				; and loop round
.85d1					_CRNotKeyword:
.85d1	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.85d3	f0 e4		beq $85b9			beq 	_CRIncMainLoop
.85d5	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.85d7	90 05		bcc $85de			bcc 	_CRNotVariable
.85d9					_CRGoLet:
.85d9	20 ae 83	jsr $83ae			jsr 	LetCommand
.85dc	80 dc		bra $85ba			bra 	_CRMainLoop
.85de					_CRNotVariable:
.85de	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.85e0	f0 f7		beq $85d9			beq 	_CRGoLet
.85e2	c9 21		cmp #$21			cmp 	#KWD_PLING
.85e4	f0 f3		beq $85d9			beq 	_CRGoLet
.85e6	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.85e8	f0 01		beq $85eb			beq 	_CRGoRem
>85ea	db						.byte 	$DB 						; causes a break in the emulator
.85eb					_CRGoRem:
.85eb	c8		iny				iny
.85ec	20 44 85	jsr $8544			jsr 	RemCommand
.85ef	80 c9		bra $85ba			bra 	_CRMainLoop
.85f1					_CRSyntaxError:
.85f1	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError
.85f4					_CRCallVector0:
.85f4	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.85f7					CRNoProgram:
.85f7	4c 3d 82	jmp $823d			jmp 	EndCommand
.85fa					EOLCommand:
.85fa	18		clc				clc
.85fb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.85fd	65 30		adc $30				adc 	codePtr
.85ff	85 30		sta $30				sta 	codePtr
.8601	90 02		bcc $8605			bcc 	_CREExit
.8603	e6 31		inc $31				inc 	codePtr+1
.8605					_CREExit:
.8605	80 a9		bra $85b0			bra 	RunNewLine
.8607					Shift1Command:
.8607	b1 30		lda ($30),y			lda 	(codePtr),y
.8609	c8		iny				iny
.860a	0a		asl a				asl 	a
.860b	aa		tax				tax
.860c	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.860f					Unused1:
.860f					Unused2:
.860f					Unused3:
.860f					Unused4:
.860f	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8612					StopCommand:
.8612	a9 08		lda #$08		lda	#8
.8614	4c 46 88	jmp $8846		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8617					ListConvertLine:
.8617	9c 1b 07	stz $071b			stz 	tbOffset
.861a	9c 1f 07	stz $071f			stz 	tokenBuffer
.861d	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.861f	b1 30		lda ($30),y			lda 	(codePtr),y
.8621	aa		tax				tax
.8622	88		dey				dey
.8623	b1 30		lda ($30),y			lda 	(codePtr),y
.8625	20 9b 9a	jsr $9a9b			jsr 	ConvertInt16
.8628	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.862a	86 37		stx $37				stx 	zTemp0+1
.862c	a0 00		ldy #$00			ldy 	#0
.862e					_LCCopyNumber:
.862e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8630	20 2d 87	jsr $872d			jsr 	LCLWrite
.8633	c8		iny				iny
.8634	b1 36		lda ($36),y			lda 	(zTemp0),y
.8636	d0 f6		bne $862e			bne 	_LCCopyNumber
.8638					_LCPadOut:
.8638	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.863a	20 2d 87	jsr $872d			jsr 	LCLWrite
.863d	ad 1b 07	lda $071b			lda 	tbOffset
.8640	c9 06		cmp #$06			cmp 	#6
.8642	d0 f4		bne $8638			bne 	_LCPadOut
.8644	a0 03		ldy #$03			ldy 	#3 							; start position.
.8646					_LCMainLoop:
.8646	b1 30		lda ($30),y			lda 	(codePtr),y
.8648	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.864a	f0 17		beq $8663			beq 	_LCExit
.864c	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.864e	90 14		bcc $8664			bcc 	_LCDoubles
.8650	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8652	90 20		bcc $8674			bcc 	_LCShiftPunc
.8654	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8656	90 2b		bcc $8683			bcc 	_LCPunctuation
.8658	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.865a	90 2d		bcc $8689			bcc 	_LCIdentifiers
.865c	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.865e	90 49		bcc $86a9			bcc 	_LCTokens
.8660	4c 01 87	jmp $8701			jmp 	_LCData 					; 254-5 are data objects
.8663					_LCExit:
.8663	60		rts				rts
.8664					_LCDoubles:
.8664	48		pha				pha
.8665	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8666	29 02		and #$02			and 	#2
.8668	09 3c		ora #$3c			ora 	#60 						; make < >
.866a	20 2d 87	jsr $872d			jsr 	LCLWrite
.866d	68		pla				pla 								; restore, do lower bit
.866e	29 03		and #$03			and 	#3
.8670	09 3c		ora #$3c			ora 	#60
.8672	80 0f		bra $8683			bra		_LCPunctuation 				; print, increment, loop
.8674					_LCShiftPunc:
.8674	aa		tax				tax 								; save in X
.8675	29 07		and #$07			and 	#7 							; lower 3 bits
.8677	f0 02		beq $867b			beq 	_LCNoAdd
.8679	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.867b					_LCNoAdd:
.867b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.867d	90 02		bcc $8681			bcc 	_LCNoAdd2
.867f	09 20		ora #$20			ora 	#32 						; adds $20
.8681					_LCNoAdd2:
.8681	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8683					_LCPunctuation:
.8683	c8		iny				iny 								; consume character
.8684	20 2d 87	jsr $872d			jsr 	LCLWrite 					; write it out.
.8687	80 bd		bra $8646			bra 	_LCMainLoop 				; go round again.
.8689					_LCIdentifiers:
.8689	18		clc				clc 								; convert to physical address
.868a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.868c	85 37		sta $37				sta 	zTemp0+1
.868e	c8		iny				iny
.868f	b1 30		lda ($30),y			lda 	(codePtr),y
.8691	85 36		sta $36				sta 	zTemp0
.8693	c8		iny				iny
.8694	5a		phy				phy 								; save position
.8695	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8697					_LCOutIdentifier:
.8697	c8		iny				iny
.8698	b1 36		lda ($36),y			lda 	(zTemp0),y
.869a	29 7f		and #$7f			and 	#$7F
.869c	20 5b 87	jsr $875b			jsr 	LCLLowerCase
.869f	20 2d 87	jsr $872d			jsr 	LCLWrite
.86a2	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.86a4	10 f1		bpl $8697			bpl 	_LCOutIdentifier
.86a6	7a		ply				ply 								; restore position
.86a7	80 9d		bra $8646			bra 	_LCMainLoop
.86a9					_LCTokens:
.86a9	aa		tax				tax 								; token in X
.86aa	a9 28		lda #$28			lda 	#((KeywordSet2) & $FF)
.86ac	85 36		sta $36				sta 	0+zTemp0
.86ae	a9 96		lda #$96			lda 	#((KeywordSet2) >> 8)
.86b0	85 37		sta $37				sta 	1+zTemp0
.86b2	e0 82		cpx #$82			cpx 	#$82
.86b4	f0 16		beq $86cc			beq 	_LCUseShift
.86b6	a9 ee		lda #$ee			lda 	#((KeywordSet1) & $FF)
.86b8	85 36		sta $36				sta 	0+zTemp0
.86ba	a9 95		lda #$95			lda 	#((KeywordSet1) >> 8)
.86bc	85 37		sta $37				sta 	1+zTemp0
.86be	e0 81		cpx #$81			cpx 	#$81
.86c0	f0 0a		beq $86cc			beq 	_LCUseShift
.86c2	a9 cc		lda #$cc			lda 	#((KeywordSet0) & $FF)
.86c4	85 36		sta $36				sta 	0+zTemp0
.86c6	a9 94		lda #$94			lda 	#((KeywordSet0) >> 8)
.86c8	85 37		sta $37				sta 	1+zTemp0
.86ca	80 01		bra $86cd			bra 	_LCNoShift
.86cc					_LCUseShift:
.86cc	c8		iny				iny
.86cd					_LCNoShift:
.86cd	20 3c 87	jsr $873c			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.86d0	b1 30		lda ($30),y			lda 	(codePtr),y
.86d2	aa		tax				tax 								; into X
.86d3					_LCFindText:
.86d3	ca		dex				dex
.86d4	10 0e		bpl $86e4			bpl 	_LCFoundText 				; found text.
.86d6	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.86d8	1a		inc a				inc 	a 							; one extra for size
.86d9	38		sec				sec 								; one extra for checksum
.86da	65 36		adc $36				adc 	zTemp0 						; go to next token
.86dc	85 36		sta $36				sta 	zTemp0
.86de	90 f3		bcc $86d3			bcc 	_LCFindText
.86e0	e6 37		inc $37				inc 	zTemp0+1
.86e2	80 ef		bra $86d3			bra 	_LCFindText
.86e4					_LCFoundText:
.86e4	5a		phy				phy 								; save List position
.86e5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.86e7	aa		tax				tax
.86e8	a0 02		ldy #$02			ldy 	#2
.86ea					_LCCopyToken:
.86ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.86ec	20 2d 87	jsr $872d			jsr 	LCLWrite
.86ef	c8		iny				iny
.86f0	ca		dex				dex
.86f1	d0 f7		bne $86ea			bne 	_LCCopyToken
.86f3	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.86f5	f0 05		beq $86fc			beq 	_LCNoSpace
.86f7	a9 20		lda #$20			lda 	#' '
.86f9	20 2d 87	jsr $872d			jsr 	LCLWrite
.86fc					_LCNoSpace:
.86fc	7a		ply				ply 								; restore position.
.86fd	c8		iny				iny 								; consume token
.86fe	4c 46 86	jmp $8646			jmp 	_LCMainLoop 				; and go around again.
.8701					_LCData:
.8701	48		pha				pha 								; save type $FE/$FF
.8702	a2 23		ldx #$23			ldx 	#'#' 						; figure out # or "
.8704	c9 fe		cmp #$fe			cmp 	#$FE
.8706	f0 02		beq $870a			beq 	_LCHaveOpener
.8708	a2 22		ldx #$22			ldx 	#'"'
.870a					_LCHaveOpener:
.870a	8a		txa				txa 								; output prefix (# or ")
.870b	20 2d 87	jsr $872d			jsr 	LCLWrite
.870e	c8		iny				iny 								; get count
.870f	b1 30		lda ($30),y			lda 	(codePtr),y
.8711	aa		tax				tax
.8712	c8		iny				iny 								; point at first character
.8713					_LCOutData:
.8713	b1 30		lda ($30),y			lda 	(codePtr),y
.8715	c9 00		cmp #$00			cmp 	#0
.8717	f0 03		beq $871c			beq 	_LCNoPrint
.8719	20 2d 87	jsr $872d			jsr 	LCLWrite
.871c					_LCNoPrint:
.871c	c8		iny				iny
.871d	ca		dex				dex
.871e	d0 f3		bne $8713			bne 	_LCOutData
.8720	68		pla				pla 								; closing " required ?
.8721	c9 ff		cmp #$ff			cmp 	#$FF
.8723	d0 05		bne $872a			bne 	_LCNoQuote
.8725	a9 22		lda #$22			lda 	#'"'
.8727	20 2d 87	jsr $872d			jsr 	LCLWrite
.872a					_LCNoQuote:
.872a	4c 46 86	jmp $8646			jmp 	_LCMainLoop
.872d					LCLWrite:
.872d	da		phx				phx
.872e	ae 1b 07	ldx $071b			ldx 	tbOffset
.8731	9d 1f 07	sta $071f,x			sta 	tokenBuffer,x
.8734	9e 20 07	stz $0720,x			stz 	tokenBuffer+1,x
.8737	ee 1b 07	inc $071b			inc 	tbOffset
.873a	fa		plx				plx
.873b	60		rts				rts
.873c					LCCheckSpaceRequired:
.873c	ae 1b 07	ldx $071b			ldx 	tbOffset
.873f	bd 1e 07	lda $071e,x			lda 	tokenBuffer-1,x 			; previous character
.8742	20 5b 87	jsr $875b			jsr 	LCLLowerCase 				; saves a little effort
.8745	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8747	90 11		bcc $875a			bcc 	_LCCSRExit
.8749	c9 3a		cmp #$3a			cmp 	#"9"+1
.874b	90 08		bcc $8755			bcc 	_LCCSRSpace
.874d	c9 61		cmp #$61			cmp 	#"a"
.874f	90 09		bcc $875a			bcc 	_LCCSRExit
.8751	c9 7b		cmp #$7b			cmp 	#"z"+1
.8753	b0 05		bcs $875a			bcs 	_LCCSRExit
.8755					_LCCSRSpace:
.8755	a9 20		lda #$20			lda 	#' '
.8757	20 2d 87	jsr $872d			jsr 	LCLWrite
.875a					_LCCSRExit:
.875a	60		rts				rts
.875b					LCLLowerCase:
.875b	c9 41		cmp #$41			cmp 	#"A"
.875d	90 06		bcc $8765			bcc 	_LCLLCOut
.875f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8761	b0 02		bcs $8765			bcs 	_LCLLCOut
.8763	69 20		adc #$20			adc 	#$20
.8765					_LCLLCOut:
.8765	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8766					ProcedureScan:
.8766	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8768	85 30		sta $30				sta 	codePtr
.876a	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.876c	85 31		sta $31				sta 	codePtr+1
.876e					_PSLoop:
.876e	b2 30		lda ($30)			lda 	(codePtr)
.8770	f0 42		beq $87b4			beq 	_PSExit
.8772	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8774	b1 30		lda ($30),y			lda 	(codePtr),y
.8776	c9 98		cmp #$98			cmp 	#KWD_PROC
.8778	d0 2d		bne $87a7			bne 	_PSNext
.877a	c8		iny				iny 								; get the address of the record to zTemp0 and
.877b	b1 30		lda ($30),y			lda 	(codePtr),y
.877d	29 c0		and #$c0			and 	#$C0
.877f	c9 40		cmp #$40			cmp 	#$40
.8781	d0 32		bne $87b5			bne 	_PSSyntax
.8783	b1 30		lda ($30),y			lda 	(codePtr),y
.8785	18		clc				clc
.8786	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8788	85 37		sta $37				sta 	zTemp0+1
.878a	c8		iny				iny 								; LSB
.878b	b1 30		lda ($30),y			lda 	(codePtr),y
.878d	85 36		sta $36				sta 	zTemp0
.878f	c8		iny				iny 								; character after variable call.
.8790	98		tya				tya 								; save Y offset at +7
.8791	a0 07		ldy #$07			ldy 	#7
.8793	91 36		sta ($36),y			sta 	(zTemp0),y
.8795	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8797	a0 02		ldy #$02			ldy 	#2
.8799	91 36		sta ($36),y			sta 	(zTemp0),y
.879b	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.879d					_PSCopy:
.879d	b5 30		lda $30,x			lda 	safePtr,x
.879f	c8		iny				iny
.87a0	91 36		sta ($36),y			sta 	(zTemp0),y
.87a2	e8		inx				inx
.87a3	e0 04		cpx #$04			cpx 	#4
.87a5	d0 f6		bne $879d			bne 	_PSCopy
.87a7					_PSNext:
.87a7	18		clc				clc
.87a8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87aa	65 30		adc $30				adc 	codePtr
.87ac	85 30		sta $30				sta 	codePtr
.87ae	90 02		bcc $87b2			bcc 	_CREExit
.87b0	e6 31		inc $31				inc 	codePtr+1
.87b2					_CREExit:
.87b2	80 ba		bra $876e			bra 	_PSLoop
.87b4					_PSExit:
.87b4	60		rts				rts
.87b5					_PSSyntax:
.87b5	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.87b8					ScanForward:
.87b8	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.87ba	86 37		stx $37				stx 	zTemp0+1
.87bc	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.87be					_ScanLoop:
.87be	b1 30		lda ($30),y			lda 	(codePtr),y
.87c0	c8		iny				iny
.87c1	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.87c3	d0 0e		bne $87d3			bne 	_ScanGoNext
.87c5	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.87c7	f0 04		beq $87cd			beq 	_ScanMatch
.87c9	c5 37		cmp $37				cmp 	zTemp0+1
.87cb	d0 06		bne $87d3			bne 	_ScanGoNext
.87cd					_ScanMatch:
.87cd	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.87cf	d0 01		bne $87d2			bne 	_ScanNotEndEOL
.87d1	88		dey				dey
.87d2					_ScanNotEndEOL:
.87d2	60		rts				rts
.87d3					_ScanGoNext:
.87d3	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.87d5	90 e7		bcc $87be			bcc 	_ScanLoop
.87d7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.87d9	90 18		bcc $87f3			bcc 	_ScanSkipOne
.87db	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.87dd	b0 2f		bcs $880e			bcs 	_ScanSkipData
.87df	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.87e1	90 db		bcc $87be			bcc 	_ScanLoop 					; if not, ordinary keywords.
.87e3	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.87e5	b0 d7		bcs $87be			bcs 	_ScanLoop
.87e7	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.87e9	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.87eb	b0 d1		bcs $87be			bcs 	_ScanLoop
.87ed	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.87ef	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.87f1	80 cb		bra $87be			bra 	_ScanLoop
.87f3					_ScanSkipOne:
.87f3	c8		iny				iny 								; consume the extra one.
.87f4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.87f6	d0 c6		bne $87be			bne 	_ScanLoop
.87f8	18		clc				clc
.87f9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87fb	65 30		adc $30				adc 	codePtr
.87fd	85 30		sta $30				sta 	codePtr
.87ff	90 02		bcc $8803			bcc 	_CREExit
.8801	e6 31		inc $31				inc 	codePtr+1
.8803					_CREExit:
.8803	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8805	b2 30		lda ($30)			lda 	(codePtr)
.8807	d0 b5		bne $87be			bne 	_ScanLoop 					; if not zero, more to scan
.8809	a9 13		lda #$13		lda	#19
.880b	4c 46 88	jmp $8846		jmp	ErrorHandler
.880e					_ScanSkipData:
.880e	88		dey				dey 								; point at data token
.880f	c8		iny				iny
.8810	98		tya				tya
.8811	38		sec				sec
.8812	71 30		adc ($30),y			adc 	(codePtr),y
.8814	a8		tay				tay
.8815	80 a7		bra $87be			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8817					Command_WHILE:
.8817	5a		phy				phy 								; save position of the test
.8818	a2 00		ldx #$00			ldx 	#0
.881a	20 ed 92	jsr $92ed			jsr 	EvaluateNumber 				; work out the number
.881d	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; check if zero
.8820	f0 0e		beq $8830			beq 	_WHExitLoop 				; if so exit the loop
.8822	98		tya				tya 								; position *after* test.
.8823	7a		ply				ply 								; restore position before test, at WHILE
.8824	88		dey				dey
.8825	48		pha				pha 								; push after test on the stack
.8826	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8828	20 d6 93	jsr $93d6			jsr 	StackOpen
.882b	20 08 94	jsr $9408			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.882e	7a		ply				ply 								; restore the position *after* the test
.882f	60		rts				rts
.8830					_WHExitLoop:
.8830	68		pla				pla 								; throw post loop position
.8831	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8833	aa		tax				tax
.8834	20 b8 87	jsr $87b8			jsr 	ScanForward
.8837	60		rts				rts
.8838					Command_WEND:
.8838	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.883a	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.883c	20 fd 93	jsr $93fd			jsr 	StackCheckFrame
.883f	20 19 94	jsr $9419			jsr 	STKLoadCodePosition 		; loop back
.8842	20 ef 93	jsr $93ef			jsr 	StackClose		 			; erase the frame
.8845	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.993f					CheckRightBracket:
.993f	b1 30		lda ($30),y			lda 	(codePtr),y
.9941	c8		iny				iny
.9942	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9944	d0 0f		bne $9955			bne 	CNAFail
.9946	60		rts				rts
.9947					CheckComma:
.9947	b1 30		lda ($30),y			lda 	(codePtr),y
.9949	c8		iny				iny
.994a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.994c	d0 07		bne $9955			bne 	CNAFail
.994e	60		rts				rts
.994f					CheckNextA:
.994f	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9951	d0 02		bne $9955			bne 	CNAFail
.9953	c8		iny				iny 								; skip character
.9954	60		rts				rts 								; and exit
.9955					CNAFail:
.9955	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8846					ErrorHandler:
.8846	a8		tay				tay 								; find the error text
.8847	f0 49		beq $8892			beq 	_EHEnd
.8849	a2 00		ldx #$00			ldx 	#0
.884b	a9 28		lda #$28			lda 	#((ErrorText) & $FF)
.884d	85 36		sta $36				sta 	0+zTemp0
.884f	a9 9e		lda #$9e			lda 	#((ErrorText) >> 8)
.8851	85 37		sta $37				sta 	1+zTemp0
.8853					_EHFind:
.8853	88		dey				dey 								; found the error text ?
.8854	f0 0e		beq $8864			beq 	_EHFound
.8856					_EHFindZero:
.8856	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8858	e6 36		inc $36				inc 	zTemp0
.885a	d0 02		bne $885e			bne 	_EHFNoCarry
.885c	e6 37		inc $37				inc 	zTemp0+1
.885e					_EHFNoCarry:
.885e	c9 00		cmp #$00			cmp 	#0
.8860	d0 f4		bne $8856			bne 	_EHFindZero
.8862	80 ef		bra $8853			bra 	_EHFind
.8864					_EHFound:
.8864	a5 36		lda $36				lda 	zTemp0 						; print message
.8866	a6 37		ldx $37				ldx 	zTemp0+1
.8868	20 9f 88	jsr $889f			jsr 	PrintStringXA
.886b	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.886d	b1 30		lda ($30),y			lda 	(codePtr),y
.886f	d0 05		bne $8876			bne 	_EHAtMsg
.8871	c8		iny				iny
.8872	b1 30		lda ($30),y			lda 	(codePtr),y
.8874	f0 17		beq $888d			beq 	_EHCREnd
.8876					_EHAtMsg:
.8876	a2 88		ldx #$88			ldx 	#_AtMsg >> 8 				; print " at "
.8878	a9 95		lda #$95			lda 	#_AtMsg & $FF
.887a	20 9f 88	jsr $889f			jsr 	PrintStringXA
.887d	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.887f	b1 30		lda ($30),y			lda 	(codePtr),y
.8881	48		pha				pha
.8882	c8		iny				iny
.8883	b1 30		lda ($30),y			lda 	(codePtr),y
.8885	aa		tax				tax
.8886	68		pla				pla
.8887	20 9b 9a	jsr $9a9b			jsr 	ConvertInt16 				; convert XA to string
.888a	20 9f 88	jsr $889f			jsr 	PrintStringXA 				; and print it.
.888d					_EHCREnd:
.888d	a9 0d		lda #$0d			lda 	#13 						; new line
.888f	20 72 a0	jsr $a072			jsr 	EXTPrintCharacter
.8892					_EHEnd:
.8892	4c 0c 80	jmp $800c			jmp 	WarmStart
>8895	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>889d	20 00
.889f					PrintStringXA:
.889f	5a		phy				phy
.88a0	86 37		stx $37				stx 	zTemp0+1
.88a2	85 36		sta $36				sta 	zTemp0
.88a4	a0 00		ldy #$00			ldy 	#0
.88a6					_PSXALoop:
.88a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.88a8	f0 06		beq $88b0			beq 	_PSXAExit
.88aa	20 72 a0	jsr $a072			jsr 	EXTPrintCharacter
.88ad	c8		iny				iny
.88ae	80 f6		bra $88a6			bra 	_PSXALoop
.88b0					_PSXAExit:
.88b0	7a		ply				ply
.88b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.88b2					UnaryTrue:
.88b2	fa		plx				plx
.88b3					ReturnTrue:
.88b3	a9 01		lda #$01			lda 	#1  						; set to 1
.88b5	20 9b 93	jsr $939b			jsr 	NSMSetByte
.88b8	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.88ba	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88bd	60		rts				rts
.88be					UnaryFalse:
.88be	fa		plx				plx
.88bf					ReturnFalse:
.88bf	4c 99 93	jmp $9399			jmp 	NSMSetZero 					; set it all to zero
.88c2					BinaryCompareEqual:
.88c2	fa		plx				plx
.88c3	20 fe 88	jsr $88fe			jsr 	CompareBaseCode
.88c6	c9 00		cmp #$00			cmp 	#0
.88c8	f0 e9		beq $88b3			beq 	ReturnTrue
.88ca	80 f3		bra $88bf			bra 	ReturnFalse
.88cc					BinaryCompareLess:
.88cc	fa		plx				plx
.88cd	20 fe 88	jsr $88fe			jsr 	CompareBaseCode
.88d0	c9 ff		cmp #$ff			cmp 	#$FF
.88d2	f0 df		beq $88b3			beq 	ReturnTrue
.88d4	80 e9		bra $88bf			bra 	ReturnFalse
.88d6					BinaryCompareGreater:
.88d6	fa		plx				plx
.88d7	20 fe 88	jsr $88fe			jsr 	CompareBaseCode
.88da	c9 01		cmp #$01			cmp 	#1
.88dc	f0 d5		beq $88b3			beq 	ReturnTrue
.88de	80 df		bra $88bf			bra 	ReturnFalse
.88e0					BinaryCompareNotEqual:
.88e0	fa		plx				plx
.88e1	20 fe 88	jsr $88fe			jsr 	CompareBaseCode
.88e4	c9 00		cmp #$00			cmp 	#0
.88e6	d0 cb		bne $88b3			bne 	ReturnTrue
.88e8	80 d5		bra $88bf			bra 	ReturnFalse
.88ea					BinaryCompareLessEqual:
.88ea	fa		plx				plx
.88eb	20 fe 88	jsr $88fe			jsr 	CompareBaseCode
.88ee	c9 01		cmp #$01			cmp 	#1
.88f0	d0 c1		bne $88b3			bne 	ReturnTrue
.88f2	80 cb		bra $88bf			bra 	ReturnFalse
.88f4					BinaryCompareGreaterEqual:
.88f4	fa		plx				plx
.88f5	20 fe 88	jsr $88fe			jsr 	CompareBaseCode
.88f8	c9 ff		cmp #$ff			cmp 	#$FF
.88fa	d0 b7		bne $88b3			bne 	ReturnTrue
.88fc	80 c1		bra $88bf			bra 	ReturnFalse
.88fe					CompareBaseCode:
.88fe	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; make both values if references.
.8901	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8904	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8907	29 10		and #$10			and 	#NSTString
.8909	d0 40		bne $894b			bne 	_CBCString
.890b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.890e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8911	d0 3b		bne $894e			bne 	_CBCFloat
.8913	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8916	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8919	29 08		and #$08			and 	#NSTFloat
.891b	d0 31		bne $894e			bne 	_CBCFloat
.891d	20 51 89	jsr $8951			jsr 	CompareFixMinusZero
.8920	e8		inx				inx
.8921	20 51 89	jsr $8951			jsr 	CompareFixMinusZero
.8924	ca		dex				dex
.8925	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8928	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.892b	10 0b		bpl $8938			bpl 	_CDCSameSign
.892d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8930	30 16		bmi $8948			bmi 	_CBCLess 					; return $FF
.8932					_CBCGreater:
.8932	a9 01		lda #$01			lda 	#1
.8934	60		rts				rts
.8935					_CBCEqual:
.8935	a9 00		lda #$00			lda 	#0
.8937	60		rts				rts
.8938					_CDCSameSign:
.8938	20 61 8a	jsr $8a61			jsr 	SubTopTwoStack 				; unsigned subtract
.893b	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; or the mantissa together
.893e	f0 f5		beq $8935			beq 	_CBCEqual 					; -0 == 0
.8940	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8943	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8946	10 ea		bpl $8932			bpl 	_CBCGreater
.8948					_CBCLess:
.8948	a9 ff		lda #$ff			lda 	#$FF
.894a	60		rts				rts
.894b					_CBCString:
.894b	4c b7 89	jmp $89b7			jmp 	CompareStrings
.894e					_CBCFloat:
.894e	4c 97 9b	jmp $9b97			jmp 	CompareFloat
.8951					CompareFixMinusZero:
.8951	20 c9 93	jsr $93c9			jsr 	NSMIsZero
.8954	d0 03		bne $8959			bne 	_CFXMZNotZero
.8956	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8959					_CFXMZNotZero:
.8959	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.895a					StringConcat:
.895a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.895d	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8960	29 18		and #$18			and 	#NSBTypeMask
.8962	c9 10		cmp #$10			cmp 	#NSTString
.8964	d0 4e		bne $89b4			bne		_SCType
.8966	64 38		stz $38				stz 	zTemp1 						; counting total length
.8968	e8		inx				inx
.8969	20 87 89	jsr $8987			jsr 	_SCSetupZ0 					; setup for second
.896c	20 92 89	jsr $8992			jsr 	_SCLengthZ0 				; length for second
.896f	ca		dex				dex
.8970	20 87 89	jsr $8987			jsr 	_SCSetupZ0 					; setup for first
.8973	20 92 89	jsr $8992			jsr 	_SCLengthZ0 				; length for first
.8976	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8978	20 09 a0	jsr $a009			jsr 	StringTempAllocate
.897b	20 a5 89	jsr $89a5			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.897e	e8		inx				inx
.897f	20 87 89	jsr $8987			jsr 	_SCSetupZ0 					; copy second out
.8982	20 a5 89	jsr $89a5			jsr 	_SCCopy
.8985	ca		dex				dex
.8986	60		rts				rts
.8987					_SCSetupZ0:
.8987	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.898a	85 36		sta $36				sta 	zTemp0
.898c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.898f	85 37		sta $37				sta 	zTemp0+1
.8991	60		rts				rts
.8992					_SCLengthZ0:
.8992	5a		phy				phy
.8993	a0 00		ldy #$00			ldy 	#0
.8995					_SCLenLoop:
.8995	b1 36		lda ($36),y			lda 	(zTemp0),y
.8997	f0 0a		beq $89a3			beq 	_SCLExit
.8999	c8		iny				iny
.899a	e6 38		inc $38				inc 	zTemp1
.899c	10 f7		bpl $8995			bpl		_SCLenLoop
.899e	a9 09		lda #$09		lda	#9
.89a0	4c 46 88	jmp $8846		jmp	ErrorHandler
.89a3					_SCLExit:
.89a3	7a		ply				ply
.89a4	60		rts				rts
.89a5					_SCCopy:
.89a5	5a		phy				phy
.89a6	a0 00		ldy #$00			ldy 	#0
.89a8					_SCCopyLoop:
.89a8	b1 36		lda ($36),y			lda 	(zTemp0),y
.89aa	f0 06		beq $89b2			beq 	_SCCExit
.89ac	20 47 a0	jsr $a047			jsr 	StringTempWrite
.89af	c8		iny				iny
.89b0	80 f6		bra $89a8			bra 	_SCCopyLoop
.89b2					_SCCExit:
.89b2	7a		ply				ply
.89b3	60		rts				rts
.89b4					_SCType:
.89b4	4c 19 9e	jmp $9e19			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9958					IntegerDivide:
.9958	fa		plx				plx
.9959	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.995c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.995f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9960	0a		asl a				asl 	a
.9961	10 05		bpl $9968			bpl 	_NotRef
.9963	48		pha				pha
.9964	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9967	68		pla				pla
.9968					_NotRef:
.9968	0a		asl a				asl 	a
.9969	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.996b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.996e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9971	f0 03		beq $9976			beq 	_IntegerCode 				; if clear, then we have two integers
.9973	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.9976					_IntegerCode:
.9976	20 98 99	jsr $9998			jsr 	CheckDivideZero 			; do div zero check
.9979	20 d0 99	jsr $99d0			jsr 	Int32Divide 				; do the division
.997c	20 8d 9a	jsr $9a8d			jsr 	CalculateSign 				; calculate result sign
.997f					NSMCopyPlusTwoToZero:
.997f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9982	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9985	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9988	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.998b	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.998e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9991	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9994	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9997	60		rts				rts
.9998					CheckDivideZero:
.9998	e8		inx				inx
.9999	20 c9 93	jsr $93c9			jsr 	NSMIsZero
.999c	f0 02		beq $99a0			beq 	_CDVError
.999e	ca		dex				dex
.999f	60		rts				rts
.99a0					_CDVError:
.99a0	a9 03		lda #$03		lda	#3
.99a2	4c 46 88	jmp $8846		jmp	ErrorHandler
.99a5					IntegerModulus:
.99a5	fa		plx				plx
.99a6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.99a9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.99ac	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99ad	0a		asl a				asl 	a
.99ae	10 05		bpl $99b5			bpl 	_NotRef
.99b0	48		pha				pha
.99b1	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99b4	68		pla				pla
.99b5					_NotRef:
.99b5	0a		asl a				asl 	a
.99b6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99b8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99bb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.99be	f0 03		beq $99c3			beq 	_IntegerCode 				; if clear, then we have two integers
.99c0	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.99c3					_IntegerCode:
.99c3	20 98 99	jsr $9998			jsr 	CheckDivideZero 			; do div zero check
.99c6	20 d0 99	jsr $99d0			jsr 	Int32Divide 				; do the division
.99c9	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.99cc	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.99cf	60		rts				rts
.99d0					Int32Divide:
.99d0	48		pha				pha 								; save AXY
.99d1	5a		phy				phy
.99d2	20 70 93	jsr $9370			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99d5	20 95 93	jsr $9395			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.99d8	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.99da					_I32DivideLoop:
.99da	e8		inx				inx
.99db	e8		inx				inx
.99dc	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.99df	ca		dex				dex
.99e0	ca		dex				dex
.99e1	20 af 93	jsr $93af			jsr 	NSMRotateLeft
.99e4	20 10 9a	jsr $9a10			jsr 	DivideCheckSubtract 		; check if subtract possible
.99e7	90 03		bcc $99ec			bcc 	_I32DivideNoCarryIn
.99e9	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.99ec					_I32DivideNoCarryIn:
.99ec	88		dey				dey 								; loop round till division completed.
.99ed	d0 eb		bne $99da			bne 	_I32DivideLoop
.99ef	7a		ply				ply 								; restore AXY and exit
.99f0	68		pla				pla
.99f1	60		rts				rts
.99f2					Int32ShiftDivide:
.99f2	48		pha				pha 								; save AY
.99f3	5a		phy				phy
.99f4	e8		inx				inx 								; clear S[X+2]
.99f5	e8		inx				inx
.99f6	20 99 93	jsr $9399			jsr 	NSMSetZero
.99f9	ca		dex				dex
.99fa	ca		dex				dex
.99fb	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.99fd					_I32SDLoop:
.99fd	20 10 9a	jsr $9a10			jsr 	DivideCheckSubtract 		; check if subtract possible
.9a00	e8		inx				inx
.9a01	e8		inx				inx
.9a02	20 af 93	jsr $93af			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9a05	ca		dex				dex
.9a06	ca		dex				dex
.9a07	20 af 93	jsr $93af			jsr 	NSMRotateLeft
.9a0a	88		dey				dey 	 							; do 31 times
.9a0b	d0 f0		bne $99fd			bne 	_I32SDLoop
.9a0d	7a		ply				ply 								; restore AY and exit
.9a0e	68		pla				pla
.9a0f	60		rts				rts
.9a10					DivideCheckSubtract:
.9a10	20 61 8a	jsr $8a61			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9a13	b0 04		bcs $9a19			bcs 	_DCSExit 					; if carry set, then could do, exit
.9a15	20 3b 8a	jsr $8a3b			jsr 	AddTopTwoStack 				; add it back in
.9a18	18		clc				clc 								; and return False
.9a19					_DCSExit:
.9a19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9a1a					MulInteger:
.9a1a	fa		plx				plx
.9a1b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9a1e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9a21	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a22	0a		asl a				asl 	a
.9a23	10 05		bpl $9a2a			bpl 	_NotRef
.9a25	48		pha				pha
.9a26	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a29	68		pla				pla
.9a2a					_NotRef:
.9a2a	0a		asl a				asl 	a 							; put MSB of type into A:7
.9a2b	30 0b		bmi $9a38			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a2d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a30	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9a33	f0 06		beq $9a3b			beq 	_IntegerCode 				; if clear, then we have two integers
.9a35	4c 6e 9c	jmp $9c6e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9a38					_StringData:
.9a38	4c 23 9e	jmp $9e23			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9a3b					_IntegerCode:
.9a3b	20 48 9a	jsr $9a48			jsr 	MultiplyShort
.9a3e	c9 00		cmp #$00			cmp 	#0
.9a40	f0 05		beq $9a47			beq 	_MIExit
.9a42	a9 04		lda #$04		lda	#4
.9a44	4c 46 88	jmp $8846		jmp	ErrorHandler
.9a47					_MIExit:
.9a47	60		rts				rts
.9a48					MultiplyShort:
.9a48	5a		phy				phy 								; save Y
.9a49	20 70 93	jsr $9370			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9a4c	20 95 93	jsr $9395			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9a4f	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9a51					_I32MLoop:
.9a51	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9a54	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9a57	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9a5a	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9a5d	f0 28		beq $9a87			beq 	_I32MExit 					; exit if zero
.9a5f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a62	29 01		and #$01			and 	#1
.9a64	f0 0e		beq $9a74			beq 	_I32MNoAdd
.9a66	20 3b 8a	jsr $8a3b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a69	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a6c	10 06		bpl $9a74			bpl 	_I32MNoAdd
.9a6e					_I32ShiftRight:
.9a6e	20 bc 93	jsr $93bc			jsr 	NSMShiftRight 				; shift S[X] right
.9a71	c8		iny				iny 								; increment shift count
.9a72	80 0a		bra $9a7e			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a74					_I32MNoAdd:
.9a74	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a77	70 f5		bvs $9a6e			bvs 	_I32ShiftRight 				; instead.
.9a79	e8		inx				inx
.9a7a	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a7d	ca		dex				dex
.9a7e					_I32MShiftUpper:
.9a7e	e8		inx				inx 								; shift S[X+2] right
.9a7f	e8		inx				inx
.9a80	20 bc 93	jsr $93bc			jsr 	NSMShiftRight
.9a83	ca		dex				dex
.9a84	ca		dex				dex
.9a85	80 ca		bra $9a51			bra 	_I32MLoop 					; try again.
.9a87					_I32MExit:
.9a87	20 8d 9a	jsr $9a8d			jsr 	CalculateSign
.9a8a	98		tya				tya 								; shift in A
.9a8b	7a		ply				ply 								; restore Y and exit
.9a8c	60		rts				rts
.9a8d					CalculateSign:
.9a8d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a90	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9a93	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9a96	0a		asl a				asl 	a 							; shift bit 7 into carry
.9a97	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9a9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.89b7					CompareStrings:
.89b7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.89ba	3d 01 06	and $0601,x			and 	NSStatus+1,x
.89bd	29 10		and #$10			and 	#NSBIsString
.89bf	f0 2c		beq $89ed			beq 	_CSTypeError
.89c1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.89c4	85 36		sta $36				sta 	zTemp0
.89c6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89c9	85 37		sta $37				sta 	zTemp0+1
.89cb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89ce	85 38		sta $38				sta 	zTemp1
.89d0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89d3	85 39		sta $39				sta 	zTemp1+1
.89d5	5a		phy				phy 								; save Y so we can access strings
.89d6	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.89d8					_CSLoop:
.89d8	c8		iny				iny
.89d9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.89db	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.89dd	d0 06		bne $89e5			bne 	_CSDifferent
.89df	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.89e1	d0 f5		bne $89d8			bne 	_CSLoop 					; still comparing
.89e3					_CSExit:
.89e3	7a		ply				ply 								; reached end, return zero in A from EOS
.89e4	60		rts				rts
.89e5					_CSDifferent:
.89e5	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.89e7	90 fa		bcc $89e3			bcc		_CSExit
.89e9	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.89eb	80 f6		bra $89e3			bra 	_CSExit
.89ed					_CSTypeError:
.89ed	4c 19 9e	jmp $9e19			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.89f0					ShiftLeft:
.89f0	38		sec				sec
.89f1	80 01		bra $89f4			bra 	ShiftMain
.89f3					ShiftRight:
.89f3	18		clc				clc
.89f4					ShiftMain:
.89f4	fa		plx				plx 								; restore X
.89f5	08		php				php 								; save direction
.89f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.89f9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.89fc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.89fd	0a		asl a				asl 	a
.89fe	10 05		bpl $8a05			bpl 	_NotRef
.8a00	48		pha				pha
.8a01	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a04	68		pla				pla
.8a05					_NotRef:
.8a05	0a		asl a				asl 	a
.8a06	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8a08	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8a0b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8a0e	f0 03		beq $8a13			beq 	_IntegerCode 				; if clear, then we have two integers
.8a10	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.8a13					_IntegerCode:
.8a13	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8a16	29 e0		and #$e0			and 	#$E0
.8a18	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8a1b	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8a1e	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8a21	d0 13		bne $8a36			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8a23					_SMLoop:
.8a23	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8a26	30 11		bmi $8a39			bmi 	_SMExit 					; exit if done.
.8a28	28		plp				plp 								; restore direcition setting
.8a29	08		php				php
.8a2a	90 05		bcc $8a31			bcc 	_SMRight
.8a2c	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; shift left if CS
.8a2f	80 f2		bra $8a23			bra 	_SMLoop
.8a31					_SMRight:
.8a31	20 bc 93	jsr $93bc			jsr 	NSMShiftRight 				; shift right if CC
.8a34	80 ed		bra $8a23			bra 	_SMLoop
.8a36					_SMExit0:
.8a36	20 99 93	jsr $9399			jsr 	NSMSetZero 					; return zero.
.8a39					_SMExit:
.8a39	28		plp				plp 								; throw direction
.8a3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8a3b					AddTopTwoStack:
.8a3b	18		clc				clc
.8a3c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8a3f	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8a42	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a45	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8a48	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8a4b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a4e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8a51	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8a54	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a57	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8a5a	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8a5d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a60	60		rts				rts
.8a61					SubTopTwoStack:
.8a61	38		sec				sec
.8a62	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8a65	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8a68	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a6b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8a6e	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8a71	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a74	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8a77	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8a7a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a7d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8a80	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8a83	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a86	60		rts				rts
.8a87					AddInteger:
.8a87	fa		plx				plx
.8a88	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a8b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8a8e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8a8f	0a		asl a				asl 	a
.8a90	10 05		bpl $8a97			bpl 	_NotRef
.8a92	48		pha				pha
.8a93	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8a96	68		pla				pla
.8a97					_NotRef:
.8a97	0a		asl a				asl 	a 							; put MSB of type into A:7
.8a98	30 0b		bmi $8aa5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8a9a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8a9d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8aa0	f0 06		beq $8aa8			beq 	_IntegerCode 				; if clear, then we have two integers
.8aa2	4c f6 9a	jmp $9af6			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8aa5					_StringData:
.8aa5	4c 5a 89	jmp $895a			jmp 	StringConcat							; at least one string - don't know both are strings.
.8aa8					_IntegerCode:
.8aa8					AddCode:
.8aa8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8aab	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8aae	10 8b		bpl $8a3b			bpl 	AddTopTwoStack
.8ab0	20 61 8a	jsr $8a61			jsr 	SubTopTwoStack 				; do a physical subtraction
.8ab3	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8ab6	10 09		bpl $8ac1			bpl 	_AddExit
.8ab8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8abb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8abe	20 4e 93	jsr $934e			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8ac1					_AddExit:
.8ac1	60		rts				rts
.8ac2					SubInteger:
.8ac2	fa		plx				plx
.8ac3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ac6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ac9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8aca	0a		asl a				asl 	a
.8acb	10 05		bpl $8ad2			bpl 	_NotRef
.8acd	48		pha				pha
.8ace	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ad1	68		pla				pla
.8ad2					_NotRef:
.8ad2	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ad3	30 0b		bmi $8ae0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ad5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ad8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8adb	f0 06		beq $8ae3			beq 	_IntegerCode 				; if clear, then we have two integers
.8add	4c fb 9a	jmp $9afb			jmp 	FloatingPointSub 							; otherwise at least one float.
.8ae0					_StringData:
.8ae0	4c 23 9e	jmp $9e23			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8ae3					_IntegerCode:
.8ae3	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8ae6	49 80		eor #$80			eor 	#$80
.8ae8	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8aeb	80 bb		bra $8aa8			bra 	AddCode 					; and do the same code as add.
.8aed					AndInteger:
.8aed	fa		plx				plx
.8aee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8af1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8af4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8af5	0a		asl a				asl 	a
.8af6	10 05		bpl $8afd			bpl 	_NotRef
.8af8	48		pha				pha
.8af9	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8afc	68		pla				pla
.8afd					_NotRef:
.8afd	0a		asl a				asl 	a
.8afe	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b00	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b03	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b06	f0 03		beq $8b0b			beq 	_IntegerCode 				; if clear, then we have two integers
.8b08	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.8b0b					_IntegerCode:
.8b0b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8b0e	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8b11	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b14	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8b17	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8b1a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b1d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8b20	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8b23	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b26	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8b29	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8b2c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b2f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8b32	60		rts				rts
.8b33					OraInteger:
.8b33	fa		plx				plx
.8b34	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b37	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b3a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b3b	0a		asl a				asl 	a
.8b3c	10 05		bpl $8b43			bpl 	_NotRef
.8b3e	48		pha				pha
.8b3f	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b42	68		pla				pla
.8b43					_NotRef:
.8b43	0a		asl a				asl 	a
.8b44	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b46	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b49	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b4c	f0 03		beq $8b51			beq 	_IntegerCode 				; if clear, then we have two integers
.8b4e	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.8b51					_IntegerCode:
.8b51	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8b54	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8b57	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b5a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8b5d	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8b60	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b63	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8b66	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8b69	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b6c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8b6f	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8b72	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b75	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8b78	60		rts				rts
.8b79					EorInteger:
.8b79	fa		plx				plx
.8b7a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b7d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b80	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b81	0a		asl a				asl 	a
.8b82	10 05		bpl $8b89			bpl 	_NotRef
.8b84	48		pha				pha
.8b85	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b88	68		pla				pla
.8b89					_NotRef:
.8b89	0a		asl a				asl 	a
.8b8a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b8c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b8f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b92	f0 03		beq $8b97			beq 	_IntegerCode 				; if clear, then we have two integers
.8b94	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.8b97					_IntegerCode:
.8b97	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8b9a	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8b9d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ba0	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ba3	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8ba6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ba9	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8bac	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8baf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bb2	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8bb5	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8bb8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8bbb	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8bbe	60		rts				rts
.8bbf					WordIndirect:
.8bbf	fa		plx				plx
.8bc0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8bc3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8bc6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8bc7	0a		asl a				asl 	a
.8bc8	10 05		bpl $8bcf			bpl 	_NotRef
.8bca	48		pha				pha
.8bcb	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8bce	68		pla				pla
.8bcf					_NotRef:
.8bcf	0a		asl a				asl 	a
.8bd0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8bd2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8bd5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8bd8	f0 03		beq $8bdd			beq 	_IntegerCode 				; if clear, then we have two integers
.8bda	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.8bdd					_IntegerCode:
.8bdd	20 a8 8a	jsr $8aa8			jsr 	AddCode 					; add the two values
.8be0	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8be2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8be5	60		rts				rts
.8be6					ByteIndirect:
.8be6	fa		plx				plx
.8be7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8bea	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8bed	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8bee	0a		asl a				asl 	a
.8bef	10 05		bpl $8bf6			bpl 	_NotRef
.8bf1	48		pha				pha
.8bf2	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8bf5	68		pla				pla
.8bf6					_NotRef:
.8bf6	0a		asl a				asl 	a
.8bf7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8bf9	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8bfc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8bff	f0 03		beq $8c04			beq 	_IntegerCode 				; if clear, then we have two integers
.8c01	4c 19 9e	jmp $9e19			jmp 	TypeError 					; anything else, type mismatch.
.8c04					_IntegerCode:
.8c04	20 a8 8a	jsr $8aa8			jsr 	AddCode 					; add the two values
.8c07	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8c09	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9a9b					ConvertInt16:
.9a9b	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9a9e	8e 10 06	stx $0610			stx 	NSMantissa1
.9aa1	9c 18 06	stz $0618			stz 	NSMantissa2
.9aa4	9c 20 06	stz $0620			stz 	NSMantissa3
.9aa7	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9aaa	a2 00		ldx #$00			ldx 	#0 							; stack level
.9aac	a9 0a		lda #$0a			lda 	#10 						; base
.9aae	80 00		bra $9ab0			bra 	ConvertInt32
.9ab0					ConvertInt32:
.9ab0	5a		phy				phy
.9ab1	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9ab3	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9ab6	10 08		bpl $9ac0			bpl 	_CI32NotNeg
.9ab8	48		pha				pha
.9ab9	a9 2d		lda #$2d			lda 	#'-'
.9abb	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9abe	c8		iny				iny
.9abf	68		pla				pla
.9ac0					_CI32NotNeg:
.9ac0	20 ce 9a	jsr $9ace			jsr 	_CI32DivideConvert 			; recursive conversion
.9ac3	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9ac5	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9ac8	7a		ply				ply
.9ac9	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9acb	a9 6d		lda #$6d			lda 	#NumberBuffer & $FF
.9acd	60		rts				rts
.9ace					_CI32DivideConvert:
.9ace	e8		inx				inx 								; write to next slot up
.9acf	20 9b 93	jsr $939b			jsr 	NSMSetByte
.9ad2	ca		dex				dex
.9ad3	20 d0 99	jsr $99d0			jsr 	Int32Divide 				; divide
.9ad6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9ad9	48		pha				pha
.9ada	20 7f 99	jsr $997f			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9add	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; is it zero ?
.9ae0	f0 06		beq $9ae8			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9ae2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9ae5	20 ce 9a	jsr $9ace			jsr 	_CI32DivideConvert 			; and recusrively call.
.9ae8					_CI32NoRecurse:
.9ae8	68		pla				pla 								; remainder
.9ae9	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9aeb	90 02		bcc $9aef			bcc 	_CI32NotHex
.9aed	69 26		adc #$26			adc 	#6+32
.9aef					_CI32NotHex:
.9aef	69 30		adc #$30			adc 	#48
.9af1	99 6d 08	sta $086d,y			sta 	NumberBuffer,y 				; write out and exit
.9af4	c8		iny				iny
.9af5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8c0d					PrecedenceLevel:
>8c0d	04					.byte	 4	; $00 <<
>8c0e	02					.byte	 2	; $01 <=
>8c0f	02					.byte	 2	; $02 <>
>8c10	00					.byte	 0	; $03 !!3
>8c11	00					.byte	 0	; $04 ><
>8c12	02					.byte	 2	; $05 >=
>8c13	04					.byte	 4	; $06 >>
>8c14	00					.byte	 0	; $07 !!7
>8c15	00					.byte	 0	; $08 !!8
>8c16	00					.byte	 0	; $09 !!9
>8c17	00					.byte	 0	; $0a !!10
>8c18	00					.byte	 0	; $0b !!11
>8c19	00					.byte	 0	; $0c !!12
>8c1a	00					.byte	 0	; $0d !!13
>8c1b	00					.byte	 0	; $0e !!14
>8c1c	00					.byte	 0	; $0f !!15
>8c1d	00					.byte	 0	; $10 @
>8c1e	00					.byte	 0	; $11 !!17
>8c1f	00					.byte	 0	; $12 !!18
>8c20	00					.byte	 0	; $13 [
>8c21	04					.byte	 4	; $14 \
>8c22	00					.byte	 0	; $15 ]
>8c23	01					.byte	 1	; $16 ^
>8c24	00					.byte	 0	; $17 _
>8c25	00					.byte	 0	; $18 `
>8c26	00					.byte	 0	; $19 !!25
>8c27	00					.byte	 0	; $1a !!26
>8c28	00					.byte	 0	; $1b {
>8c29	01					.byte	 1	; $1c |
>8c2a	00					.byte	 0	; $1d }
>8c2b	00					.byte	 0	; $1e ~
>8c2c	00					.byte	 0	; $1f [7m<7F>[m
>8c2d	00					.byte	 0	; $20
>8c2e	05					.byte	 5	; $21 !
>8c2f	00					.byte	 0	; $22 "
>8c30	00					.byte	 0	; $23 #
>8c31	05					.byte	 5	; $24 $
>8c32	04					.byte	 4	; $25 %
>8c33	01					.byte	 1	; $26 &
>8c34	00					.byte	 0	; $27 '
>8c35	00					.byte	 0	; $28 (
>8c36	00					.byte	 0	; $29 )
>8c37	04					.byte	 4	; $2a *
>8c38	03					.byte	 3	; $2b +
>8c39	00					.byte	 0	; $2c ,
>8c3a	03					.byte	 3	; $2d -
>8c3b	00					.byte	 0	; $2e .
>8c3c	04					.byte	 4	; $2f /
>8c3d	00					.byte	 0	; $30 0
>8c3e	00					.byte	 0	; $31 1
>8c3f	00					.byte	 0	; $32 2
>8c40	00					.byte	 0	; $33 3
>8c41	00					.byte	 0	; $34 4
>8c42	00					.byte	 0	; $35 5
>8c43	00					.byte	 0	; $36 6
>8c44	00					.byte	 0	; $37 7
>8c45	00					.byte	 0	; $38 8
>8c46	00					.byte	 0	; $39 9
>8c47	00					.byte	 0	; $3a :
>8c48	00					.byte	 0	; $3b ;
>8c49	02					.byte	 2	; $3c <
>8c4a	02					.byte	 2	; $3d =
>8c4b	02					.byte	 2	; $3e >
>8c4c	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8c4d					EvaluateExpressionAt0:
.8c4d	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8c4f					EvaluateExpression:
.8c4f	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8c51					EvaluateExpressionAtPrecedence:
.8c51	48		pha				pha 								; save precedence level
.8c52	20 20 8f	jsr $8f20			jsr 	EvaluateTerm 				; evaluate term into level X.
.8c55	68		pla				pla 								; restore precedence level.
.8c56					_EXPRLoop:
.8c56	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8c58	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5a	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8c5c	b0 25		bcs $8c83			bcs 	_EXPRExit
.8c5e	da		phx				phx 								; read the operator precedence
.8c5f	aa		tax				tax
.8c60	bd 0d 8c	lda $8c0d,x			lda 	PrecedenceLevel,x
.8c63	fa		plx				plx
.8c64	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8c66	f0 1b		beq $8c83			beq 	_EXPRExit
.8c68	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8c6a	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8c6c	c5 37		cmp $37				cmp 	zTemp0+1
.8c6e	b0 13		bcs $8c83			bcs		_EXPRExit 					; if current >= operator exit
.8c70	48		pha				pha 								; save current precedence.
.8c71	b1 30		lda ($30),y			lda 	(codePtr),y
.8c73	c8		iny				iny
.8c74	48		pha				pha
.8c75	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8c77	e8		inx				inx 								; work out the right hand side.
.8c78	20 51 8c	jsr $8c51			jsr 	EvaluateExpressionAtPrecedence
.8c7b	ca		dex				dex
.8c7c	68		pla				pla 								; get operator, call the code.
.8c7d	20 86 8c	jsr $8c86			jsr 	_EXPRCaller
.8c80	68		pla				pla 								; restore precedence level
.8c81	80 d3		bra $8c56			bra 	_EXPRLoop 					; and go round.
.8c83					_EXPRExit:
.8c83	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8c85	60		rts				rts
.8c86					_EXPRCaller:
.8c86	da		phx				phx 								; save on stack, first thing is to restore it
.8c87	0a		asl a				asl 	a 							; double so can use vectors into X
.8c88	aa		tax				tax
.8c89	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9af6					FloatingPointAdd:
.9af6	20 97 9c	jsr $9c97			jsr 	FloatPrepare 				; prepare for floats
.9af9	80 0b		bra $9b06			bra 	FloatAdd
.9afb					FloatingPointSub:
.9afb	20 97 9c	jsr $9c97			jsr 	FloatPrepare 				; prepare for floats
.9afe					FloatSubtract:
.9afe	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9b01	49 80		eor #$80			eor 	#$80
.9b03	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9b06					FloatAdd:
.9b06	48		pha				pha
.9b07	5a		phy				phy
.9b08	20 a8 9c	jsr $9ca8			jsr 	NSNormalise 				; normalise S[X]
.9b0b	f0 54		beq $9b61			beq 	_FAReturn1
.9b0d	e8		inx				inx 								; normalise S[X+1]
.9b0e	20 a8 9c	jsr $9ca8			jsr 	NSNormalise
.9b11	ca		dex				dex
.9b12	c9 00		cmp #$00			cmp 	#0
.9b14	f0 6f		beq $9b85			beq 	_FAExit 					; if so, just return A
.9b16	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9b19	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9b1c	f0 1b		beq $9b39			beq 	_FAExponentsEqual
.9b1e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9b21	a8		tay				tay
.9b22	38		sec				sec 								; do a signed comparison of the exponents.
.9b23	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9b26	50 02		bvc $9b2a			bvc 	_FANoSignedChange
.9b28	49 80		eor #$80			eor 	#$80
.9b2a					_FANoSignedChange:
.9b2a	29 80		and #$80			and 	#$80
.9b2c	10 03		bpl $9b31			bpl 	_FAHaveMax
.9b2e	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9b31					_FAHaveMax:
.9b31	20 88 9b	jsr $9b88			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9b34	e8		inx				inx
.9b35	20 88 9b	jsr $9b88			jsr 	_FAShiftToExponent
.9b38	ca		dex				dex
.9b39					_FAExponentsEqual:
.9b39	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9b3c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9b3f	30 10		bmi $9b51			bmi 	_FADifferentSigns
.9b41	20 3b 8a	jsr $8a3b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9b44	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9b47	10 3c		bpl $9b85			bpl 	_FAExit 					; if no, we are done.
.9b49	20 bc 93	jsr $93bc			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9b4c	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9b4f	80 34		bra $9b85			bra 	_FAExit
.9b51					_FADifferentSigns:
.9b51	20 61 8a	jsr $8a61			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9b54	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9b57	10 2c		bpl $9b85			bpl 	_FAExit 					; if no, we are done.
.9b59	20 45 93	jsr $9345			jsr 	NSMNegate 					; netate result
.9b5c	20 4e 93	jsr $934e			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9b5f	80 24		bra $9b85			bra 	_FAExit
.9b61					_FAReturn1:
.9b61	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9b64	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9b67	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9b6a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b6d	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9b70	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9b73	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9b76	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9b79	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9b7c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9b7f	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9b82	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b85					_FAExit:
.9b85	7a		ply				ply
.9b86	68		pla				pla
.9b87	60		rts				rts
.9b88					_FAShiftToExponent:
.9b88					_FAShiftToExponent2:
.9b88	98		tya				tya 								; compare Y to exponent
.9b89	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9b8c	f0 08		beq $9b96			beq 	_FASEExit 					; exit if so.
.9b8e	20 bc 93	jsr $93bc			jsr 	NSMShiftRight	 			; shift the mantissa right
.9b91	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9b94	80 f2		bra $9b88			bra 	_FAShiftToExponent2
.9b96					_FASEExit:
.9b96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9b97					CompareFloat:
.9b97	20 fe 9a	jsr $9afe			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9b9a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9b9d	29 f8		and #$f8			and 	#$F8
.9b9f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9ba2	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9ba5	f0 09		beq $9bb0			beq 	_FCExit 					; zero, so approximately identical
.9ba7	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9ba9	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9bac	10 02		bpl $9bb0			bpl 	_FCExit
.9bae					_FCNegative:
.9bae	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9bb0					_FCExit:
.9bb0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9bb1					FDivideCommand:
.9bb1	fa		plx				plx	 								; restore stack position
.9bb2	20 97 9c	jsr $9c97			jsr 	FloatPrepare 				; prepare for floats
.9bb5					FloatDivide:
.9bb5	48		pha				pha
.9bb6	e8		inx				inx
.9bb7	20 a8 9c	jsr $9ca8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9bba	ca		dex				dex
.9bbb	c9 00		cmp #$00			cmp 	#0
.9bbd	f0 20		beq $9bdf			beq 	_FDZero
.9bbf	20 a8 9c	jsr $9ca8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9bc2	f0 19		beq $9bdd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9bc4	20 f2 99	jsr $99f2			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9bc7	20 7f 99	jsr $997f			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9bca	20 a8 9c	jsr $9ca8			jsr		NSNormalise 				; renormalise
.9bcd	20 8d 9a	jsr $9a8d			jsr 	CalculateSign 				; calculate result sign
.9bd0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9bd3	38		sec				sec
.9bd4	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9bd7	38		sec				sec
.9bd8	e9 1e		sbc #$1e			sbc 	#30
.9bda	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9bdd					_FDExit:
.9bdd	68		pla				pla
.9bde	60		rts				rts
.9bdf					_FDZero:
.9bdf	a9 03		lda #$03		lda	#3
.9be1	4c 46 88	jmp $8846		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9be4					FloatFractionalPart:
.9be4	5a		phy				phy
.9be5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9be8	29 7f		and #$7f			and 	#$7F
.9bea	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9bed	20 a8 9c	jsr $9ca8			jsr 	NSNormalise
.9bf0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9bf3	38		sec				sec
.9bf4	e9 e0		sbc #$e0			sbc 	#$E0
.9bf6	90 31		bcc $9c29			bcc 	_FFPExit 					; already fractional
.9bf8	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9bfa	b0 2a		bcs $9c26			bcs 	_FFPZero
.9bfc	a8		tay				tay 								; put count to do in Y
.9bfd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9c00	20 2b 9c	jsr $9c2b			jsr 	_FFPPartial
.9c03	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9c06	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9c09	20 2b 9c	jsr $9c2b			jsr 	_FFPPartial
.9c0c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9c0f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9c12	20 2b 9c	jsr $9c2b			jsr 	_FFPPartial
.9c15	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9c18	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9c1b	20 2b 9c	jsr $9c2b			jsr 	_FFPPartial
.9c1e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9c21	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; zeroed check.
.9c24	d0 03		bne $9c29			bne 	_FFPExit
.9c26					_FFPZero:
.9c26	20 99 93	jsr $9399			jsr 	NSMSetZero
.9c29					_FFPExit:
.9c29	7a		ply				ply
.9c2a	60		rts				rts
.9c2b					_FFPPartial:
.9c2b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9c2d	f0 17		beq $9c46			beq 	_FFFPPExit
.9c2f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9c31	b0 0c		bcs $9c3f			bcs 	_FFFPPWholeByte
.9c33	5a		phy				phy
.9c34					_FFFPPLeft:
.9c34	0a		asl a				asl 	a
.9c35	88		dey				dey
.9c36	d0 fc		bne $9c34			bne 	_FFFPPLeft
.9c38	7a		ply				ply
.9c39					_FFFPPRight:
.9c39	4a		lsr a				lsr 	a
.9c3a	88		dey				dey
.9c3b	d0 fc		bne $9c39			bne 	_FFFPPRight
.9c3d	80 07		bra $9c46			bra 	_FFFPPExit
.9c3f					_FFFPPWholeByte:
.9c3f	98		tya				tya 								; subtract 8 from count
.9c40	38		sec				sec
.9c41	e9 08		sbc #$08			sbc 	#8
.9c43	a8		tay				tay
.9c44	a9 00		lda #$00			lda 	#0 							; and clear all
.9c46					_FFFPPExit:
.9c46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9c47					FloatIntegerPart:
.9c47	48		pha				pha
.9c48	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9c4b	f0 1f		beq $9c6c			beq 	_FIPExit 					; if so do nothing
.9c4d	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; is it zero ?
.9c50	f0 17		beq $9c69			beq 	_FIPZero 					; if so return zero.
.9c52	20 a8 9c	jsr $9ca8			jsr 	NSNormalise 				; normalise
.9c55	f0 12		beq $9c69			beq 	_FIPZero 					; normalised to zero, exit zero
.9c57					_FIPShift:
.9c57	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9c5a	10 08		bpl $9c64			bpl 	_FIPCheckZero
.9c5c	20 bc 93	jsr $93bc			jsr 	NSMShiftRight 				; shift mantissa right
.9c5f	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9c62	80 f3		bra $9c57			bra 	_FIPShift
.9c64					_FIPCheckZero:
.9c64	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; avoid -0 problem
.9c67	d0 03		bne $9c6c			bne 	_FIPExit 					; set to zero if mantissa zero.
.9c69					_FIPZero:
.9c69	20 99 93	jsr $9399			jsr 	NSMSetZero
.9c6c					_FIPExit:
.9c6c	68		pla				pla
.9c6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9c6e					FloatingPointMultiply:
.9c6e	20 97 9c	jsr $9c97			jsr 	FloatPrepare 				; prepare for floats
.9c71					FloatMultiply:
.9c71	48		pha				pha
.9c72	20 a8 9c	jsr $9ca8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c75	f0 1b		beq $9c92			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9c77	e8		inx				inx
.9c78	20 a8 9c	jsr $9ca8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c7b	ca		dex				dex
.9c7c	c9 00		cmp #$00			cmp 	#0
.9c7e	f0 0f		beq $9c8f			beq 	_FDSetZero
.9c80	20 48 9a	jsr $9a48			jsr 	MultiplyShort 				; calculate the result.
.9c83	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9c86	18		clc				clc
.9c87	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9c8a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9c8d	80 03		bra $9c92			bra 	_FDExit
.9c8f					_FDSetZero:
.9c8f	20 99 93	jsr $9399			jsr 	NSMSetZero 					; return 0
.9c92					_FDExit:
.9c92	20 a8 9c	jsr $9ca8			jsr 	NSNormalise 				; normalise the result
.9c95	68		pla				pla
.9c96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9c97					FloatPrepare:
.9c97	20 5f 8d	jsr $8d5f			jsr 	DereferenceTopTwo 			; dereference the top two values
.9c9a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9c9d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ca0	29 10		and #$10			and 	#NSBIsString
.9ca2	d0 01		bne $9ca5			bne 	_FDType
.9ca4	60		rts				rts
.9ca5					_FDType:
.9ca5	4c 19 9e	jmp $9e19			jmp 	TypeError
.9ca8					NSNormalise:
.9ca8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9cab	29 80		and #$80			and 	#$80
.9cad	09 08		ora #$08			ora 	#NSTFloat
.9caf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9cb2	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; if zero exit
.9cb5	d0 09		bne $9cc0			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9cb7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9cba	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9cbd	a9 00		lda #$00			lda 	#0 							; set Z flag
.9cbf	60		rts				rts
.9cc0					_NSNormaliseOptimise:
.9cc0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9cc3	d0 22		bne $9ce7			bne 	_NSNormaliseLoop
.9cc5	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9cc8	30 1d		bmi $9ce7			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9cca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9ccd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9cd0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9cd3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9cd6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9cd9	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9cdc	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9cdf	38		sec				sec
.9ce0	e9 08		sbc #$08			sbc 	#8
.9ce2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9ce5	80 d9		bra $9cc0			bra 	_NSNormaliseOptimise
.9ce7					_NSNormaliseLoop:
.9ce7	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9cea	70 08		bvs $9cf4			bvs 	_NSNExit 					; exit if so with Z flag clear
.9cec	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; shift mantissa left
.9cef	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9cf2	80 f3		bra $9ce7			bra 	_NSNormaliseLoop
.9cf4					_NSNExit:
.9cf4	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9cf6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8c8c					AssignNumber:
.8c8c	5a		phy				phy
.8c8d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8c90	85 36		sta $36				sta 	zTemp0
.8c92	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c95	85 37		sta $37				sta 	zTemp0+1
.8c97	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8c9a	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8c9c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c9f	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8ca1	c9 08		cmp #$08			cmp 	#NSTFloat
.8ca3	f0 2a		beq $8ccf			beq 	_ANFloat
.8ca5	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8ca8	f0 05		beq $8caf			beq		_ANNotFloat
.8caa	e8		inx				inx
.8cab	20 47 9c	jsr $9c47			jsr 	FloatIntegerPart 			; make it an integer
.8cae	ca		dex				dex
.8caf					_ANNotFloat:
.8caf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8cb2	29 03		and #$03			and 	#3
.8cb4	d0 05		bne $8cbb			bne 	_ANByteWord
.8cb6	20 db 8c	jsr $8cdb			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8cb9	80 1e		bra $8cd9			bra 	_ANExit
.8cbb					_ANByteWord:
.8cbb	48		pha				pha 								; save count
.8cbc	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8cbf	92 36		sta ($36)			sta 	(zTemp0)
.8cc1	68		pla				pla
.8cc2	c9 01		cmp #$01			cmp	 	#1
.8cc4	f0 13		beq $8cd9			beq 	_ANExit
.8cc6	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8cc9	a0 01		ldy #$01			ldy 	#1
.8ccb	91 36		sta ($36),y			sta 	(zTemp0),y
.8ccd	80 0a		bra $8cd9			bra 	_ANExit
.8ccf					_ANFloat:
.8ccf	20 db 8c	jsr $8cdb			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8cd2	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8cd5	a0 04		ldy #$04			ldy 	#4
.8cd7	91 36		sta ($36),y			sta 	(zTemp0),y
.8cd9					_ANExit:
.8cd9	7a		ply				ply
.8cda	60		rts				rts
.8cdb					_ANCopy4PackSign:
.8cdb	a0 03		ldy #$03			ldy 	#3
.8cdd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8ce0	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8ce2	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8ce5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce7	88		dey				dey
.8ce8	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8ceb	91 36		sta ($36),y			sta 	(zTemp0),y
.8ced	88		dey				dey
.8cee	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8cf1	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf3	88		dey				dey
.8cf4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8cf7	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8cfa					AssignString:
.8cfa	5a		phy				phy
.8cfb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8cfe	85 38		sta $38				sta 	zTemp1
.8d00	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d03	85 39		sta $39				sta 	zTemp1+1
.8d05	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d08	85 36		sta $36				sta 	zTemp0
.8d0a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d0d	85 37		sta $37				sta 	zTemp0+1
.8d0f	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8d11	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d13	f0 23		beq $8d38			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8d15	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8d16	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8d18	e9 02		sbc #$02			sbc 	#2
.8d1a	85 3c		sta $3c				sta 	zsTemp
.8d1c	a0 01		ldy #$01			ldy 	#1
.8d1e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d20	e9 00		sbc #$00			sbc 	#0
.8d22	85 3d		sta $3d				sta 	zsTemp+1
.8d24	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8d26					_ASGetLength:
.8d26	c8		iny				iny
.8d27	b1 38		lda ($38),y			lda 	(zTemp1),y
.8d29	d0 fb		bne $8d26			bne 	_ASGetLength
.8d2b	98		tya				tya 								; is this length <= current length
.8d2c	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8d2e	90 20		bcc $8d50			bcc 	_ASCopyString
.8d30	f0 1e		beq $8d50			beq 	_ASCopyString
.8d32	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8d34	a0 01		ldy #$01			ldy 	#1
.8d36	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8d38					_ASNewStringRequired:
.8d38	e8		inx				inx 								; concrete the new string.
.8d39	20 8e 9f	jsr $9f8e			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8d3c	ca		dex				dex
.8d3d	18		clc				clc
.8d3e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8d41	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8d43	92 36		sta ($36)			sta 	(zTemp0)
.8d45	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d48	69 00		adc #$00			adc 	#0
.8d4a	a0 01		ldy #$01			ldy 	#1
.8d4c	91 36		sta ($36),y			sta 	(zTemp0),y
.8d4e	80 0d		bra $8d5d			bra 	_ASExit
.8d50					_ASCopyString:
.8d50	a0 00		ldy #$00			ldy 	#0
.8d52					_ASCopyLoop:
.8d52	b1 38		lda ($38),y			lda 	(zTemp1),y
.8d54	c8		iny				iny
.8d55	c8		iny				iny
.8d56	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8d58	88		dey				dey
.8d59	c9 00		cmp #$00			cmp 	#0
.8d5b	d0 f5		bne $8d52			bne 	_ASCopyLoop
.8d5d					_ASExit:
.8d5d	7a		ply				ply
.8d5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8d5f					DereferenceTopTwo:
.8d5f	e8		inx				inx
.8d60	20 64 8d	jsr $8d64			jsr 	Dereference 				; deref x+1
.8d63	ca		dex				dex  								; falls through to deref x
.8d64					Dereference:
.8d64	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8d67	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8d69	f0 57		beq $8dc2			beq 	_DRFExit 					; not a reference
.8d6b	5a		phy				phy
.8d6c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8d6f	85 36		sta $36				sta 	zTemp0
.8d71	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d74	85 37		sta $37				sta 	zTemp0+1
.8d76	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8d79	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8d7b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d7e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8d81	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8d83	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8d85	f0 0f		beq $8d96			beq 	_DRFDereferenceTwo
.8d87	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8d89	f0 39		beq $8dc4			beq 	_DRFFull
.8d8b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8d8e	29 03		and #$03			and 	#3
.8d90	f0 32		beq $8dc4			beq 	_DRFFull 					; the whole word
.8d92	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8d94	f0 07		beq $8d9d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8d96					_DRFDereferenceTwo:
.8d96	a0 01		ldy #$01			ldy 	#1
.8d98	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d9a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d9d					_DRFClear23:
.8d9d	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8da0	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8da3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8da6	29 18		and #$18			and 	#NSBTypeMask
.8da8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dab	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8dad	d0 12		bne $8dc1			bne 	_DRFNotString
.8daf	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8db2	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8db5	d0 0a		bne $8dc1			bne 	_DRFNotString
.8db7	a9 c3		lda #$c3			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8db9	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8dbc	a9 8d		lda #$8d			lda 	#_DRFNullString >> 8
.8dbe	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8dc1					_DRFNotString
.8dc1	7a		ply				ply 								; restore Y and exit
.8dc2					_DRFExit:
.8dc2	60		rts				rts
.8dc3					_DRFNullString:
>8dc3	00						.byte 	0
.8dc4					_DRFFull:
.8dc4	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8dc6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dc8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8dcb	c8		iny				iny
.8dcc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dce	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8dd1	c8		iny				iny
.8dd2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dd4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8dd7	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8dda	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8ddd	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8ddf	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8de2	f0 06		beq $8dea			beq 	_DRFNoExponent
.8de4	c8		iny				iny 								; if not, read the exponent as well.
.8de5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8de7	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8dea					_DRFNoExponent:
.8dea	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8ded	10 0d		bpl $8dfc			bpl 	_DRFExit2 					; if not, then exit.
.8def	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8df1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8df4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8df7	09 80		ora #$80			ora 	#NSBIsNegative
.8df9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dfc					_DRFExit2:
.8dfc	7a		ply				ply
.8dfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8dfe					EncodeNumberStart:
.8dfe	38		sec				sec
.8dff	80 01		bra $8e02			bra 	EncodeNumberContinue+1
.8e01					EncodeNumberContinue:
.8e01	18		clc				clc
.8e02					EncodeNumber:
.8e02	08		php				php 								; save reset.
.8e03	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8e05	f0 12		beq $8e19			beq 	_ENIsOkay
.8e07	c9 30		cmp #$30			cmp 	#"0"
.8e09	90 04		bcc $8e0f			bcc 	_ENBadNumber
.8e0b	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e0d	90 0a		bcc $8e19			bcc 	_ENIsOkay
.8e0f					_ENBadNumber:
.8e0f	28		plp				plp 								; throw saved reset
.8e10	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8e13	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8e15	f0 7e		beq $8e95			beq 	_ENConstructFinal
.8e17					_ENFail:
.8e17	18		clc				clc 								; not allowed
.8e18	60		rts				rts
.8e19					_ENIsOkay:
.8e19	28		plp				plp 								; are we restarting
.8e1a	90 15		bcc $8e31			bcc 	_ENNoRestart
.8e1c					_ENStartEncode:
.8e1c	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8e1e	f0 0c		beq $8e2c			beq 	_ENFirstDP
.8e20	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8e22	20 9b 93	jsr $939b			jsr 	NSMSetByte
.8e25	a9 01		lda #$01			lda 	#ESTA_Low
.8e27					_ENExitChange:
.8e27	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8e2a	38		sec				sec
.8e2b	60		rts				rts
.8e2c					_ENFirstDP:
.8e2c	20 99 93	jsr $9399			jsr 	NSMSetZero 					; clear integer part
.8e2f	80 3f		bra $8e70			bra 	_ESTASwitchFloat			; go straight to float and exi
.8e31					_ENNoRestart:
.8e31	48		pha				pha 								; save on stack.
.8e32	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8e35	c9 01		cmp #$01			cmp 	#ESTA_Low
.8e37	f0 09		beq $8e42			beq  	_ESTALowState
.8e39	c9 02		cmp #$02			cmp 	#ESTA_High
.8e3b	f0 29		beq $8e66			beq 	_ESTAHighState
.8e3d	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8e3f	f0 3b		beq $8e7c			beq 	_ESTADecimalState
>8e41	db						.byte 	$DB 						; causes a break in the emulator
.8e42					_ESTALowState:
.8e42	68		pla				pla 								; get value back
.8e43	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8e45	f0 29		beq $8e70			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8e47	29 0f		and #$0f			and 	#15 						; make digit
.8e49	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8e4c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8e4f	0a		asl a				asl 	a
.8e50	0a		asl a				asl 	a
.8e51	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8e54	0a		asl a				asl 	a
.8e55	6d 06 07	adc $0706			adc 	DigitTemp
.8e58	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e5b	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8e5d	90 05		bcc $8e64			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8e5f	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8e61	8d 05 07	sta $0705			sta 	EncodeState
.8e64					_ESTANoSwitch:
.8e64	38		sec				sec
.8e65	60		rts				rts
.8e66					_ESTAHighState:
.8e66	68		pla				pla 								; get value back
.8e67	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8e69	f0 05		beq $8e70			beq 	_ESTASwitchFloat
.8e6b	20 cf 8e	jsr $8ecf			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8e6e	38		sec				sec
.8e6f	60		rts				rts
.8e70					_ESTASwitchFloat:
.8e70	9c 07 07	stz $0707			stz 	DecimalCount
.8e73	e8		inx				inx 								; zero the decimal additive.
.8e74	20 99 93	jsr $9399			jsr 	NSMSetZero
.8e77	ca		dex				dex
.8e78	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8e7a	80 ab		bra $8e27			bra 	_ENExitChange
.8e7c					_ESTADecimalState:
.8e7c	68		pla				pla 								; digit.
.8e7d	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8e7f	f0 96		beq $8e17			beq 	_ENFail
.8e81	e8		inx				inx 								; put digit into fractional part of X+1
.8e82	20 cf 8e	jsr $8ecf			jsr 	ESTAShiftDigitIntoMantissa
.8e85	ca		dex				dex
.8e86	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8e89	ad 07 07	lda $0707			lda 	DecimalCount
.8e8c	c9 0b		cmp #$0b			cmp 	#11
.8e8e	f0 02		beq $8e92			beq 	_ESTADSFail
.8e90	38		sec				sec
.8e91	60		rts				rts
.8e92					_ESTADSFail:
.8e92	4c 14 9e	jmp $9e14			jmp 	RangeError
.8e95					_ENConstructFinal:
.8e95	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8e98	f0 33		beq $8ecd			beq 	_ENCFExit 					; no decimals
.8e9a	5a		phy				phy
.8e9b	0a		asl a				asl 	a 							; x 4 and CLC
.8e9c	0a		asl a				asl 	a
.8e9d	6d 07 07	adc $0707			adc 	DecimalCount
.8ea0	a8		tay				tay
.8ea1	b9 d3 9d	lda $9dd3,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8ea4	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ea7	b9 d4 9d	lda $9dd4,y			lda 	DecimalScalarTable-5+1,y
.8eaa	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8ead	b9 d5 9d	lda $9dd5,y			lda 	DecimalScalarTable-5+2,y
.8eb0	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8eb3	b9 d6 9d	lda $9dd6,y			lda 	DecimalScalarTable-5+3,y
.8eb6	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8eb9	b9 d7 9d	lda $9dd7,y			lda 	DecimalScalarTable-5+4,y
.8ebc	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8ebf	a9 08		lda #$08			lda 	#NSTFloat
.8ec1	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8ec4	7a		ply				ply
.8ec5	e8		inx				inx 								; multiply decimal const by decimal scalar
.8ec6	20 71 9c	jsr $9c71			jsr 	FloatMultiply
.8ec9	ca		dex				dex
.8eca	20 06 9b	jsr $9b06			jsr 	FloatAdd 					; add to integer part.
.8ecd					_ENCFExit:
.8ecd	18		clc				clc 								; reject the digit.
.8ece	60		rts				rts
.8ecf					ESTAShiftDigitIntoMantissa:
.8ecf	29 0f		and #$0f			and 	#15 						; save digit
.8ed1	48		pha				pha
.8ed2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8ed5	48		pha				pha
.8ed6	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8ed9	48		pha				pha
.8eda	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8edd	48		pha				pha
.8ede	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ee1	48		pha				pha
.8ee2	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; x 2
.8ee5	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; x 4
.8ee8	18		clc				clc 								; pop mantissa and add
.8ee9	68		pla				pla
.8eea	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8eed	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ef0	68		pla				pla
.8ef1	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8ef4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ef7	68		pla				pla
.8ef8	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8efb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8efe	68		pla				pla
.8eff	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8f02	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8f05	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; x 10
.8f08	68		pla				pla 								; add digit
.8f09	18		clc				clc
.8f0a	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8f0d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f10	90 0d		bcc $8f1f			bcc 	_ESTASDExit
.8f12	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8f15	d0 08		bne $8f1f			bne 	_ESTASDExit
.8f17	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8f1a	d0 03		bne $8f1f			bne 	_ESTASDExit
.8f1c	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8f1f					_ESTASDExit:
.8f1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8f20					EvaluateTerm:
.8f20	b1 30		lda ($30),y			lda 	(codePtr),y
.8f22	30 18		bmi $8f3c			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8f24	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8f26	b0 6f		bcs $8f97			bcs 	_ETVariable
.8f28	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8f2a	90 6e		bcc $8f9a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8f2c	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f2e	b0 6a		bcs $8f9a			bcs 	_ETPuncUnary
.8f30	20 fe 8d	jsr $8dfe			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8f33					_ETNumber:
.8f33	c8		iny				iny 								; keep encoding until we have the numbers
.8f34	b1 30		lda ($30),y			lda 	(codePtr),y
.8f36	20 01 8e	jsr $8e01			jsr 	EncodeNumberContinue
.8f39	b0 f8		bcs $8f33			bcs 	_ETNumber 					; go back if accepted.
.8f3b	60		rts				rts
.8f3c					_ETCheckUnary:
.8f3c	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8f3e	f0 41		beq $8f81			beq 	_ETString
.8f40	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8f42	f0 12		beq $8f56			beq 	_ETHexConstant
.8f44	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8f46	90 0b		bcc $8f53			bcc 	_ETSyntaxError
.8f48	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8f4a	b0 07		bcs $8f53			bcs 	_ETSyntaxError
.8f4c	da		phx				phx 								; push X on the stack
.8f4d	0a		asl a				asl 	a 							; put vector x 2 into X
.8f4e	aa		tax				tax
.8f4f	c8		iny				iny 								; consume unary function token
.8f50	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8f53					_ETSyntaxError:
.8f53	4c 0f 9e	jmp $9e0f			jmp 	SyntaxError
.8f56					_ETHexConstant:
.8f56	c8		iny				iny 								; skip #
.8f57	c8		iny				iny 								; skip count
.8f58	20 99 93	jsr $9399			jsr 	NSMSetZero 					; clear result
.8f5b					_ETHLoop:
.8f5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f5d	c8		iny				iny 								; and consume
.8f5e	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8f60	f0 1e		beq $8f80			beq 	_ETHExit
.8f62	48		pha				pha 								; save on stack.
.8f63	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; x 2
.8f66	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; x 4
.8f69	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; x 8
.8f6c	20 ae 93	jsr $93ae			jsr 	NSMShiftLeft 				; x 16
.8f6f	68		pla				pla 								; ASCII
.8f70	c9 41		cmp #$41			cmp 	#'A'
.8f72	90 02		bcc $8f76			bcc 	_ETHNotChar
.8f74	e9 07		sbc #$07			sbc 	#7
.8f76					_ETHNotChar:
.8f76	29 0f		and #$0f			and 	#15 						; digit now
.8f78	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8f7b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f7e	80 db		bra $8f5b			bra 	_ETHLoop 					; go round.
.8f80					_ETHExit:
.8f80	60		rts				rts
.8f81					_ETString:
.8f81	c8		iny				iny 								; look at length
.8f82	b1 30		lda ($30),y			lda 	(codePtr),y
.8f84	48		pha				pha
.8f85	c8		iny				iny 								; first character
.8f86	20 ea 98	jsr $98ea			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8f89	68		pla				pla 								; restore count and save
.8f8a	85 36		sta $36				sta 	zTemp0
.8f8c	98		tya				tya 								; add length to Y to skip it.
.8f8d	18		clc				clc
.8f8e	65 36		adc $36				adc 	zTemp0
.8f90	a8		tay				tay
.8f91	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8f93	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f96	60		rts				rts
.8f97					_ETVariable:
.8f97	4c f1 8f	jmp $8ff1			jmp 	VariableHandler
.8f9a					_ETPuncUnary:
.8f9a	c8		iny				iny 								; consume the unary character
.8f9b	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8f9d	f0 2d		beq $8fcc			beq 	_ETUnaryNegate
.8f9f	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8fa1	f0 39		beq $8fdc			beq 	_ETDereference
.8fa3	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8fa5	f0 43		beq $8fea			beq 	_ETParenthesis
.8fa7	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8fa9	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8fab	f0 06		beq $8fb3			beq 	_ETIndirection
.8fad	e6 36		inc $36				inc 	zTemp0
.8faf	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8fb1	d0 a0		bne $8f53			bne 	_ETSyntaxError
.8fb3					_ETIndirection:
.8fb3	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8fb5	1a		inc a				inc 	a
.8fb6	48		pha				pha
.8fb7	20 20 8f	jsr $8f20			jsr 	EvaluateTerm				; evaluate the term
.8fba	20 64 8d	jsr $8d64			jsr 	Dereference 				; dereference it.
.8fbd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8fc0	d0 07		bne $8fc9			bne 	_ETTypeMismatch
.8fc2	68		pla				pla 								; indirection 1-2
.8fc3	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8fc5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fc8	60		rts				rts
.8fc9					_ETTypeMismatch:
.8fc9	4c 19 9e	jmp $9e19			jmp 	TypeError
.8fcc					_ETUnaryNegate:
.8fcc	20 20 8f	jsr $8f20			jsr 	EvaluateTerm				; evaluate the term
.8fcf	20 64 8d	jsr $8d64			jsr 	Dereference 				; dereference it.
.8fd2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8fd5	29 10		and #$10			and 	#NSTString
.8fd7	d0 f0		bne $8fc9			bne 	_ETTypeMismatch
.8fd9	4c 45 93	jmp $9345			jmp 	NSMNegate  					; just toggles the sign bit.
.8fdc					_ETDereference:
.8fdc	20 20 8f	jsr $8f20			jsr 	EvaluateTerm				; evaluate the term
.8fdf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8fe2	29 20		and #$20			and 	#NSBIsReference
.8fe4	f0 e3		beq $8fc9			beq 	_ETTypeMismatch
.8fe6	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8fe9	60		rts				rts
.8fea					_ETParenthesis:
.8fea	20 4f 8c	jsr $8c4f			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8fed	20 3f 99	jsr $993f			jsr 	CheckRightBracket 			; check for )
.8ff0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8ff1					VariableHandler:
.8ff1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ff3	18		clc				clc
.8ff4	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8ff6	85 37		sta $37				sta 	zTemp0+1
.8ff8	c8		iny				iny
.8ff9	b1 30		lda ($30),y			lda 	(codePtr),y
.8ffb	85 36		sta $36				sta 	zTemp0
.8ffd	c8		iny				iny
.8ffe	18		clc				clc									; copy variable address+3 to mantissa
.8fff	69 03		adc #$03			adc 	#3
.9001	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9004	a5 37		lda $37				lda 	zTemp0+1
.9006	69 00		adc #$00			adc 	#0
.9008	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.900b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.900e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9011	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9014	5a		phy				phy
.9015	a0 02		ldy #$02			ldy 	#2 							; read type
.9017	b1 36		lda ($36),y			lda 	(zTemp0),y
.9019	7a		ply				ply
.901a	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.901c	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.901e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9021	29 04		and #$04			and 	#NSBIsArray
.9023	d0 01		bne $9026			bne 	_VHArray
.9025	60		rts				rts
.9026					_VHArray:
.9026	e8		inx				inx
.9027	20 31 93	jsr $9331			jsr 	Evaluate8BitInteger 		; get the 1st index.
.902a	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.902c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.902f	b1 30		lda ($30),y			lda 	(codePtr),y
.9031	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9033	d0 06		bne $903b			bne 	_VHNoSecondIndex
.9035	c8		iny				iny 								; skip the comma
.9036	e8		inx				inx
.9037	20 31 93	jsr $9331			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.903a	ca		dex				dex
.903b					_VHNoSecondIndex:
.903b	ca		dex				dex 								; set X back.
.903c	20 3f 99	jsr $993f			jsr 	CheckRightBracket 			; and check the right bracket.
.903f	5a		phy				phy 								; save position
.9040	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9043	85 3e		sta $3e				sta 	zaTemp
.9045	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9048	85 3f		sta $3f				sta 	zaTemp+1
.904a	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.904c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.904e	f0 02		beq $9052			beq 	_VHHas2Mask
.9050	a9 ff		lda #$ff			lda 	#$FF
.9052					_VHHas2Mask:
.9052	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9055	f0 54		beq $90ab			beq 	_VHBadIndex
.9057	0a		asl a				asl 	a 							; carry will be set if a second index
.9058	90 09		bcc $9063			bcc 	_VHCheckFirstIndex
.905a	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.905c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.905e	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9061	90 48		bcc $90ab			bcc 	_VHBadIndex
.9063					_VHCheckFirstIndex:
.9063	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9065	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9067	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.906a	90 3f		bcc $90ab			bcc 	_VHBadIndex
.906c	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.906e	64 37		stz $37				stz 	zTemp0+1
.9070	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9073	30 0f		bmi $9084			bmi 	_VHNoMultiply
.9075	da		phx				phx
.9076	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9079	48		pha				pha
.907a	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.907c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.907e	1a		inc a				inc 	a 							; add 1 for zero base
.907f	fa		plx				plx
.9080	20 c1 9d	jsr $9dc1			jsr 	Multiply8x8 				; calculate -> Z0
.9083	fa		plx				plx
.9084					_VHNoMultiply:
.9084	18		clc				clc
.9085	a5 36		lda $36				lda 	zTemp0
.9087	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.908a	85 36		sta $36				sta 	zTemp0
.908c	a5 37		lda $37				lda 	zTemp0+1
.908e	69 00		adc #$00			adc 	#0
.9090	85 37		sta $37				sta 	zTemp0+1
.9092	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9095	20 1b 82	jsr $821b			jsr 	ScaleByBaseType
.9098	18		clc				clc
.9099	b2 3e		lda ($3e)			lda 	(zaTemp)
.909b	65 36		adc $36				adc 	zTemp0
.909d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90a0	a0 01		ldy #$01			ldy 	#1
.90a2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.90a4	65 37		adc $37				adc 	zTemp0+1
.90a6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90a9	7a		ply				ply 								; restore position
.90aa	60		rts				rts
.90ab					_VHBadIndex:
.90ab	a9 17		lda #$17		lda	#23
.90ad	4c 46 88	jmp $8846		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9cf7					AbsUnary:
.9cf7	fa		plx				plx 								; restore stack pos
.9cf8	20 ed 92	jsr $92ed			jsr 	EvaluateNumber 				; get a float or int
.9cfb	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9cfe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9d01	29 7f		and #$7f			and 	#$7F
.9d03	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d06	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.90b0					AllocUnary:
.90b0	fa		plx				plx 								; restore stack pos
.90b1	20 25 93	jsr $9325			jsr 	Evaluate16BitInteger		; get bytes required.
.90b4	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.90b7	da		phx				phx 								; save X/Y
.90b8	5a		phy				phy
.90b9	8a		txa				txa 								; copy X into Y
.90ba	a8		tay				tay
.90bb	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.90be	aa		tax				tax
.90bf	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.90c2	20 cf 90	jsr $90cf			jsr 	AllocateXABytes 			; allocate memory
.90c5	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.90c8	8a		txa				txa
.90c9	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.90cc	7a		ply				ply
.90cd	fa		plx				plx
.90ce	60		rts				rts
.90cf					AllocateXABytes:
.90cf	5a		phy				phy
.90d0	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.90d3	84 36		sty $36				sty 	zTemp0
.90d5	5a		phy				phy
.90d6	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.90d9	84 37		sty $37				sty 	zTemp0+1
.90db	5a		phy				phy
.90dc	18		clc				clc 								; add to low memory pointer
.90dd	6d 0c 07	adc $070c			adc 	lowMemPtr
.90e0	8d 0c 07	sta $070c			sta 	lowMemPtr
.90e3	8a		txa				txa
.90e4	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.90e7	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.90ea					_ClearMemory:
.90ea	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.90ed	c5 36		cmp $36				cmp 	zTemp0
.90ef	d0 07		bne $90f8			bne 	_CMClearNext
.90f1	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.90f4	c5 37		cmp $37				cmp 	zTemp0+1
.90f6	f0 0c		beq $9104			beq 	_CMExit
.90f8					_CMClearNext:
.90f8	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.90fa	92 36		sta ($36)			sta 	(zTemp0)
.90fc	e6 36		inc $36				inc 	zTemp0
.90fe	d0 ea		bne $90ea			bne 	_ClearMemory
.9100	e6 37		inc $37				inc		zTemp0+1
.9102	80 e6		bra $90ea			bra 	_ClearMemory
.9104					_CMExit:
.9104	fa		plx				plx
.9105	68		pla				pla
.9106	7a		ply				ply
.9107	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9d07					AscUnary:
.9d07	fa		plx				plx 								; restore stack pos
.9d08	20 f8 92	jsr $92f8			jsr 	EvaluateString 				; get a string
.9d0b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9d0d	20 9b 93	jsr $939b			jsr 	NSMSetByte
.9d10	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9d13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9d14					FracUnary:
.9d14	fa		plx				plx 								; restore stack pos
.9d15	20 ed 92	jsr $92ed			jsr 	EvaluateNumber 				; get a float or int
.9d18	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9d1b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9d1e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d20	f0 04		beq $9d26			beq 	_IUZero
.9d22	20 e4 9b	jsr $9be4			jsr 	FloatFractionalPart
.9d25	60		rts				rts
.9d26					_IUZero:
.9d26	20 99 93	jsr $9399			jsr 	NSMSetZero
.9d29	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9d2a					IntUnary:
.9d2a	fa		plx				plx 								; restore stack pos
.9d2b	20 ed 92	jsr $92ed			jsr 	EvaluateNumber 				; get a float or int
.9d2e	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9d31	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9d34	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d36	f0 03		beq $9d3b			beq 	_IUExit
.9d38	20 47 9c	jsr $9c47			jsr 	FloatIntegerPart
.9d3b					_IUExit:
.9d3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9d3c					LenUnary:
.9d3c	fa		plx				plx 								; restore stack pos
.9d3d	20 f8 92	jsr $92f8			jsr 	EvaluateString 				; get a string
.9d40	5a		phy				phy
.9d41	a0 00		ldy #$00			ldy 	#0 							; find length
.9d43					_LenFind:
.9d43	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d45	f0 06		beq $9d4d			beq 	_LenExit
.9d47	c8		iny				iny
.9d48	d0 f9		bne $9d43			bne 	_LenFind
.9d4a	4c 14 9e	jmp $9e14			jmp 	RangeError 					; string > 255
.9d4d					_LenExit:
.9d4d	98		tya				tya
.9d4e	20 9b 93	jsr $939b			jsr 	NSMSetByte
.9d51	7a		ply				ply
.9d52	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9d55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9108					Unary_Not:
.9108	fa		plx				plx
.9109	20 10 93	jsr $9310			jsr 	EvaluateInteger 			; get integer
.910c	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.910f	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; zero mantissa ?
.9112	f0 04		beq $9118			beq 	_NotZero
.9114	20 99 93	jsr $9399			jsr 	NSMSetZero
.9117	60		rts				rts
.9118					_NotZero:
.9118	4c b3 88	jmp $88b3			jmp 	ReturnTrue
.911b					_UNBad:
.911b	4c 1e 9e	jmp $9e1e			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.911e					Unary_Rnd:
.911e	20 ed 92	jsr $92ed			jsr 	EvaluateNumber 				; number to use.
.9121	20 3f 99	jsr $993f			jsr 	CheckRightBracket 			; closing bracket
.9124	20 4d 91	jsr $914d			jsr 	Random32Bit 				; generate a number.
.9127	ad 08 07	lda $0708			lda 	RandomSeed+0
.912a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.912d	ad 09 07	lda $0709			lda 	RandomSeed+1
.9130	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9133	ad 0a 07	lda $070a			lda 	RandomSeed+2
.9136	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9139	ad 0b 07	lda $070b			lda 	RandomSeed+3
.913c	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.913e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9141	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9143	8d 28 06	sta $0628			sta 	NSExponent
.9146	a9 08		lda #$08			lda 	#NSTFloat
.9148	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>914b	db						.byte 	$DB 						; causes a break in the emulator
.914c	60		rts				rts
.914d					Random32Bit:
.914d	5a		phy				phy
.914e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9150	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.9153	d0 03		bne $9158			bne 	_Random1
.9155	a8		tay				tay 								; if so do it 256 times
.9156	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9158					_Random1:
.9158	0a		asl a				asl 	a 							; LSFR RNG
.9159	2e 09 07	rol $0709			rol 	RandomSeed+1
.915c	2e 0a 07	rol $070a			rol 	RandomSeed+2
.915f	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9162	90 02		bcc $9166			bcc 	_Random2
.9164	49 c5		eor #$c5			eor 	#$C5
.9166					_Random2:
.9166	88		dey				dey
.9167	d0 ef		bne $9158			bne 	_Random1
.9169	7a		ply				ply
.916a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9d56					SgnUnary:
.9d56	fa		plx				plx 								; restore stack pos
.9d57	20 ed 92	jsr $92ed			jsr 	EvaluateNumber 				; get a float or int
.9d5a	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9d5d	20 c9 93	jsr $93c9			jsr 	NSMIsZero 					; if zero
.9d60	f0 10		beq $9d72			beq 	_SGZero  					; return Int Zero
.9d62	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9d65	48		pha				pha
.9d66	a9 01		lda #$01			lda 	#1 							; set to 1
.9d68	20 9b 93	jsr $939b			jsr 	NSMSetByte
.9d6b	68		pla				pla
.9d6c	29 80		and #$80			and		#$80 						; copy the sign byte out
.9d6e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d71	60		rts				rts
.9d72	20 99 93	jsr $9399	_SGZero:jsr 	NSMSetZero
.9d75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9d76					ValUnary:
.9d76	fa		plx				plx 								; restore stack pos
.9d77	20 8c 9d	jsr $9d8c			jsr 	ValMainCode 				; do the main val() code
.9d7a	b0 01		bcs $9d7d			bcs 	_VUError 					; couldn't convert
.9d7c	60		rts				rts
.9d7d					_VUError:
.9d7d	4c 19 9e	jmp $9e19			jmp 	TypeError
.9d80					IsValUnary:
.9d80	fa		plx				plx 								; restore stack pos
.9d81	20 8c 9d	jsr $9d8c			jsr 	ValMainCode 				; do the main val() code
.9d84	b0 03		bcs $9d89			bcs 	_VUBad
.9d86	4c b3 88	jmp $88b3			jmp 	ReturnTrue
.9d89					_VUBad:
.9d89	4c bf 88	jmp $88bf			jmp 	ReturnFalse
.9d8c					ValMainCode:
.9d8c	20 f8 92	jsr $92f8			jsr 	EvaluateString 				; get a string
.9d8f	20 3f 99	jsr $993f			jsr 	CheckRightBracket 			; check right bracket present
.9d92	5a		phy				phy
.9d93	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9d95	f0 17		beq $9dae			beq 	_VMCFail2
.9d97	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9d99	48		pha				pha 								; save first character
.9d9a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9d9c	d0 01		bne $9d9f			bne 	_VMCStart
.9d9e	c8		iny				iny 								; skip over -
.9d9f					_VMCStart:
.9d9f	38		sec				sec 								; initialise first time round.
.9da0					_VMCNext:
.9da0	c8		iny				iny 								; pre-increment
.9da1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9da3	f0 0c		beq $9db1			beq 	_VMCSuccess 				; successful.
.9da5	20 02 8e	jsr $8e02			jsr 	EncodeNumber 				; send it to the number-builder
.9da8	90 03		bcc $9dad			bcc 	_VMCFail 					; if failed, give up.
.9daa	18		clc				clc 								; next time round, countinue
.9dab	80 f3		bra $9da0			bra 	_VMCNext
.9dad					_VMCFail:
.9dad	68		pla				pla
.9dae					_VMCFail2:
.9dae	7a		ply				ply
.9daf	38		sec				sec
.9db0	60		rts				rts
.9db1					_VMCSuccess:
.9db1	a9 00		lda #$00			lda 	#0 							; construct final
.9db3	20 02 8e	jsr $8e02			jsr 	EncodeNumber
.9db6	68		pla				pla
.9db7	c9 2d		cmp #$2d			cmp 	#"-"
.9db9	d0 03		bne $9dbe			bne 	_VMCNotNegative
.9dbb	20 45 93	jsr $9345			jsr		NSMNegate
.9dbe					_VMCNotNegative:
.9dbe	7a		ply				ply
.9dbf	18		clc				clc
.9dc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.916b					ChrUnary:
.916b	fa		plx				plx 								; restore stack pos
.916c	20 31 93	jsr $9331			jsr 	Evaluate8BitInteger			; get value
.916f	48		pha				pha
.9170	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9173	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9175	20 09 a0	jsr $a009			jsr 	StringTempAllocate
.9178	68		pla				pla 								; write number to it
.9179	20 47 a0	jsr $a047			jsr 	StringTempWrite
.917c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.917d					SpcUnary:
.917d	fa		plx				plx 								; restore stack pos
.917e	20 31 93	jsr $9331			jsr 	Evaluate8BitInteger			; get value
.9181	5a		phy				phy
.9182	48		pha				pha 								; save count
.9183	20 09 a0	jsr $a009			jsr 	StringTempAllocate
.9186	7a		ply				ply 								; to do count in Y
.9187					_SpcLoop:
.9187	c0 00		cpy #$00			cpy 	#0
.9189	f0 08		beq $9193			beq 	_SpcExit
.918b	a9 20		lda #$20			lda 	#32
.918d	20 47 a0	jsr $a047			jsr 	StringTempWrite
.9190	88		dey				dey
.9191	80 f4		bra $9187			bra 	_SPCLoop
.9193					_SpcExit:
.9193	7a		ply				ply
.9194	20 3f 99	jsr $993f			jsr 	CheckRightBracket
.9197	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9198					Unary_Str:
.9198	fa		plx				plx
.9199	20 ed 92	jsr $92ed			jsr 	EvaluateNumber  			; get number
.919c	20 3f 99	jsr $993f			jsr 	CheckRightBracket 			; closing bracket
.919f	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.91a1	20 ba 91	jsr $91ba			jsr 	ConvertNumberToString 		; do the conversion.
.91a4	a9 21		lda #$21			lda		#33 						; create buffer
.91a6	20 09 a0	jsr $a009			jsr 	StringTempAllocate 			; allocate memory
.91a9	da		phx				phx
.91aa	a2 00		ldx #$00			ldx 	#0
.91ac					_USCopy:
.91ac	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.91af	20 47 a0	jsr $a047			jsr 	StringTempWrite
.91b2	e8		inx				inx
.91b3	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.91b6	d0 f4		bne $91ac			bne 	_USCopy
.91b8	fa		plx				plx
.91b9	60		rts				rts
.91ba					ConvertNumberToString:
.91ba	5a		phy				phy 								; save code position
.91bb	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.91be	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.91c1	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.91c4	10 0a		bpl $91d0			bpl 	_CNTSNotNegative
.91c6	29 7f		and #$7f			and 	#$7F 						; make +ve
.91c8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91cb	a9 2d		lda #$2d			lda 	#"-"
.91cd	20 36 92	jsr $9236			jsr 	WriteDecimalBuffer
.91d0					_CNTSNotNegative:
.91d0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.91d3	f0 15		beq $91ea			beq 	_CNTSNotFloat
.91d5	e8		inx				inx 								; round up
.91d6	a9 01		lda #$01			lda 	#1
.91d8	20 9b 93	jsr $939b			jsr 	NSMSetByte
.91db	ca		dex				dex
.91dc	bd 28 06	lda $0628,x			lda		NSExponent,x
.91df	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.91e2	a9 08		lda #$08			lda 	#NSTFloat
.91e4	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.91e7	20 06 9b	jsr $9b06			jsr 	FloatAdd
.91ea					_CNTSNotFloat:
.91ea	20 18 92	jsr $9218			jsr 	MakePlusTwoString
.91ed	20 e4 9b	jsr $9be4			jsr 	FloatFractionalPart 		; get the fractional part
.91f0	20 a8 9c	jsr $9ca8			jsr 	NSNormalise					; normalise , exit if zero
.91f3	f0 21		beq $9216			beq 	_CNTSExit
.91f5	a9 2e		lda #$2e			lda 	#"."
.91f7	20 36 92	jsr $9236			jsr 	WriteDecimalBuffer 			; write decimal place
.91fa					_CNTSDecimal:
.91fa	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.91fd	30 17		bmi $9216			bmi 	_CNTSExit
.91ff	e8		inx				inx 								; x 10.0
.9200	a9 0a		lda #$0a			lda 	#10
.9202	20 9b 93	jsr $939b			jsr 	NSMSetByte
.9205	a9 08		lda #$08			lda 	#NSTFloat
.9207	9d 00 06	sta $0600,x			sta 	NSStatus,x
.920a	ca		dex				dex
.920b	20 71 9c	jsr $9c71			jsr 	FloatMultiply
.920e	20 18 92	jsr $9218			jsr 	MakePlusTwoString
.9211	20 e4 9b	jsr $9be4			jsr 	FloatFractionalPart 		; get the fractional part
.9214	80 e4		bra $91fa			bra 	_CNTSDecimal 				; keep going.
.9216					_CNTSExit:
.9216	7a		ply				ply
.9217	60		rts				rts
.9218					MakePlusTwoString:
.9218	da		phx				phx
.9219	20 70 93	jsr $9370			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.921c	e8		inx				inx 								; access it
.921d	e8		inx				inx
.921e	20 47 9c	jsr $9c47			jsr 	FloatIntegerPart 			; make it an integer
.9221	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9223	20 b0 9a	jsr $9ab0			jsr 	ConvertInt32
.9226	a2 00		ldx #$00			ldx	 	#0
.9228					_MPTSCopy:
.9228	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.922b	20 36 92	jsr $9236			jsr 	WriteDecimalBuffer
.922e	e8		inx				inx
.922f	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.9232	d0 f4		bne $9228			bne 	_MPTSCopy
.9234	fa		plx				plx
.9235	60		rts				rts
.9236					WriteDecimalBuffer:
.9236	da		phx				phx
.9237	ae 14 07	ldx $0714			ldx 	dbOffset
.923a	9d 8f 08	sta $088f,x			sta 	DecimalBuffer,x
.923d	9e 90 08	stz $0890,x			stz 	DecimalBuffer+1,x
.9240	ee 14 07	inc $0714			inc 	dbOffset
.9243	fa		plx				plx
.9244	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9245					Unary_Left:
.9245	fa		plx				plx
.9246	18		clc				clc 								; only one parameter
.9247	20 bc 92	jsr $92bc			jsr 	SubstringInitial 			; set up.
.924a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.924d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9250	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9253	80 2c		bra $9281			bra 	SubstringMain
.9255					Unary_Right:
.9255	fa		plx				plx
.9256	18		clc				clc 								; only one parameter
.9257	20 bc 92	jsr $92bc			jsr 	SubstringInitial 			; set up.
.925a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.925d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9260	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9263	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.9266	b0 02		bcs $926a			bcs 	_URNotUnderflow
.9268	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.926a					_URNotUnderFlow:
.926a	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.926d	80 12		bra $9281			bra 	SubStringMain
.926f					Unary_Mid:
.926f	fa		plx				plx
.9270	38		sec				sec 								; two parameters
.9271	20 bc 92	jsr $92bc			jsr 	SubstringInitial 			; set up.
.9274	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9277	f0 05		beq $927e			beq 	_UMError
.9279	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.927c	80 03		bra $9281			bra 	SubStringMain
.927e					_UMError:
.927e	4c 1e 9e	jmp $9e1e			jmp 	ArgumentError
.9281					SubStringMain:
.9281	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9284	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9287	b0 2d		bcs $92b6			bcs 	_SSMNull 					; if so, return an empty string.
.9289	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.928c	f0 28		beq $92b6			beq 	_SSMNull 					; return empty string.
.928e	18		clc				clc 								; add the offset +1 to the address and
.928f	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9292	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9295	85 36		sta $36				sta 	zTemp0
.9297	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.929a	69 00		adc #$00			adc 	#0
.929c	85 37		sta $37				sta 	zTemp0+1
.929e					_SSMNoCarry:
.929e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.92a1	20 09 a0	jsr $a009			jsr 	StringTempAllocate 			; allocate that many characters
.92a4	5a		phy				phy 								; save Y
.92a5	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.92a7					_SSMCopy:
.92a7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.92a9	f0 09		beq $92b4			beq 	_SSMEString 				; no more to copy
.92ab	20 47 a0	jsr $a047			jsr 	StringTempWrite 			; and write it out.
.92ae	c8		iny				iny
.92af	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.92b2	d0 f3		bne $92a7			bne 	_SSMCopy
.92b4					_SSMEString:
.92b4	7a		ply				ply
.92b5					_SSMExit:
.92b5	60		rts				rts
.92b6					_SSMNull:
.92b6	a9 00		lda #$00			lda 	#0
.92b8	20 09 a0	jsr $a009			jsr 	StringTempAllocate
.92bb	60		rts				rts
.92bc					SubstringInitial:
.92bc	da		phx				phx 								; save initial stack position
.92bd	08		php				php 								; save carry on stack indicating 2 parameters
.92be	20 f8 92	jsr $92f8			jsr 	EvaluateString 				; get a string
.92c1	5a		phy				phy 								; calculate length to exponent.
.92c2	a0 ff		ldy #$ff			ldy 	#$FF
.92c4					_SIFindLength:
.92c4	c8		iny				iny
.92c5	b1 36		lda ($36),y			lda 	(zTemp0),y
.92c7	d0 fb		bne $92c4			bne 	_SIFindLength
.92c9	98		tya				tya
.92ca	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92cd	7a		ply				ply
.92ce	e8		inx				inx
.92cf	20 47 99	jsr $9947			jsr 	CheckComma 					; comma next
.92d2	20 31 93	jsr $9331			jsr 	Evaluate8BitInteger 		; get next parameter
.92d5	28		plp				plp 								; is it the last parameter ?
.92d6	90 07		bcc $92df			bcc 	_SSIExit 					; if so, exit.
.92d8	e8		inx				inx
.92d9	20 47 99	jsr $9947			jsr 	CheckComma 					; comma next
.92dc	20 31 93	jsr $9331			jsr 	Evaluate8BitInteger 		; get last parameter
.92df					_SSIExit:
.92df	fa		plx				plx
.92e0	20 3f 99	jsr $993f			jsr 	CheckRightBracket 			; check closing bracket
.92e3	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.92e4					EvaluateValue:
.92e4	48		pha				pha
.92e5	20 4f 8c	jsr $8c4f			jsr		EvaluateExpression 			; expression
.92e8	20 64 8d	jsr $8d64			jsr 	Dereference					; derefernce it
.92eb	68		pla				pla
.92ec	60		rts				rts
.92ed					EvaluateNumber:
.92ed	20 e4 92	jsr $92e4			jsr 	EvaluateValue 				; get a value
.92f0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.92f3	29 10		and #$10			and 	#NSBIsString
.92f5	d0 16		bne $930d			bne 	HelperTypeError
.92f7	60		rts				rts
.92f8					EvaluateString:
.92f8	20 e4 92	jsr $92e4			jsr 	EvaluateValue 				; get a value
.92fb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.92fe	29 10		and #$10			and 	#NSBIsString
.9300	f0 0b		beq $930d			beq 	HelperTypeError
.9302					CopyAddressToTemp0:
.9302	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9305	85 36		sta $36				sta 	zTemp0
.9307	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.930a	85 37		sta $37				sta 	zTemp0+1
.930c	60		rts				rts
.930d					HelperTypeError:
.930d	4c 19 9e	jmp $9e19			jmp 	TypeError
.9310					EvaluateInteger:
.9310	20 ed 92	jsr $92ed			jsr 	EvaluateNumber
.9313	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9316	d0 0a		bne $9322			bne 	HelperValueError 			; if not, it's a float.
.9318	60		rts				rts
.9319					EvaluateUnsignedInteger:
.9319	20 10 93	jsr $9310			jsr 	EvaluateInteger 			; check integer is +ve
.931c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.931f	30 01		bmi $9322			bmi 	HelperValueError
.9321	60		rts				rts
.9322					HelperValueError:
.9322	4c 1e 9e	jmp $9e1e			jmp 	ArgumentError
.9325					Evaluate16BitInteger:
.9325	20 19 93	jsr $9319			jsr	 	EvaluateUnsignedInteger		; get integer
.9328	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.932b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.932e	d0 f2		bne $9322			bne 	HelperValueError
.9330	60		rts				rts
.9331					Evaluate8BitInteger:
.9331	20 19 93	jsr $9319			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9334	d0 ec		bne $9322			bne 	HelperValueError
.9336	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9339	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.933c	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.933f	d0 e1		bne $9322			bne 	HelperValueError
.9341	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9344	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9dc1					Multiply8x8:
.9dc1	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9dc2	85 36		sta $36			  	sta 	zTemp0
.9dc4	86 37		stx $37				stx 	zTemp0+1
.9dc6	a9 00		lda #$00			lda 	#0
.9dc8	a2 08		ldx #$08			ldx 	#8
.9dca					_M88Loop:
.9dca	90 03		bcc $9dcf			bcc 	_M88NoAdd
.9dcc	18		clc				clc
.9dcd	65 37		adc $37				adc 	zTemp0+1
.9dcf					_M88NoAdd:
.9dcf	6a		ror a				ror 	a
.9dd0	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9dd2	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9dd3	d0 f5		bne $9dca			bne 	_M88Loop
.9dd5	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dd7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9345					NSMNegate:
.9345	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9348	49 80		eor #$80			eor 	#NSBIsNegative
.934a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.934d	60		rts				rts
.934e					NSMNegateMantissa:
.934e	38		sec				sec
.934f	a9 00		lda #$00			lda 	#0
.9351	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9354	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9357	a9 00		lda #$00			lda 	#0
.9359	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.935c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.935f	a9 00		lda #$00			lda 	#0
.9361	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9364	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9367	a9 00		lda #$00			lda 	#0
.9369	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.936c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.936f	60		rts				rts
.9370					NSMShiftUpTwo:
.9370	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9373	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9376	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9379	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.937c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.937f	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9382	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9385	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9388	bd 28 06	lda $0628,x			lda 	NSExponent,x
.938b	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.938e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9391	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9394	60		rts				rts
.9395					NSMSetZeroMantissaOnly:
.9395	a9 00		lda #$00			lda 	#0
.9397	80 08		bra $93a1			bra 	NSMSetMantissa
.9399					NSMSetZero:
.9399	a9 00		lda #$00			lda 	#0
.939b					NSMSetByte:
.939b	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.939e	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.93a1					NSMSetMantissa:
.93a1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.93a4	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.93a7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.93aa	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.93ad	60		rts				rts
.93ae					NSMShiftLeft:
.93ae	18		clc				clc
.93af					NSMRotateLeft:
.93af	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.93b2	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.93b5	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.93b8	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.93bb	60		rts				rts
.93bc					NSMShiftRight:
.93bc	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.93bf	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.93c2	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.93c5	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.93c8	60		rts				rts
.93c9					NSMIsZero:
.93c9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.93cc	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.93cf	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.93d2	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.93d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9dd8					DecimalScalarTable:
>9dd8	66 66 66 66				.dword $66666666 ; 0.1
>9ddc	de					.byte $de
>9ddd	1f 85 eb 51				.dword $51eb851f ; 0.01
>9de1	db					.byte $db
>9de2	4c 37 89 41				.dword $4189374c ; 0.001
>9de6	d8					.byte $d8
>9de7	ac 8b db 68				.dword $68db8bac ; 0.0001
>9deb	d4					.byte $d4
>9dec	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9df0	d1					.byte $d1
>9df1	83 de 1b 43				.dword $431bde83 ; 1e-06
>9df5	ce					.byte $ce
>9df6	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9dfa	ca					.byte $ca
>9dfb	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9dff	c7					.byte $c7
>9e00	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9e04	c4					.byte $c4
>9e05	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9e09	c0					.byte $c0
>9e0a	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9e0e	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9e0f					SyntaxError:
.9e0f	a9 02		lda #$02		lda	#2
.9e11	4c 46 88	jmp $8846		jmp	ErrorHandler
.9e14					RangeError:
.9e14	a9 04		lda #$04		lda	#4
.9e16	4c 46 88	jmp $8846		jmp	ErrorHandler
.9e19					TypeError:
.9e19	a9 05		lda #$05		lda	#5
.9e1b	4c 46 88	jmp $8846		jmp	ErrorHandler
.9e1e					ArgumentError:
.9e1e	a9 07		lda #$07		lda	#7
.9e20	4c 46 88	jmp $8846		jmp	ErrorHandler
.9e23					NotDoneError:
.9e23	a9 0c		lda #$0c		lda	#12
.9e25	4c 46 88	jmp $8846		jmp	ErrorHandler
.9e28					ErrorText:
>9e28	42 72 65 61 6b 00			.text	"Break",0
>9e2e	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9e36	72 72 6f 72 00
>9e3b	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9e43	20 62 79 20 7a 65 72 6f 00
>9e4c	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9e54	61 6e 67 65 00
>9e59	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9e61	6d 61 74 63 68 00
>9e67	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9e6f	65 6d 6f 72 79 00
>9e75	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9e7d	61 72 67 75 6d 65 6e 74 00
>9e86	53 74 6f 70 00				.text	"Stop",0
>9e8b	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9e93	6f 6f 20 6c 6f 6e 67 00
>9e9b	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9ea3	6e 20 66 61 69 6c 65 64 00
>9eac	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9eb4	61 74 61 00
>9eb8	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9ec0	65 6e 74 65 64 00
>9ec6	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9ece	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9eda	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9ee2	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9eef	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9ef7	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9f04	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9f0c	68 6f 75 74 20 57 68 69 6c 65 00
>9f17	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9f1f	68 6f 75 74 20 46 6f 72 00
>9f28	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9f30	61 63 6b 20 66 75 6c 6c 00
>9f39	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9f41	75 63 74 75 72 65 00
>9f48	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9f50	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>9f5d	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>9f65	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>9f73	41 72 72 61 79 20 73 69			.text	"Array size",0
>9f7b	7a 65 00
>9f7e	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>9f86	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.93d6					StackOpen:
.93d6	48		pha				pha 								; save frame byte
.93d7	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.93d9	0a		asl a				asl 	a 							; claim twice this for storage
.93da	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.93dc	38		sec				sec 								; so basically subtracting from
.93dd	65 34		adc $34				adc 	basicStack 	 				; basicStack
.93df	85 34		sta $34				sta 	basicStack
.93e1	b0 08		bcs $93eb			bcs 	_SONoBorrow
.93e3	c6 35		dec $35				dec 	basicStack+1
.93e5	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.93e7	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.93e9	90 04		bcc $93ef			bcc 	_SOMemory
.93eb					_SONoBorrow:
.93eb	68		pla				pla 								; get marker back and write at TOS
.93ec	92 34		sta ($34)			sta 	(basicStack)
.93ee	60		rts				rts
.93ef					_SOMemory:
.93ef							ERR_STACK
.93ef					StackClose:
.93ef	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.93f1	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.93f3	0a		asl a				asl 	a 							; claim twice this.
.93f4	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.93f6	85 34		sta $34				sta 	basicStack
.93f8	90 02		bcc $93fc			bcc 	_SCExit
.93fa	e6 35		inc $35				inc 	basicStack+1
.93fc					_SCExit:
.93fc	60		rts				rts
.93fd					StackCheckFrame:
.93fd	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.93ff	29 f0		and #$f0			and 	#$F0 						; check type bits
.9401	d0 01		bne $9404			bne 	_SCFError 					; different, we have structures mixed up
.9403	60		rts				rts
.9404					_SCFError:
.9404	8a		txa				txa 								; report error X
.9405	4c 46 88	jmp $8846			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9408					STKSaveCodePosition:
.9408	5a		phy				phy
.9409	98		tya				tya 								; save Y
.940a	a0 05		ldy #$05			ldy 	#5
.940c	91 34		sta ($34),y			sta 	(basicStack),y
.940e	88		dey				dey 								; save Code Pointer
.940f					_STKSaveLoop:
.940f	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9412	91 34		sta ($34),y			sta 	(basicStack),y
.9414	88		dey				dey
.9415	d0 f8		bne $940f			bne 	_STKSaveLoop
.9417	7a		ply				ply
.9418	60		rts				rts
.9419					STKLoadCodePosition:
.9419	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.941b					_STKLoadLoop:
.941b	b1 34		lda ($34),y			lda 	(basicStack),y
.941d	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9420	c8		iny				iny
.9421	c0 05		cpy #$05			cpy 	#5
.9423	d0 f6		bne $941b			bne 	_STKLoadLoop
.9425	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9427	a8		tay				tay
.9428	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9429					StackReset:
.9429	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.942b	85 34		sta $34				sta 	0+basicStack
.942d	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.942f	85 35		sta $35				sta 	1+basicStack
.9431	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9433	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9435	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9f8e					StringConcrete:
.9f8e	5a		phy				phy 								; save position on stack
.9f8f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9f92	85 38		sta $38				sta 	zTemp1
.9f94	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9f97	85 39		sta $39				sta 	zTemp1+1
.9f99	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9f9b					_SALength:
.9f9b	c8		iny				iny
.9f9c	b1 38		lda ($38),y			lda 	(zTemp1),y
.9f9e	d0 fb		bne $9f9b			bne 	_SALength
.9fa0	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9fa2	b0 3f		bcs $9fe3			bcs 	_SALengthError
.9fa4	98		tya				tya 				 				; length of the new string
.9fa5	18		clc				clc
.9fa6	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9fa8	90 02		bcc $9fac			bcc 	_SAHaveLength
.9faa	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9fac					_SAHaveLength:
.9fac	48		pha				pha 								; save length.
.9fad	38		sec				sec
.9fae	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9fb0	6d 0e 07	adc $070e			adc 	StringMemory
.9fb3	8d 0e 07	sta $070e			sta 	StringMemory
.9fb6	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9fb8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9fbb	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9fbd	6d 0f 07	adc $070f			adc 	StringMemory+1
.9fc0	8d 0f 07	sta $070f			sta 	StringMemory+1
.9fc3	85 3b		sta $3b				sta 	zTemp2+1
.9fc5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fc8	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9fc9	38		sec				sec
.9fca	e9 03		sbc #$03			sbc 	#3
.9fcc	92 3a		sta ($3a)			sta 	(zTemp2)
.9fce	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9fd0	a0 01		ldy #$01			ldy 	#1
.9fd2	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9fd4					_SACopyNewString:
.9fd4	a0 00		ldy #$00			ldy 	#0
.9fd6					_SACopyNSLoop:
.9fd6	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9fd8	c8		iny				iny 								; write two on in string storage
.9fd9	c8		iny				iny
.9fda	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9fdc	88		dey				dey 								; this makes it one one.
.9fdd	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9fdf	d0 f5		bne $9fd6			bne 	_SACopyNSLoop
.9fe1	7a		ply				ply
.9fe2	60		rts				rts
.9fe3					_SALengthError:
.9fe3	a9 09		lda #$09		lda	#9
.9fe5	4c 46 88	jmp $8846		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9fe8					StringSystemInitialise:
.9fe8	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9fea	8d 0e 07	sta $070e			sta 	0+StringMemory
.9fed	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9fef	8d 0f 07	sta $070f			sta 	1+StringMemory
.9ff2	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9ff5	60		rts				rts
.9ff6					StringSpaceInitialise:
.9ff6	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9ff8	8d 10 07	sta $0710			sta 	StringInitialised
.9ffb	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9ffe	8d 11 07	sta $0711			sta 	StringTempPointer
.a001	ad 0f 07	lda $070f			lda 	StringMemory+1
.a004	3a		dec a				dec 	a
.a005	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a008	60		rts				rts
.a009					StringTempAllocate:
.a009	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a00b	b0 35		bcs $a042			bcs 	_STALength
.a00d	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a010	30 05		bmi $a017			bmi 	_STAAllocate
.a012	48		pha				pha 								; save value to subtract.
.a013	20 f6 9f	jsr $9ff6			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a016	68		pla				pla 								; restore it
.a017					_STAAllocate:
.a017	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a019	18		clc				clc  								; deliberate allows one more
.a01a	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a01d	8d 11 07	sta $0711			sta 	StringTempPointer
.a020	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a023	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a025	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a028	69 ff		adc #$ff			adc 	#$FF
.a02a	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a02d	85 3d		sta $3d				sta 	zsTemp+1
.a02f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a032	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a035	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a038	a9 10		lda #$10			lda 	#NSTString
.a03a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a03d	a9 00		lda #$00			lda 	#0 							; clear the target string
.a03f	92 3c		sta ($3c)			sta 	(zsTemp)
.a041	60		rts				rts
.a042					_STALength:
.a042	a9 09		lda #$09		lda	#9
.a044	4c 46 88	jmp $8846		jmp	ErrorHandler
.a047					StringTempWrite:
.a047	48		pha				pha
.a048	92 3c		sta ($3c)			sta 	(zsTemp)
.a04a	e6 3c		inc $3c				inc 	zsTemp
.a04c	d0 02		bne $a050			bne 	_STWNoCarry
.a04e	e6 3d		inc $3d				inc 	zsTemp+1
.a050					_STWNoCarry:
.a050	a9 00		lda #$00			lda 	#0
.a052	92 3c		sta ($3c)			sta 	(zsTemp)
.a054	68		pla				pla
.a055	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9436					BackloadProgram:
.9436	a2 ff		ldx #$ff			ldx 	#$FF
.9438	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.943b	20 65 94	jsr $9465			jsr 	BLReadByte
.943e	30 1e		bmi $945e			bmi 	_BPExit
.9440					_BPCopy:
.9440	e8		inx				inx  								; copy byte in
.9441	9d 1c 08	sta $081c,x			sta 	lineBuffer,x
.9444	9e 1d 08	stz $081d,x			stz 	lineBuffer+1,x
.9447	20 65 94	jsr $9465			jsr 	BLReadByte 					; read next byte
.944a	30 0a		bmi $9456			bmi 	_BPEndLine 					; -ve = EOL
.944c	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.944e	d0 02		bne $9452			bne 	_BPNotTab
.9450	a9 20		lda #$20			lda 	#' '
.9452					_BPNotTab:
.9452	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9454	b0 ea		bcs $9440			bcs 	_BPCopy
.9456					_BPEndLine:
.9456	20 2f 96	jsr $962f			jsr 	TokeniseLine 				; tokenise the line.
.9459	20 bb 98	jsr $98bb			jsr 	MemoryAppend 				; append to current program
.945c	80 d8		bra $9436			bra 	BackloadProgram
.945e					_BPExit:
.945e	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9461	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.9464	60		rts				rts
.9465					BLReadByte:
.9465					_BLLoad:
.9465	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9468	ee 66 94	inc $9466			inc 	_BLLoad+1
.946b	d0 03		bne $9470			bne 	_BLNoCarry
.946d	ee 67 94	inc $9467			inc 	_BLLoad+2
.9470					_BLNoCarry:
.9470	c9 00		cmp #$00			cmp 	#0
.9472	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9473					TokeniseSearchTable:
.9473	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9475	85 36		sta $36				sta 	zTemp0
.9477	a0 00		ldy #$00			ldy 	#0
.9479	a9 80		lda #$80			lda 	#$80 						; token #
.947b	85 38		sta $38				sta 	zTemp1
.947d					_TSTLoop:
.947d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.947f	30 49		bmi $94ca			bmi 	_TSTFail 					; -ve = end of table
.9481	f0 2e		beq $94b1			beq 	_TSTNext 					; zero, check next it's a dummy
.9483	c8		iny				iny 								; get the hash
.9484	b1 36		lda ($36),y			lda 	(zTemp0),y
.9486	88		dey				dey
.9487	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.948a	d0 25		bne $94b1			bne 	_TSTNext
.948c	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.948f	38		sec				sec
.9490	ed 00 07	sbc $0700			sbc 	identStart
.9493	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9495	d0 1a		bne $94b1			bne 	_TSTNext
.9497	5a		phy				phy 								; save Y , we might fail
.9498	c8		iny				iny 								; point to text
.9499	c8		iny				iny
.949a	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.949d					_TSTCompareName:
.949d	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; compare text.
.94a0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.94a2	d0 0c		bne $94b0			bne 	_TSTNextPullY 				; fail, pullY and do next
.94a4	e8		inx				inx
.94a5	c8		iny				iny
.94a6	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.94a9	d0 f2		bne $949d			bne 	_TSTCompareName
.94ab	7a		ply				ply 								; throw Y
.94ac	a5 38		lda $38				lda 	zTemp1 						; get token #
.94ae	38		sec				sec 								; return with CS = passed.
.94af	60		rts				rts
.94b0					_TSTNextPullY:
.94b0	7a		ply				ply 								; restore current, fall through.
.94b1					_TSTNext:
.94b1	e6 38		inc $38				inc 	zTemp1 						; token counter
.94b3	98		tya				tya
.94b4	18		clc				clc
.94b5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.94b7	1a		inc a				inc 	a 							; +1
.94b8	1a		inc a				inc 	a 							; +2
.94b9	a8		tay				tay
.94ba	10 c1		bpl $947d			bpl 	_TSTLoop 					; if Y < $80 loop back
.94bc	98		tya				tya 								; add Y to zTemp0 and reset Y
.94bd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.94bf	18		clc				clc  								; but have tables > 255 bytes
.94c0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.94c2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.94c4	90 b7		bcc $947d			bcc 	_TSTLoop
.94c6	e6 37		inc $37				inc 	zTemp0+1
.94c8	80 b3		bra $947d			bra 	_TSTLoop
.94ca					_TSTFail:
.94ca	18		clc				clc
.94cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.94cc					KeywordSet0:
>94cc	00 65					.text	0,$65,""               ; $80 !0:EOF
>94ce	00 58					.text	0,$58,""               ; $81 !1:SH1
>94d0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>94d2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>94d8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>94e0	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>94e6	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>94ed	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>94f4	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>94fb	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9501	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9509	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9511	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9517	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>951e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9524	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>952c	28
>952d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9533	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9539	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>953f	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9546	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>954c	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9552	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9557	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>955b	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9561	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9569	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9570	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9577	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>957f	43
>9580	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9586	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>958c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9593	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9599	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>959f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>95a4	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>95aa	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>95af	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>95b7	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>95bd	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>95c4	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>95ca	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>95cf	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>95d6	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>95dc	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>95e1	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>95e9	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>95ed	ff					.text	$FF
.95ee					KeywordSet1:
>95ee	00 65					.text	0,$65,""               ; $80 !0:EOF
>95f0	00 58					.text	0,$58,""               ; $81 !1:SH1
>95f2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>95f4	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>95fc	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9603	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9608	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>960e	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9613	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>961b	45
>961c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9621	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9627	ff					.text	$FF
.9628					KeywordSet2:
>9628	00 65					.text	0,$65,""               ; $80 !0:EOF
>962a	00 58					.text	0,$58,""               ; $81 !1:SH1
>962c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>962e	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.962f					TokeniseLine:
.962f	20 b7 97	jsr $97b7			jsr 	FixLineBufferCase 			; fix line case
.9632	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9634	8d 1c 07	sta $071c			sta 	tokenOffset
.9637	9c 1d 07	stz $071d			stz 	tokenLineNumber
.963a	9c 1e 07	stz $071e			stz 	tokenLineNumber+1
.963d	a2 ff		ldx #$ff			ldx 	#$FF
.963f					_TKFindFirst:
.963f	e8		inx				inx
.9640	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.9643	f0 79		beq $96be			beq 	_TKExit
.9645	c9 20		cmp #$20			cmp 	#' '
.9647	90 f6		bcc $963f			bcc 	_TKFindFirst
.9649	c9 30		cmp #$30			cmp 	#'0'
.964b	90 07		bcc $9654			bcc 	_TKNoLineNumber
.964d	c9 3a		cmp #$3a			cmp 	#'9'+1
.964f	b0 03		bcs $9654			bcs 	_TKNoLineNumber
.9651	20 e1 97	jsr $97e1			jsr 	TokeniseExtractLineNumber
.9654					_TKNoLineNumber:
.9654					_TKTokeniseLoop:
.9654	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9657	f0 65		beq $96be			beq 	_TKExit
.9659	e8		inx				inx
.965a	c9 20		cmp #$20			cmp 	#' '
.965c	f0 f6		beq $9654			beq 	_TKTokeniseLoop 			; keep looping if space found.
.965e	ca		dex				dex 								; undo last get, A contains character, X is position.
.965f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9661	f0 61		beq $96c4			beq 	_TKTokeniseIdentifier
.9663	c9 41		cmp #$41			cmp 	#'A'
.9665	90 04		bcc $966b			bcc 	_TKTokenisePunctuation
.9667	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9669	90 59		bcc $96c4			bcc 	_TKTokeniseIdentifier
.966b					_TKTokenisePunctuation:
.966b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.966d	f0 27		beq $9696			beq 	_TKString
.966f	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9671	f0 28		beq $969b			beq 	_TKHexConstant
.9673	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9675	f0 29		beq $96a0			beq 	_TKCheckDouble
.9677	c9 3e		cmp #$3e			cmp 	#'>'
.9679	f0 25		beq $96a0			beq 	_TKCheckDouble
.967b					_TKStandardPunctuation:
.967b	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get it back.
.967e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9680	90 0e		bcc $9690			bcc 	_TKNoShift
.9682	48		pha				pha 								; save
.9683	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9685	85 36		sta $36				sta 	zTemp0
.9687	68		pla				pla
.9688	29 20		and #$20			and 	#32 						; bit 5
.968a	4a		lsr a				lsr 	a 							; shift into bit 3
.968b	4a		lsr a				lsr 	a
.968c	05 36		ora $36				ora 	zTemp0
.968e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9690					_TKNoShift:
.9690	20 26 98	jsr $9826			jsr 	TokeniseWriteByte 			; write the punctuation character
.9693	e8		inx				inx 								; consume the character
.9694	80 be		bra $9654			bra 	_TKTokeniseLoop 			; and loop round again.
.9696					_TKString:
.9696	20 46 97	jsr $9746			jsr 	TokeniseString
.9699	80 b9		bra $9654			bra 	_TKTokeniseLoop
.969b					_TKHexConstant:
.969b	20 81 97	jsr $9781			jsr 	TokeniseHexConstant
.969e	80 b4		bra $9654			bra 	_TKTokeniseLoop
.96a0					_TKCheckDouble:
.96a0	bd 1d 08	lda $081d,x			lda 	lineBuffer+1,x 				; get next character
.96a3	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.96a5	90 d4		bcc $967b			bcc 	_TKStandardPunctuation
.96a7	c9 3f		cmp #$3f			cmp 	#'>'+1
.96a9	b0 d0		bcs $967b			bcs 	_TKStandardPunctuation
.96ab	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.96ae	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.96b0	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.96b1	7d 1d 08	adc $081d,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.96b4	38		sec				sec
.96b5	e9 3c		sbc #$3c			sbc 	#'<'
.96b7	20 26 98	jsr $9826			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.96ba	e8		inx				inx 								; consume both
.96bb	e8		inx				inx
.96bc	80 96		bra $9654			bra 	_TKTokeniseLoop
.96be	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.96c0	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.96c3	60		rts				rts
.96c4					_TKTokeniseIdentifier:
.96c4	8e 00 07	stx $0700			stx 	identStart 					; save start
.96c7	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.96ca					_TKCheckLoop:
.96ca	e8		inx				inx 								; look at next, we know first is identifier.
.96cb	bd 1c 08	lda $081c,x			lda  	lineBuffer,x
.96ce	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.96d0	f0 f8		beq $96ca			beq 	_TKCheckLoop
.96d2	c9 30		cmp #$30			cmp	 	#"0"
.96d4	90 0c		bcc $96e2			bcc 	_TKEndIdentifier
.96d6	c9 3a		cmp #$3a			cmp 	#"9"+1
.96d8	90 f0		bcc $96ca			bcc 	_TKCheckLoop
.96da	c9 41		cmp #$41			cmp	 	#"A"
.96dc	90 04		bcc $96e2			bcc 	_TKEndIdentifier
.96de	c9 5b		cmp #$5b			cmp 	#"Z"+1
.96e0	90 e8		bcc $96ca			bcc 	_TKCheckLoop
.96e2					_TKEndIdentifier:
.96e2	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.96e5	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.96e7	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.96e9	f0 06		beq $96f1			beq 	_TKHasTypeCharacter
.96eb	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.96ed	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.96ef	d0 07		bne $96f8			bne 	_TKNoTypeCharacter
.96f1					_TKHasTypeCharacter:
.96f1	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.96f4	e8		inx				inx 								; read next
.96f5	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.96f8					_TKNoTypeCharacter:
.96f8	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.96fa	d0 09		bne $9705			bne 	_TKNoArray
.96fc	e8		inx				inx 								; skip the (
.96fd	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9700	09 04		ora #$04			ora 	#$04
.9702	8d 04 07	sta $0704			sta 	identTypeByte
.9705					_TKNoArray:
.9705	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9708	20 a2 97	jsr $97a2			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.970b	a0 94		ldy #$94			ldy 	#(KeywordSet0) >> 8
.970d	a9 cc		lda #$cc			lda 	#(KeywordSet0) & $FF
.970f	20 73 94	jsr $9473			jsr 	TokeniseSearchTable
.9712	a2 00		ldx #$00			ldx 	#0
.9714	b0 1f		bcs $9735			bcs 	_TKFoundToken
.9716	a0 95		ldy #$95			ldy 	#(KeywordSet1) >> 8
.9718	a9 ee		lda #$ee			lda 	#(KeywordSet1) & $FF
.971a	20 73 94	jsr $9473			jsr 	TokeniseSearchTable
.971d	a2 81		ldx #$81			ldx 	#$81
.971f	b0 14		bcs $9735			bcs 	_TKFoundToken
.9721	a0 95		ldy #$95			ldy 	#(KeywordSet1) >> 8
.9723	a9 ee		lda #$ee			lda 	#(KeywordSet1) & $FF
.9725	20 73 94	jsr $9473			jsr 	TokeniseSearchTable
.9728	a2 82		ldx #$82			ldx 	#$82
.972a	b0 09		bcs $9735			bcs 	_TKFoundToken
.972c	20 32 98	jsr $9832			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.972f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9732	4c 54 96	jmp $9654			jmp 	_TKTokeniseLoop 			; and go round again.
.9735					_TKFoundToken:
.9735	48		pha				pha 								; save token
.9736	8a		txa				txa 								; shift in X, is there one ?
.9737	f0 03		beq $973c			beq 	_TKNoTShift
.9739	20 26 98	jsr $9826			jsr 	TokeniseWriteByte 			; if so, write it out
.973c					_TKNoTShift:
.973c	68		pla				pla 								; restore and write token
.973d	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.9740	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9743	4c 54 96	jmp $9654			jmp 	_TKTokeniseLoop 			; and go round again.
.9746					TokeniseString:
.9746	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9748	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.974b	e8		inx				inx									; start of quoted string.
.974c	da		phx				phx 								; push start of string on top
.974d	ca		dex				dex
.974e					_TSFindEnd:
.974e	e8		inx				inx
.974f	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character
.9752	f0 04		beq $9758			beq 	_TSEndOfString
.9754	c9 22		cmp #$22			cmp 	#'"'
.9756	d0 f6		bne $974e			bne 	_TSFindEnd
.9758					_TSEndOfString:
.9758	7a		ply				ply  								; so now Y is first character, X is character after end.
.9759	48		pha				pha 								; save terminating character
.975a	20 62 97	jsr $9762			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.975d	68		pla				pla 								; terminating character
.975e	f0 01		beq $9761			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9760	e8		inx				inx
.9761					_TSNotQuote:
.9761	60		rts				rts
.9762					TOWriteBlockXY:
.9762	86 36		stx $36				stx 	zTemp0 						; write end character
.9764	98		tya				tya
.9765	49 ff		eor #$ff			eor 	#$FF
.9767	38		sec				sec
.9768	65 36		adc $36				adc 	zTemp0
.976a	1a		inc a				inc 	a 							; one extra for NULL
.976b	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.976e					_TOBlockLoop:
.976e	c4 36		cpy $36				cpy 	zTemp0
.9770	f0 09		beq $977b			beq 	_TOBlockExit
.9772	b9 1c 08	lda $081c,y			lda 	lineBuffer,y
.9775	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.9778	c8		iny				iny
.9779	80 f3		bra $976e			bra 	_TOBlockLoop
.977b					_TOBlockExit:
.977b	a9 00		lda #$00			lda 	#0
.977d	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.9780	60		rts				rts
.9781					TokeniseHexConstant:
.9781	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9783	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.9786	e8		inx				inx									; start of quoted string.
.9787	da		phx				phx 								; push start of constant on top
.9788	ca		dex				dex
.9789					_THFindLoop:
.9789	e8		inx				inx
.978a	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.978d	c9 30		cmp #$30			cmp 	#"0"
.978f	90 0c		bcc $979d			bcc 	_THFoundEnd
.9791	c9 3a		cmp #$3a			cmp 	#"9"+1
.9793	90 f4		bcc $9789			bcc 	_THFindLoop
.9795	c9 41		cmp #$41			cmp 	#"A"
.9797	90 04		bcc $979d			bcc 	_THFoundEnd
.9799	c9 47		cmp #$47			cmp 	#"F"+1
.979b	90 ec		bcc $9789			bcc 	_THFindLoop
.979d					_THFoundEnd:
.979d	7a		ply				ply 								; restore start
.979e	20 62 97	jsr $9762			jsr 	TOWriteBlockXY 				; output the block
.97a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.97a2					TokeniseCalculateHash:
.97a2	da		phx				phx
.97a3	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.97a6	a9 00		lda #$00			lda 	#0
.97a8					_TCHLoop:
.97a8	18		clc				clc
.97a9	7d 1c 08	adc $081c,x			adc 	lineBuffer,x
.97ac	e8		inx				inx
.97ad	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.97b0	d0 f6		bne $97a8			bne 	_TCHLoop
.97b2	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.97b5	fa		plx				plx
.97b6	60		rts				rts
.97b7					FixLineBufferCase:
.97b7	a2 00		ldx #$00			ldx 	#0
.97b9					_FLBCLoop:
.97b9	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next character
.97bc	f0 22		beq $97e0			beq 	_FLBCExit 					; end of string.
.97be	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.97c0	f0 11		beq $97d3			beq 	_FLBCInQuotes
.97c2	e8		inx				inx
.97c3	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.97c5	90 f2		bcc $97b9			bcc 	_FLBCLoop
.97c7	c9 7b		cmp #$7b			cmp 	#'z'+1
.97c9	b0 ee		bcs $97b9			bcs 	_FLBCLoop
.97cb	38		sec				sec 								; make U/C
.97cc	e9 20		sbc #$20			sbc 	#32
.97ce	9d 1b 08	sta $081b,x			sta	 	lineBuffer-1,x 				; write back
.97d1	80 e6		bra $97b9			bra 	_FLBCLoop
.97d3					_FLBCInQuotes:
.97d3	e8		inx				inx 								; advance
.97d4	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next
.97d7	f0 07		beq $97e0			beq 	_FLBCExit 					; exit on EOS
.97d9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.97db	d0 f6		bne $97d3			bne 	_FLBCInQuotes
.97dd	e8		inx				inx 								; skip over it
.97de	80 d9		bra $97b9			bra 	_FLBCLoop
.97e0					_FLBCExit:
.97e0	60		rts				rts
.97e1					TokeniseExtractLineNumber:
.97e1	ad 1e 07	lda $071e			lda 	tokenLineNumber+1 			; push current value on stack
.97e4	48		pha				pha
.97e5	ad 1d 07	lda $071d			lda 	tokenLineNumber
.97e8	48		pha				pha
.97e9	20 1f 98	jsr $981f			jsr 	_TELNTimes2 				; line # x 4
.97ec	20 1f 98	jsr $981f			jsr 	_TELNTimes2 				; line # x 2
.97ef	18		clc				clc 								; add stacked value
.97f0	68		pla				pla
.97f1	6d 1d 07	adc $071d			adc 	tokenLineNumber
.97f4	8d 1d 07	sta $071d			sta 	tokenLineNumber
.97f7	68		pla				pla
.97f8	6d 1e 07	adc $071e			adc 	tokenLineNumber+1
.97fb	8d 1e 07	sta $071e			sta 	tokenLineNumber+1 			; line # x 5
.97fe	20 1f 98	jsr $981f			jsr 	_TELNTimes2 				; line # x 10
.9801	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get and consume character
.9804	e8		inx				inx
.9805	29 0f		and #$0f			and 	#15 						; add to line #
.9807	18		clc				clc
.9808	6d 1d 07	adc $071d			adc 	tokenLineNumber
.980b	8d 1d 07	sta $071d			sta 	tokenLineNumber
.980e	90 03		bcc $9813			bcc 	_TLENNoCarry
.9810	ee 1e 07	inc $071e			inc 	tokenLineNumber+1
.9813					_TLENNoCarry:
.9813	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; more digits ?
.9816	c9 30		cmp #$30			cmp 	#'0'
.9818	90 04		bcc $981e			bcc 	_TLENExit
.981a	c9 3a		cmp #$3a			cmp 	#'9'+1
.981c	90 c3		bcc $97e1			bcc 	TokeniseExtractLineNumber
.981e					_TLENExit:
.981e	60		rts				rts
.981f					_TELNTimes2:
.981f	0e 1d 07	asl $071d			asl 	tokenLineNumber
.9822	2e 1e 07	rol $071e			rol 	tokenLineNumber+1
.9825	60		rts				rts
.9826					TokeniseWriteByte:
.9826	da		phx				phx
.9827	ae 1c 07	ldx $071c			ldx 	tokenOffset 				; next slot to write to
.982a	9d 1c 07	sta $071c,x			sta 	tokenOffset,x 				; write byte out
.982d	ee 1c 07	inc $071c			inc 	tokenOffset 				; advance slot.
.9830	fa		plx				plx
.9831	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9832					CheckCreateVariableRecord:
.9832	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9834	85 36		sta $36				sta 	0+zTemp0
.9836	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9838	85 37		sta $37				sta 	1+zTemp0
.983a					_CCVSearch:
.983a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.983c	f0 2c		beq $986a			beq 	_CCVFail
.983e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9840	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9842	cd 03 07	cmp $0703			cmp 	identHash
.9845	d0 16		bne $985d			bne 	_CCVNext
.9847	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9849	ae 00 07	ldx $0700			ldx 	identStart
.984c					_CCVCompare:
.984c	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.984f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9851	e8		inx				inx 								; advance pointers
.9852	c8		iny				iny
.9853	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9854	d0 07		bne $985d			bne 	_CCVNext  					; didn't match go to next.
.9856	90 f4		bcc $984c			bcc 	_CCVCompare 				; not finished yet.
.9858	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.985b	f0 41		beq $989e			beq 	_CCVFound 					; yes, we were successful
.985d					_CCVNext:
.985d	18		clc				clc
.985e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9860	65 36		adc $36				adc 	zTemp0
.9862	85 36		sta $36				sta 	zTemp0
.9864	90 d4		bcc $983a			bcc 	_CCVSearch
.9866	e6 37		inc $37				inc 	zTemp0+1
.9868	80 d0		bra $983a			bra 	_CCVSearch
.986a					_CCVFail:
.986a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.986c	ad 03 07	lda $0703			lda 	identHash
.986f	91 36		sta ($36),y			sta 	(zTemp0),y
.9871	c8		iny				iny 								; offset 2 is the type byte
.9872	ad 04 07	lda $0704			lda 	identTypeByte
.9875	91 36		sta ($36),y			sta 	(zTemp0),y
.9877	c8		iny				iny
.9878					_CCVData:
.9878	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.987a	91 36		sta ($36),y			sta 	(zTemp0),y
.987c	c8		iny				iny
.987d	c0 08		cpy #$08			cpy 	#8
.987f	90 f7		bcc $9878			bcc 	_CCVData
.9881	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9884					_CCVCopyName:
.9884	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.9887	91 36		sta ($36),y			sta 	(zTemp0),y
.9889	e8		inx				inx
.988a	c8		iny				iny
.988b	ec 02 07	cpx $0702			cpx 	identTypeEnd
.988e	d0 f4		bne $9884			bne 	_CCVCopyName
.9890	98		tya				tya 								; patch offset
.9891	92 36		sta ($36)			sta 	(zTemp0)
.9893	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9895	91 36		sta ($36),y			sta 	(zTemp0),y
.9897	88		dey				dey
.9898	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.989a	09 80		ora #$80			ora 	#$80
.989c	91 36		sta ($36),y			sta 	(zTemp0),y
.989e					_CCVFound:
.989e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.98a0	38		sec				sec
.98a1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.98a3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.98a5	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.98a8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.98aa	20 26 98	jsr $9826			jsr 	TokeniseWriteByte
.98ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a056					MemoryPeek:
.a056	b2 36		lda ($36)			lda 	(zTemp0)
.a058	60		rts				rts
.a059					MemoryPoke:
.a059	92 36		sta ($36)			sta 	(zTemp0)
.a05b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a05c					PrintHex:
.a05c	48		pha				pha
.a05d	4a		lsr a				lsr 	a
.a05e	4a		lsr a				lsr 	a
.a05f	4a		lsr a				lsr 	a
.a060	4a		lsr a				lsr 	a
.a061	20 65 a0	jsr $a065			jsr 	_PrintNibble
.a064	68		pla				pla
.a065					_PrintNibble:
.a065	29 0f		and #$0f			and 	#15
.a067	c9 0a		cmp #$0a			cmp 	#10
.a069	90 02		bcc $a06d			bcc 	_NoShift
.a06b	69 06		adc #$06			adc 	#6
.a06d					_NoShift:
.a06d	69 30		adc #$30			adc 	#48
.a06f	4c 72 a0	jmp $a072			jmp 	EXTPrintCharacter
.a072					EXTPrintCharacter:
.a072	48		pha				pha
.a073	da		phx				phx
.a074	5a		phy				phy
.a075	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a078	7a		ply				ply
.a079	fa		plx				plx
.a07a	68		pla				pla
.a07b	60		rts				rts
.a07c					EXTInputSingleCharacter:
.a07c	da		phx				phx
.a07d	5a		phy				phy
.a07e					_EISCWait:
.a07e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a081	c9 00		cmp #$00			cmp 	#0
.a083	f0 f9		beq $a07e			beq 	_EISCWait
.a085	7a		ply				ply
.a086	fa		plx				plx
.a087	60		rts				rts
.a088					EXTInputLine:
.a088	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a08a					_ILLoop:
.a08a	da		phx				phx 								; read character in
.a08b	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a08e	fa		plx				plx
.a08f	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a091	f0 12		beq $a0a5			beq 	_ILBackspace
.a093	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a095	f0 15		beq $a0ac			beq 	_ILExit
.a097	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a099	90 ef		bcc $a08a			bcc 	_ILLoop
.a09b	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a09d	f0 eb		beq $a08a			beq 	_ILLoop
.a09f	9d 1c 08	sta $081c,x			sta 	lineBuffer,x 				; save it
.a0a2	e8		inx				inx
.a0a3	80 e5		bra $a08a			bra 	_ILLoop
.a0a5					_ILBackspace:
.a0a5	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a0a7	f0 e1		beq $a08a			beq 	_ILLoop
.a0a9	ca		dex				dex 								; back one.
.a0aa	80 de		bra $a08a			bra 	_ILLoop
.a0ac					_ILExit:
.a0ac	20 72 a0	jsr $a072			jsr 	EXTPrintCharacter
.a0af	9e 1c 08	stz $081c,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a0b2	60		rts				rts
.a0b3					EXTBreakCheck:
.a0b3	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.98ae					MemoryNew:
.98ae	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.98b0	85 30		sta $30				sta 	codePtr
.98b2	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.98b4	85 31		sta $31				sta 	codePtr+1
.98b6	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.98b8	92 30		sta ($30)			sta 	(codePtr)
.98ba	60		rts				rts
.98bb					MemoryAppend:
.98bb	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.98bd	85 30		sta $30				sta 	codePtr
.98bf	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.98c1	85 31		sta $31				sta 	codePtr+1
.98c3					_MAFindEnd:
.98c3	b2 30		lda ($30)			lda 	(codePtr)
.98c5	f0 0d		beq $98d4			beq 	_MAFoundEnd
.98c7	18		clc				clc
.98c8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98ca	65 30		adc $30				adc 	codePtr
.98cc	85 30		sta $30				sta 	codePtr
.98ce	90 02		bcc $98d2			bcc 	_CREExit
.98d0	e6 31		inc $31				inc 	codePtr+1
.98d2					_CREExit:
.98d2	80 ef		bra $98c3			bra 	_MAFindEnd
.98d4					_MAFoundEnd:
.98d4	ac 1c 07	ldy $071c			ldy 	tokenOffset 				; bytes to copy
.98d7	c0 04		cpy #$04			cpy 	#4 							; blank line
.98d9	f0 0e		beq $98e9			beq 	_MANoLine
.98db	a9 00		lda #$00			lda 	#0 							; end of program
.98dd	91 30		sta ($30),y			sta 	(codePtr),y
.98df					_MACopy:
.98df	88		dey				dey
.98e0	b9 1c 07	lda $071c,y			lda 	tokenOffset,y
.98e3	91 30		sta ($30),y			sta 	(codePtr),y
.98e5	c0 00		cpy #$00			cpy 	#0
.98e7	d0 f6		bne $98df			bne 	_MACopy
.98e9					_MANoLine:
.98e9	60		rts				rts
.98ea					MemoryInline:
.98ea	98		tya				tya 								; put address into stack,x
.98eb	18		clc				clc
.98ec	65 30		adc $30				adc 	codePtr
.98ee	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.98f1	a5 31		lda $31				lda 	codePtr+1
.98f3	69 00		adc #$00			adc 	#0
.98f5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.98f8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.98fb	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.98fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.98ff					MemoryTransferAX:
.98ff	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9901	86 37		stx $37				stx 	zTemp0+1
.9903	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9905	85 30		sta $30				sta 	codePtr
.9907	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9909	85 31		sta $31				sta 	codePtr+1
.990b					_MTAXLoop:
.990b	b2 30		lda ($30)			lda 	(codePtr)
.990d	f0 1d		beq $992c			beq 	_MTAXError 					; not found.
.990f	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9911	b1 30		lda ($30),y			lda 	(codePtr),y
.9913	c5 36		cmp $36				cmp 	zTemp0
.9915	d0 07		bne $991e			bne 	_MTAXNext
.9917	c8		iny				iny 								; check MSB
.9918	b1 30		lda ($30),y			lda 	(codePtr),y
.991a	c5 37		cmp $37				cmp 	zTemp0+1
.991c	f0 0d		beq $992b			beq 	_MTAXExit 					; success !
.991e					_MTAXNext:
.991e	18		clc				clc
.991f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9921	65 30		adc $30				adc 	codePtr
.9923	85 30		sta $30				sta 	codePtr
.9925	90 02		bcc $9929			bcc 	_CREExit
.9927	e6 31		inc $31				inc 	codePtr+1
.9929					_CREExit:
.9929	80 e0		bra $990b			bra 	_MTAXLoop
.992b					_MTAXExit:
.992b	60		rts				rts
.992c					_MTAXError:
.992c	a9 0d		lda #$0d		lda	#13
.992e	4c 46 88	jmp $8846		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
