
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sun Jan 29 15:32:19 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 e2 a3	jsr $a3e2		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 ef b7	jsr $b7ef		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 22 b8	jsr $b822		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 a0 b1	jsr $b1a0		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 34 b4	jsr $b434		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80a3		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a5		09 80		ora #$80			ora 	#$80
.80a7		85 00		sta $00				sta 	0
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80ca		20 75 82	jsr $8275			jsr 	KNLSetDrive
.80cd		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cf		aa		tax				tax
.80d0		a8		tay				tay
.80d1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d4		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d6		20 75 80	jsr $8075			jsr 	SNDCommand
.80d9		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80db		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80de		a9 09		lda #$09			lda 	#9
.80e0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		64 01		stz $01				stz 	1
.80e8		ad ad d6	lda $d6ad			lda 	$D6AD
.80eb		20 4a 84	jsr $844a			jsr 	PrintHex
.80ee		ad ac d6	lda $d6ac			lda 	$D6AC
.80f1		20 4a 84	jsr $844a			jsr 	PrintHex
.80f4		ad ab d6	lda $d6ab			lda 	$D6AB
.80f7		20 4a 84	jsr $844a			jsr 	PrintHex
.80fa		ad aa d6	lda $d6aa			lda 	$D6AA
.80fd		20 4a 84	jsr $844a			jsr 	PrintHex
.8100		a9 20		lda #$20			lda 	#32
.8102		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8105		ad a8 d6	lda $d6a8			lda 	$D6A8
.8108		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810b		ad a9 d6	lda $d6a9			lda 	$D6A9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8113		a9 21		lda #$21			lda 	#Prompt & $FF
.8115		20 12 99	jsr $9912			jsr 	PrintStringXA
.8118		20 7d 92	jsr $927d			jsr 	NewProgram 					; erase current program
.811b		4c b6 86	jmp $86b6			jmp 	WarmStart					; make same size.
.811e		4c b6 86	jmp $86b6			jmp 	WarmStart
>8121		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8123		09 09 32 39 2f 30 31 2f			.text 9,9,"29/01/23 33"
>812b		32 33 20 33 33

;******  Return to file: ./common/aa.system/00start.asm

>8130		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8134						ProcessEvents:
.8134		20 b4 82	jsr $82b4			jsr 	KNLSetEventPointer
.8137		20 a5 81	jsr $81a5			jsr     GetNextEvent 				; get next event
.813a		b0 27		bcs $8163			bcs 	_PEExitZ 					; nothing left to process.
.813c		ad 8e 07	lda $078e			lda 	KNLEvent.type 				; go back if event not key.pressed.
.813f		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8141		d0 f1		bne $8134			bne 	ProcessEvents
.8143		ad 94 07	lda $0794			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8146		d0 ec		bne $8134			bne 	ProcessEvents
.8148		ad 93 07	lda $0793			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814b		c9 03		cmp #$03			cmp 	#3
.814d		f0 11		beq $8160			beq 	_PEReturnBreak  			; no, keep going.
.814f		da		phx				phx
.8150		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8153		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8155		f0 06		beq $815d			beq 	_PENoQueue
.8157		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815a		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.815d						_PENoQueue:
.815d		fa		plx				plx
.815e		80 d4		bra $8134			bra 	ProcessEvents
.8160						_PEReturnBreak:
.8160		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8162		60		rts				rts
.8163						_PEExitZ:
.8163		a9 00		lda #$00			lda 	#0
.8165		60		rts				rts
.8166						PopKeyboardQueue:
.8166		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8169		f0 17		beq $8182			beq 	_PKQExit 					; zero, then exit.
.816b		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.816e		48		pha				pha
.816f		da		phx				phx 								; drop head of queue
.8170		a2 00		ldx #$00			ldx 	#0
.8172						_PKQLoop:
.8172		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8175		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8178		e8		inx				inx
.8179		e0 07		cpx #$07			cpx 	#7
.817b		d0 f5		bne $8172			bne 	_PKQLoop
.817d		fa		plx				plx
.817e		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8181		68		pla				pla 								; restore head of queue.
.8182						_PKQExit:
.8182		60		rts				rts
.8183						KNLGetKeyPressed:
.8183		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8186		d0 de		bne $8166			bne 	PopKeyboardQueue 			; if so, pop and return it
.8188		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process any outstanding events
.818b		a9 00		lda #$00			lda 	#0
.818d		60		rts				rts
.818e						KNLGetSingleCharacter:
.818e		20 83 81	jsr $8183			jsr 	KNLGetKeyPressed
.8191		c9 00		cmp #$00			cmp 	#0
.8193		f0 f9		beq $818e			beq 	KNLGetSingleCharacter
.8195		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8196						TickHandler:
.8196		5a		phy				phy 								; need to preserve Y
.8197		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819a		7a		ply				ply
.819b		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819c						ResetIOTracking:
.819c		a2 2d		ldx #$2d			ldx 	#GNEEnd-GNEBegin-1
.819e						_RIOLoop:
.819e		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.81a1		ca		dex				dex
.81a2		10 fa		bpl $819e			bpl 	_RIOLoop
.81a4		60		rts				rts
.81a5						GetNextEvent:
.81a5		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.81a8		08		php				php									; save yes/no flag.
.81a9		b0 29		bcs $81d4			bcs 	_GNEExit
.81ab		48		pha				pha 								; save registers
.81ac		da		phx				phx
.81ad		5a		phy				phy
.81ae		ad 8e 07	lda $078e			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.81b1		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.81b3		f0 04		beq $81b9			beq 	_GNEKeyEvent
.81b5		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.81b7		d0 08		bne $81c1			bne 	_GNECheckMouseEvent
.81b9						_GNEKeyEvent:
.81b9		20 23 82	jsr $8223			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.81bc		20 40 82	jsr $8240			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.81bf		80 10		bra $81d1			bra 	_GNEEventExit
.81c1						_GNECheckMouseEvent:
.81c1		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.81c3		d0 05		bne $81ca			bne 	_GNENotDelta
.81c5		20 d6 81	jsr $81d6			jsr 	ProcessMouseDeltaEvent 		; process them.
.81c8		80 07		bra $81d1			bra 	_GNEEventExit
.81ca						_GNENotDelta:
.81ca		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.81cc		d0 03		bne $81d1			bne 	_GNEEventExit
.81ce		20 eb 81	jsr $81eb			jsr 	ProcessMouseClickEvent 		; process them.
.81d1						_GNEEventExit:
.81d1		7a		ply				ply 								; restore registers
.81d2		fa		plx				plx
.81d3		68		pla				pla
.81d4						_GNEExit:
.81d4		28		plp				plp
.81d5		60		rts				rts
.81d6						ProcessMouseDeltaEvent:
.81d6		a2 22		ldx #$22			ldx 	#MouseDeltaX-GNEBegin
.81d8		ad 91 07	lda $0791			lda 	KNLEvent.mouse.delta.x
.81db		20 00 82	jsr $8200			jsr 	PMKAddSubtract
.81de		ad 92 07	lda $0792			lda 	KNLEvent.mouse.delta.y
.81e1		20 00 82	jsr $8200			jsr 	PMKAddSubtract
.81e4		ad 93 07	lda $0793			lda 	KNLEvent.mouse.delta.z
.81e7		20 00 82	jsr $8200			jsr 	PMKAddSubtract
.81ea		60		rts				rts
.81eb						ProcessMouseClickEvent:
.81eb		a2 28		ldx #$28			ldx 	#MouseCountInner-GNEBegin
.81ed		ad 91 07	lda $0791			lda 	KNLEvent.mouse.clicks.inner
.81f0		20 04 82	jsr $8204			jsr 	PMKAdd
.81f3		ad 92 07	lda $0792			lda 	KNLEvent.mouse.clicks.middle
.81f6		20 04 82	jsr $8204			jsr 	PMKAdd
.81f9		ad 93 07	lda $0793			lda 	KNLEvent.mouse.clicks.outer
.81fc		20 04 82	jsr $8204			jsr 	PMKAdd
.81ff		60		rts				rts
.8200						PMKAddSubtract:
.8200		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.8202		30 0e		bmi $8212			bmi 	PMKSubtract
.8204						PMKAdd:
.8204		18		clc				clc
.8205		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8208		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.820b		90 13		bcc $8220			bcc 	PMKExit
.820d		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.8210		80 0e		bra $8220			bra 	PMKExit
.8212						PMKSubtract:
.8212		38		sec				sec
.8213		49 ff		eor #$ff			eor 	#$FF
.8215		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8218		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.821b		b0 03		bcs $8220			bcs 	PMKExit
.821d		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.8220						PMKExit:
.8220		e8		inx				inx 								; next slot ?
.8221		e8		inx				inx
.8222		60		rts				rts
.8223						ProcessKeyboardEvent:
.8223		ad 92 07	lda $0792			lda 	KNLEvent.key.raw 			; raw key code.
.8226		20 61 82	jsr $8261			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8229		ac 8e 07	ldy $078e			ldy 	KNLEvent.type
.822c		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.822e		f0 07		beq $8237			beq 	_PKERelease
.8230		1d 5f 06	ora $065f,x			ora 	KeyStatus,x 				; set bit
.8233		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.8236		60		rts				rts
.8237						_PKERelease:
.8237		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8239		3d 5f 06	and $065f,x			and 	KeyStatus,x
.823c		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.823f		60		rts				rts
.8240						UpdateKeyboardJoystick:
.8240		9c 80 06	stz $0680			stz 	KeyJoystick
.8243		a2 00		ldx #$00			ldx 	#0
.8245						_UKJLoop:
.8245		bd 5c 82	lda $825c,x			lda 	_UKJKeys,x 					; which key
.8248		29 1f		and #$1f			and 	#$1F
.824a		a8		tay				tay
.824b		b9 5f 06	lda $065f,y			lda 	KeyStatus,y 				; get status
.824e		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8250		18		clc				clc  								; set C if bit set
.8251		69 ff		adc #$ff			adc 	#$FF
.8253		2e 80 06	rol $0680			rol 	KeyJoystick 				; shift into place
.8256		e8		inx				inx
.8257		e0 05		cpx #$05			cpx 	#5 							; do all 5
.8259		d0 ea		bne $8245			bne 	_UKJLoop
.825b		60		rts				rts
.825c						_UKJKeys:
>825c		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.8261						KeyboardConvertXA:
.8261		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.8263		8e 7f 06	stx $067f			stx 	KeyMaskTemp
.8266						_KCCALoop:
.8266		18		clc				clc
.8267		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.8269		b0 05		bcs $8270			bcs 	_KCCADone
.826b		0e 7f 06	asl $067f			asl 	KeyMaskTemp 				; shift the mask temp
.826e		80 f6		bra $8266			bra 	_KCCALoop
.8270						_KCCADone:
.8270		aa		tax				tax 								; table entry in X
.8271		ad 7f 06	lda $067f			lda 	KeyMaskTemp 				; mask temp in A.
.8274		60		rts				rts
.065f						GNEBegin:
.065f						KeyStatus:
>065f								.fill 	32
.067f						KeyMaskTemp:
>067f								.fill 	1
.0680						KeyJoystick:
>0680								.fill 	1
.0681						MouseDeltaX:
>0681								.fill 	2
.0683						MouseDeltaY:
>0683								.fill 	2
.0685						MouseDeltaZ:
>0685								.fill 	2
.0687						MouseCountInner:
>0687								.fill 	2
.0689						MouseCountMiddle:
>0689								.fill 	2
.068b						MouseCountOuter:
>068b								.fill 	2
.068d						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8275						KNLSetDrive:
.8275		8d 8d 07	sta $078d			sta 	KNLDefaultDrive
.8278		60		rts				rts
.8279						KNLOpenFileWrite:
.8279		48		pha				pha
.827a		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.827c		80 03		bra $8281			bra 	KNLOpenStart
.827e						KNLOpenFileRead:
.827e		48		pha				pha
.827f		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8281						KNLOpenStart:
.8281		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8283		68		pla				pla
.8284		20 bf 82	jsr $82bf			jsr 	KNLSetupFileName
.8287		20 b4 82	jsr $82b4			jsr 	KNLSetEventPointer
.828a		ad 8d 07	lda $078d			lda 	KNLDefaultDrive 			; currently drive zero only.
.828d		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.828f		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8292		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8294		b0 1d		bcs $82b3			bcs     _out
.8296						_loop
.8296		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8299		20 a5 81	jsr $81a5			jsr     GetNextEvent
.829c		b0 f8		bcs $8296			bcs     _loop
.829e		ad 8e 07	lda $078e			lda 	KNLEvent.type
.82a1		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.82a3		f0 0a		beq $82af			beq 	_success
.82a5		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.82a7		f0 0a		beq $82b3			beq 	_out
.82a9		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.82ab		f0 06		beq $82b3			beq 	_out
.82ad		80 e7		bra $8296			bra     _loop
.82af						_success
.82af		ad 91 07	lda $0791			lda     KNLEvent.file.stream
.82b2		18		clc				clc
.82b3						_out
.82b3		60		rts				rts
.82b4						KNLSetEventPointer:
.82b4		48		pha				pha
.82b5		a9 8e		lda #$8e			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.82b7		85 f0		sta $f0				sta     kernel.args.events+0
.82b9		a9 07		lda #$07			lda     #KNLEvent >> 8
.82bb		85 f1		sta $f1				sta     kernel.args.events+1
.82bd		68		pla				pla
.82be		60		rts				rts
.82bf						KNLSetupFileName:
.82bf		5a		phy				phy 								; save Y on stack
.82c0		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.82c2		86 37		stx $37				stx 	zTemp0+1
.82c4		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.82c6		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.82c8		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.82ca						_KNLGetLength:
.82ca		c8		iny				iny
.82cb		b1 36		lda ($36),y			lda 	(zTemp0),y
.82cd		d0 fb		bne $82ca			bne 	_KNLGetLength
.82cf		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.82d1		7a		ply				ply
.82d2		60		rts				rts
.82d3						KNLReadBlock:
.82d3		85 f3		sta $f3				sta     kernel.args.file.read.stream
.82d5		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.82d7		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.82da		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.82dc		b0 2e		bcs $830c			bcs     _KGNBExitFail               ; report as general error
.82de						_KGRBEventLoop:
.82de		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.82e1		20 a5 81	jsr $81a5			jsr     GetNextEvent
.82e4		b0 f8		bcs $82de			bcs     _KGRBEventLoop
.82e6		ad 8e 07	lda $078e			lda 	KNLEvent.type 				; get event
.82e9		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.82eb		f0 0a		beq $82f7			beq     _KNLRBGetNextByte
.82ed		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.82ef		f0 1b		beq $830c			beq 	_KGNBExitFail
.82f1		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82f3		f0 17		beq $830c			beq 	_KGNBExitFail
.82f5		80 e7		bra $82de			bra 	_KGRBEventLoop
.82f7						_KNLRBGetNextByte:
.82f7		a9 8d		lda #$8d			lda     #<KNLReadBuffer 			; Set the target buffer
.82f9		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.82fb		a9 06		lda #$06			lda     #>KNLReadBuffer
.82fd		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.82ff		ad 94 07	lda $0794			lda     KNLEvent.file.data.read 	; Set the target length
.8302		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8304		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8307		ad 94 07	lda $0794			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.830a		18		clc				clc
.830b		60		rts				rts
.830c						_KGNBExitFail:
.830c		38		sec				sec
.830d		60		rts				rts
.830e						KNLWriteBlock:
.830e		da		phx				phx
.830f		5a		phy				phy
.8310		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.8312		a5 36		lda $36				lda     zTemp0 						; save the data location.
.8314		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8316		a5 37		lda $37				lda     zTemp0+1
.8318		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.831a		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.831c		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.831f		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.8321		b0 21		bcs $8344			bcs 	_KWBFailed
.8323						_KNLWLoop:
.8323		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8326		20 a5 81	jsr $81a5			jsr     GetNextEvent
.8329		b0 f8		bcs $8323			bcs     _KNLWLoop
.832b		ad 8e 07	lda $078e			lda     KNLEvent.type 				; various errors.
.832e		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8330		f0 12		beq $8344			beq 	_KWBFailed
.8332		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8334		f0 0e		beq $8344			beq 	_KWBFailed
.8336		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8338		f0 0a		beq $8344			beq 	_KWBFailed
.833a		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.833c		d0 e5		bne $8323			bne 	_KNLWLoop
.833e		18		clc				clc
.833f		ad 94 07	lda $0794			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.8342		80 01		bra $8345			bra 	_KWBExit
.8344						_KWBFailed:
.8344		38		sec				sec
.8345						_KWBExit:
.8345		7a		ply				ply
.8346		fa		plx				plx
.8347		60		rts				rts
.8348						KNLCloseFile:
.8348		85 f3		sta $f3				sta     kernel.args.file.close.stream
.834a		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.834d		60		rts				rts
.834e						KNLReadController:
.834e		da		phx				phx
.834f		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8351		64 01		stz $01				stz 	1 							; switch to I/O 0
.8353		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8356		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8358		0d 80 06	ora $0680			ora 	KeyJoystick 				; use key joystick.
.835b		86 01		stx $01				stx 	1 							; repair old I/O and exit
.835d		fa		plx				plx
.835e		60		rts				rts
.068d						KNLReadBuffer:
>068d								.fill   256
.078d						KNLDefaultDrive:
>078d								.byte 	?
.078e						KNLEvent
>078e						type        .byte   ?   ; Enum above
>078f						buf         .byte   ?   ; page id or zero
>0790						ext         .byte   ?   ; page id or zero
.0791						key
>0791						keyboard    .byte   ?   ; Keyboard ID
>0792						raw         .byte   ?   ; Raw key ID
>0793						ascii       .byte   ?   ; ASCII value
>0794						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0791						mouse
.0791						delta
>0791						x           .byte   ?
>0792						y           .byte   ?
>0793						z           .byte   ?
>0794						buttons     .byte   ?
.0791						clicks
>0791						inner       .byte   ?
>0792						middle      .byte   ?
>0793						outer       .byte   ?
.0791						joystick
>0791						joy0        .byte   ?
>0792						joy1        .byte   ?
.0791						udp
>0791						token       .byte   ?   ; TODO: break out into fields
.0791						file
>0791						stream      .byte   ?
>0792						cookie      .byte   ?
.0793						data
>0793						requested   .byte   ?   ; Requested number of bytes to read
>0794						read        .byte   ?   ; Number of bytes actually read
.0793						wrote
>0793						requested   .byte   ?   ; Requested number of bytes to read
>0794						wrote       .byte   ?   ; Number of bytes actually read
.0791						directory
>0791						stream      .byte   ?
>0792						cookie      .byte   ?
.0793						volume
>0793						len         .byte   ?   ; Length of volname (in buf)
>0794						flags       .byte   ?   ; block size, text encoding
.0793						file
>0793						len         .byte   ?
>0794						flags       .byte   ?   ; block scale, text encoding, approx size
.0793						free
>0793						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.835f						AssembleGroup1:
.835f		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8361		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8364		80 02		bra $8368			bra 	AsmGroup12
.8366						AssembleGroup2:
.8366		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8368						AsmGroup12:
.8368		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.836b		68		pla				pla 								; pop the return address to access the information following.
.836c		fa		plx				plx
.836d		20 f4 83	jsr $83f4			jsr 	AccessParameters 			; get opcode and save as base
.8370		8d 20 04	sta $0420			sta 	BaseOpcode
.8373		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8376		d0 08		bne $8380			bne 	_AG12HaveMask
.8378		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.837a		20 fc 83	jsr $83fc			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.837d		8d 21 04	sta $0421			sta 	ModeMask
.8380						_AG12HaveMask:
.8380		20 30 85	jsr $8530			jsr 	TypeAndCalculateOperand 	; get zero page type
.8383		da		phx				phx 								; save found address mode
.8384		20 60 84	jsr $8460			jsr 	AssembleModeX
.8387		fa		plx				plx  								; restore address mode
.8388		b0 0b		bcs $8395			bcs 	_AG12Exit
.838a		20 96 83	jsr $8396			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.838d		20 60 84	jsr $8460			jsr 	AssembleModeX
.8390		b0 03		bcs $8395			bcs 	_AG12Exit
.8392		4c b8 aa	jmp $aab8			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8395						_AG12Exit:
.8395		60		rts				rts
.8396						PromoteToAbsolute:
.8396		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8398		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.839a		f0 19		beq $83b5			beq 	_PTADo
.839c		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.839e		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.83a0		f0 13		beq $83b5			beq 	_PTADo
.83a2		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.83a4		e0 80		cpx #$80			cpx 	#AM_ZEROY
.83a6		f0 0d		beq $83b5			beq 	_PTADo
.83a8		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.83aa		e0 d1		cpx #$d1			cpx 	#AM_IND
.83ac		f0 07		beq $83b5			beq 	_PTADo
.83ae		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.83b0		e0 c0		cpx #$c0			cpx 	#AM_INDX
.83b2		f0 01		beq $83b5			beq 	_PTADo
.83b4		60		rts				rts
.83b5						_PTADo:
.83b5		aa		tax				tax
.83b6		60		rts				rts
.83b7						AssembleGroup3:
.83b7		68		pla				pla 								; get parameters, which is just the opcode.
.83b8		fa		plx				plx
.83b9		20 f4 83	jsr $83f4			jsr 	AccessParameters 			; get and output opcode
.83bc		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.83bf		20 94 85	jsr $8594			jsr 	CalculateOperand 			; get a 16 bit operand
.83c2		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.83c4		38		sec				sec
.83c5		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.83c8		48		pha				pha 								; LSB in A
.83c9		a5 60		lda $60				lda 	NSMantissa1
.83cb		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.83ce		aa		tax				tax 								; MSB in X
.83cf		68		pla				pla
.83d0		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.83d1		69 7f		adc #$7f			adc 	#$7F
.83d3		90 01		bcc $83d6			bcc 	_AG3NoCarry
.83d5		e8		inx				inx
.83d6						_AG3NoCarry:
.83d6		38		sec				sec 								; fix back and write out anyways.
.83d7		e9 80		sbc #$80			sbc 	#$80
.83d9		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.83dc		e0 00		cpx #$00			cpx 	#0 							; was it in range
.83de		f0 0a		beq $83ea			beq 	_AG3Exit
.83e0		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.83e3		29 01		and #$01			and 	#1
.83e5		f0 03		beq $83ea			beq 	_AG3Exit
.83e7		4c bd aa	jmp $aabd			jmp 	RangeError 					; no, branch is out of range
.83ea						_AG3Exit:
.83ea		60		rts				rts
.83eb						AssembleGroup4:
.83eb		68		pla				pla 								; pop address
.83ec		fa		plx				plx
.83ed		20 f4 83	jsr $83f4			jsr 	AccessParameters 			; access and get first
.83f0		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte 			; output it.
.83f3		60		rts				rts
.83f4						AccessParameters:
.83f4		8d 1d 04	sta $041d			sta 	ParamStart
.83f7		8e 1e 04	stx $041e			stx 	ParamStart+1
.83fa		a9 01		lda #$01			lda 	#1
.83fc						GetParameter:
.83fc		5a		phy				phy
.83fd		a8		tay				tay
.83fe		ad 1d 04	lda $041d			lda 	ParamStart
.8401		85 36		sta $36				sta 	zTemp0
.8403		ad 1e 04	lda $041e			lda 	ParamStart+1
.8406		85 37		sta $37				sta 	zTemp0+1
.8408		b1 36		lda ($36),y			lda 	(zTemp0),y
.840a		7a		ply				ply
.840b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.840c						AssemblerWriteByte:
.840c		48		pha			pha
.840d		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8410		29 02		and #$02		and 	#2
.8412		f0 1b		beq $842f		beq 	_AWBNoPrint
.8414		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8417		20 4a 84	jsr $844a		jsr 	PrintHex
.841a		ad 1a 04	lda $041a		lda		AssemblerAddress
.841d		20 4a 84	jsr $844a		jsr 	PrintHex
.8420		a9 20		lda #$20		lda 	#' '
.8422		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8425		68		pla			pla 									; print byte
.8426		48		pha			pha
.8427		20 4a 84	jsr $844a		jsr 	PrintHex
.842a		a9 0d		lda #$0d		lda 	#13
.842c		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.842f						_AWBNoPrint:
.842f		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.8432		85 36		sta $36			sta 	zTemp0
.8434		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8437		f0 0e		beq $8447		beq 	_AWBRange
.8439		85 37		sta $37			sta 	zTemp0+1
.843b		68		pla			pla 									; write byte out
.843c		92 36		sta ($36)		sta 	(zTemp0)
.843e		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.8441		d0 03		bne $8446		bne 	_AWBNoCarry
.8443		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8446						_AWBNoCarry:
.8446		60		rts			rts
.8447						_AWBRange:
.8447		4c bd aa	jmp $aabd		jmp 	RangeError
.844a						PrintHex:
.844a		48		pha				pha
.844b		4a		lsr a				lsr 	a
.844c		4a		lsr a				lsr 	a
.844d		4a		lsr a				lsr 	a
.844e		4a		lsr a				lsr 	a
.844f		20 53 84	jsr $8453			jsr 	_PrintNibble
.8452		68		pla				pla
.8453						_PrintNibble:
.8453		29 0f		and #$0f			and 	#15
.8455		c9 0a		cmp #$0a			cmp 	#10
.8457		90 02		bcc $845b			bcc 	_NoShift
.8459		69 06		adc #$06			adc 	#6
.845b						_NoShift:
.845b		69 30		adc #$30			adc 	#48
.845d		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8460						AssembleModeX:
.8460		5a		phy				phy
.8461		ad 1f 04	lda $041f			lda 	IsGroup1
.8464		f0 17		beq $847d			beq 	_AMXGroup2
.8466		8a		txa				txa 							; is it in group # 1
.8467		29 40		and #$40			and 	#AM_ISG1
.8469		f0 4d		beq $84b8			beq 	_AMXFail 				; no, give up.
.846b		8a		txa				txa 							; get back.
.846c		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.846e		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8470		d0 22		bne $8494			bne 	_AMXHaveInfo
.8472		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8475		c9 81		cmp #$81			cmp 	#$81
.8477		f0 3f		beq $84b8			beq 	_AMXFail
.8479		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.847b		80 17		bra $8494			bra 	_AMXHaveInfo 			; odd design decision there.
.847d						_AMXGroup2:
.847d		8a		txa				txa 							; is it in group 2 ?
.847e		29 20		and #$20			and 	#AM_ISG2
.8480		f0 36		beq $84b8			beq 	_AMXFail 				; no, give up.
.8482		8a		txa				txa 							; get the offset into Y
.8483		29 1f		and #$1f			and 	#$1F
.8485		4a		lsr a				lsr 	a 						; make it 0-7.
.8486		4a		lsr a				lsr  	a
.8487		a8		tay				tay
.8488		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.848b						_AMXCheckOkay:
.848b		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.848c		88		dey				dey
.848d		10 fc		bpl $848b			bpl 	_AMXCheckOkay
.848f		90 27		bcc $84b8			bcc 	_AMXFail 				; not allowed.
.8491		8a		txa				txa  							; get mask back
.8492		29 1f		and #$1f			and 	#$1F
.8494						_AMXHaveInfo:
.8494		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8496		10 04		bpl $849c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8498		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.849a		d0 1c		bne $84b8			bne 	_AMXFail
.849c						_AMXAnySize:
.849c		18		clc				clc 							; add offset to the base opcode
.849d		6d 20 04	adc $0420			adc 	BaseOpcode
.84a0						_AMXOutputCode:
.84a0		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte 		; write the opcode out.
.84a3		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.84a5		f0 0e		beq $84b5			beq 	_AMXExit
.84a7		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.84a9		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.84ac		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.84ae		30 05		bmi $84b5			bmi 	_AMXExit
.84b0		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.84b2		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.84b5						_AMXExit:
.84b5		7a		ply				ply
.84b6		38		sec				sec
.84b7		60		rts				rts
.84b8						_AMXFail:
.84b8		a0 00		ldy #$00			ldy 	#0
.84ba						_AMXCheckOddities:
.84ba		8a		txa				txa
.84bb		d9 e2 84	cmp $84e2,y			cmp 	ExtraOpcode+2,y 		; match address mode
.84be		d0 15		bne $84d5			bne 	_AMXCONext
.84c0		b9 e0 84	lda $84e0,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.84c3		cd 20 04	cmp $0420			cmp 	BaseOpcode
.84c6		d0 0d		bne $84d5			bne 	_AMXCONext
.84c8		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.84ca		10 04		bpl $84d0			bpl 	_AMXCONotZero
.84cc		a5 60		lda $60				lda 	NSMantissa1
.84ce		d0 05		bne $84d5			bne 	_AMXCONext
.84d0						_AMXCONotZero:
.84d0		b9 e1 84	lda $84e1,y			lda 	ExtraOpcode+1,y 		; get new opcode
.84d3		80 cb		bra $84a0			bra 	_AMXOutputCode 			; and assemble it
.84d5						_AMXCONext:
.84d5		c8		iny				iny
.84d6		c8		iny				iny
.84d7		c8		iny				iny
.84d8		b9 e0 84	lda $84e0,y			lda 	ExtraOpcode+0,y 		; end of table
.84db		d0 dd		bne $84ba			bne 	_AMXCheckOddities
.84dd						_AMXCOFail:
.84dd		7a		ply				ply
.84de		18		clc				clc
.84df		60		rts				rts
.84e0						ExtraOpcode:
>84e0		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>84e3		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>84e6		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>84e9		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>84ec		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>84ef		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>84f2		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>84f5		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>84f8		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>84fb		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>84fe		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.84ff						LabelHere:
.84ff		c8		iny				iny 								; skip .
.8500		a2 00		ldx #$00			ldx 	#0 							; get a term
.8502		20 07 a2	jsr $a207			jsr 	EvaluateTerm
.8505		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8507		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8509		d0 22		bne $852d			bne 	_ALType 					; otherwise typing error
.850b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.850d		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.850f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8511		85 37		sta $37				sta 	zTemp0+1
.8513		5a		phy				phy 								; copy address in (64k)
.8514		a0 01		ldy #$01			ldy 	#1
.8516		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8519		92 36		sta ($36)			sta 	(zTemp0)
.851b		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.851e		91 36		sta ($36),y			sta 	(zTemp0),y
.8520		c8		iny				iny
.8521		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8523		91 36		sta ($36),y			sta 	(zTemp0),y
.8525		c8		iny				iny
.8526		91 36		sta ($36),y			sta 	(zTemp0),y
.8528		c8		iny				iny
.8529		91 36		sta ($36),y			sta 	(zTemp0),y
.852b		7a		ply				ply
.852c		60		rts				rts
.852d						_ALType:
.852d		4c c2 aa	jmp $aac2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8530						TypeAndCalculateOperand:
.8530		b1 30		lda ($30),y			lda 	(codePtr),y
.8532		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8534		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8536		f0 5b		beq $8593			beq 	_TACOExit
.8538		c9 80		cmp #$80			cmp 	#KWC_EOL
.853a		f0 57		beq $8593			beq 	_TACOExit
.853c		c8		iny				iny
.853d		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.853f		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8541		f0 51		beq $8594			beq 	CalculateOperand
.8543		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8545		f0 1f		beq $8566			beq 	_TACOIndirect
.8547		88		dey				dey 								; undo get of first character
.8548		20 94 85	jsr $8594			jsr 	CalculateOperand 			; get operand
.854b		b1 30		lda ($30),y			lda 	(codePtr),y
.854d		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.854f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8551		d0 40		bne $8593			bne 	_TACOExit
.8553		c8		iny				iny
.8554		20 9e 85	jsr $859e			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8557		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8559		c9 58		cmp #$58			cmp 	#'X'
.855b		f0 36		beq $8593			beq 	_TACOExit
.855d		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.855f		c9 59		cmp #$59			cmp 	#'Y'
.8561		f0 30		beq $8593			beq 	_TACOExit
.8563						_TACOSyntax:
.8563		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.8566						_TACOIndirect:
.8566		20 94 85	jsr $8594			jsr 	CalculateOperand 			; get the operand
.8569		b1 30		lda ($30),y			lda 	(codePtr),y
.856b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.856d		f0 17		beq $8586			beq 	_TACOIndX
.856f		20 9a 98	jsr $989a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8572		b1 30		lda ($30),y			lda 	(codePtr),y
.8574		a2 d1		ldx #$d1			ldx 	#AM_IND
.8576		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8578		d0 19		bne $8593			bne 	_TACOExit
.857a		c8		iny				iny
.857b		20 9e 85	jsr $859e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.857e		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8580		d0 e1		bne $8563			bne 	_TACOSyntax
.8582		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8584		80 0d		bra $8593			bra 	_TACOExit
.8586						_TACOIndX:
.8586		c8		iny				iny
.8587		20 9e 85	jsr $859e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.858a		c9 58		cmp #$58			cmp 	#'X' 						; check X
.858c		d0 d5		bne $8563			bne 	_TACOSyntax
.858e		20 9a 98	jsr $989a			jsr 	CheckRightBracket			; check )
.8591		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8593						_TACOExit:
.8593		60		rts				rts
.8594						CalculateOperand:
.8594		48		pha				pha
.8595		da		phx				phx
.8596		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8598		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.859b		fa		plx				plx
.859c		68		pla				pla
.859d		60		rts				rts
.859e						TACOCheckXY:
.859e		b1 30		lda ($30),y			lda 	(codePtr),y
.85a0		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.85a2		c9 40		cmp #$40			cmp 	#$40
.85a4		d0 21		bne $85c7			bne 	_TCXYFail
.85a6		b1 30		lda ($30),y			lda 	(codePtr),y
.85a8		18		clc				clc
.85a9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.85ab		85 37		sta $37				sta 	zTemp0+1
.85ad		c8		iny				iny
.85ae		b1 30		lda ($30),y			lda 	(codePtr),y
.85b0		c8		iny				iny
.85b1		85 36		sta $36				sta 	zTemp0
.85b3		5a		phy				phy 								; save position
.85b4		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.85b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.85b8		d0 0c		bne $85c6			bne 	_TCXYPopFail
.85ba		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.85bc		b1 36		lda ($36),y			lda 	(zTemp0),y
.85be		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.85c0		f0 08		beq $85ca			beq 	_TCXYFound
.85c2		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.85c4		f0 04		beq $85ca			beq 	_TCXYFound
.85c6						_TCXYPopFail:
.85c6		7a		ply				ply
.85c7						_TCXYFail:
.85c7		a9 00		lda #$00			lda 	#0
.85c9		60		rts				rts
.85ca						_TCXYFound:
.85ca		7a		ply				ply 								; restore position
.85cb		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.85cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.85ce						BackloadProgram:
.85ce		20 7d 92	jsr $927d			jsr 	NewProgram 					; does the actual NEW.
.85d1		a2 86		ldx #$86			ldx 	#_BLLoad >> 8
.85d3		a9 2e		lda #$2e			lda 	#_BLLoad & $FF
.85d5		20 12 99	jsr $9912			jsr 	PrintStringXA
.85d8		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.85da		8d 95 07	sta $0795			sta 	BackLoadPage
.85dd		a9 00		lda #$00			lda 	#(($6000) & $FF)
.85df		8d 96 07	sta $0796			sta 	0+BackLoadPointer
.85e2		a9 60		lda #$60			lda 	#(($6000) >> 8)
.85e4		8d 97 07	sta $0797			sta 	1+BackLoadPointer
.85e7		9c 98 07	stz $0798			stz 	BackLoadLast 				; reset backload last.
.85ea		9c 99 07	stz $0799			stz 	BackLoadLast+1
.85ed		a9 ff		lda #$ff			lda 	#$FF
.85ef		8d fa ff	sta $fffa			sta 	$FFFA
.85f2						_BPLoop:
.85f2		a2 ff		ldx #$ff			ldx 	#$FF
.85f4		20 63 86	jsr $8663			jsr 	BLReadByte 					; read a byte
.85f7		c9 00		cmp #$00			cmp 	#0
.85f9		f0 2c		beq $8627			beq 	_BPExit 					; if 0 exit
.85fb		30 2a		bmi $8627			bmi 	_BPExit 					; if -ve exit
.85fd						_BPCopy:
.85fd		e8		inx				inx  								; copy byte into the lineBuffer
.85fe		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8601		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.8604		20 63 86	jsr $8663			jsr 	BLReadByte 					; read next byte
.8607		30 0a		bmi $8613			bmi 	_BPEndLine 					; -ve = EOL
.8609		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.860b		d0 02		bne $860f			bne 	_BPNotTab
.860d		a9 20		lda #$20			lda 	#' '
.860f						_BPNotTab:
.860f		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8611		b0 ea		bcs $85fd			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8613						_BPEndLine:
.8613		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8616		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8619		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.861c		f0 d4		beq $85f2			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.861e		20 43 86	jsr $8643			jsr 	BLCheckLast 				; check last backload okay.
.8621		38		sec				sec 								; append not insert
.8622		20 ac ac	jsr $acac			jsr 	MemoryInsertLine 			; append to current program
.8625		80 cb		bra $85f2			bra 	_BPLoop
.8627						_BPExit:
.8627		9c fa ff	stz $fffa			stz 	$FFFA
.862a		20 42 97	jsr $9742			jsr 	ClearSystem 				; clear variables etc.
.862d		60		rts				rts
.862e						_BLLoad:
>862e		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8636		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8643						BLCheckLast:
.8643		ad 98 07	lda $0798			lda 	BackLoadLast 				; check last < current
.8646		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8649		ad 99 07	lda $0799			lda 	BackLoadLast+1
.864c		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.864f		b0 0d		bcs $865e			bcs 	_BLCheckFail
.8651		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.8654		8d 98 07	sta $0798			sta 	BackLoadLast
.8657		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.865a		8d 99 07	sta $0799			sta 	BackLoadLast+1
.865d		60		rts				rts
.865e						_BLCheckFail:
.865e		a9 02		lda #$02		lda	#2
.8660		4c b3 98	jmp $98b3		jmp	ErrorHandler
.8663						BLReadByte:
.8663		da		phx				phx
.8664		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8666		ad 95 07	lda $0795			lda 	BackLoadPage	 			; set current page
.8669		85 0b		sta $0b				sta 	8+3
.866b		ad 96 07	lda $0796			lda 	BackLoadPointer 			; copy pointer to zTemp0
.866e		85 36		sta $36				sta 	zTemp0
.8670		ad 97 07	lda $0797			lda 	BackLoadPointer+1
.8673		85 37		sta $37				sta 	zTemp0+1
.8675		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8677		ee 96 07	inc $0796			inc 	BackLoadPointer 			; bump pointer
.867a		d0 0f		bne $868b			bne 	_BLNoCarry
.867c		ee 97 07	inc $0797			inc 	BackLoadPointer+1
.867f		10 0a		bpl $868b			bpl 	_BLNoCarry 					; need a new page
.8681		48		pha				pha
.8682		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8684		8d 97 07	sta $0797			sta 	BackLoadPointer+1
.8687		ee 95 07	inc $0795			inc 	BackLoadPage 				; next page from source.
.868a		68		pla				pla
.868b						_BLNoCarry:
.868b		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.868d		fa		plx				plx
.868e		c9 00		cmp #$00			cmp 	#0
.8690		60		rts				rts
.0795						BackLoadPage:
>0795								.fill  	1
.0796						BackLoadPointer:
>0796								.fill 	2
.0798						BackLoadLast:
>0798								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8691						EditProgramCode:
.8691		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.8694		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.8697		20 50 ad	jsr $ad50			jsr 	MemorySearch
.869a		90 05		bcc $86a1			bcc 	_EPCNoDelete 				; reached the end : don't delete
.869c		d0 03		bne $86a1			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.869e		20 75 ac	jsr $ac75			jsr 	MemoryDeleteLine 			; delete the line
.86a1						_EPCNoDelete:
.86a1		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.86a4		c9 80		cmp #$80			cmp 	#KWC_EOL
.86a6		f0 0d		beq $86b5			beq 	_EPCNoInsert
.86a8		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.86ab		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.86ae		20 50 ad	jsr $ad50			jsr 	MemorySearch
.86b1		18		clc				clc 								; insert at this point.
.86b2		20 ac ac	jsr $acac			jsr 	MemoryInsertLine 			; insert the line
.86b5						_EPCNoInsert:
.86b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.86b6						WarmStart:
.86b6		a2 ff		ldx #$ff			ldx 	#$FF
.86b8		9a		txs				txs
.86b9		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.86bb		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.86be		20 9c 81	jsr $819c			jsr 	ResetIOTracking 			; reset the I/O tracking.
.86c1		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.86c4		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.86c7		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.86ca		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.86cd		d0 17		bne $86e6			bne 	_WSEditCode 				; if so,edit code.
.86cf		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.86d2		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.86d4		85 30		sta $30				sta 	codePtr
.86d6		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.86d8		85 31		sta $31				sta 	codePtr+1
.86da		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.86dd		c9 80		cmp #$80			cmp 	#KWC_EOL
.86df		f0 d5		beq $86b6			beq 	WarmStart
.86e1		20 1a 94	jsr $941a			jsr 	RUNCodePointerLine 			; execute that line.
.86e4		80 d0		bra $86b6			bra 	WarmStart
.86e6						_WSEditCode:
.86e6		20 91 86	jsr $8691			jsr 	EditProgramCode 			; edit the program code
.86e9		20 42 97	jsr $9742			jsr 	ClearSystem 				; clear all variables etc.
.86ec		80 c8		bra $86b6			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.86ee						AssembleCommand:
.86ee		a2 00		ldx #$00			ldx 	#0
.86f0		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger 		; start address
.86f3		a5 58		lda $58				lda 	NSMantissa0
.86f5		8d 1a 04	sta $041a			sta 	AssemblerAddress
.86f8		a5 60		lda $60				lda 	NSMantissa1
.86fa		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.86fd		20 a2 98	jsr $98a2			jsr 	CheckComma
.8700		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; options 0-3
.8703		a5 58		lda $58				lda 	NSMantissa0
.8705		8d 1c 04	sta $041c			sta 	AssemblerControl
.8708		60		rts				rts
.8709		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.870a						AssertCommand:
.870a		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.870c		20 80 a7	jsr $a780			jsr 	EvaluateInteger 			; the assert test
.870f		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; exit if result is non zero.
.8712		d0 05		bne $8719			bne 	_ACExit
.8714		a9 0a		lda #$0a		lda	#10
.8716		4c b3 98	jmp $98b3		jmp	ErrorHandler
.8719						_ACExit:
.8719		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.871a						CallCommand:
.871a		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.871c		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.871f						_CCClear
.871f		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8720		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; these are optional sequentially.
.8723		e0 04		cpx #$04			cpx 	#4
.8725		d0 f8		bne $871f			bne 	_CCClear
.8727		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8729						_CCCParam:
.8729		b1 30		lda ($30),y			lda 	(codePtr),y
.872b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.872d		d0 09		bne $8738			bne 	_CCCRun6502
.872f		c8		iny				iny 								; skip comma
.8730		e8		inx				inx	 								; next level
.8731		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8734		e0 03		cpx #$03			cpx 	#3
.8736		90 f1		bcc $8729			bcc 	_CCCParam 					; done all 3 ?
.8738						_CCCRun6502:
.8738		5a		phy				phy 								; save position
.8739		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.873b		85 37		sta $37				sta 	zTemp0+1
.873d		a5 58		lda $58				lda 	NSMantissa0
.873f		85 36		sta $36				sta 	zTemp0
.8741		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8743		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8745		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8747		20 4c 87	jsr $874c			jsr 	_CCCZTemp0 					; call zTemp0
.874a		7a		ply				ply 								; restore position and exit
.874b		60		rts				rts
.874c						_CCCZTemp0:
.874c		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.874f						XLoadCommand:
.874f		20 7d 92	jsr $927d			jsr 	NewProgram
.8752		20 ce 85	jsr $85ce			jsr 	BackloadProgram
.8755		4c b6 86	jmp $86b6			jmp 	WarmStart
.8758						XGoCommand:
.8758		20 7d 92	jsr $927d			jsr 	NewProgram
.875b		20 ce 85	jsr $85ce			jsr 	BackloadProgram
.875e		4c 08 94	jmp $9408			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8761						Command_Data:
.8761		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8763		a2 80		ldx #$80			ldx 	#KWC_EOL
.8765		20 f5 97	jsr $97f5			jsr 	ScanForward
.8768		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8769						DimCommand:
.8769		b1 30		lda ($30),y			lda 	(codePtr),y
.876b		29 c0		and #$c0			and 	#$C0
.876d		c9 40		cmp #$40			cmp 	#$40
.876f		d0 7a		bne $87eb			bne 	_DCSyntax 				; n o, error.
.8771		b1 30		lda ($30),y			lda 	(codePtr),y
.8773		18		clc				clc
.8774		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8776		85 3f		sta $3f				sta 	zaTemp+1
.8778		c8		iny				iny
.8779		b1 30		lda ($30),y			lda 	(codePtr),y
.877b		c8		iny				iny
.877c		85 3e		sta $3e				sta 	zaTemp
.877e		5a		phy				phy
.877f		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8781		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8783		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8785		c9 18		cmp #$18			cmp 	#NSTProcedure
.8787		f0 62		beq $87eb			beq 	_DCSyntax
.8789		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.878b		29 04		and #$04			and 	#NSBIsArray
.878d		f0 64		beq $87f3			beq 	_DCType
.878f		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8791		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8793		d0 59		bne $87ee			bne 	_DCRedefine
.8795		7a		ply				ply
.8796		20 f6 87	jsr $87f6			jsr 	_DCGetSize 				; get array size, check it.
.8799		5a		phy				phy
.879a		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.879c		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.879e		7a		ply				ply 							; is there a second (e.g. ,x)
.879f		b1 30		lda ($30),y			lda 	(codePtr),y
.87a1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87a3		d0 0a		bne $87af			bne 	_DCOneDimension
.87a5		c8		iny				iny 							; skip comma
.87a6		20 f6 87	jsr $87f6			jsr 	_DCGetSize 				; get 2nd array size
.87a9		5a		phy				phy
.87aa		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.87ac		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87ae		7a		ply				ply
.87af						_DCOneDimension:
.87af		5a		phy				phy 							; save position
.87b0		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.87b2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87b4		aa		tax				tax
.87b5		c8		iny				iny
.87b6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87b8		e8		inx				inx 							; bump them.
.87b9		1a		inc a				inc 	a
.87ba		20 be a7	jsr $a7be			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.87bd		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.87bf		29 e0		and #$e0			and 	#$E0
.87c1		d0 23		bne $87e6			bne 	_DCSize
.87c3		a0 02		ldy #$02			ldy 	#2 						; get base type
.87c5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87c7		20 04 88	jsr $8804			jsr 	ScaleByBaseType 		; scale by base type
.87ca		a5 36		lda $36				lda 	zTemp0
.87cc		a6 37		ldx $37				ldx 	zTemp0+1
.87ce		20 b5 a3	jsr $a3b5			jsr 	AllocateXABytes 		; allocate memory
.87d1		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.87d3		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87d5		c8		iny				iny
.87d6		8a		txa				txa
.87d7		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87d9		7a		ply				ply 							; get position back
.87da		20 9a 98	jsr $989a			jsr 	CheckRightBracket 		; check )
.87dd		b1 30		lda ($30),y			lda 	(codePtr),y
.87df		c8		iny				iny 							; consume in case
.87e0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.87e2		f0 85		beq $8769			beq 	DimCommand
.87e4		88		dey				dey 							; undo consume
.87e5		60		rts				rts
.87e6						_DCSize:
.87e6		a9 16		lda #$16		lda	#22
.87e8		4c b3 98	jmp $98b3		jmp	ErrorHandler
.87eb						_DCSyntax:
.87eb		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.87ee						_DCRedefine:
.87ee		a9 15		lda #$15		lda	#21
.87f0		4c b3 98	jmp $98b3		jmp	ErrorHandler
.87f3						_DCType:
.87f3		4c c2 aa	jmp $aac2			jmp 	TypeError
.87f6						_DCGetSize:
.87f6		a2 00		ldx #$00			ldx 	#0 						; get first index.
.87f8		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 	; get array dimension
.87fb		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.87fd		f0 e7		beq $87e6			beq 	_DCSize
.87ff		c9 fe		cmp #$fe			cmp 	#254
.8801		f0 e3		beq $87e6			beq 	_DCSize
.8803		60		rts				rts
.8804						ScaleByBaseType:
.8804		29 10		and #$10			and 	#NSBIsString 			; is it string
.8806		d0 19		bne $8821			bne 	_SBBTString
.8808		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.880a		48		pha				pha
.880b		a5 36		lda $36				lda 	zTemp0
.880d		48		pha				pha
.880e		06 36		asl $36				asl 	zTemp0 					; x 2
.8810		26 37		rol $37				rol 	zTemp0+1
.8812		06 36		asl $36				asl 	zTemp0 					; x 4
.8814		26 37		rol $37				rol 	zTemp0+1
.8816		68		pla				pla 							; add stacked value = x 5
.8817		65 36		adc $36				adc 	zTemp0
.8819		85 36		sta $36				sta 	zTemp0
.881b		68		pla				pla
.881c		65 37		adc $37				adc 	zTemp0+1
.881e		85 37		sta $37				sta 	zTemp0+1
.8820		60		rts				rts
.8821						_SBBTString:
.8821		06 36		asl $36				asl 	zTemp0
.8823		26 37		rol $37				rol 	zTemp0+1
.8825		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.8826						BootDOS:
.8826		a9 34		lda #$34	            lda     #dosName & $FF
.8828		85 fb		sta $fb		            sta     kernel.args.buf+0
.882a		a9 88		lda #$88	            lda     #dosName >> 8
.882c		85 fc		sta $fc		            sta     kernel.args.buf+1
.882e		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8831		4c b6 86	jmp $86b6	            jmp 	WarmStart
>8834		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8838						EndCommand:
.8838		4c b6 86	jmp $86b6			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.883b						UnaryEvent:
.883b		fa		plx				plx
.883c		20 2d 97	jsr $972d			jsr 	TimerToStackX 				; timer in +0
.883f		e8		inx				inx  								; put reference into +1
.8840		20 07 a2	jsr $a207			jsr 	EvaluateTerm
.8843		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.8845		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8847		d0 4c		bne $8895			bne 	_UEType
.8849		e8		inx				inx 								; put the step in +2
.884a		20 a2 98	jsr $98a2			jsr 	CheckComma
.884d		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.8850		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.8853		ca		dex				dex
.8854		ca		dex				dex
.8855		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8857		85 36		sta $36				sta 	zTemp0
.8859		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.885b		85 37		sta $37				sta 	zTemp0+1
.885d		5a		phy				phy
.885e		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8860		b1 36		lda ($36),y			lda 	(zTemp0),y
.8862		30 2d		bmi $8891			bmi 	_UEFalse 					; exit if signed.
.8864		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8866		b5 58		lda $58,x			lda 	NSMantissa0,x
.8868		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.886a		c8		iny				iny
.886b		b5 60		lda $60,x			lda 	NSMantissa1,x
.886d		f1 36		sbc ($36),y			sbc		(zTemp0),y
.886f		c8		iny				iny
.8870		b5 68		lda $68,x			lda 	NSMantissa2,x
.8872		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8874		90 1b		bcc $8891			bcc 	_UEFalse 					; no, return FALSE.
.8876		18		clc				clc
.8877		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8879		b5 58		lda $58,x			lda 	NSMantissa0,x
.887b		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.887d		91 36		sta ($36),y			sta 	(zTemp0),y
.887f		c8		iny				iny
.8880		b5 60		lda $60,x			lda 	NSMantissa1,x
.8882		75 62		adc $62,x			adc 	NSMantissa1+2,x
.8884		91 36		sta ($36),y			sta 	(zTemp0),y
.8886		c8		iny				iny
.8887		b5 68		lda $68,x			lda 	NSMantissa2,x
.8889		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.888b		91 36		sta ($36),y			sta 	(zTemp0),y
.888d		7a		ply				ply
.888e		4c 26 99	jmp $9926			jmp 	ReturnTrue
.8891						_UEFalse:
.8891		7a		ply				ply 								; restore Y
.8892		4c 31 99	jmp $9931			jmp 	ReturnFalse 				; and return False
.8895						_UEType:
.8895		4c c2 aa	jmp $aac2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.8898						Command_BLoad:
.8898		20 a3 88	jsr $88a3			jsr 	BLOADHandler
.889b		c9 00		cmp #$00			cmp 	#0
.889d		d0 01		bne $88a0			bne 	_BLError
.889f		60		rts				rts
.88a0						_BLError:
.88a0		4c f2 8a	jmp $8af2			jmp 	CLErrorHandler
.88a3						BLOADHandler:
.88a3		a2 00		ldx #$00			ldx 	#0
.88a5		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; file name to load
.88a8		20 a2 98	jsr $98a2			jsr 	CheckComma 					; consume comma
.88ab		e8		inx				inx
.88ac		20 80 a7	jsr $a780			jsr 	EvaluateInteger 			; load address (full physical address)
.88af		5a		phy				phy
.88b0		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.88b2		a6 60		ldx $60				ldx 	NSMantissa1
.88b4		20 7e 82	jsr $827e			jsr 	KNLOpenFileRead 			; open file for reading
.88b7		b0 50		bcs $8909			bcs 	_BLErrorExit 				; error, so fail.
.88b9		8d 9e 07	sta $079e			sta 	BasicFileStream 			; save the reading stream.
.88bc		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.88be		20 0b 89	jsr $890b			jsr 	BLOpenPhysicalMemory 		; open for access.
.88c1						_BLReadFile:
.88c1		ad 9e 07	lda $079e			lda 	BasicFileStream
.88c4		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.88c6		20 d3 82	jsr $82d3			jsr 	KNLReadBlock 				; read next block
.88c9		b0 22		bcs $88ed			bcs 	_BLFileError 				; file error, which might be EOF.
.88cb		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.88cd		f0 f2		beq $88c1			beq 	_BLReadFile
.88cf		8d 9c 07	sta $079c			sta 	BLCopyCounter 				; counter.
.88d2		ac 9b 07	ldy $079b			ldy 	BLYOffset 					; copy the buffer out here
.88d5		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.88d7						_BLCopyLoop:
.88d7		bd 8d 06	lda $068d,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.88da		91 3a		sta ($3a),y			sta 	(zTemp2),y
.88dc		c8		iny				iny
.88dd		d0 03		bne $88e2			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.88df		20 33 89	jsr $8933			jsr 	BLAdvancePhysicalMemory
.88e2						_BLNoAdjust:
.88e2		e8		inx				inx
.88e3		ce 9c 07	dec $079c			dec 	BLCopyCounter
.88e6		d0 ef		bne $88d7			bne 	_BLCopyLoop
.88e8		8c 9b 07	sty $079b			sty 	BLYOffset 					; update Y offset
.88eb		80 d4		bra $88c1			bra 	_BLReadFile 				; go ask for more.
.88ed						_BLFileError:
.88ed		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.88ef		d0 0d		bne $88fe			bne 	_BLErrorHandler				; no, it's an actual error
.88f1		20 2d 89	jsr $892d			jsr 	BLClosePhysicalMemory 		; close the access.
.88f4		ad 9e 07	lda $079e			lda 	BasicFileStream 			; close the file
.88f7		20 48 83	jsr $8348			jsr 	KNLCloseFile
.88fa		a9 00		lda #$00			lda 	#0 							; and return zero.
.88fc		7a		ply				ply
.88fd		60		rts				rts
.88fe						_BLErrorHandler:
.88fe		48		pha				pha 								; save code
.88ff		20 2d 89	jsr $892d			jsr 	BLClosePhysicalMemory 		; close access
.8902		ad 9e 07	lda $079e			lda 	BasicFileStream 			; close the open file
.8905		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8908		68		pla				pla 								; get error code
.8909						_BLErrorExit:
.8909		7a		ply				ply 								; restore position and exit.
.890a		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.890b						BLOpenPhysicalMemory:
.890b		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.890d		8d 9a 07	sta $079a			sta 	BLNormalMapping
.8910		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8912		8d 9b 07	sta $079b			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.8915		64 3a		stz $3a				stz 	zTemp2
.8917		b5 60		lda $60,x			lda 	NSMantissa1,x
.8919		29 1f		and #$1f			and 	#$1F
.891b		09 60		ora #$60			ora 	#BLAccessPage << 5
.891d		85 3b		sta $3b				sta 	zTemp2+1
.891f		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8921		16 60		asl $60,x			asl 	NSMantissa1,x
.8923		2a		rol a				rol 	a
.8924		16 60		asl $60,x			asl 	NSMantissa1,x
.8926		2a		rol a				rol 	a
.8927		16 60		asl $60,x			asl 	NSMantissa1,x
.8929		2a		rol a				rol 	a
.892a		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.892c		60		rts				rts
.892d						BLClosePhysicalMemory:
.892d		ad 9a 07	lda $079a			lda 	BLNormalMapping
.8930		85 0b		sta $0b				sta 	BLAccessPage+8
.8932		60		rts				rts
.8933						BLAdvancePhysicalMemory:
.8933		48		pha				pha
.8934		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8936		a5 3b		lda $3b				lda 	zTemp2+1
.8938		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.893a		d0 06		bne $8942			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.893c		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.893e		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8940		85 3b		sta $3b				sta 	zTemp2+1
.8942						_BLAPMExit:
.8942		68		pla				pla
.8943		60		rts				rts
.079a						BLNormalMapping:
>079a								.fill 	1
.079b						BLYOffset:
>079b								.fill 	1
.079c						BLCopyCounter:
>079c								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.8944						Command_BSave:
.8944		20 4f 89	jsr $894f			jsr 	BSaveHandler
.8947		c9 00		cmp #$00			cmp 	#0
.8949		d0 01		bne $894c			bne 	_BSError
.894b		60		rts				rts
.894c						_BSError:
.894c		4c f2 8a	jmp $8af2			jmp 	CLErrorHandler
.894f						BSaveHandler:
.894f		a2 00		ldx #$00			ldx 	#0
.8951		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; file name to load
.8954		20 a2 98	jsr $98a2			jsr 	CheckComma 					; consume comma
.8957		e8		inx				inx
.8958		20 80 a7	jsr $a780			jsr 	EvaluateInteger 			; load address (full physical address)
.895b		20 a2 98	jsr $98a2			jsr 	CheckComma 					; consume comma
.895e		e8		inx				inx
.895f		20 80 a7	jsr $a780			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8962		5a		phy				phy
.8963		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8965		a6 60		ldx $60				ldx 	NSMantissa1
.8967		20 79 82	jsr $8279			jsr 	KNLOpenFileWrite 			; open file for reading
.896a		b0 47		bcs $89b3			bcs 	_BSErrorExit 				; error, so fail.
.896c		8d 9e 07	sta $079e			sta 	BasicFileStream 			; save the reading stream.
.896f		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8971		20 0b 89	jsr $890b			jsr 	BLOpenPhysicalMemory 		; open for access.
.8974		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8976		ac 9b 07	ldy $079b			ldy 	BLYOffset 					; used for data offset.
.8979						_BSWriteToFileLoop:
.8979		38		sec				sec 								; pre decrement count.
.897a		a5 5a		lda $5a				lda 	NSMantissa0+2
.897c		e9 01		sbc #$01			sbc 	#1
.897e		85 5a		sta $5a				sta 	NSMantissa0+2
.8980		a5 62		lda $62				lda 	NSMantissa1+2
.8982		e9 00		sbc #$00			sbc 	#0
.8984		85 62		sta $62				sta 	NSMantissa1+2
.8986		a5 6a		lda $6a				lda 	NSMantissa2+2
.8988		e9 00		sbc #$00			sbc 	#0
.898a		85 6a		sta $6a				sta 	NSMantissa2+2
.898c		30 15		bmi $89a3			bmi 	_BSFileComplete 			; undercounted, so exit.
.898e		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.8990		9d 8d 06	sta $068d,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.8993		e8		inx				inx
.8994		c8		iny				iny 								; next byte
.8995		d0 03		bne $899a			bne 	_BSNoCheck
.8997		20 33 89	jsr $8933			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.899a						_BSNoCheck:
.899a		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.899c		d0 db		bne $8979			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.899e		20 b5 89	jsr $89b5			jsr 	BSFlushBuffer 				; yes, flush the buffer
.89a1		80 d6		bra $8979			bra 	_BSWriteToFileLoop 			; and keep on going
.89a3						_BSFileComplete:
.89a3		20 b5 89	jsr $89b5			jsr 	BSFlushBuffer 				; write the buffer remainder.
.89a6		20 2d 89	jsr $892d			jsr 	BLClosePhysicalMemory 		; close the access.
.89a9		ad 9e 07	lda $079e			lda 	BasicFileStream 			; close the file
.89ac		20 48 83	jsr $8348			jsr 	KNLCloseFile
.89af		a9 00		lda #$00			lda 	#0
.89b1		7a		ply				ply
.89b2		60		rts				rts
.89b3						_BSErrorExit:
.89b3		7a		ply				ply
.89b4		60		rts				rts
.89b5						BSFlushBuffer:
.89b5		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.89b7		f0 0d		beq $89c6			beq 	_BSFBExit 					; if so, exit.
.89b9		a9 8d		lda #$8d			lda 	#KNLReadBuffer & $FF 		; where to write from.
.89bb		85 36		sta $36				sta 	zTemp0
.89bd		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.89bf		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.89c1		20 ae 8b	jsr $8bae			jsr 	CLWriteByteBlock 			; write it.
.89c4		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.89c6						_BSFBExit:
.89c6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.89c7						Command_Dir:
.89c7		ad 8d 07	lda $078d			lda     KNLDefaultDrive				; set drive to list.
.89ca		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.89cc		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.89ce		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.89d1		b0 4f		bcs $8a22			bcs     _CDExit
.89d3						_CDEventLoop:
.89d3		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.89d6		20 a5 81	jsr $81a5			jsr     GetNextEvent
.89d9		b0 f8		bcs $89d3			bcs     _CDEventLoop
.89db		ad 8e 07	lda $078e			lda     KNLEvent.type
.89de		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.89e0		f0 40		beq $8a22			beq    	_CDExit
.89e2		20 e7 89	jsr $89e7			jsr     _CDMessages 				; handle various messages
.89e5		80 ec		bra $89d3			bra     _CDEventLoop
.89e7						_CDMessages:
.89e7		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.89e9		f0 15		beq $8a00			beq     _CDEVRead
.89eb		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.89ed		f0 19		beq $8a08			beq     _CDEVVolume
.89ef		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.89f1		f0 32		beq $8a25			beq     _CDEVFile
.89f3		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.89f5		f0 70		beq $8a67			beq     _CDEVFree
.89f7		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.89f9		f0 6e		beq $8a69			beq     _CDEVEOF
.89fb		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.89fd		f0 6a		beq $8a69			beq     _CDEVEOF
.89ff		60		rts				rts
.8a00						_CDEVRead:
.8a00		ad 91 07	lda $0791			lda     KNLEvent.directory.stream
.8a03		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8a05		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8a08						_CDEVVolume:
.8a08		a9 5b		lda #$5b			lda 	#"["
.8a0a		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a0d		ad 93 07	lda $0793			lda     KNLEvent.directory.volume.len
.8a10		20 71 8a	jsr $8a71			jsr     _CDReadData
.8a13		20 12 99	jsr $9912			jsr 	PrintStringXA
.8a16		a9 5d		lda #$5d			lda 	#"]"
.8a18		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a1b		a9 0d		lda #$0d			lda 	#13
.8a1d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a20		80 de		bra $8a00			bra     _CDEVRead
.8a22						_CDExit:
.8a22		4c b6 86	jmp $86b6			jmp 	WarmStart
.8a25						_CDEVFile:
.8a25		a9 20		lda #$20			lda 	#32
.8a27		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a2a		ad 93 07	lda $0793			lda     KNLEvent.directory.file.len
.8a2d		48		pha				pha
.8a2e		20 71 8a	jsr $8a71			jsr     _CDReadData
.8a31		20 12 99	jsr $9912			jsr 	PrintStringXA
.8a34		68		pla				pla
.8a35		49 ff		eor #$ff			eor 	#$FF
.8a37		38		sec				sec
.8a38		69 10		adc #$10			adc 	#16
.8a3a		aa		tax				tax
.8a3b						_CDEVTab:
.8a3b		a9 20		lda #$20			lda 	#32
.8a3d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a40		ca		dex				dex
.8a41		10 f8		bpl $8a3b			bpl 	_CDEVTab
.8a43		20 88 8a	jsr $8a88			jsr 	_CDReadExtended
.8a46		ad 26 05	lda $0526			lda 	lineBuffer
.8a49		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8a4c		20 28 9d	jsr $9d28			jsr 	ConvertInt16
.8a4f		20 12 99	jsr $9912			jsr 	PrintStringXA
.8a52		a2 8a		ldx #$8a			ldx 	#_CDEVFMessage >> 8
.8a54		a9 5b		lda #$5b			lda 	#_CDEVFMessage & $FF
.8a56		20 12 99	jsr $9912			jsr 	PrintStringXA
.8a59		80 a5		bra $8a00			bra     _CDEVRead
.8a5b						_CDEVFMessage:
>8a5b		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8a63		29 2e 0d 00
.8a67						_CDEVFree:
.8a67		80 00		bra $8a69			bra     _CDEVEOF
.8a69						_CDEVEOF:
.8a69		ad 91 07	lda $0791			lda     KNLEvent.directory.stream
.8a6c		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8a6e		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8a71						_CDReadData:
.8a71		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a73		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a75		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a77		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a79		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a7b		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8a7e		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8a80		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8a83		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8a85		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8a87		60		rts				rts
.8a88						_CDReadExtended:
.8a88		a9 02		lda #$02			lda     #2
.8a8a		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a8c		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a8e		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a90		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a92		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a94		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8a97						Command_Drive:
.8a97		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.8a9a		20 75 82	jsr $8275			jsr 	KNLSetDrive
.8a9d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8a9e						Command_Load:
.8a9e		20 a4 8a	jsr $8aa4			jsr 	LoadFile
.8aa1		4c b6 86	jmp $86b6			jmp 	WarmStart
.8aa4						LoadFile:
.8aa4		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; file name to load
.8aa7		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8aa9		a5 36		lda $36				lda 	zTemp0
.8aab		20 7e 82	jsr $827e			jsr 	KNLOpenFileRead 			; open file for reading
.8aae		b0 42		bcs $8af2			bcs 	CLErrorHandler 				; error, so fail.
.8ab0		8d 9e 07	sta $079e			sta 	BasicFileStream 			; save the reading stream.
.8ab3		20 42 8b	jsr $8b42			jsr     LoadReadByteInit            ; Init reader with the stream
.8ab6		20 7d 92	jsr $927d			jsr 	NewProgram 					; does the actual NEW.
.8ab9		9c 9d 07	stz $079d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8abc						_CLLoop:
.8abc		20 00 8b	jsr $8b00			jsr 	LoadReadLine 				; get next line.
.8abf		f0 10		beq $8ad1			beq 	_CLExit 					; end, exit.
.8ac1		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8ac4		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8ac7		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8aca		f0 f0		beq $8abc			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8acc		20 91 86	jsr $8691			jsr 	EditProgramCode 			; do the editing etc.
.8acf		80 eb		bra $8abc			bra 	_CLLoop
.8ad1						_CLExit:
.8ad1		ad 9e 07	lda $079e			lda 	BasicFileStream
.8ad4		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8ad7						CLComplete:
.8ad7		a9 df		lda #$df			lda 	#_CLCMsg & $FF
.8ad9		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8adb		20 12 99	jsr $9912			jsr 	PrintStringXA
.8ade		60		rts				rts
.8adf						_CLCMsg:
>8adf		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8ae7		2e 0d 00
.8aea						CLCloseError:
.8aea		48		pha				pha
.8aeb		ad 9e 07	lda $079e			lda 	BasicFileStream
.8aee		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8af1		68		pla				pla
.8af2						CLErrorHandler:
.8af2		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8af4		f0 05		beq $8afb			beq 	_CLEHNotFound
.8af6		a9 1a		lda #$1a		lda	#26
.8af8		4c b3 98	jmp $98b3		jmp	ErrorHandler
.8afb						_CLEHNotFound:
.8afb		a9 19		lda #$19		lda	#25
.8afd		4c b3 98	jmp $98b3		jmp	ErrorHandler
.8b00						LoadReadLine:
.8b00		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8b02		20 1c 8b	jsr $8b1c			jsr 	LoadReadCharacter
.8b05		f0 14		beq $8b1b			beq 	_LRLExit 					; eof ?
.8b07		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8b09		90 f5		bcc $8b00			bcc 	LoadReadLine
.8b0b						_LRLLoop:
.8b0b		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8b0e		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8b11		e8		inx				inx
.8b12		20 1c 8b	jsr $8b1c			jsr 	LoadReadCharacter 			; next line
.8b15		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8b17		b0 f2		bcs $8b0b			bcs 	_LRLLoop
.8b19		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8b1b						_LRLExit:
.8b1b		60		rts				rts
.8b1c						LoadReadCharacter:
.8b1c		da		phx				phx
.8b1d		5a		phy				phy
.8b1e		ad 9d 07	lda $079d			lda 	LoadEOFFlag 				; already done EOF.
.8b21		d0 0c		bne $8b2f			bne 	_LRCIsEOF
.8b23		20 4c 8b	jsr $8b4c			jsr 	LoadReadByte 				; read a byte
.8b26		90 09		bcc $8b31			bcc		_LRCExit 					; read okay.
.8b28		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8b2a		d0 be		bne $8aea			bne 	CLCloseError
.8b2c		ce 9d 07	dec $079d			dec 	LoadEOFFlag
.8b2f						_LRCIsEOF:
.8b2f		a9 00		lda #$00			lda 	#0
.8b31						_LRCExit:
.8b31		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8b33		d0 02		bne $8b37			bne 	_LRCNotTab
.8b35		a9 20		lda #$20			lda 	#' '
.8b37						_LRCNotTab:
.8b37		c9 0a		cmp #$0a			cmp 	#$0A
.8b39		d0 02		bne $8b3d			bne 	_LRCNotLF
.8b3b		a9 0d		lda #$0d			lda 	#$0D
.8b3d						_LRCNotLF:
.8b3d		7a		ply				ply
.8b3e		fa		plx				plx
.8b3f		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b41		60		rts				rts
.8b42						LoadReadByteInit:
.8b42		8d 9f 07	sta $079f			sta     LoadFileStream 				; save stream
.8b45		9c a0 07	stz $07a0			stz     LoadNextCharacter 			; reset buffer
.8b48		9c a1 07	stz $07a1			stz     LoadEndCharacter
.8b4b		60		rts				rts
.8b4c						LoadReadByte:
.8b4c		da		phx				phx
.8b4d		ae a0 07	ldx $07a0			ldx     LoadNextCharacter 					; all data consumed ?
.8b50		ec a1 07	cpx $07a1			cpx     LoadEndCharacter
.8b53		d0 12		bne $8b67			bne     _KNLRBGetNextByte
.8b55		ad 9f 07	lda $079f			lda     LoadFileStream
.8b58		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8b5a		20 d3 82	jsr $82d3			jsr     KNLReadBlock 				; read next chunk from the stream
.8b5d		b0 0f		bcs $8b6e			bcs     _KNLRBError 				; error has occurred on read.
.8b5f		8d a1 07	sta $07a1			sta     LoadEndCharacter 						; # read is the number available
.8b62		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8b64		8e a0 07	stx $07a0			stx     LoadNextCharacter
.8b67						_KNLRBGetNextByte:
.8b67		bd 8d 06	lda $068d,x			lda     KNLReadBuffer,x 			; get the next data item
.8b6a		ee a0 07	inc $07a0			inc     LoadNextCharacter 					; and advance the index
.8b6d		18		clc				clc 								; succeeded
.8b6e						_KNLRBError:
.8b6e		fa		plx				plx
.8b6f		60		rts				rts
.079d						LoadEOFFlag:
>079d								.fill 	1
.079e						BasicFileStream:
>079e								.fill 	1
.079f						LoadFileStream:
>079f								.byte   ?
.07a0						LoadNextCharacter:
>07a0								.byte   ?
.07a1						LoadEndCharacter:
>07a1								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8b70						Command_Save:
.8b70		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; file name to load
.8b73		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b75		a5 36		lda $36				lda 	zTemp0
.8b77		20 79 82	jsr $8279			jsr 	KNLOpenFileWrite 			; open file for writing
.8b7a		b0 2f		bcs $8bab			bcs 	CSErrorHandler 				; error, so fail.
.8b7c		8d 9e 07	sta $079e			sta 	BasicFileStream 			; save the reading stream.
.8b7f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b81		85 30		sta $30				sta 	codePtr
.8b83		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b85		85 31		sta $31				sta 	codePtr+1
.8b87						_CSLoop:
.8b87		b2 30		lda ($30)			lda 	(codePtr)
.8b89		f0 17		beq $8ba2			beq 	_CSExit
.8b8b		20 cf 8b	jsr $8bcf			jsr 	CSGetCleanLine
.8b8e		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8b90		85 36		sta $36				sta 	zTemp0
.8b92		20 ae 8b	jsr $8bae			jsr 	CLWriteByteBlock 			; write the block out.
.8b95		18		clc				clc
.8b96		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b98		65 30		adc $30				adc 	codePtr
.8b9a		85 30		sta $30				sta 	codePtr
.8b9c		90 02		bcc $8ba0			bcc 	_CREExit
.8b9e		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ba0						_CREExit:
.8ba0		80 e5		bra $8b87			bra 	_CSLoop
.8ba2						_CSExit:
.8ba2		ad 9e 07	lda $079e			lda 	BasicFileStream 			; close file
.8ba5		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8ba8		4c d7 8a	jmp $8ad7			jmp 	CLComplete 					; display complete message.
.8bab						CSErrorHandler:
.8bab		4c f2 8a	jmp $8af2			jmp 	CLErrorHandler
.8bae						CLWriteByteBlock:
.8bae		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8bb0		f0 1c		beq $8bce			beq 	_CLWBBExit					; if so, exit
.8bb2		ad 9e 07	lda $079e			lda 	BasicFileStream 			; stream to write, count in X
.8bb5		20 0e 83	jsr $830e			jsr 	KNLWriteBlock 				; call one write attempt
.8bb8		b0 f1		bcs $8bab			bcs 	CSErrorHandler 				; error occurred
.8bba		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8bbc		8a		txa				txa 								; subtract bytes written from X, total count.
.8bbd		38		sec				sec
.8bbe		e5 38		sbc $38				sbc 	zTemp1
.8bc0		aa		tax				tax
.8bc1		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8bc2		a5 36		lda $36				lda 	zTemp0
.8bc4		65 38		adc $38				adc 	zTemp1
.8bc6		85 36		sta $36				sta 	zTemp0
.8bc8		90 e4		bcc $8bae			bcc 	CLWriteByteBlock
.8bca		e6 37		inc $37				inc 	zTemp0+1
.8bcc		80 e0		bra $8bae			bra 	CLWriteByteBlock 			; and retry write out.
.8bce						_CLWBBExit:
.8bce		60		rts				rts
.8bcf						CSGetCleanLine:
.8bcf		a9 00		lda #$00			lda 	#0 							; no indent.
.8bd1		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8bd4		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8bd6		a0 00		ldy #$00			ldy 	#0
.8bd8						_CSClean:
.8bd8		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8bdb		f0 09		beq $8be6			beq 	_CSDoneClean
.8bdd		30 04		bmi $8be3			bmi 	_CSIgnoreCharacter
.8bdf		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8be2		e8		inx				inx
.8be3						_CSIgnoreCharacter:
.8be3		c8		iny				iny
.8be4		80 f2		bra $8bd8			bra 	_CSClean
.8be6						_CSDoneClean:
.8be6		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8be8		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8beb		e8		inx				inx
.8bec		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8bef		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8bf1		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8bf3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.e7fa						m
.8bf4						Command_VERIFY:
.8bf4		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; file name to verify
.8bf7		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8bf9		a5 36		lda $36				lda 	zTemp0
.8bfb		20 7e 82	jsr $827e			jsr 	KNLOpenFileRead 			; open file for reading
.8bfe		b0 4b		bcs $8c4b			bcs 	_CVErrorHandler 			; error, so fail.
.8c00		8d 9e 07	sta $079e			sta 	BasicFileStream 			; save the reading stream.
.8c03		20 42 8b	jsr $8b42			jsr     LoadReadByteInit            ; Init reader with the stream
.8c06		9c 9d 07	stz $079d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8c09		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c0b		85 30		sta $30				sta 	codePtr
.8c0d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c0f		85 31		sta $31				sta 	codePtr+1
.8c11						_CVLoop:
.8c11		20 00 8b	jsr $8b00			jsr 	LoadReadLine 				; get next line.
.8c14		f0 27		beq $8c3d			beq 	_CVExit 					; end, exit.
.8c16		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8c19		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8c1c		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8c1f		f0 f0		beq $8c11			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8c21		a0 00		ldy #$00			ldy 	#0 							; start compare
.8c23						_CVCompareLoop:
.8c23		b1 30		lda ($30),y			lda 	(codePtr),y
.8c25		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8c28		d0 1c		bne $8c46			bne 	_CVCompareError
.8c2a		c8		iny				iny
.8c2b		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8c2e		d0 f3		bne $8c23			bne 	_CVCompareLoop
.8c30		18		clc				clc
.8c31		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c33		65 30		adc $30				adc 	codePtr
.8c35		85 30		sta $30				sta 	codePtr
.8c37		90 02		bcc $8c3b			bcc 	_CREExit
.8c39		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c3b						_CREExit:
.8c3b		80 d4		bra $8c11			bra 	_CVLoop
.8c3d						_CVExit:
.8c3d		ad 9e 07	lda $079e			lda 	BasicFileStream
.8c40		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8c43		4c d7 8a	jmp $8ad7			jmp 	CLComplete
.8c46						_CVCompareError:
.8c46		a9 1b		lda #$1b		lda	#27
.8c48		4c b3 98	jmp $98b3		jmp	ErrorHandler
.8c4b						_CVErrorHandler:
.8c4b		4c f2 8a	jmp $8af2			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c4e						ForCommand:
.8c4e		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8c50		20 32 b1	jsr $b132			jsr 	StackOpen
.8c53		a2 00		ldx #$00			ldx 	#0
.8c55		20 07 a2	jsr $a207			jsr 	EvaluateTerm
.8c58		b5 50		lda $50,x			lda 	NSStatus,x
.8c5a		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c5c		d0 47		bne $8ca5			bne		_FCError
.8c5e		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c60		20 aa 98	jsr $98aa			jsr 	CheckNextA
.8c63		e8		inx				inx
.8c64		20 80 a7	jsr $a780			jsr 	EvaluateInteger 			; <from> in +1
.8c67		b1 30		lda ($30),y			lda 	(codePtr),y
.8c69		c8		iny				iny 								; consume it
.8c6a		48		pha				pha 								; save on stack for later
.8c6b		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8c6d		f0 04		beq $8c73			beq 	_FCNoSyntax
.8c6f		c9 db		cmp #$db			cmp 	#KWD_TO
.8c71		d0 35		bne $8ca8			bne 	_FCSyntaxError
.8c73						_FCNoSyntax:
.8c73		e8		inx				inx
.8c74		20 80 a7	jsr $a780			jsr 	EvaluateInteger
.8c77		20 77 b1	jsr $b177			jsr 	STKSaveCodePosition 		; save loop back position
.8c7a		68		pla				pla 								; restore DOWNTO or TO
.8c7b		5a		phy				phy 								; save Y on the stack
.8c7c		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8c7e		f0 02		beq $8c82			beq 	_FCNotDownTo
.8c80		a9 02		lda #$02			lda 	#2
.8c82						_FCNotDownTo:
.8c82		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8c83		a0 10		ldy #$10			ldy 	#16
.8c85		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8c87		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8c89		a5 58		lda $58				lda 	NSMantissa0
.8c8b		91 34		sta ($34),y			sta 	(basicStack),y
.8c8d		a5 60		lda $60				lda 	NSMantissa1
.8c8f		c8		iny				iny
.8c90		91 34		sta ($34),y			sta 	(basicStack),y
.8c92		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c94		a2 01		ldx #$01			ldx 	#1
.8c96		20 ab 8c	jsr $8cab			jsr 	FCIntegerToStack
.8c99		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8c9b		a2 02		ldx #$02			ldx 	#2
.8c9d		20 ab 8c	jsr $8cab			jsr 	FCIntegerToStack
.8ca0		20 c6 8c	jsr $8cc6			jsr 	CopyIndexToReference
.8ca3		7a		ply				ply 								; restore position
.8ca4		60		rts				rts
.8ca5						_FCError:
.8ca5		4c c2 aa	jmp $aac2			jmp 	TypeError
.8ca8						_FCSyntaxError:
.8ca8		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.8cab						FCIntegerToStack:
.8cab		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8cad		10 03		bpl $8cb2			bpl	 	_FCNotNegative
.8caf		20 dc a7	jsr $a7dc			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8cb2						_FCNotNegative:
.8cb2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8cb4		91 34		sta ($34),y			sta 	(basicStack),y
.8cb6		c8		iny				iny
.8cb7		b5 60		lda $60,x			lda 	NSMantissa1,x
.8cb9		91 34		sta ($34),y			sta 	(basicStack),y
.8cbb		c8		iny				iny
.8cbc		b5 68		lda $68,x			lda 	NSMantissa2,x
.8cbe		91 34		sta ($34),y			sta 	(basicStack),y
.8cc0		c8		iny				iny
.8cc1		b5 70		lda $70,x			lda 	NSMantissa3,x
.8cc3		91 34		sta ($34),y			sta 	(basicStack),y
.8cc5		60		rts				rts
.8cc6						CopyIndexToReference:
.8cc6		5a		phy				phy
.8cc7		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8cc9		38		sec				sec 								; (because we copy from offset 8)
.8cca		b1 34		lda ($34),y			lda 	(basicStack),y
.8ccc		e9 08		sbc #$08			sbc 	#8
.8cce		85 36		sta $36				sta 	zTemp0
.8cd0		c8		iny				iny
.8cd1		b1 34		lda ($34),y			lda 	(basicStack),y
.8cd3		e9 00		sbc #$00			sbc 	#0
.8cd5		85 37		sta $37				sta 	zTemp0+1
.8cd7		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8cd9		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8cdb		b1 34		lda ($34),y			lda 	(basicStack),y
.8cdd		0a		asl a				asl 	a 							; into carry
.8cde		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ce0		90 14		bcc $8cf6			bcc 	_CITRNormal
.8ce2		38		sec				sec
.8ce3						_CITRNegative:
.8ce3		a9 00		lda #$00			lda 	#0
.8ce5		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ce7		91 36		sta ($36),y			sta 	(zTemp0),y
.8ce9		c8		iny				iny
.8cea		ca		dex				dex
.8ceb		d0 f6		bne $8ce3			bne 	_CITRNegative
.8ced		88		dey				dey 								; look at MSB of mantissa
.8cee		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8cf0		09 80		ora #$80			ora 	#$80
.8cf2		91 36		sta ($36),y			sta 	(zTemp0),y
.8cf4		7a		ply				ply
.8cf5		60		rts				rts
.8cf6						_CITRNormal:
.8cf6		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8cf8		91 36		sta ($36),y			sta 	(zTemp0),y
.8cfa		c8		iny				iny
.8cfb		ca		dex				dex
.8cfc		d0 f8		bne $8cf6			bne 	_CITRNormal
.8cfe		7a		ply				ply 								; and exit.
.8cff		60		rts				rts
.8d00						NextCommand:
.8d00		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8d02		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8d04		20 5f b1	jsr $b15f			jsr 	StackCheckFrame
.8d07		5a		phy				phy
.8d08		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8d0a		b1 34		lda ($34),y			lda 	(basicStack),y
.8d0c		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8d0e		30 02		bmi $8d12			bmi 	_NCStepNeg
.8d10		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8d12						_NCStepNeg:
.8d12		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8d14		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8d16		18		clc				clc
.8d17						_NCBump:
.8d17		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8d19		91 34		sta ($34),y			sta 	(basicStack),y
.8d1b		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8d1d		c8		iny				iny 								; next byte
.8d1e		ca		dex				dex 								; do four times
.8d1f		d0 f6		bne $8d17			bne 	_NCBump
.8d21		20 c6 8c	jsr $8cc6			jsr		CopyIndexToReference		; copy it to the reference variable.
.8d24		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8d26		b1 34		lda ($34),y			lda 	(basicStack),y
.8d28		0a		asl a				asl 	a 							; sign bit to carry
.8d29		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8d2b		85 38		sta $38				sta 	zTemp1
.8d2d		90 02		bcc $8d31			bcc 	_NCCompRev 					; use if step is +ve
.8d2f		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8d31						_NCCompRev:
.8d31		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8d33		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8d35		85 39		sta $39				sta 	zTemp1+1
.8d37		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8d39		38		sec				sec
.8d3a						_NCCompare:
.8d3a		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d3c		b1 34		lda ($34),y			lda 	(basicStack),y
.8d3e		a4 39		ldy $39				ldy 	zTemp1+1
.8d40		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d42		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d44		e6 39		inc $39				inc 	zTemp1+1
.8d46		ca		dex				dex 								; do it 4 times.
.8d47		d0 f1		bne $8d3a			bne 	_NCCompare
.8d49		50 02		bvc $8d4d			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d4b		49 80		eor #$80			eor 	#$80
.8d4d						_NCNoOverflow:
.8d4d		7a		ply				ply 								; restore Y position
.8d4e		0a		asl a				asl 	a 							; is bit 7 set.
.8d4f		90 04		bcc $8d55			bcc 	_NCLoopBack 				; if no , >= so loop back
.8d51		20 51 b1	jsr $b151			jsr 	StackClose 					; exit the loop
.8d54		60		rts				rts
.8d55						_NCLoopBack:
.8d55		20 88 b1	jsr $b188			jsr 	STKLoadCodePosition 		; loop back
.8d58		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d59						Command_GOSUB:
.8d59		a2 00		ldx #$00			ldx 	#0
.8d5b		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d5e		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d60		20 32 b1	jsr $b132			jsr 	StackOpen 					; create frame
.8d63		20 77 b1	jsr $b177			jsr 	STKSaveCodePosition 		; save current position
.8d66		4c 7c 8d	jmp $8d7c			jmp 	GotoStackX
.8d69						Command_RETURN:
.8d69		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d6b		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d6d		20 5f b1	jsr $b15f			jsr 	StackCheckFrame
.8d70		20 88 b1	jsr $b188			jsr 	STKLoadCodePosition 		; restore code position
.8d73		20 51 b1	jsr $b151			jsr 	StackClose
.8d76		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d77						GotoCommand:
.8d77		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d79		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.8d7c						GotoStackX:
.8d7c		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8d7e		48		pha				pha 								; it is slightly inefficient, just in cases.
.8d7f		b5 58		lda $58,x			lda 	NSMantissa0,x
.8d81		fa		plx				plx
.8d82		20 50 ad	jsr $ad50			jsr 	MemorySearch 				; transfer to line number AX.
.8d85		90 05		bcc $8d8c			bcc 	_GotoError 					; not found, off end.
.8d87		d0 03		bne $8d8c			bne 	_GotoError 					; not found exactly
.8d89		4c 13 94	jmp $9413			jmp 	RunNewLine 					; and go straight to new line code.
.8d8c						_GotoError:
.8d8c		a9 0d		lda #$0d		lda	#13
.8d8e		4c b3 98	jmp $98b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d91						IfCommand:
.8d91		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8d93		20 61 a7	jsr $a761			jsr 	EvaluateNumber
.8d96		b1 30		lda ($30),y			lda 	(codePtr),y
.8d98		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8d9a		d0 0a		bne $8da6			bne 	_IfStructured 				; we still support it.
.8d9c		c8		iny				iny 								; consume THEN
.8d9d		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; is it zero
.8da0		f0 01		beq $8da3			beq 	_IfFail 					; if fail, go to next line
.8da2		60		rts				rts 								; if THEN just continue
.8da3						_IfFail:
.8da3		4c ee 93	jmp $93ee			jmp 	EOLCommand
.8da6						_IfStructured:
.8da6		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; is it zero
.8da9		d0 07		bne $8db2			bne 	_IfExit 					; if not, then continue normally.
.8dab		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8dad		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8daf		20 f5 97	jsr $97f5			jsr 	ScanForward 				; and run from there
.8db2						_IfExit:
.8db2		60		rts				rts
.8db3						ElseCode:
.8db3		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8db5		aa		tax				tax 								; so just go to the structure exit
.8db6		20 f5 97	jsr $97f5			jsr 	ScanForward
.8db9		60		rts				rts
.8dba						EndIf:
.8dba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8dbb						Command_Input:
.8dbb		9c 24 04	stz $0424			stz 	isPrintFlag
.8dbe		80 0c		bra $8dcc			bra 	Command_IP_Main
.8dc0						Command_CPrint:
.8dc0		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8dc2		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8dc5		80 05		bra $8dcc			bra 	Command_IP_Main
.8dc7						Command_Print:
.8dc7		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8dc9		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8dcc						Command_IP_Main:
.8dcc		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8dcd						_CPLoop:
.8dcd		08		php				php 								; save last action flag
.8dce		b1 30		lda ($30),y			lda 	(codePtr),y
.8dd0		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8dd2		f0 54		beq $8e28			beq 	_CPExit
.8dd4		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8dd6		f0 50		beq $8e28			beq 	_CPExit
.8dd8		68		pla				pla 								; throw last action flag
.8dd9		b1 30		lda ($30),y			lda 	(codePtr),y
.8ddb		c8		iny				iny
.8ddc		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8dde		f0 45		beq $8e25			beq 	_CPContinueWithSameLine
.8de0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8de2		f0 3c		beq $8e20			beq 	_CPTab
.8de4		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8de6		f0 34		beq $8e1c			beq 	_CPNewLine
.8de8		88		dey				dey 								; undo the get.
.8de9		20 bb 9d	jsr $9dbb			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8dec		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8dee		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8df0		f0 0d		beq $8dff			beq 	_CPIsValue 					; no, display it.
.8df2		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8df5		d0 05		bne $8dfc			bne 	_CPIsPrint 					; otherwise display.
.8df7		20 31 8e	jsr $8e31			jsr 	CIInputValue 				; input a value to the reference
.8dfa		80 20		bra $8e1c			bra 	_CPNewLine
.8dfc						_CPIsPrint:
.8dfc		20 80 a0	jsr $a080			jsr 	Dereference 				; dereference if required.
.8dff						_CPIsValue:
.8dff		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8e01		29 10		and #$10			and 	#NSBIsString
.8e03		f0 09		beq $8e0e			beq 	_CPNumber
.8e05		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8e07		a5 58		lda $58				lda 	NSMantissa0
.8e09		20 94 8e	jsr $8e94			jsr 	CPPrintStringXA
.8e0c		80 be		bra $8dcc			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8e0e						_CPNumber:
.8e0e		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8e10		20 48 a6	jsr $a648			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8e13		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8e15		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8e17		20 94 8e	jsr $8e94			jsr 	CPPrintStringXA 			; print it.
.8e1a		80 b0		bra $8dcc			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8e1c						_CPNewLine:
.8e1c		a9 0d		lda #$0d			lda 	#13
.8e1e		80 02		bra $8e22			bra 	_CPPrintCharDirect
.8e20						_CPTab:
.8e20		a9 09		lda #$09			lda 	#9 							; print TAB
.8e22						_CPPrintCharDirect:
.8e22		20 af 8e	jsr $8eaf			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8e25						_CPContinueWithSameLine:
.8e25		38		sec				sec 								; loop round with carry set, which
.8e26		80 a5		bra $8dcd			bra 	_CPLoop 					; will inhibit final CR
.8e28						_CPExit:
.8e28		28		plp				plp 								; get last action flag
.8e29		b0 05		bcs $8e30			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e2b		a9 0d		lda #$0d			lda 	#13 						; print new line
.8e2d		20 af 8e	jsr $8eaf			jsr 	CPPVControl
.8e30						_CPExit2:
.8e30		60		rts				rts
.8e31						CIInputValue:
.8e31		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8e33						_CIInputLine:
.8e33		20 b2 8e	jsr $8eb2			jsr 	CPInputVector 				; get key
.8e36		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8e38		f0 1f		beq $8e59			beq 	_CIHaveValue
.8e3a		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8e3c		f0 11		beq $8e4f			beq 	_CIBackspace
.8e3e		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8e40		90 f1		bcc $8e33			bcc 	_CIInputLine
.8e42		e0 50		cpx #$50			cpx 	#80 						; max length
.8e44		b0 ed		bcs $8e33			bcs 	_CIInputLine
.8e46		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8e49		e8		inx				inx
.8e4a		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e4d		80 e4		bra $8e33			bra 	_CIInputLine
.8e4f						_CIBackspace:
.8e4f		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8e51		f0 e0		beq $8e33			beq 	_CIInputLine
.8e53		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e56		ca		dex				dex
.8e57		80 da		bra $8e33			bra 	_CIInputLine
.8e59						_CIHaveValue:
.8e59		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8e5c		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8e5e		29 10		and #$10			and 	#NSBIsString
.8e60		f0 17		beq $8e79			beq 	_CIAssignNumber 			; assign a number
.8e62		a2 01		ldx #$01			ldx 	#1
.8e64		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e66		95 58		sta $58,x			sta 	NSMantissa0,x
.8e68		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e6a		95 60		sta $60,x			sta 	NSMantissa1,x
.8e6c		74 68		stz $68,x			stz 	NSMantissa2,x
.8e6e		74 70		stz $70,x			stz 	NSMantissa3,x
.8e70		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8e72		95 50		sta $50,x			sta  	NSStatus,x
.8e74		ca		dex				dex 								; X = 0
.8e75		20 27 8f	jsr $8f27			jsr 	AssignVariable
.8e78		60		rts				rts
.8e79						_CIAssignNumber:
.8e79		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e7b		85 36		sta $36				sta 	zTemp0
.8e7d		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e7f		85 37		sta $37				sta 	zTemp0+1
.8e81		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8e83		20 28 a5	jsr $a528			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8e86		90 07		bcc $8e8f			bcc 	_CIIsOkay
.8e88		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8e8a		20 a7 8e	jsr $8ea7			jsr 	CPPrintVector
.8e8d		80 a2		bra $8e31			bra 	CIInputValue
.8e8f						_CIIsOkay:
.8e8f		ca		dex				dex 								; X = 0
.8e90		20 27 8f	jsr $8f27			jsr 	AssignVariable
.8e93		60		rts				rts
.8e94						CPPrintStringXA:
.8e94		5a		phy				phy
.8e95		86 37		stx $37				stx 	zTemp0+1
.8e97		85 36		sta $36				sta 	zTemp0
.8e99		a0 00		ldy #$00			ldy 	#0
.8e9b						_PSXALoop:
.8e9b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9d		f0 06		beq $8ea5			beq 	_PSXAExit
.8e9f		20 a7 8e	jsr $8ea7			jsr 	CPPrintVector
.8ea2		c8		iny				iny
.8ea3		80 f6		bra $8e9b			bra 	_PSXALoop
.8ea5						_PSXAExit:
.8ea5		7a		ply				ply
.8ea6		60		rts				rts
.8ea7						CPPrintVector:
.8ea7		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8eaa		30 03		bmi $8eaf			bmi 	CPPVControl
.8eac		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8eaf						CPPVControl:
.8eaf		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8eb2						CPInputVector:
.8eb2		4c 8e 81	jmp $818e			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8eb5						UnaryJoyX:
.8eb5		18		clc				clc
.8eb6		80 01		bra $8eb9			bra 	JoyMain
.8eb8						UnaryJoyY:
.8eb8		38		sec				sec
.8eb9						JoyMain:
.8eb9		fa		plx				plx 								; get pos
.8eba		08		php				php 								; save carry (set for Y)
.8ebb		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ebe		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.8ec1		20 4e 83	jsr $834e			jsr 	KNLReadController 			; read the controller.
.8ec4		28		plp				plp
.8ec5		b0 02		bcs $8ec9			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8ec7		4a		lsr a				lsr 	a
.8ec8		4a		lsr a				lsr 	a
.8ec9						_JMNoShift:
.8ec9		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8eca		b0 07		bcs $8ed3			bcs 	JMIsLeft
.8ecc		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8ecd		b0 07		bcs $8ed6			bcs 	JMIsRight
.8ecf		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; zero result
.8ed2		60		rts				rts
.8ed3						JMIsLeft:
.8ed3		4c 26 99	jmp $9926			jmp 	ReturnTrue
.8ed6						JMIsRight:
.8ed6		a9 01		lda #$01			lda 	#1
.8ed8		20 15 a8	jsr $a815			jsr 	NSMSetByte
.8edb		60		rts				rts
.8edc						UnaryJoyB:
.8edc		fa		plx				plx 								; get pos
.8edd		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ee0		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.8ee3		20 4e 83	jsr $834e			jsr 	KNLReadController 			; read the controller.
.8ee6		29 10		and #$10			and 	#$10
.8ee8		d0 e9		bne $8ed3			bne 	JMIsLeft
.8eea		20 13 a8	jsr $a813			jsr 	NSMSetZero
.8eed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8eee						LetCommand:
.8eee		a2 00		ldx #$00			ldx 	#0
.8ef0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ef2		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8ef4		d0 14		bne $8f0a			bne 	_LCStandard
.8ef6		c8		iny				iny 								; skip equal
.8ef7		20 07 a2	jsr $a207			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8efa		20 80 a0	jsr $a080			jsr 	Dereference 				; dereference it to a value
.8efd		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8eff		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8f01		95 50		sta $50,x			sta 	NSStatus,x
.8f03		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8f05		d0 0f		bne $8f16			bne 	_LCMain
.8f07		4c c2 aa	jmp $aac2			jmp 	TypeError 					; was a reference before.
.8f0a						_LCStandard:
.8f0a		ad a5 9d	lda $9da5			lda 	PrecedenceLevel+"*"			; precedence > this
.8f0d		20 bf 9d	jsr $9dbf			jsr 	EvaluateExpressionAtPrecedence
.8f10		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8f12		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8f14		f0 0e		beq $8f24			beq 	_LetGoProc 					; it's a procedure call.
.8f16						_LCMain:
.8f16		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8f18		20 aa 98	jsr $98aa			jsr 	CheckNextA
.8f1b		e8		inx				inx 								; RHS
.8f1c		20 58 a7	jsr $a758			jsr 	EvaluateValue
.8f1f		ca		dex				dex
.8f20		20 27 8f	jsr $8f27			jsr 	AssignVariable
.8f23		60		rts				rts
.8f24						_LetGoProc:
.8f24		4c c4 92	jmp $92c4			jmp 	CallProcedure
.8f27						AssignVariable:
.8f27		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8f29		48		pha				pha 								; save a copy
.8f2a		55 51		eor $51,x			eor 	NSStatus+1,x
.8f2c		29 10		and #$10			and 	#NSBIsString
.8f2e		d0 0b		bne $8f3b			bne 	_ASError
.8f30		68		pla				pla 								; get back
.8f31		29 10		and #$10			and 	#NSBIsString 				; check type
.8f33		d0 03		bne $8f38			bne 	_ASString
.8f35		4c be 9f	jmp $9fbe			jmp 	AssignNumber
.8f38						_ASString:
.8f38		4c 1c a0	jmp $a01c			jmp 	AssignString
.8f3b						_ASError:
.8f3b		4c c2 aa	jmp $aac2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f3e						Command_List:
.8f3e		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8f41		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8f43		20 75 80	jsr $8075			jsr 	SNDCommand
.8f46		b1 30		lda ($30),y			lda 	(codePtr),y
.8f48		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8f4a		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8f4c		f0 72		beq $8fc0			beq 	_CLListProcedure
.8f4e		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f50		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8f52		a9 ff		lda #$ff			lda 	#$FF
.8f54		85 5f		sta $5f				sta 	NSMantissa0+7
.8f56		85 67		sta $67				sta 	NSMantissa1+7
.8f58		b1 30		lda ($30),y			lda 	(codePtr),y
.8f5a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f5c		f0 1a		beq $8f78			beq 	_CLSecond
.8f5e		20 3d 90	jsr $903d			jsr 	CLIsDigit 					; if not digit, list all
.8f61		b0 20		bcs $8f83			bcs 	_CLStart
.8f63		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f65		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.8f68		b1 30		lda ($30),y			lda 	(codePtr),y
.8f6a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f6c		f0 0a		beq $8f78			beq 	_CLSecond 					; if so go get it
.8f6e		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8f70		85 5f		sta $5f				sta 	NSMantissa0+7
.8f72		a5 64		lda $64				lda 	NSMantissa1+4
.8f74		85 67		sta $67				sta 	NSMantissa1+7
.8f76		80 0b		bra $8f83			bra 	_CLStart
.8f78						_CLSecond:
.8f78		c8		iny				iny 								; consume comma
.8f79		20 3d 90	jsr $903d			jsr 	CLIsDigit 					; digit found
.8f7c		b0 05		bcs $8f83			bcs 	_CLStart 					; if not, continue listing
.8f7e		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f80		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.8f83						_CLStart
.8f83		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f85		85 30		sta $30				sta 	codePtr
.8f87		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f89		85 31		sta $31				sta 	codePtr+1
.8f8b						_CLLoop:
.8f8b		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f8d		f0 03		beq $8f92			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f8f		20 34 81	jsr $8134			jsr 	ProcessEvents
.8f92						_NoEvents:
.8f92		d0 27		bne $8fbb			bne 	_CLBreak
.8f94		b2 30		lda ($30)			lda 	(codePtr)
.8f96		f0 20		beq $8fb8			beq 	_CLExit
.8f98		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8f9a		20 2c 90	jsr $902c			jsr 	CLCompareLineNo
.8f9d		90 0c		bcc $8fab			bcc 	_CLNext
.8f9f		a2 07		ldx #$07			ldx 	#7
.8fa1		20 2c 90	jsr $902c			jsr 	CLCompareLineNo
.8fa4		f0 02		beq $8fa8			beq 	_CLDoThisOne
.8fa6		b0 03		bcs $8fab			bcs 	_CLNext
.8fa8						_CLDoThisOne:
.8fa8		20 19 90	jsr $9019			jsr 	CLListOneLine 				; routine to list the current line.
.8fab						_CLNext:
.8fab		18		clc				clc
.8fac		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fae		65 30		adc $30				adc 	codePtr
.8fb0		85 30		sta $30				sta 	codePtr
.8fb2		90 02		bcc $8fb6			bcc 	_CREExit
.8fb4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fb6						_CREExit:
.8fb6		80 d3		bra $8f8b			bra 	_CLLoop
.8fb8						_CLExit:
.8fb8		4c b6 86	jmp $86b6			jmp 	WarmStart
.8fbb						_CLBreak:
.8fbb		a9 01		lda #$01		lda	#1
.8fbd		4c b3 98	jmp $98b3		jmp	ErrorHandler
.8fc0						_CLListProcedure:
.8fc0		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc2		85 38		sta $38				sta 	zTemp1
.8fc4		c8		iny				iny
.8fc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc7		85 39		sta $39				sta 	zTemp1+1
.8fc9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fcb		85 30		sta $30				sta 	codePtr
.8fcd		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fcf		85 31		sta $31				sta 	codePtr+1
.8fd1						_CLLPSearch:
.8fd1		b2 30		lda ($30)			lda 	(codePtr)
.8fd3		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8fd5		f0 e1		beq $8fb8			beq 	_CLExit
.8fd7		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8fd9		b1 30		lda ($30),y			lda 	(codePtr),y
.8fdb		c9 af		cmp #$af			cmp 	#KWD_PROC
.8fdd		d0 0e		bne $8fed			bne 	_CLLPNext
.8fdf		c8		iny				iny 								; check if PROC this.
.8fe0		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe2		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8fe4		d0 07		bne $8fed			bne 	_CLLPNext
.8fe6		c8		iny				iny
.8fe7		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe9		c5 39		cmp $39				cmp 	zTemp1+1
.8feb		f0 0d		beq $8ffa			beq 	_CLLPFound
.8fed						_CLLPNext:
.8fed		18		clc				clc
.8fee		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ff0		65 30		adc $30				adc 	codePtr
.8ff2		85 30		sta $30				sta 	codePtr
.8ff4		90 02		bcc $8ff8			bcc 	_CREExit
.8ff6		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ff8						_CREExit:
.8ff8		80 d7		bra $8fd1			bra 	_CLLPSearch
.8ffa						_CLLPFound:
.8ffa		b2 30		lda ($30)			lda 	(codePtr)
.8ffc		f0 ba		beq $8fb8			beq 	_CLExit
.8ffe		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.9000		b1 30		lda ($30),y			lda 	(codePtr),y
.9002		48		pha				pha
.9003		20 19 90	jsr $9019			jsr 	CLListOneLine 				; list line and go forward
.9006		18		clc				clc
.9007		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9009		65 30		adc $30				adc 	codePtr
.900b		85 30		sta $30				sta 	codePtr
.900d		90 02		bcc $9011			bcc 	_CREExit
.900f		e6 31		inc $31				inc 	codePtr+1 					; carry
.9011						_CREExit:
.9011		68		pla				pla 								; reached ENDPROC ?
.9012		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.9014		d0 e4		bne $8ffa			bne 	_CLLPFound
.9016		4c b6 86	jmp $86b6			jmp 	WarmStart
.9019						CLListOneLine:
.9019		20 58 98	jsr $9858			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.901c		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.901f		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9021		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.9023		20 12 99	jsr $9912			jsr 	PrintStringXA
.9026		a9 0d		lda #$0d			lda 	#13 						; new line
.9028		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.902b		60		rts				rts
.902c						CLCompareLineNo:
.902c		38		sec				sec
.902d		a0 01		ldy #$01			ldy 	#1
.902f		b1 30		lda ($30),y			lda 	(codePtr),y
.9031		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9033		85 36		sta $36				sta 	zTemp0
.9035		c8		iny				iny
.9036		b1 30		lda ($30),y			lda 	(codePtr),y
.9038		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.903a		05 36		ora $36				ora 	zTemp0
.903c		60		rts				rts
.903d						CLIsDigit:
.903d		b1 30		lda ($30),y			lda 	(codePtr),y
.903f		c9 30		cmp #$30			cmp 	#"0"
.9041		90 03		bcc $9046			bcc	 	_CLIDExitFalse
.9043		c9 3a		cmp #$3a			cmp 	#"9"+1
.9045		60		rts				rts
.9046						_CLIDExitFalse:
.9046		38		sec				sec
.9047		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9048						Command_LOCAL:
.9048		a2 00		ldx #$00			ldx 	#0 							; at level 0
.904a		20 56 90	jsr $9056			jsr 	LocaliseNextTerm 			; convert term to a local.
.904d		b1 30		lda ($30),y			lda 	(codePtr),y
.904f		c8		iny				iny
.9050		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9052		f0 f4		beq $9048			beq 	Command_LOCAL 				; if so, localise another variable.
.9054		88		dey				dey 								; unpick pre-get
.9055		60		rts				rts
.9056						LocaliseNextTerm:
.9056		20 07 a2	jsr $a207			jsr 	EvaluateTerm 				; evaluate the term
.9059		b5 50		lda $50,x			lda 	NSStatus,x
.905b		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.905d		f0 5c		beq $90bb			beq		_LNTError
.905f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9061		85 36		sta $36				sta 	zTemp0
.9063		b5 60		lda $60,x			lda 	NSMantissa1,x
.9065		85 37		sta $37				sta  	zTemp0+1
.9067		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.9069		29 10		and #$10			and 	#NSBIsString
.906b		d0 1e		bne $908b			bne 	_LNTPushString
.906d		5a		phy				phy
.906e		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9070						_LNTPushNumLoop:
.9070		b1 36		lda ($36),y			lda		(zTemp0),y
.9072		20 11 b1	jsr $b111			jsr 	StackPushByte
.9075		c8		iny				iny
.9076		c0 05		cpy #$05			cpy 	#5
.9078		d0 f6		bne $9070			bne 	_LNTPushNumLoop
.907a		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.907c		20 11 b1	jsr $b111			jsr 	StackPushByte
.907f		a5 37		lda $37				lda 	zTemp0+1
.9081		20 11 b1	jsr $b111			jsr 	StackPushByte
.9084		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.9086		20 11 b1	jsr $b111			jsr 	StackPushByte
.9089		7a		ply				ply
.908a		60		rts				rts
.908b						_LNTPushString:
.908b		5a		phy				phy
.908c		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.908e		85 38		sta $38				sta 	zTemp1
.9090		a0 01		ldy #$01			ldy 	#1
.9092		b1 36		lda ($36),y			lda 	(zTemp0),y
.9094		85 39		sta $39				sta 	zTemp1+1
.9096		a0 00		ldy #$00			ldy 	#0 							; output string
.9098		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.909a		f0 0a		beq $90a6			beq 	_LNTStringOut
.909c						_LNTPushStrLoop:
.909c		b1 38		lda ($38),y			lda 	(zTemp1),y
.909e		f0 06		beq $90a6			beq 	_LNTStringOut
.90a0		20 11 b1	jsr $b111			jsr 	StackPushByte
.90a3		c8		iny				iny
.90a4		80 f6		bra $909c			bra 	_LNTPushStrLoop
.90a6						_LNTStringOut:
.90a6		98		tya				tya									; output length (chars written).
.90a7		20 11 b1	jsr $b111			jsr 	StackPushByte
.90aa		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.90ac		20 11 b1	jsr $b111			jsr 	StackPushByte
.90af		b5 60		lda $60,x			lda 	NSMantissa1,x
.90b1		20 11 b1	jsr $b111			jsr 	StackPushByte
.90b4		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.90b6		20 11 b1	jsr $b111			jsr 	StackPushByte
.90b9		7a		ply				ply
.90ba		60		rts				rts
.90bb						_LNTError:
.90bb		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.90be						LocalPopValue:
.90be		20 29 b1	jsr $b129			jsr 	StackPopByte
.90c1		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.90c3		d0 17		bne $90dc			bne 	_LPVString
.90c5		20 29 b1	jsr $b129			jsr 	StackPopByte 				; address
.90c8		85 37		sta $37				sta 	zTemp0+1
.90ca		20 29 b1	jsr $b129			jsr 	StackPopByte
.90cd		85 36		sta $36				sta 	zTemp0
.90cf		5a		phy				phy
.90d0		a0 04		ldy #$04			ldy 	#4 							; copy back
.90d2						_LPVNumberCopy:
.90d2		20 29 b1	jsr $b129			jsr 	StackPopByte
.90d5		91 36		sta ($36),y			sta 	(zTemp0),y
.90d7		88		dey				dey
.90d8		10 f8		bpl $90d2			bpl 	_LPVNumberCopy
.90da		7a		ply				ply 								; and complete
.90db		60		rts				rts
.90dc						_LPVString:
.90dc		20 29 b1	jsr $b129			jsr 	StackPopByte 				; address of record copied to zTemp0
.90df		85 37		sta $37				sta 	zTemp0+1
.90e1		20 29 b1	jsr $b129			jsr 	StackPopByte
.90e4		85 36		sta $36				sta 	zTemp0
.90e6		5a		phy				phy
.90e7		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.90e9		85 38		sta $38				sta 	zTemp1
.90eb		a0 01		ldy #$01			ldy 	#1
.90ed		b1 36		lda ($36),y			lda 	(zTemp0),y
.90ef		85 39		sta $39				sta 	zTemp1+1
.90f1		20 29 b1	jsr $b129			jsr 	StackPopByte 				; # chars to get => y
.90f4		a8		tay				tay
.90f5		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.90f7		f0 0e		beq $9107			beq 	_LPVStringCopied
.90f9		a9 00		lda #$00			lda 	#0 							; NULL on end
.90fb		91 38		sta ($38),y			sta 	(zTemp1),y
.90fd						_LPVStringCopy:
.90fd		88		dey				dey
.90fe		30 07		bmi $9107			bmi 	_LPVStringCopied
.9100		20 29 b1	jsr $b129			jsr 	StackPopByte
.9103		91 38		sta ($38),y			sta 	(zTemp1),y
.9105		80 f6		bra $90fd			bra 	_LPVStringCopy
.9107						_LPVStringCopied:
.9107		fa		plx				plx
.9108		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.9109						MCCommand:
.9109		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.910b		48		pha				pha
.910c		64 01		stz $01				stz 	1
.910e		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.9111		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.9113		8d a2 07	sta $07a2			sta 	DMAControlByte
.9116		20 c4 91	jsr $91c4			jsr 	MCPosition 					; start position
.9119		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.911b		20 95 91	jsr $9195			jsr 	MCCopyAddress
.911e		a2 08		ldx #$08			ldx 	#8
.9120		20 95 91	jsr $9195			jsr 	MCCopyAddress
.9123		b1 30		lda ($30),y			lda 	(codePtr),y
.9125		c8		iny				iny
.9126		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.9128		f0 09		beq $9133			beq 	_MCSize1D
.912a		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.912c		f0 11		beq $913f			beq 	_MCRect2D
.912e						_MCSyntax:
.912e		a9 02		lda #$02		lda	#2
.9130		4c b3 98	jmp $98b3		jmp	ErrorHandler
.9133						_MCSize1D:
.9133		a2 00		ldx #$00			ldx 	#0 							; get size
.9135		20 80 a7	jsr $a780			jsr 	EvaluateInteger
.9138		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.913a		20 95 91	jsr $9195			jsr 	MCCopyAddress
.913d		80 24		bra $9163			bra 	_MCDestination
.913f						_MCRect2D:
.913f		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.9141		20 b2 91	jsr $91b2			jsr 	MCEvalCopyData16
.9144		20 a2 98	jsr $98a2			jsr 	CheckComma
.9147		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.9149		20 b2 91	jsr $91b2			jsr 	MCEvalCopyData16
.914c		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.914e		20 aa 98	jsr $98aa			jsr 	CheckNextA
.9151		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.9153		20 b2 91	jsr $91b2			jsr 	MCEvalCopyData16
.9156		a2 12		ldx #$12			ldx 	#$12
.9158		20 b9 91	jsr $91b9			jsr 	MCCopyData16
.915b		ad a2 07	lda $07a2			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.915e		09 02		ora #$02			ora 	#$02
.9160		8d a2 07	sta $07a2			sta 	DMAControlByte
.9163						_MCDestination:
.9163		b1 30		lda ($30),y			lda 	(codePtr),y
.9165		c8		iny				iny
.9166		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.9168		f0 0e		beq $9178			beq 	_MCDestPoke
.916a		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.916c		d0 c0		bne $912e			bne 	_MCSyntax
.916e		20 c4 91	jsr $91c4			jsr 	MCPosition 					; get target address
.9171		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.9173		20 95 91	jsr $9195			jsr 	MCCopyAddress
.9176		80 0e		bra $9186			bra 	_MCDoDMA 					; and we can go.
.9178						_MCDestPoke:
.9178		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; POKE what
.917b		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.917e		ad a2 07	lda $07a2			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.9181		09 04		ora #$04			ora 	#$04
.9183		8d a2 07	sta $07a2			sta 	DMAControlByte
.9186						_MCDoDMA:
.9186		ad a2 07	lda $07a2			lda 	DMAControlByte 				; set the DMA Control byte to go !
.9189		8d 00 df	sta $df00			sta 	$DF00
.918c						_MCWaitBUSD:
.918c		ad 01 df	lda $df01			lda 	$DF01
.918f		30 fb		bmi $918c			bmi 	_MCWaitBUSD
.9191		68		pla				pla 								; restore I/O.
.9192		85 01		sta $01				sta 	1
.9194		60		rts				rts
.9195						MCCopyAddress:
.9195		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.9197		29 fc		and #$fc			and 	#$FC
.9199		05 70		ora $70				ora 	NSMantissa3
.919b		d0 10		bne $91ad			bne 	_MCRange
.919d		a5 58		lda $58				lda 	NSMantissa0
.919f		9d 00 df	sta $df00,x			sta 	$DF00,x
.91a2		a5 60		lda $60				lda 	NSMantissa1
.91a4		9d 01 df	sta $df01,x			sta 	$DF01,x
.91a7		a5 68		lda $68				lda 	NSMantissa2
.91a9		9d 02 df	sta $df02,x			sta 	$DF02,x
.91ac		60		rts				rts
.91ad						_MCRange:
.91ad		a9 04		lda #$04		lda	#4
.91af		4c b3 98	jmp $98b3		jmp	ErrorHandler
.91b2						MCEvalCopyData16:
.91b2		da		phx				phx
.91b3		a2 00		ldx #$00			ldx 	#0
.91b5		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.91b8		fa		plx				plx
.91b9						MCCopyData16:
.91b9		a5 58		lda $58				lda 	NSMantissa0
.91bb		9d 00 df	sta $df00,x			sta 	$DF00,x
.91be		a5 60		lda $60				lda 	NSMantissa1
.91c0		9d 01 df	sta $df01,x			sta 	$DF01,x
.91c3		60		rts				rts
.91c4						MCPosition:
.91c4		a2 00		ldx #$00			ldx 	#0 							; get start address.
.91c6		b1 30		lda ($30),y			lda 	(codePtr),y
.91c8		c9 b8		cmp #$b8			cmp 	#KWD_AT
.91ca		f0 04		beq $91d0			beq 	_MCPAt
.91cc		20 80 a7	jsr $a780			jsr 	EvaluateInteger
.91cf		60		rts				rts
.91d0						_MCPAt:
.91d0		c8		iny				iny
.91d1		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; X position
.91d4		48		pha				pha
.91d5		20 a2 98	jsr $98a2			jsr 	CheckComma
.91d8		e8		inx				inx
.91d9		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; Y position
.91dc		ca		dex				dex
.91dd		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.91df		64 58		stz $58				stz 	NSMantissa0
.91e1		64 68		stz $68				stz 	NSMantissa2
.91e3		64 70		stz $70				stz 	NSMantissa3
.91e5		46 60		lsr $60				lsr 	NSMantissa1
.91e7		66 58		ror $58				ror 	NSMantissa0
.91e9		46 60		lsr $60				lsr 	NSMantissa1
.91eb		66 58		ror $58				ror 	NSMantissa0
.91ed		68		pla				pla
.91ee		18		clc				clc
.91ef		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.91f1		85 58		sta $58				sta 	NSMantissa0
.91f3		a5 60		lda $60				lda 	NSMantissa1
.91f5		65 59		adc $59				adc 	NSMantissa0+1
.91f7		85 60		sta $60				sta 	NSMantissa1
.91f9		90 02		bcc $91fd			bcc 	_MCPNoCarry
.91fb		e6 68		inc $68				inc 	NSMantissa2
.91fd						_MCPNoCarry:
.91fd		ad cb 07	lda $07cb			lda 	gxBasePage
.9200		85 69		sta $69				sta 	NSMantissa2+1
.9202		64 59		stz $59				stz 	NSMantissa0+1
.9204		64 61		stz $61				stz 	NSMantissa1+1
.9206		64 71		stz $71				stz 	NSMantissa3+1
.9208		a2 01		ldx #$01			ldx 	#1
.920a		20 2c a8	jsr $a82c			jsr 	NSMShiftRight
.920d		20 2c a8	jsr $a82c			jsr 	NSMShiftRight
.9210		20 2c a8	jsr $a82c			jsr 	NSMShiftRight
.9213		a2 00		ldx #$00			ldx 	#0
.9215		20 b3 9b	jsr $9bb3			jsr 	AddTopTwoStack
.9218		60		rts				rts
.07a2						DMAControlByte:
>07a2								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/mouse.asm

.9219						MouseStatus:
.9219		a2 00		ldx #$00	        ldx     #0
.921b						_MouseCommandLoop:
.921b		da		phx		        phx                                 ; save slot.
.921c		20 bb 9d	jsr $9dbb	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.921f		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.9221		c9 20		cmp #$20	        cmp     #NSBIsReference
.9223		d0 4d		bne $9272	        bne     _MouseNotRef
.9225		b1 30		lda ($30),y			lda 	(codePtr),y
.9227		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.9229		d0 01		bne $922c	        bne     _MouseNoSkipComma
.922b		c8		iny		        iny
.922c						_MouseNoSkipComma:
.922c		fa		plx		        plx                                 ; restore X
.922d		5a		phy		        phy                                 ; save Y
.922e		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.9230		85 36		sta $36		        sta     zTemp0
.9232		a5 60		lda $60		        lda     NSMantissa1
.9234		85 37		sta $37		        sta     zTemp0+1
.9236		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.9238		a9 00		lda #$00	        lda     #0
.923a		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.923c		88		dey		        dey
.923d		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.923f		88		dey		        dey
.9240		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.9242		88		dey		        dey
.9243		bd 81 06	lda $0681,x	        lda     MouseDeltaX,x
.9246		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.9248		bd 82 06	lda $0682,x	        lda     MouseDeltaX+1,x
.924b		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.924d		10 15		bpl $9264	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.924f		38		sec		        sec                                 ; negate the mantissa 2 bytes
.9250		a9 00		lda #$00	        lda     #0
.9252		f2 36		sbc ($36)	        sbc     (zTemp0)
.9254		92 36		sta ($36)	        sta     (zTemp0)
.9256		a9 00		lda #$00	        lda     #0
.9258		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.925a		91 36		sta ($36),y	        sta     (zTemp0),y
.925c		a0 03		ldy #$03	        ldy     #3
.925e		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.9260		09 80		ora #$80	        ora     #$80
.9262		91 36		sta ($36),y	        sta     (zTemp0),y
.9264						_MouseDataPos:
.9264		7a		ply		        ply                                 ; restore Y.
.9265		9e 81 06	stz $0681,x	        stz     MouseDeltaX,x               ; clear entry in current table
.9268		9e 82 06	stz $0682,x	        stz     MouseDeltaX+1,x
.926b		e8		inx		        inx                                 ; next entry
.926c		e8		inx		        inx
.926d		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.926f		d0 aa		bne $921b	        bne     _MouseCommandLoop
.9271		60		rts		        rts
.9272						_MouseNotRef:
.9272		a9 07		lda #$07		lda	#7
.9274		4c b3 98	jmp $98b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9277						NewCommand:
.9277		20 7d 92	jsr $927d			jsr 	NewProgram 					; does the actual NEW.
.927a		4c b6 86	jmp $86b6			jmp 	WarmStart 					; and warm starts straight away.
.927d						NewProgram:
.927d		20 32 ad	jsr $ad32			jsr 	MemoryNew
.9280		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9283		20 42 97	jsr $9742			jsr 	ClearSystem					; clear everything.
.9286		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.9287						PokeBCommand:
.9287		a9 01		lda #$01			lda 	#1
.9289		80 0c		bra $9297			bra 	PokeCommand
.928b						PokeWCommand:
.928b		a9 02		lda #$02			lda 	#2
.928d		80 08		bra $9297			bra 	PokeCommand
.928f						PokeLCommand:
.928f		a9 03		lda #$03			lda 	#3
.9291		80 04		bra $9297			bra 	PokeCommand
.9293						PokeDCommand:
.9293		a9 04		lda #$04			lda 	#4
.9295		80 00		bra $9297			bra 	PokeCommand
.9297						PokeCommand:
.9297		48		pha				pha 								; save count on stack
.9298		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.929a		20 93 a7	jsr $a793			jsr		Evaluate16BitInteger 		; address
.929d		20 a2 98	jsr $98a2			jsr 	CheckComma
.92a0		e8		inx				inx
.92a1		20 80 a7	jsr $a780			jsr		EvaluateInteger 			; data
.92a4		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.92a6		85 36		sta $36				sta 	zTemp0
.92a8		a5 60		lda $60				lda 	NSMantissa1
.92aa		85 37		sta $37				sta 	zTemp0+1
.92ac		68		pla				pla 								; count -> zTemp1
.92ad		85 38		sta $38				sta 	zTemp1
.92af		5a		phy				phy 								; save Y position.
.92b0		a0 00		ldy #$00			ldy 	#0 							; index to write
.92b2		a2 00		ldx #$00			ldx 	#0 							; index to read
.92b4						_PCLoop:
.92b4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.92b6		91 36		sta ($36),y			sta 	(zTemp0),y
.92b8		c8		iny				iny 								; next byte to write
.92b9		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.92ba		18		clc				clc
.92bb		69 08		adc #$08			adc 	#MathStackSize
.92bd		aa		tax				tax
.92be		c6 38		dec $38				dec 	zTemp1 						; done them all
.92c0		d0 f2		bne $92b4			bne 	_PCLoop
.92c2		7a		ply				ply 								; restore position.
.92c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.92c4						CallProcedure:
.92c4		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.92c6		b1 30		lda ($30),y			lda 	(codePtr),y
.92c8		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.92ca		f0 0c		beq $92d8			beq 	_CPEndParam
.92cc						_CPParamLoop:
.92cc		20 58 a7	jsr $a758			jsr 	EvaluateValue 				; get parameter onto stack
.92cf		e8		inx				inx 								; bump next stack
.92d0		b1 30		lda ($30),y			lda 	(codePtr),y
.92d2		c8		iny				iny
.92d3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.92d5		f0 f5		beq $92cc			beq 	_CPParamLoop
.92d7		88		dey				dey 								; unpick.
.92d8						_CPEndParam:
.92d8		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.92db		c8		iny				iny									; skip right bracket
.92dc		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.92de		20 32 b1	jsr $b132			jsr 	StackOpen
.92e1		20 77 b1	jsr $b177			jsr 	STKSaveCodePosition 		; save loop position
.92e4		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.92e6		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.92e8		a5 60		lda $60				lda 	NSMantissa1
.92ea		85 37		sta $37				sta 	zTemp0+1
.92ec		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.92ee		b2 36		lda ($36)			lda 	(zTemp0)
.92f0		85 30		sta $30				sta 	safePtr
.92f2		b1 36		lda ($36),y			lda 	(zTemp0),y
.92f4		85 31		sta $31				sta 	safePtr+1
.92f6		c8		iny				iny
.92f7		b1 36		lda ($36),y			lda 	(zTemp0),y
.92f9		85 32		sta $32				sta 	safePtr+2
.92fb		c8		iny				iny
.92fc		b1 36		lda ($36),y			lda 	(zTemp0),y
.92fe		85 33		sta $33				sta 	safePtr+3
.9300		c8		iny				iny 								; get Y offset -> Y
.9301		b1 36		lda ($36),y			lda 	(zTemp0),y
.9303		a8		tay				tay
.9304		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9306		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9309		f0 13		beq $931e			beq 	_ParamExit 					; if so, exit.
.930b						_ParamExtract:
.930b		ca		dex				dex 								; put a local term on the level before
.930c		20 56 90	jsr $9056			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.930f		20 27 8f	jsr $8f27			jsr 	AssignVariable 				; assign stacked value to the variable.
.9312		e8		inx				inx 								; advance to next parameter to do.
.9313		e8		inx				inx
.9314		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9317		f0 05		beq $931e			beq 	_ParamExit
.9319		20 a2 98	jsr $98a2			jsr 	CheckComma 					; comma seperating parameters
.931c		80 ed		bra $930b			bra 	_ParamExtract
.931e						_ParamExit:
.931e		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; check )
.9321		60		rts				rts 								; and continue from here
.9322						Command_ENDPROC:
.9322		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9324		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9326		20 5f b1	jsr $b15f			jsr 	StackCheckFrame
.9329		20 88 b1	jsr $b188			jsr 	STKLoadCodePosition 		; restore code position
.932c		20 51 b1	jsr $b151			jsr 	StackClose
.932f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9330						Command_Read:
.9330		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9332		20 07 a2	jsr $a207			jsr 	EvaluateTerm
.9335		b5 50		lda $50,x			lda 	NSStatus,x
.9337		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9339		f0 4f		beq $938a			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.933b		20 d3 93	jsr $93d3			jsr 	SwapDataCodePtrs 			; swap code and data
.933e		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9341		d0 25		bne $9368			bne 	_CRContinueData  			; forward for the next one.
.9343		b2 30		lda ($30)			lda 	(codePtr)
.9345		f0 1c		beq $9363			beq 	_CRNoData
.9347						_CRKeepSearching:
.9347		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.9349		a2 80		ldx #$80			ldx 	#KWC_EOL
.934b		20 f5 97	jsr $97f5			jsr 	ScanForward
.934e		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.9350		f0 16		beq $9368			beq 	_CRHaveData 				; found it
.9352		18		clc				clc
.9353		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9355		65 30		adc $30				adc 	codePtr
.9357		85 30		sta $30				sta 	codePtr
.9359		90 02		bcc $935d			bcc 	_CREExit
.935b		e6 31		inc $31				inc 	codePtr+1 					; carry
.935d						_CREExit:
.935d		a0 03		ldy #$03			ldy 	#3 							; start of line.
.935f		b2 30		lda ($30)			lda 	(codePtr)
.9361		d0 e4		bne $9347			bne 	_CRKeepSearching
.9363						_CRNoData:
.9363		a9 0b		lda #$0b		lda	#11
.9365		4c b3 98	jmp $98b3		jmp	ErrorHandler
.9368						_CRHaveData:
.9368						_CRContinueData:
.9368		a2 01		ldx #$01			ldx 	#1
.936a		20 58 a7	jsr $a758			jsr 	EvaluateValue 				; evaluate value into slot # 1
.936d		ca		dex				dex
.936e		20 27 8f	jsr $8f27			jsr		AssignVariable 				; do the assignment
.9371		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.9374		b1 30		lda ($30),y			lda 	(codePtr),y
.9376		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.9378		d0 04		bne $937e			bne 	_CRSwapBack
.937a		c8		iny				iny 								; consume comma
.937b		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.937e						_CRSwapBack:
.937e		20 d3 93	jsr $93d3			jsr 	SwapDataCodePtrs			; swap them back.
.9381		b1 30		lda ($30),y			lda 	(codePtr),y
.9383		c8		iny				iny
.9384		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9386		f0 a8		beq $9330			beq 	Command_Read 				; if so go round again.
.9388		88		dey				dey 								; unpick get.
.9389		60		rts				rts
.938a						_CRSyntax:
.938a		4c b8 aa	jmp $aab8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.938d						RemCommand:
.938d		b1 30		lda ($30),y			lda 	(codePtr),y
.938f		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9391		d0 06		bne $9399			bne 	_RMExit
.9393		c8		iny				iny 								; point to offset
.9394		98		tya				tya 								; A = offset position
.9395		38		sec				sec 								; add size +1 hence SEC
.9396		71 30		adc ($30),y			adc 	(codePtr),y
.9398		a8		tay				tay 								; make current position.
.9399						_RMExit:
.9399		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.939a						Command_REPEAT:
.939a		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.939c		20 32 b1	jsr $b132			jsr 	StackOpen
.939f		20 77 b1	jsr $b177			jsr 	STKSaveCodePosition 		; save loop position
.93a2		60		rts				rts
.93a3						Command_UNTIL:
.93a3		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.93a5		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.93a7		20 5f b1	jsr $b15f			jsr 	StackCheckFrame
.93aa		a2 00		ldx #$00			ldx 	#0
.93ac		20 61 a7	jsr $a761			jsr 	EvaluateNumber 				; work out the number
.93af		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; check if zero
.93b2		f0 04		beq $93b8			beq 	_CULoopBack 				; if so keep looping
.93b4		20 51 b1	jsr $b151			jsr 	StackClose		 			; return
.93b7		60		rts				rts
.93b8						_CULoopBack:
.93b8		20 88 b1	jsr $b188			jsr 	STKLoadCodePosition 		; loop back
.93bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.93bc						Command_Restore:
.93bc		20 d3 93	jsr $93d3			jsr 	SwapDataCodePtrs 			; swap code and data
.93bf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93c1		85 30		sta $30				sta 	codePtr
.93c3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93c5		85 31		sta $31				sta 	codePtr+1
.93c7		20 d3 93	jsr $93d3			jsr 	SwapDataCodePtrs 			; put them back
.93ca		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.93cc		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.93cf		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.93d2		60		rts				rts
.93d3						SwapDataCodePtrs:
.93d3		da		phx				phx
.93d4		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.93d6						_SDCPLoop:
.93d6		b5 30		lda $30,x			lda 	safePtr,x
.93d8		48		pha				pha
.93d9		bd 13 04	lda $0413,x			lda 	dataPointer,x
.93dc		95 30		sta $30,x			sta 	safePtr,x
.93de		68		pla				pla
.93df		9d 13 04	sta $0413,x			sta 	dataPointer,x
.93e2		ca		dex				dex
.93e3		10 f1		bpl $93d6			bpl 	_SDCPLoop
.93e5		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.93e8		8c 17 04	sty $0417			sty 	dataPointer+4
.93eb		a8		tay				tay
.93ec		fa		plx				plx
.93ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.93ee						EOLCommand:
.93ee		18		clc				clc
.93ef		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.93f1		65 30		adc $30				adc 	codePtr
.93f3		85 30		sta $30				sta 	codePtr
.93f5		90 02		bcc $93f9			bcc 	_CREExit
.93f7		e6 31		inc $31				inc 	codePtr+1 					; carry
.93f9						_CREExit:
.93f9		80 18		bra $9413			bra 	RunNewLine
.93fb						CommandRUNOptLoad:
.93fb		b1 30		lda ($30),y			lda 	(codePtr),y
.93fd		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.93ff		f0 07		beq $9408			beq 	RunCurrentProgram
.9401		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9403		f0 03		beq $9408			beq 	RunCurrentProgram
.9405		20 a4 8a	jsr $8aa4			jsr 	LoadFile 					; load expected name file.
.9408						RunCurrentProgram:
.9408		20 42 97	jsr $9742			jsr 	ClearSystem 				; clear variable/stacks/etc.
.940b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.940d		85 30		sta $30				sta 	codePtr
.940f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9411		85 31		sta $31				sta 	codePtr+1
.9413						RunNewLine:
.9413		b2 30		lda ($30)			lda 	(codePtr)
.9415		f0 74		beq $948b			beq 	CRNoProgram         		; no then END.
.9417		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9419		9a		txs				txs
.941a						RUNCodePointerLine:
.941a		a0 02		ldy #$02			ldy 	#2 							; start of program
.941c						_CRIncMainLoop:
.941c		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.941e		f0 03		beq $9423			beq 	_NoEvents					; if zero, skip with Z flag set.
.9420		20 34 81	jsr $8134			jsr 	ProcessEvents
.9423						_NoEvents:
.9423		d0 61		bne $9486			bne 	_CRBreak
.9425		a5 01		lda $01				lda 	1 							; save I/O 0
.9427		48		pha				pha
.9428		64 01		stz $01				stz 	1 							; access I/O Page 0
.942a		38		sec				sec 								; calculate timer - LastTick
.942b		ad 59 d6	lda $d659			lda 	$D659
.942e		cd 5e 06	cmp $065e			cmp 	LastTick
.9431		f0 06		beq $9439			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9433		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.9436		20 96 81	jsr $8196			jsr 	TickHandler 							; go do the code.
.9439						_NoFireTick:
.9439		68		pla				pla 								; restore I/O 0
.943a		85 01		sta $01				sta 	1
.943c						_CRNoBreakCheck:
.943c		c8		iny				iny									; next token
.943d						_CRMainLoop:
.943d		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9440		b1 30		lda ($30),y			lda 	(codePtr),y
.9442		10 10		bpl $9454			bpl 	_CRNotKeyword				; not a token.
.9444		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9446		b0 04		bcs $944c			bcs 	_CRIsKeyword
.9448		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.944a		b0 34		bcs $9480			bcs		_CRSyntaxError
.944c						_CRIsKeyword:
.944c		c8		iny				iny 								; consume command
.944d		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.944e		aa		tax				tax 								; put in X for vector jump
.944f		20 83 94	jsr $9483			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9452		80 e9		bra $943d			bra 	_CRMainLoop 				; and loop round
.9454						_CRNotKeyword:
.9454		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9456		f0 c4		beq $941c			beq 	_CRIncMainLoop
.9458		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.945a		90 05		bcc $9461			bcc 	_CRNotVariable
.945c						_CRGoLet:
.945c		20 ee 8e	jsr $8eee			jsr 	LetCommand
.945f		80 dc		bra $943d			bra 	_CRMainLoop
.9461						_CRNotVariable:
.9461		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.9463		f0 f7		beq $945c			beq 	_CRGoLet
.9465		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9467		f0 f3		beq $945c			beq 	_CRGoLet
.9469		c9 21		cmp #$21			cmp 	#KWD_PLING
.946b		f0 ef		beq $945c			beq 	_CRGoLet
.946d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.946f		f0 09		beq $947a			beq 	_CRGoRem
.9471		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9473		d0 0b		bne $9480			bne 	_CRSyntaxError
.9475		20 ff 84	jsr $84ff			jsr 	LabelHere
.9478		80 c3		bra $943d			bra 	_CRMainLoop
.947a						_CRGoRem:
.947a		c8		iny				iny
.947b		20 8d 93	jsr $938d			jsr 	RemCommand
.947e		80 bd		bra $943d			bra 	_CRMainLoop
.9480						_CRSyntaxError:
.9480		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.9483						_CRCallVector0:
.9483		7c 22 95	jmp ($9522,x)			jmp 	(VectorSet0,x)
.9486						_CRBreak:
.9486		a9 01		lda #$01		lda	#1
.9488		4c b3 98	jmp $98b3		jmp	ErrorHandler
.948b						CRNoProgram:
.948b		4c 38 88	jmp $8838			jmp 	EndCommand
.948e						Shift1Command:
.948e		b1 30		lda ($30),y			lda 	(codePtr),y
.9490		c8		iny				iny
.9491		0a		asl a				asl 	a
.9492		aa		tax				tax
.9493		7c da 95	jmp ($95da,x)			jmp 	(VectorSet1,x)
.9496						Shift2Command:
.9496		b1 30		lda ($30),y			lda 	(codePtr),y
.9498		c8		iny				iny
.9499		0a		asl a				asl 	a
.949a		aa		tax				tax
.949b		7c 28 96	jmp ($9628,x)			jmp 	(VectorSet2,x)
.949e						Unused1:
.949e						Unused2:
.949e						Unused3:
.949e						Unused4:
.949e		4c b8 aa	jmp $aab8			jmp 	SyntaxError
>94a1								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.94a2						VectorSetPunc:
>94a2		71 9b					.word	ShiftLeft                        ; $00 <<
>94a4		5c 99					.word	BinaryCompareLessEqual           ; $01 <=
>94a6		52 99					.word	BinaryCompareNotEqual            ; $02 <>
>94a8		b8 aa					.word	SyntaxError                      ; $03 !!3
>94aa		b8 aa					.word	SyntaxError                      ; $04 ><
>94ac		66 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>94ae		74 9b					.word	ShiftRight                       ; $06 >>
>94b0		b8 aa					.word	SyntaxError                      ; $07 !!7
>94b2		b8 aa					.word	SyntaxError                      ; $08 !!8
>94b4		b8 aa					.word	SyntaxError                      ; $09 !!9
>94b6		b8 aa					.word	SyntaxError                      ; $0a !!10
>94b8		b8 aa					.word	SyntaxError                      ; $0b !!11
>94ba		b8 aa					.word	SyntaxError                      ; $0c !!12
>94bc		b8 aa					.word	SyntaxError                      ; $0d !!13
>94be		b8 aa					.word	SyntaxError                      ; $0e !!14
>94c0		b8 aa					.word	SyntaxError                      ; $0f !!15
>94c2		b8 aa					.word	SyntaxError                      ; $10 @
>94c4		b8 aa					.word	SyntaxError                      ; $11 !!17
>94c6		b8 aa					.word	SyntaxError                      ; $12 !!18
>94c8		b8 aa					.word	SyntaxError                      ; $13 [
>94ca		1d 9a					.word	IntegerDivide                    ; $14 \
>94cc		b8 aa					.word	SyntaxError                      ; $15 ]
>94ce		af 9c					.word	EorInteger                       ; $16 ^
>94d0		b8 aa					.word	SyntaxError                      ; $17 _
>94d2		b8 aa					.word	SyntaxError                      ; $18 `
>94d4		b8 aa					.word	SyntaxError                      ; $19 !!25
>94d6		b8 aa					.word	SyntaxError                      ; $1a !!26
>94d8		b8 aa					.word	SyntaxError                      ; $1b {
>94da		7a 9c					.word	OraInteger                       ; $1c |
>94dc		b8 aa					.word	SyntaxError                      ; $1d }
>94de		b8 aa					.word	SyntaxError                      ; $1e ~
>94e0		b8 aa					.word	SyntaxError                      ; $1f <7F>
>94e2		b8 aa					.word	SyntaxError                      ; $20
>94e4		e4 9c					.word	WordIndirect                     ; $21 !
>94e6		b8 aa					.word	SyntaxError                      ; $22 "
>94e8		b8 aa					.word	SyntaxError                      ; $23 #
>94ea		b8 aa					.word	SyntaxError                      ; $24 $
>94ec		5e 9a					.word	IntegerModulus                   ; $25 %
>94ee		45 9c					.word	AndInteger                       ; $26 &
>94f0		b8 aa					.word	SyntaxError                      ; $27 '
>94f2		b8 aa					.word	SyntaxError                      ; $28 (
>94f4		b8 aa					.word	SyntaxError                      ; $29 )
>94f6		cc 9a					.word	MulInteger                       ; $2a *
>94f8		e7 9b					.word	AddInteger                       ; $2b +
>94fa		b8 aa					.word	SyntaxError                      ; $2c ,
>94fc		20 9c					.word	SubInteger                       ; $2d -
>94fe		b8 aa					.word	SyntaxError                      ; $2e .
>9500		9e 9e					.word	FDivideCommand                   ; $2f /
>9502		b8 aa					.word	SyntaxError                      ; $30 0
>9504		b8 aa					.word	SyntaxError                      ; $31 1
>9506		b8 aa					.word	SyntaxError                      ; $32 2
>9508		b8 aa					.word	SyntaxError                      ; $33 3
>950a		b8 aa					.word	SyntaxError                      ; $34 4
>950c		b8 aa					.word	SyntaxError                      ; $35 5
>950e		b8 aa					.word	SyntaxError                      ; $36 6
>9510		b8 aa					.word	SyntaxError                      ; $37 7
>9512		b8 aa					.word	SyntaxError                      ; $38 8
>9514		b8 aa					.word	SyntaxError                      ; $39 9
>9516		b8 aa					.word	SyntaxError                      ; $3a :
>9518		b8 aa					.word	SyntaxError                      ; $3b ;
>951a		3e 99					.word	BinaryCompareLess                ; $3c <
>951c		34 99					.word	BinaryCompareEqual               ; $3d =
>951e		48 99					.word	BinaryCompareGreater             ; $3e >
>9520		06 9d					.word	ByteIndirect                     ; $3f ?
.9522						VectorSet0:
>9522		ee 93					.word	EOLCommand                       ; $80 !0:EOF
>9524		8e 94					.word	Shift1Command                    ; $81 !1:SH1
>9526		96 94					.word	Shift2Command                    ; $82 !2:SH2
>9528		88 a3					.word	AbsUnary                         ; $83 ABS(
>952a		96 a3					.word	AllocUnary                       ; $84 ALLOC(
>952c		06 a4					.word	AscUnary                         ; $85 ASC(
>952e		57 a5					.word	ChrUnary                         ; $86 CHR$(
>9530		3b 88					.word	UnaryEvent                       ; $87 EVENT(
>9532		30 99					.word	UnaryFalse                       ; $88 FALSE
>9534		13 a4					.word	FracUnary                        ; $89 FRAC(
>9536		bc a8					.word	ChrGet                           ; $8a GET$(
>9538		98 a8					.word	AscGet                           ; $8b GET(
>953a		42 a8					.word	UnaryGetDate                     ; $8c GETDATE$(
>953c		3e a8					.word	UnaryGetTime                     ; $8d GETTIME$(
>953e		d3 af					.word	UnaryHit                         ; $8e HIT(
>9540		c3 a8					.word	ChrInkey                         ; $8f INKEY$(
>9542		b1 a8					.word	AscInkey                         ; $90 INKEY(
>9544		28 a4					.word	IntUnary                         ; $91 INT(
>9546		16 a5					.word	IsValUnary                       ; $92 ISVAL(
>9548		69 a5					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>954a		8d a5					.word	ItemGetUnary                     ; $94 ITEMGET$(
>954c		dc 8e					.word	UnaryJoyB                        ; $95 JOYB(
>954e		b5 8e					.word	UnaryJoyX                        ; $96 JOYX(
>9550		b8 8e					.word	UnaryJoyY                        ; $97 JOYY(
>9552		dc a8					.word	KeyDown                          ; $98 KEYDOWN(
>9554		cc a6					.word	Unary_Left                       ; $99 LEFT$(
>9556		39 a4					.word	LenUnary                         ; $9a LEN(
>9558		57 a4					.word	Unary_Max                        ; $9b MAX(
>955a		ee a6					.word	Unary_Mid                        ; $9c MID$(
>955c		53 a4					.word	Unary_Min                        ; $9d MIN(
>955e		a2 a4					.word	Unary_Not                        ; $9e NOT(
>9560		b5 a4					.word	PeekByteUnary                    ; $9f PEEK(
>9562		c1 a4					.word	PeekDUnary                       ; $a0 PEEKD(
>9564		bd a4					.word	PeekLUnary                       ; $a1 PEEKL(
>9566		b9 a4					.word	PeekWUnary                       ; $a2 PEEKW(
>9568		8f b0					.word	UnaryPlaying                     ; $a3 PLAYING(
>956a		f6 a8					.word	Unary_Random                     ; $a4 RANDOM(
>956c		d9 a6					.word	Unary_Right                      ; $a5 RIGHT$(
>956e		10 a9					.word	Unary_Rnd                        ; $a6 RND(
>9570		ee a4					.word	SgnUnary                         ; $a7 SGN(
>9572		0b a6					.word	SpcUnary                         ; $a8 SPC(
>9574		26 a6					.word	Unary_Str                        ; $a9 STR$(
>9576		29 97					.word	UnaryTimer                       ; $aa TIMER(
>9578		25 99					.word	UnaryTrue                        ; $ab TRUE
>957a		0c a5					.word	ValUnary                         ; $ac VAL(
>957c		4e 8c					.word	ForCommand                       ; $ad FOR
>957e		91 8d					.word	IfCommand                        ; $ae IF
>9580		9e 94					.word	Unused1                          ; $af PROC
>9582		9a 93					.word	Command_REPEAT                   ; $b0 REPEAT
>9584		6b 98					.word	Command_WHILE                    ; $b1 WHILE
>9586		ba 8d					.word	EndIf                            ; $b2 ENDIF
>9588		22 93					.word	Command_ENDPROC                  ; $b3 ENDPROC
>958a		00 8d					.word	NextCommand                      ; $b4 NEXT
>958c		9e 94					.word	Unused4                          ; $b5 THEN
>958e		a3 93					.word	Command_UNTIL                    ; $b6 UNTIL
>9590		8c 98					.word	Command_WEND                     ; $b7 WEND
>9592		b8 aa					.word	SyntaxError                      ; $b8 AT
>9594		b8 aa					.word	SyntaxError                      ; $b9 BY
>9596		1a 87					.word	CallCommand                      ; $ba CALL
>9598		87 ad					.word	CircleCommand                    ; $bb CIRCLE
>959a		b8 aa					.word	SyntaxError                      ; $bc CLEAR
>959c		b8 aa					.word	SyntaxError                      ; $bd COLOR
>959e		b8 aa					.word	SyntaxError                      ; $be COLOUR
>95a0		61 87					.word	Command_Data                     ; $bf DATA
>95a2		69 87					.word	DimCommand                       ; $c0 DIM
>95a4		9e 94					.word	Unused3                          ; $c1 DOWNTO
>95a6		b3 8d					.word	ElseCode                         ; $c2 ELSE
>95a8		b8 aa					.word	SyntaxError                      ; $c3 FROM
>95aa		a6 af					.word	GfxCommand                       ; $c4 GFX
>95ac		b8 aa					.word	SyntaxError                      ; $c5 HERE
>95ae		b0 ad					.word	ImageCommand                     ; $c6 IMAGE
>95b0		ee 8e					.word	LetCommand                       ; $c7 LET
>95b2		02 ae					.word	LineCommand                      ; $c8 LINE
>95b4		48 90					.word	Command_LOCAL                    ; $c9 LOCAL
>95b6		09 91					.word	MCCommand                        ; $ca MEMCOPY
>95b8		b8 aa					.word	SyntaxError                      ; $cb OFF
>95ba		b8 aa					.word	SyntaxError                      ; $cc ON
>95bc		b8 aa					.word	SyntaxError                      ; $cd OUTLINE
>95be		f7 af					.word	PaletteCommand                   ; $ce PALETTE
>95c0		fb ad					.word	PlotCommand                      ; $cf PLOT
>95c2		87 92					.word	PokeBCommand                     ; $d0 POKE
>95c4		93 92					.word	PokeDCommand                     ; $d1 POKED
>95c6		8f 92					.word	PokeLCommand                     ; $d2 POKEL
>95c8		8b 92					.word	PokeWCommand                     ; $d3 POKEW
>95ca		30 93					.word	Command_Read                     ; $d4 READ
>95cc		83 ad					.word	RectangleCommand                 ; $d5 RECT
>95ce		8d 93					.word	RemCommand                       ; $d6 REM
>95d0		b8 aa					.word	SyntaxError                      ; $d7 SOLID
>95d2		ab b0					.word	SoundCommand                     ; $d8 SOUND
>95d4		92 ad					.word	SpriteCommand                    ; $d9 SPRITE
>95d6		cc ad					.word	TextCommand                      ; $da TEXT
>95d8		9e 94					.word	Unused2                          ; $db TO
.95da						VectorSet1:
>95da		b8 aa					.word	SyntaxError                      ; $80 !0:EOF
>95dc		b8 aa					.word	SyntaxError                      ; $81 !1:SH1
>95de		b8 aa					.word	SyntaxError                      ; $82 !2:SH2
>95e0		ee 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>95e2		0a 87					.word	AssertCommand                    ; $84 ASSERT
>95e4		46 af					.word	BitmapCtrl                       ; $85 BITMAP
>95e6		98 88					.word	Command_BLoad                    ; $86 BLOAD
>95e8		44 89					.word	Command_BSave                    ; $87 BSAVE
>95ea		37 b0					.word	ClearScreen                      ; $88 CLS
>95ec		c0 8d					.word	Command_CPrint                   ; $89 CPRINT
>95ee		c7 89					.word	Command_Dir                      ; $8a DIR
>95f0		26 88					.word	BootDOS                          ; $8b DOS
>95f2		97 8a					.word	Command_Drive                    ; $8c DRIVE
>95f4		38 88					.word	EndCommand                       ; $8d END
>95f6		63 b0					.word	Explode                          ; $8e EXPLODE
>95f8		b8 aa					.word	SyntaxError                      ; $8f GO
>95fa		59 8d					.word	Command_GOSUB                    ; $90 GOSUB
>95fc		77 8d					.word	GotoCommand                      ; $91 GOTO
>95fe		b8 aa					.word	SyntaxError                      ; $92 HIMEM
>9600		bb 8d					.word	Command_Input                    ; $93 INPUT
>9602		3e 8f					.word	Command_List                     ; $94 LIST
>9604		9e 8a					.word	Command_Load                     ; $95 LOAD
>9606		19 92					.word	MouseStatus                      ; $96 MOUSE
>9608		77 92					.word	NewCommand                       ; $97 NEW
>960a		3f b0					.word	PingCommand                      ; $98 PING
>960c		c7 8d					.word	Command_Print                    ; $99 PRINT
>960e		bc 93					.word	Command_Restore                  ; $9a RESTORE
>9610		69 8d					.word	Command_RETURN                   ; $9b RETURN
>9612		fb 93					.word	CommandRUNOptLoad                ; $9c RUN
>9614		70 8b					.word	Command_Save                     ; $9d SAVE
>9616		b0 96					.word	CommandSetDate                   ; $9e SETDATE
>9618		b4 96					.word	CommandSetTime                   ; $9f SETTIME
>961a		57 b0					.word	ShootCommand                     ; $a0 SHOOT
>961c		8b af					.word	SpritesCtrl                      ; $a1 SPRITES
>961e		24 97					.word	StopCommand                      ; $a2 STOP
>9620		f4 8b					.word	Command_VERIFY                   ; $a3 VERIFY
>9622		58 87					.word	XGoCommand                       ; $a4 XGO
>9624		4f 87					.word	XLoadCommand                     ; $a5 XLOAD
>9626		4b b0					.word	ZapCommand                       ; $a6 ZAP
.9628						VectorSet2:
>9628		b8 aa					.word	SyntaxError                      ; $80 !0:EOF
>962a		b8 aa					.word	SyntaxError                      ; $81 !1:SH1
>962c		b8 aa					.word	SyntaxError                      ; $82 !2:SH2
>962e		77 a9					.word	Assemble_adc                     ; $83 ADC
>9630		6f a9					.word	Assemble_and                     ; $84 AND
>9632		8b a9					.word	Assemble_asl                     ; $85 ASL
>9634		f5 a9					.word	Assemble_bcc                     ; $86 BCC
>9636		f9 a9					.word	Assemble_bcs                     ; $87 BCS
>9638		01 aa					.word	Assemble_beq                     ; $88 BEQ
>963a		b8 a9					.word	Assemble_bit                     ; $89 BIT
>963c		e9 a9					.word	Assemble_bmi                     ; $8a BMI
>963e		fd a9					.word	Assemble_bne                     ; $8b BNE
>9640		e5 a9					.word	Assemble_bpl                     ; $8c BPL
>9642		05 aa					.word	Assemble_bra                     ; $8d BRA
>9644		09 aa					.word	Assemble_brk                     ; $8e BRK
>9646		ed a9					.word	Assemble_bvc                     ; $8f BVC
>9648		f1 a9					.word	Assemble_bvs                     ; $90 BVS
>964a		11 aa					.word	Assemble_clc                     ; $91 CLC
>964c		65 aa					.word	Assemble_cld                     ; $92 CLD
>964e		25 aa					.word	Assemble_cli                     ; $93 CLI
>9650		55 aa					.word	Assemble_clv                     ; $94 CLV
>9652		83 a9					.word	Assemble_cmp                     ; $95 CMP
>9654		cc a9					.word	Assemble_cpx                     ; $96 CPX
>9656		c7 a9					.word	Assemble_cpy                     ; $97 CPY
>9658		a9 a9					.word	Assemble_dec                     ; $98 DEC
>965a		61 aa					.word	Assemble_dex                     ; $99 DEX
>965c		3d aa					.word	Assemble_dey                     ; $9a DEY
>965e		73 a9					.word	Assemble_eor                     ; $9b EOR
>9660		ae a9					.word	Assemble_inc                     ; $9c INC
>9662		71 aa					.word	Assemble_inx                     ; $9d INX
>9664		5d aa					.word	Assemble_iny                     ; $9e INY
>9666		e0 a9					.word	Assemble_jmp                     ; $9f JMP
>9668		db a9					.word	Assemble_jsr                     ; $a0 JSR
>966a		7f a9					.word	Assemble_lda                     ; $a1 LDA
>966c		a4 a9					.word	Assemble_ldx                     ; $a2 LDX
>966e		c2 a9					.word	Assemble_ldy                     ; $a3 LDY
>9670		95 a9					.word	Assemble_lsr                     ; $a4 LSR
>9672		75 aa					.word	Assemble_nop                     ; $a5 NOP
>9674		6b a9					.word	Assemble_ora                     ; $a6 ORA
>9676		21 aa					.word	Assemble_pha                     ; $a7 PHA
>9678		0d aa					.word	Assemble_php                     ; $a8 PHP
>967a		69 aa					.word	Assemble_phx                     ; $a9 PHX
>967c		29 aa					.word	Assemble_phy                     ; $aa PHY
>967e		31 aa					.word	Assemble_pla                     ; $ab PLA
>9680		15 aa					.word	Assemble_plp                     ; $ac PLP
>9682		7d aa					.word	Assemble_plx                     ; $ad PLX
>9684		39 aa					.word	Assemble_ply                     ; $ae PLY
>9686		90 a9					.word	Assemble_rol                     ; $af ROL
>9688		9a a9					.word	Assemble_ror                     ; $b0 ROR
>968a		1d aa					.word	Assemble_rti                     ; $b1 RTI
>968c		2d aa					.word	Assemble_rts                     ; $b2 RTS
>968e		87 a9					.word	Assemble_sbc                     ; $b3 SBC
>9690		19 aa					.word	Assemble_sec                     ; $b4 SEC
>9692		79 aa					.word	Assemble_sed                     ; $b5 SED
>9694		35 aa					.word	Assemble_sei                     ; $b6 SEI
>9696		7b a9					.word	Assemble_sta                     ; $b7 STA
>9698		6d aa					.word	Assemble_stp                     ; $b8 STP
>969a		9f a9					.word	Assemble_stx                     ; $b9 STX
>969c		bd a9					.word	Assemble_sty                     ; $ba STY
>969e		b3 a9					.word	Assemble_stz                     ; $bb STZ
>96a0		51 aa					.word	Assemble_tax                     ; $bc TAX
>96a2		4d aa					.word	Assemble_tay                     ; $bd TAY
>96a4		d6 a9					.word	Assemble_trb                     ; $be TRB
>96a6		d1 a9					.word	Assemble_tsb                     ; $bf TSB
>96a8		59 aa					.word	Assemble_tsx                     ; $c0 TSX
>96aa		41 aa					.word	Assemble_txa                     ; $c1 TXA
>96ac		49 aa					.word	Assemble_txs                     ; $c2 TXS
>96ae		45 aa					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.96b0						CommandSetDate:
.96b0		a9 03		lda #$03			lda 	#3
.96b2		80 02		bra $96b6			bra 	CSDTMain
.96b4						CommandSetTime:
.96b4		a9 00		lda #$00			lda 	#0
.96b6						CSDTMain:
.96b6		48		pha				pha 								; save table offsets 0 or 3
.96b7		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.96b9		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.96bc		20 a2 98	jsr $98a2			jsr 	CheckComma
.96bf		e8		inx				inx
.96c0		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.96c3		20 a2 98	jsr $98a2			jsr 	CheckComma
.96c6		e8		inx				inx
.96c7		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.96ca		68		pla				pla 								; table offset in Y, saving Y
.96cb		5a		phy				phy
.96cc		a8		tay				tay
.96cd		a2 00		ldx #$00			ldx 	#0 							; first number
.96cf		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.96d1		48		pha				pha
.96d2		64 01		stz $01				stz 	1
.96d4						_CSDTCopy:
.96d4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.96d6		d9 18 97	cmp $9718,y			cmp 	RTCWMinValues,y 			; check range
.96d9		90 1b		bcc $96f6			bcc 	_CSDTRange
.96db		d9 1e 97	cmp $971e,y			cmp 	RTCWMaxValues,y
.96de		b0 16		bcs $96f6			bcs 	_CSDTRange
.96e0		20 fb 96	jsr $96fb			jsr 	CSDTDecimalToBCD
.96e3		da		phx				phx 								; save X
.96e4		be 12 97	ldx $9712,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.96e7		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.96ea		fa		plx				plx 								; restore X
.96eb		e8		inx				inx 								; next number
.96ec		c8		iny				iny 								; next table entries
.96ed		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.96ef		d0 e3		bne $96d4			bne 	_CSDTCopy
.96f1		68		pla				pla 								; restore I/O space
.96f2		85 01		sta $01				sta 	1
.96f4		7a		ply				ply 								; restore code pos and exit.
.96f5		60		rts				rts
.96f6						_CSDTRange:
.96f6		a9 04		lda #$04		lda	#4
.96f8		4c b3 98	jmp $98b3		jmp	ErrorHandler
.96fb						CSDTDecimalToBCD:
.96fb		da		phx				phx 								; 10 count in X
.96fc		a2 00		ldx #$00			ldx 	#0
.96fe						_CSDTDBLoop:
.96fe		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.9700		90 05		bcc $9707			bcc 	_CSDTDBExit
.9702		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.9704		e8		inx				inx 								; one more 10s.
.9705		80 f7		bra $96fe			bra 	_CSDTDBLoop
.9707						_CSDTDBExit:
.9707		85 36		sta $36				sta 	zTemp0 						; units
.9709		8a		txa				txa 								; 10s x 16
.970a		0a		asl a				asl 	a
.970b		0a		asl a				asl 	a
.970c		0a		asl a				asl 	a
.970d		0a		asl a				asl 	a
.970e		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9710		fa		plx				plx
.9711		60		rts				rts
.9712						RTCWOffset:
>9712		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9718						RTCWMinValues:
>9718		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.971e						RTCWMaxValues:
>971e		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9724						StopCommand:
.9724		a9 08		lda #$08		lda	#8
.9726		4c b3 98	jmp $98b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.9729						UnaryTimer:
.9729		fa		plx				plx
.972a		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.972d						TimerToStackX:
.972d		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; zero result
.9730		64 01		stz $01				stz 	1 							; access I/O
.9732		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9735		95 58		sta $58,x			sta 	NSMantissa0,x
.9737		ad 5a d6	lda $d65a			lda 	$D65A
.973a		95 60		sta $60,x			sta 	NSMantissa1,x
.973c		ad 5b d6	lda $d65b			lda 	$D65B
.973f		95 68		sta $68,x			sta 	NSMantissa2,x
.9741		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9742						ClearSystem:
.9742		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9744		85 36		sta $36				sta 	0+zTemp0
.9746		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9748		85 37		sta $37				sta 	1+zTemp0
.974a						_ClearZeroLoop:
.974a		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.974c		f0 24		beq $9772			beq 	_ClearZeroEnd
.974e		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.9750		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9752						_ClearOneVariable:
.9752		91 36		sta ($36),y			sta 	(zTemp0),y
.9754		c8		iny				iny
.9755		c0 08		cpy #$08			cpy 	#8
.9757		d0 f9		bne $9752			bne 	_ClearOneVariable
.9759		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.975b		b1 36		lda ($36),y			lda 	(zTemp0),y
.975d		c9 18		cmp #$18			cmp 	#NSTProcedure
.975f		d0 04		bne $9765			bne 	_ClearNotProcedure
.9761		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9763		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9765						_ClearNotProcedure:
.9765		18		clc				clc 								; go to the next variable
.9766		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.9768		65 36		adc $36				adc 	zTemp0
.976a		85 36		sta $36				sta 	zTemp0
.976c		90 dc		bcc $974a			bcc 	_ClearZeroLoop
.976e		e6 37		inc $37				inc 	zTemp0+1
.9770		80 d8		bra $974a			bra 	_ClearZeroLoop
.9772						_ClearZeroEnd:
.9772		18		clc				clc
.9773		a5 36		lda $36				lda 	zTemp0
.9775		69 01		adc #$01			adc 	#1
.9777		8d 08 04	sta $0408			sta 	lowMemPtr
.977a		a5 37		lda $37				lda 	zTemp0+1
.977c		69 00		adc #$00			adc 	#0
.977e		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9781		20 98 b1	jsr $b198			jsr 	StackReset
.9784		20 fe b1	jsr $b1fe			jsr 	StringSystemInitialise
.9787		20 9d 97	jsr $979d			jsr 	ProcedureScan
.978a		20 bc 93	jsr $93bc			jsr 	Command_Restore
.978d		9c 1a 04	stz $041a			stz 	AssemblerAddress
.9790		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.9793		9c 1c 04	stz $041c			stz 	AssemblerControl
.9796		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.9799		20 f3 a3	jsr $a3f3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.979c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.979d						ProcedureScan:
.979d		20 d3 93	jsr $93d3			jsr 	SwapDataCodePtrs 			; swap code and data
.97a0		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.97a2		85 30		sta $30				sta 	codePtr
.97a4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.97a6		85 31		sta $31				sta 	codePtr+1
.97a8						_PSLoop:
.97a8		b2 30		lda ($30)			lda 	(codePtr)
.97aa		f0 42		beq $97ee			beq 	_PSExit
.97ac		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.97ae		b1 30		lda ($30),y			lda 	(codePtr),y
.97b0		c9 af		cmp #$af			cmp 	#KWD_PROC
.97b2		d0 2d		bne $97e1			bne 	_PSNext
.97b4		c8		iny				iny 								; get the address of the record to zTemp0 and
.97b5		b1 30		lda ($30),y			lda 	(codePtr),y
.97b7		29 c0		and #$c0			and 	#$C0
.97b9		c9 40		cmp #$40			cmp 	#$40
.97bb		d0 35		bne $97f2			bne 	_PSSyntax
.97bd		b1 30		lda ($30),y			lda 	(codePtr),y
.97bf		18		clc				clc
.97c0		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.97c2		85 37		sta $37				sta 	zTemp0+1
.97c4		c8		iny				iny 								; LSB
.97c5		b1 30		lda ($30),y			lda 	(codePtr),y
.97c7		85 36		sta $36				sta 	zTemp0
.97c9		c8		iny				iny 								; character after variable call.
.97ca		98		tya				tya 								; save Y offset at +7 (exponent slot)
.97cb		a0 07		ldy #$07			ldy 	#7
.97cd		91 36		sta ($36),y			sta 	(zTemp0),y
.97cf		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.97d1		a0 02		ldy #$02			ldy 	#2
.97d3		91 36		sta ($36),y			sta 	(zTemp0),y
.97d5		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.97d7						_PSCopy:
.97d7		b5 30		lda $30,x			lda 	safePtr,x
.97d9		c8		iny				iny
.97da		91 36		sta ($36),y			sta 	(zTemp0),y
.97dc		e8		inx				inx
.97dd		e0 04		cpx #$04			cpx 	#4
.97df		d0 f6		bne $97d7			bne 	_PSCopy
.97e1						_PSNext:
.97e1		18		clc				clc
.97e2		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.97e4		65 30		adc $30				adc 	codePtr
.97e6		85 30		sta $30				sta 	codePtr
.97e8		90 02		bcc $97ec			bcc 	_CREExit
.97ea		e6 31		inc $31				inc 	codePtr+1 					; carry
.97ec						_CREExit:
.97ec		80 ba		bra $97a8			bra 	_PSLoop
.97ee						_PSExit:
.97ee		20 d3 93	jsr $93d3			jsr 	SwapDataCodePtrs 			; swap code and data
.97f1		60		rts				rts
.97f2						_PSSyntax:
.97f2		4c b8 aa	jmp $aab8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.97f5						ScanForward:
.97f5		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.97f7		86 37		stx $37				stx 	zTemp0+1
.97f9		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.97fb						_ScanLoop:
.97fb		b1 30		lda ($30),y			lda 	(codePtr),y
.97fd		c8		iny				iny
.97fe		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9800		d0 0e		bne $9810			bne 	_ScanGoNext
.9802		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9804		f0 04		beq $980a			beq 	_ScanMatch
.9806		c5 37		cmp $37				cmp 	zTemp0+1
.9808		d0 06		bne $9810			bne 	_ScanGoNext
.980a						_ScanMatch:
.980a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.980c		d0 01		bne $980f			bne 	_ScanNotEndEOL
.980e		88		dey				dey
.980f						_ScanNotEndEOL:
.980f		60		rts				rts
.9810						_ScanGoNext:
.9810		20 15 98	jsr $9815			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9813		80 e6		bra $97fb			bra 	_ScanLoop
.9815						ScanForwardOne:
.9815		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9817		90 3e		bcc $9857			bcc 	_SFWExit
.9819		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.981b		90 18		bcc $9835			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.981d		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.981f		b0 2f		bcs $9850			bcs 	_ScanSkipData
.9821		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9823		90 32		bcc $9857			bcc 	_SFWExit 					; if not, ordinary keywords.
.9825		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.9827		b0 2e		bcs $9857			bcs 	_SFWExit
.9829		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.982b		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.982d		b0 28		bcs $9857			bcs 	_SFWExit
.982f		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9831		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9833		80 22		bra $9857			bra 	_SFWExit
.9835						_ScanSkipOne:
.9835		c8		iny				iny 								; consume the extra one.
.9836		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9838		d0 1d		bne $9857			bne 	_SFWExit
.983a		18		clc				clc
.983b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.983d		65 30		adc $30				adc 	codePtr
.983f		85 30		sta $30				sta 	codePtr
.9841		90 02		bcc $9845			bcc 	_CREExit
.9843		e6 31		inc $31				inc 	codePtr+1 					; carry
.9845						_CREExit:
.9845		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9847		b2 30		lda ($30)			lda 	(codePtr)
.9849		d0 0c		bne $9857			bne 	_SFWExit 					; if not zero, more to scan
.984b		a9 13		lda #$13		lda	#19
.984d		4c b3 98	jmp $98b3		jmp	ErrorHandler
.9850						_ScanSkipData:
.9850		88		dey				dey 								; point at data token
.9851		c8		iny				iny 								; point to offset
.9852		98		tya				tya 								; A = offset position
.9853		38		sec				sec 								; add size +1 hence SEC
.9854		71 30		adc ($30),y			adc 	(codePtr),y
.9856		a8		tay				tay 								; make current position.
.9857						_SFWExit:
.9857		60		rts				rts
.9858						ScanGetCurrentLineStep:
.9858		64 38		stz $38				stz 	zTemp1
.985a		a0 03		ldy #$03			ldy 	#3
.985c						_SGCLSLoop:
.985c		b1 30		lda ($30),y			lda 	(codePtr),y
.985e		c8		iny				iny
.985f		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9861		f0 05		beq $9868			beq 	_SGCLSExit
.9863		20 15 98	jsr $9815			jsr 	ScanForwardOne
.9866		80 f4		bra $985c			bra 	_SGCLSLoop
.9868						_SGCLSExit:
.9868		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.986a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.986b						Command_WHILE:
.986b		5a		phy				phy 								; save position of the test
.986c		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.986e		20 61 a7	jsr $a761			jsr 	EvaluateNumber
.9871		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; check if zero
.9874		f0 0e		beq $9884			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9876		98		tya				tya 								; position *after* test.
.9877		7a		ply				ply 								; restore position before test, at WHILE
.9878		88		dey				dey 								; so we execute the WHILE command again.
.9879		48		pha				pha 								; push after test on the stack
.987a		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.987c		20 32 b1	jsr $b132			jsr 	StackOpen
.987f		20 77 b1	jsr $b177			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9882		7a		ply				ply 								; restore the position *after* the test
.9883		60		rts				rts
.9884						_WHExitLoop:
.9884		68		pla				pla 								; throw post loop position
.9885		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.9887		aa		tax				tax
.9888		20 f5 97	jsr $97f5			jsr 	ScanForward
.988b		60		rts				rts
.988c						Command_WEND:
.988c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.988e		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9890		20 5f b1	jsr $b15f			jsr 	StackCheckFrame
.9893		20 88 b1	jsr $b188			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9896		20 51 b1	jsr $b151			jsr 	StackClose		 			; erase the frame
.9899		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.989a						CheckRightBracket:
.989a		b1 30		lda ($30),y			lda 	(codePtr),y
.989c		c8		iny				iny
.989d		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.989f		d0 0f		bne $98b0			bne 	CNAFail
.98a1		60		rts				rts
.98a2						CheckComma:
.98a2		b1 30		lda ($30),y			lda 	(codePtr),y
.98a4		c8		iny				iny
.98a5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.98a7		d0 07		bne $98b0			bne 	CNAFail
.98a9		60		rts				rts
.98aa						CheckNextA:
.98aa		d1 30		cmp ($30),y			cmp 	(codePtr),y
.98ac		d0 02		bne $98b0			bne 	CNAFail
.98ae		c8		iny				iny 								; skip character
.98af		60		rts				rts 								; and exit
.98b0						CNAFail:
.98b0		4c b8 aa	jmp $aab8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.98b3						ErrorHandler:
.98b3		48		pha				pha 								; save error #
.98b4		a8		tay				tay 								; find the error text
.98b5		f0 4e		beq $9905			beq 	_EHEnd
.98b7		a2 00		ldx #$00			ldx 	#0
.98b9		a9 d1		lda #$d1			lda 	#((ErrorText) & $FF)
.98bb		85 36		sta $36				sta 	0+zTemp0
.98bd		a9 aa		lda #$aa			lda 	#((ErrorText) >> 8)
.98bf		85 37		sta $37				sta 	1+zTemp0
.98c1						_EHFind:
.98c1		88		dey				dey 								; keep looking through text
.98c2		f0 0e		beq $98d2			beq 	_EHFound
.98c4						_EHFindZero:
.98c4		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.98c6		e6 36		inc $36				inc 	zTemp0
.98c8		d0 02		bne $98cc			bne 	_EHFNoCarry
.98ca		e6 37		inc $37				inc 	zTemp0+1
.98cc						_EHFNoCarry:
.98cc		c9 00		cmp #$00			cmp 	#0
.98ce		d0 f4		bne $98c4			bne 	_EHFindZero
.98d0		80 ef		bra $98c1			bra 	_EHFind
.98d2						_EHFound:
.98d2		a5 36		lda $36				lda 	zTemp0 						; print message
.98d4		a6 37		ldx $37				ldx 	zTemp0+1
.98d6		20 12 99	jsr $9912			jsr 	PrintStringXA
.98d9		68		pla				pla  								; check if error is 'open structure'
.98da		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.98dc		f0 22		beq $9900			beq 	_EHCREnd
.98de		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.98e0		b1 30		lda ($30),y			lda 	(codePtr),y
.98e2		d0 05		bne $98e9			bne 	_EHAtMsg
.98e4		c8		iny				iny
.98e5		b1 30		lda ($30),y			lda 	(codePtr),y
.98e7		f0 17		beq $9900			beq 	_EHCREnd
.98e9						_EHAtMsg:
.98e9		a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.98eb		a9 08		lda #$08			lda 	#_AtMsg & $FF
.98ed		20 12 99	jsr $9912			jsr 	PrintStringXA
.98f0		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.98f2		b1 30		lda ($30),y			lda 	(codePtr),y
.98f4		48		pha				pha
.98f5		c8		iny				iny
.98f6		b1 30		lda ($30),y			lda 	(codePtr),y
.98f8		aa		tax				tax
.98f9		68		pla				pla
.98fa		20 28 9d	jsr $9d28			jsr 	ConvertInt16 				; convert XA to string
.98fd		20 12 99	jsr $9912			jsr 	PrintStringXA 				; and print it.
.9900						_EHCREnd:
.9900		a9 0d		lda #$0d			lda 	#13 						; new line
.9902		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9905						_EHEnd:
.9905		4c b6 86	jmp $86b6			jmp 	WarmStart
>9908		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9910		20 00
.9912						PrintStringXA:
.9912		5a		phy				phy
.9913		86 37		stx $37				stx 	zTemp0+1
.9915		85 36		sta $36				sta 	zTemp0
.9917		a0 00		ldy #$00			ldy 	#0
.9919						_PSXALoop:
.9919		b1 36		lda ($36),y			lda 	(zTemp0),y
.991b		f0 06		beq $9923			beq 	_PSXAExit
.991d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9920		c8		iny				iny
.9921		80 f6		bra $9919			bra 	_PSXALoop
.9923						_PSXAExit:
.9923		7a		ply				ply
.9924		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9925						UnaryTrue:
.9925		fa		plx				plx
.9926						ReturnTrue:
.9926		a9 01		lda #$01			lda 	#1  						; set to 1
.9928		20 15 a8	jsr $a815			jsr 	NSMSetByte
.992b		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.992d		95 50		sta $50,x			sta 	NSStatus,x
.992f		60		rts				rts
.9930						UnaryFalse:
.9930		fa		plx				plx
.9931						ReturnFalse:
.9931		4c 13 a8	jmp $a813			jmp 	NSMSetZero 					; set it all to zero
.9934						BinaryCompareEqual:
.9934		fa		plx				plx
.9935		20 70 99	jsr $9970			jsr 	CompareBaseCode
.9938		c9 00		cmp #$00			cmp 	#0
.993a		f0 ea		beq $9926			beq 	ReturnTrue
.993c		80 f3		bra $9931			bra 	ReturnFalse
.993e						BinaryCompareLess:
.993e		fa		plx				plx
.993f		20 70 99	jsr $9970			jsr 	CompareBaseCode
.9942		c9 ff		cmp #$ff			cmp 	#$FF
.9944		f0 e0		beq $9926			beq 	ReturnTrue
.9946		80 e9		bra $9931			bra 	ReturnFalse
.9948						BinaryCompareGreater:
.9948		fa		plx				plx
.9949		20 70 99	jsr $9970			jsr 	CompareBaseCode
.994c		c9 01		cmp #$01			cmp 	#1
.994e		f0 d6		beq $9926			beq 	ReturnTrue
.9950		80 df		bra $9931			bra 	ReturnFalse
.9952						BinaryCompareNotEqual:
.9952		fa		plx				plx
.9953		20 70 99	jsr $9970			jsr 	CompareBaseCode
.9956		c9 00		cmp #$00			cmp 	#0
.9958		d0 cc		bne $9926			bne 	ReturnTrue
.995a		80 d5		bra $9931			bra 	ReturnFalse
.995c						BinaryCompareLessEqual:
.995c		fa		plx				plx
.995d		20 70 99	jsr $9970			jsr 	CompareBaseCode
.9960		c9 01		cmp #$01			cmp 	#1
.9962		d0 c2		bne $9926			bne 	ReturnTrue
.9964		80 cb		bra $9931			bra 	ReturnFalse
.9966						BinaryCompareGreaterEqual:
.9966		fa		plx				plx
.9967		20 70 99	jsr $9970			jsr 	CompareBaseCode
.996a		c9 ff		cmp #$ff			cmp 	#$FF
.996c		d0 b8		bne $9926			bne 	ReturnTrue
.996e		80 c1		bra $9931			bra 	ReturnFalse
.9970						CompareBaseCode:
.9970		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; make both values if references.
.9973		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9975		15 51		ora $51,x			ora 	NSStatus+1,x
.9977		29 10		and #$10			and 	#NSTString
.9979		d0 37		bne $99b2			bne 	_CBCString 					; if so do string code, which will check if both.
.997b		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.997d		15 79		ora $79,x			ora 	NSExponent+1,x
.997f		d0 34		bne $99b5			bne 	_CBCFloat
.9981		b5 50		lda $50,x			lda 	NSStatus,x
.9983		15 51		ora $51,x			ora 	NSStatus+1,x
.9985		29 08		and #$08			and 	#NSTFloat
.9987		d0 2c		bne $99b5			bne 	_CBCFloat
.9989		20 b8 99	jsr $99b8			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.998c		e8		inx				inx
.998d		20 b8 99	jsr $99b8			jsr 	CompareFixMinusZero
.9990		ca		dex				dex
.9991		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9993		55 51		eor $51,x			eor 	NSStatus+1,x
.9995		10 0a		bpl $99a1			bpl 	_CDCSameSign
.9997		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9999		30 14		bmi $99af			bmi 	_CBCLess 					; return $FF
.999b						_CBCGreater:
.999b		a9 01		lda #$01			lda 	#1
.999d		60		rts				rts
.999e						_CBCEqual:
.999e		a9 00		lda #$00			lda 	#0
.99a0		60		rts				rts
.99a1						_CDCSameSign:
.99a1		20 cd 9b	jsr $9bcd			jsr 	SubTopTwoStack 				; unsigned subtract
.99a4		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; or the mantissa together
.99a7		f0 f5		beq $999e			beq 	_CBCEqual 					; -0 == 0
.99a9		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.99ab		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.99ad		10 ec		bpl $999b			bpl 	_CBCGreater
.99af						_CBCLess:
.99af		a9 ff		lda #$ff			lda 	#$FF
.99b1		60		rts				rts
.99b2						_CBCString:
.99b2		4c 3e 9b	jmp $9b3e			jmp 	CompareStrings
.99b5						_CBCFloat:
.99b5		4c 88 9e	jmp $9e88			jmp 	CompareFloat
.99b8						CompareFixMinusZero:
.99b8		20 35 a8	jsr $a835			jsr 	NSMIsZero
.99bb		d0 02		bne $99bf			bne 	_CFXMZNotZero
.99bd		74 50		stz $50,x			stz 	NSStatus,x
.99bf						_CFXMZNotZero:
.99bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.99c0						StringConcat:
.99c0		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.99c2		35 51		and $51,x			and 	NSStatus+1,x
.99c4		29 18		and #$18			and 	#NSBTypeMask
.99c6		c9 10		cmp #$10			cmp 	#NSTString
.99c8		d0 50		bne $9a1a			bne		_SCType
.99ca		64 38		stz $38				stz 	zTemp1 						; counting total length
.99cc		e8		inx				inx
.99cd		20 eb 99	jsr $99eb			jsr 	_SCSetupZ0 					; setup for second
.99d0		20 f4 99	jsr $99f4			jsr 	_SCLengthZ0 				; length for second
.99d3		ca		dex				dex
.99d4		20 eb 99	jsr $99eb			jsr 	_SCSetupZ0 					; setup for first
.99d7		20 f4 99	jsr $99f4			jsr 	_SCLengthZ0 				; length for first
.99da		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.99dc		20 22 b2	jsr $b222			jsr 	StringTempAllocate
.99df		20 0b 9a	jsr $9a0b			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.99e2		e8		inx				inx
.99e3		20 eb 99	jsr $99eb			jsr 	_SCSetupZ0 					; copy second out
.99e6		20 0b 9a	jsr $9a0b			jsr 	_SCCopy
.99e9		ca		dex				dex
.99ea		60		rts				rts
.99eb						_SCSetupZ0:
.99eb		b5 58		lda $58,x			lda 	NSMantissa0,x
.99ed		85 36		sta $36				sta 	zTemp0
.99ef		b5 60		lda $60,x			lda 	NSMantissa1,x
.99f1		85 37		sta $37				sta 	zTemp0+1
.99f3		60		rts				rts
.99f4						_SCLengthZ0:
.99f4		5a		phy				phy
.99f5		a0 00		ldy #$00			ldy 	#0
.99f7						_SCLenLoop:
.99f7		b1 36		lda ($36),y			lda 	(zTemp0),y
.99f9		f0 0e		beq $9a09			beq 	_SCLExit
.99fb		c8		iny				iny
.99fc		e6 38		inc $38				inc 	zTemp1
.99fe		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9a00		c9 fd		cmp #$fd			cmp 	#253
.9a02		d0 f3		bne $99f7			bne		_SCLenLoop
.9a04		a9 09		lda #$09		lda	#9
.9a06		4c b3 98	jmp $98b3		jmp	ErrorHandler
.9a09						_SCLExit:
.9a09		7a		ply				ply
.9a0a		60		rts				rts
.9a0b						_SCCopy:
.9a0b		5a		phy				phy
.9a0c		a0 00		ldy #$00			ldy 	#0
.9a0e						_SCCopyLoop:
.9a0e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a10		f0 06		beq $9a18			beq 	_SCCExit
.9a12		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.9a15		c8		iny				iny
.9a16		80 f6		bra $9a0e			bra 	_SCCopyLoop
.9a18						_SCCExit:
.9a18		7a		ply				ply
.9a19		60		rts				rts
.9a1a						_SCType:
.9a1a		4c c2 aa	jmp $aac2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9a1d						IntegerDivide:
.9a1d		fa		plx				plx
.9a1e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a20		15 51		ora $51,x			ora 	NSStatus+1,x
.9a22		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a23		0a		asl a				asl 	a
.9a24		10 05		bpl $9a2b			bpl 	_NotRef
.9a26		48		pha				pha
.9a27		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a2a		68		pla				pla
.9a2b						_NotRef:
.9a2b		0a		asl a				asl 	a
.9a2c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a2e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a30		15 79		ora $79,x			ora 	NSExponent+1,x
.9a32		f0 03		beq $9a37			beq 	_IntegerCode 				; if clear, then we have two integers
.9a34		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9a37						_IntegerCode:
.9a37		20 51 9a	jsr $9a51			jsr 	CheckDivideZero 			; do div zero check
.9a3a		20 83 9a	jsr $9a83			jsr 	Int32Divide 				; do the division
.9a3d		20 34 9b	jsr $9b34			jsr 	CalculateSign 				; calculate result sign
.9a40						NSMCopyPlusTwoToZero:
.9a40		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9a42		95 58		sta $58,x			sta 	NSMantissa0,x
.9a44		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9a46		95 60		sta $60,x			sta 	NSMantissa1,x
.9a48		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9a4a		95 68		sta $68,x			sta 	NSMantissa2,x
.9a4c		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9a4e		95 70		sta $70,x			sta 	NSMantissa3,x
.9a50		60		rts				rts
.9a51						CheckDivideZero:
.9a51		e8		inx				inx
.9a52		20 35 a8	jsr $a835			jsr 	NSMIsZero
.9a55		f0 02		beq $9a59			beq 	_CDVError
.9a57		ca		dex				dex
.9a58		60		rts				rts
.9a59						_CDVError:
.9a59		a9 03		lda #$03		lda	#3
.9a5b		4c b3 98	jmp $98b3		jmp	ErrorHandler
.9a5e						IntegerModulus:
.9a5e		fa		plx				plx
.9a5f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a61		15 51		ora $51,x			ora 	NSStatus+1,x
.9a63		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a64		0a		asl a				asl 	a
.9a65		10 05		bpl $9a6c			bpl 	_NotRef
.9a67		48		pha				pha
.9a68		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a6b		68		pla				pla
.9a6c						_NotRef:
.9a6c		0a		asl a				asl 	a
.9a6d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a6f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a71		15 79		ora $79,x			ora 	NSExponent+1,x
.9a73		f0 03		beq $9a78			beq 	_IntegerCode 				; if clear, then we have two integers
.9a75		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9a78						_IntegerCode:
.9a78						IntegerModulusNoCheck:
.9a78		20 51 9a	jsr $9a51			jsr 	CheckDivideZero 			; do div zero check
.9a7b		20 83 9a	jsr $9a83			jsr 	Int32Divide 				; do the division
.9a7e		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a80		56 50		lsr $50,x			lsr 	NSStatus,x
.9a82		60		rts				rts
.9a83						Int32Divide:
.9a83		48		pha				pha 								; save AXY
.9a84		5a		phy				phy
.9a85		20 f6 a7	jsr $a7f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9a88		20 0f a8	jsr $a80f			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9a8b		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9a8d						_I32DivideLoop:
.9a8d		e8		inx				inx
.9a8e		e8		inx				inx
.9a8f		20 22 a8	jsr $a822			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9a92		ca		dex				dex
.9a93		ca		dex				dex
.9a94		20 23 a8	jsr $a823			jsr 	NSMRotateLeft
.9a97		20 c2 9a	jsr $9ac2			jsr 	DivideCheckSubtract 		; check if subtract possible
.9a9a		90 02		bcc $9a9e			bcc 	_I32DivideNoCarryIn
.9a9c		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9a9e						_I32DivideNoCarryIn:
.9a9e		88		dey				dey 								; loop round till division completed.
.9a9f		d0 ec		bne $9a8d			bne 	_I32DivideLoop
.9aa1		7a		ply				ply 								; restore AXY and exit
.9aa2		68		pla				pla
.9aa3		60		rts				rts
.9aa4						Int32ShiftDivide:
.9aa4		48		pha				pha 								; save AY
.9aa5		5a		phy				phy
.9aa6		e8		inx				inx 								; clear S[X+2]
.9aa7		e8		inx				inx
.9aa8		20 13 a8	jsr $a813			jsr 	NSMSetZero
.9aab		ca		dex				dex
.9aac		ca		dex				dex
.9aad		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9aaf						_I32SDLoop:
.9aaf		20 c2 9a	jsr $9ac2			jsr 	DivideCheckSubtract 		; check if subtract possible
.9ab2		e8		inx				inx
.9ab3		e8		inx				inx
.9ab4		20 23 a8	jsr $a823			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9ab7		ca		dex				dex
.9ab8		ca		dex				dex
.9ab9		20 23 a8	jsr $a823			jsr 	NSMRotateLeft
.9abc		88		dey				dey 	 							; do 31 times
.9abd		d0 f0		bne $9aaf			bne 	_I32SDLoop
.9abf		7a		ply				ply 								; restore AY and exit
.9ac0		68		pla				pla
.9ac1		60		rts				rts
.9ac2						DivideCheckSubtract:
.9ac2		20 cd 9b	jsr $9bcd			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9ac5		b0 04		bcs $9acb			bcs 	_DCSExit 					; if carry set, then could do, exit
.9ac7		20 b3 9b	jsr $9bb3			jsr 	AddTopTwoStack 				; add it back in
.9aca		18		clc				clc 								; and return False
.9acb						_DCSExit:
.9acb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9acc						MulInteger:
.9acc		fa		plx				plx
.9acd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9acf		15 51		ora $51,x			ora 	NSStatus+1,x
.9ad1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ad2		0a		asl a				asl 	a
.9ad3		10 05		bpl $9ada			bpl 	_NotRef
.9ad5		48		pha				pha
.9ad6		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ad9		68		pla				pla
.9ada						_NotRef:
.9ada		0a		asl a				asl 	a 							; put MSB of type into A:7
.9adb		30 09		bmi $9ae6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9add		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9adf		15 79		ora $79,x			ora 	NSExponent+1,x
.9ae1		f0 06		beq $9ae9			beq 	_IntegerCode 				; if clear, then we have two integers
.9ae3		4c 4a 9f	jmp $9f4a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9ae6						_StringData:
.9ae6		4c cc aa	jmp $aacc			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9ae9						_IntegerCode:
.9ae9		20 f6 9a	jsr $9af6			jsr 	MultiplyShort
.9aec		c9 00		cmp #$00			cmp 	#0
.9aee		f0 05		beq $9af5			beq 	_MIExit
.9af0		a9 04		lda #$04		lda	#4
.9af2		4c b3 98	jmp $98b3		jmp	ErrorHandler
.9af5						_MIExit:
.9af5		60		rts				rts
.9af6						MultiplyShort:
.9af6		5a		phy				phy 								; save Y
.9af7		20 f6 a7	jsr $a7f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9afa		20 0f a8	jsr $a80f			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9afd		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9aff						_I32MLoop:
.9aff		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9b01		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9b03		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9b05		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9b07		f0 25		beq $9b2e			beq 	_I32MExit 					; exit if zero
.9b09		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9b0b		29 01		and #$01			and 	#1
.9b0d		f0 0d		beq $9b1c			beq 	_I32MNoAdd
.9b0f		20 b3 9b	jsr $9bb3			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9b12		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9b14		10 06		bpl $9b1c			bpl 	_I32MNoAdd
.9b16						_I32ShiftRight:
.9b16		20 2c a8	jsr $a82c			jsr 	NSMShiftRight 				; shift S[X] right
.9b19		c8		iny				iny 								; increment shift count
.9b1a		80 09		bra $9b25			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9b1c						_I32MNoAdd:
.9b1c		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9b1e		70 f6		bvs $9b16			bvs 	_I32ShiftRight 				; instead.
.9b20		e8		inx				inx
.9b21		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9b24		ca		dex				dex
.9b25						_I32MShiftUpper:
.9b25		e8		inx				inx 								; shift S[X+2] right
.9b26		e8		inx				inx
.9b27		20 2c a8	jsr $a82c			jsr 	NSMShiftRight
.9b2a		ca		dex				dex
.9b2b		ca		dex				dex
.9b2c		80 d1		bra $9aff			bra 	_I32MLoop 					; try again.
.9b2e						_I32MExit:
.9b2e		20 34 9b	jsr $9b34			jsr 	CalculateSign
.9b31		98		tya				tya 								; shift in A
.9b32		7a		ply				ply 								; restore Y and exit
.9b33		60		rts				rts
.9b34						CalculateSign:
.9b34		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9b36		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9b38		55 51		eor $51,x			eor 	NSStatus+1,x
.9b3a		0a		asl a				asl 	a 							; shift bit 7 into carry
.9b3b		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9b3d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9b3e						CompareStrings:
.9b3e		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9b40		35 51		and $51,x			and 	NSStatus+1,x
.9b42		29 10		and #$10			and 	#NSBIsString
.9b44		f0 28		beq $9b6e			beq 	_CSTypeError
.9b46		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9b48		85 36		sta $36				sta 	zTemp0
.9b4a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b4c		85 37		sta $37				sta 	zTemp0+1
.9b4e		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b50		85 38		sta $38				sta 	zTemp1
.9b52		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b54		85 39		sta $39				sta 	zTemp1+1
.9b56		5a		phy				phy 								; save Y so we can access strings
.9b57		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9b59						_CSLoop:
.9b59		c8		iny				iny
.9b5a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9b5c		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9b5e		d0 06		bne $9b66			bne 	_CSDifferent
.9b60		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9b62		d0 f5		bne $9b59			bne 	_CSLoop 					; still comparing
.9b64						_CSExit:
.9b64		7a		ply				ply 								; reached end, return zero in A from EOS
.9b65		60		rts				rts
.9b66						_CSDifferent:
.9b66		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9b68		90 fa		bcc $9b64			bcc		_CSExit
.9b6a		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9b6c		80 f6		bra $9b64			bra 	_CSExit
.9b6e						_CSTypeError:
.9b6e		4c c2 aa	jmp $aac2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9b71						ShiftLeft:
.9b71		38		sec				sec 								; common code, carry determines which way.
.9b72		80 01		bra $9b75			bra 	ShiftMain
.9b74						ShiftRight:
.9b74		18		clc				clc
.9b75						ShiftMain:
.9b75		fa		plx				plx 								; restore X
.9b76		08		php				php 								; save direction
.9b77		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b79		15 51		ora $51,x			ora 	NSStatus+1,x
.9b7b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b7c		0a		asl a				asl 	a
.9b7d		10 05		bpl $9b84			bpl 	_NotRef
.9b7f		48		pha				pha
.9b80		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b83		68		pla				pla
.9b84						_NotRef:
.9b84		0a		asl a				asl 	a
.9b85		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b87		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b89		15 79		ora $79,x			ora 	NSExponent+1,x
.9b8b		f0 03		beq $9b90			beq 	_IntegerCode 				; if clear, then we have two integers
.9b8d		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9b90						_IntegerCode:
.9b90		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9b92		29 e0		and #$e0			and 	#$E0
.9b94		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9b96		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9b98		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9b9a		d0 12		bne $9bae			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9b9c						_SMLoop:
.9b9c		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9b9e		30 11		bmi $9bb1			bmi 	_SMExit 					; exit if done.
.9ba0		28		plp				plp 								; restore direction setting
.9ba1		08		php				php
.9ba2		90 05		bcc $9ba9			bcc 	_SMRight
.9ba4		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; shift left if CS
.9ba7		80 f3		bra $9b9c			bra 	_SMLoop
.9ba9						_SMRight:
.9ba9		20 2c a8	jsr $a82c			jsr 	NSMShiftRight 				; shift right if CC
.9bac		80 ee		bra $9b9c			bra 	_SMLoop
.9bae						_SMExit0:
.9bae		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; return zero.
.9bb1						_SMExit:
.9bb1		28		plp				plp 								; throw direction
.9bb2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9bb3						AddTopTwoStack:
.9bb3		18		clc				clc
.9bb4		b5 58		lda $58,x			lda		NSMantissa0,x
.9bb6		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9bb8		95 58		sta $58,x			sta 	NSMantissa0,x
.9bba		b5 60		lda $60,x			lda		NSMantissa1,x
.9bbc		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9bbe		95 60		sta $60,x			sta 	NSMantissa1,x
.9bc0		b5 68		lda $68,x			lda		NSMantissa2,x
.9bc2		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9bc4		95 68		sta $68,x			sta 	NSMantissa2,x
.9bc6		b5 70		lda $70,x			lda		NSMantissa3,x
.9bc8		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9bca		95 70		sta $70,x			sta 	NSMantissa3,x
.9bcc		60		rts				rts
.9bcd						SubTopTwoStack:
.9bcd		38		sec				sec
.9bce		b5 58		lda $58,x			lda		NSMantissa0,x
.9bd0		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9bd2		95 58		sta $58,x			sta 	NSMantissa0,x
.9bd4		b5 60		lda $60,x			lda		NSMantissa1,x
.9bd6		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9bd8		95 60		sta $60,x			sta 	NSMantissa1,x
.9bda		b5 68		lda $68,x			lda		NSMantissa2,x
.9bdc		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9bde		95 68		sta $68,x			sta 	NSMantissa2,x
.9be0		b5 70		lda $70,x			lda		NSMantissa3,x
.9be2		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9be4		95 70		sta $70,x			sta 	NSMantissa3,x
.9be6		60		rts				rts
.9be7						AddInteger:
.9be7		fa		plx				plx
.9be8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bea		15 51		ora $51,x			ora 	NSStatus+1,x
.9bec		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bed		0a		asl a				asl 	a
.9bee		10 05		bpl $9bf5			bpl 	_NotRef
.9bf0		48		pha				pha
.9bf1		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bf4		68		pla				pla
.9bf5						_NotRef:
.9bf5		0a		asl a				asl 	a 							; put MSB of type into A:7
.9bf6		30 09		bmi $9c01			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9bf8		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bfa		15 79		ora $79,x			ora 	NSExponent+1,x
.9bfc		f0 06		beq $9c04			beq 	_IntegerCode 				; if clear, then we have two integers
.9bfe		4c fa 9d	jmp $9dfa			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9c01						_StringData:
.9c01		4c c0 99	jmp $99c0			jmp 	StringConcat							; at least one string - don't know both are strings.
.9c04						_IntegerCode:
.9c04						AddCode:
.9c04		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9c06		55 51		eor $51,x			eor 	NSStatus+1,x
.9c08		10 a9		bpl $9bb3			bpl 	AddTopTwoStack
.9c0a		20 cd 9b	jsr $9bcd			jsr 	SubTopTwoStack 				; do a physical subtraction
.9c0d		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9c0f		10 07		bpl $9c18			bpl 	_AddExit
.9c11		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9c13		95 50		sta $50,x			sta 	NSStatus,x
.9c15		20 dc a7	jsr $a7dc			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9c18						_AddExit:
.9c18		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; check for -0
.9c1b		d0 02		bne $9c1f			bne 	_AddNonZero
.9c1d		74 50		stz $50,x			stz 	NSStatus,x
.9c1f						_AddNonZero:
.9c1f		60		rts				rts
.9c20						SubInteger:
.9c20		fa		plx				plx
.9c21		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c23		15 51		ora $51,x			ora 	NSStatus+1,x
.9c25		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c26		0a		asl a				asl 	a
.9c27		10 05		bpl $9c2e			bpl 	_NotRef
.9c29		48		pha				pha
.9c2a		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c2d		68		pla				pla
.9c2e						_NotRef:
.9c2e		0a		asl a				asl 	a 							; put MSB of type into A:7
.9c2f		30 09		bmi $9c3a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c31		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c33		15 79		ora $79,x			ora 	NSExponent+1,x
.9c35		f0 06		beq $9c3d			beq 	_IntegerCode 				; if clear, then we have two integers
.9c37		4c ff 9d	jmp $9dff			jmp 	FloatingPointSub 							; otherwise at least one float.
.9c3a						_StringData:
.9c3a		4c cc aa	jmp $aacc			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c3d						_IntegerCode:
.9c3d		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9c3f		49 80		eor #$80			eor 	#$80
.9c41		95 51		sta $51,x			sta 	NSStatus+1,x
.9c43		80 bf		bra $9c04			bra 	AddCode 					; and do the same code as add.
.9c45						AndInteger:
.9c45		fa		plx				plx
.9c46		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c48		15 51		ora $51,x			ora 	NSStatus+1,x
.9c4a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c4b		0a		asl a				asl 	a
.9c4c		10 05		bpl $9c53			bpl 	_NotRef
.9c4e		48		pha				pha
.9c4f		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c52		68		pla				pla
.9c53						_NotRef:
.9c53		0a		asl a				asl 	a
.9c54		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c56		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c58		15 79		ora $79,x			ora 	NSExponent+1,x
.9c5a		f0 03		beq $9c5f			beq 	_IntegerCode 				; if clear, then we have two integers
.9c5c		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9c5f						_IntegerCode:
.9c5f		b5 58		lda $58,x			lda		NSMantissa0,x
.9c61		35 59		and $59,x			and 		NSMantissa0+1,x
.9c63		95 58		sta $58,x			sta 	NSMantissa0,x
.9c65		b5 60		lda $60,x			lda		NSMantissa1,x
.9c67		35 61		and $61,x			and 		NSMantissa1+1,x
.9c69		95 60		sta $60,x			sta 	NSMantissa1,x
.9c6b		b5 68		lda $68,x			lda		NSMantissa2,x
.9c6d		35 69		and $69,x			and 		NSMantissa2+1,x
.9c6f		95 68		sta $68,x			sta 	NSMantissa2,x
.9c71		b5 70		lda $70,x			lda		NSMantissa3,x
.9c73		35 71		and $71,x			and 		NSMantissa3+1,x
.9c75		95 70		sta $70,x			sta 	NSMantissa3,x
.9c77		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9c79		60		rts				rts
.9c7a						OraInteger:
.9c7a		fa		plx				plx
.9c7b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c7d		15 51		ora $51,x			ora 	NSStatus+1,x
.9c7f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c80		0a		asl a				asl 	a
.9c81		10 05		bpl $9c88			bpl 	_NotRef
.9c83		48		pha				pha
.9c84		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c87		68		pla				pla
.9c88						_NotRef:
.9c88		0a		asl a				asl 	a
.9c89		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c8b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c8d		15 79		ora $79,x			ora 	NSExponent+1,x
.9c8f		f0 03		beq $9c94			beq 	_IntegerCode 				; if clear, then we have two integers
.9c91		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9c94						_IntegerCode:
.9c94		b5 58		lda $58,x			lda		NSMantissa0,x
.9c96		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9c98		95 58		sta $58,x			sta 	NSMantissa0,x
.9c9a		b5 60		lda $60,x			lda		NSMantissa1,x
.9c9c		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9c9e		95 60		sta $60,x			sta 	NSMantissa1,x
.9ca0		b5 68		lda $68,x			lda		NSMantissa2,x
.9ca2		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9ca4		95 68		sta $68,x			sta 	NSMantissa2,x
.9ca6		b5 70		lda $70,x			lda		NSMantissa3,x
.9ca8		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9caa		95 70		sta $70,x			sta 	NSMantissa3,x
.9cac		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9cae		60		rts				rts
.9caf						EorInteger:
.9caf		fa		plx				plx
.9cb0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9cb2		15 51		ora $51,x			ora 	NSStatus+1,x
.9cb4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cb5		0a		asl a				asl 	a
.9cb6		10 05		bpl $9cbd			bpl 	_NotRef
.9cb8		48		pha				pha
.9cb9		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cbc		68		pla				pla
.9cbd						_NotRef:
.9cbd		0a		asl a				asl 	a
.9cbe		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cc0		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cc2		15 79		ora $79,x			ora 	NSExponent+1,x
.9cc4		f0 03		beq $9cc9			beq 	_IntegerCode 				; if clear, then we have two integers
.9cc6		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9cc9						_IntegerCode:
.9cc9		b5 58		lda $58,x			lda		NSMantissa0,x
.9ccb		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9ccd		95 58		sta $58,x			sta 	NSMantissa0,x
.9ccf		b5 60		lda $60,x			lda		NSMantissa1,x
.9cd1		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9cd3		95 60		sta $60,x			sta 	NSMantissa1,x
.9cd5		b5 68		lda $68,x			lda		NSMantissa2,x
.9cd7		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9cd9		95 68		sta $68,x			sta 	NSMantissa2,x
.9cdb		b5 70		lda $70,x			lda		NSMantissa3,x
.9cdd		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9cdf		95 70		sta $70,x			sta 	NSMantissa3,x
.9ce1		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9ce3		60		rts				rts
.9ce4						WordIndirect:
.9ce4		fa		plx				plx
.9ce5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ce7		15 51		ora $51,x			ora 	NSStatus+1,x
.9ce9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cea		0a		asl a				asl 	a
.9ceb		10 05		bpl $9cf2			bpl 	_NotRef
.9ced		48		pha				pha
.9cee		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cf1		68		pla				pla
.9cf2						_NotRef:
.9cf2		0a		asl a				asl 	a
.9cf3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cf5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cf7		15 79		ora $79,x			ora 	NSExponent+1,x
.9cf9		f0 03		beq $9cfe			beq 	_IntegerCode 				; if clear, then we have two integers
.9cfb		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9cfe						_IntegerCode:
.9cfe		20 04 9c	jsr $9c04			jsr 	AddCode 					; add the two values
.9d01		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9d03		95 50		sta $50,x			sta 	NSStatus,x
.9d05		60		rts				rts
.9d06						ByteIndirect:
.9d06		fa		plx				plx
.9d07		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9d09		15 51		ora $51,x			ora 	NSStatus+1,x
.9d0b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d0c		0a		asl a				asl 	a
.9d0d		10 05		bpl $9d14			bpl 	_NotRef
.9d0f		48		pha				pha
.9d10		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d13		68		pla				pla
.9d14						_NotRef:
.9d14		0a		asl a				asl 	a
.9d15		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d17		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d19		15 79		ora $79,x			ora 	NSExponent+1,x
.9d1b		f0 03		beq $9d20			beq 	_IntegerCode 				; if clear, then we have two integers
.9d1d		4c c2 aa	jmp $aac2			jmp 	TypeError 					; anything else, type mismatch.
.9d20						_IntegerCode:
.9d20		20 04 9c	jsr $9c04			jsr 	AddCode 					; add the two values
.9d23		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9d25		95 50		sta $50,x			sta 	NSStatus,x
.9d27		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9d28						ConvertInt16:
.9d28		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9d2a		86 60		stx $60				stx 	NSMantissa1
.9d2c		64 68		stz $68				stz 	NSMantissa2
.9d2e		64 70		stz $70				stz 	NSMantissa3
.9d30		64 50		stz $50				stz 	NSStatus 					; positive integer
.9d32		a2 00		ldx #$00			ldx 	#0 							; stack level
.9d34		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9d36		80 00		bra $9d38			bra 	ConvertInt32
.9d38						ConvertInt32:
.9d38		5a		phy				phy
.9d39		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9d3b		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9d3d		10 08		bpl $9d47			bpl 	_CI32NotNeg
.9d3f		48		pha				pha
.9d40		a9 2d		lda #$2d			lda 	#'-'
.9d42		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9d45		c8		iny				iny
.9d46		68		pla				pla
.9d47						_CI32NotNeg:
.9d47		20 55 9d	jsr $9d55			jsr 	_CI32DivideConvert 			; recursive conversion
.9d4a		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9d4c		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9d4f		7a		ply				ply
.9d50		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9d52		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9d54		60		rts				rts
.9d55						_CI32DivideConvert:
.9d55		e8		inx				inx 								; write to next slot up
.9d56		20 15 a8	jsr $a815			jsr 	NSMSetByte 		 			; write the base out.
.9d59		ca		dex				dex
.9d5a		20 83 9a	jsr $9a83			jsr 	Int32Divide 				; divide
.9d5d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9d5f		48		pha				pha
.9d60		20 40 9a	jsr $9a40			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9d63		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; is it zero ?
.9d66		f0 05		beq $9d6d			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9d68		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9d6a		20 55 9d	jsr $9d55			jsr 	_CI32DivideConvert 			; and recusrively call.
.9d6d						_CI32NoRecurse:
.9d6d		68		pla				pla 								; remainder
.9d6e		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9d70		90 02		bcc $9d74			bcc 	_CI32NotHex
.9d72		69 26		adc #$26			adc 	#6+32
.9d74						_CI32NotHex:
.9d74		69 30		adc #$30			adc 	#48
.9d76		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9d79		c8		iny				iny
.9d7a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9d7b						PrecedenceLevel:
>9d7b		04					.byte	 4	; $00 <<
>9d7c		02					.byte	 2	; $01 <=
>9d7d		02					.byte	 2	; $02 <>
>9d7e		00					.byte	 0	; $03 !!3
>9d7f		00					.byte	 0	; $04 ><
>9d80		02					.byte	 2	; $05 >=
>9d81		04					.byte	 4	; $06 >>
>9d82		00					.byte	 0	; $07 !!7
>9d83		00					.byte	 0	; $08 !!8
>9d84		00					.byte	 0	; $09 !!9
>9d85		00					.byte	 0	; $0a !!10
>9d86		00					.byte	 0	; $0b !!11
>9d87		00					.byte	 0	; $0c !!12
>9d88		00					.byte	 0	; $0d !!13
>9d89		00					.byte	 0	; $0e !!14
>9d8a		00					.byte	 0	; $0f !!15
>9d8b		00					.byte	 0	; $10 @
>9d8c		00					.byte	 0	; $11 !!17
>9d8d		00					.byte	 0	; $12 !!18
>9d8e		00					.byte	 0	; $13 [
>9d8f		04					.byte	 4	; $14 \
>9d90		00					.byte	 0	; $15 ]
>9d91		01					.byte	 1	; $16 ^
>9d92		00					.byte	 0	; $17 _
>9d93		00					.byte	 0	; $18 `
>9d94		00					.byte	 0	; $19 !!25
>9d95		00					.byte	 0	; $1a !!26
>9d96		00					.byte	 0	; $1b {
>9d97		01					.byte	 1	; $1c |
>9d98		00					.byte	 0	; $1d }
>9d99		00					.byte	 0	; $1e ~
>9d9a		00					.byte	 0	; $1f <7F>
>9d9b		00					.byte	 0	; $20
>9d9c		05					.byte	 5	; $21 !
>9d9d		00					.byte	 0	; $22 "
>9d9e		00					.byte	 0	; $23 #
>9d9f		05					.byte	 5	; $24 $
>9da0		04					.byte	 4	; $25 %
>9da1		01					.byte	 1	; $26 &
>9da2		00					.byte	 0	; $27 '
>9da3		00					.byte	 0	; $28 (
>9da4		00					.byte	 0	; $29 )
>9da5		04					.byte	 4	; $2a *
>9da6		03					.byte	 3	; $2b +
>9da7		00					.byte	 0	; $2c ,
>9da8		03					.byte	 3	; $2d -
>9da9		00					.byte	 0	; $2e .
>9daa		04					.byte	 4	; $2f /
>9dab		00					.byte	 0	; $30 0
>9dac		00					.byte	 0	; $31 1
>9dad		00					.byte	 0	; $32 2
>9dae		00					.byte	 0	; $33 3
>9daf		00					.byte	 0	; $34 4
>9db0		00					.byte	 0	; $35 5
>9db1		00					.byte	 0	; $36 6
>9db2		00					.byte	 0	; $37 7
>9db3		00					.byte	 0	; $38 8
>9db4		00					.byte	 0	; $39 9
>9db5		00					.byte	 0	; $3a :
>9db6		00					.byte	 0	; $3b ;
>9db7		02					.byte	 2	; $3c <
>9db8		02					.byte	 2	; $3d =
>9db9		02					.byte	 2	; $3e >
>9dba		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9dbb						EvaluateExpressionAt0:
.9dbb		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9dbd						EvaluateExpression:
.9dbd		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9dbf						EvaluateExpressionAtPrecedence:
.9dbf		48		pha				pha 								; save precedence level
.9dc0		20 07 a2	jsr $a207			jsr 	EvaluateTerm 				; evaluate term into level X.
.9dc3		68		pla				pla 								; restore precedence level.
.9dc4						_EXPRLoop:
.9dc4		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9dc6		b1 30		lda ($30),y			lda 	(codePtr),y
.9dc8		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9dca		b0 25		bcs $9df1			bcs 	_EXPRExit
.9dcc		da		phx				phx 								; read the operator precedence
.9dcd		aa		tax				tax
.9dce		bd 7b 9d	lda $9d7b,x			lda 	PrecedenceLevel,x
.9dd1		fa		plx				plx
.9dd2		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9dd4		f0 1b		beq $9df1			beq 	_EXPRExit
.9dd6		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9dd8		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9dda		c5 37		cmp $37				cmp 	zTemp0+1
.9ddc		b0 13		bcs $9df1			bcs		_EXPRExit 					; if current >= operator exit
.9dde		48		pha				pha 								; save current precedence.
.9ddf		b1 30		lda ($30),y			lda 	(codePtr),y
.9de1		c8		iny				iny
.9de2		48		pha				pha
.9de3		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9de5		e8		inx				inx 								; work out the right hand side.
.9de6		20 bf 9d	jsr $9dbf			jsr 	EvaluateExpressionAtPrecedence
.9de9		ca		dex				dex
.9dea		68		pla				pla 								; get operator, call the code.
.9deb		20 f4 9d	jsr $9df4			jsr 	_EXPRCaller
.9dee		68		pla				pla 								; restore precedence level
.9def		80 d3		bra $9dc4			bra 	_EXPRLoop 					; and go round.
.9df1						_EXPRExit:
.9df1		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9df3		60		rts				rts
.9df4						_EXPRCaller:
.9df4		da		phx				phx 								; save on stack, first thing is to restore it
.9df5		0a		asl a				asl 	a 							; double so can use vectors into X
.9df6		aa		tax				tax
.9df7		7c a2 94	jmp ($94a2,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9dfa						FloatingPointAdd:
.9dfa		20 70 9f	jsr $9f70			jsr 	FloatPrepare 				; prepare for floats
.9dfd		80 09		bra $9e08			bra 	FloatAdd
.9dff						FloatingPointSub:
.9dff		20 70 9f	jsr $9f70			jsr 	FloatPrepare 				; prepare for floats
.9e02						FloatSubtract:
.9e02		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9e04		49 80		eor #$80			eor 	#$80
.9e06		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9e08						FloatAdd:
.9e08		48		pha				pha
.9e09		5a		phy				phy
.9e0a		20 7f 9f	jsr $9f7f			jsr 	NSNormalise 				; normalise S[X]
.9e0d		f0 51		beq $9e60			beq 	_FAReturn1
.9e0f		e8		inx				inx 								; normalise S[X+1]
.9e10		20 7f 9f	jsr $9f7f			jsr 	NSNormalise
.9e13		ca		dex				dex
.9e14		c9 00		cmp #$00			cmp 	#0
.9e16		f0 60		beq $9e78			beq 	_FAExit 					; if so, just return A
.9e18		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9e1a		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9e1c		f0 18		beq $9e36			beq 	_FAExponentsEqual
.9e1e		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9e20		a8		tay				tay
.9e21		38		sec				sec 								; do a signed comparison of the exponents.
.9e22		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9e24		50 02		bvc $9e28			bvc 	_FANoSignedChange
.9e26		49 80		eor #$80			eor 	#$80
.9e28						_FANoSignedChange:
.9e28		29 80		and #$80			and 	#$80
.9e2a		10 02		bpl $9e2e			bpl 	_FAHaveMax
.9e2c		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9e2e						_FAHaveMax:
.9e2e		20 7b 9e	jsr $9e7b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9e31		e8		inx				inx
.9e32		20 7b 9e	jsr $9e7b			jsr 	_FAShiftToExponent
.9e35		ca		dex				dex
.9e36						_FAExponentsEqual:
.9e36		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9e38		55 51		eor $51,x			eor 	NSStatus+1,x
.9e3a		30 0e		bmi $9e4a			bmi 	_FADifferentSigns
.9e3c		20 b3 9b	jsr $9bb3			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9e3f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9e41		10 35		bpl $9e78			bpl 	_FAExit 					; if no, we are done.
.9e43		20 2c a8	jsr $a82c			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9e46		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9e48		80 2e		bra $9e78			bra 	_FAExit
.9e4a						_FADifferentSigns:
.9e4a		20 cd 9b	jsr $9bcd			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9e4d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9e4f		10 06		bpl $9e57			bpl 	_FACheckZero 				; if no, check for -0
.9e51		20 d5 a7	jsr $a7d5			jsr 	NSMNegate 					; netate result
.9e54		20 dc a7	jsr $a7dc			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9e57						_FACheckZero:
.9e57		20 35 a8	jsr $a835			jsr 	NSMIsZero	 				; check for -0
.9e5a		d0 1c		bne $9e78			bne 	_FAExit
.9e5c		74 50		stz $50,x			stz 	NSStatus,x
.9e5e		80 18		bra $9e78			bra 	_FAExit
.9e60						_FAReturn1:
.9e60		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9e62		95 58		sta $58,x			sta 	NSMantissa0,x
.9e64		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9e66		95 60		sta $60,x			sta 	NSMantissa1,x
.9e68		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9e6a		95 68		sta $68,x			sta 	NSMantissa2,x
.9e6c		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9e6e		95 70		sta $70,x			sta 	NSMantissa3,x
.9e70		b5 79		lda $79,x			lda 	NSExponent+1,x
.9e72		95 78		sta $78,x			sta 	NSExponent,x
.9e74		b5 51		lda $51,x			lda 	NSStatus+1,x
.9e76		95 50		sta $50,x			sta 	NSStatus,x
.9e78						_FAExit:
.9e78		7a		ply				ply
.9e79		68		pla				pla
.9e7a		60		rts				rts
.9e7b						_FAShiftToExponent:
.9e7b						_FAShiftToExponent2:
.9e7b		98		tya				tya 								; compare Y to exponent
.9e7c		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9e7e		f0 07		beq $9e87			beq 	_FASEExit 					; exit if so.
.9e80		20 2c a8	jsr $a82c			jsr 	NSMShiftRight	 			; shift the mantissa right
.9e83		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9e85		80 f4		bra $9e7b			bra 	_FAShiftToExponent2
.9e87						_FASEExit:
.9e87		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9e88						CompareFloat:
.9e88		20 02 9e	jsr $9e02			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9e8b		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9e8d		29 f8		and #$f8			and 	#$F8
.9e8f		15 68		ora $68,x			ora 	NSMantissa2,x
.9e91		15 70		ora $70,x			ora 	NSMantissa3,x
.9e93		f0 08		beq $9e9d			beq 	_FCExit 					; zero, so approximately identical
.9e95		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9e97		34 50		bit $50,x			bit 	NSStatus,x
.9e99		10 02		bpl $9e9d			bpl 	_FCExit
.9e9b						_FCNegative:
.9e9b		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9e9d						_FCExit:
.9e9d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9e9e						FDivideCommand:
.9e9e		fa		plx				plx	 								; restore stack position
.9e9f		20 70 9f	jsr $9f70			jsr 	FloatPrepare 				; prepare for floats
.9ea2						FloatDivide:
.9ea2		48		pha				pha
.9ea3		e8		inx				inx
.9ea4		20 7f 9f	jsr $9f7f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9ea7		ca		dex				dex
.9ea8		c9 00		cmp #$00			cmp 	#0
.9eaa		f0 1d		beq $9ec9			beq 	_FDZero
.9eac		20 7f 9f	jsr $9f7f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9eaf		f0 16		beq $9ec7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9eb1		20 a4 9a	jsr $9aa4			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9eb4		20 40 9a	jsr $9a40			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9eb7		20 7f 9f	jsr $9f7f			jsr		NSNormalise 				; renormalise
.9eba		20 34 9b	jsr $9b34			jsr 	CalculateSign 				; calculate result sign
.9ebd		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9ebf		38		sec				sec
.9ec0		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9ec2		38		sec				sec
.9ec3		e9 1e		sbc #$1e			sbc 	#30
.9ec5		95 78		sta $78,x			sta 	NSExponent,x
.9ec7						_FDExit:
.9ec7		68		pla				pla
.9ec8		60		rts				rts
.9ec9						_FDZero:
.9ec9		a9 03		lda #$03		lda	#3
.9ecb		4c b3 98	jmp $98b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9ece						FloatFractionalPart:
.9ece		5a		phy				phy
.9ecf		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9ed1		29 7f		and #$7f			and 	#$7F
.9ed3		95 50		sta $50,x			sta 	NSStatus,x
.9ed5		20 7f 9f	jsr $9f7f			jsr 	NSNormalise
.9ed8		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9eda		38		sec				sec
.9edb		e9 e0		sbc #$e0			sbc 	#$E0
.9edd		90 29		bcc $9f08			bcc 	_FFPExit 					; already fractional
.9edf		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9ee1		b0 22		bcs $9f05			bcs 	_FFPZero
.9ee3		a8		tay				tay 								; put count to do in Y
.9ee4		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9ee6		20 0a 9f	jsr $9f0a			jsr 	_FFPPartial
.9ee9		95 70		sta $70,x			sta 	NSMantissa3,x
.9eeb		b5 68		lda $68,x			lda 	NSMantissa2,x
.9eed		20 0a 9f	jsr $9f0a			jsr 	_FFPPartial
.9ef0		95 68		sta $68,x			sta 	NSMantissa2,x
.9ef2		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ef4		20 0a 9f	jsr $9f0a			jsr 	_FFPPartial
.9ef7		95 60		sta $60,x			sta 	NSMantissa1,x
.9ef9		b5 58		lda $58,x			lda 	NSMantissa0,x
.9efb		20 0a 9f	jsr $9f0a			jsr 	_FFPPartial
.9efe		95 58		sta $58,x			sta 	NSMantissa0,x
.9f00		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; zeroed check.
.9f03		d0 03		bne $9f08			bne 	_FFPExit
.9f05						_FFPZero:
.9f05		20 13 a8	jsr $a813			jsr 	NSMSetZero
.9f08						_FFPExit:
.9f08		7a		ply				ply
.9f09		60		rts				rts
.9f0a						_FFPPartial:
.9f0a		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9f0c		f0 17		beq $9f25			beq 	_FFFPPExit
.9f0e		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9f10		b0 0c		bcs $9f1e			bcs 	_FFFPPWholeByte
.9f12		5a		phy				phy
.9f13						_FFFPPLeft:
.9f13		0a		asl a				asl 	a
.9f14		88		dey				dey
.9f15		d0 fc		bne $9f13			bne 	_FFFPPLeft
.9f17		7a		ply				ply
.9f18						_FFFPPRight:
.9f18		4a		lsr a				lsr 	a
.9f19		88		dey				dey
.9f1a		d0 fc		bne $9f18			bne 	_FFFPPRight
.9f1c		80 07		bra $9f25			bra 	_FFFPPExit
.9f1e						_FFFPPWholeByte:
.9f1e		98		tya				tya 								; subtract 8 from count
.9f1f		38		sec				sec
.9f20		e9 08		sbc #$08			sbc 	#8
.9f22		a8		tay				tay
.9f23		a9 00		lda #$00			lda 	#0 							; and clear all
.9f25						_FFFPPExit:
.9f25		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9f26						FloatIntegerPart:
.9f26		48		pha				pha
.9f27		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9f29		f0 1d		beq $9f48			beq 	_FIPExit 					; if so do nothing
.9f2b		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; is it zero ?
.9f2e		f0 15		beq $9f45			beq 	_FIPZero 					; if so return zero.
.9f30		20 7f 9f	jsr $9f7f			jsr 	NSNormalise 				; normalise
.9f33		f0 10		beq $9f45			beq 	_FIPZero 					; normalised to zero, exit zero
.9f35						_FIPShift:
.9f35		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9f37		10 07		bpl $9f40			bpl 	_FIPCheckZero
.9f39		20 2c a8	jsr $a82c			jsr 	NSMShiftRight 				; shift mantissa right
.9f3c		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9f3e		80 f5		bra $9f35			bra 	_FIPShift
.9f40						_FIPCheckZero:
.9f40		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; avoid -0 problem
.9f43		d0 03		bne $9f48			bne 	_FIPExit 					; set to zero if mantissa zero.
.9f45						_FIPZero:
.9f45		20 13 a8	jsr $a813			jsr 	NSMSetZero
.9f48						_FIPExit:
.9f48		68		pla				pla
.9f49		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9f4a						FloatingPointMultiply:
.9f4a		20 70 9f	jsr $9f70			jsr 	FloatPrepare 				; prepare for floats
.9f4d						FloatMultiply:
.9f4d		48		pha				pha
.9f4e		20 7f 9f	jsr $9f7f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9f51		f0 18		beq $9f6b			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9f53		e8		inx				inx
.9f54		20 7f 9f	jsr $9f7f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9f57		ca		dex				dex
.9f58		c9 00		cmp #$00			cmp 	#0
.9f5a		f0 0c		beq $9f68			beq 	_FDSetZero
.9f5c		20 f6 9a	jsr $9af6			jsr 	MultiplyShort 				; calculate the result.
.9f5f		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9f61		18		clc				clc
.9f62		75 79		adc $79,x			adc 	NSExponent+1,x
.9f64		95 78		sta $78,x			sta 	NSExponent,x
.9f66		80 03		bra $9f6b			bra 	_FDExit
.9f68						_FDSetZero:
.9f68		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; return 0
.9f6b						_FDExit:
.9f6b		20 7f 9f	jsr $9f7f			jsr 	NSNormalise 				; normalise the result
.9f6e		68		pla				pla
.9f6f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9f70						FloatPrepare:
.9f70		20 7b a0	jsr $a07b			jsr 	DereferenceTopTwo 			; dereference the top two values
.9f73		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9f75		15 51		ora $51,x			ora 	NSStatus+1,x
.9f77		29 10		and #$10			and 	#NSBIsString
.9f79		d0 01		bne $9f7c			bne 	_FDType
.9f7b		60		rts				rts
.9f7c						_FDType:
.9f7c		4c c2 aa	jmp $aac2			jmp 	TypeError
.9f7f						NSNormalise:
.9f7f		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9f81		29 80		and #$80			and 	#$80
.9f83		09 08		ora #$08			ora 	#NSTFloat
.9f85		95 50		sta $50,x			sta 	NSStatus,x
.9f87		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; if zero exit
.9f8a		d0 07		bne $9f93			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9f8c		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9f8e		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9f90		a9 00		lda #$00			lda 	#0 							; set Z flag
.9f92		60		rts				rts
.9f93						_NSNormaliseOptimise:
.9f93		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9f95		d0 19		bne $9fb0			bne 	_NSNormaliseLoop
.9f97		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9f99		30 15		bmi $9fb0			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9f9b		95 70		sta $70,x			sta 	NSMantissa3,x
.9f9d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f9f		95 68		sta $68,x			sta 	NSMantissa2,x
.9fa1		b5 58		lda $58,x			lda 	NSMantissa0,x
.9fa3		95 60		sta $60,x			sta 	NSMantissa1,x
.9fa5		74 58		stz $58,x			stz 	NSMantissa0,x
.9fa7		b5 78		lda $78,x			lda 	NSExponent,x
.9fa9		38		sec				sec
.9faa		e9 08		sbc #$08			sbc 	#8
.9fac		95 78		sta $78,x			sta 	NSExponent,x
.9fae		80 e3		bra $9f93			bra 	_NSNormaliseOptimise
.9fb0						_NSNormaliseLoop:
.9fb0		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9fb2		70 07		bvs $9fbb			bvs 	_NSNExit 					; exit if so with Z flag clear
.9fb4		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; shift mantissa left
.9fb7		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9fb9		80 f5		bra $9fb0			bra 	_NSNormaliseLoop
.9fbb						_NSNExit:
.9fbb		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9fbd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9fbe						AssignNumber:
.9fbe		5a		phy				phy
.9fbf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9fc1		85 36		sta $36				sta 	zTemp0
.9fc3		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fc5		85 37		sta $37				sta 	zTemp0+1
.9fc7		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9fc9		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9fcb		95 50		sta $50,x			sta 	NSStatus,x
.9fcd		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9fcf		c9 08		cmp #$08			cmp 	#NSTFloat
.9fd1		f0 24		beq $9ff7			beq 	_ANFloat
.9fd3		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9fd5		f0 03		beq $9fda			beq		_ANNotFloat
.9fd7		4c bd aa	jmp $aabd			jmp 	RangeError					; if it is, report an error.
.9fda						_ANNotFloat:
.9fda		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9fdc		29 03		and #$03			and 	#3
.9fde		d0 05		bne $9fe5			bne 	_ANByteWord
.9fe0		20 02 a0	jsr $a002			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9fe3		80 1b		bra $a000			bra 	_ANExit
.9fe5						_ANByteWord:
.9fe5		48		pha				pha 								; save count
.9fe6		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9fe8		92 36		sta ($36)			sta 	(zTemp0)
.9fea		68		pla				pla
.9feb		c9 01		cmp #$01			cmp	 	#1
.9fed		f0 11		beq $a000			beq 	_ANExit
.9fef		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ff1		a0 01		ldy #$01			ldy 	#1
.9ff3		91 36		sta ($36),y			sta 	(zTemp0),y
.9ff5		80 09		bra $a000			bra 	_ANExit
.9ff7						_ANFloat:
.9ff7		20 02 a0	jsr $a002			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9ffa		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9ffc		a0 04		ldy #$04			ldy 	#4
.9ffe		91 36		sta ($36),y			sta 	(zTemp0),y
.a000						_ANExit:
.a000		7a		ply				ply
.a001		60		rts				rts
.a002						_ANCopy4PackSign:
.a002		a0 03		ldy #$03			ldy 	#3
.a004		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.a006		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.a008		15 71		ora $71,x			ora 	NSMantissa3+1,x
.a00a		91 36		sta ($36),y			sta 	(zTemp0),y
.a00c		88		dey				dey
.a00d		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a00f		91 36		sta ($36),y			sta 	(zTemp0),y
.a011		88		dey				dey
.a012		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a014		91 36		sta ($36),y			sta 	(zTemp0),y
.a016		88		dey				dey
.a017		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a019		91 36		sta ($36),y			sta 	(zTemp0),y
.a01b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.a01c						AssignString:
.a01c		5a		phy				phy
.a01d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a01f		85 38		sta $38				sta 	zTemp1
.a021		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a023		85 39		sta $39				sta 	zTemp1+1
.a025		b5 58		lda $58,x			lda 	NSMantissa0,x
.a027		85 36		sta $36				sta 	zTemp0
.a029		b5 60		lda $60,x			lda 	NSMantissa1,x
.a02b		85 37		sta $37				sta 	zTemp0+1
.a02d		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.a02f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a031		f0 23		beq $a056			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.a033		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.a034		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.a036		e9 02		sbc #$02			sbc 	#2
.a038		85 3c		sta $3c				sta 	zsTemp
.a03a		a0 01		ldy #$01			ldy 	#1
.a03c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a03e		e9 00		sbc #$00			sbc 	#0
.a040		85 3d		sta $3d				sta 	zsTemp+1
.a042		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.a044						_ASGetLength:
.a044		c8		iny				iny
.a045		b1 38		lda ($38),y			lda 	(zTemp1),y
.a047		d0 fb		bne $a044			bne 	_ASGetLength
.a049		98		tya				tya 								; is this length <= current length
.a04a		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.a04c		90 1e		bcc $a06c			bcc 	_ASCopyString
.a04e		f0 1c		beq $a06c			beq 	_ASCopyString
.a050		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.a052		a0 01		ldy #$01			ldy 	#1
.a054		91 3c		sta ($3c),y			sta 	(zsTemp),y
.a056						_ASNewStringRequired:
.a056		e8		inx				inx 								; concrete the new string.
.a057		20 a5 b1	jsr $b1a5			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.a05a		ca		dex				dex
.a05b		18		clc				clc
.a05c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.a05e		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.a060		92 36		sta ($36)			sta 	(zTemp0)
.a062		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a064		69 00		adc #$00			adc 	#0
.a066		a0 01		ldy #$01			ldy 	#1
.a068		91 36		sta ($36),y			sta 	(zTemp0),y
.a06a		80 0d		bra $a079			bra 	_ASExit
.a06c						_ASCopyString:
.a06c		a0 00		ldy #$00			ldy 	#0
.a06e						_ASCopyLoop:
.a06e		b1 38		lda ($38),y			lda 	(zTemp1),y
.a070		c8		iny				iny
.a071		c8		iny				iny
.a072		91 3c		sta ($3c),y			sta 	(zsTemp),y
.a074		88		dey				dey
.a075		c9 00		cmp #$00			cmp 	#0
.a077		d0 f5		bne $a06e			bne 	_ASCopyLoop
.a079						_ASExit:
.a079		7a		ply				ply
.a07a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.a07b						DereferenceTopTwo:
.a07b		e8		inx				inx
.a07c		20 80 a0	jsr $a080			jsr 	Dereference 				; deref x+1
.a07f		ca		dex				dex  								; falls through to deref x
.a080						Dereference:
.a080		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.a082		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.a084		f0 48		beq $a0ce			beq 	_DRFExit 					; not a reference, so exit.
.a086		5a		phy				phy
.a087		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.a089		85 36		sta $36				sta 	zTemp0
.a08b		b5 60		lda $60,x			lda 	NSMantissa1,x
.a08d		85 37		sta $37				sta 	zTemp0+1
.a08f		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.a091		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a093		95 58		sta $58,x			sta 	NSMantissa0,x
.a095		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.a097		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a099		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a09b		f0 0e		beq $a0ab			beq 	_DRFDereferenceTwo
.a09d		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a09f		f0 2f		beq $a0d0			beq 	_DRFFull
.a0a1		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a0a3		29 03		and #$03			and 	#3
.a0a5		f0 29		beq $a0d0			beq 	_DRFFull 					; the whole word
.a0a7		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a0a9		f0 06		beq $a0b1			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a0ab						_DRFDereferenceTwo:
.a0ab		a0 01		ldy #$01			ldy 	#1
.a0ad		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0af		95 60		sta $60,x			sta 	NSMantissa1,x
.a0b1						_DRFClear23:
.a0b1		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a0b3		74 70		stz $70,x			stz 	NSMantissa3,x
.a0b5		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.a0b7		29 18		and #$18			and 	#NSBTypeMask
.a0b9		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.a0bb		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a0bd		d0 0e		bne $a0cd			bne 	_DRFNotString
.a0bf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.a0c1		15 60		ora $60,x			ora 	NSMantissa1,x
.a0c3		d0 08		bne $a0cd			bne 	_DRFNotString
.a0c5		a9 cf		lda #$cf			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a0c7		95 58		sta $58,x			sta 	NSMantissa0,x
.a0c9		a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a0cb		95 60		sta $60,x			sta 	NSMantissa1,x
.a0cd						_DRFNotString
.a0cd		7a		ply				ply 								; restore Y and exit
.a0ce						_DRFExit:
.a0ce		60		rts				rts
.a0cf						_DRFNullString:
>a0cf		00						.byte 	0
.a0d0						_DRFFull:
.a0d0		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a0d2		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0d4		95 60		sta $60,x			sta 	NSMantissa1,x
.a0d6		c8		iny				iny
.a0d7		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0d9		95 68		sta $68,x			sta 	NSMantissa2,x
.a0db		c8		iny				iny
.a0dc		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0de		95 70		sta $70,x			sta 	NSMantissa3,x
.a0e0		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.a0e2		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.a0e4		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a0e6		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.a0e8		f0 05		beq $a0ef			beq 	_DRFNoExponent
.a0ea		c8		iny				iny 								; if not, read the exponent as well.
.a0eb		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0ed		95 78		sta $78,x			sta 	NSExponent,x
.a0ef						_DRFNoExponent:
.a0ef		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a0f1		10 0a		bpl $a0fd			bpl 	_DRFExit2 					; if not, then exit.
.a0f3		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a0f5		95 70		sta $70,x			sta 	NSMantissa3,x
.a0f7		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.a0f9		09 80		ora #$80			ora 	#NSBIsNegative
.a0fb		95 50		sta $50,x			sta 	NSStatus,x
.a0fd						_DRFExit2:
.a0fd		7a		ply				ply
.a0fe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.a0ff						EncodeNumberStart:
.a0ff		38		sec				sec
.a100		80 01		bra $a103			bra 	EncodeNumberContinue+1
.a102						EncodeNumberContinue:
.a102		18		clc				clc
.a103						EncodeNumber:
.a103		08		php				php 								; save reset flag.
.a104		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a106		f0 12		beq $a11a			beq 	_ENIsOkay
.a108		c9 30		cmp #$30			cmp 	#"0"
.a10a		90 04		bcc $a110			bcc 	_ENBadNumber
.a10c		c9 3a		cmp #$3a			cmp 	#"9"+1
.a10e		90 0a		bcc $a11a			bcc 	_ENIsOkay
.a110						_ENBadNumber:
.a110		28		plp				plp 								; throw saved reset
.a111		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.a114		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a116		f0 7b		beq $a193			beq 	_ENConstructFinal
.a118						_ENFail:
.a118		18		clc				clc 								; not allowed
.a119		60		rts				rts
.a11a						_ENIsOkay:
.a11a		28		plp				plp 								; are we restarting
.a11b		90 15		bcc $a132			bcc 	_ENNoRestart
.a11d						_ENStartEncode:
.a11d		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.a11f		f0 0c		beq $a12d			beq 	_ENFirstDP
.a121		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a123		20 15 a8	jsr $a815			jsr 	NSMSetByte 					; in single byte mode.
.a126		a9 01		lda #$01			lda 	#ESTA_Low
.a128						_ENExitChange:
.a128		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a12b		38		sec				sec
.a12c		60		rts				rts
.a12d						_ENFirstDP:
.a12d		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; clear integer part
.a130		80 3c		bra $a16e			bra 	_ESTASwitchFloat			; go straight to float and exi
.a132						_ENNoRestart:
.a132		48		pha				pha 								; save digit or DP on stack.
.a133		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a136		c9 01		cmp #$01			cmp 	#ESTA_Low
.a138		f0 09		beq $a143			beq  	_ESTALowState
.a13a		c9 02		cmp #$02			cmp 	#ESTA_High
.a13c		f0 26		beq $a164			beq 	_ESTAHighState
.a13e		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a140		f0 38		beq $a17a			beq 	_ESTADecimalState
>a142		db						.byte 	$DB 						; causes a break in the emulator
.a143						_ESTALowState:
.a143		68		pla				pla 								; get value back
.a144		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a146		f0 26		beq $a16e			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a148		29 0f		and #$0f			and 	#15 						; make digit
.a14a		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a14d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a14f		0a		asl a				asl 	a
.a150		0a		asl a				asl 	a
.a151		75 58		adc $58,x			adc 	NSMantissa0,x
.a153		0a		asl a				asl 	a
.a154		6d 06 04	adc $0406			adc 	digitTemp
.a157		95 58		sta $58,x			sta 	NSMantissa0,x
.a159		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a15b		90 05		bcc $a162			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a15d		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a15f		8d 05 04	sta $0405			sta 	encodeState
.a162						_ESTANoSwitch:
.a162		38		sec				sec
.a163		60		rts				rts
.a164						_ESTAHighState:
.a164		68		pla				pla 								; get value back
.a165		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a167		f0 05		beq $a16e			beq 	_ESTASwitchFloat
.a169		20 c7 a1	jsr $a1c7			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a16c		38		sec				sec
.a16d		60		rts				rts
.a16e						_ESTASwitchFloat:
.a16e		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a171		e8		inx				inx 								; zero the decimal additive.
.a172		20 13 a8	jsr $a813			jsr 	NSMSetZero
.a175		ca		dex				dex
.a176		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a178		80 ae		bra $a128			bra 	_ENExitChange
.a17a						_ESTADecimalState:
.a17a		68		pla				pla 								; digit.
.a17b		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a17d		f0 99		beq $a118			beq 	_ENFail
.a17f		e8		inx				inx 								; put digit into fractional part of X+1
.a180		20 c7 a1	jsr $a1c7			jsr 	ESTAShiftDigitIntoMantissa
.a183		ca		dex				dex
.a184		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a187		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a18a		c9 0b		cmp #$0b			cmp 	#11
.a18c		f0 02		beq $a190			beq 	_ESTADSFail
.a18e		38		sec				sec
.a18f		60		rts				rts
.a190						_ESTADSFail:
.a190		4c bd aa	jmp $aabd			jmp 	RangeError
.a193						_ENConstructFinal:
.a193		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a196		f0 2d		beq $a1c5			beq 	_ENCFExit 					; no decimals
.a198		5a		phy				phy
.a199		0a		asl a				asl 	a 							; x 4 and CLC
.a19a		0a		asl a				asl 	a
.a19b		6d 07 04	adc $0407			adc 	decimalCount
.a19e		a8		tay				tay
.a19f		b9 7c aa	lda $aa7c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a1a2		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a1a4		b9 7d aa	lda $aa7d,y			lda 	DecimalScalarTable-5+1,y
.a1a7		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a1a9		b9 7e aa	lda $aa7e,y			lda 	DecimalScalarTable-5+2,y
.a1ac		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a1ae		b9 7f aa	lda $aa7f,y			lda 	DecimalScalarTable-5+3,y
.a1b1		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a1b3		b9 80 aa	lda $aa80,y			lda 	DecimalScalarTable-5+4,y
.a1b6		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a1b8		a9 08		lda #$08			lda 	#NSTFloat
.a1ba		95 52		sta $52,x			sta 	NSStatus+2,x
.a1bc		7a		ply				ply
.a1bd		e8		inx				inx 								; multiply decimal const by decimal scalar
.a1be		20 4d 9f	jsr $9f4d			jsr 	FloatMultiply
.a1c1		ca		dex				dex
.a1c2		20 08 9e	jsr $9e08			jsr 	FloatAdd 					; add to integer part.
.a1c5						_ENCFExit:
.a1c5		18		clc				clc 								; reject the digit.
.a1c6		60		rts				rts
.a1c7						ESTAShiftDigitIntoMantissa:
.a1c7		29 0f		and #$0f			and 	#15 						; save digit
.a1c9		48		pha				pha
.a1ca		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a1cc		48		pha				pha
.a1cd		b5 68		lda $68,x			lda 	NSMantissa2,x
.a1cf		48		pha				pha
.a1d0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1d2		48		pha				pha
.a1d3		b5 58		lda $58,x			lda 	NSMantissa0,x
.a1d5		48		pha				pha
.a1d6		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; x 2
.a1d9		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; x 4
.a1dc		18		clc				clc 								; pop mantissa and add
.a1dd		68		pla				pla
.a1de		75 58		adc $58,x			adc 	NSMantissa0,x
.a1e0		95 58		sta $58,x			sta 	NSMantissa0,x
.a1e2		68		pla				pla
.a1e3		75 60		adc $60,x			adc 	NSMantissa1,x
.a1e5		95 60		sta $60,x			sta 	NSMantissa1,x
.a1e7		68		pla				pla
.a1e8		75 68		adc $68,x			adc 	NSMantissa2,x
.a1ea		95 68		sta $68,x			sta 	NSMantissa2,x
.a1ec		68		pla				pla
.a1ed		75 70		adc $70,x			adc 	NSMantissa3,x
.a1ef		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a1f1		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; x 10
.a1f4		68		pla				pla 								; add digit
.a1f5		18		clc				clc
.a1f6		75 58		adc $58,x			adc 	NSMantissa0,x
.a1f8		95 58		sta $58,x			sta 	NSMantissa0,x
.a1fa		90 0a		bcc $a206			bcc 	_ESTASDExit
.a1fc		f6 60		inc $60,x			inc 	NSMantissa1,x
.a1fe		d0 06		bne $a206			bne 	_ESTASDExit
.a200		f6 68		inc $68,x			inc 	NSMantissa2,x
.a202		d0 02		bne $a206			bne 	_ESTASDExit
.a204		f6 70		inc $70,x			inc 	NSMantissa3,x
.a206						_ESTASDExit:
.a206		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a207						EvaluateTerm:
.a207		b1 30		lda ($30),y			lda 	(codePtr),y
.a209		30 18		bmi $a223			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a20b		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a20d		b0 6c		bcs $a27b			bcs 	_ETVariable
.a20f		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a211		90 6b		bcc $a27e			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a213		c9 3a		cmp #$3a			cmp 	#'9'+1
.a215		b0 67		bcs $a27e			bcs 	_ETPuncUnary
.a217		20 ff a0	jsr $a0ff			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a21a						_ETNumber:
.a21a		c8		iny				iny 								; keep encoding until we have the numbers
.a21b		b1 30		lda ($30),y			lda 	(codePtr),y
.a21d		20 02 a1	jsr $a102			jsr 	EncodeNumberContinue
.a220		b0 f8		bcs $a21a			bcs 	_ETNumber 					; go back if accepted.
.a222		60		rts				rts
.a223						_ETCheckUnary:
.a223		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a225		f0 3f		beq $a266			beq 	_ETString
.a227		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a229		f0 12		beq $a23d			beq 	_ETHexConstant
.a22b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a22d		90 0b		bcc $a23a			bcc 	_ETSyntaxError
.a22f		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a231		b0 07		bcs $a23a			bcs 	_ETSyntaxError
.a233		da		phx				phx 								; push X on the stack
.a234		0a		asl a				asl 	a 							; put vector x 2 into X
.a235		aa		tax				tax
.a236		c8		iny				iny 								; consume unary function token
.a237		7c 22 95	jmp ($9522,x)			jmp 	(VectorSet0,x) 				; and do it.
.a23a						_ETSyntaxError:
.a23a		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.a23d						_ETHexConstant:
.a23d		c8		iny				iny 								; skip #
.a23e		c8		iny				iny 								; skip count
.a23f		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; clear result
.a242						_ETHLoop:
.a242		b1 30		lda ($30),y			lda 	(codePtr),y
.a244		c8		iny				iny 								; and consume
.a245		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a247		f0 1c		beq $a265			beq 	_ETHExit
.a249		48		pha				pha 								; save on stack.
.a24a		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; x 2
.a24d		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; x 4
.a250		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; x 8
.a253		20 22 a8	jsr $a822			jsr 	NSMShiftLeft 				; x 16
.a256		68		pla				pla 								; ASCII
.a257		c9 41		cmp #$41			cmp 	#'A'
.a259		90 02		bcc $a25d			bcc 	_ETHNotChar
.a25b		e9 07		sbc #$07			sbc 	#7
.a25d						_ETHNotChar:
.a25d		29 0f		and #$0f			and 	#15 						; digit now
.a25f		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a261		95 58		sta $58,x			sta 	NSMantissa0,x
.a263		80 dd		bra $a242			bra 	_ETHLoop 					; go round.
.a265						_ETHExit:
.a265		60		rts				rts
.a266						_ETString:
.a266		c8		iny				iny 								; look at length
.a267		b1 30		lda ($30),y			lda 	(codePtr),y
.a269		48		pha				pha
.a26a		c8		iny				iny 								; first character
.a26b		20 3f ad	jsr $ad3f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a26e		68		pla				pla 								; restore count and save
.a26f		85 36		sta $36				sta 	zTemp0
.a271		98		tya				tya 								; add length to Y to skip it.
.a272		18		clc				clc
.a273		65 36		adc $36				adc 	zTemp0
.a275		a8		tay				tay
.a276		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a278		95 50		sta $50,x			sta 	NSStatus,x
.a27a		60		rts				rts
.a27b						_ETVariable:
.a27b		4c d0 a2	jmp $a2d0			jmp 	VariableHandler
.a27e						_ETPuncUnary:
.a27e		c8		iny				iny 								; consume the unary character
.a27f		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a281		f0 2b		beq $a2ae			beq 	_ETUnaryNegate
.a283		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a285		f0 36		beq $a2bd			beq 	_ETDereference
.a287		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a289		f0 3e		beq $a2c9			beq 	_ETParenthesis
.a28b		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a28d		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a28f		f0 06		beq $a297			beq 	_ETIndirection
.a291		e6 36		inc $36				inc 	zTemp0
.a293		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a295		d0 a3		bne $a23a			bne 	_ETSyntaxError
.a297						_ETIndirection:
.a297		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a299		1a		inc a				inc 	a
.a29a		48		pha				pha
.a29b		20 07 a2	jsr $a207			jsr 	EvaluateTerm				; evaluate the term
.a29e		20 80 a0	jsr $a080			jsr 	Dereference 				; dereference it.
.a2a1		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a2a3		d0 06		bne $a2ab			bne 	_ETTypeMismatch
.a2a5		68		pla				pla 								; indirection 1-2
.a2a6		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a2a8		95 50		sta $50,x			sta 	NSStatus,x
.a2aa		60		rts				rts
.a2ab						_ETTypeMismatch:
.a2ab		4c c2 aa	jmp $aac2			jmp 	TypeError
.a2ae						_ETUnaryNegate:
.a2ae		20 07 a2	jsr $a207			jsr 	EvaluateTerm				; evaluate the term
.a2b1		20 80 a0	jsr $a080			jsr 	Dereference 				; dereference it.
.a2b4		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a2b6		29 10		and #$10			and 	#NSTString
.a2b8		d0 f1		bne $a2ab			bne 	_ETTypeMismatch
.a2ba		4c d5 a7	jmp $a7d5			jmp 	NSMNegate  					; just toggles the sign bit.
.a2bd						_ETDereference:
.a2bd		20 07 a2	jsr $a207			jsr 	EvaluateTerm				; evaluate the term
.a2c0		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a2c2		29 20		and #$20			and 	#NSBIsReference
.a2c4		f0 e5		beq $a2ab			beq 	_ETTypeMismatch
.a2c6		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a2c8		60		rts				rts
.a2c9						_ETParenthesis:
.a2c9		20 bd 9d	jsr $9dbd			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a2cc		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; check for )
.a2cf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a2d0						VariableHandler:
.a2d0		b1 30		lda ($30),y			lda 	(codePtr),y
.a2d2		18		clc				clc
.a2d3		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a2d5		85 37		sta $37				sta 	zTemp0+1
.a2d7		c8		iny				iny
.a2d8		b1 30		lda ($30),y			lda 	(codePtr),y
.a2da		85 36		sta $36				sta 	zTemp0
.a2dc		c8		iny				iny
.a2dd		18		clc				clc									; copy variable address+3 to mantissa
.a2de		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a2e0		95 58		sta $58,x			sta 	NSMantissa0,x
.a2e2		a5 37		lda $37				lda 	zTemp0+1
.a2e4		69 00		adc #$00			adc 	#0
.a2e6		95 60		sta $60,x			sta 	NSMantissa1,x
.a2e8		74 68		stz $68,x			stz 	NSMantissa2,x
.a2ea		74 70		stz $70,x			stz 	NSMantissa3,x
.a2ec		74 78		stz $78,x			stz 	NSExponent,x
.a2ee		5a		phy				phy
.a2ef		a0 02		ldy #$02			ldy 	#2 							; read type
.a2f1		b1 36		lda ($36),y			lda 	(zTemp0),y
.a2f3		7a		ply				ply
.a2f4		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a2f6		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a2f8		95 50		sta $50,x			sta 	NSStatus,x
.a2fa		29 04		and #$04			and 	#NSBIsArray
.a2fc		d0 01		bne $a2ff			bne 	_VHArray
.a2fe		60		rts				rts
.a2ff						_VHArray:
.a2ff		e8		inx				inx
.a300		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a303		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a305		95 51		sta $51,x			sta 	NSStatus+1,x
.a307		b1 30		lda ($30),y			lda 	(codePtr),y
.a309		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a30b		d0 06		bne $a313			bne 	_VHNoSecondIndex
.a30d		c8		iny				iny 								; skip the comma
.a30e		e8		inx				inx
.a30f		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a312		ca		dex				dex
.a313						_VHNoSecondIndex:
.a313		ca		dex				dex 								; set X back.
.a314		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; and check the right bracket.
.a317		5a		phy				phy 								; save position
.a318		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a31a		85 3e		sta $3e				sta 	zaTemp
.a31c		b5 60		lda $60,x			lda 	NSMantissa1,x
.a31e		85 3f		sta $3f				sta 	zaTemp+1
.a320		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a322		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a324		f0 5d		beq $a383			beq 	_VHBadArray
.a326		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a328		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a32a		f0 02		beq $a32e			beq 	_VHHas2Mask
.a32c		a9 ff		lda #$ff			lda 	#$FF
.a32e						_VHHas2Mask:
.a32e		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a330		f0 4c		beq $a37e			beq 	_VHBadIndex
.a332		0a		asl a				asl 	a 							; carry will be set if a second index
.a333		90 08		bcc $a33d			bcc 	_VHCheckFirstIndex
.a335		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a337		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a339		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a33b		90 41		bcc $a37e			bcc 	_VHBadIndex
.a33d						_VHCheckFirstIndex:
.a33d		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a33f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a341		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a343		90 39		bcc $a37e			bcc 	_VHBadIndex
.a345		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a347		64 37		stz $37				stz 	zTemp0+1
.a349		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a34b		30 0e		bmi $a35b			bmi 	_VHNoMultiply
.a34d		da		phx				phx
.a34e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a350		48		pha				pha
.a351		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a353		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a355		1a		inc a				inc 	a 							; add 1 for zero base
.a356		fa		plx				plx
.a357		20 be a7	jsr $a7be			jsr 	Multiply8x8 				; calculate -> Z0
.a35a		fa		plx				plx
.a35b						_VHNoMultiply:
.a35b		18		clc				clc
.a35c		a5 36		lda $36				lda 	zTemp0
.a35e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a360		85 36		sta $36				sta 	zTemp0
.a362		a5 37		lda $37				lda 	zTemp0+1
.a364		69 00		adc #$00			adc 	#0
.a366		85 37		sta $37				sta 	zTemp0+1
.a368		b5 50		lda $50,x			lda 	NSStatus,x
.a36a		20 04 88	jsr $8804			jsr 	ScaleByBaseType
.a36d		18		clc				clc
.a36e		b2 3e		lda ($3e)			lda 	(zaTemp)
.a370		65 36		adc $36				adc 	zTemp0
.a372		95 58		sta $58,x			sta 	NSMantissa0,x
.a374		a0 01		ldy #$01			ldy 	#1
.a376		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a378		65 37		adc $37				adc 	zTemp0+1
.a37a		95 60		sta $60,x			sta 	NSMantissa1,x
.a37c		7a		ply				ply 								; restore position
.a37d		60		rts				rts
.a37e						_VHBadIndex:
.a37e		a9 17		lda #$17		lda	#23
.a380		4c b3 98	jmp $98b3		jmp	ErrorHandler
.a383						_VHBadArray:
.a383		a9 18		lda #$18		lda	#24
.a385		4c b3 98	jmp $98b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a388						AbsUnary:
.a388		fa		plx				plx 								; restore stack pos
.a389		20 61 a7	jsr $a761			jsr 	EvaluateNumber 				; get a float or int
.a38c		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a38f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a391		29 7f		and #$7f			and 	#$7F
.a393		95 50		sta $50,x			sta 	NSStatus,x
.a395		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a396						AllocUnary:
.a396		fa		plx				plx 								; restore stack pos
.a397		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger		; get bytes required.
.a39a		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a39d		da		phx				phx 								; save X/Y
.a39e		5a		phy				phy
.a39f		8a		txa				txa 								; copy X into Y
.a3a0		a8		tay				tay
.a3a1		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a3a4		aa		tax				tax
.a3a5		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a3a8		20 b5 a3	jsr $a3b5			jsr 	AllocateXABytes 			; allocate memory
.a3ab		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a3ae		8a		txa				txa 	 							; typing is 16 bit integer.
.a3af		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a3b2		7a		ply				ply
.a3b3		fa		plx				plx
.a3b4		60		rts				rts
.a3b5						AllocateXABytes:
.a3b5		5a		phy				phy
.a3b6		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a3b9		84 36		sty $36				sty 	zTemp0
.a3bb		5a		phy				phy
.a3bc		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a3bf		84 37		sty $37				sty 	zTemp0+1
.a3c1		5a		phy				phy
.a3c2		18		clc				clc 								; add to low memory pointer
.a3c3		6d 08 04	adc $0408			adc 	lowMemPtr
.a3c6		8d 08 04	sta $0408			sta 	lowMemPtr
.a3c9		8a		txa				txa
.a3ca		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a3cd		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a3d0		b0 2f		bcs $a401			bcs 	CISSMemory
.a3d2		20 f3 a3	jsr $a3f3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a3d5						_ClearMemory:
.a3d5		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a3d8		c5 36		cmp $36				cmp 	zTemp0
.a3da		d0 07		bne $a3e3			bne 	_CMClearNext
.a3dc		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a3df		c5 37		cmp $37				cmp 	zTemp0+1
.a3e1		f0 0c		beq $a3ef			beq 	_CMExit
.a3e3						_CMClearNext:
.a3e3		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a3e5		92 36		sta ($36)			sta 	(zTemp0)
.a3e7		e6 36		inc $36				inc 	zTemp0
.a3e9		d0 ea		bne $a3d5			bne 	_ClearMemory
.a3eb		e6 37		inc $37				inc		zTemp0+1
.a3ed		80 e6		bra $a3d5			bra 	_ClearMemory
.a3ef						_CMExit:
.a3ef		fa		plx				plx
.a3f0		68		pla				pla
.a3f1		7a		ply				ply
.a3f2		60		rts				rts
.a3f3						CheckIdentifierStringSpace:
.a3f3		48		pha				pha
.a3f4		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a3f7		18		clc				clc
.a3f8		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a3fa		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a3fd		b0 02		bcs $a401			bcs 	CISSMemory
.a3ff		68		pla				pla
.a400		60		rts				rts
.a401						CISSMemory:
.a401		a9 06		lda #$06		lda	#6
.a403		4c b3 98	jmp $98b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a406						AscUnary:
.a406		fa		plx				plx 								; restore stack pos
.a407		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; get a string
.a40a		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a40c		20 15 a8	jsr $a815			jsr 	NSMSetByte 					; ASC("") will return zero.
.a40f		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a412		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a413						FracUnary:
.a413		fa		plx				plx 								; restore stack pos
.a414		20 61 a7	jsr $a761			jsr 	EvaluateNumber 				; get a float or int
.a417		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a41a		b5 50		lda $50,x			lda 	NSStatus,x
.a41c		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a41e		f0 04		beq $a424			beq 	_IUZero
.a420		20 ce 9e	jsr $9ece			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a423		60		rts				rts
.a424						_IUZero:
.a424		20 13 a8	jsr $a813			jsr 	NSMSetZero
.a427		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a428						IntUnary:
.a428		fa		plx				plx 								; restore stack pos
.a429		20 61 a7	jsr $a761			jsr 	EvaluateNumber 				; get a float or int
.a42c		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a42f		b5 50		lda $50,x			lda 	NSStatus,x
.a431		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a433		f0 03		beq $a438			beq 	_IUExit
.a435		20 26 9f	jsr $9f26			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a438						_IUExit:
.a438		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a439						LenUnary:
.a439		fa		plx				plx 								; restore stack pos
.a43a		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; get a string
.a43d		5a		phy				phy
.a43e		a0 00		ldy #$00			ldy 	#0 							; find length
.a440						_LenFind:
.a440		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a442		f0 06		beq $a44a			beq 	_LenExit
.a444		c8		iny				iny
.a445		d0 f9		bne $a440			bne 	_LenFind
.a447		4c bd aa	jmp $aabd			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a44a						_LenExit:
.a44a		98		tya				tya		 							; return length
.a44b		20 15 a8	jsr $a815			jsr 	NSMSetByte
.a44e		7a		ply				ply
.a44f		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a452		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a453						Unary_Min:
.a453		a9 01		lda #$01			lda 	#1
.a455		80 02		bra $a459			bra 	UnaryMinMaxMain
.a457						Unary_Max:
.a457		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a459						UnaryMinMaxMain:
.a459		fa		plx				plx 								; get index on number stack
.a45a		48		pha				pha 								; save comparator
.a45b		20 58 a7	jsr $a758			jsr 	EvaluateValue 				; get the first value.
.a45e						_UMMMLoop:
.a45e		b1 30		lda ($30),y			lda 	(codePtr),y
.a460		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a462		f0 22		beq $a486			beq 	_UMMMDone
.a464		20 a2 98	jsr $98a2			jsr 	CheckComma 					; must be a comma
.a467		e8		inx				inx
.a468		20 58 a7	jsr $a758			jsr 	EvaluateValue
.a46b		ca		dex				dex
.a46c		20 f6 a7	jsr $a7f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a46f		e8		inx				inx
.a470		20 f6 a7	jsr $a7f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a473		e8		inx				inx
.a474		20 70 99	jsr $9970			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a477		ca		dex				dex
.a478		ca		dex				dex
.a479		85 36		sta $36				sta 	zTemp0 						; save required result
.a47b		68		pla				pla 								; get and save comparator
.a47c		48		pha				pha
.a47d		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a47f		d0 dd		bne $a45e			bne 	_UMMMLoop
.a481		20 89 a4	jsr $a489			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a484		80 d8		bra $a45e			bra 	_UMMMLoop
.a486						_UMMMDone:
.a486		68		pla				pla 								; throw the comparator
.a487		c8		iny				iny 								; skip )
.a488		60		rts				rts
.a489						ExpCopyAboveDown:
.a489		b5 51		lda $51,x			lda 	NSStatus+1,x
.a48b		95 50		sta $50,x			sta 	NSStatus,x
.a48d		b5 79		lda $79,x			lda 	NSExponent+1,x
.a48f		95 78		sta $78,x			sta 	NSExponent,x
.a491		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a493		95 58		sta $58,x			sta 	NSMantissa0,x
.a495		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a497		95 60		sta $60,x			sta 	NSMantissa1,x
.a499		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a49b		95 68		sta $68,x			sta 	NSMantissa2,x
.a49d		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a49f		95 70		sta $70,x			sta 	NSMantissa3,x
.a4a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a4a2						Unary_Not:
.a4a2		fa		plx				plx
.a4a3		20 80 a7	jsr $a780			jsr 	EvaluateInteger 			; get integer
.a4a6		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a4a9		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; zero mantissa ?
.a4ac		f0 04		beq $a4b2			beq 	_NotZero
.a4ae		20 13 a8	jsr $a813			jsr 	NSMSetZero
.a4b1		60		rts				rts
.a4b2						_NotZero:
.a4b2		4c 26 99	jmp $9926			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a4b5						PeekByteUnary:
.a4b5		a9 01		lda #$01			lda 	#1
.a4b7		80 0a		bra $a4c3			bra 	PeekUnary
.a4b9						PeekWUnary:
.a4b9		a9 02		lda #$02			lda 	#2
.a4bb		80 06		bra $a4c3			bra 	PeekUnary
.a4bd						PeekLUnary:
.a4bd		a9 03		lda #$03			lda 	#3
.a4bf		80 02		bra $a4c3			bra 	PeekUnary
.a4c1						PeekDUnary:
.a4c1		a9 04		lda #$04			lda 	#4
.a4c3						PeekUnary:
.a4c3		fa		plx				plx 								; restore position.
.a4c4		48		pha				pha 								; save count to copy on stack
.a4c5		20 93 a7	jsr $a793			jsr		Evaluate16BitInteger 		; address as constant.
.a4c8		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a4cb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a4cd		85 36		sta $36				sta 	zTemp0
.a4cf		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4d1		85 37		sta $37				sta 	zTemp0+1
.a4d3		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; clear the result to zero.
.a4d6		68		pla				pla 								; count in zTemp2
.a4d7		85 3a		sta $3a				sta 	zTemp2
.a4d9		da		phx				phx 								; save stack position and offset of read
.a4da		5a		phy				phy
.a4db		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a4dd						_PULoop:
.a4dd		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a4df		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a4e1		c8		iny				iny 								; next byte to write
.a4e2		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a4e3		18		clc				clc
.a4e4		69 08		adc #$08			adc 	#MathStackSize
.a4e6		aa		tax				tax
.a4e7		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a4e9		d0 f2		bne $a4dd			bne 	_PULoop
.a4eb		7a		ply				ply 								; restore stack/code pos and exit.
.a4ec		fa		plx				plx
.a4ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a4ee						SgnUnary:
.a4ee		fa		plx				plx 								; restore stack pos
.a4ef		20 61 a7	jsr $a761			jsr 	EvaluateNumber 				; get a float or int
.a4f2		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a4f5		20 35 a8	jsr $a835			jsr 	NSMIsZero 					; if zero
.a4f8		f0 0e		beq $a508			beq 	_SGZero  					; return Int Zero
.a4fa		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a4fc		48		pha				pha
.a4fd		a9 01		lda #$01			lda 	#1 							; set to 1
.a4ff		20 15 a8	jsr $a815			jsr 	NSMSetByte
.a502		68		pla				pla
.a503		29 80		and #$80			and		#$80 						; copy the sign byte out
.a505		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a507		60		rts				rts
.a508		20 13 a8	jsr $a813	_SGZero:jsr 	NSMSetZero
.a50b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a50c						ValUnary:
.a50c		fa		plx				plx 								; restore stack pos
.a50d		20 22 a5	jsr $a522			jsr 	ValMainCode 				; do the main val() code
.a510		b0 01		bcs $a513			bcs 	_VUError 					; couldn't convert
.a512		60		rts				rts
.a513						_VUError:
.a513		4c c2 aa	jmp $aac2			jmp 	TypeError
.a516						IsValUnary:
.a516		fa		plx				plx 								; restore stack pos
.a517		20 22 a5	jsr $a522			jsr 	ValMainCode 				; do the main val() code
.a51a		b0 03		bcs $a51f			bcs 	_VUBad
.a51c		4c 26 99	jmp $9926			jmp 	ReturnTrue
.a51f						_VUBad:
.a51f		4c 31 99	jmp $9931			jmp 	ReturnFalse
.a522						ValMainCode:
.a522		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; get a string
.a525		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; check right bracket present
.a528						ValEvaluateZTemp0:
.a528		5a		phy				phy
.a529		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a52b		f0 17		beq $a544			beq 	_VMCFail2
.a52d		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a52f		48		pha				pha 								; save first character
.a530		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a532		d0 01		bne $a535			bne 	_VMCStart
.a534		c8		iny				iny 								; skip over -
.a535						_VMCStart:
.a535		38		sec				sec 								; initialise first time round.
.a536						_VMCNext:
.a536		c8		iny				iny 								; pre-increment
.a537		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a539		f0 0c		beq $a547			beq 	_VMCSuccess 				; successful.
.a53b		20 03 a1	jsr $a103			jsr 	EncodeNumber 				; send it to the number-builder
.a53e		90 03		bcc $a543			bcc 	_VMCFail 					; if failed, give up.
.a540		18		clc				clc 								; next time round, countinue
.a541		80 f3		bra $a536			bra 	_VMCNext
.a543						_VMCFail:
.a543		68		pla				pla
.a544						_VMCFail2:
.a544		7a		ply				ply
.a545		38		sec				sec
.a546		60		rts				rts
.a547						_VMCSuccess:
.a547		a9 00		lda #$00			lda 	#0 							; construct final
.a549		20 03 a1	jsr $a103			jsr 	EncodeNumber 				; by sending a duff value.
.a54c		68		pla				pla 								; if it was -ve
.a54d		c9 2d		cmp #$2d			cmp 	#"-"
.a54f		d0 03		bne $a554			bne 	_VMCNotNegative
.a551		20 d5 a7	jsr $a7d5			jsr		NSMNegate 					; negate it.
.a554						_VMCNotNegative:
.a554		7a		ply				ply
.a555		18		clc				clc
.a556		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a557						ChrUnary:
.a557		fa		plx				plx 								; restore stack pos
.a558		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a55b		48		pha				pha
.a55c		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a55f		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a561		20 22 b2	jsr $b222			jsr 	StringTempAllocate
.a564		68		pla				pla 								; write number to it
.a565		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a568		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a569						ItemCountUnary:
.a569		fa		plx				plx
.a56a		20 6b a7	jsr $a76b			jsr 	EvaluateString
.a56d		e8		inx				inx
.a56e		20 e1 a5	jsr $a5e1			jsr 	ICGetSeperator
.a571		ca		dex				dex
.a572		20 02 a6	jsr $a602			jsr 	ICSetPointer 				; zTemp0 = (string)
.a575		20 13 a8	jsr $a813			jsr 	NSMSetZero 					; zero the result.
.a578		5a		phy				phy
.a579		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a57b						_ICULoop:
.a57b		c8		iny				iny
.a57c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a57e		cd a3 07	cmp $07a3			cmp 	ICSeperator
.a581		d0 02		bne $a585			bne 	_ICUNoMatch
.a583		f6 58		inc $58,x			inc 	NSMantissa0,x
.a585						_ICUNoMatch:
.a585		c9 00		cmp #$00			cmp 	#0
.a587		d0 f2		bne $a57b			bne 	_ICULoop
.a589		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a58b		7a		ply				ply
.a58c		60		rts				rts
.a58d						ItemGetUnary:
.a58d		fa		plx				plx
.a58e		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; search string
.a591		20 a2 98	jsr $98a2			jsr 	CheckComma
.a594		e8		inx				inx 								; get count
.a595		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.a598		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a59a		f0 61		beq $a5fd			beq 	ICGSRange
.a59c		e8		inx				inx 								; get seperator.
.a59d		20 e1 a5	jsr $a5e1			jsr 	ICGetSeperator
.a5a0		ca		dex				dex
.a5a1		ca		dex				dex
.a5a2		5a		phy				phy
.a5a3		20 02 a6	jsr $a602			jsr 	ICSetPointer 				; zTemp0 points to string.
.a5a6		a0 00		ldy #$00			ldy 	#0
.a5a8		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a5aa		f0 0e		beq $a5ba			beq 	_IGUFoundStart
.a5ac						_IGUFindNext:
.a5ac		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a5ae		f0 4d		beq $a5fd			beq 	ICGSRange 					; eol, not found.
.a5b0		c8		iny				iny
.a5b1		cd a3 07	cmp $07a3			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a5b4		d0 f6		bne $a5ac			bne 	_IGUFindNext
.a5b6		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a5b8		d0 f2		bne $a5ac			bne 	_IGUFindNext
.a5ba						_IGUFoundStart:
.a5ba		84 38		sty $38				sty 	zTemp1 						; save start
.a5bc		88		dey				dey
.a5bd						_IGUFindLength:
.a5bd		c8		iny				iny 								; forward till seperator/EOS
.a5be		b1 36		lda ($36),y			lda 	(zTemp0),y
.a5c0		f0 05		beq $a5c7			beq 	_IGUFoundLength
.a5c2		cd a3 07	cmp $07a3			cmp 	ICSeperator
.a5c5		d0 f6		bne $a5bd			bne 	_IGUFindLength
.a5c7						_IGUFoundLength:
.a5c7		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a5c9		98		tya				tya 								; calculate length of new string.
.a5ca		38		sec				sec
.a5cb		e5 38		sbc $38				sbc 	zTemp1
.a5cd		20 22 b2	jsr $b222			jsr 	StringTempAllocate 			; allocate bytes for it.
.a5d0		a4 38		ldy $38				ldy 	zTemp1
.a5d2						_IGUCopySub:
.a5d2		c4 39		cpy $39				cpy 	zTemp1+1
.a5d4		f0 08		beq $a5de			beq 	_IGUCopyOver
.a5d6		b1 36		lda ($36),y			lda 	(zTemp0),y
.a5d8		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a5db		c8		iny				iny
.a5dc		80 f4		bra $a5d2			bra 	_IGUCopySub
.a5de						_IGUCopyOver:
.a5de		7a		ply				ply
.a5df		60		rts				rts
>a5e0		db						.byte 	$DB 						; causes a break in the emulator
.a5e1						ICGetSeperator:
.a5e1		20 a2 98	jsr $98a2			jsr 	CheckComma 					; preceding comma
.a5e4		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; seperator string
.a5e7		20 02 a6	jsr $a602			jsr 	ICSetPointer 				; access it
.a5ea		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a5ec		8d a3 07	sta $07a3			sta 	ICSeperator
.a5ef		f0 0c		beq $a5fd			beq 	ICGSRange 					; check LEN(seperator) = 1
.a5f1		5a		phy				phy
.a5f2		a0 01		ldy #$01			ldy 	#1
.a5f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.a5f6		d0 05		bne $a5fd			bne 	ICGSRange
.a5f8		7a		ply				ply
.a5f9		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; check following )
.a5fc		60		rts				rts
.a5fd						ICGSRange:
.a5fd		a9 04		lda #$04		lda	#4
.a5ff		4c b3 98	jmp $98b3		jmp	ErrorHandler
.a602						ICSetPointer:
.a602		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a604		85 36		sta $36				sta 	zTemp0
.a606		b5 60		lda $60,x			lda 	NSMantissa1,x
.a608		85 37		sta $37				sta 	zTemp0+1
.a60a		60		rts				rts
.07a3						ICSeperator:
>07a3								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a60b						SpcUnary:
.a60b		fa		plx				plx 								; restore stack pos
.a60c		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger			; get value
.a60f		5a		phy				phy
.a610		48		pha				pha 								; save count
.a611		20 22 b2	jsr $b222			jsr 	StringTempAllocate
.a614		7a		ply				ply 								; to do count in Y
.a615						_SpcLoop:
.a615		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a617		f0 08		beq $a621			beq 	_SpcExit
.a619		a9 20		lda #$20			lda 	#32
.a61b		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a61e		88		dey				dey
.a61f		80 f4		bra $a615			bra 	_SpcLoop
.a621						_SpcExit:
.a621		7a		ply				ply
.a622		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a625		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a626						Unary_Str:
.a626		fa		plx				plx
.a627		20 61 a7	jsr $a761			jsr 	EvaluateNumber  			; get number
.a62a		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; closing bracket
.a62d		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a62f		20 48 a6	jsr $a648			jsr 	ConvertNumberToString 		; do the conversion.
.a632		a9 21		lda #$21			lda		#33 						; create buffer
.a634		20 22 b2	jsr $b222			jsr 	StringTempAllocate 			; allocate memory
.a637		da		phx				phx  								; copy the converted string into the buffer.
.a638		a2 00		ldx #$00			ldx 	#0
.a63a						_USCopy:
.a63a		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a63d		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a640		e8		inx				inx
.a641		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a644		d0 f4		bne $a63a			bne 	_USCopy
.a646		fa		plx				plx
.a647		60		rts				rts
.a648						ConvertNumberToString:
.a648		5a		phy				phy 								; save code position
.a649		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a64c		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a64f		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a651		10 09		bpl $a65c			bpl 	_CNTSNotNegative
.a653		29 7f		and #$7f			and 	#$7F 						; make +ve
.a655		95 50		sta $50,x			sta 	NSStatus,x
.a657		a9 2d		lda #$2d			lda 	#"-"
.a659		20 bd a6	jsr $a6bd			jsr 	WriteDecimalBuffer
.a65c						_CNTSNotNegative:
.a65c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a65e		f0 12		beq $a672			beq 	_CNTSNotFloat
.a660		e8		inx				inx 								; round up so we don't get too many 6.999999
.a661		a9 01		lda #$01			lda 	#1
.a663		20 15 a8	jsr $a815			jsr 	NSMSetByte
.a666		ca		dex				dex
.a667		b5 78		lda $78,x			lda		NSExponent,x
.a669		95 79		sta $79,x			sta 	NSExponent+1,x
.a66b		a9 08		lda #$08			lda 	#NSTFloat
.a66d		95 51		sta $51,x			sta 	NSStatus+1,x
.a66f		20 08 9e	jsr $9e08			jsr 	FloatAdd
.a672						_CNTSNotFloat:
.a672		20 9f a6	jsr $a69f			jsr 	MakePlusTwoString 			; do the integer part.
.a675		20 ce 9e	jsr $9ece			jsr 	FloatFractionalPart 		; get the fractional part
.a678		20 7f 9f	jsr $9f7f			jsr 	NSNormalise					; normalise , exit if zero
.a67b		f0 20		beq $a69d			beq 	_CNTSExit
.a67d		a9 2e		lda #$2e			lda 	#"."
.a67f		20 bd a6	jsr $a6bd			jsr 	WriteDecimalBuffer 			; write decimal place
.a682						_CNTSDecimal:
.a682		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a685		30 16		bmi $a69d			bmi 	_CNTSExit
.a687		e8		inx				inx 								; x 10.0
.a688		a9 0a		lda #$0a			lda 	#10
.a68a		20 15 a8	jsr $a815			jsr 	NSMSetByte
.a68d		a9 08		lda #$08			lda 	#NSTFloat
.a68f		95 50		sta $50,x			sta 	NSStatus,x
.a691		ca		dex				dex
.a692		20 4d 9f	jsr $9f4d			jsr 	FloatMultiply
.a695		20 9f a6	jsr $a69f			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a698		20 ce 9e	jsr $9ece			jsr 	FloatFractionalPart 		; get the fractional part
.a69b		80 e5		bra $a682			bra 	_CNTSDecimal 				; keep going.
.a69d						_CNTSExit:
.a69d		7a		ply				ply
.a69e		60		rts				rts
.a69f						MakePlusTwoString:
.a69f		da		phx				phx
.a6a0		20 f6 a7	jsr $a7f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a6a3		e8		inx				inx 								; access it
.a6a4		e8		inx				inx
.a6a5		20 26 9f	jsr $9f26			jsr 	FloatIntegerPart 			; make it an integer
.a6a8		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a6aa		20 38 9d	jsr $9d38			jsr 	ConvertInt32
.a6ad		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a6af						_MPTSCopy:
.a6af		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a6b2		20 bd a6	jsr $a6bd			jsr 	WriteDecimalBuffer
.a6b5		e8		inx				inx
.a6b6		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a6b9		d0 f4		bne $a6af			bne 	_MPTSCopy
.a6bb		fa		plx				plx
.a6bc		60		rts				rts
.a6bd						WriteDecimalBuffer:
.a6bd		da		phx				phx
.a6be		ae 11 04	ldx $0411			ldx 	dbOffset
.a6c1		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a6c4		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a6c7		ee 11 04	inc $0411			inc 	dbOffset
.a6ca		fa		plx				plx
.a6cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a6cc						Unary_Left:
.a6cc		fa		plx				plx
.a6cd		18		clc				clc 								; only one parameter
.a6ce		20 31 a7	jsr $a731			jsr 	SubstringInitial 			; set up.
.a6d1		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a6d3		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a6d5		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a6d7		80 25		bra $a6fe			bra 	SubstringMain
.a6d9						Unary_Right:
.a6d9		fa		plx				plx
.a6da		18		clc				clc 								; only one parameter
.a6db		20 31 a7	jsr $a731			jsr 	SubstringInitial 			; set up.
.a6de		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a6e0		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a6e2		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a6e4		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a6e6		b0 02		bcs $a6ea			bcs 	_URNotUnderflow
.a6e8		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a6ea						_URNotUnderflow:
.a6ea		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a6ec		80 10		bra $a6fe			bra 	SubstringMain
.a6ee						Unary_Mid:
.a6ee		fa		plx				plx
.a6ef		38		sec				sec 								; two parameters
.a6f0		20 31 a7	jsr $a731			jsr 	SubstringInitial 			; set up.
.a6f3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a6f5		f0 04		beq $a6fb			beq 	_UMError
.a6f7		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a6f9		80 03		bra $a6fe			bra 	SubstringMain
.a6fb						_UMError:
.a6fb		4c c7 aa	jmp $aac7			jmp 	ArgumentError
.a6fe						SubstringMain:
.a6fe		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a700		d5 78		cmp $78,x			cmp 	NSExponent,x
.a702		b0 27		bcs $a72b			bcs 	_SSMNull 					; if so, return an empty string.
.a704		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a706		f0 23		beq $a72b			beq 	_SSMNull 					; return empty string.
.a708		18		clc				clc 								; add the offset +1 to the address and
.a709		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a70b		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a70d		85 36		sta $36				sta 	zTemp0
.a70f		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a711		69 00		adc #$00			adc 	#0
.a713		85 37		sta $37				sta 	zTemp0+1
.a715						_SSMNoCarry:
.a715		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a717		20 22 b2	jsr $b222			jsr 	StringTempAllocate 			; allocate that many characters
.a71a		5a		phy				phy 								; save Y
.a71b		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a71d						_SSMCopy:
.a71d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a71f		f0 08		beq $a729			beq 	_SSMEString 				; no more to copy
.a721		20 5b b2	jsr $b25b			jsr 	StringTempWrite 			; and write it out.
.a724		c8		iny				iny
.a725		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a727		d0 f4		bne $a71d			bne 	_SSMCopy
.a729						_SSMEString:
.a729		7a		ply				ply
.a72a						_SSMExit:
.a72a		60		rts				rts
.a72b						_SSMNull:
.a72b		a9 00		lda #$00			lda 	#0
.a72d		20 22 b2	jsr $b222			jsr 	StringTempAllocate
.a730		60		rts				rts
.a731						SubstringInitial:
.a731		da		phx				phx 								; save initial stack position
.a732		08		php				php 								; save carry on stack indicating 2 parameters
.a733		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; get a string
.a736		5a		phy				phy 								; calculate length to exponent.
.a737		a0 ff		ldy #$ff			ldy 	#$FF
.a739						_SIFindLength:
.a739		c8		iny				iny
.a73a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a73c		d0 fb		bne $a739			bne 	_SIFindLength
.a73e		98		tya				tya
.a73f		95 78		sta $78,x			sta 	NSExponent,x
.a741		7a		ply				ply
.a742		e8		inx				inx
.a743		20 a2 98	jsr $98a2			jsr 	CheckComma 					; comma next
.a746		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get next parameter
.a749		28		plp				plp 								; is it the last parameter ?
.a74a		90 07		bcc $a753			bcc 	_SSIExit 					; if so, exit.
.a74c		e8		inx				inx
.a74d		20 a2 98	jsr $98a2			jsr 	CheckComma 					; comma next
.a750		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get last parameter
.a753						_SSIExit:
.a753		fa		plx				plx
.a754		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; check closing bracket
.a757		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a758						EvaluateValue:
.a758		48		pha				pha
.a759		20 bd 9d	jsr $9dbd			jsr		EvaluateExpression 			; expression
.a75c		20 80 a0	jsr $a080			jsr 	Dereference					; derefernce it
.a75f		68		pla				pla
.a760		60		rts				rts
.a761						EvaluateNumber:
.a761		20 58 a7	jsr $a758			jsr 	EvaluateValue 				; get a value
.a764		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a766		29 10		and #$10			and 	#NSBIsString
.a768		d0 13		bne $a77d			bne 	HelperTypeError
.a76a		60		rts				rts
.a76b						EvaluateString:
.a76b		20 58 a7	jsr $a758			jsr 	EvaluateValue 				; get a value
.a76e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a770		29 10		and #$10			and 	#NSBIsString
.a772		f0 09		beq $a77d			beq 	HelperTypeError
.a774						CopyAddressToTemp0:
.a774		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a776		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a778		b5 60		lda $60,x			lda 	NSMantissa1,x
.a77a		85 37		sta $37				sta 	zTemp0+1
.a77c		60		rts				rts
.a77d						HelperTypeError:
.a77d		4c c2 aa	jmp $aac2			jmp 	TypeError
.a780						EvaluateInteger:
.a780		20 61 a7	jsr $a761			jsr 	EvaluateNumber
.a783		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a785		d0 09		bne $a790			bne 	HelperValueError 			; if not, it's a float.
.a787		60		rts				rts
.a788						EvaluateUnsignedInteger:
.a788		20 80 a7	jsr $a780			jsr 	EvaluateInteger 			; check integer is +ve
.a78b		b5 50		lda $50,x			lda 	NSStatus,x
.a78d		30 01		bmi $a790			bmi 	HelperValueError
.a78f		60		rts				rts
.a790						HelperValueError:
.a790		4c c7 aa	jmp $aac7			jmp 	ArgumentError
.a793						Evaluate16BitInteger:
.a793		20 88 a7	jsr $a788			jsr	 	EvaluateUnsignedInteger		; get integer
.a796		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a798		15 68		ora $68,x			ora 	NSMantissa2,x
.a79a		d0 f4		bne $a790			bne 	HelperValueError
.a79c		60		rts				rts
.a79d						Evaluate16BitIntegerSigned:
.a79d		20 80 a7	jsr $a780			jsr	 	EvaluateInteger				; get integer
.a7a0		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a7a2		15 68		ora $68,x			ora 	NSMantissa2,x
.a7a4		d0 ea		bne $a790			bne 	HelperValueError
.a7a6		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a7a8		10 03		bpl $a7ad			bpl 	_EISNotSigned
.a7aa		20 dc a7	jsr $a7dc			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a7ad						_EISNotSigned:
.a7ad		60		rts				rts
.a7ae						Evaluate8BitInteger:
.a7ae		20 88 a7	jsr $a788			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a7b1		d0 dd		bne $a790			bne 	HelperValueError
.a7b3		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a7b5		15 68		ora $68,x			ora 	NSMantissa2,x
.a7b7		15 60		ora $60,x			ora 	NSMantissa1,x
.a7b9		d0 d5		bne $a790			bne 	HelperValueError
.a7bb		b5 58		lda $58,x			lda 	NSMantissa0,x
.a7bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a7be						Multiply8x8:
.a7be		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a7bf		85 36		sta $36			  	sta 	zTemp0
.a7c1		86 37		stx $37				stx 	zTemp0+1
.a7c3		a9 00		lda #$00			lda 	#0
.a7c5		a2 08		ldx #$08			ldx 	#8
.a7c7						_M88Loop:
.a7c7		90 03		bcc $a7cc			bcc 	_M88NoAdd
.a7c9		18		clc				clc
.a7ca		65 37		adc $37				adc 	zTemp0+1
.a7cc						_M88NoAdd:
.a7cc		6a		ror a				ror 	a
.a7cd		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a7cf		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a7d0		d0 f5		bne $a7c7			bne 	_M88Loop
.a7d2		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a7d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a7d5						NSMNegate:
.a7d5		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a7d7		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a7d9		95 50		sta $50,x			sta 	NSStatus,x
.a7db		60		rts				rts
.a7dc						NSMNegateMantissa:
.a7dc		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a7dd		a9 00		lda #$00			lda 	#0
.a7df		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a7e1		95 58		sta $58,x			sta 	NSMantissa0,x
.a7e3		a9 00		lda #$00			lda 	#0
.a7e5		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a7e7		95 60		sta $60,x			sta 	NSMantissa1,x
.a7e9		a9 00		lda #$00			lda 	#0
.a7eb		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a7ed		95 68		sta $68,x			sta 	NSMantissa2,x
.a7ef		a9 00		lda #$00			lda 	#0
.a7f1		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a7f3		95 70		sta $70,x			sta 	NSMantissa3,x
.a7f5		60		rts				rts
.a7f6						NSMShiftUpTwo:
.a7f6		b5 58		lda $58,x			lda 	NSMantissa0,x
.a7f8		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a7fa		b5 60		lda $60,x			lda 	NSMantissa1,x
.a7fc		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a7fe		b5 68		lda $68,x			lda 	NSMantissa2,x
.a800		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a802		b5 70		lda $70,x			lda 	NSMantissa3,x
.a804		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a806		b5 78		lda $78,x			lda 	NSExponent,x
.a808		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a80a		b5 50		lda $50,x			lda 	NSStatus,x
.a80c		95 52		sta $52,x			sta 	NSStatus+2,x
.a80e		60		rts				rts
.a80f						NSMSetZeroMantissaOnly:
.a80f		a9 00		lda #$00			lda 	#0
.a811		80 06		bra $a819			bra 	NSMSetMantissa
.a813						NSMSetZero:
.a813		a9 00		lda #$00			lda 	#0
.a815						NSMSetByte:
.a815		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a817		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a819						NSMSetMantissa:
.a819		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a81b		74 60		stz $60,x			stz 	NSMantissa1,x
.a81d		74 68		stz $68,x			stz 	NSMantissa2,x
.a81f		74 70		stz $70,x			stz 	NSMantissa3,x
.a821		60		rts				rts
.a822						NSMShiftLeft:
.a822		18		clc				clc
.a823						NSMRotateLeft:
.a823		36 58		rol $58,x			rol 	NSMantissa0,x
.a825		36 60		rol $60,x			rol		NSMantissa1,x
.a827		36 68		rol $68,x			rol		NSMantissa2,x
.a829		36 70		rol $70,x			rol		NSMantissa3,x
.a82b		60		rts				rts
.a82c						NSMShiftRight:
.a82c		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a82e		76 68		ror $68,x			ror		NSMantissa2,x
.a830		76 60		ror $60,x			ror		NSMantissa1,x
.a832		76 58		ror $58,x			ror		NSMantissa0,x
.a834		60		rts				rts
.a835						NSMIsZero:
.a835		b5 70		lda $70,x			lda 	NSMantissa3,x
.a837		15 68		ora $68,x			ora		NSMantissa2,x
.a839		15 60		ora $60,x			ora		NSMantissa1,x
.a83b		15 58		ora $58,x			ora		NSMantissa0,x
.a83d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.a83e						UnaryGetTime:
.a83e		a9 00		lda #$00			lda 	#0
.a840		80 02		bra $a844			bra 	UGDTMain
.a842						UnaryGetDate:
.a842		a9 03		lda #$03			lda 	#3
.a844						UGDTMain:
.a844		fa		plx				plx 								; get stack position back
.a845		48		pha				pha 								; save table offset
.a846		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger			; ignored parameter
.a849		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; closing )
.a84c		68		pla				pla 								; table offset in A
.a84d		5a		phy				phy 								; saving Y
.a84e		a8		tay				tay 								; table offset in Y
.a84f		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a851		20 22 b2	jsr $b222			jsr 	StringTempAllocate
.a854		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a856		48		pha				pha
.a857		64 01		stz $01				stz 	1
.a859		20 6c a8	jsr $a86c			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a85c		20 67 a8	jsr $a867			jsr 	UGDTColonDigit
.a85f		20 67 a8	jsr $a867			jsr 	UGDTColonDigit
.a862		68		pla				pla 								; restore I/O select
.a863		85 01		sta $01				sta 	1
.a865		7a		ply				ply  								; restore code position
.a866		60		rts				rts
.a867						UGDTColonDigit:
.a867		a9 3a		lda #$3a			lda 	#':'
.a869		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a86c						UGDTDigit:
.a86c		da		phx				phx 								; save X
.a86d		b9 8c a8	lda $a88c,y			lda 	RTCROffset,y 				; get offset in RTC register
.a870		aa		tax				tax
.a871		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a874		39 92 a8	and $a892,y			and 	RTCRMask,y 					; and with Mask.
.a877		fa		plx				plx
.a878		48		pha				pha 								; output in BCD
.a879		4a		lsr a				lsr 	a
.a87a		4a		lsr a				lsr 	a
.a87b		4a		lsr a				lsr 	a
.a87c		4a		lsr a				lsr 	a
.a87d		09 30		ora #$30			ora 	#48
.a87f		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a882		68		pla				pla
.a883		29 0f		and #$0f			and 	#15
.a885		09 30		ora #$30			ora 	#48
.a887		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a88a		c8		iny				iny
.a88b		60		rts				rts
.a88c						RTCROffset:
>a88c		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a892						RTCRMask:
>a892		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.a898						AscGet:
.a898		fa		plx				plx 								; restore stack pos
.a899						AscGet2:
.a899		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a89c		20 34 81	jsr $8134	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a89f		d0 0b		bne $a8ac			bne 	_AGBreak
.a8a1		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; wait for key.
.a8a4		c9 00		cmp #$00			cmp 	#0
.a8a6		f0 f4		beq $a89c			beq 	_AGKey
.a8a8		20 15 a8	jsr $a815			jsr 	NSMSetByte
.a8ab		60		rts				rts
.a8ac						_AGBreak:
.a8ac		a9 01		lda #$01		lda	#1
.a8ae		4c b3 98	jmp $98b3		jmp	ErrorHandler
.a8b1						AscInkey:
.a8b1		fa		plx				plx 								; restore stack pos
.a8b2						AscInkey2:
.a8b2		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a8b5		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a8b8		20 15 a8	jsr $a815			jsr 	NSMSetByte
.a8bb		60		rts				rts
.a8bc						ChrGet:
.a8bc		fa		plx				plx
.a8bd		20 99 a8	jsr $a899			jsr 	AscGet2
.a8c0		4c c7 a8	jmp $a8c7			jmp 	GetInkeyToString
.a8c3						ChrInkey:
.a8c3		fa		plx				plx
.a8c4		20 b2 a8	jsr $a8b2			jsr 	AscInkey2
.a8c7						GetInkeyToString:
.a8c7		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a8c9		f0 0b		beq $a8d6			beq 	_GKISNull
.a8cb		48		pha				pha
.a8cc		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a8ce		20 22 b2	jsr $b222			jsr 	StringTempAllocate
.a8d1		68		pla				pla 								; write number to it
.a8d2		20 5b b2	jsr $b25b			jsr 	StringTempWrite
.a8d5		60		rts				rts
.a8d6						_GKISNull:
.a8d6		a9 00		lda #$00			lda 	#0
.a8d8		20 22 b2	jsr $b222			jsr 	StringTempAllocate
.a8db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.a8dc						KeyDown:
.a8dc		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process outstanding events.
.a8df		fa		plx				plx 								; restore stack pos
.a8e0		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; key to check.
.a8e3		48		pha				pha 								; check right bracket.
.a8e4		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a8e7		68		pla				pla
.a8e8		20 61 82	jsr $8261			jsr 	KeyboardConvertXA 			; get offset and mask.
.a8eb		3d 5f 06	and $065f,x			and 	KeyStatus,x 				; is it zero ?
.a8ee		f0 03		beq $a8f3			beq 	_KeyUp
.a8f0		4c 26 99	jmp $9926			jmp 	ReturnTrue
.a8f3		4c 31 99	jmp $9931	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.a8f6						Unary_Random:
.a8f6		fa		plx				plx
.a8f7		20 47 a9	jsr $a947			jsr 	URCopyToMantissa  			; put random # in mantissa
.a8fa		b1 30		lda ($30),y			lda 	(codePtr),y
.a8fc		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a8fe		f0 08		beq $a908			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a900		e8		inx				inx
.a901		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a904		ca		dex				dex
.a905		20 78 9a	jsr $9a78			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a908						_URNoModulus:
.a908		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a90a		74 78		stz $78,x			stz 	NSExponent,x
.a90c		20 9a 98	jsr $989a			jsr 	CheckRightBracket
.a90f		60		rts				rts
.a910						Unary_Rnd:
.a910		fa		plx				plx
.a911		20 61 a7	jsr $a761			jsr 	EvaluateNumber 				; number to use.
.a914		20 9a 98	jsr $989a			jsr 	CheckRightBracket 			; closing bracket
.a917		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a919		10 20		bpl $a93b			bpl 	_URDontSeed
.a91b		a5 01		lda $01				lda 	1 							; switch to page 0
.a91d		48		pha				pha
.a91e		64 01		stz $01				stz 	1
.a920		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a922		49 17		eor #$17			eor 	#$17
.a924		8d a4 d6	sta $d6a4			sta 	$D6A4
.a927		b5 60		lda $60,x			lda 	NSMantissa1,x
.a929		49 a5		eor #$a5			eor 	#$A5
.a92b		8d a5 d6	sta $d6a5			sta 	$D6A5
.a92e		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a930		8d a6 d6	sta $d6a6			sta 	$D6A6
.a933		a9 01		lda #$01			lda 	#1
.a935		8d a6 d6	sta $d6a6			sta 	$D6A6
.a938		68		pla				pla
.a939		85 01		sta $01				sta 	1
.a93b						_URDontSeed:
.a93b		20 47 a9	jsr $a947			jsr 	URCopyToMantissa 			; copy into mantissa
.a93e		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a940		95 78		sta $78,x			sta 	NSExponent,x
.a942		a9 08		lda #$08			lda 	#NSTFloat
.a944		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a946		60		rts				rts
.a947						URCopyToMantissa:
.a947		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a949		48		pha				pha
.a94a		64 01		stz $01				stz 	1
.a94c		a9 01		lda #$01			lda 	#1
.a94e		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a951		ad a4 d6	lda $d6a4			lda 	$D6A4
.a954		95 58		sta $58,x			sta 	NSMantissa0,x
.a956		ad a5 d6	lda $d6a5			lda 	$D6A5
.a959		95 60		sta $60,x			sta 	NSMantissa1,x
.a95b		ad a4 d6	lda $d6a4			lda 	$D6A4
.a95e		95 68		sta $68,x			sta 	NSMantissa2,x
.a960		ad a5 d6	lda $d6a5			lda 	$D6A5
.a963		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a965		95 70		sta $70,x			sta 	NSMantissa3,x
.a967		68		pla				pla
.a968		85 01		sta $01				sta 	1
.a96a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a96b						Assemble_ora:
.a96b		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a96e		01					.byte $01
.a96f						Assemble_and:
.a96f		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a972		21					.byte $21
.a973						Assemble_eor:
.a973		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a976		41					.byte $41
.a977						Assemble_adc:
.a977		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a97a		61					.byte $61
.a97b						Assemble_sta:
.a97b		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a97e		81					.byte $81
.a97f						Assemble_lda:
.a97f		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a982		a1					.byte $a1
.a983						Assemble_cmp:
.a983		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a986		c1					.byte $c1
.a987						Assemble_sbc:
.a987		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a98a		e1					.byte $e1
.a98b						Assemble_asl:
.a98b		20 66 83	jsr $8366		jsr	AssembleGroup2
>a98e		02					.byte $02
>a98f		75					.byte $75
.a990						Assemble_rol:
.a990		20 66 83	jsr $8366		jsr	AssembleGroup2
>a993		22					.byte $22
>a994		75					.byte $75
.a995						Assemble_lsr:
.a995		20 66 83	jsr $8366		jsr	AssembleGroup2
>a998		42					.byte $42
>a999		75					.byte $75
.a99a						Assemble_ror:
.a99a		20 66 83	jsr $8366		jsr	AssembleGroup2
>a99d		62					.byte $62
>a99e		75					.byte $75
.a99f						Assemble_stx:
.a99f		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9a2		82					.byte $82
>a9a3		50					.byte $50
.a9a4						Assemble_ldx:
.a9a4		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9a7		a2					.byte $a2
>a9a8		d0					.byte $d0
.a9a9						Assemble_dec:
.a9a9		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9ac		c2					.byte $c2
>a9ad		55					.byte $55
.a9ae						Assemble_inc:
.a9ae		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9b1		e2					.byte $e2
>a9b2		55					.byte $55
.a9b3						Assemble_stz:
.a9b3		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9b6		60					.byte $60
>a9b7		44					.byte $44
.a9b8						Assemble_bit:
.a9b8		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9bb		20					.byte $20
>a9bc		55					.byte $55
.a9bd						Assemble_sty:
.a9bd		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9c0		80					.byte $80
>a9c1		54					.byte $54
.a9c2						Assemble_ldy:
.a9c2		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9c5		a0					.byte $a0
>a9c6		d5					.byte $d5
.a9c7						Assemble_cpy:
.a9c7		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9ca		c0					.byte $c0
>a9cb		d4					.byte $d4
.a9cc						Assemble_cpx:
.a9cc		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9cf		e0					.byte $e0
>a9d0		d0					.byte $d0
.a9d1						Assemble_tsb:
.a9d1		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9d4		00					.byte $00
>a9d5		50					.byte $50
.a9d6						Assemble_trb:
.a9d6		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9d9		10					.byte $10
>a9da		50					.byte $50
.a9db						Assemble_jsr:
.a9db		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9de		14					.byte $14
>a9df		10					.byte $10
.a9e0						Assemble_jmp:
.a9e0		20 66 83	jsr $8366		jsr	AssembleGroup2
>a9e3		40					.byte $40
>a9e4		10					.byte $10
.a9e5						Assemble_bpl:
.a9e5		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a9e8		10					.byte $10
.a9e9						Assemble_bmi:
.a9e9		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a9ec		30					.byte $30
.a9ed						Assemble_bvc:
.a9ed		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a9f0		50					.byte $50
.a9f1						Assemble_bvs:
.a9f1		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a9f4		70					.byte $70
.a9f5						Assemble_bcc:
.a9f5		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a9f8		90					.byte $90
.a9f9						Assemble_bcs:
.a9f9		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a9fc		b0					.byte $b0
.a9fd						Assemble_bne:
.a9fd		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>aa00		d0					.byte $d0
.aa01						Assemble_beq:
.aa01		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>aa04		f0					.byte $f0
.aa05						Assemble_bra:
.aa05		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>aa08		80					.byte $80
.aa09						Assemble_brk:
.aa09		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa0c		00					.byte $00
.aa0d						Assemble_php:
.aa0d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa10		08					.byte $08
.aa11						Assemble_clc:
.aa11		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa14		18					.byte $18
.aa15						Assemble_plp:
.aa15		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa18		28					.byte $28
.aa19						Assemble_sec:
.aa19		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa1c		38					.byte $38
.aa1d						Assemble_rti:
.aa1d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa20		40					.byte $40
.aa21						Assemble_pha:
.aa21		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa24		48					.byte $48
.aa25						Assemble_cli:
.aa25		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa28		58					.byte $58
.aa29						Assemble_phy:
.aa29		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa2c		5a					.byte $5a
.aa2d						Assemble_rts:
.aa2d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa30		60					.byte $60
.aa31						Assemble_pla:
.aa31		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa34		68					.byte $68
.aa35						Assemble_sei:
.aa35		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa38		78					.byte $78
.aa39						Assemble_ply:
.aa39		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa3c		7a					.byte $7a
.aa3d						Assemble_dey:
.aa3d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa40		88					.byte $88
.aa41						Assemble_txa:
.aa41		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa44		8a					.byte $8a
.aa45						Assemble_tya:
.aa45		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa48		98					.byte $98
.aa49						Assemble_txs:
.aa49		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa4c		9a					.byte $9a
.aa4d						Assemble_tay:
.aa4d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa50		a8					.byte $a8
.aa51						Assemble_tax:
.aa51		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa54		aa					.byte $aa
.aa55						Assemble_clv:
.aa55		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa58		b8					.byte $b8
.aa59						Assemble_tsx:
.aa59		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa5c		ba					.byte $ba
.aa5d						Assemble_iny:
.aa5d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa60		c8					.byte $c8
.aa61						Assemble_dex:
.aa61		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa64		ca					.byte $ca
.aa65						Assemble_cld:
.aa65		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa68		d8					.byte $d8
.aa69						Assemble_phx:
.aa69		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa6c		da					.byte $da
.aa6d						Assemble_stp:
.aa6d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa70		db					.byte $db
.aa71						Assemble_inx:
.aa71		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa74		e8					.byte $e8
.aa75						Assemble_nop:
.aa75		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa78		ea					.byte $ea
.aa79						Assemble_sed:
.aa79		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa7c		f8					.byte $f8
.aa7d						Assemble_plx:
.aa7d		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>aa80		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.aa81						DecimalScalarTable:
>aa81		66 66 66 66				.dword $66666666 ; 0.1
>aa85		de					.byte $de
>aa86		1f 85 eb 51				.dword $51eb851f ; 0.01
>aa8a		db					.byte $db
>aa8b		4c 37 89 41				.dword $4189374c ; 0.001
>aa8f		d8					.byte $d8
>aa90		ac 8b db 68				.dword $68db8bac ; 0.0001
>aa94		d4					.byte $d4
>aa95		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>aa99		d1					.byte $d1
>aa9a		83 de 1b 43				.dword $431bde83 ; 1e-06
>aa9e		ce					.byte $ce
>aa9f		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aaa3		ca					.byte $ca
>aaa4		89 3b e6 55				.dword $55e63b89 ; 1e-08
>aaa8		c7					.byte $c7
>aaa9		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>aaad		c4					.byte $c4
>aaae		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>aab2		c0					.byte $c0
>aab3		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>aab7		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.aab8						SyntaxError:
.aab8		a9 02		lda #$02		lda	#2
.aaba		4c b3 98	jmp $98b3		jmp	ErrorHandler
.aabd						RangeError:
.aabd		a9 04		lda #$04		lda	#4
.aabf		4c b3 98	jmp $98b3		jmp	ErrorHandler
.aac2						TypeError:
.aac2		a9 05		lda #$05		lda	#5
.aac4		4c b3 98	jmp $98b3		jmp	ErrorHandler
.aac7						ArgumentError:
.aac7		a9 07		lda #$07		lda	#7
.aac9		4c b3 98	jmp $98b3		jmp	ErrorHandler
.aacc						NotDoneError:
.aacc		a9 0c		lda #$0c		lda	#12
.aace		4c b3 98	jmp $98b3		jmp	ErrorHandler
.aad1						ErrorText:
>aad1		42 72 65 61 6b 00			.text	"Break",0
>aad7		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>aadf		72 72 6f 72 00
>aae4		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aaec		20 62 79 20 7a 65 72 6f 00
>aaf5		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aafd		61 6e 67 65 00
>ab02		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ab0a		6d 61 74 63 68 00
>ab10		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ab18		65 6d 6f 72 79 00
>ab1e		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ab26		61 72 67 75 6d 65 6e 74 00
>ab2f		53 74 6f 70 00				.text	"Stop",0
>ab34		53 74 72 69 6e 67 20 74			.text	"String too long",0
>ab3c		6f 6f 20 6c 6f 6e 67 00
>ab44		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ab4c		6e 20 66 61 69 6c 65 64 00
>ab55		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ab5d		61 74 61 00
>ab61		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ab69		65 6e 74 65 64 00
>ab6f		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ab77		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ab83		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ab8b		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ab98		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aba0		74 68 6f 75 74 20 52 65 70 65 61 74 00
>abad		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>abb5		68 6f 75 74 20 57 68 69 6c 65 00
>abc0		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>abc8		68 6f 75 74 20 46 6f 72 00
>abd1		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>abd9		61 63 6b 20 66 75 6c 6c 00
>abe2		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>abea		75 63 74 75 72 65 00
>abf1		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>abf9		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ac06		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ac0e		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ac1c		41 72 72 61 79 20 73 69			.text	"Array size",0
>ac24		7a 65 00
>ac27		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ac2f		79 20 69 6e 64 65 78 00
>ac37		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>ac3f		74 20 64 65 63 6c 61 72 65 64 00
>ac4a		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>ac52		20 66 6f 75 6e 64 00
>ac59		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>ac61		65 72 72 6f 72 00
>ac67		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>ac6f		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e7fa		09 09 32 39 2f 30 31 2f			.text 9,9,"29/01/23 33"
>e802		32 33 20 33 33

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.ac75						MemoryDeleteLine:
.ac75		20 94 ac	jsr $ac94			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac78		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ac7a		a8		tay				tay
.ac7b						_MDDLLoop:
.ac7b		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ac7d		92 30		sta ($30)			sta 	(codePtr)
.ac7f		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ac81		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ac83		d0 07		bne $ac8c			bne 	_MDLDLNext
.ac85		a5 31		lda $31				lda 	codePtr+1
.ac87		c5 3b		cmp $3b				cmp 	zTemp2+1
.ac89		d0 01		bne $ac8c			bne 	_MDLDLNext
.ac8b						_MDDLExit:
.ac8b		60		rts				rts
.ac8c						_MDLDLNext:
.ac8c		e6 30		inc $30				inc 	codePtr						; next byte
.ac8e		d0 eb		bne $ac7b			bne 	_MDDLLoop
.ac90		e6 31		inc $31				inc 	codePtr+1
.ac92		80 e7		bra $ac7b			bra 	_MDDLLoop
.ac94						IMemoryFindEnd:
.ac94		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac96		85 3a		sta $3a				sta 	0+zTemp2
.ac98		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac9a		85 3b		sta $3b				sta 	1+zTemp2
.ac9c						_MDLFELoop:
.ac9c		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.ac9e		f0 0b		beq $acab			beq 	_MDLFEExit
.aca0		18		clc				clc
.aca1		65 3a		adc $3a				adc 	zTemp2
.aca3		85 3a		sta $3a				sta 	zTemp2
.aca5		90 f5		bcc $ac9c			bcc 	_MDLFELoop
.aca7		e6 3b		inc $3b				inc 	zTemp2+1
.aca9		80 f1		bra $ac9c			bra 	_MDLFELoop
.acab						_MDLFEExit:
.acab		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.acac						MemoryInsertLine:
.acac		08		php				php
.acad		20 94 ac	jsr $ac94			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.acb0		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.acb2		1a		inc a				inc 	a
.acb3		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.acb5		b0 36		bcs $aced			bcs 	_MDLIError 					; no, fail.
.acb7		28		plp				plp 								; do at a specific point or the end ?
.acb8		90 08		bcc $acc2			bcc 	_MDLIFound 					; if specific point already set.
.acba		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.acbc		85 30		sta $30				sta 	codePtr 					; end.
.acbe		a5 3b		lda $3b				lda 	zTemp2+1
.acc0		85 31		sta $31				sta 	codePtr+1
.acc2						_MDLIFound:
.acc2		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.acc5		a8		tay				tay
.acc6						_MDLIInsert:
.acc6		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.acc8		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.acca		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.accc		c5 3a		cmp $3a				cmp 	zTemp2
.acce		d0 06		bne $acd6			bne 	_MDLINext
.acd0		a5 31		lda $31				lda 	codePtr+1
.acd2		c5 3b		cmp $3b				cmp 	zTemp2+1
.acd4		f0 0a		beq $ace0			beq 	_MDLIHaveSpace
.acd6						_MDLINext:
.acd6		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.acd8		d0 02		bne $acdc			bne 	_MDLINoBorrow
.acda		c6 3b		dec $3b				dec 	zTemp2+1
.acdc						_MDLINoBorrow:
.acdc		c6 3a		dec $3a				dec 	zTemp2
.acde		80 e6		bra $acc6			bra 	_MDLIInsert
.ace0						_MDLIHaveSpace:
.ace0		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.ace3		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.ace4						_MDLICopy:
.ace4		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ace7		91 30		sta ($30),y			sta 	(codePtr),y
.ace9		88		dey				dey
.acea		10 f8		bpl $ace4			bpl 	_MDLICopy
.acec		60		rts				rts
.aced						_MDLIError:
.aced		a9 06		lda #$06		lda	#6
.acef		4c b3 98	jmp $98b3		jmp	ErrorHandler
.acf2						MDLAppendLine:
.acf2		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.acf4		85 36		sta $36				sta 	zTemp0
.acf6		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.acf8		85 38		sta $38				sta 	0+zTemp1
.acfa		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.acfc		85 39		sta $39				sta 	1+zTemp1
.acfe		b2 38		lda ($38)			lda 	(zTemp1)
.ad00		d0 0a		bne $ad0c			bne 	_MDLANoInitialise
.ad02		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad04		8d a4 07	sta $07a4			sta 	0+AppendPointer
.ad07		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad09		8d a5 07	sta $07a5			sta 	1+AppendPointer
.ad0c						_MDLANoInitialise:
.ad0c		18		clc				clc
.ad0d		ad a4 07	lda $07a4			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ad10		85 38		sta $38				sta 	zTemp1
.ad12		72 36		adc ($36)			adc 	(zTemp0)
.ad14		8d a4 07	sta $07a4			sta 	AppendPointer
.ad17		ad a5 07	lda $07a5			lda 	AppendPointer+1
.ad1a		85 39		sta $39				sta 	zTemp1+1
.ad1c		69 00		adc #$00			adc 	#0
.ad1e		8d a5 07	sta $07a5			sta 	AppendPointer+1
.ad21		a0 00		ldy #$00			ldy 	#0
.ad23						_MDLACopy:
.ad23		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ad25		91 38		sta ($38),y			sta 	(zTemp1),y
.ad27		c8		iny				iny
.ad28		98		tya				tya
.ad29		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ad2b		d0 f6		bne $ad23			bne 	_MDLACopy
.ad2d		a9 00		lda #$00			lda 	#0 							; end of program.
.ad2f		91 38		sta ($38),y			sta 	(zTemp1),y
.ad31		60		rts				rts
.07a4						AppendPointer:
>07a4								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.ad32						MemoryNew:
.ad32		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad34		85 30		sta $30				sta 	codePtr
.ad36		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad38		85 31		sta $31				sta 	codePtr+1
.ad3a		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ad3c		92 30		sta ($30)			sta 	(codePtr)
.ad3e		60		rts				rts
.ad3f						MemoryInline:
.ad3f		98		tya				tya 								; put address into stack,x
.ad40		18		clc				clc  								; get the offset, add codePtr
.ad41		65 30		adc $30				adc 	codePtr
.ad43		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ad45		a5 31		lda $31				lda 	codePtr+1
.ad47		69 00		adc #$00			adc 	#0
.ad49		95 60		sta $60,x			sta 	NSMantissa1,x
.ad4b		74 68		stz $68,x			stz 	NSMantissa2,x
.ad4d		74 70		stz $70,x			stz 	NSMantissa3,x
.ad4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.ad50						MemorySearch:
.ad50		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ad52		86 37		stx $37				stx 	zTemp0+1
.ad54		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad56		85 30		sta $30				sta 	codePtr
.ad58		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad5a		85 31		sta $31				sta 	codePtr+1
.ad5c						_MTAXLoop:
.ad5c		b2 30		lda ($30)			lda 	(codePtr)
.ad5e		18		clc				clc
.ad5f		f0 21		beq $ad82			beq 	_MTAXExit 					; reached end, exit with CC.
.ad61		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ad63		b1 30		lda ($30),y			lda 	(codePtr),y
.ad65		38		sec				sec
.ad66		e5 36		sbc $36				sbc 	zTemp0
.ad68		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ad6a		c8		iny				iny 								; do the MSB
.ad6b		b1 30		lda ($30),y			lda 	(codePtr),y
.ad6d		e5 37		sbc $37				sbc 	zTemp0+1
.ad6f		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ad71		f0 0f		beq $ad82			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ad73		b0 0d		bcs $ad82			bcs 	_MTAXExit 					; current < required exit
.ad75		18		clc				clc
.ad76		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ad78		65 30		adc $30				adc 	codePtr
.ad7a		85 30		sta $30				sta 	codePtr
.ad7c		90 02		bcc $ad80			bcc 	_CREExit
.ad7e		e6 31		inc $31				inc 	codePtr+1 					; carry
.ad80						_CREExit:
.ad80		80 da		bra $ad5c			bra 	_MTAXLoop
.ad82						_MTAXExit:
.ad82		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.ad83						RectangleCommand:
.ad83		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.ad85		80 02		bra $ad89			bra 	ShapeDrawCmd
.ad87						CircleCommand:
.ad87		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.ad89						ShapeDrawCmd:
.ad89		20 13 ae	jsr $ae13			jsr 	RunGraphicsCommand
.ad8c						ShapeDraw:
.ad8c		0d a7 07	ora $07a7			ora 	gxFillSolid  				; adjust AXY for solid fill.
.ad8f		4c 07 ae	jmp $ae07			jmp 	ExecuteGraphicCommand	 	; and complete
.ad92						SpriteCommand:
.ad92		a2 00		ldx #$00			ldx 	#0
.ad94		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get image number.
.ad97		5a		phy				phy
.ad98		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.ad9a		a6 58		ldx $58				ldx 	NSMantissa0
.ad9c		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.ad9e		b0 0d		bcs $adad			bcs 	_SCRange
.ada0		a0 ff		ldy #$ff			ldy 	#255
.ada2		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ada5		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.ada7		7a		ply				ply
.ada8		20 13 ae	jsr $ae13			jsr 	RunGraphicsCommand
.adab		80 5a		bra $ae07			bra 	ExecuteGraphicCommand
.adad						_SCRange:
.adad		4c bd aa	jmp $aabd			jmp 	RangeError
.adb0						ImageCommand:
.adb0		a2 00		ldx #$00			ldx 	#0
.adb2		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get image number.
.adb5		20 13 ae	jsr $ae13			jsr 	RunGraphicsCommand
.adb8						ImageRunDraw:
.adb8		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.adba		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.adbd		ad ad 07	lda $07ad			lda 	gxDrawScale
.adc0		0a		asl a				asl 	a
.adc1		0a		asl a				asl 	a
.adc2		0a		asl a				asl 	a
.adc3		a8		tay				tay
.adc4		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.adc6		a6 58		ldx $58				ldx 	NSMantissa0
.adc8		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.adcb		60		rts				rts
.adcc						TextCommand:
.adcc		a2 00		ldx #$00			ldx 	#0
.adce		20 6b a7	jsr $a76b			jsr 	EvaluateString 				; get text
.add1		20 13 ae	jsr $ae13			jsr 	RunGraphicsCommand
.add4						TextRunDraw:
.add4		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.add6		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.add9		a0 00		ldy #$00			ldy 	#0
.addb						_IRDLoop:
.addb		a5 60		lda $60				lda 	NSMantissa1 				; access character
.addd		85 37		sta $37				sta 	zTemp0+1
.addf		a5 58		lda $58				lda 	NSMantissa0
.ade1		85 36		sta $36				sta 	zTemp0
.ade3		b1 36		lda ($36),y			lda 	(zTemp0),y
.ade5		f0 13		beq $adfa			beq 	_IRDExit
.ade7		5a		phy				phy									; save string pos
.ade8		48		pha				pha 								; save char
.ade9		ad ad 07	lda $07ad			lda 	gxDrawScale 				; get scale
.adec		0a		asl a				asl 	a
.aded		0a		asl a				asl 	a
.adee		0a		asl a				asl 	a
.adef		a8		tay				tay
.adf0		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.adf2		fa		plx				plx 								; char to draw
.adf3		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.adf6		7a		ply				ply 								; restore string pos
.adf7		c8		iny				iny
.adf8		90 e1		bcc $addb			bcc 	_IRDLoop 					; go back if no error.
.adfa						_IRDExit:
.adfa		60		rts				rts
.adfb						PlotCommand:
.adfb		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.adfd		20 13 ae	jsr $ae13			jsr 	RunGraphicsCommand
.ae00		80 05		bra $ae07			bra 	ExecuteGraphicCommand
.ae02						LineCommand:
.ae02		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.ae04		20 13 ae	jsr $ae13			jsr 	RunGraphicsCommand
.ae07						ExecuteGraphicCommand:
.ae07		0d a6 07	ora $07a6			ora 	gxCommandID 				; make a full command
.ae0a		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.ae0d		b0 01		bcs $ae10			bcs 	_EGCError
.ae0f		60		rts				rts
.ae10						_EGCError:
.ae10		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.ae13						RunGraphicsCommand:
.ae13		8d a6 07	sta $07a6			sta 	gxCommandID					; save TODO graphics command.
.ae16		68		pla				pla 								; pop handler address
.ae17		fa		plx				plx
.ae18		1a		inc a				inc 	a
.ae19		d0 01		bne $ae1c			bne 	_RGINoCarry
.ae1b		e8		inx				inx
.ae1c						_RGINoCarry:
.ae1c		8d ab 07	sta $07ab			sta 	gxHandler
.ae1f		8e ac 07	stx $07ac			stx 	gxHandler+1
.ae22						_RGICommandLoop:
.ae22		b1 30		lda ($30),y			lda 	(codePtr),y
.ae24		c8		iny				iny
.ae25		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.ae27		f0 53		beq $ae7c			beq 	_RGI_To
.ae29		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.ae2b		f0 55		beq $ae82			beq 	_RGI_Here
.ae2d		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.ae2f		f0 3d		beq $ae6e			beq 	_RGI_Exit
.ae31		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.ae33		f0 39		beq $ae6e			beq 	_RGI_Exit
.ae35		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.ae37		f0 3e		beq $ae77			beq 	_RGI_Frame
.ae39		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.ae3b		f0 33		beq $ae70			beq 	_RGI_Solid
.ae3d		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.ae3f		f0 4b		beq $ae8c			beq 	_RGI_By
.ae41		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.ae43		f0 17		beq $ae5c			beq 	_RGI_Move2
.ae45		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.ae47		f0 62		beq $aeab			beq 	_RGI_Dim
.ae49		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.ae4b		f0 74		beq $aec1			beq 	_RGI_Colour
.ae4d		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.ae4f		f0 70		beq $aec1			beq 	_RGI_Colour
.ae51		ae a6 07	ldx $07a6			ldx 	gxCommandID
.ae54		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.ae56		d0 03		bne $ae5b			bne 	_RGI_Move 					; move
.ae58		4c e9 ae	jmp $aee9			jmp		_RGI_SpriteInstructions
.ae5b						_RGI_Move:
.ae5b		88		dey				dey 								; unpick get.
.ae5c						_RGI_Move2:
.ae5c		20 0f af	jsr $af0f			jsr 	GCGetCoordinatePair 		; move to here
.ae5f		20 36 af	jsr $af36			jsr 	GCCopyPairToStore 			; save
.ae62		5a		phy				phy
.ae63		20 2c af	jsr $af2c			jsr 	GCLoadAXY 					; load in
.ae66		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.ae68		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae6b		7a		ply				ply
.ae6c		80 b4		bra $ae22			bra 	_RGICommandLoop 			; and go round
.ae6e						_RGI_Exit:
.ae6e		88		dey				dey 								; unpick : / EOL
.ae6f		60		rts				rts
.ae70						_RGI_Solid:
.ae70		a9 02		lda #$02			lda 	#2
.ae72		8d a7 07	sta $07a7			sta 	gxFillSolid
.ae75		80 ab		bra $ae22			bra 	_RGICommandLoop
.ae77						_RGI_Frame:
.ae77		9c a7 07	stz $07a7			stz 	gxFillSolid
.ae7a		80 a6		bra $ae22			bra 	_RGICommandLoop
.ae7c						_RGI_To:
.ae7c		20 0f af	jsr $af0f			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.ae7f		20 36 af	jsr $af36			jsr 	GCCopyPairToStore
.ae82						_RGI_Here:
.ae82		5a		phy				phy
.ae83		20 2c af	jsr $af2c			jsr 	GCLoadAXY 					; load it into AXY
.ae86		20 e6 ae	jsr $aee6			jsr 	_RGICallHandler 			; go do whatever it is.
.ae89		7a		ply				ply
.ae8a		80 96		bra $ae22			bra 	_RGICommandLoop 			; and go round
.ae8c						_RGI_By:
.ae8c		20 1c af	jsr $af1c			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.ae8f		18		clc				clc
.ae90		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ae92		6d a8 07	adc $07a8			adc 	gxXPos
.ae95		8d a8 07	sta $07a8			sta 	gxXPos
.ae98		a5 61		lda $61				lda 	NSMantissa1+1
.ae9a		6d a9 07	adc $07a9			adc 	gxXPos+1
.ae9d		8d a9 07	sta $07a9			sta 	gxXPos+1
.aea0		a5 5a		lda $5a				lda 	NSMantissa0+2
.aea2		18		clc				clc
.aea3		6d aa 07	adc $07aa			adc 	gxYPos
.aea6		8d aa 07	sta $07aa			sta 	gxYPos
.aea9		80 d7		bra $ae82			bra 	_RGI_Here
.aeab						_RGI_Dim:
.aeab		a2 01		ldx #$01			ldx	 	#1
.aead		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.aeb0		a5 59		lda $59				lda 	NSMantissa0+1
.aeb2		c9 00		cmp #$00			cmp 	#0
.aeb4		f0 2d		beq $aee3			beq 	_RGIRange
.aeb6		c9 09		cmp #$09			cmp 	#8+1
.aeb8		b0 29		bcs $aee3			bcs		_RGIRange
.aeba		3a		dec a				dec 	a
.aebb		8d ad 07	sta $07ad			sta 	gxDrawScale
.aebe		4c 22 ae	jmp $ae22			jmp 	_RGICommandLoop
.aec1						_RGI_Colour:
.aec1		a2 01		ldx #$01			ldx 	#1 							; colour
.aec3		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.aec6		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.aec8		20 13 a8	jsr $a813			jsr 	NSMSetZero
.aecb		b1 30		lda ($30),y			lda 	(codePtr),y
.aecd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.aecf		d0 04		bne $aed5			bne 	_RGICDefaultMode
.aed1		c8		iny				iny
.aed2		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.aed5						_RGICDefaultMode:
.aed5		5a		phy				phy
.aed6		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.aed8		a6 59		ldx $59				ldx 	NSMantissa0+1
.aeda		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aedc		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aedf		7a		ply				ply
.aee0		4c 22 ae	jmp $ae22			jmp 	_RGICommandLoop 			; and go round
.aee3						_RGIRange:
.aee3		4c bd aa	jmp $aabd			jmp 	RangeError
.aee6						_RGICallHandler:
.aee6		6c ab 07	jmp ($07ab)			jmp 	(gxHandler)
.aee9						_RGI_SpriteInstructions:
.aee9		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.aeeb		f0 07		beq $aef4			beq 	_RGISpriteOff
.aeed		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.aeef		f0 13		beq $af04			beq 	_RGISetImage
.aef1		4c 5b ae	jmp $ae5b			jmp 	_RGI_Move
.aef4						_RGISpriteOff:
.aef4		5a		phy				phy
.aef5		a0 01		ldy #$01			ldy 	#1
.aef7		a2 00		ldx #$00			ldx 	#0
.aef9						_RGIDoCommandLoop:
.aef9		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.aefb		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aefe		7a		ply				ply
.aeff		b0 e2		bcs $aee3			bcs 	_RGIRange
.af01		4c 22 ae	jmp $ae22			jmp 	_RGICommandLoop
.af04						_RGISetImage:
.af04		a2 01		ldx #$01			ldx 	#1
.af06		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger
.af09		5a		phy				phy
.af0a		aa		tax				tax
.af0b		a0 00		ldy #$00			ldy 	#0
.af0d		80 ea		bra $aef9			bra 	_RGIDoCommandLoop
.af0f						GCGetCoordinatePair:
.af0f		a2 01		ldx #$01			ldx 	#1
.af11		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.af14		20 a2 98	jsr $98a2			jsr 	CheckComma
.af17		e8		inx				inx
.af18		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger
.af1b		60		rts				rts
.af1c						GCSignedCoordinatePair:
.af1c		a2 01		ldx #$01			ldx 	#1
.af1e		20 9d a7	jsr $a79d			jsr 	Evaluate16BitIntegerSigned
.af21		20 a2 98	jsr $98a2			jsr 	CheckComma
.af24		e8		inx				inx
.af25		20 9d a7	jsr $a79d			jsr 	Evaluate16BitIntegerSigned
.af28		60		rts				rts
.af29						_GCCPRange:
.af29		4c bd aa	jmp $aabd			jmp 	RangeError
.af2c						GCLoadAXY:
.af2c		ad a9 07	lda $07a9			lda 	gxXPos+1
.af2f		ae a8 07	ldx $07a8			ldx 	gxXPos
.af32		ac aa 07	ldy $07aa			ldy 	gxYPos
.af35		60		rts				rts
.af36						GCCopyPairToStore:
.af36		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.af38		8d a8 07	sta $07a8			sta 	gxXPos
.af3b		a5 61		lda $61				lda 	NSMantissa1+1
.af3d		8d a9 07	sta $07a9			sta 	gxXPos+1
.af40		a5 5a		lda $5a				lda 	NSMantissa0+2
.af42		8d aa 07	sta $07aa			sta 	gxYPos
.af45		60		rts				rts
.07a6						gxCommandID:
>07a6								.fill 	1
.07a7						gxFillSolid:
>07a7								.fill 	1
.07a8						gxXPos:
>07a8								.fill 	2
.07aa						gxYPos:
>07aa								.fill 	1
.07ab						gxHandler:
>07ab								.fill 	2
.07ad						gxDrawScale:
>07ad								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.af46						BitmapCtrl:
.af46		b1 30		lda ($30),y			lda 	(codePtr),y
.af48		c8		iny				iny
.af49		a2 01		ldx #$01			ldx 	#1
.af4b		c9 cc		cmp #$cc			cmp 	#KWD_ON
.af4d		f0 11		beq $af60			beq 	BitmapSwitch
.af4f		ca		dex				dex
.af50		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.af52		f0 0c		beq $af60			beq 	BitmapSwitch
.af54		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get the colour
.af57		5a		phy				phy
.af58		aa		tax				tax
.af59		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.af5b		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.af5e		7a		ply				ply
.af5f		60		rts				rts
.af60						BitmapSwitch:
.af60		5a		phy				phy
.af61		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.af63		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.af65		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.af68		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.af6a		a0 00		ldy #$00			ldy 	#0
.af6c		a2 ff		ldx #$ff			ldx 	#$FF
.af6e		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.af71		9c a7 07	stz $07a7			stz 	gxFillSolid
.af74		9c a8 07	stz $07a8			stz 	gxXPos
.af77		9c a9 07	stz $07a9			stz 	gxXPos+1
.af7a		9c aa 07	stz $07aa			stz 	gxYPos
.af7d		9c ad 07	stz $07ad			stz 	gxDrawScale
.af80		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.af82		a2 00		ldx #$00			ldx 	#0
.af84		a0 00		ldy #$00			ldy 	#0
.af86		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.af89		7a		ply				ply
.af8a		60		rts				rts
.af8b						SpritesCtrl:
.af8b		b1 30		lda ($30),y			lda 	(codePtr),y
.af8d		c8		iny				iny
.af8e		a2 01		ldx #$01			ldx 	#1
.af90		c9 cc		cmp #$cc			cmp 	#KWD_ON
.af92		f0 08		beq $af9c			beq 	SpriteSwitch
.af94		ca		dex				dex
.af95		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.af97		f0 03		beq $af9c			beq 	SpriteSwitch
.af99		4c b8 aa	jmp $aab8			jmp 	SyntaxError
.af9c						SpriteSwitch:
.af9c		5a		phy				phy
.af9d		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.af9f		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.afa1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.afa4		7a		ply				ply
.afa5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.afa6						GfxCommand:
.afa6		a2 00		ldx #$00			ldx 	#0
.afa8		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; command
.afab		20 a2 98	jsr $98a2			jsr 	CheckComma
.afae		e8		inx				inx
.afaf		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger 		; X
.afb2		20 a2 98	jsr $98a2			jsr 	CheckComma
.afb5		e8		inx				inx
.afb6		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; Y
.afb9		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.afbb		4a		lsr a				lsr 	a
.afbc		d0 12		bne $afd0			bne 	_GfxError
.afbe		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.afc0		b0 0e		bcs $afd0			bcs 	_GfxError 					; bit 7 should have been zero
.afc2		5a		phy				phy 								; save pos
.afc3		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.afc5		a6 59		ldx $59				ldx 	NSMantissa0+1
.afc7		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.afc9		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.afcc		b0 02		bcs $afd0			bcs 	_GfxError
.afce		7a		ply				ply 								; restore pos and exit.
.afcf		60		rts				rts
.afd0						_GfxError:
.afd0		4c bd aa	jmp $aabd			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.afd3						UnaryHit:
.afd3		fa		plx				plx
.afd4		a9 36		lda #$36			lda 	#zTemp0
.afd6		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get sprite number 0
.afd9		20 a2 98	jsr $98a2			jsr 	CheckComma
.afdc		e8		inx				inx
.afdd		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get sprite number 1
.afe0		20 9a 98	jsr $989a			jsr		CheckRightBracket
.afe3		ca		dex				dex 								; fix back up again.
.afe4		da		phx				phx 								; save X/Y
.afe5		5a		phy				phy
.afe6		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.afe8		b5 58		lda $58,x			lda 	NSMantissa0,x
.afea		aa		tax				tax
.afeb		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.afed		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.aff0		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.aff1		7a		ply				ply 								; restore XY
.aff2		fa		plx				plx
.aff3		20 15 a8	jsr $a815			jsr 	NSMSetByte 					; return the hit result
.aff6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.aff7						PaletteCommand:
.aff7		a2 00		ldx #$00			ldx 	#0
.aff9		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; colour
.affc		20 a2 98	jsr $98a2			jsr 	CheckComma
.afff		e8		inx				inx
.b000		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger 		; r
.b003		20 a2 98	jsr $98a2			jsr 	CheckComma
.b006		e8		inx				inx
.b007		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; g
.b00a		20 a2 98	jsr $98a2			jsr 	CheckComma
.b00d		e8		inx				inx
.b00e		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; b
.b011		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.b013		85 36		sta $36				sta 	zTemp0
.b015		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.b017		85 37		sta $37				sta 	zTemp0+1
.b019		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.b01b		26 37		rol $37				rol	 	zTemp0+1
.b01d		06 36		asl $36				asl 	zTemp0
.b01f		26 37		rol $37				rol	 	zTemp0+1
.b021		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.b023		85 01		sta $01				sta 	1
.b025		5a		phy				phy
.b026		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.b028		92 36		sta ($36)			sta 	(zTemp0)
.b02a		a0 01		ldy #$01			ldy 	#1
.b02c		a5 5a		lda $5a				lda 	NSMantissa0+2
.b02e		91 36		sta ($36),y			sta 	(zTemp0),y
.b030		a5 59		lda $59				lda 	NSMantissa0+1
.b032		c8		iny				iny
.b033		91 36		sta ($36),y			sta 	(zTemp0),y
.b035		7a		ply				ply
.b036		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.b037						ClearScreen:
.b037		5a		phy				phy
.b038		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.b03a		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.b03d		7a		ply				ply
.b03e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b03f						PingCommand:
.b03f		5a		phy				phy 								; save pos
.b040		a9 01		lda #$01			lda 	#1 						; push channel.
.b042		48		pha				pha
.b043		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b045		a2 06		ldx #$06			ldx 	#6 						; length
.b047		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b049		80 24		bra $b06f			bra 	SoundEffectCommand
.b04b						ZapCommand:
.b04b		5a		phy				phy 								; save pos
.b04c		a9 01		lda #$01			lda 	#1 						; push channel.
.b04e		48		pha				pha
.b04f		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b051		a2 0a		ldx #$0a			ldx 	#10 						; length
.b053		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b055		80 18		bra $b06f			bra 	SoundEffectCommand
.b057						ShootCommand:
.b057		5a		phy				phy 								; save pos
.b058		a9 03		lda #$03			lda 	#3 						; push channel.
.b05a		48		pha				pha
.b05b		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b05d		a2 04		ldx #$04			ldx 	#4 						; length
.b05f		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b061		80 0c		bra $b06f			bra 	SoundEffectCommand
.b063						Explode:
.b063		5a		phy				phy 								; save pos
.b064		a9 03		lda #$03			lda 	#3 						; push channel.
.b066		48		pha				pha
.b067		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b069		a2 0a		ldx #$0a			ldx 	#10 						; length
.b06b		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b06d		80 00		bra $b06f			bra 	SoundEffectCommand
.b06f						SoundEffectCommand:
.b06f		8d ae 07	sta $07ae			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b072		9c af 07	stz $07af			stz 	SoundCommandBlock+1
.b075		a9 0f		lda #$0f			lda 	#15
.b077		8d b0 07	sta $07b0			sta 	SoundCommandBlock+2
.b07a		8e b1 07	stx $07b1			stx 	SoundCommandBlock+3
.b07d		8c b2 07	sty $07b2			sty 	SoundCommandBlock+4
.b080		9c b3 07	stz $07b3			stz 	SoundCommandBlock+5
.b083		68		pla				pla
.b084		09 10		ora #$10			ora 	#$10  						; execute command $11
.b086		a2 ae		ldx #$ae			ldx 	#(SoundCommandBlock & $FF)
.b088		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b08a		20 75 80	jsr $8075			jsr 	SNDCommand
.b08d		7a		ply				ply
.b08e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b08f						UnaryPlaying:
.b08f		fa		plx				plx
.b090		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; get channel #
.b093		48		pha				pha
.b094		20 9a 98	jsr $989a			jsr		CheckRightBracket
.b097		68		pla				pla
.b098		c9 04		cmp #$04			cmp 	#4
.b09a		b0 0c		bcs $b0a8			bcs 	_UPNotPlaying
.b09c		09 20		ora #$20			ora 	#$20 						; query playing ?
.b09e		20 75 80	jsr $8075			jsr 	SNDCommand
.b0a1		c9 00		cmp #$00			cmp 	#0
.b0a3		f0 03		beq $b0a8			beq 	_UPNotPlaying
.b0a5		4c 26 99	jmp $9926			jmp 	ReturnTrue
.b0a8						_UPNotPlaying:
.b0a8		4c 31 99	jmp $9931			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b0ab						SoundCommand:
.b0ab		b1 30		lda ($30),y			lda 	(codePtr),y
.b0ad		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.b0af		d0 09		bne $b0ba			bne 	_SNDMain
.b0b1		c8		iny				iny 								; skip OFF
.b0b2		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b0b4		5a		phy				phy
.b0b5		20 75 80	jsr $8075			jsr 	SNDCommand
.b0b8		7a		ply				ply
.b0b9		60		rts				rts
.b0ba						_SNDMain:
.b0ba		a2 00		ldx #$00			ldx 	#0
.b0bc		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; channel
.b0bf		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b0c1		b0 4b		bcs $b10e			bcs 	_SndError
.b0c3		e8		inx				inx 								; do the rest in slot 1.
.b0c4		20 a2 98	jsr $98a2			jsr 	CheckComma
.b0c7		20 93 a7	jsr $a793			jsr 	Evaluate16BitInteger 		; Pitch
.b0ca		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b0cc		c9 10		cmp #$10			cmp 	#16
.b0ce		b0 3e		bcs $b10e			bcs 	_SndError
.b0d0		8d af 07	sta $07af			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b0d3		b5 58		lda $58,x			lda 	NSMantissa0,x
.b0d5		8d ae 07	sta $07ae			sta 	SoundCommandBlock
.b0d8		20 a2 98	jsr $98a2			jsr 	CheckComma
.b0db		20 ae a7	jsr $a7ae			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b0de		8d b1 07	sta $07b1			sta 	SoundCommandBlock+3
.b0e1		a9 0f		lda #$0f			lda 	#15
.b0e3		8d b0 07	sta $07b0			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b0e6		9c b2 07	stz $07b2			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b0e9		9c b3 07	stz $07b3			stz 	SoundCommandBlock+5
.b0ec		b1 30		lda ($30),y			lda 	(codePtr),y
.b0ee		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b0f0		d0 0e		bne $b100			bne 	_SNDPlay
.b0f2		c8		iny				iny
.b0f3		20 9d a7	jsr $a79d			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b0f6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b0f8		8d b2 07	sta $07b2			sta 	SoundCommandBlock+4
.b0fb		b5 60		lda $60,x			lda 	NSMantissa1,x
.b0fd		8d b3 07	sta $07b3			sta 	SoundCommandBlock+5
.b100						_SNDPlay:
.b100		5a		phy				phy
.b101		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b103		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b105		a2 ae		ldx #$ae			ldx 	#(SoundCommandBlock & $FF)
.b107		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b109		20 75 80	jsr $8075			jsr 	SNDCommand
.b10c		7a		ply				ply
.b10d		60		rts				rts
.b10e						_SndError:
.b10e		4c bd aa	jmp $aabd			jmp 	RangeError
.07ae						SoundCommandBlock:
>07ae								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b111						StackPushByte:
.b111		48		pha				pha 								; save byte on stack
.b112		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b114		d0 08		bne $b11e			bne 	_SPBNoBorrow
.b116		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b118		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b11a		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b11c		90 06		bcc $b124			bcc 	_SPBMemory
.b11e						_SPBNoBorrow:
.b11e		c6 34		dec $34				dec 	basicStack
.b120		68		pla				pla 								; get back and write
.b121		92 34		sta ($34)			sta 	(basicStack)
.b123		60		rts				rts
.b124						_SPBMemory:
.b124		a9 12		lda #$12		lda	#18
.b126		4c b3 98	jmp $98b3		jmp	ErrorHandler
.b129						StackPopByte:
.b129		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b12b		e6 34		inc $34				inc 	basicStack
.b12d		d0 02		bne $b131			bne 	_SPBNoCarry
.b12f		e6 35		inc $35				inc 	basicStack+1
.b131						_SPBNoCarry:
.b131		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b132						StackOpen:
.b132		48		pha				pha 								; save frame byte
.b133		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b135		0a		asl a				asl 	a 							; claim twice this for storage
.b136		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b138		38		sec				sec 								; so basically subtracting from
.b139		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b13b		85 34		sta $34				sta 	basicStack
.b13d		b0 09		bcs $b148			bcs 	_SONoBorrow
>b13f		db						.byte 	$DB 						; causes a break in the emulator
.b140		c6 35		dec $35				dec 	basicStack+1
.b142		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b144		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b146		90 04		bcc $b14c			bcc 	_SOMemory
.b148						_SONoBorrow:
.b148		68		pla				pla 								; get marker back and write at TOS
.b149		92 34		sta ($34)			sta 	(basicStack)
.b14b		60		rts				rts
.b14c						_SOMemory:
.b14c		a9 12		lda #$12		lda	#18
.b14e		4c b3 98	jmp $98b3		jmp	ErrorHandler
.b151						StackClose:
.b151		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b153		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b155		0a		asl a				asl 	a 							; claim twice this.
.b156		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b158		85 34		sta $34				sta 	basicStack
.b15a		90 02		bcc $b15e			bcc 	_SCExit
.b15c		e6 35		inc $35				inc 	basicStack+1
.b15e						_SCExit:
.b15e		60		rts				rts
.b15f						StackCheckFrame:
.b15f		48		pha				pha
.b160						_StackRemoveLocals:
.b160		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b162		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b164		b0 05		bcs $b16b			bcs 	_SCNoLocal
.b166		20 be 90	jsr $90be			jsr 	LocalPopValue 				; restore the local value
.b169		80 f5		bra $b160			bra 	_StackRemoveLocals 			; gr round again
.b16b						_SCNoLocal:
.b16b		68		pla				pla 								; get the frame check.
.b16c		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b16e		29 f0		and #$f0			and 	#$F0 						; check type bits
.b170		d0 01		bne $b173			bne 	_SCFError 					; different, we have structures mixed up
.b172		60		rts				rts
.b173						_SCFError:
.b173		8a		txa				txa 								; report error X
.b174		4c b3 98	jmp $98b3			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b177						STKSaveCodePosition:
.b177		5a		phy				phy
.b178		98		tya				tya 								; save Y
.b179		a0 05		ldy #$05			ldy 	#5
.b17b		91 34		sta ($34),y			sta 	(basicStack),y
.b17d		88		dey				dey 								; save Code Pointer
.b17e						_STKSaveLoop:
.b17e		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b181		91 34		sta ($34),y			sta 	(basicStack),y
.b183		88		dey				dey
.b184		d0 f8		bne $b17e			bne 	_STKSaveLoop
.b186		7a		ply				ply
.b187		60		rts				rts
.b188						STKLoadCodePosition:
.b188		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b18a						_STKLoadLoop:
.b18a		b1 34		lda ($34),y			lda 	(basicStack),y
.b18c		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b18f		c8		iny				iny
.b190		c0 05		cpy #$05			cpy 	#5
.b192		d0 f6		bne $b18a			bne 	_STKLoadLoop
.b194		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b196		a8		tay				tay
.b197		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b198						StackReset:
.b198		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b19a		85 34		sta $34				sta 	0+basicStack
.b19c		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b19e		85 35		sta $35				sta 	1+basicStack
.b1a0		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b1a2		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b1a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b1a5						StringConcrete:
.b1a5		5a		phy				phy 								; save position on stack
.b1a6		20 f3 a3	jsr $a3f3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1a9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b1ab		85 38		sta $38				sta 	zTemp1
.b1ad		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1af		85 39		sta $39				sta 	zTemp1+1
.b1b1		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b1b3						_SALength:
.b1b3		c8		iny				iny
.b1b4		b1 38		lda ($38),y			lda 	(zTemp1),y
.b1b6		d0 fb		bne $b1b3			bne 	_SALength
.b1b8		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b1ba		b0 3d		bcs $b1f9			bcs 	_SALengthError
.b1bc		98		tya				tya 				 				; length of the new string
.b1bd		18		clc				clc
.b1be		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b1c0		90 02		bcc $b1c4			bcc 	_SAHaveLength
.b1c2		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b1c4						_SAHaveLength:
.b1c4		48		pha				pha 								; save length.
.b1c5		38		sec				sec
.b1c6		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b1c8		6d 0a 04	adc $040a			adc 	stringMemory
.b1cb		8d 0a 04	sta $040a			sta 	stringMemory
.b1ce		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b1d0		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b1d2		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b1d4		6d 0b 04	adc $040b			adc 	stringMemory+1
.b1d7		8d 0b 04	sta $040b			sta 	stringMemory+1
.b1da		85 3b		sta $3b				sta 	zTemp2+1
.b1dc		95 60		sta $60,x			sta 	NSMantissa1,x
.b1de		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b1df		38		sec				sec
.b1e0		e9 03		sbc #$03			sbc 	#3
.b1e2		92 3a		sta ($3a)			sta 	(zTemp2)
.b1e4		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b1e6		a0 01		ldy #$01			ldy 	#1
.b1e8		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b1ea						_SACopyNewString:
.b1ea		a0 00		ldy #$00			ldy 	#0
.b1ec						_SACopyNSLoop:
.b1ec		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b1ee		c8		iny				iny 								; write two on in string storage
.b1ef		c8		iny				iny
.b1f0		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b1f2		88		dey				dey 								; this makes it one one.
.b1f3		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b1f5		d0 f5		bne $b1ec			bne 	_SACopyNSLoop
.b1f7		7a		ply				ply
.b1f8		60		rts				rts
.b1f9						_SALengthError:
.b1f9		a9 09		lda #$09		lda	#9
.b1fb		4c b3 98	jmp $98b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b1fe						StringSystemInitialise:
.b1fe		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b200		8d 0a 04	sta $040a			sta 	0+stringMemory
.b203		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b205		8d 0b 04	sta $040b			sta 	1+stringMemory
.b208		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b20b		60		rts				rts
.b20c						StringSpaceInitialise:
.b20c		20 f3 a3	jsr $a3f3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b20f		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b211		8d 0c 04	sta $040c			sta 	stringInitialised
.b214		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b217		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b21a		ad 0b 04	lda $040b			lda 	stringMemory+1
.b21d		3a		dec a				dec 	a
.b21e		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b221		60		rts				rts
.b222						StringTempAllocate:
.b222		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b224		b0 30		bcs $b256			bcs 	_STALength
.b226		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b229		30 05		bmi $b230			bmi 	_STAAllocate
.b22b		48		pha				pha 								; save value to subtract.
.b22c		20 0c b2	jsr $b20c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b22f		68		pla				pla 								; restore it
.b230						_STAAllocate:
.b230		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b232		18		clc				clc  								; deliberate allows one more
.b233		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b236		8d 0d 04	sta $040d			sta 	stringTempPointer
.b239		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b23b		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b23d		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b240		69 ff		adc #$ff			adc 	#$FF
.b242		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b245		85 3d		sta $3d				sta 	zsTemp+1
.b247		95 60		sta $60,x			sta 	NSMantissa1,x
.b249		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b24b		74 70		stz $70,x			stz 	NSMantissa3,x
.b24d		a9 10		lda #$10			lda 	#NSTString
.b24f		95 50		sta $50,x			sta 	NSStatus,x
.b251		a9 00		lda #$00			lda 	#0 							; clear the target string
.b253		92 3c		sta ($3c)			sta 	(zsTemp)
.b255		60		rts				rts
.b256						_STALength:
.b256		a9 09		lda #$09		lda	#9
.b258		4c b3 98	jmp $98b3		jmp	ErrorHandler
.b25b						StringTempWrite:
.b25b		48		pha				pha
.b25c		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b25e		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b260		d0 02		bne $b264			bne 	_STWNoCarry
.b262		e6 3d		inc $3d				inc 	zsTemp+1
.b264						_STWNoCarry:
.b264		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b266		92 3c		sta ($3c)			sta 	(zsTemp)
.b268		68		pla				pla
.b269		60		rts				rts

;******  Return to file: _basic.asm

.b26a						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac b5 07	ldy $07b5			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac b5 07	ldy $07b5			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad b6 07	lda $07b6			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c b5 07	sty $07b5			sty 	EXTColumn
.c02d	a02d	cc b7 07	cpy $07b7			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee b4 07	inc $07b4			inc 	EXTRow  					; bump row
.c035	a035	9c b5 07	stz $07b5			stz 	EXTColumn 					; back to column 0
.c038	a038	ad b4 07	lda $07b4			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd b8 07	cmp $07b8			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d b7 07	adc $07b7			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce b5 07	dec $07b5			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c b5 07	stz $07b5			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce b4 07	dec $07b4			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad b4 07	lda $07b4			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce b4 07	dec $07b4			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed b7 07	sbc $07b7			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c b5 07	sty $07b5			sty 	EXTColumn
.c08c	a08c	cc b7 07	cpy $07b7			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c b5 07	sty $07b5			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad b8 07	lda $07b8			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd b4 07	cmp $07b4			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee b4 07	inc $07b4			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d b7 07	adc $07b7			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad b5 07	lda $07b5			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d b5 07	sta $07b5			sta 	EXTColumn
.c0c9	a0c9	cd b7 07	cmp $07b7			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce b5 07	dec $07b5			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac b7 07	ldy $07b7			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc b7 07	cpy $07b7			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d b6 07	and $07b6			and 	EXTTextColour 				; mask out old.
.c135	a135	8d b6 07	sta $07b6			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d b6 07	ora $07b6			ora 	EXTTextColour
.c13c	a13c	8d b6 07	sta $07b6			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad b6 07	lda $07b6			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad b6 07	lda $07b6			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c b4 07	stz $07b4			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c b5 07	stz $07b5			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad b5 07	lda $07b5			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad b4 07	lda $07b4			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 8e 81	jsr $818e			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad b5 07	lda $07b5			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac b5 07	ldy $07b5			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc b7 07	cpy $07b7			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac b5 07	ldy $07b5			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc b7 07	cpy $07b7			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac b7 07	ldy $07b7			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc b5 07	cpy $07b5			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad b7 07	lda $07b7			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac b7 07	ldy $07b7			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07b4						EXTRow:
>07b4								.fill 	1
.07b5						EXTColumn:
>07b5								.fill 	1
.07b6						EXTTextColour:
>07b6								.fill 	1
.07b7						EXTScreenWidth:
>07b7								.fill 	1
.07b8						EXTScreenHeight:
>07b8								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d b6 07	sta $07b6			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d b7 07	sta $07b7			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d b8 07	sta $07b8			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad b4 07	lda $07b4			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a5 0b		lda $0b				lda 	8+3
.c2ff	a2ff	48		pha				pha
.c300	a300	a5 0c		lda $0c				lda 	8+4
.c302	a302	18		clc				clc
.c303	a303	69 03		adc #$03			adc 	#3
.c305	a305	85 0b		sta $0b				sta 	8+3
.c307	a307	a2 98		ldx #$98			ldx 	#(Header_jchars & $FF)
.c309	a309	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c30b	a30b	64 01		stz $01				stz 	1
.c30d	a30d	ad a7 d6	lda $d6a7			lda 	$D6A7
.c310	a310	29 10		and #$10			and 	#$10
.c312	a312	f0 04		beq $a318			beq 	_EXTSHNotK1
.c314	a314	a2 b0		ldx #$b0			ldx 	#(Header_kchars & $FF)
.c316	a316	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c318	a318					_EXTSHNotK1:
.c318	a318	a9 02		lda #$02			lda 	#2
.c31a	a31a	20 48 a3	jsr $a348			jsr 	_ESHCopyBlock
.c31d	a31d	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c31f	a31f	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c321	a321	64 01		stz $01				stz 	1
.c323	a323	ad a7 d6	lda $d6a7			lda 	$D6A7
.c326	a326	29 10		and #$10			and 	#$10
.c328	a328	f0 04		beq $a32e			beq 	_EXTSHNotK2
.c32a	a32a	a2 c8		ldx #$c8			ldx 	#(Header_kattrs & $FF)
.c32c	a32c	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c32e	a32e					_EXTSHNotK2:
.c32e	a32e	a9 03		lda #$03			lda 	#3
.c330	a330	20 48 a3	jsr $a348			jsr 	_ESHCopyBlock
.c333	a333	64 01		stz $01				stz 	1
.c335	a335	a2 3f		ldx #$3f			ldx 	#16*4-1
.c337	a337					_EXTCopyLUT:
.c337	a337	bd b2 67	lda $67b2,x			lda 	Header_Palette-$4000,x
.c33a	a33a	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33d	a33d	9d 40 d8	sta $d840,x			sta 	$D840,x
.c340	a340	ca		dex				dex
.c341	a341	10 f4		bpl $a337			bpl 	_EXTCopyLUT
.c343	a343	68		pla				pla
.c344	a344	85 0b		sta $0b				sta 	8+3
.c346	a346	68		pla				pla
.c347	a347	60		rts				rts
.c348	a348					_ESHCopyBlock:
.c348	a348	85 01		sta $01				sta 	1
.c34a	a34a	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c34c	a34c	84 37		sty $37				sty 	zTemp0+1
.c34e	a34e	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c350	a350	85 38		sta $38				sta 	0+zTemp1
.c352	a352	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c354	a354	85 39		sta $39				sta 	1+zTemp1
.c356	a356					_ESHCopyLoop:
.c356	a356	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c358	a358	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c35a	a35a	f0 1b		beq $a377			beq 	_ESHUnpack
.c35c	a35c	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35e	a35e	a9 01		lda #$01			lda 	#1 							; source add 1
.c360	a360	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c362	a362					_ESHNext:
.c362	a362	18		clc				clc 								; zTemp0 + A
.c363	a363	65 36		adc $36				adc 	zTemp0
.c365	a365	85 36		sta $36				sta 	zTemp0
.c367	a367	90 02		bcc $a36b			bcc 	_ESHNoCarry
.c369	a369	e6 37		inc $37				inc 	zTemp0+1
.c36b	a36b					_ESHNoCarry:
.c36b	a36b	98		tya				tya 								; zTemp1 + Y
.c36c	a36c	18		clc				clc
.c36d	a36d	65 38		adc $38				adc 	zTemp1
.c36f	a36f	85 38		sta $38				sta 	zTemp1
.c371	a371	90 e3		bcc $a356			bcc 	_ESHCopyLoop
.c373	a373	e6 39		inc $39				inc 	zTemp1+1
.c375	a375	80 df		bra $a356			bra 	_ESHCopyLoop
.c377	a377					_ESHUnpack:
.c377	a377	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	aa		tax				tax
.c37c	a37c	88		dey				dey 								; byte into A
.c37d	a37d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37f	a37f	f0 0c		beq $a38d			beq 	_ESHExit 					; exit if zero.
.c381	a381	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c383	a383					_ESHCopyOut:
.c383	a383	91 38		sta ($38),y			sta 	(zTemp1),y
.c385	a385	c8		iny				iny
.c386	a386	ca		dex				dex
.c387	a387	d0 fa		bne $a383			bne 	_ESHCopyOut
.c389	a389	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c38b	a38b	80 d5		bra $a362			bra 	_ESHNext
.c38d	a38d					_ESHExit:
.c38d	a38d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c38e	a38e					GRVectorTable:
>c38e	a38e	dd a5					.word	GXInitialise             ; $00 Initialise
>c390	a390	f7 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c392	a392	3f a6					.word	GXControlSprite          ; $02 SpriteCtl
>c394	a394	8f a5					.word	GXClearBitmap            ; $03 Clear
>c396	a396	ce a7					.word	GXSetColourMode          ; $04 Colour
>c398	a398	96 a9					.word	GXFontHandler            ; $05 DrawFont
>c39a	a39a	de a9					.word	GXSpriteHandler          ; $06 DrawSprite
>c39c	a39c	4f aa					.word	GXSelect                 ; $07 SpriteUse
>c39e	a39e	78 aa					.word	GXSelectImage            ; $08 SpriteImage
>c3a0	a3a0	ff ab					.word	GXCollide                ; $09 SpriteCollide
>c3a2	a3a2	41 a4					.word	GRUndefined              ; $0a
>c3a4	a3a4	41 a4					.word	GRUndefined              ; $0b
>c3a6	a3a6	41 a4					.word	GRUndefined              ; $0c
>c3a8	a3a8	41 a4					.word	GRUndefined              ; $0d
>c3aa	a3aa	41 a4					.word	GRUndefined              ; $0e
>c3ac	a3ac	41 a4					.word	GRUndefined              ; $0f
>c3ae	a3ae	41 a4					.word	GRUndefined              ; $10
>c3b0	a3b0	41 a4					.word	GRUndefined              ; $11
>c3b2	a3b2	41 a4					.word	GRUndefined              ; $12
>c3b4	a3b4	41 a4					.word	GRUndefined              ; $13
>c3b6	a3b6	41 a4					.word	GRUndefined              ; $14
>c3b8	a3b8	41 a4					.word	GRUndefined              ; $15
>c3ba	a3ba	41 a4					.word	GRUndefined              ; $16
>c3bc	a3bc	41 a4					.word	GRUndefined              ; $17
>c3be	a3be	41 a4					.word	GRUndefined              ; $18
>c3c0	a3c0	41 a4					.word	GRUndefined              ; $19
>c3c2	a3c2	41 a4					.word	GRUndefined              ; $1a
>c3c4	a3c4	41 a4					.word	GRUndefined              ; $1b
>c3c6	a3c6	41 a4					.word	GRUndefined              ; $1c
>c3c8	a3c8	41 a4					.word	GRUndefined              ; $1d
>c3ca	a3ca	41 a4					.word	GRUndefined              ; $1e
>c3cc	a3cc	41 a4					.word	GRUndefined              ; $1f
>c3ce	a3ce	3f a4					.word	GXMove                   ; $20 Move
>c3d0	a3d0	9c a6					.word	GXLine                   ; $21 Line
>c3d2	a3d2	17 a8					.word	GXFrameRectangle         ; $22 FrameRect
>c3d4	a3d4	14 a8					.word	GXFillRectangle          ; $23 FillRect
>c3d6	a3d6	46 a4					.word	GXFrameCircle            ; $24 FrameCircle
>c3d8	a3d8	42 a4					.word	GXFillCircle             ; $25 FillCircle
>c3da	a3da	41 a4					.word	GRUndefined              ; $26
>c3dc	a3dc	41 a4					.word	GRUndefined              ; $27
>c3de	a3de	fc a7					.word	GXPlotPoint              ; $28 Plot
>c3e0	a3e0	0e ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07b9						gxCurrentX:
>07b9								.fill 	2
.07bb						gxCurrentY:
>07bb								.fill 	2
.07bd						gxLastX:
>07bd								.fill 	2
.07bf						gxLastY:
>07bf								.fill 	2
.07c1						gxX0:
>07c1								.fill 	2
.07c3						gxY0:
>07c3								.fill 	2
.07c5						gxX1:
>07c5								.fill 	2
.07c7						gxY1:
>07c7								.fill 	2
.07c9						gxSpritesOn:
>07c9								.fill 	1
.07ca						gxBitmapsOn:
>07ca								.fill 	1
.07cb						gxBasePage:
>07cb								.fill 	1
.07cc						gxSpritePage:
>07cc								.fill 	1
.07cd						gxHeight:
>07cd								.fill 	1
.07ce						gxMode:
>07ce								.fill 	1
.07cf						gxColour:
>07cf								.fill 	1
.07d0						gxEORValue:
>07d0								.fill 	1
.07d1						gxANDValue:
>07d1								.fill 	1
.07d2						gxOriginalLUTValue:
>07d2								.fill 	1
.07d3						gxOffset:
>07d3								.fill 	1
.07d4						GSCurrentSpriteID:
>07d4								.fill 	1
.07d5						GSCurrentSpriteAddr:
>07d5								.fill 	2
.07d7						gxSpriteOffsetBase:
>07d7								.fill 	2
.07d9						gxSpriteLow:
>07d9								.fill 	64
.0819						gxSpriteHigh:
>0819								.fill 	64
.c3e2	a3e2					Export_GXGraphicDraw:
.c3e2	a3e2	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c3e4	a3e4	b0 06		bcs $a3ec			bcs 	_GDCoordinate
.c3e6	a3e6	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c3e8	a3e8	84 37		sty $37				sty 	gxzTemp0+1
.c3ea	a3ea	80 4b		bra $a437			bra 	_GDExecuteA 				; and execute
.c3ec	a3ec					_GDCoordinate:
.c3ec	a3ec	48		pha				pha 								; save AXY
.c3ed	a3ed	da		phx				phx
.c3ee	a3ee	5a		phy				phy
.c3ef	a3ef	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c3f1	a3f1					_GDCopy1:
.c3f1	a3f1	bd b9 07	lda $07b9,x			lda 	gxCurrentX,x
.c3f4	a3f4	9d bd 07	sta $07bd,x			sta 	gxLastX,x
.c3f7	a3f7	ca		dex				dex
.c3f8	a3f8	10 f7		bpl $a3f1			bpl 	_GDCopy1
.c3fa	a3fa	68		pla				pla 								; update Y
.c3fb	a3fb	8d bb 07	sta $07bb			sta 	gxCurrentY
.c3fe	a3fe	9c bc 07	stz $07bc			stz 	gxCurrentY+1
.c401	a401	68		pla				pla
.c402	a402	8d b9 07	sta $07b9			sta 	gxCurrentX
.c405	a405	68		pla				pla 								; get A (command+X.1) back
.c406	a406	48		pha				pha
.c407	a407	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c409	a409	8d ba 07	sta $07ba			sta 	gxCurrentX+1
.c40c	a40c	68		pla				pla 								; get command back
.c40d	a40d	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c40f	a40f	48		pha				pha 								; push back.
.c410	a410	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c412	a412	f0 17		beq $a42b			beq 	_GDCopyToWorkArea
.c414	a414	ad ba 07	lda $07ba			lda 	gxCurrentX+1 				; X < 256 X okay
.c417	a417	f0 07		beq $a420			beq 	_GDCheckY
.c419	a419	ad b9 07	lda $07b9			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c41c	a41c	c9 40		cmp #$40			cmp 	#64
.c41e	a41e	b0 08		bcs $a428			bcs 	_GDError1
.c420	a420					_GDCheckY:
.c420	a420	ad bb 07	lda $07bb			lda 	gxCurrentY 					; check Y < Height.
.c423	a423	cd cd 07	cmp $07cd			cmp 	gxHeight
.c426	a426	90 03		bcc $a42b			bcc 	_GDCopyToWorkArea
.c428	a428					_GDError1:
.c428	a428	68		pla				pla
.c429	a429					_GDError2:
.c429	a429	38		sec				sec
.c42a	a42a	60		rts				rts
.c42b	a42b					_GDCopyToWorkArea:
.c42b	a42b	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c42d	a42d					_GDCopy2:
.c42d	a42d	bd b9 07	lda $07b9,x			lda 	gxCurrentX,x
.c430	a430	9d c1 07	sta $07c1,x			sta 	gxX0,x
.c433	a433	ca		dex				dex
.c434	a434	10 f7		bpl $a42d			bpl 	_GDCopy2
.c436	a436	68		pla				pla 								; get command
.c437	a437					_GDExecuteA:
.c437	a437	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c439	a439	b0 ee		bcs $a429			bcs 	_GDError2
.c43b	a43b	aa		tax				tax
.c43c	a43c	7c 8e a3	jmp ($a38e,x)			jmp 	(GRVectorTable,x)
.c43f	a43f					GXMove:
.c43f	a43f	18		clc				clc
.c440	a440	60		rts				rts
.c441	a441					GRUndefined:
>c441	a441	db						.byte 	$DB 						; causes a break in the emulator
.c442	a442					GXFillCircle:
.c442	a442	a9 ff		lda #$ff			lda 	#255
.c444	a444	80 02		bra $a448			bra 	GXCircle
.c446	a446					GXFrameCircle:
.c446	a446	a9 00		lda #$00			lda 	#0
.c448	a448					GXCircle:
.c448	a448	8d 5c 08	sta $085c			sta 	gxIsFillMode					; save Fill flag
.c44b	a44b	ad ca 07	lda $07ca			lda 	gxBitmapsOn
.c44e	a44e	f0 26		beq $a476			beq 	_GXCFail
.c450	a450	20 a6 ac	jsr $aca6			jsr 	GXSortXY 					; topleft/bottomright
.c453	a453	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start drawing
.c456	a456	20 48 a5	jsr $a548			jsr 	GXCircleSetup 				; set up for drawing
.c459	a459	9c 5d 08	stz $085d			stz 	gxYChanged
.c45c	a45c					_GXCircleDraw:
.c45c	a45c	ad 5a 08	lda $085a			lda 	gxxCentre					; while x <= y
.c45f	a45f	cd 5b 08	cmp $085b			cmp 	gxYCentre
.c462	a462	90 0a		bcc $a46e			bcc 	_GXCircleContinue
.c464	a464	d0 03		bne $a469			bne 	_GXNoLast
.c466	a466	20 7b a4	jsr $a47b			jsr 	GXPlot1
.c469	a469					_GXNoLast:
.c469	a469	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap 				; close the bitmap
.c46c	a46c	18		clc				clc
.c46d	a46d	60		rts				rts
.c46e	a46e					_GXCircleContinue:
.c46e	a46e	20 78 a4	jsr $a478			jsr 	GXPlot2 					; draw it
.c471	a471	20 f5 a4	jsr $a4f5			jsr 	GXCircleMove 				; adjust the coordinates
.c474	a474	80 e6		bra $a45c			bra 	_GXCircleDraw
.c476	a476					_GXCFail:
.c476	a476	38		sec				sec
.c477	a477	60		rts				rts
.c478	a478					GXPlot2:
.c478	a478	20 7b a4	jsr $a47b			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c47b	a47b					GXPlot1:
.c47b	a47b	ad 5b 08	lda $085b			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c47e	a47e	f0 03		beq $a483			beq 	_GXPlot1Only
.c480	a480	20 9f a4	jsr $a49f			jsr 	GXPlot0 						; plot and negate
.c483	a483					_GXPlot1Only:
.c483	a483	20 9f a4	jsr $a49f			jsr 	GXPlot0 						; twice, undoing negation
.c486	a486	ad 5a 08	lda $085a			lda 	gxxCentre 						; swap X and Y
.c489	a489	ae 5b 08	ldx $085b			ldx	 	gxYCentre
.c48c	a48c	8d 5b 08	sta $085b			sta 	gxYCentre
.c48f	a48f	8e 5a 08	stx $085a			stx 	gxxCentre
.c492	a492	ad 5d 08	lda $085d			lda 	gxYChanged 						; toggle Y Changed flag
.c495	a495	a9 ff		lda #$ff			lda 	#$FF
.c497	a497	8d 5d 08	sta $085d			sta 	gxYChanged
.c49a	a49a	60		rts				rts
.c49b	a49b	20 9f a4	jsr $a49f			jsr 	GXPlot0 						; do once
.c49e	a49e	60		rts				rts
.c49f	a49f	ad 5c 08	lda $085c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c4a2	a4a2	f0 05		beq $a4a9			beq 	_GXPlot0Always
.c4a4	a4a4	ad 5d 08	lda $085d			lda 	gxYChanged						; fill mode, only draw if changed.
.c4a7	a4a7	f0 2d		beq $a4d6			beq 	GXPlot0Exit
.c4a9	a4a9					_GXPlot0Always:
.c4a9	a4a9	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c4ab	a4ab	ad 5b 08	lda $085b			lda 	gxYCentre
.c4ae	a4ae	20 d7 a4	jsr $a4d7			jsr 	GXSubCopy
.c4b1	a4b1	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c4b3	a4b3	ad 5a 08	lda $085a			lda 	gxxCentre
.c4b6	a4b6	20 d7 a4	jsr $a4d7			jsr 	GXSubCopy
.c4b9	a4b9	48		pha				pha 									; save last offset X
.c4ba	a4ba	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 					; calculate position/offset.
.c4bd	a4bd	68		pla				pla
.c4be	a4be	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c4bf	a4bf	85 36		sta $36				sta 	gxzTemp0
.c4c1	a4c1	64 37		stz $37				stz 	gxzTemp0+1
.c4c3	a4c3	26 37		rol $37				rol 	gxzTemp0+1
.c4c5	a4c5	ad 5c 08	lda $085c			lda 	gxIsFillMode
.c4c8	a4c8	69 80		adc #$80			adc 	#128
.c4ca	a4ca	20 67 a8	jsr $a867			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c4cd	a4cd	38		sec				sec 									; GY = -GY
.c4ce	a4ce	a9 00		lda #$00			lda 	#0
.c4d0	a4d0	ed 5b 08	sbc $085b			sbc 	gxYCentre
.c4d3	a4d3	8d 5b 08	sta $085b			sta 	gxYCentre
.c4d6	a4d6					GXPlot0Exit:
.c4d6	a4d6	60		rts				rts
.c4d7	a4d7					GXSubCopy:
.c4d7	a4d7	85 36		sta $36				sta 	gxzTemp0
.c4d9	a4d9	64 37		stz $37				stz 	gxzTemp0+1
.c4db	a4db	29 80		and #$80			and 	#$80
.c4dd	a4dd	f0 02		beq $a4e1			beq 	_GXNoSx
.c4df	a4df	c6 37		dec $37				dec 	gxzTemp0+1
.c4e1	a4e1					_GXNoSx:
.c4e1	a4e1	38		sec				sec
.c4e2	a4e2	bd c5 07	lda $07c5,x			lda 	gxX1,x
.c4e5	a4e5	e5 36		sbc $36				sbc 	gxzTemp0
.c4e7	a4e7	9d c1 07	sta $07c1,x			sta 	gxX0,x
.c4ea	a4ea	bd c6 07	lda $07c6,x			lda 	gxX1+1,x
.c4ed	a4ed	e5 37		sbc $37				sbc 	gxzTemp0+1
.c4ef	a4ef	9d c2 07	sta $07c2,x			sta 	gxX0+1,x
.c4f2	a4f2	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c4f4	a4f4	60		rts				rts
.c4f5	a4f5					GXCircleMove:
.c4f5	a4f5	9c 5d 08	stz $085d			stz 	gxYChanged 					; clear Y changed flag
.c4f8	a4f8	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c4fa	a4fa	10 0d		bpl $a509			bpl 	_GXEMPositive
.c4fc	a4fc	ee 5a 08	inc $085a			inc 	gxxCentre 					; X++
.c4ff	a4ff	ad 5a 08	lda $085a			lda 	gxxCentre
.c502	a502	20 28 a5	jsr $a528			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c505	a505	a9 06		lda #$06			lda 	#6  						; and add 6
.c507	a507	80 15		bra $a51e			bra 	_GXEMAddD
.c509	a509					_GXEMPositive:
.c509	a509	ee 5a 08	inc $085a			inc 	gxxCentre					; X++
.c50c	a50c	ce 5b 08	dec $085b			dec 	gxYCentre 					; Y--
.c50f	a50f	38		sec				sec 								; calculate X-Y
.c510	a510	ad 5a 08	lda $085a			lda 	gxxCentre
.c513	a513	ed 5b 08	sbc $085b			sbc 	gxYCentre
.c516	a516	20 28 a5	jsr $a528			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c519	a519	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c51b	a51b	ce 5d 08	dec $085d			dec 	gxYChanged
.c51e	a51e					_GXEMAddD:
.c51e	a51e	18		clc				clc
.c51f	a51f	65 38		adc $38				adc 	gxzTemp1
.c521	a521	85 38		sta $38				sta 	gxzTemp1
.c523	a523	90 02		bcc $a527			bcc 	_GXEMNoCarry
.c525	a525	e6 39		inc $39				inc 	gxzTemp1+1
.c527	a527					_GXEMNoCarry:
.c527	a527	60		rts				rts
.c528	a528					_GXAdd4TimesToD:
.c528	a528	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c52a	a52a	29 80		and #$80			and 	#$80
.c52c	a52c	f0 02		beq $a530			beq 	_GXA4Unsigned
.c52e	a52e	a9 ff		lda #$ff			lda 	#$FF
.c530	a530					_GXA4Unsigned:
.c530	a530	85 37		sta $37				sta 	gxzTemp0+1
.c532	a532	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c534	a534	26 37		rol $37				rol 	gxzTemp0+1
.c536	a536	06 36		asl $36				asl 	gxzTemp0
.c538	a538	26 37		rol $37				rol 	gxzTemp0+1
.c53a	a53a	18		clc				clc 								; add
.c53b	a53b	a5 36		lda $36				lda		gxzTemp0
.c53d	a53d	65 38		adc $38				adc 	gxzTemp1
.c53f	a53f	85 38		sta $38				sta 	gxzTemp1
.c541	a541	a5 37		lda $37				lda		gxzTemp0+1
.c543	a543	65 39		adc $39				adc 	gxzTemp1+1
.c545	a545	85 39		sta $39				sta 	gxzTemp1+1
.c547	a547	60		rts				rts
.c548	a548					GXCircleSetup:
.c548	a548	38		sec				sec
.c549	a549	ad c7 07	lda $07c7			lda 	gxY1
.c54c	a54c	ed c3 07	sbc $07c3			sbc 	gxY0
.c54f	a54f	4a		lsr a				lsr 	a
.c550	a550	8d 59 08	sta $0859			sta 	gxRadius
.c553	a553	a2 00		ldx #$00			ldx 	#0
.c555	a555	20 77 a5	jsr $a577			jsr 	_GXCalculateCentre
.c558	a558	a2 02		ldx #$02			ldx 	#2
.c55a	a55a	20 77 a5	jsr $a577			jsr 	_GXCalculateCentre
.c55d	a55d	9c 5a 08	stz $085a			stz 	gxxCentre
.c560	a560	ad 59 08	lda $0859			lda 	gxRadius
.c563	a563	8d 5b 08	sta $085b			sta 	gxYCentre
.c566	a566	0a		asl a				asl 	a 							; R x 2
.c567	a567	85 36		sta $36				sta 	gxzTemp0
.c569	a569	38		sec				sec
.c56a	a56a	a9 03		lda #$03			lda 	#3
.c56c	a56c	e5 36		sbc $36				sbc 	gxzTemp0
.c56e	a56e	85 38		sta $38				sta 	gxzTemp1
.c570	a570	a9 00		lda #$00			lda 	#0
.c572	a572	e9 00		sbc #$00			sbc 	#0
.c574	a574	85 39		sta $39				sta 	gxzTemp1+1
.c576	a576	60		rts				rts
.c577	a577					_GXCalculateCentre:
.c577	a577	38		sec				sec
.c578	a578	bd c5 07	lda $07c5,x			lda 	gxX1,x
.c57b	a57b	7d c1 07	adc $07c1,x			adc 	gxX0,x
.c57e	a57e	9d c5 07	sta $07c5,x			sta 	gxX1,x
.c581	a581	bd c6 07	lda $07c6,x			lda 	gxX1+1,x
.c584	a584	7d c2 07	adc $07c2,x			adc 	gxX0+1,x
.c587	a587	4a		lsr a				lsr 	a
.c588	a588	9d c6 07	sta $07c6,x			sta 	gxX1+1,x
.c58b	a58b	7e c5 07	ror $07c5,x			ror 	gxX1,x
.c58e	a58e	60		rts				rts
.0859						gxRadius:
>0859								.fill 	1
.085a						gxxCentre:
>085a								.fill 	1
.085b						gxYCentre:
>085b								.fill 	1
.085c						gxIsFillMode:
>085c								.fill 	1
.085d						gxYChanged:
>085d								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c58f	a58f					GXClearBitmap:
.c58f	a58f	ad ca 07	lda $07ca			lda 	gxBitmapsOn 				; check BMP running.
.c592	a592	f0 24		beq $a5b8			beq 	_GXCBFail
.c594	a594	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start access
.c597	a597	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c599	a599	ad cd 07	lda $07cd			lda 	gxHeight
.c59c	a59c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c59e	a59e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c5a0	a5a0					_GXCalcLastPage:
.c5a0	a5a0	98		tya				tya 								; add to base page
.c5a1	a5a1	18		clc				clc
.c5a2	a5a2	6d cb 07	adc $07cb			adc 	gxBasePage
.c5a5	a5a5	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c5a7	a5a7					_GXClearAll:
.c5a7	a5a7	20 ba a5	jsr $a5ba			jsr 	_GXClearBlock 				; clear 8k block
.c5aa	a5aa	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c5ac	a5ac	a5 0b		lda $0b				lda 	GXEditSlot
.c5ae	a5ae	cd cb 07	cmp $07cb			cmp 	gxBasePage 					; until before base page
.c5b1	a5b1	b0 f4		bcs $a5a7			bcs 	_GXClearAll
.c5b3	a5b3	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap	 			; stop access
.c5b6	a5b6	18		clc				clc
.c5b7	a5b7	60		rts				rts
.c5b8	a5b8					_GXCBFail:
.c5b8	a5b8	38		sec				sec
.c5b9	a5b9	60		rts				rts
.c5ba	a5ba					_GXClearBlock:
.c5ba	a5ba	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c5bc	a5bc	85 38		sta $38				sta 	0+gxzTemp1
.c5be	a5be	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c5c0	a5c0	85 39		sta $39				sta 	1+gxzTemp1
.c5c2	a5c2					_GXCB0:
.c5c2	a5c2	a5 36		lda $36				lda 	gxzTemp0
.c5c4	a5c4	a0 00		ldy #$00			ldy 	#0
.c5c6	a5c6					_GXCB1:
.c5c6	a5c6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5c8	a5c8	c8		iny				iny
.c5c9	a5c9	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5cb	a5cb	c8		iny				iny
.c5cc	a5cc	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5ce	a5ce	c8		iny				iny
.c5cf	a5cf	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5d1	a5d1	c8		iny				iny
.c5d2	a5d2	d0 f2		bne $a5c6			bne 	_GXCB1
.c5d4	a5d4	e6 39		inc $39				inc 	gxzTemp1+1
.c5d6	a5d6	a5 39		lda $39				lda 	gxzTemp1+1
.c5d8	a5d8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c5da	a5da	d0 e6		bne $a5c2			bne 	_GXCB0
.c5dc	a5dc	60		rts				rts
.c5dd	a5dd					GXInitialise:
.c5dd	a5dd	64 01		stz $01				stz 	1
.c5df	a5df	a9 01		lda #$01			lda 	#1
.c5e1	a5e1	8d 00 d0	sta $d000			sta 	$D000
.c5e4	a5e4	18		clc				clc
.c5e5	a5e5	9c c9 07	stz $07c9			stz 	gxSpritesOn
.c5e8	a5e8	9c ca 07	stz $07ca			stz 	gxBitmapsOn
.c5eb	a5eb	a2 0f		ldx #$0f			ldx 	#15
.c5ed	a5ed					_GXIClear:
.c5ed	a5ed	9e b9 07	stz $07b9,x			stz 	gxCurrentX,x
.c5f0	a5f0	ca		dex				dex
.c5f1	a5f1	10 fa		bpl $a5ed			bpl 	_GXIClear
.c5f3	a5f3	20 8e a6	jsr $a68e			jsr 	GXClearSpriteStore
.c5f6	a5f6	60		rts				rts
.c5f7	a5f7					GXControlBitmap:
.c5f7	a5f7	64 01		stz $01				stz 	1
.c5f9	a5f9	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5fb	a5fb	29 01		and #$01			and 	#1 							; set bitmap flag
.c5fd	a5fd	8d ca 07	sta $07ca			sta 	gxBitmapsOn
.c600	a600	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c601	a601	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c604	a604	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c606	a606	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c608	a608	90 02		bcc $a60c			bcc 	_CBNotOn
.c60a	a60a	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c60c	a60c					_CBNotOn:
.c60c	a60c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c60f	a60f	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c611	a611	29 07		and #$07			and 	#7
.c613	a613	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c616	a616	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c618	a618	d0 02		bne $a61c			bne 	_CBNotDefault
.c61a	a61a	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c61c	a61c					_CBNotDefault:
.c61c	a61c	8d cb 07	sta $07cb			sta 	gxBasePage
.c61f	a61f	20 80 a6	jsr $a680			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c622	a622	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c624	a624	8d 03 d1	sta $d103			sta 	$D103
.c627	a627	a5 36		lda $36				lda 	gxzTemp0
.c629	a629	8d 02 d1	sta $d102			sta 	$D102
.c62c	a62c	9c 01 d1	stz $d101			stz 	$D101
.c62f	a62f	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.c631	a631	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c634	a634	29 01		and #$01			and 	#1
.c636	a636	f0 02		beq $a63a			beq 	_CBHaveHeight
.c638	a638	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c63a	a63a					_CBHaveHeight
.c63a	a63a	8e cd 07	stx $07cd			stx 	gxHeight
.c63d	a63d	18		clc				clc
.c63e	a63e	60		rts				rts
.c63f	a63f					GXControlSprite:
.c63f	a63f	64 01		stz $01				stz 	1
.c641	a641	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c643	a643	29 01		and #$01			and 	#1 							; set sprites flag
.c645	a645	8d c9 07	sta $07c9			sta 	gxSpritesOn
.c648	a648	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c649	a649	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c64c	a64c	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c64e	a64e	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c650	a650	90 02		bcc $a654			bcc 	_CSNotOn
.c652	a652	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c654	a654					_CSNotOn:
.c654	a654	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c657	a657	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c659	a659	d0 02		bne $a65d			bne 	_CSNotDefault
.c65b	a65b	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c65d	a65d					_CSNotDefault:
.c65d	a65d	8d cc 07	sta $07cc			sta 	gxSpritePage
.c660	a660	20 80 a6	jsr $a680			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c663	a663	a5 36		lda $36				lda 	gxzTemp0
.c665	a665	8d d7 07	sta $07d7			sta 	gxSpriteOffsetBase
.c668	a668	a5 37		lda $37				lda 	gxzTemp0+1
.c66a	a66a	8d d8 07	sta $07d8			sta 	gxSpriteOffsetBase+1
.c66d	a66d	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c66f	a66f					_CSClear:
.c66f	a66f	9e 00 d9	stz $d900,x			stz 	$D900,x
.c672	a672	9e 00 da	stz $da00,x			stz 	$DA00,x
.c675	a675	ca		dex				dex
.c676	a676	d0 f7		bne $a66f			bne 	_CSClear
.c678	a678	9c d6 07	stz $07d6			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c67b	a67b	20 8e a6	jsr $a68e			jsr 	GXClearSpriteStore
.c67e	a67e	18		clc				clc
.c67f	a67f	60		rts				rts
.c680	a680					GXCalculateBaseAddress:
.c680	a680	85 36		sta $36				sta 	gxzTemp0
.c682	a682	64 37		stz $37				stz 	gxzTemp0+1
.c684	a684	a9 05		lda #$05			lda 	#5
.c686	a686					_GXShift:
.c686	a686	06 36		asl $36				asl 	gxzTemp0
.c688	a688	26 37		rol $37				rol 	gxzTemp0+1
.c68a	a68a	3a		dec a				dec		a
.c68b	a68b	d0 f9		bne $a686			bne 	_GXShift
.c68d	a68d	60		rts				rts
.c68e	a68e					GXClearSpriteStore:
.c68e	a68e	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c690	a690					_GXCSSLoop:
.c690	a690	9e 19 08	stz $0819,x			stz 	gxSpriteHigh,x
.c693	a693	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c695	a695	9d d9 07	sta $07d9,x			sta 	gxSpriteLow,x
.c698	a698	ca		dex				dex
.c699	a699	10 f5		bpl $a690			bpl 	_GXCSSLoop
.c69b	a69b	60		rts				rts
.c69c	a69c					GXLine:
.c69c	a69c	ad ca 07	lda $07ca			lda 	gxBitmapsOn
.c69f	a69f	f0 28		beq $a6c9			beq 	_GXLFail
.c6a1	a6a1	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap
.c6a4	a6a4	20 c4 ac	jsr $acc4			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6a7	a6a7	20 6f a7	jsr $a76f			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6aa	a6aa	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c6ad	a6ad					_GXDrawLoop:
.c6ad	a6ad	ac d3 07	ldy $07d3			ldy 	gxOffset 					; draw the pixel
.c6b0	a6b0	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6b2	a6b2	2d d1 07	and $07d1			and 	gxANDValue
.c6b5	a6b5	4d d0 07	eor $07d0			eor 	gxEORValue
.c6b8	a6b8	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6ba	a6ba	20 cb a6	jsr $a6cb			jsr 	GXLineIsComplete 			; is the line complete ?
.c6bd	a6bd	f0 05		beq $a6c4			beq 	_GXLExit
.c6bf	a6bf	20 e6 a6	jsr $a6e6			jsr 	GXLineAdvance 				; code as per advance method
.c6c2	a6c2	80 e9		bra $a6ad			bra 	_GXDrawLoop
.c6c4	a6c4					_GXLExit:
.c6c4	a6c4	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.c6c7	a6c7	18		clc				clc
.c6c8	a6c8	60		rts				rts
.c6c9	a6c9					_GXLFail:
.c6c9	a6c9	38		sec				sec
.c6ca	a6ca	60		rts				rts
.c6cb	a6cb					GXLineIsComplete:
.c6cb	a6cb	ad 60 08	lda $0860			lda 	gxIsDiffYLarger 			; is dy larger
.c6ce	a6ce	d0 0f		bne $a6df			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.c6d0	a6d0	ad c1 07	lda $07c1			lda 	gxX0 						; compare X, LSB and MSB
.c6d3	a6d3	4d c5 07	eor $07c5			eor 	gxX1
.c6d6	a6d6	d0 06		bne $a6de			bne 	_GXLICExit
.c6d8	a6d8	ad c2 07	lda $07c2			lda 	gxX0+1
.c6db	a6db	4d c6 07	eor $07c6			eor 	gxX1+1
.c6de	a6de					_GXLICExit:
.c6de	a6de	60		rts				rts
.c6df	a6df					_GXLICCompareY:
.c6df	a6df	ad c7 07	lda $07c7			lda 	gxY1
.c6e2	a6e2	4d c3 07	eor $07c3			eor 	gxY0
.c6e5	a6e5	60		rts				rts
.c6e6	a6e6					GXLineAdvance:
.c6e6	a6e6	18		clc				clc 								; add adjust to position
.c6e7	a6e7	ad 62 08	lda $0862			lda 	gxPosition
.c6ea	a6ea	6d 63 08	adc $0863			adc 	gxAdjust
.c6ed	a6ed	8d 62 08	sta $0862			sta 	gxPosition
.c6f0	a6f0	9c 65 08	stz $0865			stz 	gxAddSelect 				; clear add select flag
.c6f3	a6f3	b0 05		bcs $a6fa			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c6f5	a6f5	cd 64 08	cmp $0864			cmp 	gxTotal 					; if exceeded total
.c6f8	a6f8	90 0a		bcc $a704			bcc 	_GXLANoExtra
.c6fa	a6fa					_GXLAOverflow:
.c6fa	a6fa	ce 65 08	dec $0865			dec 	gxAddSelect 				; set addselect to $FF
.c6fd	a6fd	38		sec				sec 								; subtract total and write back
.c6fe	a6fe	ed 64 08	sbc $0864			sbc 	gxTotal
.c701	a701	8d 62 08	sta $0862			sta 	gxPosition
.c704	a704					_GXLANoExtra:
.c704	a704	ad 60 08	lda $0860			lda 	gxIsDiffYLarger
.c707	a707	f0 0d		beq $a716			beq 	_GXDXLarger
.c709	a709	20 68 a7	jsr $a768			jsr 	GXIncrementY
.c70c	a70c	ad 65 08	lda $0865			lda 	gxAddSelect
.c70f	a70f	f0 10		beq $a721			beq 	_GXLAExit
.c711	a711	20 22 a7	jsr $a722			jsr 	gxAdjustX
.c714	a714	80 0b		bra $a721			bra 	_GXLAExit
.c716	a716					_GXDXLarger:
.c716	a716	20 22 a7	jsr $a722			jsr 	gxAdjustX
.c719	a719	ad 65 08	lda $0865			lda 	gxAddSelect
.c71c	a71c	f0 03		beq $a721			beq 	_GXLAExit
.c71e	a71e	20 68 a7	jsr $a768			jsr 	GXIncrementY
.c721	a721					_GXLAExit:
.c721	a721	60		rts				rts
.c722	a722					gxAdjustX:
.c722	a722	ad 61 08	lda $0861			lda 	gxDXNegative
.c725	a725	10 25		bpl $a74c			bpl 	_GXAXRight
.c727	a727	ad c1 07	lda $07c1			lda 	gxX0
.c72a	a72a	d0 03		bne $a72f			bne 	_GXAXNoBorrow
.c72c	a72c	ce c2 07	dec $07c2			dec 	gxX0+1
.c72f	a72f					_GXAXNoBorrow:
.c72f	a72f	ce c1 07	dec $07c1			dec 	gxX0
.c732	a732	ce d3 07	dec $07d3			dec 	gxOffset 					; pixel left
.c735	a735	ad d3 07	lda $07d3			lda 	gxOffset
.c738	a738	c9 ff		cmp #$ff			cmp 	#$FF
.c73a	a73a	d0 0f		bne $a74b			bne 	_GXAYExit 					; underflow
.c73c	a73c	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c73e	a73e	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c740	a740	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c742	a742	b0 07		bcs $a74b			bcs 	_GXAYExit
.c744	a744	18		clc				clc
.c745	a745	69 20		adc #$20			adc 	#$20 						; fix up
.c747	a747	85 3d		sta $3d				sta 	gxzScreen+1
.c749	a749	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c74b	a74b					_GXAYExit:
.c74b	a74b	60		rts				rts
.c74c	a74c					_GXAXRight:
.c74c	a74c	ee c1 07	inc $07c1			inc 	gxX0
.c74f	a74f	d0 03		bne $a754			bne 	_GXAXNoCarry
.c751	a751	ee c2 07	inc $07c2			inc 	gxX0+1
.c754	a754					_GXAXNoCarry:
.c754	a754	ee d3 07	inc $07d3			inc 	gxOffset 					; pixel right
.c757	a757	d0 0e		bne $a767			bne 	_GXAXExit 					; if not overflowed, exit.
.c759	a759	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c75b	a75b	a5 3d		lda $3d				lda 	gxzScreen+1
.c75d	a75d	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c75f	a75f	90 06		bcc $a767			bcc 	_GXAXExit
.c761	a761	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c763	a763	85 3d		sta $3d				sta 	gxzScreen+1
.c765	a765	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c767	a767					_GXAXExit:
.c767	a767	60		rts				rts
.c768	a768					GXIncrementY:
.c768	a768	ee c3 07	inc $07c3			inc 	gxY0
.c76b	a76b	20 e4 ab	jsr $abe4			jsr 	GXMovePositionDown
.c76e	a76e	60		rts				rts
.c76f	a76f					GXLineSetup:
.c76f	a76f	ad c7 07	lda $07c7			lda 	gxY1
.c772	a772	38		sec				sec
.c773	a773	ed c3 07	sbc $07c3			sbc 	gxY0
.c776	a776	4a		lsr a				lsr 	a
.c777	a777	8d 5f 08	sta $085f			sta 	gxDiffY
.c77a	a77a	9c 61 08	stz $0861			stz 	gxDXNegative 				; clear -ve flag
.c77d	a77d	38		sec				sec
.c77e	a77e	ad c5 07	lda $07c5			lda 	gxX1
.c781	a781	ed c1 07	sbc $07c1			sbc 	gxX0
.c784	a784	8d 5e 08	sta $085e			sta 	gxDiffX
.c787	a787	ad c6 07	lda $07c6			lda 	gxX1+1 						; calculate MSB
.c78a	a78a	ed c2 07	sbc $07c2			sbc 	gxX0+1
.c78d	a78d	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c78e	a78e	6e 5e 08	ror $085e			ror 	gxDiffX
.c791	a791	0a		asl a				asl 	a
.c792	a792	10 0c		bpl $a7a0			bpl 	_GDXNotNegative
.c794	a794	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c796	a796	38		sec				sec
.c797	a797	ed 5e 08	sbc $085e			sbc 	gxDiffX
.c79a	a79a	8d 5e 08	sta $085e			sta 	gxDiffX
.c79d	a79d	ce 61 08	dec $0861			dec 	gxDXNegative 				; -ve flag = $FF.
.c7a0	a7a0					_GDXNotNegative:
.c7a0	a7a0	9c 60 08	stz $0860			stz 	gxIsDiffYLarger 			; clear larger flag
.c7a3	a7a3	ad 5f 08	lda $085f			lda 	gxDiffY 					; set adjust and total.
.c7a6	a7a6	8d 63 08	sta $0863			sta 	gxAdjust
.c7a9	a7a9	ad 5e 08	lda $085e			lda 	gxDiffX
.c7ac	a7ac	8d 64 08	sta $0864			sta 	gxTotal
.c7af	a7af	ad 5f 08	lda $085f			lda 	gxDiffY 					; if dy > dx
.c7b2	a7b2	cd 5e 08	cmp $085e			cmp 	gxDiffX
.c7b5	a7b5	90 0f		bcc $a7c6			bcc 	_GDXNotLarger
.c7b7	a7b7	ce 60 08	dec $0860			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7ba	a7ba	ad 5e 08	lda $085e			lda 	gxDiffX 					; set adjust and total other way round
.c7bd	a7bd	8d 63 08	sta $0863			sta 	gxAdjust
.c7c0	a7c0	ad 5f 08	lda $085f			lda 	gxDiffY
.c7c3	a7c3	8d 64 08	sta $0864			sta 	gxTotal
.c7c6	a7c6					_GDXNotLarger:
.c7c6	a7c6	ad 64 08	lda $0864			lda 	gxTotal
.c7c9	a7c9	4a		lsr a				lsr 	a
.c7ca	a7ca	8d 62 08	sta $0862			sta 	gxPosition
.c7cd	a7cd	60		rts				rts
.085e						gxDiffX:
>085e								.fill 	1
.085f						gxDiffY:
>085f								.fill 	1
.0860						gxIsDiffYLarger:
>0860								.fill 	1
.0861						gxDXNegative:
>0861								.fill 	1
.0862						gxPosition:
>0862								.fill 	1
.0863						gxAdjust:
>0863								.fill 	1
.0864						gxTotal:
>0864								.fill 	1
.0865						gxAddSelect:
>0865								.fill 	1
.c7ce	a7ce					GXSetColourMode:
.c7ce	a7ce	a6 36		ldx $36				ldx 	gxzTemp0
.c7d0	a7d0	8e cf 07	stx $07cf			stx 	gxColour 								; set colour
.c7d3	a7d3	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7d5	a7d5	8d ce 07	sta $07ce			sta 	gxMode 									; set mode
.c7d8	a7d8	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7da	a7da	9c d1 07	stz $07d1			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7dd	a7dd	ae cf 07	ldx $07cf			ldx 	gxColour
.c7e0	a7e0	8e d0 07	stx $07d0			stx 	gxEORValue
.c7e3	a7e3	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7e5	a7e5	90 03		bcc $a7ea			bcc 	_GXSDCNotAndColour
.c7e7	a7e7	8e d1 07	stx $07d1			stx 	gxANDValue
.c7ea	a7ea					_GXSDCNotAndColour:
.c7ea	a7ea	d0 03		bne $a7ef			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7ec	a7ec	9c d0 07	stz $07d0			stz 	gxEORValue
.c7ef	a7ef					_GXSDCNotAnd:
.c7ef	a7ef	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7f0	a7f0	90 08		bcc $a7fa			bcc 	_GXSDCNoFlip
.c7f2	a7f2	ad d1 07	lda $07d1			lda	 	gxANDValue
.c7f5	a7f5	49 ff		eor #$ff			eor 	#$FF
.c7f7	a7f7	8d d1 07	sta $07d1			sta 	gxANDValue
.c7fa	a7fa					_GXSDCNoFlip:
.c7fa	a7fa	18		clc				clc
.c7fb	a7fb	60		rts				rts
.c7fc	a7fc					GXPlotPoint:
.c7fc	a7fc	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start drawing
.c7ff	a7ff	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c802	a802	ac d3 07	ldy $07d3			ldy 	gxOffset
.c805	a805	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c807	a807	2d d1 07	and $07d1			and 	gxANDValue
.c80a	a80a	4d d0 07	eor $07d0			eor 	gxEORValue
.c80d	a80d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c80f	a80f	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c812	a812	18		clc				clc
.c813	a813	60		rts				rts
.c814	a814					GXFillRectangle:
.c814	a814	38		sec				sec
.c815	a815	80 01		bra $a818			bra 	GXRectangle
.c817	a817					GXFrameRectangle:
.c817	a817	18		clc				clc
.c818	a818					GXRectangle:
.c818	a818	ad ca 07	lda $07ca			lda 	gxBitmapsOn
.c81b	a81b	f0 35		beq $a852			beq 	_GXRFail
.c81d	a81d	08		php				php 								; save Fill flag (CS)
.c81e	a81e	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start drawing
.c821	a821	20 a6 ac	jsr $aca6			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c824	a824	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c827	a827	38		sec				sec 								; sec = Draw line
.c828	a828	20 54 a8	jsr $a854			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c82b	a82b	ad c3 07	lda $07c3			lda 	gxY0 						; reached end of rectangle ?
.c82e	a82e	cd c7 07	cmp $07c7			cmp 	gxY1
.c831	a831	f0 19		beq $a84c			beq 	_GXRectangleExit
.c833	a833					_GXRectLoop:
.c833	a833	20 e4 ab	jsr $abe4			jsr 	GXMovePositionDown 			; down one.
.c836	a836	ee c3 07	inc $07c3			inc 	gxY0 						; change Y pos
.c839	a839	ad c3 07	lda $07c3			lda 	gxY0 						; reached last line
.c83c	a83c	cd c7 07	cmp $07c7			cmp 	gxY1
.c83f	a83f	f0 07		beq $a848			beq 	_GXLastLine
.c841	a841	28		plp				plp 								; get flag back
.c842	a842	08		php				php
.c843	a843	20 54 a8	jsr $a854			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c846	a846	80 eb		bra $a833			bra 	_GXRectLoop
.c848	a848					_GXLastLine:
.c848	a848	38		sec				sec
.c849	a849	20 54 a8	jsr $a854			jsr 	GXDrawLineX1X0
.c84c	a84c					_GXRectangleExit:
.c84c	a84c	68		pla				pla 								; throw fill flag.
.c84d	a84d	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c850	a850	18		clc				clc
.c851	a851	60		rts				rts
.c852	a852					_GXRFail:
.c852	a852	38		sec				sec
.c853	a853	60		rts				rts
.c854	a854					GXDrawLineX1X0:
.c854	a854	08		php				php 								; save solid/either-end
.c855	a855	38		sec				sec
.c856	a856	ad c5 07	lda $07c5			lda		gxX1
.c859	a859	ed c1 07	sbc $07c1			sbc 	gxX0
.c85c	a85c	85 36		sta $36				sta 	gxzTemp0
.c85e	a85e	ad c6 07	lda $07c6			lda 	gxX1+1
.c861	a861	ed c2 07	sbc $07c2			sbc 	gxX0+1
.c864	a864	85 37		sta $37				sta 	gxzTemp0+1
.c866	a866	28		plp				plp
.c867	a867					GXDrawLineTemp0:
.c867	a867	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.c869	a869	48		pha				pha
.c86a	a86a	a5 3d		lda $3d				lda 	gxzScreen+1
.c86c	a86c	48		pha				pha
.c86d	a86d	ad d3 07	lda $07d3			lda 	gxOffset
.c870	a870	48		pha				pha
.c871	a871	a5 0b		lda $0b				lda 	GXEditSlot
.c873	a873	48		pha				pha
.c874	a874	ac d3 07	ldy $07d3			ldy 	gxOffset 					; Y offset
.c877	a877	90 1e		bcc $a897			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c879	a879					_GXDLTLine:
.c879	a879	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c87b	a87b	2d d1 07	and $07d1			and 	gxANDValue
.c87e	a87e	4d d0 07	eor $07d0			eor 	gxEORValue
.c881	a881	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c883	a883	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c885	a885	d0 04		bne $a88b			bne 	_GXDLTNoBorrow
.c887	a887	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c889	a889	30 2e		bmi $a8b9			bmi 	_GXDLTExit
.c88b	a88b					_GXDLTNoBorrow:
.c88b	a88b	c6 36		dec $36				dec 	gxzTemp0
.c88d	a88d	c8		iny				iny 								; next slot.
.c88e	a88e	d0 e9		bne $a879			bne 	_GXDLTLine
.c890	a890	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.c892	a892	20 c7 a8	jsr $a8c7			jsr 	GXDLTCheckWrap				; check for new page.
.c895	a895	80 e2		bra $a879			bra 	_GXDLTLine
.c897	a897					_GXDLTEndPoints:
.c897	a897	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c899	a899	2d d1 07	and $07d1			and 	gxANDValue
.c89c	a89c	4d d0 07	eor $07d0			eor 	gxEORValue
.c89f	a89f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8a1	a8a1	98		tya				tya 								; advance to right side
.c8a2	a8a2	18		clc				clc
.c8a3	a8a3	65 36		adc $36				adc 	gxzTemp0
.c8a5	a8a5	a8		tay				tay
.c8a6	a8a6	a5 3d		lda $3d				lda 	gxzScreen+1
.c8a8	a8a8	65 37		adc $37				adc 	gxzTemp0+1
.c8aa	a8aa	85 3d		sta $3d				sta 	gxzScreen+1
.c8ac	a8ac	20 c7 a8	jsr $a8c7			jsr 	GXDLTCheckWrap 			; fix up.
.c8af	a8af	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c8b1	a8b1	2d d1 07	and $07d1			and 	gxANDValue
.c8b4	a8b4	4d d0 07	eor $07d0			eor 	gxEORValue
.c8b7	a8b7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8b9	a8b9					_GXDLTExit:
.c8b9	a8b9	68		pla				pla
.c8ba	a8ba	85 0b		sta $0b				sta 	GXEditSlot
.c8bc	a8bc	68		pla				pla
.c8bd	a8bd	8d d3 07	sta $07d3			sta 	gxOffset
.c8c0	a8c0	68		pla				pla
.c8c1	a8c1	85 3d		sta $3d				sta 	gxzScreen+1
.c8c3	a8c3	68		pla				pla
.c8c4	a8c4	85 3c		sta $3c				sta 	gxzScreen
.c8c6	a8c6	60		rts				rts
.c8c7	a8c7					GXDLTCheckWrap:
.c8c7	a8c7	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.c8c9	a8c9	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8cb	a8cb	90 06		bcc $a8d3			bcc 	_GXDLTCWExit
.c8cd	a8cd	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8cf	a8cf	85 3d		sta $3d				sta 	gxzScreen+1
.c8d1	a8d1	e6 0b		inc $0b				inc 	GXEditSlot
.c8d3	a8d3					_GXDLTCWExit:
.c8d3	a8d3	60		rts				rts
.c8d4	a8d4					GXDrawGraphicElement:
.c8d4	a8d4	8d 66 08	sta $0866			sta 	gxSize 						; save size
.c8d7	a8d7	3a		dec a				dec 	a
.c8d8	a8d8	8d 67 08	sta $0867			sta 	gxMask 						; and mask
.c8db	a8db	ad ca 07	lda $07ca			lda 	gxBitmapsOn 				; check BMP on
.c8de	a8de	f0 67		beq $a947			beq 	_GXSLFail
.c8e0	a8e0	ad c3 07	lda $07c3			lda 	gxY0 						; push Y on stack
.c8e3	a8e3	48		pha				pha
.c8e4	a8e4	8c 69 08	sty $0869			sty 	gxAcquireVector+1 			; and acquisition vector
.c8e7	a8e7	8e 68 08	stx $0868			stx 	gxAcquireVector
.c8ea	a8ea	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; open the bitmap.
.c8ed	a8ed	ad 6b 08	lda $086b			lda 	gxUseMode 					; scale bits
.c8f0	a8f0	4a		lsr a				lsr 	a
.c8f1	a8f1	4a		lsr a				lsr 	a
.c8f2	a8f2	4a		lsr a				lsr 	a
.c8f3	a8f3	29 07		and #$07			and		#7
.c8f5	a8f5	1a		inc a				inc 	a
.c8f6	a8f6	8d 6a 08	sta $086a			sta 	gxScale
.c8f9	a8f9	64 38		stz $38				stz 	gxzTemp1					; start first line
.c8fb	a8fb					_GXGELoop:
.c8fb	a8fb	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c8fd	a8fd	2c 6b 08	bit $086b			bit 	gxUseMode 					; check for flip.
.c900	a900	10 06		bpl $a908			bpl		_GXNoVFlip
.c902	a902	ad 67 08	lda $0867			lda 	gxMask
.c905	a905	38		sec				sec
.c906	a906	e5 38		sbc $38				sbc 	gxzTemp1
.c908	a908					_GXNoVFlip:
.c908	a908	aa		tax				tax 								; get the Xth line.
.c909	a909	20 49 a9	jsr $a949			jsr 	_GXCallAcquire 				; get that data.
.c90c	a90c	ad 6a 08	lda $086a			lda 	gxScale 					; do scale identical copies of that line.
.c90f	a90f	85 39		sta $39				sta 	gxzTemp1+1
.c911	a911					_GXGELoop2:
.c911	a911	ad c3 07	lda $07c3			lda 	gxY0 						; off screen
.c914	a914	cd cd 07	cmp $07cd			cmp 	gxHeight
.c917	a917	b0 10		bcs $a929			bcs 	_GXDGEExit
.c919	a919	20 4c a9	jsr $a94c			jsr 	GXRenderOneLine 			; render line
.c91c	a91c	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c91e	a91e	d0 f1		bne $a911			bne 	_GXGELoop2
.c920	a920	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c922	a922	a5 38		lda $38				lda 	gxzTemp1
.c924	a924	cd 66 08	cmp $0866			cmp 	gxSize
.c927	a927	d0 d2		bne $a8fb			bne 	_GXGELoop
.c929	a929					_GXDGEExit:
.c929	a929	68		pla				pla 								; restore Y for next time
.c92a	a92a	8d c3 07	sta $07c3			sta 	gxY0
.c92d	a92d	ae 6a 08	ldx $086a			ldx 	gxScale 					; get scale (1-8)
.c930	a930					_GXShiftLeft:
.c930	a930	18		clc				clc
.c931	a931	ad 66 08	lda $0866			lda 	gxSize
.c934	a934	6d c1 07	adc $07c1			adc 	gxX0
.c937	a937	8d c1 07	sta $07c1			sta 	gxX0
.c93a	a93a	90 03		bcc $a93f			bcc 	_GXSLNoCarry
.c93c	a93c	ee c2 07	inc $07c2			inc 	gxX0+1
.c93f	a93f					_GXSLNoCarry:
.c93f	a93f	ca		dex				dex
.c940	a940	d0 ee		bne $a930			bne 	_GXShiftLeft
.c942	a942	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.c945	a945	18		clc				clc
.c946	a946	60		rts				rts
.c947	a947					_GXSLFail:
.c947	a947	38		sec				sec
.c948	a948	60		rts				rts
.c949	a949					_GXCallAcquire:
.c949	a949	6c 68 08	jmp ($0868)			jmp 	(gxAcquireVector)
.c94c	a94c					GXRenderOneLine:
.c94c	a94c	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c94f	a94f	ac d3 07	ldy $07d3			ldy 	gxOffset 					; Y contains position.
.c952	a952	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c954	a954					_GXROLLoop1:
.c954	a954	ad 6a 08	lda $086a			lda 	gxScale 					; set to do 'scale' times
.c957	a957	85 3b		sta $3b				sta 	gxzTemp2+1
.c959	a959					_GXROLLoop2:
.c959	a959	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c95b	a95b	2c ce 07	bit $07ce			bit 	gxMode 						; check H Flip
.c95e	a95e	50 06		bvc $a966			bvc 	_GXNoHFlip
.c960	a960	ad 67 08	lda $0867			lda 	gxMask
.c963	a963	38		sec				sec
.c964	a964	e5 3a		sbc $3a				sbc 	gxzTemp2
.c966	a966					_GXNoHFlip:
.c966	a966	aa		tax				tax 								; read from the pixel buffer
.c967	a967	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c96a	a96a	d0 07		bne $a973			bne 	_GXDraw 					; draw if non zero
.c96c	a96c	ad 6b 08	lda $086b			lda 	gxUseMode 					; check to see if solid background
.c96f	a96f	29 04		and #$04			and 	#4
.c971	a971	f0 0a		beq $a97d			beq 	_GXZeroPixel
.c973	a973					_GXDraw:
.c973	a973	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c975	a975	2d d1 07	and $07d1			and 	gxANDValue
.c978	a978	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c97b	a97b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c97d	a97d					_GXZeroPixel:
.c97d	a97d	c8		iny				iny 								; advance pointer
.c97e	a97e	d0 05		bne $a985			bne 	_GXNoShift
.c980	a980	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c982	a982	20 c7 a8	jsr $a8c7			jsr 	GXDLTCheckWrap				; check for new page.
.c985	a985					_GXNoShift:
.c985	a985	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c987	a987	d0 d0		bne $a959			bne 	_GXROLLoop2
.c989	a989	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c98b	a98b	a5 3a		lda $3a				lda 	gxzTemp2
.c98d	a98d	cd 66 08	cmp $0866			cmp 	gxSize
.c990	a990	d0 c2		bne $a954			bne 	_GXROLLoop1
.c992	a992	ee c3 07	inc $07c3			inc 	gxY0
.c995	a995	60		rts				rts
.0866						gxSize:
>0866								.fill 	1
.0867						gxMask:
>0867								.fill 	1
.0868						gxAcquireVector:
>0868								.fill 	2
.086a						gxScale:
>086a								.fill 	1
.086b						gxUseMode:
>086b								.fill 	1
.c996	a996					GXFontHandler:
.c996	a996	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c998	a998	4d ce 07	eor $07ce			eor 	gxMode
.c99b	a99b	8d 6b 08	sta $086b			sta 	gxUseMode
.c99e	a99e	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.c9a0	a9a0	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.c9a2	a9a2	26 37		rol $37				rol	 	gxzTemp0+1
.c9a4	a9a4	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.c9a6	a9a6	26 37		rol $37				rol	 	gxzTemp0+1
.c9a8	a9a8	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.c9aa	a9aa	26 37		rol $37				rol	 	gxzTemp0+1
.c9ac	a9ac	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.c9ae	a9ae	09 c0		ora #$c0			ora 	#$C0
.c9b0	a9b0	85 37		sta $37				sta 	gxzTemp0+1
.c9b2	a9b2	a9 08		lda #$08			lda 	#8 							; size 8x8
.c9b4	a9b4	a2 bc		ldx #$bc			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.c9b6	a9b6	a0 a9		ldy #$a9			ldy 	#GXGetGraphicDataFont >> 8
.c9b8	a9b8	20 d4 a8	jsr $a8d4			jsr 	GXDrawGraphicElement
.c9bb	a9bb	60		rts				rts
.c9bc	a9bc					GXGetGraphicDataFont:
.c9bc	a9bc	8a		txa				txa 								; X->Y
.c9bd	a9bd	a8		tay				tay
.c9be	a9be	a6 01		ldx $01				ldx 	1 							; preserve old value
.c9c0	a9c0	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.c9c2	a9c2	85 01		sta $01				sta 	1
.c9c4	a9c4	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.c9c6	a9c6	86 01		stx $01				stx 	1 							; put old value back.
.c9c8	a9c8	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.c9ca	a9ca					_GXExpand:
.c9ca	a9ca	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.c9cd	a9cd	0a		asl a				asl 	a 							; shift bit 7 into C
.c9ce	a9ce	90 08		bcc $a9d8			bcc 	_GXNoPixel
.c9d0	a9d0	48		pha				pha 								; if set, set pixel buffer to current colour.
.c9d1	a9d1	ad cf 07	lda $07cf			lda 	gxColour
.c9d4	a9d4	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.c9d7	a9d7	68		pla				pla
.c9d8	a9d8					_GXNoPixel:
.c9d8	a9d8	e8		inx				inx 								; do the whole byte.
.c9d9	a9d9	e0 08		cpx #$08			cpx 	#8
.c9db	a9db	d0 ed		bne $a9ca			bne 	_GXExpand
.c9dd	a9dd	60		rts				rts
.c9de	a9de					GXSpriteHandler:
.c9de	a9de	ad c9 07	lda $07c9			lda 	gxSpritesOn 				; sprites on ?
.c9e1	a9e1	f0 23		beq $aa06			beq 	_GXSHExit
.c9e3	a9e3	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9e5	a9e5	4d ce 07	eor $07ce			eor 	gxMode
.c9e8	a9e8	8d 6b 08	sta $086b			sta 	gxUseMode
.c9eb	a9eb	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.c9ed	a9ed	da		phx				phx
.c9ee	a9ee	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; can access sprite information
.c9f1	a9f1	68		pla				pla
.c9f2	a9f2	20 5f ac	jsr $ac5f			jsr 	GXFindSprite 				; get the sprite address
.c9f5	a9f5	08		php				php
.c9f6	a9f6	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.c9f9	a9f9	28		plp				plp
.c9fa	a9fa	b0 0a		bcs $aa06			bcs		_GXSHExit 					; exit if find failed.
.c9fc	a9fc	ad 6c 08	lda $086c			lda 	gxSizePixels 				; return size
.c9ff	a9ff	a2 07		ldx #$07			ldx 	#GXSpriteAcquire & $FF
.ca01	aa01	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca03	aa03	20 d4 a8	jsr $a8d4			jsr 	GXDrawGraphicElement
.ca06	aa06					_GXSHExit:
.ca06	aa06	60		rts				rts
.ca07	aa07					GXSpriteAcquire:
.ca07	aa07	ad cc 07	lda $07cc			lda 	gxSpritePage				; point to base page
.ca0a	aa0a	85 0b		sta $0b				sta 	GXEditSlot
.ca0c	aa0c	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca0e	aa0e	a9 00		lda #$00			lda 	#0
.ca10	aa10	ae 6d 08	ldx $086d			ldx 	gxSizeBits
.ca13	aa13					_GXTimesRowNumber:
.ca13	aa13	18		clc				clc
.ca14	aa14	65 36		adc $36				adc 	gxzTemp0
.ca16	aa16	ca		dex				dex
.ca17	aa17	10 fa		bpl $aa13			bpl 	_GXTimesRowNumber
.ca19	aa19	64 37		stz $37				stz 	gxzTemp0+1
.ca1b	aa1b	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca1c	aa1c	26 37		rol $37				rol 	gxzTemp0+1
.ca1e	aa1e	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca1f	aa1f	26 37		rol $37				rol 	gxzTemp0+1
.ca21	aa21	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca22	aa22	26 37		rol $37				rol 	gxzTemp0+1
.ca24	aa24	85 36		sta $36				sta 	gxzTemp0
.ca26	aa26	18		clc				clc 								; add base address.
.ca27	aa27	a5 36		lda $36				lda 	gxzTemp0
.ca29	aa29	6d 6f 08	adc $086f			adc 	gxSpriteOffset
.ca2c	aa2c	85 36		sta $36				sta 	gxzTemp0
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1
.ca30	aa30	6d 70 08	adc $0870			adc 	gxSpriteOffset+1
.ca33	aa33					_GXSAFindPage:
.ca33	aa33	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca35	aa35	90 06		bcc $aa3d			bcc 	_GXSAFoundPage
.ca37	aa37	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca39	aa39	e6 0b		inc $0b				inc 	GXEditSlot
.ca3b	aa3b	80 f6		bra $aa33			bra 	_GXSAFindPage
.ca3d	aa3d					_GXSAFoundPage:
.ca3d	aa3d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ca3f	aa3f	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ca41	aa41	a0 00		ldy #$00			ldy 	#0
.ca43	aa43					_GXSACopyLoop:
.ca43	aa43	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ca45	aa45	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ca48	aa48	c8		iny				iny
.ca49	aa49	cc 6c 08	cpy $086c			cpy 	gxSizePixels
.ca4c	aa4c	d0 f5		bne $aa43			bne 	_GXSACopyLoop
.ca4e	aa4e	60		rts				rts
.ca4f	aa4f					GXSelect:
.ca4f	aa4f	ad c9 07	lda $07c9			lda 	gxSpritesOn
.ca52	aa52	f0 22		beq $aa76			beq 	_GXSFail
.ca54	aa54	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ca56	aa56	c9 40		cmp #$40			cmp 	#64
.ca58	aa58	b0 1c		bcs $aa76			bcs 	_GXSFail
.ca5a	aa5a	8d d4 07	sta $07d4			sta 	GSCurrentSpriteID
.ca5d	aa5d	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ca5f	aa5f	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ca61	aa61	06 36		asl $36				asl 	gxzTemp0
.ca63	aa63	06 36		asl $36				asl 	gxzTemp0
.ca65	aa65	06 36		asl $36				asl 	gxzTemp0
.ca67	aa67	2a		rol a				rol 	a
.ca68	aa68	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ca6a	aa6a	8d d6 07	sta $07d6			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ca6d	aa6d	85 37		sta $37				sta 	gxzTemp0+1
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d d5 07	sta $07d5			sta 	GSCurrentSpriteAddr
.ca74	aa74	18		clc				clc
.ca75	aa75	60		rts				rts
.ca76	aa76					_GXSFail:
.ca76	aa76	38		sec				sec
.ca77	aa77	60		rts				rts
.ca78	aa78					GXSelectImage:
.ca78	aa78	ad c9 07	lda $07c9			lda 	gxSpritesOn
.ca7b	aa7b	f0 74		beq $aaf1			beq 	_GXSIFail
.ca7d	aa7d	ad d6 07	lda $07d6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ca80	aa80	f0 6f		beq $aaf1			beq 	_GXSIFail 					; (checking the MSB)
.ca82	aa82	64 01		stz $01				stz 	1
.ca84	aa84	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ca86	aa86	d0 6b		bne $aaf3			bne 	_GXSIHide
.ca88	aa88	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ca8a	aa8a	48		pha				pha
.ca8b	aa8b	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap
.ca8e	aa8e	68		pla				pla
.ca8f	aa8f	20 5f ac	jsr $ac5f			jsr 	GXFindSprite
.ca92	aa92	b0 5a		bcs $aaee			bcs 	_GXSICloseFail 				; no image
.ca94	aa94	a0 01		ldy #$01			ldy 	#1
.ca96	aa96	ad d5 07	lda $07d5			lda 	GSCurrentSpriteAddr
.ca99	aa99	85 36		sta $36				sta 	gxzTemp0
.ca9b	aa9b	ad d6 07	lda $07d6			lda 	GSCurrentSpriteAddr+1
.ca9e	aa9e	85 37		sta $37				sta 	gxzTemp0+1
.caa0	aaa0	ad 6f 08	lda $086f			lda 	gxSpriteOffset
.caa3	aaa3	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.caa5	aaa5	18		clc				clc
.caa6	aaa6	ad 70 08	lda $0870			lda 	gxSpriteOffset+1
.caa9	aaa9	6d d7 07	adc $07d7			adc 	gxSpriteOffsetBase
.caac	aaac	c8		iny				iny
.caad	aaad	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.caaf	aaaf	ad d8 07	lda $07d8			lda 	gxSpriteOffsetBase+1
.cab2	aab2	69 00		adc #$00			adc 	#0
.cab4	aab4	c8		iny				iny
.cab5	aab5	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cab7	aab7	ad 6d 08	lda $086d			lda 	gxSizeBits 					; get raw size
.caba	aaba	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cabc	aabc	2a		rol a				rol 	a 							; x 2
.cabd	aabd	0a		asl a				asl 	a 							; x 4
.cabe	aabe	0a		asl a				asl 	a 							; x 8
.cabf	aabf	0a		asl a				asl 	a 							; x 16
.cac0	aac0	0d 6e 08	ora $086e			ora 	gxSpriteLUT 				; Or with LUT
.cac3	aac3	0a		asl a				asl 	a 							; 1 shift
.cac4	aac4	09 01		ora #$01			ora 	#1 							; enable sprite.
.cac6	aac6	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cac8	aac8	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.cacb	aacb	ae d4 07	ldx $07d4			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cace	aace	bd 19 08	lda $0819,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cad1	aad1	29 3f		and #$3f			and 	#$3F
.cad3	aad3	9d 19 08	sta $0819,x			sta 	gxSpriteHigh,x
.cad6	aad6	ad 6d 08	lda $086d			lda 	gxSizeBits 					; get bit size
.cad9	aad9	6a		ror a				ror 	a 							; shift into bits 6/7
.cada	aada	6a		ror a				ror 	a
.cadb	aadb	6a		ror a				ror 	a
.cadc	aadc	29 c0		and #$c0			and 	#$C0
.cade	aade	1d 19 08	ora $0819,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cae1	aae1	9d 19 08	sta $0819,x			sta 	gxSpriteHigh,x
.cae4	aae4	bd d9 07	lda $07d9,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cae7	aae7	29 7f		and #$7f			and 	#$7F
.cae9	aae9	9d d9 07	sta $07d9,x			sta 	gxSpriteLow,x
.caec	aaec	18		clc				clc
.caed	aaed	60		rts				rts
.caee	aaee					_GXSICloseFail:
.caee	aaee	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.caf1	aaf1					_GXSIFail:
.caf1	aaf1	38		sec				sec
.caf2	aaf2	60		rts				rts
.caf3	aaf3					_GXSIHide:
.caf3	aaf3	ad d5 07	lda $07d5			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.caf6	aaf6	85 36		sta $36				sta 	gxzTemp0
.caf8	aaf8	ad d6 07	lda $07d6			lda 	GSCurrentSpriteAddr+1
.cafb	aafb	85 37		sta $37				sta 	gxzTemp0+1
.cafd	aafd	a9 00		lda #$00			lda 	#0
.caff	aaff	92 36		sta ($36)			sta 	(gxzTemp0)
.cb01	ab01	ae d4 07	ldx $07d4			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb04	ab04	bd d9 07	lda $07d9,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb07	ab07	09 80		ora #$80			ora 	#$80
.cb09	ab09	9d d9 07	sta $07d9,x			sta 	gxSpriteLow,x
.cb0c	ab0c	18		clc				clc
.cb0d	ab0d	60		rts				rts
.cb0e	ab0e					GXMoveSprite:
.cb0e	ab0e	ad c9 07	lda $07c9			lda 	gxSpritesOn
.cb11	ab11	f0 65		beq $ab78			beq 	_GXSIFail
.cb13	ab13	ad d6 07	lda $07d6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb16	ab16	f0 60		beq $ab78			beq 	_GXSIFail
.cb18	ab18	85 37		sta $37				sta 	gxzTemp0+1
.cb1a	ab1a	a0 04		ldy #$04			ldy 	#4
.cb1c	ab1c	ad d5 07	lda $07d5			lda 	GSCurrentSpriteAddr
.cb1f	ab1f	85 36		sta $36				sta 	gxzTemp0
.cb21	ab21	ae d4 07	ldx $07d4			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb24	ab24	bd 19 08	lda $0819,x			lda 	gxSpriteHigh,x
.cb27	ab27	2a		rol a				rol 	a	 						; into bits 0,1.
.cb28	ab28	2a		rol a				rol 	a
.cb29	ab29	2a		rol a				rol 	a
.cb2a	ab2a	29 03		and #$03			and 	#3
.cb2c	ab2c	aa		tax				tax
.cb2d	ab2d	bd 7a ab	lda $ab7a,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb30	ab30	48		pha				pha
.cb31	ab31	18		clc				clc
.cb32	ab32	6d c1 07	adc $07c1			adc 	gxX0						; copy position.
.cb35	ab35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb37	ab37	c8		iny				iny
.cb38	ab38	ad c2 07	lda $07c2			lda 	gxX0+1
.cb3b	ab3b	69 00		adc #$00			adc 	#0
.cb3d	ab3d	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb3f	ab3f	c8		iny				iny
.cb40	ab40	68		pla				pla
.cb41	ab41	18		clc				clc
.cb42	ab42	6d c3 07	adc $07c3			adc 	gxY0
.cb45	ab45	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb47	ab47	a9 00		lda #$00			lda 	#0
.cb49	ab49	69 00		adc #$00			adc 	#0
.cb4b	ab4b	c8		iny				iny
.cb4c	ab4c	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb4e	ab4e	4e c2 07	lsr $07c2			lsr 	gxX0+1 						; divide X by 4
.cb51	ab51	6e c1 07	ror $07c1			ror 	gxX0
.cb54	ab54	4e c1 07	lsr $07c1			lsr 	gxX0
.cb57	ab57	4e c3 07	lsr $07c3			lsr 	gxY0 						; divide Y by 4
.cb5a	ab5a	4e c3 07	lsr $07c3			lsr 	gxY0
.cb5d	ab5d	ae d4 07	ldx $07d4			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cb60	ab60	bd d9 07	lda $07d9,x			lda 	gxSpriteLow,x
.cb63	ab63	29 80		and #$80			and 	#$80
.cb65	ab65	0d c1 07	ora $07c1			ora 	gxX0
.cb68	ab68	9d d9 07	sta $07d9,x			sta 	gxSpriteLow,x
.cb6b	ab6b	bd 19 08	lda $0819,x			lda 	gxSpriteHigh,x
.cb6e	ab6e	29 c0		and #$c0			and 	#$C0
.cb70	ab70	0d c3 07	ora $07c3			ora 	gxY0
.cb73	ab73	9d 19 08	sta $0819,x			sta 	gxSpriteHigh,x
.cb76	ab76	18		clc				clc
.cb77	ab77	60		rts				rts
.cb78	ab78					_GXSIFail:
.cb78	ab78	38		sec				sec
.cb79	ab79	60		rts				rts
.cb7a	ab7a					_GXMSOffset:
>cb7a	ab7a	1c						.byte 	32-8/2
>cb7b	ab7b	18						.byte 	32-16/2
>cb7c	ab7c	14						.byte 	32-24/2
>cb7d	ab7d	10						.byte 	32-32/2
.cb7e	ab7e					GXOpenBitmap:
.cb7e	ab7e	78		sei				sei 								; no interrupts here
.cb7f	ab7f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cb81	ab81	8d d2 07	sta $07d2			sta 	gxOriginalLUTValue
.cb84	ab84	58		cli				cli
.cb85	ab85	60		rts				rts
.cb86	ab86					GXCloseBitmap:
.cb86	ab86	78		sei				sei
.cb87	ab87	ad d2 07	lda $07d2			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cb8a	ab8a	85 0b		sta $0b				sta 	GXEditSlot
.cb8c	ab8c	58		cli				cli
.cb8d	ab8d	60		rts				rts
.cb8e	ab8e					gxPositionCalc:
.cb8e	ab8e	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cb90	ab90	48		pha				pha
.cb91	ab91	ad c3 07	lda $07c3			lda 	gxY0 						; gxzScreen = Y0
.cb94	ab94	85 3c		sta $3c				sta 	gxzScreen
.cb96	ab96	64 3d		stz $3d				stz 	gxzScreen+1
.cb98	ab98	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cb9a	ab9a	26 3d		rol $3d				rol 	gxzScreen+1
.cb9c	ab9c	06 3c		asl $3c				asl 	gxzScreen
.cb9e	ab9e	26 3d		rol $3d				rol 	gxzScreen+1
.cba0	aba0	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cba1	aba1	65 3c		adc $3c				adc 	gxzScreen
.cba3	aba3	85 3c		sta $3c				sta 	gxzScreen
.cba5	aba5	90 02		bcc $aba9			bcc 	_GXPCNoCarry
.cba7	aba7	e6 3d		inc $3d				inc 	gxzScreen+1
.cba9	aba9					_GXPCNoCarry:
.cba9	aba9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cbab	abab	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cbad	abad	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cbaf	abaf	85 36		sta $36				sta 	gxzTemp0
.cbb1	abb1	64 3d		stz $3d				stz 	gxzScreen+1
.cbb3	abb3	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cbb5	abb5					_GXPCMultiply32:
.cbb5	abb5	06 3c		asl $3c				asl 	gxzScreen
.cbb7	abb7	26 3d		rol $3d				rol 	gxzScreen+1
.cbb9	abb9	3a		dec a				dec 	a
.cbba	abba	d0 f9		bne $abb5			bne 	_GXPCMultiply32
.cbbc	abbc	18		clc				clc
.cbbd	abbd	ad c1 07	lda $07c1			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cbc0	abc0	65 3c		adc $3c				adc 	gxzScreen
.cbc2	abc2	8d d3 07	sta $07d3			sta 	gxOffset
.cbc5	abc5	ad c2 07	lda $07c2			lda 	gxX0+1
.cbc8	abc8	65 3d		adc $3d				adc 	gxzScreen+1
.cbca	abca	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cbcc	abcc	90 04		bcc $abd2			bcc 	_GXPCNoOverflow
.cbce	abce	29 1f		and #$1f			and 	#$1F 						; fix it up
.cbd0	abd0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cbd2	abd2					_GXPCNoOverflow:
.cbd2	abd2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cbd4	abd4	85 3d		sta $3d				sta 	gxzScreen+1
.cbd6	abd6	64 3c		stz $3c				stz 	gxzScreen
.cbd8	abd8	18		clc				clc
.cbd9	abd9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cbdb	abdb	6d cb 07	adc $07cb			adc 	gxBasePage 					; by adding the base page
.cbde	abde	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cbe0	abe0	68		pla				pla
.cbe1	abe1	85 36		sta $36				sta 	gxzTemp0
.cbe3	abe3	60		rts				rts
.cbe4	abe4					GXMovePositionDown:
.cbe4	abe4	18		clc				clc 								; add 320 to offset/temp+1
.cbe5	abe5	ad d3 07	lda $07d3			lda 	gxOffset
.cbe8	abe8	69 40		adc #$40			adc 	#64
.cbea	abea	8d d3 07	sta $07d3			sta 	gxOffset
.cbed	abed	a5 3d		lda $3d				lda 	gxzScreen+1
.cbef	abef	69 01		adc #$01			adc 	#1
.cbf1	abf1	85 3d		sta $3d				sta 	gxzScreen+1
.cbf3	abf3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cbf5	abf5	90 07		bcc $abfe			bcc 	_GXMPDExit
.cbf7	abf7	38		sec				sec  								; next page
.cbf8	abf8	e9 20		sbc #$20			sbc 	#$20
.cbfa	abfa	85 3d		sta $3d				sta 	gxzScreen+1
.cbfc	abfc	e6 0b		inc $0b				inc 	GXEditSlot
.cbfe	abfe					_GXMPDExit:
.cbfe	abfe	60		rts				rts
.cbff	abff					GXCollide:
.cbff	abff	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cc01	ac01	aa		tax				tax
.cc02	ac02	05 37		ora $37				ora 	gxzTemp0+1
.cc04	ac04	29 c0		and #$c0			and 	#$C0
.cc06	ac06	38		sec				sec
.cc07	ac07	d0 53		bne $ac5c			bne 	_GXCollideFail 				; if either >= 64, fail.
.cc09	ac09	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cc0b	ac0b	b9 d9 07	lda $07d9,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cc0e	ac0e	1d d9 07	ora $07d9,x			ora 	gxSpriteLow,x
.cc11	ac11	30 48		bmi $ac5b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cc13	ac13	18		clc				clc 								; need to calculate sum of sizes.
.cc14	ac14	b9 19 08	lda $0819,y			lda 	gxSpriteHigh,y
.cc17	ac17	7d 19 08	adc $0819,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cc1a	ac1a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cc1c	ac1c	6a		ror a				ror 	a 							; 5/6/7
.cc1d	ac1d	4a		lsr a				lsr 	a 							; 4/5/6
.cc1e	ac1e	4a		lsr a				lsr 	a 							; 3/4/5
.cc1f	ac1f	4a		lsr a				lsr 	a 							; 2/3/4
.cc20	ac20	18		clc				clc
.cc21	ac21	69 08		adc #$08			adc 	#$08
.cc23	ac23	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cc24	ac24	4a		lsr a				lsr 	a
.cc25	ac25	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cc27	ac27	b9 19 08	lda $0819,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cc2a	ac2a	29 3f		and #$3f			and 	#$3F
.cc2c	ac2c	85 39		sta $39				sta 	gxzTemp1+1
.cc2e	ac2e	38		sec				sec
.cc2f	ac2f	bd 19 08	lda $0819,x			lda 	gxSpriteHigh,x
.cc32	ac32	29 3f		and #$3f			and 	#$3F
.cc34	ac34	e5 39		sbc $39				sbc 	gxzTemp1+1
.cc36	ac36	b0 03		bcs $ac3b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cc38	ac38	49 ff		eor #$ff			eor 	#$FF
.cc3a	ac3a	1a		inc a				inc 	a
.cc3b	ac3b					_GXCAbs1:
.cc3b	ac3b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cc3d	ac3d	b0 1c		bcs $ac5b			bcs 	_GXOkayFail
.cc3f	ac3f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cc41	ac41	38		sec				sec 								; calculate |x1-x0|
.cc42	ac42	b9 d9 07	lda $07d9,y			lda 	gxSpriteLow,y
.cc45	ac45	fd d9 07	sbc $07d9,x			sbc 	gxSpriteLow,x
.cc48	ac48	b0 03		bcs $ac4d			bcs 	_GXCAbs2
.cc4a	ac4a	49 ff		eor #$ff			eor 	#$FF
.cc4c	ac4c	1a		inc a				inc 	a
.cc4d	ac4d					_GXCAbs2:
.cc4d	ac4d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cc4f	ac4f	b0 0a		bcs $ac5b			bcs 	_GXOkayFail
.cc51	ac51	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cc53	ac53	90 02		bcc $ac57			bcc 	_GXCHaveLowest
.cc55	ac55	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cc57	ac57					_GXCHaveLowest:
.cc57	ac57	0a		asl a				asl 	a 							; scale to allow for >> 2
.cc58	ac58	0a		asl a				asl 	a
.cc59	ac59	18		clc				clc
.cc5a	ac5a	60		rts				rts
.cc5b	ac5b					_GXOkayFail:
.cc5b	ac5b	18		clc				clc
.cc5c	ac5c					_GXCollideFail:
.cc5c	ac5c	a9 ff		lda #$ff			lda 	#$FF
.cc5e	ac5e	60		rts				rts
.cc5f	ac5f					GXFindSprite:
.cc5f	ac5f	aa		tax				tax
.cc60	ac60	ad cc 07	lda $07cc			lda 	gxSpritePage 				; access the base page of the sprite
.cc63	ac63	85 0b		sta $0b				sta 	GXEditSlot
.cc65	ac65	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.cc68	ac68	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.cc6b	ac6b	f0 33		beq $aca0			beq 	_GXFSFail
.cc6d	ac6d	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.cc70	ac70	8d 70 08	sta $0870			sta 	gxSpriteOffset+1
.cc73	ac73	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.cc76	ac76	48		pha				pha 								; save twice
.cc77	ac77	48		pha				pha
.cc78	ac78	29 03		and #$03			and 	#3 							; get sprite size
.cc7a	ac7a	8d 6d 08	sta $086d			sta 	gxSizeBits 					; save raw (0-3)
.cc7d	ac7d	aa		tax				tax
.cc7e	ac7e	bd a2 ac	lda $aca2,x			lda 	_GXFXSSTTable,x 			; read sprite size
.cc81	ac81	8d 6c 08	sta $086c			sta 	gxSizePixels 					; save (8/16/24/32)
.cc84	ac84	68		pla				pla 								; get LUT
.cc85	ac85	4a		lsr a				lsr		a
.cc86	ac86	4a		lsr a				lsr		a
.cc87	ac87	29 03		and #$03			and 	#3
.cc89	ac89	8d 6e 08	sta $086e			sta 	gxSpriteLUT
.cc8c	ac8c	68		pla				pla 								; address, neeeds to be x 4
.cc8d	ac8d	29 f0		and #$f0			and 	#$F0
.cc8f	ac8f	8d 6f 08	sta $086f			sta 	gxSpriteOffset
.cc92	ac92	0e 6f 08	asl $086f			asl 	gxSpriteOffset
.cc95	ac95	2e 70 08	rol $0870			rol 	gxSpriteOffset+1
.cc98	ac98	0e 6f 08	asl $086f			asl 	gxSpriteOffset
.cc9b	ac9b	2e 70 08	rol $0870			rol 	gxSpriteOffset+1
.cc9e	ac9e	18		clc				clc
.cc9f	ac9f	60		rts				rts
.cca0	aca0					_GXFSFail:
.cca0	aca0	38		sec				sec
.cca1	aca1	60		rts				rts
.cca2	aca2					_GXFXSSTTable:
>cca2	aca2	08 10 18 20					.byte 	8,16,24,32
.086c						gxSizePixels:
>086c								.fill 	1
.086d						gxSizeBits:
>086d								.fill 	1
.086e						gxSpriteLUT:
>086e								.fill 	1
.086f						gxSpriteOffset:
>086f								.fill 	2
.cca6	aca6					GXSortXY:
.cca6	aca6	20 c4 ac	jsr $acc4			jsr 	GXSortY 					; will be sorted on Y now
.cca9	aca9	ad c1 07	lda $07c1			lda 	gxX0 						; compare X0 v X1
.ccac	acac	cd c5 07	cmp $07c5			cmp 	gxX1
.ccaf	acaf	ad c2 07	lda $07c2			lda 	gxX0+1
.ccb2	acb2	ed c6 07	sbc $07c6			sbc 	gxX1+1
.ccb5	acb5	90 0c		bcc $acc3			bcc 	_GXSXYExit 					; X0 < X1 exit
.ccb7	acb7	a2 00		ldx #$00			ldx 	#0 							; swap them over
.ccb9	acb9	a0 04		ldy #$04			ldy 	#4
.ccbb	acbb	20 d8 ac	jsr $acd8			jsr 	GXSwapXY
.ccbe	acbe	e8		inx				inx
.ccbf	acbf	c8		iny				iny
.ccc0	acc0	20 d8 ac	jsr $acd8			jsr 	GXSwapXY
.ccc3	acc3					_GXSXYExit:
.ccc3	acc3	60		rts				rts
.ccc4	acc4					GXSortY:
.ccc4	acc4	ad c3 07	lda $07c3			lda 	gxY0 						; if Y0 >= Y1
.ccc7	acc7	cd c7 07	cmp $07c7			cmp 	gxY1
.ccca	acca	90 0b		bcc $acd7			bcc 	_GXSYSorted
.cccc	accc	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.ccce	acce	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.ccd0	acd0					_GXSwap1:
.ccd0	acd0	20 d8 ac	jsr $acd8			jsr 	GXSwapXY
.ccd3	acd3	88		dey				dey
.ccd4	acd4	ca		dex				dex
.ccd5	acd5	10 f9		bpl $acd0			bpl 	_GXSwap1
.ccd7	acd7					_GXSYSorted:
.ccd7	acd7	60		rts				rts
.ccd8	acd8					GXSwapXY:
.ccd8	acd8	bd c1 07	lda $07c1,x			lda 	gxX0,x
.ccdb	acdb	48		pha				pha
.ccdc	acdc	b9 c1 07	lda $07c1,y			lda 	gxX0,y
.ccdf	acdf	9d c1 07	sta $07c1,x			sta 	gxX0,x
.cce2	ace2	68		pla				pla
.cce3	ace3	99 c1 07	sta $07c1,y			sta 	gxX0,y
.cce6	ace6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cce7	ace7					KeywordSet0:
>cce7	ace7	00 65					.text	0,$65,""               ; $80 !0:EOF
>cce9	ace9	00 58					.text	0,$58,""               ; $81 !1:SH1
>cceb	aceb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cced	aced	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>ccf3	acf3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>ccfb	acfb	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>cd01	ad01	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>cd08	ad08	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>cd10	ad10	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>cd17	ad17	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>cd1e	ad1e	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>cd25	ad25	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>cd2b	ad2b	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>cd33	ad33	45 24 28
>cd36	ad36	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>cd3e	ad3e	45 24 28
>cd41	ad41	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>cd47	ad47	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>cd4f	ad4f	28
>cd50	ad50	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>cd58	ad58	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>cd5e	ad5e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>cd66	ad66	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>cd6e	ad6e	55 4e 54 28
>cd72	ad72	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>cd7a	ad7a	54 24 28
>cd7d	ad7d	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>cd84	ad84	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>cd8b	ad8b	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>cd92	ad92	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>cd9a	ad9a	4e 28
>cd9c	ad9c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>cda4	ada4	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cdaa	adaa	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cdb0	adb0	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cdb7	adb7	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cdbd	adbd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cdc3	adc3	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cdca	adca	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cdd2	add2	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cdda	adda	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cde2	ade2	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cdea	adea	47 28
>cdec	adec	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cdf4	adf4	28
>cdf5	adf5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cdfd	adfd	28
>cdfe	adfe	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>ce04	ae04	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>ce0a	ae0a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>ce10	ae10	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>ce17	ae17	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>ce1f	ae1f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>ce25	ae25	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>ce2b	ae2b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>ce30	ae30	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>ce34	ae34	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>ce3a	ae3a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>ce42	ae42	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>ce49	ae49	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>ce50	ae50	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>ce58	ae58	43
>ce59	ae59	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>ce5f	ae5f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>ce65	ae65	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>ce6c	ae6c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>ce72	ae72	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>ce76	ae76	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>ce7a	ae7a	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>ce80	ae80	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>ce88	ae88	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>ce8f	ae8f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>ce96	ae96	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>ce9e	ae9e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>cea4	aea4	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>cea9	aea9	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>ceb1	aeb1	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>ceb7	aeb7	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>cebd	aebd	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>cec2	aec2	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>cec8	aec8	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>cecf	aecf	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>ced4	aed4	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>ceda	aeda	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>cee1	aee1	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>cee9	aee9	59
>ceea	aeea	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>ceef	aeef	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>cef3	aef3	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>cefb	aefb	45
>cefc	aefc	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>cf04	af04	45
>cf05	af05	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>cf0b	af0b	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>cf11	af11	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>cf18	af18	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>cf1f	af1f	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>cf26	af26	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>cf2c	af2c	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>cf32	af32	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>cf37	af37	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>cf3e	af3e	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>cf45	af45	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>cf4d	af4d	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>cf53	af53	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>cf57	af57	ff					.text	$FF
.cf58	af58					KeywordSet1:
>cf58	af58	00 65					.text	0,$65,""               ; $80 !0:EOF
>cf5a	af5a	00 58					.text	0,$58,""               ; $81 !1:SH1
>cf5c	af5c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cf5e	af5e	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>cf66	af66	4c 45
>cf68	af68	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>cf70	af70	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>cf78	af78	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>cf7f	af7f	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>cf86	af86	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>cf8b	af8b	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>cf93	af93	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>cf98	af98	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>cf9d	af9d	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>cfa4	afa4	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>cfa9	afa9	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>cfb1	afb1	45
>cfb2	afb2	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>cfb6	afb6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>cfbd	afbd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>cfc3	afc3	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>cfca	afca	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>cfd1	afd1	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>cfd7	afd7	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>cfdd	afdd	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>cfe4	afe4	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>cfe9	afe9	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>cfef	afef	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>cff6	aff6	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>cffe	affe	45
>cfff	afff	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d007	b007	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d00c	b00c	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d012	b012	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d01a	b01a	45
>d01b	b01b	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d023	b023	45
>d024	b024	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d02b	b02b	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d033	b033	53
>d034	b034	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d03a	b03a	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a3 VERIFY
>d042	b042	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a4 XGO
>d047	b047	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a5 XLOAD
>d04e	b04e	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a6 ZAP
>d053	b053	ff					.text	$FF
.d054	b054					KeywordSet2:
>d054	b054	00 65					.text	0,$65,""               ; $80 !0:EOF
>d056	b056	00 58					.text	0,$58,""               ; $81 !1:SH1
>d058	b058	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d05a	b05a	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d05f	b05f	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d064	b064	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d069	b069	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d06e	b06e	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d073	b073	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d078	b078	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d07d	b07d	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d082	b082	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d087	b087	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d08c	b08c	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d091	b091	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d096	b096	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d09b	b09b	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d0a0	b0a0	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d0a5	b0a5	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d0aa	b0aa	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d0af	b0af	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d0b4	b0b4	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d0b9	b0b9	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d0be	b0be	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d0c3	b0c3	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d0c8	b0c8	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d0cd	b0cd	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d0d2	b0d2	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d0d7	b0d7	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d0dc	b0dc	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d0e1	b0e1	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d0e6	b0e6	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d0eb	b0eb	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d0f0	b0f0	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d0f5	b0f5	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d0fa	b0fa	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d0ff	b0ff	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d104	b104	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d109	b109	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d10e	b10e	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d113	b113	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d118	b118	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d11d	b11d	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d122	b122	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d127	b127	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d12c	b12c	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d131	b131	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d136	b136	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d13b	b13b	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d140	b140	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d145	b145	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d14a	b14a	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d14f	b14f	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d154	b154	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d159	b159	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d15e	b15e	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d163	b163	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d168	b168	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d16d	b16d	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d172	b172	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d177	b177	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d17c	b17c	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d181	b181	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d186	b186	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d18b	b18b	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d190	b190	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d195	b195	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d19a	b19a	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d19f	b19f	ff					.text	$FF
.d1a0	b1a0					Export_TKListConvertLine:
.d1a0	b1a0	48		pha				pha 								; save indent on the stack
.d1a1	b1a1	9c 19 04	stz $0419			stz 	tbOffset
.d1a4	b1a4	9c 29 04	stz $0429			stz 	tokenBuffer
.d1a7	b1a7	9c 25 04	stz $0425			stz 	currentListColour
.d1aa	b1aa	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d1ac	b1ac	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d1af	b1af	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d1b1	b1b1	b1 30		lda ($30),y			lda 	(codePtr),y
.d1b3	b1b3	aa		tax				tax
.d1b4	b1b4	88		dey				dey
.d1b5	b1b5	b1 30		lda ($30),y			lda 	(codePtr),y
.d1b7	b1b7	20 9a b3	jsr $b39a			jsr 	LCLWriteNumberXA
.d1ba	b1ba	68		pla				pla 								; adjustment to indent
.d1bb	b1bb	48		pha				pha 								; save on stack
.d1bc	b1bc	10 0c		bpl $b1ca			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d1be	b1be	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d1bf	b1bf	6d 22 04	adc $0422			adc 	listIndent
.d1c2	b1c2	8d 22 04	sta $0422			sta 	listIndent
.d1c5	b1c5	10 03		bpl $b1ca			bpl 	_LCNoAdjust
.d1c7	b1c7	9c 22 04	stz $0422			stz 	listIndent
.d1ca	b1ca					_LCNoAdjust:
.d1ca	b1ca	18		clc				clc		 							; work out actual indent.
.d1cb	b1cb	ad 22 04	lda $0422			lda 	listIndent
.d1ce	b1ce	0a		asl a				asl 	a
.d1cf	b1cf	69 07		adc #$07			adc 	#7
.d1d1	b1d1	85 36		sta $36				sta 	zTemp0
.d1d3	b1d3					_LCPadOut:
.d1d3	b1d3	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d1d5	b1d5	20 32 b3	jsr $b332			jsr 	LCLWrite
.d1d8	b1d8	ad 19 04	lda $0419			lda 	tbOffset
.d1db	b1db	c5 36		cmp $36				cmp 	zTemp0
.d1dd	b1dd	d0 f4		bne $b1d3			bne 	_LCPadOut
.d1df	b1df	a0 03		ldy #$03			ldy 	#3 							; start position.
.d1e1	b1e1					_LCMainLoop:
.d1e1	b1e1	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d1e3	b1e3	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d1e6	b1e6	b1 30		lda ($30),y			lda 	(codePtr),y
.d1e8	b1e8	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d1ea	b1ea	f0 17		beq $b203			beq 	_LCExit
.d1ec	b1ec	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d1ee	b1ee	90 1e		bcc $b20e			bcc 	_LCDoubles
.d1f0	b1f0	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d1f2	b1f2	90 2a		bcc $b21e			bcc 	_LCShiftPunc
.d1f4	b1f4	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d1f6	b1f6	90 35		bcc $b22d			bcc 	_LCPunctuation
.d1f8	b1f8	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d1fa	b1fa	90 51		bcc $b24d			bcc 	_LCIdentifiers
.d1fc	b1fc	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d1fe	b1fe	90 73		bcc $b273			bcc 	_LCTokens
.d200	b200	4c d3 b2	jmp $b2d3			jmp 	_LCData 					; 254-5 are data objects
.d203	b203					_LCExit:
.d203	b203	68		pla				pla 								; get old indent adjust
.d204	b204	30 07		bmi $b20d			bmi 	_LCExit2
.d206	b206	18		clc				clc 								; add to indent if +ve
.d207	b207	6d 22 04	adc $0422			adc 	listIndent
.d20a	b20a	8d 22 04	sta $0422			sta 	listIndent
.d20d	b20d					_LCExit2:
.d20d	b20d	60		rts				rts
.d20e	b20e					_LCDoubles:
.d20e	b20e	48		pha				pha
.d20f	b20f	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d210	b210	29 02		and #$02			and 	#2
.d212	b212	09 3c		ora #$3c			ora 	#60 						; make < >
.d214	b214	20 32 b3	jsr $b332			jsr 	LCLWrite
.d217	b217	68		pla				pla 								; restore, do lower bit
.d218	b218	29 03		and #$03			and 	#3
.d21a	b21a	09 3c		ora #$3c			ora 	#60
.d21c	b21c	80 0f		bra $b22d			bra		_LCPunctuation 				; print, increment, loop
.d21e	b21e					_LCShiftPunc:
.d21e	b21e	aa		tax				tax 								; save in X
.d21f	b21f	29 07		and #$07			and 	#7 							; lower 3 bits
.d221	b221	f0 02		beq $b225			beq 	_LCNoAdd
.d223	b223	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d225	b225					_LCNoAdd:
.d225	b225	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d227	b227	90 02		bcc $b22b			bcc 	_LCNoAdd2
.d229	b229	09 20		ora #$20			ora 	#32 						; adds $20
.d22b	b22b					_LCNoAdd2:
.d22b	b22b	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d22d	b22d					_LCPunctuation:
.d22d	b22d	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d22f	b22f	d0 03		bne $b234			bne 	_LCPContinue
.d231	b231	20 48 b3	jsr $b348			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d234	b234					_LCPContinue:
.d234	b234	c9 2e		cmp #$2e			cmp 	#'.'
.d236	b236	f0 08		beq $b240			beq 	_LCPIsConstant
.d238	b238	c9 30		cmp #$30			cmp 	#'0'
.d23a	b23a	90 0b		bcc $b247			bcc 	_LCPNotConstant
.d23c	b23c	c9 3a		cmp #$3a			cmp 	#'9'+1
.d23e	b23e	b0 07		bcs $b247			bcs 	_LCPNotConstant
.d240	b240					_LCPIsConstant:
.d240	b240	48		pha				pha
.d241	b241	a9 87		lda #$87			lda 	#CLIConstant+$80
.d243	b243	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d246	b246	68		pla				pla
.d247	b247					_LCPNotConstant:
.d247	b247	c8		iny				iny 								; consume character
.d248	b248	20 32 b3	jsr $b332			jsr 	LCLWrite 					; write it out.
.d24b	b24b	80 94		bra $b1e1			bra 	_LCMainLoop 				; go round again.
.d24d	b24d					_LCIdentifiers:
.d24d	b24d	18		clc				clc 								; convert to physical address
.d24e	b24e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d250	b250	85 37		sta $37				sta 	zTemp0+1
.d252	b252	c8		iny				iny
.d253	b253	b1 30		lda ($30),y			lda 	(codePtr),y
.d255	b255	85 36		sta $36				sta 	zTemp0
.d257	b257	c8		iny				iny
.d258	b258	5a		phy				phy 								; save position
.d259	b259	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d25b	b25b	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d25e	b25e	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d260	b260					_LCOutIdentifier:
.d260	b260	c8		iny				iny
.d261	b261	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d263	b263	29 7f		and #$7f			and 	#$7F
.d265	b265	20 84 b3	jsr $b384			jsr 	LCLLowerCase
.d268	b268	20 32 b3	jsr $b332			jsr 	LCLWrite
.d26b	b26b	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d26d	b26d	10 f1		bpl $b260			bpl 	_LCOutIdentifier
.d26f	b26f	7a		ply				ply 								; restore position
.d270	b270	4c e1 b1	jmp $b1e1			jmp 	_LCMainLoop
.d273	b273					_LCTokens:
.d273	b273	aa		tax				tax 								; token in X
.d274	b274	a9 54		lda #$54			lda 	#((KeywordSet2) & $FF)
.d276	b276	85 36		sta $36				sta 	0+zTemp0
.d278	b278	a9 b0		lda #$b0			lda 	#((KeywordSet2) >> 8)
.d27a	b27a	85 37		sta $37				sta 	1+zTemp0
.d27c	b27c	e0 82		cpx #$82			cpx 	#$82
.d27e	b27e	f0 16		beq $b296			beq 	_LCUseShift
.d280	b280	a9 58		lda #$58			lda 	#((KeywordSet1) & $FF)
.d282	b282	85 36		sta $36				sta 	0+zTemp0
.d284	b284	a9 af		lda #$af			lda 	#((KeywordSet1) >> 8)
.d286	b286	85 37		sta $37				sta 	1+zTemp0
.d288	b288	e0 81		cpx #$81			cpx 	#$81
.d28a	b28a	f0 0a		beq $b296			beq 	_LCUseShift
.d28c	b28c	a9 e7		lda #$e7			lda 	#((KeywordSet0) & $FF)
.d28e	b28e	85 36		sta $36				sta 	0+zTemp0
.d290	b290	a9 ac		lda #$ac			lda 	#((KeywordSet0) >> 8)
.d292	b292	85 37		sta $37				sta 	1+zTemp0
.d294	b294	80 01		bra $b297			bra 	_LCNoShift
.d296	b296					_LCUseShift:
.d296	b296	c8		iny				iny
.d297	b297					_LCNoShift:
.d297	b297	20 5c b3	jsr $b35c			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d29a	b29a	b1 30		lda ($30),y			lda 	(codePtr),y
.d29c	b29c	aa		tax				tax 								; into X
.d29d	b29d					_LCFindText:
.d29d	b29d	ca		dex				dex
.d29e	b29e	10 0e		bpl $b2ae			bpl 	_LCFoundText 				; found text.
.d2a0	b2a0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d2a2	b2a2	1a		inc a				inc 	a 							; one extra for size
.d2a3	b2a3	38		sec				sec 								; one extra for checksum
.d2a4	b2a4	65 36		adc $36				adc 	zTemp0 						; go to next token
.d2a6	b2a6	85 36		sta $36				sta 	zTemp0
.d2a8	b2a8	90 f3		bcc $b29d			bcc 	_LCFindText
.d2aa	b2aa	e6 37		inc $37				inc 	zTemp0+1
.d2ac	b2ac	80 ef		bra $b29d			bra 	_LCFindText
.d2ae	b2ae					_LCFoundText:
.d2ae	b2ae	5a		phy				phy 								; save List position
.d2af	b2af	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d2b1	b2b1	aa		tax				tax
.d2b2	b2b2	a9 86		lda #$86			lda 	#CLIToken+$80
.d2b4	b2b4	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d2b7	b2b7	a0 02		ldy #$02			ldy 	#2
.d2b9	b2b9					_LCCopyToken:
.d2b9	b2b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.d2bb	b2bb	20 84 b3	jsr $b384			jsr 	LCLLowerCase
.d2be	b2be	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2c1	b2c1	c8		iny				iny
.d2c2	b2c2	ca		dex				dex
.d2c3	b2c3	d0 f4		bne $b2b9			bne 	_LCCopyToken
.d2c5	b2c5	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d2c7	b2c7	f0 05		beq $b2ce			beq 	_LCNoSpace
.d2c9	b2c9	a9 20		lda #$20			lda 	#' '
.d2cb	b2cb	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2ce	b2ce					_LCNoSpace:
.d2ce	b2ce	7a		ply				ply 								; restore position.
.d2cf	b2cf	c8		iny				iny 								; consume token
.d2d0	b2d0	4c e1 b1	jmp $b1e1			jmp 	_LCMainLoop 				; and go around again.
.d2d3	b2d3					_LCData:
.d2d3	b2d3	48		pha				pha 								; save type $FE/$FF
.d2d4	b2d4	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d2d6	b2d6	c9 fe		cmp #$fe			cmp 	#$FE
.d2d8	b2d8	f0 22		beq $b2fc			beq 	_LCHaveOpener
.d2da	b2da	a2 22		ldx #$22			ldx 	#'"'
.d2dc	b2dc	a9 8f		lda #$8f			lda 	#CLIData+$80
.d2de	b2de	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d2e1	b2e1	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d2e3	b2e3	d0 17		bne $b2fc			bne 	_LCHaveOpener
.d2e5	b2e5	88		dey				dey 								; what precedes it ?
.d2e6	b2e6	b1 30		lda ($30),y			lda 	(codePtr),y
.d2e8	b2e8	c8		iny				iny
.d2e9	b2e9	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d2eb	b2eb	d0 0f		bne $b2fc			bne 	_LCHaveOpener
.d2ed	b2ed	a9 09		lda #$09			lda 	#9 							; tab
.d2ef	b2ef	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2f2	b2f2	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d2f4	b2f4	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2f7	b2f7	a9 85		lda #$85			lda 	#CLIFComment+$80
.d2f9	b2f9	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d2fc	b2fc					_LCHaveOpener:
.d2fc	b2fc	8a		txa				txa 								; output prefix (# or ")
.d2fd	b2fd	20 32 b3	jsr $b332			jsr 	LCLWrite
.d300	b300	c8		iny				iny 								; get count
.d301	b301	b1 30		lda ($30),y			lda 	(codePtr),y
.d303	b303	aa		tax				tax
.d304	b304	c8		iny				iny 								; point at first character
.d305	b305					_LCOutData:
.d305	b305	b1 30		lda ($30),y			lda 	(codePtr),y
.d307	b307	c9 00		cmp #$00			cmp 	#0
.d309	b309	f0 03		beq $b30e			beq 	_LCNoPrint
.d30b	b30b	20 32 b3	jsr $b332			jsr 	LCLWrite
.d30e	b30e					_LCNoPrint:
.d30e	b30e	c8		iny				iny
.d30f	b30f	ca		dex				dex
.d310	b310	d0 f3		bne $b305			bne 	_LCOutData
.d312	b312	68		pla				pla 								; closing " required ?
.d313	b313	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d315	b315	d0 0f		bne $b326			bne 	_LCNoQuote
.d317	b317	a9 22		lda #$22			lda 	#'"'
.d319	b319	20 32 b3	jsr $b332			jsr 	LCLWrite
.d31c	b31c	ad b6 07	lda $07b6			lda 	EXTTextColour
.d31f	b31f	29 0f		and #$0f			and 	#$0F
.d321	b321	09 90		ora #$90			ora 	#$90
.d323	b323	20 32 b3	jsr $b332			jsr 	LCLWrite
.d326	b326					_LCNoQuote:
.d326	b326	4c e1 b1	jmp $b1e1			jmp 	_LCMainLoop
.d329	b329					LCLWriteColour:
.d329	b329	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d32c	b32c	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d32f	b32f	d0 01		bne $b332			bne 	LCLWrite 					; if different, output it
.d331	b331	60		rts				rts
.d332	b332					LCLWrite:
.d332	b332	da		phx				phx
.d333	b333	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d336	b336	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d339	b339	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d33c	b33c	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d33f	b33f	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d341	b341	30 03		bmi $b346			bmi 	_LCLNoColour
.d343	b343	8d 23 04	sta $0423			sta 	lcLastCharacter
.d346	b346					_LCLNoColour:
.d346	b346	fa		plx				plx
.d347	b347	60		rts				rts
.d348	b348					LCLDeleteLastSpace:
.d348	b348	48		pha				pha
.d349	b349	da		phx				phx
.d34a	b34a	ae 19 04	ldx $0419			ldx 	tbOffset
.d34d	b34d	f0 0a		beq $b359			beq 	_LCDLSExit
.d34f	b34f	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d352	b352	c9 20		cmp #$20			cmp 	#' '
.d354	b354	d0 03		bne $b359			bne 	_LCDLSExit
.d356	b356	ce 19 04	dec $0419			dec 	tbOffset
.d359	b359					_LCDLSExit:
.d359	b359	fa		plx				plx
.d35a	b35a	68		pla				pla
.d35b	b35b	60		rts				rts
.d35c	b35c					LCLCheckSpaceRequired:
.d35c	b35c	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d35f	b35f	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d361	b361	f0 1b		beq $b37e			beq 	_LCCSRSpace
.d363	b363	c9 29		cmp #$29			cmp 	#')'
.d365	b365	f0 17		beq $b37e			beq 	_LCCSRSpace
.d367	b367	c9 23		cmp #$23			cmp 	#'#'
.d369	b369	f0 13		beq $b37e			beq 	_LCCSRSpace
.d36b	b36b	20 84 b3	jsr $b384			jsr 	LCLLowerCase 				; saves a little effort
.d36e	b36e	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d370	b370	90 11		bcc $b383			bcc 	_LCCSRExit
.d372	b372	c9 3a		cmp #$3a			cmp 	#"9"+1
.d374	b374	90 08		bcc $b37e			bcc 	_LCCSRSpace
.d376	b376	c9 61		cmp #$61			cmp 	#"a"
.d378	b378	90 09		bcc $b383			bcc 	_LCCSRExit
.d37a	b37a	c9 7b		cmp #$7b			cmp 	#"z"+1
.d37c	b37c	b0 05		bcs $b383			bcs 	_LCCSRExit
.d37e	b37e					_LCCSRSpace:
.d37e	b37e	a9 20		lda #$20			lda 	#' '
.d380	b380	20 32 b3	jsr $b332			jsr 	LCLWrite
.d383	b383					_LCCSRExit:
.d383	b383	60		rts				rts
.d384	b384					LCLLowerCase:
.d384	b384	c9 41		cmp #$41			cmp 	#"A"
.d386	b386	90 06		bcc $b38e			bcc 	_LCLLCOut
.d388	b388	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d38a	b38a	b0 02		bcs $b38e			bcs 	_LCLLCOut
.d38c	b38c	69 20		adc #$20			adc 	#$20
.d38e	b38e					_LCLLCOut:
.d38e	b38e	60		rts				rts
.d38f	b38f					LCLUpperCase:
.d38f	b38f	c9 61		cmp #$61			cmp 	#"a"
.d391	b391	90 06		bcc $b399			bcc 	_LCLUCOut
.d393	b393	c9 7b		cmp #$7b			cmp 	#"z"+1
.d395	b395	b0 02		bcs $b399			bcs 	_LCLUCOut
.d397	b397	e9 1f		sbc #$1f			sbc 	#$1F
.d399	b399					_LCLUCOut:
.d399	b399	60		rts				rts
.d39a	b39a					LCLWriteNumberXA:
.d39a	b39a	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d39c	b39c					_LCLWNLoop1:
.d39c	b39c	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d39e	b39e					_LCLWNLoop2:
.d39e	b39e	48		pha				pha 								; save initial LSB
.d39f	b39f	38		sec				sec
.d3a0	b3a0	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d3a2	b3a2	f9 d3 b3	sbc $b3d3,y			sbc 	_LCLWNTable,y
.d3a5	b3a5	48		pha				pha
.d3a6	b3a6	8a		txa				txa
.d3a7	b3a7	f9 d4 b3	sbc $b3d4,y			sbc 	_LCLWNTable+1,y
.d3aa	b3aa	90 07		bcc $b3b3			bcc 	_LCLWNUnderflow
.d3ac	b3ac	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d3ae	b3ae	aa		tax				tax 								; update X
.d3af	b3af	68		pla				pla 								; restore A
.d3b0	b3b0	7a		ply				ply 								; throw original
.d3b1	b3b1	80 eb		bra $b39e			bra 	_LCLWNLoop2 				; try again.
.d3b3	b3b3					_LCLWNUnderflow:
.d3b3	b3b3	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d3b5	b3b5	d0 06		bne $b3bd			bne 	_LCLWNOut
.d3b7	b3b7	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d3ba	b3ba	3a		dec a				dec 	a
.d3bb	b3bb	f0 04		beq $b3c1			beq 	_LCLWNNext
.d3bd	b3bd					_LCLWNOut:
.d3bd	b3bd	98		tya				tya
.d3be	b3be	20 cd b3	jsr $b3cd			jsr 	_LCLWNOutDigit
.d3c1	b3c1					_LCLWNNext:
.d3c1	b3c1	7a		ply				ply 							 	; restore original value.
.d3c2	b3c2	68		pla				pla
.d3c3	b3c3	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d3c5	b3c5	c8		iny				iny
.d3c6	b3c6	c8		iny				iny
.d3c7	b3c7	84 37		sty $37				sty 	zTemp0+1
.d3c9	b3c9	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d3cb	b3cb	d0 cf		bne $b39c			bne 	_LCLWNLoop1
.d3cd	b3cd					_LCLWNOutDigit:
.d3cd	b3cd	09 30		ora #$30			ora 	#'0'
.d3cf	b3cf	20 32 b3	jsr $b332			jsr 	LCLWrite
.d3d2	b3d2	60		rts				rts
.d3d3	b3d3					_LCLWNTable:
>d3d3	b3d3	10 27						.word 	10000
>d3d5	b3d5	e8 03						.word 	1000
>d3d7	b3d7	64 00						.word 	100
>d3d9	b3d9	0a 00						.word 	10
.d3db	b3db					TOKSearchTable:
.d3db	b3db	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d3dd	b3dd	85 36		sta $36				sta 	zTemp0
.d3df	b3df	a0 00		ldy #$00			ldy 	#0
.d3e1	b3e1	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d3e3	b3e3	85 38		sta $38				sta 	zTemp1
.d3e5	b3e5					_TSTLoop:
.d3e5	b3e5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d3e7	b3e7	30 49		bmi $b432			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d3e9	b3e9	f0 2e		beq $b419			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d3eb	b3eb	c8		iny				iny 								; get the hash
.d3ec	b3ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.d3ee	b3ee	88		dey				dey
.d3ef	b3ef	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d3f2	b3f2	d0 25		bne $b419			bne 	_TSTNext
.d3f4	b3f4	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d3f7	b3f7	38		sec				sec
.d3f8	b3f8	ed 00 04	sbc $0400			sbc 	identStart
.d3fb	b3fb	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d3fd	b3fd	d0 1a		bne $b419			bne 	_TSTNext
.d3ff	b3ff	5a		phy				phy 								; save Y , we might fail to match.
.d400	b400	c8		iny				iny 								; point to text
.d401	b401	c8		iny				iny
.d402	b402	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d405	b405					_TSTCompareName:
.d405	b405	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d408	b408	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d40a	b40a	d0 0c		bne $b418			bne 	_TSTNextPullY 				; fail, pullY and do next
.d40c	b40c	e8		inx				inx
.d40d	b40d	c8		iny				iny
.d40e	b40e	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d411	b411	d0 f2		bne $b405			bne 	_TSTCompareName
.d413	b413	7a		ply				ply 								; throw Y
.d414	b414	a5 38		lda $38				lda 	zTemp1 						; get token #
.d416	b416	38		sec				sec 								; return with CS = passed.
.d417	b417	60		rts				rts
.d418	b418					_TSTNextPullY:
.d418	b418	7a		ply				ply 								; restore current, fall through.
.d419	b419					_TSTNext:
.d419	b419	e6 38		inc $38				inc 	zTemp1 						; token counter
.d41b	b41b	98		tya				tya
.d41c	b41c	18		clc				clc
.d41d	b41d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d41f	b41f	1a		inc a				inc 	a 							; +1
.d420	b420	1a		inc a				inc 	a 							; +2
.d421	b421	a8		tay				tay
.d422	b422	10 c1		bpl $b3e5			bpl 	_TSTLoop 					; if Y < $80 loop back
.d424	b424	98		tya				tya 								; add Y to zTemp0 and reset Y
.d425	b425	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d427	b427	18		clc				clc  								; but have tables > 255 bytes
.d428	b428	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d42a	b42a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d42c	b42c	90 b7		bcc $b3e5			bcc 	_TSTLoop
.d42e	b42e	e6 37		inc $37				inc 	zTemp0+1
.d430	b430	80 b3		bra $b3e5			bra 	_TSTLoop
.d432	b432					_TSTFail:
.d432	b432	18		clc				clc
.d433	b433	60		rts				rts
.d434	b434					Export_TKTokeniseLine:
.d434	b434	20 01 b6	jsr $b601			jsr 	LCLFixLineBufferCase 		; fix line case
.d437	b437	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d439	b439	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d43c	b43c	9c 27 04	stz $0427			stz 	tokenLineNumber
.d43f	b43f	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d442	b442	a2 ff		ldx #$ff			ldx 	#$FF
.d444	b444					_TKFindFirst:
.d444	b444	e8		inx				inx
.d445	b445	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d448	b448	f0 62		beq $b4ac			beq 	_TKExit
.d44a	b44a	c9 20		cmp #$20			cmp 	#' '
.d44c	b44c	90 f6		bcc $b444			bcc 	_TKFindFirst
.d44e	b44e	c9 30		cmp #$30			cmp 	#'0'
.d450	b450	90 07		bcc $b459			bcc 	_TKNoLineNumber
.d452	b452	c9 3a		cmp #$3a			cmp 	#'9'+1
.d454	b454	b0 03		bcs $b459			bcs 	_TKNoLineNumber
.d456	b456	20 2b b6	jsr $b62b			jsr 	TOKExtractLineNumber
.d459	b459					_TKNoLineNumber:
.d459	b459					_TKTokeniseLoop:
.d459	b459	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d45c	b45c	f0 4e		beq $b4ac			beq 	_TKExit
.d45e	b45e	e8		inx				inx
.d45f	b45f	c9 20		cmp #$20			cmp 	#' '
.d461	b461	f0 f6		beq $b459			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d463	b463	ca		dex				dex 								; undo last get, A contains character, X is position.
.d464	b464	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d466	b466	f0 68		beq $b4d0			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d468	b468	c9 41		cmp #$41			cmp 	#'A'
.d46a	b46a	90 04		bcc $b470			bcc 	_TKTokenisePunctuation
.d46c	b46c	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d46e	b46e	90 60		bcc $b4d0			bcc 	_TKTokeniseIdentifier
.d470	b470					_TKTokenisePunctuation:
.d470	b470	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d472	b472	f0 2e		beq $b4a2			beq 	_TKString
.d474	b474	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d476	b476	f0 2f		beq $b4a7			beq 	_TKHexConstant
.d478	b478	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d47a	b47a	f0 36		beq $b4b2			beq 	_TKCheckDouble
.d47c	b47c	c9 3e		cmp #$3e			cmp 	#'>'
.d47e	b47e	f0 32		beq $b4b2			beq 	_TKCheckDouble
.d480	b480					_TKStandardPunctuation:
.d480	b480	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d483	b483	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d485	b485	90 0e		bcc $b495			bcc 	_TKNoShift
.d487	b487	48		pha				pha 								; save. we are about to convert this punctuation token from
.d488	b488	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d48a	b48a	85 36		sta $36				sta 	zTemp0
.d48c	b48c	68		pla				pla
.d48d	b48d	29 20		and #$20			and 	#32 						; bit 5
.d48f	b48f	4a		lsr a				lsr 	a 							; shift into bit 3
.d490	b490	4a		lsr a				lsr 	a
.d491	b491	05 36		ora $36				ora 	zTemp0
.d493	b493	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d495	b495					_TKNoShift:
.d495	b495	20 70 b6	jsr $b670			jsr 	TOKWriteByte 				; write the punctuation character
.d498	b498	e8		inx				inx 								; consume the character
.d499	b499	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d49b	b49b	d0 bc		bne $b459			bne 	_TKTokeniseLoop 			; and loop round again.
.d49d	b49d	20 63 b5	jsr $b563			jsr 	TOKCheckComment 			; comment checl
.d4a0	b4a0	80 b7		bra $b459			bra 	_TKTokeniseLoop
.d4a2	b4a2					_TKString:
.d4a2	b4a2	20 90 b5	jsr $b590			jsr 	TOKTokenString
.d4a5	b4a5	80 b2		bra $b459			bra 	_TKTokeniseLoop
.d4a7	b4a7					_TKHexConstant:
.d4a7	b4a7	20 cb b5	jsr $b5cb			jsr 	TOKHexConstant
.d4aa	b4aa	80 ad		bra $b459			bra 	_TKTokeniseLoop
.d4ac	b4ac	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d4ae	b4ae	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d4b1	b4b1	60		rts				rts
.d4b2	b4b2					_TKCheckDouble:
.d4b2	b4b2	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d4b5	b4b5	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d4b7	b4b7	90 c7		bcc $b480			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d4b9	b4b9	c9 3f		cmp #$3f			cmp 	#'>'+1
.d4bb	b4bb	b0 c3		bcs $b480			bcs 	_TKStandardPunctuation
.d4bd	b4bd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d4c0	b4c0	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d4c2	b4c2	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d4c3	b4c3	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d4c6	b4c6	38		sec				sec
.d4c7	b4c7	e9 3c		sbc #$3c			sbc 	#'<'
.d4c9	b4c9	20 70 b6	jsr $b670			jsr 	TOKWriteByte 				; this is in the range 0-7
.d4cc	b4cc	e8		inx				inx 								; consume both
.d4cd	b4cd	e8		inx				inx
.d4ce	b4ce	80 89		bra $b459			bra 	_TKTokeniseLoop
.d4d0	b4d0					_TKTokeniseIdentifier:
.d4d0	b4d0	8e 00 04	stx $0400			stx 	identStart 					; save start
.d4d3	b4d3	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d4d6	b4d6					_TKCheckLoop:
.d4d6	b4d6	e8		inx				inx 								; look at next, we know first is identifier already.
.d4d7	b4d7	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d4da	b4da	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d4dc	b4dc	f0 f8		beq $b4d6			beq 	_TKCheckLoop
.d4de	b4de	c9 30		cmp #$30			cmp	 	#"0"
.d4e0	b4e0	90 0c		bcc $b4ee			bcc 	_TKEndIdentifier
.d4e2	b4e2	c9 3a		cmp #$3a			cmp 	#"9"+1
.d4e4	b4e4	90 f0		bcc $b4d6			bcc 	_TKCheckLoop
.d4e6	b4e6	c9 41		cmp #$41			cmp	 	#"A"
.d4e8	b4e8	90 04		bcc $b4ee			bcc 	_TKEndIdentifier
.d4ea	b4ea	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4ec	b4ec	90 e8		bcc $b4d6			bcc 	_TKCheckLoop
.d4ee	b4ee					_TKEndIdentifier:
.d4ee	b4ee	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d4f1	b4f1	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d4f3	b4f3	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d4f5	b4f5	f0 06		beq $b4fd			beq 	_TKHasTypeCharacter
.d4f7	b4f7	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d4f9	b4f9	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d4fb	b4fb	d0 07		bne $b504			bne 	_TKNoTypeCharacter
.d4fd	b4fd					_TKHasTypeCharacter:
.d4fd	b4fd	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d500	b500	e8		inx				inx 								; consume the type character
.d501	b501	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d504	b504					_TKNoTypeCharacter:
.d504	b504	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d506	b506	d0 09		bne $b511			bne 	_TKNoArray
.d508	b508	e8		inx				inx 								; skip the (
.d509	b509	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d50c	b50c	09 04		ora #$04			ora 	#$04
.d50e	b50e	8d 04 04	sta $0404			sta 	identTypeByte
.d511	b511					_TKNoArray:
.d511	b511	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d514	b514	20 ec b5	jsr $b5ec			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d517	b517	a0 ac		ldy #$ac			ldy 	#(KeywordSet0) >> 8
.d519	b519	a9 e7		lda #$e7			lda 	#(KeywordSet0) & $FF
.d51b	b51b	20 db b3	jsr $b3db			jsr 	TOKSearchTable
.d51e	b51e	a2 00		ldx #$00			ldx 	#0
.d520	b520	b0 1f		bcs $b541			bcs 	_TKFoundToken
.d522	b522	a0 af		ldy #$af			ldy 	#(KeywordSet1) >> 8
.d524	b524	a9 58		lda #$58			lda 	#(KeywordSet1) & $FF
.d526	b526	20 db b3	jsr $b3db			jsr 	TOKSearchTable
.d529	b529	a2 81		ldx #$81			ldx 	#$81
.d52b	b52b	b0 14		bcs $b541			bcs 	_TKFoundToken
.d52d	b52d	a0 b0		ldy #$b0			ldy 	#(KeywordSet2) >> 8
.d52f	b52f	a9 54		lda #$54			lda 	#(KeywordSet2) & $FF
.d531	b531	20 db b3	jsr $b3db			jsr 	TOKSearchTable
.d534	b534	a2 82		ldx #$82			ldx 	#$82
.d536	b536	b0 09		bcs $b541			bcs 	_TKFoundToken
.d538	b538	20 7c b6	jsr $b67c			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d53b	b53b	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d53e	b53e	4c 59 b4	jmp $b459			jmp 	_TKTokeniseLoop 			; and go round again.
.d541	b541					_TKFoundToken:
.d541	b541	48		pha				pha 								; save token
.d542	b542	8a		txa				txa 								; shift in X, is there one ?
.d543	b543	f0 03		beq $b548			beq 	_TKNoTShift
.d545	b545	20 70 b6	jsr $b670			jsr 	TOKWriteByte 				; if so, write it out
.d548	b548					_TKNoTShift:
.d548	b548	68		pla				pla 								; restore and write token
.d549	b549	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d54c	b54c	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d54e	b54e	d0 0d		bne $b55d			bne 	_TKNotRem 			 		; not shifted ?
.d550	b550	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d552	b552	d0 09		bne $b55d			bne 	_TKNotRem
.d554	b554	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d557	b557	20 63 b5	jsr $b563			jsr 	TOKCheckComment
.d55a	b55a	4c 59 b4	jmp $b459			jmp 	_TKTokeniseLoop
.d55d	b55d					_TKNotRem:
.d55d	b55d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d560	b560	4c 59 b4	jmp $b459			jmp 	_TKTokeniseLoop 			; and go round again.
.d563	b563					TOKCheckComment:
.d563	b563	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d566	b566	e8		inx				inx
.d567	b567	c9 20		cmp #$20			cmp 	#' '
.d569	b569	f0 f8		beq $b563			beq 	TOKCheckComment
.d56b	b56b	ca		dex				dex 								; first non space character
.d56c	b56c	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d56e	b56e	f0 1f		beq $b58f			beq 	_TOKCCExit 					; then we are okay
.d570	b570	c9 00		cmp #$00			cmp 	#0 							; EOL
.d572	b572	f0 1b		beq $b58f			beq 	_TOKCCExit 					; then we are okay
.d574	b574	da		phx				phx
.d575	b575					_TOKCCLowerCase:
.d575	b575	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d578	b578	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d57a	b57a	90 09		bcc $b585			bcc 	_TOKKCNotUC
.d57c	b57c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d57e	b57e	b0 05		bcs $b585			bcs 	_TOKKCNotUC
.d580	b580	49 20		eor #$20			eor 	#$20
.d582	b582	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d585	b585					_TOKKCNotUC:
.d585	b585	e8		inx				inx
.d586	b586	c9 00		cmp #$00			cmp 	#0
.d588	b588	d0 eb		bne $b575			bne 	_TOKCCLowerCase
.d58a	b58a	fa		plx				plx
.d58b	b58b	ca		dex				dex 								; tokenise string expects initial skip.
.d58c	b58c	20 90 b5	jsr $b590			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d58f	b58f					_TOKCCExit:
.d58f	b58f	60		rts				rts
.d590	b590					TOKTokenString:
.d590	b590	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d592	b592	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d595	b595	e8		inx				inx									; start of quoted string.
.d596	b596	da		phx				phx 								; push start of string on top
.d597	b597	ca		dex				dex 								; because we pre-increment
.d598	b598					_TSFindEnd:
.d598	b598	e8		inx				inx
.d599	b599	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d59c	b59c	f0 04		beq $b5a2			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d59e	b59e	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d5a0	b5a0	d0 f6		bne $b598			bne 	_TSFindEnd
.d5a2	b5a2					_TSEndOfString:
.d5a2	b5a2	7a		ply				ply  								; so now Y is first character, X is character after end.
.d5a3	b5a3	48		pha				pha 								; save terminating character
.d5a4	b5a4	20 ac b5	jsr $b5ac			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d5a7	b5a7	68		pla				pla 								; terminating character
.d5a8	b5a8	f0 01		beq $b5ab			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d5aa	b5aa	e8		inx				inx
.d5ab	b5ab					_TSNotQuote:
.d5ab	b5ab	60		rts				rts
.d5ac	b5ac					TOKWriteBlockXY:
.d5ac	b5ac	86 36		stx $36				stx 	zTemp0 						; save end character
.d5ae	b5ae	98		tya				tya 								; use 2's complement to work out the byte size
.d5af	b5af	49 ff		eor #$ff			eor 	#$FF
.d5b1	b5b1	38		sec				sec
.d5b2	b5b2	65 36		adc $36				adc 	zTemp0
.d5b4	b5b4	1a		inc a				inc 	a 							; one extra for NULL
.d5b5	b5b5	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5b8	b5b8					_TOBlockLoop:
.d5b8	b5b8	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d5ba	b5ba	f0 09		beq $b5c5			beq 	_TOBlockExit
.d5bc	b5bc	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d5bf	b5bf	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5c2	b5c2	c8		iny				iny
.d5c3	b5c3	80 f3		bra $b5b8			bra 	_TOBlockLoop
.d5c5	b5c5					_TOBlockExit:
.d5c5	b5c5	a9 00		lda #$00			lda 	#0 							; add NULL.
.d5c7	b5c7	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5ca	b5ca	60		rts				rts
.d5cb	b5cb					TOKHexConstant:
.d5cb	b5cb	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d5cd	b5cd	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5d0	b5d0	e8		inx				inx									; start of quoted string.
.d5d1	b5d1	da		phx				phx 								; push start of constant on top
.d5d2	b5d2	ca		dex				dex
.d5d3	b5d3					_THFindLoop:
.d5d3	b5d3	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d5d4	b5d4	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d5d7	b5d7	c9 30		cmp #$30			cmp 	#"0"
.d5d9	b5d9	90 0c		bcc $b5e7			bcc 	_THFoundEnd
.d5db	b5db	c9 3a		cmp #$3a			cmp 	#"9"+1
.d5dd	b5dd	90 f4		bcc $b5d3			bcc 	_THFindLoop
.d5df	b5df	c9 41		cmp #$41			cmp 	#"A"
.d5e1	b5e1	90 04		bcc $b5e7			bcc 	_THFoundEnd
.d5e3	b5e3	c9 47		cmp #$47			cmp 	#"F"+1
.d5e5	b5e5	90 ec		bcc $b5d3			bcc 	_THFindLoop
.d5e7	b5e7					_THFoundEnd:
.d5e7	b5e7	7a		ply				ply 								; restore start
.d5e8	b5e8	20 ac b5	jsr $b5ac			jsr 	TOKWriteBlockXY 			; output the block
.d5eb	b5eb	60		rts				rts
.d5ec	b5ec					TOKCalculateHash:
.d5ec	b5ec	da		phx				phx
.d5ed	b5ed	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d5f0	b5f0	a9 00		lda #$00			lda 	#0
.d5f2	b5f2					_TCHLoop:
.d5f2	b5f2	18		clc				clc
.d5f3	b5f3	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d5f6	b5f6	e8		inx				inx
.d5f7	b5f7	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d5fa	b5fa	d0 f6		bne $b5f2			bne 	_TCHLoop
.d5fc	b5fc	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d5ff	b5ff	fa		plx				plx
.d600	b600	60		rts				rts
.d601	b601					LCLFixLineBufferCase:
.d601	b601	a2 00		ldx #$00			ldx 	#0
.d603	b603					_FLBCLoop:
.d603	b603	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d606	b606	f0 22		beq $b62a			beq 	_FLBCExit 					; end of string.
.d608	b608	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d60a	b60a	f0 11		beq $b61d			beq 	_FLBCInQuotes
.d60c	b60c	e8		inx				inx
.d60d	b60d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d60f	b60f	90 f2		bcc $b603			bcc 	_FLBCLoop
.d611	b611	c9 7b		cmp #$7b			cmp 	#'z'+1
.d613	b613	b0 ee		bcs $b603			bcs 	_FLBCLoop
.d615	b615	38		sec				sec 								; make U/C
.d616	b616	e9 20		sbc #$20			sbc 	#32
.d618	b618	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d61b	b61b	80 e6		bra $b603			bra 	_FLBCLoop
.d61d	b61d					_FLBCInQuotes:
.d61d	b61d	e8		inx				inx 								; advance
.d61e	b61e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d621	b621	f0 07		beq $b62a			beq 	_FLBCExit 					; exit on EOS
.d623	b623	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d625	b625	d0 f6		bne $b61d			bne 	_FLBCInQuotes
.d627	b627	e8		inx				inx 								; skip over it
.d628	b628	80 d9		bra $b603			bra 	_FLBCLoop
.d62a	b62a					_FLBCExit:
.d62a	b62a	60		rts				rts
.d62b	b62b					TOKExtractLineNumber:
.d62b	b62b	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d62e	b62e	48		pha				pha
.d62f	b62f	ad 27 04	lda $0427			lda 	tokenLineNumber
.d632	b632	48		pha				pha
.d633	b633	20 69 b6	jsr $b669			jsr 	_LCLNTimes2 				; line # x 2
.d636	b636	20 69 b6	jsr $b669			jsr 	_LCLNTimes2 				; line # x 4
.d639	b639	18		clc				clc 								; add stacked value
.d63a	b63a	68		pla				pla
.d63b	b63b	6d 27 04	adc $0427			adc 	tokenLineNumber
.d63e	b63e	8d 27 04	sta $0427			sta 	tokenLineNumber
.d641	b641	68		pla				pla
.d642	b642	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d645	b645	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d648	b648	20 69 b6	jsr $b669			jsr 	_LCLNTimes2 				; line # x 10
.d64b	b64b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d64e	b64e	e8		inx				inx
.d64f	b64f	29 0f		and #$0f			and 	#15 						; add to line #
.d651	b651	18		clc				clc
.d652	b652	6d 27 04	adc $0427			adc 	tokenLineNumber
.d655	b655	8d 27 04	sta $0427			sta 	tokenLineNumber
.d658	b658	90 03		bcc $b65d			bcc 	_TLENNoCarry
.d65a	b65a	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d65d	b65d					_TLENNoCarry:
.d65d	b65d	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d660	b660	c9 30		cmp #$30			cmp 	#'0'
.d662	b662	90 04		bcc $b668			bcc 	_TLENExit
.d664	b664	c9 3a		cmp #$3a			cmp 	#'9'+1
.d666	b666	90 c3		bcc $b62b			bcc 	TOKExtractLineNumber
.d668	b668					_TLENExit:
.d668	b668	60		rts				rts
.d669	b669					_LCLNTimes2:
.d669	b669	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d66c	b66c	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d66f	b66f	60		rts				rts
.d670	b670					TOKWriteByte:
.d670	b670	da		phx				phx
.d671	b671	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d674	b674	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d677	b677	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d67a	b67a	fa		plx				plx
.d67b	b67b	60		rts				rts
.d67c	b67c					TOKCheckCreateVariableRecord:
.d67c	b67c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d67e	b67e	85 36		sta $36				sta 	0+zTemp0
.d680	b680	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d682	b682	85 37		sta $37				sta 	1+zTemp0
.d684	b684					_CCVSearch:
.d684	b684	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d686	b686	f0 2c		beq $b6b4			beq 	_CCVFail
.d688	b688	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d68a	b68a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d68c	b68c	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d68f	b68f	d0 16		bne $b6a7			bne 	_CCVNext
.d691	b691	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d693	b693	ae 00 04	ldx $0400			ldx 	identStart
.d696	b696					_CCVCompare:
.d696	b696	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d699	b699	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d69b	b69b	e8		inx				inx 								; advance pointers
.d69c	b69c	c8		iny				iny
.d69d	b69d	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d69e	b69e	d0 07		bne $b6a7			bne 	_CCVNext  					; didn't match go to next.
.d6a0	b6a0	90 f4		bcc $b696			bcc 	_CCVCompare 				; not finished yet.
.d6a2	b6a2	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d6a5	b6a5	f0 41		beq $b6e8			beq 	_CCVFound 					; yes, we were successful
.d6a7	b6a7					_CCVNext:
.d6a7	b6a7	18		clc				clc 								; go to next record.
.d6a8	b6a8	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d6aa	b6aa	65 36		adc $36				adc 	zTemp0
.d6ac	b6ac	85 36		sta $36				sta 	zTemp0
.d6ae	b6ae	90 d4		bcc $b684			bcc 	_CCVSearch
.d6b0	b6b0	e6 37		inc $37				inc 	zTemp0+1
.d6b2	b6b2	80 d0		bra $b684			bra 	_CCVSearch
.d6b4	b6b4					_CCVFail:
.d6b4	b6b4	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d6b6	b6b6	ad 03 04	lda $0403			lda 	identHash
.d6b9	b6b9	91 36		sta ($36),y			sta 	(zTemp0),y
.d6bb	b6bb	c8		iny				iny 								; offset 2 is the type byte
.d6bc	b6bc	ad 04 04	lda $0404			lda 	identTypeByte
.d6bf	b6bf	91 36		sta ($36),y			sta 	(zTemp0),y
.d6c1	b6c1	c8		iny				iny
.d6c2	b6c2					_CCVData:
.d6c2	b6c2	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d6c4	b6c4	91 36		sta ($36),y			sta 	(zTemp0),y
.d6c6	b6c6	c8		iny				iny
.d6c7	b6c7	c0 08		cpy #$08			cpy 	#8
.d6c9	b6c9	90 f7		bcc $b6c2			bcc 	_CCVData
.d6cb	b6cb	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d6ce	b6ce					_CCVCopyName:
.d6ce	b6ce	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d6d1	b6d1	91 36		sta ($36),y			sta 	(zTemp0),y
.d6d3	b6d3	e8		inx				inx
.d6d4	b6d4	c8		iny				iny
.d6d5	b6d5	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d6d8	b6d8	d0 f4		bne $b6ce			bne 	_CCVCopyName
.d6da	b6da	98		tya				tya 								; patch offset
.d6db	b6db	92 36		sta ($36)			sta 	(zTemp0)
.d6dd	b6dd	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d6df	b6df	91 36		sta ($36),y			sta 	(zTemp0),y
.d6e1	b6e1	88		dey				dey
.d6e2	b6e2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d6e4	b6e4	09 80		ora #$80			ora 	#$80
.d6e6	b6e6	91 36		sta ($36),y			sta 	(zTemp0),y
.d6e8	b6e8					_CCVFound:
.d6e8	b6e8	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d6ea	b6ea	38		sec				sec
.d6eb	b6eb	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d6ed	b6ed	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d6ef	b6ef	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d6f2	b6f2	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d6f4	b6f4	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d6f7	b6f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d6f8	b6f8					SNDCheckChannel:
.d6f8	b6f8	aa		tax				tax
.d6f9	b6f9	bd 7f 09	lda $097f,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d6fc	b6fc	d0 38		bne $b736			bne 	_SNDCCExit
.d6fe	b6fe	da		phx				phx 								; save current channel
.d6ff	b6ff	8a		txa				txa 								; put in A
.d700	b700	20 7c b7	jsr $b77c			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d703	b703	68		pla				pla 								; channel # in A
.d704	b704	90 30		bcc $b736			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d706	b706	a8		tay				tay 								; Y is the channel #
.d707	b707	bd 74 08	lda $0874,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d70a	b70a	99 73 09	sta $0973,y			sta 	SNDPitchLow,y
.d70d	b70d	bd 75 08	lda $0875,x			lda 	SNDQueue+2,x
.d710	b710	99 77 09	sta $0977,y			sta 	SNDPitchHigh,y
.d713	b713	bd 76 08	lda $0876,x			lda 	SNDQueue+3,x
.d716	b716	99 7b 09	sta $097b,y			sta 	SNDVolume,y
.d719	b719	bd 77 08	lda $0877,x			lda 	SNDQueue+4,x
.d71c	b71c	99 7f 09	sta $097f,y			sta 	SNDTimeLeft,y
.d71f	b71f	bd 78 08	lda $0878,x			lda 	SNDQueue+5,x
.d722	b722	99 83 09	sta $0983,y			sta 	SNDAdjustLow,y
.d725	b725	bd 79 08	lda $0879,x			lda 	SNDQueue+6,x
.d728	b728	99 87 09	sta $0987,y			sta 	SNDAdjustHigh,y
.d72b	b72b	5a		phy				phy 								; save channel #
.d72c	b72c	20 96 b7	jsr $b796			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d72f	b72f	ce 72 08	dec $0872			dec 	SNDLength 					; reduce the queue length.
.d732	b732	68		pla				pla
.d733	b733	20 37 b7	jsr $b737			jsr 	SNDUpdateNote 				; update channel A
.d736	b736					_SNDCCExit:
.d736	b736	60		rts				rts
.d737	b737					SNDUpdateNote:
.d737	b737	aa		tax				tax 								; so we can access records
.d738	b738	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d739	b739	0a		asl a				asl 	a
.d73a	b73a	0a		asl a				asl 	a
.d73b	b73b	0a		asl a				asl 	a
.d73c	b73c	0a		asl a				asl 	a
.d73d	b73d	8d 71 08	sta $0871			sta 	SNDChannelBits
.d740	b740	bd 7f 09	lda $097f,x			lda 	SNDTimeLeft,x 				; are we silent
.d743	b743	f0 2e		beq $b773			beq 	_SNDUNIsSilent
.d745	b745	ad 71 08	lda $0871			lda 	SNDChannelBits 				; push channel bits on stack
.d748	b748	48		pha				pha
.d749	b749	bd 73 09	lda $0973,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d74c	b74c	29 0f		and #$0f			and 	#$0F
.d74e	b74e	0d 71 08	ora $0871			ora 	SNDChannelBits 				; set channel bits
.d751	b751	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d753	b753	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts
.d756	b756	bd 77 09	lda $0977,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d759	b759	8d 71 08	sta $0871			sta 	SNDChannelBits
.d75c	b75c	bd 73 09	lda $0973,x			lda 	SNDPitchLow,x
.d75f	b75f	4e 71 08	lsr $0871			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d762	b762	6a		ror a				ror 	a
.d763	b763	4e 71 08	lsr $0871			lsr 	SNDChannelBits
.d766	b766	6a		ror a				ror 	a
.d767	b767	4a		lsr a				lsr 	a 							; put in bits 0-5
.d768	b768	4a		lsr a				lsr 	a
.d769	b769	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts 				; write as rest of pitch register
.d76c	b76c	68		pla				pla
.d76d	b76d	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d76f	b76f	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts
.d772	b772	60		rts				rts
.d773	b773					_SNDUNIsSilent:
.d773	b773	ad 71 08	lda $0871			lda 	SNDChannelBits 				; channel bits
.d776	b776	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d778	b778	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts 				; write to the ports
.d77b	b77b	60		rts				rts
.d77c	b77c					SNDFindNextNoteForA:
.d77c	b77c	ac 72 08	ldy $0872			ldy 	SNDLength 					; queue size into Y
.d77f	b77f	f0 13		beq $b794			beq 	_SNDFNNFail 				; queue empty.
.d781	b781	a2 00		ldx #$00			ldx 	#0
.d783	b783					_SNDFNNSearch:
.d783	b783	dd 73 08	cmp $0873,x			cmp 	SNDQueue,x 					; does it match the channel
.d786	b786	38		sec				sec
.d787	b787	f0 0c		beq $b795			beq 	_SNDFNNExit 				; if so exit with CS.
.d789	b789	e8		inx				inx 								; next queue slot.
.d78a	b78a	e8		inx				inx
.d78b	b78b	e8		inx				inx
.d78c	b78c	e8		inx				inx
.d78d	b78d	e8		inx				inx
.d78e	b78e	e8		inx				inx
.d78f	b78f	e8		inx				inx
.d790	b790	e8		inx				inx
.d791	b791	88		dey				dey 								; done the whole queue
.d792	b792	d0 ef		bne $b783			bne 	_SNDFNNSearch 				; no, go back.
.d794	b794					_SNDFNNFail:
.d794	b794	18		clc				clc
.d795	b795					_SNDFNNExit:
.d795	b795	60		rts				rts
.d796	b796					SNDDeleteXFromQueue:
.d796	b796	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d798	b798	f0 09		beq $b7a3			beq 	_SNDDXExit
.d79a	b79a	bd 7b 08	lda $087b,x			lda 	SNDQueue+8,x
.d79d	b79d	9d 73 08	sta $0873,x			sta 	SNDQueue,x
.d7a0	b7a0	e8		inx				inx
.d7a1	b7a1	80 f3		bra $b796			bra 	SNDDeleteXFromQueue
.d7a3	b7a3					_SNDDXExit:
.d7a3	b7a3	60		rts				rts
.0871						SNDChannelBits:
>0871								.fill 	1
.d7a4	b7a4					SNDQueueRequest:
.d7a4	b7a4	86 36		stx $36				stx 	zTemp0						; save queue address
.d7a6	b7a6	84 37		sty $37				sty 	zTemp0+1
.d7a8	b7a8	ae 72 08	ldx $0872			ldx 	SNDLength 					; queue is full, can't take any more.
.d7ab	b7ab	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d7ad	b7ad	f0 21		beq $b7d0			beq 	_SNDQRExit
.d7af	b7af	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d7b1	b7b1	48		pha				pha
.d7b2	b7b2	8a		txa				txa  								; get offset in queue buffer/
.d7b3	b7b3	0a		asl a				asl 	a
.d7b4	b7b4	0a		asl a				asl 	a
.d7b5	b7b5	0a		asl a				asl 	a
.d7b6	b7b6	aa		tax				tax
.d7b7	b7b7	68		pla				pla 								; get back and push again
.d7b8	b7b8	48		pha				pha
.d7b9	b7b9	9d 73 08	sta $0873,x			sta 	SNDQueue+0,x 				; save the channel #
.d7bc	b7bc	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d7be	b7be					_SNDQCopy:
.d7be	b7be	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7c0	b7c0	e8		inx				inx
.d7c1	b7c1	c8		iny				iny
.d7c2	b7c2	9d 73 08	sta $0873,x			sta 	SNDQueue,x
.d7c5	b7c5	c0 06		cpy #$06			cpy 	#6
.d7c7	b7c7	d0 f5		bne $b7be			bne 	_SNDQCopy
.d7c9	b7c9	ee 72 08	inc $0872			inc 	SNDLength 					; bump queue length.
.d7cc	b7cc	68		pla				pla 								; get channel # back
.d7cd	b7cd	20 f8 b6	jsr $b6f8			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d7d0	b7d0					_SNDQRExit:
.d7d0	b7d0	60		rts				rts
.d7d1	b7d1					SNDSilenceChannel:
.d7d1	b7d1	aa		tax				tax 								; zero time left.
.d7d2	b7d2	9e 7f 09	stz $097f,x			stz 	SNDTimeLeft,x
.d7d5	b7d5	0a		asl a				asl 	a 							; shift into position
.d7d6	b7d6	0a		asl a				asl 	a
.d7d7	b7d7	0a		asl a				asl 	a
.d7d8	b7d8	0a		asl a				asl 	a
.d7d9	b7d9	0a		asl a				asl 	a
.d7da	b7da	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d7dc	b7dc	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts
.d7df	b7df	60		rts				rts
.d7e0	b7e0					SNDWritePorts:
.d7e0	b7e0	da		phx				phx 								; save X
.d7e1	b7e1	a6 01		ldx $01				ldx 	1 							; save I/O status
.d7e3	b7e3	64 01		stz $01				stz 	1 							; access I/O page 0
.d7e5	b7e5	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d7e8	b7e8	8d 10 d6	sta $d610			sta 	$D610
.d7eb	b7eb	86 01		stx $01				stx 	1 							; restore I/O
.d7ed	b7ed	fa		plx				plx 								; restore X
.d7ee	b7ee	60		rts				rts
.d7ef	b7ef					Export_SNDCommand:
.d7ef	b7ef	da		phx				phx 								; save XY
.d7f0	b7f0	5a		phy				phy
.d7f1	b7f1	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d7f3	b7f3	f0 1d		beq $b812			beq 	_SNDInitialise
.d7f5	b7f5	90 28		bcc $b81f			bcc 	_SNDExit
.d7f7	b7f7	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d7f9	b7f9	f0 17		beq $b812			beq 	_SNDSilence
.d7fb	b7fb	b0 22		bcs $b81f			bcs 	_SNDExit
.d7fd	b7fd	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d7ff	b7ff	b0 09		bcs $b80a			bcs 	_SNDQueryPlay
.d801	b801	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d803	b803	b0 1a		bcs $b81f			bcs 	_SNDExit
.d805	b805	20 a4 b7	jsr $b7a4			jsr 	SNDQueueRequest
.d808	b808	80 15		bra $b81f			bra 	_SNDExit
.d80a	b80a					_SNDQueryPlay:
.d80a	b80a	29 03		and #$03			and 	#3 							; get channel #
.d80c	b80c	aa		tax				tax
.d80d	b80d	bd 7f 09	lda $097f,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d810	b810	80 0d		bra $b81f			bra 	_SNDExit
.d812	b812					_SNDInitialise:
.d812	b812					_SNDSilence:
.d812	b812	9c 72 08	stz $0872			stz 	SNDLength 					; empty the queue.
.d815	b815	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d817	b817					_SNDSilenceLoop:
.d817	b817	48		pha				pha
.d818	b818	20 d1 b7	jsr $b7d1			jsr 	SNDSilenceChannel
.d81b	b81b	68		pla				pla
.d81c	b81c	3a		dec a				dec 	a
.d81d	b81d	10 f8		bpl $b817			bpl 	_SNDSilenceLoop
.d81f	b81f					_SNDExit:
.d81f	b81f	7a		ply				ply
.d820	b820	fa		plx				plx
.d821	b821	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0872						SNDLength:
>0872								.fill 	1
.0873						SNDQueue:
>0873								.fill 	SNDQueueSize * 8
.0973						SNDPitchLow:
>0973								.fill 	4
.0977						SNDPitchHigh:
>0977								.fill 	4
.097b						SNDVolume:
>097b								.fill 	4
.097f						SNDTimeLeft:
>097f								.fill 	4
.0983						SNDAdjustLow:
>0983								.fill 	4
.0987						SNDAdjustHigh:
>0987								.fill 	4
.d822	b822					Export_SNDUpdate:
.d822	b822					PagedSNDUpdate:
.d822	b822	ad 7f 09	lda $097f			lda 	SNDTimeLeft+0 				; look at time remaining
.d825	b825	f0 05		beq $b82c			beq 	_SNDUNot0 					; not playing
.d827	b827	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d829	b829	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel 			; update it.
.d82c	b82c					_SNDUNot0:
.d82c	b82c	ad 80 09	lda $0980			lda 	SNDTimeLeft+1
.d82f	b82f	f0 05		beq $b836			beq 	_SNDUNot1
.d831	b831	a2 01		ldx #$01			ldx 	#1
.d833	b833	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel
.d836	b836					_SNDUNot1:
.d836	b836	ad 81 09	lda $0981			lda 	SNDTimeLeft+2
.d839	b839	f0 05		beq $b840			beq 	_SNDUNot2
.d83b	b83b	a2 02		ldx #$02			ldx 	#2
.d83d	b83d	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel
.d840	b840					_SNDUNot2:
.d840	b840	ad 82 09	lda $0982			lda 	SNDTimeLeft+3
.d843	b843	f0 05		beq $b84a			beq 	_SNDUNot3
.d845	b845	a2 03		ldx #$03			ldx 	#3
.d847	b847	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel
.d84a	b84a					_SNDUNot3:
.d84a	b84a	60		rts				rts
.d84b	b84b					SNDUpdateChannel:
.d84b	b84b	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d84d	b84d	f0 2c		beq $b87b			beq 	_SNDUCExit
.d84f	b84f	3a		dec a				dec 	a 							; decrement and update timer
.d850	b850	9d 7f 09	sta $097f,x			sta 	SNDTimeLeft,x
.d853	b853	f0 1d		beq $b872			beq 	_SNDUCUpdate 				; if zero, silence channel
.d855	b855	bd 83 09	lda $0983,x			lda 	SNDAdjustLow,x 				; adjust ?
.d858	b858	1d 87 09	ora $0987,x			ora 	SNDAdjustHigh,x
.d85b	b85b	f0 1e		beq $b87b			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d85d	b85d	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d85e	b85e	bd 73 09	lda $0973,x			lda 	SNDPitchLow,x
.d861	b861	7d 83 09	adc $0983,x			adc 	SNDAdjustLow,x
.d864	b864	9d 73 09	sta $0973,x			sta 	SNDPitchLow,x
.d867	b867	bd 77 09	lda $0977,x			lda 	SNDPitchHigh,x
.d86a	b86a	7d 87 09	adc $0987,x			adc 	SNDAdjustHigh,x
.d86d	b86d	29 03		and #$03			and 	#3
.d86f	b86f	9d 77 09	sta $0977,x			sta 	SNDPitchHigh,x
.d872	b872					_SNDUCUpdate:
.d872	b872	8a		txa				txa 								; which channel.
.d873	b873	48		pha				pha
.d874	b874	20 37 b7	jsr $b737			jsr 	SNDUpdateNote 				; update the current note
.d877	b877	68		pla				pla
.d878	b878	20 f8 b6	jsr $b6f8			jsr 	SNDCheckChannel 			; more to do ?
.d87b	b87b					_SNDUCExit:
.d87b	b87b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>e018	a018	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>e028	a028	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>e038	a038	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>e048	a048	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>e058	a058	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>e068	a068	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>e078	a078	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>e088	a088	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>e098	a098	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>e0a8	a0a8	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>e0b8	a0b8	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>e0c8	a0c8	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>e0d8	a0d8	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>e0e8	a0e8	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>e0f8	a0f8	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>e108	a108	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>e118	a118	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>e128	a128	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>e138	a138	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>e148	a148	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>e158	a158	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>e178	a178	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>e188	a188	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.e198	a198					Header_jchars:
>e198	a198	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e1a0	a1a0	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>e1b0	a1b0	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>e1c0	a1c0	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>e1d0	a1d0	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>e1e0	a1e0	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>e1f0	a1f0	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>e200	a200	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>e210	a210	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>e220	a220	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e230	a230	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>e240	a240	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>e250	a250	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>e260	a260	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>e270	a270	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>e280	a280	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>e290	a290	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e2a0	a2a0	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2b0	a2b0	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2c0	a2c0	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2d0	a2d0	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2e0	a2e0	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2f0	a2f0	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e300	a300	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>e310	a310	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e320	a320	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e330	a330	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e340	a340	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>e350	a350	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e360	a360	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e370	a370	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e380	a380	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>e390	a390	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e3a0	a3a0	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3b0	a3b0	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3c0	a3c0	9d ff 96 18 96 a3 ff 00
.e3c8	a3c8					Header_kattrs:
>e3c8	a3c8	72 ff 62 09 62 ff 72 37			.byte	114,255,98,9,98,255,114,55,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,255,216,7,216,255,114,2,114,255,216,6,216,255,114,2,114,255,216,7,216,255,114,2,114,255,216,6,216,255,114,2,114,210,210,255,114,3,114,210,210,114,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,104,104,255,114,7,114,104,104,255,114,4,114,104,104,114,114,104,104,255,114,7,114,104,104,255,114,4,114,104,104,114,114,210,210,255,114,2,114,210,210,255,114,2,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,232,232,255,114,14,114,232,232,114,114,232,232,255,114,7,114,232,232,255,114,8,114,210,210,114,114,210,210,255,114,3,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,255,56,5,56,255,114,4,114,255,56,6,56,255,114,2,114,255,56,6,56,255,114,2,114,255,56,7,56,255,114,2,114,255,210,4,210,255,114,4,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,120,120,255,114,7,114,120,120,255,114,14,114,113,113,114,114,113,113,255,114,4,114,113,113,114,114,210,210,114,114,210,210,255,114,3,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,168,168,255,114,7,114,168,168,255,114,8,114,168,168,255,114,3,114,168,168,114,114,168,168,255,114,4,114,168,168,114,114,210,210,255,114,2,114,210,210,255,114,2,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,72,72,255,114,7,114,255,72,8,72,255,114,2,114,255,72,5,72,255,114,3,114,255,72,6,72,255,114,2,114,210,210,255,114,3,114,210,210,114,114,255,98,9,98,255,114,2,114,255,2,79,2,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3d0	a3d0	72 ff 62 09 62 ff 72 03 72 ff 62 09 62 ff 72 03
>e3e0	a3e0	72 ff d8 07 d8 ff 72 02 72 ff d8 06 d8 ff 72 02
>e3f0	a3f0	72 ff d8 07 d8 ff 72 02 72 ff d8 06 d8 ff 72 02
>e400	a400	72 d2 d2 ff 72 03 72 d2 d2 72 72 ff 62 09 62 ff
>e410	a410	72 03 72 ff 62 09 62 ff 72 03 72 68 68 ff 72 07
>e420	a420	72 68 68 ff 72 04 72 68 68 72 72 68 68 ff 72 07
>e430	a430	72 68 68 ff 72 04 72 68 68 72 72 d2 d2 ff 72 02
>e440	a440	72 d2 d2 ff 72 02 72 ff 62 09 62 ff 72 03 72 ff
>e450	a450	62 09 62 ff 72 03 72 e8 e8 ff 72 0e 72 e8 e8 72
>e460	a460	72 e8 e8 ff 72 07 72 e8 e8 ff 72 08 72 d2 d2 72
>e470	a470	72 d2 d2 ff 72 03 72 ff 62 09 62 ff 72 03 72 ff
>e480	a480	62 09 62 ff 72 03 72 ff 38 05 38 ff 72 04 72 ff
>e490	a490	38 06 38 ff 72 02 72 ff 38 06 38 ff 72 02 72 ff
>e4a0	a4a0	38 07 38 ff 72 02 72 ff d2 04 d2 ff 72 04 72 ff
>e4b0	a4b0	62 09 62 ff 72 03 72 ff 62 09 62 ff 72 03 72 78
>e4c0	a4c0	78 ff 72 07 72 78 78 ff 72 0e 72 71 71 72 72 71
>e4d0	a4d0	71 ff 72 04 72 71 71 72 72 d2 d2 72 72 d2 d2 ff
>e4e0	a4e0	72 03 72 ff 62 09 62 ff 72 03 72 ff 62 09 62 ff
>e4f0	a4f0	72 03 72 a8 a8 ff 72 07 72 a8 a8 ff 72 08 72 a8
>e500	a500	a8 ff 72 03 72 a8 a8 72 72 a8 a8 ff 72 04 72 a8
>e510	a510	a8 72 72 d2 d2 ff 72 02 72 d2 d2 ff 72 02 72 ff
>e520	a520	62 09 62 ff 72 03 72 ff 62 09 62 ff 72 03 72 48
>e530	a530	48 ff 72 07 72 ff 48 08 48 ff 72 02 72 ff 48 05
>e540	a540	48 ff 72 03 72 ff 48 06 48 ff 72 02 72 d2 d2 ff
>e550	a550	72 03 72 d2 d2 72 72 ff 62 09 62 ff 72 02 72 ff
>e560	a560	02 4f 02 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>e570	a570	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e580	a580	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>e590	a590	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>e5a0	a5a0	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.e5b0	a5b0					Header_kchars:
>e5b0	a5b0	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,183,183,255,32,3,32,183,183,255,32,29,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,183,183,255,32,2,32,183,183,255,32,30,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,8,32,183,183,32,32,183,183,255,32,31,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,183,4,183,255,32,32,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,183,183,32,32,183,183,255,32,31,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,183,183,255,32,2,32,183,183,255,32,30,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,2,32,183,183,255,32,3,32,183,183,255,32,94,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e5b8	a5b8	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>e5c8	a5c8	ff 20 02 20 ff 08 06 08 ff 20 02 20 b7 b7 ff 20
>e5d8	a5d8	03 20 b7 b7 ff 20 1d 20 08 08 ff 20 07 20 08 08
>e5e8	a5e8	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>e5f8	a5f8	ff 20 04 20 08 08 20 20 b7 b7 ff 20 02 20 b7 b7
>e608	a608	ff 20 1e 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e618	a618	ff 20 07 20 08 08 ff 20 08 20 b7 b7 20 20 b7 b7
>e628	a628	ff 20 1f 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e638	a638	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>e648	a648	ff 20 02 20 ff b7 04 b7 ff 20 20 20 08 08 ff 20
>e658	a658	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>e668	a668	04 20 08 08 20 20 b7 b7 20 20 b7 b7 ff 20 1f 20
>e678	a678	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e688	a688	03 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e698	a698	b7 b7 ff 20 02 20 b7 b7 ff 20 1e 20 08 08 ff 20
>e6a8	a6a8	07 20 ff 08 08 08 ff 20 02 20 ff 08 05 08 ff 20
>e6b8	a6b8	03 20 ff 08 06 08 ff 20 02 20 b7 b7 ff 20 03 20
>e6c8	a6c8	b7 b7 ff 20 5e 20 a0 ff 96 1b 96 9b ff 96 16 96
>e6d8	a6d8	9b ff 96 18 96 a1 82 48 61 72 64 77 61 72 65 ff
>e6e8	a6e8	20 13 20 82 dd 32 30 32 32 20 53 74 65 66 61 6e
>e6f8	a6f8	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e708	a708	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e718	a718	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e728	a728	6e 65 6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65
>e738	a738	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e748	a748	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e758	a758	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e768	a768	42 41 53 49 43 ff 20 11 20 82 dd 32 30 32 32 20
>e778	a778	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e788	a788	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e798	a798	2e 75 6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96
>e7a8	a7a8	16 96 9d ff 96 18 96 a3 ff 00
.e7b2	a7b2					Header_Palette:
>e7b2	a7b2	00 00 00 00				.dword $000000
>e7b6	a7b6	66 66 66 00				.dword $666666
>e7ba	a7ba	aa 00 00 00				.dword $0000aa
>e7be	a7be	00 aa 00 00				.dword $00aa00
>e7c2	a7c2	ea 41 c0 00				.dword $c041ea
>e7c6	a7c6	00 48 87 00				.dword $874800
>e7ca	a7ca	00 9c ff 00				.dword $ff9c00
>e7ce	a7ce	ff db 57 00				.dword $57dbff
>e7d2	a7d2	28 3f 3f 00				.dword $3f3f28
>e7d6	a7d6	8a aa aa 00				.dword $aaaa8a
>e7da	a7da	ff 55 55 00				.dword $5555ff
>e7de	a7de	55 ff 55 00				.dword $55ff55
>e7e2	a7e2	ed 8d ff 00				.dword $ff8ded
>e7e6	a7e6	00 00 ff 00				.dword $ff0000
>e7ea	a7ea	55 ff ff 00				.dword $ffff55
>e7ee	a7ee	ff ff ff 00				.dword $ffffff
>e7f2	a7f2	ff ff ff 00				.dword $ffffff
>e7f6	a7f6	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
