
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Oct  7 14:02:09 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 20 8e	jsr $8e20			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 a1 80	jsr $80a1			jsr 	RunDemos
.8013	20 03 88	jsr $8803			jsr 	NewCommand 					; erase current program
.8016	20 a5 9a	jsr $9aa5			jsr 	BackloadProgram
.8019	4c 5f 83	jmp $835f			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 476."
>8064	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 34 37 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8080	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./variants/ab.graphics/access.asm

.8083					GXOpenBitmap:
.8083	78		sei				sei 								; no interrupts here
.8084	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8086	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.8089	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.808b	85 00		sta $00				sta 	0
.808d	a5 0d		lda $0d				lda 	GFXEditSlot 				; Save the original LUT slot value
.808f	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.8092	58		cli				cli
.8093	60		rts				rts
.8094					GXCloseBitmap:
.8094	78		sei				sei
.8095	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8098	85 0d		sta $0d				sta 	GFXEditSlot
.809a	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.809d	85 00		sta $00				sta 	0
.809f	58		cli				cli
.80a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/ab.graphics/data.asm

=5					GXMappingPage = 5
=40960					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=13					GFXEditSlot = 8 + GXMappingPage
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX1:
>0631							.fill 	2
.0633					gxY1:
>0633							.fill 	2
.0635					gxX2:
>0635							.fill 	2
.0637					gxY2:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxForeground:
>063b							.fill 	1
.063c					gxBackground:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/ab.graphics/graphics.asm

.80a1					RunDemos:
.80a1	64 01		stz $01				stz 	1
.80a3	a9 0f		lda #$0f			lda 	#$0F
.80a5	8d 00 d0	sta $d000			sta 	$D000
.80a8	a9 01		lda #$01			lda 	#1
.80aa	8d 00 d1	sta $d100			sta 	$D100
.80ad	9c 01 d1	stz $d101			stz 	$D101
.80b0	9c 02 d1	stz $d102			stz 	$D102
.80b3	a9 02		lda #$02			lda 	#2
.80b5	8d 03 d1	sta $d103			sta 	$D103
.80b8	a9 10		lda #$10			lda 	#16
.80ba	8d 39 06	sta $0639			sta 	gxBasePage
.80bd	a9 f0		lda #$f0			lda 	#240
.80bf	8d 3a 06	sta $063a			sta 	gxHeight
.80c2	a9 fc		lda #$fc			lda 	#$FC
.80c4	8d 3b 06	sta $063b			sta 	gxForeground
.80c7	a9 01		lda #$01			lda 	#1
.80c9	8d 3c 06	sta $063c			sta 	gxBackground
.80cc	20 83 80	jsr $8083			jsr 	GXOpenBitmap
.80cf	ad 39 06	lda $0639			lda 	gxBasePage
.80d2	85 0d		sta $0d				sta 	GFXEditSlot
.80d4	a2 00		ldx #$00			ldx 	#0
.80d6	aa		tax				tax
.80d7					copyout:
.80d7	9e 00 a3	stz $a300,x			stz 	$A300,x
.80da	9e 00 a2	stz $a200,x			stz 	$A200,x
.80dd	9e 00 a1	stz $a100,x			stz 	$A100,x
.80e0	9d 00 a0	sta $a000,x			sta 	$A000,x
.80e3	ca		dex				dex
.80e4	d0 f1		bne $80d7			bne 	copyout
.80e6	1a		inc a				inc 	a
.80e7	d0 ee		bne $80d7			bne 	copyout
.80e9	20 94 80	jsr $8094			jsr 	GXCloseBitmap
.80ec	a9 01		lda #$01			lda 	#1
.80ee	8d 00 d0	sta $d000			sta 	$D000
.80f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80f2					AssembleGroup1:
.80f2	a9 ff		lda #$ff			lda 	#$FF
.80f4	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.80f7	80 02		bra $80fb			bra 	AsmGroup12
.80f9					AssembleGroup2:
.80f9	a5 00		lda $00				lda 	$00
.80fb					AsmGroup12:
.80fb	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.80fe	68		pla				pla 								; pop the return address to access the information following.
.80ff	fa		plx				plx
.8100	20 89 81	jsr $8189			jsr 	AccessParameters 			; get opcode and save as base
.8103	8d a4 04	sta $04a4			sta 	BaseOpcode
.8106	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8109	d0 08		bne $8113			bne 	_AG12HaveMask
.810b	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.810d	20 91 81	jsr $8191			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8110	8d a5 04	sta $04a5			sta 	ModeMask
.8113					_AG12HaveMask:
.8113	20 cc 82	jsr $82cc			jsr 	TypeAndCalculateOperand 	; get zero page type
.8116	da		phx				phx 								; save found address mode
.8117	20 f5 81	jsr $81f5			jsr 	AssembleModeX
.811a	fa		plx				plx  								; restore address mode
.811b	b0 0b		bcs $8128			bcs 	_AG12Exit
.811d	20 29 81	jsr $8129			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8120	20 f5 81	jsr $81f5			jsr 	AssembleModeX
.8123	b0 03		bcs $8128			bcs 	_AG12Exit
.8125	4c e6 a6	jmp $a6e6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8128					_AG12Exit:
.8128	60		rts				rts
.8129					PromoteToAbsolute:
.8129	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.812b	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.812d	f0 19		beq $8148			beq 	_PTADo
.812f	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8131	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8133	f0 13		beq $8148			beq 	_PTADo
.8135	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8137	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8139	f0 0d		beq $8148			beq 	_PTADo
.813b	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.813d	e0 d1		cpx #$d1			cpx 	#AM_IND
.813f	f0 07		beq $8148			beq 	_PTADo
.8141	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8143	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8145	f0 01		beq $8148			beq 	_PTADo
.8147	60		rts				rts
.8148					_PTADo:
.8148	aa		tax				tax
.8149	60		rts				rts
.814a					AssembleGroup3:
.814a	68		pla				pla 								; get parameters, which is just the opcode.
.814b	fa		plx				plx
.814c	20 89 81	jsr $8189			jsr 	AccessParameters 			; get and output opcode
.814f	20 a1 81	jsr $81a1			jsr 	AssemblerWriteByte
.8152	20 30 83	jsr $8330			jsr 	CalculateOperand 			; get a 16 bit operand
.8155	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8158	38		sec				sec
.8159	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.815c	48		pha				pha 								; LSB in A
.815d	ad 10 04	lda $0410			lda 	NSMantissa1
.8160	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8163	aa		tax				tax 								; MSB in X
.8164	68		pla				pla
.8165	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8166	69 7f		adc #$7f			adc 	#$7F
.8168	90 01		bcc $816b			bcc 	_AG3NoCarry
.816a	e8		inx				inx
.816b					_AG3NoCarry:
.816b	38		sec				sec 								; fix back and write out anyways.
.816c	e9 80		sbc #$80			sbc 	#$80
.816e	20 a1 81	jsr $81a1			jsr 	AssemblerWriteByte
.8171	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8173	f0 0a		beq $817f			beq 	_AG3Exit
.8175	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8178	29 01		and #$01			and 	#1
.817a	f0 03		beq $817f			beq 	_AG3Exit
.817c	4c eb a6	jmp $a6eb			jmp 	RangeError 					; no, branch is out of range
.817f					_AG3Exit:
.817f	60		rts				rts
.8180					AssembleGroup4:
.8180	68		pla				pla 								; pop address
.8181	fa		plx				plx
.8182	20 89 81	jsr $8189			jsr 	AccessParameters 			; access and get first
.8185	20 a1 81	jsr $81a1			jsr 	AssemblerWriteByte 			; output it.
.8188	60		rts				rts
.8189					AccessParameters:
.8189	8d a1 04	sta $04a1			sta 	ParamStart
.818c	8e a2 04	stx $04a2			stx 	ParamStart+1
.818f	a9 01		lda #$01			lda 	#1
.8191					GetParameter:
.8191	5a		phy				phy
.8192	a8		tay				tay
.8193	ad a1 04	lda $04a1			lda 	ParamStart
.8196	85 36		sta $36				sta 	zTemp0
.8198	ad a2 04	lda $04a2			lda 	ParamStart+1
.819b	85 37		sta $37				sta 	zTemp0+1
.819d	b1 36		lda ($36),y			lda 	(zTemp0),y
.819f	7a		ply				ply
.81a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81a1					AssemblerWriteByte:
.81a1	48		pha			pha
.81a2	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.81a5	29 02		and #$02		and 	#2
.81a7	f0 1b		beq $81c4		beq 	_AWBNoPrint
.81a9	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.81ac	20 df 81	jsr $81df		jsr 	PrintHex
.81af	ad 9e 04	lda $049e		lda		AssemblerAddress
.81b2	20 df 81	jsr $81df		jsr 	PrintHex
.81b5	a9 20		lda #$20		lda 	#' '
.81b7	20 89 a8	jsr $a889		jsr 	EXTPrintCharacter
.81ba	68		pla			pla 									; print byte
.81bb	48		pha			pha
.81bc	20 df 81	jsr $81df		jsr 	PrintHex
.81bf	a9 0d		lda #$0d		lda 	#13
.81c1	20 89 a8	jsr $a889		jsr 	EXTPrintCharacter
.81c4					_AWBNoPrint:
.81c4	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.81c7	85 36		sta $36			sta 	zTemp0
.81c9	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.81cc	f0 0e		beq $81dc		beq 	_AWBRange
.81ce	85 37		sta $37			sta 	zTemp0+1
.81d0	68		pla			pla 									; write byte out
.81d1	92 36		sta ($36)		sta 	(zTemp0)
.81d3	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.81d6	d0 03		bne $81db		bne 	_AWBNoCarry
.81d8	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.81db					_AWBNoCarry:
.81db	60		rts			rts
.81dc					_AWBRange:
.81dc	4c eb a6	jmp $a6eb		jmp 	RangeError
.81df					PrintHex:
.81df	48		pha				pha
.81e0	4a		lsr a				lsr 	a
.81e1	4a		lsr a				lsr 	a
.81e2	4a		lsr a				lsr 	a
.81e3	4a		lsr a				lsr 	a
.81e4	20 e8 81	jsr $81e8			jsr 	_PrintNibble
.81e7	68		pla				pla
.81e8					_PrintNibble:
.81e8	29 0f		and #$0f			and 	#15
.81ea	c9 0a		cmp #$0a			cmp 	#10
.81ec	90 02		bcc $81f0			bcc 	_NoShift
.81ee	69 06		adc #$06			adc 	#6
.81f0					_NoShift:
.81f0	69 30		adc #$30			adc 	#48
.81f2	4c 89 a8	jmp $a889			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81f5					AssembleModeX:
.81f5	5a		phy				phy
.81f6	ad a3 04	lda $04a3			lda 	IsGroup1
.81f9	f0 17		beq $8212			beq 	_AMXGroup2
.81fb	8a		txa				txa 							; is it in group # 1
.81fc	29 40		and #$40			and 	#AM_ISG1
.81fe	f0 50		beq $8250			beq 	_AMXFail 				; no, give up.
.8200	8a		txa				txa 							; get back.
.8201	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8203	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8205	d0 22		bne $8229			bne 	_AMXHaveInfo
.8207	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.820a	c9 81		cmp #$81			cmp 	#$81
.820c	f0 42		beq $8250			beq 	_AMXFail
.820e	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8210	80 17		bra $8229			bra 	_AMXHaveInfo 			; odd design decision there.
.8212					_AMXGroup2:
.8212	8a		txa				txa 							; is it in group 2 ?
.8213	29 20		and #$20			and 	#AM_ISG2
.8215	f0 39		beq $8250			beq 	_AMXFail 				; no, give up.
.8217	8a		txa				txa 							; get the offset into Y
.8218	29 1f		and #$1f			and 	#$1F
.821a	4a		lsr a				lsr 	a 						; make it 0-7.
.821b	4a		lsr a				lsr  	a
.821c	a8		tay				tay
.821d	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8220					_AMXCheckOkay:
.8220	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8221	88		dey				dey
.8222	10 fc		bpl $8220			bpl 	_AMXCheckOkay
.8224	90 2a		bcc $8250			bcc 	_AMXFail 				; not allowed.
.8226	8a		txa				txa  							; get mask back
.8227	29 1f		and #$1f			and 	#$1F
.8229					_AMXHaveInfo:
.8229	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.822b	10 05		bpl $8232			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.822d	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8230	d0 1e		bne $8250			bne 	_AMXFail
.8232					_AMXAnySize:
.8232	18		clc				clc 							; add offset to the base opcode
.8233	6d a4 04	adc $04a4			adc 	BaseOpcode
.8236					_AMXOutputCode:
.8236	20 a1 81	jsr $81a1			jsr 	AssemblerWriteByte 		; write the opcode out.
.8239	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.823b	f0 10		beq $824d			beq 	_AMXExit
.823d	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8240	20 a1 81	jsr $81a1			jsr 	AssemblerWriteByte
.8243	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8245	30 06		bmi $824d			bmi 	_AMXExit
.8247	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.824a	20 a1 81	jsr $81a1			jsr 	AssemblerWriteByte
.824d					_AMXExit:
.824d	7a		ply				ply
.824e	38		sec				sec
.824f	60		rts				rts
.8250					_AMXFail:
.8250	a0 00		ldy #$00			ldy 	#0
.8252					_AMXCheckOddities:
.8252	8a		txa				txa
.8253	d9 7b 82	cmp $827b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8256	d0 16		bne $826e			bne 	_AMXCONext
.8258	b9 79 82	lda $8279,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.825b	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.825e	d0 0e		bne $826e			bne 	_AMXCONext
.8260	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8262	10 05		bpl $8269			bpl 	_AMXCONotZero
.8264	ad 10 04	lda $0410			lda 	NSMantissa1
.8267	d0 05		bne $826e			bne 	_AMXCONext
.8269					_AMXCONotZero:
.8269	b9 7a 82	lda $827a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.826c	80 c8		bra $8236			bra 	_AMXOutputCode 			; and assemble it
.826e					_AMXCONext:
.826e	c8		iny				iny
.826f	c8		iny				iny
.8270	c8		iny				iny
.8271	b9 79 82	lda $8279,y			lda 	ExtraOpcode+0,y 		; end of table
.8274	d0 dc		bne $8252			bne 	_AMXCheckOddities
.8276					_AMXCOFail:
.8276	7a		ply				ply
.8277	18		clc				clc
.8278	60		rts				rts
.8279					ExtraOpcode:
>8279	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>827c	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>827f	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8282	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8285	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8288	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>828b	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>828e	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8291	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8294	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8297	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8298					LabelHere:
.8298	c8		iny				iny 								; skip .
.8299	a2 00		ldx #$00			ldx 	#0 							; get a term
.829b	20 a1 94	jsr $94a1			jsr 	EvaluateTerm 				; get a term
.829e	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.82a1	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82a3	d0 24		bne $82c9			bne 	_ALType
.82a5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82a8	85 36		sta $36				sta 	zTemp0
.82aa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.82ad	85 37		sta $37				sta 	zTemp0+1
.82af	5a		phy				phy 								; copy address in.
.82b0	a0 01		ldy #$01			ldy 	#1
.82b2	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.82b5	92 36		sta ($36)			sta 	(zTemp0)
.82b7	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.82ba	91 36		sta ($36),y			sta 	(zTemp0),y
.82bc	c8		iny				iny
.82bd	a9 00		lda #$00			lda 	#0
.82bf	91 36		sta ($36),y			sta 	(zTemp0),y
.82c1	c8		iny				iny
.82c2	91 36		sta ($36),y			sta 	(zTemp0),y
.82c4	c8		iny				iny
.82c5	91 36		sta ($36),y			sta 	(zTemp0),y
.82c7	7a		ply				ply
.82c8	60		rts				rts
.82c9					_ALType:
.82c9	4c f0 a6	jmp $a6f0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82cc					TypeAndCalculateOperand:
.82cc	b1 30		lda ($30),y			lda 	(codePtr),y
.82ce	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82d0	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82d2	f0 5b		beq $832f			beq 	_TACOExit
.82d4	c9 80		cmp #$80			cmp 	#KWC_EOL
.82d6	f0 57		beq $832f			beq 	_TACOExit
.82d8	c8		iny				iny
.82d9	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82db	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82dd	f0 51		beq $8330			beq 	CalculateOperand
.82df	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82e1	f0 1f		beq $8302			beq 	_TACOIndirect
.82e3	88		dey				dey 								; undo get of first character
.82e4	20 30 83	jsr $8330			jsr 	CalculateOperand 			; get operand
.82e7	b1 30		lda ($30),y			lda 	(codePtr),y
.82e9	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82eb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ed	d0 40		bne $832f			bne 	_TACOExit
.82ef	c8		iny				iny
.82f0	20 77 a0	jsr $a077			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82f3	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82f5	c9 58		cmp #$58			cmp 	#'X'
.82f7	f0 36		beq $832f			beq 	_TACOExit
.82f9	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82fb	c9 59		cmp #$59			cmp 	#'Y'
.82fd	f0 30		beq $832f			beq 	_TACOExit
.82ff					_TACOSyntax:
.82ff	4c e6 a6	jmp $a6e6			jmp 	SyntaxError
.8302					_TACOIndirect:
.8302	20 30 83	jsr $8330			jsr 	CalculateOperand 			; get the operand
.8305	b1 30		lda ($30),y			lda 	(codePtr),y
.8307	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8309	f0 17		beq $8322			beq 	_TACOIndX
.830b	20 00 a1	jsr $a100			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.830e	b1 30		lda ($30),y			lda 	(codePtr),y
.8310	a2 d1		ldx #$d1			ldx 	#AM_IND
.8312	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8314	d0 19		bne $832f			bne 	_TACOExit
.8316	c8		iny				iny
.8317	20 77 a0	jsr $a077			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.831a	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.831c	d0 e1		bne $82ff			bne 	_TACOSyntax
.831e	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8320	80 0d		bra $832f			bra 	_TACOExit
.8322					_TACOIndX:
.8322	c8		iny				iny
.8323	20 77 a0	jsr $a077			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8326	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8328	d0 d5		bne $82ff			bne 	_TACOSyntax
.832a	20 00 a1	jsr $a100			jsr 	CheckRightBracket			; check )
.832d	a2 c0		ldx #$c0			ldx 	#AM_INDX
.832f					_TACOExit:
.832f	60		rts				rts
.8330					CalculateOperand:
.8330	48		pha				pha
.8331	da		phx				phx
.8332	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8334	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger
.8337	fa		plx				plx
.8338	68		pla				pla
.8339	60		rts				rts
.a077					TACOCheckXY:
.a077	b1 30		lda ($30),y			lda 	(codePtr),y
.a079	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a07b	c9 40		cmp #$40			cmp 	#$40
.a07d	d0 21		bne $a0a0			bne 	_TCXYFail
.a07f	b1 30		lda ($30),y			lda 	(codePtr),y
.a081	18		clc				clc
.a082	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a084	85 37		sta $37				sta 	zTemp0+1
.a086	c8		iny				iny
.a087	b1 30		lda ($30),y			lda 	(codePtr),y
.a089	c8		iny				iny
.a08a	85 36		sta $36				sta 	zTemp0
.a08c	5a		phy				phy 								; save position
.a08d	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a08f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a091	d0 0c		bne $a09f			bne 	_TCXYPopFail
.a093	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a095	b1 36		lda ($36),y			lda 	(zTemp0),y
.a097	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a099	f0 08		beq $a0a3			beq 	_TCXYFound
.a09b	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a09d	f0 04		beq $a0a3			beq 	_TCXYFound
.a09f					_TCXYPopFail:
.a09f	7a		ply				ply
.a0a0					_TCXYFail:
.a0a0	a9 00		lda #$00			lda 	#0
.a0a2	60		rts				rts
.a0a3					_TCXYFound:
.a0a3	7a		ply				ply 								; restore position
.a0a4	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a0a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.833a					EditProgramCode:
.833a	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.833d	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8340	20 de 99	jsr $99de			jsr 	MemorySearch
.8343	90 05		bcc $834a			bcc 	_EPCNoDelete 				; reached the end don't delete
.8345	d0 03		bne $834a			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8347	20 cd a8	jsr $a8cd			jsr 	MemoryDeleteLine 			; delete the line
.834a					_EPCNoDelete:
.834a	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.834d	c9 80		cmp #$80			cmp 	#KWC_EOL
.834f	f0 0d		beq $835e			beq 	_EPCNoInsert
.8351	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8354	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8357	20 de 99	jsr $99de			jsr 	MemorySearch
.835a	18		clc				clc 								; insert at this point.
.835b	20 04 a9	jsr $a904			jsr 	MemoryInsertLine 			; insert the line
.835e					_EPCNoInsert:
.835e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835f					WarmStart:
.835f	a2 ff		ldx #$ff			ldx 	#$FF
.8361	9a		txs				txs
.8362	20 9f a8	jsr $a89f			jsr 	EXTInputLine 				; get line to lineBuffer
.8365	20 f8 9d	jsr $9df8			jsr 	TokeniseLine 				; tokenise the line
.8368	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.836b	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.836e	d0 17		bne $8387			bne 	_WSEditCode 				; if so,edit code.
.8370	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8373	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8375	85 30		sta $30				sta 	codePtr
.8377	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8379	85 31		sta $31				sta 	codePtr+1
.837b	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.837e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8380	f0 dd		beq $835f			beq 	WarmStart
.8382	20 90 89	jsr $8990			jsr 	RUNCodePointerLine 			; execute that line.
.8385	80 d8		bra $835f			bra 	WarmStart
.8387					_WSEditCode:
.8387	20 3a 83	jsr $833a			jsr 	EditProgramCode
.838a	20 f8 83	jsr $83f8			jsr 	ClearCommand
.838d	80 d0		bra $835f			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838f					AssembleCommand:
.838f	a2 00		ldx #$00			ldx 	#0
.8391	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger 		; start address
.8394	ad 08 04	lda $0408			lda 	NSMantissa0
.8397	8d 9e 04	sta $049e			sta 	AssemblerAddress
.839a	ad 10 04	lda $0410			lda 	NSMantissa1
.839d	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.83a0	20 08 a1	jsr $a108			jsr 	CheckComma
.83a3	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger 		; options
.83a6	ad 08 04	lda $0408			lda 	NSMantissa0
.83a9	8d a0 04	sta $04a0			sta 	AssemblerControl
.83ac	60		rts				rts
.83ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83ae					AssertCommand:
.83ae	a2 00		ldx #$00			ldx 	#0
.83b0	20 f6 98	jsr $98f6			jsr 	EvaluateInteger 			; the assert test
.83b3	20 af 99	jsr $99af			jsr 	NSMIsZero 					; exit if result is non zero.
.83b6	d0 05		bne $83bd			bne 	_ACExit
.83b8	a9 0a		lda #$0a		lda	#10
.83ba	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.83bd					_ACExit:
.83bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83be					CallCommand:
.83be	a2 00		ldx #$00			ldx 	#0
.83c0	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger
.83c3					_CCClear
.83c3	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c4	20 7f 99	jsr $997f			jsr 	NSMSetZero
.83c7	e0 04		cpx #$04			cpx 	#4
.83c9	d0 f8		bne $83c3			bne 	_CCClear
.83cb	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83cd					_CCCParam:
.83cd	b1 30		lda ($30),y			lda 	(codePtr),y
.83cf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83d1	d0 09		bne $83dc			bne 	_CCCRun6502
.83d3	c8		iny				iny 								; skip comma
.83d4	e8		inx				inx	 								; next level
.83d5	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d8	e0 03		cpx #$03			cpx 	#3
.83da	90 f1		bcc $83cd			bcc 	_CCCParam 					; done all 3 ?
.83dc					_CCCRun6502:
.83dc	5a		phy				phy 								; save position
.83dd	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83e0	85 37		sta $37				sta 	zTemp0+1
.83e2	ad 08 04	lda $0408			lda 	NSMantissa0
.83e5	85 36		sta $36				sta 	zTemp0
.83e7	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83ea	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ed	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83f0	20 f5 83	jsr $83f5			jsr 	_CCCZTemp0 					; call zTemp0
.83f3	7a		ply				ply 								; restore position and exit
.83f4	60		rts				rts
.83f5					_CCCZTemp0:
.83f5	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f8					ClearCommand:
.83f8	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83fa	85 36		sta $36				sta 	0+zTemp0
.83fc	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fe	85 37		sta $37				sta 	1+zTemp0
.8400					_ClearZeroLoop:
.8400	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8402	f0 24		beq $8428			beq 	_ClearZeroEnd
.8404	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8406	a9 00		lda #$00			lda 	#0
.8408					_ClearOneVariable:
.8408	91 36		sta ($36),y			sta 	(zTemp0),y
.840a	c8		iny				iny
.840b	c0 08		cpy #$08			cpy 	#8
.840d	d0 f9		bne $8408			bne 	_ClearOneVariable
.840f	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8411	b1 36		lda ($36),y			lda 	(zTemp0),y
.8413	c9 18		cmp #$18			cmp 	#NSTProcedure
.8415	d0 04		bne $841b			bne 	_ClearNotProcedure
.8417	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8419	91 36		sta ($36),y			sta 	(zTemp0),y
.841b					_ClearNotProcedure:
.841b	18		clc				clc 								; go to the next variable
.841c	b2 36		lda ($36)			lda 	(zTemp0)
.841e	65 36		adc $36				adc 	zTemp0
.8420	85 36		sta $36				sta 	zTemp0
.8422	90 dc		bcc $8400			bcc 	_ClearZeroLoop
.8424	e6 37		inc $37				inc 	zTemp0+1
.8426	80 d8		bra $8400			bra 	_ClearZeroLoop
.8428					_ClearZeroEnd:
.8428	18		clc				clc
.8429	a5 36		lda $36				lda 	zTemp0
.842b	69 01		adc #$01			adc 	#1
.842d	8d 8c 04	sta $048c			sta 	lowMemPtr
.8430	a5 37		lda $37				lda 	zTemp0+1
.8432	69 00		adc #$00			adc 	#0
.8434	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8437	20 98 9a	jsr $9a98			jsr 	StackReset
.843a	20 e7 a9	jsr $a9e7			jsr 	StringSystemInitialise
.843d	20 e7 8c	jsr $8ce7			jsr 	ProcedureScan
.8440	20 4c 89	jsr $894c			jsr 	Command_Restore
.8443	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8446	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8449	9c a0 04	stz $04a0			stz 	AssemblerControl
.844c	20 8e 96	jsr $968e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8450					Command_Data:
.8450	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8452	a2 80		ldx #$80			ldx 	#KWC_EOL
.8454	20 39 8d	jsr $8d39			jsr 	ScanForward
.8457	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8458					DimCommand:
.8458	b1 30		lda ($30),y			lda 	(codePtr),y
.845a	29 c0		and #$c0			and 	#$C0
.845c	c9 40		cmp #$40			cmp 	#$40
.845e	d0 7a		bne $84da			bne 	_DCSyntax
.8460	b1 30		lda ($30),y			lda 	(codePtr),y
.8462	18		clc				clc
.8463	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8465	85 3f		sta $3f				sta 	zaTemp+1
.8467	c8		iny				iny
.8468	b1 30		lda ($30),y			lda 	(codePtr),y
.846a	c8		iny				iny
.846b	85 3e		sta $3e				sta 	zaTemp
.846d	5a		phy				phy
.846e	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8470	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8472	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8474	c9 18		cmp #$18			cmp 	#NSTProcedure
.8476	f0 62		beq $84da			beq 	_DCSyntax
.8478	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.847a	29 04		and #$04			and 	#NSBIsArray
.847c	f0 64		beq $84e2			beq 	_DCType
.847e	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8480	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8482	d0 59		bne $84dd			bne 	_DCRedefine
.8484	7a		ply				ply
.8485	20 e5 84	jsr $84e5			jsr 	_DCGetSize 				; get array size, check it.
.8488	5a		phy				phy
.8489	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.848b	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.848d	7a		ply				ply 							; is there a second (e.g. ,x)
.848e	b1 30		lda ($30),y			lda 	(codePtr),y
.8490	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8492	d0 0a		bne $849e			bne 	_DCOneDimension
.8494	c8		iny				iny 							; skip comma
.8495	20 e5 84	jsr $84e5			jsr 	_DCGetSize 				; get 2nd array size
.8498	5a		phy				phy
.8499	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.849b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.849d	7a		ply				ply
.849e					_DCOneDimension:
.849e	5a		phy				phy 							; save position
.849f	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a3	aa		tax				tax
.84a4	c8		iny				iny
.84a5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a7	e8		inx				inx 							; bump them.
.84a8	1a		inc a				inc 	a
.84a9	20 82 a5	jsr $a582			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84ac	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84ae	29 e0		and #$e0			and 	#$E0
.84b0	d0 23		bne $84d5			bne 	_DCSize
.84b2	a0 02		ldy #$02			ldy 	#2 						; get base type
.84b4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84b6	20 f3 84	jsr $84f3			jsr 	ScaleByBaseType 		; scale by base type
.84b9	a5 36		lda $36				lda 	zTemp0
.84bb	a6 37		ldx $37				ldx 	zTemp0+1
.84bd	20 50 96	jsr $9650			jsr 	AllocateXABytes 		; allocate memory
.84c0	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c2	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c4	c8		iny				iny
.84c5	8a		txa				txa
.84c6	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c8	7a		ply				ply 							; get position back
.84c9	20 00 a1	jsr $a100			jsr 	CheckRightBracket 		; check )
.84cc	b1 30		lda ($30),y			lda 	(codePtr),y
.84ce	c8		iny				iny 							; consume in case
.84cf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d1	f0 85		beq $8458			beq 	DimCommand
.84d3	88		dey				dey 							; undo consume
.84d4	60		rts				rts
.84d5					_DCSize:
.84d5	a9 16		lda #$16		lda	#22
.84d7	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.84da					_DCSyntax:
.84da	4c e6 a6	jmp $a6e6			jmp 	SyntaxError
.84dd					_DCRedefine:
.84dd	a9 15		lda #$15		lda	#21
.84df	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.84e2					_DCType:
.84e2	4c f0 a6	jmp $a6f0			jmp 	TypeError
.84e5					_DCGetSize:
.84e5	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84e7	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger 	; get array dimension
.84ea	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84ec	f0 e7		beq $84d5			beq 	_DCSize
.84ee	c9 fe		cmp #$fe			cmp 	#254
.84f0	f0 e3		beq $84d5			beq 	_DCSize
.84f2	60		rts				rts
.84f3					ScaleByBaseType:
.84f3	29 10		and #$10			and 	#NSBIsString 			; is it string
.84f5	d0 19		bne $8510			bne 	_SBBTString
.84f7	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84f9	48		pha				pha
.84fa	a5 36		lda $36				lda 	zTemp0
.84fc	48		pha				pha
.84fd	06 36		asl $36				asl 	zTemp0 					; x 2
.84ff	26 37		rol $37				rol 	zTemp0+1
.8501	06 36		asl $36				asl 	zTemp0 					; x 4
.8503	26 37		rol $37				rol 	zTemp0+1
.8505	68		pla				pla 							; add stacked value = x 5
.8506	65 36		adc $36				adc 	zTemp0
.8508	85 36		sta $36				sta 	zTemp0
.850a	68		pla				pla
.850b	65 37		adc $37				adc 	zTemp0+1
.850d	85 37		sta $37				sta 	zTemp0+1
.850f	60		rts				rts
.8510					_SBBTString:
.8510	06 36		asl $36				asl 	zTemp0
.8512	26 37		rol $37				rol 	zTemp0+1
.8514	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8515					EndCommand:
.8515	4c 5f 83	jmp $835f			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8518					ForCommand:
.8518	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.851a	20 33 9a	jsr $9a33			jsr 	StackOpen
.851d	a2 00		ldx #$00			ldx 	#0
.851f	20 a1 94	jsr $94a1			jsr 	EvaluateTerm
.8522	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8525	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8527	d0 49		bne $8572			bne		_FCError
.8529	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.852b	20 10 a1	jsr $a110			jsr 	CheckNextA
.852e	e8		inx				inx
.852f	20 f6 98	jsr $98f6			jsr 	EvaluateInteger 			; <from> in +1
.8532	b1 30		lda ($30),y			lda 	(codePtr),y
.8534	c8		iny				iny 								; consume it
.8535	48		pha				pha 								; save on stack for later
.8536	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8538	f0 04		beq $853e			beq 	_FCNoSyntax
.853a	c9 b0		cmp #$b0			cmp 	#KWD_TO
.853c	d0 37		bne $8575			bne 	_FCSyntaxError
.853e					_FCNoSyntax:
.853e	e8		inx				inx
.853f	20 f6 98	jsr $98f6			jsr 	EvaluateInteger
.8542	20 77 9a	jsr $9a77			jsr 	STKSaveCodePosition 		; save loop back position
.8545	68		pla				pla 								; restore DOWNTO or TO
.8546	5a		phy				phy 								; save Y on the stack
.8547	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8549	f0 02		beq $854d			beq 	_FCNotDownTo
.854b	a9 02		lda #$02			lda 	#2
.854d					_FCNotDownTo:
.854d	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.854e	a0 10		ldy #$10			ldy 	#16
.8550	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8552	a0 06		ldy #$06			ldy 	#6
.8554	ad 08 04	lda $0408			lda 	NSMantissa0
.8557	91 34		sta ($34),y			sta 	(basicStack),y
.8559	ad 10 04	lda $0410			lda 	NSMantissa1
.855c	c8		iny				iny
.855d	91 34		sta ($34),y			sta 	(basicStack),y
.855f	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8561	a2 01		ldx #$01			ldx 	#1
.8563	20 78 85	jsr $8578			jsr 	FCIntegerToStack
.8566	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8568	a2 02		ldx #$02			ldx 	#2
.856a	20 78 85	jsr $8578			jsr 	FCIntegerToStack
.856d	20 98 85	jsr $8598			jsr 	CopyIndexToReference
.8570	7a		ply				ply 								; restore position
.8571	60		rts				rts
.8572					_FCError:
.8572	4c f0 a6	jmp $a6f0			jmp 	TypeError
.8575					_FCSyntaxError:
.8575	4c e6 a6	jmp $a6e6			jmp 	SyntaxError
.8578					FCIntegerToStack:
.8578	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.857b	10 03		bpl $8580			bpl	 	_FCNotNegative
.857d	20 34 99	jsr $9934			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8580					_FCNotNegative:
.8580	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8583	91 34		sta ($34),y			sta 	(basicStack),y
.8585	c8		iny				iny
.8586	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8589	91 34		sta ($34),y			sta 	(basicStack),y
.858b	c8		iny				iny
.858c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.858f	91 34		sta ($34),y			sta 	(basicStack),y
.8591	c8		iny				iny
.8592	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8595	91 34		sta ($34),y			sta 	(basicStack),y
.8597	60		rts				rts
.8598					CopyIndexToReference:
.8598	5a		phy				phy
.8599	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.859b	38		sec				sec 								; (because we copy from offset 8)
.859c	b1 34		lda ($34),y			lda 	(basicStack),y
.859e	e9 08		sbc #$08			sbc 	#8
.85a0	85 36		sta $36				sta 	zTemp0
.85a2	c8		iny				iny
.85a3	b1 34		lda ($34),y			lda 	(basicStack),y
.85a5	e9 00		sbc #$00			sbc 	#0
.85a7	85 37		sta $37				sta 	zTemp0+1
.85a9	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85ab	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85ad	b1 34		lda ($34),y			lda 	(basicStack),y
.85af	0a		asl a				asl 	a 							; into carry
.85b0	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b2	90 14		bcc $85c8			bcc 	_CITRNormal
.85b4	38		sec				sec
.85b5					_CITRNegative:
.85b5	a9 00		lda #$00			lda 	#0
.85b7	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85b9	91 36		sta ($36),y			sta 	(zTemp0),y
.85bb	c8		iny				iny
.85bc	ca		dex				dex
.85bd	d0 f6		bne $85b5			bne 	_CITRNegative
.85bf	88		dey				dey 								; look at MSB of mantissa
.85c0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c2	09 80		ora #$80			ora 	#$80
.85c4	91 36		sta ($36),y			sta 	(zTemp0),y
.85c6	7a		ply				ply
.85c7	60		rts				rts
.85c8					_CITRNormal:
.85c8	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85ca	91 36		sta ($36),y			sta 	(zTemp0),y
.85cc	c8		iny				iny
.85cd	ca		dex				dex
.85ce	d0 f8		bne $85c8			bne 	_CITRNormal
.85d0	7a		ply				ply 								; and exit.
.85d1	60		rts				rts
.85d2					NextCommand:
.85d2	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85d4	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85d6	20 5f 9a	jsr $9a5f			jsr 	StackCheckFrame
.85d9	5a		phy				phy
.85da	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85dc	b1 34		lda ($34),y			lda 	(basicStack),y
.85de	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e0	30 02		bmi $85e4			bmi 	_NCStepNeg
.85e2	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85e4					_NCStepNeg:
.85e4	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85e6	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85e8	18		clc				clc
.85e9					_NCBump:
.85e9	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85eb	91 34		sta ($34),y			sta 	(basicStack),y
.85ed	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85ef	c8		iny				iny 								; next byte
.85f0	ca		dex				dex 								; do four times
.85f1	d0 f6		bne $85e9			bne 	_NCBump
.85f3	20 98 85	jsr $8598			jsr		CopyIndexToReference		; copy it to the reference variable.
.85f6	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85f8	b1 34		lda ($34),y			lda 	(basicStack),y
.85fa	0a		asl a				asl 	a 							; sign bit to carry
.85fb	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85fd	85 38		sta $38				sta 	zTemp1
.85ff	90 02		bcc $8603			bcc 	_NCCompRev 					; use if step is +ve
.8601	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8603					_NCCompRev:
.8603	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8605	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8607	85 39		sta $39				sta 	zTemp1+1
.8609	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.860b	38		sec				sec
.860c					_NCCompare:
.860c	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.860e	b1 34		lda ($34),y			lda 	(basicStack),y
.8610	a4 39		ldy $39				ldy 	zTemp1+1
.8612	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8614	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8616	e6 39		inc $39				inc 	zTemp1+1
.8618	ca		dex				dex 								; do it 4 times.
.8619	d0 f1		bne $860c			bne 	_NCCompare
.861b	50 02		bvc $861f			bvc 	_NCNoOverflow 				; convert to signed comparison
.861d	49 80		eor #$80			eor 	#$80
.861f					_NCNoOverflow:
.861f	7a		ply				ply 								; restore Y position
.8620	0a		asl a				asl 	a 							; is bit 7 set.
.8621	90 04		bcc $8627			bcc 	_NCLoopback 				; if no , >= so loop back
.8623	20 51 9a	jsr $9a51			jsr 	StackClose 					; exit the loop
.8626	60		rts				rts
.8627					_NCLoopBack:
.8627	20 88 9a	jsr $9a88			jsr 	STKLoadCodePosition 		; loop back
.862a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.862b					Command_GOSUB:
.862b	a2 00		ldx #$00			ldx 	#0
.862d	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8630	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8632	20 33 9a	jsr $9a33			jsr 	StackOpen 					; create frame
.8635	20 77 9a	jsr $9a77			jsr 	STKSaveCodePosition 		; save current position
.8638	4c 4e 86	jmp $864e			jmp 	GotoStackX
.863b					Command_RETURN:
.863b	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.863d	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.863f	20 5f 9a	jsr $9a5f			jsr 	StackCheckFrame
.8642	20 88 9a	jsr $9a88			jsr 	STKLoadCodePosition 		; restore code position
.8645	20 51 9a	jsr $9a51			jsr 	StackClose
.8648	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8649					GotoCommand:
.8649	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.864b	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger
.864e					GotoStackX:
.864e	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8651	48		pha				pha 								; it is slightly inefficient, just in cases.
.8652	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8655	fa		plx				plx
.8656	20 de 99	jsr $99de			jsr 	MemorySearch 				; transfer to line number AX.
.8659	90 05		bcc $8660			bcc 	_GotoError 					; not found, off end.
.865b	d0 03		bne $8660			bne 	_GotoError 					; not found exactly
.865d	4c 89 89	jmp $8989			jmp 	RunNewLine 					; and go straight to new line code.
.8660					_GotoError:
.8660	a9 0d		lda #$0d		lda	#13
.8662	4c c7 8d	jmp $8dc7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8665					IfCommand:
.8665	a2 00		ldx #$00			ldx 	#0 							; If what.
.8667	20 d3 98	jsr $98d3			jsr 	EvaluateNumber
.866a	b1 30		lda ($30),y			lda 	(codePtr),y
.866c	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.866e	d0 0a		bne $867a			bne 	_IFStructured
.8670	c8		iny				iny 								; consume THEN
.8671	20 af 99	jsr $99af			jsr 	NSMIsZero 					; is it zero
.8674	f0 01		beq $8677			beq 	_IfFail 					; if fail, go to next line
.8676	60		rts				rts 								; if THEN just continue
.8677					_IfFail:
.8677	4c ee 89	jmp $89ee			jmp 	EOLCommand
.867a					_IfStructured:
.867a	20 af 99	jsr $99af			jsr 	NSMIsZero 					; is it zero
.867d	d0 07		bne $8686			bne 	_IfExit 					; if not, then continue normally.
.867f	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8681	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8683	20 39 8d	jsr $8d39			jsr 	ScanForward 				; and run from there/
.8686					_IfExit:
.8686	60		rts				rts
.8687					ElseCode:
.8687	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8689	aa		tax				tax 								; so just go to the structure exit
.868a	20 39 8d	jsr $8d39			jsr 	ScanForward
.868d	60		rts				rts
.868e					EndIf:
.868e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.868f					LetCommand:
.868f	a2 00		ldx #$00			ldx 	#0
.8691	b1 30		lda ($30),y			lda 	(codePtr),y
.8693	c9 10		cmp #$10			cmp 	#KWD_AT
.8695	d0 16		bne $86ad			bne 	_LCStandard
.8697	c8		iny				iny 								; skip equal
.8698	20 a1 94	jsr $94a1			jsr 	EvaluateTerm 				; get a number
.869b	20 e5 92	jsr $92e5			jsr 	Dereference 				; dereference it
.869e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a1	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86a3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86a6	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86a8	d0 10		bne $86ba			bne 	_LCMain
.86aa	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; was a reference before.
.86ad					_LCStandard:
.86ad	ad b8 91	lda $91b8			lda 	PrecedenceLevel+"*"			; precedence > this
.86b0	20 d2 91	jsr $91d2			jsr 	EvaluateExpressionAtPrecedence
.86b3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86b6	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86b8	f0 0e		beq $86c8			beq 	_LetGoProc 					; it's a procedure call.
.86ba					_LCMain:
.86ba	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86bc	20 10 a1	jsr $a110			jsr 	CheckNextA
.86bf	e8		inx				inx 								; RHS
.86c0	20 ca 98	jsr $98ca			jsr 	EvaluateValue
.86c3	ca		dex				dex
.86c4	20 cb 86	jsr $86cb			jsr 	AssignVariable
.86c7	60		rts				rts
.86c8					_LetGoProc:
.86c8	4c 64 88	jmp $8864			jmp 	CallProcedure
.86cb					AssignVariable:
.86cb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86ce	48		pha				pha 								; save a copy
.86cf	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d2	29 10		and #$10			and 	#NSBIsString
.86d4	d0 0b		bne $86e1			bne 	_ASError
.86d6	68		pla				pla 								; get back
.86d7	29 10		and #$10			and 	#NSBIsString 				; check type
.86d9	d0 03		bne $86de			bne 	_ASString
.86db	4c 0d 92	jmp $920d			jmp 	AssignNumber
.86de					_ASString:
.86de	4c 7b 92	jmp $927b			jmp 	AssignString
.86e1					_ASError:
.86e1	4c f0 a6	jmp $a6f0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e4					Command_List:
.86e4	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86e7	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86ea	a9 ff		lda #$ff			lda 	#$FF
.86ec	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86ef	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86f2	b1 30		lda ($30),y			lda 	(codePtr),y
.86f4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f6	f0 1e		beq $8716			beq 	_CLSecond
.86f8	20 74 87	jsr $8774			jsr 	CLIsDigit 					; if not digit, list all
.86fb	b0 24		bcs $8721			bcs 	_CLStart
.86fd	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86ff	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger
.8702	b1 30		lda ($30),y			lda 	(codePtr),y
.8704	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8706	f0 0e		beq $8716			beq 	_CLSecond 					; if so go get it
.8708	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.870b	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.870e	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8711	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8714	80 0b		bra $8721			bra 	_CLStart
.8716					_CLSecond:
.8716	c8		iny				iny 								; consume comma
.8717	20 74 87	jsr $8774			jsr 	CLIsDigit 					; digit found
.871a	b0 05		bcs $8721			bcs 	_CLStart 					; if not, continue listing
.871c	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.871e	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger
.8721					_CLStart
.8721	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8723	85 30		sta $30				sta 	codePtr
.8725	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8727	85 31		sta $31				sta 	codePtr+1
.8729					_CLLoop:
.8729	20 ca a8	jsr $a8ca			jsr 	EXTBreakCheck 				; break check
.872c	f0 30		beq $875e			beq 	_CLExit
.872e	b2 30		lda ($30)			lda 	(codePtr)
.8730	f0 2c		beq $875e			beq 	_CLExit
.8732	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8734	20 61 87	jsr $8761			jsr 	CLCompareLineNo
.8737	90 18		bcc $8751			bcc 	_CLNext
.8739	a2 07		ldx #$07			ldx 	#7
.873b	20 61 87	jsr $8761			jsr 	CLCompareLineNo
.873e	f0 02		beq $8742			beq 	_CLDoThisOne
.8740	b0 0f		bcs $8751			bcs 	_CLNext
.8742					_CLDoThisOne:
.8742	20 95 8b	jsr $8b95			jsr 	ListConvertLine 			; convert line into token Buffer
.8745	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8747	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8749	20 20 8e	jsr $8e20			jsr 	PrintStringXA
.874c	a9 0d		lda #$0d			lda 	#13 						; new line
.874e	20 89 a8	jsr $a889			jsr 	EXTPrintCharacter
.8751					_CLNext:
.8751	18		clc				clc
.8752	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8754	65 30		adc $30				adc 	codePtr
.8756	85 30		sta $30				sta 	codePtr
.8758	90 02		bcc $875c			bcc 	_CREExit
.875a	e6 31		inc $31				inc 	codePtr+1
.875c					_CREExit:
.875c	80 cb		bra $8729			bra 	_CLLoop
.875e					_CLExit:
.875e	4c 5f 83	jmp $835f			jmp 	WarmStart
.8761					CLCompareLineNo:
.8761	38		sec				sec
.8762	a0 01		ldy #$01			ldy 	#1
.8764	b1 30		lda ($30),y			lda 	(codePtr),y
.8766	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8769	85 36		sta $36				sta 	zTemp0
.876b	c8		iny				iny
.876c	b1 30		lda ($30),y			lda 	(codePtr),y
.876e	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8771	05 36		ora $36				ora 	zTemp0
.8773	60		rts				rts
.8774					CLIsDigit:
.8774	b1 30		lda ($30),y			lda 	(codePtr),y
.8776	c9 30		cmp #$30			cmp 	#"0"
.8778	90 03		bcc $877d			bcc	 	_CLIDExitFalse
.877a	c9 3a		cmp #$3a			cmp 	#"9"+1
.877c	60		rts				rts
.877d					_CLIDExitFalse:
.877d	38		sec				sec
.877e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.877f					Command_LOCAL:
.877f	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8781	20 8d 87	jsr $878d			jsr 	LocaliseNextTerm 			; convert term to a local.
.8784	b1 30		lda ($30),y			lda 	(codePtr),y
.8786	c8		iny				iny
.8787	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8789	f0 f4		beq $877f			beq 	Command_LOCAL
.878b	88		dey				dey 								; unpick pre-get
.878c	60		rts				rts
.878d					LocaliseNextTerm:
.878d	20 a1 94	jsr $94a1			jsr 	EvaluateTerm 				; evaluate the term
.8790	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8793	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8795	f0 69		beq $8800			beq		_LNTError
.8797	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.879a	85 36		sta $36				sta 	zTemp0
.879c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.879f	85 37		sta $37				sta  	zTemp0+1
.87a1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87a4	29 10		and #$10			and 	#NSBIsString
.87a6	d0 22		bne $87ca			bne 	_LNTPushString
.87a8	5a		phy				phy
.87a9	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87ab					_LNTPushNumLoop:
.87ab	b1 36		lda ($36),y			lda		(zTemp0),y
.87ad	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87b0	a9 00		lda #$00			lda 	#0
.87b2	91 36		sta ($36),y			sta 	(zTemp0),y
.87b4	c8		iny				iny
.87b5	c0 05		cpy #$05			cpy 	#5
.87b7	d0 f2		bne $87ab			bne 	_LNTPushNumLoop
.87b9	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87bb	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87be	a5 37		lda $37				lda 	zTemp0+1
.87c0	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87c3	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87c5	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87c8	7a		ply				ply
.87c9	60		rts				rts
.87ca					_LNTPushString:
.87ca	5a		phy				phy
.87cb	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87cd	85 38		sta $38				sta 	zTemp1
.87cf	a0 01		ldy #$01			ldy 	#1
.87d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d3	85 39		sta $39				sta 	zTemp1+1
.87d5	a0 00		ldy #$00			ldy 	#0 							; output string
.87d7	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87d9	f0 0a		beq $87e5			beq 	_LNTStringOut
.87db					_LNTPushStrLoop:
.87db	b1 38		lda ($38),y			lda 	(zTemp1),y
.87dd	f0 06		beq $87e5			beq 	_LNTStringOut
.87df	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87e2	c8		iny				iny
.87e3	80 f6		bra $87db			bra 	_LNTPushStrLoop
.87e5					_LNTStringOut:
.87e5	98		tya				tya									; output length
.87e6	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87e9	a9 00		lda #$00			lda 	#0 							; clear original string.
.87eb	92 38		sta ($38)			sta 	(zTemp1)
.87ed	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87f0	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87f3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f6	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87f9	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87fb	20 11 9a	jsr $9a11			jsr 	StackPushByte
.87fe	7a		ply				ply
.87ff	60		rts				rts
.8800					_LNTError:
.8800	4c e6 a6	jmp $a6e6			jmp 	SyntaxError
.a0a7					LocalPopValue:
.a0a7	20 2a 9a	jsr $9a2a			jsr 	StackPopByte
.a0aa	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a0ac	d0 17		bne $a0c5			bne 	_LPVString
.a0ae	20 2a 9a	jsr $9a2a			jsr 	StackPopByte 				; address
.a0b1	85 37		sta $37				sta 	zTemp0+1
.a0b3	20 2a 9a	jsr $9a2a			jsr 	StackPopByte
.a0b6	85 36		sta $36				sta 	zTemp0
.a0b8	5a		phy				phy
.a0b9	a0 04		ldy #$04			ldy 	#4 							; copy back
.a0bb					_LPVNumberCopy:
.a0bb	20 2a 9a	jsr $9a2a			jsr 	StackPopByte
.a0be	91 36		sta ($36),y			sta 	(zTemp0),y
.a0c0	88		dey				dey
.a0c1	10 f8		bpl $a0bb			bpl 	_LPVNumberCopy
.a0c3	7a		ply				ply 								; and complete
.a0c4	60		rts				rts
.a0c5					_LPVString:
.a0c5	20 2a 9a	jsr $9a2a			jsr 	StackPopByte 				; address of record => zTemp0
.a0c8	85 37		sta $37				sta 	zTemp0+1
.a0ca	20 2a 9a	jsr $9a2a			jsr 	StackPopByte
.a0cd	85 36		sta $36				sta 	zTemp0
.a0cf	5a		phy				phy
.a0d0	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a0d2	85 38		sta $38				sta 	zTemp1
.a0d4	a0 01		ldy #$01			ldy 	#1
.a0d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0d8	85 39		sta $39				sta 	zTemp1+1
.a0da	20 2a 9a	jsr $9a2a			jsr 	StackPopByte 				; # to get => y
.a0dd	a8		tay				tay
.a0de	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a0e0	f0 0e		beq $a0f0			beq 	_LPVStringCopied
.a0e2	a9 00		lda #$00			lda 	#0 							; NULL on end
.a0e4	91 38		sta ($38),y			sta 	(zTemp1),y
.a0e6					_LPVStringCopy:
.a0e6	88		dey				dey
.a0e7	30 07		bmi $a0f0			bmi 	_LPVStringCopied
.a0e9	20 2a 9a	jsr $9a2a			jsr 	StackPopByte
.a0ec	91 38		sta ($38),y			sta 	(zTemp1),y
.a0ee	80 f6		bra $a0e6			bra 	_LPVStringCopy
.a0f0					_LPVStringCopied:
.a0f0	fa		plx				plx
.a0f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8803					NewCommand:
.8803	20 bc 99	jsr $99bc			jsr 	MemoryNew
.8806	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8809	20 f8 83	jsr $83f8			jsr 	ClearCommand 				; clear everything.
.880c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.880d					Command_Print:
.880d	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.880e					_CPLoop:
.880e	08		php				php 								; save last action flag
.880f	b1 30		lda ($30),y			lda 	(codePtr),y
.8811	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8813	f0 46		beq $885b			beq 	_CPExit
.8815	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8817	f0 42		beq $885b			beq 	_CPExit
.8819	68		pla				pla 								; throw last action flag
.881a	b1 30		lda ($30),y			lda 	(codePtr),y
.881c	c8		iny				iny
.881d	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.881f	f0 37		beq $8858			beq 	_CPContinueWithSameLine
.8821	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8823	f0 2e		beq $8853			beq 	_CPTab
.8825	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8827	f0 26		beq $884f			beq 	_CPNewLine
.8829	88		dey				dey 								; undo the get.
.882a	a2 00		ldx #$00			ldx 	#0
.882c	20 ca 98	jsr $98ca			jsr 	EvaluateValue 				; get a value into slot 0
.882f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8832	29 10		and #$10			and 	#NSBIsString
.8834	f0 0b		beq $8841			beq 	_CPNumber
.8836	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8839	ad 08 04	lda $0408			lda 	NSMantissa0
.883c	20 20 8e	jsr $8e20			jsr 	PrintStringXA
.883f	80 cc		bra $880d			bra 	Command_Print 				; loop round clearing carry so NL if end
.8841					_CPNumber:
.8841	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8843	20 a0 97	jsr $97a0			jsr 	ConvertNumberToString 		; convert to string
.8846	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8848	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.884a	20 20 8e	jsr $8e20			jsr 	PrintStringXA
.884d	80 be		bra $880d			bra 	Command_Print 				; loop round clearing carry so NL if end
.884f					_CPNewLine:
.884f	a9 0d		lda #$0d			lda 	#13
.8851	80 02		bra $8855			bra 	_CPPrintChar
.8853					_CPTab:
.8853	a9 09		lda #$09			lda 	#9 							; print TAB
.8855					_CPPrintChar:
.8855	20 89 a8	jsr $a889			jsr 	EXTPrintCharacter
.8858					_CPContinueWithSameLine:
.8858	38		sec				sec 								; loop round with carry set, which
.8859	80 b3		bra $880e			bra 	_CPLoop 					; will inhibit final CR
.885b					_CPExit:
.885b	28		plp				plp 								; get last action flag
.885c	b0 05		bcs $8863			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.885e	a9 0d		lda #$0d			lda 	#13 						; print new line
.8860	20 89 a8	jsr $a889			jsr 	EXTPrintCharacter
.8863					_CPExit2:
.8863	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8864					CallProcedure:
.8864	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8866	b1 30		lda ($30),y			lda 	(codePtr),y
.8868	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.886a	f0 0c		beq $8878			beq 	_CPEndParam
.886c					_CPParamLoop:
.886c	20 d0 91	jsr $91d0			jsr 	EvaluateExpression 			; get parameter onto stack
.886f	e8		inx				inx 								; bump next stack
.8870	b1 30		lda ($30),y			lda 	(codePtr),y
.8872	c8		iny				iny
.8873	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8875	f0 f5		beq $886c			beq 	_CPParamLoop
.8877	88		dey				dey 								; unpick.
.8878					_CPEndParam:
.8878	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.887b	c8		iny				iny									; skip right bracket
.887c	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.887e	20 33 9a	jsr $9a33			jsr 	StackOpen
.8881	20 77 9a	jsr $9a77			jsr 	STKSaveCodePosition 		; save loop position
.8884	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8887	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8889	ad 10 04	lda $0410			lda 	NSMantissa1
.888c	85 37		sta $37				sta 	zTemp0+1
.888e	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8890	b2 36		lda ($36)			lda 	(zTemp0)
.8892	85 30		sta $30				sta 	safePtr
.8894	b1 36		lda ($36),y			lda 	(zTemp0),y
.8896	85 31		sta $31				sta 	safePtr+1
.8898	c8		iny				iny
.8899	b1 36		lda ($36),y			lda 	(zTemp0),y
.889b	85 32		sta $32				sta 	safePtr+2
.889d	c8		iny				iny
.889e	b1 36		lda ($36),y			lda 	(zTemp0),y
.88a0	85 33		sta $33				sta 	safePtr+3
.88a2	c8		iny				iny 								; get Y offset -> Y
.88a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.88a5	a8		tay				tay
.88a6	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88a8	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88ab	f0 13		beq $88c0			beq 	_ParamExit 					; if so, exit.
.88ad					_ParamExtract:
.88ad	ca		dex				dex 								; put a local term on the level before
.88ae	20 8d 87	jsr $878d			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88b1	20 cb 86	jsr $86cb			jsr 	AssignVariable 				; assign stacked value to the variable.
.88b4	e8		inx				inx 								; advance to next parameter to do.
.88b5	e8		inx				inx
.88b6	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.88b9	f0 05		beq $88c0			beq 	_ParamExit
.88bb	20 08 a1	jsr $a108			jsr 	CheckComma 					; comma seperating parameters
.88be	80 ed		bra $88ad			bra 	_ParamExtract
.88c0					_ParamExit:
.88c0	20 00 a1	jsr $a100			jsr 	CheckRightBracket 			; check )
.88c3	60		rts				rts 								; and continue from here
.a0f2					Command_ENDPROC:
.a0f2	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a0f4	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a0f6	20 5f 9a	jsr $9a5f			jsr 	StackCheckFrame
.a0f9	20 88 9a	jsr $9a88			jsr 	STKLoadCodePosition 		; restore code position
.a0fc	20 51 9a	jsr $9a51			jsr 	StackClose
.a0ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.88c4					Command_Read:
.88c4	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.88c6	20 a1 94	jsr $94a1			jsr 	EvaluateTerm
.88c9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.88cc	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.88ce	f0 4a		beq $891a			beq 	_CRSyntax 					; check reference (bit 0)
.88d0	20 63 89	jsr $8963			jsr 	SwapDataCodePtrs 			; swap code and data
.88d3	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.88d6	d0 20		bne $88f8			bne 	_CRContinueData
.88d8					_CRKeepSearching:
.88d8	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.88da	aa		tax				tax
.88db	20 39 8d	jsr $8d39			jsr 	ScanForward
.88de	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.88e0	f0 16		beq $88f8			beq 	_CRHaveData 				; found it
.88e2	18		clc				clc
.88e3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88e5	65 30		adc $30				adc 	codePtr
.88e7	85 30		sta $30				sta 	codePtr
.88e9	90 02		bcc $88ed			bcc 	_CREExit
.88eb	e6 31		inc $31				inc 	codePtr+1
.88ed					_CREExit:
.88ed	a0 03		ldy #$03			ldy 	#3 							; start of line.
.88ef	b2 30		lda ($30)			lda 	(codePtr)
.88f1	d0 e5		bne $88d8			bne 	_CRKeepSearching
.88f3	a9 0b		lda #$0b		lda	#11
.88f5	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.88f8					_CRHaveData:
.88f8					_CRContinueData:
.88f8	a2 01		ldx #$01			ldx 	#1
.88fa	20 ca 98	jsr $98ca			jsr 	EvaluateValue 				; evaluate value into slot # 1
.88fd	ca		dex				dex
.88fe	20 cb 86	jsr $86cb			jsr		AssignVariable 				; do the assignment
.8901	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8904	b1 30		lda ($30),y			lda 	(codePtr),y
.8906	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8908	d0 04		bne $890e			bne 	_CRSwapBack
.890a	c8		iny				iny 								; consume comma
.890b	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.890e					_CRSwapBack:
.890e	20 63 89	jsr $8963			jsr 	SwapDataCodePtrs			; swap them back.
.8911	b1 30		lda ($30),y			lda 	(codePtr),y
.8913	c8		iny				iny
.8914	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8916	f0 ac		beq $88c4			beq 	Command_Read 				; if so go round again.
.8918	88		dey				dey 								; unpick get.
.8919	60		rts				rts
.891a					_CRSyntax:
.891a	4c e6 a6	jmp $a6e6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.891d					RemCommand:
.891d	b1 30		lda ($30),y			lda 	(codePtr),y
.891f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8921	d0 06		bne $8929			bne 	_RMExit
.8923	c8		iny				iny
.8924	98		tya				tya
.8925	38		sec				sec
.8926	71 30		adc ($30),y			adc 	(codePtr),y
.8928	a8		tay				tay
.8929					_RMExit:
.8929	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.892a					Command_REPEAT:
.892a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.892c	20 33 9a	jsr $9a33			jsr 	StackOpen
.892f	20 77 9a	jsr $9a77			jsr 	STKSaveCodePosition 		; save loop position
.8932	60		rts				rts
.8933					Command_UNTIL:
.8933	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8935	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8937	20 5f 9a	jsr $9a5f			jsr 	StackCheckFrame
.893a	a2 00		ldx #$00			ldx 	#0
.893c	20 d3 98	jsr $98d3			jsr 	EvaluateNumber 				; work out the number
.893f	20 af 99	jsr $99af			jsr 	NSMIsZero 					; check if zero
.8942	f0 04		beq $8948			beq 	_CULoopBack 				; if so keep looping
.8944	20 51 9a	jsr $9a51			jsr 	StackClose		 			; return
.8947	60		rts				rts
.8948					_CULoopBack:
.8948	20 88 9a	jsr $9a88			jsr 	STKLoadCodePosition 		; loop back
.894b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.894c					Command_Restore:
.894c	20 63 89	jsr $8963			jsr 	SwapDataCodePtrs 			; swap code and data
.894f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8951	85 30		sta $30				sta 	codePtr
.8953	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8955	85 31		sta $31				sta 	codePtr+1
.8957	20 63 89	jsr $8963			jsr 	SwapDataCodePtrs 			; put them back
.895a	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.895c	8d 9b 04	sta $049b			sta 	dataPointer+4
.895f	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8962	60		rts				rts
.8963					SwapDataCodePtrs:
.8963	da		phx				phx
.8964	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8966					_SDCPLoop:
.8966	b5 30		lda $30,x			lda 	safePtr,x
.8968	48		pha				pha
.8969	bd 97 04	lda $0497,x			lda 	dataPointer,x
.896c	95 30		sta $30,x			sta 	safePtr,x
.896e	68		pla				pla
.896f	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8972	ca		dex				dex
.8973	10 f1		bpl $8966			bpl 	_SDCPLoop
.8975	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8978	8c 9b 04	sty $049b			sty 	dataPointer+4
.897b	a8		tay				tay
.897c	fa		plx				plx
.897d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.897e					CommandRUN:
.897e	20 f8 83	jsr $83f8			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8981	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8983	85 30		sta $30				sta 	codePtr
.8985	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8987	85 31		sta $31				sta 	codePtr+1
.8989					RUNNewLine:
.8989	b2 30		lda ($30)			lda 	(codePtr)
.898b	f0 5e		beq $89eb			beq 	CRNoProgram         		; no then END.
.898d	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.898f	9a		txs				txs
.8990					RUNCodePointerLine:
.8990	a0 02		ldy #$02			ldy 	#2 							; start of program
.8992					_CRIncMainLoop:
.8992	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8995	d0 05		bne $899c			bne 	_CRNoBreakCheck
.8997	20 ca a8	jsr $a8ca			jsr 	EXTBreakCheck 				; break check
.899a	f0 4a		beq $89e6			beq 	_CRBreak
.899c					_CRNoBreakCheck:
.899c	c8		iny				iny
.899d					_CRMainLoop:
.899d	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89a0	b1 30		lda ($30),y			lda 	(codePtr),y
.89a2	10 10		bpl $89b4			bpl 	_CRNotKeyword
.89a4	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89a6	b0 04		bcs $89ac			bcs 	_CRIsKeyword
.89a8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.89aa	b0 34		bcs $89e0			bcs		_CRSyntaxError
.89ac					_CRIsKeyword:
.89ac	c8		iny				iny 								; consume command
.89ad	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.89ae	aa		tax				tax 								; put in X for vector jump
.89af	20 e3 89	jsr $89e3			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.89b2	80 e9		bra $899d			bra 	_CRMainLoop 				; and loop round
.89b4					_CRNotKeyword:
.89b4	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.89b6	f0 da		beq $8992			beq 	_CRIncMainLoop
.89b8	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.89ba	90 05		bcc $89c1			bcc 	_CRNotVariable
.89bc					_CRGoLet:
.89bc	20 8f 86	jsr $868f			jsr 	LetCommand
.89bf	80 dc		bra $899d			bra 	_CRMainLoop
.89c1					_CRNotVariable:
.89c1	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.89c3	f0 f7		beq $89bc			beq 	_CRGoLet
.89c5	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.89c7	f0 f3		beq $89bc			beq 	_CRGoLet
.89c9	c9 21		cmp #$21			cmp 	#KWD_PLING
.89cb	f0 ef		beq $89bc			beq 	_CRGoLet
.89cd	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.89cf	f0 09		beq $89da			beq 	_CRGoRem
.89d1	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.89d3	d0 0b		bne $89e0			bne 	_CRSyntaxError
.89d5	20 98 82	jsr $8298			jsr 	LabelHere
.89d8	80 c3		bra $899d			bra 	_CRMainLoop
.89da					_CRGoRem:
.89da	c8		iny				iny
.89db	20 1d 89	jsr $891d			jsr 	RemCommand
.89de	80 bd		bra $899d			bra 	_CRMainLoop
.89e0					_CRSyntaxError:
.89e0	4c e6 a6	jmp $a6e6			jmp 	SyntaxError
.89e3					_CRCallVector0:
.89e3	7c 8e 8a	jmp ($8a8e,x)			jmp 	(VectorSet0,x)
.89e6					_CRBreak:
.89e6	a9 01		lda #$01		lda	#1
.89e8	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.89eb					CRNoProgram:
.89eb	4c 15 85	jmp $8515			jmp 	EndCommand
.89ee					EOLCommand:
.89ee	18		clc				clc
.89ef	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89f1	65 30		adc $30				adc 	codePtr
.89f3	85 30		sta $30				sta 	codePtr
.89f5	90 02		bcc $89f9			bcc 	_CREExit
.89f7	e6 31		inc $31				inc 	codePtr+1
.89f9					_CREExit:
.89f9	80 8e		bra $8989			bra 	RunNewLine
.89fb					Shift1Command:
.89fb	b1 30		lda ($30),y			lda 	(codePtr),y
.89fd	c8		iny				iny
.89fe	0a		asl a				asl 	a
.89ff	aa		tax				tax
.8a00	7c f0 8a	jmp ($8af0,x)			jmp 	(VectorSet1,x)
.8a03					Shift2Command:
.8a03	b1 30		lda ($30),y			lda 	(codePtr),y
.8a05	c8		iny				iny
.8a06	0a		asl a				asl 	a
.8a07	aa		tax				tax
.8a08	7c 08 8b	jmp ($8b08,x)			jmp 	(VectorSet2,x)
.8a0b					Unused1:
.8a0b					Unused2:
.8a0b					Unused3:
.8a0b					Unused4:
.8a0b	4c e6 a6	jmp $a6e6			jmp 	SyntaxError
>8a0e							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a0e					VectorSetPunc:
>8a0e	71 8f					.word	ShiftLeft                        ; $00 <<
>8a10	6b 8e					.word	BinaryCompareLessEqual           ; $01 <=
>8a12	61 8e					.word	BinaryCompareNotEqual            ; $02 <>
>8a14	e6 a6					.word	SyntaxError                      ; $03 !!3
>8a16	e6 a6					.word	SyntaxError                      ; $04 ><
>8a18	75 8e					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a1a	74 8f					.word	ShiftRight                       ; $06 >>
>8a1c	e6 a6					.word	SyntaxError                      ; $07 !!7
>8a1e	e6 a6					.word	SyntaxError                      ; $08 !!8
>8a20	e6 a6					.word	SyntaxError                      ; $09 !!9
>8a22	e6 a6					.word	SyntaxError                      ; $0a !!10
>8a24	e6 a6					.word	SyntaxError                      ; $0b !!11
>8a26	e6 a6					.word	SyntaxError                      ; $0c !!12
>8a28	e6 a6					.word	SyntaxError                      ; $0d !!13
>8a2a	e6 a6					.word	SyntaxError                      ; $0e !!14
>8a2c	e6 a6					.word	SyntaxError                      ; $0f !!15
>8a2e	e6 a6					.word	SyntaxError                      ; $10 @
>8a30	e6 a6					.word	SyntaxError                      ; $11 !!17
>8a32	e6 a6					.word	SyntaxError                      ; $12 !!18
>8a34	e6 a6					.word	SyntaxError                      ; $13 [
>8a36	19 a1					.word	IntegerDivide                    ; $14 \
>8a38	e6 a6					.word	SyntaxError                      ; $15 ]
>8a3a	fa 90					.word	EorInteger                       ; $16 ^
>8a3c	e6 a6					.word	SyntaxError                      ; $17 _
>8a3e	e6 a6					.word	SyntaxError                      ; $18 `
>8a40	e6 a6					.word	SyntaxError                      ; $19 !!25
>8a42	e6 a6					.word	SyntaxError                      ; $1a !!26
>8a44	e6 a6					.word	SyntaxError                      ; $1b {
>8a46	b4 90					.word	OraInteger                       ; $1c |
>8a48	e6 a6					.word	SyntaxError                      ; $1d }
>8a4a	e6 a6					.word	SyntaxError                      ; $1e ~
>8a4c	e6 a6					.word	SyntaxError                      ; $1f [7m<7F>[m
>8a4e	e6 a6					.word	SyntaxError                      ; $20
>8a50	40 91					.word	WordIndirect                     ; $21 !
>8a52	e6 a6					.word	SyntaxError                      ; $22 "
>8a54	e6 a6					.word	SyntaxError                      ; $23 #
>8a56	e6 a6					.word	SyntaxError                      ; $24 $
>8a58	66 a1					.word	IntegerModulus                   ; $25 %
>8a5a	6e 90					.word	AndInteger                       ; $26 &
>8a5c	e6 a6					.word	SyntaxError                      ; $27 '
>8a5e	e6 a6					.word	SyntaxError                      ; $28 (
>8a60	e6 a6					.word	SyntaxError                      ; $29 )
>8a62	db a1					.word	MulInteger                       ; $2a *
>8a64	08 90					.word	AddInteger                       ; $2b +
>8a66	e6 a6					.word	SyntaxError                      ; $2c ,
>8a68	43 90					.word	SubInteger                       ; $2d -
>8a6a	e6 a6					.word	SyntaxError                      ; $2e .
>8a6c	72 a3					.word	FDivideCommand                   ; $2f /
>8a6e	e6 a6					.word	SyntaxError                      ; $30 0
>8a70	e6 a6					.word	SyntaxError                      ; $31 1
>8a72	e6 a6					.word	SyntaxError                      ; $32 2
>8a74	e6 a6					.word	SyntaxError                      ; $33 3
>8a76	e6 a6					.word	SyntaxError                      ; $34 4
>8a78	e6 a6					.word	SyntaxError                      ; $35 5
>8a7a	e6 a6					.word	SyntaxError                      ; $36 6
>8a7c	e6 a6					.word	SyntaxError                      ; $37 7
>8a7e	e6 a6					.word	SyntaxError                      ; $38 8
>8a80	e6 a6					.word	SyntaxError                      ; $39 9
>8a82	e6 a6					.word	SyntaxError                      ; $3a :
>8a84	e6 a6					.word	SyntaxError                      ; $3b ;
>8a86	4d 8e					.word	BinaryCompareLess                ; $3c <
>8a88	43 8e					.word	BinaryCompareEqual               ; $3d =
>8a8a	57 8e					.word	BinaryCompareGreater             ; $3e >
>8a8c	67 91					.word	ByteIndirect                     ; $3f ?
.8a8e					VectorSet0:
>8a8e	ee 89					.word	EOLCommand                       ; $80 !0:EOF
>8a90	fb 89					.word	Shift1Command                    ; $81 !1:SH1
>8a92	03 8a					.word	Shift2Command                    ; $82 !2:SH2
>8a94	b8 a4					.word	AbsUnary                         ; $83 ABS(
>8a96	31 96					.word	AllocUnary                       ; $84 ALLOC(
>8a98	c8 a4					.word	AscUnary                         ; $85 ASC(
>8a9a	51 97					.word	ChrUnary                         ; $86 CHR$(
>8a9c	3f 8e					.word	UnaryFalse                       ; $87 FALSE
>8a9e	d5 a4					.word	FracUnary                        ; $88 FRAC(
>8aa0	eb a4					.word	IntUnary                         ; $89 INT(
>8aa2	41 a5					.word	IsValUnary                       ; $8a ISVAL(
>8aa4	2b 98					.word	Unary_Left                       ; $8b LEFT$(
>8aa6	fd a4					.word	LenUnary                         ; $8c LEN(
>8aa8	55 98					.word	Unary_Mid                        ; $8d MID$(
>8aaa	a1 96					.word	Unary_Not                        ; $8e NOT(
>8aac	b7 96					.word	Unary_Random                     ; $8f RANDOM(
>8aae	3b 98					.word	Unary_Right                      ; $90 RIGHT$(
>8ab0	d0 96					.word	Unary_Rnd                        ; $91 RND(
>8ab2	17 a5					.word	SgnUnary                         ; $92 SGN(
>8ab4	63 97					.word	SpcUnary                         ; $93 SPC(
>8ab6	7e 97					.word	Unary_Str                        ; $94 STR$(
>8ab8	33 8e					.word	UnaryTrue                        ; $95 TRUE
>8aba	37 a5					.word	ValUnary                         ; $96 VAL(
>8abc	18 85					.word	ForCommand                       ; $97 FOR
>8abe	65 86					.word	IfCommand                        ; $98 IF
>8ac0	0b 8a					.word	Unused1                          ; $99 PROC
>8ac2	2a 89					.word	Command_REPEAT                   ; $9a REPEAT
>8ac4	98 8d					.word	Command_WHILE                    ; $9b WHILE
>8ac6	8e 86					.word	EndIf                            ; $9c ENDIF
>8ac8	f2 a0					.word	Command_ENDPROC                  ; $9d ENDPROC
>8aca	d2 85					.word	NextCommand                      ; $9e NEXT
>8acc	0b 8a					.word	Unused4                          ; $9f THEN
>8ace	33 89					.word	Command_UNTIL                    ; $a0 UNTIL
>8ad0	b9 8d					.word	Command_WEND                     ; $a1 WEND
>8ad2	be 83					.word	CallCommand                      ; $a2 CALL
>8ad4	e6 a6					.word	SyntaxError                      ; $a3 CLS
>8ad6	50 84					.word	Command_Data                     ; $a4 DATA
>8ad8	58 84					.word	DimCommand                       ; $a5 DIM
>8ada	0b 8a					.word	Unused3                          ; $a6 DOWNTO
>8adc	87 86					.word	ElseCode                         ; $a7 ELSE
>8ade	2b 86					.word	Command_GOSUB                    ; $a8 GOSUB
>8ae0	49 86					.word	GotoCommand                      ; $a9 GOTO
>8ae2	8f 86					.word	LetCommand                       ; $aa LET
>8ae4	7f 87					.word	Command_LOCAL                    ; $ab LOCAL
>8ae6	0d 88					.word	Command_Print                    ; $ac PRINT
>8ae8	c4 88					.word	Command_Read                     ; $ad READ
>8aea	1d 89					.word	RemCommand                       ; $ae REM
>8aec	3b 86					.word	Command_RETURN                   ; $af RETURN
>8aee	0b 8a					.word	Unused2                          ; $b0 TO
.8af0					VectorSet1:
>8af0	e6 a6					.word	SyntaxError                      ; $80 !0:EOF
>8af2	e6 a6					.word	SyntaxError                      ; $81 !1:SH1
>8af4	e6 a6					.word	SyntaxError                      ; $82 !2:SH2
>8af6	8f 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8af8	ae 83					.word	AssertCommand                    ; $84 ASSERT
>8afa	f8 83					.word	ClearCommand                     ; $85 CLEAR
>8afc	15 85					.word	EndCommand                       ; $86 END
>8afe	e4 86					.word	Command_List                     ; $87 LIST
>8b00	03 88					.word	NewCommand                       ; $88 NEW
>8b02	4c 89					.word	Command_Restore                  ; $89 RESTORE
>8b04	7e 89					.word	CommandRUN                       ; $8a RUN
>8b06	90 8b					.word	StopCommand                      ; $8b STOP
.8b08					VectorSet2:
>8b08	e6 a6					.word	SyntaxError                      ; $80 !0:EOF
>8b0a	e6 a6					.word	SyntaxError                      ; $81 !1:SH1
>8b0c	e6 a6					.word	SyntaxError                      ; $82 !2:SH2
>8b0e	a5 a5					.word	Assemble_adc                     ; $83 ADC
>8b10	9d a5					.word	Assemble_and                     ; $84 AND
>8b12	b9 a5					.word	Assemble_asl                     ; $85 ASL
>8b14	23 a6					.word	Assemble_bcc                     ; $86 BCC
>8b16	27 a6					.word	Assemble_bcs                     ; $87 BCS
>8b18	2f a6					.word	Assemble_beq                     ; $88 BEQ
>8b1a	e6 a5					.word	Assemble_bit                     ; $89 BIT
>8b1c	17 a6					.word	Assemble_bmi                     ; $8a BMI
>8b1e	2b a6					.word	Assemble_bne                     ; $8b BNE
>8b20	13 a6					.word	Assemble_bpl                     ; $8c BPL
>8b22	33 a6					.word	Assemble_bra                     ; $8d BRA
>8b24	37 a6					.word	Assemble_brk                     ; $8e BRK
>8b26	1b a6					.word	Assemble_bvc                     ; $8f BVC
>8b28	1f a6					.word	Assemble_bvs                     ; $90 BVS
>8b2a	3f a6					.word	Assemble_clc                     ; $91 CLC
>8b2c	93 a6					.word	Assemble_cld                     ; $92 CLD
>8b2e	53 a6					.word	Assemble_cli                     ; $93 CLI
>8b30	83 a6					.word	Assemble_clv                     ; $94 CLV
>8b32	b1 a5					.word	Assemble_cmp                     ; $95 CMP
>8b34	fa a5					.word	Assemble_cpx                     ; $96 CPX
>8b36	f5 a5					.word	Assemble_cpy                     ; $97 CPY
>8b38	d7 a5					.word	Assemble_dec                     ; $98 DEC
>8b3a	8f a6					.word	Assemble_dex                     ; $99 DEX
>8b3c	6b a6					.word	Assemble_dey                     ; $9a DEY
>8b3e	a1 a5					.word	Assemble_eor                     ; $9b EOR
>8b40	dc a5					.word	Assemble_inc                     ; $9c INC
>8b42	9f a6					.word	Assemble_inx                     ; $9d INX
>8b44	8b a6					.word	Assemble_iny                     ; $9e INY
>8b46	0e a6					.word	Assemble_jmp                     ; $9f JMP
>8b48	09 a6					.word	Assemble_jsr                     ; $a0 JSR
>8b4a	ad a5					.word	Assemble_lda                     ; $a1 LDA
>8b4c	d2 a5					.word	Assemble_ldx                     ; $a2 LDX
>8b4e	f0 a5					.word	Assemble_ldy                     ; $a3 LDY
>8b50	c3 a5					.word	Assemble_lsr                     ; $a4 LSR
>8b52	a3 a6					.word	Assemble_nop                     ; $a5 NOP
>8b54	99 a5					.word	Assemble_ora                     ; $a6 ORA
>8b56	4f a6					.word	Assemble_pha                     ; $a7 PHA
>8b58	3b a6					.word	Assemble_php                     ; $a8 PHP
>8b5a	97 a6					.word	Assemble_phx                     ; $a9 PHX
>8b5c	57 a6					.word	Assemble_phy                     ; $aa PHY
>8b5e	5f a6					.word	Assemble_pla                     ; $ab PLA
>8b60	43 a6					.word	Assemble_plp                     ; $ac PLP
>8b62	ab a6					.word	Assemble_plx                     ; $ad PLX
>8b64	67 a6					.word	Assemble_ply                     ; $ae PLY
>8b66	be a5					.word	Assemble_rol                     ; $af ROL
>8b68	c8 a5					.word	Assemble_ror                     ; $b0 ROR
>8b6a	4b a6					.word	Assemble_rti                     ; $b1 RTI
>8b6c	5b a6					.word	Assemble_rts                     ; $b2 RTS
>8b6e	b5 a5					.word	Assemble_sbc                     ; $b3 SBC
>8b70	47 a6					.word	Assemble_sec                     ; $b4 SEC
>8b72	a7 a6					.word	Assemble_sed                     ; $b5 SED
>8b74	63 a6					.word	Assemble_sei                     ; $b6 SEI
>8b76	a9 a5					.word	Assemble_sta                     ; $b7 STA
>8b78	9b a6					.word	Assemble_stp                     ; $b8 STP
>8b7a	cd a5					.word	Assemble_stx                     ; $b9 STX
>8b7c	eb a5					.word	Assemble_sty                     ; $ba STY
>8b7e	e1 a5					.word	Assemble_stz                     ; $bb STZ
>8b80	7f a6					.word	Assemble_tax                     ; $bc TAX
>8b82	7b a6					.word	Assemble_tay                     ; $bd TAY
>8b84	04 a6					.word	Assemble_trb                     ; $be TRB
>8b86	ff a5					.word	Assemble_tsb                     ; $bf TSB
>8b88	87 a6					.word	Assemble_tsx                     ; $c0 TSX
>8b8a	6f a6					.word	Assemble_txa                     ; $c1 TXA
>8b8c	77 a6					.word	Assemble_txs                     ; $c2 TXS
>8b8e	73 a6					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8b90					StopCommand:
.8b90	a9 08		lda #$08		lda	#8
.8b92	4c c7 8d	jmp $8dc7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8b95					ListConvertLine:
.8b95	9c 9d 04	stz $049d			stz 	tbOffset
.8b98	9c a9 04	stz $04a9			stz 	tokenBuffer
.8b9b	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8b9d	b1 30		lda ($30),y			lda 	(codePtr),y
.8b9f	aa		tax				tax
.8ba0	88		dey				dey
.8ba1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba3	20 5c a2	jsr $a25c			jsr 	ConvertInt16
.8ba6	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8ba8	86 37		stx $37				stx 	zTemp0+1
.8baa	a0 00		ldy #$00			ldy 	#0
.8bac					_LCCopyNumber:
.8bac	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bae	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8bb1	c8		iny				iny
.8bb2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bb4	d0 f6		bne $8bac			bne 	_LCCopyNumber
.8bb6					_LCPadOut:
.8bb6	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8bb8	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8bbb	ad 9d 04	lda $049d			lda 	tbOffset
.8bbe	c9 06		cmp #$06			cmp 	#6
.8bc0	d0 f4		bne $8bb6			bne 	_LCPadOut
.8bc2	a0 03		ldy #$03			ldy 	#3 							; start position.
.8bc4					_LCMainLoop:
.8bc4	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8bc8	f0 17		beq $8be1			beq 	_LCExit
.8bca	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8bcc	90 14		bcc $8be2			bcc 	_LCDoubles
.8bce	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8bd0	90 20		bcc $8bf2			bcc 	_LCShiftPunc
.8bd2	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8bd4	90 2b		bcc $8c01			bcc 	_LCPunctuation
.8bd6	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8bd8	90 2d		bcc $8c07			bcc 	_LCIdentifiers
.8bda	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8bdc	90 49		bcc $8c27			bcc 	_LCTokens
.8bde	4c 82 8c	jmp $8c82			jmp 	_LCData 					; 254-5 are data objects
.8be1					_LCExit:
.8be1	60		rts				rts
.8be2					_LCDoubles:
.8be2	48		pha				pha
.8be3	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8be4	29 02		and #$02			and 	#2
.8be6	09 3c		ora #$3c			ora 	#60 						; make < >
.8be8	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8beb	68		pla				pla 								; restore, do lower bit
.8bec	29 03		and #$03			and 	#3
.8bee	09 3c		ora #$3c			ora 	#60
.8bf0	80 0f		bra $8c01			bra		_LCPunctuation 				; print, increment, loop
.8bf2					_LCShiftPunc:
.8bf2	aa		tax				tax 								; save in X
.8bf3	29 07		and #$07			and 	#7 							; lower 3 bits
.8bf5	f0 02		beq $8bf9			beq 	_LCNoAdd
.8bf7	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8bf9					_LCNoAdd:
.8bf9	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8bfb	90 02		bcc $8bff			bcc 	_LCNoAdd2
.8bfd	09 20		ora #$20			ora 	#32 						; adds $20
.8bff					_LCNoAdd2:
.8bff	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8c01					_LCPunctuation:
.8c01	c8		iny				iny 								; consume character
.8c02	20 ae 8c	jsr $8cae			jsr 	LCLWrite 					; write it out.
.8c05	80 bd		bra $8bc4			bra 	_LCMainLoop 				; go round again.
.8c07					_LCIdentifiers:
.8c07	18		clc				clc 								; convert to physical address
.8c08	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c0a	85 37		sta $37				sta 	zTemp0+1
.8c0c	c8		iny				iny
.8c0d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c0f	85 36		sta $36				sta 	zTemp0
.8c11	c8		iny				iny
.8c12	5a		phy				phy 								; save position
.8c13	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8c15					_LCOutIdentifier:
.8c15	c8		iny				iny
.8c16	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c18	29 7f		and #$7f			and 	#$7F
.8c1a	20 dc 8c	jsr $8cdc			jsr 	LCLLowerCase
.8c1d	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8c20	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8c22	10 f1		bpl $8c15			bpl 	_LCOutIdentifier
.8c24	7a		ply				ply 								; restore position
.8c25	80 9d		bra $8bc4			bra 	_LCMainLoop
.8c27					_LCTokens:
.8c27	aa		tax				tax 								; token in X
.8c28	a9 ac		lda #$ac			lda 	#((KeywordSet2) & $FF)
.8c2a	85 36		sta $36				sta 	0+zTemp0
.8c2c	a9 9c		lda #$9c			lda 	#((KeywordSet2) >> 8)
.8c2e	85 37		sta $37				sta 	1+zTemp0
.8c30	e0 82		cpx #$82			cpx 	#$82
.8c32	f0 16		beq $8c4a			beq 	_LCUseShift
.8c34	a9 68		lda #$68			lda 	#((KeywordSet1) & $FF)
.8c36	85 36		sta $36				sta 	0+zTemp0
.8c38	a9 9c		lda #$9c			lda 	#((KeywordSet1) >> 8)
.8c3a	85 37		sta $37				sta 	1+zTemp0
.8c3c	e0 81		cpx #$81			cpx 	#$81
.8c3e	f0 0a		beq $8c4a			beq 	_LCUseShift
.8c40	a9 36		lda #$36			lda 	#((KeywordSet0) & $FF)
.8c42	85 36		sta $36				sta 	0+zTemp0
.8c44	a9 9b		lda #$9b			lda 	#((KeywordSet0) >> 8)
.8c46	85 37		sta $37				sta 	1+zTemp0
.8c48	80 01		bra $8c4b			bra 	_LCNoShift
.8c4a					_LCUseShift:
.8c4a	c8		iny				iny
.8c4b					_LCNoShift:
.8c4b	20 bd 8c	jsr $8cbd			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8c4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c50	aa		tax				tax 								; into X
.8c51					_LCFindText:
.8c51	ca		dex				dex
.8c52	10 0e		bpl $8c62			bpl 	_LCFoundText 				; found text.
.8c54	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8c56	1a		inc a				inc 	a 							; one extra for size
.8c57	38		sec				sec 								; one extra for checksum
.8c58	65 36		adc $36				adc 	zTemp0 						; go to next token
.8c5a	85 36		sta $36				sta 	zTemp0
.8c5c	90 f3		bcc $8c51			bcc 	_LCFindText
.8c5e	e6 37		inc $37				inc 	zTemp0+1
.8c60	80 ef		bra $8c51			bra 	_LCFindText
.8c62					_LCFoundText:
.8c62	5a		phy				phy 								; save List position
.8c63	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8c65	aa		tax				tax
.8c66	a0 02		ldy #$02			ldy 	#2
.8c68					_LCCopyToken:
.8c68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c6a	20 dc 8c	jsr $8cdc			jsr 	LCLLowerCase
.8c6d	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8c70	c8		iny				iny
.8c71	ca		dex				dex
.8c72	d0 f4		bne $8c68			bne 	_LCCopyToken
.8c74	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8c76	f0 05		beq $8c7d			beq 	_LCNoSpace
.8c78	a9 20		lda #$20			lda 	#' '
.8c7a	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8c7d					_LCNoSpace:
.8c7d	7a		ply				ply 								; restore position.
.8c7e	c8		iny				iny 								; consume token
.8c7f	4c c4 8b	jmp $8bc4			jmp 	_LCMainLoop 				; and go around again.
.8c82					_LCData:
.8c82	48		pha				pha 								; save type $FE/$FF
.8c83	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8c85	c9 fe		cmp #$fe			cmp 	#$FE
.8c87	f0 02		beq $8c8b			beq 	_LCHaveOpener
.8c89	a2 22		ldx #$22			ldx 	#'"'
.8c8b					_LCHaveOpener:
.8c8b	8a		txa				txa 								; output prefix (# or ")
.8c8c	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8c8f	c8		iny				iny 								; get count
.8c90	b1 30		lda ($30),y			lda 	(codePtr),y
.8c92	aa		tax				tax
.8c93	c8		iny				iny 								; point at first character
.8c94					_LCOutData:
.8c94	b1 30		lda ($30),y			lda 	(codePtr),y
.8c96	c9 00		cmp #$00			cmp 	#0
.8c98	f0 03		beq $8c9d			beq 	_LCNoPrint
.8c9a	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8c9d					_LCNoPrint:
.8c9d	c8		iny				iny
.8c9e	ca		dex				dex
.8c9f	d0 f3		bne $8c94			bne 	_LCOutData
.8ca1	68		pla				pla 								; closing " required ?
.8ca2	c9 ff		cmp #$ff			cmp 	#$FF
.8ca4	d0 05		bne $8cab			bne 	_LCNoQuote
.8ca6	a9 22		lda #$22			lda 	#'"'
.8ca8	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8cab					_LCNoQuote:
.8cab	4c c4 8b	jmp $8bc4			jmp 	_LCMainLoop
.8cae					LCLWrite:
.8cae	da		phx				phx
.8caf	ae 9d 04	ldx $049d			ldx 	tbOffset
.8cb2	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.8cb5	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.8cb8	ee 9d 04	inc $049d			inc 	tbOffset
.8cbb	fa		plx				plx
.8cbc	60		rts				rts
.8cbd					LCCheckSpaceRequired:
.8cbd	ae 9d 04	ldx $049d			ldx 	tbOffset
.8cc0	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.8cc3	20 dc 8c	jsr $8cdc			jsr 	LCLLowerCase 				; saves a little effort
.8cc6	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8cc8	90 11		bcc $8cdb			bcc 	_LCCSRExit
.8cca	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ccc	90 08		bcc $8cd6			bcc 	_LCCSRSpace
.8cce	c9 61		cmp #$61			cmp 	#"a"
.8cd0	90 09		bcc $8cdb			bcc 	_LCCSRExit
.8cd2	c9 7b		cmp #$7b			cmp 	#"z"+1
.8cd4	b0 05		bcs $8cdb			bcs 	_LCCSRExit
.8cd6					_LCCSRSpace:
.8cd6	a9 20		lda #$20			lda 	#' '
.8cd8	20 ae 8c	jsr $8cae			jsr 	LCLWrite
.8cdb					_LCCSRExit:
.8cdb	60		rts				rts
.8cdc					LCLLowerCase:
.8cdc	c9 41		cmp #$41			cmp 	#"A"
.8cde	90 06		bcc $8ce6			bcc 	_LCLLCOut
.8ce0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8ce2	b0 02		bcs $8ce6			bcs 	_LCLLCOut
.8ce4	69 20		adc #$20			adc 	#$20
.8ce6					_LCLLCOut:
.8ce6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8ce7					ProcedureScan:
.8ce7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ce9	85 30		sta $30				sta 	codePtr
.8ceb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ced	85 31		sta $31				sta 	codePtr+1
.8cef					_PSLoop:
.8cef	b2 30		lda ($30)			lda 	(codePtr)
.8cf1	f0 42		beq $8d35			beq 	_PSExit
.8cf3	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8cf5	b1 30		lda ($30),y			lda 	(codePtr),y
.8cf7	c9 99		cmp #$99			cmp 	#KWD_PROC
.8cf9	d0 2d		bne $8d28			bne 	_PSNext
.8cfb	c8		iny				iny 								; get the address of the record to zTemp0 and
.8cfc	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfe	29 c0		and #$c0			and 	#$C0
.8d00	c9 40		cmp #$40			cmp 	#$40
.8d02	d0 32		bne $8d36			bne 	_PSSyntax
.8d04	b1 30		lda ($30),y			lda 	(codePtr),y
.8d06	18		clc				clc
.8d07	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d09	85 37		sta $37				sta 	zTemp0+1
.8d0b	c8		iny				iny 								; LSB
.8d0c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0e	85 36		sta $36				sta 	zTemp0
.8d10	c8		iny				iny 								; character after variable call.
.8d11	98		tya				tya 								; save Y offset at +7
.8d12	a0 07		ldy #$07			ldy 	#7
.8d14	91 36		sta ($36),y			sta 	(zTemp0),y
.8d16	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8d18	a0 02		ldy #$02			ldy 	#2
.8d1a	91 36		sta ($36),y			sta 	(zTemp0),y
.8d1c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8d1e					_PSCopy:
.8d1e	b5 30		lda $30,x			lda 	safePtr,x
.8d20	c8		iny				iny
.8d21	91 36		sta ($36),y			sta 	(zTemp0),y
.8d23	e8		inx				inx
.8d24	e0 04		cpx #$04			cpx 	#4
.8d26	d0 f6		bne $8d1e			bne 	_PSCopy
.8d28					_PSNext:
.8d28	18		clc				clc
.8d29	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d2b	65 30		adc $30				adc 	codePtr
.8d2d	85 30		sta $30				sta 	codePtr
.8d2f	90 02		bcc $8d33			bcc 	_CREExit
.8d31	e6 31		inc $31				inc 	codePtr+1
.8d33					_CREExit:
.8d33	80 ba		bra $8cef			bra 	_PSLoop
.8d35					_PSExit:
.8d35	60		rts				rts
.8d36					_PSSyntax:
.8d36	4c e6 a6	jmp $a6e6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8d39					ScanForward:
.8d39	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8d3b	86 37		stx $37				stx 	zTemp0+1
.8d3d	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8d3f					_ScanLoop:
.8d3f	b1 30		lda ($30),y			lda 	(codePtr),y
.8d41	c8		iny				iny
.8d42	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8d44	d0 0e		bne $8d54			bne 	_ScanGoNext
.8d46	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8d48	f0 04		beq $8d4e			beq 	_ScanMatch
.8d4a	c5 37		cmp $37				cmp 	zTemp0+1
.8d4c	d0 06		bne $8d54			bne 	_ScanGoNext
.8d4e					_ScanMatch:
.8d4e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8d50	d0 01		bne $8d53			bne 	_ScanNotEndEOL
.8d52	88		dey				dey
.8d53					_ScanNotEndEOL:
.8d53	60		rts				rts
.8d54					_ScanGoNext:
.8d54	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8d56	90 e7		bcc $8d3f			bcc 	_ScanLoop
.8d58	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8d5a	90 18		bcc $8d74			bcc 	_ScanSkipOne
.8d5c	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8d5e	b0 2f		bcs $8d8f			bcs 	_ScanSkipData
.8d60	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8d62	90 db		bcc $8d3f			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8d64	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8d66	b0 d7		bcs $8d3f			bcs 	_ScanLoop
.8d68	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8d6a	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8d6c	b0 d1		bcs $8d3f			bcs 	_ScanLoop
.8d6e	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8d70	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8d72	80 cb		bra $8d3f			bra 	_ScanLoop
.8d74					_ScanSkipOne:
.8d74	c8		iny				iny 								; consume the extra one.
.8d75	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8d77	d0 c6		bne $8d3f			bne 	_ScanLoop
.8d79	18		clc				clc
.8d7a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d7c	65 30		adc $30				adc 	codePtr
.8d7e	85 30		sta $30				sta 	codePtr
.8d80	90 02		bcc $8d84			bcc 	_CREExit
.8d82	e6 31		inc $31				inc 	codePtr+1
.8d84					_CREExit:
.8d84	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8d86	b2 30		lda ($30)			lda 	(codePtr)
.8d88	d0 b5		bne $8d3f			bne 	_ScanLoop 					; if not zero, more to scan
.8d8a	a9 13		lda #$13		lda	#19
.8d8c	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.8d8f					_ScanSkipData:
.8d8f	88		dey				dey 								; point at data token
.8d90	c8		iny				iny
.8d91	98		tya				tya
.8d92	38		sec				sec
.8d93	71 30		adc ($30),y			adc 	(codePtr),y
.8d95	a8		tay				tay
.8d96	80 a7		bra $8d3f			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d98					Command_WHILE:
.8d98	5a		phy				phy 								; save position of the test
.8d99	a2 00		ldx #$00			ldx 	#0
.8d9b	20 d3 98	jsr $98d3			jsr 	EvaluateNumber 				; work out the number
.8d9e	20 af 99	jsr $99af			jsr 	NSMIsZero 					; check if zero
.8da1	f0 0e		beq $8db1			beq 	_WHExitLoop 				; if so exit the loop
.8da3	98		tya				tya 								; position *after* test.
.8da4	7a		ply				ply 								; restore position before test, at WHILE
.8da5	88		dey				dey
.8da6	48		pha				pha 								; push after test on the stack
.8da7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8da9	20 33 9a	jsr $9a33			jsr 	StackOpen
.8dac	20 77 9a	jsr $9a77			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8daf	7a		ply				ply 								; restore the position *after* the test
.8db0	60		rts				rts
.8db1					_WHExitLoop:
.8db1	68		pla				pla 								; throw post loop position
.8db2	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.8db4	aa		tax				tax
.8db5	20 39 8d	jsr $8d39			jsr 	ScanForward
.8db8	60		rts				rts
.8db9					Command_WEND:
.8db9	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8dbb	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8dbd	20 5f 9a	jsr $9a5f			jsr 	StackCheckFrame
.8dc0	20 88 9a	jsr $9a88			jsr 	STKLoadCodePosition 		; loop back
.8dc3	20 51 9a	jsr $9a51			jsr 	StackClose		 			; erase the frame
.8dc6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a100					CheckRightBracket:
.a100	b1 30		lda ($30),y			lda 	(codePtr),y
.a102	c8		iny				iny
.a103	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a105	d0 0f		bne $a116			bne 	CNAFail
.a107	60		rts				rts
.a108					CheckComma:
.a108	b1 30		lda ($30),y			lda 	(codePtr),y
.a10a	c8		iny				iny
.a10b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a10d	d0 07		bne $a116			bne 	CNAFail
.a10f	60		rts				rts
.a110					CheckNextA:
.a110	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a112	d0 02		bne $a116			bne 	CNAFail
.a114	c8		iny				iny 								; skip character
.a115	60		rts				rts 								; and exit
.a116					CNAFail:
.a116	4c e6 a6	jmp $a6e6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8dc7					ErrorHandler:
.8dc7	a8		tay				tay 								; find the error text
.8dc8	f0 49		beq $8e13			beq 	_EHEnd
.8dca	a2 00		ldx #$00			ldx 	#0
.8dcc	a9 ff		lda #$ff			lda 	#((ErrorText) & $FF)
.8dce	85 36		sta $36				sta 	0+zTemp0
.8dd0	a9 a6		lda #$a6			lda 	#((ErrorText) >> 8)
.8dd2	85 37		sta $37				sta 	1+zTemp0
.8dd4					_EHFind:
.8dd4	88		dey				dey 								; found the error text ?
.8dd5	f0 0e		beq $8de5			beq 	_EHFound
.8dd7					_EHFindZero:
.8dd7	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8dd9	e6 36		inc $36				inc 	zTemp0
.8ddb	d0 02		bne $8ddf			bne 	_EHFNoCarry
.8ddd	e6 37		inc $37				inc 	zTemp0+1
.8ddf					_EHFNoCarry:
.8ddf	c9 00		cmp #$00			cmp 	#0
.8de1	d0 f4		bne $8dd7			bne 	_EHFindZero
.8de3	80 ef		bra $8dd4			bra 	_EHFind
.8de5					_EHFound:
.8de5	a5 36		lda $36				lda 	zTemp0 						; print message
.8de7	a6 37		ldx $37				ldx 	zTemp0+1
.8de9	20 20 8e	jsr $8e20			jsr 	PrintStringXA
.8dec	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8dee	b1 30		lda ($30),y			lda 	(codePtr),y
.8df0	d0 05		bne $8df7			bne 	_EHAtMsg
.8df2	c8		iny				iny
.8df3	b1 30		lda ($30),y			lda 	(codePtr),y
.8df5	f0 17		beq $8e0e			beq 	_EHCREnd
.8df7					_EHAtMsg:
.8df7	a2 8e		ldx #$8e			ldx 	#_AtMsg >> 8 				; print " at "
.8df9	a9 16		lda #$16			lda 	#_AtMsg & $FF
.8dfb	20 20 8e	jsr $8e20			jsr 	PrintStringXA
.8dfe	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8e00	b1 30		lda ($30),y			lda 	(codePtr),y
.8e02	48		pha				pha
.8e03	c8		iny				iny
.8e04	b1 30		lda ($30),y			lda 	(codePtr),y
.8e06	aa		tax				tax
.8e07	68		pla				pla
.8e08	20 5c a2	jsr $a25c			jsr 	ConvertInt16 				; convert XA to string
.8e0b	20 20 8e	jsr $8e20			jsr 	PrintStringXA 				; and print it.
.8e0e					_EHCREnd:
.8e0e	a9 0d		lda #$0d			lda 	#13 						; new line
.8e10	20 89 a8	jsr $a889			jsr 	EXTPrintCharacter
.8e13					_EHEnd:
.8e13	4c 5f 83	jmp $835f			jmp 	WarmStart
>8e16	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8e1e	20 00
.8e20					PrintStringXA:
.8e20	5a		phy				phy
.8e21	86 37		stx $37				stx 	zTemp0+1
.8e23	85 36		sta $36				sta 	zTemp0
.8e25	a0 00		ldy #$00			ldy 	#0
.8e27					_PSXALoop:
.8e27	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e29	f0 06		beq $8e31			beq 	_PSXAExit
.8e2b	20 89 a8	jsr $a889			jsr 	EXTPrintCharacter
.8e2e	c8		iny				iny
.8e2f	80 f6		bra $8e27			bra 	_PSXALoop
.8e31					_PSXAExit:
.8e31	7a		ply				ply
.8e32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8e33					UnaryTrue:
.8e33	fa		plx				plx
.8e34					ReturnTrue:
.8e34	a9 01		lda #$01			lda 	#1  						; set to 1
.8e36	20 81 99	jsr $9981			jsr 	NSMSetByte
.8e39	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8e3b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8e3e	60		rts				rts
.8e3f					UnaryFalse:
.8e3f	fa		plx				plx
.8e40					ReturnFalse:
.8e40	4c 7f 99	jmp $997f			jmp 	NSMSetZero 					; set it all to zero
.8e43					BinaryCompareEqual:
.8e43	fa		plx				plx
.8e44	20 7f 8e	jsr $8e7f			jsr 	CompareBaseCode
.8e47	c9 00		cmp #$00			cmp 	#0
.8e49	f0 e9		beq $8e34			beq 	ReturnTrue
.8e4b	80 f3		bra $8e40			bra 	ReturnFalse
.8e4d					BinaryCompareLess:
.8e4d	fa		plx				plx
.8e4e	20 7f 8e	jsr $8e7f			jsr 	CompareBaseCode
.8e51	c9 ff		cmp #$ff			cmp 	#$FF
.8e53	f0 df		beq $8e34			beq 	ReturnTrue
.8e55	80 e9		bra $8e40			bra 	ReturnFalse
.8e57					BinaryCompareGreater:
.8e57	fa		plx				plx
.8e58	20 7f 8e	jsr $8e7f			jsr 	CompareBaseCode
.8e5b	c9 01		cmp #$01			cmp 	#1
.8e5d	f0 d5		beq $8e34			beq 	ReturnTrue
.8e5f	80 df		bra $8e40			bra 	ReturnFalse
.8e61					BinaryCompareNotEqual:
.8e61	fa		plx				plx
.8e62	20 7f 8e	jsr $8e7f			jsr 	CompareBaseCode
.8e65	c9 00		cmp #$00			cmp 	#0
.8e67	d0 cb		bne $8e34			bne 	ReturnTrue
.8e69	80 d5		bra $8e40			bra 	ReturnFalse
.8e6b					BinaryCompareLessEqual:
.8e6b	fa		plx				plx
.8e6c	20 7f 8e	jsr $8e7f			jsr 	CompareBaseCode
.8e6f	c9 01		cmp #$01			cmp 	#1
.8e71	d0 c1		bne $8e34			bne 	ReturnTrue
.8e73	80 cb		bra $8e40			bra 	ReturnFalse
.8e75					BinaryCompareGreaterEqual:
.8e75	fa		plx				plx
.8e76	20 7f 8e	jsr $8e7f			jsr 	CompareBaseCode
.8e79	c9 ff		cmp #$ff			cmp 	#$FF
.8e7b	d0 b7		bne $8e34			bne 	ReturnTrue
.8e7d	80 c1		bra $8e40			bra 	ReturnFalse
.8e7f					CompareBaseCode:
.8e7f	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; make both values if references.
.8e82	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8e85	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e88	29 10		and #$10			and 	#NSTString
.8e8a	d0 40		bne $8ecc			bne 	_CBCString
.8e8c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e8f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e92	d0 3b		bne $8ecf			bne 	_CBCFloat
.8e94	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e97	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e9a	29 08		and #$08			and 	#NSTFloat
.8e9c	d0 31		bne $8ecf			bne 	_CBCFloat
.8e9e	20 d2 8e	jsr $8ed2			jsr 	CompareFixMinusZero
.8ea1	e8		inx				inx
.8ea2	20 d2 8e	jsr $8ed2			jsr 	CompareFixMinusZero
.8ea5	ca		dex				dex
.8ea6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8ea9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8eac	10 0b		bpl $8eb9			bpl 	_CDCSameSign
.8eae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8eb1	30 16		bmi $8ec9			bmi 	_CBCLess 					; return $FF
.8eb3					_CBCGreater:
.8eb3	a9 01		lda #$01			lda 	#1
.8eb5	60		rts				rts
.8eb6					_CBCEqual:
.8eb6	a9 00		lda #$00			lda 	#0
.8eb8	60		rts				rts
.8eb9					_CDCSameSign:
.8eb9	20 e2 8f	jsr $8fe2			jsr 	SubTopTwoStack 				; unsigned subtract
.8ebc	20 af 99	jsr $99af			jsr 	NSMIsZero 					; or the mantissa together
.8ebf	f0 f5		beq $8eb6			beq 	_CBCEqual 					; -0 == 0
.8ec1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8ec4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8ec7	10 ea		bpl $8eb3			bpl 	_CBCGreater
.8ec9					_CBCLess:
.8ec9	a9 ff		lda #$ff			lda 	#$FF
.8ecb	60		rts				rts
.8ecc					_CBCString:
.8ecc	4c 38 8f	jmp $8f38			jmp 	CompareStrings
.8ecf					_CBCFloat:
.8ecf	4c 58 a3	jmp $a358			jmp 	CompareFloat
.8ed2					CompareFixMinusZero:
.8ed2	20 af 99	jsr $99af			jsr 	NSMIsZero
.8ed5	d0 03		bne $8eda			bne 	_CFXMZNotZero
.8ed7	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8eda					_CFXMZNotZero:
.8eda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8edb					StringConcat:
.8edb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8ede	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ee1	29 18		and #$18			and 	#NSBTypeMask
.8ee3	c9 10		cmp #$10			cmp 	#NSTString
.8ee5	d0 4e		bne $8f35			bne		_SCType
.8ee7	64 38		stz $38				stz 	zTemp1 						; counting total length
.8ee9	e8		inx				inx
.8eea	20 08 8f	jsr $8f08			jsr 	_SCSetupZ0 					; setup for second
.8eed	20 13 8f	jsr $8f13			jsr 	_SCLengthZ0 				; length for second
.8ef0	ca		dex				dex
.8ef1	20 08 8f	jsr $8f08			jsr 	_SCSetupZ0 					; setup for first
.8ef4	20 13 8f	jsr $8f13			jsr 	_SCLengthZ0 				; length for first
.8ef7	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8ef9	20 0b aa	jsr $aa0b			jsr 	StringTempAllocate
.8efc	20 26 8f	jsr $8f26			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8eff	e8		inx				inx
.8f00	20 08 8f	jsr $8f08			jsr 	_SCSetupZ0 					; copy second out
.8f03	20 26 8f	jsr $8f26			jsr 	_SCCopy
.8f06	ca		dex				dex
.8f07	60		rts				rts
.8f08					_SCSetupZ0:
.8f08	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8f0b	85 36		sta $36				sta 	zTemp0
.8f0d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f10	85 37		sta $37				sta 	zTemp0+1
.8f12	60		rts				rts
.8f13					_SCLengthZ0:
.8f13	5a		phy				phy
.8f14	a0 00		ldy #$00			ldy 	#0
.8f16					_SCLenLoop:
.8f16	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f18	f0 0a		beq $8f24			beq 	_SCLExit
.8f1a	c8		iny				iny
.8f1b	e6 38		inc $38				inc 	zTemp1
.8f1d	10 f7		bpl $8f16			bpl		_SCLenLoop
.8f1f	a9 09		lda #$09		lda	#9
.8f21	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.8f24					_SCLExit:
.8f24	7a		ply				ply
.8f25	60		rts				rts
.8f26					_SCCopy:
.8f26	5a		phy				phy
.8f27	a0 00		ldy #$00			ldy 	#0
.8f29					_SCCopyLoop:
.8f29	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f2b	f0 06		beq $8f33			beq 	_SCCExit
.8f2d	20 49 aa	jsr $aa49			jsr 	StringTempWrite
.8f30	c8		iny				iny
.8f31	80 f6		bra $8f29			bra 	_SCCopyLoop
.8f33					_SCCExit:
.8f33	7a		ply				ply
.8f34	60		rts				rts
.8f35					_SCType:
.8f35	4c f0 a6	jmp $a6f0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a119					IntegerDivide:
.a119	fa		plx				plx
.a11a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a11d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a120	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a121	0a		asl a				asl 	a
.a122	10 05		bpl $a129			bpl 	_NotRef
.a124	48		pha				pha
.a125	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a128	68		pla				pla
.a129					_NotRef:
.a129	0a		asl a				asl 	a
.a12a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a12c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a12f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a132	f0 03		beq $a137			beq 	_IntegerCode 				; if clear, then we have two integers
.a134	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.a137					_IntegerCode:
.a137	20 59 a1	jsr $a159			jsr 	CheckDivideZero 			; do div zero check
.a13a	20 91 a1	jsr $a191			jsr 	Int32Divide 				; do the division
.a13d	20 4e a2	jsr $a24e			jsr 	CalculateSign 				; calculate result sign
.a140					NSMCopyPlusTwoToZero:
.a140	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a143	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a146	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a149	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a14c	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a14f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a152	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a155	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a158	60		rts				rts
.a159					CheckDivideZero:
.a159	e8		inx				inx
.a15a	20 af 99	jsr $99af			jsr 	NSMIsZero
.a15d	f0 02		beq $a161			beq 	_CDVError
.a15f	ca		dex				dex
.a160	60		rts				rts
.a161					_CDVError:
.a161	a9 03		lda #$03		lda	#3
.a163	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a166					IntegerModulus:
.a166	fa		plx				plx
.a167	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a16a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a16d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a16e	0a		asl a				asl 	a
.a16f	10 05		bpl $a176			bpl 	_NotRef
.a171	48		pha				pha
.a172	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a175	68		pla				pla
.a176					_NotRef:
.a176	0a		asl a				asl 	a
.a177	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a179	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a17c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a17f	f0 03		beq $a184			beq 	_IntegerCode 				; if clear, then we have two integers
.a181	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.a184					_IntegerCode:
.a184					IntegerModulusNoCheck:
.a184	20 59 a1	jsr $a159			jsr 	CheckDivideZero 			; do div zero check
.a187	20 91 a1	jsr $a191			jsr 	Int32Divide 				; do the division
.a18a	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a18d	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a190	60		rts				rts
.a191					Int32Divide:
.a191	48		pha				pha 								; save AXY
.a192	5a		phy				phy
.a193	20 56 99	jsr $9956			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a196	20 7b 99	jsr $997b			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a199	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a19b					_I32DivideLoop:
.a19b	e8		inx				inx
.a19c	e8		inx				inx
.a19d	20 94 99	jsr $9994			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a1a0	ca		dex				dex
.a1a1	ca		dex				dex
.a1a2	20 95 99	jsr $9995			jsr 	NSMRotateLeft
.a1a5	20 d1 a1	jsr $a1d1			jsr 	DivideCheckSubtract 		; check if subtract possible
.a1a8	90 03		bcc $a1ad			bcc 	_I32DivideNoCarryIn
.a1aa	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a1ad					_I32DivideNoCarryIn:
.a1ad	88		dey				dey 								; loop round till division completed.
.a1ae	d0 eb		bne $a19b			bne 	_I32DivideLoop
.a1b0	7a		ply				ply 								; restore AXY and exit
.a1b1	68		pla				pla
.a1b2	60		rts				rts
.a1b3					Int32ShiftDivide:
.a1b3	48		pha				pha 								; save AY
.a1b4	5a		phy				phy
.a1b5	e8		inx				inx 								; clear S[X+2]
.a1b6	e8		inx				inx
.a1b7	20 7f 99	jsr $997f			jsr 	NSMSetZero
.a1ba	ca		dex				dex
.a1bb	ca		dex				dex
.a1bc	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a1be					_I32SDLoop:
.a1be	20 d1 a1	jsr $a1d1			jsr 	DivideCheckSubtract 		; check if subtract possible
.a1c1	e8		inx				inx
.a1c2	e8		inx				inx
.a1c3	20 95 99	jsr $9995			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a1c6	ca		dex				dex
.a1c7	ca		dex				dex
.a1c8	20 95 99	jsr $9995			jsr 	NSMRotateLeft
.a1cb	88		dey				dey 	 							; do 31 times
.a1cc	d0 f0		bne $a1be			bne 	_I32SDLoop
.a1ce	7a		ply				ply 								; restore AY and exit
.a1cf	68		pla				pla
.a1d0	60		rts				rts
.a1d1					DivideCheckSubtract:
.a1d1	20 e2 8f	jsr $8fe2			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a1d4	b0 04		bcs $a1da			bcs 	_DCSExit 					; if carry set, then could do, exit
.a1d6	20 bc 8f	jsr $8fbc			jsr 	AddTopTwoStack 				; add it back in
.a1d9	18		clc				clc 								; and return False
.a1da					_DCSExit:
.a1da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a1db					MulInteger:
.a1db	fa		plx				plx
.a1dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a1df	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a1e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a1e3	0a		asl a				asl 	a
.a1e4	10 05		bpl $a1eb			bpl 	_NotRef
.a1e6	48		pha				pha
.a1e7	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a1ea	68		pla				pla
.a1eb					_NotRef:
.a1eb	0a		asl a				asl 	a 							; put MSB of type into A:7
.a1ec	30 0b		bmi $a1f9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a1ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a1f1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a1f4	f0 06		beq $a1fc			beq 	_IntegerCode 				; if clear, then we have two integers
.a1f6	4c 2f a4	jmp $a42f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a1f9					_StringData:
.a1f9	4c fa a6	jmp $a6fa			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a1fc					_IntegerCode:
.a1fc	20 09 a2	jsr $a209			jsr 	MultiplyShort
.a1ff	c9 00		cmp #$00			cmp 	#0
.a201	f0 05		beq $a208			beq 	_MIExit
.a203	a9 04		lda #$04		lda	#4
.a205	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a208					_MIExit:
.a208	60		rts				rts
.a209					MultiplyShort:
.a209	5a		phy				phy 								; save Y
.a20a	20 56 99	jsr $9956			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a20d	20 7b 99	jsr $997b			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a210	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a212					_I32MLoop:
.a212	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a215	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a218	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a21b	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a21e	f0 28		beq $a248			beq 	_I32MExit 					; exit if zero
.a220	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a223	29 01		and #$01			and 	#1
.a225	f0 0e		beq $a235			beq 	_I32MNoAdd
.a227	20 bc 8f	jsr $8fbc			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a22a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a22d	10 06		bpl $a235			bpl 	_I32MNoAdd
.a22f					_I32ShiftRight:
.a22f	20 a2 99	jsr $99a2			jsr 	NSMShiftRight 				; shift S[X] right
.a232	c8		iny				iny 								; increment shift count
.a233	80 0a		bra $a23f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a235					_I32MNoAdd:
.a235	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a238	70 f5		bvs $a22f			bvs 	_I32ShiftRight 				; instead.
.a23a	e8		inx				inx
.a23b	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a23e	ca		dex				dex
.a23f					_I32MShiftUpper:
.a23f	e8		inx				inx 								; shift S[X+2] right
.a240	e8		inx				inx
.a241	20 a2 99	jsr $99a2			jsr 	NSMShiftRight
.a244	ca		dex				dex
.a245	ca		dex				dex
.a246	80 ca		bra $a212			bra 	_I32MLoop 					; try again.
.a248					_I32MExit:
.a248	20 4e a2	jsr $a24e			jsr 	CalculateSign
.a24b	98		tya				tya 								; shift in A
.a24c	7a		ply				ply 								; restore Y and exit
.a24d	60		rts				rts
.a24e					CalculateSign:
.a24e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a251	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a254	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a257	0a		asl a				asl 	a 							; shift bit 7 into carry
.a258	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a25b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8f38					CompareStrings:
.8f38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8f3b	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8f3e	29 10		and #$10			and 	#NSBIsString
.8f40	f0 2c		beq $8f6e			beq 	_CSTypeError
.8f42	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8f45	85 36		sta $36				sta 	zTemp0
.8f47	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f4a	85 37		sta $37				sta 	zTemp0+1
.8f4c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.8f4f	85 38		sta $38				sta 	zTemp1
.8f51	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8f54	85 39		sta $39				sta 	zTemp1+1
.8f56	5a		phy				phy 								; save Y so we can access strings
.8f57	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8f59					_CSLoop:
.8f59	c8		iny				iny
.8f5a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8f5c	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8f5e	d0 06		bne $8f66			bne 	_CSDifferent
.8f60	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8f62	d0 f5		bne $8f59			bne 	_CSLoop 					; still comparing
.8f64					_CSExit:
.8f64	7a		ply				ply 								; reached end, return zero in A from EOS
.8f65	60		rts				rts
.8f66					_CSDifferent:
.8f66	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8f68	90 fa		bcc $8f64			bcc		_CSExit
.8f6a	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8f6c	80 f6		bra $8f64			bra 	_CSExit
.8f6e					_CSTypeError:
.8f6e	4c f0 a6	jmp $a6f0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8f71					ShiftLeft:
.8f71	38		sec				sec
.8f72	80 01		bra $8f75			bra 	ShiftMain
.8f74					ShiftRight:
.8f74	18		clc				clc
.8f75					ShiftMain:
.8f75	fa		plx				plx 								; restore X
.8f76	08		php				php 								; save direction
.8f77	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f7a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f7d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f7e	0a		asl a				asl 	a
.8f7f	10 05		bpl $8f86			bpl 	_NotRef
.8f81	48		pha				pha
.8f82	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f85	68		pla				pla
.8f86					_NotRef:
.8f86	0a		asl a				asl 	a
.8f87	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f89	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f8c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f8f	f0 03		beq $8f94			beq 	_IntegerCode 				; if clear, then we have two integers
.8f91	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.8f94					_IntegerCode:
.8f94	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.8f97	29 e0		and #$e0			and 	#$E0
.8f99	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.8f9c	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.8f9f	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.8fa2	d0 13		bne $8fb7			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8fa4					_SMLoop:
.8fa4	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8fa7	30 11		bmi $8fba			bmi 	_SMExit 					; exit if done.
.8fa9	28		plp				plp 								; restore direcition setting
.8faa	08		php				php
.8fab	90 05		bcc $8fb2			bcc 	_SMRight
.8fad	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; shift left if CS
.8fb0	80 f2		bra $8fa4			bra 	_SMLoop
.8fb2					_SMRight:
.8fb2	20 a2 99	jsr $99a2			jsr 	NSMShiftRight 				; shift right if CC
.8fb5	80 ed		bra $8fa4			bra 	_SMLoop
.8fb7					_SMExit0:
.8fb7	20 7f 99	jsr $997f			jsr 	NSMSetZero 					; return zero.
.8fba					_SMExit:
.8fba	28		plp				plp 								; throw direction
.8fbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8fbc					AddTopTwoStack:
.8fbc	18		clc				clc
.8fbd	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.8fc0	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.8fc3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8fc6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.8fc9	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.8fcc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8fcf	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.8fd2	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.8fd5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8fd8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.8fdb	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.8fde	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8fe1	60		rts				rts
.8fe2					SubTopTwoStack:
.8fe2	38		sec				sec
.8fe3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.8fe6	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.8fe9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8fec	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.8fef	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.8ff2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ff5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.8ff8	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.8ffb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ffe	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9001	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9004	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9007	60		rts				rts
.9008					AddInteger:
.9008	fa		plx				plx
.9009	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.900c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.900f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9010	0a		asl a				asl 	a
.9011	10 05		bpl $9018			bpl 	_NotRef
.9013	48		pha				pha
.9014	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9017	68		pla				pla
.9018					_NotRef:
.9018	0a		asl a				asl 	a 							; put MSB of type into A:7
.9019	30 0b		bmi $9026			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.901b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.901e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9021	f0 06		beq $9029			beq 	_IntegerCode 				; if clear, then we have two integers
.9023	4c b7 a2	jmp $a2b7			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9026					_StringData:
.9026	4c db 8e	jmp $8edb			jmp 	StringConcat							; at least one string - don't know both are strings.
.9029					_IntegerCode:
.9029					AddCode:
.9029	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.902c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.902f	10 8b		bpl $8fbc			bpl 	AddTopTwoStack
.9031	20 e2 8f	jsr $8fe2			jsr 	SubTopTwoStack 				; do a physical subtraction
.9034	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9037	10 09		bpl $9042			bpl 	_AddExit
.9039	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.903c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.903f	20 34 99	jsr $9934			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9042					_AddExit:
.9042	60		rts				rts
.9043					SubInteger:
.9043	fa		plx				plx
.9044	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9047	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.904a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.904b	0a		asl a				asl 	a
.904c	10 05		bpl $9053			bpl 	_NotRef
.904e	48		pha				pha
.904f	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9052	68		pla				pla
.9053					_NotRef:
.9053	0a		asl a				asl 	a 							; put MSB of type into A:7
.9054	30 0b		bmi $9061			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9056	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9059	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.905c	f0 06		beq $9064			beq 	_IntegerCode 				; if clear, then we have two integers
.905e	4c bc a2	jmp $a2bc			jmp 	FloatingPointSub 							; otherwise at least one float.
.9061					_StringData:
.9061	4c fa a6	jmp $a6fa			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9064					_IntegerCode:
.9064	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9067	49 80		eor #$80			eor 	#$80
.9069	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.906c	80 bb		bra $9029			bra 	AddCode 					; and do the same code as add.
.906e					AndInteger:
.906e	fa		plx				plx
.906f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9072	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9075	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9076	0a		asl a				asl 	a
.9077	10 05		bpl $907e			bpl 	_NotRef
.9079	48		pha				pha
.907a	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.907d	68		pla				pla
.907e					_NotRef:
.907e	0a		asl a				asl 	a
.907f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9081	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9084	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9087	f0 03		beq $908c			beq 	_IntegerCode 				; if clear, then we have two integers
.9089	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.908c					_IntegerCode:
.908c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.908f	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9092	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9095	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9098	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.909b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.909e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90a1	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.90a4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90a7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90aa	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.90ad	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90b0	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.90b3	60		rts				rts
.90b4					OraInteger:
.90b4	fa		plx				plx
.90b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90b8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90bb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90bc	0a		asl a				asl 	a
.90bd	10 05		bpl $90c4			bpl 	_NotRef
.90bf	48		pha				pha
.90c0	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90c3	68		pla				pla
.90c4					_NotRef:
.90c4	0a		asl a				asl 	a
.90c5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90c7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ca	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90cd	f0 03		beq $90d2			beq 	_IntegerCode 				; if clear, then we have two integers
.90cf	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.90d2					_IntegerCode:
.90d2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90d5	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.90d8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90db	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90de	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.90e1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90e4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90e7	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.90ea	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90ed	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90f0	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.90f3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90f6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.90f9	60		rts				rts
.90fa					EorInteger:
.90fa	fa		plx				plx
.90fb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90fe	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9101	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9102	0a		asl a				asl 	a
.9103	10 05		bpl $910a			bpl 	_NotRef
.9105	48		pha				pha
.9106	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9109	68		pla				pla
.910a					_NotRef:
.910a	0a		asl a				asl 	a
.910b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.910d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9110	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9113	f0 03		beq $9118			beq 	_IntegerCode 				; if clear, then we have two integers
.9115	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.9118					_IntegerCode:
.9118	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.911b	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.911e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9121	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9124	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9127	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.912a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.912d	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9130	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9133	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9136	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9139	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.913c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.913f	60		rts				rts
.9140					WordIndirect:
.9140	fa		plx				plx
.9141	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9144	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9147	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9148	0a		asl a				asl 	a
.9149	10 05		bpl $9150			bpl 	_NotRef
.914b	48		pha				pha
.914c	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.914f	68		pla				pla
.9150					_NotRef:
.9150	0a		asl a				asl 	a
.9151	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9153	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9156	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9159	f0 03		beq $915e			beq 	_IntegerCode 				; if clear, then we have two integers
.915b	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.915e					_IntegerCode:
.915e	20 29 90	jsr $9029			jsr 	AddCode 					; add the two values
.9161	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9163	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9166	60		rts				rts
.9167					ByteIndirect:
.9167	fa		plx				plx
.9168	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.916b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.916e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.916f	0a		asl a				asl 	a
.9170	10 05		bpl $9177			bpl 	_NotRef
.9172	48		pha				pha
.9173	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9176	68		pla				pla
.9177					_NotRef:
.9177	0a		asl a				asl 	a
.9178	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.917a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.917d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9180	f0 03		beq $9185			beq 	_IntegerCode 				; if clear, then we have two integers
.9182	4c f0 a6	jmp $a6f0			jmp 	TypeError 					; anything else, type mismatch.
.9185					_IntegerCode:
.9185	20 29 90	jsr $9029			jsr 	AddCode 					; add the two values
.9188	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.918a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.918d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a25c					ConvertInt16:
.a25c	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a25f	8e 10 04	stx $0410			stx 	NSMantissa1
.a262	9c 18 04	stz $0418			stz 	NSMantissa2
.a265	9c 20 04	stz $0420			stz 	NSMantissa3
.a268	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a26b	a2 00		ldx #$00			ldx 	#0 							; stack level
.a26d	a9 0a		lda #$0a			lda 	#10 						; base
.a26f	80 00		bra $a271			bra 	ConvertInt32
.a271					ConvertInt32:
.a271	5a		phy				phy
.a272	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a274	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a277	10 08		bpl $a281			bpl 	_CI32NotNeg
.a279	48		pha				pha
.a27a	a9 2d		lda #$2d			lda 	#'-'
.a27c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a27f	c8		iny				iny
.a280	68		pla				pla
.a281					_CI32NotNeg:
.a281	20 8f a2	jsr $a28f			jsr 	_CI32DivideConvert 			; recursive conversion
.a284	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a286	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a289	7a		ply				ply
.a28a	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a28c	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a28e	60		rts				rts
.a28f					_CI32DivideConvert:
.a28f	e8		inx				inx 								; write to next slot up
.a290	20 81 99	jsr $9981			jsr 	NSMSetByte
.a293	ca		dex				dex
.a294	20 91 a1	jsr $a191			jsr 	Int32Divide 				; divide
.a297	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a29a	48		pha				pha
.a29b	20 40 a1	jsr $a140			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a29e	20 af 99	jsr $99af			jsr 	NSMIsZero 					; is it zero ?
.a2a1	f0 06		beq $a2a9			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a2a3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a2a6	20 8f a2	jsr $a28f			jsr 	_CI32DivideConvert 			; and recusrively call.
.a2a9					_CI32NoRecurse:
.a2a9	68		pla				pla 								; remainder
.a2aa	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a2ac	90 02		bcc $a2b0			bcc 	_CI32NotHex
.a2ae	69 26		adc #$26			adc 	#6+32
.a2b0					_CI32NotHex:
.a2b0	69 30		adc #$30			adc 	#48
.a2b2	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a2b5	c8		iny				iny
.a2b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.918e					PrecedenceLevel:
>918e	04					.byte	 4	; $00 <<
>918f	02					.byte	 2	; $01 <=
>9190	02					.byte	 2	; $02 <>
>9191	00					.byte	 0	; $03 !!3
>9192	00					.byte	 0	; $04 ><
>9193	02					.byte	 2	; $05 >=
>9194	04					.byte	 4	; $06 >>
>9195	00					.byte	 0	; $07 !!7
>9196	00					.byte	 0	; $08 !!8
>9197	00					.byte	 0	; $09 !!9
>9198	00					.byte	 0	; $0a !!10
>9199	00					.byte	 0	; $0b !!11
>919a	00					.byte	 0	; $0c !!12
>919b	00					.byte	 0	; $0d !!13
>919c	00					.byte	 0	; $0e !!14
>919d	00					.byte	 0	; $0f !!15
>919e	00					.byte	 0	; $10 @
>919f	00					.byte	 0	; $11 !!17
>91a0	00					.byte	 0	; $12 !!18
>91a1	00					.byte	 0	; $13 [
>91a2	04					.byte	 4	; $14 \
>91a3	00					.byte	 0	; $15 ]
>91a4	01					.byte	 1	; $16 ^
>91a5	00					.byte	 0	; $17 _
>91a6	00					.byte	 0	; $18 `
>91a7	00					.byte	 0	; $19 !!25
>91a8	00					.byte	 0	; $1a !!26
>91a9	00					.byte	 0	; $1b {
>91aa	01					.byte	 1	; $1c |
>91ab	00					.byte	 0	; $1d }
>91ac	00					.byte	 0	; $1e ~
>91ad	00					.byte	 0	; $1f [7m<7F>[m
>91ae	00					.byte	 0	; $20
>91af	05					.byte	 5	; $21 !
>91b0	00					.byte	 0	; $22 "
>91b1	00					.byte	 0	; $23 #
>91b2	05					.byte	 5	; $24 $
>91b3	04					.byte	 4	; $25 %
>91b4	01					.byte	 1	; $26 &
>91b5	00					.byte	 0	; $27 '
>91b6	00					.byte	 0	; $28 (
>91b7	00					.byte	 0	; $29 )
>91b8	04					.byte	 4	; $2a *
>91b9	03					.byte	 3	; $2b +
>91ba	00					.byte	 0	; $2c ,
>91bb	03					.byte	 3	; $2d -
>91bc	00					.byte	 0	; $2e .
>91bd	04					.byte	 4	; $2f /
>91be	00					.byte	 0	; $30 0
>91bf	00					.byte	 0	; $31 1
>91c0	00					.byte	 0	; $32 2
>91c1	00					.byte	 0	; $33 3
>91c2	00					.byte	 0	; $34 4
>91c3	00					.byte	 0	; $35 5
>91c4	00					.byte	 0	; $36 6
>91c5	00					.byte	 0	; $37 7
>91c6	00					.byte	 0	; $38 8
>91c7	00					.byte	 0	; $39 9
>91c8	00					.byte	 0	; $3a :
>91c9	00					.byte	 0	; $3b ;
>91ca	02					.byte	 2	; $3c <
>91cb	02					.byte	 2	; $3d =
>91cc	02					.byte	 2	; $3e >
>91cd	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.91ce					EvaluateExpressionAt0:
.91ce	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.91d0					EvaluateExpression:
.91d0	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.91d2					EvaluateExpressionAtPrecedence:
.91d2	48		pha				pha 								; save precedence level
.91d3	20 a1 94	jsr $94a1			jsr 	EvaluateTerm 				; evaluate term into level X.
.91d6	68		pla				pla 								; restore precedence level.
.91d7					_EXPRLoop:
.91d7	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.91d9	b1 30		lda ($30),y			lda 	(codePtr),y
.91db	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.91dd	b0 25		bcs $9204			bcs 	_EXPRExit
.91df	da		phx				phx 								; read the operator precedence
.91e0	aa		tax				tax
.91e1	bd 8e 91	lda $918e,x			lda 	PrecedenceLevel,x
.91e4	fa		plx				plx
.91e5	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.91e7	f0 1b		beq $9204			beq 	_EXPRExit
.91e9	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.91eb	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.91ed	c5 37		cmp $37				cmp 	zTemp0+1
.91ef	b0 13		bcs $9204			bcs		_EXPRExit 					; if current >= operator exit
.91f1	48		pha				pha 								; save current precedence.
.91f2	b1 30		lda ($30),y			lda 	(codePtr),y
.91f4	c8		iny				iny
.91f5	48		pha				pha
.91f6	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.91f8	e8		inx				inx 								; work out the right hand side.
.91f9	20 d2 91	jsr $91d2			jsr 	EvaluateExpressionAtPrecedence
.91fc	ca		dex				dex
.91fd	68		pla				pla 								; get operator, call the code.
.91fe	20 07 92	jsr $9207			jsr 	_EXPRCaller
.9201	68		pla				pla 								; restore precedence level
.9202	80 d3		bra $91d7			bra 	_EXPRLoop 					; and go round.
.9204					_EXPRExit:
.9204	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9206	60		rts				rts
.9207					_EXPRCaller:
.9207	da		phx				phx 								; save on stack, first thing is to restore it
.9208	0a		asl a				asl 	a 							; double so can use vectors into X
.9209	aa		tax				tax
.920a	7c 0e 8a	jmp ($8a0e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a2b7					FloatingPointAdd:
.a2b7	20 58 a4	jsr $a458			jsr 	FloatPrepare 				; prepare for floats
.a2ba	80 0b		bra $a2c7			bra 	FloatAdd
.a2bc					FloatingPointSub:
.a2bc	20 58 a4	jsr $a458			jsr 	FloatPrepare 				; prepare for floats
.a2bf					FloatSubtract:
.a2bf	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a2c2	49 80		eor #$80			eor 	#$80
.a2c4	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a2c7					FloatAdd:
.a2c7	48		pha				pha
.a2c8	5a		phy				phy
.a2c9	20 69 a4	jsr $a469			jsr 	NSNormalise 				; normalise S[X]
.a2cc	f0 54		beq $a322			beq 	_FAReturn1
.a2ce	e8		inx				inx 								; normalise S[X+1]
.a2cf	20 69 a4	jsr $a469			jsr 	NSNormalise
.a2d2	ca		dex				dex
.a2d3	c9 00		cmp #$00			cmp 	#0
.a2d5	f0 6f		beq $a346			beq 	_FAExit 					; if so, just return A
.a2d7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a2da	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a2dd	f0 1b		beq $a2fa			beq 	_FAExponentsEqual
.a2df	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a2e2	a8		tay				tay
.a2e3	38		sec				sec 								; do a signed comparison of the exponents.
.a2e4	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a2e7	50 02		bvc $a2eb			bvc 	_FANoSignedChange
.a2e9	49 80		eor #$80			eor 	#$80
.a2eb					_FANoSignedChange:
.a2eb	29 80		and #$80			and 	#$80
.a2ed	10 03		bpl $a2f2			bpl 	_FAHaveMax
.a2ef	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a2f2					_FAHaveMax:
.a2f2	20 49 a3	jsr $a349			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a2f5	e8		inx				inx
.a2f6	20 49 a3	jsr $a349			jsr 	_FAShiftToExponent
.a2f9	ca		dex				dex
.a2fa					_FAExponentsEqual:
.a2fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a2fd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a300	30 10		bmi $a312			bmi 	_FADifferentSigns
.a302	20 bc 8f	jsr $8fbc			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a305	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a308	10 3c		bpl $a346			bpl 	_FAExit 					; if no, we are done.
.a30a	20 a2 99	jsr $99a2			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a30d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a310	80 34		bra $a346			bra 	_FAExit
.a312					_FADifferentSigns:
.a312	20 e2 8f	jsr $8fe2			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a315	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a318	10 2c		bpl $a346			bpl 	_FAExit 					; if no, we are done.
.a31a	20 2b 99	jsr $992b			jsr 	NSMNegate 					; netate result
.a31d	20 34 99	jsr $9934			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a320	80 24		bra $a346			bra 	_FAExit
.a322					_FAReturn1:
.a322	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a325	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a328	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a32b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a32e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a331	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a334	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a337	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a33a	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a33d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a340	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a343	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a346					_FAExit:
.a346	7a		ply				ply
.a347	68		pla				pla
.a348	60		rts				rts
.a349					_FAShiftToExponent:
.a349					_FAShiftToExponent2:
.a349	98		tya				tya 								; compare Y to exponent
.a34a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a34d	f0 08		beq $a357			beq 	_FASEExit 					; exit if so.
.a34f	20 a2 99	jsr $99a2			jsr 	NSMShiftRight	 			; shift the mantissa right
.a352	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a355	80 f2		bra $a349			bra 	_FAShiftToExponent2
.a357					_FASEExit:
.a357	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a358					CompareFloat:
.a358	20 bf a2	jsr $a2bf			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a35b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a35e	29 f8		and #$f8			and 	#$F8
.a360	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a363	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a366	f0 09		beq $a371			beq 	_FCExit 					; zero, so approximately identical
.a368	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a36a	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a36d	10 02		bpl $a371			bpl 	_FCExit
.a36f					_FCNegative:
.a36f	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a371					_FCExit:
.a371	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a372					FDivideCommand:
.a372	fa		plx				plx	 								; restore stack position
.a373	20 58 a4	jsr $a458			jsr 	FloatPrepare 				; prepare for floats
.a376					FloatDivide:
.a376	48		pha				pha
.a377	e8		inx				inx
.a378	20 69 a4	jsr $a469			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a37b	ca		dex				dex
.a37c	c9 00		cmp #$00			cmp 	#0
.a37e	f0 20		beq $a3a0			beq 	_FDZero
.a380	20 69 a4	jsr $a469			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a383	f0 19		beq $a39e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a385	20 b3 a1	jsr $a1b3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a388	20 40 a1	jsr $a140			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a38b	20 69 a4	jsr $a469			jsr		NSNormalise 				; renormalise
.a38e	20 4e a2	jsr $a24e			jsr 	CalculateSign 				; calculate result sign
.a391	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a394	38		sec				sec
.a395	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a398	38		sec				sec
.a399	e9 1e		sbc #$1e			sbc 	#30
.a39b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a39e					_FDExit:
.a39e	68		pla				pla
.a39f	60		rts				rts
.a3a0					_FDZero:
.a3a0	a9 03		lda #$03		lda	#3
.a3a2	4c c7 8d	jmp $8dc7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a3a5					FloatFractionalPart:
.a3a5	5a		phy				phy
.a3a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a3a9	29 7f		and #$7f			and 	#$7F
.a3ab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3ae	20 69 a4	jsr $a469			jsr 	NSNormalise
.a3b1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a3b4	38		sec				sec
.a3b5	e9 e0		sbc #$e0			sbc 	#$E0
.a3b7	90 31		bcc $a3ea			bcc 	_FFPExit 					; already fractional
.a3b9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a3bb	b0 2a		bcs $a3e7			bcs 	_FFPZero
.a3bd	a8		tay				tay 								; put count to do in Y
.a3be	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a3c1	20 ec a3	jsr $a3ec			jsr 	_FFPPartial
.a3c4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a3c7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3ca	20 ec a3	jsr $a3ec			jsr 	_FFPPartial
.a3cd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3d0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3d3	20 ec a3	jsr $a3ec			jsr 	_FFPPartial
.a3d6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3d9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3dc	20 ec a3	jsr $a3ec			jsr 	_FFPPartial
.a3df	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3e2	20 af 99	jsr $99af			jsr 	NSMIsZero 					; zeroed check.
.a3e5	d0 03		bne $a3ea			bne 	_FFPExit
.a3e7					_FFPZero:
.a3e7	20 7f 99	jsr $997f			jsr 	NSMSetZero
.a3ea					_FFPExit:
.a3ea	7a		ply				ply
.a3eb	60		rts				rts
.a3ec					_FFPPartial:
.a3ec	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a3ee	f0 17		beq $a407			beq 	_FFFPPExit
.a3f0	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a3f2	b0 0c		bcs $a400			bcs 	_FFFPPWholeByte
.a3f4	5a		phy				phy
.a3f5					_FFFPPLeft:
.a3f5	0a		asl a				asl 	a
.a3f6	88		dey				dey
.a3f7	d0 fc		bne $a3f5			bne 	_FFFPPLeft
.a3f9	7a		ply				ply
.a3fa					_FFFPPRight:
.a3fa	4a		lsr a				lsr 	a
.a3fb	88		dey				dey
.a3fc	d0 fc		bne $a3fa			bne 	_FFFPPRight
.a3fe	80 07		bra $a407			bra 	_FFFPPExit
.a400					_FFFPPWholeByte:
.a400	98		tya				tya 								; subtract 8 from count
.a401	38		sec				sec
.a402	e9 08		sbc #$08			sbc 	#8
.a404	a8		tay				tay
.a405	a9 00		lda #$00			lda 	#0 							; and clear all
.a407					_FFFPPExit:
.a407	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a408					FloatIntegerPart:
.a408	48		pha				pha
.a409	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a40c	f0 1f		beq $a42d			beq 	_FIPExit 					; if so do nothing
.a40e	20 af 99	jsr $99af			jsr 	NSMIsZero 					; is it zero ?
.a411	f0 17		beq $a42a			beq 	_FIPZero 					; if so return zero.
.a413	20 69 a4	jsr $a469			jsr 	NSNormalise 				; normalise
.a416	f0 12		beq $a42a			beq 	_FIPZero 					; normalised to zero, exit zero
.a418					_FIPShift:
.a418	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a41b	10 08		bpl $a425			bpl 	_FIPCheckZero
.a41d	20 a2 99	jsr $99a2			jsr 	NSMShiftRight 				; shift mantissa right
.a420	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a423	80 f3		bra $a418			bra 	_FIPShift
.a425					_FIPCheckZero:
.a425	20 af 99	jsr $99af			jsr 	NSMIsZero 					; avoid -0 problem
.a428	d0 03		bne $a42d			bne 	_FIPExit 					; set to zero if mantissa zero.
.a42a					_FIPZero:
.a42a	20 7f 99	jsr $997f			jsr 	NSMSetZero
.a42d					_FIPExit:
.a42d	68		pla				pla
.a42e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a42f					FloatingPointMultiply:
.a42f	20 58 a4	jsr $a458			jsr 	FloatPrepare 				; prepare for floats
.a432					FloatMultiply:
.a432	48		pha				pha
.a433	20 69 a4	jsr $a469			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a436	f0 1b		beq $a453			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a438	e8		inx				inx
.a439	20 69 a4	jsr $a469			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a43c	ca		dex				dex
.a43d	c9 00		cmp #$00			cmp 	#0
.a43f	f0 0f		beq $a450			beq 	_FDSetZero
.a441	20 09 a2	jsr $a209			jsr 	MultiplyShort 				; calculate the result.
.a444	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a447	18		clc				clc
.a448	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a44b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a44e	80 03		bra $a453			bra 	_FDExit
.a450					_FDSetZero:
.a450	20 7f 99	jsr $997f			jsr 	NSMSetZero 					; return 0
.a453					_FDExit:
.a453	20 69 a4	jsr $a469			jsr 	NSNormalise 				; normalise the result
.a456	68		pla				pla
.a457	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a458					FloatPrepare:
.a458	20 e0 92	jsr $92e0			jsr 	DereferenceTopTwo 			; dereference the top two values
.a45b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a45e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a461	29 10		and #$10			and 	#NSBIsString
.a463	d0 01		bne $a466			bne 	_FDType
.a465	60		rts				rts
.a466					_FDType:
.a466	4c f0 a6	jmp $a6f0			jmp 	TypeError
.a469					NSNormalise:
.a469	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a46c	29 80		and #$80			and 	#$80
.a46e	09 08		ora #$08			ora 	#NSTFloat
.a470	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a473	20 af 99	jsr $99af			jsr 	NSMIsZero 					; if zero exit
.a476	d0 09		bne $a481			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a478	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a47b	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a47e	a9 00		lda #$00			lda 	#0 							; set Z flag
.a480	60		rts				rts
.a481					_NSNormaliseOptimise:
.a481	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a484	d0 22		bne $a4a8			bne 	_NSNormaliseLoop
.a486	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a489	30 1d		bmi $a4a8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a48b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a48e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a491	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a494	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a497	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a49a	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a49d	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a4a0	38		sec				sec
.a4a1	e9 08		sbc #$08			sbc 	#8
.a4a3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a4a6	80 d9		bra $a481			bra 	_NSNormaliseOptimise
.a4a8					_NSNormaliseLoop:
.a4a8	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a4ab	70 08		bvs $a4b5			bvs 	_NSNExit 					; exit if so with Z flag clear
.a4ad	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; shift mantissa left
.a4b0	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a4b3	80 f3		bra $a4a8			bra 	_NSNormaliseLoop
.a4b5					_NSNExit:
.a4b5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a4b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.920d					AssignNumber:
.920d	5a		phy				phy
.920e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9211	85 36		sta $36				sta 	zTemp0
.9213	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9216	85 37		sta $37				sta 	zTemp0+1
.9218	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.921b	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.921d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9220	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9222	c9 08		cmp #$08			cmp 	#NSTFloat
.9224	f0 2a		beq $9250			beq 	_ANFloat
.9226	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9229	f0 05		beq $9230			beq		_ANNotFloat
.922b	e8		inx				inx
.922c	20 08 a4	jsr $a408			jsr 	FloatIntegerPart 			; make it an integer
.922f	ca		dex				dex
.9230					_ANNotFloat:
.9230	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9233	29 03		and #$03			and 	#3
.9235	d0 05		bne $923c			bne 	_ANByteWord
.9237	20 5c 92	jsr $925c			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.923a	80 1e		bra $925a			bra 	_ANExit
.923c					_ANByteWord:
.923c	48		pha				pha 								; save count
.923d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9240	92 36		sta ($36)			sta 	(zTemp0)
.9242	68		pla				pla
.9243	c9 01		cmp #$01			cmp	 	#1
.9245	f0 13		beq $925a			beq 	_ANExit
.9247	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.924a	a0 01		ldy #$01			ldy 	#1
.924c	91 36		sta ($36),y			sta 	(zTemp0),y
.924e	80 0a		bra $925a			bra 	_ANExit
.9250					_ANFloat:
.9250	20 5c 92	jsr $925c			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9253	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9256	a0 04		ldy #$04			ldy 	#4
.9258	91 36		sta ($36),y			sta 	(zTemp0),y
.925a					_ANExit:
.925a	7a		ply				ply
.925b	60		rts				rts
.925c					_ANCopy4PackSign:
.925c	a0 03		ldy #$03			ldy 	#3
.925e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9261	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9263	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9266	91 36		sta ($36),y			sta 	(zTemp0),y
.9268	88		dey				dey
.9269	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.926c	91 36		sta ($36),y			sta 	(zTemp0),y
.926e	88		dey				dey
.926f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9272	91 36		sta ($36),y			sta 	(zTemp0),y
.9274	88		dey				dey
.9275	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9278	91 36		sta ($36),y			sta 	(zTemp0),y
.927a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.927b					AssignString:
.927b	5a		phy				phy
.927c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.927f	85 38		sta $38				sta 	zTemp1
.9281	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9284	85 39		sta $39				sta 	zTemp1+1
.9286	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9289	85 36		sta $36				sta 	zTemp0
.928b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.928e	85 37		sta $37				sta 	zTemp0+1
.9290	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9292	b1 36		lda ($36),y			lda 	(zTemp0),y
.9294	f0 23		beq $92b9			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9296	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9297	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9299	e9 02		sbc #$02			sbc 	#2
.929b	85 3c		sta $3c				sta 	zsTemp
.929d	a0 01		ldy #$01			ldy 	#1
.929f	b1 36		lda ($36),y			lda 	(zTemp0),y
.92a1	e9 00		sbc #$00			sbc 	#0
.92a3	85 3d		sta $3d				sta 	zsTemp+1
.92a5	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.92a7					_ASGetLength:
.92a7	c8		iny				iny
.92a8	b1 38		lda ($38),y			lda 	(zTemp1),y
.92aa	d0 fb		bne $92a7			bne 	_ASGetLength
.92ac	98		tya				tya 								; is this length <= current length
.92ad	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.92af	90 20		bcc $92d1			bcc 	_ASCopyString
.92b1	f0 1e		beq $92d1			beq 	_ASCopyString
.92b3	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.92b5	a0 01		ldy #$01			ldy 	#1
.92b7	91 3c		sta ($3c),y			sta 	(zsTemp),y
.92b9					_ASNewStringRequired:
.92b9	e8		inx				inx 								; concrete the new string.
.92ba	20 8a a9	jsr $a98a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.92bd	ca		dex				dex
.92be	18		clc				clc
.92bf	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.92c2	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.92c4	92 36		sta ($36)			sta 	(zTemp0)
.92c6	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.92c9	69 00		adc #$00			adc 	#0
.92cb	a0 01		ldy #$01			ldy 	#1
.92cd	91 36		sta ($36),y			sta 	(zTemp0),y
.92cf	80 0d		bra $92de			bra 	_ASExit
.92d1					_ASCopyString:
.92d1	a0 00		ldy #$00			ldy 	#0
.92d3					_ASCopyLoop:
.92d3	b1 38		lda ($38),y			lda 	(zTemp1),y
.92d5	c8		iny				iny
.92d6	c8		iny				iny
.92d7	91 3c		sta ($3c),y			sta 	(zsTemp),y
.92d9	88		dey				dey
.92da	c9 00		cmp #$00			cmp 	#0
.92dc	d0 f5		bne $92d3			bne 	_ASCopyLoop
.92de					_ASExit:
.92de	7a		ply				ply
.92df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.92e0					DereferenceTopTwo:
.92e0	e8		inx				inx
.92e1	20 e5 92	jsr $92e5			jsr 	Dereference 				; deref x+1
.92e4	ca		dex				dex  								; falls through to deref x
.92e5					Dereference:
.92e5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.92e8	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.92ea	f0 57		beq $9343			beq 	_DRFExit 					; not a reference
.92ec	5a		phy				phy
.92ed	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.92f0	85 36		sta $36				sta 	zTemp0
.92f2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92f5	85 37		sta $37				sta 	zTemp0+1
.92f7	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.92fa	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.92fc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.92ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9302	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9304	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9306	f0 0f		beq $9317			beq 	_DRFDereferenceTwo
.9308	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.930a	f0 39		beq $9345			beq 	_DRFFull
.930c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.930f	29 03		and #$03			and 	#3
.9311	f0 32		beq $9345			beq 	_DRFFull 					; the whole word
.9313	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9315	f0 07		beq $931e			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9317					_DRFDereferenceTwo:
.9317	a0 01		ldy #$01			ldy 	#1
.9319	b1 36		lda ($36),y			lda 	(zTemp0),y
.931b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.931e					_DRFClear23:
.931e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9321	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9324	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9327	29 18		and #$18			and 	#NSBTypeMask
.9329	9d 00 04	sta $0400,x			sta 	NSStatus,x
.932c	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.932e	d0 12		bne $9342			bne 	_DRFNotString
.9330	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9333	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9336	d0 0a		bne $9342			bne 	_DRFNotString
.9338	a9 44		lda #$44			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.933a	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.933d	a9 93		lda #$93			lda 	#_DRFNullString >> 8
.933f	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9342					_DRFNotString
.9342	7a		ply				ply 								; restore Y and exit
.9343					_DRFExit:
.9343	60		rts				rts
.9344					_DRFNullString:
>9344	00						.byte 	0
.9345					_DRFFull:
.9345	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9347	b1 36		lda ($36),y			lda 	(zTemp0),y
.9349	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.934c	c8		iny				iny
.934d	b1 36		lda ($36),y			lda 	(zTemp0),y
.934f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9352	c8		iny				iny
.9353	b1 36		lda ($36),y			lda 	(zTemp0),y
.9355	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9358	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.935b	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.935e	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9360	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9363	f0 06		beq $936b			beq 	_DRFNoExponent
.9365	c8		iny				iny 								; if not, read the exponent as well.
.9366	b1 36		lda ($36),y			lda 	(zTemp0),y
.9368	9d 28 04	sta $0428,x			sta 	NSExponent,x
.936b					_DRFNoExponent:
.936b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.936e	10 0d		bpl $937d			bpl 	_DRFExit2 					; if not, then exit.
.9370	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9372	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9375	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9378	09 80		ora #$80			ora 	#NSBIsNegative
.937a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.937d					_DRFExit2:
.937d	7a		ply				ply
.937e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.937f					EncodeNumberStart:
.937f	38		sec				sec
.9380	80 01		bra $9383			bra 	EncodeNumberContinue+1
.9382					EncodeNumberContinue:
.9382	18		clc				clc
.9383					EncodeNumber:
.9383	08		php				php 								; save reset.
.9384	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9386	f0 12		beq $939a			beq 	_ENIsOkay
.9388	c9 30		cmp #$30			cmp 	#"0"
.938a	90 04		bcc $9390			bcc 	_ENBadNumber
.938c	c9 3a		cmp #$3a			cmp 	#"9"+1
.938e	90 0a		bcc $939a			bcc 	_ENIsOkay
.9390					_ENBadNumber:
.9390	28		plp				plp 								; throw saved reset
.9391	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9394	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9396	f0 7e		beq $9416			beq 	_ENConstructFinal
.9398					_ENFail:
.9398	18		clc				clc 								; not allowed
.9399	60		rts				rts
.939a					_ENIsOkay:
.939a	28		plp				plp 								; are we restarting
.939b	90 15		bcc $93b2			bcc 	_ENNoRestart
.939d					_ENStartEncode:
.939d	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.939f	f0 0c		beq $93ad			beq 	_ENFirstDP
.93a1	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.93a3	20 81 99	jsr $9981			jsr 	NSMSetByte
.93a6	a9 01		lda #$01			lda 	#ESTA_Low
.93a8					_ENExitChange:
.93a8	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.93ab	38		sec				sec
.93ac	60		rts				rts
.93ad					_ENFirstDP:
.93ad	20 7f 99	jsr $997f			jsr 	NSMSetZero 					; clear integer part
.93b0	80 3f		bra $93f1			bra 	_ESTASwitchFloat			; go straight to float and exi
.93b2					_ENNoRestart:
.93b2	48		pha				pha 								; save on stack.
.93b3	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.93b6	c9 01		cmp #$01			cmp 	#ESTA_Low
.93b8	f0 09		beq $93c3			beq  	_ESTALowState
.93ba	c9 02		cmp #$02			cmp 	#ESTA_High
.93bc	f0 29		beq $93e7			beq 	_ESTAHighState
.93be	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.93c0	f0 3b		beq $93fd			beq 	_ESTADecimalState
>93c2	db						.byte 	$DB 						; causes a break in the emulator
.93c3					_ESTALowState:
.93c3	68		pla				pla 								; get value back
.93c4	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.93c6	f0 29		beq $93f1			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.93c8	29 0f		and #$0f			and 	#15 						; make digit
.93ca	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.93cd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.93d0	0a		asl a				asl 	a
.93d1	0a		asl a				asl 	a
.93d2	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.93d5	0a		asl a				asl 	a
.93d6	6d 86 04	adc $0486			adc 	DigitTemp
.93d9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93dc	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.93de	90 05		bcc $93e5			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.93e0	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.93e2	8d 85 04	sta $0485			sta 	EncodeState
.93e5					_ESTANoSwitch:
.93e5	38		sec				sec
.93e6	60		rts				rts
.93e7					_ESTAHighState:
.93e7	68		pla				pla 								; get value back
.93e8	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.93ea	f0 05		beq $93f1			beq 	_ESTASwitchFloat
.93ec	20 50 94	jsr $9450			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.93ef	38		sec				sec
.93f0	60		rts				rts
.93f1					_ESTASwitchFloat:
.93f1	9c 87 04	stz $0487			stz 	DecimalCount
.93f4	e8		inx				inx 								; zero the decimal additive.
.93f5	20 7f 99	jsr $997f			jsr 	NSMSetZero
.93f8	ca		dex				dex
.93f9	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.93fb	80 ab		bra $93a8			bra 	_ENExitChange
.93fd					_ESTADecimalState:
.93fd	68		pla				pla 								; digit.
.93fe	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9400	f0 96		beq $9398			beq 	_ENFail
.9402	e8		inx				inx 								; put digit into fractional part of X+1
.9403	20 50 94	jsr $9450			jsr 	ESTAShiftDigitIntoMantissa
.9406	ca		dex				dex
.9407	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.940a	ad 87 04	lda $0487			lda 	DecimalCount
.940d	c9 0b		cmp #$0b			cmp 	#11
.940f	f0 02		beq $9413			beq 	_ESTADSFail
.9411	38		sec				sec
.9412	60		rts				rts
.9413					_ESTADSFail:
.9413	4c eb a6	jmp $a6eb			jmp 	RangeError
.9416					_ENConstructFinal:
.9416	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9419	f0 33		beq $944e			beq 	_ENCFExit 					; no decimals
.941b	5a		phy				phy
.941c	0a		asl a				asl 	a 							; x 4 and CLC
.941d	0a		asl a				asl 	a
.941e	6d 87 04	adc $0487			adc 	DecimalCount
.9421	a8		tay				tay
.9422	b9 aa a6	lda $a6aa,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9425	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9428	b9 ab a6	lda $a6ab,y			lda 	DecimalScalarTable-5+1,y
.942b	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.942e	b9 ac a6	lda $a6ac,y			lda 	DecimalScalarTable-5+2,y
.9431	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9434	b9 ad a6	lda $a6ad,y			lda 	DecimalScalarTable-5+3,y
.9437	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.943a	b9 ae a6	lda $a6ae,y			lda 	DecimalScalarTable-5+4,y
.943d	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9440	a9 08		lda #$08			lda 	#NSTFloat
.9442	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9445	7a		ply				ply
.9446	e8		inx				inx 								; multiply decimal const by decimal scalar
.9447	20 32 a4	jsr $a432			jsr 	FloatMultiply
.944a	ca		dex				dex
.944b	20 c7 a2	jsr $a2c7			jsr 	FloatAdd 					; add to integer part.
.944e					_ENCFExit:
.944e	18		clc				clc 								; reject the digit.
.944f	60		rts				rts
.9450					ESTAShiftDigitIntoMantissa:
.9450	29 0f		and #$0f			and 	#15 						; save digit
.9452	48		pha				pha
.9453	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9456	48		pha				pha
.9457	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.945a	48		pha				pha
.945b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.945e	48		pha				pha
.945f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9462	48		pha				pha
.9463	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; x 2
.9466	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; x 4
.9469	18		clc				clc 								; pop mantissa and add
.946a	68		pla				pla
.946b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.946e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9471	68		pla				pla
.9472	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9475	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9478	68		pla				pla
.9479	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.947c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.947f	68		pla				pla
.9480	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9483	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9486	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; x 10
.9489	68		pla				pla 								; add digit
.948a	18		clc				clc
.948b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.948e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9491	90 0d		bcc $94a0			bcc 	_ESTASDExit
.9493	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9496	d0 08		bne $94a0			bne 	_ESTASDExit
.9498	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.949b	d0 03		bne $94a0			bne 	_ESTASDExit
.949d	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.94a0					_ESTASDExit:
.94a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.94a1					EvaluateTerm:
.94a1	b1 30		lda ($30),y			lda 	(codePtr),y
.94a3	30 18		bmi $94bd			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.94a5	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.94a7	b0 6f		bcs $9518			bcs 	_ETVariable
.94a9	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.94ab	90 6e		bcc $951b			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.94ad	c9 3a		cmp #$3a			cmp 	#'9'+1
.94af	b0 6a		bcs $951b			bcs 	_ETPuncUnary
.94b1	20 7f 93	jsr $937f			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.94b4					_ETNumber:
.94b4	c8		iny				iny 								; keep encoding until we have the numbers
.94b5	b1 30		lda ($30),y			lda 	(codePtr),y
.94b7	20 82 93	jsr $9382			jsr 	EncodeNumberContinue
.94ba	b0 f8		bcs $94b4			bcs 	_ETNumber 					; go back if accepted.
.94bc	60		rts				rts
.94bd					_ETCheckUnary:
.94bd	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.94bf	f0 41		beq $9502			beq 	_ETString
.94c1	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.94c3	f0 12		beq $94d7			beq 	_ETHexConstant
.94c5	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.94c7	90 0b		bcc $94d4			bcc 	_ETSyntaxError
.94c9	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.94cb	b0 07		bcs $94d4			bcs 	_ETSyntaxError
.94cd	da		phx				phx 								; push X on the stack
.94ce	0a		asl a				asl 	a 							; put vector x 2 into X
.94cf	aa		tax				tax
.94d0	c8		iny				iny 								; consume unary function token
.94d1	7c 8e 8a	jmp ($8a8e,x)			jmp 	(VectorSet0,x) 				; and do it.
.94d4					_ETSyntaxError:
.94d4	4c e6 a6	jmp $a6e6			jmp 	SyntaxError
.94d7					_ETHexConstant:
.94d7	c8		iny				iny 								; skip #
.94d8	c8		iny				iny 								; skip count
.94d9	20 7f 99	jsr $997f			jsr 	NSMSetZero 					; clear result
.94dc					_ETHLoop:
.94dc	b1 30		lda ($30),y			lda 	(codePtr),y
.94de	c8		iny				iny 								; and consume
.94df	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.94e1	f0 1e		beq $9501			beq 	_ETHExit
.94e3	48		pha				pha 								; save on stack.
.94e4	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; x 2
.94e7	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; x 4
.94ea	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; x 8
.94ed	20 94 99	jsr $9994			jsr 	NSMShiftLeft 				; x 16
.94f0	68		pla				pla 								; ASCII
.94f1	c9 41		cmp #$41			cmp 	#'A'
.94f3	90 02		bcc $94f7			bcc 	_ETHNotChar
.94f5	e9 07		sbc #$07			sbc 	#7
.94f7					_ETHNotChar:
.94f7	29 0f		and #$0f			and 	#15 						; digit now
.94f9	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.94fc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94ff	80 db		bra $94dc			bra 	_ETHLoop 					; go round.
.9501					_ETHExit:
.9501	60		rts				rts
.9502					_ETString:
.9502	c8		iny				iny 								; look at length
.9503	b1 30		lda ($30),y			lda 	(codePtr),y
.9505	48		pha				pha
.9506	c8		iny				iny 								; first character
.9507	20 c9 99	jsr $99c9			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.950a	68		pla				pla 								; restore count and save
.950b	85 36		sta $36				sta 	zTemp0
.950d	98		tya				tya 								; add length to Y to skip it.
.950e	18		clc				clc
.950f	65 36		adc $36				adc 	zTemp0
.9511	a8		tay				tay
.9512	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9514	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9517	60		rts				rts
.9518					_ETVariable:
.9518	4c 72 95	jmp $9572			jmp 	VariableHandler
.951b					_ETPuncUnary:
.951b	c8		iny				iny 								; consume the unary character
.951c	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.951e	f0 2d		beq $954d			beq 	_ETUnaryNegate
.9520	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9522	f0 39		beq $955d			beq 	_ETDereference
.9524	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9526	f0 43		beq $956b			beq 	_ETParenthesis
.9528	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.952a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.952c	f0 06		beq $9534			beq 	_ETIndirection
.952e	e6 36		inc $36				inc 	zTemp0
.9530	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9532	d0 a0		bne $94d4			bne 	_ETSyntaxError
.9534					_ETIndirection:
.9534	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9536	1a		inc a				inc 	a
.9537	48		pha				pha
.9538	20 a1 94	jsr $94a1			jsr 	EvaluateTerm				; evaluate the term
.953b	20 e5 92	jsr $92e5			jsr 	Dereference 				; dereference it.
.953e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9541	d0 07		bne $954a			bne 	_ETTypeMismatch
.9543	68		pla				pla 								; indirection 1-2
.9544	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9546	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9549	60		rts				rts
.954a					_ETTypeMismatch:
.954a	4c f0 a6	jmp $a6f0			jmp 	TypeError
.954d					_ETUnaryNegate:
.954d	20 a1 94	jsr $94a1			jsr 	EvaluateTerm				; evaluate the term
.9550	20 e5 92	jsr $92e5			jsr 	Dereference 				; dereference it.
.9553	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9556	29 10		and #$10			and 	#NSTString
.9558	d0 f0		bne $954a			bne 	_ETTypeMismatch
.955a	4c 2b 99	jmp $992b			jmp 	NSMNegate  					; just toggles the sign bit.
.955d					_ETDereference:
.955d	20 a1 94	jsr $94a1			jsr 	EvaluateTerm				; evaluate the term
.9560	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9563	29 20		and #$20			and 	#NSBIsReference
.9565	f0 e3		beq $954a			beq 	_ETTypeMismatch
.9567	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.956a	60		rts				rts
.956b					_ETParenthesis:
.956b	20 d0 91	jsr $91d0			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.956e	20 00 a1	jsr $a100			jsr 	CheckRightBracket 			; check for )
.9571	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9572					VariableHandler:
.9572	b1 30		lda ($30),y			lda 	(codePtr),y
.9574	18		clc				clc
.9575	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9577	85 37		sta $37				sta 	zTemp0+1
.9579	c8		iny				iny
.957a	b1 30		lda ($30),y			lda 	(codePtr),y
.957c	85 36		sta $36				sta 	zTemp0
.957e	c8		iny				iny
.957f	18		clc				clc									; copy variable address+3 to mantissa
.9580	69 03		adc #$03			adc 	#3
.9582	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9585	a5 37		lda $37				lda 	zTemp0+1
.9587	69 00		adc #$00			adc 	#0
.9589	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.958c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.958f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9592	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9595	5a		phy				phy
.9596	a0 02		ldy #$02			ldy 	#2 							; read type
.9598	b1 36		lda ($36),y			lda 	(zTemp0),y
.959a	7a		ply				ply
.959b	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.959d	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.959f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95a2	29 04		and #$04			and 	#NSBIsArray
.95a4	d0 01		bne $95a7			bne 	_VHArray
.95a6	60		rts				rts
.95a7					_VHArray:
.95a7	e8		inx				inx
.95a8	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger 		; get the 1st index.
.95ab	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.95ad	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.95b0	b1 30		lda ($30),y			lda 	(codePtr),y
.95b2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.95b4	d0 06		bne $95bc			bne 	_VHNoSecondIndex
.95b6	c8		iny				iny 								; skip the comma
.95b7	e8		inx				inx
.95b8	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.95bb	ca		dex				dex
.95bc					_VHNoSecondIndex:
.95bc	ca		dex				dex 								; set X back.
.95bd	20 00 a1	jsr $a100			jsr 	CheckRightBracket 			; and check the right bracket.
.95c0	5a		phy				phy 								; save position
.95c1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.95c4	85 3e		sta $3e				sta 	zaTemp
.95c6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95c9	85 3f		sta $3f				sta 	zaTemp+1
.95cb	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.95cd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95cf	f0 02		beq $95d3			beq 	_VHHas2Mask
.95d1	a9 ff		lda #$ff			lda 	#$FF
.95d3					_VHHas2Mask:
.95d3	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.95d6	f0 54		beq $962c			beq 	_VHBadIndex
.95d8	0a		asl a				asl 	a 							; carry will be set if a second index
.95d9	90 09		bcc $95e4			bcc 	_VHCheckFirstIndex
.95db	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.95dd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95df	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.95e2	90 48		bcc $962c			bcc 	_VHBadIndex
.95e4					_VHCheckFirstIndex:
.95e4	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.95e6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95e8	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.95eb	90 3f		bcc $962c			bcc 	_VHBadIndex
.95ed	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.95ef	64 37		stz $37				stz 	zTemp0+1
.95f1	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.95f4	30 0f		bmi $9605			bmi 	_VHNoMultiply
.95f6	da		phx				phx
.95f7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.95fa	48		pha				pha
.95fb	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.95fd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95ff	1a		inc a				inc 	a 							; add 1 for zero base
.9600	fa		plx				plx
.9601	20 82 a5	jsr $a582			jsr 	Multiply8x8 				; calculate -> Z0
.9604	fa		plx				plx
.9605					_VHNoMultiply:
.9605	18		clc				clc
.9606	a5 36		lda $36				lda 	zTemp0
.9608	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.960b	85 36		sta $36				sta 	zTemp0
.960d	a5 37		lda $37				lda 	zTemp0+1
.960f	69 00		adc #$00			adc 	#0
.9611	85 37		sta $37				sta 	zTemp0+1
.9613	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9616	20 f3 84	jsr $84f3			jsr 	ScaleByBaseType
.9619	18		clc				clc
.961a	b2 3e		lda ($3e)			lda 	(zaTemp)
.961c	65 36		adc $36				adc 	zTemp0
.961e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9621	a0 01		ldy #$01			ldy 	#1
.9623	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9625	65 37		adc $37				adc 	zTemp0+1
.9627	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.962a	7a		ply				ply 								; restore position
.962b	60		rts				rts
.962c					_VHBadIndex:
.962c	a9 17		lda #$17		lda	#23
.962e	4c c7 8d	jmp $8dc7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a4b8					AbsUnary:
.a4b8	fa		plx				plx 								; restore stack pos
.a4b9	20 d3 98	jsr $98d3			jsr 	EvaluateNumber 				; get a float or int
.a4bc	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.a4bf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a4c2	29 7f		and #$7f			and 	#$7F
.a4c4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a4c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9631					AllocUnary:
.9631	fa		plx				plx 								; restore stack pos
.9632	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger		; get bytes required.
.9635	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.9638	da		phx				phx 								; save X/Y
.9639	5a		phy				phy
.963a	8a		txa				txa 								; copy X into Y
.963b	a8		tay				tay
.963c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.963f	aa		tax				tax
.9640	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9643	20 50 96	jsr $9650			jsr 	AllocateXABytes 			; allocate memory
.9646	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9649	8a		txa				txa
.964a	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.964d	7a		ply				ply
.964e	fa		plx				plx
.964f	60		rts				rts
.9650					AllocateXABytes:
.9650	5a		phy				phy
.9651	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9654	84 36		sty $36				sty 	zTemp0
.9656	5a		phy				phy
.9657	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.965a	84 37		sty $37				sty 	zTemp0+1
.965c	5a		phy				phy
.965d	18		clc				clc 								; add to low memory pointer
.965e	6d 8c 04	adc $048c			adc 	lowMemPtr
.9661	8d 8c 04	sta $048c			sta 	lowMemPtr
.9664	8a		txa				txa
.9665	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9668	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.966b	b0 2f		bcs $969c			bcs 	CISSMemory
.966d	20 8e 96	jsr $968e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9670					_ClearMemory:
.9670	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9673	c5 36		cmp $36				cmp 	zTemp0
.9675	d0 07		bne $967e			bne 	_CMClearNext
.9677	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.967a	c5 37		cmp $37				cmp 	zTemp0+1
.967c	f0 0c		beq $968a			beq 	_CMExit
.967e					_CMClearNext:
.967e	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9680	92 36		sta ($36)			sta 	(zTemp0)
.9682	e6 36		inc $36				inc 	zTemp0
.9684	d0 ea		bne $9670			bne 	_ClearMemory
.9686	e6 37		inc $37				inc		zTemp0+1
.9688	80 e6		bra $9670			bra 	_ClearMemory
.968a					_CMExit:
.968a	fa		plx				plx
.968b	68		pla				pla
.968c	7a		ply				ply
.968d	60		rts				rts
.968e					CheckIdentifierStringSpace:
.968e	48		pha				pha
.968f	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9692	18		clc				clc
.9693	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9695	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9698	b0 02		bcs $969c			bcs 	CISSMemory
.969a	68		pla				pla
.969b	60		rts				rts
.969c					CISSMemory:
.969c	a9 06		lda #$06		lda	#6
.969e	4c c7 8d	jmp $8dc7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a4c8					AscUnary:
.a4c8	fa		plx				plx 								; restore stack pos
.a4c9	20 de 98	jsr $98de			jsr 	EvaluateString 				; get a string
.a4cc	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a4ce	20 81 99	jsr $9981			jsr 	NSMSetByte
.a4d1	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.a4d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a4d5					FracUnary:
.a4d5	fa		plx				plx 								; restore stack pos
.a4d6	20 d3 98	jsr $98d3			jsr 	EvaluateNumber 				; get a float or int
.a4d9	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.a4dc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4df	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a4e1	f0 04		beq $a4e7			beq 	_IUZero
.a4e3	20 a5 a3	jsr $a3a5			jsr 	FloatFractionalPart
.a4e6	60		rts				rts
.a4e7					_IUZero:
.a4e7	20 7f 99	jsr $997f			jsr 	NSMSetZero
.a4ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a4eb					IntUnary:
.a4eb	fa		plx				plx 								; restore stack pos
.a4ec	20 d3 98	jsr $98d3			jsr 	EvaluateNumber 				; get a float or int
.a4ef	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.a4f2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4f5	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a4f7	f0 03		beq $a4fc			beq 	_IUExit
.a4f9	20 08 a4	jsr $a408			jsr 	FloatIntegerPart
.a4fc					_IUExit:
.a4fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a4fd					LenUnary:
.a4fd	fa		plx				plx 								; restore stack pos
.a4fe	20 de 98	jsr $98de			jsr 	EvaluateString 				; get a string
.a501	5a		phy				phy
.a502	a0 00		ldy #$00			ldy 	#0 							; find length
.a504					_LenFind:
.a504	b1 36		lda ($36),y			lda 	(zTemp0),y
.a506	f0 06		beq $a50e			beq 	_LenExit
.a508	c8		iny				iny
.a509	d0 f9		bne $a504			bne 	_LenFind
.a50b	4c eb a6	jmp $a6eb			jmp 	RangeError 					; string > 255
.a50e					_LenExit:
.a50e	98		tya				tya
.a50f	20 81 99	jsr $9981			jsr 	NSMSetByte
.a512	7a		ply				ply
.a513	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.a516	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.96a1					Unary_Not:
.96a1	fa		plx				plx
.96a2	20 f6 98	jsr $98f6			jsr 	EvaluateInteger 			; get integer
.96a5	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.96a8	20 af 99	jsr $99af			jsr 	NSMIsZero 					; zero mantissa ?
.96ab	f0 04		beq $96b1			beq 	_NotZero
.96ad	20 7f 99	jsr $997f			jsr 	NSMSetZero
.96b0	60		rts				rts
.96b1					_NotZero:
.96b1	4c 34 8e	jmp $8e34			jmp 	ReturnTrue
.96b4					_UNBad:
.96b4	4c f5 a6	jmp $a6f5			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.96b7					Unary_Random:
.96b7	fa		plx				plx
.96b8	20 30 97	jsr $9730			jsr 	Random32Bit 				; get a random number
.96bb	20 15 97	jsr $9715			jsr 	URCopyToMantissa  			; put in mantissa
.96be	e8		inx				inx
.96bf	20 0b 99	jsr $990b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.96c2	ca		dex				dex
.96c3	20 84 a1	jsr $a184			jsr 	IntegerModulusNoCheck 		; calculate modulus
.96c6	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.96c9	9e 28 04	stz $0428,x			stz 	NSExponent,x
.96cc	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.96cf	60		rts				rts
.96d0					Unary_Rnd:
.96d0	fa		plx				plx
.96d1	20 d3 98	jsr $98d3			jsr 	EvaluateNumber 				; number to use.
.96d4	20 00 a1	jsr $a100			jsr 	CheckRightBracket 			; closing bracket
.96d7	20 af 99	jsr $99af			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.96da	f0 2b		beq $9707			beq 	_URCopySeed
.96dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.96df	10 23		bpl $9704			bpl 	_URDontSeed
.96e1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.96e4	49 17		eor #$17			eor 	#$17
.96e6	8d 88 04	sta $0488			sta 	RandomSeed+0
.96e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96ec	49 a5		eor #$a5			eor 	#$A5
.96ee	8d 89 04	sta $0489			sta 	RandomSeed+1
.96f1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.96f4	49 c2		eor #$c2			eor 	#$C2
.96f6	8d 8a 04	sta $048a			sta 	RandomSeed+2
.96f9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.96fc	49 9d		eor #$9d			eor 	#$9D
.96fe	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9701	20 30 97	jsr $9730			jsr 	Random32Bit
.9704					_URDontSeed:
.9704	20 30 97	jsr $9730			jsr 	Random32Bit 				; generate a number.
.9707					_URCopySeed:
.9707	20 15 97	jsr $9715			jsr 	URCopyToMantissa 			; copy into mantissa
.970a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.970c	8d 28 04	sta $0428			sta 	NSExponent
.970f	a9 08		lda #$08			lda 	#NSTFloat
.9711	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9714	60		rts				rts
.9715					URCopyToMantissa:
.9715	ad 88 04	lda $0488			lda 	RandomSeed+0
.9718	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.971b	ad 89 04	lda $0489			lda 	RandomSeed+1
.971e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9721	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9724	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9727	ad 8b 04	lda $048b			lda 	RandomSeed+3
.972a	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.972c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.972f	60		rts				rts
.9730					Random32Bit:
.9730	5a		phy				phy
.9731	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9733	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9736	d0 03		bne $973b			bne 	_Random1
.9738	a8		tay				tay 								; if so do it 256 times
.9739	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.973b					_Random1:
.973b	0a		asl a				asl 	a 							; LSFR RNG
.973c	2e 89 04	rol $0489			rol 	RandomSeed+1
.973f	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9742	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9745	90 02		bcc $9749			bcc 	_Random2
.9747	49 c5		eor #$c5			eor 	#$C5
.9749					_Random2:
.9749	88		dey				dey
.974a	d0 ef		bne $973b			bne 	_Random1
.974c	8d 88 04	sta $0488			sta 	RandomSeed+0
.974f	7a		ply				ply
.9750	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a517					SgnUnary:
.a517	fa		plx				plx 								; restore stack pos
.a518	20 d3 98	jsr $98d3			jsr 	EvaluateNumber 				; get a float or int
.a51b	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.a51e	20 af 99	jsr $99af			jsr 	NSMIsZero 					; if zero
.a521	f0 10		beq $a533			beq 	_SGZero  					; return Int Zero
.a523	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a526	48		pha				pha
.a527	a9 01		lda #$01			lda 	#1 							; set to 1
.a529	20 81 99	jsr $9981			jsr 	NSMSetByte
.a52c	68		pla				pla
.a52d	29 80		and #$80			and		#$80 						; copy the sign byte out
.a52f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a532	60		rts				rts
.a533	20 7f 99	jsr $997f	_SGZero:jsr 	NSMSetZero
.a536	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a537					ValUnary:
.a537	fa		plx				plx 								; restore stack pos
.a538	20 4d a5	jsr $a54d			jsr 	ValMainCode 				; do the main val() code
.a53b	b0 01		bcs $a53e			bcs 	_VUError 					; couldn't convert
.a53d	60		rts				rts
.a53e					_VUError:
.a53e	4c f0 a6	jmp $a6f0			jmp 	TypeError
.a541					IsValUnary:
.a541	fa		plx				plx 								; restore stack pos
.a542	20 4d a5	jsr $a54d			jsr 	ValMainCode 				; do the main val() code
.a545	b0 03		bcs $a54a			bcs 	_VUBad
.a547	4c 34 8e	jmp $8e34			jmp 	ReturnTrue
.a54a					_VUBad:
.a54a	4c 40 8e	jmp $8e40			jmp 	ReturnFalse
.a54d					ValMainCode:
.a54d	20 de 98	jsr $98de			jsr 	EvaluateString 				; get a string
.a550	20 00 a1	jsr $a100			jsr 	CheckRightBracket 			; check right bracket present
.a553	5a		phy				phy
.a554	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a556	f0 17		beq $a56f			beq 	_VMCFail2
.a558	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a55a	48		pha				pha 								; save first character
.a55b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a55d	d0 01		bne $a560			bne 	_VMCStart
.a55f	c8		iny				iny 								; skip over -
.a560					_VMCStart:
.a560	38		sec				sec 								; initialise first time round.
.a561					_VMCNext:
.a561	c8		iny				iny 								; pre-increment
.a562	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a564	f0 0c		beq $a572			beq 	_VMCSuccess 				; successful.
.a566	20 83 93	jsr $9383			jsr 	EncodeNumber 				; send it to the number-builder
.a569	90 03		bcc $a56e			bcc 	_VMCFail 					; if failed, give up.
.a56b	18		clc				clc 								; next time round, countinue
.a56c	80 f3		bra $a561			bra 	_VMCNext
.a56e					_VMCFail:
.a56e	68		pla				pla
.a56f					_VMCFail2:
.a56f	7a		ply				ply
.a570	38		sec				sec
.a571	60		rts				rts
.a572					_VMCSuccess:
.a572	a9 00		lda #$00			lda 	#0 							; construct final
.a574	20 83 93	jsr $9383			jsr 	EncodeNumber
.a577	68		pla				pla
.a578	c9 2d		cmp #$2d			cmp 	#"-"
.a57a	d0 03		bne $a57f			bne 	_VMCNotNegative
.a57c	20 2b 99	jsr $992b			jsr		NSMNegate
.a57f					_VMCNotNegative:
.a57f	7a		ply				ply
.a580	18		clc				clc
.a581	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9751					ChrUnary:
.9751	fa		plx				plx 								; restore stack pos
.9752	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger			; get value
.9755	48		pha				pha
.9756	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.9759	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.975b	20 0b aa	jsr $aa0b			jsr 	StringTempAllocate
.975e	68		pla				pla 								; write number to it
.975f	20 49 aa	jsr $aa49			jsr 	StringTempWrite
.9762	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9763					SpcUnary:
.9763	fa		plx				plx 								; restore stack pos
.9764	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger			; get value
.9767	5a		phy				phy
.9768	48		pha				pha 								; save count
.9769	20 0b aa	jsr $aa0b			jsr 	StringTempAllocate
.976c	7a		ply				ply 								; to do count in Y
.976d					_SpcLoop:
.976d	c0 00		cpy #$00			cpy 	#0
.976f	f0 08		beq $9779			beq 	_SpcExit
.9771	a9 20		lda #$20			lda 	#32
.9773	20 49 aa	jsr $aa49			jsr 	StringTempWrite
.9776	88		dey				dey
.9777	80 f4		bra $976d			bra 	_SPCLoop
.9779					_SpcExit:
.9779	7a		ply				ply
.977a	20 00 a1	jsr $a100			jsr 	CheckRightBracket
.977d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.977e					Unary_Str:
.977e	fa		plx				plx
.977f	20 d3 98	jsr $98d3			jsr 	EvaluateNumber  			; get number
.9782	20 00 a1	jsr $a100			jsr 	CheckRightBracket 			; closing bracket
.9785	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9787	20 a0 97	jsr $97a0			jsr 	ConvertNumberToString 		; do the conversion.
.978a	a9 21		lda #$21			lda		#33 						; create buffer
.978c	20 0b aa	jsr $aa0b			jsr 	StringTempAllocate 			; allocate memory
.978f	da		phx				phx
.9790	a2 00		ldx #$00			ldx 	#0
.9792					_USCopy:
.9792	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9795	20 49 aa	jsr $aa49			jsr 	StringTempWrite
.9798	e8		inx				inx
.9799	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.979c	d0 f4		bne $9792			bne 	_USCopy
.979e	fa		plx				plx
.979f	60		rts				rts
.97a0					ConvertNumberToString:
.97a0	5a		phy				phy 								; save code position
.97a1	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.97a4	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.97a7	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.97aa	10 0a		bpl $97b6			bpl 	_CNTSNotNegative
.97ac	29 7f		and #$7f			and 	#$7F 						; make +ve
.97ae	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97b1	a9 2d		lda #$2d			lda 	#"-"
.97b3	20 1c 98	jsr $981c			jsr 	WriteDecimalBuffer
.97b6					_CNTSNotNegative:
.97b6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.97b9	f0 15		beq $97d0			beq 	_CNTSNotFloat
.97bb	e8		inx				inx 								; round up
.97bc	a9 01		lda #$01			lda 	#1
.97be	20 81 99	jsr $9981			jsr 	NSMSetByte
.97c1	ca		dex				dex
.97c2	bd 28 04	lda $0428,x			lda		NSExponent,x
.97c5	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.97c8	a9 08		lda #$08			lda 	#NSTFloat
.97ca	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.97cd	20 c7 a2	jsr $a2c7			jsr 	FloatAdd
.97d0					_CNTSNotFloat:
.97d0	20 fe 97	jsr $97fe			jsr 	MakePlusTwoString
.97d3	20 a5 a3	jsr $a3a5			jsr 	FloatFractionalPart 		; get the fractional part
.97d6	20 69 a4	jsr $a469			jsr 	NSNormalise					; normalise , exit if zero
.97d9	f0 21		beq $97fc			beq 	_CNTSExit
.97db	a9 2e		lda #$2e			lda 	#"."
.97dd	20 1c 98	jsr $981c			jsr 	WriteDecimalBuffer 			; write decimal place
.97e0					_CNTSDecimal:
.97e0	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.97e3	30 17		bmi $97fc			bmi 	_CNTSExit
.97e5	e8		inx				inx 								; x 10.0
.97e6	a9 0a		lda #$0a			lda 	#10
.97e8	20 81 99	jsr $9981			jsr 	NSMSetByte
.97eb	a9 08		lda #$08			lda 	#NSTFloat
.97ed	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97f0	ca		dex				dex
.97f1	20 32 a4	jsr $a432			jsr 	FloatMultiply
.97f4	20 fe 97	jsr $97fe			jsr 	MakePlusTwoString
.97f7	20 a5 a3	jsr $a3a5			jsr 	FloatFractionalPart 		; get the fractional part
.97fa	80 e4		bra $97e0			bra 	_CNTSDecimal 				; keep going.
.97fc					_CNTSExit:
.97fc	7a		ply				ply
.97fd	60		rts				rts
.97fe					MakePlusTwoString:
.97fe	da		phx				phx
.97ff	20 56 99	jsr $9956			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9802	e8		inx				inx 								; access it
.9803	e8		inx				inx
.9804	20 08 a4	jsr $a408			jsr 	FloatIntegerPart 			; make it an integer
.9807	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9809	20 71 a2	jsr $a271			jsr 	ConvertInt32
.980c	a2 00		ldx #$00			ldx	 	#0
.980e					_MPTSCopy:
.980e	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9811	20 1c 98	jsr $981c			jsr 	WriteDecimalBuffer
.9814	e8		inx				inx
.9815	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9818	d0 f4		bne $980e			bne 	_MPTSCopy
.981a	fa		plx				plx
.981b	60		rts				rts
.981c					WriteDecimalBuffer:
.981c	da		phx				phx
.981d	ae 95 04	ldx $0495			ldx 	dbOffset
.9820	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9823	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9826	ee 95 04	inc $0495			inc 	dbOffset
.9829	fa		plx				plx
.982a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.982b					Unary_Left:
.982b	fa		plx				plx
.982c	18		clc				clc 								; only one parameter
.982d	20 a2 98	jsr $98a2			jsr 	SubstringInitial 			; set up.
.9830	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9833	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9836	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9839	80 2c		bra $9867			bra 	SubstringMain
.983b					Unary_Right:
.983b	fa		plx				plx
.983c	18		clc				clc 								; only one parameter
.983d	20 a2 98	jsr $98a2			jsr 	SubstringInitial 			; set up.
.9840	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9843	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9846	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9849	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.984c	b0 02		bcs $9850			bcs 	_URNotUnderflow
.984e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9850					_URNotUnderFlow:
.9850	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9853	80 12		bra $9867			bra 	SubStringMain
.9855					Unary_Mid:
.9855	fa		plx				plx
.9856	38		sec				sec 								; two parameters
.9857	20 a2 98	jsr $98a2			jsr 	SubstringInitial 			; set up.
.985a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.985d	f0 05		beq $9864			beq 	_UMError
.985f	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9862	80 03		bra $9867			bra 	SubStringMain
.9864					_UMError:
.9864	4c f5 a6	jmp $a6f5			jmp 	ArgumentError
.9867					SubStringMain:
.9867	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.986a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.986d	b0 2d		bcs $989c			bcs 	_SSMNull 					; if so, return an empty string.
.986f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9872	f0 28		beq $989c			beq 	_SSMNull 					; return empty string.
.9874	18		clc				clc 								; add the offset +1 to the address and
.9875	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9878	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.987b	85 36		sta $36				sta 	zTemp0
.987d	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9880	69 00		adc #$00			adc 	#0
.9882	85 37		sta $37				sta 	zTemp0+1
.9884					_SSMNoCarry:
.9884	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9887	20 0b aa	jsr $aa0b			jsr 	StringTempAllocate 			; allocate that many characters
.988a	5a		phy				phy 								; save Y
.988b	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.988d					_SSMCopy:
.988d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.988f	f0 09		beq $989a			beq 	_SSMEString 				; no more to copy
.9891	20 49 aa	jsr $aa49			jsr 	StringTempWrite 			; and write it out.
.9894	c8		iny				iny
.9895	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9898	d0 f3		bne $988d			bne 	_SSMCopy
.989a					_SSMEString:
.989a	7a		ply				ply
.989b					_SSMExit:
.989b	60		rts				rts
.989c					_SSMNull:
.989c	a9 00		lda #$00			lda 	#0
.989e	20 0b aa	jsr $aa0b			jsr 	StringTempAllocate
.98a1	60		rts				rts
.98a2					SubstringInitial:
.98a2	da		phx				phx 								; save initial stack position
.98a3	08		php				php 								; save carry on stack indicating 2 parameters
.98a4	20 de 98	jsr $98de			jsr 	EvaluateString 				; get a string
.98a7	5a		phy				phy 								; calculate length to exponent.
.98a8	a0 ff		ldy #$ff			ldy 	#$FF
.98aa					_SIFindLength:
.98aa	c8		iny				iny
.98ab	b1 36		lda ($36),y			lda 	(zTemp0),y
.98ad	d0 fb		bne $98aa			bne 	_SIFindLength
.98af	98		tya				tya
.98b0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.98b3	7a		ply				ply
.98b4	e8		inx				inx
.98b5	20 08 a1	jsr $a108			jsr 	CheckComma 					; comma next
.98b8	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger 		; get next parameter
.98bb	28		plp				plp 								; is it the last parameter ?
.98bc	90 07		bcc $98c5			bcc 	_SSIExit 					; if so, exit.
.98be	e8		inx				inx
.98bf	20 08 a1	jsr $a108			jsr 	CheckComma 					; comma next
.98c2	20 17 99	jsr $9917			jsr 	Evaluate8BitInteger 		; get last parameter
.98c5					_SSIExit:
.98c5	fa		plx				plx
.98c6	20 00 a1	jsr $a100			jsr 	CheckRightBracket 			; check closing bracket
.98c9	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.98ca					EvaluateValue:
.98ca	48		pha				pha
.98cb	20 d0 91	jsr $91d0			jsr		EvaluateExpression 			; expression
.98ce	20 e5 92	jsr $92e5			jsr 	Dereference					; derefernce it
.98d1	68		pla				pla
.98d2	60		rts				rts
.98d3					EvaluateNumber:
.98d3	20 ca 98	jsr $98ca			jsr 	EvaluateValue 				; get a value
.98d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.98d9	29 10		and #$10			and 	#NSBIsString
.98db	d0 16		bne $98f3			bne 	HelperTypeError
.98dd	60		rts				rts
.98de					EvaluateString:
.98de	20 ca 98	jsr $98ca			jsr 	EvaluateValue 				; get a value
.98e1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.98e4	29 10		and #$10			and 	#NSBIsString
.98e6	f0 0b		beq $98f3			beq 	HelperTypeError
.98e8					CopyAddressToTemp0:
.98e8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.98eb	85 36		sta $36				sta 	zTemp0
.98ed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98f0	85 37		sta $37				sta 	zTemp0+1
.98f2	60		rts				rts
.98f3					HelperTypeError:
.98f3	4c f0 a6	jmp $a6f0			jmp 	TypeError
.98f6					EvaluateInteger:
.98f6	20 d3 98	jsr $98d3			jsr 	EvaluateNumber
.98f9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.98fc	d0 0a		bne $9908			bne 	HelperValueError 			; if not, it's a float.
.98fe	60		rts				rts
.98ff					EvaluateUnsignedInteger:
.98ff	20 f6 98	jsr $98f6			jsr 	EvaluateInteger 			; check integer is +ve
.9902	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9905	30 01		bmi $9908			bmi 	HelperValueError
.9907	60		rts				rts
.9908					HelperValueError:
.9908	4c f5 a6	jmp $a6f5			jmp 	ArgumentError
.990b					Evaluate16BitInteger:
.990b	20 ff 98	jsr $98ff			jsr	 	EvaluateUnsignedInteger		; get integer
.990e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9911	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9914	d0 f2		bne $9908			bne 	HelperValueError
.9916	60		rts				rts
.9917					Evaluate8BitInteger:
.9917	20 ff 98	jsr $98ff			jsr	 	EvaluateUnsignedInteger 	; get an integer
.991a	d0 ec		bne $9908			bne 	HelperValueError
.991c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.991f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9922	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9925	d0 e1		bne $9908			bne 	HelperValueError
.9927	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.992a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a582					Multiply8x8:
.a582	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a583	85 36		sta $36			  	sta 	zTemp0
.a585	86 37		stx $37				stx 	zTemp0+1
.a587	a9 00		lda #$00			lda 	#0
.a589	a2 08		ldx #$08			ldx 	#8
.a58b					_M88Loop:
.a58b	90 03		bcc $a590			bcc 	_M88NoAdd
.a58d	18		clc				clc
.a58e	65 37		adc $37				adc 	zTemp0+1
.a590					_M88NoAdd:
.a590	6a		ror a				ror 	a
.a591	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a593	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a594	d0 f5		bne $a58b			bne 	_M88Loop
.a596	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a598	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.992b					NSMNegate:
.992b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.992e	49 80		eor #$80			eor 	#NSBIsNegative
.9930	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9933	60		rts				rts
.9934					NSMNegateMantissa:
.9934	38		sec				sec
.9935	a9 00		lda #$00			lda 	#0
.9937	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.993a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.993d	a9 00		lda #$00			lda 	#0
.993f	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9942	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9945	a9 00		lda #$00			lda 	#0
.9947	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.994a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.994d	a9 00		lda #$00			lda 	#0
.994f	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9952	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9955	60		rts				rts
.9956					NSMShiftUpTwo:
.9956	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9959	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.995c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.995f	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9962	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9965	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9968	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.996b	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.996e	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9971	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9974	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9977	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.997a	60		rts				rts
.997b					NSMSetZeroMantissaOnly:
.997b	a9 00		lda #$00			lda 	#0
.997d	80 08		bra $9987			bra 	NSMSetMantissa
.997f					NSMSetZero:
.997f	a9 00		lda #$00			lda 	#0
.9981					NSMSetByte:
.9981	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9984	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9987					NSMSetMantissa:
.9987	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.998a	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.998d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9990	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9993	60		rts				rts
.9994					NSMShiftLeft:
.9994	18		clc				clc
.9995					NSMRotateLeft:
.9995	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9998	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.999b	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.999e	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.99a1	60		rts				rts
.99a2					NSMShiftRight:
.99a2	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.99a5	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.99a8	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.99ab	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.99ae	60		rts				rts
.99af					NSMIsZero:
.99af	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.99b2	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.99b5	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.99b8	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.99bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a599					Assemble_ora:
.a599	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a59c	01					.byte $01
.a59d					Assemble_and:
.a59d	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a5a0	21					.byte $21
.a5a1					Assemble_eor:
.a5a1	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a5a4	41					.byte $41
.a5a5					Assemble_adc:
.a5a5	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a5a8	61					.byte $61
.a5a9					Assemble_sta:
.a5a9	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a5ac	81					.byte $81
.a5ad					Assemble_lda:
.a5ad	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a5b0	a1					.byte $a1
.a5b1					Assemble_cmp:
.a5b1	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a5b4	c1					.byte $c1
.a5b5					Assemble_sbc:
.a5b5	20 f2 80	jsr $80f2		jsr	AssembleGroup1
>a5b8	e1					.byte $e1
.a5b9					Assemble_asl:
.a5b9	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5bc	02					.byte $02
>a5bd	75					.byte $75
.a5be					Assemble_rol:
.a5be	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5c1	22					.byte $22
>a5c2	75					.byte $75
.a5c3					Assemble_lsr:
.a5c3	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5c6	42					.byte $42
>a5c7	75					.byte $75
.a5c8					Assemble_ror:
.a5c8	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5cb	62					.byte $62
>a5cc	75					.byte $75
.a5cd					Assemble_stx:
.a5cd	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5d0	82					.byte $82
>a5d1	50					.byte $50
.a5d2					Assemble_ldx:
.a5d2	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5d5	a2					.byte $a2
>a5d6	d0					.byte $d0
.a5d7					Assemble_dec:
.a5d7	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5da	c2					.byte $c2
>a5db	55					.byte $55
.a5dc					Assemble_inc:
.a5dc	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5df	e2					.byte $e2
>a5e0	55					.byte $55
.a5e1					Assemble_stz:
.a5e1	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5e4	60					.byte $60
>a5e5	44					.byte $44
.a5e6					Assemble_bit:
.a5e6	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5e9	20					.byte $20
>a5ea	55					.byte $55
.a5eb					Assemble_sty:
.a5eb	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5ee	80					.byte $80
>a5ef	54					.byte $54
.a5f0					Assemble_ldy:
.a5f0	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5f3	a0					.byte $a0
>a5f4	d5					.byte $d5
.a5f5					Assemble_cpy:
.a5f5	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5f8	c0					.byte $c0
>a5f9	d4					.byte $d4
.a5fa					Assemble_cpx:
.a5fa	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a5fd	e0					.byte $e0
>a5fe	d0					.byte $d0
.a5ff					Assemble_tsb:
.a5ff	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a602	00					.byte $00
>a603	50					.byte $50
.a604					Assemble_trb:
.a604	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a607	10					.byte $10
>a608	50					.byte $50
.a609					Assemble_jsr:
.a609	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a60c	14					.byte $14
>a60d	10					.byte $10
.a60e					Assemble_jmp:
.a60e	20 f9 80	jsr $80f9		jsr	AssembleGroup2
>a611	40					.byte $40
>a612	10					.byte $10
.a613					Assemble_bpl:
.a613	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a616	10					.byte $10
.a617					Assemble_bmi:
.a617	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a61a	30					.byte $30
.a61b					Assemble_bvc:
.a61b	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a61e	50					.byte $50
.a61f					Assemble_bvs:
.a61f	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a622	70					.byte $70
.a623					Assemble_bcc:
.a623	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a626	90					.byte $90
.a627					Assemble_bcs:
.a627	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a62a	b0					.byte $b0
.a62b					Assemble_bne:
.a62b	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a62e	d0					.byte $d0
.a62f					Assemble_beq:
.a62f	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a632	f0					.byte $f0
.a633					Assemble_bra:
.a633	20 4a 81	jsr $814a		jsr	AssembleGroup3
>a636	80					.byte $80
.a637					Assemble_brk:
.a637	20 80 81	jsr $8180		jsr	AssembleGroup4
>a63a	00					.byte $00
.a63b					Assemble_php:
.a63b	20 80 81	jsr $8180		jsr	AssembleGroup4
>a63e	08					.byte $08
.a63f					Assemble_clc:
.a63f	20 80 81	jsr $8180		jsr	AssembleGroup4
>a642	18					.byte $18
.a643					Assemble_plp:
.a643	20 80 81	jsr $8180		jsr	AssembleGroup4
>a646	28					.byte $28
.a647					Assemble_sec:
.a647	20 80 81	jsr $8180		jsr	AssembleGroup4
>a64a	38					.byte $38
.a64b					Assemble_rti:
.a64b	20 80 81	jsr $8180		jsr	AssembleGroup4
>a64e	40					.byte $40
.a64f					Assemble_pha:
.a64f	20 80 81	jsr $8180		jsr	AssembleGroup4
>a652	48					.byte $48
.a653					Assemble_cli:
.a653	20 80 81	jsr $8180		jsr	AssembleGroup4
>a656	58					.byte $58
.a657					Assemble_phy:
.a657	20 80 81	jsr $8180		jsr	AssembleGroup4
>a65a	5a					.byte $5a
.a65b					Assemble_rts:
.a65b	20 80 81	jsr $8180		jsr	AssembleGroup4
>a65e	60					.byte $60
.a65f					Assemble_pla:
.a65f	20 80 81	jsr $8180		jsr	AssembleGroup4
>a662	68					.byte $68
.a663					Assemble_sei:
.a663	20 80 81	jsr $8180		jsr	AssembleGroup4
>a666	78					.byte $78
.a667					Assemble_ply:
.a667	20 80 81	jsr $8180		jsr	AssembleGroup4
>a66a	7a					.byte $7a
.a66b					Assemble_dey:
.a66b	20 80 81	jsr $8180		jsr	AssembleGroup4
>a66e	88					.byte $88
.a66f					Assemble_txa:
.a66f	20 80 81	jsr $8180		jsr	AssembleGroup4
>a672	8a					.byte $8a
.a673					Assemble_tya:
.a673	20 80 81	jsr $8180		jsr	AssembleGroup4
>a676	98					.byte $98
.a677					Assemble_txs:
.a677	20 80 81	jsr $8180		jsr	AssembleGroup4
>a67a	9a					.byte $9a
.a67b					Assemble_tay:
.a67b	20 80 81	jsr $8180		jsr	AssembleGroup4
>a67e	a8					.byte $a8
.a67f					Assemble_tax:
.a67f	20 80 81	jsr $8180		jsr	AssembleGroup4
>a682	aa					.byte $aa
.a683					Assemble_clv:
.a683	20 80 81	jsr $8180		jsr	AssembleGroup4
>a686	b8					.byte $b8
.a687					Assemble_tsx:
.a687	20 80 81	jsr $8180		jsr	AssembleGroup4
>a68a	ba					.byte $ba
.a68b					Assemble_iny:
.a68b	20 80 81	jsr $8180		jsr	AssembleGroup4
>a68e	c8					.byte $c8
.a68f					Assemble_dex:
.a68f	20 80 81	jsr $8180		jsr	AssembleGroup4
>a692	ca					.byte $ca
.a693					Assemble_cld:
.a693	20 80 81	jsr $8180		jsr	AssembleGroup4
>a696	d8					.byte $d8
.a697					Assemble_phx:
.a697	20 80 81	jsr $8180		jsr	AssembleGroup4
>a69a	da					.byte $da
.a69b					Assemble_stp:
.a69b	20 80 81	jsr $8180		jsr	AssembleGroup4
>a69e	db					.byte $db
.a69f					Assemble_inx:
.a69f	20 80 81	jsr $8180		jsr	AssembleGroup4
>a6a2	e8					.byte $e8
.a6a3					Assemble_nop:
.a6a3	20 80 81	jsr $8180		jsr	AssembleGroup4
>a6a6	ea					.byte $ea
.a6a7					Assemble_sed:
.a6a7	20 80 81	jsr $8180		jsr	AssembleGroup4
>a6aa	f8					.byte $f8
.a6ab					Assemble_plx:
.a6ab	20 80 81	jsr $8180		jsr	AssembleGroup4
>a6ae	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a6af					DecimalScalarTable:
>a6af	66 66 66 66				.dword $66666666 ; 0.1
>a6b3	de					.byte $de
>a6b4	1f 85 eb 51				.dword $51eb851f ; 0.01
>a6b8	db					.byte $db
>a6b9	4c 37 89 41				.dword $4189374c ; 0.001
>a6bd	d8					.byte $d8
>a6be	ac 8b db 68				.dword $68db8bac ; 0.0001
>a6c2	d4					.byte $d4
>a6c3	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a6c7	d1					.byte $d1
>a6c8	83 de 1b 43				.dword $431bde83 ; 1e-06
>a6cc	ce					.byte $ce
>a6cd	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a6d1	ca					.byte $ca
>a6d2	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a6d6	c7					.byte $c7
>a6d7	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a6db	c4					.byte $c4
>a6dc	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a6e0	c0					.byte $c0
>a6e1	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a6e5	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a6e6					SyntaxError:
.a6e6	a9 02		lda #$02		lda	#2
.a6e8	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a6eb					RangeError:
.a6eb	a9 04		lda #$04		lda	#4
.a6ed	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a6f0					TypeError:
.a6f0	a9 05		lda #$05		lda	#5
.a6f2	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a6f5					ArgumentError:
.a6f5	a9 07		lda #$07		lda	#7
.a6f7	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a6fa					NotDoneError:
.a6fa	a9 0c		lda #$0c		lda	#12
.a6fc	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a6ff					ErrorText:
>a6ff	42 72 65 61 6b 00			.text	"Break",0
>a705	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a70d	72 72 6f 72 00
>a712	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a71a	20 62 79 20 7a 65 72 6f 00
>a723	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a72b	61 6e 67 65 00
>a730	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a738	6d 61 74 63 68 00
>a73e	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a746	65 6d 6f 72 79 00
>a74c	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a754	61 72 67 75 6d 65 6e 74 00
>a75d	53 74 6f 70 00				.text	"Stop",0
>a762	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a76a	6f 6f 20 6c 6f 6e 67 00
>a772	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a77a	6e 20 66 61 69 6c 65 64 00
>a783	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a78b	61 74 61 00
>a78f	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a797	65 6e 74 65 64 00
>a79d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a7a5	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a7b1	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a7b9	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a7c6	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a7ce	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a7db	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a7e3	68 6f 75 74 20 57 68 69 6c 65 00
>a7ee	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a7f6	68 6f 75 74 20 46 6f 72 00
>a7ff	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a807	61 63 6b 20 66 75 6c 6c 00
>a810	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a818	75 63 74 75 72 65 00
>a81f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a827	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a834	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a83c	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a84a	41 72 72 61 79 20 73 69			.text	"Array size",0
>a852	7a 65 00
>a855	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a85d	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a865	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 476."
>a86d	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>a87d	2e 20 42 75 69 6c 64 20 34 37 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a889					EXTPrintCharacter:
.a889	48		pha				pha
.a88a	da		phx				phx
.a88b	5a		phy				phy
.a88c	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a88f	7a		ply				ply
.a890	fa		plx				plx
.a891	68		pla				pla
.a892	60		rts				rts
.a893					EXTInputSingleCharacter:
.a893	da		phx				phx
.a894	5a		phy				phy
.a895					_EISCWait:
.a895	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a898	c9 00		cmp #$00			cmp 	#0
.a89a	f0 f9		beq $a895			beq 	_EISCWait
.a89c	7a		ply				ply
.a89d	fa		plx				plx
.a89e	60		rts				rts
.a89f					EXTInputLine:
.a89f	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a8a1					_ILLoop:
.a8a1	da		phx				phx 								; read character in
.a8a2	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a8a5	fa		plx				plx
.a8a6	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a8a8	f0 12		beq $a8bc			beq 	_ILBackspace
.a8aa	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a8ac	f0 15		beq $a8c3			beq 	_ILExit
.a8ae	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a8b0	90 ef		bcc $a8a1			bcc 	_ILLoop
.a8b2	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a8b4	f0 eb		beq $a8a1			beq 	_ILLoop
.a8b6	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.a8b9	e8		inx				inx
.a8ba	80 e5		bra $a8a1			bra 	_ILLoop
.a8bc					_ILBackspace:
.a8bc	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a8be	f0 e1		beq $a8a1			beq 	_ILLoop
.a8c0	ca		dex				dex 								; back one.
.a8c1	80 de		bra $a8a1			bra 	_ILLoop
.a8c3					_ILExit:
.a8c3	20 89 a8	jsr $a889			jsr 	EXTPrintCharacter
.a8c6	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a8c9	60		rts				rts
.a8ca					EXTBreakCheck:
.a8ca	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a8cd					MemoryDeleteLine:
.a8cd	20 ec a8	jsr $a8ec			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8d0	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a8d2	a8		tay				tay
.a8d3					_MDDLLoop:
.a8d3	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a8d5	92 30		sta ($30)			sta 	(codePtr)
.a8d7	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a8d9	c5 3a		cmp $3a				cmp 	zTemp2
.a8db	d0 07		bne $a8e4			bne 	_MDLDLNext
.a8dd	a5 31		lda $31				lda 	codePtr+1
.a8df	c5 3b		cmp $3b				cmp 	zTemp2+1
.a8e1	d0 01		bne $a8e4			bne 	_MDLDLNext
.a8e3					_MDDLExit:
.a8e3	60		rts				rts
.a8e4					_MDLDLNext:
.a8e4	e6 30		inc $30				inc 	codePtr						; next byte
.a8e6	d0 eb		bne $a8d3			bne 	_MDDLLoop
.a8e8	e6 31		inc $31				inc 	codePtr+1
.a8ea	80 e7		bra $a8d3			bra 	_MDDLLoop
.a8ec					IMemoryFindEnd:
.a8ec	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8ee	85 3a		sta $3a				sta 	0+zTemp2
.a8f0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8f2	85 3b		sta $3b				sta 	1+zTemp2
.a8f4					_MDLFELoop:
.a8f4	b2 3a		lda ($3a)			lda 	(zTemp2)
.a8f6	f0 0b		beq $a903			beq 	_MDLFEExit
.a8f8	18		clc				clc
.a8f9	65 3a		adc $3a				adc 	zTemp2
.a8fb	85 3a		sta $3a				sta 	zTemp2
.a8fd	90 f5		bcc $a8f4			bcc 	_MDLFELoop
.a8ff	e6 3b		inc $3b				inc 	zTemp2+1
.a901	80 f1		bra $a8f4			bra 	_MDLFELoop
.a903					_MDLFEExit:
.a903	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a904					MemoryInsertLine:
.a904	08		php				php
.a905	20 ec a8	jsr $a8ec			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a908	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a90a	1a		inc a				inc 	a
.a90b	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a90d	b0 36		bcs $a945			bcs 	_MDLIError
.a90f	28		plp				plp
.a910	90 08		bcc $a91a			bcc 	_MDLIFound
.a912	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a914	85 30		sta $30				sta 	codePtr
.a916	a5 3b		lda $3b				lda 	zTemp2+1
.a918	85 31		sta $31				sta 	codePtr+1
.a91a					_MDLIFound:
.a91a	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a91d	a8		tay				tay
.a91e					_MDLIInsert:
.a91e	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a920	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a922	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a924	c5 3a		cmp $3a				cmp 	zTemp2
.a926	d0 06		bne $a92e			bne 	_MDLINext
.a928	a5 31		lda $31				lda 	codePtr+1
.a92a	c5 3b		cmp $3b				cmp 	zTemp2+1
.a92c	f0 0a		beq $a938			beq 	_MDLIHaveSpace
.a92e					_MDLINext:
.a92e	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a930	d0 02		bne $a934			bne 	_MDLINoBorrow
.a932	c6 3b		dec $3b				dec 	zTemp2+1
.a934					_MDLINoBorrow:
.a934	c6 3a		dec $3a				dec 	zTemp2
.a936	80 e6		bra $a91e			bra 	_MDLIInsert
.a938					_MDLIHaveSpace:
.a938	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.a93b	88		dey				dey 								; from offset-1 to 0
.a93c					_MDLICopy:
.a93c	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.a93f	91 30		sta ($30),y			sta 	(codePtr),y
.a941	88		dey				dey
.a942	10 f8		bpl $a93c			bpl 	_MDLICopy
.a944	60		rts				rts
.a945					_MDLIError:
.a945	a9 06		lda #$06		lda	#6
.a947	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.a94a					MDLAppendLine:
.a94a	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a94c	85 36		sta $36				sta 	zTemp0
.a94e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a950	85 38		sta $38				sta 	0+zTemp1
.a952	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a954	85 39		sta $39				sta 	1+zTemp1
.a956	b2 38		lda ($38)			lda 	(zTemp1)
.a958	d0 0a		bne $a964			bne 	_MDLANoInitialise
.a95a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a95c	8d 3f 06	sta $063f			sta 	0+AppendPointer
.a95f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a961	8d 40 06	sta $0640			sta 	1+AppendPointer
.a964					_MDLANoInitialise:
.a964	18		clc				clc
.a965	ad 3f 06	lda $063f			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a968	85 38		sta $38				sta 	zTemp1
.a96a	72 36		adc ($36)			adc 	(zTemp0)
.a96c	8d 3f 06	sta $063f			sta 	AppendPointer
.a96f	ad 40 06	lda $0640			lda 	AppendPointer+1
.a972	85 39		sta $39				sta 	zTemp1+1
.a974	69 00		adc #$00			adc 	#0
.a976	8d 40 06	sta $0640			sta 	AppendPointer+1
.a979	a0 00		ldy #$00			ldy 	#0
.a97b					_MDLACopy:
.a97b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a97d	91 38		sta ($38),y			sta 	(zTemp1),y
.a97f	c8		iny				iny
.a980	98		tya				tya
.a981	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a983	d0 f6		bne $a97b			bne 	_MDLACopy
.a985	a9 00		lda #$00			lda 	#0 							; end of program.
.a987	91 38		sta ($38),y			sta 	(zTemp1),y
.a989	60		rts				rts
.063f					AppendPointer:
>063f							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.99bc					MemoryNew:
.99bc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99be	85 30		sta $30				sta 	codePtr
.99c0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99c2	85 31		sta $31				sta 	codePtr+1
.99c4	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.99c6	92 30		sta ($30)			sta 	(codePtr)
.99c8	60		rts				rts
.99c9					MemoryInline:
.99c9	98		tya				tya 								; put address into stack,x
.99ca	18		clc				clc
.99cb	65 30		adc $30				adc 	codePtr
.99cd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99d0	a5 31		lda $31				lda 	codePtr+1
.99d2	69 00		adc #$00			adc 	#0
.99d4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99d7	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.99da	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.99dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.99de					MemorySearch:
.99de	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.99e0	86 37		stx $37				stx 	zTemp0+1
.99e2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99e4	85 30		sta $30				sta 	codePtr
.99e6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99e8	85 31		sta $31				sta 	codePtr+1
.99ea					_MTAXLoop:
.99ea	b2 30		lda ($30)			lda 	(codePtr)
.99ec	18		clc				clc
.99ed	f0 21		beq $9a10			beq 	_MTAXExit 					; reached end, exit with CC.
.99ef	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.99f1	b1 30		lda ($30),y			lda 	(codePtr),y
.99f3	38		sec				sec
.99f4	e5 36		sbc $36				sbc 	zTemp0
.99f6	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.99f8	c8		iny				iny 								; do the MSB
.99f9	b1 30		lda ($30),y			lda 	(codePtr),y
.99fb	e5 37		sbc $37				sbc 	zTemp0+1
.99fd	05 38		ora $38				ora 	zTemp1
.99ff	f0 0f		beq $9a10			beq 	_MTAXExit	 				; found
.9a01	b0 0d		bcs $9a10			bcs 	_MTAXExit 					; current < required exit
.9a03	18		clc				clc
.9a04	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a06	65 30		adc $30				adc 	codePtr
.9a08	85 30		sta $30				sta 	codePtr
.9a0a	90 02		bcc $9a0e			bcc 	_CREExit
.9a0c	e6 31		inc $31				inc 	codePtr+1
.9a0e					_CREExit:
.9a0e	80 da		bra $99ea			bra 	_MTAXLoop
.9a10					_MTAXExit:
.9a10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9a11					StackPushByte:
.9a11	48		pha				pha 								; save byte
.9a12	a5 34		lda $34				lda 	BasicStack
.9a14	d0 09		bne $9a1f			bne 	_SPBNoBorrow
.9a16	c6 35		dec $35				dec 	BasicStack+1
.9a18	48		pha				pha
.9a19	a5 35		lda $35				lda 	BasicStack+1
.9a1b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9a1d	90 06		bcc $9a25			bcc 	_SPBMemory
.9a1f					_SPBNoBorrow:
.9a1f	c6 34		dec $34				dec 	BasicStack
.9a21	68		pla				pla 								; get back and write
.9a22	92 34		sta ($34)			sta 	(BasicStack)
.9a24	60		rts				rts
.9a25					_SPBMemory:
.9a25	a9 12		lda #$12		lda	#18
.9a27	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.9a2a					StackPopByte:
.9a2a	b2 34		lda ($34)			lda 	(BasicStack)
.9a2c	e6 34		inc $34				inc 	BasicStack
.9a2e	d0 02		bne $9a32			bne 	_SPBNoCarry
.9a30	e6 35		inc $35				inc 	BasicStack+1
.9a32					_SPBNoCarry:
.9a32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9a33					StackOpen:
.9a33	48		pha				pha 								; save frame byte
.9a34	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9a36	0a		asl a				asl 	a 							; claim twice this for storage
.9a37	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9a39	38		sec				sec 								; so basically subtracting from
.9a3a	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9a3c	85 34		sta $34				sta 	basicStack
.9a3e	b0 08		bcs $9a48			bcs 	_SONoBorrow
.9a40	c6 35		dec $35				dec 	basicStack+1
.9a42	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9a44	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9a46	90 04		bcc $9a4c			bcc 	_SOMemory
.9a48					_SONoBorrow:
.9a48	68		pla				pla 								; get marker back and write at TOS
.9a49	92 34		sta ($34)			sta 	(basicStack)
.9a4b	60		rts				rts
.9a4c					_SOMemory:
.9a4c	a9 12		lda #$12		lda	#18
.9a4e	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.9a51					StackClose:
.9a51	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9a53	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9a55	0a		asl a				asl 	a 							; claim twice this.
.9a56	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9a58	85 34		sta $34				sta 	basicStack
.9a5a	90 02		bcc $9a5e			bcc 	_SCExit
.9a5c	e6 35		inc $35				inc 	basicStack+1
.9a5e					_SCExit:
.9a5e	60		rts				rts
.9a5f					StackCheckFrame:
.9a5f	48		pha				pha
.9a60					_StackRemoveLocals:
.9a60	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9a62	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9a64	b0 05		bcs $9a6b			bcs 	_SCNoLocal
.9a66	20 a7 a0	jsr $a0a7			jsr 	LocalPopValue
.9a69	80 f5		bra $9a60			bra 	_StackRemoveLocals
.9a6b					_SCNoLocal:
.9a6b	68		pla				pla
.9a6c	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9a6e	29 f0		and #$f0			and 	#$F0 						; check type bits
.9a70	d0 01		bne $9a73			bne 	_SCFError 					; different, we have structures mixed up
.9a72	60		rts				rts
.9a73					_SCFError:
.9a73	8a		txa				txa 								; report error X
.9a74	4c c7 8d	jmp $8dc7			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9a77					STKSaveCodePosition:
.9a77	5a		phy				phy
.9a78	98		tya				tya 								; save Y
.9a79	a0 05		ldy #$05			ldy 	#5
.9a7b	91 34		sta ($34),y			sta 	(basicStack),y
.9a7d	88		dey				dey 								; save Code Pointer
.9a7e					_STKSaveLoop:
.9a7e	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9a81	91 34		sta ($34),y			sta 	(basicStack),y
.9a83	88		dey				dey
.9a84	d0 f8		bne $9a7e			bne 	_STKSaveLoop
.9a86	7a		ply				ply
.9a87	60		rts				rts
.9a88					STKLoadCodePosition:
.9a88	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9a8a					_STKLoadLoop:
.9a8a	b1 34		lda ($34),y			lda 	(basicStack),y
.9a8c	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9a8f	c8		iny				iny
.9a90	c0 05		cpy #$05			cpy 	#5
.9a92	d0 f6		bne $9a8a			bne 	_STKLoadLoop
.9a94	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9a96	a8		tay				tay
.9a97	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9a98					StackReset:
.9a98	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9a9a	85 34		sta $34				sta 	0+basicStack
.9a9c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9a9e	85 35		sta $35				sta 	1+basicStack
.9aa0	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9aa2	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9aa4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a98a					StringConcrete:
.a98a	5a		phy				phy 								; save position on stack
.a98b	20 8e 96	jsr $968e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a98e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a991	85 38		sta $38				sta 	zTemp1
.a993	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a996	85 39		sta $39				sta 	zTemp1+1
.a998	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a99a					_SALength:
.a99a	c8		iny				iny
.a99b	b1 38		lda ($38),y			lda 	(zTemp1),y
.a99d	d0 fb		bne $a99a			bne 	_SALength
.a99f	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a9a1	b0 3f		bcs $a9e2			bcs 	_SALengthError
.a9a3	98		tya				tya 				 				; length of the new string
.a9a4	18		clc				clc
.a9a5	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a9a7	90 02		bcc $a9ab			bcc 	_SAHaveLength
.a9a9	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a9ab					_SAHaveLength:
.a9ab	48		pha				pha 								; save length.
.a9ac	38		sec				sec
.a9ad	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a9af	6d 8e 04	adc $048e			adc 	StringMemory
.a9b2	8d 8e 04	sta $048e			sta 	StringMemory
.a9b5	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a9b7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a9ba	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a9bc	6d 8f 04	adc $048f			adc 	StringMemory+1
.a9bf	8d 8f 04	sta $048f			sta 	StringMemory+1
.a9c2	85 3b		sta $3b				sta 	zTemp2+1
.a9c4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9c7	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a9c8	38		sec				sec
.a9c9	e9 03		sbc #$03			sbc 	#3
.a9cb	92 3a		sta ($3a)			sta 	(zTemp2)
.a9cd	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a9cf	a0 01		ldy #$01			ldy 	#1
.a9d1	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a9d3					_SACopyNewString:
.a9d3	a0 00		ldy #$00			ldy 	#0
.a9d5					_SACopyNSLoop:
.a9d5	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a9d7	c8		iny				iny 								; write two on in string storage
.a9d8	c8		iny				iny
.a9d9	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a9db	88		dey				dey 								; this makes it one one.
.a9dc	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a9de	d0 f5		bne $a9d5			bne 	_SACopyNSLoop
.a9e0	7a		ply				ply
.a9e1	60		rts				rts
.a9e2					_SALengthError:
.a9e2	a9 09		lda #$09		lda	#9
.a9e4	4c c7 8d	jmp $8dc7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a9e7					StringSystemInitialise:
.a9e7	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a9e9	8d 8e 04	sta $048e			sta 	0+StringMemory
.a9ec	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a9ee	8d 8f 04	sta $048f			sta 	1+StringMemory
.a9f1	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a9f4	60		rts				rts
.a9f5					StringSpaceInitialise:
.a9f5	20 8e 96	jsr $968e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a9f8	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a9fa	8d 90 04	sta $0490			sta 	StringInitialised
.a9fd	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.aa00	8d 91 04	sta $0491			sta 	StringTempPointer
.aa03	ad 8f 04	lda $048f			lda 	StringMemory+1
.aa06	3a		dec a				dec 	a
.aa07	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aa0a	60		rts				rts
.aa0b					StringTempAllocate:
.aa0b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.aa0d	b0 35		bcs $aa44			bcs 	_STALength
.aa0f	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.aa12	30 05		bmi $aa19			bmi 	_STAAllocate
.aa14	48		pha				pha 								; save value to subtract.
.aa15	20 f5 a9	jsr $a9f5			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.aa18	68		pla				pla 								; restore it
.aa19					_STAAllocate:
.aa19	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.aa1b	18		clc				clc  								; deliberate allows one more
.aa1c	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.aa1f	8d 91 04	sta $0491			sta 	StringTempPointer
.aa22	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.aa25	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.aa27	ad 92 04	lda $0492			lda 	StringTempPointer+1
.aa2a	69 ff		adc #$ff			adc 	#$FF
.aa2c	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aa2f	85 3d		sta $3d				sta 	zsTemp+1
.aa31	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa34	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.aa37	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.aa3a	a9 10		lda #$10			lda 	#NSTString
.aa3c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa3f	a9 00		lda #$00			lda 	#0 							; clear the target string
.aa41	92 3c		sta ($3c)			sta 	(zsTemp)
.aa43	60		rts				rts
.aa44					_STALength:
.aa44	a9 09		lda #$09		lda	#9
.aa46	4c c7 8d	jmp $8dc7		jmp	ErrorHandler
.aa49					StringTempWrite:
.aa49	48		pha				pha
.aa4a	92 3c		sta ($3c)			sta 	(zsTemp)
.aa4c	e6 3c		inc $3c				inc 	zsTemp
.aa4e	d0 02		bne $aa52			bne 	_STWNoCarry
.aa50	e6 3d		inc $3d				inc 	zsTemp+1
.aa52					_STWNoCarry:
.aa52	a9 00		lda #$00			lda 	#0
.aa54	92 3c		sta ($3c)			sta 	(zsTemp)
.aa56	68		pla				pla
.aa57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9aa5					BackloadProgram:
.9aa5	a2 ff		ldx #$ff			ldx 	#$FF
.9aa7	20 cf 9a	jsr $9acf			jsr 	BLReadByte
.9aaa	30 1f		bmi $9acb			bmi 	_BPExit
.9aac					_BPCopy:
.9aac	e8		inx				inx  								; copy byte in
.9aad	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9ab0	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9ab3	20 cf 9a	jsr $9acf			jsr 	BLReadByte 					; read next byte
.9ab6	30 0a		bmi $9ac2			bmi 	_BPEndLine 					; -ve = EOL
.9ab8	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9aba	d0 02		bne $9abe			bne 	_BPNotTab
.9abc	a9 20		lda #$20			lda 	#' '
.9abe					_BPNotTab:
.9abe	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9ac0	b0 ea		bcs $9aac			bcs 	_BPCopy
.9ac2					_BPEndLine:
.9ac2	20 f8 9d	jsr $9df8			jsr 	TokeniseLine 				; tokenise the line.
.9ac5	38		sec				sec 								; append not insert
.9ac6	20 04 a9	jsr $a904			jsr 	MemoryInsertLine 			; append to current program
.9ac9	80 da		bra $9aa5			bra 	BackloadProgram
.9acb					_BPExit:
.9acb	20 f8 83	jsr $83f8			jsr 	ClearCommand 				; clear variables etc.
.9ace	60		rts				rts
.9acf					BLReadByte:
.9acf					_BLLoad:
.9acf	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9ad2	ee d0 9a	inc $9ad0			inc 	_BLLoad+1
.9ad5	d0 03		bne $9ada			bne 	_BLNoCarry
.9ad7	ee d1 9a	inc $9ad1			inc 	_BLLoad+2
.9ada					_BLNoCarry:
.9ada	c9 00		cmp #$00			cmp 	#0
.9adc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9add					TokeniseSearchTable:
.9add	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9adf	85 36		sta $36				sta 	zTemp0
.9ae1	a0 00		ldy #$00			ldy 	#0
.9ae3	a9 80		lda #$80			lda 	#$80 						; token #
.9ae5	85 38		sta $38				sta 	zTemp1
.9ae7					_TSTLoop:
.9ae7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9ae9	30 49		bmi $9b34			bmi 	_TSTFail 					; -ve = end of table
.9aeb	f0 2e		beq $9b1b			beq 	_TSTNext 					; zero, check next it's a dummy
.9aed	c8		iny				iny 								; get the hash
.9aee	b1 36		lda ($36),y			lda 	(zTemp0),y
.9af0	88		dey				dey
.9af1	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9af4	d0 25		bne $9b1b			bne 	_TSTNext
.9af6	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9af9	38		sec				sec
.9afa	ed 80 04	sbc $0480			sbc 	identStart
.9afd	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9aff	d0 1a		bne $9b1b			bne 	_TSTNext
.9b01	5a		phy				phy 								; save Y , we might fail
.9b02	c8		iny				iny 								; point to text
.9b03	c8		iny				iny
.9b04	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9b07					_TSTCompareName:
.9b07	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9b0a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9b0c	d0 0c		bne $9b1a			bne 	_TSTNextPullY 				; fail, pullY and do next
.9b0e	e8		inx				inx
.9b0f	c8		iny				iny
.9b10	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9b13	d0 f2		bne $9b07			bne 	_TSTCompareName
.9b15	7a		ply				ply 								; throw Y
.9b16	a5 38		lda $38				lda 	zTemp1 						; get token #
.9b18	38		sec				sec 								; return with CS = passed.
.9b19	60		rts				rts
.9b1a					_TSTNextPullY:
.9b1a	7a		ply				ply 								; restore current, fall through.
.9b1b					_TSTNext:
.9b1b	e6 38		inc $38				inc 	zTemp1 						; token counter
.9b1d	98		tya				tya
.9b1e	18		clc				clc
.9b1f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9b21	1a		inc a				inc 	a 							; +1
.9b22	1a		inc a				inc 	a 							; +2
.9b23	a8		tay				tay
.9b24	10 c1		bpl $9ae7			bpl 	_TSTLoop 					; if Y < $80 loop back
.9b26	98		tya				tya 								; add Y to zTemp0 and reset Y
.9b27	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9b29	18		clc				clc  								; but have tables > 255 bytes
.9b2a	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9b2c	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9b2e	90 b7		bcc $9ae7			bcc 	_TSTLoop
.9b30	e6 37		inc $37				inc 	zTemp0+1
.9b32	80 b3		bra $9ae7			bra 	_TSTLoop
.9b34					_TSTFail:
.9b34	18		clc				clc
.9b35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9b36					KeywordSet0:
>9b36	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b38	00 58					.text	0,$58,""               ; $81 !1:SH1
>9b3a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9b3c	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9b42	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9b4a	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9b50	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9b57	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9b5e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9b65	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9b6b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9b73	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9b7b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9b81	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9b88	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9b8e	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9b96	28
>9b97	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9b9f	28
>9ba0	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9ba6	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9bac	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9bb2	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9bb9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9bbf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9bc5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9bca	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9bce	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9bd4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9bdc	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9be3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9bea	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9bf2	43
>9bf3	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9bf9	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9bff	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9c06	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9c0c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9c12	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9c17	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9c1d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9c22	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9c2a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9c30	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9c37	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9c3d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9c42	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9c49	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9c50	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9c56	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9c5b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9c63	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9c67	ff					.text	$FF
.9c68					KeywordSet1:
>9c68	00 65					.text	0,$65,""               ; $80 !0:EOF
>9c6a	00 58					.text	0,$58,""               ; $81 !1:SH1
>9c6c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9c6e	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9c76	4c 45
>9c78	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9c80	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9c87	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9c8c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9c92	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9c97	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9c9f	45
>9ca0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9ca5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9cab	ff					.text	$FF
.9cac					KeywordSet2:
>9cac	00 65					.text	0,$65,""               ; $80 !0:EOF
>9cae	00 58					.text	0,$58,""               ; $81 !1:SH1
>9cb0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9cb2	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9cb7	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9cbc	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9cc1	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9cc6	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9ccb	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9cd0	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9cd5	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9cda	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9cdf	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9ce4	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9ce9	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9cee	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9cf3	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9cf8	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9cfd	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9d02	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9d07	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9d0c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9d11	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9d16	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9d1b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9d20	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9d25	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9d2a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9d2f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9d34	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9d39	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9d3e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9d43	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9d48	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9d4d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9d52	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9d57	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9d5c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9d61	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9d66	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9d6b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9d70	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9d75	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9d7a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9d7f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9d84	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9d89	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9d8e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9d93	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9d98	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9d9d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9da2	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9da7	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9dac	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9db1	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9db6	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9dbb	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>9dc0	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>9dc5	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>9dca	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>9dcf	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>9dd4	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>9dd9	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>9dde	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>9de3	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>9de8	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>9ded	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>9df2	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>9df7	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9df8					TokeniseLine:
.9df8	20 80 9f	jsr $9f80			jsr 	FixLineBufferCase 			; fix line case
.9dfb	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9dfd	8d a6 04	sta $04a6			sta 	tokenOffset
.9e00	9c a7 04	stz $04a7			stz 	tokenLineNumber
.9e03	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.9e06	a2 ff		ldx #$ff			ldx 	#$FF
.9e08					_TKFindFirst:
.9e08	e8		inx				inx
.9e09	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.9e0c	f0 79		beq $9e87			beq 	_TKExit
.9e0e	c9 20		cmp #$20			cmp 	#' '
.9e10	90 f6		bcc $9e08			bcc 	_TKFindFirst
.9e12	c9 30		cmp #$30			cmp 	#'0'
.9e14	90 07		bcc $9e1d			bcc 	_TKNoLineNumber
.9e16	c9 3a		cmp #$3a			cmp 	#'9'+1
.9e18	b0 03		bcs $9e1d			bcs 	_TKNoLineNumber
.9e1a	20 aa 9f	jsr $9faa			jsr 	TokeniseExtractLineNumber
.9e1d					_TKNoLineNumber:
.9e1d					_TKTokeniseLoop:
.9e1d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9e20	f0 65		beq $9e87			beq 	_TKExit
.9e22	e8		inx				inx
.9e23	c9 20		cmp #$20			cmp 	#' '
.9e25	f0 f6		beq $9e1d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9e27	ca		dex				dex 								; undo last get, A contains character, X is position.
.9e28	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9e2a	f0 61		beq $9e8d			beq 	_TKTokeniseIdentifier
.9e2c	c9 41		cmp #$41			cmp 	#'A'
.9e2e	90 04		bcc $9e34			bcc 	_TKTokenisePunctuation
.9e30	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9e32	90 59		bcc $9e8d			bcc 	_TKTokeniseIdentifier
.9e34					_TKTokenisePunctuation:
.9e34	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9e36	f0 27		beq $9e5f			beq 	_TKString
.9e38	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9e3a	f0 28		beq $9e64			beq 	_TKHexConstant
.9e3c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9e3e	f0 29		beq $9e69			beq 	_TKCheckDouble
.9e40	c9 3e		cmp #$3e			cmp 	#'>'
.9e42	f0 25		beq $9e69			beq 	_TKCheckDouble
.9e44					_TKStandardPunctuation:
.9e44	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.9e47	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9e49	90 0e		bcc $9e59			bcc 	_TKNoShift
.9e4b	48		pha				pha 								; save
.9e4c	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9e4e	85 36		sta $36				sta 	zTemp0
.9e50	68		pla				pla
.9e51	29 20		and #$20			and 	#32 						; bit 5
.9e53	4a		lsr a				lsr 	a 							; shift into bit 3
.9e54	4a		lsr a				lsr 	a
.9e55	05 36		ora $36				ora 	zTemp0
.9e57	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9e59					_TKNoShift:
.9e59	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte 			; write the punctuation character
.9e5c	e8		inx				inx 								; consume the character
.9e5d	80 be		bra $9e1d			bra 	_TKTokeniseLoop 			; and loop round again.
.9e5f					_TKString:
.9e5f	20 0f 9f	jsr $9f0f			jsr 	TokeniseString
.9e62	80 b9		bra $9e1d			bra 	_TKTokeniseLoop
.9e64					_TKHexConstant:
.9e64	20 4a 9f	jsr $9f4a			jsr 	TokeniseHexConstant
.9e67	80 b4		bra $9e1d			bra 	_TKTokeniseLoop
.9e69					_TKCheckDouble:
.9e69	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.9e6c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9e6e	90 d4		bcc $9e44			bcc 	_TKStandardPunctuation
.9e70	c9 3f		cmp #$3f			cmp 	#'>'+1
.9e72	b0 d0		bcs $9e44			bcs 	_TKStandardPunctuation
.9e74	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9e77	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9e79	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9e7a	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9e7d	38		sec				sec
.9e7e	e9 3c		sbc #$3c			sbc 	#'<'
.9e80	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9e83	e8		inx				inx 								; consume both
.9e84	e8		inx				inx
.9e85	80 96		bra $9e1d			bra 	_TKTokeniseLoop
.9e87	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9e89	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.9e8c	60		rts				rts
.9e8d					_TKTokeniseIdentifier:
.9e8d	8e 80 04	stx $0480			stx 	identStart 					; save start
.9e90	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.9e93					_TKCheckLoop:
.9e93	e8		inx				inx 								; look at next, we know first is identifier.
.9e94	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.9e97	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9e99	f0 f8		beq $9e93			beq 	_TKCheckLoop
.9e9b	c9 30		cmp #$30			cmp	 	#"0"
.9e9d	90 0c		bcc $9eab			bcc 	_TKEndIdentifier
.9e9f	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ea1	90 f0		bcc $9e93			bcc 	_TKCheckLoop
.9ea3	c9 41		cmp #$41			cmp	 	#"A"
.9ea5	90 04		bcc $9eab			bcc 	_TKEndIdentifier
.9ea7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9ea9	90 e8		bcc $9e93			bcc 	_TKCheckLoop
.9eab					_TKEndIdentifier:
.9eab	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.9eae	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9eb0	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9eb2	f0 06		beq $9eba			beq 	_TKHasTypeCharacter
.9eb4	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9eb6	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9eb8	d0 07		bne $9ec1			bne 	_TKNoTypeCharacter
.9eba					_TKHasTypeCharacter:
.9eba	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.9ebd	e8		inx				inx 								; read next
.9ebe	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.9ec1					_TKNoTypeCharacter:
.9ec1	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9ec3	d0 09		bne $9ece			bne 	_TKNoArray
.9ec5	e8		inx				inx 								; skip the (
.9ec6	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9ec9	09 04		ora #$04			ora 	#$04
.9ecb	8d 84 04	sta $0484			sta 	identTypeByte
.9ece					_TKNoArray:
.9ece	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9ed1	20 6b 9f	jsr $9f6b			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9ed4	a0 9b		ldy #$9b			ldy 	#(KeywordSet0) >> 8
.9ed6	a9 36		lda #$36			lda 	#(KeywordSet0) & $FF
.9ed8	20 dd 9a	jsr $9add			jsr 	TokeniseSearchTable
.9edb	a2 00		ldx #$00			ldx 	#0
.9edd	b0 1f		bcs $9efe			bcs 	_TKFoundToken
.9edf	a0 9c		ldy #$9c			ldy 	#(KeywordSet1) >> 8
.9ee1	a9 68		lda #$68			lda 	#(KeywordSet1) & $FF
.9ee3	20 dd 9a	jsr $9add			jsr 	TokeniseSearchTable
.9ee6	a2 81		ldx #$81			ldx 	#$81
.9ee8	b0 14		bcs $9efe			bcs 	_TKFoundToken
.9eea	a0 9c		ldy #$9c			ldy 	#(KeywordSet2) >> 8
.9eec	a9 ac		lda #$ac			lda 	#(KeywordSet2) & $FF
.9eee	20 dd 9a	jsr $9add			jsr 	TokeniseSearchTable
.9ef1	a2 82		ldx #$82			ldx 	#$82
.9ef3	b0 09		bcs $9efe			bcs 	_TKFoundToken
.9ef5	20 fb 9f	jsr $9ffb			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9ef8	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.9efb	4c 1d 9e	jmp $9e1d			jmp 	_TKTokeniseLoop 			; and go round again.
.9efe					_TKFoundToken:
.9efe	48		pha				pha 								; save token
.9eff	8a		txa				txa 								; shift in X, is there one ?
.9f00	f0 03		beq $9f05			beq 	_TKNoTShift
.9f02	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte 			; if so, write it out
.9f05					_TKNoTShift:
.9f05	68		pla				pla 								; restore and write token
.9f06	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.9f09	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.9f0c	4c 1d 9e	jmp $9e1d			jmp 	_TKTokeniseLoop 			; and go round again.
.9f0f					TokeniseString:
.9f0f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9f11	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.9f14	e8		inx				inx									; start of quoted string.
.9f15	da		phx				phx 								; push start of string on top
.9f16	ca		dex				dex
.9f17					_TSFindEnd:
.9f17	e8		inx				inx
.9f18	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.9f1b	f0 04		beq $9f21			beq 	_TSEndOfString
.9f1d	c9 22		cmp #$22			cmp 	#'"'
.9f1f	d0 f6		bne $9f17			bne 	_TSFindEnd
.9f21					_TSEndOfString:
.9f21	7a		ply				ply  								; so now Y is first character, X is character after end.
.9f22	48		pha				pha 								; save terminating character
.9f23	20 2b 9f	jsr $9f2b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9f26	68		pla				pla 								; terminating character
.9f27	f0 01		beq $9f2a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9f29	e8		inx				inx
.9f2a					_TSNotQuote:
.9f2a	60		rts				rts
.9f2b					TOWriteBlockXY:
.9f2b	86 36		stx $36				stx 	zTemp0 						; write end character
.9f2d	98		tya				tya
.9f2e	49 ff		eor #$ff			eor 	#$FF
.9f30	38		sec				sec
.9f31	65 36		adc $36				adc 	zTemp0
.9f33	1a		inc a				inc 	a 							; one extra for NULL
.9f34	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.9f37					_TOBlockLoop:
.9f37	c4 36		cpy $36				cpy 	zTemp0
.9f39	f0 09		beq $9f44			beq 	_TOBlockExit
.9f3b	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.9f3e	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.9f41	c8		iny				iny
.9f42	80 f3		bra $9f37			bra 	_TOBlockLoop
.9f44					_TOBlockExit:
.9f44	a9 00		lda #$00			lda 	#0
.9f46	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.9f49	60		rts				rts
.9f4a					TokeniseHexConstant:
.9f4a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9f4c	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.9f4f	e8		inx				inx									; start of quoted string.
.9f50	da		phx				phx 								; push start of constant on top
.9f51	ca		dex				dex
.9f52					_THFindLoop:
.9f52	e8		inx				inx
.9f53	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.9f56	c9 30		cmp #$30			cmp 	#"0"
.9f58	90 0c		bcc $9f66			bcc 	_THFoundEnd
.9f5a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9f5c	90 f4		bcc $9f52			bcc 	_THFindLoop
.9f5e	c9 41		cmp #$41			cmp 	#"A"
.9f60	90 04		bcc $9f66			bcc 	_THFoundEnd
.9f62	c9 47		cmp #$47			cmp 	#"F"+1
.9f64	90 ec		bcc $9f52			bcc 	_THFindLoop
.9f66					_THFoundEnd:
.9f66	7a		ply				ply 								; restore start
.9f67	20 2b 9f	jsr $9f2b			jsr 	TOWriteBlockXY 				; output the block
.9f6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9f6b					TokeniseCalculateHash:
.9f6b	da		phx				phx
.9f6c	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9f6f	a9 00		lda #$00			lda 	#0
.9f71					_TCHLoop:
.9f71	18		clc				clc
.9f72	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.9f75	e8		inx				inx
.9f76	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9f79	d0 f6		bne $9f71			bne 	_TCHLoop
.9f7b	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.9f7e	fa		plx				plx
.9f7f	60		rts				rts
.9f80					FixLineBufferCase:
.9f80	a2 00		ldx #$00			ldx 	#0
.9f82					_FLBCLoop:
.9f82	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.9f85	f0 22		beq $9fa9			beq 	_FLBCExit 					; end of string.
.9f87	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9f89	f0 11		beq $9f9c			beq 	_FLBCInQuotes
.9f8b	e8		inx				inx
.9f8c	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9f8e	90 f2		bcc $9f82			bcc 	_FLBCLoop
.9f90	c9 7b		cmp #$7b			cmp 	#'z'+1
.9f92	b0 ee		bcs $9f82			bcs 	_FLBCLoop
.9f94	38		sec				sec 								; make U/C
.9f95	e9 20		sbc #$20			sbc 	#32
.9f97	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.9f9a	80 e6		bra $9f82			bra 	_FLBCLoop
.9f9c					_FLBCInQuotes:
.9f9c	e8		inx				inx 								; advance
.9f9d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.9fa0	f0 07		beq $9fa9			beq 	_FLBCExit 					; exit on EOS
.9fa2	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9fa4	d0 f6		bne $9f9c			bne 	_FLBCInQuotes
.9fa6	e8		inx				inx 								; skip over it
.9fa7	80 d9		bra $9f82			bra 	_FLBCLoop
.9fa9					_FLBCExit:
.9fa9	60		rts				rts
.9faa					TokeniseExtractLineNumber:
.9faa	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.9fad	48		pha				pha
.9fae	ad a7 04	lda $04a7			lda 	tokenLineNumber
.9fb1	48		pha				pha
.9fb2	20 e8 9f	jsr $9fe8			jsr 	_TELNTimes2 				; line # x 4
.9fb5	20 e8 9f	jsr $9fe8			jsr 	_TELNTimes2 				; line # x 2
.9fb8	18		clc				clc 								; add stacked value
.9fb9	68		pla				pla
.9fba	6d a7 04	adc $04a7			adc 	tokenLineNumber
.9fbd	8d a7 04	sta $04a7			sta 	tokenLineNumber
.9fc0	68		pla				pla
.9fc1	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.9fc4	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.9fc7	20 e8 9f	jsr $9fe8			jsr 	_TELNTimes2 				; line # x 10
.9fca	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.9fcd	e8		inx				inx
.9fce	29 0f		and #$0f			and 	#15 						; add to line #
.9fd0	18		clc				clc
.9fd1	6d a7 04	adc $04a7			adc 	tokenLineNumber
.9fd4	8d a7 04	sta $04a7			sta 	tokenLineNumber
.9fd7	90 03		bcc $9fdc			bcc 	_TLENNoCarry
.9fd9	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.9fdc					_TLENNoCarry:
.9fdc	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.9fdf	c9 30		cmp #$30			cmp 	#'0'
.9fe1	90 04		bcc $9fe7			bcc 	_TLENExit
.9fe3	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fe5	90 c3		bcc $9faa			bcc 	TokeniseExtractLineNumber
.9fe7					_TLENExit:
.9fe7	60		rts				rts
.9fe8					_TELNTimes2:
.9fe8	0e a7 04	asl $04a7			asl 	tokenLineNumber
.9feb	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.9fee	60		rts				rts
.9fef					TokeniseWriteByte:
.9fef	da		phx				phx
.9ff0	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.9ff3	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.9ff6	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.9ff9	fa		plx				plx
.9ffa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9ffb					CheckCreateVariableRecord:
.9ffb	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9ffd	85 36		sta $36				sta 	0+zTemp0
.9fff	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a001	85 37		sta $37				sta 	1+zTemp0
.a003					_CCVSearch:
.a003	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a005	f0 2c		beq $a033			beq 	_CCVFail
.a007	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a009	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a00b	cd 83 04	cmp $0483			cmp 	identHash
.a00e	d0 16		bne $a026			bne 	_CCVNext
.a010	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a012	ae 80 04	ldx $0480			ldx 	identStart
.a015					_CCVCompare:
.a015	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a018	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a01a	e8		inx				inx 								; advance pointers
.a01b	c8		iny				iny
.a01c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a01d	d0 07		bne $a026			bne 	_CCVNext  					; didn't match go to next.
.a01f	90 f4		bcc $a015			bcc 	_CCVCompare 				; not finished yet.
.a021	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a024	f0 41		beq $a067			beq 	_CCVFound 					; yes, we were successful
.a026					_CCVNext:
.a026	18		clc				clc
.a027	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a029	65 36		adc $36				adc 	zTemp0
.a02b	85 36		sta $36				sta 	zTemp0
.a02d	90 d4		bcc $a003			bcc 	_CCVSearch
.a02f	e6 37		inc $37				inc 	zTemp0+1
.a031	80 d0		bra $a003			bra 	_CCVSearch
.a033					_CCVFail:
.a033	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a035	ad 83 04	lda $0483			lda 	identHash
.a038	91 36		sta ($36),y			sta 	(zTemp0),y
.a03a	c8		iny				iny 								; offset 2 is the type byte
.a03b	ad 84 04	lda $0484			lda 	identTypeByte
.a03e	91 36		sta ($36),y			sta 	(zTemp0),y
.a040	c8		iny				iny
.a041					_CCVData:
.a041	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a043	91 36		sta ($36),y			sta 	(zTemp0),y
.a045	c8		iny				iny
.a046	c0 08		cpy #$08			cpy 	#8
.a048	90 f7		bcc $a041			bcc 	_CCVData
.a04a	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a04d					_CCVCopyName:
.a04d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a050	91 36		sta ($36),y			sta 	(zTemp0),y
.a052	e8		inx				inx
.a053	c8		iny				iny
.a054	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a057	d0 f4		bne $a04d			bne 	_CCVCopyName
.a059	98		tya				tya 								; patch offset
.a05a	92 36		sta ($36)			sta 	(zTemp0)
.a05c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a05e	91 36		sta ($36),y			sta 	(zTemp0),y
.a060	88		dey				dey
.a061	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a063	09 80		ora #$80			ora 	#$80
.a065	91 36		sta ($36),y			sta 	(zTemp0),y
.a067					_CCVFound:
.a067	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a069	38		sec				sec
.a06a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a06c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a06e	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.a071	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a073	20 ef 9f	jsr $9fef			jsr 	TokeniseWriteByte
.a076	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
