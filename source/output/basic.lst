
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Nov 16 17:28:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 d5 a8	jsr $a8d5			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8014	20 4e 88	jsr $884e			jsr 	NewCommand 					; erase current program
.8017	20 ff 82	jsr $82ff			jsr 	BackloadProgram
.801a	4c 5c 83	jmp $835c			jmp 	WarmStart
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 57 65			.text "Built Wednesday 16-Nov-2022. Build 3059."
>8064	64 6e 65 73 64 61 79 20 31 36 2d 4e 6f 76 2d 32
>8074	30 32 32 2e 20 42 75 69 6c 64 20 33 30 35 39 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8087					AssembleGroup1:
.8087	a9 ff		lda #$ff			lda 	#$FF
.8089	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808c	80 02		bra $8090			bra 	AsmGroup12
.808e					AssembleGroup2:
.808e	a9 00		lda #$00			lda 	#$00
.8090					AsmGroup12:
.8090	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8093	68		pla				pla 								; pop the return address to access the information following.
.8094	fa		plx				plx
.8095	20 1e 81	jsr $811e			jsr 	AccessParameters 			; get opcode and save as base
.8098	8d a4 04	sta $04a4			sta 	BaseOpcode
.809b	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809e	d0 08		bne $80a8			bne 	_AG12HaveMask
.80a0	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a2	20 26 81	jsr $8126			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a5	8d a5 04	sta $04a5			sta 	ModeMask
.80a8					_AG12HaveMask:
.80a8	20 61 82	jsr $8261			jsr 	TypeAndCalculateOperand 	; get zero page type
.80ab	da		phx				phx 								; save found address mode
.80ac	20 8a 81	jsr $818a			jsr 	AssembleModeX
.80af	fa		plx				plx  								; restore address mode
.80b0	b0 0b		bcs $80bd			bcs 	_AG12Exit
.80b2	20 be 80	jsr $80be			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b5	20 8a 81	jsr $818a			jsr 	AssembleModeX
.80b8	b0 03		bcs $80bd			bcs 	_AG12Exit
.80ba	4c 84 9f	jmp $9f84			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bd					_AG12Exit:
.80bd	60		rts				rts
.80be					PromoteToAbsolute:
.80be	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80c0	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c2	f0 19		beq $80dd			beq 	_PTADo
.80c4	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c6	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c8	f0 13		beq $80dd			beq 	_PTADo
.80ca	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80cc	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80ce	f0 0d		beq $80dd			beq 	_PTADo
.80d0	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d2	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d4	f0 07		beq $80dd			beq 	_PTADo
.80d6	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d8	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80da	f0 01		beq $80dd			beq 	_PTADo
.80dc	60		rts				rts
.80dd					_PTADo:
.80dd	aa		tax				tax
.80de	60		rts				rts
.80df					AssembleGroup3:
.80df	68		pla				pla 								; get parameters, which is just the opcode.
.80e0	fa		plx				plx
.80e1	20 1e 81	jsr $811e			jsr 	AccessParameters 			; get and output opcode
.80e4	20 36 81	jsr $8136			jsr 	AssemblerWriteByte
.80e7	20 c5 82	jsr $82c5			jsr 	CalculateOperand 			; get a 16 bit operand
.80ea	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ed	38		sec				sec
.80ee	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80f1	48		pha				pha 								; LSB in A
.80f2	ad 10 04	lda $0410			lda 	NSMantissa1
.80f5	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f8	aa		tax				tax 								; MSB in X
.80f9	68		pla				pla
.80fa	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80fb	69 7f		adc #$7f			adc 	#$7F
.80fd	90 01		bcc $8100			bcc 	_AG3NoCarry
.80ff	e8		inx				inx
.8100					_AG3NoCarry:
.8100	38		sec				sec 								; fix back and write out anyways.
.8101	e9 80		sbc #$80			sbc 	#$80
.8103	20 36 81	jsr $8136			jsr 	AssemblerWriteByte
.8106	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8108	f0 0a		beq $8114			beq 	_AG3Exit
.810a	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810d	29 01		and #$01			and 	#1
.810f	f0 03		beq $8114			beq 	_AG3Exit
.8111	4c 89 9f	jmp $9f89			jmp 	RangeError 					; no, branch is out of range
.8114					_AG3Exit:
.8114	60		rts				rts
.8115					AssembleGroup4:
.8115	68		pla				pla 								; pop address
.8116	fa		plx				plx
.8117	20 1e 81	jsr $811e			jsr 	AccessParameters 			; access and get first
.811a	20 36 81	jsr $8136			jsr 	AssemblerWriteByte 			; output it.
.811d	60		rts				rts
.811e					AccessParameters:
.811e	8d a1 04	sta $04a1			sta 	ParamStart
.8121	8e a2 04	stx $04a2			stx 	ParamStart+1
.8124	a9 01		lda #$01			lda 	#1
.8126					GetParameter:
.8126	5a		phy				phy
.8127	a8		tay				tay
.8128	ad a1 04	lda $04a1			lda 	ParamStart
.812b	85 36		sta $36				sta 	zTemp0
.812d	ad a2 04	lda $04a2			lda 	ParamStart+1
.8130	85 37		sta $37				sta 	zTemp0+1
.8132	b1 36		lda ($36),y			lda 	(zTemp0),y
.8134	7a		ply				ply
.8135	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8136					AssemblerWriteByte:
.8136	48		pha			pha
.8137	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.813a	29 02		and #$02		and 	#2
.813c	f0 1b		beq $8159		beq 	_AWBNoPrint
.813e	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8141	20 74 81	jsr $8174		jsr 	PrintHex
.8144	ad 9e 04	lda $049e		lda		AssemblerAddress
.8147	20 74 81	jsr $8174		jsr 	PrintHex
.814a	a9 20		lda #$20		lda 	#' '
.814c	20 2b a7	jsr $a72b		jsr 	EXTPrintCharacter
.814f	68		pla			pla 									; print byte
.8150	48		pha			pha
.8151	20 74 81	jsr $8174		jsr 	PrintHex
.8154	a9 0d		lda #$0d		lda 	#13
.8156	20 2b a7	jsr $a72b		jsr 	EXTPrintCharacter
.8159					_AWBNoPrint:
.8159	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815c	85 36		sta $36			sta 	zTemp0
.815e	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8161	f0 0e		beq $8171		beq 	_AWBRange
.8163	85 37		sta $37			sta 	zTemp0+1
.8165	68		pla			pla 									; write byte out
.8166	92 36		sta ($36)		sta 	(zTemp0)
.8168	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.816b	d0 03		bne $8170		bne 	_AWBNoCarry
.816d	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8170					_AWBNoCarry:
.8170	60		rts			rts
.8171					_AWBRange:
.8171	4c 89 9f	jmp $9f89		jmp 	RangeError
.8174					PrintHex:
.8174	48		pha				pha
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	4a		lsr a				lsr 	a
.8178	4a		lsr a				lsr 	a
.8179	20 7d 81	jsr $817d			jsr 	_PrintNibble
.817c	68		pla				pla
.817d					_PrintNibble:
.817d	29 0f		and #$0f			and 	#15
.817f	c9 0a		cmp #$0a			cmp 	#10
.8181	90 02		bcc $8185			bcc 	_NoShift
.8183	69 06		adc #$06			adc 	#6
.8185					_NoShift:
.8185	69 30		adc #$30			adc 	#48
.8187	4c 2b a7	jmp $a72b			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.818a					AssembleModeX:
.818a	5a		phy				phy
.818b	ad a3 04	lda $04a3			lda 	IsGroup1
.818e	f0 17		beq $81a7			beq 	_AMXGroup2
.8190	8a		txa				txa 							; is it in group # 1
.8191	29 40		and #$40			and 	#AM_ISG1
.8193	f0 50		beq $81e5			beq 	_AMXFail 				; no, give up.
.8195	8a		txa				txa 							; get back.
.8196	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8198	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.819a	d0 22		bne $81be			bne 	_AMXHaveInfo
.819c	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819f	c9 81		cmp #$81			cmp 	#$81
.81a1	f0 42		beq $81e5			beq 	_AMXFail
.81a3	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a5	80 17		bra $81be			bra 	_AMXHaveInfo 			; odd design decision there.
.81a7					_AMXGroup2:
.81a7	8a		txa				txa 							; is it in group 2 ?
.81a8	29 20		and #$20			and 	#AM_ISG2
.81aa	f0 39		beq $81e5			beq 	_AMXFail 				; no, give up.
.81ac	8a		txa				txa 							; get the offset into Y
.81ad	29 1f		and #$1f			and 	#$1F
.81af	4a		lsr a				lsr 	a 						; make it 0-7.
.81b0	4a		lsr a				lsr  	a
.81b1	a8		tay				tay
.81b2	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b5					_AMXCheckOkay:
.81b5	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b6	88		dey				dey
.81b7	10 fc		bpl $81b5			bpl 	_AMXCheckOkay
.81b9	90 2a		bcc $81e5			bcc 	_AMXFail 				; not allowed.
.81bb	8a		txa				txa  							; get mask back
.81bc	29 1f		and #$1f			and 	#$1F
.81be					_AMXHaveInfo:
.81be	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81c0	10 05		bpl $81c7			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c2	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c5	d0 1e		bne $81e5			bne 	_AMXFail
.81c7					_AMXAnySize:
.81c7	18		clc				clc 							; add offset to the base opcode
.81c8	6d a4 04	adc $04a4			adc 	BaseOpcode
.81cb					_AMXOutputCode:
.81cb	20 36 81	jsr $8136			jsr 	AssemblerWriteByte 		; write the opcode out.
.81ce	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81d0	f0 10		beq $81e2			beq 	_AMXExit
.81d2	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d5	20 36 81	jsr $8136			jsr 	AssemblerWriteByte
.81d8	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81da	30 06		bmi $81e2			bmi 	_AMXExit
.81dc	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81df	20 36 81	jsr $8136			jsr 	AssemblerWriteByte
.81e2					_AMXExit:
.81e2	7a		ply				ply
.81e3	38		sec				sec
.81e4	60		rts				rts
.81e5					_AMXFail:
.81e5	a0 00		ldy #$00			ldy 	#0
.81e7					_AMXCheckOddities:
.81e7	8a		txa				txa
.81e8	d9 10 82	cmp $8210,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81eb	d0 16		bne $8203			bne 	_AMXCONext
.81ed	b9 0e 82	lda $820e,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81f0	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f3	d0 0e		bne $8203			bne 	_AMXCONext
.81f5	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f7	10 05		bpl $81fe			bpl 	_AMXCONotZero
.81f9	ad 10 04	lda $0410			lda 	NSMantissa1
.81fc	d0 05		bne $8203			bne 	_AMXCONext
.81fe					_AMXCONotZero:
.81fe	b9 0f 82	lda $820f,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8201	80 c8		bra $81cb			bra 	_AMXOutputCode 			; and assemble it
.8203					_AMXCONext:
.8203	c8		iny				iny
.8204	c8		iny				iny
.8205	c8		iny				iny
.8206	b9 0e 82	lda $820e,y			lda 	ExtraOpcode+0,y 		; end of table
.8209	d0 dc		bne $81e7			bne 	_AMXCheckOddities
.820b					_AMXCOFail:
.820b	7a		ply				ply
.820c	18		clc				clc
.820d	60		rts				rts
.820e					ExtraOpcode:
>820e	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8211	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8214	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8217	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>821a	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821d	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8220	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8223	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8226	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8229	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822c	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822d					LabelHere:
.822d	c8		iny				iny 								; skip .
.822e	a2 00		ldx #$00			ldx 	#0 							; get a term
.8230	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; get a term
.8233	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8236	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8238	d0 24		bne $825e			bne 	_ALType
.823a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823d	85 36		sta $36				sta 	zTemp0
.823f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8242	85 37		sta $37				sta 	zTemp0+1
.8244	5a		phy				phy 								; copy address in.
.8245	a0 01		ldy #$01			ldy 	#1
.8247	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.824a	92 36		sta ($36)			sta 	(zTemp0)
.824c	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824f	91 36		sta ($36),y			sta 	(zTemp0),y
.8251	c8		iny				iny
.8252	a9 00		lda #$00			lda 	#0
.8254	91 36		sta ($36),y			sta 	(zTemp0),y
.8256	c8		iny				iny
.8257	91 36		sta ($36),y			sta 	(zTemp0),y
.8259	c8		iny				iny
.825a	91 36		sta ($36),y			sta 	(zTemp0),y
.825c	7a		ply				ply
.825d	60		rts				rts
.825e					_ALType:
.825e	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8261					TypeAndCalculateOperand:
.8261	b1 30		lda ($30),y			lda 	(codePtr),y
.8263	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8265	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8267	f0 5b		beq $82c4			beq 	_TACOExit
.8269	c9 80		cmp #$80			cmp 	#KWC_EOL
.826b	f0 57		beq $82c4			beq 	_TACOExit
.826d	c8		iny				iny
.826e	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8270	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8272	f0 51		beq $82c5			beq 	CalculateOperand
.8274	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8276	f0 1f		beq $8297			beq 	_TACOIndirect
.8278	88		dey				dey 								; undo get of first character
.8279	20 c5 82	jsr $82c5			jsr 	CalculateOperand 			; get operand
.827c	b1 30		lda ($30),y			lda 	(codePtr),y
.827e	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8280	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8282	d0 40		bne $82c4			bne 	_TACOExit
.8284	c8		iny				iny
.8285	20 cf 82	jsr $82cf			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8288	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.828a	c9 58		cmp #$58			cmp 	#'X'
.828c	f0 36		beq $82c4			beq 	_TACOExit
.828e	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8290	c9 59		cmp #$59			cmp 	#'Y'
.8292	f0 30		beq $82c4			beq 	_TACOExit
.8294					_TACOSyntax:
.8294	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.8297					_TACOIndirect:
.8297	20 c5 82	jsr $82c5			jsr 	CalculateOperand 			; get the operand
.829a	b1 30		lda ($30),y			lda 	(codePtr),y
.829c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829e	f0 17		beq $82b7			beq 	_TACOIndX
.82a0	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a3	b1 30		lda ($30),y			lda 	(codePtr),y
.82a5	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a9	d0 19		bne $82c4			bne 	_TACOExit
.82ab	c8		iny				iny
.82ac	20 cf 82	jsr $82cf			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82af	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82b1	d0 e1		bne $8294			bne 	_TACOSyntax
.82b3	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b5	80 0d		bra $82c4			bra 	_TACOExit
.82b7					_TACOIndX:
.82b7	c8		iny				iny
.82b8	20 cf 82	jsr $82cf			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82bb	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bd	d0 d5		bne $8294			bne 	_TACOSyntax
.82bf	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket			; check )
.82c2	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c4					_TACOExit:
.82c4	60		rts				rts
.82c5					CalculateOperand:
.82c5	48		pha				pha
.82c6	da		phx				phx
.82c7	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c9	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.82cc	fa		plx				plx
.82cd	68		pla				pla
.82ce	60		rts				rts
.82cf					TACOCheckXY:
.82cf	b1 30		lda ($30),y			lda 	(codePtr),y
.82d1	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d3	c9 40		cmp #$40			cmp 	#$40
.82d5	d0 21		bne $82f8			bne 	_TCXYFail
.82d7	b1 30		lda ($30),y			lda 	(codePtr),y
.82d9	18		clc				clc
.82da	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82dc	85 37		sta $37				sta 	zTemp0+1
.82de	c8		iny				iny
.82df	b1 30		lda ($30),y			lda 	(codePtr),y
.82e1	c8		iny				iny
.82e2	85 36		sta $36				sta 	zTemp0
.82e4	5a		phy				phy 								; save position
.82e5	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e9	d0 0c		bne $82f7			bne 	_TCXYPopFail
.82eb	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ef	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82f1	f0 08		beq $82fb			beq 	_TCXYFound
.82f3	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f5	f0 04		beq $82fb			beq 	_TCXYFound
.82f7					_TCXYPopFail:
.82f7	7a		ply				ply
.82f8					_TCXYFail:
.82f8	a9 00		lda #$00			lda 	#0
.82fa	60		rts				rts
.82fb					_TCXYFound:
.82fb	7a		ply				ply 								; restore position
.82fc	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82ff					BackloadProgram:
.82ff	a2 ff		ldx #$ff			ldx 	#$FF
.8301	20 29 83	jsr $8329			jsr 	BLReadByte
.8304	30 1f		bmi $8325			bmi 	_BPExit
.8306					_BPCopy:
.8306	e8		inx				inx  								; copy byte in
.8307	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.830a	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.830d	20 29 83	jsr $8329			jsr 	BLReadByte 					; read next byte
.8310	30 0a		bmi $831c			bmi 	_BPEndLine 					; -ve = EOL
.8312	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8314	d0 02		bne $8318			bne 	_BPNotTab
.8316	a9 20		lda #$20			lda 	#' '
.8318					_BPNotTab:
.8318	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.831a	b0 ea		bcs $8306			bcs 	_BPCopy
.831c					_BPEndLine:
.831c	20 58 b4	jsr $b458			jsr 	TokeniseLine 				; tokenise the line.
.831f	38		sec				sec 								; append not insert
.8320	20 62 a1	jsr $a162			jsr 	MemoryInsertLine 			; append to current program
.8323	80 da		bra $82ff			bra 	BackloadProgram
.8325					_BPExit:
.8325	20 f5 83	jsr $83f5			jsr 	ClearCommand 				; clear variables etc.
.8328	60		rts				rts
.8329					BLReadByte:
.8329					_BLLoad:
.8329	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832c	ee 2a 83	inc $832a			inc 	_BLLoad+1
.832f	d0 03		bne $8334			bne 	_BLNoCarry
.8331	ee 2b 83	inc $832b			inc 	_BLLoad+2
.8334					_BLNoCarry:
.8334	c9 00		cmp #$00			cmp 	#0
.8336	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8337					EditProgramCode:
.8337	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.833a	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.833d	20 0a a2	jsr $a20a			jsr 	MemorySearch
.8340	90 05		bcc $8347			bcc 	_EPCNoDelete 				; reached the end don't delete
.8342	d0 03		bne $8347			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8344	20 2b a1	jsr $a12b			jsr 	MemoryDeleteLine 			; delete the line
.8347					_EPCNoDelete:
.8347	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.834a	c9 80		cmp #$80			cmp 	#KWC_EOL
.834c	f0 0d		beq $835b			beq 	_EPCNoInsert
.834e	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8351	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8354	20 0a a2	jsr $a20a			jsr 	MemorySearch
.8357	18		clc				clc 								; insert at this point.
.8358	20 62 a1	jsr $a162			jsr 	MemoryInsertLine 			; insert the line
.835b					_EPCNoInsert:
.835b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835c					WarmStart:
.835c	a2 ff		ldx #$ff			ldx 	#$FF
.835e	9a		txs				txs
.835f	20 03 a9	jsr $a903			jsr 	EXTInputLine 				; get line to lineBuffer
.8362	20 58 b4	jsr $b458			jsr 	TokeniseLine 				; tokenise the line
.8365	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8368	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.836b	d0 17		bne $8384			bne 	_WSEditCode 				; if so,edit code.
.836d	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8370	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8372	85 30		sta $30				sta 	codePtr
.8374	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8376	85 31		sta $31				sta 	codePtr+1
.8378	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.837b	c9 80		cmp #$80			cmp 	#KWC_EOL
.837d	f0 dd		beq $835c			beq 	WarmStart
.837f	20 e9 89	jsr $89e9			jsr 	RUNCodePointerLine 			; execute that line.
.8382	80 d8		bra $835c			bra 	WarmStart
.8384					_WSEditCode:
.8384	20 37 83	jsr $8337			jsr 	EditProgramCode
.8387	20 f5 83	jsr $83f5			jsr 	ClearCommand
.838a	80 d0		bra $835c			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838c					AssembleCommand:
.838c	a2 00		ldx #$00			ldx 	#0
.838e	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; start address
.8391	ad 08 04	lda $0408			lda 	NSMantissa0
.8394	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8397	ad 10 04	lda $0410			lda 	NSMantissa1
.839a	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839d	20 26 8d	jsr $8d26			jsr 	CheckComma
.83a0	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; options
.83a3	ad 08 04	lda $0408			lda 	NSMantissa0
.83a6	8d a0 04	sta $04a0			sta 	AssemblerControl
.83a9	60		rts				rts
.83aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83ab					AssertCommand:
.83ab	a2 00		ldx #$00			ldx 	#0
.83ad	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; the assert test
.83b0	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; exit if result is non zero.
.83b3	d0 05		bne $83ba			bne 	_ACExit
.83b5	a9 0a		lda #$0a		lda	#10
.83b7	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.83ba					_ACExit:
.83ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83bb					CallCommand:
.83bb	a2 00		ldx #$00			ldx 	#0
.83bd	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.83c0					_CCClear
.83c0	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c1	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.83c4	e0 04		cpx #$04			cpx 	#4
.83c6	d0 f8		bne $83c0			bne 	_CCClear
.83c8	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83ca					_CCCParam:
.83ca	b1 30		lda ($30),y			lda 	(codePtr),y
.83cc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83ce	d0 09		bne $83d9			bne 	_CCCRun6502
.83d0	c8		iny				iny 								; skip comma
.83d1	e8		inx				inx	 								; next level
.83d2	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d5	e0 03		cpx #$03			cpx 	#3
.83d7	90 f1		bcc $83ca			bcc 	_CCCParam 					; done all 3 ?
.83d9					_CCCRun6502:
.83d9	5a		phy				phy 								; save position
.83da	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83dd	85 37		sta $37				sta 	zTemp0+1
.83df	ad 08 04	lda $0408			lda 	NSMantissa0
.83e2	85 36		sta $36				sta 	zTemp0
.83e4	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e7	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ea	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83ed	20 f2 83	jsr $83f2			jsr 	_CCCZTemp0 					; call zTemp0
.83f0	7a		ply				ply 								; restore position and exit
.83f1	60		rts				rts
.83f2					_CCCZTemp0:
.83f2	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f5					ClearCommand:
.83f5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f7	85 36		sta $36				sta 	0+zTemp0
.83f9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fb	85 37		sta $37				sta 	1+zTemp0
.83fd					_ClearZeroLoop:
.83fd	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83ff	f0 24		beq $8425			beq 	_ClearZeroEnd
.8401	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8403	a9 00		lda #$00			lda 	#0
.8405					_ClearOneVariable:
.8405	91 36		sta ($36),y			sta 	(zTemp0),y
.8407	c8		iny				iny
.8408	c0 08		cpy #$08			cpy 	#8
.840a	d0 f9		bne $8405			bne 	_ClearOneVariable
.840c	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.840e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8410	c9 18		cmp #$18			cmp 	#NSTProcedure
.8412	d0 04		bne $8418			bne 	_ClearNotProcedure
.8414	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8416	91 36		sta ($36),y			sta 	(zTemp0),y
.8418					_ClearNotProcedure:
.8418	18		clc				clc 								; go to the next variable
.8419	b2 36		lda ($36)			lda 	(zTemp0)
.841b	65 36		adc $36				adc 	zTemp0
.841d	85 36		sta $36				sta 	zTemp0
.841f	90 dc		bcc $83fd			bcc 	_ClearZeroLoop
.8421	e6 37		inc $37				inc 	zTemp0+1
.8423	80 d8		bra $83fd			bra 	_ClearZeroLoop
.8425					_ClearZeroEnd:
.8425	18		clc				clc
.8426	a5 36		lda $36				lda 	zTemp0
.8428	69 01		adc #$01			adc 	#1
.842a	8d 8c 04	sta $048c			sta 	lowMemPtr
.842d	a5 37		lda $37				lda 	zTemp0+1
.842f	69 00		adc #$00			adc 	#0
.8431	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8434	20 c4 a2	jsr $a2c4			jsr 	StackReset
.8437	20 2e a3	jsr $a32e			jsr 	StringSystemInitialise
.843a	20 27 8c	jsr $8c27			jsr 	ProcedureScan
.843d	20 a5 89	jsr $89a5			jsr 	Command_Restore
.8440	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8443	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8446	9c a0 04	stz $04a0			stz 	AssemblerControl
.8449	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.844d					ClearScreen:
.844d	5a		phy				phy
.844e	a9 0c		lda #$0c			lda 	#12
.8450	20 2b a7	jsr $a72b			jsr 	EXTPrintCharacter
.8453	7a		ply				ply
.8454	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8455					Command_Data:
.8455	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8457	a2 80		ldx #$80			ldx 	#KWC_EOL
.8459	20 79 8c	jsr $8c79			jsr 	ScanForward
.845c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845d					DimCommand:
.845d	b1 30		lda ($30),y			lda 	(codePtr),y
.845f	29 c0		and #$c0			and 	#$C0
.8461	c9 40		cmp #$40			cmp 	#$40
.8463	d0 7a		bne $84df			bne 	_DCSyntax
.8465	b1 30		lda ($30),y			lda 	(codePtr),y
.8467	18		clc				clc
.8468	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.846a	85 3f		sta $3f				sta 	zaTemp+1
.846c	c8		iny				iny
.846d	b1 30		lda ($30),y			lda 	(codePtr),y
.846f	c8		iny				iny
.8470	85 3e		sta $3e				sta 	zaTemp
.8472	5a		phy				phy
.8473	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8475	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8477	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8479	c9 18		cmp #$18			cmp 	#NSTProcedure
.847b	f0 62		beq $84df			beq 	_DCSyntax
.847d	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.847f	29 04		and #$04			and 	#NSBIsArray
.8481	f0 64		beq $84e7			beq 	_DCType
.8483	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8485	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8487	d0 59		bne $84e2			bne 	_DCRedefine
.8489	7a		ply				ply
.848a	20 ea 84	jsr $84ea			jsr 	_DCGetSize 				; get array size, check it.
.848d	5a		phy				phy
.848e	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8490	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8492	7a		ply				ply 							; is there a second (e.g. ,x)
.8493	b1 30		lda ($30),y			lda 	(codePtr),y
.8495	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8497	d0 0a		bne $84a3			bne 	_DCOneDimension
.8499	c8		iny				iny 							; skip comma
.849a	20 ea 84	jsr $84ea			jsr 	_DCGetSize 				; get 2nd array size
.849d	5a		phy				phy
.849e	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84a0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a2	7a		ply				ply
.84a3					_DCOneDimension:
.84a3	5a		phy				phy 							; save position
.84a4	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a8	aa		tax				tax
.84a9	c8		iny				iny
.84aa	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ac	e8		inx				inx 							; bump them.
.84ad	1a		inc a				inc 	a
.84ae	20 8f 9d	jsr $9d8f			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b1	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b3	29 e0		and #$e0			and 	#$E0
.84b5	d0 23		bne $84da			bne 	_DCSize
.84b7	a0 02		ldy #$02			ldy 	#2 						; get base type
.84b9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84bb	20 f8 84	jsr $84f8			jsr 	ScaleByBaseType 		; scale by base type
.84be	a5 36		lda $36				lda 	zTemp0
.84c0	a6 37		ldx $37				ldx 	zTemp0+1
.84c2	20 85 99	jsr $9985			jsr 	AllocateXABytes 		; allocate memory
.84c5	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c7	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c9	c8		iny				iny
.84ca	8a		txa				txa
.84cb	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cd	7a		ply				ply 							; get position back
.84ce	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 		; check )
.84d1	b1 30		lda ($30),y			lda 	(codePtr),y
.84d3	c8		iny				iny 							; consume in case
.84d4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d6	f0 85		beq $845d			beq 	DimCommand
.84d8	88		dey				dey 							; undo consume
.84d9	60		rts				rts
.84da					_DCSize:
.84da	a9 16		lda #$16		lda	#22
.84dc	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.84df					_DCSyntax:
.84df	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.84e2					_DCRedefine:
.84e2	a9 15		lda #$15		lda	#21
.84e4	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.84e7					_DCType:
.84e7	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.84ea					_DCGetSize:
.84ea	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84ec	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 	; get array dimension
.84ef	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f1	f0 e7		beq $84da			beq 	_DCSize
.84f3	c9 fe		cmp #$fe			cmp 	#254
.84f5	f0 e3		beq $84da			beq 	_DCSize
.84f7	60		rts				rts
.84f8					ScaleByBaseType:
.84f8	29 10		and #$10			and 	#NSBIsString 			; is it string
.84fa	d0 19		bne $8515			bne 	_SBBTString
.84fc	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84fe	48		pha				pha
.84ff	a5 36		lda $36				lda 	zTemp0
.8501	48		pha				pha
.8502	06 36		asl $36				asl 	zTemp0 					; x 2
.8504	26 37		rol $37				rol 	zTemp0+1
.8506	06 36		asl $36				asl 	zTemp0 					; x 4
.8508	26 37		rol $37				rol 	zTemp0+1
.850a	68		pla				pla 							; add stacked value = x 5
.850b	65 36		adc $36				adc 	zTemp0
.850d	85 36		sta $36				sta 	zTemp0
.850f	68		pla				pla
.8510	65 37		adc $37				adc 	zTemp0+1
.8512	85 37		sta $37				sta 	zTemp0+1
.8514	60		rts				rts
.8515					_SBBTString:
.8515	06 36		asl $36				asl 	zTemp0
.8517	26 37		rol $37				rol 	zTemp0+1
.8519	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.851a					EndCommand:
.851a	4c 5c 83	jmp $835c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.851d					ForCommand:
.851d	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.851f	20 5f a2	jsr $a25f			jsr 	StackOpen
.8522	a2 00		ldx #$00			ldx 	#0
.8524	20 c0 97	jsr $97c0			jsr 	EvaluateTerm
.8527	bd 00 04	lda $0400,x			lda 	NSStatus,x
.852a	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.852c	d0 49		bne $8577			bne		_FCError
.852e	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8530	20 2e 8d	jsr $8d2e			jsr 	CheckNextA
.8533	e8		inx				inx
.8534	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; <from> in +1
.8537	b1 30		lda ($30),y			lda 	(codePtr),y
.8539	c8		iny				iny 								; consume it
.853a	48		pha				pha 								; save on stack for later
.853b	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.853d	f0 04		beq $8543			beq 	_FCNoSyntax
.853f	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8541	d0 37		bne $857a			bne 	_FCSyntaxError
.8543					_FCNoSyntax:
.8543	e8		inx				inx
.8544	20 46 9d	jsr $9d46			jsr 	EvaluateInteger
.8547	20 a3 a2	jsr $a2a3			jsr 	STKSaveCodePosition 		; save loop back position
.854a	68		pla				pla 								; restore DOWNTO or TO
.854b	5a		phy				phy 								; save Y on the stack
.854c	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.854e	f0 02		beq $8552			beq 	_FCNotDownTo
.8550	a9 02		lda #$02			lda 	#2
.8552					_FCNotDownTo:
.8552	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8553	a0 10		ldy #$10			ldy 	#16
.8555	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8557	a0 06		ldy #$06			ldy 	#6
.8559	ad 08 04	lda $0408			lda 	NSMantissa0
.855c	91 34		sta ($34),y			sta 	(basicStack),y
.855e	ad 10 04	lda $0410			lda 	NSMantissa1
.8561	c8		iny				iny
.8562	91 34		sta ($34),y			sta 	(basicStack),y
.8564	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8566	a2 01		ldx #$01			ldx 	#1
.8568	20 7d 85	jsr $857d			jsr 	FCIntegerToStack
.856b	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.856d	a2 02		ldx #$02			ldx 	#2
.856f	20 7d 85	jsr $857d			jsr 	FCIntegerToStack
.8572	20 9d 85	jsr $859d			jsr 	CopyIndexToReference
.8575	7a		ply				ply 								; restore position
.8576	60		rts				rts
.8577					_FCError:
.8577	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.857a					_FCSyntaxError:
.857a	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.857d					FCIntegerToStack:
.857d	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8580	10 03		bpl $8585			bpl	 	_FCNotNegative
.8582	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8585					_FCNotNegative:
.8585	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8588	91 34		sta ($34),y			sta 	(basicStack),y
.858a	c8		iny				iny
.858b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.858e	91 34		sta ($34),y			sta 	(basicStack),y
.8590	c8		iny				iny
.8591	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8594	91 34		sta ($34),y			sta 	(basicStack),y
.8596	c8		iny				iny
.8597	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.859a	91 34		sta ($34),y			sta 	(basicStack),y
.859c	60		rts				rts
.859d					CopyIndexToReference:
.859d	5a		phy				phy
.859e	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85a0	38		sec				sec 								; (because we copy from offset 8)
.85a1	b1 34		lda ($34),y			lda 	(basicStack),y
.85a3	e9 08		sbc #$08			sbc 	#8
.85a5	85 36		sta $36				sta 	zTemp0
.85a7	c8		iny				iny
.85a8	b1 34		lda ($34),y			lda 	(basicStack),y
.85aa	e9 00		sbc #$00			sbc 	#0
.85ac	85 37		sta $37				sta 	zTemp0+1
.85ae	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85b0	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b2	b1 34		lda ($34),y			lda 	(basicStack),y
.85b4	0a		asl a				asl 	a 							; into carry
.85b5	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b7	90 14		bcc $85cd			bcc 	_CITRNormal
.85b9	38		sec				sec
.85ba					_CITRNegative:
.85ba	a9 00		lda #$00			lda 	#0
.85bc	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85be	91 36		sta ($36),y			sta 	(zTemp0),y
.85c0	c8		iny				iny
.85c1	ca		dex				dex
.85c2	d0 f6		bne $85ba			bne 	_CITRNegative
.85c4	88		dey				dey 								; look at MSB of mantissa
.85c5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c7	09 80		ora #$80			ora 	#$80
.85c9	91 36		sta ($36),y			sta 	(zTemp0),y
.85cb	7a		ply				ply
.85cc	60		rts				rts
.85cd					_CITRNormal:
.85cd	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85cf	91 36		sta ($36),y			sta 	(zTemp0),y
.85d1	c8		iny				iny
.85d2	ca		dex				dex
.85d3	d0 f8		bne $85cd			bne 	_CITRNormal
.85d5	7a		ply				ply 								; and exit.
.85d6	60		rts				rts
.85d7					NextCommand:
.85d7	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85d9	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85db	20 8b a2	jsr $a28b			jsr 	StackCheckFrame
.85de	5a		phy				phy
.85df	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e1	b1 34		lda ($34),y			lda 	(basicStack),y
.85e3	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e5	30 02		bmi $85e9			bmi 	_NCStepNeg
.85e7	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85e9					_NCStepNeg:
.85e9	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85eb	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ed	18		clc				clc
.85ee					_NCBump:
.85ee	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85f0	91 34		sta ($34),y			sta 	(basicStack),y
.85f2	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f4	c8		iny				iny 								; next byte
.85f5	ca		dex				dex 								; do four times
.85f6	d0 f6		bne $85ee			bne 	_NCBump
.85f8	20 9d 85	jsr $859d			jsr		CopyIndexToReference		; copy it to the reference variable.
.85fb	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85fd	b1 34		lda ($34),y			lda 	(basicStack),y
.85ff	0a		asl a				asl 	a 							; sign bit to carry
.8600	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8602	85 38		sta $38				sta 	zTemp1
.8604	90 02		bcc $8608			bcc 	_NCCompRev 					; use if step is +ve
.8606	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8608					_NCCompRev:
.8608	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.860a	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.860c	85 39		sta $39				sta 	zTemp1+1
.860e	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8610	38		sec				sec
.8611					_NCCompare:
.8611	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8613	b1 34		lda ($34),y			lda 	(basicStack),y
.8615	a4 39		ldy $39				ldy 	zTemp1+1
.8617	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8619	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861b	e6 39		inc $39				inc 	zTemp1+1
.861d	ca		dex				dex 								; do it 4 times.
.861e	d0 f1		bne $8611			bne 	_NCCompare
.8620	50 02		bvc $8624			bvc 	_NCNoOverflow 				; convert to signed comparison
.8622	49 80		eor #$80			eor 	#$80
.8624					_NCNoOverflow:
.8624	7a		ply				ply 								; restore Y position
.8625	0a		asl a				asl 	a 							; is bit 7 set.
.8626	90 04		bcc $862c			bcc 	_NCLoopback 				; if no , >= so loop back
.8628	20 7d a2	jsr $a27d			jsr 	StackClose 					; exit the loop
.862b	60		rts				rts
.862c					_NCLoopBack:
.862c	20 b4 a2	jsr $a2b4			jsr 	STKLoadCodePosition 		; loop back
.862f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8630					Command_GOSUB:
.8630	a2 00		ldx #$00			ldx 	#0
.8632	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8635	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8637	20 5f a2	jsr $a25f			jsr 	StackOpen 					; create frame
.863a	20 a3 a2	jsr $a2a3			jsr 	STKSaveCodePosition 		; save current position
.863d	4c 53 86	jmp $8653			jmp 	GotoStackX
.8640					Command_RETURN:
.8640	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8642	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8644	20 8b a2	jsr $a28b			jsr 	StackCheckFrame
.8647	20 b4 a2	jsr $a2b4			jsr 	STKLoadCodePosition 		; restore code position
.864a	20 7d a2	jsr $a27d			jsr 	StackClose
.864d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.864e					GotoCommand:
.864e	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8650	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.8653					GotoStackX:
.8653	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8656	48		pha				pha 								; it is slightly inefficient, just in cases.
.8657	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.865a	fa		plx				plx
.865b	20 0a a2	jsr $a20a			jsr 	MemorySearch 				; transfer to line number AX.
.865e	90 05		bcc $8665			bcc 	_GotoError 					; not found, off end.
.8660	d0 03		bne $8665			bne 	_GotoError 					; not found exactly
.8662	4c e2 89	jmp $89e2			jmp 	RunNewLine 					; and go straight to new line code.
.8665					_GotoError:
.8665	a9 0d		lda #$0d		lda	#13
.8667	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.866a					IfCommand:
.866a	a2 00		ldx #$00			ldx 	#0 							; If what.
.866c	20 23 9d	jsr $9d23			jsr 	EvaluateNumber
.866f	b1 30		lda ($30),y			lda 	(codePtr),y
.8671	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8673	d0 0a		bne $867f			bne 	_IFStructured
.8675	c8		iny				iny 								; consume THEN
.8676	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero
.8679	f0 01		beq $867c			beq 	_IfFail 					; if fail, go to next line
.867b	60		rts				rts 								; if THEN just continue
.867c					_IfFail:
.867c	4c 47 8a	jmp $8a47			jmp 	EOLCommand
.867f					_IfStructured:
.867f	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero
.8682	d0 07		bne $868b			bne 	_IfExit 					; if not, then continue normally.
.8684	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8686	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.8688	20 79 8c	jsr $8c79			jsr 	ScanForward 				; and run from there/
.868b					_IfExit:
.868b	60		rts				rts
.868c					ElseCode:
.868c	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.868e	aa		tax				tax 								; so just go to the structure exit
.868f	20 79 8c	jsr $8c79			jsr 	ScanForward
.8692	60		rts				rts
.8693					EndIf:
.8693	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8694					LetCommand:
.8694	a2 00		ldx #$00			ldx 	#0
.8696	b1 30		lda ($30),y			lda 	(codePtr),y
.8698	c9 10		cmp #$10			cmp 	#KWD_AT
.869a	d0 16		bne $86b2			bne 	_LCStandard
.869c	c8		iny				iny 								; skip equal
.869d	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; get a number
.86a0	20 04 96	jsr $9604			jsr 	Dereference 				; dereference it
.86a3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a6	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86a8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86ab	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86ad	d0 10		bne $86bf			bne 	_LCMain
.86af	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; was a reference before.
.86b2					_LCStandard:
.86b2	ad ce 92	lda $92ce			lda 	PrecedenceLevel+"*"			; precedence > this
.86b5	20 e8 92	jsr $92e8			jsr 	EvaluateExpressionAtPrecedence
.86b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86bb	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86bd	f0 0e		beq $86cd			beq 	_LetGoProc 					; it's a procedure call.
.86bf					_LCMain:
.86bf	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c1	20 2e 8d	jsr $8d2e			jsr 	CheckNextA
.86c4	e8		inx				inx 								; RHS
.86c5	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue
.86c8	ca		dex				dex
.86c9	20 d0 86	jsr $86d0			jsr 	AssignVariable
.86cc	60		rts				rts
.86cd					_LetGoProc:
.86cd	4c af 88	jmp $88af			jmp 	CallProcedure
.86d0					AssignVariable:
.86d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d3	48		pha				pha 								; save a copy
.86d4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d7	29 10		and #$10			and 	#NSBIsString
.86d9	d0 0b		bne $86e6			bne 	_ASError
.86db	68		pla				pla 								; get back
.86dc	29 10		and #$10			and 	#NSBIsString 				; check type
.86de	d0 03		bne $86e3			bne 	_ASString
.86e0	4c 2c 95	jmp $952c			jmp 	AssignNumber
.86e3					_ASString:
.86e3	4c 9a 95	jmp $959a			jmp 	AssignString
.86e6					_ASError:
.86e6	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e9					Command_List:
.86e9	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86ec	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86ef	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f2	a9 ff		lda #$ff			lda 	#$FF
.86f4	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f7	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86fa	b1 30		lda ($30),y			lda 	(codePtr),y
.86fc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86fe	f0 1e		beq $871e			beq 	_CLSecond
.8700	20 7c 87	jsr $877c			jsr 	CLIsDigit 					; if not digit, list all
.8703	b0 24		bcs $8729			bcs 	_CLStart
.8705	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8707	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.870a	b1 30		lda ($30),y			lda 	(codePtr),y
.870c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.870e	f0 0e		beq $871e			beq 	_CLSecond 					; if so go get it
.8710	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8713	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8716	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8719	8d 17 04	sta $0417			sta 	NSMantissa1+7
.871c	80 0b		bra $8729			bra 	_CLStart
.871e					_CLSecond:
.871e	c8		iny				iny 								; consume comma
.871f	20 7c 87	jsr $877c			jsr 	CLIsDigit 					; digit found
.8722	b0 05		bcs $8729			bcs 	_CLStart 					; if not, continue listing
.8724	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8726	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.8729					_CLStart
.8729	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872b	85 30		sta $30				sta 	codePtr
.872d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.872f	85 31		sta $31				sta 	codePtr+1
.8731					_CLLoop:
.8731	20 0c a9	jsr $a90c			jsr 	EXTBreakCheck 				; break check
.8734	f0 30		beq $8766			beq 	_CLExit
.8736	b2 30		lda ($30)			lda 	(codePtr)
.8738	f0 2c		beq $8766			beq 	_CLExit
.873a	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.873c	20 69 87	jsr $8769			jsr 	CLCompareLineNo
.873f	90 18		bcc $8759			bcc 	_CLNext
.8741	a2 07		ldx #$07			ldx 	#7
.8743	20 69 87	jsr $8769			jsr 	CLCompareLineNo
.8746	f0 02		beq $874a			beq 	_CLDoThisOne
.8748	b0 0f		bcs $8759			bcs 	_CLNext
.874a					_CLDoThisOne:
.874a	20 56 b2	jsr $b256			jsr 	ListConvertLine 			; convert line into token Buffer
.874d	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.874f	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.8751	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8754	a9 0d		lda #$0d			lda 	#13 						; new line
.8756	20 2b a7	jsr $a72b			jsr 	EXTPrintCharacter
.8759					_CLNext:
.8759	18		clc				clc
.875a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.875c	65 30		adc $30				adc 	codePtr
.875e	85 30		sta $30				sta 	codePtr
.8760	90 02		bcc $8764			bcc 	_CREExit
.8762	e6 31		inc $31				inc 	codePtr+1
.8764					_CREExit:
.8764	80 cb		bra $8731			bra 	_CLLoop
.8766					_CLExit:
.8766	4c 5c 83	jmp $835c			jmp 	WarmStart
.8769					CLCompareLineNo:
.8769	38		sec				sec
.876a	a0 01		ldy #$01			ldy 	#1
.876c	b1 30		lda ($30),y			lda 	(codePtr),y
.876e	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8771	85 36		sta $36				sta 	zTemp0
.8773	c8		iny				iny
.8774	b1 30		lda ($30),y			lda 	(codePtr),y
.8776	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8779	05 36		ora $36				ora 	zTemp0
.877b	60		rts				rts
.877c					CLIsDigit:
.877c	b1 30		lda ($30),y			lda 	(codePtr),y
.877e	c9 30		cmp #$30			cmp 	#"0"
.8780	90 03		bcc $8785			bcc	 	_CLIDExitFalse
.8782	c9 3a		cmp #$3a			cmp 	#"9"+1
.8784	60		rts				rts
.8785					_CLIDExitFalse:
.8785	38		sec				sec
.8786	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8787					Command_LOCAL:
.8787	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8789	20 95 87	jsr $8795			jsr 	LocaliseNextTerm 			; convert term to a local.
.878c	b1 30		lda ($30),y			lda 	(codePtr),y
.878e	c8		iny				iny
.878f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8791	f0 f4		beq $8787			beq 	Command_LOCAL
.8793	88		dey				dey 								; unpick pre-get
.8794	60		rts				rts
.8795					LocaliseNextTerm:
.8795	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; evaluate the term
.8798	bd 00 04	lda $0400,x			lda 	NSStatus,x
.879b	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.879d	f0 61		beq $8800			beq		_LNTError
.879f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a2	85 36		sta $36				sta 	zTemp0
.87a4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87a7	85 37		sta $37				sta  	zTemp0+1
.87a9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87ac	29 10		and #$10			and 	#NSBIsString
.87ae	d0 1e		bne $87ce			bne 	_LNTPushString
.87b0	5a		phy				phy
.87b1	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b3					_LNTPushNumLoop:
.87b3	b1 36		lda ($36),y			lda		(zTemp0),y
.87b5	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87b8	c8		iny				iny
.87b9	c0 05		cpy #$05			cpy 	#5
.87bb	d0 f6		bne $87b3			bne 	_LNTPushNumLoop
.87bd	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87bf	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87c2	a5 37		lda $37				lda 	zTemp0+1
.87c4	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87c7	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87c9	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87cc	7a		ply				ply
.87cd	60		rts				rts
.87ce					_LNTPushString:
.87ce	5a		phy				phy
.87cf	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d1	85 38		sta $38				sta 	zTemp1
.87d3	a0 01		ldy #$01			ldy 	#1
.87d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d7	85 39		sta $39				sta 	zTemp1+1
.87d9	a0 00		ldy #$00			ldy 	#0 							; output string
.87db	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87dd	f0 0a		beq $87e9			beq 	_LNTStringOut
.87df					_LNTPushStrLoop:
.87df	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e1	f0 06		beq $87e9			beq 	_LNTStringOut
.87e3	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87e6	c8		iny				iny
.87e7	80 f6		bra $87df			bra 	_LNTPushStrLoop
.87e9					_LNTStringOut:
.87e9	98		tya				tya									; output length
.87ea	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87ed	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87f0	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87f3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f6	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87f9	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87fb	20 3d a2	jsr $a23d			jsr 	StackPushByte
.87fe	7a		ply				ply
.87ff	60		rts				rts
.8800					_LNTError:
.8800	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.8803					LocalPopValue:
.8803	20 56 a2	jsr $a256			jsr 	StackPopByte
.8806	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8808	d0 17		bne $8821			bne 	_LPVString
.880a	20 56 a2	jsr $a256			jsr 	StackPopByte 				; address
.880d	85 37		sta $37				sta 	zTemp0+1
.880f	20 56 a2	jsr $a256			jsr 	StackPopByte
.8812	85 36		sta $36				sta 	zTemp0
.8814	5a		phy				phy
.8815	a0 04		ldy #$04			ldy 	#4 							; copy back
.8817					_LPVNumberCopy:
.8817	20 56 a2	jsr $a256			jsr 	StackPopByte
.881a	91 36		sta ($36),y			sta 	(zTemp0),y
.881c	88		dey				dey
.881d	10 f8		bpl $8817			bpl 	_LPVNumberCopy
.881f	7a		ply				ply 								; and complete
.8820	60		rts				rts
.8821					_LPVString:
.8821	20 56 a2	jsr $a256			jsr 	StackPopByte 				; address of record => zTemp0
.8824	85 37		sta $37				sta 	zTemp0+1
.8826	20 56 a2	jsr $a256			jsr 	StackPopByte
.8829	85 36		sta $36				sta 	zTemp0
.882b	5a		phy				phy
.882c	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.882e	85 38		sta $38				sta 	zTemp1
.8830	a0 01		ldy #$01			ldy 	#1
.8832	b1 36		lda ($36),y			lda 	(zTemp0),y
.8834	85 39		sta $39				sta 	zTemp1+1
.8836	20 56 a2	jsr $a256			jsr 	StackPopByte 				; # to get => y
.8839	a8		tay				tay
.883a	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.883c	f0 0e		beq $884c			beq 	_LPVStringCopied
.883e	a9 00		lda #$00			lda 	#0 							; NULL on end
.8840	91 38		sta ($38),y			sta 	(zTemp1),y
.8842					_LPVStringCopy:
.8842	88		dey				dey
.8843	30 07		bmi $884c			bmi 	_LPVStringCopied
.8845	20 56 a2	jsr $a256			jsr 	StackPopByte
.8848	91 38		sta ($38),y			sta 	(zTemp1),y
.884a	80 f6		bra $8842			bra 	_LPVStringCopy
.884c					_LPVStringCopied:
.884c	fa		plx				plx
.884d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.884e					NewCommand:
.884e	20 e8 a1	jsr $a1e8			jsr 	MemoryNew
.8851	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8854	20 f5 83	jsr $83f5			jsr 	ClearCommand 				; clear everything.
.8857	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8858					Command_Print:
.8858	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8859					_CPLoop:
.8859	08		php				php 								; save last action flag
.885a	b1 30		lda ($30),y			lda 	(codePtr),y
.885c	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.885e	f0 46		beq $88a6			beq 	_CPExit
.8860	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8862	f0 42		beq $88a6			beq 	_CPExit
.8864	68		pla				pla 								; throw last action flag
.8865	b1 30		lda ($30),y			lda 	(codePtr),y
.8867	c8		iny				iny
.8868	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.886a	f0 37		beq $88a3			beq 	_CPContinueWithSameLine
.886c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.886e	f0 2e		beq $889e			beq 	_CPTab
.8870	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8872	f0 26		beq $889a			beq 	_CPNewLine
.8874	88		dey				dey 								; undo the get.
.8875	a2 00		ldx #$00			ldx 	#0
.8877	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get a value into slot 0
.887a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.887d	29 10		and #$10			and 	#NSBIsString
.887f	f0 0b		beq $888c			beq 	_CPNumber
.8881	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8884	ad 08 04	lda $0408			lda 	NSMantissa0
.8887	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.888a	80 cc		bra $8858			bra 	Command_Print 				; loop round clearing carry so NL if end
.888c					_CPNumber:
.888c	a9 05		lda #$05			lda 	#5 							; maximum decimals
.888e	20 f0 9b	jsr $9bf0			jsr 	ConvertNumberToString 		; convert to string
.8891	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8893	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.8895	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8898	80 be		bra $8858			bra 	Command_Print 				; loop round clearing carry so NL if end
.889a					_CPNewLine:
.889a	a9 0d		lda #$0d			lda 	#13
.889c	80 02		bra $88a0			bra 	_CPPrintChar
.889e					_CPTab:
.889e	a9 09		lda #$09			lda 	#9 							; print TAB
.88a0					_CPPrintChar:
.88a0	20 2b a7	jsr $a72b			jsr 	EXTPrintCharacter
.88a3					_CPContinueWithSameLine:
.88a3	38		sec				sec 								; loop round with carry set, which
.88a4	80 b3		bra $8859			bra 	_CPLoop 					; will inhibit final CR
.88a6					_CPExit:
.88a6	28		plp				plp 								; get last action flag
.88a7	b0 05		bcs $88ae			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88a9	a9 0d		lda #$0d			lda 	#13 						; print new line
.88ab	20 2b a7	jsr $a72b			jsr 	EXTPrintCharacter
.88ae					_CPExit2:
.88ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88af					CallProcedure:
.88af	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88b1	b1 30		lda ($30),y			lda 	(codePtr),y
.88b3	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88b5	f0 0c		beq $88c3			beq 	_CPEndParam
.88b7					_CPParamLoop:
.88b7	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get parameter onto stack
.88ba	e8		inx				inx 								; bump next stack
.88bb	b1 30		lda ($30),y			lda 	(codePtr),y
.88bd	c8		iny				iny
.88be	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88c0	f0 f5		beq $88b7			beq 	_CPParamLoop
.88c2	88		dey				dey 								; unpick.
.88c3					_CPEndParam:
.88c3	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88c6	c8		iny				iny									; skip right bracket
.88c7	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88c9	20 5f a2	jsr $a25f			jsr 	StackOpen
.88cc	20 a3 a2	jsr $a2a3			jsr 	STKSaveCodePosition 		; save loop position
.88cf	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88d2	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88d4	ad 10 04	lda $0410			lda 	NSMantissa1
.88d7	85 37		sta $37				sta 	zTemp0+1
.88d9	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88db	b2 36		lda ($36)			lda 	(zTemp0)
.88dd	85 30		sta $30				sta 	safePtr
.88df	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e1	85 31		sta $31				sta 	safePtr+1
.88e3	c8		iny				iny
.88e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e6	85 32		sta $32				sta 	safePtr+2
.88e8	c8		iny				iny
.88e9	b1 36		lda ($36),y			lda 	(zTemp0),y
.88eb	85 33		sta $33				sta 	safePtr+3
.88ed	c8		iny				iny 								; get Y offset -> Y
.88ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f0	a8		tay				tay
.88f1	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88f3	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88f6	f0 13		beq $890b			beq 	_ParamExit 					; if so, exit.
.88f8					_ParamExtract:
.88f8	ca		dex				dex 								; put a local term on the level before
.88f9	20 95 87	jsr $8795			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88fc	20 d0 86	jsr $86d0			jsr 	AssignVariable 				; assign stacked value to the variable.
.88ff	e8		inx				inx 								; advance to next parameter to do.
.8900	e8		inx				inx
.8901	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8904	f0 05		beq $890b			beq 	_ParamExit
.8906	20 26 8d	jsr $8d26			jsr 	CheckComma 					; comma seperating parameters
.8909	80 ed		bra $88f8			bra 	_ParamExtract
.890b					_ParamExit:
.890b	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check )
.890e	60		rts				rts 								; and continue from here
.890f					Command_ENDPROC:
.890f	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8911	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8913	20 8b a2	jsr $a28b			jsr 	StackCheckFrame
.8916	20 b4 a2	jsr $a2b4			jsr 	STKLoadCodePosition 		; restore code position
.8919	20 7d a2	jsr $a27d			jsr 	StackClose
.891c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.891d					Command_Read:
.891d	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.891f	20 c0 97	jsr $97c0			jsr 	EvaluateTerm
.8922	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8925	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8927	f0 4a		beq $8973			beq 	_CRSyntax 					; check reference (bit 0)
.8929	20 bc 89	jsr $89bc			jsr 	SwapDataCodePtrs 			; swap code and data
.892c	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.892f	d0 20		bne $8951			bne 	_CRContinueData
.8931					_CRKeepSearching:
.8931	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8933	aa		tax				tax
.8934	20 79 8c	jsr $8c79			jsr 	ScanForward
.8937	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.8939	f0 16		beq $8951			beq 	_CRHaveData 				; found it
.893b	18		clc				clc
.893c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.893e	65 30		adc $30				adc 	codePtr
.8940	85 30		sta $30				sta 	codePtr
.8942	90 02		bcc $8946			bcc 	_CREExit
.8944	e6 31		inc $31				inc 	codePtr+1
.8946					_CREExit:
.8946	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8948	b2 30		lda ($30)			lda 	(codePtr)
.894a	d0 e5		bne $8931			bne 	_CRKeepSearching
.894c	a9 0b		lda #$0b		lda	#11
.894e	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8951					_CRHaveData:
.8951					_CRContinueData:
.8951	a2 01		ldx #$01			ldx 	#1
.8953	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8956	ca		dex				dex
.8957	20 d0 86	jsr $86d0			jsr		AssignVariable 				; do the assignment
.895a	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.895d	b1 30		lda ($30),y			lda 	(codePtr),y
.895f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8961	d0 04		bne $8967			bne 	_CRSwapBack
.8963	c8		iny				iny 								; consume comma
.8964	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8967					_CRSwapBack:
.8967	20 bc 89	jsr $89bc			jsr 	SwapDataCodePtrs			; swap them back.
.896a	b1 30		lda ($30),y			lda 	(codePtr),y
.896c	c8		iny				iny
.896d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.896f	f0 ac		beq $891d			beq 	Command_Read 				; if so go round again.
.8971	88		dey				dey 								; unpick get.
.8972	60		rts				rts
.8973					_CRSyntax:
.8973	4c 84 9f	jmp $9f84			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8976					RemCommand:
.8976	b1 30		lda ($30),y			lda 	(codePtr),y
.8978	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.897a	d0 06		bne $8982			bne 	_RMExit
.897c	c8		iny				iny
.897d	98		tya				tya
.897e	38		sec				sec
.897f	71 30		adc ($30),y			adc 	(codePtr),y
.8981	a8		tay				tay
.8982					_RMExit:
.8982	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8983					Command_REPEAT:
.8983	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8985	20 5f a2	jsr $a25f			jsr 	StackOpen
.8988	20 a3 a2	jsr $a2a3			jsr 	STKSaveCodePosition 		; save loop position
.898b	60		rts				rts
.898c					Command_UNTIL:
.898c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.898e	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8990	20 8b a2	jsr $a28b			jsr 	StackCheckFrame
.8993	a2 00		ldx #$00			ldx 	#0
.8995	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; work out the number
.8998	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; check if zero
.899b	f0 04		beq $89a1			beq 	_CULoopBack 				; if so keep looping
.899d	20 7d a2	jsr $a27d			jsr 	StackClose		 			; return
.89a0	60		rts				rts
.89a1					_CULoopBack:
.89a1	20 b4 a2	jsr $a2b4			jsr 	STKLoadCodePosition 		; loop back
.89a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a5					Command_Restore:
.89a5	20 bc 89	jsr $89bc			jsr 	SwapDataCodePtrs 			; swap code and data
.89a8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89aa	85 30		sta $30				sta 	codePtr
.89ac	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89ae	85 31		sta $31				sta 	codePtr+1
.89b0	20 bc 89	jsr $89bc			jsr 	SwapDataCodePtrs 			; put them back
.89b3	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b5	8d 9b 04	sta $049b			sta 	dataPointer+4
.89b8	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89bb	60		rts				rts
.89bc					SwapDataCodePtrs:
.89bc	da		phx				phx
.89bd	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89bf					_SDCPLoop:
.89bf	b5 30		lda $30,x			lda 	safePtr,x
.89c1	48		pha				pha
.89c2	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89c5	95 30		sta $30,x			sta 	safePtr,x
.89c7	68		pla				pla
.89c8	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89cb	ca		dex				dex
.89cc	10 f1		bpl $89bf			bpl 	_SDCPLoop
.89ce	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89d1	8c 9b 04	sty $049b			sty 	dataPointer+4
.89d4	a8		tay				tay
.89d5	fa		plx				plx
.89d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89d7					CommandRUN:
.89d7	20 f5 83	jsr $83f5			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89da	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89dc	85 30		sta $30				sta 	codePtr
.89de	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e0	85 31		sta $31				sta 	codePtr+1
.89e2					RUNNewLine:
.89e2	b2 30		lda ($30)			lda 	(codePtr)
.89e4	f0 5e		beq $8a44			beq 	CRNoProgram         		; no then END.
.89e6	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89e8	9a		txs				txs
.89e9					RUNCodePointerLine:
.89e9	a0 02		ldy #$02			ldy 	#2 							; start of program
.89eb					_CRIncMainLoop:
.89eb	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89ee	d0 05		bne $89f5			bne 	_CRNoBreakCheck
.89f0	20 0c a9	jsr $a90c			jsr 	EXTBreakCheck 				; break check
.89f3	f0 4a		beq $8a3f			beq 	_CRBreak
.89f5					_CRNoBreakCheck:
.89f5	c8		iny				iny
.89f6					_CRMainLoop:
.89f6	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89f9	b1 30		lda ($30),y			lda 	(codePtr),y
.89fb	10 10		bpl $8a0d			bpl 	_CRNotKeyword
.89fd	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89ff	b0 04		bcs $8a05			bcs 	_CRIsKeyword
.8a01	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a03	b0 34		bcs $8a39			bcs		_CRSyntaxError
.8a05					_CRIsKeyword:
.8a05	c8		iny				iny 								; consume command
.8a06	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a07	aa		tax				tax 								; put in X for vector jump
.8a08	20 3c 8a	jsr $8a3c			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a0b	80 e9		bra $89f6			bra 	_CRMainLoop 				; and loop round
.8a0d					_CRNotKeyword:
.8a0d	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a0f	f0 da		beq $89eb			beq 	_CRIncMainLoop
.8a11	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a13	90 05		bcc $8a1a			bcc 	_CRNotVariable
.8a15					_CRGoLet:
.8a15	20 94 86	jsr $8694			jsr 	LetCommand
.8a18	80 dc		bra $89f6			bra 	_CRMainLoop
.8a1a					_CRNotVariable:
.8a1a	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a1c	f0 f7		beq $8a15			beq 	_CRGoLet
.8a1e	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a20	f0 f3		beq $8a15			beq 	_CRGoLet
.8a22	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a24	f0 ef		beq $8a15			beq 	_CRGoLet
.8a26	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a28	f0 09		beq $8a33			beq 	_CRGoRem
.8a2a	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a2c	d0 0b		bne $8a39			bne 	_CRSyntaxError
.8a2e	20 2d 82	jsr $822d			jsr 	LabelHere
.8a31	80 c3		bra $89f6			bra 	_CRMainLoop
.8a33					_CRGoRem:
.8a33	c8		iny				iny
.8a34	20 76 89	jsr $8976			jsr 	RemCommand
.8a37	80 bd		bra $89f6			bra 	_CRMainLoop
.8a39					_CRSyntaxError:
.8a39	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.8a3c					_CRCallVector0:
.8a3c	7c e8 8a	jmp ($8ae8,x)			jmp 	(VectorSet0,x)
.8a3f					_CRBreak:
.8a3f	a9 01		lda #$01		lda	#1
.8a41	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8a44					CRNoProgram:
.8a44	4c 1a 85	jmp $851a			jmp 	EndCommand
.8a47					EOLCommand:
.8a47	18		clc				clc
.8a48	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a4a	65 30		adc $30				adc 	codePtr
.8a4c	85 30		sta $30				sta 	codePtr
.8a4e	90 02		bcc $8a52			bcc 	_CREExit
.8a50	e6 31		inc $31				inc 	codePtr+1
.8a52					_CREExit:
.8a52	80 8e		bra $89e2			bra 	RunNewLine
.8a54					Shift1Command:
.8a54	b1 30		lda ($30),y			lda 	(codePtr),y
.8a56	c8		iny				iny
.8a57	0a		asl a				asl 	a
.8a58	aa		tax				tax
.8a59	7c 80 8b	jmp ($8b80,x)			jmp 	(VectorSet1,x)
.8a5c					Shift2Command:
.8a5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5e	c8		iny				iny
.8a5f	0a		asl a				asl 	a
.8a60	aa		tax				tax
.8a61	7c 9a 8b	jmp ($8b9a,x)			jmp 	(VectorSet2,x)
.8a64					Unused1:
.8a64					Unused2:
.8a64					Unused3:
.8a64					Unused4:
.8a64	4c 84 9f	jmp $9f84			jmp 	SyntaxError
>8a67							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a68					VectorSetPunc:
>8a68	24 90					.word	ShiftLeft                        ; $00 <<
>8a6a	db 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a6c	d1 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a6e	84 9f					.word	SyntaxError                      ; $03 !!3
>8a70	84 9f					.word	SyntaxError                      ; $04 ><
>8a72	e5 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a74	27 90					.word	ShiftRight                       ; $06 >>
>8a76	84 9f					.word	SyntaxError                      ; $07 !!7
>8a78	84 9f					.word	SyntaxError                      ; $08 !!8
>8a7a	84 9f					.word	SyntaxError                      ; $09 !!9
>8a7c	84 9f					.word	SyntaxError                      ; $0a !!10
>8a7e	84 9f					.word	SyntaxError                      ; $0b !!11
>8a80	84 9f					.word	SyntaxError                      ; $0c !!12
>8a82	84 9f					.word	SyntaxError                      ; $0d !!13
>8a84	84 9f					.word	SyntaxError                      ; $0e !!14
>8a86	84 9f					.word	SyntaxError                      ; $0f !!15
>8a88	84 9f					.word	SyntaxError                      ; $10 @
>8a8a	84 9f					.word	SyntaxError                      ; $11 !!17
>8a8c	84 9f					.word	SyntaxError                      ; $12 !!18
>8a8e	84 9f					.word	SyntaxError                      ; $13 [
>8a90	a8 8e					.word	IntegerDivide                    ; $14 \
>8a92	84 9f					.word	SyntaxError                      ; $15 ]
>8a94	b5 91					.word	EorInteger                       ; $16 ^
>8a96	84 9f					.word	SyntaxError                      ; $17 _
>8a98	84 9f					.word	SyntaxError                      ; $18 `
>8a9a	84 9f					.word	SyntaxError                      ; $19 !!25
>8a9c	84 9f					.word	SyntaxError                      ; $1a !!26
>8a9e	84 9f					.word	SyntaxError                      ; $1b {
>8aa0	6f 91					.word	OraInteger                       ; $1c |
>8aa2	84 9f					.word	SyntaxError                      ; $1d }
>8aa4	84 9f					.word	SyntaxError                      ; $1e ~
>8aa6	84 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aa8	84 9f					.word	SyntaxError                      ; $20
>8aaa	fb 91					.word	WordIndirect                     ; $21 !
>8aac	84 9f					.word	SyntaxError                      ; $22 "
>8aae	84 9f					.word	SyntaxError                      ; $23 #
>8ab0	84 9f					.word	SyntaxError                      ; $24 $
>8ab2	f5 8e					.word	IntegerModulus                   ; $25 %
>8ab4	29 91					.word	AndInteger                       ; $26 &
>8ab6	84 9f					.word	SyntaxError                      ; $27 '
>8ab8	84 9f					.word	SyntaxError                      ; $28 (
>8aba	84 9f					.word	SyntaxError                      ; $29 )
>8abc	6a 8f					.word	MulInteger                       ; $2a *
>8abe	bb 90					.word	AddInteger                       ; $2b +
>8ac0	84 9f					.word	SyntaxError                      ; $2c ,
>8ac2	fe 90					.word	SubInteger                       ; $2d -
>8ac4	84 9f					.word	SyntaxError                      ; $2e .
>8ac6	e6 93					.word	FDivideCommand                   ; $2f /
>8ac8	84 9f					.word	SyntaxError                      ; $30 0
>8aca	84 9f					.word	SyntaxError                      ; $31 1
>8acc	84 9f					.word	SyntaxError                      ; $32 2
>8ace	84 9f					.word	SyntaxError                      ; $33 3
>8ad0	84 9f					.word	SyntaxError                      ; $34 4
>8ad2	84 9f					.word	SyntaxError                      ; $35 5
>8ad4	84 9f					.word	SyntaxError                      ; $36 6
>8ad6	84 9f					.word	SyntaxError                      ; $37 7
>8ad8	84 9f					.word	SyntaxError                      ; $38 8
>8ada	84 9f					.word	SyntaxError                      ; $39 9
>8adc	84 9f					.word	SyntaxError                      ; $3a :
>8ade	84 9f					.word	SyntaxError                      ; $3b ;
>8ae0	bd 8d					.word	BinaryCompareLess                ; $3c <
>8ae2	b3 8d					.word	BinaryCompareEqual               ; $3d =
>8ae4	c7 8d					.word	BinaryCompareGreater             ; $3e >
>8ae6	22 92					.word	ByteIndirect                     ; $3f ?
.8ae8					VectorSet0:
>8ae8	47 8a					.word	EOLCommand                       ; $80 !0:EOF
>8aea	54 8a					.word	Shift1Command                    ; $81 !1:SH1
>8aec	5c 8a					.word	Shift2Command                    ; $82 !2:SH2
>8aee	56 99					.word	AbsUnary                         ; $83 ABS(
>8af0	66 99					.word	AllocUnary                       ; $84 ALLOC(
>8af2	d6 99					.word	AscUnary                         ; $85 ASC(
>8af4	a1 9b					.word	ChrUnary                         ; $86 CHR$(
>8af6	9f a3					.word	UnaryEvent                       ; $87 EVENT(
>8af8	af 8d					.word	UnaryFalse                       ; $88 FALSE
>8afa	e3 99					.word	FracUnary                        ; $89 FRAC(
>8afc	6a a6					.word	UnaryHit                         ; $8a HIT(
>8afe	f9 99					.word	IntUnary                         ; $8b INT(
>8b00	60 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b02	b7 a6					.word	UnaryJoyB                        ; $8d JOYB(
>8b04	90 a6					.word	UnaryJoyX                        ; $8e JOYX(
>8b06	93 a6					.word	UnaryJoyY                        ; $8f JOYY(
>8b08	7b 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b0a	0b 9a					.word	LenUnary                         ; $91 LEN(
>8b0c	29 9a					.word	Unary_Max                        ; $92 MAX(
>8b0e	a5 9c					.word	Unary_Mid                        ; $93 MID$(
>8b10	25 9a					.word	Unary_Min                        ; $94 MIN(
>8b12	80 9a					.word	Unary_Not                        ; $95 NOT(
>8b14	96 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b16	8b 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b18	b5 9a					.word	Unary_Rnd                        ; $98 RND(
>8b1a	36 9b					.word	SgnUnary                         ; $99 SGN(
>8b1c	b3 9b					.word	SpcUnary                         ; $9a SPC(
>8b1e	ce 9b					.word	Unary_Str                        ; $9b STR$(
>8b20	0f a7					.word	UnaryTimer                       ; $9c TIMER(
>8b22	a3 8d					.word	UnaryTrue                        ; $9d TRUE
>8b24	56 9b					.word	ValUnary                         ; $9e VAL(
>8b26	1d 85					.word	ForCommand                       ; $9f FOR
>8b28	6a 86					.word	IfCommand                        ; $a0 IF
>8b2a	64 8a					.word	Unused1                          ; $a1 PROC
>8b2c	83 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b2e	ef 8c					.word	Command_WHILE                    ; $a3 WHILE
>8b30	93 86					.word	EndIf                            ; $a4 ENDIF
>8b32	0f 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b34	d7 85					.word	NextCommand                      ; $a6 NEXT
>8b36	64 8a					.word	Unused4                          ; $a7 THEN
>8b38	8c 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b3a	10 8d					.word	Command_WEND                     ; $a9 WEND
>8b3c	84 9f					.word	SyntaxError                      ; $aa BY
>8b3e	bb 83					.word	CallCommand                      ; $ab CALL
>8b40	0c a4					.word	CircleCommand                    ; $ac CIRCLE
>8b42	f5 83					.word	ClearCommand                     ; $ad CLEAR
>8b44	4d 84					.word	ClearScreen                      ; $ae CLS
>8b46	84 9f					.word	SyntaxError                      ; $af COLOR
>8b48	84 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b4a	55 84					.word	Command_Data                     ; $b1 DATA
>8b4c	5d 84					.word	DimCommand                       ; $b2 DIM
>8b4e	64 8a					.word	Unused3                          ; $b3 DOWNTO
>8b50	8c 86					.word	ElseCode                         ; $b4 ELSE
>8b52	84 9f					.word	SyntaxError                      ; $b5 FROM
>8b54	38 a6					.word	GfxCommand                       ; $b6 GFX
>8b56	30 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b58	4e 86					.word	GotoCommand                      ; $b8 GOTO
>8b5a	84 9f					.word	SyntaxError                      ; $b9 HERE
>8b5c	36 a4					.word	ImageCommand                     ; $ba IMAGE
>8b5e	94 86					.word	LetCommand                       ; $bb LET
>8b60	8b a4					.word	LineCommand                      ; $bc LINE
>8b62	87 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b64	84 9f					.word	SyntaxError                      ; $be OFF
>8b66	84 9f					.word	SyntaxError                      ; $bf ON
>8b68	84 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b6a	cb a6					.word	PaletteCommand                   ; $c1 PALETTE
>8b6c	84 a4					.word	PlotCommand                      ; $c2 PLOT
>8b6e	58 88					.word	Command_Print                    ; $c3 PRINT
>8b70	1d 89					.word	Command_Read                     ; $c4 READ
>8b72	08 a4					.word	RectangleCommand                 ; $c5 RECT
>8b74	76 89					.word	RemCommand                       ; $c6 REM
>8b76	40 86					.word	Command_RETURN                   ; $c7 RETURN
>8b78	84 9f					.word	SyntaxError                      ; $c8 SOLID
>8b7a	17 a4					.word	SpriteCommand                    ; $c9 SPRITE
>8b7c	53 a4					.word	TextCommand                      ; $ca TEXT
>8b7e	64 8a					.word	Unused2                          ; $cb TO
.8b80					VectorSet1:
>8b80	84 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b82	84 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b84	84 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b86	8c 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b88	ab 83					.word	AssertCommand                    ; $84 ASSERT
>8b8a	d8 a5					.word	BitmapCtrl                       ; $85 BITMAP
>8b8c	1a 85					.word	EndCommand                       ; $86 END
>8b8e	e9 86					.word	Command_List                     ; $87 LIST
>8b90	4e 88					.word	NewCommand                       ; $88 NEW
>8b92	a5 89					.word	Command_Restore                  ; $89 RESTORE
>8b94	d7 89					.word	CommandRUN                       ; $8a RUN
>8b96	1d a6					.word	SpritesCtrl                      ; $8b SPRITES
>8b98	22 8c					.word	StopCommand                      ; $8c STOP
.8b9a					VectorSet2:
>8b9a	84 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9c	84 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b9e	84 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba0	43 9e					.word	Assemble_adc                     ; $83 ADC
>8ba2	3b 9e					.word	Assemble_and                     ; $84 AND
>8ba4	57 9e					.word	Assemble_asl                     ; $85 ASL
>8ba6	c1 9e					.word	Assemble_bcc                     ; $86 BCC
>8ba8	c5 9e					.word	Assemble_bcs                     ; $87 BCS
>8baa	cd 9e					.word	Assemble_beq                     ; $88 BEQ
>8bac	84 9e					.word	Assemble_bit                     ; $89 BIT
>8bae	b5 9e					.word	Assemble_bmi                     ; $8a BMI
>8bb0	c9 9e					.word	Assemble_bne                     ; $8b BNE
>8bb2	b1 9e					.word	Assemble_bpl                     ; $8c BPL
>8bb4	d1 9e					.word	Assemble_bra                     ; $8d BRA
>8bb6	d5 9e					.word	Assemble_brk                     ; $8e BRK
>8bb8	b9 9e					.word	Assemble_bvc                     ; $8f BVC
>8bba	bd 9e					.word	Assemble_bvs                     ; $90 BVS
>8bbc	dd 9e					.word	Assemble_clc                     ; $91 CLC
>8bbe	31 9f					.word	Assemble_cld                     ; $92 CLD
>8bc0	f1 9e					.word	Assemble_cli                     ; $93 CLI
>8bc2	21 9f					.word	Assemble_clv                     ; $94 CLV
>8bc4	4f 9e					.word	Assemble_cmp                     ; $95 CMP
>8bc6	98 9e					.word	Assemble_cpx                     ; $96 CPX
>8bc8	93 9e					.word	Assemble_cpy                     ; $97 CPY
>8bca	75 9e					.word	Assemble_dec                     ; $98 DEC
>8bcc	2d 9f					.word	Assemble_dex                     ; $99 DEX
>8bce	09 9f					.word	Assemble_dey                     ; $9a DEY
>8bd0	3f 9e					.word	Assemble_eor                     ; $9b EOR
>8bd2	7a 9e					.word	Assemble_inc                     ; $9c INC
>8bd4	3d 9f					.word	Assemble_inx                     ; $9d INX
>8bd6	29 9f					.word	Assemble_iny                     ; $9e INY
>8bd8	ac 9e					.word	Assemble_jmp                     ; $9f JMP
>8bda	a7 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bdc	4b 9e					.word	Assemble_lda                     ; $a1 LDA
>8bde	70 9e					.word	Assemble_ldx                     ; $a2 LDX
>8be0	8e 9e					.word	Assemble_ldy                     ; $a3 LDY
>8be2	61 9e					.word	Assemble_lsr                     ; $a4 LSR
>8be4	41 9f					.word	Assemble_nop                     ; $a5 NOP
>8be6	37 9e					.word	Assemble_ora                     ; $a6 ORA
>8be8	ed 9e					.word	Assemble_pha                     ; $a7 PHA
>8bea	d9 9e					.word	Assemble_php                     ; $a8 PHP
>8bec	35 9f					.word	Assemble_phx                     ; $a9 PHX
>8bee	f5 9e					.word	Assemble_phy                     ; $aa PHY
>8bf0	fd 9e					.word	Assemble_pla                     ; $ab PLA
>8bf2	e1 9e					.word	Assemble_plp                     ; $ac PLP
>8bf4	49 9f					.word	Assemble_plx                     ; $ad PLX
>8bf6	05 9f					.word	Assemble_ply                     ; $ae PLY
>8bf8	5c 9e					.word	Assemble_rol                     ; $af ROL
>8bfa	66 9e					.word	Assemble_ror                     ; $b0 ROR
>8bfc	e9 9e					.word	Assemble_rti                     ; $b1 RTI
>8bfe	f9 9e					.word	Assemble_rts                     ; $b2 RTS
>8c00	53 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c02	e5 9e					.word	Assemble_sec                     ; $b4 SEC
>8c04	45 9f					.word	Assemble_sed                     ; $b5 SED
>8c06	01 9f					.word	Assemble_sei                     ; $b6 SEI
>8c08	47 9e					.word	Assemble_sta                     ; $b7 STA
>8c0a	39 9f					.word	Assemble_stp                     ; $b8 STP
>8c0c	6b 9e					.word	Assemble_stx                     ; $b9 STX
>8c0e	89 9e					.word	Assemble_sty                     ; $ba STY
>8c10	7f 9e					.word	Assemble_stz                     ; $bb STZ
>8c12	1d 9f					.word	Assemble_tax                     ; $bc TAX
>8c14	19 9f					.word	Assemble_tay                     ; $bd TAY
>8c16	a2 9e					.word	Assemble_trb                     ; $be TRB
>8c18	9d 9e					.word	Assemble_tsb                     ; $bf TSB
>8c1a	25 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c1c	0d 9f					.word	Assemble_txa                     ; $c1 TXA
>8c1e	15 9f					.word	Assemble_txs                     ; $c2 TXS
>8c20	11 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c22					StopCommand:
.8c22	a9 08		lda #$08		lda	#8
.8c24	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c27					ProcedureScan:
.8c27	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c29	85 30		sta $30				sta 	codePtr
.8c2b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c2d	85 31		sta $31				sta 	codePtr+1
.8c2f					_PSLoop:
.8c2f	b2 30		lda ($30)			lda 	(codePtr)
.8c31	f0 42		beq $8c75			beq 	_PSExit
.8c33	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c35	b1 30		lda ($30),y			lda 	(codePtr),y
.8c37	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c39	d0 2d		bne $8c68			bne 	_PSNext
.8c3b	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c3c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3e	29 c0		and #$c0			and 	#$C0
.8c40	c9 40		cmp #$40			cmp 	#$40
.8c42	d0 32		bne $8c76			bne 	_PSSyntax
.8c44	b1 30		lda ($30),y			lda 	(codePtr),y
.8c46	18		clc				clc
.8c47	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c49	85 37		sta $37				sta 	zTemp0+1
.8c4b	c8		iny				iny 								; LSB
.8c4c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4e	85 36		sta $36				sta 	zTemp0
.8c50	c8		iny				iny 								; character after variable call.
.8c51	98		tya				tya 								; save Y offset at +7
.8c52	a0 07		ldy #$07			ldy 	#7
.8c54	91 36		sta ($36),y			sta 	(zTemp0),y
.8c56	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c58	a0 02		ldy #$02			ldy 	#2
.8c5a	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c5e					_PSCopy:
.8c5e	b5 30		lda $30,x			lda 	safePtr,x
.8c60	c8		iny				iny
.8c61	91 36		sta ($36),y			sta 	(zTemp0),y
.8c63	e8		inx				inx
.8c64	e0 04		cpx #$04			cpx 	#4
.8c66	d0 f6		bne $8c5e			bne 	_PSCopy
.8c68					_PSNext:
.8c68	18		clc				clc
.8c69	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c6b	65 30		adc $30				adc 	codePtr
.8c6d	85 30		sta $30				sta 	codePtr
.8c6f	90 02		bcc $8c73			bcc 	_CREExit
.8c71	e6 31		inc $31				inc 	codePtr+1
.8c73					_CREExit:
.8c73	80 ba		bra $8c2f			bra 	_PSLoop
.8c75					_PSExit:
.8c75	60		rts				rts
.8c76					_PSSyntax:
.8c76	4c 84 9f	jmp $9f84			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c79					ScanForward:
.8c79	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c7b	86 37		stx $37				stx 	zTemp0+1
.8c7d	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c7f					_ScanLoop:
.8c7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c81	c8		iny				iny
.8c82	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c84	d0 0e		bne $8c94			bne 	_ScanGoNext
.8c86	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c88	f0 04		beq $8c8e			beq 	_ScanMatch
.8c8a	c5 37		cmp $37				cmp 	zTemp0+1
.8c8c	d0 06		bne $8c94			bne 	_ScanGoNext
.8c8e					_ScanMatch:
.8c8e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c90	d0 01		bne $8c93			bne 	_ScanNotEndEOL
.8c92	88		dey				dey
.8c93					_ScanNotEndEOL:
.8c93	60		rts				rts
.8c94					_ScanGoNext:
.8c94	20 99 8c	jsr $8c99			jsr  	ScanForwardOne
.8c97	80 e6		bra $8c7f			bra 	_ScanLoop
.8c99					ScanForwardOne:
.8c99	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c9b	90 3e		bcc $8cdb			bcc 	_SFWExit
.8c9d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c9f	90 18		bcc $8cb9			bcc 	_ScanSkipOne
.8ca1	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ca3	b0 2f		bcs $8cd4			bcs 	_ScanSkipData
.8ca5	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8ca7	90 32		bcc $8cdb			bcc 	_SFWExit 					; if not, ordinary keywords.
.8ca9	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8cab	b0 2e		bcs $8cdb			bcs 	_SFWExit
.8cad	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8caf	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cb1	b0 28		bcs $8cdb			bcs 	_SFWExit
.8cb3	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cb5	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cb7	80 22		bra $8cdb			bra 	_SFWExit
.8cb9					_ScanSkipOne:
.8cb9	c8		iny				iny 								; consume the extra one.
.8cba	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cbc	d0 1d		bne $8cdb			bne 	_SFWExit
.8cbe	18		clc				clc
.8cbf	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cc1	65 30		adc $30				adc 	codePtr
.8cc3	85 30		sta $30				sta 	codePtr
.8cc5	90 02		bcc $8cc9			bcc 	_CREExit
.8cc7	e6 31		inc $31				inc 	codePtr+1
.8cc9					_CREExit:
.8cc9	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ccb	b2 30		lda ($30)			lda 	(codePtr)
.8ccd	d0 0c		bne $8cdb			bne 	_SFWExit 					; if not zero, more to scan
.8ccf	a9 13		lda #$13		lda	#19
.8cd1	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8cd4					_ScanSkipData:
.8cd4	88		dey				dey 								; point at data token
.8cd5	c8		iny				iny
.8cd6	98		tya				tya
.8cd7	38		sec				sec
.8cd8	71 30		adc ($30),y			adc 	(codePtr),y
.8cda	a8		tay				tay
.8cdb					_SFWExit:
.8cdb	60		rts				rts
.8cdc					ScanGetCurrentLineStep:
.8cdc	64 38		stz $38				stz 	zTemp1
.8cde	a0 03		ldy #$03			ldy 	#3
.8ce0					_SGCLSLoop:
.8ce0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce2	c8		iny				iny
.8ce3	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ce5	f0 05		beq $8cec			beq 	_SGCLSExit
.8ce7	20 99 8c	jsr $8c99			jsr 	ScanForwardOne
.8cea	80 f4		bra $8ce0			bra 	_SGCLSLoop
.8cec					_SGCLSExit:
.8cec	a5 38		lda $38				lda 	zTemp1
.8cee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cef					Command_WHILE:
.8cef	5a		phy				phy 								; save position of the test
.8cf0	a2 00		ldx #$00			ldx 	#0
.8cf2	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; work out the number
.8cf5	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; check if zero
.8cf8	f0 0e		beq $8d08			beq 	_WHExitLoop 				; if so exit the loop
.8cfa	98		tya				tya 								; position *after* test.
.8cfb	7a		ply				ply 								; restore position before test, at WHILE
.8cfc	88		dey				dey
.8cfd	48		pha				pha 								; push after test on the stack
.8cfe	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d00	20 5f a2	jsr $a25f			jsr 	StackOpen
.8d03	20 a3 a2	jsr $a2a3			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d06	7a		ply				ply 								; restore the position *after* the test
.8d07	60		rts				rts
.8d08					_WHExitLoop:
.8d08	68		pla				pla 								; throw post loop position
.8d09	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d0b	aa		tax				tax
.8d0c	20 79 8c	jsr $8c79			jsr 	ScanForward
.8d0f	60		rts				rts
.8d10					Command_WEND:
.8d10	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d12	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d14	20 8b a2	jsr $a28b			jsr 	StackCheckFrame
.8d17	20 b4 a2	jsr $a2b4			jsr 	STKLoadCodePosition 		; loop back
.8d1a	20 7d a2	jsr $a27d			jsr 	StackClose		 			; erase the frame
.8d1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d1e					CheckRightBracket:
.8d1e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d20	c8		iny				iny
.8d21	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d23	d0 0f		bne $8d34			bne 	CNAFail
.8d25	60		rts				rts
.8d26					CheckComma:
.8d26	b1 30		lda ($30),y			lda 	(codePtr),y
.8d28	c8		iny				iny
.8d29	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d2b	d0 07		bne $8d34			bne 	CNAFail
.8d2d	60		rts				rts
.8d2e					CheckNextA:
.8d2e	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d30	d0 02		bne $8d34			bne 	CNAFail
.8d32	c8		iny				iny 								; skip character
.8d33	60		rts				rts 								; and exit
.8d34					CNAFail:
.8d34	4c 84 9f	jmp $9f84			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d37					ErrorHandler:
.8d37	a8		tay				tay 								; find the error text
.8d38	f0 49		beq $8d83			beq 	_EHEnd
.8d3a	a2 00		ldx #$00			ldx 	#0
.8d3c	a9 9d		lda #$9d			lda 	#((ErrorText) & $FF)
.8d3e	85 36		sta $36				sta 	0+zTemp0
.8d40	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d42	85 37		sta $37				sta 	1+zTemp0
.8d44					_EHFind:
.8d44	88		dey				dey 								; found the error text ?
.8d45	f0 0e		beq $8d55			beq 	_EHFound
.8d47					_EHFindZero:
.8d47	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d49	e6 36		inc $36				inc 	zTemp0
.8d4b	d0 02		bne $8d4f			bne 	_EHFNoCarry
.8d4d	e6 37		inc $37				inc 	zTemp0+1
.8d4f					_EHFNoCarry:
.8d4f	c9 00		cmp #$00			cmp 	#0
.8d51	d0 f4		bne $8d47			bne 	_EHFindZero
.8d53	80 ef		bra $8d44			bra 	_EHFind
.8d55					_EHFound:
.8d55	a5 36		lda $36				lda 	zTemp0 						; print message
.8d57	a6 37		ldx $37				ldx 	zTemp0+1
.8d59	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8d5c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d60	d0 05		bne $8d67			bne 	_EHAtMsg
.8d62	c8		iny				iny
.8d63	b1 30		lda ($30),y			lda 	(codePtr),y
.8d65	f0 17		beq $8d7e			beq 	_EHCREnd
.8d67					_EHAtMsg:
.8d67	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d69	a9 86		lda #$86			lda 	#_AtMsg & $FF
.8d6b	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8d6e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d70	b1 30		lda ($30),y			lda 	(codePtr),y
.8d72	48		pha				pha
.8d73	c8		iny				iny
.8d74	b1 30		lda ($30),y			lda 	(codePtr),y
.8d76	aa		tax				tax
.8d77	68		pla				pla
.8d78	20 49 92	jsr $9249			jsr 	ConvertInt16 				; convert XA to string
.8d7b	20 90 8d	jsr $8d90			jsr 	PrintStringXA 				; and print it.
.8d7e					_EHCREnd:
.8d7e	a9 0d		lda #$0d			lda 	#13 						; new line
.8d80	20 2b a7	jsr $a72b			jsr 	EXTPrintCharacter
.8d83					_EHEnd:
.8d83	4c 5c 83	jmp $835c			jmp 	WarmStart
>8d86	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d8e	20 00
.8d90					PrintStringXA:
.8d90	5a		phy				phy
.8d91	86 37		stx $37				stx 	zTemp0+1
.8d93	85 36		sta $36				sta 	zTemp0
.8d95	a0 00		ldy #$00			ldy 	#0
.8d97					_PSXALoop:
.8d97	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d99	f0 06		beq $8da1			beq 	_PSXAExit
.8d9b	20 2b a7	jsr $a72b			jsr 	EXTPrintCharacter
.8d9e	c8		iny				iny
.8d9f	80 f6		bra $8d97			bra 	_PSXALoop
.8da1					_PSXAExit:
.8da1	7a		ply				ply
.8da2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8da3					UnaryTrue:
.8da3	fa		plx				plx
.8da4					ReturnTrue:
.8da4	a9 01		lda #$01			lda 	#1  						; set to 1
.8da6	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.8da9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dae	60		rts				rts
.8daf					UnaryFalse:
.8daf	fa		plx				plx
.8db0					ReturnFalse:
.8db0	4c fa 9d	jmp $9dfa			jmp 	NSMSetZero 					; set it all to zero
.8db3					BinaryCompareEqual:
.8db3	fa		plx				plx
.8db4	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8db7	c9 00		cmp #$00			cmp 	#0
.8db9	f0 e9		beq $8da4			beq 	ReturnTrue
.8dbb	80 f3		bra $8db0			bra 	ReturnFalse
.8dbd					BinaryCompareLess:
.8dbd	fa		plx				plx
.8dbe	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8dc1	c9 ff		cmp #$ff			cmp 	#$FF
.8dc3	f0 df		beq $8da4			beq 	ReturnTrue
.8dc5	80 e9		bra $8db0			bra 	ReturnFalse
.8dc7					BinaryCompareGreater:
.8dc7	fa		plx				plx
.8dc8	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8dcb	c9 01		cmp #$01			cmp 	#1
.8dcd	f0 d5		beq $8da4			beq 	ReturnTrue
.8dcf	80 df		bra $8db0			bra 	ReturnFalse
.8dd1					BinaryCompareNotEqual:
.8dd1	fa		plx				plx
.8dd2	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8dd5	c9 00		cmp #$00			cmp 	#0
.8dd7	d0 cb		bne $8da4			bne 	ReturnTrue
.8dd9	80 d5		bra $8db0			bra 	ReturnFalse
.8ddb					BinaryCompareLessEqual:
.8ddb	fa		plx				plx
.8ddc	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8ddf	c9 01		cmp #$01			cmp 	#1
.8de1	d0 c1		bne $8da4			bne 	ReturnTrue
.8de3	80 cb		bra $8db0			bra 	ReturnFalse
.8de5					BinaryCompareGreaterEqual:
.8de5	fa		plx				plx
.8de6	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8de9	c9 ff		cmp #$ff			cmp 	#$FF
.8deb	d0 b7		bne $8da4			bne 	ReturnTrue
.8ded	80 c1		bra $8db0			bra 	ReturnFalse
.8def					CompareBaseCode:
.8def	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; make both values if references.
.8df2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8df5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8df8	29 10		and #$10			and 	#NSTString
.8dfa	d0 40		bne $8e3c			bne 	_CBCString
.8dfc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8dff	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e02	d0 3b		bne $8e3f			bne 	_CBCFloat
.8e04	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e07	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e0a	29 08		and #$08			and 	#NSTFloat
.8e0c	d0 31		bne $8e3f			bne 	_CBCFloat
.8e0e	20 42 8e	jsr $8e42			jsr 	CompareFixMinusZero
.8e11	e8		inx				inx
.8e12	20 42 8e	jsr $8e42			jsr 	CompareFixMinusZero
.8e15	ca		dex				dex
.8e16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e19	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e1c	10 0b		bpl $8e29			bpl 	_CDCSameSign
.8e1e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e21	30 16		bmi $8e39			bmi 	_CBCLess 					; return $FF
.8e23					_CBCGreater:
.8e23	a9 01		lda #$01			lda 	#1
.8e25	60		rts				rts
.8e26					_CBCEqual:
.8e26	a9 00		lda #$00			lda 	#0
.8e28	60		rts				rts
.8e29					_CDCSameSign:
.8e29	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; unsigned subtract
.8e2c	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; or the mantissa together
.8e2f	f0 f5		beq $8e26			beq 	_CBCEqual 					; -0 == 0
.8e31	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e34	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e37	10 ea		bpl $8e23			bpl 	_CBCGreater
.8e39					_CBCLess:
.8e39	a9 ff		lda #$ff			lda 	#$FF
.8e3b	60		rts				rts
.8e3c					_CBCString:
.8e3c	4c eb 8f	jmp $8feb			jmp 	CompareStrings
.8e3f					_CBCFloat:
.8e3f	4c cc 93	jmp $93cc			jmp 	CompareFloat
.8e42					CompareFixMinusZero:
.8e42	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero
.8e45	d0 03		bne $8e4a			bne 	_CFXMZNotZero
.8e47	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e4a					_CFXMZNotZero:
.8e4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e4b					StringConcat:
.8e4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e4e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e51	29 18		and #$18			and 	#NSBTypeMask
.8e53	c9 10		cmp #$10			cmp 	#NSTString
.8e55	d0 4e		bne $8ea5			bne		_SCType
.8e57	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e59	e8		inx				inx
.8e5a	20 78 8e	jsr $8e78			jsr 	_SCSetupZ0 					; setup for second
.8e5d	20 83 8e	jsr $8e83			jsr 	_SCLengthZ0 				; length for second
.8e60	ca		dex				dex
.8e61	20 78 8e	jsr $8e78			jsr 	_SCSetupZ0 					; setup for first
.8e64	20 83 8e	jsr $8e83			jsr 	_SCLengthZ0 				; length for first
.8e67	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e69	20 52 a3	jsr $a352			jsr 	StringTempAllocate
.8e6c	20 96 8e	jsr $8e96			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e6f	e8		inx				inx
.8e70	20 78 8e	jsr $8e78			jsr 	_SCSetupZ0 					; copy second out
.8e73	20 96 8e	jsr $8e96			jsr 	_SCCopy
.8e76	ca		dex				dex
.8e77	60		rts				rts
.8e78					_SCSetupZ0:
.8e78	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e7b	85 36		sta $36				sta 	zTemp0
.8e7d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e80	85 37		sta $37				sta 	zTemp0+1
.8e82	60		rts				rts
.8e83					_SCLengthZ0:
.8e83	5a		phy				phy
.8e84	a0 00		ldy #$00			ldy 	#0
.8e86					_SCLenLoop:
.8e86	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e88	f0 0a		beq $8e94			beq 	_SCLExit
.8e8a	c8		iny				iny
.8e8b	e6 38		inc $38				inc 	zTemp1
.8e8d	10 f7		bpl $8e86			bpl		_SCLenLoop
.8e8f	a9 09		lda #$09		lda	#9
.8e91	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8e94					_SCLExit:
.8e94	7a		ply				ply
.8e95	60		rts				rts
.8e96					_SCCopy:
.8e96	5a		phy				phy
.8e97	a0 00		ldy #$00			ldy 	#0
.8e99					_SCCopyLoop:
.8e99	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9b	f0 06		beq $8ea3			beq 	_SCCExit
.8e9d	20 90 a3	jsr $a390			jsr 	StringTempWrite
.8ea0	c8		iny				iny
.8ea1	80 f6		bra $8e99			bra 	_SCCopyLoop
.8ea3					_SCCExit:
.8ea3	7a		ply				ply
.8ea4	60		rts				rts
.8ea5					_SCType:
.8ea5	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8ea8					IntegerDivide:
.8ea8	fa		plx				plx
.8ea9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eac	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8eaf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb0	0a		asl a				asl 	a
.8eb1	10 05		bpl $8eb8			bpl 	_NotRef
.8eb3	48		pha				pha
.8eb4	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb7	68		pla				pla
.8eb8					_NotRef:
.8eb8	0a		asl a				asl 	a
.8eb9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ebe	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ec1	f0 03		beq $8ec6			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec3	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.8ec6					_IntegerCode:
.8ec6	20 e8 8e	jsr $8ee8			jsr 	CheckDivideZero 			; do div zero check
.8ec9	20 20 8f	jsr $8f20			jsr 	Int32Divide 				; do the division
.8ecc	20 dd 8f	jsr $8fdd			jsr 	CalculateSign 				; calculate result sign
.8ecf					NSMCopyPlusTwoToZero:
.8ecf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ed2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ed5	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ed8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8edb	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ede	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ee1	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8ee4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8ee7	60		rts				rts
.8ee8					CheckDivideZero:
.8ee8	e8		inx				inx
.8ee9	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero
.8eec	f0 02		beq $8ef0			beq 	_CDVError
.8eee	ca		dex				dex
.8eef	60		rts				rts
.8ef0					_CDVError:
.8ef0	a9 03		lda #$03		lda	#3
.8ef2	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8ef5					IntegerModulus:
.8ef5	fa		plx				plx
.8ef6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ef9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8efc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8efd	0a		asl a				asl 	a
.8efe	10 05		bpl $8f05			bpl 	_NotRef
.8f00	48		pha				pha
.8f01	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f04	68		pla				pla
.8f05					_NotRef:
.8f05	0a		asl a				asl 	a
.8f06	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f08	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f0b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f0e	f0 03		beq $8f13			beq 	_IntegerCode 				; if clear, then we have two integers
.8f10	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.8f13					_IntegerCode:
.8f13					IntegerModulusNoCheck:
.8f13	20 e8 8e	jsr $8ee8			jsr 	CheckDivideZero 			; do div zero check
.8f16	20 20 8f	jsr $8f20			jsr 	Int32Divide 				; do the division
.8f19	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f1c	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f1f	60		rts				rts
.8f20					Int32Divide:
.8f20	48		pha				pha 								; save AXY
.8f21	5a		phy				phy
.8f22	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f25	20 f6 9d	jsr $9df6			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f28	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f2a					_I32DivideLoop:
.8f2a	e8		inx				inx
.8f2b	e8		inx				inx
.8f2c	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f2f	ca		dex				dex
.8f30	ca		dex				dex
.8f31	20 10 9e	jsr $9e10			jsr 	NSMRotateLeft
.8f34	20 60 8f	jsr $8f60			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f37	90 03		bcc $8f3c			bcc 	_I32DivideNoCarryIn
.8f39	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f3c					_I32DivideNoCarryIn:
.8f3c	88		dey				dey 								; loop round till division completed.
.8f3d	d0 eb		bne $8f2a			bne 	_I32DivideLoop
.8f3f	7a		ply				ply 								; restore AXY and exit
.8f40	68		pla				pla
.8f41	60		rts				rts
.8f42					Int32ShiftDivide:
.8f42	48		pha				pha 								; save AY
.8f43	5a		phy				phy
.8f44	e8		inx				inx 								; clear S[X+2]
.8f45	e8		inx				inx
.8f46	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.8f49	ca		dex				dex
.8f4a	ca		dex				dex
.8f4b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f4d					_I32SDLoop:
.8f4d	20 60 8f	jsr $8f60			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f50	e8		inx				inx
.8f51	e8		inx				inx
.8f52	20 10 9e	jsr $9e10			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f55	ca		dex				dex
.8f56	ca		dex				dex
.8f57	20 10 9e	jsr $9e10			jsr 	NSMRotateLeft
.8f5a	88		dey				dey 	 							; do 31 times
.8f5b	d0 f0		bne $8f4d			bne 	_I32SDLoop
.8f5d	7a		ply				ply 								; restore AY and exit
.8f5e	68		pla				pla
.8f5f	60		rts				rts
.8f60					DivideCheckSubtract:
.8f60	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f63	b0 04		bcs $8f69			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f65	20 6f 90	jsr $906f			jsr 	AddTopTwoStack 				; add it back in
.8f68	18		clc				clc 								; and return False
.8f69					_DCSExit:
.8f69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f6a					MulInteger:
.8f6a	fa		plx				plx
.8f6b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f6e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f71	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f72	0a		asl a				asl 	a
.8f73	10 05		bpl $8f7a			bpl 	_NotRef
.8f75	48		pha				pha
.8f76	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f79	68		pla				pla
.8f7a					_NotRef:
.8f7a	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f7b	30 0b		bmi $8f88			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f7d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f80	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f83	f0 06		beq $8f8b			beq 	_IntegerCode 				; if clear, then we have two integers
.8f85	4c a3 94	jmp $94a3			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f88					_StringData:
.8f88	4c 98 9f	jmp $9f98			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f8b					_IntegerCode:
.8f8b	20 98 8f	jsr $8f98			jsr 	MultiplyShort
.8f8e	c9 00		cmp #$00			cmp 	#0
.8f90	f0 05		beq $8f97			beq 	_MIExit
.8f92	a9 04		lda #$04		lda	#4
.8f94	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8f97					_MIExit:
.8f97	60		rts				rts
.8f98					MultiplyShort:
.8f98	5a		phy				phy 								; save Y
.8f99	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f9c	20 f6 9d	jsr $9df6			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8f9f	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fa1					_I32MLoop:
.8fa1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fa4	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fa7	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8faa	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fad	f0 28		beq $8fd7			beq 	_I32MExit 					; exit if zero
.8faf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fb2	29 01		and #$01			and 	#1
.8fb4	f0 0e		beq $8fc4			beq 	_I32MNoAdd
.8fb6	20 6f 90	jsr $906f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fb9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fbc	10 06		bpl $8fc4			bpl 	_I32MNoAdd
.8fbe					_I32ShiftRight:
.8fbe	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift S[X] right
.8fc1	c8		iny				iny 								; increment shift count
.8fc2	80 0a		bra $8fce			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fc4					_I32MNoAdd:
.8fc4	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fc7	70 f5		bvs $8fbe			bvs 	_I32ShiftRight 				; instead.
.8fc9	e8		inx				inx
.8fca	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fcd	ca		dex				dex
.8fce					_I32MShiftUpper:
.8fce	e8		inx				inx 								; shift S[X+2] right
.8fcf	e8		inx				inx
.8fd0	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight
.8fd3	ca		dex				dex
.8fd4	ca		dex				dex
.8fd5	80 ca		bra $8fa1			bra 	_I32MLoop 					; try again.
.8fd7					_I32MExit:
.8fd7	20 dd 8f	jsr $8fdd			jsr 	CalculateSign
.8fda	98		tya				tya 								; shift in A
.8fdb	7a		ply				ply 								; restore Y and exit
.8fdc	60		rts				rts
.8fdd					CalculateSign:
.8fdd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fe0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fe3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fe6	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fe7	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8fea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8feb					CompareStrings:
.8feb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8fee	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ff1	29 10		and #$10			and 	#NSBIsString
.8ff3	f0 2c		beq $9021			beq 	_CSTypeError
.8ff5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ff8	85 36		sta $36				sta 	zTemp0
.8ffa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ffd	85 37		sta $37				sta 	zTemp0+1
.8fff	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9002	85 38		sta $38				sta 	zTemp1
.9004	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9007	85 39		sta $39				sta 	zTemp1+1
.9009	5a		phy				phy 								; save Y so we can access strings
.900a	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.900c					_CSLoop:
.900c	c8		iny				iny
.900d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.900f	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9011	d0 06		bne $9019			bne 	_CSDifferent
.9013	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9015	d0 f5		bne $900c			bne 	_CSLoop 					; still comparing
.9017					_CSExit:
.9017	7a		ply				ply 								; reached end, return zero in A from EOS
.9018	60		rts				rts
.9019					_CSDifferent:
.9019	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.901b	90 fa		bcc $9017			bcc		_CSExit
.901d	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.901f	80 f6		bra $9017			bra 	_CSExit
.9021					_CSTypeError:
.9021	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9024					ShiftLeft:
.9024	38		sec				sec
.9025	80 01		bra $9028			bra 	ShiftMain
.9027					ShiftRight:
.9027	18		clc				clc
.9028					ShiftMain:
.9028	fa		plx				plx 								; restore X
.9029	08		php				php 								; save direction
.902a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.902d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9030	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9031	0a		asl a				asl 	a
.9032	10 05		bpl $9039			bpl 	_NotRef
.9034	48		pha				pha
.9035	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9038	68		pla				pla
.9039					_NotRef:
.9039	0a		asl a				asl 	a
.903a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.903c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.903f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9042	f0 03		beq $9047			beq 	_IntegerCode 				; if clear, then we have two integers
.9044	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9047					_IntegerCode:
.9047	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.904a	29 e0		and #$e0			and 	#$E0
.904c	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.904f	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9052	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9055	d0 13		bne $906a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9057					_SMLoop:
.9057	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.905a	30 11		bmi $906d			bmi 	_SMExit 					; exit if done.
.905c	28		plp				plp 								; restore direcition setting
.905d	08		php				php
.905e	90 05		bcc $9065			bcc 	_SMRight
.9060	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; shift left if CS
.9063	80 f2		bra $9057			bra 	_SMLoop
.9065					_SMRight:
.9065	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift right if CC
.9068	80 ed		bra $9057			bra 	_SMLoop
.906a					_SMExit0:
.906a	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; return zero.
.906d					_SMExit:
.906d	28		plp				plp 								; throw direction
.906e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.906f					AddTopTwoStack:
.906f	18		clc				clc
.9070	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9073	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9076	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9079	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.907c	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.907f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9082	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9085	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9088	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.908b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.908e	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9091	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9094	60		rts				rts
.9095					SubTopTwoStack:
.9095	38		sec				sec
.9096	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9099	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.909c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.909f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90a2	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90a5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90a8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90ab	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90ae	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90b1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90b4	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90b7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90ba	60		rts				rts
.90bb					AddInteger:
.90bb	fa		plx				plx
.90bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90bf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90c2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c3	0a		asl a				asl 	a
.90c4	10 05		bpl $90cb			bpl 	_NotRef
.90c6	48		pha				pha
.90c7	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90ca	68		pla				pla
.90cb					_NotRef:
.90cb	0a		asl a				asl 	a 							; put MSB of type into A:7
.90cc	30 0b		bmi $90d9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90ce	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90d4	f0 06		beq $90dc			beq 	_IntegerCode 				; if clear, then we have two integers
.90d6	4c 23 93	jmp $9323			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90d9					_StringData:
.90d9	4c 4b 8e	jmp $8e4b			jmp 	StringConcat							; at least one string - don't know both are strings.
.90dc					_IntegerCode:
.90dc					AddCode:
.90dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90df	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e2	10 8b		bpl $906f			bpl 	AddTopTwoStack
.90e4	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; do a physical subtraction
.90e7	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90ea	10 09		bpl $90f5			bpl 	_AddExit
.90ec	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90ef	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90f2	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90f5					_AddExit:
.90f5	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; check for -0
.90f8	d0 03		bne $90fd			bne 	_AddNonZero
.90fa	9e 00 04	stz $0400,x			stz 	NSStatus,x
.90fd					_AddNonZero:
.90fd	60		rts				rts
.90fe					SubInteger:
.90fe	fa		plx				plx
.90ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9102	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9105	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9106	0a		asl a				asl 	a
.9107	10 05		bpl $910e			bpl 	_NotRef
.9109	48		pha				pha
.910a	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.910d	68		pla				pla
.910e					_NotRef:
.910e	0a		asl a				asl 	a 							; put MSB of type into A:7
.910f	30 0b		bmi $911c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9111	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9114	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9117	f0 06		beq $911f			beq 	_IntegerCode 				; if clear, then we have two integers
.9119	4c 28 93	jmp $9328			jmp 	FloatingPointSub 							; otherwise at least one float.
.911c					_StringData:
.911c	4c 98 9f	jmp $9f98			jmp 	NotDoneError							; at least one string - don't know both are strings.
.911f					_IntegerCode:
.911f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9122	49 80		eor #$80			eor 	#$80
.9124	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9127	80 b3		bra $90dc			bra 	AddCode 					; and do the same code as add.
.9129					AndInteger:
.9129	fa		plx				plx
.912a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.912d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9130	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9131	0a		asl a				asl 	a
.9132	10 05		bpl $9139			bpl 	_NotRef
.9134	48		pha				pha
.9135	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9138	68		pla				pla
.9139					_NotRef:
.9139	0a		asl a				asl 	a
.913a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.913c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.913f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9142	f0 03		beq $9147			beq 	_IntegerCode 				; if clear, then we have two integers
.9144	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9147					_IntegerCode:
.9147	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.914a	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.914d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9150	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9153	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9156	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9159	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.915c	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.915f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9162	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9165	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9168	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.916b	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.916e	60		rts				rts
.916f					OraInteger:
.916f	fa		plx				plx
.9170	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9173	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9176	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9177	0a		asl a				asl 	a
.9178	10 05		bpl $917f			bpl 	_NotRef
.917a	48		pha				pha
.917b	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.917e	68		pla				pla
.917f					_NotRef:
.917f	0a		asl a				asl 	a
.9180	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9182	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9185	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9188	f0 03		beq $918d			beq 	_IntegerCode 				; if clear, then we have two integers
.918a	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.918d					_IntegerCode:
.918d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9190	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9193	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9196	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9199	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.919c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.919f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a2	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91a5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91a8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91ab	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91ae	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91b1	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91b4	60		rts				rts
.91b5					EorInteger:
.91b5	fa		plx				plx
.91b6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91b9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91bc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91bd	0a		asl a				asl 	a
.91be	10 05		bpl $91c5			bpl 	_NotRef
.91c0	48		pha				pha
.91c1	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c4	68		pla				pla
.91c5					_NotRef:
.91c5	0a		asl a				asl 	a
.91c6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91c8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91cb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91ce	f0 03		beq $91d3			beq 	_IntegerCode 				; if clear, then we have two integers
.91d0	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.91d3					_IntegerCode:
.91d3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91d6	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91d9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91dc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91df	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91e2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91e5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91e8	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91eb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91ee	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91f1	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91f4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91f7	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91fa	60		rts				rts
.91fb					WordIndirect:
.91fb	fa		plx				plx
.91fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91ff	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9202	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9203	0a		asl a				asl 	a
.9204	10 05		bpl $920b			bpl 	_NotRef
.9206	48		pha				pha
.9207	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.920a	68		pla				pla
.920b					_NotRef:
.920b	0a		asl a				asl 	a
.920c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.920e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9211	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9214	f0 03		beq $9219			beq 	_IntegerCode 				; if clear, then we have two integers
.9216	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9219					_IntegerCode:
.9219	20 dc 90	jsr $90dc			jsr 	AddCode 					; add the two values
.921c	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.921e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9221	60		rts				rts
.9222					ByteIndirect:
.9222	fa		plx				plx
.9223	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9226	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9229	0a		asl a				asl 	a 							; shift reference bit into sign bit
.922a	0a		asl a				asl 	a
.922b	10 05		bpl $9232			bpl 	_NotRef
.922d	48		pha				pha
.922e	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9231	68		pla				pla
.9232					_NotRef:
.9232	0a		asl a				asl 	a
.9233	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9235	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9238	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.923b	f0 03		beq $9240			beq 	_IntegerCode 				; if clear, then we have two integers
.923d	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9240					_IntegerCode:
.9240	20 dc 90	jsr $90dc			jsr 	AddCode 					; add the two values
.9243	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9245	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9248	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9249					ConvertInt16:
.9249	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.924c	8e 10 04	stx $0410			stx 	NSMantissa1
.924f	9c 18 04	stz $0418			stz 	NSMantissa2
.9252	9c 20 04	stz $0420			stz 	NSMantissa3
.9255	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9258	a2 00		ldx #$00			ldx 	#0 							; stack level
.925a	a9 0a		lda #$0a			lda 	#10 						; base
.925c	80 00		bra $925e			bra 	ConvertInt32
.925e					ConvertInt32:
.925e	5a		phy				phy
.925f	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9261	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9264	10 08		bpl $926e			bpl 	_CI32NotNeg
.9266	48		pha				pha
.9267	a9 2d		lda #$2d			lda 	#'-'
.9269	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.926c	c8		iny				iny
.926d	68		pla				pla
.926e					_CI32NotNeg:
.926e	20 7c 92	jsr $927c			jsr 	_CI32DivideConvert 			; recursive conversion
.9271	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9273	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.9276	7a		ply				ply
.9277	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9279	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.927b	60		rts				rts
.927c					_CI32DivideConvert:
.927c	e8		inx				inx 								; write to next slot up
.927d	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9280	ca		dex				dex
.9281	20 20 8f	jsr $8f20			jsr 	Int32Divide 				; divide
.9284	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.9287	48		pha				pha
.9288	20 cf 8e	jsr $8ecf			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.928b	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero ?
.928e	f0 06		beq $9296			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9290	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9293	20 7c 92	jsr $927c			jsr 	_CI32DivideConvert 			; and recusrively call.
.9296					_CI32NoRecurse:
.9296	68		pla				pla 								; remainder
.9297	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9299	90 02		bcc $929d			bcc 	_CI32NotHex
.929b	69 26		adc #$26			adc 	#6+32
.929d					_CI32NotHex:
.929d	69 30		adc #$30			adc 	#48
.929f	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.92a2	c8		iny				iny
.92a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92a4					PrecedenceLevel:
>92a4	04					.byte	 4	; $00 <<
>92a5	02					.byte	 2	; $01 <=
>92a6	02					.byte	 2	; $02 <>
>92a7	00					.byte	 0	; $03 !!3
>92a8	00					.byte	 0	; $04 ><
>92a9	02					.byte	 2	; $05 >=
>92aa	04					.byte	 4	; $06 >>
>92ab	00					.byte	 0	; $07 !!7
>92ac	00					.byte	 0	; $08 !!8
>92ad	00					.byte	 0	; $09 !!9
>92ae	00					.byte	 0	; $0a !!10
>92af	00					.byte	 0	; $0b !!11
>92b0	00					.byte	 0	; $0c !!12
>92b1	00					.byte	 0	; $0d !!13
>92b2	00					.byte	 0	; $0e !!14
>92b3	00					.byte	 0	; $0f !!15
>92b4	00					.byte	 0	; $10 @
>92b5	00					.byte	 0	; $11 !!17
>92b6	00					.byte	 0	; $12 !!18
>92b7	00					.byte	 0	; $13 [
>92b8	04					.byte	 4	; $14 \
>92b9	00					.byte	 0	; $15 ]
>92ba	01					.byte	 1	; $16 ^
>92bb	00					.byte	 0	; $17 _
>92bc	00					.byte	 0	; $18 `
>92bd	00					.byte	 0	; $19 !!25
>92be	00					.byte	 0	; $1a !!26
>92bf	00					.byte	 0	; $1b {
>92c0	01					.byte	 1	; $1c |
>92c1	00					.byte	 0	; $1d }
>92c2	00					.byte	 0	; $1e ~
>92c3	00					.byte	 0	; $1f [7m<7F>[m
>92c4	00					.byte	 0	; $20
>92c5	05					.byte	 5	; $21 !
>92c6	00					.byte	 0	; $22 "
>92c7	00					.byte	 0	; $23 #
>92c8	05					.byte	 5	; $24 $
>92c9	04					.byte	 4	; $25 %
>92ca	01					.byte	 1	; $26 &
>92cb	00					.byte	 0	; $27 '
>92cc	00					.byte	 0	; $28 (
>92cd	00					.byte	 0	; $29 )
>92ce	04					.byte	 4	; $2a *
>92cf	03					.byte	 3	; $2b +
>92d0	00					.byte	 0	; $2c ,
>92d1	03					.byte	 3	; $2d -
>92d2	00					.byte	 0	; $2e .
>92d3	04					.byte	 4	; $2f /
>92d4	00					.byte	 0	; $30 0
>92d5	00					.byte	 0	; $31 1
>92d6	00					.byte	 0	; $32 2
>92d7	00					.byte	 0	; $33 3
>92d8	00					.byte	 0	; $34 4
>92d9	00					.byte	 0	; $35 5
>92da	00					.byte	 0	; $36 6
>92db	00					.byte	 0	; $37 7
>92dc	00					.byte	 0	; $38 8
>92dd	00					.byte	 0	; $39 9
>92de	00					.byte	 0	; $3a :
>92df	00					.byte	 0	; $3b ;
>92e0	02					.byte	 2	; $3c <
>92e1	02					.byte	 2	; $3d =
>92e2	02					.byte	 2	; $3e >
>92e3	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92e4					EvaluateExpressionAt0:
.92e4	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92e6					EvaluateExpression:
.92e6	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92e8					EvaluateExpressionAtPrecedence:
.92e8	48		pha				pha 								; save precedence level
.92e9	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; evaluate term into level X.
.92ec	68		pla				pla 								; restore precedence level.
.92ed					_EXPRLoop:
.92ed	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92ef	b1 30		lda ($30),y			lda 	(codePtr),y
.92f1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92f3	b0 25		bcs $931a			bcs 	_EXPRExit
.92f5	da		phx				phx 								; read the operator precedence
.92f6	aa		tax				tax
.92f7	bd a4 92	lda $92a4,x			lda 	PrecedenceLevel,x
.92fa	fa		plx				plx
.92fb	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.92fd	f0 1b		beq $931a			beq 	_EXPRExit
.92ff	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9301	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9303	c5 37		cmp $37				cmp 	zTemp0+1
.9305	b0 13		bcs $931a			bcs		_EXPRExit 					; if current >= operator exit
.9307	48		pha				pha 								; save current precedence.
.9308	b1 30		lda ($30),y			lda 	(codePtr),y
.930a	c8		iny				iny
.930b	48		pha				pha
.930c	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.930e	e8		inx				inx 								; work out the right hand side.
.930f	20 e8 92	jsr $92e8			jsr 	EvaluateExpressionAtPrecedence
.9312	ca		dex				dex
.9313	68		pla				pla 								; get operator, call the code.
.9314	20 1d 93	jsr $931d			jsr 	_EXPRCaller
.9317	68		pla				pla 								; restore precedence level
.9318	80 d3		bra $92ed			bra 	_EXPRLoop 					; and go round.
.931a					_EXPRExit:
.931a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.931c	60		rts				rts
.931d					_EXPRCaller:
.931d	da		phx				phx 								; save on stack, first thing is to restore it
.931e	0a		asl a				asl 	a 							; double so can use vectors into X
.931f	aa		tax				tax
.9320	7c 68 8a	jmp ($8a68,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9323					FloatingPointAdd:
.9323	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.9326	80 0b		bra $9333			bra 	FloatAdd
.9328					FloatingPointSub:
.9328	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.932b					FloatSubtract:
.932b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.932e	49 80		eor #$80			eor 	#$80
.9330	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9333					FloatAdd:
.9333	48		pha				pha
.9334	5a		phy				phy
.9335	20 dd 94	jsr $94dd			jsr 	NSNormalise 				; normalise S[X]
.9338	f0 5c		beq $9396			beq 	_FAReturn1
.933a	e8		inx				inx 								; normalise S[X+1]
.933b	20 dd 94	jsr $94dd			jsr 	NSNormalise
.933e	ca		dex				dex
.933f	c9 00		cmp #$00			cmp 	#0
.9341	f0 77		beq $93ba			beq 	_FAExit 					; if so, just return A
.9343	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9346	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9349	f0 1b		beq $9366			beq 	_FAExponentsEqual
.934b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.934e	a8		tay				tay
.934f	38		sec				sec 								; do a signed comparison of the exponents.
.9350	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9353	50 02		bvc $9357			bvc 	_FANoSignedChange
.9355	49 80		eor #$80			eor 	#$80
.9357					_FANoSignedChange:
.9357	29 80		and #$80			and 	#$80
.9359	10 03		bpl $935e			bpl 	_FAHaveMax
.935b	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.935e					_FAHaveMax:
.935e	20 bd 93	jsr $93bd			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9361	e8		inx				inx
.9362	20 bd 93	jsr $93bd			jsr 	_FAShiftToExponent
.9365	ca		dex				dex
.9366					_FAExponentsEqual:
.9366	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9369	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.936c	30 10		bmi $937e			bmi 	_FADifferentSigns
.936e	20 6f 90	jsr $906f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9371	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9374	10 44		bpl $93ba			bpl 	_FAExit 					; if no, we are done.
.9376	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9379	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.937c	80 3c		bra $93ba			bra 	_FAExit
.937e					_FADifferentSigns:
.937e	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9381	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9384	10 06		bpl $938c			bpl 	_FACheckZero 				; if no, check for -0
.9386	20 a6 9d	jsr $9da6			jsr 	NSMNegate 					; netate result
.9389	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.938c					_FACheckZero:
.938c	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero	 				; check for -0
.938f	d0 29		bne $93ba			bne 	_FAExit
.9391	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9394	80 24		bra $93ba			bra 	_FAExit
.9396					_FAReturn1:
.9396	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9399	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.939c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.939f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93a2	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93a5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93a8	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93ae	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93b1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93b4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93b7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93ba					_FAExit:
.93ba	7a		ply				ply
.93bb	68		pla				pla
.93bc	60		rts				rts
.93bd					_FAShiftToExponent:
.93bd					_FAShiftToExponent2:
.93bd	98		tya				tya 								; compare Y to exponent
.93be	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93c1	f0 08		beq $93cb			beq 	_FASEExit 					; exit if so.
.93c3	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight	 			; shift the mantissa right
.93c6	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93c9	80 f2		bra $93bd			bra 	_FAShiftToExponent2
.93cb					_FASEExit:
.93cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93cc					CompareFloat:
.93cc	20 2b 93	jsr $932b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93cf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93d2	29 f8		and #$f8			and 	#$F8
.93d4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93d7	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93da	f0 09		beq $93e5			beq 	_FCExit 					; zero, so approximately identical
.93dc	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93de	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93e1	10 02		bpl $93e5			bpl 	_FCExit
.93e3					_FCNegative:
.93e3	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93e5					_FCExit:
.93e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93e6					FDivideCommand:
.93e6	fa		plx				plx	 								; restore stack position
.93e7	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.93ea					FloatDivide:
.93ea	48		pha				pha
.93eb	e8		inx				inx
.93ec	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93ef	ca		dex				dex
.93f0	c9 00		cmp #$00			cmp 	#0
.93f2	f0 20		beq $9414			beq 	_FDZero
.93f4	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93f7	f0 19		beq $9412			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93f9	20 42 8f	jsr $8f42			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93fc	20 cf 8e	jsr $8ecf			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.93ff	20 dd 94	jsr $94dd			jsr		NSNormalise 				; renormalise
.9402	20 dd 8f	jsr $8fdd			jsr 	CalculateSign 				; calculate result sign
.9405	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9408	38		sec				sec
.9409	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.940c	38		sec				sec
.940d	e9 1e		sbc #$1e			sbc 	#30
.940f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9412					_FDExit:
.9412	68		pla				pla
.9413	60		rts				rts
.9414					_FDZero:
.9414	a9 03		lda #$03		lda	#3
.9416	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9419					FloatFractionalPart:
.9419	5a		phy				phy
.941a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.941d	29 7f		and #$7f			and 	#$7F
.941f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9422	20 dd 94	jsr $94dd			jsr 	NSNormalise
.9425	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9428	38		sec				sec
.9429	e9 e0		sbc #$e0			sbc 	#$E0
.942b	90 31		bcc $945e			bcc 	_FFPExit 					; already fractional
.942d	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.942f	b0 2a		bcs $945b			bcs 	_FFPZero
.9431	a8		tay				tay 								; put count to do in Y
.9432	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9435	20 60 94	jsr $9460			jsr 	_FFPPartial
.9438	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.943b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.943e	20 60 94	jsr $9460			jsr 	_FFPPartial
.9441	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9444	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9447	20 60 94	jsr $9460			jsr 	_FFPPartial
.944a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.944d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9450	20 60 94	jsr $9460			jsr 	_FFPPartial
.9453	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9456	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; zeroed check.
.9459	d0 03		bne $945e			bne 	_FFPExit
.945b					_FFPZero:
.945b	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.945e					_FFPExit:
.945e	7a		ply				ply
.945f	60		rts				rts
.9460					_FFPPartial:
.9460	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9462	f0 17		beq $947b			beq 	_FFFPPExit
.9464	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9466	b0 0c		bcs $9474			bcs 	_FFFPPWholeByte
.9468	5a		phy				phy
.9469					_FFFPPLeft:
.9469	0a		asl a				asl 	a
.946a	88		dey				dey
.946b	d0 fc		bne $9469			bne 	_FFFPPLeft
.946d	7a		ply				ply
.946e					_FFFPPRight:
.946e	4a		lsr a				lsr 	a
.946f	88		dey				dey
.9470	d0 fc		bne $946e			bne 	_FFFPPRight
.9472	80 07		bra $947b			bra 	_FFFPPExit
.9474					_FFFPPWholeByte:
.9474	98		tya				tya 								; subtract 8 from count
.9475	38		sec				sec
.9476	e9 08		sbc #$08			sbc 	#8
.9478	a8		tay				tay
.9479	a9 00		lda #$00			lda 	#0 							; and clear all
.947b					_FFFPPExit:
.947b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.947c					FloatIntegerPart:
.947c	48		pha				pha
.947d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.9480	f0 1f		beq $94a1			beq 	_FIPExit 					; if so do nothing
.9482	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero ?
.9485	f0 17		beq $949e			beq 	_FIPZero 					; if so return zero.
.9487	20 dd 94	jsr $94dd			jsr 	NSNormalise 				; normalise
.948a	f0 12		beq $949e			beq 	_FIPZero 					; normalised to zero, exit zero
.948c					_FIPShift:
.948c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.948f	10 08		bpl $9499			bpl 	_FIPCheckZero
.9491	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift mantissa right
.9494	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.9497	80 f3		bra $948c			bra 	_FIPShift
.9499					_FIPCheckZero:
.9499	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; avoid -0 problem
.949c	d0 03		bne $94a1			bne 	_FIPExit 					; set to zero if mantissa zero.
.949e					_FIPZero:
.949e	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.94a1					_FIPExit:
.94a1	68		pla				pla
.94a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94a3					FloatingPointMultiply:
.94a3	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.94a6					FloatMultiply:
.94a6	48		pha				pha
.94a7	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94aa	f0 1b		beq $94c7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94ac	e8		inx				inx
.94ad	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94b0	ca		dex				dex
.94b1	c9 00		cmp #$00			cmp 	#0
.94b3	f0 0f		beq $94c4			beq 	_FDSetZero
.94b5	20 98 8f	jsr $8f98			jsr 	MultiplyShort 				; calculate the result.
.94b8	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94bb	18		clc				clc
.94bc	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94bf	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94c2	80 03		bra $94c7			bra 	_FDExit
.94c4					_FDSetZero:
.94c4	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; return 0
.94c7					_FDExit:
.94c7	20 dd 94	jsr $94dd			jsr 	NSNormalise 				; normalise the result
.94ca	68		pla				pla
.94cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94cc					FloatPrepare:
.94cc	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; dereference the top two values
.94cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94d2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94d5	29 10		and #$10			and 	#NSBIsString
.94d7	d0 01		bne $94da			bne 	_FDType
.94d9	60		rts				rts
.94da					_FDType:
.94da	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.94dd					NSNormalise:
.94dd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94e0	29 80		and #$80			and 	#$80
.94e2	09 08		ora #$08			ora 	#NSTFloat
.94e4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94e7	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; if zero exit
.94ea	d0 09		bne $94f5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94ec	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94ef	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94f2	a9 00		lda #$00			lda 	#0 							; set Z flag
.94f4	60		rts				rts
.94f5					_NSNormaliseOptimise:
.94f5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94f8	d0 22		bne $951c			bne 	_NSNormaliseLoop
.94fa	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.94fd	30 1d		bmi $951c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.94ff	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9502	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9505	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9508	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.950b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.950e	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9511	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9514	38		sec				sec
.9515	e9 08		sbc #$08			sbc 	#8
.9517	9d 28 04	sta $0428,x			sta 	NSExponent,x
.951a	80 d9		bra $94f5			bra 	_NSNormaliseOptimise
.951c					_NSNormaliseLoop:
.951c	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.951f	70 08		bvs $9529			bvs 	_NSNExit 					; exit if so with Z flag clear
.9521	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; shift mantissa left
.9524	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9527	80 f3		bra $951c			bra 	_NSNormaliseLoop
.9529					_NSNExit:
.9529	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.952b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.952c					AssignNumber:
.952c	5a		phy				phy
.952d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9530	85 36		sta $36				sta 	zTemp0
.9532	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9535	85 37		sta $37				sta 	zTemp0+1
.9537	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.953a	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.953c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.953f	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9541	c9 08		cmp #$08			cmp 	#NSTFloat
.9543	f0 2a		beq $956f			beq 	_ANFloat
.9545	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9548	f0 05		beq $954f			beq		_ANNotFloat
.954a	e8		inx				inx
.954b	20 7c 94	jsr $947c			jsr 	FloatIntegerPart 			; make it an integer
.954e	ca		dex				dex
.954f					_ANNotFloat:
.954f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9552	29 03		and #$03			and 	#3
.9554	d0 05		bne $955b			bne 	_ANByteWord
.9556	20 7b 95	jsr $957b			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9559	80 1e		bra $9579			bra 	_ANExit
.955b					_ANByteWord:
.955b	48		pha				pha 								; save count
.955c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.955f	92 36		sta ($36)			sta 	(zTemp0)
.9561	68		pla				pla
.9562	c9 01		cmp #$01			cmp	 	#1
.9564	f0 13		beq $9579			beq 	_ANExit
.9566	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9569	a0 01		ldy #$01			ldy 	#1
.956b	91 36		sta ($36),y			sta 	(zTemp0),y
.956d	80 0a		bra $9579			bra 	_ANExit
.956f					_ANFloat:
.956f	20 7b 95	jsr $957b			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9572	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9575	a0 04		ldy #$04			ldy 	#4
.9577	91 36		sta ($36),y			sta 	(zTemp0),y
.9579					_ANExit:
.9579	7a		ply				ply
.957a	60		rts				rts
.957b					_ANCopy4PackSign:
.957b	a0 03		ldy #$03			ldy 	#3
.957d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9580	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9582	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9585	91 36		sta ($36),y			sta 	(zTemp0),y
.9587	88		dey				dey
.9588	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.958b	91 36		sta ($36),y			sta 	(zTemp0),y
.958d	88		dey				dey
.958e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9591	91 36		sta ($36),y			sta 	(zTemp0),y
.9593	88		dey				dey
.9594	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9597	91 36		sta ($36),y			sta 	(zTemp0),y
.9599	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.959a					AssignString:
.959a	5a		phy				phy
.959b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.959e	85 38		sta $38				sta 	zTemp1
.95a0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95a3	85 39		sta $39				sta 	zTemp1+1
.95a5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95a8	85 36		sta $36				sta 	zTemp0
.95aa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95ad	85 37		sta $37				sta 	zTemp0+1
.95af	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95b1	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b3	f0 23		beq $95d8			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95b5	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95b6	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95b8	e9 02		sbc #$02			sbc 	#2
.95ba	85 3c		sta $3c				sta 	zsTemp
.95bc	a0 01		ldy #$01			ldy 	#1
.95be	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c0	e9 00		sbc #$00			sbc 	#0
.95c2	85 3d		sta $3d				sta 	zsTemp+1
.95c4	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95c6					_ASGetLength:
.95c6	c8		iny				iny
.95c7	b1 38		lda ($38),y			lda 	(zTemp1),y
.95c9	d0 fb		bne $95c6			bne 	_ASGetLength
.95cb	98		tya				tya 								; is this length <= current length
.95cc	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95ce	90 20		bcc $95f0			bcc 	_ASCopyString
.95d0	f0 1e		beq $95f0			beq 	_ASCopyString
.95d2	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95d4	a0 01		ldy #$01			ldy 	#1
.95d6	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95d8					_ASNewStringRequired:
.95d8	e8		inx				inx 								; concrete the new string.
.95d9	20 d1 a2	jsr $a2d1			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95dc	ca		dex				dex
.95dd	18		clc				clc
.95de	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95e1	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95e3	92 36		sta ($36)			sta 	(zTemp0)
.95e5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95e8	69 00		adc #$00			adc 	#0
.95ea	a0 01		ldy #$01			ldy 	#1
.95ec	91 36		sta ($36),y			sta 	(zTemp0),y
.95ee	80 0d		bra $95fd			bra 	_ASExit
.95f0					_ASCopyString:
.95f0	a0 00		ldy #$00			ldy 	#0
.95f2					_ASCopyLoop:
.95f2	b1 38		lda ($38),y			lda 	(zTemp1),y
.95f4	c8		iny				iny
.95f5	c8		iny				iny
.95f6	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f8	88		dey				dey
.95f9	c9 00		cmp #$00			cmp 	#0
.95fb	d0 f5		bne $95f2			bne 	_ASCopyLoop
.95fd					_ASExit:
.95fd	7a		ply				ply
.95fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.95ff					DereferenceTopTwo:
.95ff	e8		inx				inx
.9600	20 04 96	jsr $9604			jsr 	Dereference 				; deref x+1
.9603	ca		dex				dex  								; falls through to deref x
.9604					Dereference:
.9604	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9607	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9609	f0 57		beq $9662			beq 	_DRFExit 					; not a reference
.960b	5a		phy				phy
.960c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.960f	85 36		sta $36				sta 	zTemp0
.9611	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9614	85 37		sta $37				sta 	zTemp0+1
.9616	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9619	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.961b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.961e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9621	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9623	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9625	f0 0f		beq $9636			beq 	_DRFDereferenceTwo
.9627	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9629	f0 39		beq $9664			beq 	_DRFFull
.962b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.962e	29 03		and #$03			and 	#3
.9630	f0 32		beq $9664			beq 	_DRFFull 					; the whole word
.9632	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9634	f0 07		beq $963d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9636					_DRFDereferenceTwo:
.9636	a0 01		ldy #$01			ldy 	#1
.9638	b1 36		lda ($36),y			lda 	(zTemp0),y
.963a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.963d					_DRFClear23:
.963d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9640	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9643	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9646	29 18		and #$18			and 	#NSBTypeMask
.9648	9d 00 04	sta $0400,x			sta 	NSStatus,x
.964b	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.964d	d0 12		bne $9661			bne 	_DRFNotString
.964f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9652	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9655	d0 0a		bne $9661			bne 	_DRFNotString
.9657	a9 63		lda #$63			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9659	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.965c	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.965e	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9661					_DRFNotString
.9661	7a		ply				ply 								; restore Y and exit
.9662					_DRFExit:
.9662	60		rts				rts
.9663					_DRFNullString:
>9663	00						.byte 	0
.9664					_DRFFull:
.9664	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9666	b1 36		lda ($36),y			lda 	(zTemp0),y
.9668	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.966b	c8		iny				iny
.966c	b1 36		lda ($36),y			lda 	(zTemp0),y
.966e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9671	c8		iny				iny
.9672	b1 36		lda ($36),y			lda 	(zTemp0),y
.9674	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9677	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.967a	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.967d	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.967f	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9682	f0 06		beq $968a			beq 	_DRFNoExponent
.9684	c8		iny				iny 								; if not, read the exponent as well.
.9685	b1 36		lda ($36),y			lda 	(zTemp0),y
.9687	9d 28 04	sta $0428,x			sta 	NSExponent,x
.968a					_DRFNoExponent:
.968a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.968d	10 0d		bpl $969c			bpl 	_DRFExit2 					; if not, then exit.
.968f	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9691	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9694	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9697	09 80		ora #$80			ora 	#NSBIsNegative
.9699	9d 00 04	sta $0400,x			sta 	NSStatus,x
.969c					_DRFExit2:
.969c	7a		ply				ply
.969d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.969e					EncodeNumberStart:
.969e	38		sec				sec
.969f	80 01		bra $96a2			bra 	EncodeNumberContinue+1
.96a1					EncodeNumberContinue:
.96a1	18		clc				clc
.96a2					EncodeNumber:
.96a2	08		php				php 								; save reset.
.96a3	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96a5	f0 12		beq $96b9			beq 	_ENIsOkay
.96a7	c9 30		cmp #$30			cmp 	#"0"
.96a9	90 04		bcc $96af			bcc 	_ENBadNumber
.96ab	c9 3a		cmp #$3a			cmp 	#"9"+1
.96ad	90 0a		bcc $96b9			bcc 	_ENIsOkay
.96af					_ENBadNumber:
.96af	28		plp				plp 								; throw saved reset
.96b0	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96b3	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96b5	f0 7e		beq $9735			beq 	_ENConstructFinal
.96b7					_ENFail:
.96b7	18		clc				clc 								; not allowed
.96b8	60		rts				rts
.96b9					_ENIsOkay:
.96b9	28		plp				plp 								; are we restarting
.96ba	90 15		bcc $96d1			bcc 	_ENNoRestart
.96bc					_ENStartEncode:
.96bc	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96be	f0 0c		beq $96cc			beq 	_ENFirstDP
.96c0	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96c2	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.96c5	a9 01		lda #$01			lda 	#ESTA_Low
.96c7					_ENExitChange:
.96c7	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96ca	38		sec				sec
.96cb	60		rts				rts
.96cc					_ENFirstDP:
.96cc	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; clear integer part
.96cf	80 3f		bra $9710			bra 	_ESTASwitchFloat			; go straight to float and exi
.96d1					_ENNoRestart:
.96d1	48		pha				pha 								; save on stack.
.96d2	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96d5	c9 01		cmp #$01			cmp 	#ESTA_Low
.96d7	f0 09		beq $96e2			beq  	_ESTALowState
.96d9	c9 02		cmp #$02			cmp 	#ESTA_High
.96db	f0 29		beq $9706			beq 	_ESTAHighState
.96dd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96df	f0 3b		beq $971c			beq 	_ESTADecimalState
>96e1	db						.byte 	$DB 						; causes a break in the emulator
.96e2					_ESTALowState:
.96e2	68		pla				pla 								; get value back
.96e3	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96e5	f0 29		beq $9710			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96e7	29 0f		and #$0f			and 	#15 						; make digit
.96e9	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96ef	0a		asl a				asl 	a
.96f0	0a		asl a				asl 	a
.96f1	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96f4	0a		asl a				asl 	a
.96f5	6d 86 04	adc $0486			adc 	DigitTemp
.96f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96fb	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.96fd	90 05		bcc $9704			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.96ff	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9701	8d 85 04	sta $0485			sta 	EncodeState
.9704					_ESTANoSwitch:
.9704	38		sec				sec
.9705	60		rts				rts
.9706					_ESTAHighState:
.9706	68		pla				pla 								; get value back
.9707	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9709	f0 05		beq $9710			beq 	_ESTASwitchFloat
.970b	20 6f 97	jsr $976f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.970e	38		sec				sec
.970f	60		rts				rts
.9710					_ESTASwitchFloat:
.9710	9c 87 04	stz $0487			stz 	DecimalCount
.9713	e8		inx				inx 								; zero the decimal additive.
.9714	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.9717	ca		dex				dex
.9718	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.971a	80 ab		bra $96c7			bra 	_ENExitChange
.971c					_ESTADecimalState:
.971c	68		pla				pla 								; digit.
.971d	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.971f	f0 96		beq $96b7			beq 	_ENFail
.9721	e8		inx				inx 								; put digit into fractional part of X+1
.9722	20 6f 97	jsr $976f			jsr 	ESTAShiftDigitIntoMantissa
.9725	ca		dex				dex
.9726	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9729	ad 87 04	lda $0487			lda 	DecimalCount
.972c	c9 0b		cmp #$0b			cmp 	#11
.972e	f0 02		beq $9732			beq 	_ESTADSFail
.9730	38		sec				sec
.9731	60		rts				rts
.9732					_ESTADSFail:
.9732	4c 89 9f	jmp $9f89			jmp 	RangeError
.9735					_ENConstructFinal:
.9735	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9738	f0 33		beq $976d			beq 	_ENCFExit 					; no decimals
.973a	5a		phy				phy
.973b	0a		asl a				asl 	a 							; x 4 and CLC
.973c	0a		asl a				asl 	a
.973d	6d 87 04	adc $0487			adc 	DecimalCount
.9740	a8		tay				tay
.9741	b9 48 9f	lda $9f48,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9744	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9747	b9 49 9f	lda $9f49,y			lda 	DecimalScalarTable-5+1,y
.974a	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.974d	b9 4a 9f	lda $9f4a,y			lda 	DecimalScalarTable-5+2,y
.9750	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9753	b9 4b 9f	lda $9f4b,y			lda 	DecimalScalarTable-5+3,y
.9756	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9759	b9 4c 9f	lda $9f4c,y			lda 	DecimalScalarTable-5+4,y
.975c	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.975f	a9 08		lda #$08			lda 	#NSTFloat
.9761	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9764	7a		ply				ply
.9765	e8		inx				inx 								; multiply decimal const by decimal scalar
.9766	20 a6 94	jsr $94a6			jsr 	FloatMultiply
.9769	ca		dex				dex
.976a	20 33 93	jsr $9333			jsr 	FloatAdd 					; add to integer part.
.976d					_ENCFExit:
.976d	18		clc				clc 								; reject the digit.
.976e	60		rts				rts
.976f					ESTAShiftDigitIntoMantissa:
.976f	29 0f		and #$0f			and 	#15 						; save digit
.9771	48		pha				pha
.9772	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9775	48		pha				pha
.9776	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9779	48		pha				pha
.977a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.977d	48		pha				pha
.977e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9781	48		pha				pha
.9782	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 2
.9785	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 4
.9788	18		clc				clc 								; pop mantissa and add
.9789	68		pla				pla
.978a	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.978d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9790	68		pla				pla
.9791	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9794	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9797	68		pla				pla
.9798	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.979b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.979e	68		pla				pla
.979f	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97a2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97a5	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 10
.97a8	68		pla				pla 								; add digit
.97a9	18		clc				clc
.97aa	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97ad	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b0	90 0d		bcc $97bf			bcc 	_ESTASDExit
.97b2	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97b5	d0 08		bne $97bf			bne 	_ESTASDExit
.97b7	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97ba	d0 03		bne $97bf			bne 	_ESTASDExit
.97bc	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97bf					_ESTASDExit:
.97bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97c0					EvaluateTerm:
.97c0	b1 30		lda ($30),y			lda 	(codePtr),y
.97c2	30 18		bmi $97dc			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97c4	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97c6	b0 6f		bcs $9837			bcs 	_ETVariable
.97c8	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97ca	90 6e		bcc $983a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97cc	c9 3a		cmp #$3a			cmp 	#'9'+1
.97ce	b0 6a		bcs $983a			bcs 	_ETPuncUnary
.97d0	20 9e 96	jsr $969e			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97d3					_ETNumber:
.97d3	c8		iny				iny 								; keep encoding until we have the numbers
.97d4	b1 30		lda ($30),y			lda 	(codePtr),y
.97d6	20 a1 96	jsr $96a1			jsr 	EncodeNumberContinue
.97d9	b0 f8		bcs $97d3			bcs 	_ETNumber 					; go back if accepted.
.97db	60		rts				rts
.97dc					_ETCheckUnary:
.97dc	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97de	f0 41		beq $9821			beq 	_ETString
.97e0	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97e2	f0 12		beq $97f6			beq 	_ETHexConstant
.97e4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97e6	90 0b		bcc $97f3			bcc 	_ETSyntaxError
.97e8	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.97ea	b0 07		bcs $97f3			bcs 	_ETSyntaxError
.97ec	da		phx				phx 								; push X on the stack
.97ed	0a		asl a				asl 	a 							; put vector x 2 into X
.97ee	aa		tax				tax
.97ef	c8		iny				iny 								; consume unary function token
.97f0	7c e8 8a	jmp ($8ae8,x)			jmp 	(VectorSet0,x) 				; and do it.
.97f3					_ETSyntaxError:
.97f3	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.97f6					_ETHexConstant:
.97f6	c8		iny				iny 								; skip #
.97f7	c8		iny				iny 								; skip count
.97f8	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; clear result
.97fb					_ETHLoop:
.97fb	b1 30		lda ($30),y			lda 	(codePtr),y
.97fd	c8		iny				iny 								; and consume
.97fe	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9800	f0 1e		beq $9820			beq 	_ETHExit
.9802	48		pha				pha 								; save on stack.
.9803	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 2
.9806	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 4
.9809	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 8
.980c	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 16
.980f	68		pla				pla 								; ASCII
.9810	c9 41		cmp #$41			cmp 	#'A'
.9812	90 02		bcc $9816			bcc 	_ETHNotChar
.9814	e9 07		sbc #$07			sbc 	#7
.9816					_ETHNotChar:
.9816	29 0f		and #$0f			and 	#15 						; digit now
.9818	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.981b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.981e	80 db		bra $97fb			bra 	_ETHLoop 					; go round.
.9820					_ETHExit:
.9820	60		rts				rts
.9821					_ETString:
.9821	c8		iny				iny 								; look at length
.9822	b1 30		lda ($30),y			lda 	(codePtr),y
.9824	48		pha				pha
.9825	c8		iny				iny 								; first character
.9826	20 f5 a1	jsr $a1f5			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9829	68		pla				pla 								; restore count and save
.982a	85 36		sta $36				sta 	zTemp0
.982c	98		tya				tya 								; add length to Y to skip it.
.982d	18		clc				clc
.982e	65 36		adc $36				adc 	zTemp0
.9830	a8		tay				tay
.9831	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9833	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9836	60		rts				rts
.9837					_ETVariable:
.9837	4c 91 98	jmp $9891			jmp 	VariableHandler
.983a					_ETPuncUnary:
.983a	c8		iny				iny 								; consume the unary character
.983b	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.983d	f0 2d		beq $986c			beq 	_ETUnaryNegate
.983f	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9841	f0 39		beq $987c			beq 	_ETDereference
.9843	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9845	f0 43		beq $988a			beq 	_ETParenthesis
.9847	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9849	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.984b	f0 06		beq $9853			beq 	_ETIndirection
.984d	e6 36		inc $36				inc 	zTemp0
.984f	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9851	d0 a0		bne $97f3			bne 	_ETSyntaxError
.9853					_ETIndirection:
.9853	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9855	1a		inc a				inc 	a
.9856	48		pha				pha
.9857	20 c0 97	jsr $97c0			jsr 	EvaluateTerm				; evaluate the term
.985a	20 04 96	jsr $9604			jsr 	Dereference 				; dereference it.
.985d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9860	d0 07		bne $9869			bne 	_ETTypeMismatch
.9862	68		pla				pla 								; indirection 1-2
.9863	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9865	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9868	60		rts				rts
.9869					_ETTypeMismatch:
.9869	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.986c					_ETUnaryNegate:
.986c	20 c0 97	jsr $97c0			jsr 	EvaluateTerm				; evaluate the term
.986f	20 04 96	jsr $9604			jsr 	Dereference 				; dereference it.
.9872	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9875	29 10		and #$10			and 	#NSTString
.9877	d0 f0		bne $9869			bne 	_ETTypeMismatch
.9879	4c a6 9d	jmp $9da6			jmp 	NSMNegate  					; just toggles the sign bit.
.987c					_ETDereference:
.987c	20 c0 97	jsr $97c0			jsr 	EvaluateTerm				; evaluate the term
.987f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9882	29 20		and #$20			and 	#NSBIsReference
.9884	f0 e3		beq $9869			beq 	_ETTypeMismatch
.9886	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9889	60		rts				rts
.988a					_ETParenthesis:
.988a	20 e6 92	jsr $92e6			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.988d	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check for )
.9890	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9891					VariableHandler:
.9891	b1 30		lda ($30),y			lda 	(codePtr),y
.9893	18		clc				clc
.9894	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9896	85 37		sta $37				sta 	zTemp0+1
.9898	c8		iny				iny
.9899	b1 30		lda ($30),y			lda 	(codePtr),y
.989b	85 36		sta $36				sta 	zTemp0
.989d	c8		iny				iny
.989e	18		clc				clc									; copy variable address+3 to mantissa
.989f	69 03		adc #$03			adc 	#3
.98a1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a4	a5 37		lda $37				lda 	zTemp0+1
.98a6	69 00		adc #$00			adc 	#0
.98a8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98ab	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98ae	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98b1	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98b4	5a		phy				phy
.98b5	a0 02		ldy #$02			ldy 	#2 							; read type
.98b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.98b9	7a		ply				ply
.98ba	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98bc	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98be	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98c1	29 04		and #$04			and 	#NSBIsArray
.98c3	d0 01		bne $98c6			bne 	_VHArray
.98c5	60		rts				rts
.98c6					_VHArray:
.98c6	e8		inx				inx
.98c7	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98ca	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98cc	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98cf	b1 30		lda ($30),y			lda 	(codePtr),y
.98d1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98d3	d0 06		bne $98db			bne 	_VHNoSecondIndex
.98d5	c8		iny				iny 								; skip the comma
.98d6	e8		inx				inx
.98d7	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98da	ca		dex				dex
.98db					_VHNoSecondIndex:
.98db	ca		dex				dex 								; set X back.
.98dc	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; and check the right bracket.
.98df	5a		phy				phy 								; save position
.98e0	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98e2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98e4	f0 6b		beq $9951			beq 	_VHBadIndex
.98e6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98e9	85 3e		sta $3e				sta 	zaTemp
.98eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98ee	85 3f		sta $3f				sta 	zaTemp+1
.98f0	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98f2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98f4	f0 02		beq $98f8			beq 	_VHHas2Mask
.98f6	a9 ff		lda #$ff			lda 	#$FF
.98f8					_VHHas2Mask:
.98f8	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.98fb	f0 54		beq $9951			beq 	_VHBadIndex
.98fd	0a		asl a				asl 	a 							; carry will be set if a second index
.98fe	90 09		bcc $9909			bcc 	_VHCheckFirstIndex
.9900	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9902	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9904	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9907	90 48		bcc $9951			bcc 	_VHBadIndex
.9909					_VHCheckFirstIndex:
.9909	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.990b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990d	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9910	90 3f		bcc $9951			bcc 	_VHBadIndex
.9912	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9914	64 37		stz $37				stz 	zTemp0+1
.9916	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9919	30 0f		bmi $992a			bmi 	_VHNoMultiply
.991b	da		phx				phx
.991c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.991f	48		pha				pha
.9920	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9922	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9924	1a		inc a				inc 	a 							; add 1 for zero base
.9925	fa		plx				plx
.9926	20 8f 9d	jsr $9d8f			jsr 	Multiply8x8 				; calculate -> Z0
.9929	fa		plx				plx
.992a					_VHNoMultiply:
.992a	18		clc				clc
.992b	a5 36		lda $36				lda 	zTemp0
.992d	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9930	85 36		sta $36				sta 	zTemp0
.9932	a5 37		lda $37				lda 	zTemp0+1
.9934	69 00		adc #$00			adc 	#0
.9936	85 37		sta $37				sta 	zTemp0+1
.9938	bd 00 04	lda $0400,x			lda 	NSStatus,x
.993b	20 f8 84	jsr $84f8			jsr 	ScaleByBaseType
.993e	18		clc				clc
.993f	b2 3e		lda ($3e)			lda 	(zaTemp)
.9941	65 36		adc $36				adc 	zTemp0
.9943	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9946	a0 01		ldy #$01			ldy 	#1
.9948	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.994a	65 37		adc $37				adc 	zTemp0+1
.994c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.994f	7a		ply				ply 								; restore position
.9950	60		rts				rts
.9951					_VHBadIndex:
.9951	a9 17		lda #$17		lda	#23
.9953	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9956					AbsUnary:
.9956	fa		plx				plx 								; restore stack pos
.9957	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.995a	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.995d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9960	29 7f		and #$7f			and 	#$7F
.9962	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9965	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9966					AllocUnary:
.9966	fa		plx				plx 								; restore stack pos
.9967	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger		; get bytes required.
.996a	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.996d	da		phx				phx 								; save X/Y
.996e	5a		phy				phy
.996f	8a		txa				txa 								; copy X into Y
.9970	a8		tay				tay
.9971	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9974	aa		tax				tax
.9975	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9978	20 85 99	jsr $9985			jsr 	AllocateXABytes 			; allocate memory
.997b	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.997e	8a		txa				txa
.997f	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9982	7a		ply				ply
.9983	fa		plx				plx
.9984	60		rts				rts
.9985					AllocateXABytes:
.9985	5a		phy				phy
.9986	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9989	84 36		sty $36				sty 	zTemp0
.998b	5a		phy				phy
.998c	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.998f	84 37		sty $37				sty 	zTemp0+1
.9991	5a		phy				phy
.9992	18		clc				clc 								; add to low memory pointer
.9993	6d 8c 04	adc $048c			adc 	lowMemPtr
.9996	8d 8c 04	sta $048c			sta 	lowMemPtr
.9999	8a		txa				txa
.999a	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.999d	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99a0	b0 2f		bcs $99d1			bcs 	CISSMemory
.99a2	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99a5					_ClearMemory:
.99a5	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99a8	c5 36		cmp $36				cmp 	zTemp0
.99aa	d0 07		bne $99b3			bne 	_CMClearNext
.99ac	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99af	c5 37		cmp $37				cmp 	zTemp0+1
.99b1	f0 0c		beq $99bf			beq 	_CMExit
.99b3					_CMClearNext:
.99b3	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99b5	92 36		sta ($36)			sta 	(zTemp0)
.99b7	e6 36		inc $36				inc 	zTemp0
.99b9	d0 ea		bne $99a5			bne 	_ClearMemory
.99bb	e6 37		inc $37				inc		zTemp0+1
.99bd	80 e6		bra $99a5			bra 	_ClearMemory
.99bf					_CMExit:
.99bf	fa		plx				plx
.99c0	68		pla				pla
.99c1	7a		ply				ply
.99c2	60		rts				rts
.99c3					CheckIdentifierStringSpace:
.99c3	48		pha				pha
.99c4	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99c7	18		clc				clc
.99c8	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99ca	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99cd	b0 02		bcs $99d1			bcs 	CISSMemory
.99cf	68		pla				pla
.99d0	60		rts				rts
.99d1					CISSMemory:
.99d1	a9 06		lda #$06		lda	#6
.99d3	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99d6					AscUnary:
.99d6	fa		plx				plx 								; restore stack pos
.99d7	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.99da	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99dc	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.99df	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.99e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99e3					FracUnary:
.99e3	fa		plx				plx 								; restore stack pos
.99e4	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.99e7	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.99ea	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99ed	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99ef	f0 04		beq $99f5			beq 	_IUZero
.99f1	20 19 94	jsr $9419			jsr 	FloatFractionalPart
.99f4	60		rts				rts
.99f5					_IUZero:
.99f5	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.99f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99f9					IntUnary:
.99f9	fa		plx				plx 								; restore stack pos
.99fa	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.99fd	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9a00	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a03	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a05	f0 03		beq $9a0a			beq 	_IUExit
.9a07	20 7c 94	jsr $947c			jsr 	FloatIntegerPart
.9a0a					_IUExit:
.9a0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a0b					LenUnary:
.9a0b	fa		plx				plx 								; restore stack pos
.9a0c	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.9a0f	5a		phy				phy
.9a10	a0 00		ldy #$00			ldy 	#0 							; find length
.9a12					_LenFind:
.9a12	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a14	f0 06		beq $9a1c			beq 	_LenExit
.9a16	c8		iny				iny
.9a17	d0 f9		bne $9a12			bne 	_LenFind
.9a19	4c 89 9f	jmp $9f89			jmp 	RangeError 					; string > 255
.9a1c					_LenExit:
.9a1c	98		tya				tya
.9a1d	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9a20	7a		ply				ply
.9a21	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9a24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a25					Unary_Min:
.9a25	a9 01		lda #$01			lda 	#1
.9a27	80 02		bra $9a2b			bra 	UnaryMinMaxMain
.9a29					Unary_Max:
.9a29	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a2b					UnaryMinMaxMain:
.9a2b	fa		plx				plx 								; get index on number stack
.9a2c	48		pha				pha 								; save comparator
.9a2d	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get the first value.
.9a30					_UMMMLoop:
.9a30	b1 30		lda ($30),y			lda 	(codePtr),y
.9a32	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a34	f0 22		beq $9a58			beq 	_UMMMDone
.9a36	20 26 8d	jsr $8d26			jsr 	CheckComma 					; must be a comma
.9a39	e8		inx				inx
.9a3a	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue
.9a3d	ca		dex				dex
.9a3e	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a41	e8		inx				inx
.9a42	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a45	e8		inx				inx
.9a46	20 ef 8d	jsr $8def			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a49	ca		dex				dex
.9a4a	ca		dex				dex
.9a4b	85 36		sta $36				sta 	zTemp0 						; save required result
.9a4d	68		pla				pla 								; get and save comparator
.9a4e	48		pha				pha
.9a4f	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a51	d0 dd		bne $9a30			bne 	_UMMMLoop
.9a53	20 5b 9a	jsr $9a5b			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a56	80 d8		bra $9a30			bra 	_UMMMLoop
.9a58					_UMMMDone:
.9a58	68		pla				pla 								; throw the comparator
.9a59	c8		iny				iny 								; skip )
.9a5a	60		rts				rts
.9a5b					ExpCopyAboveDown:
.9a5b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a5e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a61	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a64	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a67	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a6a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a6d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a70	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a73	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a76	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a79	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a7c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a80					Unary_Not:
.9a80	fa		plx				plx
.9a81	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; get integer
.9a84	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9a87	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; zero mantissa ?
.9a8a	f0 04		beq $9a90			beq 	_NotZero
.9a8c	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.9a8f	60		rts				rts
.9a90					_NotZero:
.9a90	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.9a93					_UNBad:
.9a93	4c 93 9f	jmp $9f93			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a96					Unary_Random:
.9a96	fa		plx				plx
.9a97	20 15 9b	jsr $9b15			jsr 	Random32Bit 				; get a random number
.9a9a	20 fa 9a	jsr $9afa			jsr 	URCopyToMantissa  			; put in mantissa
.9a9d	b1 30		lda ($30),y			lda 	(codePtr),y
.9a9f	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9aa1	f0 08		beq $9aab			beq 	_URNoModulus
.9aa3	e8		inx				inx
.9aa4	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9aa7	ca		dex				dex
.9aa8	20 13 8f	jsr $8f13			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9aab					_URNoModulus:
.9aab	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9aae	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ab1	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9ab4	60		rts				rts
.9ab5					Unary_Rnd:
.9ab5	fa		plx				plx
.9ab6	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; number to use.
.9ab9	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; closing bracket
.9abc	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9abf	f0 2b		beq $9aec			beq 	_URCopySeed
.9ac1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ac4	10 23		bpl $9ae9			bpl 	_URDontSeed
.9ac6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ac9	49 17		eor #$17			eor 	#$17
.9acb	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ace	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ad1	49 a5		eor #$a5			eor 	#$A5
.9ad3	8d 89 04	sta $0489			sta 	RandomSeed+1
.9ad6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9ad9	49 c2		eor #$c2			eor 	#$C2
.9adb	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ade	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ae1	49 9d		eor #$9d			eor 	#$9D
.9ae3	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ae6	20 15 9b	jsr $9b15			jsr 	Random32Bit
.9ae9					_URDontSeed:
.9ae9	20 15 9b	jsr $9b15			jsr 	Random32Bit 				; generate a number.
.9aec					_URCopySeed:
.9aec	20 fa 9a	jsr $9afa			jsr 	URCopyToMantissa 			; copy into mantissa
.9aef	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9af1	8d 28 04	sta $0428			sta 	NSExponent
.9af4	a9 08		lda #$08			lda 	#NSTFloat
.9af6	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9af9	60		rts				rts
.9afa					URCopyToMantissa:
.9afa	ad 88 04	lda $0488			lda 	RandomSeed+0
.9afd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b00	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b03	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b06	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b09	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b0c	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b0f	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b11	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b14	60		rts				rts
.9b15					Random32Bit:
.9b15	5a		phy				phy
.9b16	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b18	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b1b	d0 03		bne $9b20			bne 	_Random1
.9b1d	a8		tay				tay 								; if so do it 256 times
.9b1e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b20					_Random1:
.9b20	0a		asl a				asl 	a 							; LSFR RNG
.9b21	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b24	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b27	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b2a	90 02		bcc $9b2e			bcc 	_Random2
.9b2c	49 c5		eor #$c5			eor 	#$C5
.9b2e					_Random2:
.9b2e	88		dey				dey
.9b2f	d0 ef		bne $9b20			bne 	_Random1
.9b31	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b34	7a		ply				ply
.9b35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b36					SgnUnary:
.9b36	fa		plx				plx 								; restore stack pos
.9b37	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.9b3a	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9b3d	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; if zero
.9b40	f0 10		beq $9b52			beq 	_SGZero  					; return Int Zero
.9b42	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b45	48		pha				pha
.9b46	a9 01		lda #$01			lda 	#1 							; set to 1
.9b48	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9b4b	68		pla				pla
.9b4c	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b4e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b51	60		rts				rts
.9b52	20 fa 9d	jsr $9dfa	_SGZero:jsr 	NSMSetZero
.9b55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b56					ValUnary:
.9b56	fa		plx				plx 								; restore stack pos
.9b57	20 6c 9b	jsr $9b6c			jsr 	ValMainCode 				; do the main val() code
.9b5a	b0 01		bcs $9b5d			bcs 	_VUError 					; couldn't convert
.9b5c	60		rts				rts
.9b5d					_VUError:
.9b5d	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.9b60					IsValUnary:
.9b60	fa		plx				plx 								; restore stack pos
.9b61	20 6c 9b	jsr $9b6c			jsr 	ValMainCode 				; do the main val() code
.9b64	b0 03		bcs $9b69			bcs 	_VUBad
.9b66	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.9b69					_VUBad:
.9b69	4c b0 8d	jmp $8db0			jmp 	ReturnFalse
.9b6c					ValMainCode:
.9b6c	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.9b6f	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check right bracket present
.9b72	5a		phy				phy
.9b73	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b75	f0 17		beq $9b8e			beq 	_VMCFail2
.9b77	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b79	48		pha				pha 								; save first character
.9b7a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b7c	d0 01		bne $9b7f			bne 	_VMCStart
.9b7e	c8		iny				iny 								; skip over -
.9b7f					_VMCStart:
.9b7f	38		sec				sec 								; initialise first time round.
.9b80					_VMCNext:
.9b80	c8		iny				iny 								; pre-increment
.9b81	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b83	f0 0c		beq $9b91			beq 	_VMCSuccess 				; successful.
.9b85	20 a2 96	jsr $96a2			jsr 	EncodeNumber 				; send it to the number-builder
.9b88	90 03		bcc $9b8d			bcc 	_VMCFail 					; if failed, give up.
.9b8a	18		clc				clc 								; next time round, countinue
.9b8b	80 f3		bra $9b80			bra 	_VMCNext
.9b8d					_VMCFail:
.9b8d	68		pla				pla
.9b8e					_VMCFail2:
.9b8e	7a		ply				ply
.9b8f	38		sec				sec
.9b90	60		rts				rts
.9b91					_VMCSuccess:
.9b91	a9 00		lda #$00			lda 	#0 							; construct final
.9b93	20 a2 96	jsr $96a2			jsr 	EncodeNumber
.9b96	68		pla				pla
.9b97	c9 2d		cmp #$2d			cmp 	#"-"
.9b99	d0 03		bne $9b9e			bne 	_VMCNotNegative
.9b9b	20 a6 9d	jsr $9da6			jsr		NSMNegate
.9b9e					_VMCNotNegative:
.9b9e	7a		ply				ply
.9b9f	18		clc				clc
.9ba0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ba1					ChrUnary:
.9ba1	fa		plx				plx 								; restore stack pos
.9ba2	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger			; get value
.9ba5	48		pha				pha
.9ba6	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9ba9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bab	20 52 a3	jsr $a352			jsr 	StringTempAllocate
.9bae	68		pla				pla 								; write number to it
.9baf	20 90 a3	jsr $a390			jsr 	StringTempWrite
.9bb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bb3					SpcUnary:
.9bb3	fa		plx				plx 								; restore stack pos
.9bb4	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger			; get value
.9bb7	5a		phy				phy
.9bb8	48		pha				pha 								; save count
.9bb9	20 52 a3	jsr $a352			jsr 	StringTempAllocate
.9bbc	7a		ply				ply 								; to do count in Y
.9bbd					_SpcLoop:
.9bbd	c0 00		cpy #$00			cpy 	#0
.9bbf	f0 08		beq $9bc9			beq 	_SpcExit
.9bc1	a9 20		lda #$20			lda 	#32
.9bc3	20 90 a3	jsr $a390			jsr 	StringTempWrite
.9bc6	88		dey				dey
.9bc7	80 f4		bra $9bbd			bra 	_SPCLoop
.9bc9					_SpcExit:
.9bc9	7a		ply				ply
.9bca	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9bcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bce					Unary_Str:
.9bce	fa		plx				plx
.9bcf	20 23 9d	jsr $9d23			jsr 	EvaluateNumber  			; get number
.9bd2	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; closing bracket
.9bd5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bd7	20 f0 9b	jsr $9bf0			jsr 	ConvertNumberToString 		; do the conversion.
.9bda	a9 21		lda #$21			lda		#33 						; create buffer
.9bdc	20 52 a3	jsr $a352			jsr 	StringTempAllocate 			; allocate memory
.9bdf	da		phx				phx
.9be0	a2 00		ldx #$00			ldx 	#0
.9be2					_USCopy:
.9be2	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9be5	20 90 a3	jsr $a390			jsr 	StringTempWrite
.9be8	e8		inx				inx
.9be9	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9bec	d0 f4		bne $9be2			bne 	_USCopy
.9bee	fa		plx				plx
.9bef	60		rts				rts
.9bf0					ConvertNumberToString:
.9bf0	5a		phy				phy 								; save code position
.9bf1	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bf4	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bf7	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9bfa	10 0a		bpl $9c06			bpl 	_CNTSNotNegative
.9bfc	29 7f		and #$7f			and 	#$7F 						; make +ve
.9bfe	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c01	a9 2d		lda #$2d			lda 	#"-"
.9c03	20 6c 9c	jsr $9c6c			jsr 	WriteDecimalBuffer
.9c06					_CNTSNotNegative:
.9c06	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c09	f0 15		beq $9c20			beq 	_CNTSNotFloat
.9c0b	e8		inx				inx 								; round up
.9c0c	a9 01		lda #$01			lda 	#1
.9c0e	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9c11	ca		dex				dex
.9c12	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c15	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c18	a9 08		lda #$08			lda 	#NSTFloat
.9c1a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c1d	20 33 93	jsr $9333			jsr 	FloatAdd
.9c20					_CNTSNotFloat:
.9c20	20 4e 9c	jsr $9c4e			jsr 	MakePlusTwoString
.9c23	20 19 94	jsr $9419			jsr 	FloatFractionalPart 		; get the fractional part
.9c26	20 dd 94	jsr $94dd			jsr 	NSNormalise					; normalise , exit if zero
.9c29	f0 21		beq $9c4c			beq 	_CNTSExit
.9c2b	a9 2e		lda #$2e			lda 	#"."
.9c2d	20 6c 9c	jsr $9c6c			jsr 	WriteDecimalBuffer 			; write decimal place
.9c30					_CNTSDecimal:
.9c30	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c33	30 17		bmi $9c4c			bmi 	_CNTSExit
.9c35	e8		inx				inx 								; x 10.0
.9c36	a9 0a		lda #$0a			lda 	#10
.9c38	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9c3b	a9 08		lda #$08			lda 	#NSTFloat
.9c3d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c40	ca		dex				dex
.9c41	20 a6 94	jsr $94a6			jsr 	FloatMultiply
.9c44	20 4e 9c	jsr $9c4e			jsr 	MakePlusTwoString
.9c47	20 19 94	jsr $9419			jsr 	FloatFractionalPart 		; get the fractional part
.9c4a	80 e4		bra $9c30			bra 	_CNTSDecimal 				; keep going.
.9c4c					_CNTSExit:
.9c4c	7a		ply				ply
.9c4d	60		rts				rts
.9c4e					MakePlusTwoString:
.9c4e	da		phx				phx
.9c4f	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c52	e8		inx				inx 								; access it
.9c53	e8		inx				inx
.9c54	20 7c 94	jsr $947c			jsr 	FloatIntegerPart 			; make it an integer
.9c57	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c59	20 5e 92	jsr $925e			jsr 	ConvertInt32
.9c5c	a2 00		ldx #$00			ldx	 	#0
.9c5e					_MPTSCopy:
.9c5e	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c61	20 6c 9c	jsr $9c6c			jsr 	WriteDecimalBuffer
.9c64	e8		inx				inx
.9c65	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c68	d0 f4		bne $9c5e			bne 	_MPTSCopy
.9c6a	fa		plx				plx
.9c6b	60		rts				rts
.9c6c					WriteDecimalBuffer:
.9c6c	da		phx				phx
.9c6d	ae 95 04	ldx $0495			ldx 	dbOffset
.9c70	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.9c73	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.9c76	ee 95 04	inc $0495			inc 	dbOffset
.9c79	fa		plx				plx
.9c7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c7b					Unary_Left:
.9c7b	fa		plx				plx
.9c7c	18		clc				clc 								; only one parameter
.9c7d	20 f2 9c	jsr $9cf2			jsr 	SubstringInitial 			; set up.
.9c80	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c83	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c86	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c89	80 2c		bra $9cb7			bra 	SubstringMain
.9c8b					Unary_Right:
.9c8b	fa		plx				plx
.9c8c	18		clc				clc 								; only one parameter
.9c8d	20 f2 9c	jsr $9cf2			jsr 	SubstringInitial 			; set up.
.9c90	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c93	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c96	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c99	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9c9c	b0 02		bcs $9ca0			bcs 	_URNotUnderflow
.9c9e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ca0					_URNotUnderFlow:
.9ca0	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ca3	80 12		bra $9cb7			bra 	SubStringMain
.9ca5					Unary_Mid:
.9ca5	fa		plx				plx
.9ca6	38		sec				sec 								; two parameters
.9ca7	20 f2 9c	jsr $9cf2			jsr 	SubstringInitial 			; set up.
.9caa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cad	f0 05		beq $9cb4			beq 	_UMError
.9caf	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cb2	80 03		bra $9cb7			bra 	SubStringMain
.9cb4					_UMError:
.9cb4	4c 93 9f	jmp $9f93			jmp 	ArgumentError
.9cb7					SubStringMain:
.9cb7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cba	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cbd	b0 2d		bcs $9cec			bcs 	_SSMNull 					; if so, return an empty string.
.9cbf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cc2	f0 28		beq $9cec			beq 	_SSMNull 					; return empty string.
.9cc4	18		clc				clc 								; add the offset +1 to the address and
.9cc5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cc8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ccb	85 36		sta $36				sta 	zTemp0
.9ccd	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cd0	69 00		adc #$00			adc 	#0
.9cd2	85 37		sta $37				sta 	zTemp0+1
.9cd4					_SSMNoCarry:
.9cd4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cd7	20 52 a3	jsr $a352			jsr 	StringTempAllocate 			; allocate that many characters
.9cda	5a		phy				phy 								; save Y
.9cdb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cdd					_SSMCopy:
.9cdd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cdf	f0 09		beq $9cea			beq 	_SSMEString 				; no more to copy
.9ce1	20 90 a3	jsr $a390			jsr 	StringTempWrite 			; and write it out.
.9ce4	c8		iny				iny
.9ce5	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9ce8	d0 f3		bne $9cdd			bne 	_SSMCopy
.9cea					_SSMEString:
.9cea	7a		ply				ply
.9ceb					_SSMExit:
.9ceb	60		rts				rts
.9cec					_SSMNull:
.9cec	a9 00		lda #$00			lda 	#0
.9cee	20 52 a3	jsr $a352			jsr 	StringTempAllocate
.9cf1	60		rts				rts
.9cf2					SubstringInitial:
.9cf2	da		phx				phx 								; save initial stack position
.9cf3	08		php				php 								; save carry on stack indicating 2 parameters
.9cf4	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.9cf7	5a		phy				phy 								; calculate length to exponent.
.9cf8	a0 ff		ldy #$ff			ldy 	#$FF
.9cfa					_SIFindLength:
.9cfa	c8		iny				iny
.9cfb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9cfd	d0 fb		bne $9cfa			bne 	_SIFindLength
.9cff	98		tya				tya
.9d00	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d03	7a		ply				ply
.9d04	e8		inx				inx
.9d05	20 26 8d	jsr $8d26			jsr 	CheckComma 					; comma next
.9d08	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get next parameter
.9d0b	28		plp				plp 								; is it the last parameter ?
.9d0c	90 07		bcc $9d15			bcc 	_SSIExit 					; if so, exit.
.9d0e	e8		inx				inx
.9d0f	20 26 8d	jsr $8d26			jsr 	CheckComma 					; comma next
.9d12	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get last parameter
.9d15					_SSIExit:
.9d15	fa		plx				plx
.9d16	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check closing bracket
.9d19	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d1a					EvaluateValue:
.9d1a	48		pha				pha
.9d1b	20 e6 92	jsr $92e6			jsr		EvaluateExpression 			; expression
.9d1e	20 04 96	jsr $9604			jsr 	Dereference					; derefernce it
.9d21	68		pla				pla
.9d22	60		rts				rts
.9d23					EvaluateNumber:
.9d23	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get a value
.9d26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d29	29 10		and #$10			and 	#NSBIsString
.9d2b	d0 16		bne $9d43			bne 	HelperTypeError
.9d2d	60		rts				rts
.9d2e					EvaluateString:
.9d2e	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get a value
.9d31	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d34	29 10		and #$10			and 	#NSBIsString
.9d36	f0 0b		beq $9d43			beq 	HelperTypeError
.9d38					CopyAddressToTemp0:
.9d38	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d3b	85 36		sta $36				sta 	zTemp0
.9d3d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d40	85 37		sta $37				sta 	zTemp0+1
.9d42	60		rts				rts
.9d43					HelperTypeError:
.9d43	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.9d46					EvaluateInteger:
.9d46	20 23 9d	jsr $9d23			jsr 	EvaluateNumber
.9d49	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d4c	d0 0a		bne $9d58			bne 	HelperValueError 			; if not, it's a float.
.9d4e	60		rts				rts
.9d4f					EvaluateUnsignedInteger:
.9d4f	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; check integer is +ve
.9d52	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d55	30 01		bmi $9d58			bmi 	HelperValueError
.9d57	60		rts				rts
.9d58					HelperValueError:
.9d58	4c 93 9f	jmp $9f93			jmp 	ArgumentError
.9d5b					Evaluate16BitInteger:
.9d5b	20 4f 9d	jsr $9d4f			jsr	 	EvaluateUnsignedInteger		; get integer
.9d5e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d61	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d64	d0 f2		bne $9d58			bne 	HelperValueError
.9d66	60		rts				rts
.9d67					Evaluate16BitIntegerSigned:
.9d67	20 46 9d	jsr $9d46			jsr	 	EvaluateInteger				; get integer
.9d6a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d6d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d70	d0 e6		bne $9d58			bne 	HelperValueError
.9d72	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d75	10 03		bpl $9d7a			bpl 	_EISNotSigned
.9d77	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa
.9d7a					_EISNotSigned:
.9d7a	60		rts				rts
.9d7b					Evaluate8BitInteger:
.9d7b	20 4f 9d	jsr $9d4f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d7e	d0 d8		bne $9d58			bne 	HelperValueError
.9d80	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d83	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d86	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d89	d0 cd		bne $9d58			bne 	HelperValueError
.9d8b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d8f					Multiply8x8:
.9d8f	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d90	85 36		sta $36			  	sta 	zTemp0
.9d92	86 37		stx $37				stx 	zTemp0+1
.9d94	a9 00		lda #$00			lda 	#0
.9d96	a2 08		ldx #$08			ldx 	#8
.9d98					_M88Loop:
.9d98	90 03		bcc $9d9d			bcc 	_M88NoAdd
.9d9a	18		clc				clc
.9d9b	65 37		adc $37				adc 	zTemp0+1
.9d9d					_M88NoAdd:
.9d9d	6a		ror a				ror 	a
.9d9e	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9da0	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9da1	d0 f5		bne $9d98			bne 	_M88Loop
.9da3	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9da5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9da6					NSMNegate:
.9da6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9da9	49 80		eor #$80			eor 	#NSBIsNegative
.9dab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dae	60		rts				rts
.9daf					NSMNegateMantissa:
.9daf	38		sec				sec
.9db0	a9 00		lda #$00			lda 	#0
.9db2	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9db5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db8	a9 00		lda #$00			lda 	#0
.9dba	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dbd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc0	a9 00		lda #$00			lda 	#0
.9dc2	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dc5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dc8	a9 00		lda #$00			lda 	#0
.9dca	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dcd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd0	60		rts				rts
.9dd1					NSMShiftUpTwo:
.9dd1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dd7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dda	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ddd	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9de0	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9de6	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9de9	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9dec	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9def	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df2	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9df5	60		rts				rts
.9df6					NSMSetZeroMantissaOnly:
.9df6	a9 00		lda #$00			lda 	#0
.9df8	80 08		bra $9e02			bra 	NSMSetMantissa
.9dfa					NSMSetZero:
.9dfa	a9 00		lda #$00			lda 	#0
.9dfc					NSMSetByte:
.9dfc	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9dff	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e02					NSMSetMantissa:
.9e02	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e05	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e08	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e0b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e0e	60		rts				rts
.9e0f					NSMShiftLeft:
.9e0f	18		clc				clc
.9e10					NSMRotateLeft:
.9e10	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e13	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e16	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e19	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e1c	60		rts				rts
.9e1d					NSMShiftRight:
.9e1d	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e20	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e23	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e26	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e29	60		rts				rts
.9e2a					NSMIsZero:
.9e2a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e2d	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e30	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e33	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e36	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e37					Assemble_ora:
.9e37	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e3a	01					.byte $01
.9e3b					Assemble_and:
.9e3b	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e3e	21					.byte $21
.9e3f					Assemble_eor:
.9e3f	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e42	41					.byte $41
.9e43					Assemble_adc:
.9e43	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e46	61					.byte $61
.9e47					Assemble_sta:
.9e47	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e4a	81					.byte $81
.9e4b					Assemble_lda:
.9e4b	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e4e	a1					.byte $a1
.9e4f					Assemble_cmp:
.9e4f	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e52	c1					.byte $c1
.9e53					Assemble_sbc:
.9e53	20 87 80	jsr $8087		jsr	AssembleGroup1
>9e56	e1					.byte $e1
.9e57					Assemble_asl:
.9e57	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e5a	02					.byte $02
>9e5b	75					.byte $75
.9e5c					Assemble_rol:
.9e5c	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e5f	22					.byte $22
>9e60	75					.byte $75
.9e61					Assemble_lsr:
.9e61	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e64	42					.byte $42
>9e65	75					.byte $75
.9e66					Assemble_ror:
.9e66	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e69	62					.byte $62
>9e6a	75					.byte $75
.9e6b					Assemble_stx:
.9e6b	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e6e	82					.byte $82
>9e6f	50					.byte $50
.9e70					Assemble_ldx:
.9e70	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e73	a2					.byte $a2
>9e74	d0					.byte $d0
.9e75					Assemble_dec:
.9e75	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e78	c2					.byte $c2
>9e79	55					.byte $55
.9e7a					Assemble_inc:
.9e7a	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e7d	e2					.byte $e2
>9e7e	55					.byte $55
.9e7f					Assemble_stz:
.9e7f	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e82	60					.byte $60
>9e83	44					.byte $44
.9e84					Assemble_bit:
.9e84	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e87	20					.byte $20
>9e88	55					.byte $55
.9e89					Assemble_sty:
.9e89	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e8c	80					.byte $80
>9e8d	54					.byte $54
.9e8e					Assemble_ldy:
.9e8e	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e91	a0					.byte $a0
>9e92	d5					.byte $d5
.9e93					Assemble_cpy:
.9e93	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e96	c0					.byte $c0
>9e97	d4					.byte $d4
.9e98					Assemble_cpx:
.9e98	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9e9b	e0					.byte $e0
>9e9c	d0					.byte $d0
.9e9d					Assemble_tsb:
.9e9d	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9ea0	00					.byte $00
>9ea1	50					.byte $50
.9ea2					Assemble_trb:
.9ea2	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9ea5	10					.byte $10
>9ea6	50					.byte $50
.9ea7					Assemble_jsr:
.9ea7	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9eaa	14					.byte $14
>9eab	10					.byte $10
.9eac					Assemble_jmp:
.9eac	20 8e 80	jsr $808e		jsr	AssembleGroup2
>9eaf	40					.byte $40
>9eb0	10					.byte $10
.9eb1					Assemble_bpl:
.9eb1	20 df 80	jsr $80df		jsr	AssembleGroup3
>9eb4	10					.byte $10
.9eb5					Assemble_bmi:
.9eb5	20 df 80	jsr $80df		jsr	AssembleGroup3
>9eb8	30					.byte $30
.9eb9					Assemble_bvc:
.9eb9	20 df 80	jsr $80df		jsr	AssembleGroup3
>9ebc	50					.byte $50
.9ebd					Assemble_bvs:
.9ebd	20 df 80	jsr $80df		jsr	AssembleGroup3
>9ec0	70					.byte $70
.9ec1					Assemble_bcc:
.9ec1	20 df 80	jsr $80df		jsr	AssembleGroup3
>9ec4	90					.byte $90
.9ec5					Assemble_bcs:
.9ec5	20 df 80	jsr $80df		jsr	AssembleGroup3
>9ec8	b0					.byte $b0
.9ec9					Assemble_bne:
.9ec9	20 df 80	jsr $80df		jsr	AssembleGroup3
>9ecc	d0					.byte $d0
.9ecd					Assemble_beq:
.9ecd	20 df 80	jsr $80df		jsr	AssembleGroup3
>9ed0	f0					.byte $f0
.9ed1					Assemble_bra:
.9ed1	20 df 80	jsr $80df		jsr	AssembleGroup3
>9ed4	80					.byte $80
.9ed5					Assemble_brk:
.9ed5	20 15 81	jsr $8115		jsr	AssembleGroup4
>9ed8	00					.byte $00
.9ed9					Assemble_php:
.9ed9	20 15 81	jsr $8115		jsr	AssembleGroup4
>9edc	08					.byte $08
.9edd					Assemble_clc:
.9edd	20 15 81	jsr $8115		jsr	AssembleGroup4
>9ee0	18					.byte $18
.9ee1					Assemble_plp:
.9ee1	20 15 81	jsr $8115		jsr	AssembleGroup4
>9ee4	28					.byte $28
.9ee5					Assemble_sec:
.9ee5	20 15 81	jsr $8115		jsr	AssembleGroup4
>9ee8	38					.byte $38
.9ee9					Assemble_rti:
.9ee9	20 15 81	jsr $8115		jsr	AssembleGroup4
>9eec	40					.byte $40
.9eed					Assemble_pha:
.9eed	20 15 81	jsr $8115		jsr	AssembleGroup4
>9ef0	48					.byte $48
.9ef1					Assemble_cli:
.9ef1	20 15 81	jsr $8115		jsr	AssembleGroup4
>9ef4	58					.byte $58
.9ef5					Assemble_phy:
.9ef5	20 15 81	jsr $8115		jsr	AssembleGroup4
>9ef8	5a					.byte $5a
.9ef9					Assemble_rts:
.9ef9	20 15 81	jsr $8115		jsr	AssembleGroup4
>9efc	60					.byte $60
.9efd					Assemble_pla:
.9efd	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f00	68					.byte $68
.9f01					Assemble_sei:
.9f01	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f04	78					.byte $78
.9f05					Assemble_ply:
.9f05	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f08	7a					.byte $7a
.9f09					Assemble_dey:
.9f09	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f0c	88					.byte $88
.9f0d					Assemble_txa:
.9f0d	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f10	8a					.byte $8a
.9f11					Assemble_tya:
.9f11	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f14	98					.byte $98
.9f15					Assemble_txs:
.9f15	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f18	9a					.byte $9a
.9f19					Assemble_tay:
.9f19	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f1c	a8					.byte $a8
.9f1d					Assemble_tax:
.9f1d	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f20	aa					.byte $aa
.9f21					Assemble_clv:
.9f21	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f24	b8					.byte $b8
.9f25					Assemble_tsx:
.9f25	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f28	ba					.byte $ba
.9f29					Assemble_iny:
.9f29	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f2c	c8					.byte $c8
.9f2d					Assemble_dex:
.9f2d	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f30	ca					.byte $ca
.9f31					Assemble_cld:
.9f31	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f34	d8					.byte $d8
.9f35					Assemble_phx:
.9f35	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f38	da					.byte $da
.9f39					Assemble_stp:
.9f39	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f3c	db					.byte $db
.9f3d					Assemble_inx:
.9f3d	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f40	e8					.byte $e8
.9f41					Assemble_nop:
.9f41	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f44	ea					.byte $ea
.9f45					Assemble_sed:
.9f45	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f48	f8					.byte $f8
.9f49					Assemble_plx:
.9f49	20 15 81	jsr $8115		jsr	AssembleGroup4
>9f4c	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f4d					DecimalScalarTable:
>9f4d	66 66 66 66				.dword $66666666 ; 0.1
>9f51	de					.byte $de
>9f52	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f56	db					.byte $db
>9f57	4c 37 89 41				.dword $4189374c ; 0.001
>9f5b	d8					.byte $d8
>9f5c	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f60	d4					.byte $d4
>9f61	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f65	d1					.byte $d1
>9f66	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f6a	ce					.byte $ce
>9f6b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f6f	ca					.byte $ca
>9f70	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f74	c7					.byte $c7
>9f75	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f79	c4					.byte $c4
>9f7a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f7e	c0					.byte $c0
>9f7f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f83	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f84					SyntaxError:
.9f84	a9 02		lda #$02		lda	#2
.9f86	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f89					RangeError:
.9f89	a9 04		lda #$04		lda	#4
.9f8b	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f8e					TypeError:
.9f8e	a9 05		lda #$05		lda	#5
.9f90	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f93					ArgumentError:
.9f93	a9 07		lda #$07		lda	#7
.9f95	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f98					NotDoneError:
.9f98	a9 0c		lda #$0c		lda	#12
.9f9a	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f9d					ErrorText:
>9f9d	42 72 65 61 6b 00			.text	"Break",0
>9fa3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fab	72 72 6f 72 00
>9fb0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fb8	20 62 79 20 7a 65 72 6f 00
>9fc1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fc9	61 6e 67 65 00
>9fce	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fd6	6d 61 74 63 68 00
>9fdc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fe4	65 6d 6f 72 79 00
>9fea	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ff2	61 72 67 75 6d 65 6e 74 00
>9ffb	53 74 6f 70 00				.text	"Stop",0
>a000	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a008	6f 6f 20 6c 6f 6e 67 00
>a010	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a018	6e 20 66 61 69 6c 65 64 00
>a021	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a029	61 74 61 00
>a02d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a035	65 6e 74 65 64 00
>a03b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a043	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a04f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a057	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a064	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a06c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a079	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a081	68 6f 75 74 20 57 68 69 6c 65 00
>a08c	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a094	68 6f 75 74 20 46 6f 72 00
>a09d	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0a5	61 63 6b 20 66 75 6c 6c 00
>a0ae	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0b6	75 63 74 75 72 65 00
>a0bd	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0c5	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0d2	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0da	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0e8	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0f0	7a 65 00
>a0f3	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a0fb	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a103	42 75 69 6c 74 20 57 65			.text "Built Wednesday 16-Nov-2022. Build 3059."
>a10b	64 6e 65 73 64 61 79 20 31 36 2d 4e 6f 76 2d 32
>a11b	30 32 32 2e 20 42 75 69 6c 64 20 33 30 35 39 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a12b					MemoryDeleteLine:
.a12b	20 4a a1	jsr $a14a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a12e	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a130	a8		tay				tay
.a131					_MDDLLoop:
.a131	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a133	92 30		sta ($30)			sta 	(codePtr)
.a135	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a137	c5 3a		cmp $3a				cmp 	zTemp2
.a139	d0 07		bne $a142			bne 	_MDLDLNext
.a13b	a5 31		lda $31				lda 	codePtr+1
.a13d	c5 3b		cmp $3b				cmp 	zTemp2+1
.a13f	d0 01		bne $a142			bne 	_MDLDLNext
.a141					_MDDLExit:
.a141	60		rts				rts
.a142					_MDLDLNext:
.a142	e6 30		inc $30				inc 	codePtr						; next byte
.a144	d0 eb		bne $a131			bne 	_MDDLLoop
.a146	e6 31		inc $31				inc 	codePtr+1
.a148	80 e7		bra $a131			bra 	_MDDLLoop
.a14a					IMemoryFindEnd:
.a14a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a14c	85 3a		sta $3a				sta 	0+zTemp2
.a14e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a150	85 3b		sta $3b				sta 	1+zTemp2
.a152					_MDLFELoop:
.a152	b2 3a		lda ($3a)			lda 	(zTemp2)
.a154	f0 0b		beq $a161			beq 	_MDLFEExit
.a156	18		clc				clc
.a157	65 3a		adc $3a				adc 	zTemp2
.a159	85 3a		sta $3a				sta 	zTemp2
.a15b	90 f5		bcc $a152			bcc 	_MDLFELoop
.a15d	e6 3b		inc $3b				inc 	zTemp2+1
.a15f	80 f1		bra $a152			bra 	_MDLFELoop
.a161					_MDLFEExit:
.a161	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a162					MemoryInsertLine:
.a162	08		php				php
.a163	20 4a a1	jsr $a14a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a166	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a168	1a		inc a				inc 	a
.a169	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a16b	b0 36		bcs $a1a3			bcs 	_MDLIError
.a16d	28		plp				plp
.a16e	90 08		bcc $a178			bcc 	_MDLIFound
.a170	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a172	85 30		sta $30				sta 	codePtr
.a174	a5 3b		lda $3b				lda 	zTemp2+1
.a176	85 31		sta $31				sta 	codePtr+1
.a178					_MDLIFound:
.a178	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a17b	a8		tay				tay
.a17c					_MDLIInsert:
.a17c	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a17e	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a180	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a182	c5 3a		cmp $3a				cmp 	zTemp2
.a184	d0 06		bne $a18c			bne 	_MDLINext
.a186	a5 31		lda $31				lda 	codePtr+1
.a188	c5 3b		cmp $3b				cmp 	zTemp2+1
.a18a	f0 0a		beq $a196			beq 	_MDLIHaveSpace
.a18c					_MDLINext:
.a18c	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a18e	d0 02		bne $a192			bne 	_MDLINoBorrow
.a190	c6 3b		dec $3b				dec 	zTemp2+1
.a192					_MDLINoBorrow:
.a192	c6 3a		dec $3a				dec 	zTemp2
.a194	80 e6		bra $a17c			bra 	_MDLIInsert
.a196					_MDLIHaveSpace:
.a196	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.a199	88		dey				dey 								; from offset-1 to 0
.a19a					_MDLICopy:
.a19a	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.a19d	91 30		sta ($30),y			sta 	(codePtr),y
.a19f	88		dey				dey
.a1a0	10 f8		bpl $a19a			bpl 	_MDLICopy
.a1a2	60		rts				rts
.a1a3					_MDLIError:
.a1a3	a9 06		lda #$06		lda	#6
.a1a5	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a1a8					MDLAppendLine:
.a1a8	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1aa	85 36		sta $36				sta 	zTemp0
.a1ac	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ae	85 38		sta $38				sta 	0+zTemp1
.a1b0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1b2	85 39		sta $39				sta 	1+zTemp1
.a1b4	b2 38		lda ($38)			lda 	(zTemp1)
.a1b6	d0 0a		bne $a1c2			bne 	_MDLANoInitialise
.a1b8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ba	8d 2a 06	sta $062a			sta 	0+AppendPointer
.a1bd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1bf	8d 2b 06	sta $062b			sta 	1+AppendPointer
.a1c2					_MDLANoInitialise:
.a1c2	18		clc				clc
.a1c3	ad 2a 06	lda $062a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1c6	85 38		sta $38				sta 	zTemp1
.a1c8	72 36		adc ($36)			adc 	(zTemp0)
.a1ca	8d 2a 06	sta $062a			sta 	AppendPointer
.a1cd	ad 2b 06	lda $062b			lda 	AppendPointer+1
.a1d0	85 39		sta $39				sta 	zTemp1+1
.a1d2	69 00		adc #$00			adc 	#0
.a1d4	8d 2b 06	sta $062b			sta 	AppendPointer+1
.a1d7	a0 00		ldy #$00			ldy 	#0
.a1d9					_MDLACopy:
.a1d9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1db	91 38		sta ($38),y			sta 	(zTemp1),y
.a1dd	c8		iny				iny
.a1de	98		tya				tya
.a1df	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1e1	d0 f6		bne $a1d9			bne 	_MDLACopy
.a1e3	a9 00		lda #$00			lda 	#0 							; end of program.
.a1e5	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e7	60		rts				rts
.062a					AppendPointer:
>062a							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1e8					MemoryNew:
.a1e8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ea	85 30		sta $30				sta 	codePtr
.a1ec	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1ee	85 31		sta $31				sta 	codePtr+1
.a1f0	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1f2	92 30		sta ($30)			sta 	(codePtr)
.a1f4	60		rts				rts
.a1f5					MemoryInline:
.a1f5	98		tya				tya 								; put address into stack,x
.a1f6	18		clc				clc
.a1f7	65 30		adc $30				adc 	codePtr
.a1f9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1fc	a5 31		lda $31				lda 	codePtr+1
.a1fe	69 00		adc #$00			adc 	#0
.a200	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a203	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a206	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a209	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a20a					MemorySearch:
.a20a	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a20c	86 37		stx $37				stx 	zTemp0+1
.a20e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a210	85 30		sta $30				sta 	codePtr
.a212	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a214	85 31		sta $31				sta 	codePtr+1
.a216					_MTAXLoop:
.a216	b2 30		lda ($30)			lda 	(codePtr)
.a218	18		clc				clc
.a219	f0 21		beq $a23c			beq 	_MTAXExit 					; reached end, exit with CC.
.a21b	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a21d	b1 30		lda ($30),y			lda 	(codePtr),y
.a21f	38		sec				sec
.a220	e5 36		sbc $36				sbc 	zTemp0
.a222	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a224	c8		iny				iny 								; do the MSB
.a225	b1 30		lda ($30),y			lda 	(codePtr),y
.a227	e5 37		sbc $37				sbc 	zTemp0+1
.a229	05 38		ora $38				ora 	zTemp1
.a22b	f0 0f		beq $a23c			beq 	_MTAXExit	 				; found
.a22d	b0 0d		bcs $a23c			bcs 	_MTAXExit 					; current < required exit
.a22f	18		clc				clc
.a230	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a232	65 30		adc $30				adc 	codePtr
.a234	85 30		sta $30				sta 	codePtr
.a236	90 02		bcc $a23a			bcc 	_CREExit
.a238	e6 31		inc $31				inc 	codePtr+1
.a23a					_CREExit:
.a23a	80 da		bra $a216			bra 	_MTAXLoop
.a23c					_MTAXExit:
.a23c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a23d					StackPushByte:
.a23d	48		pha				pha 								; save byte
.a23e	a5 34		lda $34				lda 	BasicStack
.a240	d0 09		bne $a24b			bne 	_SPBNoBorrow
.a242	c6 35		dec $35				dec 	BasicStack+1
.a244	48		pha				pha
.a245	a5 35		lda $35				lda 	BasicStack+1
.a247	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a249	90 06		bcc $a251			bcc 	_SPBMemory
.a24b					_SPBNoBorrow:
.a24b	c6 34		dec $34				dec 	BasicStack
.a24d	68		pla				pla 								; get back and write
.a24e	92 34		sta ($34)			sta 	(BasicStack)
.a250	60		rts				rts
.a251					_SPBMemory:
.a251	a9 12		lda #$12		lda	#18
.a253	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a256					StackPopByte:
.a256	b2 34		lda ($34)			lda 	(BasicStack)
.a258	e6 34		inc $34				inc 	BasicStack
.a25a	d0 02		bne $a25e			bne 	_SPBNoCarry
.a25c	e6 35		inc $35				inc 	BasicStack+1
.a25e					_SPBNoCarry:
.a25e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a25f					StackOpen:
.a25f	48		pha				pha 								; save frame byte
.a260	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a262	0a		asl a				asl 	a 							; claim twice this for storage
.a263	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a265	38		sec				sec 								; so basically subtracting from
.a266	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a268	85 34		sta $34				sta 	basicStack
.a26a	b0 08		bcs $a274			bcs 	_SONoBorrow
.a26c	c6 35		dec $35				dec 	basicStack+1
.a26e	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a270	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a272	90 04		bcc $a278			bcc 	_SOMemory
.a274					_SONoBorrow:
.a274	68		pla				pla 								; get marker back and write at TOS
.a275	92 34		sta ($34)			sta 	(basicStack)
.a277	60		rts				rts
.a278					_SOMemory:
.a278	a9 12		lda #$12		lda	#18
.a27a	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a27d					StackClose:
.a27d	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a27f	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a281	0a		asl a				asl 	a 							; claim twice this.
.a282	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a284	85 34		sta $34				sta 	basicStack
.a286	90 02		bcc $a28a			bcc 	_SCExit
.a288	e6 35		inc $35				inc 	basicStack+1
.a28a					_SCExit:
.a28a	60		rts				rts
.a28b					StackCheckFrame:
.a28b	48		pha				pha
.a28c					_StackRemoveLocals:
.a28c	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a28e	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a290	b0 05		bcs $a297			bcs 	_SCNoLocal
.a292	20 03 88	jsr $8803			jsr 	LocalPopValue
.a295	80 f5		bra $a28c			bra 	_StackRemoveLocals
.a297					_SCNoLocal:
.a297	68		pla				pla
.a298	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a29a	29 f0		and #$f0			and 	#$F0 						; check type bits
.a29c	d0 01		bne $a29f			bne 	_SCFError 					; different, we have structures mixed up
.a29e	60		rts				rts
.a29f					_SCFError:
.a29f	8a		txa				txa 								; report error X
.a2a0	4c 37 8d	jmp $8d37			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a2a3					STKSaveCodePosition:
.a2a3	5a		phy				phy
.a2a4	98		tya				tya 								; save Y
.a2a5	a0 05		ldy #$05			ldy 	#5
.a2a7	91 34		sta ($34),y			sta 	(basicStack),y
.a2a9	88		dey				dey 								; save Code Pointer
.a2aa					_STKSaveLoop:
.a2aa	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a2ad	91 34		sta ($34),y			sta 	(basicStack),y
.a2af	88		dey				dey
.a2b0	d0 f8		bne $a2aa			bne 	_STKSaveLoop
.a2b2	7a		ply				ply
.a2b3	60		rts				rts
.a2b4					STKLoadCodePosition:
.a2b4	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a2b6					_STKLoadLoop:
.a2b6	b1 34		lda ($34),y			lda 	(basicStack),y
.a2b8	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a2bb	c8		iny				iny
.a2bc	c0 05		cpy #$05			cpy 	#5
.a2be	d0 f6		bne $a2b6			bne 	_STKLoadLoop
.a2c0	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2c2	a8		tay				tay
.a2c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2c4					StackReset:
.a2c4	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2c6	85 34		sta $34				sta 	0+basicStack
.a2c8	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2ca	85 35		sta $35				sta 	1+basicStack
.a2cc	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2ce	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a2d1					StringConcrete:
.a2d1	5a		phy				phy 								; save position on stack
.a2d2	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a2d5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a2d8	85 38		sta $38				sta 	zTemp1
.a2da	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2dd	85 39		sta $39				sta 	zTemp1+1
.a2df	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a2e1					_SALength:
.a2e1	c8		iny				iny
.a2e2	b1 38		lda ($38),y			lda 	(zTemp1),y
.a2e4	d0 fb		bne $a2e1			bne 	_SALength
.a2e6	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a2e8	b0 3f		bcs $a329			bcs 	_SALengthError
.a2ea	98		tya				tya 				 				; length of the new string
.a2eb	18		clc				clc
.a2ec	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a2ee	90 02		bcc $a2f2			bcc 	_SAHaveLength
.a2f0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a2f2					_SAHaveLength:
.a2f2	48		pha				pha 								; save length.
.a2f3	38		sec				sec
.a2f4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a2f6	6d 8e 04	adc $048e			adc 	StringMemory
.a2f9	8d 8e 04	sta $048e			sta 	StringMemory
.a2fc	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a2fe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a301	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a303	6d 8f 04	adc $048f			adc 	StringMemory+1
.a306	8d 8f 04	sta $048f			sta 	StringMemory+1
.a309	85 3b		sta $3b				sta 	zTemp2+1
.a30b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a30e	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a30f	38		sec				sec
.a310	e9 03		sbc #$03			sbc 	#3
.a312	92 3a		sta ($3a)			sta 	(zTemp2)
.a314	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a316	a0 01		ldy #$01			ldy 	#1
.a318	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a31a					_SACopyNewString:
.a31a	a0 00		ldy #$00			ldy 	#0
.a31c					_SACopyNSLoop:
.a31c	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a31e	c8		iny				iny 								; write two on in string storage
.a31f	c8		iny				iny
.a320	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a322	88		dey				dey 								; this makes it one one.
.a323	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a325	d0 f5		bne $a31c			bne 	_SACopyNSLoop
.a327	7a		ply				ply
.a328	60		rts				rts
.a329					_SALengthError:
.a329	a9 09		lda #$09		lda	#9
.a32b	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a32e					StringSystemInitialise:
.a32e	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a330	8d 8e 04	sta $048e			sta 	0+StringMemory
.a333	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a335	8d 8f 04	sta $048f			sta 	1+StringMemory
.a338	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a33b	60		rts				rts
.a33c					StringSpaceInitialise:
.a33c	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a33f	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a341	8d 90 04	sta $0490			sta 	StringInitialised
.a344	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a347	8d 91 04	sta $0491			sta 	StringTempPointer
.a34a	ad 8f 04	lda $048f			lda 	StringMemory+1
.a34d	3a		dec a				dec 	a
.a34e	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a351	60		rts				rts
.a352					StringTempAllocate:
.a352	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a354	b0 35		bcs $a38b			bcs 	_STALength
.a356	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a359	30 05		bmi $a360			bmi 	_STAAllocate
.a35b	48		pha				pha 								; save value to subtract.
.a35c	20 3c a3	jsr $a33c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a35f	68		pla				pla 								; restore it
.a360					_STAAllocate:
.a360	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a362	18		clc				clc  								; deliberate allows one more
.a363	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a366	8d 91 04	sta $0491			sta 	StringTempPointer
.a369	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a36c	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a36e	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a371	69 ff		adc #$ff			adc 	#$FF
.a373	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a376	85 3d		sta $3d				sta 	zsTemp+1
.a378	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a37b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a37e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a381	a9 10		lda #$10			lda 	#NSTString
.a383	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a386	a9 00		lda #$00			lda 	#0 							; clear the target string
.a388	92 3c		sta ($3c)			sta 	(zsTemp)
.a38a	60		rts				rts
.a38b					_STALength:
.a38b	a9 09		lda #$09		lda	#9
.a38d	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a390					StringTempWrite:
.a390	48		pha				pha
.a391	92 3c		sta ($3c)			sta 	(zsTemp)
.a393	e6 3c		inc $3c				inc 	zsTemp
.a395	d0 02		bne $a399			bne 	_STWNoCarry
.a397	e6 3d		inc $3d				inc 	zsTemp+1
.a399					_STWNoCarry:
.a399	a9 00		lda #$00			lda 	#0
.a39b	92 3c		sta ($3c)			sta 	(zsTemp)
.a39d	68		pla				pla
.a39e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
.a39f					UnaryEvent:
.a39f	fa		plx				plx
.a3a0	20 13 a7	jsr $a713			jsr 	TimerToStackX 				; timer in +0
.a3a3	e8		inx				inx  								; put reference into +1
.a3a4	20 c0 97	jsr $97c0			jsr 	EvaluateTerm
.a3a7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a3aa	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a3ac	d0 57		bne $a405			bne 	_UEType
.a3ae	e8		inx				inx 								; put the step in +2
.a3af	20 26 8d	jsr $8d26			jsr 	CheckComma
.a3b2	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.a3b5	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a3b8	ca		dex				dex
.a3b9	ca		dex				dex
.a3ba	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a3bd	85 36		sta $36				sta 	zTemp0
.a3bf	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3c2	85 37		sta $37				sta 	zTemp0+1
.a3c4	5a		phy				phy
.a3c5	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a3c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3c9	30 36		bmi $a401			bmi 	_UEFalse 					; exit if signed.
.a3cb	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a3cd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3d0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3d2	c8		iny				iny
.a3d3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3d6	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3d8	c8		iny				iny
.a3d9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3dc	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3de	90 21		bcc $a401			bcc 	_UEFalse 					; no, return FALSE.
.a3e0	18		clc				clc
.a3e1	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a3e3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3e6	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a3e9	91 36		sta ($36),y			sta 	(zTemp0),y
.a3eb	c8		iny				iny
.a3ec	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3ef	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a3f2	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f4	c8		iny				iny
.a3f5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3f8	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a3fb	91 36		sta ($36),y			sta 	(zTemp0),y
.a3fd	7a		ply				ply
.a3fe	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.a401					_UEFalse:
.a401	7a		ply				ply 								; restore Y
.a402	4c b0 8d	jmp $8db0			jmp 	ReturnFalse 				; and return False
.a405					_UEType:
.a405	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.a408					RectangleCommand:
.a408	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a40a	80 02		bra $a40e			bra 	ShapeDrawCmd
.a40c					CircleCommand:
.a40c	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a40e					ShapeDrawCmd:
.a40e	20 9c a4	jsr $a49c			jsr 	RunGraphicsCommand
.a411					ShapeDraw:
.a411	0d 2d 06	ora $062d			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a414	4c 90 a4	jmp $a490			jmp 	ExecuteGraphicCommand	 	; and complete
.a417					SpriteCommand:
.a417	a2 00		ldx #$00			ldx 	#0
.a419	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get image number.
.a41c	5a		phy				phy
.a41d	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a41f	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a422	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a424	b0 0d		bcs $a433			bcs 	_SCRange
.a426	a0 ff		ldy #$ff			ldy 	#255
.a428	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a42b	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a42d	7a		ply				ply
.a42e	20 9c a4	jsr $a49c			jsr 	RunGraphicsCommand
.a431	80 5d		bra $a490			bra 	ExecuteGraphicCommand
.a433					_SCRange:
.a433	4c 89 9f	jmp $9f89			jmp 	RangeError
.a436					ImageCommand:
.a436	a2 00		ldx #$00			ldx 	#0
.a438	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get image number.
.a43b	20 9c a4	jsr $a49c			jsr 	RunGraphicsCommand
.a43e					ImageRunDraw:
.a43e	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a440	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a443	ad 33 06	lda $0633			lda 	gxDrawScale
.a446	0a		asl a				asl 	a
.a447	0a		asl a				asl 	a
.a448	0a		asl a				asl 	a
.a449	a8		tay				tay
.a44a	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a44c	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a44f	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a452	60		rts				rts
.a453					TextCommand:
.a453	a2 00		ldx #$00			ldx 	#0
.a455	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get text
.a458	20 9c a4	jsr $a49c			jsr 	RunGraphicsCommand
.a45b					TextRunDraw:
.a45b	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a45d	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a460	a0 00		ldy #$00			ldy 	#0
.a462					_IRDLoop:
.a462	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a465	85 37		sta $37				sta 	zTemp0+1
.a467	ad 08 04	lda $0408			lda 	NSMantissa0
.a46a	85 36		sta $36				sta 	zTemp0
.a46c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a46e	f0 13		beq $a483			beq 	_IRDExit
.a470	5a		phy				phy									; save string pos
.a471	48		pha				pha 								; save char
.a472	ad 33 06	lda $0633			lda 	gxDrawScale 				; get scale
.a475	0a		asl a				asl 	a
.a476	0a		asl a				asl 	a
.a477	0a		asl a				asl 	a
.a478	a8		tay				tay
.a479	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a47b	fa		plx				plx 								; char to draw
.a47c	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a47f	7a		ply				ply 								; restore string pos
.a480	c8		iny				iny
.a481	90 df		bcc $a462			bcc 	_IRDLoop 					; go back if no error.
.a483					_IRDExit:
.a483	60		rts				rts
.a484					PlotCommand:
.a484	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a486	20 9c a4	jsr $a49c			jsr 	RunGraphicsCommand
.a489	80 05		bra $a490			bra 	ExecuteGraphicCommand
.a48b					LineCommand:
.a48b	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a48d	20 9c a4	jsr $a49c			jsr 	RunGraphicsCommand
.a490					ExecuteGraphicCommand:
.a490	0d 2c 06	ora $062c			ora 	gxCommandID 				; make a full command
.a493	20 56 a9	jsr $a956			jsr 	GXGraphicDraw 				; draw it and exit
.a496	b0 01		bcs $a499			bcs 	_EGCError
.a498	60		rts				rts
.a499					_EGCError:
.a499	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.a49c					RunGraphicsCommand:
.a49c	8d 2c 06	sta $062c			sta 	gxCommandID					; save TODO graphics command.
.a49f	68		pla				pla 								; pop handler address
.a4a0	fa		plx				plx
.a4a1	1a		inc a				inc 	a
.a4a2	d0 01		bne $a4a5			bne 	_RGINoCarry
.a4a4	e8		inx				inx
.a4a5					_RGINoCarry:
.a4a5	8d 31 06	sta $0631			sta 	GXHandler
.a4a8	8e 32 06	stx $0632			stx 	GXHandler+1
.a4ab					_RGICommandLoop:
.a4ab	b1 30		lda ($30),y			lda 	(codePtr),y
.a4ad	c8		iny				iny
.a4ae	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a4b0	f0 53		beq $a505			beq 	_RGI_To
.a4b2	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a4b4	f0 55		beq $a50b			beq 	_RGI_Here
.a4b6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a4b8	f0 3d		beq $a4f7			beq 	_RGI_Exit
.a4ba	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a4bc	f0 39		beq $a4f7			beq 	_RGI_Exit
.a4be	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a4c0	f0 3e		beq $a500			beq 	_RGI_Frame
.a4c2	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a4c4	f0 33		beq $a4f9			beq 	_RGI_Solid
.a4c6	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a4c8	f0 4b		beq $a515			beq 	_RGI_By
.a4ca	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a4cc	f0 17		beq $a4e5			beq 	_RGI_Move2
.a4ce	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a4d0	f0 65		beq $a537			beq 	_RGI_Dim
.a4d2	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a4d4	f0 78		beq $a54e			beq 	_RGI_Colour
.a4d6	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a4d8	f0 74		beq $a54e			beq 	_RGI_Colour
.a4da	ae 2c 06	ldx $062c			ldx 	gxCommandID
.a4dd	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a4df	d0 03		bne $a4e4			bne 	_RGI_Move 					; move
.a4e1	4c 78 a5	jmp $a578			jmp		_RGI_SpriteInstructions
.a4e4					_RGI_Move:
.a4e4	88		dey				dey 								; unpick get.
.a4e5					_RGI_Move2:
.a4e5	20 9e a5	jsr $a59e			jsr 	GCGetCoordinatePair 		; move to here
.a4e8	20 c5 a5	jsr $a5c5			jsr 	GCCopyPairToStore 			; save
.a4eb	5a		phy				phy
.a4ec	20 bb a5	jsr $a5bb			jsr 	GCLoadAXY 					; load in
.a4ef	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4f1	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a4f4	7a		ply				ply
.a4f5	80 b4		bra $a4ab			bra 	_RGICommandLoop 			; and go round
.a4f7					_RGI_Exit:
.a4f7	88		dey				dey 								; unpick : / EOL
.a4f8	60		rts				rts
.a4f9					_RGI_Solid:
.a4f9	a9 02		lda #$02			lda 	#2
.a4fb	8d 2d 06	sta $062d			sta 	gxFillSolid
.a4fe	80 ab		bra $a4ab			bra 	_RGICommandLoop
.a500					_RGI_Frame:
.a500	9c 2d 06	stz $062d			stz 	gxFillSolid
.a503	80 a6		bra $a4ab			bra 	_RGICommandLoop
.a505					_RGI_To:
.a505	20 9e a5	jsr $a59e			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a508	20 c5 a5	jsr $a5c5			jsr 	GCCopyPairToStore
.a50b					_RGI_Here:
.a50b	5a		phy				phy
.a50c	20 bb a5	jsr $a5bb			jsr 	GCLoadAXY 					; load it into AXY
.a50f	20 75 a5	jsr $a575			jsr 	_RGICallHandler 			; go do whatever it is.
.a512	7a		ply				ply
.a513	80 96		bra $a4ab			bra 	_RGICommandLoop 			; and go round
.a515					_RGI_By:
.a515	20 ab a5	jsr $a5ab			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a518	18		clc				clc
.a519	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a51c	6d 2e 06	adc $062e			adc 	gxxPos
.a51f	8d 2e 06	sta $062e			sta 	gxXPos
.a522	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a525	6d 2f 06	adc $062f			adc 	gxxPos+1
.a528	8d 2f 06	sta $062f			sta 	gxXPos+1
.a52b	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a52e	18		clc				clc
.a52f	6d 30 06	adc $0630			adc 	gxYPos
.a532	8d 30 06	sta $0630			sta 	gxYPos
.a535	80 d4		bra $a50b			bra 	_RGI_Here
.a537					_RGI_Dim:
.a537	a2 01		ldx #$01			ldx	 	#1
.a539	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a53c	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a53f	c9 00		cmp #$00			cmp 	#0
.a541	f0 2f		beq $a572			beq 	_RGIRange
.a543	c9 09		cmp #$09			cmp 	#8+1
.a545	b0 2b		bcs $a572			bcs		_RGIRange
.a547	3a		dec a				dec 	a
.a548	8d 33 06	sta $0633			sta 	gxDrawScale
.a54b	4c ab a4	jmp $a4ab			jmp 	_RGICommandLoop
.a54e					_RGI_Colour:
.a54e	a2 01		ldx #$01			ldx 	#1 							; colour
.a550	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a553	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a555	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.a558	b1 30		lda ($30),y			lda 	(codePtr),y
.a55a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a55c	d0 04		bne $a562			bne 	_RGICDefaultMode
.a55e	c8		iny				iny
.a55f	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a562					_RGICDefaultMode:
.a562	5a		phy				phy
.a563	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a565	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a568	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a56b	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a56e	7a		ply				ply
.a56f	4c ab a4	jmp $a4ab			jmp 	_RGICommandLoop 			; and go round
.a572					_RGIRange:
.a572	4c 89 9f	jmp $9f89			jmp 	RangeError
.a575					_RGICallHandler:
.a575	6c 31 06	jmp ($0631)			jmp 	(GXHandler)
.a578					_RGI_SpriteInstructions:
.a578	c9 be		cmp #$be			cmp 	#KWD_OFF
.a57a	f0 07		beq $a583			beq 	_RGISpriteOff
.a57c	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a57e	f0 13		beq $a593			beq 	_RGISetImage
.a580	4c e4 a4	jmp $a4e4			jmp 	_RGI_Move
.a583					_RGISpriteOff:
.a583	5a		phy				phy
.a584	a0 01		ldy #$01			ldy 	#1
.a586	a2 00		ldx #$00			ldx 	#0
.a588					_RGIDoCommandLoop:
.a588	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a58a	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a58d	7a		ply				ply
.a58e	b0 e2		bcs $a572			bcs 	_RGIRange
.a590	4c ab a4	jmp $a4ab			jmp 	_RGICommandLoop
.a593					_RGISetImage:
.a593	a2 01		ldx #$01			ldx 	#1
.a595	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a598	5a		phy				phy
.a599	aa		tax				tax
.a59a	a0 00		ldy #$00			ldy 	#0
.a59c	80 ea		bra $a588			bra 	_RGIDoCommandLoop
.a59e					GCGetCoordinatePair:
.a59e	a2 01		ldx #$01			ldx 	#1
.a5a0	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.a5a3	20 26 8d	jsr $8d26			jsr 	CheckComma
.a5a6	e8		inx				inx
.a5a7	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.a5aa	60		rts				rts
.a5ab					GCSignedCoordinatePair:
.a5ab	a2 01		ldx #$01			ldx 	#1
.a5ad	20 67 9d	jsr $9d67			jsr 	Evaluate16BitIntegerSigned
.a5b0	20 26 8d	jsr $8d26			jsr 	CheckComma
.a5b3	e8		inx				inx
.a5b4	20 67 9d	jsr $9d67			jsr 	Evaluate16BitIntegerSigned
.a5b7	60		rts				rts
.a5b8					_GCCPRange:
.a5b8	4c 89 9f	jmp $9f89			jmp 	RangeError
.a5bb					GCLoadAXY:
.a5bb	ad 2f 06	lda $062f			lda 	gxXPos+1
.a5be	ae 2e 06	ldx $062e			ldx 	gxXPos
.a5c1	ac 30 06	ldy $0630			ldy 	gxYPos
.a5c4	60		rts				rts
.a5c5					GCCopyPairToStore:
.a5c5	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a5c8	8d 2e 06	sta $062e			sta 	gxXPos
.a5cb	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a5ce	8d 2f 06	sta $062f			sta 	gxXPos+1
.a5d1	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a5d4	8d 30 06	sta $0630			sta 	gxYPos
.a5d7	60		rts				rts
.062c					gxCommandID:
>062c							.fill 	1
.062d					gxFillSolid:
>062d							.fill 	1
.062e					gxXPos:
>062e							.fill 	2
.0630					gxYPos:
>0630							.fill 	1
.0631					gxHandler:
>0631							.fill 	2
.0633					gxDrawScale:
>0633							.fill 	1
.a5d8					BitmapCtrl:
.a5d8	b1 30		lda ($30),y			lda 	(codePtr),y
.a5da	c8		iny				iny
.a5db	a2 01		ldx #$01			ldx 	#1
.a5dd	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a5df	f0 11		beq $a5f2			beq 	BitmapSwitch
.a5e1	ca		dex				dex
.a5e2	c9 be		cmp #$be			cmp 	#KWD_OFF
.a5e4	f0 0c		beq $a5f2			beq 	BitmapSwitch
.a5e6	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get the colour
.a5e9	5a		phy				phy
.a5ea	aa		tax				tax
.a5eb	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5ed	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a5f0	7a		ply				ply
.a5f1	60		rts				rts
.a5f2					BitmapSwitch:
.a5f2	5a		phy				phy
.a5f3	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5f5	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5f7	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a5fa	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5fc	a0 00		ldy #$00			ldy 	#0
.a5fe	a2 ff		ldx #$ff			ldx 	#$FF
.a600	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a603	9c 2d 06	stz $062d			stz 	gxFillSolid
.a606	9c 2e 06	stz $062e			stz 	gxXPos
.a609	9c 2f 06	stz $062f			stz 	gxXPos+1
.a60c	9c 30 06	stz $0630			stz 	gxYPos
.a60f	9c 33 06	stz $0633			stz 	gxDrawScale
.a612	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a614	a2 00		ldx #$00			ldx 	#0
.a616	a0 00		ldy #$00			ldy 	#0
.a618	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a61b	7a		ply				ply
.a61c	60		rts				rts
.a61d					SpritesCtrl:
.a61d	b1 30		lda ($30),y			lda 	(codePtr),y
.a61f	c8		iny				iny
.a620	a2 01		ldx #$01			ldx 	#1
.a622	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a624	f0 08		beq $a62e			beq 	SpriteSwitch
.a626	ca		dex				dex
.a627	c9 be		cmp #$be			cmp 	#KWD_OFF
.a629	f0 03		beq $a62e			beq 	SpriteSwitch
.a62b	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.a62e					SpriteSwitch:
.a62e	5a		phy				phy
.a62f	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a631	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a633	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a636	7a		ply				ply
.a637	60		rts				rts
.a638					GfxCommand:
.a638	a2 00		ldx #$00			ldx 	#0
.a63a	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; command
.a63d	20 26 8d	jsr $8d26			jsr 	CheckComma
.a640	e8		inx				inx
.a641	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; X
.a644	20 26 8d	jsr $8d26			jsr 	CheckComma
.a647	e8		inx				inx
.a648	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; Y
.a64b	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a64e	4a		lsr a				lsr 	a
.a64f	d0 16		bne $a667			bne 	_GfxError
.a651	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a654	b0 11		bcs $a667			bcs 	_GfxError 					; bit 7 should have been zero
.a656	5a		phy				phy 								; save pos
.a657	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a65a	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a65d	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a660	20 56 a9	jsr $a956			jsr 	GXGraphicDraw
.a663	b0 02		bcs $a667			bcs 	_GfxError
.a665	7a		ply				ply 								; restore pos and exit.
.a666	60		rts				rts
.a667					_GfxError:
.a667	4c 89 9f	jmp $9f89			jmp 	RangeError
.a66a					UnaryHit:
.a66a	fa		plx				plx
.a66b	a9 36		lda #$36			lda 	#zTemp0
.a66d	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a670	20 26 8d	jsr $8d26			jsr 	CheckComma
.a673	e8		inx				inx
.a674	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a677	20 1e 8d	jsr $8d1e			jsr		CheckRightBracket
.a67a	ca		dex				dex 								; fix back up again.
.a67b	da		phx				phx 								; save X/Y
.a67c	5a		phy				phy
.a67d	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a680	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a683	aa		tax				tax
.a684	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a686	20 56 a9	jsr $a956			jsr 	GXGraphicDraw 				; calculate result
.a689	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a68a	7a		ply				ply 								; restore XY
.a68b	fa		plx				plx
.a68c	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte 					; return the hit result
.a68f	60		rts				rts
.a690					UnaryJoyX:
.a690	18		clc				clc
.a691	80 01		bra $a694			bra 	JoyMain
.a693					UnaryJoyY:
.a693	38		sec				sec
.a694					JoyMain:
.a694	fa		plx				plx 								; get pos
.a695	08		php				php 								; save carry (set for Y)
.a696	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a699	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a69c	20 0f a9	jsr $a90f			jsr 	EXTReadController 			; read the controller.
.a69f	28		plp				plp
.a6a0	90 02		bcc $a6a4			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a6a2	4a		lsr a				lsr 	a
.a6a3	4a		lsr a				lsr 	a
.a6a4					_JMNoShift:
.a6a4	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a6a5	b0 0a		bcs $a6b1			bcs 	_JMIsRight
.a6a7	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a6a8	b0 04		bcs $a6ae			bcs 	_JMIsLeft
.a6aa	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; zero result
.a6ad	60		rts				rts
.a6ae					_JMIsLeft:
.a6ae	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.a6b1					_JMIsRight:
.a6b1	a9 01		lda #$01			lda 	#1
.a6b3	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.a6b6	60		rts				rts
.a6b7					UnaryJoyB:
.a6b7	fa		plx				plx 								; get pos
.a6b8	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6bb	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a6be	20 0f a9	jsr $a90f			jsr 	EXTReadController 			; read the controller.
.a6c1	4a		lsr a				lsr 	a
.a6c2	4a		lsr a				lsr 	a
.a6c3	4a		lsr a				lsr 	a
.a6c4	4a		lsr a				lsr 	a
.a6c5	29 01		and #$01			and 	#1
.a6c7	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.a6ca	60		rts				rts
.a6cb					PaletteCommand:
.a6cb	a2 00		ldx #$00			ldx 	#0
.a6cd	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; colour
.a6d0	20 26 8d	jsr $8d26			jsr 	CheckComma
.a6d3	e8		inx				inx
.a6d4	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; r
.a6d7	20 26 8d	jsr $8d26			jsr 	CheckComma
.a6da	e8		inx				inx
.a6db	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; g
.a6de	20 26 8d	jsr $8d26			jsr 	CheckComma
.a6e1	e8		inx				inx
.a6e2	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; b
.a6e5	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a6e8	85 36		sta $36				sta 	zTemp0
.a6ea	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6ec	85 37		sta $37				sta 	zTemp0+1
.a6ee	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6f0	26 37		rol $37				rol	 	zTemp0+1
.a6f2	06 36		asl $36				asl 	zTemp0
.a6f4	26 37		rol $37				rol	 	zTemp0+1
.a6f6	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6f8	85 01		sta $01				sta 	1
.a6fa	5a		phy				phy
.a6fb	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a6fe	92 36		sta ($36)			sta 	(zTemp0)
.a700	a0 01		ldy #$01			ldy 	#1
.a702	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a705	91 36		sta ($36),y			sta 	(zTemp0),y
.a707	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a70a	c8		iny				iny
.a70b	91 36		sta ($36),y			sta 	(zTemp0),y
.a70d	7a		ply				ply
.a70e	60		rts				rts
.a70f					UnaryTimer:
.a70f	fa		plx				plx
.a710	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a713					TimerToStackX:
.a713	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; zero result
.a716	64 01		stz $01				stz 	1 							; access I/O
.a718	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a71b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a71e	ad 5a d6	lda $d65a			lda 	$D65A
.a721	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a724	ad 5b d6	lda $d65b			lda 	$D65B
.a727	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a72a	60		rts				rts
.a72b					EXTPrintCharacter:
.a72b	48		pha				pha
.a72c	da		phx				phx
.a72d	5a		phy				phy
.a72e	a6 01		ldx $01				ldx 	1
.a730	da		phx				phx
.a731	ac 35 06	ldy $0635			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a734	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a736	30 48		bmi $a780			bmi 	_EXPCColour
.a738	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a73a	90 44		bcc $a780			bcc 	_EXPCControl
.a73c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a73e	86 01		stx $01				stx 	1
.a740	91 40		sta ($40),y			sta 	(EXTAddress),y
.a742	e6 01		inc $01				inc 	1 							; select colour memory
.a744	ad 36 06	lda $0636			lda 	EXTTextColour
.a747	91 40		sta ($40),y			sta 	(EXTAddress),y
.a749	c8		iny				iny 								; advance horizontal position
.a74a	8c 35 06	sty $0635			sty 	EXTColumn
.a74d	cc 37 06	cpy $0637			cpy 	EXTScreenWidth 				; reached RHS ?
.a750	90 5d		bcc $a7af			bcc 	_EXPCExit 					; no, then exit.
.a752					_EXPCCRLF:
.a752	ee 34 06	inc $0634			inc 	EXTRow  					; bump row
.a755	9c 35 06	stz $0635			stz 	EXTColumn 					; back to column 0
.a758	ad 34 06	lda $0634			lda 	EXTRow 						; check if reached the bottom ?
.a75b	cd 38 06	cmp $0638			cmp 	EXTScreenHeight 			; if so, then scroll.
.a75e	f0 18		beq $a778			beq 	_EXPCScroll
.a760	18		clc				clc 								; add width to address.
.a761	a5 40		lda $40				lda 	EXTAddress
.a763	6d 37 06	adc $0637			adc 	EXTScreenWidth
.a766	85 40		sta $40				sta 	EXTAddress
.a768	90 45		bcc $a7af			bcc 	_EXPCExit
.a76a	e6 41		inc $41				inc 	EXTAddress+1
.a76c	80 41		bra $a7af			bra 	_EXPCExit
.a76e					_EXPCLeft:
.a76e	ce 35 06	dec $0635			dec 	EXTColumn
.a771	10 3c		bpl $a7af			bpl 	_EXPCExit
.a773					_EXPCBegin:
.a773	9c 35 06	stz $0635			stz 	EXTColumn
.a776	80 37		bra $a7af			bra 	_EXPCExit
.a778					_EXPCScroll:
.a778	ce 34 06	dec $0634			dec 	EXTRow 						; the height-1 th line.
.a77b	20 1c a8	jsr $a81c			jsr 	EXTScreenScroll 			; scroll the screen
.a77e	80 2f		bra $a7af			bra 	_EXPCExit
.a780					_EXPCColour:
.a780					_EXPCControl:
.a780	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a782	b0 2b		bcs $a7af			bcs 	_EXPCExit
.a784	0a		asl a				asl 	a 							; double into X
.a785	aa		tax				tax
.a786	7c fa a7	jmp ($a7fa,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a789					_EXPCUp:
.a789	ad 34 06	lda $0634			lda 	EXTRow 						; already at top ?
.a78c	f0 21		beq $a7af			beq 	_EXPCExit
.a78e	ce 34 06	dec $0634			dec 	EXTRow 						; up one in position/address
.a791	38		sec				sec
.a792	a5 40		lda $40				lda 	EXTAddress
.a794	ed 37 06	sbc $0637			sbc 	EXTScreenWidth
.a797	85 40		sta $40				sta 	EXTAddress
.a799	b0 14		bcs $a7af			bcs 	_EXPCExit
.a79b	c6 41		dec $41				dec 	EXTAddress+1
.a79d	80 10		bra $a7af			bra 	_EXPCExit
.a79f					_EXPCRight:
.a79f	c8		iny				iny
.a7a0	8c 35 06	sty $0635			sty 	EXTColumn
.a7a3	cc 37 06	cpy $0637			cpy 	EXTScreenWidth
.a7a6	d0 07		bne $a7af			bne 	_EXPCExit
.a7a8					_EXPCEnd:
.a7a8	ad 37 06	lda $0637			lda 	EXTScreenWidth
.a7ab	3a		dec a				dec 	a
.a7ac	8d 35 06	sta $0635			sta 	EXTColumn
.a7af					_EXPCExit:
.a7af	20 71 a8	jsr $a871			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7b2	68		pla				pla
.a7b3	85 01		sta $01				sta 	1
.a7b5	7a		ply				ply
.a7b6	fa		plx				plx
.a7b7	68		pla				pla
.a7b8	60		rts				rts
.a7b9					_EXPCClearScreen:
.a7b9	20 2e a8	jsr $a82e			jsr		EXTClearScreenCode
.a7bc	80 f1		bra $a7af			bra 	_EXPCExit
.a7be					_EXPCDown:
.a7be	ad 38 06	lda $0638			lda 	EXTScreenHeight 			; at the bottom
.a7c1	3a		dec a				dec 	a
.a7c2	cd 34 06	cmp $0634			cmp 	EXTRow
.a7c5	f0 e8		beq $a7af			beq 	_EXPCExit
.a7c7	ee 34 06	inc $0634			inc 	EXTRow 						; down one in position/address
.a7ca	18		clc				clc
.a7cb	a5 40		lda $40				lda 	EXTAddress
.a7cd	6d 37 06	adc $0637			adc 	EXTScreenWidth
.a7d0	85 40		sta $40				sta 	EXTAddress
.a7d2	90 db		bcc $a7af			bcc 	_EXPCExit
.a7d4	e6 41		inc $41				inc 	EXTAddress+1
.a7d6	80 d7		bra $a7af			bra 	_EXPCExit
.a7d8					_EXPCTab:
.a7d8	ad 35 06	lda $0635			lda 	EXTColumn 					; next tab stop
.a7db	29 f8		and #$f8			and 	#$F8
.a7dd	18		clc				clc
.a7de	69 08		adc #$08			adc 	#8
.a7e0	8d 35 06	sta $0635			sta 	EXTColumn
.a7e3	cd 37 06	cmp $0637			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a7e6	90 c7		bcc $a7af			bcc 	_EXPCExit
.a7e8	80 be		bra $a7a8			bra 	_EXPCEnd
.a7ea					_EXPCBackSpace:
.a7ea	88		dey				dey
.a7eb	30 c2		bmi $a7af			bmi 	_EXPCExit
.a7ed	ce 35 06	dec $0635			dec 	EXTColumn
.a7f0	a9 02		lda #$02			lda 	#2
.a7f2	85 01		sta $01				sta 	1
.a7f4	a9 20		lda #$20			lda 	#32
.a7f6	91 40		sta ($40),y			sta 	(EXTAddress),y
.a7f8	80 b5		bra $a7af			bra 	_EXPCExit
.a7fa					_EXPCActionTable:
>a7fa	af a7						.word 	_EXPCExit 					; 00
>a7fc	73 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a7fe	6e a7						.word 	_EXPCLeft 					; 02 B Left
>a800	af a7						.word 	_EXPCExit 					; 03 <Break>
>a802	af a7						.word 	_EXPCExit 					; 04
>a804	a8 a7						.word 	_EXPCEnd 					; 05 E End of Line
>a806	9f a7						.word 	_EXPCRight 					; 06 F Right
>a808	af a7						.word 	_EXPCExit 					; 07
>a80a	ea a7						.word 	_EXPCBackspace 				; 08 H Backspace
>a80c	d8 a7						.word 	_EXPCTab 					; 09 I Tab
>a80e	af a7						.word 	_EXPCExit 					; 0A
>a810	af a7						.word 	_EXPCExit 					; 0B
>a812	b9 a7						.word 	_EXPCClearScreen			; 0C L CLS
>a814	52 a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a816	be a7						.word 	_EXPCDown 					; 0E N Down
>a818	af a7						.word 	_EXPCExit 					; 0F
>a81a	89 a7						.word 	_EXPCUp 					; 10 P Up
.a81c					EXTScreenScroll:
.a81c	a9 02		lda #$02			lda 	#2 							; select text page
.a81e	85 01		sta $01				sta 	1
.a820	a9 20		lda #$20			lda		#32 						; fill with space
.a822	20 90 a8	jsr $a890			jsr 	EXTScrollFill
.a825	e6 01		inc $01				inc 	1 							; select colour page
.a827	ad 36 06	lda $0636			lda 	EXTTextColour
.a82a	20 90 a8	jsr $a890			jsr 	EXTScrollFill
.a82d	60		rts				rts
.a82e					EXTClearScreenCode:
.a82e	a9 02		lda #$02			lda 	#2 							; select text page
.a830	85 01		sta $01				sta 	1
.a832	a9 20		lda #$20			lda		#32 						; fill with space
.a834	20 41 a8	jsr $a841			jsr 	_EXTCSFill
.a837	e6 01		inc $01				inc 	1 							; select colour page
.a839	ad 36 06	lda $0636			lda 	EXTTextColour
.a83c	20 41 a8	jsr $a841			jsr 	_EXTCSFill
.a83f	80 22		bra $a863			bra 	EXTHomeCursor
.a841					_EXTCSFill:
.a841	aa		tax				tax
.a842	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a844	85 40		sta $40				sta 	EXTAddress
.a846	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a848	85 41		sta $41				sta 	EXTAddress+1
.a84a					_EXTCSFill1:
.a84a	a0 00		ldy #$00			ldy 	#0
.a84c	8a		txa				txa
.a84d					_EXTCSFill2:
.a84d	91 40		sta ($40),y			sta 	(EXTAddress),y
.a84f	c8		iny				iny
.a850	d0 fb		bne $a84d			bne 	_EXTCSFill2
.a852	e6 41		inc $41				inc 	EXTAddress+1
.a854	a5 41		lda $41				lda 	EXTAddress+1
.a856	c9 d2		cmp #$d2			cmp 	#$D2
.a858	d0 f0		bne $a84a			bne 	_EXTCSFill1
.a85a	8a		txa				txa
.a85b					_EXTCSFill3:
.a85b	91 40		sta ($40),y			sta 	(EXTAddress),y
.a85d	c8		iny				iny
.a85e	c0 c0		cpy #$c0			cpy 	#$C0
.a860	d0 f9		bne $a85b			bne 	_EXTCSFill3
.a862	60		rts				rts
.a863					EXTHomeCursor:
.a863	9c 34 06	stz $0634			stz 	EXTRow 						; reset row & column
.a866	9c 35 06	stz $0635			stz 	EXTColumn
.a869	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a86b	85 40		sta $40				sta 	EXTAddress
.a86d	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a86f	85 41		sta $41				sta 	EXTAddress+1
.a871					EXTSetHardwareCursor:
.a871	64 01		stz $01				stz 	1 							; I/O Page zero
.a873	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a875	8d 10 d0	sta $d010			sta 	$D010
.a878	a9 b1		lda #$b1			lda 	#$B1
.a87a	8d 12 d0	sta $d012			sta 	$D012
.a87d	ad 35 06	lda $0635			lda 	EXTColumn
.a880	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a883	9c 15 d0	stz $d015			stz 	$D015
.a886	ad 34 06	lda $0634			lda 	EXTRow
.a889	8d 16 d0	sta $d016			sta 	$D016
.a88c	9c 17 d0	stz $d017			stz 	$D017
.a88f	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0634					EXTRow:
>0634							.fill 	1
.0635					EXTColumn:
>0635							.fill 	1
.0636					EXTTextColour:
>0636							.fill 	1
.0637					EXTScreenWidth:
>0637							.fill 	1
.0638					EXTScreenHeight:
>0638							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a890					EXTScrollFill:
.a890	aa		tax				tax									; save value to fill with
.a891	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a893	48		pha				pha
.a894	a5 37		lda $37				lda 	zTemp0+1
.a896	48		pha				pha
.a897	a5 38		lda $38				lda 	zTemp1
.a899	48		pha				pha
.a89a	a5 39		lda $39				lda 	zTemp1+1
.a89c	48		pha				pha
.a89d	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a89f	85 37		sta $37				sta 	zTemp0+1
.a8a1	85 39		sta $39				sta 	zTemp1+1
.a8a3	64 36		stz $36				stz 	zTemp0
.a8a5	ad 37 06	lda $0637			lda 	EXTScreenWidth
.a8a8	85 38		sta $38				sta 	zTemp1
.a8aa	a0 00		ldy #$00			ldy 	#0
.a8ac					_EXSFCopy1:
.a8ac	b1 38		lda ($38),y			lda 	(zTemp1),y
.a8ae	91 36		sta ($36),y			sta 	(zTemp0),y
.a8b0	c8		iny				iny
.a8b1	d0 f9		bne $a8ac			bne 	_EXSFCopy1
.a8b3	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a8b5	e6 39		inc $39				inc 	zTemp1+1
.a8b7	a5 39		lda $39				lda 	zTemp1+1
.a8b9	c9 d3		cmp #$d3			cmp 	#$D3
.a8bb	d0 ef		bne $a8ac			bne 	_EXSFCopy1
.a8bd	ac 37 06	ldy $0637			ldy 	EXTScreenWidth 				; blank the bottom line.
.a8c0	8a		txa				txa
.a8c1					_EXSFFill1:
.a8c1	88		dey				dey
.a8c2	91 40		sta ($40),y			sta 	(EXTAddress),y
.a8c4	c0 00		cpy #$00			cpy 	#0
.a8c6	10 f9		bpl $a8c1			bpl 	_EXSFFill1
.a8c8	68		pla				pla
.a8c9	85 39		sta $39				sta 	zTemp1+1
.a8cb	68		pla				pla
.a8cc	85 38		sta $38				sta 	zTemp1
.a8ce	68		pla				pla
.a8cf	85 37		sta $37				sta 	zTemp0+1
.a8d1	68		pla				pla
.a8d2	85 36		sta $36				sta 	zTemp0
.a8d4	60		rts				rts
.a8d5					EXTInitialise:
.a8d5	64 01		stz $01				stz 	1 							; Access I/O
.a8d7	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a8da	9c 08 d0	stz $d008			stz 	$D008
.a8dd	9c 09 d0	stz $d009			stz 	$D009
.a8e0	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a8e2	8d 58 d6	sta $d658			sta 	$D658
.a8e5	a9 76		lda #$76			lda 	#$76
.a8e7	8d 36 06	sta $0636			sta 	EXTTextColour
.a8ea	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a8ec	8d 37 06	sta $0637			sta 	EXTScreenWidth
.a8ef	a9 3c		lda #$3c			lda 	#60
.a8f1	8d 38 06	sta $0638			sta 	EXTScreenHeight
.a8f4	64 01		stz $01				stz 	1
.a8f6	60		rts				rts
.a8f7					EXTInputSingleCharacter:
.a8f7	da		phx				phx
.a8f8	5a		phy				phy
.a8f9					_EISCWait:
.a8f9	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a8fc	c9 00		cmp #$00			cmp 	#0
.a8fe	f0 f9		beq $a8f9			beq 	_EISCWait
.a900	7a		ply				ply
.a901	fa		plx				plx
.a902	60		rts				rts
.a903					EXTInputLine:
.a903	20 f7 a8	jsr $a8f7			jsr 	ExtInputSingleCharacter
.a906	20 2b a7	jsr $a72b			jsr 	ExtPrintCharacter
.a909	80 f8		bra $a903			bra 	EXTInputLine
.a90b	60		rts				rts
.a90c					EXTBreakCheck:
.a90c	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a90f					EXTReadController:
.a90f	da		phx				phx
.a910	a2 00		ldx #$00			ldx 	#0
.a912	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a914	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a917	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a919	f0 04		beq $a91f			beq 	_NoSet1
.a91b	8a		txa				txa
.a91c	09 01		ora #$01			ora 	#1
.a91e	aa		tax				tax
.a91f					_NoSet1:
.a91f	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a921	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a924	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a926	f0 04		beq $a92c			beq 	_NoSet1
.a928	8a		txa				txa
.a929	09 02		ora #$02			ora 	#2
.a92b	aa		tax				tax
.a92c					_NoSet1:
.a92c	a9 06		lda #$06			lda 	#(($32) >> 3)
.a92e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a931	29 04		and #$04			and 	#($01 << (($32) & 7))
.a933	f0 04		beq $a939			beq 	_NoSet1
.a935	8a		txa				txa
.a936	09 04		ora #$04			ora 	#4
.a938	aa		tax				tax
.a939					_NoSet1:
.a939	a9 04		lda #$04			lda 	#(($25) >> 3)
.a93b	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a93e	29 20		and #$20			and 	#($01 << (($25) & 7))
.a940	f0 04		beq $a946			beq 	_NoSet1
.a942	8a		txa				txa
.a943	09 08		ora #$08			ora 	#8
.a945	aa		tax				tax
.a946					_NoSet1:
.a946	a9 04		lda #$04			lda 	#(($26) >> 3)
.a948	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a94b	29 40		and #$40			and 	#($01 << (($26) & 7))
.a94d	f0 04		beq $a953			beq 	_NoSet1
.a94f	8a		txa				txa
.a950	09 10		ora #$10			ora 	#16
.a952	aa		tax				tax
.a953					_NoSet1:
.a953	8a		txa				txa
.a954	fa		plx				plx
.a955	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b6d7					GRVectorTable:
>b6d7	51 ab					.word	GXInitialise             ; $00 Initialise
>b6d9	6b ab					.word	GXControlBitmap          ; $01 BitmapCtl
>b6db	b3 ab					.word	GXControlSprite          ; $02 SpriteCtl
>b6dd	03 ab					.word	GXClearBitmap            ; $03 Clear
>b6df	42 ad					.word	GXSetColourMode          ; $04 Colour
>b6e1	0a af					.word	GXFontHandler            ; $05 DrawFont
>b6e3	52 af					.word	GXSpriteHandler          ; $06 DrawSprite
>b6e5	be af					.word	GXSelect                 ; $07 SpriteUse
>b6e7	e7 af					.word	GXSelectImage            ; $08 SpriteImage
>b6e9	6e b1					.word	GXCollide                ; $09 SpriteCollide
>b6eb	b5 a9					.word	GRUndefined              ; $0a
>b6ed	b5 a9					.word	GRUndefined              ; $0b
>b6ef	b5 a9					.word	GRUndefined              ; $0c
>b6f1	b5 a9					.word	GRUndefined              ; $0d
>b6f3	b5 a9					.word	GRUndefined              ; $0e
>b6f5	b5 a9					.word	GRUndefined              ; $0f
>b6f7	b5 a9					.word	GRUndefined              ; $10
>b6f9	b5 a9					.word	GRUndefined              ; $11
>b6fb	b5 a9					.word	GRUndefined              ; $12
>b6fd	b5 a9					.word	GRUndefined              ; $13
>b6ff	b5 a9					.word	GRUndefined              ; $14
>b701	b5 a9					.word	GRUndefined              ; $15
>b703	b5 a9					.word	GRUndefined              ; $16
>b705	b5 a9					.word	GRUndefined              ; $17
>b707	b5 a9					.word	GRUndefined              ; $18
>b709	b5 a9					.word	GRUndefined              ; $19
>b70b	b5 a9					.word	GRUndefined              ; $1a
>b70d	b5 a9					.word	GRUndefined              ; $1b
>b70f	b5 a9					.word	GRUndefined              ; $1c
>b711	b5 a9					.word	GRUndefined              ; $1d
>b713	b5 a9					.word	GRUndefined              ; $1e
>b715	b5 a9					.word	GRUndefined              ; $1f
>b717	b3 a9					.word	GXMove                   ; $20 Move
>b719	10 ac					.word	GXLine                   ; $21 Line
>b71b	8b ad					.word	GXFrameRectangle         ; $22 FrameRect
>b71d	88 ad					.word	GXFillRectangle          ; $23 FillRect
>b71f	ba a9					.word	GXFrameCircle            ; $24 FrameCircle
>b721	b6 a9					.word	GXFillCircle             ; $25 FillCircle
>b723	b5 a9					.word	GRUndefined              ; $26
>b725	b5 a9					.word	GRUndefined              ; $27
>b727	70 ad					.word	GXPlotPoint              ; $28 Plot
>b729	7d b0					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.0639					gxCurrentX:
>0639							.fill 	2
.063b					gxCurrentY:
>063b							.fill 	2
.063d					gxLastX:
>063d							.fill 	2
.063f					gxLastY:
>063f							.fill 	2
.0641					gxX0:
>0641							.fill 	2
.0643					gxY0:
>0643							.fill 	2
.0645					gxX1:
>0645							.fill 	2
.0647					gxY1:
>0647							.fill 	2
.0649					gxSpritesOn:
>0649							.fill 	1
.064a					gxBitmapsOn:
>064a							.fill 	1
.064b					gxBasePage:
>064b							.fill 	1
.064c					gxSpritePage:
>064c							.fill 	1
.064d					gxHeight:
>064d							.fill 	1
.064e					gxMode:
>064e							.fill 	1
.064f					gxColour:
>064f							.fill 	1
.0650					gxEORValue:
>0650							.fill 	1
.0651					gxANDValue:
>0651							.fill 	1
.0652					gxOriginalLUTValue:
>0652							.fill 	1
.0653					gsOffset:
>0653							.fill 	1
.0654					GSCurrentSpriteID:
>0654							.fill 	1
.0655					GSCurrentSpriteAddr:
>0655							.fill 	2
.0657					GXSpriteOffsetBase:
>0657							.fill 	2
.0659					GXSpriteLow:
>0659							.fill 	64
.0699					GXSpriteHigh:
>0699							.fill 	64
.a956					GXGraphicDraw:
.a956	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.a958	b0 06		bcs $a960			bcs 	_GDCoordinate
.a95a	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.a95c	84 37		sty $37				sty 	gxzTemp0+1
.a95e	80 4b		bra $a9ab			bra 	_GDExecuteA 				; and execute
.a960					_GDCoordinate:
.a960	48		pha				pha 								; save AXY
.a961	da		phx				phx
.a962	5a		phy				phy
.a963	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.a965					_GDCopy1:
.a965	bd 39 06	lda $0639,x			lda 	gxCurrentX,x
.a968	9d 3d 06	sta $063d,x			sta 	gxLastX,x
.a96b	ca		dex				dex
.a96c	10 f7		bpl $a965			bpl 	_GDCopy1
.a96e	68		pla				pla 								; update Y
.a96f	8d 3b 06	sta $063b			sta 	gxCurrentY
.a972	9c 3c 06	stz $063c			stz 	gxCurrentY+1
.a975	68		pla				pla
.a976	8d 39 06	sta $0639			sta 	gxCurrentX
.a979	68		pla				pla 								; get A (command+X.1) back
.a97a	48		pha				pha
.a97b	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.a97d	8d 3a 06	sta $063a			sta 	gxCurrentX+1
.a980	68		pla				pla 								; get command back
.a981	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.a983	48		pha				pha 								; push back.
.a984	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.a986	f0 17		beq $a99f			beq 	_GDCopyToWorkArea
.a988	ad 3a 06	lda $063a			lda 	gxCurrentX+1 				; X < 256 X okay
.a98b	f0 07		beq $a994			beq 	_GDCheckY
.a98d	ad 39 06	lda $0639			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.a990	c9 40		cmp #$40			cmp 	#64
.a992	b0 08		bcs $a99c			bcs 	_GDError1
.a994					_GDCheckY:
.a994	ad 3b 06	lda $063b			lda 	gxCurrentY 					; check Y < Height.
.a997	cd 4d 06	cmp $064d			cmp 	gxHeight
.a99a	90 03		bcc $a99f			bcc 	_GDCopyToWorkArea
.a99c					_GDError1:
.a99c	68		pla				pla
.a99d					_GDError2:
.a99d	38		sec				sec
.a99e	60		rts				rts
.a99f					_GDCopyToWorkArea:
.a99f	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.a9a1					_GDCopy2:
.a9a1	bd 39 06	lda $0639,x			lda 	gxCurrentX,x
.a9a4	9d 41 06	sta $0641,x			sta 	gxX0,x
.a9a7	ca		dex				dex
.a9a8	10 f7		bpl $a9a1			bpl 	_GDCopy2
.a9aa	68		pla				pla 								; get command
.a9ab					_GDExecuteA:
.a9ab	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.a9ad	b0 ee		bcs $a99d			bcs 	_GDError2
.a9af	aa		tax				tax
.a9b0	7c d7 b6	jmp ($b6d7,x)			jmp 	(GRVectorTable,x)
.a9b3					GXMove:
.a9b3	18		clc				clc
.a9b4	60		rts				rts
.a9b5					GRUndefined:
>a9b5	db						.byte 	$DB 						; causes a break in the emulator
.a9b6					GXFillCircle:
.a9b6	a9 ff		lda #$ff			lda 	#255
.a9b8	80 02		bra $a9bc			bra 	GXCircle
.a9ba					GXFrameCircle:
.a9ba	a9 00		lda #$00			lda 	#0
.a9bc					GXCircle:
.a9bc	8d dc 06	sta $06dc			sta 	gxIsFillMode					; save Fill flag
.a9bf	ad 4a 06	lda $064a			lda 	gxBitmapsOn
.a9c2	f0 26		beq $a9ea			beq 	_GXCFail
.a9c4	20 15 b2	jsr $b215			jsr 	GXSortXY 					; topleft/bottomright
.a9c7	20 ed b0	jsr $b0ed			jsr 	GXOpenBitmap 				; start drawing
.a9ca	20 bc aa	jsr $aabc			jsr 	GXCircleSetup 				; set up for drawing
.a9cd	9c dd 06	stz $06dd			stz 	gxYChanged
.a9d0					_GXCircleDraw:
.a9d0	ad da 06	lda $06da			lda 	gXCentre					; while x <= y
.a9d3	cd db 06	cmp $06db			cmp 	gYCentre
.a9d6	90 0a		bcc $a9e2			bcc 	_GXCircleContinue
.a9d8	d0 03		bne $a9dd			bne 	_GXNoLast
.a9da	20 ef a9	jsr $a9ef			jsr 	GXPlot1
.a9dd					_GXNoLast:
.a9dd	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap 				; close the bitmap
.a9e0	18		clc				clc
.a9e1	60		rts				rts
.a9e2					_GXCircleContinue:
.a9e2	20 ec a9	jsr $a9ec			jsr 	GXPlot2 					; draw it
.a9e5	20 69 aa	jsr $aa69			jsr 	GXCircleMove 				; adjust the coordinates
.a9e8	80 e6		bra $a9d0			bra 	_GXCircleDraw
.a9ea					_GXCFail:
.a9ea	38		sec				sec
.a9eb	60		rts				rts
.a9ec					GXPlot2:
.a9ec	20 ef a9	jsr $a9ef			jsr 	GXPlot1 						; plot and swap, fall through does twice
.a9ef					GXPlot1:
.a9ef	ad db 06	lda $06db			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.a9f2	f0 03		beq $a9f7			beq 	_GXPlot1Only
.a9f4	20 13 aa	jsr $aa13			jsr 	GXPlot0 						; plot and negate
.a9f7					_GXPlot1Only:
.a9f7	20 13 aa	jsr $aa13			jsr 	GXPlot0 						; twice, undoing negation
.a9fa	ad da 06	lda $06da			lda 	gXCentre 						; swap X and Y
.a9fd	ae db 06	ldx $06db			ldx	 	gYCentre
.aa00	8d db 06	sta $06db			sta 	gYCentre
.aa03	8e da 06	stx $06da			stx 	gXCentre
.aa06	ad dd 06	lda $06dd			lda 	gxYChanged 						; toggle Y Changed flag
.aa09	a9 ff		lda #$ff			lda 	#$FF
.aa0b	8d dd 06	sta $06dd			sta 	gxYChanged
.aa0e	60		rts				rts
.aa0f	20 13 aa	jsr $aa13			jsr 	GXPlot0 						; do once
.aa12	60		rts				rts
.aa13	ad dc 06	lda $06dc	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aa16	f0 05		beq $aa1d			beq 	_GXPlot0Always
.aa18	ad dd 06	lda $06dd			lda 	gxYChanged						; fill mode, only draw if changed.
.aa1b	f0 2d		beq $aa4a			beq 	GXPlot0Exit
.aa1d					_GXPlot0Always:
.aa1d	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aa1f	ad db 06	lda $06db			lda 	gYCentre
.aa22	20 4b aa	jsr $aa4b			jsr 	GXSubCopy
.aa25	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.aa27	ad da 06	lda $06da			lda 	gXCentre
.aa2a	20 4b aa	jsr $aa4b			jsr 	GXSubCopy
.aa2d	48		pha				pha 									; save last offset X
.aa2e	20 fd b0	jsr $b0fd			jsr 	GXPositionCalc 					; calculate position/offset.
.aa31	68		pla				pla
.aa32	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.aa33	85 36		sta $36				sta 	gxzTemp0
.aa35	64 37		stz $37				stz 	gxzTemp0+1
.aa37	26 37		rol $37				rol 	gxzTemp0+1
.aa39	ad dc 06	lda $06dc			lda 	gxIsFillMode
.aa3c	69 80		adc #$80			adc 	#128
.aa3e	20 db ad	jsr $addb			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.aa41	38		sec				sec 									; GY = -GY
.aa42	a9 00		lda #$00			lda 	#0
.aa44	ed db 06	sbc $06db			sbc 	gYCentre
.aa47	8d db 06	sta $06db			sta 	gYCentre
.aa4a					GXPlot0Exit:
.aa4a	60		rts				rts
.aa4b					GXSubCopy:
.aa4b	85 36		sta $36				sta 	gxzTemp0
.aa4d	64 37		stz $37				stz 	gxzTemp0+1
.aa4f	29 80		and #$80			and 	#$80
.aa51	f0 02		beq $aa55			beq 	_GXNoSx
.aa53	c6 37		dec $37				dec 	gxzTemp0+1
.aa55					_GXNoSx:
.aa55	38		sec				sec
.aa56	bd 45 06	lda $0645,x			lda 	gXX1,x
.aa59	e5 36		sbc $36				sbc 	gxzTemp0
.aa5b	9d 41 06	sta $0641,x			sta 	gXX0,x
.aa5e	bd 46 06	lda $0646,x			lda 	gXX1+1,x
.aa61	e5 37		sbc $37				sbc 	gxzTemp0+1
.aa63	9d 42 06	sta $0642,x			sta 	gXX0+1,x
.aa66	a5 36		lda $36				lda 	gxzTemp0 						; return A
.aa68	60		rts				rts
.aa69					GXCircleMove:
.aa69	9c dd 06	stz $06dd			stz 	gxYChanged 					; clear Y changed flag
.aa6c	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.aa6e	10 0d		bpl $aa7d			bpl 	_GXEMPositive
.aa70	ee da 06	inc $06da			inc 	gXCentre 					; X++
.aa73	ad da 06	lda $06da			lda 	gXCentre
.aa76	20 9c aa	jsr $aa9c			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.aa79	a9 06		lda #$06			lda 	#6  						; and add 6
.aa7b	80 15		bra $aa92			bra 	_GXEMAddD
.aa7d					_GXEMPositive:
.aa7d	ee da 06	inc $06da			inc 	gXCentre					; X++
.aa80	ce db 06	dec $06db			dec 	gyCentre 					; Y--
.aa83	38		sec				sec 								; calculate X-Y
.aa84	ad da 06	lda $06da			lda 	gXCentre
.aa87	ed db 06	sbc $06db			sbc 	gYCentre
.aa8a	20 9c aa	jsr $aa9c			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.aa8d	a9 0a		lda #$0a			lda 	#10  						; and add 10
.aa8f	ce dd 06	dec $06dd			dec 	gxYChanged
.aa92					_GXEMAddD:
.aa92	18		clc				clc
.aa93	65 38		adc $38				adc 	gxzTemp1
.aa95	85 38		sta $38				sta 	gxzTemp1
.aa97	90 02		bcc $aa9b			bcc 	_GXEMNoCarry
.aa99	e6 39		inc $39				inc 	gxzTemp1+1
.aa9b					_GXEMNoCarry:
.aa9b	60		rts				rts
.aa9c					_GXAdd4TimesToD:
.aa9c	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.aa9e	29 80		and #$80			and 	#$80
.aaa0	f0 02		beq $aaa4			beq 	_GXA4Unsigned
.aaa2	a9 ff		lda #$ff			lda 	#$FF
.aaa4					_GXA4Unsigned:
.aaa4	85 37		sta $37				sta 	gxzTemp0+1
.aaa6	06 36		asl $36				asl 	gxzTemp0  					; x 4
.aaa8	26 37		rol $37				rol 	gxzTemp0+1
.aaaa	06 36		asl $36				asl 	gxzTemp0
.aaac	26 37		rol $37				rol 	gxzTemp0+1
.aaae	18		clc				clc 								; add
.aaaf	a5 36		lda $36				lda		gxzTemp0
.aab1	65 38		adc $38				adc 	gxzTemp1
.aab3	85 38		sta $38				sta 	gxzTemp1
.aab5	a5 37		lda $37				lda		gxzTemp0+1
.aab7	65 39		adc $39				adc 	gxzTemp1+1
.aab9	85 39		sta $39				sta 	gxzTemp1+1
.aabb	60		rts				rts
.aabc					GXCircleSetup:
.aabc	38		sec				sec
.aabd	ad 47 06	lda $0647			lda 	gxY1
.aac0	ed 43 06	sbc $0643			sbc 	gxY0
.aac3	4a		lsr a				lsr 	a
.aac4	8d d9 06	sta $06d9			sta 	gxRadius
.aac7	a2 00		ldx #$00			ldx 	#0
.aac9	20 eb aa	jsr $aaeb			jsr 	_GXCalculateCentre
.aacc	a2 02		ldx #$02			ldx 	#2
.aace	20 eb aa	jsr $aaeb			jsr 	_GXCalculateCentre
.aad1	9c da 06	stz $06da			stz 	gXCentre
.aad4	ad d9 06	lda $06d9			lda 	gxRadius
.aad7	8d db 06	sta $06db			sta 	gYCentre
.aada	0a		asl a				asl 	a 							; R x 2
.aadb	85 36		sta $36				sta 	gxzTemp0
.aadd	38		sec				sec
.aade	a9 03		lda #$03			lda 	#3
.aae0	e5 36		sbc $36				sbc 	gxzTemp0
.aae2	85 38		sta $38				sta 	gxzTemp1
.aae4	a9 00		lda #$00			lda 	#0
.aae6	e9 00		sbc #$00			sbc 	#0
.aae8	85 39		sta $39				sta 	gxzTemp1+1
.aaea	60		rts				rts
.aaeb					_GXCalculateCentre:
.aaeb	38		sec				sec
.aaec	bd 45 06	lda $0645,x			lda 	gxX1,x
.aaef	7d 41 06	adc $0641,x			adc 	gXX0,x
.aaf2	9d 45 06	sta $0645,x			sta 	gXX1,x
.aaf5	bd 46 06	lda $0646,x			lda 	gXX1+1,x
.aaf8	7d 42 06	adc $0642,x			adc 	gXX0+1,x
.aafb	4a		lsr a				lsr 	a
.aafc	9d 46 06	sta $0646,x			sta 	gXX1+1,x
.aaff	7e 45 06	ror $0645,x			ror 	gXX1,x
.ab02	60		rts				rts
.06d9					gxRadius:
>06d9							.fill 	1
.06da					gXCentre:
>06da							.fill 	1
.06db					gYCentre:
>06db							.fill 	1
.06dc					gxIsFillMode:
>06dc							.fill 	1
.06dd					gxYChanged:
>06dd							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.ab03					GXClearBitmap:
.ab03	ad 4a 06	lda $064a			lda 	gxBitmapsOn 				; check BMP running.
.ab06	f0 24		beq $ab2c			beq 	_GXCBFail
.ab08	20 ed b0	jsr $b0ed			jsr 	GXOpenBitmap 				; start access
.ab0b	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.ab0d	ad 4d 06	lda $064d			lda 	gxHeight
.ab10	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.ab12	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.ab14					_GXCalcLastPage:
.ab14	98		tya				tya 								; add to base page
.ab15	18		clc				clc
.ab16	6d 4b 06	adc $064b			adc 	gxBasePage
.ab19	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.ab1b					_GXClearAll:
.ab1b	20 2e ab	jsr $ab2e			jsr 	_GXClearBlock 				; clear 8k block
.ab1e	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.ab20	a5 0b		lda $0b				lda 	GXEditSlot
.ab22	cd 4b 06	cmp $064b			cmp 	gxBasePage 					; until before base page
.ab25	b0 f4		bcs $ab1b			bcs 	_GXClearAll
.ab27	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap	 			; stop access
.ab2a	18		clc				clc
.ab2b	60		rts				rts
.ab2c					_GXCBFail:
.ab2c	38		sec				sec
.ab2d	60		rts				rts
.ab2e					_GXClearBlock:
.ab2e	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.ab30	85 38		sta $38				sta 	0+gxzTemp1
.ab32	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.ab34	85 39		sta $39				sta 	1+gxzTemp1
.ab36					_GXCB0:
.ab36	a5 36		lda $36				lda 	gxzTemp0
.ab38	a0 00		ldy #$00			ldy 	#0
.ab3a					_GXCB1:
.ab3a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ab3c	c8		iny				iny
.ab3d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ab3f	c8		iny				iny
.ab40	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ab42	c8		iny				iny
.ab43	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ab45	c8		iny				iny
.ab46	d0 f2		bne $ab3a			bne 	_GXCB1
.ab48	e6 39		inc $39				inc 	gxzTemp1+1
.ab4a	a5 39		lda $39				lda 	gxzTemp1+1
.ab4c	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ab4e	d0 e6		bne $ab36			bne 	_GXCB0
.ab50	60		rts				rts
.ab51					GXInitialise:
.ab51	64 01		stz $01				stz 	1
.ab53	a9 01		lda #$01			lda 	#1
.ab55	8d 00 d0	sta $d000			sta 	$D000
.ab58	18		clc				clc
.ab59	9c 49 06	stz $0649			stz 	GXSpritesOn
.ab5c	9c 4a 06	stz $064a			stz 	GXBitmapsOn
.ab5f	a2 0f		ldx #$0f			ldx 	#15
.ab61					_GXIClear:
.ab61	9e 39 06	stz $0639,x			stz 	gxCurrentX,x
.ab64	ca		dex				dex
.ab65	10 fa		bpl $ab61			bpl 	_GXIClear
.ab67	20 02 ac	jsr $ac02			jsr 	GXClearSpriteStore
.ab6a	60		rts				rts
.ab6b					GXControlBitmap:
.ab6b	64 01		stz $01				stz 	1
.ab6d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ab6f	29 01		and #$01			and 	#1 							; set bitmap flag
.ab71	8d 4a 06	sta $064a			sta 	gxBitmapsOn
.ab74	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ab75	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ab78	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ab7a	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ab7c	90 02		bcc $ab80			bcc 	_CBNotOn
.ab7e	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ab80					_CBNotOn:
.ab80	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ab83	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ab85	29 07		and #$07			and 	#7
.ab87	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ab8a	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ab8c	d0 02		bne $ab90			bne 	_CBNotDefault
.ab8e	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ab90					_CBNotDefault:
.ab90	8d 4b 06	sta $064b			sta 	gxBasePage
.ab93	20 f4 ab	jsr $abf4			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ab96	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ab98	8d 03 d1	sta $d103			sta 	$D103
.ab9b	a5 36		lda $36				lda 	gxzTemp0
.ab9d	8d 02 d1	sta $d102			sta 	$D102
.aba0	9c 01 d1	stz $d101			stz 	$D101
.aba3	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.aba5	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.aba8	29 01		and #$01			and 	#1
.abaa	f0 02		beq $abae			beq 	_CBHaveHeight
.abac	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.abae					_CBHaveHeight
.abae	8e 4d 06	stx $064d			stx 	gxHeight
.abb1	18		clc				clc
.abb2	60		rts				rts
.abb3					GXControlSprite:
.abb3	64 01		stz $01				stz 	1
.abb5	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.abb7	29 01		and #$01			and 	#1 							; set sprites flag
.abb9	8d 49 06	sta $0649			sta 	gxSpritesOn
.abbc	4a		lsr a				lsr 	a 							; bit 0 into carry.
.abbd	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.abc0	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.abc2	29 df		and #$df			and 	#$DF 						; clear sprite bit
.abc4	90 02		bcc $abc8			bcc 	_CSNotOn
.abc6	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.abc8					_CSNotOn:
.abc8	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.abcb	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.abcd	d0 02		bne $abd1			bne 	_CSNotDefault
.abcf	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.abd1					_CSNotDefault:
.abd1	8d 4c 06	sta $064c			sta 	gxSpritePage
.abd4	20 f4 ab	jsr $abf4			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.abd7	a5 36		lda $36				lda 	zTemp0
.abd9	8d 57 06	sta $0657			sta 	GXSpriteOffsetBase
.abdc	a5 37		lda $37				lda 	zTemp0+1
.abde	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase+1
.abe1	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.abe3					_CSClear:
.abe3	9e 00 d9	stz $d900,x			stz 	$D900,x
.abe6	9e 00 da	stz $da00,x			stz 	$DA00,x
.abe9	ca		dex				dex
.abea	d0 f7		bne $abe3			bne 	_CSClear
.abec	9c 56 06	stz $0656			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.abef	20 02 ac	jsr $ac02			jsr 	GXClearSpriteStore
.abf2	18		clc				clc
.abf3	60		rts				rts
.abf4					GXCalculateBaseAddress:
.abf4	85 36		sta $36				sta 	gxzTemp0
.abf6	64 37		stz $37				stz 	gxzTemp0+1
.abf8	a9 05		lda #$05			lda 	#5
.abfa					_GXShift:
.abfa	06 36		asl $36				asl 	gxzTemp0
.abfc	26 37		rol $37				rol 	gxzTemp0+1
.abfe	3a		dec a				dec		a
.abff	d0 f9		bne $abfa			bne 	_GXShift
.ac01	60		rts				rts
.ac02					GXClearSpriteStore:
.ac02	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ac04					_GXCSSLoop:
.ac04	9e 99 06	stz $0699,x			stz 	GXSpriteHigh,x
.ac07	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ac09	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.ac0c	ca		dex				dex
.ac0d	10 f5		bpl $ac04			bpl 	_GXCSSLoop
.ac0f	60		rts				rts
.ac10					GXLine:
.ac10	ad 4a 06	lda $064a			lda 	GXBitmapsOn
.ac13	f0 28		beq $ac3d			beq 	_GXLFail
.ac15	20 ed b0	jsr $b0ed			jsr 	GXOpenBitmap
.ac18	20 33 b2	jsr $b233			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ac1b	20 e3 ac	jsr $ace3			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ac1e	20 fd b0	jsr $b0fd			jsr 	GXPositionCalc 				; calculate position/offset.
.ac21					_GXDrawLoop:
.ac21	ac 53 06	ldy $0653			ldy 	gsOffset 					; draw the pixel
.ac24	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ac26	2d 51 06	and $0651			and 	gxANDValue
.ac29	4d 50 06	eor $0650			eor 	gxEORValue
.ac2c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ac2e	20 3f ac	jsr $ac3f			jsr 	GXLineIsComplete 			; is the line complete ?
.ac31	f0 05		beq $ac38			beq 	_GXLExit
.ac33	20 5a ac	jsr $ac5a			jsr 	GXLineAdvance 				; code as per advance method
.ac36	80 e9		bra $ac21			bra 	_GXDrawLoop
.ac38					_GXLExit:
.ac38	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap
.ac3b	18		clc				clc
.ac3c	60		rts				rts
.ac3d					_GXLFail:
.ac3d	38		sec				sec
.ac3e	60		rts				rts
.ac3f					GXLineIsComplete:
.ac3f	ad e0 06	lda $06e0			lda 	GXIsDiffYLarger 			; is dy larger
.ac42	d0 0f		bne $ac53			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ac44	ad 41 06	lda $0641			lda 	GXX0 						; compare X, LSB and MSB
.ac47	4d 45 06	eor $0645			eor 	GXX1
.ac4a	d0 06		bne $ac52			bne 	_GXLICExit
.ac4c	ad 42 06	lda $0642			lda 	GXX0+1
.ac4f	4d 46 06	eor $0646			eor 	GXX1+1
.ac52					_GXLICExit:
.ac52	60		rts				rts
.ac53					_GXLICCompareY:
.ac53	ad 47 06	lda $0647			lda 	GXY1
.ac56	4d 43 06	eor $0643			eor 	GXY0
.ac59	60		rts				rts
.ac5a					GXLineAdvance:
.ac5a	18		clc				clc 								; add adjust to position
.ac5b	ad e2 06	lda $06e2			lda 	GXPosition
.ac5e	6d e3 06	adc $06e3			adc 	GXAdjust
.ac61	8d e2 06	sta $06e2			sta 	GXPosition
.ac64	9c e5 06	stz $06e5			stz 	GXAddSelect 				; clear add select flag
.ac67	b0 05		bcs $ac6e			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ac69	cd e4 06	cmp $06e4			cmp 	GXTotal 					; if exceeded total
.ac6c	90 0a		bcc $ac78			bcc 	_GXLANoExtra
.ac6e					_GXLAOverflow:
.ac6e	ce e5 06	dec $06e5			dec 	GXAddSelect 				; set addselect to $FF
.ac71	38		sec				sec 								; subtract total and write back
.ac72	ed e4 06	sbc $06e4			sbc 	GXTotal
.ac75	8d e2 06	sta $06e2			sta 	GXPosition
.ac78					_GXLANoExtra:
.ac78	ad e0 06	lda $06e0			lda 	GXIsDiffYLarger
.ac7b	f0 0d		beq $ac8a			beq 	_GXDXLarger
.ac7d	20 dc ac	jsr $acdc			jsr 	GXIncrementY
.ac80	ad e5 06	lda $06e5			lda 	GXAddSelect
.ac83	f0 10		beq $ac95			beq 	_GXLAExit
.ac85	20 96 ac	jsr $ac96			jsr 	GXAdjustX
.ac88	80 0b		bra $ac95			bra 	_GXLAExit
.ac8a					_GXDXLarger:
.ac8a	20 96 ac	jsr $ac96			jsr 	GXAdjustX
.ac8d	ad e5 06	lda $06e5			lda 	GXAddSelect
.ac90	f0 03		beq $ac95			beq 	_GXLAExit
.ac92	20 dc ac	jsr $acdc			jsr 	GXIncrementY
.ac95					_GXLAExit:
.ac95	60		rts				rts
.ac96					GXAdjustX:
.ac96	ad e1 06	lda $06e1			lda 	GXDXNegative
.ac99	10 25		bpl $acc0			bpl 	_GXAXRight
.ac9b	ad 41 06	lda $0641			lda 	GXX0
.ac9e	d0 03		bne $aca3			bne 	_GXAXNoBorrow
.aca0	ce 42 06	dec $0642			dec 	GXX0+1
.aca3					_GXAXNoBorrow:
.aca3	ce 41 06	dec $0641			dec 	GXX0
.aca6	ce 53 06	dec $0653			dec 	gsOffset 					; pixel left
.aca9	ad 53 06	lda $0653			lda 	gsOffset
.acac	c9 ff		cmp #$ff			cmp 	#$FF
.acae	d0 0f		bne $acbf			bne 	_GXAYExit 					; underflow
.acb0	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.acb2	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.acb4	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.acb6	b0 07		bcs $acbf			bcs 	_GXAYExit
.acb8	18		clc				clc
.acb9	69 20		adc #$20			adc 	#$20 						; fix up
.acbb	85 3d		sta $3d				sta 	gxzScreen+1
.acbd	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.acbf					_GXAYExit:
.acbf	60		rts				rts
.acc0					_GXAXRight:
.acc0	ee 41 06	inc $0641			inc 	GXX0
.acc3	d0 03		bne $acc8			bne 	_GXAXNoCarry
.acc5	ee 42 06	inc $0642			inc 	GXX0+1
.acc8					_GXAXNoCarry:
.acc8	ee 53 06	inc $0653			inc 	gsOffset 					; pixel right
.accb	d0 0e		bne $acdb			bne 	_GXAXExit 					; if not overflowed, exit.
.accd	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.accf	a5 3d		lda $3d				lda 	gxzScreen+1
.acd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.acd3	90 06		bcc $acdb			bcc 	_GXAXExit
.acd5	e9 20		sbc #$20			sbc 	#$20 						; fix up
.acd7	85 3d		sta $3d				sta 	gxzScreen+1
.acd9	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.acdb					_GXAXExit:
.acdb	60		rts				rts
.acdc					GXIncrementY:
.acdc	ee 43 06	inc $0643			inc 	GXY0
.acdf	20 53 b1	jsr $b153			jsr 	GXMovePositionDown
.ace2	60		rts				rts
.ace3					GXLineSetup:
.ace3	ad 47 06	lda $0647			lda 	GXY1
.ace6	38		sec				sec
.ace7	ed 43 06	sbc $0643			sbc 	GXY0
.acea	4a		lsr a				lsr 	a
.aceb	8d df 06	sta $06df			sta 	GXDiffY
.acee	9c e1 06	stz $06e1			stz 	GXDXNegative 				; clear -ve flag
.acf1	38		sec				sec
.acf2	ad 45 06	lda $0645			lda 	GXX1
.acf5	ed 41 06	sbc $0641			sbc 	GXX0
.acf8	8d de 06	sta $06de			sta 	GXDiffX
.acfb	ad 46 06	lda $0646			lda 	GXX1+1 						; calculate MSB
.acfe	ed 42 06	sbc $0642			sbc 	GXX0+1
.ad01	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.ad02	6e de 06	ror $06de			ror 	GXDiffX
.ad05	0a		asl a				asl 	a
.ad06	10 0c		bpl $ad14			bpl 	_GDXNotNegative
.ad08	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.ad0a	38		sec				sec
.ad0b	ed de 06	sbc $06de			sbc 	GXDiffX
.ad0e	8d de 06	sta $06de			sta 	GXDiffX
.ad11	ce e1 06	dec $06e1			dec 	GXDXNegative 				; -ve flag = $FF.
.ad14					_GDXNotNegative:
.ad14	9c e0 06	stz $06e0			stz 	GXIsDiffYLarger 			; clear larger flag
.ad17	ad df 06	lda $06df			lda 	GXDiffY 					; set adjust and total.
.ad1a	8d e3 06	sta $06e3			sta 	GXAdjust
.ad1d	ad de 06	lda $06de			lda 	GXDiffX
.ad20	8d e4 06	sta $06e4			sta 	GXTotal
.ad23	ad df 06	lda $06df			lda 	GXDiffY 					; if dy > dx
.ad26	cd de 06	cmp $06de			cmp 	GXDiffX
.ad29	90 0f		bcc $ad3a			bcc 	_GDXNotLarger
.ad2b	ce e0 06	dec $06e0			dec 	GXIsDiffYLarger 			; set the dy larger flag
.ad2e	ad de 06	lda $06de			lda 	GXDiffX 					; set adjust and total other way round
.ad31	8d e3 06	sta $06e3			sta 	GXAdjust
.ad34	ad df 06	lda $06df			lda 	GXDiffY
.ad37	8d e4 06	sta $06e4			sta 	GXTotal
.ad3a					_GDXNotLarger:
.ad3a	ad e4 06	lda $06e4			lda 	GXTotal
.ad3d	4a		lsr a				lsr 	a
.ad3e	8d e2 06	sta $06e2			sta 	GXPosition
.ad41	60		rts				rts
.06de					GXDiffX:
>06de							.fill 	1
.06df					GXDiffY:
>06df							.fill 	1
.06e0					GXIsDiffYLarger:
>06e0							.fill 	1
.06e1					GXDXNegative:
>06e1							.fill 	1
.06e2					GXPosition:
>06e2							.fill 	1
.06e3					GXAdjust:
>06e3							.fill 	1
.06e4					GXTotal:
>06e4							.fill 	1
.06e5					GXAddSelect:
>06e5							.fill 	1
.ad42					GXSetColourMode:
.ad42	a6 36		ldx $36				ldx 	gxzTemp0
.ad44	8e 4f 06	stx $064f			stx 	gxColour 								; set colour
.ad47	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ad49	8d 4e 06	sta $064e			sta 	gxMode 									; set mode
.ad4c	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ad4e	9c 51 06	stz $0651			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ad51	ae 4f 06	ldx $064f			ldx 	gxColour
.ad54	8e 50 06	stx $0650			stx 	gxEORValue
.ad57	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ad59	90 03		bcc $ad5e			bcc 	_GXSDCNotAndColour
.ad5b	8e 51 06	stx $0651			stx 	gxANDValue
.ad5e					_GXSDCNotAndColour:
.ad5e	d0 03		bne $ad63			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ad60	9c 50 06	stz $0650			stz 	gxEORValue
.ad63					_GXSDCNotAnd:
.ad63	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ad64	90 08		bcc $ad6e			bcc 	_GXSDCNoFlip
.ad66	ad 51 06	lda $0651			lda	 	gxANDValue
.ad69	49 ff		eor #$ff			eor 	#$FF
.ad6b	8d 51 06	sta $0651			sta 	gxANDValue
.ad6e					_GXSDCNoFlip:
.ad6e	18		clc				clc
.ad6f	60		rts				rts
.ad70					GXPlotPoint:
.ad70	20 ed b0	jsr $b0ed			jsr 	GXOpenBitmap 				; start drawing
.ad73	20 fd b0	jsr $b0fd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ad76	ac 53 06	ldy $0653			ldy 	gsOffset
.ad79	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ad7b	2d 51 06	and $0651			and 	gxANDValue
.ad7e	4d 50 06	eor $0650			eor 	gxEORValue
.ad81	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad83	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap 				; stop drawing and exit
.ad86	18		clc				clc
.ad87	60		rts				rts
.ad88					GXFillRectangle:
.ad88	38		sec				sec
.ad89	80 01		bra $ad8c			bra 	GXRectangle
.ad8b					GXFrameRectangle:
.ad8b	18		clc				clc
.ad8c					GXRectangle:
.ad8c	ad 4a 06	lda $064a			lda 	gxBitmapsOn
.ad8f	f0 35		beq $adc6			beq 	_GXRFail
.ad91	08		php				php 								; save Fill flag (CS)
.ad92	20 ed b0	jsr $b0ed			jsr 	GXOpenBitmap 				; start drawing
.ad95	20 15 b2	jsr $b215			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ad98	20 fd b0	jsr $b0fd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ad9b	38		sec				sec 								; sec = Draw line
.ad9c	20 c8 ad	jsr $adc8			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ad9f	ad 43 06	lda $0643			lda 	gxY0 						; reached end of rectangle ?
.ada2	cd 47 06	cmp $0647			cmp 	gxY1
.ada5	f0 19		beq $adc0			beq 	_GXRectangleExit
.ada7					_GXRectLoop:
.ada7	20 53 b1	jsr $b153			jsr 	GXMovePositionDown 			; down one.
.adaa	ee 43 06	inc $0643			inc 	gxY0 						; change Y pos
.adad	ad 43 06	lda $0643			lda 	gxY0 						; reached last line
.adb0	cd 47 06	cmp $0647			cmp 	gXY1
.adb3	f0 07		beq $adbc			beq 	_GXLastLine
.adb5	28		plp				plp 								; get flag back
.adb6	08		php				php
.adb7	20 c8 ad	jsr $adc8			jsr 	GXDrawLineX1X0 				; draw horizontal line
.adba	80 eb		bra $ada7			bra 	_GXRectLoop
.adbc					_GXLastLine:
.adbc	38		sec				sec
.adbd	20 c8 ad	jsr $adc8			jsr 	GXDrawLineX1X0
.adc0					_GXRectangleExit:
.adc0	68		pla				pla 								; throw fill flag.
.adc1	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap 				; stop drawing and exit
.adc4	18		clc				clc
.adc5	60		rts				rts
.adc6					_GXRFail:
.adc6	38		sec				sec
.adc7	60		rts				rts
.adc8					GXDrawLineX1X0:
.adc8	08		php				php 								; save solid/either-end
.adc9	38		sec				sec
.adca	ad 45 06	lda $0645			lda		gXX1
.adcd	ed 41 06	sbc $0641			sbc 	gXX0
.add0	85 36		sta $36				sta 	gxzTemp0
.add2	ad 46 06	lda $0646			lda 	gXX1+1
.add5	ed 42 06	sbc $0642			sbc 	gXX0+1
.add8	85 37		sta $37				sta 	gxzTemp0+1
.adda	28		plp				plp
.addb					GXDrawLineTemp0:
.addb	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.addd	48		pha				pha
.adde	a5 3d		lda $3d				lda 	gxzScreen+1
.ade0	48		pha				pha
.ade1	ad 53 06	lda $0653			lda 	gsOffset
.ade4	48		pha				pha
.ade5	a5 0b		lda $0b				lda 	GXEditSlot
.ade7	48		pha				pha
.ade8	ac 53 06	ldy $0653			ldy 	gsOffset 					; Y offset
.adeb	90 1e		bcc $ae0b			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aded					_GXDLTLine:
.aded	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.adef	2d 51 06	and $0651			and 	gxANDValue
.adf2	4d 50 06	eor $0650			eor 	gxEORValue
.adf5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.adf7	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.adf9	d0 04		bne $adff			bne 	_GXDLTNoBorrow
.adfb	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.adfd	30 2e		bmi $ae2d			bmi 	_GXDLTExit
.adff					_GXDLTNoBorrow:
.adff	c6 36		dec $36				dec 	gxzTemp0
.ae01	c8		iny				iny 								; next slot.
.ae02	d0 e9		bne $aded			bne 	_GXDLTLine
.ae04	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.ae06	20 3b ae	jsr $ae3b			jsr 	GXDLTCheckWrap				; check for new page.
.ae09	80 e2		bra $aded			bra 	_GXDLTLine
.ae0b					_GXDLTEndPoints:
.ae0b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ae0d	2d 51 06	and $0651			and 	gxANDValue
.ae10	4d 50 06	eor $0650			eor 	gxEORValue
.ae13	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae15	98		tya				tya 								; advance to right side
.ae16	18		clc				clc
.ae17	65 36		adc $36				adc 	gxzTemp0
.ae19	a8		tay				tay
.ae1a	a5 3d		lda $3d				lda 	gxzScreen+1
.ae1c	65 37		adc $37				adc 	gxzTemp0+1
.ae1e	85 3d		sta $3d				sta 	gxzScreen+1
.ae20	20 3b ae	jsr $ae3b			jsr 	GXDLTCheckWrap 			; fix up.
.ae23	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae25	2d 51 06	and $0651			and 	gxANDValue
.ae28	4d 50 06	eor $0650			eor 	gxEORValue
.ae2b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae2d					_GXDLTExit:
.ae2d	68		pla				pla
.ae2e	85 0b		sta $0b				sta 	GXEditSlot
.ae30	68		pla				pla
.ae31	8d 53 06	sta $0653			sta 	gsOffset
.ae34	68		pla				pla
.ae35	85 3d		sta $3d				sta 	gxzScreen+1
.ae37	68		pla				pla
.ae38	85 3c		sta $3c				sta 	gxzScreen
.ae3a	60		rts				rts
.ae3b					GXDLTCheckWrap:
.ae3b	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ae3d	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ae3f	90 06		bcc $ae47			bcc 	_GXDLTCWExit
.ae41	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ae43	85 3d		sta $3d				sta 	gxzScreen+1
.ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ae47					_GXDLTCWExit:
.ae47	60		rts				rts
.ae48					GXDrawGraphicElement:
.ae48	8d e6 06	sta $06e6			sta 	gxSize 						; save size
.ae4b	3a		dec a				dec 	a
.ae4c	8d e7 06	sta $06e7			sta 	gxMask 						; and mask
.ae4f	ad 4a 06	lda $064a			lda 	gxBitmapsOn 				; check BMP on
.ae52	f0 67		beq $aebb			beq 	_GXSLFail
.ae54	ad 43 06	lda $0643			lda 	gxY0 						; push Y on stack
.ae57	48		pha				pha
.ae58	8c e9 06	sty $06e9			sty 	gxAcquireVector+1 			; and acquisition vector
.ae5b	8e e8 06	stx $06e8			stx 	gxAcquireVector
.ae5e	20 ed b0	jsr $b0ed			jsr 	gxOpenBitmap 				; open the bitmap.
.ae61	ad eb 06	lda $06eb			lda 	gxUseMode 					; scale bits
.ae64	4a		lsr a				lsr 	a
.ae65	4a		lsr a				lsr 	a
.ae66	4a		lsr a				lsr 	a
.ae67	29 07		and #$07			and		#7
.ae69	1a		inc a				inc 	a
.ae6a	8d ea 06	sta $06ea			sta 	gxScale
.ae6d	64 38		stz $38				stz 	gxzTemp1					; start first line
.ae6f					_GXGELoop:
.ae6f	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ae71	2c eb 06	bit $06eb			bit 	gxUseMode 					; check for flip.
.ae74	10 06		bpl $ae7c			bpl		_GXNoVFlip
.ae76	ad e7 06	lda $06e7			lda 	gxMask
.ae79	38		sec				sec
.ae7a	e5 38		sbc $38				sbc 	gxzTemp1
.ae7c					_GXNoVFlip:
.ae7c	aa		tax				tax 								; get the Xth line.
.ae7d	20 bd ae	jsr $aebd			jsr 	_GXCallAcquire 				; get that data.
.ae80	ad ea 06	lda $06ea			lda 	gxScale 					; do scale identical copies of that line.
.ae83	85 39		sta $39				sta 	gxzTemp1+1
.ae85					_GXGELoop2:
.ae85	ad 43 06	lda $0643			lda 	gxY0 						; off screen
.ae88	cd 4d 06	cmp $064d			cmp 	gxHeight
.ae8b	b0 10		bcs $ae9d			bcs 	_GXDGEExit
.ae8d	20 c0 ae	jsr $aec0			jsr 	GXRenderOneLine 			; render line
.ae90	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ae92	d0 f1		bne $ae85			bne 	_GXGELoop2
.ae94	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.ae96	a5 38		lda $38				lda 	gxzTemp1
.ae98	cd e6 06	cmp $06e6			cmp 	gxSize
.ae9b	d0 d2		bne $ae6f			bne 	_GXGELoop
.ae9d					_GXDGEExit:
.ae9d	68		pla				pla 								; restore Y for next time
.ae9e	8d 43 06	sta $0643			sta 	gxY0
.aea1	ae ea 06	ldx $06ea			ldx 	gxScale 					; get scale (1-8)
.aea4					_GXShiftLeft:
.aea4	18		clc				clc
.aea5	ad e6 06	lda $06e6			lda 	gxSize
.aea8	6d 41 06	adc $0641			adc 	gxX0
.aeab	8d 41 06	sta $0641			sta 	gxX0
.aeae	90 03		bcc $aeb3			bcc 	_GXSLNoCarry
.aeb0	ee 42 06	inc $0642			inc 	gxX0+1
.aeb3					_GXSLNoCarry:
.aeb3	ca		dex				dex
.aeb4	d0 ee		bne $aea4			bne 	_GXShiftLeft
.aeb6	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap
.aeb9	18		clc				clc
.aeba	60		rts				rts
.aebb					_GXSLFail:
.aebb	38		sec				sec
.aebc	60		rts				rts
.aebd					_GXCallAcquire:
.aebd	6c e8 06	jmp ($06e8)			jmp 	(gxAcquireVector)
.aec0					GXRenderOneLine:
.aec0	20 fd b0	jsr $b0fd			jsr 	GXPositionCalc 				; calculate position/offset.
.aec3	ac 53 06	ldy $0653			ldy 	gsOffset 					; Y contains position.
.aec6	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.aec8					_GXROLLoop1:
.aec8	ad ea 06	lda $06ea			lda 	gxScale 					; set to do 'scale' times
.aecb	85 3b		sta $3b				sta 	gxzTemp2+1
.aecd					_GXROLLoop2:
.aecd	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.aecf	2c 4e 06	bit $064e			bit 	gxMode 						; check H Flip
.aed2	50 06		bvc $aeda			bvc 	_GXNoHFlip
.aed4	ad e7 06	lda $06e7			lda 	gxMask
.aed7	38		sec				sec
.aed8	e5 3a		sbc $3a				sbc 	gxzTemp2
.aeda					_GXNoHFlip:
.aeda	aa		tax				tax 								; read from the pixel buffer
.aedb	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.aede	d0 07		bne $aee7			bne 	_GXDraw 					; draw if non zero
.aee0	ad eb 06	lda $06eb			lda 	gxUseMode 					; check to see if solid background
.aee3	29 04		and #$04			and 	#4
.aee5	f0 0a		beq $aef1			beq 	_GXZeroPixel
.aee7					_GXDraw:
.aee7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.aee9	2d 51 06	and $0651			and 	gxANDValue
.aeec	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.aeef	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aef1					_GXZeroPixel:
.aef1	c8		iny				iny 								; advance pointer
.aef2	d0 05		bne $aef9			bne 	_GXNoShift
.aef4	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.aef6	20 3b ae	jsr $ae3b			jsr 	GXDLTCheckWrap				; check for new page.
.aef9					_GXNoShift:
.aef9	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.aefb	d0 d0		bne $aecd			bne 	_GXROLLoop2
.aefd	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.aeff	a5 3a		lda $3a				lda 	gxzTemp2
.af01	cd e6 06	cmp $06e6			cmp 	gxSize
.af04	d0 c2		bne $aec8			bne 	_GXROLLoop1
.af06	ee 43 06	inc $0643			inc 	gxY0
.af09	60		rts				rts
.06e6					gxSize:
>06e6							.fill 	1
.06e7					gxMask:
>06e7							.fill 	1
.06e8					gxAcquireVector:
>06e8							.fill 	2
.06ea					gxScale:
>06ea							.fill 	1
.06eb					gxUseMode:
>06eb							.fill 	1
.af0a					GXFontHandler:
.af0a	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.af0c	4d 4e 06	eor $064e			eor 	gxMode
.af0f	8d eb 06	sta $06eb			sta 	gxUseMode
.af12	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.af14	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.af16	26 37		rol $37				rol	 	gxzTemp0+1
.af18	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.af1a	26 37		rol $37				rol	 	gxzTemp0+1
.af1c	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.af1e	26 37		rol $37				rol	 	gxzTemp0+1
.af20	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.af22	09 c0		ora #$c0			ora 	#$C0
.af24	85 37		sta $37				sta 	gxzTemp0+1
.af26	a9 08		lda #$08			lda 	#8 							; size 8x8
.af28	a2 30		ldx #$30			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.af2a	a0 af		ldy #$af			ldy 	#GXGetGraphicDataFont >> 8
.af2c	20 48 ae	jsr $ae48			jsr 	GXDrawGraphicElement
.af2f	60		rts				rts
.af30					GXGetGraphicDataFont:
.af30	8a		txa				txa 								; X->Y
.af31	a8		tay				tay
.af32	a6 01		ldx $01				ldx 	1 							; preserve old value
.af34	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.af36	85 01		sta $01				sta 	1
.af38	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.af3a	86 01		stx $01				stx 	1 							; put old value back.
.af3c	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.af3e					_GXExpand:
.af3e	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.af41	0a		asl a				asl 	a 							; shift bit 7 into C
.af42	90 08		bcc $af4c			bcc 	_GXNoPixel
.af44	48		pha				pha 								; if set, set pixel buffer to current colour.
.af45	ad 4f 06	lda $064f			lda 	gxColour
.af48	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.af4b	68		pla				pla
.af4c					_GXNoPixel:
.af4c	e8		inx				inx 								; do the whole byte.
.af4d	e0 08		cpx #$08			cpx 	#8
.af4f	d0 ed		bne $af3e			bne 	_GXExpand
.af51	60		rts				rts
.af52					GXSpriteHandler:
.af52	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.af54	4d 4e 06	eor $064e			eor 	gxMode
.af57	8d eb 06	sta $06eb			sta 	gxUseMode
.af5a	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.af5c	da		phx				phx
.af5d	20 ed b0	jsr $b0ed			jsr 	GXOpenBitmap 				; can access sprite information
.af60	68		pla				pla
.af61	20 ce b1	jsr $b1ce			jsr 	GXFindSprite 				; get the sprite address
.af64	08		php				php
.af65	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap
.af68	28		plp				plp
.af69	b0 0a		bcs $af75			bcs		_GXSHExit 					; exit if find failed.
.af6b	ad ec 06	lda $06ec			lda 	GXSizePixels 				; return size
.af6e	a2 76		ldx #$76			ldx 	#GXSpriteAcquire & $FF
.af70	a0 af		ldy #$af			ldy 	#GXSpriteAcquire >> 8
.af72	20 48 ae	jsr $ae48			jsr 	GXDrawGraphicElement
.af75					_GXSHExit:
.af75	60		rts				rts
.af76					GXSpriteAcquire:
.af76	ad 4c 06	lda $064c			lda 	GXSpritePage				; point to base page
.af79	85 0b		sta $0b				sta 	GXEditSlot
.af7b	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.af7d	a9 00		lda #$00			lda 	#0
.af7f	ae ed 06	ldx $06ed			ldx 	GXSizeBits
.af82					_GXTimesRowNumber:
.af82	18		clc				clc
.af83	65 36		adc $36				adc 	zTemp0
.af85	ca		dex				dex
.af86	10 fa		bpl $af82			bpl 	_GXTimesRowNumber
.af88	64 37		stz $37				stz 	gxzTemp0+1
.af8a	0a		asl a				asl 	a 							; row x 2,4,6,8
.af8b	26 37		rol $37				rol 	gxzTemp0+1
.af8d	0a		asl a				asl 	a 							; row x 4,8,12,16
.af8e	26 37		rol $37				rol 	gxzTemp0+1
.af90	0a		asl a				asl 	a 							; row x 8,16,24,32
.af91	26 37		rol $37				rol 	gxzTemp0+1
.af93	85 36		sta $36				sta 	gxzTemp0
.af95	18		clc				clc 								; add base address.
.af96	a5 36		lda $36				lda 	gxzTemp0
.af98	6d ef 06	adc $06ef			adc 	GXSpriteOffset
.af9b	85 36		sta $36				sta 	gxzTemp0
.af9d	a5 37		lda $37				lda 	gxzTemp0+1
.af9f	6d f0 06	adc $06f0			adc 	GXSpriteOffset+1
.afa2					_GXSAFindPage:
.afa2	c9 20		cmp #$20			cmp 	#$20 						; on this page
.afa4	90 06		bcc $afac			bcc 	_GXSAFoundPage
.afa6	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.afa8	e6 0b		inc $0b				inc 	GXEditSlot
.afaa	80 f6		bra $afa2			bra 	_GXSAFindPage
.afac					_GXSAFoundPage:
.afac	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.afae	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.afb0	a0 00		ldy #$00			ldy 	#0
.afb2					_GXSACopyLoop:
.afb2	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.afb4	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.afb7	c8		iny				iny
.afb8	cc ec 06	cpy $06ec			cpy 	GXSizePixels
.afbb	d0 f5		bne $afb2			bne 	_GXSACopyLoop
.afbd	60		rts				rts
.afbe					GXSelect:
.afbe	ad 49 06	lda $0649			lda 	gxSpritesOn
.afc1	f0 22		beq $afe5			beq 	_GXSFail
.afc3	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.afc5	c9 40		cmp #$40			cmp 	#64
.afc7	b0 1c		bcs $afe5			bcs 	_GXSFail
.afc9	8d 54 06	sta $0654			sta 	GSCurrentSpriteID
.afcc	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.afce	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.afd0	06 36		asl $36				asl 	gxzTemp0
.afd2	06 36		asl $36				asl 	gxzTemp0
.afd4	06 36		asl $36				asl 	gxzTemp0
.afd6	2a		rol a				rol 	a
.afd7	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.afd9	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.afdc	85 37		sta $37				sta 	gxzTemp0+1
.afde	a5 36		lda $36				lda 	gxzTemp0
.afe0	8d 55 06	sta $0655			sta 	GSCurrentSpriteAddr
.afe3	18		clc				clc
.afe4	60		rts				rts
.afe5					_GXSFail:
.afe5	38		sec				sec
.afe6	60		rts				rts
.afe7					GXSelectImage:
.afe7	ad 49 06	lda $0649			lda 	gxSpritesOn
.afea	f0 74		beq $b060			beq 	_GXSIFail
.afec	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.afef	f0 6f		beq $b060			beq 	_GXSIFail 					; (checking the MSB)
.aff1	64 01		stz $01				stz 	1
.aff3	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.aff5	d0 6b		bne $b062			bne 	_GXSIHide
.aff7	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.aff9	48		pha				pha
.affa	20 ed b0	jsr $b0ed			jsr 	GXOpenBitmap
.affd	68		pla				pla
.affe	20 ce b1	jsr $b1ce			jsr 	GXFindSprite
.b001	b0 5a		bcs $b05d			bcs 	_GXSICloseFail 				; no image
.b003	a0 01		ldy #$01			ldy 	#1
.b005	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr
.b008	85 36		sta $36				sta 	gxzTemp0
.b00a	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1
.b00d	85 37		sta $37				sta 	gxzTemp0+1
.b00f	ad ef 06	lda $06ef			lda 	GXSpriteOffset
.b012	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b014	18		clc				clc
.b015	ad f0 06	lda $06f0			lda 	GXSpriteOffset+1
.b018	6d 57 06	adc $0657			adc 	GXSpriteOffsetBase
.b01b	c8		iny				iny
.b01c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b01e	ad 58 06	lda $0658			lda 	GXSpriteOffsetBase+1
.b021	69 00		adc #$00			adc 	#0
.b023	c8		iny				iny
.b024	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b026	ad ed 06	lda $06ed			lda 	GXSizeBits 					; get raw size
.b029	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b02b	2a		rol a				rol 	a 							; x 2
.b02c	0a		asl a				asl 	a 							; x 4
.b02d	0a		asl a				asl 	a 							; x 8
.b02e	0a		asl a				asl 	a 							; x 16
.b02f	0d ee 06	ora $06ee			ora 	GXSpriteLUT 				; Or with LUT
.b032	0a		asl a				asl 	a 							; 1 shift
.b033	09 01		ora #$01			ora 	#1 							; enable sprite.
.b035	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b037	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap
.b03a	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b03d	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b040	29 3f		and #$3f			and 	#$3F
.b042	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.b045	ad ed 06	lda $06ed			lda 	GXSizeBits 					; get bit size
.b048	6a		ror a				ror 	a 							; shift into bits 6/7
.b049	6a		ror a				ror 	a
.b04a	6a		ror a				ror 	a
.b04b	29 c0		and #$c0			and 	#$C0
.b04d	1d 99 06	ora $0699,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b050	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.b053	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b056	29 7f		and #$7f			and 	#$7F
.b058	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.b05b	18		clc				clc
.b05c	60		rts				rts
.b05d					_GXSICloseFail:
.b05d	20 f5 b0	jsr $b0f5			jsr 	GXCloseBitmap
.b060					_GXSIFail:
.b060	38		sec				sec
.b061	60		rts				rts
.b062					_GXSIHide:
.b062	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b065	85 36		sta $36				sta 	gxzTemp0
.b067	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1
.b06a	85 37		sta $37				sta 	gxzTemp0+1
.b06c	a9 00		lda #$00			lda 	#0
.b06e	92 36		sta ($36)			sta 	(gxzTemp0)
.b070	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; get sprite ID
.b073	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b076	09 80		ora #$80			ora 	#$80
.b078	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.b07b	18		clc				clc
.b07c	60		rts				rts
.b07d					GXMoveSprite:
.b07d	ad 49 06	lda $0649			lda 	gxSpritesOn
.b080	f0 65		beq $b0e7			beq 	_GXSIFail
.b082	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b085	f0 60		beq $b0e7			beq 	_GXSIFail
.b087	85 37		sta $37				sta 	gxzTemp0+1
.b089	a0 04		ldy #$04			ldy 	#4
.b08b	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr
.b08e	85 36		sta $36				sta 	gxzTemp0
.b090	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b093	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b096	2a		rol a				rol 	a	 						; into bits 0,1.
.b097	2a		rol a				rol 	a
.b098	2a		rol a				rol 	a
.b099	29 03		and #$03			and 	#3
.b09b	aa		tax				tax
.b09c	bd e9 b0	lda $b0e9,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b09f	48		pha				pha
.b0a0	18		clc				clc
.b0a1	6d 41 06	adc $0641			adc 	gxX0						; copy position.
.b0a4	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b0a6	c8		iny				iny
.b0a7	ad 42 06	lda $0642			lda 	gxX0+1
.b0aa	69 00		adc #$00			adc 	#0
.b0ac	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b0ae	c8		iny				iny
.b0af	68		pla				pla
.b0b0	18		clc				clc
.b0b1	6d 43 06	adc $0643			adc 	gxY0
.b0b4	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b0b6	a9 00		lda #$00			lda 	#0
.b0b8	69 00		adc #$00			adc 	#0
.b0ba	c8		iny				iny
.b0bb	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b0bd	4e 42 06	lsr $0642			lsr 	gxX0+1 						; divide X by 4
.b0c0	6e 41 06	ror $0641			ror 	gxX0
.b0c3	4e 41 06	lsr $0641			lsr 	gxX0
.b0c6	4e 43 06	lsr $0643			lsr 	gxY0 						; divide Y by 4
.b0c9	4e 43 06	lsr $0643			lsr 	gxY0
.b0cc	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b0cf	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x
.b0d2	29 80		and #$80			and 	#$80
.b0d4	0d 41 06	ora $0641			ora 	gxX0
.b0d7	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.b0da	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b0dd	29 c0		and #$c0			and 	#$C0
.b0df	0d 43 06	ora $0643			ora 	gxY0
.b0e2	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.b0e5	18		clc				clc
.b0e6	60		rts				rts
.b0e7					_GXSIFail:
.b0e7	38		sec				sec
.b0e8	60		rts				rts
.b0e9					_GXMSOffset:
>b0e9	1c						.byte 	32-8/2
>b0ea	18						.byte 	32-16/2
>b0eb	14						.byte 	32-24/2
>b0ec	10						.byte 	32-32/2
.b0ed					GXOpenBitmap:
.b0ed	78		sei				sei 								; no interrupts here
.b0ee	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b0f0	8d 52 06	sta $0652			sta 	gxOriginalLUTValue
.b0f3	58		cli				cli
.b0f4	60		rts				rts
.b0f5					GXCloseBitmap:
.b0f5	78		sei				sei
.b0f6	ad 52 06	lda $0652			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b0f9	85 0b		sta $0b				sta 	GXEditSlot
.b0fb	58		cli				cli
.b0fc	60		rts				rts
.b0fd					GXPositionCalc:
.b0fd	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b0ff	48		pha				pha
.b100	ad 43 06	lda $0643			lda 	GXY0 						; gxzScreen = Y0
.b103	85 3c		sta $3c				sta 	gxzScreen
.b105	64 3d		stz $3d				stz 	gxzScreen+1
.b107	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b109	26 3d		rol $3d				rol 	gxzScreen+1
.b10b	06 3c		asl $3c				asl 	gxzScreen
.b10d	26 3d		rol $3d				rol 	gxzScreen+1
.b10f	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b110	65 3c		adc $3c				adc 	gxzScreen
.b112	85 3c		sta $3c				sta 	gxzScreen
.b114	90 02		bcc $b118			bcc 	_GXPCNoCarry
.b116	e6 3d		inc $3d				inc 	gxzScreen+1
.b118					_GXPCNoCarry:
.b118	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b11a	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b11c	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b11e	85 36		sta $36				sta 	gxzTemp0
.b120	64 3d		stz $3d				stz 	gxzScreen+1
.b122	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b124					_GXPCMultiply32:
.b124	06 3c		asl $3c				asl 	gxzScreen
.b126	26 3d		rol $3d				rol 	gxzScreen+1
.b128	3a		dec a				dec 	a
.b129	d0 f9		bne $b124			bne 	_GXPCMultiply32
.b12b	18		clc				clc
.b12c	ad 41 06	lda $0641			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b12f	65 3c		adc $3c				adc 	gxzScreen
.b131	8d 53 06	sta $0653			sta 	gsOffset
.b134	ad 42 06	lda $0642			lda 	GXX0+1
.b137	65 3d		adc $3d				adc 	gxzScreen+1
.b139	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b13b	90 04		bcc $b141			bcc 	_GXPCNoOverflow
.b13d	29 1f		and #$1f			and 	#$1F 						; fix it up
.b13f	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b141					_GXPCNoOverflow:
.b141	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b143	85 3d		sta $3d				sta 	gxzScreen+1
.b145	64 3c		stz $3c				stz 	gxzScreen
.b147	18		clc				clc
.b148	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b14a	6d 4b 06	adc $064b			adc 	gxBasePage 					; by adding the base page
.b14d	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b14f	68		pla				pla
.b150	85 36		sta $36				sta 	gxzTemp0
.b152	60		rts				rts
.b153					GXMovePositionDown:
.b153	18		clc				clc 								; add 320 to offset/temp+1
.b154	ad 53 06	lda $0653			lda 	gsOffset
.b157	69 40		adc #$40			adc 	#64
.b159	8d 53 06	sta $0653			sta 	gsOffset
.b15c	a5 3d		lda $3d				lda 	gxzScreen+1
.b15e	69 01		adc #$01			adc 	#1
.b160	85 3d		sta $3d				sta 	gxzScreen+1
.b162	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b164	90 07		bcc $b16d			bcc 	_GXMPDExit
.b166	38		sec				sec  								; next page
.b167	e9 20		sbc #$20			sbc 	#$20
.b169	85 3d		sta $3d				sta 	gxzScreen+1
.b16b	e6 0b		inc $0b				inc 	GXEditSlot
.b16d					_GXMPDExit:
.b16d	60		rts				rts
.b16e					GXCollide:
.b16e	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b170	aa		tax				tax
.b171	05 37		ora $37				ora 	gxzTemp0+1
.b173	29 c0		and #$c0			and 	#$C0
.b175	38		sec				sec
.b176	d0 53		bne $b1cb			bne 	_GXCollideFail 				; if either >= 64, fail.
.b178	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b17a	b9 59 06	lda $0659,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b17d	1d 59 06	ora $0659,x			ora 	GXSpriteLow,x
.b180	30 48		bmi $b1ca			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b182	18		clc				clc 								; need to calculate sum of sizes.
.b183	b9 99 06	lda $0699,y			lda 	GXSpriteHigh,y
.b186	7d 99 06	adc $0699,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b189	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b18b	6a		ror a				ror 	a 							; 5/6/7
.b18c	4a		lsr a				lsr 	a 							; 4/5/6
.b18d	4a		lsr a				lsr 	a 							; 3/4/5
.b18e	4a		lsr a				lsr 	a 							; 2/3/4
.b18f	18		clc				clc
.b190	69 08		adc #$08			adc 	#$08
.b192	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b193	4a		lsr a				lsr 	a
.b194	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b196	b9 99 06	lda $0699,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b199	29 3f		and #$3f			and 	#$3F
.b19b	85 39		sta $39				sta 	gxzTemp1+1
.b19d	38		sec				sec
.b19e	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b1a1	29 3f		and #$3f			and 	#$3F
.b1a3	e5 39		sbc $39				sbc 	gxzTemp1+1
.b1a5	b0 03		bcs $b1aa			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b1a7	49 ff		eor #$ff			eor 	#$FF
.b1a9	1a		inc a				inc 	a
.b1aa					_GXCAbs1:
.b1aa	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b1ac	b0 1c		bcs $b1ca			bcs 	_GXOkayFail
.b1ae	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b1b0	38		sec				sec 								; calculate |x1-x0|
.b1b1	b9 59 06	lda $0659,y			lda 	GXSpriteLow,y
.b1b4	fd 59 06	sbc $0659,x			sbc 	GXSpriteLow,x
.b1b7	b0 03		bcs $b1bc			bcs 	_GXCAbs2
.b1b9	49 ff		eor #$ff			eor 	#$FF
.b1bb	1a		inc a				inc 	a
.b1bc					_GXCAbs2:
.b1bc	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b1be	b0 0a		bcs $b1ca			bcs 	_GXOkayFail
.b1c0	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b1c2	90 02		bcc $b1c6			bcc 	_GXCHaveLowest
.b1c4	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b1c6					_GXCHaveLowest:
.b1c6	0a		asl a				asl 	a 							; scale to allow for >> 2
.b1c7	0a		asl a				asl 	a
.b1c8	18		clc				clc
.b1c9	60		rts				rts
.b1ca					_GXOkayFail:
.b1ca	18		clc				clc
.b1cb					_GXCollideFail:
.b1cb	a9 ff		lda #$ff			lda 	#$FF
.b1cd	60		rts				rts
.b1ce					GXFindSprite:
.b1ce	aa		tax				tax
.b1cf	ad 4c 06	lda $064c			lda 	GXSpritePage 				; access the base page of the sprite
.b1d2	85 0b		sta $0b				sta 	GXEditSlot
.b1d4	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b1d7	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b1da	f0 33		beq $b20f			beq 	_GXFSFail
.b1dc	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b1df	8d f0 06	sta $06f0			sta 	GXSpriteOffset+1
.b1e2	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b1e5	48		pha				pha 								; save twice
.b1e6	48		pha				pha
.b1e7	29 03		and #$03			and 	#3 							; get sprite size
.b1e9	8d ed 06	sta $06ed			sta 	GXSizeBits 					; save raw (0-3)
.b1ec	aa		tax				tax
.b1ed	bd 11 b2	lda $b211,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b1f0	8d ec 06	sta $06ec			sta 	GXSizePixels 					; save (8/16/24/32)
.b1f3	68		pla				pla 								; get LUT
.b1f4	4a		lsr a				lsr		a
.b1f5	4a		lsr a				lsr		a
.b1f6	29 03		and #$03			and 	#3
.b1f8	8d ee 06	sta $06ee			sta 	GXSpriteLUT
.b1fb	68		pla				pla 								; address, neeeds to be x 4
.b1fc	29 f0		and #$f0			and 	#$F0
.b1fe	8d ef 06	sta $06ef			sta 	GXSpriteOffset
.b201	0e ef 06	asl $06ef			asl 	GXSpriteOffset
.b204	2e f0 06	rol $06f0			rol 	GXSpriteOffset+1
.b207	0e ef 06	asl $06ef			asl 	GXSpriteOffset
.b20a	2e f0 06	rol $06f0			rol 	GXSpriteOffset+1
.b20d	18		clc				clc
.b20e	60		rts				rts
.b20f					_GXFSFail:
.b20f	38		sec				sec
.b210	60		rts				rts
.b211					_GXFXSSTTable:
>b211	08 10 18 20					.byte 	8,16,24,32
.06ec					GXSizePixels:
>06ec							.fill 	1
.06ed					GXSizeBits:
>06ed							.fill 	1
.06ee					GXSpriteLUT:
>06ee							.fill 	1
.06ef					GXSpriteOffset:
>06ef							.fill 	2
.b215					GXSortXY:
.b215	20 33 b2	jsr $b233			jsr 	GXSortY 					; will be sorted on Y now
.b218	ad 41 06	lda $0641			lda 	gxX0 						; compare X0 v X1
.b21b	cd 45 06	cmp $0645			cmp 	gxX1
.b21e	ad 42 06	lda $0642			lda 	gXX0+1
.b221	ed 46 06	sbc $0646			sbc 	gXX1+1
.b224	90 0c		bcc $b232			bcc 	_GXSXYExit 					; X0 < X1 exit
.b226	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b228	a0 04		ldy #$04			ldy 	#4
.b22a	20 47 b2	jsr $b247			jsr 	GXSwapXY
.b22d	e8		inx				inx
.b22e	c8		iny				iny
.b22f	20 47 b2	jsr $b247			jsr 	GXSwapXY
.b232					_GXSXYExit:
.b232	60		rts				rts
.b233					GXSortY:
.b233	ad 43 06	lda $0643			lda 	gxY0 						; if Y0 >= Y1
.b236	cd 47 06	cmp $0647			cmp 	gxY1
.b239	90 0b		bcc $b246			bcc 	_GXSYSorted
.b23b	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b23d	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b23f					_GXSwap1:
.b23f	20 47 b2	jsr $b247			jsr 	GXSwapXY
.b242	88		dey				dey
.b243	ca		dex				dex
.b244	10 f9		bpl $b23f			bpl 	_GXSwap1
.b246					_GXSYSorted:
.b246	60		rts				rts
.b247					GXSwapXY:
.b247	bd 41 06	lda $0641,x			lda 	gxX0,x
.b24a	48		pha				pha
.b24b	b9 41 06	lda $0641,y			lda 	gxX0,y
.b24e	9d 41 06	sta $0641,x			sta 	gxX0,x
.b251	68		pla				pla
.b252	99 41 06	sta $0641,y			sta 	gxX0,y
.b255	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b72b					KeywordSet0:
>b72b	00 65					.text	0,$65,""               ; $80 !0:EOF
>b72d	00 58					.text	0,$58,""               ; $81 !1:SH1
>b72f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b731	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b737	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b73f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b745	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b74c	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b754	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b75b	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b762	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b768	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b76e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b776	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b77d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b784	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b78b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b793	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b799	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b79f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b7a6	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b7ac	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b7b2	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b7ba	28
>b7bb	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b7c3	28
>b7c4	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b7ca	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b7d0	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b7d6	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b7dd	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b7e5	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b7eb	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b7f1	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b7f6	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b7fa	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b800	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b808	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b80f	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b816	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b81e	43
>b81f	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b825	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b82b	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b832	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b838	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b83c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b842	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b84a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b851	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b856	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b85d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b865	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b86b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b870	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b878	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b87e	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b884	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b889	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b890	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b896	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b89c	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b8a3	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b8a8	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b8ae	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b8b5	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b8ba	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b8be	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b8c6	45
>b8c7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b8cf	45
>b8d0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b8d6	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b8dd	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b8e3	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b8e9	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b8ee	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b8f6	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b8fd	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b905	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>b90b	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>b90f	ff					.text	$FF
.b910					KeywordSet1:
>b910	00 65					.text	0,$65,""               ; $80 !0:EOF
>b912	00 58					.text	0,$58,""               ; $81 !1:SH1
>b914	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b916	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>b91e	4c 45
>b920	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>b928	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>b930	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>b935	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>b93b	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>b940	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>b948	45
>b949	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>b94e	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>b956	53
>b957	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>b95d	ff					.text	$FF
.b95e					KeywordSet2:
>b95e	00 65					.text	0,$65,""               ; $80 !0:EOF
>b960	00 58					.text	0,$58,""               ; $81 !1:SH1
>b962	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b964	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>b969	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>b96e	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>b973	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>b978	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>b97d	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>b982	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>b987	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>b98c	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>b991	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>b996	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>b99b	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>b9a0	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>b9a5	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>b9aa	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>b9af	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>b9b4	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>b9b9	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>b9be	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>b9c3	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>b9c8	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>b9cd	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>b9d2	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>b9d7	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>b9dc	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>b9e1	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>b9e6	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>b9eb	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>b9f0	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>b9f5	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>b9fa	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>b9ff	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>ba04	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>ba09	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>ba0e	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>ba13	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>ba18	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>ba1d	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>ba22	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>ba27	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>ba2c	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>ba31	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>ba36	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>ba3b	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>ba40	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>ba45	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>ba4a	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>ba4f	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>ba54	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>ba59	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>ba5e	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>ba63	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>ba68	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ba6d	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ba72	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ba77	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ba7c	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ba81	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ba86	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ba8b	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ba90	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ba95	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ba9a	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ba9f	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>baa4	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>baa9	ff					.text	$FF
.b256					ListConvertLine:
.b256	9c 9d 04	stz $049d			stz 	tbOffset
.b259	9c aa 04	stz $04aa			stz 	tokenBuffer
.b25c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b25e	b1 30		lda ($30),y			lda 	(codePtr),y
.b260	aa		tax				tax
.b261	88		dey				dey
.b262	b1 30		lda ($30),y			lda 	(codePtr),y
.b264	20 49 92	jsr $9249			jsr 	ConvertInt16
.b267	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b269	86 37		stx $37				stx 	zTemp0+1
.b26b	a0 00		ldy #$00			ldy 	#0
.b26d					_LCCopyNumber:
.b26d	b1 36		lda ($36),y			lda 	(zTemp0),y
.b26f	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b272	c8		iny				iny
.b273	b1 36		lda ($36),y			lda 	(zTemp0),y
.b275	d0 f6		bne $b26d			bne 	_LCCopyNumber
.b277	20 dc 8c	jsr $8cdc			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b27a	48		pha				pha 								; save on stack
.b27b	10 0c		bpl $b289			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b27d	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b27e	6d a6 04	adc $04a6			adc 	listIndent
.b281	8d a6 04	sta $04a6			sta 	listIndent
.b284	10 03		bpl $b289			bpl 	_LCNoAdjust
.b286	9c a6 04	stz $04a6			stz 	listIndent
.b289					_LCNoAdjust:
.b289	18		clc				clc		 							; work out actual indent.
.b28a	ad a6 04	lda $04a6			lda 	listIndent
.b28d	0a		asl a				asl 	a
.b28e	69 06		adc #$06			adc 	#6
.b290	85 36		sta $36				sta 	zTemp0
.b292					_LCPadOut:
.b292	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b294	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b297	ad 9d 04	lda $049d			lda 	tbOffset
.b29a	c5 36		cmp $36				cmp 	zTemp0
.b29c	d0 f4		bne $b292			bne 	_LCPadOut
.b29e	a0 03		ldy #$03			ldy 	#3 							; start position.
.b2a0					_LCMainLoop:
.b2a0	b1 30		lda ($30),y			lda 	(codePtr),y
.b2a2	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b2a4	f0 17		beq $b2bd			beq 	_LCExit
.b2a6	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b2a8	90 1e		bcc $b2c8			bcc 	_LCDoubles
.b2aa	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b2ac	90 2a		bcc $b2d8			bcc 	_LCShiftPunc
.b2ae	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b2b0	90 35		bcc $b2e7			bcc 	_LCPunctuation
.b2b2	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b2b4	90 3e		bcc $b2f4			bcc 	_LCIdentifiers
.b2b6	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b2b8	90 5a		bcc $b314			bcc 	_LCTokens
.b2ba	4c 6f b3	jmp $b36f			jmp 	_LCData 					; 254-5 are data objects
.b2bd					_LCExit:
.b2bd	68		pla				pla 								; get old indent adjust
.b2be	30 07		bmi $b2c7			bmi 	_LCExit2
.b2c0	18		clc				clc 								; add to indent if +ve
.b2c1	6d a6 04	adc $04a6			adc 	listIndent
.b2c4	8d a6 04	sta $04a6			sta 	listIndent
.b2c7					_LCExit2:
.b2c7	60		rts				rts
.b2c8					_LCDoubles:
.b2c8	48		pha				pha
.b2c9	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b2ca	29 02		and #$02			and 	#2
.b2cc	09 3c		ora #$3c			ora 	#60 						; make < >
.b2ce	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b2d1	68		pla				pla 								; restore, do lower bit
.b2d2	29 03		and #$03			and 	#3
.b2d4	09 3c		ora #$3c			ora 	#60
.b2d6	80 0f		bra $b2e7			bra		_LCPunctuation 				; print, increment, loop
.b2d8					_LCShiftPunc:
.b2d8	aa		tax				tax 								; save in X
.b2d9	29 07		and #$07			and 	#7 							; lower 3 bits
.b2db	f0 02		beq $b2df			beq 	_LCNoAdd
.b2dd	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b2df					_LCNoAdd:
.b2df	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b2e1	90 02		bcc $b2e5			bcc 	_LCNoAdd2
.b2e3	09 20		ora #$20			ora 	#32 						; adds $20
.b2e5					_LCNoAdd2:
.b2e5	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b2e7					_LCPunctuation:
.b2e7	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b2e9	d0 03		bne $b2ee			bne 	_LCPContinue
.b2eb	20 aa b3	jsr $b3aa			jsr 	LCDeleteLastSpace
.b2ee					_LCPContinue:
.b2ee	c8		iny				iny 								; consume character
.b2ef	20 9b b3	jsr $b39b			jsr 	LCLWrite 					; write it out.
.b2f2	80 ac		bra $b2a0			bra 	_LCMainLoop 				; go round again.
.b2f4					_LCIdentifiers:
.b2f4	18		clc				clc 								; convert to physical address
.b2f5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b2f7	85 37		sta $37				sta 	zTemp0+1
.b2f9	c8		iny				iny
.b2fa	b1 30		lda ($30),y			lda 	(codePtr),y
.b2fc	85 36		sta $36				sta 	zTemp0
.b2fe	c8		iny				iny
.b2ff	5a		phy				phy 								; save position
.b300	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b302					_LCOutIdentifier:
.b302	c8		iny				iny
.b303	b1 36		lda ($36),y			lda 	(zTemp0),y
.b305	29 7f		and #$7f			and 	#$7F
.b307	20 e9 b3	jsr $b3e9			jsr 	LCLLowerCase
.b30a	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b30d	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b30f	10 f1		bpl $b302			bpl 	_LCOutIdentifier
.b311	7a		ply				ply 								; restore position
.b312	80 8c		bra $b2a0			bra 	_LCMainLoop
.b314					_LCTokens:
.b314	aa		tax				tax 								; token in X
.b315	a9 5e		lda #$5e			lda 	#((KeywordSet2) & $FF)
.b317	85 36		sta $36				sta 	0+zTemp0
.b319	a9 b9		lda #$b9			lda 	#((KeywordSet2) >> 8)
.b31b	85 37		sta $37				sta 	1+zTemp0
.b31d	e0 82		cpx #$82			cpx 	#$82
.b31f	f0 16		beq $b337			beq 	_LCUseShift
.b321	a9 10		lda #$10			lda 	#((KeywordSet1) & $FF)
.b323	85 36		sta $36				sta 	0+zTemp0
.b325	a9 b9		lda #$b9			lda 	#((KeywordSet1) >> 8)
.b327	85 37		sta $37				sta 	1+zTemp0
.b329	e0 81		cpx #$81			cpx 	#$81
.b32b	f0 0a		beq $b337			beq 	_LCUseShift
.b32d	a9 2b		lda #$2b			lda 	#((KeywordSet0) & $FF)
.b32f	85 36		sta $36				sta 	0+zTemp0
.b331	a9 b7		lda #$b7			lda 	#((KeywordSet0) >> 8)
.b333	85 37		sta $37				sta 	1+zTemp0
.b335	80 01		bra $b338			bra 	_LCNoShift
.b337					_LCUseShift:
.b337	c8		iny				iny
.b338					_LCNoShift:
.b338	20 be b3	jsr $b3be			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b33b	b1 30		lda ($30),y			lda 	(codePtr),y
.b33d	aa		tax				tax 								; into X
.b33e					_LCFindText:
.b33e	ca		dex				dex
.b33f	10 0e		bpl $b34f			bpl 	_LCFoundText 				; found text.
.b341	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b343	1a		inc a				inc 	a 							; one extra for size
.b344	38		sec				sec 								; one extra for checksum
.b345	65 36		adc $36				adc 	zTemp0 						; go to next token
.b347	85 36		sta $36				sta 	zTemp0
.b349	90 f3		bcc $b33e			bcc 	_LCFindText
.b34b	e6 37		inc $37				inc 	zTemp0+1
.b34d	80 ef		bra $b33e			bra 	_LCFindText
.b34f					_LCFoundText:
.b34f	5a		phy				phy 								; save List position
.b350	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b352	aa		tax				tax
.b353	a0 02		ldy #$02			ldy 	#2
.b355					_LCCopyToken:
.b355	b1 36		lda ($36),y			lda 	(zTemp0),y
.b357	20 e9 b3	jsr $b3e9			jsr 	LCLLowerCase
.b35a	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b35d	c8		iny				iny
.b35e	ca		dex				dex
.b35f	d0 f4		bne $b355			bne 	_LCCopyToken
.b361	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b363	f0 05		beq $b36a			beq 	_LCNoSpace
.b365	a9 20		lda #$20			lda 	#' '
.b367	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b36a					_LCNoSpace:
.b36a	7a		ply				ply 								; restore position.
.b36b	c8		iny				iny 								; consume token
.b36c	4c a0 b2	jmp $b2a0			jmp 	_LCMainLoop 				; and go around again.
.b36f					_LCData:
.b36f	48		pha				pha 								; save type $FE/$FF
.b370	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b372	c9 fe		cmp #$fe			cmp 	#$FE
.b374	f0 02		beq $b378			beq 	_LCHaveOpener
.b376	a2 22		ldx #$22			ldx 	#'"'
.b378					_LCHaveOpener:
.b378	8a		txa				txa 								; output prefix (# or ")
.b379	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b37c	c8		iny				iny 								; get count
.b37d	b1 30		lda ($30),y			lda 	(codePtr),y
.b37f	aa		tax				tax
.b380	c8		iny				iny 								; point at first character
.b381					_LCOutData:
.b381	b1 30		lda ($30),y			lda 	(codePtr),y
.b383	c9 00		cmp #$00			cmp 	#0
.b385	f0 03		beq $b38a			beq 	_LCNoPrint
.b387	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b38a					_LCNoPrint:
.b38a	c8		iny				iny
.b38b	ca		dex				dex
.b38c	d0 f3		bne $b381			bne 	_LCOutData
.b38e	68		pla				pla 								; closing " required ?
.b38f	c9 ff		cmp #$ff			cmp 	#$FF
.b391	d0 05		bne $b398			bne 	_LCNoQuote
.b393	a9 22		lda #$22			lda 	#'"'
.b395	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b398					_LCNoQuote:
.b398	4c a0 b2	jmp $b2a0			jmp 	_LCMainLoop
.b39b					LCLWrite:
.b39b	da		phx				phx
.b39c	ae 9d 04	ldx $049d			ldx 	tbOffset
.b39f	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.b3a2	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.b3a5	ee 9d 04	inc $049d			inc 	tbOffset
.b3a8	fa		plx				plx
.b3a9	60		rts				rts
.b3aa					LCDeleteLastSpace:
.b3aa	48		pha				pha
.b3ab	da		phx				phx
.b3ac	ae 9d 04	ldx $049d			ldx 	tbOffset
.b3af	f0 0a		beq $b3bb			beq 	_LCDLSExit
.b3b1	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.b3b4	c9 20		cmp #$20			cmp 	#' '
.b3b6	d0 03		bne $b3bb			bne 	_LCDLSExit
.b3b8	ce 9d 04	dec $049d			dec 	tbOffset
.b3bb					_LCDLSExit:
.b3bb	fa		plx				plx
.b3bc	68		pla				pla
.b3bd	60		rts				rts
.b3be					LCCheckSpaceRequired:
.b3be	ae 9d 04	ldx $049d			ldx 	tbOffset
.b3c1	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.b3c4	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b3c6	f0 1b		beq $b3e3			beq 	_LCCSRSpace
.b3c8	c9 29		cmp #$29			cmp 	#')'
.b3ca	f0 17		beq $b3e3			beq 	_LCCSRSpace
.b3cc	c9 23		cmp #$23			cmp 	#'#'
.b3ce	f0 13		beq $b3e3			beq 	_LCCSRSpace
.b3d0	20 e9 b3	jsr $b3e9			jsr 	LCLLowerCase 				; saves a little effort
.b3d3	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b3d5	90 11		bcc $b3e8			bcc 	_LCCSRExit
.b3d7	c9 3a		cmp #$3a			cmp 	#"9"+1
.b3d9	90 08		bcc $b3e3			bcc 	_LCCSRSpace
.b3db	c9 61		cmp #$61			cmp 	#"a"
.b3dd	90 09		bcc $b3e8			bcc 	_LCCSRExit
.b3df	c9 7b		cmp #$7b			cmp 	#"z"+1
.b3e1	b0 05		bcs $b3e8			bcs 	_LCCSRExit
.b3e3					_LCCSRSpace:
.b3e3	a9 20		lda #$20			lda 	#' '
.b3e5	20 9b b3	jsr $b39b			jsr 	LCLWrite
.b3e8					_LCCSRExit:
.b3e8	60		rts				rts
.b3e9					LCLLowerCase:
.b3e9	c9 41		cmp #$41			cmp 	#"A"
.b3eb	90 06		bcc $b3f3			bcc 	_LCLLCOut
.b3ed	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b3ef	b0 02		bcs $b3f3			bcs 	_LCLLCOut
.b3f1	69 20		adc #$20			adc 	#$20
.b3f3					_LCLLCOut:
.b3f3	60		rts				rts
.b3f4					LCLUpperCase:
.b3f4	c9 61		cmp #$61			cmp 	#"a"
.b3f6	90 06		bcc $b3fe			bcc 	_LCLUCOut
.b3f8	c9 7b		cmp #$7b			cmp 	#"z"+1
.b3fa	b0 02		bcs $b3fe			bcs 	_LCLUCOut
.b3fc	e9 1f		sbc #$1f			sbc 	#$1F
.b3fe					_LCLUCOut:
.b3fe	60		rts				rts
.b3ff					TokeniseSearchTable:
.b3ff	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b401	85 36		sta $36				sta 	zTemp0
.b403	a0 00		ldy #$00			ldy 	#0
.b405	a9 80		lda #$80			lda 	#$80 						; token #
.b407	85 38		sta $38				sta 	zTemp1
.b409					_TSTLoop:
.b409	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b40b	30 49		bmi $b456			bmi 	_TSTFail 					; -ve = end of table
.b40d	f0 2e		beq $b43d			beq 	_TSTNext 					; zero, check next it's a dummy
.b40f	c8		iny				iny 								; get the hash
.b410	b1 36		lda ($36),y			lda 	(zTemp0),y
.b412	88		dey				dey
.b413	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b416	d0 25		bne $b43d			bne 	_TSTNext
.b418	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b41b	38		sec				sec
.b41c	ed 80 04	sbc $0480			sbc 	identStart
.b41f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b421	d0 1a		bne $b43d			bne 	_TSTNext
.b423	5a		phy				phy 								; save Y , we might fail
.b424	c8		iny				iny 								; point to text
.b425	c8		iny				iny
.b426	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b429					_TSTCompareName:
.b429	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.b42c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b42e	d0 0c		bne $b43c			bne 	_TSTNextPullY 				; fail, pullY and do next
.b430	e8		inx				inx
.b431	c8		iny				iny
.b432	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b435	d0 f2		bne $b429			bne 	_TSTCompareName
.b437	7a		ply				ply 								; throw Y
.b438	a5 38		lda $38				lda 	zTemp1 						; get token #
.b43a	38		sec				sec 								; return with CS = passed.
.b43b	60		rts				rts
.b43c					_TSTNextPullY:
.b43c	7a		ply				ply 								; restore current, fall through.
.b43d					_TSTNext:
.b43d	e6 38		inc $38				inc 	zTemp1 						; token counter
.b43f	98		tya				tya
.b440	18		clc				clc
.b441	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b443	1a		inc a				inc 	a 							; +1
.b444	1a		inc a				inc 	a 							; +2
.b445	a8		tay				tay
.b446	10 c1		bpl $b409			bpl 	_TSTLoop 					; if Y < $80 loop back
.b448	98		tya				tya 								; add Y to zTemp0 and reset Y
.b449	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b44b	18		clc				clc  								; but have tables > 255 bytes
.b44c	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b44e	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b450	90 b7		bcc $b409			bcc 	_TSTLoop
.b452	e6 37		inc $37				inc 	zTemp0+1
.b454	80 b3		bra $b409			bra 	_TSTLoop
.b456					_TSTFail:
.b456	18		clc				clc
.b457	60		rts				rts
.b458					TokeniseLine:
.b458	20 e0 b5	jsr $b5e0			jsr 	FixLineBufferCase 			; fix line case
.b45b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b45d	8d a7 04	sta $04a7			sta 	tokenOffset
.b460	9c a8 04	stz $04a8			stz 	tokenLineNumber
.b463	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.b466	a2 ff		ldx #$ff			ldx 	#$FF
.b468					_TKFindFirst:
.b468	e8		inx				inx
.b469	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b46c	f0 79		beq $b4e7			beq 	_TKExit
.b46e	c9 20		cmp #$20			cmp 	#' '
.b470	90 f6		bcc $b468			bcc 	_TKFindFirst
.b472	c9 30		cmp #$30			cmp 	#'0'
.b474	90 07		bcc $b47d			bcc 	_TKNoLineNumber
.b476	c9 3a		cmp #$3a			cmp 	#'9'+1
.b478	b0 03		bcs $b47d			bcs 	_TKNoLineNumber
.b47a	20 0a b6	jsr $b60a			jsr 	TokeniseExtractLineNumber
.b47d					_TKNoLineNumber:
.b47d					_TKTokeniseLoop:
.b47d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b480	f0 65		beq $b4e7			beq 	_TKExit
.b482	e8		inx				inx
.b483	c9 20		cmp #$20			cmp 	#' '
.b485	f0 f6		beq $b47d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b487	ca		dex				dex 								; undo last get, A contains character, X is position.
.b488	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b48a	f0 61		beq $b4ed			beq 	_TKTokeniseIdentifier
.b48c	c9 41		cmp #$41			cmp 	#'A'
.b48e	90 04		bcc $b494			bcc 	_TKTokenisePunctuation
.b490	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b492	90 59		bcc $b4ed			bcc 	_TKTokeniseIdentifier
.b494					_TKTokenisePunctuation:
.b494	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b496	f0 27		beq $b4bf			beq 	_TKString
.b498	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b49a	f0 28		beq $b4c4			beq 	_TKHexConstant
.b49c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b49e	f0 29		beq $b4c9			beq 	_TKCheckDouble
.b4a0	c9 3e		cmp #$3e			cmp 	#'>'
.b4a2	f0 25		beq $b4c9			beq 	_TKCheckDouble
.b4a4					_TKStandardPunctuation:
.b4a4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.b4a7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b4a9	90 0e		bcc $b4b9			bcc 	_TKNoShift
.b4ab	48		pha				pha 								; save
.b4ac	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b4ae	85 36		sta $36				sta 	zTemp0
.b4b0	68		pla				pla
.b4b1	29 20		and #$20			and 	#32 						; bit 5
.b4b3	4a		lsr a				lsr 	a 							; shift into bit 3
.b4b4	4a		lsr a				lsr 	a
.b4b5	05 36		ora $36				ora 	zTemp0
.b4b7	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b4b9					_TKNoShift:
.b4b9	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte 			; write the punctuation character
.b4bc	e8		inx				inx 								; consume the character
.b4bd	80 be		bra $b47d			bra 	_TKTokeniseLoop 			; and loop round again.
.b4bf					_TKString:
.b4bf	20 6f b5	jsr $b56f			jsr 	TokeniseString
.b4c2	80 b9		bra $b47d			bra 	_TKTokeniseLoop
.b4c4					_TKHexConstant:
.b4c4	20 aa b5	jsr $b5aa			jsr 	TokeniseHexConstant
.b4c7	80 b4		bra $b47d			bra 	_TKTokeniseLoop
.b4c9					_TKCheckDouble:
.b4c9	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.b4cc	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b4ce	90 d4		bcc $b4a4			bcc 	_TKStandardPunctuation
.b4d0	c9 3f		cmp #$3f			cmp 	#'>'+1
.b4d2	b0 d0		bcs $b4a4			bcs 	_TKStandardPunctuation
.b4d4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b4d7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b4d9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b4da	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b4dd	38		sec				sec
.b4de	e9 3c		sbc #$3c			sbc 	#'<'
.b4e0	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b4e3	e8		inx				inx 								; consume both
.b4e4	e8		inx				inx
.b4e5	80 96		bra $b47d			bra 	_TKTokeniseLoop
.b4e7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b4e9	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b4ec	60		rts				rts
.b4ed					_TKTokeniseIdentifier:
.b4ed	8e 80 04	stx $0480			stx 	identStart 					; save start
.b4f0	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b4f3					_TKCheckLoop:
.b4f3	e8		inx				inx 								; look at next, we know first is identifier.
.b4f4	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.b4f7	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b4f9	f0 f8		beq $b4f3			beq 	_TKCheckLoop
.b4fb	c9 30		cmp #$30			cmp	 	#"0"
.b4fd	90 0c		bcc $b50b			bcc 	_TKEndIdentifier
.b4ff	c9 3a		cmp #$3a			cmp 	#"9"+1
.b501	90 f0		bcc $b4f3			bcc 	_TKCheckLoop
.b503	c9 41		cmp #$41			cmp	 	#"A"
.b505	90 04		bcc $b50b			bcc 	_TKEndIdentifier
.b507	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b509	90 e8		bcc $b4f3			bcc 	_TKCheckLoop
.b50b					_TKEndIdentifier:
.b50b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b50e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b510	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b512	f0 06		beq $b51a			beq 	_TKHasTypeCharacter
.b514	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b516	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b518	d0 07		bne $b521			bne 	_TKNoTypeCharacter
.b51a					_TKHasTypeCharacter:
.b51a	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b51d	e8		inx				inx 								; read next
.b51e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b521					_TKNoTypeCharacter:
.b521	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b523	d0 09		bne $b52e			bne 	_TKNoArray
.b525	e8		inx				inx 								; skip the (
.b526	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b529	09 04		ora #$04			ora 	#$04
.b52b	8d 84 04	sta $0484			sta 	identTypeByte
.b52e					_TKNoArray:
.b52e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b531	20 cb b5	jsr $b5cb			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b534	a0 b7		ldy #$b7			ldy 	#(KeywordSet0) >> 8
.b536	a9 2b		lda #$2b			lda 	#(KeywordSet0) & $FF
.b538	20 ff b3	jsr $b3ff			jsr 	TokeniseSearchTable
.b53b	a2 00		ldx #$00			ldx 	#0
.b53d	b0 1f		bcs $b55e			bcs 	_TKFoundToken
.b53f	a0 b9		ldy #$b9			ldy 	#(KeywordSet1) >> 8
.b541	a9 10		lda #$10			lda 	#(KeywordSet1) & $FF
.b543	20 ff b3	jsr $b3ff			jsr 	TokeniseSearchTable
.b546	a2 81		ldx #$81			ldx 	#$81
.b548	b0 14		bcs $b55e			bcs 	_TKFoundToken
.b54a	a0 b9		ldy #$b9			ldy 	#(KeywordSet2) >> 8
.b54c	a9 5e		lda #$5e			lda 	#(KeywordSet2) & $FF
.b54e	20 ff b3	jsr $b3ff			jsr 	TokeniseSearchTable
.b551	a2 82		ldx #$82			ldx 	#$82
.b553	b0 09		bcs $b55e			bcs 	_TKFoundToken
.b555	20 5b b6	jsr $b65b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b558	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b55b	4c 7d b4	jmp $b47d			jmp 	_TKTokeniseLoop 			; and go round again.
.b55e					_TKFoundToken:
.b55e	48		pha				pha 								; save token
.b55f	8a		txa				txa 								; shift in X, is there one ?
.b560	f0 03		beq $b565			beq 	_TKNoTShift
.b562	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte 			; if so, write it out
.b565					_TKNoTShift:
.b565	68		pla				pla 								; restore and write token
.b566	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b569	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b56c	4c 7d b4	jmp $b47d			jmp 	_TKTokeniseLoop 			; and go round again.
.b56f					TokeniseString:
.b56f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b571	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b574	e8		inx				inx									; start of quoted string.
.b575	da		phx				phx 								; push start of string on top
.b576	ca		dex				dex
.b577					_TSFindEnd:
.b577	e8		inx				inx
.b578	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.b57b	f0 04		beq $b581			beq 	_TSEndOfString
.b57d	c9 22		cmp #$22			cmp 	#'"'
.b57f	d0 f6		bne $b577			bne 	_TSFindEnd
.b581					_TSEndOfString:
.b581	7a		ply				ply  								; so now Y is first character, X is character after end.
.b582	48		pha				pha 								; save terminating character
.b583	20 8b b5	jsr $b58b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b586	68		pla				pla 								; terminating character
.b587	f0 01		beq $b58a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b589	e8		inx				inx
.b58a					_TSNotQuote:
.b58a	60		rts				rts
.b58b					TOWriteBlockXY:
.b58b	86 36		stx $36				stx 	zTemp0 						; write end character
.b58d	98		tya				tya
.b58e	49 ff		eor #$ff			eor 	#$FF
.b590	38		sec				sec
.b591	65 36		adc $36				adc 	zTemp0
.b593	1a		inc a				inc 	a 							; one extra for NULL
.b594	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b597					_TOBlockLoop:
.b597	c4 36		cpy $36				cpy 	zTemp0
.b599	f0 09		beq $b5a4			beq 	_TOBlockExit
.b59b	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.b59e	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b5a1	c8		iny				iny
.b5a2	80 f3		bra $b597			bra 	_TOBlockLoop
.b5a4					_TOBlockExit:
.b5a4	a9 00		lda #$00			lda 	#0
.b5a6	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b5a9	60		rts				rts
.b5aa					TokeniseHexConstant:
.b5aa	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b5ac	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b5af	e8		inx				inx									; start of quoted string.
.b5b0	da		phx				phx 								; push start of constant on top
.b5b1	ca		dex				dex
.b5b2					_THFindLoop:
.b5b2	e8		inx				inx
.b5b3	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b5b6	c9 30		cmp #$30			cmp 	#"0"
.b5b8	90 0c		bcc $b5c6			bcc 	_THFoundEnd
.b5ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5bc	90 f4		bcc $b5b2			bcc 	_THFindLoop
.b5be	c9 41		cmp #$41			cmp 	#"A"
.b5c0	90 04		bcc $b5c6			bcc 	_THFoundEnd
.b5c2	c9 47		cmp #$47			cmp 	#"F"+1
.b5c4	90 ec		bcc $b5b2			bcc 	_THFindLoop
.b5c6					_THFoundEnd:
.b5c6	7a		ply				ply 								; restore start
.b5c7	20 8b b5	jsr $b58b			jsr 	TOWriteBlockXY 				; output the block
.b5ca	60		rts				rts
.b5cb					TokeniseCalculateHash:
.b5cb	da		phx				phx
.b5cc	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b5cf	a9 00		lda #$00			lda 	#0
.b5d1					_TCHLoop:
.b5d1	18		clc				clc
.b5d2	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.b5d5	e8		inx				inx
.b5d6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b5d9	d0 f6		bne $b5d1			bne 	_TCHLoop
.b5db	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b5de	fa		plx				plx
.b5df	60		rts				rts
.b5e0					FixLineBufferCase:
.b5e0	a2 00		ldx #$00			ldx 	#0
.b5e2					_FLBCLoop:
.b5e2	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.b5e5	f0 22		beq $b609			beq 	_FLBCExit 					; end of string.
.b5e7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b5e9	f0 11		beq $b5fc			beq 	_FLBCInQuotes
.b5eb	e8		inx				inx
.b5ec	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b5ee	90 f2		bcc $b5e2			bcc 	_FLBCLoop
.b5f0	c9 7b		cmp #$7b			cmp 	#'z'+1
.b5f2	b0 ee		bcs $b5e2			bcs 	_FLBCLoop
.b5f4	38		sec				sec 								; make U/C
.b5f5	e9 20		sbc #$20			sbc 	#32
.b5f7	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.b5fa	80 e6		bra $b5e2			bra 	_FLBCLoop
.b5fc					_FLBCInQuotes:
.b5fc	e8		inx				inx 								; advance
.b5fd	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.b600	f0 07		beq $b609			beq 	_FLBCExit 					; exit on EOS
.b602	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b604	d0 f6		bne $b5fc			bne 	_FLBCInQuotes
.b606	e8		inx				inx 								; skip over it
.b607	80 d9		bra $b5e2			bra 	_FLBCLoop
.b609					_FLBCExit:
.b609	60		rts				rts
.b60a					TokeniseExtractLineNumber:
.b60a	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.b60d	48		pha				pha
.b60e	ad a8 04	lda $04a8			lda 	tokenLineNumber
.b611	48		pha				pha
.b612	20 48 b6	jsr $b648			jsr 	_TELNTimes2 				; line # x 4
.b615	20 48 b6	jsr $b648			jsr 	_TELNTimes2 				; line # x 2
.b618	18		clc				clc 								; add stacked value
.b619	68		pla				pla
.b61a	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b61d	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b620	68		pla				pla
.b621	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.b624	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.b627	20 48 b6	jsr $b648			jsr 	_TELNTimes2 				; line # x 10
.b62a	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.b62d	e8		inx				inx
.b62e	29 0f		and #$0f			and 	#15 						; add to line #
.b630	18		clc				clc
.b631	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b634	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b637	90 03		bcc $b63c			bcc 	_TLENNoCarry
.b639	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.b63c					_TLENNoCarry:
.b63c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.b63f	c9 30		cmp #$30			cmp 	#'0'
.b641	90 04		bcc $b647			bcc 	_TLENExit
.b643	c9 3a		cmp #$3a			cmp 	#'9'+1
.b645	90 c3		bcc $b60a			bcc 	TokeniseExtractLineNumber
.b647					_TLENExit:
.b647	60		rts				rts
.b648					_TELNTimes2:
.b648	0e a8 04	asl $04a8			asl 	tokenLineNumber
.b64b	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.b64e	60		rts				rts
.b64f					TokeniseWriteByte:
.b64f	da		phx				phx
.b650	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.b653	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.b656	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.b659	fa		plx				plx
.b65a	60		rts				rts
.b65b					CheckCreateVariableRecord:
.b65b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b65d	85 36		sta $36				sta 	0+zTemp0
.b65f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b661	85 37		sta $37				sta 	1+zTemp0
.b663					_CCVSearch:
.b663	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b665	f0 2c		beq $b693			beq 	_CCVFail
.b667	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b669	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b66b	cd 83 04	cmp $0483			cmp 	identHash
.b66e	d0 16		bne $b686			bne 	_CCVNext
.b670	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b672	ae 80 04	ldx $0480			ldx 	identStart
.b675					_CCVCompare:
.b675	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b678	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b67a	e8		inx				inx 								; advance pointers
.b67b	c8		iny				iny
.b67c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b67d	d0 07		bne $b686			bne 	_CCVNext  					; didn't match go to next.
.b67f	90 f4		bcc $b675			bcc 	_CCVCompare 				; not finished yet.
.b681	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b684	f0 41		beq $b6c7			beq 	_CCVFound 					; yes, we were successful
.b686					_CCVNext:
.b686	18		clc				clc
.b687	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b689	65 36		adc $36				adc 	zTemp0
.b68b	85 36		sta $36				sta 	zTemp0
.b68d	90 d4		bcc $b663			bcc 	_CCVSearch
.b68f	e6 37		inc $37				inc 	zTemp0+1
.b691	80 d0		bra $b663			bra 	_CCVSearch
.b693					_CCVFail:
.b693	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b695	ad 83 04	lda $0483			lda 	identHash
.b698	91 36		sta ($36),y			sta 	(zTemp0),y
.b69a	c8		iny				iny 								; offset 2 is the type byte
.b69b	ad 84 04	lda $0484			lda 	identTypeByte
.b69e	91 36		sta ($36),y			sta 	(zTemp0),y
.b6a0	c8		iny				iny
.b6a1					_CCVData:
.b6a1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b6a3	91 36		sta ($36),y			sta 	(zTemp0),y
.b6a5	c8		iny				iny
.b6a6	c0 08		cpy #$08			cpy 	#8
.b6a8	90 f7		bcc $b6a1			bcc 	_CCVData
.b6aa	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b6ad					_CCVCopyName:
.b6ad	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b6b0	91 36		sta ($36),y			sta 	(zTemp0),y
.b6b2	e8		inx				inx
.b6b3	c8		iny				iny
.b6b4	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b6b7	d0 f4		bne $b6ad			bne 	_CCVCopyName
.b6b9	98		tya				tya 								; patch offset
.b6ba	92 36		sta ($36)			sta 	(zTemp0)
.b6bc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b6be	91 36		sta ($36),y			sta 	(zTemp0),y
.b6c0	88		dey				dey
.b6c1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b6c3	09 80		ora #$80			ora 	#$80
.b6c5	91 36		sta ($36),y			sta 	(zTemp0),y
.b6c7					_CCVFound:
.b6c7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b6c9	38		sec				sec
.b6ca	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b6cc	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b6ce	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b6d1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b6d3	20 4f b6	jsr $b64f			jsr 	TokeniseWriteByte
.b6d6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
