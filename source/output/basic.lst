
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Nov  3 11:03:59 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 eb b6	jsr $b6eb			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 32 9b	jsr $9b32			jsr 	PrintStringXA
.8014	20 0f 94	jsr $940f			jsr 	NewCommand 					; erase current program
.8017	20 3a a8	jsr $a83a			jsr 	BackloadProgram
.801a	4c ce 95	jmp $95ce			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 68			.text "Built Thursday 03-Nov-2022. Build 2636."
>8065	75 72 73 64 61 79 20 30 33 2d 4e 6f 76 2d 32 30
>8075	32 32 2e 20 42 75 69 6c 64 20 32 36 33 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSpriteID:
>0646							.fill 	1
.0647					GSCurrentSpriteAddr:
>0647							.fill 	2
.0649					GXSpriteOffsetBase:
>0649							.fill 	2
.064b					GXSpriteLow:
>064b							.fill 	64
.068b					GXSpriteHigh:
>068b							.fill 	64

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8087					GXGraphicDraw:
.8087	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use coordinates
.8089	b0 06		bcs $8091			bcs 	_GDCoordinate
.808b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808d	84 37		sty $37				sty 	gxzTemp0+1
.808f	80 4b		bra $80dc			bra 	_GDExecuteA 				; and execute
.8091					_GDCoordinate:
.8091	48		pha				pha 								; save AXY
.8092	da		phx				phx
.8093	5a		phy				phy
.8094	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8096					_GDCopy1:
.8096	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8099	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809c	ca		dex				dex
.809d	10 f7		bpl $8096			bpl 	_GDCopy1
.809f	68		pla				pla 								; update Y
.80a0	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a3	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a6	68		pla				pla
.80a7	8d 2a 06	sta $062a			sta 	gxCurrentX
.80aa	68		pla				pla 								; get A (command+X.1) back
.80ab	48		pha				pha
.80ac	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ae	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b1	68		pla				pla 								; get command back
.80b2	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b4	48		pha				pha 								; push back.
.80b5	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b7	f0 17		beq $80d0			beq 	_GDCopyToWorkArea
.80b9	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bc	f0 07		beq $80c5			beq 	_GDCheckY
.80be	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c1	c9 40		cmp #$40			cmp 	#64
.80c3	b0 08		bcs $80cd			bcs 	_GDError1
.80c5					_GDCheckY:
.80c5	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c8	cd 3e 06	cmp $063e			cmp 	gxHeight
.80cb	90 03		bcc $80d0			bcc 	_GDCopyToWorkArea
.80cd					_GDError1:
.80cd	68		pla				pla
.80ce					_GDError2:
.80ce	38		sec				sec
.80cf	60		rts				rts
.80d0					_GDCopyToWorkArea:
.80d0	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d2					_GDCopy2:
.80d2	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d5	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d8	ca		dex				dex
.80d9	10 f7		bpl $80d2			bpl 	_GDCopy2
.80db	68		pla				pla 								; get command
.80dc					_GDExecuteA:
.80dc	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80de	b0 ee		bcs $80ce			bcs 	_GDError2
.80e0	aa		tax				tax
.80e1	7c e7 80	jmp ($80e7,x)			jmp 	(GRVectorTable,x)
.80e4					GXMove:
.80e4	18		clc				clc
.80e5	60		rts				rts
.80e6					GRUndefined:
>80e6	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e7					GRVectorTable:
>80e7	b6 82					.word	GXInitialise             ; $00 Initialise
>80e9	d0 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80eb	18 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ed	68 82					.word	GXClearBitmap            ; $03 Clear
>80ef	a7 84					.word	GXSetColourMode          ; $04 Colour
>80f1	6f 86					.word	GXFontHandler            ; $05 DrawFont
>80f3	b7 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f5	23 87					.word	GXSelect                 ; $07 SPRUSE
>80f7	4c 87					.word	GXSelectImage            ; $08 SPRIMG
>80f9	e1 88					.word	GXCollide                ; $09 COLLIDE
>80fb	e6 80					.word	GRUndefined              ; $0a
>80fd	e6 80					.word	GRUndefined              ; $0b
>80ff	e6 80					.word	GRUndefined              ; $0c
>8101	e6 80					.word	GRUndefined              ; $0d
>8103	e6 80					.word	GRUndefined              ; $0e
>8105	e6 80					.word	GRUndefined              ; $0f
>8107	e4 80					.word	GXMove                   ; $10 Move
>8109	75 83					.word	GXLine                   ; $11 Line
>810b	f0 84					.word	GXFrameRectangle         ; $12 FrameRect
>810d	ed 84					.word	GXFillRectangle          ; $13 FillRect
>810f	1f 81					.word	GXFrameCircle            ; $14 FrameCircle
>8111	1b 81					.word	GXFillCircle             ; $15 FillCircle
>8113	e6 80					.word	GRUndefined              ; $16
>8115	e6 80					.word	GRUndefined              ; $17
>8117	d5 84					.word	GXPlotPoint              ; $18 Plot
>8119	e2 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811b					GXFillCircle:
.811b	a9 ff		lda #$ff			lda 	#255
.811d	80 02		bra $8121			bra 	GXCircle
.811f					GXFrameCircle:
.811f	a9 00		lda #$00			lda 	#0
.8121					GXCircle:
.8121	8d ce 06	sta $06ce			sta 	gxIsFillMode					; save Fill flag
.8124	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8127	f0 26		beq $814f			beq 	_GXCFail
.8129	20 88 89	jsr $8988			jsr 	GXSortXY 					; topleft/bottomright
.812c	20 52 88	jsr $8852			jsr 	GXOpenBitmap 				; start drawing
.812f	20 21 82	jsr $8221			jsr 	GXCircleSetup 				; set up for drawing
.8132	9c cf 06	stz $06cf			stz 	gxYChanged
.8135					_GXCircleDraw:
.8135	ad cc 06	lda $06cc			lda 	gXCentre					; while x <= y
.8138	cd cd 06	cmp $06cd			cmp 	gYCentre
.813b	90 0a		bcc $8147			bcc 	_GXCircleContinue
.813d	d0 03		bne $8142			bne 	_GXNoLast
.813f	20 54 81	jsr $8154			jsr 	GXPlot1
.8142					_GXNoLast:
.8142	20 63 88	jsr $8863			jsr 	GXCloseBitmap 				; close the bitmap
.8145	18		clc				clc
.8146	60		rts				rts
.8147					_GXCircleContinue:
.8147	20 51 81	jsr $8151			jsr 	GXPlot2 					; draw it
.814a	20 ce 81	jsr $81ce			jsr 	GXCircleMove 				; adjust the coordinates
.814d	80 e6		bra $8135			bra 	_GXCircleDraw
.814f					_GXCFail:
.814f	38		sec				sec
.8150	60		rts				rts
.8151					GXPlot2:
.8151	20 54 81	jsr $8154			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8154					GXPlot1:
.8154	ad cd 06	lda $06cd			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8157	f0 03		beq $815c			beq 	_GXPlot1Only
.8159	20 78 81	jsr $8178			jsr 	GXPlot0 						; plot and negate
.815c					_GXPlot1Only:
.815c	20 78 81	jsr $8178			jsr 	GXPlot0 						; twice, undoing negation
.815f	ad cc 06	lda $06cc			lda 	gXCentre 						; swap X and Y
.8162	ae cd 06	ldx $06cd			ldx	 	gYCentre
.8165	8d cd 06	sta $06cd			sta 	gYCentre
.8168	8e cc 06	stx $06cc			stx 	gXCentre
.816b	ad cf 06	lda $06cf			lda 	gxYChanged 						; toggle Y Changed flag
.816e	a9 ff		lda #$ff			lda 	#$FF
.8170	8d cf 06	sta $06cf			sta 	gxYChanged
.8173	60		rts				rts
.8174	20 78 81	jsr $8178			jsr 	GXPlot0 						; do once
.8177	60		rts				rts
.8178	ad ce 06	lda $06ce	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817b	f0 05		beq $8182			beq 	_GXPlot0Always
.817d	ad cf 06	lda $06cf			lda 	gxYChanged						; fill mode, only draw if changed.
.8180	f0 2d		beq $81af			beq 	GXPlot0Exit
.8182					_GXPlot0Always:
.8182	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8184	ad cd 06	lda $06cd			lda 	gYCentre
.8187	20 b0 81	jsr $81b0			jsr 	GXSubCopy
.818a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818c	ad cc 06	lda $06cc			lda 	gXCentre
.818f	20 b0 81	jsr $81b0			jsr 	GXSubCopy
.8192	48		pha				pha 									; save last offset X
.8193	20 70 88	jsr $8870			jsr 	GXPositionCalc 					; calculate position/offset.
.8196	68		pla				pla
.8197	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8198	85 36		sta $36				sta 	gxzTemp0
.819a	64 37		stz $37				stz 	gxzTemp0+1
.819c	26 37		rol $37				rol 	gxzTemp0+1
.819e	ad ce 06	lda $06ce			lda 	gxIsFillMode
.81a1	69 80		adc #$80			adc 	#128
.81a3	20 40 85	jsr $8540			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a6	38		sec				sec 									; GY = -GY
.81a7	a9 00		lda #$00			lda 	#0
.81a9	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ac	8d cd 06	sta $06cd			sta 	gYCentre
.81af					GXPlot0Exit:
.81af	60		rts				rts
.81b0					GXSubCopy:
.81b0	85 36		sta $36				sta 	gxzTemp0
.81b2	64 37		stz $37				stz 	gxzTemp0+1
.81b4	29 80		and #$80			and 	#$80
.81b6	f0 02		beq $81ba			beq 	_GXNoSx
.81b8	c6 37		dec $37				dec 	gxzTemp0+1
.81ba					_GXNoSx:
.81ba	38		sec				sec
.81bb	bd 36 06	lda $0636,x			lda 	gXX1,x
.81be	e5 36		sbc $36				sbc 	gxzTemp0
.81c0	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c3	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c6	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c8	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81cb	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cd	60		rts				rts
.81ce					GXCircleMove:
.81ce	9c cf 06	stz $06cf			stz 	gxYChanged 					; clear Y changed flag
.81d1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d3	10 0d		bpl $81e2			bpl 	_GXEMPositive
.81d5	ee cc 06	inc $06cc			inc 	gXCentre 					; X++
.81d8	ad cc 06	lda $06cc			lda 	gXCentre
.81db	20 01 82	jsr $8201			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81de	a9 06		lda #$06			lda 	#6  						; and add 6
.81e0	80 15		bra $81f7			bra 	_GXEMAddD
.81e2					_GXEMPositive:
.81e2	ee cc 06	inc $06cc			inc 	gXCentre					; X++
.81e5	ce cd 06	dec $06cd			dec 	gyCentre 					; Y--
.81e8	38		sec				sec 								; calculate X-Y
.81e9	ad cc 06	lda $06cc			lda 	gXCentre
.81ec	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ef	20 01 82	jsr $8201			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f2	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f4	ce cf 06	dec $06cf			dec 	gxYChanged
.81f7					_GXEMAddD:
.81f7	18		clc				clc
.81f8	65 38		adc $38				adc 	gxzTemp1
.81fa	85 38		sta $38				sta 	gxzTemp1
.81fc	90 02		bcc $8200			bcc 	_GXEMNoCarry
.81fe	e6 39		inc $39				inc 	gxzTemp1+1
.8200					_GXEMNoCarry:
.8200	60		rts				rts
.8201					_GXAdd4TimesToD:
.8201	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8203	29 80		and #$80			and 	#$80
.8205	f0 02		beq $8209			beq 	_GXA4Unsigned
.8207	a9 ff		lda #$ff			lda 	#$FF
.8209					_GXA4Unsigned:
.8209	85 37		sta $37				sta 	gxzTemp0+1
.820b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820d	26 37		rol $37				rol 	gxzTemp0+1
.820f	06 36		asl $36				asl 	gxzTemp0
.8211	26 37		rol $37				rol 	gxzTemp0+1
.8213	18		clc				clc 								; add
.8214	a5 36		lda $36				lda		gxzTemp0
.8216	65 38		adc $38				adc 	gxzTemp1
.8218	85 38		sta $38				sta 	gxzTemp1
.821a	a5 37		lda $37				lda		gxzTemp0+1
.821c	65 39		adc $39				adc 	gxzTemp1+1
.821e	85 39		sta $39				sta 	gxzTemp1+1
.8220	60		rts				rts
.8221					GXCircleSetup:
.8221	38		sec				sec
.8222	ad 38 06	lda $0638			lda 	gxY1
.8225	ed 34 06	sbc $0634			sbc 	gxY0
.8228	4a		lsr a				lsr 	a
.8229	8d cb 06	sta $06cb			sta 	gxRadius
.822c	a2 00		ldx #$00			ldx 	#0
.822e	20 50 82	jsr $8250			jsr 	_GXCalculateCentre
.8231	a2 02		ldx #$02			ldx 	#2
.8233	20 50 82	jsr $8250			jsr 	_GXCalculateCentre
.8236	9c cc 06	stz $06cc			stz 	gXCentre
.8239	ad cb 06	lda $06cb			lda 	gxRadius
.823c	8d cd 06	sta $06cd			sta 	gYCentre
.823f	0a		asl a				asl 	a 							; R x 2
.8240	85 36		sta $36				sta 	gxzTemp0
.8242	38		sec				sec
.8243	a9 03		lda #$03			lda 	#3
.8245	e5 36		sbc $36				sbc 	gxzTemp0
.8247	85 38		sta $38				sta 	gxzTemp1
.8249	a9 00		lda #$00			lda 	#0
.824b	e9 00		sbc #$00			sbc 	#0
.824d	85 39		sta $39				sta 	gxzTemp1+1
.824f	60		rts				rts
.8250					_GXCalculateCentre:
.8250	38		sec				sec
.8251	bd 36 06	lda $0636,x			lda 	gxX1,x
.8254	7d 32 06	adc $0632,x			adc 	gXX0,x
.8257	9d 36 06	sta $0636,x			sta 	gXX1,x
.825a	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825d	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.8260	4a		lsr a				lsr 	a
.8261	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8264	7e 36 06	ror $0636,x			ror 	gXX1,x
.8267	60		rts				rts
.06cb					gxRadius:
>06cb							.fill 	1
.06cc					gXCentre:
>06cc							.fill 	1
.06cd					gYCentre:
>06cd							.fill 	1
.06ce					gxIsFillMode:
>06ce							.fill 	1
.06cf					gxYChanged:
>06cf							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8268					GXClearBitmap:
.8268	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826b	f0 24		beq $8291			beq 	_GXCBFail
.826d	20 52 88	jsr $8852			jsr 	GXOpenBitmap 				; start access
.8270	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8272	ad 3e 06	lda $063e			lda 	gxHeight
.8275	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8277	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8279					_GXCalcLastPage:
.8279	98		tya				tya 								; add to base page
.827a	18		clc				clc
.827b	6d 3c 06	adc $063c			adc 	gxBasePage
.827e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8280					_GXClearAll:
.8280	20 93 82	jsr $8293			jsr 	_GXClearBlock 				; clear 8k block
.8283	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8285	a5 0b		lda $0b				lda 	GXEditSlot
.8287	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.828a	b0 f4		bcs $8280			bcs 	_GXClearAll
.828c	20 63 88	jsr $8863			jsr 	GXCloseBitmap	 			; stop access
.828f	18		clc				clc
.8290	60		rts				rts
.8291					_GXCBFail:
.8291	38		sec				sec
.8292	60		rts				rts
.8293					_GXClearBlock:
.8293	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8295	85 38		sta $38				sta 	0+gxzTemp1
.8297	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8299	85 39		sta $39				sta 	1+gxzTemp1
.829b					_GXCB0:
.829b	a5 36		lda $36				lda 	gxzTemp0
.829d	a0 00		ldy #$00			ldy 	#0
.829f					_GXCB1:
.829f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a1	c8		iny				iny
.82a2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a4	c8		iny				iny
.82a5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a7	c8		iny				iny
.82a8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82aa	c8		iny				iny
.82ab	d0 f2		bne $829f			bne 	_GXCB1
.82ad	e6 39		inc $39				inc 	gxzTemp1+1
.82af	a5 39		lda $39				lda 	gxzTemp1+1
.82b1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b3	d0 e6		bne $829b			bne 	_GXCB0
.82b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b6					GXInitialise:
.82b6	64 01		stz $01				stz 	1
.82b8	a9 01		lda #$01			lda 	#1
.82ba	8d 00 d0	sta $d000			sta 	$D000
.82bd	18		clc				clc
.82be	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c1	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c4	a2 0f		ldx #$0f			ldx 	#15
.82c6					_GXIClear:
.82c6	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c9	ca		dex				dex
.82ca	10 fa		bpl $82c6			bpl 	_GXIClear
.82cc	20 67 83	jsr $8367			jsr 	GXClearSpriteStore
.82cf	60		rts				rts
.82d0					GXControlBitmap:
.82d0	64 01		stz $01				stz 	1
.82d2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d4	29 01		and #$01			and 	#1 							; set bitmap flag
.82d6	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82da	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82dd	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82df	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82e1	90 02		bcc $82e5			bcc 	_CBNotOn
.82e3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e5					_CBNotOn:
.82e5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82ea	29 07		and #$07			and 	#7
.82ec	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ef	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f1	d0 02		bne $82f5			bne 	_CBNotDefault
.82f3	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f5					_CBNotDefault:
.82f5	8d 3c 06	sta $063c			sta 	gxBasePage
.82f8	20 59 83	jsr $8359			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fb	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fd	8d 03 d1	sta $d103			sta 	$D103
.8300	a5 36		lda $36				lda 	gxzTemp0
.8302	8d 02 d1	sta $d102			sta 	$D102
.8305	9c 01 d1	stz $d101			stz 	$D101
.8308	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.830a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830d	29 01		and #$01			and 	#1
.830f	f0 02		beq $8313			beq 	_CBHaveHeight
.8311	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8313					_CBHaveHeight
.8313	8e 3e 06	stx $063e			stx 	gxHeight
.8316	18		clc				clc
.8317	60		rts				rts
.8318					GXControlSprite:
.8318	64 01		stz $01				stz 	1
.831a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831c	29 01		and #$01			and 	#1 							; set sprites flag
.831e	8d 3a 06	sta $063a			sta 	gxSpritesOn
.8321	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8322	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8325	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8327	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8329	90 02		bcc $832d			bcc 	_CSNotOn
.832b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832d					_CSNotOn:
.832d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8330	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8332	d0 02		bne $8336			bne 	_CSNotDefault
.8334	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8336					_CSNotDefault:
.8336	8d 3d 06	sta $063d			sta 	gxSpritePage
.8339	20 59 83	jsr $8359			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833c	a5 36		lda $36				lda 	zTemp0
.833e	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase
.8341	a5 37		lda $37				lda 	zTemp0+1
.8343	8d 4a 06	sta $064a			sta 	GXSpriteOffsetBase+1
.8346	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8348					_CSClear:
.8348	9e 00 d9	stz $d900,x			stz 	$D900,x
.834b	9e 00 da	stz $da00,x			stz 	$DA00,x
.834e	ca		dex				dex
.834f	d0 f7		bne $8348			bne 	_CSClear
.8351	9c 48 06	stz $0648			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8354	20 67 83	jsr $8367			jsr 	GXClearSpriteStore
.8357	18		clc				clc
.8358	60		rts				rts
.8359					GXCalculateBaseAddress:
.8359	85 36		sta $36				sta 	gxzTemp0
.835b	64 37		stz $37				stz 	gxzTemp0+1
.835d	a9 05		lda #$05			lda 	#5
.835f					_GXShift:
.835f	06 36		asl $36				asl 	gxzTemp0
.8361	26 37		rol $37				rol 	gxzTemp0+1
.8363	3a		dec a				dec		a
.8364	d0 f9		bne $835f			bne 	_GXShift
.8366	60		rts				rts
.8367					GXClearSpriteStore:
.8367	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8369					_GXCSSLoop:
.8369	9e 8b 06	stz $068b,x			stz 	GXSpriteHigh,x
.836c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836e	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.8371	ca		dex				dex
.8372	10 f5		bpl $8369			bpl 	_GXCSSLoop
.8374	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8375					GXLine:
.8375	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8378	f0 28		beq $83a2			beq 	_GXLFail
.837a	20 52 88	jsr $8852			jsr 	GXOpenBitmap
.837d	20 a6 89	jsr $89a6			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8380	20 48 84	jsr $8448			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8383	20 70 88	jsr $8870			jsr 	GXPositionCalc 				; calculate position/offset.
.8386					_GXDrawLoop:
.8386	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8389	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.838b	2d 42 06	and $0642			and 	gxANDValue
.838e	4d 41 06	eor $0641			eor 	gxEORValue
.8391	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8393	20 a4 83	jsr $83a4			jsr 	GXLineIsComplete 			; is the line complete ?
.8396	f0 05		beq $839d			beq 	_GXLExit
.8398	20 bf 83	jsr $83bf			jsr 	GXLineAdvance 				; code as per advance method
.839b	80 e9		bra $8386			bra 	_GXDrawLoop
.839d					_GXLExit:
.839d	20 63 88	jsr $8863			jsr 	GXCloseBitmap
.83a0	18		clc				clc
.83a1	60		rts				rts
.83a2					_GXLFail:
.83a2	38		sec				sec
.83a3	60		rts				rts
.83a4					GXLineIsComplete:
.83a4	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger 			; is dy larger
.83a7	d0 0f		bne $83b8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a9	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83ac	4d 36 06	eor $0636			eor 	GXX1
.83af	d0 06		bne $83b7			bne 	_GXLICExit
.83b1	ad 33 06	lda $0633			lda 	GXX0+1
.83b4	4d 37 06	eor $0637			eor 	GXX1+1
.83b7					_GXLICExit:
.83b7	60		rts				rts
.83b8					_GXLICCompareY:
.83b8	ad 38 06	lda $0638			lda 	GXY1
.83bb	4d 34 06	eor $0634			eor 	GXY0
.83be	60		rts				rts
.83bf					GXLineAdvance:
.83bf	18		clc				clc 								; add adjust to position
.83c0	ad d4 06	lda $06d4			lda 	GXPosition
.83c3	6d d5 06	adc $06d5			adc 	GXAdjust
.83c6	8d d4 06	sta $06d4			sta 	GXPosition
.83c9	9c d7 06	stz $06d7			stz 	GXAddSelect 				; clear add select flag
.83cc	b0 05		bcs $83d3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83ce	cd d6 06	cmp $06d6			cmp 	GXTotal 					; if exceeded total
.83d1	90 0a		bcc $83dd			bcc 	_GXLANoExtra
.83d3					_GXLAOverflow:
.83d3	ce d7 06	dec $06d7			dec 	GXAddSelect 				; set addselect to $FF
.83d6	38		sec				sec 								; subtract total and write back
.83d7	ed d6 06	sbc $06d6			sbc 	GXTotal
.83da	8d d4 06	sta $06d4			sta 	GXPosition
.83dd					_GXLANoExtra:
.83dd	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger
.83e0	f0 0d		beq $83ef			beq 	_GXDXLarger
.83e2	20 41 84	jsr $8441			jsr 	GXIncrementY
.83e5	ad d7 06	lda $06d7			lda 	GXAddSelect
.83e8	f0 10		beq $83fa			beq 	_GXLAExit
.83ea	20 fb 83	jsr $83fb			jsr 	GXAdjustX
.83ed	80 0b		bra $83fa			bra 	_GXLAExit
.83ef					_GXDXLarger:
.83ef	20 fb 83	jsr $83fb			jsr 	GXAdjustX
.83f2	ad d7 06	lda $06d7			lda 	GXAddSelect
.83f5	f0 03		beq $83fa			beq 	_GXLAExit
.83f7	20 41 84	jsr $8441			jsr 	GXIncrementY
.83fa					_GXLAExit:
.83fa	60		rts				rts
.83fb					GXAdjustX:
.83fb	ad d3 06	lda $06d3			lda 	GXDXNegative
.83fe	10 25		bpl $8425			bpl 	_GXAXRight
.8400	ad 32 06	lda $0632			lda 	GXX0
.8403	d0 03		bne $8408			bne 	_GXAXNoBorrow
.8405	ce 33 06	dec $0633			dec 	GXX0+1
.8408					_GXAXNoBorrow:
.8408	ce 32 06	dec $0632			dec 	GXX0
.840b	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.840e	ad 45 06	lda $0645			lda 	gsOffset
.8411	c9 ff		cmp #$ff			cmp 	#$FF
.8413	d0 0f		bne $8424			bne 	_GXAYExit 					; underflow
.8415	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8417	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8419	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.841b	b0 07		bcs $8424			bcs 	_GXAYExit
.841d	18		clc				clc
.841e	69 20		adc #$20			adc 	#$20 						; fix up
.8420	85 3d		sta $3d				sta 	gxzScreen+1
.8422	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8424					_GXAYExit:
.8424	60		rts				rts
.8425					_GXAXRight:
.8425	ee 32 06	inc $0632			inc 	GXX0
.8428	d0 03		bne $842d			bne 	_GXAXNoCarry
.842a	ee 33 06	inc $0633			inc 	GXX0+1
.842d					_GXAXNoCarry:
.842d	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.8430	d0 0e		bne $8440			bne 	_GXAXExit 					; if not overflowed, exit.
.8432	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8434	a5 3d		lda $3d				lda 	gxzScreen+1
.8436	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8438	90 06		bcc $8440			bcc 	_GXAXExit
.843a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843c	85 3d		sta $3d				sta 	gxzScreen+1
.843e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8440					_GXAXExit:
.8440	60		rts				rts
.8441					GXIncrementY:
.8441	ee 34 06	inc $0634			inc 	GXY0
.8444	20 c6 88	jsr $88c6			jsr 	GXMovePositionDown
.8447	60		rts				rts
.8448					GXLineSetup:
.8448	ad 38 06	lda $0638			lda 	GXY1
.844b	38		sec				sec
.844c	ed 34 06	sbc $0634			sbc 	GXY0
.844f	4a		lsr a				lsr 	a
.8450	8d d1 06	sta $06d1			sta 	GXDiffY
.8453	9c d3 06	stz $06d3			stz 	GXDXNegative 				; clear -ve flag
.8456	38		sec				sec
.8457	ad 36 06	lda $0636			lda 	GXX1
.845a	ed 32 06	sbc $0632			sbc 	GXX0
.845d	8d d0 06	sta $06d0			sta 	GXDiffX
.8460	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8463	ed 33 06	sbc $0633			sbc 	GXX0+1
.8466	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8467	6e d0 06	ror $06d0			ror 	GXDiffX
.846a	0a		asl a				asl 	a
.846b	10 0c		bpl $8479			bpl 	_GDXNotNegative
.846d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846f	38		sec				sec
.8470	ed d0 06	sbc $06d0			sbc 	GXDiffX
.8473	8d d0 06	sta $06d0			sta 	GXDiffX
.8476	ce d3 06	dec $06d3			dec 	GXDXNegative 				; -ve flag = $FF.
.8479					_GDXNotNegative:
.8479	9c d2 06	stz $06d2			stz 	GXIsDiffYLarger 			; clear larger flag
.847c	ad d1 06	lda $06d1			lda 	GXDiffY 					; set adjust and total.
.847f	8d d5 06	sta $06d5			sta 	GXAdjust
.8482	ad d0 06	lda $06d0			lda 	GXDiffX
.8485	8d d6 06	sta $06d6			sta 	GXTotal
.8488	ad d1 06	lda $06d1			lda 	GXDiffY 					; if dy > dx
.848b	cd d0 06	cmp $06d0			cmp 	GXDiffX
.848e	90 0f		bcc $849f			bcc 	_GDXNotLarger
.8490	ce d2 06	dec $06d2			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8493	ad d0 06	lda $06d0			lda 	GXDiffX 					; set adjust and total other way round
.8496	8d d5 06	sta $06d5			sta 	GXAdjust
.8499	ad d1 06	lda $06d1			lda 	GXDiffY
.849c	8d d6 06	sta $06d6			sta 	GXTotal
.849f					_GDXNotLarger:
.849f	ad d6 06	lda $06d6			lda 	GXTotal
.84a2	4a		lsr a				lsr 	a
.84a3	8d d4 06	sta $06d4			sta 	GXPosition
.84a6	60		rts				rts
.06d0					GXDiffX:
>06d0							.fill 	1
.06d1					GXDiffY:
>06d1							.fill 	1
.06d2					GXIsDiffYLarger:
>06d2							.fill 	1
.06d3					GXDXNegative:
>06d3							.fill 	1
.06d4					GXPosition:
>06d4							.fill 	1
.06d5					GXAdjust:
>06d5							.fill 	1
.06d6					GXTotal:
>06d6							.fill 	1
.06d7					GXAddSelect:
>06d7							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.84a7					GXSetColourMode:
.84a7	a6 36		ldx $36				ldx 	gxzTemp0
.84a9	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84ac	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ae	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84b1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b3	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b6	ae 40 06	ldx $0640			ldx 	gxColour
.84b9	8e 41 06	stx $0641			stx 	gxEORValue
.84bc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84be	90 03		bcc $84c3			bcc 	_GXSDCNotAndColour
.84c0	8e 42 06	stx $0642			stx 	gxANDValue
.84c3					_GXSDCNotAndColour:
.84c3	d0 03		bne $84c8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c5	9c 41 06	stz $0641			stz 	gxEORValue
.84c8					_GXSDCNotAnd:
.84c8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c9	90 08		bcc $84d3			bcc 	_GXSDCNoFlip
.84cb	ad 42 06	lda $0642			lda	 	gxANDValue
.84ce	49 ff		eor #$ff			eor 	#$FF
.84d0	8d 42 06	sta $0642			sta 	gxANDValue
.84d3					_GXSDCNoFlip:
.84d3	18		clc				clc
.84d4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84d5					GXPlotPoint:
.84d5	20 52 88	jsr $8852			jsr 	GXOpenBitmap 				; start drawing
.84d8	20 70 88	jsr $8870			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84db	ac 45 06	ldy $0645			ldy 	gsOffset
.84de	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84e0	2d 42 06	and $0642			and 	gxANDValue
.84e3	4d 41 06	eor $0641			eor 	gxEORValue
.84e6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e8	20 63 88	jsr $8863			jsr 	GXCloseBitmap 				; stop drawing and exit
.84eb	18		clc				clc
.84ec	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84ed					GXFillRectangle:
.84ed	38		sec				sec
.84ee	80 01		bra $84f1			bra 	GXRectangle
.84f0					GXFrameRectangle:
.84f0	18		clc				clc
.84f1					GXRectangle:
.84f1	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f4	f0 35		beq $852b			beq 	_GXRFail
.84f6	08		php				php 								; save Fill flag (CS)
.84f7	20 52 88	jsr $8852			jsr 	GXOpenBitmap 				; start drawing
.84fa	20 88 89	jsr $8988			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fd	20 70 88	jsr $8870			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.8500	38		sec				sec 								; sec = Draw line
.8501	20 2d 85	jsr $852d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8504	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8507	cd 38 06	cmp $0638			cmp 	gxY1
.850a	f0 19		beq $8525			beq 	_GXRectangleExit
.850c					_GXRectLoop:
.850c	20 c6 88	jsr $88c6			jsr 	GXMovePositionDown 			; down one.
.850f	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8512	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8515	cd 38 06	cmp $0638			cmp 	gXY1
.8518	f0 07		beq $8521			beq 	_GXLastLine
.851a	28		plp				plp 								; get flag back
.851b	08		php				php
.851c	20 2d 85	jsr $852d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851f	80 eb		bra $850c			bra 	_GXRectLoop
.8521					_GXLastLine:
.8521	38		sec				sec
.8522	20 2d 85	jsr $852d			jsr 	GXDrawLineX1X0
.8525					_GXRectangleExit:
.8525	68		pla				pla 								; throw fill flag.
.8526	20 63 88	jsr $8863			jsr 	GXCloseBitmap 				; stop drawing and exit
.8529	18		clc				clc
.852a	60		rts				rts
.852b					_GXRFail:
.852b	38		sec				sec
.852c	60		rts				rts
.852d					GXDrawLineX1X0:
.852d	08		php				php 								; save solid/either-end
.852e	38		sec				sec
.852f	ad 36 06	lda $0636			lda		gXX1
.8532	ed 32 06	sbc $0632			sbc 	gXX0
.8535	85 36		sta $36				sta 	gxzTemp0
.8537	ad 37 06	lda $0637			lda 	gXX1+1
.853a	ed 33 06	sbc $0633			sbc 	gXX0+1
.853d	85 37		sta $37				sta 	gxzTemp0+1
.853f	28		plp				plp
.8540					GXDrawLineTemp0:
.8540	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8542	48		pha				pha
.8543	a5 3d		lda $3d				lda 	gxzScreen+1
.8545	48		pha				pha
.8546	ad 45 06	lda $0645			lda 	gsOffset
.8549	48		pha				pha
.854a	a5 0b		lda $0b				lda 	GXEditSlot
.854c	48		pha				pha
.854d	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.8550	90 1e		bcc $8570			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8552					_GXDLTLine:
.8552	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8554	2d 42 06	and $0642			and 	gxANDValue
.8557	4d 41 06	eor $0641			eor 	gxEORValue
.855a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855e	d0 04		bne $8564			bne 	_GXDLTNoBorrow
.8560	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8562	30 2e		bmi $8592			bmi 	_GXDLTExit
.8564					_GXDLTNoBorrow:
.8564	c6 36		dec $36				dec 	gxzTemp0
.8566	c8		iny				iny 								; next slot.
.8567	d0 e9		bne $8552			bne 	_GXDLTLine
.8569	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.856b	20 a0 85	jsr $85a0			jsr 	GXDLTCheckWrap				; check for new page.
.856e	80 e2		bra $8552			bra 	_GXDLTLine
.8570					_GXDLTEndPoints:
.8570	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8572	2d 42 06	and $0642			and 	gxANDValue
.8575	4d 41 06	eor $0641			eor 	gxEORValue
.8578	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857a	98		tya				tya 								; advance to right side
.857b	18		clc				clc
.857c	65 36		adc $36				adc 	gxzTemp0
.857e	a8		tay				tay
.857f	a5 3d		lda $3d				lda 	gxzScreen+1
.8581	65 37		adc $37				adc 	gxzTemp0+1
.8583	85 3d		sta $3d				sta 	gxzScreen+1
.8585	20 a0 85	jsr $85a0			jsr 	GXDLTCheckWrap 			; fix up.
.8588	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.858a	2d 42 06	and $0642			and 	gxANDValue
.858d	4d 41 06	eor $0641			eor 	gxEORValue
.8590	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8592					_GXDLTExit:
.8592	68		pla				pla
.8593	85 0b		sta $0b				sta 	GXEditSlot
.8595	68		pla				pla
.8596	8d 45 06	sta $0645			sta 	gsOffset
.8599	68		pla				pla
.859a	85 3d		sta $3d				sta 	gxzScreen+1
.859c	68		pla				pla
.859d	85 3c		sta $3c				sta 	gxzScreen
.859f	60		rts				rts
.85a0					GXDLTCheckWrap:
.85a0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a4	90 06		bcc $85ac			bcc 	_GXDLTCWExit
.85a6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a8	85 3d		sta $3d				sta 	gxzScreen+1
.85aa	e6 0b		inc $0b				inc 	GXEditSlot
.85ac					_GXDLTCWExit:
.85ac	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.85ad					GXDrawGraphicElement:
.85ad	8d d8 06	sta $06d8			sta 	gxSize 						; save size
.85b0	3a		dec a				dec 	a
.85b1	8d d9 06	sta $06d9			sta 	gxMask 						; and mask
.85b4	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b7	f0 67		beq $8620			beq 	_GXSLFail
.85b9	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85bc	48		pha				pha
.85bd	8c db 06	sty $06db			sty 	gxAcquireVector+1 			; and acquisition vector
.85c0	8e da 06	stx $06da			stx 	gxAcquireVector
.85c3	20 52 88	jsr $8852			jsr 	gxOpenBitmap 				; open the bitmap.
.85c6	ad dd 06	lda $06dd			lda 	gxUseMode 					; scale bits
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	4a		lsr a				lsr 	a
.85cc	29 07		and #$07			and		#7
.85ce	1a		inc a				inc 	a
.85cf	8d dc 06	sta $06dc			sta 	gxScale
.85d2	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d4					_GXGELoop:
.85d4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d6	2c dd 06	bit $06dd			bit 	gxUseMode 					; check for flip.
.85d9	10 06		bpl $85e1			bpl		_GXNoVFlip
.85db	ad d9 06	lda $06d9			lda 	gxMask
.85de	38		sec				sec
.85df	e5 38		sbc $38				sbc 	gxzTemp1
.85e1					_GXNoVFlip:
.85e1	aa		tax				tax 								; get the Xth line.
.85e2	20 22 86	jsr $8622			jsr 	_GXCallAcquire 				; get that data.
.85e5	ad dc 06	lda $06dc			lda 	gxScale 					; do scale identical copies of that line.
.85e8	85 39		sta $39				sta 	gxzTemp1+1
.85ea					_GXGELoop2:
.85ea	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85ed	cd 3e 06	cmp $063e			cmp 	gxHeight
.85f0	b0 10		bcs $8602			bcs 	_GXDGEExit
.85f2	20 25 86	jsr $8625			jsr 	GXRenderOneLine 			; render line
.85f5	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f7	d0 f1		bne $85ea			bne 	_GXGELoop2
.85f9	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85fb	a5 38		lda $38				lda 	gxzTemp1
.85fd	cd d8 06	cmp $06d8			cmp 	gxSize
.8600	d0 d2		bne $85d4			bne 	_GXGELoop
.8602					_GXDGEExit:
.8602	68		pla				pla 								; restore Y for next time
.8603	8d 34 06	sta $0634			sta 	gxY0
.8606	ae dc 06	ldx $06dc			ldx 	gxScale 					; get scale (1-8)
.8609					_GXShiftLeft:
.8609	18		clc				clc
.860a	ad d8 06	lda $06d8			lda 	gxSize
.860d	6d 32 06	adc $0632			adc 	gxX0
.8610	8d 32 06	sta $0632			sta 	gxX0
.8613	90 03		bcc $8618			bcc 	_GXSLNoCarry
.8615	ee 33 06	inc $0633			inc 	gxX0+1
.8618					_GXSLNoCarry:
.8618	ca		dex				dex
.8619	d0 ee		bne $8609			bne 	_GXShiftLeft
.861b	20 63 88	jsr $8863			jsr 	GXCloseBitmap
.861e	18		clc				clc
.861f	60		rts				rts
.8620					_GXSLFail:
.8620	38		sec				sec
.8621	60		rts				rts
.8622					_GXCallAcquire:
.8622	6c da 06	jmp ($06da)			jmp 	(gxAcquireVector)
.8625					GXRenderOneLine:
.8625	20 70 88	jsr $8870			jsr 	GXPositionCalc 				; calculate position/offset.
.8628	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.862b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862d					_GXROLLoop1:
.862d	ad dc 06	lda $06dc			lda 	gxScale 					; set to do 'scale' times
.8630	85 3b		sta $3b				sta 	gxzTemp2+1
.8632					_GXROLLoop2:
.8632	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8634	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8637	50 06		bvc $863f			bvc 	_GXNoHFlip
.8639	ad d9 06	lda $06d9			lda 	gxMask
.863c	38		sec				sec
.863d	e5 3a		sbc $3a				sbc 	gxzTemp2
.863f					_GXNoHFlip:
.863f	aa		tax				tax 								; read from the pixel buffer
.8640	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8643	d0 07		bne $864c			bne 	_GXDraw 					; draw if non zero
.8645	ad dd 06	lda $06dd			lda 	gxUseMode 					; check to see if solid background
.8648	29 04		and #$04			and 	#4
.864a	f0 0a		beq $8656			beq 	_GXZeroPixel
.864c					_GXDraw:
.864c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864e	2d 42 06	and $0642			and 	gxANDValue
.8651	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8654	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8656					_GXZeroPixel:
.8656	c8		iny				iny 								; advance pointer
.8657	d0 05		bne $865e			bne 	_GXNoShift
.8659	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.865b	20 a0 85	jsr $85a0			jsr 	GXDLTCheckWrap				; check for new page.
.865e					_GXNoShift:
.865e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8660	d0 d0		bne $8632			bne 	_GXROLLoop2
.8662	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8664	a5 3a		lda $3a				lda 	gxzTemp2
.8666	cd d8 06	cmp $06d8			cmp 	gxSize
.8669	d0 c2		bne $862d			bne 	_GXROLLoop1
.866b	ee 34 06	inc $0634			inc 	gxY0
.866e	60		rts				rts
.06d8					gxSize:
>06d8							.fill 	1
.06d9					gxMask:
>06d9							.fill 	1
.06da					gxAcquireVector:
>06da							.fill 	2
.06dc					gxScale:
>06dc							.fill 	1
.06dd					gxUseMode:
>06dd							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.866f					GXFontHandler:
.866f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8671	4d 3f 06	eor $063f			eor 	gxMode
.8674	8d dd 06	sta $06dd			sta 	gxUseMode
.8677	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8679	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.867b	26 37		rol $37				rol	 	gxzTemp0+1
.867d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867f	26 37		rol $37				rol	 	gxzTemp0+1
.8681	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8683	26 37		rol $37				rol	 	gxzTemp0+1
.8685	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8687	09 c0		ora #$c0			ora 	#$C0
.8689	85 37		sta $37				sta 	gxzTemp0+1
.868b	a9 08		lda #$08			lda 	#8 							; size 8x8
.868d	a2 95		ldx #$95			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868f	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8691	20 ad 85	jsr $85ad			jsr 	GXDrawGraphicElement
.8694	60		rts				rts
.8695					GXGetGraphicDataFont:
.8695	8a		txa				txa 								; X->Y
.8696	a8		tay				tay
.8697	a6 01		ldx $01				ldx 	1 							; preserve old value
.8699	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.869b	85 01		sta $01				sta 	1
.869d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869f	86 01		stx $01				stx 	1 							; put old value back.
.86a1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a3					_GXExpand:
.86a3	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a6	0a		asl a				asl 	a 							; shift bit 7 into C
.86a7	90 08		bcc $86b1			bcc 	_GXNoPixel
.86a9	48		pha				pha 								; if set, set pixel buffer to current colour.
.86aa	ad 40 06	lda $0640			lda 	gxColour
.86ad	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86b0	68		pla				pla
.86b1					_GXNoPixel:
.86b1	e8		inx				inx 								; do the whole byte.
.86b2	e0 08		cpx #$08			cpx 	#8
.86b4	d0 ed		bne $86a3			bne 	_GXExpand
.86b6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86b7					GXSpriteHandler:
.86b7	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b9	4d 3f 06	eor $063f			eor 	gxMode
.86bc	8d dd 06	sta $06dd			sta 	gxUseMode
.86bf	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86c1	da		phx				phx
.86c2	20 52 88	jsr $8852			jsr 	GXOpenBitmap 				; can access sprite information
.86c5	68		pla				pla
.86c6	20 41 89	jsr $8941			jsr 	GXFindSprite 				; get the sprite address
.86c9	08		php				php
.86ca	20 63 88	jsr $8863			jsr 	GXCloseBitmap
.86cd	28		plp				plp
.86ce	b0 0a		bcs $86da			bcs		_GXSHExit 					; exit if find failed.
.86d0	ad de 06	lda $06de			lda 	GXSizePixels 				; return size
.86d3	a2 db		ldx #$db			ldx 	#GXSpriteAcquire & $FF
.86d5	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d7	20 ad 85	jsr $85ad			jsr 	GXDrawGraphicElement
.86da					_GXSHExit:
.86da	60		rts				rts
.86db					GXSpriteAcquire:
.86db	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86de	85 0b		sta $0b				sta 	GXEditSlot
.86e0	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e2	a9 00		lda #$00			lda 	#0
.86e4	ae df 06	ldx $06df			ldx 	GXSizeBits
.86e7					_GXTimesRowNumber:
.86e7	18		clc				clc
.86e8	65 36		adc $36				adc 	zTemp0
.86ea	ca		dex				dex
.86eb	10 fa		bpl $86e7			bpl 	_GXTimesRowNumber
.86ed	64 37		stz $37				stz 	gxzTemp0+1
.86ef	0a		asl a				asl 	a 							; row x 2,4,6,8
.86f0	26 37		rol $37				rol 	gxzTemp0+1
.86f2	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f3	26 37		rol $37				rol 	gxzTemp0+1
.86f5	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f6	26 37		rol $37				rol 	gxzTemp0+1
.86f8	85 36		sta $36				sta 	gxzTemp0
.86fa	18		clc				clc 								; add base address.
.86fb	a5 36		lda $36				lda 	gxzTemp0
.86fd	6d e1 06	adc $06e1			adc 	GXSpriteOffset
.8700	85 36		sta $36				sta 	gxzTemp0
.8702	a5 37		lda $37				lda 	gxzTemp0+1
.8704	6d e2 06	adc $06e2			adc 	GXSpriteOffset+1
.8707					_GXSAFindPage:
.8707	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8709	90 06		bcc $8711			bcc 	_GXSAFoundPage
.870b	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870d	e6 0b		inc $0b				inc 	GXEditSlot
.870f	80 f6		bra $8707			bra 	_GXSAFindPage
.8711					_GXSAFoundPage:
.8711	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8713	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8715	a0 00		ldy #$00			ldy 	#0
.8717					_GXSACopyLoop:
.8717	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8719	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871c	c8		iny				iny
.871d	cc de 06	cpy $06de			cpy 	GXSizePixels
.8720	d0 f5		bne $8717			bne 	_GXSACopyLoop
.8722	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8723					GXSelect:
.8723	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8726	f0 22		beq $874a			beq 	_GXSFail
.8728	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.872a	c9 40		cmp #$40			cmp 	#64
.872c	b0 1c		bcs $874a			bcs 	_GXSFail
.872e	8d 46 06	sta $0646			sta 	GSCurrentSpriteID
.8731	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8733	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8735	06 36		asl $36				asl 	gxzTemp0
.8737	06 36		asl $36				asl 	gxzTemp0
.8739	06 36		asl $36				asl 	gxzTemp0
.873b	2a		rol a				rol 	a
.873c	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873e	8d 48 06	sta $0648			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.8741	85 37		sta $37				sta 	gxzTemp0+1
.8743	a5 36		lda $36				lda 	gxzTemp0
.8745	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr
.8748	18		clc				clc
.8749	60		rts				rts
.874a					_GXSFail:
.874a	38		sec				sec
.874b	60		rts				rts
.874c					GXSelectImage:
.874c	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874f	f0 74		beq $87c5			beq 	_GXSIFail
.8751	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8754	f0 6f		beq $87c5			beq 	_GXSIFail 					; (checking the MSB)
.8756	64 01		stz $01				stz 	1
.8758	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.875a	d0 6b		bne $87c7			bne 	_GXSIHide
.875c	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875e	48		pha				pha
.875f	20 52 88	jsr $8852			jsr 	GXOpenBitmap
.8762	68		pla				pla
.8763	20 41 89	jsr $8941			jsr 	GXFindSprite
.8766	b0 5a		bcs $87c2			bcs 	_GXSICloseFail 				; no image
.8768	a0 01		ldy #$01			ldy 	#1
.876a	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.876d	85 36		sta $36				sta 	gxzTemp0
.876f	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.8772	85 37		sta $37				sta 	gxzTemp0+1
.8774	ad e1 06	lda $06e1			lda 	GXSpriteOffset
.8777	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8779	18		clc				clc
.877a	ad e2 06	lda $06e2			lda 	GXSpriteOffset+1
.877d	6d 49 06	adc $0649			adc 	GXSpriteOffsetBase
.8780	c8		iny				iny
.8781	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8783	ad 4a 06	lda $064a			lda 	GXSpriteOffsetBase+1
.8786	69 00		adc #$00			adc 	#0
.8788	c8		iny				iny
.8789	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.878b	ad df 06	lda $06df			lda 	GXSizeBits 					; get raw size
.878e	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8790	2a		rol a				rol 	a 							; x 2
.8791	0a		asl a				asl 	a 							; x 4
.8792	0a		asl a				asl 	a 							; x 8
.8793	0a		asl a				asl 	a 							; x 16
.8794	0d e0 06	ora $06e0			ora 	GXSpriteLUT 				; Or with LUT
.8797	0a		asl a				asl 	a 							; 1 shift
.8798	09 01		ora #$01			ora 	#1 							; enable sprite.
.879a	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.879c	20 63 88	jsr $8863			jsr 	GXCloseBitmap
.879f	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87a2	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87a5	29 3f		and #$3f			and 	#$3F
.87a7	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87aa	ad df 06	lda $06df			lda 	GXSizeBits 					; get bit size
.87ad	6a		ror a				ror 	a 							; shift into bits 6/7
.87ae	6a		ror a				ror 	a
.87af	6a		ror a				ror 	a
.87b0	29 c0		and #$c0			and 	#$C0
.87b2	1d 8b 06	ora $068b,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87b5	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87b8	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87bb	29 7f		and #$7f			and 	#$7F
.87bd	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87c0	18		clc				clc
.87c1	60		rts				rts
.87c2					_GXSICloseFail:
.87c2	20 63 88	jsr $8863			jsr 	GXCloseBitmap
.87c5					_GXSIFail:
.87c5	38		sec				sec
.87c6	60		rts				rts
.87c7					_GXSIHide:
.87c7	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87ca	85 36		sta $36				sta 	gxzTemp0
.87cc	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.87cf	85 37		sta $37				sta 	gxzTemp0+1
.87d1	a9 00		lda #$00			lda 	#0
.87d3	92 36		sta ($36)			sta 	(gxzTemp0)
.87d5	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; get sprite ID
.87d8	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87db	09 80		ora #$80			ora 	#$80
.87dd	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87e0	18		clc				clc
.87e1	60		rts				rts
.87e2					GXMoveSprite:
.87e2	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87e5	f0 65		beq $884c			beq 	_GXSIFail
.87e7	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.87ea	f0 60		beq $884c			beq 	_GXSIFail
.87ec	85 37		sta $37				sta 	gxzTemp0+1
.87ee	a0 04		ldy #$04			ldy 	#4
.87f0	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.87f3	85 36		sta $36				sta 	gxzTemp0
.87f5	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.87f8	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.87fb	2a		rol a				rol 	a	 						; into bits 0,1.
.87fc	2a		rol a				rol 	a
.87fd	2a		rol a				rol 	a
.87fe	29 03		and #$03			and 	#3
.8800	aa		tax				tax
.8801	bd 4e 88	lda $884e,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.8804	48		pha				pha
.8805	18		clc				clc
.8806	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8809	91 36		sta ($36),y			sta 	(gxzTemp0),y
.880b	c8		iny				iny
.880c	ad 33 06	lda $0633			lda 	gxX0+1
.880f	69 00		adc #$00			adc 	#0
.8811	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8813	c8		iny				iny
.8814	68		pla				pla
.8815	18		clc				clc
.8816	6d 34 06	adc $0634			adc 	gxY0
.8819	91 36		sta ($36),y			sta 	(gxzTemp0),y
.881b	a9 00		lda #$00			lda 	#0
.881d	69 00		adc #$00			adc 	#0
.881f	c8		iny				iny
.8820	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8822	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.8825	6e 32 06	ror $0632			ror 	gxX0
.8828	4e 32 06	lsr $0632			lsr 	gxX0
.882b	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.882e	4e 34 06	lsr $0634			lsr 	gxY0
.8831	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.8834	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x
.8837	29 80		and #$80			and 	#$80
.8839	0d 32 06	ora $0632			ora 	gxX0
.883c	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.883f	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8842	29 c0		and #$c0			and 	#$C0
.8844	0d 34 06	ora $0634			ora 	gxY0
.8847	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.884a	18		clc				clc
.884b	60		rts				rts
.884c					_GXSIFail:
.884c	38		sec				sec
.884d	60		rts				rts
.884e					_GXMSOffset:
>884e	1c						.byte 	32-8/2
>884f	18						.byte 	32-16/2
>8850	14						.byte 	32-24/2
>8851	10						.byte 	32-32/2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8852					GXOpenBitmap:
.8852	78		sei				sei 								; no interrupts here
.8853	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8855	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.8858	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.885a	85 00		sta $00				sta 	0
.885c	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.885e	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.8861	58		cli				cli
.8862	60		rts				rts
.8863					GXCloseBitmap:
.8863	78		sei				sei
.8864	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8867	85 0b		sta $0b				sta 	GXEditSlot
.8869	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.886c	85 00		sta $00				sta 	0
.886e	58		cli				cli
.886f	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8870					GXPositionCalc:
.8870	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8872	48		pha				pha
.8873	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8876	85 3c		sta $3c				sta 	gxzScreen
.8878	64 3d		stz $3d				stz 	gxzScreen+1
.887a	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.887c	26 3d		rol $3d				rol 	gxzScreen+1
.887e	06 3c		asl $3c				asl 	gxzScreen
.8880	26 3d		rol $3d				rol 	gxzScreen+1
.8882	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8883	65 3c		adc $3c				adc 	gxzScreen
.8885	85 3c		sta $3c				sta 	gxzScreen
.8887	90 02		bcc $888b			bcc 	_GXPCNoCarry
.8889	e6 3d		inc $3d				inc 	gxzScreen+1
.888b					_GXPCNoCarry:
.888b	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.888d	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.888f	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8891	85 36		sta $36				sta 	gxzTemp0
.8893	64 3d		stz $3d				stz 	gxzScreen+1
.8895	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8897					_GXPCMultiply32:
.8897	06 3c		asl $3c				asl 	gxzScreen
.8899	26 3d		rol $3d				rol 	gxzScreen+1
.889b	3a		dec a				dec 	a
.889c	d0 f9		bne $8897			bne 	_GXPCMultiply32
.889e	18		clc				clc
.889f	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.88a2	65 3c		adc $3c				adc 	gxzScreen
.88a4	8d 45 06	sta $0645			sta 	gsOffset
.88a7	ad 33 06	lda $0633			lda 	GXX0+1
.88aa	65 3d		adc $3d				adc 	gxzScreen+1
.88ac	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.88ae	90 04		bcc $88b4			bcc 	_GXPCNoOverflow
.88b0	29 1f		and #$1f			and 	#$1F 						; fix it up
.88b2	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88b4					_GXPCNoOverflow:
.88b4	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88b6	85 3d		sta $3d				sta 	gxzScreen+1
.88b8	64 3c		stz $3c				stz 	gxzScreen
.88ba	18		clc				clc
.88bb	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88bd	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88c0	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88c2	68		pla				pla
.88c3	85 36		sta $36				sta 	gxzTemp0
.88c5	60		rts				rts
.88c6					GXMovePositionDown:
.88c6	18		clc				clc 								; add 320 to offset/temp+1
.88c7	ad 45 06	lda $0645			lda 	gsOffset
.88ca	69 40		adc #$40			adc 	#64
.88cc	8d 45 06	sta $0645			sta 	gsOffset
.88cf	a5 3d		lda $3d				lda 	gxzScreen+1
.88d1	69 01		adc #$01			adc 	#1
.88d3	85 3d		sta $3d				sta 	gxzScreen+1
.88d5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88d7	90 07		bcc $88e0			bcc 	_GXMPDExit
.88d9	38		sec				sec  								; next page
.88da	e9 20		sbc #$20			sbc 	#$20
.88dc	85 3d		sta $3d				sta 	gxzScreen+1
.88de	e6 0b		inc $0b				inc 	GXEditSlot
.88e0					_GXMPDExit:
.88e0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/collide.asm

.88e1					GXCollide:
.88e1	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.88e3	aa		tax				tax
.88e4	05 37		ora $37				ora 	gxzTemp0+1
.88e6	29 c0		and #$c0			and 	#$C0
.88e8	38		sec				sec
.88e9	d0 53		bne $893e			bne 	_GXCollideFail 				; if either >= 64, fail.
.88eb	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.88ed	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.88f0	1d 4b 06	ora $064b,x			ora 	GXSpriteLow,x
.88f3	30 48		bmi $893d			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.88f5	18		clc				clc 								; need to calculate sum of sizes.
.88f6	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y
.88f9	7d 8b 06	adc $068b,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.88fc	29 c0		and #$c0			and 	#$C0 					 	; mask off
.88fe	6a		ror a				ror 	a 							; 5/6/7
.88ff	4a		lsr a				lsr 	a 							; 4/5/6
.8900	4a		lsr a				lsr 	a 							; 3/4/5
.8901	4a		lsr a				lsr 	a 							; 2/3/4
.8902	18		clc				clc
.8903	69 08		adc #$08			adc 	#$08
.8905	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.8906	4a		lsr a				lsr 	a
.8907	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.8909	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.890c	29 3f		and #$3f			and 	#$3F
.890e	85 39		sta $39				sta 	gxzTemp1+1
.8910	38		sec				sec
.8911	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8914	29 3f		and #$3f			and 	#$3F
.8916	e5 39		sbc $39				sbc 	gxzTemp1+1
.8918	b0 03		bcs $891d			bcs 	_GXCAbs1 					; calculate |y1-y0|
.891a	49 ff		eor #$ff			eor 	#$FF
.891c	1a		inc a				inc 	a
.891d					_GXCAbs1:
.891d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.891f	b0 1c		bcs $893d			bcs 	_GXOkayFail
.8921	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.8923	38		sec				sec 								; calculate |x1-x0|
.8924	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y
.8927	fd 4b 06	sbc $064b,x			sbc 	GXSpriteLow,x
.892a	b0 03		bcs $892f			bcs 	_GXCAbs2
.892c	49 ff		eor #$ff			eor 	#$FF
.892e	1a		inc a				inc 	a
.892f					_GXCAbs2:
.892f	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8931	b0 0a		bcs $893d			bcs 	_GXOkayFail
.8933	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.8935	90 02		bcc $8939			bcc 	_GXCHaveLowest
.8937	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.8939					_GXCHaveLowest:
.8939	0a		asl a				asl 	a 							; scale to allow for >> 2
.893a	0a		asl a				asl 	a
.893b	18		clc				clc
.893c	60		rts				rts
.893d					_GXOkayFail:
.893d	18		clc				clc
.893e					_GXCollideFail:
.893e	a9 ff		lda #$ff			lda 	#$FF
.8940	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8941					GXFindSprite:
.8941	aa		tax				tax
.8942	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8945	85 0b		sta $0b				sta 	GXEditSlot
.8947	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.894a	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.894d	f0 33		beq $8982			beq 	_GXFSFail
.894f	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8952	8d e2 06	sta $06e2			sta 	GXSpriteOffset+1
.8955	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8958	48		pha				pha 								; save twice
.8959	48		pha				pha
.895a	29 03		and #$03			and 	#3 							; get sprite size
.895c	8d df 06	sta $06df			sta 	GXSizeBits 					; save raw (0-3)
.895f	aa		tax				tax
.8960	bd 84 89	lda $8984,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8963	8d de 06	sta $06de			sta 	GXSizePixels 					; save (8/16/24/32)
.8966	68		pla				pla 								; get LUT
.8967	4a		lsr a				lsr		a
.8968	4a		lsr a				lsr		a
.8969	29 03		and #$03			and 	#3
.896b	8d e0 06	sta $06e0			sta 	GXSpriteLUT
.896e	68		pla				pla 								; address, neeeds to be x 4
.896f	29 f0		and #$f0			and 	#$F0
.8971	8d e1 06	sta $06e1			sta 	GXSpriteOffset
.8974	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.8977	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.897a	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.897d	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.8980	18		clc				clc
.8981	60		rts				rts
.8982					_GXFSFail:
.8982	38		sec				sec
.8983	60		rts				rts
.8984					_GXFXSSTTable:
>8984	08 10 18 20					.byte 	8,16,24,32
.06de					GXSizePixels:
>06de							.fill 	1
.06df					GXSizeBits:
>06df							.fill 	1
.06e0					GXSpriteLUT:
>06e0							.fill 	1
.06e1					GXSpriteOffset:
>06e1							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8988					GXSortXY:
.8988	20 a6 89	jsr $89a6			jsr 	GXSortY 					; will be sorted on Y now
.898b	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.898e	cd 36 06	cmp $0636			cmp 	gxX1
.8991	ad 33 06	lda $0633			lda 	gXX0+1
.8994	ed 37 06	sbc $0637			sbc 	gXX1+1
.8997	90 0c		bcc $89a5			bcc 	_GXSXYExit 					; X0 < X1 exit
.8999	a2 00		ldx #$00			ldx 	#0 							; swap them over
.899b	a0 04		ldy #$04			ldy 	#4
.899d	20 ba 89	jsr $89ba			jsr 	GXSwapXY
.89a0	e8		inx				inx
.89a1	c8		iny				iny
.89a2	20 ba 89	jsr $89ba			jsr 	GXSwapXY
.89a5					_GXSXYExit:
.89a5	60		rts				rts
.89a6					GXSortY:
.89a6	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.89a9	cd 38 06	cmp $0638			cmp 	gxY1
.89ac	90 0b		bcc $89b9			bcc 	_GXSYSorted
.89ae	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.89b0	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.89b2					_GXSwap1:
.89b2	20 ba 89	jsr $89ba			jsr 	GXSwapXY
.89b5	88		dey				dey
.89b6	ca		dex				dex
.89b7	10 f9		bpl $89b2			bpl 	_GXSwap1
.89b9					_GXSYSorted:
.89b9	60		rts				rts
.89ba					GXSwapXY:
.89ba	bd 32 06	lda $0632,x			lda 	gxX0,x
.89bd	48		pha				pha
.89be	b9 32 06	lda $0632,y			lda 	gxX0,y
.89c1	9d 32 06	sta $0632,x			sta 	gxX0,x
.89c4	68		pla				pla
.89c5	99 32 06	sta $0632,y			sta 	gxX0,y
.89c8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.89c9					AssembleGroup1:
.89c9	a9 ff		lda #$ff			lda 	#$FF
.89cb	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89ce	80 02		bra $89d2			bra 	AsmGroup12
.89d0					AssembleGroup2:
.89d0	a5 00		lda $00				lda 	$00
.89d2					AsmGroup12:
.89d2	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89d5	68		pla				pla 								; pop the return address to access the information following.
.89d6	fa		plx				plx
.89d7	20 60 8a	jsr $8a60			jsr 	AccessParameters 			; get opcode and save as base
.89da	8d a4 04	sta $04a4			sta 	BaseOpcode
.89dd	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89e0	d0 08		bne $89ea			bne 	_AG12HaveMask
.89e2	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89e4	20 68 8a	jsr $8a68			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89e7	8d a5 04	sta $04a5			sta 	ModeMask
.89ea					_AG12HaveMask:
.89ea	20 a3 8b	jsr $8ba3			jsr 	TypeAndCalculateOperand 	; get zero page type
.89ed	da		phx				phx 								; save found address mode
.89ee	20 cc 8a	jsr $8acc			jsr 	AssembleModeX
.89f1	fa		plx				plx  								; restore address mode
.89f2	b0 0b		bcs $89ff			bcs 	_AG12Exit
.89f4	20 00 8a	jsr $8a00			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89f7	20 cc 8a	jsr $8acc			jsr 	AssembleModeX
.89fa	b0 03		bcs $89ff			bcs 	_AG12Exit
.89fc	4c 45 b5	jmp $b545			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89ff					_AG12Exit:
.89ff	60		rts				rts
.8a00					PromoteToAbsolute:
.8a00	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8a02	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8a04	f0 19		beq $8a1f			beq 	_PTADo
.8a06	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8a08	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8a0a	f0 13		beq $8a1f			beq 	_PTADo
.8a0c	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8a0e	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8a10	f0 0d		beq $8a1f			beq 	_PTADo
.8a12	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8a14	e0 d1		cpx #$d1			cpx 	#AM_IND
.8a16	f0 07		beq $8a1f			beq 	_PTADo
.8a18	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8a1a	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8a1c	f0 01		beq $8a1f			beq 	_PTADo
.8a1e	60		rts				rts
.8a1f					_PTADo:
.8a1f	aa		tax				tax
.8a20	60		rts				rts
.8a21					AssembleGroup3:
.8a21	68		pla				pla 								; get parameters, which is just the opcode.
.8a22	fa		plx				plx
.8a23	20 60 8a	jsr $8a60			jsr 	AccessParameters 			; get and output opcode
.8a26	20 78 8a	jsr $8a78			jsr 	AssemblerWriteByte
.8a29	20 07 8c	jsr $8c07			jsr 	CalculateOperand 			; get a 16 bit operand
.8a2c	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a2f	38		sec				sec
.8a30	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a33	48		pha				pha 								; LSB in A
.8a34	ad 10 04	lda $0410			lda 	NSMantissa1
.8a37	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a3a	aa		tax				tax 								; MSB in X
.8a3b	68		pla				pla
.8a3c	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a3d	69 7f		adc #$7f			adc 	#$7F
.8a3f	90 01		bcc $8a42			bcc 	_AG3NoCarry
.8a41	e8		inx				inx
.8a42					_AG3NoCarry:
.8a42	38		sec				sec 								; fix back and write out anyways.
.8a43	e9 80		sbc #$80			sbc 	#$80
.8a45	20 78 8a	jsr $8a78			jsr 	AssemblerWriteByte
.8a48	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a4a	f0 0a		beq $8a56			beq 	_AG3Exit
.8a4c	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a4f	29 01		and #$01			and 	#1
.8a51	f0 03		beq $8a56			beq 	_AG3Exit
.8a53	4c 4a b5	jmp $b54a			jmp 	RangeError 					; no, branch is out of range
.8a56					_AG3Exit:
.8a56	60		rts				rts
.8a57					AssembleGroup4:
.8a57	68		pla				pla 								; pop address
.8a58	fa		plx				plx
.8a59	20 60 8a	jsr $8a60			jsr 	AccessParameters 			; access and get first
.8a5c	20 78 8a	jsr $8a78			jsr 	AssemblerWriteByte 			; output it.
.8a5f	60		rts				rts
.8a60					AccessParameters:
.8a60	8d a1 04	sta $04a1			sta 	ParamStart
.8a63	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a66	a9 01		lda #$01			lda 	#1
.8a68					GetParameter:
.8a68	5a		phy				phy
.8a69	a8		tay				tay
.8a6a	ad a1 04	lda $04a1			lda 	ParamStart
.8a6d	85 36		sta $36				sta 	zTemp0
.8a6f	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a72	85 37		sta $37				sta 	zTemp0+1
.8a74	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a76	7a		ply				ply
.8a77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a78					AssemblerWriteByte:
.8a78	48		pha			pha
.8a79	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a7c	29 02		and #$02		and 	#2
.8a7e	f0 1b		beq $8a9b		beq 	_AWBNoPrint
.8a80	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a83	20 b6 8a	jsr $8ab6		jsr 	PrintHex
.8a86	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a89	20 b6 8a	jsr $8ab6		jsr 	PrintHex
.8a8c	a9 20		lda #$20		lda 	#' '
.8a8e	20 ff b6	jsr $b6ff		jsr 	EXTPrintCharacter
.8a91	68		pla			pla 									; print byte
.8a92	48		pha			pha
.8a93	20 b6 8a	jsr $8ab6		jsr 	PrintHex
.8a96	a9 0d		lda #$0d		lda 	#13
.8a98	20 ff b6	jsr $b6ff		jsr 	EXTPrintCharacter
.8a9b					_AWBNoPrint:
.8a9b	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a9e	85 36		sta $36			sta 	zTemp0
.8aa0	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8aa3	f0 0e		beq $8ab3		beq 	_AWBRange
.8aa5	85 37		sta $37			sta 	zTemp0+1
.8aa7	68		pla			pla 									; write byte out
.8aa8	92 36		sta ($36)		sta 	(zTemp0)
.8aaa	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8aad	d0 03		bne $8ab2		bne 	_AWBNoCarry
.8aaf	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8ab2					_AWBNoCarry:
.8ab2	60		rts			rts
.8ab3					_AWBRange:
.8ab3	4c 4a b5	jmp $b54a		jmp 	RangeError
.8ab6					PrintHex:
.8ab6	48		pha				pha
.8ab7	4a		lsr a				lsr 	a
.8ab8	4a		lsr a				lsr 	a
.8ab9	4a		lsr a				lsr 	a
.8aba	4a		lsr a				lsr 	a
.8abb	20 bf 8a	jsr $8abf			jsr 	_PrintNibble
.8abe	68		pla				pla
.8abf					_PrintNibble:
.8abf	29 0f		and #$0f			and 	#15
.8ac1	c9 0a		cmp #$0a			cmp 	#10
.8ac3	90 02		bcc $8ac7			bcc 	_NoShift
.8ac5	69 06		adc #$06			adc 	#6
.8ac7					_NoShift:
.8ac7	69 30		adc #$30			adc 	#48
.8ac9	4c ff b6	jmp $b6ff			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8acc					AssembleModeX:
.8acc	5a		phy				phy
.8acd	ad a3 04	lda $04a3			lda 	IsGroup1
.8ad0	f0 17		beq $8ae9			beq 	_AMXGroup2
.8ad2	8a		txa				txa 							; is it in group # 1
.8ad3	29 40		and #$40			and 	#AM_ISG1
.8ad5	f0 50		beq $8b27			beq 	_AMXFail 				; no, give up.
.8ad7	8a		txa				txa 							; get back.
.8ad8	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8ada	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8adc	d0 22		bne $8b00			bne 	_AMXHaveInfo
.8ade	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ae1	c9 81		cmp #$81			cmp 	#$81
.8ae3	f0 42		beq $8b27			beq 	_AMXFail
.8ae5	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ae7	80 17		bra $8b00			bra 	_AMXHaveInfo 			; odd design decision there.
.8ae9					_AMXGroup2:
.8ae9	8a		txa				txa 							; is it in group 2 ?
.8aea	29 20		and #$20			and 	#AM_ISG2
.8aec	f0 39		beq $8b27			beq 	_AMXFail 				; no, give up.
.8aee	8a		txa				txa 							; get the offset into Y
.8aef	29 1f		and #$1f			and 	#$1F
.8af1	4a		lsr a				lsr 	a 						; make it 0-7.
.8af2	4a		lsr a				lsr  	a
.8af3	a8		tay				tay
.8af4	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8af7					_AMXCheckOkay:
.8af7	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8af8	88		dey				dey
.8af9	10 fc		bpl $8af7			bpl 	_AMXCheckOkay
.8afb	90 2a		bcc $8b27			bcc 	_AMXFail 				; not allowed.
.8afd	8a		txa				txa  							; get mask back
.8afe	29 1f		and #$1f			and 	#$1F
.8b00					_AMXHaveInfo:
.8b00	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8b02	10 05		bpl $8b09			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8b04	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8b07	d0 1e		bne $8b27			bne 	_AMXFail
.8b09					_AMXAnySize:
.8b09	18		clc				clc 							; add offset to the base opcode
.8b0a	6d a4 04	adc $04a4			adc 	BaseOpcode
.8b0d					_AMXOutputCode:
.8b0d	20 78 8a	jsr $8a78			jsr 	AssemblerWriteByte 		; write the opcode out.
.8b10	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8b12	f0 10		beq $8b24			beq 	_AMXExit
.8b14	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8b17	20 78 8a	jsr $8a78			jsr 	AssemblerWriteByte
.8b1a	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8b1c	30 06		bmi $8b24			bmi 	_AMXExit
.8b1e	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8b21	20 78 8a	jsr $8a78			jsr 	AssemblerWriteByte
.8b24					_AMXExit:
.8b24	7a		ply				ply
.8b25	38		sec				sec
.8b26	60		rts				rts
.8b27					_AMXFail:
.8b27	a0 00		ldy #$00			ldy 	#0
.8b29					_AMXCheckOddities:
.8b29	8a		txa				txa
.8b2a	d9 52 8b	cmp $8b52,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b2d	d0 16		bne $8b45			bne 	_AMXCONext
.8b2f	b9 50 8b	lda $8b50,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b32	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b35	d0 0e		bne $8b45			bne 	_AMXCONext
.8b37	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b39	10 05		bpl $8b40			bpl 	_AMXCONotZero
.8b3b	ad 10 04	lda $0410			lda 	NSMantissa1
.8b3e	d0 05		bne $8b45			bne 	_AMXCONext
.8b40					_AMXCONotZero:
.8b40	b9 51 8b	lda $8b51,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b43	80 c8		bra $8b0d			bra 	_AMXOutputCode 			; and assemble it
.8b45					_AMXCONext:
.8b45	c8		iny				iny
.8b46	c8		iny				iny
.8b47	c8		iny				iny
.8b48	b9 50 8b	lda $8b50,y			lda 	ExtraOpcode+0,y 		; end of table
.8b4b	d0 dc		bne $8b29			bne 	_AMXCheckOddities
.8b4d					_AMXCOFail:
.8b4d	7a		ply				ply
.8b4e	18		clc				clc
.8b4f	60		rts				rts
.8b50					ExtraOpcode:
>8b50	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b53	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b56	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b59	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b5c	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b5f	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b62	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b65	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b68	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b6b	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b6e	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b6f					LabelHere:
.8b6f	c8		iny				iny 								; skip .
.8b70	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b72	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm 				; get a term
.8b75	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b78	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b7a	d0 24		bne $8ba0			bne 	_ALType
.8b7c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b7f	85 36		sta $36				sta 	zTemp0
.8b81	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b84	85 37		sta $37				sta 	zTemp0+1
.8b86	5a		phy				phy 								; copy address in.
.8b87	a0 01		ldy #$01			ldy 	#1
.8b89	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b8c	92 36		sta ($36)			sta 	(zTemp0)
.8b8e	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b91	91 36		sta ($36),y			sta 	(zTemp0),y
.8b93	c8		iny				iny
.8b94	a9 00		lda #$00			lda 	#0
.8b96	91 36		sta ($36),y			sta 	(zTemp0),y
.8b98	c8		iny				iny
.8b99	91 36		sta ($36),y			sta 	(zTemp0),y
.8b9b	c8		iny				iny
.8b9c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b9e	7a		ply				ply
.8b9f	60		rts				rts
.8ba0					_ALType:
.8ba0	4c 4f b5	jmp $b54f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8ba3					TypeAndCalculateOperand:
.8ba3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba5	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ba7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ba9	f0 5b		beq $8c06			beq 	_TACOExit
.8bab	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bad	f0 57		beq $8c06			beq 	_TACOExit
.8baf	c8		iny				iny
.8bb0	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8bb2	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8bb4	f0 51		beq $8c07			beq 	CalculateOperand
.8bb6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8bb8	f0 1f		beq $8bd9			beq 	_TACOIndirect
.8bba	88		dey				dey 								; undo get of first character
.8bbb	20 07 8c	jsr $8c07			jsr 	CalculateOperand 			; get operand
.8bbe	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc0	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8bc2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bc4	d0 40		bne $8c06			bne 	_TACOExit
.8bc6	c8		iny				iny
.8bc7	20 ce ae	jsr $aece			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8bca	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8bcc	c9 58		cmp #$58			cmp 	#'X'
.8bce	f0 36		beq $8c06			beq 	_TACOExit
.8bd0	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8bd2	c9 59		cmp #$59			cmp 	#'Y'
.8bd4	f0 30		beq $8c06			beq 	_TACOExit
.8bd6					_TACOSyntax:
.8bd6	4c 45 b5	jmp $b545			jmp 	SyntaxError
.8bd9					_TACOIndirect:
.8bd9	20 07 8c	jsr $8c07			jsr 	CalculateOperand 			; get the operand
.8bdc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bde	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8be0	f0 17		beq $8bf9			beq 	_TACOIndX
.8be2	20 57 af	jsr $af57			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8be5	b1 30		lda ($30),y			lda 	(codePtr),y
.8be7	a2 d1		ldx #$d1			ldx 	#AM_IND
.8be9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8beb	d0 19		bne $8c06			bne 	_TACOExit
.8bed	c8		iny				iny
.8bee	20 ce ae	jsr $aece			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bf1	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bf3	d0 e1		bne $8bd6			bne 	_TACOSyntax
.8bf5	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bf7	80 0d		bra $8c06			bra 	_TACOExit
.8bf9					_TACOIndX:
.8bf9	c8		iny				iny
.8bfa	20 ce ae	jsr $aece			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bfd	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bff	d0 d5		bne $8bd6			bne 	_TACOSyntax
.8c01	20 57 af	jsr $af57			jsr 	CheckRightBracket			; check )
.8c04	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8c06					_TACOExit:
.8c06	60		rts				rts
.8c07					CalculateOperand:
.8c07	48		pha				pha
.8c08	da		phx				phx
.8c09	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8c0b	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.8c0e	fa		plx				plx
.8c0f	68		pla				pla
.8c10	60		rts				rts
.aece					TACOCheckXY:
.aece	b1 30		lda ($30),y			lda 	(codePtr),y
.aed0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.aed2	c9 40		cmp #$40			cmp 	#$40
.aed4	d0 21		bne $aef7			bne 	_TCXYFail
.aed6	b1 30		lda ($30),y			lda 	(codePtr),y
.aed8	18		clc				clc
.aed9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aedb	85 37		sta $37				sta 	zTemp0+1
.aedd	c8		iny				iny
.aede	b1 30		lda ($30),y			lda 	(codePtr),y
.aee0	c8		iny				iny
.aee1	85 36		sta $36				sta 	zTemp0
.aee3	5a		phy				phy 								; save position
.aee4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.aee6	b1 36		lda ($36),y			lda 	(zTemp0),y
.aee8	d0 0c		bne $aef6			bne 	_TCXYPopFail
.aeea	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.aeec	b1 36		lda ($36),y			lda 	(zTemp0),y
.aeee	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aef0	f0 08		beq $aefa			beq 	_TCXYFound
.aef2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aef4	f0 04		beq $aefa			beq 	_TCXYFound
.aef6					_TCXYPopFail:
.aef6	7a		ply				ply
.aef7					_TCXYFail:
.aef7	a9 00		lda #$00			lda 	#0
.aef9	60		rts				rts
.aefa					_TCXYFound:
.aefa	7a		ply				ply 								; restore position
.aefb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aefd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8c11					EditProgramCode:
.8c11	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8c14	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8c17	20 73 a7	jsr $a773			jsr 	MemorySearch
.8c1a	90 05		bcc $8c21			bcc 	_EPCNoDelete 				; reached the end don't delete
.8c1c	d0 03		bne $8c21			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8c1e	20 8a b7	jsr $b78a			jsr 	MemoryDeleteLine 			; delete the line
.8c21					_EPCNoDelete:
.8c21	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8c24	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c26	f0 0d		beq $8c35			beq 	_EPCNoInsert
.8c28	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8c2b	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c2e	20 73 a7	jsr $a773			jsr 	MemorySearch
.8c31	18		clc				clc 								; insert at this point.
.8c32	20 c1 b7	jsr $b7c1			jsr 	MemoryInsertLine 			; insert the line
.8c35					_EPCNoInsert:
.8c35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c36					WarmStart:
.8c36	a2 ff		ldx #$ff			ldx 	#$FF
.8c38	9a		txs				txs
.8c39	20 15 b7	jsr $b715			jsr 	EXTInputLine 				; get line to lineBuffer
.8c3c	20 4f ac	jsr $ac4f			jsr 	TokeniseLine 				; tokenise the line
.8c3f	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8c42	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8c45	d0 17		bne $8c5e			bne 	_WSEditCode 				; if so,edit code.
.8c47	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c4a	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8c4c	85 30		sta $30				sta 	codePtr
.8c4e	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c50	85 31		sta $31				sta 	codePtr+1
.8c52	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8c55	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c57	f0 dd		beq $8c36			beq 	WarmStart
.8c59	20 e0 95	jsr $95e0			jsr 	RUNCodePointerLine 			; execute that line.
.8c5c	80 d8		bra $8c36			bra 	WarmStart
.8c5e					_WSEditCode:
.8c5e	20 11 8c	jsr $8c11			jsr 	EditProgramCode
.8c61	20 cf 8c	jsr $8ccf			jsr 	ClearCommand
.8c64	80 d0		bra $8c36			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c66					AssembleCommand:
.8c66	a2 00		ldx #$00			ldx 	#0
.8c68	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger 		; start address
.8c6b	ad 08 04	lda $0408			lda 	NSMantissa0
.8c6e	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c71	ad 10 04	lda $0410			lda 	NSMantissa1
.8c74	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c77	20 5f af	jsr $af5f			jsr 	CheckComma
.8c7a	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; options
.8c7d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c80	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c83	60		rts				rts
.8c84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c85					AssertCommand:
.8c85	a2 00		ldx #$00			ldx 	#0
.8c87	20 77 a6	jsr $a677			jsr 	EvaluateInteger 			; the assert test
.8c8a	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; exit if result is non zero.
.8c8d	d0 05		bne $8c94			bne 	_ACExit
.8c8f	a9 0a		lda #$0a		lda	#10
.8c91	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.8c94					_ACExit:
.8c94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c95					CallCommand:
.8c95	a2 00		ldx #$00			ldx 	#0
.8c97	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.8c9a					_CCClear
.8c9a	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c9b	20 14 a7	jsr $a714			jsr 	NSMSetZero
.8c9e	e0 04		cpx #$04			cpx 	#4
.8ca0	d0 f8		bne $8c9a			bne 	_CCClear
.8ca2	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8ca4					_CCCParam:
.8ca4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ca8	d0 09		bne $8cb3			bne 	_CCCRun6502
.8caa	c8		iny				iny 								; skip comma
.8cab	e8		inx				inx	 								; next level
.8cac	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8caf	e0 03		cpx #$03			cpx 	#3
.8cb1	90 f1		bcc $8ca4			bcc 	_CCCParam 					; done all 3 ?
.8cb3					_CCCRun6502:
.8cb3	5a		phy				phy 								; save position
.8cb4	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8cb7	85 37		sta $37				sta 	zTemp0+1
.8cb9	ad 08 04	lda $0408			lda 	NSMantissa0
.8cbc	85 36		sta $36				sta 	zTemp0
.8cbe	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8cc1	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8cc4	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8cc7	20 cc 8c	jsr $8ccc			jsr 	_CCCZTemp0 					; call zTemp0
.8cca	7a		ply				ply 								; restore position and exit
.8ccb	60		rts				rts
.8ccc					_CCCZTemp0:
.8ccc	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ccf					ClearCommand:
.8ccf	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8cd1	85 36		sta $36				sta 	0+zTemp0
.8cd3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cd5	85 37		sta $37				sta 	1+zTemp0
.8cd7					_ClearZeroLoop:
.8cd7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cd9	f0 24		beq $8cff			beq 	_ClearZeroEnd
.8cdb	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cdd	a9 00		lda #$00			lda 	#0
.8cdf					_ClearOneVariable:
.8cdf	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce1	c8		iny				iny
.8ce2	c0 08		cpy #$08			cpy 	#8
.8ce4	d0 f9		bne $8cdf			bne 	_ClearOneVariable
.8ce6	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8ce8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cea	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cec	d0 04		bne $8cf2			bne 	_ClearNotProcedure
.8cee	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cf0	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf2					_ClearNotProcedure:
.8cf2	18		clc				clc 								; go to the next variable
.8cf3	b2 36		lda ($36)			lda 	(zTemp0)
.8cf5	65 36		adc $36				adc 	zTemp0
.8cf7	85 36		sta $36				sta 	zTemp0
.8cf9	90 dc		bcc $8cd7			bcc 	_ClearZeroLoop
.8cfb	e6 37		inc $37				inc 	zTemp0+1
.8cfd	80 d8		bra $8cd7			bra 	_ClearZeroLoop
.8cff					_ClearZeroEnd:
.8cff	18		clc				clc
.8d00	a5 36		lda $36				lda 	zTemp0
.8d02	69 01		adc #$01			adc 	#1
.8d04	8d 8c 04	sta $048c			sta 	lowMemPtr
.8d07	a5 37		lda $37				lda 	zTemp0+1
.8d09	69 00		adc #$00			adc 	#0
.8d0b	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8d0e	20 2d a8	jsr $a82d			jsr 	StackReset
.8d11	20 a4 b8	jsr $b8a4			jsr 	StringSystemInitialise
.8d14	20 e2 99	jsr $99e2			jsr 	ProcedureScan
.8d17	20 9c 95	jsr $959c			jsr 	Command_Restore
.8d1a	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8d1d	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8d20	9c a0 04	stz $04a0			stz 	AssemblerControl
.8d23	20 ae a3	jsr $a3ae			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8d26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8d27					ClearScreen:
.8d27	5a		phy				phy
.8d28	20 fc b6	jsr $b6fc			jsr 	EXTClearScreen
.8d2b	7a		ply				ply
.8d2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8d2d					Command_Data:
.8d2d	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8d2f	a2 80		ldx #$80			ldx 	#KWC_EOL
.8d31	20 34 9a	jsr $9a34			jsr 	ScanForward
.8d34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d35					DimCommand:
.8d35	b1 30		lda ($30),y			lda 	(codePtr),y
.8d37	29 c0		and #$c0			and 	#$C0
.8d39	c9 40		cmp #$40			cmp 	#$40
.8d3b	d0 7a		bne $8db7			bne 	_DCSyntax
.8d3d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3f	18		clc				clc
.8d40	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d42	85 3f		sta $3f				sta 	zaTemp+1
.8d44	c8		iny				iny
.8d45	b1 30		lda ($30),y			lda 	(codePtr),y
.8d47	c8		iny				iny
.8d48	85 3e		sta $3e				sta 	zaTemp
.8d4a	5a		phy				phy
.8d4b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d4d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d51	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d53	f0 62		beq $8db7			beq 	_DCSyntax
.8d55	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d57	29 04		and #$04			and 	#NSBIsArray
.8d59	f0 64		beq $8dbf			beq 	_DCType
.8d5b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d5d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d5f	d0 59		bne $8dba			bne 	_DCRedefine
.8d61	7a		ply				ply
.8d62	20 c2 8d	jsr $8dc2			jsr 	_DCGetSize 				; get array size, check it.
.8d65	5a		phy				phy
.8d66	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d68	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d6a	7a		ply				ply 							; is there a second (e.g. ,x)
.8d6b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d6f	d0 0a		bne $8d7b			bne 	_DCOneDimension
.8d71	c8		iny				iny 							; skip comma
.8d72	20 c2 8d	jsr $8dc2			jsr 	_DCGetSize 				; get 2nd array size
.8d75	5a		phy				phy
.8d76	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d78	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d7a	7a		ply				ply
.8d7b					_DCOneDimension:
.8d7b	5a		phy				phy 							; save position
.8d7c	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d7e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d80	aa		tax				tax
.8d81	c8		iny				iny
.8d82	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d84	e8		inx				inx 							; bump them.
.8d85	1a		inc a				inc 	a
.8d86	20 e1 b3	jsr $b3e1			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d89	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d8b	29 e0		and #$e0			and 	#$E0
.8d8d	d0 23		bne $8db2			bne 	_DCSize
.8d8f	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d91	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d93	20 d0 8d	jsr $8dd0			jsr 	ScaleByBaseType 		; scale by base type
.8d96	a5 36		lda $36				lda 	zTemp0
.8d98	a6 37		ldx $37				ldx 	zTemp0+1
.8d9a	20 70 a3	jsr $a370			jsr 	AllocateXABytes 		; allocate memory
.8d9d	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d9f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8da1	c8		iny				iny
.8da2	8a		txa				txa
.8da3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8da5	7a		ply				ply 							; get position back
.8da6	20 57 af	jsr $af57			jsr 	CheckRightBracket 		; check )
.8da9	b1 30		lda ($30),y			lda 	(codePtr),y
.8dab	c8		iny				iny 							; consume in case
.8dac	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8dae	f0 85		beq $8d35			beq 	DimCommand
.8db0	88		dey				dey 							; undo consume
.8db1	60		rts				rts
.8db2					_DCSize:
.8db2	a9 16		lda #$16		lda	#22
.8db4	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.8db7					_DCSyntax:
.8db7	4c 45 b5	jmp $b545			jmp 	SyntaxError
.8dba					_DCRedefine:
.8dba	a9 15		lda #$15		lda	#21
.8dbc	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.8dbf					_DCType:
.8dbf	4c 4f b5	jmp $b54f			jmp 	TypeError
.8dc2					_DCGetSize:
.8dc2	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8dc4	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 	; get array dimension
.8dc7	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8dc9	f0 e7		beq $8db2			beq 	_DCSize
.8dcb	c9 fe		cmp #$fe			cmp 	#254
.8dcd	f0 e3		beq $8db2			beq 	_DCSize
.8dcf	60		rts				rts
.8dd0					ScaleByBaseType:
.8dd0	29 10		and #$10			and 	#NSBIsString 			; is it string
.8dd2	d0 19		bne $8ded			bne 	_SBBTString
.8dd4	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8dd6	48		pha				pha
.8dd7	a5 36		lda $36				lda 	zTemp0
.8dd9	48		pha				pha
.8dda	06 36		asl $36				asl 	zTemp0 					; x 2
.8ddc	26 37		rol $37				rol 	zTemp0+1
.8dde	06 36		asl $36				asl 	zTemp0 					; x 4
.8de0	26 37		rol $37				rol 	zTemp0+1
.8de2	68		pla				pla 							; add stacked value = x 5
.8de3	65 36		adc $36				adc 	zTemp0
.8de5	85 36		sta $36				sta 	zTemp0
.8de7	68		pla				pla
.8de8	65 37		adc $37				adc 	zTemp0+1
.8dea	85 37		sta $37				sta 	zTemp0+1
.8dec	60		rts				rts
.8ded					_SBBTString:
.8ded	06 36		asl $36				asl 	zTemp0
.8def	26 37		rol $37				rol 	zTemp0+1
.8df1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8df2					EndCommand:
.8df2	4c 36 8c	jmp $8c36			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8df5					UnaryEvent:
.8df5	fa		plx				plx
.8df6	20 21 98	jsr $9821			jsr 	TimerToStackX 				; timer in +0
.8df9	e8		inx				inx  								; put reference into +1
.8dfa	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm
.8dfd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8e00	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8e02	d0 57		bne $8e5b			bne 	_UEType
.8e04	e8		inx				inx 								; put the step in +2
.8e05	20 5f af	jsr $af5f			jsr 	CheckComma
.8e08	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.8e0b	20 57 af	jsr $af57			jsr 	CheckRightBracket
.8e0e	ca		dex				dex
.8e0f	ca		dex				dex
.8e10	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8e13	85 36		sta $36				sta 	zTemp0
.8e15	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8e18	85 37		sta $37				sta 	zTemp0+1
.8e1a	5a		phy				phy
.8e1b	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8e1d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e1f	30 36		bmi $8e57			bmi 	_UEFalse 					; exit if signed.
.8e21	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8e23	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e26	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e28	c8		iny				iny
.8e29	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e2c	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e2e	c8		iny				iny
.8e2f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e32	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e34	90 21		bcc $8e57			bcc 	_UEFalse 					; no, return FALSE.
.8e36	18		clc				clc
.8e37	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e39	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e3c	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e3f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e41	c8		iny				iny
.8e42	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e45	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e48	91 36		sta ($36),y			sta 	(zTemp0),y
.8e4a	c8		iny				iny
.8e4b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e4e	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e51	91 36		sta ($36),y			sta 	(zTemp0),y
.8e53	7a		ply				ply
.8e54	4c 46 9b	jmp $9b46			jmp 	ReturnTrue
.8e57					_UEFalse:
.8e57	7a		ply				ply 								; restore Y
.8e58	4c 52 9b	jmp $9b52			jmp 	ReturnFalse 				; and return False
.8e5b					_UEType:
.8e5b	4c 4f b5	jmp $b54f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e5e					ForCommand:
.8e5e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e60	20 c8 a7	jsr $a7c8			jsr 	StackOpen
.8e63	a2 00		ldx #$00			ldx 	#0
.8e65	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm
.8e68	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e6b	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e6d	d0 49		bne $8eb8			bne		_FCError
.8e6f	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e71	20 67 af	jsr $af67			jsr 	CheckNextA
.8e74	e8		inx				inx
.8e75	20 77 a6	jsr $a677			jsr 	EvaluateInteger 			; <from> in +1
.8e78	b1 30		lda ($30),y			lda 	(codePtr),y
.8e7a	c8		iny				iny 								; consume it
.8e7b	48		pha				pha 								; save on stack for later
.8e7c	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e7e	f0 04		beq $8e84			beq 	_FCNoSyntax
.8e80	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e82	d0 37		bne $8ebb			bne 	_FCSyntaxError
.8e84					_FCNoSyntax:
.8e84	e8		inx				inx
.8e85	20 77 a6	jsr $a677			jsr 	EvaluateInteger
.8e88	20 0c a8	jsr $a80c			jsr 	STKSaveCodePosition 		; save loop back position
.8e8b	68		pla				pla 								; restore DOWNTO or TO
.8e8c	5a		phy				phy 								; save Y on the stack
.8e8d	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e8f	f0 02		beq $8e93			beq 	_FCNotDownTo
.8e91	a9 02		lda #$02			lda 	#2
.8e93					_FCNotDownTo:
.8e93	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e94	a0 10		ldy #$10			ldy 	#16
.8e96	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e98	a0 06		ldy #$06			ldy 	#6
.8e9a	ad 08 04	lda $0408			lda 	NSMantissa0
.8e9d	91 34		sta ($34),y			sta 	(basicStack),y
.8e9f	ad 10 04	lda $0410			lda 	NSMantissa1
.8ea2	c8		iny				iny
.8ea3	91 34		sta ($34),y			sta 	(basicStack),y
.8ea5	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8ea7	a2 01		ldx #$01			ldx 	#1
.8ea9	20 be 8e	jsr $8ebe			jsr 	FCIntegerToStack
.8eac	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8eae	a2 02		ldx #$02			ldx 	#2
.8eb0	20 be 8e	jsr $8ebe			jsr 	FCIntegerToStack
.8eb3	20 de 8e	jsr $8ede			jsr 	CopyIndexToReference
.8eb6	7a		ply				ply 								; restore position
.8eb7	60		rts				rts
.8eb8					_FCError:
.8eb8	4c 4f b5	jmp $b54f			jmp 	TypeError
.8ebb					_FCSyntaxError:
.8ebb	4c 45 b5	jmp $b545			jmp 	SyntaxError
.8ebe					FCIntegerToStack:
.8ebe	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8ec1	10 03		bpl $8ec6			bpl	 	_FCNotNegative
.8ec3	20 c9 a6	jsr $a6c9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8ec6					_FCNotNegative:
.8ec6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8ec9	91 34		sta ($34),y			sta 	(basicStack),y
.8ecb	c8		iny				iny
.8ecc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ecf	91 34		sta ($34),y			sta 	(basicStack),y
.8ed1	c8		iny				iny
.8ed2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ed5	91 34		sta ($34),y			sta 	(basicStack),y
.8ed7	c8		iny				iny
.8ed8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8edb	91 34		sta ($34),y			sta 	(basicStack),y
.8edd	60		rts				rts
.8ede					CopyIndexToReference:
.8ede	5a		phy				phy
.8edf	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ee1	38		sec				sec 								; (because we copy from offset 8)
.8ee2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee4	e9 08		sbc #$08			sbc 	#8
.8ee6	85 36		sta $36				sta 	zTemp0
.8ee8	c8		iny				iny
.8ee9	b1 34		lda ($34),y			lda 	(basicStack),y
.8eeb	e9 00		sbc #$00			sbc 	#0
.8eed	85 37		sta $37				sta 	zTemp0+1
.8eef	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ef1	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ef3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ef5	0a		asl a				asl 	a 							; into carry
.8ef6	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ef8	90 14		bcc $8f0e			bcc 	_CITRNormal
.8efa	38		sec				sec
.8efb					_CITRNegative:
.8efb	a9 00		lda #$00			lda 	#0
.8efd	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8eff	91 36		sta ($36),y			sta 	(zTemp0),y
.8f01	c8		iny				iny
.8f02	ca		dex				dex
.8f03	d0 f6		bne $8efb			bne 	_CITRNegative
.8f05	88		dey				dey 								; look at MSB of mantissa
.8f06	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8f08	09 80		ora #$80			ora 	#$80
.8f0a	91 36		sta ($36),y			sta 	(zTemp0),y
.8f0c	7a		ply				ply
.8f0d	60		rts				rts
.8f0e					_CITRNormal:
.8f0e	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8f10	91 36		sta ($36),y			sta 	(zTemp0),y
.8f12	c8		iny				iny
.8f13	ca		dex				dex
.8f14	d0 f8		bne $8f0e			bne 	_CITRNormal
.8f16	7a		ply				ply 								; and exit.
.8f17	60		rts				rts
.8f18					NextCommand:
.8f18	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8f1a	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8f1c	20 f4 a7	jsr $a7f4			jsr 	StackCheckFrame
.8f1f	5a		phy				phy
.8f20	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8f22	b1 34		lda ($34),y			lda 	(basicStack),y
.8f24	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8f26	30 02		bmi $8f2a			bmi 	_NCStepNeg
.8f28	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8f2a					_NCStepNeg:
.8f2a	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8f2c	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8f2e	18		clc				clc
.8f2f					_NCBump:
.8f2f	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8f31	91 34		sta ($34),y			sta 	(basicStack),y
.8f33	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f35	c8		iny				iny 								; next byte
.8f36	ca		dex				dex 								; do four times
.8f37	d0 f6		bne $8f2f			bne 	_NCBump
.8f39	20 de 8e	jsr $8ede			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f3c	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f3e	b1 34		lda ($34),y			lda 	(basicStack),y
.8f40	0a		asl a				asl 	a 							; sign bit to carry
.8f41	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f43	85 38		sta $38				sta 	zTemp1
.8f45	90 02		bcc $8f49			bcc 	_NCCompRev 					; use if step is +ve
.8f47	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f49					_NCCompRev:
.8f49	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f4b	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f4d	85 39		sta $39				sta 	zTemp1+1
.8f4f	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f51	38		sec				sec
.8f52					_NCCompare:
.8f52	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f54	b1 34		lda ($34),y			lda 	(basicStack),y
.8f56	a4 39		ldy $39				ldy 	zTemp1+1
.8f58	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f5a	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f5c	e6 39		inc $39				inc 	zTemp1+1
.8f5e	ca		dex				dex 								; do it 4 times.
.8f5f	d0 f1		bne $8f52			bne 	_NCCompare
.8f61	50 02		bvc $8f65			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f63	49 80		eor #$80			eor 	#$80
.8f65					_NCNoOverflow:
.8f65	7a		ply				ply 								; restore Y position
.8f66	0a		asl a				asl 	a 							; is bit 7 set.
.8f67	90 04		bcc $8f6d			bcc 	_NCLoopback 				; if no , >= so loop back
.8f69	20 e6 a7	jsr $a7e6			jsr 	StackClose 					; exit the loop
.8f6c	60		rts				rts
.8f6d					_NCLoopBack:
.8f6d	20 1d a8	jsr $a81d			jsr 	STKLoadCodePosition 		; loop back
.8f70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f71					RectangleCommand:
.8f71	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8f73	80 02		bra $8f77			bra 	ShapeDrawCmd
.8f75					CircleCommand:
.8f75	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8f77					ShapeDrawCmd:
.8f77	20 05 90	jsr $9005			jsr 	RunGraphicsCommand
.8f7a					ShapeDraw:
.8f7a	0d e4 06	ora $06e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f7d	4c f9 8f	jmp $8ff9			jmp 	ExecuteGraphicCommand	 	; and complete
.8f80					SpriteCommand:
.8f80	a2 00		ldx #$00			ldx 	#0
.8f82	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get image number.
.8f85	5a		phy				phy
.8f86	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8f88	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f8b	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f8d	b0 0d		bcs $8f9c			bcs 	_SCRange
.8f8f	a0 ff		ldy #$ff			ldy 	#255
.8f91	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f94	a9 32		lda #$32			lda 	#25*2
.8f96	7a		ply				ply
.8f97	20 05 90	jsr $9005			jsr 	RunGraphicsCommand
.8f9a	80 5d		bra $8ff9			bra 	ExecuteGraphicCommand
.8f9c					_SCRange:
.8f9c	4c 4a b5	jmp $b54a			jmp 	RangeError
.8f9f					ImageCommand:
.8f9f	a2 00		ldx #$00			ldx 	#0
.8fa1	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get image number.
.8fa4	20 05 90	jsr $9005			jsr 	RunGraphicsCommand
.8fa7					ImageRunDraw:
.8fa7	09 20		ora #$20			ora 	#16*2 						; move cursor
.8fa9	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fac	ad ea 06	lda $06ea			lda 	gxDrawScale
.8faf	0a		asl a				asl 	a
.8fb0	0a		asl a				asl 	a
.8fb1	0a		asl a				asl 	a
.8fb2	a8		tay				tay
.8fb3	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8fb5	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8fb8	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fbb	60		rts				rts
.8fbc					TextCommand:
.8fbc	a2 00		ldx #$00			ldx 	#0
.8fbe	20 5f a6	jsr $a65f			jsr 	EvaluateString 				; get text
.8fc1	20 05 90	jsr $9005			jsr 	RunGraphicsCommand
.8fc4					TextRunDraw:
.8fc4	09 20		ora #$20			ora 	#16*2 						; move cursor
.8fc6	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fc9	a0 00		ldy #$00			ldy 	#0
.8fcb					_IRDLoop:
.8fcb	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8fce	85 37		sta $37				sta 	zTemp0+1
.8fd0	ad 08 04	lda $0408			lda 	NSMantissa0
.8fd3	85 36		sta $36				sta 	zTemp0
.8fd5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fd7	f0 13		beq $8fec			beq 	_IRDExit
.8fd9	5a		phy				phy									; save string pos
.8fda	48		pha				pha 								; save char
.8fdb	ad ea 06	lda $06ea			lda 	gxDrawScale 				; get scale
.8fde	0a		asl a				asl 	a
.8fdf	0a		asl a				asl 	a
.8fe0	0a		asl a				asl 	a
.8fe1	a8		tay				tay
.8fe2	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8fe4	fa		plx				plx 								; char to draw
.8fe5	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fe8	7a		ply				ply 								; restore string pos
.8fe9	c8		iny				iny
.8fea	90 df		bcc $8fcb			bcc 	_IRDLoop 					; go back if no error.
.8fec					_IRDExit:
.8fec	60		rts				rts
.8fed					PlotCommand:
.8fed	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8fef	20 05 90	jsr $9005			jsr 	RunGraphicsCommand
.8ff2	80 05		bra $8ff9			bra 	ExecuteGraphicCommand
.8ff4					LineCommand:
.8ff4	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8ff6	20 05 90	jsr $9005			jsr 	RunGraphicsCommand
.8ff9					ExecuteGraphicCommand:
.8ff9	0d e3 06	ora $06e3			ora 	gxCommandID 				; make a full command
.8ffc	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; draw it and exit
.8fff	b0 01		bcs $9002			bcs 	_EGCError
.9001	60		rts				rts
.9002					_EGCError:
.9002	4c 45 b5	jmp $b545			jmp 	SyntaxError
.9005					RunGraphicsCommand:
.9005	8d e3 06	sta $06e3			sta 	gxCommandID					; save TODO graphics command.
.9008	68		pla				pla 								; pop handler address
.9009	fa		plx				plx
.900a	1a		inc a				inc 	a
.900b	d0 01		bne $900e			bne 	_RGINoCarry
.900d	e8		inx				inx
.900e					_RGINoCarry:
.900e	8d e8 06	sta $06e8			sta 	GXHandler
.9011	8e e9 06	stx $06e9			stx 	GXHandler+1
.9014					_RGICommandLoop:
.9014	b1 30		lda ($30),y			lda 	(codePtr),y
.9016	c8		iny				iny
.9017	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.9019	f0 53		beq $906e			beq 	_RGI_To
.901b	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.901d	f0 55		beq $9074			beq 	_RGI_Here
.901f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.9021	f0 3d		beq $9060			beq 	_RGI_Exit
.9023	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9025	f0 39		beq $9060			beq 	_RGI_Exit
.9027	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.9029	f0 3e		beq $9069			beq 	_RGI_Frame
.902b	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.902d	f0 33		beq $9062			beq 	_RGI_Solid
.902f	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.9031	f0 4b		beq $907e			beq 	_RGI_By
.9033	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.9035	f0 17		beq $904e			beq 	_RGI_Move2
.9037	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.9039	f0 65		beq $90a0			beq 	_RGI_Dim
.903b	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.903d	f0 78		beq $90b7			beq 	_RGI_Colour
.903f	c9 af		cmp #$af			cmp 	#KWD_COLOR
.9041	f0 74		beq $90b7			beq 	_RGI_Colour
.9043	ae e3 06	ldx $06e3			ldx 	gxCommandID
.9046	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.9048	d0 03		bne $904d			bne 	_RGI_Move 					; move
.904a	4c e1 90	jmp $90e1			jmp		_RGI_SpriteInstructions
.904d					_RGI_Move:
.904d	88		dey				dey 								; unpick get.
.904e					_RGI_Move2:
.904e	20 07 91	jsr $9107			jsr 	GCGetCoordinatePair 		; move to here
.9051	20 2e 91	jsr $912e			jsr 	GCCopyPairToStore 			; save
.9054	5a		phy				phy
.9055	20 24 91	jsr $9124			jsr 	GCLoadAXY 					; load in
.9058	09 20		ora #$20			ora 	#16*2 						; move there
.905a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.905d	7a		ply				ply
.905e	80 b4		bra $9014			bra 	_RGICommandLoop 			; and go round
.9060					_RGI_Exit:
.9060	88		dey				dey 								; unpick : / EOL
.9061	60		rts				rts
.9062					_RGI_Solid:
.9062	a9 02		lda #$02			lda 	#2
.9064	8d e4 06	sta $06e4			sta 	gxFillSolid
.9067	80 ab		bra $9014			bra 	_RGICommandLoop
.9069					_RGI_Frame:
.9069	9c e4 06	stz $06e4			stz 	gxFillSolid
.906c	80 a6		bra $9014			bra 	_RGICommandLoop
.906e					_RGI_To:
.906e	20 07 91	jsr $9107			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.9071	20 2e 91	jsr $912e			jsr 	GCCopyPairToStore
.9074					_RGI_Here:
.9074	5a		phy				phy
.9075	20 24 91	jsr $9124			jsr 	GCLoadAXY 					; load it into AXY
.9078	20 de 90	jsr $90de			jsr 	_RGICallHandler 			; go do whatever it is.
.907b	7a		ply				ply
.907c	80 96		bra $9014			bra 	_RGICommandLoop 			; and go round
.907e					_RGI_By:
.907e	20 14 91	jsr $9114			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.9081	18		clc				clc
.9082	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9085	6d e5 06	adc $06e5			adc 	gxxPos
.9088	8d e5 06	sta $06e5			sta 	gxXPos
.908b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.908e	6d e6 06	adc $06e6			adc 	gxxPos+1
.9091	8d e6 06	sta $06e6			sta 	gxXPos+1
.9094	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9097	18		clc				clc
.9098	6d e7 06	adc $06e7			adc 	gxYPos
.909b	8d e7 06	sta $06e7			sta 	gxYPos
.909e	80 d4		bra $9074			bra 	_RGI_Here
.90a0					_RGI_Dim:
.90a0	a2 01		ldx #$01			ldx	 	#1
.90a2	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger
.90a5	ad 09 04	lda $0409			lda 	NSMantissa0+1
.90a8	c9 00		cmp #$00			cmp 	#0
.90aa	f0 2f		beq $90db			beq 	_RGIRange
.90ac	c9 09		cmp #$09			cmp 	#8+1
.90ae	b0 2b		bcs $90db			bcs		_RGIRange
.90b0	3a		dec a				dec 	a
.90b1	8d ea 06	sta $06ea			sta 	gxDrawScale
.90b4	4c 14 90	jmp $9014			jmp 	_RGICommandLoop
.90b7					_RGI_Colour:
.90b7	a2 01		ldx #$01			ldx 	#1 							; colour
.90b9	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger
.90bc	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.90be	20 14 a7	jsr $a714			jsr 	NSMSetZero
.90c1	b1 30		lda ($30),y			lda 	(codePtr),y
.90c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.90c5	d0 04		bne $90cb			bne 	_RGICDefaultMode
.90c7	c8		iny				iny
.90c8	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger
.90cb					_RGICDefaultMode:
.90cb	5a		phy				phy
.90cc	a9 08		lda #$08			lda 	#4*2 						; set colour.
.90ce	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90d1	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90d4	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90d7	7a		ply				ply
.90d8	4c 14 90	jmp $9014			jmp 	_RGICommandLoop 			; and go round
.90db					_RGIRange:
.90db	4c 4a b5	jmp $b54a			jmp 	RangeError
.90de					_RGICallHandler:
.90de	6c e8 06	jmp ($06e8)			jmp 	(GXHandler)
.90e1					_RGI_SpriteInstructions:
.90e1	c9 be		cmp #$be			cmp 	#KWD_OFF
.90e3	f0 07		beq $90ec			beq 	_RGISpriteOff
.90e5	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.90e7	f0 13		beq $90fc			beq 	_RGISetImage
.90e9	4c 4d 90	jmp $904d			jmp 	_RGI_Move
.90ec					_RGISpriteOff:
.90ec	5a		phy				phy
.90ed	a0 01		ldy #$01			ldy 	#1
.90ef	a2 00		ldx #$00			ldx 	#0
.90f1					_RGIDoCommandLoop:
.90f1	a9 10		lda #$10			lda 	#8*2
.90f3	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90f6	7a		ply				ply
.90f7	b0 e2		bcs $90db			bcs 	_RGIRange
.90f9	4c 14 90	jmp $9014			jmp 	_RGICommandLoop
.90fc					_RGISetImage:
.90fc	a2 01		ldx #$01			ldx 	#1
.90fe	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger
.9101	5a		phy				phy
.9102	aa		tax				tax
.9103	a0 00		ldy #$00			ldy 	#0
.9105	80 ea		bra $90f1			bra 	_RGIDoCommandLoop
.9107					GCGetCoordinatePair:
.9107	a2 01		ldx #$01			ldx 	#1
.9109	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.910c	20 5f af	jsr $af5f			jsr 	CheckComma
.910f	e8		inx				inx
.9110	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.9113	60		rts				rts
.9114					GCSignedCoordinatePair:
.9114	a2 01		ldx #$01			ldx 	#1
.9116	20 98 a6	jsr $a698			jsr 	Evaluate16BitIntegerSigned
.9119	20 5f af	jsr $af5f			jsr 	CheckComma
.911c	e8		inx				inx
.911d	20 98 a6	jsr $a698			jsr 	Evaluate16BitIntegerSigned
.9120	60		rts				rts
.9121					_GCCPRange:
.9121	4c 4a b5	jmp $b54a			jmp 	RangeError
.9124					GCLoadAXY:
.9124	ad e6 06	lda $06e6			lda 	gxXPos+1
.9127	ae e5 06	ldx $06e5			ldx 	gxXPos
.912a	ac e7 06	ldy $06e7			ldy 	gxYPos
.912d	60		rts				rts
.912e					GCCopyPairToStore:
.912e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9131	8d e5 06	sta $06e5			sta 	gxXPos
.9134	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9137	8d e6 06	sta $06e6			sta 	gxXPos+1
.913a	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.913d	8d e7 06	sta $06e7			sta 	gxYPos
.9140	60		rts				rts
.06e3					gxCommandID:
>06e3							.fill 	1
.06e4					gxFillSolid:
>06e4							.fill 	1
.06e5					gxXPos:
>06e5							.fill 	2
.06e7					gxYPos:
>06e7							.fill 	1
.06e8					gxHandler:
>06e8							.fill 	2
.06ea					gxDrawScale:
>06ea							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9141					BitmapCtrl:
.9141	b1 30		lda ($30),y			lda 	(codePtr),y
.9143	c8		iny				iny
.9144	a2 01		ldx #$01			ldx 	#1
.9146	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9148	f0 11		beq $915b			beq 	BitmapSwitch
.914a	ca		dex				dex
.914b	c9 be		cmp #$be			cmp 	#KWD_OFF
.914d	f0 0c		beq $915b			beq 	BitmapSwitch
.914f	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get the colour
.9152	5a		phy				phy
.9153	aa		tax				tax
.9154	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9156	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9159	7a		ply				ply
.915a	60		rts				rts
.915b					BitmapSwitch:
.915b	5a		phy				phy
.915c	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.915e	a9 02		lda #$02			lda 	#1*2
.9160	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9163	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9165	a0 00		ldy #$00			ldy 	#0
.9167	a2 ff		ldx #$ff			ldx 	#$FF
.9169	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.916c	9c e4 06	stz $06e4			stz 	gxFillSolid
.916f	9c e5 06	stz $06e5			stz 	gxXPos
.9172	9c e6 06	stz $06e6			stz 	gxXPos+1
.9175	9c e7 06	stz $06e7			stz 	gxYPos
.9178	9c ea 06	stz $06ea			stz 	gxDrawScale
.917b	a9 20		lda #$20			lda 	#16*2 						; home cursor
.917d	a2 00		ldx #$00			ldx 	#0
.917f	a0 00		ldy #$00			ldy 	#0
.9181	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9184	7a		ply				ply
.9185	60		rts				rts
.9186					SpritesCtrl:
.9186	b1 30		lda ($30),y			lda 	(codePtr),y
.9188	c8		iny				iny
.9189	a2 01		ldx #$01			ldx 	#1
.918b	c9 bf		cmp #$bf			cmp 	#KWD_ON
.918d	f0 08		beq $9197			beq 	SpriteSwitch
.918f	ca		dex				dex
.9190	c9 be		cmp #$be			cmp 	#KWD_OFF
.9192	f0 03		beq $9197			beq 	SpriteSwitch
.9194	4c 45 b5	jmp $b545			jmp 	SyntaxError
.9197					SpriteSwitch:
.9197	5a		phy				phy
.9198	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.919a	a9 04		lda #$04			lda 	#2*2
.919c	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.919f	7a		ply				ply
.91a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.91a1					GfxCommand:
.91a1	a2 00		ldx #$00			ldx 	#0
.91a3	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; command
.91a6	20 5f af	jsr $af5f			jsr 	CheckComma
.91a9	e8		inx				inx
.91aa	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger 		; X
.91ad	20 5f af	jsr $af5f			jsr 	CheckComma
.91b0	e8		inx				inx
.91b1	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; Y
.91b4	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.91b7	4a		lsr a				lsr 	a
.91b8	d0 16		bne $91d0			bne 	_GfxError
.91ba	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.91bd	b0 11		bcs $91d0			bcs 	_GfxError 					; bit 7 should have been zero
.91bf	5a		phy				phy 								; save pos
.91c0	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.91c3	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.91c6	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.91c9	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.91cc	b0 02		bcs $91d0			bcs 	_GfxError
.91ce	7a		ply				ply 								; restore pos and exit.
.91cf	60		rts				rts
.91d0					_GfxError:
.91d0	4c 4a b5	jmp $b54a			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.91d3					Command_GOSUB:
.91d3	a2 00		ldx #$00			ldx 	#0
.91d5	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91d8	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91da	20 c8 a7	jsr $a7c8			jsr 	StackOpen 					; create frame
.91dd	20 0c a8	jsr $a80c			jsr 	STKSaveCodePosition 		; save current position
.91e0	4c f6 91	jmp $91f6			jmp 	GotoStackX
.91e3					Command_RETURN:
.91e3	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91e5	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91e7	20 f4 a7	jsr $a7f4			jsr 	StackCheckFrame
.91ea	20 1d a8	jsr $a81d			jsr 	STKLoadCodePosition 		; restore code position
.91ed	20 e6 a7	jsr $a7e6			jsr 	StackClose
.91f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.91f1					GotoCommand:
.91f1	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.91f3	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.91f6					GotoStackX:
.91f6	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.91f9	48		pha				pha 								; it is slightly inefficient, just in cases.
.91fa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91fd	fa		plx				plx
.91fe	20 73 a7	jsr $a773			jsr 	MemorySearch 				; transfer to line number AX.
.9201	90 05		bcc $9208			bcc 	_GotoError 					; not found, off end.
.9203	d0 03		bne $9208			bne 	_GotoError 					; not found exactly
.9205	4c d9 95	jmp $95d9			jmp 	RunNewLine 					; and go straight to new line code.
.9208					_GotoError:
.9208	a9 0d		lda #$0d		lda	#13
.920a	4c d9 9a	jmp $9ad9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.920d					UnaryHit:
.920d	fa		plx				plx
.920e	a9 36		lda #$36			lda 	#zTemp0
.9210	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get sprite number 0
.9213	20 5f af	jsr $af5f			jsr 	CheckComma
.9216	e8		inx				inx
.9217	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get sprite number 1
.921a	20 57 af	jsr $af57			jsr		CheckRightBracket
.921d	ca		dex				dex 								; fix back up again.
.921e	da		phx				phx 								; save X/Y
.921f	5a		phy				phy
.9220	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.9223	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9226	aa		tax				tax
.9227	a9 12		lda #$12			lda 	#9*2 						; command 9
.9229	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; calculate result
.922c	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.922d	7a		ply				ply 								; restore XY
.922e	fa		plx				plx
.922f	20 16 a7	jsr $a716			jsr 	NSMSetByte 					; return the hit result
.9232	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9233					IfCommand:
.9233	a2 00		ldx #$00			ldx 	#0 							; If what.
.9235	20 54 a6	jsr $a654			jsr 	EvaluateNumber
.9238	b1 30		lda ($30),y			lda 	(codePtr),y
.923a	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.923c	d0 0a		bne $9248			bne 	_IFStructured
.923e	c8		iny				iny 								; consume THEN
.923f	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; is it zero
.9242	f0 01		beq $9245			beq 	_IfFail 					; if fail, go to next line
.9244	60		rts				rts 								; if THEN just continue
.9245					_IfFail:
.9245	4c 3e 96	jmp $963e			jmp 	EOLCommand
.9248					_IfStructured:
.9248	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; is it zero
.924b	d0 07		bne $9254			bne 	_IfExit 					; if not, then continue normally.
.924d	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.924f	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9251	20 34 9a	jsr $9a34			jsr 	ScanForward 				; and run from there/
.9254					_IfExit:
.9254	60		rts				rts
.9255					ElseCode:
.9255	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9257	aa		tax				tax 								; so just go to the structure exit
.9258	20 34 9a	jsr $9a34			jsr 	ScanForward
.925b	60		rts				rts
.925c					EndIf:
.925c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.925d					UnaryJoyX:
.925d	18		clc				clc
.925e	80 01		bra $9261			bra 	JoyMain
.9260					UnaryJoyY:
.9260	38		sec				sec
.9261					JoyMain:
.9261	fa		plx				plx 								; get pos
.9262	08		php				php 								; save carry (set for Y)
.9263	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9266	20 57 af	jsr $af57			jsr 	CheckRightBracket
.9269	20 43 b7	jsr $b743			jsr 	EXTReadController 			; read the controller.
.926c	28		plp				plp
.926d	90 02		bcc $9271			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.926f	4a		lsr a				lsr 	a
.9270	4a		lsr a				lsr 	a
.9271					_JMNoShift:
.9271	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9272	b0 0a		bcs $927e			bcs 	_JMIsRight
.9274	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9275	b0 04		bcs $927b			bcs 	_JMIsLeft
.9277	20 14 a7	jsr $a714			jsr 	NSMSetZero 					; zero result
.927a	60		rts				rts
.927b					_JMIsLeft:
.927b	4c 46 9b	jmp $9b46			jmp 	ReturnTrue
.927e					_JMIsRight:
.927e	a9 01		lda #$01			lda 	#1
.9280	20 16 a7	jsr $a716			jsr 	NSMSetByte
.9283	60		rts				rts
.9284					UnaryJoyB:
.9284	fa		plx				plx 								; get pos
.9285	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9288	20 57 af	jsr $af57			jsr 	CheckRightBracket
.928b	20 43 b7	jsr $b743			jsr 	EXTReadController 			; read the controller.
.928e	4a		lsr a				lsr 	a
.928f	4a		lsr a				lsr 	a
.9290	4a		lsr a				lsr 	a
.9291	4a		lsr a				lsr 	a
.9292	29 01		and #$01			and 	#1
.9294	20 16 a7	jsr $a716			jsr 	NSMSetByte
.9297	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9298					LetCommand:
.9298	a2 00		ldx #$00			ldx 	#0
.929a	b1 30		lda ($30),y			lda 	(codePtr),y
.929c	c9 10		cmp #$10			cmp 	#KWD_AT
.929e	d0 16		bne $92b6			bne 	_LCStandard
.92a0	c8		iny				iny 								; skip equal
.92a1	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm 				; get a number
.92a4	20 ff 9f	jsr $9fff			jsr 	Dereference 				; dereference it
.92a7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.92aa	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.92ac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92af	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.92b1	d0 10		bne $92c3			bne 	_LCMain
.92b3	4c 4f b5	jmp $b54f			jmp 	TypeError 					; was a reference before.
.92b6					_LCStandard:
.92b6	ad d2 9e	lda $9ed2			lda 	PrecedenceLevel+"*"			; precedence > this
.92b9	20 ec 9e	jsr $9eec			jsr 	EvaluateExpressionAtPrecedence
.92bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.92bf	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.92c1	f0 0e		beq $92d1			beq 	_LetGoProc 					; it's a procedure call.
.92c3					_LCMain:
.92c3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.92c5	20 67 af	jsr $af67			jsr 	CheckNextA
.92c8	e8		inx				inx 								; RHS
.92c9	20 4b a6	jsr $a64b			jsr 	EvaluateValue
.92cc	ca		dex				dex
.92cd	20 d4 92	jsr $92d4			jsr 	AssignVariable
.92d0	60		rts				rts
.92d1					_LetGoProc:
.92d1	4c b4 94	jmp $94b4			jmp 	CallProcedure
.92d4					AssignVariable:
.92d4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.92d7	48		pha				pha 								; save a copy
.92d8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.92db	29 10		and #$10			and 	#NSBIsString
.92dd	d0 0b		bne $92ea			bne 	_ASError
.92df	68		pla				pla 								; get back
.92e0	29 10		and #$10			and 	#NSBIsString 				; check type
.92e2	d0 03		bne $92e7			bne 	_ASString
.92e4	4c 27 9f	jmp $9f27			jmp 	AssignNumber
.92e7					_ASString:
.92e7	4c 95 9f	jmp $9f95			jmp 	AssignString
.92ea					_ASError:
.92ea	4c 4f b5	jmp $b54f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.92ed					Command_List:
.92ed	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.92f0	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.92f3	9c 14 04	stz $0414			stz 	NSMantissa1+4
.92f6	a9 ff		lda #$ff			lda 	#$FF
.92f8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.92fb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.92fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9300	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9302	f0 1e		beq $9322			beq 	_CLSecond
.9304	20 80 93	jsr $9380			jsr 	CLIsDigit 					; if not digit, list all
.9307	b0 24		bcs $932d			bcs 	_CLStart
.9309	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.930b	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.930e	b1 30		lda ($30),y			lda 	(codePtr),y
.9310	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9312	f0 0e		beq $9322			beq 	_CLSecond 					; if so go get it
.9314	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9317	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.931a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.931d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9320	80 0b		bra $932d			bra 	_CLStart
.9322					_CLSecond:
.9322	c8		iny				iny 								; consume comma
.9323	20 80 93	jsr $9380			jsr 	CLIsDigit 					; digit found
.9326	b0 05		bcs $932d			bcs 	_CLStart 					; if not, continue listing
.9328	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.932a	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger
.932d					_CLStart
.932d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.932f	85 30		sta $30				sta 	codePtr
.9331	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9333	85 31		sta $31				sta 	codePtr+1
.9335					_CLLoop:
.9335	20 40 b7	jsr $b740			jsr 	EXTBreakCheck 				; break check
.9338	f0 30		beq $936a			beq 	_CLExit
.933a	b2 30		lda ($30)			lda 	(codePtr)
.933c	f0 2c		beq $936a			beq 	_CLExit
.933e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9340	20 6d 93	jsr $936d			jsr 	CLCompareLineNo
.9343	90 18		bcc $935d			bcc 	_CLNext
.9345	a2 07		ldx #$07			ldx 	#7
.9347	20 6d 93	jsr $936d			jsr 	CLCompareLineNo
.934a	f0 02		beq $934e			beq 	_CLDoThisOne
.934c	b0 0f		bcs $935d			bcs 	_CLNext
.934e					_CLDoThisOne:
.934e	20 39 98	jsr $9839			jsr 	ListConvertLine 			; convert line into token Buffer
.9351	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9353	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9355	20 32 9b	jsr $9b32			jsr 	PrintStringXA
.9358	a9 0d		lda #$0d			lda 	#13 						; new line
.935a	20 ff b6	jsr $b6ff			jsr 	EXTPrintCharacter
.935d					_CLNext:
.935d	18		clc				clc
.935e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9360	65 30		adc $30				adc 	codePtr
.9362	85 30		sta $30				sta 	codePtr
.9364	90 02		bcc $9368			bcc 	_CREExit
.9366	e6 31		inc $31				inc 	codePtr+1
.9368					_CREExit:
.9368	80 cb		bra $9335			bra 	_CLLoop
.936a					_CLExit:
.936a	4c 36 8c	jmp $8c36			jmp 	WarmStart
.936d					CLCompareLineNo:
.936d	38		sec				sec
.936e	a0 01		ldy #$01			ldy 	#1
.9370	b1 30		lda ($30),y			lda 	(codePtr),y
.9372	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9375	85 36		sta $36				sta 	zTemp0
.9377	c8		iny				iny
.9378	b1 30		lda ($30),y			lda 	(codePtr),y
.937a	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.937d	05 36		ora $36				ora 	zTemp0
.937f	60		rts				rts
.9380					CLIsDigit:
.9380	b1 30		lda ($30),y			lda 	(codePtr),y
.9382	c9 30		cmp #$30			cmp 	#"0"
.9384	90 03		bcc $9389			bcc	 	_CLIDExitFalse
.9386	c9 3a		cmp #$3a			cmp 	#"9"+1
.9388	60		rts				rts
.9389					_CLIDExitFalse:
.9389	38		sec				sec
.938a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.938b					Command_LOCAL:
.938b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.938d	20 99 93	jsr $9399			jsr 	LocaliseNextTerm 			; convert term to a local.
.9390	b1 30		lda ($30),y			lda 	(codePtr),y
.9392	c8		iny				iny
.9393	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9395	f0 f4		beq $938b			beq 	Command_LOCAL
.9397	88		dey				dey 								; unpick pre-get
.9398	60		rts				rts
.9399					LocaliseNextTerm:
.9399	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm 				; evaluate the term
.939c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.939f	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.93a1	f0 69		beq $940c			beq		_LNTError
.93a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.93a6	85 36		sta $36				sta 	zTemp0
.93a8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93ab	85 37		sta $37				sta  	zTemp0+1
.93ad	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93b0	29 10		and #$10			and 	#NSBIsString
.93b2	d0 22		bne $93d6			bne 	_LNTPushString
.93b4	5a		phy				phy
.93b5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.93b7					_LNTPushNumLoop:
.93b7	b1 36		lda ($36),y			lda		(zTemp0),y
.93b9	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.93bc	a9 00		lda #$00			lda 	#0
.93be	91 36		sta ($36),y			sta 	(zTemp0),y
.93c0	c8		iny				iny
.93c1	c0 05		cpy #$05			cpy 	#5
.93c3	d0 f2		bne $93b7			bne 	_LNTPushNumLoop
.93c5	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.93c7	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.93ca	a5 37		lda $37				lda 	zTemp0+1
.93cc	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.93cf	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.93d1	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.93d4	7a		ply				ply
.93d5	60		rts				rts
.93d6					_LNTPushString:
.93d6	5a		phy				phy
.93d7	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.93d9	85 38		sta $38				sta 	zTemp1
.93db	a0 01		ldy #$01			ldy 	#1
.93dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.93df	85 39		sta $39				sta 	zTemp1+1
.93e1	a0 00		ldy #$00			ldy 	#0 							; output string
.93e3	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.93e5	f0 0a		beq $93f1			beq 	_LNTStringOut
.93e7					_LNTPushStrLoop:
.93e7	b1 38		lda ($38),y			lda 	(zTemp1),y
.93e9	f0 06		beq $93f1			beq 	_LNTStringOut
.93eb	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.93ee	c8		iny				iny
.93ef	80 f6		bra $93e7			bra 	_LNTPushStrLoop
.93f1					_LNTStringOut:
.93f1	98		tya				tya									; output length
.93f2	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.93f5	a9 00		lda #$00			lda 	#0 							; clear original string.
.93f7	92 38		sta ($38)			sta 	(zTemp1)
.93f9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.93fc	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.93ff	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9402	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.9405	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9407	20 a6 a7	jsr $a7a6			jsr 	StackPushByte
.940a	7a		ply				ply
.940b	60		rts				rts
.940c					_LNTError:
.940c	4c 45 b5	jmp $b545			jmp 	SyntaxError
.aefe					LocalPopValue:
.aefe	20 bf a7	jsr $a7bf			jsr 	StackPopByte
.af01	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.af03	d0 17		bne $af1c			bne 	_LPVString
.af05	20 bf a7	jsr $a7bf			jsr 	StackPopByte 				; address
.af08	85 37		sta $37				sta 	zTemp0+1
.af0a	20 bf a7	jsr $a7bf			jsr 	StackPopByte
.af0d	85 36		sta $36				sta 	zTemp0
.af0f	5a		phy				phy
.af10	a0 04		ldy #$04			ldy 	#4 							; copy back
.af12					_LPVNumberCopy:
.af12	20 bf a7	jsr $a7bf			jsr 	StackPopByte
.af15	91 36		sta ($36),y			sta 	(zTemp0),y
.af17	88		dey				dey
.af18	10 f8		bpl $af12			bpl 	_LPVNumberCopy
.af1a	7a		ply				ply 								; and complete
.af1b	60		rts				rts
.af1c					_LPVString:
.af1c	20 bf a7	jsr $a7bf			jsr 	StackPopByte 				; address of record => zTemp0
.af1f	85 37		sta $37				sta 	zTemp0+1
.af21	20 bf a7	jsr $a7bf			jsr 	StackPopByte
.af24	85 36		sta $36				sta 	zTemp0
.af26	5a		phy				phy
.af27	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.af29	85 38		sta $38				sta 	zTemp1
.af2b	a0 01		ldy #$01			ldy 	#1
.af2d	b1 36		lda ($36),y			lda 	(zTemp0),y
.af2f	85 39		sta $39				sta 	zTemp1+1
.af31	20 bf a7	jsr $a7bf			jsr 	StackPopByte 				; # to get => y
.af34	a8		tay				tay
.af35	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.af37	f0 0e		beq $af47			beq 	_LPVStringCopied
.af39	a9 00		lda #$00			lda 	#0 							; NULL on end
.af3b	91 38		sta ($38),y			sta 	(zTemp1),y
.af3d					_LPVStringCopy:
.af3d	88		dey				dey
.af3e	30 07		bmi $af47			bmi 	_LPVStringCopied
.af40	20 bf a7	jsr $a7bf			jsr 	StackPopByte
.af43	91 38		sta ($38),y			sta 	(zTemp1),y
.af45	80 f6		bra $af3d			bra 	_LPVStringCopy
.af47					_LPVStringCopied:
.af47	fa		plx				plx
.af48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.940f					NewCommand:
.940f	20 51 a7	jsr $a751			jsr 	MemoryNew
.9412	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9415	20 cf 8c	jsr $8ccf			jsr 	ClearCommand 				; clear everything.
.9418	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/palette.asm

.9419					PaletteCommand:
.9419	a2 00		ldx #$00			ldx 	#0
.941b	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; colour
.941e	20 5f af	jsr $af5f			jsr 	CheckComma
.9421	e8		inx				inx
.9422	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger 		; r
.9425	20 5f af	jsr $af5f			jsr 	CheckComma
.9428	e8		inx				inx
.9429	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; g
.942c	20 5f af	jsr $af5f			jsr 	CheckComma
.942f	e8		inx				inx
.9430	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; b
.9433	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.9436	85 36		sta $36				sta 	zTemp0
.9438	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.943a	85 37		sta $37				sta 	zTemp0+1
.943c	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.943e	26 37		rol $37				rol	 	zTemp0+1
.9440	06 36		asl $36				asl 	zTemp0
.9442	26 37		rol $37				rol	 	zTemp0+1
.9444	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.9446	85 01		sta $01				sta 	1
.9448	5a		phy				phy
.9449	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.944c	92 36		sta ($36)			sta 	(zTemp0)
.944e	a0 01		ldy #$01			ldy 	#1
.9450	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9453	91 36		sta ($36),y			sta 	(zTemp0),y
.9455	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9458	c8		iny				iny
.9459	91 36		sta ($36),y			sta 	(zTemp0),y
.945b	7a		ply				ply
.945c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.945d					Command_Print:
.945d	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.945e					_CPLoop:
.945e	08		php				php 								; save last action flag
.945f	b1 30		lda ($30),y			lda 	(codePtr),y
.9461	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9463	f0 46		beq $94ab			beq 	_CPExit
.9465	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9467	f0 42		beq $94ab			beq 	_CPExit
.9469	68		pla				pla 								; throw last action flag
.946a	b1 30		lda ($30),y			lda 	(codePtr),y
.946c	c8		iny				iny
.946d	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.946f	f0 37		beq $94a8			beq 	_CPContinueWithSameLine
.9471	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9473	f0 2e		beq $94a3			beq 	_CPTab
.9475	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9477	f0 26		beq $949f			beq 	_CPNewLine
.9479	88		dey				dey 								; undo the get.
.947a	a2 00		ldx #$00			ldx 	#0
.947c	20 4b a6	jsr $a64b			jsr 	EvaluateValue 				; get a value into slot 0
.947f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9482	29 10		and #$10			and 	#NSBIsString
.9484	f0 0b		beq $9491			beq 	_CPNumber
.9486	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9489	ad 08 04	lda $0408			lda 	NSMantissa0
.948c	20 32 9b	jsr $9b32			jsr 	PrintStringXA
.948f	80 cc		bra $945d			bra 	Command_Print 				; loop round clearing carry so NL if end
.9491					_CPNumber:
.9491	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9493	20 21 a5	jsr $a521			jsr 	ConvertNumberToString 		; convert to string
.9496	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9498	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.949a	20 32 9b	jsr $9b32			jsr 	PrintStringXA
.949d	80 be		bra $945d			bra 	Command_Print 				; loop round clearing carry so NL if end
.949f					_CPNewLine:
.949f	a9 0d		lda #$0d			lda 	#13
.94a1	80 02		bra $94a5			bra 	_CPPrintChar
.94a3					_CPTab:
.94a3	a9 09		lda #$09			lda 	#9 							; print TAB
.94a5					_CPPrintChar:
.94a5	20 ff b6	jsr $b6ff			jsr 	EXTPrintCharacter
.94a8					_CPContinueWithSameLine:
.94a8	38		sec				sec 								; loop round with carry set, which
.94a9	80 b3		bra $945e			bra 	_CPLoop 					; will inhibit final CR
.94ab					_CPExit:
.94ab	28		plp				plp 								; get last action flag
.94ac	b0 05		bcs $94b3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.94ae	a9 0d		lda #$0d			lda 	#13 						; print new line
.94b0	20 ff b6	jsr $b6ff			jsr 	EXTPrintCharacter
.94b3					_CPExit2:
.94b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.94b4					CallProcedure:
.94b4	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.94b6	b1 30		lda ($30),y			lda 	(codePtr),y
.94b8	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.94ba	f0 0c		beq $94c8			beq 	_CPEndParam
.94bc					_CPParamLoop:
.94bc	20 4b a6	jsr $a64b			jsr 	EvaluateValue 				; get parameter onto stack
.94bf	e8		inx				inx 								; bump next stack
.94c0	b1 30		lda ($30),y			lda 	(codePtr),y
.94c2	c8		iny				iny
.94c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.94c5	f0 f5		beq $94bc			beq 	_CPParamLoop
.94c7	88		dey				dey 								; unpick.
.94c8					_CPEndParam:
.94c8	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.94cb	c8		iny				iny									; skip right bracket
.94cc	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.94ce	20 c8 a7	jsr $a7c8			jsr 	StackOpen
.94d1	20 0c a8	jsr $a80c			jsr 	STKSaveCodePosition 		; save loop position
.94d4	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.94d7	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.94d9	ad 10 04	lda $0410			lda 	NSMantissa1
.94dc	85 37		sta $37				sta 	zTemp0+1
.94de	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.94e0	b2 36		lda ($36)			lda 	(zTemp0)
.94e2	85 30		sta $30				sta 	safePtr
.94e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e6	85 31		sta $31				sta 	safePtr+1
.94e8	c8		iny				iny
.94e9	b1 36		lda ($36),y			lda 	(zTemp0),y
.94eb	85 32		sta $32				sta 	safePtr+2
.94ed	c8		iny				iny
.94ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f0	85 33		sta $33				sta 	safePtr+3
.94f2	c8		iny				iny 								; get Y offset -> Y
.94f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f5	a8		tay				tay
.94f6	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.94f8	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.94fb	f0 13		beq $9510			beq 	_ParamExit 					; if so, exit.
.94fd					_ParamExtract:
.94fd	ca		dex				dex 								; put a local term on the level before
.94fe	20 99 93	jsr $9399			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9501	20 d4 92	jsr $92d4			jsr 	AssignVariable 				; assign stacked value to the variable.
.9504	e8		inx				inx 								; advance to next parameter to do.
.9505	e8		inx				inx
.9506	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9509	f0 05		beq $9510			beq 	_ParamExit
.950b	20 5f af	jsr $af5f			jsr 	CheckComma 					; comma seperating parameters
.950e	80 ed		bra $94fd			bra 	_ParamExtract
.9510					_ParamExit:
.9510	20 57 af	jsr $af57			jsr 	CheckRightBracket 			; check )
.9513	60		rts				rts 								; and continue from here
.af49					Command_ENDPROC:
.af49	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.af4b	a2 14		ldx #$14			ldx 	#ERRID_PROC
.af4d	20 f4 a7	jsr $a7f4			jsr 	StackCheckFrame
.af50	20 1d a8	jsr $a81d			jsr 	STKLoadCodePosition 		; restore code position
.af53	20 e6 a7	jsr $a7e6			jsr 	StackClose
.af56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9514					Command_Read:
.9514	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9516	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm
.9519	bd 00 04	lda $0400,x			lda 	NSStatus,x
.951c	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.951e	f0 4a		beq $956a			beq 	_CRSyntax 					; check reference (bit 0)
.9520	20 b3 95	jsr $95b3			jsr 	SwapDataCodePtrs 			; swap code and data
.9523	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9526	d0 20		bne $9548			bne 	_CRContinueData
.9528					_CRKeepSearching:
.9528	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.952a	aa		tax				tax
.952b	20 34 9a	jsr $9a34			jsr 	ScanForward
.952e	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.9530	f0 16		beq $9548			beq 	_CRHaveData 				; found it
.9532	18		clc				clc
.9533	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9535	65 30		adc $30				adc 	codePtr
.9537	85 30		sta $30				sta 	codePtr
.9539	90 02		bcc $953d			bcc 	_CREExit
.953b	e6 31		inc $31				inc 	codePtr+1
.953d					_CREExit:
.953d	a0 03		ldy #$03			ldy 	#3 							; start of line.
.953f	b2 30		lda ($30)			lda 	(codePtr)
.9541	d0 e5		bne $9528			bne 	_CRKeepSearching
.9543	a9 0b		lda #$0b		lda	#11
.9545	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.9548					_CRHaveData:
.9548					_CRContinueData:
.9548	a2 01		ldx #$01			ldx 	#1
.954a	20 4b a6	jsr $a64b			jsr 	EvaluateValue 				; evaluate value into slot # 1
.954d	ca		dex				dex
.954e	20 d4 92	jsr $92d4			jsr		AssignVariable 				; do the assignment
.9551	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9554	b1 30		lda ($30),y			lda 	(codePtr),y
.9556	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9558	d0 04		bne $955e			bne 	_CRSwapBack
.955a	c8		iny				iny 								; consume comma
.955b	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.955e					_CRSwapBack:
.955e	20 b3 95	jsr $95b3			jsr 	SwapDataCodePtrs			; swap them back.
.9561	b1 30		lda ($30),y			lda 	(codePtr),y
.9563	c8		iny				iny
.9564	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9566	f0 ac		beq $9514			beq 	Command_Read 				; if so go round again.
.9568	88		dey				dey 								; unpick get.
.9569	60		rts				rts
.956a					_CRSyntax:
.956a	4c 45 b5	jmp $b545			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.956d					RemCommand:
.956d	b1 30		lda ($30),y			lda 	(codePtr),y
.956f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9571	d0 06		bne $9579			bne 	_RMExit
.9573	c8		iny				iny
.9574	98		tya				tya
.9575	38		sec				sec
.9576	71 30		adc ($30),y			adc 	(codePtr),y
.9578	a8		tay				tay
.9579					_RMExit:
.9579	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.957a					Command_REPEAT:
.957a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.957c	20 c8 a7	jsr $a7c8			jsr 	StackOpen
.957f	20 0c a8	jsr $a80c			jsr 	STKSaveCodePosition 		; save loop position
.9582	60		rts				rts
.9583					Command_UNTIL:
.9583	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9585	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9587	20 f4 a7	jsr $a7f4			jsr 	StackCheckFrame
.958a	a2 00		ldx #$00			ldx 	#0
.958c	20 54 a6	jsr $a654			jsr 	EvaluateNumber 				; work out the number
.958f	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; check if zero
.9592	f0 04		beq $9598			beq 	_CULoopBack 				; if so keep looping
.9594	20 e6 a7	jsr $a7e6			jsr 	StackClose		 			; return
.9597	60		rts				rts
.9598					_CULoopBack:
.9598	20 1d a8	jsr $a81d			jsr 	STKLoadCodePosition 		; loop back
.959b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.959c					Command_Restore:
.959c	20 b3 95	jsr $95b3			jsr 	SwapDataCodePtrs 			; swap code and data
.959f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95a1	85 30		sta $30				sta 	codePtr
.95a3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95a5	85 31		sta $31				sta 	codePtr+1
.95a7	20 b3 95	jsr $95b3			jsr 	SwapDataCodePtrs 			; put them back
.95aa	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.95ac	8d 9b 04	sta $049b			sta 	dataPointer+4
.95af	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.95b2	60		rts				rts
.95b3					SwapDataCodePtrs:
.95b3	da		phx				phx
.95b4	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.95b6					_SDCPLoop:
.95b6	b5 30		lda $30,x			lda 	safePtr,x
.95b8	48		pha				pha
.95b9	bd 97 04	lda $0497,x			lda 	dataPointer,x
.95bc	95 30		sta $30,x			sta 	safePtr,x
.95be	68		pla				pla
.95bf	9d 97 04	sta $0497,x			sta 	dataPointer,x
.95c2	ca		dex				dex
.95c3	10 f1		bpl $95b6			bpl 	_SDCPLoop
.95c5	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.95c8	8c 9b 04	sty $049b			sty 	dataPointer+4
.95cb	a8		tay				tay
.95cc	fa		plx				plx
.95cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.95ce					CommandRUN:
.95ce	20 cf 8c	jsr $8ccf			jsr 	ClearCommand 				; clear variable/stacks/etc.
.95d1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95d3	85 30		sta $30				sta 	codePtr
.95d5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95d7	85 31		sta $31				sta 	codePtr+1
.95d9					RUNNewLine:
.95d9	b2 30		lda ($30)			lda 	(codePtr)
.95db	f0 5e		beq $963b			beq 	CRNoProgram         		; no then END.
.95dd	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.95df	9a		txs				txs
.95e0					RUNCodePointerLine:
.95e0	a0 02		ldy #$02			ldy 	#2 							; start of program
.95e2					_CRIncMainLoop:
.95e2	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.95e5	d0 05		bne $95ec			bne 	_CRNoBreakCheck
.95e7	20 40 b7	jsr $b740			jsr 	EXTBreakCheck 				; break check
.95ea	f0 4a		beq $9636			beq 	_CRBreak
.95ec					_CRNoBreakCheck:
.95ec	c8		iny				iny
.95ed					_CRMainLoop:
.95ed	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.95f0	b1 30		lda ($30),y			lda 	(codePtr),y
.95f2	10 10		bpl $9604			bpl 	_CRNotKeyword
.95f4	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95f6	b0 04		bcs $95fc			bcs 	_CRIsKeyword
.95f8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.95fa	b0 34		bcs $9630			bcs		_CRSyntaxError
.95fc					_CRIsKeyword:
.95fc	c8		iny				iny 								; consume command
.95fd	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.95fe	aa		tax				tax 								; put in X for vector jump
.95ff	20 33 96	jsr $9633			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9602	80 e9		bra $95ed			bra 	_CRMainLoop 				; and loop round
.9604					_CRNotKeyword:
.9604	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9606	f0 da		beq $95e2			beq 	_CRIncMainLoop
.9608	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.960a	90 05		bcc $9611			bcc 	_CRNotVariable
.960c					_CRGoLet:
.960c	20 98 92	jsr $9298			jsr 	LetCommand
.960f	80 dc		bra $95ed			bra 	_CRMainLoop
.9611					_CRNotVariable:
.9611	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9613	f0 f7		beq $960c			beq 	_CRGoLet
.9615	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9617	f0 f3		beq $960c			beq 	_CRGoLet
.9619	c9 21		cmp #$21			cmp 	#KWD_PLING
.961b	f0 ef		beq $960c			beq 	_CRGoLet
.961d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.961f	f0 09		beq $962a			beq 	_CRGoRem
.9621	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9623	d0 0b		bne $9630			bne 	_CRSyntaxError
.9625	20 6f 8b	jsr $8b6f			jsr 	LabelHere
.9628	80 c3		bra $95ed			bra 	_CRMainLoop
.962a					_CRGoRem:
.962a	c8		iny				iny
.962b	20 6d 95	jsr $956d			jsr 	RemCommand
.962e	80 bd		bra $95ed			bra 	_CRMainLoop
.9630					_CRSyntaxError:
.9630	4c 45 b5	jmp $b545			jmp 	SyntaxError
.9633					_CRCallVector0:
.9633	7c de 96	jmp ($96de,x)			jmp 	(VectorSet0,x)
.9636					_CRBreak:
.9636	a9 01		lda #$01		lda	#1
.9638	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.963b					CRNoProgram:
.963b	4c f2 8d	jmp $8df2			jmp 	EndCommand
.963e					EOLCommand:
.963e	18		clc				clc
.963f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9641	65 30		adc $30				adc 	codePtr
.9643	85 30		sta $30				sta 	codePtr
.9645	90 02		bcc $9649			bcc 	_CREExit
.9647	e6 31		inc $31				inc 	codePtr+1
.9649					_CREExit:
.9649	80 8e		bra $95d9			bra 	RunNewLine
.964b					Shift1Command:
.964b	b1 30		lda ($30),y			lda 	(codePtr),y
.964d	c8		iny				iny
.964e	0a		asl a				asl 	a
.964f	aa		tax				tax
.9650	7c 76 97	jmp ($9776,x)			jmp 	(VectorSet1,x)
.9653					Shift2Command:
.9653	b1 30		lda ($30),y			lda 	(codePtr),y
.9655	c8		iny				iny
.9656	0a		asl a				asl 	a
.9657	aa		tax				tax
.9658	7c 90 97	jmp ($9790,x)			jmp 	(VectorSet2,x)
.965b					Unused1:
.965b					Unused2:
.965b					Unused3:
.965b					Unused4:
.965b	4c 45 b5	jmp $b545			jmp 	SyntaxError
>965e							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.965e					VectorSetPunc:
>965e	83 9c					.word	ShiftLeft                        ; $00 <<
>9660	7d 9b					.word	BinaryCompareLessEqual           ; $01 <=
>9662	73 9b					.word	BinaryCompareNotEqual            ; $02 <>
>9664	45 b5					.word	SyntaxError                      ; $03 !!3
>9666	45 b5					.word	SyntaxError                      ; $04 ><
>9668	87 9b					.word	BinaryCompareGreaterEqual        ; $05 >=
>966a	86 9c					.word	ShiftRight                       ; $06 >>
>966c	45 b5					.word	SyntaxError                      ; $07 !!7
>966e	45 b5					.word	SyntaxError                      ; $08 !!8
>9670	45 b5					.word	SyntaxError                      ; $09 !!9
>9672	45 b5					.word	SyntaxError                      ; $0a !!10
>9674	45 b5					.word	SyntaxError                      ; $0b !!11
>9676	45 b5					.word	SyntaxError                      ; $0c !!12
>9678	45 b5					.word	SyntaxError                      ; $0d !!13
>967a	45 b5					.word	SyntaxError                      ; $0e !!14
>967c	45 b5					.word	SyntaxError                      ; $0f !!15
>967e	45 b5					.word	SyntaxError                      ; $10 @
>9680	45 b5					.word	SyntaxError                      ; $11 !!17
>9682	45 b5					.word	SyntaxError                      ; $12 !!18
>9684	45 b5					.word	SyntaxError                      ; $13 [
>9686	70 af					.word	IntegerDivide                    ; $14 \
>9688	45 b5					.word	SyntaxError                      ; $15 ]
>968a	14 9e					.word	EorInteger                       ; $16 ^
>968c	45 b5					.word	SyntaxError                      ; $17 _
>968e	45 b5					.word	SyntaxError                      ; $18 `
>9690	45 b5					.word	SyntaxError                      ; $19 !!25
>9692	45 b5					.word	SyntaxError                      ; $1a !!26
>9694	45 b5					.word	SyntaxError                      ; $1b {
>9696	ce 9d					.word	OraInteger                       ; $1c |
>9698	45 b5					.word	SyntaxError                      ; $1d }
>969a	45 b5					.word	SyntaxError                      ; $1e ~
>969c	45 b5					.word	SyntaxError                      ; $1f [7m<7F>[m
>969e	45 b5					.word	SyntaxError                      ; $20
>96a0	5a 9e					.word	WordIndirect                     ; $21 !
>96a2	45 b5					.word	SyntaxError                      ; $22 "
>96a4	45 b5					.word	SyntaxError                      ; $23 #
>96a6	45 b5					.word	SyntaxError                      ; $24 $
>96a8	bd af					.word	IntegerModulus                   ; $25 %
>96aa	88 9d					.word	AndInteger                       ; $26 &
>96ac	45 b5					.word	SyntaxError                      ; $27 '
>96ae	45 b5					.word	SyntaxError                      ; $28 (
>96b0	45 b5					.word	SyntaxError                      ; $29 )
>96b2	32 b0					.word	MulInteger                       ; $2a *
>96b4	1a 9d					.word	AddInteger                       ; $2b +
>96b6	45 b5					.word	SyntaxError                      ; $2c ,
>96b8	5d 9d					.word	SubInteger                       ; $2d -
>96ba	45 b5					.word	SyntaxError                      ; $2e .
>96bc	d1 b1					.word	FDivideCommand                   ; $2f /
>96be	45 b5					.word	SyntaxError                      ; $30 0
>96c0	45 b5					.word	SyntaxError                      ; $31 1
>96c2	45 b5					.word	SyntaxError                      ; $32 2
>96c4	45 b5					.word	SyntaxError                      ; $33 3
>96c6	45 b5					.word	SyntaxError                      ; $34 4
>96c8	45 b5					.word	SyntaxError                      ; $35 5
>96ca	45 b5					.word	SyntaxError                      ; $36 6
>96cc	45 b5					.word	SyntaxError                      ; $37 7
>96ce	45 b5					.word	SyntaxError                      ; $38 8
>96d0	45 b5					.word	SyntaxError                      ; $39 9
>96d2	45 b5					.word	SyntaxError                      ; $3a :
>96d4	45 b5					.word	SyntaxError                      ; $3b ;
>96d6	5f 9b					.word	BinaryCompareLess                ; $3c <
>96d8	55 9b					.word	BinaryCompareEqual               ; $3d =
>96da	69 9b					.word	BinaryCompareGreater             ; $3e >
>96dc	81 9e					.word	ByteIndirect                     ; $3f ?
.96de					VectorSet0:
>96de	3e 96					.word	EOLCommand                       ; $80 !0:EOF
>96e0	4b 96					.word	Shift1Command                    ; $81 !1:SH1
>96e2	53 96					.word	Shift2Command                    ; $82 !2:SH2
>96e4	17 b3					.word	AbsUnary                         ; $83 ABS(
>96e6	51 a3					.word	AllocUnary                       ; $84 ALLOC(
>96e8	27 b3					.word	AscUnary                         ; $85 ASC(
>96ea	d2 a4					.word	ChrUnary                         ; $86 CHR$(
>96ec	f5 8d					.word	UnaryEvent                       ; $87 EVENT(
>96ee	51 9b					.word	UnaryFalse                       ; $88 FALSE
>96f0	34 b3					.word	FracUnary                        ; $89 FRAC(
>96f2	0d 92					.word	UnaryHit                         ; $8a HIT(
>96f4	4a b3					.word	IntUnary                         ; $8b INT(
>96f6	a0 b3					.word	IsValUnary                       ; $8c ISVAL(
>96f8	84 92					.word	UnaryJoyB                        ; $8d JOYB(
>96fa	5d 92					.word	UnaryJoyX                        ; $8e JOYX(
>96fc	60 92					.word	UnaryJoyY                        ; $8f JOYY(
>96fe	ac a5					.word	Unary_Left                       ; $90 LEFT$(
>9700	5c b3					.word	LenUnary                         ; $91 LEN(
>9702	c5 a3					.word	Unary_Max                        ; $92 MAX(
>9704	d6 a5					.word	Unary_Mid                        ; $93 MID$(
>9706	c1 a3					.word	Unary_Min                        ; $94 MIN(
>9708	1c a4					.word	Unary_Not                        ; $95 NOT(
>970a	32 a4					.word	Unary_Random                     ; $96 RANDOM(
>970c	bc a5					.word	Unary_Right                      ; $97 RIGHT$(
>970e	51 a4					.word	Unary_Rnd                        ; $98 RND(
>9710	76 b3					.word	SgnUnary                         ; $99 SGN(
>9712	e4 a4					.word	SpcUnary                         ; $9a SPC(
>9714	ff a4					.word	Unary_Str                        ; $9b STR$(
>9716	1d 98					.word	UnaryTimer                       ; $9c TIMER(
>9718	45 9b					.word	UnaryTrue                        ; $9d TRUE
>971a	96 b3					.word	ValUnary                         ; $9e VAL(
>971c	5e 8e					.word	ForCommand                       ; $9f FOR
>971e	33 92					.word	IfCommand                        ; $a0 IF
>9720	5b 96					.word	Unused1                          ; $a1 PROC
>9722	7a 95					.word	Command_REPEAT                   ; $a2 REPEAT
>9724	aa 9a					.word	Command_WHILE                    ; $a3 WHILE
>9726	5c 92					.word	EndIf                            ; $a4 ENDIF
>9728	49 af					.word	Command_ENDPROC                  ; $a5 ENDPROC
>972a	18 8f					.word	NextCommand                      ; $a6 NEXT
>972c	5b 96					.word	Unused4                          ; $a7 THEN
>972e	83 95					.word	Command_UNTIL                    ; $a8 UNTIL
>9730	cb 9a					.word	Command_WEND                     ; $a9 WEND
>9732	45 b5					.word	SyntaxError                      ; $aa BY
>9734	95 8c					.word	CallCommand                      ; $ab CALL
>9736	75 8f					.word	CircleCommand                    ; $ac CIRCLE
>9738	cf 8c					.word	ClearCommand                     ; $ad CLEAR
>973a	27 8d					.word	ClearScreen                      ; $ae CLS
>973c	45 b5					.word	SyntaxError                      ; $af COLOR
>973e	45 b5					.word	SyntaxError                      ; $b0 COLOUR
>9740	2d 8d					.word	Command_Data                     ; $b1 DATA
>9742	35 8d					.word	DimCommand                       ; $b2 DIM
>9744	5b 96					.word	Unused3                          ; $b3 DOWNTO
>9746	55 92					.word	ElseCode                         ; $b4 ELSE
>9748	45 b5					.word	SyntaxError                      ; $b5 FROM
>974a	a1 91					.word	GfxCommand                       ; $b6 GFX
>974c	d3 91					.word	Command_GOSUB                    ; $b7 GOSUB
>974e	f1 91					.word	GotoCommand                      ; $b8 GOTO
>9750	45 b5					.word	SyntaxError                      ; $b9 HERE
>9752	9f 8f					.word	ImageCommand                     ; $ba IMAGE
>9754	98 92					.word	LetCommand                       ; $bb LET
>9756	f4 8f					.word	LineCommand                      ; $bc LINE
>9758	8b 93					.word	Command_LOCAL                    ; $bd LOCAL
>975a	45 b5					.word	SyntaxError                      ; $be OFF
>975c	45 b5					.word	SyntaxError                      ; $bf ON
>975e	45 b5					.word	SyntaxError                      ; $c0 OUTLINE
>9760	19 94					.word	PaletteCommand                   ; $c1 PALETTE
>9762	ed 8f					.word	PlotCommand                      ; $c2 PLOT
>9764	5d 94					.word	Command_Print                    ; $c3 PRINT
>9766	14 95					.word	Command_Read                     ; $c4 READ
>9768	71 8f					.word	RectangleCommand                 ; $c5 RECT
>976a	6d 95					.word	RemCommand                       ; $c6 REM
>976c	e3 91					.word	Command_RETURN                   ; $c7 RETURN
>976e	45 b5					.word	SyntaxError                      ; $c8 SOLID
>9770	80 8f					.word	SpriteCommand                    ; $c9 SPRITE
>9772	bc 8f					.word	TextCommand                      ; $ca TEXT
>9774	5b 96					.word	Unused2                          ; $cb TO
.9776					VectorSet1:
>9776	45 b5					.word	SyntaxError                      ; $80 !0:EOF
>9778	45 b5					.word	SyntaxError                      ; $81 !1:SH1
>977a	45 b5					.word	SyntaxError                      ; $82 !2:SH2
>977c	66 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>977e	85 8c					.word	AssertCommand                    ; $84 ASSERT
>9780	41 91					.word	BitmapCtrl                       ; $85 BITMAP
>9782	f2 8d					.word	EndCommand                       ; $86 END
>9784	ed 92					.word	Command_List                     ; $87 LIST
>9786	0f 94					.word	NewCommand                       ; $88 NEW
>9788	9c 95					.word	Command_Restore                  ; $89 RESTORE
>978a	ce 95					.word	CommandRUN                       ; $8a RUN
>978c	86 91					.word	SpritesCtrl                      ; $8b SPRITES
>978e	18 98					.word	StopCommand                      ; $8c STOP
.9790					VectorSet2:
>9790	45 b5					.word	SyntaxError                      ; $80 !0:EOF
>9792	45 b5					.word	SyntaxError                      ; $81 !1:SH1
>9794	45 b5					.word	SyntaxError                      ; $82 !2:SH2
>9796	04 b4					.word	Assemble_adc                     ; $83 ADC
>9798	fc b3					.word	Assemble_and                     ; $84 AND
>979a	18 b4					.word	Assemble_asl                     ; $85 ASL
>979c	82 b4					.word	Assemble_bcc                     ; $86 BCC
>979e	86 b4					.word	Assemble_bcs                     ; $87 BCS
>97a0	8e b4					.word	Assemble_beq                     ; $88 BEQ
>97a2	45 b4					.word	Assemble_bit                     ; $89 BIT
>97a4	76 b4					.word	Assemble_bmi                     ; $8a BMI
>97a6	8a b4					.word	Assemble_bne                     ; $8b BNE
>97a8	72 b4					.word	Assemble_bpl                     ; $8c BPL
>97aa	92 b4					.word	Assemble_bra                     ; $8d BRA
>97ac	96 b4					.word	Assemble_brk                     ; $8e BRK
>97ae	7a b4					.word	Assemble_bvc                     ; $8f BVC
>97b0	7e b4					.word	Assemble_bvs                     ; $90 BVS
>97b2	9e b4					.word	Assemble_clc                     ; $91 CLC
>97b4	f2 b4					.word	Assemble_cld                     ; $92 CLD
>97b6	b2 b4					.word	Assemble_cli                     ; $93 CLI
>97b8	e2 b4					.word	Assemble_clv                     ; $94 CLV
>97ba	10 b4					.word	Assemble_cmp                     ; $95 CMP
>97bc	59 b4					.word	Assemble_cpx                     ; $96 CPX
>97be	54 b4					.word	Assemble_cpy                     ; $97 CPY
>97c0	36 b4					.word	Assemble_dec                     ; $98 DEC
>97c2	ee b4					.word	Assemble_dex                     ; $99 DEX
>97c4	ca b4					.word	Assemble_dey                     ; $9a DEY
>97c6	00 b4					.word	Assemble_eor                     ; $9b EOR
>97c8	3b b4					.word	Assemble_inc                     ; $9c INC
>97ca	fe b4					.word	Assemble_inx                     ; $9d INX
>97cc	ea b4					.word	Assemble_iny                     ; $9e INY
>97ce	6d b4					.word	Assemble_jmp                     ; $9f JMP
>97d0	68 b4					.word	Assemble_jsr                     ; $a0 JSR
>97d2	0c b4					.word	Assemble_lda                     ; $a1 LDA
>97d4	31 b4					.word	Assemble_ldx                     ; $a2 LDX
>97d6	4f b4					.word	Assemble_ldy                     ; $a3 LDY
>97d8	22 b4					.word	Assemble_lsr                     ; $a4 LSR
>97da	02 b5					.word	Assemble_nop                     ; $a5 NOP
>97dc	f8 b3					.word	Assemble_ora                     ; $a6 ORA
>97de	ae b4					.word	Assemble_pha                     ; $a7 PHA
>97e0	9a b4					.word	Assemble_php                     ; $a8 PHP
>97e2	f6 b4					.word	Assemble_phx                     ; $a9 PHX
>97e4	b6 b4					.word	Assemble_phy                     ; $aa PHY
>97e6	be b4					.word	Assemble_pla                     ; $ab PLA
>97e8	a2 b4					.word	Assemble_plp                     ; $ac PLP
>97ea	0a b5					.word	Assemble_plx                     ; $ad PLX
>97ec	c6 b4					.word	Assemble_ply                     ; $ae PLY
>97ee	1d b4					.word	Assemble_rol                     ; $af ROL
>97f0	27 b4					.word	Assemble_ror                     ; $b0 ROR
>97f2	aa b4					.word	Assemble_rti                     ; $b1 RTI
>97f4	ba b4					.word	Assemble_rts                     ; $b2 RTS
>97f6	14 b4					.word	Assemble_sbc                     ; $b3 SBC
>97f8	a6 b4					.word	Assemble_sec                     ; $b4 SEC
>97fa	06 b5					.word	Assemble_sed                     ; $b5 SED
>97fc	c2 b4					.word	Assemble_sei                     ; $b6 SEI
>97fe	08 b4					.word	Assemble_sta                     ; $b7 STA
>9800	fa b4					.word	Assemble_stp                     ; $b8 STP
>9802	2c b4					.word	Assemble_stx                     ; $b9 STX
>9804	4a b4					.word	Assemble_sty                     ; $ba STY
>9806	40 b4					.word	Assemble_stz                     ; $bb STZ
>9808	de b4					.word	Assemble_tax                     ; $bc TAX
>980a	da b4					.word	Assemble_tay                     ; $bd TAY
>980c	63 b4					.word	Assemble_trb                     ; $be TRB
>980e	5e b4					.word	Assemble_tsb                     ; $bf TSB
>9810	e6 b4					.word	Assemble_tsx                     ; $c0 TSX
>9812	ce b4					.word	Assemble_txa                     ; $c1 TXA
>9814	d6 b4					.word	Assemble_txs                     ; $c2 TXS
>9816	d2 b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9818					StopCommand:
.9818	a9 08		lda #$08		lda	#8
.981a	4c d9 9a	jmp $9ad9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.981d					UnaryTimer:
.981d	fa		plx				plx
.981e	20 57 af	jsr $af57			jsr 	CheckRightBracket
.9821					TimerToStackX:
.9821	20 14 a7	jsr $a714			jsr 	NSMSetZero 					; zero result
.9824	64 01		stz $01				stz 	1 							; access I/O
.9826	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9829	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.982c	ad 5a d6	lda $d65a			lda 	$D65A
.982f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9832	ad 5b d6	lda $d65b			lda 	$D65B
.9835	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9838	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9839					ListConvertLine:
.9839	9c 9d 04	stz $049d			stz 	tbOffset
.983c	9c aa 04	stz $04aa			stz 	tokenBuffer
.983f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9841	b1 30		lda ($30),y			lda 	(codePtr),y
.9843	aa		tax				tax
.9844	88		dey				dey
.9845	b1 30		lda ($30),y			lda 	(codePtr),y
.9847	20 b3 b0	jsr $b0b3			jsr 	ConvertInt16
.984a	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.984c	86 37		stx $37				stx 	zTemp0+1
.984e	a0 00		ldy #$00			ldy 	#0
.9850					_LCCopyNumber:
.9850	b1 36		lda ($36),y			lda 	(zTemp0),y
.9852	20 7e 99	jsr $997e			jsr 	LCLWrite
.9855	c8		iny				iny
.9856	b1 36		lda ($36),y			lda 	(zTemp0),y
.9858	d0 f6		bne $9850			bne 	_LCCopyNumber
.985a	20 97 9a	jsr $9a97			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.985d	48		pha				pha 								; save on stack
.985e	10 0c		bpl $986c			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9860	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9861	6d a6 04	adc $04a6			adc 	listIndent
.9864	8d a6 04	sta $04a6			sta 	listIndent
.9867	10 03		bpl $986c			bpl 	_LCNoAdjust
.9869	9c a6 04	stz $04a6			stz 	listIndent
.986c					_LCNoAdjust:
.986c	18		clc				clc		 							; work out actual indent.
.986d	ad a6 04	lda $04a6			lda 	listIndent
.9870	0a		asl a				asl 	a
.9871	69 06		adc #$06			adc 	#6
.9873	85 36		sta $36				sta 	zTemp0
.9875					_LCPadOut:
.9875	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9877	20 7e 99	jsr $997e			jsr 	LCLWrite
.987a	ad 9d 04	lda $049d			lda 	tbOffset
.987d	c5 36		cmp $36				cmp 	zTemp0
.987f	d0 f4		bne $9875			bne 	_LCPadOut
.9881	a0 03		ldy #$03			ldy 	#3 							; start position.
.9883					_LCMainLoop:
.9883	b1 30		lda ($30),y			lda 	(codePtr),y
.9885	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9887	f0 17		beq $98a0			beq 	_LCExit
.9889	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.988b	90 1e		bcc $98ab			bcc 	_LCDoubles
.988d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.988f	90 2a		bcc $98bb			bcc 	_LCShiftPunc
.9891	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9893	90 35		bcc $98ca			bcc 	_LCPunctuation
.9895	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9897	90 3e		bcc $98d7			bcc 	_LCIdentifiers
.9899	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.989b	90 5a		bcc $98f7			bcc 	_LCTokens
.989d	4c 52 99	jmp $9952			jmp 	_LCData 					; 254-5 are data objects
.98a0					_LCExit:
.98a0	68		pla				pla 								; get old indent adjust
.98a1	30 07		bmi $98aa			bmi 	_LCExit2
.98a3	18		clc				clc 								; add to indent if +ve
.98a4	6d a6 04	adc $04a6			adc 	listIndent
.98a7	8d a6 04	sta $04a6			sta 	listIndent
.98aa					_LCExit2:
.98aa	60		rts				rts
.98ab					_LCDoubles:
.98ab	48		pha				pha
.98ac	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.98ad	29 02		and #$02			and 	#2
.98af	09 3c		ora #$3c			ora 	#60 						; make < >
.98b1	20 7e 99	jsr $997e			jsr 	LCLWrite
.98b4	68		pla				pla 								; restore, do lower bit
.98b5	29 03		and #$03			and 	#3
.98b7	09 3c		ora #$3c			ora 	#60
.98b9	80 0f		bra $98ca			bra		_LCPunctuation 				; print, increment, loop
.98bb					_LCShiftPunc:
.98bb	aa		tax				tax 								; save in X
.98bc	29 07		and #$07			and 	#7 							; lower 3 bits
.98be	f0 02		beq $98c2			beq 	_LCNoAdd
.98c0	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.98c2					_LCNoAdd:
.98c2	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.98c4	90 02		bcc $98c8			bcc 	_LCNoAdd2
.98c6	09 20		ora #$20			ora 	#32 						; adds $20
.98c8					_LCNoAdd2:
.98c8	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.98ca					_LCPunctuation:
.98ca	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.98cc	d0 03		bne $98d1			bne 	_LCPContinue
.98ce	20 8d 99	jsr $998d			jsr 	LCDeleteLastSpace
.98d1					_LCPContinue:
.98d1	c8		iny				iny 								; consume character
.98d2	20 7e 99	jsr $997e			jsr 	LCLWrite 					; write it out.
.98d5	80 ac		bra $9883			bra 	_LCMainLoop 				; go round again.
.98d7					_LCIdentifiers:
.98d7	18		clc				clc 								; convert to physical address
.98d8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98da	85 37		sta $37				sta 	zTemp0+1
.98dc	c8		iny				iny
.98dd	b1 30		lda ($30),y			lda 	(codePtr),y
.98df	85 36		sta $36				sta 	zTemp0
.98e1	c8		iny				iny
.98e2	5a		phy				phy 								; save position
.98e3	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.98e5					_LCOutIdentifier:
.98e5	c8		iny				iny
.98e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.98e8	29 7f		and #$7f			and 	#$7F
.98ea	20 cc 99	jsr $99cc			jsr 	LCLLowerCase
.98ed	20 7e 99	jsr $997e			jsr 	LCLWrite
.98f0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.98f2	10 f1		bpl $98e5			bpl 	_LCOutIdentifier
.98f4	7a		ply				ply 								; restore position
.98f5	80 8c		bra $9883			bra 	_LCMainLoop
.98f7					_LCTokens:
.98f7	aa		tax				tax 								; token in X
.98f8	a9 03		lda #$03			lda 	#((KeywordSet2) & $FF)
.98fa	85 36		sta $36				sta 	0+zTemp0
.98fc	a9 ab		lda #$ab			lda 	#((KeywordSet2) >> 8)
.98fe	85 37		sta $37				sta 	1+zTemp0
.9900	e0 82		cpx #$82			cpx 	#$82
.9902	f0 16		beq $991a			beq 	_LCUseShift
.9904	a9 b5		lda #$b5			lda 	#((KeywordSet1) & $FF)
.9906	85 36		sta $36				sta 	0+zTemp0
.9908	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.990a	85 37		sta $37				sta 	1+zTemp0
.990c	e0 81		cpx #$81			cpx 	#$81
.990e	f0 0a		beq $991a			beq 	_LCUseShift
.9910	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.9912	85 36		sta $36				sta 	0+zTemp0
.9914	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.9916	85 37		sta $37				sta 	1+zTemp0
.9918	80 01		bra $991b			bra 	_LCNoShift
.991a					_LCUseShift:
.991a	c8		iny				iny
.991b					_LCNoShift:
.991b	20 a1 99	jsr $99a1			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.991e	b1 30		lda ($30),y			lda 	(codePtr),y
.9920	aa		tax				tax 								; into X
.9921					_LCFindText:
.9921	ca		dex				dex
.9922	10 0e		bpl $9932			bpl 	_LCFoundText 				; found text.
.9924	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9926	1a		inc a				inc 	a 							; one extra for size
.9927	38		sec				sec 								; one extra for checksum
.9928	65 36		adc $36				adc 	zTemp0 						; go to next token
.992a	85 36		sta $36				sta 	zTemp0
.992c	90 f3		bcc $9921			bcc 	_LCFindText
.992e	e6 37		inc $37				inc 	zTemp0+1
.9930	80 ef		bra $9921			bra 	_LCFindText
.9932					_LCFoundText:
.9932	5a		phy				phy 								; save List position
.9933	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9935	aa		tax				tax
.9936	a0 02		ldy #$02			ldy 	#2
.9938					_LCCopyToken:
.9938	b1 36		lda ($36),y			lda 	(zTemp0),y
.993a	20 cc 99	jsr $99cc			jsr 	LCLLowerCase
.993d	20 7e 99	jsr $997e			jsr 	LCLWrite
.9940	c8		iny				iny
.9941	ca		dex				dex
.9942	d0 f4		bne $9938			bne 	_LCCopyToken
.9944	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9946	f0 05		beq $994d			beq 	_LCNoSpace
.9948	a9 20		lda #$20			lda 	#' '
.994a	20 7e 99	jsr $997e			jsr 	LCLWrite
.994d					_LCNoSpace:
.994d	7a		ply				ply 								; restore position.
.994e	c8		iny				iny 								; consume token
.994f	4c 83 98	jmp $9883			jmp 	_LCMainLoop 				; and go around again.
.9952					_LCData:
.9952	48		pha				pha 								; save type $FE/$FF
.9953	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9955	c9 fe		cmp #$fe			cmp 	#$FE
.9957	f0 02		beq $995b			beq 	_LCHaveOpener
.9959	a2 22		ldx #$22			ldx 	#'"'
.995b					_LCHaveOpener:
.995b	8a		txa				txa 								; output prefix (# or ")
.995c	20 7e 99	jsr $997e			jsr 	LCLWrite
.995f	c8		iny				iny 								; get count
.9960	b1 30		lda ($30),y			lda 	(codePtr),y
.9962	aa		tax				tax
.9963	c8		iny				iny 								; point at first character
.9964					_LCOutData:
.9964	b1 30		lda ($30),y			lda 	(codePtr),y
.9966	c9 00		cmp #$00			cmp 	#0
.9968	f0 03		beq $996d			beq 	_LCNoPrint
.996a	20 7e 99	jsr $997e			jsr 	LCLWrite
.996d					_LCNoPrint:
.996d	c8		iny				iny
.996e	ca		dex				dex
.996f	d0 f3		bne $9964			bne 	_LCOutData
.9971	68		pla				pla 								; closing " required ?
.9972	c9 ff		cmp #$ff			cmp 	#$FF
.9974	d0 05		bne $997b			bne 	_LCNoQuote
.9976	a9 22		lda #$22			lda 	#'"'
.9978	20 7e 99	jsr $997e			jsr 	LCLWrite
.997b					_LCNoQuote:
.997b	4c 83 98	jmp $9883			jmp 	_LCMainLoop
.997e					LCLWrite:
.997e	da		phx				phx
.997f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9982	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9985	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9988	ee 9d 04	inc $049d			inc 	tbOffset
.998b	fa		plx				plx
.998c	60		rts				rts
.998d					LCDeleteLastSpace:
.998d	48		pha				pha
.998e	da		phx				phx
.998f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9992	f0 0a		beq $999e			beq 	_LCDLSExit
.9994	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9997	c9 20		cmp #$20			cmp 	#' '
.9999	d0 03		bne $999e			bne 	_LCDLSExit
.999b	ce 9d 04	dec $049d			dec 	tbOffset
.999e					_LCDLSExit:
.999e	fa		plx				plx
.999f	68		pla				pla
.99a0	60		rts				rts
.99a1					LCCheckSpaceRequired:
.99a1	ae 9d 04	ldx $049d			ldx 	tbOffset
.99a4	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.99a7	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.99a9	f0 1b		beq $99c6			beq 	_LCCSRSpace
.99ab	c9 29		cmp #$29			cmp 	#')'
.99ad	f0 17		beq $99c6			beq 	_LCCSRSpace
.99af	c9 23		cmp #$23			cmp 	#'#'
.99b1	f0 13		beq $99c6			beq 	_LCCSRSpace
.99b3	20 cc 99	jsr $99cc			jsr 	LCLLowerCase 				; saves a little effort
.99b6	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.99b8	90 11		bcc $99cb			bcc 	_LCCSRExit
.99ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.99bc	90 08		bcc $99c6			bcc 	_LCCSRSpace
.99be	c9 61		cmp #$61			cmp 	#"a"
.99c0	90 09		bcc $99cb			bcc 	_LCCSRExit
.99c2	c9 7b		cmp #$7b			cmp 	#"z"+1
.99c4	b0 05		bcs $99cb			bcs 	_LCCSRExit
.99c6					_LCCSRSpace:
.99c6	a9 20		lda #$20			lda 	#' '
.99c8	20 7e 99	jsr $997e			jsr 	LCLWrite
.99cb					_LCCSRExit:
.99cb	60		rts				rts
.99cc					LCLLowerCase:
.99cc	c9 41		cmp #$41			cmp 	#"A"
.99ce	90 06		bcc $99d6			bcc 	_LCLLCOut
.99d0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.99d2	b0 02		bcs $99d6			bcs 	_LCLLCOut
.99d4	69 20		adc #$20			adc 	#$20
.99d6					_LCLLCOut:
.99d6	60		rts				rts
.99d7					LCLUpperCase:
.99d7	c9 61		cmp #$61			cmp 	#"a"
.99d9	90 06		bcc $99e1			bcc 	_LCLUCOut
.99db	c9 7b		cmp #$7b			cmp 	#"z"+1
.99dd	b0 02		bcs $99e1			bcs 	_LCLUCOut
.99df	e9 1f		sbc #$1f			sbc 	#$1F
.99e1					_LCLUCOut:
.99e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.99e2					ProcedureScan:
.99e2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99e4	85 30		sta $30				sta 	codePtr
.99e6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99e8	85 31		sta $31				sta 	codePtr+1
.99ea					_PSLoop:
.99ea	b2 30		lda ($30)			lda 	(codePtr)
.99ec	f0 42		beq $9a30			beq 	_PSExit
.99ee	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.99f0	b1 30		lda ($30),y			lda 	(codePtr),y
.99f2	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.99f4	d0 2d		bne $9a23			bne 	_PSNext
.99f6	c8		iny				iny 								; get the address of the record to zTemp0 and
.99f7	b1 30		lda ($30),y			lda 	(codePtr),y
.99f9	29 c0		and #$c0			and 	#$C0
.99fb	c9 40		cmp #$40			cmp 	#$40
.99fd	d0 32		bne $9a31			bne 	_PSSyntax
.99ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9a01	18		clc				clc
.9a02	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a04	85 37		sta $37				sta 	zTemp0+1
.9a06	c8		iny				iny 								; LSB
.9a07	b1 30		lda ($30),y			lda 	(codePtr),y
.9a09	85 36		sta $36				sta 	zTemp0
.9a0b	c8		iny				iny 								; character after variable call.
.9a0c	98		tya				tya 								; save Y offset at +7
.9a0d	a0 07		ldy #$07			ldy 	#7
.9a0f	91 36		sta ($36),y			sta 	(zTemp0),y
.9a11	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9a13	a0 02		ldy #$02			ldy 	#2
.9a15	91 36		sta ($36),y			sta 	(zTemp0),y
.9a17	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9a19					_PSCopy:
.9a19	b5 30		lda $30,x			lda 	safePtr,x
.9a1b	c8		iny				iny
.9a1c	91 36		sta ($36),y			sta 	(zTemp0),y
.9a1e	e8		inx				inx
.9a1f	e0 04		cpx #$04			cpx 	#4
.9a21	d0 f6		bne $9a19			bne 	_PSCopy
.9a23					_PSNext:
.9a23	18		clc				clc
.9a24	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a26	65 30		adc $30				adc 	codePtr
.9a28	85 30		sta $30				sta 	codePtr
.9a2a	90 02		bcc $9a2e			bcc 	_CREExit
.9a2c	e6 31		inc $31				inc 	codePtr+1
.9a2e					_CREExit:
.9a2e	80 ba		bra $99ea			bra 	_PSLoop
.9a30					_PSExit:
.9a30	60		rts				rts
.9a31					_PSSyntax:
.9a31	4c 45 b5	jmp $b545			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9a34					ScanForward:
.9a34	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9a36	86 37		stx $37				stx 	zTemp0+1
.9a38	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9a3a					_ScanLoop:
.9a3a	b1 30		lda ($30),y			lda 	(codePtr),y
.9a3c	c8		iny				iny
.9a3d	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9a3f	d0 0e		bne $9a4f			bne 	_ScanGoNext
.9a41	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9a43	f0 04		beq $9a49			beq 	_ScanMatch
.9a45	c5 37		cmp $37				cmp 	zTemp0+1
.9a47	d0 06		bne $9a4f			bne 	_ScanGoNext
.9a49					_ScanMatch:
.9a49	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9a4b	d0 01		bne $9a4e			bne 	_ScanNotEndEOL
.9a4d	88		dey				dey
.9a4e					_ScanNotEndEOL:
.9a4e	60		rts				rts
.9a4f					_ScanGoNext:
.9a4f	20 54 9a	jsr $9a54			jsr  	ScanForwardOne
.9a52	80 e6		bra $9a3a			bra 	_ScanLoop
.9a54					ScanForwardOne:
.9a54	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9a56	90 3e		bcc $9a96			bcc 	_SFWExit
.9a58	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9a5a	90 18		bcc $9a74			bcc 	_ScanSkipOne
.9a5c	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9a5e	b0 2f		bcs $9a8f			bcs 	_ScanSkipData
.9a60	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9a62	90 32		bcc $9a96			bcc 	_SFWExit 					; if not, ordinary keywords.
.9a64	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9a66	b0 2e		bcs $9a96			bcs 	_SFWExit
.9a68	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9a6a	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9a6c	b0 28		bcs $9a96			bcs 	_SFWExit
.9a6e	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9a70	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9a72	80 22		bra $9a96			bra 	_SFWExit
.9a74					_ScanSkipOne:
.9a74	c8		iny				iny 								; consume the extra one.
.9a75	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9a77	d0 1d		bne $9a96			bne 	_SFWExit
.9a79	18		clc				clc
.9a7a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a7c	65 30		adc $30				adc 	codePtr
.9a7e	85 30		sta $30				sta 	codePtr
.9a80	90 02		bcc $9a84			bcc 	_CREExit
.9a82	e6 31		inc $31				inc 	codePtr+1
.9a84					_CREExit:
.9a84	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9a86	b2 30		lda ($30)			lda 	(codePtr)
.9a88	d0 0c		bne $9a96			bne 	_SFWExit 					; if not zero, more to scan
.9a8a	a9 13		lda #$13		lda	#19
.9a8c	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.9a8f					_ScanSkipData:
.9a8f	88		dey				dey 								; point at data token
.9a90	c8		iny				iny
.9a91	98		tya				tya
.9a92	38		sec				sec
.9a93	71 30		adc ($30),y			adc 	(codePtr),y
.9a95	a8		tay				tay
.9a96					_SFWExit:
.9a96	60		rts				rts
.9a97					ScanGetCurrentLineStep:
.9a97	64 38		stz $38				stz 	zTemp1
.9a99	a0 03		ldy #$03			ldy 	#3
.9a9b					_SGCLSLoop:
.9a9b	b1 30		lda ($30),y			lda 	(codePtr),y
.9a9d	c8		iny				iny
.9a9e	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9aa0	f0 05		beq $9aa7			beq 	_SGCLSExit
.9aa2	20 54 9a	jsr $9a54			jsr 	ScanForwardOne
.9aa5	80 f4		bra $9a9b			bra 	_SGCLSLoop
.9aa7					_SGCLSExit:
.9aa7	a5 38		lda $38				lda 	zTemp1
.9aa9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9aaa					Command_WHILE:
.9aaa	5a		phy				phy 								; save position of the test
.9aab	a2 00		ldx #$00			ldx 	#0
.9aad	20 54 a6	jsr $a654			jsr 	EvaluateNumber 				; work out the number
.9ab0	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; check if zero
.9ab3	f0 0e		beq $9ac3			beq 	_WHExitLoop 				; if so exit the loop
.9ab5	98		tya				tya 								; position *after* test.
.9ab6	7a		ply				ply 								; restore position before test, at WHILE
.9ab7	88		dey				dey
.9ab8	48		pha				pha 								; push after test on the stack
.9ab9	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9abb	20 c8 a7	jsr $a7c8			jsr 	StackOpen
.9abe	20 0c a8	jsr $a80c			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9ac1	7a		ply				ply 								; restore the position *after* the test
.9ac2	60		rts				rts
.9ac3					_WHExitLoop:
.9ac3	68		pla				pla 								; throw post loop position
.9ac4	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9ac6	aa		tax				tax
.9ac7	20 34 9a	jsr $9a34			jsr 	ScanForward
.9aca	60		rts				rts
.9acb					Command_WEND:
.9acb	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9acd	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9acf	20 f4 a7	jsr $a7f4			jsr 	StackCheckFrame
.9ad2	20 1d a8	jsr $a81d			jsr 	STKLoadCodePosition 		; loop back
.9ad5	20 e6 a7	jsr $a7e6			jsr 	StackClose		 			; erase the frame
.9ad8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.af57					CheckRightBracket:
.af57	b1 30		lda ($30),y			lda 	(codePtr),y
.af59	c8		iny				iny
.af5a	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.af5c	d0 0f		bne $af6d			bne 	CNAFail
.af5e	60		rts				rts
.af5f					CheckComma:
.af5f	b1 30		lda ($30),y			lda 	(codePtr),y
.af61	c8		iny				iny
.af62	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.af64	d0 07		bne $af6d			bne 	CNAFail
.af66	60		rts				rts
.af67					CheckNextA:
.af67	d1 30		cmp ($30),y			cmp 	(codePtr),y
.af69	d0 02		bne $af6d			bne 	CNAFail
.af6b	c8		iny				iny 								; skip character
.af6c	60		rts				rts 								; and exit
.af6d					CNAFail:
.af6d	4c 45 b5	jmp $b545			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9ad9					ErrorHandler:
.9ad9	a8		tay				tay 								; find the error text
.9ada	f0 49		beq $9b25			beq 	_EHEnd
.9adc	a2 00		ldx #$00			ldx 	#0
.9ade	a9 5e		lda #$5e			lda 	#((ErrorText) & $FF)
.9ae0	85 36		sta $36				sta 	0+zTemp0
.9ae2	a9 b5		lda #$b5			lda 	#((ErrorText) >> 8)
.9ae4	85 37		sta $37				sta 	1+zTemp0
.9ae6					_EHFind:
.9ae6	88		dey				dey 								; found the error text ?
.9ae7	f0 0e		beq $9af7			beq 	_EHFound
.9ae9					_EHFindZero:
.9ae9	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9aeb	e6 36		inc $36				inc 	zTemp0
.9aed	d0 02		bne $9af1			bne 	_EHFNoCarry
.9aef	e6 37		inc $37				inc 	zTemp0+1
.9af1					_EHFNoCarry:
.9af1	c9 00		cmp #$00			cmp 	#0
.9af3	d0 f4		bne $9ae9			bne 	_EHFindZero
.9af5	80 ef		bra $9ae6			bra 	_EHFind
.9af7					_EHFound:
.9af7	a5 36		lda $36				lda 	zTemp0 						; print message
.9af9	a6 37		ldx $37				ldx 	zTemp0+1
.9afb	20 32 9b	jsr $9b32			jsr 	PrintStringXA
.9afe	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9b00	b1 30		lda ($30),y			lda 	(codePtr),y
.9b02	d0 05		bne $9b09			bne 	_EHAtMsg
.9b04	c8		iny				iny
.9b05	b1 30		lda ($30),y			lda 	(codePtr),y
.9b07	f0 17		beq $9b20			beq 	_EHCREnd
.9b09					_EHAtMsg:
.9b09	a2 9b		ldx #$9b			ldx 	#_AtMsg >> 8 				; print " at "
.9b0b	a9 28		lda #$28			lda 	#_AtMsg & $FF
.9b0d	20 32 9b	jsr $9b32			jsr 	PrintStringXA
.9b10	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9b12	b1 30		lda ($30),y			lda 	(codePtr),y
.9b14	48		pha				pha
.9b15	c8		iny				iny
.9b16	b1 30		lda ($30),y			lda 	(codePtr),y
.9b18	aa		tax				tax
.9b19	68		pla				pla
.9b1a	20 b3 b0	jsr $b0b3			jsr 	ConvertInt16 				; convert XA to string
.9b1d	20 32 9b	jsr $9b32			jsr 	PrintStringXA 				; and print it.
.9b20					_EHCREnd:
.9b20	a9 0d		lda #$0d			lda 	#13 						; new line
.9b22	20 ff b6	jsr $b6ff			jsr 	EXTPrintCharacter
.9b25					_EHEnd:
.9b25	4c 36 8c	jmp $8c36			jmp 	WarmStart
>9b28	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9b30	20 00
.9b32					PrintStringXA:
.9b32	5a		phy				phy
.9b33	86 37		stx $37				stx 	zTemp0+1
.9b35	85 36		sta $36				sta 	zTemp0
.9b37	a0 00		ldy #$00			ldy 	#0
.9b39					_PSXALoop:
.9b39	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b3b	f0 06		beq $9b43			beq 	_PSXAExit
.9b3d	20 ff b6	jsr $b6ff			jsr 	EXTPrintCharacter
.9b40	c8		iny				iny
.9b41	80 f6		bra $9b39			bra 	_PSXALoop
.9b43					_PSXAExit:
.9b43	7a		ply				ply
.9b44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9b45					UnaryTrue:
.9b45	fa		plx				plx
.9b46					ReturnTrue:
.9b46	a9 01		lda #$01			lda 	#1  						; set to 1
.9b48	20 16 a7	jsr $a716			jsr 	NSMSetByte
.9b4b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9b4d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b50	60		rts				rts
.9b51					UnaryFalse:
.9b51	fa		plx				plx
.9b52					ReturnFalse:
.9b52	4c 14 a7	jmp $a714			jmp 	NSMSetZero 					; set it all to zero
.9b55					BinaryCompareEqual:
.9b55	fa		plx				plx
.9b56	20 91 9b	jsr $9b91			jsr 	CompareBaseCode
.9b59	c9 00		cmp #$00			cmp 	#0
.9b5b	f0 e9		beq $9b46			beq 	ReturnTrue
.9b5d	80 f3		bra $9b52			bra 	ReturnFalse
.9b5f					BinaryCompareLess:
.9b5f	fa		plx				plx
.9b60	20 91 9b	jsr $9b91			jsr 	CompareBaseCode
.9b63	c9 ff		cmp #$ff			cmp 	#$FF
.9b65	f0 df		beq $9b46			beq 	ReturnTrue
.9b67	80 e9		bra $9b52			bra 	ReturnFalse
.9b69					BinaryCompareGreater:
.9b69	fa		plx				plx
.9b6a	20 91 9b	jsr $9b91			jsr 	CompareBaseCode
.9b6d	c9 01		cmp #$01			cmp 	#1
.9b6f	f0 d5		beq $9b46			beq 	ReturnTrue
.9b71	80 df		bra $9b52			bra 	ReturnFalse
.9b73					BinaryCompareNotEqual:
.9b73	fa		plx				plx
.9b74	20 91 9b	jsr $9b91			jsr 	CompareBaseCode
.9b77	c9 00		cmp #$00			cmp 	#0
.9b79	d0 cb		bne $9b46			bne 	ReturnTrue
.9b7b	80 d5		bra $9b52			bra 	ReturnFalse
.9b7d					BinaryCompareLessEqual:
.9b7d	fa		plx				plx
.9b7e	20 91 9b	jsr $9b91			jsr 	CompareBaseCode
.9b81	c9 01		cmp #$01			cmp 	#1
.9b83	d0 c1		bne $9b46			bne 	ReturnTrue
.9b85	80 cb		bra $9b52			bra 	ReturnFalse
.9b87					BinaryCompareGreaterEqual:
.9b87	fa		plx				plx
.9b88	20 91 9b	jsr $9b91			jsr 	CompareBaseCode
.9b8b	c9 ff		cmp #$ff			cmp 	#$FF
.9b8d	d0 b7		bne $9b46			bne 	ReturnTrue
.9b8f	80 c1		bra $9b52			bra 	ReturnFalse
.9b91					CompareBaseCode:
.9b91	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; make both values if references.
.9b94	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9b97	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b9a	29 10		and #$10			and 	#NSTString
.9b9c	d0 40		bne $9bde			bne 	_CBCString
.9b9e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9ba1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ba4	d0 3b		bne $9be1			bne 	_CBCFloat
.9ba6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ba9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bac	29 08		and #$08			and 	#NSTFloat
.9bae	d0 31		bne $9be1			bne 	_CBCFloat
.9bb0	20 e4 9b	jsr $9be4			jsr 	CompareFixMinusZero
.9bb3	e8		inx				inx
.9bb4	20 e4 9b	jsr $9be4			jsr 	CompareFixMinusZero
.9bb7	ca		dex				dex
.9bb8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9bbb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bbe	10 0b		bpl $9bcb			bpl 	_CDCSameSign
.9bc0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9bc3	30 16		bmi $9bdb			bmi 	_CBCLess 					; return $FF
.9bc5					_CBCGreater:
.9bc5	a9 01		lda #$01			lda 	#1
.9bc7	60		rts				rts
.9bc8					_CBCEqual:
.9bc8	a9 00		lda #$00			lda 	#0
.9bca	60		rts				rts
.9bcb					_CDCSameSign:
.9bcb	20 f4 9c	jsr $9cf4			jsr 	SubTopTwoStack 				; unsigned subtract
.9bce	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; or the mantissa together
.9bd1	f0 f5		beq $9bc8			beq 	_CBCEqual 					; -0 == 0
.9bd3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9bd6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9bd9	10 ea		bpl $9bc5			bpl 	_CBCGreater
.9bdb					_CBCLess:
.9bdb	a9 ff		lda #$ff			lda 	#$FF
.9bdd	60		rts				rts
.9bde					_CBCString:
.9bde	4c 4a 9c	jmp $9c4a			jmp 	CompareStrings
.9be1					_CBCFloat:
.9be1	4c b7 b1	jmp $b1b7			jmp 	CompareFloat
.9be4					CompareFixMinusZero:
.9be4	20 44 a7	jsr $a744			jsr 	NSMIsZero
.9be7	d0 03		bne $9bec			bne 	_CFXMZNotZero
.9be9	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9bec					_CFXMZNotZero:
.9bec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9bed					StringConcat:
.9bed	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9bf0	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9bf3	29 18		and #$18			and 	#NSBTypeMask
.9bf5	c9 10		cmp #$10			cmp 	#NSTString
.9bf7	d0 4e		bne $9c47			bne		_SCType
.9bf9	64 38		stz $38				stz 	zTemp1 						; counting total length
.9bfb	e8		inx				inx
.9bfc	20 1a 9c	jsr $9c1a			jsr 	_SCSetupZ0 					; setup for second
.9bff	20 25 9c	jsr $9c25			jsr 	_SCLengthZ0 				; length for second
.9c02	ca		dex				dex
.9c03	20 1a 9c	jsr $9c1a			jsr 	_SCSetupZ0 					; setup for first
.9c06	20 25 9c	jsr $9c25			jsr 	_SCLengthZ0 				; length for first
.9c09	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9c0b	20 c8 b8	jsr $b8c8			jsr 	StringTempAllocate
.9c0e	20 38 9c	jsr $9c38			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9c11	e8		inx				inx
.9c12	20 1a 9c	jsr $9c1a			jsr 	_SCSetupZ0 					; copy second out
.9c15	20 38 9c	jsr $9c38			jsr 	_SCCopy
.9c18	ca		dex				dex
.9c19	60		rts				rts
.9c1a					_SCSetupZ0:
.9c1a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c1d	85 36		sta $36				sta 	zTemp0
.9c1f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c22	85 37		sta $37				sta 	zTemp0+1
.9c24	60		rts				rts
.9c25					_SCLengthZ0:
.9c25	5a		phy				phy
.9c26	a0 00		ldy #$00			ldy 	#0
.9c28					_SCLenLoop:
.9c28	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c2a	f0 0a		beq $9c36			beq 	_SCLExit
.9c2c	c8		iny				iny
.9c2d	e6 38		inc $38				inc 	zTemp1
.9c2f	10 f7		bpl $9c28			bpl		_SCLenLoop
.9c31	a9 09		lda #$09		lda	#9
.9c33	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.9c36					_SCLExit:
.9c36	7a		ply				ply
.9c37	60		rts				rts
.9c38					_SCCopy:
.9c38	5a		phy				phy
.9c39	a0 00		ldy #$00			ldy 	#0
.9c3b					_SCCopyLoop:
.9c3b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c3d	f0 06		beq $9c45			beq 	_SCCExit
.9c3f	20 06 b9	jsr $b906			jsr 	StringTempWrite
.9c42	c8		iny				iny
.9c43	80 f6		bra $9c3b			bra 	_SCCopyLoop
.9c45					_SCCExit:
.9c45	7a		ply				ply
.9c46	60		rts				rts
.9c47					_SCType:
.9c47	4c 4f b5	jmp $b54f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.af70					IntegerDivide:
.af70	fa		plx				plx
.af71	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af74	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af77	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af78	0a		asl a				asl 	a
.af79	10 05		bpl $af80			bpl 	_NotRef
.af7b	48		pha				pha
.af7c	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af7f	68		pla				pla
.af80					_NotRef:
.af80	0a		asl a				asl 	a
.af81	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af83	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af86	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af89	f0 03		beq $af8e			beq 	_IntegerCode 				; if clear, then we have two integers
.af8b	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.af8e					_IntegerCode:
.af8e	20 b0 af	jsr $afb0			jsr 	CheckDivideZero 			; do div zero check
.af91	20 e8 af	jsr $afe8			jsr 	Int32Divide 				; do the division
.af94	20 a5 b0	jsr $b0a5			jsr 	CalculateSign 				; calculate result sign
.af97					NSMCopyPlusTwoToZero:
.af97	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.af9a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af9d	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.afa0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afa3	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.afa6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afa9	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.afac	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afaf	60		rts				rts
.afb0					CheckDivideZero:
.afb0	e8		inx				inx
.afb1	20 44 a7	jsr $a744			jsr 	NSMIsZero
.afb4	f0 02		beq $afb8			beq 	_CDVError
.afb6	ca		dex				dex
.afb7	60		rts				rts
.afb8					_CDVError:
.afb8	a9 03		lda #$03		lda	#3
.afba	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.afbd					IntegerModulus:
.afbd	fa		plx				plx
.afbe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.afc1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.afc4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.afc5	0a		asl a				asl 	a
.afc6	10 05		bpl $afcd			bpl 	_NotRef
.afc8	48		pha				pha
.afc9	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.afcc	68		pla				pla
.afcd					_NotRef:
.afcd	0a		asl a				asl 	a
.afce	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.afd0	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.afd3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.afd6	f0 03		beq $afdb			beq 	_IntegerCode 				; if clear, then we have two integers
.afd8	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.afdb					_IntegerCode:
.afdb					IntegerModulusNoCheck:
.afdb	20 b0 af	jsr $afb0			jsr 	CheckDivideZero 			; do div zero check
.afde	20 e8 af	jsr $afe8			jsr 	Int32Divide 				; do the division
.afe1	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.afe4	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.afe7	60		rts				rts
.afe8					Int32Divide:
.afe8	48		pha				pha 								; save AXY
.afe9	5a		phy				phy
.afea	20 eb a6	jsr $a6eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.afed	20 10 a7	jsr $a710			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aff0	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aff2					_I32DivideLoop:
.aff2	e8		inx				inx
.aff3	e8		inx				inx
.aff4	20 29 a7	jsr $a729			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aff7	ca		dex				dex
.aff8	ca		dex				dex
.aff9	20 2a a7	jsr $a72a			jsr 	NSMRotateLeft
.affc	20 28 b0	jsr $b028			jsr 	DivideCheckSubtract 		; check if subtract possible
.afff	90 03		bcc $b004			bcc 	_I32DivideNoCarryIn
.b001	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.b004					_I32DivideNoCarryIn:
.b004	88		dey				dey 								; loop round till division completed.
.b005	d0 eb		bne $aff2			bne 	_I32DivideLoop
.b007	7a		ply				ply 								; restore AXY and exit
.b008	68		pla				pla
.b009	60		rts				rts
.b00a					Int32ShiftDivide:
.b00a	48		pha				pha 								; save AY
.b00b	5a		phy				phy
.b00c	e8		inx				inx 								; clear S[X+2]
.b00d	e8		inx				inx
.b00e	20 14 a7	jsr $a714			jsr 	NSMSetZero
.b011	ca		dex				dex
.b012	ca		dex				dex
.b013	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.b015					_I32SDLoop:
.b015	20 28 b0	jsr $b028			jsr 	DivideCheckSubtract 		; check if subtract possible
.b018	e8		inx				inx
.b019	e8		inx				inx
.b01a	20 2a a7	jsr $a72a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.b01d	ca		dex				dex
.b01e	ca		dex				dex
.b01f	20 2a a7	jsr $a72a			jsr 	NSMRotateLeft
.b022	88		dey				dey 	 							; do 31 times
.b023	d0 f0		bne $b015			bne 	_I32SDLoop
.b025	7a		ply				ply 								; restore AY and exit
.b026	68		pla				pla
.b027	60		rts				rts
.b028					DivideCheckSubtract:
.b028	20 f4 9c	jsr $9cf4			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.b02b	b0 04		bcs $b031			bcs 	_DCSExit 					; if carry set, then could do, exit
.b02d	20 ce 9c	jsr $9cce			jsr 	AddTopTwoStack 				; add it back in
.b030	18		clc				clc 								; and return False
.b031					_DCSExit:
.b031	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.b032					MulInteger:
.b032	fa		plx				plx
.b033	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.b036	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b039	0a		asl a				asl 	a 							; shift reference bit into sign bit
.b03a	0a		asl a				asl 	a
.b03b	10 05		bpl $b042			bpl 	_NotRef
.b03d	48		pha				pha
.b03e	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.b041	68		pla				pla
.b042					_NotRef:
.b042	0a		asl a				asl 	a 							; put MSB of type into A:7
.b043	30 0b		bmi $b050			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.b045	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.b048	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.b04b	f0 06		beq $b053			beq 	_IntegerCode 				; if clear, then we have two integers
.b04d	4c 8e b2	jmp $b28e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.b050					_StringData:
.b050	4c 59 b5	jmp $b559			jmp 	NotDoneError							; at least one string - don't know both are strings.
.b053					_IntegerCode:
.b053	20 60 b0	jsr $b060			jsr 	MultiplyShort
.b056	c9 00		cmp #$00			cmp 	#0
.b058	f0 05		beq $b05f			beq 	_MIExit
.b05a	a9 04		lda #$04		lda	#4
.b05c	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b05f					_MIExit:
.b05f	60		rts				rts
.b060					MultiplyShort:
.b060	5a		phy				phy 								; save Y
.b061	20 eb a6	jsr $a6eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.b064	20 10 a7	jsr $a710			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.b067	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.b069					_I32MLoop:
.b069	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.b06c	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.b06f	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.b072	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.b075	f0 28		beq $b09f			beq 	_I32MExit 					; exit if zero
.b077	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.b07a	29 01		and #$01			and 	#1
.b07c	f0 0e		beq $b08c			beq 	_I32MNoAdd
.b07e	20 ce 9c	jsr $9cce			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.b081	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.b084	10 06		bpl $b08c			bpl 	_I32MNoAdd
.b086					_I32ShiftRight:
.b086	20 37 a7	jsr $a737			jsr 	NSMShiftRight 				; shift S[X] right
.b089	c8		iny				iny 								; increment shift count
.b08a	80 0a		bra $b096			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.b08c					_I32MNoAdd:
.b08c	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.b08f	70 f5		bvs $b086			bvs 	_I32ShiftRight 				; instead.
.b091	e8		inx				inx
.b092	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.b095	ca		dex				dex
.b096					_I32MShiftUpper:
.b096	e8		inx				inx 								; shift S[X+2] right
.b097	e8		inx				inx
.b098	20 37 a7	jsr $a737			jsr 	NSMShiftRight
.b09b	ca		dex				dex
.b09c	ca		dex				dex
.b09d	80 ca		bra $b069			bra 	_I32MLoop 					; try again.
.b09f					_I32MExit:
.b09f	20 a5 b0	jsr $b0a5			jsr 	CalculateSign
.b0a2	98		tya				tya 								; shift in A
.b0a3	7a		ply				ply 								; restore Y and exit
.b0a4	60		rts				rts
.b0a5					CalculateSign:
.b0a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.b0a8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.b0ab	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b0ae	0a		asl a				asl 	a 							; shift bit 7 into carry
.b0af	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b0b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9c4a					CompareStrings:
.9c4a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9c4d	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9c50	29 10		and #$10			and 	#NSBIsString
.9c52	f0 2c		beq $9c80			beq 	_CSTypeError
.9c54	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9c57	85 36		sta $36				sta 	zTemp0
.9c59	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c5c	85 37		sta $37				sta 	zTemp0+1
.9c5e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9c61	85 38		sta $38				sta 	zTemp1
.9c63	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c66	85 39		sta $39				sta 	zTemp1+1
.9c68	5a		phy				phy 								; save Y so we can access strings
.9c69	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9c6b					_CSLoop:
.9c6b	c8		iny				iny
.9c6c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9c6e	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9c70	d0 06		bne $9c78			bne 	_CSDifferent
.9c72	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9c74	d0 f5		bne $9c6b			bne 	_CSLoop 					; still comparing
.9c76					_CSExit:
.9c76	7a		ply				ply 								; reached end, return zero in A from EOS
.9c77	60		rts				rts
.9c78					_CSDifferent:
.9c78	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9c7a	90 fa		bcc $9c76			bcc		_CSExit
.9c7c	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9c7e	80 f6		bra $9c76			bra 	_CSExit
.9c80					_CSTypeError:
.9c80	4c 4f b5	jmp $b54f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9c83					ShiftLeft:
.9c83	38		sec				sec
.9c84	80 01		bra $9c87			bra 	ShiftMain
.9c86					ShiftRight:
.9c86	18		clc				clc
.9c87					ShiftMain:
.9c87	fa		plx				plx 								; restore X
.9c88	08		php				php 								; save direction
.9c89	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c8c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c8f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c90	0a		asl a				asl 	a
.9c91	10 05		bpl $9c98			bpl 	_NotRef
.9c93	48		pha				pha
.9c94	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c97	68		pla				pla
.9c98					_NotRef:
.9c98	0a		asl a				asl 	a
.9c99	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c9b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c9e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ca1	f0 03		beq $9ca6			beq 	_IntegerCode 				; if clear, then we have two integers
.9ca3	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.9ca6					_IntegerCode:
.9ca6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ca9	29 e0		and #$e0			and 	#$E0
.9cab	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9cae	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9cb1	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9cb4	d0 13		bne $9cc9			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9cb6					_SMLoop:
.9cb6	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9cb9	30 11		bmi $9ccc			bmi 	_SMExit 					; exit if done.
.9cbb	28		plp				plp 								; restore direcition setting
.9cbc	08		php				php
.9cbd	90 05		bcc $9cc4			bcc 	_SMRight
.9cbf	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; shift left if CS
.9cc2	80 f2		bra $9cb6			bra 	_SMLoop
.9cc4					_SMRight:
.9cc4	20 37 a7	jsr $a737			jsr 	NSMShiftRight 				; shift right if CC
.9cc7	80 ed		bra $9cb6			bra 	_SMLoop
.9cc9					_SMExit0:
.9cc9	20 14 a7	jsr $a714			jsr 	NSMSetZero 					; return zero.
.9ccc					_SMExit:
.9ccc	28		plp				plp 								; throw direction
.9ccd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9cce					AddTopTwoStack:
.9cce	18		clc				clc
.9ccf	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cd2	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9cd5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cd8	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cdb	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9cde	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ce1	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ce4	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9ce7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cea	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9ced	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9cf0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cf3	60		rts				rts
.9cf4					SubTopTwoStack:
.9cf4	38		sec				sec
.9cf5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cf8	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9cfb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cfe	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d01	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9d04	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d07	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d0a	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9d0d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d10	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d13	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9d16	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d19	60		rts				rts
.9d1a					AddInteger:
.9d1a	fa		plx				plx
.9d1b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d1e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d21	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d22	0a		asl a				asl 	a
.9d23	10 05		bpl $9d2a			bpl 	_NotRef
.9d25	48		pha				pha
.9d26	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d29	68		pla				pla
.9d2a					_NotRef:
.9d2a	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d2b	30 0b		bmi $9d38			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d2d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d30	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d33	f0 06		beq $9d3b			beq 	_IntegerCode 				; if clear, then we have two integers
.9d35	4c 0e b1	jmp $b10e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9d38					_StringData:
.9d38	4c ed 9b	jmp $9bed			jmp 	StringConcat							; at least one string - don't know both are strings.
.9d3b					_IntegerCode:
.9d3b					AddCode:
.9d3b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9d3e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9d41	10 8b		bpl $9cce			bpl 	AddTopTwoStack
.9d43	20 f4 9c	jsr $9cf4			jsr 	SubTopTwoStack 				; do a physical subtraction
.9d46	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9d49	10 09		bpl $9d54			bpl 	_AddExit
.9d4b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9d4e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d51	20 c9 a6	jsr $a6c9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d54					_AddExit:
.9d54	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; check for -0
.9d57	d0 03		bne $9d5c			bne 	_AddNonZero
.9d59	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9d5c					_AddNonZero:
.9d5c	60		rts				rts
.9d5d					SubInteger:
.9d5d	fa		plx				plx
.9d5e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d61	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d64	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d65	0a		asl a				asl 	a
.9d66	10 05		bpl $9d6d			bpl 	_NotRef
.9d68	48		pha				pha
.9d69	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d6c	68		pla				pla
.9d6d					_NotRef:
.9d6d	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d6e	30 0b		bmi $9d7b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d70	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d73	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d76	f0 06		beq $9d7e			beq 	_IntegerCode 				; if clear, then we have two integers
.9d78	4c 13 b1	jmp $b113			jmp 	FloatingPointSub 							; otherwise at least one float.
.9d7b					_StringData:
.9d7b	4c 59 b5	jmp $b559			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9d7e					_IntegerCode:
.9d7e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9d81	49 80		eor #$80			eor 	#$80
.9d83	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d86	80 b3		bra $9d3b			bra 	AddCode 					; and do the same code as add.
.9d88					AndInteger:
.9d88	fa		plx				plx
.9d89	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d8c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d8f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d90	0a		asl a				asl 	a
.9d91	10 05		bpl $9d98			bpl 	_NotRef
.9d93	48		pha				pha
.9d94	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d97	68		pla				pla
.9d98					_NotRef:
.9d98	0a		asl a				asl 	a
.9d99	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d9b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d9e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9da1	f0 03		beq $9da6			beq 	_IntegerCode 				; if clear, then we have two integers
.9da3	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.9da6					_IntegerCode:
.9da6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9da9	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9dac	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9daf	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9db2	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9db5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9db8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9dbb	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9dbe	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dc1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9dc4	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9dc7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dca	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9dcd	60		rts				rts
.9dce					OraInteger:
.9dce	fa		plx				plx
.9dcf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dd2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9dd5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dd6	0a		asl a				asl 	a
.9dd7	10 05		bpl $9dde			bpl 	_NotRef
.9dd9	48		pha				pha
.9dda	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ddd	68		pla				pla
.9dde					_NotRef:
.9dde	0a		asl a				asl 	a
.9ddf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9de1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9de4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9de7	f0 03		beq $9dec			beq 	_IntegerCode 				; if clear, then we have two integers
.9de9	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.9dec					_IntegerCode:
.9dec	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9def	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9df2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9df5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9df8	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9dfb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dfe	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e01	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9e04	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e07	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e0a	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9e0d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e10	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e13	60		rts				rts
.9e14					EorInteger:
.9e14	fa		plx				plx
.9e15	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e18	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e1b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e1c	0a		asl a				asl 	a
.9e1d	10 05		bpl $9e24			bpl 	_NotRef
.9e1f	48		pha				pha
.9e20	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e23	68		pla				pla
.9e24					_NotRef:
.9e24	0a		asl a				asl 	a
.9e25	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e27	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e2a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e2d	f0 03		beq $9e32			beq 	_IntegerCode 				; if clear, then we have two integers
.9e2f	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.9e32					_IntegerCode:
.9e32	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9e35	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9e38	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e3b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9e3e	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9e41	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e44	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e47	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9e4a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e4d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e50	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9e53	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e56	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e59	60		rts				rts
.9e5a					WordIndirect:
.9e5a	fa		plx				plx
.9e5b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e5e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e61	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e62	0a		asl a				asl 	a
.9e63	10 05		bpl $9e6a			bpl 	_NotRef
.9e65	48		pha				pha
.9e66	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e69	68		pla				pla
.9e6a					_NotRef:
.9e6a	0a		asl a				asl 	a
.9e6b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e6d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e70	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e73	f0 03		beq $9e78			beq 	_IntegerCode 				; if clear, then we have two integers
.9e75	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.9e78					_IntegerCode:
.9e78	20 3b 9d	jsr $9d3b			jsr 	AddCode 					; add the two values
.9e7b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e7d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e80	60		rts				rts
.9e81					ByteIndirect:
.9e81	fa		plx				plx
.9e82	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e85	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e88	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e89	0a		asl a				asl 	a
.9e8a	10 05		bpl $9e91			bpl 	_NotRef
.9e8c	48		pha				pha
.9e8d	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e90	68		pla				pla
.9e91					_NotRef:
.9e91	0a		asl a				asl 	a
.9e92	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e94	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e97	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e9a	f0 03		beq $9e9f			beq 	_IntegerCode 				; if clear, then we have two integers
.9e9c	4c 4f b5	jmp $b54f			jmp 	TypeError 					; anything else, type mismatch.
.9e9f					_IntegerCode:
.9e9f	20 3b 9d	jsr $9d3b			jsr 	AddCode 					; add the two values
.9ea2	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9ea4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ea7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b0b3					ConvertInt16:
.b0b3	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b0b6	8e 10 04	stx $0410			stx 	NSMantissa1
.b0b9	9c 18 04	stz $0418			stz 	NSMantissa2
.b0bc	9c 20 04	stz $0420			stz 	NSMantissa3
.b0bf	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b0c2	a2 00		ldx #$00			ldx 	#0 							; stack level
.b0c4	a9 0a		lda #$0a			lda 	#10 						; base
.b0c6	80 00		bra $b0c8			bra 	ConvertInt32
.b0c8					ConvertInt32:
.b0c8	5a		phy				phy
.b0c9	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b0cb	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b0ce	10 08		bpl $b0d8			bpl 	_CI32NotNeg
.b0d0	48		pha				pha
.b0d1	a9 2d		lda #$2d			lda 	#'-'
.b0d3	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0d6	c8		iny				iny
.b0d7	68		pla				pla
.b0d8					_CI32NotNeg:
.b0d8	20 e6 b0	jsr $b0e6			jsr 	_CI32DivideConvert 			; recursive conversion
.b0db	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b0dd	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0e0	7a		ply				ply
.b0e1	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b0e3	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b0e5	60		rts				rts
.b0e6					_CI32DivideConvert:
.b0e6	e8		inx				inx 								; write to next slot up
.b0e7	20 16 a7	jsr $a716			jsr 	NSMSetByte
.b0ea	ca		dex				dex
.b0eb	20 e8 af	jsr $afe8			jsr 	Int32Divide 				; divide
.b0ee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b0f1	48		pha				pha
.b0f2	20 97 af	jsr $af97			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b0f5	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; is it zero ?
.b0f8	f0 06		beq $b100			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b0fa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b0fd	20 e6 b0	jsr $b0e6			jsr 	_CI32DivideConvert 			; and recusrively call.
.b100					_CI32NoRecurse:
.b100	68		pla				pla 								; remainder
.b101	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b103	90 02		bcc $b107			bcc 	_CI32NotHex
.b105	69 26		adc #$26			adc 	#6+32
.b107					_CI32NotHex:
.b107	69 30		adc #$30			adc 	#48
.b109	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b10c	c8		iny				iny
.b10d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9ea8					PrecedenceLevel:
>9ea8	04					.byte	 4	; $00 <<
>9ea9	02					.byte	 2	; $01 <=
>9eaa	02					.byte	 2	; $02 <>
>9eab	00					.byte	 0	; $03 !!3
>9eac	00					.byte	 0	; $04 ><
>9ead	02					.byte	 2	; $05 >=
>9eae	04					.byte	 4	; $06 >>
>9eaf	00					.byte	 0	; $07 !!7
>9eb0	00					.byte	 0	; $08 !!8
>9eb1	00					.byte	 0	; $09 !!9
>9eb2	00					.byte	 0	; $0a !!10
>9eb3	00					.byte	 0	; $0b !!11
>9eb4	00					.byte	 0	; $0c !!12
>9eb5	00					.byte	 0	; $0d !!13
>9eb6	00					.byte	 0	; $0e !!14
>9eb7	00					.byte	 0	; $0f !!15
>9eb8	00					.byte	 0	; $10 @
>9eb9	00					.byte	 0	; $11 !!17
>9eba	00					.byte	 0	; $12 !!18
>9ebb	00					.byte	 0	; $13 [
>9ebc	04					.byte	 4	; $14 \
>9ebd	00					.byte	 0	; $15 ]
>9ebe	01					.byte	 1	; $16 ^
>9ebf	00					.byte	 0	; $17 _
>9ec0	00					.byte	 0	; $18 `
>9ec1	00					.byte	 0	; $19 !!25
>9ec2	00					.byte	 0	; $1a !!26
>9ec3	00					.byte	 0	; $1b {
>9ec4	01					.byte	 1	; $1c |
>9ec5	00					.byte	 0	; $1d }
>9ec6	00					.byte	 0	; $1e ~
>9ec7	00					.byte	 0	; $1f [7m<7F>[m
>9ec8	00					.byte	 0	; $20
>9ec9	05					.byte	 5	; $21 !
>9eca	00					.byte	 0	; $22 "
>9ecb	00					.byte	 0	; $23 #
>9ecc	05					.byte	 5	; $24 $
>9ecd	04					.byte	 4	; $25 %
>9ece	01					.byte	 1	; $26 &
>9ecf	00					.byte	 0	; $27 '
>9ed0	00					.byte	 0	; $28 (
>9ed1	00					.byte	 0	; $29 )
>9ed2	04					.byte	 4	; $2a *
>9ed3	03					.byte	 3	; $2b +
>9ed4	00					.byte	 0	; $2c ,
>9ed5	03					.byte	 3	; $2d -
>9ed6	00					.byte	 0	; $2e .
>9ed7	04					.byte	 4	; $2f /
>9ed8	00					.byte	 0	; $30 0
>9ed9	00					.byte	 0	; $31 1
>9eda	00					.byte	 0	; $32 2
>9edb	00					.byte	 0	; $33 3
>9edc	00					.byte	 0	; $34 4
>9edd	00					.byte	 0	; $35 5
>9ede	00					.byte	 0	; $36 6
>9edf	00					.byte	 0	; $37 7
>9ee0	00					.byte	 0	; $38 8
>9ee1	00					.byte	 0	; $39 9
>9ee2	00					.byte	 0	; $3a :
>9ee3	00					.byte	 0	; $3b ;
>9ee4	02					.byte	 2	; $3c <
>9ee5	02					.byte	 2	; $3d =
>9ee6	02					.byte	 2	; $3e >
>9ee7	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9ee8					EvaluateExpressionAt0:
.9ee8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9eea					EvaluateExpression:
.9eea	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9eec					EvaluateExpressionAtPrecedence:
.9eec	48		pha				pha 								; save precedence level
.9eed	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm 				; evaluate term into level X.
.9ef0	68		pla				pla 								; restore precedence level.
.9ef1					_EXPRLoop:
.9ef1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9ef3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ef5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ef7	b0 25		bcs $9f1e			bcs 	_EXPRExit
.9ef9	da		phx				phx 								; read the operator precedence
.9efa	aa		tax				tax
.9efb	bd a8 9e	lda $9ea8,x			lda 	PrecedenceLevel,x
.9efe	fa		plx				plx
.9eff	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9f01	f0 1b		beq $9f1e			beq 	_EXPRExit
.9f03	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9f05	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9f07	c5 37		cmp $37				cmp 	zTemp0+1
.9f09	b0 13		bcs $9f1e			bcs		_EXPRExit 					; if current >= operator exit
.9f0b	48		pha				pha 								; save current precedence.
.9f0c	b1 30		lda ($30),y			lda 	(codePtr),y
.9f0e	c8		iny				iny
.9f0f	48		pha				pha
.9f10	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9f12	e8		inx				inx 								; work out the right hand side.
.9f13	20 ec 9e	jsr $9eec			jsr 	EvaluateExpressionAtPrecedence
.9f16	ca		dex				dex
.9f17	68		pla				pla 								; get operator, call the code.
.9f18	20 21 9f	jsr $9f21			jsr 	_EXPRCaller
.9f1b	68		pla				pla 								; restore precedence level
.9f1c	80 d3		bra $9ef1			bra 	_EXPRLoop 					; and go round.
.9f1e					_EXPRExit:
.9f1e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9f20	60		rts				rts
.9f21					_EXPRCaller:
.9f21	da		phx				phx 								; save on stack, first thing is to restore it
.9f22	0a		asl a				asl 	a 							; double so can use vectors into X
.9f23	aa		tax				tax
.9f24	7c 5e 96	jmp ($965e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b10e					FloatingPointAdd:
.b10e	20 b7 b2	jsr $b2b7			jsr 	FloatPrepare 				; prepare for floats
.b111	80 0b		bra $b11e			bra 	FloatAdd
.b113					FloatingPointSub:
.b113	20 b7 b2	jsr $b2b7			jsr 	FloatPrepare 				; prepare for floats
.b116					FloatSubtract:
.b116	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b119	49 80		eor #$80			eor 	#$80
.b11b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b11e					FloatAdd:
.b11e	48		pha				pha
.b11f	5a		phy				phy
.b120	20 c8 b2	jsr $b2c8			jsr 	NSNormalise 				; normalise S[X]
.b123	f0 5c		beq $b181			beq 	_FAReturn1
.b125	e8		inx				inx 								; normalise S[X+1]
.b126	20 c8 b2	jsr $b2c8			jsr 	NSNormalise
.b129	ca		dex				dex
.b12a	c9 00		cmp #$00			cmp 	#0
.b12c	f0 77		beq $b1a5			beq 	_FAExit 					; if so, just return A
.b12e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b131	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b134	f0 1b		beq $b151			beq 	_FAExponentsEqual
.b136	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b139	a8		tay				tay
.b13a	38		sec				sec 								; do a signed comparison of the exponents.
.b13b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b13e	50 02		bvc $b142			bvc 	_FANoSignedChange
.b140	49 80		eor #$80			eor 	#$80
.b142					_FANoSignedChange:
.b142	29 80		and #$80			and 	#$80
.b144	10 03		bpl $b149			bpl 	_FAHaveMax
.b146	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b149					_FAHaveMax:
.b149	20 a8 b1	jsr $b1a8			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b14c	e8		inx				inx
.b14d	20 a8 b1	jsr $b1a8			jsr 	_FAShiftToExponent
.b150	ca		dex				dex
.b151					_FAExponentsEqual:
.b151	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b154	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b157	30 10		bmi $b169			bmi 	_FADifferentSigns
.b159	20 ce 9c	jsr $9cce			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b15c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b15f	10 44		bpl $b1a5			bpl 	_FAExit 					; if no, we are done.
.b161	20 37 a7	jsr $a737			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b164	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b167	80 3c		bra $b1a5			bra 	_FAExit
.b169					_FADifferentSigns:
.b169	20 f4 9c	jsr $9cf4			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b16c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b16f	10 06		bpl $b177			bpl 	_FACheckZero 				; if no, check for -0
.b171	20 c0 a6	jsr $a6c0			jsr 	NSMNegate 					; netate result
.b174	20 c9 a6	jsr $a6c9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b177					_FACheckZero:
.b177	20 44 a7	jsr $a744			jsr 	NSMIsZero	 				; check for -0
.b17a	d0 29		bne $b1a5			bne 	_FAExit
.b17c	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b17f	80 24		bra $b1a5			bra 	_FAExit
.b181					_FAReturn1:
.b181	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b184	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b187	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b18a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b18d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b190	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b193	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b196	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b199	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b19c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b19f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b1a2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1a5					_FAExit:
.b1a5	7a		ply				ply
.b1a6	68		pla				pla
.b1a7	60		rts				rts
.b1a8					_FAShiftToExponent:
.b1a8					_FAShiftToExponent2:
.b1a8	98		tya				tya 								; compare Y to exponent
.b1a9	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b1ac	f0 08		beq $b1b6			beq 	_FASEExit 					; exit if so.
.b1ae	20 37 a7	jsr $a737			jsr 	NSMShiftRight	 			; shift the mantissa right
.b1b1	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b1b4	80 f2		bra $b1a8			bra 	_FAShiftToExponent2
.b1b6					_FASEExit:
.b1b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b1b7					CompareFloat:
.b1b7	20 16 b1	jsr $b116			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b1ba	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b1bd	29 f8		and #$f8			and 	#$F8
.b1bf	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b1c2	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b1c5	f0 09		beq $b1d0			beq 	_FCExit 					; zero, so approximately identical
.b1c7	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b1c9	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b1cc	10 02		bpl $b1d0			bpl 	_FCExit
.b1ce					_FCNegative:
.b1ce	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b1d0					_FCExit:
.b1d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b1d1					FDivideCommand:
.b1d1	fa		plx				plx	 								; restore stack position
.b1d2	20 b7 b2	jsr $b2b7			jsr 	FloatPrepare 				; prepare for floats
.b1d5					FloatDivide:
.b1d5	48		pha				pha
.b1d6	e8		inx				inx
.b1d7	20 c8 b2	jsr $b2c8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1da	ca		dex				dex
.b1db	c9 00		cmp #$00			cmp 	#0
.b1dd	f0 20		beq $b1ff			beq 	_FDZero
.b1df	20 c8 b2	jsr $b2c8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1e2	f0 19		beq $b1fd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1e4	20 0a b0	jsr $b00a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b1e7	20 97 af	jsr $af97			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b1ea	20 c8 b2	jsr $b2c8			jsr		NSNormalise 				; renormalise
.b1ed	20 a5 b0	jsr $b0a5			jsr 	CalculateSign 				; calculate result sign
.b1f0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b1f3	38		sec				sec
.b1f4	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b1f7	38		sec				sec
.b1f8	e9 1e		sbc #$1e			sbc 	#30
.b1fa	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1fd					_FDExit:
.b1fd	68		pla				pla
.b1fe	60		rts				rts
.b1ff					_FDZero:
.b1ff	a9 03		lda #$03		lda	#3
.b201	4c d9 9a	jmp $9ad9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b204					FloatFractionalPart:
.b204	5a		phy				phy
.b205	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b208	29 7f		and #$7f			and 	#$7F
.b20a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b20d	20 c8 b2	jsr $b2c8			jsr 	NSNormalise
.b210	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b213	38		sec				sec
.b214	e9 e0		sbc #$e0			sbc 	#$E0
.b216	90 31		bcc $b249			bcc 	_FFPExit 					; already fractional
.b218	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b21a	b0 2a		bcs $b246			bcs 	_FFPZero
.b21c	a8		tay				tay 								; put count to do in Y
.b21d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b220	20 4b b2	jsr $b24b			jsr 	_FFPPartial
.b223	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b226	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b229	20 4b b2	jsr $b24b			jsr 	_FFPPartial
.b22c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b22f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b232	20 4b b2	jsr $b24b			jsr 	_FFPPartial
.b235	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b238	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b23b	20 4b b2	jsr $b24b			jsr 	_FFPPartial
.b23e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b241	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; zeroed check.
.b244	d0 03		bne $b249			bne 	_FFPExit
.b246					_FFPZero:
.b246	20 14 a7	jsr $a714			jsr 	NSMSetZero
.b249					_FFPExit:
.b249	7a		ply				ply
.b24a	60		rts				rts
.b24b					_FFPPartial:
.b24b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b24d	f0 17		beq $b266			beq 	_FFFPPExit
.b24f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b251	b0 0c		bcs $b25f			bcs 	_FFFPPWholeByte
.b253	5a		phy				phy
.b254					_FFFPPLeft:
.b254	0a		asl a				asl 	a
.b255	88		dey				dey
.b256	d0 fc		bne $b254			bne 	_FFFPPLeft
.b258	7a		ply				ply
.b259					_FFFPPRight:
.b259	4a		lsr a				lsr 	a
.b25a	88		dey				dey
.b25b	d0 fc		bne $b259			bne 	_FFFPPRight
.b25d	80 07		bra $b266			bra 	_FFFPPExit
.b25f					_FFFPPWholeByte:
.b25f	98		tya				tya 								; subtract 8 from count
.b260	38		sec				sec
.b261	e9 08		sbc #$08			sbc 	#8
.b263	a8		tay				tay
.b264	a9 00		lda #$00			lda 	#0 							; and clear all
.b266					_FFFPPExit:
.b266	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b267					FloatIntegerPart:
.b267	48		pha				pha
.b268	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b26b	f0 1f		beq $b28c			beq 	_FIPExit 					; if so do nothing
.b26d	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; is it zero ?
.b270	f0 17		beq $b289			beq 	_FIPZero 					; if so return zero.
.b272	20 c8 b2	jsr $b2c8			jsr 	NSNormalise 				; normalise
.b275	f0 12		beq $b289			beq 	_FIPZero 					; normalised to zero, exit zero
.b277					_FIPShift:
.b277	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b27a	10 08		bpl $b284			bpl 	_FIPCheckZero
.b27c	20 37 a7	jsr $a737			jsr 	NSMShiftRight 				; shift mantissa right
.b27f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b282	80 f3		bra $b277			bra 	_FIPShift
.b284					_FIPCheckZero:
.b284	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; avoid -0 problem
.b287	d0 03		bne $b28c			bne 	_FIPExit 					; set to zero if mantissa zero.
.b289					_FIPZero:
.b289	20 14 a7	jsr $a714			jsr 	NSMSetZero
.b28c					_FIPExit:
.b28c	68		pla				pla
.b28d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b28e					FloatingPointMultiply:
.b28e	20 b7 b2	jsr $b2b7			jsr 	FloatPrepare 				; prepare for floats
.b291					FloatMultiply:
.b291	48		pha				pha
.b292	20 c8 b2	jsr $b2c8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b295	f0 1b		beq $b2b2			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b297	e8		inx				inx
.b298	20 c8 b2	jsr $b2c8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b29b	ca		dex				dex
.b29c	c9 00		cmp #$00			cmp 	#0
.b29e	f0 0f		beq $b2af			beq 	_FDSetZero
.b2a0	20 60 b0	jsr $b060			jsr 	MultiplyShort 				; calculate the result.
.b2a3	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b2a6	18		clc				clc
.b2a7	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b2aa	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b2ad	80 03		bra $b2b2			bra 	_FDExit
.b2af					_FDSetZero:
.b2af	20 14 a7	jsr $a714			jsr 	NSMSetZero 					; return 0
.b2b2					_FDExit:
.b2b2	20 c8 b2	jsr $b2c8			jsr 	NSNormalise 				; normalise the result
.b2b5	68		pla				pla
.b2b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b2b7					FloatPrepare:
.b2b7	20 fa 9f	jsr $9ffa			jsr 	DereferenceTopTwo 			; dereference the top two values
.b2ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b2bd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b2c0	29 10		and #$10			and 	#NSBIsString
.b2c2	d0 01		bne $b2c5			bne 	_FDType
.b2c4	60		rts				rts
.b2c5					_FDType:
.b2c5	4c 4f b5	jmp $b54f			jmp 	TypeError
.b2c8					NSNormalise:
.b2c8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b2cb	29 80		and #$80			and 	#$80
.b2cd	09 08		ora #$08			ora 	#NSTFloat
.b2cf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2d2	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; if zero exit
.b2d5	d0 09		bne $b2e0			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b2d7	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b2da	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b2dd	a9 00		lda #$00			lda 	#0 							; set Z flag
.b2df	60		rts				rts
.b2e0					_NSNormaliseOptimise:
.b2e0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b2e3	d0 22		bne $b307			bne 	_NSNormaliseLoop
.b2e5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b2e8	30 1d		bmi $b307			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b2ea	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b2ed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2f0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b2f3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b2f6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2f9	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b2fc	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b2ff	38		sec				sec
.b300	e9 08		sbc #$08			sbc 	#8
.b302	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b305	80 d9		bra $b2e0			bra 	_NSNormaliseOptimise
.b307					_NSNormaliseLoop:
.b307	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b30a	70 08		bvs $b314			bvs 	_NSNExit 					; exit if so with Z flag clear
.b30c	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; shift mantissa left
.b30f	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b312	80 f3		bra $b307			bra 	_NSNormaliseLoop
.b314					_NSNExit:
.b314	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b316	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f27					AssignNumber:
.9f27	5a		phy				phy
.9f28	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f2b	85 36		sta $36				sta 	zTemp0
.9f2d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f30	85 37		sta $37				sta 	zTemp0+1
.9f32	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9f35	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f37	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f3a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f3c	c9 08		cmp #$08			cmp 	#NSTFloat
.9f3e	f0 2a		beq $9f6a			beq 	_ANFloat
.9f40	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9f43	f0 05		beq $9f4a			beq		_ANNotFloat
.9f45	e8		inx				inx
.9f46	20 67 b2	jsr $b267			jsr 	FloatIntegerPart 			; make it an integer
.9f49	ca		dex				dex
.9f4a					_ANNotFloat:
.9f4a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f4d	29 03		and #$03			and 	#3
.9f4f	d0 05		bne $9f56			bne 	_ANByteWord
.9f51	20 76 9f	jsr $9f76			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f54	80 1e		bra $9f74			bra 	_ANExit
.9f56					_ANByteWord:
.9f56	48		pha				pha 								; save count
.9f57	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9f5a	92 36		sta ($36)			sta 	(zTemp0)
.9f5c	68		pla				pla
.9f5d	c9 01		cmp #$01			cmp	 	#1
.9f5f	f0 13		beq $9f74			beq 	_ANExit
.9f61	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9f64	a0 01		ldy #$01			ldy 	#1
.9f66	91 36		sta ($36),y			sta 	(zTemp0),y
.9f68	80 0a		bra $9f74			bra 	_ANExit
.9f6a					_ANFloat:
.9f6a	20 76 9f	jsr $9f76			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f6d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f70	a0 04		ldy #$04			ldy 	#4
.9f72	91 36		sta ($36),y			sta 	(zTemp0),y
.9f74					_ANExit:
.9f74	7a		ply				ply
.9f75	60		rts				rts
.9f76					_ANCopy4PackSign:
.9f76	a0 03		ldy #$03			ldy 	#3
.9f78	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9f7b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f7d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9f80	91 36		sta ($36),y			sta 	(zTemp0),y
.9f82	88		dey				dey
.9f83	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9f86	91 36		sta ($36),y			sta 	(zTemp0),y
.9f88	88		dey				dey
.9f89	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f8c	91 36		sta ($36),y			sta 	(zTemp0),y
.9f8e	88		dey				dey
.9f8f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f92	91 36		sta ($36),y			sta 	(zTemp0),y
.9f94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f95					AssignString:
.9f95	5a		phy				phy
.9f96	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f99	85 38		sta $38				sta 	zTemp1
.9f9b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f9e	85 39		sta $39				sta 	zTemp1+1
.9fa0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fa3	85 36		sta $36				sta 	zTemp0
.9fa5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fa8	85 37		sta $37				sta 	zTemp0+1
.9faa	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9fac	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fae	f0 23		beq $9fd3			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9fb0	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9fb1	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9fb3	e9 02		sbc #$02			sbc 	#2
.9fb5	85 3c		sta $3c				sta 	zsTemp
.9fb7	a0 01		ldy #$01			ldy 	#1
.9fb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fbb	e9 00		sbc #$00			sbc 	#0
.9fbd	85 3d		sta $3d				sta 	zsTemp+1
.9fbf	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9fc1					_ASGetLength:
.9fc1	c8		iny				iny
.9fc2	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fc4	d0 fb		bne $9fc1			bne 	_ASGetLength
.9fc6	98		tya				tya 								; is this length <= current length
.9fc7	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9fc9	90 20		bcc $9feb			bcc 	_ASCopyString
.9fcb	f0 1e		beq $9feb			beq 	_ASCopyString
.9fcd	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9fcf	a0 01		ldy #$01			ldy 	#1
.9fd1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fd3					_ASNewStringRequired:
.9fd3	e8		inx				inx 								; concrete the new string.
.9fd4	20 47 b8	jsr $b847			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9fd7	ca		dex				dex
.9fd8	18		clc				clc
.9fd9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fdc	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fde	92 36		sta ($36)			sta 	(zTemp0)
.9fe0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9fe3	69 00		adc #$00			adc 	#0
.9fe5	a0 01		ldy #$01			ldy 	#1
.9fe7	91 36		sta ($36),y			sta 	(zTemp0),y
.9fe9	80 0d		bra $9ff8			bra 	_ASExit
.9feb					_ASCopyString:
.9feb	a0 00		ldy #$00			ldy 	#0
.9fed					_ASCopyLoop:
.9fed	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fef	c8		iny				iny
.9ff0	c8		iny				iny
.9ff1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ff3	88		dey				dey
.9ff4	c9 00		cmp #$00			cmp 	#0
.9ff6	d0 f5		bne $9fed			bne 	_ASCopyLoop
.9ff8					_ASExit:
.9ff8	7a		ply				ply
.9ff9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9ffa					DereferenceTopTwo:
.9ffa	e8		inx				inx
.9ffb	20 ff 9f	jsr $9fff			jsr 	Dereference 				; deref x+1
.9ffe	ca		dex				dex  								; falls through to deref x
.9fff					Dereference:
.9fff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.a002	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.a004	f0 57		beq $a05d			beq 	_DRFExit 					; not a reference
.a006	5a		phy				phy
.a007	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.a00a	85 36		sta $36				sta 	zTemp0
.a00c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a00f	85 37		sta $37				sta 	zTemp0+1
.a011	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.a014	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a016	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a019	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.a01c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a01e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a020	f0 0f		beq $a031			beq 	_DRFDereferenceTwo
.a022	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a024	f0 39		beq $a05f			beq 	_DRFFull
.a026	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a029	29 03		and #$03			and 	#3
.a02b	f0 32		beq $a05f			beq 	_DRFFull 					; the whole word
.a02d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a02f	f0 07		beq $a038			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a031					_DRFDereferenceTwo:
.a031	a0 01		ldy #$01			ldy 	#1
.a033	b1 36		lda ($36),y			lda 	(zTemp0),y
.a035	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a038					_DRFClear23:
.a038	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a03b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a03e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.a041	29 18		and #$18			and 	#NSBTypeMask
.a043	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a046	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a048	d0 12		bne $a05c			bne 	_DRFNotString
.a04a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.a04d	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a050	d0 0a		bne $a05c			bne 	_DRFNotString
.a052	a9 5e		lda #$5e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a054	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.a057	a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a059	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.a05c					_DRFNotString
.a05c	7a		ply				ply 								; restore Y and exit
.a05d					_DRFExit:
.a05d	60		rts				rts
.a05e					_DRFNullString:
>a05e	00						.byte 	0
.a05f					_DRFFull:
.a05f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a061	b1 36		lda ($36),y			lda 	(zTemp0),y
.a063	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a066	c8		iny				iny
.a067	b1 36		lda ($36),y			lda 	(zTemp0),y
.a069	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a06c	c8		iny				iny
.a06d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a06f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a072	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.a075	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.a078	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a07a	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.a07d	f0 06		beq $a085			beq 	_DRFNoExponent
.a07f	c8		iny				iny 								; if not, read the exponent as well.
.a080	b1 36		lda ($36),y			lda 	(zTemp0),y
.a082	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a085					_DRFNoExponent:
.a085	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a088	10 0d		bpl $a097			bpl 	_DRFExit2 					; if not, then exit.
.a08a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a08c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a08f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.a092	09 80		ora #$80			ora 	#NSBIsNegative
.a094	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a097					_DRFExit2:
.a097	7a		ply				ply
.a098	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.a099					EncodeNumberStart:
.a099	38		sec				sec
.a09a	80 01		bra $a09d			bra 	EncodeNumberContinue+1
.a09c					EncodeNumberContinue:
.a09c	18		clc				clc
.a09d					EncodeNumber:
.a09d	08		php				php 								; save reset.
.a09e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a0a0	f0 12		beq $a0b4			beq 	_ENIsOkay
.a0a2	c9 30		cmp #$30			cmp 	#"0"
.a0a4	90 04		bcc $a0aa			bcc 	_ENBadNumber
.a0a6	c9 3a		cmp #$3a			cmp 	#"9"+1
.a0a8	90 0a		bcc $a0b4			bcc 	_ENIsOkay
.a0aa					_ENBadNumber:
.a0aa	28		plp				plp 								; throw saved reset
.a0ab	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.a0ae	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0b0	f0 7e		beq $a130			beq 	_ENConstructFinal
.a0b2					_ENFail:
.a0b2	18		clc				clc 								; not allowed
.a0b3	60		rts				rts
.a0b4					_ENIsOkay:
.a0b4	28		plp				plp 								; are we restarting
.a0b5	90 15		bcc $a0cc			bcc 	_ENNoRestart
.a0b7					_ENStartEncode:
.a0b7	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a0b9	f0 0c		beq $a0c7			beq 	_ENFirstDP
.a0bb	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a0bd	20 16 a7	jsr $a716			jsr 	NSMSetByte
.a0c0	a9 01		lda #$01			lda 	#ESTA_Low
.a0c2					_ENExitChange:
.a0c2	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a0c5	38		sec				sec
.a0c6	60		rts				rts
.a0c7					_ENFirstDP:
.a0c7	20 14 a7	jsr $a714			jsr 	NSMSetZero 					; clear integer part
.a0ca	80 3f		bra $a10b			bra 	_ESTASwitchFloat			; go straight to float and exi
.a0cc					_ENNoRestart:
.a0cc	48		pha				pha 								; save on stack.
.a0cd	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a0d0	c9 01		cmp #$01			cmp 	#ESTA_Low
.a0d2	f0 09		beq $a0dd			beq  	_ESTALowState
.a0d4	c9 02		cmp #$02			cmp 	#ESTA_High
.a0d6	f0 29		beq $a101			beq 	_ESTAHighState
.a0d8	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0da	f0 3b		beq $a117			beq 	_ESTADecimalState
>a0dc	db						.byte 	$DB 						; causes a break in the emulator
.a0dd					_ESTALowState:
.a0dd	68		pla				pla 								; get value back
.a0de	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a0e0	f0 29		beq $a10b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a0e2	29 0f		and #$0f			and 	#15 						; make digit
.a0e4	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a0e7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a0ea	0a		asl a				asl 	a
.a0eb	0a		asl a				asl 	a
.a0ec	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0ef	0a		asl a				asl 	a
.a0f0	6d 86 04	adc $0486			adc 	DigitTemp
.a0f3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0f6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a0f8	90 05		bcc $a0ff			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0fa	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0fc	8d 85 04	sta $0485			sta 	EncodeState
.a0ff					_ESTANoSwitch:
.a0ff	38		sec				sec
.a100	60		rts				rts
.a101					_ESTAHighState:
.a101	68		pla				pla 								; get value back
.a102	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a104	f0 05		beq $a10b			beq 	_ESTASwitchFloat
.a106	20 6a a1	jsr $a16a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a109	38		sec				sec
.a10a	60		rts				rts
.a10b					_ESTASwitchFloat:
.a10b	9c 87 04	stz $0487			stz 	DecimalCount
.a10e	e8		inx				inx 								; zero the decimal additive.
.a10f	20 14 a7	jsr $a714			jsr 	NSMSetZero
.a112	ca		dex				dex
.a113	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a115	80 ab		bra $a0c2			bra 	_ENExitChange
.a117					_ESTADecimalState:
.a117	68		pla				pla 								; digit.
.a118	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a11a	f0 96		beq $a0b2			beq 	_ENFail
.a11c	e8		inx				inx 								; put digit into fractional part of X+1
.a11d	20 6a a1	jsr $a16a			jsr 	ESTAShiftDigitIntoMantissa
.a120	ca		dex				dex
.a121	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a124	ad 87 04	lda $0487			lda 	DecimalCount
.a127	c9 0b		cmp #$0b			cmp 	#11
.a129	f0 02		beq $a12d			beq 	_ESTADSFail
.a12b	38		sec				sec
.a12c	60		rts				rts
.a12d					_ESTADSFail:
.a12d	4c 4a b5	jmp $b54a			jmp 	RangeError
.a130					_ENConstructFinal:
.a130	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a133	f0 33		beq $a168			beq 	_ENCFExit 					; no decimals
.a135	5a		phy				phy
.a136	0a		asl a				asl 	a 							; x 4 and CLC
.a137	0a		asl a				asl 	a
.a138	6d 87 04	adc $0487			adc 	DecimalCount
.a13b	a8		tay				tay
.a13c	b9 09 b5	lda $b509,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a13f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a142	b9 0a b5	lda $b50a,y			lda 	DecimalScalarTable-5+1,y
.a145	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a148	b9 0b b5	lda $b50b,y			lda 	DecimalScalarTable-5+2,y
.a14b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a14e	b9 0c b5	lda $b50c,y			lda 	DecimalScalarTable-5+3,y
.a151	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a154	b9 0d b5	lda $b50d,y			lda 	DecimalScalarTable-5+4,y
.a157	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a15a	a9 08		lda #$08			lda 	#NSTFloat
.a15c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a15f	7a		ply				ply
.a160	e8		inx				inx 								; multiply decimal const by decimal scalar
.a161	20 91 b2	jsr $b291			jsr 	FloatMultiply
.a164	ca		dex				dex
.a165	20 1e b1	jsr $b11e			jsr 	FloatAdd 					; add to integer part.
.a168					_ENCFExit:
.a168	18		clc				clc 								; reject the digit.
.a169	60		rts				rts
.a16a					ESTAShiftDigitIntoMantissa:
.a16a	29 0f		and #$0f			and 	#15 						; save digit
.a16c	48		pha				pha
.a16d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a170	48		pha				pha
.a171	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a174	48		pha				pha
.a175	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a178	48		pha				pha
.a179	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a17c	48		pha				pha
.a17d	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; x 2
.a180	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; x 4
.a183	18		clc				clc 								; pop mantissa and add
.a184	68		pla				pla
.a185	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a188	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a18b	68		pla				pla
.a18c	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a18f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a192	68		pla				pla
.a193	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a196	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a199	68		pla				pla
.a19a	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a19d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a1a0	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; x 10
.a1a3	68		pla				pla 								; add digit
.a1a4	18		clc				clc
.a1a5	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a1a8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1ab	90 0d		bcc $a1ba			bcc 	_ESTASDExit
.a1ad	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a1b0	d0 08		bne $a1ba			bne 	_ESTASDExit
.a1b2	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a1b5	d0 03		bne $a1ba			bne 	_ESTASDExit
.a1b7	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a1ba					_ESTASDExit:
.a1ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a1bb					EvaluateTerm:
.a1bb	b1 30		lda ($30),y			lda 	(codePtr),y
.a1bd	30 18		bmi $a1d7			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a1bf	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a1c1	b0 6f		bcs $a232			bcs 	_ETVariable
.a1c3	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a1c5	90 6e		bcc $a235			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a1c7	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1c9	b0 6a		bcs $a235			bcs 	_ETPuncUnary
.a1cb	20 99 a0	jsr $a099			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a1ce					_ETNumber:
.a1ce	c8		iny				iny 								; keep encoding until we have the numbers
.a1cf	b1 30		lda ($30),y			lda 	(codePtr),y
.a1d1	20 9c a0	jsr $a09c			jsr 	EncodeNumberContinue
.a1d4	b0 f8		bcs $a1ce			bcs 	_ETNumber 					; go back if accepted.
.a1d6	60		rts				rts
.a1d7					_ETCheckUnary:
.a1d7	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a1d9	f0 41		beq $a21c			beq 	_ETString
.a1db	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a1dd	f0 12		beq $a1f1			beq 	_ETHexConstant
.a1df	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a1e1	90 0b		bcc $a1ee			bcc 	_ETSyntaxError
.a1e3	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a1e5	b0 07		bcs $a1ee			bcs 	_ETSyntaxError
.a1e7	da		phx				phx 								; push X on the stack
.a1e8	0a		asl a				asl 	a 							; put vector x 2 into X
.a1e9	aa		tax				tax
.a1ea	c8		iny				iny 								; consume unary function token
.a1eb	7c de 96	jmp ($96de,x)			jmp 	(VectorSet0,x) 				; and do it.
.a1ee					_ETSyntaxError:
.a1ee	4c 45 b5	jmp $b545			jmp 	SyntaxError
.a1f1					_ETHexConstant:
.a1f1	c8		iny				iny 								; skip #
.a1f2	c8		iny				iny 								; skip count
.a1f3	20 14 a7	jsr $a714			jsr 	NSMSetZero 					; clear result
.a1f6					_ETHLoop:
.a1f6	b1 30		lda ($30),y			lda 	(codePtr),y
.a1f8	c8		iny				iny 								; and consume
.a1f9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a1fb	f0 1e		beq $a21b			beq 	_ETHExit
.a1fd	48		pha				pha 								; save on stack.
.a1fe	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; x 2
.a201	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; x 4
.a204	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; x 8
.a207	20 29 a7	jsr $a729			jsr 	NSMShiftLeft 				; x 16
.a20a	68		pla				pla 								; ASCII
.a20b	c9 41		cmp #$41			cmp 	#'A'
.a20d	90 02		bcc $a211			bcc 	_ETHNotChar
.a20f	e9 07		sbc #$07			sbc 	#7
.a211					_ETHNotChar:
.a211	29 0f		and #$0f			and 	#15 						; digit now
.a213	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a216	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a219	80 db		bra $a1f6			bra 	_ETHLoop 					; go round.
.a21b					_ETHExit:
.a21b	60		rts				rts
.a21c					_ETString:
.a21c	c8		iny				iny 								; look at length
.a21d	b1 30		lda ($30),y			lda 	(codePtr),y
.a21f	48		pha				pha
.a220	c8		iny				iny 								; first character
.a221	20 5e a7	jsr $a75e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a224	68		pla				pla 								; restore count and save
.a225	85 36		sta $36				sta 	zTemp0
.a227	98		tya				tya 								; add length to Y to skip it.
.a228	18		clc				clc
.a229	65 36		adc $36				adc 	zTemp0
.a22b	a8		tay				tay
.a22c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a22e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a231	60		rts				rts
.a232					_ETVariable:
.a232	4c 8c a2	jmp $a28c			jmp 	VariableHandler
.a235					_ETPuncUnary:
.a235	c8		iny				iny 								; consume the unary character
.a236	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a238	f0 2d		beq $a267			beq 	_ETUnaryNegate
.a23a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a23c	f0 39		beq $a277			beq 	_ETDereference
.a23e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a240	f0 43		beq $a285			beq 	_ETParenthesis
.a242	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a244	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a246	f0 06		beq $a24e			beq 	_ETIndirection
.a248	e6 36		inc $36				inc 	zTemp0
.a24a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a24c	d0 a0		bne $a1ee			bne 	_ETSyntaxError
.a24e					_ETIndirection:
.a24e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a250	1a		inc a				inc 	a
.a251	48		pha				pha
.a252	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm				; evaluate the term
.a255	20 ff 9f	jsr $9fff			jsr 	Dereference 				; dereference it.
.a258	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a25b	d0 07		bne $a264			bne 	_ETTypeMismatch
.a25d	68		pla				pla 								; indirection 1-2
.a25e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a260	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a263	60		rts				rts
.a264					_ETTypeMismatch:
.a264	4c 4f b5	jmp $b54f			jmp 	TypeError
.a267					_ETUnaryNegate:
.a267	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm				; evaluate the term
.a26a	20 ff 9f	jsr $9fff			jsr 	Dereference 				; dereference it.
.a26d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a270	29 10		and #$10			and 	#NSTString
.a272	d0 f0		bne $a264			bne 	_ETTypeMismatch
.a274	4c c0 a6	jmp $a6c0			jmp 	NSMNegate  					; just toggles the sign bit.
.a277					_ETDereference:
.a277	20 bb a1	jsr $a1bb			jsr 	EvaluateTerm				; evaluate the term
.a27a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a27d	29 20		and #$20			and 	#NSBIsReference
.a27f	f0 e3		beq $a264			beq 	_ETTypeMismatch
.a281	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a284	60		rts				rts
.a285					_ETParenthesis:
.a285	20 ea 9e	jsr $9eea			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a288	20 57 af	jsr $af57			jsr 	CheckRightBracket 			; check for )
.a28b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a28c					VariableHandler:
.a28c	b1 30		lda ($30),y			lda 	(codePtr),y
.a28e	18		clc				clc
.a28f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a291	85 37		sta $37				sta 	zTemp0+1
.a293	c8		iny				iny
.a294	b1 30		lda ($30),y			lda 	(codePtr),y
.a296	85 36		sta $36				sta 	zTemp0
.a298	c8		iny				iny
.a299	18		clc				clc									; copy variable address+3 to mantissa
.a29a	69 03		adc #$03			adc 	#3
.a29c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a29f	a5 37		lda $37				lda 	zTemp0+1
.a2a1	69 00		adc #$00			adc 	#0
.a2a3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2a6	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a2a9	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a2ac	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a2af	5a		phy				phy
.a2b0	a0 02		ldy #$02			ldy 	#2 							; read type
.a2b2	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2b4	7a		ply				ply
.a2b5	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a2b7	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a2b9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2bc	29 04		and #$04			and 	#NSBIsArray
.a2be	d0 01		bne $a2c1			bne 	_VHArray
.a2c0	60		rts				rts
.a2c1					_VHArray:
.a2c1	e8		inx				inx
.a2c2	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a2c5	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a2c7	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2ca	b1 30		lda ($30),y			lda 	(codePtr),y
.a2cc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a2ce	d0 06		bne $a2d6			bne 	_VHNoSecondIndex
.a2d0	c8		iny				iny 								; skip the comma
.a2d1	e8		inx				inx
.a2d2	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a2d5	ca		dex				dex
.a2d6					_VHNoSecondIndex:
.a2d6	ca		dex				dex 								; set X back.
.a2d7	20 57 af	jsr $af57			jsr 	CheckRightBracket 			; and check the right bracket.
.a2da	5a		phy				phy 								; save position
.a2db	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a2dd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2df	f0 6b		beq $a34c			beq 	_VHBadIndex
.a2e1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a2e4	85 3e		sta $3e				sta 	zaTemp
.a2e6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2e9	85 3f		sta $3f				sta 	zaTemp+1
.a2eb	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a2ed	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2ef	f0 02		beq $a2f3			beq 	_VHHas2Mask
.a2f1	a9 ff		lda #$ff			lda 	#$FF
.a2f3					_VHHas2Mask:
.a2f3	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a2f6	f0 54		beq $a34c			beq 	_VHBadIndex
.a2f8	0a		asl a				asl 	a 							; carry will be set if a second index
.a2f9	90 09		bcc $a304			bcc 	_VHCheckFirstIndex
.a2fb	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a2fd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2ff	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a302	90 48		bcc $a34c			bcc 	_VHBadIndex
.a304					_VHCheckFirstIndex:
.a304	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a306	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a308	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a30b	90 3f		bcc $a34c			bcc 	_VHBadIndex
.a30d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a30f	64 37		stz $37				stz 	zTemp0+1
.a311	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a314	30 0f		bmi $a325			bmi 	_VHNoMultiply
.a316	da		phx				phx
.a317	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a31a	48		pha				pha
.a31b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a31d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a31f	1a		inc a				inc 	a 							; add 1 for zero base
.a320	fa		plx				plx
.a321	20 e1 b3	jsr $b3e1			jsr 	Multiply8x8 				; calculate -> Z0
.a324	fa		plx				plx
.a325					_VHNoMultiply:
.a325	18		clc				clc
.a326	a5 36		lda $36				lda 	zTemp0
.a328	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a32b	85 36		sta $36				sta 	zTemp0
.a32d	a5 37		lda $37				lda 	zTemp0+1
.a32f	69 00		adc #$00			adc 	#0
.a331	85 37		sta $37				sta 	zTemp0+1
.a333	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a336	20 d0 8d	jsr $8dd0			jsr 	ScaleByBaseType
.a339	18		clc				clc
.a33a	b2 3e		lda ($3e)			lda 	(zaTemp)
.a33c	65 36		adc $36				adc 	zTemp0
.a33e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a341	a0 01		ldy #$01			ldy 	#1
.a343	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a345	65 37		adc $37				adc 	zTemp0+1
.a347	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a34a	7a		ply				ply 								; restore position
.a34b	60		rts				rts
.a34c					_VHBadIndex:
.a34c	a9 17		lda #$17		lda	#23
.a34e	4c d9 9a	jmp $9ad9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b317					AbsUnary:
.b317	fa		plx				plx 								; restore stack pos
.b318	20 54 a6	jsr $a654			jsr 	EvaluateNumber 				; get a float or int
.b31b	20 57 af	jsr $af57			jsr 	CheckRightBracket
.b31e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b321	29 7f		and #$7f			and 	#$7F
.b323	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b326	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a351					AllocUnary:
.a351	fa		plx				plx 								; restore stack pos
.a352	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger		; get bytes required.
.a355	20 57 af	jsr $af57			jsr 	CheckRightBracket
.a358	da		phx				phx 								; save X/Y
.a359	5a		phy				phy
.a35a	8a		txa				txa 								; copy X into Y
.a35b	a8		tay				tay
.a35c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a35f	aa		tax				tax
.a360	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a363	20 70 a3	jsr $a370			jsr 	AllocateXABytes 			; allocate memory
.a366	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a369	8a		txa				txa
.a36a	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a36d	7a		ply				ply
.a36e	fa		plx				plx
.a36f	60		rts				rts
.a370					AllocateXABytes:
.a370	5a		phy				phy
.a371	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a374	84 36		sty $36				sty 	zTemp0
.a376	5a		phy				phy
.a377	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a37a	84 37		sty $37				sty 	zTemp0+1
.a37c	5a		phy				phy
.a37d	18		clc				clc 								; add to low memory pointer
.a37e	6d 8c 04	adc $048c			adc 	lowMemPtr
.a381	8d 8c 04	sta $048c			sta 	lowMemPtr
.a384	8a		txa				txa
.a385	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a388	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a38b	b0 2f		bcs $a3bc			bcs 	CISSMemory
.a38d	20 ae a3	jsr $a3ae			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a390					_ClearMemory:
.a390	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a393	c5 36		cmp $36				cmp 	zTemp0
.a395	d0 07		bne $a39e			bne 	_CMClearNext
.a397	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a39a	c5 37		cmp $37				cmp 	zTemp0+1
.a39c	f0 0c		beq $a3aa			beq 	_CMExit
.a39e					_CMClearNext:
.a39e	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a3a0	92 36		sta ($36)			sta 	(zTemp0)
.a3a2	e6 36		inc $36				inc 	zTemp0
.a3a4	d0 ea		bne $a390			bne 	_ClearMemory
.a3a6	e6 37		inc $37				inc		zTemp0+1
.a3a8	80 e6		bra $a390			bra 	_ClearMemory
.a3aa					_CMExit:
.a3aa	fa		plx				plx
.a3ab	68		pla				pla
.a3ac	7a		ply				ply
.a3ad	60		rts				rts
.a3ae					CheckIdentifierStringSpace:
.a3ae	48		pha				pha
.a3af	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a3b2	18		clc				clc
.a3b3	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a3b5	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a3b8	b0 02		bcs $a3bc			bcs 	CISSMemory
.a3ba	68		pla				pla
.a3bb	60		rts				rts
.a3bc					CISSMemory:
.a3bc	a9 06		lda #$06		lda	#6
.a3be	4c d9 9a	jmp $9ad9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b327					AscUnary:
.b327	fa		plx				plx 								; restore stack pos
.b328	20 5f a6	jsr $a65f			jsr 	EvaluateString 				; get a string
.b32b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b32d	20 16 a7	jsr $a716			jsr 	NSMSetByte
.b330	20 57 af	jsr $af57			jsr 	CheckRightBracket
.b333	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b334					FracUnary:
.b334	fa		plx				plx 								; restore stack pos
.b335	20 54 a6	jsr $a654			jsr 	EvaluateNumber 				; get a float or int
.b338	20 57 af	jsr $af57			jsr 	CheckRightBracket
.b33b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b33e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b340	f0 04		beq $b346			beq 	_IUZero
.b342	20 04 b2	jsr $b204			jsr 	FloatFractionalPart
.b345	60		rts				rts
.b346					_IUZero:
.b346	20 14 a7	jsr $a714			jsr 	NSMSetZero
.b349	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b34a					IntUnary:
.b34a	fa		plx				plx 								; restore stack pos
.b34b	20 54 a6	jsr $a654			jsr 	EvaluateNumber 				; get a float or int
.b34e	20 57 af	jsr $af57			jsr 	CheckRightBracket
.b351	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b354	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b356	f0 03		beq $b35b			beq 	_IUExit
.b358	20 67 b2	jsr $b267			jsr 	FloatIntegerPart
.b35b					_IUExit:
.b35b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b35c					LenUnary:
.b35c	fa		plx				plx 								; restore stack pos
.b35d	20 5f a6	jsr $a65f			jsr 	EvaluateString 				; get a string
.b360	5a		phy				phy
.b361	a0 00		ldy #$00			ldy 	#0 							; find length
.b363					_LenFind:
.b363	b1 36		lda ($36),y			lda 	(zTemp0),y
.b365	f0 06		beq $b36d			beq 	_LenExit
.b367	c8		iny				iny
.b368	d0 f9		bne $b363			bne 	_LenFind
.b36a	4c 4a b5	jmp $b54a			jmp 	RangeError 					; string > 255
.b36d					_LenExit:
.b36d	98		tya				tya
.b36e	20 16 a7	jsr $a716			jsr 	NSMSetByte
.b371	7a		ply				ply
.b372	20 57 af	jsr $af57			jsr 	CheckRightBracket
.b375	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a3c1					Unary_Min:
.a3c1	a9 01		lda #$01			lda 	#1
.a3c3	80 02		bra $a3c7			bra 	UnaryMinMaxMain
.a3c5					Unary_Max:
.a3c5	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a3c7					UnaryMinMaxMain:
.a3c7	fa		plx				plx 								; get index on number stack
.a3c8	48		pha				pha 								; save comparator
.a3c9	20 4b a6	jsr $a64b			jsr 	EvaluateValue 				; get the first value.
.a3cc					_UMMMLoop:
.a3cc	b1 30		lda ($30),y			lda 	(codePtr),y
.a3ce	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3d0	f0 22		beq $a3f4			beq 	_UMMMDone
.a3d2	20 5f af	jsr $af5f			jsr 	CheckComma 					; must be a comma
.a3d5	e8		inx				inx
.a3d6	20 4b a6	jsr $a64b			jsr 	EvaluateValue
.a3d9	ca		dex				dex
.a3da	20 eb a6	jsr $a6eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3dd	e8		inx				inx
.a3de	20 eb a6	jsr $a6eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3e1	e8		inx				inx
.a3e2	20 91 9b	jsr $9b91			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3e5	ca		dex				dex
.a3e6	ca		dex				dex
.a3e7	85 36		sta $36				sta 	zTemp0 						; save required result
.a3e9	68		pla				pla 								; get and save comparator
.a3ea	48		pha				pha
.a3eb	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3ed	d0 dd		bne $a3cc			bne 	_UMMMLoop
.a3ef	20 f7 a3	jsr $a3f7			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3f2	80 d8		bra $a3cc			bra 	_UMMMLoop
.a3f4					_UMMMDone:
.a3f4	68		pla				pla 								; throw the comparator
.a3f5	c8		iny				iny 								; skip )
.a3f6	60		rts				rts
.a3f7					ExpCopyAboveDown:
.a3f7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a3fa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3fd	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a400	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a403	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a406	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a409	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a40c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a40f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a412	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a415	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a418	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a41b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a41c					Unary_Not:
.a41c	fa		plx				plx
.a41d	20 77 a6	jsr $a677			jsr 	EvaluateInteger 			; get integer
.a420	20 57 af	jsr $af57			jsr 	CheckRightBracket
.a423	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; zero mantissa ?
.a426	f0 04		beq $a42c			beq 	_NotZero
.a428	20 14 a7	jsr $a714			jsr 	NSMSetZero
.a42b	60		rts				rts
.a42c					_NotZero:
.a42c	4c 46 9b	jmp $9b46			jmp 	ReturnTrue
.a42f					_UNBad:
.a42f	4c 54 b5	jmp $b554			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a432					Unary_Random:
.a432	fa		plx				plx
.a433	20 b1 a4	jsr $a4b1			jsr 	Random32Bit 				; get a random number
.a436	20 96 a4	jsr $a496			jsr 	URCopyToMantissa  			; put in mantissa
.a439	b1 30		lda ($30),y			lda 	(codePtr),y
.a43b	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a43d	f0 08		beq $a447			beq 	_URNoModulus
.a43f	e8		inx				inx
.a440	20 8c a6	jsr $a68c			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a443	ca		dex				dex
.a444	20 db af	jsr $afdb			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a447					_URNoModulus:
.a447	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a44a	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a44d	20 57 af	jsr $af57			jsr 	CheckRightBracket
.a450	60		rts				rts
.a451					Unary_Rnd:
.a451	fa		plx				plx
.a452	20 54 a6	jsr $a654			jsr 	EvaluateNumber 				; number to use.
.a455	20 57 af	jsr $af57			jsr 	CheckRightBracket 			; closing bracket
.a458	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a45b	f0 2b		beq $a488			beq 	_URCopySeed
.a45d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a460	10 23		bpl $a485			bpl 	_URDontSeed
.a462	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a465	49 17		eor #$17			eor 	#$17
.a467	8d 88 04	sta $0488			sta 	RandomSeed+0
.a46a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a46d	49 a5		eor #$a5			eor 	#$A5
.a46f	8d 89 04	sta $0489			sta 	RandomSeed+1
.a472	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a475	49 c2		eor #$c2			eor 	#$C2
.a477	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a47a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a47d	49 9d		eor #$9d			eor 	#$9D
.a47f	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a482	20 b1 a4	jsr $a4b1			jsr 	Random32Bit
.a485					_URDontSeed:
.a485	20 b1 a4	jsr $a4b1			jsr 	Random32Bit 				; generate a number.
.a488					_URCopySeed:
.a488	20 96 a4	jsr $a496			jsr 	URCopyToMantissa 			; copy into mantissa
.a48b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a48d	8d 28 04	sta $0428			sta 	NSExponent
.a490	a9 08		lda #$08			lda 	#NSTFloat
.a492	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a495	60		rts				rts
.a496					URCopyToMantissa:
.a496	ad 88 04	lda $0488			lda 	RandomSeed+0
.a499	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a49c	ad 89 04	lda $0489			lda 	RandomSeed+1
.a49f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a4a2	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a4a5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a4a8	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a4ab	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a4ad	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4b0	60		rts				rts
.a4b1					Random32Bit:
.a4b1	5a		phy				phy
.a4b2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a4b4	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a4b7	d0 03		bne $a4bc			bne 	_Random1
.a4b9	a8		tay				tay 								; if so do it 256 times
.a4ba	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a4bc					_Random1:
.a4bc	0a		asl a				asl 	a 							; LSFR RNG
.a4bd	2e 89 04	rol $0489			rol 	RandomSeed+1
.a4c0	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a4c3	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a4c6	90 02		bcc $a4ca			bcc 	_Random2
.a4c8	49 c5		eor #$c5			eor 	#$C5
.a4ca					_Random2:
.a4ca	88		dey				dey
.a4cb	d0 ef		bne $a4bc			bne 	_Random1
.a4cd	8d 88 04	sta $0488			sta 	RandomSeed+0
.a4d0	7a		ply				ply
.a4d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b376					SgnUnary:
.b376	fa		plx				plx 								; restore stack pos
.b377	20 54 a6	jsr $a654			jsr 	EvaluateNumber 				; get a float or int
.b37a	20 57 af	jsr $af57			jsr 	CheckRightBracket
.b37d	20 44 a7	jsr $a744			jsr 	NSMIsZero 					; if zero
.b380	f0 10		beq $b392			beq 	_SGZero  					; return Int Zero
.b382	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b385	48		pha				pha
.b386	a9 01		lda #$01			lda 	#1 							; set to 1
.b388	20 16 a7	jsr $a716			jsr 	NSMSetByte
.b38b	68		pla				pla
.b38c	29 80		and #$80			and		#$80 						; copy the sign byte out
.b38e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b391	60		rts				rts
.b392	20 14 a7	jsr $a714	_SGZero:jsr 	NSMSetZero
.b395	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b396					ValUnary:
.b396	fa		plx				plx 								; restore stack pos
.b397	20 ac b3	jsr $b3ac			jsr 	ValMainCode 				; do the main val() code
.b39a	b0 01		bcs $b39d			bcs 	_VUError 					; couldn't convert
.b39c	60		rts				rts
.b39d					_VUError:
.b39d	4c 4f b5	jmp $b54f			jmp 	TypeError
.b3a0					IsValUnary:
.b3a0	fa		plx				plx 								; restore stack pos
.b3a1	20 ac b3	jsr $b3ac			jsr 	ValMainCode 				; do the main val() code
.b3a4	b0 03		bcs $b3a9			bcs 	_VUBad
.b3a6	4c 46 9b	jmp $9b46			jmp 	ReturnTrue
.b3a9					_VUBad:
.b3a9	4c 52 9b	jmp $9b52			jmp 	ReturnFalse
.b3ac					ValMainCode:
.b3ac	20 5f a6	jsr $a65f			jsr 	EvaluateString 				; get a string
.b3af	20 57 af	jsr $af57			jsr 	CheckRightBracket 			; check right bracket present
.b3b2	5a		phy				phy
.b3b3	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b3b5	f0 17		beq $b3ce			beq 	_VMCFail2
.b3b7	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b3b9	48		pha				pha 								; save first character
.b3ba	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b3bc	d0 01		bne $b3bf			bne 	_VMCStart
.b3be	c8		iny				iny 								; skip over -
.b3bf					_VMCStart:
.b3bf	38		sec				sec 								; initialise first time round.
.b3c0					_VMCNext:
.b3c0	c8		iny				iny 								; pre-increment
.b3c1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b3c3	f0 0c		beq $b3d1			beq 	_VMCSuccess 				; successful.
.b3c5	20 9d a0	jsr $a09d			jsr 	EncodeNumber 				; send it to the number-builder
.b3c8	90 03		bcc $b3cd			bcc 	_VMCFail 					; if failed, give up.
.b3ca	18		clc				clc 								; next time round, countinue
.b3cb	80 f3		bra $b3c0			bra 	_VMCNext
.b3cd					_VMCFail:
.b3cd	68		pla				pla
.b3ce					_VMCFail2:
.b3ce	7a		ply				ply
.b3cf	38		sec				sec
.b3d0	60		rts				rts
.b3d1					_VMCSuccess:
.b3d1	a9 00		lda #$00			lda 	#0 							; construct final
.b3d3	20 9d a0	jsr $a09d			jsr 	EncodeNumber
.b3d6	68		pla				pla
.b3d7	c9 2d		cmp #$2d			cmp 	#"-"
.b3d9	d0 03		bne $b3de			bne 	_VMCNotNegative
.b3db	20 c0 a6	jsr $a6c0			jsr		NSMNegate
.b3de					_VMCNotNegative:
.b3de	7a		ply				ply
.b3df	18		clc				clc
.b3e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a4d2					ChrUnary:
.a4d2	fa		plx				plx 								; restore stack pos
.a4d3	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger			; get value
.a4d6	48		pha				pha
.a4d7	20 57 af	jsr $af57			jsr 	CheckRightBracket
.a4da	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4dc	20 c8 b8	jsr $b8c8			jsr 	StringTempAllocate
.a4df	68		pla				pla 								; write number to it
.a4e0	20 06 b9	jsr $b906			jsr 	StringTempWrite
.a4e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4e4					SpcUnary:
.a4e4	fa		plx				plx 								; restore stack pos
.a4e5	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger			; get value
.a4e8	5a		phy				phy
.a4e9	48		pha				pha 								; save count
.a4ea	20 c8 b8	jsr $b8c8			jsr 	StringTempAllocate
.a4ed	7a		ply				ply 								; to do count in Y
.a4ee					_SpcLoop:
.a4ee	c0 00		cpy #$00			cpy 	#0
.a4f0	f0 08		beq $a4fa			beq 	_SpcExit
.a4f2	a9 20		lda #$20			lda 	#32
.a4f4	20 06 b9	jsr $b906			jsr 	StringTempWrite
.a4f7	88		dey				dey
.a4f8	80 f4		bra $a4ee			bra 	_SPCLoop
.a4fa					_SpcExit:
.a4fa	7a		ply				ply
.a4fb	20 57 af	jsr $af57			jsr 	CheckRightBracket
.a4fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4ff					Unary_Str:
.a4ff	fa		plx				plx
.a500	20 54 a6	jsr $a654			jsr 	EvaluateNumber  			; get number
.a503	20 57 af	jsr $af57			jsr 	CheckRightBracket 			; closing bracket
.a506	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a508	20 21 a5	jsr $a521			jsr 	ConvertNumberToString 		; do the conversion.
.a50b	a9 21		lda #$21			lda		#33 						; create buffer
.a50d	20 c8 b8	jsr $b8c8			jsr 	StringTempAllocate 			; allocate memory
.a510	da		phx				phx
.a511	a2 00		ldx #$00			ldx 	#0
.a513					_USCopy:
.a513	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a516	20 06 b9	jsr $b906			jsr 	StringTempWrite
.a519	e8		inx				inx
.a51a	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a51d	d0 f4		bne $a513			bne 	_USCopy
.a51f	fa		plx				plx
.a520	60		rts				rts
.a521					ConvertNumberToString:
.a521	5a		phy				phy 								; save code position
.a522	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a525	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a528	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a52b	10 0a		bpl $a537			bpl 	_CNTSNotNegative
.a52d	29 7f		and #$7f			and 	#$7F 						; make +ve
.a52f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a532	a9 2d		lda #$2d			lda 	#"-"
.a534	20 9d a5	jsr $a59d			jsr 	WriteDecimalBuffer
.a537					_CNTSNotNegative:
.a537	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a53a	f0 15		beq $a551			beq 	_CNTSNotFloat
.a53c	e8		inx				inx 								; round up
.a53d	a9 01		lda #$01			lda 	#1
.a53f	20 16 a7	jsr $a716			jsr 	NSMSetByte
.a542	ca		dex				dex
.a543	bd 28 04	lda $0428,x			lda		NSExponent,x
.a546	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a549	a9 08		lda #$08			lda 	#NSTFloat
.a54b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a54e	20 1e b1	jsr $b11e			jsr 	FloatAdd
.a551					_CNTSNotFloat:
.a551	20 7f a5	jsr $a57f			jsr 	MakePlusTwoString
.a554	20 04 b2	jsr $b204			jsr 	FloatFractionalPart 		; get the fractional part
.a557	20 c8 b2	jsr $b2c8			jsr 	NSNormalise					; normalise , exit if zero
.a55a	f0 21		beq $a57d			beq 	_CNTSExit
.a55c	a9 2e		lda #$2e			lda 	#"."
.a55e	20 9d a5	jsr $a59d			jsr 	WriteDecimalBuffer 			; write decimal place
.a561					_CNTSDecimal:
.a561	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a564	30 17		bmi $a57d			bmi 	_CNTSExit
.a566	e8		inx				inx 								; x 10.0
.a567	a9 0a		lda #$0a			lda 	#10
.a569	20 16 a7	jsr $a716			jsr 	NSMSetByte
.a56c	a9 08		lda #$08			lda 	#NSTFloat
.a56e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a571	ca		dex				dex
.a572	20 91 b2	jsr $b291			jsr 	FloatMultiply
.a575	20 7f a5	jsr $a57f			jsr 	MakePlusTwoString
.a578	20 04 b2	jsr $b204			jsr 	FloatFractionalPart 		; get the fractional part
.a57b	80 e4		bra $a561			bra 	_CNTSDecimal 				; keep going.
.a57d					_CNTSExit:
.a57d	7a		ply				ply
.a57e	60		rts				rts
.a57f					MakePlusTwoString:
.a57f	da		phx				phx
.a580	20 eb a6	jsr $a6eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a583	e8		inx				inx 								; access it
.a584	e8		inx				inx
.a585	20 67 b2	jsr $b267			jsr 	FloatIntegerPart 			; make it an integer
.a588	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a58a	20 c8 b0	jsr $b0c8			jsr 	ConvertInt32
.a58d	a2 00		ldx #$00			ldx	 	#0
.a58f					_MPTSCopy:
.a58f	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a592	20 9d a5	jsr $a59d			jsr 	WriteDecimalBuffer
.a595	e8		inx				inx
.a596	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a599	d0 f4		bne $a58f			bne 	_MPTSCopy
.a59b	fa		plx				plx
.a59c	60		rts				rts
.a59d					WriteDecimalBuffer:
.a59d	da		phx				phx
.a59e	ae 95 04	ldx $0495			ldx 	dbOffset
.a5a1	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a5a4	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a5a7	ee 95 04	inc $0495			inc 	dbOffset
.a5aa	fa		plx				plx
.a5ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5ac					Unary_Left:
.a5ac	fa		plx				plx
.a5ad	18		clc				clc 								; only one parameter
.a5ae	20 23 a6	jsr $a623			jsr 	SubstringInitial 			; set up.
.a5b1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5b4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5b7	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5ba	80 2c		bra $a5e8			bra 	SubstringMain
.a5bc					Unary_Right:
.a5bc	fa		plx				plx
.a5bd	18		clc				clc 								; only one parameter
.a5be	20 23 a6	jsr $a623			jsr 	SubstringInitial 			; set up.
.a5c1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5c4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5c7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a5ca	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5cd	b0 02		bcs $a5d1			bcs 	_URNotUnderflow
.a5cf	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5d1					_URNotUnderFlow:
.a5d1	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5d4	80 12		bra $a5e8			bra 	SubStringMain
.a5d6					Unary_Mid:
.a5d6	fa		plx				plx
.a5d7	38		sec				sec 								; two parameters
.a5d8	20 23 a6	jsr $a623			jsr 	SubstringInitial 			; set up.
.a5db	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5de	f0 05		beq $a5e5			beq 	_UMError
.a5e0	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5e3	80 03		bra $a5e8			bra 	SubStringMain
.a5e5					_UMError:
.a5e5	4c 54 b5	jmp $b554			jmp 	ArgumentError
.a5e8					SubStringMain:
.a5e8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5eb	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a5ee	b0 2d		bcs $a61d			bcs 	_SSMNull 					; if so, return an empty string.
.a5f0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5f3	f0 28		beq $a61d			beq 	_SSMNull 					; return empty string.
.a5f5	18		clc				clc 								; add the offset +1 to the address and
.a5f6	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a5f9	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a5fc	85 36		sta $36				sta 	zTemp0
.a5fe	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a601	69 00		adc #$00			adc 	#0
.a603	85 37		sta $37				sta 	zTemp0+1
.a605					_SSMNoCarry:
.a605	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a608	20 c8 b8	jsr $b8c8			jsr 	StringTempAllocate 			; allocate that many characters
.a60b	5a		phy				phy 								; save Y
.a60c	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a60e					_SSMCopy:
.a60e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a610	f0 09		beq $a61b			beq 	_SSMEString 				; no more to copy
.a612	20 06 b9	jsr $b906			jsr 	StringTempWrite 			; and write it out.
.a615	c8		iny				iny
.a616	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a619	d0 f3		bne $a60e			bne 	_SSMCopy
.a61b					_SSMEString:
.a61b	7a		ply				ply
.a61c					_SSMExit:
.a61c	60		rts				rts
.a61d					_SSMNull:
.a61d	a9 00		lda #$00			lda 	#0
.a61f	20 c8 b8	jsr $b8c8			jsr 	StringTempAllocate
.a622	60		rts				rts
.a623					SubstringInitial:
.a623	da		phx				phx 								; save initial stack position
.a624	08		php				php 								; save carry on stack indicating 2 parameters
.a625	20 5f a6	jsr $a65f			jsr 	EvaluateString 				; get a string
.a628	5a		phy				phy 								; calculate length to exponent.
.a629	a0 ff		ldy #$ff			ldy 	#$FF
.a62b					_SIFindLength:
.a62b	c8		iny				iny
.a62c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a62e	d0 fb		bne $a62b			bne 	_SIFindLength
.a630	98		tya				tya
.a631	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a634	7a		ply				ply
.a635	e8		inx				inx
.a636	20 5f af	jsr $af5f			jsr 	CheckComma 					; comma next
.a639	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get next parameter
.a63c	28		plp				plp 								; is it the last parameter ?
.a63d	90 07		bcc $a646			bcc 	_SSIExit 					; if so, exit.
.a63f	e8		inx				inx
.a640	20 5f af	jsr $af5f			jsr 	CheckComma 					; comma next
.a643	20 ac a6	jsr $a6ac			jsr 	Evaluate8BitInteger 		; get last parameter
.a646					_SSIExit:
.a646	fa		plx				plx
.a647	20 57 af	jsr $af57			jsr 	CheckRightBracket 			; check closing bracket
.a64a	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a64b					EvaluateValue:
.a64b	48		pha				pha
.a64c	20 ea 9e	jsr $9eea			jsr		EvaluateExpression 			; expression
.a64f	20 ff 9f	jsr $9fff			jsr 	Dereference					; derefernce it
.a652	68		pla				pla
.a653	60		rts				rts
.a654					EvaluateNumber:
.a654	20 4b a6	jsr $a64b			jsr 	EvaluateValue 				; get a value
.a657	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a65a	29 10		and #$10			and 	#NSBIsString
.a65c	d0 16		bne $a674			bne 	HelperTypeError
.a65e	60		rts				rts
.a65f					EvaluateString:
.a65f	20 4b a6	jsr $a64b			jsr 	EvaluateValue 				; get a value
.a662	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a665	29 10		and #$10			and 	#NSBIsString
.a667	f0 0b		beq $a674			beq 	HelperTypeError
.a669					CopyAddressToTemp0:
.a669	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a66c	85 36		sta $36				sta 	zTemp0
.a66e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a671	85 37		sta $37				sta 	zTemp0+1
.a673	60		rts				rts
.a674					HelperTypeError:
.a674	4c 4f b5	jmp $b54f			jmp 	TypeError
.a677					EvaluateInteger:
.a677	20 54 a6	jsr $a654			jsr 	EvaluateNumber
.a67a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a67d	d0 0a		bne $a689			bne 	HelperValueError 			; if not, it's a float.
.a67f	60		rts				rts
.a680					EvaluateUnsignedInteger:
.a680	20 77 a6	jsr $a677			jsr 	EvaluateInteger 			; check integer is +ve
.a683	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a686	30 01		bmi $a689			bmi 	HelperValueError
.a688	60		rts				rts
.a689					HelperValueError:
.a689	4c 54 b5	jmp $b554			jmp 	ArgumentError
.a68c					Evaluate16BitInteger:
.a68c	20 80 a6	jsr $a680			jsr	 	EvaluateUnsignedInteger		; get integer
.a68f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a692	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a695	d0 f2		bne $a689			bne 	HelperValueError
.a697	60		rts				rts
.a698					Evaluate16BitIntegerSigned:
.a698	20 77 a6	jsr $a677			jsr	 	EvaluateInteger				; get integer
.a69b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a69e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6a1	d0 e6		bne $a689			bne 	HelperValueError
.a6a3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a6a6	10 03		bpl $a6ab			bpl 	_EISNotSigned
.a6a8	20 c9 a6	jsr $a6c9			jsr 	NSMNegateMantissa
.a6ab					_EISNotSigned:
.a6ab	60		rts				rts
.a6ac					Evaluate8BitInteger:
.a6ac	20 80 a6	jsr $a680			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6af	d0 d8		bne $a689			bne 	HelperValueError
.a6b1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6b4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6b7	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a6ba	d0 cd		bne $a689			bne 	HelperValueError
.a6bc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b3e1					Multiply8x8:
.b3e1	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b3e2	85 36		sta $36			  	sta 	zTemp0
.b3e4	86 37		stx $37				stx 	zTemp0+1
.b3e6	a9 00		lda #$00			lda 	#0
.b3e8	a2 08		ldx #$08			ldx 	#8
.b3ea					_M88Loop:
.b3ea	90 03		bcc $b3ef			bcc 	_M88NoAdd
.b3ec	18		clc				clc
.b3ed	65 37		adc $37				adc 	zTemp0+1
.b3ef					_M88NoAdd:
.b3ef	6a		ror a				ror 	a
.b3f0	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b3f2	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b3f3	d0 f5		bne $b3ea			bne 	_M88Loop
.b3f5	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b3f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6c0					NSMNegate:
.a6c0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6c3	49 80		eor #$80			eor 	#NSBIsNegative
.a6c5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6c8	60		rts				rts
.a6c9					NSMNegateMantissa:
.a6c9	38		sec				sec
.a6ca	a9 00		lda #$00			lda 	#0
.a6cc	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a6cf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6d2	a9 00		lda #$00			lda 	#0
.a6d4	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a6d7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6da	a9 00		lda #$00			lda 	#0
.a6dc	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a6df	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6e2	a9 00		lda #$00			lda 	#0
.a6e4	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a6e7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6ea	60		rts				rts
.a6eb					NSMShiftUpTwo:
.a6eb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6ee	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a6f1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6f4	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a6f7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6fa	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a6fd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a700	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a703	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a706	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a709	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a70c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a70f	60		rts				rts
.a710					NSMSetZeroMantissaOnly:
.a710	a9 00		lda #$00			lda 	#0
.a712	80 08		bra $a71c			bra 	NSMSetMantissa
.a714					NSMSetZero:
.a714	a9 00		lda #$00			lda 	#0
.a716					NSMSetByte:
.a716	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a719	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a71c					NSMSetMantissa:
.a71c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a71f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a722	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a725	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a728	60		rts				rts
.a729					NSMShiftLeft:
.a729	18		clc				clc
.a72a					NSMRotateLeft:
.a72a	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a72d	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a730	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a733	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a736	60		rts				rts
.a737					NSMShiftRight:
.a737	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a73a	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a73d	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a740	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a743	60		rts				rts
.a744					NSMIsZero:
.a744	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a747	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a74a	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a74d	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a750	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b3f8					Assemble_ora:
.b3f8	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b3fb	01					.byte $01
.b3fc					Assemble_and:
.b3fc	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b3ff	21					.byte $21
.b400					Assemble_eor:
.b400	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b403	41					.byte $41
.b404					Assemble_adc:
.b404	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b407	61					.byte $61
.b408					Assemble_sta:
.b408	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b40b	81					.byte $81
.b40c					Assemble_lda:
.b40c	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b40f	a1					.byte $a1
.b410					Assemble_cmp:
.b410	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b413	c1					.byte $c1
.b414					Assemble_sbc:
.b414	20 c9 89	jsr $89c9		jsr	AssembleGroup1
>b417	e1					.byte $e1
.b418					Assemble_asl:
.b418	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b41b	02					.byte $02
>b41c	75					.byte $75
.b41d					Assemble_rol:
.b41d	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b420	22					.byte $22
>b421	75					.byte $75
.b422					Assemble_lsr:
.b422	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b425	42					.byte $42
>b426	75					.byte $75
.b427					Assemble_ror:
.b427	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b42a	62					.byte $62
>b42b	75					.byte $75
.b42c					Assemble_stx:
.b42c	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b42f	82					.byte $82
>b430	50					.byte $50
.b431					Assemble_ldx:
.b431	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b434	a2					.byte $a2
>b435	d0					.byte $d0
.b436					Assemble_dec:
.b436	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b439	c2					.byte $c2
>b43a	55					.byte $55
.b43b					Assemble_inc:
.b43b	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b43e	e2					.byte $e2
>b43f	55					.byte $55
.b440					Assemble_stz:
.b440	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b443	60					.byte $60
>b444	44					.byte $44
.b445					Assemble_bit:
.b445	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b448	20					.byte $20
>b449	55					.byte $55
.b44a					Assemble_sty:
.b44a	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b44d	80					.byte $80
>b44e	54					.byte $54
.b44f					Assemble_ldy:
.b44f	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b452	a0					.byte $a0
>b453	d5					.byte $d5
.b454					Assemble_cpy:
.b454	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b457	c0					.byte $c0
>b458	d4					.byte $d4
.b459					Assemble_cpx:
.b459	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b45c	e0					.byte $e0
>b45d	d0					.byte $d0
.b45e					Assemble_tsb:
.b45e	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b461	00					.byte $00
>b462	50					.byte $50
.b463					Assemble_trb:
.b463	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b466	10					.byte $10
>b467	50					.byte $50
.b468					Assemble_jsr:
.b468	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b46b	14					.byte $14
>b46c	10					.byte $10
.b46d					Assemble_jmp:
.b46d	20 d0 89	jsr $89d0		jsr	AssembleGroup2
>b470	40					.byte $40
>b471	10					.byte $10
.b472					Assemble_bpl:
.b472	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b475	10					.byte $10
.b476					Assemble_bmi:
.b476	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b479	30					.byte $30
.b47a					Assemble_bvc:
.b47a	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b47d	50					.byte $50
.b47e					Assemble_bvs:
.b47e	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b481	70					.byte $70
.b482					Assemble_bcc:
.b482	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b485	90					.byte $90
.b486					Assemble_bcs:
.b486	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b489	b0					.byte $b0
.b48a					Assemble_bne:
.b48a	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b48d	d0					.byte $d0
.b48e					Assemble_beq:
.b48e	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b491	f0					.byte $f0
.b492					Assemble_bra:
.b492	20 21 8a	jsr $8a21		jsr	AssembleGroup3
>b495	80					.byte $80
.b496					Assemble_brk:
.b496	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b499	00					.byte $00
.b49a					Assemble_php:
.b49a	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b49d	08					.byte $08
.b49e					Assemble_clc:
.b49e	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4a1	18					.byte $18
.b4a2					Assemble_plp:
.b4a2	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4a5	28					.byte $28
.b4a6					Assemble_sec:
.b4a6	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4a9	38					.byte $38
.b4aa					Assemble_rti:
.b4aa	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4ad	40					.byte $40
.b4ae					Assemble_pha:
.b4ae	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4b1	48					.byte $48
.b4b2					Assemble_cli:
.b4b2	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4b5	58					.byte $58
.b4b6					Assemble_phy:
.b4b6	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4b9	5a					.byte $5a
.b4ba					Assemble_rts:
.b4ba	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4bd	60					.byte $60
.b4be					Assemble_pla:
.b4be	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4c1	68					.byte $68
.b4c2					Assemble_sei:
.b4c2	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4c5	78					.byte $78
.b4c6					Assemble_ply:
.b4c6	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4c9	7a					.byte $7a
.b4ca					Assemble_dey:
.b4ca	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4cd	88					.byte $88
.b4ce					Assemble_txa:
.b4ce	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4d1	8a					.byte $8a
.b4d2					Assemble_tya:
.b4d2	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4d5	98					.byte $98
.b4d6					Assemble_txs:
.b4d6	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4d9	9a					.byte $9a
.b4da					Assemble_tay:
.b4da	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4dd	a8					.byte $a8
.b4de					Assemble_tax:
.b4de	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4e1	aa					.byte $aa
.b4e2					Assemble_clv:
.b4e2	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4e5	b8					.byte $b8
.b4e6					Assemble_tsx:
.b4e6	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4e9	ba					.byte $ba
.b4ea					Assemble_iny:
.b4ea	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4ed	c8					.byte $c8
.b4ee					Assemble_dex:
.b4ee	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4f1	ca					.byte $ca
.b4f2					Assemble_cld:
.b4f2	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4f5	d8					.byte $d8
.b4f6					Assemble_phx:
.b4f6	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4f9	da					.byte $da
.b4fa					Assemble_stp:
.b4fa	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b4fd	db					.byte $db
.b4fe					Assemble_inx:
.b4fe	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b501	e8					.byte $e8
.b502					Assemble_nop:
.b502	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b505	ea					.byte $ea
.b506					Assemble_sed:
.b506	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b509	f8					.byte $f8
.b50a					Assemble_plx:
.b50a	20 57 8a	jsr $8a57		jsr	AssembleGroup4
>b50d	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b50e					DecimalScalarTable:
>b50e	66 66 66 66				.dword $66666666 ; 0.1
>b512	de					.byte $de
>b513	1f 85 eb 51				.dword $51eb851f ; 0.01
>b517	db					.byte $db
>b518	4c 37 89 41				.dword $4189374c ; 0.001
>b51c	d8					.byte $d8
>b51d	ac 8b db 68				.dword $68db8bac ; 0.0001
>b521	d4					.byte $d4
>b522	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b526	d1					.byte $d1
>b527	83 de 1b 43				.dword $431bde83 ; 1e-06
>b52b	ce					.byte $ce
>b52c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b530	ca					.byte $ca
>b531	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b535	c7					.byte $c7
>b536	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b53a	c4					.byte $c4
>b53b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b53f	c0					.byte $c0
>b540	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b544	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b545					SyntaxError:
.b545	a9 02		lda #$02		lda	#2
.b547	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b54a					RangeError:
.b54a	a9 04		lda #$04		lda	#4
.b54c	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b54f					TypeError:
.b54f	a9 05		lda #$05		lda	#5
.b551	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b554					ArgumentError:
.b554	a9 07		lda #$07		lda	#7
.b556	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b559					NotDoneError:
.b559	a9 0c		lda #$0c		lda	#12
.b55b	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b55e					ErrorText:
>b55e	42 72 65 61 6b 00			.text	"Break",0
>b564	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b56c	72 72 6f 72 00
>b571	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b579	20 62 79 20 7a 65 72 6f 00
>b582	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b58a	61 6e 67 65 00
>b58f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b597	6d 61 74 63 68 00
>b59d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b5a5	65 6d 6f 72 79 00
>b5ab	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b5b3	61 72 67 75 6d 65 6e 74 00
>b5bc	53 74 6f 70 00				.text	"Stop",0
>b5c1	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b5c9	6f 6f 20 6c 6f 6e 67 00
>b5d1	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b5d9	6e 20 66 61 69 6c 65 64 00
>b5e2	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b5ea	61 74 61 00
>b5ee	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b5f6	65 6e 74 65 64 00
>b5fc	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b604	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b610	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b618	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b625	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b62d	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b63a	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b642	68 6f 75 74 20 57 68 69 6c 65 00
>b64d	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b655	68 6f 75 74 20 46 6f 72 00
>b65e	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b666	61 63 6b 20 66 75 6c 6c 00
>b66f	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b677	75 63 74 75 72 65 00
>b67e	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b686	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b693	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b69b	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b6a9	41 72 72 61 79 20 73 69			.text	"Array size",0
>b6b1	7a 65 00
>b6b4	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b6bc	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b6c4	42 75 69 6c 74 20 54 68			.text "Built Thursday 03-Nov-2022. Build 2636."
>b6cc	75 72 73 64 61 79 20 30 33 2d 4e 6f 76 2d 32 30
>b6dc	32 32 2e 20 42 75 69 6c 64 20 32 36 33 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b6eb					EXTInitialise:
.b6eb	64 01		stz $01				stz 	1 							; Access I/O
.b6ed	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b6f0	9c 08 d0	stz $d008			stz 	$D008
.b6f3	9c 09 d0	stz $d009			stz 	$D009
.b6f6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b6f8	8d 58 d6	sta $d658			sta 	$D658
.b6fb	60		rts				rts
.b6fc					EXTClearScreen:
.b6fc	4c ea ff	jmp $ffea			jmp 	$FFEA
.b6ff					EXTPrintCharacter:
.b6ff	48		pha				pha
.b700	da		phx				phx
.b701	5a		phy				phy
.b702	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b705	7a		ply				ply
.b706	fa		plx				plx
.b707	68		pla				pla
.b708	60		rts				rts
.b709					EXTInputSingleCharacter:
.b709	da		phx				phx
.b70a	5a		phy				phy
.b70b					_EISCWait:
.b70b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b70e	c9 00		cmp #$00			cmp 	#0
.b710	f0 f9		beq $b70b			beq 	_EISCWait
.b712	7a		ply				ply
.b713	fa		plx				plx
.b714	60		rts				rts
.b715					EXTInputLine:
.b715	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b717					_ILLoop:
.b717	da		phx				phx 								; read character in
.b718	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b71b	fa		plx				plx
.b71c	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b71e	f0 12		beq $b732			beq 	_ILBackspace
.b720	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b722	f0 15		beq $b739			beq 	_ILExit
.b724	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b726	90 ef		bcc $b717			bcc 	_ILLoop
.b728	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b72a	f0 eb		beq $b717			beq 	_ILLoop
.b72c	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b72f	e8		inx				inx
.b730	80 e5		bra $b717			bra 	_ILLoop
.b732					_ILBackspace:
.b732	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b734	f0 e1		beq $b717			beq 	_ILLoop
.b736	ca		dex				dex 								; back one.
.b737	80 de		bra $b717			bra 	_ILLoop
.b739					_ILExit:
.b739	20 ff b6	jsr $b6ff			jsr 	EXTPrintCharacter
.b73c	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b73f	60		rts				rts
.b740					EXTBreakCheck:
.b740	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b743					EXTReadController:
.b743	da		phx				phx
.b744	a2 00		ldx #$00			ldx 	#0
.b746	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b748	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b74b	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b74d	f0 04		beq $b753			beq 	_NoSet1
.b74f	8a		txa				txa
.b750	09 01		ora #$01			ora 	#1
.b752	aa		tax				tax
.b753					_NoSet1:
.b753	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b755	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b758	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b75a	f0 04		beq $b760			beq 	_NoSet1
.b75c	8a		txa				txa
.b75d	09 02		ora #$02			ora 	#2
.b75f	aa		tax				tax
.b760					_NoSet1:
.b760	a9 06		lda #$06			lda 	#(($32) >> 3)
.b762	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b765	29 04		and #$04			and 	#($01 << (($32) & 7))
.b767	f0 04		beq $b76d			beq 	_NoSet1
.b769	8a		txa				txa
.b76a	09 04		ora #$04			ora 	#4
.b76c	aa		tax				tax
.b76d					_NoSet1:
.b76d	a9 04		lda #$04			lda 	#(($25) >> 3)
.b76f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b772	29 20		and #$20			and 	#($01 << (($25) & 7))
.b774	f0 04		beq $b77a			beq 	_NoSet1
.b776	8a		txa				txa
.b777	09 08		ora #$08			ora 	#8
.b779	aa		tax				tax
.b77a					_NoSet1:
.b77a	a9 04		lda #$04			lda 	#(($26) >> 3)
.b77c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b77f	29 40		and #$40			and 	#($01 << (($26) & 7))
.b781	f0 04		beq $b787			beq 	_NoSet1
.b783	8a		txa				txa
.b784	09 10		ora #$10			ora 	#16
.b786	aa		tax				tax
.b787					_NoSet1:
.b787	8a		txa				txa
.b788	fa		plx				plx
.b789	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b78a					MemoryDeleteLine:
.b78a	20 a9 b7	jsr $b7a9			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b78d	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b78f	a8		tay				tay
.b790					_MDDLLoop:
.b790	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b792	92 30		sta ($30)			sta 	(codePtr)
.b794	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b796	c5 3a		cmp $3a				cmp 	zTemp2
.b798	d0 07		bne $b7a1			bne 	_MDLDLNext
.b79a	a5 31		lda $31				lda 	codePtr+1
.b79c	c5 3b		cmp $3b				cmp 	zTemp2+1
.b79e	d0 01		bne $b7a1			bne 	_MDLDLNext
.b7a0					_MDDLExit:
.b7a0	60		rts				rts
.b7a1					_MDLDLNext:
.b7a1	e6 30		inc $30				inc 	codePtr						; next byte
.b7a3	d0 eb		bne $b790			bne 	_MDDLLoop
.b7a5	e6 31		inc $31				inc 	codePtr+1
.b7a7	80 e7		bra $b790			bra 	_MDDLLoop
.b7a9					IMemoryFindEnd:
.b7a9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7ab	85 3a		sta $3a				sta 	0+zTemp2
.b7ad	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7af	85 3b		sta $3b				sta 	1+zTemp2
.b7b1					_MDLFELoop:
.b7b1	b2 3a		lda ($3a)			lda 	(zTemp2)
.b7b3	f0 0b		beq $b7c0			beq 	_MDLFEExit
.b7b5	18		clc				clc
.b7b6	65 3a		adc $3a				adc 	zTemp2
.b7b8	85 3a		sta $3a				sta 	zTemp2
.b7ba	90 f5		bcc $b7b1			bcc 	_MDLFELoop
.b7bc	e6 3b		inc $3b				inc 	zTemp2+1
.b7be	80 f1		bra $b7b1			bra 	_MDLFELoop
.b7c0					_MDLFEExit:
.b7c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b7c1					MemoryInsertLine:
.b7c1	08		php				php
.b7c2	20 a9 b7	jsr $b7a9			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b7c5	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b7c7	1a		inc a				inc 	a
.b7c8	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b7ca	b0 36		bcs $b802			bcs 	_MDLIError
.b7cc	28		plp				plp
.b7cd	90 08		bcc $b7d7			bcc 	_MDLIFound
.b7cf	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b7d1	85 30		sta $30				sta 	codePtr
.b7d3	a5 3b		lda $3b				lda 	zTemp2+1
.b7d5	85 31		sta $31				sta 	codePtr+1
.b7d7					_MDLIFound:
.b7d7	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b7da	a8		tay				tay
.b7db					_MDLIInsert:
.b7db	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b7dd	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b7df	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b7e1	c5 3a		cmp $3a				cmp 	zTemp2
.b7e3	d0 06		bne $b7eb			bne 	_MDLINext
.b7e5	a5 31		lda $31				lda 	codePtr+1
.b7e7	c5 3b		cmp $3b				cmp 	zTemp2+1
.b7e9	f0 0a		beq $b7f5			beq 	_MDLIHaveSpace
.b7eb					_MDLINext:
.b7eb	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b7ed	d0 02		bne $b7f1			bne 	_MDLINoBorrow
.b7ef	c6 3b		dec $3b				dec 	zTemp2+1
.b7f1					_MDLINoBorrow:
.b7f1	c6 3a		dec $3a				dec 	zTemp2
.b7f3	80 e6		bra $b7db			bra 	_MDLIInsert
.b7f5					_MDLIHaveSpace:
.b7f5	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b7f8	88		dey				dey 								; from offset-1 to 0
.b7f9					_MDLICopy:
.b7f9	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b7fc	91 30		sta ($30),y			sta 	(codePtr),y
.b7fe	88		dey				dey
.b7ff	10 f8		bpl $b7f9			bpl 	_MDLICopy
.b801	60		rts				rts
.b802					_MDLIError:
.b802	a9 06		lda #$06		lda	#6
.b804	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b807					MDLAppendLine:
.b807	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b809	85 36		sta $36				sta 	zTemp0
.b80b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b80d	85 38		sta $38				sta 	0+zTemp1
.b80f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b811	85 39		sta $39				sta 	1+zTemp1
.b813	b2 38		lda ($38)			lda 	(zTemp1)
.b815	d0 0a		bne $b821			bne 	_MDLANoInitialise
.b817	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b819	8d eb 06	sta $06eb			sta 	0+AppendPointer
.b81c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b81e	8d ec 06	sta $06ec			sta 	1+AppendPointer
.b821					_MDLANoInitialise:
.b821	18		clc				clc
.b822	ad eb 06	lda $06eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b825	85 38		sta $38				sta 	zTemp1
.b827	72 36		adc ($36)			adc 	(zTemp0)
.b829	8d eb 06	sta $06eb			sta 	AppendPointer
.b82c	ad ec 06	lda $06ec			lda 	AppendPointer+1
.b82f	85 39		sta $39				sta 	zTemp1+1
.b831	69 00		adc #$00			adc 	#0
.b833	8d ec 06	sta $06ec			sta 	AppendPointer+1
.b836	a0 00		ldy #$00			ldy 	#0
.b838					_MDLACopy:
.b838	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b83a	91 38		sta ($38),y			sta 	(zTemp1),y
.b83c	c8		iny				iny
.b83d	98		tya				tya
.b83e	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b840	d0 f6		bne $b838			bne 	_MDLACopy
.b842	a9 00		lda #$00			lda 	#0 							; end of program.
.b844	91 38		sta ($38),y			sta 	(zTemp1),y
.b846	60		rts				rts
.06eb					AppendPointer:
>06eb							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a751					MemoryNew:
.a751	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a753	85 30		sta $30				sta 	codePtr
.a755	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a757	85 31		sta $31				sta 	codePtr+1
.a759	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a75b	92 30		sta ($30)			sta 	(codePtr)
.a75d	60		rts				rts
.a75e					MemoryInline:
.a75e	98		tya				tya 								; put address into stack,x
.a75f	18		clc				clc
.a760	65 30		adc $30				adc 	codePtr
.a762	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a765	a5 31		lda $31				lda 	codePtr+1
.a767	69 00		adc #$00			adc 	#0
.a769	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a76c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a76f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a772	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a773					MemorySearch:
.a773	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a775	86 37		stx $37				stx 	zTemp0+1
.a777	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a779	85 30		sta $30				sta 	codePtr
.a77b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a77d	85 31		sta $31				sta 	codePtr+1
.a77f					_MTAXLoop:
.a77f	b2 30		lda ($30)			lda 	(codePtr)
.a781	18		clc				clc
.a782	f0 21		beq $a7a5			beq 	_MTAXExit 					; reached end, exit with CC.
.a784	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a786	b1 30		lda ($30),y			lda 	(codePtr),y
.a788	38		sec				sec
.a789	e5 36		sbc $36				sbc 	zTemp0
.a78b	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a78d	c8		iny				iny 								; do the MSB
.a78e	b1 30		lda ($30),y			lda 	(codePtr),y
.a790	e5 37		sbc $37				sbc 	zTemp0+1
.a792	05 38		ora $38				ora 	zTemp1
.a794	f0 0f		beq $a7a5			beq 	_MTAXExit	 				; found
.a796	b0 0d		bcs $a7a5			bcs 	_MTAXExit 					; current < required exit
.a798	18		clc				clc
.a799	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a79b	65 30		adc $30				adc 	codePtr
.a79d	85 30		sta $30				sta 	codePtr
.a79f	90 02		bcc $a7a3			bcc 	_CREExit
.a7a1	e6 31		inc $31				inc 	codePtr+1
.a7a3					_CREExit:
.a7a3	80 da		bra $a77f			bra 	_MTAXLoop
.a7a5					_MTAXExit:
.a7a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a7a6					StackPushByte:
.a7a6	48		pha				pha 								; save byte
.a7a7	a5 34		lda $34				lda 	BasicStack
.a7a9	d0 09		bne $a7b4			bne 	_SPBNoBorrow
.a7ab	c6 35		dec $35				dec 	BasicStack+1
.a7ad	48		pha				pha
.a7ae	a5 35		lda $35				lda 	BasicStack+1
.a7b0	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7b2	90 06		bcc $a7ba			bcc 	_SPBMemory
.a7b4					_SPBNoBorrow:
.a7b4	c6 34		dec $34				dec 	BasicStack
.a7b6	68		pla				pla 								; get back and write
.a7b7	92 34		sta ($34)			sta 	(BasicStack)
.a7b9	60		rts				rts
.a7ba					_SPBMemory:
.a7ba	a9 12		lda #$12		lda	#18
.a7bc	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.a7bf					StackPopByte:
.a7bf	b2 34		lda ($34)			lda 	(BasicStack)
.a7c1	e6 34		inc $34				inc 	BasicStack
.a7c3	d0 02		bne $a7c7			bne 	_SPBNoCarry
.a7c5	e6 35		inc $35				inc 	BasicStack+1
.a7c7					_SPBNoCarry:
.a7c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a7c8					StackOpen:
.a7c8	48		pha				pha 								; save frame byte
.a7c9	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a7cb	0a		asl a				asl 	a 							; claim twice this for storage
.a7cc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a7ce	38		sec				sec 								; so basically subtracting from
.a7cf	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a7d1	85 34		sta $34				sta 	basicStack
.a7d3	b0 08		bcs $a7dd			bcs 	_SONoBorrow
.a7d5	c6 35		dec $35				dec 	basicStack+1
.a7d7	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a7d9	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7db	90 04		bcc $a7e1			bcc 	_SOMemory
.a7dd					_SONoBorrow:
.a7dd	68		pla				pla 								; get marker back and write at TOS
.a7de	92 34		sta ($34)			sta 	(basicStack)
.a7e0	60		rts				rts
.a7e1					_SOMemory:
.a7e1	a9 12		lda #$12		lda	#18
.a7e3	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.a7e6					StackClose:
.a7e6	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a7e8	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a7ea	0a		asl a				asl 	a 							; claim twice this.
.a7eb	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a7ed	85 34		sta $34				sta 	basicStack
.a7ef	90 02		bcc $a7f3			bcc 	_SCExit
.a7f1	e6 35		inc $35				inc 	basicStack+1
.a7f3					_SCExit:
.a7f3	60		rts				rts
.a7f4					StackCheckFrame:
.a7f4	48		pha				pha
.a7f5					_StackRemoveLocals:
.a7f5	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a7f7	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a7f9	b0 05		bcs $a800			bcs 	_SCNoLocal
.a7fb	20 fe ae	jsr $aefe			jsr 	LocalPopValue
.a7fe	80 f5		bra $a7f5			bra 	_StackRemoveLocals
.a800					_SCNoLocal:
.a800	68		pla				pla
.a801	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a803	29 f0		and #$f0			and 	#$F0 						; check type bits
.a805	d0 01		bne $a808			bne 	_SCFError 					; different, we have structures mixed up
.a807	60		rts				rts
.a808					_SCFError:
.a808	8a		txa				txa 								; report error X
.a809	4c d9 9a	jmp $9ad9			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a80c					STKSaveCodePosition:
.a80c	5a		phy				phy
.a80d	98		tya				tya 								; save Y
.a80e	a0 05		ldy #$05			ldy 	#5
.a810	91 34		sta ($34),y			sta 	(basicStack),y
.a812	88		dey				dey 								; save Code Pointer
.a813					_STKSaveLoop:
.a813	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a816	91 34		sta ($34),y			sta 	(basicStack),y
.a818	88		dey				dey
.a819	d0 f8		bne $a813			bne 	_STKSaveLoop
.a81b	7a		ply				ply
.a81c	60		rts				rts
.a81d					STKLoadCodePosition:
.a81d	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a81f					_STKLoadLoop:
.a81f	b1 34		lda ($34),y			lda 	(basicStack),y
.a821	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a824	c8		iny				iny
.a825	c0 05		cpy #$05			cpy 	#5
.a827	d0 f6		bne $a81f			bne 	_STKLoadLoop
.a829	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a82b	a8		tay				tay
.a82c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a82d					StackReset:
.a82d	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a82f	85 34		sta $34				sta 	0+basicStack
.a831	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a833	85 35		sta $35				sta 	1+basicStack
.a835	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a837	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a839	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b847					StringConcrete:
.b847	5a		phy				phy 								; save position on stack
.b848	20 ae a3	jsr $a3ae			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b84b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b84e	85 38		sta $38				sta 	zTemp1
.b850	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b853	85 39		sta $39				sta 	zTemp1+1
.b855	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b857					_SALength:
.b857	c8		iny				iny
.b858	b1 38		lda ($38),y			lda 	(zTemp1),y
.b85a	d0 fb		bne $b857			bne 	_SALength
.b85c	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b85e	b0 3f		bcs $b89f			bcs 	_SALengthError
.b860	98		tya				tya 				 				; length of the new string
.b861	18		clc				clc
.b862	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b864	90 02		bcc $b868			bcc 	_SAHaveLength
.b866	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b868					_SAHaveLength:
.b868	48		pha				pha 								; save length.
.b869	38		sec				sec
.b86a	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b86c	6d 8e 04	adc $048e			adc 	StringMemory
.b86f	8d 8e 04	sta $048e			sta 	StringMemory
.b872	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b874	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b877	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b879	6d 8f 04	adc $048f			adc 	StringMemory+1
.b87c	8d 8f 04	sta $048f			sta 	StringMemory+1
.b87f	85 3b		sta $3b				sta 	zTemp2+1
.b881	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b884	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b885	38		sec				sec
.b886	e9 03		sbc #$03			sbc 	#3
.b888	92 3a		sta ($3a)			sta 	(zTemp2)
.b88a	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b88c	a0 01		ldy #$01			ldy 	#1
.b88e	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b890					_SACopyNewString:
.b890	a0 00		ldy #$00			ldy 	#0
.b892					_SACopyNSLoop:
.b892	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b894	c8		iny				iny 								; write two on in string storage
.b895	c8		iny				iny
.b896	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b898	88		dey				dey 								; this makes it one one.
.b899	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b89b	d0 f5		bne $b892			bne 	_SACopyNSLoop
.b89d	7a		ply				ply
.b89e	60		rts				rts
.b89f					_SALengthError:
.b89f	a9 09		lda #$09		lda	#9
.b8a1	4c d9 9a	jmp $9ad9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b8a4					StringSystemInitialise:
.b8a4	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b8a6	8d 8e 04	sta $048e			sta 	0+StringMemory
.b8a9	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b8ab	8d 8f 04	sta $048f			sta 	1+StringMemory
.b8ae	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b8b1	60		rts				rts
.b8b2					StringSpaceInitialise:
.b8b2	20 ae a3	jsr $a3ae			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8b5	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8b7	8d 90 04	sta $0490			sta 	StringInitialised
.b8ba	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b8bd	8d 91 04	sta $0491			sta 	StringTempPointer
.b8c0	ad 8f 04	lda $048f			lda 	StringMemory+1
.b8c3	3a		dec a				dec 	a
.b8c4	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8c7	60		rts				rts
.b8c8					StringTempAllocate:
.b8c8	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8ca	b0 35		bcs $b901			bcs 	_STALength
.b8cc	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b8cf	30 05		bmi $b8d6			bmi 	_STAAllocate
.b8d1	48		pha				pha 								; save value to subtract.
.b8d2	20 b2 b8	jsr $b8b2			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8d5	68		pla				pla 								; restore it
.b8d6					_STAAllocate:
.b8d6	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8d8	18		clc				clc  								; deliberate allows one more
.b8d9	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b8dc	8d 91 04	sta $0491			sta 	StringTempPointer
.b8df	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b8e2	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8e4	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b8e7	69 ff		adc #$ff			adc 	#$FF
.b8e9	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8ec	85 3d		sta $3d				sta 	zsTemp+1
.b8ee	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b8f1	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b8f4	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b8f7	a9 10		lda #$10			lda 	#NSTString
.b8f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b8fc	a9 00		lda #$00			lda 	#0 							; clear the target string
.b8fe	92 3c		sta ($3c)			sta 	(zsTemp)
.b900	60		rts				rts
.b901					_STALength:
.b901	a9 09		lda #$09		lda	#9
.b903	4c d9 9a	jmp $9ad9		jmp	ErrorHandler
.b906					StringTempWrite:
.b906	48		pha				pha
.b907	92 3c		sta ($3c)			sta 	(zsTemp)
.b909	e6 3c		inc $3c				inc 	zsTemp
.b90b	d0 02		bne $b90f			bne 	_STWNoCarry
.b90d	e6 3d		inc $3d				inc 	zsTemp+1
.b90f					_STWNoCarry:
.b90f	a9 00		lda #$00			lda 	#0
.b911	92 3c		sta ($3c)			sta 	(zsTemp)
.b913	68		pla				pla
.b914	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a83a					BackloadProgram:
.a83a	a2 ff		ldx #$ff			ldx 	#$FF
.a83c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a83f	20 69 a8	jsr $a869			jsr 	BLReadByte
.a842	30 1e		bmi $a862			bmi 	_BPExit
.a844					_BPCopy:
.a844	e8		inx				inx  								; copy byte in
.a845	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a848	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a84b	20 69 a8	jsr $a869			jsr 	BLReadByte 					; read next byte
.a84e	30 0a		bmi $a85a			bmi 	_BPEndLine 					; -ve = EOL
.a850	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a852	d0 02		bne $a856			bne 	_BPNotTab
.a854	a9 20		lda #$20			lda 	#' '
.a856					_BPNotTab:
.a856	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a858	b0 ea		bcs $a844			bcs 	_BPCopy
.a85a					_BPEndLine:
.a85a	20 4f ac	jsr $ac4f			jsr 	TokeniseLine 				; tokenise the line.
.a85d	20 11 8c	jsr $8c11			jsr 	EditProgramCode
.a860	80 d8		bra $a83a			bra 	BackloadProgram
.a862					_BPExit:
.a862	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a865	20 cf 8c	jsr $8ccf			jsr 	ClearCommand 				; clear variables etc.
.a868	60		rts				rts
.a869					BLReadByte:
.a869					_BLLoad:
.a869	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a86c	ee 6a a8	inc $a86a			inc 	_BLLoad+1
.a86f	d0 03		bne $a874			bne 	_BLNoCarry
.a871	ee 6b a8	inc $a86b			inc 	_BLLoad+2
.a874					_BLNoCarry:
.a874	c9 00		cmp #$00			cmp 	#0
.a876	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a877					TokeniseSearchTable:
.a877	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a879	85 36		sta $36				sta 	zTemp0
.a87b	a0 00		ldy #$00			ldy 	#0
.a87d	a9 80		lda #$80			lda 	#$80 						; token #
.a87f	85 38		sta $38				sta 	zTemp1
.a881					_TSTLoop:
.a881	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a883	30 49		bmi $a8ce			bmi 	_TSTFail 					; -ve = end of table
.a885	f0 2e		beq $a8b5			beq 	_TSTNext 					; zero, check next it's a dummy
.a887	c8		iny				iny 								; get the hash
.a888	b1 36		lda ($36),y			lda 	(zTemp0),y
.a88a	88		dey				dey
.a88b	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a88e	d0 25		bne $a8b5			bne 	_TSTNext
.a890	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a893	38		sec				sec
.a894	ed 80 04	sbc $0480			sbc 	identStart
.a897	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a899	d0 1a		bne $a8b5			bne 	_TSTNext
.a89b	5a		phy				phy 								; save Y , we might fail
.a89c	c8		iny				iny 								; point to text
.a89d	c8		iny				iny
.a89e	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a8a1					_TSTCompareName:
.a8a1	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a8a4	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a8a6	d0 0c		bne $a8b4			bne 	_TSTNextPullY 				; fail, pullY and do next
.a8a8	e8		inx				inx
.a8a9	c8		iny				iny
.a8aa	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a8ad	d0 f2		bne $a8a1			bne 	_TSTCompareName
.a8af	7a		ply				ply 								; throw Y
.a8b0	a5 38		lda $38				lda 	zTemp1 						; get token #
.a8b2	38		sec				sec 								; return with CS = passed.
.a8b3	60		rts				rts
.a8b4					_TSTNextPullY:
.a8b4	7a		ply				ply 								; restore current, fall through.
.a8b5					_TSTNext:
.a8b5	e6 38		inc $38				inc 	zTemp1 						; token counter
.a8b7	98		tya				tya
.a8b8	18		clc				clc
.a8b9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a8bb	1a		inc a				inc 	a 							; +1
.a8bc	1a		inc a				inc 	a 							; +2
.a8bd	a8		tay				tay
.a8be	10 c1		bpl $a881			bpl 	_TSTLoop 					; if Y < $80 loop back
.a8c0	98		tya				tya 								; add Y to zTemp0 and reset Y
.a8c1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a8c3	18		clc				clc  								; but have tables > 255 bytes
.a8c4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a8c6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a8c8	90 b7		bcc $a881			bcc 	_TSTLoop
.a8ca	e6 37		inc $37				inc 	zTemp0+1
.a8cc	80 b3		bra $a881			bra 	_TSTLoop
.a8ce					_TSTFail:
.a8ce	18		clc				clc
.a8cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a8d0					KeywordSet0:
>a8d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a8dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a8e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a8ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a8f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a8f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a900	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a907	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a90d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a913	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a91b	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a922	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a929	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a930	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a938	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a93e	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a944	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a94b	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a951	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a957	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a95f	28
>a960	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a968	28
>a969	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a96f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a975	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a97b	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a982	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a98a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a990	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a996	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a99b	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a99f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a9a5	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a9ad	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a9b4	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a9bb	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a9c3	43
>a9c4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a9ca	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a9d0	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a9d7	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a9dd	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a9e1	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a9e7	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a9ef	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a9f6	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a9fb	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>aa02	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>aa0a	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>aa10	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>aa15	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>aa1d	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>aa23	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>aa29	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>aa2e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>aa35	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>aa3b	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>aa41	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>aa48	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>aa4d	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>aa53	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>aa5a	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>aa5f	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>aa63	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>aa6b	45
>aa6c	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>aa74	45
>aa75	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>aa7b	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>aa82	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>aa88	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>aa8e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>aa93	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>aa9b	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>aaa2	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>aaaa	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aab0	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aab4	ff					.text	$FF
.aab5					KeywordSet1:
>aab5	00 65					.text	0,$65,""               ; $80 !0:EOF
>aab7	00 58					.text	0,$58,""               ; $81 !1:SH1
>aab9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aabb	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aac3	4c 45
>aac5	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aacd	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aad5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aada	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aae0	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aae5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aaed	45
>aaee	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aaf3	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aafb	53
>aafc	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ab02	ff					.text	$FF
.ab03					KeywordSet2:
>ab03	00 65					.text	0,$65,""               ; $80 !0:EOF
>ab05	00 58					.text	0,$58,""               ; $81 !1:SH1
>ab07	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ab09	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ab0e	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ab13	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ab18	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ab1d	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ab22	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ab27	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ab2c	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ab31	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ab36	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ab3b	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ab40	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ab45	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ab4a	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ab4f	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ab54	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ab59	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ab5e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ab63	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ab68	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ab6d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ab72	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ab77	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ab7c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ab81	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ab86	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ab8b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ab90	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ab95	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>ab9a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>ab9f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aba4	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aba9	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>abae	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>abb3	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>abb8	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>abbd	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>abc2	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>abc7	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>abcc	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>abd1	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>abd6	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>abdb	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>abe0	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>abe5	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>abea	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>abef	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>abf4	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>abf9	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>abfe	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>ac03	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>ac08	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>ac0d	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ac12	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ac17	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ac1c	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ac21	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ac26	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ac2b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ac30	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ac35	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ac3a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ac3f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ac44	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ac49	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ac4e	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ac4f					TokeniseLine:
.ac4f	20 d7 ad	jsr $add7			jsr 	FixLineBufferCase 			; fix line case
.ac52	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ac54	8d a7 04	sta $04a7			sta 	tokenOffset
.ac57	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ac5a	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ac5d	a2 ff		ldx #$ff			ldx 	#$FF
.ac5f					_TKFindFirst:
.ac5f	e8		inx				inx
.ac60	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac63	f0 79		beq $acde			beq 	_TKExit
.ac65	c9 20		cmp #$20			cmp 	#' '
.ac67	90 f6		bcc $ac5f			bcc 	_TKFindFirst
.ac69	c9 30		cmp #$30			cmp 	#'0'
.ac6b	90 07		bcc $ac74			bcc 	_TKNoLineNumber
.ac6d	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac6f	b0 03		bcs $ac74			bcs 	_TKNoLineNumber
.ac71	20 01 ae	jsr $ae01			jsr 	TokeniseExtractLineNumber
.ac74					_TKNoLineNumber:
.ac74					_TKTokeniseLoop:
.ac74	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ac77	f0 65		beq $acde			beq 	_TKExit
.ac79	e8		inx				inx
.ac7a	c9 20		cmp #$20			cmp 	#' '
.ac7c	f0 f6		beq $ac74			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ac7e	ca		dex				dex 								; undo last get, A contains character, X is position.
.ac7f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ac81	f0 61		beq $ace4			beq 	_TKTokeniseIdentifier
.ac83	c9 41		cmp #$41			cmp 	#'A'
.ac85	90 04		bcc $ac8b			bcc 	_TKTokenisePunctuation
.ac87	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ac89	90 59		bcc $ace4			bcc 	_TKTokeniseIdentifier
.ac8b					_TKTokenisePunctuation:
.ac8b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ac8d	f0 27		beq $acb6			beq 	_TKString
.ac8f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ac91	f0 28		beq $acbb			beq 	_TKHexConstant
.ac93	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ac95	f0 29		beq $acc0			beq 	_TKCheckDouble
.ac97	c9 3e		cmp #$3e			cmp 	#'>'
.ac99	f0 25		beq $acc0			beq 	_TKCheckDouble
.ac9b					_TKStandardPunctuation:
.ac9b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ac9e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aca0	90 0e		bcc $acb0			bcc 	_TKNoShift
.aca2	48		pha				pha 								; save
.aca3	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aca5	85 36		sta $36				sta 	zTemp0
.aca7	68		pla				pla
.aca8	29 20		and #$20			and 	#32 						; bit 5
.acaa	4a		lsr a				lsr 	a 							; shift into bit 3
.acab	4a		lsr a				lsr 	a
.acac	05 36		ora $36				ora 	zTemp0
.acae	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.acb0					_TKNoShift:
.acb0	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte 			; write the punctuation character
.acb3	e8		inx				inx 								; consume the character
.acb4	80 be		bra $ac74			bra 	_TKTokeniseLoop 			; and loop round again.
.acb6					_TKString:
.acb6	20 66 ad	jsr $ad66			jsr 	TokeniseString
.acb9	80 b9		bra $ac74			bra 	_TKTokeniseLoop
.acbb					_TKHexConstant:
.acbb	20 a1 ad	jsr $ada1			jsr 	TokeniseHexConstant
.acbe	80 b4		bra $ac74			bra 	_TKTokeniseLoop
.acc0					_TKCheckDouble:
.acc0	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.acc3	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.acc5	90 d4		bcc $ac9b			bcc 	_TKStandardPunctuation
.acc7	c9 3f		cmp #$3f			cmp 	#'>'+1
.acc9	b0 d0		bcs $ac9b			bcs 	_TKStandardPunctuation
.accb	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.acce	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.acd0	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.acd1	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.acd4	38		sec				sec
.acd5	e9 3c		sbc #$3c			sbc 	#'<'
.acd7	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.acda	e8		inx				inx 								; consume both
.acdb	e8		inx				inx
.acdc	80 96		bra $ac74			bra 	_TKTokeniseLoop
.acde	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ace0	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.ace3	60		rts				rts
.ace4					_TKTokeniseIdentifier:
.ace4	8e 80 04	stx $0480			stx 	identStart 					; save start
.ace7	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.acea					_TKCheckLoop:
.acea	e8		inx				inx 								; look at next, we know first is identifier.
.aceb	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.acee	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.acf0	f0 f8		beq $acea			beq 	_TKCheckLoop
.acf2	c9 30		cmp #$30			cmp	 	#"0"
.acf4	90 0c		bcc $ad02			bcc 	_TKEndIdentifier
.acf6	c9 3a		cmp #$3a			cmp 	#"9"+1
.acf8	90 f0		bcc $acea			bcc 	_TKCheckLoop
.acfa	c9 41		cmp #$41			cmp	 	#"A"
.acfc	90 04		bcc $ad02			bcc 	_TKEndIdentifier
.acfe	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ad00	90 e8		bcc $acea			bcc 	_TKCheckLoop
.ad02					_TKEndIdentifier:
.ad02	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ad05	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ad07	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ad09	f0 06		beq $ad11			beq 	_TKHasTypeCharacter
.ad0b	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ad0d	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ad0f	d0 07		bne $ad18			bne 	_TKNoTypeCharacter
.ad11					_TKHasTypeCharacter:
.ad11	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ad14	e8		inx				inx 								; read next
.ad15	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad18					_TKNoTypeCharacter:
.ad18	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ad1a	d0 09		bne $ad25			bne 	_TKNoArray
.ad1c	e8		inx				inx 								; skip the (
.ad1d	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ad20	09 04		ora #$04			ora 	#$04
.ad22	8d 84 04	sta $0484			sta 	identTypeByte
.ad25					_TKNoArray:
.ad25	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ad28	20 c2 ad	jsr $adc2			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ad2b	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.ad2d	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.ad2f	20 77 a8	jsr $a877			jsr 	TokeniseSearchTable
.ad32	a2 00		ldx #$00			ldx 	#0
.ad34	b0 1f		bcs $ad55			bcs 	_TKFoundToken
.ad36	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ad38	a9 b5		lda #$b5			lda 	#(KeywordSet1) & $FF
.ad3a	20 77 a8	jsr $a877			jsr 	TokeniseSearchTable
.ad3d	a2 81		ldx #$81			ldx 	#$81
.ad3f	b0 14		bcs $ad55			bcs 	_TKFoundToken
.ad41	a0 ab		ldy #$ab			ldy 	#(KeywordSet2) >> 8
.ad43	a9 03		lda #$03			lda 	#(KeywordSet2) & $FF
.ad45	20 77 a8	jsr $a877			jsr 	TokeniseSearchTable
.ad48	a2 82		ldx #$82			ldx 	#$82
.ad4a	b0 09		bcs $ad55			bcs 	_TKFoundToken
.ad4c	20 52 ae	jsr $ae52			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ad4f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad52	4c 74 ac	jmp $ac74			jmp 	_TKTokeniseLoop 			; and go round again.
.ad55					_TKFoundToken:
.ad55	48		pha				pha 								; save token
.ad56	8a		txa				txa 								; shift in X, is there one ?
.ad57	f0 03		beq $ad5c			beq 	_TKNoTShift
.ad59	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte 			; if so, write it out
.ad5c					_TKNoTShift:
.ad5c	68		pla				pla 								; restore and write token
.ad5d	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.ad60	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad63	4c 74 ac	jmp $ac74			jmp 	_TKTokeniseLoop 			; and go round again.
.ad66					TokeniseString:
.ad66	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ad68	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.ad6b	e8		inx				inx									; start of quoted string.
.ad6c	da		phx				phx 								; push start of string on top
.ad6d	ca		dex				dex
.ad6e					_TSFindEnd:
.ad6e	e8		inx				inx
.ad6f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ad72	f0 04		beq $ad78			beq 	_TSEndOfString
.ad74	c9 22		cmp #$22			cmp 	#'"'
.ad76	d0 f6		bne $ad6e			bne 	_TSFindEnd
.ad78					_TSEndOfString:
.ad78	7a		ply				ply  								; so now Y is first character, X is character after end.
.ad79	48		pha				pha 								; save terminating character
.ad7a	20 82 ad	jsr $ad82			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ad7d	68		pla				pla 								; terminating character
.ad7e	f0 01		beq $ad81			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ad80	e8		inx				inx
.ad81					_TSNotQuote:
.ad81	60		rts				rts
.ad82					TOWriteBlockXY:
.ad82	86 36		stx $36				stx 	zTemp0 						; write end character
.ad84	98		tya				tya
.ad85	49 ff		eor #$ff			eor 	#$FF
.ad87	38		sec				sec
.ad88	65 36		adc $36				adc 	zTemp0
.ad8a	1a		inc a				inc 	a 							; one extra for NULL
.ad8b	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.ad8e					_TOBlockLoop:
.ad8e	c4 36		cpy $36				cpy 	zTemp0
.ad90	f0 09		beq $ad9b			beq 	_TOBlockExit
.ad92	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ad95	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.ad98	c8		iny				iny
.ad99	80 f3		bra $ad8e			bra 	_TOBlockLoop
.ad9b					_TOBlockExit:
.ad9b	a9 00		lda #$00			lda 	#0
.ad9d	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.ada0	60		rts				rts
.ada1					TokeniseHexConstant:
.ada1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ada3	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.ada6	e8		inx				inx									; start of quoted string.
.ada7	da		phx				phx 								; push start of constant on top
.ada8	ca		dex				dex
.ada9					_THFindLoop:
.ada9	e8		inx				inx
.adaa	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.adad	c9 30		cmp #$30			cmp 	#"0"
.adaf	90 0c		bcc $adbd			bcc 	_THFoundEnd
.adb1	c9 3a		cmp #$3a			cmp 	#"9"+1
.adb3	90 f4		bcc $ada9			bcc 	_THFindLoop
.adb5	c9 41		cmp #$41			cmp 	#"A"
.adb7	90 04		bcc $adbd			bcc 	_THFoundEnd
.adb9	c9 47		cmp #$47			cmp 	#"F"+1
.adbb	90 ec		bcc $ada9			bcc 	_THFindLoop
.adbd					_THFoundEnd:
.adbd	7a		ply				ply 								; restore start
.adbe	20 82 ad	jsr $ad82			jsr 	TOWriteBlockXY 				; output the block
.adc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.adc2					TokeniseCalculateHash:
.adc2	da		phx				phx
.adc3	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.adc6	a9 00		lda #$00			lda 	#0
.adc8					_TCHLoop:
.adc8	18		clc				clc
.adc9	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.adcc	e8		inx				inx
.adcd	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.add0	d0 f6		bne $adc8			bne 	_TCHLoop
.add2	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.add5	fa		plx				plx
.add6	60		rts				rts
.add7					FixLineBufferCase:
.add7	a2 00		ldx #$00			ldx 	#0
.add9					_FLBCLoop:
.add9	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.addc	f0 22		beq $ae00			beq 	_FLBCExit 					; end of string.
.adde	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ade0	f0 11		beq $adf3			beq 	_FLBCInQuotes
.ade2	e8		inx				inx
.ade3	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ade5	90 f2		bcc $add9			bcc 	_FLBCLoop
.ade7	c9 7b		cmp #$7b			cmp 	#'z'+1
.ade9	b0 ee		bcs $add9			bcs 	_FLBCLoop
.adeb	38		sec				sec 								; make U/C
.adec	e9 20		sbc #$20			sbc 	#32
.adee	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.adf1	80 e6		bra $add9			bra 	_FLBCLoop
.adf3					_FLBCInQuotes:
.adf3	e8		inx				inx 								; advance
.adf4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.adf7	f0 07		beq $ae00			beq 	_FLBCExit 					; exit on EOS
.adf9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.adfb	d0 f6		bne $adf3			bne 	_FLBCInQuotes
.adfd	e8		inx				inx 								; skip over it
.adfe	80 d9		bra $add9			bra 	_FLBCLoop
.ae00					_FLBCExit:
.ae00	60		rts				rts
.ae01					TokeniseExtractLineNumber:
.ae01	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.ae04	48		pha				pha
.ae05	ad a8 04	lda $04a8			lda 	tokenLineNumber
.ae08	48		pha				pha
.ae09	20 3f ae	jsr $ae3f			jsr 	_TELNTimes2 				; line # x 4
.ae0c	20 3f ae	jsr $ae3f			jsr 	_TELNTimes2 				; line # x 2
.ae0f	18		clc				clc 								; add stacked value
.ae10	68		pla				pla
.ae11	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae14	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae17	68		pla				pla
.ae18	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ae1b	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ae1e	20 3f ae	jsr $ae3f			jsr 	_TELNTimes2 				; line # x 10
.ae21	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ae24	e8		inx				inx
.ae25	29 0f		and #$0f			and 	#15 						; add to line #
.ae27	18		clc				clc
.ae28	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae2b	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae2e	90 03		bcc $ae33			bcc 	_TLENNoCarry
.ae30	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ae33					_TLENNoCarry:
.ae33	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ae36	c9 30		cmp #$30			cmp 	#'0'
.ae38	90 04		bcc $ae3e			bcc 	_TLENExit
.ae3a	c9 3a		cmp #$3a			cmp 	#'9'+1
.ae3c	90 c3		bcc $ae01			bcc 	TokeniseExtractLineNumber
.ae3e					_TLENExit:
.ae3e	60		rts				rts
.ae3f					_TELNTimes2:
.ae3f	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ae42	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ae45	60		rts				rts
.ae46					TokeniseWriteByte:
.ae46	da		phx				phx
.ae47	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ae4a	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ae4d	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ae50	fa		plx				plx
.ae51	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ae52					CheckCreateVariableRecord:
.ae52	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ae54	85 36		sta $36				sta 	0+zTemp0
.ae56	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ae58	85 37		sta $37				sta 	1+zTemp0
.ae5a					_CCVSearch:
.ae5a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ae5c	f0 2c		beq $ae8a			beq 	_CCVFail
.ae5e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ae60	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ae62	cd 83 04	cmp $0483			cmp 	identHash
.ae65	d0 16		bne $ae7d			bne 	_CCVNext
.ae67	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ae69	ae 80 04	ldx $0480			ldx 	identStart
.ae6c					_CCVCompare:
.ae6c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ae6f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ae71	e8		inx				inx 								; advance pointers
.ae72	c8		iny				iny
.ae73	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ae74	d0 07		bne $ae7d			bne 	_CCVNext  					; didn't match go to next.
.ae76	90 f4		bcc $ae6c			bcc 	_CCVCompare 				; not finished yet.
.ae78	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ae7b	f0 41		beq $aebe			beq 	_CCVFound 					; yes, we were successful
.ae7d					_CCVNext:
.ae7d	18		clc				clc
.ae7e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ae80	65 36		adc $36				adc 	zTemp0
.ae82	85 36		sta $36				sta 	zTemp0
.ae84	90 d4		bcc $ae5a			bcc 	_CCVSearch
.ae86	e6 37		inc $37				inc 	zTemp0+1
.ae88	80 d0		bra $ae5a			bra 	_CCVSearch
.ae8a					_CCVFail:
.ae8a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ae8c	ad 83 04	lda $0483			lda 	identHash
.ae8f	91 36		sta ($36),y			sta 	(zTemp0),y
.ae91	c8		iny				iny 								; offset 2 is the type byte
.ae92	ad 84 04	lda $0484			lda 	identTypeByte
.ae95	91 36		sta ($36),y			sta 	(zTemp0),y
.ae97	c8		iny				iny
.ae98					_CCVData:
.ae98	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ae9a	91 36		sta ($36),y			sta 	(zTemp0),y
.ae9c	c8		iny				iny
.ae9d	c0 08		cpy #$08			cpy 	#8
.ae9f	90 f7		bcc $ae98			bcc 	_CCVData
.aea1	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.aea4					_CCVCopyName:
.aea4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.aea7	91 36		sta ($36),y			sta 	(zTemp0),y
.aea9	e8		inx				inx
.aeaa	c8		iny				iny
.aeab	ec 82 04	cpx $0482			cpx 	identTypeEnd
.aeae	d0 f4		bne $aea4			bne 	_CCVCopyName
.aeb0	98		tya				tya 								; patch offset
.aeb1	92 36		sta ($36)			sta 	(zTemp0)
.aeb3	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.aeb5	91 36		sta ($36),y			sta 	(zTemp0),y
.aeb7	88		dey				dey
.aeb8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.aeba	09 80		ora #$80			ora 	#$80
.aebc	91 36		sta ($36),y			sta 	(zTemp0),y
.aebe					_CCVFound:
.aebe	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.aec0	38		sec				sec
.aec1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aec3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aec5	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.aec8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.aeca	20 46 ae	jsr $ae46			jsr 	TokeniseWriteByte
.aecd	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
