
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 11:21:02 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_CALL                             = $a6; $a6 CALL
=$a7					KWD_CIRCLE                           = $a7; $a7 CIRCLE
=$a8					KWD_CLS                              = $a8; $a8 CLS
=$a9					KWD_COLOR                            = $a9; $a9 COLOR
=$aa					KWD_COLOUR                           = $aa; $aa COLOUR
=$ab					KWD_DATA                             = $ab; $ab DATA
=$ac					KWD_DIM                              = $ac; $ac DIM
=$ad					KWD_DOWNTO                           = $ad; $ad DOWNTO
=$ae					KWD_ELSE                             = $ae; $ae ELSE
=$af					KWD_GOSUB                            = $af; $af GOSUB
=$b0					KWD_GOTO                             = $b0; $b0 GOTO
=$b1					KWD_HERE                             = $b1; $b1 HERE
=$b2					KWD_HIDE                             = $b2; $b2 HIDE
=$b3					KWD_LET                              = $b3; $b3 LET
=$b4					KWD_LINE                             = $b4; $b4 LINE
=$b5					KWD_LOCAL                            = $b5; $b5 LOCAL
=$b6					KWD_OUTLINE                          = $b6; $b6 OUTLINE
=$b7					KWD_PRINT                            = $b7; $b7 PRINT
=$b8					KWD_READ                             = $b8; $b8 READ
=$b9					KWD_RECT                             = $b9; $b9 RECT
=$ba					KWD_REM                              = $ba; $ba REM
=$bb					KWD_RETURN                           = $bb; $bb RETURN
=$bc					KWD_SCALE                            = $bc; $bc SCALE
=$bd					KWD_SHOW                             = $bd; $bd SHOW
=$be					KWD_SOLID                            = $be; $be SOLID
=$bf					KWD_SPRITE                           = $bf; $bf SPRITE
=$c0					KWD_TEXT                             = $c0; $c0 TEXT
=$c1					KWD_TO                               = $c1; $c1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 2e 95	jsr $952e			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 9a 87	jsr $879a			jsr 	RunDemos
.8013	20 eb 8e	jsr $8eeb			jsr 	NewCommand 					; erase current program
.8016	20 b3 a1	jsr $a1b3			jsr 	BackloadProgram
.8019	4c 47 8a	jmp $8a47			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1349."
>8064	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8074	32 2e 20 42 75 69 6c 64 20 31 33 34 39 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gzTemp0+1
.808d	80 3d		bra $80cc			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	f0 07		beq $80b8			beq 	_GDXOkay 					; check X range
.80b1	ad 29 06	lda $0629			lda 	gxCurrentX
.80b4	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b6	b0 1a		bcs $80d2			bcs 	_GDError
.80b8					_GDXOkay:
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bb	cd 3a 06	cmp $063a			cmp 	gxHeight
.80be	b0 12		bcs $80d2			bcs 	_GDError
.80c0	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c2					_GDCopy2:
.80c2	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c5	9d 31 06	sta $0631,x			sta 	gxX0,x
.80c8	ca		dex				dex
.80c9	10 f7		bpl $80c2			bpl 	_GDCopy2
.80cb	68		pla				pla 								; get command back
.80cc					_GDExecuteA:
.80cc	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80ce	aa		tax				tax
.80cf	7c d8 80	jmp ($80d8,x)			jmp 	(GRVectorTable,x)
.80d2					_GDError:
.80d2	68		pla				pla 								; throw command
.80d3	38		sec				sec
.80d4	60		rts				rts
.80d5					GXMove:
.80d5	18		clc				clc
.80d6	60		rts				rts
.80d7					GRUndefined:
>80d7	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

.80d8					GRVectorTable:
>80d8	a5 82					.word	GXControlBitmap          ; $00 BITMAPCTL
>80da	d7 80					.word	GRUndefined              ; $01
>80dc	5e 82					.word	GXClearBitmap            ; $02 Clear
>80de	23 84					.word	GXSetColourMode          ; $03 Colour
>80e0	d9 85					.word	GXFontHandler            ; $04 DrawFont
>80e2	21 86					.word	GXSpriteHandler          ; $05 DrawSprite
>80e4	d7 80					.word	GRUndefined              ; $06
>80e6	d7 80					.word	GRUndefined              ; $07
>80e8	d7 80					.word	GRUndefined              ; $08
>80ea	d7 80					.word	GRUndefined              ; $09
>80ec	d7 80					.word	GRUndefined              ; $0a
>80ee	d7 80					.word	GRUndefined              ; $0b
>80f0	d7 80					.word	GRUndefined              ; $0c
>80f2	d7 80					.word	GRUndefined              ; $0d
>80f4	d7 80					.word	GRUndefined              ; $0e
>80f6	d7 80					.word	GRUndefined              ; $0f
>80f8	d5 80					.word	GXMove                   ; $10 Move
>80fa	f8 82					.word	GXLine                   ; $11 Line
>80fc	6c 84					.word	GXFrameRectangle         ; $12 FrameRect
>80fe	69 84					.word	GXFillRectangle          ; $13 FillRect
>8100	1c 81					.word	GXFrameCircle            ; $14 FrameCircle
>8102	18 81					.word	GXFillCircle             ; $15 FillCircle
>8104	d7 80					.word	GRUndefined              ; $16
>8106	d7 80					.word	GRUndefined              ; $17
>8108	51 84					.word	GXPlotPoint              ; $18 Plot
>810a	d7 80					.word	GRUndefined              ; $19
>810c	d7 80					.word	GRUndefined              ; $1a
>810e	d7 80					.word	GRUndefined              ; $1b
>8110	d7 80					.word	GRUndefined              ; $1c
>8112	d7 80					.word	GRUndefined              ; $1d
>8114	d7 80					.word	GRUndefined              ; $1e
>8116	d7 80					.word	GRUndefined              ; $1f

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8118					GXFillCircle:
.8118	a9 ff		lda #$ff			lda 	#255
.811a	80 02		bra $811e			bra 	GXCircle
.811c					GXFrameCircle:
.811c	a9 00		lda #$00			lda 	#0
.811e					GXCircle:
.811e	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.8121	20 59 87	jsr $8759			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 8e 86	jsr $868e			jsr 	GXOpenBitmap 				; start drawing
.8127	20 17 82	jsr $8217			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 46 06	stz $0646			stz 	gYChanged
.812d					_GXCircleDraw:
.812d	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.8130	cd 44 06	cmp $0644			cmp 	gY
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4a 81	jsr $814a			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 9f 86	jsr $869f			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 47 81	jsr $8147			jsr 	GXPlot2 					; draw it
.8142	20 c4 81	jsr $81c4			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					GXPlot2:
.8147	20 4a 81	jsr $814a			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814a					GXPlot1:
.814a	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.814d	f0 03		beq $8152			beq 	_GXPlot1Only
.814f	20 6e 81	jsr $816e			jsr 	GXPlot0 						; plot and negate
.8152					_GXPlot1Only:
.8152	20 6e 81	jsr $816e			jsr 	GXPlot0 						; twice, undoing negation
.8155	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.8158	ae 44 06	ldx $0644			ldx	 	gY
.815b	8d 44 06	sta $0644			sta 	gY
.815e	8e 43 06	stx $0643			stx 	gX
.8161	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.8164	a9 ff		lda #$ff			lda 	#$FF
.8166	8d 46 06	sta $0646			sta 	gYChanged
.8169	60		rts				rts
.816a	20 6e 81	jsr $816e			jsr 	GXPlot0 						; do once
.816d	60		rts				rts
.816e	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.8171	f0 05		beq $8178			beq 	_GXPlot0Always
.8173	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.8176	f0 2d		beq $81a5			beq 	GXPlot0Exit
.8178					_GXPlot0Always:
.8178	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817a	ad 44 06	lda $0644			lda 	gY
.817d	20 a6 81	jsr $81a6			jsr 	GXSubCopy
.8180	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8182	ad 43 06	lda $0643			lda 	gX
.8185	20 a6 81	jsr $81a6			jsr 	GXSubCopy
.8188	48		pha				pha 									; save last offset X
.8189	20 ac 86	jsr $86ac			jsr 	GXPositionCalc 					; calculate position/offset.
.818c	68		pla				pla
.818d	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.818e	85 36		sta $36				sta 	gzTemp0
.8190	64 37		stz $37				stz 	gzTemp0+1
.8192	26 37		rol $37				rol 	gzTemp0+1
.8194	ad 45 06	lda $0645			lda 	gIsFillMode
.8197	69 80		adc #$80			adc 	#128
.8199	20 b5 84	jsr $84b5			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819c	38		sec				sec 									; GY = -GY
.819d	a9 00		lda #$00			lda 	#0
.819f	ed 44 06	sbc $0644			sbc 	gY
.81a2	8d 44 06	sta $0644			sta 	gY
.81a5					GXPlot0Exit:
.81a5	60		rts				rts
.81a6					GXSubCopy:
.81a6	85 36		sta $36				sta 	gzTemp0
.81a8	64 37		stz $37				stz 	gzTemp0+1
.81aa	29 80		and #$80			and 	#$80
.81ac	f0 02		beq $81b0			beq 	_GXNoSx
.81ae	c6 37		dec $37				dec 	gzTemp0+1
.81b0					_GXNoSx:
.81b0	38		sec				sec
.81b1	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b4	e5 36		sbc $36				sbc 	gzTemp0
.81b6	9d 31 06	sta $0631,x			sta 	gXX0,x
.81b9	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81bc	e5 37		sbc $37				sbc 	gzTemp0+1
.81be	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c1	a5 36		lda $36				lda 	gzTemp0 						; return A
.81c3	60		rts				rts
.81c4					GXCircleMove:
.81c4	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.81c7	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.81c9	10 0d		bpl $81d8			bpl 	_GXEMPositive
.81cb	ee 43 06	inc $0643			inc 	gX 							; X++
.81ce	ad 43 06	lda $0643			lda 	gX
.81d1	20 f7 81	jsr $81f7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d4	a9 06		lda #$06			lda 	#6  						; and add 6
.81d6	80 15		bra $81ed			bra 	_GXEMAddD
.81d8					_GXEMPositive:
.81d8	ee 43 06	inc $0643			inc 	gX 							; X++
.81db	ce 44 06	dec $0644			dec 	gy 							; Y--
.81de	38		sec				sec 								; calculate X-Y
.81df	ad 43 06	lda $0643			lda 	gX
.81e2	ed 44 06	sbc $0644			sbc 	gY
.81e5	20 f7 81	jsr $81f7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81e8	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ea	ce 46 06	dec $0646			dec 	gYChanged
.81ed					_GXEMAddD:
.81ed	18		clc				clc
.81ee	65 38		adc $38				adc 	gzTemp1
.81f0	85 38		sta $38				sta 	gzTemp1
.81f2	90 02		bcc $81f6			bcc 	_GXEMNoCarry
.81f4	e6 39		inc $39				inc 	gzTemp1+1
.81f6					_GXEMNoCarry:
.81f6	60		rts				rts
.81f7					_GXAdd4TimesToD:
.81f7	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.81f9	29 80		and #$80			and 	#$80
.81fb	f0 02		beq $81ff			beq 	_GXA4Unsigned
.81fd	a9 ff		lda #$ff			lda 	#$FF
.81ff					_GXA4Unsigned:
.81ff	85 37		sta $37				sta 	gzTemp0+1
.8201	06 36		asl $36				asl 	gzTemp0  					; x 4
.8203	26 37		rol $37				rol 	gzTemp0+1
.8205	06 36		asl $36				asl 	gzTemp0
.8207	26 37		rol $37				rol 	gzTemp0+1
.8209	18		clc				clc 								; add
.820a	a5 36		lda $36				lda		gzTemp0
.820c	65 38		adc $38				adc 	gzTemp1
.820e	85 38		sta $38				sta 	gzTemp1
.8210	a5 37		lda $37				lda		gzTemp0+1
.8212	65 39		adc $39				adc 	gzTemp1+1
.8214	85 39		sta $39				sta 	gzTemp1+1
.8216	60		rts				rts
.8217					GXCircleSetup:
.8217	38		sec				sec
.8218	ad 37 06	lda $0637			lda 	gxY1
.821b	ed 33 06	sbc $0633			sbc 	gxY0
.821e	4a		lsr a				lsr 	a
.821f	8d 42 06	sta $0642			sta 	gRadius
.8222	a2 00		ldx #$00			ldx 	#0
.8224	20 46 82	jsr $8246			jsr 	_GXCalculateCentre
.8227	a2 02		ldx #$02			ldx 	#2
.8229	20 46 82	jsr $8246			jsr 	_GXCalculateCentre
.822c	9c 43 06	stz $0643			stz 	gX
.822f	ad 42 06	lda $0642			lda 	gRadius
.8232	8d 44 06	sta $0644			sta 	gY
.8235	0a		asl a				asl 	a 							; R x 2
.8236	85 36		sta $36				sta 	gzTemp0
.8238	38		sec				sec
.8239	a9 03		lda #$03			lda 	#3
.823b	e5 36		sbc $36				sbc 	gzTemp0
.823d	85 38		sta $38				sta 	gzTemp1
.823f	a9 00		lda #$00			lda 	#0
.8241	e9 00		sbc #$00			sbc 	#0
.8243	85 39		sta $39				sta 	gzTemp1+1
.8245	60		rts				rts
.8246					_GXCalculateCentre:
.8246	38		sec				sec
.8247	bd 35 06	lda $0635,x			lda 	gxX1,x
.824a	7d 31 06	adc $0631,x			adc 	gXX0,x
.824d	9d 35 06	sta $0635,x			sta 	gXX1,x
.8250	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8253	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8256	4a		lsr a				lsr 	a
.8257	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825a	7e 35 06	ror $0635,x			ror 	gXX1,x
.825d	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.825e					GXClearBitmap:
.825e	20 8e 86	jsr $868e			jsr 	GXOpenBitmap 				; start access
.8261	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8263	ad 3a 06	lda $063a			lda 	gxHeight
.8266	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8268	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.826a					_GXCalcLastPage:
.826a	98		tya				tya 								; add to base page
.826b	18		clc				clc
.826c	6d 39 06	adc $0639			adc 	gxBasePage
.826f	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8271					_GXClearAll:
.8271	20 82 82	jsr $8282			jsr 	_GXClearBlock 				; clear 8k block
.8274	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.8276	a5 0b		lda $0b				lda 	GFXEditSlot
.8278	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.827b	b0 f4		bcs $8271			bcs 	_GXClearAll
.827d	20 9f 86	jsr $869f			jsr 	GXCloseBitmap	 			; stop access
.8280	18		clc				clc
.8281	60		rts				rts
.8282					_GXClearBlock:
.8282	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8284	85 38		sta $38				sta 	0+gzTemp1
.8286	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8288	85 39		sta $39				sta 	1+gzTemp1
.828a					_GXCB0:
.828a	a5 36		lda $36				lda 	gzTemp0
.828c	a0 00		ldy #$00			ldy 	#0
.828e					_GXCB1:
.828e	91 38		sta ($38),y			sta 	(gzTemp1),y
.8290	c8		iny				iny
.8291	91 38		sta ($38),y			sta 	(gzTemp1),y
.8293	c8		iny				iny
.8294	91 38		sta ($38),y			sta 	(gzTemp1),y
.8296	c8		iny				iny
.8297	91 38		sta ($38),y			sta 	(gzTemp1),y
.8299	c8		iny				iny
.829a	d0 f2		bne $828e			bne 	_GXCB1
.829c	e6 39		inc $39				inc 	gzTemp1+1
.829e	a5 39		lda $39				lda 	gzTemp1+1
.82a0	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82a2	d0 e6		bne $828a			bne 	_GXCB0
.82a4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82a5					GXControlBitmap:
.82a5	64 01		stz $01				stz 	1
.82a7	a6 36		ldx $36				ldx 	gzTemp0 					; get control bits
.82a9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82aa	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82ad	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82af	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82b1	b0 02		bcs $82b5			bcs 	_CBNotOn
.82b3	09 08		ora #$08			ora 	#$08 						; bitmap on if 0 (default), 1 turns off.
.82b5					_CBNotOn:
.82b5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82b8	a5 36		lda $36				lda 	gzTemp0 					; get control settings (bits 0-2)
.82ba	29 07		and #$07			and 	#7
.82bc	49 01		eor #$01			eor 	#1 							; bitmap enable works backwards.
.82be	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82c1	a5 37		lda $37				lda 	gzTemp0+1 					; get the base page
.82c3	d0 02		bne $82c7			bne 	_CBNotDefault
.82c5	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82c7					_CBNotDefault:
.82c7	8d 39 06	sta $0639			sta 	gxBasePage
.82ca	20 ea 82	jsr $82ea			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82cd	a5 37		lda $37				lda 	gzTemp0+1 					; copy address into Bitmap address registers
.82cf	8d 03 d1	sta $d103			sta 	$D103
.82d2	a5 36		lda $36				lda 	gzTemp0
.82d4	8d 02 d1	sta $d102			sta 	$D102
.82d7	9c 01 d1	stz $d101			stz 	$D101
.82da	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82dc	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.82df	29 01		and #$01			and 	#1
.82e1	f0 02		beq $82e5			beq 	_CBHaveHeight
.82e3	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.82e5					_CBHaveHeight
.82e5	8e 3a 06	stx $063a			stx 	gxHeight
.82e8	18		clc				clc
.82e9	60		rts				rts
.82ea					GXCalculateBaseAddress:
.82ea	85 36		sta $36				sta 	gzTemp0
.82ec	64 37		stz $37				stz 	gzTemp0+1
.82ee	a9 05		lda #$05			lda 	#5
.82f0					_GXShift:
.82f0	06 36		asl $36				asl 	gzTemp0
.82f2	26 37		rol $37				rol 	gzTemp0+1
.82f4	3a		dec a				dec		a
.82f5	d0 f9		bne $82f0			bne 	_GXShift
.82f7	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.82f8					GXLine:
.82f8	20 8e 86	jsr $868e			jsr 	GXOpenBitmap
.82fb	20 77 87	jsr $8777			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.82fe	20 c4 83	jsr $83c4			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8301	20 ac 86	jsr $86ac			jsr 	GXPositionCalc 				; calculate position/offset.
.8304					_GXDrawLoop:
.8304	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8307	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8309	2d 3e 06	and $063e			and 	gxANDValue
.830c	4d 3d 06	eor $063d			eor 	gxEORValue
.830f	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8311	20 20 83	jsr $8320			jsr 	GXLineIsComplete 			; is the line complete ?
.8314	f0 05		beq $831b			beq 	_GXLExit
.8316	20 3b 83	jsr $833b			jsr 	GXLineAdvance 				; code as per advance method
.8319	80 e9		bra $8304			bra 	_GXDrawLoop
.831b					_GXLExit:
.831b	20 9f 86	jsr $869f			jsr 	GXCloseBitmap
.831e	18		clc				clc
.831f	60		rts				rts
.8320					GXLineIsComplete:
.8320	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.8323	d0 0f		bne $8334			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8325	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8328	4d 35 06	eor $0635			eor 	GXX1
.832b	d0 06		bne $8333			bne 	_GXLICExit
.832d	ad 32 06	lda $0632			lda 	GXX0+1
.8330	4d 36 06	eor $0636			eor 	GXX1+1
.8333					_GXLICExit:
.8333	60		rts				rts
.8334					_GXLICCompareY:
.8334	ad 37 06	lda $0637			lda 	GXY1
.8337	4d 33 06	eor $0633			eor 	GXY0
.833a	60		rts				rts
.833b					GXLineAdvance:
.833b	18		clc				clc 								; add adjust to position
.833c	ad 4b 06	lda $064b			lda 	GXPosition
.833f	6d 4c 06	adc $064c			adc 	GXAdjust
.8342	8d 4b 06	sta $064b			sta 	GXPosition
.8345	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8348	b0 05		bcs $834f			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.834a	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.834d	90 0a		bcc $8359			bcc 	_GXLANoExtra
.834f					_GXLAOverflow:
.834f	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.8352	38		sec				sec 								; subtract total and write back
.8353	ed 4d 06	sbc $064d			sbc 	GXTotal
.8356	8d 4b 06	sta $064b			sta 	GXPosition
.8359					_GXLANoExtra:
.8359	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.835c	f0 0d		beq $836b			beq 	_GXDXLarger
.835e	20 bd 83	jsr $83bd			jsr 	GXIncrementY
.8361	ad 4e 06	lda $064e			lda 	GXAddSelect
.8364	f0 10		beq $8376			beq 	_GXLAExit
.8366	20 77 83	jsr $8377			jsr 	GXAdjustX
.8369	80 0b		bra $8376			bra 	_GXLAExit
.836b					_GXDXLarger:
.836b	20 77 83	jsr $8377			jsr 	GXAdjustX
.836e	ad 4e 06	lda $064e			lda 	GXAddSelect
.8371	f0 03		beq $8376			beq 	_GXLAExit
.8373	20 bd 83	jsr $83bd			jsr 	GXIncrementY
.8376					_GXLAExit:
.8376	60		rts				rts
.8377					GXAdjustX:
.8377	ad 4a 06	lda $064a			lda 	GXDXNegative
.837a	10 25		bpl $83a1			bpl 	_GXAXRight
.837c	ad 31 06	lda $0631			lda 	GXX0
.837f	d0 03		bne $8384			bne 	_GXAXNoBorrow
.8381	ce 32 06	dec $0632			dec 	GXX0+1
.8384					_GXAXNoBorrow:
.8384	ce 31 06	dec $0631			dec 	GXX0
.8387	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.838a	ad 41 06	lda $0641			lda 	gsOffset
.838d	c9 ff		cmp #$ff			cmp 	#$FF
.838f	d0 0f		bne $83a0			bne 	_GXAYExit 					; underflow
.8391	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.8393	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.8395	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8397	b0 07		bcs $83a0			bcs 	_GXAYExit
.8399	18		clc				clc
.839a	69 20		adc #$20			adc 	#$20 						; fix up
.839c	85 3d		sta $3d				sta 	gsTemp+1
.839e	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.83a0					_GXAYExit:
.83a0	60		rts				rts
.83a1					_GXAXRight:
.83a1	ee 31 06	inc $0631			inc 	GXX0
.83a4	d0 03		bne $83a9			bne 	_GXAXNoCarry
.83a6	ee 32 06	inc $0632			inc 	GXX0+1
.83a9					_GXAXNoCarry:
.83a9	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.83ac	d0 0e		bne $83bc			bne 	_GXAXExit 					; if not overflowed, exit.
.83ae	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.83b0	a5 3d		lda $3d				lda 	gsTemp+1
.83b2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.83b4	90 06		bcc $83bc			bcc 	_GXAXExit
.83b6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83b8	85 3d		sta $3d				sta 	gsTemp+1
.83ba	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.83bc					_GXAXExit:
.83bc	60		rts				rts
.83bd					GXIncrementY:
.83bd	ee 33 06	inc $0633			inc 	GXY0
.83c0	20 02 87	jsr $8702			jsr 	GXMovePositionDown
.83c3	60		rts				rts
.83c4					GXLineSetup:
.83c4	ad 37 06	lda $0637			lda 	GXY1
.83c7	38		sec				sec
.83c8	ed 33 06	sbc $0633			sbc 	GXY0
.83cb	4a		lsr a				lsr 	a
.83cc	8d 48 06	sta $0648			sta 	GXDiffY
.83cf	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.83d2	38		sec				sec
.83d3	ad 35 06	lda $0635			lda 	GXX1
.83d6	ed 31 06	sbc $0631			sbc 	GXX0
.83d9	8d 47 06	sta $0647			sta 	GXDiffX
.83dc	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.83df	ed 32 06	sbc $0632			sbc 	GXX0+1
.83e2	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.83e3	6e 47 06	ror $0647			ror 	GXDiffX
.83e6	0a		asl a				asl 	a
.83e7	10 0c		bpl $83f5			bpl 	_GDXNotNegative
.83e9	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.83eb	38		sec				sec
.83ec	ed 47 06	sbc $0647			sbc 	GXDiffX
.83ef	8d 47 06	sta $0647			sta 	GXDiffX
.83f2	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.83f5					_GDXNotNegative:
.83f5	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.83f8	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.83fb	8d 4c 06	sta $064c			sta 	GXAdjust
.83fe	ad 47 06	lda $0647			lda 	GXDiffX
.8401	8d 4d 06	sta $064d			sta 	GXTotal
.8404	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8407	cd 47 06	cmp $0647			cmp 	GXDiffX
.840a	90 0f		bcc $841b			bcc 	_GDXNotLarger
.840c	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.840f	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.8412	8d 4c 06	sta $064c			sta 	GXAdjust
.8415	ad 48 06	lda $0648			lda 	GXDiffY
.8418	8d 4d 06	sta $064d			sta 	GXTotal
.841b					_GDXNotLarger:
.841b	ad 4d 06	lda $064d			lda 	GXTotal
.841e	4a		lsr a				lsr 	a
.841f	8d 4b 06	sta $064b			sta 	GXPosition
.8422	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8423					GXSetColourMode:
.8423	a6 36		ldx $36				ldx 	gzTemp0
.8425	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.8428	a5 37		lda $37				lda 	gzTemp0+1 								;
.842a	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.842d	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.842f	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8432	ae 3c 06	ldx $063c			ldx 	gxColour
.8435	8e 3d 06	stx $063d			stx 	gxEORValue
.8438	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.843a	90 03		bcc $843f			bcc 	_GXSDCNotAndColour
.843c	8e 3e 06	stx $063e			stx 	gxANDValue
.843f					_GXSDCNotAndColour:
.843f	d0 03		bne $8444			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.8441	9c 3d 06	stz $063d			stz 	gxEORValue
.8444					_GXSDCNotAnd:
.8444	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8445	90 08		bcc $844f			bcc 	_GXSDCNoFlip
.8447	ad 3e 06	lda $063e			lda	 	gxANDValue
.844a	49 ff		eor #$ff			eor 	#$FF
.844c	8d 3e 06	sta $063e			sta 	gxANDValue
.844f					_GXSDCNoFlip:
.844f	18		clc				clc
.8450	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.8451					GXPlotPoint:
.8451	20 8e 86	jsr $868e			jsr 	GXOpenBitmap 				; start drawing
.8454	20 ac 86	jsr $86ac			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.8457	ac 41 06	ldy $0641			ldy 	gsOffset
.845a	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.845c	2d 3e 06	and $063e			and 	gxANDValue
.845f	4d 3d 06	eor $063d			eor 	gxEORValue
.8462	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8464	20 9f 86	jsr $869f			jsr 	GXCloseBitmap 				; stop drawing and exit
.8467	18		clc				clc
.8468	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.8469					GXFillRectangle:
.8469	38		sec				sec
.846a	80 01		bra $846d			bra 	GXRectangle
.846c					GXFrameRectangle:
.846c	18		clc				clc
.846d					GXRectangle:
.846d	08		php				php 								; save Fill flag (CS)
.846e	20 8e 86	jsr $868e			jsr 	GXOpenBitmap 				; start drawing
.8471	20 59 87	jsr $8759			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8474	20 ac 86	jsr $86ac			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.8477	38		sec				sec 								; sec = Draw line
.8478	20 a2 84	jsr $84a2			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.847b	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.847e	cd 37 06	cmp $0637			cmp 	gxY1
.8481	f0 19		beq $849c			beq 	_GXRectangleExit
.8483					_GXRectLoop:
.8483	20 02 87	jsr $8702			jsr 	GXMovePositionDown 			; down one.
.8486	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.8489	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.848c	cd 37 06	cmp $0637			cmp 	gXY1
.848f	f0 07		beq $8498			beq 	_GXLastLine
.8491	28		plp				plp 								; get flag back
.8492	08		php				php
.8493	20 a2 84	jsr $84a2			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8496	80 eb		bra $8483			bra 	_GXRectLoop
.8498					_GXLastLine:
.8498	38		sec				sec
.8499	20 a2 84	jsr $84a2			jsr 	GXDrawLineX1X0
.849c					_GXRectangleExit:
.849c	68		pla				pla 								; throw fill flag.
.849d	20 9f 86	jsr $869f			jsr 	GXCloseBitmap 				; stop drawing and exit
.84a0	18		clc				clc
.84a1	60		rts				rts
.84a2					GXDrawLineX1X0:
.84a2	08		php				php 								; save solid/either-end
.84a3	38		sec				sec
.84a4	ad 35 06	lda $0635			lda		gXX1
.84a7	ed 31 06	sbc $0631			sbc 	gXX0
.84aa	85 36		sta $36				sta 	gzTemp0
.84ac	ad 36 06	lda $0636			lda 	gXX1+1
.84af	ed 32 06	sbc $0632			sbc 	gXX0+1
.84b2	85 37		sta $37				sta 	gzTemp0+1
.84b4	28		plp				plp
.84b5					GXDrawLineTemp0:
.84b5	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.84b7	48		pha				pha
.84b8	a5 3d		lda $3d				lda 	gsTemp+1
.84ba	48		pha				pha
.84bb	ad 41 06	lda $0641			lda 	gsOffset
.84be	48		pha				pha
.84bf	a5 0b		lda $0b				lda 	GFXEditSlot
.84c1	48		pha				pha
.84c2	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.84c5	90 1e		bcc $84e5			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.84c7					_GXDLTLine:
.84c7	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.84c9	2d 3e 06	and $063e			and 	gxANDValue
.84cc	4d 3d 06	eor $063d			eor 	gxEORValue
.84cf	91 3c		sta ($3c),y			sta 	(gsTemp),y
.84d1	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.84d3	d0 04		bne $84d9			bne 	_GXDLTNoBorrow
.84d5	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.84d7	30 2e		bmi $8507			bmi 	_GXDLTExit
.84d9					_GXDLTNoBorrow:
.84d9	c6 36		dec $36				dec 	gzTemp0
.84db	c8		iny				iny 								; next slot.
.84dc	d0 e9		bne $84c7			bne 	_GXDLTLine
.84de	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.84e0	20 15 85	jsr $8515			jsr 	GXDLTCheckWrap				; check for new page.
.84e3	80 e2		bra $84c7			bra 	_GXDLTLine
.84e5					_GXDLTEndPoints:
.84e5	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.84e7	2d 3e 06	and $063e			and 	gxANDValue
.84ea	4d 3d 06	eor $063d			eor 	gxEORValue
.84ed	91 3c		sta ($3c),y			sta 	(gsTemp),y
.84ef	98		tya				tya 								; advance to right side
.84f0	18		clc				clc
.84f1	65 36		adc $36				adc 	gzTemp0
.84f3	a8		tay				tay
.84f4	a5 3d		lda $3d				lda 	gsTemp+1
.84f6	65 37		adc $37				adc 	gzTemp0+1
.84f8	85 3d		sta $3d				sta 	gsTemp+1
.84fa	20 15 85	jsr $8515			jsr 	GXDLTCheckWrap 			; fix up.
.84fd	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.84ff	2d 3e 06	and $063e			and 	gxANDValue
.8502	4d 3d 06	eor $063d			eor 	gxEORValue
.8505	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8507					_GXDLTExit:
.8507	68		pla				pla
.8508	85 0b		sta $0b				sta 	GFXEditSlot
.850a	68		pla				pla
.850b	8d 41 06	sta $0641			sta 	gsOffset
.850e	68		pla				pla
.850f	85 3d		sta $3d				sta 	gsTemp+1
.8511	68		pla				pla
.8512	85 3c		sta $3c				sta 	gsTemp
.8514	60		rts				rts
.8515					GXDLTCheckWrap:
.8515	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.8517	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8519	90 06		bcc $8521			bcc 	_GXDLTCWExit
.851b	e9 20		sbc #$20			sbc 	#$20 						; fix up
.851d	85 3d		sta $3d				sta 	gsTemp+1
.851f	e6 0b		inc $0b				inc 	GFXEditSlot
.8521					_GXDLTCWExit:
.8521	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8522					GXDrawGraphicElement:
.8522	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.8525	3a		dec a				dec 	a
.8526	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.8529	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.852c	9c 55 06	stz $0655			stz 	gxHFlip
.852f	2c 56 06	bit $0656			bit 	gxUseMode
.8532	10 03		bpl $8537			bpl 	_GXNotVertical
.8534	8d 54 06	sta $0654			sta 	gxVFlip
.8537					_GXNotVertical:
.8537	50 03		bvc $853c			bvc 	_GXNotHorizontal
.8539	8d 55 06	sta $0655			sta 	gxHFlip
.853c					_GXNotHorizontal:
.853c	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.853f	48		pha				pha
.8540	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.8543	8e 51 06	stx $0651			stx 	gxAcquireVector
.8546	20 8e 86	jsr $868e			jsr 	gxOpenBitmap 				; open the bitmap.
.8549	ad 56 06	lda $0656			lda 	gxUseMode 					; scale bits
.854c	4a		lsr a				lsr 	a
.854d	4a		lsr a				lsr 	a
.854e	4a		lsr a				lsr 	a
.854f	29 07		and #$07			and		#7
.8551	1a		inc a				inc 	a
.8552	8d 53 06	sta $0653			sta 	gxScale
.8555	64 38		stz $38				stz 	gzTemp1						; start first line
.8557					_GXGELoop:
.8557	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.8559	4d 54 06	eor $0654			eor 	gxVFlip
.855c	aa		tax				tax 								; get the Xth line.
.855d	20 9b 85	jsr $859b			jsr 	_GXCallAcquire 				; get that data.
.8560	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.8563	85 39		sta $39				sta 	gzTemp1+1
.8565					_GXGELoop2:
.8565	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8568	cd 3a 06	cmp $063a			cmp 	gxHeight
.856b	b0 10		bcs $857d			bcs 	_GXDGEExit
.856d	20 9e 85	jsr $859e			jsr 	GXRenderOneLine 			; render line
.8570	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.8572	d0 f1		bne $8565			bne 	_GXGELoop2
.8574	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.8576	a5 38		lda $38				lda 	gzTemp1
.8578	cd 4f 06	cmp $064f			cmp 	gxSize
.857b	d0 da		bne $8557			bne 	_GXGELoop
.857d					_GXDGEExit:
.857d	68		pla				pla 								; restore Y for next time
.857e	8d 33 06	sta $0633			sta 	gxY0
.8581	ae 53 06	ldx $0653			ldx 	gxScale 					; get scale (1-8)
.8584					_GXShiftLeft:
.8584	18		clc				clc
.8585	ad 4f 06	lda $064f			lda 	gxSize
.8588	6d 31 06	adc $0631			adc 	gxX0
.858b	8d 31 06	sta $0631			sta 	gxX0
.858e	90 03		bcc $8593			bcc 	_GXSLNoCarry
.8590	ee 32 06	inc $0632			inc 	gxX0+1
.8593					_GXSLNoCarry:
.8593	ca		dex				dex
.8594	d0 ee		bne $8584			bne 	_GXShiftLeft
.8596	20 9f 86	jsr $869f			jsr 	GXCloseBitmap
.8599	18		clc				clc
.859a	60		rts				rts
.859b					_GXCallAcquire:
.859b	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.859e					GXRenderOneLine:
.859e	20 ac 86	jsr $86ac			jsr 	GXPositionCalc 				; calculate position/offset.
.85a1	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.85a4	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.85a6					_GXROLLoop1:
.85a6	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.85a9	85 3b		sta $3b				sta 	gzTemp2+1
.85ab					_GXROLLoop2:
.85ab	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.85ad	4d 55 06	eor $0655			eor 	gxHFlip
.85b0	aa		tax				tax 								; read from the pixel buffer
.85b1	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.85b4	f0 0a		beq $85c0			beq 	_GXZeroPixel 				; don't draw if zero.
.85b6	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.85b8	2d 3e 06	and $063e			and 	gxANDValue
.85bb	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.85be	91 3c		sta ($3c),y			sta 	(gsTemp),y
.85c0					_GXZeroPixel:
.85c0	c8		iny				iny 								; advance pointer
.85c1	d0 05		bne $85c8			bne 	_GXNoShift
.85c3	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.85c5	20 15 85	jsr $8515			jsr 	GXDLTCheckWrap				; check for new page.
.85c8					_GXNoShift:
.85c8	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.85ca	d0 df		bne $85ab			bne 	_GXROLLoop2
.85cc	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.85ce	a5 3a		lda $3a				lda 	gzTemp2
.85d0	cd 4f 06	cmp $064f			cmp 	gxSize
.85d3	d0 d1		bne $85a6			bne 	_GXROLLoop1
.85d5	ee 33 06	inc $0633			inc 	gxY0
.85d8	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.0655					gxHFlip:
>0655							.fill 	1
.0656					gxUseMode:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.85d9					GXFontHandler:
.85d9	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.85db	4d 3b 06	eor $063b			eor 	gxMode
.85de	8d 56 06	sta $0656			sta 	gxUseMode
.85e1	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.85e3	06 36		asl $36				asl	 	gzTemp0 					; x 2
.85e5	26 37		rol $37				rol	 	gzTemp0+1
.85e7	06 36		asl $36				asl	 	gzTemp0 					; x 4
.85e9	26 37		rol $37				rol	 	gzTemp0+1
.85eb	06 36		asl $36				asl	 	gzTemp0 					; x 8
.85ed	26 37		rol $37				rol	 	gzTemp0+1
.85ef	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.85f1	09 c0		ora #$c0			ora 	#$C0
.85f3	85 37		sta $37				sta 	gzTemp0+1
.85f5	a9 08		lda #$08			lda 	#8 							; size 8x8
.85f7	a2 ff		ldx #$ff			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.85f9	a0 85		ldy #$85			ldy 	#GXGetGraphicDataFont >> 8
.85fb	20 22 85	jsr $8522			jsr 	GXDrawGraphicElement
.85fe	60		rts				rts
.85ff					GXGetGraphicDataFont:
.85ff	8a		txa				txa 								; X->Y
.8600	a8		tay				tay
.8601	a6 01		ldx $01				ldx 	1 							; preserve old value
.8603	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8605	85 01		sta $01				sta 	1
.8607	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.8609	86 01		stx $01				stx 	1 							; put old value back.
.860b	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.860d					_GXExpand:
.860d	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8610	0a		asl a				asl 	a 							; shift bit 7 into C
.8611	90 08		bcc $861b			bcc 	_GXNoPixel
.8613	48		pha				pha 								; if set, set pixel buffer to current colour.
.8614	ad 3c 06	lda $063c			lda 	gxColour
.8617	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.861a	68		pla				pla
.861b					_GXNoPixel:
.861b	e8		inx				inx 								; do the whole byte.
.861c	e0 08		cpx #$08			cpx 	#8
.861e	d0 ed		bne $860d			bne 	_GXExpand
.8620	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8621					GXSpriteHandler:
.8621	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.8623	4d 3b 06	eor $063b			eor 	gxMode
.8626	8d 56 06	sta $0656			sta 	gxUseMode
.8629	a9 18		lda #$18			lda 	#GXSpritePage
.862b	8d 57 06	sta $0657			sta 	GXSpriteBasePage
.862e	a6 36		ldx $36				ldx 	gzTemp0 					; sprite #
.8630	da		phx				phx
.8631	20 8e 86	jsr $868e			jsr 	GXOpenBitmap 				; can access sprite information
.8634	68		pla				pla
.8635	20 1d 87	jsr $871d			jsr 	GXFindSprite 				; get the sprite address
.8638	20 9f 86	jsr $869f			jsr 	GXCloseBitmap
.863b	ad 58 06	lda $0658			lda 	GXSSize 					; return size
.863e	a2 46		ldx #$46			ldx 	#GXSpriteAcquire & $FF
.8640	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.8642	20 22 85	jsr $8522			jsr 	GXDrawGraphicElement
.8645	60		rts				rts
.8646					GXSpriteAcquire:
.8646	ad 57 06	lda $0657			lda 	GXspriteBasePage			; point to base page
.8649	85 0b		sta $0b				sta 	GFXEditSlot
.864b	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.864d	a9 00		lda #$00			lda 	#0
.864f	ae 59 06	ldx $0659			ldx 	GXSSizeRaw
.8652					_GXTimesRowNumber:
.8652	18		clc				clc
.8653	65 36		adc $36				adc 	zTemp0
.8655	ca		dex				dex
.8656	10 fa		bpl $8652			bpl 	_GXTimesRowNumber
.8658	64 37		stz $37				stz 	gzTemp0+1
.865a	0a		asl a				asl 	a 							; row x 2,4,6,8
.865b	26 37		rol $37				rol 	gzTemp0+1
.865d	0a		asl a				asl 	a 							; row x 4,8,12,16
.865e	26 37		rol $37				rol 	gzTemp0+1
.8660	0a		asl a				asl 	a 							; row x 8,16,24,32
.8661	26 37		rol $37				rol 	gzTemp0+1
.8663	85 36		sta $36				sta 	gzTemp0
.8665	18		clc				clc 								; add base address.
.8666	a5 36		lda $36				lda 	gzTemp0
.8668	6d 5b 06	adc $065b			adc 	GXSAddress
.866b	85 36		sta $36				sta 	gzTemp0
.866d	a5 37		lda $37				lda 	gzTemp0+1
.866f	6d 5c 06	adc $065c			adc 	GXSAddress+1
.8672					_GXSAFindPage:
.8672	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8674	90 06		bcc $867c			bcc 	_GXSAFoundPage
.8676	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.8678	e6 0b		inc $0b				inc 	GFXEditSlot
.867a	80 f6		bra $8672			bra 	_GXSAFindPage
.867c					_GXSAFoundPage:
.867c	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.867e	85 37		sta $37				sta 	gzTemp0+1 					; gzTemp0 now points to the page
.8680	a0 00		ldy #$00			ldy 	#0
.8682					_GXSACopyLoop:
.8682	b1 36		lda ($36),y			lda 	(gzTemp0),y
.8684	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.8687	c8		iny				iny
.8688	cc 58 06	cpy $0658			cpy 	GXSSize
.868b	d0 f5		bne $8682			bne 	_GXSACopyLoop
.868d	60		rts				rts
.0657					GXSpriteBasePage:
>0657							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.868e					GXOpenBitmap:
.868e	78		sei				sei 								; no interrupts here
.868f	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8691	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.8694	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8696	85 00		sta $00				sta 	0
.8698	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.869a	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.869d	58		cli				cli
.869e	60		rts				rts
.869f					GXCloseBitmap:
.869f	78		sei				sei
.86a0	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.86a3	85 0b		sta $0b				sta 	GFXEditSlot
.86a5	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.86a8	85 00		sta $00				sta 	0
.86aa	58		cli				cli
.86ab	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.86ac					GXPositionCalc:
.86ac	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.86ae	48		pha				pha
.86af	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.86b2	85 3c		sta $3c				sta 	gsTemp
.86b4	64 3d		stz $3d				stz 	gsTemp+1
.86b6	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.86b8	26 3d		rol $3d				rol 	gsTemp+1
.86ba	06 3c		asl $3c				asl 	gsTemp
.86bc	26 3d		rol $3d				rol 	gsTemp+1
.86be	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.86bf	65 3c		adc $3c				adc 	gsTemp
.86c1	85 3c		sta $3c				sta 	gsTemp
.86c3	90 02		bcc $86c7			bcc 	_GXPCNoCarry
.86c5	e6 3d		inc $3d				inc 	gsTemp+1
.86c7					_GXPCNoCarry:
.86c7	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.86c9	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.86cb	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.86cd	85 36		sta $36				sta 	gzTemp0
.86cf	64 3d		stz $3d				stz 	gsTemp+1
.86d1	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.86d3					_GXPCMultiply32:
.86d3	06 3c		asl $3c				asl 	gsTemp
.86d5	26 3d		rol $3d				rol 	gsTemp+1
.86d7	3a		dec a				dec 	a
.86d8	d0 f9		bne $86d3			bne 	_GXPCMultiply32
.86da	18		clc				clc
.86db	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.86de	65 3c		adc $3c				adc 	gsTemp
.86e0	8d 41 06	sta $0641			sta 	gsOffset
.86e3	ad 32 06	lda $0632			lda 	GXX0+1
.86e6	65 3d		adc $3d				adc 	gsTemp+1
.86e8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.86ea	90 04		bcc $86f0			bcc 	_GXPCNoOverflow
.86ec	29 1f		and #$1f			and 	#$1F 						; fix it up
.86ee	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.86f0					_GXPCNoOverflow:
.86f0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.86f2	85 3d		sta $3d				sta 	gsTemp+1
.86f4	64 3c		stz $3c				stz 	gsTemp
.86f6	18		clc				clc
.86f7	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.86f9	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.86fc	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.86fe	68		pla				pla
.86ff	85 36		sta $36				sta 	gzTemp0
.8701	60		rts				rts
.8702					GXMovePositionDown:
.8702	18		clc				clc 								; add 320 to offset/temp+1
.8703	ad 41 06	lda $0641			lda 	gsOffset
.8706	69 40		adc #$40			adc 	#64
.8708	8d 41 06	sta $0641			sta 	gsOffset
.870b	a5 3d		lda $3d				lda 	gsTemp+1
.870d	69 01		adc #$01			adc 	#1
.870f	85 3d		sta $3d				sta 	gsTemp+1
.8711	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8713	90 07		bcc $871c			bcc 	_GXMPDExit
.8715	38		sec				sec  								; next page
.8716	e9 20		sbc #$20			sbc 	#$20
.8718	85 3d		sta $3d				sta 	gsTemp+1
.871a	e6 0b		inc $0b				inc 	GFXEditSlot
.871c					_GXMPDExit:
.871c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.871d					GXFindSprite:
.871d	aa		tax				tax
.871e	ad 57 06	lda $0657			lda 	GXSpriteBasePage 			; access the base page of the sprite
.8721	85 0b		sta $0b				sta 	GFXEditSlot
.8723	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8726	8d 5c 06	sta $065c			sta 	GXSAddress+1
.8729	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.872c	48		pha				pha 								; save twice
.872d	48		pha				pha
.872e	29 03		and #$03			and 	#3 							; get sprite size
.8730	8d 59 06	sta $0659			sta 	GXSSizeRaw 					; save raw (0-3)
.8733	aa		tax				tax
.8734	bd 55 87	lda $8755,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8737	8d 58 06	sta $0658			sta 	GXSSize 					; save (8/16/24/32)
.873a	68		pla				pla 								; get LUT
.873b	4a		lsr a				lsr		a
.873c	4a		lsr a				lsr		a
.873d	29 03		and #$03			and 	#3
.873f	8d 5a 06	sta $065a			sta 	GXSLUT
.8742	68		pla				pla 								; address, neeeds to be x 4
.8743	29 f0		and #$f0			and 	#$F0
.8745	8d 5b 06	sta $065b			sta 	GXSAddress
.8748	0e 5b 06	asl $065b			asl 	GXSAddress
.874b	2e 5c 06	rol $065c			rol 	GXSAddress+1
.874e	0e 5b 06	asl $065b			asl 	GXSAddress
.8751	2e 5c 06	rol $065c			rol 	GXSAddress+1
.8754	60		rts				rts
.8755					_GXFXSSTTable:
>8755	08 10 18 20					.byte 	8,16,24,32
.0658					GXSSize:
>0658							.fill 	1
.0659					GXSSizeRaw:
>0659							.fill 	1
.065a					GXSLUT:
>065a							.fill 	1
.065b					GXSAddress:
>065b							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8759					GXSortXY:
.8759	20 77 87	jsr $8777			jsr 	GXSortY 					; will be sorted on Y now
.875c	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.875f	cd 35 06	cmp $0635			cmp 	gxX1
.8762	ad 32 06	lda $0632			lda 	gXX0+1
.8765	ed 36 06	sbc $0636			sbc 	gXX1+1
.8768	90 0c		bcc $8776			bcc 	_GXSXYExit 					; X0 < X1 exit
.876a	a2 00		ldx #$00			ldx 	#0 							; swap them over
.876c	a0 04		ldy #$04			ldy 	#4
.876e	20 8b 87	jsr $878b			jsr 	GXSwapXY
.8771	e8		inx				inx
.8772	c8		iny				iny
.8773	20 8b 87	jsr $878b			jsr 	GXSwapXY
.8776					_GXSXYExit:
.8776	60		rts				rts
.8777					GXSortY:
.8777	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.877a	cd 37 06	cmp $0637			cmp 	gxY1
.877d	90 0b		bcc $878a			bcc 	_GXSYSorted
.877f	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8781	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8783					_GXSwap1:
.8783	20 8b 87	jsr $878b			jsr 	GXSwapXY
.8786	88		dey				dey
.8787	ca		dex				dex
.8788	10 f9		bpl $8783			bpl 	_GXSwap1
.878a					_GXSYSorted:
.878a	60		rts				rts
.878b					GXSwapXY:
.878b	bd 31 06	lda $0631,x			lda 	gxX0,x
.878e	48		pha				pha
.878f	b9 31 06	lda $0631,y			lda 	gxX0,y
.8792	9d 31 06	sta $0631,x			sta 	gxX0,x
.8795	68		pla				pla
.8796	99 31 06	sta $0631,y			sta 	gxX0,y
.8799	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.879a					RunDemos:
.879a					loop:
.879a	a9 00		lda #$00			lda 	#((0)*2)+(((0) >> 8) & 1)
.879c	a2 00		ldx #$00			ldx 	#((0) & $FF)
.879e	a0 00		ldy #$00			ldy 	#(0)
.87a0	20 85 80	jsr $8085			jsr 	GraphicDraw
.87a3	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.87a5	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.87a7	a0 00		ldy #$00			ldy 	#(0)
.87a9	20 85 80	jsr $8085			jsr 	GraphicDraw
.87ac	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.87ae	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.87b0	a0 00		ldy #$00			ldy 	#(0)
.87b2	20 85 80	jsr $8085			jsr 	GraphicDraw
.87b5	a9 31		lda #$31			lda 	#((24)*2)+(((322) >> 8) & 1)
.87b7	a2 42		ldx #$42			ldx 	#((322) & $FF)
.87b9	a0 dc		ldy #$dc			ldy 	#(220)
.87bb	20 85 80	jsr $8085			jsr 	GraphicDraw
.87be	a9 30		lda #$30			lda 	#((24)*2)+(((102) >> 8) & 1)
.87c0	a2 66		ldx #$66			ldx 	#((102) & $FF)
.87c2	a0 28		ldy #$28			ldy 	#(40)
.87c4	20 85 80	jsr $8085			jsr 	GraphicDraw
.87c7	20 3e 9e	jsr $9e3e	demo:	jsr 	Random32Bit
.87ca	ee 3d 06	inc $063d			inc 	gxEORValue
.87cd	a9 30		lda #$30			lda 	#24*2
.87cf	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.87d2	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.87d5	20 85 80	jsr $8085			jsr 	GraphicDraw
.87d8	80 ed		bra $87c7			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.87da					AssembleGroup1:
.87da	a9 ff		lda #$ff			lda 	#$FF
.87dc	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.87df	80 02		bra $87e3			bra 	AsmGroup12
.87e1					AssembleGroup2:
.87e1	a5 00		lda $00				lda 	$00
.87e3					AsmGroup12:
.87e3	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.87e6	68		pla				pla 								; pop the return address to access the information following.
.87e7	fa		plx				plx
.87e8	20 71 88	jsr $8871			jsr 	AccessParameters 			; get opcode and save as base
.87eb	8d a4 04	sta $04a4			sta 	BaseOpcode
.87ee	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.87f1	d0 08		bne $87fb			bne 	_AG12HaveMask
.87f3	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.87f5	20 79 88	jsr $8879			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.87f8	8d a5 04	sta $04a5			sta 	ModeMask
.87fb					_AG12HaveMask:
.87fb	20 b4 89	jsr $89b4			jsr 	TypeAndCalculateOperand 	; get zero page type
.87fe	da		phx				phx 								; save found address mode
.87ff	20 dd 88	jsr $88dd			jsr 	AssembleModeX
.8802	fa		plx				plx  								; restore address mode
.8803	b0 0b		bcs $8810			bcs 	_AG12Exit
.8805	20 11 88	jsr $8811			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8808	20 dd 88	jsr $88dd			jsr 	AssembleModeX
.880b	b0 03		bcs $8810			bcs 	_AG12Exit
.880d	4c 78 ae	jmp $ae78			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8810					_AG12Exit:
.8810	60		rts				rts
.8811					PromoteToAbsolute:
.8811	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8813	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8815	f0 19		beq $8830			beq 	_PTADo
.8817	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8819	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.881b	f0 13		beq $8830			beq 	_PTADo
.881d	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.881f	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8821	f0 0d		beq $8830			beq 	_PTADo
.8823	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8825	e0 d1		cpx #$d1			cpx 	#AM_IND
.8827	f0 07		beq $8830			beq 	_PTADo
.8829	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.882b	e0 c0		cpx #$c0			cpx 	#AM_INDX
.882d	f0 01		beq $8830			beq 	_PTADo
.882f	60		rts				rts
.8830					_PTADo:
.8830	aa		tax				tax
.8831	60		rts				rts
.8832					AssembleGroup3:
.8832	68		pla				pla 								; get parameters, which is just the opcode.
.8833	fa		plx				plx
.8834	20 71 88	jsr $8871			jsr 	AccessParameters 			; get and output opcode
.8837	20 89 88	jsr $8889			jsr 	AssemblerWriteByte
.883a	20 18 8a	jsr $8a18			jsr 	CalculateOperand 			; get a 16 bit operand
.883d	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8840	38		sec				sec
.8841	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8844	48		pha				pha 								; LSB in A
.8845	ad 10 04	lda $0410			lda 	NSMantissa1
.8848	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.884b	aa		tax				tax 								; MSB in X
.884c	68		pla				pla
.884d	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.884e	69 7f		adc #$7f			adc 	#$7F
.8850	90 01		bcc $8853			bcc 	_AG3NoCarry
.8852	e8		inx				inx
.8853					_AG3NoCarry:
.8853	38		sec				sec 								; fix back and write out anyways.
.8854	e9 80		sbc #$80			sbc 	#$80
.8856	20 89 88	jsr $8889			jsr 	AssemblerWriteByte
.8859	e0 00		cpx #$00			cpx 	#0 							; was it in range
.885b	f0 0a		beq $8867			beq 	_AG3Exit
.885d	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8860	29 01		and #$01			and 	#1
.8862	f0 03		beq $8867			beq 	_AG3Exit
.8864	4c 7d ae	jmp $ae7d			jmp 	RangeError 					; no, branch is out of range
.8867					_AG3Exit:
.8867	60		rts				rts
.8868					AssembleGroup4:
.8868	68		pla				pla 								; pop address
.8869	fa		plx				plx
.886a	20 71 88	jsr $8871			jsr 	AccessParameters 			; access and get first
.886d	20 89 88	jsr $8889			jsr 	AssemblerWriteByte 			; output it.
.8870	60		rts				rts
.8871					AccessParameters:
.8871	8d a1 04	sta $04a1			sta 	ParamStart
.8874	8e a2 04	stx $04a2			stx 	ParamStart+1
.8877	a9 01		lda #$01			lda 	#1
.8879					GetParameter:
.8879	5a		phy				phy
.887a	a8		tay				tay
.887b	ad a1 04	lda $04a1			lda 	ParamStart
.887e	85 36		sta $36				sta 	zTemp0
.8880	ad a2 04	lda $04a2			lda 	ParamStart+1
.8883	85 37		sta $37				sta 	zTemp0+1
.8885	b1 36		lda ($36),y			lda 	(zTemp0),y
.8887	7a		ply				ply
.8888	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8889					AssemblerWriteByte:
.8889	48		pha			pha
.888a	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.888d	29 02		and #$02		and 	#2
.888f	f0 1b		beq $88ac		beq 	_AWBNoPrint
.8891	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8894	20 c7 88	jsr $88c7		jsr 	PrintHex
.8897	ad 9e 04	lda $049e		lda		AssemblerAddress
.889a	20 c7 88	jsr $88c7		jsr 	PrintHex
.889d	a9 20		lda #$20		lda 	#' '
.889f	20 1d b0	jsr $b01d		jsr 	EXTPrintCharacter
.88a2	68		pla			pla 									; print byte
.88a3	48		pha			pha
.88a4	20 c7 88	jsr $88c7		jsr 	PrintHex
.88a7	a9 0d		lda #$0d		lda 	#13
.88a9	20 1d b0	jsr $b01d		jsr 	EXTPrintCharacter
.88ac					_AWBNoPrint:
.88ac	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.88af	85 36		sta $36			sta 	zTemp0
.88b1	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.88b4	f0 0e		beq $88c4		beq 	_AWBRange
.88b6	85 37		sta $37			sta 	zTemp0+1
.88b8	68		pla			pla 									; write byte out
.88b9	92 36		sta ($36)		sta 	(zTemp0)
.88bb	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.88be	d0 03		bne $88c3		bne 	_AWBNoCarry
.88c0	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.88c3					_AWBNoCarry:
.88c3	60		rts			rts
.88c4					_AWBRange:
.88c4	4c 7d ae	jmp $ae7d		jmp 	RangeError
.88c7					PrintHex:
.88c7	48		pha				pha
.88c8	4a		lsr a				lsr 	a
.88c9	4a		lsr a				lsr 	a
.88ca	4a		lsr a				lsr 	a
.88cb	4a		lsr a				lsr 	a
.88cc	20 d0 88	jsr $88d0			jsr 	_PrintNibble
.88cf	68		pla				pla
.88d0					_PrintNibble:
.88d0	29 0f		and #$0f			and 	#15
.88d2	c9 0a		cmp #$0a			cmp 	#10
.88d4	90 02		bcc $88d8			bcc 	_NoShift
.88d6	69 06		adc #$06			adc 	#6
.88d8					_NoShift:
.88d8	69 30		adc #$30			adc 	#48
.88da	4c 1d b0	jmp $b01d			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.88dd					AssembleModeX:
.88dd	5a		phy				phy
.88de	ad a3 04	lda $04a3			lda 	IsGroup1
.88e1	f0 17		beq $88fa			beq 	_AMXGroup2
.88e3	8a		txa				txa 							; is it in group # 1
.88e4	29 40		and #$40			and 	#AM_ISG1
.88e6	f0 50		beq $8938			beq 	_AMXFail 				; no, give up.
.88e8	8a		txa				txa 							; get back.
.88e9	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.88eb	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.88ed	d0 22		bne $8911			bne 	_AMXHaveInfo
.88ef	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.88f2	c9 81		cmp #$81			cmp 	#$81
.88f4	f0 42		beq $8938			beq 	_AMXFail
.88f6	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.88f8	80 17		bra $8911			bra 	_AMXHaveInfo 			; odd design decision there.
.88fa					_AMXGroup2:
.88fa	8a		txa				txa 							; is it in group 2 ?
.88fb	29 20		and #$20			and 	#AM_ISG2
.88fd	f0 39		beq $8938			beq 	_AMXFail 				; no, give up.
.88ff	8a		txa				txa 							; get the offset into Y
.8900	29 1f		and #$1f			and 	#$1F
.8902	4a		lsr a				lsr 	a 						; make it 0-7.
.8903	4a		lsr a				lsr  	a
.8904	a8		tay				tay
.8905	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8908					_AMXCheckOkay:
.8908	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8909	88		dey				dey
.890a	10 fc		bpl $8908			bpl 	_AMXCheckOkay
.890c	90 2a		bcc $8938			bcc 	_AMXFail 				; not allowed.
.890e	8a		txa				txa  							; get mask back
.890f	29 1f		and #$1f			and 	#$1F
.8911					_AMXHaveInfo:
.8911	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8913	10 05		bpl $891a			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8915	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8918	d0 1e		bne $8938			bne 	_AMXFail
.891a					_AMXAnySize:
.891a	18		clc				clc 							; add offset to the base opcode
.891b	6d a4 04	adc $04a4			adc 	BaseOpcode
.891e					_AMXOutputCode:
.891e	20 89 88	jsr $8889			jsr 	AssemblerWriteByte 		; write the opcode out.
.8921	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8923	f0 10		beq $8935			beq 	_AMXExit
.8925	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8928	20 89 88	jsr $8889			jsr 	AssemblerWriteByte
.892b	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.892d	30 06		bmi $8935			bmi 	_AMXExit
.892f	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8932	20 89 88	jsr $8889			jsr 	AssemblerWriteByte
.8935					_AMXExit:
.8935	7a		ply				ply
.8936	38		sec				sec
.8937	60		rts				rts
.8938					_AMXFail:
.8938	a0 00		ldy #$00			ldy 	#0
.893a					_AMXCheckOddities:
.893a	8a		txa				txa
.893b	d9 63 89	cmp $8963,y			cmp 	ExtraOpcode+2,y 		; match address mode
.893e	d0 16		bne $8956			bne 	_AMXCONext
.8940	b9 61 89	lda $8961,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8943	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8946	d0 0e		bne $8956			bne 	_AMXCONext
.8948	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.894a	10 05		bpl $8951			bpl 	_AMXCONotZero
.894c	ad 10 04	lda $0410			lda 	NSMantissa1
.894f	d0 05		bne $8956			bne 	_AMXCONext
.8951					_AMXCONotZero:
.8951	b9 62 89	lda $8962,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8954	80 c8		bra $891e			bra 	_AMXOutputCode 			; and assemble it
.8956					_AMXCONext:
.8956	c8		iny				iny
.8957	c8		iny				iny
.8958	c8		iny				iny
.8959	b9 61 89	lda $8961,y			lda 	ExtraOpcode+0,y 		; end of table
.895c	d0 dc		bne $893a			bne 	_AMXCheckOddities
.895e					_AMXCOFail:
.895e	7a		ply				ply
.895f	18		clc				clc
.8960	60		rts				rts
.8961					ExtraOpcode:
>8961	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8964	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8967	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>896a	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>896d	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8970	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8973	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8976	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8979	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>897c	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>897f	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8980					LabelHere:
.8980	c8		iny				iny 								; skip .
.8981	a2 00		ldx #$00			ldx 	#0 							; get a term
.8983	20 af 9b	jsr $9baf			jsr 	EvaluateTerm 				; get a term
.8986	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8989	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.898b	d0 24		bne $89b1			bne 	_ALType
.898d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8990	85 36		sta $36				sta 	zTemp0
.8992	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8995	85 37		sta $37				sta 	zTemp0+1
.8997	5a		phy				phy 								; copy address in.
.8998	a0 01		ldy #$01			ldy 	#1
.899a	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.899d	92 36		sta ($36)			sta 	(zTemp0)
.899f	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.89a2	91 36		sta ($36),y			sta 	(zTemp0),y
.89a4	c8		iny				iny
.89a5	a9 00		lda #$00			lda 	#0
.89a7	91 36		sta ($36),y			sta 	(zTemp0),y
.89a9	c8		iny				iny
.89aa	91 36		sta ($36),y			sta 	(zTemp0),y
.89ac	c8		iny				iny
.89ad	91 36		sta ($36),y			sta 	(zTemp0),y
.89af	7a		ply				ply
.89b0	60		rts				rts
.89b1					_ALType:
.89b1	4c 82 ae	jmp $ae82			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.89b4					TypeAndCalculateOperand:
.89b4	b1 30		lda ($30),y			lda 	(codePtr),y
.89b6	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.89b8	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.89ba	f0 5b		beq $8a17			beq 	_TACOExit
.89bc	c9 80		cmp #$80			cmp 	#KWC_EOL
.89be	f0 57		beq $8a17			beq 	_TACOExit
.89c0	c8		iny				iny
.89c1	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.89c3	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.89c5	f0 51		beq $8a18			beq 	CalculateOperand
.89c7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.89c9	f0 1f		beq $89ea			beq 	_TACOIndirect
.89cb	88		dey				dey 								; undo get of first character
.89cc	20 18 8a	jsr $8a18			jsr 	CalculateOperand 			; get operand
.89cf	b1 30		lda ($30),y			lda 	(codePtr),y
.89d1	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.89d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89d5	d0 40		bne $8a17			bne 	_TACOExit
.89d7	c8		iny				iny
.89d8	20 09 a8	jsr $a809			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.89db	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.89dd	c9 58		cmp #$58			cmp 	#'X'
.89df	f0 36		beq $8a17			beq 	_TACOExit
.89e1	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.89e3	c9 59		cmp #$59			cmp 	#'Y'
.89e5	f0 30		beq $8a17			beq 	_TACOExit
.89e7					_TACOSyntax:
.89e7	4c 78 ae	jmp $ae78			jmp 	SyntaxError
.89ea					_TACOIndirect:
.89ea	20 18 8a	jsr $8a18			jsr 	CalculateOperand 			; get the operand
.89ed	b1 30		lda ($30),y			lda 	(codePtr),y
.89ef	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.89f1	f0 17		beq $8a0a			beq 	_TACOIndX
.89f3	20 92 a8	jsr $a892			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.89f6	b1 30		lda ($30),y			lda 	(codePtr),y
.89f8	a2 d1		ldx #$d1			ldx 	#AM_IND
.89fa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.89fc	d0 19		bne $8a17			bne 	_TACOExit
.89fe	c8		iny				iny
.89ff	20 09 a8	jsr $a809			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8a02	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8a04	d0 e1		bne $89e7			bne 	_TACOSyntax
.8a06	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8a08	80 0d		bra $8a17			bra 	_TACOExit
.8a0a					_TACOIndX:
.8a0a	c8		iny				iny
.8a0b	20 09 a8	jsr $a809			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8a0e	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8a10	d0 d5		bne $89e7			bne 	_TACOSyntax
.8a12	20 92 a8	jsr $a892			jsr 	CheckRightBracket			; check )
.8a15	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8a17					_TACOExit:
.8a17	60		rts				rts
.8a18					CalculateOperand:
.8a18	48		pha				pha
.8a19	da		phx				phx
.8a1a	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8a1c	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger
.8a1f	fa		plx				plx
.8a20	68		pla				pla
.8a21	60		rts				rts
.a809					TACOCheckXY:
.a809	b1 30		lda ($30),y			lda 	(codePtr),y
.a80b	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a80d	c9 40		cmp #$40			cmp 	#$40
.a80f	d0 21		bne $a832			bne 	_TCXYFail
.a811	b1 30		lda ($30),y			lda 	(codePtr),y
.a813	18		clc				clc
.a814	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a816	85 37		sta $37				sta 	zTemp0+1
.a818	c8		iny				iny
.a819	b1 30		lda ($30),y			lda 	(codePtr),y
.a81b	c8		iny				iny
.a81c	85 36		sta $36				sta 	zTemp0
.a81e	5a		phy				phy 								; save position
.a81f	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a821	b1 36		lda ($36),y			lda 	(zTemp0),y
.a823	d0 0c		bne $a831			bne 	_TCXYPopFail
.a825	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a827	b1 36		lda ($36),y			lda 	(zTemp0),y
.a829	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a82b	f0 08		beq $a835			beq 	_TCXYFound
.a82d	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a82f	f0 04		beq $a835			beq 	_TCXYFound
.a831					_TCXYPopFail:
.a831	7a		ply				ply
.a832					_TCXYFail:
.a832	a9 00		lda #$00			lda 	#0
.a834	60		rts				rts
.a835					_TCXYFound:
.a835	7a		ply				ply 								; restore position
.a836	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a838	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8a22					EditProgramCode:
.8a22	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8a25	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8a28	20 ec a0	jsr $a0ec			jsr 	MemorySearch
.8a2b	90 05		bcc $8a32			bcc 	_EPCNoDelete 				; reached the end don't delete
.8a2d	d0 03		bne $8a32			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8a2f	20 61 b0	jsr $b061			jsr 	MemoryDeleteLine 			; delete the line
.8a32					_EPCNoDelete:
.8a32	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8a35	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a37	f0 0d		beq $8a46			beq 	_EPCNoInsert
.8a39	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8a3c	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8a3f	20 ec a0	jsr $a0ec			jsr 	MemorySearch
.8a42	18		clc				clc 								; insert at this point.
.8a43	20 98 b0	jsr $b098			jsr 	MemoryInsertLine 			; insert the line
.8a46					_EPCNoInsert:
.8a46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8a47					WarmStart:
.8a47	a2 ff		ldx #$ff			ldx 	#$FF
.8a49	9a		txs				txs
.8a4a	20 33 b0	jsr $b033			jsr 	EXTInputLine 				; get line to lineBuffer
.8a4d	20 8a a5	jsr $a58a			jsr 	TokeniseLine 				; tokenise the line
.8a50	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8a53	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8a56	d0 17		bne $8a6f			bne 	_WSEditCode 				; if so,edit code.
.8a58	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8a5b	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8a5d	85 30		sta $30				sta 	codePtr
.8a5f	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8a61	85 31		sta $31				sta 	codePtr+1
.8a63	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8a66	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a68	f0 dd		beq $8a47			beq 	WarmStart
.8a6a	20 78 90	jsr $9078			jsr 	RUNCodePointerLine 			; execute that line.
.8a6d	80 d8		bra $8a47			bra 	WarmStart
.8a6f					_WSEditCode:
.8a6f	20 22 8a	jsr $8a22			jsr 	EditProgramCode
.8a72	20 e0 8a	jsr $8ae0			jsr 	ClearCommand
.8a75	80 d0		bra $8a47			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8a77					AssembleCommand:
.8a77	a2 00		ldx #$00			ldx 	#0
.8a79	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger 		; start address
.8a7c	ad 08 04	lda $0408			lda 	NSMantissa0
.8a7f	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8a82	ad 10 04	lda $0410			lda 	NSMantissa1
.8a85	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8a88	20 9a a8	jsr $a89a			jsr 	CheckComma
.8a8b	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger 		; options
.8a8e	ad 08 04	lda $0408			lda 	NSMantissa0
.8a91	8d a0 04	sta $04a0			sta 	AssemblerControl
.8a94	60		rts				rts
.8a95	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8a96					AssertCommand:
.8a96	a2 00		ldx #$00			ldx 	#0
.8a98	20 04 a0	jsr $a004			jsr 	EvaluateInteger 			; the assert test
.8a9b	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; exit if result is non zero.
.8a9e	d0 05		bne $8aa5			bne 	_ACExit
.8aa0	a9 0a		lda #$0a		lda	#10
.8aa2	4c d5 94	jmp $94d5		jmp	ErrorHandler
.8aa5					_ACExit:
.8aa5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8aa6					CallCommand:
.8aa6	a2 00		ldx #$00			ldx 	#0
.8aa8	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger
.8aab					_CCClear
.8aab	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8aac	20 8d a0	jsr $a08d			jsr 	NSMSetZero
.8aaf	e0 04		cpx #$04			cpx 	#4
.8ab1	d0 f8		bne $8aab			bne 	_CCClear
.8ab3	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8ab5					_CCCParam:
.8ab5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ab9	d0 09		bne $8ac4			bne 	_CCCRun6502
.8abb	c8		iny				iny 								; skip comma
.8abc	e8		inx				inx	 								; next level
.8abd	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8ac0	e0 03		cpx #$03			cpx 	#3
.8ac2	90 f1		bcc $8ab5			bcc 	_CCCParam 					; done all 3 ?
.8ac4					_CCCRun6502:
.8ac4	5a		phy				phy 								; save position
.8ac5	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8ac8	85 37		sta $37				sta 	zTemp0+1
.8aca	ad 08 04	lda $0408			lda 	NSMantissa0
.8acd	85 36		sta $36				sta 	zTemp0
.8acf	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8ad2	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8ad5	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8ad8	20 dd 8a	jsr $8add			jsr 	_CCCZTemp0 					; call zTemp0
.8adb	7a		ply				ply 								; restore position and exit
.8adc	60		rts				rts
.8add					_CCCZTemp0:
.8add	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ae0					ClearCommand:
.8ae0	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ae2	85 36		sta $36				sta 	0+zTemp0
.8ae4	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ae6	85 37		sta $37				sta 	1+zTemp0
.8ae8					_ClearZeroLoop:
.8ae8	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8aea	f0 24		beq $8b10			beq 	_ClearZeroEnd
.8aec	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8aee	a9 00		lda #$00			lda 	#0
.8af0					_ClearOneVariable:
.8af0	91 36		sta ($36),y			sta 	(zTemp0),y
.8af2	c8		iny				iny
.8af3	c0 08		cpy #$08			cpy 	#8
.8af5	d0 f9		bne $8af0			bne 	_ClearOneVariable
.8af7	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8af9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8afb	c9 18		cmp #$18			cmp 	#NSTProcedure
.8afd	d0 04		bne $8b03			bne 	_ClearNotProcedure
.8aff	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8b01	91 36		sta ($36),y			sta 	(zTemp0),y
.8b03					_ClearNotProcedure:
.8b03	18		clc				clc 								; go to the next variable
.8b04	b2 36		lda ($36)			lda 	(zTemp0)
.8b06	65 36		adc $36				adc 	zTemp0
.8b08	85 36		sta $36				sta 	zTemp0
.8b0a	90 dc		bcc $8ae8			bcc 	_ClearZeroLoop
.8b0c	e6 37		inc $37				inc 	zTemp0+1
.8b0e	80 d8		bra $8ae8			bra 	_ClearZeroLoop
.8b10					_ClearZeroEnd:
.8b10	18		clc				clc
.8b11	a5 36		lda $36				lda 	zTemp0
.8b13	69 01		adc #$01			adc 	#1
.8b15	8d 8c 04	sta $048c			sta 	lowMemPtr
.8b18	a5 37		lda $37				lda 	zTemp0+1
.8b1a	69 00		adc #$00			adc 	#0
.8b1c	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8b1f	20 a6 a1	jsr $a1a6			jsr 	StackReset
.8b22	20 7b b1	jsr $b17b			jsr 	StringSystemInitialise
.8b25	20 f5 93	jsr $93f5			jsr 	ProcedureScan
.8b28	20 34 90	jsr $9034			jsr 	Command_Restore
.8b2b	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8b2e	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8b31	9c a0 04	stz $04a0			stz 	AssemblerControl
.8b34	20 9c 9d	jsr $9d9c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8b37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8b38					Command_Data:
.8b38	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8b3a	a2 80		ldx #$80			ldx 	#KWC_EOL
.8b3c	20 47 94	jsr $9447			jsr 	ScanForward
.8b3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8b40					DimCommand:
.8b40	b1 30		lda ($30),y			lda 	(codePtr),y
.8b42	29 c0		and #$c0			and 	#$C0
.8b44	c9 40		cmp #$40			cmp 	#$40
.8b46	d0 7a		bne $8bc2			bne 	_DCSyntax
.8b48	b1 30		lda ($30),y			lda 	(codePtr),y
.8b4a	18		clc				clc
.8b4b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b4d	85 3f		sta $3f				sta 	zaTemp+1
.8b4f	c8		iny				iny
.8b50	b1 30		lda ($30),y			lda 	(codePtr),y
.8b52	c8		iny				iny
.8b53	85 3e		sta $3e				sta 	zaTemp
.8b55	5a		phy				phy
.8b56	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8b58	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b5a	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8b5c	c9 18		cmp #$18			cmp 	#NSTProcedure
.8b5e	f0 62		beq $8bc2			beq 	_DCSyntax
.8b60	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8b62	29 04		and #$04			and 	#NSBIsArray
.8b64	f0 64		beq $8bca			beq 	_DCType
.8b66	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8b68	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b6a	d0 59		bne $8bc5			bne 	_DCRedefine
.8b6c	7a		ply				ply
.8b6d	20 cd 8b	jsr $8bcd			jsr 	_DCGetSize 				; get array size, check it.
.8b70	5a		phy				phy
.8b71	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8b73	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8b75	7a		ply				ply 							; is there a second (e.g. ,x)
.8b76	b1 30		lda ($30),y			lda 	(codePtr),y
.8b78	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b7a	d0 0a		bne $8b86			bne 	_DCOneDimension
.8b7c	c8		iny				iny 							; skip comma
.8b7d	20 cd 8b	jsr $8bcd			jsr 	_DCGetSize 				; get 2nd array size
.8b80	5a		phy				phy
.8b81	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8b83	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b85	7a		ply				ply
.8b86					_DCOneDimension:
.8b86	5a		phy				phy 							; save position
.8b87	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8b89	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b8b	aa		tax				tax
.8b8c	c8		iny				iny
.8b8d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b8f	e8		inx				inx 							; bump them.
.8b90	1a		inc a				inc 	a
.8b91	20 14 ad	jsr $ad14			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8b94	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8b96	29 e0		and #$e0			and 	#$E0
.8b98	d0 23		bne $8bbd			bne 	_DCSize
.8b9a	a0 02		ldy #$02			ldy 	#2 						; get base type
.8b9c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b9e	20 db 8b	jsr $8bdb			jsr 	ScaleByBaseType 		; scale by base type
.8ba1	a5 36		lda $36				lda 	zTemp0
.8ba3	a6 37		ldx $37				ldx 	zTemp0+1
.8ba5	20 5e 9d	jsr $9d5e			jsr 	AllocateXABytes 		; allocate memory
.8ba8	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8baa	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8bac	c8		iny				iny
.8bad	8a		txa				txa
.8bae	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8bb0	7a		ply				ply 							; get position back
.8bb1	20 92 a8	jsr $a892			jsr 	CheckRightBracket 		; check )
.8bb4	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb6	c8		iny				iny 							; consume in case
.8bb7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8bb9	f0 85		beq $8b40			beq 	DimCommand
.8bbb	88		dey				dey 							; undo consume
.8bbc	60		rts				rts
.8bbd					_DCSize:
.8bbd	a9 16		lda #$16		lda	#22
.8bbf	4c d5 94	jmp $94d5		jmp	ErrorHandler
.8bc2					_DCSyntax:
.8bc2	4c 78 ae	jmp $ae78			jmp 	SyntaxError
.8bc5					_DCRedefine:
.8bc5	a9 15		lda #$15		lda	#21
.8bc7	4c d5 94	jmp $94d5		jmp	ErrorHandler
.8bca					_DCType:
.8bca	4c 82 ae	jmp $ae82			jmp 	TypeError
.8bcd					_DCGetSize:
.8bcd	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8bcf	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger 	; get array dimension
.8bd2	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8bd4	f0 e7		beq $8bbd			beq 	_DCSize
.8bd6	c9 fe		cmp #$fe			cmp 	#254
.8bd8	f0 e3		beq $8bbd			beq 	_DCSize
.8bda	60		rts				rts
.8bdb					ScaleByBaseType:
.8bdb	29 10		and #$10			and 	#NSBIsString 			; is it string
.8bdd	d0 19		bne $8bf8			bne 	_SBBTString
.8bdf	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8be1	48		pha				pha
.8be2	a5 36		lda $36				lda 	zTemp0
.8be4	48		pha				pha
.8be5	06 36		asl $36				asl 	zTemp0 					; x 2
.8be7	26 37		rol $37				rol 	zTemp0+1
.8be9	06 36		asl $36				asl 	zTemp0 					; x 4
.8beb	26 37		rol $37				rol 	zTemp0+1
.8bed	68		pla				pla 							; add stacked value = x 5
.8bee	65 36		adc $36				adc 	zTemp0
.8bf0	85 36		sta $36				sta 	zTemp0
.8bf2	68		pla				pla
.8bf3	65 37		adc $37				adc 	zTemp0+1
.8bf5	85 37		sta $37				sta 	zTemp0+1
.8bf7	60		rts				rts
.8bf8					_SBBTString:
.8bf8	06 36		asl $36				asl 	zTemp0
.8bfa	26 37		rol $37				rol 	zTemp0+1
.8bfc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8bfd					EndCommand:
.8bfd	4c 47 8a	jmp $8a47			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c00					ForCommand:
.8c00	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8c02	20 41 a1	jsr $a141			jsr 	StackOpen
.8c05	a2 00		ldx #$00			ldx 	#0
.8c07	20 af 9b	jsr $9baf			jsr 	EvaluateTerm
.8c0a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c0d	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c0f	d0 49		bne $8c5a			bne		_FCError
.8c11	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c13	20 a2 a8	jsr $a8a2			jsr 	CheckNextA
.8c16	e8		inx				inx
.8c17	20 04 a0	jsr $a004			jsr 	EvaluateInteger 			; <from> in +1
.8c1a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c1c	c8		iny				iny 								; consume it
.8c1d	48		pha				pha 								; save on stack for later
.8c1e	c9 ad		cmp #$ad			cmp 	#KWD_DOWNTO
.8c20	f0 04		beq $8c26			beq 	_FCNoSyntax
.8c22	c9 c1		cmp #$c1			cmp 	#KWD_TO
.8c24	d0 37		bne $8c5d			bne 	_FCSyntaxError
.8c26					_FCNoSyntax:
.8c26	e8		inx				inx
.8c27	20 04 a0	jsr $a004			jsr 	EvaluateInteger
.8c2a	20 85 a1	jsr $a185			jsr 	STKSaveCodePosition 		; save loop back position
.8c2d	68		pla				pla 								; restore DOWNTO or TO
.8c2e	5a		phy				phy 								; save Y on the stack
.8c2f	49 ad		eor #$ad			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8c31	f0 02		beq $8c35			beq 	_FCNotDownTo
.8c33	a9 02		lda #$02			lda 	#2
.8c35					_FCNotDownTo:
.8c35	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8c36	a0 10		ldy #$10			ldy 	#16
.8c38	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8c3a	a0 06		ldy #$06			ldy 	#6
.8c3c	ad 08 04	lda $0408			lda 	NSMantissa0
.8c3f	91 34		sta ($34),y			sta 	(basicStack),y
.8c41	ad 10 04	lda $0410			lda 	NSMantissa1
.8c44	c8		iny				iny
.8c45	91 34		sta ($34),y			sta 	(basicStack),y
.8c47	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c49	a2 01		ldx #$01			ldx 	#1
.8c4b	20 60 8c	jsr $8c60			jsr 	FCIntegerToStack
.8c4e	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8c50	a2 02		ldx #$02			ldx 	#2
.8c52	20 60 8c	jsr $8c60			jsr 	FCIntegerToStack
.8c55	20 80 8c	jsr $8c80			jsr 	CopyIndexToReference
.8c58	7a		ply				ply 								; restore position
.8c59	60		rts				rts
.8c5a					_FCError:
.8c5a	4c 82 ae	jmp $ae82			jmp 	TypeError
.8c5d					_FCSyntaxError:
.8c5d	4c 78 ae	jmp $ae78			jmp 	SyntaxError
.8c60					FCIntegerToStack:
.8c60	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8c63	10 03		bpl $8c68			bpl	 	_FCNotNegative
.8c65	20 42 a0	jsr $a042			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c68					_FCNotNegative:
.8c68	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c6b	91 34		sta ($34),y			sta 	(basicStack),y
.8c6d	c8		iny				iny
.8c6e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c71	91 34		sta ($34),y			sta 	(basicStack),y
.8c73	c8		iny				iny
.8c74	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8c77	91 34		sta ($34),y			sta 	(basicStack),y
.8c79	c8		iny				iny
.8c7a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8c7d	91 34		sta ($34),y			sta 	(basicStack),y
.8c7f	60		rts				rts
.8c80					CopyIndexToReference:
.8c80	5a		phy				phy
.8c81	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c83	38		sec				sec 								; (because we copy from offset 8)
.8c84	b1 34		lda ($34),y			lda 	(basicStack),y
.8c86	e9 08		sbc #$08			sbc 	#8
.8c88	85 36		sta $36				sta 	zTemp0
.8c8a	c8		iny				iny
.8c8b	b1 34		lda ($34),y			lda 	(basicStack),y
.8c8d	e9 00		sbc #$00			sbc 	#0
.8c8f	85 37		sta $37				sta 	zTemp0+1
.8c91	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c93	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c95	b1 34		lda ($34),y			lda 	(basicStack),y
.8c97	0a		asl a				asl 	a 							; into carry
.8c98	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c9a	90 14		bcc $8cb0			bcc 	_CITRNormal
.8c9c	38		sec				sec
.8c9d					_CITRNegative:
.8c9d	a9 00		lda #$00			lda 	#0
.8c9f	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ca1	91 36		sta ($36),y			sta 	(zTemp0),y
.8ca3	c8		iny				iny
.8ca4	ca		dex				dex
.8ca5	d0 f6		bne $8c9d			bne 	_CITRNegative
.8ca7	88		dey				dey 								; look at MSB of mantissa
.8ca8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8caa	09 80		ora #$80			ora 	#$80
.8cac	91 36		sta ($36),y			sta 	(zTemp0),y
.8cae	7a		ply				ply
.8caf	60		rts				rts
.8cb0					_CITRNormal:
.8cb0	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8cb2	91 36		sta ($36),y			sta 	(zTemp0),y
.8cb4	c8		iny				iny
.8cb5	ca		dex				dex
.8cb6	d0 f8		bne $8cb0			bne 	_CITRNormal
.8cb8	7a		ply				ply 								; and exit.
.8cb9	60		rts				rts
.8cba					NextCommand:
.8cba	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8cbc	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8cbe	20 6d a1	jsr $a16d			jsr 	StackCheckFrame
.8cc1	5a		phy				phy
.8cc2	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8cc4	b1 34		lda ($34),y			lda 	(basicStack),y
.8cc6	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8cc8	30 02		bmi $8ccc			bmi 	_NCStepNeg
.8cca	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8ccc					_NCStepNeg:
.8ccc	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8cce	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8cd0	18		clc				clc
.8cd1					_NCBump:
.8cd1	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8cd3	91 34		sta ($34),y			sta 	(basicStack),y
.8cd5	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8cd7	c8		iny				iny 								; next byte
.8cd8	ca		dex				dex 								; do four times
.8cd9	d0 f6		bne $8cd1			bne 	_NCBump
.8cdb	20 80 8c	jsr $8c80			jsr		CopyIndexToReference		; copy it to the reference variable.
.8cde	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ce0	b1 34		lda ($34),y			lda 	(basicStack),y
.8ce2	0a		asl a				asl 	a 							; sign bit to carry
.8ce3	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ce5	85 38		sta $38				sta 	zTemp1
.8ce7	90 02		bcc $8ceb			bcc 	_NCCompRev 					; use if step is +ve
.8ce9	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8ceb					_NCCompRev:
.8ceb	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8ced	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8cef	85 39		sta $39				sta 	zTemp1+1
.8cf1	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8cf3	38		sec				sec
.8cf4					_NCCompare:
.8cf4	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8cf6	b1 34		lda ($34),y			lda 	(basicStack),y
.8cf8	a4 39		ldy $39				ldy 	zTemp1+1
.8cfa	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8cfc	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8cfe	e6 39		inc $39				inc 	zTemp1+1
.8d00	ca		dex				dex 								; do it 4 times.
.8d01	d0 f1		bne $8cf4			bne 	_NCCompare
.8d03	50 02		bvc $8d07			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d05	49 80		eor #$80			eor 	#$80
.8d07					_NCNoOverflow:
.8d07	7a		ply				ply 								; restore Y position
.8d08	0a		asl a				asl 	a 							; is bit 7 set.
.8d09	90 04		bcc $8d0f			bcc 	_NCLoopback 				; if no , >= so loop back
.8d0b	20 5f a1	jsr $a15f			jsr 	StackClose 					; exit the loop
.8d0e	60		rts				rts
.8d0f					_NCLoopBack:
.8d0f	20 96 a1	jsr $a196			jsr 	STKLoadCodePosition 		; loop back
.8d12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d13					Command_GOSUB:
.8d13	a2 00		ldx #$00			ldx 	#0
.8d15	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d18	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d1a	20 41 a1	jsr $a141			jsr 	StackOpen 					; create frame
.8d1d	20 85 a1	jsr $a185			jsr 	STKSaveCodePosition 		; save current position
.8d20	4c 36 8d	jmp $8d36			jmp 	GotoStackX
.8d23					Command_RETURN:
.8d23	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d25	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d27	20 6d a1	jsr $a16d			jsr 	StackCheckFrame
.8d2a	20 96 a1	jsr $a196			jsr 	STKLoadCodePosition 		; restore code position
.8d2d	20 5f a1	jsr $a15f			jsr 	StackClose
.8d30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d31					GotoCommand:
.8d31	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d33	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger
.8d36					GotoStackX:
.8d36	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8d39	48		pha				pha 								; it is slightly inefficient, just in cases.
.8d3a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d3d	fa		plx				plx
.8d3e	20 ec a0	jsr $a0ec			jsr 	MemorySearch 				; transfer to line number AX.
.8d41	90 05		bcc $8d48			bcc 	_GotoError 					; not found, off end.
.8d43	d0 03		bne $8d48			bne 	_GotoError 					; not found exactly
.8d45	4c 71 90	jmp $9071			jmp 	RunNewLine 					; and go straight to new line code.
.8d48					_GotoError:
.8d48	a9 0d		lda #$0d		lda	#13
.8d4a	4c d5 94	jmp $94d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d4d					IfCommand:
.8d4d	a2 00		ldx #$00			ldx 	#0 							; If what.
.8d4f	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber
.8d52	b1 30		lda ($30),y			lda 	(codePtr),y
.8d54	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8d56	d0 0a		bne $8d62			bne 	_IFStructured
.8d58	c8		iny				iny 								; consume THEN
.8d59	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; is it zero
.8d5c	f0 01		beq $8d5f			beq 	_IfFail 					; if fail, go to next line
.8d5e	60		rts				rts 								; if THEN just continue
.8d5f					_IfFail:
.8d5f	4c d6 90	jmp $90d6			jmp 	EOLCommand
.8d62					_IfStructured:
.8d62	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; is it zero
.8d65	d0 07		bne $8d6e			bne 	_IfExit 					; if not, then continue normally.
.8d67	a9 ae		lda #$ae			lda 	#KWD_ELSE 					; look for else/endif
.8d69	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.8d6b	20 47 94	jsr $9447			jsr 	ScanForward 				; and run from there/
.8d6e					_IfExit:
.8d6e	60		rts				rts
.8d6f					ElseCode:
.8d6f	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d71	aa		tax				tax 								; so just go to the structure exit
.8d72	20 47 94	jsr $9447			jsr 	ScanForward
.8d75	60		rts				rts
.8d76					EndIf:
.8d76	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8d77					LetCommand:
.8d77	a2 00		ldx #$00			ldx 	#0
.8d79	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7b	c9 10		cmp #$10			cmp 	#KWD_AT
.8d7d	d0 16		bne $8d95			bne 	_LCStandard
.8d7f	c8		iny				iny 								; skip equal
.8d80	20 af 9b	jsr $9baf			jsr 	EvaluateTerm 				; get a number
.8d83	20 f3 99	jsr $99f3			jsr 	Dereference 				; dereference it
.8d86	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8d89	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8d8b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8d8e	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8d90	d0 10		bne $8da2			bne 	_LCMain
.8d92	4c 82 ae	jmp $ae82			jmp 	TypeError 					; was a reference before.
.8d95					_LCStandard:
.8d95	ad c6 98	lda $98c6			lda 	PrecedenceLevel+"*"			; precedence > this
.8d98	20 e0 98	jsr $98e0			jsr 	EvaluateExpressionAtPrecedence
.8d9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8d9e	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8da0	f0 0e		beq $8db0			beq 	_LetGoProc 					; it's a procedure call.
.8da2					_LCMain:
.8da2	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8da4	20 a2 a8	jsr $a8a2			jsr 	CheckNextA
.8da7	e8		inx				inx 								; RHS
.8da8	20 d8 9f	jsr $9fd8			jsr 	EvaluateValue
.8dab	ca		dex				dex
.8dac	20 b3 8d	jsr $8db3			jsr 	AssignVariable
.8daf	60		rts				rts
.8db0					_LetGoProc:
.8db0	4c 4c 8f	jmp $8f4c			jmp 	CallProcedure
.8db3					AssignVariable:
.8db3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8db6	48		pha				pha 								; save a copy
.8db7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8dba	29 10		and #$10			and 	#NSBIsString
.8dbc	d0 0b		bne $8dc9			bne 	_ASError
.8dbe	68		pla				pla 								; get back
.8dbf	29 10		and #$10			and 	#NSBIsString 				; check type
.8dc1	d0 03		bne $8dc6			bne 	_ASString
.8dc3	4c 1b 99	jmp $991b			jmp 	AssignNumber
.8dc6					_ASString:
.8dc6	4c 89 99	jmp $9989			jmp 	AssignString
.8dc9					_ASError:
.8dc9	4c 82 ae	jmp $ae82			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8dcc					Command_List:
.8dcc	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8dcf	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8dd2	a9 ff		lda #$ff			lda 	#$FF
.8dd4	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8dd7	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8dda	b1 30		lda ($30),y			lda 	(codePtr),y
.8ddc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dde	f0 1e		beq $8dfe			beq 	_CLSecond
.8de0	20 5c 8e	jsr $8e5c			jsr 	CLIsDigit 					; if not digit, list all
.8de3	b0 24		bcs $8e09			bcs 	_CLStart
.8de5	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8de7	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger
.8dea	b1 30		lda ($30),y			lda 	(codePtr),y
.8dec	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dee	f0 0e		beq $8dfe			beq 	_CLSecond 					; if so go get it
.8df0	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8df3	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8df6	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8df9	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8dfc	80 0b		bra $8e09			bra 	_CLStart
.8dfe					_CLSecond:
.8dfe	c8		iny				iny 								; consume comma
.8dff	20 5c 8e	jsr $8e5c			jsr 	CLIsDigit 					; digit found
.8e02	b0 05		bcs $8e09			bcs 	_CLStart 					; if not, continue listing
.8e04	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8e06	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger
.8e09					_CLStart
.8e09	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e0b	85 30		sta $30				sta 	codePtr
.8e0d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e0f	85 31		sta $31				sta 	codePtr+1
.8e11					_CLLoop:
.8e11	20 5e b0	jsr $b05e			jsr 	EXTBreakCheck 				; break check
.8e14	f0 30		beq $8e46			beq 	_CLExit
.8e16	b2 30		lda ($30)			lda 	(codePtr)
.8e18	f0 2c		beq $8e46			beq 	_CLExit
.8e1a	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8e1c	20 49 8e	jsr $8e49			jsr 	CLCompareLineNo
.8e1f	90 18		bcc $8e39			bcc 	_CLNext
.8e21	a2 07		ldx #$07			ldx 	#7
.8e23	20 49 8e	jsr $8e49			jsr 	CLCompareLineNo
.8e26	f0 02		beq $8e2a			beq 	_CLDoThisOne
.8e28	b0 0f		bcs $8e39			bcs 	_CLNext
.8e2a					_CLDoThisOne:
.8e2a	20 a3 92	jsr $92a3			jsr 	ListConvertLine 			; convert line into token Buffer
.8e2d	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8e2f	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8e31	20 2e 95	jsr $952e			jsr 	PrintStringXA
.8e34	a9 0d		lda #$0d			lda 	#13 						; new line
.8e36	20 1d b0	jsr $b01d			jsr 	EXTPrintCharacter
.8e39					_CLNext:
.8e39	18		clc				clc
.8e3a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8e3c	65 30		adc $30				adc 	codePtr
.8e3e	85 30		sta $30				sta 	codePtr
.8e40	90 02		bcc $8e44			bcc 	_CREExit
.8e42	e6 31		inc $31				inc 	codePtr+1
.8e44					_CREExit:
.8e44	80 cb		bra $8e11			bra 	_CLLoop
.8e46					_CLExit:
.8e46	4c 47 8a	jmp $8a47			jmp 	WarmStart
.8e49					CLCompareLineNo:
.8e49	38		sec				sec
.8e4a	a0 01		ldy #$01			ldy 	#1
.8e4c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e4e	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8e51	85 36		sta $36				sta 	zTemp0
.8e53	c8		iny				iny
.8e54	b1 30		lda ($30),y			lda 	(codePtr),y
.8e56	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8e59	05 36		ora $36				ora 	zTemp0
.8e5b	60		rts				rts
.8e5c					CLIsDigit:
.8e5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e5e	c9 30		cmp #$30			cmp 	#"0"
.8e60	90 03		bcc $8e65			bcc	 	_CLIDExitFalse
.8e62	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e64	60		rts				rts
.8e65					_CLIDExitFalse:
.8e65	38		sec				sec
.8e66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8e67					Command_LOCAL:
.8e67	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8e69	20 75 8e	jsr $8e75			jsr 	LocaliseNextTerm 			; convert term to a local.
.8e6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6e	c8		iny				iny
.8e6f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e71	f0 f4		beq $8e67			beq 	Command_LOCAL
.8e73	88		dey				dey 								; unpick pre-get
.8e74	60		rts				rts
.8e75					LocaliseNextTerm:
.8e75	20 af 9b	jsr $9baf			jsr 	EvaluateTerm 				; evaluate the term
.8e78	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e7b	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8e7d	f0 69		beq $8ee8			beq		_LNTError
.8e7f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e82	85 36		sta $36				sta 	zTemp0
.8e84	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e87	85 37		sta $37				sta  	zTemp0+1
.8e89	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e8c	29 10		and #$10			and 	#NSBIsString
.8e8e	d0 22		bne $8eb2			bne 	_LNTPushString
.8e90	5a		phy				phy
.8e91	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e93					_LNTPushNumLoop:
.8e93	b1 36		lda ($36),y			lda		(zTemp0),y
.8e95	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8e98	a9 00		lda #$00			lda 	#0
.8e9a	91 36		sta ($36),y			sta 	(zTemp0),y
.8e9c	c8		iny				iny
.8e9d	c0 05		cpy #$05			cpy 	#5
.8e9f	d0 f2		bne $8e93			bne 	_LNTPushNumLoop
.8ea1	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8ea3	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8ea6	a5 37		lda $37				lda 	zTemp0+1
.8ea8	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8eab	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8ead	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8eb0	7a		ply				ply
.8eb1	60		rts				rts
.8eb2					_LNTPushString:
.8eb2	5a		phy				phy
.8eb3	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8eb5	85 38		sta $38				sta 	zTemp1
.8eb7	a0 01		ldy #$01			ldy 	#1
.8eb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ebb	85 39		sta $39				sta 	zTemp1+1
.8ebd	a0 00		ldy #$00			ldy 	#0 							; output string
.8ebf	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8ec1	f0 0a		beq $8ecd			beq 	_LNTStringOut
.8ec3					_LNTPushStrLoop:
.8ec3	b1 38		lda ($38),y			lda 	(zTemp1),y
.8ec5	f0 06		beq $8ecd			beq 	_LNTStringOut
.8ec7	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8eca	c8		iny				iny
.8ecb	80 f6		bra $8ec3			bra 	_LNTPushStrLoop
.8ecd					_LNTStringOut:
.8ecd	98		tya				tya									; output length
.8ece	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8ed1	a9 00		lda #$00			lda 	#0 							; clear original string.
.8ed3	92 38		sta ($38)			sta 	(zTemp1)
.8ed5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8ed8	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8edb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ede	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8ee1	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8ee3	20 1f a1	jsr $a11f			jsr 	StackPushByte
.8ee6	7a		ply				ply
.8ee7	60		rts				rts
.8ee8					_LNTError:
.8ee8	4c 78 ae	jmp $ae78			jmp 	SyntaxError
.a839					LocalPopValue:
.a839	20 38 a1	jsr $a138			jsr 	StackPopByte
.a83c	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a83e	d0 17		bne $a857			bne 	_LPVString
.a840	20 38 a1	jsr $a138			jsr 	StackPopByte 				; address
.a843	85 37		sta $37				sta 	zTemp0+1
.a845	20 38 a1	jsr $a138			jsr 	StackPopByte
.a848	85 36		sta $36				sta 	zTemp0
.a84a	5a		phy				phy
.a84b	a0 04		ldy #$04			ldy 	#4 							; copy back
.a84d					_LPVNumberCopy:
.a84d	20 38 a1	jsr $a138			jsr 	StackPopByte
.a850	91 36		sta ($36),y			sta 	(zTemp0),y
.a852	88		dey				dey
.a853	10 f8		bpl $a84d			bpl 	_LPVNumberCopy
.a855	7a		ply				ply 								; and complete
.a856	60		rts				rts
.a857					_LPVString:
.a857	20 38 a1	jsr $a138			jsr 	StackPopByte 				; address of record => zTemp0
.a85a	85 37		sta $37				sta 	zTemp0+1
.a85c	20 38 a1	jsr $a138			jsr 	StackPopByte
.a85f	85 36		sta $36				sta 	zTemp0
.a861	5a		phy				phy
.a862	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a864	85 38		sta $38				sta 	zTemp1
.a866	a0 01		ldy #$01			ldy 	#1
.a868	b1 36		lda ($36),y			lda 	(zTemp0),y
.a86a	85 39		sta $39				sta 	zTemp1+1
.a86c	20 38 a1	jsr $a138			jsr 	StackPopByte 				; # to get => y
.a86f	a8		tay				tay
.a870	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a872	f0 0e		beq $a882			beq 	_LPVStringCopied
.a874	a9 00		lda #$00			lda 	#0 							; NULL on end
.a876	91 38		sta ($38),y			sta 	(zTemp1),y
.a878					_LPVStringCopy:
.a878	88		dey				dey
.a879	30 07		bmi $a882			bmi 	_LPVStringCopied
.a87b	20 38 a1	jsr $a138			jsr 	StackPopByte
.a87e	91 38		sta ($38),y			sta 	(zTemp1),y
.a880	80 f6		bra $a878			bra 	_LPVStringCopy
.a882					_LPVStringCopied:
.a882	fa		plx				plx
.a883	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8eeb					NewCommand:
.8eeb	20 ca a0	jsr $a0ca			jsr 	MemoryNew
.8eee	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8ef1	20 e0 8a	jsr $8ae0			jsr 	ClearCommand 				; clear everything.
.8ef4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8ef5					Command_Print:
.8ef5	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ef6					_CPLoop:
.8ef6	08		php				php 								; save last action flag
.8ef7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ef9	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8efb	f0 46		beq $8f43			beq 	_CPExit
.8efd	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8eff	f0 42		beq $8f43			beq 	_CPExit
.8f01	68		pla				pla 								; throw last action flag
.8f02	b1 30		lda ($30),y			lda 	(codePtr),y
.8f04	c8		iny				iny
.8f05	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8f07	f0 37		beq $8f40			beq 	_CPContinueWithSameLine
.8f09	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8f0b	f0 2e		beq $8f3b			beq 	_CPTab
.8f0d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8f0f	f0 26		beq $8f37			beq 	_CPNewLine
.8f11	88		dey				dey 								; undo the get.
.8f12	a2 00		ldx #$00			ldx 	#0
.8f14	20 d8 9f	jsr $9fd8			jsr 	EvaluateValue 				; get a value into slot 0
.8f17	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8f1a	29 10		and #$10			and 	#NSBIsString
.8f1c	f0 0b		beq $8f29			beq 	_CPNumber
.8f1e	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8f21	ad 08 04	lda $0408			lda 	NSMantissa0
.8f24	20 2e 95	jsr $952e			jsr 	PrintStringXA
.8f27	80 cc		bra $8ef5			bra 	Command_Print 				; loop round clearing carry so NL if end
.8f29					_CPNumber:
.8f29	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8f2b	20 ae 9e	jsr $9eae			jsr 	ConvertNumberToString 		; convert to string
.8f2e	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8f30	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8f32	20 2e 95	jsr $952e			jsr 	PrintStringXA
.8f35	80 be		bra $8ef5			bra 	Command_Print 				; loop round clearing carry so NL if end
.8f37					_CPNewLine:
.8f37	a9 0d		lda #$0d			lda 	#13
.8f39	80 02		bra $8f3d			bra 	_CPPrintChar
.8f3b					_CPTab:
.8f3b	a9 09		lda #$09			lda 	#9 							; print TAB
.8f3d					_CPPrintChar:
.8f3d	20 1d b0	jsr $b01d			jsr 	EXTPrintCharacter
.8f40					_CPContinueWithSameLine:
.8f40	38		sec				sec 								; loop round with carry set, which
.8f41	80 b3		bra $8ef6			bra 	_CPLoop 					; will inhibit final CR
.8f43					_CPExit:
.8f43	28		plp				plp 								; get last action flag
.8f44	b0 05		bcs $8f4b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8f46	a9 0d		lda #$0d			lda 	#13 						; print new line
.8f48	20 1d b0	jsr $b01d			jsr 	EXTPrintCharacter
.8f4b					_CPExit2:
.8f4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8f4c					CallProcedure:
.8f4c	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8f4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8f50	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8f52	f0 0c		beq $8f60			beq 	_CPEndParam
.8f54					_CPParamLoop:
.8f54	20 de 98	jsr $98de			jsr 	EvaluateExpression 			; get parameter onto stack
.8f57	e8		inx				inx 								; bump next stack
.8f58	b1 30		lda ($30),y			lda 	(codePtr),y
.8f5a	c8		iny				iny
.8f5b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8f5d	f0 f5		beq $8f54			beq 	_CPParamLoop
.8f5f	88		dey				dey 								; unpick.
.8f60					_CPEndParam:
.8f60	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8f63	c8		iny				iny									; skip right bracket
.8f64	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8f66	20 41 a1	jsr $a141			jsr 	StackOpen
.8f69	20 85 a1	jsr $a185			jsr 	STKSaveCodePosition 		; save loop position
.8f6c	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8f6f	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8f71	ad 10 04	lda $0410			lda 	NSMantissa1
.8f74	85 37		sta $37				sta 	zTemp0+1
.8f76	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8f78	b2 36		lda ($36)			lda 	(zTemp0)
.8f7a	85 30		sta $30				sta 	safePtr
.8f7c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f7e	85 31		sta $31				sta 	safePtr+1
.8f80	c8		iny				iny
.8f81	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f83	85 32		sta $32				sta 	safePtr+2
.8f85	c8		iny				iny
.8f86	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f88	85 33		sta $33				sta 	safePtr+3
.8f8a	c8		iny				iny 								; get Y offset -> Y
.8f8b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f8d	a8		tay				tay
.8f8e	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8f90	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8f93	f0 13		beq $8fa8			beq 	_ParamExit 					; if so, exit.
.8f95					_ParamExtract:
.8f95	ca		dex				dex 								; put a local term on the level before
.8f96	20 75 8e	jsr $8e75			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8f99	20 b3 8d	jsr $8db3			jsr 	AssignVariable 				; assign stacked value to the variable.
.8f9c	e8		inx				inx 								; advance to next parameter to do.
.8f9d	e8		inx				inx
.8f9e	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8fa1	f0 05		beq $8fa8			beq 	_ParamExit
.8fa3	20 9a a8	jsr $a89a			jsr 	CheckComma 					; comma seperating parameters
.8fa6	80 ed		bra $8f95			bra 	_ParamExtract
.8fa8					_ParamExit:
.8fa8	20 92 a8	jsr $a892			jsr 	CheckRightBracket 			; check )
.8fab	60		rts				rts 								; and continue from here
.a884					Command_ENDPROC:
.a884	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a886	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a888	20 6d a1	jsr $a16d			jsr 	StackCheckFrame
.a88b	20 96 a1	jsr $a196			jsr 	STKLoadCodePosition 		; restore code position
.a88e	20 5f a1	jsr $a15f			jsr 	StackClose
.a891	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8fac					Command_Read:
.8fac	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8fae	20 af 9b	jsr $9baf			jsr 	EvaluateTerm
.8fb1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8fb4	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8fb6	f0 4a		beq $9002			beq 	_CRSyntax 					; check reference (bit 0)
.8fb8	20 4b 90	jsr $904b			jsr 	SwapDataCodePtrs 			; swap code and data
.8fbb	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8fbe	d0 20		bne $8fe0			bne 	_CRContinueData
.8fc0					_CRKeepSearching:
.8fc0	a9 ab		lda #$ab			lda 	#KWD_DATA 					; scan for instruction
.8fc2	aa		tax				tax
.8fc3	20 47 94	jsr $9447			jsr 	ScanForward
.8fc6	c9 ab		cmp #$ab			cmp 	#KWD_DATA 					; found data ?
.8fc8	f0 16		beq $8fe0			beq 	_CRHaveData 				; found it
.8fca	18		clc				clc
.8fcb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8fcd	65 30		adc $30				adc 	codePtr
.8fcf	85 30		sta $30				sta 	codePtr
.8fd1	90 02		bcc $8fd5			bcc 	_CREExit
.8fd3	e6 31		inc $31				inc 	codePtr+1
.8fd5					_CREExit:
.8fd5	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8fd7	b2 30		lda ($30)			lda 	(codePtr)
.8fd9	d0 e5		bne $8fc0			bne 	_CRKeepSearching
.8fdb	a9 0b		lda #$0b		lda	#11
.8fdd	4c d5 94	jmp $94d5		jmp	ErrorHandler
.8fe0					_CRHaveData:
.8fe0					_CRContinueData:
.8fe0	a2 01		ldx #$01			ldx 	#1
.8fe2	20 d8 9f	jsr $9fd8			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8fe5	ca		dex				dex
.8fe6	20 b3 8d	jsr $8db3			jsr		AssignVariable 				; do the assignment
.8fe9	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8fec	b1 30		lda ($30),y			lda 	(codePtr),y
.8fee	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8ff0	d0 04		bne $8ff6			bne 	_CRSwapBack
.8ff2	c8		iny				iny 								; consume comma
.8ff3	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8ff6					_CRSwapBack:
.8ff6	20 4b 90	jsr $904b			jsr 	SwapDataCodePtrs			; swap them back.
.8ff9	b1 30		lda ($30),y			lda 	(codePtr),y
.8ffb	c8		iny				iny
.8ffc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ffe	f0 ac		beq $8fac			beq 	Command_Read 				; if so go round again.
.9000	88		dey				dey 								; unpick get.
.9001	60		rts				rts
.9002					_CRSyntax:
.9002	4c 78 ae	jmp $ae78			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9005					RemCommand:
.9005	b1 30		lda ($30),y			lda 	(codePtr),y
.9007	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9009	d0 06		bne $9011			bne 	_RMExit
.900b	c8		iny				iny
.900c	98		tya				tya
.900d	38		sec				sec
.900e	71 30		adc ($30),y			adc 	(codePtr),y
.9010	a8		tay				tay
.9011					_RMExit:
.9011	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9012					Command_REPEAT:
.9012	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9014	20 41 a1	jsr $a141			jsr 	StackOpen
.9017	20 85 a1	jsr $a185			jsr 	STKSaveCodePosition 		; save loop position
.901a	60		rts				rts
.901b					Command_UNTIL:
.901b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.901d	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.901f	20 6d a1	jsr $a16d			jsr 	StackCheckFrame
.9022	a2 00		ldx #$00			ldx 	#0
.9024	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber 				; work out the number
.9027	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; check if zero
.902a	f0 04		beq $9030			beq 	_CULoopBack 				; if so keep looping
.902c	20 5f a1	jsr $a15f			jsr 	StackClose		 			; return
.902f	60		rts				rts
.9030					_CULoopBack:
.9030	20 96 a1	jsr $a196			jsr 	STKLoadCodePosition 		; loop back
.9033	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9034					Command_Restore:
.9034	20 4b 90	jsr $904b			jsr 	SwapDataCodePtrs 			; swap code and data
.9037	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9039	85 30		sta $30				sta 	codePtr
.903b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.903d	85 31		sta $31				sta 	codePtr+1
.903f	20 4b 90	jsr $904b			jsr 	SwapDataCodePtrs 			; put them back
.9042	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9044	8d 9b 04	sta $049b			sta 	dataPointer+4
.9047	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.904a	60		rts				rts
.904b					SwapDataCodePtrs:
.904b	da		phx				phx
.904c	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.904e					_SDCPLoop:
.904e	b5 30		lda $30,x			lda 	safePtr,x
.9050	48		pha				pha
.9051	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9054	95 30		sta $30,x			sta 	safePtr,x
.9056	68		pla				pla
.9057	9d 97 04	sta $0497,x			sta 	dataPointer,x
.905a	ca		dex				dex
.905b	10 f1		bpl $904e			bpl 	_SDCPLoop
.905d	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9060	8c 9b 04	sty $049b			sty 	dataPointer+4
.9063	a8		tay				tay
.9064	fa		plx				plx
.9065	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9066					CommandRUN:
.9066	20 e0 8a	jsr $8ae0			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9069	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.906b	85 30		sta $30				sta 	codePtr
.906d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.906f	85 31		sta $31				sta 	codePtr+1
.9071					RUNNewLine:
.9071	b2 30		lda ($30)			lda 	(codePtr)
.9073	f0 5e		beq $90d3			beq 	CRNoProgram         		; no then END.
.9075	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9077	9a		txs				txs
.9078					RUNCodePointerLine:
.9078	a0 02		ldy #$02			ldy 	#2 							; start of program
.907a					_CRIncMainLoop:
.907a	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.907d	d0 05		bne $9084			bne 	_CRNoBreakCheck
.907f	20 5e b0	jsr $b05e			jsr 	EXTBreakCheck 				; break check
.9082	f0 4a		beq $90ce			beq 	_CRBreak
.9084					_CRNoBreakCheck:
.9084	c8		iny				iny
.9085					_CRMainLoop:
.9085	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9088	b1 30		lda ($30),y			lda 	(codePtr),y
.908a	10 10		bpl $909c			bpl 	_CRNotKeyword
.908c	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.908e	b0 04		bcs $9094			bcs 	_CRIsKeyword
.9090	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9092	b0 34		bcs $90c8			bcs		_CRSyntaxError
.9094					_CRIsKeyword:
.9094	c8		iny				iny 								; consume command
.9095	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9096	aa		tax				tax 								; put in X for vector jump
.9097	20 cb 90	jsr $90cb			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.909a	80 e9		bra $9085			bra 	_CRMainLoop 				; and loop round
.909c					_CRNotKeyword:
.909c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.909e	f0 da		beq $907a			beq 	_CRIncMainLoop
.90a0	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.90a2	90 05		bcc $90a9			bcc 	_CRNotVariable
.90a4					_CRGoLet:
.90a4	20 77 8d	jsr $8d77			jsr 	LetCommand
.90a7	80 dc		bra $9085			bra 	_CRMainLoop
.90a9					_CRNotVariable:
.90a9	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.90ab	f0 f7		beq $90a4			beq 	_CRGoLet
.90ad	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.90af	f0 f3		beq $90a4			beq 	_CRGoLet
.90b1	c9 21		cmp #$21			cmp 	#KWD_PLING
.90b3	f0 ef		beq $90a4			beq 	_CRGoLet
.90b5	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.90b7	f0 09		beq $90c2			beq 	_CRGoRem
.90b9	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.90bb	d0 0b		bne $90c8			bne 	_CRSyntaxError
.90bd	20 80 89	jsr $8980			jsr 	LabelHere
.90c0	80 c3		bra $9085			bra 	_CRMainLoop
.90c2					_CRGoRem:
.90c2	c8		iny				iny
.90c3	20 05 90	jsr $9005			jsr 	RemCommand
.90c6	80 bd		bra $9085			bra 	_CRMainLoop
.90c8					_CRSyntaxError:
.90c8	4c 78 ae	jmp $ae78			jmp 	SyntaxError
.90cb					_CRCallVector0:
.90cb	7c 76 91	jmp ($9176,x)			jmp 	(VectorSet0,x)
.90ce					_CRBreak:
.90ce	a9 01		lda #$01		lda	#1
.90d0	4c d5 94	jmp $94d5		jmp	ErrorHandler
.90d3					CRNoProgram:
.90d3	4c fd 8b	jmp $8bfd			jmp 	EndCommand
.90d6					EOLCommand:
.90d6	18		clc				clc
.90d7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.90d9	65 30		adc $30				adc 	codePtr
.90db	85 30		sta $30				sta 	codePtr
.90dd	90 02		bcc $90e1			bcc 	_CREExit
.90df	e6 31		inc $31				inc 	codePtr+1
.90e1					_CREExit:
.90e1	80 8e		bra $9071			bra 	RunNewLine
.90e3					Shift1Command:
.90e3	b1 30		lda ($30),y			lda 	(codePtr),y
.90e5	c8		iny				iny
.90e6	0a		asl a				asl 	a
.90e7	aa		tax				tax
.90e8	7c fa 91	jmp ($91fa,x)			jmp 	(VectorSet1,x)
.90eb					Shift2Command:
.90eb	b1 30		lda ($30),y			lda 	(codePtr),y
.90ed	c8		iny				iny
.90ee	0a		asl a				asl 	a
.90ef	aa		tax				tax
.90f0	7c 16 92	jmp ($9216,x)			jmp 	(VectorSet2,x)
.90f3					Unused1:
.90f3					Unused2:
.90f3					Unused3:
.90f3					Unused4:
.90f3	4c 78 ae	jmp $ae78			jmp 	SyntaxError
>90f6							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.90f6					VectorSetPunc:
>90f6	7f 96					.word	ShiftLeft                        ; $00 <<
>90f8	79 95					.word	BinaryCompareLessEqual           ; $01 <=
>90fa	6f 95					.word	BinaryCompareNotEqual            ; $02 <>
>90fc	78 ae					.word	SyntaxError                      ; $03 !!3
>90fe	78 ae					.word	SyntaxError                      ; $04 ><
>9100	83 95					.word	BinaryCompareGreaterEqual        ; $05 >=
>9102	82 96					.word	ShiftRight                       ; $06 >>
>9104	78 ae					.word	SyntaxError                      ; $07 !!7
>9106	78 ae					.word	SyntaxError                      ; $08 !!8
>9108	78 ae					.word	SyntaxError                      ; $09 !!9
>910a	78 ae					.word	SyntaxError                      ; $0a !!10
>910c	78 ae					.word	SyntaxError                      ; $0b !!11
>910e	78 ae					.word	SyntaxError                      ; $0c !!12
>9110	78 ae					.word	SyntaxError                      ; $0d !!13
>9112	78 ae					.word	SyntaxError                      ; $0e !!14
>9114	78 ae					.word	SyntaxError                      ; $0f !!15
>9116	78 ae					.word	SyntaxError                      ; $10 @
>9118	78 ae					.word	SyntaxError                      ; $11 !!17
>911a	78 ae					.word	SyntaxError                      ; $12 !!18
>911c	78 ae					.word	SyntaxError                      ; $13 [
>911e	ab a8					.word	IntegerDivide                    ; $14 \
>9120	78 ae					.word	SyntaxError                      ; $15 ]
>9122	08 98					.word	EorInteger                       ; $16 ^
>9124	78 ae					.word	SyntaxError                      ; $17 _
>9126	78 ae					.word	SyntaxError                      ; $18 `
>9128	78 ae					.word	SyntaxError                      ; $19 !!25
>912a	78 ae					.word	SyntaxError                      ; $1a !!26
>912c	78 ae					.word	SyntaxError                      ; $1b {
>912e	c2 97					.word	OraInteger                       ; $1c |
>9130	78 ae					.word	SyntaxError                      ; $1d }
>9132	78 ae					.word	SyntaxError                      ; $1e ~
>9134	78 ae					.word	SyntaxError                      ; $1f [7m<7F>[m
>9136	78 ae					.word	SyntaxError                      ; $20
>9138	4e 98					.word	WordIndirect                     ; $21 !
>913a	78 ae					.word	SyntaxError                      ; $22 "
>913c	78 ae					.word	SyntaxError                      ; $23 #
>913e	78 ae					.word	SyntaxError                      ; $24 $
>9140	f8 a8					.word	IntegerModulus                   ; $25 %
>9142	7c 97					.word	AndInteger                       ; $26 &
>9144	78 ae					.word	SyntaxError                      ; $27 '
>9146	78 ae					.word	SyntaxError                      ; $28 (
>9148	78 ae					.word	SyntaxError                      ; $29 )
>914a	6d a9					.word	MulInteger                       ; $2a *
>914c	16 97					.word	AddInteger                       ; $2b +
>914e	78 ae					.word	SyntaxError                      ; $2c ,
>9150	51 97					.word	SubInteger                       ; $2d -
>9152	78 ae					.word	SyntaxError                      ; $2e .
>9154	04 ab					.word	FDivideCommand                   ; $2f /
>9156	78 ae					.word	SyntaxError                      ; $30 0
>9158	78 ae					.word	SyntaxError                      ; $31 1
>915a	78 ae					.word	SyntaxError                      ; $32 2
>915c	78 ae					.word	SyntaxError                      ; $33 3
>915e	78 ae					.word	SyntaxError                      ; $34 4
>9160	78 ae					.word	SyntaxError                      ; $35 5
>9162	78 ae					.word	SyntaxError                      ; $36 6
>9164	78 ae					.word	SyntaxError                      ; $37 7
>9166	78 ae					.word	SyntaxError                      ; $38 8
>9168	78 ae					.word	SyntaxError                      ; $39 9
>916a	78 ae					.word	SyntaxError                      ; $3a :
>916c	78 ae					.word	SyntaxError                      ; $3b ;
>916e	5b 95					.word	BinaryCompareLess                ; $3c <
>9170	51 95					.word	BinaryCompareEqual               ; $3d =
>9172	65 95					.word	BinaryCompareGreater             ; $3e >
>9174	75 98					.word	ByteIndirect                     ; $3f ?
.9176					VectorSet0:
>9176	d6 90					.word	EOLCommand                       ; $80 !0:EOF
>9178	e3 90					.word	Shift1Command                    ; $81 !1:SH1
>917a	eb 90					.word	Shift2Command                    ; $82 !2:SH2
>917c	4a ac					.word	AbsUnary                         ; $83 ABS(
>917e	3f 9d					.word	AllocUnary                       ; $84 ALLOC(
>9180	5a ac					.word	AscUnary                         ; $85 ASC(
>9182	5f 9e					.word	ChrUnary                         ; $86 CHR$(
>9184	78 ae					.word	SyntaxError                      ; $87 EVENT(
>9186	4d 95					.word	UnaryFalse                       ; $88 FALSE
>9188	67 ac					.word	FracUnary                        ; $89 FRAC(
>918a	7d ac					.word	IntUnary                         ; $8a INT(
>918c	d3 ac					.word	IsValUnary                       ; $8b ISVAL(
>918e	39 9f					.word	Unary_Left                       ; $8c LEFT$(
>9190	8f ac					.word	LenUnary                         ; $8d LEN(
>9192	63 9f					.word	Unary_Mid                        ; $8e MID$(
>9194	af 9d					.word	Unary_Not                        ; $8f NOT(
>9196	78 ae					.word	SyntaxError                      ; $90 OFF
>9198	78 ae					.word	SyntaxError                      ; $91 ON
>919a	c5 9d					.word	Unary_Random                     ; $92 RANDOM(
>919c	49 9f					.word	Unary_Right                      ; $93 RIGHT$(
>919e	de 9d					.word	Unary_Rnd                        ; $94 RND(
>91a0	a9 ac					.word	SgnUnary                         ; $95 SGN(
>91a2	71 9e					.word	SpcUnary                         ; $96 SPC(
>91a4	8c 9e					.word	Unary_Str                        ; $97 STR$(
>91a6	78 ae					.word	SyntaxError                      ; $98 TIMER(
>91a8	41 95					.word	UnaryTrue                        ; $99 TRUE
>91aa	c9 ac					.word	ValUnary                         ; $9a VAL(
>91ac	00 8c					.word	ForCommand                       ; $9b FOR
>91ae	4d 8d					.word	IfCommand                        ; $9c IF
>91b0	f3 90					.word	Unused1                          ; $9d PROC
>91b2	12 90					.word	Command_REPEAT                   ; $9e REPEAT
>91b4	a6 94					.word	Command_WHILE                    ; $9f WHILE
>91b6	76 8d					.word	EndIf                            ; $a0 ENDIF
>91b8	84 a8					.word	Command_ENDPROC                  ; $a1 ENDPROC
>91ba	ba 8c					.word	NextCommand                      ; $a2 NEXT
>91bc	f3 90					.word	Unused4                          ; $a3 THEN
>91be	1b 90					.word	Command_UNTIL                    ; $a4 UNTIL
>91c0	c7 94					.word	Command_WEND                     ; $a5 WEND
>91c2	a6 8a					.word	CallCommand                      ; $a6 CALL
>91c4	78 ae					.word	SyntaxError                      ; $a7 CIRCLE
>91c6	78 ae					.word	SyntaxError                      ; $a8 CLS
>91c8	78 ae					.word	SyntaxError                      ; $a9 COLOR
>91ca	78 ae					.word	SyntaxError                      ; $aa COLOUR
>91cc	38 8b					.word	Command_Data                     ; $ab DATA
>91ce	40 8b					.word	DimCommand                       ; $ac DIM
>91d0	f3 90					.word	Unused3                          ; $ad DOWNTO
>91d2	6f 8d					.word	ElseCode                         ; $ae ELSE
>91d4	13 8d					.word	Command_GOSUB                    ; $af GOSUB
>91d6	31 8d					.word	GotoCommand                      ; $b0 GOTO
>91d8	78 ae					.word	SyntaxError                      ; $b1 HERE
>91da	78 ae					.word	SyntaxError                      ; $b2 HIDE
>91dc	77 8d					.word	LetCommand                       ; $b3 LET
>91de	78 ae					.word	SyntaxError                      ; $b4 LINE
>91e0	67 8e					.word	Command_LOCAL                    ; $b5 LOCAL
>91e2	78 ae					.word	SyntaxError                      ; $b6 OUTLINE
>91e4	f5 8e					.word	Command_Print                    ; $b7 PRINT
>91e6	ac 8f					.word	Command_Read                     ; $b8 READ
>91e8	78 ae					.word	SyntaxError                      ; $b9 RECT
>91ea	05 90					.word	RemCommand                       ; $ba REM
>91ec	23 8d					.word	Command_RETURN                   ; $bb RETURN
>91ee	78 ae					.word	SyntaxError                      ; $bc SCALE
>91f0	78 ae					.word	SyntaxError                      ; $bd SHOW
>91f2	78 ae					.word	SyntaxError                      ; $be SOLID
>91f4	78 ae					.word	SyntaxError                      ; $bf SPRITE
>91f6	78 ae					.word	SyntaxError                      ; $c0 TEXT
>91f8	f3 90					.word	Unused2                          ; $c1 TO
.91fa					VectorSet1:
>91fa	78 ae					.word	SyntaxError                      ; $80 !0:EOF
>91fc	78 ae					.word	SyntaxError                      ; $81 !1:SH1
>91fe	78 ae					.word	SyntaxError                      ; $82 !2:SH2
>9200	77 8a					.word	AssembleCommand                  ; $83 ASSEMBLE
>9202	96 8a					.word	AssertCommand                    ; $84 ASSERT
>9204	78 ae					.word	SyntaxError                      ; $85 BITMAP
>9206	e0 8a					.word	ClearCommand                     ; $86 CLEAR
>9208	fd 8b					.word	EndCommand                       ; $87 END
>920a	cc 8d					.word	Command_List                     ; $88 LIST
>920c	eb 8e					.word	NewCommand                       ; $89 NEW
>920e	34 90					.word	Command_Restore                  ; $8a RESTORE
>9210	66 90					.word	CommandRUN                       ; $8b RUN
>9212	78 ae					.word	SyntaxError                      ; $8c SPRITES
>9214	9e 92					.word	StopCommand                      ; $8d STOP
.9216					VectorSet2:
>9216	78 ae					.word	SyntaxError                      ; $80 !0:EOF
>9218	78 ae					.word	SyntaxError                      ; $81 !1:SH1
>921a	78 ae					.word	SyntaxError                      ; $82 !2:SH2
>921c	37 ad					.word	Assemble_adc                     ; $83 ADC
>921e	2f ad					.word	Assemble_and                     ; $84 AND
>9220	4b ad					.word	Assemble_asl                     ; $85 ASL
>9222	b5 ad					.word	Assemble_bcc                     ; $86 BCC
>9224	b9 ad					.word	Assemble_bcs                     ; $87 BCS
>9226	c1 ad					.word	Assemble_beq                     ; $88 BEQ
>9228	78 ad					.word	Assemble_bit                     ; $89 BIT
>922a	a9 ad					.word	Assemble_bmi                     ; $8a BMI
>922c	bd ad					.word	Assemble_bne                     ; $8b BNE
>922e	a5 ad					.word	Assemble_bpl                     ; $8c BPL
>9230	c5 ad					.word	Assemble_bra                     ; $8d BRA
>9232	c9 ad					.word	Assemble_brk                     ; $8e BRK
>9234	ad ad					.word	Assemble_bvc                     ; $8f BVC
>9236	b1 ad					.word	Assemble_bvs                     ; $90 BVS
>9238	d1 ad					.word	Assemble_clc                     ; $91 CLC
>923a	25 ae					.word	Assemble_cld                     ; $92 CLD
>923c	e5 ad					.word	Assemble_cli                     ; $93 CLI
>923e	15 ae					.word	Assemble_clv                     ; $94 CLV
>9240	43 ad					.word	Assemble_cmp                     ; $95 CMP
>9242	8c ad					.word	Assemble_cpx                     ; $96 CPX
>9244	87 ad					.word	Assemble_cpy                     ; $97 CPY
>9246	69 ad					.word	Assemble_dec                     ; $98 DEC
>9248	21 ae					.word	Assemble_dex                     ; $99 DEX
>924a	fd ad					.word	Assemble_dey                     ; $9a DEY
>924c	33 ad					.word	Assemble_eor                     ; $9b EOR
>924e	6e ad					.word	Assemble_inc                     ; $9c INC
>9250	31 ae					.word	Assemble_inx                     ; $9d INX
>9252	1d ae					.word	Assemble_iny                     ; $9e INY
>9254	a0 ad					.word	Assemble_jmp                     ; $9f JMP
>9256	9b ad					.word	Assemble_jsr                     ; $a0 JSR
>9258	3f ad					.word	Assemble_lda                     ; $a1 LDA
>925a	64 ad					.word	Assemble_ldx                     ; $a2 LDX
>925c	82 ad					.word	Assemble_ldy                     ; $a3 LDY
>925e	55 ad					.word	Assemble_lsr                     ; $a4 LSR
>9260	35 ae					.word	Assemble_nop                     ; $a5 NOP
>9262	2b ad					.word	Assemble_ora                     ; $a6 ORA
>9264	e1 ad					.word	Assemble_pha                     ; $a7 PHA
>9266	cd ad					.word	Assemble_php                     ; $a8 PHP
>9268	29 ae					.word	Assemble_phx                     ; $a9 PHX
>926a	e9 ad					.word	Assemble_phy                     ; $aa PHY
>926c	f1 ad					.word	Assemble_pla                     ; $ab PLA
>926e	d5 ad					.word	Assemble_plp                     ; $ac PLP
>9270	3d ae					.word	Assemble_plx                     ; $ad PLX
>9272	f9 ad					.word	Assemble_ply                     ; $ae PLY
>9274	50 ad					.word	Assemble_rol                     ; $af ROL
>9276	5a ad					.word	Assemble_ror                     ; $b0 ROR
>9278	dd ad					.word	Assemble_rti                     ; $b1 RTI
>927a	ed ad					.word	Assemble_rts                     ; $b2 RTS
>927c	47 ad					.word	Assemble_sbc                     ; $b3 SBC
>927e	d9 ad					.word	Assemble_sec                     ; $b4 SEC
>9280	39 ae					.word	Assemble_sed                     ; $b5 SED
>9282	f5 ad					.word	Assemble_sei                     ; $b6 SEI
>9284	3b ad					.word	Assemble_sta                     ; $b7 STA
>9286	2d ae					.word	Assemble_stp                     ; $b8 STP
>9288	5f ad					.word	Assemble_stx                     ; $b9 STX
>928a	7d ad					.word	Assemble_sty                     ; $ba STY
>928c	73 ad					.word	Assemble_stz                     ; $bb STZ
>928e	11 ae					.word	Assemble_tax                     ; $bc TAX
>9290	0d ae					.word	Assemble_tay                     ; $bd TAY
>9292	96 ad					.word	Assemble_trb                     ; $be TRB
>9294	91 ad					.word	Assemble_tsb                     ; $bf TSB
>9296	19 ae					.word	Assemble_tsx                     ; $c0 TSX
>9298	01 ae					.word	Assemble_txa                     ; $c1 TXA
>929a	09 ae					.word	Assemble_txs                     ; $c2 TXS
>929c	05 ae					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.929e					StopCommand:
.929e	a9 08		lda #$08		lda	#8
.92a0	4c d5 94	jmp $94d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.92a3					ListConvertLine:
.92a3	9c 9d 04	stz $049d			stz 	tbOffset
.92a6	9c a9 04	stz $04a9			stz 	tokenBuffer
.92a9	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.92ab	b1 30		lda ($30),y			lda 	(codePtr),y
.92ad	aa		tax				tax
.92ae	88		dey				dey
.92af	b1 30		lda ($30),y			lda 	(codePtr),y
.92b1	20 ee a9	jsr $a9ee			jsr 	ConvertInt16
.92b4	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.92b6	86 37		stx $37				stx 	zTemp0+1
.92b8	a0 00		ldy #$00			ldy 	#0
.92ba					_LCCopyNumber:
.92ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.92bc	20 bc 93	jsr $93bc			jsr 	LCLWrite
.92bf	c8		iny				iny
.92c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.92c2	d0 f6		bne $92ba			bne 	_LCCopyNumber
.92c4					_LCPadOut:
.92c4	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.92c6	20 bc 93	jsr $93bc			jsr 	LCLWrite
.92c9	ad 9d 04	lda $049d			lda 	tbOffset
.92cc	c9 06		cmp #$06			cmp 	#6
.92ce	d0 f4		bne $92c4			bne 	_LCPadOut
.92d0	a0 03		ldy #$03			ldy 	#3 							; start position.
.92d2					_LCMainLoop:
.92d2	b1 30		lda ($30),y			lda 	(codePtr),y
.92d4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.92d6	f0 17		beq $92ef			beq 	_LCExit
.92d8	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.92da	90 14		bcc $92f0			bcc 	_LCDoubles
.92dc	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.92de	90 20		bcc $9300			bcc 	_LCShiftPunc
.92e0	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.92e2	90 2b		bcc $930f			bcc 	_LCPunctuation
.92e4	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.92e6	90 2d		bcc $9315			bcc 	_LCIdentifiers
.92e8	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.92ea	90 49		bcc $9335			bcc 	_LCTokens
.92ec	4c 90 93	jmp $9390			jmp 	_LCData 					; 254-5 are data objects
.92ef					_LCExit:
.92ef	60		rts				rts
.92f0					_LCDoubles:
.92f0	48		pha				pha
.92f1	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.92f2	29 02		and #$02			and 	#2
.92f4	09 3c		ora #$3c			ora 	#60 						; make < >
.92f6	20 bc 93	jsr $93bc			jsr 	LCLWrite
.92f9	68		pla				pla 								; restore, do lower bit
.92fa	29 03		and #$03			and 	#3
.92fc	09 3c		ora #$3c			ora 	#60
.92fe	80 0f		bra $930f			bra		_LCPunctuation 				; print, increment, loop
.9300					_LCShiftPunc:
.9300	aa		tax				tax 								; save in X
.9301	29 07		and #$07			and 	#7 							; lower 3 bits
.9303	f0 02		beq $9307			beq 	_LCNoAdd
.9305	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9307					_LCNoAdd:
.9307	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9309	90 02		bcc $930d			bcc 	_LCNoAdd2
.930b	09 20		ora #$20			ora 	#32 						; adds $20
.930d					_LCNoAdd2:
.930d	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.930f					_LCPunctuation:
.930f	c8		iny				iny 								; consume character
.9310	20 bc 93	jsr $93bc			jsr 	LCLWrite 					; write it out.
.9313	80 bd		bra $92d2			bra 	_LCMainLoop 				; go round again.
.9315					_LCIdentifiers:
.9315	18		clc				clc 								; convert to physical address
.9316	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9318	85 37		sta $37				sta 	zTemp0+1
.931a	c8		iny				iny
.931b	b1 30		lda ($30),y			lda 	(codePtr),y
.931d	85 36		sta $36				sta 	zTemp0
.931f	c8		iny				iny
.9320	5a		phy				phy 								; save position
.9321	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9323					_LCOutIdentifier:
.9323	c8		iny				iny
.9324	b1 36		lda ($36),y			lda 	(zTemp0),y
.9326	29 7f		and #$7f			and 	#$7F
.9328	20 ea 93	jsr $93ea			jsr 	LCLLowerCase
.932b	20 bc 93	jsr $93bc			jsr 	LCLWrite
.932e	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9330	10 f1		bpl $9323			bpl 	_LCOutIdentifier
.9332	7a		ply				ply 								; restore position
.9333	80 9d		bra $92d2			bra 	_LCMainLoop
.9335					_LCTokens:
.9335	aa		tax				tax 								; token in X
.9336	a9 3e		lda #$3e			lda 	#((KeywordSet2) & $FF)
.9338	85 36		sta $36				sta 	0+zTemp0
.933a	a9 a4		lda #$a4			lda 	#((KeywordSet2) >> 8)
.933c	85 37		sta $37				sta 	1+zTemp0
.933e	e0 82		cpx #$82			cpx 	#$82
.9340	f0 16		beq $9358			beq 	_LCUseShift
.9342	a9 e9		lda #$e9			lda 	#((KeywordSet1) & $FF)
.9344	85 36		sta $36				sta 	0+zTemp0
.9346	a9 a3		lda #$a3			lda 	#((KeywordSet1) >> 8)
.9348	85 37		sta $37				sta 	1+zTemp0
.934a	e0 81		cpx #$81			cpx 	#$81
.934c	f0 0a		beq $9358			beq 	_LCUseShift
.934e	a9 44		lda #$44			lda 	#((KeywordSet0) & $FF)
.9350	85 36		sta $36				sta 	0+zTemp0
.9352	a9 a2		lda #$a2			lda 	#((KeywordSet0) >> 8)
.9354	85 37		sta $37				sta 	1+zTemp0
.9356	80 01		bra $9359			bra 	_LCNoShift
.9358					_LCUseShift:
.9358	c8		iny				iny
.9359					_LCNoShift:
.9359	20 cb 93	jsr $93cb			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.935c	b1 30		lda ($30),y			lda 	(codePtr),y
.935e	aa		tax				tax 								; into X
.935f					_LCFindText:
.935f	ca		dex				dex
.9360	10 0e		bpl $9370			bpl 	_LCFoundText 				; found text.
.9362	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9364	1a		inc a				inc 	a 							; one extra for size
.9365	38		sec				sec 								; one extra for checksum
.9366	65 36		adc $36				adc 	zTemp0 						; go to next token
.9368	85 36		sta $36				sta 	zTemp0
.936a	90 f3		bcc $935f			bcc 	_LCFindText
.936c	e6 37		inc $37				inc 	zTemp0+1
.936e	80 ef		bra $935f			bra 	_LCFindText
.9370					_LCFoundText:
.9370	5a		phy				phy 								; save List position
.9371	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9373	aa		tax				tax
.9374	a0 02		ldy #$02			ldy 	#2
.9376					_LCCopyToken:
.9376	b1 36		lda ($36),y			lda 	(zTemp0),y
.9378	20 ea 93	jsr $93ea			jsr 	LCLLowerCase
.937b	20 bc 93	jsr $93bc			jsr 	LCLWrite
.937e	c8		iny				iny
.937f	ca		dex				dex
.9380	d0 f4		bne $9376			bne 	_LCCopyToken
.9382	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9384	f0 05		beq $938b			beq 	_LCNoSpace
.9386	a9 20		lda #$20			lda 	#' '
.9388	20 bc 93	jsr $93bc			jsr 	LCLWrite
.938b					_LCNoSpace:
.938b	7a		ply				ply 								; restore position.
.938c	c8		iny				iny 								; consume token
.938d	4c d2 92	jmp $92d2			jmp 	_LCMainLoop 				; and go around again.
.9390					_LCData:
.9390	48		pha				pha 								; save type $FE/$FF
.9391	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9393	c9 fe		cmp #$fe			cmp 	#$FE
.9395	f0 02		beq $9399			beq 	_LCHaveOpener
.9397	a2 22		ldx #$22			ldx 	#'"'
.9399					_LCHaveOpener:
.9399	8a		txa				txa 								; output prefix (# or ")
.939a	20 bc 93	jsr $93bc			jsr 	LCLWrite
.939d	c8		iny				iny 								; get count
.939e	b1 30		lda ($30),y			lda 	(codePtr),y
.93a0	aa		tax				tax
.93a1	c8		iny				iny 								; point at first character
.93a2					_LCOutData:
.93a2	b1 30		lda ($30),y			lda 	(codePtr),y
.93a4	c9 00		cmp #$00			cmp 	#0
.93a6	f0 03		beq $93ab			beq 	_LCNoPrint
.93a8	20 bc 93	jsr $93bc			jsr 	LCLWrite
.93ab					_LCNoPrint:
.93ab	c8		iny				iny
.93ac	ca		dex				dex
.93ad	d0 f3		bne $93a2			bne 	_LCOutData
.93af	68		pla				pla 								; closing " required ?
.93b0	c9 ff		cmp #$ff			cmp 	#$FF
.93b2	d0 05		bne $93b9			bne 	_LCNoQuote
.93b4	a9 22		lda #$22			lda 	#'"'
.93b6	20 bc 93	jsr $93bc			jsr 	LCLWrite
.93b9					_LCNoQuote:
.93b9	4c d2 92	jmp $92d2			jmp 	_LCMainLoop
.93bc					LCLWrite:
.93bc	da		phx				phx
.93bd	ae 9d 04	ldx $049d			ldx 	tbOffset
.93c0	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.93c3	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.93c6	ee 9d 04	inc $049d			inc 	tbOffset
.93c9	fa		plx				plx
.93ca	60		rts				rts
.93cb					LCCheckSpaceRequired:
.93cb	ae 9d 04	ldx $049d			ldx 	tbOffset
.93ce	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.93d1	20 ea 93	jsr $93ea			jsr 	LCLLowerCase 				; saves a little effort
.93d4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.93d6	90 11		bcc $93e9			bcc 	_LCCSRExit
.93d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.93da	90 08		bcc $93e4			bcc 	_LCCSRSpace
.93dc	c9 61		cmp #$61			cmp 	#"a"
.93de	90 09		bcc $93e9			bcc 	_LCCSRExit
.93e0	c9 7b		cmp #$7b			cmp 	#"z"+1
.93e2	b0 05		bcs $93e9			bcs 	_LCCSRExit
.93e4					_LCCSRSpace:
.93e4	a9 20		lda #$20			lda 	#' '
.93e6	20 bc 93	jsr $93bc			jsr 	LCLWrite
.93e9					_LCCSRExit:
.93e9	60		rts				rts
.93ea					LCLLowerCase:
.93ea	c9 41		cmp #$41			cmp 	#"A"
.93ec	90 06		bcc $93f4			bcc 	_LCLLCOut
.93ee	c9 5b		cmp #$5b			cmp 	#"Z"+1
.93f0	b0 02		bcs $93f4			bcs 	_LCLLCOut
.93f2	69 20		adc #$20			adc 	#$20
.93f4					_LCLLCOut:
.93f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.93f5					ProcedureScan:
.93f5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93f7	85 30		sta $30				sta 	codePtr
.93f9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93fb	85 31		sta $31				sta 	codePtr+1
.93fd					_PSLoop:
.93fd	b2 30		lda ($30)			lda 	(codePtr)
.93ff	f0 42		beq $9443			beq 	_PSExit
.9401	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9403	b1 30		lda ($30),y			lda 	(codePtr),y
.9405	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.9407	d0 2d		bne $9436			bne 	_PSNext
.9409	c8		iny				iny 								; get the address of the record to zTemp0 and
.940a	b1 30		lda ($30),y			lda 	(codePtr),y
.940c	29 c0		and #$c0			and 	#$C0
.940e	c9 40		cmp #$40			cmp 	#$40
.9410	d0 32		bne $9444			bne 	_PSSyntax
.9412	b1 30		lda ($30),y			lda 	(codePtr),y
.9414	18		clc				clc
.9415	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9417	85 37		sta $37				sta 	zTemp0+1
.9419	c8		iny				iny 								; LSB
.941a	b1 30		lda ($30),y			lda 	(codePtr),y
.941c	85 36		sta $36				sta 	zTemp0
.941e	c8		iny				iny 								; character after variable call.
.941f	98		tya				tya 								; save Y offset at +7
.9420	a0 07		ldy #$07			ldy 	#7
.9422	91 36		sta ($36),y			sta 	(zTemp0),y
.9424	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9426	a0 02		ldy #$02			ldy 	#2
.9428	91 36		sta ($36),y			sta 	(zTemp0),y
.942a	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.942c					_PSCopy:
.942c	b5 30		lda $30,x			lda 	safePtr,x
.942e	c8		iny				iny
.942f	91 36		sta ($36),y			sta 	(zTemp0),y
.9431	e8		inx				inx
.9432	e0 04		cpx #$04			cpx 	#4
.9434	d0 f6		bne $942c			bne 	_PSCopy
.9436					_PSNext:
.9436	18		clc				clc
.9437	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9439	65 30		adc $30				adc 	codePtr
.943b	85 30		sta $30				sta 	codePtr
.943d	90 02		bcc $9441			bcc 	_CREExit
.943f	e6 31		inc $31				inc 	codePtr+1
.9441					_CREExit:
.9441	80 ba		bra $93fd			bra 	_PSLoop
.9443					_PSExit:
.9443	60		rts				rts
.9444					_PSSyntax:
.9444	4c 78 ae	jmp $ae78			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9447					ScanForward:
.9447	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9449	86 37		stx $37				stx 	zTemp0+1
.944b	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.944d					_ScanLoop:
.944d	b1 30		lda ($30),y			lda 	(codePtr),y
.944f	c8		iny				iny
.9450	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9452	d0 0e		bne $9462			bne 	_ScanGoNext
.9454	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9456	f0 04		beq $945c			beq 	_ScanMatch
.9458	c5 37		cmp $37				cmp 	zTemp0+1
.945a	d0 06		bne $9462			bne 	_ScanGoNext
.945c					_ScanMatch:
.945c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.945e	d0 01		bne $9461			bne 	_ScanNotEndEOL
.9460	88		dey				dey
.9461					_ScanNotEndEOL:
.9461	60		rts				rts
.9462					_ScanGoNext:
.9462	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9464	90 e7		bcc $944d			bcc 	_ScanLoop
.9466	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9468	90 18		bcc $9482			bcc 	_ScanSkipOne
.946a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.946c	b0 2f		bcs $949d			bcs 	_ScanSkipData
.946e	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9470	90 db		bcc $944d			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9472	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.9474	b0 d7		bcs $944d			bcs 	_ScanLoop
.9476	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9478	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.947a	b0 d1		bcs $944d			bcs 	_ScanLoop
.947c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.947e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9480	80 cb		bra $944d			bra 	_ScanLoop
.9482					_ScanSkipOne:
.9482	c8		iny				iny 								; consume the extra one.
.9483	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9485	d0 c6		bne $944d			bne 	_ScanLoop
.9487	18		clc				clc
.9488	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.948a	65 30		adc $30				adc 	codePtr
.948c	85 30		sta $30				sta 	codePtr
.948e	90 02		bcc $9492			bcc 	_CREExit
.9490	e6 31		inc $31				inc 	codePtr+1
.9492					_CREExit:
.9492	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9494	b2 30		lda ($30)			lda 	(codePtr)
.9496	d0 b5		bne $944d			bne 	_ScanLoop 					; if not zero, more to scan
.9498	a9 13		lda #$13		lda	#19
.949a	4c d5 94	jmp $94d5		jmp	ErrorHandler
.949d					_ScanSkipData:
.949d	88		dey				dey 								; point at data token
.949e	c8		iny				iny
.949f	98		tya				tya
.94a0	38		sec				sec
.94a1	71 30		adc ($30),y			adc 	(codePtr),y
.94a3	a8		tay				tay
.94a4	80 a7		bra $944d			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.94a6					Command_WHILE:
.94a6	5a		phy				phy 								; save position of the test
.94a7	a2 00		ldx #$00			ldx 	#0
.94a9	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber 				; work out the number
.94ac	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; check if zero
.94af	f0 0e		beq $94bf			beq 	_WHExitLoop 				; if so exit the loop
.94b1	98		tya				tya 								; position *after* test.
.94b2	7a		ply				ply 								; restore position before test, at WHILE
.94b3	88		dey				dey
.94b4	48		pha				pha 								; push after test on the stack
.94b5	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.94b7	20 41 a1	jsr $a141			jsr 	StackOpen
.94ba	20 85 a1	jsr $a185			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.94bd	7a		ply				ply 								; restore the position *after* the test
.94be	60		rts				rts
.94bf					_WHExitLoop:
.94bf	68		pla				pla 								; throw post loop position
.94c0	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.94c2	aa		tax				tax
.94c3	20 47 94	jsr $9447			jsr 	ScanForward
.94c6	60		rts				rts
.94c7					Command_WEND:
.94c7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.94c9	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.94cb	20 6d a1	jsr $a16d			jsr 	StackCheckFrame
.94ce	20 96 a1	jsr $a196			jsr 	STKLoadCodePosition 		; loop back
.94d1	20 5f a1	jsr $a15f			jsr 	StackClose		 			; erase the frame
.94d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a892					CheckRightBracket:
.a892	b1 30		lda ($30),y			lda 	(codePtr),y
.a894	c8		iny				iny
.a895	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a897	d0 0f		bne $a8a8			bne 	CNAFail
.a899	60		rts				rts
.a89a					CheckComma:
.a89a	b1 30		lda ($30),y			lda 	(codePtr),y
.a89c	c8		iny				iny
.a89d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a89f	d0 07		bne $a8a8			bne 	CNAFail
.a8a1	60		rts				rts
.a8a2					CheckNextA:
.a8a2	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a8a4	d0 02		bne $a8a8			bne 	CNAFail
.a8a6	c8		iny				iny 								; skip character
.a8a7	60		rts				rts 								; and exit
.a8a8					CNAFail:
.a8a8	4c 78 ae	jmp $ae78			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.94d5					ErrorHandler:
.94d5	a8		tay				tay 								; find the error text
.94d6	f0 49		beq $9521			beq 	_EHEnd
.94d8	a2 00		ldx #$00			ldx 	#0
.94da	a9 91		lda #$91			lda 	#((ErrorText) & $FF)
.94dc	85 36		sta $36				sta 	0+zTemp0
.94de	a9 ae		lda #$ae			lda 	#((ErrorText) >> 8)
.94e0	85 37		sta $37				sta 	1+zTemp0
.94e2					_EHFind:
.94e2	88		dey				dey 								; found the error text ?
.94e3	f0 0e		beq $94f3			beq 	_EHFound
.94e5					_EHFindZero:
.94e5	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.94e7	e6 36		inc $36				inc 	zTemp0
.94e9	d0 02		bne $94ed			bne 	_EHFNoCarry
.94eb	e6 37		inc $37				inc 	zTemp0+1
.94ed					_EHFNoCarry:
.94ed	c9 00		cmp #$00			cmp 	#0
.94ef	d0 f4		bne $94e5			bne 	_EHFindZero
.94f1	80 ef		bra $94e2			bra 	_EHFind
.94f3					_EHFound:
.94f3	a5 36		lda $36				lda 	zTemp0 						; print message
.94f5	a6 37		ldx $37				ldx 	zTemp0+1
.94f7	20 2e 95	jsr $952e			jsr 	PrintStringXA
.94fa	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.94fc	b1 30		lda ($30),y			lda 	(codePtr),y
.94fe	d0 05		bne $9505			bne 	_EHAtMsg
.9500	c8		iny				iny
.9501	b1 30		lda ($30),y			lda 	(codePtr),y
.9503	f0 17		beq $951c			beq 	_EHCREnd
.9505					_EHAtMsg:
.9505	a2 95		ldx #$95			ldx 	#_AtMsg >> 8 				; print " at "
.9507	a9 24		lda #$24			lda 	#_AtMsg & $FF
.9509	20 2e 95	jsr $952e			jsr 	PrintStringXA
.950c	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.950e	b1 30		lda ($30),y			lda 	(codePtr),y
.9510	48		pha				pha
.9511	c8		iny				iny
.9512	b1 30		lda ($30),y			lda 	(codePtr),y
.9514	aa		tax				tax
.9515	68		pla				pla
.9516	20 ee a9	jsr $a9ee			jsr 	ConvertInt16 				; convert XA to string
.9519	20 2e 95	jsr $952e			jsr 	PrintStringXA 				; and print it.
.951c					_EHCREnd:
.951c	a9 0d		lda #$0d			lda 	#13 						; new line
.951e	20 1d b0	jsr $b01d			jsr 	EXTPrintCharacter
.9521					_EHEnd:
.9521	4c 47 8a	jmp $8a47			jmp 	WarmStart
>9524	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>952c	20 00
.952e					PrintStringXA:
.952e	5a		phy				phy
.952f	86 37		stx $37				stx 	zTemp0+1
.9531	85 36		sta $36				sta 	zTemp0
.9533	a0 00		ldy #$00			ldy 	#0
.9535					_PSXALoop:
.9535	b1 36		lda ($36),y			lda 	(zTemp0),y
.9537	f0 06		beq $953f			beq 	_PSXAExit
.9539	20 1d b0	jsr $b01d			jsr 	EXTPrintCharacter
.953c	c8		iny				iny
.953d	80 f6		bra $9535			bra 	_PSXALoop
.953f					_PSXAExit:
.953f	7a		ply				ply
.9540	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9541					UnaryTrue:
.9541	fa		plx				plx
.9542					ReturnTrue:
.9542	a9 01		lda #$01			lda 	#1  						; set to 1
.9544	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.9547	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9549	9d 00 04	sta $0400,x			sta 	NSStatus,x
.954c	60		rts				rts
.954d					UnaryFalse:
.954d	fa		plx				plx
.954e					ReturnFalse:
.954e	4c 8d a0	jmp $a08d			jmp 	NSMSetZero 					; set it all to zero
.9551					BinaryCompareEqual:
.9551	fa		plx				plx
.9552	20 8d 95	jsr $958d			jsr 	CompareBaseCode
.9555	c9 00		cmp #$00			cmp 	#0
.9557	f0 e9		beq $9542			beq 	ReturnTrue
.9559	80 f3		bra $954e			bra 	ReturnFalse
.955b					BinaryCompareLess:
.955b	fa		plx				plx
.955c	20 8d 95	jsr $958d			jsr 	CompareBaseCode
.955f	c9 ff		cmp #$ff			cmp 	#$FF
.9561	f0 df		beq $9542			beq 	ReturnTrue
.9563	80 e9		bra $954e			bra 	ReturnFalse
.9565					BinaryCompareGreater:
.9565	fa		plx				plx
.9566	20 8d 95	jsr $958d			jsr 	CompareBaseCode
.9569	c9 01		cmp #$01			cmp 	#1
.956b	f0 d5		beq $9542			beq 	ReturnTrue
.956d	80 df		bra $954e			bra 	ReturnFalse
.956f					BinaryCompareNotEqual:
.956f	fa		plx				plx
.9570	20 8d 95	jsr $958d			jsr 	CompareBaseCode
.9573	c9 00		cmp #$00			cmp 	#0
.9575	d0 cb		bne $9542			bne 	ReturnTrue
.9577	80 d5		bra $954e			bra 	ReturnFalse
.9579					BinaryCompareLessEqual:
.9579	fa		plx				plx
.957a	20 8d 95	jsr $958d			jsr 	CompareBaseCode
.957d	c9 01		cmp #$01			cmp 	#1
.957f	d0 c1		bne $9542			bne 	ReturnTrue
.9581	80 cb		bra $954e			bra 	ReturnFalse
.9583					BinaryCompareGreaterEqual:
.9583	fa		plx				plx
.9584	20 8d 95	jsr $958d			jsr 	CompareBaseCode
.9587	c9 ff		cmp #$ff			cmp 	#$FF
.9589	d0 b7		bne $9542			bne 	ReturnTrue
.958b	80 c1		bra $954e			bra 	ReturnFalse
.958d					CompareBaseCode:
.958d	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; make both values if references.
.9590	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9593	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9596	29 10		and #$10			and 	#NSTString
.9598	d0 40		bne $95da			bne 	_CBCString
.959a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.959d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95a0	d0 3b		bne $95dd			bne 	_CBCFloat
.95a2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.95a5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95a8	29 08		and #$08			and 	#NSTFloat
.95aa	d0 31		bne $95dd			bne 	_CBCFloat
.95ac	20 e0 95	jsr $95e0			jsr 	CompareFixMinusZero
.95af	e8		inx				inx
.95b0	20 e0 95	jsr $95e0			jsr 	CompareFixMinusZero
.95b3	ca		dex				dex
.95b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.95b7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.95ba	10 0b		bpl $95c7			bpl 	_CDCSameSign
.95bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.95bf	30 16		bmi $95d7			bmi 	_CBCLess 					; return $FF
.95c1					_CBCGreater:
.95c1	a9 01		lda #$01			lda 	#1
.95c3	60		rts				rts
.95c4					_CBCEqual:
.95c4	a9 00		lda #$00			lda 	#0
.95c6	60		rts				rts
.95c7					_CDCSameSign:
.95c7	20 f0 96	jsr $96f0			jsr 	SubTopTwoStack 				; unsigned subtract
.95ca	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; or the mantissa together
.95cd	f0 f5		beq $95c4			beq 	_CBCEqual 					; -0 == 0
.95cf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.95d2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.95d5	10 ea		bpl $95c1			bpl 	_CBCGreater
.95d7					_CBCLess:
.95d7	a9 ff		lda #$ff			lda 	#$FF
.95d9	60		rts				rts
.95da					_CBCString:
.95da	4c 46 96	jmp $9646			jmp 	CompareStrings
.95dd					_CBCFloat:
.95dd	4c ea aa	jmp $aaea			jmp 	CompareFloat
.95e0					CompareFixMinusZero:
.95e0	20 bd a0	jsr $a0bd			jsr 	NSMIsZero
.95e3	d0 03		bne $95e8			bne 	_CFXMZNotZero
.95e5	9e 00 04	stz $0400,x			stz 	NSStatus,x
.95e8					_CFXMZNotZero:
.95e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.95e9					StringConcat:
.95e9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.95ec	3d 01 04	and $0401,x			and 	NSStatus+1,x
.95ef	29 18		and #$18			and 	#NSBTypeMask
.95f1	c9 10		cmp #$10			cmp 	#NSTString
.95f3	d0 4e		bne $9643			bne		_SCType
.95f5	64 38		stz $38				stz 	zTemp1 						; counting total length
.95f7	e8		inx				inx
.95f8	20 16 96	jsr $9616			jsr 	_SCSetupZ0 					; setup for second
.95fb	20 21 96	jsr $9621			jsr 	_SCLengthZ0 				; length for second
.95fe	ca		dex				dex
.95ff	20 16 96	jsr $9616			jsr 	_SCSetupZ0 					; setup for first
.9602	20 21 96	jsr $9621			jsr 	_SCLengthZ0 				; length for first
.9605	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9607	20 9f b1	jsr $b19f			jsr 	StringTempAllocate
.960a	20 34 96	jsr $9634			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.960d	e8		inx				inx
.960e	20 16 96	jsr $9616			jsr 	_SCSetupZ0 					; copy second out
.9611	20 34 96	jsr $9634			jsr 	_SCCopy
.9614	ca		dex				dex
.9615	60		rts				rts
.9616					_SCSetupZ0:
.9616	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9619	85 36		sta $36				sta 	zTemp0
.961b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.961e	85 37		sta $37				sta 	zTemp0+1
.9620	60		rts				rts
.9621					_SCLengthZ0:
.9621	5a		phy				phy
.9622	a0 00		ldy #$00			ldy 	#0
.9624					_SCLenLoop:
.9624	b1 36		lda ($36),y			lda 	(zTemp0),y
.9626	f0 0a		beq $9632			beq 	_SCLExit
.9628	c8		iny				iny
.9629	e6 38		inc $38				inc 	zTemp1
.962b	10 f7		bpl $9624			bpl		_SCLenLoop
.962d	a9 09		lda #$09		lda	#9
.962f	4c d5 94	jmp $94d5		jmp	ErrorHandler
.9632					_SCLExit:
.9632	7a		ply				ply
.9633	60		rts				rts
.9634					_SCCopy:
.9634	5a		phy				phy
.9635	a0 00		ldy #$00			ldy 	#0
.9637					_SCCopyLoop:
.9637	b1 36		lda ($36),y			lda 	(zTemp0),y
.9639	f0 06		beq $9641			beq 	_SCCExit
.963b	20 dd b1	jsr $b1dd			jsr 	StringTempWrite
.963e	c8		iny				iny
.963f	80 f6		bra $9637			bra 	_SCCopyLoop
.9641					_SCCExit:
.9641	7a		ply				ply
.9642	60		rts				rts
.9643					_SCType:
.9643	4c 82 ae	jmp $ae82			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a8ab					IntegerDivide:
.a8ab	fa		plx				plx
.a8ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a8af	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a8b2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a8b3	0a		asl a				asl 	a
.a8b4	10 05		bpl $a8bb			bpl 	_NotRef
.a8b6	48		pha				pha
.a8b7	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a8ba	68		pla				pla
.a8bb					_NotRef:
.a8bb	0a		asl a				asl 	a
.a8bc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a8be	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a8c1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a8c4	f0 03		beq $a8c9			beq 	_IntegerCode 				; if clear, then we have two integers
.a8c6	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.a8c9					_IntegerCode:
.a8c9	20 eb a8	jsr $a8eb			jsr 	CheckDivideZero 			; do div zero check
.a8cc	20 23 a9	jsr $a923			jsr 	Int32Divide 				; do the division
.a8cf	20 e0 a9	jsr $a9e0			jsr 	CalculateSign 				; calculate result sign
.a8d2					NSMCopyPlusTwoToZero:
.a8d2	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a8d5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a8d8	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a8db	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a8de	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a8e1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a8e4	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a8e7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a8ea	60		rts				rts
.a8eb					CheckDivideZero:
.a8eb	e8		inx				inx
.a8ec	20 bd a0	jsr $a0bd			jsr 	NSMIsZero
.a8ef	f0 02		beq $a8f3			beq 	_CDVError
.a8f1	ca		dex				dex
.a8f2	60		rts				rts
.a8f3					_CDVError:
.a8f3	a9 03		lda #$03		lda	#3
.a8f5	4c d5 94	jmp $94d5		jmp	ErrorHandler
.a8f8					IntegerModulus:
.a8f8	fa		plx				plx
.a8f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a8fc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a8ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a900	0a		asl a				asl 	a
.a901	10 05		bpl $a908			bpl 	_NotRef
.a903	48		pha				pha
.a904	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a907	68		pla				pla
.a908					_NotRef:
.a908	0a		asl a				asl 	a
.a909	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a90b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a90e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a911	f0 03		beq $a916			beq 	_IntegerCode 				; if clear, then we have two integers
.a913	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.a916					_IntegerCode:
.a916					IntegerModulusNoCheck:
.a916	20 eb a8	jsr $a8eb			jsr 	CheckDivideZero 			; do div zero check
.a919	20 23 a9	jsr $a923			jsr 	Int32Divide 				; do the division
.a91c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a91f	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a922	60		rts				rts
.a923					Int32Divide:
.a923	48		pha				pha 								; save AXY
.a924	5a		phy				phy
.a925	20 64 a0	jsr $a064			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a928	20 89 a0	jsr $a089			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a92b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a92d					_I32DivideLoop:
.a92d	e8		inx				inx
.a92e	e8		inx				inx
.a92f	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a932	ca		dex				dex
.a933	ca		dex				dex
.a934	20 a3 a0	jsr $a0a3			jsr 	NSMRotateLeft
.a937	20 63 a9	jsr $a963			jsr 	DivideCheckSubtract 		; check if subtract possible
.a93a	90 03		bcc $a93f			bcc 	_I32DivideNoCarryIn
.a93c	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a93f					_I32DivideNoCarryIn:
.a93f	88		dey				dey 								; loop round till division completed.
.a940	d0 eb		bne $a92d			bne 	_I32DivideLoop
.a942	7a		ply				ply 								; restore AXY and exit
.a943	68		pla				pla
.a944	60		rts				rts
.a945					Int32ShiftDivide:
.a945	48		pha				pha 								; save AY
.a946	5a		phy				phy
.a947	e8		inx				inx 								; clear S[X+2]
.a948	e8		inx				inx
.a949	20 8d a0	jsr $a08d			jsr 	NSMSetZero
.a94c	ca		dex				dex
.a94d	ca		dex				dex
.a94e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a950					_I32SDLoop:
.a950	20 63 a9	jsr $a963			jsr 	DivideCheckSubtract 		; check if subtract possible
.a953	e8		inx				inx
.a954	e8		inx				inx
.a955	20 a3 a0	jsr $a0a3			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a958	ca		dex				dex
.a959	ca		dex				dex
.a95a	20 a3 a0	jsr $a0a3			jsr 	NSMRotateLeft
.a95d	88		dey				dey 	 							; do 31 times
.a95e	d0 f0		bne $a950			bne 	_I32SDLoop
.a960	7a		ply				ply 								; restore AY and exit
.a961	68		pla				pla
.a962	60		rts				rts
.a963					DivideCheckSubtract:
.a963	20 f0 96	jsr $96f0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a966	b0 04		bcs $a96c			bcs 	_DCSExit 					; if carry set, then could do, exit
.a968	20 ca 96	jsr $96ca			jsr 	AddTopTwoStack 				; add it back in
.a96b	18		clc				clc 								; and return False
.a96c					_DCSExit:
.a96c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a96d					MulInteger:
.a96d	fa		plx				plx
.a96e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a971	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a974	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a975	0a		asl a				asl 	a
.a976	10 05		bpl $a97d			bpl 	_NotRef
.a978	48		pha				pha
.a979	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a97c	68		pla				pla
.a97d					_NotRef:
.a97d	0a		asl a				asl 	a 							; put MSB of type into A:7
.a97e	30 0b		bmi $a98b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a980	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a983	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a986	f0 06		beq $a98e			beq 	_IntegerCode 				; if clear, then we have two integers
.a988	4c c1 ab	jmp $abc1			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a98b					_StringData:
.a98b	4c 8c ae	jmp $ae8c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a98e					_IntegerCode:
.a98e	20 9b a9	jsr $a99b			jsr 	MultiplyShort
.a991	c9 00		cmp #$00			cmp 	#0
.a993	f0 05		beq $a99a			beq 	_MIExit
.a995	a9 04		lda #$04		lda	#4
.a997	4c d5 94	jmp $94d5		jmp	ErrorHandler
.a99a					_MIExit:
.a99a	60		rts				rts
.a99b					MultiplyShort:
.a99b	5a		phy				phy 								; save Y
.a99c	20 64 a0	jsr $a064			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a99f	20 89 a0	jsr $a089			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a9a2	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a9a4					_I32MLoop:
.a9a4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a9a7	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a9aa	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a9ad	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a9b0	f0 28		beq $a9da			beq 	_I32MExit 					; exit if zero
.a9b2	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a9b5	29 01		and #$01			and 	#1
.a9b7	f0 0e		beq $a9c7			beq 	_I32MNoAdd
.a9b9	20 ca 96	jsr $96ca			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a9bc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a9bf	10 06		bpl $a9c7			bpl 	_I32MNoAdd
.a9c1					_I32ShiftRight:
.a9c1	20 b0 a0	jsr $a0b0			jsr 	NSMShiftRight 				; shift S[X] right
.a9c4	c8		iny				iny 								; increment shift count
.a9c5	80 0a		bra $a9d1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a9c7					_I32MNoAdd:
.a9c7	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a9ca	70 f5		bvs $a9c1			bvs 	_I32ShiftRight 				; instead.
.a9cc	e8		inx				inx
.a9cd	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a9d0	ca		dex				dex
.a9d1					_I32MShiftUpper:
.a9d1	e8		inx				inx 								; shift S[X+2] right
.a9d2	e8		inx				inx
.a9d3	20 b0 a0	jsr $a0b0			jsr 	NSMShiftRight
.a9d6	ca		dex				dex
.a9d7	ca		dex				dex
.a9d8	80 ca		bra $a9a4			bra 	_I32MLoop 					; try again.
.a9da					_I32MExit:
.a9da	20 e0 a9	jsr $a9e0			jsr 	CalculateSign
.a9dd	98		tya				tya 								; shift in A
.a9de	7a		ply				ply 								; restore Y and exit
.a9df	60		rts				rts
.a9e0					CalculateSign:
.a9e0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a9e3	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a9e6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a9e9	0a		asl a				asl 	a 							; shift bit 7 into carry
.a9ea	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a9ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9646					CompareStrings:
.9646	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9649	3d 01 04	and $0401,x			and 	NSStatus+1,x
.964c	29 10		and #$10			and 	#NSBIsString
.964e	f0 2c		beq $967c			beq 	_CSTypeError
.9650	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9653	85 36		sta $36				sta 	zTemp0
.9655	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9658	85 37		sta $37				sta 	zTemp0+1
.965a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.965d	85 38		sta $38				sta 	zTemp1
.965f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9662	85 39		sta $39				sta 	zTemp1+1
.9664	5a		phy				phy 								; save Y so we can access strings
.9665	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9667					_CSLoop:
.9667	c8		iny				iny
.9668	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.966a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.966c	d0 06		bne $9674			bne 	_CSDifferent
.966e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9670	d0 f5		bne $9667			bne 	_CSLoop 					; still comparing
.9672					_CSExit:
.9672	7a		ply				ply 								; reached end, return zero in A from EOS
.9673	60		rts				rts
.9674					_CSDifferent:
.9674	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9676	90 fa		bcc $9672			bcc		_CSExit
.9678	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.967a	80 f6		bra $9672			bra 	_CSExit
.967c					_CSTypeError:
.967c	4c 82 ae	jmp $ae82			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.967f					ShiftLeft:
.967f	38		sec				sec
.9680	80 01		bra $9683			bra 	ShiftMain
.9682					ShiftRight:
.9682	18		clc				clc
.9683					ShiftMain:
.9683	fa		plx				plx 								; restore X
.9684	08		php				php 								; save direction
.9685	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9688	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.968b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.968c	0a		asl a				asl 	a
.968d	10 05		bpl $9694			bpl 	_NotRef
.968f	48		pha				pha
.9690	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9693	68		pla				pla
.9694					_NotRef:
.9694	0a		asl a				asl 	a
.9695	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9697	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.969a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.969d	f0 03		beq $96a2			beq 	_IntegerCode 				; if clear, then we have two integers
.969f	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.96a2					_IntegerCode:
.96a2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.96a5	29 e0		and #$e0			and 	#$E0
.96a7	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.96aa	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.96ad	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.96b0	d0 13		bne $96c5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.96b2					_SMLoop:
.96b2	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.96b5	30 11		bmi $96c8			bmi 	_SMExit 					; exit if done.
.96b7	28		plp				plp 								; restore direcition setting
.96b8	08		php				php
.96b9	90 05		bcc $96c0			bcc 	_SMRight
.96bb	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; shift left if CS
.96be	80 f2		bra $96b2			bra 	_SMLoop
.96c0					_SMRight:
.96c0	20 b0 a0	jsr $a0b0			jsr 	NSMShiftRight 				; shift right if CC
.96c3	80 ed		bra $96b2			bra 	_SMLoop
.96c5					_SMExit0:
.96c5	20 8d a0	jsr $a08d			jsr 	NSMSetZero 					; return zero.
.96c8					_SMExit:
.96c8	28		plp				plp 								; throw direction
.96c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.96ca					AddTopTwoStack:
.96ca	18		clc				clc
.96cb	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96ce	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.96d1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96d4	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96d7	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.96da	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96dd	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96e0	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.96e3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96e6	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96e9	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.96ec	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96ef	60		rts				rts
.96f0					SubTopTwoStack:
.96f0	38		sec				sec
.96f1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96f4	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.96f7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96fa	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96fd	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9700	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9703	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9706	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9709	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.970c	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.970f	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9712	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9715	60		rts				rts
.9716					AddInteger:
.9716	fa		plx				plx
.9717	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.971a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.971d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.971e	0a		asl a				asl 	a
.971f	10 05		bpl $9726			bpl 	_NotRef
.9721	48		pha				pha
.9722	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9725	68		pla				pla
.9726					_NotRef:
.9726	0a		asl a				asl 	a 							; put MSB of type into A:7
.9727	30 0b		bmi $9734			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9729	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.972c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.972f	f0 06		beq $9737			beq 	_IntegerCode 				; if clear, then we have two integers
.9731	4c 49 aa	jmp $aa49			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9734					_StringData:
.9734	4c e9 95	jmp $95e9			jmp 	StringConcat							; at least one string - don't know both are strings.
.9737					_IntegerCode:
.9737					AddCode:
.9737	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.973a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.973d	10 8b		bpl $96ca			bpl 	AddTopTwoStack
.973f	20 f0 96	jsr $96f0			jsr 	SubTopTwoStack 				; do a physical subtraction
.9742	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9745	10 09		bpl $9750			bpl 	_AddExit
.9747	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.974a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.974d	20 42 a0	jsr $a042			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9750					_AddExit:
.9750	60		rts				rts
.9751					SubInteger:
.9751	fa		plx				plx
.9752	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9755	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9758	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9759	0a		asl a				asl 	a
.975a	10 05		bpl $9761			bpl 	_NotRef
.975c	48		pha				pha
.975d	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9760	68		pla				pla
.9761					_NotRef:
.9761	0a		asl a				asl 	a 							; put MSB of type into A:7
.9762	30 0b		bmi $976f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9764	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9767	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.976a	f0 06		beq $9772			beq 	_IntegerCode 				; if clear, then we have two integers
.976c	4c 4e aa	jmp $aa4e			jmp 	FloatingPointSub 							; otherwise at least one float.
.976f					_StringData:
.976f	4c 8c ae	jmp $ae8c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9772					_IntegerCode:
.9772	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9775	49 80		eor #$80			eor 	#$80
.9777	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.977a	80 bb		bra $9737			bra 	AddCode 					; and do the same code as add.
.977c					AndInteger:
.977c	fa		plx				plx
.977d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9780	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9783	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9784	0a		asl a				asl 	a
.9785	10 05		bpl $978c			bpl 	_NotRef
.9787	48		pha				pha
.9788	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.978b	68		pla				pla
.978c					_NotRef:
.978c	0a		asl a				asl 	a
.978d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.978f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9792	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9795	f0 03		beq $979a			beq 	_IntegerCode 				; if clear, then we have two integers
.9797	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.979a					_IntegerCode:
.979a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.979d	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.97a0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97a3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97a6	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.97a9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97ac	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.97af	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.97b2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97b5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97b8	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.97bb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97be	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.97c1	60		rts				rts
.97c2					OraInteger:
.97c2	fa		plx				plx
.97c3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97c6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97c9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ca	0a		asl a				asl 	a
.97cb	10 05		bpl $97d2			bpl 	_NotRef
.97cd	48		pha				pha
.97ce	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97d1	68		pla				pla
.97d2					_NotRef:
.97d2	0a		asl a				asl 	a
.97d3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97d5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97d8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97db	f0 03		beq $97e0			beq 	_IntegerCode 				; if clear, then we have two integers
.97dd	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.97e0					_IntegerCode:
.97e0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.97e3	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.97e6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97e9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97ec	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.97ef	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97f2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.97f5	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.97f8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97fb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97fe	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9801	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9804	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9807	60		rts				rts
.9808					EorInteger:
.9808	fa		plx				plx
.9809	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.980c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.980f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9810	0a		asl a				asl 	a
.9811	10 05		bpl $9818			bpl 	_NotRef
.9813	48		pha				pha
.9814	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9817	68		pla				pla
.9818					_NotRef:
.9818	0a		asl a				asl 	a
.9819	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.981b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.981e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9821	f0 03		beq $9826			beq 	_IntegerCode 				; if clear, then we have two integers
.9823	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.9826					_IntegerCode:
.9826	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9829	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.982c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.982f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9832	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9835	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9838	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.983b	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.983e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9841	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9844	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9847	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.984a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.984d	60		rts				rts
.984e					WordIndirect:
.984e	fa		plx				plx
.984f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9852	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9855	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9856	0a		asl a				asl 	a
.9857	10 05		bpl $985e			bpl 	_NotRef
.9859	48		pha				pha
.985a	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.985d	68		pla				pla
.985e					_NotRef:
.985e	0a		asl a				asl 	a
.985f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9861	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9864	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9867	f0 03		beq $986c			beq 	_IntegerCode 				; if clear, then we have two integers
.9869	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.986c					_IntegerCode:
.986c	20 37 97	jsr $9737			jsr 	AddCode 					; add the two values
.986f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9871	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9874	60		rts				rts
.9875					ByteIndirect:
.9875	fa		plx				plx
.9876	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9879	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.987c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.987d	0a		asl a				asl 	a
.987e	10 05		bpl $9885			bpl 	_NotRef
.9880	48		pha				pha
.9881	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9884	68		pla				pla
.9885					_NotRef:
.9885	0a		asl a				asl 	a
.9886	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9888	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.988b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.988e	f0 03		beq $9893			beq 	_IntegerCode 				; if clear, then we have two integers
.9890	4c 82 ae	jmp $ae82			jmp 	TypeError 					; anything else, type mismatch.
.9893					_IntegerCode:
.9893	20 37 97	jsr $9737			jsr 	AddCode 					; add the two values
.9896	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9898	9d 00 04	sta $0400,x			sta 	NSStatus,x
.989b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a9ee					ConvertInt16:
.a9ee	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a9f1	8e 10 04	stx $0410			stx 	NSMantissa1
.a9f4	9c 18 04	stz $0418			stz 	NSMantissa2
.a9f7	9c 20 04	stz $0420			stz 	NSMantissa3
.a9fa	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a9fd	a2 00		ldx #$00			ldx 	#0 							; stack level
.a9ff	a9 0a		lda #$0a			lda 	#10 						; base
.aa01	80 00		bra $aa03			bra 	ConvertInt32
.aa03					ConvertInt32:
.aa03	5a		phy				phy
.aa04	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.aa06	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aa09	10 08		bpl $aa13			bpl 	_CI32NotNeg
.aa0b	48		pha				pha
.aa0c	a9 2d		lda #$2d			lda 	#'-'
.aa0e	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aa11	c8		iny				iny
.aa12	68		pla				pla
.aa13					_CI32NotNeg:
.aa13	20 21 aa	jsr $aa21			jsr 	_CI32DivideConvert 			; recursive conversion
.aa16	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.aa18	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aa1b	7a		ply				ply
.aa1c	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.aa1e	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.aa20	60		rts				rts
.aa21					_CI32DivideConvert:
.aa21	e8		inx				inx 								; write to next slot up
.aa22	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.aa25	ca		dex				dex
.aa26	20 23 a9	jsr $a923			jsr 	Int32Divide 				; divide
.aa29	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.aa2c	48		pha				pha
.aa2d	20 d2 a8	jsr $a8d2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.aa30	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; is it zero ?
.aa33	f0 06		beq $aa3b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.aa35	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.aa38	20 21 aa	jsr $aa21			jsr 	_CI32DivideConvert 			; and recusrively call.
.aa3b					_CI32NoRecurse:
.aa3b	68		pla				pla 								; remainder
.aa3c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.aa3e	90 02		bcc $aa42			bcc 	_CI32NotHex
.aa40	69 26		adc #$26			adc 	#6+32
.aa42					_CI32NotHex:
.aa42	69 30		adc #$30			adc 	#48
.aa44	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.aa47	c8		iny				iny
.aa48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.989c					PrecedenceLevel:
>989c	04					.byte	 4	; $00 <<
>989d	02					.byte	 2	; $01 <=
>989e	02					.byte	 2	; $02 <>
>989f	00					.byte	 0	; $03 !!3
>98a0	00					.byte	 0	; $04 ><
>98a1	02					.byte	 2	; $05 >=
>98a2	04					.byte	 4	; $06 >>
>98a3	00					.byte	 0	; $07 !!7
>98a4	00					.byte	 0	; $08 !!8
>98a5	00					.byte	 0	; $09 !!9
>98a6	00					.byte	 0	; $0a !!10
>98a7	00					.byte	 0	; $0b !!11
>98a8	00					.byte	 0	; $0c !!12
>98a9	00					.byte	 0	; $0d !!13
>98aa	00					.byte	 0	; $0e !!14
>98ab	00					.byte	 0	; $0f !!15
>98ac	00					.byte	 0	; $10 @
>98ad	00					.byte	 0	; $11 !!17
>98ae	00					.byte	 0	; $12 !!18
>98af	00					.byte	 0	; $13 [
>98b0	04					.byte	 4	; $14 \
>98b1	00					.byte	 0	; $15 ]
>98b2	01					.byte	 1	; $16 ^
>98b3	00					.byte	 0	; $17 _
>98b4	00					.byte	 0	; $18 `
>98b5	00					.byte	 0	; $19 !!25
>98b6	00					.byte	 0	; $1a !!26
>98b7	00					.byte	 0	; $1b {
>98b8	01					.byte	 1	; $1c |
>98b9	00					.byte	 0	; $1d }
>98ba	00					.byte	 0	; $1e ~
>98bb	00					.byte	 0	; $1f [7m<7F>[m
>98bc	00					.byte	 0	; $20
>98bd	05					.byte	 5	; $21 !
>98be	00					.byte	 0	; $22 "
>98bf	00					.byte	 0	; $23 #
>98c0	05					.byte	 5	; $24 $
>98c1	04					.byte	 4	; $25 %
>98c2	01					.byte	 1	; $26 &
>98c3	00					.byte	 0	; $27 '
>98c4	00					.byte	 0	; $28 (
>98c5	00					.byte	 0	; $29 )
>98c6	04					.byte	 4	; $2a *
>98c7	03					.byte	 3	; $2b +
>98c8	00					.byte	 0	; $2c ,
>98c9	03					.byte	 3	; $2d -
>98ca	00					.byte	 0	; $2e .
>98cb	04					.byte	 4	; $2f /
>98cc	00					.byte	 0	; $30 0
>98cd	00					.byte	 0	; $31 1
>98ce	00					.byte	 0	; $32 2
>98cf	00					.byte	 0	; $33 3
>98d0	00					.byte	 0	; $34 4
>98d1	00					.byte	 0	; $35 5
>98d2	00					.byte	 0	; $36 6
>98d3	00					.byte	 0	; $37 7
>98d4	00					.byte	 0	; $38 8
>98d5	00					.byte	 0	; $39 9
>98d6	00					.byte	 0	; $3a :
>98d7	00					.byte	 0	; $3b ;
>98d8	02					.byte	 2	; $3c <
>98d9	02					.byte	 2	; $3d =
>98da	02					.byte	 2	; $3e >
>98db	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.98dc					EvaluateExpressionAt0:
.98dc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.98de					EvaluateExpression:
.98de	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.98e0					EvaluateExpressionAtPrecedence:
.98e0	48		pha				pha 								; save precedence level
.98e1	20 af 9b	jsr $9baf			jsr 	EvaluateTerm 				; evaluate term into level X.
.98e4	68		pla				pla 								; restore precedence level.
.98e5					_EXPRLoop:
.98e5	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.98e7	b1 30		lda ($30),y			lda 	(codePtr),y
.98e9	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.98eb	b0 25		bcs $9912			bcs 	_EXPRExit
.98ed	da		phx				phx 								; read the operator precedence
.98ee	aa		tax				tax
.98ef	bd 9c 98	lda $989c,x			lda 	PrecedenceLevel,x
.98f2	fa		plx				plx
.98f3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98f5	f0 1b		beq $9912			beq 	_EXPRExit
.98f7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98f9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98fb	c5 37		cmp $37				cmp 	zTemp0+1
.98fd	b0 13		bcs $9912			bcs		_EXPRExit 					; if current >= operator exit
.98ff	48		pha				pha 								; save current precedence.
.9900	b1 30		lda ($30),y			lda 	(codePtr),y
.9902	c8		iny				iny
.9903	48		pha				pha
.9904	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9906	e8		inx				inx 								; work out the right hand side.
.9907	20 e0 98	jsr $98e0			jsr 	EvaluateExpressionAtPrecedence
.990a	ca		dex				dex
.990b	68		pla				pla 								; get operator, call the code.
.990c	20 15 99	jsr $9915			jsr 	_EXPRCaller
.990f	68		pla				pla 								; restore precedence level
.9910	80 d3		bra $98e5			bra 	_EXPRLoop 					; and go round.
.9912					_EXPRExit:
.9912	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9914	60		rts				rts
.9915					_EXPRCaller:
.9915	da		phx				phx 								; save on stack, first thing is to restore it
.9916	0a		asl a				asl 	a 							; double so can use vectors into X
.9917	aa		tax				tax
.9918	7c f6 90	jmp ($90f6,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.aa49					FloatingPointAdd:
.aa49	20 ea ab	jsr $abea			jsr 	FloatPrepare 				; prepare for floats
.aa4c	80 0b		bra $aa59			bra 	FloatAdd
.aa4e					FloatingPointSub:
.aa4e	20 ea ab	jsr $abea			jsr 	FloatPrepare 				; prepare for floats
.aa51					FloatSubtract:
.aa51	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.aa54	49 80		eor #$80			eor 	#$80
.aa56	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aa59					FloatAdd:
.aa59	48		pha				pha
.aa5a	5a		phy				phy
.aa5b	20 fb ab	jsr $abfb			jsr 	NSNormalise 				; normalise S[X]
.aa5e	f0 54		beq $aab4			beq 	_FAReturn1
.aa60	e8		inx				inx 								; normalise S[X+1]
.aa61	20 fb ab	jsr $abfb			jsr 	NSNormalise
.aa64	ca		dex				dex
.aa65	c9 00		cmp #$00			cmp 	#0
.aa67	f0 6f		beq $aad8			beq 	_FAExit 					; if so, just return A
.aa69	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aa6c	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aa6f	f0 1b		beq $aa8c			beq 	_FAExponentsEqual
.aa71	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.aa74	a8		tay				tay
.aa75	38		sec				sec 								; do a signed comparison of the exponents.
.aa76	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aa79	50 02		bvc $aa7d			bvc 	_FANoSignedChange
.aa7b	49 80		eor #$80			eor 	#$80
.aa7d					_FANoSignedChange:
.aa7d	29 80		and #$80			and 	#$80
.aa7f	10 03		bpl $aa84			bpl 	_FAHaveMax
.aa81	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.aa84					_FAHaveMax:
.aa84	20 db aa	jsr $aadb			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.aa87	e8		inx				inx
.aa88	20 db aa	jsr $aadb			jsr 	_FAShiftToExponent
.aa8b	ca		dex				dex
.aa8c					_FAExponentsEqual:
.aa8c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.aa8f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aa92	30 10		bmi $aaa4			bmi 	_FADifferentSigns
.aa94	20 ca 96	jsr $96ca			jsr 	AddTopTwoStack 				; do the add of the mantissae
.aa97	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.aa9a	10 3c		bpl $aad8			bpl 	_FAExit 					; if no, we are done.
.aa9c	20 b0 a0	jsr $a0b0			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.aa9f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.aaa2	80 34		bra $aad8			bra 	_FAExit
.aaa4					_FADifferentSigns:
.aaa4	20 f0 96	jsr $96f0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.aaa7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.aaaa	10 2c		bpl $aad8			bpl 	_FAExit 					; if no, we are done.
.aaac	20 39 a0	jsr $a039			jsr 	NSMNegate 					; netate result
.aaaf	20 42 a0	jsr $a042			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.aab2	80 24		bra $aad8			bra 	_FAExit
.aab4					_FAReturn1:
.aab4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.aab7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aaba	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.aabd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aac0	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.aac3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aac6	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.aac9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aacc	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.aacf	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aad2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.aad5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aad8					_FAExit:
.aad8	7a		ply				ply
.aad9	68		pla				pla
.aada	60		rts				rts
.aadb					_FAShiftToExponent:
.aadb					_FAShiftToExponent2:
.aadb	98		tya				tya 								; compare Y to exponent
.aadc	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.aadf	f0 08		beq $aae9			beq 	_FASEExit 					; exit if so.
.aae1	20 b0 a0	jsr $a0b0			jsr 	NSMShiftRight	 			; shift the mantissa right
.aae4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.aae7	80 f2		bra $aadb			bra 	_FAShiftToExponent2
.aae9					_FASEExit:
.aae9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.aaea					CompareFloat:
.aaea	20 51 aa	jsr $aa51			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.aaed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.aaf0	29 f8		and #$f8			and 	#$F8
.aaf2	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.aaf5	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.aaf8	f0 09		beq $ab03			beq 	_FCExit 					; zero, so approximately identical
.aafa	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.aafc	3c 00 04	bit $0400,x			bit 	NSStatus,x
.aaff	10 02		bpl $ab03			bpl 	_FCExit
.ab01					_FCNegative:
.ab01	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ab03					_FCExit:
.ab03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ab04					FDivideCommand:
.ab04	fa		plx				plx	 								; restore stack position
.ab05	20 ea ab	jsr $abea			jsr 	FloatPrepare 				; prepare for floats
.ab08					FloatDivide:
.ab08	48		pha				pha
.ab09	e8		inx				inx
.ab0a	20 fb ab	jsr $abfb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ab0d	ca		dex				dex
.ab0e	c9 00		cmp #$00			cmp 	#0
.ab10	f0 20		beq $ab32			beq 	_FDZero
.ab12	20 fb ab	jsr $abfb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ab15	f0 19		beq $ab30			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ab17	20 45 a9	jsr $a945			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.ab1a	20 d2 a8	jsr $a8d2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.ab1d	20 fb ab	jsr $abfb			jsr		NSNormalise 				; renormalise
.ab20	20 e0 a9	jsr $a9e0			jsr 	CalculateSign 				; calculate result sign
.ab23	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.ab26	38		sec				sec
.ab27	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ab2a	38		sec				sec
.ab2b	e9 1e		sbc #$1e			sbc 	#30
.ab2d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ab30					_FDExit:
.ab30	68		pla				pla
.ab31	60		rts				rts
.ab32					_FDZero:
.ab32	a9 03		lda #$03		lda	#3
.ab34	4c d5 94	jmp $94d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.ab37					FloatFractionalPart:
.ab37	5a		phy				phy
.ab38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.ab3b	29 7f		and #$7f			and 	#$7F
.ab3d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab40	20 fb ab	jsr $abfb			jsr 	NSNormalise
.ab43	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.ab46	38		sec				sec
.ab47	e9 e0		sbc #$e0			sbc 	#$E0
.ab49	90 31		bcc $ab7c			bcc 	_FFPExit 					; already fractional
.ab4b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.ab4d	b0 2a		bcs $ab79			bcs 	_FFPZero
.ab4f	a8		tay				tay 								; put count to do in Y
.ab50	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.ab53	20 7e ab	jsr $ab7e			jsr 	_FFPPartial
.ab56	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab59	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.ab5c	20 7e ab	jsr $ab7e			jsr 	_FFPPartial
.ab5f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab62	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ab65	20 7e ab	jsr $ab7e			jsr 	_FFPPartial
.ab68	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab6b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ab6e	20 7e ab	jsr $ab7e			jsr 	_FFPPartial
.ab71	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ab74	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; zeroed check.
.ab77	d0 03		bne $ab7c			bne 	_FFPExit
.ab79					_FFPZero:
.ab79	20 8d a0	jsr $a08d			jsr 	NSMSetZero
.ab7c					_FFPExit:
.ab7c	7a		ply				ply
.ab7d	60		rts				rts
.ab7e					_FFPPartial:
.ab7e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.ab80	f0 17		beq $ab99			beq 	_FFFPPExit
.ab82	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.ab84	b0 0c		bcs $ab92			bcs 	_FFFPPWholeByte
.ab86	5a		phy				phy
.ab87					_FFFPPLeft:
.ab87	0a		asl a				asl 	a
.ab88	88		dey				dey
.ab89	d0 fc		bne $ab87			bne 	_FFFPPLeft
.ab8b	7a		ply				ply
.ab8c					_FFFPPRight:
.ab8c	4a		lsr a				lsr 	a
.ab8d	88		dey				dey
.ab8e	d0 fc		bne $ab8c			bne 	_FFFPPRight
.ab90	80 07		bra $ab99			bra 	_FFFPPExit
.ab92					_FFFPPWholeByte:
.ab92	98		tya				tya 								; subtract 8 from count
.ab93	38		sec				sec
.ab94	e9 08		sbc #$08			sbc 	#8
.ab96	a8		tay				tay
.ab97	a9 00		lda #$00			lda 	#0 							; and clear all
.ab99					_FFFPPExit:
.ab99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.ab9a					FloatIntegerPart:
.ab9a	48		pha				pha
.ab9b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.ab9e	f0 1f		beq $abbf			beq 	_FIPExit 					; if so do nothing
.aba0	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; is it zero ?
.aba3	f0 17		beq $abbc			beq 	_FIPZero 					; if so return zero.
.aba5	20 fb ab	jsr $abfb			jsr 	NSNormalise 				; normalise
.aba8	f0 12		beq $abbc			beq 	_FIPZero 					; normalised to zero, exit zero
.abaa					_FIPShift:
.abaa	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.abad	10 08		bpl $abb7			bpl 	_FIPCheckZero
.abaf	20 b0 a0	jsr $a0b0			jsr 	NSMShiftRight 				; shift mantissa right
.abb2	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.abb5	80 f3		bra $abaa			bra 	_FIPShift
.abb7					_FIPCheckZero:
.abb7	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; avoid -0 problem
.abba	d0 03		bne $abbf			bne 	_FIPExit 					; set to zero if mantissa zero.
.abbc					_FIPZero:
.abbc	20 8d a0	jsr $a08d			jsr 	NSMSetZero
.abbf					_FIPExit:
.abbf	68		pla				pla
.abc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.abc1					FloatingPointMultiply:
.abc1	20 ea ab	jsr $abea			jsr 	FloatPrepare 				; prepare for floats
.abc4					FloatMultiply:
.abc4	48		pha				pha
.abc5	20 fb ab	jsr $abfb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.abc8	f0 1b		beq $abe5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.abca	e8		inx				inx
.abcb	20 fb ab	jsr $abfb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.abce	ca		dex				dex
.abcf	c9 00		cmp #$00			cmp 	#0
.abd1	f0 0f		beq $abe2			beq 	_FDSetZero
.abd3	20 9b a9	jsr $a99b			jsr 	MultiplyShort 				; calculate the result.
.abd6	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.abd9	18		clc				clc
.abda	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.abdd	9d 28 04	sta $0428,x			sta 	NSExponent,x
.abe0	80 03		bra $abe5			bra 	_FDExit
.abe2					_FDSetZero:
.abe2	20 8d a0	jsr $a08d			jsr 	NSMSetZero 					; return 0
.abe5					_FDExit:
.abe5	20 fb ab	jsr $abfb			jsr 	NSNormalise 				; normalise the result
.abe8	68		pla				pla
.abe9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.abea					FloatPrepare:
.abea	20 ee 99	jsr $99ee			jsr 	DereferenceTopTwo 			; dereference the top two values
.abed	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.abf0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.abf3	29 10		and #$10			and 	#NSBIsString
.abf5	d0 01		bne $abf8			bne 	_FDType
.abf7	60		rts				rts
.abf8					_FDType:
.abf8	4c 82 ae	jmp $ae82			jmp 	TypeError
.abfb					NSNormalise:
.abfb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.abfe	29 80		and #$80			and 	#$80
.ac00	09 08		ora #$08			ora 	#NSTFloat
.ac02	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac05	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; if zero exit
.ac08	d0 09		bne $ac13			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ac0a	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ac0d	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ac10	a9 00		lda #$00			lda 	#0 							; set Z flag
.ac12	60		rts				rts
.ac13					_NSNormaliseOptimise:
.ac13	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.ac16	d0 22		bne $ac3a			bne 	_NSNormaliseLoop
.ac18	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.ac1b	30 1d		bmi $ac3a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.ac1d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ac20	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ac23	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ac26	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ac29	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac2c	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.ac2f	bd 28 04	lda $0428,x			lda 	NSExponent,x
.ac32	38		sec				sec
.ac33	e9 08		sbc #$08			sbc 	#8
.ac35	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ac38	80 d9		bra $ac13			bra 	_NSNormaliseOptimise
.ac3a					_NSNormaliseLoop:
.ac3a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.ac3d	70 08		bvs $ac47			bvs 	_NSNExit 					; exit if so with Z flag clear
.ac3f	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; shift mantissa left
.ac42	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ac45	80 f3		bra $ac3a			bra 	_NSNormaliseLoop
.ac47					_NSNExit:
.ac47	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ac49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.991b					AssignNumber:
.991b	5a		phy				phy
.991c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.991f	85 36		sta $36				sta 	zTemp0
.9921	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9924	85 37		sta $37				sta 	zTemp0+1
.9926	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9929	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.992b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.992e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9930	c9 08		cmp #$08			cmp 	#NSTFloat
.9932	f0 2a		beq $995e			beq 	_ANFloat
.9934	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9937	f0 05		beq $993e			beq		_ANNotFloat
.9939	e8		inx				inx
.993a	20 9a ab	jsr $ab9a			jsr 	FloatIntegerPart 			; make it an integer
.993d	ca		dex				dex
.993e					_ANNotFloat:
.993e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9941	29 03		and #$03			and 	#3
.9943	d0 05		bne $994a			bne 	_ANByteWord
.9945	20 6a 99	jsr $996a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9948	80 1e		bra $9968			bra 	_ANExit
.994a					_ANByteWord:
.994a	48		pha				pha 								; save count
.994b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.994e	92 36		sta ($36)			sta 	(zTemp0)
.9950	68		pla				pla
.9951	c9 01		cmp #$01			cmp	 	#1
.9953	f0 13		beq $9968			beq 	_ANExit
.9955	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9958	a0 01		ldy #$01			ldy 	#1
.995a	91 36		sta ($36),y			sta 	(zTemp0),y
.995c	80 0a		bra $9968			bra 	_ANExit
.995e					_ANFloat:
.995e	20 6a 99	jsr $996a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9961	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9964	a0 04		ldy #$04			ldy 	#4
.9966	91 36		sta ($36),y			sta 	(zTemp0),y
.9968					_ANExit:
.9968	7a		ply				ply
.9969	60		rts				rts
.996a					_ANCopy4PackSign:
.996a	a0 03		ldy #$03			ldy 	#3
.996c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.996f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9971	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9974	91 36		sta ($36),y			sta 	(zTemp0),y
.9976	88		dey				dey
.9977	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.997a	91 36		sta ($36),y			sta 	(zTemp0),y
.997c	88		dey				dey
.997d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9980	91 36		sta ($36),y			sta 	(zTemp0),y
.9982	88		dey				dey
.9983	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9986	91 36		sta ($36),y			sta 	(zTemp0),y
.9988	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9989					AssignString:
.9989	5a		phy				phy
.998a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.998d	85 38		sta $38				sta 	zTemp1
.998f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9992	85 39		sta $39				sta 	zTemp1+1
.9994	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9997	85 36		sta $36				sta 	zTemp0
.9999	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.999c	85 37		sta $37				sta 	zTemp0+1
.999e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.99a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.99a2	f0 23		beq $99c7			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.99a4	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.99a5	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.99a7	e9 02		sbc #$02			sbc 	#2
.99a9	85 3c		sta $3c				sta 	zsTemp
.99ab	a0 01		ldy #$01			ldy 	#1
.99ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.99af	e9 00		sbc #$00			sbc 	#0
.99b1	85 3d		sta $3d				sta 	zsTemp+1
.99b3	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.99b5					_ASGetLength:
.99b5	c8		iny				iny
.99b6	b1 38		lda ($38),y			lda 	(zTemp1),y
.99b8	d0 fb		bne $99b5			bne 	_ASGetLength
.99ba	98		tya				tya 								; is this length <= current length
.99bb	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.99bd	90 20		bcc $99df			bcc 	_ASCopyString
.99bf	f0 1e		beq $99df			beq 	_ASCopyString
.99c1	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.99c3	a0 01		ldy #$01			ldy 	#1
.99c5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.99c7					_ASNewStringRequired:
.99c7	e8		inx				inx 								; concrete the new string.
.99c8	20 1e b1	jsr $b11e			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.99cb	ca		dex				dex
.99cc	18		clc				clc
.99cd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.99d0	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.99d2	92 36		sta ($36)			sta 	(zTemp0)
.99d4	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.99d7	69 00		adc #$00			adc 	#0
.99d9	a0 01		ldy #$01			ldy 	#1
.99db	91 36		sta ($36),y			sta 	(zTemp0),y
.99dd	80 0d		bra $99ec			bra 	_ASExit
.99df					_ASCopyString:
.99df	a0 00		ldy #$00			ldy 	#0
.99e1					_ASCopyLoop:
.99e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.99e3	c8		iny				iny
.99e4	c8		iny				iny
.99e5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.99e7	88		dey				dey
.99e8	c9 00		cmp #$00			cmp 	#0
.99ea	d0 f5		bne $99e1			bne 	_ASCopyLoop
.99ec					_ASExit:
.99ec	7a		ply				ply
.99ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.99ee					DereferenceTopTwo:
.99ee	e8		inx				inx
.99ef	20 f3 99	jsr $99f3			jsr 	Dereference 				; deref x+1
.99f2	ca		dex				dex  								; falls through to deref x
.99f3					Dereference:
.99f3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.99f6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.99f8	f0 57		beq $9a51			beq 	_DRFExit 					; not a reference
.99fa	5a		phy				phy
.99fb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.99fe	85 36		sta $36				sta 	zTemp0
.9a00	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a03	85 37		sta $37				sta 	zTemp0+1
.9a05	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9a08	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9a0a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a0d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9a10	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9a12	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9a14	f0 0f		beq $9a25			beq 	_DRFDereferenceTwo
.9a16	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9a18	f0 39		beq $9a53			beq 	_DRFFull
.9a1a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9a1d	29 03		and #$03			and 	#3
.9a1f	f0 32		beq $9a53			beq 	_DRFFull 					; the whole word
.9a21	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9a23	f0 07		beq $9a2c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9a25					_DRFDereferenceTwo:
.9a25	a0 01		ldy #$01			ldy 	#1
.9a27	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a29	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a2c					_DRFClear23:
.9a2c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9a2f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a32	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9a35	29 18		and #$18			and 	#NSBTypeMask
.9a37	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a3a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9a3c	d0 12		bne $9a50			bne 	_DRFNotString
.9a3e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9a41	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9a44	d0 0a		bne $9a50			bne 	_DRFNotString
.9a46	a9 52		lda #$52			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9a48	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9a4b	a9 9a		lda #$9a			lda 	#_DRFNullString >> 8
.9a4d	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9a50					_DRFNotString
.9a50	7a		ply				ply 								; restore Y and exit
.9a51					_DRFExit:
.9a51	60		rts				rts
.9a52					_DRFNullString:
>9a52	00						.byte 	0
.9a53					_DRFFull:
.9a53	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9a55	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a57	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a5a	c8		iny				iny
.9a5b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a5d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a60	c8		iny				iny
.9a61	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a63	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a66	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9a69	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9a6c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9a6e	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9a71	f0 06		beq $9a79			beq 	_DRFNoExponent
.9a73	c8		iny				iny 								; if not, read the exponent as well.
.9a74	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a76	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a79					_DRFNoExponent:
.9a79	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9a7c	10 0d		bpl $9a8b			bpl 	_DRFExit2 					; if not, then exit.
.9a7e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9a80	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a83	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9a86	09 80		ora #$80			ora 	#NSBIsNegative
.9a88	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a8b					_DRFExit2:
.9a8b	7a		ply				ply
.9a8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9a8d					EncodeNumberStart:
.9a8d	38		sec				sec
.9a8e	80 01		bra $9a91			bra 	EncodeNumberContinue+1
.9a90					EncodeNumberContinue:
.9a90	18		clc				clc
.9a91					EncodeNumber:
.9a91	08		php				php 								; save reset.
.9a92	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a94	f0 12		beq $9aa8			beq 	_ENIsOkay
.9a96	c9 30		cmp #$30			cmp 	#"0"
.9a98	90 04		bcc $9a9e			bcc 	_ENBadNumber
.9a9a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9a9c	90 0a		bcc $9aa8			bcc 	_ENIsOkay
.9a9e					_ENBadNumber:
.9a9e	28		plp				plp 								; throw saved reset
.9a9f	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9aa2	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9aa4	f0 7e		beq $9b24			beq 	_ENConstructFinal
.9aa6					_ENFail:
.9aa6	18		clc				clc 								; not allowed
.9aa7	60		rts				rts
.9aa8					_ENIsOkay:
.9aa8	28		plp				plp 								; are we restarting
.9aa9	90 15		bcc $9ac0			bcc 	_ENNoRestart
.9aab					_ENStartEncode:
.9aab	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9aad	f0 0c		beq $9abb			beq 	_ENFirstDP
.9aaf	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ab1	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.9ab4	a9 01		lda #$01			lda 	#ESTA_Low
.9ab6					_ENExitChange:
.9ab6	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ab9	38		sec				sec
.9aba	60		rts				rts
.9abb					_ENFirstDP:
.9abb	20 8d a0	jsr $a08d			jsr 	NSMSetZero 					; clear integer part
.9abe	80 3f		bra $9aff			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ac0					_ENNoRestart:
.9ac0	48		pha				pha 								; save on stack.
.9ac1	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9ac4	c9 01		cmp #$01			cmp 	#ESTA_Low
.9ac6	f0 09		beq $9ad1			beq  	_ESTALowState
.9ac8	c9 02		cmp #$02			cmp 	#ESTA_High
.9aca	f0 29		beq $9af5			beq 	_ESTAHighState
.9acc	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ace	f0 3b		beq $9b0b			beq 	_ESTADecimalState
>9ad0	db						.byte 	$DB 						; causes a break in the emulator
.9ad1					_ESTALowState:
.9ad1	68		pla				pla 								; get value back
.9ad2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9ad4	f0 29		beq $9aff			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9ad6	29 0f		and #$0f			and 	#15 						; make digit
.9ad8	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9adb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9ade	0a		asl a				asl 	a
.9adf	0a		asl a				asl 	a
.9ae0	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9ae3	0a		asl a				asl 	a
.9ae4	6d 86 04	adc $0486			adc 	DigitTemp
.9ae7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9aea	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9aec	90 05		bcc $9af3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9aee	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9af0	8d 85 04	sta $0485			sta 	EncodeState
.9af3					_ESTANoSwitch:
.9af3	38		sec				sec
.9af4	60		rts				rts
.9af5					_ESTAHighState:
.9af5	68		pla				pla 								; get value back
.9af6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9af8	f0 05		beq $9aff			beq 	_ESTASwitchFloat
.9afa	20 5e 9b	jsr $9b5e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9afd	38		sec				sec
.9afe	60		rts				rts
.9aff					_ESTASwitchFloat:
.9aff	9c 87 04	stz $0487			stz 	DecimalCount
.9b02	e8		inx				inx 								; zero the decimal additive.
.9b03	20 8d a0	jsr $a08d			jsr 	NSMSetZero
.9b06	ca		dex				dex
.9b07	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9b09	80 ab		bra $9ab6			bra 	_ENExitChange
.9b0b					_ESTADecimalState:
.9b0b	68		pla				pla 								; digit.
.9b0c	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9b0e	f0 96		beq $9aa6			beq 	_ENFail
.9b10	e8		inx				inx 								; put digit into fractional part of X+1
.9b11	20 5e 9b	jsr $9b5e			jsr 	ESTAShiftDigitIntoMantissa
.9b14	ca		dex				dex
.9b15	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9b18	ad 87 04	lda $0487			lda 	DecimalCount
.9b1b	c9 0b		cmp #$0b			cmp 	#11
.9b1d	f0 02		beq $9b21			beq 	_ESTADSFail
.9b1f	38		sec				sec
.9b20	60		rts				rts
.9b21					_ESTADSFail:
.9b21	4c 7d ae	jmp $ae7d			jmp 	RangeError
.9b24					_ENConstructFinal:
.9b24	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9b27	f0 33		beq $9b5c			beq 	_ENCFExit 					; no decimals
.9b29	5a		phy				phy
.9b2a	0a		asl a				asl 	a 							; x 4 and CLC
.9b2b	0a		asl a				asl 	a
.9b2c	6d 87 04	adc $0487			adc 	DecimalCount
.9b2f	a8		tay				tay
.9b30	b9 3c ae	lda $ae3c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9b33	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9b36	b9 3d ae	lda $ae3d,y			lda 	DecimalScalarTable-5+1,y
.9b39	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9b3c	b9 3e ae	lda $ae3e,y			lda 	DecimalScalarTable-5+2,y
.9b3f	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9b42	b9 3f ae	lda $ae3f,y			lda 	DecimalScalarTable-5+3,y
.9b45	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9b48	b9 40 ae	lda $ae40,y			lda 	DecimalScalarTable-5+4,y
.9b4b	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9b4e	a9 08		lda #$08			lda 	#NSTFloat
.9b50	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9b53	7a		ply				ply
.9b54	e8		inx				inx 								; multiply decimal const by decimal scalar
.9b55	20 c4 ab	jsr $abc4			jsr 	FloatMultiply
.9b58	ca		dex				dex
.9b59	20 59 aa	jsr $aa59			jsr 	FloatAdd 					; add to integer part.
.9b5c					_ENCFExit:
.9b5c	18		clc				clc 								; reject the digit.
.9b5d	60		rts				rts
.9b5e					ESTAShiftDigitIntoMantissa:
.9b5e	29 0f		and #$0f			and 	#15 						; save digit
.9b60	48		pha				pha
.9b61	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9b64	48		pha				pha
.9b65	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9b68	48		pha				pha
.9b69	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b6c	48		pha				pha
.9b6d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b70	48		pha				pha
.9b71	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; x 2
.9b74	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; x 4
.9b77	18		clc				clc 								; pop mantissa and add
.9b78	68		pla				pla
.9b79	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b7c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b7f	68		pla				pla
.9b80	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9b83	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b86	68		pla				pla
.9b87	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9b8a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b8d	68		pla				pla
.9b8e	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9b91	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9b94	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; x 10
.9b97	68		pla				pla 								; add digit
.9b98	18		clc				clc
.9b99	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b9c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b9f	90 0d		bcc $9bae			bcc 	_ESTASDExit
.9ba1	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9ba4	d0 08		bne $9bae			bne 	_ESTASDExit
.9ba6	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9ba9	d0 03		bne $9bae			bne 	_ESTASDExit
.9bab	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9bae					_ESTASDExit:
.9bae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9baf					EvaluateTerm:
.9baf	b1 30		lda ($30),y			lda 	(codePtr),y
.9bb1	30 18		bmi $9bcb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9bb3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9bb5	b0 6f		bcs $9c26			bcs 	_ETVariable
.9bb7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9bb9	90 6e		bcc $9c29			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9bbb	c9 3a		cmp #$3a			cmp 	#'9'+1
.9bbd	b0 6a		bcs $9c29			bcs 	_ETPuncUnary
.9bbf	20 8d 9a	jsr $9a8d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9bc2					_ETNumber:
.9bc2	c8		iny				iny 								; keep encoding until we have the numbers
.9bc3	b1 30		lda ($30),y			lda 	(codePtr),y
.9bc5	20 90 9a	jsr $9a90			jsr 	EncodeNumberContinue
.9bc8	b0 f8		bcs $9bc2			bcs 	_ETNumber 					; go back if accepted.
.9bca	60		rts				rts
.9bcb					_ETCheckUnary:
.9bcb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9bcd	f0 41		beq $9c10			beq 	_ETString
.9bcf	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9bd1	f0 12		beq $9be5			beq 	_ETHexConstant
.9bd3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9bd5	90 0b		bcc $9be2			bcc 	_ETSyntaxError
.9bd7	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9bd9	b0 07		bcs $9be2			bcs 	_ETSyntaxError
.9bdb	da		phx				phx 								; push X on the stack
.9bdc	0a		asl a				asl 	a 							; put vector x 2 into X
.9bdd	aa		tax				tax
.9bde	c8		iny				iny 								; consume unary function token
.9bdf	7c 76 91	jmp ($9176,x)			jmp 	(VectorSet0,x) 				; and do it.
.9be2					_ETSyntaxError:
.9be2	4c 78 ae	jmp $ae78			jmp 	SyntaxError
.9be5					_ETHexConstant:
.9be5	c8		iny				iny 								; skip #
.9be6	c8		iny				iny 								; skip count
.9be7	20 8d a0	jsr $a08d			jsr 	NSMSetZero 					; clear result
.9bea					_ETHLoop:
.9bea	b1 30		lda ($30),y			lda 	(codePtr),y
.9bec	c8		iny				iny 								; and consume
.9bed	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9bef	f0 1e		beq $9c0f			beq 	_ETHExit
.9bf1	48		pha				pha 								; save on stack.
.9bf2	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; x 2
.9bf5	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; x 4
.9bf8	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; x 8
.9bfb	20 a2 a0	jsr $a0a2			jsr 	NSMShiftLeft 				; x 16
.9bfe	68		pla				pla 								; ASCII
.9bff	c9 41		cmp #$41			cmp 	#'A'
.9c01	90 02		bcc $9c05			bcc 	_ETHNotChar
.9c03	e9 07		sbc #$07			sbc 	#7
.9c05					_ETHNotChar:
.9c05	29 0f		and #$0f			and 	#15 						; digit now
.9c07	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9c0a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c0d	80 db		bra $9bea			bra 	_ETHLoop 					; go round.
.9c0f					_ETHExit:
.9c0f	60		rts				rts
.9c10					_ETString:
.9c10	c8		iny				iny 								; look at length
.9c11	b1 30		lda ($30),y			lda 	(codePtr),y
.9c13	48		pha				pha
.9c14	c8		iny				iny 								; first character
.9c15	20 d7 a0	jsr $a0d7			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9c18	68		pla				pla 								; restore count and save
.9c19	85 36		sta $36				sta 	zTemp0
.9c1b	98		tya				tya 								; add length to Y to skip it.
.9c1c	18		clc				clc
.9c1d	65 36		adc $36				adc 	zTemp0
.9c1f	a8		tay				tay
.9c20	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9c22	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c25	60		rts				rts
.9c26					_ETVariable:
.9c26	4c 80 9c	jmp $9c80			jmp 	VariableHandler
.9c29					_ETPuncUnary:
.9c29	c8		iny				iny 								; consume the unary character
.9c2a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9c2c	f0 2d		beq $9c5b			beq 	_ETUnaryNegate
.9c2e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9c30	f0 39		beq $9c6b			beq 	_ETDereference
.9c32	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9c34	f0 43		beq $9c79			beq 	_ETParenthesis
.9c36	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9c38	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9c3a	f0 06		beq $9c42			beq 	_ETIndirection
.9c3c	e6 36		inc $36				inc 	zTemp0
.9c3e	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9c40	d0 a0		bne $9be2			bne 	_ETSyntaxError
.9c42					_ETIndirection:
.9c42	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9c44	1a		inc a				inc 	a
.9c45	48		pha				pha
.9c46	20 af 9b	jsr $9baf			jsr 	EvaluateTerm				; evaluate the term
.9c49	20 f3 99	jsr $99f3			jsr 	Dereference 				; dereference it.
.9c4c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9c4f	d0 07		bne $9c58			bne 	_ETTypeMismatch
.9c51	68		pla				pla 								; indirection 1-2
.9c52	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9c54	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c57	60		rts				rts
.9c58					_ETTypeMismatch:
.9c58	4c 82 ae	jmp $ae82			jmp 	TypeError
.9c5b					_ETUnaryNegate:
.9c5b	20 af 9b	jsr $9baf			jsr 	EvaluateTerm				; evaluate the term
.9c5e	20 f3 99	jsr $99f3			jsr 	Dereference 				; dereference it.
.9c61	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9c64	29 10		and #$10			and 	#NSTString
.9c66	d0 f0		bne $9c58			bne 	_ETTypeMismatch
.9c68	4c 39 a0	jmp $a039			jmp 	NSMNegate  					; just toggles the sign bit.
.9c6b					_ETDereference:
.9c6b	20 af 9b	jsr $9baf			jsr 	EvaluateTerm				; evaluate the term
.9c6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9c71	29 20		and #$20			and 	#NSBIsReference
.9c73	f0 e3		beq $9c58			beq 	_ETTypeMismatch
.9c75	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9c78	60		rts				rts
.9c79					_ETParenthesis:
.9c79	20 de 98	jsr $98de			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9c7c	20 92 a8	jsr $a892			jsr 	CheckRightBracket 			; check for )
.9c7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9c80					VariableHandler:
.9c80	b1 30		lda ($30),y			lda 	(codePtr),y
.9c82	18		clc				clc
.9c83	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9c85	85 37		sta $37				sta 	zTemp0+1
.9c87	c8		iny				iny
.9c88	b1 30		lda ($30),y			lda 	(codePtr),y
.9c8a	85 36		sta $36				sta 	zTemp0
.9c8c	c8		iny				iny
.9c8d	18		clc				clc									; copy variable address+3 to mantissa
.9c8e	69 03		adc #$03			adc 	#3
.9c90	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c93	a5 37		lda $37				lda 	zTemp0+1
.9c95	69 00		adc #$00			adc 	#0
.9c97	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c9a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9c9d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ca0	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ca3	5a		phy				phy
.9ca4	a0 02		ldy #$02			ldy 	#2 							; read type
.9ca6	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ca8	7a		ply				ply
.9ca9	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9cab	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9cad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cb0	29 04		and #$04			and 	#NSBIsArray
.9cb2	d0 01		bne $9cb5			bne 	_VHArray
.9cb4	60		rts				rts
.9cb5					_VHArray:
.9cb5	e8		inx				inx
.9cb6	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9cb9	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9cbb	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9cbe	b1 30		lda ($30),y			lda 	(codePtr),y
.9cc0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9cc2	d0 06		bne $9cca			bne 	_VHNoSecondIndex
.9cc4	c8		iny				iny 								; skip the comma
.9cc5	e8		inx				inx
.9cc6	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9cc9	ca		dex				dex
.9cca					_VHNoSecondIndex:
.9cca	ca		dex				dex 								; set X back.
.9ccb	20 92 a8	jsr $a892			jsr 	CheckRightBracket 			; and check the right bracket.
.9cce	5a		phy				phy 								; save position
.9ccf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9cd2	85 3e		sta $3e				sta 	zaTemp
.9cd4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9cd7	85 3f		sta $3f				sta 	zaTemp+1
.9cd9	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9cdb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cdd	f0 02		beq $9ce1			beq 	_VHHas2Mask
.9cdf	a9 ff		lda #$ff			lda 	#$FF
.9ce1					_VHHas2Mask:
.9ce1	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9ce4	f0 54		beq $9d3a			beq 	_VHBadIndex
.9ce6	0a		asl a				asl 	a 							; carry will be set if a second index
.9ce7	90 09		bcc $9cf2			bcc 	_VHCheckFirstIndex
.9ce9	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9ceb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ced	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9cf0	90 48		bcc $9d3a			bcc 	_VHBadIndex
.9cf2					_VHCheckFirstIndex:
.9cf2	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9cf4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9cf6	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9cf9	90 3f		bcc $9d3a			bcc 	_VHBadIndex
.9cfb	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9cfd	64 37		stz $37				stz 	zTemp0+1
.9cff	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9d02	30 0f		bmi $9d13			bmi 	_VHNoMultiply
.9d04	da		phx				phx
.9d05	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9d08	48		pha				pha
.9d09	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9d0b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d0d	1a		inc a				inc 	a 							; add 1 for zero base
.9d0e	fa		plx				plx
.9d0f	20 14 ad	jsr $ad14			jsr 	Multiply8x8 				; calculate -> Z0
.9d12	fa		plx				plx
.9d13					_VHNoMultiply:
.9d13	18		clc				clc
.9d14	a5 36		lda $36				lda 	zTemp0
.9d16	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9d19	85 36		sta $36				sta 	zTemp0
.9d1b	a5 37		lda $37				lda 	zTemp0+1
.9d1d	69 00		adc #$00			adc 	#0
.9d1f	85 37		sta $37				sta 	zTemp0+1
.9d21	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d24	20 db 8b	jsr $8bdb			jsr 	ScaleByBaseType
.9d27	18		clc				clc
.9d28	b2 3e		lda ($3e)			lda 	(zaTemp)
.9d2a	65 36		adc $36				adc 	zTemp0
.9d2c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d2f	a0 01		ldy #$01			ldy 	#1
.9d31	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d33	65 37		adc $37				adc 	zTemp0+1
.9d35	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d38	7a		ply				ply 								; restore position
.9d39	60		rts				rts
.9d3a					_VHBadIndex:
.9d3a	a9 17		lda #$17		lda	#23
.9d3c	4c d5 94	jmp $94d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ac4a					AbsUnary:
.ac4a	fa		plx				plx 								; restore stack pos
.ac4b	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber 				; get a float or int
.ac4e	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.ac51	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ac54	29 7f		and #$7f			and 	#$7F
.ac56	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9d3f					AllocUnary:
.9d3f	fa		plx				plx 								; restore stack pos
.9d40	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger		; get bytes required.
.9d43	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.9d46	da		phx				phx 								; save X/Y
.9d47	5a		phy				phy
.9d48	8a		txa				txa 								; copy X into Y
.9d49	a8		tay				tay
.9d4a	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9d4d	aa		tax				tax
.9d4e	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9d51	20 5e 9d	jsr $9d5e			jsr 	AllocateXABytes 			; allocate memory
.9d54	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9d57	8a		txa				txa
.9d58	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9d5b	7a		ply				ply
.9d5c	fa		plx				plx
.9d5d	60		rts				rts
.9d5e					AllocateXABytes:
.9d5e	5a		phy				phy
.9d5f	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9d62	84 36		sty $36				sty 	zTemp0
.9d64	5a		phy				phy
.9d65	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9d68	84 37		sty $37				sty 	zTemp0+1
.9d6a	5a		phy				phy
.9d6b	18		clc				clc 								; add to low memory pointer
.9d6c	6d 8c 04	adc $048c			adc 	lowMemPtr
.9d6f	8d 8c 04	sta $048c			sta 	lowMemPtr
.9d72	8a		txa				txa
.9d73	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9d76	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9d79	b0 2f		bcs $9daa			bcs 	CISSMemory
.9d7b	20 9c 9d	jsr $9d9c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9d7e					_ClearMemory:
.9d7e	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9d81	c5 36		cmp $36				cmp 	zTemp0
.9d83	d0 07		bne $9d8c			bne 	_CMClearNext
.9d85	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9d88	c5 37		cmp $37				cmp 	zTemp0+1
.9d8a	f0 0c		beq $9d98			beq 	_CMExit
.9d8c					_CMClearNext:
.9d8c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d8e	92 36		sta ($36)			sta 	(zTemp0)
.9d90	e6 36		inc $36				inc 	zTemp0
.9d92	d0 ea		bne $9d7e			bne 	_ClearMemory
.9d94	e6 37		inc $37				inc		zTemp0+1
.9d96	80 e6		bra $9d7e			bra 	_ClearMemory
.9d98					_CMExit:
.9d98	fa		plx				plx
.9d99	68		pla				pla
.9d9a	7a		ply				ply
.9d9b	60		rts				rts
.9d9c					CheckIdentifierStringSpace:
.9d9c	48		pha				pha
.9d9d	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9da0	18		clc				clc
.9da1	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9da3	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9da6	b0 02		bcs $9daa			bcs 	CISSMemory
.9da8	68		pla				pla
.9da9	60		rts				rts
.9daa					CISSMemory:
.9daa	a9 06		lda #$06		lda	#6
.9dac	4c d5 94	jmp $94d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ac5a					AscUnary:
.ac5a	fa		plx				plx 								; restore stack pos
.ac5b	20 ec 9f	jsr $9fec			jsr 	EvaluateString 				; get a string
.ac5e	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ac60	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.ac63	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.ac66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ac67					FracUnary:
.ac67	fa		plx				plx 								; restore stack pos
.ac68	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber 				; get a float or int
.ac6b	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.ac6e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ac71	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ac73	f0 04		beq $ac79			beq 	_IUZero
.ac75	20 37 ab	jsr $ab37			jsr 	FloatFractionalPart
.ac78	60		rts				rts
.ac79					_IUZero:
.ac79	20 8d a0	jsr $a08d			jsr 	NSMSetZero
.ac7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ac7d					IntUnary:
.ac7d	fa		plx				plx 								; restore stack pos
.ac7e	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber 				; get a float or int
.ac81	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.ac84	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ac87	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ac89	f0 03		beq $ac8e			beq 	_IUExit
.ac8b	20 9a ab	jsr $ab9a			jsr 	FloatIntegerPart
.ac8e					_IUExit:
.ac8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ac8f					LenUnary:
.ac8f	fa		plx				plx 								; restore stack pos
.ac90	20 ec 9f	jsr $9fec			jsr 	EvaluateString 				; get a string
.ac93	5a		phy				phy
.ac94	a0 00		ldy #$00			ldy 	#0 							; find length
.ac96					_LenFind:
.ac96	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac98	f0 06		beq $aca0			beq 	_LenExit
.ac9a	c8		iny				iny
.ac9b	d0 f9		bne $ac96			bne 	_LenFind
.ac9d	4c 7d ae	jmp $ae7d			jmp 	RangeError 					; string > 255
.aca0					_LenExit:
.aca0	98		tya				tya
.aca1	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.aca4	7a		ply				ply
.aca5	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.aca8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9daf					Unary_Not:
.9daf	fa		plx				plx
.9db0	20 04 a0	jsr $a004			jsr 	EvaluateInteger 			; get integer
.9db3	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.9db6	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; zero mantissa ?
.9db9	f0 04		beq $9dbf			beq 	_NotZero
.9dbb	20 8d a0	jsr $a08d			jsr 	NSMSetZero
.9dbe	60		rts				rts
.9dbf					_NotZero:
.9dbf	4c 42 95	jmp $9542			jmp 	ReturnTrue
.9dc2					_UNBad:
.9dc2	4c 87 ae	jmp $ae87			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9dc5					Unary_Random:
.9dc5	fa		plx				plx
.9dc6	20 3e 9e	jsr $9e3e			jsr 	Random32Bit 				; get a random number
.9dc9	20 23 9e	jsr $9e23			jsr 	URCopyToMantissa  			; put in mantissa
.9dcc	e8		inx				inx
.9dcd	20 19 a0	jsr $a019			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9dd0	ca		dex				dex
.9dd1	20 16 a9	jsr $a916			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9dd4	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9dd7	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9dda	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.9ddd	60		rts				rts
.9dde					Unary_Rnd:
.9dde	fa		plx				plx
.9ddf	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber 				; number to use.
.9de2	20 92 a8	jsr $a892			jsr 	CheckRightBracket 			; closing bracket
.9de5	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9de8	f0 2b		beq $9e15			beq 	_URCopySeed
.9dea	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ded	10 23		bpl $9e12			bpl 	_URDontSeed
.9def	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9df2	49 17		eor #$17			eor 	#$17
.9df4	8d 88 04	sta $0488			sta 	RandomSeed+0
.9df7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dfa	49 a5		eor #$a5			eor 	#$A5
.9dfc	8d 89 04	sta $0489			sta 	RandomSeed+1
.9dff	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e02	49 c2		eor #$c2			eor 	#$C2
.9e04	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9e07	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e0a	49 9d		eor #$9d			eor 	#$9D
.9e0c	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9e0f	20 3e 9e	jsr $9e3e			jsr 	Random32Bit
.9e12					_URDontSeed:
.9e12	20 3e 9e	jsr $9e3e			jsr 	Random32Bit 				; generate a number.
.9e15					_URCopySeed:
.9e15	20 23 9e	jsr $9e23			jsr 	URCopyToMantissa 			; copy into mantissa
.9e18	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9e1a	8d 28 04	sta $0428			sta 	NSExponent
.9e1d	a9 08		lda #$08			lda 	#NSTFloat
.9e1f	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9e22	60		rts				rts
.9e23					URCopyToMantissa:
.9e23	ad 88 04	lda $0488			lda 	RandomSeed+0
.9e26	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e29	ad 89 04	lda $0489			lda 	RandomSeed+1
.9e2c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e2f	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9e32	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e35	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9e38	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9e3a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e3d	60		rts				rts
.9e3e					Random32Bit:
.9e3e	5a		phy				phy
.9e3f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9e41	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9e44	d0 03		bne $9e49			bne 	_Random1
.9e46	a8		tay				tay 								; if so do it 256 times
.9e47	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9e49					_Random1:
.9e49	0a		asl a				asl 	a 							; LSFR RNG
.9e4a	2e 89 04	rol $0489			rol 	RandomSeed+1
.9e4d	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9e50	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9e53	90 02		bcc $9e57			bcc 	_Random2
.9e55	49 c5		eor #$c5			eor 	#$C5
.9e57					_Random2:
.9e57	88		dey				dey
.9e58	d0 ef		bne $9e49			bne 	_Random1
.9e5a	8d 88 04	sta $0488			sta 	RandomSeed+0
.9e5d	7a		ply				ply
.9e5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.aca9					SgnUnary:
.aca9	fa		plx				plx 								; restore stack pos
.acaa	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber 				; get a float or int
.acad	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.acb0	20 bd a0	jsr $a0bd			jsr 	NSMIsZero 					; if zero
.acb3	f0 10		beq $acc5			beq 	_SGZero  					; return Int Zero
.acb5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.acb8	48		pha				pha
.acb9	a9 01		lda #$01			lda 	#1 							; set to 1
.acbb	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.acbe	68		pla				pla
.acbf	29 80		and #$80			and		#$80 						; copy the sign byte out
.acc1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.acc4	60		rts				rts
.acc5	20 8d a0	jsr $a08d	_SGZero:jsr 	NSMSetZero
.acc8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.acc9					ValUnary:
.acc9	fa		plx				plx 								; restore stack pos
.acca	20 df ac	jsr $acdf			jsr 	ValMainCode 				; do the main val() code
.accd	b0 01		bcs $acd0			bcs 	_VUError 					; couldn't convert
.accf	60		rts				rts
.acd0					_VUError:
.acd0	4c 82 ae	jmp $ae82			jmp 	TypeError
.acd3					IsValUnary:
.acd3	fa		plx				plx 								; restore stack pos
.acd4	20 df ac	jsr $acdf			jsr 	ValMainCode 				; do the main val() code
.acd7	b0 03		bcs $acdc			bcs 	_VUBad
.acd9	4c 42 95	jmp $9542			jmp 	ReturnTrue
.acdc					_VUBad:
.acdc	4c 4e 95	jmp $954e			jmp 	ReturnFalse
.acdf					ValMainCode:
.acdf	20 ec 9f	jsr $9fec			jsr 	EvaluateString 				; get a string
.ace2	20 92 a8	jsr $a892			jsr 	CheckRightBracket 			; check right bracket present
.ace5	5a		phy				phy
.ace6	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ace8	f0 17		beq $ad01			beq 	_VMCFail2
.acea	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.acec	48		pha				pha 								; save first character
.aced	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.acef	d0 01		bne $acf2			bne 	_VMCStart
.acf1	c8		iny				iny 								; skip over -
.acf2					_VMCStart:
.acf2	38		sec				sec 								; initialise first time round.
.acf3					_VMCNext:
.acf3	c8		iny				iny 								; pre-increment
.acf4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.acf6	f0 0c		beq $ad04			beq 	_VMCSuccess 				; successful.
.acf8	20 91 9a	jsr $9a91			jsr 	EncodeNumber 				; send it to the number-builder
.acfb	90 03		bcc $ad00			bcc 	_VMCFail 					; if failed, give up.
.acfd	18		clc				clc 								; next time round, countinue
.acfe	80 f3		bra $acf3			bra 	_VMCNext
.ad00					_VMCFail:
.ad00	68		pla				pla
.ad01					_VMCFail2:
.ad01	7a		ply				ply
.ad02	38		sec				sec
.ad03	60		rts				rts
.ad04					_VMCSuccess:
.ad04	a9 00		lda #$00			lda 	#0 							; construct final
.ad06	20 91 9a	jsr $9a91			jsr 	EncodeNumber
.ad09	68		pla				pla
.ad0a	c9 2d		cmp #$2d			cmp 	#"-"
.ad0c	d0 03		bne $ad11			bne 	_VMCNotNegative
.ad0e	20 39 a0	jsr $a039			jsr		NSMNegate
.ad11					_VMCNotNegative:
.ad11	7a		ply				ply
.ad12	18		clc				clc
.ad13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9e5f					ChrUnary:
.9e5f	fa		plx				plx 								; restore stack pos
.9e60	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger			; get value
.9e63	48		pha				pha
.9e64	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.9e67	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9e69	20 9f b1	jsr $b19f			jsr 	StringTempAllocate
.9e6c	68		pla				pla 								; write number to it
.9e6d	20 dd b1	jsr $b1dd			jsr 	StringTempWrite
.9e70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9e71					SpcUnary:
.9e71	fa		plx				plx 								; restore stack pos
.9e72	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger			; get value
.9e75	5a		phy				phy
.9e76	48		pha				pha 								; save count
.9e77	20 9f b1	jsr $b19f			jsr 	StringTempAllocate
.9e7a	7a		ply				ply 								; to do count in Y
.9e7b					_SpcLoop:
.9e7b	c0 00		cpy #$00			cpy 	#0
.9e7d	f0 08		beq $9e87			beq 	_SpcExit
.9e7f	a9 20		lda #$20			lda 	#32
.9e81	20 dd b1	jsr $b1dd			jsr 	StringTempWrite
.9e84	88		dey				dey
.9e85	80 f4		bra $9e7b			bra 	_SPCLoop
.9e87					_SpcExit:
.9e87	7a		ply				ply
.9e88	20 92 a8	jsr $a892			jsr 	CheckRightBracket
.9e8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e8c					Unary_Str:
.9e8c	fa		plx				plx
.9e8d	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber  			; get number
.9e90	20 92 a8	jsr $a892			jsr 	CheckRightBracket 			; closing bracket
.9e93	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e95	20 ae 9e	jsr $9eae			jsr 	ConvertNumberToString 		; do the conversion.
.9e98	a9 21		lda #$21			lda		#33 						; create buffer
.9e9a	20 9f b1	jsr $b19f			jsr 	StringTempAllocate 			; allocate memory
.9e9d	da		phx				phx
.9e9e	a2 00		ldx #$00			ldx 	#0
.9ea0					_USCopy:
.9ea0	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9ea3	20 dd b1	jsr $b1dd			jsr 	StringTempWrite
.9ea6	e8		inx				inx
.9ea7	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9eaa	d0 f4		bne $9ea0			bne 	_USCopy
.9eac	fa		plx				plx
.9ead	60		rts				rts
.9eae					ConvertNumberToString:
.9eae	5a		phy				phy 								; save code position
.9eaf	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9eb2	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9eb5	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9eb8	10 0a		bpl $9ec4			bpl 	_CNTSNotNegative
.9eba	29 7f		and #$7f			and 	#$7F 						; make +ve
.9ebc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ebf	a9 2d		lda #$2d			lda 	#"-"
.9ec1	20 2a 9f	jsr $9f2a			jsr 	WriteDecimalBuffer
.9ec4					_CNTSNotNegative:
.9ec4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9ec7	f0 15		beq $9ede			beq 	_CNTSNotFloat
.9ec9	e8		inx				inx 								; round up
.9eca	a9 01		lda #$01			lda 	#1
.9ecc	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.9ecf	ca		dex				dex
.9ed0	bd 28 04	lda $0428,x			lda		NSExponent,x
.9ed3	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9ed6	a9 08		lda #$08			lda 	#NSTFloat
.9ed8	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9edb	20 59 aa	jsr $aa59			jsr 	FloatAdd
.9ede					_CNTSNotFloat:
.9ede	20 0c 9f	jsr $9f0c			jsr 	MakePlusTwoString
.9ee1	20 37 ab	jsr $ab37			jsr 	FloatFractionalPart 		; get the fractional part
.9ee4	20 fb ab	jsr $abfb			jsr 	NSNormalise					; normalise , exit if zero
.9ee7	f0 21		beq $9f0a			beq 	_CNTSExit
.9ee9	a9 2e		lda #$2e			lda 	#"."
.9eeb	20 2a 9f	jsr $9f2a			jsr 	WriteDecimalBuffer 			; write decimal place
.9eee					_CNTSDecimal:
.9eee	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9ef1	30 17		bmi $9f0a			bmi 	_CNTSExit
.9ef3	e8		inx				inx 								; x 10.0
.9ef4	a9 0a		lda #$0a			lda 	#10
.9ef6	20 8f a0	jsr $a08f			jsr 	NSMSetByte
.9ef9	a9 08		lda #$08			lda 	#NSTFloat
.9efb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9efe	ca		dex				dex
.9eff	20 c4 ab	jsr $abc4			jsr 	FloatMultiply
.9f02	20 0c 9f	jsr $9f0c			jsr 	MakePlusTwoString
.9f05	20 37 ab	jsr $ab37			jsr 	FloatFractionalPart 		; get the fractional part
.9f08	80 e4		bra $9eee			bra 	_CNTSDecimal 				; keep going.
.9f0a					_CNTSExit:
.9f0a	7a		ply				ply
.9f0b	60		rts				rts
.9f0c					MakePlusTwoString:
.9f0c	da		phx				phx
.9f0d	20 64 a0	jsr $a064			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9f10	e8		inx				inx 								; access it
.9f11	e8		inx				inx
.9f12	20 9a ab	jsr $ab9a			jsr 	FloatIntegerPart 			; make it an integer
.9f15	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9f17	20 03 aa	jsr $aa03			jsr 	ConvertInt32
.9f1a	a2 00		ldx #$00			ldx	 	#0
.9f1c					_MPTSCopy:
.9f1c	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9f1f	20 2a 9f	jsr $9f2a			jsr 	WriteDecimalBuffer
.9f22	e8		inx				inx
.9f23	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9f26	d0 f4		bne $9f1c			bne 	_MPTSCopy
.9f28	fa		plx				plx
.9f29	60		rts				rts
.9f2a					WriteDecimalBuffer:
.9f2a	da		phx				phx
.9f2b	ae 95 04	ldx $0495			ldx 	dbOffset
.9f2e	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9f31	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9f34	ee 95 04	inc $0495			inc 	dbOffset
.9f37	fa		plx				plx
.9f38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9f39					Unary_Left:
.9f39	fa		plx				plx
.9f3a	18		clc				clc 								; only one parameter
.9f3b	20 b0 9f	jsr $9fb0			jsr 	SubstringInitial 			; set up.
.9f3e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9f41	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f44	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9f47	80 2c		bra $9f75			bra 	SubstringMain
.9f49					Unary_Right:
.9f49	fa		plx				plx
.9f4a	18		clc				clc 								; only one parameter
.9f4b	20 b0 9f	jsr $9fb0			jsr 	SubstringInitial 			; set up.
.9f4e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9f51	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f54	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9f57	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9f5a	b0 02		bcs $9f5e			bcs 	_URNotUnderflow
.9f5c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9f5e					_URNotUnderFlow:
.9f5e	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9f61	80 12		bra $9f75			bra 	SubStringMain
.9f63					Unary_Mid:
.9f63	fa		plx				plx
.9f64	38		sec				sec 								; two parameters
.9f65	20 b0 9f	jsr $9fb0			jsr 	SubstringInitial 			; set up.
.9f68	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9f6b	f0 05		beq $9f72			beq 	_UMError
.9f6d	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9f70	80 03		bra $9f75			bra 	SubStringMain
.9f72					_UMError:
.9f72	4c 87 ae	jmp $ae87			jmp 	ArgumentError
.9f75					SubStringMain:
.9f75	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f78	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9f7b	b0 2d		bcs $9faa			bcs 	_SSMNull 					; if so, return an empty string.
.9f7d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f80	f0 28		beq $9faa			beq 	_SSMNull 					; return empty string.
.9f82	18		clc				clc 								; add the offset +1 to the address and
.9f83	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9f86	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9f89	85 36		sta $36				sta 	zTemp0
.9f8b	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9f8e	69 00		adc #$00			adc 	#0
.9f90	85 37		sta $37				sta 	zTemp0+1
.9f92					_SSMNoCarry:
.9f92	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f95	20 9f b1	jsr $b19f			jsr 	StringTempAllocate 			; allocate that many characters
.9f98	5a		phy				phy 								; save Y
.9f99	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f9b					_SSMCopy:
.9f9b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f9d	f0 09		beq $9fa8			beq 	_SSMEString 				; no more to copy
.9f9f	20 dd b1	jsr $b1dd			jsr 	StringTempWrite 			; and write it out.
.9fa2	c8		iny				iny
.9fa3	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9fa6	d0 f3		bne $9f9b			bne 	_SSMCopy
.9fa8					_SSMEString:
.9fa8	7a		ply				ply
.9fa9					_SSMExit:
.9fa9	60		rts				rts
.9faa					_SSMNull:
.9faa	a9 00		lda #$00			lda 	#0
.9fac	20 9f b1	jsr $b19f			jsr 	StringTempAllocate
.9faf	60		rts				rts
.9fb0					SubstringInitial:
.9fb0	da		phx				phx 								; save initial stack position
.9fb1	08		php				php 								; save carry on stack indicating 2 parameters
.9fb2	20 ec 9f	jsr $9fec			jsr 	EvaluateString 				; get a string
.9fb5	5a		phy				phy 								; calculate length to exponent.
.9fb6	a0 ff		ldy #$ff			ldy 	#$FF
.9fb8					_SIFindLength:
.9fb8	c8		iny				iny
.9fb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fbb	d0 fb		bne $9fb8			bne 	_SIFindLength
.9fbd	98		tya				tya
.9fbe	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9fc1	7a		ply				ply
.9fc2	e8		inx				inx
.9fc3	20 9a a8	jsr $a89a			jsr 	CheckComma 					; comma next
.9fc6	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger 		; get next parameter
.9fc9	28		plp				plp 								; is it the last parameter ?
.9fca	90 07		bcc $9fd3			bcc 	_SSIExit 					; if so, exit.
.9fcc	e8		inx				inx
.9fcd	20 9a a8	jsr $a89a			jsr 	CheckComma 					; comma next
.9fd0	20 25 a0	jsr $a025			jsr 	Evaluate8BitInteger 		; get last parameter
.9fd3					_SSIExit:
.9fd3	fa		plx				plx
.9fd4	20 92 a8	jsr $a892			jsr 	CheckRightBracket 			; check closing bracket
.9fd7	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9fd8					EvaluateValue:
.9fd8	48		pha				pha
.9fd9	20 de 98	jsr $98de			jsr		EvaluateExpression 			; expression
.9fdc	20 f3 99	jsr $99f3			jsr 	Dereference					; derefernce it
.9fdf	68		pla				pla
.9fe0	60		rts				rts
.9fe1					EvaluateNumber:
.9fe1	20 d8 9f	jsr $9fd8			jsr 	EvaluateValue 				; get a value
.9fe4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9fe7	29 10		and #$10			and 	#NSBIsString
.9fe9	d0 16		bne $a001			bne 	HelperTypeError
.9feb	60		rts				rts
.9fec					EvaluateString:
.9fec	20 d8 9f	jsr $9fd8			jsr 	EvaluateValue 				; get a value
.9fef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9ff2	29 10		and #$10			and 	#NSBIsString
.9ff4	f0 0b		beq $a001			beq 	HelperTypeError
.9ff6					CopyAddressToTemp0:
.9ff6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9ff9	85 36		sta $36				sta 	zTemp0
.9ffb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ffe	85 37		sta $37				sta 	zTemp0+1
.a000	60		rts				rts
.a001					HelperTypeError:
.a001	4c 82 ae	jmp $ae82			jmp 	TypeError
.a004					EvaluateInteger:
.a004	20 e1 9f	jsr $9fe1			jsr 	EvaluateNumber
.a007	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a00a	d0 0a		bne $a016			bne 	HelperValueError 			; if not, it's a float.
.a00c	60		rts				rts
.a00d					EvaluateUnsignedInteger:
.a00d	20 04 a0	jsr $a004			jsr 	EvaluateInteger 			; check integer is +ve
.a010	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a013	30 01		bmi $a016			bmi 	HelperValueError
.a015	60		rts				rts
.a016					HelperValueError:
.a016	4c 87 ae	jmp $ae87			jmp 	ArgumentError
.a019					Evaluate16BitInteger:
.a019	20 0d a0	jsr $a00d			jsr	 	EvaluateUnsignedInteger		; get integer
.a01c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a01f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a022	d0 f2		bne $a016			bne 	HelperValueError
.a024	60		rts				rts
.a025					Evaluate8BitInteger:
.a025	20 0d a0	jsr $a00d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a028	d0 ec		bne $a016			bne 	HelperValueError
.a02a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a02d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a030	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a033	d0 e1		bne $a016			bne 	HelperValueError
.a035	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a038	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ad14					Multiply8x8:
.ad14	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ad15	85 36		sta $36			  	sta 	zTemp0
.ad17	86 37		stx $37				stx 	zTemp0+1
.ad19	a9 00		lda #$00			lda 	#0
.ad1b	a2 08		ldx #$08			ldx 	#8
.ad1d					_M88Loop:
.ad1d	90 03		bcc $ad22			bcc 	_M88NoAdd
.ad1f	18		clc				clc
.ad20	65 37		adc $37				adc 	zTemp0+1
.ad22					_M88NoAdd:
.ad22	6a		ror a				ror 	a
.ad23	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ad25	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ad26	d0 f5		bne $ad1d			bne 	_M88Loop
.ad28	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ad2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a039					NSMNegate:
.a039	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a03c	49 80		eor #$80			eor 	#NSBIsNegative
.a03e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a041	60		rts				rts
.a042					NSMNegateMantissa:
.a042	38		sec				sec
.a043	a9 00		lda #$00			lda 	#0
.a045	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a048	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a04b	a9 00		lda #$00			lda 	#0
.a04d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a050	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a053	a9 00		lda #$00			lda 	#0
.a055	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a058	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a05b	a9 00		lda #$00			lda 	#0
.a05d	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a060	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a063	60		rts				rts
.a064					NSMShiftUpTwo:
.a064	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a067	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a06a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a06d	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a070	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a073	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a076	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a079	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a07c	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a07f	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a082	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a085	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a088	60		rts				rts
.a089					NSMSetZeroMantissaOnly:
.a089	a9 00		lda #$00			lda 	#0
.a08b	80 08		bra $a095			bra 	NSMSetMantissa
.a08d					NSMSetZero:
.a08d	a9 00		lda #$00			lda 	#0
.a08f					NSMSetByte:
.a08f	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a092	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a095					NSMSetMantissa:
.a095	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a098	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a09b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a09e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0a1	60		rts				rts
.a0a2					NSMShiftLeft:
.a0a2	18		clc				clc
.a0a3					NSMRotateLeft:
.a0a3	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a0a6	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a0a9	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a0ac	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a0af	60		rts				rts
.a0b0					NSMShiftRight:
.a0b0	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a0b3	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a0b6	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a0b9	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a0bc	60		rts				rts
.a0bd					NSMIsZero:
.a0bd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a0c0	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a0c3	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a0c6	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a0c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ad2b					Assemble_ora:
.ad2b	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad2e	01					.byte $01
.ad2f					Assemble_and:
.ad2f	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad32	21					.byte $21
.ad33					Assemble_eor:
.ad33	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad36	41					.byte $41
.ad37					Assemble_adc:
.ad37	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad3a	61					.byte $61
.ad3b					Assemble_sta:
.ad3b	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad3e	81					.byte $81
.ad3f					Assemble_lda:
.ad3f	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad42	a1					.byte $a1
.ad43					Assemble_cmp:
.ad43	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad46	c1					.byte $c1
.ad47					Assemble_sbc:
.ad47	20 da 87	jsr $87da		jsr	AssembleGroup1
>ad4a	e1					.byte $e1
.ad4b					Assemble_asl:
.ad4b	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad4e	02					.byte $02
>ad4f	75					.byte $75
.ad50					Assemble_rol:
.ad50	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad53	22					.byte $22
>ad54	75					.byte $75
.ad55					Assemble_lsr:
.ad55	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad58	42					.byte $42
>ad59	75					.byte $75
.ad5a					Assemble_ror:
.ad5a	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad5d	62					.byte $62
>ad5e	75					.byte $75
.ad5f					Assemble_stx:
.ad5f	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad62	82					.byte $82
>ad63	50					.byte $50
.ad64					Assemble_ldx:
.ad64	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad67	a2					.byte $a2
>ad68	d0					.byte $d0
.ad69					Assemble_dec:
.ad69	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad6c	c2					.byte $c2
>ad6d	55					.byte $55
.ad6e					Assemble_inc:
.ad6e	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad71	e2					.byte $e2
>ad72	55					.byte $55
.ad73					Assemble_stz:
.ad73	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad76	60					.byte $60
>ad77	44					.byte $44
.ad78					Assemble_bit:
.ad78	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad7b	20					.byte $20
>ad7c	55					.byte $55
.ad7d					Assemble_sty:
.ad7d	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad80	80					.byte $80
>ad81	54					.byte $54
.ad82					Assemble_ldy:
.ad82	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad85	a0					.byte $a0
>ad86	d5					.byte $d5
.ad87					Assemble_cpy:
.ad87	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad8a	c0					.byte $c0
>ad8b	d4					.byte $d4
.ad8c					Assemble_cpx:
.ad8c	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad8f	e0					.byte $e0
>ad90	d0					.byte $d0
.ad91					Assemble_tsb:
.ad91	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad94	00					.byte $00
>ad95	50					.byte $50
.ad96					Assemble_trb:
.ad96	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad99	10					.byte $10
>ad9a	50					.byte $50
.ad9b					Assemble_jsr:
.ad9b	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ad9e	14					.byte $14
>ad9f	10					.byte $10
.ada0					Assemble_jmp:
.ada0	20 e1 87	jsr $87e1		jsr	AssembleGroup2
>ada3	40					.byte $40
>ada4	10					.byte $10
.ada5					Assemble_bpl:
.ada5	20 32 88	jsr $8832		jsr	AssembleGroup3
>ada8	10					.byte $10
.ada9					Assemble_bmi:
.ada9	20 32 88	jsr $8832		jsr	AssembleGroup3
>adac	30					.byte $30
.adad					Assemble_bvc:
.adad	20 32 88	jsr $8832		jsr	AssembleGroup3
>adb0	50					.byte $50
.adb1					Assemble_bvs:
.adb1	20 32 88	jsr $8832		jsr	AssembleGroup3
>adb4	70					.byte $70
.adb5					Assemble_bcc:
.adb5	20 32 88	jsr $8832		jsr	AssembleGroup3
>adb8	90					.byte $90
.adb9					Assemble_bcs:
.adb9	20 32 88	jsr $8832		jsr	AssembleGroup3
>adbc	b0					.byte $b0
.adbd					Assemble_bne:
.adbd	20 32 88	jsr $8832		jsr	AssembleGroup3
>adc0	d0					.byte $d0
.adc1					Assemble_beq:
.adc1	20 32 88	jsr $8832		jsr	AssembleGroup3
>adc4	f0					.byte $f0
.adc5					Assemble_bra:
.adc5	20 32 88	jsr $8832		jsr	AssembleGroup3
>adc8	80					.byte $80
.adc9					Assemble_brk:
.adc9	20 68 88	jsr $8868		jsr	AssembleGroup4
>adcc	00					.byte $00
.adcd					Assemble_php:
.adcd	20 68 88	jsr $8868		jsr	AssembleGroup4
>add0	08					.byte $08
.add1					Assemble_clc:
.add1	20 68 88	jsr $8868		jsr	AssembleGroup4
>add4	18					.byte $18
.add5					Assemble_plp:
.add5	20 68 88	jsr $8868		jsr	AssembleGroup4
>add8	28					.byte $28
.add9					Assemble_sec:
.add9	20 68 88	jsr $8868		jsr	AssembleGroup4
>addc	38					.byte $38
.addd					Assemble_rti:
.addd	20 68 88	jsr $8868		jsr	AssembleGroup4
>ade0	40					.byte $40
.ade1					Assemble_pha:
.ade1	20 68 88	jsr $8868		jsr	AssembleGroup4
>ade4	48					.byte $48
.ade5					Assemble_cli:
.ade5	20 68 88	jsr $8868		jsr	AssembleGroup4
>ade8	58					.byte $58
.ade9					Assemble_phy:
.ade9	20 68 88	jsr $8868		jsr	AssembleGroup4
>adec	5a					.byte $5a
.aded					Assemble_rts:
.aded	20 68 88	jsr $8868		jsr	AssembleGroup4
>adf0	60					.byte $60
.adf1					Assemble_pla:
.adf1	20 68 88	jsr $8868		jsr	AssembleGroup4
>adf4	68					.byte $68
.adf5					Assemble_sei:
.adf5	20 68 88	jsr $8868		jsr	AssembleGroup4
>adf8	78					.byte $78
.adf9					Assemble_ply:
.adf9	20 68 88	jsr $8868		jsr	AssembleGroup4
>adfc	7a					.byte $7a
.adfd					Assemble_dey:
.adfd	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae00	88					.byte $88
.ae01					Assemble_txa:
.ae01	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae04	8a					.byte $8a
.ae05					Assemble_tya:
.ae05	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae08	98					.byte $98
.ae09					Assemble_txs:
.ae09	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae0c	9a					.byte $9a
.ae0d					Assemble_tay:
.ae0d	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae10	a8					.byte $a8
.ae11					Assemble_tax:
.ae11	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae14	aa					.byte $aa
.ae15					Assemble_clv:
.ae15	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae18	b8					.byte $b8
.ae19					Assemble_tsx:
.ae19	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae1c	ba					.byte $ba
.ae1d					Assemble_iny:
.ae1d	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae20	c8					.byte $c8
.ae21					Assemble_dex:
.ae21	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae24	ca					.byte $ca
.ae25					Assemble_cld:
.ae25	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae28	d8					.byte $d8
.ae29					Assemble_phx:
.ae29	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae2c	da					.byte $da
.ae2d					Assemble_stp:
.ae2d	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae30	db					.byte $db
.ae31					Assemble_inx:
.ae31	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae34	e8					.byte $e8
.ae35					Assemble_nop:
.ae35	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae38	ea					.byte $ea
.ae39					Assemble_sed:
.ae39	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae3c	f8					.byte $f8
.ae3d					Assemble_plx:
.ae3d	20 68 88	jsr $8868		jsr	AssembleGroup4
>ae40	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ae41					DecimalScalarTable:
>ae41	66 66 66 66				.dword $66666666 ; 0.1
>ae45	de					.byte $de
>ae46	1f 85 eb 51				.dword $51eb851f ; 0.01
>ae4a	db					.byte $db
>ae4b	4c 37 89 41				.dword $4189374c ; 0.001
>ae4f	d8					.byte $d8
>ae50	ac 8b db 68				.dword $68db8bac ; 0.0001
>ae54	d4					.byte $d4
>ae55	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ae59	d1					.byte $d1
>ae5a	83 de 1b 43				.dword $431bde83 ; 1e-06
>ae5e	ce					.byte $ce
>ae5f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ae63	ca					.byte $ca
>ae64	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ae68	c7					.byte $c7
>ae69	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ae6d	c4					.byte $c4
>ae6e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ae72	c0					.byte $c0
>ae73	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ae77	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ae78					SyntaxError:
.ae78	a9 02		lda #$02		lda	#2
.ae7a	4c d5 94	jmp $94d5		jmp	ErrorHandler
.ae7d					RangeError:
.ae7d	a9 04		lda #$04		lda	#4
.ae7f	4c d5 94	jmp $94d5		jmp	ErrorHandler
.ae82					TypeError:
.ae82	a9 05		lda #$05		lda	#5
.ae84	4c d5 94	jmp $94d5		jmp	ErrorHandler
.ae87					ArgumentError:
.ae87	a9 07		lda #$07		lda	#7
.ae89	4c d5 94	jmp $94d5		jmp	ErrorHandler
.ae8c					NotDoneError:
.ae8c	a9 0c		lda #$0c		lda	#12
.ae8e	4c d5 94	jmp $94d5		jmp	ErrorHandler
.ae91					ErrorText:
>ae91	42 72 65 61 6b 00			.text	"Break",0
>ae97	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ae9f	72 72 6f 72 00
>aea4	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aeac	20 62 79 20 7a 65 72 6f 00
>aeb5	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aebd	61 6e 67 65 00
>aec2	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aeca	6d 61 74 63 68 00
>aed0	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aed8	65 6d 6f 72 79 00
>aede	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>aee6	61 72 67 75 6d 65 6e 74 00
>aeef	53 74 6f 70 00				.text	"Stop",0
>aef4	53 74 72 69 6e 67 20 74			.text	"String too long",0
>aefc	6f 6f 20 6c 6f 6e 67 00
>af04	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>af0c	6e 20 66 61 69 6c 65 64 00
>af15	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>af1d	61 74 61 00
>af21	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>af29	65 6e 74 65 64 00
>af2f	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>af37	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>af43	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>af4b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>af58	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>af60	74 68 6f 75 74 20 52 65 70 65 61 74 00
>af6d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>af75	68 6f 75 74 20 57 68 69 6c 65 00
>af80	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>af88	68 6f 75 74 20 46 6f 72 00
>af91	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>af99	61 63 6b 20 66 75 6c 6c 00
>afa2	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>afaa	75 63 74 75 72 65 00
>afb1	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>afb9	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>afc6	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>afce	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>afdc	41 72 72 61 79 20 73 69			.text	"Array size",0
>afe4	7a 65 00
>afe7	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>afef	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aff7	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1349."
>afff	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>b00f	32 2e 20 42 75 69 6c 64 20 31 33 34 39 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b01d					EXTPrintCharacter:
.b01d	48		pha				pha
.b01e	da		phx				phx
.b01f	5a		phy				phy
.b020	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b023	7a		ply				ply
.b024	fa		plx				plx
.b025	68		pla				pla
.b026	60		rts				rts
.b027					EXTInputSingleCharacter:
.b027	da		phx				phx
.b028	5a		phy				phy
.b029					_EISCWait:
.b029	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b02c	c9 00		cmp #$00			cmp 	#0
.b02e	f0 f9		beq $b029			beq 	_EISCWait
.b030	7a		ply				ply
.b031	fa		plx				plx
.b032	60		rts				rts
.b033					EXTInputLine:
.b033	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b035					_ILLoop:
.b035	da		phx				phx 								; read character in
.b036	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b039	fa		plx				plx
.b03a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b03c	f0 12		beq $b050			beq 	_ILBackspace
.b03e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b040	f0 15		beq $b057			beq 	_ILExit
.b042	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b044	90 ef		bcc $b035			bcc 	_ILLoop
.b046	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b048	f0 eb		beq $b035			beq 	_ILLoop
.b04a	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b04d	e8		inx				inx
.b04e	80 e5		bra $b035			bra 	_ILLoop
.b050					_ILBackspace:
.b050	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b052	f0 e1		beq $b035			beq 	_ILLoop
.b054	ca		dex				dex 								; back one.
.b055	80 de		bra $b035			bra 	_ILLoop
.b057					_ILExit:
.b057	20 1d b0	jsr $b01d			jsr 	EXTPrintCharacter
.b05a	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b05d	60		rts				rts
.b05e					EXTBreakCheck:
.b05e	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b061					MemoryDeleteLine:
.b061	20 80 b0	jsr $b080			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b064	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b066	a8		tay				tay
.b067					_MDDLLoop:
.b067	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b069	92 30		sta ($30)			sta 	(codePtr)
.b06b	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b06d	c5 3a		cmp $3a				cmp 	zTemp2
.b06f	d0 07		bne $b078			bne 	_MDLDLNext
.b071	a5 31		lda $31				lda 	codePtr+1
.b073	c5 3b		cmp $3b				cmp 	zTemp2+1
.b075	d0 01		bne $b078			bne 	_MDLDLNext
.b077					_MDDLExit:
.b077	60		rts				rts
.b078					_MDLDLNext:
.b078	e6 30		inc $30				inc 	codePtr						; next byte
.b07a	d0 eb		bne $b067			bne 	_MDDLLoop
.b07c	e6 31		inc $31				inc 	codePtr+1
.b07e	80 e7		bra $b067			bra 	_MDDLLoop
.b080					IMemoryFindEnd:
.b080	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b082	85 3a		sta $3a				sta 	0+zTemp2
.b084	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b086	85 3b		sta $3b				sta 	1+zTemp2
.b088					_MDLFELoop:
.b088	b2 3a		lda ($3a)			lda 	(zTemp2)
.b08a	f0 0b		beq $b097			beq 	_MDLFEExit
.b08c	18		clc				clc
.b08d	65 3a		adc $3a				adc 	zTemp2
.b08f	85 3a		sta $3a				sta 	zTemp2
.b091	90 f5		bcc $b088			bcc 	_MDLFELoop
.b093	e6 3b		inc $3b				inc 	zTemp2+1
.b095	80 f1		bra $b088			bra 	_MDLFELoop
.b097					_MDLFEExit:
.b097	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b098					MemoryInsertLine:
.b098	08		php				php
.b099	20 80 b0	jsr $b080			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b09c	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b09e	1a		inc a				inc 	a
.b09f	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b0a1	b0 36		bcs $b0d9			bcs 	_MDLIError
.b0a3	28		plp				plp
.b0a4	90 08		bcc $b0ae			bcc 	_MDLIFound
.b0a6	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b0a8	85 30		sta $30				sta 	codePtr
.b0aa	a5 3b		lda $3b				lda 	zTemp2+1
.b0ac	85 31		sta $31				sta 	codePtr+1
.b0ae					_MDLIFound:
.b0ae	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b0b1	a8		tay				tay
.b0b2					_MDLIInsert:
.b0b2	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b0b4	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b0b6	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b0b8	c5 3a		cmp $3a				cmp 	zTemp2
.b0ba	d0 06		bne $b0c2			bne 	_MDLINext
.b0bc	a5 31		lda $31				lda 	codePtr+1
.b0be	c5 3b		cmp $3b				cmp 	zTemp2+1
.b0c0	f0 0a		beq $b0cc			beq 	_MDLIHaveSpace
.b0c2					_MDLINext:
.b0c2	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b0c4	d0 02		bne $b0c8			bne 	_MDLINoBorrow
.b0c6	c6 3b		dec $3b				dec 	zTemp2+1
.b0c8					_MDLINoBorrow:
.b0c8	c6 3a		dec $3a				dec 	zTemp2
.b0ca	80 e6		bra $b0b2			bra 	_MDLIInsert
.b0cc					_MDLIHaveSpace:
.b0cc	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b0cf	88		dey				dey 								; from offset-1 to 0
.b0d0					_MDLICopy:
.b0d0	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b0d3	91 30		sta ($30),y			sta 	(codePtr),y
.b0d5	88		dey				dey
.b0d6	10 f8		bpl $b0d0			bpl 	_MDLICopy
.b0d8	60		rts				rts
.b0d9					_MDLIError:
.b0d9	a9 06		lda #$06		lda	#6
.b0db	4c d5 94	jmp $94d5		jmp	ErrorHandler
.b0de					MDLAppendLine:
.b0de	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b0e0	85 36		sta $36				sta 	zTemp0
.b0e2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b0e4	85 38		sta $38				sta 	0+zTemp1
.b0e6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b0e8	85 39		sta $39				sta 	1+zTemp1
.b0ea	b2 38		lda ($38)			lda 	(zTemp1)
.b0ec	d0 0a		bne $b0f8			bne 	_MDLANoInitialise
.b0ee	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b0f0	8d 5d 06	sta $065d			sta 	0+AppendPointer
.b0f3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b0f5	8d 5e 06	sta $065e			sta 	1+AppendPointer
.b0f8					_MDLANoInitialise:
.b0f8	18		clc				clc
.b0f9	ad 5d 06	lda $065d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b0fc	85 38		sta $38				sta 	zTemp1
.b0fe	72 36		adc ($36)			adc 	(zTemp0)
.b100	8d 5d 06	sta $065d			sta 	AppendPointer
.b103	ad 5e 06	lda $065e			lda 	AppendPointer+1
.b106	85 39		sta $39				sta 	zTemp1+1
.b108	69 00		adc #$00			adc 	#0
.b10a	8d 5e 06	sta $065e			sta 	AppendPointer+1
.b10d	a0 00		ldy #$00			ldy 	#0
.b10f					_MDLACopy:
.b10f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b111	91 38		sta ($38),y			sta 	(zTemp1),y
.b113	c8		iny				iny
.b114	98		tya				tya
.b115	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b117	d0 f6		bne $b10f			bne 	_MDLACopy
.b119	a9 00		lda #$00			lda 	#0 							; end of program.
.b11b	91 38		sta ($38),y			sta 	(zTemp1),y
.b11d	60		rts				rts
.065d					AppendPointer:
>065d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a0ca					MemoryNew:
.a0ca	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a0cc	85 30		sta $30				sta 	codePtr
.a0ce	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a0d0	85 31		sta $31				sta 	codePtr+1
.a0d2	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a0d4	92 30		sta ($30)			sta 	(codePtr)
.a0d6	60		rts				rts
.a0d7					MemoryInline:
.a0d7	98		tya				tya 								; put address into stack,x
.a0d8	18		clc				clc
.a0d9	65 30		adc $30				adc 	codePtr
.a0db	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0de	a5 31		lda $31				lda 	codePtr+1
.a0e0	69 00		adc #$00			adc 	#0
.a0e2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0e5	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0e8	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a0ec					MemorySearch:
.a0ec	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a0ee	86 37		stx $37				stx 	zTemp0+1
.a0f0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a0f2	85 30		sta $30				sta 	codePtr
.a0f4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a0f6	85 31		sta $31				sta 	codePtr+1
.a0f8					_MTAXLoop:
.a0f8	b2 30		lda ($30)			lda 	(codePtr)
.a0fa	18		clc				clc
.a0fb	f0 21		beq $a11e			beq 	_MTAXExit 					; reached end, exit with CC.
.a0fd	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a0ff	b1 30		lda ($30),y			lda 	(codePtr),y
.a101	38		sec				sec
.a102	e5 36		sbc $36				sbc 	zTemp0
.a104	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a106	c8		iny				iny 								; do the MSB
.a107	b1 30		lda ($30),y			lda 	(codePtr),y
.a109	e5 37		sbc $37				sbc 	zTemp0+1
.a10b	05 38		ora $38				ora 	zTemp1
.a10d	f0 0f		beq $a11e			beq 	_MTAXExit	 				; found
.a10f	b0 0d		bcs $a11e			bcs 	_MTAXExit 					; current < required exit
.a111	18		clc				clc
.a112	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a114	65 30		adc $30				adc 	codePtr
.a116	85 30		sta $30				sta 	codePtr
.a118	90 02		bcc $a11c			bcc 	_CREExit
.a11a	e6 31		inc $31				inc 	codePtr+1
.a11c					_CREExit:
.a11c	80 da		bra $a0f8			bra 	_MTAXLoop
.a11e					_MTAXExit:
.a11e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a11f					StackPushByte:
.a11f	48		pha				pha 								; save byte
.a120	a5 34		lda $34				lda 	BasicStack
.a122	d0 09		bne $a12d			bne 	_SPBNoBorrow
.a124	c6 35		dec $35				dec 	BasicStack+1
.a126	48		pha				pha
.a127	a5 35		lda $35				lda 	BasicStack+1
.a129	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a12b	90 06		bcc $a133			bcc 	_SPBMemory
.a12d					_SPBNoBorrow:
.a12d	c6 34		dec $34				dec 	BasicStack
.a12f	68		pla				pla 								; get back and write
.a130	92 34		sta ($34)			sta 	(BasicStack)
.a132	60		rts				rts
.a133					_SPBMemory:
.a133	a9 12		lda #$12		lda	#18
.a135	4c d5 94	jmp $94d5		jmp	ErrorHandler
.a138					StackPopByte:
.a138	b2 34		lda ($34)			lda 	(BasicStack)
.a13a	e6 34		inc $34				inc 	BasicStack
.a13c	d0 02		bne $a140			bne 	_SPBNoCarry
.a13e	e6 35		inc $35				inc 	BasicStack+1
.a140					_SPBNoCarry:
.a140	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a141					StackOpen:
.a141	48		pha				pha 								; save frame byte
.a142	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a144	0a		asl a				asl 	a 							; claim twice this for storage
.a145	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a147	38		sec				sec 								; so basically subtracting from
.a148	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a14a	85 34		sta $34				sta 	basicStack
.a14c	b0 08		bcs $a156			bcs 	_SONoBorrow
.a14e	c6 35		dec $35				dec 	basicStack+1
.a150	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a152	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a154	90 04		bcc $a15a			bcc 	_SOMemory
.a156					_SONoBorrow:
.a156	68		pla				pla 								; get marker back and write at TOS
.a157	92 34		sta ($34)			sta 	(basicStack)
.a159	60		rts				rts
.a15a					_SOMemory:
.a15a	a9 12		lda #$12		lda	#18
.a15c	4c d5 94	jmp $94d5		jmp	ErrorHandler
.a15f					StackClose:
.a15f	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a161	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a163	0a		asl a				asl 	a 							; claim twice this.
.a164	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a166	85 34		sta $34				sta 	basicStack
.a168	90 02		bcc $a16c			bcc 	_SCExit
.a16a	e6 35		inc $35				inc 	basicStack+1
.a16c					_SCExit:
.a16c	60		rts				rts
.a16d					StackCheckFrame:
.a16d	48		pha				pha
.a16e					_StackRemoveLocals:
.a16e	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a170	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a172	b0 05		bcs $a179			bcs 	_SCNoLocal
.a174	20 39 a8	jsr $a839			jsr 	LocalPopValue
.a177	80 f5		bra $a16e			bra 	_StackRemoveLocals
.a179					_SCNoLocal:
.a179	68		pla				pla
.a17a	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a17c	29 f0		and #$f0			and 	#$F0 						; check type bits
.a17e	d0 01		bne $a181			bne 	_SCFError 					; different, we have structures mixed up
.a180	60		rts				rts
.a181					_SCFError:
.a181	8a		txa				txa 								; report error X
.a182	4c d5 94	jmp $94d5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a185					STKSaveCodePosition:
.a185	5a		phy				phy
.a186	98		tya				tya 								; save Y
.a187	a0 05		ldy #$05			ldy 	#5
.a189	91 34		sta ($34),y			sta 	(basicStack),y
.a18b	88		dey				dey 								; save Code Pointer
.a18c					_STKSaveLoop:
.a18c	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a18f	91 34		sta ($34),y			sta 	(basicStack),y
.a191	88		dey				dey
.a192	d0 f8		bne $a18c			bne 	_STKSaveLoop
.a194	7a		ply				ply
.a195	60		rts				rts
.a196					STKLoadCodePosition:
.a196	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a198					_STKLoadLoop:
.a198	b1 34		lda ($34),y			lda 	(basicStack),y
.a19a	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a19d	c8		iny				iny
.a19e	c0 05		cpy #$05			cpy 	#5
.a1a0	d0 f6		bne $a198			bne 	_STKLoadLoop
.a1a2	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a1a4	a8		tay				tay
.a1a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a1a6					StackReset:
.a1a6	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a1a8	85 34		sta $34				sta 	0+basicStack
.a1aa	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a1ac	85 35		sta $35				sta 	1+basicStack
.a1ae	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a1b0	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a1b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b11e					StringConcrete:
.b11e	5a		phy				phy 								; save position on stack
.b11f	20 9c 9d	jsr $9d9c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b122	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b125	85 38		sta $38				sta 	zTemp1
.b127	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b12a	85 39		sta $39				sta 	zTemp1+1
.b12c	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b12e					_SALength:
.b12e	c8		iny				iny
.b12f	b1 38		lda ($38),y			lda 	(zTemp1),y
.b131	d0 fb		bne $b12e			bne 	_SALength
.b133	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b135	b0 3f		bcs $b176			bcs 	_SALengthError
.b137	98		tya				tya 				 				; length of the new string
.b138	18		clc				clc
.b139	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b13b	90 02		bcc $b13f			bcc 	_SAHaveLength
.b13d	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b13f					_SAHaveLength:
.b13f	48		pha				pha 								; save length.
.b140	38		sec				sec
.b141	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b143	6d 8e 04	adc $048e			adc 	StringMemory
.b146	8d 8e 04	sta $048e			sta 	StringMemory
.b149	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b14b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b14e	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b150	6d 8f 04	adc $048f			adc 	StringMemory+1
.b153	8d 8f 04	sta $048f			sta 	StringMemory+1
.b156	85 3b		sta $3b				sta 	zTemp2+1
.b158	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b15b	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b15c	38		sec				sec
.b15d	e9 03		sbc #$03			sbc 	#3
.b15f	92 3a		sta ($3a)			sta 	(zTemp2)
.b161	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b163	a0 01		ldy #$01			ldy 	#1
.b165	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b167					_SACopyNewString:
.b167	a0 00		ldy #$00			ldy 	#0
.b169					_SACopyNSLoop:
.b169	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b16b	c8		iny				iny 								; write two on in string storage
.b16c	c8		iny				iny
.b16d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b16f	88		dey				dey 								; this makes it one one.
.b170	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b172	d0 f5		bne $b169			bne 	_SACopyNSLoop
.b174	7a		ply				ply
.b175	60		rts				rts
.b176					_SALengthError:
.b176	a9 09		lda #$09		lda	#9
.b178	4c d5 94	jmp $94d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b17b					StringSystemInitialise:
.b17b	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b17d	8d 8e 04	sta $048e			sta 	0+StringMemory
.b180	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b182	8d 8f 04	sta $048f			sta 	1+StringMemory
.b185	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b188	60		rts				rts
.b189					StringSpaceInitialise:
.b189	20 9c 9d	jsr $9d9c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b18c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b18e	8d 90 04	sta $0490			sta 	StringInitialised
.b191	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b194	8d 91 04	sta $0491			sta 	StringTempPointer
.b197	ad 8f 04	lda $048f			lda 	StringMemory+1
.b19a	3a		dec a				dec 	a
.b19b	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b19e	60		rts				rts
.b19f					StringTempAllocate:
.b19f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b1a1	b0 35		bcs $b1d8			bcs 	_STALength
.b1a3	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b1a6	30 05		bmi $b1ad			bmi 	_STAAllocate
.b1a8	48		pha				pha 								; save value to subtract.
.b1a9	20 89 b1	jsr $b189			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b1ac	68		pla				pla 								; restore it
.b1ad					_STAAllocate:
.b1ad	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b1af	18		clc				clc  								; deliberate allows one more
.b1b0	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b1b3	8d 91 04	sta $0491			sta 	StringTempPointer
.b1b6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b1b9	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b1bb	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b1be	69 ff		adc #$ff			adc 	#$FF
.b1c0	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b1c3	85 3d		sta $3d				sta 	zsTemp+1
.b1c5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b1c8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b1cb	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b1ce	a9 10		lda #$10			lda 	#NSTString
.b1d0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1d3	a9 00		lda #$00			lda 	#0 							; clear the target string
.b1d5	92 3c		sta ($3c)			sta 	(zsTemp)
.b1d7	60		rts				rts
.b1d8					_STALength:
.b1d8	a9 09		lda #$09		lda	#9
.b1da	4c d5 94	jmp $94d5		jmp	ErrorHandler
.b1dd					StringTempWrite:
.b1dd	48		pha				pha
.b1de	92 3c		sta ($3c)			sta 	(zsTemp)
.b1e0	e6 3c		inc $3c				inc 	zsTemp
.b1e2	d0 02		bne $b1e6			bne 	_STWNoCarry
.b1e4	e6 3d		inc $3d				inc 	zsTemp+1
.b1e6					_STWNoCarry:
.b1e6	a9 00		lda #$00			lda 	#0
.b1e8	92 3c		sta ($3c)			sta 	(zsTemp)
.b1ea	68		pla				pla
.b1eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a1b3					BackloadProgram:
.a1b3	a2 ff		ldx #$ff			ldx 	#$FF
.a1b5	20 dd a1	jsr $a1dd			jsr 	BLReadByte
.a1b8	30 1f		bmi $a1d9			bmi 	_BPExit
.a1ba					_BPCopy:
.a1ba	e8		inx				inx  								; copy byte in
.a1bb	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a1be	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a1c1	20 dd a1	jsr $a1dd			jsr 	BLReadByte 					; read next byte
.a1c4	30 0a		bmi $a1d0			bmi 	_BPEndLine 					; -ve = EOL
.a1c6	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a1c8	d0 02		bne $a1cc			bne 	_BPNotTab
.a1ca	a9 20		lda #$20			lda 	#' '
.a1cc					_BPNotTab:
.a1cc	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a1ce	b0 ea		bcs $a1ba			bcs 	_BPCopy
.a1d0					_BPEndLine:
.a1d0	20 8a a5	jsr $a58a			jsr 	TokeniseLine 				; tokenise the line.
.a1d3	38		sec				sec 								; append not insert
.a1d4	20 98 b0	jsr $b098			jsr 	MemoryInsertLine 			; append to current program
.a1d7	80 da		bra $a1b3			bra 	BackloadProgram
.a1d9					_BPExit:
.a1d9	20 e0 8a	jsr $8ae0			jsr 	ClearCommand 				; clear variables etc.
.a1dc	60		rts				rts
.a1dd					BLReadByte:
.a1dd					_BLLoad:
.a1dd	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a1e0	ee de a1	inc $a1de			inc 	_BLLoad+1
.a1e3	d0 03		bne $a1e8			bne 	_BLNoCarry
.a1e5	ee df a1	inc $a1df			inc 	_BLLoad+2
.a1e8					_BLNoCarry:
.a1e8	c9 00		cmp #$00			cmp 	#0
.a1ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a1eb					TokeniseSearchTable:
.a1eb	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a1ed	85 36		sta $36				sta 	zTemp0
.a1ef	a0 00		ldy #$00			ldy 	#0
.a1f1	a9 80		lda #$80			lda 	#$80 						; token #
.a1f3	85 38		sta $38				sta 	zTemp1
.a1f5					_TSTLoop:
.a1f5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a1f7	30 49		bmi $a242			bmi 	_TSTFail 					; -ve = end of table
.a1f9	f0 2e		beq $a229			beq 	_TSTNext 					; zero, check next it's a dummy
.a1fb	c8		iny				iny 								; get the hash
.a1fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.a1fe	88		dey				dey
.a1ff	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a202	d0 25		bne $a229			bne 	_TSTNext
.a204	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a207	38		sec				sec
.a208	ed 80 04	sbc $0480			sbc 	identStart
.a20b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a20d	d0 1a		bne $a229			bne 	_TSTNext
.a20f	5a		phy				phy 								; save Y , we might fail
.a210	c8		iny				iny 								; point to text
.a211	c8		iny				iny
.a212	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a215					_TSTCompareName:
.a215	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a218	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a21a	d0 0c		bne $a228			bne 	_TSTNextPullY 				; fail, pullY and do next
.a21c	e8		inx				inx
.a21d	c8		iny				iny
.a21e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a221	d0 f2		bne $a215			bne 	_TSTCompareName
.a223	7a		ply				ply 								; throw Y
.a224	a5 38		lda $38				lda 	zTemp1 						; get token #
.a226	38		sec				sec 								; return with CS = passed.
.a227	60		rts				rts
.a228					_TSTNextPullY:
.a228	7a		ply				ply 								; restore current, fall through.
.a229					_TSTNext:
.a229	e6 38		inc $38				inc 	zTemp1 						; token counter
.a22b	98		tya				tya
.a22c	18		clc				clc
.a22d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a22f	1a		inc a				inc 	a 							; +1
.a230	1a		inc a				inc 	a 							; +2
.a231	a8		tay				tay
.a232	10 c1		bpl $a1f5			bpl 	_TSTLoop 					; if Y < $80 loop back
.a234	98		tya				tya 								; add Y to zTemp0 and reset Y
.a235	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a237	18		clc				clc  								; but have tables > 255 bytes
.a238	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a23a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a23c	90 b7		bcc $a1f5			bcc 	_TSTLoop
.a23e	e6 37		inc $37				inc 	zTemp0+1
.a240	80 b3		bra $a1f5			bra 	_TSTLoop
.a242					_TSTFail:
.a242	18		clc				clc
.a243	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a244					KeywordSet0:
>a244	00 65					.text	0,$65,""               ; $80 !0:EOF
>a246	00 58					.text	0,$58,""               ; $81 !1:SH1
>a248	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a24a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a250	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a258	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a25e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a265	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a26d	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a274	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a27b	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a281	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a289	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a291	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a297	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a29e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a2a4	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a2a9	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a2ad	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a2b5	28
>a2b6	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a2be	28
>a2bf	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a2c5	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a2cb	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a2d1	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a2d8	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a2e0	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a2e6	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a2ec	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a2f1	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a2f5	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a2fb	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a303	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a30a	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a311	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a319	43
>a31a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a320	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a326	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a32d	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a333	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a6 CALL
>a339	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a7 CIRCLE
>a341	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a8 CLS
>a346	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $a9 COLOR
>a34d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $aa COLOUR
>a355	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ab DATA
>a35b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ac DIM
>a360	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ad DOWNTO
>a368	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $ae ELSE
>a36e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $af GOSUB
>a375	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b0 GOTO
>a37b	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b1 HERE
>a381	04 1a 48 49 44 45			.text	4,$1a,"HIDE"           ; $b2 HIDE
>a387	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b3 LET
>a38c	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b4 LINE
>a392	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b5 LOCAL
>a399	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b6 OUTLINE
>a3a1	45
>a3a2	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $b7 PRINT
>a3a9	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $b8 READ
>a3af	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $b9 RECT
>a3b5	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ba REM
>a3ba	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bb RETURN
>a3c2	05 68 53 43 41 4c 45			.text	5,$68,"SCALE"          ; $bc SCALE
>a3c9	04 41 53 48 4f 57			.text	4,$41,"SHOW"           ; $bd SHOW
>a3cf	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $be SOLID
>a3d6	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $bf SPRITE
>a3de	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c0 TEXT
>a3e4	02 a3 54 4f				.text	2,$a3,"TO"             ; $c1 TO
>a3e8	ff					.text	$FF
.a3e9					KeywordSet1:
>a3e9	00 65					.text	0,$65,""               ; $80 !0:EOF
>a3eb	00 58					.text	0,$58,""               ; $81 !1:SH1
>a3ed	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a3ef	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a3f7	4c 45
>a3f9	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a401	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a409	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $86 CLEAR
>a410	03 d7 45 4e 44				.text	3,$d7,"END"            ; $87 END
>a415	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $88 LIST
>a41b	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $89 NEW
>a420	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8a RESTORE
>a428	45
>a429	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8b RUN
>a42e	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8c SPRITES
>a436	53
>a437	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8d STOP
>a43d	ff					.text	$FF
.a43e					KeywordSet2:
>a43e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a440	00 58					.text	0,$58,""               ; $81 !1:SH1
>a442	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a444	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a449	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a44e	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a453	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a458	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a45d	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a462	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a467	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a46c	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a471	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a476	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a47b	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a480	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a485	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a48a	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a48f	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a494	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a499	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a49e	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a4a3	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a4a8	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a4ad	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a4b2	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a4b7	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a4bc	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a4c1	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a4c6	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a4cb	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a4d0	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a4d5	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a4da	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a4df	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a4e4	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a4e9	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a4ee	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a4f3	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a4f8	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a4fd	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a502	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a507	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a50c	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a511	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a516	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a51b	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a520	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a525	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a52a	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a52f	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a534	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a539	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a53e	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a543	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a548	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a54d	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a552	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a557	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a55c	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a561	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a566	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a56b	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a570	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a575	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a57a	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a57f	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a584	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a589	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a58a					TokeniseLine:
.a58a	20 12 a7	jsr $a712			jsr 	FixLineBufferCase 			; fix line case
.a58d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a58f	8d a6 04	sta $04a6			sta 	tokenOffset
.a592	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a595	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a598	a2 ff		ldx #$ff			ldx 	#$FF
.a59a					_TKFindFirst:
.a59a	e8		inx				inx
.a59b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a59e	f0 79		beq $a619			beq 	_TKExit
.a5a0	c9 20		cmp #$20			cmp 	#' '
.a5a2	90 f6		bcc $a59a			bcc 	_TKFindFirst
.a5a4	c9 30		cmp #$30			cmp 	#'0'
.a5a6	90 07		bcc $a5af			bcc 	_TKNoLineNumber
.a5a8	c9 3a		cmp #$3a			cmp 	#'9'+1
.a5aa	b0 03		bcs $a5af			bcs 	_TKNoLineNumber
.a5ac	20 3c a7	jsr $a73c			jsr 	TokeniseExtractLineNumber
.a5af					_TKNoLineNumber:
.a5af					_TKTokeniseLoop:
.a5af	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a5b2	f0 65		beq $a619			beq 	_TKExit
.a5b4	e8		inx				inx
.a5b5	c9 20		cmp #$20			cmp 	#' '
.a5b7	f0 f6		beq $a5af			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a5b9	ca		dex				dex 								; undo last get, A contains character, X is position.
.a5ba	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a5bc	f0 61		beq $a61f			beq 	_TKTokeniseIdentifier
.a5be	c9 41		cmp #$41			cmp 	#'A'
.a5c0	90 04		bcc $a5c6			bcc 	_TKTokenisePunctuation
.a5c2	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a5c4	90 59		bcc $a61f			bcc 	_TKTokeniseIdentifier
.a5c6					_TKTokenisePunctuation:
.a5c6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a5c8	f0 27		beq $a5f1			beq 	_TKString
.a5ca	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a5cc	f0 28		beq $a5f6			beq 	_TKHexConstant
.a5ce	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a5d0	f0 29		beq $a5fb			beq 	_TKCheckDouble
.a5d2	c9 3e		cmp #$3e			cmp 	#'>'
.a5d4	f0 25		beq $a5fb			beq 	_TKCheckDouble
.a5d6					_TKStandardPunctuation:
.a5d6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a5d9	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a5db	90 0e		bcc $a5eb			bcc 	_TKNoShift
.a5dd	48		pha				pha 								; save
.a5de	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a5e0	85 36		sta $36				sta 	zTemp0
.a5e2	68		pla				pla
.a5e3	29 20		and #$20			and 	#32 						; bit 5
.a5e5	4a		lsr a				lsr 	a 							; shift into bit 3
.a5e6	4a		lsr a				lsr 	a
.a5e7	05 36		ora $36				ora 	zTemp0
.a5e9	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a5eb					_TKNoShift:
.a5eb	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte 			; write the punctuation character
.a5ee	e8		inx				inx 								; consume the character
.a5ef	80 be		bra $a5af			bra 	_TKTokeniseLoop 			; and loop round again.
.a5f1					_TKString:
.a5f1	20 a1 a6	jsr $a6a1			jsr 	TokeniseString
.a5f4	80 b9		bra $a5af			bra 	_TKTokeniseLoop
.a5f6					_TKHexConstant:
.a5f6	20 dc a6	jsr $a6dc			jsr 	TokeniseHexConstant
.a5f9	80 b4		bra $a5af			bra 	_TKTokeniseLoop
.a5fb					_TKCheckDouble:
.a5fb	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a5fe	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a600	90 d4		bcc $a5d6			bcc 	_TKStandardPunctuation
.a602	c9 3f		cmp #$3f			cmp 	#'>'+1
.a604	b0 d0		bcs $a5d6			bcs 	_TKStandardPunctuation
.a606	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a609	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a60b	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a60c	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a60f	38		sec				sec
.a610	e9 3c		sbc #$3c			sbc 	#'<'
.a612	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a615	e8		inx				inx 								; consume both
.a616	e8		inx				inx
.a617	80 96		bra $a5af			bra 	_TKTokeniseLoop
.a619	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a61b	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a61e	60		rts				rts
.a61f					_TKTokeniseIdentifier:
.a61f	8e 80 04	stx $0480			stx 	identStart 					; save start
.a622	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a625					_TKCheckLoop:
.a625	e8		inx				inx 								; look at next, we know first is identifier.
.a626	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a629	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a62b	f0 f8		beq $a625			beq 	_TKCheckLoop
.a62d	c9 30		cmp #$30			cmp	 	#"0"
.a62f	90 0c		bcc $a63d			bcc 	_TKEndIdentifier
.a631	c9 3a		cmp #$3a			cmp 	#"9"+1
.a633	90 f0		bcc $a625			bcc 	_TKCheckLoop
.a635	c9 41		cmp #$41			cmp	 	#"A"
.a637	90 04		bcc $a63d			bcc 	_TKEndIdentifier
.a639	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a63b	90 e8		bcc $a625			bcc 	_TKCheckLoop
.a63d					_TKEndIdentifier:
.a63d	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a640	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a642	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a644	f0 06		beq $a64c			beq 	_TKHasTypeCharacter
.a646	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a648	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a64a	d0 07		bne $a653			bne 	_TKNoTypeCharacter
.a64c					_TKHasTypeCharacter:
.a64c	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a64f	e8		inx				inx 								; read next
.a650	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a653					_TKNoTypeCharacter:
.a653	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a655	d0 09		bne $a660			bne 	_TKNoArray
.a657	e8		inx				inx 								; skip the (
.a658	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a65b	09 04		ora #$04			ora 	#$04
.a65d	8d 84 04	sta $0484			sta 	identTypeByte
.a660					_TKNoArray:
.a660	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a663	20 fd a6	jsr $a6fd			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a666	a0 a2		ldy #$a2			ldy 	#(KeywordSet0) >> 8
.a668	a9 44		lda #$44			lda 	#(KeywordSet0) & $FF
.a66a	20 eb a1	jsr $a1eb			jsr 	TokeniseSearchTable
.a66d	a2 00		ldx #$00			ldx 	#0
.a66f	b0 1f		bcs $a690			bcs 	_TKFoundToken
.a671	a0 a3		ldy #$a3			ldy 	#(KeywordSet1) >> 8
.a673	a9 e9		lda #$e9			lda 	#(KeywordSet1) & $FF
.a675	20 eb a1	jsr $a1eb			jsr 	TokeniseSearchTable
.a678	a2 81		ldx #$81			ldx 	#$81
.a67a	b0 14		bcs $a690			bcs 	_TKFoundToken
.a67c	a0 a4		ldy #$a4			ldy 	#(KeywordSet2) >> 8
.a67e	a9 3e		lda #$3e			lda 	#(KeywordSet2) & $FF
.a680	20 eb a1	jsr $a1eb			jsr 	TokeniseSearchTable
.a683	a2 82		ldx #$82			ldx 	#$82
.a685	b0 09		bcs $a690			bcs 	_TKFoundToken
.a687	20 8d a7	jsr $a78d			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a68a	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a68d	4c af a5	jmp $a5af			jmp 	_TKTokeniseLoop 			; and go round again.
.a690					_TKFoundToken:
.a690	48		pha				pha 								; save token
.a691	8a		txa				txa 								; shift in X, is there one ?
.a692	f0 03		beq $a697			beq 	_TKNoTShift
.a694	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte 			; if so, write it out
.a697					_TKNoTShift:
.a697	68		pla				pla 								; restore and write token
.a698	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a69b	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a69e	4c af a5	jmp $a5af			jmp 	_TKTokeniseLoop 			; and go round again.
.a6a1					TokeniseString:
.a6a1	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a6a3	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a6a6	e8		inx				inx									; start of quoted string.
.a6a7	da		phx				phx 								; push start of string on top
.a6a8	ca		dex				dex
.a6a9					_TSFindEnd:
.a6a9	e8		inx				inx
.a6aa	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a6ad	f0 04		beq $a6b3			beq 	_TSEndOfString
.a6af	c9 22		cmp #$22			cmp 	#'"'
.a6b1	d0 f6		bne $a6a9			bne 	_TSFindEnd
.a6b3					_TSEndOfString:
.a6b3	7a		ply				ply  								; so now Y is first character, X is character after end.
.a6b4	48		pha				pha 								; save terminating character
.a6b5	20 bd a6	jsr $a6bd			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a6b8	68		pla				pla 								; terminating character
.a6b9	f0 01		beq $a6bc			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a6bb	e8		inx				inx
.a6bc					_TSNotQuote:
.a6bc	60		rts				rts
.a6bd					TOWriteBlockXY:
.a6bd	86 36		stx $36				stx 	zTemp0 						; write end character
.a6bf	98		tya				tya
.a6c0	49 ff		eor #$ff			eor 	#$FF
.a6c2	38		sec				sec
.a6c3	65 36		adc $36				adc 	zTemp0
.a6c5	1a		inc a				inc 	a 							; one extra for NULL
.a6c6	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a6c9					_TOBlockLoop:
.a6c9	c4 36		cpy $36				cpy 	zTemp0
.a6cb	f0 09		beq $a6d6			beq 	_TOBlockExit
.a6cd	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a6d0	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a6d3	c8		iny				iny
.a6d4	80 f3		bra $a6c9			bra 	_TOBlockLoop
.a6d6					_TOBlockExit:
.a6d6	a9 00		lda #$00			lda 	#0
.a6d8	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a6db	60		rts				rts
.a6dc					TokeniseHexConstant:
.a6dc	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a6de	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a6e1	e8		inx				inx									; start of quoted string.
.a6e2	da		phx				phx 								; push start of constant on top
.a6e3	ca		dex				dex
.a6e4					_THFindLoop:
.a6e4	e8		inx				inx
.a6e5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a6e8	c9 30		cmp #$30			cmp 	#"0"
.a6ea	90 0c		bcc $a6f8			bcc 	_THFoundEnd
.a6ec	c9 3a		cmp #$3a			cmp 	#"9"+1
.a6ee	90 f4		bcc $a6e4			bcc 	_THFindLoop
.a6f0	c9 41		cmp #$41			cmp 	#"A"
.a6f2	90 04		bcc $a6f8			bcc 	_THFoundEnd
.a6f4	c9 47		cmp #$47			cmp 	#"F"+1
.a6f6	90 ec		bcc $a6e4			bcc 	_THFindLoop
.a6f8					_THFoundEnd:
.a6f8	7a		ply				ply 								; restore start
.a6f9	20 bd a6	jsr $a6bd			jsr 	TOWriteBlockXY 				; output the block
.a6fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a6fd					TokeniseCalculateHash:
.a6fd	da		phx				phx
.a6fe	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a701	a9 00		lda #$00			lda 	#0
.a703					_TCHLoop:
.a703	18		clc				clc
.a704	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a707	e8		inx				inx
.a708	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a70b	d0 f6		bne $a703			bne 	_TCHLoop
.a70d	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a710	fa		plx				plx
.a711	60		rts				rts
.a712					FixLineBufferCase:
.a712	a2 00		ldx #$00			ldx 	#0
.a714					_FLBCLoop:
.a714	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a717	f0 22		beq $a73b			beq 	_FLBCExit 					; end of string.
.a719	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a71b	f0 11		beq $a72e			beq 	_FLBCInQuotes
.a71d	e8		inx				inx
.a71e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a720	90 f2		bcc $a714			bcc 	_FLBCLoop
.a722	c9 7b		cmp #$7b			cmp 	#'z'+1
.a724	b0 ee		bcs $a714			bcs 	_FLBCLoop
.a726	38		sec				sec 								; make U/C
.a727	e9 20		sbc #$20			sbc 	#32
.a729	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a72c	80 e6		bra $a714			bra 	_FLBCLoop
.a72e					_FLBCInQuotes:
.a72e	e8		inx				inx 								; advance
.a72f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a732	f0 07		beq $a73b			beq 	_FLBCExit 					; exit on EOS
.a734	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a736	d0 f6		bne $a72e			bne 	_FLBCInQuotes
.a738	e8		inx				inx 								; skip over it
.a739	80 d9		bra $a714			bra 	_FLBCLoop
.a73b					_FLBCExit:
.a73b	60		rts				rts
.a73c					TokeniseExtractLineNumber:
.a73c	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a73f	48		pha				pha
.a740	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a743	48		pha				pha
.a744	20 7a a7	jsr $a77a			jsr 	_TELNTimes2 				; line # x 4
.a747	20 7a a7	jsr $a77a			jsr 	_TELNTimes2 				; line # x 2
.a74a	18		clc				clc 								; add stacked value
.a74b	68		pla				pla
.a74c	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a74f	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a752	68		pla				pla
.a753	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a756	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a759	20 7a a7	jsr $a77a			jsr 	_TELNTimes2 				; line # x 10
.a75c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a75f	e8		inx				inx
.a760	29 0f		and #$0f			and 	#15 						; add to line #
.a762	18		clc				clc
.a763	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a766	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a769	90 03		bcc $a76e			bcc 	_TLENNoCarry
.a76b	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a76e					_TLENNoCarry:
.a76e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a771	c9 30		cmp #$30			cmp 	#'0'
.a773	90 04		bcc $a779			bcc 	_TLENExit
.a775	c9 3a		cmp #$3a			cmp 	#'9'+1
.a777	90 c3		bcc $a73c			bcc 	TokeniseExtractLineNumber
.a779					_TLENExit:
.a779	60		rts				rts
.a77a					_TELNTimes2:
.a77a	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a77d	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a780	60		rts				rts
.a781					TokeniseWriteByte:
.a781	da		phx				phx
.a782	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a785	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a788	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a78b	fa		plx				plx
.a78c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a78d					CheckCreateVariableRecord:
.a78d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a78f	85 36		sta $36				sta 	0+zTemp0
.a791	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a793	85 37		sta $37				sta 	1+zTemp0
.a795					_CCVSearch:
.a795	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a797	f0 2c		beq $a7c5			beq 	_CCVFail
.a799	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a79b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a79d	cd 83 04	cmp $0483			cmp 	identHash
.a7a0	d0 16		bne $a7b8			bne 	_CCVNext
.a7a2	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a7a4	ae 80 04	ldx $0480			ldx 	identStart
.a7a7					_CCVCompare:
.a7a7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a7aa	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a7ac	e8		inx				inx 								; advance pointers
.a7ad	c8		iny				iny
.a7ae	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a7af	d0 07		bne $a7b8			bne 	_CCVNext  					; didn't match go to next.
.a7b1	90 f4		bcc $a7a7			bcc 	_CCVCompare 				; not finished yet.
.a7b3	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a7b6	f0 41		beq $a7f9			beq 	_CCVFound 					; yes, we were successful
.a7b8					_CCVNext:
.a7b8	18		clc				clc
.a7b9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a7bb	65 36		adc $36				adc 	zTemp0
.a7bd	85 36		sta $36				sta 	zTemp0
.a7bf	90 d4		bcc $a795			bcc 	_CCVSearch
.a7c1	e6 37		inc $37				inc 	zTemp0+1
.a7c3	80 d0		bra $a795			bra 	_CCVSearch
.a7c5					_CCVFail:
.a7c5	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a7c7	ad 83 04	lda $0483			lda 	identHash
.a7ca	91 36		sta ($36),y			sta 	(zTemp0),y
.a7cc	c8		iny				iny 								; offset 2 is the type byte
.a7cd	ad 84 04	lda $0484			lda 	identTypeByte
.a7d0	91 36		sta ($36),y			sta 	(zTemp0),y
.a7d2	c8		iny				iny
.a7d3					_CCVData:
.a7d3	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a7d5	91 36		sta ($36),y			sta 	(zTemp0),y
.a7d7	c8		iny				iny
.a7d8	c0 08		cpy #$08			cpy 	#8
.a7da	90 f7		bcc $a7d3			bcc 	_CCVData
.a7dc	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a7df					_CCVCopyName:
.a7df	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a7e2	91 36		sta ($36),y			sta 	(zTemp0),y
.a7e4	e8		inx				inx
.a7e5	c8		iny				iny
.a7e6	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a7e9	d0 f4		bne $a7df			bne 	_CCVCopyName
.a7eb	98		tya				tya 								; patch offset
.a7ec	92 36		sta ($36)			sta 	(zTemp0)
.a7ee	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a7f0	91 36		sta ($36),y			sta 	(zTemp0),y
.a7f2	88		dey				dey
.a7f3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a7f5	09 80		ora #$80			ora 	#$80
.a7f7	91 36		sta ($36),y			sta 	(zTemp0),y
.a7f9					_CCVFound:
.a7f9	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a7fb	38		sec				sec
.a7fc	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a7fe	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a800	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a803	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a805	20 81 a7	jsr $a781			jsr 	TokeniseWriteByte
.a808	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
