
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Nov 20 16:20:30 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 bc a9	jsr $a9bc			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 b0 8d	jsr $8db0			jsr 	PrintStringXA
.8014	20 59 88	jsr $8859			jsr 	NewProgram 					; erase current program
.8017	20 fc 82	jsr $82fc			jsr 	BackloadProgram
.801a	4c f8 89	jmp $89f8			jmp 	CommandRun
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 20-Nov-2022. Build 3291."
>8064	6e 64 61 79 20 32 30 2d 4e 6f 76 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 33 32 39 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8084					AssembleGroup1:
.8084	a9 ff		lda #$ff			lda 	#$FF
.8086	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8089	80 02		bra $808d			bra 	AsmGroup12
.808b					AssembleGroup2:
.808b	a9 00		lda #$00			lda 	#$00
.808d					AsmGroup12:
.808d	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8090	68		pla				pla 								; pop the return address to access the information following.
.8091	fa		plx				plx
.8092	20 1b 81	jsr $811b			jsr 	AccessParameters 			; get opcode and save as base
.8095	8d a4 04	sta $04a4			sta 	BaseOpcode
.8098	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809b	d0 08		bne $80a5			bne 	_AG12HaveMask
.809d	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.809f	20 23 81	jsr $8123			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a2	8d a5 04	sta $04a5			sta 	ModeMask
.80a5					_AG12HaveMask:
.80a5	20 5e 82	jsr $825e			jsr 	TypeAndCalculateOperand 	; get zero page type
.80a8	da		phx				phx 								; save found address mode
.80a9	20 87 81	jsr $8187			jsr 	AssembleModeX
.80ac	fa		plx				plx  								; restore address mode
.80ad	b0 0b		bcs $80ba			bcs 	_AG12Exit
.80af	20 bb 80	jsr $80bb			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b2	20 87 81	jsr $8187			jsr 	AssembleModeX
.80b5	b0 03		bcs $80ba			bcs 	_AG12Exit
.80b7	4c a4 9f	jmp $9fa4			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ba					_AG12Exit:
.80ba	60		rts				rts
.80bb					PromoteToAbsolute:
.80bb	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bd	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80bf	f0 19		beq $80da			beq 	_PTADo
.80c1	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c3	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c5	f0 13		beq $80da			beq 	_PTADo
.80c7	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80c9	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cb	f0 0d		beq $80da			beq 	_PTADo
.80cd	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80cf	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d1	f0 07		beq $80da			beq 	_PTADo
.80d3	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d5	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d7	f0 01		beq $80da			beq 	_PTADo
.80d9	60		rts				rts
.80da					_PTADo:
.80da	aa		tax				tax
.80db	60		rts				rts
.80dc					AssembleGroup3:
.80dc	68		pla				pla 								; get parameters, which is just the opcode.
.80dd	fa		plx				plx
.80de	20 1b 81	jsr $811b			jsr 	AccessParameters 			; get and output opcode
.80e1	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.80e4	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get a 16 bit operand
.80e7	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ea	38		sec				sec
.80eb	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80ee	48		pha				pha 								; LSB in A
.80ef	ad 10 04	lda $0410			lda 	NSMantissa1
.80f2	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f5	aa		tax				tax 								; MSB in X
.80f6	68		pla				pla
.80f7	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80f8	69 7f		adc #$7f			adc 	#$7F
.80fa	90 01		bcc $80fd			bcc 	_AG3NoCarry
.80fc	e8		inx				inx
.80fd					_AG3NoCarry:
.80fd	38		sec				sec 								; fix back and write out anyways.
.80fe	e9 80		sbc #$80			sbc 	#$80
.8100	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.8103	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8105	f0 0a		beq $8111			beq 	_AG3Exit
.8107	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810a	29 01		and #$01			and 	#1
.810c	f0 03		beq $8111			beq 	_AG3Exit
.810e	4c a9 9f	jmp $9fa9			jmp 	RangeError 					; no, branch is out of range
.8111					_AG3Exit:
.8111	60		rts				rts
.8112					AssembleGroup4:
.8112	68		pla				pla 								; pop address
.8113	fa		plx				plx
.8114	20 1b 81	jsr $811b			jsr 	AccessParameters 			; access and get first
.8117	20 33 81	jsr $8133			jsr 	AssemblerWriteByte 			; output it.
.811a	60		rts				rts
.811b					AccessParameters:
.811b	8d a1 04	sta $04a1			sta 	ParamStart
.811e	8e a2 04	stx $04a2			stx 	ParamStart+1
.8121	a9 01		lda #$01			lda 	#1
.8123					GetParameter:
.8123	5a		phy				phy
.8124	a8		tay				tay
.8125	ad a1 04	lda $04a1			lda 	ParamStart
.8128	85 36		sta $36				sta 	zTemp0
.812a	ad a2 04	lda $04a2			lda 	ParamStart+1
.812d	85 37		sta $37				sta 	zTemp0+1
.812f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8131	7a		ply				ply
.8132	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8133					AssemblerWriteByte:
.8133	48		pha			pha
.8134	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8137	29 02		and #$02		and 	#2
.8139	f0 1b		beq $8156		beq 	_AWBNoPrint
.813b	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.813e	20 71 81	jsr $8171		jsr 	PrintHex
.8141	ad 9e 04	lda $049e		lda		AssemblerAddress
.8144	20 71 81	jsr $8171		jsr 	PrintHex
.8147	a9 20		lda #$20		lda 	#' '
.8149	20 48 a7	jsr $a748		jsr 	EXTPrintCharacter
.814c	68		pla			pla 									; print byte
.814d	48		pha			pha
.814e	20 71 81	jsr $8171		jsr 	PrintHex
.8151	a9 0d		lda #$0d		lda 	#13
.8153	20 48 a7	jsr $a748		jsr 	EXTPrintCharacter
.8156					_AWBNoPrint:
.8156	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8159	85 36		sta $36			sta 	zTemp0
.815b	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.815e	f0 0e		beq $816e		beq 	_AWBRange
.8160	85 37		sta $37			sta 	zTemp0+1
.8162	68		pla			pla 									; write byte out
.8163	92 36		sta ($36)		sta 	(zTemp0)
.8165	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8168	d0 03		bne $816d		bne 	_AWBNoCarry
.816a	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816d					_AWBNoCarry:
.816d	60		rts			rts
.816e					_AWBRange:
.816e	4c a9 9f	jmp $9fa9		jmp 	RangeError
.8171					PrintHex:
.8171	48		pha				pha
.8172	4a		lsr a				lsr 	a
.8173	4a		lsr a				lsr 	a
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	20 7a 81	jsr $817a			jsr 	_PrintNibble
.8179	68		pla				pla
.817a					_PrintNibble:
.817a	29 0f		and #$0f			and 	#15
.817c	c9 0a		cmp #$0a			cmp 	#10
.817e	90 02		bcc $8182			bcc 	_NoShift
.8180	69 06		adc #$06			adc 	#6
.8182					_NoShift:
.8182	69 30		adc #$30			adc 	#48
.8184	4c 48 a7	jmp $a748			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8187					AssembleModeX:
.8187	5a		phy				phy
.8188	ad a3 04	lda $04a3			lda 	IsGroup1
.818b	f0 17		beq $81a4			beq 	_AMXGroup2
.818d	8a		txa				txa 							; is it in group # 1
.818e	29 40		and #$40			and 	#AM_ISG1
.8190	f0 50		beq $81e2			beq 	_AMXFail 				; no, give up.
.8192	8a		txa				txa 							; get back.
.8193	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8195	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8197	d0 22		bne $81bb			bne 	_AMXHaveInfo
.8199	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819c	c9 81		cmp #$81			cmp 	#$81
.819e	f0 42		beq $81e2			beq 	_AMXFail
.81a0	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a2	80 17		bra $81bb			bra 	_AMXHaveInfo 			; odd design decision there.
.81a4					_AMXGroup2:
.81a4	8a		txa				txa 							; is it in group 2 ?
.81a5	29 20		and #$20			and 	#AM_ISG2
.81a7	f0 39		beq $81e2			beq 	_AMXFail 				; no, give up.
.81a9	8a		txa				txa 							; get the offset into Y
.81aa	29 1f		and #$1f			and 	#$1F
.81ac	4a		lsr a				lsr 	a 						; make it 0-7.
.81ad	4a		lsr a				lsr  	a
.81ae	a8		tay				tay
.81af	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b2					_AMXCheckOkay:
.81b2	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b3	88		dey				dey
.81b4	10 fc		bpl $81b2			bpl 	_AMXCheckOkay
.81b6	90 2a		bcc $81e2			bcc 	_AMXFail 				; not allowed.
.81b8	8a		txa				txa  							; get mask back
.81b9	29 1f		and #$1f			and 	#$1F
.81bb					_AMXHaveInfo:
.81bb	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bd	10 05		bpl $81c4			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81bf	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c2	d0 1e		bne $81e2			bne 	_AMXFail
.81c4					_AMXAnySize:
.81c4	18		clc				clc 							; add offset to the base opcode
.81c5	6d a4 04	adc $04a4			adc 	BaseOpcode
.81c8					_AMXOutputCode:
.81c8	20 33 81	jsr $8133			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cb	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cd	f0 10		beq $81df			beq 	_AMXExit
.81cf	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d2	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.81d5	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d7	30 06		bmi $81df			bmi 	_AMXExit
.81d9	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81dc	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.81df					_AMXExit:
.81df	7a		ply				ply
.81e0	38		sec				sec
.81e1	60		rts				rts
.81e2					_AMXFail:
.81e2	a0 00		ldy #$00			ldy 	#0
.81e4					_AMXCheckOddities:
.81e4	8a		txa				txa
.81e5	d9 0d 82	cmp $820d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81e8	d0 16		bne $8200			bne 	_AMXCONext
.81ea	b9 0b 82	lda $820b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ed	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f0	d0 0e		bne $8200			bne 	_AMXCONext
.81f2	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f4	10 05		bpl $81fb			bpl 	_AMXCONotZero
.81f6	ad 10 04	lda $0410			lda 	NSMantissa1
.81f9	d0 05		bne $8200			bne 	_AMXCONext
.81fb					_AMXCONotZero:
.81fb	b9 0c 82	lda $820c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81fe	80 c8		bra $81c8			bra 	_AMXOutputCode 			; and assemble it
.8200					_AMXCONext:
.8200	c8		iny				iny
.8201	c8		iny				iny
.8202	c8		iny				iny
.8203	b9 0b 82	lda $820b,y			lda 	ExtraOpcode+0,y 		; end of table
.8206	d0 dc		bne $81e4			bne 	_AMXCheckOddities
.8208					_AMXCOFail:
.8208	7a		ply				ply
.8209	18		clc				clc
.820a	60		rts				rts
.820b					ExtraOpcode:
>820b	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>820e	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8211	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8214	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8217	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821a	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821d	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8220	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8223	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8226	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8229	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822a					LabelHere:
.822a	c8		iny				iny 								; skip .
.822b	a2 00		ldx #$00			ldx 	#0 							; get a term
.822d	20 e0 97	jsr $97e0			jsr 	EvaluateTerm 				; get a term
.8230	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8233	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8235	d0 24		bne $825b			bne 	_ALType
.8237	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823a	85 36		sta $36				sta 	zTemp0
.823c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.823f	85 37		sta $37				sta 	zTemp0+1
.8241	5a		phy				phy 								; copy address in.
.8242	a0 01		ldy #$01			ldy 	#1
.8244	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8247	92 36		sta ($36)			sta 	(zTemp0)
.8249	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824c	91 36		sta ($36),y			sta 	(zTemp0),y
.824e	c8		iny				iny
.824f	a9 00		lda #$00			lda 	#0
.8251	91 36		sta ($36),y			sta 	(zTemp0),y
.8253	c8		iny				iny
.8254	91 36		sta ($36),y			sta 	(zTemp0),y
.8256	c8		iny				iny
.8257	91 36		sta ($36),y			sta 	(zTemp0),y
.8259	7a		ply				ply
.825a	60		rts				rts
.825b					_ALType:
.825b	4c ae 9f	jmp $9fae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.825e					TypeAndCalculateOperand:
.825e	b1 30		lda ($30),y			lda 	(codePtr),y
.8260	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8262	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8264	f0 5b		beq $82c1			beq 	_TACOExit
.8266	c9 80		cmp #$80			cmp 	#KWC_EOL
.8268	f0 57		beq $82c1			beq 	_TACOExit
.826a	c8		iny				iny
.826b	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826d	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.826f	f0 51		beq $82c2			beq 	CalculateOperand
.8271	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8273	f0 1f		beq $8294			beq 	_TACOIndirect
.8275	88		dey				dey 								; undo get of first character
.8276	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get operand
.8279	b1 30		lda ($30),y			lda 	(codePtr),y
.827b	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.827f	d0 40		bne $82c1			bne 	_TACOExit
.8281	c8		iny				iny
.8282	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8285	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8287	c9 58		cmp #$58			cmp 	#'X'
.8289	f0 36		beq $82c1			beq 	_TACOExit
.828b	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828d	c9 59		cmp #$59			cmp 	#'Y'
.828f	f0 30		beq $82c1			beq 	_TACOExit
.8291					_TACOSyntax:
.8291	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.8294					_TACOIndirect:
.8294	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get the operand
.8297	b1 30		lda ($30),y			lda 	(codePtr),y
.8299	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829b	f0 17		beq $82b4			beq 	_TACOIndX
.829d	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a0	b1 30		lda ($30),y			lda 	(codePtr),y
.82a2	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a6	d0 19		bne $82c1			bne 	_TACOExit
.82a8	c8		iny				iny
.82a9	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ac	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82ae	d0 e1		bne $8291			bne 	_TACOSyntax
.82b0	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b2	80 0d		bra $82c1			bra 	_TACOExit
.82b4					_TACOIndX:
.82b4	c8		iny				iny
.82b5	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82b8	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82ba	d0 d5		bne $8291			bne 	_TACOSyntax
.82bc	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket			; check )
.82bf	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c1					_TACOExit:
.82c1	60		rts				rts
.82c2					CalculateOperand:
.82c2	48		pha				pha
.82c3	da		phx				phx
.82c4	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c6	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.82c9	fa		plx				plx
.82ca	68		pla				pla
.82cb	60		rts				rts
.82cc					TACOCheckXY:
.82cc	b1 30		lda ($30),y			lda 	(codePtr),y
.82ce	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d0	c9 40		cmp #$40			cmp 	#$40
.82d2	d0 21		bne $82f5			bne 	_TCXYFail
.82d4	b1 30		lda ($30),y			lda 	(codePtr),y
.82d6	18		clc				clc
.82d7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82d9	85 37		sta $37				sta 	zTemp0+1
.82db	c8		iny				iny
.82dc	b1 30		lda ($30),y			lda 	(codePtr),y
.82de	c8		iny				iny
.82df	85 36		sta $36				sta 	zTemp0
.82e1	5a		phy				phy 								; save position
.82e2	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e6	d0 0c		bne $82f4			bne 	_TCXYPopFail
.82e8	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ec	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82ee	f0 08		beq $82f8			beq 	_TCXYFound
.82f0	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f2	f0 04		beq $82f8			beq 	_TCXYFound
.82f4					_TCXYPopFail:
.82f4	7a		ply				ply
.82f5					_TCXYFail:
.82f5	a9 00		lda #$00			lda 	#0
.82f7	60		rts				rts
.82f8					_TCXYFound:
.82f8	7a		ply				ply 								; restore position
.82f9	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fc					BackloadProgram:
.82fc	a2 ff		ldx #$ff			ldx 	#$FF
.82fe	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.8301	20 2b 83	jsr $832b			jsr 	BLReadByte
.8304	30 1e		bmi $8324			bmi 	_BPExit
.8306					_BPCopy:
.8306	e8		inx				inx  								; copy byte in
.8307	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.830a	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.830d	20 2b 83	jsr $832b			jsr 	BLReadByte 					; read next byte
.8310	30 0a		bmi $831c			bmi 	_BPEndLine 					; -ve = EOL
.8312	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8314	d0 02		bne $8318			bne 	_BPNotTab
.8316	a9 20		lda #$20			lda 	#' '
.8318					_BPNotTab:
.8318	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.831a	b0 ea		bcs $8306			bcs 	_BPCopy
.831c					_BPEndLine:
.831c	20 52 b5	jsr $b552			jsr 	TokeniseLine 				; tokenise the line.
.831f	20 39 83	jsr $8339			jsr 	EditProgramCode
.8322	80 d8		bra $82fc			bra 	BackloadProgram
.8324					_BPExit:
.8324	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.8327	20 f7 83	jsr $83f7			jsr 	ClearCommand 				; clear variables etc.
.832a	60		rts				rts
.832b					BLReadByte:
.832b					_BLLoad:
.832b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832e	ee 2c 83	inc $832c			inc 	_BLLoad+1
.8331	d0 03		bne $8336			bne 	_BLNoCarry
.8333	ee 2d 83	inc $832d			inc 	_BLLoad+2
.8336					_BLNoCarry:
.8336	c9 00		cmp #$00			cmp 	#0
.8338	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8339					EditProgramCode:
.8339	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.833c	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.833f	20 27 a2	jsr $a227			jsr 	MemorySearch
.8342	90 05		bcc $8349			bcc 	_EPCNoDelete 				; reached the end don't delete
.8344	d0 03		bne $8349			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8346	20 48 a1	jsr $a148			jsr 	MemoryDeleteLine 			; delete the line
.8349					_EPCNoDelete:
.8349	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.834c	c9 80		cmp #$80			cmp 	#KWC_EOL
.834e	f0 0d		beq $835d			beq 	_EPCNoInsert
.8350	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8353	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8356	20 27 a2	jsr $a227			jsr 	MemorySearch
.8359	18		clc				clc 								; insert at this point.
.835a	20 7f a1	jsr $a17f			jsr 	MemoryInsertLine 			; insert the line
.835d					_EPCNoInsert:
.835d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835e					WarmStart:
.835e	a2 ff		ldx #$ff			ldx 	#$FF
.8360	9a		txs				txs
.8361	20 d6 a8	jsr $a8d6			jsr 	EXTInputLine 				; get line to lineBuffer
.8364	20 52 b5	jsr $b552			jsr 	TokeniseLine 				; tokenise the line
.8367	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.836a	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.836d	d0 17		bne $8386			bne 	_WSEditCode 				; if so,edit code.
.836f	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8372	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8374	85 30		sta $30				sta 	codePtr
.8376	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8378	85 31		sta $31				sta 	codePtr+1
.837a	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.837d	c9 80		cmp #$80			cmp 	#KWC_EOL
.837f	f0 dd		beq $835e			beq 	WarmStart
.8381	20 0a 8a	jsr $8a0a			jsr 	RUNCodePointerLine 			; execute that line.
.8384	80 d8		bra $835e			bra 	WarmStart
.8386					_WSEditCode:
.8386	20 39 83	jsr $8339			jsr 	EditProgramCode
.8389	20 f7 83	jsr $83f7			jsr 	ClearCommand
.838c	80 d0		bra $835e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838e					AssembleCommand:
.838e	a2 00		ldx #$00			ldx 	#0
.8390	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; start address
.8393	ad 08 04	lda $0408			lda 	NSMantissa0
.8396	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8399	ad 10 04	lda $0410			lda 	NSMantissa1
.839c	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839f	20 46 8d	jsr $8d46			jsr 	CheckComma
.83a2	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; options
.83a5	ad 08 04	lda $0408			lda 	NSMantissa0
.83a8	8d a0 04	sta $04a0			sta 	AssemblerControl
.83ab	60		rts				rts
.83ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83ad					AssertCommand:
.83ad	a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.83af	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; the assert test
.83b2	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; exit if result is non zero.
.83b5	d0 05		bne $83bc			bne 	_ACExit
.83b7	a9 0a		lda #$0a		lda	#10
.83b9	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.83bc					_ACExit:
.83bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83bd					CallCommand:
.83bd	a2 00		ldx #$00			ldx 	#0
.83bf	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.83c2					_CCClear
.83c2	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c3	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.83c6	e0 04		cpx #$04			cpx 	#4
.83c8	d0 f8		bne $83c2			bne 	_CCClear
.83ca	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83cc					_CCCParam:
.83cc	b1 30		lda ($30),y			lda 	(codePtr),y
.83ce	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83d0	d0 09		bne $83db			bne 	_CCCRun6502
.83d2	c8		iny				iny 								; skip comma
.83d3	e8		inx				inx	 								; next level
.83d4	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d7	e0 03		cpx #$03			cpx 	#3
.83d9	90 f1		bcc $83cc			bcc 	_CCCParam 					; done all 3 ?
.83db					_CCCRun6502:
.83db	5a		phy				phy 								; save position
.83dc	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83df	85 37		sta $37				sta 	zTemp0+1
.83e1	ad 08 04	lda $0408			lda 	NSMantissa0
.83e4	85 36		sta $36				sta 	zTemp0
.83e6	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e9	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83ec	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83ef	20 f4 83	jsr $83f4			jsr 	_CCCZTemp0 					; call zTemp0
.83f2	7a		ply				ply 								; restore position and exit
.83f3	60		rts				rts
.83f4					_CCCZTemp0:
.83f4	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f7					ClearCommand:
.83f7	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f9	85 36		sta $36				sta 	0+zTemp0
.83fb	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fd	85 37		sta $37				sta 	1+zTemp0
.83ff					_ClearZeroLoop:
.83ff	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8401	f0 24		beq $8427			beq 	_ClearZeroEnd
.8403	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8405	a9 00		lda #$00			lda 	#0
.8407					_ClearOneVariable:
.8407	91 36		sta ($36),y			sta 	(zTemp0),y
.8409	c8		iny				iny
.840a	c0 08		cpy #$08			cpy 	#8
.840c	d0 f9		bne $8407			bne 	_ClearOneVariable
.840e	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8410	b1 36		lda ($36),y			lda 	(zTemp0),y
.8412	c9 18		cmp #$18			cmp 	#NSTProcedure
.8414	d0 04		bne $841a			bne 	_ClearNotProcedure
.8416	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8418	91 36		sta ($36),y			sta 	(zTemp0),y
.841a					_ClearNotProcedure:
.841a	18		clc				clc 								; go to the next variable
.841b	b2 36		lda ($36)			lda 	(zTemp0)
.841d	65 36		adc $36				adc 	zTemp0
.841f	85 36		sta $36				sta 	zTemp0
.8421	90 dc		bcc $83ff			bcc 	_ClearZeroLoop
.8423	e6 37		inc $37				inc 	zTemp0+1
.8425	80 d8		bra $83ff			bra 	_ClearZeroLoop
.8427					_ClearZeroEnd:
.8427	18		clc				clc
.8428	a5 36		lda $36				lda 	zTemp0
.842a	69 01		adc #$01			adc 	#1
.842c	8d 8c 04	sta $048c			sta 	lowMemPtr
.842f	a5 37		lda $37				lda 	zTemp0+1
.8431	69 00		adc #$00			adc 	#0
.8433	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8436	20 6d a6	jsr $a66d			jsr 	StackReset
.8439	20 d7 a6	jsr $a6d7			jsr 	StringSystemInitialise
.843c	20 47 8c	jsr $8c47			jsr 	ProcedureScan
.843f	20 c6 89	jsr $89c6			jsr 	Command_Restore
.8442	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8445	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8448	9c a0 04	stz $04a0			stz 	AssemblerControl
.844b	20 e3 99	jsr $99e3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.844f					ClearScreen:
.844f	5a		phy				phy
.8450	a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8452	20 48 a7	jsr $a748			jsr 	EXTPrintCharacter
.8455	7a		ply				ply
.8456	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8457					Command_Data:
.8457	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8459	a2 80		ldx #$80			ldx 	#KWC_EOL
.845b	20 99 8c	jsr $8c99			jsr 	ScanForward
.845e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845f					DimCommand:
.845f	b1 30		lda ($30),y			lda 	(codePtr),y
.8461	29 c0		and #$c0			and 	#$C0
.8463	c9 40		cmp #$40			cmp 	#$40
.8465	d0 7a		bne $84e1			bne 	_DCSyntax
.8467	b1 30		lda ($30),y			lda 	(codePtr),y
.8469	18		clc				clc
.846a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.846c	85 3f		sta $3f				sta 	zaTemp+1
.846e	c8		iny				iny
.846f	b1 30		lda ($30),y			lda 	(codePtr),y
.8471	c8		iny				iny
.8472	85 3e		sta $3e				sta 	zaTemp
.8474	5a		phy				phy
.8475	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8477	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8479	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.847b	c9 18		cmp #$18			cmp 	#NSTProcedure
.847d	f0 62		beq $84e1			beq 	_DCSyntax
.847f	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8481	29 04		and #$04			and 	#NSBIsArray
.8483	f0 64		beq $84e9			beq 	_DCType
.8485	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8487	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8489	d0 59		bne $84e4			bne 	_DCRedefine
.848b	7a		ply				ply
.848c	20 ec 84	jsr $84ec			jsr 	_DCGetSize 				; get array size, check it.
.848f	5a		phy				phy
.8490	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8492	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8494	7a		ply				ply 							; is there a second (e.g. ,x)
.8495	b1 30		lda ($30),y			lda 	(codePtr),y
.8497	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8499	d0 0a		bne $84a5			bne 	_DCOneDimension
.849b	c8		iny				iny 							; skip comma
.849c	20 ec 84	jsr $84ec			jsr 	_DCGetSize 				; get 2nd array size
.849f	5a		phy				phy
.84a0	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84a2	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a4	7a		ply				ply
.84a5					_DCOneDimension:
.84a5	5a		phy				phy 							; save position
.84a6	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84aa	aa		tax				tax
.84ab	c8		iny				iny
.84ac	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ae	e8		inx				inx 							; bump them.
.84af	1a		inc a				inc 	a
.84b0	20 af 9d	jsr $9daf			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b3	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b5	29 e0		and #$e0			and 	#$E0
.84b7	d0 23		bne $84dc			bne 	_DCSize
.84b9	a0 02		ldy #$02			ldy 	#2 						; get base type
.84bb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84bd	20 fa 84	jsr $84fa			jsr 	ScaleByBaseType 		; scale by base type
.84c0	a5 36		lda $36				lda 	zTemp0
.84c2	a6 37		ldx $37				ldx 	zTemp0+1
.84c4	20 a5 99	jsr $99a5			jsr 	AllocateXABytes 		; allocate memory
.84c7	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c9	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cb	c8		iny				iny
.84cc	8a		txa				txa
.84cd	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cf	7a		ply				ply 							; get position back
.84d0	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 		; check )
.84d3	b1 30		lda ($30),y			lda 	(codePtr),y
.84d5	c8		iny				iny 							; consume in case
.84d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d8	f0 85		beq $845f			beq 	DimCommand
.84da	88		dey				dey 							; undo consume
.84db	60		rts				rts
.84dc					_DCSize:
.84dc	a9 16		lda #$16		lda	#22
.84de	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.84e1					_DCSyntax:
.84e1	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.84e4					_DCRedefine:
.84e4	a9 15		lda #$15		lda	#21
.84e6	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.84e9					_DCType:
.84e9	4c ae 9f	jmp $9fae			jmp 	TypeError
.84ec					_DCGetSize:
.84ec	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84ee	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 	; get array dimension
.84f1	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f3	f0 e7		beq $84dc			beq 	_DCSize
.84f5	c9 fe		cmp #$fe			cmp 	#254
.84f7	f0 e3		beq $84dc			beq 	_DCSize
.84f9	60		rts				rts
.84fa					ScaleByBaseType:
.84fa	29 10		and #$10			and 	#NSBIsString 			; is it string
.84fc	d0 19		bne $8517			bne 	_SBBTString
.84fe	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8500	48		pha				pha
.8501	a5 36		lda $36				lda 	zTemp0
.8503	48		pha				pha
.8504	06 36		asl $36				asl 	zTemp0 					; x 2
.8506	26 37		rol $37				rol 	zTemp0+1
.8508	06 36		asl $36				asl 	zTemp0 					; x 4
.850a	26 37		rol $37				rol 	zTemp0+1
.850c	68		pla				pla 							; add stacked value = x 5
.850d	65 36		adc $36				adc 	zTemp0
.850f	85 36		sta $36				sta 	zTemp0
.8511	68		pla				pla
.8512	65 37		adc $37				adc 	zTemp0+1
.8514	85 37		sta $37				sta 	zTemp0+1
.8516	60		rts				rts
.8517					_SBBTString:
.8517	06 36		asl $36				asl 	zTemp0
.8519	26 37		rol $37				rol 	zTemp0+1
.851b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.851c					EndCommand:
.851c	4c 5e 83	jmp $835e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.851f					ForCommand:
.851f	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8521	20 08 a6	jsr $a608			jsr 	StackOpen
.8524	a2 00		ldx #$00			ldx 	#0
.8526	20 e0 97	jsr $97e0			jsr 	EvaluateTerm
.8529	bd 00 04	lda $0400,x			lda 	NSStatus,x
.852c	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.852e	d0 49		bne $8579			bne		_FCError
.8530	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8532	20 4e 8d	jsr $8d4e			jsr 	CheckNextA
.8535	e8		inx				inx
.8536	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; <from> in +1
.8539	b1 30		lda ($30),y			lda 	(codePtr),y
.853b	c8		iny				iny 								; consume it
.853c	48		pha				pha 								; save on stack for later
.853d	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.853f	f0 04		beq $8545			beq 	_FCNoSyntax
.8541	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8543	d0 37		bne $857c			bne 	_FCSyntaxError
.8545					_FCNoSyntax:
.8545	e8		inx				inx
.8546	20 66 9d	jsr $9d66			jsr 	EvaluateInteger
.8549	20 4c a6	jsr $a64c			jsr 	STKSaveCodePosition 		; save loop back position
.854c	68		pla				pla 								; restore DOWNTO or TO
.854d	5a		phy				phy 								; save Y on the stack
.854e	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8550	f0 02		beq $8554			beq 	_FCNotDownTo
.8552	a9 02		lda #$02			lda 	#2
.8554					_FCNotDownTo:
.8554	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8555	a0 10		ldy #$10			ldy 	#16
.8557	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8559	a0 06		ldy #$06			ldy 	#6
.855b	ad 08 04	lda $0408			lda 	NSMantissa0
.855e	91 34		sta ($34),y			sta 	(basicStack),y
.8560	ad 10 04	lda $0410			lda 	NSMantissa1
.8563	c8		iny				iny
.8564	91 34		sta ($34),y			sta 	(basicStack),y
.8566	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8568	a2 01		ldx #$01			ldx 	#1
.856a	20 7f 85	jsr $857f			jsr 	FCIntegerToStack
.856d	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.856f	a2 02		ldx #$02			ldx 	#2
.8571	20 7f 85	jsr $857f			jsr 	FCIntegerToStack
.8574	20 9f 85	jsr $859f			jsr 	CopyIndexToReference
.8577	7a		ply				ply 								; restore position
.8578	60		rts				rts
.8579					_FCError:
.8579	4c ae 9f	jmp $9fae			jmp 	TypeError
.857c					_FCSyntaxError:
.857c	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.857f					FCIntegerToStack:
.857f	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8582	10 03		bpl $8587			bpl	 	_FCNotNegative
.8584	20 cf 9d	jsr $9dcf			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8587					_FCNotNegative:
.8587	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.858a	91 34		sta ($34),y			sta 	(basicStack),y
.858c	c8		iny				iny
.858d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8590	91 34		sta ($34),y			sta 	(basicStack),y
.8592	c8		iny				iny
.8593	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8596	91 34		sta ($34),y			sta 	(basicStack),y
.8598	c8		iny				iny
.8599	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.859c	91 34		sta ($34),y			sta 	(basicStack),y
.859e	60		rts				rts
.859f					CopyIndexToReference:
.859f	5a		phy				phy
.85a0	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85a2	38		sec				sec 								; (because we copy from offset 8)
.85a3	b1 34		lda ($34),y			lda 	(basicStack),y
.85a5	e9 08		sbc #$08			sbc 	#8
.85a7	85 36		sta $36				sta 	zTemp0
.85a9	c8		iny				iny
.85aa	b1 34		lda ($34),y			lda 	(basicStack),y
.85ac	e9 00		sbc #$00			sbc 	#0
.85ae	85 37		sta $37				sta 	zTemp0+1
.85b0	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85b2	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b4	b1 34		lda ($34),y			lda 	(basicStack),y
.85b6	0a		asl a				asl 	a 							; into carry
.85b7	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b9	90 14		bcc $85cf			bcc 	_CITRNormal
.85bb	38		sec				sec
.85bc					_CITRNegative:
.85bc	a9 00		lda #$00			lda 	#0
.85be	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85c0	91 36		sta ($36),y			sta 	(zTemp0),y
.85c2	c8		iny				iny
.85c3	ca		dex				dex
.85c4	d0 f6		bne $85bc			bne 	_CITRNegative
.85c6	88		dey				dey 								; look at MSB of mantissa
.85c7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c9	09 80		ora #$80			ora 	#$80
.85cb	91 36		sta ($36),y			sta 	(zTemp0),y
.85cd	7a		ply				ply
.85ce	60		rts				rts
.85cf					_CITRNormal:
.85cf	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85d1	91 36		sta ($36),y			sta 	(zTemp0),y
.85d3	c8		iny				iny
.85d4	ca		dex				dex
.85d5	d0 f8		bne $85cf			bne 	_CITRNormal
.85d7	7a		ply				ply 								; and exit.
.85d8	60		rts				rts
.85d9					NextCommand:
.85d9	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85db	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85dd	20 34 a6	jsr $a634			jsr 	StackCheckFrame
.85e0	5a		phy				phy
.85e1	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e3	b1 34		lda ($34),y			lda 	(basicStack),y
.85e5	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e7	30 02		bmi $85eb			bmi 	_NCStepNeg
.85e9	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85eb					_NCStepNeg:
.85eb	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ed	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ef	18		clc				clc
.85f0					_NCBump:
.85f0	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85f2	91 34		sta ($34),y			sta 	(basicStack),y
.85f4	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f6	c8		iny				iny 								; next byte
.85f7	ca		dex				dex 								; do four times
.85f8	d0 f6		bne $85f0			bne 	_NCBump
.85fa	20 9f 85	jsr $859f			jsr		CopyIndexToReference		; copy it to the reference variable.
.85fd	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85ff	b1 34		lda ($34),y			lda 	(basicStack),y
.8601	0a		asl a				asl 	a 							; sign bit to carry
.8602	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8604	85 38		sta $38				sta 	zTemp1
.8606	90 02		bcc $860a			bcc 	_NCCompRev 					; use if step is +ve
.8608	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.860a					_NCCompRev:
.860a	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.860c	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.860e	85 39		sta $39				sta 	zTemp1+1
.8610	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8612	38		sec				sec
.8613					_NCCompare:
.8613	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8615	b1 34		lda ($34),y			lda 	(basicStack),y
.8617	a4 39		ldy $39				ldy 	zTemp1+1
.8619	f1 34		sbc ($34),y			sbc 	(basicStack),y
.861b	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861d	e6 39		inc $39				inc 	zTemp1+1
.861f	ca		dex				dex 								; do it 4 times.
.8620	d0 f1		bne $8613			bne 	_NCCompare
.8622	50 02		bvc $8626			bvc 	_NCNoOverflow 				; convert to signed comparison
.8624	49 80		eor #$80			eor 	#$80
.8626					_NCNoOverflow:
.8626	7a		ply				ply 								; restore Y position
.8627	0a		asl a				asl 	a 							; is bit 7 set.
.8628	90 04		bcc $862e			bcc 	_NCLoopback 				; if no , >= so loop back
.862a	20 26 a6	jsr $a626			jsr 	StackClose 					; exit the loop
.862d	60		rts				rts
.862e					_NCLoopBack:
.862e	20 5d a6	jsr $a65d			jsr 	STKLoadCodePosition 		; loop back
.8631	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8632					Command_GOSUB:
.8632	a2 00		ldx #$00			ldx 	#0
.8634	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8637	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8639	20 08 a6	jsr $a608			jsr 	StackOpen 					; create frame
.863c	20 4c a6	jsr $a64c			jsr 	STKSaveCodePosition 		; save current position
.863f	4c 55 86	jmp $8655			jmp 	GotoStackX
.8642					Command_RETURN:
.8642	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8644	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8646	20 34 a6	jsr $a634			jsr 	StackCheckFrame
.8649	20 5d a6	jsr $a65d			jsr 	STKLoadCodePosition 		; restore code position
.864c	20 26 a6	jsr $a626			jsr 	StackClose
.864f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8650					GotoCommand:
.8650	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8652	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.8655					GotoStackX:
.8655	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8658	48		pha				pha 								; it is slightly inefficient, just in cases.
.8659	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.865c	fa		plx				plx
.865d	20 27 a2	jsr $a227			jsr 	MemorySearch 				; transfer to line number AX.
.8660	90 05		bcc $8667			bcc 	_GotoError 					; not found, off end.
.8662	d0 03		bne $8667			bne 	_GotoError 					; not found exactly
.8664	4c 03 8a	jmp $8a03			jmp 	RunNewLine 					; and go straight to new line code.
.8667					_GotoError:
.8667	a9 0d		lda #$0d		lda	#13
.8669	4c 57 8d	jmp $8d57		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.866c					IfCommand:
.866c	a2 00		ldx #$00			ldx 	#0 							; If what.
.866e	20 43 9d	jsr $9d43			jsr 	EvaluateNumber
.8671	b1 30		lda ($30),y			lda 	(codePtr),y
.8673	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8675	d0 0a		bne $8681			bne 	_IFStructured
.8677	c8		iny				iny 								; consume THEN
.8678	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; is it zero
.867b	f0 01		beq $867e			beq 	_IfFail 					; if fail, go to next line
.867d	60		rts				rts 								; if THEN just continue
.867e					_IfFail:
.867e	4c 68 8a	jmp $8a68			jmp 	EOLCommand
.8681					_IfStructured:
.8681	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; is it zero
.8684	d0 07		bne $868d			bne 	_IfExit 					; if not, then continue normally.
.8686	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8688	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.868a	20 99 8c	jsr $8c99			jsr 	ScanForward 				; and run from there/
.868d					_IfExit:
.868d	60		rts				rts
.868e					ElseCode:
.868e	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8690	aa		tax				tax 								; so just go to the structure exit
.8691	20 99 8c	jsr $8c99			jsr 	ScanForward
.8694	60		rts				rts
.8695					EndIf:
.8695	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8696					LetCommand:
.8696	a2 00		ldx #$00			ldx 	#0
.8698	b1 30		lda ($30),y			lda 	(codePtr),y
.869a	c9 10		cmp #$10			cmp 	#KWD_AT
.869c	d0 16		bne $86b4			bne 	_LCStandard
.869e	c8		iny				iny 								; skip equal
.869f	20 e0 97	jsr $97e0			jsr 	EvaluateTerm 				; get a number
.86a2	20 24 96	jsr $9624			jsr 	Dereference 				; dereference it
.86a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a8	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86aa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86ad	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86af	d0 10		bne $86c1			bne 	_LCMain
.86b1	4c ae 9f	jmp $9fae			jmp 	TypeError 					; was a reference before.
.86b4					_LCStandard:
.86b4	ad ee 92	lda $92ee			lda 	PrecedenceLevel+"*"			; precedence > this
.86b7	20 08 93	jsr $9308			jsr 	EvaluateExpressionAtPrecedence
.86ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86bd	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86bf	f0 0e		beq $86cf			beq 	_LetGoProc 					; it's a procedure call.
.86c1					_LCMain:
.86c1	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c3	20 4e 8d	jsr $8d4e			jsr 	CheckNextA
.86c6	e8		inx				inx 								; RHS
.86c7	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue
.86ca	ca		dex				dex
.86cb	20 d2 86	jsr $86d2			jsr 	AssignVariable
.86ce	60		rts				rts
.86cf					_LetGoProc:
.86cf	4c d0 88	jmp $88d0			jmp 	CallProcedure
.86d2					AssignVariable:
.86d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d5	48		pha				pha 								; save a copy
.86d6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d9	29 10		and #$10			and 	#NSBIsString
.86db	d0 0b		bne $86e8			bne 	_ASError
.86dd	68		pla				pla 								; get back
.86de	29 10		and #$10			and 	#NSBIsString 				; check type
.86e0	d0 03		bne $86e5			bne 	_ASString
.86e2	4c 4c 95	jmp $954c			jmp 	AssignNumber
.86e5					_ASString:
.86e5	4c ba 95	jmp $95ba			jmp 	AssignString
.86e8					_ASError:
.86e8	4c ae 9f	jmp $9fae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86eb					Command_List:
.86eb	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86ee	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86f1	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f4	a9 ff		lda #$ff			lda 	#$FF
.86f6	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f9	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86fc	b1 30		lda ($30),y			lda 	(codePtr),y
.86fe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8700	f0 1e		beq $8720			beq 	_CLSecond
.8702	20 81 87	jsr $8781			jsr 	CLIsDigit 					; if not digit, list all
.8705	b0 24		bcs $872b			bcs 	_CLStart
.8707	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8709	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.870c	b1 30		lda ($30),y			lda 	(codePtr),y
.870e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8710	f0 0e		beq $8720			beq 	_CLSecond 					; if so go get it
.8712	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8715	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8718	ad 14 04	lda $0414			lda 	NSMantissa1+4
.871b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.871e	80 0b		bra $872b			bra 	_CLStart
.8720					_CLSecond:
.8720	c8		iny				iny 								; consume comma
.8721	20 81 87	jsr $8781			jsr 	CLIsDigit 					; digit found
.8724	b0 05		bcs $872b			bcs 	_CLStart 					; if not, continue listing
.8726	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8728	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.872b					_CLStart
.872b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872d	85 30		sta $30				sta 	codePtr
.872f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8731	85 31		sta $31				sta 	codePtr+1
.8733					_CLLoop:
.8733	20 ea a9	jsr $a9ea			jsr 	EXTBreakCheck 				; break check
.8736	f0 33		beq $876b			beq 	_CLExit
.8738	b2 30		lda ($30)			lda 	(codePtr)
.873a	f0 2f		beq $876b			beq 	_CLExit
.873c	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.873e	20 6e 87	jsr $876e			jsr 	CLCompareLineNo
.8741	90 1b		bcc $875e			bcc 	_CLNext
.8743	a2 07		ldx #$07			ldx 	#7
.8745	20 6e 87	jsr $876e			jsr 	CLCompareLineNo
.8748	f0 02		beq $874c			beq 	_CLDoThisOne
.874a	b0 12		bcs $875e			bcs 	_CLNext
.874c					_CLDoThisOne:
.874c	20 fc 8c	jsr $8cfc			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.874f	20 34 b3	jsr $b334			jsr 	ListConvertLine 			; convert line into token Buffer
.8752	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8754	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8756	20 b0 8d	jsr $8db0			jsr 	PrintStringXA
.8759	a9 0d		lda #$0d			lda 	#13 						; new line
.875b	20 48 a7	jsr $a748			jsr 	EXTPrintCharacter
.875e					_CLNext:
.875e	18		clc				clc
.875f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8761	65 30		adc $30				adc 	codePtr
.8763	85 30		sta $30				sta 	codePtr
.8765	90 02		bcc $8769			bcc 	_CREExit
.8767	e6 31		inc $31				inc 	codePtr+1
.8769					_CREExit:
.8769	80 c8		bra $8733			bra 	_CLLoop
.876b					_CLExit:
.876b	4c 5e 83	jmp $835e			jmp 	WarmStart
.876e					CLCompareLineNo:
.876e	38		sec				sec
.876f	a0 01		ldy #$01			ldy 	#1
.8771	b1 30		lda ($30),y			lda 	(codePtr),y
.8773	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8776	85 36		sta $36				sta 	zTemp0
.8778	c8		iny				iny
.8779	b1 30		lda ($30),y			lda 	(codePtr),y
.877b	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.877e	05 36		ora $36				ora 	zTemp0
.8780	60		rts				rts
.8781					CLIsDigit:
.8781	b1 30		lda ($30),y			lda 	(codePtr),y
.8783	c9 30		cmp #$30			cmp 	#"0"
.8785	90 03		bcc $878a			bcc	 	_CLIDExitFalse
.8787	c9 3a		cmp #$3a			cmp 	#"9"+1
.8789	60		rts				rts
.878a					_CLIDExitFalse:
.878a	38		sec				sec
.878b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.878c					Command_LOCAL:
.878c	a2 00		ldx #$00			ldx 	#0 							; at level 0
.878e	20 9a 87	jsr $879a			jsr 	LocaliseNextTerm 			; convert term to a local.
.8791	b1 30		lda ($30),y			lda 	(codePtr),y
.8793	c8		iny				iny
.8794	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8796	f0 f4		beq $878c			beq 	Command_LOCAL
.8798	88		dey				dey 								; unpick pre-get
.8799	60		rts				rts
.879a					LocaliseNextTerm:
.879a	20 e0 97	jsr $97e0			jsr 	EvaluateTerm 				; evaluate the term
.879d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87a0	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.87a2	f0 61		beq $8805			beq		_LNTError
.87a4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a7	85 36		sta $36				sta 	zTemp0
.87a9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87ac	85 37		sta $37				sta  	zTemp0+1
.87ae	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87b1	29 10		and #$10			and 	#NSBIsString
.87b3	d0 1e		bne $87d3			bne 	_LNTPushString
.87b5	5a		phy				phy
.87b6	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b8					_LNTPushNumLoop:
.87b8	b1 36		lda ($36),y			lda		(zTemp0),y
.87ba	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87bd	c8		iny				iny
.87be	c0 05		cpy #$05			cpy 	#5
.87c0	d0 f6		bne $87b8			bne 	_LNTPushNumLoop
.87c2	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87c4	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87c7	a5 37		lda $37				lda 	zTemp0+1
.87c9	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87cc	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87ce	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87d1	7a		ply				ply
.87d2	60		rts				rts
.87d3					_LNTPushString:
.87d3	5a		phy				phy
.87d4	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d6	85 38		sta $38				sta 	zTemp1
.87d8	a0 01		ldy #$01			ldy 	#1
.87da	b1 36		lda ($36),y			lda 	(zTemp0),y
.87dc	85 39		sta $39				sta 	zTemp1+1
.87de	a0 00		ldy #$00			ldy 	#0 							; output string
.87e0	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87e2	f0 0a		beq $87ee			beq 	_LNTStringOut
.87e4					_LNTPushStrLoop:
.87e4	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e6	f0 06		beq $87ee			beq 	_LNTStringOut
.87e8	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87eb	c8		iny				iny
.87ec	80 f6		bra $87e4			bra 	_LNTPushStrLoop
.87ee					_LNTStringOut:
.87ee	98		tya				tya									; output length
.87ef	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87f2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87f5	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87f8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87fb	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.87fe	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8800	20 e6 a5	jsr $a5e6			jsr 	StackPushByte
.8803	7a		ply				ply
.8804	60		rts				rts
.8805					_LNTError:
.8805	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.8808					LocalPopValue:
.8808	20 ff a5	jsr $a5ff			jsr 	StackPopByte
.880b	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.880d	d0 17		bne $8826			bne 	_LPVString
.880f	20 ff a5	jsr $a5ff			jsr 	StackPopByte 				; address
.8812	85 37		sta $37				sta 	zTemp0+1
.8814	20 ff a5	jsr $a5ff			jsr 	StackPopByte
.8817	85 36		sta $36				sta 	zTemp0
.8819	5a		phy				phy
.881a	a0 04		ldy #$04			ldy 	#4 							; copy back
.881c					_LPVNumberCopy:
.881c	20 ff a5	jsr $a5ff			jsr 	StackPopByte
.881f	91 36		sta ($36),y			sta 	(zTemp0),y
.8821	88		dey				dey
.8822	10 f8		bpl $881c			bpl 	_LPVNumberCopy
.8824	7a		ply				ply 								; and complete
.8825	60		rts				rts
.8826					_LPVString:
.8826	20 ff a5	jsr $a5ff			jsr 	StackPopByte 				; address of record => zTemp0
.8829	85 37		sta $37				sta 	zTemp0+1
.882b	20 ff a5	jsr $a5ff			jsr 	StackPopByte
.882e	85 36		sta $36				sta 	zTemp0
.8830	5a		phy				phy
.8831	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8833	85 38		sta $38				sta 	zTemp1
.8835	a0 01		ldy #$01			ldy 	#1
.8837	b1 36		lda ($36),y			lda 	(zTemp0),y
.8839	85 39		sta $39				sta 	zTemp1+1
.883b	20 ff a5	jsr $a5ff			jsr 	StackPopByte 				; # to get => y
.883e	a8		tay				tay
.883f	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8841	f0 0e		beq $8851			beq 	_LPVStringCopied
.8843	a9 00		lda #$00			lda 	#0 							; NULL on end
.8845	91 38		sta ($38),y			sta 	(zTemp1),y
.8847					_LPVStringCopy:
.8847	88		dey				dey
.8848	30 07		bmi $8851			bmi 	_LPVStringCopied
.884a	20 ff a5	jsr $a5ff			jsr 	StackPopByte
.884d	91 38		sta ($38),y			sta 	(zTemp1),y
.884f	80 f6		bra $8847			bra 	_LPVStringCopy
.8851					_LPVStringCopied:
.8851	fa		plx				plx
.8852	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8853					NewCommand:
.8853	20 59 88	jsr $8859			jsr 	NewProgram
.8856	4c 5e 83	jmp $835e			jmp 	WarmStart
.8859					NewProgram:
.8859	20 05 a2	jsr $a205			jsr 	MemoryNew
.885c	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.885f	20 f7 83	jsr $83f7			jsr 	ClearCommand 				; clear everything.
.8862	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8863					Command_Print:
.8863	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8864					_CPLoop:
.8864	08		php				php 								; save last action flag
.8865	b1 30		lda ($30),y			lda 	(codePtr),y
.8867	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8869	f0 46		beq $88b1			beq 	_CPExit
.886b	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.886d	f0 42		beq $88b1			beq 	_CPExit
.886f	68		pla				pla 								; throw last action flag
.8870	b1 30		lda ($30),y			lda 	(codePtr),y
.8872	c8		iny				iny
.8873	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8875	f0 37		beq $88ae			beq 	_CPContinueWithSameLine
.8877	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8879	f0 2e		beq $88a9			beq 	_CPTab
.887b	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.887d	f0 26		beq $88a5			beq 	_CPNewLine
.887f	88		dey				dey 								; undo the get.
.8880	a2 00		ldx #$00			ldx 	#0
.8882	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get a value into slot 0
.8885	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8888	29 10		and #$10			and 	#NSBIsString
.888a	f0 0b		beq $8897			beq 	_CPNumber
.888c	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.888f	ad 08 04	lda $0408			lda 	NSMantissa0
.8892	20 ba 88	jsr $88ba			jsr 	CPPrintStringXA
.8895	80 cc		bra $8863			bra 	Command_Print 				; loop round clearing carry so NL if end
.8897					_CPNumber:
.8897	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8899	20 10 9c	jsr $9c10			jsr 	ConvertNumberToString 		; convert to string
.889c	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.889e	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.88a0	20 ba 88	jsr $88ba			jsr 	CPPrintStringXA
.88a3	80 be		bra $8863			bra 	Command_Print 				; loop round clearing carry so NL if end
.88a5					_CPNewLine:
.88a5	a9 0d		lda #$0d			lda 	#13
.88a7	80 02		bra $88ab			bra 	_CPPrintChar
.88a9					_CPTab:
.88a9	a9 09		lda #$09			lda 	#9 							; print TAB
.88ab					_CPPrintChar:
.88ab	20 cd 88	jsr $88cd			jsr 	CPPrintVector
.88ae					_CPContinueWithSameLine:
.88ae	38		sec				sec 								; loop round with carry set, which
.88af	80 b3		bra $8864			bra 	_CPLoop 					; will inhibit final CR
.88b1					_CPExit:
.88b1	28		plp				plp 								; get last action flag
.88b2	b0 05		bcs $88b9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88b4	a9 0d		lda #$0d			lda 	#13 						; print new line
.88b6	20 cd 88	jsr $88cd			jsr 	CPPrintVector
.88b9					_CPExit2:
.88b9	60		rts				rts
.88ba					CPPrintStringXA:
.88ba	5a		phy				phy
.88bb	86 37		stx $37				stx 	zTemp0+1
.88bd	85 36		sta $36				sta 	zTemp0
.88bf	a0 00		ldy #$00			ldy 	#0
.88c1					_PSXALoop:
.88c1	b1 36		lda ($36),y			lda 	(zTemp0),y
.88c3	f0 06		beq $88cb			beq 	_PSXAExit
.88c5	20 cd 88	jsr $88cd			jsr 	CPPrintVector
.88c8	c8		iny				iny
.88c9	80 f6		bra $88c1			bra 	_PSXALoop
.88cb					_PSXAExit:
.88cb	7a		ply				ply
.88cc	60		rts				rts
.88cd					CPPrintVector:
.88cd	4c 48 a7	jmp $a748			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88d0					CallProcedure:
.88d0	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88d2	b1 30		lda ($30),y			lda 	(codePtr),y
.88d4	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88d6	f0 0c		beq $88e4			beq 	_CPEndParam
.88d8					_CPParamLoop:
.88d8	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get parameter onto stack
.88db	e8		inx				inx 								; bump next stack
.88dc	b1 30		lda ($30),y			lda 	(codePtr),y
.88de	c8		iny				iny
.88df	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88e1	f0 f5		beq $88d8			beq 	_CPParamLoop
.88e3	88		dey				dey 								; unpick.
.88e4					_CPEndParam:
.88e4	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88e7	c8		iny				iny									; skip right bracket
.88e8	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88ea	20 08 a6	jsr $a608			jsr 	StackOpen
.88ed	20 4c a6	jsr $a64c			jsr 	STKSaveCodePosition 		; save loop position
.88f0	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88f3	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88f5	ad 10 04	lda $0410			lda 	NSMantissa1
.88f8	85 37		sta $37				sta 	zTemp0+1
.88fa	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88fc	b2 36		lda ($36)			lda 	(zTemp0)
.88fe	85 30		sta $30				sta 	safePtr
.8900	b1 36		lda ($36),y			lda 	(zTemp0),y
.8902	85 31		sta $31				sta 	safePtr+1
.8904	c8		iny				iny
.8905	b1 36		lda ($36),y			lda 	(zTemp0),y
.8907	85 32		sta $32				sta 	safePtr+2
.8909	c8		iny				iny
.890a	b1 36		lda ($36),y			lda 	(zTemp0),y
.890c	85 33		sta $33				sta 	safePtr+3
.890e	c8		iny				iny 								; get Y offset -> Y
.890f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8911	a8		tay				tay
.8912	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8914	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8917	f0 13		beq $892c			beq 	_ParamExit 					; if so, exit.
.8919					_ParamExtract:
.8919	ca		dex				dex 								; put a local term on the level before
.891a	20 9a 87	jsr $879a			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.891d	20 d2 86	jsr $86d2			jsr 	AssignVariable 				; assign stacked value to the variable.
.8920	e8		inx				inx 								; advance to next parameter to do.
.8921	e8		inx				inx
.8922	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8925	f0 05		beq $892c			beq 	_ParamExit
.8927	20 46 8d	jsr $8d46			jsr 	CheckComma 					; comma seperating parameters
.892a	80 ed		bra $8919			bra 	_ParamExtract
.892c					_ParamExit:
.892c	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 			; check )
.892f	60		rts				rts 								; and continue from here
.8930					Command_ENDPROC:
.8930	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8932	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8934	20 34 a6	jsr $a634			jsr 	StackCheckFrame
.8937	20 5d a6	jsr $a65d			jsr 	STKLoadCodePosition 		; restore code position
.893a	20 26 a6	jsr $a626			jsr 	StackClose
.893d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.893e					Command_Read:
.893e	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8940	20 e0 97	jsr $97e0			jsr 	EvaluateTerm
.8943	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8946	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8948	f0 4a		beq $8994			beq 	_CRSyntax 					; check reference (bit 0)
.894a	20 dd 89	jsr $89dd			jsr 	SwapDataCodePtrs 			; swap code and data
.894d	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8950	d0 20		bne $8972			bne 	_CRContinueData
.8952					_CRKeepSearching:
.8952	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8954	aa		tax				tax
.8955	20 99 8c	jsr $8c99			jsr 	ScanForward
.8958	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.895a	f0 16		beq $8972			beq 	_CRHaveData 				; found it
.895c	18		clc				clc
.895d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.895f	65 30		adc $30				adc 	codePtr
.8961	85 30		sta $30				sta 	codePtr
.8963	90 02		bcc $8967			bcc 	_CREExit
.8965	e6 31		inc $31				inc 	codePtr+1
.8967					_CREExit:
.8967	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8969	b2 30		lda ($30)			lda 	(codePtr)
.896b	d0 e5		bne $8952			bne 	_CRKeepSearching
.896d	a9 0b		lda #$0b		lda	#11
.896f	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.8972					_CRHaveData:
.8972					_CRContinueData:
.8972	a2 01		ldx #$01			ldx 	#1
.8974	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8977	ca		dex				dex
.8978	20 d2 86	jsr $86d2			jsr		AssignVariable 				; do the assignment
.897b	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.897e	b1 30		lda ($30),y			lda 	(codePtr),y
.8980	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8982	d0 04		bne $8988			bne 	_CRSwapBack
.8984	c8		iny				iny 								; consume comma
.8985	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8988					_CRSwapBack:
.8988	20 dd 89	jsr $89dd			jsr 	SwapDataCodePtrs			; swap them back.
.898b	b1 30		lda ($30),y			lda 	(codePtr),y
.898d	c8		iny				iny
.898e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8990	f0 ac		beq $893e			beq 	Command_Read 				; if so go round again.
.8992	88		dey				dey 								; unpick get.
.8993	60		rts				rts
.8994					_CRSyntax:
.8994	4c a4 9f	jmp $9fa4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8997					RemCommand:
.8997	b1 30		lda ($30),y			lda 	(codePtr),y
.8999	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.899b	d0 06		bne $89a3			bne 	_RMExit
.899d	c8		iny				iny
.899e	98		tya				tya
.899f	38		sec				sec
.89a0	71 30		adc ($30),y			adc 	(codePtr),y
.89a2	a8		tay				tay
.89a3					_RMExit:
.89a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.89a4					Command_REPEAT:
.89a4	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89a6	20 08 a6	jsr $a608			jsr 	StackOpen
.89a9	20 4c a6	jsr $a64c			jsr 	STKSaveCodePosition 		; save loop position
.89ac	60		rts				rts
.89ad					Command_UNTIL:
.89ad	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89af	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89b1	20 34 a6	jsr $a634			jsr 	StackCheckFrame
.89b4	a2 00		ldx #$00			ldx 	#0
.89b6	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; work out the number
.89b9	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; check if zero
.89bc	f0 04		beq $89c2			beq 	_CULoopBack 				; if so keep looping
.89be	20 26 a6	jsr $a626			jsr 	StackClose		 			; return
.89c1	60		rts				rts
.89c2					_CULoopBack:
.89c2	20 5d a6	jsr $a65d			jsr 	STKLoadCodePosition 		; loop back
.89c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89c6					Command_Restore:
.89c6	20 dd 89	jsr $89dd			jsr 	SwapDataCodePtrs 			; swap code and data
.89c9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89cb	85 30		sta $30				sta 	codePtr
.89cd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89cf	85 31		sta $31				sta 	codePtr+1
.89d1	20 dd 89	jsr $89dd			jsr 	SwapDataCodePtrs 			; put them back
.89d4	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89d6	8d 9b 04	sta $049b			sta 	dataPointer+4
.89d9	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89dc	60		rts				rts
.89dd					SwapDataCodePtrs:
.89dd	da		phx				phx
.89de	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89e0					_SDCPLoop:
.89e0	b5 30		lda $30,x			lda 	safePtr,x
.89e2	48		pha				pha
.89e3	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89e6	95 30		sta $30,x			sta 	safePtr,x
.89e8	68		pla				pla
.89e9	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89ec	ca		dex				dex
.89ed	10 f1		bpl $89e0			bpl 	_SDCPLoop
.89ef	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89f2	8c 9b 04	sty $049b			sty 	dataPointer+4
.89f5	a8		tay				tay
.89f6	fa		plx				plx
.89f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89f8					CommandRUN:
.89f8	20 f7 83	jsr $83f7			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89fb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89fd	85 30		sta $30				sta 	codePtr
.89ff	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a01	85 31		sta $31				sta 	codePtr+1
.8a03					RUNNewLine:
.8a03	b2 30		lda ($30)			lda 	(codePtr)
.8a05	f0 5e		beq $8a65			beq 	CRNoProgram         		; no then END.
.8a07	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a09	9a		txs				txs
.8a0a					RUNCodePointerLine:
.8a0a	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a0c					_CRIncMainLoop:
.8a0c	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8a0f	d0 05		bne $8a16			bne 	_CRNoBreakCheck
.8a11	20 ea a9	jsr $a9ea			jsr 	EXTBreakCheck 				; break check
.8a14	f0 4a		beq $8a60			beq 	_CRBreak
.8a16					_CRNoBreakCheck:
.8a16	c8		iny				iny
.8a17					_CRMainLoop:
.8a17	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a1a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a1c	10 10		bpl $8a2e			bpl 	_CRNotKeyword
.8a1e	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a20	b0 04		bcs $8a26			bcs 	_CRIsKeyword
.8a22	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a24	b0 34		bcs $8a5a			bcs		_CRSyntaxError
.8a26					_CRIsKeyword:
.8a26	c8		iny				iny 								; consume command
.8a27	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a28	aa		tax				tax 								; put in X for vector jump
.8a29	20 5d 8a	jsr $8a5d			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a2c	80 e9		bra $8a17			bra 	_CRMainLoop 				; and loop round
.8a2e					_CRNotKeyword:
.8a2e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a30	f0 da		beq $8a0c			beq 	_CRIncMainLoop
.8a32	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a34	90 05		bcc $8a3b			bcc 	_CRNotVariable
.8a36					_CRGoLet:
.8a36	20 96 86	jsr $8696			jsr 	LetCommand
.8a39	80 dc		bra $8a17			bra 	_CRMainLoop
.8a3b					_CRNotVariable:
.8a3b	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a3d	f0 f7		beq $8a36			beq 	_CRGoLet
.8a3f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a41	f0 f3		beq $8a36			beq 	_CRGoLet
.8a43	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a45	f0 ef		beq $8a36			beq 	_CRGoLet
.8a47	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a49	f0 09		beq $8a54			beq 	_CRGoRem
.8a4b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a4d	d0 0b		bne $8a5a			bne 	_CRSyntaxError
.8a4f	20 2a 82	jsr $822a			jsr 	LabelHere
.8a52	80 c3		bra $8a17			bra 	_CRMainLoop
.8a54					_CRGoRem:
.8a54	c8		iny				iny
.8a55	20 97 89	jsr $8997			jsr 	RemCommand
.8a58	80 bd		bra $8a17			bra 	_CRMainLoop
.8a5a					_CRSyntaxError:
.8a5a	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.8a5d					_CRCallVector0:
.8a5d	7c 08 8b	jmp ($8b08,x)			jmp 	(VectorSet0,x)
.8a60					_CRBreak:
.8a60	a9 01		lda #$01		lda	#1
.8a62	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.8a65					CRNoProgram:
.8a65	4c 1c 85	jmp $851c			jmp 	EndCommand
.8a68					EOLCommand:
.8a68	18		clc				clc
.8a69	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a6b	65 30		adc $30				adc 	codePtr
.8a6d	85 30		sta $30				sta 	codePtr
.8a6f	90 02		bcc $8a73			bcc 	_CREExit
.8a71	e6 31		inc $31				inc 	codePtr+1
.8a73					_CREExit:
.8a73	80 8e		bra $8a03			bra 	RunNewLine
.8a75					Shift1Command:
.8a75	b1 30		lda ($30),y			lda 	(codePtr),y
.8a77	c8		iny				iny
.8a78	0a		asl a				asl 	a
.8a79	aa		tax				tax
.8a7a	7c a0 8b	jmp ($8ba0,x)			jmp 	(VectorSet1,x)
.8a7d					Shift2Command:
.8a7d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a7f	c8		iny				iny
.8a80	0a		asl a				asl 	a
.8a81	aa		tax				tax
.8a82	7c ba 8b	jmp ($8bba,x)			jmp 	(VectorSet2,x)
.8a85					Unused1:
.8a85					Unused2:
.8a85					Unused3:
.8a85					Unused4:
.8a85	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
>8a88							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a88					VectorSetPunc:
>8a88	44 90					.word	ShiftLeft                        ; $00 <<
>8a8a	fb 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a8c	f1 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a8e	a4 9f					.word	SyntaxError                      ; $03 !!3
>8a90	a4 9f					.word	SyntaxError                      ; $04 ><
>8a92	05 8e					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a94	47 90					.word	ShiftRight                       ; $06 >>
>8a96	a4 9f					.word	SyntaxError                      ; $07 !!7
>8a98	a4 9f					.word	SyntaxError                      ; $08 !!8
>8a9a	a4 9f					.word	SyntaxError                      ; $09 !!9
>8a9c	a4 9f					.word	SyntaxError                      ; $0a !!10
>8a9e	a4 9f					.word	SyntaxError                      ; $0b !!11
>8aa0	a4 9f					.word	SyntaxError                      ; $0c !!12
>8aa2	a4 9f					.word	SyntaxError                      ; $0d !!13
>8aa4	a4 9f					.word	SyntaxError                      ; $0e !!14
>8aa6	a4 9f					.word	SyntaxError                      ; $0f !!15
>8aa8	a4 9f					.word	SyntaxError                      ; $10 @
>8aaa	a4 9f					.word	SyntaxError                      ; $11 !!17
>8aac	a4 9f					.word	SyntaxError                      ; $12 !!18
>8aae	a4 9f					.word	SyntaxError                      ; $13 [
>8ab0	c8 8e					.word	IntegerDivide                    ; $14 \
>8ab2	a4 9f					.word	SyntaxError                      ; $15 ]
>8ab4	d5 91					.word	EorInteger                       ; $16 ^
>8ab6	a4 9f					.word	SyntaxError                      ; $17 _
>8ab8	a4 9f					.word	SyntaxError                      ; $18 `
>8aba	a4 9f					.word	SyntaxError                      ; $19 !!25
>8abc	a4 9f					.word	SyntaxError                      ; $1a !!26
>8abe	a4 9f					.word	SyntaxError                      ; $1b {
>8ac0	8f 91					.word	OraInteger                       ; $1c |
>8ac2	a4 9f					.word	SyntaxError                      ; $1d }
>8ac4	a4 9f					.word	SyntaxError                      ; $1e ~
>8ac6	a4 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ac8	a4 9f					.word	SyntaxError                      ; $20
>8aca	1b 92					.word	WordIndirect                     ; $21 !
>8acc	a4 9f					.word	SyntaxError                      ; $22 "
>8ace	a4 9f					.word	SyntaxError                      ; $23 #
>8ad0	a4 9f					.word	SyntaxError                      ; $24 $
>8ad2	15 8f					.word	IntegerModulus                   ; $25 %
>8ad4	49 91					.word	AndInteger                       ; $26 &
>8ad6	a4 9f					.word	SyntaxError                      ; $27 '
>8ad8	a4 9f					.word	SyntaxError                      ; $28 (
>8ada	a4 9f					.word	SyntaxError                      ; $29 )
>8adc	8a 8f					.word	MulInteger                       ; $2a *
>8ade	db 90					.word	AddInteger                       ; $2b +
>8ae0	a4 9f					.word	SyntaxError                      ; $2c ,
>8ae2	1e 91					.word	SubInteger                       ; $2d -
>8ae4	a4 9f					.word	SyntaxError                      ; $2e .
>8ae6	06 94					.word	FDivideCommand                   ; $2f /
>8ae8	a4 9f					.word	SyntaxError                      ; $30 0
>8aea	a4 9f					.word	SyntaxError                      ; $31 1
>8aec	a4 9f					.word	SyntaxError                      ; $32 2
>8aee	a4 9f					.word	SyntaxError                      ; $33 3
>8af0	a4 9f					.word	SyntaxError                      ; $34 4
>8af2	a4 9f					.word	SyntaxError                      ; $35 5
>8af4	a4 9f					.word	SyntaxError                      ; $36 6
>8af6	a4 9f					.word	SyntaxError                      ; $37 7
>8af8	a4 9f					.word	SyntaxError                      ; $38 8
>8afa	a4 9f					.word	SyntaxError                      ; $39 9
>8afc	a4 9f					.word	SyntaxError                      ; $3a :
>8afe	a4 9f					.word	SyntaxError                      ; $3b ;
>8b00	dd 8d					.word	BinaryCompareLess                ; $3c <
>8b02	d3 8d					.word	BinaryCompareEqual               ; $3d =
>8b04	e7 8d					.word	BinaryCompareGreater             ; $3e >
>8b06	42 92					.word	ByteIndirect                     ; $3f ?
.8b08					VectorSet0:
>8b08	68 8a					.word	EOLCommand                       ; $80 !0:EOF
>8b0a	75 8a					.word	Shift1Command                    ; $81 !1:SH1
>8b0c	7d 8a					.word	Shift2Command                    ; $82 !2:SH2
>8b0e	76 99					.word	AbsUnary                         ; $83 ABS(
>8b10	86 99					.word	AllocUnary                       ; $84 ALLOC(
>8b12	f6 99					.word	AscUnary                         ; $85 ASC(
>8b14	c1 9b					.word	ChrUnary                         ; $86 CHR$(
>8b16	26 a5					.word	UnaryEvent                       ; $87 EVENT(
>8b18	cf 8d					.word	UnaryFalse                       ; $88 FALSE
>8b1a	03 9a					.word	FracUnary                        ; $89 FRAC(
>8b1c	bc a4					.word	UnaryHit                         ; $8a HIT(
>8b1e	19 9a					.word	IntUnary                         ; $8b INT(
>8b20	80 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b22	b6 a5					.word	UnaryJoyB                        ; $8d JOYB(
>8b24	8f a5					.word	UnaryJoyX                        ; $8e JOYX(
>8b26	92 a5					.word	UnaryJoyY                        ; $8f JOYY(
>8b28	9b 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b2a	2b 9a					.word	LenUnary                         ; $91 LEN(
>8b2c	49 9a					.word	Unary_Max                        ; $92 MAX(
>8b2e	c5 9c					.word	Unary_Mid                        ; $93 MID$(
>8b30	45 9a					.word	Unary_Min                        ; $94 MIN(
>8b32	a0 9a					.word	Unary_Not                        ; $95 NOT(
>8b34	b6 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b36	ab 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b38	d5 9a					.word	Unary_Rnd                        ; $98 RND(
>8b3a	56 9b					.word	SgnUnary                         ; $99 SGN(
>8b3c	d3 9b					.word	SpcUnary                         ; $9a SPC(
>8b3e	ee 9b					.word	Unary_Str                        ; $9b STR$(
>8b40	ca a5					.word	UnaryTimer                       ; $9c TIMER(
>8b42	c3 8d					.word	UnaryTrue                        ; $9d TRUE
>8b44	76 9b					.word	ValUnary                         ; $9e VAL(
>8b46	1f 85					.word	ForCommand                       ; $9f FOR
>8b48	6c 86					.word	IfCommand                        ; $a0 IF
>8b4a	85 8a					.word	Unused1                          ; $a1 PROC
>8b4c	a4 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b4e	0f 8d					.word	Command_WHILE                    ; $a3 WHILE
>8b50	95 86					.word	EndIf                            ; $a4 ENDIF
>8b52	30 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b54	d9 85					.word	NextCommand                      ; $a6 NEXT
>8b56	85 8a					.word	Unused4                          ; $a7 THEN
>8b58	ad 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b5a	30 8d					.word	Command_WEND                     ; $a9 WEND
>8b5c	a4 9f					.word	SyntaxError                      ; $aa BY
>8b5e	bd 83					.word	CallCommand                      ; $ab CALL
>8b60	5e a2					.word	CircleCommand                    ; $ac CIRCLE
>8b62	f7 83					.word	ClearCommand                     ; $ad CLEAR
>8b64	4f 84					.word	ClearScreen                      ; $ae CLS
>8b66	a4 9f					.word	SyntaxError                      ; $af COLOR
>8b68	a4 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b6a	57 84					.word	Command_Data                     ; $b1 DATA
>8b6c	5f 84					.word	DimCommand                       ; $b2 DIM
>8b6e	85 8a					.word	Unused3                          ; $b3 DOWNTO
>8b70	8e 86					.word	ElseCode                         ; $b4 ELSE
>8b72	a4 9f					.word	SyntaxError                      ; $b5 FROM
>8b74	8a a4					.word	GfxCommand                       ; $b6 GFX
>8b76	32 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b78	50 86					.word	GotoCommand                      ; $b8 GOTO
>8b7a	a4 9f					.word	SyntaxError                      ; $b9 HERE
>8b7c	88 a2					.word	ImageCommand                     ; $ba IMAGE
>8b7e	96 86					.word	LetCommand                       ; $bb LET
>8b80	dd a2					.word	LineCommand                      ; $bc LINE
>8b82	8c 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b84	a4 9f					.word	SyntaxError                      ; $be OFF
>8b86	a4 9f					.word	SyntaxError                      ; $bf ON
>8b88	a4 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b8a	e2 a4					.word	PaletteCommand                   ; $c1 PALETTE
>8b8c	d6 a2					.word	PlotCommand                      ; $c2 PLOT
>8b8e	63 88					.word	Command_Print                    ; $c3 PRINT
>8b90	3e 89					.word	Command_Read                     ; $c4 READ
>8b92	5a a2					.word	RectangleCommand                 ; $c5 RECT
>8b94	97 89					.word	RemCommand                       ; $c6 REM
>8b96	42 86					.word	Command_RETURN                   ; $c7 RETURN
>8b98	a4 9f					.word	SyntaxError                      ; $c8 SOLID
>8b9a	69 a2					.word	SpriteCommand                    ; $c9 SPRITE
>8b9c	a5 a2					.word	TextCommand                      ; $ca TEXT
>8b9e	85 8a					.word	Unused2                          ; $cb TO
.8ba0					VectorSet1:
>8ba0	a4 9f					.word	SyntaxError                      ; $80 !0:EOF
>8ba2	a4 9f					.word	SyntaxError                      ; $81 !1:SH1
>8ba4	a4 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba6	8e 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ba8	ad 83					.word	AssertCommand                    ; $84 ASSERT
>8baa	2a a4					.word	BitmapCtrl                       ; $85 BITMAP
>8bac	1c 85					.word	EndCommand                       ; $86 END
>8bae	eb 86					.word	Command_List                     ; $87 LIST
>8bb0	53 88					.word	NewCommand                       ; $88 NEW
>8bb2	c6 89					.word	Command_Restore                  ; $89 RESTORE
>8bb4	f8 89					.word	CommandRUN                       ; $8a RUN
>8bb6	6f a4					.word	SpritesCtrl                      ; $8b SPRITES
>8bb8	42 8c					.word	StopCommand                      ; $8c STOP
.8bba					VectorSet2:
>8bba	a4 9f					.word	SyntaxError                      ; $80 !0:EOF
>8bbc	a4 9f					.word	SyntaxError                      ; $81 !1:SH1
>8bbe	a4 9f					.word	SyntaxError                      ; $82 !2:SH2
>8bc0	63 9e					.word	Assemble_adc                     ; $83 ADC
>8bc2	5b 9e					.word	Assemble_and                     ; $84 AND
>8bc4	77 9e					.word	Assemble_asl                     ; $85 ASL
>8bc6	e1 9e					.word	Assemble_bcc                     ; $86 BCC
>8bc8	e5 9e					.word	Assemble_bcs                     ; $87 BCS
>8bca	ed 9e					.word	Assemble_beq                     ; $88 BEQ
>8bcc	a4 9e					.word	Assemble_bit                     ; $89 BIT
>8bce	d5 9e					.word	Assemble_bmi                     ; $8a BMI
>8bd0	e9 9e					.word	Assemble_bne                     ; $8b BNE
>8bd2	d1 9e					.word	Assemble_bpl                     ; $8c BPL
>8bd4	f1 9e					.word	Assemble_bra                     ; $8d BRA
>8bd6	f5 9e					.word	Assemble_brk                     ; $8e BRK
>8bd8	d9 9e					.word	Assemble_bvc                     ; $8f BVC
>8bda	dd 9e					.word	Assemble_bvs                     ; $90 BVS
>8bdc	fd 9e					.word	Assemble_clc                     ; $91 CLC
>8bde	51 9f					.word	Assemble_cld                     ; $92 CLD
>8be0	11 9f					.word	Assemble_cli                     ; $93 CLI
>8be2	41 9f					.word	Assemble_clv                     ; $94 CLV
>8be4	6f 9e					.word	Assemble_cmp                     ; $95 CMP
>8be6	b8 9e					.word	Assemble_cpx                     ; $96 CPX
>8be8	b3 9e					.word	Assemble_cpy                     ; $97 CPY
>8bea	95 9e					.word	Assemble_dec                     ; $98 DEC
>8bec	4d 9f					.word	Assemble_dex                     ; $99 DEX
>8bee	29 9f					.word	Assemble_dey                     ; $9a DEY
>8bf0	5f 9e					.word	Assemble_eor                     ; $9b EOR
>8bf2	9a 9e					.word	Assemble_inc                     ; $9c INC
>8bf4	5d 9f					.word	Assemble_inx                     ; $9d INX
>8bf6	49 9f					.word	Assemble_iny                     ; $9e INY
>8bf8	cc 9e					.word	Assemble_jmp                     ; $9f JMP
>8bfa	c7 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bfc	6b 9e					.word	Assemble_lda                     ; $a1 LDA
>8bfe	90 9e					.word	Assemble_ldx                     ; $a2 LDX
>8c00	ae 9e					.word	Assemble_ldy                     ; $a3 LDY
>8c02	81 9e					.word	Assemble_lsr                     ; $a4 LSR
>8c04	61 9f					.word	Assemble_nop                     ; $a5 NOP
>8c06	57 9e					.word	Assemble_ora                     ; $a6 ORA
>8c08	0d 9f					.word	Assemble_pha                     ; $a7 PHA
>8c0a	f9 9e					.word	Assemble_php                     ; $a8 PHP
>8c0c	55 9f					.word	Assemble_phx                     ; $a9 PHX
>8c0e	15 9f					.word	Assemble_phy                     ; $aa PHY
>8c10	1d 9f					.word	Assemble_pla                     ; $ab PLA
>8c12	01 9f					.word	Assemble_plp                     ; $ac PLP
>8c14	69 9f					.word	Assemble_plx                     ; $ad PLX
>8c16	25 9f					.word	Assemble_ply                     ; $ae PLY
>8c18	7c 9e					.word	Assemble_rol                     ; $af ROL
>8c1a	86 9e					.word	Assemble_ror                     ; $b0 ROR
>8c1c	09 9f					.word	Assemble_rti                     ; $b1 RTI
>8c1e	19 9f					.word	Assemble_rts                     ; $b2 RTS
>8c20	73 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c22	05 9f					.word	Assemble_sec                     ; $b4 SEC
>8c24	65 9f					.word	Assemble_sed                     ; $b5 SED
>8c26	21 9f					.word	Assemble_sei                     ; $b6 SEI
>8c28	67 9e					.word	Assemble_sta                     ; $b7 STA
>8c2a	59 9f					.word	Assemble_stp                     ; $b8 STP
>8c2c	8b 9e					.word	Assemble_stx                     ; $b9 STX
>8c2e	a9 9e					.word	Assemble_sty                     ; $ba STY
>8c30	9f 9e					.word	Assemble_stz                     ; $bb STZ
>8c32	3d 9f					.word	Assemble_tax                     ; $bc TAX
>8c34	39 9f					.word	Assemble_tay                     ; $bd TAY
>8c36	c2 9e					.word	Assemble_trb                     ; $be TRB
>8c38	bd 9e					.word	Assemble_tsb                     ; $bf TSB
>8c3a	45 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c3c	2d 9f					.word	Assemble_txa                     ; $c1 TXA
>8c3e	35 9f					.word	Assemble_txs                     ; $c2 TXS
>8c40	31 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c42					StopCommand:
.8c42	a9 08		lda #$08		lda	#8
.8c44	4c 57 8d	jmp $8d57		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c47					ProcedureScan:
.8c47	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c49	85 30		sta $30				sta 	codePtr
.8c4b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c4d	85 31		sta $31				sta 	codePtr+1
.8c4f					_PSLoop:
.8c4f	b2 30		lda ($30)			lda 	(codePtr)
.8c51	f0 42		beq $8c95			beq 	_PSExit
.8c53	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c55	b1 30		lda ($30),y			lda 	(codePtr),y
.8c57	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c59	d0 2d		bne $8c88			bne 	_PSNext
.8c5b	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5e	29 c0		and #$c0			and 	#$C0
.8c60	c9 40		cmp #$40			cmp 	#$40
.8c62	d0 32		bne $8c96			bne 	_PSSyntax
.8c64	b1 30		lda ($30),y			lda 	(codePtr),y
.8c66	18		clc				clc
.8c67	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c69	85 37		sta $37				sta 	zTemp0+1
.8c6b	c8		iny				iny 								; LSB
.8c6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6e	85 36		sta $36				sta 	zTemp0
.8c70	c8		iny				iny 								; character after variable call.
.8c71	98		tya				tya 								; save Y offset at +7
.8c72	a0 07		ldy #$07			ldy 	#7
.8c74	91 36		sta ($36),y			sta 	(zTemp0),y
.8c76	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c78	a0 02		ldy #$02			ldy 	#2
.8c7a	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c7e					_PSCopy:
.8c7e	b5 30		lda $30,x			lda 	safePtr,x
.8c80	c8		iny				iny
.8c81	91 36		sta ($36),y			sta 	(zTemp0),y
.8c83	e8		inx				inx
.8c84	e0 04		cpx #$04			cpx 	#4
.8c86	d0 f6		bne $8c7e			bne 	_PSCopy
.8c88					_PSNext:
.8c88	18		clc				clc
.8c89	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c8b	65 30		adc $30				adc 	codePtr
.8c8d	85 30		sta $30				sta 	codePtr
.8c8f	90 02		bcc $8c93			bcc 	_CREExit
.8c91	e6 31		inc $31				inc 	codePtr+1
.8c93					_CREExit:
.8c93	80 ba		bra $8c4f			bra 	_PSLoop
.8c95					_PSExit:
.8c95	60		rts				rts
.8c96					_PSSyntax:
.8c96	4c a4 9f	jmp $9fa4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c99					ScanForward:
.8c99	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c9b	86 37		stx $37				stx 	zTemp0+1
.8c9d	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c9f					_ScanLoop:
.8c9f	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca1	c8		iny				iny
.8ca2	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8ca4	d0 0e		bne $8cb4			bne 	_ScanGoNext
.8ca6	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ca8	f0 04		beq $8cae			beq 	_ScanMatch
.8caa	c5 37		cmp $37				cmp 	zTemp0+1
.8cac	d0 06		bne $8cb4			bne 	_ScanGoNext
.8cae					_ScanMatch:
.8cae	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8cb0	d0 01		bne $8cb3			bne 	_ScanNotEndEOL
.8cb2	88		dey				dey
.8cb3					_ScanNotEndEOL:
.8cb3	60		rts				rts
.8cb4					_ScanGoNext:
.8cb4	20 b9 8c	jsr $8cb9			jsr  	ScanForwardOne
.8cb7	80 e6		bra $8c9f			bra 	_ScanLoop
.8cb9					ScanForwardOne:
.8cb9	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8cbb	90 3e		bcc $8cfb			bcc 	_SFWExit
.8cbd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8cbf	90 18		bcc $8cd9			bcc 	_ScanSkipOne
.8cc1	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8cc3	b0 2f		bcs $8cf4			bcs 	_ScanSkipData
.8cc5	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cc7	90 32		bcc $8cfb			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cc9	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8ccb	b0 2e		bcs $8cfb			bcs 	_SFWExit
.8ccd	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ccf	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cd1	b0 28		bcs $8cfb			bcs 	_SFWExit
.8cd3	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cd5	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cd7	80 22		bra $8cfb			bra 	_SFWExit
.8cd9					_ScanSkipOne:
.8cd9	c8		iny				iny 								; consume the extra one.
.8cda	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cdc	d0 1d		bne $8cfb			bne 	_SFWExit
.8cde	18		clc				clc
.8cdf	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ce1	65 30		adc $30				adc 	codePtr
.8ce3	85 30		sta $30				sta 	codePtr
.8ce5	90 02		bcc $8ce9			bcc 	_CREExit
.8ce7	e6 31		inc $31				inc 	codePtr+1
.8ce9					_CREExit:
.8ce9	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ceb	b2 30		lda ($30)			lda 	(codePtr)
.8ced	d0 0c		bne $8cfb			bne 	_SFWExit 					; if not zero, more to scan
.8cef	a9 13		lda #$13		lda	#19
.8cf1	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.8cf4					_ScanSkipData:
.8cf4	88		dey				dey 								; point at data token
.8cf5	c8		iny				iny
.8cf6	98		tya				tya
.8cf7	38		sec				sec
.8cf8	71 30		adc ($30),y			adc 	(codePtr),y
.8cfa	a8		tay				tay
.8cfb					_SFWExit:
.8cfb	60		rts				rts
.8cfc					ScanGetCurrentLineStep:
.8cfc	64 38		stz $38				stz 	zTemp1
.8cfe	a0 03		ldy #$03			ldy 	#3
.8d00					_SGCLSLoop:
.8d00	b1 30		lda ($30),y			lda 	(codePtr),y
.8d02	c8		iny				iny
.8d03	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8d05	f0 05		beq $8d0c			beq 	_SGCLSExit
.8d07	20 b9 8c	jsr $8cb9			jsr 	ScanForwardOne
.8d0a	80 f4		bra $8d00			bra 	_SGCLSLoop
.8d0c					_SGCLSExit:
.8d0c	a5 38		lda $38				lda 	zTemp1
.8d0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d0f					Command_WHILE:
.8d0f	5a		phy				phy 								; save position of the test
.8d10	a2 00		ldx #$00			ldx 	#0
.8d12	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; work out the number
.8d15	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; check if zero
.8d18	f0 0e		beq $8d28			beq 	_WHExitLoop 				; if so exit the loop
.8d1a	98		tya				tya 								; position *after* test.
.8d1b	7a		ply				ply 								; restore position before test, at WHILE
.8d1c	88		dey				dey
.8d1d	48		pha				pha 								; push after test on the stack
.8d1e	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d20	20 08 a6	jsr $a608			jsr 	StackOpen
.8d23	20 4c a6	jsr $a64c			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d26	7a		ply				ply 								; restore the position *after* the test
.8d27	60		rts				rts
.8d28					_WHExitLoop:
.8d28	68		pla				pla 								; throw post loop position
.8d29	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d2b	aa		tax				tax
.8d2c	20 99 8c	jsr $8c99			jsr 	ScanForward
.8d2f	60		rts				rts
.8d30					Command_WEND:
.8d30	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d32	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d34	20 34 a6	jsr $a634			jsr 	StackCheckFrame
.8d37	20 5d a6	jsr $a65d			jsr 	STKLoadCodePosition 		; loop back
.8d3a	20 26 a6	jsr $a626			jsr 	StackClose		 			; erase the frame
.8d3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d3e					CheckRightBracket:
.8d3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d40	c8		iny				iny
.8d41	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d43	d0 0f		bne $8d54			bne 	CNAFail
.8d45	60		rts				rts
.8d46					CheckComma:
.8d46	b1 30		lda ($30),y			lda 	(codePtr),y
.8d48	c8		iny				iny
.8d49	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d4b	d0 07		bne $8d54			bne 	CNAFail
.8d4d	60		rts				rts
.8d4e					CheckNextA:
.8d4e	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d50	d0 02		bne $8d54			bne 	CNAFail
.8d52	c8		iny				iny 								; skip character
.8d53	60		rts				rts 								; and exit
.8d54					CNAFail:
.8d54	4c a4 9f	jmp $9fa4			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d57					ErrorHandler:
.8d57	a8		tay				tay 								; find the error text
.8d58	f0 49		beq $8da3			beq 	_EHEnd
.8d5a	a2 00		ldx #$00			ldx 	#0
.8d5c	a9 bd		lda #$bd			lda 	#((ErrorText) & $FF)
.8d5e	85 36		sta $36				sta 	0+zTemp0
.8d60	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d62	85 37		sta $37				sta 	1+zTemp0
.8d64					_EHFind:
.8d64	88		dey				dey 								; found the error text ?
.8d65	f0 0e		beq $8d75			beq 	_EHFound
.8d67					_EHFindZero:
.8d67	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d69	e6 36		inc $36				inc 	zTemp0
.8d6b	d0 02		bne $8d6f			bne 	_EHFNoCarry
.8d6d	e6 37		inc $37				inc 	zTemp0+1
.8d6f					_EHFNoCarry:
.8d6f	c9 00		cmp #$00			cmp 	#0
.8d71	d0 f4		bne $8d67			bne 	_EHFindZero
.8d73	80 ef		bra $8d64			bra 	_EHFind
.8d75					_EHFound:
.8d75	a5 36		lda $36				lda 	zTemp0 						; print message
.8d77	a6 37		ldx $37				ldx 	zTemp0+1
.8d79	20 b0 8d	jsr $8db0			jsr 	PrintStringXA
.8d7c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d7e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d80	d0 05		bne $8d87			bne 	_EHAtMsg
.8d82	c8		iny				iny
.8d83	b1 30		lda ($30),y			lda 	(codePtr),y
.8d85	f0 17		beq $8d9e			beq 	_EHCREnd
.8d87					_EHAtMsg:
.8d87	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d89	a9 a6		lda #$a6			lda 	#_AtMsg & $FF
.8d8b	20 b0 8d	jsr $8db0			jsr 	PrintStringXA
.8d8e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d90	b1 30		lda ($30),y			lda 	(codePtr),y
.8d92	48		pha				pha
.8d93	c8		iny				iny
.8d94	b1 30		lda ($30),y			lda 	(codePtr),y
.8d96	aa		tax				tax
.8d97	68		pla				pla
.8d98	20 69 92	jsr $9269			jsr 	LCLConvertInt16 				; convert XA to string
.8d9b	20 b0 8d	jsr $8db0			jsr 	PrintStringXA 				; and print it.
.8d9e					_EHCREnd:
.8d9e	a9 0d		lda #$0d			lda 	#13 						; new line
.8da0	20 48 a7	jsr $a748			jsr 	EXTPrintCharacter
.8da3					_EHEnd:
.8da3	4c 5e 83	jmp $835e			jmp 	WarmStart
>8da6	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8dae	20 00
.8db0					PrintStringXA:
.8db0	5a		phy				phy
.8db1	86 37		stx $37				stx 	zTemp0+1
.8db3	85 36		sta $36				sta 	zTemp0
.8db5	a0 00		ldy #$00			ldy 	#0
.8db7					_PSXALoop:
.8db7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db9	f0 06		beq $8dc1			beq 	_PSXAExit
.8dbb	20 48 a7	jsr $a748			jsr 	EXTPrintCharacter
.8dbe	c8		iny				iny
.8dbf	80 f6		bra $8db7			bra 	_PSXALoop
.8dc1					_PSXAExit:
.8dc1	7a		ply				ply
.8dc2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8dc3					UnaryTrue:
.8dc3	fa		plx				plx
.8dc4					ReturnTrue:
.8dc4	a9 01		lda #$01			lda 	#1  						; set to 1
.8dc6	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.8dc9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dcb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dce	60		rts				rts
.8dcf					UnaryFalse:
.8dcf	fa		plx				plx
.8dd0					ReturnFalse:
.8dd0	4c 1a 9e	jmp $9e1a			jmp 	NSMSetZero 					; set it all to zero
.8dd3					BinaryCompareEqual:
.8dd3	fa		plx				plx
.8dd4	20 0f 8e	jsr $8e0f			jsr 	CompareBaseCode
.8dd7	c9 00		cmp #$00			cmp 	#0
.8dd9	f0 e9		beq $8dc4			beq 	ReturnTrue
.8ddb	80 f3		bra $8dd0			bra 	ReturnFalse
.8ddd					BinaryCompareLess:
.8ddd	fa		plx				plx
.8dde	20 0f 8e	jsr $8e0f			jsr 	CompareBaseCode
.8de1	c9 ff		cmp #$ff			cmp 	#$FF
.8de3	f0 df		beq $8dc4			beq 	ReturnTrue
.8de5	80 e9		bra $8dd0			bra 	ReturnFalse
.8de7					BinaryCompareGreater:
.8de7	fa		plx				plx
.8de8	20 0f 8e	jsr $8e0f			jsr 	CompareBaseCode
.8deb	c9 01		cmp #$01			cmp 	#1
.8ded	f0 d5		beq $8dc4			beq 	ReturnTrue
.8def	80 df		bra $8dd0			bra 	ReturnFalse
.8df1					BinaryCompareNotEqual:
.8df1	fa		plx				plx
.8df2	20 0f 8e	jsr $8e0f			jsr 	CompareBaseCode
.8df5	c9 00		cmp #$00			cmp 	#0
.8df7	d0 cb		bne $8dc4			bne 	ReturnTrue
.8df9	80 d5		bra $8dd0			bra 	ReturnFalse
.8dfb					BinaryCompareLessEqual:
.8dfb	fa		plx				plx
.8dfc	20 0f 8e	jsr $8e0f			jsr 	CompareBaseCode
.8dff	c9 01		cmp #$01			cmp 	#1
.8e01	d0 c1		bne $8dc4			bne 	ReturnTrue
.8e03	80 cb		bra $8dd0			bra 	ReturnFalse
.8e05					BinaryCompareGreaterEqual:
.8e05	fa		plx				plx
.8e06	20 0f 8e	jsr $8e0f			jsr 	CompareBaseCode
.8e09	c9 ff		cmp #$ff			cmp 	#$FF
.8e0b	d0 b7		bne $8dc4			bne 	ReturnTrue
.8e0d	80 c1		bra $8dd0			bra 	ReturnFalse
.8e0f					CompareBaseCode:
.8e0f	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; make both values if references.
.8e12	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8e15	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e18	29 10		and #$10			and 	#NSTString
.8e1a	d0 40		bne $8e5c			bne 	_CBCString
.8e1c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e1f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e22	d0 3b		bne $8e5f			bne 	_CBCFloat
.8e24	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e27	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e2a	29 08		and #$08			and 	#NSTFloat
.8e2c	d0 31		bne $8e5f			bne 	_CBCFloat
.8e2e	20 62 8e	jsr $8e62			jsr 	CompareFixMinusZero
.8e31	e8		inx				inx
.8e32	20 62 8e	jsr $8e62			jsr 	CompareFixMinusZero
.8e35	ca		dex				dex
.8e36	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e39	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e3c	10 0b		bpl $8e49			bpl 	_CDCSameSign
.8e3e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e41	30 16		bmi $8e59			bmi 	_CBCLess 					; return $FF
.8e43					_CBCGreater:
.8e43	a9 01		lda #$01			lda 	#1
.8e45	60		rts				rts
.8e46					_CBCEqual:
.8e46	a9 00		lda #$00			lda 	#0
.8e48	60		rts				rts
.8e49					_CDCSameSign:
.8e49	20 b5 90	jsr $90b5			jsr 	SubTopTwoStack 				; unsigned subtract
.8e4c	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; or the mantissa together
.8e4f	f0 f5		beq $8e46			beq 	_CBCEqual 					; -0 == 0
.8e51	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e54	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e57	10 ea		bpl $8e43			bpl 	_CBCGreater
.8e59					_CBCLess:
.8e59	a9 ff		lda #$ff			lda 	#$FF
.8e5b	60		rts				rts
.8e5c					_CBCString:
.8e5c	4c 0b 90	jmp $900b			jmp 	CompareStrings
.8e5f					_CBCFloat:
.8e5f	4c ec 93	jmp $93ec			jmp 	CompareFloat
.8e62					CompareFixMinusZero:
.8e62	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero
.8e65	d0 03		bne $8e6a			bne 	_CFXMZNotZero
.8e67	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e6a					_CFXMZNotZero:
.8e6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e6b					StringConcat:
.8e6b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e6e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e71	29 18		and #$18			and 	#NSBTypeMask
.8e73	c9 10		cmp #$10			cmp 	#NSTString
.8e75	d0 4e		bne $8ec5			bne		_SCType
.8e77	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e79	e8		inx				inx
.8e7a	20 98 8e	jsr $8e98			jsr 	_SCSetupZ0 					; setup for second
.8e7d	20 a3 8e	jsr $8ea3			jsr 	_SCLengthZ0 				; length for second
.8e80	ca		dex				dex
.8e81	20 98 8e	jsr $8e98			jsr 	_SCSetupZ0 					; setup for first
.8e84	20 a3 8e	jsr $8ea3			jsr 	_SCLengthZ0 				; length for first
.8e87	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e89	20 fb a6	jsr $a6fb			jsr 	StringTempAllocate
.8e8c	20 b6 8e	jsr $8eb6			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e8f	e8		inx				inx
.8e90	20 98 8e	jsr $8e98			jsr 	_SCSetupZ0 					; copy second out
.8e93	20 b6 8e	jsr $8eb6			jsr 	_SCCopy
.8e96	ca		dex				dex
.8e97	60		rts				rts
.8e98					_SCSetupZ0:
.8e98	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e9b	85 36		sta $36				sta 	zTemp0
.8e9d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ea0	85 37		sta $37				sta 	zTemp0+1
.8ea2	60		rts				rts
.8ea3					_SCLengthZ0:
.8ea3	5a		phy				phy
.8ea4	a0 00		ldy #$00			ldy 	#0
.8ea6					_SCLenLoop:
.8ea6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea8	f0 0a		beq $8eb4			beq 	_SCLExit
.8eaa	c8		iny				iny
.8eab	e6 38		inc $38				inc 	zTemp1
.8ead	10 f7		bpl $8ea6			bpl		_SCLenLoop
.8eaf	a9 09		lda #$09		lda	#9
.8eb1	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.8eb4					_SCLExit:
.8eb4	7a		ply				ply
.8eb5	60		rts				rts
.8eb6					_SCCopy:
.8eb6	5a		phy				phy
.8eb7	a0 00		ldy #$00			ldy 	#0
.8eb9					_SCCopyLoop:
.8eb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ebb	f0 06		beq $8ec3			beq 	_SCCExit
.8ebd	20 39 a7	jsr $a739			jsr 	StringTempWrite
.8ec0	c8		iny				iny
.8ec1	80 f6		bra $8eb9			bra 	_SCCopyLoop
.8ec3					_SCCExit:
.8ec3	7a		ply				ply
.8ec4	60		rts				rts
.8ec5					_SCType:
.8ec5	4c ae 9f	jmp $9fae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8ec8					IntegerDivide:
.8ec8	fa		plx				plx
.8ec9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ecc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ecf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ed0	0a		asl a				asl 	a
.8ed1	10 05		bpl $8ed8			bpl 	_NotRef
.8ed3	48		pha				pha
.8ed4	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ed7	68		pla				pla
.8ed8					_NotRef:
.8ed8	0a		asl a				asl 	a
.8ed9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8edb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ede	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ee1	f0 03		beq $8ee6			beq 	_IntegerCode 				; if clear, then we have two integers
.8ee3	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.8ee6					_IntegerCode:
.8ee6	20 08 8f	jsr $8f08			jsr 	CheckDivideZero 			; do div zero check
.8ee9	20 40 8f	jsr $8f40			jsr 	Int32Divide 				; do the division
.8eec	20 fd 8f	jsr $8ffd			jsr 	CalculateSign 				; calculate result sign
.8eef					NSMCopyPlusTwoToZero:
.8eef	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ef2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ef5	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ef8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8efb	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8efe	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8f01	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8f04	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8f07	60		rts				rts
.8f08					CheckDivideZero:
.8f08	e8		inx				inx
.8f09	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero
.8f0c	f0 02		beq $8f10			beq 	_CDVError
.8f0e	ca		dex				dex
.8f0f	60		rts				rts
.8f10					_CDVError:
.8f10	a9 03		lda #$03		lda	#3
.8f12	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.8f15					IntegerModulus:
.8f15	fa		plx				plx
.8f16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f19	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f1c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f1d	0a		asl a				asl 	a
.8f1e	10 05		bpl $8f25			bpl 	_NotRef
.8f20	48		pha				pha
.8f21	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f24	68		pla				pla
.8f25					_NotRef:
.8f25	0a		asl a				asl 	a
.8f26	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f28	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f2b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f2e	f0 03		beq $8f33			beq 	_IntegerCode 				; if clear, then we have two integers
.8f30	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.8f33					_IntegerCode:
.8f33					IntegerModulusNoCheck:
.8f33	20 08 8f	jsr $8f08			jsr 	CheckDivideZero 			; do div zero check
.8f36	20 40 8f	jsr $8f40			jsr 	Int32Divide 				; do the division
.8f39	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f3c	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f3f	60		rts				rts
.8f40					Int32Divide:
.8f40	48		pha				pha 								; save AXY
.8f41	5a		phy				phy
.8f42	20 f1 9d	jsr $9df1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f45	20 16 9e	jsr $9e16			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f48	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f4a					_I32DivideLoop:
.8f4a	e8		inx				inx
.8f4b	e8		inx				inx
.8f4c	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f4f	ca		dex				dex
.8f50	ca		dex				dex
.8f51	20 30 9e	jsr $9e30			jsr 	NSMRotateLeft
.8f54	20 80 8f	jsr $8f80			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f57	90 03		bcc $8f5c			bcc 	_I32DivideNoCarryIn
.8f59	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f5c					_I32DivideNoCarryIn:
.8f5c	88		dey				dey 								; loop round till division completed.
.8f5d	d0 eb		bne $8f4a			bne 	_I32DivideLoop
.8f5f	7a		ply				ply 								; restore AXY and exit
.8f60	68		pla				pla
.8f61	60		rts				rts
.8f62					Int32ShiftDivide:
.8f62	48		pha				pha 								; save AY
.8f63	5a		phy				phy
.8f64	e8		inx				inx 								; clear S[X+2]
.8f65	e8		inx				inx
.8f66	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.8f69	ca		dex				dex
.8f6a	ca		dex				dex
.8f6b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f6d					_I32SDLoop:
.8f6d	20 80 8f	jsr $8f80			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f70	e8		inx				inx
.8f71	e8		inx				inx
.8f72	20 30 9e	jsr $9e30			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f75	ca		dex				dex
.8f76	ca		dex				dex
.8f77	20 30 9e	jsr $9e30			jsr 	NSMRotateLeft
.8f7a	88		dey				dey 	 							; do 31 times
.8f7b	d0 f0		bne $8f6d			bne 	_I32SDLoop
.8f7d	7a		ply				ply 								; restore AY and exit
.8f7e	68		pla				pla
.8f7f	60		rts				rts
.8f80					DivideCheckSubtract:
.8f80	20 b5 90	jsr $90b5			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f83	b0 04		bcs $8f89			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f85	20 8f 90	jsr $908f			jsr 	AddTopTwoStack 				; add it back in
.8f88	18		clc				clc 								; and return False
.8f89					_DCSExit:
.8f89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f8a					MulInteger:
.8f8a	fa		plx				plx
.8f8b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f8e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f91	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f92	0a		asl a				asl 	a
.8f93	10 05		bpl $8f9a			bpl 	_NotRef
.8f95	48		pha				pha
.8f96	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f99	68		pla				pla
.8f9a					_NotRef:
.8f9a	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f9b	30 0b		bmi $8fa8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f9d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fa0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8fa3	f0 06		beq $8fab			beq 	_IntegerCode 				; if clear, then we have two integers
.8fa5	4c c3 94	jmp $94c3			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8fa8					_StringData:
.8fa8	4c b8 9f	jmp $9fb8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8fab					_IntegerCode:
.8fab	20 b8 8f	jsr $8fb8			jsr 	MultiplyShort
.8fae	c9 00		cmp #$00			cmp 	#0
.8fb0	f0 05		beq $8fb7			beq 	_MIExit
.8fb2	a9 04		lda #$04		lda	#4
.8fb4	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.8fb7					_MIExit:
.8fb7	60		rts				rts
.8fb8					MultiplyShort:
.8fb8	5a		phy				phy 								; save Y
.8fb9	20 f1 9d	jsr $9df1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fbc	20 16 9e	jsr $9e16			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fbf	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fc1					_I32MLoop:
.8fc1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fc4	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fc7	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fca	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fcd	f0 28		beq $8ff7			beq 	_I32MExit 					; exit if zero
.8fcf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fd2	29 01		and #$01			and 	#1
.8fd4	f0 0e		beq $8fe4			beq 	_I32MNoAdd
.8fd6	20 8f 90	jsr $908f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fd9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fdc	10 06		bpl $8fe4			bpl 	_I32MNoAdd
.8fde					_I32ShiftRight:
.8fde	20 3d 9e	jsr $9e3d			jsr 	NSMShiftRight 				; shift S[X] right
.8fe1	c8		iny				iny 								; increment shift count
.8fe2	80 0a		bra $8fee			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fe4					_I32MNoAdd:
.8fe4	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fe7	70 f5		bvs $8fde			bvs 	_I32ShiftRight 				; instead.
.8fe9	e8		inx				inx
.8fea	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fed	ca		dex				dex
.8fee					_I32MShiftUpper:
.8fee	e8		inx				inx 								; shift S[X+2] right
.8fef	e8		inx				inx
.8ff0	20 3d 9e	jsr $9e3d			jsr 	NSMShiftRight
.8ff3	ca		dex				dex
.8ff4	ca		dex				dex
.8ff5	80 ca		bra $8fc1			bra 	_I32MLoop 					; try again.
.8ff7					_I32MExit:
.8ff7	20 fd 8f	jsr $8ffd			jsr 	CalculateSign
.8ffa	98		tya				tya 								; shift in A
.8ffb	7a		ply				ply 								; restore Y and exit
.8ffc	60		rts				rts
.8ffd					CalculateSign:
.8ffd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9000	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.9003	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9006	0a		asl a				asl 	a 							; shift bit 7 into carry
.9007	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.900a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.900b					CompareStrings:
.900b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.900e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9011	29 10		and #$10			and 	#NSBIsString
.9013	f0 2c		beq $9041			beq 	_CSTypeError
.9015	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9018	85 36		sta $36				sta 	zTemp0
.901a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.901d	85 37		sta $37				sta 	zTemp0+1
.901f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9022	85 38		sta $38				sta 	zTemp1
.9024	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9027	85 39		sta $39				sta 	zTemp1+1
.9029	5a		phy				phy 								; save Y so we can access strings
.902a	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.902c					_CSLoop:
.902c	c8		iny				iny
.902d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.902f	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9031	d0 06		bne $9039			bne 	_CSDifferent
.9033	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9035	d0 f5		bne $902c			bne 	_CSLoop 					; still comparing
.9037					_CSExit:
.9037	7a		ply				ply 								; reached end, return zero in A from EOS
.9038	60		rts				rts
.9039					_CSDifferent:
.9039	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.903b	90 fa		bcc $9037			bcc		_CSExit
.903d	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.903f	80 f6		bra $9037			bra 	_CSExit
.9041					_CSTypeError:
.9041	4c ae 9f	jmp $9fae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9044					ShiftLeft:
.9044	38		sec				sec
.9045	80 01		bra $9048			bra 	ShiftMain
.9047					ShiftRight:
.9047	18		clc				clc
.9048					ShiftMain:
.9048	fa		plx				plx 								; restore X
.9049	08		php				php 								; save direction
.904a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.904d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9050	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9051	0a		asl a				asl 	a
.9052	10 05		bpl $9059			bpl 	_NotRef
.9054	48		pha				pha
.9055	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9058	68		pla				pla
.9059					_NotRef:
.9059	0a		asl a				asl 	a
.905a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.905c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.905f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9062	f0 03		beq $9067			beq 	_IntegerCode 				; if clear, then we have two integers
.9064	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.9067					_IntegerCode:
.9067	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.906a	29 e0		and #$e0			and 	#$E0
.906c	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.906f	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9072	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9075	d0 13		bne $908a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9077					_SMLoop:
.9077	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.907a	30 11		bmi $908d			bmi 	_SMExit 					; exit if done.
.907c	28		plp				plp 								; restore direcition setting
.907d	08		php				php
.907e	90 05		bcc $9085			bcc 	_SMRight
.9080	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; shift left if CS
.9083	80 f2		bra $9077			bra 	_SMLoop
.9085					_SMRight:
.9085	20 3d 9e	jsr $9e3d			jsr 	NSMShiftRight 				; shift right if CC
.9088	80 ed		bra $9077			bra 	_SMLoop
.908a					_SMExit0:
.908a	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero 					; return zero.
.908d					_SMExit:
.908d	28		plp				plp 								; throw direction
.908e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.908f					AddTopTwoStack:
.908f	18		clc				clc
.9090	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9093	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9096	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9099	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.909c	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.909f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90a2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90a5	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.90a8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90ab	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90ae	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.90b1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90b4	60		rts				rts
.90b5					SubTopTwoStack:
.90b5	38		sec				sec
.90b6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90b9	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90bc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90bf	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90c2	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90c5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90c8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90cb	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90ce	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90d1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90d4	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90d7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90da	60		rts				rts
.90db					AddInteger:
.90db	fa		plx				plx
.90dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90df	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90e3	0a		asl a				asl 	a
.90e4	10 05		bpl $90eb			bpl 	_NotRef
.90e6	48		pha				pha
.90e7	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90ea	68		pla				pla
.90eb					_NotRef:
.90eb	0a		asl a				asl 	a 							; put MSB of type into A:7
.90ec	30 0b		bmi $90f9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90f1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90f4	f0 06		beq $90fc			beq 	_IntegerCode 				; if clear, then we have two integers
.90f6	4c 43 93	jmp $9343			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90f9					_StringData:
.90f9	4c 6b 8e	jmp $8e6b			jmp 	StringConcat							; at least one string - don't know both are strings.
.90fc					_IntegerCode:
.90fc					AddCode:
.90fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90ff	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9102	10 8b		bpl $908f			bpl 	AddTopTwoStack
.9104	20 b5 90	jsr $90b5			jsr 	SubTopTwoStack 				; do a physical subtraction
.9107	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.910a	10 09		bpl $9115			bpl 	_AddExit
.910c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.910f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9112	20 cf 9d	jsr $9dcf			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9115					_AddExit:
.9115	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; check for -0
.9118	d0 03		bne $911d			bne 	_AddNonZero
.911a	9e 00 04	stz $0400,x			stz 	NSStatus,x
.911d					_AddNonZero:
.911d	60		rts				rts
.911e					SubInteger:
.911e	fa		plx				plx
.911f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9122	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9125	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9126	0a		asl a				asl 	a
.9127	10 05		bpl $912e			bpl 	_NotRef
.9129	48		pha				pha
.912a	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.912d	68		pla				pla
.912e					_NotRef:
.912e	0a		asl a				asl 	a 							; put MSB of type into A:7
.912f	30 0b		bmi $913c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9131	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9134	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9137	f0 06		beq $913f			beq 	_IntegerCode 				; if clear, then we have two integers
.9139	4c 48 93	jmp $9348			jmp 	FloatingPointSub 							; otherwise at least one float.
.913c					_StringData:
.913c	4c b8 9f	jmp $9fb8			jmp 	NotDoneError							; at least one string - don't know both are strings.
.913f					_IntegerCode:
.913f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9142	49 80		eor #$80			eor 	#$80
.9144	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9147	80 b3		bra $90fc			bra 	AddCode 					; and do the same code as add.
.9149					AndInteger:
.9149	fa		plx				plx
.914a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.914d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9150	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9151	0a		asl a				asl 	a
.9152	10 05		bpl $9159			bpl 	_NotRef
.9154	48		pha				pha
.9155	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9158	68		pla				pla
.9159					_NotRef:
.9159	0a		asl a				asl 	a
.915a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.915c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.915f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9162	f0 03		beq $9167			beq 	_IntegerCode 				; if clear, then we have two integers
.9164	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.9167					_IntegerCode:
.9167	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.916a	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.916d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9170	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9173	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9176	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9179	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.917c	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.917f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9182	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9185	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9188	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.918b	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.918e	60		rts				rts
.918f					OraInteger:
.918f	fa		plx				plx
.9190	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9193	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9196	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9197	0a		asl a				asl 	a
.9198	10 05		bpl $919f			bpl 	_NotRef
.919a	48		pha				pha
.919b	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.919e	68		pla				pla
.919f					_NotRef:
.919f	0a		asl a				asl 	a
.91a0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91a2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91a5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91a8	f0 03		beq $91ad			beq 	_IntegerCode 				; if clear, then we have two integers
.91aa	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.91ad					_IntegerCode:
.91ad	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91b0	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.91b3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91b6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91b9	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91bc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91bf	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91c2	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91c5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91c8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91cb	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91ce	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91d1	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91d4	60		rts				rts
.91d5					EorInteger:
.91d5	fa		plx				plx
.91d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91d9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91dc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91dd	0a		asl a				asl 	a
.91de	10 05		bpl $91e5			bpl 	_NotRef
.91e0	48		pha				pha
.91e1	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91e4	68		pla				pla
.91e5					_NotRef:
.91e5	0a		asl a				asl 	a
.91e6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91e8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91eb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91ee	f0 03		beq $91f3			beq 	_IntegerCode 				; if clear, then we have two integers
.91f0	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.91f3					_IntegerCode:
.91f3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91f6	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91f9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91fc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91ff	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9202	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9205	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9208	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.920b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.920e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9211	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9214	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9217	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.921a	60		rts				rts
.921b					WordIndirect:
.921b	fa		plx				plx
.921c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.921f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9222	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9223	0a		asl a				asl 	a
.9224	10 05		bpl $922b			bpl 	_NotRef
.9226	48		pha				pha
.9227	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.922a	68		pla				pla
.922b					_NotRef:
.922b	0a		asl a				asl 	a
.922c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.922e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9231	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9234	f0 03		beq $9239			beq 	_IntegerCode 				; if clear, then we have two integers
.9236	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.9239					_IntegerCode:
.9239	20 fc 90	jsr $90fc			jsr 	AddCode 					; add the two values
.923c	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.923e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9241	60		rts				rts
.9242					ByteIndirect:
.9242	fa		plx				plx
.9243	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9246	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9249	0a		asl a				asl 	a 							; shift reference bit into sign bit
.924a	0a		asl a				asl 	a
.924b	10 05		bpl $9252			bpl 	_NotRef
.924d	48		pha				pha
.924e	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9251	68		pla				pla
.9252					_NotRef:
.9252	0a		asl a				asl 	a
.9253	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9255	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9258	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.925b	f0 03		beq $9260			beq 	_IntegerCode 				; if clear, then we have two integers
.925d	4c ae 9f	jmp $9fae			jmp 	TypeError 					; anything else, type mismatch.
.9260					_IntegerCode:
.9260	20 fc 90	jsr $90fc			jsr 	AddCode 					; add the two values
.9263	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9265	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9268	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9269					LCLConvertInt16:
.9269	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.926c	8e 10 04	stx $0410			stx 	NSMantissa1
.926f	9c 18 04	stz $0418			stz 	NSMantissa2
.9272	9c 20 04	stz $0420			stz 	NSMantissa3
.9275	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9278	a2 00		ldx #$00			ldx 	#0 							; stack level
.927a	a9 0a		lda #$0a			lda 	#10 						; base
.927c	80 00		bra $927e			bra 	ConvertInt32
.927e					ConvertInt32:
.927e	5a		phy				phy
.927f	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9281	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9284	10 08		bpl $928e			bpl 	_CI32NotNeg
.9286	48		pha				pha
.9287	a9 2d		lda #$2d			lda 	#'-'
.9289	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.928c	c8		iny				iny
.928d	68		pla				pla
.928e					_CI32NotNeg:
.928e	20 9c 92	jsr $929c			jsr 	_CI32DivideConvert 			; recursive conversion
.9291	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9293	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9296	7a		ply				ply
.9297	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9299	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.929b	60		rts				rts
.929c					_CI32DivideConvert:
.929c	e8		inx				inx 								; write to next slot up
.929d	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.92a0	ca		dex				dex
.92a1	20 40 8f	jsr $8f40			jsr 	Int32Divide 				; divide
.92a4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.92a7	48		pha				pha
.92a8	20 ef 8e	jsr $8eef			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92ab	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; is it zero ?
.92ae	f0 06		beq $92b6			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92b0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92b3	20 9c 92	jsr $929c			jsr 	_CI32DivideConvert 			; and recusrively call.
.92b6					_CI32NoRecurse:
.92b6	68		pla				pla 								; remainder
.92b7	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92b9	90 02		bcc $92bd			bcc 	_CI32NotHex
.92bb	69 26		adc #$26			adc 	#6+32
.92bd					_CI32NotHex:
.92bd	69 30		adc #$30			adc 	#48
.92bf	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92c2	c8		iny				iny
.92c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92c4					PrecedenceLevel:
>92c4	04					.byte	 4	; $00 <<
>92c5	02					.byte	 2	; $01 <=
>92c6	02					.byte	 2	; $02 <>
>92c7	00					.byte	 0	; $03 !!3
>92c8	00					.byte	 0	; $04 ><
>92c9	02					.byte	 2	; $05 >=
>92ca	04					.byte	 4	; $06 >>
>92cb	00					.byte	 0	; $07 !!7
>92cc	00					.byte	 0	; $08 !!8
>92cd	00					.byte	 0	; $09 !!9
>92ce	00					.byte	 0	; $0a !!10
>92cf	00					.byte	 0	; $0b !!11
>92d0	00					.byte	 0	; $0c !!12
>92d1	00					.byte	 0	; $0d !!13
>92d2	00					.byte	 0	; $0e !!14
>92d3	00					.byte	 0	; $0f !!15
>92d4	00					.byte	 0	; $10 @
>92d5	00					.byte	 0	; $11 !!17
>92d6	00					.byte	 0	; $12 !!18
>92d7	00					.byte	 0	; $13 [
>92d8	04					.byte	 4	; $14 \
>92d9	00					.byte	 0	; $15 ]
>92da	01					.byte	 1	; $16 ^
>92db	00					.byte	 0	; $17 _
>92dc	00					.byte	 0	; $18 `
>92dd	00					.byte	 0	; $19 !!25
>92de	00					.byte	 0	; $1a !!26
>92df	00					.byte	 0	; $1b {
>92e0	01					.byte	 1	; $1c |
>92e1	00					.byte	 0	; $1d }
>92e2	00					.byte	 0	; $1e ~
>92e3	00					.byte	 0	; $1f [7m<7F>[m
>92e4	00					.byte	 0	; $20
>92e5	05					.byte	 5	; $21 !
>92e6	00					.byte	 0	; $22 "
>92e7	00					.byte	 0	; $23 #
>92e8	05					.byte	 5	; $24 $
>92e9	04					.byte	 4	; $25 %
>92ea	01					.byte	 1	; $26 &
>92eb	00					.byte	 0	; $27 '
>92ec	00					.byte	 0	; $28 (
>92ed	00					.byte	 0	; $29 )
>92ee	04					.byte	 4	; $2a *
>92ef	03					.byte	 3	; $2b +
>92f0	00					.byte	 0	; $2c ,
>92f1	03					.byte	 3	; $2d -
>92f2	00					.byte	 0	; $2e .
>92f3	04					.byte	 4	; $2f /
>92f4	00					.byte	 0	; $30 0
>92f5	00					.byte	 0	; $31 1
>92f6	00					.byte	 0	; $32 2
>92f7	00					.byte	 0	; $33 3
>92f8	00					.byte	 0	; $34 4
>92f9	00					.byte	 0	; $35 5
>92fa	00					.byte	 0	; $36 6
>92fb	00					.byte	 0	; $37 7
>92fc	00					.byte	 0	; $38 8
>92fd	00					.byte	 0	; $39 9
>92fe	00					.byte	 0	; $3a :
>92ff	00					.byte	 0	; $3b ;
>9300	02					.byte	 2	; $3c <
>9301	02					.byte	 2	; $3d =
>9302	02					.byte	 2	; $3e >
>9303	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9304					EvaluateExpressionAt0:
.9304	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9306					EvaluateExpression:
.9306	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9308					EvaluateExpressionAtPrecedence:
.9308	48		pha				pha 								; save precedence level
.9309	20 e0 97	jsr $97e0			jsr 	EvaluateTerm 				; evaluate term into level X.
.930c	68		pla				pla 								; restore precedence level.
.930d					_EXPRLoop:
.930d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.930f	b1 30		lda ($30),y			lda 	(codePtr),y
.9311	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9313	b0 25		bcs $933a			bcs 	_EXPRExit
.9315	da		phx				phx 								; read the operator precedence
.9316	aa		tax				tax
.9317	bd c4 92	lda $92c4,x			lda 	PrecedenceLevel,x
.931a	fa		plx				plx
.931b	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.931d	f0 1b		beq $933a			beq 	_EXPRExit
.931f	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9321	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9323	c5 37		cmp $37				cmp 	zTemp0+1
.9325	b0 13		bcs $933a			bcs		_EXPRExit 					; if current >= operator exit
.9327	48		pha				pha 								; save current precedence.
.9328	b1 30		lda ($30),y			lda 	(codePtr),y
.932a	c8		iny				iny
.932b	48		pha				pha
.932c	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.932e	e8		inx				inx 								; work out the right hand side.
.932f	20 08 93	jsr $9308			jsr 	EvaluateExpressionAtPrecedence
.9332	ca		dex				dex
.9333	68		pla				pla 								; get operator, call the code.
.9334	20 3d 93	jsr $933d			jsr 	_EXPRCaller
.9337	68		pla				pla 								; restore precedence level
.9338	80 d3		bra $930d			bra 	_EXPRLoop 					; and go round.
.933a					_EXPRExit:
.933a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.933c	60		rts				rts
.933d					_EXPRCaller:
.933d	da		phx				phx 								; save on stack, first thing is to restore it
.933e	0a		asl a				asl 	a 							; double so can use vectors into X
.933f	aa		tax				tax
.9340	7c 88 8a	jmp ($8a88,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9343					FloatingPointAdd:
.9343	20 ec 94	jsr $94ec			jsr 	FloatPrepare 				; prepare for floats
.9346	80 0b		bra $9353			bra 	FloatAdd
.9348					FloatingPointSub:
.9348	20 ec 94	jsr $94ec			jsr 	FloatPrepare 				; prepare for floats
.934b					FloatSubtract:
.934b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.934e	49 80		eor #$80			eor 	#$80
.9350	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9353					FloatAdd:
.9353	48		pha				pha
.9354	5a		phy				phy
.9355	20 fd 94	jsr $94fd			jsr 	NSNormalise 				; normalise S[X]
.9358	f0 5c		beq $93b6			beq 	_FAReturn1
.935a	e8		inx				inx 								; normalise S[X+1]
.935b	20 fd 94	jsr $94fd			jsr 	NSNormalise
.935e	ca		dex				dex
.935f	c9 00		cmp #$00			cmp 	#0
.9361	f0 77		beq $93da			beq 	_FAExit 					; if so, just return A
.9363	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9366	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9369	f0 1b		beq $9386			beq 	_FAExponentsEqual
.936b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.936e	a8		tay				tay
.936f	38		sec				sec 								; do a signed comparison of the exponents.
.9370	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9373	50 02		bvc $9377			bvc 	_FANoSignedChange
.9375	49 80		eor #$80			eor 	#$80
.9377					_FANoSignedChange:
.9377	29 80		and #$80			and 	#$80
.9379	10 03		bpl $937e			bpl 	_FAHaveMax
.937b	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.937e					_FAHaveMax:
.937e	20 dd 93	jsr $93dd			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9381	e8		inx				inx
.9382	20 dd 93	jsr $93dd			jsr 	_FAShiftToExponent
.9385	ca		dex				dex
.9386					_FAExponentsEqual:
.9386	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9389	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.938c	30 10		bmi $939e			bmi 	_FADifferentSigns
.938e	20 8f 90	jsr $908f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9391	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9394	10 44		bpl $93da			bpl 	_FAExit 					; if no, we are done.
.9396	20 3d 9e	jsr $9e3d			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9399	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.939c	80 3c		bra $93da			bra 	_FAExit
.939e					_FADifferentSigns:
.939e	20 b5 90	jsr $90b5			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.93a1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.93a4	10 06		bpl $93ac			bpl 	_FACheckZero 				; if no, check for -0
.93a6	20 c6 9d	jsr $9dc6			jsr 	NSMNegate 					; netate result
.93a9	20 cf 9d	jsr $9dcf			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.93ac					_FACheckZero:
.93ac	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero	 				; check for -0
.93af	d0 29		bne $93da			bne 	_FAExit
.93b1	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93b4	80 24		bra $93da			bra 	_FAExit
.93b6					_FAReturn1:
.93b6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93b9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93bc	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93bf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93c2	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93c5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93c8	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93cb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93ce	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93d1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93d4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93d7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93da					_FAExit:
.93da	7a		ply				ply
.93db	68		pla				pla
.93dc	60		rts				rts
.93dd					_FAShiftToExponent:
.93dd					_FAShiftToExponent2:
.93dd	98		tya				tya 								; compare Y to exponent
.93de	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93e1	f0 08		beq $93eb			beq 	_FASEExit 					; exit if so.
.93e3	20 3d 9e	jsr $9e3d			jsr 	NSMShiftRight	 			; shift the mantissa right
.93e6	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93e9	80 f2		bra $93dd			bra 	_FAShiftToExponent2
.93eb					_FASEExit:
.93eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93ec					CompareFloat:
.93ec	20 4b 93	jsr $934b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93f2	29 f8		and #$f8			and 	#$F8
.93f4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93f7	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93fa	f0 09		beq $9405			beq 	_FCExit 					; zero, so approximately identical
.93fc	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93fe	3c 00 04	bit $0400,x			bit 	NSStatus,x
.9401	10 02		bpl $9405			bpl 	_FCExit
.9403					_FCNegative:
.9403	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9405					_FCExit:
.9405	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9406					FDivideCommand:
.9406	fa		plx				plx	 								; restore stack position
.9407	20 ec 94	jsr $94ec			jsr 	FloatPrepare 				; prepare for floats
.940a					FloatDivide:
.940a	48		pha				pha
.940b	e8		inx				inx
.940c	20 fd 94	jsr $94fd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.940f	ca		dex				dex
.9410	c9 00		cmp #$00			cmp 	#0
.9412	f0 20		beq $9434			beq 	_FDZero
.9414	20 fd 94	jsr $94fd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9417	f0 19		beq $9432			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9419	20 62 8f	jsr $8f62			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.941c	20 ef 8e	jsr $8eef			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.941f	20 fd 94	jsr $94fd			jsr		NSNormalise 				; renormalise
.9422	20 fd 8f	jsr $8ffd			jsr 	CalculateSign 				; calculate result sign
.9425	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9428	38		sec				sec
.9429	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.942c	38		sec				sec
.942d	e9 1e		sbc #$1e			sbc 	#30
.942f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9432					_FDExit:
.9432	68		pla				pla
.9433	60		rts				rts
.9434					_FDZero:
.9434	a9 03		lda #$03		lda	#3
.9436	4c 57 8d	jmp $8d57		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9439					FloatFractionalPart:
.9439	5a		phy				phy
.943a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.943d	29 7f		and #$7f			and 	#$7F
.943f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9442	20 fd 94	jsr $94fd			jsr 	NSNormalise
.9445	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9448	38		sec				sec
.9449	e9 e0		sbc #$e0			sbc 	#$E0
.944b	90 31		bcc $947e			bcc 	_FFPExit 					; already fractional
.944d	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.944f	b0 2a		bcs $947b			bcs 	_FFPZero
.9451	a8		tay				tay 								; put count to do in Y
.9452	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9455	20 80 94	jsr $9480			jsr 	_FFPPartial
.9458	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.945b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.945e	20 80 94	jsr $9480			jsr 	_FFPPartial
.9461	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9464	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9467	20 80 94	jsr $9480			jsr 	_FFPPartial
.946a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.946d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9470	20 80 94	jsr $9480			jsr 	_FFPPartial
.9473	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9476	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; zeroed check.
.9479	d0 03		bne $947e			bne 	_FFPExit
.947b					_FFPZero:
.947b	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.947e					_FFPExit:
.947e	7a		ply				ply
.947f	60		rts				rts
.9480					_FFPPartial:
.9480	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9482	f0 17		beq $949b			beq 	_FFFPPExit
.9484	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9486	b0 0c		bcs $9494			bcs 	_FFFPPWholeByte
.9488	5a		phy				phy
.9489					_FFFPPLeft:
.9489	0a		asl a				asl 	a
.948a	88		dey				dey
.948b	d0 fc		bne $9489			bne 	_FFFPPLeft
.948d	7a		ply				ply
.948e					_FFFPPRight:
.948e	4a		lsr a				lsr 	a
.948f	88		dey				dey
.9490	d0 fc		bne $948e			bne 	_FFFPPRight
.9492	80 07		bra $949b			bra 	_FFFPPExit
.9494					_FFFPPWholeByte:
.9494	98		tya				tya 								; subtract 8 from count
.9495	38		sec				sec
.9496	e9 08		sbc #$08			sbc 	#8
.9498	a8		tay				tay
.9499	a9 00		lda #$00			lda 	#0 							; and clear all
.949b					_FFFPPExit:
.949b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.949c					FloatIntegerPart:
.949c	48		pha				pha
.949d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.94a0	f0 1f		beq $94c1			beq 	_FIPExit 					; if so do nothing
.94a2	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; is it zero ?
.94a5	f0 17		beq $94be			beq 	_FIPZero 					; if so return zero.
.94a7	20 fd 94	jsr $94fd			jsr 	NSNormalise 				; normalise
.94aa	f0 12		beq $94be			beq 	_FIPZero 					; normalised to zero, exit zero
.94ac					_FIPShift:
.94ac	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.94af	10 08		bpl $94b9			bpl 	_FIPCheckZero
.94b1	20 3d 9e	jsr $9e3d			jsr 	NSMShiftRight 				; shift mantissa right
.94b4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.94b7	80 f3		bra $94ac			bra 	_FIPShift
.94b9					_FIPCheckZero:
.94b9	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; avoid -0 problem
.94bc	d0 03		bne $94c1			bne 	_FIPExit 					; set to zero if mantissa zero.
.94be					_FIPZero:
.94be	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.94c1					_FIPExit:
.94c1	68		pla				pla
.94c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94c3					FloatingPointMultiply:
.94c3	20 ec 94	jsr $94ec			jsr 	FloatPrepare 				; prepare for floats
.94c6					FloatMultiply:
.94c6	48		pha				pha
.94c7	20 fd 94	jsr $94fd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94ca	f0 1b		beq $94e7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94cc	e8		inx				inx
.94cd	20 fd 94	jsr $94fd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94d0	ca		dex				dex
.94d1	c9 00		cmp #$00			cmp 	#0
.94d3	f0 0f		beq $94e4			beq 	_FDSetZero
.94d5	20 b8 8f	jsr $8fb8			jsr 	MultiplyShort 				; calculate the result.
.94d8	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94db	18		clc				clc
.94dc	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94df	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94e2	80 03		bra $94e7			bra 	_FDExit
.94e4					_FDSetZero:
.94e4	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero 					; return 0
.94e7					_FDExit:
.94e7	20 fd 94	jsr $94fd			jsr 	NSNormalise 				; normalise the result
.94ea	68		pla				pla
.94eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94ec					FloatPrepare:
.94ec	20 1f 96	jsr $961f			jsr 	DereferenceTopTwo 			; dereference the top two values
.94ef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94f2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94f5	29 10		and #$10			and 	#NSBIsString
.94f7	d0 01		bne $94fa			bne 	_FDType
.94f9	60		rts				rts
.94fa					_FDType:
.94fa	4c ae 9f	jmp $9fae			jmp 	TypeError
.94fd					NSNormalise:
.94fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.9500	29 80		and #$80			and 	#$80
.9502	09 08		ora #$08			ora 	#NSTFloat
.9504	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9507	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; if zero exit
.950a	d0 09		bne $9515			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.950c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.950f	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.9512	a9 00		lda #$00			lda 	#0 							; set Z flag
.9514	60		rts				rts
.9515					_NSNormaliseOptimise:
.9515	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9518	d0 22		bne $953c			bne 	_NSNormaliseLoop
.951a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.951d	30 1d		bmi $953c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.951f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9522	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9525	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9528	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.952b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.952e	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9531	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9534	38		sec				sec
.9535	e9 08		sbc #$08			sbc 	#8
.9537	9d 28 04	sta $0428,x			sta 	NSExponent,x
.953a	80 d9		bra $9515			bra 	_NSNormaliseOptimise
.953c					_NSNormaliseLoop:
.953c	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.953f	70 08		bvs $9549			bvs 	_NSNExit 					; exit if so with Z flag clear
.9541	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; shift mantissa left
.9544	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9547	80 f3		bra $953c			bra 	_NSNormaliseLoop
.9549					_NSNExit:
.9549	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.954b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.954c					AssignNumber:
.954c	5a		phy				phy
.954d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9550	85 36		sta $36				sta 	zTemp0
.9552	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9555	85 37		sta $37				sta 	zTemp0+1
.9557	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.955a	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.955c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.955f	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9561	c9 08		cmp #$08			cmp 	#NSTFloat
.9563	f0 2a		beq $958f			beq 	_ANFloat
.9565	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9568	f0 05		beq $956f			beq		_ANNotFloat
.956a	e8		inx				inx
.956b	20 9c 94	jsr $949c			jsr 	FloatIntegerPart 			; make it an integer
.956e	ca		dex				dex
.956f					_ANNotFloat:
.956f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9572	29 03		and #$03			and 	#3
.9574	d0 05		bne $957b			bne 	_ANByteWord
.9576	20 9b 95	jsr $959b			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9579	80 1e		bra $9599			bra 	_ANExit
.957b					_ANByteWord:
.957b	48		pha				pha 								; save count
.957c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.957f	92 36		sta ($36)			sta 	(zTemp0)
.9581	68		pla				pla
.9582	c9 01		cmp #$01			cmp	 	#1
.9584	f0 13		beq $9599			beq 	_ANExit
.9586	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9589	a0 01		ldy #$01			ldy 	#1
.958b	91 36		sta ($36),y			sta 	(zTemp0),y
.958d	80 0a		bra $9599			bra 	_ANExit
.958f					_ANFloat:
.958f	20 9b 95	jsr $959b			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9592	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9595	a0 04		ldy #$04			ldy 	#4
.9597	91 36		sta ($36),y			sta 	(zTemp0),y
.9599					_ANExit:
.9599	7a		ply				ply
.959a	60		rts				rts
.959b					_ANCopy4PackSign:
.959b	a0 03		ldy #$03			ldy 	#3
.959d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.95a0	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.95a2	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.95a5	91 36		sta ($36),y			sta 	(zTemp0),y
.95a7	88		dey				dey
.95a8	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.95ab	91 36		sta ($36),y			sta 	(zTemp0),y
.95ad	88		dey				dey
.95ae	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95b1	91 36		sta ($36),y			sta 	(zTemp0),y
.95b3	88		dey				dey
.95b4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b7	91 36		sta ($36),y			sta 	(zTemp0),y
.95b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95ba					AssignString:
.95ba	5a		phy				phy
.95bb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95be	85 38		sta $38				sta 	zTemp1
.95c0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95c3	85 39		sta $39				sta 	zTemp1+1
.95c5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95c8	85 36		sta $36				sta 	zTemp0
.95ca	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95cd	85 37		sta $37				sta 	zTemp0+1
.95cf	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.95d3	f0 23		beq $95f8			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95d5	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95d6	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95d8	e9 02		sbc #$02			sbc 	#2
.95da	85 3c		sta $3c				sta 	zsTemp
.95dc	a0 01		ldy #$01			ldy 	#1
.95de	b1 36		lda ($36),y			lda 	(zTemp0),y
.95e0	e9 00		sbc #$00			sbc 	#0
.95e2	85 3d		sta $3d				sta 	zsTemp+1
.95e4	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95e6					_ASGetLength:
.95e6	c8		iny				iny
.95e7	b1 38		lda ($38),y			lda 	(zTemp1),y
.95e9	d0 fb		bne $95e6			bne 	_ASGetLength
.95eb	98		tya				tya 								; is this length <= current length
.95ec	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95ee	90 20		bcc $9610			bcc 	_ASCopyString
.95f0	f0 1e		beq $9610			beq 	_ASCopyString
.95f2	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95f4	a0 01		ldy #$01			ldy 	#1
.95f6	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f8					_ASNewStringRequired:
.95f8	e8		inx				inx 								; concrete the new string.
.95f9	20 7a a6	jsr $a67a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95fc	ca		dex				dex
.95fd	18		clc				clc
.95fe	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9601	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9603	92 36		sta ($36)			sta 	(zTemp0)
.9605	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9608	69 00		adc #$00			adc 	#0
.960a	a0 01		ldy #$01			ldy 	#1
.960c	91 36		sta ($36),y			sta 	(zTemp0),y
.960e	80 0d		bra $961d			bra 	_ASExit
.9610					_ASCopyString:
.9610	a0 00		ldy #$00			ldy 	#0
.9612					_ASCopyLoop:
.9612	b1 38		lda ($38),y			lda 	(zTemp1),y
.9614	c8		iny				iny
.9615	c8		iny				iny
.9616	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9618	88		dey				dey
.9619	c9 00		cmp #$00			cmp 	#0
.961b	d0 f5		bne $9612			bne 	_ASCopyLoop
.961d					_ASExit:
.961d	7a		ply				ply
.961e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.961f					DereferenceTopTwo:
.961f	e8		inx				inx
.9620	20 24 96	jsr $9624			jsr 	Dereference 				; deref x+1
.9623	ca		dex				dex  								; falls through to deref x
.9624					Dereference:
.9624	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9627	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9629	f0 57		beq $9682			beq 	_DRFExit 					; not a reference
.962b	5a		phy				phy
.962c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.962f	85 36		sta $36				sta 	zTemp0
.9631	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9634	85 37		sta $37				sta 	zTemp0+1
.9636	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9639	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.963b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.963e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9641	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9643	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9645	f0 0f		beq $9656			beq 	_DRFDereferenceTwo
.9647	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9649	f0 39		beq $9684			beq 	_DRFFull
.964b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.964e	29 03		and #$03			and 	#3
.9650	f0 32		beq $9684			beq 	_DRFFull 					; the whole word
.9652	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9654	f0 07		beq $965d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9656					_DRFDereferenceTwo:
.9656	a0 01		ldy #$01			ldy 	#1
.9658	b1 36		lda ($36),y			lda 	(zTemp0),y
.965a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.965d					_DRFClear23:
.965d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9660	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9663	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9666	29 18		and #$18			and 	#NSBTypeMask
.9668	9d 00 04	sta $0400,x			sta 	NSStatus,x
.966b	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.966d	d0 12		bne $9681			bne 	_DRFNotString
.966f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9672	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9675	d0 0a		bne $9681			bne 	_DRFNotString
.9677	a9 83		lda #$83			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9679	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.967c	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.967e	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9681					_DRFNotString
.9681	7a		ply				ply 								; restore Y and exit
.9682					_DRFExit:
.9682	60		rts				rts
.9683					_DRFNullString:
>9683	00						.byte 	0
.9684					_DRFFull:
.9684	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9686	b1 36		lda ($36),y			lda 	(zTemp0),y
.9688	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.968b	c8		iny				iny
.968c	b1 36		lda ($36),y			lda 	(zTemp0),y
.968e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9691	c8		iny				iny
.9692	b1 36		lda ($36),y			lda 	(zTemp0),y
.9694	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9697	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.969a	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.969d	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.969f	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.96a2	f0 06		beq $96aa			beq 	_DRFNoExponent
.96a4	c8		iny				iny 								; if not, read the exponent as well.
.96a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.96a7	9d 28 04	sta $0428,x			sta 	NSExponent,x
.96aa					_DRFNoExponent:
.96aa	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.96ad	10 0d		bpl $96bc			bpl 	_DRFExit2 					; if not, then exit.
.96af	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.96b1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.96b7	09 80		ora #$80			ora 	#NSBIsNegative
.96b9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96bc					_DRFExit2:
.96bc	7a		ply				ply
.96bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96be					EncodeNumberStart:
.96be	38		sec				sec
.96bf	80 01		bra $96c2			bra 	EncodeNumberContinue+1
.96c1					EncodeNumberContinue:
.96c1	18		clc				clc
.96c2					EncodeNumber:
.96c2	08		php				php 								; save reset.
.96c3	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96c5	f0 12		beq $96d9			beq 	_ENIsOkay
.96c7	c9 30		cmp #$30			cmp 	#"0"
.96c9	90 04		bcc $96cf			bcc 	_ENBadNumber
.96cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.96cd	90 0a		bcc $96d9			bcc 	_ENIsOkay
.96cf					_ENBadNumber:
.96cf	28		plp				plp 								; throw saved reset
.96d0	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96d3	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96d5	f0 7e		beq $9755			beq 	_ENConstructFinal
.96d7					_ENFail:
.96d7	18		clc				clc 								; not allowed
.96d8	60		rts				rts
.96d9					_ENIsOkay:
.96d9	28		plp				plp 								; are we restarting
.96da	90 15		bcc $96f1			bcc 	_ENNoRestart
.96dc					_ENStartEncode:
.96dc	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96de	f0 0c		beq $96ec			beq 	_ENFirstDP
.96e0	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96e2	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.96e5	a9 01		lda #$01			lda 	#ESTA_Low
.96e7					_ENExitChange:
.96e7	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96ea	38		sec				sec
.96eb	60		rts				rts
.96ec					_ENFirstDP:
.96ec	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero 					; clear integer part
.96ef	80 3f		bra $9730			bra 	_ESTASwitchFloat			; go straight to float and exi
.96f1					_ENNoRestart:
.96f1	48		pha				pha 								; save on stack.
.96f2	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96f5	c9 01		cmp #$01			cmp 	#ESTA_Low
.96f7	f0 09		beq $9702			beq  	_ESTALowState
.96f9	c9 02		cmp #$02			cmp 	#ESTA_High
.96fb	f0 29		beq $9726			beq 	_ESTAHighState
.96fd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96ff	f0 3b		beq $973c			beq 	_ESTADecimalState
>9701	db						.byte 	$DB 						; causes a break in the emulator
.9702					_ESTALowState:
.9702	68		pla				pla 								; get value back
.9703	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9705	f0 29		beq $9730			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9707	29 0f		and #$0f			and 	#15 						; make digit
.9709	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.970c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.970f	0a		asl a				asl 	a
.9710	0a		asl a				asl 	a
.9711	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9714	0a		asl a				asl 	a
.9715	6d 86 04	adc $0486			adc 	DigitTemp
.9718	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.971b	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.971d	90 05		bcc $9724			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.971f	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9721	8d 85 04	sta $0485			sta 	EncodeState
.9724					_ESTANoSwitch:
.9724	38		sec				sec
.9725	60		rts				rts
.9726					_ESTAHighState:
.9726	68		pla				pla 								; get value back
.9727	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9729	f0 05		beq $9730			beq 	_ESTASwitchFloat
.972b	20 8f 97	jsr $978f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.972e	38		sec				sec
.972f	60		rts				rts
.9730					_ESTASwitchFloat:
.9730	9c 87 04	stz $0487			stz 	DecimalCount
.9733	e8		inx				inx 								; zero the decimal additive.
.9734	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.9737	ca		dex				dex
.9738	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.973a	80 ab		bra $96e7			bra 	_ENExitChange
.973c					_ESTADecimalState:
.973c	68		pla				pla 								; digit.
.973d	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.973f	f0 96		beq $96d7			beq 	_ENFail
.9741	e8		inx				inx 								; put digit into fractional part of X+1
.9742	20 8f 97	jsr $978f			jsr 	ESTAShiftDigitIntoMantissa
.9745	ca		dex				dex
.9746	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9749	ad 87 04	lda $0487			lda 	DecimalCount
.974c	c9 0b		cmp #$0b			cmp 	#11
.974e	f0 02		beq $9752			beq 	_ESTADSFail
.9750	38		sec				sec
.9751	60		rts				rts
.9752					_ESTADSFail:
.9752	4c a9 9f	jmp $9fa9			jmp 	RangeError
.9755					_ENConstructFinal:
.9755	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9758	f0 33		beq $978d			beq 	_ENCFExit 					; no decimals
.975a	5a		phy				phy
.975b	0a		asl a				asl 	a 							; x 4 and CLC
.975c	0a		asl a				asl 	a
.975d	6d 87 04	adc $0487			adc 	DecimalCount
.9760	a8		tay				tay
.9761	b9 68 9f	lda $9f68,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9764	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9767	b9 69 9f	lda $9f69,y			lda 	DecimalScalarTable-5+1,y
.976a	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.976d	b9 6a 9f	lda $9f6a,y			lda 	DecimalScalarTable-5+2,y
.9770	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9773	b9 6b 9f	lda $9f6b,y			lda 	DecimalScalarTable-5+3,y
.9776	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9779	b9 6c 9f	lda $9f6c,y			lda 	DecimalScalarTable-5+4,y
.977c	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.977f	a9 08		lda #$08			lda 	#NSTFloat
.9781	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9784	7a		ply				ply
.9785	e8		inx				inx 								; multiply decimal const by decimal scalar
.9786	20 c6 94	jsr $94c6			jsr 	FloatMultiply
.9789	ca		dex				dex
.978a	20 53 93	jsr $9353			jsr 	FloatAdd 					; add to integer part.
.978d					_ENCFExit:
.978d	18		clc				clc 								; reject the digit.
.978e	60		rts				rts
.978f					ESTAShiftDigitIntoMantissa:
.978f	29 0f		and #$0f			and 	#15 						; save digit
.9791	48		pha				pha
.9792	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9795	48		pha				pha
.9796	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9799	48		pha				pha
.979a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.979d	48		pha				pha
.979e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.97a1	48		pha				pha
.97a2	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; x 2
.97a5	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; x 4
.97a8	18		clc				clc 								; pop mantissa and add
.97a9	68		pla				pla
.97aa	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97ad	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b0	68		pla				pla
.97b1	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.97b4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97b7	68		pla				pla
.97b8	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97bb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97be	68		pla				pla
.97bf	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97c2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97c5	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; x 10
.97c8	68		pla				pla 								; add digit
.97c9	18		clc				clc
.97ca	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97cd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97d0	90 0d		bcc $97df			bcc 	_ESTASDExit
.97d2	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97d5	d0 08		bne $97df			bne 	_ESTASDExit
.97d7	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97da	d0 03		bne $97df			bne 	_ESTASDExit
.97dc	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97df					_ESTASDExit:
.97df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97e0					EvaluateTerm:
.97e0	b1 30		lda ($30),y			lda 	(codePtr),y
.97e2	30 18		bmi $97fc			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97e4	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97e6	b0 6f		bcs $9857			bcs 	_ETVariable
.97e8	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97ea	90 6e		bcc $985a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97ec	c9 3a		cmp #$3a			cmp 	#'9'+1
.97ee	b0 6a		bcs $985a			bcs 	_ETPuncUnary
.97f0	20 be 96	jsr $96be			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97f3					_ETNumber:
.97f3	c8		iny				iny 								; keep encoding until we have the numbers
.97f4	b1 30		lda ($30),y			lda 	(codePtr),y
.97f6	20 c1 96	jsr $96c1			jsr 	EncodeNumberContinue
.97f9	b0 f8		bcs $97f3			bcs 	_ETNumber 					; go back if accepted.
.97fb	60		rts				rts
.97fc					_ETCheckUnary:
.97fc	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97fe	f0 41		beq $9841			beq 	_ETString
.9800	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9802	f0 12		beq $9816			beq 	_ETHexConstant
.9804	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9806	90 0b		bcc $9813			bcc 	_ETSyntaxError
.9808	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.980a	b0 07		bcs $9813			bcs 	_ETSyntaxError
.980c	da		phx				phx 								; push X on the stack
.980d	0a		asl a				asl 	a 							; put vector x 2 into X
.980e	aa		tax				tax
.980f	c8		iny				iny 								; consume unary function token
.9810	7c 08 8b	jmp ($8b08,x)			jmp 	(VectorSet0,x) 				; and do it.
.9813					_ETSyntaxError:
.9813	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.9816					_ETHexConstant:
.9816	c8		iny				iny 								; skip #
.9817	c8		iny				iny 								; skip count
.9818	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero 					; clear result
.981b					_ETHLoop:
.981b	b1 30		lda ($30),y			lda 	(codePtr),y
.981d	c8		iny				iny 								; and consume
.981e	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9820	f0 1e		beq $9840			beq 	_ETHExit
.9822	48		pha				pha 								; save on stack.
.9823	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; x 2
.9826	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; x 4
.9829	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; x 8
.982c	20 2f 9e	jsr $9e2f			jsr 	NSMShiftLeft 				; x 16
.982f	68		pla				pla 								; ASCII
.9830	c9 41		cmp #$41			cmp 	#'A'
.9832	90 02		bcc $9836			bcc 	_ETHNotChar
.9834	e9 07		sbc #$07			sbc 	#7
.9836					_ETHNotChar:
.9836	29 0f		and #$0f			and 	#15 						; digit now
.9838	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.983b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.983e	80 db		bra $981b			bra 	_ETHLoop 					; go round.
.9840					_ETHExit:
.9840	60		rts				rts
.9841					_ETString:
.9841	c8		iny				iny 								; look at length
.9842	b1 30		lda ($30),y			lda 	(codePtr),y
.9844	48		pha				pha
.9845	c8		iny				iny 								; first character
.9846	20 12 a2	jsr $a212			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9849	68		pla				pla 								; restore count and save
.984a	85 36		sta $36				sta 	zTemp0
.984c	98		tya				tya 								; add length to Y to skip it.
.984d	18		clc				clc
.984e	65 36		adc $36				adc 	zTemp0
.9850	a8		tay				tay
.9851	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9853	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9856	60		rts				rts
.9857					_ETVariable:
.9857	4c b1 98	jmp $98b1			jmp 	VariableHandler
.985a					_ETPuncUnary:
.985a	c8		iny				iny 								; consume the unary character
.985b	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.985d	f0 2d		beq $988c			beq 	_ETUnaryNegate
.985f	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9861	f0 39		beq $989c			beq 	_ETDereference
.9863	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9865	f0 43		beq $98aa			beq 	_ETParenthesis
.9867	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9869	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.986b	f0 06		beq $9873			beq 	_ETIndirection
.986d	e6 36		inc $36				inc 	zTemp0
.986f	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9871	d0 a0		bne $9813			bne 	_ETSyntaxError
.9873					_ETIndirection:
.9873	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9875	1a		inc a				inc 	a
.9876	48		pha				pha
.9877	20 e0 97	jsr $97e0			jsr 	EvaluateTerm				; evaluate the term
.987a	20 24 96	jsr $9624			jsr 	Dereference 				; dereference it.
.987d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9880	d0 07		bne $9889			bne 	_ETTypeMismatch
.9882	68		pla				pla 								; indirection 1-2
.9883	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9885	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9888	60		rts				rts
.9889					_ETTypeMismatch:
.9889	4c ae 9f	jmp $9fae			jmp 	TypeError
.988c					_ETUnaryNegate:
.988c	20 e0 97	jsr $97e0			jsr 	EvaluateTerm				; evaluate the term
.988f	20 24 96	jsr $9624			jsr 	Dereference 				; dereference it.
.9892	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9895	29 10		and #$10			and 	#NSTString
.9897	d0 f0		bne $9889			bne 	_ETTypeMismatch
.9899	4c c6 9d	jmp $9dc6			jmp 	NSMNegate  					; just toggles the sign bit.
.989c					_ETDereference:
.989c	20 e0 97	jsr $97e0			jsr 	EvaluateTerm				; evaluate the term
.989f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.98a2	29 20		and #$20			and 	#NSBIsReference
.98a4	f0 e3		beq $9889			beq 	_ETTypeMismatch
.98a6	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.98a9	60		rts				rts
.98aa					_ETParenthesis:
.98aa	20 06 93	jsr $9306			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.98ad	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 			; check for )
.98b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.98b1					VariableHandler:
.98b1	b1 30		lda ($30),y			lda 	(codePtr),y
.98b3	18		clc				clc
.98b4	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98b6	85 37		sta $37				sta 	zTemp0+1
.98b8	c8		iny				iny
.98b9	b1 30		lda ($30),y			lda 	(codePtr),y
.98bb	85 36		sta $36				sta 	zTemp0
.98bd	c8		iny				iny
.98be	18		clc				clc									; copy variable address+3 to mantissa
.98bf	69 03		adc #$03			adc 	#3
.98c1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98c4	a5 37		lda $37				lda 	zTemp0+1
.98c6	69 00		adc #$00			adc 	#0
.98c8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98cb	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98ce	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98d1	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98d4	5a		phy				phy
.98d5	a0 02		ldy #$02			ldy 	#2 							; read type
.98d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d9	7a		ply				ply
.98da	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98dc	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98de	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98e1	29 04		and #$04			and 	#NSBIsArray
.98e3	d0 01		bne $98e6			bne 	_VHArray
.98e5	60		rts				rts
.98e6					_VHArray:
.98e6	e8		inx				inx
.98e7	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98ea	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98ec	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98ef	b1 30		lda ($30),y			lda 	(codePtr),y
.98f1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98f3	d0 06		bne $98fb			bne 	_VHNoSecondIndex
.98f5	c8		iny				iny 								; skip the comma
.98f6	e8		inx				inx
.98f7	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98fa	ca		dex				dex
.98fb					_VHNoSecondIndex:
.98fb	ca		dex				dex 								; set X back.
.98fc	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 			; and check the right bracket.
.98ff	5a		phy				phy 								; save position
.9900	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9902	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9904	f0 6b		beq $9971			beq 	_VHBadIndex
.9906	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9909	85 3e		sta $3e				sta 	zaTemp
.990b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.990e	85 3f		sta $3f				sta 	zaTemp+1
.9910	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9912	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9914	f0 02		beq $9918			beq 	_VHHas2Mask
.9916	a9 ff		lda #$ff			lda 	#$FF
.9918					_VHHas2Mask:
.9918	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.991b	f0 54		beq $9971			beq 	_VHBadIndex
.991d	0a		asl a				asl 	a 							; carry will be set if a second index
.991e	90 09		bcc $9929			bcc 	_VHCheckFirstIndex
.9920	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9922	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9924	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9927	90 48		bcc $9971			bcc 	_VHBadIndex
.9929					_VHCheckFirstIndex:
.9929	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.992b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.992d	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9930	90 3f		bcc $9971			bcc 	_VHBadIndex
.9932	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9934	64 37		stz $37				stz 	zTemp0+1
.9936	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9939	30 0f		bmi $994a			bmi 	_VHNoMultiply
.993b	da		phx				phx
.993c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.993f	48		pha				pha
.9940	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9942	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9944	1a		inc a				inc 	a 							; add 1 for zero base
.9945	fa		plx				plx
.9946	20 af 9d	jsr $9daf			jsr 	Multiply8x8 				; calculate -> Z0
.9949	fa		plx				plx
.994a					_VHNoMultiply:
.994a	18		clc				clc
.994b	a5 36		lda $36				lda 	zTemp0
.994d	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9950	85 36		sta $36				sta 	zTemp0
.9952	a5 37		lda $37				lda 	zTemp0+1
.9954	69 00		adc #$00			adc 	#0
.9956	85 37		sta $37				sta 	zTemp0+1
.9958	bd 00 04	lda $0400,x			lda 	NSStatus,x
.995b	20 fa 84	jsr $84fa			jsr 	ScaleByBaseType
.995e	18		clc				clc
.995f	b2 3e		lda ($3e)			lda 	(zaTemp)
.9961	65 36		adc $36				adc 	zTemp0
.9963	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9966	a0 01		ldy #$01			ldy 	#1
.9968	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.996a	65 37		adc $37				adc 	zTemp0+1
.996c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.996f	7a		ply				ply 								; restore position
.9970	60		rts				rts
.9971					_VHBadIndex:
.9971	a9 17		lda #$17		lda	#23
.9973	4c 57 8d	jmp $8d57		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9976					AbsUnary:
.9976	fa		plx				plx 								; restore stack pos
.9977	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.997a	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.997d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9980	29 7f		and #$7f			and 	#$7F
.9982	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9985	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9986					AllocUnary:
.9986	fa		plx				plx 								; restore stack pos
.9987	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger		; get bytes required.
.998a	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.998d	da		phx				phx 								; save X/Y
.998e	5a		phy				phy
.998f	8a		txa				txa 								; copy X into Y
.9990	a8		tay				tay
.9991	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9994	aa		tax				tax
.9995	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9998	20 a5 99	jsr $99a5			jsr 	AllocateXABytes 			; allocate memory
.999b	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.999e	8a		txa				txa
.999f	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.99a2	7a		ply				ply
.99a3	fa		plx				plx
.99a4	60		rts				rts
.99a5					AllocateXABytes:
.99a5	5a		phy				phy
.99a6	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.99a9	84 36		sty $36				sty 	zTemp0
.99ab	5a		phy				phy
.99ac	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.99af	84 37		sty $37				sty 	zTemp0+1
.99b1	5a		phy				phy
.99b2	18		clc				clc 								; add to low memory pointer
.99b3	6d 8c 04	adc $048c			adc 	lowMemPtr
.99b6	8d 8c 04	sta $048c			sta 	lowMemPtr
.99b9	8a		txa				txa
.99ba	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99bd	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99c0	b0 2f		bcs $99f1			bcs 	CISSMemory
.99c2	20 e3 99	jsr $99e3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99c5					_ClearMemory:
.99c5	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99c8	c5 36		cmp $36				cmp 	zTemp0
.99ca	d0 07		bne $99d3			bne 	_CMClearNext
.99cc	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99cf	c5 37		cmp $37				cmp 	zTemp0+1
.99d1	f0 0c		beq $99df			beq 	_CMExit
.99d3					_CMClearNext:
.99d3	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99d5	92 36		sta ($36)			sta 	(zTemp0)
.99d7	e6 36		inc $36				inc 	zTemp0
.99d9	d0 ea		bne $99c5			bne 	_ClearMemory
.99db	e6 37		inc $37				inc		zTemp0+1
.99dd	80 e6		bra $99c5			bra 	_ClearMemory
.99df					_CMExit:
.99df	fa		plx				plx
.99e0	68		pla				pla
.99e1	7a		ply				ply
.99e2	60		rts				rts
.99e3					CheckIdentifierStringSpace:
.99e3	48		pha				pha
.99e4	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99e7	18		clc				clc
.99e8	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99ea	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99ed	b0 02		bcs $99f1			bcs 	CISSMemory
.99ef	68		pla				pla
.99f0	60		rts				rts
.99f1					CISSMemory:
.99f1	a9 06		lda #$06		lda	#6
.99f3	4c 57 8d	jmp $8d57		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99f6					AscUnary:
.99f6	fa		plx				plx 								; restore stack pos
.99f7	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.99fa	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99fc	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.99ff	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9a02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a03					FracUnary:
.9a03	fa		plx				plx 								; restore stack pos
.9a04	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.9a07	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9a0a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a0d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a0f	f0 04		beq $9a15			beq 	_IUZero
.9a11	20 39 94	jsr $9439			jsr 	FloatFractionalPart
.9a14	60		rts				rts
.9a15					_IUZero:
.9a15	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.9a18	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a19					IntUnary:
.9a19	fa		plx				plx 								; restore stack pos
.9a1a	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.9a1d	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9a20	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a23	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a25	f0 03		beq $9a2a			beq 	_IUExit
.9a27	20 9c 94	jsr $949c			jsr 	FloatIntegerPart
.9a2a					_IUExit:
.9a2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a2b					LenUnary:
.9a2b	fa		plx				plx 								; restore stack pos
.9a2c	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.9a2f	5a		phy				phy
.9a30	a0 00		ldy #$00			ldy 	#0 							; find length
.9a32					_LenFind:
.9a32	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a34	f0 06		beq $9a3c			beq 	_LenExit
.9a36	c8		iny				iny
.9a37	d0 f9		bne $9a32			bne 	_LenFind
.9a39	4c a9 9f	jmp $9fa9			jmp 	RangeError 					; string > 255
.9a3c					_LenExit:
.9a3c	98		tya				tya
.9a3d	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.9a40	7a		ply				ply
.9a41	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9a44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a45					Unary_Min:
.9a45	a9 01		lda #$01			lda 	#1
.9a47	80 02		bra $9a4b			bra 	UnaryMinMaxMain
.9a49					Unary_Max:
.9a49	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a4b					UnaryMinMaxMain:
.9a4b	fa		plx				plx 								; get index on number stack
.9a4c	48		pha				pha 								; save comparator
.9a4d	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get the first value.
.9a50					_UMMMLoop:
.9a50	b1 30		lda ($30),y			lda 	(codePtr),y
.9a52	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a54	f0 22		beq $9a78			beq 	_UMMMDone
.9a56	20 46 8d	jsr $8d46			jsr 	CheckComma 					; must be a comma
.9a59	e8		inx				inx
.9a5a	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue
.9a5d	ca		dex				dex
.9a5e	20 f1 9d	jsr $9df1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a61	e8		inx				inx
.9a62	20 f1 9d	jsr $9df1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a65	e8		inx				inx
.9a66	20 0f 8e	jsr $8e0f			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a69	ca		dex				dex
.9a6a	ca		dex				dex
.9a6b	85 36		sta $36				sta 	zTemp0 						; save required result
.9a6d	68		pla				pla 								; get and save comparator
.9a6e	48		pha				pha
.9a6f	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a71	d0 dd		bne $9a50			bne 	_UMMMLoop
.9a73	20 7b 9a	jsr $9a7b			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a76	80 d8		bra $9a50			bra 	_UMMMLoop
.9a78					_UMMMDone:
.9a78	68		pla				pla 								; throw the comparator
.9a79	c8		iny				iny 								; skip )
.9a7a	60		rts				rts
.9a7b					ExpCopyAboveDown:
.9a7b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a7e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a81	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a84	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a87	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a8a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a8d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a90	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a93	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a96	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a99	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a9c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9aa0					Unary_Not:
.9aa0	fa		plx				plx
.9aa1	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; get integer
.9aa4	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9aa7	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; zero mantissa ?
.9aaa	f0 04		beq $9ab0			beq 	_NotZero
.9aac	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.9aaf	60		rts				rts
.9ab0					_NotZero:
.9ab0	4c c4 8d	jmp $8dc4			jmp 	ReturnTrue
.9ab3					_UNBad:
.9ab3	4c b3 9f	jmp $9fb3			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ab6					Unary_Random:
.9ab6	fa		plx				plx
.9ab7	20 35 9b	jsr $9b35			jsr 	Random32Bit 				; get a random number
.9aba	20 1a 9b	jsr $9b1a			jsr 	URCopyToMantissa  			; put in mantissa
.9abd	b1 30		lda ($30),y			lda 	(codePtr),y
.9abf	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9ac1	f0 08		beq $9acb			beq 	_URNoModulus
.9ac3	e8		inx				inx
.9ac4	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ac7	ca		dex				dex
.9ac8	20 33 8f	jsr $8f33			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9acb					_URNoModulus:
.9acb	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ace	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ad1	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9ad4	60		rts				rts
.9ad5					Unary_Rnd:
.9ad5	fa		plx				plx
.9ad6	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; number to use.
.9ad9	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 			; closing bracket
.9adc	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9adf	f0 2b		beq $9b0c			beq 	_URCopySeed
.9ae1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ae4	10 23		bpl $9b09			bpl 	_URDontSeed
.9ae6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ae9	49 17		eor #$17			eor 	#$17
.9aeb	8d 88 04	sta $0488			sta 	RandomSeed+0
.9aee	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9af1	49 a5		eor #$a5			eor 	#$A5
.9af3	8d 89 04	sta $0489			sta 	RandomSeed+1
.9af6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9af9	49 c2		eor #$c2			eor 	#$C2
.9afb	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9afe	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9b01	49 9d		eor #$9d			eor 	#$9D
.9b03	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9b06	20 35 9b	jsr $9b35			jsr 	Random32Bit
.9b09					_URDontSeed:
.9b09	20 35 9b	jsr $9b35			jsr 	Random32Bit 				; generate a number.
.9b0c					_URCopySeed:
.9b0c	20 1a 9b	jsr $9b1a			jsr 	URCopyToMantissa 			; copy into mantissa
.9b0f	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9b11	8d 28 04	sta $0428			sta 	NSExponent
.9b14	a9 08		lda #$08			lda 	#NSTFloat
.9b16	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b19	60		rts				rts
.9b1a					URCopyToMantissa:
.9b1a	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b1d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b20	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b23	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b26	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b29	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b2c	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b2f	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b31	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b34	60		rts				rts
.9b35					Random32Bit:
.9b35	5a		phy				phy
.9b36	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b38	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b3b	d0 03		bne $9b40			bne 	_Random1
.9b3d	a8		tay				tay 								; if so do it 256 times
.9b3e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b40					_Random1:
.9b40	0a		asl a				asl 	a 							; LSFR RNG
.9b41	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b44	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b47	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b4a	90 02		bcc $9b4e			bcc 	_Random2
.9b4c	49 c5		eor #$c5			eor 	#$C5
.9b4e					_Random2:
.9b4e	88		dey				dey
.9b4f	d0 ef		bne $9b40			bne 	_Random1
.9b51	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b54	7a		ply				ply
.9b55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b56					SgnUnary:
.9b56	fa		plx				plx 								; restore stack pos
.9b57	20 43 9d	jsr $9d43			jsr 	EvaluateNumber 				; get a float or int
.9b5a	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9b5d	20 4a 9e	jsr $9e4a			jsr 	NSMIsZero 					; if zero
.9b60	f0 10		beq $9b72			beq 	_SGZero  					; return Int Zero
.9b62	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b65	48		pha				pha
.9b66	a9 01		lda #$01			lda 	#1 							; set to 1
.9b68	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.9b6b	68		pla				pla
.9b6c	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b6e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b71	60		rts				rts
.9b72	20 1a 9e	jsr $9e1a	_SGZero:jsr 	NSMSetZero
.9b75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b76					ValUnary:
.9b76	fa		plx				plx 								; restore stack pos
.9b77	20 8c 9b	jsr $9b8c			jsr 	ValMainCode 				; do the main val() code
.9b7a	b0 01		bcs $9b7d			bcs 	_VUError 					; couldn't convert
.9b7c	60		rts				rts
.9b7d					_VUError:
.9b7d	4c ae 9f	jmp $9fae			jmp 	TypeError
.9b80					IsValUnary:
.9b80	fa		plx				plx 								; restore stack pos
.9b81	20 8c 9b	jsr $9b8c			jsr 	ValMainCode 				; do the main val() code
.9b84	b0 03		bcs $9b89			bcs 	_VUBad
.9b86	4c c4 8d	jmp $8dc4			jmp 	ReturnTrue
.9b89					_VUBad:
.9b89	4c d0 8d	jmp $8dd0			jmp 	ReturnFalse
.9b8c					ValMainCode:
.9b8c	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.9b8f	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 			; check right bracket present
.9b92	5a		phy				phy
.9b93	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b95	f0 17		beq $9bae			beq 	_VMCFail2
.9b97	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b99	48		pha				pha 								; save first character
.9b9a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b9c	d0 01		bne $9b9f			bne 	_VMCStart
.9b9e	c8		iny				iny 								; skip over -
.9b9f					_VMCStart:
.9b9f	38		sec				sec 								; initialise first time round.
.9ba0					_VMCNext:
.9ba0	c8		iny				iny 								; pre-increment
.9ba1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9ba3	f0 0c		beq $9bb1			beq 	_VMCSuccess 				; successful.
.9ba5	20 c2 96	jsr $96c2			jsr 	EncodeNumber 				; send it to the number-builder
.9ba8	90 03		bcc $9bad			bcc 	_VMCFail 					; if failed, give up.
.9baa	18		clc				clc 								; next time round, countinue
.9bab	80 f3		bra $9ba0			bra 	_VMCNext
.9bad					_VMCFail:
.9bad	68		pla				pla
.9bae					_VMCFail2:
.9bae	7a		ply				ply
.9baf	38		sec				sec
.9bb0	60		rts				rts
.9bb1					_VMCSuccess:
.9bb1	a9 00		lda #$00			lda 	#0 							; construct final
.9bb3	20 c2 96	jsr $96c2			jsr 	EncodeNumber
.9bb6	68		pla				pla
.9bb7	c9 2d		cmp #$2d			cmp 	#"-"
.9bb9	d0 03		bne $9bbe			bne 	_VMCNotNegative
.9bbb	20 c6 9d	jsr $9dc6			jsr		NSMNegate
.9bbe					_VMCNotNegative:
.9bbe	7a		ply				ply
.9bbf	18		clc				clc
.9bc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bc1					ChrUnary:
.9bc1	fa		plx				plx 								; restore stack pos
.9bc2	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger			; get value
.9bc5	48		pha				pha
.9bc6	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9bc9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bcb	20 fb a6	jsr $a6fb			jsr 	StringTempAllocate
.9bce	68		pla				pla 								; write number to it
.9bcf	20 39 a7	jsr $a739			jsr 	StringTempWrite
.9bd2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bd3					SpcUnary:
.9bd3	fa		plx				plx 								; restore stack pos
.9bd4	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger			; get value
.9bd7	5a		phy				phy
.9bd8	48		pha				pha 								; save count
.9bd9	20 fb a6	jsr $a6fb			jsr 	StringTempAllocate
.9bdc	7a		ply				ply 								; to do count in Y
.9bdd					_SpcLoop:
.9bdd	c0 00		cpy #$00			cpy 	#0
.9bdf	f0 08		beq $9be9			beq 	_SpcExit
.9be1	a9 20		lda #$20			lda 	#32
.9be3	20 39 a7	jsr $a739			jsr 	StringTempWrite
.9be6	88		dey				dey
.9be7	80 f4		bra $9bdd			bra 	_SPCLoop
.9be9					_SpcExit:
.9be9	7a		ply				ply
.9bea	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.9bed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bee					Unary_Str:
.9bee	fa		plx				plx
.9bef	20 43 9d	jsr $9d43			jsr 	EvaluateNumber  			; get number
.9bf2	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 			; closing bracket
.9bf5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bf7	20 10 9c	jsr $9c10			jsr 	ConvertNumberToString 		; do the conversion.
.9bfa	a9 21		lda #$21			lda		#33 						; create buffer
.9bfc	20 fb a6	jsr $a6fb			jsr 	StringTempAllocate 			; allocate memory
.9bff	da		phx				phx
.9c00	a2 00		ldx #$00			ldx 	#0
.9c02					_USCopy:
.9c02	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c05	20 39 a7	jsr $a739			jsr 	StringTempWrite
.9c08	e8		inx				inx
.9c09	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c0c	d0 f4		bne $9c02			bne 	_USCopy
.9c0e	fa		plx				plx
.9c0f	60		rts				rts
.9c10					ConvertNumberToString:
.9c10	5a		phy				phy 								; save code position
.9c11	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c14	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c17	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c1a	10 0a		bpl $9c26			bpl 	_CNTSNotNegative
.9c1c	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c1e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c21	a9 2d		lda #$2d			lda 	#"-"
.9c23	20 8c 9c	jsr $9c8c			jsr 	WriteDecimalBuffer
.9c26					_CNTSNotNegative:
.9c26	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c29	f0 15		beq $9c40			beq 	_CNTSNotFloat
.9c2b	e8		inx				inx 								; round up
.9c2c	a9 01		lda #$01			lda 	#1
.9c2e	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.9c31	ca		dex				dex
.9c32	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c35	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c38	a9 08		lda #$08			lda 	#NSTFloat
.9c3a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c3d	20 53 93	jsr $9353			jsr 	FloatAdd
.9c40					_CNTSNotFloat:
.9c40	20 6e 9c	jsr $9c6e			jsr 	MakePlusTwoString
.9c43	20 39 94	jsr $9439			jsr 	FloatFractionalPart 		; get the fractional part
.9c46	20 fd 94	jsr $94fd			jsr 	NSNormalise					; normalise , exit if zero
.9c49	f0 21		beq $9c6c			beq 	_CNTSExit
.9c4b	a9 2e		lda #$2e			lda 	#"."
.9c4d	20 8c 9c	jsr $9c8c			jsr 	WriteDecimalBuffer 			; write decimal place
.9c50					_CNTSDecimal:
.9c50	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c53	30 17		bmi $9c6c			bmi 	_CNTSExit
.9c55	e8		inx				inx 								; x 10.0
.9c56	a9 0a		lda #$0a			lda 	#10
.9c58	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.9c5b	a9 08		lda #$08			lda 	#NSTFloat
.9c5d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c60	ca		dex				dex
.9c61	20 c6 94	jsr $94c6			jsr 	FloatMultiply
.9c64	20 6e 9c	jsr $9c6e			jsr 	MakePlusTwoString
.9c67	20 39 94	jsr $9439			jsr 	FloatFractionalPart 		; get the fractional part
.9c6a	80 e4		bra $9c50			bra 	_CNTSDecimal 				; keep going.
.9c6c					_CNTSExit:
.9c6c	7a		ply				ply
.9c6d	60		rts				rts
.9c6e					MakePlusTwoString:
.9c6e	da		phx				phx
.9c6f	20 f1 9d	jsr $9df1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c72	e8		inx				inx 								; access it
.9c73	e8		inx				inx
.9c74	20 9c 94	jsr $949c			jsr 	FloatIntegerPart 			; make it an integer
.9c77	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c79	20 7e 92	jsr $927e			jsr 	ConvertInt32
.9c7c	a2 00		ldx #$00			ldx	 	#0
.9c7e					_MPTSCopy:
.9c7e	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c81	20 8c 9c	jsr $9c8c			jsr 	WriteDecimalBuffer
.9c84	e8		inx				inx
.9c85	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c88	d0 f4		bne $9c7e			bne 	_MPTSCopy
.9c8a	fa		plx				plx
.9c8b	60		rts				rts
.9c8c					WriteDecimalBuffer:
.9c8c	da		phx				phx
.9c8d	ae 95 04	ldx $0495			ldx 	dbOffset
.9c90	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c93	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c96	ee 95 04	inc $0495			inc 	dbOffset
.9c99	fa		plx				plx
.9c9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c9b					Unary_Left:
.9c9b	fa		plx				plx
.9c9c	18		clc				clc 								; only one parameter
.9c9d	20 12 9d	jsr $9d12			jsr 	SubstringInitial 			; set up.
.9ca0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9ca3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ca6	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ca9	80 2c		bra $9cd7			bra 	SubstringMain
.9cab					Unary_Right:
.9cab	fa		plx				plx
.9cac	18		clc				clc 								; only one parameter
.9cad	20 12 9d	jsr $9d12			jsr 	SubstringInitial 			; set up.
.9cb0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9cb3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cb6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cb9	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cbc	b0 02		bcs $9cc0			bcs 	_URNotUnderflow
.9cbe	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cc0					_URNotUnderFlow:
.9cc0	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9cc3	80 12		bra $9cd7			bra 	SubStringMain
.9cc5					Unary_Mid:
.9cc5	fa		plx				plx
.9cc6	38		sec				sec 								; two parameters
.9cc7	20 12 9d	jsr $9d12			jsr 	SubstringInitial 			; set up.
.9cca	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ccd	f0 05		beq $9cd4			beq 	_UMError
.9ccf	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cd2	80 03		bra $9cd7			bra 	SubStringMain
.9cd4					_UMError:
.9cd4	4c b3 9f	jmp $9fb3			jmp 	ArgumentError
.9cd7					SubStringMain:
.9cd7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cda	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cdd	b0 2d		bcs $9d0c			bcs 	_SSMNull 					; if so, return an empty string.
.9cdf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9ce2	f0 28		beq $9d0c			beq 	_SSMNull 					; return empty string.
.9ce4	18		clc				clc 								; add the offset +1 to the address and
.9ce5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ce8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ceb	85 36		sta $36				sta 	zTemp0
.9ced	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cf0	69 00		adc #$00			adc 	#0
.9cf2	85 37		sta $37				sta 	zTemp0+1
.9cf4					_SSMNoCarry:
.9cf4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cf7	20 fb a6	jsr $a6fb			jsr 	StringTempAllocate 			; allocate that many characters
.9cfa	5a		phy				phy 								; save Y
.9cfb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cfd					_SSMCopy:
.9cfd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cff	f0 09		beq $9d0a			beq 	_SSMEString 				; no more to copy
.9d01	20 39 a7	jsr $a739			jsr 	StringTempWrite 			; and write it out.
.9d04	c8		iny				iny
.9d05	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d08	d0 f3		bne $9cfd			bne 	_SSMCopy
.9d0a					_SSMEString:
.9d0a	7a		ply				ply
.9d0b					_SSMExit:
.9d0b	60		rts				rts
.9d0c					_SSMNull:
.9d0c	a9 00		lda #$00			lda 	#0
.9d0e	20 fb a6	jsr $a6fb			jsr 	StringTempAllocate
.9d11	60		rts				rts
.9d12					SubstringInitial:
.9d12	da		phx				phx 								; save initial stack position
.9d13	08		php				php 								; save carry on stack indicating 2 parameters
.9d14	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get a string
.9d17	5a		phy				phy 								; calculate length to exponent.
.9d18	a0 ff		ldy #$ff			ldy 	#$FF
.9d1a					_SIFindLength:
.9d1a	c8		iny				iny
.9d1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d1d	d0 fb		bne $9d1a			bne 	_SIFindLength
.9d1f	98		tya				tya
.9d20	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d23	7a		ply				ply
.9d24	e8		inx				inx
.9d25	20 46 8d	jsr $8d46			jsr 	CheckComma 					; comma next
.9d28	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get next parameter
.9d2b	28		plp				plp 								; is it the last parameter ?
.9d2c	90 07		bcc $9d35			bcc 	_SSIExit 					; if so, exit.
.9d2e	e8		inx				inx
.9d2f	20 46 8d	jsr $8d46			jsr 	CheckComma 					; comma next
.9d32	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get last parameter
.9d35					_SSIExit:
.9d35	fa		plx				plx
.9d36	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket 			; check closing bracket
.9d39	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d3a					EvaluateValue:
.9d3a	48		pha				pha
.9d3b	20 06 93	jsr $9306			jsr		EvaluateExpression 			; expression
.9d3e	20 24 96	jsr $9624			jsr 	Dereference					; derefernce it
.9d41	68		pla				pla
.9d42	60		rts				rts
.9d43					EvaluateNumber:
.9d43	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get a value
.9d46	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d49	29 10		and #$10			and 	#NSBIsString
.9d4b	d0 16		bne $9d63			bne 	HelperTypeError
.9d4d	60		rts				rts
.9d4e					EvaluateString:
.9d4e	20 3a 9d	jsr $9d3a			jsr 	EvaluateValue 				; get a value
.9d51	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d54	29 10		and #$10			and 	#NSBIsString
.9d56	f0 0b		beq $9d63			beq 	HelperTypeError
.9d58					CopyAddressToTemp0:
.9d58	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d5b	85 36		sta $36				sta 	zTemp0
.9d5d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d60	85 37		sta $37				sta 	zTemp0+1
.9d62	60		rts				rts
.9d63					HelperTypeError:
.9d63	4c ae 9f	jmp $9fae			jmp 	TypeError
.9d66					EvaluateInteger:
.9d66	20 43 9d	jsr $9d43			jsr 	EvaluateNumber
.9d69	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d6c	d0 0a		bne $9d78			bne 	HelperValueError 			; if not, it's a float.
.9d6e	60		rts				rts
.9d6f					EvaluateUnsignedInteger:
.9d6f	20 66 9d	jsr $9d66			jsr 	EvaluateInteger 			; check integer is +ve
.9d72	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d75	30 01		bmi $9d78			bmi 	HelperValueError
.9d77	60		rts				rts
.9d78					HelperValueError:
.9d78	4c b3 9f	jmp $9fb3			jmp 	ArgumentError
.9d7b					Evaluate16BitInteger:
.9d7b	20 6f 9d	jsr $9d6f			jsr	 	EvaluateUnsignedInteger		; get integer
.9d7e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d81	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d84	d0 f2		bne $9d78			bne 	HelperValueError
.9d86	60		rts				rts
.9d87					Evaluate16BitIntegerSigned:
.9d87	20 66 9d	jsr $9d66			jsr	 	EvaluateInteger				; get integer
.9d8a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d8d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d90	d0 e6		bne $9d78			bne 	HelperValueError
.9d92	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d95	10 03		bpl $9d9a			bpl 	_EISNotSigned
.9d97	20 cf 9d	jsr $9dcf			jsr 	NSMNegateMantissa
.9d9a					_EISNotSigned:
.9d9a	60		rts				rts
.9d9b					Evaluate8BitInteger:
.9d9b	20 6f 9d	jsr $9d6f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d9e	d0 d8		bne $9d78			bne 	HelperValueError
.9da0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9da3	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9da6	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9da9	d0 cd		bne $9d78			bne 	HelperValueError
.9dab	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9daf					Multiply8x8:
.9daf	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9db0	85 36		sta $36			  	sta 	zTemp0
.9db2	86 37		stx $37				stx 	zTemp0+1
.9db4	a9 00		lda #$00			lda 	#0
.9db6	a2 08		ldx #$08			ldx 	#8
.9db8					_M88Loop:
.9db8	90 03		bcc $9dbd			bcc 	_M88NoAdd
.9dba	18		clc				clc
.9dbb	65 37		adc $37				adc 	zTemp0+1
.9dbd					_M88NoAdd:
.9dbd	6a		ror a				ror 	a
.9dbe	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9dc0	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9dc1	d0 f5		bne $9db8			bne 	_M88Loop
.9dc3	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dc5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dc6					NSMNegate:
.9dc6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dc9	49 80		eor #$80			eor 	#NSBIsNegative
.9dcb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dce	60		rts				rts
.9dcf					NSMNegateMantissa:
.9dcf	38		sec				sec
.9dd0	a9 00		lda #$00			lda 	#0
.9dd2	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dd5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dd8	a9 00		lda #$00			lda 	#0
.9dda	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9ddd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9de0	a9 00		lda #$00			lda 	#0
.9de2	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9de5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9de8	a9 00		lda #$00			lda 	#0
.9dea	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9ded	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9df0	60		rts				rts
.9df1					NSMShiftUpTwo:
.9df1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9df4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9df7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dfa	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9dfd	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e00	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9e03	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e06	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e09	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e0c	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e0f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e12	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e15	60		rts				rts
.9e16					NSMSetZeroMantissaOnly:
.9e16	a9 00		lda #$00			lda 	#0
.9e18	80 08		bra $9e22			bra 	NSMSetMantissa
.9e1a					NSMSetZero:
.9e1a	a9 00		lda #$00			lda 	#0
.9e1c					NSMSetByte:
.9e1c	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e1f	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e22					NSMSetMantissa:
.9e22	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e25	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e28	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e2b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e2e	60		rts				rts
.9e2f					NSMShiftLeft:
.9e2f	18		clc				clc
.9e30					NSMRotateLeft:
.9e30	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e33	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e36	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e39	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e3c	60		rts				rts
.9e3d					NSMShiftRight:
.9e3d	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e40	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e43	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e46	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e49	60		rts				rts
.9e4a					NSMIsZero:
.9e4a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e4d	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e50	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e53	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e57					Assemble_ora:
.9e57	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e5a	01					.byte $01
.9e5b					Assemble_and:
.9e5b	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e5e	21					.byte $21
.9e5f					Assemble_eor:
.9e5f	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e62	41					.byte $41
.9e63					Assemble_adc:
.9e63	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e66	61					.byte $61
.9e67					Assemble_sta:
.9e67	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e6a	81					.byte $81
.9e6b					Assemble_lda:
.9e6b	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e6e	a1					.byte $a1
.9e6f					Assemble_cmp:
.9e6f	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e72	c1					.byte $c1
.9e73					Assemble_sbc:
.9e73	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e76	e1					.byte $e1
.9e77					Assemble_asl:
.9e77	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e7a	02					.byte $02
>9e7b	75					.byte $75
.9e7c					Assemble_rol:
.9e7c	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e7f	22					.byte $22
>9e80	75					.byte $75
.9e81					Assemble_lsr:
.9e81	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e84	42					.byte $42
>9e85	75					.byte $75
.9e86					Assemble_ror:
.9e86	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e89	62					.byte $62
>9e8a	75					.byte $75
.9e8b					Assemble_stx:
.9e8b	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e8e	82					.byte $82
>9e8f	50					.byte $50
.9e90					Assemble_ldx:
.9e90	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e93	a2					.byte $a2
>9e94	d0					.byte $d0
.9e95					Assemble_dec:
.9e95	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e98	c2					.byte $c2
>9e99	55					.byte $55
.9e9a					Assemble_inc:
.9e9a	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e9d	e2					.byte $e2
>9e9e	55					.byte $55
.9e9f					Assemble_stz:
.9e9f	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ea2	60					.byte $60
>9ea3	44					.byte $44
.9ea4					Assemble_bit:
.9ea4	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ea7	20					.byte $20
>9ea8	55					.byte $55
.9ea9					Assemble_sty:
.9ea9	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eac	80					.byte $80
>9ead	54					.byte $54
.9eae					Assemble_ldy:
.9eae	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eb1	a0					.byte $a0
>9eb2	d5					.byte $d5
.9eb3					Assemble_cpy:
.9eb3	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eb6	c0					.byte $c0
>9eb7	d4					.byte $d4
.9eb8					Assemble_cpx:
.9eb8	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ebb	e0					.byte $e0
>9ebc	d0					.byte $d0
.9ebd					Assemble_tsb:
.9ebd	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ec0	00					.byte $00
>9ec1	50					.byte $50
.9ec2					Assemble_trb:
.9ec2	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ec5	10					.byte $10
>9ec6	50					.byte $50
.9ec7					Assemble_jsr:
.9ec7	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eca	14					.byte $14
>9ecb	10					.byte $10
.9ecc					Assemble_jmp:
.9ecc	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ecf	40					.byte $40
>9ed0	10					.byte $10
.9ed1					Assemble_bpl:
.9ed1	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ed4	10					.byte $10
.9ed5					Assemble_bmi:
.9ed5	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ed8	30					.byte $30
.9ed9					Assemble_bvc:
.9ed9	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9edc	50					.byte $50
.9edd					Assemble_bvs:
.9edd	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ee0	70					.byte $70
.9ee1					Assemble_bcc:
.9ee1	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ee4	90					.byte $90
.9ee5					Assemble_bcs:
.9ee5	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ee8	b0					.byte $b0
.9ee9					Assemble_bne:
.9ee9	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9eec	d0					.byte $d0
.9eed					Assemble_beq:
.9eed	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ef0	f0					.byte $f0
.9ef1					Assemble_bra:
.9ef1	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ef4	80					.byte $80
.9ef5					Assemble_brk:
.9ef5	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ef8	00					.byte $00
.9ef9					Assemble_php:
.9ef9	20 12 81	jsr $8112		jsr	AssembleGroup4
>9efc	08					.byte $08
.9efd					Assemble_clc:
.9efd	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f00	18					.byte $18
.9f01					Assemble_plp:
.9f01	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f04	28					.byte $28
.9f05					Assemble_sec:
.9f05	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f08	38					.byte $38
.9f09					Assemble_rti:
.9f09	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f0c	40					.byte $40
.9f0d					Assemble_pha:
.9f0d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f10	48					.byte $48
.9f11					Assemble_cli:
.9f11	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f14	58					.byte $58
.9f15					Assemble_phy:
.9f15	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f18	5a					.byte $5a
.9f19					Assemble_rts:
.9f19	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f1c	60					.byte $60
.9f1d					Assemble_pla:
.9f1d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f20	68					.byte $68
.9f21					Assemble_sei:
.9f21	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f24	78					.byte $78
.9f25					Assemble_ply:
.9f25	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f28	7a					.byte $7a
.9f29					Assemble_dey:
.9f29	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f2c	88					.byte $88
.9f2d					Assemble_txa:
.9f2d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f30	8a					.byte $8a
.9f31					Assemble_tya:
.9f31	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f34	98					.byte $98
.9f35					Assemble_txs:
.9f35	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f38	9a					.byte $9a
.9f39					Assemble_tay:
.9f39	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f3c	a8					.byte $a8
.9f3d					Assemble_tax:
.9f3d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f40	aa					.byte $aa
.9f41					Assemble_clv:
.9f41	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f44	b8					.byte $b8
.9f45					Assemble_tsx:
.9f45	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f48	ba					.byte $ba
.9f49					Assemble_iny:
.9f49	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f4c	c8					.byte $c8
.9f4d					Assemble_dex:
.9f4d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f50	ca					.byte $ca
.9f51					Assemble_cld:
.9f51	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f54	d8					.byte $d8
.9f55					Assemble_phx:
.9f55	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f58	da					.byte $da
.9f59					Assemble_stp:
.9f59	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f5c	db					.byte $db
.9f5d					Assemble_inx:
.9f5d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f60	e8					.byte $e8
.9f61					Assemble_nop:
.9f61	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f64	ea					.byte $ea
.9f65					Assemble_sed:
.9f65	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f68	f8					.byte $f8
.9f69					Assemble_plx:
.9f69	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f6c	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f6d					DecimalScalarTable:
>9f6d	66 66 66 66				.dword $66666666 ; 0.1
>9f71	de					.byte $de
>9f72	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f76	db					.byte $db
>9f77	4c 37 89 41				.dword $4189374c ; 0.001
>9f7b	d8					.byte $d8
>9f7c	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f80	d4					.byte $d4
>9f81	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f85	d1					.byte $d1
>9f86	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f8a	ce					.byte $ce
>9f8b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f8f	ca					.byte $ca
>9f90	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f94	c7					.byte $c7
>9f95	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f99	c4					.byte $c4
>9f9a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f9e	c0					.byte $c0
>9f9f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9fa3	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9fa4					SyntaxError:
.9fa4	a9 02		lda #$02		lda	#2
.9fa6	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.9fa9					RangeError:
.9fa9	a9 04		lda #$04		lda	#4
.9fab	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.9fae					TypeError:
.9fae	a9 05		lda #$05		lda	#5
.9fb0	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.9fb3					ArgumentError:
.9fb3	a9 07		lda #$07		lda	#7
.9fb5	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.9fb8					NotDoneError:
.9fb8	a9 0c		lda #$0c		lda	#12
.9fba	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.9fbd					ErrorText:
>9fbd	42 72 65 61 6b 00			.text	"Break",0
>9fc3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fcb	72 72 6f 72 00
>9fd0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fd8	20 62 79 20 7a 65 72 6f 00
>9fe1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fe9	61 6e 67 65 00
>9fee	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9ff6	6d 61 74 63 68 00
>9ffc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a004	65 6d 6f 72 79 00
>a00a	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a012	61 72 67 75 6d 65 6e 74 00
>a01b	53 74 6f 70 00				.text	"Stop",0
>a020	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a028	6f 6f 20 6c 6f 6e 67 00
>a030	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a038	6e 20 66 61 69 6c 65 64 00
>a041	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a049	61 74 61 00
>a04d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a055	65 6e 74 65 64 00
>a05b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a063	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a06f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a077	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a084	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a08c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a099	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a0a1	68 6f 75 74 20 57 68 69 6c 65 00
>a0ac	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0b4	68 6f 75 74 20 46 6f 72 00
>a0bd	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0c5	61 63 6b 20 66 75 6c 6c 00
>a0ce	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0d6	75 63 74 75 72 65 00
>a0dd	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0e5	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0f2	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0fa	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a108	41 72 72 61 79 20 73 69			.text	"Array size",0
>a110	7a 65 00
>a113	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a11b	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a123	42 75 69 6c 74 20 53 75			.text "Built Sunday 20-Nov-2022. Build 3291."
>a12b	6e 64 61 79 20 32 30 2d 4e 6f 76 2d 32 30 32 32
>a13b	2e 20 42 75 69 6c 64 20 33 32 39 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a148					MemoryDeleteLine:
.a148	20 67 a1	jsr $a167			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a14b	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a14d	a8		tay				tay
.a14e					_MDDLLoop:
.a14e	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a150	92 30		sta ($30)			sta 	(codePtr)
.a152	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a154	c5 3a		cmp $3a				cmp 	zTemp2
.a156	d0 07		bne $a15f			bne 	_MDLDLNext
.a158	a5 31		lda $31				lda 	codePtr+1
.a15a	c5 3b		cmp $3b				cmp 	zTemp2+1
.a15c	d0 01		bne $a15f			bne 	_MDLDLNext
.a15e					_MDDLExit:
.a15e	60		rts				rts
.a15f					_MDLDLNext:
.a15f	e6 30		inc $30				inc 	codePtr						; next byte
.a161	d0 eb		bne $a14e			bne 	_MDDLLoop
.a163	e6 31		inc $31				inc 	codePtr+1
.a165	80 e7		bra $a14e			bra 	_MDDLLoop
.a167					IMemoryFindEnd:
.a167	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a169	85 3a		sta $3a				sta 	0+zTemp2
.a16b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a16d	85 3b		sta $3b				sta 	1+zTemp2
.a16f					_MDLFELoop:
.a16f	b2 3a		lda ($3a)			lda 	(zTemp2)
.a171	f0 0b		beq $a17e			beq 	_MDLFEExit
.a173	18		clc				clc
.a174	65 3a		adc $3a				adc 	zTemp2
.a176	85 3a		sta $3a				sta 	zTemp2
.a178	90 f5		bcc $a16f			bcc 	_MDLFELoop
.a17a	e6 3b		inc $3b				inc 	zTemp2+1
.a17c	80 f1		bra $a16f			bra 	_MDLFELoop
.a17e					_MDLFEExit:
.a17e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a17f					MemoryInsertLine:
.a17f	08		php				php
.a180	20 67 a1	jsr $a167			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a183	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a185	1a		inc a				inc 	a
.a186	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a188	b0 36		bcs $a1c0			bcs 	_MDLIError
.a18a	28		plp				plp
.a18b	90 08		bcc $a195			bcc 	_MDLIFound
.a18d	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a18f	85 30		sta $30				sta 	codePtr
.a191	a5 3b		lda $3b				lda 	zTemp2+1
.a193	85 31		sta $31				sta 	codePtr+1
.a195					_MDLIFound:
.a195	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a198	a8		tay				tay
.a199					_MDLIInsert:
.a199	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a19b	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a19d	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a19f	c5 3a		cmp $3a				cmp 	zTemp2
.a1a1	d0 06		bne $a1a9			bne 	_MDLINext
.a1a3	a5 31		lda $31				lda 	codePtr+1
.a1a5	c5 3b		cmp $3b				cmp 	zTemp2+1
.a1a7	f0 0a		beq $a1b3			beq 	_MDLIHaveSpace
.a1a9					_MDLINext:
.a1a9	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a1ab	d0 02		bne $a1af			bne 	_MDLINoBorrow
.a1ad	c6 3b		dec $3b				dec 	zTemp2+1
.a1af					_MDLINoBorrow:
.a1af	c6 3a		dec $3a				dec 	zTemp2
.a1b1	80 e6		bra $a199			bra 	_MDLIInsert
.a1b3					_MDLIHaveSpace:
.a1b3	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a1b6	88		dey				dey 								; from offset-1 to 0
.a1b7					_MDLICopy:
.a1b7	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1ba	91 30		sta ($30),y			sta 	(codePtr),y
.a1bc	88		dey				dey
.a1bd	10 f8		bpl $a1b7			bpl 	_MDLICopy
.a1bf	60		rts				rts
.a1c0					_MDLIError:
.a1c0	a9 06		lda #$06		lda	#6
.a1c2	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.a1c5					MDLAppendLine:
.a1c5	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1c7	85 36		sta $36				sta 	zTemp0
.a1c9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1cb	85 38		sta $38				sta 	0+zTemp1
.a1cd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1cf	85 39		sta $39				sta 	1+zTemp1
.a1d1	b2 38		lda ($38)			lda 	(zTemp1)
.a1d3	d0 0a		bne $a1df			bne 	_MDLANoInitialise
.a1d5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1d7	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1da	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1dc	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1df					_MDLANoInitialise:
.a1df	18		clc				clc
.a1e0	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1e3	85 38		sta $38				sta 	zTemp1
.a1e5	72 36		adc ($36)			adc 	(zTemp0)
.a1e7	8d 2b 06	sta $062b			sta 	AppendPointer
.a1ea	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1ed	85 39		sta $39				sta 	zTemp1+1
.a1ef	69 00		adc #$00			adc 	#0
.a1f1	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1f4	a0 00		ldy #$00			ldy 	#0
.a1f6					_MDLACopy:
.a1f6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1f8	91 38		sta ($38),y			sta 	(zTemp1),y
.a1fa	c8		iny				iny
.a1fb	98		tya				tya
.a1fc	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1fe	d0 f6		bne $a1f6			bne 	_MDLACopy
.a200	a9 00		lda #$00			lda 	#0 							; end of program.
.a202	91 38		sta ($38),y			sta 	(zTemp1),y
.a204	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a205					MemoryNew:
.a205	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a207	85 30		sta $30				sta 	codePtr
.a209	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a20b	85 31		sta $31				sta 	codePtr+1
.a20d	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a20f	92 30		sta ($30)			sta 	(codePtr)
.a211	60		rts				rts
.a212					MemoryInline:
.a212	98		tya				tya 								; put address into stack,x
.a213	18		clc				clc
.a214	65 30		adc $30				adc 	codePtr
.a216	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a219	a5 31		lda $31				lda 	codePtr+1
.a21b	69 00		adc #$00			adc 	#0
.a21d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a220	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a223	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a226	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a227					MemorySearch:
.a227	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a229	86 37		stx $37				stx 	zTemp0+1
.a22b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a22d	85 30		sta $30				sta 	codePtr
.a22f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a231	85 31		sta $31				sta 	codePtr+1
.a233					_MTAXLoop:
.a233	b2 30		lda ($30)			lda 	(codePtr)
.a235	18		clc				clc
.a236	f0 21		beq $a259			beq 	_MTAXExit 					; reached end, exit with CC.
.a238	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a23a	b1 30		lda ($30),y			lda 	(codePtr),y
.a23c	38		sec				sec
.a23d	e5 36		sbc $36				sbc 	zTemp0
.a23f	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a241	c8		iny				iny 								; do the MSB
.a242	b1 30		lda ($30),y			lda 	(codePtr),y
.a244	e5 37		sbc $37				sbc 	zTemp0+1
.a246	05 38		ora $38				ora 	zTemp1
.a248	f0 0f		beq $a259			beq 	_MTAXExit	 				; found
.a24a	b0 0d		bcs $a259			bcs 	_MTAXExit 					; current < required exit
.a24c	18		clc				clc
.a24d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a24f	65 30		adc $30				adc 	codePtr
.a251	85 30		sta $30				sta 	codePtr
.a253	90 02		bcc $a257			bcc 	_CREExit
.a255	e6 31		inc $31				inc 	codePtr+1
.a257					_CREExit:
.a257	80 da		bra $a233			bra 	_MTAXLoop
.a259					_MTAXExit:
.a259	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcommand.asm

.a25a					RectangleCommand:
.a25a	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a25c	80 02		bra $a260			bra 	ShapeDrawCmd
.a25e					CircleCommand:
.a25e	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a260					ShapeDrawCmd:
.a260	20 ee a2	jsr $a2ee			jsr 	RunGraphicsCommand
.a263					ShapeDraw:
.a263	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a266	4c e2 a2	jmp $a2e2			jmp 	ExecuteGraphicCommand	 	; and complete
.a269					SpriteCommand:
.a269	a2 00		ldx #$00			ldx 	#0
.a26b	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get image number.
.a26e	5a		phy				phy
.a26f	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a271	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a274	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a276	b0 0d		bcs $a285			bcs 	_SCRange
.a278	a0 ff		ldy #$ff			ldy 	#255
.a27a	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a27d	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a27f	7a		ply				ply
.a280	20 ee a2	jsr $a2ee			jsr 	RunGraphicsCommand
.a283	80 5d		bra $a2e2			bra 	ExecuteGraphicCommand
.a285					_SCRange:
.a285	4c a9 9f	jmp $9fa9			jmp 	RangeError
.a288					ImageCommand:
.a288	a2 00		ldx #$00			ldx 	#0
.a28a	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get image number.
.a28d	20 ee a2	jsr $a2ee			jsr 	RunGraphicsCommand
.a290					ImageRunDraw:
.a290	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a292	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a295	ad 34 06	lda $0634			lda 	gxDrawScale
.a298	0a		asl a				asl 	a
.a299	0a		asl a				asl 	a
.a29a	0a		asl a				asl 	a
.a29b	a8		tay				tay
.a29c	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a29e	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a2a1	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a2a4	60		rts				rts
.a2a5					TextCommand:
.a2a5	a2 00		ldx #$00			ldx 	#0
.a2a7	20 4e 9d	jsr $9d4e			jsr 	EvaluateString 				; get text
.a2aa	20 ee a2	jsr $a2ee			jsr 	RunGraphicsCommand
.a2ad					TextRunDraw:
.a2ad	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a2af	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a2b2	a0 00		ldy #$00			ldy 	#0
.a2b4					_IRDLoop:
.a2b4	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a2b7	85 37		sta $37				sta 	zTemp0+1
.a2b9	ad 08 04	lda $0408			lda 	NSMantissa0
.a2bc	85 36		sta $36				sta 	zTemp0
.a2be	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2c0	f0 13		beq $a2d5			beq 	_IRDExit
.a2c2	5a		phy				phy									; save string pos
.a2c3	48		pha				pha 								; save char
.a2c4	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a2c7	0a		asl a				asl 	a
.a2c8	0a		asl a				asl 	a
.a2c9	0a		asl a				asl 	a
.a2ca	a8		tay				tay
.a2cb	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2cd	fa		plx				plx 								; char to draw
.a2ce	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a2d1	7a		ply				ply 								; restore string pos
.a2d2	c8		iny				iny
.a2d3	90 df		bcc $a2b4			bcc 	_IRDLoop 					; go back if no error.
.a2d5					_IRDExit:
.a2d5	60		rts				rts
.a2d6					PlotCommand:
.a2d6	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2d8	20 ee a2	jsr $a2ee			jsr 	RunGraphicsCommand
.a2db	80 05		bra $a2e2			bra 	ExecuteGraphicCommand
.a2dd					LineCommand:
.a2dd	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2df	20 ee a2	jsr $a2ee			jsr 	RunGraphicsCommand
.a2e2					ExecuteGraphicCommand:
.a2e2	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a2e5	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw 				; draw it and exit
.a2e8	b0 01		bcs $a2eb			bcs 	_EGCError
.a2ea	60		rts				rts
.a2eb					_EGCError:
.a2eb	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.a2ee					RunGraphicsCommand:
.a2ee	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a2f1	68		pla				pla 								; pop handler address
.a2f2	fa		plx				plx
.a2f3	1a		inc a				inc 	a
.a2f4	d0 01		bne $a2f7			bne 	_RGINoCarry
.a2f6	e8		inx				inx
.a2f7					_RGINoCarry:
.a2f7	8d 32 06	sta $0632			sta 	GXHandler
.a2fa	8e 33 06	stx $0633			stx 	GXHandler+1
.a2fd					_RGICommandLoop:
.a2fd	b1 30		lda ($30),y			lda 	(codePtr),y
.a2ff	c8		iny				iny
.a300	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a302	f0 53		beq $a357			beq 	_RGI_To
.a304	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a306	f0 55		beq $a35d			beq 	_RGI_Here
.a308	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a30a	f0 3d		beq $a349			beq 	_RGI_Exit
.a30c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a30e	f0 39		beq $a349			beq 	_RGI_Exit
.a310	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a312	f0 3e		beq $a352			beq 	_RGI_Frame
.a314	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a316	f0 33		beq $a34b			beq 	_RGI_Solid
.a318	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a31a	f0 4b		beq $a367			beq 	_RGI_By
.a31c	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a31e	f0 17		beq $a337			beq 	_RGI_Move2
.a320	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a322	f0 65		beq $a389			beq 	_RGI_Dim
.a324	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a326	f0 78		beq $a3a0			beq 	_RGI_Colour
.a328	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a32a	f0 74		beq $a3a0			beq 	_RGI_Colour
.a32c	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a32f	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a331	d0 03		bne $a336			bne 	_RGI_Move 					; move
.a333	4c ca a3	jmp $a3ca			jmp		_RGI_SpriteInstructions
.a336					_RGI_Move:
.a336	88		dey				dey 								; unpick get.
.a337					_RGI_Move2:
.a337	20 f0 a3	jsr $a3f0			jsr 	GCGetCoordinatePair 		; move to here
.a33a	20 17 a4	jsr $a417			jsr 	GCCopyPairToStore 			; save
.a33d	5a		phy				phy
.a33e	20 0d a4	jsr $a40d			jsr 	GCLoadAXY 					; load in
.a341	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a343	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a346	7a		ply				ply
.a347	80 b4		bra $a2fd			bra 	_RGICommandLoop 			; and go round
.a349					_RGI_Exit:
.a349	88		dey				dey 								; unpick : / EOL
.a34a	60		rts				rts
.a34b					_RGI_Solid:
.a34b	a9 02		lda #$02			lda 	#2
.a34d	8d 2e 06	sta $062e			sta 	gxFillSolid
.a350	80 ab		bra $a2fd			bra 	_RGICommandLoop
.a352					_RGI_Frame:
.a352	9c 2e 06	stz $062e			stz 	gxFillSolid
.a355	80 a6		bra $a2fd			bra 	_RGICommandLoop
.a357					_RGI_To:
.a357	20 f0 a3	jsr $a3f0			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a35a	20 17 a4	jsr $a417			jsr 	GCCopyPairToStore
.a35d					_RGI_Here:
.a35d	5a		phy				phy
.a35e	20 0d a4	jsr $a40d			jsr 	GCLoadAXY 					; load it into AXY
.a361	20 c7 a3	jsr $a3c7			jsr 	_RGICallHandler 			; go do whatever it is.
.a364	7a		ply				ply
.a365	80 96		bra $a2fd			bra 	_RGICommandLoop 			; and go round
.a367					_RGI_By:
.a367	20 fd a3	jsr $a3fd			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a36a	18		clc				clc
.a36b	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a36e	6d 2f 06	adc $062f			adc 	gxxPos
.a371	8d 2f 06	sta $062f			sta 	gxXPos
.a374	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a377	6d 30 06	adc $0630			adc 	gxxPos+1
.a37a	8d 30 06	sta $0630			sta 	gxXPos+1
.a37d	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a380	18		clc				clc
.a381	6d 31 06	adc $0631			adc 	gxYPos
.a384	8d 31 06	sta $0631			sta 	gxYPos
.a387	80 d4		bra $a35d			bra 	_RGI_Here
.a389					_RGI_Dim:
.a389	a2 01		ldx #$01			ldx	 	#1
.a38b	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger
.a38e	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a391	c9 00		cmp #$00			cmp 	#0
.a393	f0 2f		beq $a3c4			beq 	_RGIRange
.a395	c9 09		cmp #$09			cmp 	#8+1
.a397	b0 2b		bcs $a3c4			bcs		_RGIRange
.a399	3a		dec a				dec 	a
.a39a	8d 34 06	sta $0634			sta 	gxDrawScale
.a39d	4c fd a2	jmp $a2fd			jmp 	_RGICommandLoop
.a3a0					_RGI_Colour:
.a3a0	a2 01		ldx #$01			ldx 	#1 							; colour
.a3a2	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger
.a3a5	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a3a7	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero
.a3aa	b1 30		lda ($30),y			lda 	(codePtr),y
.a3ac	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a3ae	d0 04		bne $a3b4			bne 	_RGICDefaultMode
.a3b0	c8		iny				iny
.a3b1	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger
.a3b4					_RGICDefaultMode:
.a3b4	5a		phy				phy
.a3b5	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a3b7	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a3ba	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a3bd	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a3c0	7a		ply				ply
.a3c1	4c fd a2	jmp $a2fd			jmp 	_RGICommandLoop 			; and go round
.a3c4					_RGIRange:
.a3c4	4c a9 9f	jmp $9fa9			jmp 	RangeError
.a3c7					_RGICallHandler:
.a3c7	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a3ca					_RGI_SpriteInstructions:
.a3ca	c9 be		cmp #$be			cmp 	#KWD_OFF
.a3cc	f0 07		beq $a3d5			beq 	_RGISpriteOff
.a3ce	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a3d0	f0 13		beq $a3e5			beq 	_RGISetImage
.a3d2	4c 36 a3	jmp $a336			jmp 	_RGI_Move
.a3d5					_RGISpriteOff:
.a3d5	5a		phy				phy
.a3d6	a0 01		ldy #$01			ldy 	#1
.a3d8	a2 00		ldx #$00			ldx 	#0
.a3da					_RGIDoCommandLoop:
.a3da	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3dc	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a3df	7a		ply				ply
.a3e0	b0 e2		bcs $a3c4			bcs 	_RGIRange
.a3e2	4c fd a2	jmp $a2fd			jmp 	_RGICommandLoop
.a3e5					_RGISetImage:
.a3e5	a2 01		ldx #$01			ldx 	#1
.a3e7	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger
.a3ea	5a		phy				phy
.a3eb	aa		tax				tax
.a3ec	a0 00		ldy #$00			ldy 	#0
.a3ee	80 ea		bra $a3da			bra 	_RGIDoCommandLoop
.a3f0					GCGetCoordinatePair:
.a3f0	a2 01		ldx #$01			ldx 	#1
.a3f2	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.a3f5	20 46 8d	jsr $8d46			jsr 	CheckComma
.a3f8	e8		inx				inx
.a3f9	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.a3fc	60		rts				rts
.a3fd					GCSignedCoordinatePair:
.a3fd	a2 01		ldx #$01			ldx 	#1
.a3ff	20 87 9d	jsr $9d87			jsr 	Evaluate16BitIntegerSigned
.a402	20 46 8d	jsr $8d46			jsr 	CheckComma
.a405	e8		inx				inx
.a406	20 87 9d	jsr $9d87			jsr 	Evaluate16BitIntegerSigned
.a409	60		rts				rts
.a40a					_GCCPRange:
.a40a	4c a9 9f	jmp $9fa9			jmp 	RangeError
.a40d					GCLoadAXY:
.a40d	ad 30 06	lda $0630			lda 	gxXPos+1
.a410	ae 2f 06	ldx $062f			ldx 	gxXPos
.a413	ac 31 06	ldy $0631			ldy 	gxYPos
.a416	60		rts				rts
.a417					GCCopyPairToStore:
.a417	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a41a	8d 2f 06	sta $062f			sta 	gxXPos
.a41d	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a420	8d 30 06	sta $0630			sta 	gxXPos+1
.a423	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a426	8d 31 06	sta $0631			sta 	gxYPos
.a429	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcontrol.asm

.a42a					BitmapCtrl:
.a42a	b1 30		lda ($30),y			lda 	(codePtr),y
.a42c	c8		iny				iny
.a42d	a2 01		ldx #$01			ldx 	#1
.a42f	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a431	f0 11		beq $a444			beq 	BitmapSwitch
.a433	ca		dex				dex
.a434	c9 be		cmp #$be			cmp 	#KWD_OFF
.a436	f0 0c		beq $a444			beq 	BitmapSwitch
.a438	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get the colour
.a43b	5a		phy				phy
.a43c	aa		tax				tax
.a43d	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a43f	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a442	7a		ply				ply
.a443	60		rts				rts
.a444					BitmapSwitch:
.a444	5a		phy				phy
.a445	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a447	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a449	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a44c	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a44e	a0 00		ldy #$00			ldy 	#0
.a450	a2 ff		ldx #$ff			ldx 	#$FF
.a452	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a455	9c 2e 06	stz $062e			stz 	gxFillSolid
.a458	9c 2f 06	stz $062f			stz 	gxXPos
.a45b	9c 30 06	stz $0630			stz 	gxXPos+1
.a45e	9c 31 06	stz $0631			stz 	gxYPos
.a461	9c 34 06	stz $0634			stz 	gxDrawScale
.a464	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a466	a2 00		ldx #$00			ldx 	#0
.a468	a0 00		ldy #$00			ldy 	#0
.a46a	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a46d	7a		ply				ply
.a46e	60		rts				rts
.a46f					SpritesCtrl:
.a46f	b1 30		lda ($30),y			lda 	(codePtr),y
.a471	c8		iny				iny
.a472	a2 01		ldx #$01			ldx 	#1
.a474	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a476	f0 08		beq $a480			beq 	SpriteSwitch
.a478	ca		dex				dex
.a479	c9 be		cmp #$be			cmp 	#KWD_OFF
.a47b	f0 03		beq $a480			beq 	SpriteSwitch
.a47d	4c a4 9f	jmp $9fa4			jmp 	SyntaxError
.a480					SpriteSwitch:
.a480	5a		phy				phy
.a481	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a483	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a485	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a488	7a		ply				ply
.a489	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gfx.asm

.a48a					GfxCommand:
.a48a	a2 00		ldx #$00			ldx 	#0
.a48c	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; command
.a48f	20 46 8d	jsr $8d46			jsr 	CheckComma
.a492	e8		inx				inx
.a493	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; X
.a496	20 46 8d	jsr $8d46			jsr 	CheckComma
.a499	e8		inx				inx
.a49a	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; Y
.a49d	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a4a0	4a		lsr a				lsr 	a
.a4a1	d0 16		bne $a4b9			bne 	_GfxError
.a4a3	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a4a6	b0 11		bcs $a4b9			bcs 	_GfxError 					; bit 7 should have been zero
.a4a8	5a		phy				phy 								; save pos
.a4a9	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a4ac	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a4af	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a4b2	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw
.a4b5	b0 02		bcs $a4b9			bcs 	_GfxError
.a4b7	7a		ply				ply 								; restore pos and exit.
.a4b8	60		rts				rts
.a4b9					_GfxError:
.a4b9	4c a9 9f	jmp $9fa9			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/hit.asm

.a4bc					UnaryHit:
.a4bc	fa		plx				plx
.a4bd	a9 36		lda #$36			lda 	#zTemp0
.a4bf	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4c2	20 46 8d	jsr $8d46			jsr 	CheckComma
.a4c5	e8		inx				inx
.a4c6	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4c9	20 3e 8d	jsr $8d3e			jsr		CheckRightBracket
.a4cc	ca		dex				dex 								; fix back up again.
.a4cd	da		phx				phx 								; save X/Y
.a4ce	5a		phy				phy
.a4cf	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4d2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4d5	aa		tax				tax
.a4d6	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4d8	20 34 aa	jsr $aa34			jsr 	GXGraphicDraw 				; calculate result
.a4db	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4dc	7a		ply				ply 								; restore XY
.a4dd	fa		plx				plx
.a4de	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte 					; return the hit result
.a4e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/palette.asm

.a4e2					PaletteCommand:
.a4e2	a2 00		ldx #$00			ldx 	#0
.a4e4	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; colour
.a4e7	20 46 8d	jsr $8d46			jsr 	CheckComma
.a4ea	e8		inx				inx
.a4eb	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger 		; r
.a4ee	20 46 8d	jsr $8d46			jsr 	CheckComma
.a4f1	e8		inx				inx
.a4f2	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; g
.a4f5	20 46 8d	jsr $8d46			jsr 	CheckComma
.a4f8	e8		inx				inx
.a4f9	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; b
.a4fc	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a4ff	85 36		sta $36				sta 	zTemp0
.a501	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a503	85 37		sta $37				sta 	zTemp0+1
.a505	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a507	26 37		rol $37				rol	 	zTemp0+1
.a509	06 36		asl $36				asl 	zTemp0
.a50b	26 37		rol $37				rol	 	zTemp0+1
.a50d	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a50f	85 01		sta $01				sta 	1
.a511	5a		phy				phy
.a512	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a515	92 36		sta ($36)			sta 	(zTemp0)
.a517	a0 01		ldy #$01			ldy 	#1
.a519	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a51c	91 36		sta ($36),y			sta 	(zTemp0),y
.a51e	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a521	c8		iny				iny
.a522	91 36		sta ($36),y			sta 	(zTemp0),y
.a524	7a		ply				ply
.a525	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/event.asm

.a526					UnaryEvent:
.a526	fa		plx				plx
.a527	20 ce a5	jsr $a5ce			jsr 	TimerToStackX 				; timer in +0
.a52a	e8		inx				inx  								; put reference into +1
.a52b	20 e0 97	jsr $97e0			jsr 	EvaluateTerm
.a52e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a531	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a533	d0 57		bne $a58c			bne 	_UEType
.a535	e8		inx				inx 								; put the step in +2
.a536	20 46 8d	jsr $8d46			jsr 	CheckComma
.a539	20 7b 9d	jsr $9d7b			jsr 	Evaluate16BitInteger
.a53c	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.a53f	ca		dex				dex
.a540	ca		dex				dex
.a541	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a544	85 36		sta $36				sta 	zTemp0
.a546	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a549	85 37		sta $37				sta 	zTemp0+1
.a54b	5a		phy				phy
.a54c	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a54e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a550	30 36		bmi $a588			bmi 	_UEFalse 					; exit if signed.
.a552	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a554	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a557	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a559	c8		iny				iny
.a55a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a55d	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a55f	c8		iny				iny
.a560	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a563	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a565	90 21		bcc $a588			bcc 	_UEFalse 					; no, return FALSE.
.a567	18		clc				clc
.a568	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a56a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a56d	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a570	91 36		sta ($36),y			sta 	(zTemp0),y
.a572	c8		iny				iny
.a573	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a576	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a579	91 36		sta ($36),y			sta 	(zTemp0),y
.a57b	c8		iny				iny
.a57c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a57f	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a582	91 36		sta ($36),y			sta 	(zTemp0),y
.a584	7a		ply				ply
.a585	4c c4 8d	jmp $8dc4			jmp 	ReturnTrue
.a588					_UEFalse:
.a588	7a		ply				ply 								; restore Y
.a589	4c d0 8d	jmp $8dd0			jmp 	ReturnFalse 				; and return False
.a58c					_UEType:
.a58c	4c ae 9f	jmp $9fae			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/joy.asm

.a58f					UnaryJoyX:
.a58f	18		clc				clc
.a590	80 01		bra $a593			bra 	JoyMain
.a592					UnaryJoyY:
.a592	38		sec				sec
.a593					JoyMain:
.a593	fa		plx				plx 								; get pos
.a594	08		php				php 								; save carry (set for Y)
.a595	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a598	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.a59b	20 ed a9	jsr $a9ed			jsr 	EXTReadController 			; read the controller.
.a59e	28		plp				plp
.a59f	90 02		bcc $a5a3			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a5a1	4a		lsr a				lsr 	a
.a5a2	4a		lsr a				lsr 	a
.a5a3					_JMNoShift:
.a5a3	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a5a4	b0 0a		bcs $a5b0			bcs 	_JMIsRight
.a5a6	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a5a7	b0 04		bcs $a5ad			bcs 	_JMIsLeft
.a5a9	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero 					; zero result
.a5ac	60		rts				rts
.a5ad					_JMIsLeft:
.a5ad	4c c4 8d	jmp $8dc4			jmp 	ReturnTrue
.a5b0					_JMIsRight:
.a5b0	a9 01		lda #$01			lda 	#1
.a5b2	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.a5b5	60		rts				rts
.a5b6					UnaryJoyB:
.a5b6	fa		plx				plx 								; get pos
.a5b7	20 9b 9d	jsr $9d9b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5ba	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.a5bd	20 ed a9	jsr $a9ed			jsr 	EXTReadController 			; read the controller.
.a5c0	4a		lsr a				lsr 	a
.a5c1	4a		lsr a				lsr 	a
.a5c2	4a		lsr a				lsr 	a
.a5c3	4a		lsr a				lsr 	a
.a5c4	29 01		and #$01			and 	#1
.a5c6	20 1c 9e	jsr $9e1c			jsr 	NSMSetByte
.a5c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/timer.asm

.a5ca					UnaryTimer:
.a5ca	fa		plx				plx
.a5cb	20 3e 8d	jsr $8d3e			jsr 	CheckRightBracket
.a5ce					TimerToStackX:
.a5ce	20 1a 9e	jsr $9e1a			jsr 	NSMSetZero 					; zero result
.a5d1	64 01		stz $01				stz 	1 							; access I/O
.a5d3	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5d6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5d9	ad 5a d6	lda $d65a			lda 	$D65A
.a5dc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5df	ad 5b d6	lda $d65b			lda 	$D65B
.a5e2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5e6					StackPushByte:
.a5e6	48		pha				pha 								; save byte
.a5e7	a5 34		lda $34				lda 	BasicStack
.a5e9	d0 09		bne $a5f4			bne 	_SPBNoBorrow
.a5eb	c6 35		dec $35				dec 	BasicStack+1
.a5ed	48		pha				pha
.a5ee	a5 35		lda $35				lda 	BasicStack+1
.a5f0	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5f2	90 06		bcc $a5fa			bcc 	_SPBMemory
.a5f4					_SPBNoBorrow:
.a5f4	c6 34		dec $34				dec 	BasicStack
.a5f6	68		pla				pla 								; get back and write
.a5f7	92 34		sta ($34)			sta 	(BasicStack)
.a5f9	60		rts				rts
.a5fa					_SPBMemory:
.a5fa	a9 12		lda #$12		lda	#18
.a5fc	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.a5ff					StackPopByte:
.a5ff	b2 34		lda ($34)			lda 	(BasicStack)
.a601	e6 34		inc $34				inc 	BasicStack
.a603	d0 02		bne $a607			bne 	_SPBNoCarry
.a605	e6 35		inc $35				inc 	BasicStack+1
.a607					_SPBNoCarry:
.a607	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a608					StackOpen:
.a608	48		pha				pha 								; save frame byte
.a609	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a60b	0a		asl a				asl 	a 							; claim twice this for storage
.a60c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a60e	38		sec				sec 								; so basically subtracting from
.a60f	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a611	85 34		sta $34				sta 	basicStack
.a613	b0 08		bcs $a61d			bcs 	_SONoBorrow
.a615	c6 35		dec $35				dec 	basicStack+1
.a617	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a619	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a61b	90 04		bcc $a621			bcc 	_SOMemory
.a61d					_SONoBorrow:
.a61d	68		pla				pla 								; get marker back and write at TOS
.a61e	92 34		sta ($34)			sta 	(basicStack)
.a620	60		rts				rts
.a621					_SOMemory:
.a621	a9 12		lda #$12		lda	#18
.a623	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.a626					StackClose:
.a626	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a628	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a62a	0a		asl a				asl 	a 							; claim twice this.
.a62b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a62d	85 34		sta $34				sta 	basicStack
.a62f	90 02		bcc $a633			bcc 	_SCExit
.a631	e6 35		inc $35				inc 	basicStack+1
.a633					_SCExit:
.a633	60		rts				rts
.a634					StackCheckFrame:
.a634	48		pha				pha
.a635					_StackRemoveLocals:
.a635	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a637	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a639	b0 05		bcs $a640			bcs 	_SCNoLocal
.a63b	20 08 88	jsr $8808			jsr 	LocalPopValue
.a63e	80 f5		bra $a635			bra 	_StackRemoveLocals
.a640					_SCNoLocal:
.a640	68		pla				pla
.a641	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a643	29 f0		and #$f0			and 	#$F0 						; check type bits
.a645	d0 01		bne $a648			bne 	_SCFError 					; different, we have structures mixed up
.a647	60		rts				rts
.a648					_SCFError:
.a648	8a		txa				txa 								; report error X
.a649	4c 57 8d	jmp $8d57			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a64c					STKSaveCodePosition:
.a64c	5a		phy				phy
.a64d	98		tya				tya 								; save Y
.a64e	a0 05		ldy #$05			ldy 	#5
.a650	91 34		sta ($34),y			sta 	(basicStack),y
.a652	88		dey				dey 								; save Code Pointer
.a653					_STKSaveLoop:
.a653	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a656	91 34		sta ($34),y			sta 	(basicStack),y
.a658	88		dey				dey
.a659	d0 f8		bne $a653			bne 	_STKSaveLoop
.a65b	7a		ply				ply
.a65c	60		rts				rts
.a65d					STKLoadCodePosition:
.a65d	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a65f					_STKLoadLoop:
.a65f	b1 34		lda ($34),y			lda 	(basicStack),y
.a661	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a664	c8		iny				iny
.a665	c0 05		cpy #$05			cpy 	#5
.a667	d0 f6		bne $a65f			bne 	_STKLoadLoop
.a669	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a66b	a8		tay				tay
.a66c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a66d					StackReset:
.a66d	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a66f	85 34		sta $34				sta 	0+basicStack
.a671	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a673	85 35		sta $35				sta 	1+basicStack
.a675	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a677	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a679	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a67a					StringConcrete:
.a67a	5a		phy				phy 								; save position on stack
.a67b	20 e3 99	jsr $99e3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a67e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a681	85 38		sta $38				sta 	zTemp1
.a683	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a686	85 39		sta $39				sta 	zTemp1+1
.a688	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a68a					_SALength:
.a68a	c8		iny				iny
.a68b	b1 38		lda ($38),y			lda 	(zTemp1),y
.a68d	d0 fb		bne $a68a			bne 	_SALength
.a68f	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a691	b0 3f		bcs $a6d2			bcs 	_SALengthError
.a693	98		tya				tya 				 				; length of the new string
.a694	18		clc				clc
.a695	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a697	90 02		bcc $a69b			bcc 	_SAHaveLength
.a699	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a69b					_SAHaveLength:
.a69b	48		pha				pha 								; save length.
.a69c	38		sec				sec
.a69d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a69f	6d 8e 04	adc $048e			adc 	StringMemory
.a6a2	8d 8e 04	sta $048e			sta 	StringMemory
.a6a5	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a6a7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a6aa	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a6ac	6d 8f 04	adc $048f			adc 	StringMemory+1
.a6af	8d 8f 04	sta $048f			sta 	StringMemory+1
.a6b2	85 3b		sta $3b				sta 	zTemp2+1
.a6b4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6b7	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a6b8	38		sec				sec
.a6b9	e9 03		sbc #$03			sbc 	#3
.a6bb	92 3a		sta ($3a)			sta 	(zTemp2)
.a6bd	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a6bf	a0 01		ldy #$01			ldy 	#1
.a6c1	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6c3					_SACopyNewString:
.a6c3	a0 00		ldy #$00			ldy 	#0
.a6c5					_SACopyNSLoop:
.a6c5	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a6c7	c8		iny				iny 								; write two on in string storage
.a6c8	c8		iny				iny
.a6c9	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6cb	88		dey				dey 								; this makes it one one.
.a6cc	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a6ce	d0 f5		bne $a6c5			bne 	_SACopyNSLoop
.a6d0	7a		ply				ply
.a6d1	60		rts				rts
.a6d2					_SALengthError:
.a6d2	a9 09		lda #$09		lda	#9
.a6d4	4c 57 8d	jmp $8d57		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a6d7					StringSystemInitialise:
.a6d7	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a6d9	8d 8e 04	sta $048e			sta 	0+StringMemory
.a6dc	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a6de	8d 8f 04	sta $048f			sta 	1+StringMemory
.a6e1	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a6e4	60		rts				rts
.a6e5					StringSpaceInitialise:
.a6e5	20 e3 99	jsr $99e3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6e8	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a6ea	8d 90 04	sta $0490			sta 	StringInitialised
.a6ed	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a6f0	8d 91 04	sta $0491			sta 	StringTempPointer
.a6f3	ad 8f 04	lda $048f			lda 	StringMemory+1
.a6f6	3a		dec a				dec 	a
.a6f7	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a6fa	60		rts				rts
.a6fb					StringTempAllocate:
.a6fb	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a6fd	b0 35		bcs $a734			bcs 	_STALength
.a6ff	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a702	30 05		bmi $a709			bmi 	_STAAllocate
.a704	48		pha				pha 								; save value to subtract.
.a705	20 e5 a6	jsr $a6e5			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a708	68		pla				pla 								; restore it
.a709					_STAAllocate:
.a709	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a70b	18		clc				clc  								; deliberate allows one more
.a70c	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a70f	8d 91 04	sta $0491			sta 	StringTempPointer
.a712	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a715	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a717	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a71a	69 ff		adc #$ff			adc 	#$FF
.a71c	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a71f	85 3d		sta $3d				sta 	zsTemp+1
.a721	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a724	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a727	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a72a	a9 10		lda #$10			lda 	#NSTString
.a72c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a72f	a9 00		lda #$00			lda 	#0 							; clear the target string
.a731	92 3c		sta ($3c)			sta 	(zsTemp)
.a733	60		rts				rts
.a734					_STALength:
.a734	a9 09		lda #$09		lda	#9
.a736	4c 57 8d	jmp $8d57		jmp	ErrorHandler
.a739					StringTempWrite:
.a739	48		pha				pha
.a73a	92 3c		sta ($3c)			sta 	(zsTemp)
.a73c	e6 3c		inc $3c				inc 	zsTemp
.a73e	d0 02		bne $a742			bne 	_STWNoCarry
.a740	e6 3d		inc $3d				inc 	zsTemp+1
.a742					_STWNoCarry:
.a742	a9 00		lda #$00			lda 	#0
.a744	92 3c		sta ($3c)			sta 	(zsTemp)
.a746	68		pla				pla
.a747	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=10					CLIIdentifier = CONYellowGreen
=7					CLIPunctuation = CONYellow
=1					CLIData = CONWhite
.a748					EXTPrintCharacter:
.a748	48		pha				pha
.a749	da		phx				phx
.a74a	5a		phy				phy
.a74b	a6 01		ldx $01				ldx 	1
.a74d	da		phx				phx
.a74e	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a751	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a753	30 48		bmi $a79d			bmi 	_EXPCColour
.a755	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a757	90 4d		bcc $a7a6			bcc 	_EXPCControl
.a759	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a75b	86 01		stx $01				stx 	1
.a75d	91 40		sta ($40),y			sta 	(EXTAddress),y
.a75f	e6 01		inc $01				inc 	1 							; select colour memory
.a761	ad 37 06	lda $0637			lda 	EXTTextColour
.a764	91 40		sta ($40),y			sta 	(EXTAddress),y
.a766	c8		iny				iny 								; advance horizontal position
.a767	8c 36 06	sty $0636			sty 	EXTColumn
.a76a	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a76d	90 66		bcc $a7d5			bcc 	_EXPCExit 					; no, then exit.
.a76f					_EXPCCRLF:
.a76f	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a772	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a775	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a778	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a77b	f0 18		beq $a795			beq 	_EXPCScroll
.a77d	18		clc				clc 								; add width to address.
.a77e	a5 40		lda $40				lda 	EXTAddress
.a780	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a783	85 40		sta $40				sta 	EXTAddress
.a785	90 4e		bcc $a7d5			bcc 	_EXPCExit
.a787	e6 41		inc $41				inc 	EXTAddress+1
.a789	80 4a		bra $a7d5			bra 	_EXPCExit
.a78b					_EXPCLeft:
.a78b	ce 36 06	dec $0636			dec 	EXTColumn
.a78e	10 45		bpl $a7d5			bpl 	_EXPCExit
.a790					_EXPCBegin:
.a790	9c 36 06	stz $0636			stz 	EXTColumn
.a793	80 40		bra $a7d5			bra 	_EXPCExit
.a795					_EXPCScroll:
.a795	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a798	20 62 a8	jsr $a862			jsr 	EXTScreenScroll 			; scroll the screen
.a79b	80 38		bra $a7d5			bra 	_EXPCExit
.a79d					_EXPCColour:
.a79d	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a79f	b0 34		bcs $a7d5			bcs 	_EXPCExit
.a7a1	20 42 a8	jsr $a842			jsr 	_EXPCHandleColour
.a7a4	80 2f		bra $a7d5			bra 	_EXPCExit
.a7a6					_EXPCControl:
.a7a6	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a7a8	b0 2b		bcs $a7d5			bcs 	_EXPCExit
.a7aa	0a		asl a				asl 	a 							; double into X
.a7ab	aa		tax				tax
.a7ac	7c 20 a8	jmp ($a820,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a7af					_EXPCUp:
.a7af	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a7b2	f0 21		beq $a7d5			beq 	_EXPCExit
.a7b4	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a7b7	38		sec				sec
.a7b8	a5 40		lda $40				lda 	EXTAddress
.a7ba	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a7bd	85 40		sta $40				sta 	EXTAddress
.a7bf	b0 14		bcs $a7d5			bcs 	_EXPCExit
.a7c1	c6 41		dec $41				dec 	EXTAddress+1
.a7c3	80 10		bra $a7d5			bra 	_EXPCExit
.a7c5					_EXPCRight:
.a7c5	c8		iny				iny
.a7c6	8c 36 06	sty $0636			sty 	EXTColumn
.a7c9	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7cc	d0 07		bne $a7d5			bne 	_EXPCExit
.a7ce					_EXPCEnd:
.a7ce	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7d1	3a		dec a				dec 	a
.a7d2	8d 36 06	sta $0636			sta 	EXTColumn
.a7d5					_EXPCExit:
.a7d5	20 b7 a8	jsr $a8b7			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7d8	68		pla				pla
.a7d9	85 01		sta $01				sta 	1
.a7db	7a		ply				ply
.a7dc	fa		plx				plx
.a7dd	68		pla				pla
.a7de	60		rts				rts
.a7df					_EXPCClearScreen:
.a7df	20 74 a8	jsr $a874			jsr		EXTClearScreenCode
.a7e2	80 f1		bra $a7d5			bra 	_EXPCExit
.a7e4					_EXPCDown:
.a7e4	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7e7	3a		dec a				dec 	a
.a7e8	cd 35 06	cmp $0635			cmp 	EXTRow
.a7eb	f0 e8		beq $a7d5			beq 	_EXPCExit
.a7ed	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7f0	18		clc				clc
.a7f1	a5 40		lda $40				lda 	EXTAddress
.a7f3	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7f6	85 40		sta $40				sta 	EXTAddress
.a7f8	90 db		bcc $a7d5			bcc 	_EXPCExit
.a7fa	e6 41		inc $41				inc 	EXTAddress+1
.a7fc	80 d7		bra $a7d5			bra 	_EXPCExit
.a7fe					_EXPCTab:
.a7fe	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a801	29 f8		and #$f8			and 	#$F8
.a803	18		clc				clc
.a804	69 08		adc #$08			adc 	#8
.a806	8d 36 06	sta $0636			sta 	EXTColumn
.a809	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a80c	90 c7		bcc $a7d5			bcc 	_EXPCExit
.a80e	80 be		bra $a7ce			bra 	_EXPCEnd
.a810					_EXPCBackSpace:
.a810	88		dey				dey
.a811	30 c2		bmi $a7d5			bmi 	_EXPCExit
.a813	ce 36 06	dec $0636			dec 	EXTColumn
.a816	a9 02		lda #$02			lda 	#2
.a818	85 01		sta $01				sta 	1
.a81a	a9 20		lda #$20			lda 	#32
.a81c	91 40		sta ($40),y			sta 	(EXTAddress),y
.a81e	80 b5		bra $a7d5			bra 	_EXPCExit
.a820					_EXPCActionTable:
>a820	d5 a7						.word 	_EXPCExit 					; 00
>a822	90 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a824	8b a7						.word 	_EXPCLeft 					; 02 B Left
>a826	d5 a7						.word 	_EXPCExit 					; 03 <Break>
>a828	d5 a7						.word 	_EXPCExit 					; 04
>a82a	ce a7						.word 	_EXPCEnd 					; 05 E End of Line
>a82c	c5 a7						.word 	_EXPCRight 					; 06 F Right
>a82e	d5 a7						.word 	_EXPCExit 					; 07
>a830	10 a8						.word 	_EXPCBackspace 				; 08 H Backspace
>a832	fe a7						.word 	_EXPCTab 					; 09 I Tab
>a834	d5 a7						.word 	_EXPCExit 					; 0A
>a836	d5 a7						.word 	_EXPCExit 					; 0B
>a838	df a7						.word 	_EXPCClearScreen			; 0C L CLS
>a83a	6f a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a83c	e4 a7						.word 	_EXPCDown 					; 0E N Down
>a83e	d5 a7						.word 	_EXPCExit 					; 0F
>a840	af a7						.word 	_EXPCUp 					; 10 P Up
.a842					_EXPCHandleColour
.a842	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a844	b0 16		bcs $a85c			bcs 	_EXPCBackground
.a846	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a847	0a		asl a				asl 	a
.a848	0a		asl a				asl 	a
.a849	0a		asl a				asl 	a
.a84a	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a84c					_EXPCUpdate:
.a84c	48		pha				pha 								; save new colour
.a84d	8a		txa				txa 								; get mask
.a84e	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a851	8d 37 06	sta $0637			sta 	EXTTextColour
.a854	68		pla				pla 								; or in new colour
.a855	0d 37 06	ora $0637			ora 	EXTTextColour
.a858	8d 37 06	sta $0637			sta 	EXTTextColour
.a85b	60		rts				rts
.a85c					_EXPCBackground:
.a85c	29 0f		and #$0f			and 	#$0F 						; get the colour
.a85e	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a860	80 ea		bra $a84c			bra 	_EXPCUpdate
.a862					EXTScreenScroll:
.a862	a9 02		lda #$02			lda 	#2 							; select text page
.a864	85 01		sta $01				sta 	1
.a866	a9 20		lda #$20			lda		#32 						; fill with space
.a868	20 77 a9	jsr $a977			jsr 	EXTScrollFill
.a86b	e6 01		inc $01				inc 	1 							; select colour page
.a86d	ad 37 06	lda $0637			lda 	EXTTextColour
.a870	20 77 a9	jsr $a977			jsr 	EXTScrollFill
.a873	60		rts				rts
.a874					EXTClearScreenCode:
.a874	a9 02		lda #$02			lda 	#2 							; select text page
.a876	85 01		sta $01				sta 	1
.a878	a9 20		lda #$20			lda		#32 						; fill with space
.a87a	20 87 a8	jsr $a887			jsr 	_EXTCSFill
.a87d	e6 01		inc $01				inc 	1 							; select colour page
.a87f	ad 37 06	lda $0637			lda 	EXTTextColour
.a882	20 87 a8	jsr $a887			jsr 	_EXTCSFill
.a885	80 22		bra $a8a9			bra 	EXTHomeCursor
.a887					_EXTCSFill:
.a887	aa		tax				tax
.a888	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a88a	85 40		sta $40				sta 	EXTAddress
.a88c	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a88e	85 41		sta $41				sta 	EXTAddress+1
.a890					_EXTCSFill1:
.a890	a0 00		ldy #$00			ldy 	#0
.a892	8a		txa				txa
.a893					_EXTCSFill2:
.a893	91 40		sta ($40),y			sta 	(EXTAddress),y
.a895	c8		iny				iny
.a896	d0 fb		bne $a893			bne 	_EXTCSFill2
.a898	e6 41		inc $41				inc 	EXTAddress+1
.a89a	a5 41		lda $41				lda 	EXTAddress+1
.a89c	c9 d2		cmp #$d2			cmp 	#$D2
.a89e	d0 f0		bne $a890			bne 	_EXTCSFill1
.a8a0	8a		txa				txa
.a8a1					_EXTCSFill3:
.a8a1	91 40		sta ($40),y			sta 	(EXTAddress),y
.a8a3	c8		iny				iny
.a8a4	c0 c0		cpy #$c0			cpy 	#$C0
.a8a6	d0 f9		bne $a8a1			bne 	_EXTCSFill3
.a8a8	60		rts				rts
.a8a9					EXTHomeCursor:
.a8a9	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a8ac	9c 36 06	stz $0636			stz 	EXTColumn
.a8af	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a8b1	85 40		sta $40				sta 	EXTAddress
.a8b3	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a8b5	85 41		sta $41				sta 	EXTAddress+1
.a8b7					EXTSetHardwareCursor:
.a8b7	64 01		stz $01				stz 	1 							; I/O Page zero
.a8b9	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a8bb	8d 10 d0	sta $d010			sta 	$D010
.a8be	a9 b1		lda #$b1			lda 	#$B1
.a8c0	8d 12 d0	sta $d012			sta 	$D012
.a8c3	ad 36 06	lda $0636			lda 	EXTColumn
.a8c6	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8c9	9c 15 d0	stz $d015			stz 	$D015
.a8cc	ad 35 06	lda $0635			lda 	EXTRow
.a8cf	8d 16 d0	sta $d016			sta 	$D016
.a8d2	9c 17 d0	stz $d017			stz 	$D017
.a8d5	60		rts				rts
.a8d6					EXTInputLine:
.a8d6	48		pha				pha
.a8d7	da		phx				phx
.a8d8	5a		phy				phy
.a8d9	a5 01		lda $01				lda 	1 							; save I/O page
.a8db	48		pha				pha
.a8dc					_EILLoop:
.a8dc	20 de a9	jsr $a9de			jsr 	ExtInputSingleCharacter
.a8df	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a8e1	f0 40		beq $a923			beq 	_EILExit
.a8e3	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a8e5	f0 1c		beq $a903			beq 	_EILBackspace
.a8e7	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a8e9	90 12		bcc $a8fd			bcc 	_EILPrintLoop
.a8eb	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a8ed	b0 0e		bcs $a8fd			bcs 	_EILPrintLoop
.a8ef	48		pha				pha 								; save character
.a8f0	a9 02		lda #$02			lda 	#2  						; insert a space
.a8f2	85 01		sta $01				sta 	1
.a8f4	20 65 a9	jsr $a965			jsr 	EXTILInsert 				; insert in text screen
.a8f7	e6 01		inc $01				inc 	1
.a8f9	20 65 a9	jsr $a965			jsr 	EXTILInsert 				; insert in colour screen
.a8fc	68		pla				pla 								; get character back.
.a8fd					_EILPrintLoop:
.a8fd	20 48 a7	jsr $a748			jsr 	ExtPrintCharacter
.a900	80 da		bra $a8dc			bra 	_EILLoop
.a902	60		rts				rts
.a903					_EILBackspace:
.a903	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a906	f0 d4		beq $a8dc			beq 	_EILLoop
.a908	a9 02		lda #$02			lda 	#2 							; move cursor left
.a90a	20 48 a7	jsr $a748			jsr 	EXTPrintCharacter
.a90d	a9 02		lda #$02			lda 	#2 							; text block
.a90f	85 01		sta $01				sta 	1
.a911	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a913	20 50 a9	jsr $a950			jsr 	EXTILDelete
.a916	e6 01		inc $01				inc 	1 							; colour block
.a918	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a91b	88		dey				dey
.a91c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a91e	20 50 a9	jsr $a950			jsr 	EXTILDelete 				; backspace attribute
.a921	80 b9		bra $a8dc			bra 	_EILLoop 					; and go round.
.a923					_EILExit:
.a923	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a925	85 01		sta $01				sta 	1
.a927	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a929					_EILScrapeLine:
.a929	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a92b	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a92e	c8		iny				iny
.a92f	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a932	d0 f5		bne $a929			bne 	_EILScrapeLine
.a934					_EILTrimSpaces:
.a934	88		dey				dey
.a935	f0 08		beq $a93f			beq 	_EILEndTrim
.a937	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a93a	c9 20		cmp #$20			cmp 	#' '
.a93c	f0 f6		beq $a934			beq 	_EILTrimSpaces
.a93e	c8		iny				iny 								; trim after non space character.
.a93f					_EILEndTrim:
.a93f	a9 00		lda #$00			lda 	#0 							; trim here.
.a941	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a944	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a946	20 48 a7	jsr $a748			jsr 	ExtPrintCharacter
.a949	68		pla				pla 								; reset I/O page
.a94a	85 01		sta $01				sta 	1
.a94c	7a		ply				ply
.a94d	fa		plx				plx
.a94e	68		pla				pla
.a94f	60		rts				rts
.a950					EXTILDelete:
.a950	48		pha				pha 								; save the new character
.a951	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a954					_EXTDLoop:
.a954	c8		iny				iny 								; copy one byte down.
.a955	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a957	88		dey				dey
.a958	91 40		sta ($40),y			sta 	(EXTAddress),y
.a95a	c8		iny				iny 								; do till end of line.
.a95b	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a95e	90 f4		bcc $a954			bcc 	_EXTDLoop
.a960	88		dey				dey 	 							; write in last slot.
.a961	68		pla				pla
.a962	91 40		sta ($40),y			sta 	(EXTAddress),y
.a964	60		rts				rts
.a965					EXTILInsert:
.a965	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a968					_EXTILoop:
.a968	88		dey				dey 								; back one
.a969	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a96c	f0 08		beq $a976			beq 	_EXTIExit
.a96e	88		dey				dey 								; copy one byte up.
.a96f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a971	c8		iny				iny
.a972	91 40		sta ($40),y			sta 	(EXTAddress),y
.a974	80 f2		bra $a968			bra 	_EXTILoop
.a976					_EXTIExit:
.a976	60		rts				rts
.a977					EXTScrollFill:
.a977	aa		tax				tax									; save value to fill with
.a978	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a97a	48		pha				pha
.a97b	a5 37		lda $37				lda 	zTemp0+1
.a97d	48		pha				pha
.a97e	a5 38		lda $38				lda 	zTemp1
.a980	48		pha				pha
.a981	a5 39		lda $39				lda 	zTemp1+1
.a983	48		pha				pha
.a984	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a986	85 37		sta $37				sta 	zTemp0+1
.a988	85 39		sta $39				sta 	zTemp1+1
.a98a	64 36		stz $36				stz 	zTemp0
.a98c	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a98f	85 38		sta $38				sta 	zTemp1
.a991	a0 00		ldy #$00			ldy 	#0
.a993					_EXSFCopy1:
.a993	b1 38		lda ($38),y			lda 	(zTemp1),y
.a995	91 36		sta ($36),y			sta 	(zTemp0),y
.a997	c8		iny				iny
.a998	d0 f9		bne $a993			bne 	_EXSFCopy1
.a99a	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a99c	e6 39		inc $39				inc 	zTemp1+1
.a99e	a5 39		lda $39				lda 	zTemp1+1
.a9a0	c9 d3		cmp #$d3			cmp 	#$D3
.a9a2	d0 ef		bne $a993			bne 	_EXSFCopy1
.a9a4	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.a9a7	8a		txa				txa
.a9a8					_EXSFFill1:
.a9a8	88		dey				dey
.a9a9	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9ab	c0 00		cpy #$00			cpy 	#0
.a9ad	10 f9		bpl $a9a8			bpl 	_EXSFFill1
.a9af	68		pla				pla
.a9b0	85 39		sta $39				sta 	zTemp1+1
.a9b2	68		pla				pla
.a9b3	85 38		sta $38				sta 	zTemp1
.a9b5	68		pla				pla
.a9b6	85 37		sta $37				sta 	zTemp0+1
.a9b8	68		pla				pla
.a9b9	85 36		sta $36				sta 	zTemp0
.a9bb	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a9bc					EXTInitialise:
.a9bc	64 01		stz $01				stz 	1 							; Access I/O
.a9be	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a9c1	9c 08 d0	stz $d008			stz 	$D008
.a9c4	9c 09 d0	stz $d009			stz 	$D009
.a9c7	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a9c9	8d 58 d6	sta $d658			sta 	$D658
.a9cc	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a9ce	8d 37 06	sta $0637			sta 	EXTTextColour
.a9d1	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a9d3	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a9d6	a9 3c		lda #$3c			lda 	#60
.a9d8	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a9db	64 01		stz $01				stz 	1
.a9dd	60		rts				rts
.a9de					EXTInputSingleCharacter:
.a9de	da		phx				phx
.a9df	5a		phy				phy
.a9e0					_EISCWait:
.a9e0	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a9e3	c9 00		cmp #$00			cmp 	#0
.a9e5	f0 f9		beq $a9e0			beq 	_EISCWait
.a9e7	7a		ply				ply
.a9e8	fa		plx				plx
.a9e9	60		rts				rts
.a9ea					EXTBreakCheck:
.a9ea	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a9ed					EXTReadController:
.a9ed	da		phx				phx
.a9ee	a2 00		ldx #$00			ldx 	#0
.a9f0	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a9f2	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9f5	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a9f7	f0 04		beq $a9fd			beq 	_NoSet1
.a9f9	8a		txa				txa
.a9fa	09 01		ora #$01			ora 	#1
.a9fc	aa		tax				tax
.a9fd					_NoSet1:
.a9fd	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a9ff	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa02	29 10		and #$10			and 	#($01 << (($2C) & 7))
.aa04	f0 04		beq $aa0a			beq 	_NoSet1
.aa06	8a		txa				txa
.aa07	09 02		ora #$02			ora 	#2
.aa09	aa		tax				tax
.aa0a					_NoSet1:
.aa0a	a9 06		lda #$06			lda 	#(($32) >> 3)
.aa0c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa0f	29 04		and #$04			and 	#($01 << (($32) & 7))
.aa11	f0 04		beq $aa17			beq 	_NoSet1
.aa13	8a		txa				txa
.aa14	09 04		ora #$04			ora 	#4
.aa16	aa		tax				tax
.aa17					_NoSet1:
.aa17	a9 04		lda #$04			lda 	#(($25) >> 3)
.aa19	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa1c	29 20		and #$20			and 	#($01 << (($25) & 7))
.aa1e	f0 04		beq $aa24			beq 	_NoSet1
.aa20	8a		txa				txa
.aa21	09 08		ora #$08			ora 	#8
.aa23	aa		tax				tax
.aa24					_NoSet1:
.aa24	a9 04		lda #$04			lda 	#(($26) >> 3)
.aa26	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa29	29 40		and #$40			and 	#($01 << (($26) & 7))
.aa2b	f0 04		beq $aa31			beq 	_NoSet1
.aa2d	8a		txa				txa
.aa2e	09 10		ora #$10			ora 	#16
.aa30	aa		tax				tax
.aa31					_NoSet1:
.aa31	8a		txa				txa
.aa32	fa		plx				plx
.aa33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7d1					GRVectorTable:
>b7d1	2f ac					.word	GXInitialise             ; $00 Initialise
>b7d3	49 ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7d5	91 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7d7	e1 ab					.word	GXClearBitmap            ; $03 Clear
>b7d9	20 ae					.word	GXSetColourMode          ; $04 Colour
>b7db	e8 af					.word	GXFontHandler            ; $05 DrawFont
>b7dd	30 b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7df	9c b0					.word	GXSelect                 ; $07 SpriteUse
>b7e1	c5 b0					.word	GXSelectImage            ; $08 SpriteImage
>b7e3	4c b2					.word	GXCollide                ; $09 SpriteCollide
>b7e5	93 aa					.word	GRUndefined              ; $0a
>b7e7	93 aa					.word	GRUndefined              ; $0b
>b7e9	93 aa					.word	GRUndefined              ; $0c
>b7eb	93 aa					.word	GRUndefined              ; $0d
>b7ed	93 aa					.word	GRUndefined              ; $0e
>b7ef	93 aa					.word	GRUndefined              ; $0f
>b7f1	93 aa					.word	GRUndefined              ; $10
>b7f3	93 aa					.word	GRUndefined              ; $11
>b7f5	93 aa					.word	GRUndefined              ; $12
>b7f7	93 aa					.word	GRUndefined              ; $13
>b7f9	93 aa					.word	GRUndefined              ; $14
>b7fb	93 aa					.word	GRUndefined              ; $15
>b7fd	93 aa					.word	GRUndefined              ; $16
>b7ff	93 aa					.word	GRUndefined              ; $17
>b801	93 aa					.word	GRUndefined              ; $18
>b803	93 aa					.word	GRUndefined              ; $19
>b805	93 aa					.word	GRUndefined              ; $1a
>b807	93 aa					.word	GRUndefined              ; $1b
>b809	93 aa					.word	GRUndefined              ; $1c
>b80b	93 aa					.word	GRUndefined              ; $1d
>b80d	93 aa					.word	GRUndefined              ; $1e
>b80f	93 aa					.word	GRUndefined              ; $1f
>b811	91 aa					.word	GXMove                   ; $20 Move
>b813	ee ac					.word	GXLine                   ; $21 Line
>b815	69 ae					.word	GXFrameRectangle         ; $22 FrameRect
>b817	66 ae					.word	GXFillRectangle          ; $23 FillRect
>b819	98 aa					.word	GXFrameCircle            ; $24 FrameCircle
>b81b	94 aa					.word	GXFillCircle             ; $25 FillCircle
>b81d	93 aa					.word	GRUndefined              ; $26
>b81f	93 aa					.word	GRUndefined              ; $27
>b821	4e ae					.word	GXPlotPoint              ; $28 Plot
>b823	5b b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa34					GXGraphicDraw:
.aa34	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa36	b0 06		bcs $aa3e			bcs 	_GDCoordinate
.aa38	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa3a	84 37		sty $37				sty 	gxzTemp0+1
.aa3c	80 4b		bra $aa89			bra 	_GDExecuteA 				; and execute
.aa3e					_GDCoordinate:
.aa3e	48		pha				pha 								; save AXY
.aa3f	da		phx				phx
.aa40	5a		phy				phy
.aa41	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa43					_GDCopy1:
.aa43	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa46	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa49	ca		dex				dex
.aa4a	10 f7		bpl $aa43			bpl 	_GDCopy1
.aa4c	68		pla				pla 								; update Y
.aa4d	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa50	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa53	68		pla				pla
.aa54	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa57	68		pla				pla 								; get A (command+X.1) back
.aa58	48		pha				pha
.aa59	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa5b	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa5e	68		pla				pla 								; get command back
.aa5f	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa61	48		pha				pha 								; push back.
.aa62	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa64	f0 17		beq $aa7d			beq 	_GDCopyToWorkArea
.aa66	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa69	f0 07		beq $aa72			beq 	_GDCheckY
.aa6b	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa6e	c9 40		cmp #$40			cmp 	#64
.aa70	b0 08		bcs $aa7a			bcs 	_GDError1
.aa72					_GDCheckY:
.aa72	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa75	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa78	90 03		bcc $aa7d			bcc 	_GDCopyToWorkArea
.aa7a					_GDError1:
.aa7a	68		pla				pla
.aa7b					_GDError2:
.aa7b	38		sec				sec
.aa7c	60		rts				rts
.aa7d					_GDCopyToWorkArea:
.aa7d	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa7f					_GDCopy2:
.aa7f	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa82	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa85	ca		dex				dex
.aa86	10 f7		bpl $aa7f			bpl 	_GDCopy2
.aa88	68		pla				pla 								; get command
.aa89					_GDExecuteA:
.aa89	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa8b	b0 ee		bcs $aa7b			bcs 	_GDError2
.aa8d	aa		tax				tax
.aa8e	7c d1 b7	jmp ($b7d1,x)			jmp 	(GRVectorTable,x)
.aa91					GXMove:
.aa91	18		clc				clc
.aa92	60		rts				rts
.aa93					GRUndefined:
>aa93	db						.byte 	$DB 						; causes a break in the emulator
.aa94					GXFillCircle:
.aa94	a9 ff		lda #$ff			lda 	#255
.aa96	80 02		bra $aa9a			bra 	GXCircle
.aa98					GXFrameCircle:
.aa98	a9 00		lda #$00			lda 	#0
.aa9a					GXCircle:
.aa9a	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa9d	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aaa0	f0 26		beq $aac8			beq 	_GXCFail
.aaa2	20 f3 b2	jsr $b2f3			jsr 	GXSortXY 					; topleft/bottomright
.aaa5	20 cb b1	jsr $b1cb			jsr 	GXOpenBitmap 				; start drawing
.aaa8	20 9a ab	jsr $ab9a			jsr 	GXCircleSetup 				; set up for drawing
.aaab	9c de 06	stz $06de			stz 	gxYChanged
.aaae					_GXCircleDraw:
.aaae	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aab1	cd dc 06	cmp $06dc			cmp 	gYCentre
.aab4	90 0a		bcc $aac0			bcc 	_GXCircleContinue
.aab6	d0 03		bne $aabb			bne 	_GXNoLast
.aab8	20 cd aa	jsr $aacd			jsr 	GXPlot1
.aabb					_GXNoLast:
.aabb	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap 				; close the bitmap
.aabe	18		clc				clc
.aabf	60		rts				rts
.aac0					_GXCircleContinue:
.aac0	20 ca aa	jsr $aaca			jsr 	GXPlot2 					; draw it
.aac3	20 47 ab	jsr $ab47			jsr 	GXCircleMove 				; adjust the coordinates
.aac6	80 e6		bra $aaae			bra 	_GXCircleDraw
.aac8					_GXCFail:
.aac8	38		sec				sec
.aac9	60		rts				rts
.aaca					GXPlot2:
.aaca	20 cd aa	jsr $aacd			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aacd					GXPlot1:
.aacd	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aad0	f0 03		beq $aad5			beq 	_GXPlot1Only
.aad2	20 f1 aa	jsr $aaf1			jsr 	GXPlot0 						; plot and negate
.aad5					_GXPlot1Only:
.aad5	20 f1 aa	jsr $aaf1			jsr 	GXPlot0 						; twice, undoing negation
.aad8	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aadb	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aade	8d dc 06	sta $06dc			sta 	gYCentre
.aae1	8e db 06	stx $06db			stx 	gXCentre
.aae4	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aae7	a9 ff		lda #$ff			lda 	#$FF
.aae9	8d de 06	sta $06de			sta 	gxYChanged
.aaec	60		rts				rts
.aaed	20 f1 aa	jsr $aaf1			jsr 	GXPlot0 						; do once
.aaf0	60		rts				rts
.aaf1	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aaf4	f0 05		beq $aafb			beq 	_GXPlot0Always
.aaf6	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aaf9	f0 2d		beq $ab28			beq 	GXPlot0Exit
.aafb					_GXPlot0Always:
.aafb	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aafd	ad dc 06	lda $06dc			lda 	gYCentre
.ab00	20 29 ab	jsr $ab29			jsr 	GXSubCopy
.ab03	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.ab05	ad db 06	lda $06db			lda 	gXCentre
.ab08	20 29 ab	jsr $ab29			jsr 	GXSubCopy
.ab0b	48		pha				pha 									; save last offset X
.ab0c	20 db b1	jsr $b1db			jsr 	GXPositionCalc 					; calculate position/offset.
.ab0f	68		pla				pla
.ab10	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.ab11	85 36		sta $36				sta 	gxzTemp0
.ab13	64 37		stz $37				stz 	gxzTemp0+1
.ab15	26 37		rol $37				rol 	gxzTemp0+1
.ab17	ad dd 06	lda $06dd			lda 	gxIsFillMode
.ab1a	69 80		adc #$80			adc 	#128
.ab1c	20 b9 ae	jsr $aeb9			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab1f	38		sec				sec 									; GY = -GY
.ab20	a9 00		lda #$00			lda 	#0
.ab22	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab25	8d dc 06	sta $06dc			sta 	gYCentre
.ab28					GXPlot0Exit:
.ab28	60		rts				rts
.ab29					GXSubCopy:
.ab29	85 36		sta $36				sta 	gxzTemp0
.ab2b	64 37		stz $37				stz 	gxzTemp0+1
.ab2d	29 80		and #$80			and 	#$80
.ab2f	f0 02		beq $ab33			beq 	_GXNoSx
.ab31	c6 37		dec $37				dec 	gxzTemp0+1
.ab33					_GXNoSx:
.ab33	38		sec				sec
.ab34	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab37	e5 36		sbc $36				sbc 	gxzTemp0
.ab39	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab3c	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab3f	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab41	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab44	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab46	60		rts				rts
.ab47					GXCircleMove:
.ab47	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab4a	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab4c	10 0d		bpl $ab5b			bpl 	_GXEMPositive
.ab4e	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab51	ad db 06	lda $06db			lda 	gXCentre
.ab54	20 7a ab	jsr $ab7a			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab57	a9 06		lda #$06			lda 	#6  						; and add 6
.ab59	80 15		bra $ab70			bra 	_GXEMAddD
.ab5b					_GXEMPositive:
.ab5b	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab5e	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab61	38		sec				sec 								; calculate X-Y
.ab62	ad db 06	lda $06db			lda 	gXCentre
.ab65	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab68	20 7a ab	jsr $ab7a			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab6b	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab6d	ce de 06	dec $06de			dec 	gxYChanged
.ab70					_GXEMAddD:
.ab70	18		clc				clc
.ab71	65 38		adc $38				adc 	gxzTemp1
.ab73	85 38		sta $38				sta 	gxzTemp1
.ab75	90 02		bcc $ab79			bcc 	_GXEMNoCarry
.ab77	e6 39		inc $39				inc 	gxzTemp1+1
.ab79					_GXEMNoCarry:
.ab79	60		rts				rts
.ab7a					_GXAdd4TimesToD:
.ab7a	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab7c	29 80		and #$80			and 	#$80
.ab7e	f0 02		beq $ab82			beq 	_GXA4Unsigned
.ab80	a9 ff		lda #$ff			lda 	#$FF
.ab82					_GXA4Unsigned:
.ab82	85 37		sta $37				sta 	gxzTemp0+1
.ab84	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab86	26 37		rol $37				rol 	gxzTemp0+1
.ab88	06 36		asl $36				asl 	gxzTemp0
.ab8a	26 37		rol $37				rol 	gxzTemp0+1
.ab8c	18		clc				clc 								; add
.ab8d	a5 36		lda $36				lda		gxzTemp0
.ab8f	65 38		adc $38				adc 	gxzTemp1
.ab91	85 38		sta $38				sta 	gxzTemp1
.ab93	a5 37		lda $37				lda		gxzTemp0+1
.ab95	65 39		adc $39				adc 	gxzTemp1+1
.ab97	85 39		sta $39				sta 	gxzTemp1+1
.ab99	60		rts				rts
.ab9a					GXCircleSetup:
.ab9a	38		sec				sec
.ab9b	ad 48 06	lda $0648			lda 	gxY1
.ab9e	ed 44 06	sbc $0644			sbc 	gxY0
.aba1	4a		lsr a				lsr 	a
.aba2	8d da 06	sta $06da			sta 	gxRadius
.aba5	a2 00		ldx #$00			ldx 	#0
.aba7	20 c9 ab	jsr $abc9			jsr 	_GXCalculateCentre
.abaa	a2 02		ldx #$02			ldx 	#2
.abac	20 c9 ab	jsr $abc9			jsr 	_GXCalculateCentre
.abaf	9c db 06	stz $06db			stz 	gXCentre
.abb2	ad da 06	lda $06da			lda 	gxRadius
.abb5	8d dc 06	sta $06dc			sta 	gYCentre
.abb8	0a		asl a				asl 	a 							; R x 2
.abb9	85 36		sta $36				sta 	gxzTemp0
.abbb	38		sec				sec
.abbc	a9 03		lda #$03			lda 	#3
.abbe	e5 36		sbc $36				sbc 	gxzTemp0
.abc0	85 38		sta $38				sta 	gxzTemp1
.abc2	a9 00		lda #$00			lda 	#0
.abc4	e9 00		sbc #$00			sbc 	#0
.abc6	85 39		sta $39				sta 	gxzTemp1+1
.abc8	60		rts				rts
.abc9					_GXCalculateCentre:
.abc9	38		sec				sec
.abca	bd 46 06	lda $0646,x			lda 	gxX1,x
.abcd	7d 42 06	adc $0642,x			adc 	gXX0,x
.abd0	9d 46 06	sta $0646,x			sta 	gXX1,x
.abd3	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abd6	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abd9	4a		lsr a				lsr 	a
.abda	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abdd	7e 46 06	ror $0646,x			ror 	gXX1,x
.abe0	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abe1					GXClearBitmap:
.abe1	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abe4	f0 24		beq $ac0a			beq 	_GXCBFail
.abe6	20 cb b1	jsr $b1cb			jsr 	GXOpenBitmap 				; start access
.abe9	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abeb	ad 4e 06	lda $064e			lda 	gxHeight
.abee	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abf0	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abf2					_GXCalcLastPage:
.abf2	98		tya				tya 								; add to base page
.abf3	18		clc				clc
.abf4	6d 4c 06	adc $064c			adc 	gxBasePage
.abf7	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abf9					_GXClearAll:
.abf9	20 0c ac	jsr $ac0c			jsr 	_GXClearBlock 				; clear 8k block
.abfc	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abfe	a5 0b		lda $0b				lda 	GXEditSlot
.ac00	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.ac03	b0 f4		bcs $abf9			bcs 	_GXClearAll
.ac05	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap	 			; stop access
.ac08	18		clc				clc
.ac09	60		rts				rts
.ac0a					_GXCBFail:
.ac0a	38		sec				sec
.ac0b	60		rts				rts
.ac0c					_GXClearBlock:
.ac0c	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.ac0e	85 38		sta $38				sta 	0+gxzTemp1
.ac10	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.ac12	85 39		sta $39				sta 	1+gxzTemp1
.ac14					_GXCB0:
.ac14	a5 36		lda $36				lda 	gxzTemp0
.ac16	a0 00		ldy #$00			ldy 	#0
.ac18					_GXCB1:
.ac18	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac1a	c8		iny				iny
.ac1b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac1d	c8		iny				iny
.ac1e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac20	c8		iny				iny
.ac21	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac23	c8		iny				iny
.ac24	d0 f2		bne $ac18			bne 	_GXCB1
.ac26	e6 39		inc $39				inc 	gxzTemp1+1
.ac28	a5 39		lda $39				lda 	gxzTemp1+1
.ac2a	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac2c	d0 e6		bne $ac14			bne 	_GXCB0
.ac2e	60		rts				rts
.ac2f					GXInitialise:
.ac2f	64 01		stz $01				stz 	1
.ac31	a9 01		lda #$01			lda 	#1
.ac33	8d 00 d0	sta $d000			sta 	$D000
.ac36	18		clc				clc
.ac37	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac3a	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac3d	a2 0f		ldx #$0f			ldx 	#15
.ac3f					_GXIClear:
.ac3f	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac42	ca		dex				dex
.ac43	10 fa		bpl $ac3f			bpl 	_GXIClear
.ac45	20 e0 ac	jsr $ace0			jsr 	GXClearSpriteStore
.ac48	60		rts				rts
.ac49					GXControlBitmap:
.ac49	64 01		stz $01				stz 	1
.ac4b	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac4d	29 01		and #$01			and 	#1 							; set bitmap flag
.ac4f	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac52	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac53	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac56	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac58	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac5a	90 02		bcc $ac5e			bcc 	_CBNotOn
.ac5c	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac5e					_CBNotOn:
.ac5e	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac61	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac63	29 07		and #$07			and 	#7
.ac65	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac68	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac6a	d0 02		bne $ac6e			bne 	_CBNotDefault
.ac6c	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac6e					_CBNotDefault:
.ac6e	8d 4c 06	sta $064c			sta 	gxBasePage
.ac71	20 d2 ac	jsr $acd2			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac74	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac76	8d 03 d1	sta $d103			sta 	$D103
.ac79	a5 36		lda $36				lda 	gxzTemp0
.ac7b	8d 02 d1	sta $d102			sta 	$D102
.ac7e	9c 01 d1	stz $d101			stz 	$D101
.ac81	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac83	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac86	29 01		and #$01			and 	#1
.ac88	f0 02		beq $ac8c			beq 	_CBHaveHeight
.ac8a	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac8c					_CBHaveHeight
.ac8c	8e 4e 06	stx $064e			stx 	gxHeight
.ac8f	18		clc				clc
.ac90	60		rts				rts
.ac91					GXControlSprite:
.ac91	64 01		stz $01				stz 	1
.ac93	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac95	29 01		and #$01			and 	#1 							; set sprites flag
.ac97	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac9a	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac9b	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac9e	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.aca0	29 df		and #$df			and 	#$DF 						; clear sprite bit
.aca2	90 02		bcc $aca6			bcc 	_CSNotOn
.aca4	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.aca6					_CSNotOn:
.aca6	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aca9	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.acab	d0 02		bne $acaf			bne 	_CSNotDefault
.acad	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.acaf					_CSNotDefault:
.acaf	8d 4d 06	sta $064d			sta 	gxSpritePage
.acb2	20 d2 ac	jsr $acd2			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.acb5	a5 36		lda $36				lda 	zTemp0
.acb7	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.acba	a5 37		lda $37				lda 	zTemp0+1
.acbc	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.acbf	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.acc1					_CSClear:
.acc1	9e 00 d9	stz $d900,x			stz 	$D900,x
.acc4	9e 00 da	stz $da00,x			stz 	$DA00,x
.acc7	ca		dex				dex
.acc8	d0 f7		bne $acc1			bne 	_CSClear
.acca	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.accd	20 e0 ac	jsr $ace0			jsr 	GXClearSpriteStore
.acd0	18		clc				clc
.acd1	60		rts				rts
.acd2					GXCalculateBaseAddress:
.acd2	85 36		sta $36				sta 	gxzTemp0
.acd4	64 37		stz $37				stz 	gxzTemp0+1
.acd6	a9 05		lda #$05			lda 	#5
.acd8					_GXShift:
.acd8	06 36		asl $36				asl 	gxzTemp0
.acda	26 37		rol $37				rol 	gxzTemp0+1
.acdc	3a		dec a				dec		a
.acdd	d0 f9		bne $acd8			bne 	_GXShift
.acdf	60		rts				rts
.ace0					GXClearSpriteStore:
.ace0	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ace2					_GXCSSLoop:
.ace2	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.ace5	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ace7	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.acea	ca		dex				dex
.aceb	10 f5		bpl $ace2			bpl 	_GXCSSLoop
.aced	60		rts				rts
.acee					GXLine:
.acee	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.acf1	f0 28		beq $ad1b			beq 	_GXLFail
.acf3	20 cb b1	jsr $b1cb			jsr 	GXOpenBitmap
.acf6	20 11 b3	jsr $b311			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acf9	20 c1 ad	jsr $adc1			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.acfc	20 db b1	jsr $b1db			jsr 	GXPositionCalc 				; calculate position/offset.
.acff					_GXDrawLoop:
.acff	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.ad02	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ad04	2d 52 06	and $0652			and 	gxANDValue
.ad07	4d 51 06	eor $0651			eor 	gxEORValue
.ad0a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad0c	20 1d ad	jsr $ad1d			jsr 	GXLineIsComplete 			; is the line complete ?
.ad0f	f0 05		beq $ad16			beq 	_GXLExit
.ad11	20 38 ad	jsr $ad38			jsr 	GXLineAdvance 				; code as per advance method
.ad14	80 e9		bra $acff			bra 	_GXDrawLoop
.ad16					_GXLExit:
.ad16	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap
.ad19	18		clc				clc
.ad1a	60		rts				rts
.ad1b					_GXLFail:
.ad1b	38		sec				sec
.ad1c	60		rts				rts
.ad1d					GXLineIsComplete:
.ad1d	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad20	d0 0f		bne $ad31			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad22	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad25	4d 46 06	eor $0646			eor 	GXX1
.ad28	d0 06		bne $ad30			bne 	_GXLICExit
.ad2a	ad 43 06	lda $0643			lda 	GXX0+1
.ad2d	4d 47 06	eor $0647			eor 	GXX1+1
.ad30					_GXLICExit:
.ad30	60		rts				rts
.ad31					_GXLICCompareY:
.ad31	ad 48 06	lda $0648			lda 	GXY1
.ad34	4d 44 06	eor $0644			eor 	GXY0
.ad37	60		rts				rts
.ad38					GXLineAdvance:
.ad38	18		clc				clc 								; add adjust to position
.ad39	ad e3 06	lda $06e3			lda 	GXPosition
.ad3c	6d e4 06	adc $06e4			adc 	GXAdjust
.ad3f	8d e3 06	sta $06e3			sta 	GXPosition
.ad42	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad45	b0 05		bcs $ad4c			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad47	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad4a	90 0a		bcc $ad56			bcc 	_GXLANoExtra
.ad4c					_GXLAOverflow:
.ad4c	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad4f	38		sec				sec 								; subtract total and write back
.ad50	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad53	8d e3 06	sta $06e3			sta 	GXPosition
.ad56					_GXLANoExtra:
.ad56	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad59	f0 0d		beq $ad68			beq 	_GXDXLarger
.ad5b	20 ba ad	jsr $adba			jsr 	GXIncrementY
.ad5e	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad61	f0 10		beq $ad73			beq 	_GXLAExit
.ad63	20 74 ad	jsr $ad74			jsr 	GXAdjustX
.ad66	80 0b		bra $ad73			bra 	_GXLAExit
.ad68					_GXDXLarger:
.ad68	20 74 ad	jsr $ad74			jsr 	GXAdjustX
.ad6b	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad6e	f0 03		beq $ad73			beq 	_GXLAExit
.ad70	20 ba ad	jsr $adba			jsr 	GXIncrementY
.ad73					_GXLAExit:
.ad73	60		rts				rts
.ad74					GXAdjustX:
.ad74	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad77	10 25		bpl $ad9e			bpl 	_GXAXRight
.ad79	ad 42 06	lda $0642			lda 	GXX0
.ad7c	d0 03		bne $ad81			bne 	_GXAXNoBorrow
.ad7e	ce 43 06	dec $0643			dec 	GXX0+1
.ad81					_GXAXNoBorrow:
.ad81	ce 42 06	dec $0642			dec 	GXX0
.ad84	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad87	ad 54 06	lda $0654			lda 	gsOffset
.ad8a	c9 ff		cmp #$ff			cmp 	#$FF
.ad8c	d0 0f		bne $ad9d			bne 	_GXAYExit 					; underflow
.ad8e	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad90	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad92	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad94	b0 07		bcs $ad9d			bcs 	_GXAYExit
.ad96	18		clc				clc
.ad97	69 20		adc #$20			adc 	#$20 						; fix up
.ad99	85 3d		sta $3d				sta 	gxzScreen+1
.ad9b	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad9d					_GXAYExit:
.ad9d	60		rts				rts
.ad9e					_GXAXRight:
.ad9e	ee 42 06	inc $0642			inc 	GXX0
.ada1	d0 03		bne $ada6			bne 	_GXAXNoCarry
.ada3	ee 43 06	inc $0643			inc 	GXX0+1
.ada6					_GXAXNoCarry:
.ada6	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ada9	d0 0e		bne $adb9			bne 	_GXAXExit 					; if not overflowed, exit.
.adab	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.adad	a5 3d		lda $3d				lda 	gxzScreen+1
.adaf	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.adb1	90 06		bcc $adb9			bcc 	_GXAXExit
.adb3	e9 20		sbc #$20			sbc 	#$20 						; fix up
.adb5	85 3d		sta $3d				sta 	gxzScreen+1
.adb7	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.adb9					_GXAXExit:
.adb9	60		rts				rts
.adba					GXIncrementY:
.adba	ee 44 06	inc $0644			inc 	GXY0
.adbd	20 31 b2	jsr $b231			jsr 	GXMovePositionDown
.adc0	60		rts				rts
.adc1					GXLineSetup:
.adc1	ad 48 06	lda $0648			lda 	GXY1
.adc4	38		sec				sec
.adc5	ed 44 06	sbc $0644			sbc 	GXY0
.adc8	4a		lsr a				lsr 	a
.adc9	8d e0 06	sta $06e0			sta 	GXDiffY
.adcc	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adcf	38		sec				sec
.add0	ad 46 06	lda $0646			lda 	GXX1
.add3	ed 42 06	sbc $0642			sbc 	GXX0
.add6	8d df 06	sta $06df			sta 	GXDiffX
.add9	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.addc	ed 43 06	sbc $0643			sbc 	GXX0+1
.addf	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.ade0	6e df 06	ror $06df			ror 	GXDiffX
.ade3	0a		asl a				asl 	a
.ade4	10 0c		bpl $adf2			bpl 	_GDXNotNegative
.ade6	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.ade8	38		sec				sec
.ade9	ed df 06	sbc $06df			sbc 	GXDiffX
.adec	8d df 06	sta $06df			sta 	GXDiffX
.adef	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.adf2					_GDXNotNegative:
.adf2	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.adf5	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adf8	8d e4 06	sta $06e4			sta 	GXAdjust
.adfb	ad df 06	lda $06df			lda 	GXDiffX
.adfe	8d e5 06	sta $06e5			sta 	GXTotal
.ae01	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.ae04	cd df 06	cmp $06df			cmp 	GXDiffX
.ae07	90 0f		bcc $ae18			bcc 	_GDXNotLarger
.ae09	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.ae0c	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.ae0f	8d e4 06	sta $06e4			sta 	GXAdjust
.ae12	ad e0 06	lda $06e0			lda 	GXDiffY
.ae15	8d e5 06	sta $06e5			sta 	GXTotal
.ae18					_GDXNotLarger:
.ae18	ad e5 06	lda $06e5			lda 	GXTotal
.ae1b	4a		lsr a				lsr 	a
.ae1c	8d e3 06	sta $06e3			sta 	GXPosition
.ae1f	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae20					GXSetColourMode:
.ae20	a6 36		ldx $36				ldx 	gxzTemp0
.ae22	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae25	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae27	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae2a	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae2c	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae2f	ae 50 06	ldx $0650			ldx 	gxColour
.ae32	8e 51 06	stx $0651			stx 	gxEORValue
.ae35	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae37	90 03		bcc $ae3c			bcc 	_GXSDCNotAndColour
.ae39	8e 52 06	stx $0652			stx 	gxANDValue
.ae3c					_GXSDCNotAndColour:
.ae3c	d0 03		bne $ae41			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae3e	9c 51 06	stz $0651			stz 	gxEORValue
.ae41					_GXSDCNotAnd:
.ae41	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae42	90 08		bcc $ae4c			bcc 	_GXSDCNoFlip
.ae44	ad 52 06	lda $0652			lda	 	gxANDValue
.ae47	49 ff		eor #$ff			eor 	#$FF
.ae49	8d 52 06	sta $0652			sta 	gxANDValue
.ae4c					_GXSDCNoFlip:
.ae4c	18		clc				clc
.ae4d	60		rts				rts
.ae4e					GXPlotPoint:
.ae4e	20 cb b1	jsr $b1cb			jsr 	GXOpenBitmap 				; start drawing
.ae51	20 db b1	jsr $b1db			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae54	ac 54 06	ldy $0654			ldy 	gsOffset
.ae57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae59	2d 52 06	and $0652			and 	gxANDValue
.ae5c	4d 51 06	eor $0651			eor 	gxEORValue
.ae5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae61	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae64	18		clc				clc
.ae65	60		rts				rts
.ae66					GXFillRectangle:
.ae66	38		sec				sec
.ae67	80 01		bra $ae6a			bra 	GXRectangle
.ae69					GXFrameRectangle:
.ae69	18		clc				clc
.ae6a					GXRectangle:
.ae6a	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae6d	f0 35		beq $aea4			beq 	_GXRFail
.ae6f	08		php				php 								; save Fill flag (CS)
.ae70	20 cb b1	jsr $b1cb			jsr 	GXOpenBitmap 				; start drawing
.ae73	20 f3 b2	jsr $b2f3			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae76	20 db b1	jsr $b1db			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae79	38		sec				sec 								; sec = Draw line
.ae7a	20 a6 ae	jsr $aea6			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae7d	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae80	cd 48 06	cmp $0648			cmp 	gxY1
.ae83	f0 19		beq $ae9e			beq 	_GXRectangleExit
.ae85					_GXRectLoop:
.ae85	20 31 b2	jsr $b231			jsr 	GXMovePositionDown 			; down one.
.ae88	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae8b	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae8e	cd 48 06	cmp $0648			cmp 	gXY1
.ae91	f0 07		beq $ae9a			beq 	_GXLastLine
.ae93	28		plp				plp 								; get flag back
.ae94	08		php				php
.ae95	20 a6 ae	jsr $aea6			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae98	80 eb		bra $ae85			bra 	_GXRectLoop
.ae9a					_GXLastLine:
.ae9a	38		sec				sec
.ae9b	20 a6 ae	jsr $aea6			jsr 	GXDrawLineX1X0
.ae9e					_GXRectangleExit:
.ae9e	68		pla				pla 								; throw fill flag.
.ae9f	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap 				; stop drawing and exit
.aea2	18		clc				clc
.aea3	60		rts				rts
.aea4					_GXRFail:
.aea4	38		sec				sec
.aea5	60		rts				rts
.aea6					GXDrawLineX1X0:
.aea6	08		php				php 								; save solid/either-end
.aea7	38		sec				sec
.aea8	ad 46 06	lda $0646			lda		gXX1
.aeab	ed 42 06	sbc $0642			sbc 	gXX0
.aeae	85 36		sta $36				sta 	gxzTemp0
.aeb0	ad 47 06	lda $0647			lda 	gXX1+1
.aeb3	ed 43 06	sbc $0643			sbc 	gXX0+1
.aeb6	85 37		sta $37				sta 	gxzTemp0+1
.aeb8	28		plp				plp
.aeb9					GXDrawLineTemp0:
.aeb9	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aebb	48		pha				pha
.aebc	a5 3d		lda $3d				lda 	gxzScreen+1
.aebe	48		pha				pha
.aebf	ad 54 06	lda $0654			lda 	gsOffset
.aec2	48		pha				pha
.aec3	a5 0b		lda $0b				lda 	GXEditSlot
.aec5	48		pha				pha
.aec6	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aec9	90 1e		bcc $aee9			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aecb					_GXDLTLine:
.aecb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aecd	2d 52 06	and $0652			and 	gxANDValue
.aed0	4d 51 06	eor $0651			eor 	gxEORValue
.aed3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed5	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aed7	d0 04		bne $aedd			bne 	_GXDLTNoBorrow
.aed9	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aedb	30 2e		bmi $af0b			bmi 	_GXDLTExit
.aedd					_GXDLTNoBorrow:
.aedd	c6 36		dec $36				dec 	gxzTemp0
.aedf	c8		iny				iny 								; next slot.
.aee0	d0 e9		bne $aecb			bne 	_GXDLTLine
.aee2	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aee4	20 19 af	jsr $af19			jsr 	GXDLTCheckWrap				; check for new page.
.aee7	80 e2		bra $aecb			bra 	_GXDLTLine
.aee9					_GXDLTEndPoints:
.aee9	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aeeb	2d 52 06	and $0652			and 	gxANDValue
.aeee	4d 51 06	eor $0651			eor 	gxEORValue
.aef1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aef3	98		tya				tya 								; advance to right side
.aef4	18		clc				clc
.aef5	65 36		adc $36				adc 	gxzTemp0
.aef7	a8		tay				tay
.aef8	a5 3d		lda $3d				lda 	gxzScreen+1
.aefa	65 37		adc $37				adc 	gxzTemp0+1
.aefc	85 3d		sta $3d				sta 	gxzScreen+1
.aefe	20 19 af	jsr $af19			jsr 	GXDLTCheckWrap 			; fix up.
.af01	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.af03	2d 52 06	and $0652			and 	gxANDValue
.af06	4d 51 06	eor $0651			eor 	gxEORValue
.af09	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af0b					_GXDLTExit:
.af0b	68		pla				pla
.af0c	85 0b		sta $0b				sta 	GXEditSlot
.af0e	68		pla				pla
.af0f	8d 54 06	sta $0654			sta 	gsOffset
.af12	68		pla				pla
.af13	85 3d		sta $3d				sta 	gxzScreen+1
.af15	68		pla				pla
.af16	85 3c		sta $3c				sta 	gxzScreen
.af18	60		rts				rts
.af19					GXDLTCheckWrap:
.af19	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af1b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af1d	90 06		bcc $af25			bcc 	_GXDLTCWExit
.af1f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af21	85 3d		sta $3d				sta 	gxzScreen+1
.af23	e6 0b		inc $0b				inc 	GXEditSlot
.af25					_GXDLTCWExit:
.af25	60		rts				rts
.af26					GXDrawGraphicElement:
.af26	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af29	3a		dec a				dec 	a
.af2a	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af2d	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af30	f0 67		beq $af99			beq 	_GXSLFail
.af32	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af35	48		pha				pha
.af36	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af39	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af3c	20 cb b1	jsr $b1cb			jsr 	gxOpenBitmap 				; open the bitmap.
.af3f	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af42	4a		lsr a				lsr 	a
.af43	4a		lsr a				lsr 	a
.af44	4a		lsr a				lsr 	a
.af45	29 07		and #$07			and		#7
.af47	1a		inc a				inc 	a
.af48	8d eb 06	sta $06eb			sta 	gxScale
.af4b	64 38		stz $38				stz 	gxzTemp1					; start first line
.af4d					_GXGELoop:
.af4d	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af4f	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af52	10 06		bpl $af5a			bpl		_GXNoVFlip
.af54	ad e8 06	lda $06e8			lda 	gxMask
.af57	38		sec				sec
.af58	e5 38		sbc $38				sbc 	gxzTemp1
.af5a					_GXNoVFlip:
.af5a	aa		tax				tax 								; get the Xth line.
.af5b	20 9b af	jsr $af9b			jsr 	_GXCallAcquire 				; get that data.
.af5e	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af61	85 39		sta $39				sta 	gxzTemp1+1
.af63					_GXGELoop2:
.af63	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af66	cd 4e 06	cmp $064e			cmp 	gxHeight
.af69	b0 10		bcs $af7b			bcs 	_GXDGEExit
.af6b	20 9e af	jsr $af9e			jsr 	GXRenderOneLine 			; render line
.af6e	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af70	d0 f1		bne $af63			bne 	_GXGELoop2
.af72	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af74	a5 38		lda $38				lda 	gxzTemp1
.af76	cd e7 06	cmp $06e7			cmp 	gxSize
.af79	d0 d2		bne $af4d			bne 	_GXGELoop
.af7b					_GXDGEExit:
.af7b	68		pla				pla 								; restore Y for next time
.af7c	8d 44 06	sta $0644			sta 	gxY0
.af7f	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af82					_GXShiftLeft:
.af82	18		clc				clc
.af83	ad e7 06	lda $06e7			lda 	gxSize
.af86	6d 42 06	adc $0642			adc 	gxX0
.af89	8d 42 06	sta $0642			sta 	gxX0
.af8c	90 03		bcc $af91			bcc 	_GXSLNoCarry
.af8e	ee 43 06	inc $0643			inc 	gxX0+1
.af91					_GXSLNoCarry:
.af91	ca		dex				dex
.af92	d0 ee		bne $af82			bne 	_GXShiftLeft
.af94	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap
.af97	18		clc				clc
.af98	60		rts				rts
.af99					_GXSLFail:
.af99	38		sec				sec
.af9a	60		rts				rts
.af9b					_GXCallAcquire:
.af9b	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af9e					GXRenderOneLine:
.af9e	20 db b1	jsr $b1db			jsr 	GXPositionCalc 				; calculate position/offset.
.afa1	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.afa4	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.afa6					_GXROLLoop1:
.afa6	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.afa9	85 3b		sta $3b				sta 	gxzTemp2+1
.afab					_GXROLLoop2:
.afab	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.afad	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.afb0	50 06		bvc $afb8			bvc 	_GXNoHFlip
.afb2	ad e8 06	lda $06e8			lda 	gxMask
.afb5	38		sec				sec
.afb6	e5 3a		sbc $3a				sbc 	gxzTemp2
.afb8					_GXNoHFlip:
.afb8	aa		tax				tax 								; read from the pixel buffer
.afb9	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.afbc	d0 07		bne $afc5			bne 	_GXDraw 					; draw if non zero
.afbe	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afc1	29 04		and #$04			and 	#4
.afc3	f0 0a		beq $afcf			beq 	_GXZeroPixel
.afc5					_GXDraw:
.afc5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afc7	2d 52 06	and $0652			and 	gxANDValue
.afca	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afcd	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afcf					_GXZeroPixel:
.afcf	c8		iny				iny 								; advance pointer
.afd0	d0 05		bne $afd7			bne 	_GXNoShift
.afd2	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afd4	20 19 af	jsr $af19			jsr 	GXDLTCheckWrap				; check for new page.
.afd7					_GXNoShift:
.afd7	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afd9	d0 d0		bne $afab			bne 	_GXROLLoop2
.afdb	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afdd	a5 3a		lda $3a				lda 	gxzTemp2
.afdf	cd e7 06	cmp $06e7			cmp 	gxSize
.afe2	d0 c2		bne $afa6			bne 	_GXROLLoop1
.afe4	ee 44 06	inc $0644			inc 	gxY0
.afe7	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afe8					GXFontHandler:
.afe8	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afea	4d 4f 06	eor $064f			eor 	gxMode
.afed	8d ec 06	sta $06ec			sta 	gxUseMode
.aff0	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.aff2	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.aff4	26 37		rol $37				rol	 	gxzTemp0+1
.aff6	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.aff8	26 37		rol $37				rol	 	gxzTemp0+1
.affa	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.affc	26 37		rol $37				rol	 	gxzTemp0+1
.affe	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.b000	09 c0		ora #$c0			ora 	#$C0
.b002	85 37		sta $37				sta 	gxzTemp0+1
.b004	a9 08		lda #$08			lda 	#8 							; size 8x8
.b006	a2 0e		ldx #$0e			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.b008	a0 b0		ldy #$b0			ldy 	#GXGetGraphicDataFont >> 8
.b00a	20 26 af	jsr $af26			jsr 	GXDrawGraphicElement
.b00d	60		rts				rts
.b00e					GXGetGraphicDataFont:
.b00e	8a		txa				txa 								; X->Y
.b00f	a8		tay				tay
.b010	a6 01		ldx $01				ldx 	1 							; preserve old value
.b012	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.b014	85 01		sta $01				sta 	1
.b016	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.b018	86 01		stx $01				stx 	1 							; put old value back.
.b01a	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b01c					_GXExpand:
.b01c	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b01f	0a		asl a				asl 	a 							; shift bit 7 into C
.b020	90 08		bcc $b02a			bcc 	_GXNoPixel
.b022	48		pha				pha 								; if set, set pixel buffer to current colour.
.b023	ad 50 06	lda $0650			lda 	gxColour
.b026	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b029	68		pla				pla
.b02a					_GXNoPixel:
.b02a	e8		inx				inx 								; do the whole byte.
.b02b	e0 08		cpx #$08			cpx 	#8
.b02d	d0 ed		bne $b01c			bne 	_GXExpand
.b02f	60		rts				rts
.b030					GXSpriteHandler:
.b030	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b032	4d 4f 06	eor $064f			eor 	gxMode
.b035	8d ec 06	sta $06ec			sta 	gxUseMode
.b038	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b03a	da		phx				phx
.b03b	20 cb b1	jsr $b1cb			jsr 	GXOpenBitmap 				; can access sprite information
.b03e	68		pla				pla
.b03f	20 ac b2	jsr $b2ac			jsr 	GXFindSprite 				; get the sprite address
.b042	08		php				php
.b043	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap
.b046	28		plp				plp
.b047	b0 0a		bcs $b053			bcs		_GXSHExit 					; exit if find failed.
.b049	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b04c	a2 54		ldx #$54			ldx 	#GXSpriteAcquire & $FF
.b04e	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b050	20 26 af	jsr $af26			jsr 	GXDrawGraphicElement
.b053					_GXSHExit:
.b053	60		rts				rts
.b054					GXSpriteAcquire:
.b054	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b057	85 0b		sta $0b				sta 	GXEditSlot
.b059	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b05b	a9 00		lda #$00			lda 	#0
.b05d	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b060					_GXTimesRowNumber:
.b060	18		clc				clc
.b061	65 36		adc $36				adc 	zTemp0
.b063	ca		dex				dex
.b064	10 fa		bpl $b060			bpl 	_GXTimesRowNumber
.b066	64 37		stz $37				stz 	gxzTemp0+1
.b068	0a		asl a				asl 	a 							; row x 2,4,6,8
.b069	26 37		rol $37				rol 	gxzTemp0+1
.b06b	0a		asl a				asl 	a 							; row x 4,8,12,16
.b06c	26 37		rol $37				rol 	gxzTemp0+1
.b06e	0a		asl a				asl 	a 							; row x 8,16,24,32
.b06f	26 37		rol $37				rol 	gxzTemp0+1
.b071	85 36		sta $36				sta 	gxzTemp0
.b073	18		clc				clc 								; add base address.
.b074	a5 36		lda $36				lda 	gxzTemp0
.b076	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b079	85 36		sta $36				sta 	gxzTemp0
.b07b	a5 37		lda $37				lda 	gxzTemp0+1
.b07d	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b080					_GXSAFindPage:
.b080	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b082	90 06		bcc $b08a			bcc 	_GXSAFoundPage
.b084	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b086	e6 0b		inc $0b				inc 	GXEditSlot
.b088	80 f6		bra $b080			bra 	_GXSAFindPage
.b08a					_GXSAFoundPage:
.b08a	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b08c	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b08e	a0 00		ldy #$00			ldy 	#0
.b090					_GXSACopyLoop:
.b090	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b092	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b095	c8		iny				iny
.b096	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b099	d0 f5		bne $b090			bne 	_GXSACopyLoop
.b09b	60		rts				rts
.b09c					GXSelect:
.b09c	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b09f	f0 22		beq $b0c3			beq 	_GXSFail
.b0a1	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b0a3	c9 40		cmp #$40			cmp 	#64
.b0a5	b0 1c		bcs $b0c3			bcs 	_GXSFail
.b0a7	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b0aa	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b0ac	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b0ae	06 36		asl $36				asl 	gxzTemp0
.b0b0	06 36		asl $36				asl 	gxzTemp0
.b0b2	06 36		asl $36				asl 	gxzTemp0
.b0b4	2a		rol a				rol 	a
.b0b5	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b0b7	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b0ba	85 37		sta $37				sta 	gxzTemp0+1
.b0bc	a5 36		lda $36				lda 	gxzTemp0
.b0be	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0c1	18		clc				clc
.b0c2	60		rts				rts
.b0c3					_GXSFail:
.b0c3	38		sec				sec
.b0c4	60		rts				rts
.b0c5					GXSelectImage:
.b0c5	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0c8	f0 74		beq $b13e			beq 	_GXSIFail
.b0ca	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0cd	f0 6f		beq $b13e			beq 	_GXSIFail 					; (checking the MSB)
.b0cf	64 01		stz $01				stz 	1
.b0d1	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0d3	d0 6b		bne $b140			bne 	_GXSIHide
.b0d5	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0d7	48		pha				pha
.b0d8	20 cb b1	jsr $b1cb			jsr 	GXOpenBitmap
.b0db	68		pla				pla
.b0dc	20 ac b2	jsr $b2ac			jsr 	GXFindSprite
.b0df	b0 5a		bcs $b13b			bcs 	_GXSICloseFail 				; no image
.b0e1	a0 01		ldy #$01			ldy 	#1
.b0e3	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0e6	85 36		sta $36				sta 	gxzTemp0
.b0e8	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0eb	85 37		sta $37				sta 	gxzTemp0+1
.b0ed	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0f0	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0f2	18		clc				clc
.b0f3	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0f6	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0f9	c8		iny				iny
.b0fa	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0fc	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0ff	69 00		adc #$00			adc 	#0
.b101	c8		iny				iny
.b102	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b104	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b107	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b109	2a		rol a				rol 	a 							; x 2
.b10a	0a		asl a				asl 	a 							; x 4
.b10b	0a		asl a				asl 	a 							; x 8
.b10c	0a		asl a				asl 	a 							; x 16
.b10d	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b110	0a		asl a				asl 	a 							; 1 shift
.b111	09 01		ora #$01			ora 	#1 							; enable sprite.
.b113	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b115	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap
.b118	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b11b	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b11e	29 3f		and #$3f			and 	#$3F
.b120	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b123	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b126	6a		ror a				ror 	a 							; shift into bits 6/7
.b127	6a		ror a				ror 	a
.b128	6a		ror a				ror 	a
.b129	29 c0		and #$c0			and 	#$C0
.b12b	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b12e	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b131	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b134	29 7f		and #$7f			and 	#$7F
.b136	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b139	18		clc				clc
.b13a	60		rts				rts
.b13b					_GXSICloseFail:
.b13b	20 d3 b1	jsr $b1d3			jsr 	GXCloseBitmap
.b13e					_GXSIFail:
.b13e	38		sec				sec
.b13f	60		rts				rts
.b140					_GXSIHide:
.b140	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b143	85 36		sta $36				sta 	gxzTemp0
.b145	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b148	85 37		sta $37				sta 	gxzTemp0+1
.b14a	a9 00		lda #$00			lda 	#0
.b14c	92 36		sta ($36)			sta 	(gxzTemp0)
.b14e	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b151	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b154	09 80		ora #$80			ora 	#$80
.b156	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b159	18		clc				clc
.b15a	60		rts				rts
.b15b					GXMoveSprite:
.b15b	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b15e	f0 65		beq $b1c5			beq 	_GXSIFail
.b160	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b163	f0 60		beq $b1c5			beq 	_GXSIFail
.b165	85 37		sta $37				sta 	gxzTemp0+1
.b167	a0 04		ldy #$04			ldy 	#4
.b169	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b16c	85 36		sta $36				sta 	gxzTemp0
.b16e	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b171	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b174	2a		rol a				rol 	a	 						; into bits 0,1.
.b175	2a		rol a				rol 	a
.b176	2a		rol a				rol 	a
.b177	29 03		and #$03			and 	#3
.b179	aa		tax				tax
.b17a	bd c7 b1	lda $b1c7,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b17d	48		pha				pha
.b17e	18		clc				clc
.b17f	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b182	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b184	c8		iny				iny
.b185	ad 43 06	lda $0643			lda 	gxX0+1
.b188	69 00		adc #$00			adc 	#0
.b18a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b18c	c8		iny				iny
.b18d	68		pla				pla
.b18e	18		clc				clc
.b18f	6d 44 06	adc $0644			adc 	gxY0
.b192	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b194	a9 00		lda #$00			lda 	#0
.b196	69 00		adc #$00			adc 	#0
.b198	c8		iny				iny
.b199	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b19b	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b19e	6e 42 06	ror $0642			ror 	gxX0
.b1a1	4e 42 06	lsr $0642			lsr 	gxX0
.b1a4	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b1a7	4e 44 06	lsr $0644			lsr 	gxY0
.b1aa	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b1ad	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b1b0	29 80		and #$80			and 	#$80
.b1b2	0d 42 06	ora $0642			ora 	gxX0
.b1b5	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b1b8	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b1bb	29 c0		and #$c0			and 	#$C0
.b1bd	0d 44 06	ora $0644			ora 	gxY0
.b1c0	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1c3	18		clc				clc
.b1c4	60		rts				rts
.b1c5					_GXSIFail:
.b1c5	38		sec				sec
.b1c6	60		rts				rts
.b1c7					_GXMSOffset:
>b1c7	1c						.byte 	32-8/2
>b1c8	18						.byte 	32-16/2
>b1c9	14						.byte 	32-24/2
>b1ca	10						.byte 	32-32/2
.b1cb					GXOpenBitmap:
.b1cb	78		sei				sei 								; no interrupts here
.b1cc	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1ce	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1d1	58		cli				cli
.b1d2	60		rts				rts
.b1d3					GXCloseBitmap:
.b1d3	78		sei				sei
.b1d4	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1d7	85 0b		sta $0b				sta 	GXEditSlot
.b1d9	58		cli				cli
.b1da	60		rts				rts
.b1db					GXPositionCalc:
.b1db	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1dd	48		pha				pha
.b1de	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1e1	85 3c		sta $3c				sta 	gxzScreen
.b1e3	64 3d		stz $3d				stz 	gxzScreen+1
.b1e5	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1e7	26 3d		rol $3d				rol 	gxzScreen+1
.b1e9	06 3c		asl $3c				asl 	gxzScreen
.b1eb	26 3d		rol $3d				rol 	gxzScreen+1
.b1ed	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1ee	65 3c		adc $3c				adc 	gxzScreen
.b1f0	85 3c		sta $3c				sta 	gxzScreen
.b1f2	90 02		bcc $b1f6			bcc 	_GXPCNoCarry
.b1f4	e6 3d		inc $3d				inc 	gxzScreen+1
.b1f6					_GXPCNoCarry:
.b1f6	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1f8	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1fa	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1fc	85 36		sta $36				sta 	gxzTemp0
.b1fe	64 3d		stz $3d				stz 	gxzScreen+1
.b200	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b202					_GXPCMultiply32:
.b202	06 3c		asl $3c				asl 	gxzScreen
.b204	26 3d		rol $3d				rol 	gxzScreen+1
.b206	3a		dec a				dec 	a
.b207	d0 f9		bne $b202			bne 	_GXPCMultiply32
.b209	18		clc				clc
.b20a	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b20d	65 3c		adc $3c				adc 	gxzScreen
.b20f	8d 54 06	sta $0654			sta 	gsOffset
.b212	ad 43 06	lda $0643			lda 	GXX0+1
.b215	65 3d		adc $3d				adc 	gxzScreen+1
.b217	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b219	90 04		bcc $b21f			bcc 	_GXPCNoOverflow
.b21b	29 1f		and #$1f			and 	#$1F 						; fix it up
.b21d	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b21f					_GXPCNoOverflow:
.b21f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b221	85 3d		sta $3d				sta 	gxzScreen+1
.b223	64 3c		stz $3c				stz 	gxzScreen
.b225	18		clc				clc
.b226	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b228	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b22b	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b22d	68		pla				pla
.b22e	85 36		sta $36				sta 	gxzTemp0
.b230	60		rts				rts
.b231					GXMovePositionDown:
.b231	18		clc				clc 								; add 320 to offset/temp+1
.b232	ad 54 06	lda $0654			lda 	gsOffset
.b235	69 40		adc #$40			adc 	#64
.b237	8d 54 06	sta $0654			sta 	gsOffset
.b23a	a5 3d		lda $3d				lda 	gxzScreen+1
.b23c	69 01		adc #$01			adc 	#1
.b23e	85 3d		sta $3d				sta 	gxzScreen+1
.b240	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b242	90 07		bcc $b24b			bcc 	_GXMPDExit
.b244	38		sec				sec  								; next page
.b245	e9 20		sbc #$20			sbc 	#$20
.b247	85 3d		sta $3d				sta 	gxzScreen+1
.b249	e6 0b		inc $0b				inc 	GXEditSlot
.b24b					_GXMPDExit:
.b24b	60		rts				rts
.b24c					GXCollide:
.b24c	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b24e	aa		tax				tax
.b24f	05 37		ora $37				ora 	gxzTemp0+1
.b251	29 c0		and #$c0			and 	#$C0
.b253	38		sec				sec
.b254	d0 53		bne $b2a9			bne 	_GXCollideFail 				; if either >= 64, fail.
.b256	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b258	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b25b	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b25e	30 48		bmi $b2a8			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b260	18		clc				clc 								; need to calculate sum of sizes.
.b261	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b264	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b267	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b269	6a		ror a				ror 	a 							; 5/6/7
.b26a	4a		lsr a				lsr 	a 							; 4/5/6
.b26b	4a		lsr a				lsr 	a 							; 3/4/5
.b26c	4a		lsr a				lsr 	a 							; 2/3/4
.b26d	18		clc				clc
.b26e	69 08		adc #$08			adc 	#$08
.b270	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b271	4a		lsr a				lsr 	a
.b272	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b274	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b277	29 3f		and #$3f			and 	#$3F
.b279	85 39		sta $39				sta 	gxzTemp1+1
.b27b	38		sec				sec
.b27c	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b27f	29 3f		and #$3f			and 	#$3F
.b281	e5 39		sbc $39				sbc 	gxzTemp1+1
.b283	b0 03		bcs $b288			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b285	49 ff		eor #$ff			eor 	#$FF
.b287	1a		inc a				inc 	a
.b288					_GXCAbs1:
.b288	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b28a	b0 1c		bcs $b2a8			bcs 	_GXOkayFail
.b28c	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b28e	38		sec				sec 								; calculate |x1-x0|
.b28f	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b292	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b295	b0 03		bcs $b29a			bcs 	_GXCAbs2
.b297	49 ff		eor #$ff			eor 	#$FF
.b299	1a		inc a				inc 	a
.b29a					_GXCAbs2:
.b29a	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b29c	b0 0a		bcs $b2a8			bcs 	_GXOkayFail
.b29e	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b2a0	90 02		bcc $b2a4			bcc 	_GXCHaveLowest
.b2a2	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b2a4					_GXCHaveLowest:
.b2a4	0a		asl a				asl 	a 							; scale to allow for >> 2
.b2a5	0a		asl a				asl 	a
.b2a6	18		clc				clc
.b2a7	60		rts				rts
.b2a8					_GXOkayFail:
.b2a8	18		clc				clc
.b2a9					_GXCollideFail:
.b2a9	a9 ff		lda #$ff			lda 	#$FF
.b2ab	60		rts				rts
.b2ac					GXFindSprite:
.b2ac	aa		tax				tax
.b2ad	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b2b0	85 0b		sta $0b				sta 	GXEditSlot
.b2b2	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b2b5	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b2b8	f0 33		beq $b2ed			beq 	_GXFSFail
.b2ba	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b2bd	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2c0	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2c3	48		pha				pha 								; save twice
.b2c4	48		pha				pha
.b2c5	29 03		and #$03			and 	#3 							; get sprite size
.b2c7	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2ca	aa		tax				tax
.b2cb	bd ef b2	lda $b2ef,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2ce	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2d1	68		pla				pla 								; get LUT
.b2d2	4a		lsr a				lsr		a
.b2d3	4a		lsr a				lsr		a
.b2d4	29 03		and #$03			and 	#3
.b2d6	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2d9	68		pla				pla 								; address, neeeds to be x 4
.b2da	29 f0		and #$f0			and 	#$F0
.b2dc	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2df	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2e2	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2e5	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2e8	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2eb	18		clc				clc
.b2ec	60		rts				rts
.b2ed					_GXFSFail:
.b2ed	38		sec				sec
.b2ee	60		rts				rts
.b2ef					_GXFXSSTTable:
>b2ef	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2f3					GXSortXY:
.b2f3	20 11 b3	jsr $b311			jsr 	GXSortY 					; will be sorted on Y now
.b2f6	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2f9	cd 46 06	cmp $0646			cmp 	gxX1
.b2fc	ad 43 06	lda $0643			lda 	gXX0+1
.b2ff	ed 47 06	sbc $0647			sbc 	gXX1+1
.b302	90 0c		bcc $b310			bcc 	_GXSXYExit 					; X0 < X1 exit
.b304	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b306	a0 04		ldy #$04			ldy 	#4
.b308	20 25 b3	jsr $b325			jsr 	GXSwapXY
.b30b	e8		inx				inx
.b30c	c8		iny				iny
.b30d	20 25 b3	jsr $b325			jsr 	GXSwapXY
.b310					_GXSXYExit:
.b310	60		rts				rts
.b311					GXSortY:
.b311	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b314	cd 48 06	cmp $0648			cmp 	gxY1
.b317	90 0b		bcc $b324			bcc 	_GXSYSorted
.b319	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b31b	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b31d					_GXSwap1:
.b31d	20 25 b3	jsr $b325			jsr 	GXSwapXY
.b320	88		dey				dey
.b321	ca		dex				dex
.b322	10 f9		bpl $b31d			bpl 	_GXSwap1
.b324					_GXSYSorted:
.b324	60		rts				rts
.b325					GXSwapXY:
.b325	bd 42 06	lda $0642,x			lda 	gxX0,x
.b328	48		pha				pha
.b329	b9 42 06	lda $0642,y			lda 	gxX0,y
.b32c	9d 42 06	sta $0642,x			sta 	gxX0,x
.b32f	68		pla				pla
.b330	99 42 06	sta $0642,y			sta 	gxX0,y
.b333	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b825					KeywordSet0:
>b825	00 65					.text	0,$65,""               ; $80 !0:EOF
>b827	00 58					.text	0,$58,""               ; $81 !1:SH1
>b829	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b82b	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b831	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b839	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b83f	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b846	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b84e	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b855	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b85c	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b862	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b868	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b870	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b877	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b87e	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b885	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b88d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b893	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b899	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b8a0	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b8a6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b8ac	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b8b4	28
>b8b5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b8bd	28
>b8be	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b8c4	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b8ca	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b8d0	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b8d7	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b8df	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b8e5	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b8eb	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b8f0	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b8f4	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b8fa	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b902	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b909	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b910	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b918	43
>b919	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b91f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b925	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b92c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b932	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b936	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b93c	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b944	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b94b	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b950	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b957	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b95f	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b965	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b96a	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b972	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b978	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b97e	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b983	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b98a	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b990	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b996	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b99d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b9a2	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b9a8	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b9af	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b9b4	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b9b8	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b9c0	45
>b9c1	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b9c9	45
>b9ca	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b9d0	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b9d7	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b9dd	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b9e3	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b9e8	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b9f0	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b9f7	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b9ff	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>ba05	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>ba09	ff					.text	$FF
.ba0a					KeywordSet1:
>ba0a	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba0c	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba0e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba10	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>ba18	4c 45
>ba1a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba22	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba2a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba2f	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba35	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba3a	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba42	45
>ba43	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba48	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba50	53
>ba51	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba57	ff					.text	$FF
.ba58					KeywordSet2:
>ba58	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba5a	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba5c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba5e	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba63	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba68	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba6d	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba72	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba77	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba7c	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba81	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba86	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba8b	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba90	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba95	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba9a	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ba9f	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>baa4	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>baa9	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>baae	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>bab3	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>bab8	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>babd	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>bac2	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>bac7	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>bacc	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bad1	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bad6	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>badb	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bae0	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bae5	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>baea	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>baef	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>baf4	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>baf9	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bafe	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>bb03	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bb08	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bb0d	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bb12	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bb17	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb1c	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb21	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb26	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb2b	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb30	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb35	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb3a	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb3f	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb44	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb49	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb4e	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb53	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb58	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb5d	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb62	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb67	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb6c	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb71	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb76	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb7b	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb80	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb85	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb8a	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb8f	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb94	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb99	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bb9e	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bba3	ff					.text	$FF
.b334					ListConvertLine:
.b334	48		pha				pha 								; save indent on the stack
.b335	9c 9d 04	stz $049d			stz 	tbOffset
.b338	9c ab 04	stz $04ab			stz 	tokenBuffer
.b33b	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b33d	b1 30		lda ($30),y			lda 	(codePtr),y
.b33f	aa		tax				tax
.b340	88		dey				dey
.b341	b1 30		lda ($30),y			lda 	(codePtr),y
.b343	20 69 92	jsr $9269			jsr 	LCLConvertInt16
.b346	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b348	86 37		stx $37				stx 	zTemp0+1
.b34a	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b34c	20 91 b4	jsr $b491			jsr 	LCLWrite
.b34f	a0 00		ldy #$00			ldy 	#0
.b351					_LCCopyNumber:
.b351	b1 36		lda ($36),y			lda 	(zTemp0),y
.b353	20 91 b4	jsr $b491			jsr 	LCLWrite
.b356	c8		iny				iny
.b357	b1 36		lda ($36),y			lda 	(zTemp0),y
.b359	d0 f6		bne $b351			bne 	_LCCopyNumber
.b35b	68		pla				pla 								; adjustment to indent
.b35c	48		pha				pha 								; save on stack
.b35d	10 0c		bpl $b36b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b35f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b360	6d a6 04	adc $04a6			adc 	listIndent
.b363	8d a6 04	sta $04a6			sta 	listIndent
.b366	10 03		bpl $b36b			bpl 	_LCNoAdjust
.b368	9c a6 04	stz $04a6			stz 	listIndent
.b36b					_LCNoAdjust:
.b36b	18		clc				clc		 							; work out actual indent.
.b36c	ad a6 04	lda $04a6			lda 	listIndent
.b36f	0a		asl a				asl 	a
.b370	69 06		adc #$06			adc 	#6
.b372	85 36		sta $36				sta 	zTemp0
.b374					_LCPadOut:
.b374	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b376	20 91 b4	jsr $b491			jsr 	LCLWrite
.b379	ad 9d 04	lda $049d			lda 	tbOffset
.b37c	c5 36		cmp $36				cmp 	zTemp0
.b37e	d0 f4		bne $b374			bne 	_LCPadOut
.b380	a0 03		ldy #$03			ldy 	#3 							; start position.
.b382					_LCMainLoop:
.b382	a9 87		lda #$87			lda 	#CLIPunctuation+$80
.b384	20 91 b4	jsr $b491			jsr 	LCLWrite
.b387	b1 30		lda ($30),y			lda 	(codePtr),y
.b389	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b38b	f0 17		beq $b3a4			beq 	_LCExit
.b38d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b38f	90 1e		bcc $b3af			bcc 	_LCDoubles
.b391	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b393	90 2a		bcc $b3bf			bcc 	_LCShiftPunc
.b395	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b397	90 35		bcc $b3ce			bcc 	_LCPunctuation
.b399	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b39b	90 3e		bcc $b3db			bcc 	_LCIdentifiers
.b39d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b39f	90 5f		bcc $b400			bcc 	_LCTokens
.b3a1	4c 60 b4	jmp $b460			jmp 	_LCData 					; 254-5 are data objects
.b3a4					_LCExit:
.b3a4	68		pla				pla 								; get old indent adjust
.b3a5	30 07		bmi $b3ae			bmi 	_LCExit2
.b3a7	18		clc				clc 								; add to indent if +ve
.b3a8	6d a6 04	adc $04a6			adc 	listIndent
.b3ab	8d a6 04	sta $04a6			sta 	listIndent
.b3ae					_LCExit2:
.b3ae	60		rts				rts
.b3af					_LCDoubles:
.b3af	48		pha				pha
.b3b0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b3b1	29 02		and #$02			and 	#2
.b3b3	09 3c		ora #$3c			ora 	#60 						; make < >
.b3b5	20 91 b4	jsr $b491			jsr 	LCLWrite
.b3b8	68		pla				pla 								; restore, do lower bit
.b3b9	29 03		and #$03			and 	#3
.b3bb	09 3c		ora #$3c			ora 	#60
.b3bd	80 0f		bra $b3ce			bra		_LCPunctuation 				; print, increment, loop
.b3bf					_LCShiftPunc:
.b3bf	aa		tax				tax 								; save in X
.b3c0	29 07		and #$07			and 	#7 							; lower 3 bits
.b3c2	f0 02		beq $b3c6			beq 	_LCNoAdd
.b3c4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3c6					_LCNoAdd:
.b3c6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3c8	90 02		bcc $b3cc			bcc 	_LCNoAdd2
.b3ca	09 20		ora #$20			ora 	#32 						; adds $20
.b3cc					_LCNoAdd2:
.b3cc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3ce					_LCPunctuation:
.b3ce	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3d0	d0 03		bne $b3d5			bne 	_LCPContinue
.b3d2	20 a7 b4	jsr $b4a7			jsr 	LCLDeleteLastSpace
.b3d5					_LCPContinue:
.b3d5	c8		iny				iny 								; consume character
.b3d6	20 91 b4	jsr $b491			jsr 	LCLWrite 					; write it out.
.b3d9	80 a7		bra $b382			bra 	_LCMainLoop 				; go round again.
.b3db					_LCIdentifiers:
.b3db	18		clc				clc 								; convert to physical address
.b3dc	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3de	85 37		sta $37				sta 	zTemp0+1
.b3e0	c8		iny				iny
.b3e1	b1 30		lda ($30),y			lda 	(codePtr),y
.b3e3	85 36		sta $36				sta 	zTemp0
.b3e5	c8		iny				iny
.b3e6	5a		phy				phy 								; save position
.b3e7	a9 8a		lda #$8a			lda 	#CLIIdentifier+$80
.b3e9	20 91 b4	jsr $b491			jsr 	LCLWrite
.b3ec	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3ee					_LCOutIdentifier:
.b3ee	c8		iny				iny
.b3ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3f1	29 7f		and #$7f			and 	#$7F
.b3f3	20 e3 b4	jsr $b4e3			jsr 	LCLLowerCase
.b3f6	20 91 b4	jsr $b491			jsr 	LCLWrite
.b3f9	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3fb	10 f1		bpl $b3ee			bpl 	_LCOutIdentifier
.b3fd	7a		ply				ply 								; restore position
.b3fe	80 82		bra $b382			bra 	_LCMainLoop
.b400					_LCTokens:
.b400	aa		tax				tax 								; token in X
.b401	a9 58		lda #$58			lda 	#((KeywordSet2) & $FF)
.b403	85 36		sta $36				sta 	0+zTemp0
.b405	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b407	85 37		sta $37				sta 	1+zTemp0
.b409	e0 82		cpx #$82			cpx 	#$82
.b40b	f0 16		beq $b423			beq 	_LCUseShift
.b40d	a9 0a		lda #$0a			lda 	#((KeywordSet1) & $FF)
.b40f	85 36		sta $36				sta 	0+zTemp0
.b411	a9 ba		lda #$ba			lda 	#((KeywordSet1) >> 8)
.b413	85 37		sta $37				sta 	1+zTemp0
.b415	e0 81		cpx #$81			cpx 	#$81
.b417	f0 0a		beq $b423			beq 	_LCUseShift
.b419	a9 25		lda #$25			lda 	#((KeywordSet0) & $FF)
.b41b	85 36		sta $36				sta 	0+zTemp0
.b41d	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b41f	85 37		sta $37				sta 	1+zTemp0
.b421	80 01		bra $b424			bra 	_LCNoShift
.b423					_LCUseShift:
.b423	c8		iny				iny
.b424					_LCNoShift:
.b424	20 bb b4	jsr $b4bb			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.b427	b1 30		lda ($30),y			lda 	(codePtr),y
.b429	aa		tax				tax 								; into X
.b42a					_LCFindText:
.b42a	ca		dex				dex
.b42b	10 0e		bpl $b43b			bpl 	_LCFoundText 				; found text.
.b42d	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b42f	1a		inc a				inc 	a 							; one extra for size
.b430	38		sec				sec 								; one extra for checksum
.b431	65 36		adc $36				adc 	zTemp0 						; go to next token
.b433	85 36		sta $36				sta 	zTemp0
.b435	90 f3		bcc $b42a			bcc 	_LCFindText
.b437	e6 37		inc $37				inc 	zTemp0+1
.b439	80 ef		bra $b42a			bra 	_LCFindText
.b43b					_LCFoundText:
.b43b	5a		phy				phy 								; save List position
.b43c	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b43e	aa		tax				tax
.b43f	a9 83		lda #$83			lda 	#CLIToken+$80
.b441	20 91 b4	jsr $b491			jsr 	LCLWrite
.b444	a0 02		ldy #$02			ldy 	#2
.b446					_LCCopyToken:
.b446	b1 36		lda ($36),y			lda 	(zTemp0),y
.b448	20 e3 b4	jsr $b4e3			jsr 	LCLLowerCase
.b44b	20 91 b4	jsr $b491			jsr 	LCLWrite
.b44e	c8		iny				iny
.b44f	ca		dex				dex
.b450	d0 f4		bne $b446			bne 	_LCCopyToken
.b452	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b454	f0 05		beq $b45b			beq 	_LCNoSpace
.b456	a9 20		lda #$20			lda 	#' '
.b458	20 91 b4	jsr $b491			jsr 	LCLWrite
.b45b					_LCNoSpace:
.b45b	7a		ply				ply 								; restore position.
.b45c	c8		iny				iny 								; consume token
.b45d	4c 82 b3	jmp $b382			jmp 	_LCMainLoop 				; and go around again.
.b460					_LCData:
.b460	48		pha				pha 								; save type $FE/$FF
.b461	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b463	c9 fe		cmp #$fe			cmp 	#$FE
.b465	f0 07		beq $b46e			beq 	_LCHaveOpener
.b467	a2 22		ldx #$22			ldx 	#'"'
.b469	a9 81		lda #$81			lda 	#CLIData+$80
.b46b	20 91 b4	jsr $b491			jsr 	LCLWrite
.b46e					_LCHaveOpener:
.b46e	8a		txa				txa 								; output prefix (# or ")
.b46f	20 91 b4	jsr $b491			jsr 	LCLWrite
.b472	c8		iny				iny 								; get count
.b473	b1 30		lda ($30),y			lda 	(codePtr),y
.b475	aa		tax				tax
.b476	c8		iny				iny 								; point at first character
.b477					_LCOutData:
.b477	b1 30		lda ($30),y			lda 	(codePtr),y
.b479	c9 00		cmp #$00			cmp 	#0
.b47b	f0 03		beq $b480			beq 	_LCNoPrint
.b47d	20 91 b4	jsr $b491			jsr 	LCLWrite
.b480					_LCNoPrint:
.b480	c8		iny				iny
.b481	ca		dex				dex
.b482	d0 f3		bne $b477			bne 	_LCOutData
.b484	68		pla				pla 								; closing " required ?
.b485	c9 ff		cmp #$ff			cmp 	#$FF
.b487	d0 05		bne $b48e			bne 	_LCNoQuote
.b489	a9 22		lda #$22			lda 	#'"'
.b48b	20 91 b4	jsr $b491			jsr 	LCLWrite
.b48e					_LCNoQuote:
.b48e	4c 82 b3	jmp $b382			jmp 	_LCMainLoop
.b491					LCLWrite:
.b491	da		phx				phx
.b492	ae 9d 04	ldx $049d			ldx 	tbOffset
.b495	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b498	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b49b	ee 9d 04	inc $049d			inc 	tbOffset
.b49e	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b4a0	30 03		bmi $b4a5			bmi 	_LCLNoColour
.b4a2	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b4a5					_LCLNoColour:
.b4a5	fa		plx				plx
.b4a6	60		rts				rts
.b4a7					LCLDeleteLastSpace:
.b4a7	48		pha				pha
.b4a8	da		phx				phx
.b4a9	ae 9d 04	ldx $049d			ldx 	tbOffset
.b4ac	f0 0a		beq $b4b8			beq 	_LCDLSExit
.b4ae	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b4b1	c9 20		cmp #$20			cmp 	#' '
.b4b3	d0 03		bne $b4b8			bne 	_LCDLSExit
.b4b5	ce 9d 04	dec $049d			dec 	tbOffset
.b4b8					_LCDLSExit:
.b4b8	fa		plx				plx
.b4b9	68		pla				pla
.b4ba	60		rts				rts
.b4bb					LCLCheckSpaceRequired:
.b4bb	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4be	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4c0	f0 1b		beq $b4dd			beq 	_LCCSRSpace
.b4c2	c9 29		cmp #$29			cmp 	#')'
.b4c4	f0 17		beq $b4dd			beq 	_LCCSRSpace
.b4c6	c9 23		cmp #$23			cmp 	#'#'
.b4c8	f0 13		beq $b4dd			beq 	_LCCSRSpace
.b4ca	20 e3 b4	jsr $b4e3			jsr 	LCLLowerCase 				; saves a little effort
.b4cd	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4cf	90 11		bcc $b4e2			bcc 	_LCCSRExit
.b4d1	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4d3	90 08		bcc $b4dd			bcc 	_LCCSRSpace
.b4d5	c9 61		cmp #$61			cmp 	#"a"
.b4d7	90 09		bcc $b4e2			bcc 	_LCCSRExit
.b4d9	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4db	b0 05		bcs $b4e2			bcs 	_LCCSRExit
.b4dd					_LCCSRSpace:
.b4dd	a9 20		lda #$20			lda 	#' '
.b4df	20 91 b4	jsr $b491			jsr 	LCLWrite
.b4e2					_LCCSRExit:
.b4e2	60		rts				rts
.b4e3					LCLLowerCase:
.b4e3	c9 41		cmp #$41			cmp 	#"A"
.b4e5	90 06		bcc $b4ed			bcc 	_LCLLCOut
.b4e7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4e9	b0 02		bcs $b4ed			bcs 	_LCLLCOut
.b4eb	69 20		adc #$20			adc 	#$20
.b4ed					_LCLLCOut:
.b4ed	60		rts				rts
.b4ee					LCLUpperCase:
.b4ee	c9 61		cmp #$61			cmp 	#"a"
.b4f0	90 06		bcc $b4f8			bcc 	_LCLUCOut
.b4f2	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4f4	b0 02		bcs $b4f8			bcs 	_LCLUCOut
.b4f6	e9 1f		sbc #$1f			sbc 	#$1F
.b4f8					_LCLUCOut:
.b4f8	60		rts				rts
.b4f9					TOKSearchTable:
.b4f9	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4fb	85 36		sta $36				sta 	zTemp0
.b4fd	a0 00		ldy #$00			ldy 	#0
.b4ff	a9 80		lda #$80			lda 	#$80 						; token #
.b501	85 38		sta $38				sta 	zTemp1
.b503					_TSTLoop:
.b503	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b505	30 49		bmi $b550			bmi 	_TSTFail 					; -ve = end of table
.b507	f0 2e		beq $b537			beq 	_TSTNext 					; zero, check next it's a dummy
.b509	c8		iny				iny 								; get the hash
.b50a	b1 36		lda ($36),y			lda 	(zTemp0),y
.b50c	88		dey				dey
.b50d	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b510	d0 25		bne $b537			bne 	_TSTNext
.b512	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b515	38		sec				sec
.b516	ed 80 04	sbc $0480			sbc 	identStart
.b519	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b51b	d0 1a		bne $b537			bne 	_TSTNext
.b51d	5a		phy				phy 								; save Y , we might fail
.b51e	c8		iny				iny 								; point to text
.b51f	c8		iny				iny
.b520	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b523					_TSTCompareName:
.b523	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b526	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b528	d0 0c		bne $b536			bne 	_TSTNextPullY 				; fail, pullY and do next
.b52a	e8		inx				inx
.b52b	c8		iny				iny
.b52c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b52f	d0 f2		bne $b523			bne 	_TSTCompareName
.b531	7a		ply				ply 								; throw Y
.b532	a5 38		lda $38				lda 	zTemp1 						; get token #
.b534	38		sec				sec 								; return with CS = passed.
.b535	60		rts				rts
.b536					_TSTNextPullY:
.b536	7a		ply				ply 								; restore current, fall through.
.b537					_TSTNext:
.b537	e6 38		inc $38				inc 	zTemp1 						; token counter
.b539	98		tya				tya
.b53a	18		clc				clc
.b53b	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b53d	1a		inc a				inc 	a 							; +1
.b53e	1a		inc a				inc 	a 							; +2
.b53f	a8		tay				tay
.b540	10 c1		bpl $b503			bpl 	_TSTLoop 					; if Y < $80 loop back
.b542	98		tya				tya 								; add Y to zTemp0 and reset Y
.b543	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b545	18		clc				clc  								; but have tables > 255 bytes
.b546	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b548	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b54a	90 b7		bcc $b503			bcc 	_TSTLoop
.b54c	e6 37		inc $37				inc 	zTemp0+1
.b54e	80 b3		bra $b503			bra 	_TSTLoop
.b550					_TSTFail:
.b550	18		clc				clc
.b551	60		rts				rts
.b552					TokeniseLine:
.b552	20 da b6	jsr $b6da			jsr 	LCLFixLineBufferCase 		; fix line case
.b555	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b557	8d a8 04	sta $04a8			sta 	tokenOffset
.b55a	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b55d	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b560	a2 ff		ldx #$ff			ldx 	#$FF
.b562					_TKFindFirst:
.b562	e8		inx				inx
.b563	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b566	f0 79		beq $b5e1			beq 	_TKExit
.b568	c9 20		cmp #$20			cmp 	#' '
.b56a	90 f6		bcc $b562			bcc 	_TKFindFirst
.b56c	c9 30		cmp #$30			cmp 	#'0'
.b56e	90 07		bcc $b577			bcc 	_TKNoLineNumber
.b570	c9 3a		cmp #$3a			cmp 	#'9'+1
.b572	b0 03		bcs $b577			bcs 	_TKNoLineNumber
.b574	20 04 b7	jsr $b704			jsr 	TOKExtractLineNumber
.b577					_TKNoLineNumber:
.b577					_TKTokeniseLoop:
.b577	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b57a	f0 65		beq $b5e1			beq 	_TKExit
.b57c	e8		inx				inx
.b57d	c9 20		cmp #$20			cmp 	#' '
.b57f	f0 f6		beq $b577			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b581	ca		dex				dex 								; undo last get, A contains character, X is position.
.b582	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b584	f0 61		beq $b5e7			beq 	_TKTokeniseIdentifier
.b586	c9 41		cmp #$41			cmp 	#'A'
.b588	90 04		bcc $b58e			bcc 	_TKTokenisePunctuation
.b58a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b58c	90 59		bcc $b5e7			bcc 	_TKTokeniseIdentifier
.b58e					_TKTokenisePunctuation:
.b58e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b590	f0 27		beq $b5b9			beq 	_TKString
.b592	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b594	f0 28		beq $b5be			beq 	_TKHexConstant
.b596	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b598	f0 29		beq $b5c3			beq 	_TKCheckDouble
.b59a	c9 3e		cmp #$3e			cmp 	#'>'
.b59c	f0 25		beq $b5c3			beq 	_TKCheckDouble
.b59e					_TKStandardPunctuation:
.b59e	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b5a1	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b5a3	90 0e		bcc $b5b3			bcc 	_TKNoShift
.b5a5	48		pha				pha 								; save
.b5a6	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b5a8	85 36		sta $36				sta 	zTemp0
.b5aa	68		pla				pla
.b5ab	29 20		and #$20			and 	#32 						; bit 5
.b5ad	4a		lsr a				lsr 	a 							; shift into bit 3
.b5ae	4a		lsr a				lsr 	a
.b5af	05 36		ora $36				ora 	zTemp0
.b5b1	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b5b3					_TKNoShift:
.b5b3	20 49 b7	jsr $b749			jsr 	TOKWriteByte 				; write the punctuation character
.b5b6	e8		inx				inx 								; consume the character
.b5b7	80 be		bra $b577			bra 	_TKTokeniseLoop 			; and loop round again.
.b5b9					_TKString:
.b5b9	20 69 b6	jsr $b669			jsr 	TOKTokenString
.b5bc	80 b9		bra $b577			bra 	_TKTokeniseLoop
.b5be					_TKHexConstant:
.b5be	20 a4 b6	jsr $b6a4			jsr 	TOKHexConstant
.b5c1	80 b4		bra $b577			bra 	_TKTokeniseLoop
.b5c3					_TKCheckDouble:
.b5c3	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5c6	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5c8	90 d4		bcc $b59e			bcc 	_TKStandardPunctuation
.b5ca	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5cc	b0 d0		bcs $b59e			bcs 	_TKStandardPunctuation
.b5ce	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5d1	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5d3	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5d4	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5d7	38		sec				sec
.b5d8	e9 3c		sbc #$3c			sbc 	#'<'
.b5da	20 49 b7	jsr $b749			jsr 	TOKWriteByte 				; this is in the range 0-7
.b5dd	e8		inx				inx 								; consume both
.b5de	e8		inx				inx
.b5df	80 96		bra $b577			bra 	_TKTokeniseLoop
.b5e1	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5e3	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b5e6	60		rts				rts
.b5e7					_TKTokeniseIdentifier:
.b5e7	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5ea	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5ed					_TKCheckLoop:
.b5ed	e8		inx				inx 								; look at next, we know first is identifier.
.b5ee	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5f1	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5f3	f0 f8		beq $b5ed			beq 	_TKCheckLoop
.b5f5	c9 30		cmp #$30			cmp	 	#"0"
.b5f7	90 0c		bcc $b605			bcc 	_TKEndIdentifier
.b5f9	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5fb	90 f0		bcc $b5ed			bcc 	_TKCheckLoop
.b5fd	c9 41		cmp #$41			cmp	 	#"A"
.b5ff	90 04		bcc $b605			bcc 	_TKEndIdentifier
.b601	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b603	90 e8		bcc $b5ed			bcc 	_TKCheckLoop
.b605					_TKEndIdentifier:
.b605	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b608	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b60a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b60c	f0 06		beq $b614			beq 	_TKHasTypeCharacter
.b60e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b610	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b612	d0 07		bne $b61b			bne 	_TKNoTypeCharacter
.b614					_TKHasTypeCharacter:
.b614	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b617	e8		inx				inx 								; read next
.b618	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b61b					_TKNoTypeCharacter:
.b61b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b61d	d0 09		bne $b628			bne 	_TKNoArray
.b61f	e8		inx				inx 								; skip the (
.b620	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b623	09 04		ora #$04			ora 	#$04
.b625	8d 84 04	sta $0484			sta 	identTypeByte
.b628					_TKNoArray:
.b628	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b62b	20 c5 b6	jsr $b6c5			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.b62e	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b630	a9 25		lda #$25			lda 	#(KeywordSet0) & $FF
.b632	20 f9 b4	jsr $b4f9			jsr 	TOKSearchTable
.b635	a2 00		ldx #$00			ldx 	#0
.b637	b0 1f		bcs $b658			bcs 	_TKFoundToken
.b639	a0 ba		ldy #$ba			ldy 	#(KeywordSet1) >> 8
.b63b	a9 0a		lda #$0a			lda 	#(KeywordSet1) & $FF
.b63d	20 f9 b4	jsr $b4f9			jsr 	TOKSearchTable
.b640	a2 81		ldx #$81			ldx 	#$81
.b642	b0 14		bcs $b658			bcs 	_TKFoundToken
.b644	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b646	a9 58		lda #$58			lda 	#(KeywordSet2) & $FF
.b648	20 f9 b4	jsr $b4f9			jsr 	TOKSearchTable
.b64b	a2 82		ldx #$82			ldx 	#$82
.b64d	b0 09		bcs $b658			bcs 	_TKFoundToken
.b64f	20 55 b7	jsr $b755			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.b652	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b655	4c 77 b5	jmp $b577			jmp 	_TKTokeniseLoop 			; and go round again.
.b658					_TKFoundToken:
.b658	48		pha				pha 								; save token
.b659	8a		txa				txa 								; shift in X, is there one ?
.b65a	f0 03		beq $b65f			beq 	_TKNoTShift
.b65c	20 49 b7	jsr $b749			jsr 	TOKWriteByte 				; if so, write it out
.b65f					_TKNoTShift:
.b65f	68		pla				pla 								; restore and write token
.b660	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b663	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b666	4c 77 b5	jmp $b577			jmp 	_TKTokeniseLoop 			; and go round again.
.b669					TOKTokenString:
.b669	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b66b	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b66e	e8		inx				inx									; start of quoted string.
.b66f	da		phx				phx 								; push start of string on top
.b670	ca		dex				dex
.b671					_TSFindEnd:
.b671	e8		inx				inx
.b672	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b675	f0 04		beq $b67b			beq 	_TSEndOfString
.b677	c9 22		cmp #$22			cmp 	#'"'
.b679	d0 f6		bne $b671			bne 	_TSFindEnd
.b67b					_TSEndOfString:
.b67b	7a		ply				ply  								; so now Y is first character, X is character after end.
.b67c	48		pha				pha 								; save terminating character
.b67d	20 85 b6	jsr $b685			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.b680	68		pla				pla 								; terminating character
.b681	f0 01		beq $b684			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b683	e8		inx				inx
.b684					_TSNotQuote:
.b684	60		rts				rts
.b685					TOKWriteBlockXY:
.b685	86 36		stx $36				stx 	zTemp0 						; write end character
.b687	98		tya				tya
.b688	49 ff		eor #$ff			eor 	#$FF
.b68a	38		sec				sec
.b68b	65 36		adc $36				adc 	zTemp0
.b68d	1a		inc a				inc 	a 							; one extra for NULL
.b68e	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b691					_TOBlockLoop:
.b691	c4 36		cpy $36				cpy 	zTemp0
.b693	f0 09		beq $b69e			beq 	_TOBlockExit
.b695	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b698	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b69b	c8		iny				iny
.b69c	80 f3		bra $b691			bra 	_TOBlockLoop
.b69e					_TOBlockExit:
.b69e	a9 00		lda #$00			lda 	#0
.b6a0	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b6a3	60		rts				rts
.b6a4					TOKHexConstant:
.b6a4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b6a6	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b6a9	e8		inx				inx									; start of quoted string.
.b6aa	da		phx				phx 								; push start of constant on top
.b6ab	ca		dex				dex
.b6ac					_THFindLoop:
.b6ac	e8		inx				inx
.b6ad	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b6b0	c9 30		cmp #$30			cmp 	#"0"
.b6b2	90 0c		bcc $b6c0			bcc 	_THFoundEnd
.b6b4	c9 3a		cmp #$3a			cmp 	#"9"+1
.b6b6	90 f4		bcc $b6ac			bcc 	_THFindLoop
.b6b8	c9 41		cmp #$41			cmp 	#"A"
.b6ba	90 04		bcc $b6c0			bcc 	_THFoundEnd
.b6bc	c9 47		cmp #$47			cmp 	#"F"+1
.b6be	90 ec		bcc $b6ac			bcc 	_THFindLoop
.b6c0					_THFoundEnd:
.b6c0	7a		ply				ply 								; restore start
.b6c1	20 85 b6	jsr $b685			jsr 	TOKWriteBlockXY 			; output the block
.b6c4	60		rts				rts
.b6c5					TOKCalculateHash:
.b6c5	da		phx				phx
.b6c6	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6c9	a9 00		lda #$00			lda 	#0
.b6cb					_TCHLoop:
.b6cb	18		clc				clc
.b6cc	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6cf	e8		inx				inx
.b6d0	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6d3	d0 f6		bne $b6cb			bne 	_TCHLoop
.b6d5	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6d8	fa		plx				plx
.b6d9	60		rts				rts
.b6da					LCLFixLineBufferCase:
.b6da	a2 00		ldx #$00			ldx 	#0
.b6dc					_FLBCLoop:
.b6dc	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6df	f0 22		beq $b703			beq 	_FLBCExit 					; end of string.
.b6e1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6e3	f0 11		beq $b6f6			beq 	_FLBCInQuotes
.b6e5	e8		inx				inx
.b6e6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6e8	90 f2		bcc $b6dc			bcc 	_FLBCLoop
.b6ea	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6ec	b0 ee		bcs $b6dc			bcs 	_FLBCLoop
.b6ee	38		sec				sec 								; make U/C
.b6ef	e9 20		sbc #$20			sbc 	#32
.b6f1	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6f4	80 e6		bra $b6dc			bra 	_FLBCLoop
.b6f6					_FLBCInQuotes:
.b6f6	e8		inx				inx 								; advance
.b6f7	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6fa	f0 07		beq $b703			beq 	_FLBCExit 					; exit on EOS
.b6fc	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6fe	d0 f6		bne $b6f6			bne 	_FLBCInQuotes
.b700	e8		inx				inx 								; skip over it
.b701	80 d9		bra $b6dc			bra 	_FLBCLoop
.b703					_FLBCExit:
.b703	60		rts				rts
.b704					TOKExtractLineNumber:
.b704	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b707	48		pha				pha
.b708	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b70b	48		pha				pha
.b70c	20 42 b7	jsr $b742			jsr 	_LCLNTimes2 				; line # x 4
.b70f	20 42 b7	jsr $b742			jsr 	_LCLNTimes2 				; line # x 2
.b712	18		clc				clc 								; add stacked value
.b713	68		pla				pla
.b714	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b717	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b71a	68		pla				pla
.b71b	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b71e	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b721	20 42 b7	jsr $b742			jsr 	_LCLNTimes2 				; line # x 10
.b724	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b727	e8		inx				inx
.b728	29 0f		and #$0f			and 	#15 						; add to line #
.b72a	18		clc				clc
.b72b	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b72e	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b731	90 03		bcc $b736			bcc 	_TLENNoCarry
.b733	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b736					_TLENNoCarry:
.b736	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b739	c9 30		cmp #$30			cmp 	#'0'
.b73b	90 04		bcc $b741			bcc 	_TLENExit
.b73d	c9 3a		cmp #$3a			cmp 	#'9'+1
.b73f	90 c3		bcc $b704			bcc 	TOKExtractLineNumber
.b741					_TLENExit:
.b741	60		rts				rts
.b742					_LCLNTimes2:
.b742	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b745	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b748	60		rts				rts
.b749					TOKWriteByte:
.b749	da		phx				phx
.b74a	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b74d	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b750	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b753	fa		plx				plx
.b754	60		rts				rts
.b755					TOKCheckCreateVariableRecord:
.b755	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b757	85 36		sta $36				sta 	0+zTemp0
.b759	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b75b	85 37		sta $37				sta 	1+zTemp0
.b75d					_CCVSearch:
.b75d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b75f	f0 2c		beq $b78d			beq 	_CCVFail
.b761	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b763	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b765	cd 83 04	cmp $0483			cmp 	identHash
.b768	d0 16		bne $b780			bne 	_CCVNext
.b76a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b76c	ae 80 04	ldx $0480			ldx 	identStart
.b76f					_CCVCompare:
.b76f	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b772	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b774	e8		inx				inx 								; advance pointers
.b775	c8		iny				iny
.b776	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b777	d0 07		bne $b780			bne 	_CCVNext  					; didn't match go to next.
.b779	90 f4		bcc $b76f			bcc 	_CCVCompare 				; not finished yet.
.b77b	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b77e	f0 41		beq $b7c1			beq 	_CCVFound 					; yes, we were successful
.b780					_CCVNext:
.b780	18		clc				clc
.b781	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b783	65 36		adc $36				adc 	zTemp0
.b785	85 36		sta $36				sta 	zTemp0
.b787	90 d4		bcc $b75d			bcc 	_CCVSearch
.b789	e6 37		inc $37				inc 	zTemp0+1
.b78b	80 d0		bra $b75d			bra 	_CCVSearch
.b78d					_CCVFail:
.b78d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b78f	ad 83 04	lda $0483			lda 	identHash
.b792	91 36		sta ($36),y			sta 	(zTemp0),y
.b794	c8		iny				iny 								; offset 2 is the type byte
.b795	ad 84 04	lda $0484			lda 	identTypeByte
.b798	91 36		sta ($36),y			sta 	(zTemp0),y
.b79a	c8		iny				iny
.b79b					_CCVData:
.b79b	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b79d	91 36		sta ($36),y			sta 	(zTemp0),y
.b79f	c8		iny				iny
.b7a0	c0 08		cpy #$08			cpy 	#8
.b7a2	90 f7		bcc $b79b			bcc 	_CCVData
.b7a4	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b7a7					_CCVCopyName:
.b7a7	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b7aa	91 36		sta ($36),y			sta 	(zTemp0),y
.b7ac	e8		inx				inx
.b7ad	c8		iny				iny
.b7ae	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b7b1	d0 f4		bne $b7a7			bne 	_CCVCopyName
.b7b3	98		tya				tya 								; patch offset
.b7b4	92 36		sta ($36)			sta 	(zTemp0)
.b7b6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b7b8	91 36		sta ($36),y			sta 	(zTemp0),y
.b7ba	88		dey				dey
.b7bb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7bd	09 80		ora #$80			ora 	#$80
.b7bf	91 36		sta ($36),y			sta 	(zTemp0),y
.b7c1					_CCVFound:
.b7c1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7c3	38		sec				sec
.b7c4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7c6	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7c8	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b7cb	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7cd	20 49 b7	jsr $b749			jsr 	TOKWriteByte
.b7d0	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
