
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 09:36:29 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 9c 92	jsr $929c			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 49 84	jsr $8449			jsr 	RunDemos
.8013	20 7f 8c	jsr $8c7f			jsr 	NewCommand 					; erase current program
.8016	20 21 9f	jsr $9f21			jsr 	BackloadProgram
.8019	4c db 87	jmp $87db			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 866."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 38 36 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8080	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxEORValue:
>063b							.fill 	1
.063c					gxANDValue:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1
.063f					gsOffset:
>063f							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8083					GXClearBitmap:
.8083	48		pha				pha
.8084	5a		phy				phy
.8085	20 a4 84	jsr $84a4			jsr 	GXOpenBitmap 				; start access
.8088	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.808a	ad 3a 06	lda $063a			lda 	gxHeight
.808d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.808f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8091					_GXCalcLastPage:
.8091	98		tya				tya 								; add to base page
.8092	18		clc				clc
.8093	6d 39 06	adc $0639			adc 	gxBasePage
.8096	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8098					_GXClearAll:
.8098	20 aa 80	jsr $80aa			jsr 	_GXClearBlock 				; clear 8k block
.809b	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.809d	a5 0b		lda $0b				lda 	GFXEditSlot
.809f	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a2	b0 f4		bcs $8098			bcs 	_GXClearAll
.80a4	20 b5 84	jsr $84b5			jsr 	GXCloseBitmap	 			; stop access
.80a7	7a		ply				ply
.80a8	68		pla				pla
.80a9	60		rts				rts
.80aa					_GXClearBlock:
.80aa	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80ac	85 38		sta $38				sta 	0+gzTemp1
.80ae	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.80b0	85 39		sta $39				sta 	1+gzTemp1
.80b2					_GXCB0:
.80b2	a5 36		lda $36				lda 	gzTemp0
.80b4	a0 00		ldy #$00			ldy 	#0
.80b6					_GXCB1:
.80b6	91 38		sta ($38),y			sta 	(gzTemp1),y
.80b8	c8		iny				iny
.80b9	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bb	c8		iny				iny
.80bc	91 38		sta ($38),y			sta 	(gzTemp1),y
.80be	c8		iny				iny
.80bf	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c1	c8		iny				iny
.80c2	d0 f2		bne $80b6			bne 	_GXCB1
.80c4	e6 39		inc $39				inc 	gzTemp1+1
.80c6	a5 39		lda $39				lda 	gzTemp1+1
.80c8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.80ca	d0 e6		bne $80b2			bne 	_GXCB0
.80cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/ellipse.asm

.80cd					GXFillEllipse:
.80cd	a9 ff		lda #$ff			lda 	#255
.80cf	80 02		bra $80d3			bra 	GXEllipse
.80d1					GXFrameEllipse:
.80d1	a9 00		lda #$00			lda 	#0
.80d3					GXEllipse:
.80d3	8d 43 06	sta $0643			sta 	gIsFillMode					; save Fill flag
.80d6	20 2d 85	jsr $852d			jsr 	GXSortXY 					; topleft/bottomright
.80d9	20 a4 84	jsr $84a4			jsr 	GXOpenBitmap 				; start drawing
.80dc	20 b7 81	jsr $81b7			jsr 	GXEllipseSetup 				; set up for drawing
.80df					_GXEllipseDraw:
.80df	ad 41 06	lda $0641			lda 	gX 							; while x <= y
.80e2	cd 42 06	cmp $0642			cmp 	gY
.80e5	f0 06		beq $80ed			beq 	_GXEllipseContinue
.80e7	90 04		bcc $80ed			bcc 	_GXEllipseContinue
.80e9	20 b5 84	jsr $84b5			jsr 	GXCloseBitmap 				; close the bitmap
.80ec	60		rts				rts
.80ed					_GXEllipseContinue:
.80ed	20 f5 80	jsr $80f5			jsr 	GXPlot2 					; draw it
.80f0	20 64 81	jsr $8164			jsr 	GXEllipseMove 				; adjust the coordinates
.80f3	80 ea		bra $80df			bra 	_GXEllipseDraw
.80f5					GXPlot2:
.80f5	20 f8 80	jsr $80f8			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80f8					GXPlot1:
.80f8	20 13 81	jsr $8113			jsr 	GXPlot0 						; plot and negate
.80fb	20 13 81	jsr $8113			jsr 	GXPlot0 						; twice, undoing negation
.80fe	ad 41 06	lda $0641			lda 	gX 								; swap X and Y
.8101	ae 42 06	ldx $0642			ldx	 	gY
.8104	8d 42 06	sta $0642			sta 	gY
.8107	8e 41 06	stx $0641			stx 	gX
.810a	ad 44 06	lda $0644			lda 	gYChanged 						; toggle Y Changed flag
.810d	a9 ff		lda #$ff			lda 	#$FF
.810f	8d 44 06	sta $0644			sta 	gYChanged
.8112	60		rts				rts
.8113					GXPlot0:
.8113	ad 44 06	lda $0644			lda 	gYChanged
.8116	f0 24		beq $813c			beq 	_GXPlot0Exit
.8118	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.811a	ad 42 06	lda $0642			lda 	gY
.811d	20 46 81	jsr $8146			jsr 	_GXSubCopy
.8120	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8122	ad 41 06	lda $0641			lda 	gX
.8125	20 46 81	jsr $8146			jsr 	_GXSubCopy
.8128	48		pha				pha 									; save last offset X
.8129	20 c2 84	jsr $84c2			jsr 	GXPositionCalc 					; calculate position/offset.
.812c	68		pla				pla
.812d	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.812e	85 36		sta $36				sta 	gzTemp0
.8130	64 37		stz $37				stz 	gzTemp0+1
.8132	26 37		rol $37				rol 	gzTemp0+1
.8134	ad 43 06	lda $0643			lda 	gIsFillMode
.8137	69 80		adc #$80			adc 	#128
.8139	20 73 83	jsr $8373			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.813c					_GXPlot0Exit:
.813c	38		sec				sec 									; GY = -GY
.813d	a9 00		lda #$00			lda 	#0
.813f	ed 42 06	sbc $0642			sbc 	gY
.8142	8d 42 06	sta $0642			sta 	gY
.8145	60		rts				rts
.8146					_GXSubCopy:
.8146	85 36		sta $36				sta 	gzTemp0
.8148	64 37		stz $37				stz 	gzTemp0+1
.814a	29 80		and #$80			and 	#$80
.814c	f0 02		beq $8150			beq 	_GXNoSx
.814e	c6 37		dec $37				dec 	gzTemp0+1
.8150					_GXNoSx:
.8150	38		sec				sec
.8151	bd 35 06	lda $0635,x			lda 	gXX1,x
.8154	e5 36		sbc $36				sbc 	gzTemp0
.8156	9d 31 06	sta $0631,x			sta 	gXX0,x
.8159	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.815c	e5 37		sbc $37				sbc 	gzTemp0+1
.815e	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.8161	a5 36		lda $36				lda 	gzTemp0 						; return A
.8163	60		rts				rts
.8164					GXEllipseMove:
.8164	9c 44 06	stz $0644			stz 	gYChanged 					; clear Y changed flag
.8167	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8169	10 0d		bpl $8178			bpl 	_GXEMPositive
.816b	ee 41 06	inc $0641			inc 	gX 							; X++
.816e	ad 41 06	lda $0641			lda 	gX
.8171	20 97 81	jsr $8197			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8174	a9 06		lda #$06			lda 	#6  						; and add 6
.8176	80 15		bra $818d			bra 	_GXEMAddD
.8178					_GXEMPositive:
.8178	ee 41 06	inc $0641			inc 	gX 							; X++
.817b	ce 42 06	dec $0642			dec 	gy 							; Y--
.817e	38		sec				sec 								; calculate X-Y
.817f	ad 41 06	lda $0641			lda 	gX
.8182	ed 42 06	sbc $0642			sbc 	gY
.8185	20 97 81	jsr $8197			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8188	a9 0a		lda #$0a			lda 	#10  						; and add 10
.818a	ce 44 06	dec $0644			dec 	gYChanged
.818d					_GXEMAddD:
.818d	18		clc				clc
.818e	65 38		adc $38				adc 	gzTemp1
.8190	85 38		sta $38				sta 	gzTemp1
.8192	90 02		bcc $8196			bcc 	_GXEMNoCarry
.8194	e6 39		inc $39				inc 	gzTemp1+1
.8196					_GXEMNoCarry:
.8196	60		rts				rts
.8197					_GXAdd4TimesToD:
.8197	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8199	29 80		and #$80			and 	#$80
.819b	f0 02		beq $819f			beq 	_GXA4Unsigned
.819d	a9 ff		lda #$ff			lda 	#$FF
.819f					_GXA4Unsigned:
.819f	85 37		sta $37				sta 	gzTemp0+1
.81a1	06 36		asl $36				asl 	gzTemp0  					; x 4
.81a3	26 37		rol $37				rol 	gzTemp0+1
.81a5	06 36		asl $36				asl 	gzTemp0
.81a7	26 37		rol $37				rol 	gzTemp0+1
.81a9	18		clc				clc 								; add
.81aa	a5 36		lda $36				lda		gzTemp0
.81ac	65 38		adc $38				adc 	gzTemp1
.81ae	85 38		sta $38				sta 	gzTemp1
.81b0	a5 37		lda $37				lda		gzTemp0+1
.81b2	65 39		adc $39				adc 	gzTemp1+1
.81b4	85 39		sta $39				sta 	gzTemp1+1
.81b6	60		rts				rts
.81b7					GXEllipseSetup:
.81b7	38		sec				sec
.81b8	ad 37 06	lda $0637			lda 	gxY1
.81bb	ed 33 06	sbc $0633			sbc 	gxY0
.81be	4a		lsr a				lsr 	a
.81bf	8d 40 06	sta $0640			sta 	gRadius
.81c2	a2 00		ldx #$00			ldx 	#0
.81c4	20 e6 81	jsr $81e6			jsr 	_GXCalculateCentre
.81c7	a2 02		ldx #$02			ldx 	#2
.81c9	20 e6 81	jsr $81e6			jsr 	_GXCalculateCentre
.81cc	9c 41 06	stz $0641			stz 	gX
.81cf	ad 40 06	lda $0640			lda 	gRadius
.81d2	8d 42 06	sta $0642			sta 	gY
.81d5	0a		asl a				asl 	a 							; R x 2
.81d6	85 36		sta $36				sta 	gzTemp0
.81d8	38		sec				sec
.81d9	a9 03		lda #$03			lda 	#3
.81db	e5 36		sbc $36				sbc 	gzTemp0
.81dd	85 38		sta $38				sta 	gzTemp1
.81df	a9 00		lda #$00			lda 	#0
.81e1	e9 00		sbc #$00			sbc 	#0
.81e3	85 39		sta $39				sta 	gzTemp1+1
.81e5	60		rts				rts
.81e6					_GXCalculateCentre:
.81e6	38		sec				sec
.81e7	bd 35 06	lda $0635,x			lda 	gxX1,x
.81ea	7d 31 06	adc $0631,x			adc 	gXX0,x
.81ed	9d 35 06	sta $0635,x			sta 	gXX1,x
.81f0	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81f3	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81f6	4a		lsr a				lsr 	a
.81f7	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81fa	7e 35 06	ror $0635,x			ror 	gXX1,x
.81fd	60		rts				rts
.0640					gRadius:
>0640							.fill 	1
.0641					gX:
>0641							.fill 	1
.0642					gY:
>0642							.fill 	1
.0643					gIsFillMode:
>0643							.fill 	1
.0644					gYChanged:
>0644							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.81fe					GXLine:
.81fe	20 a4 84	jsr $84a4			jsr 	GXOpenBitmap
.8201	20 4b 85	jsr $854b			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8204	20 c9 82	jsr $82c9			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8207	20 c2 84	jsr $84c2			jsr 	GXPositionCalc 				; calculate position/offset.
.820a					_GXDrawLoop:
.820a	ac 3f 06	ldy $063f			ldy 	gsOffset 					; draw the pixel
.820d	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.820f	2d 3c 06	and $063c			and 	gxANDValue
.8212	4d 3b 06	eor $063b			eor 	gxEORValue
.8215	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8217	20 25 82	jsr $8225			jsr 	GXLineIsComplete 			; is the line complete ?
.821a	f0 05		beq $8221			beq 	_GXLExit
.821c	20 40 82	jsr $8240			jsr 	GXLineAdvance 				; code as per advance method
.821f	80 e9		bra $820a			bra 	_GXDrawLoop
.8221					_GXLExit:
.8221	20 b5 84	jsr $84b5			jsr 	GXCloseBitmap
.8224	60		rts				rts
.8225					GXLineIsComplete:
.8225	ad 47 06	lda $0647			lda 	GXIsDiffYLarger 			; is dy larger
.8228	d0 0f		bne $8239			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.822a	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.822d	4d 35 06	eor $0635			eor 	GXX1
.8230	d0 06		bne $8238			bne 	_GXLICExit
.8232	ad 32 06	lda $0632			lda 	GXX0+1
.8235	4d 36 06	eor $0636			eor 	GXX1+1
.8238					_GXLICExit:
.8238	60		rts				rts
.8239					_GXLICCompareY:
.8239	ad 37 06	lda $0637			lda 	GXY1
.823c	4d 33 06	eor $0633			eor 	GXY0
.823f	60		rts				rts
.8240					GXLineAdvance:
.8240	18		clc				clc 								; add adjust to position
.8241	ad 49 06	lda $0649			lda 	GXPosition
.8244	6d 4a 06	adc $064a			adc 	GXAdjust
.8247	8d 49 06	sta $0649			sta 	GXPosition
.824a	9c 4c 06	stz $064c			stz 	GXAddSelect 				; clear add select flag
.824d	b0 05		bcs $8254			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.824f	cd 4b 06	cmp $064b			cmp 	GXTotal 					; if exceeded total
.8252	90 0a		bcc $825e			bcc 	_GXLANoExtra
.8254					_GXLAOverflow:
.8254	ce 4c 06	dec $064c			dec 	GXAddSelect 				; set addselect to $FF
.8257	38		sec				sec 								; subtract total and write back
.8258	ed 4b 06	sbc $064b			sbc 	GXTotal
.825b	8d 49 06	sta $0649			sta 	GXPosition
.825e					_GXLANoExtra:
.825e	ad 47 06	lda $0647			lda 	GXIsDiffYLarger
.8261	f0 0d		beq $8270			beq 	_GXDXLarger
.8263	20 c2 82	jsr $82c2			jsr 	GXIncrementY
.8266	ad 4c 06	lda $064c			lda 	GXAddSelect
.8269	f0 10		beq $827b			beq 	_GXLAExit
.826b	20 7c 82	jsr $827c			jsr 	GXAdjustX
.826e	80 0b		bra $827b			bra 	_GXLAExit
.8270					_GXDXLarger:
.8270	20 7c 82	jsr $827c			jsr 	GXAdjustX
.8273	ad 4c 06	lda $064c			lda 	GXAddSelect
.8276	f0 03		beq $827b			beq 	_GXLAExit
.8278	20 c2 82	jsr $82c2			jsr 	GXIncrementY
.827b					_GXLAExit:
.827b	60		rts				rts
.827c					GXAdjustX:
.827c	ad 48 06	lda $0648			lda 	GXDXNegative
.827f	10 25		bpl $82a6			bpl 	_GXAXRight
.8281	ad 31 06	lda $0631			lda 	GXX0
.8284	d0 03		bne $8289			bne 	_GXAXNoBorrow
.8286	ce 32 06	dec $0632			dec 	GXX0+1
.8289					_GXAXNoBorrow:
.8289	ce 31 06	dec $0631			dec 	GXX0
.828c	ce 3f 06	dec $063f			dec 	gsOffset 					; pixel left
.828f	ad 3f 06	lda $063f			lda 	gsOffset
.8292	c9 ff		cmp #$ff			cmp 	#$FF
.8294	d0 0f		bne $82a5			bne 	_GXAYExit 					; underflow
.8296	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.8298	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.829a	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.829c	b0 07		bcs $82a5			bcs 	_GXAYExit
.829e	18		clc				clc
.829f	69 20		adc #$20			adc 	#$20 						; fix up
.82a1	85 3b		sta $3b				sta 	gsTemp+1
.82a3	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82a5					_GXAYExit:
.82a5	60		rts				rts
.82a6					_GXAXRight:
.82a6	ee 31 06	inc $0631			inc 	GXX0
.82a9	d0 03		bne $82ae			bne 	_GXAXNoCarry
.82ab	ee 32 06	inc $0632			inc 	GXX0+1
.82ae					_GXAXNoCarry:
.82ae	ee 3f 06	inc $063f			inc 	gsOffset 					; pixel right
.82b1	d0 0e		bne $82c1			bne 	_GXAXExit 					; if not overflowed, exit.
.82b3	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.82b5	a5 3b		lda $3b				lda 	gsTemp+1
.82b7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82b9	90 06		bcc $82c1			bcc 	_GXAXExit
.82bb	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82bd	85 3b		sta $3b				sta 	gsTemp+1
.82bf	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82c1					_GXAXExit:
.82c1	60		rts				rts
.82c2					GXIncrementY:
.82c2	ee 33 06	inc $0633			inc 	GXY0
.82c5	20 12 85	jsr $8512			jsr 	GXMovePositionDown
.82c8	60		rts				rts
.82c9					GXLineSetup:
.82c9	ad 37 06	lda $0637			lda 	GXY1
.82cc	38		sec				sec
.82cd	ed 33 06	sbc $0633			sbc 	GXY0
.82d0	4a		lsr a				lsr 	a
.82d1	8d 46 06	sta $0646			sta 	GXDiffY
.82d4	9c 48 06	stz $0648			stz 	GXDXNegative 				; clear -ve flag
.82d7	38		sec				sec
.82d8	ad 35 06	lda $0635			lda 	GXX1
.82db	ed 31 06	sbc $0631			sbc 	GXX0
.82de	8d 45 06	sta $0645			sta 	GXDiffX
.82e1	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82e4	ed 32 06	sbc $0632			sbc 	GXX0+1
.82e7	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82e8	6e 45 06	ror $0645			ror 	GXDiffX
.82eb	0a		asl a				asl 	a
.82ec	10 0c		bpl $82fa			bpl 	_GDXNotNegative
.82ee	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.82f0	38		sec				sec
.82f1	ed 45 06	sbc $0645			sbc 	GXDiffX
.82f4	8d 45 06	sta $0645			sta 	GXDiffX
.82f7	ce 48 06	dec $0648			dec 	GXDXNegative 				; -ve flag = $FF.
.82fa					_GDXNotNegative:
.82fa	9c 47 06	stz $0647			stz 	GXIsDiffYLarger 			; clear larger flag
.82fd	ad 46 06	lda $0646			lda 	GXDiffY 					; set adjust and total.
.8300	8d 4a 06	sta $064a			sta 	GXAdjust
.8303	ad 45 06	lda $0645			lda 	GXDiffX
.8306	8d 4b 06	sta $064b			sta 	GXTotal
.8309	ad 46 06	lda $0646			lda 	GXDiffY 					; if dy > dx
.830c	cd 45 06	cmp $0645			cmp 	GXDiffX
.830f	90 0f		bcc $8320			bcc 	_GDXNotLarger
.8311	ce 47 06	dec $0647			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8314	ad 45 06	lda $0645			lda 	GXDiffX 					; set adjust and total other way round
.8317	8d 4a 06	sta $064a			sta 	GXAdjust
.831a	ad 46 06	lda $0646			lda 	GXDiffY
.831d	8d 4b 06	sta $064b			sta 	GXTotal
.8320					_GDXNotLarger:
.8320	ad 4b 06	lda $064b			lda 	GXTotal
.8323	4a		lsr a				lsr 	a
.8324	8d 49 06	sta $0649			sta 	GXPosition
.8327	60		rts				rts
.0645					GXDiffX:
>0645							.fill 	1
.0646					GXDiffY:
>0646							.fill 	1
.0647					GXIsDiffYLarger:
>0647							.fill 	1
.0648					GXDXNegative:
>0648							.fill 	1
.0649					GXPosition:
>0649							.fill 	1
.064a					GXAdjust:
>064a							.fill 	1
.064b					GXTotal:
>064b							.fill 	1
.064c					GXAddSelect:
>064c							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.8328					GXFillRectangle:
.8328	38		sec				sec
.8329	80 01		bra $832c			bra 	GXRectangle
.832b					GXFrameRectangle:
.832b	18		clc				clc
.832c					GXRectangle:
.832c	08		php				php 								; save Fill flag (CS)
.832d	20 a4 84	jsr $84a4			jsr 	GXOpenBitmap 				; start drawing
.8330	20 2d 85	jsr $852d			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8333	20 c2 84	jsr $84c2			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.8336	38		sec				sec 								; sec = Draw line
.8337	20 60 83	jsr $8360			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.833a	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.833d	cd 37 06	cmp $0637			cmp 	gxY1
.8340	f0 19		beq $835b			beq 	_GXRectangleExit
.8342					_GXRectLoop:
.8342	20 12 85	jsr $8512			jsr 	GXMovePositionDown 			; down one.
.8345	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.8348	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.834b	cd 37 06	cmp $0637			cmp 	gXY1
.834e	f0 07		beq $8357			beq 	_GXLastLine
.8350	28		plp				plp 								; get flag back
.8351	08		php				php
.8352	20 60 83	jsr $8360			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8355	80 eb		bra $8342			bra 	_GXRectLoop
.8357					_GXLastLine:
.8357	38		sec				sec
.8358	20 60 83	jsr $8360			jsr 	GXDrawLineX1X0
.835b					_GXRectangleExit:
.835b	68		pla				pla 								; throw fill flag.
.835c	20 b5 84	jsr $84b5			jsr 	GXCloseBitmap 				; stop drawing and exit
.835f	60		rts				rts
.8360					GXDrawLineX1X0:
.8360	08		php				php 								; save solid/either-end
.8361	38		sec				sec
.8362	ad 35 06	lda $0635			lda		gXX1
.8365	ed 31 06	sbc $0631			sbc 	gXX0
.8368	85 36		sta $36				sta 	gzTemp0
.836a	ad 36 06	lda $0636			lda 	gXX1+1
.836d	ed 32 06	sbc $0632			sbc 	gXX0+1
.8370	85 37		sta $37				sta 	gzTemp0+1
.8372	28		plp				plp
.8373					GXDrawLineTemp0:
.8373	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.8375	48		pha				pha
.8376	a5 3b		lda $3b				lda 	gsTemp+1
.8378	48		pha				pha
.8379	ad 3f 06	lda $063f			lda 	gsOffset
.837c	48		pha				pha
.837d	a5 0b		lda $0b				lda 	GFXEditSlot
.837f	48		pha				pha
.8380	ac 3f 06	ldy $063f			ldy 	gsOffset 					; Y offset
.8383	90 1e		bcc $83a3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8385					_GXDLTLine:
.8385	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.8387	2d 3c 06	and $063c			and 	gxANDValue
.838a	4d 3b 06	eor $063b			eor 	gxEORValue
.838d	91 3a		sta ($3a),y			sta 	(gsTemp),y
.838f	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.8391	d0 04		bne $8397			bne 	_GXDLTNoBorrow
.8393	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.8395	30 2e		bmi $83c5			bmi 	_GXDLTExit
.8397					_GXDLTNoBorrow:
.8397	c6 36		dec $36				dec 	gzTemp0
.8399	c8		iny				iny 								; next slot.
.839a	d0 e9		bne $8385			bne 	_GXDLTLine
.839c	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.839e	20 d3 83	jsr $83d3			jsr 	_GXDLTCheckWrap				; check for new page.
.83a1	80 e2		bra $8385			bra 	_GXDLTLine
.83a3					_GXDLTEndPoints:
.83a3	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.83a5	2d 3c 06	and $063c			and 	gxANDValue
.83a8	4d 3b 06	eor $063b			eor 	gxEORValue
.83ab	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83ad	98		tya				tya 								; advance to right side
.83ae	18		clc				clc
.83af	65 36		adc $36				adc 	gzTemp0
.83b1	a8		tay				tay
.83b2	a5 3b		lda $3b				lda 	gsTemp+1
.83b4	65 37		adc $37				adc 	gzTemp0+1
.83b6	85 3b		sta $3b				sta 	gsTemp+1
.83b8	20 d3 83	jsr $83d3			jsr 	_GXDLTCheckWrap 			; fix up.
.83bb	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.83bd	2d 3c 06	and $063c			and 	gxANDValue
.83c0	4d 3b 06	eor $063b			eor 	gxEORValue
.83c3	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83c5					_GXDLTExit:
.83c5	68		pla				pla
.83c6	85 0b		sta $0b				sta 	GFXEditSlot
.83c8	68		pla				pla
.83c9	8d 3f 06	sta $063f			sta 	gsOffset
.83cc	68		pla				pla
.83cd	85 3b		sta $3b				sta 	gsTemp+1
.83cf	68		pla				pla
.83d0	85 3a		sta $3a				sta 	gsTemp
.83d2	60		rts				rts
.83d3					_GXDLTCheckWrap:
.83d3	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.83d5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83d7	90 06		bcc $83df			bcc 	_GXDLTCWExit
.83d9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83db	85 3b		sta $3b				sta 	gsTemp+1
.83dd	e6 0b		inc $0b				inc 	GFXEditSlot
.83df					_GXDLTCWExit:
.83df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.83e0					GraphicDraw:
.83e0	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.83e2	b0 06		bcs $83ea			bcs 	_GDCoordinate
.83e4	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.83e6	84 37		sty $37				sty 	gzTemp0+1
.83e8	80 2c		bra $8416			bra 	_GDExecuteA 				; and execute
.83ea					_GDCoordinate:
.83ea	48		pha				pha 								; save AXY
.83eb	da		phx				phx
.83ec	5a		phy				phy
.83ed	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.83ef					_GDCopy1:
.83ef	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.83f2	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.83f5	ca		dex				dex
.83f6	10 f7		bpl $83ef			bpl 	_GDCopy1
.83f8	68		pla				pla 								; update Y
.83f9	8d 2b 06	sta $062b			sta 	gxCurrentY
.83fc	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.83ff	68		pla				pla
.8400	8d 29 06	sta $0629			sta 	gxCurrentX
.8403	68		pla				pla 								; get A (command+X.1) back
.8404	48		pha				pha
.8405	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.8407	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.840a	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.840c					_GDCopy2:
.840c	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.840f	9d 31 06	sta $0631,x			sta 	gxX0,x
.8412	ca		dex				dex
.8413	10 f7		bpl $840c			bpl 	_GDCopy2
.8415	68		pla				pla 								; get command back
.8416					_GDExecuteA:
.8416	29 fe		and #$fe			and 	#$FE 						; lose LSB
.8418	aa		tax				tax
.8419	7c 1d 84	jmp ($841d,x)			jmp 	(GDVectors,x)
.841c					GXMove:
.841c	60		rts				rts
.841d					GDVectors:
>841d							.fill 	2 							; $00 		; Open/Close Bitmap
>841f	83 80						.word 	GXClearBitmap 				; $01 	  	: Clear Bitmap to X
>8421							.fill 	14*2 						; $02-$0F 	: Reserved
>843d	1c 84						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>843f	fe 81						.word 	GXLine 						; $11 		: Draw line
>8441	2b 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8443	28 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>8445	d1 80						.word 	GXFrameEllipse 				; $14 		; Framed ellipse
>8447	cd 80						.word 	GXFillEllipse 				; $15 		; Filled ellipse

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.8449					RunDemos:
.8449	64 01		stz $01				stz 	1
.844b	a9 0f		lda #$0f			lda 	#$0F
.844d	8d 00 d0	sta $d000			sta 	$D000
.8450	a9 01		lda #$01			lda 	#1
.8452	8d 00 d1	sta $d100			sta 	$D100
.8455	9c 01 d1	stz $d101			stz 	$D101
.8458	9c 02 d1	stz $d102			stz 	$D102
.845b	a9 02		lda #$02			lda 	#2
.845d	8d 03 d1	sta $d103			sta 	$D103
.8460	a9 10		lda #$10			lda 	#16
.8462	8d 39 06	sta $0639			sta 	gxBasePage
.8465	a9 f0		lda #$f0			lda 	#240
.8467	8d 3a 06	sta $063a			sta 	gxHeight
.846a	a9 fc		lda #$fc			lda 	#$FC
.846c	8d 3b 06	sta $063b			sta 	gxEORValue
.846f	a9 ff		lda #$ff			lda 	#$FF
.8471	8d 3c 06	sta $063c			sta 	gxANDValue
.8474					loop:
.8474	a9 02		lda #$02			lda 	#((1)*2)+(((4) >> 8) & 1)
.8476	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8478	a0 00		ldy #$00			ldy 	#(0)
.847a	20 e0 83	jsr $83e0			jsr 	GraphicDraw
.847d	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.847f	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8481	a0 0a		ldy #$0a			ldy 	#(10)
.8483	20 e0 83	jsr $83e0			jsr 	GraphicDraw
.8486	a9 2a		lda #$2a			lda 	#((21)*2)+(((100) >> 8) & 1)
.8488	a2 64		ldx #$64			ldx 	#((100) & $FF)
.848a	a0 64		ldy #$64			ldy 	#(100)
.848c	20 e0 83	jsr $83e0			jsr 	GraphicDraw
.848f	60		rts				rts
.8490	20 ac 9b	jsr $9bac	demo:	jsr 	Random32Bit
.8493	ee 3b 06	inc $063b			inc 	gxEORValue
.8496	a9 24		lda #$24			lda 	#18*2
.8498	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.849b	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.849e	20 e0 83	jsr $83e0			jsr 	GraphicDraw
.84a1	80 ed		bra $8490			bra 	demo
.84a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.84a4					GXOpenBitmap:
.84a4	78		sei				sei 								; no interrupts here
.84a5	a5 00		lda $00				lda 	0 							; save original MMU Control register
.84a7	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.84aa	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.84ac	85 00		sta $00				sta 	0
.84ae	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.84b0	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.84b3	58		cli				cli
.84b4	60		rts				rts
.84b5					GXCloseBitmap:
.84b5	78		sei				sei
.84b6	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.84b9	85 0b		sta $0b				sta 	GFXEditSlot
.84bb	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.84be	85 00		sta $00				sta 	0
.84c0	58		cli				cli
.84c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.84c2					GXPositionCalc:
.84c2	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.84c5	85 3a		sta $3a				sta 	gsTemp
.84c7	64 3b		stz $3b				stz 	gsTemp+1
.84c9	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.84cb	26 3b		rol $3b				rol 	gsTemp+1
.84cd	06 3a		asl $3a				asl 	gsTemp
.84cf	26 3b		rol $3b				rol 	gsTemp+1
.84d1	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.84d2	65 3a		adc $3a				adc 	gsTemp
.84d4	85 3a		sta $3a				sta 	gsTemp
.84d6	90 02		bcc $84da			bcc 	_GXPCNoCarry
.84d8	e6 3b		inc $3b				inc 	gsTemp+1
.84da					_GXPCNoCarry:
.84da	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.84dc	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.84de	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.84e0	85 36		sta $36				sta 	gzTemp0
.84e2	64 3b		stz $3b				stz 	gsTemp+1
.84e4	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.84e6					_GXPCMultiply32:
.84e6	06 3a		asl $3a				asl 	gsTemp
.84e8	26 3b		rol $3b				rol 	gsTemp+1
.84ea	3a		dec a				dec 	a
.84eb	d0 f9		bne $84e6			bne 	_GXPCMultiply32
.84ed	18		clc				clc
.84ee	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.84f1	65 3a		adc $3a				adc 	gsTemp
.84f3	8d 3f 06	sta $063f			sta 	gsOffset
.84f6	ad 32 06	lda $0632			lda 	GXX0+1
.84f9	65 3b		adc $3b				adc 	gsTemp+1
.84fb	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.84fd	90 04		bcc $8503			bcc 	_GXPCNoOverflow
.84ff	29 1f		and #$1f			and 	#$1F 						; fix it up
.8501	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8503					_GXPCNoOverflow:
.8503	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8505	85 3b		sta $3b				sta 	gsTemp+1
.8507	64 3a		stz $3a				stz 	gsTemp
.8509	18		clc				clc
.850a	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.850c	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.850f	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8511	60		rts				rts
.8512					GXMovePositionDown:
.8512	18		clc				clc 								; add 320 to offset/temp+1
.8513	ad 3f 06	lda $063f			lda 	gsOffset
.8516	69 40		adc #$40			adc 	#64
.8518	8d 3f 06	sta $063f			sta 	gsOffset
.851b	a5 3b		lda $3b				lda 	gsTemp+1
.851d	69 01		adc #$01			adc 	#1
.851f	85 3b		sta $3b				sta 	gsTemp+1
.8521	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8523	90 07		bcc $852c			bcc 	_GXMPDExit
.8525	38		sec				sec  								; next page
.8526	e9 20		sbc #$20			sbc 	#$20
.8528	85 3b		sta $3b				sta 	gsTemp+1
.852a	e6 0b		inc $0b				inc 	GFXEditSlot
.852c					_GXMPDExit:
.852c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.852d					GXSortXY:
.852d	20 4b 85	jsr $854b			jsr 	GXSortY 					; will be sorted on Y now
.8530	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8533	cd 35 06	cmp $0635			cmp 	gxX1
.8536	ad 32 06	lda $0632			lda 	gXX0+1
.8539	ed 36 06	sbc $0636			sbc 	gXX1+1
.853c	90 0c		bcc $854a			bcc 	_GXSXYExit 					; X0 < X1 exit
.853e	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8540	a0 04		ldy #$04			ldy 	#4
.8542	20 5f 85	jsr $855f			jsr 	GXSwapXY
.8545	e8		inx				inx
.8546	c8		iny				iny
.8547	20 5f 85	jsr $855f			jsr 	GXSwapXY
.854a					_GXSXYExit:
.854a	60		rts				rts
.854b					GXSortY:
.854b	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.854e	cd 37 06	cmp $0637			cmp 	gxY1
.8551	90 0b		bcc $855e			bcc 	_GXSYSorted
.8553	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8555	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8557					_GXSwap1:
.8557	20 5f 85	jsr $855f			jsr 	GXSwapXY
.855a	88		dey				dey
.855b	ca		dex				dex
.855c	10 f9		bpl $8557			bpl 	_GXSwap1
.855e					_GXSYSorted:
.855e	60		rts				rts
.855f					GXSwapXY:
.855f	bd 31 06	lda $0631,x			lda 	gxX0,x
.8562	48		pha				pha
.8563	b9 31 06	lda $0631,y			lda 	gxX0,y
.8566	9d 31 06	sta $0631,x			sta 	gxX0,x
.8569	68		pla				pla
.856a	99 31 06	sta $0631,y			sta 	gxX0,y
.856d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.856e					AssembleGroup1:
.856e	a9 ff		lda #$ff			lda 	#$FF
.8570	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8573	80 02		bra $8577			bra 	AsmGroup12
.8575					AssembleGroup2:
.8575	a5 00		lda $00				lda 	$00
.8577					AsmGroup12:
.8577	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.857a	68		pla				pla 								; pop the return address to access the information following.
.857b	fa		plx				plx
.857c	20 05 86	jsr $8605			jsr 	AccessParameters 			; get opcode and save as base
.857f	8d a4 04	sta $04a4			sta 	BaseOpcode
.8582	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8585	d0 08		bne $858f			bne 	_AG12HaveMask
.8587	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8589	20 0d 86	jsr $860d			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.858c	8d a5 04	sta $04a5			sta 	ModeMask
.858f					_AG12HaveMask:
.858f	20 48 87	jsr $8748			jsr 	TypeAndCalculateOperand 	; get zero page type
.8592	da		phx				phx 								; save found address mode
.8593	20 71 86	jsr $8671			jsr 	AssembleModeX
.8596	fa		plx				plx  								; restore address mode
.8597	b0 0b		bcs $85a4			bcs 	_AG12Exit
.8599	20 a5 85	jsr $85a5			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.859c	20 71 86	jsr $8671			jsr 	AssembleModeX
.859f	b0 03		bcs $85a4			bcs 	_AG12Exit
.85a1	4c 62 ab	jmp $ab62			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.85a4					_AG12Exit:
.85a4	60		rts				rts
.85a5					PromoteToAbsolute:
.85a5	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.85a7	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.85a9	f0 19		beq $85c4			beq 	_PTADo
.85ab	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.85ad	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.85af	f0 13		beq $85c4			beq 	_PTADo
.85b1	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.85b3	e0 80		cpx #$80			cpx 	#AM_ZEROY
.85b5	f0 0d		beq $85c4			beq 	_PTADo
.85b7	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.85b9	e0 d1		cpx #$d1			cpx 	#AM_IND
.85bb	f0 07		beq $85c4			beq 	_PTADo
.85bd	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.85bf	e0 c0		cpx #$c0			cpx 	#AM_INDX
.85c1	f0 01		beq $85c4			beq 	_PTADo
.85c3	60		rts				rts
.85c4					_PTADo:
.85c4	aa		tax				tax
.85c5	60		rts				rts
.85c6					AssembleGroup3:
.85c6	68		pla				pla 								; get parameters, which is just the opcode.
.85c7	fa		plx				plx
.85c8	20 05 86	jsr $8605			jsr 	AccessParameters 			; get and output opcode
.85cb	20 1d 86	jsr $861d			jsr 	AssemblerWriteByte
.85ce	20 ac 87	jsr $87ac			jsr 	CalculateOperand 			; get a 16 bit operand
.85d1	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.85d4	38		sec				sec
.85d5	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.85d8	48		pha				pha 								; LSB in A
.85d9	ad 10 04	lda $0410			lda 	NSMantissa1
.85dc	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.85df	aa		tax				tax 								; MSB in X
.85e0	68		pla				pla
.85e1	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.85e2	69 7f		adc #$7f			adc 	#$7F
.85e4	90 01		bcc $85e7			bcc 	_AG3NoCarry
.85e6	e8		inx				inx
.85e7					_AG3NoCarry:
.85e7	38		sec				sec 								; fix back and write out anyways.
.85e8	e9 80		sbc #$80			sbc 	#$80
.85ea	20 1d 86	jsr $861d			jsr 	AssemblerWriteByte
.85ed	e0 00		cpx #$00			cpx 	#0 							; was it in range
.85ef	f0 0a		beq $85fb			beq 	_AG3Exit
.85f1	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.85f4	29 01		and #$01			and 	#1
.85f6	f0 03		beq $85fb			beq 	_AG3Exit
.85f8	4c 67 ab	jmp $ab67			jmp 	RangeError 					; no, branch is out of range
.85fb					_AG3Exit:
.85fb	60		rts				rts
.85fc					AssembleGroup4:
.85fc	68		pla				pla 								; pop address
.85fd	fa		plx				plx
.85fe	20 05 86	jsr $8605			jsr 	AccessParameters 			; access and get first
.8601	20 1d 86	jsr $861d			jsr 	AssemblerWriteByte 			; output it.
.8604	60		rts				rts
.8605					AccessParameters:
.8605	8d a1 04	sta $04a1			sta 	ParamStart
.8608	8e a2 04	stx $04a2			stx 	ParamStart+1
.860b	a9 01		lda #$01			lda 	#1
.860d					GetParameter:
.860d	5a		phy				phy
.860e	a8		tay				tay
.860f	ad a1 04	lda $04a1			lda 	ParamStart
.8612	85 36		sta $36				sta 	zTemp0
.8614	ad a2 04	lda $04a2			lda 	ParamStart+1
.8617	85 37		sta $37				sta 	zTemp0+1
.8619	b1 36		lda ($36),y			lda 	(zTemp0),y
.861b	7a		ply				ply
.861c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.861d					AssemblerWriteByte:
.861d	48		pha			pha
.861e	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8621	29 02		and #$02		and 	#2
.8623	f0 1b		beq $8640		beq 	_AWBNoPrint
.8625	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8628	20 5b 86	jsr $865b		jsr 	PrintHex
.862b	ad 9e 04	lda $049e		lda		AssemblerAddress
.862e	20 5b 86	jsr $865b		jsr 	PrintHex
.8631	a9 20		lda #$20		lda 	#' '
.8633	20 05 ad	jsr $ad05		jsr 	EXTPrintCharacter
.8636	68		pla			pla 									; print byte
.8637	48		pha			pha
.8638	20 5b 86	jsr $865b		jsr 	PrintHex
.863b	a9 0d		lda #$0d		lda 	#13
.863d	20 05 ad	jsr $ad05		jsr 	EXTPrintCharacter
.8640					_AWBNoPrint:
.8640	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8643	85 36		sta $36			sta 	zTemp0
.8645	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8648	f0 0e		beq $8658		beq 	_AWBRange
.864a	85 37		sta $37			sta 	zTemp0+1
.864c	68		pla			pla 									; write byte out
.864d	92 36		sta ($36)		sta 	(zTemp0)
.864f	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8652	d0 03		bne $8657		bne 	_AWBNoCarry
.8654	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8657					_AWBNoCarry:
.8657	60		rts			rts
.8658					_AWBRange:
.8658	4c 67 ab	jmp $ab67		jmp 	RangeError
.865b					PrintHex:
.865b	48		pha				pha
.865c	4a		lsr a				lsr 	a
.865d	4a		lsr a				lsr 	a
.865e	4a		lsr a				lsr 	a
.865f	4a		lsr a				lsr 	a
.8660	20 64 86	jsr $8664			jsr 	_PrintNibble
.8663	68		pla				pla
.8664					_PrintNibble:
.8664	29 0f		and #$0f			and 	#15
.8666	c9 0a		cmp #$0a			cmp 	#10
.8668	90 02		bcc $866c			bcc 	_NoShift
.866a	69 06		adc #$06			adc 	#6
.866c					_NoShift:
.866c	69 30		adc #$30			adc 	#48
.866e	4c 05 ad	jmp $ad05			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8671					AssembleModeX:
.8671	5a		phy				phy
.8672	ad a3 04	lda $04a3			lda 	IsGroup1
.8675	f0 17		beq $868e			beq 	_AMXGroup2
.8677	8a		txa				txa 							; is it in group # 1
.8678	29 40		and #$40			and 	#AM_ISG1
.867a	f0 50		beq $86cc			beq 	_AMXFail 				; no, give up.
.867c	8a		txa				txa 							; get back.
.867d	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.867f	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8681	d0 22		bne $86a5			bne 	_AMXHaveInfo
.8683	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8686	c9 81		cmp #$81			cmp 	#$81
.8688	f0 42		beq $86cc			beq 	_AMXFail
.868a	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.868c	80 17		bra $86a5			bra 	_AMXHaveInfo 			; odd design decision there.
.868e					_AMXGroup2:
.868e	8a		txa				txa 							; is it in group 2 ?
.868f	29 20		and #$20			and 	#AM_ISG2
.8691	f0 39		beq $86cc			beq 	_AMXFail 				; no, give up.
.8693	8a		txa				txa 							; get the offset into Y
.8694	29 1f		and #$1f			and 	#$1F
.8696	4a		lsr a				lsr 	a 						; make it 0-7.
.8697	4a		lsr a				lsr  	a
.8698	a8		tay				tay
.8699	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.869c					_AMXCheckOkay:
.869c	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.869d	88		dey				dey
.869e	10 fc		bpl $869c			bpl 	_AMXCheckOkay
.86a0	90 2a		bcc $86cc			bcc 	_AMXFail 				; not allowed.
.86a2	8a		txa				txa  							; get mask back
.86a3	29 1f		and #$1f			and 	#$1F
.86a5					_AMXHaveInfo:
.86a5	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.86a7	10 05		bpl $86ae			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.86a9	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.86ac	d0 1e		bne $86cc			bne 	_AMXFail
.86ae					_AMXAnySize:
.86ae	18		clc				clc 							; add offset to the base opcode
.86af	6d a4 04	adc $04a4			adc 	BaseOpcode
.86b2					_AMXOutputCode:
.86b2	20 1d 86	jsr $861d			jsr 	AssemblerWriteByte 		; write the opcode out.
.86b5	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.86b7	f0 10		beq $86c9			beq 	_AMXExit
.86b9	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.86bc	20 1d 86	jsr $861d			jsr 	AssemblerWriteByte
.86bf	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.86c1	30 06		bmi $86c9			bmi 	_AMXExit
.86c3	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.86c6	20 1d 86	jsr $861d			jsr 	AssemblerWriteByte
.86c9					_AMXExit:
.86c9	7a		ply				ply
.86ca	38		sec				sec
.86cb	60		rts				rts
.86cc					_AMXFail:
.86cc	a0 00		ldy #$00			ldy 	#0
.86ce					_AMXCheckOddities:
.86ce	8a		txa				txa
.86cf	d9 f7 86	cmp $86f7,y			cmp 	ExtraOpcode+2,y 		; match address mode
.86d2	d0 16		bne $86ea			bne 	_AMXCONext
.86d4	b9 f5 86	lda $86f5,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.86d7	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.86da	d0 0e		bne $86ea			bne 	_AMXCONext
.86dc	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.86de	10 05		bpl $86e5			bpl 	_AMXCONotZero
.86e0	ad 10 04	lda $0410			lda 	NSMantissa1
.86e3	d0 05		bne $86ea			bne 	_AMXCONext
.86e5					_AMXCONotZero:
.86e5	b9 f6 86	lda $86f6,y			lda 	ExtraOpcode+1,y 		; get new opcode
.86e8	80 c8		bra $86b2			bra 	_AMXOutputCode 			; and assemble it
.86ea					_AMXCONext:
.86ea	c8		iny				iny
.86eb	c8		iny				iny
.86ec	c8		iny				iny
.86ed	b9 f5 86	lda $86f5,y			lda 	ExtraOpcode+0,y 		; end of table
.86f0	d0 dc		bne $86ce			bne 	_AMXCheckOddities
.86f2					_AMXCOFail:
.86f2	7a		ply				ply
.86f3	18		clc				clc
.86f4	60		rts				rts
.86f5					ExtraOpcode:
>86f5	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>86f8	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>86fb	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>86fe	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8701	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8704	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8707	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>870a	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>870d	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8710	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8713	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8714					LabelHere:
.8714	c8		iny				iny 								; skip .
.8715	a2 00		ldx #$00			ldx 	#0 							; get a term
.8717	20 1d 99	jsr $991d			jsr 	EvaluateTerm 				; get a term
.871a	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.871d	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.871f	d0 24		bne $8745			bne 	_ALType
.8721	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8724	85 36		sta $36				sta 	zTemp0
.8726	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8729	85 37		sta $37				sta 	zTemp0+1
.872b	5a		phy				phy 								; copy address in.
.872c	a0 01		ldy #$01			ldy 	#1
.872e	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8731	92 36		sta ($36)			sta 	(zTemp0)
.8733	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8736	91 36		sta ($36),y			sta 	(zTemp0),y
.8738	c8		iny				iny
.8739	a9 00		lda #$00			lda 	#0
.873b	91 36		sta ($36),y			sta 	(zTemp0),y
.873d	c8		iny				iny
.873e	91 36		sta ($36),y			sta 	(zTemp0),y
.8740	c8		iny				iny
.8741	91 36		sta ($36),y			sta 	(zTemp0),y
.8743	7a		ply				ply
.8744	60		rts				rts
.8745					_ALType:
.8745	4c 6c ab	jmp $ab6c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8748					TypeAndCalculateOperand:
.8748	b1 30		lda ($30),y			lda 	(codePtr),y
.874a	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.874c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.874e	f0 5b		beq $87ab			beq 	_TACOExit
.8750	c9 80		cmp #$80			cmp 	#KWC_EOL
.8752	f0 57		beq $87ab			beq 	_TACOExit
.8754	c8		iny				iny
.8755	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8757	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8759	f0 51		beq $87ac			beq 	CalculateOperand
.875b	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.875d	f0 1f		beq $877e			beq 	_TACOIndirect
.875f	88		dey				dey 								; undo get of first character
.8760	20 ac 87	jsr $87ac			jsr 	CalculateOperand 			; get operand
.8763	b1 30		lda ($30),y			lda 	(codePtr),y
.8765	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8767	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8769	d0 40		bne $87ab			bne 	_TACOExit
.876b	c8		iny				iny
.876c	20 f3 a4	jsr $a4f3			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.876f	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8771	c9 58		cmp #$58			cmp 	#'X'
.8773	f0 36		beq $87ab			beq 	_TACOExit
.8775	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8777	c9 59		cmp #$59			cmp 	#'Y'
.8779	f0 30		beq $87ab			beq 	_TACOExit
.877b					_TACOSyntax:
.877b	4c 62 ab	jmp $ab62			jmp 	SyntaxError
.877e					_TACOIndirect:
.877e	20 ac 87	jsr $87ac			jsr 	CalculateOperand 			; get the operand
.8781	b1 30		lda ($30),y			lda 	(codePtr),y
.8783	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8785	f0 17		beq $879e			beq 	_TACOIndX
.8787	20 7c a5	jsr $a57c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.878a	b1 30		lda ($30),y			lda 	(codePtr),y
.878c	a2 d1		ldx #$d1			ldx 	#AM_IND
.878e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8790	d0 19		bne $87ab			bne 	_TACOExit
.8792	c8		iny				iny
.8793	20 f3 a4	jsr $a4f3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8796	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8798	d0 e1		bne $877b			bne 	_TACOSyntax
.879a	a2 d0		ldx #$d0			ldx 	#AM_INDY
.879c	80 0d		bra $87ab			bra 	_TACOExit
.879e					_TACOIndX:
.879e	c8		iny				iny
.879f	20 f3 a4	jsr $a4f3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.87a2	c9 58		cmp #$58			cmp 	#'X' 						; check X
.87a4	d0 d5		bne $877b			bne 	_TACOSyntax
.87a6	20 7c a5	jsr $a57c			jsr 	CheckRightBracket			; check )
.87a9	a2 c0		ldx #$c0			ldx 	#AM_INDX
.87ab					_TACOExit:
.87ab	60		rts				rts
.87ac					CalculateOperand:
.87ac	48		pha				pha
.87ad	da		phx				phx
.87ae	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.87b0	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger
.87b3	fa		plx				plx
.87b4	68		pla				pla
.87b5	60		rts				rts
.a4f3					TACOCheckXY:
.a4f3	b1 30		lda ($30),y			lda 	(codePtr),y
.a4f5	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a4f7	c9 40		cmp #$40			cmp 	#$40
.a4f9	d0 21		bne $a51c			bne 	_TCXYFail
.a4fb	b1 30		lda ($30),y			lda 	(codePtr),y
.a4fd	18		clc				clc
.a4fe	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a500	85 37		sta $37				sta 	zTemp0+1
.a502	c8		iny				iny
.a503	b1 30		lda ($30),y			lda 	(codePtr),y
.a505	c8		iny				iny
.a506	85 36		sta $36				sta 	zTemp0
.a508	5a		phy				phy 								; save position
.a509	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a50b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a50d	d0 0c		bne $a51b			bne 	_TCXYPopFail
.a50f	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a511	b1 36		lda ($36),y			lda 	(zTemp0),y
.a513	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a515	f0 08		beq $a51f			beq 	_TCXYFound
.a517	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a519	f0 04		beq $a51f			beq 	_TCXYFound
.a51b					_TCXYPopFail:
.a51b	7a		ply				ply
.a51c					_TCXYFail:
.a51c	a9 00		lda #$00			lda 	#0
.a51e	60		rts				rts
.a51f					_TCXYFound:
.a51f	7a		ply				ply 								; restore position
.a520	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a522	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87b6					EditProgramCode:
.87b6	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.87b9	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.87bc	20 5a 9e	jsr $9e5a			jsr 	MemorySearch
.87bf	90 05		bcc $87c6			bcc 	_EPCNoDelete 				; reached the end don't delete
.87c1	d0 03		bne $87c6			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.87c3	20 49 ad	jsr $ad49			jsr 	MemoryDeleteLine 			; delete the line
.87c6					_EPCNoDelete:
.87c6	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.87c9	c9 80		cmp #$80			cmp 	#KWC_EOL
.87cb	f0 0d		beq $87da			beq 	_EPCNoInsert
.87cd	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.87d0	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87d3	20 5a 9e	jsr $9e5a			jsr 	MemorySearch
.87d6	18		clc				clc 								; insert at this point.
.87d7	20 80 ad	jsr $ad80			jsr 	MemoryInsertLine 			; insert the line
.87da					_EPCNoInsert:
.87da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.87db					WarmStart:
.87db	a2 ff		ldx #$ff			ldx 	#$FF
.87dd	9a		txs				txs
.87de	20 1b ad	jsr $ad1b			jsr 	EXTInputLine 				; get line to lineBuffer
.87e1	20 74 a2	jsr $a274			jsr 	TokeniseLine 				; tokenise the line
.87e4	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.87e7	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.87ea	d0 17		bne $8803			bne 	_WSEditCode 				; if so,edit code.
.87ec	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.87ef	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.87f1	85 30		sta $30				sta 	codePtr
.87f3	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.87f5	85 31		sta $31				sta 	codePtr+1
.87f7	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.87fa	c9 80		cmp #$80			cmp 	#KWC_EOL
.87fc	f0 dd		beq $87db			beq 	WarmStart
.87fe	20 0c 8e	jsr $8e0c			jsr 	RUNCodePointerLine 			; execute that line.
.8801	80 d8		bra $87db			bra 	WarmStart
.8803					_WSEditCode:
.8803	20 b6 87	jsr $87b6			jsr 	EditProgramCode
.8806	20 74 88	jsr $8874			jsr 	ClearCommand
.8809	80 d0		bra $87db			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.880b					AssembleCommand:
.880b	a2 00		ldx #$00			ldx 	#0
.880d	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger 		; start address
.8810	ad 08 04	lda $0408			lda 	NSMantissa0
.8813	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8816	ad 10 04	lda $0410			lda 	NSMantissa1
.8819	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.881c	20 84 a5	jsr $a584			jsr 	CheckComma
.881f	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger 		; options
.8822	ad 08 04	lda $0408			lda 	NSMantissa0
.8825	8d a0 04	sta $04a0			sta 	AssemblerControl
.8828	60		rts				rts
.8829	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.882a					AssertCommand:
.882a	a2 00		ldx #$00			ldx 	#0
.882c	20 72 9d	jsr $9d72			jsr 	EvaluateInteger 			; the assert test
.882f	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; exit if result is non zero.
.8832	d0 05		bne $8839			bne 	_ACExit
.8834	a9 0a		lda #$0a		lda	#10
.8836	4c 43 92	jmp $9243		jmp	ErrorHandler
.8839					_ACExit:
.8839	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.883a					CallCommand:
.883a	a2 00		ldx #$00			ldx 	#0
.883c	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger
.883f					_CCClear
.883f	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8840	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero
.8843	e0 04		cpx #$04			cpx 	#4
.8845	d0 f8		bne $883f			bne 	_CCClear
.8847	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8849					_CCCParam:
.8849	b1 30		lda ($30),y			lda 	(codePtr),y
.884b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.884d	d0 09		bne $8858			bne 	_CCCRun6502
.884f	c8		iny				iny 								; skip comma
.8850	e8		inx				inx	 								; next level
.8851	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8854	e0 03		cpx #$03			cpx 	#3
.8856	90 f1		bcc $8849			bcc 	_CCCParam 					; done all 3 ?
.8858					_CCCRun6502:
.8858	5a		phy				phy 								; save position
.8859	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.885c	85 37		sta $37				sta 	zTemp0+1
.885e	ad 08 04	lda $0408			lda 	NSMantissa0
.8861	85 36		sta $36				sta 	zTemp0
.8863	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8866	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8869	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.886c	20 71 88	jsr $8871			jsr 	_CCCZTemp0 					; call zTemp0
.886f	7a		ply				ply 								; restore position and exit
.8870	60		rts				rts
.8871					_CCCZTemp0:
.8871	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8874					ClearCommand:
.8874	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8876	85 36		sta $36				sta 	0+zTemp0
.8878	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.887a	85 37		sta $37				sta 	1+zTemp0
.887c					_ClearZeroLoop:
.887c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.887e	f0 24		beq $88a4			beq 	_ClearZeroEnd
.8880	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8882	a9 00		lda #$00			lda 	#0
.8884					_ClearOneVariable:
.8884	91 36		sta ($36),y			sta 	(zTemp0),y
.8886	c8		iny				iny
.8887	c0 08		cpy #$08			cpy 	#8
.8889	d0 f9		bne $8884			bne 	_ClearOneVariable
.888b	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.888d	b1 36		lda ($36),y			lda 	(zTemp0),y
.888f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8891	d0 04		bne $8897			bne 	_ClearNotProcedure
.8893	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8895	91 36		sta ($36),y			sta 	(zTemp0),y
.8897					_ClearNotProcedure:
.8897	18		clc				clc 								; go to the next variable
.8898	b2 36		lda ($36)			lda 	(zTemp0)
.889a	65 36		adc $36				adc 	zTemp0
.889c	85 36		sta $36				sta 	zTemp0
.889e	90 dc		bcc $887c			bcc 	_ClearZeroLoop
.88a0	e6 37		inc $37				inc 	zTemp0+1
.88a2	80 d8		bra $887c			bra 	_ClearZeroLoop
.88a4					_ClearZeroEnd:
.88a4	18		clc				clc
.88a5	a5 36		lda $36				lda 	zTemp0
.88a7	69 01		adc #$01			adc 	#1
.88a9	8d 8c 04	sta $048c			sta 	lowMemPtr
.88ac	a5 37		lda $37				lda 	zTemp0+1
.88ae	69 00		adc #$00			adc 	#0
.88b0	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.88b3	20 14 9f	jsr $9f14			jsr 	StackReset
.88b6	20 63 ae	jsr $ae63			jsr 	StringSystemInitialise
.88b9	20 63 91	jsr $9163			jsr 	ProcedureScan
.88bc	20 c8 8d	jsr $8dc8			jsr 	Command_Restore
.88bf	9c 9e 04	stz $049e			stz 	AssemblerAddress
.88c2	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.88c5	9c a0 04	stz $04a0			stz 	AssemblerControl
.88c8	20 0a 9b	jsr $9b0a			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.88cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.88cc					Command_Data:
.88cc	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.88ce	a2 80		ldx #$80			ldx 	#KWC_EOL
.88d0	20 b5 91	jsr $91b5			jsr 	ScanForward
.88d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.88d4					DimCommand:
.88d4	b1 30		lda ($30),y			lda 	(codePtr),y
.88d6	29 c0		and #$c0			and 	#$C0
.88d8	c9 40		cmp #$40			cmp 	#$40
.88da	d0 7a		bne $8956			bne 	_DCSyntax
.88dc	b1 30		lda ($30),y			lda 	(codePtr),y
.88de	18		clc				clc
.88df	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88e1	85 3f		sta $3f				sta 	zaTemp+1
.88e3	c8		iny				iny
.88e4	b1 30		lda ($30),y			lda 	(codePtr),y
.88e6	c8		iny				iny
.88e7	85 3e		sta $3e				sta 	zaTemp
.88e9	5a		phy				phy
.88ea	a0 02		ldy #$02			ldy 	#2 						; read type byte
.88ec	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88ee	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88f0	c9 18		cmp #$18			cmp 	#NSTProcedure
.88f2	f0 62		beq $8956			beq 	_DCSyntax
.88f4	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88f6	29 04		and #$04			and 	#NSBIsArray
.88f8	f0 64		beq $895e			beq 	_DCType
.88fa	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88fc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88fe	d0 59		bne $8959			bne 	_DCRedefine
.8900	7a		ply				ply
.8901	20 61 89	jsr $8961			jsr 	_DCGetSize 				; get array size, check it.
.8904	5a		phy				phy
.8905	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8907	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8909	7a		ply				ply 							; is there a second (e.g. ,x)
.890a	b1 30		lda ($30),y			lda 	(codePtr),y
.890c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.890e	d0 0a		bne $891a			bne 	_DCOneDimension
.8910	c8		iny				iny 							; skip comma
.8911	20 61 89	jsr $8961			jsr 	_DCGetSize 				; get 2nd array size
.8914	5a		phy				phy
.8915	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8917	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8919	7a		ply				ply
.891a					_DCOneDimension:
.891a	5a		phy				phy 							; save position
.891b	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.891d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.891f	aa		tax				tax
.8920	c8		iny				iny
.8921	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8923	e8		inx				inx 							; bump them.
.8924	1a		inc a				inc 	a
.8925	20 fe a9	jsr $a9fe			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8928	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.892a	29 e0		and #$e0			and 	#$E0
.892c	d0 23		bne $8951			bne 	_DCSize
.892e	a0 02		ldy #$02			ldy 	#2 						; get base type
.8930	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8932	20 6f 89	jsr $896f			jsr 	ScaleByBaseType 		; scale by base type
.8935	a5 36		lda $36				lda 	zTemp0
.8937	a6 37		ldx $37				ldx 	zTemp0+1
.8939	20 cc 9a	jsr $9acc			jsr 	AllocateXABytes 		; allocate memory
.893c	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.893e	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8940	c8		iny				iny
.8941	8a		txa				txa
.8942	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8944	7a		ply				ply 							; get position back
.8945	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 		; check )
.8948	b1 30		lda ($30),y			lda 	(codePtr),y
.894a	c8		iny				iny 							; consume in case
.894b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.894d	f0 85		beq $88d4			beq 	DimCommand
.894f	88		dey				dey 							; undo consume
.8950	60		rts				rts
.8951					_DCSize:
.8951	a9 16		lda #$16		lda	#22
.8953	4c 43 92	jmp $9243		jmp	ErrorHandler
.8956					_DCSyntax:
.8956	4c 62 ab	jmp $ab62			jmp 	SyntaxError
.8959					_DCRedefine:
.8959	a9 15		lda #$15		lda	#21
.895b	4c 43 92	jmp $9243		jmp	ErrorHandler
.895e					_DCType:
.895e	4c 6c ab	jmp $ab6c			jmp 	TypeError
.8961					_DCGetSize:
.8961	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8963	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger 	; get array dimension
.8966	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8968	f0 e7		beq $8951			beq 	_DCSize
.896a	c9 fe		cmp #$fe			cmp 	#254
.896c	f0 e3		beq $8951			beq 	_DCSize
.896e	60		rts				rts
.896f					ScaleByBaseType:
.896f	29 10		and #$10			and 	#NSBIsString 			; is it string
.8971	d0 19		bne $898c			bne 	_SBBTString
.8973	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8975	48		pha				pha
.8976	a5 36		lda $36				lda 	zTemp0
.8978	48		pha				pha
.8979	06 36		asl $36				asl 	zTemp0 					; x 2
.897b	26 37		rol $37				rol 	zTemp0+1
.897d	06 36		asl $36				asl 	zTemp0 					; x 4
.897f	26 37		rol $37				rol 	zTemp0+1
.8981	68		pla				pla 							; add stacked value = x 5
.8982	65 36		adc $36				adc 	zTemp0
.8984	85 36		sta $36				sta 	zTemp0
.8986	68		pla				pla
.8987	65 37		adc $37				adc 	zTemp0+1
.8989	85 37		sta $37				sta 	zTemp0+1
.898b	60		rts				rts
.898c					_SBBTString:
.898c	06 36		asl $36				asl 	zTemp0
.898e	26 37		rol $37				rol 	zTemp0+1
.8990	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8991					EndCommand:
.8991	4c db 87	jmp $87db			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8994					ForCommand:
.8994	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8996	20 af 9e	jsr $9eaf			jsr 	StackOpen
.8999	a2 00		ldx #$00			ldx 	#0
.899b	20 1d 99	jsr $991d			jsr 	EvaluateTerm
.899e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.89a1	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.89a3	d0 49		bne $89ee			bne		_FCError
.89a5	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.89a7	20 8c a5	jsr $a58c			jsr 	CheckNextA
.89aa	e8		inx				inx
.89ab	20 72 9d	jsr $9d72			jsr 	EvaluateInteger 			; <from> in +1
.89ae	b1 30		lda ($30),y			lda 	(codePtr),y
.89b0	c8		iny				iny 								; consume it
.89b1	48		pha				pha 								; save on stack for later
.89b2	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.89b4	f0 04		beq $89ba			beq 	_FCNoSyntax
.89b6	c9 b0		cmp #$b0			cmp 	#KWD_TO
.89b8	d0 37		bne $89f1			bne 	_FCSyntaxError
.89ba					_FCNoSyntax:
.89ba	e8		inx				inx
.89bb	20 72 9d	jsr $9d72			jsr 	EvaluateInteger
.89be	20 f3 9e	jsr $9ef3			jsr 	STKSaveCodePosition 		; save loop back position
.89c1	68		pla				pla 								; restore DOWNTO or TO
.89c2	5a		phy				phy 								; save Y on the stack
.89c3	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.89c5	f0 02		beq $89c9			beq 	_FCNotDownTo
.89c7	a9 02		lda #$02			lda 	#2
.89c9					_FCNotDownTo:
.89c9	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89ca	a0 10		ldy #$10			ldy 	#16
.89cc	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89ce	a0 06		ldy #$06			ldy 	#6
.89d0	ad 08 04	lda $0408			lda 	NSMantissa0
.89d3	91 34		sta ($34),y			sta 	(basicStack),y
.89d5	ad 10 04	lda $0410			lda 	NSMantissa1
.89d8	c8		iny				iny
.89d9	91 34		sta ($34),y			sta 	(basicStack),y
.89db	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89dd	a2 01		ldx #$01			ldx 	#1
.89df	20 f4 89	jsr $89f4			jsr 	FCIntegerToStack
.89e2	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89e4	a2 02		ldx #$02			ldx 	#2
.89e6	20 f4 89	jsr $89f4			jsr 	FCIntegerToStack
.89e9	20 14 8a	jsr $8a14			jsr 	CopyIndexToReference
.89ec	7a		ply				ply 								; restore position
.89ed	60		rts				rts
.89ee					_FCError:
.89ee	4c 6c ab	jmp $ab6c			jmp 	TypeError
.89f1					_FCSyntaxError:
.89f1	4c 62 ab	jmp $ab62			jmp 	SyntaxError
.89f4					FCIntegerToStack:
.89f4	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.89f7	10 03		bpl $89fc			bpl	 	_FCNotNegative
.89f9	20 b0 9d	jsr $9db0			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89fc					_FCNotNegative:
.89fc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89ff	91 34		sta ($34),y			sta 	(basicStack),y
.8a01	c8		iny				iny
.8a02	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a05	91 34		sta ($34),y			sta 	(basicStack),y
.8a07	c8		iny				iny
.8a08	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8a0b	91 34		sta ($34),y			sta 	(basicStack),y
.8a0d	c8		iny				iny
.8a0e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8a11	91 34		sta ($34),y			sta 	(basicStack),y
.8a13	60		rts				rts
.8a14					CopyIndexToReference:
.8a14	5a		phy				phy
.8a15	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8a17	38		sec				sec 								; (because we copy from offset 8)
.8a18	b1 34		lda ($34),y			lda 	(basicStack),y
.8a1a	e9 08		sbc #$08			sbc 	#8
.8a1c	85 36		sta $36				sta 	zTemp0
.8a1e	c8		iny				iny
.8a1f	b1 34		lda ($34),y			lda 	(basicStack),y
.8a21	e9 00		sbc #$00			sbc 	#0
.8a23	85 37		sta $37				sta 	zTemp0+1
.8a25	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a27	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a29	b1 34		lda ($34),y			lda 	(basicStack),y
.8a2b	0a		asl a				asl 	a 							; into carry
.8a2c	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a2e	90 14		bcc $8a44			bcc 	_CITRNormal
.8a30	38		sec				sec
.8a31					_CITRNegative:
.8a31	a9 00		lda #$00			lda 	#0
.8a33	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a35	91 36		sta ($36),y			sta 	(zTemp0),y
.8a37	c8		iny				iny
.8a38	ca		dex				dex
.8a39	d0 f6		bne $8a31			bne 	_CITRNegative
.8a3b	88		dey				dey 								; look at MSB of mantissa
.8a3c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a3e	09 80		ora #$80			ora 	#$80
.8a40	91 36		sta ($36),y			sta 	(zTemp0),y
.8a42	7a		ply				ply
.8a43	60		rts				rts
.8a44					_CITRNormal:
.8a44	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a46	91 36		sta ($36),y			sta 	(zTemp0),y
.8a48	c8		iny				iny
.8a49	ca		dex				dex
.8a4a	d0 f8		bne $8a44			bne 	_CITRNormal
.8a4c	7a		ply				ply 								; and exit.
.8a4d	60		rts				rts
.8a4e					NextCommand:
.8a4e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a50	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a52	20 db 9e	jsr $9edb			jsr 	StackCheckFrame
.8a55	5a		phy				phy
.8a56	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a58	b1 34		lda ($34),y			lda 	(basicStack),y
.8a5a	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a5c	30 02		bmi $8a60			bmi 	_NCStepNeg
.8a5e	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a60					_NCStepNeg:
.8a60	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a62	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a64	18		clc				clc
.8a65					_NCBump:
.8a65	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a67	91 34		sta ($34),y			sta 	(basicStack),y
.8a69	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a6b	c8		iny				iny 								; next byte
.8a6c	ca		dex				dex 								; do four times
.8a6d	d0 f6		bne $8a65			bne 	_NCBump
.8a6f	20 14 8a	jsr $8a14			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a72	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a74	b1 34		lda ($34),y			lda 	(basicStack),y
.8a76	0a		asl a				asl 	a 							; sign bit to carry
.8a77	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a79	85 38		sta $38				sta 	zTemp1
.8a7b	90 02		bcc $8a7f			bcc 	_NCCompRev 					; use if step is +ve
.8a7d	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a7f					_NCCompRev:
.8a7f	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a81	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a83	85 39		sta $39				sta 	zTemp1+1
.8a85	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a87	38		sec				sec
.8a88					_NCCompare:
.8a88	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a8a	b1 34		lda ($34),y			lda 	(basicStack),y
.8a8c	a4 39		ldy $39				ldy 	zTemp1+1
.8a8e	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a90	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a92	e6 39		inc $39				inc 	zTemp1+1
.8a94	ca		dex				dex 								; do it 4 times.
.8a95	d0 f1		bne $8a88			bne 	_NCCompare
.8a97	50 02		bvc $8a9b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a99	49 80		eor #$80			eor 	#$80
.8a9b					_NCNoOverflow:
.8a9b	7a		ply				ply 								; restore Y position
.8a9c	0a		asl a				asl 	a 							; is bit 7 set.
.8a9d	90 04		bcc $8aa3			bcc 	_NCLoopback 				; if no , >= so loop back
.8a9f	20 cd 9e	jsr $9ecd			jsr 	StackClose 					; exit the loop
.8aa2	60		rts				rts
.8aa3					_NCLoopBack:
.8aa3	20 04 9f	jsr $9f04			jsr 	STKLoadCodePosition 		; loop back
.8aa6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8aa7					Command_GOSUB:
.8aa7	a2 00		ldx #$00			ldx 	#0
.8aa9	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8aac	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8aae	20 af 9e	jsr $9eaf			jsr 	StackOpen 					; create frame
.8ab1	20 f3 9e	jsr $9ef3			jsr 	STKSaveCodePosition 		; save current position
.8ab4	4c ca 8a	jmp $8aca			jmp 	GotoStackX
.8ab7					Command_RETURN:
.8ab7	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8ab9	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8abb	20 db 9e	jsr $9edb			jsr 	StackCheckFrame
.8abe	20 04 9f	jsr $9f04			jsr 	STKLoadCodePosition 		; restore code position
.8ac1	20 cd 9e	jsr $9ecd			jsr 	StackClose
.8ac4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8ac5					GotoCommand:
.8ac5	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8ac7	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger
.8aca					GotoStackX:
.8aca	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8acd	48		pha				pha 								; it is slightly inefficient, just in cases.
.8ace	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8ad1	fa		plx				plx
.8ad2	20 5a 9e	jsr $9e5a			jsr 	MemorySearch 				; transfer to line number AX.
.8ad5	90 05		bcc $8adc			bcc 	_GotoError 					; not found, off end.
.8ad7	d0 03		bne $8adc			bne 	_GotoError 					; not found exactly
.8ad9	4c 05 8e	jmp $8e05			jmp 	RunNewLine 					; and go straight to new line code.
.8adc					_GotoError:
.8adc	a9 0d		lda #$0d		lda	#13
.8ade	4c 43 92	jmp $9243		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ae1					IfCommand:
.8ae1	a2 00		ldx #$00			ldx 	#0 							; If what.
.8ae3	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber
.8ae6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae8	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8aea	d0 0a		bne $8af6			bne 	_IFStructured
.8aec	c8		iny				iny 								; consume THEN
.8aed	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; is it zero
.8af0	f0 01		beq $8af3			beq 	_IfFail 					; if fail, go to next line
.8af2	60		rts				rts 								; if THEN just continue
.8af3					_IfFail:
.8af3	4c 6a 8e	jmp $8e6a			jmp 	EOLCommand
.8af6					_IfStructured:
.8af6	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; is it zero
.8af9	d0 07		bne $8b02			bne 	_IfExit 					; if not, then continue normally.
.8afb	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8afd	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8aff	20 b5 91	jsr $91b5			jsr 	ScanForward 				; and run from there/
.8b02					_IfExit:
.8b02	60		rts				rts
.8b03					ElseCode:
.8b03	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8b05	aa		tax				tax 								; so just go to the structure exit
.8b06	20 b5 91	jsr $91b5			jsr 	ScanForward
.8b09	60		rts				rts
.8b0a					EndIf:
.8b0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b0b					LetCommand:
.8b0b	a2 00		ldx #$00			ldx 	#0
.8b0d	b1 30		lda ($30),y			lda 	(codePtr),y
.8b0f	c9 10		cmp #$10			cmp 	#KWD_AT
.8b11	d0 16		bne $8b29			bne 	_LCStandard
.8b13	c8		iny				iny 								; skip equal
.8b14	20 1d 99	jsr $991d			jsr 	EvaluateTerm 				; get a number
.8b17	20 61 97	jsr $9761			jsr 	Dereference 				; dereference it
.8b1a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8b1d	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b1f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8b22	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b24	d0 10		bne $8b36			bne 	_LCMain
.8b26	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; was a reference before.
.8b29					_LCStandard:
.8b29	ad 34 96	lda $9634			lda 	PrecedenceLevel+"*"			; precedence > this
.8b2c	20 4e 96	jsr $964e			jsr 	EvaluateExpressionAtPrecedence
.8b2f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8b32	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8b34	f0 0e		beq $8b44			beq 	_LetGoProc 					; it's a procedure call.
.8b36					_LCMain:
.8b36	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8b38	20 8c a5	jsr $a58c			jsr 	CheckNextA
.8b3b	e8		inx				inx 								; RHS
.8b3c	20 46 9d	jsr $9d46			jsr 	EvaluateValue
.8b3f	ca		dex				dex
.8b40	20 47 8b	jsr $8b47			jsr 	AssignVariable
.8b43	60		rts				rts
.8b44					_LetGoProc:
.8b44	4c e0 8c	jmp $8ce0			jmp 	CallProcedure
.8b47					AssignVariable:
.8b47	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8b4a	48		pha				pha 								; save a copy
.8b4b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8b4e	29 10		and #$10			and 	#NSBIsString
.8b50	d0 0b		bne $8b5d			bne 	_ASError
.8b52	68		pla				pla 								; get back
.8b53	29 10		and #$10			and 	#NSBIsString 				; check type
.8b55	d0 03		bne $8b5a			bne 	_ASString
.8b57	4c 89 96	jmp $9689			jmp 	AssignNumber
.8b5a					_ASString:
.8b5a	4c f7 96	jmp $96f7			jmp 	AssignString
.8b5d					_ASError:
.8b5d	4c 6c ab	jmp $ab6c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8b60					Command_List:
.8b60	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8b63	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8b66	a9 ff		lda #$ff			lda 	#$FF
.8b68	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8b6b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8b6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b70	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b72	f0 1e		beq $8b92			beq 	_CLSecond
.8b74	20 f0 8b	jsr $8bf0			jsr 	CLIsDigit 					; if not digit, list all
.8b77	b0 24		bcs $8b9d			bcs 	_CLStart
.8b79	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8b7b	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger
.8b7e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b80	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b82	f0 0e		beq $8b92			beq 	_CLSecond 					; if so go get it
.8b84	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8b87	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8b8a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8b8d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8b90	80 0b		bra $8b9d			bra 	_CLStart
.8b92					_CLSecond:
.8b92	c8		iny				iny 								; consume comma
.8b93	20 f0 8b	jsr $8bf0			jsr 	CLIsDigit 					; digit found
.8b96	b0 05		bcs $8b9d			bcs 	_CLStart 					; if not, continue listing
.8b98	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8b9a	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger
.8b9d					_CLStart
.8b9d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b9f	85 30		sta $30				sta 	codePtr
.8ba1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ba3	85 31		sta $31				sta 	codePtr+1
.8ba5					_CLLoop:
.8ba5	20 46 ad	jsr $ad46			jsr 	EXTBreakCheck 				; break check
.8ba8	f0 30		beq $8bda			beq 	_CLExit
.8baa	b2 30		lda ($30)			lda 	(codePtr)
.8bac	f0 2c		beq $8bda			beq 	_CLExit
.8bae	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8bb0	20 dd 8b	jsr $8bdd			jsr 	CLCompareLineNo
.8bb3	90 18		bcc $8bcd			bcc 	_CLNext
.8bb5	a2 07		ldx #$07			ldx 	#7
.8bb7	20 dd 8b	jsr $8bdd			jsr 	CLCompareLineNo
.8bba	f0 02		beq $8bbe			beq 	_CLDoThisOne
.8bbc	b0 0f		bcs $8bcd			bcs 	_CLNext
.8bbe					_CLDoThisOne:
.8bbe	20 11 90	jsr $9011			jsr 	ListConvertLine 			; convert line into token Buffer
.8bc1	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8bc3	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8bc5	20 9c 92	jsr $929c			jsr 	PrintStringXA
.8bc8	a9 0d		lda #$0d			lda 	#13 						; new line
.8bca	20 05 ad	jsr $ad05			jsr 	EXTPrintCharacter
.8bcd					_CLNext:
.8bcd	18		clc				clc
.8bce	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8bd0	65 30		adc $30				adc 	codePtr
.8bd2	85 30		sta $30				sta 	codePtr
.8bd4	90 02		bcc $8bd8			bcc 	_CREExit
.8bd6	e6 31		inc $31				inc 	codePtr+1
.8bd8					_CREExit:
.8bd8	80 cb		bra $8ba5			bra 	_CLLoop
.8bda					_CLExit:
.8bda	4c db 87	jmp $87db			jmp 	WarmStart
.8bdd					CLCompareLineNo:
.8bdd	38		sec				sec
.8bde	a0 01		ldy #$01			ldy 	#1
.8be0	b1 30		lda ($30),y			lda 	(codePtr),y
.8be2	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8be5	85 36		sta $36				sta 	zTemp0
.8be7	c8		iny				iny
.8be8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bea	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8bed	05 36		ora $36				ora 	zTemp0
.8bef	60		rts				rts
.8bf0					CLIsDigit:
.8bf0	b1 30		lda ($30),y			lda 	(codePtr),y
.8bf2	c9 30		cmp #$30			cmp 	#"0"
.8bf4	90 03		bcc $8bf9			bcc	 	_CLIDExitFalse
.8bf6	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bf8	60		rts				rts
.8bf9					_CLIDExitFalse:
.8bf9	38		sec				sec
.8bfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8bfb					Command_LOCAL:
.8bfb	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8bfd	20 09 8c	jsr $8c09			jsr 	LocaliseNextTerm 			; convert term to a local.
.8c00	b1 30		lda ($30),y			lda 	(codePtr),y
.8c02	c8		iny				iny
.8c03	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c05	f0 f4		beq $8bfb			beq 	Command_LOCAL
.8c07	88		dey				dey 								; unpick pre-get
.8c08	60		rts				rts
.8c09					LocaliseNextTerm:
.8c09	20 1d 99	jsr $991d			jsr 	EvaluateTerm 				; evaluate the term
.8c0c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c0f	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8c11	f0 69		beq $8c7c			beq		_LNTError
.8c13	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8c16	85 36		sta $36				sta 	zTemp0
.8c18	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c1b	85 37		sta $37				sta  	zTemp0+1
.8c1d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c20	29 10		and #$10			and 	#NSBIsString
.8c22	d0 22		bne $8c46			bne 	_LNTPushString
.8c24	5a		phy				phy
.8c25	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8c27					_LNTPushNumLoop:
.8c27	b1 36		lda ($36),y			lda		(zTemp0),y
.8c29	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c2c	a9 00		lda #$00			lda 	#0
.8c2e	91 36		sta ($36),y			sta 	(zTemp0),y
.8c30	c8		iny				iny
.8c31	c0 05		cpy #$05			cpy 	#5
.8c33	d0 f2		bne $8c27			bne 	_LNTPushNumLoop
.8c35	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8c37	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c3a	a5 37		lda $37				lda 	zTemp0+1
.8c3c	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c3f	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8c41	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c44	7a		ply				ply
.8c45	60		rts				rts
.8c46					_LNTPushString:
.8c46	5a		phy				phy
.8c47	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8c49	85 38		sta $38				sta 	zTemp1
.8c4b	a0 01		ldy #$01			ldy 	#1
.8c4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c4f	85 39		sta $39				sta 	zTemp1+1
.8c51	a0 00		ldy #$00			ldy 	#0 							; output string
.8c53	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8c55	f0 0a		beq $8c61			beq 	_LNTStringOut
.8c57					_LNTPushStrLoop:
.8c57	b1 38		lda ($38),y			lda 	(zTemp1),y
.8c59	f0 06		beq $8c61			beq 	_LNTStringOut
.8c5b	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c5e	c8		iny				iny
.8c5f	80 f6		bra $8c57			bra 	_LNTPushStrLoop
.8c61					_LNTStringOut:
.8c61	98		tya				tya									; output length
.8c62	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c65	a9 00		lda #$00			lda 	#0 							; clear original string.
.8c67	92 38		sta ($38)			sta 	(zTemp1)
.8c69	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8c6c	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c6f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c72	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c75	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8c77	20 8d 9e	jsr $9e8d			jsr 	StackPushByte
.8c7a	7a		ply				ply
.8c7b	60		rts				rts
.8c7c					_LNTError:
.8c7c	4c 62 ab	jmp $ab62			jmp 	SyntaxError
.a523					LocalPopValue:
.a523	20 a6 9e	jsr $9ea6			jsr 	StackPopByte
.a526	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a528	d0 17		bne $a541			bne 	_LPVString
.a52a	20 a6 9e	jsr $9ea6			jsr 	StackPopByte 				; address
.a52d	85 37		sta $37				sta 	zTemp0+1
.a52f	20 a6 9e	jsr $9ea6			jsr 	StackPopByte
.a532	85 36		sta $36				sta 	zTemp0
.a534	5a		phy				phy
.a535	a0 04		ldy #$04			ldy 	#4 							; copy back
.a537					_LPVNumberCopy:
.a537	20 a6 9e	jsr $9ea6			jsr 	StackPopByte
.a53a	91 36		sta ($36),y			sta 	(zTemp0),y
.a53c	88		dey				dey
.a53d	10 f8		bpl $a537			bpl 	_LPVNumberCopy
.a53f	7a		ply				ply 								; and complete
.a540	60		rts				rts
.a541					_LPVString:
.a541	20 a6 9e	jsr $9ea6			jsr 	StackPopByte 				; address of record => zTemp0
.a544	85 37		sta $37				sta 	zTemp0+1
.a546	20 a6 9e	jsr $9ea6			jsr 	StackPopByte
.a549	85 36		sta $36				sta 	zTemp0
.a54b	5a		phy				phy
.a54c	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a54e	85 38		sta $38				sta 	zTemp1
.a550	a0 01		ldy #$01			ldy 	#1
.a552	b1 36		lda ($36),y			lda 	(zTemp0),y
.a554	85 39		sta $39				sta 	zTemp1+1
.a556	20 a6 9e	jsr $9ea6			jsr 	StackPopByte 				; # to get => y
.a559	a8		tay				tay
.a55a	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a55c	f0 0e		beq $a56c			beq 	_LPVStringCopied
.a55e	a9 00		lda #$00			lda 	#0 							; NULL on end
.a560	91 38		sta ($38),y			sta 	(zTemp1),y
.a562					_LPVStringCopy:
.a562	88		dey				dey
.a563	30 07		bmi $a56c			bmi 	_LPVStringCopied
.a565	20 a6 9e	jsr $9ea6			jsr 	StackPopByte
.a568	91 38		sta ($38),y			sta 	(zTemp1),y
.a56a	80 f6		bra $a562			bra 	_LPVStringCopy
.a56c					_LPVStringCopied:
.a56c	fa		plx				plx
.a56d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8c7f					NewCommand:
.8c7f	20 38 9e	jsr $9e38			jsr 	MemoryNew
.8c82	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8c85	20 74 88	jsr $8874			jsr 	ClearCommand 				; clear everything.
.8c88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8c89					Command_Print:
.8c89	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8c8a					_CPLoop:
.8c8a	08		php				php 								; save last action flag
.8c8b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c8d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8c8f	f0 46		beq $8cd7			beq 	_CPExit
.8c91	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8c93	f0 42		beq $8cd7			beq 	_CPExit
.8c95	68		pla				pla 								; throw last action flag
.8c96	b1 30		lda ($30),y			lda 	(codePtr),y
.8c98	c8		iny				iny
.8c99	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8c9b	f0 37		beq $8cd4			beq 	_CPContinueWithSameLine
.8c9d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8c9f	f0 2e		beq $8ccf			beq 	_CPTab
.8ca1	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ca3	f0 26		beq $8ccb			beq 	_CPNewLine
.8ca5	88		dey				dey 								; undo the get.
.8ca6	a2 00		ldx #$00			ldx 	#0
.8ca8	20 46 9d	jsr $9d46			jsr 	EvaluateValue 				; get a value into slot 0
.8cab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8cae	29 10		and #$10			and 	#NSBIsString
.8cb0	f0 0b		beq $8cbd			beq 	_CPNumber
.8cb2	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8cb5	ad 08 04	lda $0408			lda 	NSMantissa0
.8cb8	20 9c 92	jsr $929c			jsr 	PrintStringXA
.8cbb	80 cc		bra $8c89			bra 	Command_Print 				; loop round clearing carry so NL if end
.8cbd					_CPNumber:
.8cbd	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8cbf	20 1c 9c	jsr $9c1c			jsr 	ConvertNumberToString 		; convert to string
.8cc2	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8cc4	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8cc6	20 9c 92	jsr $929c			jsr 	PrintStringXA
.8cc9	80 be		bra $8c89			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ccb					_CPNewLine:
.8ccb	a9 0d		lda #$0d			lda 	#13
.8ccd	80 02		bra $8cd1			bra 	_CPPrintChar
.8ccf					_CPTab:
.8ccf	a9 09		lda #$09			lda 	#9 							; print TAB
.8cd1					_CPPrintChar:
.8cd1	20 05 ad	jsr $ad05			jsr 	EXTPrintCharacter
.8cd4					_CPContinueWithSameLine:
.8cd4	38		sec				sec 								; loop round with carry set, which
.8cd5	80 b3		bra $8c8a			bra 	_CPLoop 					; will inhibit final CR
.8cd7					_CPExit:
.8cd7	28		plp				plp 								; get last action flag
.8cd8	b0 05		bcs $8cdf			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8cda	a9 0d		lda #$0d			lda 	#13 						; print new line
.8cdc	20 05 ad	jsr $ad05			jsr 	EXTPrintCharacter
.8cdf					_CPExit2:
.8cdf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8ce0					CallProcedure:
.8ce0	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8ce2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce4	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8ce6	f0 0c		beq $8cf4			beq 	_CPEndParam
.8ce8					_CPParamLoop:
.8ce8	20 4c 96	jsr $964c			jsr 	EvaluateExpression 			; get parameter onto stack
.8ceb	e8		inx				inx 								; bump next stack
.8cec	b1 30		lda ($30),y			lda 	(codePtr),y
.8cee	c8		iny				iny
.8cef	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8cf1	f0 f5		beq $8ce8			beq 	_CPParamLoop
.8cf3	88		dey				dey 								; unpick.
.8cf4					_CPEndParam:
.8cf4	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8cf7	c8		iny				iny									; skip right bracket
.8cf8	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8cfa	20 af 9e	jsr $9eaf			jsr 	StackOpen
.8cfd	20 f3 9e	jsr $9ef3			jsr 	STKSaveCodePosition 		; save loop position
.8d00	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8d03	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8d05	ad 10 04	lda $0410			lda 	NSMantissa1
.8d08	85 37		sta $37				sta 	zTemp0+1
.8d0a	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8d0c	b2 36		lda ($36)			lda 	(zTemp0)
.8d0e	85 30		sta $30				sta 	safePtr
.8d10	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d12	85 31		sta $31				sta 	safePtr+1
.8d14	c8		iny				iny
.8d15	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d17	85 32		sta $32				sta 	safePtr+2
.8d19	c8		iny				iny
.8d1a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d1c	85 33		sta $33				sta 	safePtr+3
.8d1e	c8		iny				iny 								; get Y offset -> Y
.8d1f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d21	a8		tay				tay
.8d22	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8d24	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8d27	f0 13		beq $8d3c			beq 	_ParamExit 					; if so, exit.
.8d29					_ParamExtract:
.8d29	ca		dex				dex 								; put a local term on the level before
.8d2a	20 09 8c	jsr $8c09			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8d2d	20 47 8b	jsr $8b47			jsr 	AssignVariable 				; assign stacked value to the variable.
.8d30	e8		inx				inx 								; advance to next parameter to do.
.8d31	e8		inx				inx
.8d32	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8d35	f0 05		beq $8d3c			beq 	_ParamExit
.8d37	20 84 a5	jsr $a584			jsr 	CheckComma 					; comma seperating parameters
.8d3a	80 ed		bra $8d29			bra 	_ParamExtract
.8d3c					_ParamExit:
.8d3c	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 			; check )
.8d3f	60		rts				rts 								; and continue from here
.a56e					Command_ENDPROC:
.a56e	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a570	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a572	20 db 9e	jsr $9edb			jsr 	StackCheckFrame
.a575	20 04 9f	jsr $9f04			jsr 	STKLoadCodePosition 		; restore code position
.a578	20 cd 9e	jsr $9ecd			jsr 	StackClose
.a57b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8d40					Command_Read:
.8d40	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8d42	20 1d 99	jsr $991d			jsr 	EvaluateTerm
.8d45	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d48	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8d4a	f0 4a		beq $8d96			beq 	_CRSyntax 					; check reference (bit 0)
.8d4c	20 df 8d	jsr $8ddf			jsr 	SwapDataCodePtrs 			; swap code and data
.8d4f	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8d52	d0 20		bne $8d74			bne 	_CRContinueData
.8d54					_CRKeepSearching:
.8d54	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8d56	aa		tax				tax
.8d57	20 b5 91	jsr $91b5			jsr 	ScanForward
.8d5a	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8d5c	f0 16		beq $8d74			beq 	_CRHaveData 				; found it
.8d5e	18		clc				clc
.8d5f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d61	65 30		adc $30				adc 	codePtr
.8d63	85 30		sta $30				sta 	codePtr
.8d65	90 02		bcc $8d69			bcc 	_CREExit
.8d67	e6 31		inc $31				inc 	codePtr+1
.8d69					_CREExit:
.8d69	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8d6b	b2 30		lda ($30)			lda 	(codePtr)
.8d6d	d0 e5		bne $8d54			bne 	_CRKeepSearching
.8d6f	a9 0b		lda #$0b		lda	#11
.8d71	4c 43 92	jmp $9243		jmp	ErrorHandler
.8d74					_CRHaveData:
.8d74					_CRContinueData:
.8d74	a2 01		ldx #$01			ldx 	#1
.8d76	20 46 9d	jsr $9d46			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8d79	ca		dex				dex
.8d7a	20 47 8b	jsr $8b47			jsr		AssignVariable 				; do the assignment
.8d7d	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8d80	b1 30		lda ($30),y			lda 	(codePtr),y
.8d82	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8d84	d0 04		bne $8d8a			bne 	_CRSwapBack
.8d86	c8		iny				iny 								; consume comma
.8d87	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8d8a					_CRSwapBack:
.8d8a	20 df 8d	jsr $8ddf			jsr 	SwapDataCodePtrs			; swap them back.
.8d8d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8f	c8		iny				iny
.8d90	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d92	f0 ac		beq $8d40			beq 	Command_Read 				; if so go round again.
.8d94	88		dey				dey 								; unpick get.
.8d95	60		rts				rts
.8d96					_CRSyntax:
.8d96	4c 62 ab	jmp $ab62			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8d99					RemCommand:
.8d99	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8d9d	d0 06		bne $8da5			bne 	_RMExit
.8d9f	c8		iny				iny
.8da0	98		tya				tya
.8da1	38		sec				sec
.8da2	71 30		adc ($30),y			adc 	(codePtr),y
.8da4	a8		tay				tay
.8da5					_RMExit:
.8da5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8da6					Command_REPEAT:
.8da6	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8da8	20 af 9e	jsr $9eaf			jsr 	StackOpen
.8dab	20 f3 9e	jsr $9ef3			jsr 	STKSaveCodePosition 		; save loop position
.8dae	60		rts				rts
.8daf					Command_UNTIL:
.8daf	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8db1	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8db3	20 db 9e	jsr $9edb			jsr 	StackCheckFrame
.8db6	a2 00		ldx #$00			ldx 	#0
.8db8	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber 				; work out the number
.8dbb	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; check if zero
.8dbe	f0 04		beq $8dc4			beq 	_CULoopBack 				; if so keep looping
.8dc0	20 cd 9e	jsr $9ecd			jsr 	StackClose		 			; return
.8dc3	60		rts				rts
.8dc4					_CULoopBack:
.8dc4	20 04 9f	jsr $9f04			jsr 	STKLoadCodePosition 		; loop back
.8dc7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8dc8					Command_Restore:
.8dc8	20 df 8d	jsr $8ddf			jsr 	SwapDataCodePtrs 			; swap code and data
.8dcb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8dcd	85 30		sta $30				sta 	codePtr
.8dcf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8dd1	85 31		sta $31				sta 	codePtr+1
.8dd3	20 df 8d	jsr $8ddf			jsr 	SwapDataCodePtrs 			; put them back
.8dd6	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8dd8	8d 9b 04	sta $049b			sta 	dataPointer+4
.8ddb	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8dde	60		rts				rts
.8ddf					SwapDataCodePtrs:
.8ddf	da		phx				phx
.8de0	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8de2					_SDCPLoop:
.8de2	b5 30		lda $30,x			lda 	safePtr,x
.8de4	48		pha				pha
.8de5	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8de8	95 30		sta $30,x			sta 	safePtr,x
.8dea	68		pla				pla
.8deb	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8dee	ca		dex				dex
.8def	10 f1		bpl $8de2			bpl 	_SDCPLoop
.8df1	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8df4	8c 9b 04	sty $049b			sty 	dataPointer+4
.8df7	a8		tay				tay
.8df8	fa		plx				plx
.8df9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8dfa					CommandRUN:
.8dfa	20 74 88	jsr $8874			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8dfd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8dff	85 30		sta $30				sta 	codePtr
.8e01	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e03	85 31		sta $31				sta 	codePtr+1
.8e05					RUNNewLine:
.8e05	b2 30		lda ($30)			lda 	(codePtr)
.8e07	f0 5e		beq $8e67			beq 	CRNoProgram         		; no then END.
.8e09	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8e0b	9a		txs				txs
.8e0c					RUNCodePointerLine:
.8e0c	a0 02		ldy #$02			ldy 	#2 							; start of program
.8e0e					_CRIncMainLoop:
.8e0e	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8e11	d0 05		bne $8e18			bne 	_CRNoBreakCheck
.8e13	20 46 ad	jsr $ad46			jsr 	EXTBreakCheck 				; break check
.8e16	f0 4a		beq $8e62			beq 	_CRBreak
.8e18					_CRNoBreakCheck:
.8e18	c8		iny				iny
.8e19					_CRMainLoop:
.8e19	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8e1c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e1e	10 10		bpl $8e30			bpl 	_CRNotKeyword
.8e20	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8e22	b0 04		bcs $8e28			bcs 	_CRIsKeyword
.8e24	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8e26	b0 34		bcs $8e5c			bcs		_CRSyntaxError
.8e28					_CRIsKeyword:
.8e28	c8		iny				iny 								; consume command
.8e29	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8e2a	aa		tax				tax 								; put in X for vector jump
.8e2b	20 5f 8e	jsr $8e5f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8e2e	80 e9		bra $8e19			bra 	_CRMainLoop 				; and loop round
.8e30					_CRNotKeyword:
.8e30	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8e32	f0 da		beq $8e0e			beq 	_CRIncMainLoop
.8e34	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8e36	90 05		bcc $8e3d			bcc 	_CRNotVariable
.8e38					_CRGoLet:
.8e38	20 0b 8b	jsr $8b0b			jsr 	LetCommand
.8e3b	80 dc		bra $8e19			bra 	_CRMainLoop
.8e3d					_CRNotVariable:
.8e3d	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8e3f	f0 f7		beq $8e38			beq 	_CRGoLet
.8e41	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8e43	f0 f3		beq $8e38			beq 	_CRGoLet
.8e45	c9 21		cmp #$21			cmp 	#KWD_PLING
.8e47	f0 ef		beq $8e38			beq 	_CRGoLet
.8e49	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8e4b	f0 09		beq $8e56			beq 	_CRGoRem
.8e4d	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8e4f	d0 0b		bne $8e5c			bne 	_CRSyntaxError
.8e51	20 14 87	jsr $8714			jsr 	LabelHere
.8e54	80 c3		bra $8e19			bra 	_CRMainLoop
.8e56					_CRGoRem:
.8e56	c8		iny				iny
.8e57	20 99 8d	jsr $8d99			jsr 	RemCommand
.8e5a	80 bd		bra $8e19			bra 	_CRMainLoop
.8e5c					_CRSyntaxError:
.8e5c	4c 62 ab	jmp $ab62			jmp 	SyntaxError
.8e5f					_CRCallVector0:
.8e5f	7c 0a 8f	jmp ($8f0a,x)			jmp 	(VectorSet0,x)
.8e62					_CRBreak:
.8e62	a9 01		lda #$01		lda	#1
.8e64	4c 43 92	jmp $9243		jmp	ErrorHandler
.8e67					CRNoProgram:
.8e67	4c 91 89	jmp $8991			jmp 	EndCommand
.8e6a					EOLCommand:
.8e6a	18		clc				clc
.8e6b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8e6d	65 30		adc $30				adc 	codePtr
.8e6f	85 30		sta $30				sta 	codePtr
.8e71	90 02		bcc $8e75			bcc 	_CREExit
.8e73	e6 31		inc $31				inc 	codePtr+1
.8e75					_CREExit:
.8e75	80 8e		bra $8e05			bra 	RunNewLine
.8e77					Shift1Command:
.8e77	b1 30		lda ($30),y			lda 	(codePtr),y
.8e79	c8		iny				iny
.8e7a	0a		asl a				asl 	a
.8e7b	aa		tax				tax
.8e7c	7c 6c 8f	jmp ($8f6c,x)			jmp 	(VectorSet1,x)
.8e7f					Shift2Command:
.8e7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8e81	c8		iny				iny
.8e82	0a		asl a				asl 	a
.8e83	aa		tax				tax
.8e84	7c 84 8f	jmp ($8f84,x)			jmp 	(VectorSet2,x)
.8e87					Unused1:
.8e87					Unused2:
.8e87					Unused3:
.8e87					Unused4:
.8e87	4c 62 ab	jmp $ab62			jmp 	SyntaxError
>8e8a							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8e8a					VectorSetPunc:
>8e8a	ed 93					.word	ShiftLeft                        ; $00 <<
>8e8c	e7 92					.word	BinaryCompareLessEqual           ; $01 <=
>8e8e	dd 92					.word	BinaryCompareNotEqual            ; $02 <>
>8e90	62 ab					.word	SyntaxError                      ; $03 !!3
>8e92	62 ab					.word	SyntaxError                      ; $04 ><
>8e94	f1 92					.word	BinaryCompareGreaterEqual        ; $05 >=
>8e96	f0 93					.word	ShiftRight                       ; $06 >>
>8e98	62 ab					.word	SyntaxError                      ; $07 !!7
>8e9a	62 ab					.word	SyntaxError                      ; $08 !!8
>8e9c	62 ab					.word	SyntaxError                      ; $09 !!9
>8e9e	62 ab					.word	SyntaxError                      ; $0a !!10
>8ea0	62 ab					.word	SyntaxError                      ; $0b !!11
>8ea2	62 ab					.word	SyntaxError                      ; $0c !!12
>8ea4	62 ab					.word	SyntaxError                      ; $0d !!13
>8ea6	62 ab					.word	SyntaxError                      ; $0e !!14
>8ea8	62 ab					.word	SyntaxError                      ; $0f !!15
>8eaa	62 ab					.word	SyntaxError                      ; $10 @
>8eac	62 ab					.word	SyntaxError                      ; $11 !!17
>8eae	62 ab					.word	SyntaxError                      ; $12 !!18
>8eb0	62 ab					.word	SyntaxError                      ; $13 [
>8eb2	95 a5					.word	IntegerDivide                    ; $14 \
>8eb4	62 ab					.word	SyntaxError                      ; $15 ]
>8eb6	76 95					.word	EorInteger                       ; $16 ^
>8eb8	62 ab					.word	SyntaxError                      ; $17 _
>8eba	62 ab					.word	SyntaxError                      ; $18 `
>8ebc	62 ab					.word	SyntaxError                      ; $19 !!25
>8ebe	62 ab					.word	SyntaxError                      ; $1a !!26
>8ec0	62 ab					.word	SyntaxError                      ; $1b {
>8ec2	30 95					.word	OraInteger                       ; $1c |
>8ec4	62 ab					.word	SyntaxError                      ; $1d }
>8ec6	62 ab					.word	SyntaxError                      ; $1e ~
>8ec8	62 ab					.word	SyntaxError                      ; $1f [7m<7F>[m
>8eca	62 ab					.word	SyntaxError                      ; $20
>8ecc	bc 95					.word	WordIndirect                     ; $21 !
>8ece	62 ab					.word	SyntaxError                      ; $22 "
>8ed0	62 ab					.word	SyntaxError                      ; $23 #
>8ed2	62 ab					.word	SyntaxError                      ; $24 $
>8ed4	e2 a5					.word	IntegerModulus                   ; $25 %
>8ed6	ea 94					.word	AndInteger                       ; $26 &
>8ed8	62 ab					.word	SyntaxError                      ; $27 '
>8eda	62 ab					.word	SyntaxError                      ; $28 (
>8edc	62 ab					.word	SyntaxError                      ; $29 )
>8ede	57 a6					.word	MulInteger                       ; $2a *
>8ee0	84 94					.word	AddInteger                       ; $2b +
>8ee2	62 ab					.word	SyntaxError                      ; $2c ,
>8ee4	bf 94					.word	SubInteger                       ; $2d -
>8ee6	62 ab					.word	SyntaxError                      ; $2e .
>8ee8	ee a7					.word	FDivideCommand                   ; $2f /
>8eea	62 ab					.word	SyntaxError                      ; $30 0
>8eec	62 ab					.word	SyntaxError                      ; $31 1
>8eee	62 ab					.word	SyntaxError                      ; $32 2
>8ef0	62 ab					.word	SyntaxError                      ; $33 3
>8ef2	62 ab					.word	SyntaxError                      ; $34 4
>8ef4	62 ab					.word	SyntaxError                      ; $35 5
>8ef6	62 ab					.word	SyntaxError                      ; $36 6
>8ef8	62 ab					.word	SyntaxError                      ; $37 7
>8efa	62 ab					.word	SyntaxError                      ; $38 8
>8efc	62 ab					.word	SyntaxError                      ; $39 9
>8efe	62 ab					.word	SyntaxError                      ; $3a :
>8f00	62 ab					.word	SyntaxError                      ; $3b ;
>8f02	c9 92					.word	BinaryCompareLess                ; $3c <
>8f04	bf 92					.word	BinaryCompareEqual               ; $3d =
>8f06	d3 92					.word	BinaryCompareGreater             ; $3e >
>8f08	e3 95					.word	ByteIndirect                     ; $3f ?
.8f0a					VectorSet0:
>8f0a	6a 8e					.word	EOLCommand                       ; $80 !0:EOF
>8f0c	77 8e					.word	Shift1Command                    ; $81 !1:SH1
>8f0e	7f 8e					.word	Shift2Command                    ; $82 !2:SH2
>8f10	34 a9					.word	AbsUnary                         ; $83 ABS(
>8f12	ad 9a					.word	AllocUnary                       ; $84 ALLOC(
>8f14	44 a9					.word	AscUnary                         ; $85 ASC(
>8f16	cd 9b					.word	ChrUnary                         ; $86 CHR$(
>8f18	bb 92					.word	UnaryFalse                       ; $87 FALSE
>8f1a	51 a9					.word	FracUnary                        ; $88 FRAC(
>8f1c	67 a9					.word	IntUnary                         ; $89 INT(
>8f1e	bd a9					.word	IsValUnary                       ; $8a ISVAL(
>8f20	a7 9c					.word	Unary_Left                       ; $8b LEFT$(
>8f22	79 a9					.word	LenUnary                         ; $8c LEN(
>8f24	d1 9c					.word	Unary_Mid                        ; $8d MID$(
>8f26	1d 9b					.word	Unary_Not                        ; $8e NOT(
>8f28	33 9b					.word	Unary_Random                     ; $8f RANDOM(
>8f2a	b7 9c					.word	Unary_Right                      ; $90 RIGHT$(
>8f2c	4c 9b					.word	Unary_Rnd                        ; $91 RND(
>8f2e	93 a9					.word	SgnUnary                         ; $92 SGN(
>8f30	df 9b					.word	SpcUnary                         ; $93 SPC(
>8f32	fa 9b					.word	Unary_Str                        ; $94 STR$(
>8f34	af 92					.word	UnaryTrue                        ; $95 TRUE
>8f36	b3 a9					.word	ValUnary                         ; $96 VAL(
>8f38	94 89					.word	ForCommand                       ; $97 FOR
>8f3a	e1 8a					.word	IfCommand                        ; $98 IF
>8f3c	87 8e					.word	Unused1                          ; $99 PROC
>8f3e	a6 8d					.word	Command_REPEAT                   ; $9a REPEAT
>8f40	14 92					.word	Command_WHILE                    ; $9b WHILE
>8f42	0a 8b					.word	EndIf                            ; $9c ENDIF
>8f44	6e a5					.word	Command_ENDPROC                  ; $9d ENDPROC
>8f46	4e 8a					.word	NextCommand                      ; $9e NEXT
>8f48	87 8e					.word	Unused4                          ; $9f THEN
>8f4a	af 8d					.word	Command_UNTIL                    ; $a0 UNTIL
>8f4c	35 92					.word	Command_WEND                     ; $a1 WEND
>8f4e	3a 88					.word	CallCommand                      ; $a2 CALL
>8f50	62 ab					.word	SyntaxError                      ; $a3 CLS
>8f52	cc 88					.word	Command_Data                     ; $a4 DATA
>8f54	d4 88					.word	DimCommand                       ; $a5 DIM
>8f56	87 8e					.word	Unused3                          ; $a6 DOWNTO
>8f58	03 8b					.word	ElseCode                         ; $a7 ELSE
>8f5a	a7 8a					.word	Command_GOSUB                    ; $a8 GOSUB
>8f5c	c5 8a					.word	GotoCommand                      ; $a9 GOTO
>8f5e	0b 8b					.word	LetCommand                       ; $aa LET
>8f60	fb 8b					.word	Command_LOCAL                    ; $ab LOCAL
>8f62	89 8c					.word	Command_Print                    ; $ac PRINT
>8f64	40 8d					.word	Command_Read                     ; $ad READ
>8f66	99 8d					.word	RemCommand                       ; $ae REM
>8f68	b7 8a					.word	Command_RETURN                   ; $af RETURN
>8f6a	87 8e					.word	Unused2                          ; $b0 TO
.8f6c					VectorSet1:
>8f6c	62 ab					.word	SyntaxError                      ; $80 !0:EOF
>8f6e	62 ab					.word	SyntaxError                      ; $81 !1:SH1
>8f70	62 ab					.word	SyntaxError                      ; $82 !2:SH2
>8f72	0b 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>8f74	2a 88					.word	AssertCommand                    ; $84 ASSERT
>8f76	74 88					.word	ClearCommand                     ; $85 CLEAR
>8f78	91 89					.word	EndCommand                       ; $86 END
>8f7a	60 8b					.word	Command_List                     ; $87 LIST
>8f7c	7f 8c					.word	NewCommand                       ; $88 NEW
>8f7e	c8 8d					.word	Command_Restore                  ; $89 RESTORE
>8f80	fa 8d					.word	CommandRUN                       ; $8a RUN
>8f82	0c 90					.word	StopCommand                      ; $8b STOP
.8f84					VectorSet2:
>8f84	62 ab					.word	SyntaxError                      ; $80 !0:EOF
>8f86	62 ab					.word	SyntaxError                      ; $81 !1:SH1
>8f88	62 ab					.word	SyntaxError                      ; $82 !2:SH2
>8f8a	21 aa					.word	Assemble_adc                     ; $83 ADC
>8f8c	19 aa					.word	Assemble_and                     ; $84 AND
>8f8e	35 aa					.word	Assemble_asl                     ; $85 ASL
>8f90	9f aa					.word	Assemble_bcc                     ; $86 BCC
>8f92	a3 aa					.word	Assemble_bcs                     ; $87 BCS
>8f94	ab aa					.word	Assemble_beq                     ; $88 BEQ
>8f96	62 aa					.word	Assemble_bit                     ; $89 BIT
>8f98	93 aa					.word	Assemble_bmi                     ; $8a BMI
>8f9a	a7 aa					.word	Assemble_bne                     ; $8b BNE
>8f9c	8f aa					.word	Assemble_bpl                     ; $8c BPL
>8f9e	af aa					.word	Assemble_bra                     ; $8d BRA
>8fa0	b3 aa					.word	Assemble_brk                     ; $8e BRK
>8fa2	97 aa					.word	Assemble_bvc                     ; $8f BVC
>8fa4	9b aa					.word	Assemble_bvs                     ; $90 BVS
>8fa6	bb aa					.word	Assemble_clc                     ; $91 CLC
>8fa8	0f ab					.word	Assemble_cld                     ; $92 CLD
>8faa	cf aa					.word	Assemble_cli                     ; $93 CLI
>8fac	ff aa					.word	Assemble_clv                     ; $94 CLV
>8fae	2d aa					.word	Assemble_cmp                     ; $95 CMP
>8fb0	76 aa					.word	Assemble_cpx                     ; $96 CPX
>8fb2	71 aa					.word	Assemble_cpy                     ; $97 CPY
>8fb4	53 aa					.word	Assemble_dec                     ; $98 DEC
>8fb6	0b ab					.word	Assemble_dex                     ; $99 DEX
>8fb8	e7 aa					.word	Assemble_dey                     ; $9a DEY
>8fba	1d aa					.word	Assemble_eor                     ; $9b EOR
>8fbc	58 aa					.word	Assemble_inc                     ; $9c INC
>8fbe	1b ab					.word	Assemble_inx                     ; $9d INX
>8fc0	07 ab					.word	Assemble_iny                     ; $9e INY
>8fc2	8a aa					.word	Assemble_jmp                     ; $9f JMP
>8fc4	85 aa					.word	Assemble_jsr                     ; $a0 JSR
>8fc6	29 aa					.word	Assemble_lda                     ; $a1 LDA
>8fc8	4e aa					.word	Assemble_ldx                     ; $a2 LDX
>8fca	6c aa					.word	Assemble_ldy                     ; $a3 LDY
>8fcc	3f aa					.word	Assemble_lsr                     ; $a4 LSR
>8fce	1f ab					.word	Assemble_nop                     ; $a5 NOP
>8fd0	15 aa					.word	Assemble_ora                     ; $a6 ORA
>8fd2	cb aa					.word	Assemble_pha                     ; $a7 PHA
>8fd4	b7 aa					.word	Assemble_php                     ; $a8 PHP
>8fd6	13 ab					.word	Assemble_phx                     ; $a9 PHX
>8fd8	d3 aa					.word	Assemble_phy                     ; $aa PHY
>8fda	db aa					.word	Assemble_pla                     ; $ab PLA
>8fdc	bf aa					.word	Assemble_plp                     ; $ac PLP
>8fde	27 ab					.word	Assemble_plx                     ; $ad PLX
>8fe0	e3 aa					.word	Assemble_ply                     ; $ae PLY
>8fe2	3a aa					.word	Assemble_rol                     ; $af ROL
>8fe4	44 aa					.word	Assemble_ror                     ; $b0 ROR
>8fe6	c7 aa					.word	Assemble_rti                     ; $b1 RTI
>8fe8	d7 aa					.word	Assemble_rts                     ; $b2 RTS
>8fea	31 aa					.word	Assemble_sbc                     ; $b3 SBC
>8fec	c3 aa					.word	Assemble_sec                     ; $b4 SEC
>8fee	23 ab					.word	Assemble_sed                     ; $b5 SED
>8ff0	df aa					.word	Assemble_sei                     ; $b6 SEI
>8ff2	25 aa					.word	Assemble_sta                     ; $b7 STA
>8ff4	17 ab					.word	Assemble_stp                     ; $b8 STP
>8ff6	49 aa					.word	Assemble_stx                     ; $b9 STX
>8ff8	67 aa					.word	Assemble_sty                     ; $ba STY
>8ffa	5d aa					.word	Assemble_stz                     ; $bb STZ
>8ffc	fb aa					.word	Assemble_tax                     ; $bc TAX
>8ffe	f7 aa					.word	Assemble_tay                     ; $bd TAY
>9000	80 aa					.word	Assemble_trb                     ; $be TRB
>9002	7b aa					.word	Assemble_tsb                     ; $bf TSB
>9004	03 ab					.word	Assemble_tsx                     ; $c0 TSX
>9006	eb aa					.word	Assemble_txa                     ; $c1 TXA
>9008	f3 aa					.word	Assemble_txs                     ; $c2 TXS
>900a	ef aa					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.900c					StopCommand:
.900c	a9 08		lda #$08		lda	#8
.900e	4c 43 92	jmp $9243		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9011					ListConvertLine:
.9011	9c 9d 04	stz $049d			stz 	tbOffset
.9014	9c a9 04	stz $04a9			stz 	tokenBuffer
.9017	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9019	b1 30		lda ($30),y			lda 	(codePtr),y
.901b	aa		tax				tax
.901c	88		dey				dey
.901d	b1 30		lda ($30),y			lda 	(codePtr),y
.901f	20 d8 a6	jsr $a6d8			jsr 	ConvertInt16
.9022	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9024	86 37		stx $37				stx 	zTemp0+1
.9026	a0 00		ldy #$00			ldy 	#0
.9028					_LCCopyNumber:
.9028	b1 36		lda ($36),y			lda 	(zTemp0),y
.902a	20 2a 91	jsr $912a			jsr 	LCLWrite
.902d	c8		iny				iny
.902e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9030	d0 f6		bne $9028			bne 	_LCCopyNumber
.9032					_LCPadOut:
.9032	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9034	20 2a 91	jsr $912a			jsr 	LCLWrite
.9037	ad 9d 04	lda $049d			lda 	tbOffset
.903a	c9 06		cmp #$06			cmp 	#6
.903c	d0 f4		bne $9032			bne 	_LCPadOut
.903e	a0 03		ldy #$03			ldy 	#3 							; start position.
.9040					_LCMainLoop:
.9040	b1 30		lda ($30),y			lda 	(codePtr),y
.9042	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9044	f0 17		beq $905d			beq 	_LCExit
.9046	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9048	90 14		bcc $905e			bcc 	_LCDoubles
.904a	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.904c	90 20		bcc $906e			bcc 	_LCShiftPunc
.904e	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9050	90 2b		bcc $907d			bcc 	_LCPunctuation
.9052	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9054	90 2d		bcc $9083			bcc 	_LCIdentifiers
.9056	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9058	90 49		bcc $90a3			bcc 	_LCTokens
.905a	4c fe 90	jmp $90fe			jmp 	_LCData 					; 254-5 are data objects
.905d					_LCExit:
.905d	60		rts				rts
.905e					_LCDoubles:
.905e	48		pha				pha
.905f	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9060	29 02		and #$02			and 	#2
.9062	09 3c		ora #$3c			ora 	#60 						; make < >
.9064	20 2a 91	jsr $912a			jsr 	LCLWrite
.9067	68		pla				pla 								; restore, do lower bit
.9068	29 03		and #$03			and 	#3
.906a	09 3c		ora #$3c			ora 	#60
.906c	80 0f		bra $907d			bra		_LCPunctuation 				; print, increment, loop
.906e					_LCShiftPunc:
.906e	aa		tax				tax 								; save in X
.906f	29 07		and #$07			and 	#7 							; lower 3 bits
.9071	f0 02		beq $9075			beq 	_LCNoAdd
.9073	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9075					_LCNoAdd:
.9075	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9077	90 02		bcc $907b			bcc 	_LCNoAdd2
.9079	09 20		ora #$20			ora 	#32 						; adds $20
.907b					_LCNoAdd2:
.907b	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.907d					_LCPunctuation:
.907d	c8		iny				iny 								; consume character
.907e	20 2a 91	jsr $912a			jsr 	LCLWrite 					; write it out.
.9081	80 bd		bra $9040			bra 	_LCMainLoop 				; go round again.
.9083					_LCIdentifiers:
.9083	18		clc				clc 								; convert to physical address
.9084	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9086	85 37		sta $37				sta 	zTemp0+1
.9088	c8		iny				iny
.9089	b1 30		lda ($30),y			lda 	(codePtr),y
.908b	85 36		sta $36				sta 	zTemp0
.908d	c8		iny				iny
.908e	5a		phy				phy 								; save position
.908f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9091					_LCOutIdentifier:
.9091	c8		iny				iny
.9092	b1 36		lda ($36),y			lda 	(zTemp0),y
.9094	29 7f		and #$7f			and 	#$7F
.9096	20 58 91	jsr $9158			jsr 	LCLLowerCase
.9099	20 2a 91	jsr $912a			jsr 	LCLWrite
.909c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.909e	10 f1		bpl $9091			bpl 	_LCOutIdentifier
.90a0	7a		ply				ply 								; restore position
.90a1	80 9d		bra $9040			bra 	_LCMainLoop
.90a3					_LCTokens:
.90a3	aa		tax				tax 								; token in X
.90a4	a9 28		lda #$28			lda 	#((KeywordSet2) & $FF)
.90a6	85 36		sta $36				sta 	0+zTemp0
.90a8	a9 a1		lda #$a1			lda 	#((KeywordSet2) >> 8)
.90aa	85 37		sta $37				sta 	1+zTemp0
.90ac	e0 82		cpx #$82			cpx 	#$82
.90ae	f0 16		beq $90c6			beq 	_LCUseShift
.90b0	a9 e4		lda #$e4			lda 	#((KeywordSet1) & $FF)
.90b2	85 36		sta $36				sta 	0+zTemp0
.90b4	a9 a0		lda #$a0			lda 	#((KeywordSet1) >> 8)
.90b6	85 37		sta $37				sta 	1+zTemp0
.90b8	e0 81		cpx #$81			cpx 	#$81
.90ba	f0 0a		beq $90c6			beq 	_LCUseShift
.90bc	a9 b2		lda #$b2			lda 	#((KeywordSet0) & $FF)
.90be	85 36		sta $36				sta 	0+zTemp0
.90c0	a9 9f		lda #$9f			lda 	#((KeywordSet0) >> 8)
.90c2	85 37		sta $37				sta 	1+zTemp0
.90c4	80 01		bra $90c7			bra 	_LCNoShift
.90c6					_LCUseShift:
.90c6	c8		iny				iny
.90c7					_LCNoShift:
.90c7	20 39 91	jsr $9139			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.90ca	b1 30		lda ($30),y			lda 	(codePtr),y
.90cc	aa		tax				tax 								; into X
.90cd					_LCFindText:
.90cd	ca		dex				dex
.90ce	10 0e		bpl $90de			bpl 	_LCFoundText 				; found text.
.90d0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.90d2	1a		inc a				inc 	a 							; one extra for size
.90d3	38		sec				sec 								; one extra for checksum
.90d4	65 36		adc $36				adc 	zTemp0 						; go to next token
.90d6	85 36		sta $36				sta 	zTemp0
.90d8	90 f3		bcc $90cd			bcc 	_LCFindText
.90da	e6 37		inc $37				inc 	zTemp0+1
.90dc	80 ef		bra $90cd			bra 	_LCFindText
.90de					_LCFoundText:
.90de	5a		phy				phy 								; save List position
.90df	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.90e1	aa		tax				tax
.90e2	a0 02		ldy #$02			ldy 	#2
.90e4					_LCCopyToken:
.90e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.90e6	20 58 91	jsr $9158			jsr 	LCLLowerCase
.90e9	20 2a 91	jsr $912a			jsr 	LCLWrite
.90ec	c8		iny				iny
.90ed	ca		dex				dex
.90ee	d0 f4		bne $90e4			bne 	_LCCopyToken
.90f0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.90f2	f0 05		beq $90f9			beq 	_LCNoSpace
.90f4	a9 20		lda #$20			lda 	#' '
.90f6	20 2a 91	jsr $912a			jsr 	LCLWrite
.90f9					_LCNoSpace:
.90f9	7a		ply				ply 								; restore position.
.90fa	c8		iny				iny 								; consume token
.90fb	4c 40 90	jmp $9040			jmp 	_LCMainLoop 				; and go around again.
.90fe					_LCData:
.90fe	48		pha				pha 								; save type $FE/$FF
.90ff	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9101	c9 fe		cmp #$fe			cmp 	#$FE
.9103	f0 02		beq $9107			beq 	_LCHaveOpener
.9105	a2 22		ldx #$22			ldx 	#'"'
.9107					_LCHaveOpener:
.9107	8a		txa				txa 								; output prefix (# or ")
.9108	20 2a 91	jsr $912a			jsr 	LCLWrite
.910b	c8		iny				iny 								; get count
.910c	b1 30		lda ($30),y			lda 	(codePtr),y
.910e	aa		tax				tax
.910f	c8		iny				iny 								; point at first character
.9110					_LCOutData:
.9110	b1 30		lda ($30),y			lda 	(codePtr),y
.9112	c9 00		cmp #$00			cmp 	#0
.9114	f0 03		beq $9119			beq 	_LCNoPrint
.9116	20 2a 91	jsr $912a			jsr 	LCLWrite
.9119					_LCNoPrint:
.9119	c8		iny				iny
.911a	ca		dex				dex
.911b	d0 f3		bne $9110			bne 	_LCOutData
.911d	68		pla				pla 								; closing " required ?
.911e	c9 ff		cmp #$ff			cmp 	#$FF
.9120	d0 05		bne $9127			bne 	_LCNoQuote
.9122	a9 22		lda #$22			lda 	#'"'
.9124	20 2a 91	jsr $912a			jsr 	LCLWrite
.9127					_LCNoQuote:
.9127	4c 40 90	jmp $9040			jmp 	_LCMainLoop
.912a					LCLWrite:
.912a	da		phx				phx
.912b	ae 9d 04	ldx $049d			ldx 	tbOffset
.912e	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9131	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9134	ee 9d 04	inc $049d			inc 	tbOffset
.9137	fa		plx				plx
.9138	60		rts				rts
.9139					LCCheckSpaceRequired:
.9139	ae 9d 04	ldx $049d			ldx 	tbOffset
.913c	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.913f	20 58 91	jsr $9158			jsr 	LCLLowerCase 				; saves a little effort
.9142	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9144	90 11		bcc $9157			bcc 	_LCCSRExit
.9146	c9 3a		cmp #$3a			cmp 	#"9"+1
.9148	90 08		bcc $9152			bcc 	_LCCSRSpace
.914a	c9 61		cmp #$61			cmp 	#"a"
.914c	90 09		bcc $9157			bcc 	_LCCSRExit
.914e	c9 7b		cmp #$7b			cmp 	#"z"+1
.9150	b0 05		bcs $9157			bcs 	_LCCSRExit
.9152					_LCCSRSpace:
.9152	a9 20		lda #$20			lda 	#' '
.9154	20 2a 91	jsr $912a			jsr 	LCLWrite
.9157					_LCCSRExit:
.9157	60		rts				rts
.9158					LCLLowerCase:
.9158	c9 41		cmp #$41			cmp 	#"A"
.915a	90 06		bcc $9162			bcc 	_LCLLCOut
.915c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.915e	b0 02		bcs $9162			bcs 	_LCLLCOut
.9160	69 20		adc #$20			adc 	#$20
.9162					_LCLLCOut:
.9162	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9163					ProcedureScan:
.9163	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9165	85 30		sta $30				sta 	codePtr
.9167	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9169	85 31		sta $31				sta 	codePtr+1
.916b					_PSLoop:
.916b	b2 30		lda ($30)			lda 	(codePtr)
.916d	f0 42		beq $91b1			beq 	_PSExit
.916f	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9171	b1 30		lda ($30),y			lda 	(codePtr),y
.9173	c9 99		cmp #$99			cmp 	#KWD_PROC
.9175	d0 2d		bne $91a4			bne 	_PSNext
.9177	c8		iny				iny 								; get the address of the record to zTemp0 and
.9178	b1 30		lda ($30),y			lda 	(codePtr),y
.917a	29 c0		and #$c0			and 	#$C0
.917c	c9 40		cmp #$40			cmp 	#$40
.917e	d0 32		bne $91b2			bne 	_PSSyntax
.9180	b1 30		lda ($30),y			lda 	(codePtr),y
.9182	18		clc				clc
.9183	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9185	85 37		sta $37				sta 	zTemp0+1
.9187	c8		iny				iny 								; LSB
.9188	b1 30		lda ($30),y			lda 	(codePtr),y
.918a	85 36		sta $36				sta 	zTemp0
.918c	c8		iny				iny 								; character after variable call.
.918d	98		tya				tya 								; save Y offset at +7
.918e	a0 07		ldy #$07			ldy 	#7
.9190	91 36		sta ($36),y			sta 	(zTemp0),y
.9192	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9194	a0 02		ldy #$02			ldy 	#2
.9196	91 36		sta ($36),y			sta 	(zTemp0),y
.9198	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.919a					_PSCopy:
.919a	b5 30		lda $30,x			lda 	safePtr,x
.919c	c8		iny				iny
.919d	91 36		sta ($36),y			sta 	(zTemp0),y
.919f	e8		inx				inx
.91a0	e0 04		cpx #$04			cpx 	#4
.91a2	d0 f6		bne $919a			bne 	_PSCopy
.91a4					_PSNext:
.91a4	18		clc				clc
.91a5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91a7	65 30		adc $30				adc 	codePtr
.91a9	85 30		sta $30				sta 	codePtr
.91ab	90 02		bcc $91af			bcc 	_CREExit
.91ad	e6 31		inc $31				inc 	codePtr+1
.91af					_CREExit:
.91af	80 ba		bra $916b			bra 	_PSLoop
.91b1					_PSExit:
.91b1	60		rts				rts
.91b2					_PSSyntax:
.91b2	4c 62 ab	jmp $ab62			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.91b5					ScanForward:
.91b5	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.91b7	86 37		stx $37				stx 	zTemp0+1
.91b9	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.91bb					_ScanLoop:
.91bb	b1 30		lda ($30),y			lda 	(codePtr),y
.91bd	c8		iny				iny
.91be	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.91c0	d0 0e		bne $91d0			bne 	_ScanGoNext
.91c2	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.91c4	f0 04		beq $91ca			beq 	_ScanMatch
.91c6	c5 37		cmp $37				cmp 	zTemp0+1
.91c8	d0 06		bne $91d0			bne 	_ScanGoNext
.91ca					_ScanMatch:
.91ca	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.91cc	d0 01		bne $91cf			bne 	_ScanNotEndEOL
.91ce	88		dey				dey
.91cf					_ScanNotEndEOL:
.91cf	60		rts				rts
.91d0					_ScanGoNext:
.91d0	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.91d2	90 e7		bcc $91bb			bcc 	_ScanLoop
.91d4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.91d6	90 18		bcc $91f0			bcc 	_ScanSkipOne
.91d8	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.91da	b0 2f		bcs $920b			bcs 	_ScanSkipData
.91dc	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.91de	90 db		bcc $91bb			bcc 	_ScanLoop 					; if not, ordinary keywords.
.91e0	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.91e2	b0 d7		bcs $91bb			bcs 	_ScanLoop
.91e4	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.91e6	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.91e8	b0 d1		bcs $91bb			bcs 	_ScanLoop
.91ea	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.91ec	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.91ee	80 cb		bra $91bb			bra 	_ScanLoop
.91f0					_ScanSkipOne:
.91f0	c8		iny				iny 								; consume the extra one.
.91f1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.91f3	d0 c6		bne $91bb			bne 	_ScanLoop
.91f5	18		clc				clc
.91f6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91f8	65 30		adc $30				adc 	codePtr
.91fa	85 30		sta $30				sta 	codePtr
.91fc	90 02		bcc $9200			bcc 	_CREExit
.91fe	e6 31		inc $31				inc 	codePtr+1
.9200					_CREExit:
.9200	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9202	b2 30		lda ($30)			lda 	(codePtr)
.9204	d0 b5		bne $91bb			bne 	_ScanLoop 					; if not zero, more to scan
.9206	a9 13		lda #$13		lda	#19
.9208	4c 43 92	jmp $9243		jmp	ErrorHandler
.920b					_ScanSkipData:
.920b	88		dey				dey 								; point at data token
.920c	c8		iny				iny
.920d	98		tya				tya
.920e	38		sec				sec
.920f	71 30		adc ($30),y			adc 	(codePtr),y
.9211	a8		tay				tay
.9212	80 a7		bra $91bb			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9214					Command_WHILE:
.9214	5a		phy				phy 								; save position of the test
.9215	a2 00		ldx #$00			ldx 	#0
.9217	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber 				; work out the number
.921a	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; check if zero
.921d	f0 0e		beq $922d			beq 	_WHExitLoop 				; if so exit the loop
.921f	98		tya				tya 								; position *after* test.
.9220	7a		ply				ply 								; restore position before test, at WHILE
.9221	88		dey				dey
.9222	48		pha				pha 								; push after test on the stack
.9223	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9225	20 af 9e	jsr $9eaf			jsr 	StackOpen
.9228	20 f3 9e	jsr $9ef3			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.922b	7a		ply				ply 								; restore the position *after* the test
.922c	60		rts				rts
.922d					_WHExitLoop:
.922d	68		pla				pla 								; throw post loop position
.922e	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.9230	aa		tax				tax
.9231	20 b5 91	jsr $91b5			jsr 	ScanForward
.9234	60		rts				rts
.9235					Command_WEND:
.9235	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9237	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9239	20 db 9e	jsr $9edb			jsr 	StackCheckFrame
.923c	20 04 9f	jsr $9f04			jsr 	STKLoadCodePosition 		; loop back
.923f	20 cd 9e	jsr $9ecd			jsr 	StackClose		 			; erase the frame
.9242	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a57c					CheckRightBracket:
.a57c	b1 30		lda ($30),y			lda 	(codePtr),y
.a57e	c8		iny				iny
.a57f	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a581	d0 0f		bne $a592			bne 	CNAFail
.a583	60		rts				rts
.a584					CheckComma:
.a584	b1 30		lda ($30),y			lda 	(codePtr),y
.a586	c8		iny				iny
.a587	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a589	d0 07		bne $a592			bne 	CNAFail
.a58b	60		rts				rts
.a58c					CheckNextA:
.a58c	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a58e	d0 02		bne $a592			bne 	CNAFail
.a590	c8		iny				iny 								; skip character
.a591	60		rts				rts 								; and exit
.a592					CNAFail:
.a592	4c 62 ab	jmp $ab62			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9243					ErrorHandler:
.9243	a8		tay				tay 								; find the error text
.9244	f0 49		beq $928f			beq 	_EHEnd
.9246	a2 00		ldx #$00			ldx 	#0
.9248	a9 7b		lda #$7b			lda 	#((ErrorText) & $FF)
.924a	85 36		sta $36				sta 	0+zTemp0
.924c	a9 ab		lda #$ab			lda 	#((ErrorText) >> 8)
.924e	85 37		sta $37				sta 	1+zTemp0
.9250					_EHFind:
.9250	88		dey				dey 								; found the error text ?
.9251	f0 0e		beq $9261			beq 	_EHFound
.9253					_EHFindZero:
.9253	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9255	e6 36		inc $36				inc 	zTemp0
.9257	d0 02		bne $925b			bne 	_EHFNoCarry
.9259	e6 37		inc $37				inc 	zTemp0+1
.925b					_EHFNoCarry:
.925b	c9 00		cmp #$00			cmp 	#0
.925d	d0 f4		bne $9253			bne 	_EHFindZero
.925f	80 ef		bra $9250			bra 	_EHFind
.9261					_EHFound:
.9261	a5 36		lda $36				lda 	zTemp0 						; print message
.9263	a6 37		ldx $37				ldx 	zTemp0+1
.9265	20 9c 92	jsr $929c			jsr 	PrintStringXA
.9268	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.926a	b1 30		lda ($30),y			lda 	(codePtr),y
.926c	d0 05		bne $9273			bne 	_EHAtMsg
.926e	c8		iny				iny
.926f	b1 30		lda ($30),y			lda 	(codePtr),y
.9271	f0 17		beq $928a			beq 	_EHCREnd
.9273					_EHAtMsg:
.9273	a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.9275	a9 92		lda #$92			lda 	#_AtMsg & $FF
.9277	20 9c 92	jsr $929c			jsr 	PrintStringXA
.927a	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.927c	b1 30		lda ($30),y			lda 	(codePtr),y
.927e	48		pha				pha
.927f	c8		iny				iny
.9280	b1 30		lda ($30),y			lda 	(codePtr),y
.9282	aa		tax				tax
.9283	68		pla				pla
.9284	20 d8 a6	jsr $a6d8			jsr 	ConvertInt16 				; convert XA to string
.9287	20 9c 92	jsr $929c			jsr 	PrintStringXA 				; and print it.
.928a					_EHCREnd:
.928a	a9 0d		lda #$0d			lda 	#13 						; new line
.928c	20 05 ad	jsr $ad05			jsr 	EXTPrintCharacter
.928f					_EHEnd:
.928f	4c db 87	jmp $87db			jmp 	WarmStart
>9292	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>929a	20 00
.929c					PrintStringXA:
.929c	5a		phy				phy
.929d	86 37		stx $37				stx 	zTemp0+1
.929f	85 36		sta $36				sta 	zTemp0
.92a1	a0 00		ldy #$00			ldy 	#0
.92a3					_PSXALoop:
.92a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.92a5	f0 06		beq $92ad			beq 	_PSXAExit
.92a7	20 05 ad	jsr $ad05			jsr 	EXTPrintCharacter
.92aa	c8		iny				iny
.92ab	80 f6		bra $92a3			bra 	_PSXALoop
.92ad					_PSXAExit:
.92ad	7a		ply				ply
.92ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.92af					UnaryTrue:
.92af	fa		plx				plx
.92b0					ReturnTrue:
.92b0	a9 01		lda #$01			lda 	#1  						; set to 1
.92b2	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.92b5	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.92b7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92ba	60		rts				rts
.92bb					UnaryFalse:
.92bb	fa		plx				plx
.92bc					ReturnFalse:
.92bc	4c fb 9d	jmp $9dfb			jmp 	NSMSetZero 					; set it all to zero
.92bf					BinaryCompareEqual:
.92bf	fa		plx				plx
.92c0	20 fb 92	jsr $92fb			jsr 	CompareBaseCode
.92c3	c9 00		cmp #$00			cmp 	#0
.92c5	f0 e9		beq $92b0			beq 	ReturnTrue
.92c7	80 f3		bra $92bc			bra 	ReturnFalse
.92c9					BinaryCompareLess:
.92c9	fa		plx				plx
.92ca	20 fb 92	jsr $92fb			jsr 	CompareBaseCode
.92cd	c9 ff		cmp #$ff			cmp 	#$FF
.92cf	f0 df		beq $92b0			beq 	ReturnTrue
.92d1	80 e9		bra $92bc			bra 	ReturnFalse
.92d3					BinaryCompareGreater:
.92d3	fa		plx				plx
.92d4	20 fb 92	jsr $92fb			jsr 	CompareBaseCode
.92d7	c9 01		cmp #$01			cmp 	#1
.92d9	f0 d5		beq $92b0			beq 	ReturnTrue
.92db	80 df		bra $92bc			bra 	ReturnFalse
.92dd					BinaryCompareNotEqual:
.92dd	fa		plx				plx
.92de	20 fb 92	jsr $92fb			jsr 	CompareBaseCode
.92e1	c9 00		cmp #$00			cmp 	#0
.92e3	d0 cb		bne $92b0			bne 	ReturnTrue
.92e5	80 d5		bra $92bc			bra 	ReturnFalse
.92e7					BinaryCompareLessEqual:
.92e7	fa		plx				plx
.92e8	20 fb 92	jsr $92fb			jsr 	CompareBaseCode
.92eb	c9 01		cmp #$01			cmp 	#1
.92ed	d0 c1		bne $92b0			bne 	ReturnTrue
.92ef	80 cb		bra $92bc			bra 	ReturnFalse
.92f1					BinaryCompareGreaterEqual:
.92f1	fa		plx				plx
.92f2	20 fb 92	jsr $92fb			jsr 	CompareBaseCode
.92f5	c9 ff		cmp #$ff			cmp 	#$FF
.92f7	d0 b7		bne $92b0			bne 	ReturnTrue
.92f9	80 c1		bra $92bc			bra 	ReturnFalse
.92fb					CompareBaseCode:
.92fb	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; make both values if references.
.92fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9301	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9304	29 10		and #$10			and 	#NSTString
.9306	d0 40		bne $9348			bne 	_CBCString
.9308	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.930b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.930e	d0 3b		bne $934b			bne 	_CBCFloat
.9310	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9313	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9316	29 08		and #$08			and 	#NSTFloat
.9318	d0 31		bne $934b			bne 	_CBCFloat
.931a	20 4e 93	jsr $934e			jsr 	CompareFixMinusZero
.931d	e8		inx				inx
.931e	20 4e 93	jsr $934e			jsr 	CompareFixMinusZero
.9321	ca		dex				dex
.9322	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9325	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9328	10 0b		bpl $9335			bpl 	_CDCSameSign
.932a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.932d	30 16		bmi $9345			bmi 	_CBCLess 					; return $FF
.932f					_CBCGreater:
.932f	a9 01		lda #$01			lda 	#1
.9331	60		rts				rts
.9332					_CBCEqual:
.9332	a9 00		lda #$00			lda 	#0
.9334	60		rts				rts
.9335					_CDCSameSign:
.9335	20 5e 94	jsr $945e			jsr 	SubTopTwoStack 				; unsigned subtract
.9338	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; or the mantissa together
.933b	f0 f5		beq $9332			beq 	_CBCEqual 					; -0 == 0
.933d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9340	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9343	10 ea		bpl $932f			bpl 	_CBCGreater
.9345					_CBCLess:
.9345	a9 ff		lda #$ff			lda 	#$FF
.9347	60		rts				rts
.9348					_CBCString:
.9348	4c b4 93	jmp $93b4			jmp 	CompareStrings
.934b					_CBCFloat:
.934b	4c d4 a7	jmp $a7d4			jmp 	CompareFloat
.934e					CompareFixMinusZero:
.934e	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero
.9351	d0 03		bne $9356			bne 	_CFXMZNotZero
.9353	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9356					_CFXMZNotZero:
.9356	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9357					StringConcat:
.9357	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.935a	3d 01 04	and $0401,x			and 	NSStatus+1,x
.935d	29 18		and #$18			and 	#NSBTypeMask
.935f	c9 10		cmp #$10			cmp 	#NSTString
.9361	d0 4e		bne $93b1			bne		_SCType
.9363	64 38		stz $38				stz 	zTemp1 						; counting total length
.9365	e8		inx				inx
.9366	20 84 93	jsr $9384			jsr 	_SCSetupZ0 					; setup for second
.9369	20 8f 93	jsr $938f			jsr 	_SCLengthZ0 				; length for second
.936c	ca		dex				dex
.936d	20 84 93	jsr $9384			jsr 	_SCSetupZ0 					; setup for first
.9370	20 8f 93	jsr $938f			jsr 	_SCLengthZ0 				; length for first
.9373	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9375	20 87 ae	jsr $ae87			jsr 	StringTempAllocate
.9378	20 a2 93	jsr $93a2			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.937b	e8		inx				inx
.937c	20 84 93	jsr $9384			jsr 	_SCSetupZ0 					; copy second out
.937f	20 a2 93	jsr $93a2			jsr 	_SCCopy
.9382	ca		dex				dex
.9383	60		rts				rts
.9384					_SCSetupZ0:
.9384	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9387	85 36		sta $36				sta 	zTemp0
.9389	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.938c	85 37		sta $37				sta 	zTemp0+1
.938e	60		rts				rts
.938f					_SCLengthZ0:
.938f	5a		phy				phy
.9390	a0 00		ldy #$00			ldy 	#0
.9392					_SCLenLoop:
.9392	b1 36		lda ($36),y			lda 	(zTemp0),y
.9394	f0 0a		beq $93a0			beq 	_SCLExit
.9396	c8		iny				iny
.9397	e6 38		inc $38				inc 	zTemp1
.9399	10 f7		bpl $9392			bpl		_SCLenLoop
.939b	a9 09		lda #$09		lda	#9
.939d	4c 43 92	jmp $9243		jmp	ErrorHandler
.93a0					_SCLExit:
.93a0	7a		ply				ply
.93a1	60		rts				rts
.93a2					_SCCopy:
.93a2	5a		phy				phy
.93a3	a0 00		ldy #$00			ldy 	#0
.93a5					_SCCopyLoop:
.93a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.93a7	f0 06		beq $93af			beq 	_SCCExit
.93a9	20 c5 ae	jsr $aec5			jsr 	StringTempWrite
.93ac	c8		iny				iny
.93ad	80 f6		bra $93a5			bra 	_SCCopyLoop
.93af					_SCCExit:
.93af	7a		ply				ply
.93b0	60		rts				rts
.93b1					_SCType:
.93b1	4c 6c ab	jmp $ab6c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a595					IntegerDivide:
.a595	fa		plx				plx
.a596	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a599	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a59c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a59d	0a		asl a				asl 	a
.a59e	10 05		bpl $a5a5			bpl 	_NotRef
.a5a0	48		pha				pha
.a5a1	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a5a4	68		pla				pla
.a5a5					_NotRef:
.a5a5	0a		asl a				asl 	a
.a5a6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a5a8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a5ab	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a5ae	f0 03		beq $a5b3			beq 	_IntegerCode 				; if clear, then we have two integers
.a5b0	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.a5b3					_IntegerCode:
.a5b3	20 d5 a5	jsr $a5d5			jsr 	CheckDivideZero 			; do div zero check
.a5b6	20 0d a6	jsr $a60d			jsr 	Int32Divide 				; do the division
.a5b9	20 ca a6	jsr $a6ca			jsr 	CalculateSign 				; calculate result sign
.a5bc					NSMCopyPlusTwoToZero:
.a5bc	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a5bf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5c2	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a5c5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5c8	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a5cb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5ce	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a5d1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a5d4	60		rts				rts
.a5d5					CheckDivideZero:
.a5d5	e8		inx				inx
.a5d6	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero
.a5d9	f0 02		beq $a5dd			beq 	_CDVError
.a5db	ca		dex				dex
.a5dc	60		rts				rts
.a5dd					_CDVError:
.a5dd	a9 03		lda #$03		lda	#3
.a5df	4c 43 92	jmp $9243		jmp	ErrorHandler
.a5e2					IntegerModulus:
.a5e2	fa		plx				plx
.a5e3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a5e6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a5e9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a5ea	0a		asl a				asl 	a
.a5eb	10 05		bpl $a5f2			bpl 	_NotRef
.a5ed	48		pha				pha
.a5ee	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a5f1	68		pla				pla
.a5f2					_NotRef:
.a5f2	0a		asl a				asl 	a
.a5f3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a5f5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a5f8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a5fb	f0 03		beq $a600			beq 	_IntegerCode 				; if clear, then we have two integers
.a5fd	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.a600					_IntegerCode:
.a600					IntegerModulusNoCheck:
.a600	20 d5 a5	jsr $a5d5			jsr 	CheckDivideZero 			; do div zero check
.a603	20 0d a6	jsr $a60d			jsr 	Int32Divide 				; do the division
.a606	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a609	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a60c	60		rts				rts
.a60d					Int32Divide:
.a60d	48		pha				pha 								; save AXY
.a60e	5a		phy				phy
.a60f	20 d2 9d	jsr $9dd2			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a612	20 f7 9d	jsr $9df7			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a615	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a617					_I32DivideLoop:
.a617	e8		inx				inx
.a618	e8		inx				inx
.a619	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a61c	ca		dex				dex
.a61d	ca		dex				dex
.a61e	20 11 9e	jsr $9e11			jsr 	NSMRotateLeft
.a621	20 4d a6	jsr $a64d			jsr 	DivideCheckSubtract 		; check if subtract possible
.a624	90 03		bcc $a629			bcc 	_I32DivideNoCarryIn
.a626	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a629					_I32DivideNoCarryIn:
.a629	88		dey				dey 								; loop round till division completed.
.a62a	d0 eb		bne $a617			bne 	_I32DivideLoop
.a62c	7a		ply				ply 								; restore AXY and exit
.a62d	68		pla				pla
.a62e	60		rts				rts
.a62f					Int32ShiftDivide:
.a62f	48		pha				pha 								; save AY
.a630	5a		phy				phy
.a631	e8		inx				inx 								; clear S[X+2]
.a632	e8		inx				inx
.a633	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero
.a636	ca		dex				dex
.a637	ca		dex				dex
.a638	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a63a					_I32SDLoop:
.a63a	20 4d a6	jsr $a64d			jsr 	DivideCheckSubtract 		; check if subtract possible
.a63d	e8		inx				inx
.a63e	e8		inx				inx
.a63f	20 11 9e	jsr $9e11			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a642	ca		dex				dex
.a643	ca		dex				dex
.a644	20 11 9e	jsr $9e11			jsr 	NSMRotateLeft
.a647	88		dey				dey 	 							; do 31 times
.a648	d0 f0		bne $a63a			bne 	_I32SDLoop
.a64a	7a		ply				ply 								; restore AY and exit
.a64b	68		pla				pla
.a64c	60		rts				rts
.a64d					DivideCheckSubtract:
.a64d	20 5e 94	jsr $945e			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a650	b0 04		bcs $a656			bcs 	_DCSExit 					; if carry set, then could do, exit
.a652	20 38 94	jsr $9438			jsr 	AddTopTwoStack 				; add it back in
.a655	18		clc				clc 								; and return False
.a656					_DCSExit:
.a656	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a657					MulInteger:
.a657	fa		plx				plx
.a658	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a65b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a65e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a65f	0a		asl a				asl 	a
.a660	10 05		bpl $a667			bpl 	_NotRef
.a662	48		pha				pha
.a663	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a666	68		pla				pla
.a667					_NotRef:
.a667	0a		asl a				asl 	a 							; put MSB of type into A:7
.a668	30 0b		bmi $a675			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a66a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a66d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a670	f0 06		beq $a678			beq 	_IntegerCode 				; if clear, then we have two integers
.a672	4c ab a8	jmp $a8ab			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a675					_StringData:
.a675	4c 76 ab	jmp $ab76			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a678					_IntegerCode:
.a678	20 85 a6	jsr $a685			jsr 	MultiplyShort
.a67b	c9 00		cmp #$00			cmp 	#0
.a67d	f0 05		beq $a684			beq 	_MIExit
.a67f	a9 04		lda #$04		lda	#4
.a681	4c 43 92	jmp $9243		jmp	ErrorHandler
.a684					_MIExit:
.a684	60		rts				rts
.a685					MultiplyShort:
.a685	5a		phy				phy 								; save Y
.a686	20 d2 9d	jsr $9dd2			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a689	20 f7 9d	jsr $9df7			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a68c	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a68e					_I32MLoop:
.a68e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a691	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a694	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a697	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a69a	f0 28		beq $a6c4			beq 	_I32MExit 					; exit if zero
.a69c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a69f	29 01		and #$01			and 	#1
.a6a1	f0 0e		beq $a6b1			beq 	_I32MNoAdd
.a6a3	20 38 94	jsr $9438			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a6a6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a6a9	10 06		bpl $a6b1			bpl 	_I32MNoAdd
.a6ab					_I32ShiftRight:
.a6ab	20 1e 9e	jsr $9e1e			jsr 	NSMShiftRight 				; shift S[X] right
.a6ae	c8		iny				iny 								; increment shift count
.a6af	80 0a		bra $a6bb			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a6b1					_I32MNoAdd:
.a6b1	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a6b4	70 f5		bvs $a6ab			bvs 	_I32ShiftRight 				; instead.
.a6b6	e8		inx				inx
.a6b7	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a6ba	ca		dex				dex
.a6bb					_I32MShiftUpper:
.a6bb	e8		inx				inx 								; shift S[X+2] right
.a6bc	e8		inx				inx
.a6bd	20 1e 9e	jsr $9e1e			jsr 	NSMShiftRight
.a6c0	ca		dex				dex
.a6c1	ca		dex				dex
.a6c2	80 ca		bra $a68e			bra 	_I32MLoop 					; try again.
.a6c4					_I32MExit:
.a6c4	20 ca a6	jsr $a6ca			jsr 	CalculateSign
.a6c7	98		tya				tya 								; shift in A
.a6c8	7a		ply				ply 								; restore Y and exit
.a6c9	60		rts				rts
.a6ca					CalculateSign:
.a6ca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a6cd	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a6d0	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a6d3	0a		asl a				asl 	a 							; shift bit 7 into carry
.a6d4	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a6d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.93b4					CompareStrings:
.93b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.93b7	3d 01 04	and $0401,x			and 	NSStatus+1,x
.93ba	29 10		and #$10			and 	#NSBIsString
.93bc	f0 2c		beq $93ea			beq 	_CSTypeError
.93be	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.93c1	85 36		sta $36				sta 	zTemp0
.93c3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93c6	85 37		sta $37				sta 	zTemp0+1
.93c8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93cb	85 38		sta $38				sta 	zTemp1
.93cd	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93d0	85 39		sta $39				sta 	zTemp1+1
.93d2	5a		phy				phy 								; save Y so we can access strings
.93d3	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.93d5					_CSLoop:
.93d5	c8		iny				iny
.93d6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.93d8	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.93da	d0 06		bne $93e2			bne 	_CSDifferent
.93dc	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.93de	d0 f5		bne $93d5			bne 	_CSLoop 					; still comparing
.93e0					_CSExit:
.93e0	7a		ply				ply 								; reached end, return zero in A from EOS
.93e1	60		rts				rts
.93e2					_CSDifferent:
.93e2	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.93e4	90 fa		bcc $93e0			bcc		_CSExit
.93e6	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.93e8	80 f6		bra $93e0			bra 	_CSExit
.93ea					_CSTypeError:
.93ea	4c 6c ab	jmp $ab6c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.93ed					ShiftLeft:
.93ed	38		sec				sec
.93ee	80 01		bra $93f1			bra 	ShiftMain
.93f0					ShiftRight:
.93f0	18		clc				clc
.93f1					ShiftMain:
.93f1	fa		plx				plx 								; restore X
.93f2	08		php				php 								; save direction
.93f3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93f6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93f9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93fa	0a		asl a				asl 	a
.93fb	10 05		bpl $9402			bpl 	_NotRef
.93fd	48		pha				pha
.93fe	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9401	68		pla				pla
.9402					_NotRef:
.9402	0a		asl a				asl 	a
.9403	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9405	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9408	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.940b	f0 03		beq $9410			beq 	_IntegerCode 				; if clear, then we have two integers
.940d	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.9410					_IntegerCode:
.9410	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9413	29 e0		and #$e0			and 	#$E0
.9415	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9418	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.941b	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.941e	d0 13		bne $9433			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9420					_SMLoop:
.9420	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9423	30 11		bmi $9436			bmi 	_SMExit 					; exit if done.
.9425	28		plp				plp 								; restore direcition setting
.9426	08		php				php
.9427	90 05		bcc $942e			bcc 	_SMRight
.9429	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; shift left if CS
.942c	80 f2		bra $9420			bra 	_SMLoop
.942e					_SMRight:
.942e	20 1e 9e	jsr $9e1e			jsr 	NSMShiftRight 				; shift right if CC
.9431	80 ed		bra $9420			bra 	_SMLoop
.9433					_SMExit0:
.9433	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero 					; return zero.
.9436					_SMExit:
.9436	28		plp				plp 								; throw direction
.9437	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9438					AddTopTwoStack:
.9438	18		clc				clc
.9439	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.943c	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.943f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9442	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9445	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9448	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.944b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.944e	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9451	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9454	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9457	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.945a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.945d	60		rts				rts
.945e					SubTopTwoStack:
.945e	38		sec				sec
.945f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9462	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9465	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9468	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.946b	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.946e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9471	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9474	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9477	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.947a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.947d	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9480	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9483	60		rts				rts
.9484					AddInteger:
.9484	fa		plx				plx
.9485	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9488	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.948b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.948c	0a		asl a				asl 	a
.948d	10 05		bpl $9494			bpl 	_NotRef
.948f	48		pha				pha
.9490	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9493	68		pla				pla
.9494					_NotRef:
.9494	0a		asl a				asl 	a 							; put MSB of type into A:7
.9495	30 0b		bmi $94a2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9497	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.949a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.949d	f0 06		beq $94a5			beq 	_IntegerCode 				; if clear, then we have two integers
.949f	4c 33 a7	jmp $a733			jmp 	FloatingPointAdd 							; otherwise at least one float.
.94a2					_StringData:
.94a2	4c 57 93	jmp $9357			jmp 	StringConcat							; at least one string - don't know both are strings.
.94a5					_IntegerCode:
.94a5					AddCode:
.94a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.94a8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.94ab	10 8b		bpl $9438			bpl 	AddTopTwoStack
.94ad	20 5e 94	jsr $945e			jsr 	SubTopTwoStack 				; do a physical subtraction
.94b0	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.94b3	10 09		bpl $94be			bpl 	_AddExit
.94b5	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.94b8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94bb	20 b0 9d	jsr $9db0			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.94be					_AddExit:
.94be	60		rts				rts
.94bf					SubInteger:
.94bf	fa		plx				plx
.94c0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94c3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94c6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94c7	0a		asl a				asl 	a
.94c8	10 05		bpl $94cf			bpl 	_NotRef
.94ca	48		pha				pha
.94cb	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94ce	68		pla				pla
.94cf					_NotRef:
.94cf	0a		asl a				asl 	a 							; put MSB of type into A:7
.94d0	30 0b		bmi $94dd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94d2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94d5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94d8	f0 06		beq $94e0			beq 	_IntegerCode 				; if clear, then we have two integers
.94da	4c 38 a7	jmp $a738			jmp 	FloatingPointSub 							; otherwise at least one float.
.94dd					_StringData:
.94dd	4c 76 ab	jmp $ab76			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94e0					_IntegerCode:
.94e0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.94e3	49 80		eor #$80			eor 	#$80
.94e5	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.94e8	80 bb		bra $94a5			bra 	AddCode 					; and do the same code as add.
.94ea					AndInteger:
.94ea	fa		plx				plx
.94eb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94ee	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94f1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f2	0a		asl a				asl 	a
.94f3	10 05		bpl $94fa			bpl 	_NotRef
.94f5	48		pha				pha
.94f6	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94f9	68		pla				pla
.94fa					_NotRef:
.94fa	0a		asl a				asl 	a
.94fb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94fd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9500	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9503	f0 03		beq $9508			beq 	_IntegerCode 				; if clear, then we have two integers
.9505	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.9508					_IntegerCode:
.9508	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.950b	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.950e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9511	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9514	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9517	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.951a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.951d	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9520	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9523	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9526	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9529	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.952c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.952f	60		rts				rts
.9530					OraInteger:
.9530	fa		plx				plx
.9531	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9534	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9537	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9538	0a		asl a				asl 	a
.9539	10 05		bpl $9540			bpl 	_NotRef
.953b	48		pha				pha
.953c	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.953f	68		pla				pla
.9540					_NotRef:
.9540	0a		asl a				asl 	a
.9541	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9543	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9546	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9549	f0 03		beq $954e			beq 	_IntegerCode 				; if clear, then we have two integers
.954b	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.954e					_IntegerCode:
.954e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9551	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9554	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9557	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.955a	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.955d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9560	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9563	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9566	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9569	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.956c	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.956f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9572	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9575	60		rts				rts
.9576					EorInteger:
.9576	fa		plx				plx
.9577	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.957a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.957d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.957e	0a		asl a				asl 	a
.957f	10 05		bpl $9586			bpl 	_NotRef
.9581	48		pha				pha
.9582	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9585	68		pla				pla
.9586					_NotRef:
.9586	0a		asl a				asl 	a
.9587	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9589	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.958c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.958f	f0 03		beq $9594			beq 	_IntegerCode 				; if clear, then we have two integers
.9591	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.9594					_IntegerCode:
.9594	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9597	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.959a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.959d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95a0	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.95a3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95a6	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95a9	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.95ac	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95af	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95b2	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.95b5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95b8	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95bb	60		rts				rts
.95bc					WordIndirect:
.95bc	fa		plx				plx
.95bd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95c0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95c3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95c4	0a		asl a				asl 	a
.95c5	10 05		bpl $95cc			bpl 	_NotRef
.95c7	48		pha				pha
.95c8	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95cb	68		pla				pla
.95cc					_NotRef:
.95cc	0a		asl a				asl 	a
.95cd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95cf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95d2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95d5	f0 03		beq $95da			beq 	_IntegerCode 				; if clear, then we have two integers
.95d7	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.95da					_IntegerCode:
.95da	20 a5 94	jsr $94a5			jsr 	AddCode 					; add the two values
.95dd	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.95df	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95e2	60		rts				rts
.95e3					ByteIndirect:
.95e3	fa		plx				plx
.95e4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95e7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95ea	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95eb	0a		asl a				asl 	a
.95ec	10 05		bpl $95f3			bpl 	_NotRef
.95ee	48		pha				pha
.95ef	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95f2	68		pla				pla
.95f3					_NotRef:
.95f3	0a		asl a				asl 	a
.95f4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95f6	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95f9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95fc	f0 03		beq $9601			beq 	_IntegerCode 				; if clear, then we have two integers
.95fe	4c 6c ab	jmp $ab6c			jmp 	TypeError 					; anything else, type mismatch.
.9601					_IntegerCode:
.9601	20 a5 94	jsr $94a5			jsr 	AddCode 					; add the two values
.9604	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9606	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9609	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a6d8					ConvertInt16:
.a6d8	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a6db	8e 10 04	stx $0410			stx 	NSMantissa1
.a6de	9c 18 04	stz $0418			stz 	NSMantissa2
.a6e1	9c 20 04	stz $0420			stz 	NSMantissa3
.a6e4	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a6e7	a2 00		ldx #$00			ldx 	#0 							; stack level
.a6e9	a9 0a		lda #$0a			lda 	#10 						; base
.a6eb	80 00		bra $a6ed			bra 	ConvertInt32
.a6ed					ConvertInt32:
.a6ed	5a		phy				phy
.a6ee	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a6f0	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a6f3	10 08		bpl $a6fd			bpl 	_CI32NotNeg
.a6f5	48		pha				pha
.a6f6	a9 2d		lda #$2d			lda 	#'-'
.a6f8	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a6fb	c8		iny				iny
.a6fc	68		pla				pla
.a6fd					_CI32NotNeg:
.a6fd	20 0b a7	jsr $a70b			jsr 	_CI32DivideConvert 			; recursive conversion
.a700	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a702	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a705	7a		ply				ply
.a706	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a708	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a70a	60		rts				rts
.a70b					_CI32DivideConvert:
.a70b	e8		inx				inx 								; write to next slot up
.a70c	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.a70f	ca		dex				dex
.a710	20 0d a6	jsr $a60d			jsr 	Int32Divide 				; divide
.a713	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a716	48		pha				pha
.a717	20 bc a5	jsr $a5bc			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a71a	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; is it zero ?
.a71d	f0 06		beq $a725			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a71f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a722	20 0b a7	jsr $a70b			jsr 	_CI32DivideConvert 			; and recusrively call.
.a725					_CI32NoRecurse:
.a725	68		pla				pla 								; remainder
.a726	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a728	90 02		bcc $a72c			bcc 	_CI32NotHex
.a72a	69 26		adc #$26			adc 	#6+32
.a72c					_CI32NotHex:
.a72c	69 30		adc #$30			adc 	#48
.a72e	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a731	c8		iny				iny
.a732	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.960a					PrecedenceLevel:
>960a	04					.byte	 4	; $00 <<
>960b	02					.byte	 2	; $01 <=
>960c	02					.byte	 2	; $02 <>
>960d	00					.byte	 0	; $03 !!3
>960e	00					.byte	 0	; $04 ><
>960f	02					.byte	 2	; $05 >=
>9610	04					.byte	 4	; $06 >>
>9611	00					.byte	 0	; $07 !!7
>9612	00					.byte	 0	; $08 !!8
>9613	00					.byte	 0	; $09 !!9
>9614	00					.byte	 0	; $0a !!10
>9615	00					.byte	 0	; $0b !!11
>9616	00					.byte	 0	; $0c !!12
>9617	00					.byte	 0	; $0d !!13
>9618	00					.byte	 0	; $0e !!14
>9619	00					.byte	 0	; $0f !!15
>961a	00					.byte	 0	; $10 @
>961b	00					.byte	 0	; $11 !!17
>961c	00					.byte	 0	; $12 !!18
>961d	00					.byte	 0	; $13 [
>961e	04					.byte	 4	; $14 \
>961f	00					.byte	 0	; $15 ]
>9620	01					.byte	 1	; $16 ^
>9621	00					.byte	 0	; $17 _
>9622	00					.byte	 0	; $18 `
>9623	00					.byte	 0	; $19 !!25
>9624	00					.byte	 0	; $1a !!26
>9625	00					.byte	 0	; $1b {
>9626	01					.byte	 1	; $1c |
>9627	00					.byte	 0	; $1d }
>9628	00					.byte	 0	; $1e ~
>9629	00					.byte	 0	; $1f [7m<7F>[m
>962a	00					.byte	 0	; $20
>962b	05					.byte	 5	; $21 !
>962c	00					.byte	 0	; $22 "
>962d	00					.byte	 0	; $23 #
>962e	05					.byte	 5	; $24 $
>962f	04					.byte	 4	; $25 %
>9630	01					.byte	 1	; $26 &
>9631	00					.byte	 0	; $27 '
>9632	00					.byte	 0	; $28 (
>9633	00					.byte	 0	; $29 )
>9634	04					.byte	 4	; $2a *
>9635	03					.byte	 3	; $2b +
>9636	00					.byte	 0	; $2c ,
>9637	03					.byte	 3	; $2d -
>9638	00					.byte	 0	; $2e .
>9639	04					.byte	 4	; $2f /
>963a	00					.byte	 0	; $30 0
>963b	00					.byte	 0	; $31 1
>963c	00					.byte	 0	; $32 2
>963d	00					.byte	 0	; $33 3
>963e	00					.byte	 0	; $34 4
>963f	00					.byte	 0	; $35 5
>9640	00					.byte	 0	; $36 6
>9641	00					.byte	 0	; $37 7
>9642	00					.byte	 0	; $38 8
>9643	00					.byte	 0	; $39 9
>9644	00					.byte	 0	; $3a :
>9645	00					.byte	 0	; $3b ;
>9646	02					.byte	 2	; $3c <
>9647	02					.byte	 2	; $3d =
>9648	02					.byte	 2	; $3e >
>9649	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.964a					EvaluateExpressionAt0:
.964a	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.964c					EvaluateExpression:
.964c	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.964e					EvaluateExpressionAtPrecedence:
.964e	48		pha				pha 								; save precedence level
.964f	20 1d 99	jsr $991d			jsr 	EvaluateTerm 				; evaluate term into level X.
.9652	68		pla				pla 								; restore precedence level.
.9653					_EXPRLoop:
.9653	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9655	b1 30		lda ($30),y			lda 	(codePtr),y
.9657	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9659	b0 25		bcs $9680			bcs 	_EXPRExit
.965b	da		phx				phx 								; read the operator precedence
.965c	aa		tax				tax
.965d	bd 0a 96	lda $960a,x			lda 	PrecedenceLevel,x
.9660	fa		plx				plx
.9661	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9663	f0 1b		beq $9680			beq 	_EXPRExit
.9665	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9667	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9669	c5 37		cmp $37				cmp 	zTemp0+1
.966b	b0 13		bcs $9680			bcs		_EXPRExit 					; if current >= operator exit
.966d	48		pha				pha 								; save current precedence.
.966e	b1 30		lda ($30),y			lda 	(codePtr),y
.9670	c8		iny				iny
.9671	48		pha				pha
.9672	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9674	e8		inx				inx 								; work out the right hand side.
.9675	20 4e 96	jsr $964e			jsr 	EvaluateExpressionAtPrecedence
.9678	ca		dex				dex
.9679	68		pla				pla 								; get operator, call the code.
.967a	20 83 96	jsr $9683			jsr 	_EXPRCaller
.967d	68		pla				pla 								; restore precedence level
.967e	80 d3		bra $9653			bra 	_EXPRLoop 					; and go round.
.9680					_EXPRExit:
.9680	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9682	60		rts				rts
.9683					_EXPRCaller:
.9683	da		phx				phx 								; save on stack, first thing is to restore it
.9684	0a		asl a				asl 	a 							; double so can use vectors into X
.9685	aa		tax				tax
.9686	7c 8a 8e	jmp ($8e8a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a733					FloatingPointAdd:
.a733	20 d4 a8	jsr $a8d4			jsr 	FloatPrepare 				; prepare for floats
.a736	80 0b		bra $a743			bra 	FloatAdd
.a738					FloatingPointSub:
.a738	20 d4 a8	jsr $a8d4			jsr 	FloatPrepare 				; prepare for floats
.a73b					FloatSubtract:
.a73b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a73e	49 80		eor #$80			eor 	#$80
.a740	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a743					FloatAdd:
.a743	48		pha				pha
.a744	5a		phy				phy
.a745	20 e5 a8	jsr $a8e5			jsr 	NSNormalise 				; normalise S[X]
.a748	f0 54		beq $a79e			beq 	_FAReturn1
.a74a	e8		inx				inx 								; normalise S[X+1]
.a74b	20 e5 a8	jsr $a8e5			jsr 	NSNormalise
.a74e	ca		dex				dex
.a74f	c9 00		cmp #$00			cmp 	#0
.a751	f0 6f		beq $a7c2			beq 	_FAExit 					; if so, just return A
.a753	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a756	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a759	f0 1b		beq $a776			beq 	_FAExponentsEqual
.a75b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a75e	a8		tay				tay
.a75f	38		sec				sec 								; do a signed comparison of the exponents.
.a760	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a763	50 02		bvc $a767			bvc 	_FANoSignedChange
.a765	49 80		eor #$80			eor 	#$80
.a767					_FANoSignedChange:
.a767	29 80		and #$80			and 	#$80
.a769	10 03		bpl $a76e			bpl 	_FAHaveMax
.a76b	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a76e					_FAHaveMax:
.a76e	20 c5 a7	jsr $a7c5			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a771	e8		inx				inx
.a772	20 c5 a7	jsr $a7c5			jsr 	_FAShiftToExponent
.a775	ca		dex				dex
.a776					_FAExponentsEqual:
.a776	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a779	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a77c	30 10		bmi $a78e			bmi 	_FADifferentSigns
.a77e	20 38 94	jsr $9438			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a781	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a784	10 3c		bpl $a7c2			bpl 	_FAExit 					; if no, we are done.
.a786	20 1e 9e	jsr $9e1e			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a789	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a78c	80 34		bra $a7c2			bra 	_FAExit
.a78e					_FADifferentSigns:
.a78e	20 5e 94	jsr $945e			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a791	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a794	10 2c		bpl $a7c2			bpl 	_FAExit 					; if no, we are done.
.a796	20 a7 9d	jsr $9da7			jsr 	NSMNegate 					; netate result
.a799	20 b0 9d	jsr $9db0			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a79c	80 24		bra $a7c2			bra 	_FAExit
.a79e					_FAReturn1:
.a79e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a7a1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7a4	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a7a7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7aa	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a7ad	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7b0	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a7b3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a7b6	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a7b9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a7bc	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a7bf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a7c2					_FAExit:
.a7c2	7a		ply				ply
.a7c3	68		pla				pla
.a7c4	60		rts				rts
.a7c5					_FAShiftToExponent:
.a7c5					_FAShiftToExponent2:
.a7c5	98		tya				tya 								; compare Y to exponent
.a7c6	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a7c9	f0 08		beq $a7d3			beq 	_FASEExit 					; exit if so.
.a7cb	20 1e 9e	jsr $9e1e			jsr 	NSMShiftRight	 			; shift the mantissa right
.a7ce	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a7d1	80 f2		bra $a7c5			bra 	_FAShiftToExponent2
.a7d3					_FASEExit:
.a7d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a7d4					CompareFloat:
.a7d4	20 3b a7	jsr $a73b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a7d7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a7da	29 f8		and #$f8			and 	#$F8
.a7dc	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a7df	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a7e2	f0 09		beq $a7ed			beq 	_FCExit 					; zero, so approximately identical
.a7e4	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a7e6	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a7e9	10 02		bpl $a7ed			bpl 	_FCExit
.a7eb					_FCNegative:
.a7eb	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a7ed					_FCExit:
.a7ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a7ee					FDivideCommand:
.a7ee	fa		plx				plx	 								; restore stack position
.a7ef	20 d4 a8	jsr $a8d4			jsr 	FloatPrepare 				; prepare for floats
.a7f2					FloatDivide:
.a7f2	48		pha				pha
.a7f3	e8		inx				inx
.a7f4	20 e5 a8	jsr $a8e5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a7f7	ca		dex				dex
.a7f8	c9 00		cmp #$00			cmp 	#0
.a7fa	f0 20		beq $a81c			beq 	_FDZero
.a7fc	20 e5 a8	jsr $a8e5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a7ff	f0 19		beq $a81a			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a801	20 2f a6	jsr $a62f			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a804	20 bc a5	jsr $a5bc			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a807	20 e5 a8	jsr $a8e5			jsr		NSNormalise 				; renormalise
.a80a	20 ca a6	jsr $a6ca			jsr 	CalculateSign 				; calculate result sign
.a80d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a810	38		sec				sec
.a811	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a814	38		sec				sec
.a815	e9 1e		sbc #$1e			sbc 	#30
.a817	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a81a					_FDExit:
.a81a	68		pla				pla
.a81b	60		rts				rts
.a81c					_FDZero:
.a81c	a9 03		lda #$03		lda	#3
.a81e	4c 43 92	jmp $9243		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a821					FloatFractionalPart:
.a821	5a		phy				phy
.a822	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a825	29 7f		and #$7f			and 	#$7F
.a827	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a82a	20 e5 a8	jsr $a8e5			jsr 	NSNormalise
.a82d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a830	38		sec				sec
.a831	e9 e0		sbc #$e0			sbc 	#$E0
.a833	90 31		bcc $a866			bcc 	_FFPExit 					; already fractional
.a835	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a837	b0 2a		bcs $a863			bcs 	_FFPZero
.a839	a8		tay				tay 								; put count to do in Y
.a83a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a83d	20 68 a8	jsr $a868			jsr 	_FFPPartial
.a840	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a843	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a846	20 68 a8	jsr $a868			jsr 	_FFPPartial
.a849	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a84c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a84f	20 68 a8	jsr $a868			jsr 	_FFPPartial
.a852	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a855	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a858	20 68 a8	jsr $a868			jsr 	_FFPPartial
.a85b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a85e	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; zeroed check.
.a861	d0 03		bne $a866			bne 	_FFPExit
.a863					_FFPZero:
.a863	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero
.a866					_FFPExit:
.a866	7a		ply				ply
.a867	60		rts				rts
.a868					_FFPPartial:
.a868	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a86a	f0 17		beq $a883			beq 	_FFFPPExit
.a86c	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a86e	b0 0c		bcs $a87c			bcs 	_FFFPPWholeByte
.a870	5a		phy				phy
.a871					_FFFPPLeft:
.a871	0a		asl a				asl 	a
.a872	88		dey				dey
.a873	d0 fc		bne $a871			bne 	_FFFPPLeft
.a875	7a		ply				ply
.a876					_FFFPPRight:
.a876	4a		lsr a				lsr 	a
.a877	88		dey				dey
.a878	d0 fc		bne $a876			bne 	_FFFPPRight
.a87a	80 07		bra $a883			bra 	_FFFPPExit
.a87c					_FFFPPWholeByte:
.a87c	98		tya				tya 								; subtract 8 from count
.a87d	38		sec				sec
.a87e	e9 08		sbc #$08			sbc 	#8
.a880	a8		tay				tay
.a881	a9 00		lda #$00			lda 	#0 							; and clear all
.a883					_FFFPPExit:
.a883	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a884					FloatIntegerPart:
.a884	48		pha				pha
.a885	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a888	f0 1f		beq $a8a9			beq 	_FIPExit 					; if so do nothing
.a88a	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; is it zero ?
.a88d	f0 17		beq $a8a6			beq 	_FIPZero 					; if so return zero.
.a88f	20 e5 a8	jsr $a8e5			jsr 	NSNormalise 				; normalise
.a892	f0 12		beq $a8a6			beq 	_FIPZero 					; normalised to zero, exit zero
.a894					_FIPShift:
.a894	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a897	10 08		bpl $a8a1			bpl 	_FIPCheckZero
.a899	20 1e 9e	jsr $9e1e			jsr 	NSMShiftRight 				; shift mantissa right
.a89c	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a89f	80 f3		bra $a894			bra 	_FIPShift
.a8a1					_FIPCheckZero:
.a8a1	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; avoid -0 problem
.a8a4	d0 03		bne $a8a9			bne 	_FIPExit 					; set to zero if mantissa zero.
.a8a6					_FIPZero:
.a8a6	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero
.a8a9					_FIPExit:
.a8a9	68		pla				pla
.a8aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a8ab					FloatingPointMultiply:
.a8ab	20 d4 a8	jsr $a8d4			jsr 	FloatPrepare 				; prepare for floats
.a8ae					FloatMultiply:
.a8ae	48		pha				pha
.a8af	20 e5 a8	jsr $a8e5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a8b2	f0 1b		beq $a8cf			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a8b4	e8		inx				inx
.a8b5	20 e5 a8	jsr $a8e5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a8b8	ca		dex				dex
.a8b9	c9 00		cmp #$00			cmp 	#0
.a8bb	f0 0f		beq $a8cc			beq 	_FDSetZero
.a8bd	20 85 a6	jsr $a685			jsr 	MultiplyShort 				; calculate the result.
.a8c0	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a8c3	18		clc				clc
.a8c4	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a8c7	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a8ca	80 03		bra $a8cf			bra 	_FDExit
.a8cc					_FDSetZero:
.a8cc	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero 					; return 0
.a8cf					_FDExit:
.a8cf	20 e5 a8	jsr $a8e5			jsr 	NSNormalise 				; normalise the result
.a8d2	68		pla				pla
.a8d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a8d4					FloatPrepare:
.a8d4	20 5c 97	jsr $975c			jsr 	DereferenceTopTwo 			; dereference the top two values
.a8d7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a8da	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a8dd	29 10		and #$10			and 	#NSBIsString
.a8df	d0 01		bne $a8e2			bne 	_FDType
.a8e1	60		rts				rts
.a8e2					_FDType:
.a8e2	4c 6c ab	jmp $ab6c			jmp 	TypeError
.a8e5					NSNormalise:
.a8e5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a8e8	29 80		and #$80			and 	#$80
.a8ea	09 08		ora #$08			ora 	#NSTFloat
.a8ec	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a8ef	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; if zero exit
.a8f2	d0 09		bne $a8fd			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a8f4	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a8f7	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a8fa	a9 00		lda #$00			lda 	#0 							; set Z flag
.a8fc	60		rts				rts
.a8fd					_NSNormaliseOptimise:
.a8fd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a900	d0 22		bne $a924			bne 	_NSNormaliseLoop
.a902	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a905	30 1d		bmi $a924			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a907	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a90a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a90d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a910	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a913	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a916	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a919	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a91c	38		sec				sec
.a91d	e9 08		sbc #$08			sbc 	#8
.a91f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a922	80 d9		bra $a8fd			bra 	_NSNormaliseOptimise
.a924					_NSNormaliseLoop:
.a924	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a927	70 08		bvs $a931			bvs 	_NSNExit 					; exit if so with Z flag clear
.a929	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; shift mantissa left
.a92c	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a92f	80 f3		bra $a924			bra 	_NSNormaliseLoop
.a931					_NSNExit:
.a931	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a933	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9689					AssignNumber:
.9689	5a		phy				phy
.968a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.968d	85 36		sta $36				sta 	zTemp0
.968f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9692	85 37		sta $37				sta 	zTemp0+1
.9694	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9697	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9699	9d 00 04	sta $0400,x			sta 	NSStatus,x
.969c	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.969e	c9 08		cmp #$08			cmp 	#NSTFloat
.96a0	f0 2a		beq $96cc			beq 	_ANFloat
.96a2	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.96a5	f0 05		beq $96ac			beq		_ANNotFloat
.96a7	e8		inx				inx
.96a8	20 84 a8	jsr $a884			jsr 	FloatIntegerPart 			; make it an integer
.96ab	ca		dex				dex
.96ac					_ANNotFloat:
.96ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.96af	29 03		and #$03			and 	#3
.96b1	d0 05		bne $96b8			bne 	_ANByteWord
.96b3	20 d8 96	jsr $96d8			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.96b6	80 1e		bra $96d6			bra 	_ANExit
.96b8					_ANByteWord:
.96b8	48		pha				pha 								; save count
.96b9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.96bc	92 36		sta ($36)			sta 	(zTemp0)
.96be	68		pla				pla
.96bf	c9 01		cmp #$01			cmp	 	#1
.96c1	f0 13		beq $96d6			beq 	_ANExit
.96c3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.96c6	a0 01		ldy #$01			ldy 	#1
.96c8	91 36		sta ($36),y			sta 	(zTemp0),y
.96ca	80 0a		bra $96d6			bra 	_ANExit
.96cc					_ANFloat:
.96cc	20 d8 96	jsr $96d8			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.96cf	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.96d2	a0 04		ldy #$04			ldy 	#4
.96d4	91 36		sta ($36),y			sta 	(zTemp0),y
.96d6					_ANExit:
.96d6	7a		ply				ply
.96d7	60		rts				rts
.96d8					_ANCopy4PackSign:
.96d8	a0 03		ldy #$03			ldy 	#3
.96da	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.96dd	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.96df	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.96e2	91 36		sta ($36),y			sta 	(zTemp0),y
.96e4	88		dey				dey
.96e5	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.96e8	91 36		sta ($36),y			sta 	(zTemp0),y
.96ea	88		dey				dey
.96eb	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.96ee	91 36		sta ($36),y			sta 	(zTemp0),y
.96f0	88		dey				dey
.96f1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.96f4	91 36		sta ($36),y			sta 	(zTemp0),y
.96f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.96f7					AssignString:
.96f7	5a		phy				phy
.96f8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.96fb	85 38		sta $38				sta 	zTemp1
.96fd	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9700	85 39		sta $39				sta 	zTemp1+1
.9702	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9705	85 36		sta $36				sta 	zTemp0
.9707	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.970a	85 37		sta $37				sta 	zTemp0+1
.970c	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.970e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9710	f0 23		beq $9735			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9712	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9713	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9715	e9 02		sbc #$02			sbc 	#2
.9717	85 3c		sta $3c				sta 	zsTemp
.9719	a0 01		ldy #$01			ldy 	#1
.971b	b1 36		lda ($36),y			lda 	(zTemp0),y
.971d	e9 00		sbc #$00			sbc 	#0
.971f	85 3d		sta $3d				sta 	zsTemp+1
.9721	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9723					_ASGetLength:
.9723	c8		iny				iny
.9724	b1 38		lda ($38),y			lda 	(zTemp1),y
.9726	d0 fb		bne $9723			bne 	_ASGetLength
.9728	98		tya				tya 								; is this length <= current length
.9729	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.972b	90 20		bcc $974d			bcc 	_ASCopyString
.972d	f0 1e		beq $974d			beq 	_ASCopyString
.972f	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9731	a0 01		ldy #$01			ldy 	#1
.9733	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9735					_ASNewStringRequired:
.9735	e8		inx				inx 								; concrete the new string.
.9736	20 06 ae	jsr $ae06			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9739	ca		dex				dex
.973a	18		clc				clc
.973b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.973e	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9740	92 36		sta ($36)			sta 	(zTemp0)
.9742	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9745	69 00		adc #$00			adc 	#0
.9747	a0 01		ldy #$01			ldy 	#1
.9749	91 36		sta ($36),y			sta 	(zTemp0),y
.974b	80 0d		bra $975a			bra 	_ASExit
.974d					_ASCopyString:
.974d	a0 00		ldy #$00			ldy 	#0
.974f					_ASCopyLoop:
.974f	b1 38		lda ($38),y			lda 	(zTemp1),y
.9751	c8		iny				iny
.9752	c8		iny				iny
.9753	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9755	88		dey				dey
.9756	c9 00		cmp #$00			cmp 	#0
.9758	d0 f5		bne $974f			bne 	_ASCopyLoop
.975a					_ASExit:
.975a	7a		ply				ply
.975b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.975c					DereferenceTopTwo:
.975c	e8		inx				inx
.975d	20 61 97	jsr $9761			jsr 	Dereference 				; deref x+1
.9760	ca		dex				dex  								; falls through to deref x
.9761					Dereference:
.9761	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9764	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9766	f0 57		beq $97bf			beq 	_DRFExit 					; not a reference
.9768	5a		phy				phy
.9769	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.976c	85 36		sta $36				sta 	zTemp0
.976e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9771	85 37		sta $37				sta 	zTemp0+1
.9773	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9776	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9778	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.977b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.977e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9780	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9782	f0 0f		beq $9793			beq 	_DRFDereferenceTwo
.9784	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9786	f0 39		beq $97c1			beq 	_DRFFull
.9788	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.978b	29 03		and #$03			and 	#3
.978d	f0 32		beq $97c1			beq 	_DRFFull 					; the whole word
.978f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9791	f0 07		beq $979a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9793					_DRFDereferenceTwo:
.9793	a0 01		ldy #$01			ldy 	#1
.9795	b1 36		lda ($36),y			lda 	(zTemp0),y
.9797	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.979a					_DRFClear23:
.979a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.979d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.97a0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.97a3	29 18		and #$18			and 	#NSBTypeMask
.97a5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97a8	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.97aa	d0 12		bne $97be			bne 	_DRFNotString
.97ac	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.97af	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.97b2	d0 0a		bne $97be			bne 	_DRFNotString
.97b4	a9 c0		lda #$c0			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.97b6	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.97b9	a9 97		lda #$97			lda 	#_DRFNullString >> 8
.97bb	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.97be					_DRFNotString
.97be	7a		ply				ply 								; restore Y and exit
.97bf					_DRFExit:
.97bf	60		rts				rts
.97c0					_DRFNullString:
>97c0	00						.byte 	0
.97c1					_DRFFull:
.97c1	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.97c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.97c5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97c8	c8		iny				iny
.97c9	b1 36		lda ($36),y			lda 	(zTemp0),y
.97cb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97ce	c8		iny				iny
.97cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.97d1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97d4	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.97d7	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.97da	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.97dc	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.97df	f0 06		beq $97e7			beq 	_DRFNoExponent
.97e1	c8		iny				iny 								; if not, read the exponent as well.
.97e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.97e4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.97e7					_DRFNoExponent:
.97e7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.97ea	10 0d		bpl $97f9			bpl 	_DRFExit2 					; if not, then exit.
.97ec	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.97ee	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97f1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.97f4	09 80		ora #$80			ora 	#NSBIsNegative
.97f6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97f9					_DRFExit2:
.97f9	7a		ply				ply
.97fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.97fb					EncodeNumberStart:
.97fb	38		sec				sec
.97fc	80 01		bra $97ff			bra 	EncodeNumberContinue+1
.97fe					EncodeNumberContinue:
.97fe	18		clc				clc
.97ff					EncodeNumber:
.97ff	08		php				php 								; save reset.
.9800	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9802	f0 12		beq $9816			beq 	_ENIsOkay
.9804	c9 30		cmp #$30			cmp 	#"0"
.9806	90 04		bcc $980c			bcc 	_ENBadNumber
.9808	c9 3a		cmp #$3a			cmp 	#"9"+1
.980a	90 0a		bcc $9816			bcc 	_ENIsOkay
.980c					_ENBadNumber:
.980c	28		plp				plp 								; throw saved reset
.980d	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9810	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9812	f0 7e		beq $9892			beq 	_ENConstructFinal
.9814					_ENFail:
.9814	18		clc				clc 								; not allowed
.9815	60		rts				rts
.9816					_ENIsOkay:
.9816	28		plp				plp 								; are we restarting
.9817	90 15		bcc $982e			bcc 	_ENNoRestart
.9819					_ENStartEncode:
.9819	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.981b	f0 0c		beq $9829			beq 	_ENFirstDP
.981d	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.981f	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.9822	a9 01		lda #$01			lda 	#ESTA_Low
.9824					_ENExitChange:
.9824	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9827	38		sec				sec
.9828	60		rts				rts
.9829					_ENFirstDP:
.9829	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero 					; clear integer part
.982c	80 3f		bra $986d			bra 	_ESTASwitchFloat			; go straight to float and exi
.982e					_ENNoRestart:
.982e	48		pha				pha 								; save on stack.
.982f	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9832	c9 01		cmp #$01			cmp 	#ESTA_Low
.9834	f0 09		beq $983f			beq  	_ESTALowState
.9836	c9 02		cmp #$02			cmp 	#ESTA_High
.9838	f0 29		beq $9863			beq 	_ESTAHighState
.983a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.983c	f0 3b		beq $9879			beq 	_ESTADecimalState
>983e	db						.byte 	$DB 						; causes a break in the emulator
.983f					_ESTALowState:
.983f	68		pla				pla 								; get value back
.9840	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9842	f0 29		beq $986d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9844	29 0f		and #$0f			and 	#15 						; make digit
.9846	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9849	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.984c	0a		asl a				asl 	a
.984d	0a		asl a				asl 	a
.984e	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9851	0a		asl a				asl 	a
.9852	6d 86 04	adc $0486			adc 	DigitTemp
.9855	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9858	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.985a	90 05		bcc $9861			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.985c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.985e	8d 85 04	sta $0485			sta 	EncodeState
.9861					_ESTANoSwitch:
.9861	38		sec				sec
.9862	60		rts				rts
.9863					_ESTAHighState:
.9863	68		pla				pla 								; get value back
.9864	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9866	f0 05		beq $986d			beq 	_ESTASwitchFloat
.9868	20 cc 98	jsr $98cc			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.986b	38		sec				sec
.986c	60		rts				rts
.986d					_ESTASwitchFloat:
.986d	9c 87 04	stz $0487			stz 	DecimalCount
.9870	e8		inx				inx 								; zero the decimal additive.
.9871	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero
.9874	ca		dex				dex
.9875	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9877	80 ab		bra $9824			bra 	_ENExitChange
.9879					_ESTADecimalState:
.9879	68		pla				pla 								; digit.
.987a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.987c	f0 96		beq $9814			beq 	_ENFail
.987e	e8		inx				inx 								; put digit into fractional part of X+1
.987f	20 cc 98	jsr $98cc			jsr 	ESTAShiftDigitIntoMantissa
.9882	ca		dex				dex
.9883	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9886	ad 87 04	lda $0487			lda 	DecimalCount
.9889	c9 0b		cmp #$0b			cmp 	#11
.988b	f0 02		beq $988f			beq 	_ESTADSFail
.988d	38		sec				sec
.988e	60		rts				rts
.988f					_ESTADSFail:
.988f	4c 67 ab	jmp $ab67			jmp 	RangeError
.9892					_ENConstructFinal:
.9892	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9895	f0 33		beq $98ca			beq 	_ENCFExit 					; no decimals
.9897	5a		phy				phy
.9898	0a		asl a				asl 	a 							; x 4 and CLC
.9899	0a		asl a				asl 	a
.989a	6d 87 04	adc $0487			adc 	DecimalCount
.989d	a8		tay				tay
.989e	b9 26 ab	lda $ab26,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.98a1	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.98a4	b9 27 ab	lda $ab27,y			lda 	DecimalScalarTable-5+1,y
.98a7	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.98aa	b9 28 ab	lda $ab28,y			lda 	DecimalScalarTable-5+2,y
.98ad	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.98b0	b9 29 ab	lda $ab29,y			lda 	DecimalScalarTable-5+3,y
.98b3	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.98b6	b9 2a ab	lda $ab2a,y			lda 	DecimalScalarTable-5+4,y
.98b9	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.98bc	a9 08		lda #$08			lda 	#NSTFloat
.98be	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.98c1	7a		ply				ply
.98c2	e8		inx				inx 								; multiply decimal const by decimal scalar
.98c3	20 ae a8	jsr $a8ae			jsr 	FloatMultiply
.98c6	ca		dex				dex
.98c7	20 43 a7	jsr $a743			jsr 	FloatAdd 					; add to integer part.
.98ca					_ENCFExit:
.98ca	18		clc				clc 								; reject the digit.
.98cb	60		rts				rts
.98cc					ESTAShiftDigitIntoMantissa:
.98cc	29 0f		and #$0f			and 	#15 						; save digit
.98ce	48		pha				pha
.98cf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.98d2	48		pha				pha
.98d3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.98d6	48		pha				pha
.98d7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98da	48		pha				pha
.98db	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.98de	48		pha				pha
.98df	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; x 2
.98e2	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; x 4
.98e5	18		clc				clc 								; pop mantissa and add
.98e6	68		pla				pla
.98e7	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.98ea	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98ed	68		pla				pla
.98ee	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.98f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98f4	68		pla				pla
.98f5	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.98f8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98fb	68		pla				pla
.98fc	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.98ff	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9902	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; x 10
.9905	68		pla				pla 								; add digit
.9906	18		clc				clc
.9907	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.990a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.990d	90 0d		bcc $991c			bcc 	_ESTASDExit
.990f	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9912	d0 08		bne $991c			bne 	_ESTASDExit
.9914	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9917	d0 03		bne $991c			bne 	_ESTASDExit
.9919	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.991c					_ESTASDExit:
.991c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.991d					EvaluateTerm:
.991d	b1 30		lda ($30),y			lda 	(codePtr),y
.991f	30 18		bmi $9939			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9921	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9923	b0 6f		bcs $9994			bcs 	_ETVariable
.9925	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9927	90 6e		bcc $9997			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9929	c9 3a		cmp #$3a			cmp 	#'9'+1
.992b	b0 6a		bcs $9997			bcs 	_ETPuncUnary
.992d	20 fb 97	jsr $97fb			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9930					_ETNumber:
.9930	c8		iny				iny 								; keep encoding until we have the numbers
.9931	b1 30		lda ($30),y			lda 	(codePtr),y
.9933	20 fe 97	jsr $97fe			jsr 	EncodeNumberContinue
.9936	b0 f8		bcs $9930			bcs 	_ETNumber 					; go back if accepted.
.9938	60		rts				rts
.9939					_ETCheckUnary:
.9939	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.993b	f0 41		beq $997e			beq 	_ETString
.993d	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.993f	f0 12		beq $9953			beq 	_ETHexConstant
.9941	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9943	90 0b		bcc $9950			bcc 	_ETSyntaxError
.9945	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9947	b0 07		bcs $9950			bcs 	_ETSyntaxError
.9949	da		phx				phx 								; push X on the stack
.994a	0a		asl a				asl 	a 							; put vector x 2 into X
.994b	aa		tax				tax
.994c	c8		iny				iny 								; consume unary function token
.994d	7c 0a 8f	jmp ($8f0a,x)			jmp 	(VectorSet0,x) 				; and do it.
.9950					_ETSyntaxError:
.9950	4c 62 ab	jmp $ab62			jmp 	SyntaxError
.9953					_ETHexConstant:
.9953	c8		iny				iny 								; skip #
.9954	c8		iny				iny 								; skip count
.9955	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero 					; clear result
.9958					_ETHLoop:
.9958	b1 30		lda ($30),y			lda 	(codePtr),y
.995a	c8		iny				iny 								; and consume
.995b	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.995d	f0 1e		beq $997d			beq 	_ETHExit
.995f	48		pha				pha 								; save on stack.
.9960	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; x 2
.9963	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; x 4
.9966	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; x 8
.9969	20 10 9e	jsr $9e10			jsr 	NSMShiftLeft 				; x 16
.996c	68		pla				pla 								; ASCII
.996d	c9 41		cmp #$41			cmp 	#'A'
.996f	90 02		bcc $9973			bcc 	_ETHNotChar
.9971	e9 07		sbc #$07			sbc 	#7
.9973					_ETHNotChar:
.9973	29 0f		and #$0f			and 	#15 						; digit now
.9975	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9978	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.997b	80 db		bra $9958			bra 	_ETHLoop 					; go round.
.997d					_ETHExit:
.997d	60		rts				rts
.997e					_ETString:
.997e	c8		iny				iny 								; look at length
.997f	b1 30		lda ($30),y			lda 	(codePtr),y
.9981	48		pha				pha
.9982	c8		iny				iny 								; first character
.9983	20 45 9e	jsr $9e45			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9986	68		pla				pla 								; restore count and save
.9987	85 36		sta $36				sta 	zTemp0
.9989	98		tya				tya 								; add length to Y to skip it.
.998a	18		clc				clc
.998b	65 36		adc $36				adc 	zTemp0
.998d	a8		tay				tay
.998e	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9990	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9993	60		rts				rts
.9994					_ETVariable:
.9994	4c ee 99	jmp $99ee			jmp 	VariableHandler
.9997					_ETPuncUnary:
.9997	c8		iny				iny 								; consume the unary character
.9998	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.999a	f0 2d		beq $99c9			beq 	_ETUnaryNegate
.999c	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.999e	f0 39		beq $99d9			beq 	_ETDereference
.99a0	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.99a2	f0 43		beq $99e7			beq 	_ETParenthesis
.99a4	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.99a6	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.99a8	f0 06		beq $99b0			beq 	_ETIndirection
.99aa	e6 36		inc $36				inc 	zTemp0
.99ac	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.99ae	d0 a0		bne $9950			bne 	_ETSyntaxError
.99b0					_ETIndirection:
.99b0	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.99b2	1a		inc a				inc 	a
.99b3	48		pha				pha
.99b4	20 1d 99	jsr $991d			jsr 	EvaluateTerm				; evaluate the term
.99b7	20 61 97	jsr $9761			jsr 	Dereference 				; dereference it.
.99ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.99bd	d0 07		bne $99c6			bne 	_ETTypeMismatch
.99bf	68		pla				pla 								; indirection 1-2
.99c0	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.99c2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99c5	60		rts				rts
.99c6					_ETTypeMismatch:
.99c6	4c 6c ab	jmp $ab6c			jmp 	TypeError
.99c9					_ETUnaryNegate:
.99c9	20 1d 99	jsr $991d			jsr 	EvaluateTerm				; evaluate the term
.99cc	20 61 97	jsr $9761			jsr 	Dereference 				; dereference it.
.99cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.99d2	29 10		and #$10			and 	#NSTString
.99d4	d0 f0		bne $99c6			bne 	_ETTypeMismatch
.99d6	4c a7 9d	jmp $9da7			jmp 	NSMNegate  					; just toggles the sign bit.
.99d9					_ETDereference:
.99d9	20 1d 99	jsr $991d			jsr 	EvaluateTerm				; evaluate the term
.99dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.99df	29 20		and #$20			and 	#NSBIsReference
.99e1	f0 e3		beq $99c6			beq 	_ETTypeMismatch
.99e3	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.99e6	60		rts				rts
.99e7					_ETParenthesis:
.99e7	20 4c 96	jsr $964c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.99ea	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 			; check for )
.99ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.99ee					VariableHandler:
.99ee	b1 30		lda ($30),y			lda 	(codePtr),y
.99f0	18		clc				clc
.99f1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.99f3	85 37		sta $37				sta 	zTemp0+1
.99f5	c8		iny				iny
.99f6	b1 30		lda ($30),y			lda 	(codePtr),y
.99f8	85 36		sta $36				sta 	zTemp0
.99fa	c8		iny				iny
.99fb	18		clc				clc									; copy variable address+3 to mantissa
.99fc	69 03		adc #$03			adc 	#3
.99fe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a01	a5 37		lda $37				lda 	zTemp0+1
.9a03	69 00		adc #$00			adc 	#0
.9a05	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a08	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9a0b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a0e	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a11	5a		phy				phy
.9a12	a0 02		ldy #$02			ldy 	#2 							; read type
.9a14	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a16	7a		ply				ply
.9a17	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9a19	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9a1b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a1e	29 04		and #$04			and 	#NSBIsArray
.9a20	d0 01		bne $9a23			bne 	_VHArray
.9a22	60		rts				rts
.9a23					_VHArray:
.9a23	e8		inx				inx
.9a24	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9a27	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9a29	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9a2c	b1 30		lda ($30),y			lda 	(codePtr),y
.9a2e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9a30	d0 06		bne $9a38			bne 	_VHNoSecondIndex
.9a32	c8		iny				iny 								; skip the comma
.9a33	e8		inx				inx
.9a34	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9a37	ca		dex				dex
.9a38					_VHNoSecondIndex:
.9a38	ca		dex				dex 								; set X back.
.9a39	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 			; and check the right bracket.
.9a3c	5a		phy				phy 								; save position
.9a3d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9a40	85 3e		sta $3e				sta 	zaTemp
.9a42	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a45	85 3f		sta $3f				sta 	zaTemp+1
.9a47	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9a49	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a4b	f0 02		beq $9a4f			beq 	_VHHas2Mask
.9a4d	a9 ff		lda #$ff			lda 	#$FF
.9a4f					_VHHas2Mask:
.9a4f	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9a52	f0 54		beq $9aa8			beq 	_VHBadIndex
.9a54	0a		asl a				asl 	a 							; carry will be set if a second index
.9a55	90 09		bcc $9a60			bcc 	_VHCheckFirstIndex
.9a57	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9a59	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a5b	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9a5e	90 48		bcc $9aa8			bcc 	_VHBadIndex
.9a60					_VHCheckFirstIndex:
.9a60	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9a62	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a64	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9a67	90 3f		bcc $9aa8			bcc 	_VHBadIndex
.9a69	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9a6b	64 37		stz $37				stz 	zTemp0+1
.9a6d	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9a70	30 0f		bmi $9a81			bmi 	_VHNoMultiply
.9a72	da		phx				phx
.9a73	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9a76	48		pha				pha
.9a77	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9a79	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a7b	1a		inc a				inc 	a 							; add 1 for zero base
.9a7c	fa		plx				plx
.9a7d	20 fe a9	jsr $a9fe			jsr 	Multiply8x8 				; calculate -> Z0
.9a80	fa		plx				plx
.9a81					_VHNoMultiply:
.9a81	18		clc				clc
.9a82	a5 36		lda $36				lda 	zTemp0
.9a84	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9a87	85 36		sta $36				sta 	zTemp0
.9a89	a5 37		lda $37				lda 	zTemp0+1
.9a8b	69 00		adc #$00			adc 	#0
.9a8d	85 37		sta $37				sta 	zTemp0+1
.9a8f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a92	20 6f 89	jsr $896f			jsr 	ScaleByBaseType
.9a95	18		clc				clc
.9a96	b2 3e		lda ($3e)			lda 	(zaTemp)
.9a98	65 36		adc $36				adc 	zTemp0
.9a9a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a9d	a0 01		ldy #$01			ldy 	#1
.9a9f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9aa1	65 37		adc $37				adc 	zTemp0+1
.9aa3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9aa6	7a		ply				ply 								; restore position
.9aa7	60		rts				rts
.9aa8					_VHBadIndex:
.9aa8	a9 17		lda #$17		lda	#23
.9aaa	4c 43 92	jmp $9243		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a934					AbsUnary:
.a934	fa		plx				plx 								; restore stack pos
.a935	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber 				; get a float or int
.a938	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.a93b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a93e	29 7f		and #$7f			and 	#$7F
.a940	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a943	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9aad					AllocUnary:
.9aad	fa		plx				plx 								; restore stack pos
.9aae	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger		; get bytes required.
.9ab1	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.9ab4	da		phx				phx 								; save X/Y
.9ab5	5a		phy				phy
.9ab6	8a		txa				txa 								; copy X into Y
.9ab7	a8		tay				tay
.9ab8	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9abb	aa		tax				tax
.9abc	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9abf	20 cc 9a	jsr $9acc			jsr 	AllocateXABytes 			; allocate memory
.9ac2	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9ac5	8a		txa				txa
.9ac6	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9ac9	7a		ply				ply
.9aca	fa		plx				plx
.9acb	60		rts				rts
.9acc					AllocateXABytes:
.9acc	5a		phy				phy
.9acd	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9ad0	84 36		sty $36				sty 	zTemp0
.9ad2	5a		phy				phy
.9ad3	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9ad6	84 37		sty $37				sty 	zTemp0+1
.9ad8	5a		phy				phy
.9ad9	18		clc				clc 								; add to low memory pointer
.9ada	6d 8c 04	adc $048c			adc 	lowMemPtr
.9add	8d 8c 04	sta $048c			sta 	lowMemPtr
.9ae0	8a		txa				txa
.9ae1	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9ae4	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9ae7	b0 2f		bcs $9b18			bcs 	CISSMemory
.9ae9	20 0a 9b	jsr $9b0a			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9aec					_ClearMemory:
.9aec	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9aef	c5 36		cmp $36				cmp 	zTemp0
.9af1	d0 07		bne $9afa			bne 	_CMClearNext
.9af3	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9af6	c5 37		cmp $37				cmp 	zTemp0+1
.9af8	f0 0c		beq $9b06			beq 	_CMExit
.9afa					_CMClearNext:
.9afa	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9afc	92 36		sta ($36)			sta 	(zTemp0)
.9afe	e6 36		inc $36				inc 	zTemp0
.9b00	d0 ea		bne $9aec			bne 	_ClearMemory
.9b02	e6 37		inc $37				inc		zTemp0+1
.9b04	80 e6		bra $9aec			bra 	_ClearMemory
.9b06					_CMExit:
.9b06	fa		plx				plx
.9b07	68		pla				pla
.9b08	7a		ply				ply
.9b09	60		rts				rts
.9b0a					CheckIdentifierStringSpace:
.9b0a	48		pha				pha
.9b0b	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9b0e	18		clc				clc
.9b0f	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b11	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9b14	b0 02		bcs $9b18			bcs 	CISSMemory
.9b16	68		pla				pla
.9b17	60		rts				rts
.9b18					CISSMemory:
.9b18	a9 06		lda #$06		lda	#6
.9b1a	4c 43 92	jmp $9243		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a944					AscUnary:
.a944	fa		plx				plx 								; restore stack pos
.a945	20 5a 9d	jsr $9d5a			jsr 	EvaluateString 				; get a string
.a948	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a94a	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.a94d	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.a950	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a951					FracUnary:
.a951	fa		plx				plx 								; restore stack pos
.a952	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber 				; get a float or int
.a955	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.a958	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a95b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a95d	f0 04		beq $a963			beq 	_IUZero
.a95f	20 21 a8	jsr $a821			jsr 	FloatFractionalPart
.a962	60		rts				rts
.a963					_IUZero:
.a963	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero
.a966	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a967					IntUnary:
.a967	fa		plx				plx 								; restore stack pos
.a968	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber 				; get a float or int
.a96b	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.a96e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a971	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a973	f0 03		beq $a978			beq 	_IUExit
.a975	20 84 a8	jsr $a884			jsr 	FloatIntegerPart
.a978					_IUExit:
.a978	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a979					LenUnary:
.a979	fa		plx				plx 								; restore stack pos
.a97a	20 5a 9d	jsr $9d5a			jsr 	EvaluateString 				; get a string
.a97d	5a		phy				phy
.a97e	a0 00		ldy #$00			ldy 	#0 							; find length
.a980					_LenFind:
.a980	b1 36		lda ($36),y			lda 	(zTemp0),y
.a982	f0 06		beq $a98a			beq 	_LenExit
.a984	c8		iny				iny
.a985	d0 f9		bne $a980			bne 	_LenFind
.a987	4c 67 ab	jmp $ab67			jmp 	RangeError 					; string > 255
.a98a					_LenExit:
.a98a	98		tya				tya
.a98b	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.a98e	7a		ply				ply
.a98f	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.a992	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b1d					Unary_Not:
.9b1d	fa		plx				plx
.9b1e	20 72 9d	jsr $9d72			jsr 	EvaluateInteger 			; get integer
.9b21	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.9b24	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; zero mantissa ?
.9b27	f0 04		beq $9b2d			beq 	_NotZero
.9b29	20 fb 9d	jsr $9dfb			jsr 	NSMSetZero
.9b2c	60		rts				rts
.9b2d					_NotZero:
.9b2d	4c b0 92	jmp $92b0			jmp 	ReturnTrue
.9b30					_UNBad:
.9b30	4c 71 ab	jmp $ab71			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b33					Unary_Random:
.9b33	fa		plx				plx
.9b34	20 ac 9b	jsr $9bac			jsr 	Random32Bit 				; get a random number
.9b37	20 91 9b	jsr $9b91			jsr 	URCopyToMantissa  			; put in mantissa
.9b3a	e8		inx				inx
.9b3b	20 87 9d	jsr $9d87			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b3e	ca		dex				dex
.9b3f	20 00 a6	jsr $a600			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9b42	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9b45	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b48	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.9b4b	60		rts				rts
.9b4c					Unary_Rnd:
.9b4c	fa		plx				plx
.9b4d	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber 				; number to use.
.9b50	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 			; closing bracket
.9b53	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b56	f0 2b		beq $9b83			beq 	_URCopySeed
.9b58	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9b5b	10 23		bpl $9b80			bpl 	_URDontSeed
.9b5d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9b60	49 17		eor #$17			eor 	#$17
.9b62	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b65	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b68	49 a5		eor #$a5			eor 	#$A5
.9b6a	8d 89 04	sta $0489			sta 	RandomSeed+1
.9b6d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9b70	49 c2		eor #$c2			eor 	#$C2
.9b72	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9b75	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9b78	49 9d		eor #$9d			eor 	#$9D
.9b7a	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9b7d	20 ac 9b	jsr $9bac			jsr 	Random32Bit
.9b80					_URDontSeed:
.9b80	20 ac 9b	jsr $9bac			jsr 	Random32Bit 				; generate a number.
.9b83					_URCopySeed:
.9b83	20 91 9b	jsr $9b91			jsr 	URCopyToMantissa 			; copy into mantissa
.9b86	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9b88	8d 28 04	sta $0428			sta 	NSExponent
.9b8b	a9 08		lda #$08			lda 	#NSTFloat
.9b8d	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b90	60		rts				rts
.9b91					URCopyToMantissa:
.9b91	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b94	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b97	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b9a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b9d	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9ba0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ba3	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9ba6	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9ba8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bab	60		rts				rts
.9bac					Random32Bit:
.9bac	5a		phy				phy
.9bad	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9baf	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9bb2	d0 03		bne $9bb7			bne 	_Random1
.9bb4	a8		tay				tay 								; if so do it 256 times
.9bb5	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9bb7					_Random1:
.9bb7	0a		asl a				asl 	a 							; LSFR RNG
.9bb8	2e 89 04	rol $0489			rol 	RandomSeed+1
.9bbb	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9bbe	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9bc1	90 02		bcc $9bc5			bcc 	_Random2
.9bc3	49 c5		eor #$c5			eor 	#$C5
.9bc5					_Random2:
.9bc5	88		dey				dey
.9bc6	d0 ef		bne $9bb7			bne 	_Random1
.9bc8	8d 88 04	sta $0488			sta 	RandomSeed+0
.9bcb	7a		ply				ply
.9bcc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a993					SgnUnary:
.a993	fa		plx				plx 								; restore stack pos
.a994	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber 				; get a float or int
.a997	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.a99a	20 2b 9e	jsr $9e2b			jsr 	NSMIsZero 					; if zero
.a99d	f0 10		beq $a9af			beq 	_SGZero  					; return Int Zero
.a99f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a9a2	48		pha				pha
.a9a3	a9 01		lda #$01			lda 	#1 							; set to 1
.a9a5	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.a9a8	68		pla				pla
.a9a9	29 80		and #$80			and		#$80 						; copy the sign byte out
.a9ab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9ae	60		rts				rts
.a9af	20 fb 9d	jsr $9dfb	_SGZero:jsr 	NSMSetZero
.a9b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a9b3					ValUnary:
.a9b3	fa		plx				plx 								; restore stack pos
.a9b4	20 c9 a9	jsr $a9c9			jsr 	ValMainCode 				; do the main val() code
.a9b7	b0 01		bcs $a9ba			bcs 	_VUError 					; couldn't convert
.a9b9	60		rts				rts
.a9ba					_VUError:
.a9ba	4c 6c ab	jmp $ab6c			jmp 	TypeError
.a9bd					IsValUnary:
.a9bd	fa		plx				plx 								; restore stack pos
.a9be	20 c9 a9	jsr $a9c9			jsr 	ValMainCode 				; do the main val() code
.a9c1	b0 03		bcs $a9c6			bcs 	_VUBad
.a9c3	4c b0 92	jmp $92b0			jmp 	ReturnTrue
.a9c6					_VUBad:
.a9c6	4c bc 92	jmp $92bc			jmp 	ReturnFalse
.a9c9					ValMainCode:
.a9c9	20 5a 9d	jsr $9d5a			jsr 	EvaluateString 				; get a string
.a9cc	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 			; check right bracket present
.a9cf	5a		phy				phy
.a9d0	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a9d2	f0 17		beq $a9eb			beq 	_VMCFail2
.a9d4	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a9d6	48		pha				pha 								; save first character
.a9d7	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a9d9	d0 01		bne $a9dc			bne 	_VMCStart
.a9db	c8		iny				iny 								; skip over -
.a9dc					_VMCStart:
.a9dc	38		sec				sec 								; initialise first time round.
.a9dd					_VMCNext:
.a9dd	c8		iny				iny 								; pre-increment
.a9de	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a9e0	f0 0c		beq $a9ee			beq 	_VMCSuccess 				; successful.
.a9e2	20 ff 97	jsr $97ff			jsr 	EncodeNumber 				; send it to the number-builder
.a9e5	90 03		bcc $a9ea			bcc 	_VMCFail 					; if failed, give up.
.a9e7	18		clc				clc 								; next time round, countinue
.a9e8	80 f3		bra $a9dd			bra 	_VMCNext
.a9ea					_VMCFail:
.a9ea	68		pla				pla
.a9eb					_VMCFail2:
.a9eb	7a		ply				ply
.a9ec	38		sec				sec
.a9ed	60		rts				rts
.a9ee					_VMCSuccess:
.a9ee	a9 00		lda #$00			lda 	#0 							; construct final
.a9f0	20 ff 97	jsr $97ff			jsr 	EncodeNumber
.a9f3	68		pla				pla
.a9f4	c9 2d		cmp #$2d			cmp 	#"-"
.a9f6	d0 03		bne $a9fb			bne 	_VMCNotNegative
.a9f8	20 a7 9d	jsr $9da7			jsr		NSMNegate
.a9fb					_VMCNotNegative:
.a9fb	7a		ply				ply
.a9fc	18		clc				clc
.a9fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bcd					ChrUnary:
.9bcd	fa		plx				plx 								; restore stack pos
.9bce	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger			; get value
.9bd1	48		pha				pha
.9bd2	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.9bd5	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bd7	20 87 ae	jsr $ae87			jsr 	StringTempAllocate
.9bda	68		pla				pla 								; write number to it
.9bdb	20 c5 ae	jsr $aec5			jsr 	StringTempWrite
.9bde	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bdf					SpcUnary:
.9bdf	fa		plx				plx 								; restore stack pos
.9be0	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger			; get value
.9be3	5a		phy				phy
.9be4	48		pha				pha 								; save count
.9be5	20 87 ae	jsr $ae87			jsr 	StringTempAllocate
.9be8	7a		ply				ply 								; to do count in Y
.9be9					_SpcLoop:
.9be9	c0 00		cpy #$00			cpy 	#0
.9beb	f0 08		beq $9bf5			beq 	_SpcExit
.9bed	a9 20		lda #$20			lda 	#32
.9bef	20 c5 ae	jsr $aec5			jsr 	StringTempWrite
.9bf2	88		dey				dey
.9bf3	80 f4		bra $9be9			bra 	_SPCLoop
.9bf5					_SpcExit:
.9bf5	7a		ply				ply
.9bf6	20 7c a5	jsr $a57c			jsr 	CheckRightBracket
.9bf9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bfa					Unary_Str:
.9bfa	fa		plx				plx
.9bfb	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber  			; get number
.9bfe	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 			; closing bracket
.9c01	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c03	20 1c 9c	jsr $9c1c			jsr 	ConvertNumberToString 		; do the conversion.
.9c06	a9 21		lda #$21			lda		#33 						; create buffer
.9c08	20 87 ae	jsr $ae87			jsr 	StringTempAllocate 			; allocate memory
.9c0b	da		phx				phx
.9c0c	a2 00		ldx #$00			ldx 	#0
.9c0e					_USCopy:
.9c0e	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c11	20 c5 ae	jsr $aec5			jsr 	StringTempWrite
.9c14	e8		inx				inx
.9c15	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c18	d0 f4		bne $9c0e			bne 	_USCopy
.9c1a	fa		plx				plx
.9c1b	60		rts				rts
.9c1c					ConvertNumberToString:
.9c1c	5a		phy				phy 								; save code position
.9c1d	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c20	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c23	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c26	10 0a		bpl $9c32			bpl 	_CNTSNotNegative
.9c28	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c2a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c2d	a9 2d		lda #$2d			lda 	#"-"
.9c2f	20 98 9c	jsr $9c98			jsr 	WriteDecimalBuffer
.9c32					_CNTSNotNegative:
.9c32	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c35	f0 15		beq $9c4c			beq 	_CNTSNotFloat
.9c37	e8		inx				inx 								; round up
.9c38	a9 01		lda #$01			lda 	#1
.9c3a	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.9c3d	ca		dex				dex
.9c3e	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c41	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c44	a9 08		lda #$08			lda 	#NSTFloat
.9c46	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c49	20 43 a7	jsr $a743			jsr 	FloatAdd
.9c4c					_CNTSNotFloat:
.9c4c	20 7a 9c	jsr $9c7a			jsr 	MakePlusTwoString
.9c4f	20 21 a8	jsr $a821			jsr 	FloatFractionalPart 		; get the fractional part
.9c52	20 e5 a8	jsr $a8e5			jsr 	NSNormalise					; normalise , exit if zero
.9c55	f0 21		beq $9c78			beq 	_CNTSExit
.9c57	a9 2e		lda #$2e			lda 	#"."
.9c59	20 98 9c	jsr $9c98			jsr 	WriteDecimalBuffer 			; write decimal place
.9c5c					_CNTSDecimal:
.9c5c	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c5f	30 17		bmi $9c78			bmi 	_CNTSExit
.9c61	e8		inx				inx 								; x 10.0
.9c62	a9 0a		lda #$0a			lda 	#10
.9c64	20 fd 9d	jsr $9dfd			jsr 	NSMSetByte
.9c67	a9 08		lda #$08			lda 	#NSTFloat
.9c69	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c6c	ca		dex				dex
.9c6d	20 ae a8	jsr $a8ae			jsr 	FloatMultiply
.9c70	20 7a 9c	jsr $9c7a			jsr 	MakePlusTwoString
.9c73	20 21 a8	jsr $a821			jsr 	FloatFractionalPart 		; get the fractional part
.9c76	80 e4		bra $9c5c			bra 	_CNTSDecimal 				; keep going.
.9c78					_CNTSExit:
.9c78	7a		ply				ply
.9c79	60		rts				rts
.9c7a					MakePlusTwoString:
.9c7a	da		phx				phx
.9c7b	20 d2 9d	jsr $9dd2			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c7e	e8		inx				inx 								; access it
.9c7f	e8		inx				inx
.9c80	20 84 a8	jsr $a884			jsr 	FloatIntegerPart 			; make it an integer
.9c83	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c85	20 ed a6	jsr $a6ed			jsr 	ConvertInt32
.9c88	a2 00		ldx #$00			ldx	 	#0
.9c8a					_MPTSCopy:
.9c8a	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9c8d	20 98 9c	jsr $9c98			jsr 	WriteDecimalBuffer
.9c90	e8		inx				inx
.9c91	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9c94	d0 f4		bne $9c8a			bne 	_MPTSCopy
.9c96	fa		plx				plx
.9c97	60		rts				rts
.9c98					WriteDecimalBuffer:
.9c98	da		phx				phx
.9c99	ae 95 04	ldx $0495			ldx 	dbOffset
.9c9c	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9c9f	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9ca2	ee 95 04	inc $0495			inc 	dbOffset
.9ca5	fa		plx				plx
.9ca6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9ca7					Unary_Left:
.9ca7	fa		plx				plx
.9ca8	18		clc				clc 								; only one parameter
.9ca9	20 1e 9d	jsr $9d1e			jsr 	SubstringInitial 			; set up.
.9cac	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9caf	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cb2	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9cb5	80 2c		bra $9ce3			bra 	SubstringMain
.9cb7					Unary_Right:
.9cb7	fa		plx				plx
.9cb8	18		clc				clc 								; only one parameter
.9cb9	20 1e 9d	jsr $9d1e			jsr 	SubstringInitial 			; set up.
.9cbc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9cbf	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cc2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cc5	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cc8	b0 02		bcs $9ccc			bcs 	_URNotUnderflow
.9cca	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ccc					_URNotUnderFlow:
.9ccc	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ccf	80 12		bra $9ce3			bra 	SubStringMain
.9cd1					Unary_Mid:
.9cd1	fa		plx				plx
.9cd2	38		sec				sec 								; two parameters
.9cd3	20 1e 9d	jsr $9d1e			jsr 	SubstringInitial 			; set up.
.9cd6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cd9	f0 05		beq $9ce0			beq 	_UMError
.9cdb	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cde	80 03		bra $9ce3			bra 	SubStringMain
.9ce0					_UMError:
.9ce0	4c 71 ab	jmp $ab71			jmp 	ArgumentError
.9ce3					SubStringMain:
.9ce3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9ce6	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9ce9	b0 2d		bcs $9d18			bcs 	_SSMNull 					; if so, return an empty string.
.9ceb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cee	f0 28		beq $9d18			beq 	_SSMNull 					; return empty string.
.9cf0	18		clc				clc 								; add the offset +1 to the address and
.9cf1	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cf4	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9cf7	85 36		sta $36				sta 	zTemp0
.9cf9	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cfc	69 00		adc #$00			adc 	#0
.9cfe	85 37		sta $37				sta 	zTemp0+1
.9d00					_SSMNoCarry:
.9d00	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d03	20 87 ae	jsr $ae87			jsr 	StringTempAllocate 			; allocate that many characters
.9d06	5a		phy				phy 								; save Y
.9d07	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d09					_SSMCopy:
.9d09	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d0b	f0 09		beq $9d16			beq 	_SSMEString 				; no more to copy
.9d0d	20 c5 ae	jsr $aec5			jsr 	StringTempWrite 			; and write it out.
.9d10	c8		iny				iny
.9d11	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d14	d0 f3		bne $9d09			bne 	_SSMCopy
.9d16					_SSMEString:
.9d16	7a		ply				ply
.9d17					_SSMExit:
.9d17	60		rts				rts
.9d18					_SSMNull:
.9d18	a9 00		lda #$00			lda 	#0
.9d1a	20 87 ae	jsr $ae87			jsr 	StringTempAllocate
.9d1d	60		rts				rts
.9d1e					SubstringInitial:
.9d1e	da		phx				phx 								; save initial stack position
.9d1f	08		php				php 								; save carry on stack indicating 2 parameters
.9d20	20 5a 9d	jsr $9d5a			jsr 	EvaluateString 				; get a string
.9d23	5a		phy				phy 								; calculate length to exponent.
.9d24	a0 ff		ldy #$ff			ldy 	#$FF
.9d26					_SIFindLength:
.9d26	c8		iny				iny
.9d27	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d29	d0 fb		bne $9d26			bne 	_SIFindLength
.9d2b	98		tya				tya
.9d2c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d2f	7a		ply				ply
.9d30	e8		inx				inx
.9d31	20 84 a5	jsr $a584			jsr 	CheckComma 					; comma next
.9d34	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger 		; get next parameter
.9d37	28		plp				plp 								; is it the last parameter ?
.9d38	90 07		bcc $9d41			bcc 	_SSIExit 					; if so, exit.
.9d3a	e8		inx				inx
.9d3b	20 84 a5	jsr $a584			jsr 	CheckComma 					; comma next
.9d3e	20 93 9d	jsr $9d93			jsr 	Evaluate8BitInteger 		; get last parameter
.9d41					_SSIExit:
.9d41	fa		plx				plx
.9d42	20 7c a5	jsr $a57c			jsr 	CheckRightBracket 			; check closing bracket
.9d45	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d46					EvaluateValue:
.9d46	48		pha				pha
.9d47	20 4c 96	jsr $964c			jsr		EvaluateExpression 			; expression
.9d4a	20 61 97	jsr $9761			jsr 	Dereference					; derefernce it
.9d4d	68		pla				pla
.9d4e	60		rts				rts
.9d4f					EvaluateNumber:
.9d4f	20 46 9d	jsr $9d46			jsr 	EvaluateValue 				; get a value
.9d52	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d55	29 10		and #$10			and 	#NSBIsString
.9d57	d0 16		bne $9d6f			bne 	HelperTypeError
.9d59	60		rts				rts
.9d5a					EvaluateString:
.9d5a	20 46 9d	jsr $9d46			jsr 	EvaluateValue 				; get a value
.9d5d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d60	29 10		and #$10			and 	#NSBIsString
.9d62	f0 0b		beq $9d6f			beq 	HelperTypeError
.9d64					CopyAddressToTemp0:
.9d64	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d67	85 36		sta $36				sta 	zTemp0
.9d69	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d6c	85 37		sta $37				sta 	zTemp0+1
.9d6e	60		rts				rts
.9d6f					HelperTypeError:
.9d6f	4c 6c ab	jmp $ab6c			jmp 	TypeError
.9d72					EvaluateInteger:
.9d72	20 4f 9d	jsr $9d4f			jsr 	EvaluateNumber
.9d75	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d78	d0 0a		bne $9d84			bne 	HelperValueError 			; if not, it's a float.
.9d7a	60		rts				rts
.9d7b					EvaluateUnsignedInteger:
.9d7b	20 72 9d	jsr $9d72			jsr 	EvaluateInteger 			; check integer is +ve
.9d7e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d81	30 01		bmi $9d84			bmi 	HelperValueError
.9d83	60		rts				rts
.9d84					HelperValueError:
.9d84	4c 71 ab	jmp $ab71			jmp 	ArgumentError
.9d87					Evaluate16BitInteger:
.9d87	20 7b 9d	jsr $9d7b			jsr	 	EvaluateUnsignedInteger		; get integer
.9d8a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d8d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d90	d0 f2		bne $9d84			bne 	HelperValueError
.9d92	60		rts				rts
.9d93					Evaluate8BitInteger:
.9d93	20 7b 9d	jsr $9d7b			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d96	d0 ec		bne $9d84			bne 	HelperValueError
.9d98	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d9b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d9e	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9da1	d0 e1		bne $9d84			bne 	HelperValueError
.9da3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9da6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a9fe					Multiply8x8:
.a9fe	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a9ff	85 36		sta $36			  	sta 	zTemp0
.aa01	86 37		stx $37				stx 	zTemp0+1
.aa03	a9 00		lda #$00			lda 	#0
.aa05	a2 08		ldx #$08			ldx 	#8
.aa07					_M88Loop:
.aa07	90 03		bcc $aa0c			bcc 	_M88NoAdd
.aa09	18		clc				clc
.aa0a	65 37		adc $37				adc 	zTemp0+1
.aa0c					_M88NoAdd:
.aa0c	6a		ror a				ror 	a
.aa0d	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aa0f	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aa10	d0 f5		bne $aa07			bne 	_M88Loop
.aa12	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aa14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9da7					NSMNegate:
.9da7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9daa	49 80		eor #$80			eor 	#NSBIsNegative
.9dac	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9daf	60		rts				rts
.9db0					NSMNegateMantissa:
.9db0	38		sec				sec
.9db1	a9 00		lda #$00			lda 	#0
.9db3	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9db6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db9	a9 00		lda #$00			lda 	#0
.9dbb	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dbe	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc1	a9 00		lda #$00			lda 	#0
.9dc3	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dc6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dc9	a9 00		lda #$00			lda 	#0
.9dcb	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dce	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd1	60		rts				rts
.9dd2					NSMShiftUpTwo:
.9dd2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dd8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ddb	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9dde	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9de1	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9de7	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9dea	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9ded	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9df0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df3	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9df6	60		rts				rts
.9df7					NSMSetZeroMantissaOnly:
.9df7	a9 00		lda #$00			lda 	#0
.9df9	80 08		bra $9e03			bra 	NSMSetMantissa
.9dfb					NSMSetZero:
.9dfb	a9 00		lda #$00			lda 	#0
.9dfd					NSMSetByte:
.9dfd	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e00	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e03					NSMSetMantissa:
.9e03	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e06	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e09	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e0c	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e0f	60		rts				rts
.9e10					NSMShiftLeft:
.9e10	18		clc				clc
.9e11					NSMRotateLeft:
.9e11	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e14	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e17	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e1a	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e1d	60		rts				rts
.9e1e					NSMShiftRight:
.9e1e	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e21	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e24	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e27	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e2a	60		rts				rts
.9e2b					NSMIsZero:
.9e2b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e2e	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e31	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e34	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aa15					Assemble_ora:
.aa15	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa18	01					.byte $01
.aa19					Assemble_and:
.aa19	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa1c	21					.byte $21
.aa1d					Assemble_eor:
.aa1d	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa20	41					.byte $41
.aa21					Assemble_adc:
.aa21	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa24	61					.byte $61
.aa25					Assemble_sta:
.aa25	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa28	81					.byte $81
.aa29					Assemble_lda:
.aa29	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa2c	a1					.byte $a1
.aa2d					Assemble_cmp:
.aa2d	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa30	c1					.byte $c1
.aa31					Assemble_sbc:
.aa31	20 6e 85	jsr $856e		jsr	AssembleGroup1
>aa34	e1					.byte $e1
.aa35					Assemble_asl:
.aa35	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa38	02					.byte $02
>aa39	75					.byte $75
.aa3a					Assemble_rol:
.aa3a	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa3d	22					.byte $22
>aa3e	75					.byte $75
.aa3f					Assemble_lsr:
.aa3f	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa42	42					.byte $42
>aa43	75					.byte $75
.aa44					Assemble_ror:
.aa44	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa47	62					.byte $62
>aa48	75					.byte $75
.aa49					Assemble_stx:
.aa49	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa4c	82					.byte $82
>aa4d	50					.byte $50
.aa4e					Assemble_ldx:
.aa4e	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa51	a2					.byte $a2
>aa52	d0					.byte $d0
.aa53					Assemble_dec:
.aa53	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa56	c2					.byte $c2
>aa57	55					.byte $55
.aa58					Assemble_inc:
.aa58	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa5b	e2					.byte $e2
>aa5c	55					.byte $55
.aa5d					Assemble_stz:
.aa5d	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa60	60					.byte $60
>aa61	44					.byte $44
.aa62					Assemble_bit:
.aa62	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa65	20					.byte $20
>aa66	55					.byte $55
.aa67					Assemble_sty:
.aa67	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa6a	80					.byte $80
>aa6b	54					.byte $54
.aa6c					Assemble_ldy:
.aa6c	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa6f	a0					.byte $a0
>aa70	d5					.byte $d5
.aa71					Assemble_cpy:
.aa71	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa74	c0					.byte $c0
>aa75	d4					.byte $d4
.aa76					Assemble_cpx:
.aa76	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa79	e0					.byte $e0
>aa7a	d0					.byte $d0
.aa7b					Assemble_tsb:
.aa7b	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa7e	00					.byte $00
>aa7f	50					.byte $50
.aa80					Assemble_trb:
.aa80	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa83	10					.byte $10
>aa84	50					.byte $50
.aa85					Assemble_jsr:
.aa85	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa88	14					.byte $14
>aa89	10					.byte $10
.aa8a					Assemble_jmp:
.aa8a	20 75 85	jsr $8575		jsr	AssembleGroup2
>aa8d	40					.byte $40
>aa8e	10					.byte $10
.aa8f					Assemble_bpl:
.aa8f	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aa92	10					.byte $10
.aa93					Assemble_bmi:
.aa93	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aa96	30					.byte $30
.aa97					Assemble_bvc:
.aa97	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aa9a	50					.byte $50
.aa9b					Assemble_bvs:
.aa9b	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aa9e	70					.byte $70
.aa9f					Assemble_bcc:
.aa9f	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aaa2	90					.byte $90
.aaa3					Assemble_bcs:
.aaa3	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aaa6	b0					.byte $b0
.aaa7					Assemble_bne:
.aaa7	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aaaa	d0					.byte $d0
.aaab					Assemble_beq:
.aaab	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aaae	f0					.byte $f0
.aaaf					Assemble_bra:
.aaaf	20 c6 85	jsr $85c6		jsr	AssembleGroup3
>aab2	80					.byte $80
.aab3					Assemble_brk:
.aab3	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aab6	00					.byte $00
.aab7					Assemble_php:
.aab7	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aaba	08					.byte $08
.aabb					Assemble_clc:
.aabb	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aabe	18					.byte $18
.aabf					Assemble_plp:
.aabf	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aac2	28					.byte $28
.aac3					Assemble_sec:
.aac3	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aac6	38					.byte $38
.aac7					Assemble_rti:
.aac7	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aaca	40					.byte $40
.aacb					Assemble_pha:
.aacb	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aace	48					.byte $48
.aacf					Assemble_cli:
.aacf	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aad2	58					.byte $58
.aad3					Assemble_phy:
.aad3	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aad6	5a					.byte $5a
.aad7					Assemble_rts:
.aad7	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aada	60					.byte $60
.aadb					Assemble_pla:
.aadb	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aade	68					.byte $68
.aadf					Assemble_sei:
.aadf	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aae2	78					.byte $78
.aae3					Assemble_ply:
.aae3	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aae6	7a					.byte $7a
.aae7					Assemble_dey:
.aae7	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aaea	88					.byte $88
.aaeb					Assemble_txa:
.aaeb	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aaee	8a					.byte $8a
.aaef					Assemble_tya:
.aaef	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aaf2	98					.byte $98
.aaf3					Assemble_txs:
.aaf3	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aaf6	9a					.byte $9a
.aaf7					Assemble_tay:
.aaf7	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aafa	a8					.byte $a8
.aafb					Assemble_tax:
.aafb	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>aafe	aa					.byte $aa
.aaff					Assemble_clv:
.aaff	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab02	b8					.byte $b8
.ab03					Assemble_tsx:
.ab03	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab06	ba					.byte $ba
.ab07					Assemble_iny:
.ab07	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab0a	c8					.byte $c8
.ab0b					Assemble_dex:
.ab0b	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab0e	ca					.byte $ca
.ab0f					Assemble_cld:
.ab0f	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab12	d8					.byte $d8
.ab13					Assemble_phx:
.ab13	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab16	da					.byte $da
.ab17					Assemble_stp:
.ab17	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab1a	db					.byte $db
.ab1b					Assemble_inx:
.ab1b	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab1e	e8					.byte $e8
.ab1f					Assemble_nop:
.ab1f	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab22	ea					.byte $ea
.ab23					Assemble_sed:
.ab23	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab26	f8					.byte $f8
.ab27					Assemble_plx:
.ab27	20 fc 85	jsr $85fc		jsr	AssembleGroup4
>ab2a	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ab2b					DecimalScalarTable:
>ab2b	66 66 66 66				.dword $66666666 ; 0.1
>ab2f	de					.byte $de
>ab30	1f 85 eb 51				.dword $51eb851f ; 0.01
>ab34	db					.byte $db
>ab35	4c 37 89 41				.dword $4189374c ; 0.001
>ab39	d8					.byte $d8
>ab3a	ac 8b db 68				.dword $68db8bac ; 0.0001
>ab3e	d4					.byte $d4
>ab3f	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ab43	d1					.byte $d1
>ab44	83 de 1b 43				.dword $431bde83 ; 1e-06
>ab48	ce					.byte $ce
>ab49	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ab4d	ca					.byte $ca
>ab4e	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ab52	c7					.byte $c7
>ab53	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ab57	c4					.byte $c4
>ab58	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ab5c	c0					.byte $c0
>ab5d	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ab61	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ab62					SyntaxError:
.ab62	a9 02		lda #$02		lda	#2
.ab64	4c 43 92	jmp $9243		jmp	ErrorHandler
.ab67					RangeError:
.ab67	a9 04		lda #$04		lda	#4
.ab69	4c 43 92	jmp $9243		jmp	ErrorHandler
.ab6c					TypeError:
.ab6c	a9 05		lda #$05		lda	#5
.ab6e	4c 43 92	jmp $9243		jmp	ErrorHandler
.ab71					ArgumentError:
.ab71	a9 07		lda #$07		lda	#7
.ab73	4c 43 92	jmp $9243		jmp	ErrorHandler
.ab76					NotDoneError:
.ab76	a9 0c		lda #$0c		lda	#12
.ab78	4c 43 92	jmp $9243		jmp	ErrorHandler
.ab7b					ErrorText:
>ab7b	42 72 65 61 6b 00			.text	"Break",0
>ab81	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ab89	72 72 6f 72 00
>ab8e	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ab96	20 62 79 20 7a 65 72 6f 00
>ab9f	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aba7	61 6e 67 65 00
>abac	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>abb4	6d 61 74 63 68 00
>abba	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>abc2	65 6d 6f 72 79 00
>abc8	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>abd0	61 72 67 75 6d 65 6e 74 00
>abd9	53 74 6f 70 00				.text	"Stop",0
>abde	53 74 72 69 6e 67 20 74			.text	"String too long",0
>abe6	6f 6f 20 6c 6f 6e 67 00
>abee	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>abf6	6e 20 66 61 69 6c 65 64 00
>abff	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ac07	61 74 61 00
>ac0b	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ac13	65 6e 74 65 64 00
>ac19	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ac21	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ac2d	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ac35	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ac42	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ac4a	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ac57	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ac5f	68 6f 75 74 20 57 68 69 6c 65 00
>ac6a	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ac72	68 6f 75 74 20 46 6f 72 00
>ac7b	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ac83	61 63 6b 20 66 75 6c 6c 00
>ac8c	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ac94	75 63 74 75 72 65 00
>ac9b	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>aca3	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>acb0	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>acb8	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>acc6	41 72 72 61 79 20 73 69			.text	"Array size",0
>acce	7a 65 00
>acd1	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>acd9	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ace1	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 866."
>ace9	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>acf9	2e 20 42 75 69 6c 64 20 38 36 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ad05					EXTPrintCharacter:
.ad05	48		pha				pha
.ad06	da		phx				phx
.ad07	5a		phy				phy
.ad08	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ad0b	7a		ply				ply
.ad0c	fa		plx				plx
.ad0d	68		pla				pla
.ad0e	60		rts				rts
.ad0f					EXTInputSingleCharacter:
.ad0f	da		phx				phx
.ad10	5a		phy				phy
.ad11					_EISCWait:
.ad11	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ad14	c9 00		cmp #$00			cmp 	#0
.ad16	f0 f9		beq $ad11			beq 	_EISCWait
.ad18	7a		ply				ply
.ad19	fa		plx				plx
.ad1a	60		rts				rts
.ad1b					EXTInputLine:
.ad1b	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ad1d					_ILLoop:
.ad1d	da		phx				phx 								; read character in
.ad1e	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ad21	fa		plx				plx
.ad22	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ad24	f0 12		beq $ad38			beq 	_ILBackspace
.ad26	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ad28	f0 15		beq $ad3f			beq 	_ILExit
.ad2a	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ad2c	90 ef		bcc $ad1d			bcc 	_ILLoop
.ad2e	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ad30	f0 eb		beq $ad1d			beq 	_ILLoop
.ad32	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ad35	e8		inx				inx
.ad36	80 e5		bra $ad1d			bra 	_ILLoop
.ad38					_ILBackspace:
.ad38	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ad3a	f0 e1		beq $ad1d			beq 	_ILLoop
.ad3c	ca		dex				dex 								; back one.
.ad3d	80 de		bra $ad1d			bra 	_ILLoop
.ad3f					_ILExit:
.ad3f	20 05 ad	jsr $ad05			jsr 	EXTPrintCharacter
.ad42	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ad45	60		rts				rts
.ad46					EXTBreakCheck:
.ad46	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ad49					MemoryDeleteLine:
.ad49	20 68 ad	jsr $ad68			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad4c	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ad4e	a8		tay				tay
.ad4f					_MDDLLoop:
.ad4f	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ad51	92 30		sta ($30)			sta 	(codePtr)
.ad53	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ad55	c5 3a		cmp $3a				cmp 	zTemp2
.ad57	d0 07		bne $ad60			bne 	_MDLDLNext
.ad59	a5 31		lda $31				lda 	codePtr+1
.ad5b	c5 3b		cmp $3b				cmp 	zTemp2+1
.ad5d	d0 01		bne $ad60			bne 	_MDLDLNext
.ad5f					_MDDLExit:
.ad5f	60		rts				rts
.ad60					_MDLDLNext:
.ad60	e6 30		inc $30				inc 	codePtr						; next byte
.ad62	d0 eb		bne $ad4f			bne 	_MDDLLoop
.ad64	e6 31		inc $31				inc 	codePtr+1
.ad66	80 e7		bra $ad4f			bra 	_MDDLLoop
.ad68					IMemoryFindEnd:
.ad68	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad6a	85 3a		sta $3a				sta 	0+zTemp2
.ad6c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad6e	85 3b		sta $3b				sta 	1+zTemp2
.ad70					_MDLFELoop:
.ad70	b2 3a		lda ($3a)			lda 	(zTemp2)
.ad72	f0 0b		beq $ad7f			beq 	_MDLFEExit
.ad74	18		clc				clc
.ad75	65 3a		adc $3a				adc 	zTemp2
.ad77	85 3a		sta $3a				sta 	zTemp2
.ad79	90 f5		bcc $ad70			bcc 	_MDLFELoop
.ad7b	e6 3b		inc $3b				inc 	zTemp2+1
.ad7d	80 f1		bra $ad70			bra 	_MDLFELoop
.ad7f					_MDLFEExit:
.ad7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.ad80					MemoryInsertLine:
.ad80	08		php				php
.ad81	20 68 ad	jsr $ad68			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad84	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.ad86	1a		inc a				inc 	a
.ad87	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ad89	b0 36		bcs $adc1			bcs 	_MDLIError
.ad8b	28		plp				plp
.ad8c	90 08		bcc $ad96			bcc 	_MDLIFound
.ad8e	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.ad90	85 30		sta $30				sta 	codePtr
.ad92	a5 3b		lda $3b				lda 	zTemp2+1
.ad94	85 31		sta $31				sta 	codePtr+1
.ad96					_MDLIFound:
.ad96	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ad99	a8		tay				tay
.ad9a					_MDLIInsert:
.ad9a	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.ad9c	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ad9e	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.ada0	c5 3a		cmp $3a				cmp 	zTemp2
.ada2	d0 06		bne $adaa			bne 	_MDLINext
.ada4	a5 31		lda $31				lda 	codePtr+1
.ada6	c5 3b		cmp $3b				cmp 	zTemp2+1
.ada8	f0 0a		beq $adb4			beq 	_MDLIHaveSpace
.adaa					_MDLINext:
.adaa	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.adac	d0 02		bne $adb0			bne 	_MDLINoBorrow
.adae	c6 3b		dec $3b				dec 	zTemp2+1
.adb0					_MDLINoBorrow:
.adb0	c6 3a		dec $3a				dec 	zTemp2
.adb2	80 e6		bra $ad9a			bra 	_MDLIInsert
.adb4					_MDLIHaveSpace:
.adb4	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.adb7	88		dey				dey 								; from offset-1 to 0
.adb8					_MDLICopy:
.adb8	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.adbb	91 30		sta ($30),y			sta 	(codePtr),y
.adbd	88		dey				dey
.adbe	10 f8		bpl $adb8			bpl 	_MDLICopy
.adc0	60		rts				rts
.adc1					_MDLIError:
.adc1	a9 06		lda #$06		lda	#6
.adc3	4c 43 92	jmp $9243		jmp	ErrorHandler
.adc6					MDLAppendLine:
.adc6	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.adc8	85 36		sta $36				sta 	zTemp0
.adca	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adcc	85 38		sta $38				sta 	0+zTemp1
.adce	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.add0	85 39		sta $39				sta 	1+zTemp1
.add2	b2 38		lda ($38)			lda 	(zTemp1)
.add4	d0 0a		bne $ade0			bne 	_MDLANoInitialise
.add6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.add8	8d 4d 06	sta $064d			sta 	0+AppendPointer
.addb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.addd	8d 4e 06	sta $064e			sta 	1+AppendPointer
.ade0					_MDLANoInitialise:
.ade0	18		clc				clc
.ade1	ad 4d 06	lda $064d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ade4	85 38		sta $38				sta 	zTemp1
.ade6	72 36		adc ($36)			adc 	(zTemp0)
.ade8	8d 4d 06	sta $064d			sta 	AppendPointer
.adeb	ad 4e 06	lda $064e			lda 	AppendPointer+1
.adee	85 39		sta $39				sta 	zTemp1+1
.adf0	69 00		adc #$00			adc 	#0
.adf2	8d 4e 06	sta $064e			sta 	AppendPointer+1
.adf5	a0 00		ldy #$00			ldy 	#0
.adf7					_MDLACopy:
.adf7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.adf9	91 38		sta ($38),y			sta 	(zTemp1),y
.adfb	c8		iny				iny
.adfc	98		tya				tya
.adfd	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.adff	d0 f6		bne $adf7			bne 	_MDLACopy
.ae01	a9 00		lda #$00			lda 	#0 							; end of program.
.ae03	91 38		sta ($38),y			sta 	(zTemp1),y
.ae05	60		rts				rts
.064d					AppendPointer:
>064d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9e38					MemoryNew:
.9e38	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e3a	85 30		sta $30				sta 	codePtr
.9e3c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e3e	85 31		sta $31				sta 	codePtr+1
.9e40	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e42	92 30		sta ($30)			sta 	(codePtr)
.9e44	60		rts				rts
.9e45					MemoryInline:
.9e45	98		tya				tya 								; put address into stack,x
.9e46	18		clc				clc
.9e47	65 30		adc $30				adc 	codePtr
.9e49	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e4c	a5 31		lda $31				lda 	codePtr+1
.9e4e	69 00		adc #$00			adc 	#0
.9e50	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e53	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e56	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9e5a					MemorySearch:
.9e5a	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9e5c	86 37		stx $37				stx 	zTemp0+1
.9e5e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e60	85 30		sta $30				sta 	codePtr
.9e62	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e64	85 31		sta $31				sta 	codePtr+1
.9e66					_MTAXLoop:
.9e66	b2 30		lda ($30)			lda 	(codePtr)
.9e68	18		clc				clc
.9e69	f0 21		beq $9e8c			beq 	_MTAXExit 					; reached end, exit with CC.
.9e6b	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9e6d	b1 30		lda ($30),y			lda 	(codePtr),y
.9e6f	38		sec				sec
.9e70	e5 36		sbc $36				sbc 	zTemp0
.9e72	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9e74	c8		iny				iny 								; do the MSB
.9e75	b1 30		lda ($30),y			lda 	(codePtr),y
.9e77	e5 37		sbc $37				sbc 	zTemp0+1
.9e79	05 38		ora $38				ora 	zTemp1
.9e7b	f0 0f		beq $9e8c			beq 	_MTAXExit	 				; found
.9e7d	b0 0d		bcs $9e8c			bcs 	_MTAXExit 					; current < required exit
.9e7f	18		clc				clc
.9e80	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9e82	65 30		adc $30				adc 	codePtr
.9e84	85 30		sta $30				sta 	codePtr
.9e86	90 02		bcc $9e8a			bcc 	_CREExit
.9e88	e6 31		inc $31				inc 	codePtr+1
.9e8a					_CREExit:
.9e8a	80 da		bra $9e66			bra 	_MTAXLoop
.9e8c					_MTAXExit:
.9e8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9e8d					StackPushByte:
.9e8d	48		pha				pha 								; save byte
.9e8e	a5 34		lda $34				lda 	BasicStack
.9e90	d0 09		bne $9e9b			bne 	_SPBNoBorrow
.9e92	c6 35		dec $35				dec 	BasicStack+1
.9e94	48		pha				pha
.9e95	a5 35		lda $35				lda 	BasicStack+1
.9e97	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9e99	90 06		bcc $9ea1			bcc 	_SPBMemory
.9e9b					_SPBNoBorrow:
.9e9b	c6 34		dec $34				dec 	BasicStack
.9e9d	68		pla				pla 								; get back and write
.9e9e	92 34		sta ($34)			sta 	(BasicStack)
.9ea0	60		rts				rts
.9ea1					_SPBMemory:
.9ea1	a9 12		lda #$12		lda	#18
.9ea3	4c 43 92	jmp $9243		jmp	ErrorHandler
.9ea6					StackPopByte:
.9ea6	b2 34		lda ($34)			lda 	(BasicStack)
.9ea8	e6 34		inc $34				inc 	BasicStack
.9eaa	d0 02		bne $9eae			bne 	_SPBNoCarry
.9eac	e6 35		inc $35				inc 	BasicStack+1
.9eae					_SPBNoCarry:
.9eae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9eaf					StackOpen:
.9eaf	48		pha				pha 								; save frame byte
.9eb0	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9eb2	0a		asl a				asl 	a 							; claim twice this for storage
.9eb3	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9eb5	38		sec				sec 								; so basically subtracting from
.9eb6	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9eb8	85 34		sta $34				sta 	basicStack
.9eba	b0 08		bcs $9ec4			bcs 	_SONoBorrow
.9ebc	c6 35		dec $35				dec 	basicStack+1
.9ebe	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9ec0	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9ec2	90 04		bcc $9ec8			bcc 	_SOMemory
.9ec4					_SONoBorrow:
.9ec4	68		pla				pla 								; get marker back and write at TOS
.9ec5	92 34		sta ($34)			sta 	(basicStack)
.9ec7	60		rts				rts
.9ec8					_SOMemory:
.9ec8	a9 12		lda #$12		lda	#18
.9eca	4c 43 92	jmp $9243		jmp	ErrorHandler
.9ecd					StackClose:
.9ecd	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9ecf	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9ed1	0a		asl a				asl 	a 							; claim twice this.
.9ed2	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9ed4	85 34		sta $34				sta 	basicStack
.9ed6	90 02		bcc $9eda			bcc 	_SCExit
.9ed8	e6 35		inc $35				inc 	basicStack+1
.9eda					_SCExit:
.9eda	60		rts				rts
.9edb					StackCheckFrame:
.9edb	48		pha				pha
.9edc					_StackRemoveLocals:
.9edc	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9ede	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9ee0	b0 05		bcs $9ee7			bcs 	_SCNoLocal
.9ee2	20 23 a5	jsr $a523			jsr 	LocalPopValue
.9ee5	80 f5		bra $9edc			bra 	_StackRemoveLocals
.9ee7					_SCNoLocal:
.9ee7	68		pla				pla
.9ee8	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9eea	29 f0		and #$f0			and 	#$F0 						; check type bits
.9eec	d0 01		bne $9eef			bne 	_SCFError 					; different, we have structures mixed up
.9eee	60		rts				rts
.9eef					_SCFError:
.9eef	8a		txa				txa 								; report error X
.9ef0	4c 43 92	jmp $9243			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9ef3					STKSaveCodePosition:
.9ef3	5a		phy				phy
.9ef4	98		tya				tya 								; save Y
.9ef5	a0 05		ldy #$05			ldy 	#5
.9ef7	91 34		sta ($34),y			sta 	(basicStack),y
.9ef9	88		dey				dey 								; save Code Pointer
.9efa					_STKSaveLoop:
.9efa	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9efd	91 34		sta ($34),y			sta 	(basicStack),y
.9eff	88		dey				dey
.9f00	d0 f8		bne $9efa			bne 	_STKSaveLoop
.9f02	7a		ply				ply
.9f03	60		rts				rts
.9f04					STKLoadCodePosition:
.9f04	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9f06					_STKLoadLoop:
.9f06	b1 34		lda ($34),y			lda 	(basicStack),y
.9f08	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9f0b	c8		iny				iny
.9f0c	c0 05		cpy #$05			cpy 	#5
.9f0e	d0 f6		bne $9f06			bne 	_STKLoadLoop
.9f10	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9f12	a8		tay				tay
.9f13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9f14					StackReset:
.9f14	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9f16	85 34		sta $34				sta 	0+basicStack
.9f18	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9f1a	85 35		sta $35				sta 	1+basicStack
.9f1c	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9f1e	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9f20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.ae06					StringConcrete:
.ae06	5a		phy				phy 								; save position on stack
.ae07	20 0a 9b	jsr $9b0a			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ae0a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ae0d	85 38		sta $38				sta 	zTemp1
.ae0f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae12	85 39		sta $39				sta 	zTemp1+1
.ae14	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.ae16					_SALength:
.ae16	c8		iny				iny
.ae17	b1 38		lda ($38),y			lda 	(zTemp1),y
.ae19	d0 fb		bne $ae16			bne 	_SALength
.ae1b	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ae1d	b0 3f		bcs $ae5e			bcs 	_SALengthError
.ae1f	98		tya				tya 				 				; length of the new string
.ae20	18		clc				clc
.ae21	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ae23	90 02		bcc $ae27			bcc 	_SAHaveLength
.ae25	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ae27					_SAHaveLength:
.ae27	48		pha				pha 								; save length.
.ae28	38		sec				sec
.ae29	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ae2b	6d 8e 04	adc $048e			adc 	StringMemory
.ae2e	8d 8e 04	sta $048e			sta 	StringMemory
.ae31	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ae33	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ae36	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ae38	6d 8f 04	adc $048f			adc 	StringMemory+1
.ae3b	8d 8f 04	sta $048f			sta 	StringMemory+1
.ae3e	85 3b		sta $3b				sta 	zTemp2+1
.ae40	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae43	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ae44	38		sec				sec
.ae45	e9 03		sbc #$03			sbc 	#3
.ae47	92 3a		sta ($3a)			sta 	(zTemp2)
.ae49	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ae4b	a0 01		ldy #$01			ldy 	#1
.ae4d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ae4f					_SACopyNewString:
.ae4f	a0 00		ldy #$00			ldy 	#0
.ae51					_SACopyNSLoop:
.ae51	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.ae53	c8		iny				iny 								; write two on in string storage
.ae54	c8		iny				iny
.ae55	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ae57	88		dey				dey 								; this makes it one one.
.ae58	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.ae5a	d0 f5		bne $ae51			bne 	_SACopyNSLoop
.ae5c	7a		ply				ply
.ae5d	60		rts				rts
.ae5e					_SALengthError:
.ae5e	a9 09		lda #$09		lda	#9
.ae60	4c 43 92	jmp $9243		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.ae63					StringSystemInitialise:
.ae63	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.ae65	8d 8e 04	sta $048e			sta 	0+StringMemory
.ae68	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.ae6a	8d 8f 04	sta $048f			sta 	1+StringMemory
.ae6d	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.ae70	60		rts				rts
.ae71					StringSpaceInitialise:
.ae71	20 0a 9b	jsr $9b0a			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ae74	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.ae76	8d 90 04	sta $0490			sta 	StringInitialised
.ae79	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.ae7c	8d 91 04	sta $0491			sta 	StringTempPointer
.ae7f	ad 8f 04	lda $048f			lda 	StringMemory+1
.ae82	3a		dec a				dec 	a
.ae83	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ae86	60		rts				rts
.ae87					StringTempAllocate:
.ae87	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.ae89	b0 35		bcs $aec0			bcs 	_STALength
.ae8b	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.ae8e	30 05		bmi $ae95			bmi 	_STAAllocate
.ae90	48		pha				pha 								; save value to subtract.
.ae91	20 71 ae	jsr $ae71			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.ae94	68		pla				pla 								; restore it
.ae95					_STAAllocate:
.ae95	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.ae97	18		clc				clc  								; deliberate allows one more
.ae98	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.ae9b	8d 91 04	sta $0491			sta 	StringTempPointer
.ae9e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.aea1	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.aea3	ad 92 04	lda $0492			lda 	StringTempPointer+1
.aea6	69 ff		adc #$ff			adc 	#$FF
.aea8	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aeab	85 3d		sta $3d				sta 	zsTemp+1
.aead	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aeb0	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.aeb3	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.aeb6	a9 10		lda #$10			lda 	#NSTString
.aeb8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aebb	a9 00		lda #$00			lda 	#0 							; clear the target string
.aebd	92 3c		sta ($3c)			sta 	(zsTemp)
.aebf	60		rts				rts
.aec0					_STALength:
.aec0	a9 09		lda #$09		lda	#9
.aec2	4c 43 92	jmp $9243		jmp	ErrorHandler
.aec5					StringTempWrite:
.aec5	48		pha				pha
.aec6	92 3c		sta ($3c)			sta 	(zsTemp)
.aec8	e6 3c		inc $3c				inc 	zsTemp
.aeca	d0 02		bne $aece			bne 	_STWNoCarry
.aecc	e6 3d		inc $3d				inc 	zsTemp+1
.aece					_STWNoCarry:
.aece	a9 00		lda #$00			lda 	#0
.aed0	92 3c		sta ($3c)			sta 	(zsTemp)
.aed2	68		pla				pla
.aed3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9f21					BackloadProgram:
.9f21	a2 ff		ldx #$ff			ldx 	#$FF
.9f23	20 4b 9f	jsr $9f4b			jsr 	BLReadByte
.9f26	30 1f		bmi $9f47			bmi 	_BPExit
.9f28					_BPCopy:
.9f28	e8		inx				inx  								; copy byte in
.9f29	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9f2c	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9f2f	20 4b 9f	jsr $9f4b			jsr 	BLReadByte 					; read next byte
.9f32	30 0a		bmi $9f3e			bmi 	_BPEndLine 					; -ve = EOL
.9f34	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9f36	d0 02		bne $9f3a			bne 	_BPNotTab
.9f38	a9 20		lda #$20			lda 	#' '
.9f3a					_BPNotTab:
.9f3a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9f3c	b0 ea		bcs $9f28			bcs 	_BPCopy
.9f3e					_BPEndLine:
.9f3e	20 74 a2	jsr $a274			jsr 	TokeniseLine 				; tokenise the line.
.9f41	38		sec				sec 								; append not insert
.9f42	20 80 ad	jsr $ad80			jsr 	MemoryInsertLine 			; append to current program
.9f45	80 da		bra $9f21			bra 	BackloadProgram
.9f47					_BPExit:
.9f47	20 74 88	jsr $8874			jsr 	ClearCommand 				; clear variables etc.
.9f4a	60		rts				rts
.9f4b					BLReadByte:
.9f4b					_BLLoad:
.9f4b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9f4e	ee 4c 9f	inc $9f4c			inc 	_BLLoad+1
.9f51	d0 03		bne $9f56			bne 	_BLNoCarry
.9f53	ee 4d 9f	inc $9f4d			inc 	_BLLoad+2
.9f56					_BLNoCarry:
.9f56	c9 00		cmp #$00			cmp 	#0
.9f58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9f59					TokeniseSearchTable:
.9f59	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9f5b	85 36		sta $36				sta 	zTemp0
.9f5d	a0 00		ldy #$00			ldy 	#0
.9f5f	a9 80		lda #$80			lda 	#$80 						; token #
.9f61	85 38		sta $38				sta 	zTemp1
.9f63					_TSTLoop:
.9f63	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9f65	30 49		bmi $9fb0			bmi 	_TSTFail 					; -ve = end of table
.9f67	f0 2e		beq $9f97			beq 	_TSTNext 					; zero, check next it's a dummy
.9f69	c8		iny				iny 								; get the hash
.9f6a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f6c	88		dey				dey
.9f6d	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9f70	d0 25		bne $9f97			bne 	_TSTNext
.9f72	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9f75	38		sec				sec
.9f76	ed 80 04	sbc $0480			sbc 	identStart
.9f79	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9f7b	d0 1a		bne $9f97			bne 	_TSTNext
.9f7d	5a		phy				phy 								; save Y , we might fail
.9f7e	c8		iny				iny 								; point to text
.9f7f	c8		iny				iny
.9f80	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9f83					_TSTCompareName:
.9f83	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9f86	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9f88	d0 0c		bne $9f96			bne 	_TSTNextPullY 				; fail, pullY and do next
.9f8a	e8		inx				inx
.9f8b	c8		iny				iny
.9f8c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9f8f	d0 f2		bne $9f83			bne 	_TSTCompareName
.9f91	7a		ply				ply 								; throw Y
.9f92	a5 38		lda $38				lda 	zTemp1 						; get token #
.9f94	38		sec				sec 								; return with CS = passed.
.9f95	60		rts				rts
.9f96					_TSTNextPullY:
.9f96	7a		ply				ply 								; restore current, fall through.
.9f97					_TSTNext:
.9f97	e6 38		inc $38				inc 	zTemp1 						; token counter
.9f99	98		tya				tya
.9f9a	18		clc				clc
.9f9b	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9f9d	1a		inc a				inc 	a 							; +1
.9f9e	1a		inc a				inc 	a 							; +2
.9f9f	a8		tay				tay
.9fa0	10 c1		bpl $9f63			bpl 	_TSTLoop 					; if Y < $80 loop back
.9fa2	98		tya				tya 								; add Y to zTemp0 and reset Y
.9fa3	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9fa5	18		clc				clc  								; but have tables > 255 bytes
.9fa6	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9fa8	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9faa	90 b7		bcc $9f63			bcc 	_TSTLoop
.9fac	e6 37		inc $37				inc 	zTemp0+1
.9fae	80 b3		bra $9f63			bra 	_TSTLoop
.9fb0					_TSTFail:
.9fb0	18		clc				clc
.9fb1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9fb2					KeywordSet0:
>9fb2	00 65					.text	0,$65,""               ; $80 !0:EOF
>9fb4	00 58					.text	0,$58,""               ; $81 !1:SH1
>9fb6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9fb8	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9fbe	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9fc6	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9fcc	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9fd3	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9fda	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9fe1	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9fe7	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9fef	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9ff7	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9ffd	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a004	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a00a	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a012	28
>a013	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a01b	28
>a01c	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a022	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a028	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a02e	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a035	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a03b	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a041	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a046	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a04a	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a050	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a058	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a05f	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a066	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a06e	43
>a06f	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a075	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a07b	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a082	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a088	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a08e	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a093	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a099	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a09e	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a0a6	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a0ac	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a0b3	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a0b9	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a0be	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a0c5	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a0cc	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a0d2	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a0d7	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a0df	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a0e3	ff					.text	$FF
.a0e4					KeywordSet1:
>a0e4	00 65					.text	0,$65,""               ; $80 !0:EOF
>a0e6	00 58					.text	0,$58,""               ; $81 !1:SH1
>a0e8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a0ea	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a0f2	4c 45
>a0f4	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a0fc	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a103	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a108	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a10e	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a113	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a11b	45
>a11c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a121	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a127	ff					.text	$FF
.a128					KeywordSet2:
>a128	00 65					.text	0,$65,""               ; $80 !0:EOF
>a12a	00 58					.text	0,$58,""               ; $81 !1:SH1
>a12c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a12e	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a133	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a138	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a13d	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a142	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a147	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a14c	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a151	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a156	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a15b	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a160	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a165	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a16a	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a16f	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a174	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a179	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a17e	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a183	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a188	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a18d	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a192	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a197	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a19c	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a1a1	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a1a6	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a1ab	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a1b0	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a1b5	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a1ba	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a1bf	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a1c4	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a1c9	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a1ce	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a1d3	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a1d8	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a1dd	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a1e2	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a1e7	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a1ec	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a1f1	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a1f6	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a1fb	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a200	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a205	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a20a	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a20f	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a214	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a219	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a21e	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a223	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a228	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a22d	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a232	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a237	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a23c	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a241	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a246	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a24b	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a250	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a255	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a25a	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a25f	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a264	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a269	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a26e	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a273	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a274					TokeniseLine:
.a274	20 fc a3	jsr $a3fc			jsr 	FixLineBufferCase 			; fix line case
.a277	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a279	8d a6 04	sta $04a6			sta 	tokenOffset
.a27c	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a27f	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a282	a2 ff		ldx #$ff			ldx 	#$FF
.a284					_TKFindFirst:
.a284	e8		inx				inx
.a285	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a288	f0 79		beq $a303			beq 	_TKExit
.a28a	c9 20		cmp #$20			cmp 	#' '
.a28c	90 f6		bcc $a284			bcc 	_TKFindFirst
.a28e	c9 30		cmp #$30			cmp 	#'0'
.a290	90 07		bcc $a299			bcc 	_TKNoLineNumber
.a292	c9 3a		cmp #$3a			cmp 	#'9'+1
.a294	b0 03		bcs $a299			bcs 	_TKNoLineNumber
.a296	20 26 a4	jsr $a426			jsr 	TokeniseExtractLineNumber
.a299					_TKNoLineNumber:
.a299					_TKTokeniseLoop:
.a299	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a29c	f0 65		beq $a303			beq 	_TKExit
.a29e	e8		inx				inx
.a29f	c9 20		cmp #$20			cmp 	#' '
.a2a1	f0 f6		beq $a299			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a2a3	ca		dex				dex 								; undo last get, A contains character, X is position.
.a2a4	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a2a6	f0 61		beq $a309			beq 	_TKTokeniseIdentifier
.a2a8	c9 41		cmp #$41			cmp 	#'A'
.a2aa	90 04		bcc $a2b0			bcc 	_TKTokenisePunctuation
.a2ac	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a2ae	90 59		bcc $a309			bcc 	_TKTokeniseIdentifier
.a2b0					_TKTokenisePunctuation:
.a2b0	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a2b2	f0 27		beq $a2db			beq 	_TKString
.a2b4	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a2b6	f0 28		beq $a2e0			beq 	_TKHexConstant
.a2b8	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a2ba	f0 29		beq $a2e5			beq 	_TKCheckDouble
.a2bc	c9 3e		cmp #$3e			cmp 	#'>'
.a2be	f0 25		beq $a2e5			beq 	_TKCheckDouble
.a2c0					_TKStandardPunctuation:
.a2c0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a2c3	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a2c5	90 0e		bcc $a2d5			bcc 	_TKNoShift
.a2c7	48		pha				pha 								; save
.a2c8	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a2ca	85 36		sta $36				sta 	zTemp0
.a2cc	68		pla				pla
.a2cd	29 20		and #$20			and 	#32 						; bit 5
.a2cf	4a		lsr a				lsr 	a 							; shift into bit 3
.a2d0	4a		lsr a				lsr 	a
.a2d1	05 36		ora $36				ora 	zTemp0
.a2d3	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a2d5					_TKNoShift:
.a2d5	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte 			; write the punctuation character
.a2d8	e8		inx				inx 								; consume the character
.a2d9	80 be		bra $a299			bra 	_TKTokeniseLoop 			; and loop round again.
.a2db					_TKString:
.a2db	20 8b a3	jsr $a38b			jsr 	TokeniseString
.a2de	80 b9		bra $a299			bra 	_TKTokeniseLoop
.a2e0					_TKHexConstant:
.a2e0	20 c6 a3	jsr $a3c6			jsr 	TokeniseHexConstant
.a2e3	80 b4		bra $a299			bra 	_TKTokeniseLoop
.a2e5					_TKCheckDouble:
.a2e5	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a2e8	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a2ea	90 d4		bcc $a2c0			bcc 	_TKStandardPunctuation
.a2ec	c9 3f		cmp #$3f			cmp 	#'>'+1
.a2ee	b0 d0		bcs $a2c0			bcs 	_TKStandardPunctuation
.a2f0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a2f3	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a2f5	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a2f6	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a2f9	38		sec				sec
.a2fa	e9 3c		sbc #$3c			sbc 	#'<'
.a2fc	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a2ff	e8		inx				inx 								; consume both
.a300	e8		inx				inx
.a301	80 96		bra $a299			bra 	_TKTokeniseLoop
.a303	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a305	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a308	60		rts				rts
.a309					_TKTokeniseIdentifier:
.a309	8e 80 04	stx $0480			stx 	identStart 					; save start
.a30c	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a30f					_TKCheckLoop:
.a30f	e8		inx				inx 								; look at next, we know first is identifier.
.a310	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a313	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a315	f0 f8		beq $a30f			beq 	_TKCheckLoop
.a317	c9 30		cmp #$30			cmp	 	#"0"
.a319	90 0c		bcc $a327			bcc 	_TKEndIdentifier
.a31b	c9 3a		cmp #$3a			cmp 	#"9"+1
.a31d	90 f0		bcc $a30f			bcc 	_TKCheckLoop
.a31f	c9 41		cmp #$41			cmp	 	#"A"
.a321	90 04		bcc $a327			bcc 	_TKEndIdentifier
.a323	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a325	90 e8		bcc $a30f			bcc 	_TKCheckLoop
.a327					_TKEndIdentifier:
.a327	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a32a	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a32c	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a32e	f0 06		beq $a336			beq 	_TKHasTypeCharacter
.a330	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a332	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a334	d0 07		bne $a33d			bne 	_TKNoTypeCharacter
.a336					_TKHasTypeCharacter:
.a336	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a339	e8		inx				inx 								; read next
.a33a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a33d					_TKNoTypeCharacter:
.a33d	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a33f	d0 09		bne $a34a			bne 	_TKNoArray
.a341	e8		inx				inx 								; skip the (
.a342	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a345	09 04		ora #$04			ora 	#$04
.a347	8d 84 04	sta $0484			sta 	identTypeByte
.a34a					_TKNoArray:
.a34a	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a34d	20 e7 a3	jsr $a3e7			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a350	a0 9f		ldy #$9f			ldy 	#(KeywordSet0) >> 8
.a352	a9 b2		lda #$b2			lda 	#(KeywordSet0) & $FF
.a354	20 59 9f	jsr $9f59			jsr 	TokeniseSearchTable
.a357	a2 00		ldx #$00			ldx 	#0
.a359	b0 1f		bcs $a37a			bcs 	_TKFoundToken
.a35b	a0 a0		ldy #$a0			ldy 	#(KeywordSet1) >> 8
.a35d	a9 e4		lda #$e4			lda 	#(KeywordSet1) & $FF
.a35f	20 59 9f	jsr $9f59			jsr 	TokeniseSearchTable
.a362	a2 81		ldx #$81			ldx 	#$81
.a364	b0 14		bcs $a37a			bcs 	_TKFoundToken
.a366	a0 a1		ldy #$a1			ldy 	#(KeywordSet2) >> 8
.a368	a9 28		lda #$28			lda 	#(KeywordSet2) & $FF
.a36a	20 59 9f	jsr $9f59			jsr 	TokeniseSearchTable
.a36d	a2 82		ldx #$82			ldx 	#$82
.a36f	b0 09		bcs $a37a			bcs 	_TKFoundToken
.a371	20 77 a4	jsr $a477			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a374	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a377	4c 99 a2	jmp $a299			jmp 	_TKTokeniseLoop 			; and go round again.
.a37a					_TKFoundToken:
.a37a	48		pha				pha 								; save token
.a37b	8a		txa				txa 								; shift in X, is there one ?
.a37c	f0 03		beq $a381			beq 	_TKNoTShift
.a37e	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte 			; if so, write it out
.a381					_TKNoTShift:
.a381	68		pla				pla 								; restore and write token
.a382	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a385	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a388	4c 99 a2	jmp $a299			jmp 	_TKTokeniseLoop 			; and go round again.
.a38b					TokeniseString:
.a38b	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a38d	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a390	e8		inx				inx									; start of quoted string.
.a391	da		phx				phx 								; push start of string on top
.a392	ca		dex				dex
.a393					_TSFindEnd:
.a393	e8		inx				inx
.a394	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a397	f0 04		beq $a39d			beq 	_TSEndOfString
.a399	c9 22		cmp #$22			cmp 	#'"'
.a39b	d0 f6		bne $a393			bne 	_TSFindEnd
.a39d					_TSEndOfString:
.a39d	7a		ply				ply  								; so now Y is first character, X is character after end.
.a39e	48		pha				pha 								; save terminating character
.a39f	20 a7 a3	jsr $a3a7			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a3a2	68		pla				pla 								; terminating character
.a3a3	f0 01		beq $a3a6			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a3a5	e8		inx				inx
.a3a6					_TSNotQuote:
.a3a6	60		rts				rts
.a3a7					TOWriteBlockXY:
.a3a7	86 36		stx $36				stx 	zTemp0 						; write end character
.a3a9	98		tya				tya
.a3aa	49 ff		eor #$ff			eor 	#$FF
.a3ac	38		sec				sec
.a3ad	65 36		adc $36				adc 	zTemp0
.a3af	1a		inc a				inc 	a 							; one extra for NULL
.a3b0	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a3b3					_TOBlockLoop:
.a3b3	c4 36		cpy $36				cpy 	zTemp0
.a3b5	f0 09		beq $a3c0			beq 	_TOBlockExit
.a3b7	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a3ba	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a3bd	c8		iny				iny
.a3be	80 f3		bra $a3b3			bra 	_TOBlockLoop
.a3c0					_TOBlockExit:
.a3c0	a9 00		lda #$00			lda 	#0
.a3c2	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a3c5	60		rts				rts
.a3c6					TokeniseHexConstant:
.a3c6	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a3c8	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a3cb	e8		inx				inx									; start of quoted string.
.a3cc	da		phx				phx 								; push start of constant on top
.a3cd	ca		dex				dex
.a3ce					_THFindLoop:
.a3ce	e8		inx				inx
.a3cf	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a3d2	c9 30		cmp #$30			cmp 	#"0"
.a3d4	90 0c		bcc $a3e2			bcc 	_THFoundEnd
.a3d6	c9 3a		cmp #$3a			cmp 	#"9"+1
.a3d8	90 f4		bcc $a3ce			bcc 	_THFindLoop
.a3da	c9 41		cmp #$41			cmp 	#"A"
.a3dc	90 04		bcc $a3e2			bcc 	_THFoundEnd
.a3de	c9 47		cmp #$47			cmp 	#"F"+1
.a3e0	90 ec		bcc $a3ce			bcc 	_THFindLoop
.a3e2					_THFoundEnd:
.a3e2	7a		ply				ply 								; restore start
.a3e3	20 a7 a3	jsr $a3a7			jsr 	TOWriteBlockXY 				; output the block
.a3e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a3e7					TokeniseCalculateHash:
.a3e7	da		phx				phx
.a3e8	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a3eb	a9 00		lda #$00			lda 	#0
.a3ed					_TCHLoop:
.a3ed	18		clc				clc
.a3ee	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a3f1	e8		inx				inx
.a3f2	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a3f5	d0 f6		bne $a3ed			bne 	_TCHLoop
.a3f7	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a3fa	fa		plx				plx
.a3fb	60		rts				rts
.a3fc					FixLineBufferCase:
.a3fc	a2 00		ldx #$00			ldx 	#0
.a3fe					_FLBCLoop:
.a3fe	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a401	f0 22		beq $a425			beq 	_FLBCExit 					; end of string.
.a403	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a405	f0 11		beq $a418			beq 	_FLBCInQuotes
.a407	e8		inx				inx
.a408	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a40a	90 f2		bcc $a3fe			bcc 	_FLBCLoop
.a40c	c9 7b		cmp #$7b			cmp 	#'z'+1
.a40e	b0 ee		bcs $a3fe			bcs 	_FLBCLoop
.a410	38		sec				sec 								; make U/C
.a411	e9 20		sbc #$20			sbc 	#32
.a413	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a416	80 e6		bra $a3fe			bra 	_FLBCLoop
.a418					_FLBCInQuotes:
.a418	e8		inx				inx 								; advance
.a419	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a41c	f0 07		beq $a425			beq 	_FLBCExit 					; exit on EOS
.a41e	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a420	d0 f6		bne $a418			bne 	_FLBCInQuotes
.a422	e8		inx				inx 								; skip over it
.a423	80 d9		bra $a3fe			bra 	_FLBCLoop
.a425					_FLBCExit:
.a425	60		rts				rts
.a426					TokeniseExtractLineNumber:
.a426	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a429	48		pha				pha
.a42a	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a42d	48		pha				pha
.a42e	20 64 a4	jsr $a464			jsr 	_TELNTimes2 				; line # x 4
.a431	20 64 a4	jsr $a464			jsr 	_TELNTimes2 				; line # x 2
.a434	18		clc				clc 								; add stacked value
.a435	68		pla				pla
.a436	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a439	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a43c	68		pla				pla
.a43d	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a440	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a443	20 64 a4	jsr $a464			jsr 	_TELNTimes2 				; line # x 10
.a446	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a449	e8		inx				inx
.a44a	29 0f		and #$0f			and 	#15 						; add to line #
.a44c	18		clc				clc
.a44d	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a450	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a453	90 03		bcc $a458			bcc 	_TLENNoCarry
.a455	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a458					_TLENNoCarry:
.a458	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a45b	c9 30		cmp #$30			cmp 	#'0'
.a45d	90 04		bcc $a463			bcc 	_TLENExit
.a45f	c9 3a		cmp #$3a			cmp 	#'9'+1
.a461	90 c3		bcc $a426			bcc 	TokeniseExtractLineNumber
.a463					_TLENExit:
.a463	60		rts				rts
.a464					_TELNTimes2:
.a464	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a467	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a46a	60		rts				rts
.a46b					TokeniseWriteByte:
.a46b	da		phx				phx
.a46c	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a46f	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a472	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a475	fa		plx				plx
.a476	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a477					CheckCreateVariableRecord:
.a477	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a479	85 36		sta $36				sta 	0+zTemp0
.a47b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a47d	85 37		sta $37				sta 	1+zTemp0
.a47f					_CCVSearch:
.a47f	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a481	f0 2c		beq $a4af			beq 	_CCVFail
.a483	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a485	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a487	cd 83 04	cmp $0483			cmp 	identHash
.a48a	d0 16		bne $a4a2			bne 	_CCVNext
.a48c	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a48e	ae 80 04	ldx $0480			ldx 	identStart
.a491					_CCVCompare:
.a491	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a494	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a496	e8		inx				inx 								; advance pointers
.a497	c8		iny				iny
.a498	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a499	d0 07		bne $a4a2			bne 	_CCVNext  					; didn't match go to next.
.a49b	90 f4		bcc $a491			bcc 	_CCVCompare 				; not finished yet.
.a49d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a4a0	f0 41		beq $a4e3			beq 	_CCVFound 					; yes, we were successful
.a4a2					_CCVNext:
.a4a2	18		clc				clc
.a4a3	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a4a5	65 36		adc $36				adc 	zTemp0
.a4a7	85 36		sta $36				sta 	zTemp0
.a4a9	90 d4		bcc $a47f			bcc 	_CCVSearch
.a4ab	e6 37		inc $37				inc 	zTemp0+1
.a4ad	80 d0		bra $a47f			bra 	_CCVSearch
.a4af					_CCVFail:
.a4af	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a4b1	ad 83 04	lda $0483			lda 	identHash
.a4b4	91 36		sta ($36),y			sta 	(zTemp0),y
.a4b6	c8		iny				iny 								; offset 2 is the type byte
.a4b7	ad 84 04	lda $0484			lda 	identTypeByte
.a4ba	91 36		sta ($36),y			sta 	(zTemp0),y
.a4bc	c8		iny				iny
.a4bd					_CCVData:
.a4bd	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a4bf	91 36		sta ($36),y			sta 	(zTemp0),y
.a4c1	c8		iny				iny
.a4c2	c0 08		cpy #$08			cpy 	#8
.a4c4	90 f7		bcc $a4bd			bcc 	_CCVData
.a4c6	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a4c9					_CCVCopyName:
.a4c9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4cc	91 36		sta ($36),y			sta 	(zTemp0),y
.a4ce	e8		inx				inx
.a4cf	c8		iny				iny
.a4d0	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a4d3	d0 f4		bne $a4c9			bne 	_CCVCopyName
.a4d5	98		tya				tya 								; patch offset
.a4d6	92 36		sta ($36)			sta 	(zTemp0)
.a4d8	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a4da	91 36		sta ($36),y			sta 	(zTemp0),y
.a4dc	88		dey				dey
.a4dd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a4df	09 80		ora #$80			ora 	#$80
.a4e1	91 36		sta ($36),y			sta 	(zTemp0),y
.a4e3					_CCVFound:
.a4e3	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a4e5	38		sec				sec
.a4e6	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a4e8	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a4ea	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a4ed	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a4ef	20 6b a4	jsr $a46b			jsr 	TokeniseWriteByte
.a4f2	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
