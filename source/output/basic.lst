
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Jan 18 19:52:09 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_LEFTDOLLARLPAREN                 = $98; $98 LEFT$(
=$99						KWD_LENLPAREN                        = $99; $99 LEN(
=$9a						KWD_MAXLPAREN                        = $9a; $9a MAX(
=$9b						KWD_MIDDOLLARLPAREN                  = $9b; $9b MID$(
=$9c						KWD_MINLPAREN                        = $9c; $9c MIN(
=$9d						KWD_NOTLPAREN                        = $9d; $9d NOT(
=$9e						KWD_PEEKLPAREN                       = $9e; $9e PEEK(
=$9f						KWD_PEEKDLPAREN                      = $9f; $9f PEEKD(
=$a0						KWD_PEEKLLPAREN                      = $a0; $a0 PEEKL(
=$a1						KWD_PEEKWLPAREN                      = $a1; $a1 PEEKW(
=$a2						KWD_PLAYINGLPAREN                    = $a2; $a2 PLAYING(
=$a3						KWD_RANDOMLPAREN                     = $a3; $a3 RANDOM(
=$a4						KWD_RIGHTDOLLARLPAREN                = $a4; $a4 RIGHT$(
=$a5						KWD_RNDLPAREN                        = $a5; $a5 RND(
=$a6						KWD_SGNLPAREN                        = $a6; $a6 SGN(
=$a7						KWD_SPCLPAREN                        = $a7; $a7 SPC(
=$a8						KWD_STRDOLLARLPAREN                  = $a8; $a8 STR$(
=$a9						KWD_TIMERLPAREN                      = $a9; $a9 TIMER(
=$aa						KWD_TRUE                             = $aa; $aa TRUE
=$ab						KWD_VALLPAREN                        = $ab; $ab VAL(
=$ac						KWD_FOR                              = $ac; $ac FOR
=$ad						KWD_IF                               = $ad; $ad IF
=$ae						KWD_PROC                             = $ae; $ae PROC
=$af						KWD_REPEAT                           = $af; $af REPEAT
=$b0						KWD_WHILE                            = $b0; $b0 WHILE
=$b1						KWD_ENDIF                            = $b1; $b1 ENDIF
=$b2						KWD_ENDPROC                          = $b2; $b2 ENDPROC
=$b3						KWD_NEXT                             = $b3; $b3 NEXT
=$b4						KWD_THEN                             = $b4; $b4 THEN
=$b5						KWD_UNTIL                            = $b5; $b5 UNTIL
=$b6						KWD_WEND                             = $b6; $b6 WEND
=$b7						KWD_AT                               = $b7; $b7 AT
=$b8						KWD_BY                               = $b8; $b8 BY
=$b9						KWD_CALL                             = $b9; $b9 CALL
=$ba						KWD_CIRCLE                           = $ba; $ba CIRCLE
=$bb						KWD_CLEAR                            = $bb; $bb CLEAR
=$bc						KWD_COLOR                            = $bc; $bc COLOR
=$bd						KWD_COLOUR                           = $bd; $bd COLOUR
=$be						KWD_DATA                             = $be; $be DATA
=$bf						KWD_DIM                              = $bf; $bf DIM
=$c0						KWD_DOWNTO                           = $c0; $c0 DOWNTO
=$c1						KWD_ELSE                             = $c1; $c1 ELSE
=$c2						KWD_FROM                             = $c2; $c2 FROM
=$c3						KWD_GFX                              = $c3; $c3 GFX
=$c4						KWD_HERE                             = $c4; $c4 HERE
=$c5						KWD_IMAGE                            = $c5; $c5 IMAGE
=$c6						KWD_LET                              = $c6; $c6 LET
=$c7						KWD_LINE                             = $c7; $c7 LINE
=$c8						KWD_LOCAL                            = $c8; $c8 LOCAL
=$c9						KWD_MEMCOPY                          = $c9; $c9 MEMCOPY
=$ca						KWD_OFF                              = $ca; $ca OFF
=$cb						KWD_ON                               = $cb; $cb ON
=$cc						KWD_OUTLINE                          = $cc; $cc OUTLINE
=$cd						KWD_PALETTE                          = $cd; $cd PALETTE
=$ce						KWD_PLOT                             = $ce; $ce PLOT
=$cf						KWD_POKE                             = $cf; $cf POKE
=$d0						KWD_POKED                            = $d0; $d0 POKED
=$d1						KWD_POKEL                            = $d1; $d1 POKEL
=$d2						KWD_POKEW                            = $d2; $d2 POKEW
=$d3						KWD_READ                             = $d3; $d3 READ
=$d4						KWD_RECT                             = $d4; $d4 RECT
=$d5						KWD_REM                              = $d5; $d5 REM
=$d6						KWD_SOLID                            = $d6; $d6 SOLID
=$d7						KWD_SOUND                            = $d7; $d7 SOUND
=$d8						KWD_SPRITE                           = $d8; $d8 SPRITE
=$d9						KWD_TEXT                             = $d9; $d9 TEXT
=$da						KWD_TO                               = $da; $da TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ac						KWC_FIRST_STRUCTURE = $ac
=$b1						KWC_FIRST_STRUCTURE_DEC = $b1
=$b6						KWC_LAST_STRUCTURE = $b6
=$83						KWC_FIRST_UNARY = $83
=$ab						KWC_LAST_UNARY = $ab

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56				        .text	$f2,$56         			; Signature
>8002		03				        .byte   3               			; 3 blocks
>8003		04				        .byte   4               			; mount at $8000
>8004		40 80				        .word   Boot 	      				; Start here
>8006		00 00				        .word   0 			               	; version
>8008		00 00				        .word   0               			; kernel
>800a		53 75 70 65 72 42 41 53		        .text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c a7 80	jmp $80a7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						EXTInputSingleCharacter:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						GXGraphicDraw:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDCommand:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 ea bb	jsr $bbea		jsr	Export_SNDCommand
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						SNDUpdate:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 1d bc	jsr $bc1d		jsr	Export_SNDUpdate
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKListConvertLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 9b b5	jsr $b59b		jsr	Export_TKListConvertLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts
.809d						TKTokeniseLine:
.809d		e6 0d		inc $0d			inc 8+5
.809f		20 2f b8	jsr $b82f		jsr	Export_TKTokeniseLine
.80a2		08		php			php
.80a3		c6 0d		dec $0d			dec 8+5
.80a5		28		plp			plp
.80a6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80a7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80a9		9a		txs				txs
.80aa		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80ac		09 80		ora #$80			ora 	#$80
.80ae		85 00		sta $00				sta 	0
.80b0		20 b0 ae	jsr $aeb0			jsr		UpdateFont 					; update font if between FPGA updates.
.80b3		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80b6		c9 42		cmp #$42			cmp 	#"B"
.80b8		d0 18		bne $80d2			bne 	_NoMachineCode
.80ba		ad 03 20	lda $2003			lda 	$2003
.80bd		c9 54		cmp #$54			cmp 	#"T"
.80bf		d0 11		bne $80d2			bne 	_NoMachineCode
.80c1		ad 04 20	lda $2004			lda 	$2004
.80c4		c9 36		cmp #$36			cmp 	#"6"
.80c6		d0 0a		bne $80d2			bne 	_NoMachineCode
.80c8		ad 05 20	lda $2005			lda 	$2005
.80cb		c9 35		cmp #$35			cmp 	#"5"
.80cd		d0 03		bne $80d2			bne 	_NoMachineCode
.80cf		4c 00 20	jmp $2000			jmp 	$2000
.80d2						_NoMachineCode:
.80d2		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80d5		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80d7		20 90 81	jsr $8190			jsr 	KNLSetDrive
.80da		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80dc		aa		tax				tax
.80dd		a8		tay				tay
.80de		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.80e1		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80e3		20 7f 80	jsr $807f			jsr 	SNDCommand
.80e6		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80e8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80eb		a9 09		lda #$09			lda 	#9
.80ed		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80f0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80f3		64 01		stz $01				stz 	1
.80f5		ad ad d6	lda $d6ad			lda 	$D6AD
.80f8		20 76 83	jsr $8376			jsr 	PrintHex
.80fb		ad ac d6	lda $d6ac			lda 	$D6AC
.80fe		20 76 83	jsr $8376			jsr 	PrintHex
.8101		ad ab d6	lda $d6ab			lda 	$D6AB
.8104		20 76 83	jsr $8376			jsr 	PrintHex
.8107		ad aa d6	lda $d6aa			lda 	$D6AA
.810a		20 76 83	jsr $8376			jsr 	PrintHex
.810d		a9 20		lda #$20			lda 	#32
.810f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8112		ad a8 d6	lda $d6a8			lda 	$D6A8
.8115		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8118		ad a9 d6	lda $d6a9			lda 	$D6A9
.811b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.811e		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8120		a9 2e		lda #$2e			lda 	#Prompt & $FF
.8122		20 de 96	jsr $96de			jsr 	PrintStringXA
.8125		20 ef 8f	jsr $8fef			jsr 	NewProgram 					; erase current program
.8128		4c b9 85	jmp $85b9			jmp 	WarmStart					; make same size.
.812b		4c b9 85	jmp $85b9			jmp 	WarmStart
>812e		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8130		09 09 31 38 2f 30 31 2f			.text 9,9,"18/01/23 31"
>8138		32 33 20 33 31

;******  Return to file: ./common/aa.system/00start.asm

>813d		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.8141						ProcessEvents:
.8141		20 cf 81	jsr $81cf			jsr 	KNLSetEventPointer
.8144		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.8147		b0 27		bcs $8170			bcs 	_PEExitZ 					; nothing left to process.
.8149		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; go back if event not key.pressed.
.814c		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.814e		d0 f1		bne $8141			bne 	ProcessEvents
.8150		ad 65 07	lda $0765			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8153		d0 ec		bne $8141			bne 	ProcessEvents
.8155		ad 64 07	lda $0764			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8158		c9 03		cmp #$03			cmp 	#3
.815a		f0 11		beq $816d			beq 	_PEReturnBreak  			; no, keep going.
.815c		da		phx				phx
.815d		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8160		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8162		f0 06		beq $816a			beq 	_PENoQueue
.8164		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8167		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.816a						_PENoQueue:
.816a		fa		plx				plx
.816b		80 d4		bra $8141			bra 	ProcessEvents
.816d						_PEReturnBreak:
.816d		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.816f		60		rts				rts
.8170						_PEExitZ:
.8170		a9 00		lda #$00			lda 	#0
.8172		60		rts				rts
.8173						PopKeyboardQueue:
.8173		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8176		f0 17		beq $818f			beq 	_PKQExit 					; zero, then exit.
.8178		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.817b		48		pha				pha
.817c		da		phx				phx 								; drop head of queue
.817d		a2 00		ldx #$00			ldx 	#0
.817f						_PKQLoop:
.817f		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8182		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8185		e8		inx				inx
.8186		e0 07		cpx #$07			cpx 	#7
.8188		d0 f5		bne $817f			bne 	_PKQLoop
.818a		fa		plx				plx
.818b		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.818e		68		pla				pla 								; restore head of queue.
.818f						_PKQExit:
.818f		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8190						KNLSetDrive:
.8190		8d 5e 07	sta $075e			sta 	KNLDefaultDrive
.8193		60		rts				rts
.8194						KNLOpenFileWrite:
.8194		48		pha				pha
.8195		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8197		80 03		bra $819c			bra 	KNLOpenStart
.8199						KNLOpenFileRead:
.8199		48		pha				pha
.819a		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.819c						KNLOpenStart:
.819c		85 f5		sta $f5				sta     kernel.args.file.open.mode
.819e		68		pla				pla
.819f		20 da 81	jsr $81da			jsr 	KNLSetupFileName
.81a2		20 cf 81	jsr $81cf			jsr 	KNLSetEventPointer
.81a5		ad 5e 07	lda $075e			lda 	KNLDefaultDrive 			; currently drive zero only.
.81a8		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.81aa		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.81ad		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.81af		b0 1d		bcs $81ce			bcs     _out
.81b1						_loop
.81b1		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81b4		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81b7		b0 f8		bcs $81b1			bcs     _loop
.81b9		ad 5f 07	lda $075f			lda 	KNLEvent.type
.81bc		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.81be		f0 0a		beq $81ca			beq 	_success
.81c0		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.81c2		f0 0a		beq $81ce			beq 	_out
.81c4		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81c6		f0 06		beq $81ce			beq 	_out
.81c8		80 e7		bra $81b1			bra     _loop
.81ca						_success
.81ca		ad 62 07	lda $0762			lda     KNLEvent.file.stream
.81cd		18		clc				clc
.81ce						_out
.81ce		60		rts				rts
.81cf						KNLSetEventPointer:
.81cf		48		pha				pha
.81d0		a9 5f		lda #$5f			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.81d2		85 f0		sta $f0				sta     kernel.args.events+0
.81d4		a9 07		lda #$07			lda     #KNLEvent >> 8
.81d6		85 f1		sta $f1				sta     kernel.args.events+1
.81d8		68		pla				pla
.81d9		60		rts				rts
.81da						KNLSetupFileName:
.81da		5a		phy				phy 								; save Y on stack
.81db		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.81dd		86 37		stx $37				stx 	zTemp0+1
.81df		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.81e1		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.81e3		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.81e5						_KNLGetLength:
.81e5		c8		iny				iny
.81e6		b1 36		lda ($36),y			lda 	(zTemp0),y
.81e8		d0 fb		bne $81e5			bne 	_KNLGetLength
.81ea		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.81ec		7a		ply				ply
.81ed		60		rts				rts
.81ee						KNLReadBlock:
.81ee		85 f3		sta $f3				sta     kernel.args.file.read.stream
.81f0		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81f2		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81f5		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.81f7		b0 2e		bcs $8227			bcs     _KGNBExitFail               ; report as general error
.81f9						_KGRBEventLoop:
.81f9		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81fc		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81ff		b0 f8		bcs $81f9			bcs     _KGRBEventLoop
.8201		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; get event
.8204		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8206		f0 0a		beq $8212			beq     _KNLRBGetNextByte
.8208		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.820a		f0 1b		beq $8227			beq 	_KGNBExitFail
.820c		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.820e		f0 17		beq $8227			beq 	_KGNBExitFail
.8210		80 e7		bra $81f9			bra 	_KGRBEventLoop
.8212						_KNLRBGetNextByte:
.8212		a9 5e		lda #$5e			lda     #<KNLReadBuffer 			; Set the target buffer
.8214		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8216		a9 06		lda #$06			lda     #>KNLReadBuffer
.8218		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.821a		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Set the target length
.821d		85 fd		sta $fd				sta     kernel.args.recv.buflen
.821f		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8222		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8225		18		clc				clc
.8226		60		rts				rts
.8227						_KGNBExitFail:
.8227		38		sec				sec
.8228		60		rts				rts
.8229						KNLWriteBlock:
.8229		da		phx				phx
.822a		5a		phy				phy
.822b		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.822d		a5 36		lda $36				lda     zTemp0 						; save the data location.
.822f		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8231		a5 37		lda $37				lda     zTemp0+1
.8233		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8235		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8237		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.823a		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.823c		b0 21		bcs $825f			bcs 	_KWBFailed
.823e						_KNLWLoop:
.823e		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8241		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8244		b0 f8		bcs $823e			bcs     _KNLWLoop
.8246		ad 5f 07	lda $075f			lda     KNLEvent.type 				; various errors.
.8249		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.824b		f0 12		beq $825f			beq 	_KWBFailed
.824d		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.824f		f0 0e		beq $825f			beq 	_KWBFailed
.8251		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8253		f0 0a		beq $825f			beq 	_KWBFailed
.8255		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8257		d0 e5		bne $823e			bne 	_KNLWLoop
.8259		18		clc				clc
.825a		ad 65 07	lda $0765			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.825d		80 01		bra $8260			bra 	_KWBExit
.825f						_KWBFailed:
.825f		38		sec				sec
.8260						_KWBExit:
.8260		7a		ply				ply
.8261		fa		plx				plx
.8262		60		rts				rts
.8263						KNLCloseFile:
.8263		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8265		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8268		60		rts				rts
.8269						KNLCheckKeyPressed:
.8269		20 cf 81	jsr $81cf			jsr 	KNLSetEventPointer
.826c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.826f		b0 0b		bcs $827c			bcs 	_CKPNoEvent 				; no event
.8271		ad 5f 07	lda $075f			lda     KNLEvent.type
.8274		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.8276		d0 04		bne $827c			bne 	_CKPNoEvent
.8278		ad 64 07	lda $0764			lda     KNLEvent.key.ascii
.827b		60		rts				rts
.827c						_CKPNoEvent:
.827c		a9 00		lda #$00			lda 	#0
.827e		60		rts				rts
.827f						EXTReadController:
.827f		da		phx				phx
.8280		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8282		64 01		stz $01				stz 	1 							; switch to I/O 0
.8284		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8287		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8289		fa		plx				plx
.828a		60		rts				rts
.065e						KNLReadBuffer:
>065e								.fill   256
.075e						KNLDefaultDrive:
>075e								.byte 	?
.075f						KNLEvent
>075f						type        .byte   ?   ; Enum above
>0760						buf         .byte   ?   ; page id or zero
>0761						ext         .byte   ?   ; page id or zero
.0762						key
>0762						keyboard    .byte   ?   ; Keyboard ID
>0763						raw         .byte   ?   ; Raw key ID
>0764						ascii       .byte   ?   ; ASCII value
>0765						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0762						mouse
.0762						delta
>0762						x           .byte   ?
>0763						y           .byte   ?
>0764						z           .byte   ?
>0765						buttons     .byte   ?
.0762						clicks
>0762						inner       .byte   ?
>0763						middle      .byte   ?
>0764						outer       .byte   ?
.0762						joystick
>0762						joy0        .byte   ?
>0763						joy1        .byte   ?
.0762						udp
>0762						token       .byte   ?   ; TODO: break out into fields
.0762						file
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						data
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						read        .byte   ?   ; Number of bytes actually read
.0764						wrote
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						wrote       .byte   ?   ; Number of bytes actually read
.0762						directory
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						volume
>0764						len         .byte   ?   ; Length of volname (in buf)
>0765						flags       .byte   ?   ; block size, text encoding
.0764						file
>0764						len         .byte   ?
>0765						flags       .byte   ?   ; block scale, text encoding, approx size
.0764						free
>0764						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.828b						AssembleGroup1:
.828b		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.828d		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8290		80 02		bra $8294			bra 	AsmGroup12
.8292						AssembleGroup2:
.8292		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8294						AsmGroup12:
.8294		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8297		68		pla				pla 								; pop the return address to access the information following.
.8298		fa		plx				plx
.8299		20 20 83	jsr $8320			jsr 	AccessParameters 			; get opcode and save as base
.829c		8d 20 04	sta $0420			sta 	BaseOpcode
.829f		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.82a2		d0 08		bne $82ac			bne 	_AG12HaveMask
.82a4		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.82a6		20 28 83	jsr $8328			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.82a9		8d 21 04	sta $0421			sta 	ModeMask
.82ac						_AG12HaveMask:
.82ac		20 5c 84	jsr $845c			jsr 	TypeAndCalculateOperand 	; get zero page type
.82af		da		phx				phx 								; save found address mode
.82b0		20 8c 83	jsr $838c			jsr 	AssembleModeX
.82b3		fa		plx				plx  								; restore address mode
.82b4		b0 0b		bcs $82c1			bcs 	_AG12Exit
.82b6		20 c2 82	jsr $82c2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82b9		20 8c 83	jsr $838c			jsr 	AssembleModeX
.82bc		b0 03		bcs $82c1			bcs 	_AG12Exit
.82be		4c 70 a8	jmp $a870			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82c1						_AG12Exit:
.82c1		60		rts				rts
.82c2						PromoteToAbsolute:
.82c2		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82c4		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82c6		f0 19		beq $82e1			beq 	_PTADo
.82c8		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82ca		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82cc		f0 13		beq $82e1			beq 	_PTADo
.82ce		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82d0		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82d2		f0 0d		beq $82e1			beq 	_PTADo
.82d4		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82d6		e0 d1		cpx #$d1			cpx 	#AM_IND
.82d8		f0 07		beq $82e1			beq 	_PTADo
.82da		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82dc		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82de		f0 01		beq $82e1			beq 	_PTADo
.82e0		60		rts				rts
.82e1						_PTADo:
.82e1		aa		tax				tax
.82e2		60		rts				rts
.82e3						AssembleGroup3:
.82e3		68		pla				pla 								; get parameters, which is just the opcode.
.82e4		fa		plx				plx
.82e5		20 20 83	jsr $8320			jsr 	AccessParameters 			; get and output opcode
.82e8		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.82eb		20 c0 84	jsr $84c0			jsr 	CalculateOperand 			; get a 16 bit operand
.82ee		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82f0		38		sec				sec
.82f1		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.82f4		48		pha				pha 								; LSB in A
.82f5		a5 60		lda $60				lda 	NSMantissa1
.82f7		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.82fa		aa		tax				tax 								; MSB in X
.82fb		68		pla				pla
.82fc		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82fd		69 7f		adc #$7f			adc 	#$7F
.82ff		90 01		bcc $8302			bcc 	_AG3NoCarry
.8301		e8		inx				inx
.8302						_AG3NoCarry:
.8302		38		sec				sec 								; fix back and write out anyways.
.8303		e9 80		sbc #$80			sbc 	#$80
.8305		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.8308		e0 00		cpx #$00			cpx 	#0 							; was it in range
.830a		f0 0a		beq $8316			beq 	_AG3Exit
.830c		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.830f		29 01		and #$01			and 	#1
.8311		f0 03		beq $8316			beq 	_AG3Exit
.8313		4c 75 a8	jmp $a875			jmp 	RangeError 					; no, branch is out of range
.8316						_AG3Exit:
.8316		60		rts				rts
.8317						AssembleGroup4:
.8317		68		pla				pla 								; pop address
.8318		fa		plx				plx
.8319		20 20 83	jsr $8320			jsr 	AccessParameters 			; access and get first
.831c		20 38 83	jsr $8338			jsr 	AssemblerWriteByte 			; output it.
.831f		60		rts				rts
.8320						AccessParameters:
.8320		8d 1d 04	sta $041d			sta 	ParamStart
.8323		8e 1e 04	stx $041e			stx 	ParamStart+1
.8326		a9 01		lda #$01			lda 	#1
.8328						GetParameter:
.8328		5a		phy				phy
.8329		a8		tay				tay
.832a		ad 1d 04	lda $041d			lda 	ParamStart
.832d		85 36		sta $36				sta 	zTemp0
.832f		ad 1e 04	lda $041e			lda 	ParamStart+1
.8332		85 37		sta $37				sta 	zTemp0+1
.8334		b1 36		lda ($36),y			lda 	(zTemp0),y
.8336		7a		ply				ply
.8337		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8338						AssemblerWriteByte:
.8338		48		pha			pha
.8339		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.833c		29 02		and #$02		and 	#2
.833e		f0 1b		beq $835b		beq 	_AWBNoPrint
.8340		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8343		20 76 83	jsr $8376		jsr 	PrintHex
.8346		ad 1a 04	lda $041a		lda		AssemblerAddress
.8349		20 76 83	jsr $8376		jsr 	PrintHex
.834c		a9 20		lda #$20		lda 	#' '
.834e		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8351		68		pla			pla 									; print byte
.8352		48		pha			pha
.8353		20 76 83	jsr $8376		jsr 	PrintHex
.8356		a9 0d		lda #$0d		lda 	#13
.8358		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.835b						_AWBNoPrint:
.835b		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.835e		85 36		sta $36			sta 	zTemp0
.8360		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8363		f0 0e		beq $8373		beq 	_AWBRange
.8365		85 37		sta $37			sta 	zTemp0+1
.8367		68		pla			pla 									; write byte out
.8368		92 36		sta ($36)		sta 	(zTemp0)
.836a		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.836d		d0 03		bne $8372		bne 	_AWBNoCarry
.836f		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8372						_AWBNoCarry:
.8372		60		rts			rts
.8373						_AWBRange:
.8373		4c 75 a8	jmp $a875		jmp 	RangeError
.8376						PrintHex:
.8376		48		pha				pha
.8377		4a		lsr a				lsr 	a
.8378		4a		lsr a				lsr 	a
.8379		4a		lsr a				lsr 	a
.837a		4a		lsr a				lsr 	a
.837b		20 7f 83	jsr $837f			jsr 	_PrintNibble
.837e		68		pla				pla
.837f						_PrintNibble:
.837f		29 0f		and #$0f			and 	#15
.8381		c9 0a		cmp #$0a			cmp 	#10
.8383		90 02		bcc $8387			bcc 	_NoShift
.8385		69 06		adc #$06			adc 	#6
.8387						_NoShift:
.8387		69 30		adc #$30			adc 	#48
.8389		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.838c						AssembleModeX:
.838c		5a		phy				phy
.838d		ad 1f 04	lda $041f			lda 	IsGroup1
.8390		f0 17		beq $83a9			beq 	_AMXGroup2
.8392		8a		txa				txa 							; is it in group # 1
.8393		29 40		and #$40			and 	#AM_ISG1
.8395		f0 4d		beq $83e4			beq 	_AMXFail 				; no, give up.
.8397		8a		txa				txa 							; get back.
.8398		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.839a		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.839c		d0 22		bne $83c0			bne 	_AMXHaveInfo
.839e		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.83a1		c9 81		cmp #$81			cmp 	#$81
.83a3		f0 3f		beq $83e4			beq 	_AMXFail
.83a5		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.83a7		80 17		bra $83c0			bra 	_AMXHaveInfo 			; odd design decision there.
.83a9						_AMXGroup2:
.83a9		8a		txa				txa 							; is it in group 2 ?
.83aa		29 20		and #$20			and 	#AM_ISG2
.83ac		f0 36		beq $83e4			beq 	_AMXFail 				; no, give up.
.83ae		8a		txa				txa 							; get the offset into Y
.83af		29 1f		and #$1f			and 	#$1F
.83b1		4a		lsr a				lsr 	a 						; make it 0-7.
.83b2		4a		lsr a				lsr  	a
.83b3		a8		tay				tay
.83b4		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83b7						_AMXCheckOkay:
.83b7		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83b8		88		dey				dey
.83b9		10 fc		bpl $83b7			bpl 	_AMXCheckOkay
.83bb		90 27		bcc $83e4			bcc 	_AMXFail 				; not allowed.
.83bd		8a		txa				txa  							; get mask back
.83be		29 1f		and #$1f			and 	#$1F
.83c0						_AMXHaveInfo:
.83c0		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83c2		10 04		bpl $83c8			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83c4		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83c6		d0 1c		bne $83e4			bne 	_AMXFail
.83c8						_AMXAnySize:
.83c8		18		clc				clc 							; add offset to the base opcode
.83c9		6d 20 04	adc $0420			adc 	BaseOpcode
.83cc						_AMXOutputCode:
.83cc		20 38 83	jsr $8338			jsr 	AssemblerWriteByte 		; write the opcode out.
.83cf		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83d1		f0 0e		beq $83e1			beq 	_AMXExit
.83d3		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83d5		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.83d8		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83da		30 05		bmi $83e1			bmi 	_AMXExit
.83dc		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83de		20 38 83	jsr $8338			jsr 	AssemblerWriteByte
.83e1						_AMXExit:
.83e1		7a		ply				ply
.83e2		38		sec				sec
.83e3		60		rts				rts
.83e4						_AMXFail:
.83e4		a0 00		ldy #$00			ldy 	#0
.83e6						_AMXCheckOddities:
.83e6		8a		txa				txa
.83e7		d9 0e 84	cmp $840e,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83ea		d0 15		bne $8401			bne 	_AMXCONext
.83ec		b9 0c 84	lda $840c,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83ef		cd 20 04	cmp $0420			cmp 	BaseOpcode
.83f2		d0 0d		bne $8401			bne 	_AMXCONext
.83f4		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83f6		10 04		bpl $83fc			bpl 	_AMXCONotZero
.83f8		a5 60		lda $60				lda 	NSMantissa1
.83fa		d0 05		bne $8401			bne 	_AMXCONext
.83fc						_AMXCONotZero:
.83fc		b9 0d 84	lda $840d,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83ff		80 cb		bra $83cc			bra 	_AMXOutputCode 			; and assemble it
.8401						_AMXCONext:
.8401		c8		iny				iny
.8402		c8		iny				iny
.8403		c8		iny				iny
.8404		b9 0c 84	lda $840c,y			lda 	ExtraOpcode+0,y 		; end of table
.8407		d0 dd		bne $83e6			bne 	_AMXCheckOddities
.8409						_AMXCOFail:
.8409		7a		ply				ply
.840a		18		clc				clc
.840b		60		rts				rts
.840c						ExtraOpcode:
>840c		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>840f		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8412		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8415		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8418		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>841b		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>841e		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8421		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8424		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8427		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>842a		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.842b						LabelHere:
.842b		c8		iny				iny 								; skip .
.842c		a2 00		ldx #$00			ldx 	#0 							; get a term
.842e		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm
.8431		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8433		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8435		d0 22		bne $8459			bne 	_ALType 					; otherwise typing error
.8437		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8439		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.843b		b5 60		lda $60,x			lda 	NSMantissa1,x
.843d		85 37		sta $37				sta 	zTemp0+1
.843f		5a		phy				phy 								; copy address in (64k)
.8440		a0 01		ldy #$01			ldy 	#1
.8442		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8445		92 36		sta ($36)			sta 	(zTemp0)
.8447		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.844a		91 36		sta ($36),y			sta 	(zTemp0),y
.844c		c8		iny				iny
.844d		a9 00		lda #$00			lda 	#0 							; zero the rest.
.844f		91 36		sta ($36),y			sta 	(zTemp0),y
.8451		c8		iny				iny
.8452		91 36		sta ($36),y			sta 	(zTemp0),y
.8454		c8		iny				iny
.8455		91 36		sta ($36),y			sta 	(zTemp0),y
.8457		7a		ply				ply
.8458		60		rts				rts
.8459						_ALType:
.8459		4c 7a a8	jmp $a87a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.845c						TypeAndCalculateOperand:
.845c		b1 30		lda ($30),y			lda 	(codePtr),y
.845e		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8460		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8462		f0 5b		beq $84bf			beq 	_TACOExit
.8464		c9 80		cmp #$80			cmp 	#KWC_EOL
.8466		f0 57		beq $84bf			beq 	_TACOExit
.8468		c8		iny				iny
.8469		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.846b		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.846d		f0 51		beq $84c0			beq 	CalculateOperand
.846f		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8471		f0 1f		beq $8492			beq 	_TACOIndirect
.8473		88		dey				dey 								; undo get of first character
.8474		20 c0 84	jsr $84c0			jsr 	CalculateOperand 			; get operand
.8477		b1 30		lda ($30),y			lda 	(codePtr),y
.8479		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.847b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.847d		d0 40		bne $84bf			bne 	_TACOExit
.847f		c8		iny				iny
.8480		20 ca 84	jsr $84ca			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8483		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8485		c9 58		cmp #$58			cmp 	#'X'
.8487		f0 36		beq $84bf			beq 	_TACOExit
.8489		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.848b		c9 59		cmp #$59			cmp 	#'Y'
.848d		f0 30		beq $84bf			beq 	_TACOExit
.848f						_TACOSyntax:
.848f		4c 70 a8	jmp $a870			jmp 	SyntaxError
.8492						_TACOIndirect:
.8492		20 c0 84	jsr $84c0			jsr 	CalculateOperand 			; get the operand
.8495		b1 30		lda ($30),y			lda 	(codePtr),y
.8497		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8499		f0 17		beq $84b2			beq 	_TACOIndX
.849b		20 6c 96	jsr $966c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.849e		b1 30		lda ($30),y			lda 	(codePtr),y
.84a0		a2 d1		ldx #$d1			ldx 	#AM_IND
.84a2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.84a4		d0 19		bne $84bf			bne 	_TACOExit
.84a6		c8		iny				iny
.84a7		20 ca 84	jsr $84ca			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84aa		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84ac		d0 e1		bne $848f			bne 	_TACOSyntax
.84ae		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84b0		80 0d		bra $84bf			bra 	_TACOExit
.84b2						_TACOIndX:
.84b2		c8		iny				iny
.84b3		20 ca 84	jsr $84ca			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84b6		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84b8		d0 d5		bne $848f			bne 	_TACOSyntax
.84ba		20 6c 96	jsr $966c			jsr 	CheckRightBracket			; check )
.84bd		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84bf						_TACOExit:
.84bf		60		rts				rts
.84c0						CalculateOperand:
.84c0		48		pha				pha
.84c1		da		phx				phx
.84c2		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84c4		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.84c7		fa		plx				plx
.84c8		68		pla				pla
.84c9		60		rts				rts
.84ca						TACOCheckXY:
.84ca		b1 30		lda ($30),y			lda 	(codePtr),y
.84cc		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84ce		c9 40		cmp #$40			cmp 	#$40
.84d0		d0 21		bne $84f3			bne 	_TCXYFail
.84d2		b1 30		lda ($30),y			lda 	(codePtr),y
.84d4		18		clc				clc
.84d5		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84d7		85 37		sta $37				sta 	zTemp0+1
.84d9		c8		iny				iny
.84da		b1 30		lda ($30),y			lda 	(codePtr),y
.84dc		c8		iny				iny
.84dd		85 36		sta $36				sta 	zTemp0
.84df		5a		phy				phy 								; save position
.84e0		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84e2		b1 36		lda ($36),y			lda 	(zTemp0),y
.84e4		d0 0c		bne $84f2			bne 	_TCXYPopFail
.84e6		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84e8		b1 36		lda ($36),y			lda 	(zTemp0),y
.84ea		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84ec		f0 08		beq $84f6			beq 	_TCXYFound
.84ee		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84f0		f0 04		beq $84f6			beq 	_TCXYFound
.84f2						_TCXYPopFail:
.84f2		7a		ply				ply
.84f3						_TCXYFail:
.84f3		a9 00		lda #$00			lda 	#0
.84f5		60		rts				rts
.84f6						_TCXYFound:
.84f6		7a		ply				ply 								; restore position
.84f7		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84fa						BackloadProgram:
.84fa		20 ef 8f	jsr $8fef			jsr 	NewProgram 					; does the actual NEW.
.84fd		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84ff		a9 51		lda #$51			lda 	#_BLLoad & $FF
.8501		20 de 96	jsr $96de			jsr 	PrintStringXA
.8504		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8506		8d 66 07	sta $0766			sta 	BackLoadPage
.8509		a9 00		lda #$00			lda 	#(($6000) & $FF)
.850b		8d 67 07	sta $0767			sta 	0+BackLoadPointer
.850e		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8510		8d 68 07	sta $0768			sta 	1+BackLoadPointer
.8513		a9 ff		lda #$ff			lda 	#$FF
.8515		8d fa ff	sta $fffa			sta 	$FFFA
.8518						_BPLoop:
.8518		a2 ff		ldx #$ff			ldx 	#$FF
.851a		20 66 85	jsr $8566			jsr 	BLReadByte 					; read a byte
.851d		c9 00		cmp #$00			cmp 	#0
.851f		f0 29		beq $854a			beq 	_BPExit 					; if 0 exit
.8521		30 27		bmi $854a			bmi 	_BPExit 					; if -ve exit
.8523						_BPCopy:
.8523		e8		inx				inx  								; copy byte into the lineBuffer
.8524		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8527		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.852a		20 66 85	jsr $8566			jsr 	BLReadByte 					; read next byte
.852d		30 0a		bmi $8539			bmi 	_BPEndLine 					; -ve = EOL
.852f		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8531		d0 02		bne $8535			bne 	_BPNotTab
.8533		a9 20		lda #$20			lda 	#' '
.8535						_BPNotTab:
.8535		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8537		b0 ea		bcs $8523			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8539						_BPEndLine:
.8539		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.853c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.853f		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8542		f0 d4		beq $8518			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8544		38		sec				sec 								; append not insert
.8545		20 d9 ad	jsr $add9			jsr 	MemoryInsertLine 			; append to current program
.8548		80 ce		bra $8518			bra 	_BPLoop
.854a						_BPExit:
.854a		9c fa ff	stz $fffa			stz 	$FFFA
.854d		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear variables etc.
.8550		60		rts				rts
.8551						_BLLoad:
>8551		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8559		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8566						BLReadByte:
.8566		da		phx				phx
.8567		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8569		ad 66 07	lda $0766			lda 	BackLoadPage	 			; set current page
.856c		85 0b		sta $0b				sta 	8+3
.856e		ad 67 07	lda $0767			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8571		85 36		sta $36				sta 	zTemp0
.8573		ad 68 07	lda $0768			lda 	BackLoadPointer+1
.8576		85 37		sta $37				sta 	zTemp0+1
.8578		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.857a		ee 67 07	inc $0767			inc 	BackLoadPointer 			; bump pointer
.857d		d0 0f		bne $858e			bne 	_BLNoCarry
.857f		ee 68 07	inc $0768			inc 	BackLoadPointer+1
.8582		10 0a		bpl $858e			bpl 	_BLNoCarry 					; need a new page
.8584		48		pha				pha
.8585		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8587		8d 68 07	sta $0768			sta 	BackLoadPointer+1
.858a		ee 66 07	inc $0766			inc 	BackLoadPage 				; next page from source.
.858d		68		pla				pla
.858e						_BLNoCarry:
.858e		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8590		fa		plx				plx
.8591		c9 00		cmp #$00			cmp 	#0
.8593		60		rts				rts
.0766						BackLoadPage:
>0766								.fill  	1
.0767						BackLoadPointer:
>0767								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8594						EditProgramCode:
.8594		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.8597		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.859a		20 7d ae	jsr $ae7d			jsr 	MemorySearch
.859d		90 05		bcc $85a4			bcc 	_EPCNoDelete 				; reached the end : don't delete
.859f		d0 03		bne $85a4			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.85a1		20 a2 ad	jsr $ada2			jsr 	MemoryDeleteLine 			; delete the line
.85a4						_EPCNoDelete:
.85a4		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.85a7		c9 80		cmp #$80			cmp 	#KWC_EOL
.85a9		f0 0d		beq $85b8			beq 	_EPCNoInsert
.85ab		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85ae		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85b1		20 7d ae	jsr $ae7d			jsr 	MemorySearch
.85b4		18		clc				clc 								; insert at this point.
.85b5		20 d9 ad	jsr $add9			jsr 	MemoryInsertLine 			; insert the line
.85b8						_EPCNoInsert:
.85b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85b9						WarmStart:
.85b9		a2 ff		ldx #$ff			ldx 	#$FF
.85bb		9a		txs				txs
.85bc		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85be		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.85c1		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.85c4		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line
.85c7		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.85ca		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85cd		d0 17		bne $85e6			bne 	_WSEditCode 				; if so,edit code.
.85cf		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85d2		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.85d4		85 30		sta $30				sta 	codePtr
.85d6		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85d8		85 31		sta $31				sta 	codePtr+1
.85da		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.85dd		c9 80		cmp #$80			cmp 	#KWC_EOL
.85df		f0 d8		beq $85b9			beq 	WarmStart
.85e1		20 8c 91	jsr $918c			jsr 	RUNCodePointerLine 			; execute that line.
.85e4		80 d3		bra $85b9			bra 	WarmStart
.85e6						_WSEditCode:
.85e6		20 94 85	jsr $8594			jsr 	EditProgramCode 			; edit the program code
.85e9		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear all variables etc.
.85ec		80 cb		bra $85b9			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85ee						AssembleCommand:
.85ee		a2 00		ldx #$00			ldx 	#0
.85f0		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger 		; start address
.85f3		a5 58		lda $58				lda 	NSMantissa0
.85f5		8d 1a 04	sta $041a			sta 	AssemblerAddress
.85f8		a5 60		lda $60				lda 	NSMantissa1
.85fa		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.85fd		20 74 96	jsr $9674			jsr 	CheckComma
.8600		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; options 0-3
.8603		a5 58		lda $58				lda 	NSMantissa0
.8605		8d 1c 04	sta $041c			sta 	AssemblerControl
.8608		60		rts				rts
.8609		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.860a						AssertCommand:
.860a		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.860c		20 5f a6	jsr $a65f			jsr 	EvaluateInteger 			; the assert test
.860f		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; exit if result is non zero.
.8612		d0 05		bne $8619			bne 	_ACExit
.8614		a9 0a		lda #$0a		lda	#10
.8616		4c 85 96	jmp $9685		jmp	ErrorHandler
.8619						_ACExit:
.8619		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.861a						Command_BLoad:
.861a		a2 00		ldx #$00			ldx 	#0
.861c		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; file name to load
.861f		20 74 96	jsr $9674			jsr 	CheckComma 					; consume comma
.8622		e8		inx				inx
.8623		20 5f a6	jsr $a65f			jsr 	EvaluateInteger 			; load address (full physical address)
.8626		5a		phy				phy
.8627		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8629		a6 60		ldx $60				ldx 	NSMantissa1
.862b		20 99 81	jsr $8199			jsr 	KNLOpenFileRead 			; open file for reading
.862e		b0 4e		bcs $867e			bcs 	CBLErrorHandler 			; error, so fail.
.8630		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8633		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8635		20 81 86	jsr $8681			jsr 	BLOpenPhysicalMemory 		; open for access.
.8638						_BLReadFile:
.8638		ad 6d 07	lda $076d			lda 	BasicFileStream
.863b		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.863d		20 ee 81	jsr $81ee			jsr 	KNLReadBlock 				; read next block
.8640		b0 22		bcs $8664			bcs 	_BLFileError 				; file error, which might be EOF.
.8642		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8644		f0 f2		beq $8638			beq 	_BLReadFile
.8646		8d 6b 07	sta $076b			sta 	BLCopyCounter 				; counter.
.8649		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; copy the buffer out here
.864c		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.864e						_BLCopyLoop:
.864e		bd 5e 06	lda $065e,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8651		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8653		c8		iny				iny
.8654		d0 03		bne $8659			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.8656		20 a9 86	jsr $86a9			jsr 	BLAdvancePhysicalMemory
.8659						_BLNoAdjust:
.8659		e8		inx				inx
.865a		ce 6b 07	dec $076b			dec 	BLCopyCounter
.865d		d0 ef		bne $864e			bne 	_BLCopyLoop
.865f		8c 6a 07	sty $076a			sty 	BLYOffset 					; update Y offset
.8662		80 d4		bra $8638			bra 	_BLReadFile 				; go ask for more.
.8664						_BLFileError:
.8664		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8666		d0 16		bne $867e			bne 	CBLErrorHandler				; no, it's an actual error
.8668		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory 		; close the access.
.866b		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.866e		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8671		7a		ply				ply
.8672		60		rts				rts
.8673						CBLCloseError:
.8673		48		pha				pha
.8674		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory
.8677		ad 6d 07	lda $076d			lda 	BasicFileStream
.867a		20 63 82	jsr $8263			jsr 	KNLCloseFile
.867d		68		pla				pla
.867e						CBLErrorHandler:
.867e		4c 9a 8d	jmp $8d9a			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8681						BLOpenPhysicalMemory:
.8681		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8683		8d 69 07	sta $0769			sta 	BLNormalMapping
.8686		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8688		8d 6a 07	sta $076a			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.868b		64 3a		stz $3a				stz 	zTemp2
.868d		b5 60		lda $60,x			lda 	NSMantissa1,x
.868f		29 1f		and #$1f			and 	#$1F
.8691		09 60		ora #$60			ora 	#BLAccessPage << 5
.8693		85 3b		sta $3b				sta 	zTemp2+1
.8695		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8697		16 60		asl $60,x			asl 	NSMantissa1,x
.8699		2a		rol a				rol 	a
.869a		16 60		asl $60,x			asl 	NSMantissa1,x
.869c		2a		rol a				rol 	a
.869d		16 60		asl $60,x			asl 	NSMantissa1,x
.869f		2a		rol a				rol 	a
.86a0		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.86a2		60		rts				rts
.86a3						BLClosePhysicalMemory:
.86a3		ad 69 07	lda $0769			lda 	BLNormalMapping
.86a6		85 0b		sta $0b				sta 	BLAccessPage+8
.86a8		60		rts				rts
.86a9						BLAdvancePhysicalMemory:
.86a9		48		pha				pha
.86aa		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.86ac		a5 3b		lda $3b				lda 	zTemp2+1
.86ae		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.86b0		d0 06		bne $86b8			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.86b2		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.86b4		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.86b6		85 3b		sta $3b				sta 	zTemp2+1
.86b8						_BLAPMExit:
.86b8		68		pla				pla
.86b9		60		rts				rts
.0769						BLNormalMapping:
>0769								.fill 	1
.076a						BLYOffset:
>076a								.fill 	1
.076b						BLCopyCounter:
>076b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.86ba						Command_BSave:
.86ba		a2 00		ldx #$00			ldx 	#0
.86bc		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; file name to load
.86bf		20 74 96	jsr $9674			jsr 	CheckComma 					; consume comma
.86c2		e8		inx				inx
.86c3		20 5f a6	jsr $a65f			jsr 	EvaluateInteger 			; load address (full physical address)
.86c6		20 74 96	jsr $9674			jsr 	CheckComma 					; consume comma
.86c9		e8		inx				inx
.86ca		20 5f a6	jsr $a65f			jsr 	EvaluateInteger 			; data length (3 bytes only)
.86cd		5a		phy				phy
.86ce		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.86d0		a6 60		ldx $60				ldx 	NSMantissa1
.86d2		20 94 81	jsr $8194			jsr 	KNLOpenFileWrite 			; open file for reading
.86d5		b0 62		bcs $8739			bcs 	CBSErrorHandler 			; error, so fail.
.86d7		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.86da		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.86dc		20 81 86	jsr $8681			jsr 	BLOpenPhysicalMemory 		; open for access.
.86df		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86e1		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; used for data offset.
.86e4						_BSWriteToFileLoop:
.86e4		38		sec				sec 								; pre decrement count.
.86e5		a5 5a		lda $5a				lda 	NSMantissa0+2
.86e7		e9 01		sbc #$01			sbc 	#1
.86e9		85 5a		sta $5a				sta 	NSMantissa0+2
.86eb		a5 62		lda $62				lda 	NSMantissa1+2
.86ed		e9 00		sbc #$00			sbc 	#0
.86ef		85 62		sta $62				sta 	NSMantissa1+2
.86f1		a5 6a		lda $6a				lda 	NSMantissa2+2
.86f3		e9 00		sbc #$00			sbc 	#0
.86f5		85 6a		sta $6a				sta 	NSMantissa2+2
.86f7		30 15		bmi $870e			bmi 	_BSFileComplete 			; undercounted, so exit.
.86f9		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86fb		9d 5e 06	sta $065e,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86fe		e8		inx				inx
.86ff		c8		iny				iny 								; next byte
.8700		d0 03		bne $8705			bne 	_BSNoCheck
.8702		20 a9 86	jsr $86a9			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8705						_BSNoCheck:
.8705		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.8707		d0 db		bne $86e4			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.8709		20 1c 87	jsr $871c			jsr 	BSFlushBuffer 				; yes, flush the buffer
.870c		80 d6		bra $86e4			bra 	_BSWriteToFileLoop 			; and keep on going
.870e						_BSFileComplete:
.870e		20 1c 87	jsr $871c			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8711		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory 		; close the access.
.8714		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.8717		20 63 82	jsr $8263			jsr 	KNLCloseFile
.871a		7a		ply				ply
.871b		60		rts				rts
.871c						BSFlushBuffer:
.871c		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.871e		f0 0d		beq $872d			beq 	_BSFBExit 					; if so, exit.
.8720		a9 5e		lda #$5e			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8722		85 36		sta $36				sta 	zTemp0
.8724		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.8726		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8728		20 5c 94	jsr $945c			jsr 	CLWriteByteBlock 			; write it.
.872b		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.872d						_BSFBExit:
.872d		60		rts				rts
.872e						CBSSCloseError:
.872e		48		pha				pha
.872f		20 a3 86	jsr $86a3			jsr 	BLClosePhysicalMemory
.8732		ad 6d 07	lda $076d			lda 	BasicFileStream
.8735		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8738		68		pla				pla
.8739						CBSErrorHandler:
.8739		4c 9a 8d	jmp $8d9a			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.873c						CallCommand:
.873c		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.873e		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.8741						_CCClear
.8741		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8742		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; these are optional sequentially.
.8745		e0 04		cpx #$04			cpx 	#4
.8747		d0 f8		bne $8741			bne 	_CCClear
.8749		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.874b						_CCCParam:
.874b		b1 30		lda ($30),y			lda 	(codePtr),y
.874d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.874f		d0 09		bne $875a			bne 	_CCCRun6502
.8751		c8		iny				iny 								; skip comma
.8752		e8		inx				inx	 								; next level
.8753		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8756		e0 03		cpx #$03			cpx 	#3
.8758		90 f1		bcc $874b			bcc 	_CCCParam 					; done all 3 ?
.875a						_CCCRun6502:
.875a		5a		phy				phy 								; save position
.875b		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.875d		85 37		sta $37				sta 	zTemp0+1
.875f		a5 58		lda $58				lda 	NSMantissa0
.8761		85 36		sta $36				sta 	zTemp0
.8763		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8765		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8767		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8769		20 6e 87	jsr $876e			jsr 	_CCCZTemp0 					; call zTemp0
.876c		7a		ply				ply 								; restore position and exit
.876d		60		rts				rts
.876e						_CCCZTemp0:
.876e		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8771						ClearCommand:
.8771		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8773		85 36		sta $36				sta 	0+zTemp0
.8775		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8777		85 37		sta $37				sta 	1+zTemp0
.8779						_ClearZeroLoop:
.8779		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.877b		f0 24		beq $87a1			beq 	_ClearZeroEnd
.877d		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.877f		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8781						_ClearOneVariable:
.8781		91 36		sta ($36),y			sta 	(zTemp0),y
.8783		c8		iny				iny
.8784		c0 08		cpy #$08			cpy 	#8
.8786		d0 f9		bne $8781			bne 	_ClearOneVariable
.8788		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.878a		b1 36		lda ($36),y			lda 	(zTemp0),y
.878c		c9 18		cmp #$18			cmp 	#NSTProcedure
.878e		d0 04		bne $8794			bne 	_ClearNotProcedure
.8790		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8792		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8794						_ClearNotProcedure:
.8794		18		clc				clc 								; go to the next variable
.8795		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8797		65 36		adc $36				adc 	zTemp0
.8799		85 36		sta $36				sta 	zTemp0
.879b		90 dc		bcc $8779			bcc 	_ClearZeroLoop
.879d		e6 37		inc $37				inc 	zTemp0+1
.879f		80 d8		bra $8779			bra 	_ClearZeroLoop
.87a1						_ClearZeroEnd:
.87a1		18		clc				clc
.87a2		a5 36		lda $36				lda 	zTemp0
.87a4		69 01		adc #$01			adc 	#1
.87a6		8d 08 04	sta $0408			sta 	lowMemPtr
.87a9		a5 37		lda $37				lda 	zTemp0+1
.87ab		69 00		adc #$00			adc 	#0
.87ad		8d 09 04	sta $0409			sta 	lowMemPtr+1
.87b0		20 37 b8	jsr $b837			jsr 	StackReset
.87b3		20 9d b8	jsr $b89d			jsr 	StringSystemInitialise
.87b6		20 1b 95	jsr $951b			jsr 	ProcedureScan
.87b9		20 2e 91	jsr $912e			jsr 	Command_Restore
.87bc		9c 1a 04	stz $041a			stz 	AssemblerAddress
.87bf		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.87c2		9c 1c 04	stz $041c			stz 	AssemblerControl
.87c5		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.87c8		20 bf a1	jsr $a1bf			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.87cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.87cc						ClearScreen:
.87cc		5a		phy				phy
.87cd		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.87cf		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.87d2		7a		ply				ply
.87d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.87d4						Command_Data:
.87d4		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.87d6		a2 80		ldx #$80			ldx 	#KWC_EOL
.87d8		20 6d 95	jsr $956d			jsr 	ScanForward
.87db		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.87dc						DimCommand:
.87dc		b1 30		lda ($30),y			lda 	(codePtr),y
.87de		29 c0		and #$c0			and 	#$C0
.87e0		c9 40		cmp #$40			cmp 	#$40
.87e2		d0 7a		bne $885e			bne 	_DCSyntax 				; n o, error.
.87e4		b1 30		lda ($30),y			lda 	(codePtr),y
.87e6		18		clc				clc
.87e7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87e9		85 3f		sta $3f				sta 	zaTemp+1
.87eb		c8		iny				iny
.87ec		b1 30		lda ($30),y			lda 	(codePtr),y
.87ee		c8		iny				iny
.87ef		85 3e		sta $3e				sta 	zaTemp
.87f1		5a		phy				phy
.87f2		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87f4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87f6		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87f8		c9 18		cmp #$18			cmp 	#NSTProcedure
.87fa		f0 62		beq $885e			beq 	_DCSyntax
.87fc		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87fe		29 04		and #$04			and 	#NSBIsArray
.8800		f0 64		beq $8866			beq 	_DCType
.8802		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8804		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8806		d0 59		bne $8861			bne 	_DCRedefine
.8808		7a		ply				ply
.8809		20 69 88	jsr $8869			jsr 	_DCGetSize 				; get array size, check it.
.880c		5a		phy				phy
.880d		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.880f		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8811		7a		ply				ply 							; is there a second (e.g. ,x)
.8812		b1 30		lda ($30),y			lda 	(codePtr),y
.8814		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8816		d0 0a		bne $8822			bne 	_DCOneDimension
.8818		c8		iny				iny 							; skip comma
.8819		20 69 88	jsr $8869			jsr 	_DCGetSize 				; get 2nd array size
.881c		5a		phy				phy
.881d		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.881f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8821		7a		ply				ply
.8822						_DCOneDimension:
.8822		5a		phy				phy 							; save position
.8823		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8825		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8827		aa		tax				tax
.8828		c8		iny				iny
.8829		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.882b		e8		inx				inx 							; bump them.
.882c		1a		inc a				inc 	a
.882d		20 9d a6	jsr $a69d			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8830		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8832		29 e0		and #$e0			and 	#$E0
.8834		d0 23		bne $8859			bne 	_DCSize
.8836		a0 02		ldy #$02			ldy 	#2 						; get base type
.8838		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.883a		20 77 88	jsr $8877			jsr 	ScaleByBaseType 		; scale by base type
.883d		a5 36		lda $36				lda 	zTemp0
.883f		a6 37		ldx $37				ldx 	zTemp0+1
.8841		20 81 a1	jsr $a181			jsr 	AllocateXABytes 		; allocate memory
.8844		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8846		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8848		c8		iny				iny
.8849		8a		txa				txa
.884a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.884c		7a		ply				ply 							; get position back
.884d		20 6c 96	jsr $966c			jsr 	CheckRightBracket 		; check )
.8850		b1 30		lda ($30),y			lda 	(codePtr),y
.8852		c8		iny				iny 							; consume in case
.8853		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8855		f0 85		beq $87dc			beq 	DimCommand
.8857		88		dey				dey 							; undo consume
.8858		60		rts				rts
.8859						_DCSize:
.8859		a9 16		lda #$16		lda	#22
.885b		4c 85 96	jmp $9685		jmp	ErrorHandler
.885e						_DCSyntax:
.885e		4c 70 a8	jmp $a870			jmp 	SyntaxError
.8861						_DCRedefine:
.8861		a9 15		lda #$15		lda	#21
.8863		4c 85 96	jmp $9685		jmp	ErrorHandler
.8866						_DCType:
.8866		4c 7a a8	jmp $a87a			jmp 	TypeError
.8869						_DCGetSize:
.8869		a2 00		ldx #$00			ldx 	#0 						; get first index.
.886b		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 	; get array dimension
.886e		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8870		f0 e7		beq $8859			beq 	_DCSize
.8872		c9 fe		cmp #$fe			cmp 	#254
.8874		f0 e3		beq $8859			beq 	_DCSize
.8876		60		rts				rts
.8877						ScaleByBaseType:
.8877		29 10		and #$10			and 	#NSBIsString 			; is it string
.8879		d0 19		bne $8894			bne 	_SBBTString
.887b		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.887d		48		pha				pha
.887e		a5 36		lda $36				lda 	zTemp0
.8880		48		pha				pha
.8881		06 36		asl $36				asl 	zTemp0 					; x 2
.8883		26 37		rol $37				rol 	zTemp0+1
.8885		06 36		asl $36				asl 	zTemp0 					; x 4
.8887		26 37		rol $37				rol 	zTemp0+1
.8889		68		pla				pla 							; add stacked value = x 5
.888a		65 36		adc $36				adc 	zTemp0
.888c		85 36		sta $36				sta 	zTemp0
.888e		68		pla				pla
.888f		65 37		adc $37				adc 	zTemp0+1
.8891		85 37		sta $37				sta 	zTemp0+1
.8893		60		rts				rts
.8894						_SBBTString:
.8894		06 36		asl $36				asl 	zTemp0
.8896		26 37		rol $37				rol 	zTemp0+1
.8898		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8899						Command_Dir:
.8899		ad 5e 07	lda $075e			lda     KNLDefaultDrive				; set drive to list.
.889c		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.889e		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.88a0		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.88a3		b0 4f		bcs $88f4			bcs     _CDExit
.88a5						_CDEventLoop:
.88a5		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.88a8		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.88ab		b0 f8		bcs $88a5			bcs     _CDEventLoop
.88ad		ad 5f 07	lda $075f			lda     KNLEvent.type
.88b0		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.88b2		f0 40		beq $88f4			beq    	_CDExit
.88b4		20 b9 88	jsr $88b9			jsr     _CDMessages 				; handle various messages
.88b7		80 ec		bra $88a5			bra     _CDEventLoop
.88b9						_CDMessages:
.88b9		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.88bb		f0 15		beq $88d2			beq     _CDEVRead
.88bd		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.88bf		f0 19		beq $88da			beq     _CDEVVolume
.88c1		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.88c3		f0 32		beq $88f7			beq     _CDEVFile
.88c5		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.88c7		f0 70		beq $8939			beq     _CDEVFree
.88c9		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.88cb		f0 6e		beq $893b			beq     _CDEVEOF
.88cd		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.88cf		f0 6a		beq $893b			beq     _CDEVEOF
.88d1		60		rts				rts
.88d2						_CDEVRead:
.88d2		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.88d5		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.88d7		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.88da						_CDEVVolume:
.88da		a9 5b		lda #$5b			lda 	#"["
.88dc		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88df		ad 64 07	lda $0764			lda     KNLEvent.directory.volume.len
.88e2		20 43 89	jsr $8943			jsr     _CDReadData
.88e5		20 de 96	jsr $96de			jsr 	PrintStringXA
.88e8		a9 5d		lda #$5d			lda 	#"]"
.88ea		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88ed		a9 0d		lda #$0d			lda 	#13
.88ef		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88f2		80 de		bra $88d2			bra     _CDEVRead
.88f4						_CDExit:
.88f4		4c b9 85	jmp $85b9			jmp 	WarmStart
.88f7						_CDEVFile:
.88f7		a9 20		lda #$20			lda 	#32
.88f9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.88fc		ad 64 07	lda $0764			lda     KNLEvent.directory.file.len
.88ff		48		pha				pha
.8900		20 43 89	jsr $8943			jsr     _CDReadData
.8903		20 de 96	jsr $96de			jsr 	PrintStringXA
.8906		68		pla				pla
.8907		49 ff		eor #$ff			eor 	#$FF
.8909		38		sec				sec
.890a		69 10		adc #$10			adc 	#16
.890c		aa		tax				tax
.890d						_CDEVTab:
.890d		a9 20		lda #$20			lda 	#32
.890f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8912		ca		dex				dex
.8913		10 f8		bpl $890d			bpl 	_CDEVTab
.8915		20 5a 89	jsr $895a			jsr 	_CDReadExtended
.8918		ad 26 05	lda $0526			lda 	lineBuffer
.891b		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.891e		20 f4 9a	jsr $9af4			jsr 	ConvertInt16
.8921		20 de 96	jsr $96de			jsr 	PrintStringXA
.8924		a2 89		ldx #$89			ldx 	#_CDEVFMessage >> 8
.8926		a9 2d		lda #$2d			lda 	#_CDEVFMessage & $FF
.8928		20 de 96	jsr $96de			jsr 	PrintStringXA
.892b		80 a5		bra $88d2			bra     _CDEVRead
.892d						_CDEVFMessage:
>892d		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8935		29 2e 0d 00
.8939						_CDEVFree:
.8939		80 00		bra $893b			bra     _CDEVEOF
.893b						_CDEVEOF:
.893b		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.893e		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8940		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8943						_CDReadData:
.8943		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8945		a9 26		lda #$26			lda     #lineBuffer & $FF
.8947		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8949		a9 05		lda #$05			lda     #lineBuffer >> 8
.894b		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.894d		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8950		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8952		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8955		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8957		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8959		60		rts				rts
.895a						_CDReadExtended:
.895a		a9 02		lda #$02			lda     #2
.895c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.895e		a9 26		lda #$26			lda     #lineBuffer & $FF
.8960		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8962		a9 05		lda #$05			lda     #lineBuffer >> 8
.8964		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8966		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dos.asm

.8969						BootDOS:
.8969		a9 77		lda #$77	            lda     #dosName & $FF
.896b		85 fb		sta $fb		            sta     kernel.args.buf+0
.896d		a9 89		lda #$89	            lda     #dosName >> 8
.896f		85 fc		sta $fc		            sta     kernel.args.buf+1
.8971		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8974		4c b9 85	jmp $85b9	            jmp 	WarmStart
>8977		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.897b						Command_Drive:
.897b		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.897e		20 90 81	jsr $8190			jsr 	KNLSetDrive
.8981		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8982						EndCommand:
.8982		4c b9 85	jmp $85b9			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8985						ForCommand:
.8985		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8987		20 d1 b7	jsr $b7d1			jsr 	StackOpen
.898a		a2 00		ldx #$00			ldx 	#0
.898c		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm
.898f		b5 50		lda $50,x			lda 	NSStatus,x
.8991		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8993		d0 47		bne $89dc			bne		_FCError
.8995		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8997		20 7c 96	jsr $967c			jsr 	CheckNextA
.899a		e8		inx				inx
.899b		20 5f a6	jsr $a65f			jsr 	EvaluateInteger 			; <from> in +1
.899e		b1 30		lda ($30),y			lda 	(codePtr),y
.89a0		c8		iny				iny 								; consume it
.89a1		48		pha				pha 								; save on stack for later
.89a2		c9 c0		cmp #$c0			cmp 	#KWD_DOWNTO
.89a4		f0 04		beq $89aa			beq 	_FCNoSyntax
.89a6		c9 da		cmp #$da			cmp 	#KWD_TO
.89a8		d0 35		bne $89df			bne 	_FCSyntaxError
.89aa						_FCNoSyntax:
.89aa		e8		inx				inx
.89ab		20 5f a6	jsr $a65f			jsr 	EvaluateInteger
.89ae		20 16 b8	jsr $b816			jsr 	STKSaveCodePosition 		; save loop back position
.89b1		68		pla				pla 								; restore DOWNTO or TO
.89b2		5a		phy				phy 								; save Y on the stack
.89b3		49 c0		eor #$c0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.89b5		f0 02		beq $89b9			beq 	_FCNotDownTo
.89b7		a9 02		lda #$02			lda 	#2
.89b9						_FCNotDownTo:
.89b9		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89ba		a0 10		ldy #$10			ldy 	#16
.89bc		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89be		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.89c0		a5 58		lda $58				lda 	NSMantissa0
.89c2		91 34		sta ($34),y			sta 	(basicStack),y
.89c4		a5 60		lda $60				lda 	NSMantissa1
.89c6		c8		iny				iny
.89c7		91 34		sta ($34),y			sta 	(basicStack),y
.89c9		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89cb		a2 01		ldx #$01			ldx 	#1
.89cd		20 e2 89	jsr $89e2			jsr 	FCIntegerToStack
.89d0		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89d2		a2 02		ldx #$02			ldx 	#2
.89d4		20 e2 89	jsr $89e2			jsr 	FCIntegerToStack
.89d7		20 fd 89	jsr $89fd			jsr 	CopyIndexToReference
.89da		7a		ply				ply 								; restore position
.89db		60		rts				rts
.89dc						_FCError:
.89dc		4c 7a a8	jmp $a87a			jmp 	TypeError
.89df						_FCSyntaxError:
.89df		4c 70 a8	jmp $a870			jmp 	SyntaxError
.89e2						FCIntegerToStack:
.89e2		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89e4		10 03		bpl $89e9			bpl	 	_FCNotNegative
.89e6		20 bb a6	jsr $a6bb			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89e9						_FCNotNegative:
.89e9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89eb		91 34		sta ($34),y			sta 	(basicStack),y
.89ed		c8		iny				iny
.89ee		b5 60		lda $60,x			lda 	NSMantissa1,x
.89f0		91 34		sta ($34),y			sta 	(basicStack),y
.89f2		c8		iny				iny
.89f3		b5 68		lda $68,x			lda 	NSMantissa2,x
.89f5		91 34		sta ($34),y			sta 	(basicStack),y
.89f7		c8		iny				iny
.89f8		b5 70		lda $70,x			lda 	NSMantissa3,x
.89fa		91 34		sta ($34),y			sta 	(basicStack),y
.89fc		60		rts				rts
.89fd						CopyIndexToReference:
.89fd		5a		phy				phy
.89fe		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8a00		38		sec				sec 								; (because we copy from offset 8)
.8a01		b1 34		lda ($34),y			lda 	(basicStack),y
.8a03		e9 08		sbc #$08			sbc 	#8
.8a05		85 36		sta $36				sta 	zTemp0
.8a07		c8		iny				iny
.8a08		b1 34		lda ($34),y			lda 	(basicStack),y
.8a0a		e9 00		sbc #$00			sbc 	#0
.8a0c		85 37		sta $37				sta 	zTemp0+1
.8a0e		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a10		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a12		b1 34		lda ($34),y			lda 	(basicStack),y
.8a14		0a		asl a				asl 	a 							; into carry
.8a15		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a17		90 14		bcc $8a2d			bcc 	_CITRNormal
.8a19		38		sec				sec
.8a1a						_CITRNegative:
.8a1a		a9 00		lda #$00			lda 	#0
.8a1c		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a1e		91 36		sta ($36),y			sta 	(zTemp0),y
.8a20		c8		iny				iny
.8a21		ca		dex				dex
.8a22		d0 f6		bne $8a1a			bne 	_CITRNegative
.8a24		88		dey				dey 								; look at MSB of mantissa
.8a25		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a27		09 80		ora #$80			ora 	#$80
.8a29		91 36		sta ($36),y			sta 	(zTemp0),y
.8a2b		7a		ply				ply
.8a2c		60		rts				rts
.8a2d						_CITRNormal:
.8a2d		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a2f		91 36		sta ($36),y			sta 	(zTemp0),y
.8a31		c8		iny				iny
.8a32		ca		dex				dex
.8a33		d0 f8		bne $8a2d			bne 	_CITRNormal
.8a35		7a		ply				ply 								; and exit.
.8a36		60		rts				rts
.8a37						NextCommand:
.8a37		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a39		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a3b		20 fe b7	jsr $b7fe			jsr 	StackCheckFrame
.8a3e		5a		phy				phy
.8a3f		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a41		b1 34		lda ($34),y			lda 	(basicStack),y
.8a43		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a45		30 02		bmi $8a49			bmi 	_NCStepNeg
.8a47		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a49						_NCStepNeg:
.8a49		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a4b		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a4d		18		clc				clc
.8a4e						_NCBump:
.8a4e		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a50		91 34		sta ($34),y			sta 	(basicStack),y
.8a52		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a54		c8		iny				iny 								; next byte
.8a55		ca		dex				dex 								; do four times
.8a56		d0 f6		bne $8a4e			bne 	_NCBump
.8a58		20 fd 89	jsr $89fd			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a5b		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a5d		b1 34		lda ($34),y			lda 	(basicStack),y
.8a5f		0a		asl a				asl 	a 							; sign bit to carry
.8a60		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a62		85 38		sta $38				sta 	zTemp1
.8a64		90 02		bcc $8a68			bcc 	_NCCompRev 					; use if step is +ve
.8a66		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a68						_NCCompRev:
.8a68		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a6a		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a6c		85 39		sta $39				sta 	zTemp1+1
.8a6e		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a70		38		sec				sec
.8a71						_NCCompare:
.8a71		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a73		b1 34		lda ($34),y			lda 	(basicStack),y
.8a75		a4 39		ldy $39				ldy 	zTemp1+1
.8a77		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a79		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a7b		e6 39		inc $39				inc 	zTemp1+1
.8a7d		ca		dex				dex 								; do it 4 times.
.8a7e		d0 f1		bne $8a71			bne 	_NCCompare
.8a80		50 02		bvc $8a84			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a82		49 80		eor #$80			eor 	#$80
.8a84						_NCNoOverflow:
.8a84		7a		ply				ply 								; restore Y position
.8a85		0a		asl a				asl 	a 							; is bit 7 set.
.8a86		90 04		bcc $8a8c			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a88		20 f0 b7	jsr $b7f0			jsr 	StackClose 					; exit the loop
.8a8b		60		rts				rts
.8a8c						_NCLoopBack:
.8a8c		20 27 b8	jsr $b827			jsr 	STKLoadCodePosition 		; loop back
.8a8f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a90						Command_GOSUB:
.8a90		a2 00		ldx #$00			ldx 	#0
.8a92		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a95		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a97		20 d1 b7	jsr $b7d1			jsr 	StackOpen 					; create frame
.8a9a		20 16 b8	jsr $b816			jsr 	STKSaveCodePosition 		; save current position
.8a9d		4c b3 8a	jmp $8ab3			jmp 	GotoStackX
.8aa0						Command_RETURN:
.8aa0		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8aa2		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8aa4		20 fe b7	jsr $b7fe			jsr 	StackCheckFrame
.8aa7		20 27 b8	jsr $b827			jsr 	STKLoadCodePosition 		; restore code position
.8aaa		20 f0 b7	jsr $b7f0			jsr 	StackClose
.8aad		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8aae						GotoCommand:
.8aae		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8ab0		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.8ab3						GotoStackX:
.8ab3		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8ab5		48		pha				pha 								; it is slightly inefficient, just in cases.
.8ab6		b5 58		lda $58,x			lda 	NSMantissa0,x
.8ab8		fa		plx				plx
.8ab9		20 7d ae	jsr $ae7d			jsr 	MemorySearch 				; transfer to line number AX.
.8abc		90 05		bcc $8ac3			bcc 	_GotoError 					; not found, off end.
.8abe		d0 03		bne $8ac3			bne 	_GotoError 					; not found exactly
.8ac0		4c 85 91	jmp $9185			jmp 	RunNewLine 					; and go straight to new line code.
.8ac3						_GotoError:
.8ac3		a9 0d		lda #$0d		lda	#13
.8ac5		4c 85 96	jmp $9685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ac8						IfCommand:
.8ac8		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8aca		20 40 a6	jsr $a640			jsr 	EvaluateNumber
.8acd		b1 30		lda ($30),y			lda 	(codePtr),y
.8acf		c9 b4		cmp #$b4			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8ad1		d0 0a		bne $8add			bne 	_IfStructured 				; we still support it.
.8ad3		c8		iny				iny 								; consume THEN
.8ad4		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; is it zero
.8ad7		f0 01		beq $8ada			beq 	_IfFail 					; if fail, go to next line
.8ad9		60		rts				rts 								; if THEN just continue
.8ada						_IfFail:
.8ada		4c 60 91	jmp $9160			jmp 	EOLCommand
.8add						_IfStructured:
.8add		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; is it zero
.8ae0		d0 07		bne $8ae9			bne 	_IfExit 					; if not, then continue normally.
.8ae2		a9 c1		lda #$c1			lda 	#KWD_ELSE 					; look for else/endif
.8ae4		a2 b1		ldx #$b1			ldx 	#KWD_ENDIF
.8ae6		20 6d 95	jsr $956d			jsr 	ScanForward 				; and run from there
.8ae9						_IfExit:
.8ae9		60		rts				rts
.8aea						ElseCode:
.8aea		a9 b1		lda #$b1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8aec		aa		tax				tax 								; so just go to the structure exit
.8aed		20 6d 95	jsr $956d			jsr 	ScanForward
.8af0		60		rts				rts
.8af1						EndIf:
.8af1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8af2						Command_Input:
.8af2		9c 24 04	stz $0424			stz 	isPrintFlag
.8af5		80 0c		bra $8b03			bra 	Command_IP_Main
.8af7						Command_CPrint:
.8af7		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8af9		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8afc		80 05		bra $8b03			bra 	Command_IP_Main
.8afe						Command_Print:
.8afe		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8b00		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8b03						Command_IP_Main:
.8b03		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8b04						_CPLoop:
.8b04		08		php				php 								; save last action flag
.8b05		b1 30		lda ($30),y			lda 	(codePtr),y
.8b07		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8b09		f0 54		beq $8b5f			beq 	_CPExit
.8b0b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b0d		f0 50		beq $8b5f			beq 	_CPExit
.8b0f		68		pla				pla 								; throw last action flag
.8b10		b1 30		lda ($30),y			lda 	(codePtr),y
.8b12		c8		iny				iny
.8b13		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8b15		f0 45		beq $8b5c			beq 	_CPContinueWithSameLine
.8b17		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8b19		f0 3c		beq $8b57			beq 	_CPTab
.8b1b		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8b1d		f0 34		beq $8b53			beq 	_CPNewLine
.8b1f		88		dey				dey 								; undo the get.
.8b20		20 87 9b	jsr $9b87			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8b23		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8b25		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b27		f0 0d		beq $8b36			beq 	_CPIsValue 					; no, display it.
.8b29		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8b2c		d0 05		bne $8b33			bne 	_CPIsPrint 					; otherwise display.
.8b2e		20 68 8b	jsr $8b68			jsr 	CIInputValue 				; input a value to the reference
.8b31		80 20		bra $8b53			bra 	_CPNewLine
.8b33						_CPIsPrint:
.8b33		20 4c 9e	jsr $9e4c			jsr 	Dereference 				; dereference if required.
.8b36						_CPIsValue:
.8b36		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b38		29 10		and #$10			and 	#NSBIsString
.8b3a		f0 09		beq $8b45			beq 	_CPNumber
.8b3c		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b3e		a5 58		lda $58				lda 	NSMantissa0
.8b40		20 cb 8b	jsr $8bcb			jsr 	CPPrintStringXA
.8b43		80 be		bra $8b03			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b45						_CPNumber:
.8b45		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b47		20 27 a5	jsr $a527			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b4a		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b4c		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b4e		20 cb 8b	jsr $8bcb			jsr 	CPPrintStringXA 			; print it.
.8b51		80 b0		bra $8b03			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b53						_CPNewLine:
.8b53		a9 0d		lda #$0d			lda 	#13
.8b55		80 02		bra $8b59			bra 	_CPPrintCharDirect
.8b57						_CPTab:
.8b57		a9 09		lda #$09			lda 	#9 							; print TAB
.8b59						_CPPrintCharDirect:
.8b59		20 e6 8b	jsr $8be6			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b5c						_CPContinueWithSameLine:
.8b5c		38		sec				sec 								; loop round with carry set, which
.8b5d		80 a5		bra $8b04			bra 	_CPLoop 					; will inhibit final CR
.8b5f						_CPExit:
.8b5f		28		plp				plp 								; get last action flag
.8b60		b0 05		bcs $8b67			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b62		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b64		20 e6 8b	jsr $8be6			jsr 	CPPVControl
.8b67						_CPExit2:
.8b67		60		rts				rts
.8b68						CIInputValue:
.8b68		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b6a						_CIInputLine:
.8b6a		20 e9 8b	jsr $8be9			jsr 	CPInputVector 				; get key
.8b6d		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b6f		f0 1f		beq $8b90			beq 	_CIHaveValue
.8b71		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b73		f0 11		beq $8b86			beq 	_CIBackspace
.8b75		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b77		90 f1		bcc $8b6a			bcc 	_CIInputLine
.8b79		e0 50		cpx #$50			cpx 	#80 						; max length
.8b7b		b0 ed		bcs $8b6a			bcs 	_CIInputLine
.8b7d		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b80		e8		inx				inx
.8b81		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b84		80 e4		bra $8b6a			bra 	_CIInputLine
.8b86						_CIBackspace:
.8b86		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b88		f0 e0		beq $8b6a			beq 	_CIInputLine
.8b8a		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b8d		ca		dex				dex
.8b8e		80 da		bra $8b6a			bra 	_CIInputLine
.8b90						_CIHaveValue:
.8b90		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b93		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b95		29 10		and #$10			and 	#NSBIsString
.8b97		f0 17		beq $8bb0			beq 	_CIAssignNumber 			; assign a number
.8b99		a2 01		ldx #$01			ldx 	#1
.8b9b		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b9d		95 58		sta $58,x			sta 	NSMantissa0,x
.8b9f		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8ba1		95 60		sta $60,x			sta 	NSMantissa1,x
.8ba3		74 68		stz $68,x			stz 	NSMantissa2,x
.8ba5		74 70		stz $70,x			stz 	NSMantissa3,x
.8ba7		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8ba9		95 50		sta $50,x			sta  	NSStatus,x
.8bab		ca		dex				dex 								; X = 0
.8bac		20 25 8c	jsr $8c25			jsr 	AssignVariable
.8baf		60		rts				rts
.8bb0						_CIAssignNumber:
.8bb0		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8bb2		85 36		sta $36				sta 	zTemp0
.8bb4		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8bb6		85 37		sta $37				sta 	zTemp0+1
.8bb8		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8bba		20 69 a3	jsr $a369			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8bbd		90 07		bcc $8bc6			bcc 	_CIIsOkay
.8bbf		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8bc1		20 de 8b	jsr $8bde			jsr 	CPPrintVector
.8bc4		80 a2		bra $8b68			bra 	CIInputValue
.8bc6						_CIIsOkay:
.8bc6		ca		dex				dex 								; X = 0
.8bc7		20 25 8c	jsr $8c25			jsr 	AssignVariable
.8bca		60		rts				rts
.8bcb						CPPrintStringXA:
.8bcb		5a		phy				phy
.8bcc		86 37		stx $37				stx 	zTemp0+1
.8bce		85 36		sta $36				sta 	zTemp0
.8bd0		a0 00		ldy #$00			ldy 	#0
.8bd2						_PSXALoop:
.8bd2		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd4		f0 06		beq $8bdc			beq 	_PSXAExit
.8bd6		20 de 8b	jsr $8bde			jsr 	CPPrintVector
.8bd9		c8		iny				iny
.8bda		80 f6		bra $8bd2			bra 	_PSXALoop
.8bdc						_PSXAExit:
.8bdc		7a		ply				ply
.8bdd		60		rts				rts
.8bde						CPPrintVector:
.8bde		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8be1		30 03		bmi $8be6			bmi 	CPPVControl
.8be3		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8be6						CPPVControl:
.8be6		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8be9						CPInputVector:
.8be9		4c 6b 80	jmp $806b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bec						LetCommand:
.8bec		a2 00		ldx #$00			ldx 	#0
.8bee		b1 30		lda ($30),y			lda 	(codePtr),y
.8bf0		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8bf2		d0 14		bne $8c08			bne 	_LCStandard
.8bf4		c8		iny				iny 								; skip equal
.8bf5		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bf8		20 4c 9e	jsr $9e4c			jsr 	Dereference 				; dereference it to a value
.8bfb		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bfd		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bff		95 50		sta $50,x			sta 	NSStatus,x
.8c01		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8c03		d0 0f		bne $8c14			bne 	_LCMain
.8c05		4c 7a a8	jmp $a87a			jmp 	TypeError 					; was a reference before.
.8c08						_LCStandard:
.8c08		ad 71 9b	lda $9b71			lda 	PrecedenceLevel+"*"			; precedence > this
.8c0b		20 8b 9b	jsr $9b8b			jsr 	EvaluateExpressionAtPrecedence
.8c0e		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8c10		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8c12		f0 0e		beq $8c22			beq 	_LetGoProc 					; it's a procedure call.
.8c14						_LCMain:
.8c14		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8c16		20 7c 96	jsr $967c			jsr 	CheckNextA
.8c19		e8		inx				inx 								; RHS
.8c1a		20 37 a6	jsr $a637			jsr 	EvaluateValue
.8c1d		ca		dex				dex
.8c1e		20 25 8c	jsr $8c25			jsr 	AssignVariable
.8c21		60		rts				rts
.8c22						_LetGoProc:
.8c22		4c 36 90	jmp $9036			jmp 	CallProcedure
.8c25						AssignVariable:
.8c25		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c27		48		pha				pha 								; save a copy
.8c28		55 51		eor $51,x			eor 	NSStatus+1,x
.8c2a		29 10		and #$10			and 	#NSBIsString
.8c2c		d0 0b		bne $8c39			bne 	_ASError
.8c2e		68		pla				pla 								; get back
.8c2f		29 10		and #$10			and 	#NSBIsString 				; check type
.8c31		d0 03		bne $8c36			bne 	_ASString
.8c33		4c 8a 9d	jmp $9d8a			jmp 	AssignNumber
.8c36						_ASString:
.8c36		4c e8 9d	jmp $9de8			jmp 	AssignString
.8c39						_ASError:
.8c39		4c 7a a8	jmp $a87a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c3c						Command_List:
.8c3c		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c3f		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c41		20 7f 80	jsr $807f			jsr 	SNDCommand
.8c44		b1 30		lda ($30),y			lda 	(codePtr),y
.8c46		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c48		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c4a		f0 72		beq $8cbe			beq 	_CLListProcedure
.8c4c		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c4e		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c50		a9 ff		lda #$ff			lda 	#$FF
.8c52		85 5f		sta $5f				sta 	NSMantissa0+7
.8c54		85 67		sta $67				sta 	NSMantissa1+7
.8c56		b1 30		lda ($30),y			lda 	(codePtr),y
.8c58		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c5a		f0 1a		beq $8c76			beq 	_CLSecond
.8c5c		20 3b 8d	jsr $8d3b			jsr 	CLIsDigit 					; if not digit, list all
.8c5f		b0 20		bcs $8c81			bcs 	_CLStart
.8c61		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c63		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.8c66		b1 30		lda ($30),y			lda 	(codePtr),y
.8c68		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c6a		f0 0a		beq $8c76			beq 	_CLSecond 					; if so go get it
.8c6c		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c6e		85 5f		sta $5f				sta 	NSMantissa0+7
.8c70		a5 64		lda $64				lda 	NSMantissa1+4
.8c72		85 67		sta $67				sta 	NSMantissa1+7
.8c74		80 0b		bra $8c81			bra 	_CLStart
.8c76						_CLSecond:
.8c76		c8		iny				iny 								; consume comma
.8c77		20 3b 8d	jsr $8d3b			jsr 	CLIsDigit 					; digit found
.8c7a		b0 05		bcs $8c81			bcs 	_CLStart 					; if not, continue listing
.8c7c		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c7e		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.8c81						_CLStart
.8c81		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c83		85 30		sta $30				sta 	codePtr
.8c85		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c87		85 31		sta $31				sta 	codePtr+1
.8c89						_CLLoop:
.8c89		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c8b		f0 03		beq $8c90			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c8d		20 41 81	jsr $8141			jsr 	ProcessEvents
.8c90						_NoEvents:
.8c90		d0 27		bne $8cb9			bne 	_CLBreak
.8c92		b2 30		lda ($30)			lda 	(codePtr)
.8c94		f0 20		beq $8cb6			beq 	_CLExit
.8c96		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c98		20 2a 8d	jsr $8d2a			jsr 	CLCompareLineNo
.8c9b		90 0c		bcc $8ca9			bcc 	_CLNext
.8c9d		a2 07		ldx #$07			ldx 	#7
.8c9f		20 2a 8d	jsr $8d2a			jsr 	CLCompareLineNo
.8ca2		f0 02		beq $8ca6			beq 	_CLDoThisOne
.8ca4		b0 03		bcs $8ca9			bcs 	_CLNext
.8ca6						_CLDoThisOne:
.8ca6		20 17 8d	jsr $8d17			jsr 	CLListOneLine 				; routine to list the current line.
.8ca9						_CLNext:
.8ca9		18		clc				clc
.8caa		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cac		65 30		adc $30				adc 	codePtr
.8cae		85 30		sta $30				sta 	codePtr
.8cb0		90 02		bcc $8cb4			bcc 	_CREExit
.8cb2		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cb4						_CREExit:
.8cb4		80 d3		bra $8c89			bra 	_CLLoop
.8cb6						_CLExit:
.8cb6		4c b9 85	jmp $85b9			jmp 	WarmStart
.8cb9						_CLBreak:
.8cb9		a9 01		lda #$01		lda	#1
.8cbb		4c 85 96	jmp $9685		jmp	ErrorHandler
.8cbe						_CLListProcedure:
.8cbe		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc0		85 38		sta $38				sta 	zTemp1
.8cc2		c8		iny				iny
.8cc3		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc5		85 39		sta $39				sta 	zTemp1+1
.8cc7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cc9		85 30		sta $30				sta 	codePtr
.8ccb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ccd		85 31		sta $31				sta 	codePtr+1
.8ccf						_CLLPSearch:
.8ccf		b2 30		lda ($30)			lda 	(codePtr)
.8cd1		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cd3		f0 e1		beq $8cb6			beq 	_CLExit
.8cd5		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8cd7		b1 30		lda ($30),y			lda 	(codePtr),y
.8cd9		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.8cdb		d0 0e		bne $8ceb			bne 	_CLLPNext
.8cdd		c8		iny				iny 								; check if PROC this.
.8cde		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce0		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8ce2		d0 07		bne $8ceb			bne 	_CLLPNext
.8ce4		c8		iny				iny
.8ce5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce7		c5 39		cmp $39				cmp 	zTemp1+1
.8ce9		f0 0d		beq $8cf8			beq 	_CLLPFound
.8ceb						_CLLPNext:
.8ceb		18		clc				clc
.8cec		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cee		65 30		adc $30				adc 	codePtr
.8cf0		85 30		sta $30				sta 	codePtr
.8cf2		90 02		bcc $8cf6			bcc 	_CREExit
.8cf4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cf6						_CREExit:
.8cf6		80 d7		bra $8ccf			bra 	_CLLPSearch
.8cf8						_CLLPFound:
.8cf8		b2 30		lda ($30)			lda 	(codePtr)
.8cfa		f0 ba		beq $8cb6			beq 	_CLExit
.8cfc		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cfe		b1 30		lda ($30),y			lda 	(codePtr),y
.8d00		48		pha				pha
.8d01		20 17 8d	jsr $8d17			jsr 	CLListOneLine 				; list line and go forward
.8d04		18		clc				clc
.8d05		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d07		65 30		adc $30				adc 	codePtr
.8d09		85 30		sta $30				sta 	codePtr
.8d0b		90 02		bcc $8d0f			bcc 	_CREExit
.8d0d		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d0f						_CREExit:
.8d0f		68		pla				pla 								; reached ENDPROC ?
.8d10		c9 b2		cmp #$b2			cmp 	#KWD_ENDPROC
.8d12		d0 e4		bne $8cf8			bne 	_CLLPFound
.8d14		4c b9 85	jmp $85b9			jmp 	WarmStart
.8d17						CLListOneLine:
.8d17		20 d0 95	jsr $95d0			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8d1a		20 93 80	jsr $8093			jsr 	TKListConvertLine 			; convert line into token Buffer
.8d1d		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d1f		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8d21		20 de 96	jsr $96de			jsr 	PrintStringXA
.8d24		a9 0d		lda #$0d			lda 	#13 						; new line
.8d26		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8d29		60		rts				rts
.8d2a						CLCompareLineNo:
.8d2a		38		sec				sec
.8d2b		a0 01		ldy #$01			ldy 	#1
.8d2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8d2f		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d31		85 36		sta $36				sta 	zTemp0
.8d33		c8		iny				iny
.8d34		b1 30		lda ($30),y			lda 	(codePtr),y
.8d36		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d38		05 36		ora $36				ora 	zTemp0
.8d3a		60		rts				rts
.8d3b						CLIsDigit:
.8d3b		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3d		c9 30		cmp #$30			cmp 	#"0"
.8d3f		90 03		bcc $8d44			bcc	 	_CLIDExitFalse
.8d41		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d43		60		rts				rts
.8d44						_CLIDExitFalse:
.8d44		38		sec				sec
.8d45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8d46						Command_Load:
.8d46		20 4c 8d	jsr $8d4c			jsr 	LoadFile
.8d49		4c b9 85	jmp $85b9			jmp 	WarmStart
.8d4c						LoadFile:
.8d4c		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; file name to load
.8d4f		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8d51		a5 36		lda $36				lda 	zTemp0
.8d53		20 99 81	jsr $8199			jsr 	KNLOpenFileRead 			; open file for reading
.8d56		b0 42		bcs $8d9a			bcs 	CLErrorHandler 				; error, so fail.
.8d58		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8d5b		20 ea 8d	jsr $8dea			jsr     LoadReadByteInit            ; Init reader with the stream
.8d5e		20 ef 8f	jsr $8fef			jsr 	NewProgram 					; does the actual NEW.
.8d61		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.8d64						_CLLoop:
.8d64		20 a8 8d	jsr $8da8			jsr 	LoadReadLine 				; get next line.
.8d67		f0 10		beq $8d79			beq 	_CLExit 					; end, exit.
.8d69		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.8d6c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8d6f		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8d72		f0 f0		beq $8d64			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8d74		20 94 85	jsr $8594			jsr 	EditProgramCode 			; do the editing etc.
.8d77		80 eb		bra $8d64			bra 	_CLLoop
.8d79						_CLExit:
.8d79		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d7c		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8d7f						CLComplete:
.8d7f		a9 87		lda #$87			lda 	#_CLCMsg & $FF
.8d81		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d83		20 de 96	jsr $96de			jsr 	PrintStringXA
.8d86		60		rts				rts
.8d87						_CLCMsg:
>8d87		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d8f		2e 0d 00
.8d92						CLCloseError:
.8d92		48		pha				pha
.8d93		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d96		20 63 82	jsr $8263			jsr 	KNLCloseFile
.8d99		68		pla				pla
.8d9a						CLErrorHandler:
.8d9a		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d9c		f0 05		beq $8da3			beq 	_CLEHNotFound
.8d9e		a9 1a		lda #$1a		lda	#26
.8da0		4c 85 96	jmp $9685		jmp	ErrorHandler
.8da3						_CLEHNotFound:
.8da3		a9 19		lda #$19		lda	#25
.8da5		4c 85 96	jmp $9685		jmp	ErrorHandler
.8da8						LoadReadLine:
.8da8		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8daa		20 c4 8d	jsr $8dc4			jsr 	LoadReadCharacter
.8dad		f0 14		beq $8dc3			beq 	_LRLExit 					; eof ?
.8daf		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8db1		90 f5		bcc $8da8			bcc 	LoadReadLine
.8db3						_LRLLoop:
.8db3		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8db6		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8db9		e8		inx				inx
.8dba		20 c4 8d	jsr $8dc4			jsr 	LoadReadCharacter 			; next line
.8dbd		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8dbf		b0 f2		bcs $8db3			bcs 	_LRLLoop
.8dc1		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8dc3						_LRLExit:
.8dc3		60		rts				rts
.8dc4						LoadReadCharacter:
.8dc4		da		phx				phx
.8dc5		5a		phy				phy
.8dc6		ad 6c 07	lda $076c			lda 	LoadEOFFlag 				; already done EOF.
.8dc9		d0 0c		bne $8dd7			bne 	_LRCIsEOF
.8dcb		20 f4 8d	jsr $8df4			jsr 	LoadReadByte 				; read a byte
.8dce		90 09		bcc $8dd9			bcc		_LRCExit 					; read okay.
.8dd0		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8dd2		d0 be		bne $8d92			bne 	CLCloseError
.8dd4		ce 6c 07	dec $076c			dec 	LoadEOFFlag
.8dd7						_LRCIsEOF:
.8dd7		a9 00		lda #$00			lda 	#0
.8dd9						_LRCExit:
.8dd9		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8ddb		d0 02		bne $8ddf			bne 	_LRCNotTab
.8ddd		a9 20		lda #$20			lda 	#' '
.8ddf						_LRCNotTab:
.8ddf		c9 0a		cmp #$0a			cmp 	#$0A
.8de1		d0 02		bne $8de5			bne 	_LRCNotLF
.8de3		a9 0d		lda #$0d			lda 	#$0D
.8de5						_LRCNotLF:
.8de5		7a		ply				ply
.8de6		fa		plx				plx
.8de7		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8de9		60		rts				rts
.8dea						LoadReadByteInit:
.8dea		8d 6e 07	sta $076e			sta     LoadFileStream 				; save stream
.8ded		9c 6f 07	stz $076f			stz     LoadNextCharacter 			; reset buffer
.8df0		9c 70 07	stz $0770			stz     LoadEndCharacter
.8df3		60		rts				rts
.8df4						LoadReadByte:
.8df4		da		phx				phx
.8df5		ae 6f 07	ldx $076f			ldx     LoadNextCharacter 					; all data consumed ?
.8df8		ec 70 07	cpx $0770			cpx     LoadEndCharacter
.8dfb		d0 12		bne $8e0f			bne     _KNLRBGetNextByte
.8dfd		ad 6e 07	lda $076e			lda     LoadFileStream
.8e00		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8e02		20 ee 81	jsr $81ee			jsr     KNLReadBlock 				; read next chunk from the stream
.8e05		b0 0f		bcs $8e16			bcs     _KNLRBError 				; error has occurred on read.
.8e07		8d 70 07	sta $0770			sta     LoadEndCharacter 						; # read is the number available
.8e0a		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8e0c		8e 6f 07	stx $076f			stx     LoadNextCharacter
.8e0f						_KNLRBGetNextByte:
.8e0f		bd 5e 06	lda $065e,x			lda     KNLReadBuffer,x 			; get the next data item
.8e12		ee 6f 07	inc $076f			inc     LoadNextCharacter 					; and advance the index
.8e15		18		clc				clc 								; succeeded
.8e16						_KNLRBError:
.8e16		fa		plx				plx
.8e17		60		rts				rts
.076c						LoadEOFFlag:
>076c								.fill 	1
.076d						BasicFileStream:
>076d								.fill 	1
.076e						LoadFileStream:
>076e								.byte   ?
.076f						LoadNextCharacter:
>076f								.byte   ?
.0770						LoadEndCharacter:
>0770								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8e18						Command_LOCAL:
.8e18		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8e1a		20 26 8e	jsr $8e26			jsr 	LocaliseNextTerm 			; convert term to a local.
.8e1d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1f		c8		iny				iny
.8e20		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e22		f0 f4		beq $8e18			beq 	Command_LOCAL 				; if so, localise another variable.
.8e24		88		dey				dey 								; unpick pre-get
.8e25		60		rts				rts
.8e26						LocaliseNextTerm:
.8e26		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm 				; evaluate the term
.8e29		b5 50		lda $50,x			lda 	NSStatus,x
.8e2b		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8e2d		f0 5c		beq $8e8b			beq		_LNTError
.8e2f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e31		85 36		sta $36				sta 	zTemp0
.8e33		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e35		85 37		sta $37				sta  	zTemp0+1
.8e37		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8e39		29 10		and #$10			and 	#NSBIsString
.8e3b		d0 1e		bne $8e5b			bne 	_LNTPushString
.8e3d		5a		phy				phy
.8e3e		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e40						_LNTPushNumLoop:
.8e40		b1 36		lda ($36),y			lda		(zTemp0),y
.8e42		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e45		c8		iny				iny
.8e46		c0 05		cpy #$05			cpy 	#5
.8e48		d0 f6		bne $8e40			bne 	_LNTPushNumLoop
.8e4a		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e4c		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e4f		a5 37		lda $37				lda 	zTemp0+1
.8e51		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e54		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e56		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e59		7a		ply				ply
.8e5a		60		rts				rts
.8e5b						_LNTPushString:
.8e5b		5a		phy				phy
.8e5c		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e5e		85 38		sta $38				sta 	zTemp1
.8e60		a0 01		ldy #$01			ldy 	#1
.8e62		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e64		85 39		sta $39				sta 	zTemp1+1
.8e66		a0 00		ldy #$00			ldy 	#0 							; output string
.8e68		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8e6a		f0 0a		beq $8e76			beq 	_LNTStringOut
.8e6c						_LNTPushStrLoop:
.8e6c		b1 38		lda ($38),y			lda 	(zTemp1),y
.8e6e		f0 06		beq $8e76			beq 	_LNTStringOut
.8e70		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e73		c8		iny				iny
.8e74		80 f6		bra $8e6c			bra 	_LNTPushStrLoop
.8e76						_LNTStringOut:
.8e76		98		tya				tya									; output length (chars written).
.8e77		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e7a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e7c		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e7f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e81		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e84		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e86		20 b0 b7	jsr $b7b0			jsr 	StackPushByte
.8e89		7a		ply				ply
.8e8a		60		rts				rts
.8e8b						_LNTError:
.8e8b		4c 70 a8	jmp $a870			jmp 	SyntaxError
.8e8e						LocalPopValue:
.8e8e		20 c8 b7	jsr $b7c8			jsr 	StackPopByte
.8e91		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e93		d0 17		bne $8eac			bne 	_LPVString
.8e95		20 c8 b7	jsr $b7c8			jsr 	StackPopByte 				; address
.8e98		85 37		sta $37				sta 	zTemp0+1
.8e9a		20 c8 b7	jsr $b7c8			jsr 	StackPopByte
.8e9d		85 36		sta $36				sta 	zTemp0
.8e9f		5a		phy				phy
.8ea0		a0 04		ldy #$04			ldy 	#4 							; copy back
.8ea2						_LPVNumberCopy:
.8ea2		20 c8 b7	jsr $b7c8			jsr 	StackPopByte
.8ea5		91 36		sta ($36),y			sta 	(zTemp0),y
.8ea7		88		dey				dey
.8ea8		10 f8		bpl $8ea2			bpl 	_LPVNumberCopy
.8eaa		7a		ply				ply 								; and complete
.8eab		60		rts				rts
.8eac						_LPVString:
.8eac		20 c8 b7	jsr $b7c8			jsr 	StackPopByte 				; address of record copied to zTemp0
.8eaf		85 37		sta $37				sta 	zTemp0+1
.8eb1		20 c8 b7	jsr $b7c8			jsr 	StackPopByte
.8eb4		85 36		sta $36				sta 	zTemp0
.8eb6		5a		phy				phy
.8eb7		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8eb9		85 38		sta $38				sta 	zTemp1
.8ebb		a0 01		ldy #$01			ldy 	#1
.8ebd		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ebf		85 39		sta $39				sta 	zTemp1+1
.8ec1		20 c8 b7	jsr $b7c8			jsr 	StackPopByte 				; # chars to get => y
.8ec4		a8		tay				tay
.8ec5		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8ec7		f0 0e		beq $8ed7			beq 	_LPVStringCopied
.8ec9		a9 00		lda #$00			lda 	#0 							; NULL on end
.8ecb		91 38		sta ($38),y			sta 	(zTemp1),y
.8ecd						_LPVStringCopy:
.8ecd		88		dey				dey
.8ece		30 07		bmi $8ed7			bmi 	_LPVStringCopied
.8ed0		20 c8 b7	jsr $b7c8			jsr 	StackPopByte
.8ed3		91 38		sta ($38),y			sta 	(zTemp1),y
.8ed5		80 f6		bra $8ecd			bra 	_LPVStringCopy
.8ed7						_LPVStringCopied:
.8ed7		fa		plx				plx
.8ed8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/memcopy.asm

.8ed9						MCCommand:
.8ed9		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.8edb		48		pha				pha
.8edc		64 01		stz $01				stz 	1
.8ede		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.8ee1		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.8ee3		8d 71 07	sta $0771			sta 	DMAControlByte
.8ee6		20 94 8f	jsr $8f94			jsr 	MCPosition 					; start position
.8ee9		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.8eeb		20 65 8f	jsr $8f65			jsr 	MCCopyAddress
.8eee		a2 08		ldx #$08			ldx 	#8
.8ef0		20 65 8f	jsr $8f65			jsr 	MCCopyAddress
.8ef3		b1 30		lda ($30),y			lda 	(codePtr),y
.8ef5		c8		iny				iny
.8ef6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.8ef8		f0 09		beq $8f03			beq 	_MCSize1D
.8efa		c9 d4		cmp #$d4			cmp 	#KWD_RECT 					; RECT <x>,<y>
.8efc		f0 11		beq $8f0f			beq 	_MCRect2D
.8efe						_MCSyntax:
.8efe		a9 02		lda #$02		lda	#2
.8f00		4c 85 96	jmp $9685		jmp	ErrorHandler
.8f03						_MCSize1D:
.8f03		a2 00		ldx #$00			ldx 	#0 							; get size
.8f05		20 5f a6	jsr $a65f			jsr 	EvaluateInteger
.8f08		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.8f0a		20 65 8f	jsr $8f65			jsr 	MCCopyAddress
.8f0d		80 24		bra $8f33			bra 	_MCDestination
.8f0f						_MCRect2D:
.8f0f		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.8f11		20 82 8f	jsr $8f82			jsr 	MCEvalCopyData16
.8f14		20 74 96	jsr $9674			jsr 	CheckComma
.8f17		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.8f19		20 82 8f	jsr $8f82			jsr 	MCEvalCopyData16
.8f1c		a9 b8		lda #$b8			lda 	#KWD_BY 					; BY keyword.
.8f1e		20 7c 96	jsr $967c			jsr 	CheckNextA
.8f21		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.8f23		20 82 8f	jsr $8f82			jsr 	MCEvalCopyData16
.8f26		a2 12		ldx #$12			ldx 	#$12
.8f28		20 89 8f	jsr $8f89			jsr 	MCCopyData16
.8f2b		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.8f2e		09 02		ora #$02			ora 	#$02
.8f30		8d 71 07	sta $0771			sta 	DMAControlByte
.8f33						_MCDestination:
.8f33		b1 30		lda ($30),y			lda 	(codePtr),y
.8f35		c8		iny				iny
.8f36		c9 cf		cmp #$cf			cmp 	#KWD_POKE 					; is it POKE n
.8f38		f0 0e		beq $8f48			beq 	_MCDestPoke
.8f3a		c9 da		cmp #$da			cmp 	#KWD_TO 					; is it TO n
.8f3c		d0 c0		bne $8efe			bne 	_MCSyntax
.8f3e		20 94 8f	jsr $8f94			jsr 	MCPosition 					; get target address
.8f41		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.8f43		20 65 8f	jsr $8f65			jsr 	MCCopyAddress
.8f46		80 0e		bra $8f56			bra 	_MCDoDMA 					; and we can go.
.8f48						_MCDestPoke:
.8f48		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; POKE what
.8f4b		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.8f4e		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.8f51		09 04		ora #$04			ora 	#$04
.8f53		8d 71 07	sta $0771			sta 	DMAControlByte
.8f56						_MCDoDMA:
.8f56		ad 71 07	lda $0771			lda 	DMAControlByte 				; set the DMA Control byte to go !
.8f59		8d 00 df	sta $df00			sta 	$DF00
.8f5c						_MCWaitBUSD:
.8f5c		ad 01 df	lda $df01			lda 	$DF01
.8f5f		30 fb		bmi $8f5c			bmi 	_MCWaitBUSD
.8f61		68		pla				pla 								; restore I/O.
.8f62		85 01		sta $01				sta 	1
.8f64		60		rts				rts
.8f65						MCCopyAddress:
.8f65		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.8f67		29 fc		and #$fc			and 	#$FC
.8f69		05 70		ora $70				ora 	NSMantissa3
.8f6b		d0 10		bne $8f7d			bne 	_MCRange
.8f6d		a5 58		lda $58				lda 	NSMantissa0
.8f6f		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f72		a5 60		lda $60				lda 	NSMantissa1
.8f74		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f77		a5 68		lda $68				lda 	NSMantissa2
.8f79		9d 02 df	sta $df02,x			sta 	$DF02,x
.8f7c		60		rts				rts
.8f7d						_MCRange:
.8f7d		a9 04		lda #$04		lda	#4
.8f7f		4c 85 96	jmp $9685		jmp	ErrorHandler
.8f82						MCEvalCopyData16:
.8f82		da		phx				phx
.8f83		a2 00		ldx #$00			ldx 	#0
.8f85		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.8f88		fa		plx				plx
.8f89						MCCopyData16:
.8f89		a5 58		lda $58				lda 	NSMantissa0
.8f8b		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f8e		a5 60		lda $60				lda 	NSMantissa1
.8f90		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f93		60		rts				rts
.8f94						MCPosition:
.8f94		a2 00		ldx #$00			ldx 	#0 							; get start address.
.8f96		b1 30		lda ($30),y			lda 	(codePtr),y
.8f98		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8f9a		f0 04		beq $8fa0			beq 	_MCPAt
.8f9c		20 5f a6	jsr $a65f			jsr 	EvaluateInteger
.8f9f		60		rts				rts
.8fa0						_MCPAt:
.8fa0		c8		iny				iny
.8fa1		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; X position
.8fa4		48		pha				pha
.8fa5		20 74 96	jsr $9674			jsr 	CheckComma
.8fa8		e8		inx				inx
.8fa9		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; Y position
.8fac		ca		dex				dex
.8fad		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.8faf		64 58		stz $58				stz 	NSMantissa0
.8fb1		64 68		stz $68				stz 	NSMantissa2
.8fb3		64 70		stz $70				stz 	NSMantissa3
.8fb5		46 60		lsr $60				lsr 	NSMantissa1
.8fb7		66 58		ror $58				ror 	NSMantissa0
.8fb9		46 60		lsr $60				lsr 	NSMantissa1
.8fbb		66 58		ror $58				ror 	NSMantissa0
.8fbd		68		pla				pla
.8fbe		18		clc				clc
.8fbf		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.8fc1		85 58		sta $58				sta 	NSMantissa0
.8fc3		a5 60		lda $60				lda 	NSMantissa1
.8fc5		65 59		adc $59				adc 	NSMantissa0+1
.8fc7		85 60		sta $60				sta 	NSMantissa1
.8fc9		90 02		bcc $8fcd			bcc 	_MCPNoCarry
.8fcb		e6 68		inc $68				inc 	NSMantissa2
.8fcd						_MCPNoCarry:
.8fcd		ad 9b 07	lda $079b			lda 	gxBasePage
.8fd0		85 69		sta $69				sta 	NSMantissa2+1
.8fd2		64 59		stz $59				stz 	NSMantissa0+1
.8fd4		64 61		stz $61				stz 	NSMantissa1+1
.8fd6		64 71		stz $71				stz 	NSMantissa3+1
.8fd8		a2 01		ldx #$01			ldx 	#1
.8fda		20 0b a7	jsr $a70b			jsr 	NSMShiftRight
.8fdd		20 0b a7	jsr $a70b			jsr 	NSMShiftRight
.8fe0		20 0b a7	jsr $a70b			jsr 	NSMShiftRight
.8fe3		a2 00		ldx #$00			ldx 	#0
.8fe5		20 7f 99	jsr $997f			jsr 	AddTopTwoStack
.8fe8		60		rts				rts
.0771						DMAControlByte:
>0771								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8fe9						NewCommand:
.8fe9		20 ef 8f	jsr $8fef			jsr 	NewProgram 					; does the actual NEW.
.8fec		4c b9 85	jmp $85b9			jmp 	WarmStart 					; and warm starts straight away.
.8fef						NewProgram:
.8fef		20 5f ae	jsr $ae5f			jsr 	MemoryNew
.8ff2		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8ff5		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear everything.
.8ff8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8ff9						PokeBCommand:
.8ff9		a9 01		lda #$01			lda 	#1
.8ffb		80 0c		bra $9009			bra 	PokeCommand
.8ffd						PokeWCommand:
.8ffd		a9 02		lda #$02			lda 	#2
.8fff		80 08		bra $9009			bra 	PokeCommand
.9001						PokeLCommand:
.9001		a9 03		lda #$03			lda 	#3
.9003		80 04		bra $9009			bra 	PokeCommand
.9005						PokeDCommand:
.9005		a9 04		lda #$04			lda 	#4
.9007		80 00		bra $9009			bra 	PokeCommand
.9009						PokeCommand:
.9009		48		pha				pha 								; save count on stack
.900a		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.900c		20 72 a6	jsr $a672			jsr		Evaluate16BitInteger 		; address
.900f		20 74 96	jsr $9674			jsr 	CheckComma
.9012		e8		inx				inx
.9013		20 5f a6	jsr $a65f			jsr		EvaluateInteger 			; data
.9016		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.9018		85 36		sta $36				sta 	zTemp0
.901a		a5 60		lda $60				lda 	NSMantissa1
.901c		85 37		sta $37				sta 	zTemp0+1
.901e		68		pla				pla 								; count -> zTemp1
.901f		85 38		sta $38				sta 	zTemp1
.9021		5a		phy				phy 								; save Y position.
.9022		a0 00		ldy #$00			ldy 	#0 							; index to write
.9024		a2 00		ldx #$00			ldx 	#0 							; index to read
.9026						_PCLoop:
.9026		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.9028		91 36		sta ($36),y			sta 	(zTemp0),y
.902a		c8		iny				iny 								; next byte to write
.902b		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.902c		18		clc				clc
.902d		69 08		adc #$08			adc 	#MathStackSize
.902f		aa		tax				tax
.9030		c6 38		dec $38				dec 	zTemp1 						; done them all
.9032		d0 f2		bne $9026			bne 	_PCLoop
.9034		7a		ply				ply 								; restore position.
.9035		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.9036						CallProcedure:
.9036		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9038		b1 30		lda ($30),y			lda 	(codePtr),y
.903a		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.903c		f0 0c		beq $904a			beq 	_CPEndParam
.903e						_CPParamLoop:
.903e		20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get parameter onto stack
.9041		e8		inx				inx 								; bump next stack
.9042		b1 30		lda ($30),y			lda 	(codePtr),y
.9044		c8		iny				iny
.9045		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9047		f0 f5		beq $903e			beq 	_CPParamLoop
.9049		88		dey				dey 								; unpick.
.904a						_CPEndParam:
.904a		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.904d		c8		iny				iny									; skip right bracket
.904e		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9050		20 d1 b7	jsr $b7d1			jsr 	StackOpen
.9053		20 16 b8	jsr $b816			jsr 	STKSaveCodePosition 		; save loop position
.9056		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9058		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.905a		a5 60		lda $60				lda 	NSMantissa1
.905c		85 37		sta $37				sta 	zTemp0+1
.905e		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9060		b2 36		lda ($36)			lda 	(zTemp0)
.9062		85 30		sta $30				sta 	safePtr
.9064		b1 36		lda ($36),y			lda 	(zTemp0),y
.9066		85 31		sta $31				sta 	safePtr+1
.9068		c8		iny				iny
.9069		b1 36		lda ($36),y			lda 	(zTemp0),y
.906b		85 32		sta $32				sta 	safePtr+2
.906d		c8		iny				iny
.906e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9070		85 33		sta $33				sta 	safePtr+3
.9072		c8		iny				iny 								; get Y offset -> Y
.9073		b1 36		lda ($36),y			lda 	(zTemp0),y
.9075		a8		tay				tay
.9076		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9078		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.907b		f0 13		beq $9090			beq 	_ParamExit 					; if so, exit.
.907d						_ParamExtract:
.907d		ca		dex				dex 								; put a local term on the level before
.907e		20 26 8e	jsr $8e26			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9081		20 25 8c	jsr $8c25			jsr 	AssignVariable 				; assign stacked value to the variable.
.9084		e8		inx				inx 								; advance to next parameter to do.
.9085		e8		inx				inx
.9086		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9089		f0 05		beq $9090			beq 	_ParamExit
.908b		20 74 96	jsr $9674			jsr 	CheckComma 					; comma seperating parameters
.908e		80 ed		bra $907d			bra 	_ParamExtract
.9090						_ParamExit:
.9090		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; check )
.9093		60		rts				rts 								; and continue from here
.9094						Command_ENDPROC:
.9094		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9096		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9098		20 fe b7	jsr $b7fe			jsr 	StackCheckFrame
.909b		20 27 b8	jsr $b827			jsr 	STKLoadCodePosition 		; restore code position
.909e		20 f0 b7	jsr $b7f0			jsr 	StackClose
.90a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.90a2						Command_Read:
.90a2		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.90a4		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm
.90a7		b5 50		lda $50,x			lda 	NSStatus,x
.90a9		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.90ab		f0 4f		beq $90fc			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.90ad		20 45 91	jsr $9145			jsr 	SwapDataCodePtrs 			; swap code and data
.90b0		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.90b3		d0 25		bne $90da			bne 	_CRContinueData  			; forward for the next one.
.90b5		b2 30		lda ($30)			lda 	(codePtr)
.90b7		f0 1c		beq $90d5			beq 	_CRNoData
.90b9						_CRKeepSearching:
.90b9		a9 be		lda #$be			lda 	#KWD_DATA 					; scan for instruction
.90bb		a2 80		ldx #$80			ldx 	#KWC_EOL
.90bd		20 6d 95	jsr $956d			jsr 	ScanForward
.90c0		c9 be		cmp #$be			cmp 	#KWD_DATA 					; found data ?
.90c2		f0 16		beq $90da			beq 	_CRHaveData 				; found it
.90c4		18		clc				clc
.90c5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90c7		65 30		adc $30				adc 	codePtr
.90c9		85 30		sta $30				sta 	codePtr
.90cb		90 02		bcc $90cf			bcc 	_CREExit
.90cd		e6 31		inc $31				inc 	codePtr+1 					; carry
.90cf						_CREExit:
.90cf		a0 03		ldy #$03			ldy 	#3 							; start of line.
.90d1		b2 30		lda ($30)			lda 	(codePtr)
.90d3		d0 e4		bne $90b9			bne 	_CRKeepSearching
.90d5						_CRNoData:
.90d5		a9 0b		lda #$0b		lda	#11
.90d7		4c 85 96	jmp $9685		jmp	ErrorHandler
.90da						_CRHaveData:
.90da						_CRContinueData:
.90da		a2 01		ldx #$01			ldx 	#1
.90dc		20 37 a6	jsr $a637			jsr 	EvaluateValue 				; evaluate value into slot # 1
.90df		ca		dex				dex
.90e0		20 25 8c	jsr $8c25			jsr		AssignVariable 				; do the assignment
.90e3		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.90e6		b1 30		lda ($30),y			lda 	(codePtr),y
.90e8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.90ea		d0 04		bne $90f0			bne 	_CRSwapBack
.90ec		c8		iny				iny 								; consume comma
.90ed		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.90f0						_CRSwapBack:
.90f0		20 45 91	jsr $9145			jsr 	SwapDataCodePtrs			; swap them back.
.90f3		b1 30		lda ($30),y			lda 	(codePtr),y
.90f5		c8		iny				iny
.90f6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90f8		f0 a8		beq $90a2			beq 	Command_Read 				; if so go round again.
.90fa		88		dey				dey 								; unpick get.
.90fb		60		rts				rts
.90fc						_CRSyntax:
.90fc		4c 70 a8	jmp $a870			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.90ff						RemCommand:
.90ff		b1 30		lda ($30),y			lda 	(codePtr),y
.9101		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9103		d0 06		bne $910b			bne 	_RMExit
.9105		c8		iny				iny 								; point to offset
.9106		98		tya				tya 								; A = offset position
.9107		38		sec				sec 								; add size +1 hence SEC
.9108		71 30		adc ($30),y			adc 	(codePtr),y
.910a		a8		tay				tay 								; make current position.
.910b						_RMExit:
.910b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.910c						Command_REPEAT:
.910c		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.910e		20 d1 b7	jsr $b7d1			jsr 	StackOpen
.9111		20 16 b8	jsr $b816			jsr 	STKSaveCodePosition 		; save loop position
.9114		60		rts				rts
.9115						Command_UNTIL:
.9115		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9117		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9119		20 fe b7	jsr $b7fe			jsr 	StackCheckFrame
.911c		a2 00		ldx #$00			ldx 	#0
.911e		20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; work out the number
.9121		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; check if zero
.9124		f0 04		beq $912a			beq 	_CULoopBack 				; if so keep looping
.9126		20 f0 b7	jsr $b7f0			jsr 	StackClose		 			; return
.9129		60		rts				rts
.912a						_CULoopBack:
.912a		20 27 b8	jsr $b827			jsr 	STKLoadCodePosition 		; loop back
.912d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.912e						Command_Restore:
.912e		20 45 91	jsr $9145			jsr 	SwapDataCodePtrs 			; swap code and data
.9131		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9133		85 30		sta $30				sta 	codePtr
.9135		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9137		85 31		sta $31				sta 	codePtr+1
.9139		20 45 91	jsr $9145			jsr 	SwapDataCodePtrs 			; put them back
.913c		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.913e		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.9141		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.9144		60		rts				rts
.9145						SwapDataCodePtrs:
.9145		da		phx				phx
.9146		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9148						_SDCPLoop:
.9148		b5 30		lda $30,x			lda 	safePtr,x
.914a		48		pha				pha
.914b		bd 13 04	lda $0413,x			lda 	dataPointer,x
.914e		95 30		sta $30,x			sta 	safePtr,x
.9150		68		pla				pla
.9151		9d 13 04	sta $0413,x			sta 	dataPointer,x
.9154		ca		dex				dex
.9155		10 f1		bpl $9148			bpl 	_SDCPLoop
.9157		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.915a		8c 17 04	sty $0417			sty 	dataPointer+4
.915d		a8		tay				tay
.915e		fa		plx				plx
.915f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9160						EOLCommand:
.9160		18		clc				clc
.9161		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9163		65 30		adc $30				adc 	codePtr
.9165		85 30		sta $30				sta 	codePtr
.9167		90 02		bcc $916b			bcc 	_CREExit
.9169		e6 31		inc $31				inc 	codePtr+1 					; carry
.916b						_CREExit:
.916b		80 18		bra $9185			bra 	RunNewLine
.916d						CommandRUNOptLoad:
.916d		b1 30		lda ($30),y			lda 	(codePtr),y
.916f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.9171		f0 07		beq $917a			beq 	RunCurrentProgram
.9173		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9175		f0 03		beq $917a			beq 	RunCurrentProgram
.9177		20 4c 8d	jsr $8d4c			jsr 	LoadFile 					; load expected name file.
.917a						RunCurrentProgram:
.917a		20 71 87	jsr $8771			jsr 	ClearCommand 				; clear variable/stacks/etc.
.917d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.917f		85 30		sta $30				sta 	codePtr
.9181		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9183		85 31		sta $31				sta 	codePtr+1
.9185						RunNewLine:
.9185		b2 30		lda ($30)			lda 	(codePtr)
.9187		f0 74		beq $91fd			beq 	CRNoProgram         		; no then END.
.9189		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.918b		9a		txs				txs
.918c						RUNCodePointerLine:
.918c		a0 02		ldy #$02			ldy 	#2 							; start of program
.918e						_CRIncMainLoop:
.918e		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.9190		f0 03		beq $9195			beq 	_NoEvents					; if zero, skip with Z flag set.
.9192		20 41 81	jsr $8141			jsr 	ProcessEvents
.9195						_NoEvents:
.9195		d0 61		bne $91f8			bne 	_CRBreak
.9197		a5 01		lda $01				lda 	1 							; save I/O 0
.9199		48		pha				pha
.919a		64 01		stz $01				stz 	1 							; access I/O Page 0
.919c		38		sec				sec 								; calculate timer - LastTick
.919d		ad 59 d6	lda $d659			lda 	$D659
.91a0		cd 73 07	cmp $0773			cmp 	LastTick
.91a3		f0 06		beq $91ab			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.91a5		8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.91a8		20 1d a7	jsr $a71d			jsr 	TickHandler 							; go do the code.
.91ab						_NoFireTick:
.91ab		68		pla				pla 								; restore I/O 0
.91ac		85 01		sta $01				sta 	1
.91ae						_CRNoBreakCheck:
.91ae		c8		iny				iny									; next token
.91af						_CRMainLoop:
.91af		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.91b2		b1 30		lda ($30),y			lda 	(codePtr),y
.91b4		10 10		bpl $91c6			bpl 	_CRNotKeyword				; not a token.
.91b6		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.91b8		b0 04		bcs $91be			bcs 	_CRIsKeyword
.91ba		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.91bc		b0 34		bcs $91f2			bcs		_CRSyntaxError
.91be						_CRIsKeyword:
.91be		c8		iny				iny 								; consume command
.91bf		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.91c0		aa		tax				tax 								; put in X for vector jump
.91c1		20 f5 91	jsr $91f5			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.91c4		80 e9		bra $91af			bra 	_CRMainLoop 				; and loop round
.91c6						_CRNotKeyword:
.91c6		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.91c8		f0 c4		beq $918e			beq 	_CRIncMainLoop
.91ca		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.91cc		90 05		bcc $91d3			bcc 	_CRNotVariable
.91ce						_CRGoLet:
.91ce		20 ec 8b	jsr $8bec			jsr 	LetCommand
.91d1		80 dc		bra $91af			bra 	_CRMainLoop
.91d3						_CRNotVariable:
.91d3		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; handle @
.91d5		f0 f7		beq $91ce			beq 	_CRGoLet
.91d7		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.91d9		f0 f3		beq $91ce			beq 	_CRGoLet
.91db		c9 21		cmp #$21			cmp 	#KWD_PLING
.91dd		f0 ef		beq $91ce			beq 	_CRGoLet
.91df		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.91e1		f0 09		beq $91ec			beq 	_CRGoRem
.91e3		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.91e5		d0 0b		bne $91f2			bne 	_CRSyntaxError
.91e7		20 2b 84	jsr $842b			jsr 	LabelHere
.91ea		80 c3		bra $91af			bra 	_CRMainLoop
.91ec						_CRGoRem:
.91ec		c8		iny				iny
.91ed		20 ff 90	jsr $90ff			jsr 	RemCommand
.91f0		80 bd		bra $91af			bra 	_CRMainLoop
.91f2						_CRSyntaxError:
.91f2		4c 70 a8	jmp $a870			jmp 	SyntaxError
.91f5						_CRCallVector0:
.91f5		7c 94 92	jmp ($9294,x)			jmp 	(VectorSet0,x)
.91f8						_CRBreak:
.91f8		a9 01		lda #$01		lda	#1
.91fa		4c 85 96	jmp $9685		jmp	ErrorHandler
.91fd						CRNoProgram:
.91fd		4c 82 89	jmp $8982			jmp 	EndCommand
.9200						Shift1Command:
.9200		b1 30		lda ($30),y			lda 	(codePtr),y
.9202		c8		iny				iny
.9203		0a		asl a				asl 	a
.9204		aa		tax				tax
.9205		7c 4a 93	jmp ($934a,x)			jmp 	(VectorSet1,x)
.9208						Shift2Command:
.9208		b1 30		lda ($30),y			lda 	(codePtr),y
.920a		c8		iny				iny
.920b		0a		asl a				asl 	a
.920c		aa		tax				tax
.920d		7c 96 93	jmp ($9396,x)			jmp 	(VectorSet2,x)
.9210						Unused1:
.9210						Unused2:
.9210						Unused3:
.9210						Unused4:
.9210		4c 70 a8	jmp $a870			jmp 	SyntaxError
>9213								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9214						VectorSetPunc:
>9214		3d 99					.word	ShiftLeft                        ; $00 <<
>9216		28 97					.word	BinaryCompareLessEqual           ; $01 <=
>9218		1e 97					.word	BinaryCompareNotEqual            ; $02 <>
>921a		70 a8					.word	SyntaxError                      ; $03 !!3
>921c		70 a8					.word	SyntaxError                      ; $04 ><
>921e		32 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>9220		40 99					.word	ShiftRight                       ; $06 >>
>9222		70 a8					.word	SyntaxError                      ; $07 !!7
>9224		70 a8					.word	SyntaxError                      ; $08 !!8
>9226		70 a8					.word	SyntaxError                      ; $09 !!9
>9228		70 a8					.word	SyntaxError                      ; $0a !!10
>922a		70 a8					.word	SyntaxError                      ; $0b !!11
>922c		70 a8					.word	SyntaxError                      ; $0c !!12
>922e		70 a8					.word	SyntaxError                      ; $0d !!13
>9230		70 a8					.word	SyntaxError                      ; $0e !!14
>9232		70 a8					.word	SyntaxError                      ; $0f !!15
>9234		70 a8					.word	SyntaxError                      ; $10 @
>9236		70 a8					.word	SyntaxError                      ; $11 !!17
>9238		70 a8					.word	SyntaxError                      ; $12 !!18
>923a		70 a8					.word	SyntaxError                      ; $13 [
>923c		e9 97					.word	IntegerDivide                    ; $14 \
>923e		70 a8					.word	SyntaxError                      ; $15 ]
>9240		7b 9a					.word	EorInteger                       ; $16 ^
>9242		70 a8					.word	SyntaxError                      ; $17 _
>9244		70 a8					.word	SyntaxError                      ; $18 `
>9246		70 a8					.word	SyntaxError                      ; $19 !!25
>9248		70 a8					.word	SyntaxError                      ; $1a !!26
>924a		70 a8					.word	SyntaxError                      ; $1b {
>924c		46 9a					.word	OraInteger                       ; $1c |
>924e		70 a8					.word	SyntaxError                      ; $1d }
>9250		70 a8					.word	SyntaxError                      ; $1e ~
>9252		70 a8					.word	SyntaxError                      ; $1f <7F>
>9254		70 a8					.word	SyntaxError                      ; $20
>9256		b0 9a					.word	WordIndirect                     ; $21 !
>9258		70 a8					.word	SyntaxError                      ; $22 "
>925a		70 a8					.word	SyntaxError                      ; $23 #
>925c		70 a8					.word	SyntaxError                      ; $24 $
>925e		2a 98					.word	IntegerModulus                   ; $25 %
>9260		11 9a					.word	AndInteger                       ; $26 &
>9262		70 a8					.word	SyntaxError                      ; $27 '
>9264		70 a8					.word	SyntaxError                      ; $28 (
>9266		70 a8					.word	SyntaxError                      ; $29 )
>9268		98 98					.word	MulInteger                       ; $2a *
>926a		b3 99					.word	AddInteger                       ; $2b +
>926c		70 a8					.word	SyntaxError                      ; $2c ,
>926e		ec 99					.word	SubInteger                       ; $2d -
>9270		70 a8					.word	SyntaxError                      ; $2e .
>9272		6a 9c					.word	FDivideCommand                   ; $2f /
>9274		70 a8					.word	SyntaxError                      ; $30 0
>9276		70 a8					.word	SyntaxError                      ; $31 1
>9278		70 a8					.word	SyntaxError                      ; $32 2
>927a		70 a8					.word	SyntaxError                      ; $33 3
>927c		70 a8					.word	SyntaxError                      ; $34 4
>927e		70 a8					.word	SyntaxError                      ; $35 5
>9280		70 a8					.word	SyntaxError                      ; $36 6
>9282		70 a8					.word	SyntaxError                      ; $37 7
>9284		70 a8					.word	SyntaxError                      ; $38 8
>9286		70 a8					.word	SyntaxError                      ; $39 9
>9288		70 a8					.word	SyntaxError                      ; $3a :
>928a		70 a8					.word	SyntaxError                      ; $3b ;
>928c		0a 97					.word	BinaryCompareLess                ; $3c <
>928e		00 97					.word	BinaryCompareEqual               ; $3d =
>9290		14 97					.word	BinaryCompareGreater             ; $3e >
>9292		d2 9a					.word	ByteIndirect                     ; $3f ?
.9294						VectorSet0:
>9294		60 91					.word	EOLCommand                       ; $80 !0:EOF
>9296		00 92					.word	Shift1Command                    ; $81 !1:SH1
>9298		08 92					.word	Shift2Command                    ; $82 !2:SH2
>929a		54 a1					.word	AbsUnary                         ; $83 ABS(
>929c		62 a1					.word	AllocUnary                       ; $84 ALLOC(
>929e		d2 a1					.word	AscUnary                         ; $85 ASC(
>92a0		98 a3					.word	ChrUnary                         ; $86 CHR$(
>92a2		f3 ac					.word	UnaryEvent                       ; $87 EVENT(
>92a4		fc 96					.word	UnaryFalse                       ; $88 FALSE
>92a6		df a1					.word	FracUnary                        ; $89 FRAC(
>92a8		28 a4					.word	ChrGet                           ; $8a GET$(
>92aa		04 a4					.word	AscGet                           ; $8b GET(
>92ac		ae a3					.word	UnaryGetDate                     ; $8c GETDATE$(
>92ae		aa a3					.word	UnaryGetTime                     ; $8d GETTIME$(
>92b0		7d ac					.word	UnaryHit                         ; $8e HIT(
>92b2		2f a4					.word	ChrInkey                         ; $8f INKEY$(
>92b4		1d a4					.word	AscInkey                         ; $90 INKEY(
>92b6		f4 a1					.word	IntUnary                         ; $91 INT(
>92b8		57 a3					.word	IsValUnary                       ; $92 ISVAL(
>92ba		48 a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>92bc		6c a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>92be		77 ad					.word	UnaryJoyB                        ; $95 JOYB(
>92c0		50 ad					.word	UnaryJoyX                        ; $96 JOYX(
>92c2		53 ad					.word	UnaryJoyY                        ; $97 JOYY(
>92c4		ab a5					.word	Unary_Left                       ; $98 LEFT$(
>92c6		05 a2					.word	LenUnary                         ; $99 LEN(
>92c8		23 a2					.word	Unary_Max                        ; $9a MAX(
>92ca		cd a5					.word	Unary_Mid                        ; $9b MID$(
>92cc		1f a2					.word	Unary_Min                        ; $9c MIN(
>92ce		6e a2					.word	Unary_Not                        ; $9d NOT(
>92d0		81 a2					.word	PeekByteUnary                    ; $9e PEEK(
>92d2		8d a2					.word	PeekDUnary                       ; $9f PEEKD(
>92d4		89 a2					.word	PeekLUnary                       ; $a0 PEEKL(
>92d6		85 a2					.word	PeekWUnary                       ; $a1 PEEKW(
>92d8		2e b7					.word	UnaryPlaying                     ; $a2 PLAYING(
>92da		ba a2					.word	Unary_Random                     ; $a3 RANDOM(
>92dc		b8 a5					.word	Unary_Right                      ; $a4 RIGHT$(
>92de		d4 a2					.word	Unary_Rnd                        ; $a5 RND(
>92e0		2f a3					.word	SgnUnary                         ; $a6 SGN(
>92e2		ea a4					.word	SpcUnary                         ; $a7 SPC(
>92e4		05 a5					.word	Unary_Str                        ; $a8 STR$(
>92e6		89 ad					.word	UnaryTimer                       ; $a9 TIMER(
>92e8		f1 96					.word	UnaryTrue                        ; $aa TRUE
>92ea		4d a3					.word	ValUnary                         ; $ab VAL(
>92ec		85 89					.word	ForCommand                       ; $ac FOR
>92ee		c8 8a					.word	IfCommand                        ; $ad IF
>92f0		10 92					.word	Unused1                          ; $ae PROC
>92f2		0c 91					.word	Command_REPEAT                   ; $af REPEAT
>92f4		3d 96					.word	Command_WHILE                    ; $b0 WHILE
>92f6		f1 8a					.word	EndIf                            ; $b1 ENDIF
>92f8		94 90					.word	Command_ENDPROC                  ; $b2 ENDPROC
>92fa		37 8a					.word	NextCommand                      ; $b3 NEXT
>92fc		10 92					.word	Unused4                          ; $b4 THEN
>92fe		15 91					.word	Command_UNTIL                    ; $b5 UNTIL
>9300		5e 96					.word	Command_WEND                     ; $b6 WEND
>9302		70 a8					.word	SyntaxError                      ; $b7 AT
>9304		70 a8					.word	SyntaxError                      ; $b8 BY
>9306		3c 87					.word	CallCommand                      ; $b9 CALL
>9308		31 aa					.word	CircleCommand                    ; $ba CIRCLE
>930a		71 87					.word	ClearCommand                     ; $bb CLEAR
>930c		70 a8					.word	SyntaxError                      ; $bc COLOR
>930e		70 a8					.word	SyntaxError                      ; $bd COLOUR
>9310		d4 87					.word	Command_Data                     ; $be DATA
>9312		dc 87					.word	DimCommand                       ; $bf DIM
>9314		10 92					.word	Unused3                          ; $c0 DOWNTO
>9316		ea 8a					.word	ElseCode                         ; $c1 ELSE
>9318		70 a8					.word	SyntaxError                      ; $c2 FROM
>931a		50 ac					.word	GfxCommand                       ; $c3 GFX
>931c		70 a8					.word	SyntaxError                      ; $c4 HERE
>931e		5a aa					.word	ImageCommand                     ; $c5 IMAGE
>9320		ec 8b					.word	LetCommand                       ; $c6 LET
>9322		ac aa					.word	LineCommand                      ; $c7 LINE
>9324		18 8e					.word	Command_LOCAL                    ; $c8 LOCAL
>9326		d9 8e					.word	MCCommand                        ; $c9 MEMCOPY
>9328		70 a8					.word	SyntaxError                      ; $ca OFF
>932a		70 a8					.word	SyntaxError                      ; $cb ON
>932c		70 a8					.word	SyntaxError                      ; $cc OUTLINE
>932e		a1 ac					.word	PaletteCommand                   ; $cd PALETTE
>9330		a5 aa					.word	PlotCommand                      ; $ce PLOT
>9332		f9 8f					.word	PokeBCommand                     ; $cf POKE
>9334		05 90					.word	PokeDCommand                     ; $d0 POKED
>9336		01 90					.word	PokeLCommand                     ; $d1 POKEL
>9338		fd 8f					.word	PokeWCommand                     ; $d2 POKEW
>933a		a2 90					.word	Command_Read                     ; $d3 READ
>933c		2d aa					.word	RectangleCommand                 ; $d4 RECT
>933e		ff 90					.word	RemCommand                       ; $d5 REM
>9340		70 a8					.word	SyntaxError                      ; $d6 SOLID
>9342		4a b7					.word	SoundCommand                     ; $d7 SOUND
>9344		3c aa					.word	SpriteCommand                    ; $d8 SPRITE
>9346		76 aa					.word	TextCommand                      ; $d9 TEXT
>9348		10 92					.word	Unused2                          ; $da TO
.934a						VectorSet1:
>934a		70 a8					.word	SyntaxError                      ; $80 !0:EOF
>934c		70 a8					.word	SyntaxError                      ; $81 !1:SH1
>934e		70 a8					.word	SyntaxError                      ; $82 !2:SH2
>9350		ee 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>9352		0a 86					.word	AssertCommand                    ; $84 ASSERT
>9354		f0 ab					.word	BitmapCtrl                       ; $85 BITMAP
>9356		1a 86					.word	Command_BLoad                    ; $86 BLOAD
>9358		ba 86					.word	Command_BSave                    ; $87 BSAVE
>935a		cc 87					.word	ClearScreen                      ; $88 CLS
>935c		f7 8a					.word	Command_CPrint                   ; $89 CPRINT
>935e		99 88					.word	Command_Dir                      ; $8a DIR
>9360		69 89					.word	BootDOS                          ; $8b DOS
>9362		7b 89					.word	Command_Drive                    ; $8c DRIVE
>9364		82 89					.word	EndCommand                       ; $8d END
>9366		02 b7					.word	Explode                          ; $8e EXPLODE
>9368		70 a8					.word	SyntaxError                      ; $8f GO
>936a		90 8a					.word	Command_GOSUB                    ; $90 GOSUB
>936c		ae 8a					.word	GotoCommand                      ; $91 GOTO
>936e		70 a8					.word	SyntaxError                      ; $92 HIMEM
>9370		f2 8a					.word	Command_Input                    ; $93 INPUT
>9372		3c 8c					.word	Command_List                     ; $94 LIST
>9374		46 8d					.word	Command_Load                     ; $95 LOAD
>9376		e9 8f					.word	NewCommand                       ; $96 NEW
>9378		de b6					.word	PingCommand                      ; $97 PING
>937a		fe 8a					.word	Command_Print                    ; $98 PRINT
>937c		2e 91					.word	Command_Restore                  ; $99 RESTORE
>937e		a0 8a					.word	Command_RETURN                   ; $9a RETURN
>9380		6d 91					.word	CommandRUNOptLoad                ; $9b RUN
>9382		1e 94					.word	Command_Save                     ; $9c SAVE
>9384		a2 94					.word	CommandSetDate                   ; $9d SETDATE
>9386		a6 94					.word	CommandSetTime                   ; $9e SETTIME
>9388		f6 b6					.word	ShootCommand                     ; $9f SHOOT
>938a		35 ac					.word	SpritesCtrl                      ; $a0 SPRITES
>938c		16 95					.word	StopCommand                      ; $a1 STOP
>938e		e3 95					.word	Command_VERIFY                   ; $a2 VERIFY
>9390		ea ac					.word	XGoCommand                       ; $a3 XGO
>9392		e1 ac					.word	XLoadCommand                     ; $a4 XLOAD
>9394		ea b6					.word	ZapCommand                       ; $a5 ZAP
.9396						VectorSet2:
>9396		70 a8					.word	SyntaxError                      ; $80 !0:EOF
>9398		70 a8					.word	SyntaxError                      ; $81 !1:SH1
>939a		70 a8					.word	SyntaxError                      ; $82 !2:SH2
>939c		2f a7					.word	Assemble_adc                     ; $83 ADC
>939e		27 a7					.word	Assemble_and                     ; $84 AND
>93a0		43 a7					.word	Assemble_asl                     ; $85 ASL
>93a2		ad a7					.word	Assemble_bcc                     ; $86 BCC
>93a4		b1 a7					.word	Assemble_bcs                     ; $87 BCS
>93a6		b9 a7					.word	Assemble_beq                     ; $88 BEQ
>93a8		70 a7					.word	Assemble_bit                     ; $89 BIT
>93aa		a1 a7					.word	Assemble_bmi                     ; $8a BMI
>93ac		b5 a7					.word	Assemble_bne                     ; $8b BNE
>93ae		9d a7					.word	Assemble_bpl                     ; $8c BPL
>93b0		bd a7					.word	Assemble_bra                     ; $8d BRA
>93b2		c1 a7					.word	Assemble_brk                     ; $8e BRK
>93b4		a5 a7					.word	Assemble_bvc                     ; $8f BVC
>93b6		a9 a7					.word	Assemble_bvs                     ; $90 BVS
>93b8		c9 a7					.word	Assemble_clc                     ; $91 CLC
>93ba		1d a8					.word	Assemble_cld                     ; $92 CLD
>93bc		dd a7					.word	Assemble_cli                     ; $93 CLI
>93be		0d a8					.word	Assemble_clv                     ; $94 CLV
>93c0		3b a7					.word	Assemble_cmp                     ; $95 CMP
>93c2		84 a7					.word	Assemble_cpx                     ; $96 CPX
>93c4		7f a7					.word	Assemble_cpy                     ; $97 CPY
>93c6		61 a7					.word	Assemble_dec                     ; $98 DEC
>93c8		19 a8					.word	Assemble_dex                     ; $99 DEX
>93ca		f5 a7					.word	Assemble_dey                     ; $9a DEY
>93cc		2b a7					.word	Assemble_eor                     ; $9b EOR
>93ce		66 a7					.word	Assemble_inc                     ; $9c INC
>93d0		29 a8					.word	Assemble_inx                     ; $9d INX
>93d2		15 a8					.word	Assemble_iny                     ; $9e INY
>93d4		98 a7					.word	Assemble_jmp                     ; $9f JMP
>93d6		93 a7					.word	Assemble_jsr                     ; $a0 JSR
>93d8		37 a7					.word	Assemble_lda                     ; $a1 LDA
>93da		5c a7					.word	Assemble_ldx                     ; $a2 LDX
>93dc		7a a7					.word	Assemble_ldy                     ; $a3 LDY
>93de		4d a7					.word	Assemble_lsr                     ; $a4 LSR
>93e0		2d a8					.word	Assemble_nop                     ; $a5 NOP
>93e2		23 a7					.word	Assemble_ora                     ; $a6 ORA
>93e4		d9 a7					.word	Assemble_pha                     ; $a7 PHA
>93e6		c5 a7					.word	Assemble_php                     ; $a8 PHP
>93e8		21 a8					.word	Assemble_phx                     ; $a9 PHX
>93ea		e1 a7					.word	Assemble_phy                     ; $aa PHY
>93ec		e9 a7					.word	Assemble_pla                     ; $ab PLA
>93ee		cd a7					.word	Assemble_plp                     ; $ac PLP
>93f0		35 a8					.word	Assemble_plx                     ; $ad PLX
>93f2		f1 a7					.word	Assemble_ply                     ; $ae PLY
>93f4		48 a7					.word	Assemble_rol                     ; $af ROL
>93f6		52 a7					.word	Assemble_ror                     ; $b0 ROR
>93f8		d5 a7					.word	Assemble_rti                     ; $b1 RTI
>93fa		e5 a7					.word	Assemble_rts                     ; $b2 RTS
>93fc		3f a7					.word	Assemble_sbc                     ; $b3 SBC
>93fe		d1 a7					.word	Assemble_sec                     ; $b4 SEC
>9400		31 a8					.word	Assemble_sed                     ; $b5 SED
>9402		ed a7					.word	Assemble_sei                     ; $b6 SEI
>9404		33 a7					.word	Assemble_sta                     ; $b7 STA
>9406		25 a8					.word	Assemble_stp                     ; $b8 STP
>9408		57 a7					.word	Assemble_stx                     ; $b9 STX
>940a		75 a7					.word	Assemble_sty                     ; $ba STY
>940c		6b a7					.word	Assemble_stz                     ; $bb STZ
>940e		09 a8					.word	Assemble_tax                     ; $bc TAX
>9410		05 a8					.word	Assemble_tay                     ; $bd TAY
>9412		8e a7					.word	Assemble_trb                     ; $be TRB
>9414		89 a7					.word	Assemble_tsb                     ; $bf TSB
>9416		11 a8					.word	Assemble_tsx                     ; $c0 TSX
>9418		f9 a7					.word	Assemble_txa                     ; $c1 TXA
>941a		01 a8					.word	Assemble_txs                     ; $c2 TXS
>941c		fd a7					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.941e						Command_Save:
.941e		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; file name to load
.9421		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9423		a5 36		lda $36				lda 	zTemp0
.9425		20 94 81	jsr $8194			jsr 	KNLOpenFileWrite 			; open file for writing
.9428		b0 2f		bcs $9459			bcs 	CSErrorHandler 				; error, so fail.
.942a		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.942d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.942f		85 30		sta $30				sta 	codePtr
.9431		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9433		85 31		sta $31				sta 	codePtr+1
.9435						_CSLoop:
.9435		b2 30		lda ($30)			lda 	(codePtr)
.9437		f0 17		beq $9450			beq 	_CSExit
.9439		20 7d 94	jsr $947d			jsr 	CSGetCleanLine
.943c		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.943e		85 36		sta $36				sta 	zTemp0
.9440		20 5c 94	jsr $945c			jsr 	CLWriteByteBlock 			; write the block out.
.9443		18		clc				clc
.9444		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9446		65 30		adc $30				adc 	codePtr
.9448		85 30		sta $30				sta 	codePtr
.944a		90 02		bcc $944e			bcc 	_CREExit
.944c		e6 31		inc $31				inc 	codePtr+1 					; carry
.944e						_CREExit:
.944e		80 e5		bra $9435			bra 	_CSLoop
.9450						_CSExit:
.9450		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close file
.9453		20 63 82	jsr $8263			jsr 	KNLCloseFile
.9456		4c 7f 8d	jmp $8d7f			jmp 	CLComplete 					; display complete message.
.9459						CSErrorHandler:
.9459		4c 9a 8d	jmp $8d9a			jmp 	CLErrorHandler
.945c						CLWriteByteBlock:
.945c		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.945e		f0 1c		beq $947c			beq 	_CLWBBExit					; if so, exit
.9460		ad 6d 07	lda $076d			lda 	BasicFileStream 			; stream to write, count in X
.9463		20 29 82	jsr $8229			jsr 	KNLWriteBlock 				; call one write attempt
.9466		b0 f1		bcs $9459			bcs 	CSErrorHandler 				; error occurred
.9468		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.946a		8a		txa				txa 								; subtract bytes written from X, total count.
.946b		38		sec				sec
.946c		e5 38		sbc $38				sbc 	zTemp1
.946e		aa		tax				tax
.946f		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.9470		a5 36		lda $36				lda 	zTemp0
.9472		65 38		adc $38				adc 	zTemp1
.9474		85 36		sta $36				sta 	zTemp0
.9476		90 e4		bcc $945c			bcc 	CLWriteByteBlock
.9478		e6 37		inc $37				inc 	zTemp0+1
.947a		80 e0		bra $945c			bra 	CLWriteByteBlock 			; and retry write out.
.947c						_CLWBBExit:
.947c		60		rts				rts
.947d						CSGetCleanLine:
.947d		a9 00		lda #$00			lda 	#0 							; no indent.
.947f		20 93 80	jsr $8093			jsr 	TKListConvertLine 			; convert line into token Buffer
.9482		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9484		a0 00		ldy #$00			ldy 	#0
.9486						_CSClean:
.9486		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.9489		f0 09		beq $9494			beq 	_CSDoneClean
.948b		30 04		bmi $9491			bmi 	_CSIgnoreCharacter
.948d		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.9490		e8		inx				inx
.9491						_CSIgnoreCharacter:
.9491		c8		iny				iny
.9492		80 f2		bra $9486			bra 	_CSClean
.9494						_CSDoneClean:
.9494		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9496		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.9499		e8		inx				inx
.949a		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.949d		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.949f		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.94a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/setdatetime.asm

.94a2						CommandSetDate:
.94a2		a9 03		lda #$03			lda 	#3
.94a4		80 02		bra $94a8			bra 	CSDTMain
.94a6						CommandSetTime:
.94a6		a9 00		lda #$00			lda 	#0
.94a8						CSDTMain:
.94a8		48		pha				pha 								; save table offsets 0 or 3
.94a9		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.94ab		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.94ae		20 74 96	jsr $9674			jsr 	CheckComma
.94b1		e8		inx				inx
.94b2		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.94b5		20 74 96	jsr $9674			jsr 	CheckComma
.94b8		e8		inx				inx
.94b9		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.94bc		68		pla				pla 								; table offset in Y, saving Y
.94bd		5a		phy				phy
.94be		a8		tay				tay
.94bf		a2 00		ldx #$00			ldx 	#0 							; first number
.94c1		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.94c3		48		pha				pha
.94c4		64 01		stz $01				stz 	1
.94c6						_CSDTCopy:
.94c6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.94c8		d9 0a 95	cmp $950a,y			cmp 	RTCWMinValues,y 			; check range
.94cb		90 1b		bcc $94e8			bcc 	_CSDTRange
.94cd		d9 10 95	cmp $9510,y			cmp 	RTCWMaxValues,y
.94d0		b0 16		bcs $94e8			bcs 	_CSDTRange
.94d2		20 ed 94	jsr $94ed			jsr 	CSDTDecimalToBCD
.94d5		da		phx				phx 								; save X
.94d6		be 04 95	ldx $9504,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.94d9		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.94dc		fa		plx				plx 								; restore X
.94dd		e8		inx				inx 								; next number
.94de		c8		iny				iny 								; next table entries
.94df		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.94e1		d0 e3		bne $94c6			bne 	_CSDTCopy
.94e3		68		pla				pla 								; restore I/O space
.94e4		85 01		sta $01				sta 	1
.94e6		7a		ply				ply 								; restore code pos and exit.
.94e7		60		rts				rts
.94e8						_CSDTRange:
.94e8		a9 04		lda #$04		lda	#4
.94ea		4c 85 96	jmp $9685		jmp	ErrorHandler
.94ed						CSDTDecimalToBCD:
.94ed		da		phx				phx 								; 10 count in X
.94ee		a2 00		ldx #$00			ldx 	#0
.94f0						_CSDTDBLoop:
.94f0		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.94f2		90 05		bcc $94f9			bcc 	_CSDTDBExit
.94f4		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.94f6		e8		inx				inx 								; one more 10s.
.94f7		80 f7		bra $94f0			bra 	_CSDTDBLoop
.94f9						_CSDTDBExit:
.94f9		85 36		sta $36				sta 	zTemp0 						; units
.94fb		8a		txa				txa 								; 10s x 16
.94fc		0a		asl a				asl 	a
.94fd		0a		asl a				asl 	a
.94fe		0a		asl a				asl 	a
.94ff		0a		asl a				asl 	a
.9500		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9502		fa		plx				plx
.9503		60		rts				rts
.9504						RTCWOffset:
>9504		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.950a						RTCWMinValues:
>950a		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.9510						RTCWMaxValues:
>9510		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9516						StopCommand:
.9516		a9 08		lda #$08		lda	#8
.9518		4c 85 96	jmp $9685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.951b						ProcedureScan:
.951b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.951d		85 30		sta $30				sta 	codePtr
.951f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9521		85 31		sta $31				sta 	codePtr+1
.9523						_PSLoop:
.9523		b2 30		lda ($30)			lda 	(codePtr)
.9525		f0 42		beq $9569			beq 	_PSExit
.9527		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9529		b1 30		lda ($30),y			lda 	(codePtr),y
.952b		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.952d		d0 2d		bne $955c			bne 	_PSNext
.952f		c8		iny				iny 								; get the address of the record to zTemp0 and
.9530		b1 30		lda ($30),y			lda 	(codePtr),y
.9532		29 c0		and #$c0			and 	#$C0
.9534		c9 40		cmp #$40			cmp 	#$40
.9536		d0 32		bne $956a			bne 	_PSSyntax
.9538		b1 30		lda ($30),y			lda 	(codePtr),y
.953a		18		clc				clc
.953b		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.953d		85 37		sta $37				sta 	zTemp0+1
.953f		c8		iny				iny 								; LSB
.9540		b1 30		lda ($30),y			lda 	(codePtr),y
.9542		85 36		sta $36				sta 	zTemp0
.9544		c8		iny				iny 								; character after variable call.
.9545		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9546		a0 07		ldy #$07			ldy 	#7
.9548		91 36		sta ($36),y			sta 	(zTemp0),y
.954a		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.954c		a0 02		ldy #$02			ldy 	#2
.954e		91 36		sta ($36),y			sta 	(zTemp0),y
.9550		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9552						_PSCopy:
.9552		b5 30		lda $30,x			lda 	safePtr,x
.9554		c8		iny				iny
.9555		91 36		sta ($36),y			sta 	(zTemp0),y
.9557		e8		inx				inx
.9558		e0 04		cpx #$04			cpx 	#4
.955a		d0 f6		bne $9552			bne 	_PSCopy
.955c						_PSNext:
.955c		18		clc				clc
.955d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.955f		65 30		adc $30				adc 	codePtr
.9561		85 30		sta $30				sta 	codePtr
.9563		90 02		bcc $9567			bcc 	_CREExit
.9565		e6 31		inc $31				inc 	codePtr+1 					; carry
.9567						_CREExit:
.9567		80 ba		bra $9523			bra 	_PSLoop
.9569						_PSExit:
.9569		60		rts				rts
.956a						_PSSyntax:
.956a		4c 70 a8	jmp $a870			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.956d						ScanForward:
.956d		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.956f		86 37		stx $37				stx 	zTemp0+1
.9571		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9573						_ScanLoop:
.9573		b1 30		lda ($30),y			lda 	(codePtr),y
.9575		c8		iny				iny
.9576		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9578		d0 0e		bne $9588			bne 	_ScanGoNext
.957a		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.957c		f0 04		beq $9582			beq 	_ScanMatch
.957e		c5 37		cmp $37				cmp 	zTemp0+1
.9580		d0 06		bne $9588			bne 	_ScanGoNext
.9582						_ScanMatch:
.9582		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9584		d0 01		bne $9587			bne 	_ScanNotEndEOL
.9586		88		dey				dey
.9587						_ScanNotEndEOL:
.9587		60		rts				rts
.9588						_ScanGoNext:
.9588		20 8d 95	jsr $958d			jsr  	ScanForwardOne 				; allows for shifts and so on.
.958b		80 e6		bra $9573			bra 	_ScanLoop
.958d						ScanForwardOne:
.958d		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.958f		90 3e		bcc $95cf			bcc 	_SFWExit
.9591		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9593		90 18		bcc $95ad			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9595		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9597		b0 2f		bcs $95c8			bcs 	_ScanSkipData
.9599		c9 ac		cmp #$ac			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.959b		90 32		bcc $95cf			bcc 	_SFWExit 					; if not, ordinary keywords.
.959d		c9 b7		cmp #$b7			cmp 	#KWC_LAST_STRUCTURE+1
.959f		b0 2e		bcs $95cf			bcs 	_SFWExit
.95a1		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.95a3		c9 b1		cmp #$b1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.95a5		b0 28		bcs $95cf			bcs 	_SFWExit
.95a7		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.95a9		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.95ab		80 22		bra $95cf			bra 	_SFWExit
.95ad						_ScanSkipOne:
.95ad		c8		iny				iny 								; consume the extra one.
.95ae		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.95b0		d0 1d		bne $95cf			bne 	_SFWExit
.95b2		18		clc				clc
.95b3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.95b5		65 30		adc $30				adc 	codePtr
.95b7		85 30		sta $30				sta 	codePtr
.95b9		90 02		bcc $95bd			bcc 	_CREExit
.95bb		e6 31		inc $31				inc 	codePtr+1 					; carry
.95bd						_CREExit:
.95bd		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.95bf		b2 30		lda ($30)			lda 	(codePtr)
.95c1		d0 0c		bne $95cf			bne 	_SFWExit 					; if not zero, more to scan
.95c3		a9 13		lda #$13		lda	#19
.95c5		4c 85 96	jmp $9685		jmp	ErrorHandler
.95c8						_ScanSkipData:
.95c8		88		dey				dey 								; point at data token
.95c9		c8		iny				iny 								; point to offset
.95ca		98		tya				tya 								; A = offset position
.95cb		38		sec				sec 								; add size +1 hence SEC
.95cc		71 30		adc ($30),y			adc 	(codePtr),y
.95ce		a8		tay				tay 								; make current position.
.95cf						_SFWExit:
.95cf		60		rts				rts
.95d0						ScanGetCurrentLineStep:
.95d0		64 38		stz $38				stz 	zTemp1
.95d2		a0 03		ldy #$03			ldy 	#3
.95d4						_SGCLSLoop:
.95d4		b1 30		lda ($30),y			lda 	(codePtr),y
.95d6		c8		iny				iny
.95d7		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.95d9		f0 05		beq $95e0			beq 	_SGCLSExit
.95db		20 8d 95	jsr $958d			jsr 	ScanForwardOne
.95de		80 f4		bra $95d4			bra 	_SGCLSLoop
.95e0						_SGCLSExit:
.95e0		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.95e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc77						m
.95e3						Command_VERIFY:
.95e3		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; file name to verify
.95e6		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.95e8		a5 36		lda $36				lda 	zTemp0
.95ea		20 99 81	jsr $8199			jsr 	KNLOpenFileRead 			; open file for reading
.95ed		b0 4b		bcs $963a			bcs 	_CVErrorHandler 			; error, so fail.
.95ef		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.95f2		20 ea 8d	jsr $8dea			jsr     LoadReadByteInit            ; Init reader with the stream
.95f5		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.95f8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95fa		85 30		sta $30				sta 	codePtr
.95fc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95fe		85 31		sta $31				sta 	codePtr+1
.9600						_CVLoop:
.9600		20 a8 8d	jsr $8da8			jsr 	LoadReadLine 				; get next line.
.9603		f0 27		beq $962c			beq 	_CVExit 					; end, exit.
.9605		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.9608		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.960b		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.960e		f0 f0		beq $9600			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.9610		a0 00		ldy #$00			ldy 	#0 							; start compare
.9612						_CVCompareLoop:
.9612		b1 30		lda ($30),y			lda 	(codePtr),y
.9614		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.9617		d0 1c		bne $9635			bne 	_CVCompareError
.9619		c8		iny				iny
.961a		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.961d		d0 f3		bne $9612			bne 	_CVCompareLoop
.961f		18		clc				clc
.9620		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9622		65 30		adc $30				adc 	codePtr
.9624		85 30		sta $30				sta 	codePtr
.9626		90 02		bcc $962a			bcc 	_CREExit
.9628		e6 31		inc $31				inc 	codePtr+1 					; carry
.962a						_CREExit:
.962a		80 d4		bra $9600			bra 	_CVLoop
.962c						_CVExit:
.962c		ad 6d 07	lda $076d			lda 	BasicFileStream
.962f		20 63 82	jsr $8263			jsr 	KNLCloseFile
.9632		4c 7f 8d	jmp $8d7f			jmp 	CLComplete
.9635						_CVCompareError:
.9635		a9 1b		lda #$1b		lda	#27
.9637		4c 85 96	jmp $9685		jmp	ErrorHandler
.963a						_CVErrorHandler:
.963a		4c 9a 8d	jmp $8d9a			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.963d						Command_WHILE:
.963d		5a		phy				phy 								; save position of the test
.963e		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9640		20 40 a6	jsr $a640			jsr 	EvaluateNumber
.9643		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; check if zero
.9646		f0 0e		beq $9656			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9648		98		tya				tya 								; position *after* test.
.9649		7a		ply				ply 								; restore position before test, at WHILE
.964a		88		dey				dey 								; so we execute the WHILE command again.
.964b		48		pha				pha 								; push after test on the stack
.964c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.964e		20 d1 b7	jsr $b7d1			jsr 	StackOpen
.9651		20 16 b8	jsr $b816			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9654		7a		ply				ply 								; restore the position *after* the test
.9655		60		rts				rts
.9656						_WHExitLoop:
.9656		68		pla				pla 								; throw post loop position
.9657		a9 b6		lda #$b6			lda 	#KWD_WEND 					; scan forward past WEND
.9659		aa		tax				tax
.965a		20 6d 95	jsr $956d			jsr 	ScanForward
.965d		60		rts				rts
.965e						Command_WEND:
.965e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9660		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9662		20 fe b7	jsr $b7fe			jsr 	StackCheckFrame
.9665		20 27 b8	jsr $b827			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9668		20 f0 b7	jsr $b7f0			jsr 	StackClose		 			; erase the frame
.966b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.966c						CheckRightBracket:
.966c		b1 30		lda ($30),y			lda 	(codePtr),y
.966e		c8		iny				iny
.966f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9671		d0 0f		bne $9682			bne 	CNAFail
.9673		60		rts				rts
.9674						CheckComma:
.9674		b1 30		lda ($30),y			lda 	(codePtr),y
.9676		c8		iny				iny
.9677		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9679		d0 07		bne $9682			bne 	CNAFail
.967b		60		rts				rts
.967c						CheckNextA:
.967c		d1 30		cmp ($30),y			cmp 	(codePtr),y
.967e		d0 02		bne $9682			bne 	CNAFail
.9680		c8		iny				iny 								; skip character
.9681		60		rts				rts 								; and exit
.9682						CNAFail:
.9682		4c 70 a8	jmp $a870			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9685						ErrorHandler:
.9685		a8		tay				tay 								; find the error text
.9686		f0 49		beq $96d1			beq 	_EHEnd
.9688		a2 00		ldx #$00			ldx 	#0
.968a		a9 89		lda #$89			lda 	#((ErrorText) & $FF)
.968c		85 36		sta $36				sta 	0+zTemp0
.968e		a9 a8		lda #$a8			lda 	#((ErrorText) >> 8)
.9690		85 37		sta $37				sta 	1+zTemp0
.9692						_EHFind:
.9692		88		dey				dey 								; keep looking through text
.9693		f0 0e		beq $96a3			beq 	_EHFound
.9695						_EHFindZero:
.9695		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9697		e6 36		inc $36				inc 	zTemp0
.9699		d0 02		bne $969d			bne 	_EHFNoCarry
.969b		e6 37		inc $37				inc 	zTemp0+1
.969d						_EHFNoCarry:
.969d		c9 00		cmp #$00			cmp 	#0
.969f		d0 f4		bne $9695			bne 	_EHFindZero
.96a1		80 ef		bra $9692			bra 	_EHFind
.96a3						_EHFound:
.96a3		a5 36		lda $36				lda 	zTemp0 						; print message
.96a5		a6 37		ldx $37				ldx 	zTemp0+1
.96a7		20 de 96	jsr $96de			jsr 	PrintStringXA
.96aa		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.96ac		b1 30		lda ($30),y			lda 	(codePtr),y
.96ae		d0 05		bne $96b5			bne 	_EHAtMsg
.96b0		c8		iny				iny
.96b1		b1 30		lda ($30),y			lda 	(codePtr),y
.96b3		f0 17		beq $96cc			beq 	_EHCREnd
.96b5						_EHAtMsg:
.96b5		a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.96b7		a9 d4		lda #$d4			lda 	#_AtMsg & $FF
.96b9		20 de 96	jsr $96de			jsr 	PrintStringXA
.96bc		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.96be		b1 30		lda ($30),y			lda 	(codePtr),y
.96c0		48		pha				pha
.96c1		c8		iny				iny
.96c2		b1 30		lda ($30),y			lda 	(codePtr),y
.96c4		aa		tax				tax
.96c5		68		pla				pla
.96c6		20 f4 9a	jsr $9af4			jsr 	ConvertInt16 				; convert XA to string
.96c9		20 de 96	jsr $96de			jsr 	PrintStringXA 				; and print it.
.96cc						_EHCREnd:
.96cc		a9 0d		lda #$0d			lda 	#13 						; new line
.96ce		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.96d1						_EHEnd:
.96d1		4c b9 85	jmp $85b9			jmp 	WarmStart
>96d4		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>96dc		20 00
.96de						PrintStringXA:
.96de		5a		phy				phy
.96df		86 37		stx $37				stx 	zTemp0+1
.96e1		85 36		sta $36				sta 	zTemp0
.96e3		a0 00		ldy #$00			ldy 	#0
.96e5						_PSXALoop:
.96e5		b1 36		lda ($36),y			lda 	(zTemp0),y
.96e7		f0 06		beq $96ef			beq 	_PSXAExit
.96e9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.96ec		c8		iny				iny
.96ed		80 f6		bra $96e5			bra 	_PSXALoop
.96ef						_PSXAExit:
.96ef		7a		ply				ply
.96f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.96f1						UnaryTrue:
.96f1		fa		plx				plx
.96f2						ReturnTrue:
.96f2		a9 01		lda #$01			lda 	#1  						; set to 1
.96f4		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.96f7		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.96f9		95 50		sta $50,x			sta 	NSStatus,x
.96fb		60		rts				rts
.96fc						UnaryFalse:
.96fc		fa		plx				plx
.96fd						ReturnFalse:
.96fd		4c f2 a6	jmp $a6f2			jmp 	NSMSetZero 					; set it all to zero
.9700						BinaryCompareEqual:
.9700		fa		plx				plx
.9701		20 3c 97	jsr $973c			jsr 	CompareBaseCode
.9704		c9 00		cmp #$00			cmp 	#0
.9706		f0 ea		beq $96f2			beq 	ReturnTrue
.9708		80 f3		bra $96fd			bra 	ReturnFalse
.970a						BinaryCompareLess:
.970a		fa		plx				plx
.970b		20 3c 97	jsr $973c			jsr 	CompareBaseCode
.970e		c9 ff		cmp #$ff			cmp 	#$FF
.9710		f0 e0		beq $96f2			beq 	ReturnTrue
.9712		80 e9		bra $96fd			bra 	ReturnFalse
.9714						BinaryCompareGreater:
.9714		fa		plx				plx
.9715		20 3c 97	jsr $973c			jsr 	CompareBaseCode
.9718		c9 01		cmp #$01			cmp 	#1
.971a		f0 d6		beq $96f2			beq 	ReturnTrue
.971c		80 df		bra $96fd			bra 	ReturnFalse
.971e						BinaryCompareNotEqual:
.971e		fa		plx				plx
.971f		20 3c 97	jsr $973c			jsr 	CompareBaseCode
.9722		c9 00		cmp #$00			cmp 	#0
.9724		d0 cc		bne $96f2			bne 	ReturnTrue
.9726		80 d5		bra $96fd			bra 	ReturnFalse
.9728						BinaryCompareLessEqual:
.9728		fa		plx				plx
.9729		20 3c 97	jsr $973c			jsr 	CompareBaseCode
.972c		c9 01		cmp #$01			cmp 	#1
.972e		d0 c2		bne $96f2			bne 	ReturnTrue
.9730		80 cb		bra $96fd			bra 	ReturnFalse
.9732						BinaryCompareGreaterEqual:
.9732		fa		plx				plx
.9733		20 3c 97	jsr $973c			jsr 	CompareBaseCode
.9736		c9 ff		cmp #$ff			cmp 	#$FF
.9738		d0 b8		bne $96f2			bne 	ReturnTrue
.973a		80 c1		bra $96fd			bra 	ReturnFalse
.973c						CompareBaseCode:
.973c		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; make both values if references.
.973f		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9741		15 51		ora $51,x			ora 	NSStatus+1,x
.9743		29 10		and #$10			and 	#NSTString
.9745		d0 37		bne $977e			bne 	_CBCString 					; if so do string code, which will check if both.
.9747		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9749		15 79		ora $79,x			ora 	NSExponent+1,x
.974b		d0 34		bne $9781			bne 	_CBCFloat
.974d		b5 50		lda $50,x			lda 	NSStatus,x
.974f		15 51		ora $51,x			ora 	NSStatus+1,x
.9751		29 08		and #$08			and 	#NSTFloat
.9753		d0 2c		bne $9781			bne 	_CBCFloat
.9755		20 84 97	jsr $9784			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9758		e8		inx				inx
.9759		20 84 97	jsr $9784			jsr 	CompareFixMinusZero
.975c		ca		dex				dex
.975d		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.975f		55 51		eor $51,x			eor 	NSStatus+1,x
.9761		10 0a		bpl $976d			bpl 	_CDCSameSign
.9763		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9765		30 14		bmi $977b			bmi 	_CBCLess 					; return $FF
.9767						_CBCGreater:
.9767		a9 01		lda #$01			lda 	#1
.9769		60		rts				rts
.976a						_CBCEqual:
.976a		a9 00		lda #$00			lda 	#0
.976c		60		rts				rts
.976d						_CDCSameSign:
.976d		20 99 99	jsr $9999			jsr 	SubTopTwoStack 				; unsigned subtract
.9770		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; or the mantissa together
.9773		f0 f5		beq $976a			beq 	_CBCEqual 					; -0 == 0
.9775		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9777		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9779		10 ec		bpl $9767			bpl 	_CBCGreater
.977b						_CBCLess:
.977b		a9 ff		lda #$ff			lda 	#$FF
.977d		60		rts				rts
.977e						_CBCString:
.977e		4c 0a 99	jmp $990a			jmp 	CompareStrings
.9781						_CBCFloat:
.9781		4c 54 9c	jmp $9c54			jmp 	CompareFloat
.9784						CompareFixMinusZero:
.9784		20 14 a7	jsr $a714			jsr 	NSMIsZero
.9787		d0 02		bne $978b			bne 	_CFXMZNotZero
.9789		74 50		stz $50,x			stz 	NSStatus,x
.978b						_CFXMZNotZero:
.978b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.978c						StringConcat:
.978c		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.978e		35 51		and $51,x			and 	NSStatus+1,x
.9790		29 18		and #$18			and 	#NSBTypeMask
.9792		c9 10		cmp #$10			cmp 	#NSTString
.9794		d0 50		bne $97e6			bne		_SCType
.9796		64 38		stz $38				stz 	zTemp1 						; counting total length
.9798		e8		inx				inx
.9799		20 b7 97	jsr $97b7			jsr 	_SCSetupZ0 					; setup for second
.979c		20 c0 97	jsr $97c0			jsr 	_SCLengthZ0 				; length for second
.979f		ca		dex				dex
.97a0		20 b7 97	jsr $97b7			jsr 	_SCSetupZ0 					; setup for first
.97a3		20 c0 97	jsr $97c0			jsr 	_SCLengthZ0 				; length for first
.97a6		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.97a8		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate
.97ab		20 d7 97	jsr $97d7			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.97ae		e8		inx				inx
.97af		20 b7 97	jsr $97b7			jsr 	_SCSetupZ0 					; copy second out
.97b2		20 d7 97	jsr $97d7			jsr 	_SCCopy
.97b5		ca		dex				dex
.97b6		60		rts				rts
.97b7						_SCSetupZ0:
.97b7		b5 58		lda $58,x			lda 	NSMantissa0,x
.97b9		85 36		sta $36				sta 	zTemp0
.97bb		b5 60		lda $60,x			lda 	NSMantissa1,x
.97bd		85 37		sta $37				sta 	zTemp0+1
.97bf		60		rts				rts
.97c0						_SCLengthZ0:
.97c0		5a		phy				phy
.97c1		a0 00		ldy #$00			ldy 	#0
.97c3						_SCLenLoop:
.97c3		b1 36		lda ($36),y			lda 	(zTemp0),y
.97c5		f0 0e		beq $97d5			beq 	_SCLExit
.97c7		c8		iny				iny
.97c8		e6 38		inc $38				inc 	zTemp1
.97ca		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.97cc		c9 fd		cmp #$fd			cmp 	#253
.97ce		d0 f3		bne $97c3			bne		_SCLenLoop
.97d0		a9 09		lda #$09		lda	#9
.97d2		4c 85 96	jmp $9685		jmp	ErrorHandler
.97d5						_SCLExit:
.97d5		7a		ply				ply
.97d6		60		rts				rts
.97d7						_SCCopy:
.97d7		5a		phy				phy
.97d8		a0 00		ldy #$00			ldy 	#0
.97da						_SCCopyLoop:
.97da		b1 36		lda ($36),y			lda 	(zTemp0),y
.97dc		f0 06		beq $97e4			beq 	_SCCExit
.97de		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.97e1		c8		iny				iny
.97e2		80 f6		bra $97da			bra 	_SCCopyLoop
.97e4						_SCCExit:
.97e4		7a		ply				ply
.97e5		60		rts				rts
.97e6						_SCType:
.97e6		4c 7a a8	jmp $a87a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.97e9						IntegerDivide:
.97e9		fa		plx				plx
.97ea		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97ec		15 51		ora $51,x			ora 	NSStatus+1,x
.97ee		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ef		0a		asl a				asl 	a
.97f0		10 05		bpl $97f7			bpl 	_NotRef
.97f2		48		pha				pha
.97f3		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97f6		68		pla				pla
.97f7						_NotRef:
.97f7		0a		asl a				asl 	a
.97f8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97fa		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97fc		15 79		ora $79,x			ora 	NSExponent+1,x
.97fe		f0 03		beq $9803			beq 	_IntegerCode 				; if clear, then we have two integers
.9800		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.9803						_IntegerCode:
.9803		20 1d 98	jsr $981d			jsr 	CheckDivideZero 			; do div zero check
.9806		20 4f 98	jsr $984f			jsr 	Int32Divide 				; do the division
.9809		20 00 99	jsr $9900			jsr 	CalculateSign 				; calculate result sign
.980c						NSMCopyPlusTwoToZero:
.980c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.980e		95 58		sta $58,x			sta 	NSMantissa0,x
.9810		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9812		95 60		sta $60,x			sta 	NSMantissa1,x
.9814		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9816		95 68		sta $68,x			sta 	NSMantissa2,x
.9818		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.981a		95 70		sta $70,x			sta 	NSMantissa3,x
.981c		60		rts				rts
.981d						CheckDivideZero:
.981d		e8		inx				inx
.981e		20 14 a7	jsr $a714			jsr 	NSMIsZero
.9821		f0 02		beq $9825			beq 	_CDVError
.9823		ca		dex				dex
.9824		60		rts				rts
.9825						_CDVError:
.9825		a9 03		lda #$03		lda	#3
.9827		4c 85 96	jmp $9685		jmp	ErrorHandler
.982a						IntegerModulus:
.982a		fa		plx				plx
.982b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.982d		15 51		ora $51,x			ora 	NSStatus+1,x
.982f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9830		0a		asl a				asl 	a
.9831		10 05		bpl $9838			bpl 	_NotRef
.9833		48		pha				pha
.9834		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9837		68		pla				pla
.9838						_NotRef:
.9838		0a		asl a				asl 	a
.9839		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.983b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.983d		15 79		ora $79,x			ora 	NSExponent+1,x
.983f		f0 03		beq $9844			beq 	_IntegerCode 				; if clear, then we have two integers
.9841		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.9844						_IntegerCode:
.9844						IntegerModulusNoCheck:
.9844		20 1d 98	jsr $981d			jsr 	CheckDivideZero 			; do div zero check
.9847		20 4f 98	jsr $984f			jsr 	Int32Divide 				; do the division
.984a		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.984c		56 50		lsr $50,x			lsr 	NSStatus,x
.984e		60		rts				rts
.984f						Int32Divide:
.984f		48		pha				pha 								; save AXY
.9850		5a		phy				phy
.9851		20 d5 a6	jsr $a6d5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9854		20 ee a6	jsr $a6ee			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9857		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9859						_I32DivideLoop:
.9859		e8		inx				inx
.985a		e8		inx				inx
.985b		20 01 a7	jsr $a701			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.985e		ca		dex				dex
.985f		ca		dex				dex
.9860		20 02 a7	jsr $a702			jsr 	NSMRotateLeft
.9863		20 8e 98	jsr $988e			jsr 	DivideCheckSubtract 		; check if subtract possible
.9866		90 02		bcc $986a			bcc 	_I32DivideNoCarryIn
.9868		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.986a						_I32DivideNoCarryIn:
.986a		88		dey				dey 								; loop round till division completed.
.986b		d0 ec		bne $9859			bne 	_I32DivideLoop
.986d		7a		ply				ply 								; restore AXY and exit
.986e		68		pla				pla
.986f		60		rts				rts
.9870						Int32ShiftDivide:
.9870		48		pha				pha 								; save AY
.9871		5a		phy				phy
.9872		e8		inx				inx 								; clear S[X+2]
.9873		e8		inx				inx
.9874		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.9877		ca		dex				dex
.9878		ca		dex				dex
.9879		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.987b						_I32SDLoop:
.987b		20 8e 98	jsr $988e			jsr 	DivideCheckSubtract 		; check if subtract possible
.987e		e8		inx				inx
.987f		e8		inx				inx
.9880		20 02 a7	jsr $a702			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9883		ca		dex				dex
.9884		ca		dex				dex
.9885		20 02 a7	jsr $a702			jsr 	NSMRotateLeft
.9888		88		dey				dey 	 							; do 31 times
.9889		d0 f0		bne $987b			bne 	_I32SDLoop
.988b		7a		ply				ply 								; restore AY and exit
.988c		68		pla				pla
.988d		60		rts				rts
.988e						DivideCheckSubtract:
.988e		20 99 99	jsr $9999			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9891		b0 04		bcs $9897			bcs 	_DCSExit 					; if carry set, then could do, exit
.9893		20 7f 99	jsr $997f			jsr 	AddTopTwoStack 				; add it back in
.9896		18		clc				clc 								; and return False
.9897						_DCSExit:
.9897		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9898						MulInteger:
.9898		fa		plx				plx
.9899		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.989b		15 51		ora $51,x			ora 	NSStatus+1,x
.989d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.989e		0a		asl a				asl 	a
.989f		10 05		bpl $98a6			bpl 	_NotRef
.98a1		48		pha				pha
.98a2		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98a5		68		pla				pla
.98a6						_NotRef:
.98a6		0a		asl a				asl 	a 							; put MSB of type into A:7
.98a7		30 09		bmi $98b2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.98a9		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98ab		15 79		ora $79,x			ora 	NSExponent+1,x
.98ad		f0 06		beq $98b5			beq 	_IntegerCode 				; if clear, then we have two integers
.98af		4c 16 9d	jmp $9d16			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.98b2						_StringData:
.98b2		4c 84 a8	jmp $a884			jmp 	NotDoneError							; at least one string - don't know both are strings.
.98b5						_IntegerCode:
.98b5		20 c2 98	jsr $98c2			jsr 	MultiplyShort
.98b8		c9 00		cmp #$00			cmp 	#0
.98ba		f0 05		beq $98c1			beq 	_MIExit
.98bc		a9 04		lda #$04		lda	#4
.98be		4c 85 96	jmp $9685		jmp	ErrorHandler
.98c1						_MIExit:
.98c1		60		rts				rts
.98c2						MultiplyShort:
.98c2		5a		phy				phy 								; save Y
.98c3		20 d5 a6	jsr $a6d5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.98c6		20 ee a6	jsr $a6ee			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.98c9		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.98cb						_I32MLoop:
.98cb		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.98cd		15 62		ora $62,x			ora 	NSMantissa1+2,x
.98cf		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.98d1		15 72		ora $72,x			ora 	NSMantissa3+2,x
.98d3		f0 25		beq $98fa			beq 	_I32MExit 					; exit if zero
.98d5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.98d7		29 01		and #$01			and 	#1
.98d9		f0 0d		beq $98e8			beq 	_I32MNoAdd
.98db		20 7f 99	jsr $997f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.98de		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.98e0		10 06		bpl $98e8			bpl 	_I32MNoAdd
.98e2						_I32ShiftRight:
.98e2		20 0b a7	jsr $a70b			jsr 	NSMShiftRight 				; shift S[X] right
.98e5		c8		iny				iny 								; increment shift count
.98e6		80 09		bra $98f1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.98e8						_I32MNoAdd:
.98e8		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.98ea		70 f6		bvs $98e2			bvs 	_I32ShiftRight 				; instead.
.98ec		e8		inx				inx
.98ed		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.98f0		ca		dex				dex
.98f1						_I32MShiftUpper:
.98f1		e8		inx				inx 								; shift S[X+2] right
.98f2		e8		inx				inx
.98f3		20 0b a7	jsr $a70b			jsr 	NSMShiftRight
.98f6		ca		dex				dex
.98f7		ca		dex				dex
.98f8		80 d1		bra $98cb			bra 	_I32MLoop 					; try again.
.98fa						_I32MExit:
.98fa		20 00 99	jsr $9900			jsr 	CalculateSign
.98fd		98		tya				tya 								; shift in A
.98fe		7a		ply				ply 								; restore Y and exit
.98ff		60		rts				rts
.9900						CalculateSign:
.9900		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9902		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9904		55 51		eor $51,x			eor 	NSStatus+1,x
.9906		0a		asl a				asl 	a 							; shift bit 7 into carry
.9907		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9909		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.990a						CompareStrings:
.990a		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.990c		35 51		and $51,x			and 	NSStatus+1,x
.990e		29 10		and #$10			and 	#NSBIsString
.9910		f0 28		beq $993a			beq 	_CSTypeError
.9912		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9914		85 36		sta $36				sta 	zTemp0
.9916		b5 60		lda $60,x			lda 	NSMantissa1,x
.9918		85 37		sta $37				sta 	zTemp0+1
.991a		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.991c		85 38		sta $38				sta 	zTemp1
.991e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9920		85 39		sta $39				sta 	zTemp1+1
.9922		5a		phy				phy 								; save Y so we can access strings
.9923		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9925						_CSLoop:
.9925		c8		iny				iny
.9926		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9928		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.992a		d0 06		bne $9932			bne 	_CSDifferent
.992c		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.992e		d0 f5		bne $9925			bne 	_CSLoop 					; still comparing
.9930						_CSExit:
.9930		7a		ply				ply 								; reached end, return zero in A from EOS
.9931		60		rts				rts
.9932						_CSDifferent:
.9932		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9934		90 fa		bcc $9930			bcc		_CSExit
.9936		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9938		80 f6		bra $9930			bra 	_CSExit
.993a						_CSTypeError:
.993a		4c 7a a8	jmp $a87a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.993d						ShiftLeft:
.993d		38		sec				sec 								; common code, carry determines which way.
.993e		80 01		bra $9941			bra 	ShiftMain
.9940						ShiftRight:
.9940		18		clc				clc
.9941						ShiftMain:
.9941		fa		plx				plx 								; restore X
.9942		08		php				php 								; save direction
.9943		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9945		15 51		ora $51,x			ora 	NSStatus+1,x
.9947		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9948		0a		asl a				asl 	a
.9949		10 05		bpl $9950			bpl 	_NotRef
.994b		48		pha				pha
.994c		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.994f		68		pla				pla
.9950						_NotRef:
.9950		0a		asl a				asl 	a
.9951		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9953		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9955		15 79		ora $79,x			ora 	NSExponent+1,x
.9957		f0 03		beq $995c			beq 	_IntegerCode 				; if clear, then we have two integers
.9959		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.995c						_IntegerCode:
.995c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.995e		29 e0		and #$e0			and 	#$E0
.9960		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9962		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9964		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9966		d0 12		bne $997a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9968						_SMLoop:
.9968		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.996a		30 11		bmi $997d			bmi 	_SMExit 					; exit if done.
.996c		28		plp				plp 								; restore direction setting
.996d		08		php				php
.996e		90 05		bcc $9975			bcc 	_SMRight
.9970		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; shift left if CS
.9973		80 f3		bra $9968			bra 	_SMLoop
.9975						_SMRight:
.9975		20 0b a7	jsr $a70b			jsr 	NSMShiftRight 				; shift right if CC
.9978		80 ee		bra $9968			bra 	_SMLoop
.997a						_SMExit0:
.997a		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; return zero.
.997d						_SMExit:
.997d		28		plp				plp 								; throw direction
.997e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.997f						AddTopTwoStack:
.997f		18		clc				clc
.9980		b5 58		lda $58,x			lda		NSMantissa0,x
.9982		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9984		95 58		sta $58,x			sta 	NSMantissa0,x
.9986		b5 60		lda $60,x			lda		NSMantissa1,x
.9988		75 61		adc $61,x			adc 		NSMantissa1+1,x
.998a		95 60		sta $60,x			sta 	NSMantissa1,x
.998c		b5 68		lda $68,x			lda		NSMantissa2,x
.998e		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9990		95 68		sta $68,x			sta 	NSMantissa2,x
.9992		b5 70		lda $70,x			lda		NSMantissa3,x
.9994		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9996		95 70		sta $70,x			sta 	NSMantissa3,x
.9998		60		rts				rts
.9999						SubTopTwoStack:
.9999		38		sec				sec
.999a		b5 58		lda $58,x			lda		NSMantissa0,x
.999c		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.999e		95 58		sta $58,x			sta 	NSMantissa0,x
.99a0		b5 60		lda $60,x			lda		NSMantissa1,x
.99a2		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.99a4		95 60		sta $60,x			sta 	NSMantissa1,x
.99a6		b5 68		lda $68,x			lda		NSMantissa2,x
.99a8		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.99aa		95 68		sta $68,x			sta 	NSMantissa2,x
.99ac		b5 70		lda $70,x			lda		NSMantissa3,x
.99ae		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.99b0		95 70		sta $70,x			sta 	NSMantissa3,x
.99b2		60		rts				rts
.99b3						AddInteger:
.99b3		fa		plx				plx
.99b4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99b6		15 51		ora $51,x			ora 	NSStatus+1,x
.99b8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99b9		0a		asl a				asl 	a
.99ba		10 05		bpl $99c1			bpl 	_NotRef
.99bc		48		pha				pha
.99bd		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99c0		68		pla				pla
.99c1						_NotRef:
.99c1		0a		asl a				asl 	a 							; put MSB of type into A:7
.99c2		30 09		bmi $99cd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99c4		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99c6		15 79		ora $79,x			ora 	NSExponent+1,x
.99c8		f0 06		beq $99d0			beq 	_IntegerCode 				; if clear, then we have two integers
.99ca		4c c6 9b	jmp $9bc6			jmp 	FloatingPointAdd 							; otherwise at least one float.
.99cd						_StringData:
.99cd		4c 8c 97	jmp $978c			jmp 	StringConcat							; at least one string - don't know both are strings.
.99d0						_IntegerCode:
.99d0						AddCode:
.99d0		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.99d2		55 51		eor $51,x			eor 	NSStatus+1,x
.99d4		10 a9		bpl $997f			bpl 	AddTopTwoStack
.99d6		20 99 99	jsr $9999			jsr 	SubTopTwoStack 				; do a physical subtraction
.99d9		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.99db		10 07		bpl $99e4			bpl 	_AddExit
.99dd		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.99df		95 50		sta $50,x			sta 	NSStatus,x
.99e1		20 bb a6	jsr $a6bb			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.99e4						_AddExit:
.99e4		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; check for -0
.99e7		d0 02		bne $99eb			bne 	_AddNonZero
.99e9		74 50		stz $50,x			stz 	NSStatus,x
.99eb						_AddNonZero:
.99eb		60		rts				rts
.99ec						SubInteger:
.99ec		fa		plx				plx
.99ed		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99ef		15 51		ora $51,x			ora 	NSStatus+1,x
.99f1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99f2		0a		asl a				asl 	a
.99f3		10 05		bpl $99fa			bpl 	_NotRef
.99f5		48		pha				pha
.99f6		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99f9		68		pla				pla
.99fa						_NotRef:
.99fa		0a		asl a				asl 	a 							; put MSB of type into A:7
.99fb		30 09		bmi $9a06			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99fd		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99ff		15 79		ora $79,x			ora 	NSExponent+1,x
.9a01		f0 06		beq $9a09			beq 	_IntegerCode 				; if clear, then we have two integers
.9a03		4c cb 9b	jmp $9bcb			jmp 	FloatingPointSub 							; otherwise at least one float.
.9a06						_StringData:
.9a06		4c 84 a8	jmp $a884			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9a09						_IntegerCode:
.9a09		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9a0b		49 80		eor #$80			eor 	#$80
.9a0d		95 51		sta $51,x			sta 	NSStatus+1,x
.9a0f		80 bf		bra $99d0			bra 	AddCode 					; and do the same code as add.
.9a11						AndInteger:
.9a11		fa		plx				plx
.9a12		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a14		15 51		ora $51,x			ora 	NSStatus+1,x
.9a16		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a17		0a		asl a				asl 	a
.9a18		10 05		bpl $9a1f			bpl 	_NotRef
.9a1a		48		pha				pha
.9a1b		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a1e		68		pla				pla
.9a1f						_NotRef:
.9a1f		0a		asl a				asl 	a
.9a20		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a22		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a24		15 79		ora $79,x			ora 	NSExponent+1,x
.9a26		f0 03		beq $9a2b			beq 	_IntegerCode 				; if clear, then we have two integers
.9a28		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.9a2b						_IntegerCode:
.9a2b		b5 58		lda $58,x			lda		NSMantissa0,x
.9a2d		35 59		and $59,x			and 		NSMantissa0+1,x
.9a2f		95 58		sta $58,x			sta 	NSMantissa0,x
.9a31		b5 60		lda $60,x			lda		NSMantissa1,x
.9a33		35 61		and $61,x			and 		NSMantissa1+1,x
.9a35		95 60		sta $60,x			sta 	NSMantissa1,x
.9a37		b5 68		lda $68,x			lda		NSMantissa2,x
.9a39		35 69		and $69,x			and 		NSMantissa2+1,x
.9a3b		95 68		sta $68,x			sta 	NSMantissa2,x
.9a3d		b5 70		lda $70,x			lda		NSMantissa3,x
.9a3f		35 71		and $71,x			and 		NSMantissa3+1,x
.9a41		95 70		sta $70,x			sta 	NSMantissa3,x
.9a43		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a45		60		rts				rts
.9a46						OraInteger:
.9a46		fa		plx				plx
.9a47		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a49		15 51		ora $51,x			ora 	NSStatus+1,x
.9a4b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a4c		0a		asl a				asl 	a
.9a4d		10 05		bpl $9a54			bpl 	_NotRef
.9a4f		48		pha				pha
.9a50		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a53		68		pla				pla
.9a54						_NotRef:
.9a54		0a		asl a				asl 	a
.9a55		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a57		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a59		15 79		ora $79,x			ora 	NSExponent+1,x
.9a5b		f0 03		beq $9a60			beq 	_IntegerCode 				; if clear, then we have two integers
.9a5d		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.9a60						_IntegerCode:
.9a60		b5 58		lda $58,x			lda		NSMantissa0,x
.9a62		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9a64		95 58		sta $58,x			sta 	NSMantissa0,x
.9a66		b5 60		lda $60,x			lda		NSMantissa1,x
.9a68		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9a6a		95 60		sta $60,x			sta 	NSMantissa1,x
.9a6c		b5 68		lda $68,x			lda		NSMantissa2,x
.9a6e		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9a70		95 68		sta $68,x			sta 	NSMantissa2,x
.9a72		b5 70		lda $70,x			lda		NSMantissa3,x
.9a74		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9a76		95 70		sta $70,x			sta 	NSMantissa3,x
.9a78		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a7a		60		rts				rts
.9a7b						EorInteger:
.9a7b		fa		plx				plx
.9a7c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a7e		15 51		ora $51,x			ora 	NSStatus+1,x
.9a80		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a81		0a		asl a				asl 	a
.9a82		10 05		bpl $9a89			bpl 	_NotRef
.9a84		48		pha				pha
.9a85		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a88		68		pla				pla
.9a89						_NotRef:
.9a89		0a		asl a				asl 	a
.9a8a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a8c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a8e		15 79		ora $79,x			ora 	NSExponent+1,x
.9a90		f0 03		beq $9a95			beq 	_IntegerCode 				; if clear, then we have two integers
.9a92		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.9a95						_IntegerCode:
.9a95		b5 58		lda $58,x			lda		NSMantissa0,x
.9a97		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9a99		95 58		sta $58,x			sta 	NSMantissa0,x
.9a9b		b5 60		lda $60,x			lda		NSMantissa1,x
.9a9d		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9a9f		95 60		sta $60,x			sta 	NSMantissa1,x
.9aa1		b5 68		lda $68,x			lda		NSMantissa2,x
.9aa3		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9aa5		95 68		sta $68,x			sta 	NSMantissa2,x
.9aa7		b5 70		lda $70,x			lda		NSMantissa3,x
.9aa9		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9aab		95 70		sta $70,x			sta 	NSMantissa3,x
.9aad		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9aaf		60		rts				rts
.9ab0						WordIndirect:
.9ab0		fa		plx				plx
.9ab1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ab3		15 51		ora $51,x			ora 	NSStatus+1,x
.9ab5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ab6		0a		asl a				asl 	a
.9ab7		10 05		bpl $9abe			bpl 	_NotRef
.9ab9		48		pha				pha
.9aba		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9abd		68		pla				pla
.9abe						_NotRef:
.9abe		0a		asl a				asl 	a
.9abf		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ac1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ac3		15 79		ora $79,x			ora 	NSExponent+1,x
.9ac5		f0 03		beq $9aca			beq 	_IntegerCode 				; if clear, then we have two integers
.9ac7		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.9aca						_IntegerCode:
.9aca		20 d0 99	jsr $99d0			jsr 	AddCode 					; add the two values
.9acd		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9acf		95 50		sta $50,x			sta 	NSStatus,x
.9ad1		60		rts				rts
.9ad2						ByteIndirect:
.9ad2		fa		plx				plx
.9ad3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ad5		15 51		ora $51,x			ora 	NSStatus+1,x
.9ad7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ad8		0a		asl a				asl 	a
.9ad9		10 05		bpl $9ae0			bpl 	_NotRef
.9adb		48		pha				pha
.9adc		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9adf		68		pla				pla
.9ae0						_NotRef:
.9ae0		0a		asl a				asl 	a
.9ae1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ae3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ae5		15 79		ora $79,x			ora 	NSExponent+1,x
.9ae7		f0 03		beq $9aec			beq 	_IntegerCode 				; if clear, then we have two integers
.9ae9		4c 7a a8	jmp $a87a			jmp 	TypeError 					; anything else, type mismatch.
.9aec						_IntegerCode:
.9aec		20 d0 99	jsr $99d0			jsr 	AddCode 					; add the two values
.9aef		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9af1		95 50		sta $50,x			sta 	NSStatus,x
.9af3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9af4						ConvertInt16:
.9af4		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9af6		86 60		stx $60				stx 	NSMantissa1
.9af8		64 68		stz $68				stz 	NSMantissa2
.9afa		64 70		stz $70				stz 	NSMantissa3
.9afc		64 50		stz $50				stz 	NSStatus 					; positive integer
.9afe		a2 00		ldx #$00			ldx 	#0 							; stack level
.9b00		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9b02		80 00		bra $9b04			bra 	ConvertInt32
.9b04						ConvertInt32:
.9b04		5a		phy				phy
.9b05		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9b07		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9b09		10 08		bpl $9b13			bpl 	_CI32NotNeg
.9b0b		48		pha				pha
.9b0c		a9 2d		lda #$2d			lda 	#'-'
.9b0e		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9b11		c8		iny				iny
.9b12		68		pla				pla
.9b13						_CI32NotNeg:
.9b13		20 21 9b	jsr $9b21			jsr 	_CI32DivideConvert 			; recursive conversion
.9b16		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9b18		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9b1b		7a		ply				ply
.9b1c		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9b1e		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9b20		60		rts				rts
.9b21						_CI32DivideConvert:
.9b21		e8		inx				inx 								; write to next slot up
.9b22		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte 		 			; write the base out.
.9b25		ca		dex				dex
.9b26		20 4f 98	jsr $984f			jsr 	Int32Divide 				; divide
.9b29		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9b2b		48		pha				pha
.9b2c		20 0c 98	jsr $980c			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9b2f		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; is it zero ?
.9b32		f0 05		beq $9b39			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9b34		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9b36		20 21 9b	jsr $9b21			jsr 	_CI32DivideConvert 			; and recusrively call.
.9b39						_CI32NoRecurse:
.9b39		68		pla				pla 								; remainder
.9b3a		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9b3c		90 02		bcc $9b40			bcc 	_CI32NotHex
.9b3e		69 26		adc #$26			adc 	#6+32
.9b40						_CI32NotHex:
.9b40		69 30		adc #$30			adc 	#48
.9b42		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9b45		c8		iny				iny
.9b46		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9b47						PrecedenceLevel:
>9b47		04					.byte	 4	; $00 <<
>9b48		02					.byte	 2	; $01 <=
>9b49		02					.byte	 2	; $02 <>
>9b4a		00					.byte	 0	; $03 !!3
>9b4b		00					.byte	 0	; $04 ><
>9b4c		02					.byte	 2	; $05 >=
>9b4d		04					.byte	 4	; $06 >>
>9b4e		00					.byte	 0	; $07 !!7
>9b4f		00					.byte	 0	; $08 !!8
>9b50		00					.byte	 0	; $09 !!9
>9b51		00					.byte	 0	; $0a !!10
>9b52		00					.byte	 0	; $0b !!11
>9b53		00					.byte	 0	; $0c !!12
>9b54		00					.byte	 0	; $0d !!13
>9b55		00					.byte	 0	; $0e !!14
>9b56		00					.byte	 0	; $0f !!15
>9b57		00					.byte	 0	; $10 @
>9b58		00					.byte	 0	; $11 !!17
>9b59		00					.byte	 0	; $12 !!18
>9b5a		00					.byte	 0	; $13 [
>9b5b		04					.byte	 4	; $14 \
>9b5c		00					.byte	 0	; $15 ]
>9b5d		01					.byte	 1	; $16 ^
>9b5e		00					.byte	 0	; $17 _
>9b5f		00					.byte	 0	; $18 `
>9b60		00					.byte	 0	; $19 !!25
>9b61		00					.byte	 0	; $1a !!26
>9b62		00					.byte	 0	; $1b {
>9b63		01					.byte	 1	; $1c |
>9b64		00					.byte	 0	; $1d }
>9b65		00					.byte	 0	; $1e ~
>9b66		00					.byte	 0	; $1f <7F>
>9b67		00					.byte	 0	; $20
>9b68		05					.byte	 5	; $21 !
>9b69		00					.byte	 0	; $22 "
>9b6a		00					.byte	 0	; $23 #
>9b6b		05					.byte	 5	; $24 $
>9b6c		04					.byte	 4	; $25 %
>9b6d		01					.byte	 1	; $26 &
>9b6e		00					.byte	 0	; $27 '
>9b6f		00					.byte	 0	; $28 (
>9b70		00					.byte	 0	; $29 )
>9b71		04					.byte	 4	; $2a *
>9b72		03					.byte	 3	; $2b +
>9b73		00					.byte	 0	; $2c ,
>9b74		03					.byte	 3	; $2d -
>9b75		00					.byte	 0	; $2e .
>9b76		04					.byte	 4	; $2f /
>9b77		00					.byte	 0	; $30 0
>9b78		00					.byte	 0	; $31 1
>9b79		00					.byte	 0	; $32 2
>9b7a		00					.byte	 0	; $33 3
>9b7b		00					.byte	 0	; $34 4
>9b7c		00					.byte	 0	; $35 5
>9b7d		00					.byte	 0	; $36 6
>9b7e		00					.byte	 0	; $37 7
>9b7f		00					.byte	 0	; $38 8
>9b80		00					.byte	 0	; $39 9
>9b81		00					.byte	 0	; $3a :
>9b82		00					.byte	 0	; $3b ;
>9b83		02					.byte	 2	; $3c <
>9b84		02					.byte	 2	; $3d =
>9b85		02					.byte	 2	; $3e >
>9b86		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9b87						EvaluateExpressionAt0:
.9b87		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9b89						EvaluateExpression:
.9b89		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9b8b						EvaluateExpressionAtPrecedence:
.9b8b		48		pha				pha 								; save precedence level
.9b8c		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm 				; evaluate term into level X.
.9b8f		68		pla				pla 								; restore precedence level.
.9b90						_EXPRLoop:
.9b90		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9b92		b1 30		lda ($30),y			lda 	(codePtr),y
.9b94		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9b96		b0 25		bcs $9bbd			bcs 	_EXPRExit
.9b98		da		phx				phx 								; read the operator precedence
.9b99		aa		tax				tax
.9b9a		bd 47 9b	lda $9b47,x			lda 	PrecedenceLevel,x
.9b9d		fa		plx				plx
.9b9e		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9ba0		f0 1b		beq $9bbd			beq 	_EXPRExit
.9ba2		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9ba4		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9ba6		c5 37		cmp $37				cmp 	zTemp0+1
.9ba8		b0 13		bcs $9bbd			bcs		_EXPRExit 					; if current >= operator exit
.9baa		48		pha				pha 								; save current precedence.
.9bab		b1 30		lda ($30),y			lda 	(codePtr),y
.9bad		c8		iny				iny
.9bae		48		pha				pha
.9baf		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9bb1		e8		inx				inx 								; work out the right hand side.
.9bb2		20 8b 9b	jsr $9b8b			jsr 	EvaluateExpressionAtPrecedence
.9bb5		ca		dex				dex
.9bb6		68		pla				pla 								; get operator, call the code.
.9bb7		20 c0 9b	jsr $9bc0			jsr 	_EXPRCaller
.9bba		68		pla				pla 								; restore precedence level
.9bbb		80 d3		bra $9b90			bra 	_EXPRLoop 					; and go round.
.9bbd						_EXPRExit:
.9bbd		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9bbf		60		rts				rts
.9bc0						_EXPRCaller:
.9bc0		da		phx				phx 								; save on stack, first thing is to restore it
.9bc1		0a		asl a				asl 	a 							; double so can use vectors into X
.9bc2		aa		tax				tax
.9bc3		7c 14 92	jmp ($9214,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9bc6						FloatingPointAdd:
.9bc6		20 3c 9d	jsr $9d3c			jsr 	FloatPrepare 				; prepare for floats
.9bc9		80 09		bra $9bd4			bra 	FloatAdd
.9bcb						FloatingPointSub:
.9bcb		20 3c 9d	jsr $9d3c			jsr 	FloatPrepare 				; prepare for floats
.9bce						FloatSubtract:
.9bce		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9bd0		49 80		eor #$80			eor 	#$80
.9bd2		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9bd4						FloatAdd:
.9bd4		48		pha				pha
.9bd5		5a		phy				phy
.9bd6		20 4b 9d	jsr $9d4b			jsr 	NSNormalise 				; normalise S[X]
.9bd9		f0 51		beq $9c2c			beq 	_FAReturn1
.9bdb		e8		inx				inx 								; normalise S[X+1]
.9bdc		20 4b 9d	jsr $9d4b			jsr 	NSNormalise
.9bdf		ca		dex				dex
.9be0		c9 00		cmp #$00			cmp 	#0
.9be2		f0 60		beq $9c44			beq 	_FAExit 					; if so, just return A
.9be4		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9be6		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9be8		f0 18		beq $9c02			beq 	_FAExponentsEqual
.9bea		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9bec		a8		tay				tay
.9bed		38		sec				sec 								; do a signed comparison of the exponents.
.9bee		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9bf0		50 02		bvc $9bf4			bvc 	_FANoSignedChange
.9bf2		49 80		eor #$80			eor 	#$80
.9bf4						_FANoSignedChange:
.9bf4		29 80		and #$80			and 	#$80
.9bf6		10 02		bpl $9bfa			bpl 	_FAHaveMax
.9bf8		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9bfa						_FAHaveMax:
.9bfa		20 47 9c	jsr $9c47			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9bfd		e8		inx				inx
.9bfe		20 47 9c	jsr $9c47			jsr 	_FAShiftToExponent
.9c01		ca		dex				dex
.9c02						_FAExponentsEqual:
.9c02		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9c04		55 51		eor $51,x			eor 	NSStatus+1,x
.9c06		30 0e		bmi $9c16			bmi 	_FADifferentSigns
.9c08		20 7f 99	jsr $997f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9c0b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9c0d		10 35		bpl $9c44			bpl 	_FAExit 					; if no, we are done.
.9c0f		20 0b a7	jsr $a70b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9c12		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9c14		80 2e		bra $9c44			bra 	_FAExit
.9c16						_FADifferentSigns:
.9c16		20 99 99	jsr $9999			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9c19		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9c1b		10 06		bpl $9c23			bpl 	_FACheckZero 				; if no, check for -0
.9c1d		20 b4 a6	jsr $a6b4			jsr 	NSMNegate 					; netate result
.9c20		20 bb a6	jsr $a6bb			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9c23						_FACheckZero:
.9c23		20 14 a7	jsr $a714			jsr 	NSMIsZero	 				; check for -0
.9c26		d0 1c		bne $9c44			bne 	_FAExit
.9c28		74 50		stz $50,x			stz 	NSStatus,x
.9c2a		80 18		bra $9c44			bra 	_FAExit
.9c2c						_FAReturn1:
.9c2c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9c2e		95 58		sta $58,x			sta 	NSMantissa0,x
.9c30		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9c32		95 60		sta $60,x			sta 	NSMantissa1,x
.9c34		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9c36		95 68		sta $68,x			sta 	NSMantissa2,x
.9c38		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9c3a		95 70		sta $70,x			sta 	NSMantissa3,x
.9c3c		b5 79		lda $79,x			lda 	NSExponent+1,x
.9c3e		95 78		sta $78,x			sta 	NSExponent,x
.9c40		b5 51		lda $51,x			lda 	NSStatus+1,x
.9c42		95 50		sta $50,x			sta 	NSStatus,x
.9c44						_FAExit:
.9c44		7a		ply				ply
.9c45		68		pla				pla
.9c46		60		rts				rts
.9c47						_FAShiftToExponent:
.9c47						_FAShiftToExponent2:
.9c47		98		tya				tya 								; compare Y to exponent
.9c48		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9c4a		f0 07		beq $9c53			beq 	_FASEExit 					; exit if so.
.9c4c		20 0b a7	jsr $a70b			jsr 	NSMShiftRight	 			; shift the mantissa right
.9c4f		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9c51		80 f4		bra $9c47			bra 	_FAShiftToExponent2
.9c53						_FASEExit:
.9c53		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9c54						CompareFloat:
.9c54		20 ce 9b	jsr $9bce			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9c57		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9c59		29 f8		and #$f8			and 	#$F8
.9c5b		15 68		ora $68,x			ora 	NSMantissa2,x
.9c5d		15 70		ora $70,x			ora 	NSMantissa3,x
.9c5f		f0 08		beq $9c69			beq 	_FCExit 					; zero, so approximately identical
.9c61		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9c63		34 50		bit $50,x			bit 	NSStatus,x
.9c65		10 02		bpl $9c69			bpl 	_FCExit
.9c67						_FCNegative:
.9c67		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9c69						_FCExit:
.9c69		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9c6a						FDivideCommand:
.9c6a		fa		plx				plx	 								; restore stack position
.9c6b		20 3c 9d	jsr $9d3c			jsr 	FloatPrepare 				; prepare for floats
.9c6e						FloatDivide:
.9c6e		48		pha				pha
.9c6f		e8		inx				inx
.9c70		20 4b 9d	jsr $9d4b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c73		ca		dex				dex
.9c74		c9 00		cmp #$00			cmp 	#0
.9c76		f0 1d		beq $9c95			beq 	_FDZero
.9c78		20 4b 9d	jsr $9d4b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c7b		f0 16		beq $9c93			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9c7d		20 70 98	jsr $9870			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9c80		20 0c 98	jsr $980c			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9c83		20 4b 9d	jsr $9d4b			jsr		NSNormalise 				; renormalise
.9c86		20 00 99	jsr $9900			jsr 	CalculateSign 				; calculate result sign
.9c89		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9c8b		38		sec				sec
.9c8c		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9c8e		38		sec				sec
.9c8f		e9 1e		sbc #$1e			sbc 	#30
.9c91		95 78		sta $78,x			sta 	NSExponent,x
.9c93						_FDExit:
.9c93		68		pla				pla
.9c94		60		rts				rts
.9c95						_FDZero:
.9c95		a9 03		lda #$03		lda	#3
.9c97		4c 85 96	jmp $9685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9c9a						FloatFractionalPart:
.9c9a		5a		phy				phy
.9c9b		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9c9d		29 7f		and #$7f			and 	#$7F
.9c9f		95 50		sta $50,x			sta 	NSStatus,x
.9ca1		20 4b 9d	jsr $9d4b			jsr 	NSNormalise
.9ca4		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9ca6		38		sec				sec
.9ca7		e9 e0		sbc #$e0			sbc 	#$E0
.9ca9		90 29		bcc $9cd4			bcc 	_FFPExit 					; already fractional
.9cab		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9cad		b0 22		bcs $9cd1			bcs 	_FFPZero
.9caf		a8		tay				tay 								; put count to do in Y
.9cb0		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9cb2		20 d6 9c	jsr $9cd6			jsr 	_FFPPartial
.9cb5		95 70		sta $70,x			sta 	NSMantissa3,x
.9cb7		b5 68		lda $68,x			lda 	NSMantissa2,x
.9cb9		20 d6 9c	jsr $9cd6			jsr 	_FFPPartial
.9cbc		95 68		sta $68,x			sta 	NSMantissa2,x
.9cbe		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cc0		20 d6 9c	jsr $9cd6			jsr 	_FFPPartial
.9cc3		95 60		sta $60,x			sta 	NSMantissa1,x
.9cc5		b5 58		lda $58,x			lda 	NSMantissa0,x
.9cc7		20 d6 9c	jsr $9cd6			jsr 	_FFPPartial
.9cca		95 58		sta $58,x			sta 	NSMantissa0,x
.9ccc		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; zeroed check.
.9ccf		d0 03		bne $9cd4			bne 	_FFPExit
.9cd1						_FFPZero:
.9cd1		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.9cd4						_FFPExit:
.9cd4		7a		ply				ply
.9cd5		60		rts				rts
.9cd6						_FFPPartial:
.9cd6		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9cd8		f0 17		beq $9cf1			beq 	_FFFPPExit
.9cda		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9cdc		b0 0c		bcs $9cea			bcs 	_FFFPPWholeByte
.9cde		5a		phy				phy
.9cdf						_FFFPPLeft:
.9cdf		0a		asl a				asl 	a
.9ce0		88		dey				dey
.9ce1		d0 fc		bne $9cdf			bne 	_FFFPPLeft
.9ce3		7a		ply				ply
.9ce4						_FFFPPRight:
.9ce4		4a		lsr a				lsr 	a
.9ce5		88		dey				dey
.9ce6		d0 fc		bne $9ce4			bne 	_FFFPPRight
.9ce8		80 07		bra $9cf1			bra 	_FFFPPExit
.9cea						_FFFPPWholeByte:
.9cea		98		tya				tya 								; subtract 8 from count
.9ceb		38		sec				sec
.9cec		e9 08		sbc #$08			sbc 	#8
.9cee		a8		tay				tay
.9cef		a9 00		lda #$00			lda 	#0 							; and clear all
.9cf1						_FFFPPExit:
.9cf1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9cf2						FloatIntegerPart:
.9cf2		48		pha				pha
.9cf3		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9cf5		f0 1d		beq $9d14			beq 	_FIPExit 					; if so do nothing
.9cf7		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; is it zero ?
.9cfa		f0 15		beq $9d11			beq 	_FIPZero 					; if so return zero.
.9cfc		20 4b 9d	jsr $9d4b			jsr 	NSNormalise 				; normalise
.9cff		f0 10		beq $9d11			beq 	_FIPZero 					; normalised to zero, exit zero
.9d01						_FIPShift:
.9d01		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9d03		10 07		bpl $9d0c			bpl 	_FIPCheckZero
.9d05		20 0b a7	jsr $a70b			jsr 	NSMShiftRight 				; shift mantissa right
.9d08		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9d0a		80 f5		bra $9d01			bra 	_FIPShift
.9d0c						_FIPCheckZero:
.9d0c		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; avoid -0 problem
.9d0f		d0 03		bne $9d14			bne 	_FIPExit 					; set to zero if mantissa zero.
.9d11						_FIPZero:
.9d11		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.9d14						_FIPExit:
.9d14		68		pla				pla
.9d15		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9d16						FloatingPointMultiply:
.9d16		20 3c 9d	jsr $9d3c			jsr 	FloatPrepare 				; prepare for floats
.9d19						FloatMultiply:
.9d19		48		pha				pha
.9d1a		20 4b 9d	jsr $9d4b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9d1d		f0 18		beq $9d37			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9d1f		e8		inx				inx
.9d20		20 4b 9d	jsr $9d4b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9d23		ca		dex				dex
.9d24		c9 00		cmp #$00			cmp 	#0
.9d26		f0 0c		beq $9d34			beq 	_FDSetZero
.9d28		20 c2 98	jsr $98c2			jsr 	MultiplyShort 				; calculate the result.
.9d2b		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9d2d		18		clc				clc
.9d2e		75 79		adc $79,x			adc 	NSExponent+1,x
.9d30		95 78		sta $78,x			sta 	NSExponent,x
.9d32		80 03		bra $9d37			bra 	_FDExit
.9d34						_FDSetZero:
.9d34		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; return 0
.9d37						_FDExit:
.9d37		20 4b 9d	jsr $9d4b			jsr 	NSNormalise 				; normalise the result
.9d3a		68		pla				pla
.9d3b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9d3c						FloatPrepare:
.9d3c		20 47 9e	jsr $9e47			jsr 	DereferenceTopTwo 			; dereference the top two values
.9d3f		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9d41		15 51		ora $51,x			ora 	NSStatus+1,x
.9d43		29 10		and #$10			and 	#NSBIsString
.9d45		d0 01		bne $9d48			bne 	_FDType
.9d47		60		rts				rts
.9d48						_FDType:
.9d48		4c 7a a8	jmp $a87a			jmp 	TypeError
.9d4b						NSNormalise:
.9d4b		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9d4d		29 80		and #$80			and 	#$80
.9d4f		09 08		ora #$08			ora 	#NSTFloat
.9d51		95 50		sta $50,x			sta 	NSStatus,x
.9d53		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; if zero exit
.9d56		d0 07		bne $9d5f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9d58		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9d5a		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9d5c		a9 00		lda #$00			lda 	#0 							; set Z flag
.9d5e		60		rts				rts
.9d5f						_NSNormaliseOptimise:
.9d5f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9d61		d0 19		bne $9d7c			bne 	_NSNormaliseLoop
.9d63		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9d65		30 15		bmi $9d7c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9d67		95 70		sta $70,x			sta 	NSMantissa3,x
.9d69		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d6b		95 68		sta $68,x			sta 	NSMantissa2,x
.9d6d		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d6f		95 60		sta $60,x			sta 	NSMantissa1,x
.9d71		74 58		stz $58,x			stz 	NSMantissa0,x
.9d73		b5 78		lda $78,x			lda 	NSExponent,x
.9d75		38		sec				sec
.9d76		e9 08		sbc #$08			sbc 	#8
.9d78		95 78		sta $78,x			sta 	NSExponent,x
.9d7a		80 e3		bra $9d5f			bra 	_NSNormaliseOptimise
.9d7c						_NSNormaliseLoop:
.9d7c		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9d7e		70 07		bvs $9d87			bvs 	_NSNExit 					; exit if so with Z flag clear
.9d80		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; shift mantissa left
.9d83		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9d85		80 f5		bra $9d7c			bra 	_NSNormaliseLoop
.9d87						_NSNExit:
.9d87		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9d89		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d8a						AssignNumber:
.9d8a		5a		phy				phy
.9d8b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d8d		85 36		sta $36				sta 	zTemp0
.9d8f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d91		85 37		sta $37				sta 	zTemp0+1
.9d93		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9d95		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d97		95 50		sta $50,x			sta 	NSStatus,x
.9d99		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d9b		c9 08		cmp #$08			cmp 	#NSTFloat
.9d9d		f0 24		beq $9dc3			beq 	_ANFloat
.9d9f		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9da1		f0 03		beq $9da6			beq		_ANNotFloat
.9da3		4c 75 a8	jmp $a875			jmp 	RangeError					; if it is, report an error.
.9da6						_ANNotFloat:
.9da6		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9da8		29 03		and #$03			and 	#3
.9daa		d0 05		bne $9db1			bne 	_ANByteWord
.9dac		20 ce 9d	jsr $9dce			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9daf		80 1b		bra $9dcc			bra 	_ANExit
.9db1						_ANByteWord:
.9db1		48		pha				pha 								; save count
.9db2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9db4		92 36		sta ($36)			sta 	(zTemp0)
.9db6		68		pla				pla
.9db7		c9 01		cmp #$01			cmp	 	#1
.9db9		f0 11		beq $9dcc			beq 	_ANExit
.9dbb		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9dbd		a0 01		ldy #$01			ldy 	#1
.9dbf		91 36		sta ($36),y			sta 	(zTemp0),y
.9dc1		80 09		bra $9dcc			bra 	_ANExit
.9dc3						_ANFloat:
.9dc3		20 ce 9d	jsr $9dce			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9dc6		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9dc8		a0 04		ldy #$04			ldy 	#4
.9dca		91 36		sta ($36),y			sta 	(zTemp0),y
.9dcc						_ANExit:
.9dcc		7a		ply				ply
.9dcd		60		rts				rts
.9dce						_ANCopy4PackSign:
.9dce		a0 03		ldy #$03			ldy 	#3
.9dd0		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9dd2		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9dd4		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9dd6		91 36		sta ($36),y			sta 	(zTemp0),y
.9dd8		88		dey				dey
.9dd9		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9ddb		91 36		sta ($36),y			sta 	(zTemp0),y
.9ddd		88		dey				dey
.9dde		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9de0		91 36		sta ($36),y			sta 	(zTemp0),y
.9de2		88		dey				dey
.9de3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9de5		91 36		sta ($36),y			sta 	(zTemp0),y
.9de7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9de8						AssignString:
.9de8		5a		phy				phy
.9de9		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9deb		85 38		sta $38				sta 	zTemp1
.9ded		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9def		85 39		sta $39				sta 	zTemp1+1
.9df1		b5 58		lda $58,x			lda 	NSMantissa0,x
.9df3		85 36		sta $36				sta 	zTemp0
.9df5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9df7		85 37		sta $37				sta 	zTemp0+1
.9df9		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9dfb		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dfd		f0 23		beq $9e22			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dff		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9e00		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9e02		e9 02		sbc #$02			sbc 	#2
.9e04		85 3c		sta $3c				sta 	zsTemp
.9e06		a0 01		ldy #$01			ldy 	#1
.9e08		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e0a		e9 00		sbc #$00			sbc 	#0
.9e0c		85 3d		sta $3d				sta 	zsTemp+1
.9e0e		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9e10						_ASGetLength:
.9e10		c8		iny				iny
.9e11		b1 38		lda ($38),y			lda 	(zTemp1),y
.9e13		d0 fb		bne $9e10			bne 	_ASGetLength
.9e15		98		tya				tya 								; is this length <= current length
.9e16		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9e18		90 1e		bcc $9e38			bcc 	_ASCopyString
.9e1a		f0 1c		beq $9e38			beq 	_ASCopyString
.9e1c		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9e1e		a0 01		ldy #$01			ldy 	#1
.9e20		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e22						_ASNewStringRequired:
.9e22		e8		inx				inx 								; concrete the new string.
.9e23		20 44 b8	jsr $b844			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e26		ca		dex				dex
.9e27		18		clc				clc
.9e28		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e2a		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e2c		92 36		sta ($36)			sta 	(zTemp0)
.9e2e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9e30		69 00		adc #$00			adc 	#0
.9e32		a0 01		ldy #$01			ldy 	#1
.9e34		91 36		sta ($36),y			sta 	(zTemp0),y
.9e36		80 0d		bra $9e45			bra 	_ASExit
.9e38						_ASCopyString:
.9e38		a0 00		ldy #$00			ldy 	#0
.9e3a						_ASCopyLoop:
.9e3a		b1 38		lda ($38),y			lda 	(zTemp1),y
.9e3c		c8		iny				iny
.9e3d		c8		iny				iny
.9e3e		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e40		88		dey				dey
.9e41		c9 00		cmp #$00			cmp 	#0
.9e43		d0 f5		bne $9e3a			bne 	_ASCopyLoop
.9e45						_ASExit:
.9e45		7a		ply				ply
.9e46		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e47						DereferenceTopTwo:
.9e47		e8		inx				inx
.9e48		20 4c 9e	jsr $9e4c			jsr 	Dereference 				; deref x+1
.9e4b		ca		dex				dex  								; falls through to deref x
.9e4c						Dereference:
.9e4c		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9e4e		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9e50		f0 48		beq $9e9a			beq 	_DRFExit 					; not a reference, so exit.
.9e52		5a		phy				phy
.9e53		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e55		85 36		sta $36				sta 	zTemp0
.9e57		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e59		85 37		sta $37				sta 	zTemp0+1
.9e5b		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9e5d		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e5f		95 58		sta $58,x			sta 	NSMantissa0,x
.9e61		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9e63		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e65		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e67		f0 0e		beq $9e77			beq 	_DRFDereferenceTwo
.9e69		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e6b		f0 2f		beq $9e9c			beq 	_DRFFull
.9e6d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e6f		29 03		and #$03			and 	#3
.9e71		f0 29		beq $9e9c			beq 	_DRFFull 					; the whole word
.9e73		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e75		f0 06		beq $9e7d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e77						_DRFDereferenceTwo:
.9e77		a0 01		ldy #$01			ldy 	#1
.9e79		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e7b		95 60		sta $60,x			sta 	NSMantissa1,x
.9e7d						_DRFClear23:
.9e7d		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e7f		74 70		stz $70,x			stz 	NSMantissa3,x
.9e81		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9e83		29 18		and #$18			and 	#NSBTypeMask
.9e85		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9e87		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e89		d0 0e		bne $9e99			bne 	_DRFNotString
.9e8b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9e8d		15 60		ora $60,x			ora 	NSMantissa1,x
.9e8f		d0 08		bne $9e99			bne 	_DRFNotString
.9e91		a9 9b		lda #$9b			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e93		95 58		sta $58,x			sta 	NSMantissa0,x
.9e95		a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e97		95 60		sta $60,x			sta 	NSMantissa1,x
.9e99						_DRFNotString
.9e99		7a		ply				ply 								; restore Y and exit
.9e9a						_DRFExit:
.9e9a		60		rts				rts
.9e9b						_DRFNullString:
>9e9b		00						.byte 	0
.9e9c						_DRFFull:
.9e9c		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e9e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ea0		95 60		sta $60,x			sta 	NSMantissa1,x
.9ea2		c8		iny				iny
.9ea3		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ea5		95 68		sta $68,x			sta 	NSMantissa2,x
.9ea7		c8		iny				iny
.9ea8		b1 36		lda ($36),y			lda 	(zTemp0),y
.9eaa		95 70		sta $70,x			sta 	NSMantissa3,x
.9eac		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9eae		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9eb0		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9eb2		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9eb4		f0 05		beq $9ebb			beq 	_DRFNoExponent
.9eb6		c8		iny				iny 								; if not, read the exponent as well.
.9eb7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9eb9		95 78		sta $78,x			sta 	NSExponent,x
.9ebb						_DRFNoExponent:
.9ebb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ebd		10 0a		bpl $9ec9			bpl 	_DRFExit2 					; if not, then exit.
.9ebf		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ec1		95 70		sta $70,x			sta 	NSMantissa3,x
.9ec3		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9ec5		09 80		ora #$80			ora 	#NSBIsNegative
.9ec7		95 50		sta $50,x			sta 	NSStatus,x
.9ec9						_DRFExit2:
.9ec9		7a		ply				ply
.9eca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9ecb						EncodeNumberStart:
.9ecb		38		sec				sec
.9ecc		80 01		bra $9ecf			bra 	EncodeNumberContinue+1
.9ece						EncodeNumberContinue:
.9ece		18		clc				clc
.9ecf						EncodeNumber:
.9ecf		08		php				php 								; save reset flag.
.9ed0		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ed2		f0 12		beq $9ee6			beq 	_ENIsOkay
.9ed4		c9 30		cmp #$30			cmp 	#"0"
.9ed6		90 04		bcc $9edc			bcc 	_ENBadNumber
.9ed8		c9 3a		cmp #$3a			cmp 	#"9"+1
.9eda		90 0a		bcc $9ee6			bcc 	_ENIsOkay
.9edc						_ENBadNumber:
.9edc		28		plp				plp 								; throw saved reset
.9edd		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9ee0		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ee2		f0 7b		beq $9f5f			beq 	_ENConstructFinal
.9ee4						_ENFail:
.9ee4		18		clc				clc 								; not allowed
.9ee5		60		rts				rts
.9ee6						_ENIsOkay:
.9ee6		28		plp				plp 								; are we restarting
.9ee7		90 15		bcc $9efe			bcc 	_ENNoRestart
.9ee9						_ENStartEncode:
.9ee9		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9eeb		f0 0c		beq $9ef9			beq 	_ENFirstDP
.9eed		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9eef		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte 					; in single byte mode.
.9ef2		a9 01		lda #$01			lda 	#ESTA_Low
.9ef4						_ENExitChange:
.9ef4		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9ef7		38		sec				sec
.9ef8		60		rts				rts
.9ef9						_ENFirstDP:
.9ef9		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; clear integer part
.9efc		80 3c		bra $9f3a			bra 	_ESTASwitchFloat			; go straight to float and exi
.9efe						_ENNoRestart:
.9efe		48		pha				pha 								; save digit or DP on stack.
.9eff		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9f02		c9 01		cmp #$01			cmp 	#ESTA_Low
.9f04		f0 09		beq $9f0f			beq  	_ESTALowState
.9f06		c9 02		cmp #$02			cmp 	#ESTA_High
.9f08		f0 26		beq $9f30			beq 	_ESTAHighState
.9f0a		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f0c		f0 38		beq $9f46			beq 	_ESTADecimalState
>9f0e		db						.byte 	$DB 						; causes a break in the emulator
.9f0f						_ESTALowState:
.9f0f		68		pla				pla 								; get value back
.9f10		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f12		f0 26		beq $9f3a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f14		29 0f		and #$0f			and 	#15 						; make digit
.9f16		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9f19		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f1b		0a		asl a				asl 	a
.9f1c		0a		asl a				asl 	a
.9f1d		75 58		adc $58,x			adc 	NSMantissa0,x
.9f1f		0a		asl a				asl 	a
.9f20		6d 06 04	adc $0406			adc 	digitTemp
.9f23		95 58		sta $58,x			sta 	NSMantissa0,x
.9f25		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f27		90 05		bcc $9f2e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f29		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f2b		8d 05 04	sta $0405			sta 	encodeState
.9f2e						_ESTANoSwitch:
.9f2e		38		sec				sec
.9f2f		60		rts				rts
.9f30						_ESTAHighState:
.9f30		68		pla				pla 								; get value back
.9f31		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f33		f0 05		beq $9f3a			beq 	_ESTASwitchFloat
.9f35		20 93 9f	jsr $9f93			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f38		38		sec				sec
.9f39		60		rts				rts
.9f3a						_ESTASwitchFloat:
.9f3a		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9f3d		e8		inx				inx 								; zero the decimal additive.
.9f3e		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.9f41		ca		dex				dex
.9f42		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f44		80 ae		bra $9ef4			bra 	_ENExitChange
.9f46						_ESTADecimalState:
.9f46		68		pla				pla 								; digit.
.9f47		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f49		f0 99		beq $9ee4			beq 	_ENFail
.9f4b		e8		inx				inx 								; put digit into fractional part of X+1
.9f4c		20 93 9f	jsr $9f93			jsr 	ESTAShiftDigitIntoMantissa
.9f4f		ca		dex				dex
.9f50		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9f53		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9f56		c9 0b		cmp #$0b			cmp 	#11
.9f58		f0 02		beq $9f5c			beq 	_ESTADSFail
.9f5a		38		sec				sec
.9f5b		60		rts				rts
.9f5c						_ESTADSFail:
.9f5c		4c 75 a8	jmp $a875			jmp 	RangeError
.9f5f						_ENConstructFinal:
.9f5f		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9f62		f0 2d		beq $9f91			beq 	_ENCFExit 					; no decimals
.9f64		5a		phy				phy
.9f65		0a		asl a				asl 	a 							; x 4 and CLC
.9f66		0a		asl a				asl 	a
.9f67		6d 07 04	adc $0407			adc 	decimalCount
.9f6a		a8		tay				tay
.9f6b		b9 34 a8	lda $a834,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f6e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9f70		b9 35 a8	lda $a835,y			lda 	DecimalScalarTable-5+1,y
.9f73		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9f75		b9 36 a8	lda $a836,y			lda 	DecimalScalarTable-5+2,y
.9f78		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9f7a		b9 37 a8	lda $a837,y			lda 	DecimalScalarTable-5+3,y
.9f7d		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9f7f		b9 38 a8	lda $a838,y			lda 	DecimalScalarTable-5+4,y
.9f82		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9f84		a9 08		lda #$08			lda 	#NSTFloat
.9f86		95 52		sta $52,x			sta 	NSStatus+2,x
.9f88		7a		ply				ply
.9f89		e8		inx				inx 								; multiply decimal const by decimal scalar
.9f8a		20 19 9d	jsr $9d19			jsr 	FloatMultiply
.9f8d		ca		dex				dex
.9f8e		20 d4 9b	jsr $9bd4			jsr 	FloatAdd 					; add to integer part.
.9f91						_ENCFExit:
.9f91		18		clc				clc 								; reject the digit.
.9f92		60		rts				rts
.9f93						ESTAShiftDigitIntoMantissa:
.9f93		29 0f		and #$0f			and 	#15 						; save digit
.9f95		48		pha				pha
.9f96		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f98		48		pha				pha
.9f99		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f9b		48		pha				pha
.9f9c		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f9e		48		pha				pha
.9f9f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9fa1		48		pha				pha
.9fa2		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; x 2
.9fa5		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; x 4
.9fa8		18		clc				clc 								; pop mantissa and add
.9fa9		68		pla				pla
.9faa		75 58		adc $58,x			adc 	NSMantissa0,x
.9fac		95 58		sta $58,x			sta 	NSMantissa0,x
.9fae		68		pla				pla
.9faf		75 60		adc $60,x			adc 	NSMantissa1,x
.9fb1		95 60		sta $60,x			sta 	NSMantissa1,x
.9fb3		68		pla				pla
.9fb4		75 68		adc $68,x			adc 	NSMantissa2,x
.9fb6		95 68		sta $68,x			sta 	NSMantissa2,x
.9fb8		68		pla				pla
.9fb9		75 70		adc $70,x			adc 	NSMantissa3,x
.9fbb		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9fbd		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; x 10
.9fc0		68		pla				pla 								; add digit
.9fc1		18		clc				clc
.9fc2		75 58		adc $58,x			adc 	NSMantissa0,x
.9fc4		95 58		sta $58,x			sta 	NSMantissa0,x
.9fc6		90 0a		bcc $9fd2			bcc 	_ESTASDExit
.9fc8		f6 60		inc $60,x			inc 	NSMantissa1,x
.9fca		d0 06		bne $9fd2			bne 	_ESTASDExit
.9fcc		f6 68		inc $68,x			inc 	NSMantissa2,x
.9fce		d0 02		bne $9fd2			bne 	_ESTASDExit
.9fd0		f6 70		inc $70,x			inc 	NSMantissa3,x
.9fd2						_ESTASDExit:
.9fd2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fd3						EvaluateTerm:
.9fd3		b1 30		lda ($30),y			lda 	(codePtr),y
.9fd5		30 18		bmi $9fef			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fd7		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fd9		b0 6c		bcs $a047			bcs 	_ETVariable
.9fdb		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fdd		90 6b		bcc $a04a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fdf		c9 3a		cmp #$3a			cmp 	#'9'+1
.9fe1		b0 67		bcs $a04a			bcs 	_ETPuncUnary
.9fe3		20 cb 9e	jsr $9ecb			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fe6						_ETNumber:
.9fe6		c8		iny				iny 								; keep encoding until we have the numbers
.9fe7		b1 30		lda ($30),y			lda 	(codePtr),y
.9fe9		20 ce 9e	jsr $9ece			jsr 	EncodeNumberContinue
.9fec		b0 f8		bcs $9fe6			bcs 	_ETNumber 					; go back if accepted.
.9fee		60		rts				rts
.9fef						_ETCheckUnary:
.9fef		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9ff1		f0 3f		beq $a032			beq 	_ETString
.9ff3		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9ff5		f0 12		beq $a009			beq 	_ETHexConstant
.9ff7		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9ff9		90 0b		bcc $a006			bcc 	_ETSyntaxError
.9ffb		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1
.9ffd		b0 07		bcs $a006			bcs 	_ETSyntaxError
.9fff		da		phx				phx 								; push X on the stack
.a000		0a		asl a				asl 	a 							; put vector x 2 into X
.a001		aa		tax				tax
.a002		c8		iny				iny 								; consume unary function token
.a003		7c 94 92	jmp ($9294,x)			jmp 	(VectorSet0,x) 				; and do it.
.a006						_ETSyntaxError:
.a006		4c 70 a8	jmp $a870			jmp 	SyntaxError
.a009						_ETHexConstant:
.a009		c8		iny				iny 								; skip #
.a00a		c8		iny				iny 								; skip count
.a00b		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; clear result
.a00e						_ETHLoop:
.a00e		b1 30		lda ($30),y			lda 	(codePtr),y
.a010		c8		iny				iny 								; and consume
.a011		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a013		f0 1c		beq $a031			beq 	_ETHExit
.a015		48		pha				pha 								; save on stack.
.a016		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; x 2
.a019		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; x 4
.a01c		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; x 8
.a01f		20 01 a7	jsr $a701			jsr 	NSMShiftLeft 				; x 16
.a022		68		pla				pla 								; ASCII
.a023		c9 41		cmp #$41			cmp 	#'A'
.a025		90 02		bcc $a029			bcc 	_ETHNotChar
.a027		e9 07		sbc #$07			sbc 	#7
.a029						_ETHNotChar:
.a029		29 0f		and #$0f			and 	#15 						; digit now
.a02b		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a02d		95 58		sta $58,x			sta 	NSMantissa0,x
.a02f		80 dd		bra $a00e			bra 	_ETHLoop 					; go round.
.a031						_ETHExit:
.a031		60		rts				rts
.a032						_ETString:
.a032		c8		iny				iny 								; look at length
.a033		b1 30		lda ($30),y			lda 	(codePtr),y
.a035		48		pha				pha
.a036		c8		iny				iny 								; first character
.a037		20 6c ae	jsr $ae6c			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a03a		68		pla				pla 								; restore count and save
.a03b		85 36		sta $36				sta 	zTemp0
.a03d		98		tya				tya 								; add length to Y to skip it.
.a03e		18		clc				clc
.a03f		65 36		adc $36				adc 	zTemp0
.a041		a8		tay				tay
.a042		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a044		95 50		sta $50,x			sta 	NSStatus,x
.a046		60		rts				rts
.a047						_ETVariable:
.a047		4c 9c a0	jmp $a09c			jmp 	VariableHandler
.a04a						_ETPuncUnary:
.a04a		c8		iny				iny 								; consume the unary character
.a04b		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a04d		f0 2b		beq $a07a			beq 	_ETUnaryNegate
.a04f		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; @ reference -> constant
.a051		f0 36		beq $a089			beq 	_ETDereference
.a053		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a055		f0 3e		beq $a095			beq 	_ETParenthesis
.a057		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a059		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a05b		f0 06		beq $a063			beq 	_ETIndirection
.a05d		e6 36		inc $36				inc 	zTemp0
.a05f		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a061		d0 a3		bne $a006			bne 	_ETSyntaxError
.a063						_ETIndirection:
.a063		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a065		1a		inc a				inc 	a
.a066		48		pha				pha
.a067		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm				; evaluate the term
.a06a		20 4c 9e	jsr $9e4c			jsr 	Dereference 				; dereference it.
.a06d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a06f		d0 06		bne $a077			bne 	_ETTypeMismatch
.a071		68		pla				pla 								; indirection 1-2
.a072		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a074		95 50		sta $50,x			sta 	NSStatus,x
.a076		60		rts				rts
.a077						_ETTypeMismatch:
.a077		4c 7a a8	jmp $a87a			jmp 	TypeError
.a07a						_ETUnaryNegate:
.a07a		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm				; evaluate the term
.a07d		20 4c 9e	jsr $9e4c			jsr 	Dereference 				; dereference it.
.a080		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a082		29 10		and #$10			and 	#NSTString
.a084		d0 f1		bne $a077			bne 	_ETTypeMismatch
.a086		4c b4 a6	jmp $a6b4			jmp 	NSMNegate  					; just toggles the sign bit.
.a089						_ETDereference:
.a089		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm				; evaluate the term
.a08c		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a08e		29 20		and #$20			and 	#NSBIsReference
.a090		f0 e5		beq $a077			beq 	_ETTypeMismatch
.a092		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a094		60		rts				rts
.a095						_ETParenthesis:
.a095		20 89 9b	jsr $9b89			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a098		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; check for )
.a09b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a09c						VariableHandler:
.a09c		b1 30		lda ($30),y			lda 	(codePtr),y
.a09e		18		clc				clc
.a09f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0a1		85 37		sta $37				sta 	zTemp0+1
.a0a3		c8		iny				iny
.a0a4		b1 30		lda ($30),y			lda 	(codePtr),y
.a0a6		85 36		sta $36				sta 	zTemp0
.a0a8		c8		iny				iny
.a0a9		18		clc				clc									; copy variable address+3 to mantissa
.a0aa		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a0ac		95 58		sta $58,x			sta 	NSMantissa0,x
.a0ae		a5 37		lda $37				lda 	zTemp0+1
.a0b0		69 00		adc #$00			adc 	#0
.a0b2		95 60		sta $60,x			sta 	NSMantissa1,x
.a0b4		74 68		stz $68,x			stz 	NSMantissa2,x
.a0b6		74 70		stz $70,x			stz 	NSMantissa3,x
.a0b8		74 78		stz $78,x			stz 	NSExponent,x
.a0ba		5a		phy				phy
.a0bb		a0 02		ldy #$02			ldy 	#2 							; read type
.a0bd		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0bf		7a		ply				ply
.a0c0		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0c2		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0c4		95 50		sta $50,x			sta 	NSStatus,x
.a0c6		29 04		and #$04			and 	#NSBIsArray
.a0c8		d0 01		bne $a0cb			bne 	_VHArray
.a0ca		60		rts				rts
.a0cb						_VHArray:
.a0cb		e8		inx				inx
.a0cc		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0cf		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0d1		95 51		sta $51,x			sta 	NSStatus+1,x
.a0d3		b1 30		lda ($30),y			lda 	(codePtr),y
.a0d5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0d7		d0 06		bne $a0df			bne 	_VHNoSecondIndex
.a0d9		c8		iny				iny 								; skip the comma
.a0da		e8		inx				inx
.a0db		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0de		ca		dex				dex
.a0df						_VHNoSecondIndex:
.a0df		ca		dex				dex 								; set X back.
.a0e0		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; and check the right bracket.
.a0e3		5a		phy				phy 								; save position
.a0e4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a0e6		85 3e		sta $3e				sta 	zaTemp
.a0e8		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0ea		85 3f		sta $3f				sta 	zaTemp+1
.a0ec		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a0ee		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f0		f0 5d		beq $a14f			beq 	_VHBadArray
.a0f2		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a0f4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f6		f0 02		beq $a0fa			beq 	_VHHas2Mask
.a0f8		a9 ff		lda #$ff			lda 	#$FF
.a0fa						_VHHas2Mask:
.a0fa		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a0fc		f0 4c		beq $a14a			beq 	_VHBadIndex
.a0fe		0a		asl a				asl 	a 							; carry will be set if a second index
.a0ff		90 08		bcc $a109			bcc 	_VHCheckFirstIndex
.a101		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a103		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a105		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a107		90 41		bcc $a14a			bcc 	_VHBadIndex
.a109						_VHCheckFirstIndex:
.a109		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a10b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a10d		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a10f		90 39		bcc $a14a			bcc 	_VHBadIndex
.a111		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a113		64 37		stz $37				stz 	zTemp0+1
.a115		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a117		30 0e		bmi $a127			bmi 	_VHNoMultiply
.a119		da		phx				phx
.a11a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a11c		48		pha				pha
.a11d		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a11f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a121		1a		inc a				inc 	a 							; add 1 for zero base
.a122		fa		plx				plx
.a123		20 9d a6	jsr $a69d			jsr 	Multiply8x8 				; calculate -> Z0
.a126		fa		plx				plx
.a127						_VHNoMultiply:
.a127		18		clc				clc
.a128		a5 36		lda $36				lda 	zTemp0
.a12a		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a12c		85 36		sta $36				sta 	zTemp0
.a12e		a5 37		lda $37				lda 	zTemp0+1
.a130		69 00		adc #$00			adc 	#0
.a132		85 37		sta $37				sta 	zTemp0+1
.a134		b5 50		lda $50,x			lda 	NSStatus,x
.a136		20 77 88	jsr $8877			jsr 	ScaleByBaseType
.a139		18		clc				clc
.a13a		b2 3e		lda ($3e)			lda 	(zaTemp)
.a13c		65 36		adc $36				adc 	zTemp0
.a13e		95 58		sta $58,x			sta 	NSMantissa0,x
.a140		a0 01		ldy #$01			ldy 	#1
.a142		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a144		65 37		adc $37				adc 	zTemp0+1
.a146		95 60		sta $60,x			sta 	NSMantissa1,x
.a148		7a		ply				ply 								; restore position
.a149		60		rts				rts
.a14a						_VHBadIndex:
.a14a		a9 17		lda #$17		lda	#23
.a14c		4c 85 96	jmp $9685		jmp	ErrorHandler
.a14f						_VHBadArray:
.a14f		a9 18		lda #$18		lda	#24
.a151		4c 85 96	jmp $9685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a154						AbsUnary:
.a154		fa		plx				plx 								; restore stack pos
.a155		20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.a158		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a15b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a15d		29 7f		and #$7f			and 	#$7F
.a15f		95 50		sta $50,x			sta 	NSStatus,x
.a161		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a162						AllocUnary:
.a162		fa		plx				plx 								; restore stack pos
.a163		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger		; get bytes required.
.a166		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a169		da		phx				phx 								; save X/Y
.a16a		5a		phy				phy
.a16b		8a		txa				txa 								; copy X into Y
.a16c		a8		tay				tay
.a16d		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a170		aa		tax				tax
.a171		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a174		20 81 a1	jsr $a181			jsr 	AllocateXABytes 			; allocate memory
.a177		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a17a		8a		txa				txa 	 							; typing is 16 bit integer.
.a17b		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a17e		7a		ply				ply
.a17f		fa		plx				plx
.a180		60		rts				rts
.a181						AllocateXABytes:
.a181		5a		phy				phy
.a182		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a185		84 36		sty $36				sty 	zTemp0
.a187		5a		phy				phy
.a188		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a18b		84 37		sty $37				sty 	zTemp0+1
.a18d		5a		phy				phy
.a18e		18		clc				clc 								; add to low memory pointer
.a18f		6d 08 04	adc $0408			adc 	lowMemPtr
.a192		8d 08 04	sta $0408			sta 	lowMemPtr
.a195		8a		txa				txa
.a196		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a199		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a19c		b0 2f		bcs $a1cd			bcs 	CISSMemory
.a19e		20 bf a1	jsr $a1bf			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a1a1						_ClearMemory:
.a1a1		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a1a4		c5 36		cmp $36				cmp 	zTemp0
.a1a6		d0 07		bne $a1af			bne 	_CMClearNext
.a1a8		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a1ab		c5 37		cmp $37				cmp 	zTemp0+1
.a1ad		f0 0c		beq $a1bb			beq 	_CMExit
.a1af						_CMClearNext:
.a1af		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1b1		92 36		sta ($36)			sta 	(zTemp0)
.a1b3		e6 36		inc $36				inc 	zTemp0
.a1b5		d0 ea		bne $a1a1			bne 	_ClearMemory
.a1b7		e6 37		inc $37				inc		zTemp0+1
.a1b9		80 e6		bra $a1a1			bra 	_ClearMemory
.a1bb						_CMExit:
.a1bb		fa		plx				plx
.a1bc		68		pla				pla
.a1bd		7a		ply				ply
.a1be		60		rts				rts
.a1bf						CheckIdentifierStringSpace:
.a1bf		48		pha				pha
.a1c0		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a1c3		18		clc				clc
.a1c4		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1c6		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a1c9		b0 02		bcs $a1cd			bcs 	CISSMemory
.a1cb		68		pla				pla
.a1cc		60		rts				rts
.a1cd						CISSMemory:
.a1cd		a9 06		lda #$06		lda	#6
.a1cf		4c 85 96	jmp $9685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a1d2						AscUnary:
.a1d2		fa		plx				plx 								; restore stack pos
.a1d3		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; get a string
.a1d6		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a1d8		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte 					; ASC("") will return zero.
.a1db		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a1de		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a1df						FracUnary:
.a1df		fa		plx				plx 								; restore stack pos
.a1e0		20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.a1e3		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a1e6		b5 50		lda $50,x			lda 	NSStatus,x
.a1e8		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1ea		f0 04		beq $a1f0			beq 	_IUZero
.a1ec		20 9a 9c	jsr $9c9a			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a1ef		60		rts				rts
.a1f0						_IUZero:
.a1f0		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.a1f3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a1f4						IntUnary:
.a1f4		fa		plx				plx 								; restore stack pos
.a1f5		20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.a1f8		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a1fb		b5 50		lda $50,x			lda 	NSStatus,x
.a1fd		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1ff		f0 03		beq $a204			beq 	_IUExit
.a201		20 f2 9c	jsr $9cf2			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a204						_IUExit:
.a204		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a205						LenUnary:
.a205		fa		plx				plx 								; restore stack pos
.a206		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; get a string
.a209		5a		phy				phy
.a20a		a0 00		ldy #$00			ldy 	#0 							; find length
.a20c						_LenFind:
.a20c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a20e		f0 06		beq $a216			beq 	_LenExit
.a210		c8		iny				iny
.a211		d0 f9		bne $a20c			bne 	_LenFind
.a213		4c 75 a8	jmp $a875			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a216						_LenExit:
.a216		98		tya				tya		 							; return length
.a217		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.a21a		7a		ply				ply
.a21b		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a21e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a21f						Unary_Min:
.a21f		a9 01		lda #$01			lda 	#1
.a221		80 02		bra $a225			bra 	UnaryMinMaxMain
.a223						Unary_Max:
.a223		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a225						UnaryMinMaxMain:
.a225		fa		plx				plx 								; get index on number stack
.a226		48		pha				pha 								; save comparator
.a227		20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get the first value.
.a22a						_UMMMLoop:
.a22a		b1 30		lda ($30),y			lda 	(codePtr),y
.a22c		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a22e		f0 22		beq $a252			beq 	_UMMMDone
.a230		20 74 96	jsr $9674			jsr 	CheckComma 					; must be a comma
.a233		e8		inx				inx
.a234		20 37 a6	jsr $a637			jsr 	EvaluateValue
.a237		ca		dex				dex
.a238		20 d5 a6	jsr $a6d5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a23b		e8		inx				inx
.a23c		20 d5 a6	jsr $a6d5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a23f		e8		inx				inx
.a240		20 3c 97	jsr $973c			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a243		ca		dex				dex
.a244		ca		dex				dex
.a245		85 36		sta $36				sta 	zTemp0 						; save required result
.a247		68		pla				pla 								; get and save comparator
.a248		48		pha				pha
.a249		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a24b		d0 dd		bne $a22a			bne 	_UMMMLoop
.a24d		20 55 a2	jsr $a255			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a250		80 d8		bra $a22a			bra 	_UMMMLoop
.a252						_UMMMDone:
.a252		68		pla				pla 								; throw the comparator
.a253		c8		iny				iny 								; skip )
.a254		60		rts				rts
.a255						ExpCopyAboveDown:
.a255		b5 51		lda $51,x			lda 	NSStatus+1,x
.a257		95 50		sta $50,x			sta 	NSStatus,x
.a259		b5 79		lda $79,x			lda 	NSExponent+1,x
.a25b		95 78		sta $78,x			sta 	NSExponent,x
.a25d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a25f		95 58		sta $58,x			sta 	NSMantissa0,x
.a261		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a263		95 60		sta $60,x			sta 	NSMantissa1,x
.a265		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a267		95 68		sta $68,x			sta 	NSMantissa2,x
.a269		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a26b		95 70		sta $70,x			sta 	NSMantissa3,x
.a26d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a26e						Unary_Not:
.a26e		fa		plx				plx
.a26f		20 5f a6	jsr $a65f			jsr 	EvaluateInteger 			; get integer
.a272		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a275		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; zero mantissa ?
.a278		f0 04		beq $a27e			beq 	_NotZero
.a27a		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.a27d		60		rts				rts
.a27e						_NotZero:
.a27e		4c f2 96	jmp $96f2			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a281						PeekByteUnary:
.a281		a9 01		lda #$01			lda 	#1
.a283		80 0a		bra $a28f			bra 	PeekUnary
.a285						PeekWUnary:
.a285		a9 02		lda #$02			lda 	#2
.a287		80 06		bra $a28f			bra 	PeekUnary
.a289						PeekLUnary:
.a289		a9 03		lda #$03			lda 	#3
.a28b		80 02		bra $a28f			bra 	PeekUnary
.a28d						PeekDUnary:
.a28d		a9 04		lda #$04			lda 	#4
.a28f						PeekUnary:
.a28f		fa		plx				plx 								; restore position.
.a290		48		pha				pha 								; save count to copy on stack
.a291		20 72 a6	jsr $a672			jsr		Evaluate16BitInteger 		; address as constant.
.a294		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a297		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a299		85 36		sta $36				sta 	zTemp0
.a29b		b5 60		lda $60,x			lda 	NSMantissa1,x
.a29d		85 37		sta $37				sta 	zTemp0+1
.a29f		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; clear the result to zero.
.a2a2		68		pla				pla 								; count in zTemp2
.a2a3		85 3a		sta $3a				sta 	zTemp2
.a2a5		da		phx				phx 								; save stack position and offset of read
.a2a6		5a		phy				phy
.a2a7		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a2a9						_PULoop:
.a2a9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a2ab		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a2ad		c8		iny				iny 								; next byte to write
.a2ae		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a2af		18		clc				clc
.a2b0		69 08		adc #$08			adc 	#MathStackSize
.a2b2		aa		tax				tax
.a2b3		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a2b5		d0 f2		bne $a2a9			bne 	_PULoop
.a2b7		7a		ply				ply 								; restore stack/code pos and exit.
.a2b8		fa		plx				plx
.a2b9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a2ba						Unary_Random:
.a2ba		fa		plx				plx
.a2bb		20 0b a3	jsr $a30b			jsr 	URCopyToMantissa  			; put random # in mantissa
.a2be		b1 30		lda ($30),y			lda 	(codePtr),y
.a2c0		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a2c2		f0 08		beq $a2cc			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a2c4		e8		inx				inx
.a2c5		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a2c8		ca		dex				dex
.a2c9		20 44 98	jsr $9844			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a2cc						_URNoModulus:
.a2cc		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a2ce		74 78		stz $78,x			stz 	NSExponent,x
.a2d0		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a2d3		60		rts				rts
.a2d4						Unary_Rnd:
.a2d4		fa		plx				plx
.a2d5		20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; number to use.
.a2d8		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; closing bracket
.a2db		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a2dd		10 20		bpl $a2ff			bpl 	_URDontSeed
.a2df		a5 01		lda $01				lda 	1 							; switch to page 0
.a2e1		48		pha				pha
.a2e2		64 01		stz $01				stz 	1
.a2e4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a2e6		49 17		eor #$17			eor 	#$17
.a2e8		8d a4 d6	sta $d6a4			sta 	$D6A4
.a2eb		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2ed		49 a5		eor #$a5			eor 	#$A5
.a2ef		8d a5 d6	sta $d6a5			sta 	$D6A5
.a2f2		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a2f4		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2f7		a9 01		lda #$01			lda 	#1
.a2f9		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2fc		68		pla				pla
.a2fd		85 01		sta $01				sta 	1
.a2ff						_URDontSeed:
.a2ff		20 0b a3	jsr $a30b			jsr 	URCopyToMantissa 			; copy into mantissa
.a302		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a304		95 78		sta $78,x			sta 	NSExponent,x
.a306		a9 08		lda #$08			lda 	#NSTFloat
.a308		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a30a		60		rts				rts
.a30b						URCopyToMantissa:
.a30b		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a30d		48		pha				pha
.a30e		64 01		stz $01				stz 	1
.a310		a9 01		lda #$01			lda 	#1
.a312		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a315		ad a4 d6	lda $d6a4			lda 	$D6A4
.a318		95 58		sta $58,x			sta 	NSMantissa0,x
.a31a		ad a5 d6	lda $d6a5			lda 	$D6A5
.a31d		95 60		sta $60,x			sta 	NSMantissa1,x
.a31f		ad a4 d6	lda $d6a4			lda 	$D6A4
.a322		95 68		sta $68,x			sta 	NSMantissa2,x
.a324		ad a5 d6	lda $d6a5			lda 	$D6A5
.a327		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a329		95 70		sta $70,x			sta 	NSMantissa3,x
.a32b		68		pla				pla
.a32c		85 01		sta $01				sta 	1
.a32e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a32f						SgnUnary:
.a32f		fa		plx				plx 								; restore stack pos
.a330		20 40 a6	jsr $a640			jsr 	EvaluateNumber 				; get a float or int
.a333		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a336		20 14 a7	jsr $a714			jsr 	NSMIsZero 					; if zero
.a339		f0 0e		beq $a349			beq 	_SGZero  					; return Int Zero
.a33b		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a33d		48		pha				pha
.a33e		a9 01		lda #$01			lda 	#1 							; set to 1
.a340		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.a343		68		pla				pla
.a344		29 80		and #$80			and		#$80 						; copy the sign byte out
.a346		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a348		60		rts				rts
.a349		20 f2 a6	jsr $a6f2	_SGZero:jsr 	NSMSetZero
.a34c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a34d						ValUnary:
.a34d		fa		plx				plx 								; restore stack pos
.a34e		20 63 a3	jsr $a363			jsr 	ValMainCode 				; do the main val() code
.a351		b0 01		bcs $a354			bcs 	_VUError 					; couldn't convert
.a353		60		rts				rts
.a354						_VUError:
.a354		4c 7a a8	jmp $a87a			jmp 	TypeError
.a357						IsValUnary:
.a357		fa		plx				plx 								; restore stack pos
.a358		20 63 a3	jsr $a363			jsr 	ValMainCode 				; do the main val() code
.a35b		b0 03		bcs $a360			bcs 	_VUBad
.a35d		4c f2 96	jmp $96f2			jmp 	ReturnTrue
.a360						_VUBad:
.a360		4c fd 96	jmp $96fd			jmp 	ReturnFalse
.a363						ValMainCode:
.a363		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; get a string
.a366		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; check right bracket present
.a369						ValEvaluateZTemp0:
.a369		5a		phy				phy
.a36a		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a36c		f0 17		beq $a385			beq 	_VMCFail2
.a36e		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a370		48		pha				pha 								; save first character
.a371		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a373		d0 01		bne $a376			bne 	_VMCStart
.a375		c8		iny				iny 								; skip over -
.a376						_VMCStart:
.a376		38		sec				sec 								; initialise first time round.
.a377						_VMCNext:
.a377		c8		iny				iny 								; pre-increment
.a378		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a37a		f0 0c		beq $a388			beq 	_VMCSuccess 				; successful.
.a37c		20 cf 9e	jsr $9ecf			jsr 	EncodeNumber 				; send it to the number-builder
.a37f		90 03		bcc $a384			bcc 	_VMCFail 					; if failed, give up.
.a381		18		clc				clc 								; next time round, countinue
.a382		80 f3		bra $a377			bra 	_VMCNext
.a384						_VMCFail:
.a384		68		pla				pla
.a385						_VMCFail2:
.a385		7a		ply				ply
.a386		38		sec				sec
.a387		60		rts				rts
.a388						_VMCSuccess:
.a388		a9 00		lda #$00			lda 	#0 							; construct final
.a38a		20 cf 9e	jsr $9ecf			jsr 	EncodeNumber 				; by sending a duff value.
.a38d		68		pla				pla 								; if it was -ve
.a38e		c9 2d		cmp #$2d			cmp 	#"-"
.a390		d0 03		bne $a395			bne 	_VMCNotNegative
.a392		20 b4 a6	jsr $a6b4			jsr		NSMNegate 					; negate it.
.a395						_VMCNotNegative:
.a395		7a		ply				ply
.a396		18		clc				clc
.a397		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a398						ChrUnary:
.a398		fa		plx				plx 								; restore stack pos
.a399		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a39c		48		pha				pha
.a39d		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a3a0		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a3a2		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate
.a3a5		68		pla				pla 								; write number to it
.a3a6		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a3a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getdatetime.asm

.a3aa						UnaryGetTime:
.a3aa		a9 00		lda #$00			lda 	#0
.a3ac		80 02		bra $a3b0			bra 	UGDTMain
.a3ae						UnaryGetDate:
.a3ae		a9 03		lda #$03			lda 	#3
.a3b0						UGDTMain:
.a3b0		fa		plx				plx 								; get stack position back
.a3b1		48		pha				pha 								; save table offset
.a3b2		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger			; ignored parameter
.a3b5		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; closing )
.a3b8		68		pla				pla 								; table offset in A
.a3b9		5a		phy				phy 								; saving Y
.a3ba		a8		tay				tay 								; table offset in Y
.a3bb		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a3bd		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate
.a3c0		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a3c2		48		pha				pha
.a3c3		64 01		stz $01				stz 	1
.a3c5		20 d8 a3	jsr $a3d8			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a3c8		20 d3 a3	jsr $a3d3			jsr 	UGDTColonDigit
.a3cb		20 d3 a3	jsr $a3d3			jsr 	UGDTColonDigit
.a3ce		68		pla				pla 								; restore I/O select
.a3cf		85 01		sta $01				sta 	1
.a3d1		7a		ply				ply  								; restore code position
.a3d2		60		rts				rts
.a3d3						UGDTColonDigit:
.a3d3		a9 3a		lda #$3a			lda 	#':'
.a3d5		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a3d8						UGDTDigit:
.a3d8		da		phx				phx 								; save X
.a3d9		b9 f8 a3	lda $a3f8,y			lda 	RTCROffset,y 				; get offset in RTC register
.a3dc		aa		tax				tax
.a3dd		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a3e0		39 fe a3	and $a3fe,y			and 	RTCRMask,y 					; and with Mask.
.a3e3		fa		plx				plx
.a3e4		48		pha				pha 								; output in BCD
.a3e5		4a		lsr a				lsr 	a
.a3e6		4a		lsr a				lsr 	a
.a3e7		4a		lsr a				lsr 	a
.a3e8		4a		lsr a				lsr 	a
.a3e9		09 30		ora #$30			ora 	#48
.a3eb		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a3ee		68		pla				pla
.a3ef		29 0f		and #$0f			and 	#15
.a3f1		09 30		ora #$30			ora 	#48
.a3f3		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a3f6		c8		iny				iny
.a3f7		60		rts				rts
.a3f8						RTCROffset:
>a3f8		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a3fe						RTCRMask:
>a3fe		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getinkey.asm

.a404						AscGet:
.a404		fa		plx				plx 								; restore stack pos
.a405						AscGet2:
.a405		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a408		20 41 81	jsr $8141	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a40b		d0 0b		bne $a418			bne 	_AGBreak
.a40d		20 73 81	jsr $8173			jsr 	PopKeyboardQueue 			; wait for key.
.a410		c9 00		cmp #$00			cmp 	#0
.a412		f0 f4		beq $a408			beq 	_AGKey
.a414		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.a417		60		rts				rts
.a418						_AGBreak:
.a418		a9 01		lda #$01		lda	#1
.a41a		4c 85 96	jmp $9685		jmp	ErrorHandler
.a41d						AscInkey:
.a41d		fa		plx				plx 								; restore stack pos
.a41e						AscInkey2:
.a41e		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a421		20 73 81	jsr $8173			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a424		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.a427		60		rts				rts
.a428						ChrGet:
.a428		fa		plx				plx
.a429		20 05 a4	jsr $a405			jsr 	AscGet2
.a42c		4c 33 a4	jmp $a433			jmp 	GetInkeyToString
.a42f						ChrInkey:
.a42f		fa		plx				plx
.a430		20 1e a4	jsr $a41e			jsr 	AscInkey2
.a433						GetInkeyToString:
.a433		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a435		f0 0b		beq $a442			beq 	_GKISNull
.a437		48		pha				pha
.a438		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a43a		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate
.a43d		68		pla				pla 								; write number to it
.a43e		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a441		60		rts				rts
.a442						_GKISNull:
.a442		a9 00		lda #$00			lda 	#0
.a444		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate
.a447		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a448						ItemCountUnary:
.a448		fa		plx				plx
.a449		20 4a a6	jsr $a64a			jsr 	EvaluateString
.a44c		e8		inx				inx
.a44d		20 c0 a4	jsr $a4c0			jsr 	ICGetSeperator
.a450		ca		dex				dex
.a451		20 e1 a4	jsr $a4e1			jsr 	ICSetPointer 				; zTemp0 = (string)
.a454		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; zero the result.
.a457		5a		phy				phy
.a458		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a45a						_ICULoop:
.a45a		c8		iny				iny
.a45b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a45d		cd 72 07	cmp $0772			cmp 	ICSeperator
.a460		d0 02		bne $a464			bne 	_ICUNoMatch
.a462		f6 58		inc $58,x			inc 	NSMantissa0,x
.a464						_ICUNoMatch:
.a464		c9 00		cmp #$00			cmp 	#0
.a466		d0 f2		bne $a45a			bne 	_ICULoop
.a468		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a46a		7a		ply				ply
.a46b		60		rts				rts
.a46c						ItemGetUnary:
.a46c		fa		plx				plx
.a46d		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; search string
.a470		20 74 96	jsr $9674			jsr 	CheckComma
.a473		e8		inx				inx 								; get count
.a474		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.a477		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a479		f0 61		beq $a4dc			beq 	ICGSRange
.a47b		e8		inx				inx 								; get seperator.
.a47c		20 c0 a4	jsr $a4c0			jsr 	ICGetSeperator
.a47f		ca		dex				dex
.a480		ca		dex				dex
.a481		5a		phy				phy
.a482		20 e1 a4	jsr $a4e1			jsr 	ICSetPointer 				; zTemp0 points to string.
.a485		a0 00		ldy #$00			ldy 	#0
.a487		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a489		f0 0e		beq $a499			beq 	_IGUFoundStart
.a48b						_IGUFindNext:
.a48b		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a48d		f0 4d		beq $a4dc			beq 	ICGSRange 					; eol, not found.
.a48f		c8		iny				iny
.a490		cd 72 07	cmp $0772			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a493		d0 f6		bne $a48b			bne 	_IGUFindNext
.a495		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a497		d0 f2		bne $a48b			bne 	_IGUFindNext
.a499						_IGUFoundStart:
.a499		84 38		sty $38				sty 	zTemp1 						; save start
.a49b		88		dey				dey
.a49c						_IGUFindLength:
.a49c		c8		iny				iny 								; forward till seperator/EOS
.a49d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a49f		f0 05		beq $a4a6			beq 	_IGUFoundLength
.a4a1		cd 72 07	cmp $0772			cmp 	ICSeperator
.a4a4		d0 f6		bne $a49c			bne 	_IGUFindLength
.a4a6						_IGUFoundLength:
.a4a6		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a4a8		98		tya				tya 								; calculate length of new string.
.a4a9		38		sec				sec
.a4aa		e5 38		sbc $38				sbc 	zTemp1
.a4ac		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate 			; allocate bytes for it.
.a4af		a4 38		ldy $38				ldy 	zTemp1
.a4b1						_IGUCopySub:
.a4b1		c4 39		cpy $39				cpy 	zTemp1+1
.a4b3		f0 08		beq $a4bd			beq 	_IGUCopyOver
.a4b5		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4b7		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a4ba		c8		iny				iny
.a4bb		80 f4		bra $a4b1			bra 	_IGUCopySub
.a4bd						_IGUCopyOver:
.a4bd		7a		ply				ply
.a4be		60		rts				rts
>a4bf		db						.byte 	$DB 						; causes a break in the emulator
.a4c0						ICGetSeperator:
.a4c0		20 74 96	jsr $9674			jsr 	CheckComma 					; preceding comma
.a4c3		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; seperator string
.a4c6		20 e1 a4	jsr $a4e1			jsr 	ICSetPointer 				; access it
.a4c9		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a4cb		8d 72 07	sta $0772			sta 	ICSeperator
.a4ce		f0 0c		beq $a4dc			beq 	ICGSRange 					; check LEN(seperator) = 1
.a4d0		5a		phy				phy
.a4d1		a0 01		ldy #$01			ldy 	#1
.a4d3		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4d5		d0 05		bne $a4dc			bne 	ICGSRange
.a4d7		7a		ply				ply
.a4d8		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; check following )
.a4db		60		rts				rts
.a4dc						ICGSRange:
.a4dc		a9 04		lda #$04		lda	#4
.a4de		4c 85 96	jmp $9685		jmp	ErrorHandler
.a4e1						ICSetPointer:
.a4e1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a4e3		85 36		sta $36				sta 	zTemp0
.a4e5		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4e7		85 37		sta $37				sta 	zTemp0+1
.a4e9		60		rts				rts
.0772						ICSeperator:
>0772								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4ea						SpcUnary:
.a4ea		fa		plx				plx 								; restore stack pos
.a4eb		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger			; get value
.a4ee		5a		phy				phy
.a4ef		48		pha				pha 								; save count
.a4f0		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate
.a4f3		7a		ply				ply 								; to do count in Y
.a4f4						_SpcLoop:
.a4f4		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a4f6		f0 08		beq $a500			beq 	_SpcExit
.a4f8		a9 20		lda #$20			lda 	#32
.a4fa		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a4fd		88		dey				dey
.a4fe		80 f4		bra $a4f4			bra 	_SpcLoop
.a500						_SpcExit:
.a500		7a		ply				ply
.a501		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.a504		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a505						Unary_Str:
.a505		fa		plx				plx
.a506		20 40 a6	jsr $a640			jsr 	EvaluateNumber  			; get number
.a509		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; closing bracket
.a50c		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a50e		20 27 a5	jsr $a527			jsr 	ConvertNumberToString 		; do the conversion.
.a511		a9 21		lda #$21			lda		#33 						; create buffer
.a513		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate 			; allocate memory
.a516		da		phx				phx  								; copy the converted string into the buffer.
.a517		a2 00		ldx #$00			ldx 	#0
.a519						_USCopy:
.a519		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a51c		20 fa b8	jsr $b8fa			jsr 	StringTempWrite
.a51f		e8		inx				inx
.a520		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a523		d0 f4		bne $a519			bne 	_USCopy
.a525		fa		plx				plx
.a526		60		rts				rts
.a527						ConvertNumberToString:
.a527		5a		phy				phy 								; save code position
.a528		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a52b		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a52e		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a530		10 09		bpl $a53b			bpl 	_CNTSNotNegative
.a532		29 7f		and #$7f			and 	#$7F 						; make +ve
.a534		95 50		sta $50,x			sta 	NSStatus,x
.a536		a9 2d		lda #$2d			lda 	#"-"
.a538		20 9c a5	jsr $a59c			jsr 	WriteDecimalBuffer
.a53b						_CNTSNotNegative:
.a53b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a53d		f0 12		beq $a551			beq 	_CNTSNotFloat
.a53f		e8		inx				inx 								; round up so we don't get too many 6.999999
.a540		a9 01		lda #$01			lda 	#1
.a542		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.a545		ca		dex				dex
.a546		b5 78		lda $78,x			lda		NSExponent,x
.a548		95 79		sta $79,x			sta 	NSExponent+1,x
.a54a		a9 08		lda #$08			lda 	#NSTFloat
.a54c		95 51		sta $51,x			sta 	NSStatus+1,x
.a54e		20 d4 9b	jsr $9bd4			jsr 	FloatAdd
.a551						_CNTSNotFloat:
.a551		20 7e a5	jsr $a57e			jsr 	MakePlusTwoString 			; do the integer part.
.a554		20 9a 9c	jsr $9c9a			jsr 	FloatFractionalPart 		; get the fractional part
.a557		20 4b 9d	jsr $9d4b			jsr 	NSNormalise					; normalise , exit if zero
.a55a		f0 20		beq $a57c			beq 	_CNTSExit
.a55c		a9 2e		lda #$2e			lda 	#"."
.a55e		20 9c a5	jsr $a59c			jsr 	WriteDecimalBuffer 			; write decimal place
.a561						_CNTSDecimal:
.a561		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a564		30 16		bmi $a57c			bmi 	_CNTSExit
.a566		e8		inx				inx 								; x 10.0
.a567		a9 0a		lda #$0a			lda 	#10
.a569		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.a56c		a9 08		lda #$08			lda 	#NSTFloat
.a56e		95 50		sta $50,x			sta 	NSStatus,x
.a570		ca		dex				dex
.a571		20 19 9d	jsr $9d19			jsr 	FloatMultiply
.a574		20 7e a5	jsr $a57e			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a577		20 9a 9c	jsr $9c9a			jsr 	FloatFractionalPart 		; get the fractional part
.a57a		80 e5		bra $a561			bra 	_CNTSDecimal 				; keep going.
.a57c						_CNTSExit:
.a57c		7a		ply				ply
.a57d		60		rts				rts
.a57e						MakePlusTwoString:
.a57e		da		phx				phx
.a57f		20 d5 a6	jsr $a6d5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a582		e8		inx				inx 								; access it
.a583		e8		inx				inx
.a584		20 f2 9c	jsr $9cf2			jsr 	FloatIntegerPart 			; make it an integer
.a587		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a589		20 04 9b	jsr $9b04			jsr 	ConvertInt32
.a58c		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a58e						_MPTSCopy:
.a58e		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a591		20 9c a5	jsr $a59c			jsr 	WriteDecimalBuffer
.a594		e8		inx				inx
.a595		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a598		d0 f4		bne $a58e			bne 	_MPTSCopy
.a59a		fa		plx				plx
.a59b		60		rts				rts
.a59c						WriteDecimalBuffer:
.a59c		da		phx				phx
.a59d		ae 11 04	ldx $0411			ldx 	dbOffset
.a5a0		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a5a3		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a5a6		ee 11 04	inc $0411			inc 	dbOffset
.a5a9		fa		plx				plx
.a5aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5ab						Unary_Left:
.a5ab		fa		plx				plx
.a5ac		18		clc				clc 								; only one parameter
.a5ad		20 10 a6	jsr $a610			jsr 	SubstringInitial 			; set up.
.a5b0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5b2		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5b4		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5b6		80 25		bra $a5dd			bra 	SubstringMain
.a5b8						Unary_Right:
.a5b8		fa		plx				plx
.a5b9		18		clc				clc 								; only one parameter
.a5ba		20 10 a6	jsr $a610			jsr 	SubstringInitial 			; set up.
.a5bd		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5bf		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5c1		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a5c3		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5c5		b0 02		bcs $a5c9			bcs 	_URNotUnderflow
.a5c7		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5c9						_URNotUnderflow:
.a5c9		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5cb		80 10		bra $a5dd			bra 	SubstringMain
.a5cd						Unary_Mid:
.a5cd		fa		plx				plx
.a5ce		38		sec				sec 								; two parameters
.a5cf		20 10 a6	jsr $a610			jsr 	SubstringInitial 			; set up.
.a5d2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5d4		f0 04		beq $a5da			beq 	_UMError
.a5d6		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5d8		80 03		bra $a5dd			bra 	SubstringMain
.a5da						_UMError:
.a5da		4c 7f a8	jmp $a87f			jmp 	ArgumentError
.a5dd						SubstringMain:
.a5dd		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5df		d5 78		cmp $78,x			cmp 	NSExponent,x
.a5e1		b0 27		bcs $a60a			bcs 	_SSMNull 					; if so, return an empty string.
.a5e3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5e5		f0 23		beq $a60a			beq 	_SSMNull 					; return empty string.
.a5e7		18		clc				clc 								; add the offset +1 to the address and
.a5e8		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a5ea		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a5ec		85 36		sta $36				sta 	zTemp0
.a5ee		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a5f0		69 00		adc #$00			adc 	#0
.a5f2		85 37		sta $37				sta 	zTemp0+1
.a5f4						_SSMNoCarry:
.a5f4		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5f6		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate 			; allocate that many characters
.a5f9		5a		phy				phy 								; save Y
.a5fa		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5fc						_SSMCopy:
.a5fc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5fe		f0 08		beq $a608			beq 	_SSMEString 				; no more to copy
.a600		20 fa b8	jsr $b8fa			jsr 	StringTempWrite 			; and write it out.
.a603		c8		iny				iny
.a604		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a606		d0 f4		bne $a5fc			bne 	_SSMCopy
.a608						_SSMEString:
.a608		7a		ply				ply
.a609						_SSMExit:
.a609		60		rts				rts
.a60a						_SSMNull:
.a60a		a9 00		lda #$00			lda 	#0
.a60c		20 c1 b8	jsr $b8c1			jsr 	StringTempAllocate
.a60f		60		rts				rts
.a610						SubstringInitial:
.a610		da		phx				phx 								; save initial stack position
.a611		08		php				php 								; save carry on stack indicating 2 parameters
.a612		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; get a string
.a615		5a		phy				phy 								; calculate length to exponent.
.a616		a0 ff		ldy #$ff			ldy 	#$FF
.a618						_SIFindLength:
.a618		c8		iny				iny
.a619		b1 36		lda ($36),y			lda 	(zTemp0),y
.a61b		d0 fb		bne $a618			bne 	_SIFindLength
.a61d		98		tya				tya
.a61e		95 78		sta $78,x			sta 	NSExponent,x
.a620		7a		ply				ply
.a621		e8		inx				inx
.a622		20 74 96	jsr $9674			jsr 	CheckComma 					; comma next
.a625		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get next parameter
.a628		28		plp				plp 								; is it the last parameter ?
.a629		90 07		bcc $a632			bcc 	_SSIExit 					; if so, exit.
.a62b		e8		inx				inx
.a62c		20 74 96	jsr $9674			jsr 	CheckComma 					; comma next
.a62f		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get last parameter
.a632						_SSIExit:
.a632		fa		plx				plx
.a633		20 6c 96	jsr $966c			jsr 	CheckRightBracket 			; check closing bracket
.a636		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a637						EvaluateValue:
.a637		48		pha				pha
.a638		20 89 9b	jsr $9b89			jsr		EvaluateExpression 			; expression
.a63b		20 4c 9e	jsr $9e4c			jsr 	Dereference					; derefernce it
.a63e		68		pla				pla
.a63f		60		rts				rts
.a640						EvaluateNumber:
.a640		20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get a value
.a643		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a645		29 10		and #$10			and 	#NSBIsString
.a647		d0 13		bne $a65c			bne 	HelperTypeError
.a649		60		rts				rts
.a64a						EvaluateString:
.a64a		20 37 a6	jsr $a637			jsr 	EvaluateValue 				; get a value
.a64d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a64f		29 10		and #$10			and 	#NSBIsString
.a651		f0 09		beq $a65c			beq 	HelperTypeError
.a653						CopyAddressToTemp0:
.a653		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a655		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a657		b5 60		lda $60,x			lda 	NSMantissa1,x
.a659		85 37		sta $37				sta 	zTemp0+1
.a65b		60		rts				rts
.a65c						HelperTypeError:
.a65c		4c 7a a8	jmp $a87a			jmp 	TypeError
.a65f						EvaluateInteger:
.a65f		20 40 a6	jsr $a640			jsr 	EvaluateNumber
.a662		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a664		d0 09		bne $a66f			bne 	HelperValueError 			; if not, it's a float.
.a666		60		rts				rts
.a667						EvaluateUnsignedInteger:
.a667		20 5f a6	jsr $a65f			jsr 	EvaluateInteger 			; check integer is +ve
.a66a		b5 50		lda $50,x			lda 	NSStatus,x
.a66c		30 01		bmi $a66f			bmi 	HelperValueError
.a66e		60		rts				rts
.a66f						HelperValueError:
.a66f		4c 7f a8	jmp $a87f			jmp 	ArgumentError
.a672						Evaluate16BitInteger:
.a672		20 67 a6	jsr $a667			jsr	 	EvaluateUnsignedInteger		; get integer
.a675		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a677		15 68		ora $68,x			ora 	NSMantissa2,x
.a679		d0 f4		bne $a66f			bne 	HelperValueError
.a67b		60		rts				rts
.a67c						Evaluate16BitIntegerSigned:
.a67c		20 5f a6	jsr $a65f			jsr	 	EvaluateInteger				; get integer
.a67f		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a681		15 68		ora $68,x			ora 	NSMantissa2,x
.a683		d0 ea		bne $a66f			bne 	HelperValueError
.a685		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a687		10 03		bpl $a68c			bpl 	_EISNotSigned
.a689		20 bb a6	jsr $a6bb			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a68c						_EISNotSigned:
.a68c		60		rts				rts
.a68d						Evaluate8BitInteger:
.a68d		20 67 a6	jsr $a667			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a690		d0 dd		bne $a66f			bne 	HelperValueError
.a692		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a694		15 68		ora $68,x			ora 	NSMantissa2,x
.a696		15 60		ora $60,x			ora 	NSMantissa1,x
.a698		d0 d5		bne $a66f			bne 	HelperValueError
.a69a		b5 58		lda $58,x			lda 	NSMantissa0,x
.a69c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a69d						Multiply8x8:
.a69d		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a69e		85 36		sta $36			  	sta 	zTemp0
.a6a0		86 37		stx $37				stx 	zTemp0+1
.a6a2		a9 00		lda #$00			lda 	#0
.a6a4		a2 08		ldx #$08			ldx 	#8
.a6a6						_M88Loop:
.a6a6		90 03		bcc $a6ab			bcc 	_M88NoAdd
.a6a8		18		clc				clc
.a6a9		65 37		adc $37				adc 	zTemp0+1
.a6ab						_M88NoAdd:
.a6ab		6a		ror a				ror 	a
.a6ac		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a6ae		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a6af		d0 f5		bne $a6a6			bne 	_M88Loop
.a6b1		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a6b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6b4						NSMNegate:
.a6b4		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a6b6		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a6b8		95 50		sta $50,x			sta 	NSStatus,x
.a6ba		60		rts				rts
.a6bb						NSMNegateMantissa:
.a6bb		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a6bc		a9 00		lda #$00			lda 	#0
.a6be		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a6c0		95 58		sta $58,x			sta 	NSMantissa0,x
.a6c2		a9 00		lda #$00			lda 	#0
.a6c4		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a6c6		95 60		sta $60,x			sta 	NSMantissa1,x
.a6c8		a9 00		lda #$00			lda 	#0
.a6ca		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a6cc		95 68		sta $68,x			sta 	NSMantissa2,x
.a6ce		a9 00		lda #$00			lda 	#0
.a6d0		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a6d2		95 70		sta $70,x			sta 	NSMantissa3,x
.a6d4		60		rts				rts
.a6d5						NSMShiftUpTwo:
.a6d5		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6d7		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a6d9		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6db		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a6dd		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6df		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a6e1		b5 70		lda $70,x			lda 	NSMantissa3,x
.a6e3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a6e5		b5 78		lda $78,x			lda 	NSExponent,x
.a6e7		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a6e9		b5 50		lda $50,x			lda 	NSStatus,x
.a6eb		95 52		sta $52,x			sta 	NSStatus+2,x
.a6ed		60		rts				rts
.a6ee						NSMSetZeroMantissaOnly:
.a6ee		a9 00		lda #$00			lda 	#0
.a6f0		80 06		bra $a6f8			bra 	NSMSetMantissa
.a6f2						NSMSetZero:
.a6f2		a9 00		lda #$00			lda 	#0
.a6f4						NSMSetByte:
.a6f4		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a6f6		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a6f8						NSMSetMantissa:
.a6f8		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a6fa		74 60		stz $60,x			stz 	NSMantissa1,x
.a6fc		74 68		stz $68,x			stz 	NSMantissa2,x
.a6fe		74 70		stz $70,x			stz 	NSMantissa3,x
.a700		60		rts				rts
.a701						NSMShiftLeft:
.a701		18		clc				clc
.a702						NSMRotateLeft:
.a702		36 58		rol $58,x			rol 	NSMantissa0,x
.a704		36 60		rol $60,x			rol		NSMantissa1,x
.a706		36 68		rol $68,x			rol		NSMantissa2,x
.a708		36 70		rol $70,x			rol		NSMantissa3,x
.a70a		60		rts				rts
.a70b						NSMShiftRight:
.a70b		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a70d		76 68		ror $68,x			ror		NSMantissa2,x
.a70f		76 60		ror $60,x			ror		NSMantissa1,x
.a711		76 58		ror $58,x			ror		NSMantissa0,x
.a713		60		rts				rts
.a714						NSMIsZero:
.a714		b5 70		lda $70,x			lda 	NSMantissa3,x
.a716		15 68		ora $68,x			ora		NSMantissa2,x
.a718		15 60		ora $60,x			ora		NSMantissa1,x
.a71a		15 58		ora $58,x			ora		NSMantissa0,x
.a71c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a71d						TickHandler:
.a71d		5a		phy				phy 								; need to preserve Y
.a71e		20 89 80	jsr $8089			jsr 	SNDUpdate 					; update sound
.a721		7a		ply				ply
.a722		60		rts				rts
.0773						LastTick:
>0773								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a723						Assemble_ora:
.a723		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a726		01					.byte $01
.a727						Assemble_and:
.a727		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a72a		21					.byte $21
.a72b						Assemble_eor:
.a72b		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a72e		41					.byte $41
.a72f						Assemble_adc:
.a72f		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a732		61					.byte $61
.a733						Assemble_sta:
.a733		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a736		81					.byte $81
.a737						Assemble_lda:
.a737		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a73a		a1					.byte $a1
.a73b						Assemble_cmp:
.a73b		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a73e		c1					.byte $c1
.a73f						Assemble_sbc:
.a73f		20 8b 82	jsr $828b		jsr	AssembleGroup1
>a742		e1					.byte $e1
.a743						Assemble_asl:
.a743		20 92 82	jsr $8292		jsr	AssembleGroup2
>a746		02					.byte $02
>a747		75					.byte $75
.a748						Assemble_rol:
.a748		20 92 82	jsr $8292		jsr	AssembleGroup2
>a74b		22					.byte $22
>a74c		75					.byte $75
.a74d						Assemble_lsr:
.a74d		20 92 82	jsr $8292		jsr	AssembleGroup2
>a750		42					.byte $42
>a751		75					.byte $75
.a752						Assemble_ror:
.a752		20 92 82	jsr $8292		jsr	AssembleGroup2
>a755		62					.byte $62
>a756		75					.byte $75
.a757						Assemble_stx:
.a757		20 92 82	jsr $8292		jsr	AssembleGroup2
>a75a		82					.byte $82
>a75b		50					.byte $50
.a75c						Assemble_ldx:
.a75c		20 92 82	jsr $8292		jsr	AssembleGroup2
>a75f		a2					.byte $a2
>a760		d0					.byte $d0
.a761						Assemble_dec:
.a761		20 92 82	jsr $8292		jsr	AssembleGroup2
>a764		c2					.byte $c2
>a765		55					.byte $55
.a766						Assemble_inc:
.a766		20 92 82	jsr $8292		jsr	AssembleGroup2
>a769		e2					.byte $e2
>a76a		55					.byte $55
.a76b						Assemble_stz:
.a76b		20 92 82	jsr $8292		jsr	AssembleGroup2
>a76e		60					.byte $60
>a76f		44					.byte $44
.a770						Assemble_bit:
.a770		20 92 82	jsr $8292		jsr	AssembleGroup2
>a773		20					.byte $20
>a774		55					.byte $55
.a775						Assemble_sty:
.a775		20 92 82	jsr $8292		jsr	AssembleGroup2
>a778		80					.byte $80
>a779		54					.byte $54
.a77a						Assemble_ldy:
.a77a		20 92 82	jsr $8292		jsr	AssembleGroup2
>a77d		a0					.byte $a0
>a77e		d5					.byte $d5
.a77f						Assemble_cpy:
.a77f		20 92 82	jsr $8292		jsr	AssembleGroup2
>a782		c0					.byte $c0
>a783		d4					.byte $d4
.a784						Assemble_cpx:
.a784		20 92 82	jsr $8292		jsr	AssembleGroup2
>a787		e0					.byte $e0
>a788		d0					.byte $d0
.a789						Assemble_tsb:
.a789		20 92 82	jsr $8292		jsr	AssembleGroup2
>a78c		00					.byte $00
>a78d		50					.byte $50
.a78e						Assemble_trb:
.a78e		20 92 82	jsr $8292		jsr	AssembleGroup2
>a791		10					.byte $10
>a792		50					.byte $50
.a793						Assemble_jsr:
.a793		20 92 82	jsr $8292		jsr	AssembleGroup2
>a796		14					.byte $14
>a797		10					.byte $10
.a798						Assemble_jmp:
.a798		20 92 82	jsr $8292		jsr	AssembleGroup2
>a79b		40					.byte $40
>a79c		10					.byte $10
.a79d						Assemble_bpl:
.a79d		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7a0		10					.byte $10
.a7a1						Assemble_bmi:
.a7a1		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7a4		30					.byte $30
.a7a5						Assemble_bvc:
.a7a5		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7a8		50					.byte $50
.a7a9						Assemble_bvs:
.a7a9		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7ac		70					.byte $70
.a7ad						Assemble_bcc:
.a7ad		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7b0		90					.byte $90
.a7b1						Assemble_bcs:
.a7b1		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7b4		b0					.byte $b0
.a7b5						Assemble_bne:
.a7b5		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7b8		d0					.byte $d0
.a7b9						Assemble_beq:
.a7b9		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7bc		f0					.byte $f0
.a7bd						Assemble_bra:
.a7bd		20 e3 82	jsr $82e3		jsr	AssembleGroup3
>a7c0		80					.byte $80
.a7c1						Assemble_brk:
.a7c1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7c4		00					.byte $00
.a7c5						Assemble_php:
.a7c5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7c8		08					.byte $08
.a7c9						Assemble_clc:
.a7c9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7cc		18					.byte $18
.a7cd						Assemble_plp:
.a7cd		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7d0		28					.byte $28
.a7d1						Assemble_sec:
.a7d1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7d4		38					.byte $38
.a7d5						Assemble_rti:
.a7d5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7d8		40					.byte $40
.a7d9						Assemble_pha:
.a7d9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7dc		48					.byte $48
.a7dd						Assemble_cli:
.a7dd		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7e0		58					.byte $58
.a7e1						Assemble_phy:
.a7e1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7e4		5a					.byte $5a
.a7e5						Assemble_rts:
.a7e5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7e8		60					.byte $60
.a7e9						Assemble_pla:
.a7e9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7ec		68					.byte $68
.a7ed						Assemble_sei:
.a7ed		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7f0		78					.byte $78
.a7f1						Assemble_ply:
.a7f1		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7f4		7a					.byte $7a
.a7f5						Assemble_dey:
.a7f5		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7f8		88					.byte $88
.a7f9						Assemble_txa:
.a7f9		20 17 83	jsr $8317		jsr	AssembleGroup4
>a7fc		8a					.byte $8a
.a7fd						Assemble_tya:
.a7fd		20 17 83	jsr $8317		jsr	AssembleGroup4
>a800		98					.byte $98
.a801						Assemble_txs:
.a801		20 17 83	jsr $8317		jsr	AssembleGroup4
>a804		9a					.byte $9a
.a805						Assemble_tay:
.a805		20 17 83	jsr $8317		jsr	AssembleGroup4
>a808		a8					.byte $a8
.a809						Assemble_tax:
.a809		20 17 83	jsr $8317		jsr	AssembleGroup4
>a80c		aa					.byte $aa
.a80d						Assemble_clv:
.a80d		20 17 83	jsr $8317		jsr	AssembleGroup4
>a810		b8					.byte $b8
.a811						Assemble_tsx:
.a811		20 17 83	jsr $8317		jsr	AssembleGroup4
>a814		ba					.byte $ba
.a815						Assemble_iny:
.a815		20 17 83	jsr $8317		jsr	AssembleGroup4
>a818		c8					.byte $c8
.a819						Assemble_dex:
.a819		20 17 83	jsr $8317		jsr	AssembleGroup4
>a81c		ca					.byte $ca
.a81d						Assemble_cld:
.a81d		20 17 83	jsr $8317		jsr	AssembleGroup4
>a820		d8					.byte $d8
.a821						Assemble_phx:
.a821		20 17 83	jsr $8317		jsr	AssembleGroup4
>a824		da					.byte $da
.a825						Assemble_stp:
.a825		20 17 83	jsr $8317		jsr	AssembleGroup4
>a828		db					.byte $db
.a829						Assemble_inx:
.a829		20 17 83	jsr $8317		jsr	AssembleGroup4
>a82c		e8					.byte $e8
.a82d						Assemble_nop:
.a82d		20 17 83	jsr $8317		jsr	AssembleGroup4
>a830		ea					.byte $ea
.a831						Assemble_sed:
.a831		20 17 83	jsr $8317		jsr	AssembleGroup4
>a834		f8					.byte $f8
.a835						Assemble_plx:
.a835		20 17 83	jsr $8317		jsr	AssembleGroup4
>a838		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a839						DecimalScalarTable:
>a839		66 66 66 66				.dword $66666666 ; 0.1
>a83d		de					.byte $de
>a83e		1f 85 eb 51				.dword $51eb851f ; 0.01
>a842		db					.byte $db
>a843		4c 37 89 41				.dword $4189374c ; 0.001
>a847		d8					.byte $d8
>a848		ac 8b db 68				.dword $68db8bac ; 0.0001
>a84c		d4					.byte $d4
>a84d		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a851		d1					.byte $d1
>a852		83 de 1b 43				.dword $431bde83 ; 1e-06
>a856		ce					.byte $ce
>a857		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a85b		ca					.byte $ca
>a85c		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a860		c7					.byte $c7
>a861		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a865		c4					.byte $c4
>a866		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a86a		c0					.byte $c0
>a86b		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a86f		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a870						SyntaxError:
.a870		a9 02		lda #$02		lda	#2
.a872		4c 85 96	jmp $9685		jmp	ErrorHandler
.a875						RangeError:
.a875		a9 04		lda #$04		lda	#4
.a877		4c 85 96	jmp $9685		jmp	ErrorHandler
.a87a						TypeError:
.a87a		a9 05		lda #$05		lda	#5
.a87c		4c 85 96	jmp $9685		jmp	ErrorHandler
.a87f						ArgumentError:
.a87f		a9 07		lda #$07		lda	#7
.a881		4c 85 96	jmp $9685		jmp	ErrorHandler
.a884						NotDoneError:
.a884		a9 0c		lda #$0c		lda	#12
.a886		4c 85 96	jmp $9685		jmp	ErrorHandler
.a889						ErrorText:
>a889		42 72 65 61 6b 00			.text	"Break",0
>a88f		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a897		72 72 6f 72 00
>a89c		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a8a4		20 62 79 20 7a 65 72 6f 00
>a8ad		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a8b5		61 6e 67 65 00
>a8ba		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a8c2		6d 61 74 63 68 00
>a8c8		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a8d0		65 6d 6f 72 79 00
>a8d6		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a8de		61 72 67 75 6d 65 6e 74 00
>a8e7		53 74 6f 70 00				.text	"Stop",0
>a8ec		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a8f4		6f 6f 20 6c 6f 6e 67 00
>a8fc		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a904		6e 20 66 61 69 6c 65 64 00
>a90d		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a915		61 74 61 00
>a919		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a921		65 6e 74 65 64 00
>a927		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a92f		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a93b		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a943		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a950		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a958		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a965		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a96d		68 6f 75 74 20 57 68 69 6c 65 00
>a978		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a980		68 6f 75 74 20 46 6f 72 00
>a989		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a991		61 63 6b 20 66 75 6c 6c 00
>a99a		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a9a2		75 63 74 75 72 65 00
>a9a9		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a9b1		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a9be		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a9c6		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a9d4		41 72 72 61 79 20 73 69			.text	"Array size",0
>a9dc		7a 65 00
>a9df		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a9e7		79 20 69 6e 64 65 78 00
>a9ef		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a9f7		74 20 64 65 63 6c 61 72 65 64 00
>aa02		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>aa0a		20 66 6f 75 6e 64 00
>aa11		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>aa19		65 72 72 6f 72 00
>aa1f		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>aa27		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc77		09 09 31 38 2f 30 31 2f			.text 9,9,"18/01/23 31"
>dc7f		32 33 20 33 31

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.aa2d						RectangleCommand:
.aa2d		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.aa2f		80 02		bra $aa33			bra 	ShapeDrawCmd
.aa31						CircleCommand:
.aa31		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.aa33						ShapeDrawCmd:
.aa33		20 bd aa	jsr $aabd			jsr 	RunGraphicsCommand
.aa36						ShapeDraw:
.aa36		0d 75 07	ora $0775			ora 	gxFillSolid  				; adjust AXY for solid fill.
.aa39		4c b1 aa	jmp $aab1			jmp 	ExecuteGraphicCommand	 	; and complete
.aa3c						SpriteCommand:
.aa3c		a2 00		ldx #$00			ldx 	#0
.aa3e		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get image number.
.aa41		5a		phy				phy
.aa42		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.aa44		a6 58		ldx $58				ldx 	NSMantissa0
.aa46		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.aa48		b0 0d		bcs $aa57			bcs 	_SCRange
.aa4a		a0 ff		ldy #$ff			ldy 	#255
.aa4c		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa4f		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.aa51		7a		ply				ply
.aa52		20 bd aa	jsr $aabd			jsr 	RunGraphicsCommand
.aa55		80 5a		bra $aab1			bra 	ExecuteGraphicCommand
.aa57						_SCRange:
.aa57		4c 75 a8	jmp $a875			jmp 	RangeError
.aa5a						ImageCommand:
.aa5a		a2 00		ldx #$00			ldx 	#0
.aa5c		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get image number.
.aa5f		20 bd aa	jsr $aabd			jsr 	RunGraphicsCommand
.aa62						ImageRunDraw:
.aa62		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.aa64		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa67		ad 7b 07	lda $077b			lda 	gxDrawScale
.aa6a		0a		asl a				asl 	a
.aa6b		0a		asl a				asl 	a
.aa6c		0a		asl a				asl 	a
.aa6d		a8		tay				tay
.aa6e		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.aa70		a6 58		ldx $58				ldx 	NSMantissa0
.aa72		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa75		60		rts				rts
.aa76						TextCommand:
.aa76		a2 00		ldx #$00			ldx 	#0
.aa78		20 4a a6	jsr $a64a			jsr 	EvaluateString 				; get text
.aa7b		20 bd aa	jsr $aabd			jsr 	RunGraphicsCommand
.aa7e						TextRunDraw:
.aa7e		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.aa80		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aa83		a0 00		ldy #$00			ldy 	#0
.aa85						_IRDLoop:
.aa85		a5 60		lda $60				lda 	NSMantissa1 				; access character
.aa87		85 37		sta $37				sta 	zTemp0+1
.aa89		a5 58		lda $58				lda 	NSMantissa0
.aa8b		85 36		sta $36				sta 	zTemp0
.aa8d		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa8f		f0 13		beq $aaa4			beq 	_IRDExit
.aa91		5a		phy				phy									; save string pos
.aa92		48		pha				pha 								; save char
.aa93		ad 7b 07	lda $077b			lda 	gxDrawScale 				; get scale
.aa96		0a		asl a				asl 	a
.aa97		0a		asl a				asl 	a
.aa98		0a		asl a				asl 	a
.aa99		a8		tay				tay
.aa9a		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.aa9c		fa		plx				plx 								; char to draw
.aa9d		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aaa0		7a		ply				ply 								; restore string pos
.aaa1		c8		iny				iny
.aaa2		90 e1		bcc $aa85			bcc 	_IRDLoop 					; go back if no error.
.aaa4						_IRDExit:
.aaa4		60		rts				rts
.aaa5						PlotCommand:
.aaa5		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.aaa7		20 bd aa	jsr $aabd			jsr 	RunGraphicsCommand
.aaaa		80 05		bra $aab1			bra 	ExecuteGraphicCommand
.aaac						LineCommand:
.aaac		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.aaae		20 bd aa	jsr $aabd			jsr 	RunGraphicsCommand
.aab1						ExecuteGraphicCommand:
.aab1		0d 74 07	ora $0774			ora 	gxCommandID 				; make a full command
.aab4		20 75 80	jsr $8075			jsr 	GXGraphicDraw 				; draw it and exit
.aab7		b0 01		bcs $aaba			bcs 	_EGCError
.aab9		60		rts				rts
.aaba						_EGCError:
.aaba		4c 70 a8	jmp $a870			jmp 	SyntaxError
.aabd						RunGraphicsCommand:
.aabd		8d 74 07	sta $0774			sta 	gxCommandID					; save TODO graphics command.
.aac0		68		pla				pla 								; pop handler address
.aac1		fa		plx				plx
.aac2		1a		inc a				inc 	a
.aac3		d0 01		bne $aac6			bne 	_RGINoCarry
.aac5		e8		inx				inx
.aac6						_RGINoCarry:
.aac6		8d 79 07	sta $0779			sta 	gxHandler
.aac9		8e 7a 07	stx $077a			stx 	gxHandler+1
.aacc						_RGICommandLoop:
.aacc		b1 30		lda ($30),y			lda 	(codePtr),y
.aace		c8		iny				iny
.aacf		c9 da		cmp #$da			cmp 	#KWD_TO						; is it TO x,y
.aad1		f0 53		beq $ab26			beq 	_RGI_To
.aad3		c9 c4		cmp #$c4			cmp 	#KWD_HERE 					; do it here.
.aad5		f0 55		beq $ab2c			beq 	_RGI_Here
.aad7		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.aad9		f0 3d		beq $ab18			beq 	_RGI_Exit
.aadb		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.aadd		f0 39		beq $ab18			beq 	_RGI_Exit
.aadf		c9 cc		cmp #$cc			cmp 	#KWD_OUTLINE 				; solid or outline
.aae1		f0 3e		beq $ab21			beq 	_RGI_Frame
.aae3		c9 d6		cmp #$d6			cmp 	#KWD_SOLID
.aae5		f0 33		beq $ab1a			beq 	_RGI_Solid
.aae7		c9 b8		cmp #$b8			cmp 	#KWD_BY 					; by offset
.aae9		f0 4b		beq $ab36			beq 	_RGI_By
.aaeb		c9 c2		cmp #$c2			cmp 	#KWD_FROM 					; from
.aaed		f0 17		beq $ab06			beq 	_RGI_Move2
.aaef		c9 bf		cmp #$bf			cmp 	#KWD_DIM 					; dim (set scale)
.aaf1		f0 62		beq $ab55			beq 	_RGI_Dim
.aaf3		c9 bd		cmp #$bd			cmp 	#KWD_COLOUR 				; colour or Color
.aaf5		f0 74		beq $ab6b			beq 	_RGI_Colour
.aaf7		c9 bc		cmp #$bc			cmp 	#KWD_COLOR
.aaf9		f0 70		beq $ab6b			beq 	_RGI_Colour
.aafb		ae 74 07	ldx $0774			ldx 	gxCommandID
.aafe		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.ab00		d0 03		bne $ab05			bne 	_RGI_Move 					; move
.ab02		4c 93 ab	jmp $ab93			jmp		_RGI_SpriteInstructions
.ab05						_RGI_Move:
.ab05		88		dey				dey 								; unpick get.
.ab06						_RGI_Move2:
.ab06		20 b9 ab	jsr $abb9			jsr 	GCGetCoordinatePair 		; move to here
.ab09		20 e0 ab	jsr $abe0			jsr 	GCCopyPairToStore 			; save
.ab0c		5a		phy				phy
.ab0d		20 d6 ab	jsr $abd6			jsr 	GCLoadAXY 					; load in
.ab10		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.ab12		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ab15		7a		ply				ply
.ab16		80 b4		bra $aacc			bra 	_RGICommandLoop 			; and go round
.ab18						_RGI_Exit:
.ab18		88		dey				dey 								; unpick : / EOL
.ab19		60		rts				rts
.ab1a						_RGI_Solid:
.ab1a		a9 02		lda #$02			lda 	#2
.ab1c		8d 75 07	sta $0775			sta 	gxFillSolid
.ab1f		80 ab		bra $aacc			bra 	_RGICommandLoop
.ab21						_RGI_Frame:
.ab21		9c 75 07	stz $0775			stz 	gxFillSolid
.ab24		80 a6		bra $aacc			bra 	_RGICommandLoop
.ab26						_RGI_To:
.ab26		20 b9 ab	jsr $abb9			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.ab29		20 e0 ab	jsr $abe0			jsr 	GCCopyPairToStore
.ab2c						_RGI_Here:
.ab2c		5a		phy				phy
.ab2d		20 d6 ab	jsr $abd6			jsr 	GCLoadAXY 					; load it into AXY
.ab30		20 90 ab	jsr $ab90			jsr 	_RGICallHandler 			; go do whatever it is.
.ab33		7a		ply				ply
.ab34		80 96		bra $aacc			bra 	_RGICommandLoop 			; and go round
.ab36						_RGI_By:
.ab36		20 c6 ab	jsr $abc6			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.ab39		18		clc				clc
.ab3a		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ab3c		6d 76 07	adc $0776			adc 	gxXPos
.ab3f		8d 76 07	sta $0776			sta 	gxXPos
.ab42		a5 61		lda $61				lda 	NSMantissa1+1
.ab44		6d 77 07	adc $0777			adc 	gxXPos+1
.ab47		8d 77 07	sta $0777			sta 	gxXPos+1
.ab4a		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab4c		18		clc				clc
.ab4d		6d 78 07	adc $0778			adc 	gxYPos
.ab50		8d 78 07	sta $0778			sta 	gxYPos
.ab53		80 d7		bra $ab2c			bra 	_RGI_Here
.ab55						_RGI_Dim:
.ab55		a2 01		ldx #$01			ldx	 	#1
.ab57		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.ab5a		a5 59		lda $59				lda 	NSMantissa0+1
.ab5c		c9 00		cmp #$00			cmp 	#0
.ab5e		f0 2d		beq $ab8d			beq 	_RGIRange
.ab60		c9 09		cmp #$09			cmp 	#8+1
.ab62		b0 29		bcs $ab8d			bcs		_RGIRange
.ab64		3a		dec a				dec 	a
.ab65		8d 7b 07	sta $077b			sta 	gxDrawScale
.ab68		4c cc aa	jmp $aacc			jmp 	_RGICommandLoop
.ab6b						_RGI_Colour:
.ab6b		a2 01		ldx #$01			ldx 	#1 							; colour
.ab6d		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.ab70		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.ab72		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.ab75		b1 30		lda ($30),y			lda 	(codePtr),y
.ab77		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.ab79		d0 04		bne $ab7f			bne 	_RGICDefaultMode
.ab7b		c8		iny				iny
.ab7c		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.ab7f						_RGICDefaultMode:
.ab7f		5a		phy				phy
.ab80		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.ab82		a6 59		ldx $59				ldx 	NSMantissa0+1
.ab84		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ab86		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ab89		7a		ply				ply
.ab8a		4c cc aa	jmp $aacc			jmp 	_RGICommandLoop 			; and go round
.ab8d						_RGIRange:
.ab8d		4c 75 a8	jmp $a875			jmp 	RangeError
.ab90						_RGICallHandler:
.ab90		6c 79 07	jmp ($0779)			jmp 	(gxHandler)
.ab93						_RGI_SpriteInstructions:
.ab93		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ab95		f0 07		beq $ab9e			beq 	_RGISpriteOff
.ab97		c9 c5		cmp #$c5			cmp 	#KWD_IMAGE
.ab99		f0 13		beq $abae			beq 	_RGISetImage
.ab9b		4c 05 ab	jmp $ab05			jmp 	_RGI_Move
.ab9e						_RGISpriteOff:
.ab9e		5a		phy				phy
.ab9f		a0 01		ldy #$01			ldy 	#1
.aba1		a2 00		ldx #$00			ldx 	#0
.aba3						_RGIDoCommandLoop:
.aba3		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.aba5		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.aba8		7a		ply				ply
.aba9		b0 e2		bcs $ab8d			bcs 	_RGIRange
.abab		4c cc aa	jmp $aacc			jmp 	_RGICommandLoop
.abae						_RGISetImage:
.abae		a2 01		ldx #$01			ldx 	#1
.abb0		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger
.abb3		5a		phy				phy
.abb4		aa		tax				tax
.abb5		a0 00		ldy #$00			ldy 	#0
.abb7		80 ea		bra $aba3			bra 	_RGIDoCommandLoop
.abb9						GCGetCoordinatePair:
.abb9		a2 01		ldx #$01			ldx 	#1
.abbb		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.abbe		20 74 96	jsr $9674			jsr 	CheckComma
.abc1		e8		inx				inx
.abc2		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.abc5		60		rts				rts
.abc6						GCSignedCoordinatePair:
.abc6		a2 01		ldx #$01			ldx 	#1
.abc8		20 7c a6	jsr $a67c			jsr 	Evaluate16BitIntegerSigned
.abcb		20 74 96	jsr $9674			jsr 	CheckComma
.abce		e8		inx				inx
.abcf		20 7c a6	jsr $a67c			jsr 	Evaluate16BitIntegerSigned
.abd2		60		rts				rts
.abd3						_GCCPRange:
.abd3		4c 75 a8	jmp $a875			jmp 	RangeError
.abd6						GCLoadAXY:
.abd6		ad 77 07	lda $0777			lda 	gxXPos+1
.abd9		ae 76 07	ldx $0776			ldx 	gxXPos
.abdc		ac 78 07	ldy $0778			ldy 	gxYPos
.abdf		60		rts				rts
.abe0						GCCopyPairToStore:
.abe0		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.abe2		8d 76 07	sta $0776			sta 	gxXPos
.abe5		a5 61		lda $61				lda 	NSMantissa1+1
.abe7		8d 77 07	sta $0777			sta 	gxXPos+1
.abea		a5 5a		lda $5a				lda 	NSMantissa0+2
.abec		8d 78 07	sta $0778			sta 	gxYPos
.abef		60		rts				rts
.0774						gxCommandID:
>0774								.fill 	1
.0775						gxFillSolid:
>0775								.fill 	1
.0776						gxXPos:
>0776								.fill 	2
.0778						gxYPos:
>0778								.fill 	1
.0779						gxHandler:
>0779								.fill 	2
.077b						gxDrawScale:
>077b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.abf0						BitmapCtrl:
.abf0		b1 30		lda ($30),y			lda 	(codePtr),y
.abf2		c8		iny				iny
.abf3		a2 01		ldx #$01			ldx 	#1
.abf5		c9 cb		cmp #$cb			cmp 	#KWD_ON
.abf7		f0 11		beq $ac0a			beq 	BitmapSwitch
.abf9		ca		dex				dex
.abfa		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.abfc		f0 0c		beq $ac0a			beq 	BitmapSwitch
.abfe		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get the colour
.ac01		5a		phy				phy
.ac02		aa		tax				tax
.ac03		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.ac05		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac08		7a		ply				ply
.ac09		60		rts				rts
.ac0a						BitmapSwitch:
.ac0a		5a		phy				phy
.ac0b		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.ac0d		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.ac0f		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac12		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.ac14		a0 00		ldy #$00			ldy 	#0
.ac16		a2 ff		ldx #$ff			ldx 	#$FF
.ac18		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac1b		9c 75 07	stz $0775			stz 	gxFillSolid
.ac1e		9c 76 07	stz $0776			stz 	gxXPos
.ac21		9c 77 07	stz $0777			stz 	gxXPos+1
.ac24		9c 78 07	stz $0778			stz 	gxYPos
.ac27		9c 7b 07	stz $077b			stz 	gxDrawScale
.ac2a		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.ac2c		a2 00		ldx #$00			ldx 	#0
.ac2e		a0 00		ldy #$00			ldy 	#0
.ac30		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac33		7a		ply				ply
.ac34		60		rts				rts
.ac35						SpritesCtrl:
.ac35		b1 30		lda ($30),y			lda 	(codePtr),y
.ac37		c8		iny				iny
.ac38		a2 01		ldx #$01			ldx 	#1
.ac3a		c9 cb		cmp #$cb			cmp 	#KWD_ON
.ac3c		f0 08		beq $ac46			beq 	SpriteSwitch
.ac3e		ca		dex				dex
.ac3f		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ac41		f0 03		beq $ac46			beq 	SpriteSwitch
.ac43		4c 70 a8	jmp $a870			jmp 	SyntaxError
.ac46						SpriteSwitch:
.ac46		5a		phy				phy
.ac47		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.ac49		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.ac4b		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac4e		7a		ply				ply
.ac4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.ac50						GfxCommand:
.ac50		a2 00		ldx #$00			ldx 	#0
.ac52		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; command
.ac55		20 74 96	jsr $9674			jsr 	CheckComma
.ac58		e8		inx				inx
.ac59		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger 		; X
.ac5c		20 74 96	jsr $9674			jsr 	CheckComma
.ac5f		e8		inx				inx
.ac60		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; Y
.ac63		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.ac65		4a		lsr a				lsr 	a
.ac66		d0 12		bne $ac7a			bne 	_GfxError
.ac68		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.ac6a		b0 0e		bcs $ac7a			bcs 	_GfxError 					; bit 7 should have been zero
.ac6c		5a		phy				phy 								; save pos
.ac6d		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.ac6f		a6 59		ldx $59				ldx 	NSMantissa0+1
.ac71		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ac73		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.ac76		b0 02		bcs $ac7a			bcs 	_GfxError
.ac78		7a		ply				ply 								; restore pos and exit.
.ac79		60		rts				rts
.ac7a						_GfxError:
.ac7a		4c 75 a8	jmp $a875			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.ac7d						UnaryHit:
.ac7d		fa		plx				plx
.ac7e		a9 36		lda #$36			lda 	#zTemp0
.ac80		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.ac83		20 74 96	jsr $9674			jsr 	CheckComma
.ac86		e8		inx				inx
.ac87		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.ac8a		20 6c 96	jsr $966c			jsr		CheckRightBracket
.ac8d		ca		dex				dex 								; fix back up again.
.ac8e		da		phx				phx 								; save X/Y
.ac8f		5a		phy				phy
.ac90		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.ac92		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac94		aa		tax				tax
.ac95		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.ac97		20 75 80	jsr $8075			jsr 	GXGraphicDraw 				; calculate result
.ac9a		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.ac9b		7a		ply				ply 								; restore XY
.ac9c		fa		plx				plx
.ac9d		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte 					; return the hit result
.aca0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.aca1						PaletteCommand:
.aca1		a2 00		ldx #$00			ldx 	#0
.aca3		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; colour
.aca6		20 74 96	jsr $9674			jsr 	CheckComma
.aca9		e8		inx				inx
.acaa		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger 		; r
.acad		20 74 96	jsr $9674			jsr 	CheckComma
.acb0		e8		inx				inx
.acb1		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; g
.acb4		20 74 96	jsr $9674			jsr 	CheckComma
.acb7		e8		inx				inx
.acb8		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; b
.acbb		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.acbd		85 36		sta $36				sta 	zTemp0
.acbf		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.acc1		85 37		sta $37				sta 	zTemp0+1
.acc3		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.acc5		26 37		rol $37				rol	 	zTemp0+1
.acc7		06 36		asl $36				asl 	zTemp0
.acc9		26 37		rol $37				rol	 	zTemp0+1
.accb		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.accd		85 01		sta $01				sta 	1
.accf		5a		phy				phy
.acd0		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.acd2		92 36		sta ($36)			sta 	(zTemp0)
.acd4		a0 01		ldy #$01			ldy 	#1
.acd6		a5 5a		lda $5a				lda 	NSMantissa0+2
.acd8		91 36		sta ($36),y			sta 	(zTemp0),y
.acda		a5 59		lda $59				lda 	NSMantissa0+1
.acdc		c8		iny				iny
.acdd		91 36		sta ($36),y			sta 	(zTemp0),y
.acdf		7a		ply				ply
.ace0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.ace1						XLoadCommand:
.ace1		20 ef 8f	jsr $8fef			jsr 	NewProgram
.ace4		20 fa 84	jsr $84fa			jsr 	BackloadProgram
.ace7		4c b9 85	jmp $85b9			jmp 	WarmStart
.acea						XGoCommand:
.acea		20 ef 8f	jsr $8fef			jsr 	NewProgram
.aced		20 fa 84	jsr $84fa			jsr 	BackloadProgram
.acf0		4c 7a 91	jmp $917a			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.acf3						UnaryEvent:
.acf3		fa		plx				plx
.acf4		20 8d ad	jsr $ad8d			jsr 	TimerToStackX 				; timer in +0
.acf7		e8		inx				inx  								; put reference into +1
.acf8		20 d3 9f	jsr $9fd3			jsr 	EvaluateTerm
.acfb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.acfd		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.acff		d0 4c		bne $ad4d			bne 	_UEType
.ad01		e8		inx				inx 								; put the step in +2
.ad02		20 74 96	jsr $9674			jsr 	CheckComma
.ad05		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger
.ad08		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.ad0b		ca		dex				dex
.ad0c		ca		dex				dex
.ad0d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.ad0f		85 36		sta $36				sta 	zTemp0
.ad11		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.ad13		85 37		sta $37				sta 	zTemp0+1
.ad15		5a		phy				phy
.ad16		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.ad18		b1 36		lda ($36),y			lda 	(zTemp0),y
.ad1a		30 2d		bmi $ad49			bmi 	_UEFalse 					; exit if signed.
.ad1c		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.ad1e		b5 58		lda $58,x			lda 	NSMantissa0,x
.ad20		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.ad22		c8		iny				iny
.ad23		b5 60		lda $60,x			lda 	NSMantissa1,x
.ad25		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ad27		c8		iny				iny
.ad28		b5 68		lda $68,x			lda 	NSMantissa2,x
.ad2a		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ad2c		90 1b		bcc $ad49			bcc 	_UEFalse 					; no, return FALSE.
.ad2e		18		clc				clc
.ad2f		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.ad31		b5 58		lda $58,x			lda 	NSMantissa0,x
.ad33		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.ad35		91 36		sta ($36),y			sta 	(zTemp0),y
.ad37		c8		iny				iny
.ad38		b5 60		lda $60,x			lda 	NSMantissa1,x
.ad3a		75 62		adc $62,x			adc 	NSMantissa1+2,x
.ad3c		91 36		sta ($36),y			sta 	(zTemp0),y
.ad3e		c8		iny				iny
.ad3f		b5 68		lda $68,x			lda 	NSMantissa2,x
.ad41		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.ad43		91 36		sta ($36),y			sta 	(zTemp0),y
.ad45		7a		ply				ply
.ad46		4c f2 96	jmp $96f2			jmp 	ReturnTrue
.ad49						_UEFalse:
.ad49		7a		ply				ply 								; restore Y
.ad4a		4c fd 96	jmp $96fd			jmp 	ReturnFalse 				; and return False
.ad4d						_UEType:
.ad4d		4c 7a a8	jmp $a87a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.ad50						UnaryJoyX:
.ad50		18		clc				clc
.ad51		80 01		bra $ad54			bra 	JoyMain
.ad53						UnaryJoyY:
.ad53		38		sec				sec
.ad54						JoyMain:
.ad54		fa		plx				plx 								; get pos
.ad55		08		php				php 								; save carry (set for Y)
.ad56		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ad59		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.ad5c		20 7f 82	jsr $827f			jsr 	EXTReadController 			; read the controller.
.ad5f		28		plp				plp
.ad60		b0 02		bcs $ad64			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.ad62		4a		lsr a				lsr 	a
.ad63		4a		lsr a				lsr 	a
.ad64						_JMNoShift:
.ad64		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.ad65		b0 07		bcs $ad6e			bcs 	JMIsLeft
.ad67		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.ad68		b0 07		bcs $ad71			bcs 	JMIsRight
.ad6a		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; zero result
.ad6d		60		rts				rts
.ad6e						JMIsLeft:
.ad6e		4c f2 96	jmp $96f2			jmp 	ReturnTrue
.ad71						JMIsRight:
.ad71		a9 01		lda #$01			lda 	#1
.ad73		20 f4 a6	jsr $a6f4			jsr 	NSMSetByte
.ad76		60		rts				rts
.ad77						UnaryJoyB:
.ad77		fa		plx				plx 								; get pos
.ad78		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ad7b		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.ad7e		20 7f 82	jsr $827f			jsr 	EXTReadController 			; read the controller.
.ad81		29 10		and #$10			and 	#$10
.ad83		d0 e9		bne $ad6e			bne 	JMIsLeft
.ad85		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero
.ad88		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.ad89						UnaryTimer:
.ad89		fa		plx				plx
.ad8a		20 6c 96	jsr $966c			jsr 	CheckRightBracket
.ad8d						TimerToStackX:
.ad8d		20 f2 a6	jsr $a6f2			jsr 	NSMSetZero 					; zero result
.ad90		64 01		stz $01				stz 	1 							; access I/O
.ad92		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.ad95		95 58		sta $58,x			sta 	NSMantissa0,x
.ad97		ad 5a d6	lda $d65a			lda 	$D65A
.ad9a		95 60		sta $60,x			sta 	NSMantissa1,x
.ad9c		ad 5b d6	lda $d65b			lda 	$D65B
.ad9f		95 68		sta $68,x			sta 	NSMantissa2,x
.ada1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.ada2						MemoryDeleteLine:
.ada2		20 c1 ad	jsr $adc1			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ada5		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ada7		a8		tay				tay
.ada8						_MDDLLoop:
.ada8		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.adaa		92 30		sta ($30)			sta 	(codePtr)
.adac		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.adae		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.adb0		d0 07		bne $adb9			bne 	_MDLDLNext
.adb2		a5 31		lda $31				lda 	codePtr+1
.adb4		c5 3b		cmp $3b				cmp 	zTemp2+1
.adb6		d0 01		bne $adb9			bne 	_MDLDLNext
.adb8						_MDDLExit:
.adb8		60		rts				rts
.adb9						_MDLDLNext:
.adb9		e6 30		inc $30				inc 	codePtr						; next byte
.adbb		d0 eb		bne $ada8			bne 	_MDDLLoop
.adbd		e6 31		inc $31				inc 	codePtr+1
.adbf		80 e7		bra $ada8			bra 	_MDDLLoop
.adc1						IMemoryFindEnd:
.adc1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adc3		85 3a		sta $3a				sta 	0+zTemp2
.adc5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adc7		85 3b		sta $3b				sta 	1+zTemp2
.adc9						_MDLFELoop:
.adc9		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.adcb		f0 0b		beq $add8			beq 	_MDLFEExit
.adcd		18		clc				clc
.adce		65 3a		adc $3a				adc 	zTemp2
.add0		85 3a		sta $3a				sta 	zTemp2
.add2		90 f5		bcc $adc9			bcc 	_MDLFELoop
.add4		e6 3b		inc $3b				inc 	zTemp2+1
.add6		80 f1		bra $adc9			bra 	_MDLFELoop
.add8						_MDLFEExit:
.add8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.add9						MemoryInsertLine:
.add9		08		php				php
.adda		20 c1 ad	jsr $adc1			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.addd		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.addf		1a		inc a				inc 	a
.ade0		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ade2		b0 36		bcs $ae1a			bcs 	_MDLIError 					; no, fail.
.ade4		28		plp				plp 								; do at a specific point or the end ?
.ade5		90 08		bcc $adef			bcc 	_MDLIFound 					; if specific point already set.
.ade7		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.ade9		85 30		sta $30				sta 	codePtr 					; end.
.adeb		a5 3b		lda $3b				lda 	zTemp2+1
.aded		85 31		sta $31				sta 	codePtr+1
.adef						_MDLIFound:
.adef		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.adf2		a8		tay				tay
.adf3						_MDLIInsert:
.adf3		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.adf5		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.adf7		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.adf9		c5 3a		cmp $3a				cmp 	zTemp2
.adfb		d0 06		bne $ae03			bne 	_MDLINext
.adfd		a5 31		lda $31				lda 	codePtr+1
.adff		c5 3b		cmp $3b				cmp 	zTemp2+1
.ae01		f0 0a		beq $ae0d			beq 	_MDLIHaveSpace
.ae03						_MDLINext:
.ae03		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.ae05		d0 02		bne $ae09			bne 	_MDLINoBorrow
.ae07		c6 3b		dec $3b				dec 	zTemp2+1
.ae09						_MDLINoBorrow:
.ae09		c6 3a		dec $3a				dec 	zTemp2
.ae0b		80 e6		bra $adf3			bra 	_MDLIInsert
.ae0d						_MDLIHaveSpace:
.ae0d		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.ae10		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.ae11						_MDLICopy:
.ae11		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ae14		91 30		sta ($30),y			sta 	(codePtr),y
.ae16		88		dey				dey
.ae17		10 f8		bpl $ae11			bpl 	_MDLICopy
.ae19		60		rts				rts
.ae1a						_MDLIError:
.ae1a		a9 06		lda #$06		lda	#6
.ae1c		4c 85 96	jmp $9685		jmp	ErrorHandler
.ae1f						MDLAppendLine:
.ae1f		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ae21		85 36		sta $36				sta 	zTemp0
.ae23		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae25		85 38		sta $38				sta 	0+zTemp1
.ae27		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae29		85 39		sta $39				sta 	1+zTemp1
.ae2b		b2 38		lda ($38)			lda 	(zTemp1)
.ae2d		d0 0a		bne $ae39			bne 	_MDLANoInitialise
.ae2f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae31		8d 7c 07	sta $077c			sta 	0+AppendPointer
.ae34		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae36		8d 7d 07	sta $077d			sta 	1+AppendPointer
.ae39						_MDLANoInitialise:
.ae39		18		clc				clc
.ae3a		ad 7c 07	lda $077c			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ae3d		85 38		sta $38				sta 	zTemp1
.ae3f		72 36		adc ($36)			adc 	(zTemp0)
.ae41		8d 7c 07	sta $077c			sta 	AppendPointer
.ae44		ad 7d 07	lda $077d			lda 	AppendPointer+1
.ae47		85 39		sta $39				sta 	zTemp1+1
.ae49		69 00		adc #$00			adc 	#0
.ae4b		8d 7d 07	sta $077d			sta 	AppendPointer+1
.ae4e		a0 00		ldy #$00			ldy 	#0
.ae50						_MDLACopy:
.ae50		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ae52		91 38		sta ($38),y			sta 	(zTemp1),y
.ae54		c8		iny				iny
.ae55		98		tya				tya
.ae56		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ae58		d0 f6		bne $ae50			bne 	_MDLACopy
.ae5a		a9 00		lda #$00			lda 	#0 							; end of program.
.ae5c		91 38		sta ($38),y			sta 	(zTemp1),y
.ae5e		60		rts				rts
.077c						AppendPointer:
>077c								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.ae5f						MemoryNew:
.ae5f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae61		85 30		sta $30				sta 	codePtr
.ae63		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae65		85 31		sta $31				sta 	codePtr+1
.ae67		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ae69		92 30		sta ($30)			sta 	(codePtr)
.ae6b		60		rts				rts
.ae6c						MemoryInline:
.ae6c		98		tya				tya 								; put address into stack,x
.ae6d		18		clc				clc  								; get the offset, add codePtr
.ae6e		65 30		adc $30				adc 	codePtr
.ae70		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ae72		a5 31		lda $31				lda 	codePtr+1
.ae74		69 00		adc #$00			adc 	#0
.ae76		95 60		sta $60,x			sta 	NSMantissa1,x
.ae78		74 68		stz $68,x			stz 	NSMantissa2,x
.ae7a		74 70		stz $70,x			stz 	NSMantissa3,x
.ae7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.ae7d						MemorySearch:
.ae7d		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ae7f		86 37		stx $37				stx 	zTemp0+1
.ae81		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae83		85 30		sta $30				sta 	codePtr
.ae85		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae87		85 31		sta $31				sta 	codePtr+1
.ae89						_MTAXLoop:
.ae89		b2 30		lda ($30)			lda 	(codePtr)
.ae8b		18		clc				clc
.ae8c		f0 21		beq $aeaf			beq 	_MTAXExit 					; reached end, exit with CC.
.ae8e		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ae90		b1 30		lda ($30),y			lda 	(codePtr),y
.ae92		38		sec				sec
.ae93		e5 36		sbc $36				sbc 	zTemp0
.ae95		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ae97		c8		iny				iny 								; do the MSB
.ae98		b1 30		lda ($30),y			lda 	(codePtr),y
.ae9a		e5 37		sbc $37				sbc 	zTemp0+1
.ae9c		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ae9e		f0 0f		beq $aeaf			beq 	_MTAXExit	 				; found so exit (CS will be set)
.aea0		b0 0d		bcs $aeaf			bcs 	_MTAXExit 					; current < required exit
.aea2		18		clc				clc
.aea3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.aea5		65 30		adc $30				adc 	codePtr
.aea7		85 30		sta $30				sta 	codePtr
.aea9		90 02		bcc $aead			bcc 	_CREExit
.aeab		e6 31		inc $31				inc 	codePtr+1 					; carry
.aead						_CREExit:
.aead		80 da		bra $ae89			bra 	_MTAXLoop
.aeaf						_MTAXExit:
.aeaf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.aeb0						UpdateFont:
.aeb0		a5 01		lda $01				lda 	1 							; save position
.aeb2		48		pha				pha
.aeb3		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.aeb5		85 01		sta $01				sta 	1
.aeb7		a9 de		lda #$de			lda 	#((FontBinary) & $FF)
.aeb9		85 36		sta $36				sta 	0+zTemp0
.aebb		a9 ae		lda #$ae			lda 	#((FontBinary) >> 8)
.aebd		85 37		sta $37				sta 	1+zTemp0
.aebf		a9 00		lda #$00			lda 	#(($C000) & $FF)
.aec1		85 38		sta $38				sta 	0+zTemp1
.aec3		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.aec5		85 39		sta $39				sta 	1+zTemp1
.aec7						_UFCopy1:
.aec7		a0 00		ldy #$00			ldy 	#0
.aec9						_UFCopy2:
.aec9		b1 36		lda ($36),y			lda 	(zTemp0),y
.aecb		91 38		sta ($38),y			sta 	(zTemp1),y
.aecd		c8		iny				iny
.aece		d0 f9		bne $aec9			bne 	_UFCopy2
.aed0		e6 37		inc $37				inc 	zTemp0+1
.aed2		e6 39		inc $39				inc 	zTemp1+1
.aed4		a5 39		lda $39				lda 	zTemp1+1
.aed6		c9 c8		cmp #$c8			cmp 	#$C8
.aed8		d0 ed		bne $aec7			bne 	_UFCopy1
.aeda		68		pla				pla 								; restore.
.aedb		85 01		sta $01				sta 	1
.aedd		60		rts				rts
.aede						FontBinary:
>aede		06 09 10 3c 10 21 7e 00				.binary 	"../common/generated/font.bin"
>aee6		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>aef6		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>af06		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>af16		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>af26		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>af36		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>af46		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>af56		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>af66		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>af76		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>af86		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>af96		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>afa6		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>afb6		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>afc6		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>afd6		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>afe6		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>aff6		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>b006		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>b016		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>b026		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>b036		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>b046		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>b056		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>b066		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>b076		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>b086		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>b096		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>b0a6		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>b0b6		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>b0c6		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>b0d6		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>b0e6		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>b0f6		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>b106		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>b116		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>b126		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>b136		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>b146		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>b156		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>b166		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>b176		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>b186		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>b196		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>b1a6		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>b1b6		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>b1c6		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>b1d6		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>b1e6		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>b1f6		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>b206		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>b216		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>b226		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>b236		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>b246		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>b256		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>b266		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>b276		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>b286		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>b296		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>b2a6		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>b2b6		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>b2c6		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>b2d6		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>b2e6		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>b2f6		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>b306		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>b316		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>b326		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b336		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b346		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b356		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b366		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b376		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b386		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b396		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b3a6		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b3b6		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b3c6		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b3d6		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b3e6		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b3f6		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b406		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b416		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b426		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b436		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b446		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b456		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b466		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b476		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>b486		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>b496		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>b4a6		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>b4b6		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>b4c6		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>b4d6		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>b4e6		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b4f6		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b506		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b516		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b526		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b536		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b546		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b556		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b566		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b576		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b586		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b596		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>b5a6		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>b5b6		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>b5c6		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>b5d6		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>b5e6		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>b5f6		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>b606		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b616		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b626		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b636		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b646		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b656		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b666		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b676		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b686		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b696		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b6a6		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b6b6		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b6c6		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b6d6		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b6de						PingCommand:
.b6de		5a		phy				phy 								; save pos
.b6df		a9 01		lda #$01			lda 	#1 						; push channel.
.b6e1		48		pha				pha
.b6e2		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b6e4		a2 06		ldx #$06			ldx 	#6 						; length
.b6e6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6e8		80 24		bra $b70e			bra 	SoundEffectCommand
.b6ea						ZapCommand:
.b6ea		5a		phy				phy 								; save pos
.b6eb		a9 01		lda #$01			lda 	#1 						; push channel.
.b6ed		48		pha				pha
.b6ee		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b6f0		a2 0a		ldx #$0a			ldx 	#10 						; length
.b6f2		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b6f4		80 18		bra $b70e			bra 	SoundEffectCommand
.b6f6						ShootCommand:
.b6f6		5a		phy				phy 								; save pos
.b6f7		a9 03		lda #$03			lda 	#3 						; push channel.
.b6f9		48		pha				pha
.b6fa		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b6fc		a2 04		ldx #$04			ldx 	#4 						; length
.b6fe		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b700		80 0c		bra $b70e			bra 	SoundEffectCommand
.b702						Explode:
.b702		5a		phy				phy 								; save pos
.b703		a9 03		lda #$03			lda 	#3 						; push channel.
.b705		48		pha				pha
.b706		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b708		a2 0a		ldx #$0a			ldx 	#10 						; length
.b70a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b70c		80 00		bra $b70e			bra 	SoundEffectCommand
.b70e						SoundEffectCommand:
.b70e		8d 7e 07	sta $077e			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b711		9c 7f 07	stz $077f			stz 	SoundCommandBlock+1
.b714		a9 0f		lda #$0f			lda 	#15
.b716		8d 80 07	sta $0780			sta 	SoundCommandBlock+2
.b719		8e 81 07	stx $0781			stx 	SoundCommandBlock+3
.b71c		8c 82 07	sty $0782			sty 	SoundCommandBlock+4
.b71f		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b722		68		pla				pla
.b723		09 10		ora #$10			ora 	#$10  						; execute command $11
.b725		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b727		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b729		20 7f 80	jsr $807f			jsr 	SNDCommand
.b72c		7a		ply				ply
.b72d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b72e						UnaryPlaying:
.b72e		fa		plx				plx
.b72f		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; get channel #
.b732		48		pha				pha
.b733		20 6c 96	jsr $966c			jsr		CheckRightBracket
.b736		68		pla				pla
.b737		c9 04		cmp #$04			cmp 	#4
.b739		b0 0c		bcs $b747			bcs 	_UPNotPlaying
.b73b		09 20		ora #$20			ora 	#$20 						; query playing ?
.b73d		20 7f 80	jsr $807f			jsr 	SNDCommand
.b740		c9 00		cmp #$00			cmp 	#0
.b742		f0 03		beq $b747			beq 	_UPNotPlaying
.b744		4c f2 96	jmp $96f2			jmp 	ReturnTrue
.b747						_UPNotPlaying:
.b747		4c fd 96	jmp $96fd			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b74a						SoundCommand:
.b74a		b1 30		lda ($30),y			lda 	(codePtr),y
.b74c		c9 ca		cmp #$ca			cmp 	#KWD_OFF 					; SOUND OFF ?
.b74e		d0 09		bne $b759			bne 	_SNDMain
.b750		c8		iny				iny 								; skip OFF
.b751		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b753		5a		phy				phy
.b754		20 7f 80	jsr $807f			jsr 	SNDCommand
.b757		7a		ply				ply
.b758		60		rts				rts
.b759						_SNDMain:
.b759		a2 00		ldx #$00			ldx 	#0
.b75b		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; channel
.b75e		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b760		b0 4b		bcs $b7ad			bcs 	_SndError
.b762		e8		inx				inx 								; do the rest in slot 1.
.b763		20 74 96	jsr $9674			jsr 	CheckComma
.b766		20 72 a6	jsr $a672			jsr 	Evaluate16BitInteger 		; Pitch
.b769		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b76b		c9 10		cmp #$10			cmp 	#16
.b76d		b0 3e		bcs $b7ad			bcs 	_SndError
.b76f		8d 7f 07	sta $077f			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b772		b5 58		lda $58,x			lda 	NSMantissa0,x
.b774		8d 7e 07	sta $077e			sta 	SoundCommandBlock
.b777		20 74 96	jsr $9674			jsr 	CheckComma
.b77a		20 8d a6	jsr $a68d			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b77d		8d 81 07	sta $0781			sta 	SoundCommandBlock+3
.b780		a9 0f		lda #$0f			lda 	#15
.b782		8d 80 07	sta $0780			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b785		9c 82 07	stz $0782			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b788		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b78b		b1 30		lda ($30),y			lda 	(codePtr),y
.b78d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b78f		d0 0e		bne $b79f			bne 	_SNDPlay
.b791		c8		iny				iny
.b792		20 7c a6	jsr $a67c			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b795		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b797		8d 82 07	sta $0782			sta 	SoundCommandBlock+4
.b79a		b5 60		lda $60,x			lda 	NSMantissa1,x
.b79c		8d 83 07	sta $0783			sta 	SoundCommandBlock+5
.b79f						_SNDPlay:
.b79f		5a		phy				phy
.b7a0		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b7a2		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b7a4		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b7a6		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b7a8		20 7f 80	jsr $807f			jsr 	SNDCommand
.b7ab		7a		ply				ply
.b7ac		60		rts				rts
.b7ad						_SndError:
.b7ad		4c 75 a8	jmp $a875			jmp 	RangeError
.077e						SoundCommandBlock:
>077e								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b7b0						StackPushByte:
.b7b0		48		pha				pha 								; save byte on stack
.b7b1		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b7b3		d0 08		bne $b7bd			bne 	_SPBNoBorrow
.b7b5		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b7b7		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b7b9		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7bb		90 06		bcc $b7c3			bcc 	_SPBMemory
.b7bd						_SPBNoBorrow:
.b7bd		c6 34		dec $34				dec 	basicStack
.b7bf		68		pla				pla 								; get back and write
.b7c0		92 34		sta ($34)			sta 	(basicStack)
.b7c2		60		rts				rts
.b7c3						_SPBMemory:
.b7c3		a9 12		lda #$12		lda	#18
.b7c5		4c 85 96	jmp $9685		jmp	ErrorHandler
.b7c8						StackPopByte:
.b7c8		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b7ca		e6 34		inc $34				inc 	basicStack
.b7cc		d0 02		bne $b7d0			bne 	_SPBNoCarry
.b7ce		e6 35		inc $35				inc 	basicStack+1
.b7d0						_SPBNoCarry:
.b7d0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b7d1						StackOpen:
.b7d1		48		pha				pha 								; save frame byte
.b7d2		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b7d4		0a		asl a				asl 	a 							; claim twice this for storage
.b7d5		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b7d7		38		sec				sec 								; so basically subtracting from
.b7d8		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b7da		85 34		sta $34				sta 	basicStack
.b7dc		b0 09		bcs $b7e7			bcs 	_SONoBorrow
>b7de		db						.byte 	$DB 						; causes a break in the emulator
.b7df		c6 35		dec $35				dec 	basicStack+1
.b7e1		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b7e3		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7e5		90 04		bcc $b7eb			bcc 	_SOMemory
.b7e7						_SONoBorrow:
.b7e7		68		pla				pla 								; get marker back and write at TOS
.b7e8		92 34		sta ($34)			sta 	(basicStack)
.b7ea		60		rts				rts
.b7eb						_SOMemory:
.b7eb		a9 12		lda #$12		lda	#18
.b7ed		4c 85 96	jmp $9685		jmp	ErrorHandler
.b7f0						StackClose:
.b7f0		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b7f2		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b7f4		0a		asl a				asl 	a 							; claim twice this.
.b7f5		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b7f7		85 34		sta $34				sta 	basicStack
.b7f9		90 02		bcc $b7fd			bcc 	_SCExit
.b7fb		e6 35		inc $35				inc 	basicStack+1
.b7fd						_SCExit:
.b7fd		60		rts				rts
.b7fe						StackCheckFrame:
.b7fe		48		pha				pha
.b7ff						_StackRemoveLocals:
.b7ff		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b801		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b803		b0 05		bcs $b80a			bcs 	_SCNoLocal
.b805		20 8e 8e	jsr $8e8e			jsr 	LocalPopValue 				; restore the local value
.b808		80 f5		bra $b7ff			bra 	_StackRemoveLocals 			; gr round again
.b80a						_SCNoLocal:
.b80a		68		pla				pla 								; get the frame check.
.b80b		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b80d		29 f0		and #$f0			and 	#$F0 						; check type bits
.b80f		d0 01		bne $b812			bne 	_SCFError 					; different, we have structures mixed up
.b811		60		rts				rts
.b812						_SCFError:
.b812		8a		txa				txa 								; report error X
.b813		4c 85 96	jmp $9685			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b816						STKSaveCodePosition:
.b816		5a		phy				phy
.b817		98		tya				tya 								; save Y
.b818		a0 05		ldy #$05			ldy 	#5
.b81a		91 34		sta ($34),y			sta 	(basicStack),y
.b81c		88		dey				dey 								; save Code Pointer
.b81d						_STKSaveLoop:
.b81d		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b820		91 34		sta ($34),y			sta 	(basicStack),y
.b822		88		dey				dey
.b823		d0 f8		bne $b81d			bne 	_STKSaveLoop
.b825		7a		ply				ply
.b826		60		rts				rts
.b827						STKLoadCodePosition:
.b827		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b829						_STKLoadLoop:
.b829		b1 34		lda ($34),y			lda 	(basicStack),y
.b82b		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b82e		c8		iny				iny
.b82f		c0 05		cpy #$05			cpy 	#5
.b831		d0 f6		bne $b829			bne 	_STKLoadLoop
.b833		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b835		a8		tay				tay
.b836		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b837						StackReset:
.b837		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b839		85 34		sta $34				sta 	0+basicStack
.b83b		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b83d		85 35		sta $35				sta 	1+basicStack
.b83f		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b841		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b843		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b844						StringConcrete:
.b844		5a		phy				phy 								; save position on stack
.b845		20 bf a1	jsr $a1bf			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b848		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b84a		85 38		sta $38				sta 	zTemp1
.b84c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b84e		85 39		sta $39				sta 	zTemp1+1
.b850		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b852						_SALength:
.b852		c8		iny				iny
.b853		b1 38		lda ($38),y			lda 	(zTemp1),y
.b855		d0 fb		bne $b852			bne 	_SALength
.b857		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b859		b0 3d		bcs $b898			bcs 	_SALengthError
.b85b		98		tya				tya 				 				; length of the new string
.b85c		18		clc				clc
.b85d		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b85f		90 02		bcc $b863			bcc 	_SAHaveLength
.b861		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b863						_SAHaveLength:
.b863		48		pha				pha 								; save length.
.b864		38		sec				sec
.b865		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b867		6d 0a 04	adc $040a			adc 	stringMemory
.b86a		8d 0a 04	sta $040a			sta 	stringMemory
.b86d		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b86f		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b871		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b873		6d 0b 04	adc $040b			adc 	stringMemory+1
.b876		8d 0b 04	sta $040b			sta 	stringMemory+1
.b879		85 3b		sta $3b				sta 	zTemp2+1
.b87b		95 60		sta $60,x			sta 	NSMantissa1,x
.b87d		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b87e		38		sec				sec
.b87f		e9 03		sbc #$03			sbc 	#3
.b881		92 3a		sta ($3a)			sta 	(zTemp2)
.b883		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b885		a0 01		ldy #$01			ldy 	#1
.b887		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b889						_SACopyNewString:
.b889		a0 00		ldy #$00			ldy 	#0
.b88b						_SACopyNSLoop:
.b88b		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b88d		c8		iny				iny 								; write two on in string storage
.b88e		c8		iny				iny
.b88f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b891		88		dey				dey 								; this makes it one one.
.b892		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b894		d0 f5		bne $b88b			bne 	_SACopyNSLoop
.b896		7a		ply				ply
.b897		60		rts				rts
.b898						_SALengthError:
.b898		a9 09		lda #$09		lda	#9
.b89a		4c 85 96	jmp $9685		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b89d						StringSystemInitialise:
.b89d		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b89f		8d 0a 04	sta $040a			sta 	0+stringMemory
.b8a2		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b8a4		8d 0b 04	sta $040b			sta 	1+stringMemory
.b8a7		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b8aa		60		rts				rts
.b8ab						StringSpaceInitialise:
.b8ab		20 bf a1	jsr $a1bf			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8ae		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8b0		8d 0c 04	sta $040c			sta 	stringInitialised
.b8b3		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b8b6		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b8b9		ad 0b 04	lda $040b			lda 	stringMemory+1
.b8bc		3a		dec a				dec 	a
.b8bd		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8c0		60		rts				rts
.b8c1						StringTempAllocate:
.b8c1		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8c3		b0 30		bcs $b8f5			bcs 	_STALength
.b8c5		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b8c8		30 05		bmi $b8cf			bmi 	_STAAllocate
.b8ca		48		pha				pha 								; save value to subtract.
.b8cb		20 ab b8	jsr $b8ab			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8ce		68		pla				pla 								; restore it
.b8cf						_STAAllocate:
.b8cf		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8d1		18		clc				clc  								; deliberate allows one more
.b8d2		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b8d5		8d 0d 04	sta $040d			sta 	stringTempPointer
.b8d8		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b8da		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8dc		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b8df		69 ff		adc #$ff			adc 	#$FF
.b8e1		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8e4		85 3d		sta $3d				sta 	zsTemp+1
.b8e6		95 60		sta $60,x			sta 	NSMantissa1,x
.b8e8		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b8ea		74 70		stz $70,x			stz 	NSMantissa3,x
.b8ec		a9 10		lda #$10			lda 	#NSTString
.b8ee		95 50		sta $50,x			sta 	NSStatus,x
.b8f0		a9 00		lda #$00			lda 	#0 							; clear the target string
.b8f2		92 3c		sta ($3c)			sta 	(zsTemp)
.b8f4		60		rts				rts
.b8f5						_STALength:
.b8f5		a9 09		lda #$09		lda	#9
.b8f7		4c 85 96	jmp $9685		jmp	ErrorHandler
.b8fa						StringTempWrite:
.b8fa		48		pha				pha
.b8fb		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b8fd		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b8ff		d0 02		bne $b903			bne 	_STWNoCarry
.b901		e6 3d		inc $3d				inc 	zsTemp+1
.b903						_STWNoCarry:
.b903		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b905		92 3c		sta ($3c)			sta 	(zsTemp)
.b907		68		pla				pla
.b908		60		rts				rts

;******  Return to file: _basic.asm

.b909						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 86 07	lda $0786			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 85 07	sty $0785			sty 	EXTColumn
.c02d	a02d	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 84 07	inc $0784			inc 	EXTRow  					; bump row
.c035	a035	9c 85 07	stz $0785			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 84 07	lda $0784			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 88 07	cmp $0788			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 85 07	dec $0785			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 85 07	stz $0785			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 84 07	dec $0784			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 84 07	lda $0784			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 84 07	dec $0784			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 87 07	sbc $0787			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 85 07	sty $0785			sty 	EXTColumn
.c08c	a08c	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 85 07	sty $0785			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 88 07	lda $0788			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 84 07	cmp $0784			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 84 07	inc $0784			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 85 07	lda $0785			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 85 07	sta $0785			sta 	EXTColumn
.c0c9	a0c9	cd 87 07	cmp $0787			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 85 07	dec $0785			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 86 07	and $0786			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 86 07	sta $0786			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 86 07	ora $0786			ora 	EXTTextColour
.c13c	a13c	8d 86 07	sta $0786			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 86 07	lda $0786			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 86 07	lda $0786			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 84 07	stz $0784			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 85 07	stz $0785			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 85 07	lda $0785			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 84 07	lda $0784			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 73 07	cmp $0773			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 73 07	sta $0773			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 1d bc	jsr $bc1d			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 69 82	jsr $8269			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 85 07	lda $0785			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 85 07	ldy $0785			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 85 07	ldy $0785			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 85 07	cpy $0785			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 87 07	lda $0787			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0784						EXTRow:
>0784								.fill 	1
.0785						EXTColumn:
>0785								.fill 	1
.0786						EXTTextColour:
>0786								.fill 	1
.0787						EXTScreenWidth:
>0787								.fill 	1
.0788						EXTScreenHeight:
>0788								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 86 07	sta $0786			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 87 07	sta $0787			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 88 07	sta $0788			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 84 07	lda $0784			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.0789						gxCurrentX:
>0789								.fill 	2
.078b						gxCurrentY:
>078b								.fill 	2
.078d						gxLastX:
>078d								.fill 	2
.078f						gxLastY:
>078f								.fill 	2
.0791						gxX0:
>0791								.fill 	2
.0793						gxY0:
>0793								.fill 	2
.0795						gxX1:
>0795								.fill 	2
.0797						gxY1:
>0797								.fill 	2
.0799						gxSpritesOn:
>0799								.fill 	1
.079a						gxBitmapsOn:
>079a								.fill 	1
.079b						gxBasePage:
>079b								.fill 	1
.079c						gxSpritePage:
>079c								.fill 	1
.079d						gxHeight:
>079d								.fill 	1
.079e						gxMode:
>079e								.fill 	1
.079f						gxColour:
>079f								.fill 	1
.07a0						gxEORValue:
>07a0								.fill 	1
.07a1						gxANDValue:
>07a1								.fill 	1
.07a2						gxOriginalLUTValue:
>07a2								.fill 	1
.07a3						gxOffset:
>07a3								.fill 	1
.07a4						GSCurrentSpriteID:
>07a4								.fill 	1
.07a5						GSCurrentSpriteAddr:
>07a5								.fill 	2
.07a7						gxSpriteOffsetBase:
>07a7								.fill 	2
.07a9						gxSpriteLow:
>07a9								.fill 	64
.07e9						gxSpriteHigh:
>07e9								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c800	a800	9d 8d 07	sta $078d,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8b 07	sta $078b			sta 	gxCurrentY
.c80a	a80a	9c 8c 07	stz $078c			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 89 07	sta $0789			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8a 07	sta $078a			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8a 07	lda $078a			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 89 07	lda $0789			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8b 07	lda $078b			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9d 07	cmp $079d			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c83c	a83c	9d 91 07	sta $0791,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2c 08	sta $082c			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2d 08	stz $082d			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2a 08	lda $082a			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2b 08	cmp $082b			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2b 08	lda $082b			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2a 08	lda $082a			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2b 08	ldx $082b			ldx	 	gxYCentre
.c898	a898	8d 2b 08	sta $082b			sta 	gxYCentre
.c89b	a89b	8e 2a 08	stx $082a			stx 	gxxCentre
.c89e	a89e	ad 2d 08	lda $082d			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2d 08	sta $082d			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2c 08	lda $082c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2d 08	lda $082d			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2b 08	lda $082b			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2a 08	lda $082a			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2c 08	lda $082c			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c8df	a8df	8d 2b 08	sta $082b			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 95 07	lda $0795,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 91 07	sta $0791,x			sta 	gxX0,x
.c8f6	a8f6	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 92 07	sta $0792,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2d 08	stz $082d			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2a 08	inc $082a			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2a 08	lda $082a			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2a 08	inc $082a			inc 	gxxCentre					; X++
.c918	a918	ce 2b 08	dec $082b			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2a 08	lda $082a			lda 	gxxCentre
.c91f	a91f	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2d 08	dec $082d			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 97 07	lda $0797			lda 	gxY1
.c958	a958	ed 93 07	sbc $0793			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 29 08	sta $0829			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2a 08	stz $082a			stz 	gxxCentre
.c96c	a96c	ad 29 08	lda $0829			lda 	gxRadius
.c96f	a96f	8d 2b 08	sta $082b			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 95 07	lda $0795,x			lda 	gxX1,x
.c987	a987	7d 91 07	adc $0791,x			adc 	gxX0,x
.c98a	a98a	9d 95 07	sta $0795,x			sta 	gxX1,x
.c98d	a98d	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c990	a990	7d 92 07	adc $0792,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 96 07	sta $0796,x			sta 	gxX1+1,x
.c997	a997	7e 95 07	ror $0795,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.0829						gxRadius:
>0829								.fill 	1
.082a						gxxCentre:
>082a								.fill 	1
.082b						gxYCentre:
>082b								.fill 	1
.082c						gxIsFillMode:
>082c								.fill 	1
.082d						gxYChanged:
>082d								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9d 07	lda $079d			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9b 07	adc $079b			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9b 07	cmp $079b			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 99 07	stz $0799			stz 	gxSpritesOn
.c9f4	a9f4	9c 9a 07	stz $079a			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 89 07	stz $0789,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9a 07	sta $079a			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9b 07	sta $079b			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9d 07	stx $079d			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 99 07	sta $0799			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9c 07	sta $079c			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a7 07	sta $07a7			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d a8 07	sta $07a8			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a6 07	stz $07a6			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e e9 07	stz $07e9,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a3 07	ldy $07a3			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a1 07	and $07a1			and 	gxANDValue
.cac1	aac1	4d a0 07	eor $07a0			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 30 08	lda $0830			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 91 07	lda $0791			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 95 07	eor $0795			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 92 07	lda $0792			lda 	gxX0+1
.cae7	aae7	4d 96 07	eor $0796			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 97 07	lda $0797			lda 	gxY1
.caee	aaee	4d 93 07	eor $0793			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 32 08	lda $0832			lda 	gxPosition
.caf6	aaf6	6d 33 08	adc $0833			adc 	gxAdjust
.caf9	aaf9	8d 32 08	sta $0832			sta 	gxPosition
.cafc	aafc	9c 35 08	stz $0835			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 34 08	cmp $0834			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 35 08	dec $0835			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 34 08	sbc $0834			sbc 	gxTotal
.cb0d	ab0d	8d 32 08	sta $0832			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 30 08	lda $0830			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 35 08	lda $0835			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 35 08	lda $0835			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 31 08	lda $0831			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 91 07	lda $0791			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 92 07	dec $0792			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 91 07	dec $0791			dec 	gxX0
.cb3e	ab3e	ce a3 07	dec $07a3			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a3 07	lda $07a3			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 91 07	inc $0791			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 92 07	inc $0792			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a3 07	inc $07a3			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 93 07	inc $0793			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 97 07	lda $0797			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 93 07	sbc $0793			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 2f 08	sta $082f			sta 	gxDiffY
.cb86	ab86	9c 31 08	stz $0831			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 95 07	lda $0795			lda 	gxX1
.cb8d	ab8d	ed 91 07	sbc $0791			sbc 	gxX0
.cb90	ab90	8d 2e 08	sta $082e			sta 	gxDiffX
.cb93	ab93	ad 96 07	lda $0796			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 92 07	sbc $0792			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 2e 08	ror $082e			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 2e 08	sbc $082e			sbc 	gxDiffX
.cba6	aba6	8d 2e 08	sta $082e			sta 	gxDiffX
.cba9	aba9	ce 31 08	dec $0831			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 30 08	stz $0830			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 2f 08	lda $082f			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 33 08	sta $0833			sta 	gxAdjust
.cbb5	abb5	ad 2e 08	lda $082e			lda 	gxDiffX
.cbb8	abb8	8d 34 08	sta $0834			sta 	gxTotal
.cbbb	abbb	ad 2f 08	lda $082f			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 2e 08	cmp $082e			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 30 08	dec $0830			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 2e 08	lda $082e			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 33 08	sta $0833			sta 	gxAdjust
.cbcc	abcc	ad 2f 08	lda $082f			lda 	gxDiffY
.cbcf	abcf	8d 34 08	sta $0834			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 34 08	lda $0834			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 32 08	sta $0832			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.082e						gxDiffX:
>082e								.fill 	1
.082f						gxDiffY:
>082f								.fill 	1
.0830						gxIsDiffYLarger:
>0830								.fill 	1
.0831						gxDXNegative:
>0831								.fill 	1
.0832						gxPosition:
>0832								.fill 	1
.0833						gxAdjust:
>0833								.fill 	1
.0834						gxTotal:
>0834								.fill 	1
.0835						gxAddSelect:
>0835								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e 9f 07	stx $079f			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d 9e 07	sta $079e			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a1 07	stz $07a1			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae 9f 07	ldx $079f			ldx 	gxColour
.cbec	abec	8e a0 07	stx $07a0			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a1 07	stx $07a1			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a0 07	stz $07a0			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a1 07	lda $07a1			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a1 07	sta $07a1			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a3 07	ldy $07a3			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a1 07	and $07a1			and 	gxANDValue
.cc16	ac16	4d a0 07	eor $07a0			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 93 07	lda $0793			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 97 07	cmp $0797			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 93 07	inc $0793			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 93 07	lda $0793			lda 	gxY0 						; reached last line
.cc48	ac48	cd 97 07	cmp $0797			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 95 07	lda $0795			lda		gxX1
.cc65	ac65	ed 91 07	sbc $0791			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 96 07	lda $0796			lda 	gxX1+1
.cc6d	ac6d	ed 92 07	sbc $0792			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a3 07	lda $07a3			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a1 07	and $07a1			and 	gxANDValue
.cc8a	ac8a	4d a0 07	eor $07a0			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a1 07	and $07a1			and 	gxANDValue
.cca8	aca8	4d a0 07	eor $07a0			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a1 07	and $07a1			and 	gxANDValue
.ccc0	acc0	4d a0 07	eor $07a0			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a3 07	sta $07a3			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 36 08	sta $0836			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 37 08	sta $0837			sta 	gxMask 						; and mask
.cce7	ace7	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 93 07	lda $0793			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 39 08	sty $0839			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 38 08	stx $0838			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3b 08	lda $083b			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3a 08	sta $083a			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3b 08	bit $083b			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 37 08	lda $0837			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3a 08	lda $083a			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 93 07	lda $0793			lda 	gxY0 						; off screen
.cd20	ad20	cd 9d 07	cmp $079d			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 36 08	cmp $0836			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 93 07	sta $0793			sta 	gxY0
.cd39	ad39	ae 3a 08	ldx $083a			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 36 08	lda $0836			lda 	gxSize
.cd40	ad40	6d 91 07	adc $0791			adc 	gxX0
.cd43	ad43	8d 91 07	sta $0791			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 92 07	inc $0792			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 38 08	jmp ($0838)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3a 08	lda $083a			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c 9e 07	bit $079e			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 37 08	lda $0837			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3b 08	lda $083b			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a1 07	and $07a1			and 	gxANDValue
.cd84	ad84	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 36 08	cmp $0836			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 93 07	inc $0793			inc 	gxY0
.cda1	ada1	60		rts				rts
.0836						gxSize:
>0836								.fill 	1
.0837						gxMask:
>0837								.fill 	1
.0838						gxAcquireVector:
>0838								.fill 	2
.083a						gxScale:
>083a								.fill 	1
.083b						gxUseMode:
>083b								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d 9e 07	eor $079e			eor 	gxMode
.cda7	ada7	8d 3b 08	sta $083b			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad 9f 07	lda $079f			lda 	gxColour
.cde0	ade0	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 99 07	lda $0799			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d 9e 07	eor $079e			eor 	gxMode
.cdf4	adf4	8d 3b 08	sta $083b			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3c 08	lda $083c			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9c 07	lda $079c			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3d 08	ldx $083d			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 3f 08	adc $083f			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 40 08	adc $0840			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3c 08	cpy $083c			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a4 07	sta $07a4			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a6 07	sta $07a6			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a5 07	sta $07a5			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 3f 08	lda $083f			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 40 08	lda $0840			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a7 07	adc $07a7			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad a8 07	lda $07a8			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 3e 08	ora $083e			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d e9 07	ora $07e9,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 99 07	lda $0799			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 91 07	adc $0791			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 92 07	lda $0792			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 93 07	adc $0793			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 92 07	lsr $0792			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 91 07	ror $0791			ror 	gxX0
.cf60	af60	4e 91 07	lsr $0791			lsr 	gxX0
.cf63	af63	4e 93 07	lsr $0793			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 93 07	lsr $0793			lsr 	gxY0
.cf69	af69	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 91 07	ora $0791			ora 	gxX0
.cf74	af74	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf77	af77	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 93 07	ora $0793			ora 	gxY0
.cf7f	af7f	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a2 07	sta $07a2			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a2 07	lda $07a2			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 93 07	lda $0793			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 91 07	lda $0791			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a3 07	sta $07a3			sta 	gxOffset
.cfd1	afd1	ad 92 07	lda $0792			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9b 07	adc $079b			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a3 07	lda $07a3			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a3 07	sta $07a3			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d a9 07	ora $07a9,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y
.d023	b023	7d e9 07	adc $07e9,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y
.d051	b051	fd a9 07	sbc $07a9,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9c 07	lda $079c			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 40 08	sta $0840			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3d 08	sta $083d			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3c 08	sta $083c			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 3e 08	sta $083e			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 3f 08	sta $083f			sta 	gxSpriteOffset
.d09e	b09e	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a1	b0a1	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a7	b0a7	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083c						gxSizePixels:
>083c								.fill 	1
.083d						gxSizeBits:
>083d								.fill 	1
.083e						gxSpriteLUT:
>083e								.fill 	1
.083f						gxSpriteOffset:
>083f								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 91 07	lda $0791			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 95 07	cmp $0795			cmp 	gxX1
.d0bb	b0bb	ad 92 07	lda $0792			lda 	gxX0+1
.d0be	b0be	ed 96 07	sbc $0796			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 93 07	lda $0793			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 97 07	cmp $0797			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 91 07	lda $0791,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 91 07	lda $0791,y			lda 	gxX0,y
.d0eb	b0eb	9d 91 07	sta $0791,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 91 07	sta $0791,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d17a	b17a	55 4e 54 28
>d17e	b17e	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d186	b186	54 24 28
>d189	b189	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d190	b190	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d197	b197	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d19e	b19e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $98 LEFT$(
>d1a6	b1a6	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $99 LEN(
>d1ac	b1ac	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9a MAX(
>d1b2	b1b2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9b MID$(
>d1b9	b1b9	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9c MIN(
>d1bf	b1bf	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9d NOT(
>d1c5	b1c5	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9e PEEK(
>d1cc	b1cc	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9f PEEKD(
>d1d4	b1d4	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a0 PEEKL(
>d1dc	b1dc	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a1 PEEKW(
>d1e4	b1e4	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a2 PLAYING(
>d1ec	b1ec	47 28
>d1ee	b1ee	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a3 RANDOM(
>d1f6	b1f6	28
>d1f7	b1f7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a4 RIGHT$(
>d1ff	b1ff	28
>d200	b200	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a5 RND(
>d206	b206	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a6 SGN(
>d20c	b20c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a7 SPC(
>d212	b212	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a8 STR$(
>d219	b219	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a9 TIMER(
>d221	b221	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $aa TRUE
>d227	b227	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ab VAL(
>d22d	b22d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ac FOR
>d232	b232	02 8f 49 46				.text	2,$8f,"IF"             ; $ad IF
>d236	b236	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ae PROC
>d23c	b23c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $af REPEAT
>d244	b244	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b0 WHILE
>d24b	b24b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b1 ENDIF
>d252	b252	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b2 ENDPROC
>d25a	b25a	43
>d25b	b25b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b3 NEXT
>d261	b261	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b4 THEN
>d267	b267	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b5 UNTIL
>d26e	b26e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b6 WEND
>d274	b274	02 95 41 54				.text	2,$95,"AT"             ; $b7 AT
>d278	b278	02 9b 42 59				.text	2,$9b,"BY"             ; $b8 BY
>d27c	b27c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b9 CALL
>d282	b282	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ba CIRCLE
>d28a	b28a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bb CLEAR
>d291	b291	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bc COLOR
>d298	b298	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bd COLOUR
>d2a0	b2a0	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $be DATA
>d2a6	b2a6	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bf DIM
>d2ab	b2ab	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c0 DOWNTO
>d2b3	b2b3	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c1 ELSE
>d2b9	b2b9	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c2 FROM
>d2bf	b2bf	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c3 GFX
>d2c4	b2c4	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c4 HERE
>d2ca	b2ca	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c5 IMAGE
>d2d1	b2d1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c6 LET
>d2d6	b2d6	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c7 LINE
>d2dc	b2dc	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c8 LOCAL
>d2e3	b2e3	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c9 MEMCOPY
>d2eb	b2eb	59
>d2ec	b2ec	03 db 4f 46 46				.text	3,$db,"OFF"            ; $ca OFF
>d2f1	b2f1	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cb ON
>d2f5	b2f5	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cc OUTLINE
>d2fd	b2fd	45
>d2fe	b2fe	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cd PALETTE
>d306	b306	45
>d307	b307	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ce PLOT
>d30d	b30d	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cf POKE
>d313	b313	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d0 POKED
>d31a	b31a	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d1 POKEL
>d321	b321	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d2 POKEW
>d328	b328	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d3 READ
>d32e	b32e	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d4 RECT
>d334	b334	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d5 REM
>d339	b339	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d6 SOLID
>d340	b340	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d7 SOUND
>d347	b347	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d8 SPRITE
>d34f	b34f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d9 TEXT
>d355	b355	02 a3 54 4f				.text	2,$a3,"TO"             ; $da TO
>d359	b359	ff					.text	$FF
.d35a	b35a					KeywordSet1:
>d35a	b35a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d35c	b35c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d35e	b35e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d360	b360	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d368	b368	4c 45
>d36a	b36a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d372	b372	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d37a	b37a	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d381	b381	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d388	b388	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d38d	b38d	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d395	b395	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d39a	b39a	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d39f	b39f	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d3a6	b3a6	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d3ab	b3ab	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d3b3	b3b3	45
>d3b4	b3b4	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d3b8	b3b8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d3bf	b3bf	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3c5	b3c5	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3cc	b3cc	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3d3	b3d3	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3d9	b3d9	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3df	b3df	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $96 NEW
>d3e4	b3e4	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $97 PING
>d3ea	b3ea	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $98 PRINT
>d3f1	b3f1	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $99 RESTORE
>d3f9	b3f9	45
>d3fa	b3fa	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9a RETURN
>d402	b402	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9b RUN
>d407	b407	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9c SAVE
>d40d	b40d	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9d SETDATE
>d415	b415	45
>d416	b416	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9e SETTIME
>d41e	b41e	45
>d41f	b41f	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9f SHOOT
>d426	b426	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a0 SPRITES
>d42e	b42e	53
>d42f	b42f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a1 STOP
>d435	b435	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a2 VERIFY
>d43d	b43d	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a3 XGO
>d442	b442	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a4 XLOAD
>d449	b449	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a5 ZAP
>d44e	b44e	ff					.text	$FF
.d44f	b44f					KeywordSet2:
>d44f	b44f	00 65					.text	0,$65,""               ; $80 !0:EOF
>d451	b451	00 58					.text	0,$58,""               ; $81 !1:SH1
>d453	b453	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d455	b455	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d45a	b45a	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d45f	b45f	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d464	b464	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d469	b469	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d46e	b46e	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d473	b473	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d478	b478	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d47d	b47d	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d482	b482	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d487	b487	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d48c	b48c	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d491	b491	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d496	b496	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d49b	b49b	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d4a0	b4a0	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d4a5	b4a5	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d4aa	b4aa	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d4af	b4af	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4b4	b4b4	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4b9	b4b9	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4be	b4be	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4c3	b4c3	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4c8	b4c8	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4cd	b4cd	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4d2	b4d2	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4d7	b4d7	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4dc	b4dc	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4e1	b4e1	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4e6	b4e6	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4eb	b4eb	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4f0	b4f0	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4f5	b4f5	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4fa	b4fa	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4ff	b4ff	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d504	b504	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d509	b509	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d50e	b50e	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d513	b513	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d518	b518	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d51d	b51d	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d522	b522	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d527	b527	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d52c	b52c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d531	b531	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d536	b536	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d53b	b53b	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d540	b540	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d545	b545	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d54a	b54a	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d54f	b54f	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d554	b554	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d559	b559	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d55e	b55e	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d563	b563	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d568	b568	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d56d	b56d	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d572	b572	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d577	b577	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d57c	b57c	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d581	b581	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d586	b586	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d58b	b58b	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d590	b590	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d595	b595	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d59a	b59a	ff					.text	$FF
.d59b	b59b					Export_TKListConvertLine:
.d59b	b59b	48		pha				pha 								; save indent on the stack
.d59c	b59c	9c 19 04	stz $0419			stz 	tbOffset
.d59f	b59f	9c 29 04	stz $0429			stz 	tokenBuffer
.d5a2	b5a2	9c 25 04	stz $0425			stz 	currentListColour
.d5a5	b5a5	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d5a7	b5a7	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d5aa	b5aa	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d5ac	b5ac	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ae	b5ae	aa		tax				tax
.d5af	b5af	88		dey				dey
.d5b0	b5b0	b1 30		lda ($30),y			lda 	(codePtr),y
.d5b2	b5b2	20 95 b7	jsr $b795			jsr 	LCLWriteNumberXA
.d5b5	b5b5	68		pla				pla 								; adjustment to indent
.d5b6	b5b6	48		pha				pha 								; save on stack
.d5b7	b5b7	10 0c		bpl $b5c5			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5b9	b5b9	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5ba	b5ba	6d 22 04	adc $0422			adc 	listIndent
.d5bd	b5bd	8d 22 04	sta $0422			sta 	listIndent
.d5c0	b5c0	10 03		bpl $b5c5			bpl 	_LCNoAdjust
.d5c2	b5c2	9c 22 04	stz $0422			stz 	listIndent
.d5c5	b5c5					_LCNoAdjust:
.d5c5	b5c5	18		clc				clc		 							; work out actual indent.
.d5c6	b5c6	ad 22 04	lda $0422			lda 	listIndent
.d5c9	b5c9	0a		asl a				asl 	a
.d5ca	b5ca	69 07		adc #$07			adc 	#7
.d5cc	b5cc	85 36		sta $36				sta 	zTemp0
.d5ce	b5ce					_LCPadOut:
.d5ce	b5ce	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5d0	b5d0	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d5d3	b5d3	ad 19 04	lda $0419			lda 	tbOffset
.d5d6	b5d6	c5 36		cmp $36				cmp 	zTemp0
.d5d8	b5d8	d0 f4		bne $b5ce			bne 	_LCPadOut
.d5da	b5da	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5dc	b5dc					_LCMainLoop:
.d5dc	b5dc	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5de	b5de	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d5e1	b5e1	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e3	b5e3	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5e5	b5e5	f0 17		beq $b5fe			beq 	_LCExit
.d5e7	b5e7	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5e9	b5e9	90 1e		bcc $b609			bcc 	_LCDoubles
.d5eb	b5eb	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5ed	b5ed	90 2a		bcc $b619			bcc 	_LCShiftPunc
.d5ef	b5ef	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5f1	b5f1	90 35		bcc $b628			bcc 	_LCPunctuation
.d5f3	b5f3	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5f5	b5f5	90 51		bcc $b648			bcc 	_LCIdentifiers
.d5f7	b5f7	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5f9	b5f9	90 73		bcc $b66e			bcc 	_LCTokens
.d5fb	b5fb	4c ce b6	jmp $b6ce			jmp 	_LCData 					; 254-5 are data objects
.d5fe	b5fe					_LCExit:
.d5fe	b5fe	68		pla				pla 								; get old indent adjust
.d5ff	b5ff	30 07		bmi $b608			bmi 	_LCExit2
.d601	b601	18		clc				clc 								; add to indent if +ve
.d602	b602	6d 22 04	adc $0422			adc 	listIndent
.d605	b605	8d 22 04	sta $0422			sta 	listIndent
.d608	b608					_LCExit2:
.d608	b608	60		rts				rts
.d609	b609					_LCDoubles:
.d609	b609	48		pha				pha
.d60a	b60a	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d60b	b60b	29 02		and #$02			and 	#2
.d60d	b60d	09 3c		ora #$3c			ora 	#60 						; make < >
.d60f	b60f	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d612	b612	68		pla				pla 								; restore, do lower bit
.d613	b613	29 03		and #$03			and 	#3
.d615	b615	09 3c		ora #$3c			ora 	#60
.d617	b617	80 0f		bra $b628			bra		_LCPunctuation 				; print, increment, loop
.d619	b619					_LCShiftPunc:
.d619	b619	aa		tax				tax 								; save in X
.d61a	b61a	29 07		and #$07			and 	#7 							; lower 3 bits
.d61c	b61c	f0 02		beq $b620			beq 	_LCNoAdd
.d61e	b61e	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d620	b620					_LCNoAdd:
.d620	b620	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d622	b622	90 02		bcc $b626			bcc 	_LCNoAdd2
.d624	b624	09 20		ora #$20			ora 	#32 						; adds $20
.d626	b626					_LCNoAdd2:
.d626	b626	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d628	b628					_LCPunctuation:
.d628	b628	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d62a	b62a	d0 03		bne $b62f			bne 	_LCPContinue
.d62c	b62c	20 43 b7	jsr $b743			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d62f	b62f					_LCPContinue:
.d62f	b62f	c9 2e		cmp #$2e			cmp 	#'.'
.d631	b631	f0 08		beq $b63b			beq 	_LCPIsConstant
.d633	b633	c9 30		cmp #$30			cmp 	#'0'
.d635	b635	90 0b		bcc $b642			bcc 	_LCPNotConstant
.d637	b637	c9 3a		cmp #$3a			cmp 	#'9'+1
.d639	b639	b0 07		bcs $b642			bcs 	_LCPNotConstant
.d63b	b63b					_LCPIsConstant:
.d63b	b63b	48		pha				pha
.d63c	b63c	a9 87		lda #$87			lda 	#CLIConstant+$80
.d63e	b63e	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d641	b641	68		pla				pla
.d642	b642					_LCPNotConstant:
.d642	b642	c8		iny				iny 								; consume character
.d643	b643	20 2d b7	jsr $b72d			jsr 	LCLWrite 					; write it out.
.d646	b646	80 94		bra $b5dc			bra 	_LCMainLoop 				; go round again.
.d648	b648					_LCIdentifiers:
.d648	b648	18		clc				clc 								; convert to physical address
.d649	b649	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d64b	b64b	85 37		sta $37				sta 	zTemp0+1
.d64d	b64d	c8		iny				iny
.d64e	b64e	b1 30		lda ($30),y			lda 	(codePtr),y
.d650	b650	85 36		sta $36				sta 	zTemp0
.d652	b652	c8		iny				iny
.d653	b653	5a		phy				phy 								; save position
.d654	b654	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d656	b656	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d659	b659	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d65b	b65b					_LCOutIdentifier:
.d65b	b65b	c8		iny				iny
.d65c	b65c	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d65e	b65e	29 7f		and #$7f			and 	#$7F
.d660	b660	20 7f b7	jsr $b77f			jsr 	LCLLowerCase
.d663	b663	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d666	b666	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d668	b668	10 f1		bpl $b65b			bpl 	_LCOutIdentifier
.d66a	b66a	7a		ply				ply 								; restore position
.d66b	b66b	4c dc b5	jmp $b5dc			jmp 	_LCMainLoop
.d66e	b66e					_LCTokens:
.d66e	b66e	aa		tax				tax 								; token in X
.d66f	b66f	a9 4f		lda #$4f			lda 	#((KeywordSet2) & $FF)
.d671	b671	85 36		sta $36				sta 	0+zTemp0
.d673	b673	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d675	b675	85 37		sta $37				sta 	1+zTemp0
.d677	b677	e0 82		cpx #$82			cpx 	#$82
.d679	b679	f0 16		beq $b691			beq 	_LCUseShift
.d67b	b67b	a9 5a		lda #$5a			lda 	#((KeywordSet1) & $FF)
.d67d	b67d	85 36		sta $36				sta 	0+zTemp0
.d67f	b67f	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d681	b681	85 37		sta $37				sta 	1+zTemp0
.d683	b683	e0 81		cpx #$81			cpx 	#$81
.d685	b685	f0 0a		beq $b691			beq 	_LCUseShift
.d687	b687	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d689	b689	85 36		sta $36				sta 	0+zTemp0
.d68b	b68b	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d68d	b68d	85 37		sta $37				sta 	1+zTemp0
.d68f	b68f	80 01		bra $b692			bra 	_LCNoShift
.d691	b691					_LCUseShift:
.d691	b691	c8		iny				iny
.d692	b692					_LCNoShift:
.d692	b692	20 57 b7	jsr $b757			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d695	b695	b1 30		lda ($30),y			lda 	(codePtr),y
.d697	b697	aa		tax				tax 								; into X
.d698	b698					_LCFindText:
.d698	b698	ca		dex				dex
.d699	b699	10 0e		bpl $b6a9			bpl 	_LCFoundText 				; found text.
.d69b	b69b	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d69d	b69d	1a		inc a				inc 	a 							; one extra for size
.d69e	b69e	38		sec				sec 								; one extra for checksum
.d69f	b69f	65 36		adc $36				adc 	zTemp0 						; go to next token
.d6a1	b6a1	85 36		sta $36				sta 	zTemp0
.d6a3	b6a3	90 f3		bcc $b698			bcc 	_LCFindText
.d6a5	b6a5	e6 37		inc $37				inc 	zTemp0+1
.d6a7	b6a7	80 ef		bra $b698			bra 	_LCFindText
.d6a9	b6a9					_LCFoundText:
.d6a9	b6a9	5a		phy				phy 								; save List position
.d6aa	b6aa	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d6ac	b6ac	aa		tax				tax
.d6ad	b6ad	a9 86		lda #$86			lda 	#CLIToken+$80
.d6af	b6af	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d6b2	b6b2	a0 02		ldy #$02			ldy 	#2
.d6b4	b6b4					_LCCopyToken:
.d6b4	b6b4	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6b6	b6b6	20 7f b7	jsr $b77f			jsr 	LCLLowerCase
.d6b9	b6b9	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6bc	b6bc	c8		iny				iny
.d6bd	b6bd	ca		dex				dex
.d6be	b6be	d0 f4		bne $b6b4			bne 	_LCCopyToken
.d6c0	b6c0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6c2	b6c2	f0 05		beq $b6c9			beq 	_LCNoSpace
.d6c4	b6c4	a9 20		lda #$20			lda 	#' '
.d6c6	b6c6	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6c9	b6c9					_LCNoSpace:
.d6c9	b6c9	7a		ply				ply 								; restore position.
.d6ca	b6ca	c8		iny				iny 								; consume token
.d6cb	b6cb	4c dc b5	jmp $b5dc			jmp 	_LCMainLoop 				; and go around again.
.d6ce	b6ce					_LCData:
.d6ce	b6ce	48		pha				pha 								; save type $FE/$FF
.d6cf	b6cf	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6d1	b6d1	c9 fe		cmp #$fe			cmp 	#$FE
.d6d3	b6d3	f0 22		beq $b6f7			beq 	_LCHaveOpener
.d6d5	b6d5	a2 22		ldx #$22			ldx 	#'"'
.d6d7	b6d7	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6d9	b6d9	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d6dc	b6dc	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6de	b6de	d0 17		bne $b6f7			bne 	_LCHaveOpener
.d6e0	b6e0	88		dey				dey 								; what precedes it ?
.d6e1	b6e1	b1 30		lda ($30),y			lda 	(codePtr),y
.d6e3	b6e3	c8		iny				iny
.d6e4	b6e4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6e6	b6e6	d0 0f		bne $b6f7			bne 	_LCHaveOpener
.d6e8	b6e8	a9 09		lda #$09			lda 	#9 							; tab
.d6ea	b6ea	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6ed	b6ed	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6ef	b6ef	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6f2	b6f2	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6f4	b6f4	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d6f7	b6f7					_LCHaveOpener:
.d6f7	b6f7	8a		txa				txa 								; output prefix (# or ")
.d6f8	b6f8	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6fb	b6fb	c8		iny				iny 								; get count
.d6fc	b6fc	b1 30		lda ($30),y			lda 	(codePtr),y
.d6fe	b6fe	aa		tax				tax
.d6ff	b6ff	c8		iny				iny 								; point at first character
.d700	b700					_LCOutData:
.d700	b700	b1 30		lda ($30),y			lda 	(codePtr),y
.d702	b702	c9 00		cmp #$00			cmp 	#0
.d704	b704	f0 03		beq $b709			beq 	_LCNoPrint
.d706	b706	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d709	b709					_LCNoPrint:
.d709	b709	c8		iny				iny
.d70a	b70a	ca		dex				dex
.d70b	b70b	d0 f3		bne $b700			bne 	_LCOutData
.d70d	b70d	68		pla				pla 								; closing " required ?
.d70e	b70e	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d710	b710	d0 0f		bne $b721			bne 	_LCNoQuote
.d712	b712	a9 22		lda #$22			lda 	#'"'
.d714	b714	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d717	b717	ad 86 07	lda $0786			lda 	EXTTextColour
.d71a	b71a	29 0f		and #$0f			and 	#$0F
.d71c	b71c	09 90		ora #$90			ora 	#$90
.d71e	b71e	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d721	b721					_LCNoQuote:
.d721	b721	4c dc b5	jmp $b5dc			jmp 	_LCMainLoop
.d724	b724					LCLWriteColour:
.d724	b724	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d727	b727	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d72a	b72a	d0 01		bne $b72d			bne 	LCLWrite 					; if different, output it
.d72c	b72c	60		rts				rts
.d72d	b72d					LCLWrite:
.d72d	b72d	da		phx				phx
.d72e	b72e	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d731	b731	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d734	b734	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d737	b737	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d73a	b73a	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d73c	b73c	30 03		bmi $b741			bmi 	_LCLNoColour
.d73e	b73e	8d 23 04	sta $0423			sta 	lcLastCharacter
.d741	b741					_LCLNoColour:
.d741	b741	fa		plx				plx
.d742	b742	60		rts				rts
.d743	b743					LCLDeleteLastSpace:
.d743	b743	48		pha				pha
.d744	b744	da		phx				phx
.d745	b745	ae 19 04	ldx $0419			ldx 	tbOffset
.d748	b748	f0 0a		beq $b754			beq 	_LCDLSExit
.d74a	b74a	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d74d	b74d	c9 20		cmp #$20			cmp 	#' '
.d74f	b74f	d0 03		bne $b754			bne 	_LCDLSExit
.d751	b751	ce 19 04	dec $0419			dec 	tbOffset
.d754	b754					_LCDLSExit:
.d754	b754	fa		plx				plx
.d755	b755	68		pla				pla
.d756	b756	60		rts				rts
.d757	b757					LCLCheckSpaceRequired:
.d757	b757	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d75a	b75a	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d75c	b75c	f0 1b		beq $b779			beq 	_LCCSRSpace
.d75e	b75e	c9 29		cmp #$29			cmp 	#')'
.d760	b760	f0 17		beq $b779			beq 	_LCCSRSpace
.d762	b762	c9 23		cmp #$23			cmp 	#'#'
.d764	b764	f0 13		beq $b779			beq 	_LCCSRSpace
.d766	b766	20 7f b7	jsr $b77f			jsr 	LCLLowerCase 				; saves a little effort
.d769	b769	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d76b	b76b	90 11		bcc $b77e			bcc 	_LCCSRExit
.d76d	b76d	c9 3a		cmp #$3a			cmp 	#"9"+1
.d76f	b76f	90 08		bcc $b779			bcc 	_LCCSRSpace
.d771	b771	c9 61		cmp #$61			cmp 	#"a"
.d773	b773	90 09		bcc $b77e			bcc 	_LCCSRExit
.d775	b775	c9 7b		cmp #$7b			cmp 	#"z"+1
.d777	b777	b0 05		bcs $b77e			bcs 	_LCCSRExit
.d779	b779					_LCCSRSpace:
.d779	b779	a9 20		lda #$20			lda 	#' '
.d77b	b77b	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d77e	b77e					_LCCSRExit:
.d77e	b77e	60		rts				rts
.d77f	b77f					LCLLowerCase:
.d77f	b77f	c9 41		cmp #$41			cmp 	#"A"
.d781	b781	90 06		bcc $b789			bcc 	_LCLLCOut
.d783	b783	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d785	b785	b0 02		bcs $b789			bcs 	_LCLLCOut
.d787	b787	69 20		adc #$20			adc 	#$20
.d789	b789					_LCLLCOut:
.d789	b789	60		rts				rts
.d78a	b78a					LCLUpperCase:
.d78a	b78a	c9 61		cmp #$61			cmp 	#"a"
.d78c	b78c	90 06		bcc $b794			bcc 	_LCLUCOut
.d78e	b78e	c9 7b		cmp #$7b			cmp 	#"z"+1
.d790	b790	b0 02		bcs $b794			bcs 	_LCLUCOut
.d792	b792	e9 1f		sbc #$1f			sbc 	#$1F
.d794	b794					_LCLUCOut:
.d794	b794	60		rts				rts
.d795	b795					LCLWriteNumberXA:
.d795	b795	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d797	b797					_LCLWNLoop1:
.d797	b797	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d799	b799					_LCLWNLoop2:
.d799	b799	48		pha				pha 								; save initial LSB
.d79a	b79a	38		sec				sec
.d79b	b79b	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d79d	b79d	f9 ce b7	sbc $b7ce,y			sbc 	_LCLWNTable,y
.d7a0	b7a0	48		pha				pha
.d7a1	b7a1	8a		txa				txa
.d7a2	b7a2	f9 cf b7	sbc $b7cf,y			sbc 	_LCLWNTable+1,y
.d7a5	b7a5	90 07		bcc $b7ae			bcc 	_LCLWNUnderflow
.d7a7	b7a7	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d7a9	b7a9	aa		tax				tax 								; update X
.d7aa	b7aa	68		pla				pla 								; restore A
.d7ab	b7ab	7a		ply				ply 								; throw original
.d7ac	b7ac	80 eb		bra $b799			bra 	_LCLWNLoop2 				; try again.
.d7ae	b7ae					_LCLWNUnderflow:
.d7ae	b7ae	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d7b0	b7b0	d0 06		bne $b7b8			bne 	_LCLWNOut
.d7b2	b7b2	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7b5	b7b5	3a		dec a				dec 	a
.d7b6	b7b6	f0 04		beq $b7bc			beq 	_LCLWNNext
.d7b8	b7b8					_LCLWNOut:
.d7b8	b7b8	98		tya				tya
.d7b9	b7b9	20 c8 b7	jsr $b7c8			jsr 	_LCLWNOutDigit
.d7bc	b7bc					_LCLWNNext:
.d7bc	b7bc	7a		ply				ply 							 	; restore original value.
.d7bd	b7bd	68		pla				pla
.d7be	b7be	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7c0	b7c0	c8		iny				iny
.d7c1	b7c1	c8		iny				iny
.d7c2	b7c2	84 37		sty $37				sty 	zTemp0+1
.d7c4	b7c4	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7c6	b7c6	d0 cf		bne $b797			bne 	_LCLWNLoop1
.d7c8	b7c8					_LCLWNOutDigit:
.d7c8	b7c8	09 30		ora #$30			ora 	#'0'
.d7ca	b7ca	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d7cd	b7cd	60		rts				rts
.d7ce	b7ce					_LCLWNTable:
>d7ce	b7ce	10 27						.word 	10000
>d7d0	b7d0	e8 03						.word 	1000
>d7d2	b7d2	64 00						.word 	100
>d7d4	b7d4	0a 00						.word 	10
.d7d6	b7d6					TOKSearchTable:
.d7d6	b7d6	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7d8	b7d8	85 36		sta $36				sta 	zTemp0
.d7da	b7da	a0 00		ldy #$00			ldy 	#0
.d7dc	b7dc	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7de	b7de	85 38		sta $38				sta 	zTemp1
.d7e0	b7e0					_TSTLoop:
.d7e0	b7e0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7e2	b7e2	30 49		bmi $b82d			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7e4	b7e4	f0 2e		beq $b814			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7e6	b7e6	c8		iny				iny 								; get the hash
.d7e7	b7e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7e9	b7e9	88		dey				dey
.d7ea	b7ea	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7ed	b7ed	d0 25		bne $b814			bne 	_TSTNext
.d7ef	b7ef	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7f2	b7f2	38		sec				sec
.d7f3	b7f3	ed 00 04	sbc $0400			sbc 	identStart
.d7f6	b7f6	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7f8	b7f8	d0 1a		bne $b814			bne 	_TSTNext
.d7fa	b7fa	5a		phy				phy 								; save Y , we might fail to match.
.d7fb	b7fb	c8		iny				iny 								; point to text
.d7fc	b7fc	c8		iny				iny
.d7fd	b7fd	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d800	b800					_TSTCompareName:
.d800	b800	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d803	b803	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d805	b805	d0 0c		bne $b813			bne 	_TSTNextPullY 				; fail, pullY and do next
.d807	b807	e8		inx				inx
.d808	b808	c8		iny				iny
.d809	b809	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d80c	b80c	d0 f2		bne $b800			bne 	_TSTCompareName
.d80e	b80e	7a		ply				ply 								; throw Y
.d80f	b80f	a5 38		lda $38				lda 	zTemp1 						; get token #
.d811	b811	38		sec				sec 								; return with CS = passed.
.d812	b812	60		rts				rts
.d813	b813					_TSTNextPullY:
.d813	b813	7a		ply				ply 								; restore current, fall through.
.d814	b814					_TSTNext:
.d814	b814	e6 38		inc $38				inc 	zTemp1 						; token counter
.d816	b816	98		tya				tya
.d817	b817	18		clc				clc
.d818	b818	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d81a	b81a	1a		inc a				inc 	a 							; +1
.d81b	b81b	1a		inc a				inc 	a 							; +2
.d81c	b81c	a8		tay				tay
.d81d	b81d	10 c1		bpl $b7e0			bpl 	_TSTLoop 					; if Y < $80 loop back
.d81f	b81f	98		tya				tya 								; add Y to zTemp0 and reset Y
.d820	b820	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d822	b822	18		clc				clc  								; but have tables > 255 bytes
.d823	b823	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d825	b825	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d827	b827	90 b7		bcc $b7e0			bcc 	_TSTLoop
.d829	b829	e6 37		inc $37				inc 	zTemp0+1
.d82b	b82b	80 b3		bra $b7e0			bra 	_TSTLoop
.d82d	b82d					_TSTFail:
.d82d	b82d	18		clc				clc
.d82e	b82e	60		rts				rts
.d82f	b82f					Export_TKTokeniseLine:
.d82f	b82f	20 fc b9	jsr $b9fc			jsr 	LCLFixLineBufferCase 		; fix line case
.d832	b832	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d834	b834	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d837	b837	9c 27 04	stz $0427			stz 	tokenLineNumber
.d83a	b83a	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d83d	b83d	a2 ff		ldx #$ff			ldx 	#$FF
.d83f	b83f					_TKFindFirst:
.d83f	b83f	e8		inx				inx
.d840	b840	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d843	b843	f0 62		beq $b8a7			beq 	_TKExit
.d845	b845	c9 20		cmp #$20			cmp 	#' '
.d847	b847	90 f6		bcc $b83f			bcc 	_TKFindFirst
.d849	b849	c9 30		cmp #$30			cmp 	#'0'
.d84b	b84b	90 07		bcc $b854			bcc 	_TKNoLineNumber
.d84d	b84d	c9 3a		cmp #$3a			cmp 	#'9'+1
.d84f	b84f	b0 03		bcs $b854			bcs 	_TKNoLineNumber
.d851	b851	20 26 ba	jsr $ba26			jsr 	TOKExtractLineNumber
.d854	b854					_TKNoLineNumber:
.d854	b854					_TKTokeniseLoop:
.d854	b854	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d857	b857	f0 4e		beq $b8a7			beq 	_TKExit
.d859	b859	e8		inx				inx
.d85a	b85a	c9 20		cmp #$20			cmp 	#' '
.d85c	b85c	f0 f6		beq $b854			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d85e	b85e	ca		dex				dex 								; undo last get, A contains character, X is position.
.d85f	b85f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d861	b861	f0 68		beq $b8cb			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d863	b863	c9 41		cmp #$41			cmp 	#'A'
.d865	b865	90 04		bcc $b86b			bcc 	_TKTokenisePunctuation
.d867	b867	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d869	b869	90 60		bcc $b8cb			bcc 	_TKTokeniseIdentifier
.d86b	b86b					_TKTokenisePunctuation:
.d86b	b86b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d86d	b86d	f0 2e		beq $b89d			beq 	_TKString
.d86f	b86f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d871	b871	f0 2f		beq $b8a2			beq 	_TKHexConstant
.d873	b873	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d875	b875	f0 36		beq $b8ad			beq 	_TKCheckDouble
.d877	b877	c9 3e		cmp #$3e			cmp 	#'>'
.d879	b879	f0 32		beq $b8ad			beq 	_TKCheckDouble
.d87b	b87b					_TKStandardPunctuation:
.d87b	b87b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d87e	b87e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d880	b880	90 0e		bcc $b890			bcc 	_TKNoShift
.d882	b882	48		pha				pha 								; save. we are about to convert this punctuation token from
.d883	b883	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d885	b885	85 36		sta $36				sta 	zTemp0
.d887	b887	68		pla				pla
.d888	b888	29 20		and #$20			and 	#32 						; bit 5
.d88a	b88a	4a		lsr a				lsr 	a 							; shift into bit 3
.d88b	b88b	4a		lsr a				lsr 	a
.d88c	b88c	05 36		ora $36				ora 	zTemp0
.d88e	b88e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d890	b890					_TKNoShift:
.d890	b890	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte 				; write the punctuation character
.d893	b893	e8		inx				inx 								; consume the character
.d894	b894	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d896	b896	d0 bc		bne $b854			bne 	_TKTokeniseLoop 			; and loop round again.
.d898	b898	20 5e b9	jsr $b95e			jsr 	TOKCheckComment 			; comment checl
.d89b	b89b	80 b7		bra $b854			bra 	_TKTokeniseLoop
.d89d	b89d					_TKString:
.d89d	b89d	20 8b b9	jsr $b98b			jsr 	TOKTokenString
.d8a0	b8a0	80 b2		bra $b854			bra 	_TKTokeniseLoop
.d8a2	b8a2					_TKHexConstant:
.d8a2	b8a2	20 c6 b9	jsr $b9c6			jsr 	TOKHexConstant
.d8a5	b8a5	80 ad		bra $b854			bra 	_TKTokeniseLoop
.d8a7	b8a7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d8a9	b8a9	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d8ac	b8ac	60		rts				rts
.d8ad	b8ad					_TKCheckDouble:
.d8ad	b8ad	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d8b0	b8b0	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8b2	b8b2	90 c7		bcc $b87b			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8b4	b8b4	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8b6	b8b6	b0 c3		bcs $b87b			bcs 	_TKStandardPunctuation
.d8b8	b8b8	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8bb	b8bb	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8bd	b8bd	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8be	b8be	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8c1	b8c1	38		sec				sec
.d8c2	b8c2	e9 3c		sbc #$3c			sbc 	#'<'
.d8c4	b8c4	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8c7	b8c7	e8		inx				inx 								; consume both
.d8c8	b8c8	e8		inx				inx
.d8c9	b8c9	80 89		bra $b854			bra 	_TKTokeniseLoop
.d8cb	b8cb					_TKTokeniseIdentifier:
.d8cb	b8cb	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8ce	b8ce	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8d1	b8d1					_TKCheckLoop:
.d8d1	b8d1	e8		inx				inx 								; look at next, we know first is identifier already.
.d8d2	b8d2	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8d5	b8d5	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8d7	b8d7	f0 f8		beq $b8d1			beq 	_TKCheckLoop
.d8d9	b8d9	c9 30		cmp #$30			cmp	 	#"0"
.d8db	b8db	90 0c		bcc $b8e9			bcc 	_TKEndIdentifier
.d8dd	b8dd	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8df	b8df	90 f0		bcc $b8d1			bcc 	_TKCheckLoop
.d8e1	b8e1	c9 41		cmp #$41			cmp	 	#"A"
.d8e3	b8e3	90 04		bcc $b8e9			bcc 	_TKEndIdentifier
.d8e5	b8e5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8e7	b8e7	90 e8		bcc $b8d1			bcc 	_TKCheckLoop
.d8e9	b8e9					_TKEndIdentifier:
.d8e9	b8e9	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8ec	b8ec	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8ee	b8ee	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8f0	b8f0	f0 06		beq $b8f8			beq 	_TKHasTypeCharacter
.d8f2	b8f2	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8f4	b8f4	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8f6	b8f6	d0 07		bne $b8ff			bne 	_TKNoTypeCharacter
.d8f8	b8f8					_TKHasTypeCharacter:
.d8f8	b8f8	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8fb	b8fb	e8		inx				inx 								; consume the type character
.d8fc	b8fc	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8ff	b8ff					_TKNoTypeCharacter:
.d8ff	b8ff	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d901	b901	d0 09		bne $b90c			bne 	_TKNoArray
.d903	b903	e8		inx				inx 								; skip the (
.d904	b904	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d907	b907	09 04		ora #$04			ora 	#$04
.d909	b909	8d 04 04	sta $0404			sta 	identTypeByte
.d90c	b90c					_TKNoArray:
.d90c	b90c	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d90f	b90f	20 e7 b9	jsr $b9e7			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d912	b912	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d914	b914	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d916	b916	20 d6 b7	jsr $b7d6			jsr 	TOKSearchTable
.d919	b919	a2 00		ldx #$00			ldx 	#0
.d91b	b91b	b0 1f		bcs $b93c			bcs 	_TKFoundToken
.d91d	b91d	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d91f	b91f	a9 5a		lda #$5a			lda 	#(KeywordSet1) & $FF
.d921	b921	20 d6 b7	jsr $b7d6			jsr 	TOKSearchTable
.d924	b924	a2 81		ldx #$81			ldx 	#$81
.d926	b926	b0 14		bcs $b93c			bcs 	_TKFoundToken
.d928	b928	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d92a	b92a	a9 4f		lda #$4f			lda 	#(KeywordSet2) & $FF
.d92c	b92c	20 d6 b7	jsr $b7d6			jsr 	TOKSearchTable
.d92f	b92f	a2 82		ldx #$82			ldx 	#$82
.d931	b931	b0 09		bcs $b93c			bcs 	_TKFoundToken
.d933	b933	20 77 ba	jsr $ba77			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d936	b936	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d939	b939	4c 54 b8	jmp $b854			jmp 	_TKTokeniseLoop 			; and go round again.
.d93c	b93c					_TKFoundToken:
.d93c	b93c	48		pha				pha 								; save token
.d93d	b93d	8a		txa				txa 								; shift in X, is there one ?
.d93e	b93e	f0 03		beq $b943			beq 	_TKNoTShift
.d940	b940	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte 				; if so, write it out
.d943	b943					_TKNoTShift:
.d943	b943	68		pla				pla 								; restore and write token
.d944	b944	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d947	b947	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d949	b949	d0 0d		bne $b958			bne 	_TKNotRem 			 		; not shifted ?
.d94b	b94b	c9 d5		cmp #$d5			cmp 	#KWD_REM
.d94d	b94d	d0 09		bne $b958			bne 	_TKNotRem
.d94f	b94f	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d952	b952	20 5e b9	jsr $b95e			jsr 	TOKCheckComment
.d955	b955	4c 54 b8	jmp $b854			jmp 	_TKTokeniseLoop
.d958	b958					_TKNotRem:
.d958	b958	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d95b	b95b	4c 54 b8	jmp $b854			jmp 	_TKTokeniseLoop 			; and go round again.
.d95e	b95e					TOKCheckComment:
.d95e	b95e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d961	b961	e8		inx				inx
.d962	b962	c9 20		cmp #$20			cmp 	#' '
.d964	b964	f0 f8		beq $b95e			beq 	TOKCheckComment
.d966	b966	ca		dex				dex 								; first non space character
.d967	b967	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d969	b969	f0 1f		beq $b98a			beq 	_TOKCCExit 					; then we are okay
.d96b	b96b	c9 00		cmp #$00			cmp 	#0 							; EOL
.d96d	b96d	f0 1b		beq $b98a			beq 	_TOKCCExit 					; then we are okay
.d96f	b96f	da		phx				phx
.d970	b970					_TOKCCLowerCase:
.d970	b970	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d973	b973	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d975	b975	90 09		bcc $b980			bcc 	_TOKKCNotUC
.d977	b977	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d979	b979	b0 05		bcs $b980			bcs 	_TOKKCNotUC
.d97b	b97b	49 20		eor #$20			eor 	#$20
.d97d	b97d	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d980	b980					_TOKKCNotUC:
.d980	b980	e8		inx				inx
.d981	b981	c9 00		cmp #$00			cmp 	#0
.d983	b983	d0 eb		bne $b970			bne 	_TOKCCLowerCase
.d985	b985	fa		plx				plx
.d986	b986	ca		dex				dex 								; tokenise string expects initial skip.
.d987	b987	20 8b b9	jsr $b98b			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d98a	b98a					_TOKCCExit:
.d98a	b98a	60		rts				rts
.d98b	b98b					TOKTokenString:
.d98b	b98b	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d98d	b98d	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d990	b990	e8		inx				inx									; start of quoted string.
.d991	b991	da		phx				phx 								; push start of string on top
.d992	b992	ca		dex				dex 								; because we pre-increment
.d993	b993					_TSFindEnd:
.d993	b993	e8		inx				inx
.d994	b994	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d997	b997	f0 04		beq $b99d			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d999	b999	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d99b	b99b	d0 f6		bne $b993			bne 	_TSFindEnd
.d99d	b99d					_TSEndOfString:
.d99d	b99d	7a		ply				ply  								; so now Y is first character, X is character after end.
.d99e	b99e	48		pha				pha 								; save terminating character
.d99f	b99f	20 a7 b9	jsr $b9a7			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d9a2	b9a2	68		pla				pla 								; terminating character
.d9a3	b9a3	f0 01		beq $b9a6			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d9a5	b9a5	e8		inx				inx
.d9a6	b9a6					_TSNotQuote:
.d9a6	b9a6	60		rts				rts
.d9a7	b9a7					TOKWriteBlockXY:
.d9a7	b9a7	86 36		stx $36				stx 	zTemp0 						; save end character
.d9a9	b9a9	98		tya				tya 								; use 2's complement to work out the byte size
.d9aa	b9aa	49 ff		eor #$ff			eor 	#$FF
.d9ac	b9ac	38		sec				sec
.d9ad	b9ad	65 36		adc $36				adc 	zTemp0
.d9af	b9af	1a		inc a				inc 	a 							; one extra for NULL
.d9b0	b9b0	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9b3	b9b3					_TOBlockLoop:
.d9b3	b9b3	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9b5	b9b5	f0 09		beq $b9c0			beq 	_TOBlockExit
.d9b7	b9b7	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9ba	b9ba	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9bd	b9bd	c8		iny				iny
.d9be	b9be	80 f3		bra $b9b3			bra 	_TOBlockLoop
.d9c0	b9c0					_TOBlockExit:
.d9c0	b9c0	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9c2	b9c2	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9c5	b9c5	60		rts				rts
.d9c6	b9c6					TOKHexConstant:
.d9c6	b9c6	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9c8	b9c8	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9cb	b9cb	e8		inx				inx									; start of quoted string.
.d9cc	b9cc	da		phx				phx 								; push start of constant on top
.d9cd	b9cd	ca		dex				dex
.d9ce	b9ce					_THFindLoop:
.d9ce	b9ce	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9cf	b9cf	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9d2	b9d2	c9 30		cmp #$30			cmp 	#"0"
.d9d4	b9d4	90 0c		bcc $b9e2			bcc 	_THFoundEnd
.d9d6	b9d6	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9d8	b9d8	90 f4		bcc $b9ce			bcc 	_THFindLoop
.d9da	b9da	c9 41		cmp #$41			cmp 	#"A"
.d9dc	b9dc	90 04		bcc $b9e2			bcc 	_THFoundEnd
.d9de	b9de	c9 47		cmp #$47			cmp 	#"F"+1
.d9e0	b9e0	90 ec		bcc $b9ce			bcc 	_THFindLoop
.d9e2	b9e2					_THFoundEnd:
.d9e2	b9e2	7a		ply				ply 								; restore start
.d9e3	b9e3	20 a7 b9	jsr $b9a7			jsr 	TOKWriteBlockXY 			; output the block
.d9e6	b9e6	60		rts				rts
.d9e7	b9e7					TOKCalculateHash:
.d9e7	b9e7	da		phx				phx
.d9e8	b9e8	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9eb	b9eb	a9 00		lda #$00			lda 	#0
.d9ed	b9ed					_TCHLoop:
.d9ed	b9ed	18		clc				clc
.d9ee	b9ee	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9f1	b9f1	e8		inx				inx
.d9f2	b9f2	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9f5	b9f5	d0 f6		bne $b9ed			bne 	_TCHLoop
.d9f7	b9f7	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9fa	b9fa	fa		plx				plx
.d9fb	b9fb	60		rts				rts
.d9fc	b9fc					LCLFixLineBufferCase:
.d9fc	b9fc	a2 00		ldx #$00			ldx 	#0
.d9fe	b9fe					_FLBCLoop:
.d9fe	b9fe	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.da01	ba01	f0 22		beq $ba25			beq 	_FLBCExit 					; end of string.
.da03	ba03	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.da05	ba05	f0 11		beq $ba18			beq 	_FLBCInQuotes
.da07	ba07	e8		inx				inx
.da08	ba08	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.da0a	ba0a	90 f2		bcc $b9fe			bcc 	_FLBCLoop
.da0c	ba0c	c9 7b		cmp #$7b			cmp 	#'z'+1
.da0e	ba0e	b0 ee		bcs $b9fe			bcs 	_FLBCLoop
.da10	ba10	38		sec				sec 								; make U/C
.da11	ba11	e9 20		sbc #$20			sbc 	#32
.da13	ba13	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da16	ba16	80 e6		bra $b9fe			bra 	_FLBCLoop
.da18	ba18					_FLBCInQuotes:
.da18	ba18	e8		inx				inx 								; advance
.da19	ba19	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da1c	ba1c	f0 07		beq $ba25			beq 	_FLBCExit 					; exit on EOS
.da1e	ba1e	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da20	ba20	d0 f6		bne $ba18			bne 	_FLBCInQuotes
.da22	ba22	e8		inx				inx 								; skip over it
.da23	ba23	80 d9		bra $b9fe			bra 	_FLBCLoop
.da25	ba25					_FLBCExit:
.da25	ba25	60		rts				rts
.da26	ba26					TOKExtractLineNumber:
.da26	ba26	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da29	ba29	48		pha				pha
.da2a	ba2a	ad 27 04	lda $0427			lda 	tokenLineNumber
.da2d	ba2d	48		pha				pha
.da2e	ba2e	20 64 ba	jsr $ba64			jsr 	_LCLNTimes2 				; line # x 2
.da31	ba31	20 64 ba	jsr $ba64			jsr 	_LCLNTimes2 				; line # x 4
.da34	ba34	18		clc				clc 								; add stacked value
.da35	ba35	68		pla				pla
.da36	ba36	6d 27 04	adc $0427			adc 	tokenLineNumber
.da39	ba39	8d 27 04	sta $0427			sta 	tokenLineNumber
.da3c	ba3c	68		pla				pla
.da3d	ba3d	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da40	ba40	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da43	ba43	20 64 ba	jsr $ba64			jsr 	_LCLNTimes2 				; line # x 10
.da46	ba46	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da49	ba49	e8		inx				inx
.da4a	ba4a	29 0f		and #$0f			and 	#15 						; add to line #
.da4c	ba4c	18		clc				clc
.da4d	ba4d	6d 27 04	adc $0427			adc 	tokenLineNumber
.da50	ba50	8d 27 04	sta $0427			sta 	tokenLineNumber
.da53	ba53	90 03		bcc $ba58			bcc 	_TLENNoCarry
.da55	ba55	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da58	ba58					_TLENNoCarry:
.da58	ba58	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da5b	ba5b	c9 30		cmp #$30			cmp 	#'0'
.da5d	ba5d	90 04		bcc $ba63			bcc 	_TLENExit
.da5f	ba5f	c9 3a		cmp #$3a			cmp 	#'9'+1
.da61	ba61	90 c3		bcc $ba26			bcc 	TOKExtractLineNumber
.da63	ba63					_TLENExit:
.da63	ba63	60		rts				rts
.da64	ba64					_LCLNTimes2:
.da64	ba64	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da67	ba67	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da6a	ba6a	60		rts				rts
.da6b	ba6b					TOKWriteByte:
.da6b	ba6b	da		phx				phx
.da6c	ba6c	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da6f	ba6f	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da72	ba72	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da75	ba75	fa		plx				plx
.da76	ba76	60		rts				rts
.da77	ba77					TOKCheckCreateVariableRecord:
.da77	ba77	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da79	ba79	85 36		sta $36				sta 	0+zTemp0
.da7b	ba7b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da7d	ba7d	85 37		sta $37				sta 	1+zTemp0
.da7f	ba7f					_CCVSearch:
.da7f	ba7f	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da81	ba81	f0 2c		beq $baaf			beq 	_CCVFail
.da83	ba83	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da85	ba85	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da87	ba87	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da8a	ba8a	d0 16		bne $baa2			bne 	_CCVNext
.da8c	ba8c	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da8e	ba8e	ae 00 04	ldx $0400			ldx 	identStart
.da91	ba91					_CCVCompare:
.da91	ba91	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da94	ba94	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da96	ba96	e8		inx				inx 								; advance pointers
.da97	ba97	c8		iny				iny
.da98	ba98	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da99	ba99	d0 07		bne $baa2			bne 	_CCVNext  					; didn't match go to next.
.da9b	ba9b	90 f4		bcc $ba91			bcc 	_CCVCompare 				; not finished yet.
.da9d	ba9d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.daa0	baa0	f0 41		beq $bae3			beq 	_CCVFound 					; yes, we were successful
.daa2	baa2					_CCVNext:
.daa2	baa2	18		clc				clc 								; go to next record.
.daa3	baa3	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.daa5	baa5	65 36		adc $36				adc 	zTemp0
.daa7	baa7	85 36		sta $36				sta 	zTemp0
.daa9	baa9	90 d4		bcc $ba7f			bcc 	_CCVSearch
.daab	baab	e6 37		inc $37				inc 	zTemp0+1
.daad	baad	80 d0		bra $ba7f			bra 	_CCVSearch
.daaf	baaf					_CCVFail:
.daaf	baaf	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.dab1	bab1	ad 03 04	lda $0403			lda 	identHash
.dab4	bab4	91 36		sta ($36),y			sta 	(zTemp0),y
.dab6	bab6	c8		iny				iny 								; offset 2 is the type byte
.dab7	bab7	ad 04 04	lda $0404			lda 	identTypeByte
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	c8		iny				iny
.dabd	babd					_CCVData:
.dabd	babd	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.dabf	babf	91 36		sta ($36),y			sta 	(zTemp0),y
.dac1	bac1	c8		iny				iny
.dac2	bac2	c0 08		cpy #$08			cpy 	#8
.dac4	bac4	90 f7		bcc $babd			bcc 	_CCVData
.dac6	bac6	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dac9	bac9					_CCVCopyName:
.dac9	bac9	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.dacc	bacc	91 36		sta ($36),y			sta 	(zTemp0),y
.dace	bace	e8		inx				inx
.dacf	bacf	c8		iny				iny
.dad0	bad0	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dad3	bad3	d0 f4		bne $bac9			bne 	_CCVCopyName
.dad5	bad5	98		tya				tya 								; patch offset
.dad6	bad6	92 36		sta ($36)			sta 	(zTemp0)
.dad8	bad8	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dada	bada	91 36		sta ($36),y			sta 	(zTemp0),y
.dadc	badc	88		dey				dey
.dadd	badd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dadf	badf	09 80		ora #$80			ora 	#$80
.dae1	bae1	91 36		sta ($36),y			sta 	(zTemp0),y
.dae3	bae3					_CCVFound:
.dae3	bae3	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dae5	bae5	38		sec				sec
.dae6	bae6	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dae8	bae8	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.daea	baea	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.daed	baed	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.daef	baef	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.daf2	baf2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daf3	baf3					SNDCheckChannel:
.daf3	baf3	aa		tax				tax
.daf4	baf4	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; currently playing a note
.daf7	baf7	d0 38		bne $bb31			bne 	_SNDCCExit
.daf9	baf9	da		phx				phx 								; save current channel
.dafa	bafa	8a		txa				txa 								; put in A
.dafb	bafb	20 77 bb	jsr $bb77			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dafe	bafe	68		pla				pla 								; channel # in A
.daff	baff	90 30		bcc $bb31			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.db01	bb01	a8		tay				tay 								; Y is the channel #
.db02	bb02	bd 44 08	lda $0844,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.db05	bb05	99 43 09	sta $0943,y			sta 	SNDPitchLow,y
.db08	bb08	bd 45 08	lda $0845,x			lda 	SNDQueue+2,x
.db0b	bb0b	99 47 09	sta $0947,y			sta 	SNDPitchHigh,y
.db0e	bb0e	bd 46 08	lda $0846,x			lda 	SNDQueue+3,x
.db11	bb11	99 4b 09	sta $094b,y			sta 	SNDVolume,y
.db14	bb14	bd 47 08	lda $0847,x			lda 	SNDQueue+4,x
.db17	bb17	99 4f 09	sta $094f,y			sta 	SNDTimeLeft,y
.db1a	bb1a	bd 48 08	lda $0848,x			lda 	SNDQueue+5,x
.db1d	bb1d	99 53 09	sta $0953,y			sta 	SNDAdjustLow,y
.db20	bb20	bd 49 08	lda $0849,x			lda 	SNDQueue+6,x
.db23	bb23	99 57 09	sta $0957,y			sta 	SNDAdjustHigh,y
.db26	bb26	5a		phy				phy 								; save channel #
.db27	bb27	20 91 bb	jsr $bb91			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db2a	bb2a	ce 42 08	dec $0842			dec 	SNDLength 					; reduce the queue length.
.db2d	bb2d	68		pla				pla
.db2e	bb2e	20 32 bb	jsr $bb32			jsr 	SNDUpdateNote 				; update channel A
.db31	bb31					_SNDCCExit:
.db31	bb31	60		rts				rts
.db32	bb32					SNDUpdateNote:
.db32	bb32	aa		tax				tax 								; so we can access records
.db33	bb33	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db34	bb34	0a		asl a				asl 	a
.db35	bb35	0a		asl a				asl 	a
.db36	bb36	0a		asl a				asl 	a
.db37	bb37	0a		asl a				asl 	a
.db38	bb38	8d 41 08	sta $0841			sta 	SNDChannelBits
.db3b	bb3b	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; are we silent
.db3e	bb3e	f0 2e		beq $bb6e			beq 	_SNDUNIsSilent
.db40	bb40	ad 41 08	lda $0841			lda 	SNDChannelBits 				; push channel bits on stack
.db43	bb43	48		pha				pha
.db44	bb44	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db47	bb47	29 0f		and #$0f			and 	#$0F
.db49	bb49	0d 41 08	ora $0841			ora 	SNDChannelBits 				; set channel bits
.db4c	bb4c	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db4e	bb4e	20 db bb	jsr $bbdb			jsr 	SNDWritePorts
.db51	bb51	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db54	bb54	8d 41 08	sta $0841			sta 	SNDChannelBits
.db57	bb57	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.db5a	bb5a	4e 41 08	lsr $0841			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db5d	bb5d	6a		ror a				ror 	a
.db5e	bb5e	4e 41 08	lsr $0841			lsr 	SNDChannelBits
.db61	bb61	6a		ror a				ror 	a
.db62	bb62	4a		lsr a				lsr 	a 							; put in bits 0-5
.db63	bb63	4a		lsr a				lsr 	a
.db64	bb64	20 db bb	jsr $bbdb			jsr 	SNDWritePorts 				; write as rest of pitch register
.db67	bb67	68		pla				pla
.db68	bb68	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db6a	bb6a	20 db bb	jsr $bbdb			jsr 	SNDWritePorts
.db6d	bb6d	60		rts				rts
.db6e	bb6e					_SNDUNIsSilent:
.db6e	bb6e	ad 41 08	lda $0841			lda 	SNDChannelBits 				; channel bits
.db71	bb71	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db73	bb73	20 db bb	jsr $bbdb			jsr 	SNDWritePorts 				; write to the ports
.db76	bb76	60		rts				rts
.db77	bb77					SNDFindNextNoteForA:
.db77	bb77	ac 42 08	ldy $0842			ldy 	SNDLength 					; queue size into Y
.db7a	bb7a	f0 13		beq $bb8f			beq 	_SNDFNNFail 				; queue empty.
.db7c	bb7c	a2 00		ldx #$00			ldx 	#0
.db7e	bb7e					_SNDFNNSearch:
.db7e	bb7e	dd 43 08	cmp $0843,x			cmp 	SNDQueue,x 					; does it match the channel
.db81	bb81	38		sec				sec
.db82	bb82	f0 0c		beq $bb90			beq 	_SNDFNNExit 				; if so exit with CS.
.db84	bb84	e8		inx				inx 								; next queue slot.
.db85	bb85	e8		inx				inx
.db86	bb86	e8		inx				inx
.db87	bb87	e8		inx				inx
.db88	bb88	e8		inx				inx
.db89	bb89	e8		inx				inx
.db8a	bb8a	e8		inx				inx
.db8b	bb8b	e8		inx				inx
.db8c	bb8c	88		dey				dey 								; done the whole queue
.db8d	bb8d	d0 ef		bne $bb7e			bne 	_SNDFNNSearch 				; no, go back.
.db8f	bb8f					_SNDFNNFail:
.db8f	bb8f	18		clc				clc
.db90	bb90					_SNDFNNExit:
.db90	bb90	60		rts				rts
.db91	bb91					SNDDeleteXFromQueue:
.db91	bb91	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db93	bb93	f0 09		beq $bb9e			beq 	_SNDDXExit
.db95	bb95	bd 4b 08	lda $084b,x			lda 	SNDQueue+8,x
.db98	bb98	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.db9b	bb9b	e8		inx				inx
.db9c	bb9c	80 f3		bra $bb91			bra 	SNDDeleteXFromQueue
.db9e	bb9e					_SNDDXExit:
.db9e	bb9e	60		rts				rts
.0841						SNDChannelBits:
>0841								.fill 	1
.db9f	bb9f					SNDQueueRequest:
.db9f	bb9f	86 36		stx $36				stx 	zTemp0						; save queue address
.dba1	bba1	84 37		sty $37				sty 	zTemp0+1
.dba3	bba3	ae 42 08	ldx $0842			ldx 	SNDLength 					; queue is full, can't take any more.
.dba6	bba6	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dba8	bba8	f0 21		beq $bbcb			beq 	_SNDQRExit
.dbaa	bbaa	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dbac	bbac	48		pha				pha
.dbad	bbad	8a		txa				txa  								; get offset in queue buffer/
.dbae	bbae	0a		asl a				asl 	a
.dbaf	bbaf	0a		asl a				asl 	a
.dbb0	bbb0	0a		asl a				asl 	a
.dbb1	bbb1	aa		tax				tax
.dbb2	bbb2	68		pla				pla 								; get back and push again
.dbb3	bbb3	48		pha				pha
.dbb4	bbb4	9d 43 08	sta $0843,x			sta 	SNDQueue+0,x 				; save the channel #
.dbb7	bbb7	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dbb9	bbb9					_SNDQCopy:
.dbb9	bbb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dbbb	bbbb	e8		inx				inx
.dbbc	bbbc	c8		iny				iny
.dbbd	bbbd	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.dbc0	bbc0	c0 06		cpy #$06			cpy 	#6
.dbc2	bbc2	d0 f5		bne $bbb9			bne 	_SNDQCopy
.dbc4	bbc4	ee 42 08	inc $0842			inc 	SNDLength 					; bump queue length.
.dbc7	bbc7	68		pla				pla 								; get channel # back
.dbc8	bbc8	20 f3 ba	jsr $baf3			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbcb	bbcb					_SNDQRExit:
.dbcb	bbcb	60		rts				rts
.dbcc	bbcc					SNDSilenceChannel:
.dbcc	bbcc	aa		tax				tax 								; zero time left.
.dbcd	bbcd	9e 4f 09	stz $094f,x			stz 	SNDTimeLeft,x
.dbd0	bbd0	0a		asl a				asl 	a 							; shift into position
.dbd1	bbd1	0a		asl a				asl 	a
.dbd2	bbd2	0a		asl a				asl 	a
.dbd3	bbd3	0a		asl a				asl 	a
.dbd4	bbd4	0a		asl a				asl 	a
.dbd5	bbd5	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbd7	bbd7	20 db bb	jsr $bbdb			jsr 	SNDWritePorts
.dbda	bbda	60		rts				rts
.dbdb	bbdb					SNDWritePorts:
.dbdb	bbdb	da		phx				phx 								; save X
.dbdc	bbdc	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbde	bbde	64 01		stz $01				stz 	1 							; access I/O page 0
.dbe0	bbe0	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbe3	bbe3	8d 10 d6	sta $d610			sta 	$D610
.dbe6	bbe6	86 01		stx $01				stx 	1 							; restore I/O
.dbe8	bbe8	fa		plx				plx 								; restore X
.dbe9	bbe9	60		rts				rts
.dbea	bbea					Export_SNDCommand:
.dbea	bbea	da		phx				phx 								; save XY
.dbeb	bbeb	5a		phy				phy
.dbec	bbec	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbee	bbee	f0 1d		beq $bc0d			beq 	_SNDInitialise
.dbf0	bbf0	90 28		bcc $bc1a			bcc 	_SNDExit
.dbf2	bbf2	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbf4	bbf4	f0 17		beq $bc0d			beq 	_SNDSilence
.dbf6	bbf6	b0 22		bcs $bc1a			bcs 	_SNDExit
.dbf8	bbf8	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbfa	bbfa	b0 09		bcs $bc05			bcs 	_SNDQueryPlay
.dbfc	bbfc	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbfe	bbfe	b0 1a		bcs $bc1a			bcs 	_SNDExit
.dc00	bc00	20 9f bb	jsr $bb9f			jsr 	SNDQueueRequest
.dc03	bc03	80 15		bra $bc1a			bra 	_SNDExit
.dc05	bc05					_SNDQueryPlay:
.dc05	bc05	29 03		and #$03			and 	#3 							; get channel #
.dc07	bc07	aa		tax				tax
.dc08	bc08	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dc0b	bc0b	80 0d		bra $bc1a			bra 	_SNDExit
.dc0d	bc0d					_SNDInitialise:
.dc0d	bc0d					_SNDSilence:
.dc0d	bc0d	9c 42 08	stz $0842			stz 	SNDLength 					; empty the queue.
.dc10	bc10	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc12	bc12					_SNDSilenceLoop:
.dc12	bc12	48		pha				pha
.dc13	bc13	20 cc bb	jsr $bbcc			jsr 	SNDSilenceChannel
.dc16	bc16	68		pla				pla
.dc17	bc17	3a		dec a				dec 	a
.dc18	bc18	10 f8		bpl $bc12			bpl 	_SNDSilenceLoop
.dc1a	bc1a					_SNDExit:
.dc1a	bc1a	7a		ply				ply
.dc1b	bc1b	fa		plx				plx
.dc1c	bc1c	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0842						SNDLength:
>0842								.fill 	1
.0843						SNDQueue:
>0843								.fill 	SNDQueueSize * 8
.0943						SNDPitchLow:
>0943								.fill 	4
.0947						SNDPitchHigh:
>0947								.fill 	4
.094b						SNDVolume:
>094b								.fill 	4
.094f						SNDTimeLeft:
>094f								.fill 	4
.0953						SNDAdjustLow:
>0953								.fill 	4
.0957						SNDAdjustHigh:
>0957								.fill 	4
.dc1d	bc1d					Export_SNDUpdate:
.dc1d	bc1d					PagedSNDUpdate:
.dc1d	bc1d	ad 4f 09	lda $094f			lda 	SNDTimeLeft+0 				; look at time remaining
.dc20	bc20	f0 05		beq $bc27			beq 	_SNDUNot0 					; not playing
.dc22	bc22	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc24	bc24	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel 			; update it.
.dc27	bc27					_SNDUNot0:
.dc27	bc27	ad 50 09	lda $0950			lda 	SNDTimeLeft+1
.dc2a	bc2a	f0 05		beq $bc31			beq 	_SNDUNot1
.dc2c	bc2c	a2 01		ldx #$01			ldx 	#1
.dc2e	bc2e	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel
.dc31	bc31					_SNDUNot1:
.dc31	bc31	ad 51 09	lda $0951			lda 	SNDTimeLeft+2
.dc34	bc34	f0 05		beq $bc3b			beq 	_SNDUNot2
.dc36	bc36	a2 02		ldx #$02			ldx 	#2
.dc38	bc38	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel
.dc3b	bc3b					_SNDUNot2:
.dc3b	bc3b	ad 52 09	lda $0952			lda 	SNDTimeLeft+3
.dc3e	bc3e	f0 05		beq $bc45			beq 	_SNDUNot3
.dc40	bc40	a2 03		ldx #$03			ldx 	#3
.dc42	bc42	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel
.dc45	bc45					_SNDUNot3:
.dc45	bc45	60		rts				rts
.dc46	bc46					SNDUpdateChannel:
.dc46	bc46	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc48	bc48	f0 2c		beq $bc76			beq 	_SNDUCExit
.dc4a	bc4a	3a		dec a				dec 	a 							; decrement and update timer
.dc4b	bc4b	9d 4f 09	sta $094f,x			sta 	SNDTimeLeft,x
.dc4e	bc4e	f0 1d		beq $bc6d			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc50	bc50	bd 53 09	lda $0953,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc53	bc53	1d 57 09	ora $0957,x			ora 	SNDAdjustHigh,x
.dc56	bc56	f0 1e		beq $bc76			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc58	bc58	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc59	bc59	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.dc5c	bc5c	7d 53 09	adc $0953,x			adc 	SNDAdjustLow,x
.dc5f	bc5f	9d 43 09	sta $0943,x			sta 	SNDPitchLow,x
.dc62	bc62	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x
.dc65	bc65	7d 57 09	adc $0957,x			adc 	SNDAdjustHigh,x
.dc68	bc68	29 03		and #$03			and 	#3
.dc6a	bc6a	9d 47 09	sta $0947,x			sta 	SNDPitchHigh,x
.dc6d	bc6d					_SNDUCUpdate:
.dc6d	bc6d	8a		txa				txa 								; which channel.
.dc6e	bc6e	48		pha				pha
.dc6f	bc6f	20 32 bb	jsr $bb32			jsr 	SNDUpdateNote 				; update the current note
.dc72	bc72	68		pla				pla
.dc73	bc73	20 f3 ba	jsr $baf3			jsr 	SNDCheckChannel 			; more to do ?
.dc76	bc76					_SNDUCExit:
.dc76	bc76	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
