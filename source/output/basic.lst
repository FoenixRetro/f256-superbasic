
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct  6 11:08:06 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					lastParameter:
>0716							.fill 	1
.0717					dataPointer:
>0717							.fill 	5
.071c					inDataStatement:
>071c							.fill 	1
.071d					tbOffset:
>071d							.fill 	1
.071e					AssemblerAddress:
>071e							.fill 	2
.0720					AssemblerControl:
>0720							.fill 	1
.0721					ParamStart:
>0721							.fill 	2
.0723					IsGroup1:
>0723							.fill 	1
.0724					BaseOpcode:
>0724							.fill 	1
.0725					ModeMask:
>0725							.fill 	1
.0726					tokenOffset:
>0726							.fill 	1
.0727					tokenLineNumber:
>0727							.fill 	2
.0729					tokenBuffer:
>0729							.fill 	253
.0826					lineBuffer:
>0826							.fill 	MaxLineSize+1
.0877					numberBuffer:
>0877							.fill 	34
.0899					decimalBuffer:
>0899							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 79 8d	jsr $8d79			jsr 	PrintStringXA
.800a	20 de 88	jsr $88de			jsr 	NewCommand 					; erase current program
.800d	20 60 99	jsr $9960			jsr 	BackloadProgram
.8010	4c 59 8a	jmp $8a59			jmp 	CommandRun
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 236."
>805b	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>806b	32 32 2e 20 42 75 69 6c 64 20 32 33 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8079	0d 0d 00					.byte 	13,13,0
>807c							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807c					VectorSetPunc:
>807c	ca 8e					.word	ShiftLeft                        ; $00 <<
>807e	c4 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8080	ba 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8082	f2 a5					.word	SyntaxError                      ; $03 !!3
>8084	f2 a5					.word	SyntaxError                      ; $04 ><
>8086	ce 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8088	cd 8e					.word	ShiftRight                       ; $06 >>
>808a	f2 a5					.word	SyntaxError                      ; $07 !!7
>808c	f2 a5					.word	SyntaxError                      ; $08 !!8
>808e	f2 a5					.word	SyntaxError                      ; $09 !!9
>8090	f2 a5					.word	SyntaxError                      ; $0a !!10
>8092	f2 a5					.word	SyntaxError                      ; $0b !!11
>8094	f2 a5					.word	SyntaxError                      ; $0c !!12
>8096	f2 a5					.word	SyntaxError                      ; $0d !!13
>8098	f2 a5					.word	SyntaxError                      ; $0e !!14
>809a	f2 a5					.word	SyntaxError                      ; $0f !!15
>809c	f2 a5					.word	SyntaxError                      ; $10 @
>809e	f2 a5					.word	SyntaxError                      ; $11 !!17
>80a0	f2 a5					.word	SyntaxError                      ; $12 !!18
>80a2	f2 a5					.word	SyntaxError                      ; $13 [
>80a4	29 a0					.word	IntegerDivide                    ; $14 \
>80a6	f2 a5					.word	SyntaxError                      ; $15 ]
>80a8	53 90					.word	EorInteger                       ; $16 ^
>80aa	f2 a5					.word	SyntaxError                      ; $17 _
>80ac	f2 a5					.word	SyntaxError                      ; $18 `
>80ae	f2 a5					.word	SyntaxError                      ; $19 !!25
>80b0	f2 a5					.word	SyntaxError                      ; $1a !!26
>80b2	f2 a5					.word	SyntaxError                      ; $1b {
>80b4	0d 90					.word	OraInteger                       ; $1c |
>80b6	f2 a5					.word	SyntaxError                      ; $1d }
>80b8	f2 a5					.word	SyntaxError                      ; $1e ~
>80ba	f2 a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>80bc	f2 a5					.word	SyntaxError                      ; $20
>80be	99 90					.word	WordIndirect                     ; $21 !
>80c0	f2 a5					.word	SyntaxError                      ; $22 "
>80c2	f2 a5					.word	SyntaxError                      ; $23 #
>80c4	f2 a5					.word	SyntaxError                      ; $24 $
>80c6	76 a0					.word	IntegerModulus                   ; $25 %
>80c8	c7 8f					.word	AndInteger                       ; $26 &
>80ca	f2 a5					.word	SyntaxError                      ; $27 '
>80cc	f2 a5					.word	SyntaxError                      ; $28 (
>80ce	f2 a5					.word	SyntaxError                      ; $29 )
>80d0	eb a0					.word	MulInteger                       ; $2a *
>80d2	61 8f					.word	AddInteger                       ; $2b +
>80d4	f2 a5					.word	SyntaxError                      ; $2c ,
>80d6	9c 8f					.word	SubInteger                       ; $2d -
>80d8	f2 a5					.word	SyntaxError                      ; $2e .
>80da	82 a2					.word	FDivideCommand                   ; $2f /
>80dc	f2 a5					.word	SyntaxError                      ; $30 0
>80de	f2 a5					.word	SyntaxError                      ; $31 1
>80e0	f2 a5					.word	SyntaxError                      ; $32 2
>80e2	f2 a5					.word	SyntaxError                      ; $33 3
>80e4	f2 a5					.word	SyntaxError                      ; $34 4
>80e6	f2 a5					.word	SyntaxError                      ; $35 5
>80e8	f2 a5					.word	SyntaxError                      ; $36 6
>80ea	f2 a5					.word	SyntaxError                      ; $37 7
>80ec	f2 a5					.word	SyntaxError                      ; $38 8
>80ee	f2 a5					.word	SyntaxError                      ; $39 9
>80f0	f2 a5					.word	SyntaxError                      ; $3a :
>80f2	f2 a5					.word	SyntaxError                      ; $3b ;
>80f4	a6 8d					.word	BinaryCompareLess                ; $3c <
>80f6	9c 8d					.word	BinaryCompareEqual               ; $3d =
>80f8	b0 8d					.word	BinaryCompareGreater             ; $3e >
>80fa	c0 90					.word	ByteIndirect                     ; $3f ?
.80fc					VectorSet0:
>80fc	c9 8a					.word	EOLCommand                       ; $80 !0:EOF
>80fe	d6 8a					.word	Shift1Command                    ; $81 !1:SH1
>8100	de 8a					.word	Shift2Command                    ; $82 !2:SH2
>8102	c8 a3					.word	AbsUnary                         ; $83 ABS(
>8104	8a 95					.word	AllocUnary                       ; $84 ALLOC(
>8106	d8 a3					.word	AscUnary                         ; $85 ASC(
>8108	72 96					.word	ChrUnary                         ; $86 CHR$(
>810a	98 8d					.word	UnaryFalse                       ; $87 FALSE
>810c	e5 a3					.word	FracUnary                        ; $88 FRAC(
>810e	fb a3					.word	IntUnary                         ; $89 INT(
>8110	51 a4					.word	IsValUnary                       ; $8a ISVAL(
>8112	4c 97					.word	Unary_Left                       ; $8b LEFT$(
>8114	0d a4					.word	LenUnary                         ; $8c LEN(
>8116	76 97					.word	Unary_Mid                        ; $8d MID$(
>8118	e2 95					.word	Unary_Not                        ; $8e NOT(
>811a	f2 a5					.word	SyntaxError                      ; $8f RANDOM(
>811c	5c 97					.word	Unary_Right                      ; $90 RIGHT$(
>811e	f8 95					.word	Unary_Rnd                        ; $91 RND(
>8120	27 a4					.word	SgnUnary                         ; $92 SGN(
>8122	84 96					.word	SpcUnary                         ; $93 SPC(
>8124	9f 96					.word	Unary_Str                        ; $94 STR$(
>8126	8c 8d					.word	UnaryTrue                        ; $95 TRUE
>8128	47 a4					.word	ValUnary                         ; $96 VAL(
>812a	f3 85					.word	ForCommand                       ; $97 FOR
>812c	40 87					.word	IfCommand                        ; $98 IF
>812e	e6 8a					.word	Unused1                          ; $99 PROC
>8130	05 8a					.word	Command_REPEAT                   ; $9a REPEAT
>8132	f1 8c					.word	Command_WHILE                    ; $9b WHILE
>8134	69 87					.word	EndIf                            ; $9c ENDIF
>8136	02 a0					.word	Command_ENDPROC                  ; $9d ENDPROC
>8138	ad 86					.word	NextCommand                      ; $9e NEXT
>813a	e6 8a					.word	Unused4                          ; $9f THEN
>813c	0e 8a					.word	Command_UNTIL                    ; $a0 UNTIL
>813e	12 8d					.word	Command_WEND                     ; $a1 WEND
>8140	c8 84					.word	CallCommand                      ; $a2 CALL
>8142	f2 a5					.word	SyntaxError                      ; $a3 CLS
>8144	2b 85					.word	Command_Data                     ; $a4 DATA
>8146	33 85					.word	DimCommand                       ; $a5 DIM
>8148	e6 8a					.word	Unused3                          ; $a6 DOWNTO
>814a	62 87					.word	ElseCode                         ; $a7 ELSE
>814c	06 87					.word	Command_GOSUB                    ; $a8 GOSUB
>814e	24 87					.word	GotoCommand                      ; $a9 GOTO
>8150	6a 87					.word	LetCommand                       ; $aa LET
>8152	5a 88					.word	Command_LOCAL                    ; $ab LOCAL
>8154	e8 88					.word	Command_Print                    ; $ac PRINT
>8156	9f 89					.word	Command_Read                     ; $ad READ
>8158	f8 89					.word	RemCommand                       ; $ae REM
>815a	16 87					.word	Command_RETURN                   ; $af RETURN
>815c	e6 8a					.word	Unused2                          ; $b0 TO
.815e					VectorSet1:
>815e	f2 a5					.word	SyntaxError                      ; $80 !0:EOF
>8160	f2 a5					.word	SyntaxError                      ; $81 !1:SH1
>8162	f2 a5					.word	SyntaxError                      ; $82 !2:SH2
>8164	99 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8166	b8 84					.word	AssertCommand                    ; $84 ASSERT
>8168	d6 84					.word	ClearCommand                     ; $85 CLEAR
>816a	f0 85					.word	EndCommand                       ; $86 END
>816c	bf 87					.word	Command_List                     ; $87 LIST
>816e	de 88					.word	NewCommand                       ; $88 NEW
>8170	27 8a					.word	Command_Restore                  ; $89 RESTORE
>8172	59 8a					.word	CommandRUN                       ; $8a RUN
>8174	e9 8a					.word	StopCommand                      ; $8b STOP
.8176					VectorSet2:
>8176	f2 a5					.word	SyntaxError                      ; $80 !0:EOF
>8178	f2 a5					.word	SyntaxError                      ; $81 !1:SH1
>817a	f2 a5					.word	SyntaxError                      ; $82 !2:SH2
>817c	b5 a4					.word	Assemble_adc                     ; $83 ADC
>817e	ad a4					.word	Assemble_and                     ; $84 AND
>8180	c9 a4					.word	Assemble_asl                     ; $85 ASL
>8182	33 a5					.word	Assemble_bcc                     ; $86 BCC
>8184	37 a5					.word	Assemble_bcs                     ; $87 BCS
>8186	3f a5					.word	Assemble_beq                     ; $88 BEQ
>8188	f6 a4					.word	Assemble_bit                     ; $89 BIT
>818a	27 a5					.word	Assemble_bmi                     ; $8a BMI
>818c	3b a5					.word	Assemble_bne                     ; $8b BNE
>818e	23 a5					.word	Assemble_bpl                     ; $8c BPL
>8190	43 a5					.word	Assemble_bra                     ; $8d BRA
>8192	47 a5					.word	Assemble_brk                     ; $8e BRK
>8194	2b a5					.word	Assemble_bvc                     ; $8f BVC
>8196	2f a5					.word	Assemble_bvs                     ; $90 BVS
>8198	4f a5					.word	Assemble_clc                     ; $91 CLC
>819a	a3 a5					.word	Assemble_cld                     ; $92 CLD
>819c	63 a5					.word	Assemble_cli                     ; $93 CLI
>819e	93 a5					.word	Assemble_clv                     ; $94 CLV
>81a0	c1 a4					.word	Assemble_cmp                     ; $95 CMP
>81a2	0a a5					.word	Assemble_cpx                     ; $96 CPX
>81a4	05 a5					.word	Assemble_cpy                     ; $97 CPY
>81a6	e7 a4					.word	Assemble_dec                     ; $98 DEC
>81a8	9f a5					.word	Assemble_dex                     ; $99 DEX
>81aa	7b a5					.word	Assemble_dey                     ; $9a DEY
>81ac	b1 a4					.word	Assemble_eor                     ; $9b EOR
>81ae	ec a4					.word	Assemble_inc                     ; $9c INC
>81b0	ab a5					.word	Assemble_inx                     ; $9d INX
>81b2	9b a5					.word	Assemble_iny                     ; $9e INY
>81b4	1e a5					.word	Assemble_jmp                     ; $9f JMP
>81b6	19 a5					.word	Assemble_jsr                     ; $a0 JSR
>81b8	bd a4					.word	Assemble_lda                     ; $a1 LDA
>81ba	e2 a4					.word	Assemble_ldx                     ; $a2 LDX
>81bc	00 a5					.word	Assemble_ldy                     ; $a3 LDY
>81be	d3 a4					.word	Assemble_lsr                     ; $a4 LSR
>81c0	af a5					.word	Assemble_nop                     ; $a5 NOP
>81c2	a9 a4					.word	Assemble_ora                     ; $a6 ORA
>81c4	5f a5					.word	Assemble_pha                     ; $a7 PHA
>81c6	4b a5					.word	Assemble_php                     ; $a8 PHP
>81c8	a7 a5					.word	Assemble_phx                     ; $a9 PHX
>81ca	67 a5					.word	Assemble_phy                     ; $aa PHY
>81cc	6f a5					.word	Assemble_pla                     ; $ab PLA
>81ce	53 a5					.word	Assemble_plp                     ; $ac PLP
>81d0	b7 a5					.word	Assemble_plx                     ; $ad PLX
>81d2	77 a5					.word	Assemble_ply                     ; $ae PLY
>81d4	ce a4					.word	Assemble_rol                     ; $af ROL
>81d6	d8 a4					.word	Assemble_ror                     ; $b0 ROR
>81d8	5b a5					.word	Assemble_rti                     ; $b1 RTI
>81da	6b a5					.word	Assemble_rts                     ; $b2 RTS
>81dc	c5 a4					.word	Assemble_sbc                     ; $b3 SBC
>81de	57 a5					.word	Assemble_sec                     ; $b4 SEC
>81e0	b3 a5					.word	Assemble_sed                     ; $b5 SED
>81e2	73 a5					.word	Assemble_sei                     ; $b6 SEI
>81e4	b9 a4					.word	Assemble_sta                     ; $b7 STA
>81e6	dd a4					.word	Assemble_stx                     ; $b8 STX
>81e8	fb a4					.word	Assemble_sty                     ; $b9 STY
>81ea	f1 a4					.word	Assemble_stz                     ; $ba STZ
>81ec	8f a5					.word	Assemble_tax                     ; $bb TAX
>81ee	8b a5					.word	Assemble_tay                     ; $bc TAY
>81f0	14 a5					.word	Assemble_trb                     ; $bd TRB
>81f2	0f a5					.word	Assemble_tsb                     ; $be TSB
>81f4	97 a5					.word	Assemble_tsx                     ; $bf TSX
>81f6	7f a5					.word	Assemble_txa                     ; $c0 TXA
>81f8	87 a5					.word	Assemble_txs                     ; $c1 TXS
>81fa	83 a5					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fc					AssembleGroup1:
.81fc	a9 ff		lda #$ff			lda 	#$FF
.81fe	8d 25 07	sta $0725			sta 	ModeMask 					; initialise the mode mask - all for all
.8201	80 02		bra $8205			bra 	AsmGroup12
.8203					AssembleGroup2:
.8203	a5 00		lda $00				lda 	$00
.8205					AsmGroup12:
.8205	8d 23 07	sta $0723			sta 	IsGroup1 					; save the 'group 1' flag
.8208	68		pla				pla 								; pop the return address to access the information following.
.8209	fa		plx				plx
.820a	20 93 82	jsr $8293			jsr 	AccessParameters 			; get opcode and save as base
.820d	8d 24 07	sta $0724			sta 	BaseOpcode
.8210	ad 23 07	lda $0723			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8213	d0 08		bne $821d			bne 	_AG12HaveMask
.8215	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8217	20 9b 82	jsr $829b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.821a	8d 25 07	sta $0725			sta 	ModeMask
.821d					_AG12HaveMask:
.821d	20 d6 83	jsr $83d6			jsr 	TypeAndCalculateOperand 	; get zero page type
.8220	da		phx				phx 								; save found address mode
.8221	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.8224	fa		plx				plx  								; restore address mode
.8225	b0 0b		bcs $8232			bcs 	_AG12Exit
.8227	20 33 82	jsr $8233			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.822a	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.822d	b0 03		bcs $8232			bcs 	_AG12Exit
.822f	4c f2 a5	jmp $a5f2			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8232					_AG12Exit:
.8232	60		rts				rts
.8233					PromoteToAbsolute:
.8233	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8235	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8237	f0 19		beq $8252			beq 	_PTADo
.8239	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.823b	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823d	f0 13		beq $8252			beq 	_PTADo
.823f	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8241	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8243	f0 0d		beq $8252			beq 	_PTADo
.8245	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8247	e0 d1		cpx #$d1			cpx 	#AM_IND
.8249	f0 07		beq $8252			beq 	_PTADo
.824b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824f	f0 01		beq $8252			beq 	_PTADo
.8251	60		rts				rts
.8252					_PTADo:
.8252	aa		tax				tax
.8253	60		rts				rts
.8254					AssembleGroup3:
.8254	68		pla				pla 								; get parameters, which is just the opcode.
.8255	fa		plx				plx
.8256	20 93 82	jsr $8293			jsr 	AccessParameters 			; get and output opcode
.8259	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.825c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get a 16 bit operand
.825f	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8262	38		sec				sec
.8263	ed 1e 07	sbc $071e			sbc 	AssemblerAddress
.8266	48		pha				pha 								; LSB in A
.8267	ad 10 06	lda $0610			lda 	NSMantissa1
.826a	ed 1f 07	sbc $071f			sbc 	AssemblerAddress+1
.826d	aa		tax				tax 								; MSB in X
.826e	68		pla				pla
.826f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8270	69 7f		adc #$7f			adc 	#$7F
.8272	90 01		bcc $8275			bcc 	_AG3NoCarry
.8274	e8		inx				inx
.8275					_AG3NoCarry:
.8275	38		sec				sec 								; fix back and write out anyways.
.8276	e9 80		sbc #$80			sbc 	#$80
.8278	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.827b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827d	f0 0a		beq $8289			beq 	_AG3Exit
.827f	ad 20 07	lda $0720			lda 	AssemblerControl 			; are we allowing bad values ?
.8282	29 01		and #$01			and 	#1
.8284	f0 03		beq $8289			beq 	_AG3Exit
.8286	4c f7 a5	jmp $a5f7			jmp 	RangeError 					; no, branch is out of range
.8289					_AG3Exit:
.8289	60		rts				rts
.828a					AssembleGroup4:
.828a	68		pla				pla 								; pop address
.828b	fa		plx				plx
.828c	20 93 82	jsr $8293			jsr 	AccessParameters 			; access and get first
.828f	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 			; output it.
.8292	60		rts				rts
.8293					AccessParameters:
.8293	8d 21 07	sta $0721			sta 	ParamStart
.8296	8e 22 07	stx $0722			stx 	ParamStart+1
.8299	a9 01		lda #$01			lda 	#1
.829b					GetParameter:
.829b	5a		phy				phy
.829c	a8		tay				tay
.829d	ad 21 07	lda $0721			lda 	ParamStart
.82a0	85 36		sta $36				sta 	zTemp0
.82a2	ad 22 07	lda $0722			lda 	ParamStart+1
.82a5	85 37		sta $37				sta 	zTemp0+1
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	7a		ply				ply
.82aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82ab					AssemblerWriteByte:
.82ab	48		pha			pha
.82ac	ad 20 07	lda $0720		lda 	AssemblerControl 				; check printing bytes ?
.82af	29 02		and #$02		and 	#2
.82b1	f0 1b		beq $82ce		beq 	_AWBNoPrint
.82b3	ad 1f 07	lda $071f		lda		AssemblerAddress+1 				; print address
.82b6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82b9	ad 1e 07	lda $071e		lda		AssemblerAddress
.82bc	20 e9 82	jsr $82e9		jsr 	PrintHex
.82bf	a9 20		lda #$20		lda 	#' '
.82c1	20 5f a8	jsr $a85f		jsr 	EXTPrintCharacter
.82c4	68		pla			pla 									; print byte
.82c5	48		pha			pha
.82c6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82c9	a9 0d		lda #$0d		lda 	#13
.82cb	20 5f a8	jsr $a85f		jsr 	EXTPrintCharacter
.82ce					_AWBNoPrint:
.82ce	ad 1e 07	lda $071e		lda		AssemblerAddress				; copy address to zTemp0
.82d1	85 36		sta $36			sta 	zTemp0
.82d3	ad 1f 07	lda $071f		lda		AssemblerAddress+1
.82d6	f0 0e		beq $82e6		beq 	_AWBRange
.82d8	85 37		sta $37			sta 	zTemp0+1
.82da	68		pla			pla 									; write byte out
.82db	92 36		sta ($36)		sta 	(zTemp0)
.82dd	ee 1e 07	inc $071e		inc 	AssemblerAddress 				; bump address
.82e0	d0 03		bne $82e5		bne 	_AWBNoCarry
.82e2	ee 1f 07	inc $071f		inc 	AssemblerAddress+1
.82e5					_AWBNoCarry:
.82e5	60		rts			rts
.82e6					_AWBRange:
.82e6	4c f7 a5	jmp $a5f7		jmp 	RangeError
.82e9					PrintHex:
.82e9	48		pha				pha
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	4a		lsr a				lsr 	a
.82ed	4a		lsr a				lsr 	a
.82ee	20 f2 82	jsr $82f2			jsr 	_PrintNibble
.82f1	68		pla				pla
.82f2					_PrintNibble:
.82f2	29 0f		and #$0f			and 	#15
.82f4	c9 0a		cmp #$0a			cmp 	#10
.82f6	90 02		bcc $82fa			bcc 	_NoShift
.82f8	69 06		adc #$06			adc 	#6
.82fa					_NoShift:
.82fa	69 30		adc #$30			adc 	#48
.82fc	4c 5f a8	jmp $a85f			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82ff					AssembleModeX:
.82ff	5a		phy				phy
.8300	ad 23 07	lda $0723			lda 	IsGroup1
.8303	f0 17		beq $831c			beq 	_AMXGroup2
.8305	8a		txa				txa 							; is it in group # 1
.8306	29 40		and #$40			and 	#AM_ISG1
.8308	f0 50		beq $835a			beq 	_AMXFail 				; no, give up.
.830a	8a		txa				txa 							; get back.
.830b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830f	d0 22		bne $8333			bne 	_AMXHaveInfo
.8311	ad 24 07	lda $0724			lda 	BaseOpcode 				; cannot store immediate.
.8314	c9 81		cmp #$81			cmp 	#$81
.8316	f0 42		beq $835a			beq 	_AMXFail
.8318	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.831a	80 17		bra $8333			bra 	_AMXHaveInfo 			; odd design decision there.
.831c					_AMXGroup2:
.831c	8a		txa				txa 							; is it in group 2 ?
.831d	29 20		and #$20			and 	#AM_ISG2
.831f	f0 39		beq $835a			beq 	_AMXFail 				; no, give up.
.8321	8a		txa				txa 							; get the offset into Y
.8322	29 1f		and #$1f			and 	#$1F
.8324	4a		lsr a				lsr 	a 						; make it 0-7.
.8325	4a		lsr a				lsr  	a
.8326	a8		tay				tay
.8327	ad 25 07	lda $0725			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.832a					_AMXCheckOkay:
.832a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.832b	88		dey				dey
.832c	10 fc		bpl $832a			bpl 	_AMXCheckOkay
.832e	90 2a		bcc $835a			bcc 	_AMXFail 				; not allowed.
.8330	8a		txa				txa  							; get mask back
.8331	29 1f		and #$1f			and 	#$1F
.8333					_AMXHaveInfo:
.8333	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8335	10 05		bpl $833c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8337	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.833a	d0 1e		bne $835a			bne 	_AMXFail
.833c					_AMXAnySize:
.833c	18		clc				clc 							; add offset to the base opcode
.833d	6d 24 07	adc $0724			adc 	BaseOpcode
.8340					_AMXOutputCode:
.8340	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 		; write the opcode out.
.8343	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8345	f0 10		beq $8357			beq 	_AMXExit
.8347	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.834a	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.834d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834f	30 06		bmi $8357			bmi 	_AMXExit
.8351	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8354	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.8357					_AMXExit:
.8357	7a		ply				ply
.8358	38		sec				sec
.8359	60		rts				rts
.835a					_AMXFail:
.835a	a0 00		ldy #$00			ldy 	#0
.835c					_AMXCheckOddities:
.835c	8a		txa				txa
.835d	d9 85 83	cmp $8385,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8360	d0 16		bne $8378			bne 	_AMXCONext
.8362	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8365	cd 24 07	cmp $0724			cmp 	BaseOpcode
.8368	d0 0e		bne $8378			bne 	_AMXCONext
.836a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836c	10 05		bpl $8373			bpl 	_AMXCONotZero
.836e	ad 10 06	lda $0610			lda 	NSMantissa1
.8371	d0 05		bne $8378			bne 	_AMXCONext
.8373					_AMXCONotZero:
.8373	b9 84 83	lda $8384,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8376	80 c8		bra $8340			bra 	_AMXOutputCode 			; and assemble it
.8378					_AMXCONext:
.8378	c8		iny				iny
.8379	c8		iny				iny
.837a	c8		iny				iny
.837b	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; end of table
.837e	d0 dc		bne $835c			bne 	_AMXCheckOddities
.8380					_AMXCOFail:
.8380	7a		ply				ply
.8381	18		clc				clc
.8382	60		rts				rts
.8383					ExtraOpcode:
>8383	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8386	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8389	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8392	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8395	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8398	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>839b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83a1	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a2					LabelHere:
.83a2	c8		iny				iny 								; skip .
.83a3	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a5	20 fa 93	jsr $93fa			jsr 	EvaluateTerm 				; get a term
.83a8	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83ab	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ad	d0 24		bne $83d3			bne 	_ALType
.83af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b2	85 36		sta $36				sta 	zTemp0
.83b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b7	85 37		sta $37				sta 	zTemp0+1
.83b9	5a		phy				phy 								; copy address in.
.83ba	a0 01		ldy #$01			ldy 	#1
.83bc	ad 1e 07	lda $071e			lda	 	AssemblerAddress
.83bf	92 36		sta ($36)			sta 	(zTemp0)
.83c1	ad 1f 07	lda $071f			lda	 	AssemblerAddress+1
.83c4	91 36		sta ($36),y			sta 	(zTemp0),y
.83c6	c8		iny				iny
.83c7	a9 00		lda #$00			lda 	#0
.83c9	91 36		sta ($36),y			sta 	(zTemp0),y
.83cb	c8		iny				iny
.83cc	91 36		sta ($36),y			sta 	(zTemp0),y
.83ce	c8		iny				iny
.83cf	91 36		sta ($36),y			sta 	(zTemp0),y
.83d1	7a		ply				ply
.83d2	60		rts				rts
.83d3					_ALType:
.83d3	4c fc a5	jmp $a5fc			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d6					TypeAndCalculateOperand:
.83d6	b1 30		lda ($30),y			lda 	(codePtr),y
.83d8	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83da	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83dc	f0 5b		beq $8439			beq 	_TACOExit
.83de	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e0	f0 57		beq $8439			beq 	_TACOExit
.83e2	c8		iny				iny
.83e3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e7	f0 51		beq $843a			beq 	CalculateOperand
.83e9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83eb	f0 1f		beq $840c			beq 	_TACOIndirect
.83ed	88		dey				dey 								; undo get of first character
.83ee	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get operand
.83f1	b1 30		lda ($30),y			lda 	(codePtr),y
.83f3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f7	d0 40		bne $8439			bne 	_TACOExit
.83f9	c8		iny				iny
.83fa	20 87 9f	jsr $9f87			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83ff	c9 58		cmp #$58			cmp 	#'X'
.8401	f0 36		beq $8439			beq 	_TACOExit
.8403	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8405	c9 59		cmp #$59			cmp 	#'Y'
.8407	f0 30		beq $8439			beq 	_TACOExit
.8409					_TACOSyntax:
.8409	4c f2 a5	jmp $a5f2			jmp 	SyntaxError
.840c					_TACOIndirect:
.840c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get the operand
.840f	b1 30		lda ($30),y			lda 	(codePtr),y
.8411	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8413	f0 17		beq $842c			beq 	_TACOIndX
.8415	20 10 a0	jsr $a010			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	a2 d1		ldx #$d1			ldx 	#AM_IND
.841c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841e	d0 19		bne $8439			bne 	_TACOExit
.8420	c8		iny				iny
.8421	20 87 9f	jsr $9f87			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8424	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8426	d0 e1		bne $8409			bne 	_TACOSyntax
.8428	a2 d0		ldx #$d0			ldx 	#AM_INDY
.842a	80 0d		bra $8439			bra 	_TACOExit
.842c					_TACOIndX:
.842c	c8		iny				iny
.842d	20 87 9f	jsr $9f87			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8430	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8432	d0 d5		bne $8409			bne 	_TACOSyntax
.8434	20 10 a0	jsr $a010			jsr 	CheckRightBracket			; check )
.8437	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8439					_TACOExit:
.8439	60		rts				rts
.843a					CalculateOperand:
.843a	48		pha				pha
.843b	da		phx				phx
.843c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843e	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger
.8441	fa		plx				plx
.8442	68		pla				pla
.8443	60		rts				rts
.9f87					TACOCheckXY:
.9f87	b1 30		lda ($30),y			lda 	(codePtr),y
.9f89	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9f8b	c9 40		cmp #$40			cmp 	#$40
.9f8d	d0 21		bne $9fb0			bne 	_TCXYFail
.9f8f	b1 30		lda ($30),y			lda 	(codePtr),y
.9f91	18		clc				clc
.9f92	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9f94	85 37		sta $37				sta 	zTemp0+1
.9f96	c8		iny				iny
.9f97	b1 30		lda ($30),y			lda 	(codePtr),y
.9f99	c8		iny				iny
.9f9a	85 36		sta $36				sta 	zTemp0
.9f9c	5a		phy				phy 								; save position
.9f9d	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9f9f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fa1	d0 0c		bne $9faf			bne 	_TCXYPopFail
.9fa3	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9fa5	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fa7	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9fa9	f0 08		beq $9fb3			beq 	_TCXYFound
.9fab	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9fad	f0 04		beq $9fb3			beq 	_TCXYFound
.9faf					_TCXYPopFail:
.9faf	7a		ply				ply
.9fb0					_TCXYFail:
.9fb0	a9 00		lda #$00			lda 	#0
.9fb2	60		rts				rts
.9fb3					_TCXYFound:
.9fb3	7a		ply				ply 								; restore position
.9fb4	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9fb6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8444					EditProgramCode:
.8444	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line.
.8447	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1
.844a	20 54 9f	jsr $9f54			jsr 	MemorySearch
.844d	90 05		bcc $8454			bcc 	_EPCNoDelete 				; reached the end don't delete
.844f	d0 03		bne $8454			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8451	20 a3 a8	jsr $a8a3			jsr 	MemoryDeleteLine 			; delete the line
.8454					_EPCNoDelete:
.8454	ad 29 07	lda $0729			lda 	TokenBuffer 				; buffer empty
.8457	c9 80		cmp #$80			cmp 	#KWC_EOL
.8459	f0 0d		beq $8468			beq 	_EPCNoInsert
.845b	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845e	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8461	20 54 9f	jsr $9f54			jsr 	MemorySearch
.8464	18		clc				clc 								; insert at this point.
.8465	20 da a8	jsr $a8da			jsr 	MemoryInsertLine 			; insert the line
.8468					_EPCNoInsert:
.8468	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8469					WarmStart:
.8469	a2 ff		ldx #$ff			ldx 	#$FF
.846b	9a		txs				txs
.846c	20 75 a8	jsr $a875			jsr 	EXTInputLine 				; get line to lineBuffer
.846f	20 b3 9c	jsr $9cb3			jsr 	TokeniseLine 				; tokenise the line
.8472	ad 27 07	lda $0727			lda 	TokenLineNumber 			; line number ?
.8475	0d 28 07	ora $0728			ora 	TokenLineNumber+1
.8478	d0 17		bne $8491			bne 	_WSEditCode 				; if so,edit code.
.847a	9c 26 07	stz $0726			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847d	a9 26		lda #$26			lda 	#((TokenOffset) & $FF)
.847f	85 30		sta $30				sta 	codePtr
.8481	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8483	85 31		sta $31				sta 	codePtr+1
.8485	ad 29 07	lda $0729			lda 	TokenBuffer 				; nothing to run
.8488	c9 80		cmp #$80			cmp 	#KWC_EOL
.848a	f0 dd		beq $8469			beq 	WarmStart
.848c	20 6b 8a	jsr $8a6b			jsr 	RUNCodePointerLine 			; execute that line.
.848f	80 d8		bra $8469			bra 	WarmStart
.8491					_WSEditCode:
.8491	20 44 84	jsr $8444			jsr 	EditProgramCode
.8494	20 d6 84	jsr $84d6			jsr 	ClearCommand
.8497	80 d0		bra $8469			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8499					AssembleCommand:
.8499	a2 00		ldx #$00			ldx 	#0
.849b	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger 		; start address
.849e	ad 08 06	lda $0608			lda 	NSMantissa0
.84a1	8d 1e 07	sta $071e			sta 	AssemblerAddress
.84a4	ad 10 06	lda $0610			lda 	NSMantissa1
.84a7	8d 1f 07	sta $071f			sta 	AssemblerAddress+1
.84aa	20 18 a0	jsr $a018			jsr 	CheckComma
.84ad	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger 		; options
.84b0	ad 08 06	lda $0608			lda 	NSMantissa0
.84b3	8d 20 07	sta $0720			sta 	AssemblerControl
.84b6	60		rts				rts
.84b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b8					AssertCommand:
.84b8	a2 00		ldx #$00			ldx 	#0
.84ba	20 17 98	jsr $9817			jsr 	EvaluateInteger 			; the assert test
.84bd	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; exit if result is non zero.
.84c0	d0 05		bne $84c7			bne 	_ACExit
.84c2	a9 0a		lda #$0a		lda	#10
.84c4	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.84c7					_ACExit:
.84c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c8					CallCommand:
.84c8	a2 00		ldx #$00			ldx 	#0
.84ca	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger
.84cd	ad 10 06	lda $0610			lda 	NSMantissa1
.84d0	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d3	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d6					ClearCommand:
.84d6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d8	85 36		sta $36				sta 	0+zTemp0
.84da	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84dc	85 37		sta $37				sta 	1+zTemp0
.84de					_ClearZeroLoop:
.84de	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84e0	f0 24		beq $8506			beq 	_ClearZeroEnd
.84e2	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e4	a9 00		lda #$00			lda 	#0
.84e6					_ClearOneVariable:
.84e6	91 36		sta ($36),y			sta 	(zTemp0),y
.84e8	c8		iny				iny
.84e9	c0 08		cpy #$08			cpy 	#8
.84eb	d0 f9		bne $84e6			bne 	_ClearOneVariable
.84ed	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.84f1	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f3	d0 04		bne $84f9			bne 	_ClearNotProcedure
.84f5	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f7	91 36		sta ($36),y			sta 	(zTemp0),y
.84f9					_ClearNotProcedure:
.84f9	18		clc				clc 								; go to the next variable
.84fa	b2 36		lda ($36)			lda 	(zTemp0)
.84fc	65 36		adc $36				adc 	zTemp0
.84fe	85 36		sta $36				sta 	zTemp0
.8500	90 dc		bcc $84de			bcc 	_ClearZeroLoop
.8502	e6 37		inc $37				inc 	zTemp0+1
.8504	80 d8		bra $84de			bra 	_ClearZeroLoop
.8506					_ClearZeroEnd:
.8506	18		clc				clc
.8507	a5 36		lda $36				lda 	zTemp0
.8509	69 01		adc #$01			adc 	#1
.850b	8d 0c 07	sta $070c			sta 	lowMemPtr
.850e	a5 37		lda $37				lda 	zTemp0+1
.8510	69 00		adc #$00			adc 	#0
.8512	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8515	20 53 99	jsr $9953			jsr 	StackReset
.8518	20 f1 a7	jsr $a7f1			jsr 	StringSystemInitialise
.851b	20 40 8c	jsr $8c40			jsr 	ProcedureScan
.851e	20 27 8a	jsr $8a27			jsr 	Command_Restore
.8521	9c 1e 07	stz $071e			stz 	AssemblerAddress
.8524	9c 1f 07	stz $071f			stz 	AssemblerAddress+1
.8527	9c 20 07	stz $0720			stz 	AssemblerControl
.852a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.852b					Command_Data:
.852b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852d	a2 80		ldx #$80			ldx 	#KWC_EOL
.852f	20 92 8c	jsr $8c92			jsr 	ScanForward
.8532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8533					DimCommand:
.8533	b1 30		lda ($30),y			lda 	(codePtr),y
.8535	29 c0		and #$c0			and 	#$C0
.8537	c9 40		cmp #$40			cmp 	#$40
.8539	d0 7a		bne $85b5			bne 	_DCSyntax
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	18		clc				clc
.853e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8540	85 3f		sta $3f				sta 	zaTemp+1
.8542	c8		iny				iny
.8543	b1 30		lda ($30),y			lda 	(codePtr),y
.8545	c8		iny				iny
.8546	85 3e		sta $3e				sta 	zaTemp
.8548	5a		phy				phy
.8549	a0 02		ldy #$02			ldy 	#2 						; read type byte
.854b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8551	f0 62		beq $85b5			beq 	_DCSyntax
.8553	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8555	29 04		and #$04			and 	#NSBIsArray
.8557	f0 64		beq $85bd			beq 	_DCType
.8559	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.855b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855d	d0 59		bne $85b8			bne 	_DCRedefine
.855f	7a		ply				ply
.8560	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get array size, check it.
.8563	5a		phy				phy
.8564	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8566	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8568	7a		ply				ply 							; is there a second (e.g. ,x)
.8569	b1 30		lda ($30),y			lda 	(codePtr),y
.856b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856d	d0 0a		bne $8579			bne 	_DCOneDimension
.856f	c8		iny				iny 							; skip comma
.8570	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get 2nd array size
.8573	5a		phy				phy
.8574	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8576	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8578	7a		ply				ply
.8579					_DCOneDimension:
.8579	5a		phy				phy 							; save position
.857a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857e	aa		tax				tax
.857f	c8		iny				iny
.8580	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582	e8		inx				inx 							; bump them.
.8583	1a		inc a				inc 	a
.8584	20 92 a4	jsr $a492			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8587	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8589	29 e0		and #$e0			and 	#$E0
.858b	d0 23		bne $85b0			bne 	_DCSize
.858d	a0 02		ldy #$02			ldy 	#2 						; get base type
.858f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8591	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType 		; scale by base type
.8594	a5 36		lda $36				lda 	zTemp0
.8596	a6 37		ldx $37				ldx 	zTemp0+1
.8598	20 a9 95	jsr $95a9			jsr 	AllocateXABytes 		; allocate memory
.859b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859f	c8		iny				iny
.85a0	8a		txa				txa
.85a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a3	7a		ply				ply 							; get position back
.85a4	20 10 a0	jsr $a010			jsr 	CheckRightBracket 		; check )
.85a7	b1 30		lda ($30),y			lda 	(codePtr),y
.85a9	c8		iny				iny 							; consume in case
.85aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85ac	f0 85		beq $8533			beq 	DimCommand
.85ae	88		dey				dey 							; undo consume
.85af	60		rts				rts
.85b0					_DCSize:
.85b0	a9 16		lda #$16		lda	#22
.85b2	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.85b5					_DCSyntax:
.85b5	4c f2 a5	jmp $a5f2			jmp 	SyntaxError
.85b8					_DCRedefine:
.85b8	a9 15		lda #$15		lda	#21
.85ba	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.85bd					_DCType:
.85bd	4c fc a5	jmp $a5fc			jmp 	TypeError
.85c0					_DCGetSize:
.85c0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c2	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger 	; get array dimension
.85c5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c7	f0 e7		beq $85b0			beq 	_DCSize
.85c9	c9 fe		cmp #$fe			cmp 	#254
.85cb	f0 e3		beq $85b0			beq 	_DCSize
.85cd	60		rts				rts
.85ce					ScaleByBaseType:
.85ce	29 10		and #$10			and 	#NSBIsString 			; is it string
.85d0	d0 19		bne $85eb			bne 	_SBBTString
.85d2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d4	48		pha				pha
.85d5	a5 36		lda $36				lda 	zTemp0
.85d7	48		pha				pha
.85d8	06 36		asl $36				asl 	zTemp0 					; x 2
.85da	26 37		rol $37				rol 	zTemp0+1
.85dc	06 36		asl $36				asl 	zTemp0 					; x 4
.85de	26 37		rol $37				rol 	zTemp0+1
.85e0	68		pla				pla 							; add stacked value = x 5
.85e1	65 36		adc $36				adc 	zTemp0
.85e3	85 36		sta $36				sta 	zTemp0
.85e5	68		pla				pla
.85e6	65 37		adc $37				adc 	zTemp0+1
.85e8	85 37		sta $37				sta 	zTemp0+1
.85ea	60		rts				rts
.85eb					_SBBTString:
.85eb	06 36		asl $36				asl 	zTemp0
.85ed	26 37		rol $37				rol 	zTemp0+1
.85ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85f0					EndCommand:
.85f0	4c 69 84	jmp $8469			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f3					ForCommand:
.85f3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f5	20 f3 98	jsr $98f3			jsr 	StackOpen
.85f8	a2 00		ldx #$00			ldx 	#0
.85fa	20 fa 93	jsr $93fa			jsr 	EvaluateTerm
.85fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8600	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8602	d0 49		bne $864d			bne		_FCError
.8604	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8606	20 20 a0	jsr $a020			jsr 	CheckNextA
.8609	e8		inx				inx
.860a	20 17 98	jsr $9817			jsr 	EvaluateInteger 			; <from> in +1
.860d	b1 30		lda ($30),y			lda 	(codePtr),y
.860f	c8		iny				iny 								; consume it
.8610	48		pha				pha 								; save on stack for later
.8611	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8613	f0 04		beq $8619			beq 	_FCNoSyntax
.8615	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8617	d0 37		bne $8650			bne 	_FCSyntaxError
.8619					_FCNoSyntax:
.8619	e8		inx				inx
.861a	20 17 98	jsr $9817			jsr 	EvaluateInteger
.861d	20 32 99	jsr $9932			jsr 	STKSaveCodePosition 		; save loop back position
.8620	68		pla				pla 								; restore DOWNTO or TO
.8621	5a		phy				phy 								; save Y on the stack
.8622	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8624	f0 02		beq $8628			beq 	_FCNotDownTo
.8626	a9 02		lda #$02			lda 	#2
.8628					_FCNotDownTo:
.8628	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8629	a0 10		ldy #$10			ldy 	#16
.862b	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862d	a0 06		ldy #$06			ldy 	#6
.862f	ad 08 06	lda $0608			lda 	NSMantissa0
.8632	91 34		sta ($34),y			sta 	(basicStack),y
.8634	ad 10 06	lda $0610			lda 	NSMantissa1
.8637	c8		iny				iny
.8638	91 34		sta ($34),y			sta 	(basicStack),y
.863a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863c	a2 01		ldx #$01			ldx 	#1
.863e	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8641	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8643	a2 02		ldx #$02			ldx 	#2
.8645	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8648	20 73 86	jsr $8673			jsr 	CopyIndexToReference
.864b	7a		ply				ply 								; restore position
.864c	60		rts				rts
.864d					_FCError:
.864d	4c fc a5	jmp $a5fc			jmp 	TypeError
.8650					_FCSyntaxError:
.8650	4c f2 a5	jmp $a5f2			jmp 	SyntaxError
.8653					FCIntegerToStack:
.8653	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8656	10 03		bpl $865b			bpl	 	_FCNotNegative
.8658	20 55 98	jsr $9855			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.865b					_FCNotNegative:
.865b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865e	91 34		sta ($34),y			sta 	(basicStack),y
.8660	c8		iny				iny
.8661	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8664	91 34		sta ($34),y			sta 	(basicStack),y
.8666	c8		iny				iny
.8667	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.866a	91 34		sta ($34),y			sta 	(basicStack),y
.866c	c8		iny				iny
.866d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8670	91 34		sta ($34),y			sta 	(basicStack),y
.8672	60		rts				rts
.8673					CopyIndexToReference:
.8673	5a		phy				phy
.8674	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8676	38		sec				sec 								; (because we copy from offset 8)
.8677	b1 34		lda ($34),y			lda 	(basicStack),y
.8679	e9 08		sbc #$08			sbc 	#8
.867b	85 36		sta $36				sta 	zTemp0
.867d	c8		iny				iny
.867e	b1 34		lda ($34),y			lda 	(basicStack),y
.8680	e9 00		sbc #$00			sbc 	#0
.8682	85 37		sta $37				sta 	zTemp0+1
.8684	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8686	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; into carry
.868b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868d	90 14		bcc $86a3			bcc 	_CITRNormal
.868f	38		sec				sec
.8690					_CITRNegative:
.8690	a9 00		lda #$00			lda 	#0
.8692	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8694	91 36		sta ($36),y			sta 	(zTemp0),y
.8696	c8		iny				iny
.8697	ca		dex				dex
.8698	d0 f6		bne $8690			bne 	_CITRNegative
.869a	88		dey				dey 								; look at MSB of mantissa
.869b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869d	09 80		ora #$80			ora 	#$80
.869f	91 36		sta ($36),y			sta 	(zTemp0),y
.86a1	7a		ply				ply
.86a2	60		rts				rts
.86a3					_CITRNormal:
.86a3	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a5	91 36		sta ($36),y			sta 	(zTemp0),y
.86a7	c8		iny				iny
.86a8	ca		dex				dex
.86a9	d0 f8		bne $86a3			bne 	_CITRNormal
.86ab	7a		ply				ply 								; and exit.
.86ac	60		rts				rts
.86ad					NextCommand:
.86ad	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86af	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86b1	20 1a 99	jsr $991a			jsr 	StackCheckFrame
.86b4	5a		phy				phy
.86b5	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b7	b1 34		lda ($34),y			lda 	(basicStack),y
.86b9	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86bb	30 02		bmi $86bf			bmi 	_NCStepNeg
.86bd	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bf					_NCStepNeg:
.86bf	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86c1	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c3	18		clc				clc
.86c4					_NCBump:
.86c4	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c6	91 34		sta ($34),y			sta 	(basicStack),y
.86c8	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86ca	c8		iny				iny 								; next byte
.86cb	ca		dex				dex 								; do four times
.86cc	d0 f6		bne $86c4			bne 	_NCBump
.86ce	20 73 86	jsr $8673			jsr		CopyIndexToReference		; copy it to the reference variable.
.86d1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d3	b1 34		lda ($34),y			lda 	(basicStack),y
.86d5	0a		asl a				asl 	a 							; sign bit to carry
.86d6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d8	85 38		sta $38				sta 	zTemp1
.86da	90 02		bcc $86de			bcc 	_NCCompRev 					; use if step is +ve
.86dc	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86de					_NCCompRev:
.86de	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86e0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e2	85 39		sta $39				sta 	zTemp1+1
.86e4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e6	38		sec				sec
.86e7					_NCCompare:
.86e7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e9	b1 34		lda ($34),y			lda 	(basicStack),y
.86eb	a4 39		ldy $39				ldy 	zTemp1+1
.86ed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ef	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86f1	e6 39		inc $39				inc 	zTemp1+1
.86f3	ca		dex				dex 								; do it 4 times.
.86f4	d0 f1		bne $86e7			bne 	_NCCompare
.86f6	50 02		bvc $86fa			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f8	49 80		eor #$80			eor 	#$80
.86fa					_NCNoOverflow:
.86fa	7a		ply				ply 								; restore Y position
.86fb	0a		asl a				asl 	a 							; is bit 7 set.
.86fc	90 04		bcc $8702			bcc 	_NCLoopback 				; if no , >= so loop back
.86fe	20 0c 99	jsr $990c			jsr 	StackClose 					; exit the loop
.8701	60		rts				rts
.8702					_NCLoopBack:
.8702	20 43 99	jsr $9943			jsr 	STKLoadCodePosition 		; loop back
.8705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8706					Command_GOSUB:
.8706	a2 00		ldx #$00			ldx 	#0
.8708	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.870b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870d	20 f3 98	jsr $98f3			jsr 	StackOpen 					; create frame
.8710	20 32 99	jsr $9932			jsr 	STKSaveCodePosition 		; save current position
.8713	4c 29 87	jmp $8729			jmp 	GotoStackX
.8716					Command_RETURN:
.8716	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8718	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.871a	20 1a 99	jsr $991a			jsr 	StackCheckFrame
.871d	20 43 99	jsr $9943			jsr 	STKLoadCodePosition 		; restore code position
.8720	20 0c 99	jsr $990c			jsr 	StackClose
.8723	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8724					GotoCommand:
.8724	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8726	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger
.8729					GotoStackX:
.8729	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872c	48		pha				pha 								; it is slightly inefficient, just in cases.
.872d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8730	fa		plx				plx
.8731	20 54 9f	jsr $9f54			jsr 	MemorySearch 				; transfer to line number AX.
.8734	90 05		bcc $873b			bcc 	_GotoError 					; not found, off end.
.8736	d0 03		bne $873b			bne 	_GotoError 					; not found exactly
.8738	4c 64 8a	jmp $8a64			jmp 	RunNewLine 					; and go straight to new line code.
.873b					_GotoError:
.873b	a9 0d		lda #$0d		lda	#13
.873d	4c 20 8d	jmp $8d20		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8740					IfCommand:
.8740	a2 00		ldx #$00			ldx 	#0 							; If what.
.8742	20 f4 97	jsr $97f4			jsr 	EvaluateNumber
.8745	b1 30		lda ($30),y			lda 	(codePtr),y
.8747	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8749	d0 0a		bne $8755			bne 	_IFStructured
.874b	c8		iny				iny 								; consume THEN
.874c	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; is it zero
.874f	f0 01		beq $8752			beq 	_IfFail 					; if fail, go to next line
.8751	60		rts				rts 								; if THEN just continue
.8752					_IfFail:
.8752	4c c9 8a	jmp $8ac9			jmp 	EOLCommand
.8755					_IfStructured:
.8755	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; is it zero
.8758	d0 07		bne $8761			bne 	_IfExit 					; if not, then continue normally.
.875a	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.875c	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.875e	20 92 8c	jsr $8c92			jsr 	ScanForward 				; and run from there/
.8761					_IfExit:
.8761	60		rts				rts
.8762					ElseCode:
.8762	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8764	aa		tax				tax 								; so just go to the structure exit
.8765	20 92 8c	jsr $8c92			jsr 	ScanForward
.8768	60		rts				rts
.8769					EndIf:
.8769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.876a					LetCommand:
.876a	a2 00		ldx #$00			ldx 	#0
.876c	b1 30		lda ($30),y			lda 	(codePtr),y
.876e	c9 10		cmp #$10			cmp 	#KWD_AT
.8770	d0 16		bne $8788			bne 	_LCStandard
.8772	c8		iny				iny 								; skip equal
.8773	20 fa 93	jsr $93fa			jsr 	EvaluateTerm 				; get a number
.8776	20 3e 92	jsr $923e			jsr 	Dereference 				; dereference it
.8779	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check integer
.877c	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.877e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8781	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8783	d0 10		bne $8795			bne 	_LCMain
.8785	4c fc a5	jmp $a5fc			jmp 	TypeError 					; was a reference before.
.8788					_LCStandard:
.8788	ad 11 91	lda $9111			lda 	PrecedenceLevel+"*"			; precedence > this
.878b	20 2b 91	jsr $912b			jsr 	EvaluateExpressionAtPrecedence
.878e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8791	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8793	f0 0e		beq $87a3			beq 	_LetGoProc 					; it's a procedure call.
.8795					_LCMain:
.8795	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8797	20 20 a0	jsr $a020			jsr 	CheckNextA
.879a	e8		inx				inx 								; RHS
.879b	20 eb 97	jsr $97eb			jsr 	EvaluateValue
.879e	ca		dex				dex
.879f	20 a6 87	jsr $87a6			jsr 	AssignVariable
.87a2	60		rts				rts
.87a3					_LetGoProc:
.87a3	4c 3f 89	jmp $893f			jmp 	CallProcedure
.87a6					AssignVariable:
.87a6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.87a9	48		pha				pha 								; save a copy
.87aa	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.87ad	29 10		and #$10			and 	#NSBIsString
.87af	d0 0b		bne $87bc			bne 	_ASError
.87b1	68		pla				pla 								; get back
.87b2	29 10		and #$10			and 	#NSBIsString 				; check type
.87b4	d0 03		bne $87b9			bne 	_ASString
.87b6	4c 66 91	jmp $9166			jmp 	AssignNumber
.87b9					_ASString:
.87b9	4c d4 91	jmp $91d4			jmp 	AssignString
.87bc					_ASError:
.87bc	4c fc a5	jmp $a5fc			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87bf					Command_List:
.87bf	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87c2	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87c5	a9 ff		lda #$ff			lda 	#$FF
.87c7	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ca	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87cd	b1 30		lda ($30),y			lda 	(codePtr),y
.87cf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87d1	f0 1e		beq $87f1			beq 	_CLSecond
.87d3	20 4f 88	jsr $884f			jsr 	CLIsDigit 					; if not digit, list all
.87d6	b0 24		bcs $87fc			bcs 	_CLStart
.87d8	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87da	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger
.87dd	b1 30		lda ($30),y			lda 	(codePtr),y
.87df	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87e1	f0 0e		beq $87f1			beq 	_CLSecond 					; if so go get it
.87e3	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87e6	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87e9	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87ec	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87ef	80 0b		bra $87fc			bra 	_CLStart
.87f1					_CLSecond:
.87f1	c8		iny				iny 								; consume comma
.87f2	20 4f 88	jsr $884f			jsr 	CLIsDigit 					; digit found
.87f5	b0 05		bcs $87fc			bcs 	_CLStart 					; if not, continue listing
.87f7	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87f9	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger
.87fc					_CLStart
.87fc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87fe	85 30		sta $30				sta 	codePtr
.8800	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8802	85 31		sta $31				sta 	codePtr+1
.8804					_CLLoop:
.8804	20 a0 a8	jsr $a8a0			jsr 	EXTBreakCheck 				; break check
.8807	f0 30		beq $8839			beq 	_CLExit
.8809	b2 30		lda ($30)			lda 	(codePtr)
.880b	f0 2c		beq $8839			beq 	_CLExit
.880d	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.880f	20 3c 88	jsr $883c			jsr 	CLCompareLineNo
.8812	90 18		bcc $882c			bcc 	_CLNext
.8814	a2 07		ldx #$07			ldx 	#7
.8816	20 3c 88	jsr $883c			jsr 	CLCompareLineNo
.8819	f0 02		beq $881d			beq 	_CLDoThisOne
.881b	b0 0f		bcs $882c			bcs 	_CLNext
.881d					_CLDoThisOne:
.881d	20 ee 8a	jsr $8aee			jsr 	ListConvertLine 			; convert line into token Buffer
.8820	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8822	a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8824	20 79 8d	jsr $8d79			jsr 	PrintStringXA
.8827	a9 0d		lda #$0d			lda 	#13 						; new line
.8829	20 5f a8	jsr $a85f			jsr 	EXTPrintCharacter
.882c					_CLNext:
.882c	18		clc				clc
.882d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.882f	65 30		adc $30				adc 	codePtr
.8831	85 30		sta $30				sta 	codePtr
.8833	90 02		bcc $8837			bcc 	_CREExit
.8835	e6 31		inc $31				inc 	codePtr+1
.8837					_CREExit:
.8837	80 cb		bra $8804			bra 	_CLLoop
.8839					_CLExit:
.8839	4c 69 84	jmp $8469			jmp 	WarmStart
.883c					CLCompareLineNo:
.883c	38		sec				sec
.883d	a0 01		ldy #$01			ldy 	#1
.883f	b1 30		lda ($30),y			lda 	(codePtr),y
.8841	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8844	85 36		sta $36				sta 	zTemp0
.8846	c8		iny				iny
.8847	b1 30		lda ($30),y			lda 	(codePtr),y
.8849	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.884c	05 36		ora $36				ora 	zTemp0
.884e	60		rts				rts
.884f					CLIsDigit:
.884f	b1 30		lda ($30),y			lda 	(codePtr),y
.8851	c9 30		cmp #$30			cmp 	#"0"
.8853	90 03		bcc $8858			bcc	 	_CLIDExitFalse
.8855	c9 3a		cmp #$3a			cmp 	#"9"+1
.8857	60		rts				rts
.8858					_CLIDExitFalse:
.8858	38		sec				sec
.8859	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.885a					Command_LOCAL:
.885a	a2 00		ldx #$00			ldx 	#0 							; at level 0
.885c	20 68 88	jsr $8868			jsr 	LocaliseNextTerm 			; convert term to a local.
.885f	b1 30		lda ($30),y			lda 	(codePtr),y
.8861	c8		iny				iny
.8862	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8864	f0 f4		beq $885a			beq 	Command_LOCAL
.8866	88		dey				dey 								; unpick pre-get
.8867	60		rts				rts
.8868					LocaliseNextTerm:
.8868	20 fa 93	jsr $93fa			jsr 	EvaluateTerm 				; evaluate the term
.886b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.886e	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8870	f0 69		beq $88db			beq		_LNTError
.8872	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8875	85 36		sta $36				sta 	zTemp0
.8877	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.887a	85 37		sta $37				sta  	zTemp0+1
.887c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.887f	29 10		and #$10			and 	#NSBIsString
.8881	d0 22		bne $88a5			bne 	_LNTPushString
.8883	5a		phy				phy
.8884	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8886					_LNTPushNumLoop:
.8886	b1 36		lda ($36),y			lda		(zTemp0),y
.8888	20 dd 98	jsr $98dd			jsr 	StackPushByte
.888b	a9 00		lda #$00			lda 	#0
.888d	91 36		sta ($36),y			sta 	(zTemp0),y
.888f	c8		iny				iny
.8890	c0 05		cpy #$05			cpy 	#5
.8892	d0 f2		bne $8886			bne 	_LNTPushNumLoop
.8894	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8896	20 dd 98	jsr $98dd			jsr 	StackPushByte
.8899	a5 37		lda $37				lda 	zTemp0+1
.889b	20 dd 98	jsr $98dd			jsr 	StackPushByte
.889e	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.88a0	20 dd 98	jsr $98dd			jsr 	StackPushByte
.88a3	7a		ply				ply
.88a4	60		rts				rts
.88a5					_LNTPushString:
.88a5	5a		phy				phy
.88a6	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.88a8	85 38		sta $38				sta 	zTemp1
.88aa	a0 01		ldy #$01			ldy 	#1
.88ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ae	85 39		sta $39				sta 	zTemp1+1
.88b0	a0 00		ldy #$00			ldy 	#0 							; output string
.88b2	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.88b4	f0 0a		beq $88c0			beq 	_LNTStringOut
.88b6					_LNTPushStrLoop:
.88b6	b1 38		lda ($38),y			lda 	(zTemp1),y
.88b8	f0 06		beq $88c0			beq 	_LNTStringOut
.88ba	20 dd 98	jsr $98dd			jsr 	StackPushByte
.88bd	c8		iny				iny
.88be	80 f6		bra $88b6			bra 	_LNTPushStrLoop
.88c0					_LNTStringOut:
.88c0	98		tya				tya									; output length
.88c1	20 dd 98	jsr $98dd			jsr 	StackPushByte
.88c4	a9 00		lda #$00			lda 	#0 							; clear original string.
.88c6	92 38		sta ($38)			sta 	(zTemp1)
.88c8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.88cb	20 dd 98	jsr $98dd			jsr 	StackPushByte
.88ce	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88d1	20 dd 98	jsr $98dd			jsr 	StackPushByte
.88d4	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.88d6	20 dd 98	jsr $98dd			jsr 	StackPushByte
.88d9	7a		ply				ply
.88da	60		rts				rts
.88db					_LNTError:
.88db	4c f2 a5	jmp $a5f2			jmp 	SyntaxError
.9fb7					LocalPopValue:
.9fb7	20 ea 98	jsr $98ea			jsr 	StackPopByte
.9fba	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9fbc	d0 17		bne $9fd5			bne 	_LPVString
.9fbe	20 ea 98	jsr $98ea			jsr 	StackPopByte 				; address
.9fc1	85 37		sta $37				sta 	zTemp0+1
.9fc3	20 ea 98	jsr $98ea			jsr 	StackPopByte
.9fc6	85 36		sta $36				sta 	zTemp0
.9fc8	5a		phy				phy
.9fc9	a0 04		ldy #$04			ldy 	#4 							; copy back
.9fcb					_LPVNumberCopy:
.9fcb	20 ea 98	jsr $98ea			jsr 	StackPopByte
.9fce	91 36		sta ($36),y			sta 	(zTemp0),y
.9fd0	88		dey				dey
.9fd1	10 f8		bpl $9fcb			bpl 	_LPVNumberCopy
.9fd3	7a		ply				ply 								; and complete
.9fd4	60		rts				rts
.9fd5					_LPVString:
.9fd5	20 ea 98	jsr $98ea			jsr 	StackPopByte 				; address of record => zTemp0
.9fd8	85 37		sta $37				sta 	zTemp0+1
.9fda	20 ea 98	jsr $98ea			jsr 	StackPopByte
.9fdd	85 36		sta $36				sta 	zTemp0
.9fdf	5a		phy				phy
.9fe0	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.9fe2	85 38		sta $38				sta 	zTemp1
.9fe4	a0 01		ldy #$01			ldy 	#1
.9fe6	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fe8	85 39		sta $39				sta 	zTemp1+1
.9fea	20 ea 98	jsr $98ea			jsr 	StackPopByte 				; # to get => y
.9fed	a8		tay				tay
.9fee	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9ff0	f0 0e		beq $a000			beq 	_LPVStringCopied
.9ff2	a9 00		lda #$00			lda 	#0 							; NULL on end
.9ff4	91 38		sta ($38),y			sta 	(zTemp1),y
.9ff6					_LPVStringCopy:
.9ff6	88		dey				dey
.9ff7	30 07		bmi $a000			bmi 	_LPVStringCopied
.9ff9	20 ea 98	jsr $98ea			jsr 	StackPopByte
.9ffc	91 38		sta ($38),y			sta 	(zTemp1),y
.9ffe	80 f6		bra $9ff6			bra 	_LPVStringCopy
.a000					_LPVStringCopied:
.a000	fa		plx				plx
.a001	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.88de					NewCommand:
.88de	20 32 9f	jsr $9f32			jsr 	MemoryNew
.88e1	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.88e4	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear everything.
.88e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.88e8					Command_Print:
.88e8	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.88e9					_CPLoop:
.88e9	08		php				php 								; save last action flag
.88ea	b1 30		lda ($30),y			lda 	(codePtr),y
.88ec	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.88ee	f0 46		beq $8936			beq 	_CPExit
.88f0	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88f2	f0 42		beq $8936			beq 	_CPExit
.88f4	68		pla				pla 								; throw last action flag
.88f5	b1 30		lda ($30),y			lda 	(codePtr),y
.88f7	c8		iny				iny
.88f8	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88fa	f0 37		beq $8933			beq 	_CPContinueWithSameLine
.88fc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88fe	f0 2e		beq $892e			beq 	_CPTab
.8900	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8902	f0 26		beq $892a			beq 	_CPNewLine
.8904	88		dey				dey 								; undo the get.
.8905	a2 00		ldx #$00			ldx 	#0
.8907	20 eb 97	jsr $97eb			jsr 	EvaluateValue 				; get a value into slot 0
.890a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.890d	29 10		and #$10			and 	#NSBIsString
.890f	f0 0b		beq $891c			beq 	_CPNumber
.8911	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8914	ad 08 06	lda $0608			lda 	NSMantissa0
.8917	20 79 8d	jsr $8d79			jsr 	PrintStringXA
.891a	80 cc		bra $88e8			bra 	Command_Print 				; loop round clearing carry so NL if end
.891c					_CPNumber:
.891c	a9 05		lda #$05			lda 	#5 							; maximum decimals
.891e	20 c1 96	jsr $96c1			jsr 	ConvertNumberToString 		; convert to string
.8921	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8923	a9 99		lda #$99			lda 	#DecimalBuffer & $FF
.8925	20 79 8d	jsr $8d79			jsr 	PrintStringXA
.8928	80 be		bra $88e8			bra 	Command_Print 				; loop round clearing carry so NL if end
.892a					_CPNewLine:
.892a	a9 0d		lda #$0d			lda 	#13
.892c	80 02		bra $8930			bra 	_CPPrintChar
.892e					_CPTab:
.892e	a9 09		lda #$09			lda 	#9 							; print TAB
.8930					_CPPrintChar:
.8930	20 5f a8	jsr $a85f			jsr 	EXTPrintCharacter
.8933					_CPContinueWithSameLine:
.8933	38		sec				sec 								; loop round with carry set, which
.8934	80 b3		bra $88e9			bra 	_CPLoop 					; will inhibit final CR
.8936					_CPExit:
.8936	28		plp				plp 								; get last action flag
.8937	b0 05		bcs $893e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8939	a9 0d		lda #$0d			lda 	#13 						; print new line
.893b	20 5f a8	jsr $a85f			jsr 	EXTPrintCharacter
.893e					_CPExit2:
.893e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.893f					CallProcedure:
.893f	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8941	b1 30		lda ($30),y			lda 	(codePtr),y
.8943	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8945	f0 0c		beq $8953			beq 	_CPEndParam
.8947					_CPParamLoop:
.8947	20 29 91	jsr $9129			jsr 	EvaluateExpression 			; get parameter onto stack
.894a	e8		inx				inx 								; bump next stack
.894b	b1 30		lda ($30),y			lda 	(codePtr),y
.894d	c8		iny				iny
.894e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8950	f0 f5		beq $8947			beq 	_CPParamLoop
.8952	88		dey				dey 								; unpick.
.8953					_CPEndParam:
.8953	8e 16 07	stx $0716			stx 	LastParameter 				; save the last parameters index.
.8956	c8		iny				iny									; skip right bracket
.8957	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8959	20 f3 98	jsr $98f3			jsr 	StackOpen
.895c	20 32 99	jsr $9932			jsr 	STKSaveCodePosition 		; save loop position
.895f	ad 08 06	lda $0608			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8962	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8964	ad 10 06	lda $0610			lda 	NSMantissa1
.8967	85 37		sta $37				sta 	zTemp0+1
.8969	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.896b	b2 36		lda ($36)			lda 	(zTemp0)
.896d	85 30		sta $30				sta 	safePtr
.896f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8971	85 31		sta $31				sta 	safePtr+1
.8973	c8		iny				iny
.8974	b1 36		lda ($36),y			lda 	(zTemp0),y
.8976	85 32		sta $32				sta 	safePtr+2
.8978	c8		iny				iny
.8979	b1 36		lda ($36),y			lda 	(zTemp0),y
.897b	85 33		sta $33				sta 	safePtr+3
.897d	c8		iny				iny 								; get Y offset -> Y
.897e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8980	a8		tay				tay
.8981	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8983	ec 16 07	cpx $0716			cpx	 	LastParameter 				; check no parameters at the start
.8986	f0 13		beq $899b			beq 	_ParamExit 					; if so, exit.
.8988					_ParamExtract:
.8988	ca		dex				dex 								; put a local term on the level before
.8989	20 68 88	jsr $8868			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.898c	20 a6 87	jsr $87a6			jsr 	AssignVariable 				; assign stacked value to the variable.
.898f	e8		inx				inx 								; advance to next parameter to do.
.8990	e8		inx				inx
.8991	ec 16 07	cpx $0716			cpx 	LastParameter 				; are we done ?
.8994	f0 05		beq $899b			beq 	_ParamExit
.8996	20 18 a0	jsr $a018			jsr 	CheckComma 					; comma seperating parameters
.8999	80 ed		bra $8988			bra 	_ParamExtract
.899b					_ParamExit:
.899b	20 10 a0	jsr $a010			jsr 	CheckRightBracket 			; check )
.899e	60		rts				rts 								; and continue from here
.a002					Command_ENDPROC:
.a002	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a004	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a006	20 1a 99	jsr $991a			jsr 	StackCheckFrame
.a009	20 43 99	jsr $9943			jsr 	STKLoadCodePosition 		; restore code position
.a00c	20 0c 99	jsr $990c			jsr 	StackClose
.a00f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.899f					Command_Read:
.899f	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.89a1	20 fa 93	jsr $93fa			jsr 	EvaluateTerm
.89a4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.89a7	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.89a9	f0 4a		beq $89f5			beq 	_CRSyntax 					; check reference (bit 0)
.89ab	20 3e 8a	jsr $8a3e			jsr 	SwapDataCodePtrs 			; swap code and data
.89ae	ad 1c 07	lda $071c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.89b1	d0 20		bne $89d3			bne 	_CRContinueData
.89b3					_CRKeepSearching:
.89b3	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.89b5	aa		tax				tax
.89b6	20 92 8c	jsr $8c92			jsr 	ScanForward
.89b9	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.89bb	f0 16		beq $89d3			beq 	_CRHaveData 				; found it
.89bd	18		clc				clc
.89be	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89c0	65 30		adc $30				adc 	codePtr
.89c2	85 30		sta $30				sta 	codePtr
.89c4	90 02		bcc $89c8			bcc 	_CREExit
.89c6	e6 31		inc $31				inc 	codePtr+1
.89c8					_CREExit:
.89c8	a0 03		ldy #$03			ldy 	#3 							; start of line.
.89ca	b2 30		lda ($30)			lda 	(codePtr)
.89cc	d0 e5		bne $89b3			bne 	_CRKeepSearching
.89ce	a9 0b		lda #$0b		lda	#11
.89d0	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.89d3					_CRHaveData:
.89d3					_CRContinueData:
.89d3	a2 01		ldx #$01			ldx 	#1
.89d5	20 eb 97	jsr $97eb			jsr 	EvaluateValue 				; evaluate value into slot # 1
.89d8	ca		dex				dex
.89d9	20 a6 87	jsr $87a6			jsr		AssignVariable 				; do the assignment
.89dc	9c 1c 07	stz $071c			stz 	inDataStatement 			; clear in data
.89df	b1 30		lda ($30),y			lda 	(codePtr),y
.89e1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.89e3	d0 04		bne $89e9			bne 	_CRSwapBack
.89e5	c8		iny				iny 								; consume comma
.89e6	ee 1c 07	inc $071c			inc 	inDataStatement 			; set in data statement currently.
.89e9					_CRSwapBack:
.89e9	20 3e 8a	jsr $8a3e			jsr 	SwapDataCodePtrs			; swap them back.
.89ec	b1 30		lda ($30),y			lda 	(codePtr),y
.89ee	c8		iny				iny
.89ef	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89f1	f0 ac		beq $899f			beq 	Command_Read 				; if so go round again.
.89f3	88		dey				dey 								; unpick get.
.89f4	60		rts				rts
.89f5					_CRSyntax:
.89f5	4c f2 a5	jmp $a5f2			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.89f8					RemCommand:
.89f8	b1 30		lda ($30),y			lda 	(codePtr),y
.89fa	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.89fc	d0 06		bne $8a04			bne 	_RMExit
.89fe	c8		iny				iny
.89ff	98		tya				tya
.8a00	38		sec				sec
.8a01	71 30		adc ($30),y			adc 	(codePtr),y
.8a03	a8		tay				tay
.8a04					_RMExit:
.8a04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8a05					Command_REPEAT:
.8a05	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8a07	20 f3 98	jsr $98f3			jsr 	StackOpen
.8a0a	20 32 99	jsr $9932			jsr 	STKSaveCodePosition 		; save loop position
.8a0d	60		rts				rts
.8a0e					Command_UNTIL:
.8a0e	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8a10	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8a12	20 1a 99	jsr $991a			jsr 	StackCheckFrame
.8a15	a2 00		ldx #$00			ldx 	#0
.8a17	20 f4 97	jsr $97f4			jsr 	EvaluateNumber 				; work out the number
.8a1a	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; check if zero
.8a1d	f0 04		beq $8a23			beq 	_CULoopBack 				; if so keep looping
.8a1f	20 0c 99	jsr $990c			jsr 	StackClose		 			; return
.8a22	60		rts				rts
.8a23					_CULoopBack:
.8a23	20 43 99	jsr $9943			jsr 	STKLoadCodePosition 		; loop back
.8a26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8a27					Command_Restore:
.8a27	20 3e 8a	jsr $8a3e			jsr 	SwapDataCodePtrs 			; swap code and data
.8a2a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a2c	85 30		sta $30				sta 	codePtr
.8a2e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a30	85 31		sta $31				sta 	codePtr+1
.8a32	20 3e 8a	jsr $8a3e			jsr 	SwapDataCodePtrs 			; put them back
.8a35	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8a37	8d 1b 07	sta $071b			sta 	dataPointer+4
.8a3a	9c 1c 07	stz $071c			stz 	inDataStatement 			; not in data statement
.8a3d	60		rts				rts
.8a3e					SwapDataCodePtrs:
.8a3e	da		phx				phx
.8a3f	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8a41					_SDCPLoop:
.8a41	b5 30		lda $30,x			lda 	safePtr,x
.8a43	48		pha				pha
.8a44	bd 17 07	lda $0717,x			lda 	dataPointer,x
.8a47	95 30		sta $30,x			sta 	safePtr,x
.8a49	68		pla				pla
.8a4a	9d 17 07	sta $0717,x			sta 	dataPointer,x
.8a4d	ca		dex				dex
.8a4e	10 f1		bpl $8a41			bpl 	_SDCPLoop
.8a50	ad 1b 07	lda $071b			lda 	dataPointer+4 				; swap Y position over.
.8a53	8c 1b 07	sty $071b			sty 	dataPointer+4
.8a56	a8		tay				tay
.8a57	fa		plx				plx
.8a58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8a59					CommandRUN:
.8a59	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8a5c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a5e	85 30		sta $30				sta 	codePtr
.8a60	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a62	85 31		sta $31				sta 	codePtr+1
.8a64					RUNNewLine:
.8a64	b2 30		lda ($30)			lda 	(codePtr)
.8a66	f0 5e		beq $8ac6			beq 	CRNoProgram         		; no then END.
.8a68	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a6a	9a		txs				txs
.8a6b					RUNCodePointerLine:
.8a6b	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a6d					_CRIncMainLoop:
.8a6d	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8a70	d0 05		bne $8a77			bne 	_CRNoBreakCheck
.8a72	20 a0 a8	jsr $a8a0			jsr 	EXTBreakCheck 				; break check
.8a75	f0 4a		beq $8ac1			beq 	_CRBreak
.8a77					_CRNoBreakCheck:
.8a77	c8		iny				iny
.8a78					_CRMainLoop:
.8a78	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a7b	b1 30		lda ($30),y			lda 	(codePtr),y
.8a7d	10 10		bpl $8a8f			bpl 	_CRNotKeyword
.8a7f	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a81	b0 04		bcs $8a87			bcs 	_CRIsKeyword
.8a83	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a85	b0 34		bcs $8abb			bcs		_CRSyntaxError
.8a87					_CRIsKeyword:
.8a87	c8		iny				iny 								; consume command
.8a88	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a89	aa		tax				tax 								; put in X for vector jump
.8a8a	20 be 8a	jsr $8abe			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a8d	80 e9		bra $8a78			bra 	_CRMainLoop 				; and loop round
.8a8f					_CRNotKeyword:
.8a8f	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a91	f0 da		beq $8a6d			beq 	_CRIncMainLoop
.8a93	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a95	90 05		bcc $8a9c			bcc 	_CRNotVariable
.8a97					_CRGoLet:
.8a97	20 6a 87	jsr $876a			jsr 	LetCommand
.8a9a	80 dc		bra $8a78			bra 	_CRMainLoop
.8a9c					_CRNotVariable:
.8a9c	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a9e	f0 f7		beq $8a97			beq 	_CRGoLet
.8aa0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8aa2	f0 f3		beq $8a97			beq 	_CRGoLet
.8aa4	c9 21		cmp #$21			cmp 	#KWD_PLING
.8aa6	f0 ef		beq $8a97			beq 	_CRGoLet
.8aa8	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8aaa	f0 09		beq $8ab5			beq 	_CRGoRem
.8aac	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8aae	d0 0b		bne $8abb			bne 	_CRSyntaxError
.8ab0	20 a2 83	jsr $83a2			jsr 	LabelHere
.8ab3	80 c3		bra $8a78			bra 	_CRMainLoop
.8ab5					_CRGoRem:
.8ab5	c8		iny				iny
.8ab6	20 f8 89	jsr $89f8			jsr 	RemCommand
.8ab9	80 bd		bra $8a78			bra 	_CRMainLoop
.8abb					_CRSyntaxError:
.8abb	4c f2 a5	jmp $a5f2			jmp 	SyntaxError
.8abe					_CRCallVector0:
.8abe	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x)
.8ac1					_CRBreak:
.8ac1	a9 01		lda #$01		lda	#1
.8ac3	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.8ac6					CRNoProgram:
.8ac6	4c f0 85	jmp $85f0			jmp 	EndCommand
.8ac9					EOLCommand:
.8ac9	18		clc				clc
.8aca	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8acc	65 30		adc $30				adc 	codePtr
.8ace	85 30		sta $30				sta 	codePtr
.8ad0	90 02		bcc $8ad4			bcc 	_CREExit
.8ad2	e6 31		inc $31				inc 	codePtr+1
.8ad4					_CREExit:
.8ad4	80 8e		bra $8a64			bra 	RunNewLine
.8ad6					Shift1Command:
.8ad6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad8	c8		iny				iny
.8ad9	0a		asl a				asl 	a
.8ada	aa		tax				tax
.8adb	7c 5e 81	jmp ($815e,x)			jmp 	(VectorSet1,x)
.8ade					Shift2Command:
.8ade	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae0	c8		iny				iny
.8ae1	0a		asl a				asl 	a
.8ae2	aa		tax				tax
.8ae3	7c 76 81	jmp ($8176,x)			jmp 	(VectorSet2,x)
.8ae6					Unused1:
.8ae6					Unused2:
.8ae6					Unused3:
.8ae6					Unused4:
.8ae6	4c f2 a5	jmp $a5f2			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8ae9					StopCommand:
.8ae9	a9 08		lda #$08		lda	#8
.8aeb	4c 20 8d	jmp $8d20		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8aee					ListConvertLine:
.8aee	9c 1d 07	stz $071d			stz 	tbOffset
.8af1	9c 29 07	stz $0729			stz 	tokenBuffer
.8af4	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8af6	b1 30		lda ($30),y			lda 	(codePtr),y
.8af8	aa		tax				tax
.8af9	88		dey				dey
.8afa	b1 30		lda ($30),y			lda 	(codePtr),y
.8afc	20 6c a1	jsr $a16c			jsr 	ConvertInt16
.8aff	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8b01	86 37		stx $37				stx 	zTemp0+1
.8b03	a0 00		ldy #$00			ldy 	#0
.8b05					_LCCopyNumber:
.8b05	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b07	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8b0a	c8		iny				iny
.8b0b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b0d	d0 f6		bne $8b05			bne 	_LCCopyNumber
.8b0f					_LCPadOut:
.8b0f	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8b11	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8b14	ad 1d 07	lda $071d			lda 	tbOffset
.8b17	c9 06		cmp #$06			cmp 	#6
.8b19	d0 f4		bne $8b0f			bne 	_LCPadOut
.8b1b	a0 03		ldy #$03			ldy 	#3 							; start position.
.8b1d					_LCMainLoop:
.8b1d	b1 30		lda ($30),y			lda 	(codePtr),y
.8b1f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8b21	f0 17		beq $8b3a			beq 	_LCExit
.8b23	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8b25	90 14		bcc $8b3b			bcc 	_LCDoubles
.8b27	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8b29	90 20		bcc $8b4b			bcc 	_LCShiftPunc
.8b2b	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8b2d	90 2b		bcc $8b5a			bcc 	_LCPunctuation
.8b2f	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8b31	90 2d		bcc $8b60			bcc 	_LCIdentifiers
.8b33	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8b35	90 49		bcc $8b80			bcc 	_LCTokens
.8b37	4c db 8b	jmp $8bdb			jmp 	_LCData 					; 254-5 are data objects
.8b3a					_LCExit:
.8b3a	60		rts				rts
.8b3b					_LCDoubles:
.8b3b	48		pha				pha
.8b3c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8b3d	29 02		and #$02			and 	#2
.8b3f	09 3c		ora #$3c			ora 	#60 						; make < >
.8b41	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8b44	68		pla				pla 								; restore, do lower bit
.8b45	29 03		and #$03			and 	#3
.8b47	09 3c		ora #$3c			ora 	#60
.8b49	80 0f		bra $8b5a			bra		_LCPunctuation 				; print, increment, loop
.8b4b					_LCShiftPunc:
.8b4b	aa		tax				tax 								; save in X
.8b4c	29 07		and #$07			and 	#7 							; lower 3 bits
.8b4e	f0 02		beq $8b52			beq 	_LCNoAdd
.8b50	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8b52					_LCNoAdd:
.8b52	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8b54	90 02		bcc $8b58			bcc 	_LCNoAdd2
.8b56	09 20		ora #$20			ora 	#32 						; adds $20
.8b58					_LCNoAdd2:
.8b58	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8b5a					_LCPunctuation:
.8b5a	c8		iny				iny 								; consume character
.8b5b	20 07 8c	jsr $8c07			jsr 	LCLWrite 					; write it out.
.8b5e	80 bd		bra $8b1d			bra 	_LCMainLoop 				; go round again.
.8b60					_LCIdentifiers:
.8b60	18		clc				clc 								; convert to physical address
.8b61	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b63	85 37		sta $37				sta 	zTemp0+1
.8b65	c8		iny				iny
.8b66	b1 30		lda ($30),y			lda 	(codePtr),y
.8b68	85 36		sta $36				sta 	zTemp0
.8b6a	c8		iny				iny
.8b6b	5a		phy				phy 								; save position
.8b6c	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8b6e					_LCOutIdentifier:
.8b6e	c8		iny				iny
.8b6f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b71	29 7f		and #$7f			and 	#$7F
.8b73	20 35 8c	jsr $8c35			jsr 	LCLLowerCase
.8b76	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8b79	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8b7b	10 f1		bpl $8b6e			bpl 	_LCOutIdentifier
.8b7d	7a		ply				ply 								; restore position
.8b7e	80 9d		bra $8b1d			bra 	_LCMainLoop
.8b80					_LCTokens:
.8b80	aa		tax				tax 								; token in X
.8b81	a9 6c		lda #$6c			lda 	#((KeywordSet2) & $FF)
.8b83	85 36		sta $36				sta 	0+zTemp0
.8b85	a9 9b		lda #$9b			lda 	#((KeywordSet2) >> 8)
.8b87	85 37		sta $37				sta 	1+zTemp0
.8b89	e0 82		cpx #$82			cpx 	#$82
.8b8b	f0 16		beq $8ba3			beq 	_LCUseShift
.8b8d	a9 28		lda #$28			lda 	#((KeywordSet1) & $FF)
.8b8f	85 36		sta $36				sta 	0+zTemp0
.8b91	a9 9b		lda #$9b			lda 	#((KeywordSet1) >> 8)
.8b93	85 37		sta $37				sta 	1+zTemp0
.8b95	e0 81		cpx #$81			cpx 	#$81
.8b97	f0 0a		beq $8ba3			beq 	_LCUseShift
.8b99	a9 f6		lda #$f6			lda 	#((KeywordSet0) & $FF)
.8b9b	85 36		sta $36				sta 	0+zTemp0
.8b9d	a9 99		lda #$99			lda 	#((KeywordSet0) >> 8)
.8b9f	85 37		sta $37				sta 	1+zTemp0
.8ba1	80 01		bra $8ba4			bra 	_LCNoShift
.8ba3					_LCUseShift:
.8ba3	c8		iny				iny
.8ba4					_LCNoShift:
.8ba4	20 16 8c	jsr $8c16			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8ba7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba9	aa		tax				tax 								; into X
.8baa					_LCFindText:
.8baa	ca		dex				dex
.8bab	10 0e		bpl $8bbb			bpl 	_LCFoundText 				; found text.
.8bad	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8baf	1a		inc a				inc 	a 							; one extra for size
.8bb0	38		sec				sec 								; one extra for checksum
.8bb1	65 36		adc $36				adc 	zTemp0 						; go to next token
.8bb3	85 36		sta $36				sta 	zTemp0
.8bb5	90 f3		bcc $8baa			bcc 	_LCFindText
.8bb7	e6 37		inc $37				inc 	zTemp0+1
.8bb9	80 ef		bra $8baa			bra 	_LCFindText
.8bbb					_LCFoundText:
.8bbb	5a		phy				phy 								; save List position
.8bbc	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8bbe	aa		tax				tax
.8bbf	a0 02		ldy #$02			ldy 	#2
.8bc1					_LCCopyToken:
.8bc1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bc3	20 35 8c	jsr $8c35			jsr 	LCLLowerCase
.8bc6	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8bc9	c8		iny				iny
.8bca	ca		dex				dex
.8bcb	d0 f4		bne $8bc1			bne 	_LCCopyToken
.8bcd	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8bcf	f0 05		beq $8bd6			beq 	_LCNoSpace
.8bd1	a9 20		lda #$20			lda 	#' '
.8bd3	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8bd6					_LCNoSpace:
.8bd6	7a		ply				ply 								; restore position.
.8bd7	c8		iny				iny 								; consume token
.8bd8	4c 1d 8b	jmp $8b1d			jmp 	_LCMainLoop 				; and go around again.
.8bdb					_LCData:
.8bdb	48		pha				pha 								; save type $FE/$FF
.8bdc	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8bde	c9 fe		cmp #$fe			cmp 	#$FE
.8be0	f0 02		beq $8be4			beq 	_LCHaveOpener
.8be2	a2 22		ldx #$22			ldx 	#'"'
.8be4					_LCHaveOpener:
.8be4	8a		txa				txa 								; output prefix (# or ")
.8be5	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8be8	c8		iny				iny 								; get count
.8be9	b1 30		lda ($30),y			lda 	(codePtr),y
.8beb	aa		tax				tax
.8bec	c8		iny				iny 								; point at first character
.8bed					_LCOutData:
.8bed	b1 30		lda ($30),y			lda 	(codePtr),y
.8bef	c9 00		cmp #$00			cmp 	#0
.8bf1	f0 03		beq $8bf6			beq 	_LCNoPrint
.8bf3	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8bf6					_LCNoPrint:
.8bf6	c8		iny				iny
.8bf7	ca		dex				dex
.8bf8	d0 f3		bne $8bed			bne 	_LCOutData
.8bfa	68		pla				pla 								; closing " required ?
.8bfb	c9 ff		cmp #$ff			cmp 	#$FF
.8bfd	d0 05		bne $8c04			bne 	_LCNoQuote
.8bff	a9 22		lda #$22			lda 	#'"'
.8c01	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8c04					_LCNoQuote:
.8c04	4c 1d 8b	jmp $8b1d			jmp 	_LCMainLoop
.8c07					LCLWrite:
.8c07	da		phx				phx
.8c08	ae 1d 07	ldx $071d			ldx 	tbOffset
.8c0b	9d 29 07	sta $0729,x			sta 	tokenBuffer,x
.8c0e	9e 2a 07	stz $072a,x			stz 	tokenBuffer+1,x
.8c11	ee 1d 07	inc $071d			inc 	tbOffset
.8c14	fa		plx				plx
.8c15	60		rts				rts
.8c16					LCCheckSpaceRequired:
.8c16	ae 1d 07	ldx $071d			ldx 	tbOffset
.8c19	bd 28 07	lda $0728,x			lda 	tokenBuffer-1,x 			; previous character
.8c1c	20 35 8c	jsr $8c35			jsr 	LCLLowerCase 				; saves a little effort
.8c1f	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8c21	90 11		bcc $8c34			bcc 	_LCCSRExit
.8c23	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c25	90 08		bcc $8c2f			bcc 	_LCCSRSpace
.8c27	c9 61		cmp #$61			cmp 	#"a"
.8c29	90 09		bcc $8c34			bcc 	_LCCSRExit
.8c2b	c9 7b		cmp #$7b			cmp 	#"z"+1
.8c2d	b0 05		bcs $8c34			bcs 	_LCCSRExit
.8c2f					_LCCSRSpace:
.8c2f	a9 20		lda #$20			lda 	#' '
.8c31	20 07 8c	jsr $8c07			jsr 	LCLWrite
.8c34					_LCCSRExit:
.8c34	60		rts				rts
.8c35					LCLLowerCase:
.8c35	c9 41		cmp #$41			cmp 	#"A"
.8c37	90 06		bcc $8c3f			bcc 	_LCLLCOut
.8c39	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8c3b	b0 02		bcs $8c3f			bcs 	_LCLLCOut
.8c3d	69 20		adc #$20			adc 	#$20
.8c3f					_LCLLCOut:
.8c3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c40					ProcedureScan:
.8c40	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c42	85 30		sta $30				sta 	codePtr
.8c44	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c46	85 31		sta $31				sta 	codePtr+1
.8c48					_PSLoop:
.8c48	b2 30		lda ($30)			lda 	(codePtr)
.8c4a	f0 42		beq $8c8e			beq 	_PSExit
.8c4c	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c50	c9 99		cmp #$99			cmp 	#KWD_PROC
.8c52	d0 2d		bne $8c81			bne 	_PSNext
.8c54	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c55	b1 30		lda ($30),y			lda 	(codePtr),y
.8c57	29 c0		and #$c0			and 	#$C0
.8c59	c9 40		cmp #$40			cmp 	#$40
.8c5b	d0 32		bne $8c8f			bne 	_PSSyntax
.8c5d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5f	18		clc				clc
.8c60	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c62	85 37		sta $37				sta 	zTemp0+1
.8c64	c8		iny				iny 								; LSB
.8c65	b1 30		lda ($30),y			lda 	(codePtr),y
.8c67	85 36		sta $36				sta 	zTemp0
.8c69	c8		iny				iny 								; character after variable call.
.8c6a	98		tya				tya 								; save Y offset at +7
.8c6b	a0 07		ldy #$07			ldy 	#7
.8c6d	91 36		sta ($36),y			sta 	(zTemp0),y
.8c6f	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c71	a0 02		ldy #$02			ldy 	#2
.8c73	91 36		sta ($36),y			sta 	(zTemp0),y
.8c75	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c77					_PSCopy:
.8c77	b5 30		lda $30,x			lda 	safePtr,x
.8c79	c8		iny				iny
.8c7a	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7c	e8		inx				inx
.8c7d	e0 04		cpx #$04			cpx 	#4
.8c7f	d0 f6		bne $8c77			bne 	_PSCopy
.8c81					_PSNext:
.8c81	18		clc				clc
.8c82	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c84	65 30		adc $30				adc 	codePtr
.8c86	85 30		sta $30				sta 	codePtr
.8c88	90 02		bcc $8c8c			bcc 	_CREExit
.8c8a	e6 31		inc $31				inc 	codePtr+1
.8c8c					_CREExit:
.8c8c	80 ba		bra $8c48			bra 	_PSLoop
.8c8e					_PSExit:
.8c8e	60		rts				rts
.8c8f					_PSSyntax:
.8c8f	4c f2 a5	jmp $a5f2			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c92					ScanForward:
.8c92	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c94	86 37		stx $37				stx 	zTemp0+1
.8c96	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c98					_ScanLoop:
.8c98	b1 30		lda ($30),y			lda 	(codePtr),y
.8c9a	c8		iny				iny
.8c9b	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c9d	d0 0e		bne $8cad			bne 	_ScanGoNext
.8c9f	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ca1	f0 04		beq $8ca7			beq 	_ScanMatch
.8ca3	c5 37		cmp $37				cmp 	zTemp0+1
.8ca5	d0 06		bne $8cad			bne 	_ScanGoNext
.8ca7					_ScanMatch:
.8ca7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8ca9	d0 01		bne $8cac			bne 	_ScanNotEndEOL
.8cab	88		dey				dey
.8cac					_ScanNotEndEOL:
.8cac	60		rts				rts
.8cad					_ScanGoNext:
.8cad	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8caf	90 e7		bcc $8c98			bcc 	_ScanLoop
.8cb1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8cb3	90 18		bcc $8ccd			bcc 	_ScanSkipOne
.8cb5	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8cb7	b0 2f		bcs $8ce8			bcs 	_ScanSkipData
.8cb9	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cbb	90 db		bcc $8c98			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8cbd	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8cbf	b0 d7		bcs $8c98			bcs 	_ScanLoop
.8cc1	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cc3	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cc5	b0 d1		bcs $8c98			bcs 	_ScanLoop
.8cc7	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cc9	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8ccb	80 cb		bra $8c98			bra 	_ScanLoop
.8ccd					_ScanSkipOne:
.8ccd	c8		iny				iny 								; consume the extra one.
.8cce	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cd0	d0 c6		bne $8c98			bne 	_ScanLoop
.8cd2	18		clc				clc
.8cd3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cd5	65 30		adc $30				adc 	codePtr
.8cd7	85 30		sta $30				sta 	codePtr
.8cd9	90 02		bcc $8cdd			bcc 	_CREExit
.8cdb	e6 31		inc $31				inc 	codePtr+1
.8cdd					_CREExit:
.8cdd	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8cdf	b2 30		lda ($30)			lda 	(codePtr)
.8ce1	d0 b5		bne $8c98			bne 	_ScanLoop 					; if not zero, more to scan
.8ce3	a9 13		lda #$13		lda	#19
.8ce5	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.8ce8					_ScanSkipData:
.8ce8	88		dey				dey 								; point at data token
.8ce9	c8		iny				iny
.8cea	98		tya				tya
.8ceb	38		sec				sec
.8cec	71 30		adc ($30),y			adc 	(codePtr),y
.8cee	a8		tay				tay
.8cef	80 a7		bra $8c98			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cf1					Command_WHILE:
.8cf1	5a		phy				phy 								; save position of the test
.8cf2	a2 00		ldx #$00			ldx 	#0
.8cf4	20 f4 97	jsr $97f4			jsr 	EvaluateNumber 				; work out the number
.8cf7	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; check if zero
.8cfa	f0 0e		beq $8d0a			beq 	_WHExitLoop 				; if so exit the loop
.8cfc	98		tya				tya 								; position *after* test.
.8cfd	7a		ply				ply 								; restore position before test, at WHILE
.8cfe	88		dey				dey
.8cff	48		pha				pha 								; push after test on the stack
.8d00	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d02	20 f3 98	jsr $98f3			jsr 	StackOpen
.8d05	20 32 99	jsr $9932			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d08	7a		ply				ply 								; restore the position *after* the test
.8d09	60		rts				rts
.8d0a					_WHExitLoop:
.8d0a	68		pla				pla 								; throw post loop position
.8d0b	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.8d0d	aa		tax				tax
.8d0e	20 92 8c	jsr $8c92			jsr 	ScanForward
.8d11	60		rts				rts
.8d12					Command_WEND:
.8d12	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d14	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d16	20 1a 99	jsr $991a			jsr 	StackCheckFrame
.8d19	20 43 99	jsr $9943			jsr 	STKLoadCodePosition 		; loop back
.8d1c	20 0c 99	jsr $990c			jsr 	StackClose		 			; erase the frame
.8d1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a010					CheckRightBracket:
.a010	b1 30		lda ($30),y			lda 	(codePtr),y
.a012	c8		iny				iny
.a013	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a015	d0 0f		bne $a026			bne 	CNAFail
.a017	60		rts				rts
.a018					CheckComma:
.a018	b1 30		lda ($30),y			lda 	(codePtr),y
.a01a	c8		iny				iny
.a01b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a01d	d0 07		bne $a026			bne 	CNAFail
.a01f	60		rts				rts
.a020					CheckNextA:
.a020	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a022	d0 02		bne $a026			bne 	CNAFail
.a024	c8		iny				iny 								; skip character
.a025	60		rts				rts 								; and exit
.a026					CNAFail:
.a026	4c f2 a5	jmp $a5f2			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d20					ErrorHandler:
.8d20	a8		tay				tay 								; find the error text
.8d21	f0 49		beq $8d6c			beq 	_EHEnd
.8d23	a2 00		ldx #$00			ldx 	#0
.8d25	a9 0b		lda #$0b			lda 	#((ErrorText) & $FF)
.8d27	85 36		sta $36				sta 	0+zTemp0
.8d29	a9 a6		lda #$a6			lda 	#((ErrorText) >> 8)
.8d2b	85 37		sta $37				sta 	1+zTemp0
.8d2d					_EHFind:
.8d2d	88		dey				dey 								; found the error text ?
.8d2e	f0 0e		beq $8d3e			beq 	_EHFound
.8d30					_EHFindZero:
.8d30	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d32	e6 36		inc $36				inc 	zTemp0
.8d34	d0 02		bne $8d38			bne 	_EHFNoCarry
.8d36	e6 37		inc $37				inc 	zTemp0+1
.8d38					_EHFNoCarry:
.8d38	c9 00		cmp #$00			cmp 	#0
.8d3a	d0 f4		bne $8d30			bne 	_EHFindZero
.8d3c	80 ef		bra $8d2d			bra 	_EHFind
.8d3e					_EHFound:
.8d3e	a5 36		lda $36				lda 	zTemp0 						; print message
.8d40	a6 37		ldx $37				ldx 	zTemp0+1
.8d42	20 79 8d	jsr $8d79			jsr 	PrintStringXA
.8d45	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d47	b1 30		lda ($30),y			lda 	(codePtr),y
.8d49	d0 05		bne $8d50			bne 	_EHAtMsg
.8d4b	c8		iny				iny
.8d4c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d4e	f0 17		beq $8d67			beq 	_EHCREnd
.8d50					_EHAtMsg:
.8d50	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d52	a9 6f		lda #$6f			lda 	#_AtMsg & $FF
.8d54	20 79 8d	jsr $8d79			jsr 	PrintStringXA
.8d57	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d59	b1 30		lda ($30),y			lda 	(codePtr),y
.8d5b	48		pha				pha
.8d5c	c8		iny				iny
.8d5d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d5f	aa		tax				tax
.8d60	68		pla				pla
.8d61	20 6c a1	jsr $a16c			jsr 	ConvertInt16 				; convert XA to string
.8d64	20 79 8d	jsr $8d79			jsr 	PrintStringXA 				; and print it.
.8d67					_EHCREnd:
.8d67	a9 0d		lda #$0d			lda 	#13 						; new line
.8d69	20 5f a8	jsr $a85f			jsr 	EXTPrintCharacter
.8d6c					_EHEnd:
.8d6c	4c 69 84	jmp $8469			jmp 	WarmStart
>8d6f	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d77	20 00
.8d79					PrintStringXA:
.8d79	5a		phy				phy
.8d7a	86 37		stx $37				stx 	zTemp0+1
.8d7c	85 36		sta $36				sta 	zTemp0
.8d7e	a0 00		ldy #$00			ldy 	#0
.8d80					_PSXALoop:
.8d80	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d82	f0 06		beq $8d8a			beq 	_PSXAExit
.8d84	20 5f a8	jsr $a85f			jsr 	EXTPrintCharacter
.8d87	c8		iny				iny
.8d88	80 f6		bra $8d80			bra 	_PSXALoop
.8d8a					_PSXAExit:
.8d8a	7a		ply				ply
.8d8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d8c					UnaryTrue:
.8d8c	fa		plx				plx
.8d8d					ReturnTrue:
.8d8d	a9 01		lda #$01			lda 	#1  						; set to 1
.8d8f	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.8d92	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d94	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d97	60		rts				rts
.8d98					UnaryFalse:
.8d98	fa		plx				plx
.8d99					ReturnFalse:
.8d99	4c a0 98	jmp $98a0			jmp 	NSMSetZero 					; set it all to zero
.8d9c					BinaryCompareEqual:
.8d9c	fa		plx				plx
.8d9d	20 d8 8d	jsr $8dd8			jsr 	CompareBaseCode
.8da0	c9 00		cmp #$00			cmp 	#0
.8da2	f0 e9		beq $8d8d			beq 	ReturnTrue
.8da4	80 f3		bra $8d99			bra 	ReturnFalse
.8da6					BinaryCompareLess:
.8da6	fa		plx				plx
.8da7	20 d8 8d	jsr $8dd8			jsr 	CompareBaseCode
.8daa	c9 ff		cmp #$ff			cmp 	#$FF
.8dac	f0 df		beq $8d8d			beq 	ReturnTrue
.8dae	80 e9		bra $8d99			bra 	ReturnFalse
.8db0					BinaryCompareGreater:
.8db0	fa		plx				plx
.8db1	20 d8 8d	jsr $8dd8			jsr 	CompareBaseCode
.8db4	c9 01		cmp #$01			cmp 	#1
.8db6	f0 d5		beq $8d8d			beq 	ReturnTrue
.8db8	80 df		bra $8d99			bra 	ReturnFalse
.8dba					BinaryCompareNotEqual:
.8dba	fa		plx				plx
.8dbb	20 d8 8d	jsr $8dd8			jsr 	CompareBaseCode
.8dbe	c9 00		cmp #$00			cmp 	#0
.8dc0	d0 cb		bne $8d8d			bne 	ReturnTrue
.8dc2	80 d5		bra $8d99			bra 	ReturnFalse
.8dc4					BinaryCompareLessEqual:
.8dc4	fa		plx				plx
.8dc5	20 d8 8d	jsr $8dd8			jsr 	CompareBaseCode
.8dc8	c9 01		cmp #$01			cmp 	#1
.8dca	d0 c1		bne $8d8d			bne 	ReturnTrue
.8dcc	80 cb		bra $8d99			bra 	ReturnFalse
.8dce					BinaryCompareGreaterEqual:
.8dce	fa		plx				plx
.8dcf	20 d8 8d	jsr $8dd8			jsr 	CompareBaseCode
.8dd2	c9 ff		cmp #$ff			cmp 	#$FF
.8dd4	d0 b7		bne $8d8d			bne 	ReturnTrue
.8dd6	80 c1		bra $8d99			bra 	ReturnFalse
.8dd8					CompareBaseCode:
.8dd8	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; make both values if references.
.8ddb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8dde	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8de1	29 10		and #$10			and 	#NSTString
.8de3	d0 40		bne $8e25			bne 	_CBCString
.8de5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8de8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8deb	d0 3b		bne $8e28			bne 	_CBCFloat
.8ded	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8df0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8df3	29 08		and #$08			and 	#NSTFloat
.8df5	d0 31		bne $8e28			bne 	_CBCFloat
.8df7	20 2b 8e	jsr $8e2b			jsr 	CompareFixMinusZero
.8dfa	e8		inx				inx
.8dfb	20 2b 8e	jsr $8e2b			jsr 	CompareFixMinusZero
.8dfe	ca		dex				dex
.8dff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8e02	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e05	10 0b		bpl $8e12			bpl 	_CDCSameSign
.8e07	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8e0a	30 16		bmi $8e22			bmi 	_CBCLess 					; return $FF
.8e0c					_CBCGreater:
.8e0c	a9 01		lda #$01			lda 	#1
.8e0e	60		rts				rts
.8e0f					_CBCEqual:
.8e0f	a9 00		lda #$00			lda 	#0
.8e11	60		rts				rts
.8e12					_CDCSameSign:
.8e12	20 3b 8f	jsr $8f3b			jsr 	SubTopTwoStack 				; unsigned subtract
.8e15	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; or the mantissa together
.8e18	f0 f5		beq $8e0f			beq 	_CBCEqual 					; -0 == 0
.8e1a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e1d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e20	10 ea		bpl $8e0c			bpl 	_CBCGreater
.8e22					_CBCLess:
.8e22	a9 ff		lda #$ff			lda 	#$FF
.8e24	60		rts				rts
.8e25					_CBCString:
.8e25	4c 91 8e	jmp $8e91			jmp 	CompareStrings
.8e28					_CBCFloat:
.8e28	4c 68 a2	jmp $a268			jmp 	CompareFloat
.8e2b					CompareFixMinusZero:
.8e2b	20 d0 98	jsr $98d0			jsr 	NSMIsZero
.8e2e	d0 03		bne $8e33			bne 	_CFXMZNotZero
.8e30	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e33					_CFXMZNotZero:
.8e33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e34					StringConcat:
.8e34	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8e37	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e3a	29 18		and #$18			and 	#NSBTypeMask
.8e3c	c9 10		cmp #$10			cmp 	#NSTString
.8e3e	d0 4e		bne $8e8e			bne		_SCType
.8e40	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e42	e8		inx				inx
.8e43	20 61 8e	jsr $8e61			jsr 	_SCSetupZ0 					; setup for second
.8e46	20 6c 8e	jsr $8e6c			jsr 	_SCLengthZ0 				; length for second
.8e49	ca		dex				dex
.8e4a	20 61 8e	jsr $8e61			jsr 	_SCSetupZ0 					; setup for first
.8e4d	20 6c 8e	jsr $8e6c			jsr 	_SCLengthZ0 				; length for first
.8e50	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e52	20 12 a8	jsr $a812			jsr 	StringTempAllocate
.8e55	20 7f 8e	jsr $8e7f			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e58	e8		inx				inx
.8e59	20 61 8e	jsr $8e61			jsr 	_SCSetupZ0 					; copy second out
.8e5c	20 7f 8e	jsr $8e7f			jsr 	_SCCopy
.8e5f	ca		dex				dex
.8e60	60		rts				rts
.8e61					_SCSetupZ0:
.8e61	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e64	85 36		sta $36				sta 	zTemp0
.8e66	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e69	85 37		sta $37				sta 	zTemp0+1
.8e6b	60		rts				rts
.8e6c					_SCLengthZ0:
.8e6c	5a		phy				phy
.8e6d	a0 00		ldy #$00			ldy 	#0
.8e6f					_SCLenLoop:
.8e6f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e71	f0 0a		beq $8e7d			beq 	_SCLExit
.8e73	c8		iny				iny
.8e74	e6 38		inc $38				inc 	zTemp1
.8e76	10 f7		bpl $8e6f			bpl		_SCLenLoop
.8e78	a9 09		lda #$09		lda	#9
.8e7a	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.8e7d					_SCLExit:
.8e7d	7a		ply				ply
.8e7e	60		rts				rts
.8e7f					_SCCopy:
.8e7f	5a		phy				phy
.8e80	a0 00		ldy #$00			ldy 	#0
.8e82					_SCCopyLoop:
.8e82	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e84	f0 06		beq $8e8c			beq 	_SCCExit
.8e86	20 50 a8	jsr $a850			jsr 	StringTempWrite
.8e89	c8		iny				iny
.8e8a	80 f6		bra $8e82			bra 	_SCCopyLoop
.8e8c					_SCCExit:
.8e8c	7a		ply				ply
.8e8d	60		rts				rts
.8e8e					_SCType:
.8e8e	4c fc a5	jmp $a5fc			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a029					IntegerDivide:
.a029	fa		plx				plx
.a02a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a02d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a030	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a031	0a		asl a				asl 	a
.a032	10 05		bpl $a039			bpl 	_NotRef
.a034	48		pha				pha
.a035	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a038	68		pla				pla
.a039					_NotRef:
.a039	0a		asl a				asl 	a
.a03a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a03c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a03f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a042	f0 03		beq $a047			beq 	_IntegerCode 				; if clear, then we have two integers
.a044	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.a047					_IntegerCode:
.a047	20 69 a0	jsr $a069			jsr 	CheckDivideZero 			; do div zero check
.a04a	20 a1 a0	jsr $a0a1			jsr 	Int32Divide 				; do the division
.a04d	20 5e a1	jsr $a15e			jsr 	CalculateSign 				; calculate result sign
.a050					NSMCopyPlusTwoToZero:
.a050	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a053	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a056	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.a059	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a05c	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.a05f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a062	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.a065	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a068	60		rts				rts
.a069					CheckDivideZero:
.a069	e8		inx				inx
.a06a	20 d0 98	jsr $98d0			jsr 	NSMIsZero
.a06d	f0 02		beq $a071			beq 	_CDVError
.a06f	ca		dex				dex
.a070	60		rts				rts
.a071					_CDVError:
.a071	a9 03		lda #$03		lda	#3
.a073	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a076					IntegerModulus:
.a076	fa		plx				plx
.a077	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a07a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a07d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a07e	0a		asl a				asl 	a
.a07f	10 05		bpl $a086			bpl 	_NotRef
.a081	48		pha				pha
.a082	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a085	68		pla				pla
.a086					_NotRef:
.a086	0a		asl a				asl 	a
.a087	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a089	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a08c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a08f	f0 03		beq $a094			beq 	_IntegerCode 				; if clear, then we have two integers
.a091	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.a094					_IntegerCode:
.a094	20 69 a0	jsr $a069			jsr 	CheckDivideZero 			; do div zero check
.a097	20 a1 a0	jsr $a0a1			jsr 	Int32Divide 				; do the division
.a09a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a09d	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a0a0	60		rts				rts
.a0a1					Int32Divide:
.a0a1	48		pha				pha 								; save AXY
.a0a2	5a		phy				phy
.a0a3	20 77 98	jsr $9877			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a0a6	20 9c 98	jsr $989c			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a0a9	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a0ab					_I32DivideLoop:
.a0ab	e8		inx				inx
.a0ac	e8		inx				inx
.a0ad	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a0b0	ca		dex				dex
.a0b1	ca		dex				dex
.a0b2	20 b6 98	jsr $98b6			jsr 	NSMRotateLeft
.a0b5	20 e1 a0	jsr $a0e1			jsr 	DivideCheckSubtract 		; check if subtract possible
.a0b8	90 03		bcc $a0bd			bcc 	_I32DivideNoCarryIn
.a0ba	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a0bd					_I32DivideNoCarryIn:
.a0bd	88		dey				dey 								; loop round till division completed.
.a0be	d0 eb		bne $a0ab			bne 	_I32DivideLoop
.a0c0	7a		ply				ply 								; restore AXY and exit
.a0c1	68		pla				pla
.a0c2	60		rts				rts
.a0c3					Int32ShiftDivide:
.a0c3	48		pha				pha 								; save AY
.a0c4	5a		phy				phy
.a0c5	e8		inx				inx 								; clear S[X+2]
.a0c6	e8		inx				inx
.a0c7	20 a0 98	jsr $98a0			jsr 	NSMSetZero
.a0ca	ca		dex				dex
.a0cb	ca		dex				dex
.a0cc	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a0ce					_I32SDLoop:
.a0ce	20 e1 a0	jsr $a0e1			jsr 	DivideCheckSubtract 		; check if subtract possible
.a0d1	e8		inx				inx
.a0d2	e8		inx				inx
.a0d3	20 b6 98	jsr $98b6			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a0d6	ca		dex				dex
.a0d7	ca		dex				dex
.a0d8	20 b6 98	jsr $98b6			jsr 	NSMRotateLeft
.a0db	88		dey				dey 	 							; do 31 times
.a0dc	d0 f0		bne $a0ce			bne 	_I32SDLoop
.a0de	7a		ply				ply 								; restore AY and exit
.a0df	68		pla				pla
.a0e0	60		rts				rts
.a0e1					DivideCheckSubtract:
.a0e1	20 3b 8f	jsr $8f3b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a0e4	b0 04		bcs $a0ea			bcs 	_DCSExit 					; if carry set, then could do, exit
.a0e6	20 15 8f	jsr $8f15			jsr 	AddTopTwoStack 				; add it back in
.a0e9	18		clc				clc 								; and return False
.a0ea					_DCSExit:
.a0ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a0eb					MulInteger:
.a0eb	fa		plx				plx
.a0ec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a0ef	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a0f2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a0f3	0a		asl a				asl 	a
.a0f4	10 05		bpl $a0fb			bpl 	_NotRef
.a0f6	48		pha				pha
.a0f7	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a0fa	68		pla				pla
.a0fb					_NotRef:
.a0fb	0a		asl a				asl 	a 							; put MSB of type into A:7
.a0fc	30 0b		bmi $a109			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a0fe	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a101	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a104	f0 06		beq $a10c			beq 	_IntegerCode 				; if clear, then we have two integers
.a106	4c 3f a3	jmp $a33f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a109					_StringData:
.a109	4c 06 a6	jmp $a606			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a10c					_IntegerCode:
.a10c	20 19 a1	jsr $a119			jsr 	MultiplyShort
.a10f	c9 00		cmp #$00			cmp 	#0
.a111	f0 05		beq $a118			beq 	_MIExit
.a113	a9 04		lda #$04		lda	#4
.a115	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a118					_MIExit:
.a118	60		rts				rts
.a119					MultiplyShort:
.a119	5a		phy				phy 								; save Y
.a11a	20 77 98	jsr $9877			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a11d	20 9c 98	jsr $989c			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a120	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a122					_I32MLoop:
.a122	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a125	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a128	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a12b	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a12e	f0 28		beq $a158			beq 	_I32MExit 					; exit if zero
.a130	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a133	29 01		and #$01			and 	#1
.a135	f0 0e		beq $a145			beq 	_I32MNoAdd
.a137	20 15 8f	jsr $8f15			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a13a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a13d	10 06		bpl $a145			bpl 	_I32MNoAdd
.a13f					_I32ShiftRight:
.a13f	20 c3 98	jsr $98c3			jsr 	NSMShiftRight 				; shift S[X] right
.a142	c8		iny				iny 								; increment shift count
.a143	80 0a		bra $a14f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a145					_I32MNoAdd:
.a145	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a148	70 f5		bvs $a13f			bvs 	_I32ShiftRight 				; instead.
.a14a	e8		inx				inx
.a14b	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a14e	ca		dex				dex
.a14f					_I32MShiftUpper:
.a14f	e8		inx				inx 								; shift S[X+2] right
.a150	e8		inx				inx
.a151	20 c3 98	jsr $98c3			jsr 	NSMShiftRight
.a154	ca		dex				dex
.a155	ca		dex				dex
.a156	80 ca		bra $a122			bra 	_I32MLoop 					; try again.
.a158					_I32MExit:
.a158	20 5e a1	jsr $a15e			jsr 	CalculateSign
.a15b	98		tya				tya 								; shift in A
.a15c	7a		ply				ply 								; restore Y and exit
.a15d	60		rts				rts
.a15e					CalculateSign:
.a15e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a161	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a164	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a167	0a		asl a				asl 	a 							; shift bit 7 into carry
.a168	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a16b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8e91					CompareStrings:
.8e91	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8e94	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e97	29 10		and #$10			and 	#NSBIsString
.8e99	f0 2c		beq $8ec7			beq 	_CSTypeError
.8e9b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8e9e	85 36		sta $36				sta 	zTemp0
.8ea0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ea3	85 37		sta $37				sta 	zTemp0+1
.8ea5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8ea8	85 38		sta $38				sta 	zTemp1
.8eaa	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8ead	85 39		sta $39				sta 	zTemp1+1
.8eaf	5a		phy				phy 								; save Y so we can access strings
.8eb0	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8eb2					_CSLoop:
.8eb2	c8		iny				iny
.8eb3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8eb5	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8eb7	d0 06		bne $8ebf			bne 	_CSDifferent
.8eb9	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8ebb	d0 f5		bne $8eb2			bne 	_CSLoop 					; still comparing
.8ebd					_CSExit:
.8ebd	7a		ply				ply 								; reached end, return zero in A from EOS
.8ebe	60		rts				rts
.8ebf					_CSDifferent:
.8ebf	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8ec1	90 fa		bcc $8ebd			bcc		_CSExit
.8ec3	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8ec5	80 f6		bra $8ebd			bra 	_CSExit
.8ec7					_CSTypeError:
.8ec7	4c fc a5	jmp $a5fc			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8eca					ShiftLeft:
.8eca	38		sec				sec
.8ecb	80 01		bra $8ece			bra 	ShiftMain
.8ecd					ShiftRight:
.8ecd	18		clc				clc
.8ece					ShiftMain:
.8ece	fa		plx				plx 								; restore X
.8ecf	08		php				php 								; save direction
.8ed0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ed3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ed6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ed7	0a		asl a				asl 	a
.8ed8	10 05		bpl $8edf			bpl 	_NotRef
.8eda	48		pha				pha
.8edb	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ede	68		pla				pla
.8edf					_NotRef:
.8edf	0a		asl a				asl 	a
.8ee0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ee2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ee5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ee8	f0 03		beq $8eed			beq 	_IntegerCode 				; if clear, then we have two integers
.8eea	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.8eed					_IntegerCode:
.8eed	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8ef0	29 e0		and #$e0			and 	#$E0
.8ef2	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8ef5	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8ef8	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8efb	d0 13		bne $8f10			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8efd					_SMLoop:
.8efd	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8f00	30 11		bmi $8f13			bmi 	_SMExit 					; exit if done.
.8f02	28		plp				plp 								; restore direcition setting
.8f03	08		php				php
.8f04	90 05		bcc $8f0b			bcc 	_SMRight
.8f06	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; shift left if CS
.8f09	80 f2		bra $8efd			bra 	_SMLoop
.8f0b					_SMRight:
.8f0b	20 c3 98	jsr $98c3			jsr 	NSMShiftRight 				; shift right if CC
.8f0e	80 ed		bra $8efd			bra 	_SMLoop
.8f10					_SMExit0:
.8f10	20 a0 98	jsr $98a0			jsr 	NSMSetZero 					; return zero.
.8f13					_SMExit:
.8f13	28		plp				plp 								; throw direction
.8f14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8f15					AddTopTwoStack:
.8f15	18		clc				clc
.8f16	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f19	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8f1c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f1f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f22	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8f25	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f28	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f2b	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8f2e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f31	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f34	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8f37	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f3a	60		rts				rts
.8f3b					SubTopTwoStack:
.8f3b	38		sec				sec
.8f3c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f3f	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8f42	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f45	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f48	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8f4b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f4e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f51	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8f54	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f57	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f5a	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8f5d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f60	60		rts				rts
.8f61					AddInteger:
.8f61	fa		plx				plx
.8f62	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f65	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f68	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f69	0a		asl a				asl 	a
.8f6a	10 05		bpl $8f71			bpl 	_NotRef
.8f6c	48		pha				pha
.8f6d	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f70	68		pla				pla
.8f71					_NotRef:
.8f71	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f72	30 0b		bmi $8f7f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f74	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f77	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f7a	f0 06		beq $8f82			beq 	_IntegerCode 				; if clear, then we have two integers
.8f7c	4c c7 a1	jmp $a1c7			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8f7f					_StringData:
.8f7f	4c 34 8e	jmp $8e34			jmp 	StringConcat							; at least one string - don't know both are strings.
.8f82					_IntegerCode:
.8f82					AddCode:
.8f82	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8f85	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f88	10 8b		bpl $8f15			bpl 	AddTopTwoStack
.8f8a	20 3b 8f	jsr $8f3b			jsr 	SubTopTwoStack 				; do a physical subtraction
.8f8d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8f90	10 09		bpl $8f9b			bpl 	_AddExit
.8f92	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8f95	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f98	20 55 98	jsr $9855			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8f9b					_AddExit:
.8f9b	60		rts				rts
.8f9c					SubInteger:
.8f9c	fa		plx				plx
.8f9d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fa0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fa3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fa4	0a		asl a				asl 	a
.8fa5	10 05		bpl $8fac			bpl 	_NotRef
.8fa7	48		pha				pha
.8fa8	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fab	68		pla				pla
.8fac					_NotRef:
.8fac	0a		asl a				asl 	a 							; put MSB of type into A:7
.8fad	30 0b		bmi $8fba			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8faf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fb2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fb5	f0 06		beq $8fbd			beq 	_IntegerCode 				; if clear, then we have two integers
.8fb7	4c cc a1	jmp $a1cc			jmp 	FloatingPointSub 							; otherwise at least one float.
.8fba					_StringData:
.8fba	4c 06 a6	jmp $a606			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8fbd					_IntegerCode:
.8fbd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8fc0	49 80		eor #$80			eor 	#$80
.8fc2	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8fc5	80 bb		bra $8f82			bra 	AddCode 					; and do the same code as add.
.8fc7					AndInteger:
.8fc7	fa		plx				plx
.8fc8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fcb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fce	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fcf	0a		asl a				asl 	a
.8fd0	10 05		bpl $8fd7			bpl 	_NotRef
.8fd2	48		pha				pha
.8fd3	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fd6	68		pla				pla
.8fd7					_NotRef:
.8fd7	0a		asl a				asl 	a
.8fd8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fda	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fdd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fe0	f0 03		beq $8fe5			beq 	_IntegerCode 				; if clear, then we have two integers
.8fe2	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.8fe5					_IntegerCode:
.8fe5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fe8	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8feb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fee	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ff1	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8ff4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ff7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ffa	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8ffd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9000	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.9003	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.9006	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9009	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.900c	60		rts				rts
.900d					OraInteger:
.900d	fa		plx				plx
.900e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9011	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9014	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9015	0a		asl a				asl 	a
.9016	10 05		bpl $901d			bpl 	_NotRef
.9018	48		pha				pha
.9019	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.901c	68		pla				pla
.901d					_NotRef:
.901d	0a		asl a				asl 	a
.901e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9020	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9023	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9026	f0 03		beq $902b			beq 	_IntegerCode 				; if clear, then we have two integers
.9028	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.902b					_IntegerCode:
.902b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.902e	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.9031	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9034	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.9037	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.903a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.903d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9040	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.9043	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9046	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.9049	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.904c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.904f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9052	60		rts				rts
.9053					EorInteger:
.9053	fa		plx				plx
.9054	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9057	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.905a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.905b	0a		asl a				asl 	a
.905c	10 05		bpl $9063			bpl 	_NotRef
.905e	48		pha				pha
.905f	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9062	68		pla				pla
.9063					_NotRef:
.9063	0a		asl a				asl 	a
.9064	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9066	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9069	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.906c	f0 03		beq $9071			beq 	_IntegerCode 				; if clear, then we have two integers
.906e	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.9071					_IntegerCode:
.9071	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9074	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.9077	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.907a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.907d	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.9080	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9083	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9086	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.9089	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.908c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.908f	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.9092	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9095	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9098	60		rts				rts
.9099					WordIndirect:
.9099	fa		plx				plx
.909a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.909d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90a0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90a1	0a		asl a				asl 	a
.90a2	10 05		bpl $90a9			bpl 	_NotRef
.90a4	48		pha				pha
.90a5	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90a8	68		pla				pla
.90a9					_NotRef:
.90a9	0a		asl a				asl 	a
.90aa	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90ac	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90af	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90b2	f0 03		beq $90b7			beq 	_IntegerCode 				; if clear, then we have two integers
.90b4	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.90b7					_IntegerCode:
.90b7	20 82 8f	jsr $8f82			jsr 	AddCode 					; add the two values
.90ba	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.90bc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90bf	60		rts				rts
.90c0					ByteIndirect:
.90c0	fa		plx				plx
.90c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90c4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90c7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c8	0a		asl a				asl 	a
.90c9	10 05		bpl $90d0			bpl 	_NotRef
.90cb	48		pha				pha
.90cc	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90cf	68		pla				pla
.90d0					_NotRef:
.90d0	0a		asl a				asl 	a
.90d1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90d3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90d9	f0 03		beq $90de			beq 	_IntegerCode 				; if clear, then we have two integers
.90db	4c fc a5	jmp $a5fc			jmp 	TypeError 					; anything else, type mismatch.
.90de					_IntegerCode:
.90de	20 82 8f	jsr $8f82			jsr 	AddCode 					; add the two values
.90e1	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.90e3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a16c					ConvertInt16:
.a16c	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a16f	8e 10 06	stx $0610			stx 	NSMantissa1
.a172	9c 18 06	stz $0618			stz 	NSMantissa2
.a175	9c 20 06	stz $0620			stz 	NSMantissa3
.a178	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a17b	a2 00		ldx #$00			ldx 	#0 							; stack level
.a17d	a9 0a		lda #$0a			lda 	#10 						; base
.a17f	80 00		bra $a181			bra 	ConvertInt32
.a181					ConvertInt32:
.a181	5a		phy				phy
.a182	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a184	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a187	10 08		bpl $a191			bpl 	_CI32NotNeg
.a189	48		pha				pha
.a18a	a9 2d		lda #$2d			lda 	#'-'
.a18c	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a18f	c8		iny				iny
.a190	68		pla				pla
.a191					_CI32NotNeg:
.a191	20 9f a1	jsr $a19f			jsr 	_CI32DivideConvert 			; recursive conversion
.a194	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a196	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a199	7a		ply				ply
.a19a	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a19c	a9 77		lda #$77			lda 	#NumberBuffer & $FF
.a19e	60		rts				rts
.a19f					_CI32DivideConvert:
.a19f	e8		inx				inx 								; write to next slot up
.a1a0	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.a1a3	ca		dex				dex
.a1a4	20 a1 a0	jsr $a0a1			jsr 	Int32Divide 				; divide
.a1a7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a1aa	48		pha				pha
.a1ab	20 50 a0	jsr $a050			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a1ae	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; is it zero ?
.a1b1	f0 06		beq $a1b9			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a1b3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a1b6	20 9f a1	jsr $a19f			jsr 	_CI32DivideConvert 			; and recusrively call.
.a1b9					_CI32NoRecurse:
.a1b9	68		pla				pla 								; remainder
.a1ba	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a1bc	90 02		bcc $a1c0			bcc 	_CI32NotHex
.a1be	69 26		adc #$26			adc 	#6+32
.a1c0					_CI32NotHex:
.a1c0	69 30		adc #$30			adc 	#48
.a1c2	99 77 08	sta $0877,y			sta 	NumberBuffer,y 				; write out and exit
.a1c5	c8		iny				iny
.a1c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.90e7					PrecedenceLevel:
>90e7	04					.byte	 4	; $00 <<
>90e8	02					.byte	 2	; $01 <=
>90e9	02					.byte	 2	; $02 <>
>90ea	00					.byte	 0	; $03 !!3
>90eb	00					.byte	 0	; $04 ><
>90ec	02					.byte	 2	; $05 >=
>90ed	04					.byte	 4	; $06 >>
>90ee	00					.byte	 0	; $07 !!7
>90ef	00					.byte	 0	; $08 !!8
>90f0	00					.byte	 0	; $09 !!9
>90f1	00					.byte	 0	; $0a !!10
>90f2	00					.byte	 0	; $0b !!11
>90f3	00					.byte	 0	; $0c !!12
>90f4	00					.byte	 0	; $0d !!13
>90f5	00					.byte	 0	; $0e !!14
>90f6	00					.byte	 0	; $0f !!15
>90f7	00					.byte	 0	; $10 @
>90f8	00					.byte	 0	; $11 !!17
>90f9	00					.byte	 0	; $12 !!18
>90fa	00					.byte	 0	; $13 [
>90fb	04					.byte	 4	; $14 \
>90fc	00					.byte	 0	; $15 ]
>90fd	01					.byte	 1	; $16 ^
>90fe	00					.byte	 0	; $17 _
>90ff	00					.byte	 0	; $18 `
>9100	00					.byte	 0	; $19 !!25
>9101	00					.byte	 0	; $1a !!26
>9102	00					.byte	 0	; $1b {
>9103	01					.byte	 1	; $1c |
>9104	00					.byte	 0	; $1d }
>9105	00					.byte	 0	; $1e ~
>9106	00					.byte	 0	; $1f [7m<7F>[m
>9107	00					.byte	 0	; $20
>9108	05					.byte	 5	; $21 !
>9109	00					.byte	 0	; $22 "
>910a	00					.byte	 0	; $23 #
>910b	05					.byte	 5	; $24 $
>910c	04					.byte	 4	; $25 %
>910d	01					.byte	 1	; $26 &
>910e	00					.byte	 0	; $27 '
>910f	00					.byte	 0	; $28 (
>9110	00					.byte	 0	; $29 )
>9111	04					.byte	 4	; $2a *
>9112	03					.byte	 3	; $2b +
>9113	00					.byte	 0	; $2c ,
>9114	03					.byte	 3	; $2d -
>9115	00					.byte	 0	; $2e .
>9116	04					.byte	 4	; $2f /
>9117	00					.byte	 0	; $30 0
>9118	00					.byte	 0	; $31 1
>9119	00					.byte	 0	; $32 2
>911a	00					.byte	 0	; $33 3
>911b	00					.byte	 0	; $34 4
>911c	00					.byte	 0	; $35 5
>911d	00					.byte	 0	; $36 6
>911e	00					.byte	 0	; $37 7
>911f	00					.byte	 0	; $38 8
>9120	00					.byte	 0	; $39 9
>9121	00					.byte	 0	; $3a :
>9122	00					.byte	 0	; $3b ;
>9123	02					.byte	 2	; $3c <
>9124	02					.byte	 2	; $3d =
>9125	02					.byte	 2	; $3e >
>9126	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9127					EvaluateExpressionAt0:
.9127	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9129					EvaluateExpression:
.9129	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.912b					EvaluateExpressionAtPrecedence:
.912b	48		pha				pha 								; save precedence level
.912c	20 fa 93	jsr $93fa			jsr 	EvaluateTerm 				; evaluate term into level X.
.912f	68		pla				pla 								; restore precedence level.
.9130					_EXPRLoop:
.9130	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9132	b1 30		lda ($30),y			lda 	(codePtr),y
.9134	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9136	b0 25		bcs $915d			bcs 	_EXPRExit
.9138	da		phx				phx 								; read the operator precedence
.9139	aa		tax				tax
.913a	bd e7 90	lda $90e7,x			lda 	PrecedenceLevel,x
.913d	fa		plx				plx
.913e	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9140	f0 1b		beq $915d			beq 	_EXPRExit
.9142	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9144	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9146	c5 37		cmp $37				cmp 	zTemp0+1
.9148	b0 13		bcs $915d			bcs		_EXPRExit 					; if current >= operator exit
.914a	48		pha				pha 								; save current precedence.
.914b	b1 30		lda ($30),y			lda 	(codePtr),y
.914d	c8		iny				iny
.914e	48		pha				pha
.914f	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9151	e8		inx				inx 								; work out the right hand side.
.9152	20 2b 91	jsr $912b			jsr 	EvaluateExpressionAtPrecedence
.9155	ca		dex				dex
.9156	68		pla				pla 								; get operator, call the code.
.9157	20 60 91	jsr $9160			jsr 	_EXPRCaller
.915a	68		pla				pla 								; restore precedence level
.915b	80 d3		bra $9130			bra 	_EXPRLoop 					; and go round.
.915d					_EXPRExit:
.915d	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.915f	60		rts				rts
.9160					_EXPRCaller:
.9160	da		phx				phx 								; save on stack, first thing is to restore it
.9161	0a		asl a				asl 	a 							; double so can use vectors into X
.9162	aa		tax				tax
.9163	7c 7c 80	jmp ($807c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a1c7					FloatingPointAdd:
.a1c7	20 68 a3	jsr $a368			jsr 	FloatPrepare 				; prepare for floats
.a1ca	80 0b		bra $a1d7			bra 	FloatAdd
.a1cc					FloatingPointSub:
.a1cc	20 68 a3	jsr $a368			jsr 	FloatPrepare 				; prepare for floats
.a1cf					FloatSubtract:
.a1cf	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a1d2	49 80		eor #$80			eor 	#$80
.a1d4	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a1d7					FloatAdd:
.a1d7	48		pha				pha
.a1d8	5a		phy				phy
.a1d9	20 79 a3	jsr $a379			jsr 	NSNormalise 				; normalise S[X]
.a1dc	f0 54		beq $a232			beq 	_FAReturn1
.a1de	e8		inx				inx 								; normalise S[X+1]
.a1df	20 79 a3	jsr $a379			jsr 	NSNormalise
.a1e2	ca		dex				dex
.a1e3	c9 00		cmp #$00			cmp 	#0
.a1e5	f0 6f		beq $a256			beq 	_FAExit 					; if so, just return A
.a1e7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a1ea	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a1ed	f0 1b		beq $a20a			beq 	_FAExponentsEqual
.a1ef	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a1f2	a8		tay				tay
.a1f3	38		sec				sec 								; do a signed comparison of the exponents.
.a1f4	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a1f7	50 02		bvc $a1fb			bvc 	_FANoSignedChange
.a1f9	49 80		eor #$80			eor 	#$80
.a1fb					_FANoSignedChange:
.a1fb	29 80		and #$80			and 	#$80
.a1fd	10 03		bpl $a202			bpl 	_FAHaveMax
.a1ff	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a202					_FAHaveMax:
.a202	20 59 a2	jsr $a259			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a205	e8		inx				inx
.a206	20 59 a2	jsr $a259			jsr 	_FAShiftToExponent
.a209	ca		dex				dex
.a20a					_FAExponentsEqual:
.a20a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a20d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a210	30 10		bmi $a222			bmi 	_FADifferentSigns
.a212	20 15 8f	jsr $8f15			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a215	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a218	10 3c		bpl $a256			bpl 	_FAExit 					; if no, we are done.
.a21a	20 c3 98	jsr $98c3			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a21d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a220	80 34		bra $a256			bra 	_FAExit
.a222					_FADifferentSigns:
.a222	20 3b 8f	jsr $8f3b			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a225	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a228	10 2c		bpl $a256			bpl 	_FAExit 					; if no, we are done.
.a22a	20 4c 98	jsr $984c			jsr 	NSMNegate 					; netate result
.a22d	20 55 98	jsr $9855			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a230	80 24		bra $a256			bra 	_FAExit
.a232					_FAReturn1:
.a232	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a235	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a238	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a23b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a23e	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a241	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a244	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a247	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a24a	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a24d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a250	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a253	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a256					_FAExit:
.a256	7a		ply				ply
.a257	68		pla				pla
.a258	60		rts				rts
.a259					_FAShiftToExponent:
.a259					_FAShiftToExponent2:
.a259	98		tya				tya 								; compare Y to exponent
.a25a	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a25d	f0 08		beq $a267			beq 	_FASEExit 					; exit if so.
.a25f	20 c3 98	jsr $98c3			jsr 	NSMShiftRight	 			; shift the mantissa right
.a262	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a265	80 f2		bra $a259			bra 	_FAShiftToExponent2
.a267					_FASEExit:
.a267	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a268					CompareFloat:
.a268	20 cf a1	jsr $a1cf			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a26b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a26e	29 f8		and #$f8			and 	#$F8
.a270	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a273	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a276	f0 09		beq $a281			beq 	_FCExit 					; zero, so approximately identical
.a278	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a27a	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a27d	10 02		bpl $a281			bpl 	_FCExit
.a27f					_FCNegative:
.a27f	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a281					_FCExit:
.a281	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a282					FDivideCommand:
.a282	fa		plx				plx	 								; restore stack position
.a283	20 68 a3	jsr $a368			jsr 	FloatPrepare 				; prepare for floats
.a286					FloatDivide:
.a286	48		pha				pha
.a287	e8		inx				inx
.a288	20 79 a3	jsr $a379			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a28b	ca		dex				dex
.a28c	c9 00		cmp #$00			cmp 	#0
.a28e	f0 20		beq $a2b0			beq 	_FDZero
.a290	20 79 a3	jsr $a379			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a293	f0 19		beq $a2ae			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a295	20 c3 a0	jsr $a0c3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a298	20 50 a0	jsr $a050			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a29b	20 79 a3	jsr $a379			jsr		NSNormalise 				; renormalise
.a29e	20 5e a1	jsr $a15e			jsr 	CalculateSign 				; calculate result sign
.a2a1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a2a4	38		sec				sec
.a2a5	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a2a8	38		sec				sec
.a2a9	e9 1e		sbc #$1e			sbc 	#30
.a2ab	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a2ae					_FDExit:
.a2ae	68		pla				pla
.a2af	60		rts				rts
.a2b0					_FDZero:
.a2b0	a9 03		lda #$03		lda	#3
.a2b2	4c 20 8d	jmp $8d20		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a2b5					FloatFractionalPart:
.a2b5	5a		phy				phy
.a2b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a2b9	29 7f		and #$7f			and 	#$7F
.a2bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2be	20 79 a3	jsr $a379			jsr 	NSNormalise
.a2c1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a2c4	38		sec				sec
.a2c5	e9 e0		sbc #$e0			sbc 	#$E0
.a2c7	90 31		bcc $a2fa			bcc 	_FFPExit 					; already fractional
.a2c9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a2cb	b0 2a		bcs $a2f7			bcs 	_FFPZero
.a2cd	a8		tay				tay 								; put count to do in Y
.a2ce	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a2d1	20 fc a2	jsr $a2fc			jsr 	_FFPPartial
.a2d4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a2d7	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a2da	20 fc a2	jsr $a2fc			jsr 	_FFPPartial
.a2dd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a2e0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a2e3	20 fc a2	jsr $a2fc			jsr 	_FFPPartial
.a2e6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a2e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a2ec	20 fc a2	jsr $a2fc			jsr 	_FFPPartial
.a2ef	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a2f2	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; zeroed check.
.a2f5	d0 03		bne $a2fa			bne 	_FFPExit
.a2f7					_FFPZero:
.a2f7	20 a0 98	jsr $98a0			jsr 	NSMSetZero
.a2fa					_FFPExit:
.a2fa	7a		ply				ply
.a2fb	60		rts				rts
.a2fc					_FFPPartial:
.a2fc	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a2fe	f0 17		beq $a317			beq 	_FFFPPExit
.a300	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a302	b0 0c		bcs $a310			bcs 	_FFFPPWholeByte
.a304	5a		phy				phy
.a305					_FFFPPLeft:
.a305	0a		asl a				asl 	a
.a306	88		dey				dey
.a307	d0 fc		bne $a305			bne 	_FFFPPLeft
.a309	7a		ply				ply
.a30a					_FFFPPRight:
.a30a	4a		lsr a				lsr 	a
.a30b	88		dey				dey
.a30c	d0 fc		bne $a30a			bne 	_FFFPPRight
.a30e	80 07		bra $a317			bra 	_FFFPPExit
.a310					_FFFPPWholeByte:
.a310	98		tya				tya 								; subtract 8 from count
.a311	38		sec				sec
.a312	e9 08		sbc #$08			sbc 	#8
.a314	a8		tay				tay
.a315	a9 00		lda #$00			lda 	#0 							; and clear all
.a317					_FFFPPExit:
.a317	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a318					FloatIntegerPart:
.a318	48		pha				pha
.a319	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a31c	f0 1f		beq $a33d			beq 	_FIPExit 					; if so do nothing
.a31e	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; is it zero ?
.a321	f0 17		beq $a33a			beq 	_FIPZero 					; if so return zero.
.a323	20 79 a3	jsr $a379			jsr 	NSNormalise 				; normalise
.a326	f0 12		beq $a33a			beq 	_FIPZero 					; normalised to zero, exit zero
.a328					_FIPShift:
.a328	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a32b	10 08		bpl $a335			bpl 	_FIPCheckZero
.a32d	20 c3 98	jsr $98c3			jsr 	NSMShiftRight 				; shift mantissa right
.a330	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a333	80 f3		bra $a328			bra 	_FIPShift
.a335					_FIPCheckZero:
.a335	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; avoid -0 problem
.a338	d0 03		bne $a33d			bne 	_FIPExit 					; set to zero if mantissa zero.
.a33a					_FIPZero:
.a33a	20 a0 98	jsr $98a0			jsr 	NSMSetZero
.a33d					_FIPExit:
.a33d	68		pla				pla
.a33e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a33f					FloatingPointMultiply:
.a33f	20 68 a3	jsr $a368			jsr 	FloatPrepare 				; prepare for floats
.a342					FloatMultiply:
.a342	48		pha				pha
.a343	20 79 a3	jsr $a379			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a346	f0 1b		beq $a363			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a348	e8		inx				inx
.a349	20 79 a3	jsr $a379			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a34c	ca		dex				dex
.a34d	c9 00		cmp #$00			cmp 	#0
.a34f	f0 0f		beq $a360			beq 	_FDSetZero
.a351	20 19 a1	jsr $a119			jsr 	MultiplyShort 				; calculate the result.
.a354	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a357	18		clc				clc
.a358	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a35b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a35e	80 03		bra $a363			bra 	_FDExit
.a360					_FDSetZero:
.a360	20 a0 98	jsr $98a0			jsr 	NSMSetZero 					; return 0
.a363					_FDExit:
.a363	20 79 a3	jsr $a379			jsr 	NSNormalise 				; normalise the result
.a366	68		pla				pla
.a367	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a368					FloatPrepare:
.a368	20 39 92	jsr $9239			jsr 	DereferenceTopTwo 			; dereference the top two values
.a36b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a36e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a371	29 10		and #$10			and 	#NSBIsString
.a373	d0 01		bne $a376			bne 	_FDType
.a375	60		rts				rts
.a376					_FDType:
.a376	4c fc a5	jmp $a5fc			jmp 	TypeError
.a379					NSNormalise:
.a379	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a37c	29 80		and #$80			and 	#$80
.a37e	09 08		ora #$08			ora 	#NSTFloat
.a380	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a383	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; if zero exit
.a386	d0 09		bne $a391			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a388	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a38b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a38e	a9 00		lda #$00			lda 	#0 							; set Z flag
.a390	60		rts				rts
.a391					_NSNormaliseOptimise:
.a391	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a394	d0 22		bne $a3b8			bne 	_NSNormaliseLoop
.a396	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a399	30 1d		bmi $a3b8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a39b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a39e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a3a1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a3a4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a3a7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a3aa	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a3ad	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a3b0	38		sec				sec
.a3b1	e9 08		sbc #$08			sbc 	#8
.a3b3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a3b6	80 d9		bra $a391			bra 	_NSNormaliseOptimise
.a3b8					_NSNormaliseLoop:
.a3b8	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a3bb	70 08		bvs $a3c5			bvs 	_NSNExit 					; exit if so with Z flag clear
.a3bd	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; shift mantissa left
.a3c0	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a3c3	80 f3		bra $a3b8			bra 	_NSNormaliseLoop
.a3c5					_NSNExit:
.a3c5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a3c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9166					AssignNumber:
.9166	5a		phy				phy
.9167	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.916a	85 36		sta $36				sta 	zTemp0
.916c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.916f	85 37		sta $37				sta 	zTemp0+1
.9171	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9174	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9176	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9179	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.917b	c9 08		cmp #$08			cmp 	#NSTFloat
.917d	f0 2a		beq $91a9			beq 	_ANFloat
.917f	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9182	f0 05		beq $9189			beq		_ANNotFloat
.9184	e8		inx				inx
.9185	20 18 a3	jsr $a318			jsr 	FloatIntegerPart 			; make it an integer
.9188	ca		dex				dex
.9189					_ANNotFloat:
.9189	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.918c	29 03		and #$03			and 	#3
.918e	d0 05		bne $9195			bne 	_ANByteWord
.9190	20 b5 91	jsr $91b5			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9193	80 1e		bra $91b3			bra 	_ANExit
.9195					_ANByteWord:
.9195	48		pha				pha 								; save count
.9196	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9199	92 36		sta ($36)			sta 	(zTemp0)
.919b	68		pla				pla
.919c	c9 01		cmp #$01			cmp	 	#1
.919e	f0 13		beq $91b3			beq 	_ANExit
.91a0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.91a3	a0 01		ldy #$01			ldy 	#1
.91a5	91 36		sta ($36),y			sta 	(zTemp0),y
.91a7	80 0a		bra $91b3			bra 	_ANExit
.91a9					_ANFloat:
.91a9	20 b5 91	jsr $91b5			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.91ac	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.91af	a0 04		ldy #$04			ldy 	#4
.91b1	91 36		sta ($36),y			sta 	(zTemp0),y
.91b3					_ANExit:
.91b3	7a		ply				ply
.91b4	60		rts				rts
.91b5					_ANCopy4PackSign:
.91b5	a0 03		ldy #$03			ldy 	#3
.91b7	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.91ba	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.91bc	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.91bf	91 36		sta ($36),y			sta 	(zTemp0),y
.91c1	88		dey				dey
.91c2	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.91c5	91 36		sta ($36),y			sta 	(zTemp0),y
.91c7	88		dey				dey
.91c8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91cb	91 36		sta ($36),y			sta 	(zTemp0),y
.91cd	88		dey				dey
.91ce	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.91d1	91 36		sta ($36),y			sta 	(zTemp0),y
.91d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.91d4					AssignString:
.91d4	5a		phy				phy
.91d5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.91d8	85 38		sta $38				sta 	zTemp1
.91da	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91dd	85 39		sta $39				sta 	zTemp1+1
.91df	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.91e2	85 36		sta $36				sta 	zTemp0
.91e4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91e7	85 37		sta $37				sta 	zTemp0+1
.91e9	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.91eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.91ed	f0 23		beq $9212			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.91ef	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.91f0	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.91f2	e9 02		sbc #$02			sbc 	#2
.91f4	85 3c		sta $3c				sta 	zsTemp
.91f6	a0 01		ldy #$01			ldy 	#1
.91f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.91fa	e9 00		sbc #$00			sbc 	#0
.91fc	85 3d		sta $3d				sta 	zsTemp+1
.91fe	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9200					_ASGetLength:
.9200	c8		iny				iny
.9201	b1 38		lda ($38),y			lda 	(zTemp1),y
.9203	d0 fb		bne $9200			bne 	_ASGetLength
.9205	98		tya				tya 								; is this length <= current length
.9206	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9208	90 20		bcc $922a			bcc 	_ASCopyString
.920a	f0 1e		beq $922a			beq 	_ASCopyString
.920c	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.920e	a0 01		ldy #$01			ldy 	#1
.9210	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9212					_ASNewStringRequired:
.9212	e8		inx				inx 								; concrete the new string.
.9213	20 97 a7	jsr $a797			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9216	ca		dex				dex
.9217	18		clc				clc
.9218	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.921b	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.921d	92 36		sta ($36)			sta 	(zTemp0)
.921f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9222	69 00		adc #$00			adc 	#0
.9224	a0 01		ldy #$01			ldy 	#1
.9226	91 36		sta ($36),y			sta 	(zTemp0),y
.9228	80 0d		bra $9237			bra 	_ASExit
.922a					_ASCopyString:
.922a	a0 00		ldy #$00			ldy 	#0
.922c					_ASCopyLoop:
.922c	b1 38		lda ($38),y			lda 	(zTemp1),y
.922e	c8		iny				iny
.922f	c8		iny				iny
.9230	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9232	88		dey				dey
.9233	c9 00		cmp #$00			cmp 	#0
.9235	d0 f5		bne $922c			bne 	_ASCopyLoop
.9237					_ASExit:
.9237	7a		ply				ply
.9238	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9239					DereferenceTopTwo:
.9239	e8		inx				inx
.923a	20 3e 92	jsr $923e			jsr 	Dereference 				; deref x+1
.923d	ca		dex				dex  								; falls through to deref x
.923e					Dereference:
.923e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.9241	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9243	f0 57		beq $929c			beq 	_DRFExit 					; not a reference
.9245	5a		phy				phy
.9246	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9249	85 36		sta $36				sta 	zTemp0
.924b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.924e	85 37		sta $37				sta 	zTemp0+1
.9250	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9253	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9255	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9258	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.925b	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.925d	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.925f	f0 0f		beq $9270			beq 	_DRFDereferenceTwo
.9261	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9263	f0 39		beq $929e			beq 	_DRFFull
.9265	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9268	29 03		and #$03			and 	#3
.926a	f0 32		beq $929e			beq 	_DRFFull 					; the whole word
.926c	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.926e	f0 07		beq $9277			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9270					_DRFDereferenceTwo:
.9270	a0 01		ldy #$01			ldy 	#1
.9272	b1 36		lda ($36),y			lda 	(zTemp0),y
.9274	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9277					_DRFClear23:
.9277	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.927a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.927d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.9280	29 18		and #$18			and 	#NSBTypeMask
.9282	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9285	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9287	d0 12		bne $929b			bne 	_DRFNotString
.9289	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.928c	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.928f	d0 0a		bne $929b			bne 	_DRFNotString
.9291	a9 9d		lda #$9d			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9293	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9296	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.9298	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.929b					_DRFNotString
.929b	7a		ply				ply 								; restore Y and exit
.929c					_DRFExit:
.929c	60		rts				rts
.929d					_DRFNullString:
>929d	00						.byte 	0
.929e					_DRFFull:
.929e	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.92a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.92a2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92a5	c8		iny				iny
.92a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.92a8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92ab	c8		iny				iny
.92ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ae	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92b1	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.92b4	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.92b7	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.92b9	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.92bc	f0 06		beq $92c4			beq 	_DRFNoExponent
.92be	c8		iny				iny 								; if not, read the exponent as well.
.92bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.92c1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92c4					_DRFNoExponent:
.92c4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.92c7	10 0d		bpl $92d6			bpl 	_DRFExit2 					; if not, then exit.
.92c9	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.92cb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.92d1	09 80		ora #$80			ora 	#NSBIsNegative
.92d3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92d6					_DRFExit2:
.92d6	7a		ply				ply
.92d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.92d8					EncodeNumberStart:
.92d8	38		sec				sec
.92d9	80 01		bra $92dc			bra 	EncodeNumberContinue+1
.92db					EncodeNumberContinue:
.92db	18		clc				clc
.92dc					EncodeNumber:
.92dc	08		php				php 								; save reset.
.92dd	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.92df	f0 12		beq $92f3			beq 	_ENIsOkay
.92e1	c9 30		cmp #$30			cmp 	#"0"
.92e3	90 04		bcc $92e9			bcc 	_ENBadNumber
.92e5	c9 3a		cmp #$3a			cmp 	#"9"+1
.92e7	90 0a		bcc $92f3			bcc 	_ENIsOkay
.92e9					_ENBadNumber:
.92e9	28		plp				plp 								; throw saved reset
.92ea	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.92ed	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92ef	f0 7e		beq $936f			beq 	_ENConstructFinal
.92f1					_ENFail:
.92f1	18		clc				clc 								; not allowed
.92f2	60		rts				rts
.92f3					_ENIsOkay:
.92f3	28		plp				plp 								; are we restarting
.92f4	90 15		bcc $930b			bcc 	_ENNoRestart
.92f6					_ENStartEncode:
.92f6	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.92f8	f0 0c		beq $9306			beq 	_ENFirstDP
.92fa	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.92fc	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.92ff	a9 01		lda #$01			lda 	#ESTA_Low
.9301					_ENExitChange:
.9301	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.9304	38		sec				sec
.9305	60		rts				rts
.9306					_ENFirstDP:
.9306	20 a0 98	jsr $98a0			jsr 	NSMSetZero 					; clear integer part
.9309	80 3f		bra $934a			bra 	_ESTASwitchFloat			; go straight to float and exi
.930b					_ENNoRestart:
.930b	48		pha				pha 								; save on stack.
.930c	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.930f	c9 01		cmp #$01			cmp 	#ESTA_Low
.9311	f0 09		beq $931c			beq  	_ESTALowState
.9313	c9 02		cmp #$02			cmp 	#ESTA_High
.9315	f0 29		beq $9340			beq 	_ESTAHighState
.9317	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9319	f0 3b		beq $9356			beq 	_ESTADecimalState
>931b	db						.byte 	$DB 						; causes a break in the emulator
.931c					_ESTALowState:
.931c	68		pla				pla 								; get value back
.931d	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.931f	f0 29		beq $934a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9321	29 0f		and #$0f			and 	#15 						; make digit
.9323	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.9326	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9329	0a		asl a				asl 	a
.932a	0a		asl a				asl 	a
.932b	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.932e	0a		asl a				asl 	a
.932f	6d 06 07	adc $0706			adc 	DigitTemp
.9332	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9335	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9337	90 05		bcc $933e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9339	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.933b	8d 05 07	sta $0705			sta 	EncodeState
.933e					_ESTANoSwitch:
.933e	38		sec				sec
.933f	60		rts				rts
.9340					_ESTAHighState:
.9340	68		pla				pla 								; get value back
.9341	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9343	f0 05		beq $934a			beq 	_ESTASwitchFloat
.9345	20 a9 93	jsr $93a9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9348	38		sec				sec
.9349	60		rts				rts
.934a					_ESTASwitchFloat:
.934a	9c 07 07	stz $0707			stz 	DecimalCount
.934d	e8		inx				inx 								; zero the decimal additive.
.934e	20 a0 98	jsr $98a0			jsr 	NSMSetZero
.9351	ca		dex				dex
.9352	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9354	80 ab		bra $9301			bra 	_ENExitChange
.9356					_ESTADecimalState:
.9356	68		pla				pla 								; digit.
.9357	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9359	f0 96		beq $92f1			beq 	_ENFail
.935b	e8		inx				inx 								; put digit into fractional part of X+1
.935c	20 a9 93	jsr $93a9			jsr 	ESTAShiftDigitIntoMantissa
.935f	ca		dex				dex
.9360	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9363	ad 07 07	lda $0707			lda 	DecimalCount
.9366	c9 0b		cmp #$0b			cmp 	#11
.9368	f0 02		beq $936c			beq 	_ESTADSFail
.936a	38		sec				sec
.936b	60		rts				rts
.936c					_ESTADSFail:
.936c	4c f7 a5	jmp $a5f7			jmp 	RangeError
.936f					_ENConstructFinal:
.936f	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9372	f0 33		beq $93a7			beq 	_ENCFExit 					; no decimals
.9374	5a		phy				phy
.9375	0a		asl a				asl 	a 							; x 4 and CLC
.9376	0a		asl a				asl 	a
.9377	6d 07 07	adc $0707			adc 	DecimalCount
.937a	a8		tay				tay
.937b	b9 b6 a5	lda $a5b6,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.937e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9381	b9 b7 a5	lda $a5b7,y			lda 	DecimalScalarTable-5+1,y
.9384	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9387	b9 b8 a5	lda $a5b8,y			lda 	DecimalScalarTable-5+2,y
.938a	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.938d	b9 b9 a5	lda $a5b9,y			lda 	DecimalScalarTable-5+3,y
.9390	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9393	b9 ba a5	lda $a5ba,y			lda 	DecimalScalarTable-5+4,y
.9396	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9399	a9 08		lda #$08			lda 	#NSTFloat
.939b	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.939e	7a		ply				ply
.939f	e8		inx				inx 								; multiply decimal const by decimal scalar
.93a0	20 42 a3	jsr $a342			jsr 	FloatMultiply
.93a3	ca		dex				dex
.93a4	20 d7 a1	jsr $a1d7			jsr 	FloatAdd 					; add to integer part.
.93a7					_ENCFExit:
.93a7	18		clc				clc 								; reject the digit.
.93a8	60		rts				rts
.93a9					ESTAShiftDigitIntoMantissa:
.93a9	29 0f		and #$0f			and 	#15 						; save digit
.93ab	48		pha				pha
.93ac	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.93af	48		pha				pha
.93b0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.93b3	48		pha				pha
.93b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93b7	48		pha				pha
.93b8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.93bb	48		pha				pha
.93bc	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; x 2
.93bf	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; x 4
.93c2	18		clc				clc 								; pop mantissa and add
.93c3	68		pla				pla
.93c4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.93c7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93ca	68		pla				pla
.93cb	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.93ce	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93d1	68		pla				pla
.93d2	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.93d5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93d8	68		pla				pla
.93d9	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.93dc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.93df	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; x 10
.93e2	68		pla				pla 								; add digit
.93e3	18		clc				clc
.93e4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.93e7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93ea	90 0d		bcc $93f9			bcc 	_ESTASDExit
.93ec	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.93ef	d0 08		bne $93f9			bne 	_ESTASDExit
.93f1	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.93f4	d0 03		bne $93f9			bne 	_ESTASDExit
.93f6	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.93f9					_ESTASDExit:
.93f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.93fa					EvaluateTerm:
.93fa	b1 30		lda ($30),y			lda 	(codePtr),y
.93fc	30 18		bmi $9416			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.93fe	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9400	b0 6f		bcs $9471			bcs 	_ETVariable
.9402	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9404	90 6e		bcc $9474			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9406	c9 3a		cmp #$3a			cmp 	#'9'+1
.9408	b0 6a		bcs $9474			bcs 	_ETPuncUnary
.940a	20 d8 92	jsr $92d8			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.940d					_ETNumber:
.940d	c8		iny				iny 								; keep encoding until we have the numbers
.940e	b1 30		lda ($30),y			lda 	(codePtr),y
.9410	20 db 92	jsr $92db			jsr 	EncodeNumberContinue
.9413	b0 f8		bcs $940d			bcs 	_ETNumber 					; go back if accepted.
.9415	60		rts				rts
.9416					_ETCheckUnary:
.9416	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9418	f0 41		beq $945b			beq 	_ETString
.941a	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.941c	f0 12		beq $9430			beq 	_ETHexConstant
.941e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9420	90 0b		bcc $942d			bcc 	_ETSyntaxError
.9422	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9424	b0 07		bcs $942d			bcs 	_ETSyntaxError
.9426	da		phx				phx 								; push X on the stack
.9427	0a		asl a				asl 	a 							; put vector x 2 into X
.9428	aa		tax				tax
.9429	c8		iny				iny 								; consume unary function token
.942a	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x) 				; and do it.
.942d					_ETSyntaxError:
.942d	4c f2 a5	jmp $a5f2			jmp 	SyntaxError
.9430					_ETHexConstant:
.9430	c8		iny				iny 								; skip #
.9431	c8		iny				iny 								; skip count
.9432	20 a0 98	jsr $98a0			jsr 	NSMSetZero 					; clear result
.9435					_ETHLoop:
.9435	b1 30		lda ($30),y			lda 	(codePtr),y
.9437	c8		iny				iny 								; and consume
.9438	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.943a	f0 1e		beq $945a			beq 	_ETHExit
.943c	48		pha				pha 								; save on stack.
.943d	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; x 2
.9440	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; x 4
.9443	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; x 8
.9446	20 b5 98	jsr $98b5			jsr 	NSMShiftLeft 				; x 16
.9449	68		pla				pla 								; ASCII
.944a	c9 41		cmp #$41			cmp 	#'A'
.944c	90 02		bcc $9450			bcc 	_ETHNotChar
.944e	e9 07		sbc #$07			sbc 	#7
.9450					_ETHNotChar:
.9450	29 0f		and #$0f			and 	#15 						; digit now
.9452	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9455	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9458	80 db		bra $9435			bra 	_ETHLoop 					; go round.
.945a					_ETHExit:
.945a	60		rts				rts
.945b					_ETString:
.945b	c8		iny				iny 								; look at length
.945c	b1 30		lda ($30),y			lda 	(codePtr),y
.945e	48		pha				pha
.945f	c8		iny				iny 								; first character
.9460	20 3f 9f	jsr $9f3f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9463	68		pla				pla 								; restore count and save
.9464	85 36		sta $36				sta 	zTemp0
.9466	98		tya				tya 								; add length to Y to skip it.
.9467	18		clc				clc
.9468	65 36		adc $36				adc 	zTemp0
.946a	a8		tay				tay
.946b	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.946d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9470	60		rts				rts
.9471					_ETVariable:
.9471	4c cb 94	jmp $94cb			jmp 	VariableHandler
.9474					_ETPuncUnary:
.9474	c8		iny				iny 								; consume the unary character
.9475	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9477	f0 2d		beq $94a6			beq 	_ETUnaryNegate
.9479	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.947b	f0 39		beq $94b6			beq 	_ETDereference
.947d	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.947f	f0 43		beq $94c4			beq 	_ETParenthesis
.9481	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9483	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9485	f0 06		beq $948d			beq 	_ETIndirection
.9487	e6 36		inc $36				inc 	zTemp0
.9489	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.948b	d0 a0		bne $942d			bne 	_ETSyntaxError
.948d					_ETIndirection:
.948d	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.948f	1a		inc a				inc 	a
.9490	48		pha				pha
.9491	20 fa 93	jsr $93fa			jsr 	EvaluateTerm				; evaluate the term
.9494	20 3e 92	jsr $923e			jsr 	Dereference 				; dereference it.
.9497	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.949a	d0 07		bne $94a3			bne 	_ETTypeMismatch
.949c	68		pla				pla 								; indirection 1-2
.949d	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.949f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94a2	60		rts				rts
.94a3					_ETTypeMismatch:
.94a3	4c fc a5	jmp $a5fc			jmp 	TypeError
.94a6					_ETUnaryNegate:
.94a6	20 fa 93	jsr $93fa			jsr 	EvaluateTerm				; evaluate the term
.94a9	20 3e 92	jsr $923e			jsr 	Dereference 				; dereference it.
.94ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.94af	29 10		and #$10			and 	#NSTString
.94b1	d0 f0		bne $94a3			bne 	_ETTypeMismatch
.94b3	4c 4c 98	jmp $984c			jmp 	NSMNegate  					; just toggles the sign bit.
.94b6					_ETDereference:
.94b6	20 fa 93	jsr $93fa			jsr 	EvaluateTerm				; evaluate the term
.94b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.94bc	29 20		and #$20			and 	#NSBIsReference
.94be	f0 e3		beq $94a3			beq 	_ETTypeMismatch
.94c0	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.94c3	60		rts				rts
.94c4					_ETParenthesis:
.94c4	20 29 91	jsr $9129			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.94c7	20 10 a0	jsr $a010			jsr 	CheckRightBracket 			; check for )
.94ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.94cb					VariableHandler:
.94cb	b1 30		lda ($30),y			lda 	(codePtr),y
.94cd	18		clc				clc
.94ce	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94d0	85 37		sta $37				sta 	zTemp0+1
.94d2	c8		iny				iny
.94d3	b1 30		lda ($30),y			lda 	(codePtr),y
.94d5	85 36		sta $36				sta 	zTemp0
.94d7	c8		iny				iny
.94d8	18		clc				clc									; copy variable address+3 to mantissa
.94d9	69 03		adc #$03			adc 	#3
.94db	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94de	a5 37		lda $37				lda 	zTemp0+1
.94e0	69 00		adc #$00			adc 	#0
.94e2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94e5	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.94e8	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.94eb	9e 28 06	stz $0628,x			stz 	NSExponent,x
.94ee	5a		phy				phy
.94ef	a0 02		ldy #$02			ldy 	#2 							; read type
.94f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f3	7a		ply				ply
.94f4	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.94f6	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.94f8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94fb	29 04		and #$04			and 	#NSBIsArray
.94fd	d0 01		bne $9500			bne 	_VHArray
.94ff	60		rts				rts
.9500					_VHArray:
.9500	e8		inx				inx
.9501	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9504	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9506	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9509	b1 30		lda ($30),y			lda 	(codePtr),y
.950b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.950d	d0 06		bne $9515			bne 	_VHNoSecondIndex
.950f	c8		iny				iny 								; skip the comma
.9510	e8		inx				inx
.9511	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9514	ca		dex				dex
.9515					_VHNoSecondIndex:
.9515	ca		dex				dex 								; set X back.
.9516	20 10 a0	jsr $a010			jsr 	CheckRightBracket 			; and check the right bracket.
.9519	5a		phy				phy 								; save position
.951a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.951d	85 3e		sta $3e				sta 	zaTemp
.951f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9522	85 3f		sta $3f				sta 	zaTemp+1
.9524	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9526	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9528	f0 02		beq $952c			beq 	_VHHas2Mask
.952a	a9 ff		lda #$ff			lda 	#$FF
.952c					_VHHas2Mask:
.952c	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.952f	f0 54		beq $9585			beq 	_VHBadIndex
.9531	0a		asl a				asl 	a 							; carry will be set if a second index
.9532	90 09		bcc $953d			bcc 	_VHCheckFirstIndex
.9534	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9536	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9538	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.953b	90 48		bcc $9585			bcc 	_VHBadIndex
.953d					_VHCheckFirstIndex:
.953d	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.953f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9541	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9544	90 3f		bcc $9585			bcc 	_VHBadIndex
.9546	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9548	64 37		stz $37				stz 	zTemp0+1
.954a	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.954d	30 0f		bmi $955e			bmi 	_VHNoMultiply
.954f	da		phx				phx
.9550	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9553	48		pha				pha
.9554	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9556	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9558	1a		inc a				inc 	a 							; add 1 for zero base
.9559	fa		plx				plx
.955a	20 92 a4	jsr $a492			jsr 	Multiply8x8 				; calculate -> Z0
.955d	fa		plx				plx
.955e					_VHNoMultiply:
.955e	18		clc				clc
.955f	a5 36		lda $36				lda 	zTemp0
.9561	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9564	85 36		sta $36				sta 	zTemp0
.9566	a5 37		lda $37				lda 	zTemp0+1
.9568	69 00		adc #$00			adc 	#0
.956a	85 37		sta $37				sta 	zTemp0+1
.956c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.956f	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType
.9572	18		clc				clc
.9573	b2 3e		lda ($3e)			lda 	(zaTemp)
.9575	65 36		adc $36				adc 	zTemp0
.9577	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.957a	a0 01		ldy #$01			ldy 	#1
.957c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.957e	65 37		adc $37				adc 	zTemp0+1
.9580	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9583	7a		ply				ply 								; restore position
.9584	60		rts				rts
.9585					_VHBadIndex:
.9585	a9 17		lda #$17		lda	#23
.9587	4c 20 8d	jmp $8d20		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a3c8					AbsUnary:
.a3c8	fa		plx				plx 								; restore stack pos
.a3c9	20 f4 97	jsr $97f4			jsr 	EvaluateNumber 				; get a float or int
.a3cc	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.a3cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a3d2	29 7f		and #$7f			and 	#$7F
.a3d4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a3d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.958a					AllocUnary:
.958a	fa		plx				plx 								; restore stack pos
.958b	20 2c 98	jsr $982c			jsr 	Evaluate16BitInteger		; get bytes required.
.958e	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.9591	da		phx				phx 								; save X/Y
.9592	5a		phy				phy
.9593	8a		txa				txa 								; copy X into Y
.9594	a8		tay				tay
.9595	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9598	aa		tax				tax
.9599	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.959c	20 a9 95	jsr $95a9			jsr 	AllocateXABytes 			; allocate memory
.959f	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.95a2	8a		txa				txa
.95a3	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.95a6	7a		ply				ply
.95a7	fa		plx				plx
.95a8	60		rts				rts
.95a9					AllocateXABytes:
.95a9	5a		phy				phy
.95aa	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.95ad	84 36		sty $36				sty 	zTemp0
.95af	5a		phy				phy
.95b0	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.95b3	84 37		sty $37				sty 	zTemp0+1
.95b5	5a		phy				phy
.95b6	18		clc				clc 								; add to low memory pointer
.95b7	6d 0c 07	adc $070c			adc 	lowMemPtr
.95ba	8d 0c 07	sta $070c			sta 	lowMemPtr
.95bd	8a		txa				txa
.95be	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.95c1	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.95c4					_ClearMemory:
.95c4	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.95c7	c5 36		cmp $36				cmp 	zTemp0
.95c9	d0 07		bne $95d2			bne 	_CMClearNext
.95cb	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.95ce	c5 37		cmp $37				cmp 	zTemp0+1
.95d0	f0 0c		beq $95de			beq 	_CMExit
.95d2					_CMClearNext:
.95d2	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.95d4	92 36		sta ($36)			sta 	(zTemp0)
.95d6	e6 36		inc $36				inc 	zTemp0
.95d8	d0 ea		bne $95c4			bne 	_ClearMemory
.95da	e6 37		inc $37				inc		zTemp0+1
.95dc	80 e6		bra $95c4			bra 	_ClearMemory
.95de					_CMExit:
.95de	fa		plx				plx
.95df	68		pla				pla
.95e0	7a		ply				ply
.95e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a3d8					AscUnary:
.a3d8	fa		plx				plx 								; restore stack pos
.a3d9	20 ff 97	jsr $97ff			jsr 	EvaluateString 				; get a string
.a3dc	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a3de	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.a3e1	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.a3e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a3e5					FracUnary:
.a3e5	fa		plx				plx 								; restore stack pos
.a3e6	20 f4 97	jsr $97f4			jsr 	EvaluateNumber 				; get a float or int
.a3e9	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.a3ec	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a3ef	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a3f1	f0 04		beq $a3f7			beq 	_IUZero
.a3f3	20 b5 a2	jsr $a2b5			jsr 	FloatFractionalPart
.a3f6	60		rts				rts
.a3f7					_IUZero:
.a3f7	20 a0 98	jsr $98a0			jsr 	NSMSetZero
.a3fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a3fb					IntUnary:
.a3fb	fa		plx				plx 								; restore stack pos
.a3fc	20 f4 97	jsr $97f4			jsr 	EvaluateNumber 				; get a float or int
.a3ff	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.a402	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a405	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a407	f0 03		beq $a40c			beq 	_IUExit
.a409	20 18 a3	jsr $a318			jsr 	FloatIntegerPart
.a40c					_IUExit:
.a40c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a40d					LenUnary:
.a40d	fa		plx				plx 								; restore stack pos
.a40e	20 ff 97	jsr $97ff			jsr 	EvaluateString 				; get a string
.a411	5a		phy				phy
.a412	a0 00		ldy #$00			ldy 	#0 							; find length
.a414					_LenFind:
.a414	b1 36		lda ($36),y			lda 	(zTemp0),y
.a416	f0 06		beq $a41e			beq 	_LenExit
.a418	c8		iny				iny
.a419	d0 f9		bne $a414			bne 	_LenFind
.a41b	4c f7 a5	jmp $a5f7			jmp 	RangeError 					; string > 255
.a41e					_LenExit:
.a41e	98		tya				tya
.a41f	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.a422	7a		ply				ply
.a423	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.a426	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.95e2					Unary_Not:
.95e2	fa		plx				plx
.95e3	20 17 98	jsr $9817			jsr 	EvaluateInteger 			; get integer
.95e6	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.95e9	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; zero mantissa ?
.95ec	f0 04		beq $95f2			beq 	_NotZero
.95ee	20 a0 98	jsr $98a0			jsr 	NSMSetZero
.95f1	60		rts				rts
.95f2					_NotZero:
.95f2	4c 8d 8d	jmp $8d8d			jmp 	ReturnTrue
.95f5					_UNBad:
.95f5	4c 01 a6	jmp $a601			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.95f8					Unary_Rnd:
.95f8	fa		plx				plx
.95f9	20 f4 97	jsr $97f4			jsr 	EvaluateNumber 				; number to use.
.95fc	20 10 a0	jsr $a010			jsr 	CheckRightBracket 			; closing bracket
.95ff	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9602	f0 2b		beq $962f			beq 	_URCopySeed
.9604	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9607	10 23		bpl $962c			bpl 	_URDontSeed
.9609	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.960c	49 17		eor #$17			eor 	#$17
.960e	8d 08 07	sta $0708			sta 	RandomSeed+0
.9611	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9614	49 a5		eor #$a5			eor 	#$A5
.9616	8d 09 07	sta $0709			sta 	RandomSeed+1
.9619	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.961c	49 c2		eor #$c2			eor 	#$C2
.961e	8d 0a 07	sta $070a			sta 	RandomSeed+2
.9621	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9624	49 9d		eor #$9d			eor 	#$9D
.9626	8d 0b 07	sta $070b			sta 	RandomSeed+3
.9629	20 54 96	jsr $9654			jsr 	Random32Bit
.962c					_URDontSeed:
.962c	20 54 96	jsr $9654			jsr 	Random32Bit 				; generate a number.
.962f					_URCopySeed:
.962f	ad 08 07	lda $0708			lda 	RandomSeed+0
.9632	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9635	ad 09 07	lda $0709			lda 	RandomSeed+1
.9638	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.963b	ad 0a 07	lda $070a			lda 	RandomSeed+2
.963e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9641	ad 0b 07	lda $070b			lda 	RandomSeed+3
.9644	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9646	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9649	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.964b	8d 28 06	sta $0628			sta 	NSExponent
.964e	a9 08		lda #$08			lda 	#NSTFloat
.9650	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
.9653	60		rts				rts
.9654					Random32Bit:
.9654	5a		phy				phy
.9655	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9657	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.965a	d0 03		bne $965f			bne 	_Random1
.965c	a8		tay				tay 								; if so do it 256 times
.965d	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.965f					_Random1:
.965f	0a		asl a				asl 	a 							; LSFR RNG
.9660	2e 09 07	rol $0709			rol 	RandomSeed+1
.9663	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9666	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9669	90 02		bcc $966d			bcc 	_Random2
.966b	49 c5		eor #$c5			eor 	#$C5
.966d					_Random2:
.966d	88		dey				dey
.966e	d0 ef		bne $965f			bne 	_Random1
.9670	7a		ply				ply
.9671	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a427					SgnUnary:
.a427	fa		plx				plx 								; restore stack pos
.a428	20 f4 97	jsr $97f4			jsr 	EvaluateNumber 				; get a float or int
.a42b	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.a42e	20 d0 98	jsr $98d0			jsr 	NSMIsZero 					; if zero
.a431	f0 10		beq $a443			beq 	_SGZero  					; return Int Zero
.a433	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a436	48		pha				pha
.a437	a9 01		lda #$01			lda 	#1 							; set to 1
.a439	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.a43c	68		pla				pla
.a43d	29 80		and #$80			and		#$80 						; copy the sign byte out
.a43f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a442	60		rts				rts
.a443	20 a0 98	jsr $98a0	_SGZero:jsr 	NSMSetZero
.a446	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a447					ValUnary:
.a447	fa		plx				plx 								; restore stack pos
.a448	20 5d a4	jsr $a45d			jsr 	ValMainCode 				; do the main val() code
.a44b	b0 01		bcs $a44e			bcs 	_VUError 					; couldn't convert
.a44d	60		rts				rts
.a44e					_VUError:
.a44e	4c fc a5	jmp $a5fc			jmp 	TypeError
.a451					IsValUnary:
.a451	fa		plx				plx 								; restore stack pos
.a452	20 5d a4	jsr $a45d			jsr 	ValMainCode 				; do the main val() code
.a455	b0 03		bcs $a45a			bcs 	_VUBad
.a457	4c 8d 8d	jmp $8d8d			jmp 	ReturnTrue
.a45a					_VUBad:
.a45a	4c 99 8d	jmp $8d99			jmp 	ReturnFalse
.a45d					ValMainCode:
.a45d	20 ff 97	jsr $97ff			jsr 	EvaluateString 				; get a string
.a460	20 10 a0	jsr $a010			jsr 	CheckRightBracket 			; check right bracket present
.a463	5a		phy				phy
.a464	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a466	f0 17		beq $a47f			beq 	_VMCFail2
.a468	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a46a	48		pha				pha 								; save first character
.a46b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a46d	d0 01		bne $a470			bne 	_VMCStart
.a46f	c8		iny				iny 								; skip over -
.a470					_VMCStart:
.a470	38		sec				sec 								; initialise first time round.
.a471					_VMCNext:
.a471	c8		iny				iny 								; pre-increment
.a472	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a474	f0 0c		beq $a482			beq 	_VMCSuccess 				; successful.
.a476	20 dc 92	jsr $92dc			jsr 	EncodeNumber 				; send it to the number-builder
.a479	90 03		bcc $a47e			bcc 	_VMCFail 					; if failed, give up.
.a47b	18		clc				clc 								; next time round, countinue
.a47c	80 f3		bra $a471			bra 	_VMCNext
.a47e					_VMCFail:
.a47e	68		pla				pla
.a47f					_VMCFail2:
.a47f	7a		ply				ply
.a480	38		sec				sec
.a481	60		rts				rts
.a482					_VMCSuccess:
.a482	a9 00		lda #$00			lda 	#0 							; construct final
.a484	20 dc 92	jsr $92dc			jsr 	EncodeNumber
.a487	68		pla				pla
.a488	c9 2d		cmp #$2d			cmp 	#"-"
.a48a	d0 03		bne $a48f			bne 	_VMCNotNegative
.a48c	20 4c 98	jsr $984c			jsr		NSMNegate
.a48f					_VMCNotNegative:
.a48f	7a		ply				ply
.a490	18		clc				clc
.a491	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9672					ChrUnary:
.9672	fa		plx				plx 								; restore stack pos
.9673	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger			; get value
.9676	48		pha				pha
.9677	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.967a	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.967c	20 12 a8	jsr $a812			jsr 	StringTempAllocate
.967f	68		pla				pla 								; write number to it
.9680	20 50 a8	jsr $a850			jsr 	StringTempWrite
.9683	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9684					SpcUnary:
.9684	fa		plx				plx 								; restore stack pos
.9685	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger			; get value
.9688	5a		phy				phy
.9689	48		pha				pha 								; save count
.968a	20 12 a8	jsr $a812			jsr 	StringTempAllocate
.968d	7a		ply				ply 								; to do count in Y
.968e					_SpcLoop:
.968e	c0 00		cpy #$00			cpy 	#0
.9690	f0 08		beq $969a			beq 	_SpcExit
.9692	a9 20		lda #$20			lda 	#32
.9694	20 50 a8	jsr $a850			jsr 	StringTempWrite
.9697	88		dey				dey
.9698	80 f4		bra $968e			bra 	_SPCLoop
.969a					_SpcExit:
.969a	7a		ply				ply
.969b	20 10 a0	jsr $a010			jsr 	CheckRightBracket
.969e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.969f					Unary_Str:
.969f	fa		plx				plx
.96a0	20 f4 97	jsr $97f4			jsr 	EvaluateNumber  			; get number
.96a3	20 10 a0	jsr $a010			jsr 	CheckRightBracket 			; closing bracket
.96a6	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.96a8	20 c1 96	jsr $96c1			jsr 	ConvertNumberToString 		; do the conversion.
.96ab	a9 21		lda #$21			lda		#33 						; create buffer
.96ad	20 12 a8	jsr $a812			jsr 	StringTempAllocate 			; allocate memory
.96b0	da		phx				phx
.96b1	a2 00		ldx #$00			ldx 	#0
.96b3					_USCopy:
.96b3	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.96b6	20 50 a8	jsr $a850			jsr 	StringTempWrite
.96b9	e8		inx				inx
.96ba	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.96bd	d0 f4		bne $96b3			bne 	_USCopy
.96bf	fa		plx				plx
.96c0	60		rts				rts
.96c1					ConvertNumberToString:
.96c1	5a		phy				phy 								; save code position
.96c2	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.96c5	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.96c8	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.96cb	10 0a		bpl $96d7			bpl 	_CNTSNotNegative
.96cd	29 7f		and #$7f			and 	#$7F 						; make +ve
.96cf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96d2	a9 2d		lda #$2d			lda 	#"-"
.96d4	20 3d 97	jsr $973d			jsr 	WriteDecimalBuffer
.96d7					_CNTSNotNegative:
.96d7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.96da	f0 15		beq $96f1			beq 	_CNTSNotFloat
.96dc	e8		inx				inx 								; round up
.96dd	a9 01		lda #$01			lda 	#1
.96df	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.96e2	ca		dex				dex
.96e3	bd 28 06	lda $0628,x			lda		NSExponent,x
.96e6	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.96e9	a9 08		lda #$08			lda 	#NSTFloat
.96eb	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.96ee	20 d7 a1	jsr $a1d7			jsr 	FloatAdd
.96f1					_CNTSNotFloat:
.96f1	20 1f 97	jsr $971f			jsr 	MakePlusTwoString
.96f4	20 b5 a2	jsr $a2b5			jsr 	FloatFractionalPart 		; get the fractional part
.96f7	20 79 a3	jsr $a379			jsr 	NSNormalise					; normalise , exit if zero
.96fa	f0 21		beq $971d			beq 	_CNTSExit
.96fc	a9 2e		lda #$2e			lda 	#"."
.96fe	20 3d 97	jsr $973d			jsr 	WriteDecimalBuffer 			; write decimal place
.9701					_CNTSDecimal:
.9701	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.9704	30 17		bmi $971d			bmi 	_CNTSExit
.9706	e8		inx				inx 								; x 10.0
.9707	a9 0a		lda #$0a			lda 	#10
.9709	20 a2 98	jsr $98a2			jsr 	NSMSetByte
.970c	a9 08		lda #$08			lda 	#NSTFloat
.970e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9711	ca		dex				dex
.9712	20 42 a3	jsr $a342			jsr 	FloatMultiply
.9715	20 1f 97	jsr $971f			jsr 	MakePlusTwoString
.9718	20 b5 a2	jsr $a2b5			jsr 	FloatFractionalPart 		; get the fractional part
.971b	80 e4		bra $9701			bra 	_CNTSDecimal 				; keep going.
.971d					_CNTSExit:
.971d	7a		ply				ply
.971e	60		rts				rts
.971f					MakePlusTwoString:
.971f	da		phx				phx
.9720	20 77 98	jsr $9877			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9723	e8		inx				inx 								; access it
.9724	e8		inx				inx
.9725	20 18 a3	jsr $a318			jsr 	FloatIntegerPart 			; make it an integer
.9728	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.972a	20 81 a1	jsr $a181			jsr 	ConvertInt32
.972d	a2 00		ldx #$00			ldx	 	#0
.972f					_MPTSCopy:
.972f	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.9732	20 3d 97	jsr $973d			jsr 	WriteDecimalBuffer
.9735	e8		inx				inx
.9736	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.9739	d0 f4		bne $972f			bne 	_MPTSCopy
.973b	fa		plx				plx
.973c	60		rts				rts
.973d					WriteDecimalBuffer:
.973d	da		phx				phx
.973e	ae 15 07	ldx $0715			ldx 	dbOffset
.9741	9d 99 08	sta $0899,x			sta 	DecimalBuffer,x
.9744	9e 9a 08	stz $089a,x			stz 	DecimalBuffer+1,x
.9747	ee 15 07	inc $0715			inc 	dbOffset
.974a	fa		plx				plx
.974b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.974c					Unary_Left:
.974c	fa		plx				plx
.974d	18		clc				clc 								; only one parameter
.974e	20 c3 97	jsr $97c3			jsr 	SubstringInitial 			; set up.
.9751	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9754	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9757	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.975a	80 2c		bra $9788			bra 	SubstringMain
.975c					Unary_Right:
.975c	fa		plx				plx
.975d	18		clc				clc 								; only one parameter
.975e	20 c3 97	jsr $97c3			jsr 	SubstringInitial 			; set up.
.9761	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9764	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9767	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.976a	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.976d	b0 02		bcs $9771			bcs 	_URNotUnderflow
.976f	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9771					_URNotUnderFlow:
.9771	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9774	80 12		bra $9788			bra 	SubStringMain
.9776					Unary_Mid:
.9776	fa		plx				plx
.9777	38		sec				sec 								; two parameters
.9778	20 c3 97	jsr $97c3			jsr 	SubstringInitial 			; set up.
.977b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.977e	f0 05		beq $9785			beq 	_UMError
.9780	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9783	80 03		bra $9788			bra 	SubStringMain
.9785					_UMError:
.9785	4c 01 a6	jmp $a601			jmp 	ArgumentError
.9788					SubStringMain:
.9788	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.978b	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.978e	b0 2d		bcs $97bd			bcs 	_SSMNull 					; if so, return an empty string.
.9790	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9793	f0 28		beq $97bd			beq 	_SSMNull 					; return empty string.
.9795	18		clc				clc 								; add the offset +1 to the address and
.9796	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9799	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.979c	85 36		sta $36				sta 	zTemp0
.979e	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.97a1	69 00		adc #$00			adc 	#0
.97a3	85 37		sta $37				sta 	zTemp0+1
.97a5					_SSMNoCarry:
.97a5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.97a8	20 12 a8	jsr $a812			jsr 	StringTempAllocate 			; allocate that many characters
.97ab	5a		phy				phy 								; save Y
.97ac	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.97ae					_SSMCopy:
.97ae	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.97b0	f0 09		beq $97bb			beq 	_SSMEString 				; no more to copy
.97b2	20 50 a8	jsr $a850			jsr 	StringTempWrite 			; and write it out.
.97b5	c8		iny				iny
.97b6	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.97b9	d0 f3		bne $97ae			bne 	_SSMCopy
.97bb					_SSMEString:
.97bb	7a		ply				ply
.97bc					_SSMExit:
.97bc	60		rts				rts
.97bd					_SSMNull:
.97bd	a9 00		lda #$00			lda 	#0
.97bf	20 12 a8	jsr $a812			jsr 	StringTempAllocate
.97c2	60		rts				rts
.97c3					SubstringInitial:
.97c3	da		phx				phx 								; save initial stack position
.97c4	08		php				php 								; save carry on stack indicating 2 parameters
.97c5	20 ff 97	jsr $97ff			jsr 	EvaluateString 				; get a string
.97c8	5a		phy				phy 								; calculate length to exponent.
.97c9	a0 ff		ldy #$ff			ldy 	#$FF
.97cb					_SIFindLength:
.97cb	c8		iny				iny
.97cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.97ce	d0 fb		bne $97cb			bne 	_SIFindLength
.97d0	98		tya				tya
.97d1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97d4	7a		ply				ply
.97d5	e8		inx				inx
.97d6	20 18 a0	jsr $a018			jsr 	CheckComma 					; comma next
.97d9	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger 		; get next parameter
.97dc	28		plp				plp 								; is it the last parameter ?
.97dd	90 07		bcc $97e6			bcc 	_SSIExit 					; if so, exit.
.97df	e8		inx				inx
.97e0	20 18 a0	jsr $a018			jsr 	CheckComma 					; comma next
.97e3	20 38 98	jsr $9838			jsr 	Evaluate8BitInteger 		; get last parameter
.97e6					_SSIExit:
.97e6	fa		plx				plx
.97e7	20 10 a0	jsr $a010			jsr 	CheckRightBracket 			; check closing bracket
.97ea	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.97eb					EvaluateValue:
.97eb	48		pha				pha
.97ec	20 29 91	jsr $9129			jsr		EvaluateExpression 			; expression
.97ef	20 3e 92	jsr $923e			jsr 	Dereference					; derefernce it
.97f2	68		pla				pla
.97f3	60		rts				rts
.97f4					EvaluateNumber:
.97f4	20 eb 97	jsr $97eb			jsr 	EvaluateValue 				; get a value
.97f7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.97fa	29 10		and #$10			and 	#NSBIsString
.97fc	d0 16		bne $9814			bne 	HelperTypeError
.97fe	60		rts				rts
.97ff					EvaluateString:
.97ff	20 eb 97	jsr $97eb			jsr 	EvaluateValue 				; get a value
.9802	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9805	29 10		and #$10			and 	#NSBIsString
.9807	f0 0b		beq $9814			beq 	HelperTypeError
.9809					CopyAddressToTemp0:
.9809	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.980c	85 36		sta $36				sta 	zTemp0
.980e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9811	85 37		sta $37				sta 	zTemp0+1
.9813	60		rts				rts
.9814					HelperTypeError:
.9814	4c fc a5	jmp $a5fc			jmp 	TypeError
.9817					EvaluateInteger:
.9817	20 f4 97	jsr $97f4			jsr 	EvaluateNumber
.981a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.981d	d0 0a		bne $9829			bne 	HelperValueError 			; if not, it's a float.
.981f	60		rts				rts
.9820					EvaluateUnsignedInteger:
.9820	20 17 98	jsr $9817			jsr 	EvaluateInteger 			; check integer is +ve
.9823	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9826	30 01		bmi $9829			bmi 	HelperValueError
.9828	60		rts				rts
.9829					HelperValueError:
.9829	4c 01 a6	jmp $a601			jmp 	ArgumentError
.982c					Evaluate16BitInteger:
.982c	20 20 98	jsr $9820			jsr	 	EvaluateUnsignedInteger		; get integer
.982f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9832	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9835	d0 f2		bne $9829			bne 	HelperValueError
.9837	60		rts				rts
.9838					Evaluate8BitInteger:
.9838	20 20 98	jsr $9820			jsr	 	EvaluateUnsignedInteger 	; get an integer
.983b	d0 ec		bne $9829			bne 	HelperValueError
.983d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9840	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9843	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9846	d0 e1		bne $9829			bne 	HelperValueError
.9848	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.984b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a492					Multiply8x8:
.a492	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a493	85 36		sta $36			  	sta 	zTemp0
.a495	86 37		stx $37				stx 	zTemp0+1
.a497	a9 00		lda #$00			lda 	#0
.a499	a2 08		ldx #$08			ldx 	#8
.a49b					_M88Loop:
.a49b	90 03		bcc $a4a0			bcc 	_M88NoAdd
.a49d	18		clc				clc
.a49e	65 37		adc $37				adc 	zTemp0+1
.a4a0					_M88NoAdd:
.a4a0	6a		ror a				ror 	a
.a4a1	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a4a3	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a4a4	d0 f5		bne $a49b			bne 	_M88Loop
.a4a6	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a4a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.984c					NSMNegate:
.984c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.984f	49 80		eor #$80			eor 	#NSBIsNegative
.9851	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9854	60		rts				rts
.9855					NSMNegateMantissa:
.9855	38		sec				sec
.9856	a9 00		lda #$00			lda 	#0
.9858	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.985b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.985e	a9 00		lda #$00			lda 	#0
.9860	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9863	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9866	a9 00		lda #$00			lda 	#0
.9868	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.986b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.986e	a9 00		lda #$00			lda 	#0
.9870	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9873	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9876	60		rts				rts
.9877					NSMShiftUpTwo:
.9877	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.987a	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.987d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9880	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9883	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9886	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9889	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.988c	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.988f	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9892	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9895	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9898	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.989b	60		rts				rts
.989c					NSMSetZeroMantissaOnly:
.989c	a9 00		lda #$00			lda 	#0
.989e	80 08		bra $98a8			bra 	NSMSetMantissa
.98a0					NSMSetZero:
.98a0	a9 00		lda #$00			lda 	#0
.98a2					NSMSetByte:
.98a2	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.98a5	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.98a8					NSMSetMantissa:
.98a8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.98ab	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.98ae	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.98b1	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.98b4	60		rts				rts
.98b5					NSMShiftLeft:
.98b5	18		clc				clc
.98b6					NSMRotateLeft:
.98b6	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.98b9	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.98bc	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.98bf	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.98c2	60		rts				rts
.98c3					NSMShiftRight:
.98c3	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.98c6	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.98c9	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.98cc	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.98cf	60		rts				rts
.98d0					NSMIsZero:
.98d0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.98d3	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.98d6	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.98d9	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.98dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a4a9					Assemble_ora:
.a4a9	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4ac	01					.byte $01
.a4ad					Assemble_and:
.a4ad	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4b0	21					.byte $21
.a4b1					Assemble_eor:
.a4b1	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4b4	41					.byte $41
.a4b5					Assemble_adc:
.a4b5	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4b8	61					.byte $61
.a4b9					Assemble_sta:
.a4b9	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4bc	81					.byte $81
.a4bd					Assemble_lda:
.a4bd	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4c0	a1					.byte $a1
.a4c1					Assemble_cmp:
.a4c1	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4c4	c1					.byte $c1
.a4c5					Assemble_sbc:
.a4c5	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4c8	e1					.byte $e1
.a4c9					Assemble_asl:
.a4c9	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4cc	02					.byte $02
>a4cd	75					.byte $75
.a4ce					Assemble_rol:
.a4ce	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4d1	22					.byte $22
>a4d2	75					.byte $75
.a4d3					Assemble_lsr:
.a4d3	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4d6	42					.byte $42
>a4d7	75					.byte $75
.a4d8					Assemble_ror:
.a4d8	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4db	62					.byte $62
>a4dc	75					.byte $75
.a4dd					Assemble_stx:
.a4dd	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4e0	82					.byte $82
>a4e1	50					.byte $50
.a4e2					Assemble_ldx:
.a4e2	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4e5	a2					.byte $a2
>a4e6	d0					.byte $d0
.a4e7					Assemble_dec:
.a4e7	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4ea	c2					.byte $c2
>a4eb	55					.byte $55
.a4ec					Assemble_inc:
.a4ec	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4ef	e2					.byte $e2
>a4f0	55					.byte $55
.a4f1					Assemble_stz:
.a4f1	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4f4	60					.byte $60
>a4f5	44					.byte $44
.a4f6					Assemble_bit:
.a4f6	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4f9	20					.byte $20
>a4fa	55					.byte $55
.a4fb					Assemble_sty:
.a4fb	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4fe	80					.byte $80
>a4ff	54					.byte $54
.a500					Assemble_ldy:
.a500	20 03 82	jsr $8203		jsr	AssembleGroup2
>a503	a0					.byte $a0
>a504	d5					.byte $d5
.a505					Assemble_cpy:
.a505	20 03 82	jsr $8203		jsr	AssembleGroup2
>a508	c0					.byte $c0
>a509	d4					.byte $d4
.a50a					Assemble_cpx:
.a50a	20 03 82	jsr $8203		jsr	AssembleGroup2
>a50d	e0					.byte $e0
>a50e	d0					.byte $d0
.a50f					Assemble_tsb:
.a50f	20 03 82	jsr $8203		jsr	AssembleGroup2
>a512	00					.byte $00
>a513	50					.byte $50
.a514					Assemble_trb:
.a514	20 03 82	jsr $8203		jsr	AssembleGroup2
>a517	10					.byte $10
>a518	50					.byte $50
.a519					Assemble_jsr:
.a519	20 03 82	jsr $8203		jsr	AssembleGroup2
>a51c	14					.byte $14
>a51d	10					.byte $10
.a51e					Assemble_jmp:
.a51e	20 03 82	jsr $8203		jsr	AssembleGroup2
>a521	40					.byte $40
>a522	10					.byte $10
.a523					Assemble_bpl:
.a523	20 54 82	jsr $8254		jsr	AssembleGroup3
>a526	10					.byte $10
.a527					Assemble_bmi:
.a527	20 54 82	jsr $8254		jsr	AssembleGroup3
>a52a	30					.byte $30
.a52b					Assemble_bvc:
.a52b	20 54 82	jsr $8254		jsr	AssembleGroup3
>a52e	50					.byte $50
.a52f					Assemble_bvs:
.a52f	20 54 82	jsr $8254		jsr	AssembleGroup3
>a532	70					.byte $70
.a533					Assemble_bcc:
.a533	20 54 82	jsr $8254		jsr	AssembleGroup3
>a536	90					.byte $90
.a537					Assemble_bcs:
.a537	20 54 82	jsr $8254		jsr	AssembleGroup3
>a53a	b0					.byte $b0
.a53b					Assemble_bne:
.a53b	20 54 82	jsr $8254		jsr	AssembleGroup3
>a53e	d0					.byte $d0
.a53f					Assemble_beq:
.a53f	20 54 82	jsr $8254		jsr	AssembleGroup3
>a542	f0					.byte $f0
.a543					Assemble_bra:
.a543	20 54 82	jsr $8254		jsr	AssembleGroup3
>a546	80					.byte $80
.a547					Assemble_brk:
.a547	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a54a	00					.byte $00
.a54b					Assemble_php:
.a54b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a54e	08					.byte $08
.a54f					Assemble_clc:
.a54f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a552	18					.byte $18
.a553					Assemble_plp:
.a553	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a556	28					.byte $28
.a557					Assemble_sec:
.a557	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a55a	38					.byte $38
.a55b					Assemble_rti:
.a55b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a55e	40					.byte $40
.a55f					Assemble_pha:
.a55f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a562	48					.byte $48
.a563					Assemble_cli:
.a563	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a566	58					.byte $58
.a567					Assemble_phy:
.a567	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a56a	5a					.byte $5a
.a56b					Assemble_rts:
.a56b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a56e	60					.byte $60
.a56f					Assemble_pla:
.a56f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a572	68					.byte $68
.a573					Assemble_sei:
.a573	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a576	78					.byte $78
.a577					Assemble_ply:
.a577	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a57a	7a					.byte $7a
.a57b					Assemble_dey:
.a57b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a57e	88					.byte $88
.a57f					Assemble_txa:
.a57f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a582	8a					.byte $8a
.a583					Assemble_tya:
.a583	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a586	98					.byte $98
.a587					Assemble_txs:
.a587	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a58a	9a					.byte $9a
.a58b					Assemble_tay:
.a58b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a58e	a8					.byte $a8
.a58f					Assemble_tax:
.a58f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a592	aa					.byte $aa
.a593					Assemble_clv:
.a593	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a596	b8					.byte $b8
.a597					Assemble_tsx:
.a597	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a59a	ba					.byte $ba
.a59b					Assemble_iny:
.a59b	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a59e	c8					.byte $c8
.a59f					Assemble_dex:
.a59f	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a5a2	ca					.byte $ca
.a5a3					Assemble_cld:
.a5a3	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a5a6	d8					.byte $d8
.a5a7					Assemble_phx:
.a5a7	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a5aa	da					.byte $da
.a5ab					Assemble_inx:
.a5ab	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a5ae	e8					.byte $e8
.a5af					Assemble_nop:
.a5af	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a5b2	ea					.byte $ea
.a5b3					Assemble_sed:
.a5b3	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a5b6	f8					.byte $f8
.a5b7					Assemble_plx:
.a5b7	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a5ba	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a5bb					DecimalScalarTable:
>a5bb	66 66 66 66				.dword $66666666 ; 0.1
>a5bf	de					.byte $de
>a5c0	1f 85 eb 51				.dword $51eb851f ; 0.01
>a5c4	db					.byte $db
>a5c5	4c 37 89 41				.dword $4189374c ; 0.001
>a5c9	d8					.byte $d8
>a5ca	ac 8b db 68				.dword $68db8bac ; 0.0001
>a5ce	d4					.byte $d4
>a5cf	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a5d3	d1					.byte $d1
>a5d4	83 de 1b 43				.dword $431bde83 ; 1e-06
>a5d8	ce					.byte $ce
>a5d9	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a5dd	ca					.byte $ca
>a5de	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a5e2	c7					.byte $c7
>a5e3	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a5e7	c4					.byte $c4
>a5e8	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a5ec	c0					.byte $c0
>a5ed	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a5f1	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a5f2					SyntaxError:
.a5f2	a9 02		lda #$02		lda	#2
.a5f4	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a5f7					RangeError:
.a5f7	a9 04		lda #$04		lda	#4
.a5f9	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a5fc					TypeError:
.a5fc	a9 05		lda #$05		lda	#5
.a5fe	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a601					ArgumentError:
.a601	a9 07		lda #$07		lda	#7
.a603	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a606					NotDoneError:
.a606	a9 0c		lda #$0c		lda	#12
.a608	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a60b					ErrorText:
>a60b	42 72 65 61 6b 00			.text	"Break",0
>a611	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a619	72 72 6f 72 00
>a61e	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a626	20 62 79 20 7a 65 72 6f 00
>a62f	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a637	61 6e 67 65 00
>a63c	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a644	6d 61 74 63 68 00
>a64a	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a652	65 6d 6f 72 79 00
>a658	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a660	61 72 67 75 6d 65 6e 74 00
>a669	53 74 6f 70 00				.text	"Stop",0
>a66e	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a676	6f 6f 20 6c 6f 6e 67 00
>a67e	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a686	6e 20 66 61 69 6c 65 64 00
>a68f	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a697	61 74 61 00
>a69b	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a6a3	65 6e 74 65 64 00
>a6a9	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a6b1	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a6bd	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a6c5	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a6d2	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a6da	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a6e7	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a6ef	68 6f 75 74 20 57 68 69 6c 65 00
>a6fa	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a702	68 6f 75 74 20 46 6f 72 00
>a70b	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a713	61 63 6b 20 66 75 6c 6c 00
>a71c	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a724	75 63 74 75 72 65 00
>a72b	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a733	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a740	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a748	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a756	41 72 72 61 79 20 73 69			.text	"Array size",0
>a75e	7a 65 00
>a761	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a769	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a771	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 236."
>a779	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>a789	32 32 2e 20 42 75 69 6c 64 20 32 33 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.98dd					StackPushByte:
.98dd	48		pha				pha 								; save byte
.98de	a5 34		lda $34				lda 	BasicStack
.98e0	d0 02		bne $98e4			bne 	_SPBNoBorrow
.98e2	c6 35		dec $35				dec 	BasicStack+1
.98e4					_SPBNoBorrow:
.98e4	c6 34		dec $34				dec 	BasicStack
.98e6	68		pla				pla 								; get back and write
.98e7	92 34		sta ($34)			sta 	(BasicStack)
.98e9	60		rts				rts
.98ea					StackPopByte:
.98ea	b2 34		lda ($34)			lda 	(BasicStack)
.98ec	e6 34		inc $34				inc 	BasicStack
.98ee	d0 02		bne $98f2			bne 	_SPBNoCarry
.98f0	e6 35		inc $35				inc 	BasicStack+1
.98f2					_SPBNoCarry:
.98f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.98f3					StackOpen:
.98f3	48		pha				pha 								; save frame byte
.98f4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.98f6	0a		asl a				asl 	a 							; claim twice this for storage
.98f7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.98f9	38		sec				sec 								; so basically subtracting from
.98fa	65 34		adc $34				adc 	basicStack 	 				; basicStack
.98fc	85 34		sta $34				sta 	basicStack
.98fe	b0 08		bcs $9908			bcs 	_SONoBorrow
.9900	c6 35		dec $35				dec 	basicStack+1
.9902	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9904	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9906	90 04		bcc $990c			bcc 	_SOMemory
.9908					_SONoBorrow:
.9908	68		pla				pla 								; get marker back and write at TOS
.9909	92 34		sta ($34)			sta 	(basicStack)
.990b	60		rts				rts
.990c					_SOMemory:
.990c							ERR_STACK
.990c					StackClose:
.990c	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.990e	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9910	0a		asl a				asl 	a 							; claim twice this.
.9911	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9913	85 34		sta $34				sta 	basicStack
.9915	90 02		bcc $9919			bcc 	_SCExit
.9917	e6 35		inc $35				inc 	basicStack+1
.9919					_SCExit:
.9919	60		rts				rts
.991a					StackCheckFrame:
.991a	48		pha				pha
.991b					_StackRemoveLocals:
.991b	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.991d	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.991f	b0 05		bcs $9926			bcs 	_SCNoLocal
.9921	20 b7 9f	jsr $9fb7			jsr 	LocalPopValue
.9924	80 f5		bra $991b			bra 	_StackRemoveLocals
.9926					_SCNoLocal:
.9926	68		pla				pla
.9927	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9929	29 f0		and #$f0			and 	#$F0 						; check type bits
.992b	d0 01		bne $992e			bne 	_SCFError 					; different, we have structures mixed up
.992d	60		rts				rts
.992e					_SCFError:
.992e	8a		txa				txa 								; report error X
.992f	4c 20 8d	jmp $8d20			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9932					STKSaveCodePosition:
.9932	5a		phy				phy
.9933	98		tya				tya 								; save Y
.9934	a0 05		ldy #$05			ldy 	#5
.9936	91 34		sta ($34),y			sta 	(basicStack),y
.9938	88		dey				dey 								; save Code Pointer
.9939					_STKSaveLoop:
.9939	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.993c	91 34		sta ($34),y			sta 	(basicStack),y
.993e	88		dey				dey
.993f	d0 f8		bne $9939			bne 	_STKSaveLoop
.9941	7a		ply				ply
.9942	60		rts				rts
.9943					STKLoadCodePosition:
.9943	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9945					_STKLoadLoop:
.9945	b1 34		lda ($34),y			lda 	(basicStack),y
.9947	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.994a	c8		iny				iny
.994b	c0 05		cpy #$05			cpy 	#5
.994d	d0 f6		bne $9945			bne 	_STKLoadLoop
.994f	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9951	a8		tay				tay
.9952	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9953					StackReset:
.9953	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9955	85 34		sta $34				sta 	0+basicStack
.9957	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9959	85 35		sta $35				sta 	1+basicStack
.995b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.995d	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.995f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a797					StringConcrete:
.a797	5a		phy				phy 								; save position on stack
.a798	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a79b	85 38		sta $38				sta 	zTemp1
.a79d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a7a0	85 39		sta $39				sta 	zTemp1+1
.a7a2	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a7a4					_SALength:
.a7a4	c8		iny				iny
.a7a5	b1 38		lda ($38),y			lda 	(zTemp1),y
.a7a7	d0 fb		bne $a7a4			bne 	_SALength
.a7a9	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a7ab	b0 3f		bcs $a7ec			bcs 	_SALengthError
.a7ad	98		tya				tya 				 				; length of the new string
.a7ae	18		clc				clc
.a7af	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a7b1	90 02		bcc $a7b5			bcc 	_SAHaveLength
.a7b3	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a7b5					_SAHaveLength:
.a7b5	48		pha				pha 								; save length.
.a7b6	38		sec				sec
.a7b7	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a7b9	6d 0e 07	adc $070e			adc 	StringMemory
.a7bc	8d 0e 07	sta $070e			sta 	StringMemory
.a7bf	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a7c1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a7c4	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a7c6	6d 0f 07	adc $070f			adc 	StringMemory+1
.a7c9	8d 0f 07	sta $070f			sta 	StringMemory+1
.a7cc	85 3b		sta $3b				sta 	zTemp2+1
.a7ce	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a7d1	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a7d2	38		sec				sec
.a7d3	e9 03		sbc #$03			sbc 	#3
.a7d5	92 3a		sta ($3a)			sta 	(zTemp2)
.a7d7	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a7d9	a0 01		ldy #$01			ldy 	#1
.a7db	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a7dd					_SACopyNewString:
.a7dd	a0 00		ldy #$00			ldy 	#0
.a7df					_SACopyNSLoop:
.a7df	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a7e1	c8		iny				iny 								; write two on in string storage
.a7e2	c8		iny				iny
.a7e3	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a7e5	88		dey				dey 								; this makes it one one.
.a7e6	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a7e8	d0 f5		bne $a7df			bne 	_SACopyNSLoop
.a7ea	7a		ply				ply
.a7eb	60		rts				rts
.a7ec					_SALengthError:
.a7ec	a9 09		lda #$09		lda	#9
.a7ee	4c 20 8d	jmp $8d20		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a7f1					StringSystemInitialise:
.a7f1	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a7f3	8d 0e 07	sta $070e			sta 	0+StringMemory
.a7f6	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a7f8	8d 0f 07	sta $070f			sta 	1+StringMemory
.a7fb	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a7fe	60		rts				rts
.a7ff					StringSpaceInitialise:
.a7ff	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a801	8d 10 07	sta $0710			sta 	StringInitialised
.a804	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a807	8d 11 07	sta $0711			sta 	StringTempPointer
.a80a	ad 0f 07	lda $070f			lda 	StringMemory+1
.a80d	3a		dec a				dec 	a
.a80e	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a811	60		rts				rts
.a812					StringTempAllocate:
.a812	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a814	b0 35		bcs $a84b			bcs 	_STALength
.a816	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a819	30 05		bmi $a820			bmi 	_STAAllocate
.a81b	48		pha				pha 								; save value to subtract.
.a81c	20 ff a7	jsr $a7ff			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a81f	68		pla				pla 								; restore it
.a820					_STAAllocate:
.a820	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a822	18		clc				clc  								; deliberate allows one more
.a823	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a826	8d 11 07	sta $0711			sta 	StringTempPointer
.a829	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a82c	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a82e	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a831	69 ff		adc #$ff			adc 	#$FF
.a833	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a836	85 3d		sta $3d				sta 	zsTemp+1
.a838	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a83b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a83e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a841	a9 10		lda #$10			lda 	#NSTString
.a843	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a846	a9 00		lda #$00			lda 	#0 							; clear the target string
.a848	92 3c		sta ($3c)			sta 	(zsTemp)
.a84a	60		rts				rts
.a84b					_STALength:
.a84b	a9 09		lda #$09		lda	#9
.a84d	4c 20 8d	jmp $8d20		jmp	ErrorHandler
.a850					StringTempWrite:
.a850	48		pha				pha
.a851	92 3c		sta ($3c)			sta 	(zsTemp)
.a853	e6 3c		inc $3c				inc 	zsTemp
.a855	d0 02		bne $a859			bne 	_STWNoCarry
.a857	e6 3d		inc $3d				inc 	zsTemp+1
.a859					_STWNoCarry:
.a859	a9 00		lda #$00			lda 	#0
.a85b	92 3c		sta ($3c)			sta 	(zsTemp)
.a85d	68		pla				pla
.a85e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9960					BackloadProgram:
.9960	a2 ff		ldx #$ff			ldx 	#$FF
.9962	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.9965	20 8f 99	jsr $998f			jsr 	BLReadByte
.9968	30 1e		bmi $9988			bmi 	_BPExit
.996a					_BPCopy:
.996a	e8		inx				inx  								; copy byte in
.996b	9d 26 08	sta $0826,x			sta 	lineBuffer,x
.996e	9e 27 08	stz $0827,x			stz 	lineBuffer+1,x
.9971	20 8f 99	jsr $998f			jsr 	BLReadByte 					; read next byte
.9974	30 0a		bmi $9980			bmi 	_BPEndLine 					; -ve = EOL
.9976	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9978	d0 02		bne $997c			bne 	_BPNotTab
.997a	a9 20		lda #$20			lda 	#' '
.997c					_BPNotTab:
.997c	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.997e	b0 ea		bcs $996a			bcs 	_BPCopy
.9980					_BPEndLine:
.9980	20 b3 9c	jsr $9cb3			jsr 	TokeniseLine 				; tokenise the line.
.9983	20 44 84	jsr $8444			jsr 	EditProgramCode
.9986	80 d8		bra $9960			bra 	BackloadProgram
.9988					_BPExit:
.9988	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.998b	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variables etc.
.998e	60		rts				rts
.998f					BLReadByte:
.998f					_BLLoad:
.998f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9992	ee 90 99	inc $9990			inc 	_BLLoad+1
.9995	d0 03		bne $999a			bne 	_BLNoCarry
.9997	ee 91 99	inc $9991			inc 	_BLLoad+2
.999a					_BLNoCarry:
.999a	c9 00		cmp #$00			cmp 	#0
.999c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.999d					TokeniseSearchTable:
.999d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.999f	85 36		sta $36				sta 	zTemp0
.99a1	a0 00		ldy #$00			ldy 	#0
.99a3	a9 80		lda #$80			lda 	#$80 						; token #
.99a5	85 38		sta $38				sta 	zTemp1
.99a7					_TSTLoop:
.99a7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.99a9	30 49		bmi $99f4			bmi 	_TSTFail 					; -ve = end of table
.99ab	f0 2e		beq $99db			beq 	_TSTNext 					; zero, check next it's a dummy
.99ad	c8		iny				iny 								; get the hash
.99ae	b1 36		lda ($36),y			lda 	(zTemp0),y
.99b0	88		dey				dey
.99b1	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.99b4	d0 25		bne $99db			bne 	_TSTNext
.99b6	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.99b9	38		sec				sec
.99ba	ed 00 07	sbc $0700			sbc 	identStart
.99bd	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.99bf	d0 1a		bne $99db			bne 	_TSTNext
.99c1	5a		phy				phy 								; save Y , we might fail
.99c2	c8		iny				iny 								; point to text
.99c3	c8		iny				iny
.99c4	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.99c7					_TSTCompareName:
.99c7	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; compare text.
.99ca	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.99cc	d0 0c		bne $99da			bne 	_TSTNextPullY 				; fail, pullY and do next
.99ce	e8		inx				inx
.99cf	c8		iny				iny
.99d0	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.99d3	d0 f2		bne $99c7			bne 	_TSTCompareName
.99d5	7a		ply				ply 								; throw Y
.99d6	a5 38		lda $38				lda 	zTemp1 						; get token #
.99d8	38		sec				sec 								; return with CS = passed.
.99d9	60		rts				rts
.99da					_TSTNextPullY:
.99da	7a		ply				ply 								; restore current, fall through.
.99db					_TSTNext:
.99db	e6 38		inc $38				inc 	zTemp1 						; token counter
.99dd	98		tya				tya
.99de	18		clc				clc
.99df	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.99e1	1a		inc a				inc 	a 							; +1
.99e2	1a		inc a				inc 	a 							; +2
.99e3	a8		tay				tay
.99e4	10 c1		bpl $99a7			bpl 	_TSTLoop 					; if Y < $80 loop back
.99e6	98		tya				tya 								; add Y to zTemp0 and reset Y
.99e7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.99e9	18		clc				clc  								; but have tables > 255 bytes
.99ea	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.99ec	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.99ee	90 b7		bcc $99a7			bcc 	_TSTLoop
.99f0	e6 37		inc $37				inc 	zTemp0+1
.99f2	80 b3		bra $99a7			bra 	_TSTLoop
.99f4					_TSTFail:
.99f4	18		clc				clc
.99f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.99f6					KeywordSet0:
>99f6	00 65					.text	0,$65,""               ; $80 !0:EOF
>99f8	00 58					.text	0,$58,""               ; $81 !1:SH1
>99fa	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99fc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9a02	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9a0a	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9a10	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9a17	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9a1e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9a25	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9a2b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9a33	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9a3b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9a41	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9a48	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9a4e	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9a56	28
>9a57	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9a5f	28
>9a60	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9a66	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9a6c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9a72	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9a79	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9a7f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9a85	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9a8a	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9a8e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9a94	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9a9c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9aa3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9aaa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9ab2	43
>9ab3	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9ab9	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9abf	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9ac6	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9acc	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9ad2	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9ad7	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9add	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9ae2	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9aea	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9af0	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9af7	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9afd	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9b02	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9b09	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9b10	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9b16	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9b1b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9b23	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9b27	ff					.text	$FF
.9b28					KeywordSet1:
>9b28	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b2a	00 58					.text	0,$58,""               ; $81 !1:SH1
>9b2c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9b2e	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9b36	4c 45
>9b38	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9b40	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9b47	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9b4c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9b52	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9b57	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9b5f	45
>9b60	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9b65	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9b6b	ff					.text	$FF
.9b6c					KeywordSet2:
>9b6c	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b6e	00 58					.text	0,$58,""               ; $81 !1:SH1
>9b70	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9b72	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9b77	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9b7c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9b81	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9b86	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9b8b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9b90	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9b95	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9b9a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9b9f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9ba4	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9ba9	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9bae	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9bb3	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9bb8	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9bbd	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9bc2	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9bc7	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9bcc	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9bd1	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9bd6	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9bdb	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9be0	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9be5	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9bea	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9bef	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9bf4	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9bf9	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9bfe	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9c03	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9c08	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9c0d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9c12	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9c17	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9c1c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9c21	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9c26	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9c2b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9c30	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9c35	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9c3a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9c3f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9c44	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9c49	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9c4e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9c53	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9c58	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9c5d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9c62	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9c67	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9c6c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9c71	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9c76	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9c7b	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9c80	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9c85	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9c8a	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9c8f	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9c94	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9c99	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9c9e	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9ca3	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9ca8	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9cad	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9cb2	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9cb3					TokeniseLine:
.9cb3	20 3b 9e	jsr $9e3b			jsr 	FixLineBufferCase 			; fix line case
.9cb6	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9cb8	8d 26 07	sta $0726			sta 	tokenOffset
.9cbb	9c 27 07	stz $0727			stz 	tokenLineNumber
.9cbe	9c 28 07	stz $0728			stz 	tokenLineNumber+1
.9cc1	a2 ff		ldx #$ff			ldx 	#$FF
.9cc3					_TKFindFirst:
.9cc3	e8		inx				inx
.9cc4	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9cc7	f0 79		beq $9d42			beq 	_TKExit
.9cc9	c9 20		cmp #$20			cmp 	#' '
.9ccb	90 f6		bcc $9cc3			bcc 	_TKFindFirst
.9ccd	c9 30		cmp #$30			cmp 	#'0'
.9ccf	90 07		bcc $9cd8			bcc 	_TKNoLineNumber
.9cd1	c9 3a		cmp #$3a			cmp 	#'9'+1
.9cd3	b0 03		bcs $9cd8			bcs 	_TKNoLineNumber
.9cd5	20 65 9e	jsr $9e65			jsr 	TokeniseExtractLineNumber
.9cd8					_TKNoLineNumber:
.9cd8					_TKTokeniseLoop:
.9cd8	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9cdb	f0 65		beq $9d42			beq 	_TKExit
.9cdd	e8		inx				inx
.9cde	c9 20		cmp #$20			cmp 	#' '
.9ce0	f0 f6		beq $9cd8			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9ce2	ca		dex				dex 								; undo last get, A contains character, X is position.
.9ce3	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9ce5	f0 61		beq $9d48			beq 	_TKTokeniseIdentifier
.9ce7	c9 41		cmp #$41			cmp 	#'A'
.9ce9	90 04		bcc $9cef			bcc 	_TKTokenisePunctuation
.9ceb	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9ced	90 59		bcc $9d48			bcc 	_TKTokeniseIdentifier
.9cef					_TKTokenisePunctuation:
.9cef	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9cf1	f0 27		beq $9d1a			beq 	_TKString
.9cf3	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9cf5	f0 28		beq $9d1f			beq 	_TKHexConstant
.9cf7	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9cf9	f0 29		beq $9d24			beq 	_TKCheckDouble
.9cfb	c9 3e		cmp #$3e			cmp 	#'>'
.9cfd	f0 25		beq $9d24			beq 	_TKCheckDouble
.9cff					_TKStandardPunctuation:
.9cff	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get it back.
.9d02	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9d04	90 0e		bcc $9d14			bcc 	_TKNoShift
.9d06	48		pha				pha 								; save
.9d07	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9d09	85 36		sta $36				sta 	zTemp0
.9d0b	68		pla				pla
.9d0c	29 20		and #$20			and 	#32 						; bit 5
.9d0e	4a		lsr a				lsr 	a 							; shift into bit 3
.9d0f	4a		lsr a				lsr 	a
.9d10	05 36		ora $36				ora 	zTemp0
.9d12	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9d14					_TKNoShift:
.9d14	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte 			; write the punctuation character
.9d17	e8		inx				inx 								; consume the character
.9d18	80 be		bra $9cd8			bra 	_TKTokeniseLoop 			; and loop round again.
.9d1a					_TKString:
.9d1a	20 ca 9d	jsr $9dca			jsr 	TokeniseString
.9d1d	80 b9		bra $9cd8			bra 	_TKTokeniseLoop
.9d1f					_TKHexConstant:
.9d1f	20 05 9e	jsr $9e05			jsr 	TokeniseHexConstant
.9d22	80 b4		bra $9cd8			bra 	_TKTokeniseLoop
.9d24					_TKCheckDouble:
.9d24	bd 27 08	lda $0827,x			lda 	lineBuffer+1,x 				; get next character
.9d27	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9d29	90 d4		bcc $9cff			bcc 	_TKStandardPunctuation
.9d2b	c9 3f		cmp #$3f			cmp 	#'>'+1
.9d2d	b0 d0		bcs $9cff			bcs 	_TKStandardPunctuation
.9d2f	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9d32	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9d34	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9d35	7d 27 08	adc $0827,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9d38	38		sec				sec
.9d39	e9 3c		sbc #$3c			sbc 	#'<'
.9d3b	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9d3e	e8		inx				inx 								; consume both
.9d3f	e8		inx				inx
.9d40	80 96		bra $9cd8			bra 	_TKTokeniseLoop
.9d42	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9d44	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9d47	60		rts				rts
.9d48					_TKTokeniseIdentifier:
.9d48	8e 00 07	stx $0700			stx 	identStart 					; save start
.9d4b	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9d4e					_TKCheckLoop:
.9d4e	e8		inx				inx 								; look at next, we know first is identifier.
.9d4f	bd 26 08	lda $0826,x			lda  	lineBuffer,x
.9d52	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9d54	f0 f8		beq $9d4e			beq 	_TKCheckLoop
.9d56	c9 30		cmp #$30			cmp	 	#"0"
.9d58	90 0c		bcc $9d66			bcc 	_TKEndIdentifier
.9d5a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d5c	90 f0		bcc $9d4e			bcc 	_TKCheckLoop
.9d5e	c9 41		cmp #$41			cmp	 	#"A"
.9d60	90 04		bcc $9d66			bcc 	_TKEndIdentifier
.9d62	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9d64	90 e8		bcc $9d4e			bcc 	_TKCheckLoop
.9d66					_TKEndIdentifier:
.9d66	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9d69	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9d6b	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9d6d	f0 06		beq $9d75			beq 	_TKHasTypeCharacter
.9d6f	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9d71	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9d73	d0 07		bne $9d7c			bne 	_TKNoTypeCharacter
.9d75					_TKHasTypeCharacter:
.9d75	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9d78	e8		inx				inx 								; read next
.9d79	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9d7c					_TKNoTypeCharacter:
.9d7c	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9d7e	d0 09		bne $9d89			bne 	_TKNoArray
.9d80	e8		inx				inx 								; skip the (
.9d81	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9d84	09 04		ora #$04			ora 	#$04
.9d86	8d 04 07	sta $0704			sta 	identTypeByte
.9d89					_TKNoArray:
.9d89	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9d8c	20 26 9e	jsr $9e26			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9d8f	a0 99		ldy #$99			ldy 	#(KeywordSet0) >> 8
.9d91	a9 f6		lda #$f6			lda 	#(KeywordSet0) & $FF
.9d93	20 9d 99	jsr $999d			jsr 	TokeniseSearchTable
.9d96	a2 00		ldx #$00			ldx 	#0
.9d98	b0 1f		bcs $9db9			bcs 	_TKFoundToken
.9d9a	a0 9b		ldy #$9b			ldy 	#(KeywordSet1) >> 8
.9d9c	a9 28		lda #$28			lda 	#(KeywordSet1) & $FF
.9d9e	20 9d 99	jsr $999d			jsr 	TokeniseSearchTable
.9da1	a2 81		ldx #$81			ldx 	#$81
.9da3	b0 14		bcs $9db9			bcs 	_TKFoundToken
.9da5	a0 9b		ldy #$9b			ldy 	#(KeywordSet2) >> 8
.9da7	a9 6c		lda #$6c			lda 	#(KeywordSet2) & $FF
.9da9	20 9d 99	jsr $999d			jsr 	TokeniseSearchTable
.9dac	a2 82		ldx #$82			ldx 	#$82
.9dae	b0 09		bcs $9db9			bcs 	_TKFoundToken
.9db0	20 b6 9e	jsr $9eb6			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9db3	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9db6	4c d8 9c	jmp $9cd8			jmp 	_TKTokeniseLoop 			; and go round again.
.9db9					_TKFoundToken:
.9db9	48		pha				pha 								; save token
.9dba	8a		txa				txa 								; shift in X, is there one ?
.9dbb	f0 03		beq $9dc0			beq 	_TKNoTShift
.9dbd	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte 			; if so, write it out
.9dc0					_TKNoTShift:
.9dc0	68		pla				pla 								; restore and write token
.9dc1	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9dc4	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9dc7	4c d8 9c	jmp $9cd8			jmp 	_TKTokeniseLoop 			; and go round again.
.9dca					TokeniseString:
.9dca	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9dcc	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9dcf	e8		inx				inx									; start of quoted string.
.9dd0	da		phx				phx 								; push start of string on top
.9dd1	ca		dex				dex
.9dd2					_TSFindEnd:
.9dd2	e8		inx				inx
.9dd3	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character
.9dd6	f0 04		beq $9ddc			beq 	_TSEndOfString
.9dd8	c9 22		cmp #$22			cmp 	#'"'
.9dda	d0 f6		bne $9dd2			bne 	_TSFindEnd
.9ddc					_TSEndOfString:
.9ddc	7a		ply				ply  								; so now Y is first character, X is character after end.
.9ddd	48		pha				pha 								; save terminating character
.9dde	20 e6 9d	jsr $9de6			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9de1	68		pla				pla 								; terminating character
.9de2	f0 01		beq $9de5			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9de4	e8		inx				inx
.9de5					_TSNotQuote:
.9de5	60		rts				rts
.9de6					TOWriteBlockXY:
.9de6	86 36		stx $36				stx 	zTemp0 						; write end character
.9de8	98		tya				tya
.9de9	49 ff		eor #$ff			eor 	#$FF
.9deb	38		sec				sec
.9dec	65 36		adc $36				adc 	zTemp0
.9dee	1a		inc a				inc 	a 							; one extra for NULL
.9def	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9df2					_TOBlockLoop:
.9df2	c4 36		cpy $36				cpy 	zTemp0
.9df4	f0 09		beq $9dff			beq 	_TOBlockExit
.9df6	b9 26 08	lda $0826,y			lda 	lineBuffer,y
.9df9	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9dfc	c8		iny				iny
.9dfd	80 f3		bra $9df2			bra 	_TOBlockLoop
.9dff					_TOBlockExit:
.9dff	a9 00		lda #$00			lda 	#0
.9e01	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9e04	60		rts				rts
.9e05					TokeniseHexConstant:
.9e05	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9e07	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9e0a	e8		inx				inx									; start of quoted string.
.9e0b	da		phx				phx 								; push start of constant on top
.9e0c	ca		dex				dex
.9e0d					_THFindLoop:
.9e0d	e8		inx				inx
.9e0e	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9e11	c9 30		cmp #$30			cmp 	#"0"
.9e13	90 0c		bcc $9e21			bcc 	_THFoundEnd
.9e15	c9 3a		cmp #$3a			cmp 	#"9"+1
.9e17	90 f4		bcc $9e0d			bcc 	_THFindLoop
.9e19	c9 41		cmp #$41			cmp 	#"A"
.9e1b	90 04		bcc $9e21			bcc 	_THFoundEnd
.9e1d	c9 47		cmp #$47			cmp 	#"F"+1
.9e1f	90 ec		bcc $9e0d			bcc 	_THFindLoop
.9e21					_THFoundEnd:
.9e21	7a		ply				ply 								; restore start
.9e22	20 e6 9d	jsr $9de6			jsr 	TOWriteBlockXY 				; output the block
.9e25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9e26					TokeniseCalculateHash:
.9e26	da		phx				phx
.9e27	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9e2a	a9 00		lda #$00			lda 	#0
.9e2c					_TCHLoop:
.9e2c	18		clc				clc
.9e2d	7d 26 08	adc $0826,x			adc 	lineBuffer,x
.9e30	e8		inx				inx
.9e31	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9e34	d0 f6		bne $9e2c			bne 	_TCHLoop
.9e36	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9e39	fa		plx				plx
.9e3a	60		rts				rts
.9e3b					FixLineBufferCase:
.9e3b	a2 00		ldx #$00			ldx 	#0
.9e3d					_FLBCLoop:
.9e3d	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next character
.9e40	f0 22		beq $9e64			beq 	_FLBCExit 					; end of string.
.9e42	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9e44	f0 11		beq $9e57			beq 	_FLBCInQuotes
.9e46	e8		inx				inx
.9e47	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9e49	90 f2		bcc $9e3d			bcc 	_FLBCLoop
.9e4b	c9 7b		cmp #$7b			cmp 	#'z'+1
.9e4d	b0 ee		bcs $9e3d			bcs 	_FLBCLoop
.9e4f	38		sec				sec 								; make U/C
.9e50	e9 20		sbc #$20			sbc 	#32
.9e52	9d 25 08	sta $0825,x			sta	 	lineBuffer-1,x 				; write back
.9e55	80 e6		bra $9e3d			bra 	_FLBCLoop
.9e57					_FLBCInQuotes:
.9e57	e8		inx				inx 								; advance
.9e58	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next
.9e5b	f0 07		beq $9e64			beq 	_FLBCExit 					; exit on EOS
.9e5d	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9e5f	d0 f6		bne $9e57			bne 	_FLBCInQuotes
.9e61	e8		inx				inx 								; skip over it
.9e62	80 d9		bra $9e3d			bra 	_FLBCLoop
.9e64					_FLBCExit:
.9e64	60		rts				rts
.9e65					TokeniseExtractLineNumber:
.9e65	ad 28 07	lda $0728			lda 	tokenLineNumber+1 			; push current value on stack
.9e68	48		pha				pha
.9e69	ad 27 07	lda $0727			lda 	tokenLineNumber
.9e6c	48		pha				pha
.9e6d	20 a3 9e	jsr $9ea3			jsr 	_TELNTimes2 				; line # x 4
.9e70	20 a3 9e	jsr $9ea3			jsr 	_TELNTimes2 				; line # x 2
.9e73	18		clc				clc 								; add stacked value
.9e74	68		pla				pla
.9e75	6d 27 07	adc $0727			adc 	tokenLineNumber
.9e78	8d 27 07	sta $0727			sta 	tokenLineNumber
.9e7b	68		pla				pla
.9e7c	6d 28 07	adc $0728			adc 	tokenLineNumber+1
.9e7f	8d 28 07	sta $0728			sta 	tokenLineNumber+1 			; line # x 5
.9e82	20 a3 9e	jsr $9ea3			jsr 	_TELNTimes2 				; line # x 10
.9e85	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get and consume character
.9e88	e8		inx				inx
.9e89	29 0f		and #$0f			and 	#15 						; add to line #
.9e8b	18		clc				clc
.9e8c	6d 27 07	adc $0727			adc 	tokenLineNumber
.9e8f	8d 27 07	sta $0727			sta 	tokenLineNumber
.9e92	90 03		bcc $9e97			bcc 	_TLENNoCarry
.9e94	ee 28 07	inc $0728			inc 	tokenLineNumber+1
.9e97					_TLENNoCarry:
.9e97	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; more digits ?
.9e9a	c9 30		cmp #$30			cmp 	#'0'
.9e9c	90 04		bcc $9ea2			bcc 	_TLENExit
.9e9e	c9 3a		cmp #$3a			cmp 	#'9'+1
.9ea0	90 c3		bcc $9e65			bcc 	TokeniseExtractLineNumber
.9ea2					_TLENExit:
.9ea2	60		rts				rts
.9ea3					_TELNTimes2:
.9ea3	0e 27 07	asl $0727			asl 	tokenLineNumber
.9ea6	2e 28 07	rol $0728			rol 	tokenLineNumber+1
.9ea9	60		rts				rts
.9eaa					TokeniseWriteByte:
.9eaa	da		phx				phx
.9eab	ae 26 07	ldx $0726			ldx 	tokenOffset 				; next slot to write to
.9eae	9d 26 07	sta $0726,x			sta 	tokenOffset,x 				; write byte out
.9eb1	ee 26 07	inc $0726			inc 	tokenOffset 				; advance slot.
.9eb4	fa		plx				plx
.9eb5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9eb6					CheckCreateVariableRecord:
.9eb6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9eb8	85 36		sta $36				sta 	0+zTemp0
.9eba	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9ebc	85 37		sta $37				sta 	1+zTemp0
.9ebe					_CCVSearch:
.9ebe	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9ec0	f0 2c		beq $9eee			beq 	_CCVFail
.9ec2	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9ec4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9ec6	cd 03 07	cmp $0703			cmp 	identHash
.9ec9	d0 16		bne $9ee1			bne 	_CCVNext
.9ecb	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9ecd	ae 00 07	ldx $0700			ldx 	identStart
.9ed0					_CCVCompare:
.9ed0	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9ed3	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9ed5	e8		inx				inx 								; advance pointers
.9ed6	c8		iny				iny
.9ed7	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9ed8	d0 07		bne $9ee1			bne 	_CCVNext  					; didn't match go to next.
.9eda	90 f4		bcc $9ed0			bcc 	_CCVCompare 				; not finished yet.
.9edc	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9edf	f0 41		beq $9f22			beq 	_CCVFound 					; yes, we were successful
.9ee1					_CCVNext:
.9ee1	18		clc				clc
.9ee2	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9ee4	65 36		adc $36				adc 	zTemp0
.9ee6	85 36		sta $36				sta 	zTemp0
.9ee8	90 d4		bcc $9ebe			bcc 	_CCVSearch
.9eea	e6 37		inc $37				inc 	zTemp0+1
.9eec	80 d0		bra $9ebe			bra 	_CCVSearch
.9eee					_CCVFail:
.9eee	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9ef0	ad 03 07	lda $0703			lda 	identHash
.9ef3	91 36		sta ($36),y			sta 	(zTemp0),y
.9ef5	c8		iny				iny 								; offset 2 is the type byte
.9ef6	ad 04 07	lda $0704			lda 	identTypeByte
.9ef9	91 36		sta ($36),y			sta 	(zTemp0),y
.9efb	c8		iny				iny
.9efc					_CCVData:
.9efc	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9efe	91 36		sta ($36),y			sta 	(zTemp0),y
.9f00	c8		iny				iny
.9f01	c0 08		cpy #$08			cpy 	#8
.9f03	90 f7		bcc $9efc			bcc 	_CCVData
.9f05	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9f08					_CCVCopyName:
.9f08	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9f0b	91 36		sta ($36),y			sta 	(zTemp0),y
.9f0d	e8		inx				inx
.9f0e	c8		iny				iny
.9f0f	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9f12	d0 f4		bne $9f08			bne 	_CCVCopyName
.9f14	98		tya				tya 								; patch offset
.9f15	92 36		sta ($36)			sta 	(zTemp0)
.9f17	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9f19	91 36		sta ($36),y			sta 	(zTemp0),y
.9f1b	88		dey				dey
.9f1c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9f1e	09 80		ora #$80			ora 	#$80
.9f20	91 36		sta ($36),y			sta 	(zTemp0),y
.9f22					_CCVFound:
.9f22	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9f24	38		sec				sec
.9f25	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9f27	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9f29	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9f2c	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9f2e	20 aa 9e	jsr $9eaa			jsr 	TokeniseWriteByte
.9f31	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a85f					EXTPrintCharacter:
.a85f	48		pha				pha
.a860	da		phx				phx
.a861	5a		phy				phy
.a862	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a865	7a		ply				ply
.a866	fa		plx				plx
.a867	68		pla				pla
.a868	60		rts				rts
.a869					EXTInputSingleCharacter:
.a869	da		phx				phx
.a86a	5a		phy				phy
.a86b					_EISCWait:
.a86b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a86e	c9 00		cmp #$00			cmp 	#0
.a870	f0 f9		beq $a86b			beq 	_EISCWait
.a872	7a		ply				ply
.a873	fa		plx				plx
.a874	60		rts				rts
.a875					EXTInputLine:
.a875	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a877					_ILLoop:
.a877	da		phx				phx 								; read character in
.a878	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a87b	fa		plx				plx
.a87c	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a87e	f0 12		beq $a892			beq 	_ILBackspace
.a880	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a882	f0 15		beq $a899			beq 	_ILExit
.a884	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a886	90 ef		bcc $a877			bcc 	_ILLoop
.a888	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a88a	f0 eb		beq $a877			beq 	_ILLoop
.a88c	9d 26 08	sta $0826,x			sta 	lineBuffer,x 				; save it
.a88f	e8		inx				inx
.a890	80 e5		bra $a877			bra 	_ILLoop
.a892					_ILBackspace:
.a892	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a894	f0 e1		beq $a877			beq 	_ILLoop
.a896	ca		dex				dex 								; back one.
.a897	80 de		bra $a877			bra 	_ILLoop
.a899					_ILExit:
.a899	20 5f a8	jsr $a85f			jsr 	EXTPrintCharacter
.a89c	9e 26 08	stz $0826,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a89f	60		rts				rts
.a8a0					EXTBreakCheck:
.a8a0	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a8a3					MemoryDeleteLine:
.a8a3	20 c2 a8	jsr $a8c2			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8a6	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a8a8	a8		tay				tay
.a8a9					_MDDLLoop:
.a8a9	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a8ab	92 30		sta ($30)			sta 	(codePtr)
.a8ad	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a8af	c5 3a		cmp $3a				cmp 	zTemp2
.a8b1	d0 07		bne $a8ba			bne 	_MDLDLNext
.a8b3	a5 31		lda $31				lda 	codePtr+1
.a8b5	c5 3b		cmp $3b				cmp 	zTemp2+1
.a8b7	d0 01		bne $a8ba			bne 	_MDLDLNext
.a8b9					_MDDLExit:
.a8b9	60		rts				rts
.a8ba					_MDLDLNext:
.a8ba	e6 30		inc $30				inc 	codePtr						; next byte
.a8bc	d0 eb		bne $a8a9			bne 	_MDDLLoop
.a8be	e6 31		inc $31				inc 	codePtr+1
.a8c0	80 e7		bra $a8a9			bra 	_MDDLLoop
.a8c2					IMemoryFindEnd:
.a8c2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8c4	85 3a		sta $3a				sta 	0+zTemp2
.a8c6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8c8	85 3b		sta $3b				sta 	1+zTemp2
.a8ca					_MDLFELoop:
.a8ca	b2 3a		lda ($3a)			lda 	(zTemp2)
.a8cc	f0 0b		beq $a8d9			beq 	_MDLFEExit
.a8ce	18		clc				clc
.a8cf	65 3a		adc $3a				adc 	zTemp2
.a8d1	85 3a		sta $3a				sta 	zTemp2
.a8d3	90 f5		bcc $a8ca			bcc 	_MDLFELoop
.a8d5	e6 3b		inc $3b				inc 	zTemp2+1
.a8d7	80 f1		bra $a8ca			bra 	_MDLFELoop
.a8d9					_MDLFEExit:
.a8d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a8da					MemoryInsertLine:
.a8da	08		php				php
.a8db	20 c2 a8	jsr $a8c2			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8de	28		plp				plp
.a8df	90 08		bcc $a8e9			bcc 	_MDLIFound
.a8e1	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a8e3	85 30		sta $30				sta 	codePtr
.a8e5	a5 3b		lda $3b				lda 	zTemp2+1
.a8e7	85 31		sta $31				sta 	codePtr+1
.a8e9					_MDLIFound:
.a8e9	ad 26 07	lda $0726			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a8ec	a8		tay				tay
.a8ed					_MDLIInsert:
.a8ed	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a8ef	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a8f1	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a8f3	c5 3a		cmp $3a				cmp 	zTemp2
.a8f5	d0 06		bne $a8fd			bne 	_MDLINext
.a8f7	a5 31		lda $31				lda 	codePtr+1
.a8f9	c5 3b		cmp $3b				cmp 	zTemp2+1
.a8fb	f0 0a		beq $a907			beq 	_MDLIHaveSpace
.a8fd					_MDLINext:
.a8fd	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a8ff	d0 02		bne $a903			bne 	_MDLINoBorrow
.a901	c6 3b		dec $3b				dec 	zTemp2+1
.a903					_MDLINoBorrow:
.a903	c6 3a		dec $3a				dec 	zTemp2
.a905	80 e6		bra $a8ed			bra 	_MDLIInsert
.a907					_MDLIHaveSpace:
.a907	ac 26 07	ldy $0726			ldy 	tokenOffset 				; bytes to copy
.a90a	88		dey				dey 								; from offset-1 to 0
.a90b					_MDLICopy:
.a90b	b9 26 07	lda $0726,y			lda 	tokenOffset,y
.a90e	91 30		sta ($30),y			sta 	(codePtr),y
.a910	88		dey				dey
.a911	10 f8		bpl $a90b			bpl 	_MDLICopy
.a913	60		rts				rts
.a914					MDLAppendLine:
.a914	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a916	85 36		sta $36				sta 	zTemp0
.a918	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a91a	85 38		sta $38				sta 	0+zTemp1
.a91c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a91e	85 39		sta $39				sta 	1+zTemp1
.a920	b2 38		lda ($38)			lda 	(zTemp1)
.a922	d0 0a		bne $a92e			bne 	_MDLANoInitialise
.a924	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a926	8d a9 08	sta $08a9			sta 	0+AppendPointer
.a929	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a92b	8d aa 08	sta $08aa			sta 	1+AppendPointer
.a92e					_MDLANoInitialise:
.a92e	18		clc				clc
.a92f	ad a9 08	lda $08a9			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a932	85 38		sta $38				sta 	zTemp1
.a934	72 36		adc ($36)			adc 	(zTemp0)
.a936	8d a9 08	sta $08a9			sta 	AppendPointer
.a939	ad aa 08	lda $08aa			lda 	AppendPointer+1
.a93c	85 39		sta $39				sta 	zTemp1+1
.a93e	69 00		adc #$00			adc 	#0
.a940	8d aa 08	sta $08aa			sta 	AppendPointer+1
.a943	a0 00		ldy #$00			ldy 	#0
.a945					_MDLACopy:
.a945	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a947	91 38		sta ($38),y			sta 	(zTemp1),y
.a949	c8		iny				iny
.a94a	98		tya				tya
.a94b	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a94d	d0 f6		bne $a945			bne 	_MDLACopy
.a94f	a9 00		lda #$00			lda 	#0 							; end of program.
.a951	91 38		sta ($38),y			sta 	(zTemp1),y
.a953	60		rts				rts
.08a9					AppendPointer:
>08a9							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9f32					MemoryNew:
.9f32	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f34	85 30		sta $30				sta 	codePtr
.9f36	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f38	85 31		sta $31				sta 	codePtr+1
.9f3a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9f3c	92 30		sta ($30)			sta 	(codePtr)
.9f3e	60		rts				rts
.9f3f					MemoryInline:
.9f3f	98		tya				tya 								; put address into stack,x
.9f40	18		clc				clc
.9f41	65 30		adc $30				adc 	codePtr
.9f43	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9f46	a5 31		lda $31				lda 	codePtr+1
.9f48	69 00		adc #$00			adc 	#0
.9f4a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9f4d	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9f50	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9f53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9f54					MemorySearch:
.9f54	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9f56	86 37		stx $37				stx 	zTemp0+1
.9f58	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f5a	85 30		sta $30				sta 	codePtr
.9f5c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f5e	85 31		sta $31				sta 	codePtr+1
.9f60					_MTAXLoop:
.9f60	b2 30		lda ($30)			lda 	(codePtr)
.9f62	18		clc				clc
.9f63	f0 21		beq $9f86			beq 	_MTAXExit 					; reached end, exit with CC.
.9f65	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9f67	b1 30		lda ($30),y			lda 	(codePtr),y
.9f69	38		sec				sec
.9f6a	e5 36		sbc $36				sbc 	zTemp0
.9f6c	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9f6e	c8		iny				iny 								; do the MSB
.9f6f	b1 30		lda ($30),y			lda 	(codePtr),y
.9f71	e5 37		sbc $37				sbc 	zTemp0+1
.9f73	05 38		ora $38				ora 	zTemp1
.9f75	f0 0f		beq $9f86			beq 	_MTAXExit	 				; found
.9f77	b0 0d		bcs $9f86			bcs 	_MTAXExit 					; current < required exit
.9f79	18		clc				clc
.9f7a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9f7c	65 30		adc $30				adc 	codePtr
.9f7e	85 30		sta $30				sta 	codePtr
.9f80	90 02		bcc $9f84			bcc 	_CREExit
.9f82	e6 31		inc $31				inc 	codePtr+1
.9f84					_CREExit:
.9f84	80 da		bra $9f60			bra 	_MTAXLoop
.9f86					_MTAXExit:
.9f86	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
