
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Nov 20 12:17:17 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b8 a9	jsr $a9b8			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 ac 8d	jsr $8dac			jsr 	PrintStringXA
.8014	20 54 88	jsr $8854			jsr 	NewProgram 					; erase current program
.8017	20 fc 82	jsr $82fc			jsr 	BackloadProgram
.801a	4c 59 83	jmp $8359			jmp 	WarmStart
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 20-Nov-2022. Build 3251."
>8064	6e 64 61 79 20 32 30 2d 4e 6f 76 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 33 32 35 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8084					AssembleGroup1:
.8084	a9 ff		lda #$ff			lda 	#$FF
.8086	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8089	80 02		bra $808d			bra 	AsmGroup12
.808b					AssembleGroup2:
.808b	a9 00		lda #$00			lda 	#$00
.808d					AsmGroup12:
.808d	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8090	68		pla				pla 								; pop the return address to access the information following.
.8091	fa		plx				plx
.8092	20 1b 81	jsr $811b			jsr 	AccessParameters 			; get opcode and save as base
.8095	8d a4 04	sta $04a4			sta 	BaseOpcode
.8098	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809b	d0 08		bne $80a5			bne 	_AG12HaveMask
.809d	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.809f	20 23 81	jsr $8123			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a2	8d a5 04	sta $04a5			sta 	ModeMask
.80a5					_AG12HaveMask:
.80a5	20 5e 82	jsr $825e			jsr 	TypeAndCalculateOperand 	; get zero page type
.80a8	da		phx				phx 								; save found address mode
.80a9	20 87 81	jsr $8187			jsr 	AssembleModeX
.80ac	fa		plx				plx  								; restore address mode
.80ad	b0 0b		bcs $80ba			bcs 	_AG12Exit
.80af	20 bb 80	jsr $80bb			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b2	20 87 81	jsr $8187			jsr 	AssembleModeX
.80b5	b0 03		bcs $80ba			bcs 	_AG12Exit
.80b7	4c a0 9f	jmp $9fa0			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ba					_AG12Exit:
.80ba	60		rts				rts
.80bb					PromoteToAbsolute:
.80bb	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bd	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80bf	f0 19		beq $80da			beq 	_PTADo
.80c1	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c3	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c5	f0 13		beq $80da			beq 	_PTADo
.80c7	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80c9	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cb	f0 0d		beq $80da			beq 	_PTADo
.80cd	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80cf	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d1	f0 07		beq $80da			beq 	_PTADo
.80d3	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d5	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d7	f0 01		beq $80da			beq 	_PTADo
.80d9	60		rts				rts
.80da					_PTADo:
.80da	aa		tax				tax
.80db	60		rts				rts
.80dc					AssembleGroup3:
.80dc	68		pla				pla 								; get parameters, which is just the opcode.
.80dd	fa		plx				plx
.80de	20 1b 81	jsr $811b			jsr 	AccessParameters 			; get and output opcode
.80e1	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.80e4	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get a 16 bit operand
.80e7	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ea	38		sec				sec
.80eb	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80ee	48		pha				pha 								; LSB in A
.80ef	ad 10 04	lda $0410			lda 	NSMantissa1
.80f2	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f5	aa		tax				tax 								; MSB in X
.80f6	68		pla				pla
.80f7	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80f8	69 7f		adc #$7f			adc 	#$7F
.80fa	90 01		bcc $80fd			bcc 	_AG3NoCarry
.80fc	e8		inx				inx
.80fd					_AG3NoCarry:
.80fd	38		sec				sec 								; fix back and write out anyways.
.80fe	e9 80		sbc #$80			sbc 	#$80
.8100	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.8103	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8105	f0 0a		beq $8111			beq 	_AG3Exit
.8107	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810a	29 01		and #$01			and 	#1
.810c	f0 03		beq $8111			beq 	_AG3Exit
.810e	4c a5 9f	jmp $9fa5			jmp 	RangeError 					; no, branch is out of range
.8111					_AG3Exit:
.8111	60		rts				rts
.8112					AssembleGroup4:
.8112	68		pla				pla 								; pop address
.8113	fa		plx				plx
.8114	20 1b 81	jsr $811b			jsr 	AccessParameters 			; access and get first
.8117	20 33 81	jsr $8133			jsr 	AssemblerWriteByte 			; output it.
.811a	60		rts				rts
.811b					AccessParameters:
.811b	8d a1 04	sta $04a1			sta 	ParamStart
.811e	8e a2 04	stx $04a2			stx 	ParamStart+1
.8121	a9 01		lda #$01			lda 	#1
.8123					GetParameter:
.8123	5a		phy				phy
.8124	a8		tay				tay
.8125	ad a1 04	lda $04a1			lda 	ParamStart
.8128	85 36		sta $36				sta 	zTemp0
.812a	ad a2 04	lda $04a2			lda 	ParamStart+1
.812d	85 37		sta $37				sta 	zTemp0+1
.812f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8131	7a		ply				ply
.8132	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8133					AssemblerWriteByte:
.8133	48		pha			pha
.8134	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8137	29 02		and #$02		and 	#2
.8139	f0 1b		beq $8156		beq 	_AWBNoPrint
.813b	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.813e	20 71 81	jsr $8171		jsr 	PrintHex
.8141	ad 9e 04	lda $049e		lda		AssemblerAddress
.8144	20 71 81	jsr $8171		jsr 	PrintHex
.8147	a9 20		lda #$20		lda 	#' '
.8149	20 44 a7	jsr $a744		jsr 	EXTPrintCharacter
.814c	68		pla			pla 									; print byte
.814d	48		pha			pha
.814e	20 71 81	jsr $8171		jsr 	PrintHex
.8151	a9 0d		lda #$0d		lda 	#13
.8153	20 44 a7	jsr $a744		jsr 	EXTPrintCharacter
.8156					_AWBNoPrint:
.8156	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8159	85 36		sta $36			sta 	zTemp0
.815b	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.815e	f0 0e		beq $816e		beq 	_AWBRange
.8160	85 37		sta $37			sta 	zTemp0+1
.8162	68		pla			pla 									; write byte out
.8163	92 36		sta ($36)		sta 	(zTemp0)
.8165	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8168	d0 03		bne $816d		bne 	_AWBNoCarry
.816a	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816d					_AWBNoCarry:
.816d	60		rts			rts
.816e					_AWBRange:
.816e	4c a5 9f	jmp $9fa5		jmp 	RangeError
.8171					PrintHex:
.8171	48		pha				pha
.8172	4a		lsr a				lsr 	a
.8173	4a		lsr a				lsr 	a
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	20 7a 81	jsr $817a			jsr 	_PrintNibble
.8179	68		pla				pla
.817a					_PrintNibble:
.817a	29 0f		and #$0f			and 	#15
.817c	c9 0a		cmp #$0a			cmp 	#10
.817e	90 02		bcc $8182			bcc 	_NoShift
.8180	69 06		adc #$06			adc 	#6
.8182					_NoShift:
.8182	69 30		adc #$30			adc 	#48
.8184	4c 44 a7	jmp $a744			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8187					AssembleModeX:
.8187	5a		phy				phy
.8188	ad a3 04	lda $04a3			lda 	IsGroup1
.818b	f0 17		beq $81a4			beq 	_AMXGroup2
.818d	8a		txa				txa 							; is it in group # 1
.818e	29 40		and #$40			and 	#AM_ISG1
.8190	f0 50		beq $81e2			beq 	_AMXFail 				; no, give up.
.8192	8a		txa				txa 							; get back.
.8193	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8195	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8197	d0 22		bne $81bb			bne 	_AMXHaveInfo
.8199	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819c	c9 81		cmp #$81			cmp 	#$81
.819e	f0 42		beq $81e2			beq 	_AMXFail
.81a0	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a2	80 17		bra $81bb			bra 	_AMXHaveInfo 			; odd design decision there.
.81a4					_AMXGroup2:
.81a4	8a		txa				txa 							; is it in group 2 ?
.81a5	29 20		and #$20			and 	#AM_ISG2
.81a7	f0 39		beq $81e2			beq 	_AMXFail 				; no, give up.
.81a9	8a		txa				txa 							; get the offset into Y
.81aa	29 1f		and #$1f			and 	#$1F
.81ac	4a		lsr a				lsr 	a 						; make it 0-7.
.81ad	4a		lsr a				lsr  	a
.81ae	a8		tay				tay
.81af	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b2					_AMXCheckOkay:
.81b2	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b3	88		dey				dey
.81b4	10 fc		bpl $81b2			bpl 	_AMXCheckOkay
.81b6	90 2a		bcc $81e2			bcc 	_AMXFail 				; not allowed.
.81b8	8a		txa				txa  							; get mask back
.81b9	29 1f		and #$1f			and 	#$1F
.81bb					_AMXHaveInfo:
.81bb	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bd	10 05		bpl $81c4			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81bf	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c2	d0 1e		bne $81e2			bne 	_AMXFail
.81c4					_AMXAnySize:
.81c4	18		clc				clc 							; add offset to the base opcode
.81c5	6d a4 04	adc $04a4			adc 	BaseOpcode
.81c8					_AMXOutputCode:
.81c8	20 33 81	jsr $8133			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cb	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cd	f0 10		beq $81df			beq 	_AMXExit
.81cf	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d2	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.81d5	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d7	30 06		bmi $81df			bmi 	_AMXExit
.81d9	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81dc	20 33 81	jsr $8133			jsr 	AssemblerWriteByte
.81df					_AMXExit:
.81df	7a		ply				ply
.81e0	38		sec				sec
.81e1	60		rts				rts
.81e2					_AMXFail:
.81e2	a0 00		ldy #$00			ldy 	#0
.81e4					_AMXCheckOddities:
.81e4	8a		txa				txa
.81e5	d9 0d 82	cmp $820d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81e8	d0 16		bne $8200			bne 	_AMXCONext
.81ea	b9 0b 82	lda $820b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ed	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f0	d0 0e		bne $8200			bne 	_AMXCONext
.81f2	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f4	10 05		bpl $81fb			bpl 	_AMXCONotZero
.81f6	ad 10 04	lda $0410			lda 	NSMantissa1
.81f9	d0 05		bne $8200			bne 	_AMXCONext
.81fb					_AMXCONotZero:
.81fb	b9 0c 82	lda $820c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81fe	80 c8		bra $81c8			bra 	_AMXOutputCode 			; and assemble it
.8200					_AMXCONext:
.8200	c8		iny				iny
.8201	c8		iny				iny
.8202	c8		iny				iny
.8203	b9 0b 82	lda $820b,y			lda 	ExtraOpcode+0,y 		; end of table
.8206	d0 dc		bne $81e4			bne 	_AMXCheckOddities
.8208					_AMXCOFail:
.8208	7a		ply				ply
.8209	18		clc				clc
.820a	60		rts				rts
.820b					ExtraOpcode:
>820b	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>820e	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8211	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8214	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8217	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821a	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821d	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8220	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8223	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8226	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8229	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822a					LabelHere:
.822a	c8		iny				iny 								; skip .
.822b	a2 00		ldx #$00			ldx 	#0 							; get a term
.822d	20 dc 97	jsr $97dc			jsr 	EvaluateTerm 				; get a term
.8230	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8233	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8235	d0 24		bne $825b			bne 	_ALType
.8237	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823a	85 36		sta $36				sta 	zTemp0
.823c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.823f	85 37		sta $37				sta 	zTemp0+1
.8241	5a		phy				phy 								; copy address in.
.8242	a0 01		ldy #$01			ldy 	#1
.8244	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8247	92 36		sta ($36)			sta 	(zTemp0)
.8249	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824c	91 36		sta ($36),y			sta 	(zTemp0),y
.824e	c8		iny				iny
.824f	a9 00		lda #$00			lda 	#0
.8251	91 36		sta ($36),y			sta 	(zTemp0),y
.8253	c8		iny				iny
.8254	91 36		sta ($36),y			sta 	(zTemp0),y
.8256	c8		iny				iny
.8257	91 36		sta ($36),y			sta 	(zTemp0),y
.8259	7a		ply				ply
.825a	60		rts				rts
.825b					_ALType:
.825b	4c aa 9f	jmp $9faa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.825e					TypeAndCalculateOperand:
.825e	b1 30		lda ($30),y			lda 	(codePtr),y
.8260	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8262	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8264	f0 5b		beq $82c1			beq 	_TACOExit
.8266	c9 80		cmp #$80			cmp 	#KWC_EOL
.8268	f0 57		beq $82c1			beq 	_TACOExit
.826a	c8		iny				iny
.826b	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826d	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.826f	f0 51		beq $82c2			beq 	CalculateOperand
.8271	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8273	f0 1f		beq $8294			beq 	_TACOIndirect
.8275	88		dey				dey 								; undo get of first character
.8276	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get operand
.8279	b1 30		lda ($30),y			lda 	(codePtr),y
.827b	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.827f	d0 40		bne $82c1			bne 	_TACOExit
.8281	c8		iny				iny
.8282	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8285	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8287	c9 58		cmp #$58			cmp 	#'X'
.8289	f0 36		beq $82c1			beq 	_TACOExit
.828b	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828d	c9 59		cmp #$59			cmp 	#'Y'
.828f	f0 30		beq $82c1			beq 	_TACOExit
.8291					_TACOSyntax:
.8291	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.8294					_TACOIndirect:
.8294	20 c2 82	jsr $82c2			jsr 	CalculateOperand 			; get the operand
.8297	b1 30		lda ($30),y			lda 	(codePtr),y
.8299	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829b	f0 17		beq $82b4			beq 	_TACOIndX
.829d	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a0	b1 30		lda ($30),y			lda 	(codePtr),y
.82a2	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a6	d0 19		bne $82c1			bne 	_TACOExit
.82a8	c8		iny				iny
.82a9	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ac	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82ae	d0 e1		bne $8291			bne 	_TACOSyntax
.82b0	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b2	80 0d		bra $82c1			bra 	_TACOExit
.82b4					_TACOIndX:
.82b4	c8		iny				iny
.82b5	20 cc 82	jsr $82cc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82b8	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82ba	d0 d5		bne $8291			bne 	_TACOSyntax
.82bc	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket			; check )
.82bf	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c1					_TACOExit:
.82c1	60		rts				rts
.82c2					CalculateOperand:
.82c2	48		pha				pha
.82c3	da		phx				phx
.82c4	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c6	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.82c9	fa		plx				plx
.82ca	68		pla				pla
.82cb	60		rts				rts
.82cc					TACOCheckXY:
.82cc	b1 30		lda ($30),y			lda 	(codePtr),y
.82ce	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d0	c9 40		cmp #$40			cmp 	#$40
.82d2	d0 21		bne $82f5			bne 	_TCXYFail
.82d4	b1 30		lda ($30),y			lda 	(codePtr),y
.82d6	18		clc				clc
.82d7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82d9	85 37		sta $37				sta 	zTemp0+1
.82db	c8		iny				iny
.82dc	b1 30		lda ($30),y			lda 	(codePtr),y
.82de	c8		iny				iny
.82df	85 36		sta $36				sta 	zTemp0
.82e1	5a		phy				phy 								; save position
.82e2	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e6	d0 0c		bne $82f4			bne 	_TCXYPopFail
.82e8	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ec	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82ee	f0 08		beq $82f8			beq 	_TCXYFound
.82f0	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f2	f0 04		beq $82f8			beq 	_TCXYFound
.82f4					_TCXYPopFail:
.82f4	7a		ply				ply
.82f5					_TCXYFail:
.82f5	a9 00		lda #$00			lda 	#0
.82f7	60		rts				rts
.82f8					_TCXYFound:
.82f8	7a		ply				ply 								; restore position
.82f9	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fc					BackloadProgram:
.82fc	a2 ff		ldx #$ff			ldx 	#$FF
.82fe	20 26 83	jsr $8326			jsr 	BLReadByte
.8301	30 1f		bmi $8322			bmi 	_BPExit
.8303					_BPCopy:
.8303	e8		inx				inx  								; copy byte in
.8304	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.8307	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.830a	20 26 83	jsr $8326			jsr 	BLReadByte 					; read next byte
.830d	30 0a		bmi $8319			bmi 	_BPEndLine 					; -ve = EOL
.830f	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8311	d0 02		bne $8315			bne 	_BPNotTab
.8313	a9 20		lda #$20			lda 	#' '
.8315					_BPNotTab:
.8315	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8317	b0 ea		bcs $8303			bcs 	_BPCopy
.8319					_BPEndLine:
.8319	20 4e b5	jsr $b54e			jsr 	TokeniseLine 				; tokenise the line.
.831c	38		sec				sec 								; append not insert
.831d	20 7b a1	jsr $a17b			jsr 	MemoryInsertLine 			; append to current program
.8320	80 da		bra $82fc			bra 	BackloadProgram
.8322					_BPExit:
.8322	20 f2 83	jsr $83f2			jsr 	ClearCommand 				; clear variables etc.
.8325	60		rts				rts
.8326					BLReadByte:
.8326					_BLLoad:
.8326	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8329	ee 27 83	inc $8327			inc 	_BLLoad+1
.832c	d0 03		bne $8331			bne 	_BLNoCarry
.832e	ee 28 83	inc $8328			inc 	_BLLoad+2
.8331					_BLNoCarry:
.8331	c9 00		cmp #$00			cmp 	#0
.8333	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8334					EditProgramCode:
.8334	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.8337	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.833a	20 23 a2	jsr $a223			jsr 	MemorySearch
.833d	90 05		bcc $8344			bcc 	_EPCNoDelete 				; reached the end don't delete
.833f	d0 03		bne $8344			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8341	20 44 a1	jsr $a144			jsr 	MemoryDeleteLine 			; delete the line
.8344					_EPCNoDelete:
.8344	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.8347	c9 80		cmp #$80			cmp 	#KWC_EOL
.8349	f0 0d		beq $8358			beq 	_EPCNoInsert
.834b	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.834e	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8351	20 23 a2	jsr $a223			jsr 	MemorySearch
.8354	18		clc				clc 								; insert at this point.
.8355	20 7b a1	jsr $a17b			jsr 	MemoryInsertLine 			; insert the line
.8358					_EPCNoInsert:
.8358	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8359					WarmStart:
.8359	a2 ff		ldx #$ff			ldx 	#$FF
.835b	9a		txs				txs
.835c	20 d2 a8	jsr $a8d2			jsr 	EXTInputLine 				; get line to lineBuffer
.835f	20 4e b5	jsr $b54e			jsr 	TokeniseLine 				; tokenise the line
.8362	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.8365	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.8368	d0 17		bne $8381			bne 	_WSEditCode 				; if so,edit code.
.836a	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.836d	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.836f	85 30		sta $30				sta 	codePtr
.8371	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8373	85 31		sta $31				sta 	codePtr+1
.8375	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.8378	c9 80		cmp #$80			cmp 	#KWC_EOL
.837a	f0 dd		beq $8359			beq 	WarmStart
.837c	20 05 8a	jsr $8a05			jsr 	RUNCodePointerLine 			; execute that line.
.837f	80 d8		bra $8359			bra 	WarmStart
.8381					_WSEditCode:
.8381	20 34 83	jsr $8334			jsr 	EditProgramCode
.8384	20 f2 83	jsr $83f2			jsr 	ClearCommand
.8387	80 d0		bra $8359			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8389					AssembleCommand:
.8389	a2 00		ldx #$00			ldx 	#0
.838b	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger 		; start address
.838e	ad 08 04	lda $0408			lda 	NSMantissa0
.8391	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8394	ad 10 04	lda $0410			lda 	NSMantissa1
.8397	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839a	20 42 8d	jsr $8d42			jsr 	CheckComma
.839d	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; options
.83a0	ad 08 04	lda $0408			lda 	NSMantissa0
.83a3	8d a0 04	sta $04a0			sta 	AssemblerControl
.83a6	60		rts				rts
.83a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83a8					AssertCommand:
.83a8	a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.83aa	20 62 9d	jsr $9d62			jsr 	EvaluateInteger 			; the assert test
.83ad	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; exit if result is non zero.
.83b0	d0 05		bne $83b7			bne 	_ACExit
.83b2	a9 0a		lda #$0a		lda	#10
.83b4	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.83b7					_ACExit:
.83b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83b8					CallCommand:
.83b8	a2 00		ldx #$00			ldx 	#0
.83ba	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.83bd					_CCClear
.83bd	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83be	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.83c1	e0 04		cpx #$04			cpx 	#4
.83c3	d0 f8		bne $83bd			bne 	_CCClear
.83c5	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83c7					_CCCParam:
.83c7	b1 30		lda ($30),y			lda 	(codePtr),y
.83c9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83cb	d0 09		bne $83d6			bne 	_CCCRun6502
.83cd	c8		iny				iny 								; skip comma
.83ce	e8		inx				inx	 								; next level
.83cf	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d2	e0 03		cpx #$03			cpx 	#3
.83d4	90 f1		bcc $83c7			bcc 	_CCCParam 					; done all 3 ?
.83d6					_CCCRun6502:
.83d6	5a		phy				phy 								; save position
.83d7	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83da	85 37		sta $37				sta 	zTemp0+1
.83dc	ad 08 04	lda $0408			lda 	NSMantissa0
.83df	85 36		sta $36				sta 	zTemp0
.83e1	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e4	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83e7	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83ea	20 ef 83	jsr $83ef			jsr 	_CCCZTemp0 					; call zTemp0
.83ed	7a		ply				ply 								; restore position and exit
.83ee	60		rts				rts
.83ef					_CCCZTemp0:
.83ef	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f2					ClearCommand:
.83f2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f4	85 36		sta $36				sta 	0+zTemp0
.83f6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83f8	85 37		sta $37				sta 	1+zTemp0
.83fa					_ClearZeroLoop:
.83fa	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83fc	f0 24		beq $8422			beq 	_ClearZeroEnd
.83fe	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8400	a9 00		lda #$00			lda 	#0
.8402					_ClearOneVariable:
.8402	91 36		sta ($36),y			sta 	(zTemp0),y
.8404	c8		iny				iny
.8405	c0 08		cpy #$08			cpy 	#8
.8407	d0 f9		bne $8402			bne 	_ClearOneVariable
.8409	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.840b	b1 36		lda ($36),y			lda 	(zTemp0),y
.840d	c9 18		cmp #$18			cmp 	#NSTProcedure
.840f	d0 04		bne $8415			bne 	_ClearNotProcedure
.8411	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8413	91 36		sta ($36),y			sta 	(zTemp0),y
.8415					_ClearNotProcedure:
.8415	18		clc				clc 								; go to the next variable
.8416	b2 36		lda ($36)			lda 	(zTemp0)
.8418	65 36		adc $36				adc 	zTemp0
.841a	85 36		sta $36				sta 	zTemp0
.841c	90 dc		bcc $83fa			bcc 	_ClearZeroLoop
.841e	e6 37		inc $37				inc 	zTemp0+1
.8420	80 d8		bra $83fa			bra 	_ClearZeroLoop
.8422					_ClearZeroEnd:
.8422	18		clc				clc
.8423	a5 36		lda $36				lda 	zTemp0
.8425	69 01		adc #$01			adc 	#1
.8427	8d 8c 04	sta $048c			sta 	lowMemPtr
.842a	a5 37		lda $37				lda 	zTemp0+1
.842c	69 00		adc #$00			adc 	#0
.842e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8431	20 69 a6	jsr $a669			jsr 	StackReset
.8434	20 d3 a6	jsr $a6d3			jsr 	StringSystemInitialise
.8437	20 43 8c	jsr $8c43			jsr 	ProcedureScan
.843a	20 c1 89	jsr $89c1			jsr 	Command_Restore
.843d	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8440	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8443	9c a0 04	stz $04a0			stz 	AssemblerControl
.8446	20 df 99	jsr $99df			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8449	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.844a					ClearScreen:
.844a	5a		phy				phy
.844b	a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.844d	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8450	7a		ply				ply
.8451	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8452					Command_Data:
.8452	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8454	a2 80		ldx #$80			ldx 	#KWC_EOL
.8456	20 95 8c	jsr $8c95			jsr 	ScanForward
.8459	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845a					DimCommand:
.845a	b1 30		lda ($30),y			lda 	(codePtr),y
.845c	29 c0		and #$c0			and 	#$C0
.845e	c9 40		cmp #$40			cmp 	#$40
.8460	d0 7a		bne $84dc			bne 	_DCSyntax
.8462	b1 30		lda ($30),y			lda 	(codePtr),y
.8464	18		clc				clc
.8465	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8467	85 3f		sta $3f				sta 	zaTemp+1
.8469	c8		iny				iny
.846a	b1 30		lda ($30),y			lda 	(codePtr),y
.846c	c8		iny				iny
.846d	85 3e		sta $3e				sta 	zaTemp
.846f	5a		phy				phy
.8470	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8472	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8474	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8476	c9 18		cmp #$18			cmp 	#NSTProcedure
.8478	f0 62		beq $84dc			beq 	_DCSyntax
.847a	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.847c	29 04		and #$04			and 	#NSBIsArray
.847e	f0 64		beq $84e4			beq 	_DCType
.8480	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8482	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8484	d0 59		bne $84df			bne 	_DCRedefine
.8486	7a		ply				ply
.8487	20 e7 84	jsr $84e7			jsr 	_DCGetSize 				; get array size, check it.
.848a	5a		phy				phy
.848b	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.848d	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.848f	7a		ply				ply 							; is there a second (e.g. ,x)
.8490	b1 30		lda ($30),y			lda 	(codePtr),y
.8492	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8494	d0 0a		bne $84a0			bne 	_DCOneDimension
.8496	c8		iny				iny 							; skip comma
.8497	20 e7 84	jsr $84e7			jsr 	_DCGetSize 				; get 2nd array size
.849a	5a		phy				phy
.849b	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.849d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.849f	7a		ply				ply
.84a0					_DCOneDimension:
.84a0	5a		phy				phy 							; save position
.84a1	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a5	aa		tax				tax
.84a6	c8		iny				iny
.84a7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a9	e8		inx				inx 							; bump them.
.84aa	1a		inc a				inc 	a
.84ab	20 ab 9d	jsr $9dab			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84ae	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b0	29 e0		and #$e0			and 	#$E0
.84b2	d0 23		bne $84d7			bne 	_DCSize
.84b4	a0 02		ldy #$02			ldy 	#2 						; get base type
.84b6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84b8	20 f5 84	jsr $84f5			jsr 	ScaleByBaseType 		; scale by base type
.84bb	a5 36		lda $36				lda 	zTemp0
.84bd	a6 37		ldx $37				ldx 	zTemp0+1
.84bf	20 a1 99	jsr $99a1			jsr 	AllocateXABytes 		; allocate memory
.84c2	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c6	c8		iny				iny
.84c7	8a		txa				txa
.84c8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84ca	7a		ply				ply 							; get position back
.84cb	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 		; check )
.84ce	b1 30		lda ($30),y			lda 	(codePtr),y
.84d0	c8		iny				iny 							; consume in case
.84d1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d3	f0 85		beq $845a			beq 	DimCommand
.84d5	88		dey				dey 							; undo consume
.84d6	60		rts				rts
.84d7					_DCSize:
.84d7	a9 16		lda #$16		lda	#22
.84d9	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.84dc					_DCSyntax:
.84dc	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.84df					_DCRedefine:
.84df	a9 15		lda #$15		lda	#21
.84e1	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.84e4					_DCType:
.84e4	4c aa 9f	jmp $9faa			jmp 	TypeError
.84e7					_DCGetSize:
.84e7	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84e9	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 	; get array dimension
.84ec	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84ee	f0 e7		beq $84d7			beq 	_DCSize
.84f0	c9 fe		cmp #$fe			cmp 	#254
.84f2	f0 e3		beq $84d7			beq 	_DCSize
.84f4	60		rts				rts
.84f5					ScaleByBaseType:
.84f5	29 10		and #$10			and 	#NSBIsString 			; is it string
.84f7	d0 19		bne $8512			bne 	_SBBTString
.84f9	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84fb	48		pha				pha
.84fc	a5 36		lda $36				lda 	zTemp0
.84fe	48		pha				pha
.84ff	06 36		asl $36				asl 	zTemp0 					; x 2
.8501	26 37		rol $37				rol 	zTemp0+1
.8503	06 36		asl $36				asl 	zTemp0 					; x 4
.8505	26 37		rol $37				rol 	zTemp0+1
.8507	68		pla				pla 							; add stacked value = x 5
.8508	65 36		adc $36				adc 	zTemp0
.850a	85 36		sta $36				sta 	zTemp0
.850c	68		pla				pla
.850d	65 37		adc $37				adc 	zTemp0+1
.850f	85 37		sta $37				sta 	zTemp0+1
.8511	60		rts				rts
.8512					_SBBTString:
.8512	06 36		asl $36				asl 	zTemp0
.8514	26 37		rol $37				rol 	zTemp0+1
.8516	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8517					EndCommand:
.8517	4c 59 83	jmp $8359			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.851a					ForCommand:
.851a	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.851c	20 04 a6	jsr $a604			jsr 	StackOpen
.851f	a2 00		ldx #$00			ldx 	#0
.8521	20 dc 97	jsr $97dc			jsr 	EvaluateTerm
.8524	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8527	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8529	d0 49		bne $8574			bne		_FCError
.852b	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.852d	20 4a 8d	jsr $8d4a			jsr 	CheckNextA
.8530	e8		inx				inx
.8531	20 62 9d	jsr $9d62			jsr 	EvaluateInteger 			; <from> in +1
.8534	b1 30		lda ($30),y			lda 	(codePtr),y
.8536	c8		iny				iny 								; consume it
.8537	48		pha				pha 								; save on stack for later
.8538	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.853a	f0 04		beq $8540			beq 	_FCNoSyntax
.853c	c9 cb		cmp #$cb			cmp 	#KWD_TO
.853e	d0 37		bne $8577			bne 	_FCSyntaxError
.8540					_FCNoSyntax:
.8540	e8		inx				inx
.8541	20 62 9d	jsr $9d62			jsr 	EvaluateInteger
.8544	20 48 a6	jsr $a648			jsr 	STKSaveCodePosition 		; save loop back position
.8547	68		pla				pla 								; restore DOWNTO or TO
.8548	5a		phy				phy 								; save Y on the stack
.8549	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.854b	f0 02		beq $854f			beq 	_FCNotDownTo
.854d	a9 02		lda #$02			lda 	#2
.854f					_FCNotDownTo:
.854f	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8550	a0 10		ldy #$10			ldy 	#16
.8552	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8554	a0 06		ldy #$06			ldy 	#6
.8556	ad 08 04	lda $0408			lda 	NSMantissa0
.8559	91 34		sta ($34),y			sta 	(basicStack),y
.855b	ad 10 04	lda $0410			lda 	NSMantissa1
.855e	c8		iny				iny
.855f	91 34		sta ($34),y			sta 	(basicStack),y
.8561	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8563	a2 01		ldx #$01			ldx 	#1
.8565	20 7a 85	jsr $857a			jsr 	FCIntegerToStack
.8568	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.856a	a2 02		ldx #$02			ldx 	#2
.856c	20 7a 85	jsr $857a			jsr 	FCIntegerToStack
.856f	20 9a 85	jsr $859a			jsr 	CopyIndexToReference
.8572	7a		ply				ply 								; restore position
.8573	60		rts				rts
.8574					_FCError:
.8574	4c aa 9f	jmp $9faa			jmp 	TypeError
.8577					_FCSyntaxError:
.8577	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.857a					FCIntegerToStack:
.857a	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.857d	10 03		bpl $8582			bpl	 	_FCNotNegative
.857f	20 cb 9d	jsr $9dcb			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8582					_FCNotNegative:
.8582	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8585	91 34		sta ($34),y			sta 	(basicStack),y
.8587	c8		iny				iny
.8588	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.858b	91 34		sta ($34),y			sta 	(basicStack),y
.858d	c8		iny				iny
.858e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8591	91 34		sta ($34),y			sta 	(basicStack),y
.8593	c8		iny				iny
.8594	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8597	91 34		sta ($34),y			sta 	(basicStack),y
.8599	60		rts				rts
.859a					CopyIndexToReference:
.859a	5a		phy				phy
.859b	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.859d	38		sec				sec 								; (because we copy from offset 8)
.859e	b1 34		lda ($34),y			lda 	(basicStack),y
.85a0	e9 08		sbc #$08			sbc 	#8
.85a2	85 36		sta $36				sta 	zTemp0
.85a4	c8		iny				iny
.85a5	b1 34		lda ($34),y			lda 	(basicStack),y
.85a7	e9 00		sbc #$00			sbc 	#0
.85a9	85 37		sta $37				sta 	zTemp0+1
.85ab	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85ad	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85af	b1 34		lda ($34),y			lda 	(basicStack),y
.85b1	0a		asl a				asl 	a 							; into carry
.85b2	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b4	90 14		bcc $85ca			bcc 	_CITRNormal
.85b6	38		sec				sec
.85b7					_CITRNegative:
.85b7	a9 00		lda #$00			lda 	#0
.85b9	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85bb	91 36		sta ($36),y			sta 	(zTemp0),y
.85bd	c8		iny				iny
.85be	ca		dex				dex
.85bf	d0 f6		bne $85b7			bne 	_CITRNegative
.85c1	88		dey				dey 								; look at MSB of mantissa
.85c2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c4	09 80		ora #$80			ora 	#$80
.85c6	91 36		sta ($36),y			sta 	(zTemp0),y
.85c8	7a		ply				ply
.85c9	60		rts				rts
.85ca					_CITRNormal:
.85ca	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85cc	91 36		sta ($36),y			sta 	(zTemp0),y
.85ce	c8		iny				iny
.85cf	ca		dex				dex
.85d0	d0 f8		bne $85ca			bne 	_CITRNormal
.85d2	7a		ply				ply 								; and exit.
.85d3	60		rts				rts
.85d4					NextCommand:
.85d4	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85d6	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85d8	20 30 a6	jsr $a630			jsr 	StackCheckFrame
.85db	5a		phy				phy
.85dc	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85de	b1 34		lda ($34),y			lda 	(basicStack),y
.85e0	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e2	30 02		bmi $85e6			bmi 	_NCStepNeg
.85e4	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85e6					_NCStepNeg:
.85e6	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85e8	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ea	18		clc				clc
.85eb					_NCBump:
.85eb	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85ed	91 34		sta ($34),y			sta 	(basicStack),y
.85ef	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f1	c8		iny				iny 								; next byte
.85f2	ca		dex				dex 								; do four times
.85f3	d0 f6		bne $85eb			bne 	_NCBump
.85f5	20 9a 85	jsr $859a			jsr		CopyIndexToReference		; copy it to the reference variable.
.85f8	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85fa	b1 34		lda ($34),y			lda 	(basicStack),y
.85fc	0a		asl a				asl 	a 							; sign bit to carry
.85fd	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85ff	85 38		sta $38				sta 	zTemp1
.8601	90 02		bcc $8605			bcc 	_NCCompRev 					; use if step is +ve
.8603	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8605					_NCCompRev:
.8605	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8607	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8609	85 39		sta $39				sta 	zTemp1+1
.860b	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.860d	38		sec				sec
.860e					_NCCompare:
.860e	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8610	b1 34		lda ($34),y			lda 	(basicStack),y
.8612	a4 39		ldy $39				ldy 	zTemp1+1
.8614	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8616	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8618	e6 39		inc $39				inc 	zTemp1+1
.861a	ca		dex				dex 								; do it 4 times.
.861b	d0 f1		bne $860e			bne 	_NCCompare
.861d	50 02		bvc $8621			bvc 	_NCNoOverflow 				; convert to signed comparison
.861f	49 80		eor #$80			eor 	#$80
.8621					_NCNoOverflow:
.8621	7a		ply				ply 								; restore Y position
.8622	0a		asl a				asl 	a 							; is bit 7 set.
.8623	90 04		bcc $8629			bcc 	_NCLoopback 				; if no , >= so loop back
.8625	20 22 a6	jsr $a622			jsr 	StackClose 					; exit the loop
.8628	60		rts				rts
.8629					_NCLoopBack:
.8629	20 59 a6	jsr $a659			jsr 	STKLoadCodePosition 		; loop back
.862c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.862d					Command_GOSUB:
.862d	a2 00		ldx #$00			ldx 	#0
.862f	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8632	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8634	20 04 a6	jsr $a604			jsr 	StackOpen 					; create frame
.8637	20 48 a6	jsr $a648			jsr 	STKSaveCodePosition 		; save current position
.863a	4c 50 86	jmp $8650			jmp 	GotoStackX
.863d					Command_RETURN:
.863d	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.863f	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8641	20 30 a6	jsr $a630			jsr 	StackCheckFrame
.8644	20 59 a6	jsr $a659			jsr 	STKLoadCodePosition 		; restore code position
.8647	20 22 a6	jsr $a622			jsr 	StackClose
.864a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.864b					GotoCommand:
.864b	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.864d	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.8650					GotoStackX:
.8650	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8653	48		pha				pha 								; it is slightly inefficient, just in cases.
.8654	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8657	fa		plx				plx
.8658	20 23 a2	jsr $a223			jsr 	MemorySearch 				; transfer to line number AX.
.865b	90 05		bcc $8662			bcc 	_GotoError 					; not found, off end.
.865d	d0 03		bne $8662			bne 	_GotoError 					; not found exactly
.865f	4c fe 89	jmp $89fe			jmp 	RunNewLine 					; and go straight to new line code.
.8662					_GotoError:
.8662	a9 0d		lda #$0d		lda	#13
.8664	4c 53 8d	jmp $8d53		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8667					IfCommand:
.8667	a2 00		ldx #$00			ldx 	#0 							; If what.
.8669	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber
.866c	b1 30		lda ($30),y			lda 	(codePtr),y
.866e	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8670	d0 0a		bne $867c			bne 	_IFStructured
.8672	c8		iny				iny 								; consume THEN
.8673	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; is it zero
.8676	f0 01		beq $8679			beq 	_IfFail 					; if fail, go to next line
.8678	60		rts				rts 								; if THEN just continue
.8679					_IfFail:
.8679	4c 63 8a	jmp $8a63			jmp 	EOLCommand
.867c					_IfStructured:
.867c	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; is it zero
.867f	d0 07		bne $8688			bne 	_IfExit 					; if not, then continue normally.
.8681	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8683	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.8685	20 95 8c	jsr $8c95			jsr 	ScanForward 				; and run from there/
.8688					_IfExit:
.8688	60		rts				rts
.8689					ElseCode:
.8689	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.868b	aa		tax				tax 								; so just go to the structure exit
.868c	20 95 8c	jsr $8c95			jsr 	ScanForward
.868f	60		rts				rts
.8690					EndIf:
.8690	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8691					LetCommand:
.8691	a2 00		ldx #$00			ldx 	#0
.8693	b1 30		lda ($30),y			lda 	(codePtr),y
.8695	c9 10		cmp #$10			cmp 	#KWD_AT
.8697	d0 16		bne $86af			bne 	_LCStandard
.8699	c8		iny				iny 								; skip equal
.869a	20 dc 97	jsr $97dc			jsr 	EvaluateTerm 				; get a number
.869d	20 20 96	jsr $9620			jsr 	Dereference 				; dereference it
.86a0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a3	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86a5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86a8	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86aa	d0 10		bne $86bc			bne 	_LCMain
.86ac	4c aa 9f	jmp $9faa			jmp 	TypeError 					; was a reference before.
.86af					_LCStandard:
.86af	ad ea 92	lda $92ea			lda 	PrecedenceLevel+"*"			; precedence > this
.86b2	20 04 93	jsr $9304			jsr 	EvaluateExpressionAtPrecedence
.86b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86b8	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86ba	f0 0e		beq $86ca			beq 	_LetGoProc 					; it's a procedure call.
.86bc					_LCMain:
.86bc	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86be	20 4a 8d	jsr $8d4a			jsr 	CheckNextA
.86c1	e8		inx				inx 								; RHS
.86c2	20 36 9d	jsr $9d36			jsr 	EvaluateValue
.86c5	ca		dex				dex
.86c6	20 cd 86	jsr $86cd			jsr 	AssignVariable
.86c9	60		rts				rts
.86ca					_LetGoProc:
.86ca	4c cb 88	jmp $88cb			jmp 	CallProcedure
.86cd					AssignVariable:
.86cd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d0	48		pha				pha 								; save a copy
.86d1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d4	29 10		and #$10			and 	#NSBIsString
.86d6	d0 0b		bne $86e3			bne 	_ASError
.86d8	68		pla				pla 								; get back
.86d9	29 10		and #$10			and 	#NSBIsString 				; check type
.86db	d0 03		bne $86e0			bne 	_ASString
.86dd	4c 48 95	jmp $9548			jmp 	AssignNumber
.86e0					_ASString:
.86e0	4c b6 95	jmp $95b6			jmp 	AssignString
.86e3					_ASError:
.86e3	4c aa 9f	jmp $9faa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e6					Command_List:
.86e6	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86e9	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86ec	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86ef	a9 ff		lda #$ff			lda 	#$FF
.86f1	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f4	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86f7	b1 30		lda ($30),y			lda 	(codePtr),y
.86f9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86fb	f0 1e		beq $871b			beq 	_CLSecond
.86fd	20 7c 87	jsr $877c			jsr 	CLIsDigit 					; if not digit, list all
.8700	b0 24		bcs $8726			bcs 	_CLStart
.8702	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8704	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.8707	b1 30		lda ($30),y			lda 	(codePtr),y
.8709	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.870b	f0 0e		beq $871b			beq 	_CLSecond 					; if so go get it
.870d	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8710	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8713	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8716	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8719	80 0b		bra $8726			bra 	_CLStart
.871b					_CLSecond:
.871b	c8		iny				iny 								; consume comma
.871c	20 7c 87	jsr $877c			jsr 	CLIsDigit 					; digit found
.871f	b0 05		bcs $8726			bcs 	_CLStart 					; if not, continue listing
.8721	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8723	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.8726					_CLStart
.8726	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8728	85 30		sta $30				sta 	codePtr
.872a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.872c	85 31		sta $31				sta 	codePtr+1
.872e					_CLLoop:
.872e	20 e6 a9	jsr $a9e6			jsr 	EXTBreakCheck 				; break check
.8731	f0 33		beq $8766			beq 	_CLExit
.8733	b2 30		lda ($30)			lda 	(codePtr)
.8735	f0 2f		beq $8766			beq 	_CLExit
.8737	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8739	20 69 87	jsr $8769			jsr 	CLCompareLineNo
.873c	90 1b		bcc $8759			bcc 	_CLNext
.873e	a2 07		ldx #$07			ldx 	#7
.8740	20 69 87	jsr $8769			jsr 	CLCompareLineNo
.8743	f0 02		beq $8747			beq 	_CLDoThisOne
.8745	b0 12		bcs $8759			bcs 	_CLNext
.8747					_CLDoThisOne:
.8747	20 f8 8c	jsr $8cf8			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.874a	20 30 b3	jsr $b330			jsr 	ListConvertLine 			; convert line into token Buffer
.874d	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.874f	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8751	20 ac 8d	jsr $8dac			jsr 	PrintStringXA
.8754	a9 0d		lda #$0d			lda 	#13 						; new line
.8756	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8759					_CLNext:
.8759	18		clc				clc
.875a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.875c	65 30		adc $30				adc 	codePtr
.875e	85 30		sta $30				sta 	codePtr
.8760	90 02		bcc $8764			bcc 	_CREExit
.8762	e6 31		inc $31				inc 	codePtr+1
.8764					_CREExit:
.8764	80 c8		bra $872e			bra 	_CLLoop
.8766					_CLExit:
.8766	4c 59 83	jmp $8359			jmp 	WarmStart
.8769					CLCompareLineNo:
.8769	38		sec				sec
.876a	a0 01		ldy #$01			ldy 	#1
.876c	b1 30		lda ($30),y			lda 	(codePtr),y
.876e	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8771	85 36		sta $36				sta 	zTemp0
.8773	c8		iny				iny
.8774	b1 30		lda ($30),y			lda 	(codePtr),y
.8776	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8779	05 36		ora $36				ora 	zTemp0
.877b	60		rts				rts
.877c					CLIsDigit:
.877c	b1 30		lda ($30),y			lda 	(codePtr),y
.877e	c9 30		cmp #$30			cmp 	#"0"
.8780	90 03		bcc $8785			bcc	 	_CLIDExitFalse
.8782	c9 3a		cmp #$3a			cmp 	#"9"+1
.8784	60		rts				rts
.8785					_CLIDExitFalse:
.8785	38		sec				sec
.8786	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8787					Command_LOCAL:
.8787	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8789	20 95 87	jsr $8795			jsr 	LocaliseNextTerm 			; convert term to a local.
.878c	b1 30		lda ($30),y			lda 	(codePtr),y
.878e	c8		iny				iny
.878f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8791	f0 f4		beq $8787			beq 	Command_LOCAL
.8793	88		dey				dey 								; unpick pre-get
.8794	60		rts				rts
.8795					LocaliseNextTerm:
.8795	20 dc 97	jsr $97dc			jsr 	EvaluateTerm 				; evaluate the term
.8798	bd 00 04	lda $0400,x			lda 	NSStatus,x
.879b	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.879d	f0 61		beq $8800			beq		_LNTError
.879f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a2	85 36		sta $36				sta 	zTemp0
.87a4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87a7	85 37		sta $37				sta  	zTemp0+1
.87a9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87ac	29 10		and #$10			and 	#NSBIsString
.87ae	d0 1e		bne $87ce			bne 	_LNTPushString
.87b0	5a		phy				phy
.87b1	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b3					_LNTPushNumLoop:
.87b3	b1 36		lda ($36),y			lda		(zTemp0),y
.87b5	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87b8	c8		iny				iny
.87b9	c0 05		cpy #$05			cpy 	#5
.87bb	d0 f6		bne $87b3			bne 	_LNTPushNumLoop
.87bd	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87bf	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87c2	a5 37		lda $37				lda 	zTemp0+1
.87c4	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87c7	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87c9	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87cc	7a		ply				ply
.87cd	60		rts				rts
.87ce					_LNTPushString:
.87ce	5a		phy				phy
.87cf	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d1	85 38		sta $38				sta 	zTemp1
.87d3	a0 01		ldy #$01			ldy 	#1
.87d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d7	85 39		sta $39				sta 	zTemp1+1
.87d9	a0 00		ldy #$00			ldy 	#0 							; output string
.87db	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87dd	f0 0a		beq $87e9			beq 	_LNTStringOut
.87df					_LNTPushStrLoop:
.87df	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e1	f0 06		beq $87e9			beq 	_LNTStringOut
.87e3	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87e6	c8		iny				iny
.87e7	80 f6		bra $87df			bra 	_LNTPushStrLoop
.87e9					_LNTStringOut:
.87e9	98		tya				tya									; output length
.87ea	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87ed	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87f0	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87f3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f6	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87f9	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87fb	20 e2 a5	jsr $a5e2			jsr 	StackPushByte
.87fe	7a		ply				ply
.87ff	60		rts				rts
.8800					_LNTError:
.8800	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.8803					LocalPopValue:
.8803	20 fb a5	jsr $a5fb			jsr 	StackPopByte
.8806	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8808	d0 17		bne $8821			bne 	_LPVString
.880a	20 fb a5	jsr $a5fb			jsr 	StackPopByte 				; address
.880d	85 37		sta $37				sta 	zTemp0+1
.880f	20 fb a5	jsr $a5fb			jsr 	StackPopByte
.8812	85 36		sta $36				sta 	zTemp0
.8814	5a		phy				phy
.8815	a0 04		ldy #$04			ldy 	#4 							; copy back
.8817					_LPVNumberCopy:
.8817	20 fb a5	jsr $a5fb			jsr 	StackPopByte
.881a	91 36		sta ($36),y			sta 	(zTemp0),y
.881c	88		dey				dey
.881d	10 f8		bpl $8817			bpl 	_LPVNumberCopy
.881f	7a		ply				ply 								; and complete
.8820	60		rts				rts
.8821					_LPVString:
.8821	20 fb a5	jsr $a5fb			jsr 	StackPopByte 				; address of record => zTemp0
.8824	85 37		sta $37				sta 	zTemp0+1
.8826	20 fb a5	jsr $a5fb			jsr 	StackPopByte
.8829	85 36		sta $36				sta 	zTemp0
.882b	5a		phy				phy
.882c	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.882e	85 38		sta $38				sta 	zTemp1
.8830	a0 01		ldy #$01			ldy 	#1
.8832	b1 36		lda ($36),y			lda 	(zTemp0),y
.8834	85 39		sta $39				sta 	zTemp1+1
.8836	20 fb a5	jsr $a5fb			jsr 	StackPopByte 				; # to get => y
.8839	a8		tay				tay
.883a	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.883c	f0 0e		beq $884c			beq 	_LPVStringCopied
.883e	a9 00		lda #$00			lda 	#0 							; NULL on end
.8840	91 38		sta ($38),y			sta 	(zTemp1),y
.8842					_LPVStringCopy:
.8842	88		dey				dey
.8843	30 07		bmi $884c			bmi 	_LPVStringCopied
.8845	20 fb a5	jsr $a5fb			jsr 	StackPopByte
.8848	91 38		sta ($38),y			sta 	(zTemp1),y
.884a	80 f6		bra $8842			bra 	_LPVStringCopy
.884c					_LPVStringCopied:
.884c	fa		plx				plx
.884d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.884e					NewCommand:
.884e	20 54 88	jsr $8854			jsr 	NewProgram
.8851	4c 59 83	jmp $8359			jmp 	WarmStart
.8854					NewProgram:
.8854	20 01 a2	jsr $a201			jsr 	MemoryNew
.8857	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.885a	20 f2 83	jsr $83f2			jsr 	ClearCommand 				; clear everything.
.885d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.885e					Command_Print:
.885e	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.885f					_CPLoop:
.885f	08		php				php 								; save last action flag
.8860	b1 30		lda ($30),y			lda 	(codePtr),y
.8862	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8864	f0 46		beq $88ac			beq 	_CPExit
.8866	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8868	f0 42		beq $88ac			beq 	_CPExit
.886a	68		pla				pla 								; throw last action flag
.886b	b1 30		lda ($30),y			lda 	(codePtr),y
.886d	c8		iny				iny
.886e	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8870	f0 37		beq $88a9			beq 	_CPContinueWithSameLine
.8872	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8874	f0 2e		beq $88a4			beq 	_CPTab
.8876	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8878	f0 26		beq $88a0			beq 	_CPNewLine
.887a	88		dey				dey 								; undo the get.
.887b	a2 00		ldx #$00			ldx 	#0
.887d	20 36 9d	jsr $9d36			jsr 	EvaluateValue 				; get a value into slot 0
.8880	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8883	29 10		and #$10			and 	#NSBIsString
.8885	f0 0b		beq $8892			beq 	_CPNumber
.8887	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.888a	ad 08 04	lda $0408			lda 	NSMantissa0
.888d	20 b5 88	jsr $88b5			jsr 	CPPrintStringXA
.8890	80 cc		bra $885e			bra 	Command_Print 				; loop round clearing carry so NL if end
.8892					_CPNumber:
.8892	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8894	20 0c 9c	jsr $9c0c			jsr 	ConvertNumberToString 		; convert to string
.8897	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8899	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.889b	20 b5 88	jsr $88b5			jsr 	CPPrintStringXA
.889e	80 be		bra $885e			bra 	Command_Print 				; loop round clearing carry so NL if end
.88a0					_CPNewLine:
.88a0	a9 0d		lda #$0d			lda 	#13
.88a2	80 02		bra $88a6			bra 	_CPPrintChar
.88a4					_CPTab:
.88a4	a9 09		lda #$09			lda 	#9 							; print TAB
.88a6					_CPPrintChar:
.88a6	20 c8 88	jsr $88c8			jsr 	CPPrintVector
.88a9					_CPContinueWithSameLine:
.88a9	38		sec				sec 								; loop round with carry set, which
.88aa	80 b3		bra $885f			bra 	_CPLoop 					; will inhibit final CR
.88ac					_CPExit:
.88ac	28		plp				plp 								; get last action flag
.88ad	b0 05		bcs $88b4			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88af	a9 0d		lda #$0d			lda 	#13 						; print new line
.88b1	20 c8 88	jsr $88c8			jsr 	CPPrintVector
.88b4					_CPExit2:
.88b4	60		rts				rts
.88b5					CPPrintStringXA:
.88b5	5a		phy				phy
.88b6	86 37		stx $37				stx 	zTemp0+1
.88b8	85 36		sta $36				sta 	zTemp0
.88ba	a0 00		ldy #$00			ldy 	#0
.88bc					_PSXALoop:
.88bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.88be	f0 06		beq $88c6			beq 	_PSXAExit
.88c0	20 c8 88	jsr $88c8			jsr 	CPPrintVector
.88c3	c8		iny				iny
.88c4	80 f6		bra $88bc			bra 	_PSXALoop
.88c6					_PSXAExit:
.88c6	7a		ply				ply
.88c7	60		rts				rts
.88c8					CPPrintVector:
.88c8	4c 44 a7	jmp $a744			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88cb					CallProcedure:
.88cb	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88cd	b1 30		lda ($30),y			lda 	(codePtr),y
.88cf	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88d1	f0 0c		beq $88df			beq 	_CPEndParam
.88d3					_CPParamLoop:
.88d3	20 36 9d	jsr $9d36			jsr 	EvaluateValue 				; get parameter onto stack
.88d6	e8		inx				inx 								; bump next stack
.88d7	b1 30		lda ($30),y			lda 	(codePtr),y
.88d9	c8		iny				iny
.88da	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88dc	f0 f5		beq $88d3			beq 	_CPParamLoop
.88de	88		dey				dey 								; unpick.
.88df					_CPEndParam:
.88df	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88e2	c8		iny				iny									; skip right bracket
.88e3	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88e5	20 04 a6	jsr $a604			jsr 	StackOpen
.88e8	20 48 a6	jsr $a648			jsr 	STKSaveCodePosition 		; save loop position
.88eb	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88ee	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88f0	ad 10 04	lda $0410			lda 	NSMantissa1
.88f3	85 37		sta $37				sta 	zTemp0+1
.88f5	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88f7	b2 36		lda ($36)			lda 	(zTemp0)
.88f9	85 30		sta $30				sta 	safePtr
.88fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.88fd	85 31		sta $31				sta 	safePtr+1
.88ff	c8		iny				iny
.8900	b1 36		lda ($36),y			lda 	(zTemp0),y
.8902	85 32		sta $32				sta 	safePtr+2
.8904	c8		iny				iny
.8905	b1 36		lda ($36),y			lda 	(zTemp0),y
.8907	85 33		sta $33				sta 	safePtr+3
.8909	c8		iny				iny 								; get Y offset -> Y
.890a	b1 36		lda ($36),y			lda 	(zTemp0),y
.890c	a8		tay				tay
.890d	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.890f	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8912	f0 13		beq $8927			beq 	_ParamExit 					; if so, exit.
.8914					_ParamExtract:
.8914	ca		dex				dex 								; put a local term on the level before
.8915	20 95 87	jsr $8795			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8918	20 cd 86	jsr $86cd			jsr 	AssignVariable 				; assign stacked value to the variable.
.891b	e8		inx				inx 								; advance to next parameter to do.
.891c	e8		inx				inx
.891d	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8920	f0 05		beq $8927			beq 	_ParamExit
.8922	20 42 8d	jsr $8d42			jsr 	CheckComma 					; comma seperating parameters
.8925	80 ed		bra $8914			bra 	_ParamExtract
.8927					_ParamExit:
.8927	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 			; check )
.892a	60		rts				rts 								; and continue from here
.892b					Command_ENDPROC:
.892b	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.892d	a2 14		ldx #$14			ldx 	#ERRID_PROC
.892f	20 30 a6	jsr $a630			jsr 	StackCheckFrame
.8932	20 59 a6	jsr $a659			jsr 	STKLoadCodePosition 		; restore code position
.8935	20 22 a6	jsr $a622			jsr 	StackClose
.8938	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8939					Command_Read:
.8939	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.893b	20 dc 97	jsr $97dc			jsr 	EvaluateTerm
.893e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8941	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8943	f0 4a		beq $898f			beq 	_CRSyntax 					; check reference (bit 0)
.8945	20 d8 89	jsr $89d8			jsr 	SwapDataCodePtrs 			; swap code and data
.8948	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.894b	d0 20		bne $896d			bne 	_CRContinueData
.894d					_CRKeepSearching:
.894d	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.894f	aa		tax				tax
.8950	20 95 8c	jsr $8c95			jsr 	ScanForward
.8953	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.8955	f0 16		beq $896d			beq 	_CRHaveData 				; found it
.8957	18		clc				clc
.8958	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.895a	65 30		adc $30				adc 	codePtr
.895c	85 30		sta $30				sta 	codePtr
.895e	90 02		bcc $8962			bcc 	_CREExit
.8960	e6 31		inc $31				inc 	codePtr+1
.8962					_CREExit:
.8962	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8964	b2 30		lda ($30)			lda 	(codePtr)
.8966	d0 e5		bne $894d			bne 	_CRKeepSearching
.8968	a9 0b		lda #$0b		lda	#11
.896a	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.896d					_CRHaveData:
.896d					_CRContinueData:
.896d	a2 01		ldx #$01			ldx 	#1
.896f	20 36 9d	jsr $9d36			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8972	ca		dex				dex
.8973	20 cd 86	jsr $86cd			jsr		AssignVariable 				; do the assignment
.8976	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8979	b1 30		lda ($30),y			lda 	(codePtr),y
.897b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.897d	d0 04		bne $8983			bne 	_CRSwapBack
.897f	c8		iny				iny 								; consume comma
.8980	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8983					_CRSwapBack:
.8983	20 d8 89	jsr $89d8			jsr 	SwapDataCodePtrs			; swap them back.
.8986	b1 30		lda ($30),y			lda 	(codePtr),y
.8988	c8		iny				iny
.8989	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.898b	f0 ac		beq $8939			beq 	Command_Read 				; if so go round again.
.898d	88		dey				dey 								; unpick get.
.898e	60		rts				rts
.898f					_CRSyntax:
.898f	4c a0 9f	jmp $9fa0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8992					RemCommand:
.8992	b1 30		lda ($30),y			lda 	(codePtr),y
.8994	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8996	d0 06		bne $899e			bne 	_RMExit
.8998	c8		iny				iny
.8999	98		tya				tya
.899a	38		sec				sec
.899b	71 30		adc ($30),y			adc 	(codePtr),y
.899d	a8		tay				tay
.899e					_RMExit:
.899e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.899f					Command_REPEAT:
.899f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89a1	20 04 a6	jsr $a604			jsr 	StackOpen
.89a4	20 48 a6	jsr $a648			jsr 	STKSaveCodePosition 		; save loop position
.89a7	60		rts				rts
.89a8					Command_UNTIL:
.89a8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89aa	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89ac	20 30 a6	jsr $a630			jsr 	StackCheckFrame
.89af	a2 00		ldx #$00			ldx 	#0
.89b1	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber 				; work out the number
.89b4	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; check if zero
.89b7	f0 04		beq $89bd			beq 	_CULoopBack 				; if so keep looping
.89b9	20 22 a6	jsr $a622			jsr 	StackClose		 			; return
.89bc	60		rts				rts
.89bd					_CULoopBack:
.89bd	20 59 a6	jsr $a659			jsr 	STKLoadCodePosition 		; loop back
.89c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89c1					Command_Restore:
.89c1	20 d8 89	jsr $89d8			jsr 	SwapDataCodePtrs 			; swap code and data
.89c4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89c6	85 30		sta $30				sta 	codePtr
.89c8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89ca	85 31		sta $31				sta 	codePtr+1
.89cc	20 d8 89	jsr $89d8			jsr 	SwapDataCodePtrs 			; put them back
.89cf	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89d1	8d 9b 04	sta $049b			sta 	dataPointer+4
.89d4	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89d7	60		rts				rts
.89d8					SwapDataCodePtrs:
.89d8	da		phx				phx
.89d9	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89db					_SDCPLoop:
.89db	b5 30		lda $30,x			lda 	safePtr,x
.89dd	48		pha				pha
.89de	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89e1	95 30		sta $30,x			sta 	safePtr,x
.89e3	68		pla				pla
.89e4	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89e7	ca		dex				dex
.89e8	10 f1		bpl $89db			bpl 	_SDCPLoop
.89ea	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89ed	8c 9b 04	sty $049b			sty 	dataPointer+4
.89f0	a8		tay				tay
.89f1	fa		plx				plx
.89f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89f3					CommandRUN:
.89f3	20 f2 83	jsr $83f2			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89f6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89f8	85 30		sta $30				sta 	codePtr
.89fa	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89fc	85 31		sta $31				sta 	codePtr+1
.89fe					RUNNewLine:
.89fe	b2 30		lda ($30)			lda 	(codePtr)
.8a00	f0 5e		beq $8a60			beq 	CRNoProgram         		; no then END.
.8a02	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a04	9a		txs				txs
.8a05					RUNCodePointerLine:
.8a05	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a07					_CRIncMainLoop:
.8a07	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8a0a	d0 05		bne $8a11			bne 	_CRNoBreakCheck
.8a0c	20 e6 a9	jsr $a9e6			jsr 	EXTBreakCheck 				; break check
.8a0f	f0 4a		beq $8a5b			beq 	_CRBreak
.8a11					_CRNoBreakCheck:
.8a11	c8		iny				iny
.8a12					_CRMainLoop:
.8a12	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a15	b1 30		lda ($30),y			lda 	(codePtr),y
.8a17	10 10		bpl $8a29			bpl 	_CRNotKeyword
.8a19	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a1b	b0 04		bcs $8a21			bcs 	_CRIsKeyword
.8a1d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a1f	b0 34		bcs $8a55			bcs		_CRSyntaxError
.8a21					_CRIsKeyword:
.8a21	c8		iny				iny 								; consume command
.8a22	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a23	aa		tax				tax 								; put in X for vector jump
.8a24	20 58 8a	jsr $8a58			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a27	80 e9		bra $8a12			bra 	_CRMainLoop 				; and loop round
.8a29					_CRNotKeyword:
.8a29	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a2b	f0 da		beq $8a07			beq 	_CRIncMainLoop
.8a2d	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a2f	90 05		bcc $8a36			bcc 	_CRNotVariable
.8a31					_CRGoLet:
.8a31	20 91 86	jsr $8691			jsr 	LetCommand
.8a34	80 dc		bra $8a12			bra 	_CRMainLoop
.8a36					_CRNotVariable:
.8a36	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a38	f0 f7		beq $8a31			beq 	_CRGoLet
.8a3a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a3c	f0 f3		beq $8a31			beq 	_CRGoLet
.8a3e	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a40	f0 ef		beq $8a31			beq 	_CRGoLet
.8a42	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a44	f0 09		beq $8a4f			beq 	_CRGoRem
.8a46	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a48	d0 0b		bne $8a55			bne 	_CRSyntaxError
.8a4a	20 2a 82	jsr $822a			jsr 	LabelHere
.8a4d	80 c3		bra $8a12			bra 	_CRMainLoop
.8a4f					_CRGoRem:
.8a4f	c8		iny				iny
.8a50	20 92 89	jsr $8992			jsr 	RemCommand
.8a53	80 bd		bra $8a12			bra 	_CRMainLoop
.8a55					_CRSyntaxError:
.8a55	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.8a58					_CRCallVector0:
.8a58	7c 04 8b	jmp ($8b04,x)			jmp 	(VectorSet0,x)
.8a5b					_CRBreak:
.8a5b	a9 01		lda #$01		lda	#1
.8a5d	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.8a60					CRNoProgram:
.8a60	4c 17 85	jmp $8517			jmp 	EndCommand
.8a63					EOLCommand:
.8a63	18		clc				clc
.8a64	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a66	65 30		adc $30				adc 	codePtr
.8a68	85 30		sta $30				sta 	codePtr
.8a6a	90 02		bcc $8a6e			bcc 	_CREExit
.8a6c	e6 31		inc $31				inc 	codePtr+1
.8a6e					_CREExit:
.8a6e	80 8e		bra $89fe			bra 	RunNewLine
.8a70					Shift1Command:
.8a70	b1 30		lda ($30),y			lda 	(codePtr),y
.8a72	c8		iny				iny
.8a73	0a		asl a				asl 	a
.8a74	aa		tax				tax
.8a75	7c 9c 8b	jmp ($8b9c,x)			jmp 	(VectorSet1,x)
.8a78					Shift2Command:
.8a78	b1 30		lda ($30),y			lda 	(codePtr),y
.8a7a	c8		iny				iny
.8a7b	0a		asl a				asl 	a
.8a7c	aa		tax				tax
.8a7d	7c b6 8b	jmp ($8bb6,x)			jmp 	(VectorSet2,x)
.8a80					Unused1:
.8a80					Unused2:
.8a80					Unused3:
.8a80					Unused4:
.8a80	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
>8a83							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a84					VectorSetPunc:
>8a84	40 90					.word	ShiftLeft                        ; $00 <<
>8a86	f7 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a88	ed 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a8a	a0 9f					.word	SyntaxError                      ; $03 !!3
>8a8c	a0 9f					.word	SyntaxError                      ; $04 ><
>8a8e	01 8e					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a90	43 90					.word	ShiftRight                       ; $06 >>
>8a92	a0 9f					.word	SyntaxError                      ; $07 !!7
>8a94	a0 9f					.word	SyntaxError                      ; $08 !!8
>8a96	a0 9f					.word	SyntaxError                      ; $09 !!9
>8a98	a0 9f					.word	SyntaxError                      ; $0a !!10
>8a9a	a0 9f					.word	SyntaxError                      ; $0b !!11
>8a9c	a0 9f					.word	SyntaxError                      ; $0c !!12
>8a9e	a0 9f					.word	SyntaxError                      ; $0d !!13
>8aa0	a0 9f					.word	SyntaxError                      ; $0e !!14
>8aa2	a0 9f					.word	SyntaxError                      ; $0f !!15
>8aa4	a0 9f					.word	SyntaxError                      ; $10 @
>8aa6	a0 9f					.word	SyntaxError                      ; $11 !!17
>8aa8	a0 9f					.word	SyntaxError                      ; $12 !!18
>8aaa	a0 9f					.word	SyntaxError                      ; $13 [
>8aac	c4 8e					.word	IntegerDivide                    ; $14 \
>8aae	a0 9f					.word	SyntaxError                      ; $15 ]
>8ab0	d1 91					.word	EorInteger                       ; $16 ^
>8ab2	a0 9f					.word	SyntaxError                      ; $17 _
>8ab4	a0 9f					.word	SyntaxError                      ; $18 `
>8ab6	a0 9f					.word	SyntaxError                      ; $19 !!25
>8ab8	a0 9f					.word	SyntaxError                      ; $1a !!26
>8aba	a0 9f					.word	SyntaxError                      ; $1b {
>8abc	8b 91					.word	OraInteger                       ; $1c |
>8abe	a0 9f					.word	SyntaxError                      ; $1d }
>8ac0	a0 9f					.word	SyntaxError                      ; $1e ~
>8ac2	a0 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ac4	a0 9f					.word	SyntaxError                      ; $20
>8ac6	17 92					.word	WordIndirect                     ; $21 !
>8ac8	a0 9f					.word	SyntaxError                      ; $22 "
>8aca	a0 9f					.word	SyntaxError                      ; $23 #
>8acc	a0 9f					.word	SyntaxError                      ; $24 $
>8ace	11 8f					.word	IntegerModulus                   ; $25 %
>8ad0	45 91					.word	AndInteger                       ; $26 &
>8ad2	a0 9f					.word	SyntaxError                      ; $27 '
>8ad4	a0 9f					.word	SyntaxError                      ; $28 (
>8ad6	a0 9f					.word	SyntaxError                      ; $29 )
>8ad8	86 8f					.word	MulInteger                       ; $2a *
>8ada	d7 90					.word	AddInteger                       ; $2b +
>8adc	a0 9f					.word	SyntaxError                      ; $2c ,
>8ade	1a 91					.word	SubInteger                       ; $2d -
>8ae0	a0 9f					.word	SyntaxError                      ; $2e .
>8ae2	02 94					.word	FDivideCommand                   ; $2f /
>8ae4	a0 9f					.word	SyntaxError                      ; $30 0
>8ae6	a0 9f					.word	SyntaxError                      ; $31 1
>8ae8	a0 9f					.word	SyntaxError                      ; $32 2
>8aea	a0 9f					.word	SyntaxError                      ; $33 3
>8aec	a0 9f					.word	SyntaxError                      ; $34 4
>8aee	a0 9f					.word	SyntaxError                      ; $35 5
>8af0	a0 9f					.word	SyntaxError                      ; $36 6
>8af2	a0 9f					.word	SyntaxError                      ; $37 7
>8af4	a0 9f					.word	SyntaxError                      ; $38 8
>8af6	a0 9f					.word	SyntaxError                      ; $39 9
>8af8	a0 9f					.word	SyntaxError                      ; $3a :
>8afa	a0 9f					.word	SyntaxError                      ; $3b ;
>8afc	d9 8d					.word	BinaryCompareLess                ; $3c <
>8afe	cf 8d					.word	BinaryCompareEqual               ; $3d =
>8b00	e3 8d					.word	BinaryCompareGreater             ; $3e >
>8b02	3e 92					.word	ByteIndirect                     ; $3f ?
.8b04					VectorSet0:
>8b04	63 8a					.word	EOLCommand                       ; $80 !0:EOF
>8b06	70 8a					.word	Shift1Command                    ; $81 !1:SH1
>8b08	78 8a					.word	Shift2Command                    ; $82 !2:SH2
>8b0a	72 99					.word	AbsUnary                         ; $83 ABS(
>8b0c	82 99					.word	AllocUnary                       ; $84 ALLOC(
>8b0e	f2 99					.word	AscUnary                         ; $85 ASC(
>8b10	bd 9b					.word	ChrUnary                         ; $86 CHR$(
>8b12	22 a5					.word	UnaryEvent                       ; $87 EVENT(
>8b14	cb 8d					.word	UnaryFalse                       ; $88 FALSE
>8b16	ff 99					.word	FracUnary                        ; $89 FRAC(
>8b18	b8 a4					.word	UnaryHit                         ; $8a HIT(
>8b1a	15 9a					.word	IntUnary                         ; $8b INT(
>8b1c	7c 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b1e	b2 a5					.word	UnaryJoyB                        ; $8d JOYB(
>8b20	8b a5					.word	UnaryJoyX                        ; $8e JOYX(
>8b22	8e a5					.word	UnaryJoyY                        ; $8f JOYY(
>8b24	97 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b26	27 9a					.word	LenUnary                         ; $91 LEN(
>8b28	45 9a					.word	Unary_Max                        ; $92 MAX(
>8b2a	c1 9c					.word	Unary_Mid                        ; $93 MID$(
>8b2c	41 9a					.word	Unary_Min                        ; $94 MIN(
>8b2e	9c 9a					.word	Unary_Not                        ; $95 NOT(
>8b30	b2 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b32	a7 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b34	d1 9a					.word	Unary_Rnd                        ; $98 RND(
>8b36	52 9b					.word	SgnUnary                         ; $99 SGN(
>8b38	cf 9b					.word	SpcUnary                         ; $9a SPC(
>8b3a	ea 9b					.word	Unary_Str                        ; $9b STR$(
>8b3c	c6 a5					.word	UnaryTimer                       ; $9c TIMER(
>8b3e	bf 8d					.word	UnaryTrue                        ; $9d TRUE
>8b40	72 9b					.word	ValUnary                         ; $9e VAL(
>8b42	1a 85					.word	ForCommand                       ; $9f FOR
>8b44	67 86					.word	IfCommand                        ; $a0 IF
>8b46	80 8a					.word	Unused1                          ; $a1 PROC
>8b48	9f 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b4a	0b 8d					.word	Command_WHILE                    ; $a3 WHILE
>8b4c	90 86					.word	EndIf                            ; $a4 ENDIF
>8b4e	2b 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b50	d4 85					.word	NextCommand                      ; $a6 NEXT
>8b52	80 8a					.word	Unused4                          ; $a7 THEN
>8b54	a8 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b56	2c 8d					.word	Command_WEND                     ; $a9 WEND
>8b58	a0 9f					.word	SyntaxError                      ; $aa BY
>8b5a	b8 83					.word	CallCommand                      ; $ab CALL
>8b5c	5a a2					.word	CircleCommand                    ; $ac CIRCLE
>8b5e	f2 83					.word	ClearCommand                     ; $ad CLEAR
>8b60	4a 84					.word	ClearScreen                      ; $ae CLS
>8b62	a0 9f					.word	SyntaxError                      ; $af COLOR
>8b64	a0 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b66	52 84					.word	Command_Data                     ; $b1 DATA
>8b68	5a 84					.word	DimCommand                       ; $b2 DIM
>8b6a	80 8a					.word	Unused3                          ; $b3 DOWNTO
>8b6c	89 86					.word	ElseCode                         ; $b4 ELSE
>8b6e	a0 9f					.word	SyntaxError                      ; $b5 FROM
>8b70	86 a4					.word	GfxCommand                       ; $b6 GFX
>8b72	2d 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b74	4b 86					.word	GotoCommand                      ; $b8 GOTO
>8b76	a0 9f					.word	SyntaxError                      ; $b9 HERE
>8b78	84 a2					.word	ImageCommand                     ; $ba IMAGE
>8b7a	91 86					.word	LetCommand                       ; $bb LET
>8b7c	d9 a2					.word	LineCommand                      ; $bc LINE
>8b7e	87 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b80	a0 9f					.word	SyntaxError                      ; $be OFF
>8b82	a0 9f					.word	SyntaxError                      ; $bf ON
>8b84	a0 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b86	de a4					.word	PaletteCommand                   ; $c1 PALETTE
>8b88	d2 a2					.word	PlotCommand                      ; $c2 PLOT
>8b8a	5e 88					.word	Command_Print                    ; $c3 PRINT
>8b8c	39 89					.word	Command_Read                     ; $c4 READ
>8b8e	56 a2					.word	RectangleCommand                 ; $c5 RECT
>8b90	92 89					.word	RemCommand                       ; $c6 REM
>8b92	3d 86					.word	Command_RETURN                   ; $c7 RETURN
>8b94	a0 9f					.word	SyntaxError                      ; $c8 SOLID
>8b96	65 a2					.word	SpriteCommand                    ; $c9 SPRITE
>8b98	a1 a2					.word	TextCommand                      ; $ca TEXT
>8b9a	80 8a					.word	Unused2                          ; $cb TO
.8b9c					VectorSet1:
>8b9c	a0 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9e	a0 9f					.word	SyntaxError                      ; $81 !1:SH1
>8ba0	a0 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba2	89 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ba4	a8 83					.word	AssertCommand                    ; $84 ASSERT
>8ba6	26 a4					.word	BitmapCtrl                       ; $85 BITMAP
>8ba8	17 85					.word	EndCommand                       ; $86 END
>8baa	e6 86					.word	Command_List                     ; $87 LIST
>8bac	4e 88					.word	NewCommand                       ; $88 NEW
>8bae	c1 89					.word	Command_Restore                  ; $89 RESTORE
>8bb0	f3 89					.word	CommandRUN                       ; $8a RUN
>8bb2	6b a4					.word	SpritesCtrl                      ; $8b SPRITES
>8bb4	3e 8c					.word	StopCommand                      ; $8c STOP
.8bb6					VectorSet2:
>8bb6	a0 9f					.word	SyntaxError                      ; $80 !0:EOF
>8bb8	a0 9f					.word	SyntaxError                      ; $81 !1:SH1
>8bba	a0 9f					.word	SyntaxError                      ; $82 !2:SH2
>8bbc	5f 9e					.word	Assemble_adc                     ; $83 ADC
>8bbe	57 9e					.word	Assemble_and                     ; $84 AND
>8bc0	73 9e					.word	Assemble_asl                     ; $85 ASL
>8bc2	dd 9e					.word	Assemble_bcc                     ; $86 BCC
>8bc4	e1 9e					.word	Assemble_bcs                     ; $87 BCS
>8bc6	e9 9e					.word	Assemble_beq                     ; $88 BEQ
>8bc8	a0 9e					.word	Assemble_bit                     ; $89 BIT
>8bca	d1 9e					.word	Assemble_bmi                     ; $8a BMI
>8bcc	e5 9e					.word	Assemble_bne                     ; $8b BNE
>8bce	cd 9e					.word	Assemble_bpl                     ; $8c BPL
>8bd0	ed 9e					.word	Assemble_bra                     ; $8d BRA
>8bd2	f1 9e					.word	Assemble_brk                     ; $8e BRK
>8bd4	d5 9e					.word	Assemble_bvc                     ; $8f BVC
>8bd6	d9 9e					.word	Assemble_bvs                     ; $90 BVS
>8bd8	f9 9e					.word	Assemble_clc                     ; $91 CLC
>8bda	4d 9f					.word	Assemble_cld                     ; $92 CLD
>8bdc	0d 9f					.word	Assemble_cli                     ; $93 CLI
>8bde	3d 9f					.word	Assemble_clv                     ; $94 CLV
>8be0	6b 9e					.word	Assemble_cmp                     ; $95 CMP
>8be2	b4 9e					.word	Assemble_cpx                     ; $96 CPX
>8be4	af 9e					.word	Assemble_cpy                     ; $97 CPY
>8be6	91 9e					.word	Assemble_dec                     ; $98 DEC
>8be8	49 9f					.word	Assemble_dex                     ; $99 DEX
>8bea	25 9f					.word	Assemble_dey                     ; $9a DEY
>8bec	5b 9e					.word	Assemble_eor                     ; $9b EOR
>8bee	96 9e					.word	Assemble_inc                     ; $9c INC
>8bf0	59 9f					.word	Assemble_inx                     ; $9d INX
>8bf2	45 9f					.word	Assemble_iny                     ; $9e INY
>8bf4	c8 9e					.word	Assemble_jmp                     ; $9f JMP
>8bf6	c3 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bf8	67 9e					.word	Assemble_lda                     ; $a1 LDA
>8bfa	8c 9e					.word	Assemble_ldx                     ; $a2 LDX
>8bfc	aa 9e					.word	Assemble_ldy                     ; $a3 LDY
>8bfe	7d 9e					.word	Assemble_lsr                     ; $a4 LSR
>8c00	5d 9f					.word	Assemble_nop                     ; $a5 NOP
>8c02	53 9e					.word	Assemble_ora                     ; $a6 ORA
>8c04	09 9f					.word	Assemble_pha                     ; $a7 PHA
>8c06	f5 9e					.word	Assemble_php                     ; $a8 PHP
>8c08	51 9f					.word	Assemble_phx                     ; $a9 PHX
>8c0a	11 9f					.word	Assemble_phy                     ; $aa PHY
>8c0c	19 9f					.word	Assemble_pla                     ; $ab PLA
>8c0e	fd 9e					.word	Assemble_plp                     ; $ac PLP
>8c10	65 9f					.word	Assemble_plx                     ; $ad PLX
>8c12	21 9f					.word	Assemble_ply                     ; $ae PLY
>8c14	78 9e					.word	Assemble_rol                     ; $af ROL
>8c16	82 9e					.word	Assemble_ror                     ; $b0 ROR
>8c18	05 9f					.word	Assemble_rti                     ; $b1 RTI
>8c1a	15 9f					.word	Assemble_rts                     ; $b2 RTS
>8c1c	6f 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c1e	01 9f					.word	Assemble_sec                     ; $b4 SEC
>8c20	61 9f					.word	Assemble_sed                     ; $b5 SED
>8c22	1d 9f					.word	Assemble_sei                     ; $b6 SEI
>8c24	63 9e					.word	Assemble_sta                     ; $b7 STA
>8c26	55 9f					.word	Assemble_stp                     ; $b8 STP
>8c28	87 9e					.word	Assemble_stx                     ; $b9 STX
>8c2a	a5 9e					.word	Assemble_sty                     ; $ba STY
>8c2c	9b 9e					.word	Assemble_stz                     ; $bb STZ
>8c2e	39 9f					.word	Assemble_tax                     ; $bc TAX
>8c30	35 9f					.word	Assemble_tay                     ; $bd TAY
>8c32	be 9e					.word	Assemble_trb                     ; $be TRB
>8c34	b9 9e					.word	Assemble_tsb                     ; $bf TSB
>8c36	41 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c38	29 9f					.word	Assemble_txa                     ; $c1 TXA
>8c3a	31 9f					.word	Assemble_txs                     ; $c2 TXS
>8c3c	2d 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c3e					StopCommand:
.8c3e	a9 08		lda #$08		lda	#8
.8c40	4c 53 8d	jmp $8d53		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c43					ProcedureScan:
.8c43	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c45	85 30		sta $30				sta 	codePtr
.8c47	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c49	85 31		sta $31				sta 	codePtr+1
.8c4b					_PSLoop:
.8c4b	b2 30		lda ($30)			lda 	(codePtr)
.8c4d	f0 42		beq $8c91			beq 	_PSExit
.8c4f	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c51	b1 30		lda ($30),y			lda 	(codePtr),y
.8c53	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c55	d0 2d		bne $8c84			bne 	_PSNext
.8c57	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c58	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5a	29 c0		and #$c0			and 	#$C0
.8c5c	c9 40		cmp #$40			cmp 	#$40
.8c5e	d0 32		bne $8c92			bne 	_PSSyntax
.8c60	b1 30		lda ($30),y			lda 	(codePtr),y
.8c62	18		clc				clc
.8c63	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c65	85 37		sta $37				sta 	zTemp0+1
.8c67	c8		iny				iny 								; LSB
.8c68	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6a	85 36		sta $36				sta 	zTemp0
.8c6c	c8		iny				iny 								; character after variable call.
.8c6d	98		tya				tya 								; save Y offset at +7
.8c6e	a0 07		ldy #$07			ldy 	#7
.8c70	91 36		sta ($36),y			sta 	(zTemp0),y
.8c72	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c74	a0 02		ldy #$02			ldy 	#2
.8c76	91 36		sta ($36),y			sta 	(zTemp0),y
.8c78	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c7a					_PSCopy:
.8c7a	b5 30		lda $30,x			lda 	safePtr,x
.8c7c	c8		iny				iny
.8c7d	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7f	e8		inx				inx
.8c80	e0 04		cpx #$04			cpx 	#4
.8c82	d0 f6		bne $8c7a			bne 	_PSCopy
.8c84					_PSNext:
.8c84	18		clc				clc
.8c85	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c87	65 30		adc $30				adc 	codePtr
.8c89	85 30		sta $30				sta 	codePtr
.8c8b	90 02		bcc $8c8f			bcc 	_CREExit
.8c8d	e6 31		inc $31				inc 	codePtr+1
.8c8f					_CREExit:
.8c8f	80 ba		bra $8c4b			bra 	_PSLoop
.8c91					_PSExit:
.8c91	60		rts				rts
.8c92					_PSSyntax:
.8c92	4c a0 9f	jmp $9fa0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c95					ScanForward:
.8c95	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c97	86 37		stx $37				stx 	zTemp0+1
.8c99	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c9b					_ScanLoop:
.8c9b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c9d	c8		iny				iny
.8c9e	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8ca0	d0 0e		bne $8cb0			bne 	_ScanGoNext
.8ca2	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ca4	f0 04		beq $8caa			beq 	_ScanMatch
.8ca6	c5 37		cmp $37				cmp 	zTemp0+1
.8ca8	d0 06		bne $8cb0			bne 	_ScanGoNext
.8caa					_ScanMatch:
.8caa	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8cac	d0 01		bne $8caf			bne 	_ScanNotEndEOL
.8cae	88		dey				dey
.8caf					_ScanNotEndEOL:
.8caf	60		rts				rts
.8cb0					_ScanGoNext:
.8cb0	20 b5 8c	jsr $8cb5			jsr  	ScanForwardOne
.8cb3	80 e6		bra $8c9b			bra 	_ScanLoop
.8cb5					ScanForwardOne:
.8cb5	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8cb7	90 3e		bcc $8cf7			bcc 	_SFWExit
.8cb9	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8cbb	90 18		bcc $8cd5			bcc 	_ScanSkipOne
.8cbd	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8cbf	b0 2f		bcs $8cf0			bcs 	_ScanSkipData
.8cc1	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cc3	90 32		bcc $8cf7			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cc5	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8cc7	b0 2e		bcs $8cf7			bcs 	_SFWExit
.8cc9	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ccb	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ccd	b0 28		bcs $8cf7			bcs 	_SFWExit
.8ccf	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cd1	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cd3	80 22		bra $8cf7			bra 	_SFWExit
.8cd5					_ScanSkipOne:
.8cd5	c8		iny				iny 								; consume the extra one.
.8cd6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cd8	d0 1d		bne $8cf7			bne 	_SFWExit
.8cda	18		clc				clc
.8cdb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cdd	65 30		adc $30				adc 	codePtr
.8cdf	85 30		sta $30				sta 	codePtr
.8ce1	90 02		bcc $8ce5			bcc 	_CREExit
.8ce3	e6 31		inc $31				inc 	codePtr+1
.8ce5					_CREExit:
.8ce5	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ce7	b2 30		lda ($30)			lda 	(codePtr)
.8ce9	d0 0c		bne $8cf7			bne 	_SFWExit 					; if not zero, more to scan
.8ceb	a9 13		lda #$13		lda	#19
.8ced	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.8cf0					_ScanSkipData:
.8cf0	88		dey				dey 								; point at data token
.8cf1	c8		iny				iny
.8cf2	98		tya				tya
.8cf3	38		sec				sec
.8cf4	71 30		adc ($30),y			adc 	(codePtr),y
.8cf6	a8		tay				tay
.8cf7					_SFWExit:
.8cf7	60		rts				rts
.8cf8					ScanGetCurrentLineStep:
.8cf8	64 38		stz $38				stz 	zTemp1
.8cfa	a0 03		ldy #$03			ldy 	#3
.8cfc					_SGCLSLoop:
.8cfc	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfe	c8		iny				iny
.8cff	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8d01	f0 05		beq $8d08			beq 	_SGCLSExit
.8d03	20 b5 8c	jsr $8cb5			jsr 	ScanForwardOne
.8d06	80 f4		bra $8cfc			bra 	_SGCLSLoop
.8d08					_SGCLSExit:
.8d08	a5 38		lda $38				lda 	zTemp1
.8d0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d0b					Command_WHILE:
.8d0b	5a		phy				phy 								; save position of the test
.8d0c	a2 00		ldx #$00			ldx 	#0
.8d0e	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber 				; work out the number
.8d11	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; check if zero
.8d14	f0 0e		beq $8d24			beq 	_WHExitLoop 				; if so exit the loop
.8d16	98		tya				tya 								; position *after* test.
.8d17	7a		ply				ply 								; restore position before test, at WHILE
.8d18	88		dey				dey
.8d19	48		pha				pha 								; push after test on the stack
.8d1a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d1c	20 04 a6	jsr $a604			jsr 	StackOpen
.8d1f	20 48 a6	jsr $a648			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d22	7a		ply				ply 								; restore the position *after* the test
.8d23	60		rts				rts
.8d24					_WHExitLoop:
.8d24	68		pla				pla 								; throw post loop position
.8d25	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d27	aa		tax				tax
.8d28	20 95 8c	jsr $8c95			jsr 	ScanForward
.8d2b	60		rts				rts
.8d2c					Command_WEND:
.8d2c	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d2e	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d30	20 30 a6	jsr $a630			jsr 	StackCheckFrame
.8d33	20 59 a6	jsr $a659			jsr 	STKLoadCodePosition 		; loop back
.8d36	20 22 a6	jsr $a622			jsr 	StackClose		 			; erase the frame
.8d39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d3a					CheckRightBracket:
.8d3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3c	c8		iny				iny
.8d3d	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d3f	d0 0f		bne $8d50			bne 	CNAFail
.8d41	60		rts				rts
.8d42					CheckComma:
.8d42	b1 30		lda ($30),y			lda 	(codePtr),y
.8d44	c8		iny				iny
.8d45	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d47	d0 07		bne $8d50			bne 	CNAFail
.8d49	60		rts				rts
.8d4a					CheckNextA:
.8d4a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d4c	d0 02		bne $8d50			bne 	CNAFail
.8d4e	c8		iny				iny 								; skip character
.8d4f	60		rts				rts 								; and exit
.8d50					CNAFail:
.8d50	4c a0 9f	jmp $9fa0			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d53					ErrorHandler:
.8d53	a8		tay				tay 								; find the error text
.8d54	f0 49		beq $8d9f			beq 	_EHEnd
.8d56	a2 00		ldx #$00			ldx 	#0
.8d58	a9 b9		lda #$b9			lda 	#((ErrorText) & $FF)
.8d5a	85 36		sta $36				sta 	0+zTemp0
.8d5c	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d5e	85 37		sta $37				sta 	1+zTemp0
.8d60					_EHFind:
.8d60	88		dey				dey 								; found the error text ?
.8d61	f0 0e		beq $8d71			beq 	_EHFound
.8d63					_EHFindZero:
.8d63	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d65	e6 36		inc $36				inc 	zTemp0
.8d67	d0 02		bne $8d6b			bne 	_EHFNoCarry
.8d69	e6 37		inc $37				inc 	zTemp0+1
.8d6b					_EHFNoCarry:
.8d6b	c9 00		cmp #$00			cmp 	#0
.8d6d	d0 f4		bne $8d63			bne 	_EHFindZero
.8d6f	80 ef		bra $8d60			bra 	_EHFind
.8d71					_EHFound:
.8d71	a5 36		lda $36				lda 	zTemp0 						; print message
.8d73	a6 37		ldx $37				ldx 	zTemp0+1
.8d75	20 ac 8d	jsr $8dac			jsr 	PrintStringXA
.8d78	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7c	d0 05		bne $8d83			bne 	_EHAtMsg
.8d7e	c8		iny				iny
.8d7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8d81	f0 17		beq $8d9a			beq 	_EHCREnd
.8d83					_EHAtMsg:
.8d83	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d85	a9 a2		lda #$a2			lda 	#_AtMsg & $FF
.8d87	20 ac 8d	jsr $8dac			jsr 	PrintStringXA
.8d8a	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d8c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8e	48		pha				pha
.8d8f	c8		iny				iny
.8d90	b1 30		lda ($30),y			lda 	(codePtr),y
.8d92	aa		tax				tax
.8d93	68		pla				pla
.8d94	20 65 92	jsr $9265			jsr 	LCLConvertInt16 				; convert XA to string
.8d97	20 ac 8d	jsr $8dac			jsr 	PrintStringXA 				; and print it.
.8d9a					_EHCREnd:
.8d9a	a9 0d		lda #$0d			lda 	#13 						; new line
.8d9c	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8d9f					_EHEnd:
.8d9f	4c 59 83	jmp $8359			jmp 	WarmStart
>8da2	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8daa	20 00
.8dac					PrintStringXA:
.8dac	5a		phy				phy
.8dad	86 37		stx $37				stx 	zTemp0+1
.8daf	85 36		sta $36				sta 	zTemp0
.8db1	a0 00		ldy #$00			ldy 	#0
.8db3					_PSXALoop:
.8db3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db5	f0 06		beq $8dbd			beq 	_PSXAExit
.8db7	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.8dba	c8		iny				iny
.8dbb	80 f6		bra $8db3			bra 	_PSXALoop
.8dbd					_PSXAExit:
.8dbd	7a		ply				ply
.8dbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8dbf					UnaryTrue:
.8dbf	fa		plx				plx
.8dc0					ReturnTrue:
.8dc0	a9 01		lda #$01			lda 	#1  						; set to 1
.8dc2	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.8dc5	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dc7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dca	60		rts				rts
.8dcb					UnaryFalse:
.8dcb	fa		plx				plx
.8dcc					ReturnFalse:
.8dcc	4c 16 9e	jmp $9e16			jmp 	NSMSetZero 					; set it all to zero
.8dcf					BinaryCompareEqual:
.8dcf	fa		plx				plx
.8dd0	20 0b 8e	jsr $8e0b			jsr 	CompareBaseCode
.8dd3	c9 00		cmp #$00			cmp 	#0
.8dd5	f0 e9		beq $8dc0			beq 	ReturnTrue
.8dd7	80 f3		bra $8dcc			bra 	ReturnFalse
.8dd9					BinaryCompareLess:
.8dd9	fa		plx				plx
.8dda	20 0b 8e	jsr $8e0b			jsr 	CompareBaseCode
.8ddd	c9 ff		cmp #$ff			cmp 	#$FF
.8ddf	f0 df		beq $8dc0			beq 	ReturnTrue
.8de1	80 e9		bra $8dcc			bra 	ReturnFalse
.8de3					BinaryCompareGreater:
.8de3	fa		plx				plx
.8de4	20 0b 8e	jsr $8e0b			jsr 	CompareBaseCode
.8de7	c9 01		cmp #$01			cmp 	#1
.8de9	f0 d5		beq $8dc0			beq 	ReturnTrue
.8deb	80 df		bra $8dcc			bra 	ReturnFalse
.8ded					BinaryCompareNotEqual:
.8ded	fa		plx				plx
.8dee	20 0b 8e	jsr $8e0b			jsr 	CompareBaseCode
.8df1	c9 00		cmp #$00			cmp 	#0
.8df3	d0 cb		bne $8dc0			bne 	ReturnTrue
.8df5	80 d5		bra $8dcc			bra 	ReturnFalse
.8df7					BinaryCompareLessEqual:
.8df7	fa		plx				plx
.8df8	20 0b 8e	jsr $8e0b			jsr 	CompareBaseCode
.8dfb	c9 01		cmp #$01			cmp 	#1
.8dfd	d0 c1		bne $8dc0			bne 	ReturnTrue
.8dff	80 cb		bra $8dcc			bra 	ReturnFalse
.8e01					BinaryCompareGreaterEqual:
.8e01	fa		plx				plx
.8e02	20 0b 8e	jsr $8e0b			jsr 	CompareBaseCode
.8e05	c9 ff		cmp #$ff			cmp 	#$FF
.8e07	d0 b7		bne $8dc0			bne 	ReturnTrue
.8e09	80 c1		bra $8dcc			bra 	ReturnFalse
.8e0b					CompareBaseCode:
.8e0b	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; make both values if references.
.8e0e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8e11	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e14	29 10		and #$10			and 	#NSTString
.8e16	d0 40		bne $8e58			bne 	_CBCString
.8e18	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e1b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e1e	d0 3b		bne $8e5b			bne 	_CBCFloat
.8e20	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e23	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e26	29 08		and #$08			and 	#NSTFloat
.8e28	d0 31		bne $8e5b			bne 	_CBCFloat
.8e2a	20 5e 8e	jsr $8e5e			jsr 	CompareFixMinusZero
.8e2d	e8		inx				inx
.8e2e	20 5e 8e	jsr $8e5e			jsr 	CompareFixMinusZero
.8e31	ca		dex				dex
.8e32	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e35	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e38	10 0b		bpl $8e45			bpl 	_CDCSameSign
.8e3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e3d	30 16		bmi $8e55			bmi 	_CBCLess 					; return $FF
.8e3f					_CBCGreater:
.8e3f	a9 01		lda #$01			lda 	#1
.8e41	60		rts				rts
.8e42					_CBCEqual:
.8e42	a9 00		lda #$00			lda 	#0
.8e44	60		rts				rts
.8e45					_CDCSameSign:
.8e45	20 b1 90	jsr $90b1			jsr 	SubTopTwoStack 				; unsigned subtract
.8e48	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; or the mantissa together
.8e4b	f0 f5		beq $8e42			beq 	_CBCEqual 					; -0 == 0
.8e4d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e50	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e53	10 ea		bpl $8e3f			bpl 	_CBCGreater
.8e55					_CBCLess:
.8e55	a9 ff		lda #$ff			lda 	#$FF
.8e57	60		rts				rts
.8e58					_CBCString:
.8e58	4c 07 90	jmp $9007			jmp 	CompareStrings
.8e5b					_CBCFloat:
.8e5b	4c e8 93	jmp $93e8			jmp 	CompareFloat
.8e5e					CompareFixMinusZero:
.8e5e	20 46 9e	jsr $9e46			jsr 	NSMIsZero
.8e61	d0 03		bne $8e66			bne 	_CFXMZNotZero
.8e63	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e66					_CFXMZNotZero:
.8e66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e67					StringConcat:
.8e67	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e6a	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e6d	29 18		and #$18			and 	#NSBTypeMask
.8e6f	c9 10		cmp #$10			cmp 	#NSTString
.8e71	d0 4e		bne $8ec1			bne		_SCType
.8e73	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e75	e8		inx				inx
.8e76	20 94 8e	jsr $8e94			jsr 	_SCSetupZ0 					; setup for second
.8e79	20 9f 8e	jsr $8e9f			jsr 	_SCLengthZ0 				; length for second
.8e7c	ca		dex				dex
.8e7d	20 94 8e	jsr $8e94			jsr 	_SCSetupZ0 					; setup for first
.8e80	20 9f 8e	jsr $8e9f			jsr 	_SCLengthZ0 				; length for first
.8e83	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e85	20 f7 a6	jsr $a6f7			jsr 	StringTempAllocate
.8e88	20 b2 8e	jsr $8eb2			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e8b	e8		inx				inx
.8e8c	20 94 8e	jsr $8e94			jsr 	_SCSetupZ0 					; copy second out
.8e8f	20 b2 8e	jsr $8eb2			jsr 	_SCCopy
.8e92	ca		dex				dex
.8e93	60		rts				rts
.8e94					_SCSetupZ0:
.8e94	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e97	85 36		sta $36				sta 	zTemp0
.8e99	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e9c	85 37		sta $37				sta 	zTemp0+1
.8e9e	60		rts				rts
.8e9f					_SCLengthZ0:
.8e9f	5a		phy				phy
.8ea0	a0 00		ldy #$00			ldy 	#0
.8ea2					_SCLenLoop:
.8ea2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea4	f0 0a		beq $8eb0			beq 	_SCLExit
.8ea6	c8		iny				iny
.8ea7	e6 38		inc $38				inc 	zTemp1
.8ea9	10 f7		bpl $8ea2			bpl		_SCLenLoop
.8eab	a9 09		lda #$09		lda	#9
.8ead	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.8eb0					_SCLExit:
.8eb0	7a		ply				ply
.8eb1	60		rts				rts
.8eb2					_SCCopy:
.8eb2	5a		phy				phy
.8eb3	a0 00		ldy #$00			ldy 	#0
.8eb5					_SCCopyLoop:
.8eb5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eb7	f0 06		beq $8ebf			beq 	_SCCExit
.8eb9	20 35 a7	jsr $a735			jsr 	StringTempWrite
.8ebc	c8		iny				iny
.8ebd	80 f6		bra $8eb5			bra 	_SCCopyLoop
.8ebf					_SCCExit:
.8ebf	7a		ply				ply
.8ec0	60		rts				rts
.8ec1					_SCType:
.8ec1	4c aa 9f	jmp $9faa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8ec4					IntegerDivide:
.8ec4	fa		plx				plx
.8ec5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ec8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ecb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ecc	0a		asl a				asl 	a
.8ecd	10 05		bpl $8ed4			bpl 	_NotRef
.8ecf	48		pha				pha
.8ed0	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ed3	68		pla				pla
.8ed4					_NotRef:
.8ed4	0a		asl a				asl 	a
.8ed5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ed7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8eda	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8edd	f0 03		beq $8ee2			beq 	_IntegerCode 				; if clear, then we have two integers
.8edf	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.8ee2					_IntegerCode:
.8ee2	20 04 8f	jsr $8f04			jsr 	CheckDivideZero 			; do div zero check
.8ee5	20 3c 8f	jsr $8f3c			jsr 	Int32Divide 				; do the division
.8ee8	20 f9 8f	jsr $8ff9			jsr 	CalculateSign 				; calculate result sign
.8eeb					NSMCopyPlusTwoToZero:
.8eeb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8eee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ef1	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ef4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ef7	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8efa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8efd	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8f00	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8f03	60		rts				rts
.8f04					CheckDivideZero:
.8f04	e8		inx				inx
.8f05	20 46 9e	jsr $9e46			jsr 	NSMIsZero
.8f08	f0 02		beq $8f0c			beq 	_CDVError
.8f0a	ca		dex				dex
.8f0b	60		rts				rts
.8f0c					_CDVError:
.8f0c	a9 03		lda #$03		lda	#3
.8f0e	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.8f11					IntegerModulus:
.8f11	fa		plx				plx
.8f12	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f15	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f18	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f19	0a		asl a				asl 	a
.8f1a	10 05		bpl $8f21			bpl 	_NotRef
.8f1c	48		pha				pha
.8f1d	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f20	68		pla				pla
.8f21					_NotRef:
.8f21	0a		asl a				asl 	a
.8f22	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f24	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f27	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f2a	f0 03		beq $8f2f			beq 	_IntegerCode 				; if clear, then we have two integers
.8f2c	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.8f2f					_IntegerCode:
.8f2f					IntegerModulusNoCheck:
.8f2f	20 04 8f	jsr $8f04			jsr 	CheckDivideZero 			; do div zero check
.8f32	20 3c 8f	jsr $8f3c			jsr 	Int32Divide 				; do the division
.8f35	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f38	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f3b	60		rts				rts
.8f3c					Int32Divide:
.8f3c	48		pha				pha 								; save AXY
.8f3d	5a		phy				phy
.8f3e	20 ed 9d	jsr $9ded			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f41	20 12 9e	jsr $9e12			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f44	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f46					_I32DivideLoop:
.8f46	e8		inx				inx
.8f47	e8		inx				inx
.8f48	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f4b	ca		dex				dex
.8f4c	ca		dex				dex
.8f4d	20 2c 9e	jsr $9e2c			jsr 	NSMRotateLeft
.8f50	20 7c 8f	jsr $8f7c			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f53	90 03		bcc $8f58			bcc 	_I32DivideNoCarryIn
.8f55	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f58					_I32DivideNoCarryIn:
.8f58	88		dey				dey 								; loop round till division completed.
.8f59	d0 eb		bne $8f46			bne 	_I32DivideLoop
.8f5b	7a		ply				ply 								; restore AXY and exit
.8f5c	68		pla				pla
.8f5d	60		rts				rts
.8f5e					Int32ShiftDivide:
.8f5e	48		pha				pha 								; save AY
.8f5f	5a		phy				phy
.8f60	e8		inx				inx 								; clear S[X+2]
.8f61	e8		inx				inx
.8f62	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.8f65	ca		dex				dex
.8f66	ca		dex				dex
.8f67	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f69					_I32SDLoop:
.8f69	20 7c 8f	jsr $8f7c			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f6c	e8		inx				inx
.8f6d	e8		inx				inx
.8f6e	20 2c 9e	jsr $9e2c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f71	ca		dex				dex
.8f72	ca		dex				dex
.8f73	20 2c 9e	jsr $9e2c			jsr 	NSMRotateLeft
.8f76	88		dey				dey 	 							; do 31 times
.8f77	d0 f0		bne $8f69			bne 	_I32SDLoop
.8f79	7a		ply				ply 								; restore AY and exit
.8f7a	68		pla				pla
.8f7b	60		rts				rts
.8f7c					DivideCheckSubtract:
.8f7c	20 b1 90	jsr $90b1			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f7f	b0 04		bcs $8f85			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f81	20 8b 90	jsr $908b			jsr 	AddTopTwoStack 				; add it back in
.8f84	18		clc				clc 								; and return False
.8f85					_DCSExit:
.8f85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f86					MulInteger:
.8f86	fa		plx				plx
.8f87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f8a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f8d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f8e	0a		asl a				asl 	a
.8f8f	10 05		bpl $8f96			bpl 	_NotRef
.8f91	48		pha				pha
.8f92	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f95	68		pla				pla
.8f96					_NotRef:
.8f96	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f97	30 0b		bmi $8fa4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f99	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f9c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f9f	f0 06		beq $8fa7			beq 	_IntegerCode 				; if clear, then we have two integers
.8fa1	4c bf 94	jmp $94bf			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8fa4					_StringData:
.8fa4	4c b4 9f	jmp $9fb4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8fa7					_IntegerCode:
.8fa7	20 b4 8f	jsr $8fb4			jsr 	MultiplyShort
.8faa	c9 00		cmp #$00			cmp 	#0
.8fac	f0 05		beq $8fb3			beq 	_MIExit
.8fae	a9 04		lda #$04		lda	#4
.8fb0	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.8fb3					_MIExit:
.8fb3	60		rts				rts
.8fb4					MultiplyShort:
.8fb4	5a		phy				phy 								; save Y
.8fb5	20 ed 9d	jsr $9ded			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fb8	20 12 9e	jsr $9e12			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fbb	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fbd					_I32MLoop:
.8fbd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fc0	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fc3	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fc6	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fc9	f0 28		beq $8ff3			beq 	_I32MExit 					; exit if zero
.8fcb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fce	29 01		and #$01			and 	#1
.8fd0	f0 0e		beq $8fe0			beq 	_I32MNoAdd
.8fd2	20 8b 90	jsr $908b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fd5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fd8	10 06		bpl $8fe0			bpl 	_I32MNoAdd
.8fda					_I32ShiftRight:
.8fda	20 39 9e	jsr $9e39			jsr 	NSMShiftRight 				; shift S[X] right
.8fdd	c8		iny				iny 								; increment shift count
.8fde	80 0a		bra $8fea			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fe0					_I32MNoAdd:
.8fe0	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fe3	70 f5		bvs $8fda			bvs 	_I32ShiftRight 				; instead.
.8fe5	e8		inx				inx
.8fe6	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fe9	ca		dex				dex
.8fea					_I32MShiftUpper:
.8fea	e8		inx				inx 								; shift S[X+2] right
.8feb	e8		inx				inx
.8fec	20 39 9e	jsr $9e39			jsr 	NSMShiftRight
.8fef	ca		dex				dex
.8ff0	ca		dex				dex
.8ff1	80 ca		bra $8fbd			bra 	_I32MLoop 					; try again.
.8ff3					_I32MExit:
.8ff3	20 f9 8f	jsr $8ff9			jsr 	CalculateSign
.8ff6	98		tya				tya 								; shift in A
.8ff7	7a		ply				ply 								; restore Y and exit
.8ff8	60		rts				rts
.8ff9					CalculateSign:
.8ff9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8ffc	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fff	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9002	0a		asl a				asl 	a 							; shift bit 7 into carry
.9003	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.9006	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9007					CompareStrings:
.9007	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.900a	3d 01 04	and $0401,x			and 	NSStatus+1,x
.900d	29 10		and #$10			and 	#NSBIsString
.900f	f0 2c		beq $903d			beq 	_CSTypeError
.9011	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9014	85 36		sta $36				sta 	zTemp0
.9016	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9019	85 37		sta $37				sta 	zTemp0+1
.901b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.901e	85 38		sta $38				sta 	zTemp1
.9020	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9023	85 39		sta $39				sta 	zTemp1+1
.9025	5a		phy				phy 								; save Y so we can access strings
.9026	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9028					_CSLoop:
.9028	c8		iny				iny
.9029	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.902b	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.902d	d0 06		bne $9035			bne 	_CSDifferent
.902f	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9031	d0 f5		bne $9028			bne 	_CSLoop 					; still comparing
.9033					_CSExit:
.9033	7a		ply				ply 								; reached end, return zero in A from EOS
.9034	60		rts				rts
.9035					_CSDifferent:
.9035	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9037	90 fa		bcc $9033			bcc		_CSExit
.9039	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.903b	80 f6		bra $9033			bra 	_CSExit
.903d					_CSTypeError:
.903d	4c aa 9f	jmp $9faa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9040					ShiftLeft:
.9040	38		sec				sec
.9041	80 01		bra $9044			bra 	ShiftMain
.9043					ShiftRight:
.9043	18		clc				clc
.9044					ShiftMain:
.9044	fa		plx				plx 								; restore X
.9045	08		php				php 								; save direction
.9046	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9049	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.904c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.904d	0a		asl a				asl 	a
.904e	10 05		bpl $9055			bpl 	_NotRef
.9050	48		pha				pha
.9051	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9054	68		pla				pla
.9055					_NotRef:
.9055	0a		asl a				asl 	a
.9056	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9058	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.905b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.905e	f0 03		beq $9063			beq 	_IntegerCode 				; if clear, then we have two integers
.9060	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.9063					_IntegerCode:
.9063	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9066	29 e0		and #$e0			and 	#$E0
.9068	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.906b	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.906e	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9071	d0 13		bne $9086			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9073					_SMLoop:
.9073	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9076	30 11		bmi $9089			bmi 	_SMExit 					; exit if done.
.9078	28		plp				plp 								; restore direcition setting
.9079	08		php				php
.907a	90 05		bcc $9081			bcc 	_SMRight
.907c	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; shift left if CS
.907f	80 f2		bra $9073			bra 	_SMLoop
.9081					_SMRight:
.9081	20 39 9e	jsr $9e39			jsr 	NSMShiftRight 				; shift right if CC
.9084	80 ed		bra $9073			bra 	_SMLoop
.9086					_SMExit0:
.9086	20 16 9e	jsr $9e16			jsr 	NSMSetZero 					; return zero.
.9089					_SMExit:
.9089	28		plp				plp 								; throw direction
.908a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.908b					AddTopTwoStack:
.908b	18		clc				clc
.908c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.908f	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9092	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9095	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9098	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.909b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.909e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90a1	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.90a4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90a7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90aa	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.90ad	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90b0	60		rts				rts
.90b1					SubTopTwoStack:
.90b1	38		sec				sec
.90b2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90b5	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90b8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90bb	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90be	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90c1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90c4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90c7	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90ca	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90cd	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90d0	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90d3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90d6	60		rts				rts
.90d7					AddInteger:
.90d7	fa		plx				plx
.90d8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90db	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90de	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90df	0a		asl a				asl 	a
.90e0	10 05		bpl $90e7			bpl 	_NotRef
.90e2	48		pha				pha
.90e3	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90e6	68		pla				pla
.90e7					_NotRef:
.90e7	0a		asl a				asl 	a 							; put MSB of type into A:7
.90e8	30 0b		bmi $90f5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90ea	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ed	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90f0	f0 06		beq $90f8			beq 	_IntegerCode 				; if clear, then we have two integers
.90f2	4c 3f 93	jmp $933f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90f5					_StringData:
.90f5	4c 67 8e	jmp $8e67			jmp 	StringConcat							; at least one string - don't know both are strings.
.90f8					_IntegerCode:
.90f8					AddCode:
.90f8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90fb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90fe	10 8b		bpl $908b			bpl 	AddTopTwoStack
.9100	20 b1 90	jsr $90b1			jsr 	SubTopTwoStack 				; do a physical subtraction
.9103	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9106	10 09		bpl $9111			bpl 	_AddExit
.9108	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.910b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.910e	20 cb 9d	jsr $9dcb			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9111					_AddExit:
.9111	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; check for -0
.9114	d0 03		bne $9119			bne 	_AddNonZero
.9116	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9119					_AddNonZero:
.9119	60		rts				rts
.911a					SubInteger:
.911a	fa		plx				plx
.911b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.911e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9121	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9122	0a		asl a				asl 	a
.9123	10 05		bpl $912a			bpl 	_NotRef
.9125	48		pha				pha
.9126	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9129	68		pla				pla
.912a					_NotRef:
.912a	0a		asl a				asl 	a 							; put MSB of type into A:7
.912b	30 0b		bmi $9138			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.912d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9130	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9133	f0 06		beq $913b			beq 	_IntegerCode 				; if clear, then we have two integers
.9135	4c 44 93	jmp $9344			jmp 	FloatingPointSub 							; otherwise at least one float.
.9138					_StringData:
.9138	4c b4 9f	jmp $9fb4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.913b					_IntegerCode:
.913b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.913e	49 80		eor #$80			eor 	#$80
.9140	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9143	80 b3		bra $90f8			bra 	AddCode 					; and do the same code as add.
.9145					AndInteger:
.9145	fa		plx				plx
.9146	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9149	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.914c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.914d	0a		asl a				asl 	a
.914e	10 05		bpl $9155			bpl 	_NotRef
.9150	48		pha				pha
.9151	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9154	68		pla				pla
.9155					_NotRef:
.9155	0a		asl a				asl 	a
.9156	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9158	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.915b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.915e	f0 03		beq $9163			beq 	_IntegerCode 				; if clear, then we have two integers
.9160	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.9163					_IntegerCode:
.9163	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9166	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9169	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.916c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.916f	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9172	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9175	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9178	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.917b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.917e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9181	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9184	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9187	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.918a	60		rts				rts
.918b					OraInteger:
.918b	fa		plx				plx
.918c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.918f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9192	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9193	0a		asl a				asl 	a
.9194	10 05		bpl $919b			bpl 	_NotRef
.9196	48		pha				pha
.9197	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.919a	68		pla				pla
.919b					_NotRef:
.919b	0a		asl a				asl 	a
.919c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.919e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91a1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91a4	f0 03		beq $91a9			beq 	_IntegerCode 				; if clear, then we have two integers
.91a6	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.91a9					_IntegerCode:
.91a9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91ac	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.91af	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91b2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91b5	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91b8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91bb	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91be	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91c1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91c4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91c7	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91ca	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91cd	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91d0	60		rts				rts
.91d1					EorInteger:
.91d1	fa		plx				plx
.91d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91d5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91d9	0a		asl a				asl 	a
.91da	10 05		bpl $91e1			bpl 	_NotRef
.91dc	48		pha				pha
.91dd	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91e0	68		pla				pla
.91e1					_NotRef:
.91e1	0a		asl a				asl 	a
.91e2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91e4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91e7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91ea	f0 03		beq $91ef			beq 	_IntegerCode 				; if clear, then we have two integers
.91ec	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.91ef					_IntegerCode:
.91ef	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91f2	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91f5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91f8	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91fb	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91fe	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9201	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9204	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9207	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.920a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.920d	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9210	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9213	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9216	60		rts				rts
.9217					WordIndirect:
.9217	fa		plx				plx
.9218	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.921b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.921e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.921f	0a		asl a				asl 	a
.9220	10 05		bpl $9227			bpl 	_NotRef
.9222	48		pha				pha
.9223	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9226	68		pla				pla
.9227					_NotRef:
.9227	0a		asl a				asl 	a
.9228	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.922a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.922d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9230	f0 03		beq $9235			beq 	_IntegerCode 				; if clear, then we have two integers
.9232	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.9235					_IntegerCode:
.9235	20 f8 90	jsr $90f8			jsr 	AddCode 					; add the two values
.9238	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.923a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.923d	60		rts				rts
.923e					ByteIndirect:
.923e	fa		plx				plx
.923f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9242	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9245	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9246	0a		asl a				asl 	a
.9247	10 05		bpl $924e			bpl 	_NotRef
.9249	48		pha				pha
.924a	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.924d	68		pla				pla
.924e					_NotRef:
.924e	0a		asl a				asl 	a
.924f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9251	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9254	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9257	f0 03		beq $925c			beq 	_IntegerCode 				; if clear, then we have two integers
.9259	4c aa 9f	jmp $9faa			jmp 	TypeError 					; anything else, type mismatch.
.925c					_IntegerCode:
.925c	20 f8 90	jsr $90f8			jsr 	AddCode 					; add the two values
.925f	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9261	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9264	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9265					LCLConvertInt16:
.9265	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.9268	8e 10 04	stx $0410			stx 	NSMantissa1
.926b	9c 18 04	stz $0418			stz 	NSMantissa2
.926e	9c 20 04	stz $0420			stz 	NSMantissa3
.9271	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9274	a2 00		ldx #$00			ldx 	#0 							; stack level
.9276	a9 0a		lda #$0a			lda 	#10 						; base
.9278	80 00		bra $927a			bra 	ConvertInt32
.927a					ConvertInt32:
.927a	5a		phy				phy
.927b	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.927d	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9280	10 08		bpl $928a			bpl 	_CI32NotNeg
.9282	48		pha				pha
.9283	a9 2d		lda #$2d			lda 	#'-'
.9285	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9288	c8		iny				iny
.9289	68		pla				pla
.928a					_CI32NotNeg:
.928a	20 98 92	jsr $9298			jsr 	_CI32DivideConvert 			; recursive conversion
.928d	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.928f	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9292	7a		ply				ply
.9293	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9295	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.9297	60		rts				rts
.9298					_CI32DivideConvert:
.9298	e8		inx				inx 								; write to next slot up
.9299	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.929c	ca		dex				dex
.929d	20 3c 8f	jsr $8f3c			jsr 	Int32Divide 				; divide
.92a0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.92a3	48		pha				pha
.92a4	20 eb 8e	jsr $8eeb			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92a7	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; is it zero ?
.92aa	f0 06		beq $92b2			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92ac	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92af	20 98 92	jsr $9298			jsr 	_CI32DivideConvert 			; and recusrively call.
.92b2					_CI32NoRecurse:
.92b2	68		pla				pla 								; remainder
.92b3	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92b5	90 02		bcc $92b9			bcc 	_CI32NotHex
.92b7	69 26		adc #$26			adc 	#6+32
.92b9					_CI32NotHex:
.92b9	69 30		adc #$30			adc 	#48
.92bb	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92be	c8		iny				iny
.92bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92c0					PrecedenceLevel:
>92c0	04					.byte	 4	; $00 <<
>92c1	02					.byte	 2	; $01 <=
>92c2	02					.byte	 2	; $02 <>
>92c3	00					.byte	 0	; $03 !!3
>92c4	00					.byte	 0	; $04 ><
>92c5	02					.byte	 2	; $05 >=
>92c6	04					.byte	 4	; $06 >>
>92c7	00					.byte	 0	; $07 !!7
>92c8	00					.byte	 0	; $08 !!8
>92c9	00					.byte	 0	; $09 !!9
>92ca	00					.byte	 0	; $0a !!10
>92cb	00					.byte	 0	; $0b !!11
>92cc	00					.byte	 0	; $0c !!12
>92cd	00					.byte	 0	; $0d !!13
>92ce	00					.byte	 0	; $0e !!14
>92cf	00					.byte	 0	; $0f !!15
>92d0	00					.byte	 0	; $10 @
>92d1	00					.byte	 0	; $11 !!17
>92d2	00					.byte	 0	; $12 !!18
>92d3	00					.byte	 0	; $13 [
>92d4	04					.byte	 4	; $14 \
>92d5	00					.byte	 0	; $15 ]
>92d6	01					.byte	 1	; $16 ^
>92d7	00					.byte	 0	; $17 _
>92d8	00					.byte	 0	; $18 `
>92d9	00					.byte	 0	; $19 !!25
>92da	00					.byte	 0	; $1a !!26
>92db	00					.byte	 0	; $1b {
>92dc	01					.byte	 1	; $1c |
>92dd	00					.byte	 0	; $1d }
>92de	00					.byte	 0	; $1e ~
>92df	00					.byte	 0	; $1f [7m<7F>[m
>92e0	00					.byte	 0	; $20
>92e1	05					.byte	 5	; $21 !
>92e2	00					.byte	 0	; $22 "
>92e3	00					.byte	 0	; $23 #
>92e4	05					.byte	 5	; $24 $
>92e5	04					.byte	 4	; $25 %
>92e6	01					.byte	 1	; $26 &
>92e7	00					.byte	 0	; $27 '
>92e8	00					.byte	 0	; $28 (
>92e9	00					.byte	 0	; $29 )
>92ea	04					.byte	 4	; $2a *
>92eb	03					.byte	 3	; $2b +
>92ec	00					.byte	 0	; $2c ,
>92ed	03					.byte	 3	; $2d -
>92ee	00					.byte	 0	; $2e .
>92ef	04					.byte	 4	; $2f /
>92f0	00					.byte	 0	; $30 0
>92f1	00					.byte	 0	; $31 1
>92f2	00					.byte	 0	; $32 2
>92f3	00					.byte	 0	; $33 3
>92f4	00					.byte	 0	; $34 4
>92f5	00					.byte	 0	; $35 5
>92f6	00					.byte	 0	; $36 6
>92f7	00					.byte	 0	; $37 7
>92f8	00					.byte	 0	; $38 8
>92f9	00					.byte	 0	; $39 9
>92fa	00					.byte	 0	; $3a :
>92fb	00					.byte	 0	; $3b ;
>92fc	02					.byte	 2	; $3c <
>92fd	02					.byte	 2	; $3d =
>92fe	02					.byte	 2	; $3e >
>92ff	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9300					EvaluateExpressionAt0:
.9300	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9302					EvaluateExpression:
.9302	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9304					EvaluateExpressionAtPrecedence:
.9304	48		pha				pha 								; save precedence level
.9305	20 dc 97	jsr $97dc			jsr 	EvaluateTerm 				; evaluate term into level X.
.9308	68		pla				pla 								; restore precedence level.
.9309					_EXPRLoop:
.9309	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.930b	b1 30		lda ($30),y			lda 	(codePtr),y
.930d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.930f	b0 25		bcs $9336			bcs 	_EXPRExit
.9311	da		phx				phx 								; read the operator precedence
.9312	aa		tax				tax
.9313	bd c0 92	lda $92c0,x			lda 	PrecedenceLevel,x
.9316	fa		plx				plx
.9317	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9319	f0 1b		beq $9336			beq 	_EXPRExit
.931b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.931d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.931f	c5 37		cmp $37				cmp 	zTemp0+1
.9321	b0 13		bcs $9336			bcs		_EXPRExit 					; if current >= operator exit
.9323	48		pha				pha 								; save current precedence.
.9324	b1 30		lda ($30),y			lda 	(codePtr),y
.9326	c8		iny				iny
.9327	48		pha				pha
.9328	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.932a	e8		inx				inx 								; work out the right hand side.
.932b	20 04 93	jsr $9304			jsr 	EvaluateExpressionAtPrecedence
.932e	ca		dex				dex
.932f	68		pla				pla 								; get operator, call the code.
.9330	20 39 93	jsr $9339			jsr 	_EXPRCaller
.9333	68		pla				pla 								; restore precedence level
.9334	80 d3		bra $9309			bra 	_EXPRLoop 					; and go round.
.9336					_EXPRExit:
.9336	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9338	60		rts				rts
.9339					_EXPRCaller:
.9339	da		phx				phx 								; save on stack, first thing is to restore it
.933a	0a		asl a				asl 	a 							; double so can use vectors into X
.933b	aa		tax				tax
.933c	7c 84 8a	jmp ($8a84,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.933f					FloatingPointAdd:
.933f	20 e8 94	jsr $94e8			jsr 	FloatPrepare 				; prepare for floats
.9342	80 0b		bra $934f			bra 	FloatAdd
.9344					FloatingPointSub:
.9344	20 e8 94	jsr $94e8			jsr 	FloatPrepare 				; prepare for floats
.9347					FloatSubtract:
.9347	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.934a	49 80		eor #$80			eor 	#$80
.934c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.934f					FloatAdd:
.934f	48		pha				pha
.9350	5a		phy				phy
.9351	20 f9 94	jsr $94f9			jsr 	NSNormalise 				; normalise S[X]
.9354	f0 5c		beq $93b2			beq 	_FAReturn1
.9356	e8		inx				inx 								; normalise S[X+1]
.9357	20 f9 94	jsr $94f9			jsr 	NSNormalise
.935a	ca		dex				dex
.935b	c9 00		cmp #$00			cmp 	#0
.935d	f0 77		beq $93d6			beq 	_FAExit 					; if so, just return A
.935f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9362	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9365	f0 1b		beq $9382			beq 	_FAExponentsEqual
.9367	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.936a	a8		tay				tay
.936b	38		sec				sec 								; do a signed comparison of the exponents.
.936c	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.936f	50 02		bvc $9373			bvc 	_FANoSignedChange
.9371	49 80		eor #$80			eor 	#$80
.9373					_FANoSignedChange:
.9373	29 80		and #$80			and 	#$80
.9375	10 03		bpl $937a			bpl 	_FAHaveMax
.9377	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.937a					_FAHaveMax:
.937a	20 d9 93	jsr $93d9			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.937d	e8		inx				inx
.937e	20 d9 93	jsr $93d9			jsr 	_FAShiftToExponent
.9381	ca		dex				dex
.9382					_FAExponentsEqual:
.9382	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9385	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9388	30 10		bmi $939a			bmi 	_FADifferentSigns
.938a	20 8b 90	jsr $908b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.938d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9390	10 44		bpl $93d6			bpl 	_FAExit 					; if no, we are done.
.9392	20 39 9e	jsr $9e39			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9395	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9398	80 3c		bra $93d6			bra 	_FAExit
.939a					_FADifferentSigns:
.939a	20 b1 90	jsr $90b1			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.939d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.93a0	10 06		bpl $93a8			bpl 	_FACheckZero 				; if no, check for -0
.93a2	20 c2 9d	jsr $9dc2			jsr 	NSMNegate 					; netate result
.93a5	20 cb 9d	jsr $9dcb			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.93a8					_FACheckZero:
.93a8	20 46 9e	jsr $9e46			jsr 	NSMIsZero	 				; check for -0
.93ab	d0 29		bne $93d6			bne 	_FAExit
.93ad	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93b0	80 24		bra $93d6			bra 	_FAExit
.93b2					_FAReturn1:
.93b2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93b5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93b8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93bb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93be	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93c1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93c4	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93c7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93ca	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93cd	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93d0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93d3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93d6					_FAExit:
.93d6	7a		ply				ply
.93d7	68		pla				pla
.93d8	60		rts				rts
.93d9					_FAShiftToExponent:
.93d9					_FAShiftToExponent2:
.93d9	98		tya				tya 								; compare Y to exponent
.93da	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93dd	f0 08		beq $93e7			beq 	_FASEExit 					; exit if so.
.93df	20 39 9e	jsr $9e39			jsr 	NSMShiftRight	 			; shift the mantissa right
.93e2	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93e5	80 f2		bra $93d9			bra 	_FAShiftToExponent2
.93e7					_FASEExit:
.93e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93e8					CompareFloat:
.93e8	20 47 93	jsr $9347			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93ee	29 f8		and #$f8			and 	#$F8
.93f0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93f3	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93f6	f0 09		beq $9401			beq 	_FCExit 					; zero, so approximately identical
.93f8	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93fa	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93fd	10 02		bpl $9401			bpl 	_FCExit
.93ff					_FCNegative:
.93ff	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9401					_FCExit:
.9401	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9402					FDivideCommand:
.9402	fa		plx				plx	 								; restore stack position
.9403	20 e8 94	jsr $94e8			jsr 	FloatPrepare 				; prepare for floats
.9406					FloatDivide:
.9406	48		pha				pha
.9407	e8		inx				inx
.9408	20 f9 94	jsr $94f9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.940b	ca		dex				dex
.940c	c9 00		cmp #$00			cmp 	#0
.940e	f0 20		beq $9430			beq 	_FDZero
.9410	20 f9 94	jsr $94f9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9413	f0 19		beq $942e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9415	20 5e 8f	jsr $8f5e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9418	20 eb 8e	jsr $8eeb			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.941b	20 f9 94	jsr $94f9			jsr		NSNormalise 				; renormalise
.941e	20 f9 8f	jsr $8ff9			jsr 	CalculateSign 				; calculate result sign
.9421	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9424	38		sec				sec
.9425	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9428	38		sec				sec
.9429	e9 1e		sbc #$1e			sbc 	#30
.942b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.942e					_FDExit:
.942e	68		pla				pla
.942f	60		rts				rts
.9430					_FDZero:
.9430	a9 03		lda #$03		lda	#3
.9432	4c 53 8d	jmp $8d53		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9435					FloatFractionalPart:
.9435	5a		phy				phy
.9436	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.9439	29 7f		and #$7f			and 	#$7F
.943b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.943e	20 f9 94	jsr $94f9			jsr 	NSNormalise
.9441	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9444	38		sec				sec
.9445	e9 e0		sbc #$e0			sbc 	#$E0
.9447	90 31		bcc $947a			bcc 	_FFPExit 					; already fractional
.9449	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.944b	b0 2a		bcs $9477			bcs 	_FFPZero
.944d	a8		tay				tay 								; put count to do in Y
.944e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9451	20 7c 94	jsr $947c			jsr 	_FFPPartial
.9454	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9457	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.945a	20 7c 94	jsr $947c			jsr 	_FFPPartial
.945d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9460	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9463	20 7c 94	jsr $947c			jsr 	_FFPPartial
.9466	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9469	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.946c	20 7c 94	jsr $947c			jsr 	_FFPPartial
.946f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9472	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; zeroed check.
.9475	d0 03		bne $947a			bne 	_FFPExit
.9477					_FFPZero:
.9477	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.947a					_FFPExit:
.947a	7a		ply				ply
.947b	60		rts				rts
.947c					_FFPPartial:
.947c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.947e	f0 17		beq $9497			beq 	_FFFPPExit
.9480	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9482	b0 0c		bcs $9490			bcs 	_FFFPPWholeByte
.9484	5a		phy				phy
.9485					_FFFPPLeft:
.9485	0a		asl a				asl 	a
.9486	88		dey				dey
.9487	d0 fc		bne $9485			bne 	_FFFPPLeft
.9489	7a		ply				ply
.948a					_FFFPPRight:
.948a	4a		lsr a				lsr 	a
.948b	88		dey				dey
.948c	d0 fc		bne $948a			bne 	_FFFPPRight
.948e	80 07		bra $9497			bra 	_FFFPPExit
.9490					_FFFPPWholeByte:
.9490	98		tya				tya 								; subtract 8 from count
.9491	38		sec				sec
.9492	e9 08		sbc #$08			sbc 	#8
.9494	a8		tay				tay
.9495	a9 00		lda #$00			lda 	#0 							; and clear all
.9497					_FFFPPExit:
.9497	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9498					FloatIntegerPart:
.9498	48		pha				pha
.9499	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.949c	f0 1f		beq $94bd			beq 	_FIPExit 					; if so do nothing
.949e	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; is it zero ?
.94a1	f0 17		beq $94ba			beq 	_FIPZero 					; if so return zero.
.94a3	20 f9 94	jsr $94f9			jsr 	NSNormalise 				; normalise
.94a6	f0 12		beq $94ba			beq 	_FIPZero 					; normalised to zero, exit zero
.94a8					_FIPShift:
.94a8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.94ab	10 08		bpl $94b5			bpl 	_FIPCheckZero
.94ad	20 39 9e	jsr $9e39			jsr 	NSMShiftRight 				; shift mantissa right
.94b0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.94b3	80 f3		bra $94a8			bra 	_FIPShift
.94b5					_FIPCheckZero:
.94b5	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; avoid -0 problem
.94b8	d0 03		bne $94bd			bne 	_FIPExit 					; set to zero if mantissa zero.
.94ba					_FIPZero:
.94ba	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.94bd					_FIPExit:
.94bd	68		pla				pla
.94be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94bf					FloatingPointMultiply:
.94bf	20 e8 94	jsr $94e8			jsr 	FloatPrepare 				; prepare for floats
.94c2					FloatMultiply:
.94c2	48		pha				pha
.94c3	20 f9 94	jsr $94f9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94c6	f0 1b		beq $94e3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94c8	e8		inx				inx
.94c9	20 f9 94	jsr $94f9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94cc	ca		dex				dex
.94cd	c9 00		cmp #$00			cmp 	#0
.94cf	f0 0f		beq $94e0			beq 	_FDSetZero
.94d1	20 b4 8f	jsr $8fb4			jsr 	MultiplyShort 				; calculate the result.
.94d4	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94d7	18		clc				clc
.94d8	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94db	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94de	80 03		bra $94e3			bra 	_FDExit
.94e0					_FDSetZero:
.94e0	20 16 9e	jsr $9e16			jsr 	NSMSetZero 					; return 0
.94e3					_FDExit:
.94e3	20 f9 94	jsr $94f9			jsr 	NSNormalise 				; normalise the result
.94e6	68		pla				pla
.94e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94e8					FloatPrepare:
.94e8	20 1b 96	jsr $961b			jsr 	DereferenceTopTwo 			; dereference the top two values
.94eb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94ee	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94f1	29 10		and #$10			and 	#NSBIsString
.94f3	d0 01		bne $94f6			bne 	_FDType
.94f5	60		rts				rts
.94f6					_FDType:
.94f6	4c aa 9f	jmp $9faa			jmp 	TypeError
.94f9					NSNormalise:
.94f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94fc	29 80		and #$80			and 	#$80
.94fe	09 08		ora #$08			ora 	#NSTFloat
.9500	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9503	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; if zero exit
.9506	d0 09		bne $9511			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9508	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.950b	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.950e	a9 00		lda #$00			lda 	#0 							; set Z flag
.9510	60		rts				rts
.9511					_NSNormaliseOptimise:
.9511	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9514	d0 22		bne $9538			bne 	_NSNormaliseLoop
.9516	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.9519	30 1d		bmi $9538			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.951b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.951e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9521	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9524	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9527	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.952a	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.952d	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9530	38		sec				sec
.9531	e9 08		sbc #$08			sbc 	#8
.9533	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9536	80 d9		bra $9511			bra 	_NSNormaliseOptimise
.9538					_NSNormaliseLoop:
.9538	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.953b	70 08		bvs $9545			bvs 	_NSNExit 					; exit if so with Z flag clear
.953d	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; shift mantissa left
.9540	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9543	80 f3		bra $9538			bra 	_NSNormaliseLoop
.9545					_NSNExit:
.9545	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9547	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9548					AssignNumber:
.9548	5a		phy				phy
.9549	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.954c	85 36		sta $36				sta 	zTemp0
.954e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9551	85 37		sta $37				sta 	zTemp0+1
.9553	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9556	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9558	9d 00 04	sta $0400,x			sta 	NSStatus,x
.955b	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.955d	c9 08		cmp #$08			cmp 	#NSTFloat
.955f	f0 2a		beq $958b			beq 	_ANFloat
.9561	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9564	f0 05		beq $956b			beq		_ANNotFloat
.9566	e8		inx				inx
.9567	20 98 94	jsr $9498			jsr 	FloatIntegerPart 			; make it an integer
.956a	ca		dex				dex
.956b					_ANNotFloat:
.956b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.956e	29 03		and #$03			and 	#3
.9570	d0 05		bne $9577			bne 	_ANByteWord
.9572	20 97 95	jsr $9597			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9575	80 1e		bra $9595			bra 	_ANExit
.9577					_ANByteWord:
.9577	48		pha				pha 								; save count
.9578	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.957b	92 36		sta ($36)			sta 	(zTemp0)
.957d	68		pla				pla
.957e	c9 01		cmp #$01			cmp	 	#1
.9580	f0 13		beq $9595			beq 	_ANExit
.9582	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9585	a0 01		ldy #$01			ldy 	#1
.9587	91 36		sta ($36),y			sta 	(zTemp0),y
.9589	80 0a		bra $9595			bra 	_ANExit
.958b					_ANFloat:
.958b	20 97 95	jsr $9597			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.958e	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9591	a0 04		ldy #$04			ldy 	#4
.9593	91 36		sta ($36),y			sta 	(zTemp0),y
.9595					_ANExit:
.9595	7a		ply				ply
.9596	60		rts				rts
.9597					_ANCopy4PackSign:
.9597	a0 03		ldy #$03			ldy 	#3
.9599	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.959c	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.959e	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.95a1	91 36		sta ($36),y			sta 	(zTemp0),y
.95a3	88		dey				dey
.95a4	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.95a7	91 36		sta ($36),y			sta 	(zTemp0),y
.95a9	88		dey				dey
.95aa	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ad	91 36		sta ($36),y			sta 	(zTemp0),y
.95af	88		dey				dey
.95b0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b3	91 36		sta ($36),y			sta 	(zTemp0),y
.95b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95b6					AssignString:
.95b6	5a		phy				phy
.95b7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95ba	85 38		sta $38				sta 	zTemp1
.95bc	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95bf	85 39		sta $39				sta 	zTemp1+1
.95c1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95c4	85 36		sta $36				sta 	zTemp0
.95c6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95c9	85 37		sta $37				sta 	zTemp0+1
.95cb	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.95cf	f0 23		beq $95f4			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95d1	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95d2	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95d4	e9 02		sbc #$02			sbc 	#2
.95d6	85 3c		sta $3c				sta 	zsTemp
.95d8	a0 01		ldy #$01			ldy 	#1
.95da	b1 36		lda ($36),y			lda 	(zTemp0),y
.95dc	e9 00		sbc #$00			sbc 	#0
.95de	85 3d		sta $3d				sta 	zsTemp+1
.95e0	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95e2					_ASGetLength:
.95e2	c8		iny				iny
.95e3	b1 38		lda ($38),y			lda 	(zTemp1),y
.95e5	d0 fb		bne $95e2			bne 	_ASGetLength
.95e7	98		tya				tya 								; is this length <= current length
.95e8	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95ea	90 20		bcc $960c			bcc 	_ASCopyString
.95ec	f0 1e		beq $960c			beq 	_ASCopyString
.95ee	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95f0	a0 01		ldy #$01			ldy 	#1
.95f2	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f4					_ASNewStringRequired:
.95f4	e8		inx				inx 								; concrete the new string.
.95f5	20 76 a6	jsr $a676			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95f8	ca		dex				dex
.95f9	18		clc				clc
.95fa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95fd	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95ff	92 36		sta ($36)			sta 	(zTemp0)
.9601	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9604	69 00		adc #$00			adc 	#0
.9606	a0 01		ldy #$01			ldy 	#1
.9608	91 36		sta ($36),y			sta 	(zTemp0),y
.960a	80 0d		bra $9619			bra 	_ASExit
.960c					_ASCopyString:
.960c	a0 00		ldy #$00			ldy 	#0
.960e					_ASCopyLoop:
.960e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9610	c8		iny				iny
.9611	c8		iny				iny
.9612	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9614	88		dey				dey
.9615	c9 00		cmp #$00			cmp 	#0
.9617	d0 f5		bne $960e			bne 	_ASCopyLoop
.9619					_ASExit:
.9619	7a		ply				ply
.961a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.961b					DereferenceTopTwo:
.961b	e8		inx				inx
.961c	20 20 96	jsr $9620			jsr 	Dereference 				; deref x+1
.961f	ca		dex				dex  								; falls through to deref x
.9620					Dereference:
.9620	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9623	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9625	f0 57		beq $967e			beq 	_DRFExit 					; not a reference
.9627	5a		phy				phy
.9628	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.962b	85 36		sta $36				sta 	zTemp0
.962d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9630	85 37		sta $37				sta 	zTemp0+1
.9632	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9635	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9637	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.963a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.963d	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.963f	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9641	f0 0f		beq $9652			beq 	_DRFDereferenceTwo
.9643	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9645	f0 39		beq $9680			beq 	_DRFFull
.9647	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.964a	29 03		and #$03			and 	#3
.964c	f0 32		beq $9680			beq 	_DRFFull 					; the whole word
.964e	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9650	f0 07		beq $9659			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9652					_DRFDereferenceTwo:
.9652	a0 01		ldy #$01			ldy 	#1
.9654	b1 36		lda ($36),y			lda 	(zTemp0),y
.9656	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9659					_DRFClear23:
.9659	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.965c	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.965f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9662	29 18		and #$18			and 	#NSBTypeMask
.9664	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9667	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9669	d0 12		bne $967d			bne 	_DRFNotString
.966b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.966e	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9671	d0 0a		bne $967d			bne 	_DRFNotString
.9673	a9 7f		lda #$7f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9675	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9678	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.967a	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.967d					_DRFNotString
.967d	7a		ply				ply 								; restore Y and exit
.967e					_DRFExit:
.967e	60		rts				rts
.967f					_DRFNullString:
>967f	00						.byte 	0
.9680					_DRFFull:
.9680	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9682	b1 36		lda ($36),y			lda 	(zTemp0),y
.9684	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9687	c8		iny				iny
.9688	b1 36		lda ($36),y			lda 	(zTemp0),y
.968a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.968d	c8		iny				iny
.968e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9690	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9693	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9696	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9699	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.969b	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.969e	f0 06		beq $96a6			beq 	_DRFNoExponent
.96a0	c8		iny				iny 								; if not, read the exponent as well.
.96a1	b1 36		lda ($36),y			lda 	(zTemp0),y
.96a3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.96a6					_DRFNoExponent:
.96a6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.96a9	10 0d		bpl $96b8			bpl 	_DRFExit2 					; if not, then exit.
.96ab	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.96ad	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96b0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.96b3	09 80		ora #$80			ora 	#NSBIsNegative
.96b5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96b8					_DRFExit2:
.96b8	7a		ply				ply
.96b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96ba					EncodeNumberStart:
.96ba	38		sec				sec
.96bb	80 01		bra $96be			bra 	EncodeNumberContinue+1
.96bd					EncodeNumberContinue:
.96bd	18		clc				clc
.96be					EncodeNumber:
.96be	08		php				php 								; save reset.
.96bf	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96c1	f0 12		beq $96d5			beq 	_ENIsOkay
.96c3	c9 30		cmp #$30			cmp 	#"0"
.96c5	90 04		bcc $96cb			bcc 	_ENBadNumber
.96c7	c9 3a		cmp #$3a			cmp 	#"9"+1
.96c9	90 0a		bcc $96d5			bcc 	_ENIsOkay
.96cb					_ENBadNumber:
.96cb	28		plp				plp 								; throw saved reset
.96cc	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96cf	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96d1	f0 7e		beq $9751			beq 	_ENConstructFinal
.96d3					_ENFail:
.96d3	18		clc				clc 								; not allowed
.96d4	60		rts				rts
.96d5					_ENIsOkay:
.96d5	28		plp				plp 								; are we restarting
.96d6	90 15		bcc $96ed			bcc 	_ENNoRestart
.96d8					_ENStartEncode:
.96d8	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96da	f0 0c		beq $96e8			beq 	_ENFirstDP
.96dc	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96de	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.96e1	a9 01		lda #$01			lda 	#ESTA_Low
.96e3					_ENExitChange:
.96e3	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96e6	38		sec				sec
.96e7	60		rts				rts
.96e8					_ENFirstDP:
.96e8	20 16 9e	jsr $9e16			jsr 	NSMSetZero 					; clear integer part
.96eb	80 3f		bra $972c			bra 	_ESTASwitchFloat			; go straight to float and exi
.96ed					_ENNoRestart:
.96ed	48		pha				pha 								; save on stack.
.96ee	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96f1	c9 01		cmp #$01			cmp 	#ESTA_Low
.96f3	f0 09		beq $96fe			beq  	_ESTALowState
.96f5	c9 02		cmp #$02			cmp 	#ESTA_High
.96f7	f0 29		beq $9722			beq 	_ESTAHighState
.96f9	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96fb	f0 3b		beq $9738			beq 	_ESTADecimalState
>96fd	db						.byte 	$DB 						; causes a break in the emulator
.96fe					_ESTALowState:
.96fe	68		pla				pla 								; get value back
.96ff	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9701	f0 29		beq $972c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9703	29 0f		and #$0f			and 	#15 						; make digit
.9705	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9708	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.970b	0a		asl a				asl 	a
.970c	0a		asl a				asl 	a
.970d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9710	0a		asl a				asl 	a
.9711	6d 86 04	adc $0486			adc 	DigitTemp
.9714	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9717	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9719	90 05		bcc $9720			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.971b	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.971d	8d 85 04	sta $0485			sta 	EncodeState
.9720					_ESTANoSwitch:
.9720	38		sec				sec
.9721	60		rts				rts
.9722					_ESTAHighState:
.9722	68		pla				pla 								; get value back
.9723	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9725	f0 05		beq $972c			beq 	_ESTASwitchFloat
.9727	20 8b 97	jsr $978b			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.972a	38		sec				sec
.972b	60		rts				rts
.972c					_ESTASwitchFloat:
.972c	9c 87 04	stz $0487			stz 	DecimalCount
.972f	e8		inx				inx 								; zero the decimal additive.
.9730	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.9733	ca		dex				dex
.9734	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9736	80 ab		bra $96e3			bra 	_ENExitChange
.9738					_ESTADecimalState:
.9738	68		pla				pla 								; digit.
.9739	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.973b	f0 96		beq $96d3			beq 	_ENFail
.973d	e8		inx				inx 								; put digit into fractional part of X+1
.973e	20 8b 97	jsr $978b			jsr 	ESTAShiftDigitIntoMantissa
.9741	ca		dex				dex
.9742	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9745	ad 87 04	lda $0487			lda 	DecimalCount
.9748	c9 0b		cmp #$0b			cmp 	#11
.974a	f0 02		beq $974e			beq 	_ESTADSFail
.974c	38		sec				sec
.974d	60		rts				rts
.974e					_ESTADSFail:
.974e	4c a5 9f	jmp $9fa5			jmp 	RangeError
.9751					_ENConstructFinal:
.9751	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9754	f0 33		beq $9789			beq 	_ENCFExit 					; no decimals
.9756	5a		phy				phy
.9757	0a		asl a				asl 	a 							; x 4 and CLC
.9758	0a		asl a				asl 	a
.9759	6d 87 04	adc $0487			adc 	DecimalCount
.975c	a8		tay				tay
.975d	b9 64 9f	lda $9f64,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9760	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9763	b9 65 9f	lda $9f65,y			lda 	DecimalScalarTable-5+1,y
.9766	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9769	b9 66 9f	lda $9f66,y			lda 	DecimalScalarTable-5+2,y
.976c	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.976f	b9 67 9f	lda $9f67,y			lda 	DecimalScalarTable-5+3,y
.9772	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9775	b9 68 9f	lda $9f68,y			lda 	DecimalScalarTable-5+4,y
.9778	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.977b	a9 08		lda #$08			lda 	#NSTFloat
.977d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9780	7a		ply				ply
.9781	e8		inx				inx 								; multiply decimal const by decimal scalar
.9782	20 c2 94	jsr $94c2			jsr 	FloatMultiply
.9785	ca		dex				dex
.9786	20 4f 93	jsr $934f			jsr 	FloatAdd 					; add to integer part.
.9789					_ENCFExit:
.9789	18		clc				clc 								; reject the digit.
.978a	60		rts				rts
.978b					ESTAShiftDigitIntoMantissa:
.978b	29 0f		and #$0f			and 	#15 						; save digit
.978d	48		pha				pha
.978e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9791	48		pha				pha
.9792	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9795	48		pha				pha
.9796	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9799	48		pha				pha
.979a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.979d	48		pha				pha
.979e	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; x 2
.97a1	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; x 4
.97a4	18		clc				clc 								; pop mantissa and add
.97a5	68		pla				pla
.97a6	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97a9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97ac	68		pla				pla
.97ad	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.97b0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97b3	68		pla				pla
.97b4	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97b7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97ba	68		pla				pla
.97bb	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97be	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97c1	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; x 10
.97c4	68		pla				pla 								; add digit
.97c5	18		clc				clc
.97c6	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97c9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97cc	90 0d		bcc $97db			bcc 	_ESTASDExit
.97ce	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97d1	d0 08		bne $97db			bne 	_ESTASDExit
.97d3	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97d6	d0 03		bne $97db			bne 	_ESTASDExit
.97d8	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97db					_ESTASDExit:
.97db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97dc					EvaluateTerm:
.97dc	b1 30		lda ($30),y			lda 	(codePtr),y
.97de	30 18		bmi $97f8			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97e0	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97e2	b0 6f		bcs $9853			bcs 	_ETVariable
.97e4	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97e6	90 6e		bcc $9856			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97e8	c9 3a		cmp #$3a			cmp 	#'9'+1
.97ea	b0 6a		bcs $9856			bcs 	_ETPuncUnary
.97ec	20 ba 96	jsr $96ba			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97ef					_ETNumber:
.97ef	c8		iny				iny 								; keep encoding until we have the numbers
.97f0	b1 30		lda ($30),y			lda 	(codePtr),y
.97f2	20 bd 96	jsr $96bd			jsr 	EncodeNumberContinue
.97f5	b0 f8		bcs $97ef			bcs 	_ETNumber 					; go back if accepted.
.97f7	60		rts				rts
.97f8					_ETCheckUnary:
.97f8	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97fa	f0 41		beq $983d			beq 	_ETString
.97fc	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97fe	f0 12		beq $9812			beq 	_ETHexConstant
.9800	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9802	90 0b		bcc $980f			bcc 	_ETSyntaxError
.9804	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.9806	b0 07		bcs $980f			bcs 	_ETSyntaxError
.9808	da		phx				phx 								; push X on the stack
.9809	0a		asl a				asl 	a 							; put vector x 2 into X
.980a	aa		tax				tax
.980b	c8		iny				iny 								; consume unary function token
.980c	7c 04 8b	jmp ($8b04,x)			jmp 	(VectorSet0,x) 				; and do it.
.980f					_ETSyntaxError:
.980f	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.9812					_ETHexConstant:
.9812	c8		iny				iny 								; skip #
.9813	c8		iny				iny 								; skip count
.9814	20 16 9e	jsr $9e16			jsr 	NSMSetZero 					; clear result
.9817					_ETHLoop:
.9817	b1 30		lda ($30),y			lda 	(codePtr),y
.9819	c8		iny				iny 								; and consume
.981a	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.981c	f0 1e		beq $983c			beq 	_ETHExit
.981e	48		pha				pha 								; save on stack.
.981f	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; x 2
.9822	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; x 4
.9825	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; x 8
.9828	20 2b 9e	jsr $9e2b			jsr 	NSMShiftLeft 				; x 16
.982b	68		pla				pla 								; ASCII
.982c	c9 41		cmp #$41			cmp 	#'A'
.982e	90 02		bcc $9832			bcc 	_ETHNotChar
.9830	e9 07		sbc #$07			sbc 	#7
.9832					_ETHNotChar:
.9832	29 0f		and #$0f			and 	#15 						; digit now
.9834	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9837	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.983a	80 db		bra $9817			bra 	_ETHLoop 					; go round.
.983c					_ETHExit:
.983c	60		rts				rts
.983d					_ETString:
.983d	c8		iny				iny 								; look at length
.983e	b1 30		lda ($30),y			lda 	(codePtr),y
.9840	48		pha				pha
.9841	c8		iny				iny 								; first character
.9842	20 0e a2	jsr $a20e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9845	68		pla				pla 								; restore count and save
.9846	85 36		sta $36				sta 	zTemp0
.9848	98		tya				tya 								; add length to Y to skip it.
.9849	18		clc				clc
.984a	65 36		adc $36				adc 	zTemp0
.984c	a8		tay				tay
.984d	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.984f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9852	60		rts				rts
.9853					_ETVariable:
.9853	4c ad 98	jmp $98ad			jmp 	VariableHandler
.9856					_ETPuncUnary:
.9856	c8		iny				iny 								; consume the unary character
.9857	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9859	f0 2d		beq $9888			beq 	_ETUnaryNegate
.985b	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.985d	f0 39		beq $9898			beq 	_ETDereference
.985f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9861	f0 43		beq $98a6			beq 	_ETParenthesis
.9863	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9865	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9867	f0 06		beq $986f			beq 	_ETIndirection
.9869	e6 36		inc $36				inc 	zTemp0
.986b	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.986d	d0 a0		bne $980f			bne 	_ETSyntaxError
.986f					_ETIndirection:
.986f	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9871	1a		inc a				inc 	a
.9872	48		pha				pha
.9873	20 dc 97	jsr $97dc			jsr 	EvaluateTerm				; evaluate the term
.9876	20 20 96	jsr $9620			jsr 	Dereference 				; dereference it.
.9879	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.987c	d0 07		bne $9885			bne 	_ETTypeMismatch
.987e	68		pla				pla 								; indirection 1-2
.987f	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9881	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9884	60		rts				rts
.9885					_ETTypeMismatch:
.9885	4c aa 9f	jmp $9faa			jmp 	TypeError
.9888					_ETUnaryNegate:
.9888	20 dc 97	jsr $97dc			jsr 	EvaluateTerm				; evaluate the term
.988b	20 20 96	jsr $9620			jsr 	Dereference 				; dereference it.
.988e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9891	29 10		and #$10			and 	#NSTString
.9893	d0 f0		bne $9885			bne 	_ETTypeMismatch
.9895	4c c2 9d	jmp $9dc2			jmp 	NSMNegate  					; just toggles the sign bit.
.9898					_ETDereference:
.9898	20 dc 97	jsr $97dc			jsr 	EvaluateTerm				; evaluate the term
.989b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.989e	29 20		and #$20			and 	#NSBIsReference
.98a0	f0 e3		beq $9885			beq 	_ETTypeMismatch
.98a2	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.98a5	60		rts				rts
.98a6					_ETParenthesis:
.98a6	20 02 93	jsr $9302			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.98a9	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 			; check for )
.98ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.98ad					VariableHandler:
.98ad	b1 30		lda ($30),y			lda 	(codePtr),y
.98af	18		clc				clc
.98b0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98b2	85 37		sta $37				sta 	zTemp0+1
.98b4	c8		iny				iny
.98b5	b1 30		lda ($30),y			lda 	(codePtr),y
.98b7	85 36		sta $36				sta 	zTemp0
.98b9	c8		iny				iny
.98ba	18		clc				clc									; copy variable address+3 to mantissa
.98bb	69 03		adc #$03			adc 	#3
.98bd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98c0	a5 37		lda $37				lda 	zTemp0+1
.98c2	69 00		adc #$00			adc 	#0
.98c4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98c7	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98ca	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98cd	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98d0	5a		phy				phy
.98d1	a0 02		ldy #$02			ldy 	#2 							; read type
.98d3	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d5	7a		ply				ply
.98d6	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98d8	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98da	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98dd	29 04		and #$04			and 	#NSBIsArray
.98df	d0 01		bne $98e2			bne 	_VHArray
.98e1	60		rts				rts
.98e2					_VHArray:
.98e2	e8		inx				inx
.98e3	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98e6	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98e8	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98eb	b1 30		lda ($30),y			lda 	(codePtr),y
.98ed	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98ef	d0 06		bne $98f7			bne 	_VHNoSecondIndex
.98f1	c8		iny				iny 								; skip the comma
.98f2	e8		inx				inx
.98f3	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98f6	ca		dex				dex
.98f7					_VHNoSecondIndex:
.98f7	ca		dex				dex 								; set X back.
.98f8	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 			; and check the right bracket.
.98fb	5a		phy				phy 								; save position
.98fc	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98fe	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9900	f0 6b		beq $996d			beq 	_VHBadIndex
.9902	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9905	85 3e		sta $3e				sta 	zaTemp
.9907	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.990a	85 3f		sta $3f				sta 	zaTemp+1
.990c	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.990e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9910	f0 02		beq $9914			beq 	_VHHas2Mask
.9912	a9 ff		lda #$ff			lda 	#$FF
.9914					_VHHas2Mask:
.9914	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9917	f0 54		beq $996d			beq 	_VHBadIndex
.9919	0a		asl a				asl 	a 							; carry will be set if a second index
.991a	90 09		bcc $9925			bcc 	_VHCheckFirstIndex
.991c	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.991e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9920	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9923	90 48		bcc $996d			bcc 	_VHBadIndex
.9925					_VHCheckFirstIndex:
.9925	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9927	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9929	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.992c	90 3f		bcc $996d			bcc 	_VHBadIndex
.992e	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9930	64 37		stz $37				stz 	zTemp0+1
.9932	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9935	30 0f		bmi $9946			bmi 	_VHNoMultiply
.9937	da		phx				phx
.9938	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.993b	48		pha				pha
.993c	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.993e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9940	1a		inc a				inc 	a 							; add 1 for zero base
.9941	fa		plx				plx
.9942	20 ab 9d	jsr $9dab			jsr 	Multiply8x8 				; calculate -> Z0
.9945	fa		plx				plx
.9946					_VHNoMultiply:
.9946	18		clc				clc
.9947	a5 36		lda $36				lda 	zTemp0
.9949	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.994c	85 36		sta $36				sta 	zTemp0
.994e	a5 37		lda $37				lda 	zTemp0+1
.9950	69 00		adc #$00			adc 	#0
.9952	85 37		sta $37				sta 	zTemp0+1
.9954	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9957	20 f5 84	jsr $84f5			jsr 	ScaleByBaseType
.995a	18		clc				clc
.995b	b2 3e		lda ($3e)			lda 	(zaTemp)
.995d	65 36		adc $36				adc 	zTemp0
.995f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9962	a0 01		ldy #$01			ldy 	#1
.9964	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9966	65 37		adc $37				adc 	zTemp0+1
.9968	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.996b	7a		ply				ply 								; restore position
.996c	60		rts				rts
.996d					_VHBadIndex:
.996d	a9 17		lda #$17		lda	#23
.996f	4c 53 8d	jmp $8d53		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9972					AbsUnary:
.9972	fa		plx				plx 								; restore stack pos
.9973	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber 				; get a float or int
.9976	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9979	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.997c	29 7f		and #$7f			and 	#$7F
.997e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9981	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9982					AllocUnary:
.9982	fa		plx				plx 								; restore stack pos
.9983	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger		; get bytes required.
.9986	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9989	da		phx				phx 								; save X/Y
.998a	5a		phy				phy
.998b	8a		txa				txa 								; copy X into Y
.998c	a8		tay				tay
.998d	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9990	aa		tax				tax
.9991	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9994	20 a1 99	jsr $99a1			jsr 	AllocateXABytes 			; allocate memory
.9997	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.999a	8a		txa				txa
.999b	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.999e	7a		ply				ply
.999f	fa		plx				plx
.99a0	60		rts				rts
.99a1					AllocateXABytes:
.99a1	5a		phy				phy
.99a2	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.99a5	84 36		sty $36				sty 	zTemp0
.99a7	5a		phy				phy
.99a8	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.99ab	84 37		sty $37				sty 	zTemp0+1
.99ad	5a		phy				phy
.99ae	18		clc				clc 								; add to low memory pointer
.99af	6d 8c 04	adc $048c			adc 	lowMemPtr
.99b2	8d 8c 04	sta $048c			sta 	lowMemPtr
.99b5	8a		txa				txa
.99b6	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99b9	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99bc	b0 2f		bcs $99ed			bcs 	CISSMemory
.99be	20 df 99	jsr $99df			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99c1					_ClearMemory:
.99c1	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99c4	c5 36		cmp $36				cmp 	zTemp0
.99c6	d0 07		bne $99cf			bne 	_CMClearNext
.99c8	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99cb	c5 37		cmp $37				cmp 	zTemp0+1
.99cd	f0 0c		beq $99db			beq 	_CMExit
.99cf					_CMClearNext:
.99cf	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99d1	92 36		sta ($36)			sta 	(zTemp0)
.99d3	e6 36		inc $36				inc 	zTemp0
.99d5	d0 ea		bne $99c1			bne 	_ClearMemory
.99d7	e6 37		inc $37				inc		zTemp0+1
.99d9	80 e6		bra $99c1			bra 	_ClearMemory
.99db					_CMExit:
.99db	fa		plx				plx
.99dc	68		pla				pla
.99dd	7a		ply				ply
.99de	60		rts				rts
.99df					CheckIdentifierStringSpace:
.99df	48		pha				pha
.99e0	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99e3	18		clc				clc
.99e4	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99e6	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99e9	b0 02		bcs $99ed			bcs 	CISSMemory
.99eb	68		pla				pla
.99ec	60		rts				rts
.99ed					CISSMemory:
.99ed	a9 06		lda #$06		lda	#6
.99ef	4c 53 8d	jmp $8d53		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99f2					AscUnary:
.99f2	fa		plx				plx 								; restore stack pos
.99f3	20 4a 9d	jsr $9d4a			jsr 	EvaluateString 				; get a string
.99f6	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99f8	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.99fb	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.99fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99ff					FracUnary:
.99ff	fa		plx				plx 								; restore stack pos
.9a00	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber 				; get a float or int
.9a03	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9a06	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a09	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a0b	f0 04		beq $9a11			beq 	_IUZero
.9a0d	20 35 94	jsr $9435			jsr 	FloatFractionalPart
.9a10	60		rts				rts
.9a11					_IUZero:
.9a11	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.9a14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a15					IntUnary:
.9a15	fa		plx				plx 								; restore stack pos
.9a16	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber 				; get a float or int
.9a19	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9a1c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a1f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a21	f0 03		beq $9a26			beq 	_IUExit
.9a23	20 98 94	jsr $9498			jsr 	FloatIntegerPart
.9a26					_IUExit:
.9a26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a27					LenUnary:
.9a27	fa		plx				plx 								; restore stack pos
.9a28	20 4a 9d	jsr $9d4a			jsr 	EvaluateString 				; get a string
.9a2b	5a		phy				phy
.9a2c	a0 00		ldy #$00			ldy 	#0 							; find length
.9a2e					_LenFind:
.9a2e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a30	f0 06		beq $9a38			beq 	_LenExit
.9a32	c8		iny				iny
.9a33	d0 f9		bne $9a2e			bne 	_LenFind
.9a35	4c a5 9f	jmp $9fa5			jmp 	RangeError 					; string > 255
.9a38					_LenExit:
.9a38	98		tya				tya
.9a39	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.9a3c	7a		ply				ply
.9a3d	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9a40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a41					Unary_Min:
.9a41	a9 01		lda #$01			lda 	#1
.9a43	80 02		bra $9a47			bra 	UnaryMinMaxMain
.9a45					Unary_Max:
.9a45	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a47					UnaryMinMaxMain:
.9a47	fa		plx				plx 								; get index on number stack
.9a48	48		pha				pha 								; save comparator
.9a49	20 36 9d	jsr $9d36			jsr 	EvaluateValue 				; get the first value.
.9a4c					_UMMMLoop:
.9a4c	b1 30		lda ($30),y			lda 	(codePtr),y
.9a4e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a50	f0 22		beq $9a74			beq 	_UMMMDone
.9a52	20 42 8d	jsr $8d42			jsr 	CheckComma 					; must be a comma
.9a55	e8		inx				inx
.9a56	20 36 9d	jsr $9d36			jsr 	EvaluateValue
.9a59	ca		dex				dex
.9a5a	20 ed 9d	jsr $9ded			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a5d	e8		inx				inx
.9a5e	20 ed 9d	jsr $9ded			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a61	e8		inx				inx
.9a62	20 0b 8e	jsr $8e0b			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a65	ca		dex				dex
.9a66	ca		dex				dex
.9a67	85 36		sta $36				sta 	zTemp0 						; save required result
.9a69	68		pla				pla 								; get and save comparator
.9a6a	48		pha				pha
.9a6b	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a6d	d0 dd		bne $9a4c			bne 	_UMMMLoop
.9a6f	20 77 9a	jsr $9a77			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a72	80 d8		bra $9a4c			bra 	_UMMMLoop
.9a74					_UMMMDone:
.9a74	68		pla				pla 								; throw the comparator
.9a75	c8		iny				iny 								; skip )
.9a76	60		rts				rts
.9a77					ExpCopyAboveDown:
.9a77	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a7a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a7d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a80	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a83	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a86	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a89	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a8c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a8f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a92	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a95	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a98	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a9c					Unary_Not:
.9a9c	fa		plx				plx
.9a9d	20 62 9d	jsr $9d62			jsr 	EvaluateInteger 			; get integer
.9aa0	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9aa3	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; zero mantissa ?
.9aa6	f0 04		beq $9aac			beq 	_NotZero
.9aa8	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.9aab	60		rts				rts
.9aac					_NotZero:
.9aac	4c c0 8d	jmp $8dc0			jmp 	ReturnTrue
.9aaf					_UNBad:
.9aaf	4c af 9f	jmp $9faf			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ab2					Unary_Random:
.9ab2	fa		plx				plx
.9ab3	20 31 9b	jsr $9b31			jsr 	Random32Bit 				; get a random number
.9ab6	20 16 9b	jsr $9b16			jsr 	URCopyToMantissa  			; put in mantissa
.9ab9	b1 30		lda ($30),y			lda 	(codePtr),y
.9abb	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9abd	f0 08		beq $9ac7			beq 	_URNoModulus
.9abf	e8		inx				inx
.9ac0	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ac3	ca		dex				dex
.9ac4	20 2f 8f	jsr $8f2f			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9ac7					_URNoModulus:
.9ac7	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9aca	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9acd	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9ad0	60		rts				rts
.9ad1					Unary_Rnd:
.9ad1	fa		plx				plx
.9ad2	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber 				; number to use.
.9ad5	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 			; closing bracket
.9ad8	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9adb	f0 2b		beq $9b08			beq 	_URCopySeed
.9add	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ae0	10 23		bpl $9b05			bpl 	_URDontSeed
.9ae2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ae5	49 17		eor #$17			eor 	#$17
.9ae7	8d 88 04	sta $0488			sta 	RandomSeed+0
.9aea	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9aed	49 a5		eor #$a5			eor 	#$A5
.9aef	8d 89 04	sta $0489			sta 	RandomSeed+1
.9af2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9af5	49 c2		eor #$c2			eor 	#$C2
.9af7	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9afa	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9afd	49 9d		eor #$9d			eor 	#$9D
.9aff	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9b02	20 31 9b	jsr $9b31			jsr 	Random32Bit
.9b05					_URDontSeed:
.9b05	20 31 9b	jsr $9b31			jsr 	Random32Bit 				; generate a number.
.9b08					_URCopySeed:
.9b08	20 16 9b	jsr $9b16			jsr 	URCopyToMantissa 			; copy into mantissa
.9b0b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9b0d	8d 28 04	sta $0428			sta 	NSExponent
.9b10	a9 08		lda #$08			lda 	#NSTFloat
.9b12	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b15	60		rts				rts
.9b16					URCopyToMantissa:
.9b16	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b19	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b1c	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b1f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b22	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b25	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b28	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b2b	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b2d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b30	60		rts				rts
.9b31					Random32Bit:
.9b31	5a		phy				phy
.9b32	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b34	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b37	d0 03		bne $9b3c			bne 	_Random1
.9b39	a8		tay				tay 								; if so do it 256 times
.9b3a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b3c					_Random1:
.9b3c	0a		asl a				asl 	a 							; LSFR RNG
.9b3d	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b40	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b43	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b46	90 02		bcc $9b4a			bcc 	_Random2
.9b48	49 c5		eor #$c5			eor 	#$C5
.9b4a					_Random2:
.9b4a	88		dey				dey
.9b4b	d0 ef		bne $9b3c			bne 	_Random1
.9b4d	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b50	7a		ply				ply
.9b51	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b52					SgnUnary:
.9b52	fa		plx				plx 								; restore stack pos
.9b53	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber 				; get a float or int
.9b56	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9b59	20 46 9e	jsr $9e46			jsr 	NSMIsZero 					; if zero
.9b5c	f0 10		beq $9b6e			beq 	_SGZero  					; return Int Zero
.9b5e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b61	48		pha				pha
.9b62	a9 01		lda #$01			lda 	#1 							; set to 1
.9b64	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.9b67	68		pla				pla
.9b68	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b6a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b6d	60		rts				rts
.9b6e	20 16 9e	jsr $9e16	_SGZero:jsr 	NSMSetZero
.9b71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b72					ValUnary:
.9b72	fa		plx				plx 								; restore stack pos
.9b73	20 88 9b	jsr $9b88			jsr 	ValMainCode 				; do the main val() code
.9b76	b0 01		bcs $9b79			bcs 	_VUError 					; couldn't convert
.9b78	60		rts				rts
.9b79					_VUError:
.9b79	4c aa 9f	jmp $9faa			jmp 	TypeError
.9b7c					IsValUnary:
.9b7c	fa		plx				plx 								; restore stack pos
.9b7d	20 88 9b	jsr $9b88			jsr 	ValMainCode 				; do the main val() code
.9b80	b0 03		bcs $9b85			bcs 	_VUBad
.9b82	4c c0 8d	jmp $8dc0			jmp 	ReturnTrue
.9b85					_VUBad:
.9b85	4c cc 8d	jmp $8dcc			jmp 	ReturnFalse
.9b88					ValMainCode:
.9b88	20 4a 9d	jsr $9d4a			jsr 	EvaluateString 				; get a string
.9b8b	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 			; check right bracket present
.9b8e	5a		phy				phy
.9b8f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b91	f0 17		beq $9baa			beq 	_VMCFail2
.9b93	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b95	48		pha				pha 								; save first character
.9b96	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b98	d0 01		bne $9b9b			bne 	_VMCStart
.9b9a	c8		iny				iny 								; skip over -
.9b9b					_VMCStart:
.9b9b	38		sec				sec 								; initialise first time round.
.9b9c					_VMCNext:
.9b9c	c8		iny				iny 								; pre-increment
.9b9d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b9f	f0 0c		beq $9bad			beq 	_VMCSuccess 				; successful.
.9ba1	20 be 96	jsr $96be			jsr 	EncodeNumber 				; send it to the number-builder
.9ba4	90 03		bcc $9ba9			bcc 	_VMCFail 					; if failed, give up.
.9ba6	18		clc				clc 								; next time round, countinue
.9ba7	80 f3		bra $9b9c			bra 	_VMCNext
.9ba9					_VMCFail:
.9ba9	68		pla				pla
.9baa					_VMCFail2:
.9baa	7a		ply				ply
.9bab	38		sec				sec
.9bac	60		rts				rts
.9bad					_VMCSuccess:
.9bad	a9 00		lda #$00			lda 	#0 							; construct final
.9baf	20 be 96	jsr $96be			jsr 	EncodeNumber
.9bb2	68		pla				pla
.9bb3	c9 2d		cmp #$2d			cmp 	#"-"
.9bb5	d0 03		bne $9bba			bne 	_VMCNotNegative
.9bb7	20 c2 9d	jsr $9dc2			jsr		NSMNegate
.9bba					_VMCNotNegative:
.9bba	7a		ply				ply
.9bbb	18		clc				clc
.9bbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bbd					ChrUnary:
.9bbd	fa		plx				plx 								; restore stack pos
.9bbe	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger			; get value
.9bc1	48		pha				pha
.9bc2	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9bc5	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bc7	20 f7 a6	jsr $a6f7			jsr 	StringTempAllocate
.9bca	68		pla				pla 								; write number to it
.9bcb	20 35 a7	jsr $a735			jsr 	StringTempWrite
.9bce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bcf					SpcUnary:
.9bcf	fa		plx				plx 								; restore stack pos
.9bd0	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger			; get value
.9bd3	5a		phy				phy
.9bd4	48		pha				pha 								; save count
.9bd5	20 f7 a6	jsr $a6f7			jsr 	StringTempAllocate
.9bd8	7a		ply				ply 								; to do count in Y
.9bd9					_SpcLoop:
.9bd9	c0 00		cpy #$00			cpy 	#0
.9bdb	f0 08		beq $9be5			beq 	_SpcExit
.9bdd	a9 20		lda #$20			lda 	#32
.9bdf	20 35 a7	jsr $a735			jsr 	StringTempWrite
.9be2	88		dey				dey
.9be3	80 f4		bra $9bd9			bra 	_SPCLoop
.9be5					_SpcExit:
.9be5	7a		ply				ply
.9be6	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.9be9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bea					Unary_Str:
.9bea	fa		plx				plx
.9beb	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber  			; get number
.9bee	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 			; closing bracket
.9bf1	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bf3	20 0c 9c	jsr $9c0c			jsr 	ConvertNumberToString 		; do the conversion.
.9bf6	a9 21		lda #$21			lda		#33 						; create buffer
.9bf8	20 f7 a6	jsr $a6f7			jsr 	StringTempAllocate 			; allocate memory
.9bfb	da		phx				phx
.9bfc	a2 00		ldx #$00			ldx 	#0
.9bfe					_USCopy:
.9bfe	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c01	20 35 a7	jsr $a735			jsr 	StringTempWrite
.9c04	e8		inx				inx
.9c05	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c08	d0 f4		bne $9bfe			bne 	_USCopy
.9c0a	fa		plx				plx
.9c0b	60		rts				rts
.9c0c					ConvertNumberToString:
.9c0c	5a		phy				phy 								; save code position
.9c0d	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c10	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c13	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c16	10 0a		bpl $9c22			bpl 	_CNTSNotNegative
.9c18	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c1a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c1d	a9 2d		lda #$2d			lda 	#"-"
.9c1f	20 88 9c	jsr $9c88			jsr 	WriteDecimalBuffer
.9c22					_CNTSNotNegative:
.9c22	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c25	f0 15		beq $9c3c			beq 	_CNTSNotFloat
.9c27	e8		inx				inx 								; round up
.9c28	a9 01		lda #$01			lda 	#1
.9c2a	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.9c2d	ca		dex				dex
.9c2e	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c31	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c34	a9 08		lda #$08			lda 	#NSTFloat
.9c36	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c39	20 4f 93	jsr $934f			jsr 	FloatAdd
.9c3c					_CNTSNotFloat:
.9c3c	20 6a 9c	jsr $9c6a			jsr 	MakePlusTwoString
.9c3f	20 35 94	jsr $9435			jsr 	FloatFractionalPart 		; get the fractional part
.9c42	20 f9 94	jsr $94f9			jsr 	NSNormalise					; normalise , exit if zero
.9c45	f0 21		beq $9c68			beq 	_CNTSExit
.9c47	a9 2e		lda #$2e			lda 	#"."
.9c49	20 88 9c	jsr $9c88			jsr 	WriteDecimalBuffer 			; write decimal place
.9c4c					_CNTSDecimal:
.9c4c	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c4f	30 17		bmi $9c68			bmi 	_CNTSExit
.9c51	e8		inx				inx 								; x 10.0
.9c52	a9 0a		lda #$0a			lda 	#10
.9c54	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.9c57	a9 08		lda #$08			lda 	#NSTFloat
.9c59	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c5c	ca		dex				dex
.9c5d	20 c2 94	jsr $94c2			jsr 	FloatMultiply
.9c60	20 6a 9c	jsr $9c6a			jsr 	MakePlusTwoString
.9c63	20 35 94	jsr $9435			jsr 	FloatFractionalPart 		; get the fractional part
.9c66	80 e4		bra $9c4c			bra 	_CNTSDecimal 				; keep going.
.9c68					_CNTSExit:
.9c68	7a		ply				ply
.9c69	60		rts				rts
.9c6a					MakePlusTwoString:
.9c6a	da		phx				phx
.9c6b	20 ed 9d	jsr $9ded			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c6e	e8		inx				inx 								; access it
.9c6f	e8		inx				inx
.9c70	20 98 94	jsr $9498			jsr 	FloatIntegerPart 			; make it an integer
.9c73	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c75	20 7a 92	jsr $927a			jsr 	ConvertInt32
.9c78	a2 00		ldx #$00			ldx	 	#0
.9c7a					_MPTSCopy:
.9c7a	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c7d	20 88 9c	jsr $9c88			jsr 	WriteDecimalBuffer
.9c80	e8		inx				inx
.9c81	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c84	d0 f4		bne $9c7a			bne 	_MPTSCopy
.9c86	fa		plx				plx
.9c87	60		rts				rts
.9c88					WriteDecimalBuffer:
.9c88	da		phx				phx
.9c89	ae 95 04	ldx $0495			ldx 	dbOffset
.9c8c	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c8f	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c92	ee 95 04	inc $0495			inc 	dbOffset
.9c95	fa		plx				plx
.9c96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c97					Unary_Left:
.9c97	fa		plx				plx
.9c98	18		clc				clc 								; only one parameter
.9c99	20 0e 9d	jsr $9d0e			jsr 	SubstringInitial 			; set up.
.9c9c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c9f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ca2	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ca5	80 2c		bra $9cd3			bra 	SubstringMain
.9ca7					Unary_Right:
.9ca7	fa		plx				plx
.9ca8	18		clc				clc 								; only one parameter
.9ca9	20 0e 9d	jsr $9d0e			jsr 	SubstringInitial 			; set up.
.9cac	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9caf	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cb2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cb5	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cb8	b0 02		bcs $9cbc			bcs 	_URNotUnderflow
.9cba	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cbc					_URNotUnderFlow:
.9cbc	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9cbf	80 12		bra $9cd3			bra 	SubStringMain
.9cc1					Unary_Mid:
.9cc1	fa		plx				plx
.9cc2	38		sec				sec 								; two parameters
.9cc3	20 0e 9d	jsr $9d0e			jsr 	SubstringInitial 			; set up.
.9cc6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cc9	f0 05		beq $9cd0			beq 	_UMError
.9ccb	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cce	80 03		bra $9cd3			bra 	SubStringMain
.9cd0					_UMError:
.9cd0	4c af 9f	jmp $9faf			jmp 	ArgumentError
.9cd3					SubStringMain:
.9cd3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cd6	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cd9	b0 2d		bcs $9d08			bcs 	_SSMNull 					; if so, return an empty string.
.9cdb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cde	f0 28		beq $9d08			beq 	_SSMNull 					; return empty string.
.9ce0	18		clc				clc 								; add the offset +1 to the address and
.9ce1	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ce4	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ce7	85 36		sta $36				sta 	zTemp0
.9ce9	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cec	69 00		adc #$00			adc 	#0
.9cee	85 37		sta $37				sta 	zTemp0+1
.9cf0					_SSMNoCarry:
.9cf0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cf3	20 f7 a6	jsr $a6f7			jsr 	StringTempAllocate 			; allocate that many characters
.9cf6	5a		phy				phy 								; save Y
.9cf7	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cf9					_SSMCopy:
.9cf9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cfb	f0 09		beq $9d06			beq 	_SSMEString 				; no more to copy
.9cfd	20 35 a7	jsr $a735			jsr 	StringTempWrite 			; and write it out.
.9d00	c8		iny				iny
.9d01	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d04	d0 f3		bne $9cf9			bne 	_SSMCopy
.9d06					_SSMEString:
.9d06	7a		ply				ply
.9d07					_SSMExit:
.9d07	60		rts				rts
.9d08					_SSMNull:
.9d08	a9 00		lda #$00			lda 	#0
.9d0a	20 f7 a6	jsr $a6f7			jsr 	StringTempAllocate
.9d0d	60		rts				rts
.9d0e					SubstringInitial:
.9d0e	da		phx				phx 								; save initial stack position
.9d0f	08		php				php 								; save carry on stack indicating 2 parameters
.9d10	20 4a 9d	jsr $9d4a			jsr 	EvaluateString 				; get a string
.9d13	5a		phy				phy 								; calculate length to exponent.
.9d14	a0 ff		ldy #$ff			ldy 	#$FF
.9d16					_SIFindLength:
.9d16	c8		iny				iny
.9d17	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d19	d0 fb		bne $9d16			bne 	_SIFindLength
.9d1b	98		tya				tya
.9d1c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d1f	7a		ply				ply
.9d20	e8		inx				inx
.9d21	20 42 8d	jsr $8d42			jsr 	CheckComma 					; comma next
.9d24	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get next parameter
.9d27	28		plp				plp 								; is it the last parameter ?
.9d28	90 07		bcc $9d31			bcc 	_SSIExit 					; if so, exit.
.9d2a	e8		inx				inx
.9d2b	20 42 8d	jsr $8d42			jsr 	CheckComma 					; comma next
.9d2e	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get last parameter
.9d31					_SSIExit:
.9d31	fa		plx				plx
.9d32	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket 			; check closing bracket
.9d35	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d36					EvaluateValue:
.9d36	48		pha				pha
.9d37	20 02 93	jsr $9302			jsr		EvaluateExpression 			; expression
.9d3a	20 20 96	jsr $9620			jsr 	Dereference					; derefernce it
.9d3d	68		pla				pla
.9d3e	60		rts				rts
.9d3f					EvaluateNumber:
.9d3f	20 36 9d	jsr $9d36			jsr 	EvaluateValue 				; get a value
.9d42	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d45	29 10		and #$10			and 	#NSBIsString
.9d47	d0 16		bne $9d5f			bne 	HelperTypeError
.9d49	60		rts				rts
.9d4a					EvaluateString:
.9d4a	20 36 9d	jsr $9d36			jsr 	EvaluateValue 				; get a value
.9d4d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d50	29 10		and #$10			and 	#NSBIsString
.9d52	f0 0b		beq $9d5f			beq 	HelperTypeError
.9d54					CopyAddressToTemp0:
.9d54	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d57	85 36		sta $36				sta 	zTemp0
.9d59	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d5c	85 37		sta $37				sta 	zTemp0+1
.9d5e	60		rts				rts
.9d5f					HelperTypeError:
.9d5f	4c aa 9f	jmp $9faa			jmp 	TypeError
.9d62					EvaluateInteger:
.9d62	20 3f 9d	jsr $9d3f			jsr 	EvaluateNumber
.9d65	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d68	d0 0a		bne $9d74			bne 	HelperValueError 			; if not, it's a float.
.9d6a	60		rts				rts
.9d6b					EvaluateUnsignedInteger:
.9d6b	20 62 9d	jsr $9d62			jsr 	EvaluateInteger 			; check integer is +ve
.9d6e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d71	30 01		bmi $9d74			bmi 	HelperValueError
.9d73	60		rts				rts
.9d74					HelperValueError:
.9d74	4c af 9f	jmp $9faf			jmp 	ArgumentError
.9d77					Evaluate16BitInteger:
.9d77	20 6b 9d	jsr $9d6b			jsr	 	EvaluateUnsignedInteger		; get integer
.9d7a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d7d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d80	d0 f2		bne $9d74			bne 	HelperValueError
.9d82	60		rts				rts
.9d83					Evaluate16BitIntegerSigned:
.9d83	20 62 9d	jsr $9d62			jsr	 	EvaluateInteger				; get integer
.9d86	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d89	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d8c	d0 e6		bne $9d74			bne 	HelperValueError
.9d8e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d91	10 03		bpl $9d96			bpl 	_EISNotSigned
.9d93	20 cb 9d	jsr $9dcb			jsr 	NSMNegateMantissa
.9d96					_EISNotSigned:
.9d96	60		rts				rts
.9d97					Evaluate8BitInteger:
.9d97	20 6b 9d	jsr $9d6b			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d9a	d0 d8		bne $9d74			bne 	HelperValueError
.9d9c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d9f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9da2	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9da5	d0 cd		bne $9d74			bne 	HelperValueError
.9da7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9daa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9dab					Multiply8x8:
.9dab	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9dac	85 36		sta $36			  	sta 	zTemp0
.9dae	86 37		stx $37				stx 	zTemp0+1
.9db0	a9 00		lda #$00			lda 	#0
.9db2	a2 08		ldx #$08			ldx 	#8
.9db4					_M88Loop:
.9db4	90 03		bcc $9db9			bcc 	_M88NoAdd
.9db6	18		clc				clc
.9db7	65 37		adc $37				adc 	zTemp0+1
.9db9					_M88NoAdd:
.9db9	6a		ror a				ror 	a
.9dba	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9dbc	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9dbd	d0 f5		bne $9db4			bne 	_M88Loop
.9dbf	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dc2					NSMNegate:
.9dc2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dc5	49 80		eor #$80			eor 	#NSBIsNegative
.9dc7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dca	60		rts				rts
.9dcb					NSMNegateMantissa:
.9dcb	38		sec				sec
.9dcc	a9 00		lda #$00			lda 	#0
.9dce	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dd1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dd4	a9 00		lda #$00			lda 	#0
.9dd6	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dd9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ddc	a9 00		lda #$00			lda 	#0
.9dde	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9de1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9de4	a9 00		lda #$00			lda 	#0
.9de6	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9de9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dec	60		rts				rts
.9ded					NSMShiftUpTwo:
.9ded	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9df0	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9df3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9df6	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9df9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9dfc	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9dff	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e02	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e05	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e08	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e0b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e0e	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e11	60		rts				rts
.9e12					NSMSetZeroMantissaOnly:
.9e12	a9 00		lda #$00			lda 	#0
.9e14	80 08		bra $9e1e			bra 	NSMSetMantissa
.9e16					NSMSetZero:
.9e16	a9 00		lda #$00			lda 	#0
.9e18					NSMSetByte:
.9e18	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e1b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e1e					NSMSetMantissa:
.9e1e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e21	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e24	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e27	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e2a	60		rts				rts
.9e2b					NSMShiftLeft:
.9e2b	18		clc				clc
.9e2c					NSMRotateLeft:
.9e2c	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e2f	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e32	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e35	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e38	60		rts				rts
.9e39					NSMShiftRight:
.9e39	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e3c	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e3f	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e42	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e45	60		rts				rts
.9e46					NSMIsZero:
.9e46	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e49	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e4c	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e4f	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e52	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e53					Assemble_ora:
.9e53	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e56	01					.byte $01
.9e57					Assemble_and:
.9e57	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e5a	21					.byte $21
.9e5b					Assemble_eor:
.9e5b	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e5e	41					.byte $41
.9e5f					Assemble_adc:
.9e5f	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e62	61					.byte $61
.9e63					Assemble_sta:
.9e63	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e66	81					.byte $81
.9e67					Assemble_lda:
.9e67	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e6a	a1					.byte $a1
.9e6b					Assemble_cmp:
.9e6b	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e6e	c1					.byte $c1
.9e6f					Assemble_sbc:
.9e6f	20 84 80	jsr $8084		jsr	AssembleGroup1
>9e72	e1					.byte $e1
.9e73					Assemble_asl:
.9e73	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e76	02					.byte $02
>9e77	75					.byte $75
.9e78					Assemble_rol:
.9e78	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e7b	22					.byte $22
>9e7c	75					.byte $75
.9e7d					Assemble_lsr:
.9e7d	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e80	42					.byte $42
>9e81	75					.byte $75
.9e82					Assemble_ror:
.9e82	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e85	62					.byte $62
>9e86	75					.byte $75
.9e87					Assemble_stx:
.9e87	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e8a	82					.byte $82
>9e8b	50					.byte $50
.9e8c					Assemble_ldx:
.9e8c	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e8f	a2					.byte $a2
>9e90	d0					.byte $d0
.9e91					Assemble_dec:
.9e91	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e94	c2					.byte $c2
>9e95	55					.byte $55
.9e96					Assemble_inc:
.9e96	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e99	e2					.byte $e2
>9e9a	55					.byte $55
.9e9b					Assemble_stz:
.9e9b	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9e9e	60					.byte $60
>9e9f	44					.byte $44
.9ea0					Assemble_bit:
.9ea0	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ea3	20					.byte $20
>9ea4	55					.byte $55
.9ea5					Assemble_sty:
.9ea5	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ea8	80					.byte $80
>9ea9	54					.byte $54
.9eaa					Assemble_ldy:
.9eaa	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ead	a0					.byte $a0
>9eae	d5					.byte $d5
.9eaf					Assemble_cpy:
.9eaf	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eb2	c0					.byte $c0
>9eb3	d4					.byte $d4
.9eb4					Assemble_cpx:
.9eb4	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9eb7	e0					.byte $e0
>9eb8	d0					.byte $d0
.9eb9					Assemble_tsb:
.9eb9	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ebc	00					.byte $00
>9ebd	50					.byte $50
.9ebe					Assemble_trb:
.9ebe	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ec1	10					.byte $10
>9ec2	50					.byte $50
.9ec3					Assemble_jsr:
.9ec3	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ec6	14					.byte $14
>9ec7	10					.byte $10
.9ec8					Assemble_jmp:
.9ec8	20 8b 80	jsr $808b		jsr	AssembleGroup2
>9ecb	40					.byte $40
>9ecc	10					.byte $10
.9ecd					Assemble_bpl:
.9ecd	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ed0	10					.byte $10
.9ed1					Assemble_bmi:
.9ed1	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ed4	30					.byte $30
.9ed5					Assemble_bvc:
.9ed5	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ed8	50					.byte $50
.9ed9					Assemble_bvs:
.9ed9	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9edc	70					.byte $70
.9edd					Assemble_bcc:
.9edd	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ee0	90					.byte $90
.9ee1					Assemble_bcs:
.9ee1	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ee4	b0					.byte $b0
.9ee5					Assemble_bne:
.9ee5	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ee8	d0					.byte $d0
.9ee9					Assemble_beq:
.9ee9	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9eec	f0					.byte $f0
.9eed					Assemble_bra:
.9eed	20 dc 80	jsr $80dc		jsr	AssembleGroup3
>9ef0	80					.byte $80
.9ef1					Assemble_brk:
.9ef1	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ef4	00					.byte $00
.9ef5					Assemble_php:
.9ef5	20 12 81	jsr $8112		jsr	AssembleGroup4
>9ef8	08					.byte $08
.9ef9					Assemble_clc:
.9ef9	20 12 81	jsr $8112		jsr	AssembleGroup4
>9efc	18					.byte $18
.9efd					Assemble_plp:
.9efd	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f00	28					.byte $28
.9f01					Assemble_sec:
.9f01	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f04	38					.byte $38
.9f05					Assemble_rti:
.9f05	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f08	40					.byte $40
.9f09					Assemble_pha:
.9f09	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f0c	48					.byte $48
.9f0d					Assemble_cli:
.9f0d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f10	58					.byte $58
.9f11					Assemble_phy:
.9f11	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f14	5a					.byte $5a
.9f15					Assemble_rts:
.9f15	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f18	60					.byte $60
.9f19					Assemble_pla:
.9f19	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f1c	68					.byte $68
.9f1d					Assemble_sei:
.9f1d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f20	78					.byte $78
.9f21					Assemble_ply:
.9f21	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f24	7a					.byte $7a
.9f25					Assemble_dey:
.9f25	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f28	88					.byte $88
.9f29					Assemble_txa:
.9f29	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f2c	8a					.byte $8a
.9f2d					Assemble_tya:
.9f2d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f30	98					.byte $98
.9f31					Assemble_txs:
.9f31	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f34	9a					.byte $9a
.9f35					Assemble_tay:
.9f35	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f38	a8					.byte $a8
.9f39					Assemble_tax:
.9f39	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f3c	aa					.byte $aa
.9f3d					Assemble_clv:
.9f3d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f40	b8					.byte $b8
.9f41					Assemble_tsx:
.9f41	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f44	ba					.byte $ba
.9f45					Assemble_iny:
.9f45	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f48	c8					.byte $c8
.9f49					Assemble_dex:
.9f49	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f4c	ca					.byte $ca
.9f4d					Assemble_cld:
.9f4d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f50	d8					.byte $d8
.9f51					Assemble_phx:
.9f51	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f54	da					.byte $da
.9f55					Assemble_stp:
.9f55	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f58	db					.byte $db
.9f59					Assemble_inx:
.9f59	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f5c	e8					.byte $e8
.9f5d					Assemble_nop:
.9f5d	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f60	ea					.byte $ea
.9f61					Assemble_sed:
.9f61	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f64	f8					.byte $f8
.9f65					Assemble_plx:
.9f65	20 12 81	jsr $8112		jsr	AssembleGroup4
>9f68	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f69					DecimalScalarTable:
>9f69	66 66 66 66				.dword $66666666 ; 0.1
>9f6d	de					.byte $de
>9f6e	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f72	db					.byte $db
>9f73	4c 37 89 41				.dword $4189374c ; 0.001
>9f77	d8					.byte $d8
>9f78	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f7c	d4					.byte $d4
>9f7d	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f81	d1					.byte $d1
>9f82	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f86	ce					.byte $ce
>9f87	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f8b	ca					.byte $ca
>9f8c	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f90	c7					.byte $c7
>9f91	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f95	c4					.byte $c4
>9f96	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f9a	c0					.byte $c0
>9f9b	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f9f	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9fa0					SyntaxError:
.9fa0	a9 02		lda #$02		lda	#2
.9fa2	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.9fa5					RangeError:
.9fa5	a9 04		lda #$04		lda	#4
.9fa7	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.9faa					TypeError:
.9faa	a9 05		lda #$05		lda	#5
.9fac	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.9faf					ArgumentError:
.9faf	a9 07		lda #$07		lda	#7
.9fb1	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.9fb4					NotDoneError:
.9fb4	a9 0c		lda #$0c		lda	#12
.9fb6	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.9fb9					ErrorText:
>9fb9	42 72 65 61 6b 00			.text	"Break",0
>9fbf	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fc7	72 72 6f 72 00
>9fcc	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fd4	20 62 79 20 7a 65 72 6f 00
>9fdd	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fe5	61 6e 67 65 00
>9fea	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9ff2	6d 61 74 63 68 00
>9ff8	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a000	65 6d 6f 72 79 00
>a006	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a00e	61 72 67 75 6d 65 6e 74 00
>a017	53 74 6f 70 00				.text	"Stop",0
>a01c	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a024	6f 6f 20 6c 6f 6e 67 00
>a02c	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a034	6e 20 66 61 69 6c 65 64 00
>a03d	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a045	61 74 61 00
>a049	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a051	65 6e 74 65 64 00
>a057	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a05f	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a06b	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a073	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a080	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a088	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a095	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a09d	68 6f 75 74 20 57 68 69 6c 65 00
>a0a8	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0b0	68 6f 75 74 20 46 6f 72 00
>a0b9	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0c1	61 63 6b 20 66 75 6c 6c 00
>a0ca	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0d2	75 63 74 75 72 65 00
>a0d9	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0e1	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0ee	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0f6	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a104	41 72 72 61 79 20 73 69			.text	"Array size",0
>a10c	7a 65 00
>a10f	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a117	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a11f	42 75 69 6c 74 20 53 75			.text "Built Sunday 20-Nov-2022. Build 3251."
>a127	6e 64 61 79 20 32 30 2d 4e 6f 76 2d 32 30 32 32
>a137	2e 20 42 75 69 6c 64 20 33 32 35 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a144					MemoryDeleteLine:
.a144	20 63 a1	jsr $a163			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a147	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a149	a8		tay				tay
.a14a					_MDDLLoop:
.a14a	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a14c	92 30		sta ($30)			sta 	(codePtr)
.a14e	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a150	c5 3a		cmp $3a				cmp 	zTemp2
.a152	d0 07		bne $a15b			bne 	_MDLDLNext
.a154	a5 31		lda $31				lda 	codePtr+1
.a156	c5 3b		cmp $3b				cmp 	zTemp2+1
.a158	d0 01		bne $a15b			bne 	_MDLDLNext
.a15a					_MDDLExit:
.a15a	60		rts				rts
.a15b					_MDLDLNext:
.a15b	e6 30		inc $30				inc 	codePtr						; next byte
.a15d	d0 eb		bne $a14a			bne 	_MDDLLoop
.a15f	e6 31		inc $31				inc 	codePtr+1
.a161	80 e7		bra $a14a			bra 	_MDDLLoop
.a163					IMemoryFindEnd:
.a163	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a165	85 3a		sta $3a				sta 	0+zTemp2
.a167	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a169	85 3b		sta $3b				sta 	1+zTemp2
.a16b					_MDLFELoop:
.a16b	b2 3a		lda ($3a)			lda 	(zTemp2)
.a16d	f0 0b		beq $a17a			beq 	_MDLFEExit
.a16f	18		clc				clc
.a170	65 3a		adc $3a				adc 	zTemp2
.a172	85 3a		sta $3a				sta 	zTemp2
.a174	90 f5		bcc $a16b			bcc 	_MDLFELoop
.a176	e6 3b		inc $3b				inc 	zTemp2+1
.a178	80 f1		bra $a16b			bra 	_MDLFELoop
.a17a					_MDLFEExit:
.a17a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a17b					MemoryInsertLine:
.a17b	08		php				php
.a17c	20 63 a1	jsr $a163			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a17f	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a181	1a		inc a				inc 	a
.a182	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a184	b0 36		bcs $a1bc			bcs 	_MDLIError
.a186	28		plp				plp
.a187	90 08		bcc $a191			bcc 	_MDLIFound
.a189	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a18b	85 30		sta $30				sta 	codePtr
.a18d	a5 3b		lda $3b				lda 	zTemp2+1
.a18f	85 31		sta $31				sta 	codePtr+1
.a191					_MDLIFound:
.a191	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a194	a8		tay				tay
.a195					_MDLIInsert:
.a195	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a197	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a199	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a19b	c5 3a		cmp $3a				cmp 	zTemp2
.a19d	d0 06		bne $a1a5			bne 	_MDLINext
.a19f	a5 31		lda $31				lda 	codePtr+1
.a1a1	c5 3b		cmp $3b				cmp 	zTemp2+1
.a1a3	f0 0a		beq $a1af			beq 	_MDLIHaveSpace
.a1a5					_MDLINext:
.a1a5	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a1a7	d0 02		bne $a1ab			bne 	_MDLINoBorrow
.a1a9	c6 3b		dec $3b				dec 	zTemp2+1
.a1ab					_MDLINoBorrow:
.a1ab	c6 3a		dec $3a				dec 	zTemp2
.a1ad	80 e6		bra $a195			bra 	_MDLIInsert
.a1af					_MDLIHaveSpace:
.a1af	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a1b2	88		dey				dey 								; from offset-1 to 0
.a1b3					_MDLICopy:
.a1b3	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1b6	91 30		sta ($30),y			sta 	(codePtr),y
.a1b8	88		dey				dey
.a1b9	10 f8		bpl $a1b3			bpl 	_MDLICopy
.a1bb	60		rts				rts
.a1bc					_MDLIError:
.a1bc	a9 06		lda #$06		lda	#6
.a1be	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.a1c1					MDLAppendLine:
.a1c1	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1c3	85 36		sta $36				sta 	zTemp0
.a1c5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1c7	85 38		sta $38				sta 	0+zTemp1
.a1c9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1cb	85 39		sta $39				sta 	1+zTemp1
.a1cd	b2 38		lda ($38)			lda 	(zTemp1)
.a1cf	d0 0a		bne $a1db			bne 	_MDLANoInitialise
.a1d1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1d3	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1d6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1d8	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1db					_MDLANoInitialise:
.a1db	18		clc				clc
.a1dc	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1df	85 38		sta $38				sta 	zTemp1
.a1e1	72 36		adc ($36)			adc 	(zTemp0)
.a1e3	8d 2b 06	sta $062b			sta 	AppendPointer
.a1e6	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1e9	85 39		sta $39				sta 	zTemp1+1
.a1eb	69 00		adc #$00			adc 	#0
.a1ed	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1f0	a0 00		ldy #$00			ldy 	#0
.a1f2					_MDLACopy:
.a1f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1f4	91 38		sta ($38),y			sta 	(zTemp1),y
.a1f6	c8		iny				iny
.a1f7	98		tya				tya
.a1f8	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1fa	d0 f6		bne $a1f2			bne 	_MDLACopy
.a1fc	a9 00		lda #$00			lda 	#0 							; end of program.
.a1fe	91 38		sta ($38),y			sta 	(zTemp1),y
.a200	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a201					MemoryNew:
.a201	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a203	85 30		sta $30				sta 	codePtr
.a205	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a207	85 31		sta $31				sta 	codePtr+1
.a209	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a20b	92 30		sta ($30)			sta 	(codePtr)
.a20d	60		rts				rts
.a20e					MemoryInline:
.a20e	98		tya				tya 								; put address into stack,x
.a20f	18		clc				clc
.a210	65 30		adc $30				adc 	codePtr
.a212	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a215	a5 31		lda $31				lda 	codePtr+1
.a217	69 00		adc #$00			adc 	#0
.a219	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a21c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a21f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a222	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a223					MemorySearch:
.a223	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a225	86 37		stx $37				stx 	zTemp0+1
.a227	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a229	85 30		sta $30				sta 	codePtr
.a22b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a22d	85 31		sta $31				sta 	codePtr+1
.a22f					_MTAXLoop:
.a22f	b2 30		lda ($30)			lda 	(codePtr)
.a231	18		clc				clc
.a232	f0 21		beq $a255			beq 	_MTAXExit 					; reached end, exit with CC.
.a234	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a236	b1 30		lda ($30),y			lda 	(codePtr),y
.a238	38		sec				sec
.a239	e5 36		sbc $36				sbc 	zTemp0
.a23b	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a23d	c8		iny				iny 								; do the MSB
.a23e	b1 30		lda ($30),y			lda 	(codePtr),y
.a240	e5 37		sbc $37				sbc 	zTemp0+1
.a242	05 38		ora $38				ora 	zTemp1
.a244	f0 0f		beq $a255			beq 	_MTAXExit	 				; found
.a246	b0 0d		bcs $a255			bcs 	_MTAXExit 					; current < required exit
.a248	18		clc				clc
.a249	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a24b	65 30		adc $30				adc 	codePtr
.a24d	85 30		sta $30				sta 	codePtr
.a24f	90 02		bcc $a253			bcc 	_CREExit
.a251	e6 31		inc $31				inc 	codePtr+1
.a253					_CREExit:
.a253	80 da		bra $a22f			bra 	_MTAXLoop
.a255					_MTAXExit:
.a255	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcommand.asm

.a256					RectangleCommand:
.a256	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a258	80 02		bra $a25c			bra 	ShapeDrawCmd
.a25a					CircleCommand:
.a25a	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a25c					ShapeDrawCmd:
.a25c	20 ea a2	jsr $a2ea			jsr 	RunGraphicsCommand
.a25f					ShapeDraw:
.a25f	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a262	4c de a2	jmp $a2de			jmp 	ExecuteGraphicCommand	 	; and complete
.a265					SpriteCommand:
.a265	a2 00		ldx #$00			ldx 	#0
.a267	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get image number.
.a26a	5a		phy				phy
.a26b	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a26d	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a270	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a272	b0 0d		bcs $a281			bcs 	_SCRange
.a274	a0 ff		ldy #$ff			ldy 	#255
.a276	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a279	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a27b	7a		ply				ply
.a27c	20 ea a2	jsr $a2ea			jsr 	RunGraphicsCommand
.a27f	80 5d		bra $a2de			bra 	ExecuteGraphicCommand
.a281					_SCRange:
.a281	4c a5 9f	jmp $9fa5			jmp 	RangeError
.a284					ImageCommand:
.a284	a2 00		ldx #$00			ldx 	#0
.a286	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get image number.
.a289	20 ea a2	jsr $a2ea			jsr 	RunGraphicsCommand
.a28c					ImageRunDraw:
.a28c	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a28e	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a291	ad 34 06	lda $0634			lda 	gxDrawScale
.a294	0a		asl a				asl 	a
.a295	0a		asl a				asl 	a
.a296	0a		asl a				asl 	a
.a297	a8		tay				tay
.a298	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a29a	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a29d	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a2a0	60		rts				rts
.a2a1					TextCommand:
.a2a1	a2 00		ldx #$00			ldx 	#0
.a2a3	20 4a 9d	jsr $9d4a			jsr 	EvaluateString 				; get text
.a2a6	20 ea a2	jsr $a2ea			jsr 	RunGraphicsCommand
.a2a9					TextRunDraw:
.a2a9	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a2ab	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a2ae	a0 00		ldy #$00			ldy 	#0
.a2b0					_IRDLoop:
.a2b0	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a2b3	85 37		sta $37				sta 	zTemp0+1
.a2b5	ad 08 04	lda $0408			lda 	NSMantissa0
.a2b8	85 36		sta $36				sta 	zTemp0
.a2ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2bc	f0 13		beq $a2d1			beq 	_IRDExit
.a2be	5a		phy				phy									; save string pos
.a2bf	48		pha				pha 								; save char
.a2c0	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a2c3	0a		asl a				asl 	a
.a2c4	0a		asl a				asl 	a
.a2c5	0a		asl a				asl 	a
.a2c6	a8		tay				tay
.a2c7	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2c9	fa		plx				plx 								; char to draw
.a2ca	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a2cd	7a		ply				ply 								; restore string pos
.a2ce	c8		iny				iny
.a2cf	90 df		bcc $a2b0			bcc 	_IRDLoop 					; go back if no error.
.a2d1					_IRDExit:
.a2d1	60		rts				rts
.a2d2					PlotCommand:
.a2d2	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2d4	20 ea a2	jsr $a2ea			jsr 	RunGraphicsCommand
.a2d7	80 05		bra $a2de			bra 	ExecuteGraphicCommand
.a2d9					LineCommand:
.a2d9	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2db	20 ea a2	jsr $a2ea			jsr 	RunGraphicsCommand
.a2de					ExecuteGraphicCommand:
.a2de	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a2e1	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw 				; draw it and exit
.a2e4	b0 01		bcs $a2e7			bcs 	_EGCError
.a2e6	60		rts				rts
.a2e7					_EGCError:
.a2e7	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.a2ea					RunGraphicsCommand:
.a2ea	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a2ed	68		pla				pla 								; pop handler address
.a2ee	fa		plx				plx
.a2ef	1a		inc a				inc 	a
.a2f0	d0 01		bne $a2f3			bne 	_RGINoCarry
.a2f2	e8		inx				inx
.a2f3					_RGINoCarry:
.a2f3	8d 32 06	sta $0632			sta 	GXHandler
.a2f6	8e 33 06	stx $0633			stx 	GXHandler+1
.a2f9					_RGICommandLoop:
.a2f9	b1 30		lda ($30),y			lda 	(codePtr),y
.a2fb	c8		iny				iny
.a2fc	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a2fe	f0 53		beq $a353			beq 	_RGI_To
.a300	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a302	f0 55		beq $a359			beq 	_RGI_Here
.a304	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a306	f0 3d		beq $a345			beq 	_RGI_Exit
.a308	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a30a	f0 39		beq $a345			beq 	_RGI_Exit
.a30c	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a30e	f0 3e		beq $a34e			beq 	_RGI_Frame
.a310	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a312	f0 33		beq $a347			beq 	_RGI_Solid
.a314	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a316	f0 4b		beq $a363			beq 	_RGI_By
.a318	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a31a	f0 17		beq $a333			beq 	_RGI_Move2
.a31c	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a31e	f0 65		beq $a385			beq 	_RGI_Dim
.a320	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a322	f0 78		beq $a39c			beq 	_RGI_Colour
.a324	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a326	f0 74		beq $a39c			beq 	_RGI_Colour
.a328	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a32b	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a32d	d0 03		bne $a332			bne 	_RGI_Move 					; move
.a32f	4c c6 a3	jmp $a3c6			jmp		_RGI_SpriteInstructions
.a332					_RGI_Move:
.a332	88		dey				dey 								; unpick get.
.a333					_RGI_Move2:
.a333	20 ec a3	jsr $a3ec			jsr 	GCGetCoordinatePair 		; move to here
.a336	20 13 a4	jsr $a413			jsr 	GCCopyPairToStore 			; save
.a339	5a		phy				phy
.a33a	20 09 a4	jsr $a409			jsr 	GCLoadAXY 					; load in
.a33d	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a33f	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a342	7a		ply				ply
.a343	80 b4		bra $a2f9			bra 	_RGICommandLoop 			; and go round
.a345					_RGI_Exit:
.a345	88		dey				dey 								; unpick : / EOL
.a346	60		rts				rts
.a347					_RGI_Solid:
.a347	a9 02		lda #$02			lda 	#2
.a349	8d 2e 06	sta $062e			sta 	gxFillSolid
.a34c	80 ab		bra $a2f9			bra 	_RGICommandLoop
.a34e					_RGI_Frame:
.a34e	9c 2e 06	stz $062e			stz 	gxFillSolid
.a351	80 a6		bra $a2f9			bra 	_RGICommandLoop
.a353					_RGI_To:
.a353	20 ec a3	jsr $a3ec			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a356	20 13 a4	jsr $a413			jsr 	GCCopyPairToStore
.a359					_RGI_Here:
.a359	5a		phy				phy
.a35a	20 09 a4	jsr $a409			jsr 	GCLoadAXY 					; load it into AXY
.a35d	20 c3 a3	jsr $a3c3			jsr 	_RGICallHandler 			; go do whatever it is.
.a360	7a		ply				ply
.a361	80 96		bra $a2f9			bra 	_RGICommandLoop 			; and go round
.a363					_RGI_By:
.a363	20 f9 a3	jsr $a3f9			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a366	18		clc				clc
.a367	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a36a	6d 2f 06	adc $062f			adc 	gxxPos
.a36d	8d 2f 06	sta $062f			sta 	gxXPos
.a370	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a373	6d 30 06	adc $0630			adc 	gxxPos+1
.a376	8d 30 06	sta $0630			sta 	gxXPos+1
.a379	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a37c	18		clc				clc
.a37d	6d 31 06	adc $0631			adc 	gxYPos
.a380	8d 31 06	sta $0631			sta 	gxYPos
.a383	80 d4		bra $a359			bra 	_RGI_Here
.a385					_RGI_Dim:
.a385	a2 01		ldx #$01			ldx	 	#1
.a387	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger
.a38a	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a38d	c9 00		cmp #$00			cmp 	#0
.a38f	f0 2f		beq $a3c0			beq 	_RGIRange
.a391	c9 09		cmp #$09			cmp 	#8+1
.a393	b0 2b		bcs $a3c0			bcs		_RGIRange
.a395	3a		dec a				dec 	a
.a396	8d 34 06	sta $0634			sta 	gxDrawScale
.a399	4c f9 a2	jmp $a2f9			jmp 	_RGICommandLoop
.a39c					_RGI_Colour:
.a39c	a2 01		ldx #$01			ldx 	#1 							; colour
.a39e	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger
.a3a1	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a3a3	20 16 9e	jsr $9e16			jsr 	NSMSetZero
.a3a6	b1 30		lda ($30),y			lda 	(codePtr),y
.a3a8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a3aa	d0 04		bne $a3b0			bne 	_RGICDefaultMode
.a3ac	c8		iny				iny
.a3ad	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger
.a3b0					_RGICDefaultMode:
.a3b0	5a		phy				phy
.a3b1	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a3b3	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a3b6	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a3b9	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a3bc	7a		ply				ply
.a3bd	4c f9 a2	jmp $a2f9			jmp 	_RGICommandLoop 			; and go round
.a3c0					_RGIRange:
.a3c0	4c a5 9f	jmp $9fa5			jmp 	RangeError
.a3c3					_RGICallHandler:
.a3c3	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a3c6					_RGI_SpriteInstructions:
.a3c6	c9 be		cmp #$be			cmp 	#KWD_OFF
.a3c8	f0 07		beq $a3d1			beq 	_RGISpriteOff
.a3ca	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a3cc	f0 13		beq $a3e1			beq 	_RGISetImage
.a3ce	4c 32 a3	jmp $a332			jmp 	_RGI_Move
.a3d1					_RGISpriteOff:
.a3d1	5a		phy				phy
.a3d2	a0 01		ldy #$01			ldy 	#1
.a3d4	a2 00		ldx #$00			ldx 	#0
.a3d6					_RGIDoCommandLoop:
.a3d6	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3d8	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a3db	7a		ply				ply
.a3dc	b0 e2		bcs $a3c0			bcs 	_RGIRange
.a3de	4c f9 a2	jmp $a2f9			jmp 	_RGICommandLoop
.a3e1					_RGISetImage:
.a3e1	a2 01		ldx #$01			ldx 	#1
.a3e3	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger
.a3e6	5a		phy				phy
.a3e7	aa		tax				tax
.a3e8	a0 00		ldy #$00			ldy 	#0
.a3ea	80 ea		bra $a3d6			bra 	_RGIDoCommandLoop
.a3ec					GCGetCoordinatePair:
.a3ec	a2 01		ldx #$01			ldx 	#1
.a3ee	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.a3f1	20 42 8d	jsr $8d42			jsr 	CheckComma
.a3f4	e8		inx				inx
.a3f5	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.a3f8	60		rts				rts
.a3f9					GCSignedCoordinatePair:
.a3f9	a2 01		ldx #$01			ldx 	#1
.a3fb	20 83 9d	jsr $9d83			jsr 	Evaluate16BitIntegerSigned
.a3fe	20 42 8d	jsr $8d42			jsr 	CheckComma
.a401	e8		inx				inx
.a402	20 83 9d	jsr $9d83			jsr 	Evaluate16BitIntegerSigned
.a405	60		rts				rts
.a406					_GCCPRange:
.a406	4c a5 9f	jmp $9fa5			jmp 	RangeError
.a409					GCLoadAXY:
.a409	ad 30 06	lda $0630			lda 	gxXPos+1
.a40c	ae 2f 06	ldx $062f			ldx 	gxXPos
.a40f	ac 31 06	ldy $0631			ldy 	gxYPos
.a412	60		rts				rts
.a413					GCCopyPairToStore:
.a413	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a416	8d 2f 06	sta $062f			sta 	gxXPos
.a419	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a41c	8d 30 06	sta $0630			sta 	gxXPos+1
.a41f	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a422	8d 31 06	sta $0631			sta 	gxYPos
.a425	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcontrol.asm

.a426					BitmapCtrl:
.a426	b1 30		lda ($30),y			lda 	(codePtr),y
.a428	c8		iny				iny
.a429	a2 01		ldx #$01			ldx 	#1
.a42b	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a42d	f0 11		beq $a440			beq 	BitmapSwitch
.a42f	ca		dex				dex
.a430	c9 be		cmp #$be			cmp 	#KWD_OFF
.a432	f0 0c		beq $a440			beq 	BitmapSwitch
.a434	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get the colour
.a437	5a		phy				phy
.a438	aa		tax				tax
.a439	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a43b	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a43e	7a		ply				ply
.a43f	60		rts				rts
.a440					BitmapSwitch:
.a440	5a		phy				phy
.a441	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a443	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a445	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a448	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a44a	a0 00		ldy #$00			ldy 	#0
.a44c	a2 ff		ldx #$ff			ldx 	#$FF
.a44e	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a451	9c 2e 06	stz $062e			stz 	gxFillSolid
.a454	9c 2f 06	stz $062f			stz 	gxXPos
.a457	9c 30 06	stz $0630			stz 	gxXPos+1
.a45a	9c 31 06	stz $0631			stz 	gxYPos
.a45d	9c 34 06	stz $0634			stz 	gxDrawScale
.a460	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a462	a2 00		ldx #$00			ldx 	#0
.a464	a0 00		ldy #$00			ldy 	#0
.a466	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a469	7a		ply				ply
.a46a	60		rts				rts
.a46b					SpritesCtrl:
.a46b	b1 30		lda ($30),y			lda 	(codePtr),y
.a46d	c8		iny				iny
.a46e	a2 01		ldx #$01			ldx 	#1
.a470	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a472	f0 08		beq $a47c			beq 	SpriteSwitch
.a474	ca		dex				dex
.a475	c9 be		cmp #$be			cmp 	#KWD_OFF
.a477	f0 03		beq $a47c			beq 	SpriteSwitch
.a479	4c a0 9f	jmp $9fa0			jmp 	SyntaxError
.a47c					SpriteSwitch:
.a47c	5a		phy				phy
.a47d	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a47f	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a481	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a484	7a		ply				ply
.a485	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gfx.asm

.a486					GfxCommand:
.a486	a2 00		ldx #$00			ldx 	#0
.a488	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; command
.a48b	20 42 8d	jsr $8d42			jsr 	CheckComma
.a48e	e8		inx				inx
.a48f	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger 		; X
.a492	20 42 8d	jsr $8d42			jsr 	CheckComma
.a495	e8		inx				inx
.a496	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; Y
.a499	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a49c	4a		lsr a				lsr 	a
.a49d	d0 16		bne $a4b5			bne 	_GfxError
.a49f	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a4a2	b0 11		bcs $a4b5			bcs 	_GfxError 					; bit 7 should have been zero
.a4a4	5a		phy				phy 								; save pos
.a4a5	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a4a8	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a4ab	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a4ae	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw
.a4b1	b0 02		bcs $a4b5			bcs 	_GfxError
.a4b3	7a		ply				ply 								; restore pos and exit.
.a4b4	60		rts				rts
.a4b5					_GfxError:
.a4b5	4c a5 9f	jmp $9fa5			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/hit.asm

.a4b8					UnaryHit:
.a4b8	fa		plx				plx
.a4b9	a9 36		lda #$36			lda 	#zTemp0
.a4bb	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4be	20 42 8d	jsr $8d42			jsr 	CheckComma
.a4c1	e8		inx				inx
.a4c2	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4c5	20 3a 8d	jsr $8d3a			jsr		CheckRightBracket
.a4c8	ca		dex				dex 								; fix back up again.
.a4c9	da		phx				phx 								; save X/Y
.a4ca	5a		phy				phy
.a4cb	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4ce	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4d1	aa		tax				tax
.a4d2	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4d4	20 30 aa	jsr $aa30			jsr 	GXGraphicDraw 				; calculate result
.a4d7	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4d8	7a		ply				ply 								; restore XY
.a4d9	fa		plx				plx
.a4da	20 18 9e	jsr $9e18			jsr 	NSMSetByte 					; return the hit result
.a4dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/palette.asm

.a4de					PaletteCommand:
.a4de	a2 00		ldx #$00			ldx 	#0
.a4e0	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; colour
.a4e3	20 42 8d	jsr $8d42			jsr 	CheckComma
.a4e6	e8		inx				inx
.a4e7	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger 		; r
.a4ea	20 42 8d	jsr $8d42			jsr 	CheckComma
.a4ed	e8		inx				inx
.a4ee	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; g
.a4f1	20 42 8d	jsr $8d42			jsr 	CheckComma
.a4f4	e8		inx				inx
.a4f5	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; b
.a4f8	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a4fb	85 36		sta $36				sta 	zTemp0
.a4fd	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a4ff	85 37		sta $37				sta 	zTemp0+1
.a501	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a503	26 37		rol $37				rol	 	zTemp0+1
.a505	06 36		asl $36				asl 	zTemp0
.a507	26 37		rol $37				rol	 	zTemp0+1
.a509	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a50b	85 01		sta $01				sta 	1
.a50d	5a		phy				phy
.a50e	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a511	92 36		sta ($36)			sta 	(zTemp0)
.a513	a0 01		ldy #$01			ldy 	#1
.a515	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a518	91 36		sta ($36),y			sta 	(zTemp0),y
.a51a	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a51d	c8		iny				iny
.a51e	91 36		sta ($36),y			sta 	(zTemp0),y
.a520	7a		ply				ply
.a521	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/event.asm

.a522					UnaryEvent:
.a522	fa		plx				plx
.a523	20 ca a5	jsr $a5ca			jsr 	TimerToStackX 				; timer in +0
.a526	e8		inx				inx  								; put reference into +1
.a527	20 dc 97	jsr $97dc			jsr 	EvaluateTerm
.a52a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a52d	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a52f	d0 57		bne $a588			bne 	_UEType
.a531	e8		inx				inx 								; put the step in +2
.a532	20 42 8d	jsr $8d42			jsr 	CheckComma
.a535	20 77 9d	jsr $9d77			jsr 	Evaluate16BitInteger
.a538	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.a53b	ca		dex				dex
.a53c	ca		dex				dex
.a53d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a540	85 36		sta $36				sta 	zTemp0
.a542	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a545	85 37		sta $37				sta 	zTemp0+1
.a547	5a		phy				phy
.a548	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a54a	b1 36		lda ($36),y			lda 	(zTemp0),y
.a54c	30 36		bmi $a584			bmi 	_UEFalse 					; exit if signed.
.a54e	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a550	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a553	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a555	c8		iny				iny
.a556	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a559	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a55b	c8		iny				iny
.a55c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a55f	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a561	90 21		bcc $a584			bcc 	_UEFalse 					; no, return FALSE.
.a563	18		clc				clc
.a564	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a566	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a569	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a56c	91 36		sta ($36),y			sta 	(zTemp0),y
.a56e	c8		iny				iny
.a56f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a572	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a575	91 36		sta ($36),y			sta 	(zTemp0),y
.a577	c8		iny				iny
.a578	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a57b	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a57e	91 36		sta ($36),y			sta 	(zTemp0),y
.a580	7a		ply				ply
.a581	4c c0 8d	jmp $8dc0			jmp 	ReturnTrue
.a584					_UEFalse:
.a584	7a		ply				ply 								; restore Y
.a585	4c cc 8d	jmp $8dcc			jmp 	ReturnFalse 				; and return False
.a588					_UEType:
.a588	4c aa 9f	jmp $9faa			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/joy.asm

.a58b					UnaryJoyX:
.a58b	18		clc				clc
.a58c	80 01		bra $a58f			bra 	JoyMain
.a58e					UnaryJoyY:
.a58e	38		sec				sec
.a58f					JoyMain:
.a58f	fa		plx				plx 								; get pos
.a590	08		php				php 								; save carry (set for Y)
.a591	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a594	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.a597	20 e9 a9	jsr $a9e9			jsr 	EXTReadController 			; read the controller.
.a59a	28		plp				plp
.a59b	90 02		bcc $a59f			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a59d	4a		lsr a				lsr 	a
.a59e	4a		lsr a				lsr 	a
.a59f					_JMNoShift:
.a59f	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a5a0	b0 0a		bcs $a5ac			bcs 	_JMIsRight
.a5a2	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a5a3	b0 04		bcs $a5a9			bcs 	_JMIsLeft
.a5a5	20 16 9e	jsr $9e16			jsr 	NSMSetZero 					; zero result
.a5a8	60		rts				rts
.a5a9					_JMIsLeft:
.a5a9	4c c0 8d	jmp $8dc0			jmp 	ReturnTrue
.a5ac					_JMIsRight:
.a5ac	a9 01		lda #$01			lda 	#1
.a5ae	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.a5b1	60		rts				rts
.a5b2					UnaryJoyB:
.a5b2	fa		plx				plx 								; get pos
.a5b3	20 97 9d	jsr $9d97			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5b6	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.a5b9	20 e9 a9	jsr $a9e9			jsr 	EXTReadController 			; read the controller.
.a5bc	4a		lsr a				lsr 	a
.a5bd	4a		lsr a				lsr 	a
.a5be	4a		lsr a				lsr 	a
.a5bf	4a		lsr a				lsr 	a
.a5c0	29 01		and #$01			and 	#1
.a5c2	20 18 9e	jsr $9e18			jsr 	NSMSetByte
.a5c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/others/timer.asm

.a5c6					UnaryTimer:
.a5c6	fa		plx				plx
.a5c7	20 3a 8d	jsr $8d3a			jsr 	CheckRightBracket
.a5ca					TimerToStackX:
.a5ca	20 16 9e	jsr $9e16			jsr 	NSMSetZero 					; zero result
.a5cd	64 01		stz $01				stz 	1 							; access I/O
.a5cf	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5d2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5d5	ad 5a d6	lda $d65a			lda 	$D65A
.a5d8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5db	ad 5b d6	lda $d65b			lda 	$D65B
.a5de	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5e2					StackPushByte:
.a5e2	48		pha				pha 								; save byte
.a5e3	a5 34		lda $34				lda 	BasicStack
.a5e5	d0 09		bne $a5f0			bne 	_SPBNoBorrow
.a5e7	c6 35		dec $35				dec 	BasicStack+1
.a5e9	48		pha				pha
.a5ea	a5 35		lda $35				lda 	BasicStack+1
.a5ec	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5ee	90 06		bcc $a5f6			bcc 	_SPBMemory
.a5f0					_SPBNoBorrow:
.a5f0	c6 34		dec $34				dec 	BasicStack
.a5f2	68		pla				pla 								; get back and write
.a5f3	92 34		sta ($34)			sta 	(BasicStack)
.a5f5	60		rts				rts
.a5f6					_SPBMemory:
.a5f6	a9 12		lda #$12		lda	#18
.a5f8	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.a5fb					StackPopByte:
.a5fb	b2 34		lda ($34)			lda 	(BasicStack)
.a5fd	e6 34		inc $34				inc 	BasicStack
.a5ff	d0 02		bne $a603			bne 	_SPBNoCarry
.a601	e6 35		inc $35				inc 	BasicStack+1
.a603					_SPBNoCarry:
.a603	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a604					StackOpen:
.a604	48		pha				pha 								; save frame byte
.a605	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a607	0a		asl a				asl 	a 							; claim twice this for storage
.a608	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a60a	38		sec				sec 								; so basically subtracting from
.a60b	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a60d	85 34		sta $34				sta 	basicStack
.a60f	b0 08		bcs $a619			bcs 	_SONoBorrow
.a611	c6 35		dec $35				dec 	basicStack+1
.a613	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a615	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a617	90 04		bcc $a61d			bcc 	_SOMemory
.a619					_SONoBorrow:
.a619	68		pla				pla 								; get marker back and write at TOS
.a61a	92 34		sta ($34)			sta 	(basicStack)
.a61c	60		rts				rts
.a61d					_SOMemory:
.a61d	a9 12		lda #$12		lda	#18
.a61f	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.a622					StackClose:
.a622	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a624	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a626	0a		asl a				asl 	a 							; claim twice this.
.a627	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a629	85 34		sta $34				sta 	basicStack
.a62b	90 02		bcc $a62f			bcc 	_SCExit
.a62d	e6 35		inc $35				inc 	basicStack+1
.a62f					_SCExit:
.a62f	60		rts				rts
.a630					StackCheckFrame:
.a630	48		pha				pha
.a631					_StackRemoveLocals:
.a631	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a633	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a635	b0 05		bcs $a63c			bcs 	_SCNoLocal
.a637	20 03 88	jsr $8803			jsr 	LocalPopValue
.a63a	80 f5		bra $a631			bra 	_StackRemoveLocals
.a63c					_SCNoLocal:
.a63c	68		pla				pla
.a63d	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a63f	29 f0		and #$f0			and 	#$F0 						; check type bits
.a641	d0 01		bne $a644			bne 	_SCFError 					; different, we have structures mixed up
.a643	60		rts				rts
.a644					_SCFError:
.a644	8a		txa				txa 								; report error X
.a645	4c 53 8d	jmp $8d53			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a648					STKSaveCodePosition:
.a648	5a		phy				phy
.a649	98		tya				tya 								; save Y
.a64a	a0 05		ldy #$05			ldy 	#5
.a64c	91 34		sta ($34),y			sta 	(basicStack),y
.a64e	88		dey				dey 								; save Code Pointer
.a64f					_STKSaveLoop:
.a64f	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a652	91 34		sta ($34),y			sta 	(basicStack),y
.a654	88		dey				dey
.a655	d0 f8		bne $a64f			bne 	_STKSaveLoop
.a657	7a		ply				ply
.a658	60		rts				rts
.a659					STKLoadCodePosition:
.a659	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a65b					_STKLoadLoop:
.a65b	b1 34		lda ($34),y			lda 	(basicStack),y
.a65d	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a660	c8		iny				iny
.a661	c0 05		cpy #$05			cpy 	#5
.a663	d0 f6		bne $a65b			bne 	_STKLoadLoop
.a665	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a667	a8		tay				tay
.a668	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a669					StackReset:
.a669	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a66b	85 34		sta $34				sta 	0+basicStack
.a66d	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a66f	85 35		sta $35				sta 	1+basicStack
.a671	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a673	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a675	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a676					StringConcrete:
.a676	5a		phy				phy 								; save position on stack
.a677	20 df 99	jsr $99df			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a67a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a67d	85 38		sta $38				sta 	zTemp1
.a67f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a682	85 39		sta $39				sta 	zTemp1+1
.a684	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a686					_SALength:
.a686	c8		iny				iny
.a687	b1 38		lda ($38),y			lda 	(zTemp1),y
.a689	d0 fb		bne $a686			bne 	_SALength
.a68b	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a68d	b0 3f		bcs $a6ce			bcs 	_SALengthError
.a68f	98		tya				tya 				 				; length of the new string
.a690	18		clc				clc
.a691	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a693	90 02		bcc $a697			bcc 	_SAHaveLength
.a695	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a697					_SAHaveLength:
.a697	48		pha				pha 								; save length.
.a698	38		sec				sec
.a699	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a69b	6d 8e 04	adc $048e			adc 	StringMemory
.a69e	8d 8e 04	sta $048e			sta 	StringMemory
.a6a1	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a6a3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a6a6	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a6a8	6d 8f 04	adc $048f			adc 	StringMemory+1
.a6ab	8d 8f 04	sta $048f			sta 	StringMemory+1
.a6ae	85 3b		sta $3b				sta 	zTemp2+1
.a6b0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6b3	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a6b4	38		sec				sec
.a6b5	e9 03		sbc #$03			sbc 	#3
.a6b7	92 3a		sta ($3a)			sta 	(zTemp2)
.a6b9	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a6bb	a0 01		ldy #$01			ldy 	#1
.a6bd	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6bf					_SACopyNewString:
.a6bf	a0 00		ldy #$00			ldy 	#0
.a6c1					_SACopyNSLoop:
.a6c1	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a6c3	c8		iny				iny 								; write two on in string storage
.a6c4	c8		iny				iny
.a6c5	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6c7	88		dey				dey 								; this makes it one one.
.a6c8	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a6ca	d0 f5		bne $a6c1			bne 	_SACopyNSLoop
.a6cc	7a		ply				ply
.a6cd	60		rts				rts
.a6ce					_SALengthError:
.a6ce	a9 09		lda #$09		lda	#9
.a6d0	4c 53 8d	jmp $8d53		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a6d3					StringSystemInitialise:
.a6d3	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a6d5	8d 8e 04	sta $048e			sta 	0+StringMemory
.a6d8	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a6da	8d 8f 04	sta $048f			sta 	1+StringMemory
.a6dd	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a6e0	60		rts				rts
.a6e1					StringSpaceInitialise:
.a6e1	20 df 99	jsr $99df			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6e4	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a6e6	8d 90 04	sta $0490			sta 	StringInitialised
.a6e9	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a6ec	8d 91 04	sta $0491			sta 	StringTempPointer
.a6ef	ad 8f 04	lda $048f			lda 	StringMemory+1
.a6f2	3a		dec a				dec 	a
.a6f3	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a6f6	60		rts				rts
.a6f7					StringTempAllocate:
.a6f7	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a6f9	b0 35		bcs $a730			bcs 	_STALength
.a6fb	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a6fe	30 05		bmi $a705			bmi 	_STAAllocate
.a700	48		pha				pha 								; save value to subtract.
.a701	20 e1 a6	jsr $a6e1			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a704	68		pla				pla 								; restore it
.a705					_STAAllocate:
.a705	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a707	18		clc				clc  								; deliberate allows one more
.a708	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a70b	8d 91 04	sta $0491			sta 	StringTempPointer
.a70e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a711	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a713	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a716	69 ff		adc #$ff			adc 	#$FF
.a718	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a71b	85 3d		sta $3d				sta 	zsTemp+1
.a71d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a720	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a723	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a726	a9 10		lda #$10			lda 	#NSTString
.a728	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a72b	a9 00		lda #$00			lda 	#0 							; clear the target string
.a72d	92 3c		sta ($3c)			sta 	(zsTemp)
.a72f	60		rts				rts
.a730					_STALength:
.a730	a9 09		lda #$09		lda	#9
.a732	4c 53 8d	jmp $8d53		jmp	ErrorHandler
.a735					StringTempWrite:
.a735	48		pha				pha
.a736	92 3c		sta ($3c)			sta 	(zsTemp)
.a738	e6 3c		inc $3c				inc 	zsTemp
.a73a	d0 02		bne $a73e			bne 	_STWNoCarry
.a73c	e6 3d		inc $3d				inc 	zsTemp+1
.a73e					_STWNoCarry:
.a73e	a9 00		lda #$00			lda 	#0
.a740	92 3c		sta ($3c)			sta 	(zsTemp)
.a742	68		pla				pla
.a743	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=10					CLIIdentifier = CONYellowGreen
=7					CLIPunctuation = CONYellow
=1					CLIData = CONWhite
.a744					EXTPrintCharacter:
.a744	48		pha				pha
.a745	da		phx				phx
.a746	5a		phy				phy
.a747	a6 01		ldx $01				ldx 	1
.a749	da		phx				phx
.a74a	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a74d	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a74f	30 48		bmi $a799			bmi 	_EXPCColour
.a751	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a753	90 4d		bcc $a7a2			bcc 	_EXPCControl
.a755	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a757	86 01		stx $01				stx 	1
.a759	91 40		sta ($40),y			sta 	(EXTAddress),y
.a75b	e6 01		inc $01				inc 	1 							; select colour memory
.a75d	ad 37 06	lda $0637			lda 	EXTTextColour
.a760	91 40		sta ($40),y			sta 	(EXTAddress),y
.a762	c8		iny				iny 								; advance horizontal position
.a763	8c 36 06	sty $0636			sty 	EXTColumn
.a766	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a769	90 66		bcc $a7d1			bcc 	_EXPCExit 					; no, then exit.
.a76b					_EXPCCRLF:
.a76b	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a76e	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a771	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a774	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a777	f0 18		beq $a791			beq 	_EXPCScroll
.a779	18		clc				clc 								; add width to address.
.a77a	a5 40		lda $40				lda 	EXTAddress
.a77c	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a77f	85 40		sta $40				sta 	EXTAddress
.a781	90 4e		bcc $a7d1			bcc 	_EXPCExit
.a783	e6 41		inc $41				inc 	EXTAddress+1
.a785	80 4a		bra $a7d1			bra 	_EXPCExit
.a787					_EXPCLeft:
.a787	ce 36 06	dec $0636			dec 	EXTColumn
.a78a	10 45		bpl $a7d1			bpl 	_EXPCExit
.a78c					_EXPCBegin:
.a78c	9c 36 06	stz $0636			stz 	EXTColumn
.a78f	80 40		bra $a7d1			bra 	_EXPCExit
.a791					_EXPCScroll:
.a791	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a794	20 5e a8	jsr $a85e			jsr 	EXTScreenScroll 			; scroll the screen
.a797	80 38		bra $a7d1			bra 	_EXPCExit
.a799					_EXPCColour:
.a799	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a79b	b0 34		bcs $a7d1			bcs 	_EXPCExit
.a79d	20 3e a8	jsr $a83e			jsr 	_EXPCHandleColour
.a7a0	80 2f		bra $a7d1			bra 	_EXPCExit
.a7a2					_EXPCControl:
.a7a2	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a7a4	b0 2b		bcs $a7d1			bcs 	_EXPCExit
.a7a6	0a		asl a				asl 	a 							; double into X
.a7a7	aa		tax				tax
.a7a8	7c 1c a8	jmp ($a81c,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a7ab					_EXPCUp:
.a7ab	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a7ae	f0 21		beq $a7d1			beq 	_EXPCExit
.a7b0	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a7b3	38		sec				sec
.a7b4	a5 40		lda $40				lda 	EXTAddress
.a7b6	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a7b9	85 40		sta $40				sta 	EXTAddress
.a7bb	b0 14		bcs $a7d1			bcs 	_EXPCExit
.a7bd	c6 41		dec $41				dec 	EXTAddress+1
.a7bf	80 10		bra $a7d1			bra 	_EXPCExit
.a7c1					_EXPCRight:
.a7c1	c8		iny				iny
.a7c2	8c 36 06	sty $0636			sty 	EXTColumn
.a7c5	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7c8	d0 07		bne $a7d1			bne 	_EXPCExit
.a7ca					_EXPCEnd:
.a7ca	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7cd	3a		dec a				dec 	a
.a7ce	8d 36 06	sta $0636			sta 	EXTColumn
.a7d1					_EXPCExit:
.a7d1	20 b3 a8	jsr $a8b3			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7d4	68		pla				pla
.a7d5	85 01		sta $01				sta 	1
.a7d7	7a		ply				ply
.a7d8	fa		plx				plx
.a7d9	68		pla				pla
.a7da	60		rts				rts
.a7db					_EXPCClearScreen:
.a7db	20 70 a8	jsr $a870			jsr		EXTClearScreenCode
.a7de	80 f1		bra $a7d1			bra 	_EXPCExit
.a7e0					_EXPCDown:
.a7e0	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7e3	3a		dec a				dec 	a
.a7e4	cd 35 06	cmp $0635			cmp 	EXTRow
.a7e7	f0 e8		beq $a7d1			beq 	_EXPCExit
.a7e9	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7ec	18		clc				clc
.a7ed	a5 40		lda $40				lda 	EXTAddress
.a7ef	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7f2	85 40		sta $40				sta 	EXTAddress
.a7f4	90 db		bcc $a7d1			bcc 	_EXPCExit
.a7f6	e6 41		inc $41				inc 	EXTAddress+1
.a7f8	80 d7		bra $a7d1			bra 	_EXPCExit
.a7fa					_EXPCTab:
.a7fa	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a7fd	29 f8		and #$f8			and 	#$F8
.a7ff	18		clc				clc
.a800	69 08		adc #$08			adc 	#8
.a802	8d 36 06	sta $0636			sta 	EXTColumn
.a805	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a808	90 c7		bcc $a7d1			bcc 	_EXPCExit
.a80a	80 be		bra $a7ca			bra 	_EXPCEnd
.a80c					_EXPCBackSpace:
.a80c	88		dey				dey
.a80d	30 c2		bmi $a7d1			bmi 	_EXPCExit
.a80f	ce 36 06	dec $0636			dec 	EXTColumn
.a812	a9 02		lda #$02			lda 	#2
.a814	85 01		sta $01				sta 	1
.a816	a9 20		lda #$20			lda 	#32
.a818	91 40		sta ($40),y			sta 	(EXTAddress),y
.a81a	80 b5		bra $a7d1			bra 	_EXPCExit
.a81c					_EXPCActionTable:
>a81c	d1 a7						.word 	_EXPCExit 					; 00
>a81e	8c a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a820	87 a7						.word 	_EXPCLeft 					; 02 B Left
>a822	d1 a7						.word 	_EXPCExit 					; 03 <Break>
>a824	d1 a7						.word 	_EXPCExit 					; 04
>a826	ca a7						.word 	_EXPCEnd 					; 05 E End of Line
>a828	c1 a7						.word 	_EXPCRight 					; 06 F Right
>a82a	d1 a7						.word 	_EXPCExit 					; 07
>a82c	0c a8						.word 	_EXPCBackspace 				; 08 H Backspace
>a82e	fa a7						.word 	_EXPCTab 					; 09 I Tab
>a830	d1 a7						.word 	_EXPCExit 					; 0A
>a832	d1 a7						.word 	_EXPCExit 					; 0B
>a834	db a7						.word 	_EXPCClearScreen			; 0C L CLS
>a836	6b a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a838	e0 a7						.word 	_EXPCDown 					; 0E N Down
>a83a	d1 a7						.word 	_EXPCExit 					; 0F
>a83c	ab a7						.word 	_EXPCUp 					; 10 P Up
.a83e					_EXPCHandleColour
.a83e	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a840	b0 16		bcs $a858			bcs 	_EXPCBackground
.a842	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a843	0a		asl a				asl 	a
.a844	0a		asl a				asl 	a
.a845	0a		asl a				asl 	a
.a846	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a848					_EXPCUpdate:
.a848	48		pha				pha 								; save new colour
.a849	8a		txa				txa 								; get mask
.a84a	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a84d	8d 37 06	sta $0637			sta 	EXTTextColour
.a850	68		pla				pla 								; or in new colour
.a851	0d 37 06	ora $0637			ora 	EXTTextColour
.a854	8d 37 06	sta $0637			sta 	EXTTextColour
.a857	60		rts				rts
.a858					_EXPCBackground:
.a858	29 0f		and #$0f			and 	#$0F 						; get the colour
.a85a	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a85c	80 ea		bra $a848			bra 	_EXPCUpdate
.a85e					EXTScreenScroll:
.a85e	a9 02		lda #$02			lda 	#2 							; select text page
.a860	85 01		sta $01				sta 	1
.a862	a9 20		lda #$20			lda		#32 						; fill with space
.a864	20 73 a9	jsr $a973			jsr 	EXTScrollFill
.a867	e6 01		inc $01				inc 	1 							; select colour page
.a869	ad 37 06	lda $0637			lda 	EXTTextColour
.a86c	20 73 a9	jsr $a973			jsr 	EXTScrollFill
.a86f	60		rts				rts
.a870					EXTClearScreenCode:
.a870	a9 02		lda #$02			lda 	#2 							; select text page
.a872	85 01		sta $01				sta 	1
.a874	a9 20		lda #$20			lda		#32 						; fill with space
.a876	20 83 a8	jsr $a883			jsr 	_EXTCSFill
.a879	e6 01		inc $01				inc 	1 							; select colour page
.a87b	ad 37 06	lda $0637			lda 	EXTTextColour
.a87e	20 83 a8	jsr $a883			jsr 	_EXTCSFill
.a881	80 22		bra $a8a5			bra 	EXTHomeCursor
.a883					_EXTCSFill:
.a883	aa		tax				tax
.a884	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a886	85 40		sta $40				sta 	EXTAddress
.a888	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a88a	85 41		sta $41				sta 	EXTAddress+1
.a88c					_EXTCSFill1:
.a88c	a0 00		ldy #$00			ldy 	#0
.a88e	8a		txa				txa
.a88f					_EXTCSFill2:
.a88f	91 40		sta ($40),y			sta 	(EXTAddress),y
.a891	c8		iny				iny
.a892	d0 fb		bne $a88f			bne 	_EXTCSFill2
.a894	e6 41		inc $41				inc 	EXTAddress+1
.a896	a5 41		lda $41				lda 	EXTAddress+1
.a898	c9 d2		cmp #$d2			cmp 	#$D2
.a89a	d0 f0		bne $a88c			bne 	_EXTCSFill1
.a89c	8a		txa				txa
.a89d					_EXTCSFill3:
.a89d	91 40		sta ($40),y			sta 	(EXTAddress),y
.a89f	c8		iny				iny
.a8a0	c0 c0		cpy #$c0			cpy 	#$C0
.a8a2	d0 f9		bne $a89d			bne 	_EXTCSFill3
.a8a4	60		rts				rts
.a8a5					EXTHomeCursor:
.a8a5	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a8a8	9c 36 06	stz $0636			stz 	EXTColumn
.a8ab	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a8ad	85 40		sta $40				sta 	EXTAddress
.a8af	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a8b1	85 41		sta $41				sta 	EXTAddress+1
.a8b3					EXTSetHardwareCursor:
.a8b3	64 01		stz $01				stz 	1 							; I/O Page zero
.a8b5	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a8b7	8d 10 d0	sta $d010			sta 	$D010
.a8ba	a9 b1		lda #$b1			lda 	#$B1
.a8bc	8d 12 d0	sta $d012			sta 	$D012
.a8bf	ad 36 06	lda $0636			lda 	EXTColumn
.a8c2	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8c5	9c 15 d0	stz $d015			stz 	$D015
.a8c8	ad 35 06	lda $0635			lda 	EXTRow
.a8cb	8d 16 d0	sta $d016			sta 	$D016
.a8ce	9c 17 d0	stz $d017			stz 	$D017
.a8d1	60		rts				rts
.a8d2					EXTInputLine:
.a8d2	48		pha				pha
.a8d3	da		phx				phx
.a8d4	5a		phy				phy
.a8d5	a5 01		lda $01				lda 	1 							; save I/O page
.a8d7	48		pha				pha
.a8d8					_EILLoop:
.a8d8	20 da a9	jsr $a9da			jsr 	ExtInputSingleCharacter
.a8db	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a8dd	f0 40		beq $a91f			beq 	_EILExit
.a8df	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a8e1	f0 1c		beq $a8ff			beq 	_EILBackspace
.a8e3	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a8e5	90 12		bcc $a8f9			bcc 	_EILPrintLoop
.a8e7	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a8e9	b0 0e		bcs $a8f9			bcs 	_EILPrintLoop
.a8eb	48		pha				pha 								; save character
.a8ec	a9 02		lda #$02			lda 	#2  						; insert a space
.a8ee	85 01		sta $01				sta 	1
.a8f0	20 61 a9	jsr $a961			jsr 	EXTILInsert 				; insert in text screen
.a8f3	e6 01		inc $01				inc 	1
.a8f5	20 61 a9	jsr $a961			jsr 	EXTILInsert 				; insert in colour screen
.a8f8	68		pla				pla 								; get character back.
.a8f9					_EILPrintLoop:
.a8f9	20 44 a7	jsr $a744			jsr 	ExtPrintCharacter
.a8fc	80 da		bra $a8d8			bra 	_EILLoop
.a8fe	60		rts				rts
.a8ff					_EILBackspace:
.a8ff	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a902	f0 d4		beq $a8d8			beq 	_EILLoop
.a904	a9 02		lda #$02			lda 	#2 							; move cursor left
.a906	20 44 a7	jsr $a744			jsr 	EXTPrintCharacter
.a909	a9 02		lda #$02			lda 	#2 							; text block
.a90b	85 01		sta $01				sta 	1
.a90d	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a90f	20 4c a9	jsr $a94c			jsr 	EXTILDelete
.a912	e6 01		inc $01				inc 	1 							; colour block
.a914	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a917	88		dey				dey
.a918	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a91a	20 4c a9	jsr $a94c			jsr 	EXTILDelete 				; backspace attribute
.a91d	80 b9		bra $a8d8			bra 	_EILLoop 					; and go round.
.a91f					_EILExit:
.a91f	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a921	85 01		sta $01				sta 	1
.a923	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a925					_EILScrapeLine:
.a925	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a927	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a92a	c8		iny				iny
.a92b	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a92e	d0 f5		bne $a925			bne 	_EILScrapeLine
.a930					_EILTrimSpaces:
.a930	88		dey				dey
.a931	f0 08		beq $a93b			beq 	_EILEndTrim
.a933	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a936	c9 20		cmp #$20			cmp 	#' '
.a938	f0 f6		beq $a930			beq 	_EILTrimSpaces
.a93a	c8		iny				iny 								; trim after non space character.
.a93b					_EILEndTrim:
.a93b	a9 00		lda #$00			lda 	#0 							; trim here.
.a93d	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a940	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a942	20 44 a7	jsr $a744			jsr 	ExtPrintCharacter
.a945	68		pla				pla 								; reset I/O page
.a946	85 01		sta $01				sta 	1
.a948	7a		ply				ply
.a949	fa		plx				plx
.a94a	68		pla				pla
.a94b	60		rts				rts
.a94c					EXTILDelete:
.a94c	48		pha				pha 								; save the new character
.a94d	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a950					_EXTDLoop:
.a950	c8		iny				iny 								; copy one byte down.
.a951	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a953	88		dey				dey
.a954	91 40		sta ($40),y			sta 	(EXTAddress),y
.a956	c8		iny				iny 								; do till end of line.
.a957	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a95a	90 f4		bcc $a950			bcc 	_EXTDLoop
.a95c	88		dey				dey 	 							; write in last slot.
.a95d	68		pla				pla
.a95e	91 40		sta ($40),y			sta 	(EXTAddress),y
.a960	60		rts				rts
.a961					EXTILInsert:
.a961	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a964					_EXTILoop:
.a964	88		dey				dey 								; back one
.a965	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a968	f0 08		beq $a972			beq 	_EXTIExit
.a96a	88		dey				dey 								; copy one byte up.
.a96b	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a96d	c8		iny				iny
.a96e	91 40		sta ($40),y			sta 	(EXTAddress),y
.a970	80 f2		bra $a964			bra 	_EXTILoop
.a972					_EXTIExit:
.a972	60		rts				rts
.a973					EXTScrollFill:
.a973	aa		tax				tax									; save value to fill with
.a974	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a976	48		pha				pha
.a977	a5 37		lda $37				lda 	zTemp0+1
.a979	48		pha				pha
.a97a	a5 38		lda $38				lda 	zTemp1
.a97c	48		pha				pha
.a97d	a5 39		lda $39				lda 	zTemp1+1
.a97f	48		pha				pha
.a980	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a982	85 37		sta $37				sta 	zTemp0+1
.a984	85 39		sta $39				sta 	zTemp1+1
.a986	64 36		stz $36				stz 	zTemp0
.a988	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a98b	85 38		sta $38				sta 	zTemp1
.a98d	a0 00		ldy #$00			ldy 	#0
.a98f					_EXSFCopy1:
.a98f	b1 38		lda ($38),y			lda 	(zTemp1),y
.a991	91 36		sta ($36),y			sta 	(zTemp0),y
.a993	c8		iny				iny
.a994	d0 f9		bne $a98f			bne 	_EXSFCopy1
.a996	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a998	e6 39		inc $39				inc 	zTemp1+1
.a99a	a5 39		lda $39				lda 	zTemp1+1
.a99c	c9 d3		cmp #$d3			cmp 	#$D3
.a99e	d0 ef		bne $a98f			bne 	_EXSFCopy1
.a9a0	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.a9a3	8a		txa				txa
.a9a4					_EXSFFill1:
.a9a4	88		dey				dey
.a9a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9a7	c0 00		cpy #$00			cpy 	#0
.a9a9	10 f9		bpl $a9a4			bpl 	_EXSFFill1
.a9ab	68		pla				pla
.a9ac	85 39		sta $39				sta 	zTemp1+1
.a9ae	68		pla				pla
.a9af	85 38		sta $38				sta 	zTemp1
.a9b1	68		pla				pla
.a9b2	85 37		sta $37				sta 	zTemp0+1
.a9b4	68		pla				pla
.a9b5	85 36		sta $36				sta 	zTemp0
.a9b7	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a9b8					EXTInitialise:
.a9b8	64 01		stz $01				stz 	1 							; Access I/O
.a9ba	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a9bd	9c 08 d0	stz $d008			stz 	$D008
.a9c0	9c 09 d0	stz $d009			stz 	$D009
.a9c3	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a9c5	8d 58 d6	sta $d658			sta 	$D658
.a9c8	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a9ca	8d 37 06	sta $0637			sta 	EXTTextColour
.a9cd	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a9cf	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a9d2	a9 3c		lda #$3c			lda 	#60
.a9d4	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a9d7	64 01		stz $01				stz 	1
.a9d9	60		rts				rts
.a9da					EXTInputSingleCharacter:
.a9da	da		phx				phx
.a9db	5a		phy				phy
.a9dc					_EISCWait:
.a9dc	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a9df	c9 00		cmp #$00			cmp 	#0
.a9e1	f0 f9		beq $a9dc			beq 	_EISCWait
.a9e3	7a		ply				ply
.a9e4	fa		plx				plx
.a9e5	60		rts				rts
.a9e6					EXTBreakCheck:
.a9e6	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a9e9					EXTReadController:
.a9e9	da		phx				phx
.a9ea	a2 00		ldx #$00			ldx 	#0
.a9ec	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a9ee	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9f1	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a9f3	f0 04		beq $a9f9			beq 	_NoSet1
.a9f5	8a		txa				txa
.a9f6	09 01		ora #$01			ora 	#1
.a9f8	aa		tax				tax
.a9f9					_NoSet1:
.a9f9	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a9fb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9fe	29 10		and #$10			and 	#($01 << (($2C) & 7))
.aa00	f0 04		beq $aa06			beq 	_NoSet1
.aa02	8a		txa				txa
.aa03	09 02		ora #$02			ora 	#2
.aa05	aa		tax				tax
.aa06					_NoSet1:
.aa06	a9 06		lda #$06			lda 	#(($32) >> 3)
.aa08	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa0b	29 04		and #$04			and 	#($01 << (($32) & 7))
.aa0d	f0 04		beq $aa13			beq 	_NoSet1
.aa0f	8a		txa				txa
.aa10	09 04		ora #$04			ora 	#4
.aa12	aa		tax				tax
.aa13					_NoSet1:
.aa13	a9 04		lda #$04			lda 	#(($25) >> 3)
.aa15	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa18	29 20		and #$20			and 	#($01 << (($25) & 7))
.aa1a	f0 04		beq $aa20			beq 	_NoSet1
.aa1c	8a		txa				txa
.aa1d	09 08		ora #$08			ora 	#8
.aa1f	aa		tax				tax
.aa20					_NoSet1:
.aa20	a9 04		lda #$04			lda 	#(($26) >> 3)
.aa22	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa25	29 40		and #$40			and 	#($01 << (($26) & 7))
.aa27	f0 04		beq $aa2d			beq 	_NoSet1
.aa29	8a		txa				txa
.aa2a	09 10		ora #$10			ora 	#16
.aa2c	aa		tax				tax
.aa2d					_NoSet1:
.aa2d	8a		txa				txa
.aa2e	fa		plx				plx
.aa2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7cd					GRVectorTable:
>b7cd	2b ac					.word	GXInitialise             ; $00 Initialise
>b7cf	45 ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7d1	8d ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7d3	dd ab					.word	GXClearBitmap            ; $03 Clear
>b7d5	1c ae					.word	GXSetColourMode          ; $04 Colour
>b7d7	e4 af					.word	GXFontHandler            ; $05 DrawFont
>b7d9	2c b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7db	98 b0					.word	GXSelect                 ; $07 SpriteUse
>b7dd	c1 b0					.word	GXSelectImage            ; $08 SpriteImage
>b7df	48 b2					.word	GXCollide                ; $09 SpriteCollide
>b7e1	8f aa					.word	GRUndefined              ; $0a
>b7e3	8f aa					.word	GRUndefined              ; $0b
>b7e5	8f aa					.word	GRUndefined              ; $0c
>b7e7	8f aa					.word	GRUndefined              ; $0d
>b7e9	8f aa					.word	GRUndefined              ; $0e
>b7eb	8f aa					.word	GRUndefined              ; $0f
>b7ed	8f aa					.word	GRUndefined              ; $10
>b7ef	8f aa					.word	GRUndefined              ; $11
>b7f1	8f aa					.word	GRUndefined              ; $12
>b7f3	8f aa					.word	GRUndefined              ; $13
>b7f5	8f aa					.word	GRUndefined              ; $14
>b7f7	8f aa					.word	GRUndefined              ; $15
>b7f9	8f aa					.word	GRUndefined              ; $16
>b7fb	8f aa					.word	GRUndefined              ; $17
>b7fd	8f aa					.word	GRUndefined              ; $18
>b7ff	8f aa					.word	GRUndefined              ; $19
>b801	8f aa					.word	GRUndefined              ; $1a
>b803	8f aa					.word	GRUndefined              ; $1b
>b805	8f aa					.word	GRUndefined              ; $1c
>b807	8f aa					.word	GRUndefined              ; $1d
>b809	8f aa					.word	GRUndefined              ; $1e
>b80b	8f aa					.word	GRUndefined              ; $1f
>b80d	8d aa					.word	GXMove                   ; $20 Move
>b80f	ea ac					.word	GXLine                   ; $21 Line
>b811	65 ae					.word	GXFrameRectangle         ; $22 FrameRect
>b813	62 ae					.word	GXFillRectangle          ; $23 FillRect
>b815	94 aa					.word	GXFrameCircle            ; $24 FrameCircle
>b817	90 aa					.word	GXFillCircle             ; $25 FillCircle
>b819	8f aa					.word	GRUndefined              ; $26
>b81b	8f aa					.word	GRUndefined              ; $27
>b81d	4a ae					.word	GXPlotPoint              ; $28 Plot
>b81f	57 b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa30					GXGraphicDraw:
.aa30	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa32	b0 06		bcs $aa3a			bcs 	_GDCoordinate
.aa34	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa36	84 37		sty $37				sty 	gxzTemp0+1
.aa38	80 4b		bra $aa85			bra 	_GDExecuteA 				; and execute
.aa3a					_GDCoordinate:
.aa3a	48		pha				pha 								; save AXY
.aa3b	da		phx				phx
.aa3c	5a		phy				phy
.aa3d	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa3f					_GDCopy1:
.aa3f	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa42	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa45	ca		dex				dex
.aa46	10 f7		bpl $aa3f			bpl 	_GDCopy1
.aa48	68		pla				pla 								; update Y
.aa49	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa4c	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa4f	68		pla				pla
.aa50	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa53	68		pla				pla 								; get A (command+X.1) back
.aa54	48		pha				pha
.aa55	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa57	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa5a	68		pla				pla 								; get command back
.aa5b	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa5d	48		pha				pha 								; push back.
.aa5e	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa60	f0 17		beq $aa79			beq 	_GDCopyToWorkArea
.aa62	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa65	f0 07		beq $aa6e			beq 	_GDCheckY
.aa67	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa6a	c9 40		cmp #$40			cmp 	#64
.aa6c	b0 08		bcs $aa76			bcs 	_GDError1
.aa6e					_GDCheckY:
.aa6e	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa71	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa74	90 03		bcc $aa79			bcc 	_GDCopyToWorkArea
.aa76					_GDError1:
.aa76	68		pla				pla
.aa77					_GDError2:
.aa77	38		sec				sec
.aa78	60		rts				rts
.aa79					_GDCopyToWorkArea:
.aa79	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa7b					_GDCopy2:
.aa7b	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa7e	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa81	ca		dex				dex
.aa82	10 f7		bpl $aa7b			bpl 	_GDCopy2
.aa84	68		pla				pla 								; get command
.aa85					_GDExecuteA:
.aa85	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa87	b0 ee		bcs $aa77			bcs 	_GDError2
.aa89	aa		tax				tax
.aa8a	7c cd b7	jmp ($b7cd,x)			jmp 	(GRVectorTable,x)
.aa8d					GXMove:
.aa8d	18		clc				clc
.aa8e	60		rts				rts
.aa8f					GRUndefined:
>aa8f	db						.byte 	$DB 						; causes a break in the emulator
.aa90					GXFillCircle:
.aa90	a9 ff		lda #$ff			lda 	#255
.aa92	80 02		bra $aa96			bra 	GXCircle
.aa94					GXFrameCircle:
.aa94	a9 00		lda #$00			lda 	#0
.aa96					GXCircle:
.aa96	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa99	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aa9c	f0 26		beq $aac4			beq 	_GXCFail
.aa9e	20 ef b2	jsr $b2ef			jsr 	GXSortXY 					; topleft/bottomright
.aaa1	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start drawing
.aaa4	20 96 ab	jsr $ab96			jsr 	GXCircleSetup 				; set up for drawing
.aaa7	9c de 06	stz $06de			stz 	gxYChanged
.aaaa					_GXCircleDraw:
.aaaa	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aaad	cd dc 06	cmp $06dc			cmp 	gYCentre
.aab0	90 0a		bcc $aabc			bcc 	_GXCircleContinue
.aab2	d0 03		bne $aab7			bne 	_GXNoLast
.aab4	20 c9 aa	jsr $aac9			jsr 	GXPlot1
.aab7					_GXNoLast:
.aab7	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap 				; close the bitmap
.aaba	18		clc				clc
.aabb	60		rts				rts
.aabc					_GXCircleContinue:
.aabc	20 c6 aa	jsr $aac6			jsr 	GXPlot2 					; draw it
.aabf	20 43 ab	jsr $ab43			jsr 	GXCircleMove 				; adjust the coordinates
.aac2	80 e6		bra $aaaa			bra 	_GXCircleDraw
.aac4					_GXCFail:
.aac4	38		sec				sec
.aac5	60		rts				rts
.aac6					GXPlot2:
.aac6	20 c9 aa	jsr $aac9			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aac9					GXPlot1:
.aac9	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aacc	f0 03		beq $aad1			beq 	_GXPlot1Only
.aace	20 ed aa	jsr $aaed			jsr 	GXPlot0 						; plot and negate
.aad1					_GXPlot1Only:
.aad1	20 ed aa	jsr $aaed			jsr 	GXPlot0 						; twice, undoing negation
.aad4	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aad7	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aada	8d dc 06	sta $06dc			sta 	gYCentre
.aadd	8e db 06	stx $06db			stx 	gXCentre
.aae0	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aae3	a9 ff		lda #$ff			lda 	#$FF
.aae5	8d de 06	sta $06de			sta 	gxYChanged
.aae8	60		rts				rts
.aae9	20 ed aa	jsr $aaed			jsr 	GXPlot0 						; do once
.aaec	60		rts				rts
.aaed	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aaf0	f0 05		beq $aaf7			beq 	_GXPlot0Always
.aaf2	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aaf5	f0 2d		beq $ab24			beq 	GXPlot0Exit
.aaf7					_GXPlot0Always:
.aaf7	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aaf9	ad dc 06	lda $06dc			lda 	gYCentre
.aafc	20 25 ab	jsr $ab25			jsr 	GXSubCopy
.aaff	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.ab01	ad db 06	lda $06db			lda 	gXCentre
.ab04	20 25 ab	jsr $ab25			jsr 	GXSubCopy
.ab07	48		pha				pha 									; save last offset X
.ab08	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 					; calculate position/offset.
.ab0b	68		pla				pla
.ab0c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.ab0d	85 36		sta $36				sta 	gxzTemp0
.ab0f	64 37		stz $37				stz 	gxzTemp0+1
.ab11	26 37		rol $37				rol 	gxzTemp0+1
.ab13	ad dd 06	lda $06dd			lda 	gxIsFillMode
.ab16	69 80		adc #$80			adc 	#128
.ab18	20 b5 ae	jsr $aeb5			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab1b	38		sec				sec 									; GY = -GY
.ab1c	a9 00		lda #$00			lda 	#0
.ab1e	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab21	8d dc 06	sta $06dc			sta 	gYCentre
.ab24					GXPlot0Exit:
.ab24	60		rts				rts
.ab25					GXSubCopy:
.ab25	85 36		sta $36				sta 	gxzTemp0
.ab27	64 37		stz $37				stz 	gxzTemp0+1
.ab29	29 80		and #$80			and 	#$80
.ab2b	f0 02		beq $ab2f			beq 	_GXNoSx
.ab2d	c6 37		dec $37				dec 	gxzTemp0+1
.ab2f					_GXNoSx:
.ab2f	38		sec				sec
.ab30	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab33	e5 36		sbc $36				sbc 	gxzTemp0
.ab35	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab38	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab3b	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab3d	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab40	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab42	60		rts				rts
.ab43					GXCircleMove:
.ab43	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab46	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab48	10 0d		bpl $ab57			bpl 	_GXEMPositive
.ab4a	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab4d	ad db 06	lda $06db			lda 	gXCentre
.ab50	20 76 ab	jsr $ab76			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab53	a9 06		lda #$06			lda 	#6  						; and add 6
.ab55	80 15		bra $ab6c			bra 	_GXEMAddD
.ab57					_GXEMPositive:
.ab57	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab5a	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab5d	38		sec				sec 								; calculate X-Y
.ab5e	ad db 06	lda $06db			lda 	gXCentre
.ab61	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab64	20 76 ab	jsr $ab76			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab67	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab69	ce de 06	dec $06de			dec 	gxYChanged
.ab6c					_GXEMAddD:
.ab6c	18		clc				clc
.ab6d	65 38		adc $38				adc 	gxzTemp1
.ab6f	85 38		sta $38				sta 	gxzTemp1
.ab71	90 02		bcc $ab75			bcc 	_GXEMNoCarry
.ab73	e6 39		inc $39				inc 	gxzTemp1+1
.ab75					_GXEMNoCarry:
.ab75	60		rts				rts
.ab76					_GXAdd4TimesToD:
.ab76	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab78	29 80		and #$80			and 	#$80
.ab7a	f0 02		beq $ab7e			beq 	_GXA4Unsigned
.ab7c	a9 ff		lda #$ff			lda 	#$FF
.ab7e					_GXA4Unsigned:
.ab7e	85 37		sta $37				sta 	gxzTemp0+1
.ab80	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab82	26 37		rol $37				rol 	gxzTemp0+1
.ab84	06 36		asl $36				asl 	gxzTemp0
.ab86	26 37		rol $37				rol 	gxzTemp0+1
.ab88	18		clc				clc 								; add
.ab89	a5 36		lda $36				lda		gxzTemp0
.ab8b	65 38		adc $38				adc 	gxzTemp1
.ab8d	85 38		sta $38				sta 	gxzTemp1
.ab8f	a5 37		lda $37				lda		gxzTemp0+1
.ab91	65 39		adc $39				adc 	gxzTemp1+1
.ab93	85 39		sta $39				sta 	gxzTemp1+1
.ab95	60		rts				rts
.ab96					GXCircleSetup:
.ab96	38		sec				sec
.ab97	ad 48 06	lda $0648			lda 	gxY1
.ab9a	ed 44 06	sbc $0644			sbc 	gxY0
.ab9d	4a		lsr a				lsr 	a
.ab9e	8d da 06	sta $06da			sta 	gxRadius
.aba1	a2 00		ldx #$00			ldx 	#0
.aba3	20 c5 ab	jsr $abc5			jsr 	_GXCalculateCentre
.aba6	a2 02		ldx #$02			ldx 	#2
.aba8	20 c5 ab	jsr $abc5			jsr 	_GXCalculateCentre
.abab	9c db 06	stz $06db			stz 	gXCentre
.abae	ad da 06	lda $06da			lda 	gxRadius
.abb1	8d dc 06	sta $06dc			sta 	gYCentre
.abb4	0a		asl a				asl 	a 							; R x 2
.abb5	85 36		sta $36				sta 	gxzTemp0
.abb7	38		sec				sec
.abb8	a9 03		lda #$03			lda 	#3
.abba	e5 36		sbc $36				sbc 	gxzTemp0
.abbc	85 38		sta $38				sta 	gxzTemp1
.abbe	a9 00		lda #$00			lda 	#0
.abc0	e9 00		sbc #$00			sbc 	#0
.abc2	85 39		sta $39				sta 	gxzTemp1+1
.abc4	60		rts				rts
.abc5					_GXCalculateCentre:
.abc5	38		sec				sec
.abc6	bd 46 06	lda $0646,x			lda 	gxX1,x
.abc9	7d 42 06	adc $0642,x			adc 	gXX0,x
.abcc	9d 46 06	sta $0646,x			sta 	gXX1,x
.abcf	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abd2	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abd5	4a		lsr a				lsr 	a
.abd6	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abd9	7e 46 06	ror $0646,x			ror 	gXX1,x
.abdc	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abdd					GXClearBitmap:
.abdd	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abe0	f0 24		beq $ac06			beq 	_GXCBFail
.abe2	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start access
.abe5	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abe7	ad 4e 06	lda $064e			lda 	gxHeight
.abea	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abec	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abee					_GXCalcLastPage:
.abee	98		tya				tya 								; add to base page
.abef	18		clc				clc
.abf0	6d 4c 06	adc $064c			adc 	gxBasePage
.abf3	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abf5					_GXClearAll:
.abf5	20 08 ac	jsr $ac08			jsr 	_GXClearBlock 				; clear 8k block
.abf8	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abfa	a5 0b		lda $0b				lda 	GXEditSlot
.abfc	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.abff	b0 f4		bcs $abf5			bcs 	_GXClearAll
.ac01	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap	 			; stop access
.ac04	18		clc				clc
.ac05	60		rts				rts
.ac06					_GXCBFail:
.ac06	38		sec				sec
.ac07	60		rts				rts
.ac08					_GXClearBlock:
.ac08	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.ac0a	85 38		sta $38				sta 	0+gxzTemp1
.ac0c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.ac0e	85 39		sta $39				sta 	1+gxzTemp1
.ac10					_GXCB0:
.ac10	a5 36		lda $36				lda 	gxzTemp0
.ac12	a0 00		ldy #$00			ldy 	#0
.ac14					_GXCB1:
.ac14	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac16	c8		iny				iny
.ac17	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac19	c8		iny				iny
.ac1a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac1c	c8		iny				iny
.ac1d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac1f	c8		iny				iny
.ac20	d0 f2		bne $ac14			bne 	_GXCB1
.ac22	e6 39		inc $39				inc 	gxzTemp1+1
.ac24	a5 39		lda $39				lda 	gxzTemp1+1
.ac26	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac28	d0 e6		bne $ac10			bne 	_GXCB0
.ac2a	60		rts				rts
.ac2b					GXInitialise:
.ac2b	64 01		stz $01				stz 	1
.ac2d	a9 01		lda #$01			lda 	#1
.ac2f	8d 00 d0	sta $d000			sta 	$D000
.ac32	18		clc				clc
.ac33	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac36	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac39	a2 0f		ldx #$0f			ldx 	#15
.ac3b					_GXIClear:
.ac3b	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac3e	ca		dex				dex
.ac3f	10 fa		bpl $ac3b			bpl 	_GXIClear
.ac41	20 dc ac	jsr $acdc			jsr 	GXClearSpriteStore
.ac44	60		rts				rts
.ac45					GXControlBitmap:
.ac45	64 01		stz $01				stz 	1
.ac47	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac49	29 01		and #$01			and 	#1 							; set bitmap flag
.ac4b	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac4e	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac4f	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac52	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac54	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac56	90 02		bcc $ac5a			bcc 	_CBNotOn
.ac58	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac5a					_CBNotOn:
.ac5a	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac5d	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac5f	29 07		and #$07			and 	#7
.ac61	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac64	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac66	d0 02		bne $ac6a			bne 	_CBNotDefault
.ac68	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac6a					_CBNotDefault:
.ac6a	8d 4c 06	sta $064c			sta 	gxBasePage
.ac6d	20 ce ac	jsr $acce			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac70	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac72	8d 03 d1	sta $d103			sta 	$D103
.ac75	a5 36		lda $36				lda 	gxzTemp0
.ac77	8d 02 d1	sta $d102			sta 	$D102
.ac7a	9c 01 d1	stz $d101			stz 	$D101
.ac7d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac7f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac82	29 01		and #$01			and 	#1
.ac84	f0 02		beq $ac88			beq 	_CBHaveHeight
.ac86	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac88					_CBHaveHeight
.ac88	8e 4e 06	stx $064e			stx 	gxHeight
.ac8b	18		clc				clc
.ac8c	60		rts				rts
.ac8d					GXControlSprite:
.ac8d	64 01		stz $01				stz 	1
.ac8f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac91	29 01		and #$01			and 	#1 							; set sprites flag
.ac93	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac96	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac97	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac9a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac9c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac9e	90 02		bcc $aca2			bcc 	_CSNotOn
.aca0	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.aca2					_CSNotOn:
.aca2	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aca5	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.aca7	d0 02		bne $acab			bne 	_CSNotDefault
.aca9	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.acab					_CSNotDefault:
.acab	8d 4d 06	sta $064d			sta 	gxSpritePage
.acae	20 ce ac	jsr $acce			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.acb1	a5 36		lda $36				lda 	zTemp0
.acb3	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.acb6	a5 37		lda $37				lda 	zTemp0+1
.acb8	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.acbb	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.acbd					_CSClear:
.acbd	9e 00 d9	stz $d900,x			stz 	$D900,x
.acc0	9e 00 da	stz $da00,x			stz 	$DA00,x
.acc3	ca		dex				dex
.acc4	d0 f7		bne $acbd			bne 	_CSClear
.acc6	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acc9	20 dc ac	jsr $acdc			jsr 	GXClearSpriteStore
.accc	18		clc				clc
.accd	60		rts				rts
.acce					GXCalculateBaseAddress:
.acce	85 36		sta $36				sta 	gxzTemp0
.acd0	64 37		stz $37				stz 	gxzTemp0+1
.acd2	a9 05		lda #$05			lda 	#5
.acd4					_GXShift:
.acd4	06 36		asl $36				asl 	gxzTemp0
.acd6	26 37		rol $37				rol 	gxzTemp0+1
.acd8	3a		dec a				dec		a
.acd9	d0 f9		bne $acd4			bne 	_GXShift
.acdb	60		rts				rts
.acdc					GXClearSpriteStore:
.acdc	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.acde					_GXCSSLoop:
.acde	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.ace1	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ace3	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.ace6	ca		dex				dex
.ace7	10 f5		bpl $acde			bpl 	_GXCSSLoop
.ace9	60		rts				rts
.acea					GXLine:
.acea	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.aced	f0 28		beq $ad17			beq 	_GXLFail
.acef	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap
.acf2	20 0d b3	jsr $b30d			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acf5	20 bd ad	jsr $adbd			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.acf8	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; calculate position/offset.
.acfb					_GXDrawLoop:
.acfb	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.acfe	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ad00	2d 52 06	and $0652			and 	gxANDValue
.ad03	4d 51 06	eor $0651			eor 	gxEORValue
.ad06	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad08	20 19 ad	jsr $ad19			jsr 	GXLineIsComplete 			; is the line complete ?
.ad0b	f0 05		beq $ad12			beq 	_GXLExit
.ad0d	20 34 ad	jsr $ad34			jsr 	GXLineAdvance 				; code as per advance method
.ad10	80 e9		bra $acfb			bra 	_GXDrawLoop
.ad12					_GXLExit:
.ad12	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.ad15	18		clc				clc
.ad16	60		rts				rts
.ad17					_GXLFail:
.ad17	38		sec				sec
.ad18	60		rts				rts
.ad19					GXLineIsComplete:
.ad19	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad1c	d0 0f		bne $ad2d			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad1e	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad21	4d 46 06	eor $0646			eor 	GXX1
.ad24	d0 06		bne $ad2c			bne 	_GXLICExit
.ad26	ad 43 06	lda $0643			lda 	GXX0+1
.ad29	4d 47 06	eor $0647			eor 	GXX1+1
.ad2c					_GXLICExit:
.ad2c	60		rts				rts
.ad2d					_GXLICCompareY:
.ad2d	ad 48 06	lda $0648			lda 	GXY1
.ad30	4d 44 06	eor $0644			eor 	GXY0
.ad33	60		rts				rts
.ad34					GXLineAdvance:
.ad34	18		clc				clc 								; add adjust to position
.ad35	ad e3 06	lda $06e3			lda 	GXPosition
.ad38	6d e4 06	adc $06e4			adc 	GXAdjust
.ad3b	8d e3 06	sta $06e3			sta 	GXPosition
.ad3e	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad41	b0 05		bcs $ad48			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad43	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad46	90 0a		bcc $ad52			bcc 	_GXLANoExtra
.ad48					_GXLAOverflow:
.ad48	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad4b	38		sec				sec 								; subtract total and write back
.ad4c	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad4f	8d e3 06	sta $06e3			sta 	GXPosition
.ad52					_GXLANoExtra:
.ad52	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad55	f0 0d		beq $ad64			beq 	_GXDXLarger
.ad57	20 b6 ad	jsr $adb6			jsr 	GXIncrementY
.ad5a	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad5d	f0 10		beq $ad6f			beq 	_GXLAExit
.ad5f	20 70 ad	jsr $ad70			jsr 	GXAdjustX
.ad62	80 0b		bra $ad6f			bra 	_GXLAExit
.ad64					_GXDXLarger:
.ad64	20 70 ad	jsr $ad70			jsr 	GXAdjustX
.ad67	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad6a	f0 03		beq $ad6f			beq 	_GXLAExit
.ad6c	20 b6 ad	jsr $adb6			jsr 	GXIncrementY
.ad6f					_GXLAExit:
.ad6f	60		rts				rts
.ad70					GXAdjustX:
.ad70	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad73	10 25		bpl $ad9a			bpl 	_GXAXRight
.ad75	ad 42 06	lda $0642			lda 	GXX0
.ad78	d0 03		bne $ad7d			bne 	_GXAXNoBorrow
.ad7a	ce 43 06	dec $0643			dec 	GXX0+1
.ad7d					_GXAXNoBorrow:
.ad7d	ce 42 06	dec $0642			dec 	GXX0
.ad80	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad83	ad 54 06	lda $0654			lda 	gsOffset
.ad86	c9 ff		cmp #$ff			cmp 	#$FF
.ad88	d0 0f		bne $ad99			bne 	_GXAYExit 					; underflow
.ad8a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad8c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad8e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad90	b0 07		bcs $ad99			bcs 	_GXAYExit
.ad92	18		clc				clc
.ad93	69 20		adc #$20			adc 	#$20 						; fix up
.ad95	85 3d		sta $3d				sta 	gxzScreen+1
.ad97	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad99					_GXAYExit:
.ad99	60		rts				rts
.ad9a					_GXAXRight:
.ad9a	ee 42 06	inc $0642			inc 	GXX0
.ad9d	d0 03		bne $ada2			bne 	_GXAXNoCarry
.ad9f	ee 43 06	inc $0643			inc 	GXX0+1
.ada2					_GXAXNoCarry:
.ada2	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ada5	d0 0e		bne $adb5			bne 	_GXAXExit 					; if not overflowed, exit.
.ada7	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ada9	a5 3d		lda $3d				lda 	gxzScreen+1
.adab	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.adad	90 06		bcc $adb5			bcc 	_GXAXExit
.adaf	e9 20		sbc #$20			sbc 	#$20 						; fix up
.adb1	85 3d		sta $3d				sta 	gxzScreen+1
.adb3	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.adb5					_GXAXExit:
.adb5	60		rts				rts
.adb6					GXIncrementY:
.adb6	ee 44 06	inc $0644			inc 	GXY0
.adb9	20 2d b2	jsr $b22d			jsr 	GXMovePositionDown
.adbc	60		rts				rts
.adbd					GXLineSetup:
.adbd	ad 48 06	lda $0648			lda 	GXY1
.adc0	38		sec				sec
.adc1	ed 44 06	sbc $0644			sbc 	GXY0
.adc4	4a		lsr a				lsr 	a
.adc5	8d e0 06	sta $06e0			sta 	GXDiffY
.adc8	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adcb	38		sec				sec
.adcc	ad 46 06	lda $0646			lda 	GXX1
.adcf	ed 42 06	sbc $0642			sbc 	GXX0
.add2	8d df 06	sta $06df			sta 	GXDiffX
.add5	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.add8	ed 43 06	sbc $0643			sbc 	GXX0+1
.addb	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.addc	6e df 06	ror $06df			ror 	GXDiffX
.addf	0a		asl a				asl 	a
.ade0	10 0c		bpl $adee			bpl 	_GDXNotNegative
.ade2	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.ade4	38		sec				sec
.ade5	ed df 06	sbc $06df			sbc 	GXDiffX
.ade8	8d df 06	sta $06df			sta 	GXDiffX
.adeb	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.adee					_GDXNotNegative:
.adee	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.adf1	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adf4	8d e4 06	sta $06e4			sta 	GXAdjust
.adf7	ad df 06	lda $06df			lda 	GXDiffX
.adfa	8d e5 06	sta $06e5			sta 	GXTotal
.adfd	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.ae00	cd df 06	cmp $06df			cmp 	GXDiffX
.ae03	90 0f		bcc $ae14			bcc 	_GDXNotLarger
.ae05	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.ae08	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.ae0b	8d e4 06	sta $06e4			sta 	GXAdjust
.ae0e	ad e0 06	lda $06e0			lda 	GXDiffY
.ae11	8d e5 06	sta $06e5			sta 	GXTotal
.ae14					_GDXNotLarger:
.ae14	ad e5 06	lda $06e5			lda 	GXTotal
.ae17	4a		lsr a				lsr 	a
.ae18	8d e3 06	sta $06e3			sta 	GXPosition
.ae1b	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae1c					GXSetColourMode:
.ae1c	a6 36		ldx $36				ldx 	gxzTemp0
.ae1e	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae21	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae23	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae26	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae28	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae2b	ae 50 06	ldx $0650			ldx 	gxColour
.ae2e	8e 51 06	stx $0651			stx 	gxEORValue
.ae31	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae33	90 03		bcc $ae38			bcc 	_GXSDCNotAndColour
.ae35	8e 52 06	stx $0652			stx 	gxANDValue
.ae38					_GXSDCNotAndColour:
.ae38	d0 03		bne $ae3d			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae3a	9c 51 06	stz $0651			stz 	gxEORValue
.ae3d					_GXSDCNotAnd:
.ae3d	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae3e	90 08		bcc $ae48			bcc 	_GXSDCNoFlip
.ae40	ad 52 06	lda $0652			lda	 	gxANDValue
.ae43	49 ff		eor #$ff			eor 	#$FF
.ae45	8d 52 06	sta $0652			sta 	gxANDValue
.ae48					_GXSDCNoFlip:
.ae48	18		clc				clc
.ae49	60		rts				rts
.ae4a					GXPlotPoint:
.ae4a	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start drawing
.ae4d	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae50	ac 54 06	ldy $0654			ldy 	gsOffset
.ae53	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae55	2d 52 06	and $0652			and 	gxANDValue
.ae58	4d 51 06	eor $0651			eor 	gxEORValue
.ae5b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae5d	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae60	18		clc				clc
.ae61	60		rts				rts
.ae62					GXFillRectangle:
.ae62	38		sec				sec
.ae63	80 01		bra $ae66			bra 	GXRectangle
.ae65					GXFrameRectangle:
.ae65	18		clc				clc
.ae66					GXRectangle:
.ae66	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae69	f0 35		beq $aea0			beq 	_GXRFail
.ae6b	08		php				php 								; save Fill flag (CS)
.ae6c	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; start drawing
.ae6f	20 ef b2	jsr $b2ef			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae72	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae75	38		sec				sec 								; sec = Draw line
.ae76	20 a2 ae	jsr $aea2			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae79	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae7c	cd 48 06	cmp $0648			cmp 	gxY1
.ae7f	f0 19		beq $ae9a			beq 	_GXRectangleExit
.ae81					_GXRectLoop:
.ae81	20 2d b2	jsr $b22d			jsr 	GXMovePositionDown 			; down one.
.ae84	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae87	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae8a	cd 48 06	cmp $0648			cmp 	gXY1
.ae8d	f0 07		beq $ae96			beq 	_GXLastLine
.ae8f	28		plp				plp 								; get flag back
.ae90	08		php				php
.ae91	20 a2 ae	jsr $aea2			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae94	80 eb		bra $ae81			bra 	_GXRectLoop
.ae96					_GXLastLine:
.ae96	38		sec				sec
.ae97	20 a2 ae	jsr $aea2			jsr 	GXDrawLineX1X0
.ae9a					_GXRectangleExit:
.ae9a	68		pla				pla 								; throw fill flag.
.ae9b	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae9e	18		clc				clc
.ae9f	60		rts				rts
.aea0					_GXRFail:
.aea0	38		sec				sec
.aea1	60		rts				rts
.aea2					GXDrawLineX1X0:
.aea2	08		php				php 								; save solid/either-end
.aea3	38		sec				sec
.aea4	ad 46 06	lda $0646			lda		gXX1
.aea7	ed 42 06	sbc $0642			sbc 	gXX0
.aeaa	85 36		sta $36				sta 	gxzTemp0
.aeac	ad 47 06	lda $0647			lda 	gXX1+1
.aeaf	ed 43 06	sbc $0643			sbc 	gXX0+1
.aeb2	85 37		sta $37				sta 	gxzTemp0+1
.aeb4	28		plp				plp
.aeb5					GXDrawLineTemp0:
.aeb5	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aeb7	48		pha				pha
.aeb8	a5 3d		lda $3d				lda 	gxzScreen+1
.aeba	48		pha				pha
.aebb	ad 54 06	lda $0654			lda 	gsOffset
.aebe	48		pha				pha
.aebf	a5 0b		lda $0b				lda 	GXEditSlot
.aec1	48		pha				pha
.aec2	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aec5	90 1e		bcc $aee5			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aec7					_GXDLTLine:
.aec7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aec9	2d 52 06	and $0652			and 	gxANDValue
.aecc	4d 51 06	eor $0651			eor 	gxEORValue
.aecf	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed1	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aed3	d0 04		bne $aed9			bne 	_GXDLTNoBorrow
.aed5	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aed7	30 2e		bmi $af07			bmi 	_GXDLTExit
.aed9					_GXDLTNoBorrow:
.aed9	c6 36		dec $36				dec 	gxzTemp0
.aedb	c8		iny				iny 								; next slot.
.aedc	d0 e9		bne $aec7			bne 	_GXDLTLine
.aede	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aee0	20 15 af	jsr $af15			jsr 	GXDLTCheckWrap				; check for new page.
.aee3	80 e2		bra $aec7			bra 	_GXDLTLine
.aee5					_GXDLTEndPoints:
.aee5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aee7	2d 52 06	and $0652			and 	gxANDValue
.aeea	4d 51 06	eor $0651			eor 	gxEORValue
.aeed	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aeef	98		tya				tya 								; advance to right side
.aef0	18		clc				clc
.aef1	65 36		adc $36				adc 	gxzTemp0
.aef3	a8		tay				tay
.aef4	a5 3d		lda $3d				lda 	gxzScreen+1
.aef6	65 37		adc $37				adc 	gxzTemp0+1
.aef8	85 3d		sta $3d				sta 	gxzScreen+1
.aefa	20 15 af	jsr $af15			jsr 	GXDLTCheckWrap 			; fix up.
.aefd	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aeff	2d 52 06	and $0652			and 	gxANDValue
.af02	4d 51 06	eor $0651			eor 	gxEORValue
.af05	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af07					_GXDLTExit:
.af07	68		pla				pla
.af08	85 0b		sta $0b				sta 	GXEditSlot
.af0a	68		pla				pla
.af0b	8d 54 06	sta $0654			sta 	gsOffset
.af0e	68		pla				pla
.af0f	85 3d		sta $3d				sta 	gxzScreen+1
.af11	68		pla				pla
.af12	85 3c		sta $3c				sta 	gxzScreen
.af14	60		rts				rts
.af15					GXDLTCheckWrap:
.af15	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af17	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af19	90 06		bcc $af21			bcc 	_GXDLTCWExit
.af1b	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af1d	85 3d		sta $3d				sta 	gxzScreen+1
.af1f	e6 0b		inc $0b				inc 	GXEditSlot
.af21					_GXDLTCWExit:
.af21	60		rts				rts
.af22					GXDrawGraphicElement:
.af22	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af25	3a		dec a				dec 	a
.af26	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af29	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af2c	f0 67		beq $af95			beq 	_GXSLFail
.af2e	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af31	48		pha				pha
.af32	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af35	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af38	20 c7 b1	jsr $b1c7			jsr 	gxOpenBitmap 				; open the bitmap.
.af3b	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af3e	4a		lsr a				lsr 	a
.af3f	4a		lsr a				lsr 	a
.af40	4a		lsr a				lsr 	a
.af41	29 07		and #$07			and		#7
.af43	1a		inc a				inc 	a
.af44	8d eb 06	sta $06eb			sta 	gxScale
.af47	64 38		stz $38				stz 	gxzTemp1					; start first line
.af49					_GXGELoop:
.af49	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af4b	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af4e	10 06		bpl $af56			bpl		_GXNoVFlip
.af50	ad e8 06	lda $06e8			lda 	gxMask
.af53	38		sec				sec
.af54	e5 38		sbc $38				sbc 	gxzTemp1
.af56					_GXNoVFlip:
.af56	aa		tax				tax 								; get the Xth line.
.af57	20 97 af	jsr $af97			jsr 	_GXCallAcquire 				; get that data.
.af5a	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af5d	85 39		sta $39				sta 	gxzTemp1+1
.af5f					_GXGELoop2:
.af5f	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af62	cd 4e 06	cmp $064e			cmp 	gxHeight
.af65	b0 10		bcs $af77			bcs 	_GXDGEExit
.af67	20 9a af	jsr $af9a			jsr 	GXRenderOneLine 			; render line
.af6a	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af6c	d0 f1		bne $af5f			bne 	_GXGELoop2
.af6e	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af70	a5 38		lda $38				lda 	gxzTemp1
.af72	cd e7 06	cmp $06e7			cmp 	gxSize
.af75	d0 d2		bne $af49			bne 	_GXGELoop
.af77					_GXDGEExit:
.af77	68		pla				pla 								; restore Y for next time
.af78	8d 44 06	sta $0644			sta 	gxY0
.af7b	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af7e					_GXShiftLeft:
.af7e	18		clc				clc
.af7f	ad e7 06	lda $06e7			lda 	gxSize
.af82	6d 42 06	adc $0642			adc 	gxX0
.af85	8d 42 06	sta $0642			sta 	gxX0
.af88	90 03		bcc $af8d			bcc 	_GXSLNoCarry
.af8a	ee 43 06	inc $0643			inc 	gxX0+1
.af8d					_GXSLNoCarry:
.af8d	ca		dex				dex
.af8e	d0 ee		bne $af7e			bne 	_GXShiftLeft
.af90	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.af93	18		clc				clc
.af94	60		rts				rts
.af95					_GXSLFail:
.af95	38		sec				sec
.af96	60		rts				rts
.af97					_GXCallAcquire:
.af97	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af9a					GXRenderOneLine:
.af9a	20 d7 b1	jsr $b1d7			jsr 	GXPositionCalc 				; calculate position/offset.
.af9d	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.afa0	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.afa2					_GXROLLoop1:
.afa2	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.afa5	85 3b		sta $3b				sta 	gxzTemp2+1
.afa7					_GXROLLoop2:
.afa7	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.afa9	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.afac	50 06		bvc $afb4			bvc 	_GXNoHFlip
.afae	ad e8 06	lda $06e8			lda 	gxMask
.afb1	38		sec				sec
.afb2	e5 3a		sbc $3a				sbc 	gxzTemp2
.afb4					_GXNoHFlip:
.afb4	aa		tax				tax 								; read from the pixel buffer
.afb5	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.afb8	d0 07		bne $afc1			bne 	_GXDraw 					; draw if non zero
.afba	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afbd	29 04		and #$04			and 	#4
.afbf	f0 0a		beq $afcb			beq 	_GXZeroPixel
.afc1					_GXDraw:
.afc1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afc3	2d 52 06	and $0652			and 	gxANDValue
.afc6	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afc9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afcb					_GXZeroPixel:
.afcb	c8		iny				iny 								; advance pointer
.afcc	d0 05		bne $afd3			bne 	_GXNoShift
.afce	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afd0	20 15 af	jsr $af15			jsr 	GXDLTCheckWrap				; check for new page.
.afd3					_GXNoShift:
.afd3	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afd5	d0 d0		bne $afa7			bne 	_GXROLLoop2
.afd7	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afd9	a5 3a		lda $3a				lda 	gxzTemp2
.afdb	cd e7 06	cmp $06e7			cmp 	gxSize
.afde	d0 c2		bne $afa2			bne 	_GXROLLoop1
.afe0	ee 44 06	inc $0644			inc 	gxY0
.afe3	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afe4					GXFontHandler:
.afe4	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afe6	4d 4f 06	eor $064f			eor 	gxMode
.afe9	8d ec 06	sta $06ec			sta 	gxUseMode
.afec	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afee	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.aff0	26 37		rol $37				rol	 	gxzTemp0+1
.aff2	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.aff4	26 37		rol $37				rol	 	gxzTemp0+1
.aff6	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.aff8	26 37		rol $37				rol	 	gxzTemp0+1
.affa	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.affc	09 c0		ora #$c0			ora 	#$C0
.affe	85 37		sta $37				sta 	gxzTemp0+1
.b000	a9 08		lda #$08			lda 	#8 							; size 8x8
.b002	a2 0a		ldx #$0a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.b004	a0 b0		ldy #$b0			ldy 	#GXGetGraphicDataFont >> 8
.b006	20 22 af	jsr $af22			jsr 	GXDrawGraphicElement
.b009	60		rts				rts
.b00a					GXGetGraphicDataFont:
.b00a	8a		txa				txa 								; X->Y
.b00b	a8		tay				tay
.b00c	a6 01		ldx $01				ldx 	1 							; preserve old value
.b00e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.b010	85 01		sta $01				sta 	1
.b012	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.b014	86 01		stx $01				stx 	1 							; put old value back.
.b016	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b018					_GXExpand:
.b018	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b01b	0a		asl a				asl 	a 							; shift bit 7 into C
.b01c	90 08		bcc $b026			bcc 	_GXNoPixel
.b01e	48		pha				pha 								; if set, set pixel buffer to current colour.
.b01f	ad 50 06	lda $0650			lda 	gxColour
.b022	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b025	68		pla				pla
.b026					_GXNoPixel:
.b026	e8		inx				inx 								; do the whole byte.
.b027	e0 08		cpx #$08			cpx 	#8
.b029	d0 ed		bne $b018			bne 	_GXExpand
.b02b	60		rts				rts
.b02c					GXSpriteHandler:
.b02c	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b02e	4d 4f 06	eor $064f			eor 	gxMode
.b031	8d ec 06	sta $06ec			sta 	gxUseMode
.b034	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b036	da		phx				phx
.b037	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap 				; can access sprite information
.b03a	68		pla				pla
.b03b	20 a8 b2	jsr $b2a8			jsr 	GXFindSprite 				; get the sprite address
.b03e	08		php				php
.b03f	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.b042	28		plp				plp
.b043	b0 0a		bcs $b04f			bcs		_GXSHExit 					; exit if find failed.
.b045	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b048	a2 50		ldx #$50			ldx 	#GXSpriteAcquire & $FF
.b04a	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b04c	20 22 af	jsr $af22			jsr 	GXDrawGraphicElement
.b04f					_GXSHExit:
.b04f	60		rts				rts
.b050					GXSpriteAcquire:
.b050	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b053	85 0b		sta $0b				sta 	GXEditSlot
.b055	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b057	a9 00		lda #$00			lda 	#0
.b059	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b05c					_GXTimesRowNumber:
.b05c	18		clc				clc
.b05d	65 36		adc $36				adc 	zTemp0
.b05f	ca		dex				dex
.b060	10 fa		bpl $b05c			bpl 	_GXTimesRowNumber
.b062	64 37		stz $37				stz 	gxzTemp0+1
.b064	0a		asl a				asl 	a 							; row x 2,4,6,8
.b065	26 37		rol $37				rol 	gxzTemp0+1
.b067	0a		asl a				asl 	a 							; row x 4,8,12,16
.b068	26 37		rol $37				rol 	gxzTemp0+1
.b06a	0a		asl a				asl 	a 							; row x 8,16,24,32
.b06b	26 37		rol $37				rol 	gxzTemp0+1
.b06d	85 36		sta $36				sta 	gxzTemp0
.b06f	18		clc				clc 								; add base address.
.b070	a5 36		lda $36				lda 	gxzTemp0
.b072	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b075	85 36		sta $36				sta 	gxzTemp0
.b077	a5 37		lda $37				lda 	gxzTemp0+1
.b079	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b07c					_GXSAFindPage:
.b07c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b07e	90 06		bcc $b086			bcc 	_GXSAFoundPage
.b080	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b082	e6 0b		inc $0b				inc 	GXEditSlot
.b084	80 f6		bra $b07c			bra 	_GXSAFindPage
.b086					_GXSAFoundPage:
.b086	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b088	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b08a	a0 00		ldy #$00			ldy 	#0
.b08c					_GXSACopyLoop:
.b08c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b08e	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b091	c8		iny				iny
.b092	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b095	d0 f5		bne $b08c			bne 	_GXSACopyLoop
.b097	60		rts				rts
.b098					GXSelect:
.b098	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b09b	f0 22		beq $b0bf			beq 	_GXSFail
.b09d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b09f	c9 40		cmp #$40			cmp 	#64
.b0a1	b0 1c		bcs $b0bf			bcs 	_GXSFail
.b0a3	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b0a6	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b0a8	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b0aa	06 36		asl $36				asl 	gxzTemp0
.b0ac	06 36		asl $36				asl 	gxzTemp0
.b0ae	06 36		asl $36				asl 	gxzTemp0
.b0b0	2a		rol a				rol 	a
.b0b1	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b0b3	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b0b6	85 37		sta $37				sta 	gxzTemp0+1
.b0b8	a5 36		lda $36				lda 	gxzTemp0
.b0ba	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0bd	18		clc				clc
.b0be	60		rts				rts
.b0bf					_GXSFail:
.b0bf	38		sec				sec
.b0c0	60		rts				rts
.b0c1					GXSelectImage:
.b0c1	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0c4	f0 74		beq $b13a			beq 	_GXSIFail
.b0c6	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0c9	f0 6f		beq $b13a			beq 	_GXSIFail 					; (checking the MSB)
.b0cb	64 01		stz $01				stz 	1
.b0cd	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0cf	d0 6b		bne $b13c			bne 	_GXSIHide
.b0d1	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0d3	48		pha				pha
.b0d4	20 c7 b1	jsr $b1c7			jsr 	GXOpenBitmap
.b0d7	68		pla				pla
.b0d8	20 a8 b2	jsr $b2a8			jsr 	GXFindSprite
.b0db	b0 5a		bcs $b137			bcs 	_GXSICloseFail 				; no image
.b0dd	a0 01		ldy #$01			ldy 	#1
.b0df	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0e2	85 36		sta $36				sta 	gxzTemp0
.b0e4	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0e7	85 37		sta $37				sta 	gxzTemp0+1
.b0e9	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0ec	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0ee	18		clc				clc
.b0ef	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0f2	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0f5	c8		iny				iny
.b0f6	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0f8	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0fb	69 00		adc #$00			adc 	#0
.b0fd	c8		iny				iny
.b0fe	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b100	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b103	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b105	2a		rol a				rol 	a 							; x 2
.b106	0a		asl a				asl 	a 							; x 4
.b107	0a		asl a				asl 	a 							; x 8
.b108	0a		asl a				asl 	a 							; x 16
.b109	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b10c	0a		asl a				asl 	a 							; 1 shift
.b10d	09 01		ora #$01			ora 	#1 							; enable sprite.
.b10f	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b111	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.b114	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b117	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b11a	29 3f		and #$3f			and 	#$3F
.b11c	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b11f	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b122	6a		ror a				ror 	a 							; shift into bits 6/7
.b123	6a		ror a				ror 	a
.b124	6a		ror a				ror 	a
.b125	29 c0		and #$c0			and 	#$C0
.b127	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b12a	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b12d	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b130	29 7f		and #$7f			and 	#$7F
.b132	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b135	18		clc				clc
.b136	60		rts				rts
.b137					_GXSICloseFail:
.b137	20 cf b1	jsr $b1cf			jsr 	GXCloseBitmap
.b13a					_GXSIFail:
.b13a	38		sec				sec
.b13b	60		rts				rts
.b13c					_GXSIHide:
.b13c	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b13f	85 36		sta $36				sta 	gxzTemp0
.b141	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b144	85 37		sta $37				sta 	gxzTemp0+1
.b146	a9 00		lda #$00			lda 	#0
.b148	92 36		sta ($36)			sta 	(gxzTemp0)
.b14a	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b14d	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b150	09 80		ora #$80			ora 	#$80
.b152	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b155	18		clc				clc
.b156	60		rts				rts
.b157					GXMoveSprite:
.b157	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b15a	f0 65		beq $b1c1			beq 	_GXSIFail
.b15c	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b15f	f0 60		beq $b1c1			beq 	_GXSIFail
.b161	85 37		sta $37				sta 	gxzTemp0+1
.b163	a0 04		ldy #$04			ldy 	#4
.b165	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b168	85 36		sta $36				sta 	gxzTemp0
.b16a	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b16d	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b170	2a		rol a				rol 	a	 						; into bits 0,1.
.b171	2a		rol a				rol 	a
.b172	2a		rol a				rol 	a
.b173	29 03		and #$03			and 	#3
.b175	aa		tax				tax
.b176	bd c3 b1	lda $b1c3,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b179	48		pha				pha
.b17a	18		clc				clc
.b17b	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b17e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b180	c8		iny				iny
.b181	ad 43 06	lda $0643			lda 	gxX0+1
.b184	69 00		adc #$00			adc 	#0
.b186	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b188	c8		iny				iny
.b189	68		pla				pla
.b18a	18		clc				clc
.b18b	6d 44 06	adc $0644			adc 	gxY0
.b18e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b190	a9 00		lda #$00			lda 	#0
.b192	69 00		adc #$00			adc 	#0
.b194	c8		iny				iny
.b195	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b197	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b19a	6e 42 06	ror $0642			ror 	gxX0
.b19d	4e 42 06	lsr $0642			lsr 	gxX0
.b1a0	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b1a3	4e 44 06	lsr $0644			lsr 	gxY0
.b1a6	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b1a9	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b1ac	29 80		and #$80			and 	#$80
.b1ae	0d 42 06	ora $0642			ora 	gxX0
.b1b1	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b1b4	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b1b7	29 c0		and #$c0			and 	#$C0
.b1b9	0d 44 06	ora $0644			ora 	gxY0
.b1bc	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1bf	18		clc				clc
.b1c0	60		rts				rts
.b1c1					_GXSIFail:
.b1c1	38		sec				sec
.b1c2	60		rts				rts
.b1c3					_GXMSOffset:
>b1c3	1c						.byte 	32-8/2
>b1c4	18						.byte 	32-16/2
>b1c5	14						.byte 	32-24/2
>b1c6	10						.byte 	32-32/2
.b1c7					GXOpenBitmap:
.b1c7	78		sei				sei 								; no interrupts here
.b1c8	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1ca	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1cd	58		cli				cli
.b1ce	60		rts				rts
.b1cf					GXCloseBitmap:
.b1cf	78		sei				sei
.b1d0	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1d3	85 0b		sta $0b				sta 	GXEditSlot
.b1d5	58		cli				cli
.b1d6	60		rts				rts
.b1d7					GXPositionCalc:
.b1d7	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1d9	48		pha				pha
.b1da	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1dd	85 3c		sta $3c				sta 	gxzScreen
.b1df	64 3d		stz $3d				stz 	gxzScreen+1
.b1e1	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1e3	26 3d		rol $3d				rol 	gxzScreen+1
.b1e5	06 3c		asl $3c				asl 	gxzScreen
.b1e7	26 3d		rol $3d				rol 	gxzScreen+1
.b1e9	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1ea	65 3c		adc $3c				adc 	gxzScreen
.b1ec	85 3c		sta $3c				sta 	gxzScreen
.b1ee	90 02		bcc $b1f2			bcc 	_GXPCNoCarry
.b1f0	e6 3d		inc $3d				inc 	gxzScreen+1
.b1f2					_GXPCNoCarry:
.b1f2	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1f4	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1f6	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1f8	85 36		sta $36				sta 	gxzTemp0
.b1fa	64 3d		stz $3d				stz 	gxzScreen+1
.b1fc	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1fe					_GXPCMultiply32:
.b1fe	06 3c		asl $3c				asl 	gxzScreen
.b200	26 3d		rol $3d				rol 	gxzScreen+1
.b202	3a		dec a				dec 	a
.b203	d0 f9		bne $b1fe			bne 	_GXPCMultiply32
.b205	18		clc				clc
.b206	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b209	65 3c		adc $3c				adc 	gxzScreen
.b20b	8d 54 06	sta $0654			sta 	gsOffset
.b20e	ad 43 06	lda $0643			lda 	GXX0+1
.b211	65 3d		adc $3d				adc 	gxzScreen+1
.b213	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b215	90 04		bcc $b21b			bcc 	_GXPCNoOverflow
.b217	29 1f		and #$1f			and 	#$1F 						; fix it up
.b219	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b21b					_GXPCNoOverflow:
.b21b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b21d	85 3d		sta $3d				sta 	gxzScreen+1
.b21f	64 3c		stz $3c				stz 	gxzScreen
.b221	18		clc				clc
.b222	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b224	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b227	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b229	68		pla				pla
.b22a	85 36		sta $36				sta 	gxzTemp0
.b22c	60		rts				rts
.b22d					GXMovePositionDown:
.b22d	18		clc				clc 								; add 320 to offset/temp+1
.b22e	ad 54 06	lda $0654			lda 	gsOffset
.b231	69 40		adc #$40			adc 	#64
.b233	8d 54 06	sta $0654			sta 	gsOffset
.b236	a5 3d		lda $3d				lda 	gxzScreen+1
.b238	69 01		adc #$01			adc 	#1
.b23a	85 3d		sta $3d				sta 	gxzScreen+1
.b23c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b23e	90 07		bcc $b247			bcc 	_GXMPDExit
.b240	38		sec				sec  								; next page
.b241	e9 20		sbc #$20			sbc 	#$20
.b243	85 3d		sta $3d				sta 	gxzScreen+1
.b245	e6 0b		inc $0b				inc 	GXEditSlot
.b247					_GXMPDExit:
.b247	60		rts				rts
.b248					GXCollide:
.b248	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b24a	aa		tax				tax
.b24b	05 37		ora $37				ora 	gxzTemp0+1
.b24d	29 c0		and #$c0			and 	#$C0
.b24f	38		sec				sec
.b250	d0 53		bne $b2a5			bne 	_GXCollideFail 				; if either >= 64, fail.
.b252	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b254	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b257	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b25a	30 48		bmi $b2a4			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b25c	18		clc				clc 								; need to calculate sum of sizes.
.b25d	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b260	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b263	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b265	6a		ror a				ror 	a 							; 5/6/7
.b266	4a		lsr a				lsr 	a 							; 4/5/6
.b267	4a		lsr a				lsr 	a 							; 3/4/5
.b268	4a		lsr a				lsr 	a 							; 2/3/4
.b269	18		clc				clc
.b26a	69 08		adc #$08			adc 	#$08
.b26c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b26d	4a		lsr a				lsr 	a
.b26e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b270	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b273	29 3f		and #$3f			and 	#$3F
.b275	85 39		sta $39				sta 	gxzTemp1+1
.b277	38		sec				sec
.b278	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b27b	29 3f		and #$3f			and 	#$3F
.b27d	e5 39		sbc $39				sbc 	gxzTemp1+1
.b27f	b0 03		bcs $b284			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b281	49 ff		eor #$ff			eor 	#$FF
.b283	1a		inc a				inc 	a
.b284					_GXCAbs1:
.b284	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b286	b0 1c		bcs $b2a4			bcs 	_GXOkayFail
.b288	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b28a	38		sec				sec 								; calculate |x1-x0|
.b28b	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b28e	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b291	b0 03		bcs $b296			bcs 	_GXCAbs2
.b293	49 ff		eor #$ff			eor 	#$FF
.b295	1a		inc a				inc 	a
.b296					_GXCAbs2:
.b296	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b298	b0 0a		bcs $b2a4			bcs 	_GXOkayFail
.b29a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b29c	90 02		bcc $b2a0			bcc 	_GXCHaveLowest
.b29e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b2a0					_GXCHaveLowest:
.b2a0	0a		asl a				asl 	a 							; scale to allow for >> 2
.b2a1	0a		asl a				asl 	a
.b2a2	18		clc				clc
.b2a3	60		rts				rts
.b2a4					_GXOkayFail:
.b2a4	18		clc				clc
.b2a5					_GXCollideFail:
.b2a5	a9 ff		lda #$ff			lda 	#$FF
.b2a7	60		rts				rts
.b2a8					GXFindSprite:
.b2a8	aa		tax				tax
.b2a9	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b2ac	85 0b		sta $0b				sta 	GXEditSlot
.b2ae	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b2b1	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b2b4	f0 33		beq $b2e9			beq 	_GXFSFail
.b2b6	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b2b9	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2bc	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2bf	48		pha				pha 								; save twice
.b2c0	48		pha				pha
.b2c1	29 03		and #$03			and 	#3 							; get sprite size
.b2c3	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2c6	aa		tax				tax
.b2c7	bd eb b2	lda $b2eb,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2ca	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2cd	68		pla				pla 								; get LUT
.b2ce	4a		lsr a				lsr		a
.b2cf	4a		lsr a				lsr		a
.b2d0	29 03		and #$03			and 	#3
.b2d2	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2d5	68		pla				pla 								; address, neeeds to be x 4
.b2d6	29 f0		and #$f0			and 	#$F0
.b2d8	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2db	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2de	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2e1	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2e4	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2e7	18		clc				clc
.b2e8	60		rts				rts
.b2e9					_GXFSFail:
.b2e9	38		sec				sec
.b2ea	60		rts				rts
.b2eb					_GXFXSSTTable:
>b2eb	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2ef					GXSortXY:
.b2ef	20 0d b3	jsr $b30d			jsr 	GXSortY 					; will be sorted on Y now
.b2f2	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2f5	cd 46 06	cmp $0646			cmp 	gxX1
.b2f8	ad 43 06	lda $0643			lda 	gXX0+1
.b2fb	ed 47 06	sbc $0647			sbc 	gXX1+1
.b2fe	90 0c		bcc $b30c			bcc 	_GXSXYExit 					; X0 < X1 exit
.b300	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b302	a0 04		ldy #$04			ldy 	#4
.b304	20 21 b3	jsr $b321			jsr 	GXSwapXY
.b307	e8		inx				inx
.b308	c8		iny				iny
.b309	20 21 b3	jsr $b321			jsr 	GXSwapXY
.b30c					_GXSXYExit:
.b30c	60		rts				rts
.b30d					GXSortY:
.b30d	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b310	cd 48 06	cmp $0648			cmp 	gxY1
.b313	90 0b		bcc $b320			bcc 	_GXSYSorted
.b315	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b317	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b319					_GXSwap1:
.b319	20 21 b3	jsr $b321			jsr 	GXSwapXY
.b31c	88		dey				dey
.b31d	ca		dex				dex
.b31e	10 f9		bpl $b319			bpl 	_GXSwap1
.b320					_GXSYSorted:
.b320	60		rts				rts
.b321					GXSwapXY:
.b321	bd 42 06	lda $0642,x			lda 	gxX0,x
.b324	48		pha				pha
.b325	b9 42 06	lda $0642,y			lda 	gxX0,y
.b328	9d 42 06	sta $0642,x			sta 	gxX0,x
.b32b	68		pla				pla
.b32c	99 42 06	sta $0642,y			sta 	gxX0,y
.b32f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b821					KeywordSet0:
>b821	00 65					.text	0,$65,""               ; $80 !0:EOF
>b823	00 58					.text	0,$58,""               ; $81 !1:SH1
>b825	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b827	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b82d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b835	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b83b	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b842	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b84a	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b851	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b858	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b85e	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b864	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b86c	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b873	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b87a	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b881	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b889	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b88f	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b895	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b89c	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b8a2	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b8a8	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b8b0	28
>b8b1	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b8b9	28
>b8ba	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b8c0	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b8c6	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b8cc	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b8d3	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b8db	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b8e1	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b8e7	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b8ec	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b8f0	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b8f6	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b8fe	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b905	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b90c	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b914	43
>b915	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b91b	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b921	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b928	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b92e	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b932	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b938	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b940	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b947	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b94c	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b953	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b95b	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b961	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b966	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b96e	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b974	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b97a	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b97f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b986	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b98c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b992	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b999	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b99e	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b9a4	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b9ab	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b9b0	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b9b4	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b9bc	45
>b9bd	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b9c5	45
>b9c6	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b9cc	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b9d3	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b9d9	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b9df	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b9e4	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b9ec	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b9f3	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b9fb	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>ba01	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>ba05	ff					.text	$FF
.ba06					KeywordSet1:
>ba06	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba08	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba0a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba0c	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>ba14	4c 45
>ba16	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba1e	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba26	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba2b	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba31	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba36	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba3e	45
>ba3f	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba44	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba4c	53
>ba4d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba53	ff					.text	$FF
.ba54					KeywordSet2:
>ba54	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba56	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba58	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba5a	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba5f	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba64	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba69	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba6e	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba73	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba78	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba7d	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba82	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba87	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba8c	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba91	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba96	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ba9b	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>baa0	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>baa5	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>baaa	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>baaf	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>bab4	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>bab9	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>babe	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>bac3	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>bac8	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bacd	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bad2	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>bad7	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>badc	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bae1	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>bae6	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>baeb	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>baf0	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>baf5	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bafa	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>baff	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bb04	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bb09	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bb0e	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bb13	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb18	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb1d	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb22	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb27	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb2c	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb31	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb36	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb3b	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb40	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb45	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb4a	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb4f	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb54	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb59	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb5e	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb63	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb68	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb6d	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb72	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb77	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb7c	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb81	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb86	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb8b	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb90	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb95	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bb9a	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bb9f	ff					.text	$FF
.b330					ListConvertLine:
.b330	48		pha				pha 								; save indent on the stack
.b331	9c 9d 04	stz $049d			stz 	tbOffset
.b334	9c ab 04	stz $04ab			stz 	tokenBuffer
.b337	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b339	b1 30		lda ($30),y			lda 	(codePtr),y
.b33b	aa		tax				tax
.b33c	88		dey				dey
.b33d	b1 30		lda ($30),y			lda 	(codePtr),y
.b33f	20 65 92	jsr $9265			jsr 	LCLConvertInt16
.b342	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b344	86 37		stx $37				stx 	zTemp0+1
.b346	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b348	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b34b	a0 00		ldy #$00			ldy 	#0
.b34d					_LCCopyNumber:
.b34d	b1 36		lda ($36),y			lda 	(zTemp0),y
.b34f	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b352	c8		iny				iny
.b353	b1 36		lda ($36),y			lda 	(zTemp0),y
.b355	d0 f6		bne $b34d			bne 	_LCCopyNumber
.b357	68		pla				pla 								; adjustment to indent
.b358	48		pha				pha 								; save on stack
.b359	10 0c		bpl $b367			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b35b	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b35c	6d a6 04	adc $04a6			adc 	listIndent
.b35f	8d a6 04	sta $04a6			sta 	listIndent
.b362	10 03		bpl $b367			bpl 	_LCNoAdjust
.b364	9c a6 04	stz $04a6			stz 	listIndent
.b367					_LCNoAdjust:
.b367	18		clc				clc		 							; work out actual indent.
.b368	ad a6 04	lda $04a6			lda 	listIndent
.b36b	0a		asl a				asl 	a
.b36c	69 06		adc #$06			adc 	#6
.b36e	85 36		sta $36				sta 	zTemp0
.b370					_LCPadOut:
.b370	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b372	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b375	ad 9d 04	lda $049d			lda 	tbOffset
.b378	c5 36		cmp $36				cmp 	zTemp0
.b37a	d0 f4		bne $b370			bne 	_LCPadOut
.b37c	a0 03		ldy #$03			ldy 	#3 							; start position.
.b37e					_LCMainLoop:
.b37e	a9 87		lda #$87			lda 	#CLIPunctuation+$80
.b380	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b383	b1 30		lda ($30),y			lda 	(codePtr),y
.b385	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b387	f0 17		beq $b3a0			beq 	_LCExit
.b389	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b38b	90 1e		bcc $b3ab			bcc 	_LCDoubles
.b38d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b38f	90 2a		bcc $b3bb			bcc 	_LCShiftPunc
.b391	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b393	90 35		bcc $b3ca			bcc 	_LCPunctuation
.b395	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b397	90 3e		bcc $b3d7			bcc 	_LCIdentifiers
.b399	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b39b	90 5f		bcc $b3fc			bcc 	_LCTokens
.b39d	4c 5c b4	jmp $b45c			jmp 	_LCData 					; 254-5 are data objects
.b3a0					_LCExit:
.b3a0	68		pla				pla 								; get old indent adjust
.b3a1	30 07		bmi $b3aa			bmi 	_LCExit2
.b3a3	18		clc				clc 								; add to indent if +ve
.b3a4	6d a6 04	adc $04a6			adc 	listIndent
.b3a7	8d a6 04	sta $04a6			sta 	listIndent
.b3aa					_LCExit2:
.b3aa	60		rts				rts
.b3ab					_LCDoubles:
.b3ab	48		pha				pha
.b3ac	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b3ad	29 02		and #$02			and 	#2
.b3af	09 3c		ora #$3c			ora 	#60 						; make < >
.b3b1	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b3b4	68		pla				pla 								; restore, do lower bit
.b3b5	29 03		and #$03			and 	#3
.b3b7	09 3c		ora #$3c			ora 	#60
.b3b9	80 0f		bra $b3ca			bra		_LCPunctuation 				; print, increment, loop
.b3bb					_LCShiftPunc:
.b3bb	aa		tax				tax 								; save in X
.b3bc	29 07		and #$07			and 	#7 							; lower 3 bits
.b3be	f0 02		beq $b3c2			beq 	_LCNoAdd
.b3c0	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3c2					_LCNoAdd:
.b3c2	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3c4	90 02		bcc $b3c8			bcc 	_LCNoAdd2
.b3c6	09 20		ora #$20			ora 	#32 						; adds $20
.b3c8					_LCNoAdd2:
.b3c8	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3ca					_LCPunctuation:
.b3ca	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3cc	d0 03		bne $b3d1			bne 	_LCPContinue
.b3ce	20 a3 b4	jsr $b4a3			jsr 	LCLDeleteLastSpace
.b3d1					_LCPContinue:
.b3d1	c8		iny				iny 								; consume character
.b3d2	20 8d b4	jsr $b48d			jsr 	LCLWrite 					; write it out.
.b3d5	80 a7		bra $b37e			bra 	_LCMainLoop 				; go round again.
.b3d7					_LCIdentifiers:
.b3d7	18		clc				clc 								; convert to physical address
.b3d8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3da	85 37		sta $37				sta 	zTemp0+1
.b3dc	c8		iny				iny
.b3dd	b1 30		lda ($30),y			lda 	(codePtr),y
.b3df	85 36		sta $36				sta 	zTemp0
.b3e1	c8		iny				iny
.b3e2	5a		phy				phy 								; save position
.b3e3	a9 8a		lda #$8a			lda 	#CLIIdentifier+$80
.b3e5	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b3e8	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3ea					_LCOutIdentifier:
.b3ea	c8		iny				iny
.b3eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3ed	29 7f		and #$7f			and 	#$7F
.b3ef	20 df b4	jsr $b4df			jsr 	LCLLowerCase
.b3f2	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b3f5	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3f7	10 f1		bpl $b3ea			bpl 	_LCOutIdentifier
.b3f9	7a		ply				ply 								; restore position
.b3fa	80 82		bra $b37e			bra 	_LCMainLoop
.b3fc					_LCTokens:
.b3fc	aa		tax				tax 								; token in X
.b3fd	a9 54		lda #$54			lda 	#((KeywordSet2) & $FF)
.b3ff	85 36		sta $36				sta 	0+zTemp0
.b401	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b403	85 37		sta $37				sta 	1+zTemp0
.b405	e0 82		cpx #$82			cpx 	#$82
.b407	f0 16		beq $b41f			beq 	_LCUseShift
.b409	a9 06		lda #$06			lda 	#((KeywordSet1) & $FF)
.b40b	85 36		sta $36				sta 	0+zTemp0
.b40d	a9 ba		lda #$ba			lda 	#((KeywordSet1) >> 8)
.b40f	85 37		sta $37				sta 	1+zTemp0
.b411	e0 81		cpx #$81			cpx 	#$81
.b413	f0 0a		beq $b41f			beq 	_LCUseShift
.b415	a9 21		lda #$21			lda 	#((KeywordSet0) & $FF)
.b417	85 36		sta $36				sta 	0+zTemp0
.b419	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b41b	85 37		sta $37				sta 	1+zTemp0
.b41d	80 01		bra $b420			bra 	_LCNoShift
.b41f					_LCUseShift:
.b41f	c8		iny				iny
.b420					_LCNoShift:
.b420	20 b7 b4	jsr $b4b7			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.b423	b1 30		lda ($30),y			lda 	(codePtr),y
.b425	aa		tax				tax 								; into X
.b426					_LCFindText:
.b426	ca		dex				dex
.b427	10 0e		bpl $b437			bpl 	_LCFoundText 				; found text.
.b429	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b42b	1a		inc a				inc 	a 							; one extra for size
.b42c	38		sec				sec 								; one extra for checksum
.b42d	65 36		adc $36				adc 	zTemp0 						; go to next token
.b42f	85 36		sta $36				sta 	zTemp0
.b431	90 f3		bcc $b426			bcc 	_LCFindText
.b433	e6 37		inc $37				inc 	zTemp0+1
.b435	80 ef		bra $b426			bra 	_LCFindText
.b437					_LCFoundText:
.b437	5a		phy				phy 								; save List position
.b438	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b43a	aa		tax				tax
.b43b	a9 83		lda #$83			lda 	#CLIToken+$80
.b43d	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b440	a0 02		ldy #$02			ldy 	#2
.b442					_LCCopyToken:
.b442	b1 36		lda ($36),y			lda 	(zTemp0),y
.b444	20 df b4	jsr $b4df			jsr 	LCLLowerCase
.b447	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b44a	c8		iny				iny
.b44b	ca		dex				dex
.b44c	d0 f4		bne $b442			bne 	_LCCopyToken
.b44e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b450	f0 05		beq $b457			beq 	_LCNoSpace
.b452	a9 20		lda #$20			lda 	#' '
.b454	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b457					_LCNoSpace:
.b457	7a		ply				ply 								; restore position.
.b458	c8		iny				iny 								; consume token
.b459	4c 7e b3	jmp $b37e			jmp 	_LCMainLoop 				; and go around again.
.b45c					_LCData:
.b45c	48		pha				pha 								; save type $FE/$FF
.b45d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b45f	c9 fe		cmp #$fe			cmp 	#$FE
.b461	f0 07		beq $b46a			beq 	_LCHaveOpener
.b463	a2 22		ldx #$22			ldx 	#'"'
.b465	a9 81		lda #$81			lda 	#CLIData+$80
.b467	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b46a					_LCHaveOpener:
.b46a	8a		txa				txa 								; output prefix (# or ")
.b46b	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b46e	c8		iny				iny 								; get count
.b46f	b1 30		lda ($30),y			lda 	(codePtr),y
.b471	aa		tax				tax
.b472	c8		iny				iny 								; point at first character
.b473					_LCOutData:
.b473	b1 30		lda ($30),y			lda 	(codePtr),y
.b475	c9 00		cmp #$00			cmp 	#0
.b477	f0 03		beq $b47c			beq 	_LCNoPrint
.b479	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b47c					_LCNoPrint:
.b47c	c8		iny				iny
.b47d	ca		dex				dex
.b47e	d0 f3		bne $b473			bne 	_LCOutData
.b480	68		pla				pla 								; closing " required ?
.b481	c9 ff		cmp #$ff			cmp 	#$FF
.b483	d0 05		bne $b48a			bne 	_LCNoQuote
.b485	a9 22		lda #$22			lda 	#'"'
.b487	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b48a					_LCNoQuote:
.b48a	4c 7e b3	jmp $b37e			jmp 	_LCMainLoop
.b48d					LCLWrite:
.b48d	da		phx				phx
.b48e	ae 9d 04	ldx $049d			ldx 	tbOffset
.b491	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b494	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b497	ee 9d 04	inc $049d			inc 	tbOffset
.b49a	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b49c	30 03		bmi $b4a1			bmi 	_LCLNoColour
.b49e	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b4a1					_LCLNoColour:
.b4a1	fa		plx				plx
.b4a2	60		rts				rts
.b4a3					LCLDeleteLastSpace:
.b4a3	48		pha				pha
.b4a4	da		phx				phx
.b4a5	ae 9d 04	ldx $049d			ldx 	tbOffset
.b4a8	f0 0a		beq $b4b4			beq 	_LCDLSExit
.b4aa	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b4ad	c9 20		cmp #$20			cmp 	#' '
.b4af	d0 03		bne $b4b4			bne 	_LCDLSExit
.b4b1	ce 9d 04	dec $049d			dec 	tbOffset
.b4b4					_LCDLSExit:
.b4b4	fa		plx				plx
.b4b5	68		pla				pla
.b4b6	60		rts				rts
.b4b7					LCLCheckSpaceRequired:
.b4b7	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4ba	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4bc	f0 1b		beq $b4d9			beq 	_LCCSRSpace
.b4be	c9 29		cmp #$29			cmp 	#')'
.b4c0	f0 17		beq $b4d9			beq 	_LCCSRSpace
.b4c2	c9 23		cmp #$23			cmp 	#'#'
.b4c4	f0 13		beq $b4d9			beq 	_LCCSRSpace
.b4c6	20 df b4	jsr $b4df			jsr 	LCLLowerCase 				; saves a little effort
.b4c9	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4cb	90 11		bcc $b4de			bcc 	_LCCSRExit
.b4cd	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4cf	90 08		bcc $b4d9			bcc 	_LCCSRSpace
.b4d1	c9 61		cmp #$61			cmp 	#"a"
.b4d3	90 09		bcc $b4de			bcc 	_LCCSRExit
.b4d5	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4d7	b0 05		bcs $b4de			bcs 	_LCCSRExit
.b4d9					_LCCSRSpace:
.b4d9	a9 20		lda #$20			lda 	#' '
.b4db	20 8d b4	jsr $b48d			jsr 	LCLWrite
.b4de					_LCCSRExit:
.b4de	60		rts				rts
.b4df					LCLLowerCase:
.b4df	c9 41		cmp #$41			cmp 	#"A"
.b4e1	90 06		bcc $b4e9			bcc 	_LCLLCOut
.b4e3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4e5	b0 02		bcs $b4e9			bcs 	_LCLLCOut
.b4e7	69 20		adc #$20			adc 	#$20
.b4e9					_LCLLCOut:
.b4e9	60		rts				rts
.b4ea					LCLUpperCase:
.b4ea	c9 61		cmp #$61			cmp 	#"a"
.b4ec	90 06		bcc $b4f4			bcc 	_LCLUCOut
.b4ee	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4f0	b0 02		bcs $b4f4			bcs 	_LCLUCOut
.b4f2	e9 1f		sbc #$1f			sbc 	#$1F
.b4f4					_LCLUCOut:
.b4f4	60		rts				rts
.b4f5					TOKSearchTable:
.b4f5	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4f7	85 36		sta $36				sta 	zTemp0
.b4f9	a0 00		ldy #$00			ldy 	#0
.b4fb	a9 80		lda #$80			lda 	#$80 						; token #
.b4fd	85 38		sta $38				sta 	zTemp1
.b4ff					_TSTLoop:
.b4ff	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b501	30 49		bmi $b54c			bmi 	_TSTFail 					; -ve = end of table
.b503	f0 2e		beq $b533			beq 	_TSTNext 					; zero, check next it's a dummy
.b505	c8		iny				iny 								; get the hash
.b506	b1 36		lda ($36),y			lda 	(zTemp0),y
.b508	88		dey				dey
.b509	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b50c	d0 25		bne $b533			bne 	_TSTNext
.b50e	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b511	38		sec				sec
.b512	ed 80 04	sbc $0480			sbc 	identStart
.b515	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b517	d0 1a		bne $b533			bne 	_TSTNext
.b519	5a		phy				phy 								; save Y , we might fail
.b51a	c8		iny				iny 								; point to text
.b51b	c8		iny				iny
.b51c	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b51f					_TSTCompareName:
.b51f	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b522	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b524	d0 0c		bne $b532			bne 	_TSTNextPullY 				; fail, pullY and do next
.b526	e8		inx				inx
.b527	c8		iny				iny
.b528	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b52b	d0 f2		bne $b51f			bne 	_TSTCompareName
.b52d	7a		ply				ply 								; throw Y
.b52e	a5 38		lda $38				lda 	zTemp1 						; get token #
.b530	38		sec				sec 								; return with CS = passed.
.b531	60		rts				rts
.b532					_TSTNextPullY:
.b532	7a		ply				ply 								; restore current, fall through.
.b533					_TSTNext:
.b533	e6 38		inc $38				inc 	zTemp1 						; token counter
.b535	98		tya				tya
.b536	18		clc				clc
.b537	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b539	1a		inc a				inc 	a 							; +1
.b53a	1a		inc a				inc 	a 							; +2
.b53b	a8		tay				tay
.b53c	10 c1		bpl $b4ff			bpl 	_TSTLoop 					; if Y < $80 loop back
.b53e	98		tya				tya 								; add Y to zTemp0 and reset Y
.b53f	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b541	18		clc				clc  								; but have tables > 255 bytes
.b542	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b544	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b546	90 b7		bcc $b4ff			bcc 	_TSTLoop
.b548	e6 37		inc $37				inc 	zTemp0+1
.b54a	80 b3		bra $b4ff			bra 	_TSTLoop
.b54c					_TSTFail:
.b54c	18		clc				clc
.b54d	60		rts				rts
.b54e					TokeniseLine:
.b54e	20 d6 b6	jsr $b6d6			jsr 	LCLFixLineBufferCase 		; fix line case
.b551	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b553	8d a8 04	sta $04a8			sta 	tokenOffset
.b556	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b559	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b55c	a2 ff		ldx #$ff			ldx 	#$FF
.b55e					_TKFindFirst:
.b55e	e8		inx				inx
.b55f	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b562	f0 79		beq $b5dd			beq 	_TKExit
.b564	c9 20		cmp #$20			cmp 	#' '
.b566	90 f6		bcc $b55e			bcc 	_TKFindFirst
.b568	c9 30		cmp #$30			cmp 	#'0'
.b56a	90 07		bcc $b573			bcc 	_TKNoLineNumber
.b56c	c9 3a		cmp #$3a			cmp 	#'9'+1
.b56e	b0 03		bcs $b573			bcs 	_TKNoLineNumber
.b570	20 00 b7	jsr $b700			jsr 	TOKExtractLineNumber
.b573					_TKNoLineNumber:
.b573					_TKTokeniseLoop:
.b573	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b576	f0 65		beq $b5dd			beq 	_TKExit
.b578	e8		inx				inx
.b579	c9 20		cmp #$20			cmp 	#' '
.b57b	f0 f6		beq $b573			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b57d	ca		dex				dex 								; undo last get, A contains character, X is position.
.b57e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b580	f0 61		beq $b5e3			beq 	_TKTokeniseIdentifier
.b582	c9 41		cmp #$41			cmp 	#'A'
.b584	90 04		bcc $b58a			bcc 	_TKTokenisePunctuation
.b586	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b588	90 59		bcc $b5e3			bcc 	_TKTokeniseIdentifier
.b58a					_TKTokenisePunctuation:
.b58a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b58c	f0 27		beq $b5b5			beq 	_TKString
.b58e	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b590	f0 28		beq $b5ba			beq 	_TKHexConstant
.b592	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b594	f0 29		beq $b5bf			beq 	_TKCheckDouble
.b596	c9 3e		cmp #$3e			cmp 	#'>'
.b598	f0 25		beq $b5bf			beq 	_TKCheckDouble
.b59a					_TKStandardPunctuation:
.b59a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b59d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b59f	90 0e		bcc $b5af			bcc 	_TKNoShift
.b5a1	48		pha				pha 								; save
.b5a2	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b5a4	85 36		sta $36				sta 	zTemp0
.b5a6	68		pla				pla
.b5a7	29 20		and #$20			and 	#32 						; bit 5
.b5a9	4a		lsr a				lsr 	a 							; shift into bit 3
.b5aa	4a		lsr a				lsr 	a
.b5ab	05 36		ora $36				ora 	zTemp0
.b5ad	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b5af					_TKNoShift:
.b5af	20 45 b7	jsr $b745			jsr 	TOKWriteByte 				; write the punctuation character
.b5b2	e8		inx				inx 								; consume the character
.b5b3	80 be		bra $b573			bra 	_TKTokeniseLoop 			; and loop round again.
.b5b5					_TKString:
.b5b5	20 65 b6	jsr $b665			jsr 	TOKTokenString
.b5b8	80 b9		bra $b573			bra 	_TKTokeniseLoop
.b5ba					_TKHexConstant:
.b5ba	20 a0 b6	jsr $b6a0			jsr 	TOKHexConstant
.b5bd	80 b4		bra $b573			bra 	_TKTokeniseLoop
.b5bf					_TKCheckDouble:
.b5bf	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5c2	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5c4	90 d4		bcc $b59a			bcc 	_TKStandardPunctuation
.b5c6	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5c8	b0 d0		bcs $b59a			bcs 	_TKStandardPunctuation
.b5ca	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5cd	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5cf	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5d0	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5d3	38		sec				sec
.b5d4	e9 3c		sbc #$3c			sbc 	#'<'
.b5d6	20 45 b7	jsr $b745			jsr 	TOKWriteByte 				; this is in the range 0-7
.b5d9	e8		inx				inx 								; consume both
.b5da	e8		inx				inx
.b5db	80 96		bra $b573			bra 	_TKTokeniseLoop
.b5dd	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5df	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b5e2	60		rts				rts
.b5e3					_TKTokeniseIdentifier:
.b5e3	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5e6	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5e9					_TKCheckLoop:
.b5e9	e8		inx				inx 								; look at next, we know first is identifier.
.b5ea	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5ed	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5ef	f0 f8		beq $b5e9			beq 	_TKCheckLoop
.b5f1	c9 30		cmp #$30			cmp	 	#"0"
.b5f3	90 0c		bcc $b601			bcc 	_TKEndIdentifier
.b5f5	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5f7	90 f0		bcc $b5e9			bcc 	_TKCheckLoop
.b5f9	c9 41		cmp #$41			cmp	 	#"A"
.b5fb	90 04		bcc $b601			bcc 	_TKEndIdentifier
.b5fd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b5ff	90 e8		bcc $b5e9			bcc 	_TKCheckLoop
.b601					_TKEndIdentifier:
.b601	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b604	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b606	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b608	f0 06		beq $b610			beq 	_TKHasTypeCharacter
.b60a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b60c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b60e	d0 07		bne $b617			bne 	_TKNoTypeCharacter
.b610					_TKHasTypeCharacter:
.b610	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b613	e8		inx				inx 								; read next
.b614	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b617					_TKNoTypeCharacter:
.b617	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b619	d0 09		bne $b624			bne 	_TKNoArray
.b61b	e8		inx				inx 								; skip the (
.b61c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b61f	09 04		ora #$04			ora 	#$04
.b621	8d 84 04	sta $0484			sta 	identTypeByte
.b624					_TKNoArray:
.b624	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b627	20 c1 b6	jsr $b6c1			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.b62a	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b62c	a9 21		lda #$21			lda 	#(KeywordSet0) & $FF
.b62e	20 f5 b4	jsr $b4f5			jsr 	TOKSearchTable
.b631	a2 00		ldx #$00			ldx 	#0
.b633	b0 1f		bcs $b654			bcs 	_TKFoundToken
.b635	a0 ba		ldy #$ba			ldy 	#(KeywordSet1) >> 8
.b637	a9 06		lda #$06			lda 	#(KeywordSet1) & $FF
.b639	20 f5 b4	jsr $b4f5			jsr 	TOKSearchTable
.b63c	a2 81		ldx #$81			ldx 	#$81
.b63e	b0 14		bcs $b654			bcs 	_TKFoundToken
.b640	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b642	a9 54		lda #$54			lda 	#(KeywordSet2) & $FF
.b644	20 f5 b4	jsr $b4f5			jsr 	TOKSearchTable
.b647	a2 82		ldx #$82			ldx 	#$82
.b649	b0 09		bcs $b654			bcs 	_TKFoundToken
.b64b	20 51 b7	jsr $b751			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.b64e	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b651	4c 73 b5	jmp $b573			jmp 	_TKTokeniseLoop 			; and go round again.
.b654					_TKFoundToken:
.b654	48		pha				pha 								; save token
.b655	8a		txa				txa 								; shift in X, is there one ?
.b656	f0 03		beq $b65b			beq 	_TKNoTShift
.b658	20 45 b7	jsr $b745			jsr 	TOKWriteByte 				; if so, write it out
.b65b					_TKNoTShift:
.b65b	68		pla				pla 								; restore and write token
.b65c	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b65f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b662	4c 73 b5	jmp $b573			jmp 	_TKTokeniseLoop 			; and go round again.
.b665					TOKTokenString:
.b665	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b667	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b66a	e8		inx				inx									; start of quoted string.
.b66b	da		phx				phx 								; push start of string on top
.b66c	ca		dex				dex
.b66d					_TSFindEnd:
.b66d	e8		inx				inx
.b66e	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b671	f0 04		beq $b677			beq 	_TSEndOfString
.b673	c9 22		cmp #$22			cmp 	#'"'
.b675	d0 f6		bne $b66d			bne 	_TSFindEnd
.b677					_TSEndOfString:
.b677	7a		ply				ply  								; so now Y is first character, X is character after end.
.b678	48		pha				pha 								; save terminating character
.b679	20 81 b6	jsr $b681			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.b67c	68		pla				pla 								; terminating character
.b67d	f0 01		beq $b680			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b67f	e8		inx				inx
.b680					_TSNotQuote:
.b680	60		rts				rts
.b681					TOKWriteBlockXY:
.b681	86 36		stx $36				stx 	zTemp0 						; write end character
.b683	98		tya				tya
.b684	49 ff		eor #$ff			eor 	#$FF
.b686	38		sec				sec
.b687	65 36		adc $36				adc 	zTemp0
.b689	1a		inc a				inc 	a 							; one extra for NULL
.b68a	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b68d					_TOBlockLoop:
.b68d	c4 36		cpy $36				cpy 	zTemp0
.b68f	f0 09		beq $b69a			beq 	_TOBlockExit
.b691	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b694	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b697	c8		iny				iny
.b698	80 f3		bra $b68d			bra 	_TOBlockLoop
.b69a					_TOBlockExit:
.b69a	a9 00		lda #$00			lda 	#0
.b69c	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b69f	60		rts				rts
.b6a0					TOKHexConstant:
.b6a0	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b6a2	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b6a5	e8		inx				inx									; start of quoted string.
.b6a6	da		phx				phx 								; push start of constant on top
.b6a7	ca		dex				dex
.b6a8					_THFindLoop:
.b6a8	e8		inx				inx
.b6a9	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b6ac	c9 30		cmp #$30			cmp 	#"0"
.b6ae	90 0c		bcc $b6bc			bcc 	_THFoundEnd
.b6b0	c9 3a		cmp #$3a			cmp 	#"9"+1
.b6b2	90 f4		bcc $b6a8			bcc 	_THFindLoop
.b6b4	c9 41		cmp #$41			cmp 	#"A"
.b6b6	90 04		bcc $b6bc			bcc 	_THFoundEnd
.b6b8	c9 47		cmp #$47			cmp 	#"F"+1
.b6ba	90 ec		bcc $b6a8			bcc 	_THFindLoop
.b6bc					_THFoundEnd:
.b6bc	7a		ply				ply 								; restore start
.b6bd	20 81 b6	jsr $b681			jsr 	TOKWriteBlockXY 			; output the block
.b6c0	60		rts				rts
.b6c1					TOKCalculateHash:
.b6c1	da		phx				phx
.b6c2	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6c5	a9 00		lda #$00			lda 	#0
.b6c7					_TCHLoop:
.b6c7	18		clc				clc
.b6c8	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6cb	e8		inx				inx
.b6cc	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6cf	d0 f6		bne $b6c7			bne 	_TCHLoop
.b6d1	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6d4	fa		plx				plx
.b6d5	60		rts				rts
.b6d6					LCLFixLineBufferCase:
.b6d6	a2 00		ldx #$00			ldx 	#0
.b6d8					_FLBCLoop:
.b6d8	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6db	f0 22		beq $b6ff			beq 	_FLBCExit 					; end of string.
.b6dd	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6df	f0 11		beq $b6f2			beq 	_FLBCInQuotes
.b6e1	e8		inx				inx
.b6e2	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6e4	90 f2		bcc $b6d8			bcc 	_FLBCLoop
.b6e6	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6e8	b0 ee		bcs $b6d8			bcs 	_FLBCLoop
.b6ea	38		sec				sec 								; make U/C
.b6eb	e9 20		sbc #$20			sbc 	#32
.b6ed	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6f0	80 e6		bra $b6d8			bra 	_FLBCLoop
.b6f2					_FLBCInQuotes:
.b6f2	e8		inx				inx 								; advance
.b6f3	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6f6	f0 07		beq $b6ff			beq 	_FLBCExit 					; exit on EOS
.b6f8	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6fa	d0 f6		bne $b6f2			bne 	_FLBCInQuotes
.b6fc	e8		inx				inx 								; skip over it
.b6fd	80 d9		bra $b6d8			bra 	_FLBCLoop
.b6ff					_FLBCExit:
.b6ff	60		rts				rts
.b700					TOKExtractLineNumber:
.b700	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b703	48		pha				pha
.b704	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b707	48		pha				pha
.b708	20 3e b7	jsr $b73e			jsr 	_LCLNTimes2 				; line # x 4
.b70b	20 3e b7	jsr $b73e			jsr 	_LCLNTimes2 				; line # x 2
.b70e	18		clc				clc 								; add stacked value
.b70f	68		pla				pla
.b710	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b713	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b716	68		pla				pla
.b717	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b71a	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b71d	20 3e b7	jsr $b73e			jsr 	_LCLNTimes2 				; line # x 10
.b720	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b723	e8		inx				inx
.b724	29 0f		and #$0f			and 	#15 						; add to line #
.b726	18		clc				clc
.b727	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b72a	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b72d	90 03		bcc $b732			bcc 	_TLENNoCarry
.b72f	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b732					_TLENNoCarry:
.b732	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b735	c9 30		cmp #$30			cmp 	#'0'
.b737	90 04		bcc $b73d			bcc 	_TLENExit
.b739	c9 3a		cmp #$3a			cmp 	#'9'+1
.b73b	90 c3		bcc $b700			bcc 	TOKExtractLineNumber
.b73d					_TLENExit:
.b73d	60		rts				rts
.b73e					_LCLNTimes2:
.b73e	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b741	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b744	60		rts				rts
.b745					TOKWriteByte:
.b745	da		phx				phx
.b746	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b749	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b74c	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b74f	fa		plx				plx
.b750	60		rts				rts
.b751					TOKCheckCreateVariableRecord:
.b751	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b753	85 36		sta $36				sta 	0+zTemp0
.b755	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b757	85 37		sta $37				sta 	1+zTemp0
.b759					_CCVSearch:
.b759	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b75b	f0 2c		beq $b789			beq 	_CCVFail
.b75d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b75f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b761	cd 83 04	cmp $0483			cmp 	identHash
.b764	d0 16		bne $b77c			bne 	_CCVNext
.b766	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b768	ae 80 04	ldx $0480			ldx 	identStart
.b76b					_CCVCompare:
.b76b	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b76e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b770	e8		inx				inx 								; advance pointers
.b771	c8		iny				iny
.b772	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b773	d0 07		bne $b77c			bne 	_CCVNext  					; didn't match go to next.
.b775	90 f4		bcc $b76b			bcc 	_CCVCompare 				; not finished yet.
.b777	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b77a	f0 41		beq $b7bd			beq 	_CCVFound 					; yes, we were successful
.b77c					_CCVNext:
.b77c	18		clc				clc
.b77d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b77f	65 36		adc $36				adc 	zTemp0
.b781	85 36		sta $36				sta 	zTemp0
.b783	90 d4		bcc $b759			bcc 	_CCVSearch
.b785	e6 37		inc $37				inc 	zTemp0+1
.b787	80 d0		bra $b759			bra 	_CCVSearch
.b789					_CCVFail:
.b789	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b78b	ad 83 04	lda $0483			lda 	identHash
.b78e	91 36		sta ($36),y			sta 	(zTemp0),y
.b790	c8		iny				iny 								; offset 2 is the type byte
.b791	ad 84 04	lda $0484			lda 	identTypeByte
.b794	91 36		sta ($36),y			sta 	(zTemp0),y
.b796	c8		iny				iny
.b797					_CCVData:
.b797	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b799	91 36		sta ($36),y			sta 	(zTemp0),y
.b79b	c8		iny				iny
.b79c	c0 08		cpy #$08			cpy 	#8
.b79e	90 f7		bcc $b797			bcc 	_CCVData
.b7a0	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b7a3					_CCVCopyName:
.b7a3	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b7a6	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a8	e8		inx				inx
.b7a9	c8		iny				iny
.b7aa	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b7ad	d0 f4		bne $b7a3			bne 	_CCVCopyName
.b7af	98		tya				tya 								; patch offset
.b7b0	92 36		sta ($36)			sta 	(zTemp0)
.b7b2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b7b4	91 36		sta ($36),y			sta 	(zTemp0),y
.b7b6	88		dey				dey
.b7b7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7b9	09 80		ora #$80			ora 	#$80
.b7bb	91 36		sta ($36),y			sta 	(zTemp0),y
.b7bd					_CCVFound:
.b7bd	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7bf	38		sec				sec
.b7c0	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7c2	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7c4	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b7c7	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7c9	20 45 b7	jsr $b745			jsr 	TOKWriteByte
.b7cc	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
