
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 18:17:25 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_CALL                             = $a6; $a6 CALL
=$a7					KWD_CIRCLE                           = $a7; $a7 CIRCLE
=$a8					KWD_CLS                              = $a8; $a8 CLS
=$a9					KWD_COLOR                            = $a9; $a9 COLOR
=$aa					KWD_COLOUR                           = $aa; $aa COLOUR
=$ab					KWD_DATA                             = $ab; $ab DATA
=$ac					KWD_DIM                              = $ac; $ac DIM
=$ad					KWD_DOWNTO                           = $ad; $ad DOWNTO
=$ae					KWD_ELSE                             = $ae; $ae ELSE
=$af					KWD_GFX                              = $af; $af GFX
=$b0					KWD_GOSUB                            = $b0; $b0 GOSUB
=$b1					KWD_GOTO                             = $b1; $b1 GOTO
=$b2					KWD_HERE                             = $b2; $b2 HERE
=$b3					KWD_HIDE                             = $b3; $b3 HIDE
=$b4					KWD_LET                              = $b4; $b4 LET
=$b5					KWD_LINE                             = $b5; $b5 LINE
=$b6					KWD_LOCAL                            = $b6; $b6 LOCAL
=$b7					KWD_OUTLINE                          = $b7; $b7 OUTLINE
=$b8					KWD_PRINT                            = $b8; $b8 PRINT
=$b9					KWD_READ                             = $b9; $b9 READ
=$ba					KWD_RECT                             = $ba; $ba RECT
=$bb					KWD_REM                              = $bb; $bb REM
=$bc					KWD_RETURN                           = $bc; $bc RETURN
=$bd					KWD_SCALE                            = $bd; $bd SCALE
=$be					KWD_SHOW                             = $be; $be SHOW
=$bf					KWD_SOLID                            = $bf; $bf SOLID
=$c0					KWD_SPRITE                           = $c0; $c0 SPRITE
=$c1					KWD_TEXT                             = $c1; $c1 TEXT
=$c2					KWD_TO                               = $c2; $c2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 19		lda #$19			lda 	#(Prompt & $FF)
.8007	20 b4 95	jsr $95b4			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 6f 8f	jsr $8f6f			jsr 	NewCommand 					; erase current program
.8013	20 39 a2	jsr $a239			jsr 	BackloadProgram
.8016	4c cb 8a	jmp $8acb			jmp 	WarmStart
>8019	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8021	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8031	41 53 49 43 20 2a 2a 2a 0d 0d
>803b	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8043	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8053	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8059	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1501."
>8061	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8071	32 2e 20 42 75 69 6c 64 20 31 35 30 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>807f	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxSpritePage:
>063a							.fill 	1
.063b					gxHeight:
>063b							.fill 	1
.063c					gxMode:
>063c							.fill 	1
.063d					gxColour:
>063d							.fill 	1
.063e					gxEORValue:
>063e							.fill 	1
.063f					gxANDValue:
>063f							.fill 	1
.0640					gxOriginalLUTValue:
>0640							.fill 	1
.0641					gxOriginalMMUSetting:
>0641							.fill 	1
.0642					gsOffset:
>0642							.fill 	1
.0643					GSCurrentSprite:
>0643							.fill 	2
.0645					GXSpriteOffsetBase:
>0645							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8082					GXGraphicDraw:
.8082	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8084	b0 06		bcs $808c			bcs 	_GDCoordinate
.8086	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.8088	84 37		sty $37				sty 	gxzTemp0+1
.808a	80 3d		bra $80c9			bra 	_GDExecuteA 				; and execute
.808c					_GDCoordinate:
.808c	48		pha				pha 								; save AXY
.808d	da		phx				phx
.808e	5a		phy				phy
.808f	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8091					_GDCopy1:
.8091	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8094	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.8097	ca		dex				dex
.8098	10 f7		bpl $8091			bpl 	_GDCopy1
.809a	68		pla				pla 								; update Y
.809b	8d 2b 06	sta $062b			sta 	gxCurrentY
.809e	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a1	68		pla				pla
.80a2	8d 29 06	sta $0629			sta 	gxCurrentX
.80a5	68		pla				pla 								; get A (command+X.1) back
.80a6	48		pha				pha
.80a7	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80a9	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80ac	f0 07		beq $80b5			beq 	_GDXOkay 					; check X range
.80ae	ad 29 06	lda $0629			lda 	gxCurrentX
.80b1	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b3	b0 1e		bcs $80d3			bcs 	_GDError
.80b5					_GDXOkay:
.80b5	ad 2b 06	lda $062b			lda 	gxCurrentY
.80b8	cd 3b 06	cmp $063b			cmp 	gxHeight
.80bb	b0 16		bcs $80d3			bcs 	_GDError
.80bd	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80bf					_GDCopy2:
.80bf	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c2	9d 31 06	sta $0631,x			sta 	gxX0,x
.80c5	ca		dex				dex
.80c6	10 f7		bpl $80bf			bpl 	_GDCopy2
.80c8	68		pla				pla 								; get command back
.80c9					_GDExecuteA:
.80c9	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80cb	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80cd	b0 05		bcs $80d4			bcs 	_GDError2
.80cf	aa		tax				tax
.80d0	7c d9 80	jmp ($80d9,x)			jmp 	(GRVectorTable,x)
.80d3					_GDError:
.80d3	68		pla				pla 								; throw command
.80d4					_GDError2:
.80d4	38		sec				sec
.80d5	60		rts				rts
.80d6					GXMove:
.80d6	18		clc				clc
.80d7	60		rts				rts
.80d8					GRUndefined:
>80d8	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80d9					GRVectorTable:
>80d9	9a 82					.word	GXControlBitmap          ; $00 BITMAPCTL
>80db	dd 82					.word	GXControlSprite          ; $01 SPRITECTL
>80dd	53 82					.word	GXClearBitmap            ; $02 Clear
>80df	4f 84					.word	GXSetColourMode          ; $03 Colour
>80e1	05 86					.word	GXFontHandler            ; $04 DrawFont
>80e3	4d 86					.word	GXSpriteHandler          ; $05 DrawSprite
>80e5	b5 86					.word	GXSelect                 ; $06 SPRUSE
>80e7	dd 86					.word	GXSelectImage            ; $07 SPRIMG
>80e9	d8 80					.word	GRUndefined              ; $08
>80eb	d8 80					.word	GRUndefined              ; $09
>80ed	d8 80					.word	GRUndefined              ; $0a
>80ef	d8 80					.word	GRUndefined              ; $0b
>80f1	d8 80					.word	GRUndefined              ; $0c
>80f3	d8 80					.word	GRUndefined              ; $0d
>80f5	d8 80					.word	GRUndefined              ; $0e
>80f7	d8 80					.word	GRUndefined              ; $0f
>80f9	d6 80					.word	GXMove                   ; $10 Move
>80fb	24 83					.word	GXLine                   ; $11 Line
>80fd	98 84					.word	GXFrameRectangle         ; $12 FrameRect
>80ff	95 84					.word	GXFillRectangle          ; $13 FillRect
>8101	11 81					.word	GXFrameCircle            ; $14 FrameCircle
>8103	0d 81					.word	GXFillCircle             ; $15 FillCircle
>8105	d8 80					.word	GRUndefined              ; $16
>8107	d8 80					.word	GRUndefined              ; $17
>8109	7d 84					.word	GXPlotPoint              ; $18 Plot
>810b	2f 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.810d					GXFillCircle:
.810d	a9 ff		lda #$ff			lda 	#255
.810f	80 02		bra $8113			bra 	GXCircle
.8111					GXFrameCircle:
.8111	a9 00		lda #$00			lda 	#0
.8113					GXCircle:
.8113	8d 4a 06	sta $064a			sta 	gxIsFillMode					; save Fill flag
.8116	20 1d 88	jsr $881d			jsr 	GXSortXY 					; topleft/bottomright
.8119	20 52 87	jsr $8752			jsr 	GXOpenBitmap 				; start drawing
.811c	20 0c 82	jsr $820c			jsr 	GXCircleSetup 				; set up for drawing
.811f	9c 4b 06	stz $064b			stz 	gxYChanged
.8122					_GXCircleDraw:
.8122	ad 48 06	lda $0648			lda 	gXCentre					; while x <= y
.8125	cd 49 06	cmp $0649			cmp 	gYCentre
.8128	90 0a		bcc $8134			bcc 	_GXCircleContinue
.812a	d0 03		bne $812f			bne 	_GXNoLast
.812c	20 3f 81	jsr $813f			jsr 	GXPlot1
.812f					_GXNoLast:
.812f	20 63 87	jsr $8763			jsr 	GXCloseBitmap 				; close the bitmap
.8132	18		clc				clc
.8133	60		rts				rts
.8134					_GXCircleContinue:
.8134	20 3c 81	jsr $813c			jsr 	GXPlot2 					; draw it
.8137	20 b9 81	jsr $81b9			jsr 	GXCircleMove 				; adjust the coordinates
.813a	80 e6		bra $8122			bra 	_GXCircleDraw
.813c					GXPlot2:
.813c	20 3f 81	jsr $813f			jsr 	GXPlot1 						; plot and swap, fall through does twice
.813f					GXPlot1:
.813f	ad 49 06	lda $0649			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8142	f0 03		beq $8147			beq 	_GXPlot1Only
.8144	20 63 81	jsr $8163			jsr 	GXPlot0 						; plot and negate
.8147					_GXPlot1Only:
.8147	20 63 81	jsr $8163			jsr 	GXPlot0 						; twice, undoing negation
.814a	ad 48 06	lda $0648			lda 	gXCentre 						; swap X and Y
.814d	ae 49 06	ldx $0649			ldx	 	gYCentre
.8150	8d 49 06	sta $0649			sta 	gYCentre
.8153	8e 48 06	stx $0648			stx 	gXCentre
.8156	ad 4b 06	lda $064b			lda 	gxYChanged 						; toggle Y Changed flag
.8159	a9 ff		lda #$ff			lda 	#$FF
.815b	8d 4b 06	sta $064b			sta 	gxYChanged
.815e	60		rts				rts
.815f	20 63 81	jsr $8163			jsr 	GXPlot0 						; do once
.8162	60		rts				rts
.8163	ad 4a 06	lda $064a	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8166	f0 05		beq $816d			beq 	_GXPlot0Always
.8168	ad 4b 06	lda $064b			lda 	gxYChanged						; fill mode, only draw if changed.
.816b	f0 2d		beq $819a			beq 	GXPlot0Exit
.816d					_GXPlot0Always:
.816d	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.816f	ad 49 06	lda $0649			lda 	gYCentre
.8172	20 9b 81	jsr $819b			jsr 	GXSubCopy
.8175	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8177	ad 48 06	lda $0648			lda 	gXCentre
.817a	20 9b 81	jsr $819b			jsr 	GXSubCopy
.817d	48		pha				pha 									; save last offset X
.817e	20 70 87	jsr $8770			jsr 	GXPositionCalc 					; calculate position/offset.
.8181	68		pla				pla
.8182	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8183	85 36		sta $36				sta 	gxzTemp0
.8185	64 37		stz $37				stz 	gxzTemp0+1
.8187	26 37		rol $37				rol 	gxzTemp0+1
.8189	ad 4a 06	lda $064a			lda 	gxIsFillMode
.818c	69 80		adc #$80			adc 	#128
.818e	20 e1 84	jsr $84e1			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8191	38		sec				sec 									; GY = -GY
.8192	a9 00		lda #$00			lda 	#0
.8194	ed 49 06	sbc $0649			sbc 	gYCentre
.8197	8d 49 06	sta $0649			sta 	gYCentre
.819a					GXPlot0Exit:
.819a	60		rts				rts
.819b					GXSubCopy:
.819b	85 36		sta $36				sta 	gxzTemp0
.819d	64 37		stz $37				stz 	gxzTemp0+1
.819f	29 80		and #$80			and 	#$80
.81a1	f0 02		beq $81a5			beq 	_GXNoSx
.81a3	c6 37		dec $37				dec 	gxzTemp0+1
.81a5					_GXNoSx:
.81a5	38		sec				sec
.81a6	bd 35 06	lda $0635,x			lda 	gXX1,x
.81a9	e5 36		sbc $36				sbc 	gxzTemp0
.81ab	9d 31 06	sta $0631,x			sta 	gXX0,x
.81ae	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81b1	e5 37		sbc $37				sbc 	gxzTemp0+1
.81b3	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81b6	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81b8	60		rts				rts
.81b9					GXCircleMove:
.81b9	9c 4b 06	stz $064b			stz 	gxYChanged 					; clear Y changed flag
.81bc	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81be	10 0d		bpl $81cd			bpl 	_GXEMPositive
.81c0	ee 48 06	inc $0648			inc 	gXCentre 					; X++
.81c3	ad 48 06	lda $0648			lda 	gXCentre
.81c6	20 ec 81	jsr $81ec			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81c9	a9 06		lda #$06			lda 	#6  						; and add 6
.81cb	80 15		bra $81e2			bra 	_GXEMAddD
.81cd					_GXEMPositive:
.81cd	ee 48 06	inc $0648			inc 	gXCentre					; X++
.81d0	ce 49 06	dec $0649			dec 	gyCentre 					; Y--
.81d3	38		sec				sec 								; calculate X-Y
.81d4	ad 48 06	lda $0648			lda 	gXCentre
.81d7	ed 49 06	sbc $0649			sbc 	gYCentre
.81da	20 ec 81	jsr $81ec			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dd	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81df	ce 4b 06	dec $064b			dec 	gxYChanged
.81e2					_GXEMAddD:
.81e2	18		clc				clc
.81e3	65 38		adc $38				adc 	gxzTemp1
.81e5	85 38		sta $38				sta 	gxzTemp1
.81e7	90 02		bcc $81eb			bcc 	_GXEMNoCarry
.81e9	e6 39		inc $39				inc 	gxzTemp1+1
.81eb					_GXEMNoCarry:
.81eb	60		rts				rts
.81ec					_GXAdd4TimesToD:
.81ec	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81ee	29 80		and #$80			and 	#$80
.81f0	f0 02		beq $81f4			beq 	_GXA4Unsigned
.81f2	a9 ff		lda #$ff			lda 	#$FF
.81f4					_GXA4Unsigned:
.81f4	85 37		sta $37				sta 	gxzTemp0+1
.81f6	06 36		asl $36				asl 	gxzTemp0  					; x 4
.81f8	26 37		rol $37				rol 	gxzTemp0+1
.81fa	06 36		asl $36				asl 	gxzTemp0
.81fc	26 37		rol $37				rol 	gxzTemp0+1
.81fe	18		clc				clc 								; add
.81ff	a5 36		lda $36				lda		gxzTemp0
.8201	65 38		adc $38				adc 	gxzTemp1
.8203	85 38		sta $38				sta 	gxzTemp1
.8205	a5 37		lda $37				lda		gxzTemp0+1
.8207	65 39		adc $39				adc 	gxzTemp1+1
.8209	85 39		sta $39				sta 	gxzTemp1+1
.820b	60		rts				rts
.820c					GXCircleSetup:
.820c	38		sec				sec
.820d	ad 37 06	lda $0637			lda 	gxY1
.8210	ed 33 06	sbc $0633			sbc 	gxY0
.8213	4a		lsr a				lsr 	a
.8214	8d 47 06	sta $0647			sta 	gxRadius
.8217	a2 00		ldx #$00			ldx 	#0
.8219	20 3b 82	jsr $823b			jsr 	_GXCalculateCentre
.821c	a2 02		ldx #$02			ldx 	#2
.821e	20 3b 82	jsr $823b			jsr 	_GXCalculateCentre
.8221	9c 48 06	stz $0648			stz 	gXCentre
.8224	ad 47 06	lda $0647			lda 	gxRadius
.8227	8d 49 06	sta $0649			sta 	gYCentre
.822a	0a		asl a				asl 	a 							; R x 2
.822b	85 36		sta $36				sta 	gxzTemp0
.822d	38		sec				sec
.822e	a9 03		lda #$03			lda 	#3
.8230	e5 36		sbc $36				sbc 	gxzTemp0
.8232	85 38		sta $38				sta 	gxzTemp1
.8234	a9 00		lda #$00			lda 	#0
.8236	e9 00		sbc #$00			sbc 	#0
.8238	85 39		sta $39				sta 	gxzTemp1+1
.823a	60		rts				rts
.823b					_GXCalculateCentre:
.823b	38		sec				sec
.823c	bd 35 06	lda $0635,x			lda 	gxX1,x
.823f	7d 31 06	adc $0631,x			adc 	gXX0,x
.8242	9d 35 06	sta $0635,x			sta 	gXX1,x
.8245	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8248	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.824b	4a		lsr a				lsr 	a
.824c	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.824f	7e 35 06	ror $0635,x			ror 	gXX1,x
.8252	60		rts				rts
.0647					gxRadius:
>0647							.fill 	1
.0648					gXCentre:
>0648							.fill 	1
.0649					gYCentre:
>0649							.fill 	1
.064a					gxIsFillMode:
>064a							.fill 	1
.064b					gxYChanged:
>064b							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8253					GXClearBitmap:
.8253	20 52 87	jsr $8752			jsr 	GXOpenBitmap 				; start access
.8256	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8258	ad 3b 06	lda $063b			lda 	gxHeight
.825b	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.825d	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.825f					_GXCalcLastPage:
.825f	98		tya				tya 								; add to base page
.8260	18		clc				clc
.8261	6d 39 06	adc $0639			adc 	gxBasePage
.8264	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8266					_GXClearAll:
.8266	20 77 82	jsr $8277			jsr 	_GXClearBlock 				; clear 8k block
.8269	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.826b	a5 0b		lda $0b				lda 	GXEditSlot
.826d	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.8270	b0 f4		bcs $8266			bcs 	_GXClearAll
.8272	20 63 87	jsr $8763			jsr 	GXCloseBitmap	 			; stop access
.8275	18		clc				clc
.8276	60		rts				rts
.8277					_GXClearBlock:
.8277	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8279	85 38		sta $38				sta 	0+gxzTemp1
.827b	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.827d	85 39		sta $39				sta 	1+gxzTemp1
.827f					_GXCB0:
.827f	a5 36		lda $36				lda 	gxzTemp0
.8281	a0 00		ldy #$00			ldy 	#0
.8283					_GXCB1:
.8283	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8285	c8		iny				iny
.8286	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8288	c8		iny				iny
.8289	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828b	c8		iny				iny
.828c	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828e	c8		iny				iny
.828f	d0 f2		bne $8283			bne 	_GXCB1
.8291	e6 39		inc $39				inc 	gxzTemp1+1
.8293	a5 39		lda $39				lda 	gxzTemp1+1
.8295	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8297	d0 e6		bne $827f			bne 	_GXCB0
.8299	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.829a					GXControlBitmap:
.829a	64 01		stz $01				stz 	1
.829c	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.829e	4a		lsr a				lsr 	a 							; bit 0 into carry.
.829f	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82a2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82a4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82a6	90 02		bcc $82aa			bcc 	_CBNotOn
.82a8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82aa					_CBNotOn:
.82aa	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82ad	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82af	29 07		and #$07			and 	#7
.82b1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82b4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82b6	d0 02		bne $82ba			bne 	_CBNotDefault
.82b8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82ba					_CBNotDefault:
.82ba	8d 39 06	sta $0639			sta 	gxBasePage
.82bd	20 16 83	jsr $8316			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82c0	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82c2	8d 03 d1	sta $d103			sta 	$D103
.82c5	a5 36		lda $36				lda 	gxzTemp0
.82c7	8d 02 d1	sta $d102			sta 	$D102
.82ca	9c 01 d1	stz $d101			stz 	$D101
.82cd	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82cf	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.82d2	29 01		and #$01			and 	#1
.82d4	f0 02		beq $82d8			beq 	_CBHaveHeight
.82d6	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.82d8					_CBHaveHeight
.82d8	8e 3b 06	stx $063b			stx 	gxHeight
.82db	18		clc				clc
.82dc	60		rts				rts
.82dd					GXControlSprite:
.82dd	64 01		stz $01				stz 	1
.82df	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82e1	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82e2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82e5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82e7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.82e9	90 02		bcc $82ed			bcc 	_CSNotOn
.82eb	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.82ed					_CSNotOn:
.82ed	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82f0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f2	d0 02		bne $82f6			bne 	_CSNotDefault
.82f4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.82f6					_CSNotDefault:
.82f6	8d 3a 06	sta $063a			sta 	gxSpritePage
.82f9	20 16 83	jsr $8316			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fc	a5 36		lda $36				lda 	zTemp0
.82fe	8d 45 06	sta $0645			sta 	GXSpriteOffsetBase
.8301	a5 37		lda $37				lda 	zTemp0+1
.8303	8d 46 06	sta $0646			sta 	GXSpriteOffsetBase+1
.8306	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8308					_CSClear:
.8308	9e 00 d9	stz $d900,x			stz 	$D900,x
.830b	9e 00 da	stz $da00,x			stz 	$DA00,x
.830e	ca		dex				dex
.830f	d0 f7		bne $8308			bne 	_CSClear
.8311	9c 44 06	stz $0644			stz 	GSCurrentSprite+1 			; no sprite selected.
.8314	18		clc				clc
.8315	60		rts				rts
.8316					GXCalculateBaseAddress:
.8316	85 36		sta $36				sta 	gxzTemp0
.8318	64 37		stz $37				stz 	gxzTemp0+1
.831a	a9 05		lda #$05			lda 	#5
.831c					_GXShift:
.831c	06 36		asl $36				asl 	gxzTemp0
.831e	26 37		rol $37				rol 	gxzTemp0+1
.8320	3a		dec a				dec		a
.8321	d0 f9		bne $831c			bne 	_GXShift
.8323	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8324					GXLine:
.8324	20 52 87	jsr $8752			jsr 	GXOpenBitmap
.8327	20 3b 88	jsr $883b			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.832a	20 f0 83	jsr $83f0			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.832d	20 70 87	jsr $8770			jsr 	GXPositionCalc 				; calculate position/offset.
.8330					_GXDrawLoop:
.8330	ac 42 06	ldy $0642			ldy 	gsOffset 					; draw the pixel
.8333	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8335	2d 3f 06	and $063f			and 	gxANDValue
.8338	4d 3e 06	eor $063e			eor 	gxEORValue
.833b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.833d	20 4c 83	jsr $834c			jsr 	GXLineIsComplete 			; is the line complete ?
.8340	f0 05		beq $8347			beq 	_GXLExit
.8342	20 67 83	jsr $8367			jsr 	GXLineAdvance 				; code as per advance method
.8345	80 e9		bra $8330			bra 	_GXDrawLoop
.8347					_GXLExit:
.8347	20 63 87	jsr $8763			jsr 	GXCloseBitmap
.834a	18		clc				clc
.834b	60		rts				rts
.834c					GXLineIsComplete:
.834c	ad 4e 06	lda $064e			lda 	GXIsDiffYLarger 			; is dy larger
.834f	d0 0f		bne $8360			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8351	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8354	4d 35 06	eor $0635			eor 	GXX1
.8357	d0 06		bne $835f			bne 	_GXLICExit
.8359	ad 32 06	lda $0632			lda 	GXX0+1
.835c	4d 36 06	eor $0636			eor 	GXX1+1
.835f					_GXLICExit:
.835f	60		rts				rts
.8360					_GXLICCompareY:
.8360	ad 37 06	lda $0637			lda 	GXY1
.8363	4d 33 06	eor $0633			eor 	GXY0
.8366	60		rts				rts
.8367					GXLineAdvance:
.8367	18		clc				clc 								; add adjust to position
.8368	ad 50 06	lda $0650			lda 	GXPosition
.836b	6d 51 06	adc $0651			adc 	GXAdjust
.836e	8d 50 06	sta $0650			sta 	GXPosition
.8371	9c 53 06	stz $0653			stz 	GXAddSelect 				; clear add select flag
.8374	b0 05		bcs $837b			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8376	cd 52 06	cmp $0652			cmp 	GXTotal 					; if exceeded total
.8379	90 0a		bcc $8385			bcc 	_GXLANoExtra
.837b					_GXLAOverflow:
.837b	ce 53 06	dec $0653			dec 	GXAddSelect 				; set addselect to $FF
.837e	38		sec				sec 								; subtract total and write back
.837f	ed 52 06	sbc $0652			sbc 	GXTotal
.8382	8d 50 06	sta $0650			sta 	GXPosition
.8385					_GXLANoExtra:
.8385	ad 4e 06	lda $064e			lda 	GXIsDiffYLarger
.8388	f0 0d		beq $8397			beq 	_GXDXLarger
.838a	20 e9 83	jsr $83e9			jsr 	GXIncrementY
.838d	ad 53 06	lda $0653			lda 	GXAddSelect
.8390	f0 10		beq $83a2			beq 	_GXLAExit
.8392	20 a3 83	jsr $83a3			jsr 	GXAdjustX
.8395	80 0b		bra $83a2			bra 	_GXLAExit
.8397					_GXDXLarger:
.8397	20 a3 83	jsr $83a3			jsr 	GXAdjustX
.839a	ad 53 06	lda $0653			lda 	GXAddSelect
.839d	f0 03		beq $83a2			beq 	_GXLAExit
.839f	20 e9 83	jsr $83e9			jsr 	GXIncrementY
.83a2					_GXLAExit:
.83a2	60		rts				rts
.83a3					GXAdjustX:
.83a3	ad 4f 06	lda $064f			lda 	GXDXNegative
.83a6	10 25		bpl $83cd			bpl 	_GXAXRight
.83a8	ad 31 06	lda $0631			lda 	GXX0
.83ab	d0 03		bne $83b0			bne 	_GXAXNoBorrow
.83ad	ce 32 06	dec $0632			dec 	GXX0+1
.83b0					_GXAXNoBorrow:
.83b0	ce 31 06	dec $0631			dec 	GXX0
.83b3	ce 42 06	dec $0642			dec 	gsOffset 					; pixel left
.83b6	ad 42 06	lda $0642			lda 	gsOffset
.83b9	c9 ff		cmp #$ff			cmp 	#$FF
.83bb	d0 0f		bne $83cc			bne 	_GXAYExit 					; underflow
.83bd	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83bf	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83c1	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83c3	b0 07		bcs $83cc			bcs 	_GXAYExit
.83c5	18		clc				clc
.83c6	69 20		adc #$20			adc 	#$20 						; fix up
.83c8	85 3d		sta $3d				sta 	gxzScreen+1
.83ca	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.83cc					_GXAYExit:
.83cc	60		rts				rts
.83cd					_GXAXRight:
.83cd	ee 31 06	inc $0631			inc 	GXX0
.83d0	d0 03		bne $83d5			bne 	_GXAXNoCarry
.83d2	ee 32 06	inc $0632			inc 	GXX0+1
.83d5					_GXAXNoCarry:
.83d5	ee 42 06	inc $0642			inc 	gsOffset 					; pixel right
.83d8	d0 0e		bne $83e8			bne 	_GXAXExit 					; if not overflowed, exit.
.83da	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.83dc	a5 3d		lda $3d				lda 	gxzScreen+1
.83de	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.83e0	90 06		bcc $83e8			bcc 	_GXAXExit
.83e2	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83e4	85 3d		sta $3d				sta 	gxzScreen+1
.83e6	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.83e8					_GXAXExit:
.83e8	60		rts				rts
.83e9					GXIncrementY:
.83e9	ee 33 06	inc $0633			inc 	GXY0
.83ec	20 c6 87	jsr $87c6			jsr 	GXMovePositionDown
.83ef	60		rts				rts
.83f0					GXLineSetup:
.83f0	ad 37 06	lda $0637			lda 	GXY1
.83f3	38		sec				sec
.83f4	ed 33 06	sbc $0633			sbc 	GXY0
.83f7	4a		lsr a				lsr 	a
.83f8	8d 4d 06	sta $064d			sta 	GXDiffY
.83fb	9c 4f 06	stz $064f			stz 	GXDXNegative 				; clear -ve flag
.83fe	38		sec				sec
.83ff	ad 35 06	lda $0635			lda 	GXX1
.8402	ed 31 06	sbc $0631			sbc 	GXX0
.8405	8d 4c 06	sta $064c			sta 	GXDiffX
.8408	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.840b	ed 32 06	sbc $0632			sbc 	GXX0+1
.840e	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.840f	6e 4c 06	ror $064c			ror 	GXDiffX
.8412	0a		asl a				asl 	a
.8413	10 0c		bpl $8421			bpl 	_GDXNotNegative
.8415	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8417	38		sec				sec
.8418	ed 4c 06	sbc $064c			sbc 	GXDiffX
.841b	8d 4c 06	sta $064c			sta 	GXDiffX
.841e	ce 4f 06	dec $064f			dec 	GXDXNegative 				; -ve flag = $FF.
.8421					_GDXNotNegative:
.8421	9c 4e 06	stz $064e			stz 	GXIsDiffYLarger 			; clear larger flag
.8424	ad 4d 06	lda $064d			lda 	GXDiffY 					; set adjust and total.
.8427	8d 51 06	sta $0651			sta 	GXAdjust
.842a	ad 4c 06	lda $064c			lda 	GXDiffX
.842d	8d 52 06	sta $0652			sta 	GXTotal
.8430	ad 4d 06	lda $064d			lda 	GXDiffY 					; if dy > dx
.8433	cd 4c 06	cmp $064c			cmp 	GXDiffX
.8436	90 0f		bcc $8447			bcc 	_GDXNotLarger
.8438	ce 4e 06	dec $064e			dec 	GXIsDiffYLarger 			; set the dy larger flag
.843b	ad 4c 06	lda $064c			lda 	GXDiffX 					; set adjust and total other way round
.843e	8d 51 06	sta $0651			sta 	GXAdjust
.8441	ad 4d 06	lda $064d			lda 	GXDiffY
.8444	8d 52 06	sta $0652			sta 	GXTotal
.8447					_GDXNotLarger:
.8447	ad 52 06	lda $0652			lda 	GXTotal
.844a	4a		lsr a				lsr 	a
.844b	8d 50 06	sta $0650			sta 	GXPosition
.844e	60		rts				rts
.064c					GXDiffX:
>064c							.fill 	1
.064d					GXDiffY:
>064d							.fill 	1
.064e					GXIsDiffYLarger:
>064e							.fill 	1
.064f					GXDXNegative:
>064f							.fill 	1
.0650					GXPosition:
>0650							.fill 	1
.0651					GXAdjust:
>0651							.fill 	1
.0652					GXTotal:
>0652							.fill 	1
.0653					GXAddSelect:
>0653							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.844f					GXSetColourMode:
.844f	a6 36		ldx $36				ldx 	gxzTemp0
.8451	8e 3d 06	stx $063d			stx 	gxColour 								; set colour
.8454	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8456	8d 3c 06	sta $063c			sta 	gxMode 									; set mode
.8459	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.845b	9c 3f 06	stz $063f			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.845e	ae 3d 06	ldx $063d			ldx 	gxColour
.8461	8e 3e 06	stx $063e			stx 	gxEORValue
.8464	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8466	90 03		bcc $846b			bcc 	_GXSDCNotAndColour
.8468	8e 3f 06	stx $063f			stx 	gxANDValue
.846b					_GXSDCNotAndColour:
.846b	d0 03		bne $8470			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.846d	9c 3e 06	stz $063e			stz 	gxEORValue
.8470					_GXSDCNotAnd:
.8470	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8471	90 08		bcc $847b			bcc 	_GXSDCNoFlip
.8473	ad 3f 06	lda $063f			lda	 	gxANDValue
.8476	49 ff		eor #$ff			eor 	#$FF
.8478	8d 3f 06	sta $063f			sta 	gxANDValue
.847b					_GXSDCNoFlip:
.847b	18		clc				clc
.847c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.847d					GXPlotPoint:
.847d	20 52 87	jsr $8752			jsr 	GXOpenBitmap 				; start drawing
.8480	20 70 87	jsr $8770			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.8483	ac 42 06	ldy $0642			ldy 	gsOffset
.8486	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8488	2d 3f 06	and $063f			and 	gxANDValue
.848b	4d 3e 06	eor $063e			eor 	gxEORValue
.848e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8490	20 63 87	jsr $8763			jsr 	GXCloseBitmap 				; stop drawing and exit
.8493	18		clc				clc
.8494	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.8495					GXFillRectangle:
.8495	38		sec				sec
.8496	80 01		bra $8499			bra 	GXRectangle
.8498					GXFrameRectangle:
.8498	18		clc				clc
.8499					GXRectangle:
.8499	08		php				php 								; save Fill flag (CS)
.849a	20 52 87	jsr $8752			jsr 	GXOpenBitmap 				; start drawing
.849d	20 1d 88	jsr $881d			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84a0	20 70 87	jsr $8770			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84a3	38		sec				sec 								; sec = Draw line
.84a4	20 ce 84	jsr $84ce			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84a7	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84aa	cd 37 06	cmp $0637			cmp 	gxY1
.84ad	f0 19		beq $84c8			beq 	_GXRectangleExit
.84af					_GXRectLoop:
.84af	20 c6 87	jsr $87c6			jsr 	GXMovePositionDown 			; down one.
.84b2	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84b5	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84b8	cd 37 06	cmp $0637			cmp 	gXY1
.84bb	f0 07		beq $84c4			beq 	_GXLastLine
.84bd	28		plp				plp 								; get flag back
.84be	08		php				php
.84bf	20 ce 84	jsr $84ce			jsr 	GXDrawLineX1X0 				; draw horizontal line
.84c2	80 eb		bra $84af			bra 	_GXRectLoop
.84c4					_GXLastLine:
.84c4	38		sec				sec
.84c5	20 ce 84	jsr $84ce			jsr 	GXDrawLineX1X0
.84c8					_GXRectangleExit:
.84c8	68		pla				pla 								; throw fill flag.
.84c9	20 63 87	jsr $8763			jsr 	GXCloseBitmap 				; stop drawing and exit
.84cc	18		clc				clc
.84cd	60		rts				rts
.84ce					GXDrawLineX1X0:
.84ce	08		php				php 								; save solid/either-end
.84cf	38		sec				sec
.84d0	ad 35 06	lda $0635			lda		gXX1
.84d3	ed 31 06	sbc $0631			sbc 	gXX0
.84d6	85 36		sta $36				sta 	gxzTemp0
.84d8	ad 36 06	lda $0636			lda 	gXX1+1
.84db	ed 32 06	sbc $0632			sbc 	gXX0+1
.84de	85 37		sta $37				sta 	gxzTemp0+1
.84e0	28		plp				plp
.84e1					GXDrawLineTemp0:
.84e1	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.84e3	48		pha				pha
.84e4	a5 3d		lda $3d				lda 	gxzScreen+1
.84e6	48		pha				pha
.84e7	ad 42 06	lda $0642			lda 	gsOffset
.84ea	48		pha				pha
.84eb	a5 0b		lda $0b				lda 	GXEditSlot
.84ed	48		pha				pha
.84ee	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y offset
.84f1	90 1e		bcc $8511			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.84f3					_GXDLTLine:
.84f3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.84f5	2d 3f 06	and $063f			and 	gxANDValue
.84f8	4d 3e 06	eor $063e			eor 	gxEORValue
.84fb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84fd	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.84ff	d0 04		bne $8505			bne 	_GXDLTNoBorrow
.8501	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8503	30 2e		bmi $8533			bmi 	_GXDLTExit
.8505					_GXDLTNoBorrow:
.8505	c6 36		dec $36				dec 	gxzTemp0
.8507	c8		iny				iny 								; next slot.
.8508	d0 e9		bne $84f3			bne 	_GXDLTLine
.850a	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.850c	20 41 85	jsr $8541			jsr 	GXDLTCheckWrap				; check for new page.
.850f	80 e2		bra $84f3			bra 	_GXDLTLine
.8511					_GXDLTEndPoints:
.8511	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8513	2d 3f 06	and $063f			and 	gxANDValue
.8516	4d 3e 06	eor $063e			eor 	gxEORValue
.8519	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.851b	98		tya				tya 								; advance to right side
.851c	18		clc				clc
.851d	65 36		adc $36				adc 	gxzTemp0
.851f	a8		tay				tay
.8520	a5 3d		lda $3d				lda 	gxzScreen+1
.8522	65 37		adc $37				adc 	gxzTemp0+1
.8524	85 3d		sta $3d				sta 	gxzScreen+1
.8526	20 41 85	jsr $8541			jsr 	GXDLTCheckWrap 			; fix up.
.8529	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.852b	2d 3f 06	and $063f			and 	gxANDValue
.852e	4d 3e 06	eor $063e			eor 	gxEORValue
.8531	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8533					_GXDLTExit:
.8533	68		pla				pla
.8534	85 0b		sta $0b				sta 	GXEditSlot
.8536	68		pla				pla
.8537	8d 42 06	sta $0642			sta 	gsOffset
.853a	68		pla				pla
.853b	85 3d		sta $3d				sta 	gxzScreen+1
.853d	68		pla				pla
.853e	85 3c		sta $3c				sta 	gxzScreen
.8540	60		rts				rts
.8541					GXDLTCheckWrap:
.8541	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8543	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8545	90 06		bcc $854d			bcc 	_GXDLTCWExit
.8547	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8549	85 3d		sta $3d				sta 	gxzScreen+1
.854b	e6 0b		inc $0b				inc 	GXEditSlot
.854d					_GXDLTCWExit:
.854d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.854e					GXDrawGraphicElement:
.854e	8d 54 06	sta $0654			sta 	gxSize 						; save size
.8551	3a		dec a				dec 	a
.8552	8d 55 06	sta $0655			sta 	gxMask 						; and mask
.8555	9c 59 06	stz $0659			stz 	gxVFlip 					; set the flip bytes
.8558	9c 5a 06	stz $065a			stz 	gxHFlip
.855b	2c 5b 06	bit $065b			bit 	gxUseMode
.855e	10 03		bpl $8563			bpl 	_GXNotVertical
.8560	8d 59 06	sta $0659			sta 	gxVFlip
.8563					_GXNotVertical:
.8563	50 03		bvc $8568			bvc 	_GXNotHorizontal
.8565	8d 5a 06	sta $065a			sta 	gxHFlip
.8568					_GXNotHorizontal:
.8568	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.856b	48		pha				pha
.856c	8c 57 06	sty $0657			sty 	gxAcquireVector+1 			; and acquisition vector
.856f	8e 56 06	stx $0656			stx 	gxAcquireVector
.8572	20 52 87	jsr $8752			jsr 	gxOpenBitmap 				; open the bitmap.
.8575	ad 5b 06	lda $065b			lda 	gxUseMode 					; scale bits
.8578	4a		lsr a				lsr 	a
.8579	4a		lsr a				lsr 	a
.857a	4a		lsr a				lsr 	a
.857b	29 07		and #$07			and		#7
.857d	1a		inc a				inc 	a
.857e	8d 58 06	sta $0658			sta 	gxScale
.8581	64 38		stz $38				stz 	gxzTemp1						; start first line
.8583					_GXGELoop:
.8583	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.8585	4d 59 06	eor $0659			eor 	gxVFlip
.8588	aa		tax				tax 								; get the Xth line.
.8589	20 c7 85	jsr $85c7			jsr 	_GXCallAcquire 				; get that data.
.858c	ad 58 06	lda $0658			lda 	gxScale 					; do scale identical copies of that line.
.858f	85 39		sta $39				sta 	gxzTemp1+1
.8591					_GXGELoop2:
.8591	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8594	cd 3b 06	cmp $063b			cmp 	gxHeight
.8597	b0 10		bcs $85a9			bcs 	_GXDGEExit
.8599	20 ca 85	jsr $85ca			jsr 	GXRenderOneLine 			; render line
.859c	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.859e	d0 f1		bne $8591			bne 	_GXGELoop2
.85a0	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85a2	a5 38		lda $38				lda 	gxzTemp1
.85a4	cd 54 06	cmp $0654			cmp 	gxSize
.85a7	d0 da		bne $8583			bne 	_GXGELoop
.85a9					_GXDGEExit:
.85a9	68		pla				pla 								; restore Y for next time
.85aa	8d 33 06	sta $0633			sta 	gxY0
.85ad	ae 58 06	ldx $0658			ldx 	gxScale 					; get scale (1-8)
.85b0					_GXShiftLeft:
.85b0	18		clc				clc
.85b1	ad 54 06	lda $0654			lda 	gxSize
.85b4	6d 31 06	adc $0631			adc 	gxX0
.85b7	8d 31 06	sta $0631			sta 	gxX0
.85ba	90 03		bcc $85bf			bcc 	_GXSLNoCarry
.85bc	ee 32 06	inc $0632			inc 	gxX0+1
.85bf					_GXSLNoCarry:
.85bf	ca		dex				dex
.85c0	d0 ee		bne $85b0			bne 	_GXShiftLeft
.85c2	20 63 87	jsr $8763			jsr 	GXCloseBitmap
.85c5	18		clc				clc
.85c6	60		rts				rts
.85c7					_GXCallAcquire:
.85c7	6c 56 06	jmp ($0656)			jmp 	(gxAcquireVector)
.85ca					GXRenderOneLine:
.85ca	20 70 87	jsr $8770			jsr 	GXPositionCalc 				; calculate position/offset.
.85cd	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y contains position.
.85d0	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.85d2					_GXROLLoop1:
.85d2	ad 58 06	lda $0658			lda 	gxScale 					; set to do 'scale' times
.85d5	85 3b		sta $3b				sta 	gxzTemp2+1
.85d7					_GXROLLoop2:
.85d7	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.85d9	4d 5a 06	eor $065a			eor 	gxHFlip
.85dc	aa		tax				tax 								; read from the pixel buffer
.85dd	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.85e0	f0 0a		beq $85ec			beq 	_GXZeroPixel 				; don't draw if zero.
.85e2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.85e4	2d 3f 06	and $063f			and 	gxANDValue
.85e7	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.85ea	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.85ec					_GXZeroPixel:
.85ec	c8		iny				iny 								; advance pointer
.85ed	d0 05		bne $85f4			bne 	_GXNoShift
.85ef	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.85f1	20 41 85	jsr $8541			jsr 	GXDLTCheckWrap				; check for new page.
.85f4					_GXNoShift:
.85f4	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.85f6	d0 df		bne $85d7			bne 	_GXROLLoop2
.85f8	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.85fa	a5 3a		lda $3a				lda 	gxzTemp2
.85fc	cd 54 06	cmp $0654			cmp 	gxSize
.85ff	d0 d1		bne $85d2			bne 	_GXROLLoop1
.8601	ee 33 06	inc $0633			inc 	gxY0
.8604	60		rts				rts
.0654					gxSize:
>0654							.fill 	1
.0655					gxMask:
>0655							.fill 	1
.0656					gxAcquireVector:
>0656							.fill 	2
.0658					gxScale:
>0658							.fill 	1
.0659					gxVFlip:
>0659							.fill 	1
.065a					gxHFlip:
>065a							.fill 	1
.065b					gxUseMode:
>065b							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8605					GXFontHandler:
.8605	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8607	4d 3c 06	eor $063c			eor 	gxMode
.860a	8d 5b 06	sta $065b			sta 	gxUseMode
.860d	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.860f	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8611	26 37		rol $37				rol	 	gxzTemp0+1
.8613	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.8615	26 37		rol $37				rol	 	gxzTemp0+1
.8617	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8619	26 37		rol $37				rol	 	gxzTemp0+1
.861b	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.861d	09 c0		ora #$c0			ora 	#$C0
.861f	85 37		sta $37				sta 	gxzTemp0+1
.8621	a9 08		lda #$08			lda 	#8 							; size 8x8
.8623	a2 2b		ldx #$2b			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8625	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8627	20 4e 85	jsr $854e			jsr 	GXDrawGraphicElement
.862a	60		rts				rts
.862b					GXGetGraphicDataFont:
.862b	8a		txa				txa 								; X->Y
.862c	a8		tay				tay
.862d	a6 01		ldx $01				ldx 	1 							; preserve old value
.862f	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8631	85 01		sta $01				sta 	1
.8633	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.8635	86 01		stx $01				stx 	1 							; put old value back.
.8637	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8639					_GXExpand:
.8639	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.863c	0a		asl a				asl 	a 							; shift bit 7 into C
.863d	90 08		bcc $8647			bcc 	_GXNoPixel
.863f	48		pha				pha 								; if set, set pixel buffer to current colour.
.8640	ad 3d 06	lda $063d			lda 	gxColour
.8643	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8646	68		pla				pla
.8647					_GXNoPixel:
.8647	e8		inx				inx 								; do the whole byte.
.8648	e0 08		cpx #$08			cpx 	#8
.864a	d0 ed		bne $8639			bne 	_GXExpand
.864c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.864d					GXSpriteHandler:
.864d	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.864f	4d 3c 06	eor $063c			eor 	gxMode
.8652	8d 5b 06	sta $065b			sta 	gxUseMode
.8655	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.8657	da		phx				phx
.8658	20 52 87	jsr $8752			jsr 	GXOpenBitmap 				; can access sprite information
.865b	68		pla				pla
.865c	20 e1 87	jsr $87e1			jsr 	GXFindSprite 				; get the sprite address
.865f	20 63 87	jsr $8763			jsr 	GXCloseBitmap
.8662	ad 5c 06	lda $065c			lda 	GXSizePixels 					; return size
.8665	a2 6d		ldx #$6d			ldx 	#GXSpriteAcquire & $FF
.8667	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.8669	20 4e 85	jsr $854e			jsr 	GXDrawGraphicElement
.866c	60		rts				rts
.866d					GXSpriteAcquire:
.866d	ad 3a 06	lda $063a			lda 	GXSpritePage				; point to base page
.8670	85 0b		sta $0b				sta 	GXEditSlot
.8672	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.8674	a9 00		lda #$00			lda 	#0
.8676	ae 5d 06	ldx $065d			ldx 	GXSizeBits
.8679					_GXTimesRowNumber:
.8679	18		clc				clc
.867a	65 36		adc $36				adc 	zTemp0
.867c	ca		dex				dex
.867d	10 fa		bpl $8679			bpl 	_GXTimesRowNumber
.867f	64 37		stz $37				stz 	gxzTemp0+1
.8681	0a		asl a				asl 	a 							; row x 2,4,6,8
.8682	26 37		rol $37				rol 	gxzTemp0+1
.8684	0a		asl a				asl 	a 							; row x 4,8,12,16
.8685	26 37		rol $37				rol 	gxzTemp0+1
.8687	0a		asl a				asl 	a 							; row x 8,16,24,32
.8688	26 37		rol $37				rol 	gxzTemp0+1
.868a	85 36		sta $36				sta 	gxzTemp0
.868c	18		clc				clc 								; add base address.
.868d	a5 36		lda $36				lda 	gxzTemp0
.868f	6d 5f 06	adc $065f			adc 	GXSpriteOffset
.8692	85 36		sta $36				sta 	gxzTemp0
.8694	a5 37		lda $37				lda 	gxzTemp0+1
.8696	6d 60 06	adc $0660			adc 	GXSpriteOffset+1
.8699					_GXSAFindPage:
.8699	c9 20		cmp #$20			cmp 	#$20 						; on this page
.869b	90 06		bcc $86a3			bcc 	_GXSAFoundPage
.869d	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.869f	e6 0b		inc $0b				inc 	GXEditSlot
.86a1	80 f6		bra $8699			bra 	_GXSAFindPage
.86a3					_GXSAFoundPage:
.86a3	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86a5	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86a7	a0 00		ldy #$00			ldy 	#0
.86a9					_GXSACopyLoop:
.86a9	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86ab	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86ae	c8		iny				iny
.86af	cc 5c 06	cpy $065c			cpy 	GXSizePixels
.86b2	d0 f5		bne $86a9			bne 	_GXSACopyLoop
.86b4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86b5					GXSelect:
.86b5	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.86b7	c9 40		cmp #$40			cmp 	#64
.86b9	b0 20		bcs $86db			bcs 	_GXSFail
.86bb	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.86bd	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.86bf	06 36		asl $36				asl 	gxzTemp0
.86c1	06 36		asl $36				asl 	gxzTemp0
.86c3	06 36		asl $36				asl 	gxzTemp0
.86c5	2a		rol a				rol 	a
.86c6	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.86c8	8d 44 06	sta $0644			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.86cb	85 37		sta $37				sta 	gxzTemp0+1
.86cd	a5 36		lda $36				lda 	gxzTemp0
.86cf	8d 43 06	sta $0643			sta 	GSCurrentSprite
.86d2	98		tya				tya 								; control value
.86d3	29 01		and #$01			and 	#1
.86d5	64 01		stz $01				stz 	1 							; access sprite control.
.86d7	92 36		sta ($36)			sta 	(gxzTemp0) 					; write to control register
.86d9	18		clc				clc
.86da	60		rts				rts
.86db					_GXSFail:
.86db	38		sec				sec
.86dc	60		rts				rts
.86dd					GXSelectImage:
.86dd	ad 44 06	lda $0644			lda 	GSCurrentSprite+1 			; check sprite selected
.86e0	f0 4b		beq $872d			beq 	_GXSIFail
.86e2	64 01		stz $01				stz 	1
.86e4	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.86e6	48		pha				pha
.86e7	20 52 87	jsr $8752			jsr 	GXOpenBitmap
.86ea	68		pla				pla
.86eb	20 e1 87	jsr $87e1			jsr 	GXFindSprite
.86ee	a0 01		ldy #$01			ldy 	#1
.86f0	ad 43 06	lda $0643			lda 	GSCurrentSprite
.86f3	85 36		sta $36				sta 	gxzTemp0
.86f5	ad 44 06	lda $0644			lda 	GSCurrentSprite+1
.86f8	85 37		sta $37				sta 	gxzTemp0+1
.86fa	ad 5f 06	lda $065f			lda 	GXSpriteOffset
.86fd	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.86ff	18		clc				clc
.8700	ad 60 06	lda $0660			lda 	GXSpriteOffset+1
.8703	6d 45 06	adc $0645			adc 	GXSpriteOffsetBase
.8706	c8		iny				iny
.8707	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8709	ad 46 06	lda $0646			lda 	GXSpriteOffsetBase+1
.870c	69 00		adc #$00			adc 	#0
.870e	c8		iny				iny
.870f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8711	b2 36		lda ($36)			lda 	(gxzTemp0)					; get LSB into gxzTemp1
.8713	29 01		and #$01			and 	#1
.8715	85 38		sta $38				sta 	gxzTemp1
.8717	ad 5d 06	lda $065d			lda 	GXSizeBits 					; get raw size
.871a	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.871c	2a		rol a				rol 	a 							; x 2
.871d	0a		asl a				asl 	a 							; x 4
.871e	0a		asl a				asl 	a 							; x 8
.871f	0a		asl a				asl 	a 							; x 16
.8720	0d 5e 06	ora $065e			ora 	GXSpriteLUT 						; Or with LUT
.8723	0a		asl a				asl 	a 							; 1 shift
.8724	05 38		ora $38				ora 	gxzTemp1 					; Or in the enable bit
.8726	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8728	20 63 87	jsr $8763			jsr 	GXCloseBitmap
.872b	18		clc				clc
.872c	60		rts				rts
.872d					_GXSIFail:
.872d	38		sec				sec
.872e	60		rts				rts
.872f					GXMoveSprite:
.872f	ad 44 06	lda $0644			lda 	GSCurrentSprite+1 			; check sprite selected
.8732	f0 1c		beq $8750			beq 	_GXSIFail
.8734	85 37		sta $37				sta 	gxzTemp0+1
.8736	a0 04		ldy #$04			ldy 	#4
.8738	ad 43 06	lda $0643			lda 	GSCurrentSprite
.873b	85 36		sta $36				sta 	gxzTemp0
.873d	ad 31 06	lda $0631			lda 	gxX0						; copy position.
.8740	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8742	c8		iny				iny
.8743	ad 32 06	lda $0632			lda 	gxX0+1
.8746	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8748	c8		iny				iny
.8749	ad 33 06	lda $0633			lda 	gxY0
.874c	91 36		sta ($36),y			sta 	(gxzTemp0),y
.874e	18		clc				clc
.874f	60		rts				rts
.8750					_GXSIFail:
.8750	38		sec				sec
.8751	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8752					GXOpenBitmap:
.8752	78		sei				sei 								; no interrupts here
.8753	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8755	8d 41 06	sta $0641			sta 	gxOriginalMMUSetting
.8758	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.875a	85 00		sta $00				sta 	0
.875c	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.875e	8d 40 06	sta $0640			sta 	gxOriginalLUTValue
.8761	58		cli				cli
.8762	60		rts				rts
.8763					GXCloseBitmap:
.8763	78		sei				sei
.8764	ad 40 06	lda $0640			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8767	85 0b		sta $0b				sta 	GXEditSlot
.8769	ad 41 06	lda $0641			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.876c	85 00		sta $00				sta 	0
.876e	58		cli				cli
.876f	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8770					GXPositionCalc:
.8770	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8772	48		pha				pha
.8773	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.8776	85 3c		sta $3c				sta 	gxzScreen
.8778	64 3d		stz $3d				stz 	gxzScreen+1
.877a	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.877c	26 3d		rol $3d				rol 	gxzScreen+1
.877e	06 3c		asl $3c				asl 	gxzScreen
.8780	26 3d		rol $3d				rol 	gxzScreen+1
.8782	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8783	65 3c		adc $3c				adc 	gxzScreen
.8785	85 3c		sta $3c				sta 	gxzScreen
.8787	90 02		bcc $878b			bcc 	_GXPCNoCarry
.8789	e6 3d		inc $3d				inc 	gxzScreen+1
.878b					_GXPCNoCarry:
.878b	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.878d	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.878f	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8791	85 36		sta $36				sta 	gxzTemp0
.8793	64 3d		stz $3d				stz 	gxzScreen+1
.8795	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8797					_GXPCMultiply32:
.8797	06 3c		asl $3c				asl 	gxzScreen
.8799	26 3d		rol $3d				rol 	gxzScreen+1
.879b	3a		dec a				dec 	a
.879c	d0 f9		bne $8797			bne 	_GXPCMultiply32
.879e	18		clc				clc
.879f	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.87a2	65 3c		adc $3c				adc 	gxzScreen
.87a4	8d 42 06	sta $0642			sta 	gsOffset
.87a7	ad 32 06	lda $0632			lda 	GXX0+1
.87aa	65 3d		adc $3d				adc 	gxzScreen+1
.87ac	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.87ae	90 04		bcc $87b4			bcc 	_GXPCNoOverflow
.87b0	29 1f		and #$1f			and 	#$1F 						; fix it up
.87b2	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.87b4					_GXPCNoOverflow:
.87b4	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.87b6	85 3d		sta $3d				sta 	gxzScreen+1
.87b8	64 3c		stz $3c				stz 	gxzScreen
.87ba	18		clc				clc
.87bb	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.87bd	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.87c0	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.87c2	68		pla				pla
.87c3	85 36		sta $36				sta 	gxzTemp0
.87c5	60		rts				rts
.87c6					GXMovePositionDown:
.87c6	18		clc				clc 								; add 320 to offset/temp+1
.87c7	ad 42 06	lda $0642			lda 	gsOffset
.87ca	69 40		adc #$40			adc 	#64
.87cc	8d 42 06	sta $0642			sta 	gsOffset
.87cf	a5 3d		lda $3d				lda 	gxzScreen+1
.87d1	69 01		adc #$01			adc 	#1
.87d3	85 3d		sta $3d				sta 	gxzScreen+1
.87d5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.87d7	90 07		bcc $87e0			bcc 	_GXMPDExit
.87d9	38		sec				sec  								; next page
.87da	e9 20		sbc #$20			sbc 	#$20
.87dc	85 3d		sta $3d				sta 	gxzScreen+1
.87de	e6 0b		inc $0b				inc 	GXEditSlot
.87e0					_GXMPDExit:
.87e0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.87e1					GXFindSprite:
.87e1	aa		tax				tax
.87e2	ad 3a 06	lda $063a			lda 	GXSpritePage 				; access the base page of the sprite
.87e5	85 0b		sta $0b				sta 	GXEditSlot
.87e7	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.87ea	8d 60 06	sta $0660			sta 	GXSpriteOffset+1
.87ed	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.87f0	48		pha				pha 								; save twice
.87f1	48		pha				pha
.87f2	29 03		and #$03			and 	#3 							; get sprite size
.87f4	8d 5d 06	sta $065d			sta 	GXSizeBits 					; save raw (0-3)
.87f7	aa		tax				tax
.87f8	bd 19 88	lda $8819,x			lda 	_GXFXSSTTable,x 			; read sprite size
.87fb	8d 5c 06	sta $065c			sta 	GXSizePixels 					; save (8/16/24/32)
.87fe	68		pla				pla 								; get LUT
.87ff	4a		lsr a				lsr		a
.8800	4a		lsr a				lsr		a
.8801	29 03		and #$03			and 	#3
.8803	8d 5e 06	sta $065e			sta 	GXSpriteLUT
.8806	68		pla				pla 								; address, neeeds to be x 4
.8807	29 f0		and #$f0			and 	#$F0
.8809	8d 5f 06	sta $065f			sta 	GXSpriteOffset
.880c	0e 5f 06	asl $065f			asl 	GXSpriteOffset
.880f	2e 60 06	rol $0660			rol 	GXSpriteOffset+1
.8812	0e 5f 06	asl $065f			asl 	GXSpriteOffset
.8815	2e 60 06	rol $0660			rol 	GXSpriteOffset+1
.8818	60		rts				rts
.8819					_GXFXSSTTable:
>8819	08 10 18 20					.byte 	8,16,24,32
.065c					GXSizePixels:
>065c							.fill 	1
.065d					GXSizeBits:
>065d							.fill 	1
.065e					GXSpriteLUT:
>065e							.fill 	1
.065f					GXSpriteOffset:
>065f							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.881d					GXSortXY:
.881d	20 3b 88	jsr $883b			jsr 	GXSortY 					; will be sorted on Y now
.8820	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8823	cd 35 06	cmp $0635			cmp 	gxX1
.8826	ad 32 06	lda $0632			lda 	gXX0+1
.8829	ed 36 06	sbc $0636			sbc 	gXX1+1
.882c	90 0c		bcc $883a			bcc 	_GXSXYExit 					; X0 < X1 exit
.882e	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8830	a0 04		ldy #$04			ldy 	#4
.8832	20 4f 88	jsr $884f			jsr 	GXSwapXY
.8835	e8		inx				inx
.8836	c8		iny				iny
.8837	20 4f 88	jsr $884f			jsr 	GXSwapXY
.883a					_GXSXYExit:
.883a	60		rts				rts
.883b					GXSortY:
.883b	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.883e	cd 37 06	cmp $0637			cmp 	gxY1
.8841	90 0b		bcc $884e			bcc 	_GXSYSorted
.8843	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8845	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8847					_GXSwap1:
.8847	20 4f 88	jsr $884f			jsr 	GXSwapXY
.884a	88		dey				dey
.884b	ca		dex				dex
.884c	10 f9		bpl $8847			bpl 	_GXSwap1
.884e					_GXSYSorted:
.884e	60		rts				rts
.884f					GXSwapXY:
.884f	bd 31 06	lda $0631,x			lda 	gxX0,x
.8852	48		pha				pha
.8853	b9 31 06	lda $0631,y			lda 	gxX0,y
.8856	9d 31 06	sta $0631,x			sta 	gxX0,x
.8859	68		pla				pla
.885a	99 31 06	sta $0631,y			sta 	gxX0,y
.885d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.885e					AssembleGroup1:
.885e	a9 ff		lda #$ff			lda 	#$FF
.8860	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8863	80 02		bra $8867			bra 	AsmGroup12
.8865					AssembleGroup2:
.8865	a5 00		lda $00				lda 	$00
.8867					AsmGroup12:
.8867	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.886a	68		pla				pla 								; pop the return address to access the information following.
.886b	fa		plx				plx
.886c	20 f5 88	jsr $88f5			jsr 	AccessParameters 			; get opcode and save as base
.886f	8d a4 04	sta $04a4			sta 	BaseOpcode
.8872	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8875	d0 08		bne $887f			bne 	_AG12HaveMask
.8877	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8879	20 fd 88	jsr $88fd			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.887c	8d a5 04	sta $04a5			sta 	ModeMask
.887f					_AG12HaveMask:
.887f	20 38 8a	jsr $8a38			jsr 	TypeAndCalculateOperand 	; get zero page type
.8882	da		phx				phx 								; save found address mode
.8883	20 61 89	jsr $8961			jsr 	AssembleModeX
.8886	fa		plx				plx  								; restore address mode
.8887	b0 0b		bcs $8894			bcs 	_AG12Exit
.8889	20 95 88	jsr $8895			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.888c	20 61 89	jsr $8961			jsr 	AssembleModeX
.888f	b0 03		bcs $8894			bcs 	_AG12Exit
.8891	4c 03 af	jmp $af03			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8894					_AG12Exit:
.8894	60		rts				rts
.8895					PromoteToAbsolute:
.8895	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8897	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8899	f0 19		beq $88b4			beq 	_PTADo
.889b	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.889d	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.889f	f0 13		beq $88b4			beq 	_PTADo
.88a1	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.88a3	e0 80		cpx #$80			cpx 	#AM_ZEROY
.88a5	f0 0d		beq $88b4			beq 	_PTADo
.88a7	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.88a9	e0 d1		cpx #$d1			cpx 	#AM_IND
.88ab	f0 07		beq $88b4			beq 	_PTADo
.88ad	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.88af	e0 c0		cpx #$c0			cpx 	#AM_INDX
.88b1	f0 01		beq $88b4			beq 	_PTADo
.88b3	60		rts				rts
.88b4					_PTADo:
.88b4	aa		tax				tax
.88b5	60		rts				rts
.88b6					AssembleGroup3:
.88b6	68		pla				pla 								; get parameters, which is just the opcode.
.88b7	fa		plx				plx
.88b8	20 f5 88	jsr $88f5			jsr 	AccessParameters 			; get and output opcode
.88bb	20 0d 89	jsr $890d			jsr 	AssemblerWriteByte
.88be	20 9c 8a	jsr $8a9c			jsr 	CalculateOperand 			; get a 16 bit operand
.88c1	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.88c4	38		sec				sec
.88c5	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.88c8	48		pha				pha 								; LSB in A
.88c9	ad 10 04	lda $0410			lda 	NSMantissa1
.88cc	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.88cf	aa		tax				tax 								; MSB in X
.88d0	68		pla				pla
.88d1	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.88d2	69 7f		adc #$7f			adc 	#$7F
.88d4	90 01		bcc $88d7			bcc 	_AG3NoCarry
.88d6	e8		inx				inx
.88d7					_AG3NoCarry:
.88d7	38		sec				sec 								; fix back and write out anyways.
.88d8	e9 80		sbc #$80			sbc 	#$80
.88da	20 0d 89	jsr $890d			jsr 	AssemblerWriteByte
.88dd	e0 00		cpx #$00			cpx 	#0 							; was it in range
.88df	f0 0a		beq $88eb			beq 	_AG3Exit
.88e1	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.88e4	29 01		and #$01			and 	#1
.88e6	f0 03		beq $88eb			beq 	_AG3Exit
.88e8	4c 08 af	jmp $af08			jmp 	RangeError 					; no, branch is out of range
.88eb					_AG3Exit:
.88eb	60		rts				rts
.88ec					AssembleGroup4:
.88ec	68		pla				pla 								; pop address
.88ed	fa		plx				plx
.88ee	20 f5 88	jsr $88f5			jsr 	AccessParameters 			; access and get first
.88f1	20 0d 89	jsr $890d			jsr 	AssemblerWriteByte 			; output it.
.88f4	60		rts				rts
.88f5					AccessParameters:
.88f5	8d a1 04	sta $04a1			sta 	ParamStart
.88f8	8e a2 04	stx $04a2			stx 	ParamStart+1
.88fb	a9 01		lda #$01			lda 	#1
.88fd					GetParameter:
.88fd	5a		phy				phy
.88fe	a8		tay				tay
.88ff	ad a1 04	lda $04a1			lda 	ParamStart
.8902	85 36		sta $36				sta 	zTemp0
.8904	ad a2 04	lda $04a2			lda 	ParamStart+1
.8907	85 37		sta $37				sta 	zTemp0+1
.8909	b1 36		lda ($36),y			lda 	(zTemp0),y
.890b	7a		ply				ply
.890c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.890d					AssemblerWriteByte:
.890d	48		pha			pha
.890e	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8911	29 02		and #$02		and 	#2
.8913	f0 1b		beq $8930		beq 	_AWBNoPrint
.8915	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8918	20 4b 89	jsr $894b		jsr 	PrintHex
.891b	ad 9e 04	lda $049e		lda		AssemblerAddress
.891e	20 4b 89	jsr $894b		jsr 	PrintHex
.8921	a9 20		lda #$20		lda 	#' '
.8923	20 a8 b0	jsr $b0a8		jsr 	EXTPrintCharacter
.8926	68		pla			pla 									; print byte
.8927	48		pha			pha
.8928	20 4b 89	jsr $894b		jsr 	PrintHex
.892b	a9 0d		lda #$0d		lda 	#13
.892d	20 a8 b0	jsr $b0a8		jsr 	EXTPrintCharacter
.8930					_AWBNoPrint:
.8930	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8933	85 36		sta $36			sta 	zTemp0
.8935	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8938	f0 0e		beq $8948		beq 	_AWBRange
.893a	85 37		sta $37			sta 	zTemp0+1
.893c	68		pla			pla 									; write byte out
.893d	92 36		sta ($36)		sta 	(zTemp0)
.893f	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8942	d0 03		bne $8947		bne 	_AWBNoCarry
.8944	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8947					_AWBNoCarry:
.8947	60		rts			rts
.8948					_AWBRange:
.8948	4c 08 af	jmp $af08		jmp 	RangeError
.894b					PrintHex:
.894b	48		pha				pha
.894c	4a		lsr a				lsr 	a
.894d	4a		lsr a				lsr 	a
.894e	4a		lsr a				lsr 	a
.894f	4a		lsr a				lsr 	a
.8950	20 54 89	jsr $8954			jsr 	_PrintNibble
.8953	68		pla				pla
.8954					_PrintNibble:
.8954	29 0f		and #$0f			and 	#15
.8956	c9 0a		cmp #$0a			cmp 	#10
.8958	90 02		bcc $895c			bcc 	_NoShift
.895a	69 06		adc #$06			adc 	#6
.895c					_NoShift:
.895c	69 30		adc #$30			adc 	#48
.895e	4c a8 b0	jmp $b0a8			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8961					AssembleModeX:
.8961	5a		phy				phy
.8962	ad a3 04	lda $04a3			lda 	IsGroup1
.8965	f0 17		beq $897e			beq 	_AMXGroup2
.8967	8a		txa				txa 							; is it in group # 1
.8968	29 40		and #$40			and 	#AM_ISG1
.896a	f0 50		beq $89bc			beq 	_AMXFail 				; no, give up.
.896c	8a		txa				txa 							; get back.
.896d	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.896f	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8971	d0 22		bne $8995			bne 	_AMXHaveInfo
.8973	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8976	c9 81		cmp #$81			cmp 	#$81
.8978	f0 42		beq $89bc			beq 	_AMXFail
.897a	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.897c	80 17		bra $8995			bra 	_AMXHaveInfo 			; odd design decision there.
.897e					_AMXGroup2:
.897e	8a		txa				txa 							; is it in group 2 ?
.897f	29 20		and #$20			and 	#AM_ISG2
.8981	f0 39		beq $89bc			beq 	_AMXFail 				; no, give up.
.8983	8a		txa				txa 							; get the offset into Y
.8984	29 1f		and #$1f			and 	#$1F
.8986	4a		lsr a				lsr 	a 						; make it 0-7.
.8987	4a		lsr a				lsr  	a
.8988	a8		tay				tay
.8989	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.898c					_AMXCheckOkay:
.898c	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.898d	88		dey				dey
.898e	10 fc		bpl $898c			bpl 	_AMXCheckOkay
.8990	90 2a		bcc $89bc			bcc 	_AMXFail 				; not allowed.
.8992	8a		txa				txa  							; get mask back
.8993	29 1f		and #$1f			and 	#$1F
.8995					_AMXHaveInfo:
.8995	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8997	10 05		bpl $899e			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8999	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.899c	d0 1e		bne $89bc			bne 	_AMXFail
.899e					_AMXAnySize:
.899e	18		clc				clc 							; add offset to the base opcode
.899f	6d a4 04	adc $04a4			adc 	BaseOpcode
.89a2					_AMXOutputCode:
.89a2	20 0d 89	jsr $890d			jsr 	AssemblerWriteByte 		; write the opcode out.
.89a5	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.89a7	f0 10		beq $89b9			beq 	_AMXExit
.89a9	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.89ac	20 0d 89	jsr $890d			jsr 	AssemblerWriteByte
.89af	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.89b1	30 06		bmi $89b9			bmi 	_AMXExit
.89b3	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.89b6	20 0d 89	jsr $890d			jsr 	AssemblerWriteByte
.89b9					_AMXExit:
.89b9	7a		ply				ply
.89ba	38		sec				sec
.89bb	60		rts				rts
.89bc					_AMXFail:
.89bc	a0 00		ldy #$00			ldy 	#0
.89be					_AMXCheckOddities:
.89be	8a		txa				txa
.89bf	d9 e7 89	cmp $89e7,y			cmp 	ExtraOpcode+2,y 		; match address mode
.89c2	d0 16		bne $89da			bne 	_AMXCONext
.89c4	b9 e5 89	lda $89e5,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.89c7	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.89ca	d0 0e		bne $89da			bne 	_AMXCONext
.89cc	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.89ce	10 05		bpl $89d5			bpl 	_AMXCONotZero
.89d0	ad 10 04	lda $0410			lda 	NSMantissa1
.89d3	d0 05		bne $89da			bne 	_AMXCONext
.89d5					_AMXCONotZero:
.89d5	b9 e6 89	lda $89e6,y			lda 	ExtraOpcode+1,y 		; get new opcode
.89d8	80 c8		bra $89a2			bra 	_AMXOutputCode 			; and assemble it
.89da					_AMXCONext:
.89da	c8		iny				iny
.89db	c8		iny				iny
.89dc	c8		iny				iny
.89dd	b9 e5 89	lda $89e5,y			lda 	ExtraOpcode+0,y 		; end of table
.89e0	d0 dc		bne $89be			bne 	_AMXCheckOddities
.89e2					_AMXCOFail:
.89e2	7a		ply				ply
.89e3	18		clc				clc
.89e4	60		rts				rts
.89e5					ExtraOpcode:
>89e5	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>89e8	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>89eb	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>89ee	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>89f1	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>89f4	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>89f7	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>89fa	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>89fd	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a00	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a03	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a04					LabelHere:
.8a04	c8		iny				iny 								; skip .
.8a05	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a07	20 35 9c	jsr $9c35			jsr 	EvaluateTerm 				; get a term
.8a0a	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a0d	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a0f	d0 24		bne $8a35			bne 	_ALType
.8a11	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a14	85 36		sta $36				sta 	zTemp0
.8a16	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a19	85 37		sta $37				sta 	zTemp0+1
.8a1b	5a		phy				phy 								; copy address in.
.8a1c	a0 01		ldy #$01			ldy 	#1
.8a1e	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8a21	92 36		sta ($36)			sta 	(zTemp0)
.8a23	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8a26	91 36		sta ($36),y			sta 	(zTemp0),y
.8a28	c8		iny				iny
.8a29	a9 00		lda #$00			lda 	#0
.8a2b	91 36		sta ($36),y			sta 	(zTemp0),y
.8a2d	c8		iny				iny
.8a2e	91 36		sta ($36),y			sta 	(zTemp0),y
.8a30	c8		iny				iny
.8a31	91 36		sta ($36),y			sta 	(zTemp0),y
.8a33	7a		ply				ply
.8a34	60		rts				rts
.8a35					_ALType:
.8a35	4c 0d af	jmp $af0d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8a38					TypeAndCalculateOperand:
.8a38	b1 30		lda ($30),y			lda 	(codePtr),y
.8a3a	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8a3c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a3e	f0 5b		beq $8a9b			beq 	_TACOExit
.8a40	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a42	f0 57		beq $8a9b			beq 	_TACOExit
.8a44	c8		iny				iny
.8a45	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8a47	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8a49	f0 51		beq $8a9c			beq 	CalculateOperand
.8a4b	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8a4d	f0 1f		beq $8a6e			beq 	_TACOIndirect
.8a4f	88		dey				dey 								; undo get of first character
.8a50	20 9c 8a	jsr $8a9c			jsr 	CalculateOperand 			; get operand
.8a53	b1 30		lda ($30),y			lda 	(codePtr),y
.8a55	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8a57	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a59	d0 40		bne $8a9b			bne 	_TACOExit
.8a5b	c8		iny				iny
.8a5c	20 94 a8	jsr $a894			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8a5f	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8a61	c9 58		cmp #$58			cmp 	#'X'
.8a63	f0 36		beq $8a9b			beq 	_TACOExit
.8a65	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8a67	c9 59		cmp #$59			cmp 	#'Y'
.8a69	f0 30		beq $8a9b			beq 	_TACOExit
.8a6b					_TACOSyntax:
.8a6b	4c 03 af	jmp $af03			jmp 	SyntaxError
.8a6e					_TACOIndirect:
.8a6e	20 9c 8a	jsr $8a9c			jsr 	CalculateOperand 			; get the operand
.8a71	b1 30		lda ($30),y			lda 	(codePtr),y
.8a73	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8a75	f0 17		beq $8a8e			beq 	_TACOIndX
.8a77	20 1d a9	jsr $a91d			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8a7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a7c	a2 d1		ldx #$d1			ldx 	#AM_IND
.8a7e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8a80	d0 19		bne $8a9b			bne 	_TACOExit
.8a82	c8		iny				iny
.8a83	20 94 a8	jsr $a894			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8a86	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8a88	d0 e1		bne $8a6b			bne 	_TACOSyntax
.8a8a	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8a8c	80 0d		bra $8a9b			bra 	_TACOExit
.8a8e					_TACOIndX:
.8a8e	c8		iny				iny
.8a8f	20 94 a8	jsr $a894			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8a92	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8a94	d0 d5		bne $8a6b			bne 	_TACOSyntax
.8a96	20 1d a9	jsr $a91d			jsr 	CheckRightBracket			; check )
.8a99	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8a9b					_TACOExit:
.8a9b	60		rts				rts
.8a9c					CalculateOperand:
.8a9c	48		pha				pha
.8a9d	da		phx				phx
.8a9e	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8aa0	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger
.8aa3	fa		plx				plx
.8aa4	68		pla				pla
.8aa5	60		rts				rts
.a894					TACOCheckXY:
.a894	b1 30		lda ($30),y			lda 	(codePtr),y
.a896	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a898	c9 40		cmp #$40			cmp 	#$40
.a89a	d0 21		bne $a8bd			bne 	_TCXYFail
.a89c	b1 30		lda ($30),y			lda 	(codePtr),y
.a89e	18		clc				clc
.a89f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a8a1	85 37		sta $37				sta 	zTemp0+1
.a8a3	c8		iny				iny
.a8a4	b1 30		lda ($30),y			lda 	(codePtr),y
.a8a6	c8		iny				iny
.a8a7	85 36		sta $36				sta 	zTemp0
.a8a9	5a		phy				phy 								; save position
.a8aa	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a8ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.a8ae	d0 0c		bne $a8bc			bne 	_TCXYPopFail
.a8b0	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a8b2	b1 36		lda ($36),y			lda 	(zTemp0),y
.a8b4	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a8b6	f0 08		beq $a8c0			beq 	_TCXYFound
.a8b8	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a8ba	f0 04		beq $a8c0			beq 	_TCXYFound
.a8bc					_TCXYPopFail:
.a8bc	7a		ply				ply
.a8bd					_TCXYFail:
.a8bd	a9 00		lda #$00			lda 	#0
.a8bf	60		rts				rts
.a8c0					_TCXYFound:
.a8c0	7a		ply				ply 								; restore position
.a8c1	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a8c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8aa6					EditProgramCode:
.8aa6	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8aa9	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8aac	20 72 a1	jsr $a172			jsr 	MemorySearch
.8aaf	90 05		bcc $8ab6			bcc 	_EPCNoDelete 				; reached the end don't delete
.8ab1	d0 03		bne $8ab6			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8ab3	20 ec b0	jsr $b0ec			jsr 	MemoryDeleteLine 			; delete the line
.8ab6					_EPCNoDelete:
.8ab6	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8ab9	c9 80		cmp #$80			cmp 	#KWC_EOL
.8abb	f0 0d		beq $8aca			beq 	_EPCNoInsert
.8abd	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8ac0	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8ac3	20 72 a1	jsr $a172			jsr 	MemorySearch
.8ac6	18		clc				clc 								; insert at this point.
.8ac7	20 23 b1	jsr $b123			jsr 	MemoryInsertLine 			; insert the line
.8aca					_EPCNoInsert:
.8aca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8acb					WarmStart:
.8acb	a2 ff		ldx #$ff			ldx 	#$FF
.8acd	9a		txs				txs
.8ace	20 be b0	jsr $b0be			jsr 	EXTInputLine 				; get line to lineBuffer
.8ad1	20 15 a6	jsr $a615			jsr 	TokeniseLine 				; tokenise the line
.8ad4	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8ad7	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8ada	d0 17		bne $8af3			bne 	_WSEditCode 				; if so,edit code.
.8adc	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8adf	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8ae1	85 30		sta $30				sta 	codePtr
.8ae3	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8ae5	85 31		sta $31				sta 	codePtr+1
.8ae7	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8aea	c9 80		cmp #$80			cmp 	#KWC_EOL
.8aec	f0 dd		beq $8acb			beq 	WarmStart
.8aee	20 fc 90	jsr $90fc			jsr 	RUNCodePointerLine 			; execute that line.
.8af1	80 d8		bra $8acb			bra 	WarmStart
.8af3					_WSEditCode:
.8af3	20 a6 8a	jsr $8aa6			jsr 	EditProgramCode
.8af6	20 64 8b	jsr $8b64			jsr 	ClearCommand
.8af9	80 d0		bra $8acb			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8afb					AssembleCommand:
.8afb	a2 00		ldx #$00			ldx 	#0
.8afd	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger 		; start address
.8b00	ad 08 04	lda $0408			lda 	NSMantissa0
.8b03	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b06	ad 10 04	lda $0410			lda 	NSMantissa1
.8b09	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b0c	20 25 a9	jsr $a925			jsr 	CheckComma
.8b0f	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger 		; options
.8b12	ad 08 04	lda $0408			lda 	NSMantissa0
.8b15	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b18	60		rts				rts
.8b19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b1a					AssertCommand:
.8b1a	a2 00		ldx #$00			ldx 	#0
.8b1c	20 8a a0	jsr $a08a			jsr 	EvaluateInteger 			; the assert test
.8b1f	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; exit if result is non zero.
.8b22	d0 05		bne $8b29			bne 	_ACExit
.8b24	a9 0a		lda #$0a		lda	#10
.8b26	4c 5b 95	jmp $955b		jmp	ErrorHandler
.8b29					_ACExit:
.8b29	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8b2a					CallCommand:
.8b2a	a2 00		ldx #$00			ldx 	#0
.8b2c	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger
.8b2f					_CCClear
.8b2f	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8b30	20 13 a1	jsr $a113			jsr 	NSMSetZero
.8b33	e0 04		cpx #$04			cpx 	#4
.8b35	d0 f8		bne $8b2f			bne 	_CCClear
.8b37	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8b39					_CCCParam:
.8b39	b1 30		lda ($30),y			lda 	(codePtr),y
.8b3b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b3d	d0 09		bne $8b48			bne 	_CCCRun6502
.8b3f	c8		iny				iny 								; skip comma
.8b40	e8		inx				inx	 								; next level
.8b41	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8b44	e0 03		cpx #$03			cpx 	#3
.8b46	90 f1		bcc $8b39			bcc 	_CCCParam 					; done all 3 ?
.8b48					_CCCRun6502:
.8b48	5a		phy				phy 								; save position
.8b49	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8b4c	85 37		sta $37				sta 	zTemp0+1
.8b4e	ad 08 04	lda $0408			lda 	NSMantissa0
.8b51	85 36		sta $36				sta 	zTemp0
.8b53	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8b56	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8b59	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8b5c	20 61 8b	jsr $8b61			jsr 	_CCCZTemp0 					; call zTemp0
.8b5f	7a		ply				ply 								; restore position and exit
.8b60	60		rts				rts
.8b61					_CCCZTemp0:
.8b61	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8b64					ClearCommand:
.8b64	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b66	85 36		sta $36				sta 	0+zTemp0
.8b68	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8b6a	85 37		sta $37				sta 	1+zTemp0
.8b6c					_ClearZeroLoop:
.8b6c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8b6e	f0 24		beq $8b94			beq 	_ClearZeroEnd
.8b70	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8b72	a9 00		lda #$00			lda 	#0
.8b74					_ClearOneVariable:
.8b74	91 36		sta ($36),y			sta 	(zTemp0),y
.8b76	c8		iny				iny
.8b77	c0 08		cpy #$08			cpy 	#8
.8b79	d0 f9		bne $8b74			bne 	_ClearOneVariable
.8b7b	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8b7d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b7f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8b81	d0 04		bne $8b87			bne 	_ClearNotProcedure
.8b83	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8b85	91 36		sta ($36),y			sta 	(zTemp0),y
.8b87					_ClearNotProcedure:
.8b87	18		clc				clc 								; go to the next variable
.8b88	b2 36		lda ($36)			lda 	(zTemp0)
.8b8a	65 36		adc $36				adc 	zTemp0
.8b8c	85 36		sta $36				sta 	zTemp0
.8b8e	90 dc		bcc $8b6c			bcc 	_ClearZeroLoop
.8b90	e6 37		inc $37				inc 	zTemp0+1
.8b92	80 d8		bra $8b6c			bra 	_ClearZeroLoop
.8b94					_ClearZeroEnd:
.8b94	18		clc				clc
.8b95	a5 36		lda $36				lda 	zTemp0
.8b97	69 01		adc #$01			adc 	#1
.8b99	8d 8c 04	sta $048c			sta 	lowMemPtr
.8b9c	a5 37		lda $37				lda 	zTemp0+1
.8b9e	69 00		adc #$00			adc 	#0
.8ba0	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ba3	20 2c a2	jsr $a22c			jsr 	StackReset
.8ba6	20 06 b2	jsr $b206			jsr 	StringSystemInitialise
.8ba9	20 7b 94	jsr $947b			jsr 	ProcedureScan
.8bac	20 b8 90	jsr $90b8			jsr 	Command_Restore
.8baf	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8bb2	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8bb5	9c a0 04	stz $04a0			stz 	AssemblerControl
.8bb8	20 22 9e	jsr $9e22			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8bbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8bbc					Command_Data:
.8bbc	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8bbe	a2 80		ldx #$80			ldx 	#KWC_EOL
.8bc0	20 cd 94	jsr $94cd			jsr 	ScanForward
.8bc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8bc4					DimCommand:
.8bc4	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc6	29 c0		and #$c0			and 	#$C0
.8bc8	c9 40		cmp #$40			cmp 	#$40
.8bca	d0 7a		bne $8c46			bne 	_DCSyntax
.8bcc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bce	18		clc				clc
.8bcf	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8bd1	85 3f		sta $3f				sta 	zaTemp+1
.8bd3	c8		iny				iny
.8bd4	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd6	c8		iny				iny
.8bd7	85 3e		sta $3e				sta 	zaTemp
.8bd9	5a		phy				phy
.8bda	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8bdc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8bde	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8be0	c9 18		cmp #$18			cmp 	#NSTProcedure
.8be2	f0 62		beq $8c46			beq 	_DCSyntax
.8be4	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8be6	29 04		and #$04			and 	#NSBIsArray
.8be8	f0 64		beq $8c4e			beq 	_DCType
.8bea	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8bec	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8bee	d0 59		bne $8c49			bne 	_DCRedefine
.8bf0	7a		ply				ply
.8bf1	20 51 8c	jsr $8c51			jsr 	_DCGetSize 				; get array size, check it.
.8bf4	5a		phy				phy
.8bf5	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8bf7	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8bf9	7a		ply				ply 							; is there a second (e.g. ,x)
.8bfa	b1 30		lda ($30),y			lda 	(codePtr),y
.8bfc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bfe	d0 0a		bne $8c0a			bne 	_DCOneDimension
.8c00	c8		iny				iny 							; skip comma
.8c01	20 51 8c	jsr $8c51			jsr 	_DCGetSize 				; get 2nd array size
.8c04	5a		phy				phy
.8c05	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c07	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c09	7a		ply				ply
.8c0a					_DCOneDimension:
.8c0a	5a		phy				phy 							; save position
.8c0b	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c0d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c0f	aa		tax				tax
.8c10	c8		iny				iny
.8c11	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c13	e8		inx				inx 							; bump them.
.8c14	1a		inc a				inc 	a
.8c15	20 9f ad	jsr $ad9f			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c18	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8c1a	29 e0		and #$e0			and 	#$E0
.8c1c	d0 23		bne $8c41			bne 	_DCSize
.8c1e	a0 02		ldy #$02			ldy 	#2 						; get base type
.8c20	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c22	20 5f 8c	jsr $8c5f			jsr 	ScaleByBaseType 		; scale by base type
.8c25	a5 36		lda $36				lda 	zTemp0
.8c27	a6 37		ldx $37				ldx 	zTemp0+1
.8c29	20 e4 9d	jsr $9de4			jsr 	AllocateXABytes 		; allocate memory
.8c2c	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8c2e	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c30	c8		iny				iny
.8c31	8a		txa				txa
.8c32	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c34	7a		ply				ply 							; get position back
.8c35	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 		; check )
.8c38	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3a	c8		iny				iny 							; consume in case
.8c3b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8c3d	f0 85		beq $8bc4			beq 	DimCommand
.8c3f	88		dey				dey 							; undo consume
.8c40	60		rts				rts
.8c41					_DCSize:
.8c41	a9 16		lda #$16		lda	#22
.8c43	4c 5b 95	jmp $955b		jmp	ErrorHandler
.8c46					_DCSyntax:
.8c46	4c 03 af	jmp $af03			jmp 	SyntaxError
.8c49					_DCRedefine:
.8c49	a9 15		lda #$15		lda	#21
.8c4b	4c 5b 95	jmp $955b		jmp	ErrorHandler
.8c4e					_DCType:
.8c4e	4c 0d af	jmp $af0d			jmp 	TypeError
.8c51					_DCGetSize:
.8c51	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8c53	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger 	; get array dimension
.8c56	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8c58	f0 e7		beq $8c41			beq 	_DCSize
.8c5a	c9 fe		cmp #$fe			cmp 	#254
.8c5c	f0 e3		beq $8c41			beq 	_DCSize
.8c5e	60		rts				rts
.8c5f					ScaleByBaseType:
.8c5f	29 10		and #$10			and 	#NSBIsString 			; is it string
.8c61	d0 19		bne $8c7c			bne 	_SBBTString
.8c63	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8c65	48		pha				pha
.8c66	a5 36		lda $36				lda 	zTemp0
.8c68	48		pha				pha
.8c69	06 36		asl $36				asl 	zTemp0 					; x 2
.8c6b	26 37		rol $37				rol 	zTemp0+1
.8c6d	06 36		asl $36				asl 	zTemp0 					; x 4
.8c6f	26 37		rol $37				rol 	zTemp0+1
.8c71	68		pla				pla 							; add stacked value = x 5
.8c72	65 36		adc $36				adc 	zTemp0
.8c74	85 36		sta $36				sta 	zTemp0
.8c76	68		pla				pla
.8c77	65 37		adc $37				adc 	zTemp0+1
.8c79	85 37		sta $37				sta 	zTemp0+1
.8c7b	60		rts				rts
.8c7c					_SBBTString:
.8c7c	06 36		asl $36				asl 	zTemp0
.8c7e	26 37		rol $37				rol 	zTemp0+1
.8c80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8c81					EndCommand:
.8c81	4c cb 8a	jmp $8acb			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c84					ForCommand:
.8c84	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8c86	20 c7 a1	jsr $a1c7			jsr 	StackOpen
.8c89	a2 00		ldx #$00			ldx 	#0
.8c8b	20 35 9c	jsr $9c35			jsr 	EvaluateTerm
.8c8e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c91	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c93	d0 49		bne $8cde			bne		_FCError
.8c95	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c97	20 2d a9	jsr $a92d			jsr 	CheckNextA
.8c9a	e8		inx				inx
.8c9b	20 8a a0	jsr $a08a			jsr 	EvaluateInteger 			; <from> in +1
.8c9e	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca0	c8		iny				iny 								; consume it
.8ca1	48		pha				pha 								; save on stack for later
.8ca2	c9 ad		cmp #$ad			cmp 	#KWD_DOWNTO
.8ca4	f0 04		beq $8caa			beq 	_FCNoSyntax
.8ca6	c9 c2		cmp #$c2			cmp 	#KWD_TO
.8ca8	d0 37		bne $8ce1			bne 	_FCSyntaxError
.8caa					_FCNoSyntax:
.8caa	e8		inx				inx
.8cab	20 8a a0	jsr $a08a			jsr 	EvaluateInteger
.8cae	20 0b a2	jsr $a20b			jsr 	STKSaveCodePosition 		; save loop back position
.8cb1	68		pla				pla 								; restore DOWNTO or TO
.8cb2	5a		phy				phy 								; save Y on the stack
.8cb3	49 ad		eor #$ad			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8cb5	f0 02		beq $8cb9			beq 	_FCNotDownTo
.8cb7	a9 02		lda #$02			lda 	#2
.8cb9					_FCNotDownTo:
.8cb9	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8cba	a0 10		ldy #$10			ldy 	#16
.8cbc	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8cbe	a0 06		ldy #$06			ldy 	#6
.8cc0	ad 08 04	lda $0408			lda 	NSMantissa0
.8cc3	91 34		sta ($34),y			sta 	(basicStack),y
.8cc5	ad 10 04	lda $0410			lda 	NSMantissa1
.8cc8	c8		iny				iny
.8cc9	91 34		sta ($34),y			sta 	(basicStack),y
.8ccb	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8ccd	a2 01		ldx #$01			ldx 	#1
.8ccf	20 e4 8c	jsr $8ce4			jsr 	FCIntegerToStack
.8cd2	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8cd4	a2 02		ldx #$02			ldx 	#2
.8cd6	20 e4 8c	jsr $8ce4			jsr 	FCIntegerToStack
.8cd9	20 04 8d	jsr $8d04			jsr 	CopyIndexToReference
.8cdc	7a		ply				ply 								; restore position
.8cdd	60		rts				rts
.8cde					_FCError:
.8cde	4c 0d af	jmp $af0d			jmp 	TypeError
.8ce1					_FCSyntaxError:
.8ce1	4c 03 af	jmp $af03			jmp 	SyntaxError
.8ce4					FCIntegerToStack:
.8ce4	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8ce7	10 03		bpl $8cec			bpl	 	_FCNotNegative
.8ce9	20 c8 a0	jsr $a0c8			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8cec					_FCNotNegative:
.8cec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8cef	91 34		sta ($34),y			sta 	(basicStack),y
.8cf1	c8		iny				iny
.8cf2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8cf5	91 34		sta ($34),y			sta 	(basicStack),y
.8cf7	c8		iny				iny
.8cf8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8cfb	91 34		sta ($34),y			sta 	(basicStack),y
.8cfd	c8		iny				iny
.8cfe	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8d01	91 34		sta ($34),y			sta 	(basicStack),y
.8d03	60		rts				rts
.8d04					CopyIndexToReference:
.8d04	5a		phy				phy
.8d05	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8d07	38		sec				sec 								; (because we copy from offset 8)
.8d08	b1 34		lda ($34),y			lda 	(basicStack),y
.8d0a	e9 08		sbc #$08			sbc 	#8
.8d0c	85 36		sta $36				sta 	zTemp0
.8d0e	c8		iny				iny
.8d0f	b1 34		lda ($34),y			lda 	(basicStack),y
.8d11	e9 00		sbc #$00			sbc 	#0
.8d13	85 37		sta $37				sta 	zTemp0+1
.8d15	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8d17	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8d19	b1 34		lda ($34),y			lda 	(basicStack),y
.8d1b	0a		asl a				asl 	a 							; into carry
.8d1c	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8d1e	90 14		bcc $8d34			bcc 	_CITRNormal
.8d20	38		sec				sec
.8d21					_CITRNegative:
.8d21	a9 00		lda #$00			lda 	#0
.8d23	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d25	91 36		sta ($36),y			sta 	(zTemp0),y
.8d27	c8		iny				iny
.8d28	ca		dex				dex
.8d29	d0 f6		bne $8d21			bne 	_CITRNegative
.8d2b	88		dey				dey 								; look at MSB of mantissa
.8d2c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8d2e	09 80		ora #$80			ora 	#$80
.8d30	91 36		sta ($36),y			sta 	(zTemp0),y
.8d32	7a		ply				ply
.8d33	60		rts				rts
.8d34					_CITRNormal:
.8d34	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8d36	91 36		sta ($36),y			sta 	(zTemp0),y
.8d38	c8		iny				iny
.8d39	ca		dex				dex
.8d3a	d0 f8		bne $8d34			bne 	_CITRNormal
.8d3c	7a		ply				ply 								; and exit.
.8d3d	60		rts				rts
.8d3e					NextCommand:
.8d3e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8d40	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8d42	20 f3 a1	jsr $a1f3			jsr 	StackCheckFrame
.8d45	5a		phy				phy
.8d46	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8d48	b1 34		lda ($34),y			lda 	(basicStack),y
.8d4a	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8d4c	30 02		bmi $8d50			bmi 	_NCStepNeg
.8d4e	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8d50					_NCStepNeg:
.8d50	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8d52	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8d54	18		clc				clc
.8d55					_NCBump:
.8d55	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8d57	91 34		sta ($34),y			sta 	(basicStack),y
.8d59	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8d5b	c8		iny				iny 								; next byte
.8d5c	ca		dex				dex 								; do four times
.8d5d	d0 f6		bne $8d55			bne 	_NCBump
.8d5f	20 04 8d	jsr $8d04			jsr		CopyIndexToReference		; copy it to the reference variable.
.8d62	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8d64	b1 34		lda ($34),y			lda 	(basicStack),y
.8d66	0a		asl a				asl 	a 							; sign bit to carry
.8d67	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8d69	85 38		sta $38				sta 	zTemp1
.8d6b	90 02		bcc $8d6f			bcc 	_NCCompRev 					; use if step is +ve
.8d6d	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8d6f					_NCCompRev:
.8d6f	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8d71	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8d73	85 39		sta $39				sta 	zTemp1+1
.8d75	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8d77	38		sec				sec
.8d78					_NCCompare:
.8d78	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d7a	b1 34		lda ($34),y			lda 	(basicStack),y
.8d7c	a4 39		ldy $39				ldy 	zTemp1+1
.8d7e	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d80	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d82	e6 39		inc $39				inc 	zTemp1+1
.8d84	ca		dex				dex 								; do it 4 times.
.8d85	d0 f1		bne $8d78			bne 	_NCCompare
.8d87	50 02		bvc $8d8b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d89	49 80		eor #$80			eor 	#$80
.8d8b					_NCNoOverflow:
.8d8b	7a		ply				ply 								; restore Y position
.8d8c	0a		asl a				asl 	a 							; is bit 7 set.
.8d8d	90 04		bcc $8d93			bcc 	_NCLoopback 				; if no , >= so loop back
.8d8f	20 e5 a1	jsr $a1e5			jsr 	StackClose 					; exit the loop
.8d92	60		rts				rts
.8d93					_NCLoopBack:
.8d93	20 1c a2	jsr $a21c			jsr 	STKLoadCodePosition 		; loop back
.8d96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d97					Command_GOSUB:
.8d97	a2 00		ldx #$00			ldx 	#0
.8d99	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d9c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d9e	20 c7 a1	jsr $a1c7			jsr 	StackOpen 					; create frame
.8da1	20 0b a2	jsr $a20b			jsr 	STKSaveCodePosition 		; save current position
.8da4	4c ba 8d	jmp $8dba			jmp 	GotoStackX
.8da7					Command_RETURN:
.8da7	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8da9	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8dab	20 f3 a1	jsr $a1f3			jsr 	StackCheckFrame
.8dae	20 1c a2	jsr $a21c			jsr 	STKLoadCodePosition 		; restore code position
.8db1	20 e5 a1	jsr $a1e5			jsr 	StackClose
.8db4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8db5					GotoCommand:
.8db5	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8db7	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger
.8dba					GotoStackX:
.8dba	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8dbd	48		pha				pha 								; it is slightly inefficient, just in cases.
.8dbe	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8dc1	fa		plx				plx
.8dc2	20 72 a1	jsr $a172			jsr 	MemorySearch 				; transfer to line number AX.
.8dc5	90 05		bcc $8dcc			bcc 	_GotoError 					; not found, off end.
.8dc7	d0 03		bne $8dcc			bne 	_GotoError 					; not found exactly
.8dc9	4c f5 90	jmp $90f5			jmp 	RunNewLine 					; and go straight to new line code.
.8dcc					_GotoError:
.8dcc	a9 0d		lda #$0d		lda	#13
.8dce	4c 5b 95	jmp $955b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8dd1					IfCommand:
.8dd1	a2 00		ldx #$00			ldx 	#0 							; If what.
.8dd3	20 67 a0	jsr $a067			jsr 	EvaluateNumber
.8dd6	b1 30		lda ($30),y			lda 	(codePtr),y
.8dd8	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8dda	d0 0a		bne $8de6			bne 	_IFStructured
.8ddc	c8		iny				iny 								; consume THEN
.8ddd	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; is it zero
.8de0	f0 01		beq $8de3			beq 	_IfFail 					; if fail, go to next line
.8de2	60		rts				rts 								; if THEN just continue
.8de3					_IfFail:
.8de3	4c 5a 91	jmp $915a			jmp 	EOLCommand
.8de6					_IfStructured:
.8de6	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; is it zero
.8de9	d0 07		bne $8df2			bne 	_IfExit 					; if not, then continue normally.
.8deb	a9 ae		lda #$ae			lda 	#KWD_ELSE 					; look for else/endif
.8ded	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.8def	20 cd 94	jsr $94cd			jsr 	ScanForward 				; and run from there/
.8df2					_IfExit:
.8df2	60		rts				rts
.8df3					ElseCode:
.8df3	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8df5	aa		tax				tax 								; so just go to the structure exit
.8df6	20 cd 94	jsr $94cd			jsr 	ScanForward
.8df9	60		rts				rts
.8dfa					EndIf:
.8dfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8dfb					LetCommand:
.8dfb	a2 00		ldx #$00			ldx 	#0
.8dfd	b1 30		lda ($30),y			lda 	(codePtr),y
.8dff	c9 10		cmp #$10			cmp 	#KWD_AT
.8e01	d0 16		bne $8e19			bne 	_LCStandard
.8e03	c8		iny				iny 								; skip equal
.8e04	20 35 9c	jsr $9c35			jsr 	EvaluateTerm 				; get a number
.8e07	20 79 9a	jsr $9a79			jsr 	Dereference 				; dereference it
.8e0a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8e0d	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8e0f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8e12	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8e14	d0 10		bne $8e26			bne 	_LCMain
.8e16	4c 0d af	jmp $af0d			jmp 	TypeError 					; was a reference before.
.8e19					_LCStandard:
.8e19	ad 4c 99	lda $994c			lda 	PrecedenceLevel+"*"			; precedence > this
.8e1c	20 66 99	jsr $9966			jsr 	EvaluateExpressionAtPrecedence
.8e1f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8e22	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8e24	f0 0e		beq $8e34			beq 	_LetGoProc 					; it's a procedure call.
.8e26					_LCMain:
.8e26	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8e28	20 2d a9	jsr $a92d			jsr 	CheckNextA
.8e2b	e8		inx				inx 								; RHS
.8e2c	20 5e a0	jsr $a05e			jsr 	EvaluateValue
.8e2f	ca		dex				dex
.8e30	20 37 8e	jsr $8e37			jsr 	AssignVariable
.8e33	60		rts				rts
.8e34					_LetGoProc:
.8e34	4c d0 8f	jmp $8fd0			jmp 	CallProcedure
.8e37					AssignVariable:
.8e37	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8e3a	48		pha				pha 								; save a copy
.8e3b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e3e	29 10		and #$10			and 	#NSBIsString
.8e40	d0 0b		bne $8e4d			bne 	_ASError
.8e42	68		pla				pla 								; get back
.8e43	29 10		and #$10			and 	#NSBIsString 				; check type
.8e45	d0 03		bne $8e4a			bne 	_ASString
.8e47	4c a1 99	jmp $99a1			jmp 	AssignNumber
.8e4a					_ASString:
.8e4a	4c 0f 9a	jmp $9a0f			jmp 	AssignString
.8e4d					_ASError:
.8e4d	4c 0d af	jmp $af0d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8e50					Command_List:
.8e50	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8e53	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8e56	a9 ff		lda #$ff			lda 	#$FF
.8e58	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8e5b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8e5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8e60	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e62	f0 1e		beq $8e82			beq 	_CLSecond
.8e64	20 e0 8e	jsr $8ee0			jsr 	CLIsDigit 					; if not digit, list all
.8e67	b0 24		bcs $8e8d			bcs 	_CLStart
.8e69	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8e6b	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger
.8e6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8e70	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e72	f0 0e		beq $8e82			beq 	_CLSecond 					; if so go get it
.8e74	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8e77	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8e7a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8e7d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8e80	80 0b		bra $8e8d			bra 	_CLStart
.8e82					_CLSecond:
.8e82	c8		iny				iny 								; consume comma
.8e83	20 e0 8e	jsr $8ee0			jsr 	CLIsDigit 					; digit found
.8e86	b0 05		bcs $8e8d			bcs 	_CLStart 					; if not, continue listing
.8e88	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8e8a	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger
.8e8d					_CLStart
.8e8d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e8f	85 30		sta $30				sta 	codePtr
.8e91	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e93	85 31		sta $31				sta 	codePtr+1
.8e95					_CLLoop:
.8e95	20 e9 b0	jsr $b0e9			jsr 	EXTBreakCheck 				; break check
.8e98	f0 30		beq $8eca			beq 	_CLExit
.8e9a	b2 30		lda ($30)			lda 	(codePtr)
.8e9c	f0 2c		beq $8eca			beq 	_CLExit
.8e9e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8ea0	20 cd 8e	jsr $8ecd			jsr 	CLCompareLineNo
.8ea3	90 18		bcc $8ebd			bcc 	_CLNext
.8ea5	a2 07		ldx #$07			ldx 	#7
.8ea7	20 cd 8e	jsr $8ecd			jsr 	CLCompareLineNo
.8eaa	f0 02		beq $8eae			beq 	_CLDoThisOne
.8eac	b0 0f		bcs $8ebd			bcs 	_CLNext
.8eae					_CLDoThisOne:
.8eae	20 29 93	jsr $9329			jsr 	ListConvertLine 			; convert line into token Buffer
.8eb1	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8eb3	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8eb5	20 b4 95	jsr $95b4			jsr 	PrintStringXA
.8eb8	a9 0d		lda #$0d			lda 	#13 						; new line
.8eba	20 a8 b0	jsr $b0a8			jsr 	EXTPrintCharacter
.8ebd					_CLNext:
.8ebd	18		clc				clc
.8ebe	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ec0	65 30		adc $30				adc 	codePtr
.8ec2	85 30		sta $30				sta 	codePtr
.8ec4	90 02		bcc $8ec8			bcc 	_CREExit
.8ec6	e6 31		inc $31				inc 	codePtr+1
.8ec8					_CREExit:
.8ec8	80 cb		bra $8e95			bra 	_CLLoop
.8eca					_CLExit:
.8eca	4c cb 8a	jmp $8acb			jmp 	WarmStart
.8ecd					CLCompareLineNo:
.8ecd	38		sec				sec
.8ece	a0 01		ldy #$01			ldy 	#1
.8ed0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ed2	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8ed5	85 36		sta $36				sta 	zTemp0
.8ed7	c8		iny				iny
.8ed8	b1 30		lda ($30),y			lda 	(codePtr),y
.8eda	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8edd	05 36		ora $36				ora 	zTemp0
.8edf	60		rts				rts
.8ee0					CLIsDigit:
.8ee0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee2	c9 30		cmp #$30			cmp 	#"0"
.8ee4	90 03		bcc $8ee9			bcc	 	_CLIDExitFalse
.8ee6	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ee8	60		rts				rts
.8ee9					_CLIDExitFalse:
.8ee9	38		sec				sec
.8eea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8eeb					Command_LOCAL:
.8eeb	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8eed	20 f9 8e	jsr $8ef9			jsr 	LocaliseNextTerm 			; convert term to a local.
.8ef0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ef2	c8		iny				iny
.8ef3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ef5	f0 f4		beq $8eeb			beq 	Command_LOCAL
.8ef7	88		dey				dey 								; unpick pre-get
.8ef8	60		rts				rts
.8ef9					LocaliseNextTerm:
.8ef9	20 35 9c	jsr $9c35			jsr 	EvaluateTerm 				; evaluate the term
.8efc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8eff	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8f01	f0 69		beq $8f6c			beq		_LNTError
.8f03	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8f06	85 36		sta $36				sta 	zTemp0
.8f08	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f0b	85 37		sta $37				sta  	zTemp0+1
.8f0d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f10	29 10		and #$10			and 	#NSBIsString
.8f12	d0 22		bne $8f36			bne 	_LNTPushString
.8f14	5a		phy				phy
.8f15	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8f17					_LNTPushNumLoop:
.8f17	b1 36		lda ($36),y			lda		(zTemp0),y
.8f19	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f1c	a9 00		lda #$00			lda 	#0
.8f1e	91 36		sta ($36),y			sta 	(zTemp0),y
.8f20	c8		iny				iny
.8f21	c0 05		cpy #$05			cpy 	#5
.8f23	d0 f2		bne $8f17			bne 	_LNTPushNumLoop
.8f25	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8f27	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f2a	a5 37		lda $37				lda 	zTemp0+1
.8f2c	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f2f	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8f31	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f34	7a		ply				ply
.8f35	60		rts				rts
.8f36					_LNTPushString:
.8f36	5a		phy				phy
.8f37	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8f39	85 38		sta $38				sta 	zTemp1
.8f3b	a0 01		ldy #$01			ldy 	#1
.8f3d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f3f	85 39		sta $39				sta 	zTemp1+1
.8f41	a0 00		ldy #$00			ldy 	#0 							; output string
.8f43	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8f45	f0 0a		beq $8f51			beq 	_LNTStringOut
.8f47					_LNTPushStrLoop:
.8f47	b1 38		lda ($38),y			lda 	(zTemp1),y
.8f49	f0 06		beq $8f51			beq 	_LNTStringOut
.8f4b	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f4e	c8		iny				iny
.8f4f	80 f6		bra $8f47			bra 	_LNTPushStrLoop
.8f51					_LNTStringOut:
.8f51	98		tya				tya									; output length
.8f52	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f55	a9 00		lda #$00			lda 	#0 							; clear original string.
.8f57	92 38		sta ($38)			sta 	(zTemp1)
.8f59	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8f5c	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f5f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f62	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f65	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8f67	20 a5 a1	jsr $a1a5			jsr 	StackPushByte
.8f6a	7a		ply				ply
.8f6b	60		rts				rts
.8f6c					_LNTError:
.8f6c	4c 03 af	jmp $af03			jmp 	SyntaxError
.a8c4					LocalPopValue:
.a8c4	20 be a1	jsr $a1be			jsr 	StackPopByte
.a8c7	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a8c9	d0 17		bne $a8e2			bne 	_LPVString
.a8cb	20 be a1	jsr $a1be			jsr 	StackPopByte 				; address
.a8ce	85 37		sta $37				sta 	zTemp0+1
.a8d0	20 be a1	jsr $a1be			jsr 	StackPopByte
.a8d3	85 36		sta $36				sta 	zTemp0
.a8d5	5a		phy				phy
.a8d6	a0 04		ldy #$04			ldy 	#4 							; copy back
.a8d8					_LPVNumberCopy:
.a8d8	20 be a1	jsr $a1be			jsr 	StackPopByte
.a8db	91 36		sta ($36),y			sta 	(zTemp0),y
.a8dd	88		dey				dey
.a8de	10 f8		bpl $a8d8			bpl 	_LPVNumberCopy
.a8e0	7a		ply				ply 								; and complete
.a8e1	60		rts				rts
.a8e2					_LPVString:
.a8e2	20 be a1	jsr $a1be			jsr 	StackPopByte 				; address of record => zTemp0
.a8e5	85 37		sta $37				sta 	zTemp0+1
.a8e7	20 be a1	jsr $a1be			jsr 	StackPopByte
.a8ea	85 36		sta $36				sta 	zTemp0
.a8ec	5a		phy				phy
.a8ed	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a8ef	85 38		sta $38				sta 	zTemp1
.a8f1	a0 01		ldy #$01			ldy 	#1
.a8f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.a8f5	85 39		sta $39				sta 	zTemp1+1
.a8f7	20 be a1	jsr $a1be			jsr 	StackPopByte 				; # to get => y
.a8fa	a8		tay				tay
.a8fb	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a8fd	f0 0e		beq $a90d			beq 	_LPVStringCopied
.a8ff	a9 00		lda #$00			lda 	#0 							; NULL on end
.a901	91 38		sta ($38),y			sta 	(zTemp1),y
.a903					_LPVStringCopy:
.a903	88		dey				dey
.a904	30 07		bmi $a90d			bmi 	_LPVStringCopied
.a906	20 be a1	jsr $a1be			jsr 	StackPopByte
.a909	91 38		sta ($38),y			sta 	(zTemp1),y
.a90b	80 f6		bra $a903			bra 	_LPVStringCopy
.a90d					_LPVStringCopied:
.a90d	fa		plx				plx
.a90e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8f6f					NewCommand:
.8f6f	20 50 a1	jsr $a150			jsr 	MemoryNew
.8f72	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8f75	20 64 8b	jsr $8b64			jsr 	ClearCommand 				; clear everything.
.8f78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8f79					Command_Print:
.8f79	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8f7a					_CPLoop:
.8f7a	08		php				php 								; save last action flag
.8f7b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f7d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8f7f	f0 46		beq $8fc7			beq 	_CPExit
.8f81	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f83	f0 42		beq $8fc7			beq 	_CPExit
.8f85	68		pla				pla 								; throw last action flag
.8f86	b1 30		lda ($30),y			lda 	(codePtr),y
.8f88	c8		iny				iny
.8f89	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8f8b	f0 37		beq $8fc4			beq 	_CPContinueWithSameLine
.8f8d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8f8f	f0 2e		beq $8fbf			beq 	_CPTab
.8f91	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8f93	f0 26		beq $8fbb			beq 	_CPNewLine
.8f95	88		dey				dey 								; undo the get.
.8f96	a2 00		ldx #$00			ldx 	#0
.8f98	20 5e a0	jsr $a05e			jsr 	EvaluateValue 				; get a value into slot 0
.8f9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8f9e	29 10		and #$10			and 	#NSBIsString
.8fa0	f0 0b		beq $8fad			beq 	_CPNumber
.8fa2	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8fa5	ad 08 04	lda $0408			lda 	NSMantissa0
.8fa8	20 b4 95	jsr $95b4			jsr 	PrintStringXA
.8fab	80 cc		bra $8f79			bra 	Command_Print 				; loop round clearing carry so NL if end
.8fad					_CPNumber:
.8fad	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8faf	20 34 9f	jsr $9f34			jsr 	ConvertNumberToString 		; convert to string
.8fb2	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8fb4	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8fb6	20 b4 95	jsr $95b4			jsr 	PrintStringXA
.8fb9	80 be		bra $8f79			bra 	Command_Print 				; loop round clearing carry so NL if end
.8fbb					_CPNewLine:
.8fbb	a9 0d		lda #$0d			lda 	#13
.8fbd	80 02		bra $8fc1			bra 	_CPPrintChar
.8fbf					_CPTab:
.8fbf	a9 09		lda #$09			lda 	#9 							; print TAB
.8fc1					_CPPrintChar:
.8fc1	20 a8 b0	jsr $b0a8			jsr 	EXTPrintCharacter
.8fc4					_CPContinueWithSameLine:
.8fc4	38		sec				sec 								; loop round with carry set, which
.8fc5	80 b3		bra $8f7a			bra 	_CPLoop 					; will inhibit final CR
.8fc7					_CPExit:
.8fc7	28		plp				plp 								; get last action flag
.8fc8	b0 05		bcs $8fcf			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8fca	a9 0d		lda #$0d			lda 	#13 						; print new line
.8fcc	20 a8 b0	jsr $b0a8			jsr 	EXTPrintCharacter
.8fcf					_CPExit2:
.8fcf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8fd0					CallProcedure:
.8fd0	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8fd2	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd4	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8fd6	f0 0c		beq $8fe4			beq 	_CPEndParam
.8fd8					_CPParamLoop:
.8fd8	20 64 99	jsr $9964			jsr 	EvaluateExpression 			; get parameter onto stack
.8fdb	e8		inx				inx 								; bump next stack
.8fdc	b1 30		lda ($30),y			lda 	(codePtr),y
.8fde	c8		iny				iny
.8fdf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8fe1	f0 f5		beq $8fd8			beq 	_CPParamLoop
.8fe3	88		dey				dey 								; unpick.
.8fe4					_CPEndParam:
.8fe4	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8fe7	c8		iny				iny									; skip right bracket
.8fe8	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8fea	20 c7 a1	jsr $a1c7			jsr 	StackOpen
.8fed	20 0b a2	jsr $a20b			jsr 	STKSaveCodePosition 		; save loop position
.8ff0	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8ff3	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ff5	ad 10 04	lda $0410			lda 	NSMantissa1
.8ff8	85 37		sta $37				sta 	zTemp0+1
.8ffa	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8ffc	b2 36		lda ($36)			lda 	(zTemp0)
.8ffe	85 30		sta $30				sta 	safePtr
.9000	b1 36		lda ($36),y			lda 	(zTemp0),y
.9002	85 31		sta $31				sta 	safePtr+1
.9004	c8		iny				iny
.9005	b1 36		lda ($36),y			lda 	(zTemp0),y
.9007	85 32		sta $32				sta 	safePtr+2
.9009	c8		iny				iny
.900a	b1 36		lda ($36),y			lda 	(zTemp0),y
.900c	85 33		sta $33				sta 	safePtr+3
.900e	c8		iny				iny 								; get Y offset -> Y
.900f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9011	a8		tay				tay
.9012	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9014	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.9017	f0 13		beq $902c			beq 	_ParamExit 					; if so, exit.
.9019					_ParamExtract:
.9019	ca		dex				dex 								; put a local term on the level before
.901a	20 f9 8e	jsr $8ef9			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.901d	20 37 8e	jsr $8e37			jsr 	AssignVariable 				; assign stacked value to the variable.
.9020	e8		inx				inx 								; advance to next parameter to do.
.9021	e8		inx				inx
.9022	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9025	f0 05		beq $902c			beq 	_ParamExit
.9027	20 25 a9	jsr $a925			jsr 	CheckComma 					; comma seperating parameters
.902a	80 ed		bra $9019			bra 	_ParamExtract
.902c					_ParamExit:
.902c	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 			; check )
.902f	60		rts				rts 								; and continue from here
.a90f					Command_ENDPROC:
.a90f	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a911	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a913	20 f3 a1	jsr $a1f3			jsr 	StackCheckFrame
.a916	20 1c a2	jsr $a21c			jsr 	STKLoadCodePosition 		; restore code position
.a919	20 e5 a1	jsr $a1e5			jsr 	StackClose
.a91c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9030					Command_Read:
.9030	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9032	20 35 9c	jsr $9c35			jsr 	EvaluateTerm
.9035	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9038	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.903a	f0 4a		beq $9086			beq 	_CRSyntax 					; check reference (bit 0)
.903c	20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs 			; swap code and data
.903f	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9042	d0 20		bne $9064			bne 	_CRContinueData
.9044					_CRKeepSearching:
.9044	a9 ab		lda #$ab			lda 	#KWD_DATA 					; scan for instruction
.9046	aa		tax				tax
.9047	20 cd 94	jsr $94cd			jsr 	ScanForward
.904a	c9 ab		cmp #$ab			cmp 	#KWD_DATA 					; found data ?
.904c	f0 16		beq $9064			beq 	_CRHaveData 				; found it
.904e	18		clc				clc
.904f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9051	65 30		adc $30				adc 	codePtr
.9053	85 30		sta $30				sta 	codePtr
.9055	90 02		bcc $9059			bcc 	_CREExit
.9057	e6 31		inc $31				inc 	codePtr+1
.9059					_CREExit:
.9059	a0 03		ldy #$03			ldy 	#3 							; start of line.
.905b	b2 30		lda ($30)			lda 	(codePtr)
.905d	d0 e5		bne $9044			bne 	_CRKeepSearching
.905f	a9 0b		lda #$0b		lda	#11
.9061	4c 5b 95	jmp $955b		jmp	ErrorHandler
.9064					_CRHaveData:
.9064					_CRContinueData:
.9064	a2 01		ldx #$01			ldx 	#1
.9066	20 5e a0	jsr $a05e			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9069	ca		dex				dex
.906a	20 37 8e	jsr $8e37			jsr		AssignVariable 				; do the assignment
.906d	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9070	b1 30		lda ($30),y			lda 	(codePtr),y
.9072	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9074	d0 04		bne $907a			bne 	_CRSwapBack
.9076	c8		iny				iny 								; consume comma
.9077	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.907a					_CRSwapBack:
.907a	20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs			; swap them back.
.907d	b1 30		lda ($30),y			lda 	(codePtr),y
.907f	c8		iny				iny
.9080	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9082	f0 ac		beq $9030			beq 	Command_Read 				; if so go round again.
.9084	88		dey				dey 								; unpick get.
.9085	60		rts				rts
.9086					_CRSyntax:
.9086	4c 03 af	jmp $af03			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9089					RemCommand:
.9089	b1 30		lda ($30),y			lda 	(codePtr),y
.908b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.908d	d0 06		bne $9095			bne 	_RMExit
.908f	c8		iny				iny
.9090	98		tya				tya
.9091	38		sec				sec
.9092	71 30		adc ($30),y			adc 	(codePtr),y
.9094	a8		tay				tay
.9095					_RMExit:
.9095	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9096					Command_REPEAT:
.9096	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9098	20 c7 a1	jsr $a1c7			jsr 	StackOpen
.909b	20 0b a2	jsr $a20b			jsr 	STKSaveCodePosition 		; save loop position
.909e	60		rts				rts
.909f					Command_UNTIL:
.909f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.90a1	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.90a3	20 f3 a1	jsr $a1f3			jsr 	StackCheckFrame
.90a6	a2 00		ldx #$00			ldx 	#0
.90a8	20 67 a0	jsr $a067			jsr 	EvaluateNumber 				; work out the number
.90ab	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; check if zero
.90ae	f0 04		beq $90b4			beq 	_CULoopBack 				; if so keep looping
.90b0	20 e5 a1	jsr $a1e5			jsr 	StackClose		 			; return
.90b3	60		rts				rts
.90b4					_CULoopBack:
.90b4	20 1c a2	jsr $a21c			jsr 	STKLoadCodePosition 		; loop back
.90b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.90b8					Command_Restore:
.90b8	20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs 			; swap code and data
.90bb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90bd	85 30		sta $30				sta 	codePtr
.90bf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90c1	85 31		sta $31				sta 	codePtr+1
.90c3	20 cf 90	jsr $90cf			jsr 	SwapDataCodePtrs 			; put them back
.90c6	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.90c8	8d 9b 04	sta $049b			sta 	dataPointer+4
.90cb	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.90ce	60		rts				rts
.90cf					SwapDataCodePtrs:
.90cf	da		phx				phx
.90d0	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.90d2					_SDCPLoop:
.90d2	b5 30		lda $30,x			lda 	safePtr,x
.90d4	48		pha				pha
.90d5	bd 97 04	lda $0497,x			lda 	dataPointer,x
.90d8	95 30		sta $30,x			sta 	safePtr,x
.90da	68		pla				pla
.90db	9d 97 04	sta $0497,x			sta 	dataPointer,x
.90de	ca		dex				dex
.90df	10 f1		bpl $90d2			bpl 	_SDCPLoop
.90e1	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.90e4	8c 9b 04	sty $049b			sty 	dataPointer+4
.90e7	a8		tay				tay
.90e8	fa		plx				plx
.90e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.90ea					CommandRUN:
.90ea	20 64 8b	jsr $8b64			jsr 	ClearCommand 				; clear variable/stacks/etc.
.90ed	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90ef	85 30		sta $30				sta 	codePtr
.90f1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90f3	85 31		sta $31				sta 	codePtr+1
.90f5					RUNNewLine:
.90f5	b2 30		lda ($30)			lda 	(codePtr)
.90f7	f0 5e		beq $9157			beq 	CRNoProgram         		; no then END.
.90f9	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.90fb	9a		txs				txs
.90fc					RUNCodePointerLine:
.90fc	a0 02		ldy #$02			ldy 	#2 							; start of program
.90fe					_CRIncMainLoop:
.90fe	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9101	d0 05		bne $9108			bne 	_CRNoBreakCheck
.9103	20 e9 b0	jsr $b0e9			jsr 	EXTBreakCheck 				; break check
.9106	f0 4a		beq $9152			beq 	_CRBreak
.9108					_CRNoBreakCheck:
.9108	c8		iny				iny
.9109					_CRMainLoop:
.9109	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.910c	b1 30		lda ($30),y			lda 	(codePtr),y
.910e	10 10		bpl $9120			bpl 	_CRNotKeyword
.9110	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9112	b0 04		bcs $9118			bcs 	_CRIsKeyword
.9114	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9116	b0 34		bcs $914c			bcs		_CRSyntaxError
.9118					_CRIsKeyword:
.9118	c8		iny				iny 								; consume command
.9119	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.911a	aa		tax				tax 								; put in X for vector jump
.911b	20 4f 91	jsr $914f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.911e	80 e9		bra $9109			bra 	_CRMainLoop 				; and loop round
.9120					_CRNotKeyword:
.9120	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9122	f0 da		beq $90fe			beq 	_CRIncMainLoop
.9124	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9126	90 05		bcc $912d			bcc 	_CRNotVariable
.9128					_CRGoLet:
.9128	20 fb 8d	jsr $8dfb			jsr 	LetCommand
.912b	80 dc		bra $9109			bra 	_CRMainLoop
.912d					_CRNotVariable:
.912d	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.912f	f0 f7		beq $9128			beq 	_CRGoLet
.9131	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9133	f0 f3		beq $9128			beq 	_CRGoLet
.9135	c9 21		cmp #$21			cmp 	#KWD_PLING
.9137	f0 ef		beq $9128			beq 	_CRGoLet
.9139	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.913b	f0 09		beq $9146			beq 	_CRGoRem
.913d	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.913f	d0 0b		bne $914c			bne 	_CRSyntaxError
.9141	20 04 8a	jsr $8a04			jsr 	LabelHere
.9144	80 c3		bra $9109			bra 	_CRMainLoop
.9146					_CRGoRem:
.9146	c8		iny				iny
.9147	20 89 90	jsr $9089			jsr 	RemCommand
.914a	80 bd		bra $9109			bra 	_CRMainLoop
.914c					_CRSyntaxError:
.914c	4c 03 af	jmp $af03			jmp 	SyntaxError
.914f					_CRCallVector0:
.914f	7c fa 91	jmp ($91fa,x)			jmp 	(VectorSet0,x)
.9152					_CRBreak:
.9152	a9 01		lda #$01		lda	#1
.9154	4c 5b 95	jmp $955b		jmp	ErrorHandler
.9157					CRNoProgram:
.9157	4c 81 8c	jmp $8c81			jmp 	EndCommand
.915a					EOLCommand:
.915a	18		clc				clc
.915b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.915d	65 30		adc $30				adc 	codePtr
.915f	85 30		sta $30				sta 	codePtr
.9161	90 02		bcc $9165			bcc 	_CREExit
.9163	e6 31		inc $31				inc 	codePtr+1
.9165					_CREExit:
.9165	80 8e		bra $90f5			bra 	RunNewLine
.9167					Shift1Command:
.9167	b1 30		lda ($30),y			lda 	(codePtr),y
.9169	c8		iny				iny
.916a	0a		asl a				asl 	a
.916b	aa		tax				tax
.916c	7c 80 92	jmp ($9280,x)			jmp 	(VectorSet1,x)
.916f					Shift2Command:
.916f	b1 30		lda ($30),y			lda 	(codePtr),y
.9171	c8		iny				iny
.9172	0a		asl a				asl 	a
.9173	aa		tax				tax
.9174	7c 9c 92	jmp ($929c,x)			jmp 	(VectorSet2,x)
.9177					Unused1:
.9177					Unused2:
.9177					Unused3:
.9177					Unused4:
.9177	4c 03 af	jmp $af03			jmp 	SyntaxError
>917a							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.917a					VectorSetPunc:
>917a	05 97					.word	ShiftLeft                        ; $00 <<
>917c	ff 95					.word	BinaryCompareLessEqual           ; $01 <=
>917e	f5 95					.word	BinaryCompareNotEqual            ; $02 <>
>9180	03 af					.word	SyntaxError                      ; $03 !!3
>9182	03 af					.word	SyntaxError                      ; $04 ><
>9184	09 96					.word	BinaryCompareGreaterEqual        ; $05 >=
>9186	08 97					.word	ShiftRight                       ; $06 >>
>9188	03 af					.word	SyntaxError                      ; $07 !!7
>918a	03 af					.word	SyntaxError                      ; $08 !!8
>918c	03 af					.word	SyntaxError                      ; $09 !!9
>918e	03 af					.word	SyntaxError                      ; $0a !!10
>9190	03 af					.word	SyntaxError                      ; $0b !!11
>9192	03 af					.word	SyntaxError                      ; $0c !!12
>9194	03 af					.word	SyntaxError                      ; $0d !!13
>9196	03 af					.word	SyntaxError                      ; $0e !!14
>9198	03 af					.word	SyntaxError                      ; $0f !!15
>919a	03 af					.word	SyntaxError                      ; $10 @
>919c	03 af					.word	SyntaxError                      ; $11 !!17
>919e	03 af					.word	SyntaxError                      ; $12 !!18
>91a0	03 af					.word	SyntaxError                      ; $13 [
>91a2	36 a9					.word	IntegerDivide                    ; $14 \
>91a4	03 af					.word	SyntaxError                      ; $15 ]
>91a6	8e 98					.word	EorInteger                       ; $16 ^
>91a8	03 af					.word	SyntaxError                      ; $17 _
>91aa	03 af					.word	SyntaxError                      ; $18 `
>91ac	03 af					.word	SyntaxError                      ; $19 !!25
>91ae	03 af					.word	SyntaxError                      ; $1a !!26
>91b0	03 af					.word	SyntaxError                      ; $1b {
>91b2	48 98					.word	OraInteger                       ; $1c |
>91b4	03 af					.word	SyntaxError                      ; $1d }
>91b6	03 af					.word	SyntaxError                      ; $1e ~
>91b8	03 af					.word	SyntaxError                      ; $1f [7m<7F>[m
>91ba	03 af					.word	SyntaxError                      ; $20
>91bc	d4 98					.word	WordIndirect                     ; $21 !
>91be	03 af					.word	SyntaxError                      ; $22 "
>91c0	03 af					.word	SyntaxError                      ; $23 #
>91c2	03 af					.word	SyntaxError                      ; $24 $
>91c4	83 a9					.word	IntegerModulus                   ; $25 %
>91c6	02 98					.word	AndInteger                       ; $26 &
>91c8	03 af					.word	SyntaxError                      ; $27 '
>91ca	03 af					.word	SyntaxError                      ; $28 (
>91cc	03 af					.word	SyntaxError                      ; $29 )
>91ce	f8 a9					.word	MulInteger                       ; $2a *
>91d0	9c 97					.word	AddInteger                       ; $2b +
>91d2	03 af					.word	SyntaxError                      ; $2c ,
>91d4	d7 97					.word	SubInteger                       ; $2d -
>91d6	03 af					.word	SyntaxError                      ; $2e .
>91d8	8f ab					.word	FDivideCommand                   ; $2f /
>91da	03 af					.word	SyntaxError                      ; $30 0
>91dc	03 af					.word	SyntaxError                      ; $31 1
>91de	03 af					.word	SyntaxError                      ; $32 2
>91e0	03 af					.word	SyntaxError                      ; $33 3
>91e2	03 af					.word	SyntaxError                      ; $34 4
>91e4	03 af					.word	SyntaxError                      ; $35 5
>91e6	03 af					.word	SyntaxError                      ; $36 6
>91e8	03 af					.word	SyntaxError                      ; $37 7
>91ea	03 af					.word	SyntaxError                      ; $38 8
>91ec	03 af					.word	SyntaxError                      ; $39 9
>91ee	03 af					.word	SyntaxError                      ; $3a :
>91f0	03 af					.word	SyntaxError                      ; $3b ;
>91f2	e1 95					.word	BinaryCompareLess                ; $3c <
>91f4	d7 95					.word	BinaryCompareEqual               ; $3d =
>91f6	eb 95					.word	BinaryCompareGreater             ; $3e >
>91f8	fb 98					.word	ByteIndirect                     ; $3f ?
.91fa					VectorSet0:
>91fa	5a 91					.word	EOLCommand                       ; $80 !0:EOF
>91fc	67 91					.word	Shift1Command                    ; $81 !1:SH1
>91fe	6f 91					.word	Shift2Command                    ; $82 !2:SH2
>9200	d5 ac					.word	AbsUnary                         ; $83 ABS(
>9202	c5 9d					.word	AllocUnary                       ; $84 ALLOC(
>9204	e5 ac					.word	AscUnary                         ; $85 ASC(
>9206	e5 9e					.word	ChrUnary                         ; $86 CHR$(
>9208	03 af					.word	SyntaxError                      ; $87 EVENT(
>920a	d3 95					.word	UnaryFalse                       ; $88 FALSE
>920c	f2 ac					.word	FracUnary                        ; $89 FRAC(
>920e	08 ad					.word	IntUnary                         ; $8a INT(
>9210	5e ad					.word	IsValUnary                       ; $8b ISVAL(
>9212	bf 9f					.word	Unary_Left                       ; $8c LEFT$(
>9214	1a ad					.word	LenUnary                         ; $8d LEN(
>9216	e9 9f					.word	Unary_Mid                        ; $8e MID$(
>9218	35 9e					.word	Unary_Not                        ; $8f NOT(
>921a	03 af					.word	SyntaxError                      ; $90 OFF
>921c	03 af					.word	SyntaxError                      ; $91 ON
>921e	4b 9e					.word	Unary_Random                     ; $92 RANDOM(
>9220	cf 9f					.word	Unary_Right                      ; $93 RIGHT$(
>9222	64 9e					.word	Unary_Rnd                        ; $94 RND(
>9224	34 ad					.word	SgnUnary                         ; $95 SGN(
>9226	f7 9e					.word	SpcUnary                         ; $96 SPC(
>9228	12 9f					.word	Unary_Str                        ; $97 STR$(
>922a	03 af					.word	SyntaxError                      ; $98 TIMER(
>922c	c7 95					.word	UnaryTrue                        ; $99 TRUE
>922e	54 ad					.word	ValUnary                         ; $9a VAL(
>9230	84 8c					.word	ForCommand                       ; $9b FOR
>9232	d1 8d					.word	IfCommand                        ; $9c IF
>9234	77 91					.word	Unused1                          ; $9d PROC
>9236	96 90					.word	Command_REPEAT                   ; $9e REPEAT
>9238	2c 95					.word	Command_WHILE                    ; $9f WHILE
>923a	fa 8d					.word	EndIf                            ; $a0 ENDIF
>923c	0f a9					.word	Command_ENDPROC                  ; $a1 ENDPROC
>923e	3e 8d					.word	NextCommand                      ; $a2 NEXT
>9240	77 91					.word	Unused4                          ; $a3 THEN
>9242	9f 90					.word	Command_UNTIL                    ; $a4 UNTIL
>9244	4d 95					.word	Command_WEND                     ; $a5 WEND
>9246	2a 8b					.word	CallCommand                      ; $a6 CALL
>9248	03 af					.word	SyntaxError                      ; $a7 CIRCLE
>924a	03 af					.word	SyntaxError                      ; $a8 CLS
>924c	03 af					.word	SyntaxError                      ; $a9 COLOR
>924e	03 af					.word	SyntaxError                      ; $aa COLOUR
>9250	bc 8b					.word	Command_Data                     ; $ab DATA
>9252	c4 8b					.word	DimCommand                       ; $ac DIM
>9254	77 91					.word	Unused3                          ; $ad DOWNTO
>9256	f3 8d					.word	ElseCode                         ; $ae ELSE
>9258	03 af					.word	SyntaxError                      ; $af GFX
>925a	97 8d					.word	Command_GOSUB                    ; $b0 GOSUB
>925c	b5 8d					.word	GotoCommand                      ; $b1 GOTO
>925e	03 af					.word	SyntaxError                      ; $b2 HERE
>9260	03 af					.word	SyntaxError                      ; $b3 HIDE
>9262	fb 8d					.word	LetCommand                       ; $b4 LET
>9264	03 af					.word	SyntaxError                      ; $b5 LINE
>9266	eb 8e					.word	Command_LOCAL                    ; $b6 LOCAL
>9268	03 af					.word	SyntaxError                      ; $b7 OUTLINE
>926a	79 8f					.word	Command_Print                    ; $b8 PRINT
>926c	30 90					.word	Command_Read                     ; $b9 READ
>926e	03 af					.word	SyntaxError                      ; $ba RECT
>9270	89 90					.word	RemCommand                       ; $bb REM
>9272	a7 8d					.word	Command_RETURN                   ; $bc RETURN
>9274	03 af					.word	SyntaxError                      ; $bd SCALE
>9276	03 af					.word	SyntaxError                      ; $be SHOW
>9278	03 af					.word	SyntaxError                      ; $bf SOLID
>927a	03 af					.word	SyntaxError                      ; $c0 SPRITE
>927c	03 af					.word	SyntaxError                      ; $c1 TEXT
>927e	77 91					.word	Unused2                          ; $c2 TO
.9280					VectorSet1:
>9280	03 af					.word	SyntaxError                      ; $80 !0:EOF
>9282	03 af					.word	SyntaxError                      ; $81 !1:SH1
>9284	03 af					.word	SyntaxError                      ; $82 !2:SH2
>9286	fb 8a					.word	AssembleCommand                  ; $83 ASSEMBLE
>9288	1a 8b					.word	AssertCommand                    ; $84 ASSERT
>928a	03 af					.word	SyntaxError                      ; $85 BITMAP
>928c	64 8b					.word	ClearCommand                     ; $86 CLEAR
>928e	81 8c					.word	EndCommand                       ; $87 END
>9290	50 8e					.word	Command_List                     ; $88 LIST
>9292	6f 8f					.word	NewCommand                       ; $89 NEW
>9294	b8 90					.word	Command_Restore                  ; $8a RESTORE
>9296	ea 90					.word	CommandRUN                       ; $8b RUN
>9298	03 af					.word	SyntaxError                      ; $8c SPRITES
>929a	24 93					.word	StopCommand                      ; $8d STOP
.929c					VectorSet2:
>929c	03 af					.word	SyntaxError                      ; $80 !0:EOF
>929e	03 af					.word	SyntaxError                      ; $81 !1:SH1
>92a0	03 af					.word	SyntaxError                      ; $82 !2:SH2
>92a2	c2 ad					.word	Assemble_adc                     ; $83 ADC
>92a4	ba ad					.word	Assemble_and                     ; $84 AND
>92a6	d6 ad					.word	Assemble_asl                     ; $85 ASL
>92a8	40 ae					.word	Assemble_bcc                     ; $86 BCC
>92aa	44 ae					.word	Assemble_bcs                     ; $87 BCS
>92ac	4c ae					.word	Assemble_beq                     ; $88 BEQ
>92ae	03 ae					.word	Assemble_bit                     ; $89 BIT
>92b0	34 ae					.word	Assemble_bmi                     ; $8a BMI
>92b2	48 ae					.word	Assemble_bne                     ; $8b BNE
>92b4	30 ae					.word	Assemble_bpl                     ; $8c BPL
>92b6	50 ae					.word	Assemble_bra                     ; $8d BRA
>92b8	54 ae					.word	Assemble_brk                     ; $8e BRK
>92ba	38 ae					.word	Assemble_bvc                     ; $8f BVC
>92bc	3c ae					.word	Assemble_bvs                     ; $90 BVS
>92be	5c ae					.word	Assemble_clc                     ; $91 CLC
>92c0	b0 ae					.word	Assemble_cld                     ; $92 CLD
>92c2	70 ae					.word	Assemble_cli                     ; $93 CLI
>92c4	a0 ae					.word	Assemble_clv                     ; $94 CLV
>92c6	ce ad					.word	Assemble_cmp                     ; $95 CMP
>92c8	17 ae					.word	Assemble_cpx                     ; $96 CPX
>92ca	12 ae					.word	Assemble_cpy                     ; $97 CPY
>92cc	f4 ad					.word	Assemble_dec                     ; $98 DEC
>92ce	ac ae					.word	Assemble_dex                     ; $99 DEX
>92d0	88 ae					.word	Assemble_dey                     ; $9a DEY
>92d2	be ad					.word	Assemble_eor                     ; $9b EOR
>92d4	f9 ad					.word	Assemble_inc                     ; $9c INC
>92d6	bc ae					.word	Assemble_inx                     ; $9d INX
>92d8	a8 ae					.word	Assemble_iny                     ; $9e INY
>92da	2b ae					.word	Assemble_jmp                     ; $9f JMP
>92dc	26 ae					.word	Assemble_jsr                     ; $a0 JSR
>92de	ca ad					.word	Assemble_lda                     ; $a1 LDA
>92e0	ef ad					.word	Assemble_ldx                     ; $a2 LDX
>92e2	0d ae					.word	Assemble_ldy                     ; $a3 LDY
>92e4	e0 ad					.word	Assemble_lsr                     ; $a4 LSR
>92e6	c0 ae					.word	Assemble_nop                     ; $a5 NOP
>92e8	b6 ad					.word	Assemble_ora                     ; $a6 ORA
>92ea	6c ae					.word	Assemble_pha                     ; $a7 PHA
>92ec	58 ae					.word	Assemble_php                     ; $a8 PHP
>92ee	b4 ae					.word	Assemble_phx                     ; $a9 PHX
>92f0	74 ae					.word	Assemble_phy                     ; $aa PHY
>92f2	7c ae					.word	Assemble_pla                     ; $ab PLA
>92f4	60 ae					.word	Assemble_plp                     ; $ac PLP
>92f6	c8 ae					.word	Assemble_plx                     ; $ad PLX
>92f8	84 ae					.word	Assemble_ply                     ; $ae PLY
>92fa	db ad					.word	Assemble_rol                     ; $af ROL
>92fc	e5 ad					.word	Assemble_ror                     ; $b0 ROR
>92fe	68 ae					.word	Assemble_rti                     ; $b1 RTI
>9300	78 ae					.word	Assemble_rts                     ; $b2 RTS
>9302	d2 ad					.word	Assemble_sbc                     ; $b3 SBC
>9304	64 ae					.word	Assemble_sec                     ; $b4 SEC
>9306	c4 ae					.word	Assemble_sed                     ; $b5 SED
>9308	80 ae					.word	Assemble_sei                     ; $b6 SEI
>930a	c6 ad					.word	Assemble_sta                     ; $b7 STA
>930c	b8 ae					.word	Assemble_stp                     ; $b8 STP
>930e	ea ad					.word	Assemble_stx                     ; $b9 STX
>9310	08 ae					.word	Assemble_sty                     ; $ba STY
>9312	fe ad					.word	Assemble_stz                     ; $bb STZ
>9314	9c ae					.word	Assemble_tax                     ; $bc TAX
>9316	98 ae					.word	Assemble_tay                     ; $bd TAY
>9318	21 ae					.word	Assemble_trb                     ; $be TRB
>931a	1c ae					.word	Assemble_tsb                     ; $bf TSB
>931c	a4 ae					.word	Assemble_tsx                     ; $c0 TSX
>931e	8c ae					.word	Assemble_txa                     ; $c1 TXA
>9320	94 ae					.word	Assemble_txs                     ; $c2 TXS
>9322	90 ae					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9324					StopCommand:
.9324	a9 08		lda #$08		lda	#8
.9326	4c 5b 95	jmp $955b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9329					ListConvertLine:
.9329	9c 9d 04	stz $049d			stz 	tbOffset
.932c	9c a9 04	stz $04a9			stz 	tokenBuffer
.932f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9331	b1 30		lda ($30),y			lda 	(codePtr),y
.9333	aa		tax				tax
.9334	88		dey				dey
.9335	b1 30		lda ($30),y			lda 	(codePtr),y
.9337	20 79 aa	jsr $aa79			jsr 	ConvertInt16
.933a	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.933c	86 37		stx $37				stx 	zTemp0+1
.933e	a0 00		ldy #$00			ldy 	#0
.9340					_LCCopyNumber:
.9340	b1 36		lda ($36),y			lda 	(zTemp0),y
.9342	20 42 94	jsr $9442			jsr 	LCLWrite
.9345	c8		iny				iny
.9346	b1 36		lda ($36),y			lda 	(zTemp0),y
.9348	d0 f6		bne $9340			bne 	_LCCopyNumber
.934a					_LCPadOut:
.934a	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.934c	20 42 94	jsr $9442			jsr 	LCLWrite
.934f	ad 9d 04	lda $049d			lda 	tbOffset
.9352	c9 06		cmp #$06			cmp 	#6
.9354	d0 f4		bne $934a			bne 	_LCPadOut
.9356	a0 03		ldy #$03			ldy 	#3 							; start position.
.9358					_LCMainLoop:
.9358	b1 30		lda ($30),y			lda 	(codePtr),y
.935a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.935c	f0 17		beq $9375			beq 	_LCExit
.935e	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9360	90 14		bcc $9376			bcc 	_LCDoubles
.9362	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9364	90 20		bcc $9386			bcc 	_LCShiftPunc
.9366	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9368	90 2b		bcc $9395			bcc 	_LCPunctuation
.936a	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.936c	90 2d		bcc $939b			bcc 	_LCIdentifiers
.936e	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9370	90 49		bcc $93bb			bcc 	_LCTokens
.9372	4c 16 94	jmp $9416			jmp 	_LCData 					; 254-5 are data objects
.9375					_LCExit:
.9375	60		rts				rts
.9376					_LCDoubles:
.9376	48		pha				pha
.9377	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9378	29 02		and #$02			and 	#2
.937a	09 3c		ora #$3c			ora 	#60 						; make < >
.937c	20 42 94	jsr $9442			jsr 	LCLWrite
.937f	68		pla				pla 								; restore, do lower bit
.9380	29 03		and #$03			and 	#3
.9382	09 3c		ora #$3c			ora 	#60
.9384	80 0f		bra $9395			bra		_LCPunctuation 				; print, increment, loop
.9386					_LCShiftPunc:
.9386	aa		tax				tax 								; save in X
.9387	29 07		and #$07			and 	#7 							; lower 3 bits
.9389	f0 02		beq $938d			beq 	_LCNoAdd
.938b	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.938d					_LCNoAdd:
.938d	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.938f	90 02		bcc $9393			bcc 	_LCNoAdd2
.9391	09 20		ora #$20			ora 	#32 						; adds $20
.9393					_LCNoAdd2:
.9393	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9395					_LCPunctuation:
.9395	c8		iny				iny 								; consume character
.9396	20 42 94	jsr $9442			jsr 	LCLWrite 					; write it out.
.9399	80 bd		bra $9358			bra 	_LCMainLoop 				; go round again.
.939b					_LCIdentifiers:
.939b	18		clc				clc 								; convert to physical address
.939c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.939e	85 37		sta $37				sta 	zTemp0+1
.93a0	c8		iny				iny
.93a1	b1 30		lda ($30),y			lda 	(codePtr),y
.93a3	85 36		sta $36				sta 	zTemp0
.93a5	c8		iny				iny
.93a6	5a		phy				phy 								; save position
.93a7	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.93a9					_LCOutIdentifier:
.93a9	c8		iny				iny
.93aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.93ac	29 7f		and #$7f			and 	#$7F
.93ae	20 70 94	jsr $9470			jsr 	LCLLowerCase
.93b1	20 42 94	jsr $9442			jsr 	LCLWrite
.93b4	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.93b6	10 f1		bpl $93a9			bpl 	_LCOutIdentifier
.93b8	7a		ply				ply 								; restore position
.93b9	80 9d		bra $9358			bra 	_LCMainLoop
.93bb					_LCTokens:
.93bb	aa		tax				tax 								; token in X
.93bc	a9 c9		lda #$c9			lda 	#((KeywordSet2) & $FF)
.93be	85 36		sta $36				sta 	0+zTemp0
.93c0	a9 a4		lda #$a4			lda 	#((KeywordSet2) >> 8)
.93c2	85 37		sta $37				sta 	1+zTemp0
.93c4	e0 82		cpx #$82			cpx 	#$82
.93c6	f0 16		beq $93de			beq 	_LCUseShift
.93c8	a9 74		lda #$74			lda 	#((KeywordSet1) & $FF)
.93ca	85 36		sta $36				sta 	0+zTemp0
.93cc	a9 a4		lda #$a4			lda 	#((KeywordSet1) >> 8)
.93ce	85 37		sta $37				sta 	1+zTemp0
.93d0	e0 81		cpx #$81			cpx 	#$81
.93d2	f0 0a		beq $93de			beq 	_LCUseShift
.93d4	a9 ca		lda #$ca			lda 	#((KeywordSet0) & $FF)
.93d6	85 36		sta $36				sta 	0+zTemp0
.93d8	a9 a2		lda #$a2			lda 	#((KeywordSet0) >> 8)
.93da	85 37		sta $37				sta 	1+zTemp0
.93dc	80 01		bra $93df			bra 	_LCNoShift
.93de					_LCUseShift:
.93de	c8		iny				iny
.93df					_LCNoShift:
.93df	20 51 94	jsr $9451			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.93e2	b1 30		lda ($30),y			lda 	(codePtr),y
.93e4	aa		tax				tax 								; into X
.93e5					_LCFindText:
.93e5	ca		dex				dex
.93e6	10 0e		bpl $93f6			bpl 	_LCFoundText 				; found text.
.93e8	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.93ea	1a		inc a				inc 	a 							; one extra for size
.93eb	38		sec				sec 								; one extra for checksum
.93ec	65 36		adc $36				adc 	zTemp0 						; go to next token
.93ee	85 36		sta $36				sta 	zTemp0
.93f0	90 f3		bcc $93e5			bcc 	_LCFindText
.93f2	e6 37		inc $37				inc 	zTemp0+1
.93f4	80 ef		bra $93e5			bra 	_LCFindText
.93f6					_LCFoundText:
.93f6	5a		phy				phy 								; save List position
.93f7	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.93f9	aa		tax				tax
.93fa	a0 02		ldy #$02			ldy 	#2
.93fc					_LCCopyToken:
.93fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.93fe	20 70 94	jsr $9470			jsr 	LCLLowerCase
.9401	20 42 94	jsr $9442			jsr 	LCLWrite
.9404	c8		iny				iny
.9405	ca		dex				dex
.9406	d0 f4		bne $93fc			bne 	_LCCopyToken
.9408	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.940a	f0 05		beq $9411			beq 	_LCNoSpace
.940c	a9 20		lda #$20			lda 	#' '
.940e	20 42 94	jsr $9442			jsr 	LCLWrite
.9411					_LCNoSpace:
.9411	7a		ply				ply 								; restore position.
.9412	c8		iny				iny 								; consume token
.9413	4c 58 93	jmp $9358			jmp 	_LCMainLoop 				; and go around again.
.9416					_LCData:
.9416	48		pha				pha 								; save type $FE/$FF
.9417	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9419	c9 fe		cmp #$fe			cmp 	#$FE
.941b	f0 02		beq $941f			beq 	_LCHaveOpener
.941d	a2 22		ldx #$22			ldx 	#'"'
.941f					_LCHaveOpener:
.941f	8a		txa				txa 								; output prefix (# or ")
.9420	20 42 94	jsr $9442			jsr 	LCLWrite
.9423	c8		iny				iny 								; get count
.9424	b1 30		lda ($30),y			lda 	(codePtr),y
.9426	aa		tax				tax
.9427	c8		iny				iny 								; point at first character
.9428					_LCOutData:
.9428	b1 30		lda ($30),y			lda 	(codePtr),y
.942a	c9 00		cmp #$00			cmp 	#0
.942c	f0 03		beq $9431			beq 	_LCNoPrint
.942e	20 42 94	jsr $9442			jsr 	LCLWrite
.9431					_LCNoPrint:
.9431	c8		iny				iny
.9432	ca		dex				dex
.9433	d0 f3		bne $9428			bne 	_LCOutData
.9435	68		pla				pla 								; closing " required ?
.9436	c9 ff		cmp #$ff			cmp 	#$FF
.9438	d0 05		bne $943f			bne 	_LCNoQuote
.943a	a9 22		lda #$22			lda 	#'"'
.943c	20 42 94	jsr $9442			jsr 	LCLWrite
.943f					_LCNoQuote:
.943f	4c 58 93	jmp $9358			jmp 	_LCMainLoop
.9442					LCLWrite:
.9442	da		phx				phx
.9443	ae 9d 04	ldx $049d			ldx 	tbOffset
.9446	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9449	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.944c	ee 9d 04	inc $049d			inc 	tbOffset
.944f	fa		plx				plx
.9450	60		rts				rts
.9451					LCCheckSpaceRequired:
.9451	ae 9d 04	ldx $049d			ldx 	tbOffset
.9454	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9457	20 70 94	jsr $9470			jsr 	LCLLowerCase 				; saves a little effort
.945a	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.945c	90 11		bcc $946f			bcc 	_LCCSRExit
.945e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9460	90 08		bcc $946a			bcc 	_LCCSRSpace
.9462	c9 61		cmp #$61			cmp 	#"a"
.9464	90 09		bcc $946f			bcc 	_LCCSRExit
.9466	c9 7b		cmp #$7b			cmp 	#"z"+1
.9468	b0 05		bcs $946f			bcs 	_LCCSRExit
.946a					_LCCSRSpace:
.946a	a9 20		lda #$20			lda 	#' '
.946c	20 42 94	jsr $9442			jsr 	LCLWrite
.946f					_LCCSRExit:
.946f	60		rts				rts
.9470					LCLLowerCase:
.9470	c9 41		cmp #$41			cmp 	#"A"
.9472	90 06		bcc $947a			bcc 	_LCLLCOut
.9474	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9476	b0 02		bcs $947a			bcs 	_LCLLCOut
.9478	69 20		adc #$20			adc 	#$20
.947a					_LCLLCOut:
.947a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.947b					ProcedureScan:
.947b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.947d	85 30		sta $30				sta 	codePtr
.947f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9481	85 31		sta $31				sta 	codePtr+1
.9483					_PSLoop:
.9483	b2 30		lda ($30)			lda 	(codePtr)
.9485	f0 42		beq $94c9			beq 	_PSExit
.9487	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9489	b1 30		lda ($30),y			lda 	(codePtr),y
.948b	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.948d	d0 2d		bne $94bc			bne 	_PSNext
.948f	c8		iny				iny 								; get the address of the record to zTemp0 and
.9490	b1 30		lda ($30),y			lda 	(codePtr),y
.9492	29 c0		and #$c0			and 	#$C0
.9494	c9 40		cmp #$40			cmp 	#$40
.9496	d0 32		bne $94ca			bne 	_PSSyntax
.9498	b1 30		lda ($30),y			lda 	(codePtr),y
.949a	18		clc				clc
.949b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.949d	85 37		sta $37				sta 	zTemp0+1
.949f	c8		iny				iny 								; LSB
.94a0	b1 30		lda ($30),y			lda 	(codePtr),y
.94a2	85 36		sta $36				sta 	zTemp0
.94a4	c8		iny				iny 								; character after variable call.
.94a5	98		tya				tya 								; save Y offset at +7
.94a6	a0 07		ldy #$07			ldy 	#7
.94a8	91 36		sta ($36),y			sta 	(zTemp0),y
.94aa	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.94ac	a0 02		ldy #$02			ldy 	#2
.94ae	91 36		sta ($36),y			sta 	(zTemp0),y
.94b0	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.94b2					_PSCopy:
.94b2	b5 30		lda $30,x			lda 	safePtr,x
.94b4	c8		iny				iny
.94b5	91 36		sta ($36),y			sta 	(zTemp0),y
.94b7	e8		inx				inx
.94b8	e0 04		cpx #$04			cpx 	#4
.94ba	d0 f6		bne $94b2			bne 	_PSCopy
.94bc					_PSNext:
.94bc	18		clc				clc
.94bd	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94bf	65 30		adc $30				adc 	codePtr
.94c1	85 30		sta $30				sta 	codePtr
.94c3	90 02		bcc $94c7			bcc 	_CREExit
.94c5	e6 31		inc $31				inc 	codePtr+1
.94c7					_CREExit:
.94c7	80 ba		bra $9483			bra 	_PSLoop
.94c9					_PSExit:
.94c9	60		rts				rts
.94ca					_PSSyntax:
.94ca	4c 03 af	jmp $af03			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.94cd					ScanForward:
.94cd	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.94cf	86 37		stx $37				stx 	zTemp0+1
.94d1	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.94d3					_ScanLoop:
.94d3	b1 30		lda ($30),y			lda 	(codePtr),y
.94d5	c8		iny				iny
.94d6	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.94d8	d0 0e		bne $94e8			bne 	_ScanGoNext
.94da	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.94dc	f0 04		beq $94e2			beq 	_ScanMatch
.94de	c5 37		cmp $37				cmp 	zTemp0+1
.94e0	d0 06		bne $94e8			bne 	_ScanGoNext
.94e2					_ScanMatch:
.94e2	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.94e4	d0 01		bne $94e7			bne 	_ScanNotEndEOL
.94e6	88		dey				dey
.94e7					_ScanNotEndEOL:
.94e7	60		rts				rts
.94e8					_ScanGoNext:
.94e8	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.94ea	90 e7		bcc $94d3			bcc 	_ScanLoop
.94ec	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.94ee	90 18		bcc $9508			bcc 	_ScanSkipOne
.94f0	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.94f2	b0 2f		bcs $9523			bcs 	_ScanSkipData
.94f4	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.94f6	90 db		bcc $94d3			bcc 	_ScanLoop 					; if not, ordinary keywords.
.94f8	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.94fa	b0 d7		bcs $94d3			bcs 	_ScanLoop
.94fc	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.94fe	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9500	b0 d1		bcs $94d3			bcs 	_ScanLoop
.9502	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9504	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9506	80 cb		bra $94d3			bra 	_ScanLoop
.9508					_ScanSkipOne:
.9508	c8		iny				iny 								; consume the extra one.
.9509	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.950b	d0 c6		bne $94d3			bne 	_ScanLoop
.950d	18		clc				clc
.950e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9510	65 30		adc $30				adc 	codePtr
.9512	85 30		sta $30				sta 	codePtr
.9514	90 02		bcc $9518			bcc 	_CREExit
.9516	e6 31		inc $31				inc 	codePtr+1
.9518					_CREExit:
.9518	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.951a	b2 30		lda ($30)			lda 	(codePtr)
.951c	d0 b5		bne $94d3			bne 	_ScanLoop 					; if not zero, more to scan
.951e	a9 13		lda #$13		lda	#19
.9520	4c 5b 95	jmp $955b		jmp	ErrorHandler
.9523					_ScanSkipData:
.9523	88		dey				dey 								; point at data token
.9524	c8		iny				iny
.9525	98		tya				tya
.9526	38		sec				sec
.9527	71 30		adc ($30),y			adc 	(codePtr),y
.9529	a8		tay				tay
.952a	80 a7		bra $94d3			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.952c					Command_WHILE:
.952c	5a		phy				phy 								; save position of the test
.952d	a2 00		ldx #$00			ldx 	#0
.952f	20 67 a0	jsr $a067			jsr 	EvaluateNumber 				; work out the number
.9532	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; check if zero
.9535	f0 0e		beq $9545			beq 	_WHExitLoop 				; if so exit the loop
.9537	98		tya				tya 								; position *after* test.
.9538	7a		ply				ply 								; restore position before test, at WHILE
.9539	88		dey				dey
.953a	48		pha				pha 								; push after test on the stack
.953b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.953d	20 c7 a1	jsr $a1c7			jsr 	StackOpen
.9540	20 0b a2	jsr $a20b			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9543	7a		ply				ply 								; restore the position *after* the test
.9544	60		rts				rts
.9545					_WHExitLoop:
.9545	68		pla				pla 								; throw post loop position
.9546	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.9548	aa		tax				tax
.9549	20 cd 94	jsr $94cd			jsr 	ScanForward
.954c	60		rts				rts
.954d					Command_WEND:
.954d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.954f	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9551	20 f3 a1	jsr $a1f3			jsr 	StackCheckFrame
.9554	20 1c a2	jsr $a21c			jsr 	STKLoadCodePosition 		; loop back
.9557	20 e5 a1	jsr $a1e5			jsr 	StackClose		 			; erase the frame
.955a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a91d					CheckRightBracket:
.a91d	b1 30		lda ($30),y			lda 	(codePtr),y
.a91f	c8		iny				iny
.a920	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a922	d0 0f		bne $a933			bne 	CNAFail
.a924	60		rts				rts
.a925					CheckComma:
.a925	b1 30		lda ($30),y			lda 	(codePtr),y
.a927	c8		iny				iny
.a928	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a92a	d0 07		bne $a933			bne 	CNAFail
.a92c	60		rts				rts
.a92d					CheckNextA:
.a92d	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a92f	d0 02		bne $a933			bne 	CNAFail
.a931	c8		iny				iny 								; skip character
.a932	60		rts				rts 								; and exit
.a933					CNAFail:
.a933	4c 03 af	jmp $af03			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.955b					ErrorHandler:
.955b	a8		tay				tay 								; find the error text
.955c	f0 49		beq $95a7			beq 	_EHEnd
.955e	a2 00		ldx #$00			ldx 	#0
.9560	a9 1c		lda #$1c			lda 	#((ErrorText) & $FF)
.9562	85 36		sta $36				sta 	0+zTemp0
.9564	a9 af		lda #$af			lda 	#((ErrorText) >> 8)
.9566	85 37		sta $37				sta 	1+zTemp0
.9568					_EHFind:
.9568	88		dey				dey 								; found the error text ?
.9569	f0 0e		beq $9579			beq 	_EHFound
.956b					_EHFindZero:
.956b	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.956d	e6 36		inc $36				inc 	zTemp0
.956f	d0 02		bne $9573			bne 	_EHFNoCarry
.9571	e6 37		inc $37				inc 	zTemp0+1
.9573					_EHFNoCarry:
.9573	c9 00		cmp #$00			cmp 	#0
.9575	d0 f4		bne $956b			bne 	_EHFindZero
.9577	80 ef		bra $9568			bra 	_EHFind
.9579					_EHFound:
.9579	a5 36		lda $36				lda 	zTemp0 						; print message
.957b	a6 37		ldx $37				ldx 	zTemp0+1
.957d	20 b4 95	jsr $95b4			jsr 	PrintStringXA
.9580	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9582	b1 30		lda ($30),y			lda 	(codePtr),y
.9584	d0 05		bne $958b			bne 	_EHAtMsg
.9586	c8		iny				iny
.9587	b1 30		lda ($30),y			lda 	(codePtr),y
.9589	f0 17		beq $95a2			beq 	_EHCREnd
.958b					_EHAtMsg:
.958b	a2 95		ldx #$95			ldx 	#_AtMsg >> 8 				; print " at "
.958d	a9 aa		lda #$aa			lda 	#_AtMsg & $FF
.958f	20 b4 95	jsr $95b4			jsr 	PrintStringXA
.9592	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9594	b1 30		lda ($30),y			lda 	(codePtr),y
.9596	48		pha				pha
.9597	c8		iny				iny
.9598	b1 30		lda ($30),y			lda 	(codePtr),y
.959a	aa		tax				tax
.959b	68		pla				pla
.959c	20 79 aa	jsr $aa79			jsr 	ConvertInt16 				; convert XA to string
.959f	20 b4 95	jsr $95b4			jsr 	PrintStringXA 				; and print it.
.95a2					_EHCREnd:
.95a2	a9 0d		lda #$0d			lda 	#13 						; new line
.95a4	20 a8 b0	jsr $b0a8			jsr 	EXTPrintCharacter
.95a7					_EHEnd:
.95a7	4c cb 8a	jmp $8acb			jmp 	WarmStart
>95aa	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>95b2	20 00
.95b4					PrintStringXA:
.95b4	5a		phy				phy
.95b5	86 37		stx $37				stx 	zTemp0+1
.95b7	85 36		sta $36				sta 	zTemp0
.95b9	a0 00		ldy #$00			ldy 	#0
.95bb					_PSXALoop:
.95bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.95bd	f0 06		beq $95c5			beq 	_PSXAExit
.95bf	20 a8 b0	jsr $b0a8			jsr 	EXTPrintCharacter
.95c2	c8		iny				iny
.95c3	80 f6		bra $95bb			bra 	_PSXALoop
.95c5					_PSXAExit:
.95c5	7a		ply				ply
.95c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.95c7					UnaryTrue:
.95c7	fa		plx				plx
.95c8					ReturnTrue:
.95c8	a9 01		lda #$01			lda 	#1  						; set to 1
.95ca	20 15 a1	jsr $a115			jsr 	NSMSetByte
.95cd	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.95cf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95d2	60		rts				rts
.95d3					UnaryFalse:
.95d3	fa		plx				plx
.95d4					ReturnFalse:
.95d4	4c 13 a1	jmp $a113			jmp 	NSMSetZero 					; set it all to zero
.95d7					BinaryCompareEqual:
.95d7	fa		plx				plx
.95d8	20 13 96	jsr $9613			jsr 	CompareBaseCode
.95db	c9 00		cmp #$00			cmp 	#0
.95dd	f0 e9		beq $95c8			beq 	ReturnTrue
.95df	80 f3		bra $95d4			bra 	ReturnFalse
.95e1					BinaryCompareLess:
.95e1	fa		plx				plx
.95e2	20 13 96	jsr $9613			jsr 	CompareBaseCode
.95e5	c9 ff		cmp #$ff			cmp 	#$FF
.95e7	f0 df		beq $95c8			beq 	ReturnTrue
.95e9	80 e9		bra $95d4			bra 	ReturnFalse
.95eb					BinaryCompareGreater:
.95eb	fa		plx				plx
.95ec	20 13 96	jsr $9613			jsr 	CompareBaseCode
.95ef	c9 01		cmp #$01			cmp 	#1
.95f1	f0 d5		beq $95c8			beq 	ReturnTrue
.95f3	80 df		bra $95d4			bra 	ReturnFalse
.95f5					BinaryCompareNotEqual:
.95f5	fa		plx				plx
.95f6	20 13 96	jsr $9613			jsr 	CompareBaseCode
.95f9	c9 00		cmp #$00			cmp 	#0
.95fb	d0 cb		bne $95c8			bne 	ReturnTrue
.95fd	80 d5		bra $95d4			bra 	ReturnFalse
.95ff					BinaryCompareLessEqual:
.95ff	fa		plx				plx
.9600	20 13 96	jsr $9613			jsr 	CompareBaseCode
.9603	c9 01		cmp #$01			cmp 	#1
.9605	d0 c1		bne $95c8			bne 	ReturnTrue
.9607	80 cb		bra $95d4			bra 	ReturnFalse
.9609					BinaryCompareGreaterEqual:
.9609	fa		plx				plx
.960a	20 13 96	jsr $9613			jsr 	CompareBaseCode
.960d	c9 ff		cmp #$ff			cmp 	#$FF
.960f	d0 b7		bne $95c8			bne 	ReturnTrue
.9611	80 c1		bra $95d4			bra 	ReturnFalse
.9613					CompareBaseCode:
.9613	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; make both values if references.
.9616	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9619	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.961c	29 10		and #$10			and 	#NSTString
.961e	d0 40		bne $9660			bne 	_CBCString
.9620	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9623	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9626	d0 3b		bne $9663			bne 	_CBCFloat
.9628	bd 00 04	lda $0400,x			lda 	NSStatus,x
.962b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.962e	29 08		and #$08			and 	#NSTFloat
.9630	d0 31		bne $9663			bne 	_CBCFloat
.9632	20 66 96	jsr $9666			jsr 	CompareFixMinusZero
.9635	e8		inx				inx
.9636	20 66 96	jsr $9666			jsr 	CompareFixMinusZero
.9639	ca		dex				dex
.963a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.963d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9640	10 0b		bpl $964d			bpl 	_CDCSameSign
.9642	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9645	30 16		bmi $965d			bmi 	_CBCLess 					; return $FF
.9647					_CBCGreater:
.9647	a9 01		lda #$01			lda 	#1
.9649	60		rts				rts
.964a					_CBCEqual:
.964a	a9 00		lda #$00			lda 	#0
.964c	60		rts				rts
.964d					_CDCSameSign:
.964d	20 76 97	jsr $9776			jsr 	SubTopTwoStack 				; unsigned subtract
.9650	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; or the mantissa together
.9653	f0 f5		beq $964a			beq 	_CBCEqual 					; -0 == 0
.9655	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9658	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.965b	10 ea		bpl $9647			bpl 	_CBCGreater
.965d					_CBCLess:
.965d	a9 ff		lda #$ff			lda 	#$FF
.965f	60		rts				rts
.9660					_CBCString:
.9660	4c cc 96	jmp $96cc			jmp 	CompareStrings
.9663					_CBCFloat:
.9663	4c 75 ab	jmp $ab75			jmp 	CompareFloat
.9666					CompareFixMinusZero:
.9666	20 43 a1	jsr $a143			jsr 	NSMIsZero
.9669	d0 03		bne $966e			bne 	_CFXMZNotZero
.966b	9e 00 04	stz $0400,x			stz 	NSStatus,x
.966e					_CFXMZNotZero:
.966e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.966f					StringConcat:
.966f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9672	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9675	29 18		and #$18			and 	#NSBTypeMask
.9677	c9 10		cmp #$10			cmp 	#NSTString
.9679	d0 4e		bne $96c9			bne		_SCType
.967b	64 38		stz $38				stz 	zTemp1 						; counting total length
.967d	e8		inx				inx
.967e	20 9c 96	jsr $969c			jsr 	_SCSetupZ0 					; setup for second
.9681	20 a7 96	jsr $96a7			jsr 	_SCLengthZ0 				; length for second
.9684	ca		dex				dex
.9685	20 9c 96	jsr $969c			jsr 	_SCSetupZ0 					; setup for first
.9688	20 a7 96	jsr $96a7			jsr 	_SCLengthZ0 				; length for first
.968b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.968d	20 2a b2	jsr $b22a			jsr 	StringTempAllocate
.9690	20 ba 96	jsr $96ba			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9693	e8		inx				inx
.9694	20 9c 96	jsr $969c			jsr 	_SCSetupZ0 					; copy second out
.9697	20 ba 96	jsr $96ba			jsr 	_SCCopy
.969a	ca		dex				dex
.969b	60		rts				rts
.969c					_SCSetupZ0:
.969c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.969f	85 36		sta $36				sta 	zTemp0
.96a1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96a4	85 37		sta $37				sta 	zTemp0+1
.96a6	60		rts				rts
.96a7					_SCLengthZ0:
.96a7	5a		phy				phy
.96a8	a0 00		ldy #$00			ldy 	#0
.96aa					_SCLenLoop:
.96aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.96ac	f0 0a		beq $96b8			beq 	_SCLExit
.96ae	c8		iny				iny
.96af	e6 38		inc $38				inc 	zTemp1
.96b1	10 f7		bpl $96aa			bpl		_SCLenLoop
.96b3	a9 09		lda #$09		lda	#9
.96b5	4c 5b 95	jmp $955b		jmp	ErrorHandler
.96b8					_SCLExit:
.96b8	7a		ply				ply
.96b9	60		rts				rts
.96ba					_SCCopy:
.96ba	5a		phy				phy
.96bb	a0 00		ldy #$00			ldy 	#0
.96bd					_SCCopyLoop:
.96bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.96bf	f0 06		beq $96c7			beq 	_SCCExit
.96c1	20 68 b2	jsr $b268			jsr 	StringTempWrite
.96c4	c8		iny				iny
.96c5	80 f6		bra $96bd			bra 	_SCCopyLoop
.96c7					_SCCExit:
.96c7	7a		ply				ply
.96c8	60		rts				rts
.96c9					_SCType:
.96c9	4c 0d af	jmp $af0d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a936					IntegerDivide:
.a936	fa		plx				plx
.a937	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a93a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a93d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a93e	0a		asl a				asl 	a
.a93f	10 05		bpl $a946			bpl 	_NotRef
.a941	48		pha				pha
.a942	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a945	68		pla				pla
.a946					_NotRef:
.a946	0a		asl a				asl 	a
.a947	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a949	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a94c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a94f	f0 03		beq $a954			beq 	_IntegerCode 				; if clear, then we have two integers
.a951	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.a954					_IntegerCode:
.a954	20 76 a9	jsr $a976			jsr 	CheckDivideZero 			; do div zero check
.a957	20 ae a9	jsr $a9ae			jsr 	Int32Divide 				; do the division
.a95a	20 6b aa	jsr $aa6b			jsr 	CalculateSign 				; calculate result sign
.a95d					NSMCopyPlusTwoToZero:
.a95d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a960	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a963	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a966	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a969	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a96c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a96f	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a972	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a975	60		rts				rts
.a976					CheckDivideZero:
.a976	e8		inx				inx
.a977	20 43 a1	jsr $a143			jsr 	NSMIsZero
.a97a	f0 02		beq $a97e			beq 	_CDVError
.a97c	ca		dex				dex
.a97d	60		rts				rts
.a97e					_CDVError:
.a97e	a9 03		lda #$03		lda	#3
.a980	4c 5b 95	jmp $955b		jmp	ErrorHandler
.a983					IntegerModulus:
.a983	fa		plx				plx
.a984	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a987	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a98a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a98b	0a		asl a				asl 	a
.a98c	10 05		bpl $a993			bpl 	_NotRef
.a98e	48		pha				pha
.a98f	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a992	68		pla				pla
.a993					_NotRef:
.a993	0a		asl a				asl 	a
.a994	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a996	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a999	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a99c	f0 03		beq $a9a1			beq 	_IntegerCode 				; if clear, then we have two integers
.a99e	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.a9a1					_IntegerCode:
.a9a1					IntegerModulusNoCheck:
.a9a1	20 76 a9	jsr $a976			jsr 	CheckDivideZero 			; do div zero check
.a9a4	20 ae a9	jsr $a9ae			jsr 	Int32Divide 				; do the division
.a9a7	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a9aa	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a9ad	60		rts				rts
.a9ae					Int32Divide:
.a9ae	48		pha				pha 								; save AXY
.a9af	5a		phy				phy
.a9b0	20 ea a0	jsr $a0ea			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a9b3	20 0f a1	jsr $a10f			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a9b6	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a9b8					_I32DivideLoop:
.a9b8	e8		inx				inx
.a9b9	e8		inx				inx
.a9ba	20 28 a1	jsr $a128			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a9bd	ca		dex				dex
.a9be	ca		dex				dex
.a9bf	20 29 a1	jsr $a129			jsr 	NSMRotateLeft
.a9c2	20 ee a9	jsr $a9ee			jsr 	DivideCheckSubtract 		; check if subtract possible
.a9c5	90 03		bcc $a9ca			bcc 	_I32DivideNoCarryIn
.a9c7	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a9ca					_I32DivideNoCarryIn:
.a9ca	88		dey				dey 								; loop round till division completed.
.a9cb	d0 eb		bne $a9b8			bne 	_I32DivideLoop
.a9cd	7a		ply				ply 								; restore AXY and exit
.a9ce	68		pla				pla
.a9cf	60		rts				rts
.a9d0					Int32ShiftDivide:
.a9d0	48		pha				pha 								; save AY
.a9d1	5a		phy				phy
.a9d2	e8		inx				inx 								; clear S[X+2]
.a9d3	e8		inx				inx
.a9d4	20 13 a1	jsr $a113			jsr 	NSMSetZero
.a9d7	ca		dex				dex
.a9d8	ca		dex				dex
.a9d9	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a9db					_I32SDLoop:
.a9db	20 ee a9	jsr $a9ee			jsr 	DivideCheckSubtract 		; check if subtract possible
.a9de	e8		inx				inx
.a9df	e8		inx				inx
.a9e0	20 29 a1	jsr $a129			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a9e3	ca		dex				dex
.a9e4	ca		dex				dex
.a9e5	20 29 a1	jsr $a129			jsr 	NSMRotateLeft
.a9e8	88		dey				dey 	 							; do 31 times
.a9e9	d0 f0		bne $a9db			bne 	_I32SDLoop
.a9eb	7a		ply				ply 								; restore AY and exit
.a9ec	68		pla				pla
.a9ed	60		rts				rts
.a9ee					DivideCheckSubtract:
.a9ee	20 76 97	jsr $9776			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a9f1	b0 04		bcs $a9f7			bcs 	_DCSExit 					; if carry set, then could do, exit
.a9f3	20 50 97	jsr $9750			jsr 	AddTopTwoStack 				; add it back in
.a9f6	18		clc				clc 								; and return False
.a9f7					_DCSExit:
.a9f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a9f8					MulInteger:
.a9f8	fa		plx				plx
.a9f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a9fc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a9ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa00	0a		asl a				asl 	a
.aa01	10 05		bpl $aa08			bpl 	_NotRef
.aa03	48		pha				pha
.aa04	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aa07	68		pla				pla
.aa08					_NotRef:
.aa08	0a		asl a				asl 	a 							; put MSB of type into A:7
.aa09	30 0b		bmi $aa16			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.aa0b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aa0e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aa11	f0 06		beq $aa19			beq 	_IntegerCode 				; if clear, then we have two integers
.aa13	4c 4c ac	jmp $ac4c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.aa16					_StringData:
.aa16	4c 17 af	jmp $af17			jmp 	NotDoneError							; at least one string - don't know both are strings.
.aa19					_IntegerCode:
.aa19	20 26 aa	jsr $aa26			jsr 	MultiplyShort
.aa1c	c9 00		cmp #$00			cmp 	#0
.aa1e	f0 05		beq $aa25			beq 	_MIExit
.aa20	a9 04		lda #$04		lda	#4
.aa22	4c 5b 95	jmp $955b		jmp	ErrorHandler
.aa25					_MIExit:
.aa25	60		rts				rts
.aa26					MultiplyShort:
.aa26	5a		phy				phy 								; save Y
.aa27	20 ea a0	jsr $a0ea			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aa2a	20 0f a1	jsr $a10f			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.aa2d	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.aa2f					_I32MLoop:
.aa2f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.aa32	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.aa35	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.aa38	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.aa3b	f0 28		beq $aa65			beq 	_I32MExit 					; exit if zero
.aa3d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.aa40	29 01		and #$01			and 	#1
.aa42	f0 0e		beq $aa52			beq 	_I32MNoAdd
.aa44	20 50 97	jsr $9750			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.aa47	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.aa4a	10 06		bpl $aa52			bpl 	_I32MNoAdd
.aa4c					_I32ShiftRight:
.aa4c	20 36 a1	jsr $a136			jsr 	NSMShiftRight 				; shift S[X] right
.aa4f	c8		iny				iny 								; increment shift count
.aa50	80 0a		bra $aa5c			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.aa52					_I32MNoAdd:
.aa52	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.aa55	70 f5		bvs $aa4c			bvs 	_I32ShiftRight 				; instead.
.aa57	e8		inx				inx
.aa58	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.aa5b	ca		dex				dex
.aa5c					_I32MShiftUpper:
.aa5c	e8		inx				inx 								; shift S[X+2] right
.aa5d	e8		inx				inx
.aa5e	20 36 a1	jsr $a136			jsr 	NSMShiftRight
.aa61	ca		dex				dex
.aa62	ca		dex				dex
.aa63	80 ca		bra $aa2f			bra 	_I32MLoop 					; try again.
.aa65					_I32MExit:
.aa65	20 6b aa	jsr $aa6b			jsr 	CalculateSign
.aa68	98		tya				tya 								; shift in A
.aa69	7a		ply				ply 								; restore Y and exit
.aa6a	60		rts				rts
.aa6b					CalculateSign:
.aa6b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.aa6e	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.aa71	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aa74	0a		asl a				asl 	a 							; shift bit 7 into carry
.aa75	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.aa78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.96cc					CompareStrings:
.96cc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.96cf	3d 01 04	and $0401,x			and 	NSStatus+1,x
.96d2	29 10		and #$10			and 	#NSBIsString
.96d4	f0 2c		beq $9702			beq 	_CSTypeError
.96d6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.96d9	85 36		sta $36				sta 	zTemp0
.96db	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96de	85 37		sta $37				sta 	zTemp0+1
.96e0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.96e3	85 38		sta $38				sta 	zTemp1
.96e5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.96e8	85 39		sta $39				sta 	zTemp1+1
.96ea	5a		phy				phy 								; save Y so we can access strings
.96eb	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.96ed					_CSLoop:
.96ed	c8		iny				iny
.96ee	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.96f0	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.96f2	d0 06		bne $96fa			bne 	_CSDifferent
.96f4	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.96f6	d0 f5		bne $96ed			bne 	_CSLoop 					; still comparing
.96f8					_CSExit:
.96f8	7a		ply				ply 								; reached end, return zero in A from EOS
.96f9	60		rts				rts
.96fa					_CSDifferent:
.96fa	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.96fc	90 fa		bcc $96f8			bcc		_CSExit
.96fe	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9700	80 f6		bra $96f8			bra 	_CSExit
.9702					_CSTypeError:
.9702	4c 0d af	jmp $af0d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9705					ShiftLeft:
.9705	38		sec				sec
.9706	80 01		bra $9709			bra 	ShiftMain
.9708					ShiftRight:
.9708	18		clc				clc
.9709					ShiftMain:
.9709	fa		plx				plx 								; restore X
.970a	08		php				php 								; save direction
.970b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.970e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9711	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9712	0a		asl a				asl 	a
.9713	10 05		bpl $971a			bpl 	_NotRef
.9715	48		pha				pha
.9716	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9719	68		pla				pla
.971a					_NotRef:
.971a	0a		asl a				asl 	a
.971b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.971d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9720	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9723	f0 03		beq $9728			beq 	_IntegerCode 				; if clear, then we have two integers
.9725	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.9728					_IntegerCode:
.9728	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.972b	29 e0		and #$e0			and 	#$E0
.972d	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9730	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9733	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9736	d0 13		bne $974b			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9738					_SMLoop:
.9738	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.973b	30 11		bmi $974e			bmi 	_SMExit 					; exit if done.
.973d	28		plp				plp 								; restore direcition setting
.973e	08		php				php
.973f	90 05		bcc $9746			bcc 	_SMRight
.9741	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; shift left if CS
.9744	80 f2		bra $9738			bra 	_SMLoop
.9746					_SMRight:
.9746	20 36 a1	jsr $a136			jsr 	NSMShiftRight 				; shift right if CC
.9749	80 ed		bra $9738			bra 	_SMLoop
.974b					_SMExit0:
.974b	20 13 a1	jsr $a113			jsr 	NSMSetZero 					; return zero.
.974e					_SMExit:
.974e	28		plp				plp 								; throw direction
.974f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9750					AddTopTwoStack:
.9750	18		clc				clc
.9751	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9754	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9757	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.975a	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.975d	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9760	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9763	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9766	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9769	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.976c	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.976f	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9772	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9775	60		rts				rts
.9776					SubTopTwoStack:
.9776	38		sec				sec
.9777	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.977a	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.977d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9780	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9783	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9786	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9789	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.978c	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.978f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9792	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9795	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9798	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.979b	60		rts				rts
.979c					AddInteger:
.979c	fa		plx				plx
.979d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97a0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97a3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97a4	0a		asl a				asl 	a
.97a5	10 05		bpl $97ac			bpl 	_NotRef
.97a7	48		pha				pha
.97a8	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97ab	68		pla				pla
.97ac					_NotRef:
.97ac	0a		asl a				asl 	a 							; put MSB of type into A:7
.97ad	30 0b		bmi $97ba			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97af	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97b2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97b5	f0 06		beq $97bd			beq 	_IntegerCode 				; if clear, then we have two integers
.97b7	4c d4 aa	jmp $aad4			jmp 	FloatingPointAdd 							; otherwise at least one float.
.97ba					_StringData:
.97ba	4c 6f 96	jmp $966f			jmp 	StringConcat							; at least one string - don't know both are strings.
.97bd					_IntegerCode:
.97bd					AddCode:
.97bd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.97c0	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.97c3	10 8b		bpl $9750			bpl 	AddTopTwoStack
.97c5	20 76 97	jsr $9776			jsr 	SubTopTwoStack 				; do a physical subtraction
.97c8	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.97cb	10 09		bpl $97d6			bpl 	_AddExit
.97cd	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.97d0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97d3	20 c8 a0	jsr $a0c8			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.97d6					_AddExit:
.97d6	60		rts				rts
.97d7					SubInteger:
.97d7	fa		plx				plx
.97d8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97db	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97de	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97df	0a		asl a				asl 	a
.97e0	10 05		bpl $97e7			bpl 	_NotRef
.97e2	48		pha				pha
.97e3	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e6	68		pla				pla
.97e7					_NotRef:
.97e7	0a		asl a				asl 	a 							; put MSB of type into A:7
.97e8	30 0b		bmi $97f5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97ea	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ed	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97f0	f0 06		beq $97f8			beq 	_IntegerCode 				; if clear, then we have two integers
.97f2	4c d9 aa	jmp $aad9			jmp 	FloatingPointSub 							; otherwise at least one float.
.97f5					_StringData:
.97f5	4c 17 af	jmp $af17			jmp 	NotDoneError							; at least one string - don't know both are strings.
.97f8					_IntegerCode:
.97f8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.97fb	49 80		eor #$80			eor 	#$80
.97fd	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9800	80 bb		bra $97bd			bra 	AddCode 					; and do the same code as add.
.9802					AndInteger:
.9802	fa		plx				plx
.9803	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9806	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9809	0a		asl a				asl 	a 							; shift reference bit into sign bit
.980a	0a		asl a				asl 	a
.980b	10 05		bpl $9812			bpl 	_NotRef
.980d	48		pha				pha
.980e	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9811	68		pla				pla
.9812					_NotRef:
.9812	0a		asl a				asl 	a
.9813	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9815	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9818	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.981b	f0 03		beq $9820			beq 	_IntegerCode 				; if clear, then we have two integers
.981d	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.9820					_IntegerCode:
.9820	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9823	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9826	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9829	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.982c	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.982f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9832	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9835	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9838	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.983b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.983e	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9841	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9844	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9847	60		rts				rts
.9848					OraInteger:
.9848	fa		plx				plx
.9849	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.984c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.984f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9850	0a		asl a				asl 	a
.9851	10 05		bpl $9858			bpl 	_NotRef
.9853	48		pha				pha
.9854	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9857	68		pla				pla
.9858					_NotRef:
.9858	0a		asl a				asl 	a
.9859	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.985b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.985e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9861	f0 03		beq $9866			beq 	_IntegerCode 				; if clear, then we have two integers
.9863	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.9866					_IntegerCode:
.9866	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9869	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.986c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.986f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9872	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9875	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9878	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.987b	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.987e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9881	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9884	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9887	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.988a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.988d	60		rts				rts
.988e					EorInteger:
.988e	fa		plx				plx
.988f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9892	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9895	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9896	0a		asl a				asl 	a
.9897	10 05		bpl $989e			bpl 	_NotRef
.9899	48		pha				pha
.989a	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.989d	68		pla				pla
.989e					_NotRef:
.989e	0a		asl a				asl 	a
.989f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98a1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98a4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98a7	f0 03		beq $98ac			beq 	_IntegerCode 				; if clear, then we have two integers
.98a9	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.98ac					_IntegerCode:
.98ac	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.98af	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.98b2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98b5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.98b8	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.98bb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98be	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.98c1	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.98c4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98c7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.98ca	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.98cd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.98d0	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.98d3	60		rts				rts
.98d4					WordIndirect:
.98d4	fa		plx				plx
.98d5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98d8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98db	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98dc	0a		asl a				asl 	a
.98dd	10 05		bpl $98e4			bpl 	_NotRef
.98df	48		pha				pha
.98e0	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98e3	68		pla				pla
.98e4					_NotRef:
.98e4	0a		asl a				asl 	a
.98e5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98e7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98ea	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98ed	f0 03		beq $98f2			beq 	_IntegerCode 				; if clear, then we have two integers
.98ef	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.98f2					_IntegerCode:
.98f2	20 bd 97	jsr $97bd			jsr 	AddCode 					; add the two values
.98f5	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.98f7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98fa	60		rts				rts
.98fb					ByteIndirect:
.98fb	fa		plx				plx
.98fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98ff	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9902	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9903	0a		asl a				asl 	a
.9904	10 05		bpl $990b			bpl 	_NotRef
.9906	48		pha				pha
.9907	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.990a	68		pla				pla
.990b					_NotRef:
.990b	0a		asl a				asl 	a
.990c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.990e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9911	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9914	f0 03		beq $9919			beq 	_IntegerCode 				; if clear, then we have two integers
.9916	4c 0d af	jmp $af0d			jmp 	TypeError 					; anything else, type mismatch.
.9919					_IntegerCode:
.9919	20 bd 97	jsr $97bd			jsr 	AddCode 					; add the two values
.991c	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.991e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9921	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.aa79					ConvertInt16:
.aa79	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.aa7c	8e 10 04	stx $0410			stx 	NSMantissa1
.aa7f	9c 18 04	stz $0418			stz 	NSMantissa2
.aa82	9c 20 04	stz $0420			stz 	NSMantissa3
.aa85	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.aa88	a2 00		ldx #$00			ldx 	#0 							; stack level
.aa8a	a9 0a		lda #$0a			lda 	#10 						; base
.aa8c	80 00		bra $aa8e			bra 	ConvertInt32
.aa8e					ConvertInt32:
.aa8e	5a		phy				phy
.aa8f	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.aa91	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aa94	10 08		bpl $aa9e			bpl 	_CI32NotNeg
.aa96	48		pha				pha
.aa97	a9 2d		lda #$2d			lda 	#'-'
.aa99	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aa9c	c8		iny				iny
.aa9d	68		pla				pla
.aa9e					_CI32NotNeg:
.aa9e	20 ac aa	jsr $aaac			jsr 	_CI32DivideConvert 			; recursive conversion
.aaa1	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.aaa3	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aaa6	7a		ply				ply
.aaa7	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.aaa9	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.aaab	60		rts				rts
.aaac					_CI32DivideConvert:
.aaac	e8		inx				inx 								; write to next slot up
.aaad	20 15 a1	jsr $a115			jsr 	NSMSetByte
.aab0	ca		dex				dex
.aab1	20 ae a9	jsr $a9ae			jsr 	Int32Divide 				; divide
.aab4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.aab7	48		pha				pha
.aab8	20 5d a9	jsr $a95d			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.aabb	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; is it zero ?
.aabe	f0 06		beq $aac6			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.aac0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.aac3	20 ac aa	jsr $aaac			jsr 	_CI32DivideConvert 			; and recusrively call.
.aac6					_CI32NoRecurse:
.aac6	68		pla				pla 								; remainder
.aac7	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.aac9	90 02		bcc $aacd			bcc 	_CI32NotHex
.aacb	69 26		adc #$26			adc 	#6+32
.aacd					_CI32NotHex:
.aacd	69 30		adc #$30			adc 	#48
.aacf	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.aad2	c8		iny				iny
.aad3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9922					PrecedenceLevel:
>9922	04					.byte	 4	; $00 <<
>9923	02					.byte	 2	; $01 <=
>9924	02					.byte	 2	; $02 <>
>9925	00					.byte	 0	; $03 !!3
>9926	00					.byte	 0	; $04 ><
>9927	02					.byte	 2	; $05 >=
>9928	04					.byte	 4	; $06 >>
>9929	00					.byte	 0	; $07 !!7
>992a	00					.byte	 0	; $08 !!8
>992b	00					.byte	 0	; $09 !!9
>992c	00					.byte	 0	; $0a !!10
>992d	00					.byte	 0	; $0b !!11
>992e	00					.byte	 0	; $0c !!12
>992f	00					.byte	 0	; $0d !!13
>9930	00					.byte	 0	; $0e !!14
>9931	00					.byte	 0	; $0f !!15
>9932	00					.byte	 0	; $10 @
>9933	00					.byte	 0	; $11 !!17
>9934	00					.byte	 0	; $12 !!18
>9935	00					.byte	 0	; $13 [
>9936	04					.byte	 4	; $14 \
>9937	00					.byte	 0	; $15 ]
>9938	01					.byte	 1	; $16 ^
>9939	00					.byte	 0	; $17 _
>993a	00					.byte	 0	; $18 `
>993b	00					.byte	 0	; $19 !!25
>993c	00					.byte	 0	; $1a !!26
>993d	00					.byte	 0	; $1b {
>993e	01					.byte	 1	; $1c |
>993f	00					.byte	 0	; $1d }
>9940	00					.byte	 0	; $1e ~
>9941	00					.byte	 0	; $1f [7m<7F>[m
>9942	00					.byte	 0	; $20
>9943	05					.byte	 5	; $21 !
>9944	00					.byte	 0	; $22 "
>9945	00					.byte	 0	; $23 #
>9946	05					.byte	 5	; $24 $
>9947	04					.byte	 4	; $25 %
>9948	01					.byte	 1	; $26 &
>9949	00					.byte	 0	; $27 '
>994a	00					.byte	 0	; $28 (
>994b	00					.byte	 0	; $29 )
>994c	04					.byte	 4	; $2a *
>994d	03					.byte	 3	; $2b +
>994e	00					.byte	 0	; $2c ,
>994f	03					.byte	 3	; $2d -
>9950	00					.byte	 0	; $2e .
>9951	04					.byte	 4	; $2f /
>9952	00					.byte	 0	; $30 0
>9953	00					.byte	 0	; $31 1
>9954	00					.byte	 0	; $32 2
>9955	00					.byte	 0	; $33 3
>9956	00					.byte	 0	; $34 4
>9957	00					.byte	 0	; $35 5
>9958	00					.byte	 0	; $36 6
>9959	00					.byte	 0	; $37 7
>995a	00					.byte	 0	; $38 8
>995b	00					.byte	 0	; $39 9
>995c	00					.byte	 0	; $3a :
>995d	00					.byte	 0	; $3b ;
>995e	02					.byte	 2	; $3c <
>995f	02					.byte	 2	; $3d =
>9960	02					.byte	 2	; $3e >
>9961	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9962					EvaluateExpressionAt0:
.9962	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9964					EvaluateExpression:
.9964	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9966					EvaluateExpressionAtPrecedence:
.9966	48		pha				pha 								; save precedence level
.9967	20 35 9c	jsr $9c35			jsr 	EvaluateTerm 				; evaluate term into level X.
.996a	68		pla				pla 								; restore precedence level.
.996b					_EXPRLoop:
.996b	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.996d	b1 30		lda ($30),y			lda 	(codePtr),y
.996f	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9971	b0 25		bcs $9998			bcs 	_EXPRExit
.9973	da		phx				phx 								; read the operator precedence
.9974	aa		tax				tax
.9975	bd 22 99	lda $9922,x			lda 	PrecedenceLevel,x
.9978	fa		plx				plx
.9979	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.997b	f0 1b		beq $9998			beq 	_EXPRExit
.997d	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.997f	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9981	c5 37		cmp $37				cmp 	zTemp0+1
.9983	b0 13		bcs $9998			bcs		_EXPRExit 					; if current >= operator exit
.9985	48		pha				pha 								; save current precedence.
.9986	b1 30		lda ($30),y			lda 	(codePtr),y
.9988	c8		iny				iny
.9989	48		pha				pha
.998a	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.998c	e8		inx				inx 								; work out the right hand side.
.998d	20 66 99	jsr $9966			jsr 	EvaluateExpressionAtPrecedence
.9990	ca		dex				dex
.9991	68		pla				pla 								; get operator, call the code.
.9992	20 9b 99	jsr $999b			jsr 	_EXPRCaller
.9995	68		pla				pla 								; restore precedence level
.9996	80 d3		bra $996b			bra 	_EXPRLoop 					; and go round.
.9998					_EXPRExit:
.9998	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.999a	60		rts				rts
.999b					_EXPRCaller:
.999b	da		phx				phx 								; save on stack, first thing is to restore it
.999c	0a		asl a				asl 	a 							; double so can use vectors into X
.999d	aa		tax				tax
.999e	7c 7a 91	jmp ($917a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.aad4					FloatingPointAdd:
.aad4	20 75 ac	jsr $ac75			jsr 	FloatPrepare 				; prepare for floats
.aad7	80 0b		bra $aae4			bra 	FloatAdd
.aad9					FloatingPointSub:
.aad9	20 75 ac	jsr $ac75			jsr 	FloatPrepare 				; prepare for floats
.aadc					FloatSubtract:
.aadc	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.aadf	49 80		eor #$80			eor 	#$80
.aae1	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aae4					FloatAdd:
.aae4	48		pha				pha
.aae5	5a		phy				phy
.aae6	20 86 ac	jsr $ac86			jsr 	NSNormalise 				; normalise S[X]
.aae9	f0 54		beq $ab3f			beq 	_FAReturn1
.aaeb	e8		inx				inx 								; normalise S[X+1]
.aaec	20 86 ac	jsr $ac86			jsr 	NSNormalise
.aaef	ca		dex				dex
.aaf0	c9 00		cmp #$00			cmp 	#0
.aaf2	f0 6f		beq $ab63			beq 	_FAExit 					; if so, just return A
.aaf4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aaf7	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aafa	f0 1b		beq $ab17			beq 	_FAExponentsEqual
.aafc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.aaff	a8		tay				tay
.ab00	38		sec				sec 								; do a signed comparison of the exponents.
.ab01	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ab04	50 02		bvc $ab08			bvc 	_FANoSignedChange
.ab06	49 80		eor #$80			eor 	#$80
.ab08					_FANoSignedChange:
.ab08	29 80		and #$80			and 	#$80
.ab0a	10 03		bpl $ab0f			bpl 	_FAHaveMax
.ab0c	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.ab0f					_FAHaveMax:
.ab0f	20 66 ab	jsr $ab66			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.ab12	e8		inx				inx
.ab13	20 66 ab	jsr $ab66			jsr 	_FAShiftToExponent
.ab16	ca		dex				dex
.ab17					_FAExponentsEqual:
.ab17	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.ab1a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ab1d	30 10		bmi $ab2f			bmi 	_FADifferentSigns
.ab1f	20 50 97	jsr $9750			jsr 	AddTopTwoStack 				; do the add of the mantissae
.ab22	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.ab25	10 3c		bpl $ab63			bpl 	_FAExit 					; if no, we are done.
.ab27	20 36 a1	jsr $a136			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.ab2a	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.ab2d	80 34		bra $ab63			bra 	_FAExit
.ab2f					_FADifferentSigns:
.ab2f	20 76 97	jsr $9776			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.ab32	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.ab35	10 2c		bpl $ab63			bpl 	_FAExit 					; if no, we are done.
.ab37	20 bf a0	jsr $a0bf			jsr 	NSMNegate 					; netate result
.ab3a	20 c8 a0	jsr $a0c8			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.ab3d	80 24		bra $ab63			bra 	_FAExit
.ab3f					_FAReturn1:
.ab3f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.ab42	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ab45	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.ab48	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab4b	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.ab4e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab51	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.ab54	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab57	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.ab5a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ab5d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.ab60	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab63					_FAExit:
.ab63	7a		ply				ply
.ab64	68		pla				pla
.ab65	60		rts				rts
.ab66					_FAShiftToExponent:
.ab66					_FAShiftToExponent2:
.ab66	98		tya				tya 								; compare Y to exponent
.ab67	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.ab6a	f0 08		beq $ab74			beq 	_FASEExit 					; exit if so.
.ab6c	20 36 a1	jsr $a136			jsr 	NSMShiftRight	 			; shift the mantissa right
.ab6f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.ab72	80 f2		bra $ab66			bra 	_FAShiftToExponent2
.ab74					_FASEExit:
.ab74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.ab75					CompareFloat:
.ab75	20 dc aa	jsr $aadc			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.ab78	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.ab7b	29 f8		and #$f8			and 	#$F8
.ab7d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.ab80	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.ab83	f0 09		beq $ab8e			beq 	_FCExit 					; zero, so approximately identical
.ab85	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.ab87	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ab8a	10 02		bpl $ab8e			bpl 	_FCExit
.ab8c					_FCNegative:
.ab8c	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ab8e					_FCExit:
.ab8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ab8f					FDivideCommand:
.ab8f	fa		plx				plx	 								; restore stack position
.ab90	20 75 ac	jsr $ac75			jsr 	FloatPrepare 				; prepare for floats
.ab93					FloatDivide:
.ab93	48		pha				pha
.ab94	e8		inx				inx
.ab95	20 86 ac	jsr $ac86			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ab98	ca		dex				dex
.ab99	c9 00		cmp #$00			cmp 	#0
.ab9b	f0 20		beq $abbd			beq 	_FDZero
.ab9d	20 86 ac	jsr $ac86			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aba0	f0 19		beq $abbb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aba2	20 d0 a9	jsr $a9d0			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.aba5	20 5d a9	jsr $a95d			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.aba8	20 86 ac	jsr $ac86			jsr		NSNormalise 				; renormalise
.abab	20 6b aa	jsr $aa6b			jsr 	CalculateSign 				; calculate result sign
.abae	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.abb1	38		sec				sec
.abb2	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.abb5	38		sec				sec
.abb6	e9 1e		sbc #$1e			sbc 	#30
.abb8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.abbb					_FDExit:
.abbb	68		pla				pla
.abbc	60		rts				rts
.abbd					_FDZero:
.abbd	a9 03		lda #$03		lda	#3
.abbf	4c 5b 95	jmp $955b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.abc2					FloatFractionalPart:
.abc2	5a		phy				phy
.abc3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.abc6	29 7f		and #$7f			and 	#$7F
.abc8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abcb	20 86 ac	jsr $ac86			jsr 	NSNormalise
.abce	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.abd1	38		sec				sec
.abd2	e9 e0		sbc #$e0			sbc 	#$E0
.abd4	90 31		bcc $ac07			bcc 	_FFPExit 					; already fractional
.abd6	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.abd8	b0 2a		bcs $ac04			bcs 	_FFPZero
.abda	a8		tay				tay 								; put count to do in Y
.abdb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.abde	20 09 ac	jsr $ac09			jsr 	_FFPPartial
.abe1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.abe4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.abe7	20 09 ac	jsr $ac09			jsr 	_FFPPartial
.abea	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.abed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.abf0	20 09 ac	jsr $ac09			jsr 	_FFPPartial
.abf3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.abf6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.abf9	20 09 ac	jsr $ac09			jsr 	_FFPPartial
.abfc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.abff	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; zeroed check.
.ac02	d0 03		bne $ac07			bne 	_FFPExit
.ac04					_FFPZero:
.ac04	20 13 a1	jsr $a113			jsr 	NSMSetZero
.ac07					_FFPExit:
.ac07	7a		ply				ply
.ac08	60		rts				rts
.ac09					_FFPPartial:
.ac09	c0 00		cpy #$00			cpy 	#0 							; no more to do
.ac0b	f0 17		beq $ac24			beq 	_FFFPPExit
.ac0d	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.ac0f	b0 0c		bcs $ac1d			bcs 	_FFFPPWholeByte
.ac11	5a		phy				phy
.ac12					_FFFPPLeft:
.ac12	0a		asl a				asl 	a
.ac13	88		dey				dey
.ac14	d0 fc		bne $ac12			bne 	_FFFPPLeft
.ac16	7a		ply				ply
.ac17					_FFFPPRight:
.ac17	4a		lsr a				lsr 	a
.ac18	88		dey				dey
.ac19	d0 fc		bne $ac17			bne 	_FFFPPRight
.ac1b	80 07		bra $ac24			bra 	_FFFPPExit
.ac1d					_FFFPPWholeByte:
.ac1d	98		tya				tya 								; subtract 8 from count
.ac1e	38		sec				sec
.ac1f	e9 08		sbc #$08			sbc 	#8
.ac21	a8		tay				tay
.ac22	a9 00		lda #$00			lda 	#0 							; and clear all
.ac24					_FFFPPExit:
.ac24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.ac25					FloatIntegerPart:
.ac25	48		pha				pha
.ac26	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.ac29	f0 1f		beq $ac4a			beq 	_FIPExit 					; if so do nothing
.ac2b	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; is it zero ?
.ac2e	f0 17		beq $ac47			beq 	_FIPZero 					; if so return zero.
.ac30	20 86 ac	jsr $ac86			jsr 	NSNormalise 				; normalise
.ac33	f0 12		beq $ac47			beq 	_FIPZero 					; normalised to zero, exit zero
.ac35					_FIPShift:
.ac35	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.ac38	10 08		bpl $ac42			bpl 	_FIPCheckZero
.ac3a	20 36 a1	jsr $a136			jsr 	NSMShiftRight 				; shift mantissa right
.ac3d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.ac40	80 f3		bra $ac35			bra 	_FIPShift
.ac42					_FIPCheckZero:
.ac42	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; avoid -0 problem
.ac45	d0 03		bne $ac4a			bne 	_FIPExit 					; set to zero if mantissa zero.
.ac47					_FIPZero:
.ac47	20 13 a1	jsr $a113			jsr 	NSMSetZero
.ac4a					_FIPExit:
.ac4a	68		pla				pla
.ac4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.ac4c					FloatingPointMultiply:
.ac4c	20 75 ac	jsr $ac75			jsr 	FloatPrepare 				; prepare for floats
.ac4f					FloatMultiply:
.ac4f	48		pha				pha
.ac50	20 86 ac	jsr $ac86			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ac53	f0 1b		beq $ac70			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ac55	e8		inx				inx
.ac56	20 86 ac	jsr $ac86			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ac59	ca		dex				dex
.ac5a	c9 00		cmp #$00			cmp 	#0
.ac5c	f0 0f		beq $ac6d			beq 	_FDSetZero
.ac5e	20 26 aa	jsr $aa26			jsr 	MultiplyShort 				; calculate the result.
.ac61	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.ac64	18		clc				clc
.ac65	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.ac68	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ac6b	80 03		bra $ac70			bra 	_FDExit
.ac6d					_FDSetZero:
.ac6d	20 13 a1	jsr $a113			jsr 	NSMSetZero 					; return 0
.ac70					_FDExit:
.ac70	20 86 ac	jsr $ac86			jsr 	NSNormalise 				; normalise the result
.ac73	68		pla				pla
.ac74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.ac75					FloatPrepare:
.ac75	20 74 9a	jsr $9a74			jsr 	DereferenceTopTwo 			; dereference the top two values
.ac78	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.ac7b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ac7e	29 10		and #$10			and 	#NSBIsString
.ac80	d0 01		bne $ac83			bne 	_FDType
.ac82	60		rts				rts
.ac83					_FDType:
.ac83	4c 0d af	jmp $af0d			jmp 	TypeError
.ac86					NSNormalise:
.ac86	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ac89	29 80		and #$80			and 	#$80
.ac8b	09 08		ora #$08			ora 	#NSTFloat
.ac8d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac90	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; if zero exit
.ac93	d0 09		bne $ac9e			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ac95	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ac98	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ac9b	a9 00		lda #$00			lda 	#0 							; set Z flag
.ac9d	60		rts				rts
.ac9e					_NSNormaliseOptimise:
.ac9e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.aca1	d0 22		bne $acc5			bne 	_NSNormaliseLoop
.aca3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.aca6	30 1d		bmi $acc5			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.aca8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.acab	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.acae	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.acb1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.acb4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.acb7	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.acba	bd 28 04	lda $0428,x			lda 	NSExponent,x
.acbd	38		sec				sec
.acbe	e9 08		sbc #$08			sbc 	#8
.acc0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.acc3	80 d9		bra $ac9e			bra 	_NSNormaliseOptimise
.acc5					_NSNormaliseLoop:
.acc5	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.acc8	70 08		bvs $acd2			bvs 	_NSNExit 					; exit if so with Z flag clear
.acca	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; shift mantissa left
.accd	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.acd0	80 f3		bra $acc5			bra 	_NSNormaliseLoop
.acd2					_NSNExit:
.acd2	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.acd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.99a1					AssignNumber:
.99a1	5a		phy				phy
.99a2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.99a5	85 36		sta $36				sta 	zTemp0
.99a7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.99aa	85 37		sta $37				sta 	zTemp0+1
.99ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.99af	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.99b1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99b4	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.99b6	c9 08		cmp #$08			cmp 	#NSTFloat
.99b8	f0 2a		beq $99e4			beq 	_ANFloat
.99ba	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.99bd	f0 05		beq $99c4			beq		_ANNotFloat
.99bf	e8		inx				inx
.99c0	20 25 ac	jsr $ac25			jsr 	FloatIntegerPart 			; make it an integer
.99c3	ca		dex				dex
.99c4					_ANNotFloat:
.99c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.99c7	29 03		and #$03			and 	#3
.99c9	d0 05		bne $99d0			bne 	_ANByteWord
.99cb	20 f0 99	jsr $99f0			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.99ce	80 1e		bra $99ee			bra 	_ANExit
.99d0					_ANByteWord:
.99d0	48		pha				pha 								; save count
.99d1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.99d4	92 36		sta ($36)			sta 	(zTemp0)
.99d6	68		pla				pla
.99d7	c9 01		cmp #$01			cmp	 	#1
.99d9	f0 13		beq $99ee			beq 	_ANExit
.99db	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.99de	a0 01		ldy #$01			ldy 	#1
.99e0	91 36		sta ($36),y			sta 	(zTemp0),y
.99e2	80 0a		bra $99ee			bra 	_ANExit
.99e4					_ANFloat:
.99e4	20 f0 99	jsr $99f0			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.99e7	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.99ea	a0 04		ldy #$04			ldy 	#4
.99ec	91 36		sta ($36),y			sta 	(zTemp0),y
.99ee					_ANExit:
.99ee	7a		ply				ply
.99ef	60		rts				rts
.99f0					_ANCopy4PackSign:
.99f0	a0 03		ldy #$03			ldy 	#3
.99f2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.99f5	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.99f7	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.99fa	91 36		sta ($36),y			sta 	(zTemp0),y
.99fc	88		dey				dey
.99fd	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a00	91 36		sta ($36),y			sta 	(zTemp0),y
.9a02	88		dey				dey
.9a03	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a06	91 36		sta ($36),y			sta 	(zTemp0),y
.9a08	88		dey				dey
.9a09	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a0c	91 36		sta ($36),y			sta 	(zTemp0),y
.9a0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9a0f					AssignString:
.9a0f	5a		phy				phy
.9a10	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a13	85 38		sta $38				sta 	zTemp1
.9a15	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a18	85 39		sta $39				sta 	zTemp1+1
.9a1a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a1d	85 36		sta $36				sta 	zTemp0
.9a1f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a22	85 37		sta $37				sta 	zTemp0+1
.9a24	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9a26	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a28	f0 23		beq $9a4d			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9a2a	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9a2b	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9a2d	e9 02		sbc #$02			sbc 	#2
.9a2f	85 3c		sta $3c				sta 	zsTemp
.9a31	a0 01		ldy #$01			ldy 	#1
.9a33	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a35	e9 00		sbc #$00			sbc 	#0
.9a37	85 3d		sta $3d				sta 	zsTemp+1
.9a39	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9a3b					_ASGetLength:
.9a3b	c8		iny				iny
.9a3c	b1 38		lda ($38),y			lda 	(zTemp1),y
.9a3e	d0 fb		bne $9a3b			bne 	_ASGetLength
.9a40	98		tya				tya 								; is this length <= current length
.9a41	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9a43	90 20		bcc $9a65			bcc 	_ASCopyString
.9a45	f0 1e		beq $9a65			beq 	_ASCopyString
.9a47	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9a49	a0 01		ldy #$01			ldy 	#1
.9a4b	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a4d					_ASNewStringRequired:
.9a4d	e8		inx				inx 								; concrete the new string.
.9a4e	20 a9 b1	jsr $b1a9			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9a51	ca		dex				dex
.9a52	18		clc				clc
.9a53	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9a56	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9a58	92 36		sta ($36)			sta 	(zTemp0)
.9a5a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a5d	69 00		adc #$00			adc 	#0
.9a5f	a0 01		ldy #$01			ldy 	#1
.9a61	91 36		sta ($36),y			sta 	(zTemp0),y
.9a63	80 0d		bra $9a72			bra 	_ASExit
.9a65					_ASCopyString:
.9a65	a0 00		ldy #$00			ldy 	#0
.9a67					_ASCopyLoop:
.9a67	b1 38		lda ($38),y			lda 	(zTemp1),y
.9a69	c8		iny				iny
.9a6a	c8		iny				iny
.9a6b	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a6d	88		dey				dey
.9a6e	c9 00		cmp #$00			cmp 	#0
.9a70	d0 f5		bne $9a67			bne 	_ASCopyLoop
.9a72					_ASExit:
.9a72	7a		ply				ply
.9a73	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9a74					DereferenceTopTwo:
.9a74	e8		inx				inx
.9a75	20 79 9a	jsr $9a79			jsr 	Dereference 				; deref x+1
.9a78	ca		dex				dex  								; falls through to deref x
.9a79					Dereference:
.9a79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9a7c	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9a7e	f0 57		beq $9ad7			beq 	_DRFExit 					; not a reference
.9a80	5a		phy				phy
.9a81	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9a84	85 36		sta $36				sta 	zTemp0
.9a86	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a89	85 37		sta $37				sta 	zTemp0+1
.9a8b	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9a8e	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9a90	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a93	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9a96	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9a98	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9a9a	f0 0f		beq $9aab			beq 	_DRFDereferenceTwo
.9a9c	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9a9e	f0 39		beq $9ad9			beq 	_DRFFull
.9aa0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9aa3	29 03		and #$03			and 	#3
.9aa5	f0 32		beq $9ad9			beq 	_DRFFull 					; the whole word
.9aa7	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9aa9	f0 07		beq $9ab2			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9aab					_DRFDereferenceTwo:
.9aab	a0 01		ldy #$01			ldy 	#1
.9aad	b1 36		lda ($36),y			lda 	(zTemp0),y
.9aaf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ab2					_DRFClear23:
.9ab2	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9ab5	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ab8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9abb	29 18		and #$18			and 	#NSBTypeMask
.9abd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ac0	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9ac2	d0 12		bne $9ad6			bne 	_DRFNotString
.9ac4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9ac7	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9aca	d0 0a		bne $9ad6			bne 	_DRFNotString
.9acc	a9 d8		lda #$d8			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9ace	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9ad1	a9 9a		lda #$9a			lda 	#_DRFNullString >> 8
.9ad3	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9ad6					_DRFNotString
.9ad6	7a		ply				ply 								; restore Y and exit
.9ad7					_DRFExit:
.9ad7	60		rts				rts
.9ad8					_DRFNullString:
>9ad8	00						.byte 	0
.9ad9					_DRFFull:
.9ad9	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9adb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9add	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ae0	c8		iny				iny
.9ae1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ae3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ae6	c8		iny				iny
.9ae7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ae9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9aec	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9aef	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9af2	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9af4	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9af7	f0 06		beq $9aff			beq 	_DRFNoExponent
.9af9	c8		iny				iny 								; if not, read the exponent as well.
.9afa	b1 36		lda ($36),y			lda 	(zTemp0),y
.9afc	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9aff					_DRFNoExponent:
.9aff	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9b02	10 0d		bpl $9b11			bpl 	_DRFExit2 					; if not, then exit.
.9b04	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9b06	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b09	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9b0c	09 80		ora #$80			ora 	#NSBIsNegative
.9b0e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b11					_DRFExit2:
.9b11	7a		ply				ply
.9b12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9b13					EncodeNumberStart:
.9b13	38		sec				sec
.9b14	80 01		bra $9b17			bra 	EncodeNumberContinue+1
.9b16					EncodeNumberContinue:
.9b16	18		clc				clc
.9b17					EncodeNumber:
.9b17	08		php				php 								; save reset.
.9b18	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9b1a	f0 12		beq $9b2e			beq 	_ENIsOkay
.9b1c	c9 30		cmp #$30			cmp 	#"0"
.9b1e	90 04		bcc $9b24			bcc 	_ENBadNumber
.9b20	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b22	90 0a		bcc $9b2e			bcc 	_ENIsOkay
.9b24					_ENBadNumber:
.9b24	28		plp				plp 								; throw saved reset
.9b25	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9b28	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9b2a	f0 7e		beq $9baa			beq 	_ENConstructFinal
.9b2c					_ENFail:
.9b2c	18		clc				clc 								; not allowed
.9b2d	60		rts				rts
.9b2e					_ENIsOkay:
.9b2e	28		plp				plp 								; are we restarting
.9b2f	90 15		bcc $9b46			bcc 	_ENNoRestart
.9b31					_ENStartEncode:
.9b31	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9b33	f0 0c		beq $9b41			beq 	_ENFirstDP
.9b35	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9b37	20 15 a1	jsr $a115			jsr 	NSMSetByte
.9b3a	a9 01		lda #$01			lda 	#ESTA_Low
.9b3c					_ENExitChange:
.9b3c	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9b3f	38		sec				sec
.9b40	60		rts				rts
.9b41					_ENFirstDP:
.9b41	20 13 a1	jsr $a113			jsr 	NSMSetZero 					; clear integer part
.9b44	80 3f		bra $9b85			bra 	_ESTASwitchFloat			; go straight to float and exi
.9b46					_ENNoRestart:
.9b46	48		pha				pha 								; save on stack.
.9b47	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9b4a	c9 01		cmp #$01			cmp 	#ESTA_Low
.9b4c	f0 09		beq $9b57			beq  	_ESTALowState
.9b4e	c9 02		cmp #$02			cmp 	#ESTA_High
.9b50	f0 29		beq $9b7b			beq 	_ESTAHighState
.9b52	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9b54	f0 3b		beq $9b91			beq 	_ESTADecimalState
>9b56	db						.byte 	$DB 						; causes a break in the emulator
.9b57					_ESTALowState:
.9b57	68		pla				pla 								; get value back
.9b58	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9b5a	f0 29		beq $9b85			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9b5c	29 0f		and #$0f			and 	#15 						; make digit
.9b5e	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9b61	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9b64	0a		asl a				asl 	a
.9b65	0a		asl a				asl 	a
.9b66	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b69	0a		asl a				asl 	a
.9b6a	6d 86 04	adc $0486			adc 	DigitTemp
.9b6d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b70	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9b72	90 05		bcc $9b79			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9b74	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9b76	8d 85 04	sta $0485			sta 	EncodeState
.9b79					_ESTANoSwitch:
.9b79	38		sec				sec
.9b7a	60		rts				rts
.9b7b					_ESTAHighState:
.9b7b	68		pla				pla 								; get value back
.9b7c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9b7e	f0 05		beq $9b85			beq 	_ESTASwitchFloat
.9b80	20 e4 9b	jsr $9be4			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9b83	38		sec				sec
.9b84	60		rts				rts
.9b85					_ESTASwitchFloat:
.9b85	9c 87 04	stz $0487			stz 	DecimalCount
.9b88	e8		inx				inx 								; zero the decimal additive.
.9b89	20 13 a1	jsr $a113			jsr 	NSMSetZero
.9b8c	ca		dex				dex
.9b8d	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9b8f	80 ab		bra $9b3c			bra 	_ENExitChange
.9b91					_ESTADecimalState:
.9b91	68		pla				pla 								; digit.
.9b92	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9b94	f0 96		beq $9b2c			beq 	_ENFail
.9b96	e8		inx				inx 								; put digit into fractional part of X+1
.9b97	20 e4 9b	jsr $9be4			jsr 	ESTAShiftDigitIntoMantissa
.9b9a	ca		dex				dex
.9b9b	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9b9e	ad 87 04	lda $0487			lda 	DecimalCount
.9ba1	c9 0b		cmp #$0b			cmp 	#11
.9ba3	f0 02		beq $9ba7			beq 	_ESTADSFail
.9ba5	38		sec				sec
.9ba6	60		rts				rts
.9ba7					_ESTADSFail:
.9ba7	4c 08 af	jmp $af08			jmp 	RangeError
.9baa					_ENConstructFinal:
.9baa	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9bad	f0 33		beq $9be2			beq 	_ENCFExit 					; no decimals
.9baf	5a		phy				phy
.9bb0	0a		asl a				asl 	a 							; x 4 and CLC
.9bb1	0a		asl a				asl 	a
.9bb2	6d 87 04	adc $0487			adc 	DecimalCount
.9bb5	a8		tay				tay
.9bb6	b9 c7 ae	lda $aec7,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9bb9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9bbc	b9 c8 ae	lda $aec8,y			lda 	DecimalScalarTable-5+1,y
.9bbf	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9bc2	b9 c9 ae	lda $aec9,y			lda 	DecimalScalarTable-5+2,y
.9bc5	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9bc8	b9 ca ae	lda $aeca,y			lda 	DecimalScalarTable-5+3,y
.9bcb	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9bce	b9 cb ae	lda $aecb,y			lda 	DecimalScalarTable-5+4,y
.9bd1	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9bd4	a9 08		lda #$08			lda 	#NSTFloat
.9bd6	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9bd9	7a		ply				ply
.9bda	e8		inx				inx 								; multiply decimal const by decimal scalar
.9bdb	20 4f ac	jsr $ac4f			jsr 	FloatMultiply
.9bde	ca		dex				dex
.9bdf	20 e4 aa	jsr $aae4			jsr 	FloatAdd 					; add to integer part.
.9be2					_ENCFExit:
.9be2	18		clc				clc 								; reject the digit.
.9be3	60		rts				rts
.9be4					ESTAShiftDigitIntoMantissa:
.9be4	29 0f		and #$0f			and 	#15 						; save digit
.9be6	48		pha				pha
.9be7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9bea	48		pha				pha
.9beb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9bee	48		pha				pha
.9bef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bf2	48		pha				pha
.9bf3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9bf6	48		pha				pha
.9bf7	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; x 2
.9bfa	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; x 4
.9bfd	18		clc				clc 								; pop mantissa and add
.9bfe	68		pla				pla
.9bff	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c02	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c05	68		pla				pla
.9c06	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9c09	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c0c	68		pla				pla
.9c0d	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9c10	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c13	68		pla				pla
.9c14	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9c17	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9c1a	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; x 10
.9c1d	68		pla				pla 								; add digit
.9c1e	18		clc				clc
.9c1f	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c22	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c25	90 0d		bcc $9c34			bcc 	_ESTASDExit
.9c27	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9c2a	d0 08		bne $9c34			bne 	_ESTASDExit
.9c2c	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9c2f	d0 03		bne $9c34			bne 	_ESTASDExit
.9c31	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9c34					_ESTASDExit:
.9c34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9c35					EvaluateTerm:
.9c35	b1 30		lda ($30),y			lda 	(codePtr),y
.9c37	30 18		bmi $9c51			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9c39	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9c3b	b0 6f		bcs $9cac			bcs 	_ETVariable
.9c3d	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9c3f	90 6e		bcc $9caf			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9c41	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c43	b0 6a		bcs $9caf			bcs 	_ETPuncUnary
.9c45	20 13 9b	jsr $9b13			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9c48					_ETNumber:
.9c48	c8		iny				iny 								; keep encoding until we have the numbers
.9c49	b1 30		lda ($30),y			lda 	(codePtr),y
.9c4b	20 16 9b	jsr $9b16			jsr 	EncodeNumberContinue
.9c4e	b0 f8		bcs $9c48			bcs 	_ETNumber 					; go back if accepted.
.9c50	60		rts				rts
.9c51					_ETCheckUnary:
.9c51	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9c53	f0 41		beq $9c96			beq 	_ETString
.9c55	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9c57	f0 12		beq $9c6b			beq 	_ETHexConstant
.9c59	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9c5b	90 0b		bcc $9c68			bcc 	_ETSyntaxError
.9c5d	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9c5f	b0 07		bcs $9c68			bcs 	_ETSyntaxError
.9c61	da		phx				phx 								; push X on the stack
.9c62	0a		asl a				asl 	a 							; put vector x 2 into X
.9c63	aa		tax				tax
.9c64	c8		iny				iny 								; consume unary function token
.9c65	7c fa 91	jmp ($91fa,x)			jmp 	(VectorSet0,x) 				; and do it.
.9c68					_ETSyntaxError:
.9c68	4c 03 af	jmp $af03			jmp 	SyntaxError
.9c6b					_ETHexConstant:
.9c6b	c8		iny				iny 								; skip #
.9c6c	c8		iny				iny 								; skip count
.9c6d	20 13 a1	jsr $a113			jsr 	NSMSetZero 					; clear result
.9c70					_ETHLoop:
.9c70	b1 30		lda ($30),y			lda 	(codePtr),y
.9c72	c8		iny				iny 								; and consume
.9c73	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9c75	f0 1e		beq $9c95			beq 	_ETHExit
.9c77	48		pha				pha 								; save on stack.
.9c78	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; x 2
.9c7b	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; x 4
.9c7e	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; x 8
.9c81	20 28 a1	jsr $a128			jsr 	NSMShiftLeft 				; x 16
.9c84	68		pla				pla 								; ASCII
.9c85	c9 41		cmp #$41			cmp 	#'A'
.9c87	90 02		bcc $9c8b			bcc 	_ETHNotChar
.9c89	e9 07		sbc #$07			sbc 	#7
.9c8b					_ETHNotChar:
.9c8b	29 0f		and #$0f			and 	#15 						; digit now
.9c8d	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9c90	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c93	80 db		bra $9c70			bra 	_ETHLoop 					; go round.
.9c95					_ETHExit:
.9c95	60		rts				rts
.9c96					_ETString:
.9c96	c8		iny				iny 								; look at length
.9c97	b1 30		lda ($30),y			lda 	(codePtr),y
.9c99	48		pha				pha
.9c9a	c8		iny				iny 								; first character
.9c9b	20 5d a1	jsr $a15d			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9c9e	68		pla				pla 								; restore count and save
.9c9f	85 36		sta $36				sta 	zTemp0
.9ca1	98		tya				tya 								; add length to Y to skip it.
.9ca2	18		clc				clc
.9ca3	65 36		adc $36				adc 	zTemp0
.9ca5	a8		tay				tay
.9ca6	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9ca8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cab	60		rts				rts
.9cac					_ETVariable:
.9cac	4c 06 9d	jmp $9d06			jmp 	VariableHandler
.9caf					_ETPuncUnary:
.9caf	c8		iny				iny 								; consume the unary character
.9cb0	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9cb2	f0 2d		beq $9ce1			beq 	_ETUnaryNegate
.9cb4	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9cb6	f0 39		beq $9cf1			beq 	_ETDereference
.9cb8	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9cba	f0 43		beq $9cff			beq 	_ETParenthesis
.9cbc	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9cbe	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9cc0	f0 06		beq $9cc8			beq 	_ETIndirection
.9cc2	e6 36		inc $36				inc 	zTemp0
.9cc4	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9cc6	d0 a0		bne $9c68			bne 	_ETSyntaxError
.9cc8					_ETIndirection:
.9cc8	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9cca	1a		inc a				inc 	a
.9ccb	48		pha				pha
.9ccc	20 35 9c	jsr $9c35			jsr 	EvaluateTerm				; evaluate the term
.9ccf	20 79 9a	jsr $9a79			jsr 	Dereference 				; dereference it.
.9cd2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9cd5	d0 07		bne $9cde			bne 	_ETTypeMismatch
.9cd7	68		pla				pla 								; indirection 1-2
.9cd8	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9cda	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cdd	60		rts				rts
.9cde					_ETTypeMismatch:
.9cde	4c 0d af	jmp $af0d			jmp 	TypeError
.9ce1					_ETUnaryNegate:
.9ce1	20 35 9c	jsr $9c35			jsr 	EvaluateTerm				; evaluate the term
.9ce4	20 79 9a	jsr $9a79			jsr 	Dereference 				; dereference it.
.9ce7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9cea	29 10		and #$10			and 	#NSTString
.9cec	d0 f0		bne $9cde			bne 	_ETTypeMismatch
.9cee	4c bf a0	jmp $a0bf			jmp 	NSMNegate  					; just toggles the sign bit.
.9cf1					_ETDereference:
.9cf1	20 35 9c	jsr $9c35			jsr 	EvaluateTerm				; evaluate the term
.9cf4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9cf7	29 20		and #$20			and 	#NSBIsReference
.9cf9	f0 e3		beq $9cde			beq 	_ETTypeMismatch
.9cfb	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9cfe	60		rts				rts
.9cff					_ETParenthesis:
.9cff	20 64 99	jsr $9964			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9d02	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 			; check for )
.9d05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9d06					VariableHandler:
.9d06	b1 30		lda ($30),y			lda 	(codePtr),y
.9d08	18		clc				clc
.9d09	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9d0b	85 37		sta $37				sta 	zTemp0+1
.9d0d	c8		iny				iny
.9d0e	b1 30		lda ($30),y			lda 	(codePtr),y
.9d10	85 36		sta $36				sta 	zTemp0
.9d12	c8		iny				iny
.9d13	18		clc				clc									; copy variable address+3 to mantissa
.9d14	69 03		adc #$03			adc 	#3
.9d16	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d19	a5 37		lda $37				lda 	zTemp0+1
.9d1b	69 00		adc #$00			adc 	#0
.9d1d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d20	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9d23	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9d26	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d29	5a		phy				phy
.9d2a	a0 02		ldy #$02			ldy 	#2 							; read type
.9d2c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d2e	7a		ply				ply
.9d2f	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9d31	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9d33	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d36	29 04		and #$04			and 	#NSBIsArray
.9d38	d0 01		bne $9d3b			bne 	_VHArray
.9d3a	60		rts				rts
.9d3b					_VHArray:
.9d3b	e8		inx				inx
.9d3c	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9d3f	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9d41	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d44	b1 30		lda ($30),y			lda 	(codePtr),y
.9d46	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9d48	d0 06		bne $9d50			bne 	_VHNoSecondIndex
.9d4a	c8		iny				iny 								; skip the comma
.9d4b	e8		inx				inx
.9d4c	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9d4f	ca		dex				dex
.9d50					_VHNoSecondIndex:
.9d50	ca		dex				dex 								; set X back.
.9d51	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 			; and check the right bracket.
.9d54	5a		phy				phy 								; save position
.9d55	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9d58	85 3e		sta $3e				sta 	zaTemp
.9d5a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d5d	85 3f		sta $3f				sta 	zaTemp+1
.9d5f	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9d61	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d63	f0 02		beq $9d67			beq 	_VHHas2Mask
.9d65	a9 ff		lda #$ff			lda 	#$FF
.9d67					_VHHas2Mask:
.9d67	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9d6a	f0 54		beq $9dc0			beq 	_VHBadIndex
.9d6c	0a		asl a				asl 	a 							; carry will be set if a second index
.9d6d	90 09		bcc $9d78			bcc 	_VHCheckFirstIndex
.9d6f	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9d71	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d73	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9d76	90 48		bcc $9dc0			bcc 	_VHBadIndex
.9d78					_VHCheckFirstIndex:
.9d78	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9d7a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d7c	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9d7f	90 3f		bcc $9dc0			bcc 	_VHBadIndex
.9d81	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9d83	64 37		stz $37				stz 	zTemp0+1
.9d85	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9d88	30 0f		bmi $9d99			bmi 	_VHNoMultiply
.9d8a	da		phx				phx
.9d8b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9d8e	48		pha				pha
.9d8f	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9d91	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d93	1a		inc a				inc 	a 							; add 1 for zero base
.9d94	fa		plx				plx
.9d95	20 9f ad	jsr $ad9f			jsr 	Multiply8x8 				; calculate -> Z0
.9d98	fa		plx				plx
.9d99					_VHNoMultiply:
.9d99	18		clc				clc
.9d9a	a5 36		lda $36				lda 	zTemp0
.9d9c	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9d9f	85 36		sta $36				sta 	zTemp0
.9da1	a5 37		lda $37				lda 	zTemp0+1
.9da3	69 00		adc #$00			adc 	#0
.9da5	85 37		sta $37				sta 	zTemp0+1
.9da7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9daa	20 5f 8c	jsr $8c5f			jsr 	ScaleByBaseType
.9dad	18		clc				clc
.9dae	b2 3e		lda ($3e)			lda 	(zaTemp)
.9db0	65 36		adc $36				adc 	zTemp0
.9db2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db5	a0 01		ldy #$01			ldy 	#1
.9db7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9db9	65 37		adc $37				adc 	zTemp0+1
.9dbb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dbe	7a		ply				ply 								; restore position
.9dbf	60		rts				rts
.9dc0					_VHBadIndex:
.9dc0	a9 17		lda #$17		lda	#23
.9dc2	4c 5b 95	jmp $955b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.acd5					AbsUnary:
.acd5	fa		plx				plx 								; restore stack pos
.acd6	20 67 a0	jsr $a067			jsr 	EvaluateNumber 				; get a float or int
.acd9	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.acdc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.acdf	29 7f		and #$7f			and 	#$7F
.ace1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ace4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9dc5					AllocUnary:
.9dc5	fa		plx				plx 								; restore stack pos
.9dc6	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger		; get bytes required.
.9dc9	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.9dcc	da		phx				phx 								; save X/Y
.9dcd	5a		phy				phy
.9dce	8a		txa				txa 								; copy X into Y
.9dcf	a8		tay				tay
.9dd0	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9dd3	aa		tax				tax
.9dd4	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9dd7	20 e4 9d	jsr $9de4			jsr 	AllocateXABytes 			; allocate memory
.9dda	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9ddd	8a		txa				txa
.9dde	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9de1	7a		ply				ply
.9de2	fa		plx				plx
.9de3	60		rts				rts
.9de4					AllocateXABytes:
.9de4	5a		phy				phy
.9de5	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9de8	84 36		sty $36				sty 	zTemp0
.9dea	5a		phy				phy
.9deb	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9dee	84 37		sty $37				sty 	zTemp0+1
.9df0	5a		phy				phy
.9df1	18		clc				clc 								; add to low memory pointer
.9df2	6d 8c 04	adc $048c			adc 	lowMemPtr
.9df5	8d 8c 04	sta $048c			sta 	lowMemPtr
.9df8	8a		txa				txa
.9df9	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9dfc	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9dff	b0 2f		bcs $9e30			bcs 	CISSMemory
.9e01	20 22 9e	jsr $9e22			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9e04					_ClearMemory:
.9e04	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9e07	c5 36		cmp $36				cmp 	zTemp0
.9e09	d0 07		bne $9e12			bne 	_CMClearNext
.9e0b	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9e0e	c5 37		cmp $37				cmp 	zTemp0+1
.9e10	f0 0c		beq $9e1e			beq 	_CMExit
.9e12					_CMClearNext:
.9e12	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9e14	92 36		sta ($36)			sta 	(zTemp0)
.9e16	e6 36		inc $36				inc 	zTemp0
.9e18	d0 ea		bne $9e04			bne 	_ClearMemory
.9e1a	e6 37		inc $37				inc		zTemp0+1
.9e1c	80 e6		bra $9e04			bra 	_ClearMemory
.9e1e					_CMExit:
.9e1e	fa		plx				plx
.9e1f	68		pla				pla
.9e20	7a		ply				ply
.9e21	60		rts				rts
.9e22					CheckIdentifierStringSpace:
.9e22	48		pha				pha
.9e23	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9e26	18		clc				clc
.9e27	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9e29	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9e2c	b0 02		bcs $9e30			bcs 	CISSMemory
.9e2e	68		pla				pla
.9e2f	60		rts				rts
.9e30					CISSMemory:
.9e30	a9 06		lda #$06		lda	#6
.9e32	4c 5b 95	jmp $955b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ace5					AscUnary:
.ace5	fa		plx				plx 								; restore stack pos
.ace6	20 72 a0	jsr $a072			jsr 	EvaluateString 				; get a string
.ace9	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.aceb	20 15 a1	jsr $a115			jsr 	NSMSetByte
.acee	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.acf1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.acf2					FracUnary:
.acf2	fa		plx				plx 								; restore stack pos
.acf3	20 67 a0	jsr $a067			jsr 	EvaluateNumber 				; get a float or int
.acf6	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.acf9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.acfc	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.acfe	f0 04		beq $ad04			beq 	_IUZero
.ad00	20 c2 ab	jsr $abc2			jsr 	FloatFractionalPart
.ad03	60		rts				rts
.ad04					_IUZero:
.ad04	20 13 a1	jsr $a113			jsr 	NSMSetZero
.ad07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ad08					IntUnary:
.ad08	fa		plx				plx 								; restore stack pos
.ad09	20 67 a0	jsr $a067			jsr 	EvaluateNumber 				; get a float or int
.ad0c	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.ad0f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ad12	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ad14	f0 03		beq $ad19			beq 	_IUExit
.ad16	20 25 ac	jsr $ac25			jsr 	FloatIntegerPart
.ad19					_IUExit:
.ad19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ad1a					LenUnary:
.ad1a	fa		plx				plx 								; restore stack pos
.ad1b	20 72 a0	jsr $a072			jsr 	EvaluateString 				; get a string
.ad1e	5a		phy				phy
.ad1f	a0 00		ldy #$00			ldy 	#0 							; find length
.ad21					_LenFind:
.ad21	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad23	f0 06		beq $ad2b			beq 	_LenExit
.ad25	c8		iny				iny
.ad26	d0 f9		bne $ad21			bne 	_LenFind
.ad28	4c 08 af	jmp $af08			jmp 	RangeError 					; string > 255
.ad2b					_LenExit:
.ad2b	98		tya				tya
.ad2c	20 15 a1	jsr $a115			jsr 	NSMSetByte
.ad2f	7a		ply				ply
.ad30	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.ad33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9e35					Unary_Not:
.9e35	fa		plx				plx
.9e36	20 8a a0	jsr $a08a			jsr 	EvaluateInteger 			; get integer
.9e39	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.9e3c	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; zero mantissa ?
.9e3f	f0 04		beq $9e45			beq 	_NotZero
.9e41	20 13 a1	jsr $a113			jsr 	NSMSetZero
.9e44	60		rts				rts
.9e45					_NotZero:
.9e45	4c c8 95	jmp $95c8			jmp 	ReturnTrue
.9e48					_UNBad:
.9e48	4c 12 af	jmp $af12			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9e4b					Unary_Random:
.9e4b	fa		plx				plx
.9e4c	20 c4 9e	jsr $9ec4			jsr 	Random32Bit 				; get a random number
.9e4f	20 a9 9e	jsr $9ea9			jsr 	URCopyToMantissa  			; put in mantissa
.9e52	e8		inx				inx
.9e53	20 9f a0	jsr $a09f			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9e56	ca		dex				dex
.9e57	20 a1 a9	jsr $a9a1			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9e5a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9e5d	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9e60	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.9e63	60		rts				rts
.9e64					Unary_Rnd:
.9e64	fa		plx				plx
.9e65	20 67 a0	jsr $a067			jsr 	EvaluateNumber 				; number to use.
.9e68	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 			; closing bracket
.9e6b	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9e6e	f0 2b		beq $9e9b			beq 	_URCopySeed
.9e70	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9e73	10 23		bpl $9e98			bpl 	_URDontSeed
.9e75	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9e78	49 17		eor #$17			eor 	#$17
.9e7a	8d 88 04	sta $0488			sta 	RandomSeed+0
.9e7d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e80	49 a5		eor #$a5			eor 	#$A5
.9e82	8d 89 04	sta $0489			sta 	RandomSeed+1
.9e85	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e88	49 c2		eor #$c2			eor 	#$C2
.9e8a	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9e8d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e90	49 9d		eor #$9d			eor 	#$9D
.9e92	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9e95	20 c4 9e	jsr $9ec4			jsr 	Random32Bit
.9e98					_URDontSeed:
.9e98	20 c4 9e	jsr $9ec4			jsr 	Random32Bit 				; generate a number.
.9e9b					_URCopySeed:
.9e9b	20 a9 9e	jsr $9ea9			jsr 	URCopyToMantissa 			; copy into mantissa
.9e9e	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9ea0	8d 28 04	sta $0428			sta 	NSExponent
.9ea3	a9 08		lda #$08			lda 	#NSTFloat
.9ea5	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9ea8	60		rts				rts
.9ea9					URCopyToMantissa:
.9ea9	ad 88 04	lda $0488			lda 	RandomSeed+0
.9eac	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9eaf	ad 89 04	lda $0489			lda 	RandomSeed+1
.9eb2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9eb5	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9eb8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ebb	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9ebe	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9ec0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ec3	60		rts				rts
.9ec4					Random32Bit:
.9ec4	5a		phy				phy
.9ec5	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9ec7	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9eca	d0 03		bne $9ecf			bne 	_Random1
.9ecc	a8		tay				tay 								; if so do it 256 times
.9ecd	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9ecf					_Random1:
.9ecf	0a		asl a				asl 	a 							; LSFR RNG
.9ed0	2e 89 04	rol $0489			rol 	RandomSeed+1
.9ed3	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9ed6	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9ed9	90 02		bcc $9edd			bcc 	_Random2
.9edb	49 c5		eor #$c5			eor 	#$C5
.9edd					_Random2:
.9edd	88		dey				dey
.9ede	d0 ef		bne $9ecf			bne 	_Random1
.9ee0	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ee3	7a		ply				ply
.9ee4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.ad34					SgnUnary:
.ad34	fa		plx				plx 								; restore stack pos
.ad35	20 67 a0	jsr $a067			jsr 	EvaluateNumber 				; get a float or int
.ad38	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.ad3b	20 43 a1	jsr $a143			jsr 	NSMIsZero 					; if zero
.ad3e	f0 10		beq $ad50			beq 	_SGZero  					; return Int Zero
.ad40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.ad43	48		pha				pha
.ad44	a9 01		lda #$01			lda 	#1 							; set to 1
.ad46	20 15 a1	jsr $a115			jsr 	NSMSetByte
.ad49	68		pla				pla
.ad4a	29 80		and #$80			and		#$80 						; copy the sign byte out
.ad4c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad4f	60		rts				rts
.ad50	20 13 a1	jsr $a113	_SGZero:jsr 	NSMSetZero
.ad53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.ad54					ValUnary:
.ad54	fa		plx				plx 								; restore stack pos
.ad55	20 6a ad	jsr $ad6a			jsr 	ValMainCode 				; do the main val() code
.ad58	b0 01		bcs $ad5b			bcs 	_VUError 					; couldn't convert
.ad5a	60		rts				rts
.ad5b					_VUError:
.ad5b	4c 0d af	jmp $af0d			jmp 	TypeError
.ad5e					IsValUnary:
.ad5e	fa		plx				plx 								; restore stack pos
.ad5f	20 6a ad	jsr $ad6a			jsr 	ValMainCode 				; do the main val() code
.ad62	b0 03		bcs $ad67			bcs 	_VUBad
.ad64	4c c8 95	jmp $95c8			jmp 	ReturnTrue
.ad67					_VUBad:
.ad67	4c d4 95	jmp $95d4			jmp 	ReturnFalse
.ad6a					ValMainCode:
.ad6a	20 72 a0	jsr $a072			jsr 	EvaluateString 				; get a string
.ad6d	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 			; check right bracket present
.ad70	5a		phy				phy
.ad71	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ad73	f0 17		beq $ad8c			beq 	_VMCFail2
.ad75	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ad77	48		pha				pha 								; save first character
.ad78	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ad7a	d0 01		bne $ad7d			bne 	_VMCStart
.ad7c	c8		iny				iny 								; skip over -
.ad7d					_VMCStart:
.ad7d	38		sec				sec 								; initialise first time round.
.ad7e					_VMCNext:
.ad7e	c8		iny				iny 								; pre-increment
.ad7f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ad81	f0 0c		beq $ad8f			beq 	_VMCSuccess 				; successful.
.ad83	20 17 9b	jsr $9b17			jsr 	EncodeNumber 				; send it to the number-builder
.ad86	90 03		bcc $ad8b			bcc 	_VMCFail 					; if failed, give up.
.ad88	18		clc				clc 								; next time round, countinue
.ad89	80 f3		bra $ad7e			bra 	_VMCNext
.ad8b					_VMCFail:
.ad8b	68		pla				pla
.ad8c					_VMCFail2:
.ad8c	7a		ply				ply
.ad8d	38		sec				sec
.ad8e	60		rts				rts
.ad8f					_VMCSuccess:
.ad8f	a9 00		lda #$00			lda 	#0 							; construct final
.ad91	20 17 9b	jsr $9b17			jsr 	EncodeNumber
.ad94	68		pla				pla
.ad95	c9 2d		cmp #$2d			cmp 	#"-"
.ad97	d0 03		bne $ad9c			bne 	_VMCNotNegative
.ad99	20 bf a0	jsr $a0bf			jsr		NSMNegate
.ad9c					_VMCNotNegative:
.ad9c	7a		ply				ply
.ad9d	18		clc				clc
.ad9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ee5					ChrUnary:
.9ee5	fa		plx				plx 								; restore stack pos
.9ee6	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger			; get value
.9ee9	48		pha				pha
.9eea	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.9eed	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9eef	20 2a b2	jsr $b22a			jsr 	StringTempAllocate
.9ef2	68		pla				pla 								; write number to it
.9ef3	20 68 b2	jsr $b268			jsr 	StringTempWrite
.9ef6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9ef7					SpcUnary:
.9ef7	fa		plx				plx 								; restore stack pos
.9ef8	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger			; get value
.9efb	5a		phy				phy
.9efc	48		pha				pha 								; save count
.9efd	20 2a b2	jsr $b22a			jsr 	StringTempAllocate
.9f00	7a		ply				ply 								; to do count in Y
.9f01					_SpcLoop:
.9f01	c0 00		cpy #$00			cpy 	#0
.9f03	f0 08		beq $9f0d			beq 	_SpcExit
.9f05	a9 20		lda #$20			lda 	#32
.9f07	20 68 b2	jsr $b268			jsr 	StringTempWrite
.9f0a	88		dey				dey
.9f0b	80 f4		bra $9f01			bra 	_SPCLoop
.9f0d					_SpcExit:
.9f0d	7a		ply				ply
.9f0e	20 1d a9	jsr $a91d			jsr 	CheckRightBracket
.9f11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9f12					Unary_Str:
.9f12	fa		plx				plx
.9f13	20 67 a0	jsr $a067			jsr 	EvaluateNumber  			; get number
.9f16	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 			; closing bracket
.9f19	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9f1b	20 34 9f	jsr $9f34			jsr 	ConvertNumberToString 		; do the conversion.
.9f1e	a9 21		lda #$21			lda		#33 						; create buffer
.9f20	20 2a b2	jsr $b22a			jsr 	StringTempAllocate 			; allocate memory
.9f23	da		phx				phx
.9f24	a2 00		ldx #$00			ldx 	#0
.9f26					_USCopy:
.9f26	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9f29	20 68 b2	jsr $b268			jsr 	StringTempWrite
.9f2c	e8		inx				inx
.9f2d	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9f30	d0 f4		bne $9f26			bne 	_USCopy
.9f32	fa		plx				plx
.9f33	60		rts				rts
.9f34					ConvertNumberToString:
.9f34	5a		phy				phy 								; save code position
.9f35	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9f38	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9f3b	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9f3e	10 0a		bpl $9f4a			bpl 	_CNTSNotNegative
.9f40	29 7f		and #$7f			and 	#$7F 						; make +ve
.9f42	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f45	a9 2d		lda #$2d			lda 	#"-"
.9f47	20 b0 9f	jsr $9fb0			jsr 	WriteDecimalBuffer
.9f4a					_CNTSNotNegative:
.9f4a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9f4d	f0 15		beq $9f64			beq 	_CNTSNotFloat
.9f4f	e8		inx				inx 								; round up
.9f50	a9 01		lda #$01			lda 	#1
.9f52	20 15 a1	jsr $a115			jsr 	NSMSetByte
.9f55	ca		dex				dex
.9f56	bd 28 04	lda $0428,x			lda		NSExponent,x
.9f59	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9f5c	a9 08		lda #$08			lda 	#NSTFloat
.9f5e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9f61	20 e4 aa	jsr $aae4			jsr 	FloatAdd
.9f64					_CNTSNotFloat:
.9f64	20 92 9f	jsr $9f92			jsr 	MakePlusTwoString
.9f67	20 c2 ab	jsr $abc2			jsr 	FloatFractionalPart 		; get the fractional part
.9f6a	20 86 ac	jsr $ac86			jsr 	NSNormalise					; normalise , exit if zero
.9f6d	f0 21		beq $9f90			beq 	_CNTSExit
.9f6f	a9 2e		lda #$2e			lda 	#"."
.9f71	20 b0 9f	jsr $9fb0			jsr 	WriteDecimalBuffer 			; write decimal place
.9f74					_CNTSDecimal:
.9f74	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9f77	30 17		bmi $9f90			bmi 	_CNTSExit
.9f79	e8		inx				inx 								; x 10.0
.9f7a	a9 0a		lda #$0a			lda 	#10
.9f7c	20 15 a1	jsr $a115			jsr 	NSMSetByte
.9f7f	a9 08		lda #$08			lda 	#NSTFloat
.9f81	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f84	ca		dex				dex
.9f85	20 4f ac	jsr $ac4f			jsr 	FloatMultiply
.9f88	20 92 9f	jsr $9f92			jsr 	MakePlusTwoString
.9f8b	20 c2 ab	jsr $abc2			jsr 	FloatFractionalPart 		; get the fractional part
.9f8e	80 e4		bra $9f74			bra 	_CNTSDecimal 				; keep going.
.9f90					_CNTSExit:
.9f90	7a		ply				ply
.9f91	60		rts				rts
.9f92					MakePlusTwoString:
.9f92	da		phx				phx
.9f93	20 ea a0	jsr $a0ea			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9f96	e8		inx				inx 								; access it
.9f97	e8		inx				inx
.9f98	20 25 ac	jsr $ac25			jsr 	FloatIntegerPart 			; make it an integer
.9f9b	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9f9d	20 8e aa	jsr $aa8e			jsr 	ConvertInt32
.9fa0	a2 00		ldx #$00			ldx	 	#0
.9fa2					_MPTSCopy:
.9fa2	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9fa5	20 b0 9f	jsr $9fb0			jsr 	WriteDecimalBuffer
.9fa8	e8		inx				inx
.9fa9	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9fac	d0 f4		bne $9fa2			bne 	_MPTSCopy
.9fae	fa		plx				plx
.9faf	60		rts				rts
.9fb0					WriteDecimalBuffer:
.9fb0	da		phx				phx
.9fb1	ae 95 04	ldx $0495			ldx 	dbOffset
.9fb4	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9fb7	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9fba	ee 95 04	inc $0495			inc 	dbOffset
.9fbd	fa		plx				plx
.9fbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9fbf					Unary_Left:
.9fbf	fa		plx				plx
.9fc0	18		clc				clc 								; only one parameter
.9fc1	20 36 a0	jsr $a036			jsr 	SubstringInitial 			; set up.
.9fc4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9fc7	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fca	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9fcd	80 2c		bra $9ffb			bra 	SubstringMain
.9fcf					Unary_Right:
.9fcf	fa		plx				plx
.9fd0	18		clc				clc 								; only one parameter
.9fd1	20 36 a0	jsr $a036			jsr 	SubstringInitial 			; set up.
.9fd4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9fd7	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fda	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9fdd	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9fe0	b0 02		bcs $9fe4			bcs 	_URNotUnderflow
.9fe2	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9fe4					_URNotUnderFlow:
.9fe4	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9fe7	80 12		bra $9ffb			bra 	SubStringMain
.9fe9					Unary_Mid:
.9fe9	fa		plx				plx
.9fea	38		sec				sec 								; two parameters
.9feb	20 36 a0	jsr $a036			jsr 	SubstringInitial 			; set up.
.9fee	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ff1	f0 05		beq $9ff8			beq 	_UMError
.9ff3	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ff6	80 03		bra $9ffb			bra 	SubStringMain
.9ff8					_UMError:
.9ff8	4c 12 af	jmp $af12			jmp 	ArgumentError
.9ffb					SubStringMain:
.9ffb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9ffe	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a001	b0 2d		bcs $a030			bcs 	_SSMNull 					; if so, return an empty string.
.a003	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a006	f0 28		beq $a030			beq 	_SSMNull 					; return empty string.
.a008	18		clc				clc 								; add the offset +1 to the address and
.a009	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a00c	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a00f	85 36		sta $36				sta 	zTemp0
.a011	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a014	69 00		adc #$00			adc 	#0
.a016	85 37		sta $37				sta 	zTemp0+1
.a018					_SSMNoCarry:
.a018	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a01b	20 2a b2	jsr $b22a			jsr 	StringTempAllocate 			; allocate that many characters
.a01e	5a		phy				phy 								; save Y
.a01f	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a021					_SSMCopy:
.a021	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a023	f0 09		beq $a02e			beq 	_SSMEString 				; no more to copy
.a025	20 68 b2	jsr $b268			jsr 	StringTempWrite 			; and write it out.
.a028	c8		iny				iny
.a029	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a02c	d0 f3		bne $a021			bne 	_SSMCopy
.a02e					_SSMEString:
.a02e	7a		ply				ply
.a02f					_SSMExit:
.a02f	60		rts				rts
.a030					_SSMNull:
.a030	a9 00		lda #$00			lda 	#0
.a032	20 2a b2	jsr $b22a			jsr 	StringTempAllocate
.a035	60		rts				rts
.a036					SubstringInitial:
.a036	da		phx				phx 								; save initial stack position
.a037	08		php				php 								; save carry on stack indicating 2 parameters
.a038	20 72 a0	jsr $a072			jsr 	EvaluateString 				; get a string
.a03b	5a		phy				phy 								; calculate length to exponent.
.a03c	a0 ff		ldy #$ff			ldy 	#$FF
.a03e					_SIFindLength:
.a03e	c8		iny				iny
.a03f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a041	d0 fb		bne $a03e			bne 	_SIFindLength
.a043	98		tya				tya
.a044	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a047	7a		ply				ply
.a048	e8		inx				inx
.a049	20 25 a9	jsr $a925			jsr 	CheckComma 					; comma next
.a04c	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger 		; get next parameter
.a04f	28		plp				plp 								; is it the last parameter ?
.a050	90 07		bcc $a059			bcc 	_SSIExit 					; if so, exit.
.a052	e8		inx				inx
.a053	20 25 a9	jsr $a925			jsr 	CheckComma 					; comma next
.a056	20 ab a0	jsr $a0ab			jsr 	Evaluate8BitInteger 		; get last parameter
.a059					_SSIExit:
.a059	fa		plx				plx
.a05a	20 1d a9	jsr $a91d			jsr 	CheckRightBracket 			; check closing bracket
.a05d	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a05e					EvaluateValue:
.a05e	48		pha				pha
.a05f	20 64 99	jsr $9964			jsr		EvaluateExpression 			; expression
.a062	20 79 9a	jsr $9a79			jsr 	Dereference					; derefernce it
.a065	68		pla				pla
.a066	60		rts				rts
.a067					EvaluateNumber:
.a067	20 5e a0	jsr $a05e			jsr 	EvaluateValue 				; get a value
.a06a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a06d	29 10		and #$10			and 	#NSBIsString
.a06f	d0 16		bne $a087			bne 	HelperTypeError
.a071	60		rts				rts
.a072					EvaluateString:
.a072	20 5e a0	jsr $a05e			jsr 	EvaluateValue 				; get a value
.a075	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a078	29 10		and #$10			and 	#NSBIsString
.a07a	f0 0b		beq $a087			beq 	HelperTypeError
.a07c					CopyAddressToTemp0:
.a07c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a07f	85 36		sta $36				sta 	zTemp0
.a081	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a084	85 37		sta $37				sta 	zTemp0+1
.a086	60		rts				rts
.a087					HelperTypeError:
.a087	4c 0d af	jmp $af0d			jmp 	TypeError
.a08a					EvaluateInteger:
.a08a	20 67 a0	jsr $a067			jsr 	EvaluateNumber
.a08d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a090	d0 0a		bne $a09c			bne 	HelperValueError 			; if not, it's a float.
.a092	60		rts				rts
.a093					EvaluateUnsignedInteger:
.a093	20 8a a0	jsr $a08a			jsr 	EvaluateInteger 			; check integer is +ve
.a096	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a099	30 01		bmi $a09c			bmi 	HelperValueError
.a09b	60		rts				rts
.a09c					HelperValueError:
.a09c	4c 12 af	jmp $af12			jmp 	ArgumentError
.a09f					Evaluate16BitInteger:
.a09f	20 93 a0	jsr $a093			jsr	 	EvaluateUnsignedInteger		; get integer
.a0a2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0a5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a0a8	d0 f2		bne $a09c			bne 	HelperValueError
.a0aa	60		rts				rts
.a0ab					Evaluate8BitInteger:
.a0ab	20 93 a0	jsr $a093			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a0ae	d0 ec		bne $a09c			bne 	HelperValueError
.a0b0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a0b3	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a0b6	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a0b9	d0 e1		bne $a09c			bne 	HelperValueError
.a0bb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a0be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ad9f					Multiply8x8:
.ad9f	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ada0	85 36		sta $36			  	sta 	zTemp0
.ada2	86 37		stx $37				stx 	zTemp0+1
.ada4	a9 00		lda #$00			lda 	#0
.ada6	a2 08		ldx #$08			ldx 	#8
.ada8					_M88Loop:
.ada8	90 03		bcc $adad			bcc 	_M88NoAdd
.adaa	18		clc				clc
.adab	65 37		adc $37				adc 	zTemp0+1
.adad					_M88NoAdd:
.adad	6a		ror a				ror 	a
.adae	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.adb0	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.adb1	d0 f5		bne $ada8			bne 	_M88Loop
.adb3	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.adb5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a0bf					NSMNegate:
.a0bf	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a0c2	49 80		eor #$80			eor 	#NSBIsNegative
.a0c4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0c7	60		rts				rts
.a0c8					NSMNegateMantissa:
.a0c8	38		sec				sec
.a0c9	a9 00		lda #$00			lda 	#0
.a0cb	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a0ce	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0d1	a9 00		lda #$00			lda 	#0
.a0d3	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a0d6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0d9	a9 00		lda #$00			lda 	#0
.a0db	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a0de	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a0e1	a9 00		lda #$00			lda 	#0
.a0e3	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a0e6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a0e9	60		rts				rts
.a0ea					NSMShiftUpTwo:
.a0ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a0ed	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a0f0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0f3	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a0f6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a0f9	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a0fc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a0ff	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a102	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a105	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a108	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a10b	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a10e	60		rts				rts
.a10f					NSMSetZeroMantissaOnly:
.a10f	a9 00		lda #$00			lda 	#0
.a111	80 08		bra $a11b			bra 	NSMSetMantissa
.a113					NSMSetZero:
.a113	a9 00		lda #$00			lda 	#0
.a115					NSMSetByte:
.a115	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a118	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a11b					NSMSetMantissa:
.a11b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a11e	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a121	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a124	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a127	60		rts				rts
.a128					NSMShiftLeft:
.a128	18		clc				clc
.a129					NSMRotateLeft:
.a129	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a12c	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a12f	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a132	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a135	60		rts				rts
.a136					NSMShiftRight:
.a136	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a139	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a13c	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a13f	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a142	60		rts				rts
.a143					NSMIsZero:
.a143	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a146	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a149	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a14c	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a14f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.adb6					Assemble_ora:
.adb6	20 5e 88	jsr $885e		jsr	AssembleGroup1
>adb9	01					.byte $01
.adba					Assemble_and:
.adba	20 5e 88	jsr $885e		jsr	AssembleGroup1
>adbd	21					.byte $21
.adbe					Assemble_eor:
.adbe	20 5e 88	jsr $885e		jsr	AssembleGroup1
>adc1	41					.byte $41
.adc2					Assemble_adc:
.adc2	20 5e 88	jsr $885e		jsr	AssembleGroup1
>adc5	61					.byte $61
.adc6					Assemble_sta:
.adc6	20 5e 88	jsr $885e		jsr	AssembleGroup1
>adc9	81					.byte $81
.adca					Assemble_lda:
.adca	20 5e 88	jsr $885e		jsr	AssembleGroup1
>adcd	a1					.byte $a1
.adce					Assemble_cmp:
.adce	20 5e 88	jsr $885e		jsr	AssembleGroup1
>add1	c1					.byte $c1
.add2					Assemble_sbc:
.add2	20 5e 88	jsr $885e		jsr	AssembleGroup1
>add5	e1					.byte $e1
.add6					Assemble_asl:
.add6	20 65 88	jsr $8865		jsr	AssembleGroup2
>add9	02					.byte $02
>adda	75					.byte $75
.addb					Assemble_rol:
.addb	20 65 88	jsr $8865		jsr	AssembleGroup2
>adde	22					.byte $22
>addf	75					.byte $75
.ade0					Assemble_lsr:
.ade0	20 65 88	jsr $8865		jsr	AssembleGroup2
>ade3	42					.byte $42
>ade4	75					.byte $75
.ade5					Assemble_ror:
.ade5	20 65 88	jsr $8865		jsr	AssembleGroup2
>ade8	62					.byte $62
>ade9	75					.byte $75
.adea					Assemble_stx:
.adea	20 65 88	jsr $8865		jsr	AssembleGroup2
>aded	82					.byte $82
>adee	50					.byte $50
.adef					Assemble_ldx:
.adef	20 65 88	jsr $8865		jsr	AssembleGroup2
>adf2	a2					.byte $a2
>adf3	d0					.byte $d0
.adf4					Assemble_dec:
.adf4	20 65 88	jsr $8865		jsr	AssembleGroup2
>adf7	c2					.byte $c2
>adf8	55					.byte $55
.adf9					Assemble_inc:
.adf9	20 65 88	jsr $8865		jsr	AssembleGroup2
>adfc	e2					.byte $e2
>adfd	55					.byte $55
.adfe					Assemble_stz:
.adfe	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae01	60					.byte $60
>ae02	44					.byte $44
.ae03					Assemble_bit:
.ae03	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae06	20					.byte $20
>ae07	55					.byte $55
.ae08					Assemble_sty:
.ae08	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae0b	80					.byte $80
>ae0c	54					.byte $54
.ae0d					Assemble_ldy:
.ae0d	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae10	a0					.byte $a0
>ae11	d5					.byte $d5
.ae12					Assemble_cpy:
.ae12	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae15	c0					.byte $c0
>ae16	d4					.byte $d4
.ae17					Assemble_cpx:
.ae17	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae1a	e0					.byte $e0
>ae1b	d0					.byte $d0
.ae1c					Assemble_tsb:
.ae1c	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae1f	00					.byte $00
>ae20	50					.byte $50
.ae21					Assemble_trb:
.ae21	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae24	10					.byte $10
>ae25	50					.byte $50
.ae26					Assemble_jsr:
.ae26	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae29	14					.byte $14
>ae2a	10					.byte $10
.ae2b					Assemble_jmp:
.ae2b	20 65 88	jsr $8865		jsr	AssembleGroup2
>ae2e	40					.byte $40
>ae2f	10					.byte $10
.ae30					Assemble_bpl:
.ae30	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae33	10					.byte $10
.ae34					Assemble_bmi:
.ae34	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae37	30					.byte $30
.ae38					Assemble_bvc:
.ae38	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae3b	50					.byte $50
.ae3c					Assemble_bvs:
.ae3c	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae3f	70					.byte $70
.ae40					Assemble_bcc:
.ae40	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae43	90					.byte $90
.ae44					Assemble_bcs:
.ae44	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae47	b0					.byte $b0
.ae48					Assemble_bne:
.ae48	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae4b	d0					.byte $d0
.ae4c					Assemble_beq:
.ae4c	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae4f	f0					.byte $f0
.ae50					Assemble_bra:
.ae50	20 b6 88	jsr $88b6		jsr	AssembleGroup3
>ae53	80					.byte $80
.ae54					Assemble_brk:
.ae54	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae57	00					.byte $00
.ae58					Assemble_php:
.ae58	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae5b	08					.byte $08
.ae5c					Assemble_clc:
.ae5c	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae5f	18					.byte $18
.ae60					Assemble_plp:
.ae60	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae63	28					.byte $28
.ae64					Assemble_sec:
.ae64	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae67	38					.byte $38
.ae68					Assemble_rti:
.ae68	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae6b	40					.byte $40
.ae6c					Assemble_pha:
.ae6c	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae6f	48					.byte $48
.ae70					Assemble_cli:
.ae70	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae73	58					.byte $58
.ae74					Assemble_phy:
.ae74	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae77	5a					.byte $5a
.ae78					Assemble_rts:
.ae78	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae7b	60					.byte $60
.ae7c					Assemble_pla:
.ae7c	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae7f	68					.byte $68
.ae80					Assemble_sei:
.ae80	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae83	78					.byte $78
.ae84					Assemble_ply:
.ae84	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae87	7a					.byte $7a
.ae88					Assemble_dey:
.ae88	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae8b	88					.byte $88
.ae8c					Assemble_txa:
.ae8c	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae8f	8a					.byte $8a
.ae90					Assemble_tya:
.ae90	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae93	98					.byte $98
.ae94					Assemble_txs:
.ae94	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae97	9a					.byte $9a
.ae98					Assemble_tay:
.ae98	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae9b	a8					.byte $a8
.ae9c					Assemble_tax:
.ae9c	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>ae9f	aa					.byte $aa
.aea0					Assemble_clv:
.aea0	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aea3	b8					.byte $b8
.aea4					Assemble_tsx:
.aea4	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aea7	ba					.byte $ba
.aea8					Assemble_iny:
.aea8	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aeab	c8					.byte $c8
.aeac					Assemble_dex:
.aeac	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aeaf	ca					.byte $ca
.aeb0					Assemble_cld:
.aeb0	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aeb3	d8					.byte $d8
.aeb4					Assemble_phx:
.aeb4	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aeb7	da					.byte $da
.aeb8					Assemble_stp:
.aeb8	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aebb	db					.byte $db
.aebc					Assemble_inx:
.aebc	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aebf	e8					.byte $e8
.aec0					Assemble_nop:
.aec0	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aec3	ea					.byte $ea
.aec4					Assemble_sed:
.aec4	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aec7	f8					.byte $f8
.aec8					Assemble_plx:
.aec8	20 ec 88	jsr $88ec		jsr	AssembleGroup4
>aecb	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.aecc					DecimalScalarTable:
>aecc	66 66 66 66				.dword $66666666 ; 0.1
>aed0	de					.byte $de
>aed1	1f 85 eb 51				.dword $51eb851f ; 0.01
>aed5	db					.byte $db
>aed6	4c 37 89 41				.dword $4189374c ; 0.001
>aeda	d8					.byte $d8
>aedb	ac 8b db 68				.dword $68db8bac ; 0.0001
>aedf	d4					.byte $d4
>aee0	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>aee4	d1					.byte $d1
>aee5	83 de 1b 43				.dword $431bde83 ; 1e-06
>aee9	ce					.byte $ce
>aeea	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aeee	ca					.byte $ca
>aeef	89 3b e6 55				.dword $55e63b89 ; 1e-08
>aef3	c7					.byte $c7
>aef4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>aef8	c4					.byte $c4
>aef9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>aefd	c0					.byte $c0
>aefe	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>af02	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.af03					SyntaxError:
.af03	a9 02		lda #$02		lda	#2
.af05	4c 5b 95	jmp $955b		jmp	ErrorHandler
.af08					RangeError:
.af08	a9 04		lda #$04		lda	#4
.af0a	4c 5b 95	jmp $955b		jmp	ErrorHandler
.af0d					TypeError:
.af0d	a9 05		lda #$05		lda	#5
.af0f	4c 5b 95	jmp $955b		jmp	ErrorHandler
.af12					ArgumentError:
.af12	a9 07		lda #$07		lda	#7
.af14	4c 5b 95	jmp $955b		jmp	ErrorHandler
.af17					NotDoneError:
.af17	a9 0c		lda #$0c		lda	#12
.af19	4c 5b 95	jmp $955b		jmp	ErrorHandler
.af1c					ErrorText:
>af1c	42 72 65 61 6b 00			.text	"Break",0
>af22	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>af2a	72 72 6f 72 00
>af2f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>af37	20 62 79 20 7a 65 72 6f 00
>af40	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>af48	61 6e 67 65 00
>af4d	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>af55	6d 61 74 63 68 00
>af5b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>af63	65 6d 6f 72 79 00
>af69	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>af71	61 72 67 75 6d 65 6e 74 00
>af7a	53 74 6f 70 00				.text	"Stop",0
>af7f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>af87	6f 6f 20 6c 6f 6e 67 00
>af8f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>af97	6e 20 66 61 69 6c 65 64 00
>afa0	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>afa8	61 74 61 00
>afac	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>afb4	65 6e 74 65 64 00
>afba	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>afc2	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>afce	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>afd6	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>afe3	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>afeb	74 68 6f 75 74 20 52 65 70 65 61 74 00
>aff8	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b000	68 6f 75 74 20 57 68 69 6c 65 00
>b00b	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b013	68 6f 75 74 20 46 6f 72 00
>b01c	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b024	61 63 6b 20 66 75 6c 6c 00
>b02d	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b035	75 63 74 75 72 65 00
>b03c	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b044	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b051	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b059	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b067	41 72 72 61 79 20 73 69			.text	"Array size",0
>b06f	7a 65 00
>b072	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b07a	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b082	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1501."
>b08a	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>b09a	32 2e 20 42 75 69 6c 64 20 31 35 30 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b0a8					EXTPrintCharacter:
.b0a8	48		pha				pha
.b0a9	da		phx				phx
.b0aa	5a		phy				phy
.b0ab	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b0ae	7a		ply				ply
.b0af	fa		plx				plx
.b0b0	68		pla				pla
.b0b1	60		rts				rts
.b0b2					EXTInputSingleCharacter:
.b0b2	da		phx				phx
.b0b3	5a		phy				phy
.b0b4					_EISCWait:
.b0b4	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b0b7	c9 00		cmp #$00			cmp 	#0
.b0b9	f0 f9		beq $b0b4			beq 	_EISCWait
.b0bb	7a		ply				ply
.b0bc	fa		plx				plx
.b0bd	60		rts				rts
.b0be					EXTInputLine:
.b0be	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b0c0					_ILLoop:
.b0c0	da		phx				phx 								; read character in
.b0c1	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b0c4	fa		plx				plx
.b0c5	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b0c7	f0 12		beq $b0db			beq 	_ILBackspace
.b0c9	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b0cb	f0 15		beq $b0e2			beq 	_ILExit
.b0cd	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b0cf	90 ef		bcc $b0c0			bcc 	_ILLoop
.b0d1	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b0d3	f0 eb		beq $b0c0			beq 	_ILLoop
.b0d5	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b0d8	e8		inx				inx
.b0d9	80 e5		bra $b0c0			bra 	_ILLoop
.b0db					_ILBackspace:
.b0db	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b0dd	f0 e1		beq $b0c0			beq 	_ILLoop
.b0df	ca		dex				dex 								; back one.
.b0e0	80 de		bra $b0c0			bra 	_ILLoop
.b0e2					_ILExit:
.b0e2	20 a8 b0	jsr $b0a8			jsr 	EXTPrintCharacter
.b0e5	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b0e8	60		rts				rts
.b0e9					EXTBreakCheck:
.b0e9	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b0ec					MemoryDeleteLine:
.b0ec	20 0b b1	jsr $b10b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b0ef	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b0f1	a8		tay				tay
.b0f2					_MDDLLoop:
.b0f2	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b0f4	92 30		sta ($30)			sta 	(codePtr)
.b0f6	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b0f8	c5 3a		cmp $3a				cmp 	zTemp2
.b0fa	d0 07		bne $b103			bne 	_MDLDLNext
.b0fc	a5 31		lda $31				lda 	codePtr+1
.b0fe	c5 3b		cmp $3b				cmp 	zTemp2+1
.b100	d0 01		bne $b103			bne 	_MDLDLNext
.b102					_MDDLExit:
.b102	60		rts				rts
.b103					_MDLDLNext:
.b103	e6 30		inc $30				inc 	codePtr						; next byte
.b105	d0 eb		bne $b0f2			bne 	_MDDLLoop
.b107	e6 31		inc $31				inc 	codePtr+1
.b109	80 e7		bra $b0f2			bra 	_MDDLLoop
.b10b					IMemoryFindEnd:
.b10b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b10d	85 3a		sta $3a				sta 	0+zTemp2
.b10f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b111	85 3b		sta $3b				sta 	1+zTemp2
.b113					_MDLFELoop:
.b113	b2 3a		lda ($3a)			lda 	(zTemp2)
.b115	f0 0b		beq $b122			beq 	_MDLFEExit
.b117	18		clc				clc
.b118	65 3a		adc $3a				adc 	zTemp2
.b11a	85 3a		sta $3a				sta 	zTemp2
.b11c	90 f5		bcc $b113			bcc 	_MDLFELoop
.b11e	e6 3b		inc $3b				inc 	zTemp2+1
.b120	80 f1		bra $b113			bra 	_MDLFELoop
.b122					_MDLFEExit:
.b122	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b123					MemoryInsertLine:
.b123	08		php				php
.b124	20 0b b1	jsr $b10b			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b127	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b129	1a		inc a				inc 	a
.b12a	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b12c	b0 36		bcs $b164			bcs 	_MDLIError
.b12e	28		plp				plp
.b12f	90 08		bcc $b139			bcc 	_MDLIFound
.b131	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b133	85 30		sta $30				sta 	codePtr
.b135	a5 3b		lda $3b				lda 	zTemp2+1
.b137	85 31		sta $31				sta 	codePtr+1
.b139					_MDLIFound:
.b139	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b13c	a8		tay				tay
.b13d					_MDLIInsert:
.b13d	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b13f	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b141	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b143	c5 3a		cmp $3a				cmp 	zTemp2
.b145	d0 06		bne $b14d			bne 	_MDLINext
.b147	a5 31		lda $31				lda 	codePtr+1
.b149	c5 3b		cmp $3b				cmp 	zTemp2+1
.b14b	f0 0a		beq $b157			beq 	_MDLIHaveSpace
.b14d					_MDLINext:
.b14d	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b14f	d0 02		bne $b153			bne 	_MDLINoBorrow
.b151	c6 3b		dec $3b				dec 	zTemp2+1
.b153					_MDLINoBorrow:
.b153	c6 3a		dec $3a				dec 	zTemp2
.b155	80 e6		bra $b13d			bra 	_MDLIInsert
.b157					_MDLIHaveSpace:
.b157	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b15a	88		dey				dey 								; from offset-1 to 0
.b15b					_MDLICopy:
.b15b	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b15e	91 30		sta ($30),y			sta 	(codePtr),y
.b160	88		dey				dey
.b161	10 f8		bpl $b15b			bpl 	_MDLICopy
.b163	60		rts				rts
.b164					_MDLIError:
.b164	a9 06		lda #$06		lda	#6
.b166	4c 5b 95	jmp $955b		jmp	ErrorHandler
.b169					MDLAppendLine:
.b169	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b16b	85 36		sta $36				sta 	zTemp0
.b16d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b16f	85 38		sta $38				sta 	0+zTemp1
.b171	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b173	85 39		sta $39				sta 	1+zTemp1
.b175	b2 38		lda ($38)			lda 	(zTemp1)
.b177	d0 0a		bne $b183			bne 	_MDLANoInitialise
.b179	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b17b	8d 61 06	sta $0661			sta 	0+AppendPointer
.b17e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b180	8d 62 06	sta $0662			sta 	1+AppendPointer
.b183					_MDLANoInitialise:
.b183	18		clc				clc
.b184	ad 61 06	lda $0661			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b187	85 38		sta $38				sta 	zTemp1
.b189	72 36		adc ($36)			adc 	(zTemp0)
.b18b	8d 61 06	sta $0661			sta 	AppendPointer
.b18e	ad 62 06	lda $0662			lda 	AppendPointer+1
.b191	85 39		sta $39				sta 	zTemp1+1
.b193	69 00		adc #$00			adc 	#0
.b195	8d 62 06	sta $0662			sta 	AppendPointer+1
.b198	a0 00		ldy #$00			ldy 	#0
.b19a					_MDLACopy:
.b19a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b19c	91 38		sta ($38),y			sta 	(zTemp1),y
.b19e	c8		iny				iny
.b19f	98		tya				tya
.b1a0	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b1a2	d0 f6		bne $b19a			bne 	_MDLACopy
.b1a4	a9 00		lda #$00			lda 	#0 							; end of program.
.b1a6	91 38		sta ($38),y			sta 	(zTemp1),y
.b1a8	60		rts				rts
.0661					AppendPointer:
>0661							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a150					MemoryNew:
.a150	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a152	85 30		sta $30				sta 	codePtr
.a154	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a156	85 31		sta $31				sta 	codePtr+1
.a158	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a15a	92 30		sta ($30)			sta 	(codePtr)
.a15c	60		rts				rts
.a15d					MemoryInline:
.a15d	98		tya				tya 								; put address into stack,x
.a15e	18		clc				clc
.a15f	65 30		adc $30				adc 	codePtr
.a161	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a164	a5 31		lda $31				lda 	codePtr+1
.a166	69 00		adc #$00			adc 	#0
.a168	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a16b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a16e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a171	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a172					MemorySearch:
.a172	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a174	86 37		stx $37				stx 	zTemp0+1
.a176	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a178	85 30		sta $30				sta 	codePtr
.a17a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a17c	85 31		sta $31				sta 	codePtr+1
.a17e					_MTAXLoop:
.a17e	b2 30		lda ($30)			lda 	(codePtr)
.a180	18		clc				clc
.a181	f0 21		beq $a1a4			beq 	_MTAXExit 					; reached end, exit with CC.
.a183	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a185	b1 30		lda ($30),y			lda 	(codePtr),y
.a187	38		sec				sec
.a188	e5 36		sbc $36				sbc 	zTemp0
.a18a	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a18c	c8		iny				iny 								; do the MSB
.a18d	b1 30		lda ($30),y			lda 	(codePtr),y
.a18f	e5 37		sbc $37				sbc 	zTemp0+1
.a191	05 38		ora $38				ora 	zTemp1
.a193	f0 0f		beq $a1a4			beq 	_MTAXExit	 				; found
.a195	b0 0d		bcs $a1a4			bcs 	_MTAXExit 					; current < required exit
.a197	18		clc				clc
.a198	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a19a	65 30		adc $30				adc 	codePtr
.a19c	85 30		sta $30				sta 	codePtr
.a19e	90 02		bcc $a1a2			bcc 	_CREExit
.a1a0	e6 31		inc $31				inc 	codePtr+1
.a1a2					_CREExit:
.a1a2	80 da		bra $a17e			bra 	_MTAXLoop
.a1a4					_MTAXExit:
.a1a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a1a5					StackPushByte:
.a1a5	48		pha				pha 								; save byte
.a1a6	a5 34		lda $34				lda 	BasicStack
.a1a8	d0 09		bne $a1b3			bne 	_SPBNoBorrow
.a1aa	c6 35		dec $35				dec 	BasicStack+1
.a1ac	48		pha				pha
.a1ad	a5 35		lda $35				lda 	BasicStack+1
.a1af	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a1b1	90 06		bcc $a1b9			bcc 	_SPBMemory
.a1b3					_SPBNoBorrow:
.a1b3	c6 34		dec $34				dec 	BasicStack
.a1b5	68		pla				pla 								; get back and write
.a1b6	92 34		sta ($34)			sta 	(BasicStack)
.a1b8	60		rts				rts
.a1b9					_SPBMemory:
.a1b9	a9 12		lda #$12		lda	#18
.a1bb	4c 5b 95	jmp $955b		jmp	ErrorHandler
.a1be					StackPopByte:
.a1be	b2 34		lda ($34)			lda 	(BasicStack)
.a1c0	e6 34		inc $34				inc 	BasicStack
.a1c2	d0 02		bne $a1c6			bne 	_SPBNoCarry
.a1c4	e6 35		inc $35				inc 	BasicStack+1
.a1c6					_SPBNoCarry:
.a1c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a1c7					StackOpen:
.a1c7	48		pha				pha 								; save frame byte
.a1c8	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a1ca	0a		asl a				asl 	a 							; claim twice this for storage
.a1cb	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a1cd	38		sec				sec 								; so basically subtracting from
.a1ce	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a1d0	85 34		sta $34				sta 	basicStack
.a1d2	b0 08		bcs $a1dc			bcs 	_SONoBorrow
.a1d4	c6 35		dec $35				dec 	basicStack+1
.a1d6	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a1d8	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a1da	90 04		bcc $a1e0			bcc 	_SOMemory
.a1dc					_SONoBorrow:
.a1dc	68		pla				pla 								; get marker back and write at TOS
.a1dd	92 34		sta ($34)			sta 	(basicStack)
.a1df	60		rts				rts
.a1e0					_SOMemory:
.a1e0	a9 12		lda #$12		lda	#18
.a1e2	4c 5b 95	jmp $955b		jmp	ErrorHandler
.a1e5					StackClose:
.a1e5	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a1e7	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a1e9	0a		asl a				asl 	a 							; claim twice this.
.a1ea	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a1ec	85 34		sta $34				sta 	basicStack
.a1ee	90 02		bcc $a1f2			bcc 	_SCExit
.a1f0	e6 35		inc $35				inc 	basicStack+1
.a1f2					_SCExit:
.a1f2	60		rts				rts
.a1f3					StackCheckFrame:
.a1f3	48		pha				pha
.a1f4					_StackRemoveLocals:
.a1f4	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a1f6	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a1f8	b0 05		bcs $a1ff			bcs 	_SCNoLocal
.a1fa	20 c4 a8	jsr $a8c4			jsr 	LocalPopValue
.a1fd	80 f5		bra $a1f4			bra 	_StackRemoveLocals
.a1ff					_SCNoLocal:
.a1ff	68		pla				pla
.a200	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a202	29 f0		and #$f0			and 	#$F0 						; check type bits
.a204	d0 01		bne $a207			bne 	_SCFError 					; different, we have structures mixed up
.a206	60		rts				rts
.a207					_SCFError:
.a207	8a		txa				txa 								; report error X
.a208	4c 5b 95	jmp $955b			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a20b					STKSaveCodePosition:
.a20b	5a		phy				phy
.a20c	98		tya				tya 								; save Y
.a20d	a0 05		ldy #$05			ldy 	#5
.a20f	91 34		sta ($34),y			sta 	(basicStack),y
.a211	88		dey				dey 								; save Code Pointer
.a212					_STKSaveLoop:
.a212	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a215	91 34		sta ($34),y			sta 	(basicStack),y
.a217	88		dey				dey
.a218	d0 f8		bne $a212			bne 	_STKSaveLoop
.a21a	7a		ply				ply
.a21b	60		rts				rts
.a21c					STKLoadCodePosition:
.a21c	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a21e					_STKLoadLoop:
.a21e	b1 34		lda ($34),y			lda 	(basicStack),y
.a220	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a223	c8		iny				iny
.a224	c0 05		cpy #$05			cpy 	#5
.a226	d0 f6		bne $a21e			bne 	_STKLoadLoop
.a228	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a22a	a8		tay				tay
.a22b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a22c					StackReset:
.a22c	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a22e	85 34		sta $34				sta 	0+basicStack
.a230	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a232	85 35		sta $35				sta 	1+basicStack
.a234	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a236	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a238	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b1a9					StringConcrete:
.b1a9	5a		phy				phy 								; save position on stack
.b1aa	20 22 9e	jsr $9e22			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1ad	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b1b0	85 38		sta $38				sta 	zTemp1
.b1b2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b1b5	85 39		sta $39				sta 	zTemp1+1
.b1b7	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b1b9					_SALength:
.b1b9	c8		iny				iny
.b1ba	b1 38		lda ($38),y			lda 	(zTemp1),y
.b1bc	d0 fb		bne $b1b9			bne 	_SALength
.b1be	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b1c0	b0 3f		bcs $b201			bcs 	_SALengthError
.b1c2	98		tya				tya 				 				; length of the new string
.b1c3	18		clc				clc
.b1c4	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b1c6	90 02		bcc $b1ca			bcc 	_SAHaveLength
.b1c8	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b1ca					_SAHaveLength:
.b1ca	48		pha				pha 								; save length.
.b1cb	38		sec				sec
.b1cc	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b1ce	6d 8e 04	adc $048e			adc 	StringMemory
.b1d1	8d 8e 04	sta $048e			sta 	StringMemory
.b1d4	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b1d6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b1d9	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b1db	6d 8f 04	adc $048f			adc 	StringMemory+1
.b1de	8d 8f 04	sta $048f			sta 	StringMemory+1
.b1e1	85 3b		sta $3b				sta 	zTemp2+1
.b1e3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b1e6	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b1e7	38		sec				sec
.b1e8	e9 03		sbc #$03			sbc 	#3
.b1ea	92 3a		sta ($3a)			sta 	(zTemp2)
.b1ec	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b1ee	a0 01		ldy #$01			ldy 	#1
.b1f0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b1f2					_SACopyNewString:
.b1f2	a0 00		ldy #$00			ldy 	#0
.b1f4					_SACopyNSLoop:
.b1f4	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b1f6	c8		iny				iny 								; write two on in string storage
.b1f7	c8		iny				iny
.b1f8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b1fa	88		dey				dey 								; this makes it one one.
.b1fb	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b1fd	d0 f5		bne $b1f4			bne 	_SACopyNSLoop
.b1ff	7a		ply				ply
.b200	60		rts				rts
.b201					_SALengthError:
.b201	a9 09		lda #$09		lda	#9
.b203	4c 5b 95	jmp $955b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b206					StringSystemInitialise:
.b206	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b208	8d 8e 04	sta $048e			sta 	0+StringMemory
.b20b	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b20d	8d 8f 04	sta $048f			sta 	1+StringMemory
.b210	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b213	60		rts				rts
.b214					StringSpaceInitialise:
.b214	20 22 9e	jsr $9e22			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b217	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b219	8d 90 04	sta $0490			sta 	StringInitialised
.b21c	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b21f	8d 91 04	sta $0491			sta 	StringTempPointer
.b222	ad 8f 04	lda $048f			lda 	StringMemory+1
.b225	3a		dec a				dec 	a
.b226	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b229	60		rts				rts
.b22a					StringTempAllocate:
.b22a	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b22c	b0 35		bcs $b263			bcs 	_STALength
.b22e	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b231	30 05		bmi $b238			bmi 	_STAAllocate
.b233	48		pha				pha 								; save value to subtract.
.b234	20 14 b2	jsr $b214			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b237	68		pla				pla 								; restore it
.b238					_STAAllocate:
.b238	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b23a	18		clc				clc  								; deliberate allows one more
.b23b	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b23e	8d 91 04	sta $0491			sta 	StringTempPointer
.b241	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b244	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b246	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b249	69 ff		adc #$ff			adc 	#$FF
.b24b	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b24e	85 3d		sta $3d				sta 	zsTemp+1
.b250	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b253	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b256	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b259	a9 10		lda #$10			lda 	#NSTString
.b25b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b25e	a9 00		lda #$00			lda 	#0 							; clear the target string
.b260	92 3c		sta ($3c)			sta 	(zsTemp)
.b262	60		rts				rts
.b263					_STALength:
.b263	a9 09		lda #$09		lda	#9
.b265	4c 5b 95	jmp $955b		jmp	ErrorHandler
.b268					StringTempWrite:
.b268	48		pha				pha
.b269	92 3c		sta ($3c)			sta 	(zsTemp)
.b26b	e6 3c		inc $3c				inc 	zsTemp
.b26d	d0 02		bne $b271			bne 	_STWNoCarry
.b26f	e6 3d		inc $3d				inc 	zsTemp+1
.b271					_STWNoCarry:
.b271	a9 00		lda #$00			lda 	#0
.b273	92 3c		sta ($3c)			sta 	(zsTemp)
.b275	68		pla				pla
.b276	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a239					BackloadProgram:
.a239	a2 ff		ldx #$ff			ldx 	#$FF
.a23b	20 63 a2	jsr $a263			jsr 	BLReadByte
.a23e	30 1f		bmi $a25f			bmi 	_BPExit
.a240					_BPCopy:
.a240	e8		inx				inx  								; copy byte in
.a241	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a244	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a247	20 63 a2	jsr $a263			jsr 	BLReadByte 					; read next byte
.a24a	30 0a		bmi $a256			bmi 	_BPEndLine 					; -ve = EOL
.a24c	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a24e	d0 02		bne $a252			bne 	_BPNotTab
.a250	a9 20		lda #$20			lda 	#' '
.a252					_BPNotTab:
.a252	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a254	b0 ea		bcs $a240			bcs 	_BPCopy
.a256					_BPEndLine:
.a256	20 15 a6	jsr $a615			jsr 	TokeniseLine 				; tokenise the line.
.a259	38		sec				sec 								; append not insert
.a25a	20 23 b1	jsr $b123			jsr 	MemoryInsertLine 			; append to current program
.a25d	80 da		bra $a239			bra 	BackloadProgram
.a25f					_BPExit:
.a25f	20 64 8b	jsr $8b64			jsr 	ClearCommand 				; clear variables etc.
.a262	60		rts				rts
.a263					BLReadByte:
.a263					_BLLoad:
.a263	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a266	ee 64 a2	inc $a264			inc 	_BLLoad+1
.a269	d0 03		bne $a26e			bne 	_BLNoCarry
.a26b	ee 65 a2	inc $a265			inc 	_BLLoad+2
.a26e					_BLNoCarry:
.a26e	c9 00		cmp #$00			cmp 	#0
.a270	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a271					TokeniseSearchTable:
.a271	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a273	85 36		sta $36				sta 	zTemp0
.a275	a0 00		ldy #$00			ldy 	#0
.a277	a9 80		lda #$80			lda 	#$80 						; token #
.a279	85 38		sta $38				sta 	zTemp1
.a27b					_TSTLoop:
.a27b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a27d	30 49		bmi $a2c8			bmi 	_TSTFail 					; -ve = end of table
.a27f	f0 2e		beq $a2af			beq 	_TSTNext 					; zero, check next it's a dummy
.a281	c8		iny				iny 								; get the hash
.a282	b1 36		lda ($36),y			lda 	(zTemp0),y
.a284	88		dey				dey
.a285	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a288	d0 25		bne $a2af			bne 	_TSTNext
.a28a	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a28d	38		sec				sec
.a28e	ed 80 04	sbc $0480			sbc 	identStart
.a291	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a293	d0 1a		bne $a2af			bne 	_TSTNext
.a295	5a		phy				phy 								; save Y , we might fail
.a296	c8		iny				iny 								; point to text
.a297	c8		iny				iny
.a298	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a29b					_TSTCompareName:
.a29b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a29e	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a2a0	d0 0c		bne $a2ae			bne 	_TSTNextPullY 				; fail, pullY and do next
.a2a2	e8		inx				inx
.a2a3	c8		iny				iny
.a2a4	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a2a7	d0 f2		bne $a29b			bne 	_TSTCompareName
.a2a9	7a		ply				ply 								; throw Y
.a2aa	a5 38		lda $38				lda 	zTemp1 						; get token #
.a2ac	38		sec				sec 								; return with CS = passed.
.a2ad	60		rts				rts
.a2ae					_TSTNextPullY:
.a2ae	7a		ply				ply 								; restore current, fall through.
.a2af					_TSTNext:
.a2af	e6 38		inc $38				inc 	zTemp1 						; token counter
.a2b1	98		tya				tya
.a2b2	18		clc				clc
.a2b3	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a2b5	1a		inc a				inc 	a 							; +1
.a2b6	1a		inc a				inc 	a 							; +2
.a2b7	a8		tay				tay
.a2b8	10 c1		bpl $a27b			bpl 	_TSTLoop 					; if Y < $80 loop back
.a2ba	98		tya				tya 								; add Y to zTemp0 and reset Y
.a2bb	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a2bd	18		clc				clc  								; but have tables > 255 bytes
.a2be	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a2c0	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a2c2	90 b7		bcc $a27b			bcc 	_TSTLoop
.a2c4	e6 37		inc $37				inc 	zTemp0+1
.a2c6	80 b3		bra $a27b			bra 	_TSTLoop
.a2c8					_TSTFail:
.a2c8	18		clc				clc
.a2c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a2ca					KeywordSet0:
>a2ca	00 65					.text	0,$65,""               ; $80 !0:EOF
>a2cc	00 58					.text	0,$58,""               ; $81 !1:SH1
>a2ce	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a2d0	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a2d6	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a2de	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a2e4	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a2eb	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a2f3	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a2fa	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a301	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a307	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a30f	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a317	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a31d	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a324	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a32a	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a32f	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a333	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a33b	28
>a33c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a344	28
>a345	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a34b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a351	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a357	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a35e	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a366	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a36c	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a372	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a377	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a37b	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a381	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a389	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a390	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a397	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a39f	43
>a3a0	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a3a6	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a3ac	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a3b3	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a3b9	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a6 CALL
>a3bf	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a7 CIRCLE
>a3c7	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a8 CLS
>a3cc	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $a9 COLOR
>a3d3	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $aa COLOUR
>a3db	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ab DATA
>a3e1	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ac DIM
>a3e6	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ad DOWNTO
>a3ee	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $ae ELSE
>a3f4	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $af GFX
>a3f9	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b0 GOSUB
>a400	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b1 GOTO
>a406	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b2 HERE
>a40c	04 1a 48 49 44 45			.text	4,$1a,"HIDE"           ; $b3 HIDE
>a412	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b4 LET
>a417	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b5 LINE
>a41d	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b6 LOCAL
>a424	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b7 OUTLINE
>a42c	45
>a42d	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $b8 PRINT
>a434	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $b9 READ
>a43a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $ba RECT
>a440	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bb REM
>a445	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bc RETURN
>a44d	05 68 53 43 41 4c 45			.text	5,$68,"SCALE"          ; $bd SCALE
>a454	04 41 53 48 4f 57			.text	4,$41,"SHOW"           ; $be SHOW
>a45a	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $bf SOLID
>a461	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c0 SPRITE
>a469	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c1 TEXT
>a46f	02 a3 54 4f				.text	2,$a3,"TO"             ; $c2 TO
>a473	ff					.text	$FF
.a474					KeywordSet1:
>a474	00 65					.text	0,$65,""               ; $80 !0:EOF
>a476	00 58					.text	0,$58,""               ; $81 !1:SH1
>a478	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a47a	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a482	4c 45
>a484	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a48c	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a494	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $86 CLEAR
>a49b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $87 END
>a4a0	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $88 LIST
>a4a6	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $89 NEW
>a4ab	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8a RESTORE
>a4b3	45
>a4b4	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8b RUN
>a4b9	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8c SPRITES
>a4c1	53
>a4c2	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8d STOP
>a4c8	ff					.text	$FF
.a4c9					KeywordSet2:
>a4c9	00 65					.text	0,$65,""               ; $80 !0:EOF
>a4cb	00 58					.text	0,$58,""               ; $81 !1:SH1
>a4cd	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a4cf	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a4d4	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a4d9	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a4de	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a4e3	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a4e8	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a4ed	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a4f2	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a4f7	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a4fc	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a501	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a506	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a50b	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a510	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a515	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a51a	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a51f	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a524	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a529	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a52e	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a533	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a538	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a53d	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a542	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a547	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a54c	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a551	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a556	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a55b	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a560	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a565	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a56a	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a56f	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a574	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a579	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a57e	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a583	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a588	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a58d	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a592	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a597	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a59c	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a5a1	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a5a6	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a5ab	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a5b0	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a5b5	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a5ba	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a5bf	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a5c4	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a5c9	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a5ce	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a5d3	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a5d8	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a5dd	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a5e2	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a5e7	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a5ec	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a5f1	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a5f6	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a5fb	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a600	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a605	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a60a	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a60f	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a614	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a615					TokeniseLine:
.a615	20 9d a7	jsr $a79d			jsr 	FixLineBufferCase 			; fix line case
.a618	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a61a	8d a6 04	sta $04a6			sta 	tokenOffset
.a61d	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a620	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a623	a2 ff		ldx #$ff			ldx 	#$FF
.a625					_TKFindFirst:
.a625	e8		inx				inx
.a626	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a629	f0 79		beq $a6a4			beq 	_TKExit
.a62b	c9 20		cmp #$20			cmp 	#' '
.a62d	90 f6		bcc $a625			bcc 	_TKFindFirst
.a62f	c9 30		cmp #$30			cmp 	#'0'
.a631	90 07		bcc $a63a			bcc 	_TKNoLineNumber
.a633	c9 3a		cmp #$3a			cmp 	#'9'+1
.a635	b0 03		bcs $a63a			bcs 	_TKNoLineNumber
.a637	20 c7 a7	jsr $a7c7			jsr 	TokeniseExtractLineNumber
.a63a					_TKNoLineNumber:
.a63a					_TKTokeniseLoop:
.a63a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a63d	f0 65		beq $a6a4			beq 	_TKExit
.a63f	e8		inx				inx
.a640	c9 20		cmp #$20			cmp 	#' '
.a642	f0 f6		beq $a63a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a644	ca		dex				dex 								; undo last get, A contains character, X is position.
.a645	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a647	f0 61		beq $a6aa			beq 	_TKTokeniseIdentifier
.a649	c9 41		cmp #$41			cmp 	#'A'
.a64b	90 04		bcc $a651			bcc 	_TKTokenisePunctuation
.a64d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a64f	90 59		bcc $a6aa			bcc 	_TKTokeniseIdentifier
.a651					_TKTokenisePunctuation:
.a651	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a653	f0 27		beq $a67c			beq 	_TKString
.a655	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a657	f0 28		beq $a681			beq 	_TKHexConstant
.a659	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a65b	f0 29		beq $a686			beq 	_TKCheckDouble
.a65d	c9 3e		cmp #$3e			cmp 	#'>'
.a65f	f0 25		beq $a686			beq 	_TKCheckDouble
.a661					_TKStandardPunctuation:
.a661	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a664	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a666	90 0e		bcc $a676			bcc 	_TKNoShift
.a668	48		pha				pha 								; save
.a669	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a66b	85 36		sta $36				sta 	zTemp0
.a66d	68		pla				pla
.a66e	29 20		and #$20			and 	#32 						; bit 5
.a670	4a		lsr a				lsr 	a 							; shift into bit 3
.a671	4a		lsr a				lsr 	a
.a672	05 36		ora $36				ora 	zTemp0
.a674	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a676					_TKNoShift:
.a676	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte 			; write the punctuation character
.a679	e8		inx				inx 								; consume the character
.a67a	80 be		bra $a63a			bra 	_TKTokeniseLoop 			; and loop round again.
.a67c					_TKString:
.a67c	20 2c a7	jsr $a72c			jsr 	TokeniseString
.a67f	80 b9		bra $a63a			bra 	_TKTokeniseLoop
.a681					_TKHexConstant:
.a681	20 67 a7	jsr $a767			jsr 	TokeniseHexConstant
.a684	80 b4		bra $a63a			bra 	_TKTokeniseLoop
.a686					_TKCheckDouble:
.a686	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a689	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a68b	90 d4		bcc $a661			bcc 	_TKStandardPunctuation
.a68d	c9 3f		cmp #$3f			cmp 	#'>'+1
.a68f	b0 d0		bcs $a661			bcs 	_TKStandardPunctuation
.a691	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a694	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a696	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a697	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a69a	38		sec				sec
.a69b	e9 3c		sbc #$3c			sbc 	#'<'
.a69d	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a6a0	e8		inx				inx 								; consume both
.a6a1	e8		inx				inx
.a6a2	80 96		bra $a63a			bra 	_TKTokeniseLoop
.a6a4	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a6a6	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a6a9	60		rts				rts
.a6aa					_TKTokeniseIdentifier:
.a6aa	8e 80 04	stx $0480			stx 	identStart 					; save start
.a6ad	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a6b0					_TKCheckLoop:
.a6b0	e8		inx				inx 								; look at next, we know first is identifier.
.a6b1	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a6b4	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a6b6	f0 f8		beq $a6b0			beq 	_TKCheckLoop
.a6b8	c9 30		cmp #$30			cmp	 	#"0"
.a6ba	90 0c		bcc $a6c8			bcc 	_TKEndIdentifier
.a6bc	c9 3a		cmp #$3a			cmp 	#"9"+1
.a6be	90 f0		bcc $a6b0			bcc 	_TKCheckLoop
.a6c0	c9 41		cmp #$41			cmp	 	#"A"
.a6c2	90 04		bcc $a6c8			bcc 	_TKEndIdentifier
.a6c4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a6c6	90 e8		bcc $a6b0			bcc 	_TKCheckLoop
.a6c8					_TKEndIdentifier:
.a6c8	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a6cb	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a6cd	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a6cf	f0 06		beq $a6d7			beq 	_TKHasTypeCharacter
.a6d1	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a6d3	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a6d5	d0 07		bne $a6de			bne 	_TKNoTypeCharacter
.a6d7					_TKHasTypeCharacter:
.a6d7	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a6da	e8		inx				inx 								; read next
.a6db	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a6de					_TKNoTypeCharacter:
.a6de	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a6e0	d0 09		bne $a6eb			bne 	_TKNoArray
.a6e2	e8		inx				inx 								; skip the (
.a6e3	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a6e6	09 04		ora #$04			ora 	#$04
.a6e8	8d 84 04	sta $0484			sta 	identTypeByte
.a6eb					_TKNoArray:
.a6eb	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a6ee	20 88 a7	jsr $a788			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a6f1	a0 a2		ldy #$a2			ldy 	#(KeywordSet0) >> 8
.a6f3	a9 ca		lda #$ca			lda 	#(KeywordSet0) & $FF
.a6f5	20 71 a2	jsr $a271			jsr 	TokeniseSearchTable
.a6f8	a2 00		ldx #$00			ldx 	#0
.a6fa	b0 1f		bcs $a71b			bcs 	_TKFoundToken
.a6fc	a0 a4		ldy #$a4			ldy 	#(KeywordSet1) >> 8
.a6fe	a9 74		lda #$74			lda 	#(KeywordSet1) & $FF
.a700	20 71 a2	jsr $a271			jsr 	TokeniseSearchTable
.a703	a2 81		ldx #$81			ldx 	#$81
.a705	b0 14		bcs $a71b			bcs 	_TKFoundToken
.a707	a0 a4		ldy #$a4			ldy 	#(KeywordSet2) >> 8
.a709	a9 c9		lda #$c9			lda 	#(KeywordSet2) & $FF
.a70b	20 71 a2	jsr $a271			jsr 	TokeniseSearchTable
.a70e	a2 82		ldx #$82			ldx 	#$82
.a710	b0 09		bcs $a71b			bcs 	_TKFoundToken
.a712	20 18 a8	jsr $a818			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a715	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a718	4c 3a a6	jmp $a63a			jmp 	_TKTokeniseLoop 			; and go round again.
.a71b					_TKFoundToken:
.a71b	48		pha				pha 								; save token
.a71c	8a		txa				txa 								; shift in X, is there one ?
.a71d	f0 03		beq $a722			beq 	_TKNoTShift
.a71f	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte 			; if so, write it out
.a722					_TKNoTShift:
.a722	68		pla				pla 								; restore and write token
.a723	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a726	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a729	4c 3a a6	jmp $a63a			jmp 	_TKTokeniseLoop 			; and go round again.
.a72c					TokeniseString:
.a72c	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a72e	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a731	e8		inx				inx									; start of quoted string.
.a732	da		phx				phx 								; push start of string on top
.a733	ca		dex				dex
.a734					_TSFindEnd:
.a734	e8		inx				inx
.a735	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a738	f0 04		beq $a73e			beq 	_TSEndOfString
.a73a	c9 22		cmp #$22			cmp 	#'"'
.a73c	d0 f6		bne $a734			bne 	_TSFindEnd
.a73e					_TSEndOfString:
.a73e	7a		ply				ply  								; so now Y is first character, X is character after end.
.a73f	48		pha				pha 								; save terminating character
.a740	20 48 a7	jsr $a748			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a743	68		pla				pla 								; terminating character
.a744	f0 01		beq $a747			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a746	e8		inx				inx
.a747					_TSNotQuote:
.a747	60		rts				rts
.a748					TOWriteBlockXY:
.a748	86 36		stx $36				stx 	zTemp0 						; write end character
.a74a	98		tya				tya
.a74b	49 ff		eor #$ff			eor 	#$FF
.a74d	38		sec				sec
.a74e	65 36		adc $36				adc 	zTemp0
.a750	1a		inc a				inc 	a 							; one extra for NULL
.a751	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a754					_TOBlockLoop:
.a754	c4 36		cpy $36				cpy 	zTemp0
.a756	f0 09		beq $a761			beq 	_TOBlockExit
.a758	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a75b	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a75e	c8		iny				iny
.a75f	80 f3		bra $a754			bra 	_TOBlockLoop
.a761					_TOBlockExit:
.a761	a9 00		lda #$00			lda 	#0
.a763	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a766	60		rts				rts
.a767					TokeniseHexConstant:
.a767	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a769	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a76c	e8		inx				inx									; start of quoted string.
.a76d	da		phx				phx 								; push start of constant on top
.a76e	ca		dex				dex
.a76f					_THFindLoop:
.a76f	e8		inx				inx
.a770	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a773	c9 30		cmp #$30			cmp 	#"0"
.a775	90 0c		bcc $a783			bcc 	_THFoundEnd
.a777	c9 3a		cmp #$3a			cmp 	#"9"+1
.a779	90 f4		bcc $a76f			bcc 	_THFindLoop
.a77b	c9 41		cmp #$41			cmp 	#"A"
.a77d	90 04		bcc $a783			bcc 	_THFoundEnd
.a77f	c9 47		cmp #$47			cmp 	#"F"+1
.a781	90 ec		bcc $a76f			bcc 	_THFindLoop
.a783					_THFoundEnd:
.a783	7a		ply				ply 								; restore start
.a784	20 48 a7	jsr $a748			jsr 	TOWriteBlockXY 				; output the block
.a787	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a788					TokeniseCalculateHash:
.a788	da		phx				phx
.a789	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a78c	a9 00		lda #$00			lda 	#0
.a78e					_TCHLoop:
.a78e	18		clc				clc
.a78f	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a792	e8		inx				inx
.a793	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a796	d0 f6		bne $a78e			bne 	_TCHLoop
.a798	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a79b	fa		plx				plx
.a79c	60		rts				rts
.a79d					FixLineBufferCase:
.a79d	a2 00		ldx #$00			ldx 	#0
.a79f					_FLBCLoop:
.a79f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a7a2	f0 22		beq $a7c6			beq 	_FLBCExit 					; end of string.
.a7a4	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a7a6	f0 11		beq $a7b9			beq 	_FLBCInQuotes
.a7a8	e8		inx				inx
.a7a9	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a7ab	90 f2		bcc $a79f			bcc 	_FLBCLoop
.a7ad	c9 7b		cmp #$7b			cmp 	#'z'+1
.a7af	b0 ee		bcs $a79f			bcs 	_FLBCLoop
.a7b1	38		sec				sec 								; make U/C
.a7b2	e9 20		sbc #$20			sbc 	#32
.a7b4	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a7b7	80 e6		bra $a79f			bra 	_FLBCLoop
.a7b9					_FLBCInQuotes:
.a7b9	e8		inx				inx 								; advance
.a7ba	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a7bd	f0 07		beq $a7c6			beq 	_FLBCExit 					; exit on EOS
.a7bf	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a7c1	d0 f6		bne $a7b9			bne 	_FLBCInQuotes
.a7c3	e8		inx				inx 								; skip over it
.a7c4	80 d9		bra $a79f			bra 	_FLBCLoop
.a7c6					_FLBCExit:
.a7c6	60		rts				rts
.a7c7					TokeniseExtractLineNumber:
.a7c7	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a7ca	48		pha				pha
.a7cb	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a7ce	48		pha				pha
.a7cf	20 05 a8	jsr $a805			jsr 	_TELNTimes2 				; line # x 4
.a7d2	20 05 a8	jsr $a805			jsr 	_TELNTimes2 				; line # x 2
.a7d5	18		clc				clc 								; add stacked value
.a7d6	68		pla				pla
.a7d7	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a7da	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a7dd	68		pla				pla
.a7de	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a7e1	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a7e4	20 05 a8	jsr $a805			jsr 	_TELNTimes2 				; line # x 10
.a7e7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a7ea	e8		inx				inx
.a7eb	29 0f		and #$0f			and 	#15 						; add to line #
.a7ed	18		clc				clc
.a7ee	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a7f1	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a7f4	90 03		bcc $a7f9			bcc 	_TLENNoCarry
.a7f6	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a7f9					_TLENNoCarry:
.a7f9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a7fc	c9 30		cmp #$30			cmp 	#'0'
.a7fe	90 04		bcc $a804			bcc 	_TLENExit
.a800	c9 3a		cmp #$3a			cmp 	#'9'+1
.a802	90 c3		bcc $a7c7			bcc 	TokeniseExtractLineNumber
.a804					_TLENExit:
.a804	60		rts				rts
.a805					_TELNTimes2:
.a805	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a808	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a80b	60		rts				rts
.a80c					TokeniseWriteByte:
.a80c	da		phx				phx
.a80d	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a810	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a813	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a816	fa		plx				plx
.a817	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a818					CheckCreateVariableRecord:
.a818	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a81a	85 36		sta $36				sta 	0+zTemp0
.a81c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a81e	85 37		sta $37				sta 	1+zTemp0
.a820					_CCVSearch:
.a820	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a822	f0 2c		beq $a850			beq 	_CCVFail
.a824	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a826	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a828	cd 83 04	cmp $0483			cmp 	identHash
.a82b	d0 16		bne $a843			bne 	_CCVNext
.a82d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a82f	ae 80 04	ldx $0480			ldx 	identStart
.a832					_CCVCompare:
.a832	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a835	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a837	e8		inx				inx 								; advance pointers
.a838	c8		iny				iny
.a839	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a83a	d0 07		bne $a843			bne 	_CCVNext  					; didn't match go to next.
.a83c	90 f4		bcc $a832			bcc 	_CCVCompare 				; not finished yet.
.a83e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a841	f0 41		beq $a884			beq 	_CCVFound 					; yes, we were successful
.a843					_CCVNext:
.a843	18		clc				clc
.a844	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a846	65 36		adc $36				adc 	zTemp0
.a848	85 36		sta $36				sta 	zTemp0
.a84a	90 d4		bcc $a820			bcc 	_CCVSearch
.a84c	e6 37		inc $37				inc 	zTemp0+1
.a84e	80 d0		bra $a820			bra 	_CCVSearch
.a850					_CCVFail:
.a850	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a852	ad 83 04	lda $0483			lda 	identHash
.a855	91 36		sta ($36),y			sta 	(zTemp0),y
.a857	c8		iny				iny 								; offset 2 is the type byte
.a858	ad 84 04	lda $0484			lda 	identTypeByte
.a85b	91 36		sta ($36),y			sta 	(zTemp0),y
.a85d	c8		iny				iny
.a85e					_CCVData:
.a85e	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a860	91 36		sta ($36),y			sta 	(zTemp0),y
.a862	c8		iny				iny
.a863	c0 08		cpy #$08			cpy 	#8
.a865	90 f7		bcc $a85e			bcc 	_CCVData
.a867	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a86a					_CCVCopyName:
.a86a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a86d	91 36		sta ($36),y			sta 	(zTemp0),y
.a86f	e8		inx				inx
.a870	c8		iny				iny
.a871	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a874	d0 f4		bne $a86a			bne 	_CCVCopyName
.a876	98		tya				tya 								; patch offset
.a877	92 36		sta ($36)			sta 	(zTemp0)
.a879	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a87b	91 36		sta ($36),y			sta 	(zTemp0),y
.a87d	88		dey				dey
.a87e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a880	09 80		ora #$80			ora 	#$80
.a882	91 36		sta ($36),y			sta 	(zTemp0),y
.a884					_CCVFound:
.a884	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a886	38		sec				sec
.a887	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a889	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a88b	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a88e	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a890	20 0c a8	jsr $a80c			jsr 	TokeniseWriteByte
.a893	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
