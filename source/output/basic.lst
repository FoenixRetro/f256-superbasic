
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct 13 11:49:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_JOYBLPAREN                       = $8c; $8c JOYB(
=$8d					KWD_JOYXLPAREN                       = $8d; $8d JOYX(
=$8e					KWD_JOYYLPAREN                       = $8e; $8e JOYY(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOTLPAREN                        = $92; $92 NOT(
=$93					KWD_RANDOMLPAREN                     = $93; $93 RANDOM(
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TIMERLPAREN                      = $99; $99 TIMER(
=$9a					KWD_TRUE                             = $9a; $9a TRUE
=$9b					KWD_VALLPAREN                        = $9b; $9b VAL(
=$9c					KWD_FOR                              = $9c; $9c FOR
=$9d					KWD_IF                               = $9d; $9d IF
=$9e					KWD_PROC                             = $9e; $9e PROC
=$9f					KWD_REPEAT                           = $9f; $9f REPEAT
=$a0					KWD_WHILE                            = $a0; $a0 WHILE
=$a1					KWD_ENDIF                            = $a1; $a1 ENDIF
=$a2					KWD_ENDPROC                          = $a2; $a2 ENDPROC
=$a3					KWD_NEXT                             = $a3; $a3 NEXT
=$a4					KWD_THEN                             = $a4; $a4 THEN
=$a5					KWD_UNTIL                            = $a5; $a5 UNTIL
=$a6					KWD_WEND                             = $a6; $a6 WEND
=$a7					KWD_BY                               = $a7; $a7 BY
=$a8					KWD_CALL                             = $a8; $a8 CALL
=$a9					KWD_CIRCLE                           = $a9; $a9 CIRCLE
=$aa					KWD_CLEAR                            = $aa; $aa CLEAR
=$ab					KWD_CLS                              = $ab; $ab CLS
=$ac					KWD_COLOR                            = $ac; $ac COLOR
=$ad					KWD_COLOUR                           = $ad; $ad COLOUR
=$ae					KWD_DATA                             = $ae; $ae DATA
=$af					KWD_DIM                              = $af; $af DIM
=$b0					KWD_DOWNTO                           = $b0; $b0 DOWNTO
=$b1					KWD_ELSE                             = $b1; $b1 ELSE
=$b2					KWD_FROM                             = $b2; $b2 FROM
=$b3					KWD_GFX                              = $b3; $b3 GFX
=$b4					KWD_GOSUB                            = $b4; $b4 GOSUB
=$b5					KWD_GOTO                             = $b5; $b5 GOTO
=$b6					KWD_HERE                             = $b6; $b6 HERE
=$b7					KWD_IMAGE                            = $b7; $b7 IMAGE
=$b8					KWD_LET                              = $b8; $b8 LET
=$b9					KWD_LINE                             = $b9; $b9 LINE
=$ba					KWD_LOCAL                            = $ba; $ba LOCAL
=$bb					KWD_OFF                              = $bb; $bb OFF
=$bc					KWD_ON                               = $bc; $bc ON
=$bd					KWD_OUTLINE                          = $bd; $bd OUTLINE
=$be					KWD_PLOT                             = $be; $be PLOT
=$bf					KWD_PRINT                            = $bf; $bf PRINT
=$c0					KWD_READ                             = $c0; $c0 READ
=$c1					KWD_RECT                             = $c1; $c1 RECT
=$c2					KWD_REM                              = $c2; $c2 REM
=$c3					KWD_RETURN                           = $c3; $c3 RETURN
=$c4					KWD_SOLID                            = $c4; $c4 SOLID
=$c5					KWD_SPRITE                           = $c5; $c5 SPRITE
=$c6					KWD_TEXT                             = $c6; $c6 TEXT
=$c7					KWD_TO                               = $c7; $c7 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9c					KWC_FIRST_STRUCTURE = $9c
=$a1					KWC_FIRST_STRUCTURE_DEC = $a1
=$a6					KWC_LAST_STRUCTURE = $a6
=$83					KWC_FIRST_UNARY = $83
=$9b					KWC_LAST_UNARY = $9b

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 77 b4	jsr $b477			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 44 99	jsr $9944			jsr 	PrintStringXA
.8014	20 db 92	jsr $92db			jsr 	NewCommand 					; erase current program
.8017	20 e9 a5	jsr $a5e9			jsr 	BackloadProgram
.801a	4c 56 94	jmp $9456			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 1965."
>8065	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>8075	32 32 2e 20 42 75 69 6c 64 20 31 39 36 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8087					GXGraphicDraw:
.8087	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8089	b0 06		bcs $8091			bcs 	_GDCoordinate
.808b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808d	84 37		sty $37				sty 	gxzTemp0+1
.808f	80 3d		bra $80ce			bra 	_GDExecuteA 				; and execute
.8091					_GDCoordinate:
.8091	48		pha				pha 								; save AXY
.8092	da		phx				phx
.8093	5a		phy				phy
.8094	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8096					_GDCopy1:
.8096	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8099	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809c	ca		dex				dex
.809d	10 f7		bpl $8096			bpl 	_GDCopy1
.809f	68		pla				pla 								; update Y
.80a0	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a3	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a6	68		pla				pla
.80a7	8d 29 06	sta $0629			sta 	gxCurrentX
.80aa	68		pla				pla 								; get A (command+X.1) back
.80ab	48		pha				pha
.80ac	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ae	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b1	f0 07		beq $80ba			beq 	_GDXOkay 					; check X range
.80b3	ad 29 06	lda $0629			lda 	gxCurrentX
.80b6	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b8	b0 1e		bcs $80d8			bcs 	_GDError
.80ba					_GDXOkay:
.80ba	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bd	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c0	b0 16		bcs $80d8			bcs 	_GDError
.80c2	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c4					_GDCopy2:
.80c4	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c7	9d 31 06	sta $0631,x			sta 	gxX0,x
.80ca	ca		dex				dex
.80cb	10 f7		bpl $80c4			bpl 	_GDCopy2
.80cd	68		pla				pla 								; get command back
.80ce					_GDExecuteA:
.80ce	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d0	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d2	b0 05		bcs $80d9			bcs 	_GDError2
.80d4	aa		tax				tax
.80d5	7c de 80	jmp ($80de,x)			jmp 	(GRVectorTable,x)
.80d8					_GDError:
.80d8	68		pla				pla 								; throw command
.80d9					_GDError2:
.80d9	38		sec				sec
.80da	60		rts				rts
.80db					GXMove:
.80db	18		clc				clc
.80dc	60		rts				rts
.80dd					GRUndefined:
>80dd	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80de					GRVectorTable:
>80de	ad 82					.word	GXInitialise             ; $00 Initialise
>80e0	c4 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e2	0c 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e4	5f 82					.word	GXClearBitmap            ; $03 Clear
>80e6	8a 84					.word	GXSetColourMode          ; $04 Colour
>80e8	4e 86					.word	GXFontHandler            ; $05 DrawFont
>80ea	96 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ec	fe 86					.word	GXSelect                 ; $07 SPRUSE
>80ee	24 87					.word	GXSelectImage            ; $08 SPRIMG
>80f0	dd 80					.word	GRUndefined              ; $09
>80f2	dd 80					.word	GRUndefined              ; $0a
>80f4	dd 80					.word	GRUndefined              ; $0b
>80f6	dd 80					.word	GRUndefined              ; $0c
>80f8	dd 80					.word	GRUndefined              ; $0d
>80fa	dd 80					.word	GRUndefined              ; $0e
>80fc	dd 80					.word	GRUndefined              ; $0f
>80fe	db 80					.word	GXMove                   ; $10 Move
>8100	58 83					.word	GXLine                   ; $11 Line
>8102	d3 84					.word	GXFrameRectangle         ; $12 FrameRect
>8104	d0 84					.word	GXFillRectangle          ; $13 FillRect
>8106	16 81					.word	GXFrameCircle            ; $14 FrameCircle
>8108	12 81					.word	GXFillCircle             ; $15 FillCircle
>810a	dd 80					.word	GRUndefined              ; $16
>810c	dd 80					.word	GRUndefined              ; $17
>810e	b8 84					.word	GXPlotPoint              ; $18 Plot
>8110	89 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8112					GXFillCircle:
.8112	a9 ff		lda #$ff			lda 	#255
.8114	80 02		bra $8118			bra 	GXCircle
.8116					GXFrameCircle:
.8116	a9 00		lda #$00			lda 	#0
.8118					GXCircle:
.8118	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811b	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811e	f0 26		beq $8146			beq 	_GXCFail
.8120	20 89 88	jsr $8889			jsr 	GXSortXY 					; topleft/bottomright
.8123	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.8126	20 18 82	jsr $8218			jsr 	GXCircleSetup 				; set up for drawing
.8129	9c 4d 06	stz $064d			stz 	gxYChanged
.812c					_GXCircleDraw:
.812c	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.812f	cd 4b 06	cmp $064b			cmp 	gYCentre
.8132	90 0a		bcc $813e			bcc 	_GXCircleContinue
.8134	d0 03		bne $8139			bne 	_GXNoLast
.8136	20 4b 81	jsr $814b			jsr 	GXPlot1
.8139					_GXNoLast:
.8139	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; close the bitmap
.813c	18		clc				clc
.813d	60		rts				rts
.813e					_GXCircleContinue:
.813e	20 48 81	jsr $8148			jsr 	GXPlot2 					; draw it
.8141	20 c5 81	jsr $81c5			jsr 	GXCircleMove 				; adjust the coordinates
.8144	80 e6		bra $812c			bra 	_GXCircleDraw
.8146					_GXCFail:
.8146	38		sec				sec
.8147	60		rts				rts
.8148					GXPlot2:
.8148	20 4b 81	jsr $814b			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814b					GXPlot1:
.814b	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814e	f0 03		beq $8153			beq 	_GXPlot1Only
.8150	20 6f 81	jsr $816f			jsr 	GXPlot0 						; plot and negate
.8153					_GXPlot1Only:
.8153	20 6f 81	jsr $816f			jsr 	GXPlot0 						; twice, undoing negation
.8156	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.8159	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815c	8d 4b 06	sta $064b			sta 	gYCentre
.815f	8e 4a 06	stx $064a			stx 	gXCentre
.8162	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8165	a9 ff		lda #$ff			lda 	#$FF
.8167	8d 4d 06	sta $064d			sta 	gxYChanged
.816a	60		rts				rts
.816b	20 6f 81	jsr $816f			jsr 	GXPlot0 						; do once
.816e	60		rts				rts
.816f	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8172	f0 05		beq $8179			beq 	_GXPlot0Always
.8174	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8177	f0 2d		beq $81a6			beq 	GXPlot0Exit
.8179					_GXPlot0Always:
.8179	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817b	ad 4b 06	lda $064b			lda 	gYCentre
.817e	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8181	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8183	ad 4a 06	lda $064a			lda 	gXCentre
.8186	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8189	48		pha				pha 									; save last offset X
.818a	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 					; calculate position/offset.
.818d	68		pla				pla
.818e	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.818f	85 36		sta $36				sta 	gxzTemp0
.8191	64 37		stz $37				stz 	gxzTemp0+1
.8193	26 37		rol $37				rol 	gxzTemp0+1
.8195	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8198	69 80		adc #$80			adc 	#128
.819a	20 23 85	jsr $8523			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819d	38		sec				sec 									; GY = -GY
.819e	a9 00		lda #$00			lda 	#0
.81a0	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a3	8d 4b 06	sta $064b			sta 	gYCentre
.81a6					GXPlot0Exit:
.81a6	60		rts				rts
.81a7					GXSubCopy:
.81a7	85 36		sta $36				sta 	gxzTemp0
.81a9	64 37		stz $37				stz 	gxzTemp0+1
.81ab	29 80		and #$80			and 	#$80
.81ad	f0 02		beq $81b1			beq 	_GXNoSx
.81af	c6 37		dec $37				dec 	gxzTemp0+1
.81b1					_GXNoSx:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b5	e5 36		sbc $36				sbc 	gxzTemp0
.81b7	9d 31 06	sta $0631,x			sta 	gXX0,x
.81ba	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81bd	e5 37		sbc $37				sbc 	gxzTemp0+1
.81bf	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c2	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c4	60		rts				rts
.81c5					GXCircleMove:
.81c5	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c8	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81ca	10 0d		bpl $81d9			bpl 	_GXEMPositive
.81cc	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81cf	ad 4a 06	lda $064a			lda 	gXCentre
.81d2	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d5	a9 06		lda #$06			lda 	#6  						; and add 6
.81d7	80 15		bra $81ee			bra 	_GXEMAddD
.81d9					_GXEMPositive:
.81d9	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dc	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81df	38		sec				sec 								; calculate X-Y
.81e0	ad 4a 06	lda $064a			lda 	gXCentre
.81e3	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e6	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81e9	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81eb	ce 4d 06	dec $064d			dec 	gxYChanged
.81ee					_GXEMAddD:
.81ee	18		clc				clc
.81ef	65 38		adc $38				adc 	gxzTemp1
.81f1	85 38		sta $38				sta 	gxzTemp1
.81f3	90 02		bcc $81f7			bcc 	_GXEMNoCarry
.81f5	e6 39		inc $39				inc 	gxzTemp1+1
.81f7					_GXEMNoCarry:
.81f7	60		rts				rts
.81f8					_GXAdd4TimesToD:
.81f8	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fa	29 80		and #$80			and 	#$80
.81fc	f0 02		beq $8200			beq 	_GXA4Unsigned
.81fe	a9 ff		lda #$ff			lda 	#$FF
.8200					_GXA4Unsigned:
.8200	85 37		sta $37				sta 	gxzTemp0+1
.8202	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8204	26 37		rol $37				rol 	gxzTemp0+1
.8206	06 36		asl $36				asl 	gxzTemp0
.8208	26 37		rol $37				rol 	gxzTemp0+1
.820a	18		clc				clc 								; add
.820b	a5 36		lda $36				lda		gxzTemp0
.820d	65 38		adc $38				adc 	gxzTemp1
.820f	85 38		sta $38				sta 	gxzTemp1
.8211	a5 37		lda $37				lda		gxzTemp0+1
.8213	65 39		adc $39				adc 	gxzTemp1+1
.8215	85 39		sta $39				sta 	gxzTemp1+1
.8217	60		rts				rts
.8218					GXCircleSetup:
.8218	38		sec				sec
.8219	ad 37 06	lda $0637			lda 	gxY1
.821c	ed 33 06	sbc $0633			sbc 	gxY0
.821f	4a		lsr a				lsr 	a
.8220	8d 49 06	sta $0649			sta 	gxRadius
.8223	a2 00		ldx #$00			ldx 	#0
.8225	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.8228	a2 02		ldx #$02			ldx 	#2
.822a	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.822d	9c 4a 06	stz $064a			stz 	gXCentre
.8230	ad 49 06	lda $0649			lda 	gxRadius
.8233	8d 4b 06	sta $064b			sta 	gYCentre
.8236	0a		asl a				asl 	a 							; R x 2
.8237	85 36		sta $36				sta 	gxzTemp0
.8239	38		sec				sec
.823a	a9 03		lda #$03			lda 	#3
.823c	e5 36		sbc $36				sbc 	gxzTemp0
.823e	85 38		sta $38				sta 	gxzTemp1
.8240	a9 00		lda #$00			lda 	#0
.8242	e9 00		sbc #$00			sbc 	#0
.8244	85 39		sta $39				sta 	gxzTemp1+1
.8246	60		rts				rts
.8247					_GXCalculateCentre:
.8247	38		sec				sec
.8248	bd 35 06	lda $0635,x			lda 	gxX1,x
.824b	7d 31 06	adc $0631,x			adc 	gXX0,x
.824e	9d 35 06	sta $0635,x			sta 	gXX1,x
.8251	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8254	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8257	4a		lsr a				lsr 	a
.8258	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825b	7e 35 06	ror $0635,x			ror 	gXX1,x
.825e	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.825f					GXClearBitmap:
.825f	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8262	f0 24		beq $8288			beq 	_GXCBFail
.8264	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start access
.8267	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8269	ad 3d 06	lda $063d			lda 	gxHeight
.826c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8270					_GXCalcLastPage:
.8270	98		tya				tya 								; add to base page
.8271	18		clc				clc
.8272	6d 3b 06	adc $063b			adc 	gxBasePage
.8275	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8277					_GXClearAll:
.8277	20 8a 82	jsr $828a			jsr 	_GXClearBlock 				; clear 8k block
.827a	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827c	a5 0b		lda $0b				lda 	GXEditSlot
.827e	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8281	b0 f4		bcs $8277			bcs 	_GXClearAll
.8283	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap	 			; stop access
.8286	18		clc				clc
.8287	60		rts				rts
.8288					_GXCBFail:
.8288	38		sec				sec
.8289	60		rts				rts
.828a					_GXClearBlock:
.828a	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828c	85 38		sta $38				sta 	0+gxzTemp1
.828e	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8290	85 39		sta $39				sta 	1+gxzTemp1
.8292					_GXCB0:
.8292	a5 36		lda $36				lda 	gxzTemp0
.8294	a0 00		ldy #$00			ldy 	#0
.8296					_GXCB1:
.8296	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8298	c8		iny				iny
.8299	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829b	c8		iny				iny
.829c	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829e	c8		iny				iny
.829f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a1	c8		iny				iny
.82a2	d0 f2		bne $8296			bne 	_GXCB1
.82a4	e6 39		inc $39				inc 	gxzTemp1+1
.82a6	a5 39		lda $39				lda 	gxzTemp1+1
.82a8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82aa	d0 e6		bne $8292			bne 	_GXCB0
.82ac	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ad					GXInitialise:
.82ad	64 01		stz $01				stz 	1
.82af	a9 01		lda #$01			lda 	#1
.82b1	8d 00 d0	sta $d000			sta 	$D000
.82b4	18		clc				clc
.82b5	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b8	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bb	a2 0f		ldx #$0f			ldx 	#15
.82bd					_GXIClear:
.82bd	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c0	ca		dex				dex
.82c1	10 fa		bpl $82bd			bpl 	_GXIClear
.82c3	60		rts				rts
.82c4					GXControlBitmap:
.82c4	64 01		stz $01				stz 	1
.82c6	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c8	29 01		and #$01			and 	#1 							; set bitmap flag
.82ca	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82cd	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82ce	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d1	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d3	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d5	90 02		bcc $82d9			bcc 	_CBNotOn
.82d7	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82d9					_CBNotOn:
.82d9	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dc	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82de	29 07		and #$07			and 	#7
.82e0	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e3	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e5	d0 02		bne $82e9			bne 	_CBNotDefault
.82e7	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82e9					_CBNotDefault:
.82e9	8d 3b 06	sta $063b			sta 	gxBasePage
.82ec	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82ef	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f1	8d 03 d1	sta $d103			sta 	$D103
.82f4	a5 36		lda $36				lda 	gxzTemp0
.82f6	8d 02 d1	sta $d102			sta 	$D102
.82f9	9c 01 d1	stz $d101			stz 	$D101
.82fc	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82fe	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8301	29 01		and #$01			and 	#1
.8303	f0 02		beq $8307			beq 	_CBHaveHeight
.8305	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8307					_CBHaveHeight
.8307	8e 3d 06	stx $063d			stx 	gxHeight
.830a	18		clc				clc
.830b	60		rts				rts
.830c					GXControlSprite:
.830c	64 01		stz $01				stz 	1
.830e	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8310	29 01		and #$01			and 	#1 							; set sprites flag
.8312	8d 39 06	sta $0639			sta 	gxSpritesOn
.8315	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8316	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8319	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831b	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831d	90 02		bcc $8321			bcc 	_CSNotOn
.831f	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8321					_CSNotOn:
.8321	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8324	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8326	d0 02		bne $832a			bne 	_CSNotDefault
.8328	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832a					_CSNotDefault:
.832a	8d 3c 06	sta $063c			sta 	gxSpritePage
.832d	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8330	a5 36		lda $36				lda 	zTemp0
.8332	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8335	a5 37		lda $37				lda 	zTemp0+1
.8337	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833a	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833c					_CSClear:
.833c	9e 00 d9	stz $d900,x			stz 	$D900,x
.833f	9e 00 da	stz $da00,x			stz 	$DA00,x
.8342	ca		dex				dex
.8343	d0 f7		bne $833c			bne 	_CSClear
.8345	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8348	18		clc				clc
.8349	60		rts				rts
.834a					GXCalculateBaseAddress:
.834a	85 36		sta $36				sta 	gxzTemp0
.834c	64 37		stz $37				stz 	gxzTemp0+1
.834e	a9 05		lda #$05			lda 	#5
.8350					_GXShift:
.8350	06 36		asl $36				asl 	gxzTemp0
.8352	26 37		rol $37				rol 	gxzTemp0+1
.8354	3a		dec a				dec		a
.8355	d0 f9		bne $8350			bne 	_GXShift
.8357	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8358					GXLine:
.8358	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835b	f0 28		beq $8385			beq 	_GXLFail
.835d	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.8360	20 a7 88	jsr $88a7			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8363	20 2b 84	jsr $842b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8366	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8369					_GXDrawLoop:
.8369	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836e	2d 41 06	and $0641			and 	gxANDValue
.8371	4d 40 06	eor $0640			eor 	gxEORValue
.8374	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8376	20 87 83	jsr $8387			jsr 	GXLineIsComplete 			; is the line complete ?
.8379	f0 05		beq $8380			beq 	_GXLExit
.837b	20 a2 83	jsr $83a2			jsr 	GXLineAdvance 				; code as per advance method
.837e	80 e9		bra $8369			bra 	_GXDrawLoop
.8380					_GXLExit:
.8380	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8383	18		clc				clc
.8384	60		rts				rts
.8385					_GXLFail:
.8385	38		sec				sec
.8386	60		rts				rts
.8387					GXLineIsComplete:
.8387	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838a	d0 0f		bne $839b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838c	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.838f	4d 35 06	eor $0635			eor 	GXX1
.8392	d0 06		bne $839a			bne 	_GXLICExit
.8394	ad 32 06	lda $0632			lda 	GXX0+1
.8397	4d 36 06	eor $0636			eor 	GXX1+1
.839a					_GXLICExit:
.839a	60		rts				rts
.839b					_GXLICCompareY:
.839b	ad 37 06	lda $0637			lda 	GXY1
.839e	4d 33 06	eor $0633			eor 	GXY0
.83a1	60		rts				rts
.83a2					GXLineAdvance:
.83a2	18		clc				clc 								; add adjust to position
.83a3	ad 52 06	lda $0652			lda 	GXPosition
.83a6	6d 53 06	adc $0653			adc 	GXAdjust
.83a9	8d 52 06	sta $0652			sta 	GXPosition
.83ac	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83af	b0 05		bcs $83b6			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b1	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b4	90 0a		bcc $83c0			bcc 	_GXLANoExtra
.83b6					_GXLAOverflow:
.83b6	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83b9	38		sec				sec 								; subtract total and write back
.83ba	ed 54 06	sbc $0654			sbc 	GXTotal
.83bd	8d 52 06	sta $0652			sta 	GXPosition
.83c0					_GXLANoExtra:
.83c0	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c3	f0 0d		beq $83d2			beq 	_GXDXLarger
.83c5	20 24 84	jsr $8424			jsr 	GXIncrementY
.83c8	ad 55 06	lda $0655			lda 	GXAddSelect
.83cb	f0 10		beq $83dd			beq 	_GXLAExit
.83cd	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d0	80 0b		bra $83dd			bra 	_GXLAExit
.83d2					_GXDXLarger:
.83d2	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d5	ad 55 06	lda $0655			lda 	GXAddSelect
.83d8	f0 03		beq $83dd			beq 	_GXLAExit
.83da	20 24 84	jsr $8424			jsr 	GXIncrementY
.83dd					_GXLAExit:
.83dd	60		rts				rts
.83de					GXAdjustX:
.83de	ad 51 06	lda $0651			lda 	GXDXNegative
.83e1	10 25		bpl $8408			bpl 	_GXAXRight
.83e3	ad 31 06	lda $0631			lda 	GXX0
.83e6	d0 03		bne $83eb			bne 	_GXAXNoBorrow
.83e8	ce 32 06	dec $0632			dec 	GXX0+1
.83eb					_GXAXNoBorrow:
.83eb	ce 31 06	dec $0631			dec 	GXX0
.83ee	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f1	ad 44 06	lda $0644			lda 	gsOffset
.83f4	c9 ff		cmp #$ff			cmp 	#$FF
.83f6	d0 0f		bne $8407			bne 	_GXAYExit 					; underflow
.83f8	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fa	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fc	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83fe	b0 07		bcs $8407			bcs 	_GXAYExit
.8400	18		clc				clc
.8401	69 20		adc #$20			adc 	#$20 						; fix up
.8403	85 3d		sta $3d				sta 	gxzScreen+1
.8405	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8407					_GXAYExit:
.8407	60		rts				rts
.8408					_GXAXRight:
.8408	ee 31 06	inc $0631			inc 	GXX0
.840b	d0 03		bne $8410			bne 	_GXAXNoCarry
.840d	ee 32 06	inc $0632			inc 	GXX0+1
.8410					_GXAXNoCarry:
.8410	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8413	d0 0e		bne $8423			bne 	_GXAXExit 					; if not overflowed, exit.
.8415	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8417	a5 3d		lda $3d				lda 	gxzScreen+1
.8419	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841b	90 06		bcc $8423			bcc 	_GXAXExit
.841d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8423					_GXAXExit:
.8423	60		rts				rts
.8424					GXIncrementY:
.8424	ee 33 06	inc $0633			inc 	GXY0
.8427	20 32 88	jsr $8832			jsr 	GXMovePositionDown
.842a	60		rts				rts
.842b					GXLineSetup:
.842b	ad 37 06	lda $0637			lda 	GXY1
.842e	38		sec				sec
.842f	ed 33 06	sbc $0633			sbc 	GXY0
.8432	4a		lsr a				lsr 	a
.8433	8d 4f 06	sta $064f			sta 	GXDiffY
.8436	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.8439	38		sec				sec
.843a	ad 35 06	lda $0635			lda 	GXX1
.843d	ed 31 06	sbc $0631			sbc 	GXX0
.8440	8d 4e 06	sta $064e			sta 	GXDiffX
.8443	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8446	ed 32 06	sbc $0632			sbc 	GXX0+1
.8449	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844a	6e 4e 06	ror $064e			ror 	GXDiffX
.844d	0a		asl a				asl 	a
.844e	10 0c		bpl $845c			bpl 	_GDXNotNegative
.8450	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8452	38		sec				sec
.8453	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8456	8d 4e 06	sta $064e			sta 	GXDiffX
.8459	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845c					_GDXNotNegative:
.845c	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.845f	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8462	8d 53 06	sta $0653			sta 	GXAdjust
.8465	ad 4e 06	lda $064e			lda 	GXDiffX
.8468	8d 54 06	sta $0654			sta 	GXTotal
.846b	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846e	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8471	90 0f		bcc $8482			bcc 	_GDXNotLarger
.8473	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8476	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.8479	8d 53 06	sta $0653			sta 	GXAdjust
.847c	ad 4f 06	lda $064f			lda 	GXDiffY
.847f	8d 54 06	sta $0654			sta 	GXTotal
.8482					_GDXNotLarger:
.8482	ad 54 06	lda $0654			lda 	GXTotal
.8485	4a		lsr a				lsr 	a
.8486	8d 52 06	sta $0652			sta 	GXPosition
.8489	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848a					GXSetColourMode:
.848a	a6 36		ldx $36				ldx 	gxzTemp0
.848c	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.848f	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8491	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8494	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8496	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8499	ae 3f 06	ldx $063f			ldx 	gxColour
.849c	8e 40 06	stx $0640			stx 	gxEORValue
.849f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a1	90 03		bcc $84a6			bcc 	_GXSDCNotAndColour
.84a3	8e 41 06	stx $0641			stx 	gxANDValue
.84a6					_GXSDCNotAndColour:
.84a6	d0 03		bne $84ab			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a8	9c 40 06	stz $0640			stz 	gxEORValue
.84ab					_GXSDCNotAnd:
.84ab	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ac	90 08		bcc $84b6			bcc 	_GXSDCNoFlip
.84ae	ad 41 06	lda $0641			lda	 	gxANDValue
.84b1	49 ff		eor #$ff			eor 	#$FF
.84b3	8d 41 06	sta $0641			sta 	gxANDValue
.84b6					_GXSDCNoFlip:
.84b6	18		clc				clc
.84b7	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b8					GXPlotPoint:
.84b8	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84bb	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84be	ac 44 06	ldy $0644			ldy 	gsOffset
.84c1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c3	2d 41 06	and $0641			and 	gxANDValue
.84c6	4d 40 06	eor $0640			eor 	gxEORValue
.84c9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cb	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ce	18		clc				clc
.84cf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d0					GXFillRectangle:
.84d0	38		sec				sec
.84d1	80 01		bra $84d4			bra 	GXRectangle
.84d3					GXFrameRectangle:
.84d3	18		clc				clc
.84d4					GXRectangle:
.84d4	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d7	f0 35		beq $850e			beq 	_GXRFail
.84d9	08		php				php 								; save Fill flag (CS)
.84da	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84dd	20 89 88	jsr $8889			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e0	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e3	38		sec				sec 								; sec = Draw line
.84e4	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e7	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84ea	cd 37 06	cmp $0637			cmp 	gxY1
.84ed	f0 19		beq $8508			beq 	_GXRectangleExit
.84ef					_GXRectLoop:
.84ef	20 32 88	jsr $8832			jsr 	GXMovePositionDown 			; down one.
.84f2	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f5	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f8	cd 37 06	cmp $0637			cmp 	gXY1
.84fb	f0 07		beq $8504			beq 	_GXLastLine
.84fd	28		plp				plp 								; get flag back
.84fe	08		php				php
.84ff	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8502	80 eb		bra $84ef			bra 	_GXRectLoop
.8504					_GXLastLine:
.8504	38		sec				sec
.8505	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0
.8508					_GXRectangleExit:
.8508	68		pla				pla 								; throw fill flag.
.8509	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.850c	18		clc				clc
.850d	60		rts				rts
.850e					_GXRFail:
.850e	38		sec				sec
.850f	60		rts				rts
.8510					GXDrawLineX1X0:
.8510	08		php				php 								; save solid/either-end
.8511	38		sec				sec
.8512	ad 35 06	lda $0635			lda		gXX1
.8515	ed 31 06	sbc $0631			sbc 	gXX0
.8518	85 36		sta $36				sta 	gxzTemp0
.851a	ad 36 06	lda $0636			lda 	gXX1+1
.851d	ed 32 06	sbc $0632			sbc 	gXX0+1
.8520	85 37		sta $37				sta 	gxzTemp0+1
.8522	28		plp				plp
.8523					GXDrawLineTemp0:
.8523	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8525	48		pha				pha
.8526	a5 3d		lda $3d				lda 	gxzScreen+1
.8528	48		pha				pha
.8529	ad 44 06	lda $0644			lda 	gsOffset
.852c	48		pha				pha
.852d	a5 0b		lda $0b				lda 	GXEditSlot
.852f	48		pha				pha
.8530	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8533	90 1e		bcc $8553			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8535					_GXDLTLine:
.8535	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8537	2d 41 06	and $0641			and 	gxANDValue
.853a	4d 40 06	eor $0640			eor 	gxEORValue
.853d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.853f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8541	d0 04		bne $8547			bne 	_GXDLTNoBorrow
.8543	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8545	30 2e		bmi $8575			bmi 	_GXDLTExit
.8547					_GXDLTNoBorrow:
.8547	c6 36		dec $36				dec 	gxzTemp0
.8549	c8		iny				iny 								; next slot.
.854a	d0 e9		bne $8535			bne 	_GXDLTLine
.854c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854e	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.8551	80 e2		bra $8535			bra 	_GXDLTLine
.8553					_GXDLTEndPoints:
.8553	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8555	2d 41 06	and $0641			and 	gxANDValue
.8558	4d 40 06	eor $0640			eor 	gxEORValue
.855b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855d	98		tya				tya 								; advance to right side
.855e	18		clc				clc
.855f	65 36		adc $36				adc 	gxzTemp0
.8561	a8		tay				tay
.8562	a5 3d		lda $3d				lda 	gxzScreen+1
.8564	65 37		adc $37				adc 	gxzTemp0+1
.8566	85 3d		sta $3d				sta 	gxzScreen+1
.8568	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap 			; fix up.
.856b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856d	2d 41 06	and $0641			and 	gxANDValue
.8570	4d 40 06	eor $0640			eor 	gxEORValue
.8573	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8575					_GXDLTExit:
.8575	68		pla				pla
.8576	85 0b		sta $0b				sta 	GXEditSlot
.8578	68		pla				pla
.8579	8d 44 06	sta $0644			sta 	gsOffset
.857c	68		pla				pla
.857d	85 3d		sta $3d				sta 	gxzScreen+1
.857f	68		pla				pla
.8580	85 3c		sta $3c				sta 	gxzScreen
.8582	60		rts				rts
.8583					GXDLTCheckWrap:
.8583	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8585	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8587	90 06		bcc $858f			bcc 	_GXDLTCWExit
.8589	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858b	85 3d		sta $3d				sta 	gxzScreen+1
.858d	e6 0b		inc $0b				inc 	GXEditSlot
.858f					_GXDLTCWExit:
.858f	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8590					GXDrawGraphicElement:
.8590	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8593	3a		dec a				dec 	a
.8594	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8597	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859a	9c 5c 06	stz $065c			stz 	gxHFlip
.859d	2c 5d 06	bit $065d			bit 	gxUseMode
.85a0	10 03		bpl $85a5			bpl 	_GXNotVertical
.85a2	8d 5b 06	sta $065b			sta 	gxVFlip
.85a5					_GXNotVertical:
.85a5	50 03		bvc $85aa			bvc 	_GXNotHorizontal
.85a7	8d 5c 06	sta $065c			sta 	gxHFlip
.85aa					_GXNotHorizontal:
.85aa	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ad	f0 5f		beq $860e			beq 	_GXSLFail
.85af	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b2	48		pha				pha
.85b3	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b6	8e 58 06	stx $0658			stx 	gxAcquireVector
.85b9	20 be 87	jsr $87be			jsr 	gxOpenBitmap 				; open the bitmap.
.85bc	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85bf	4a		lsr a				lsr 	a
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	29 07		and #$07			and		#7
.85c4	1a		inc a				inc 	a
.85c5	8d 5a 06	sta $065a			sta 	gxScale
.85c8	64 38		stz $38				stz 	gxzTemp1						; start first line
.85ca					_GXGELoop:
.85ca	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cc	4d 5b 06	eor $065b			eor 	gxVFlip
.85cf	aa		tax				tax 								; get the Xth line.
.85d0	20 10 86	jsr $8610			jsr 	_GXCallAcquire 				; get that data.
.85d3	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d6	85 39		sta $39				sta 	gxzTemp1+1
.85d8					_GXGELoop2:
.85d8	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85db	cd 3d 06	cmp $063d			cmp 	gxHeight
.85de	b0 10		bcs $85f0			bcs 	_GXDGEExit
.85e0	20 13 86	jsr $8613			jsr 	GXRenderOneLine 			; render line
.85e3	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e5	d0 f1		bne $85d8			bne 	_GXGELoop2
.85e7	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85e9	a5 38		lda $38				lda 	gxzTemp1
.85eb	cd 56 06	cmp $0656			cmp 	gxSize
.85ee	d0 da		bne $85ca			bne 	_GXGELoop
.85f0					_GXDGEExit:
.85f0	68		pla				pla 								; restore Y for next time
.85f1	8d 33 06	sta $0633			sta 	gxY0
.85f4	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f7					_GXShiftLeft:
.85f7	18		clc				clc
.85f8	ad 56 06	lda $0656			lda 	gxSize
.85fb	6d 31 06	adc $0631			adc 	gxX0
.85fe	8d 31 06	sta $0631			sta 	gxX0
.8601	90 03		bcc $8606			bcc 	_GXSLNoCarry
.8603	ee 32 06	inc $0632			inc 	gxX0+1
.8606					_GXSLNoCarry:
.8606	ca		dex				dex
.8607	d0 ee		bne $85f7			bne 	_GXShiftLeft
.8609	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.860c	18		clc				clc
.860d	60		rts				rts
.860e					_GXSLFail:
.860e	38		sec				sec
.860f	60		rts				rts
.8610					_GXCallAcquire:
.8610	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8613					GXRenderOneLine:
.8613	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8616	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8619	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861b					_GXROLLoop1:
.861b	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861e	85 3b		sta $3b				sta 	gxzTemp2+1
.8620					_GXROLLoop2:
.8620	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8622	4d 5c 06	eor $065c			eor 	gxHFlip
.8625	aa		tax				tax 								; read from the pixel buffer
.8626	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8629	f0 0a		beq $8635			beq 	_GXZeroPixel 				; don't draw if zero.
.862b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862d	2d 41 06	and $0641			and 	gxANDValue
.8630	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8633	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8635					_GXZeroPixel:
.8635	c8		iny				iny 								; advance pointer
.8636	d0 05		bne $863d			bne 	_GXNoShift
.8638	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863a	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.863d					_GXNoShift:
.863d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.863f	d0 df		bne $8620			bne 	_GXROLLoop2
.8641	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8643	a5 3a		lda $3a				lda 	gxzTemp2
.8645	cd 56 06	cmp $0656			cmp 	gxSize
.8648	d0 d1		bne $861b			bne 	_GXROLLoop1
.864a	ee 33 06	inc $0633			inc 	gxY0
.864d	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864e					GXFontHandler:
.864e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8650	4d 3e 06	eor $063e			eor 	gxMode
.8653	8d 5d 06	sta $065d			sta 	gxUseMode
.8656	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8658	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865a	26 37		rol $37				rol	 	gxzTemp0+1
.865c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865e	26 37		rol $37				rol	 	gxzTemp0+1
.8660	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8662	26 37		rol $37				rol	 	gxzTemp0+1
.8664	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8666	09 c0		ora #$c0			ora 	#$C0
.8668	85 37		sta $37				sta 	gxzTemp0+1
.866a	a9 08		lda #$08			lda 	#8 							; size 8x8
.866c	a2 74		ldx #$74			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8670	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.8673	60		rts				rts
.8674					GXGetGraphicDataFont:
.8674	8a		txa				txa 								; X->Y
.8675	a8		tay				tay
.8676	a6 01		ldx $01				ldx 	1 							; preserve old value
.8678	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867a	85 01		sta $01				sta 	1
.867c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867e	86 01		stx $01				stx 	1 							; put old value back.
.8680	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8682					_GXExpand:
.8682	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8685	0a		asl a				asl 	a 							; shift bit 7 into C
.8686	90 08		bcc $8690			bcc 	_GXNoPixel
.8688	48		pha				pha 								; if set, set pixel buffer to current colour.
.8689	ad 3f 06	lda $063f			lda 	gxColour
.868c	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.868f	68		pla				pla
.8690					_GXNoPixel:
.8690	e8		inx				inx 								; do the whole byte.
.8691	e0 08		cpx #$08			cpx 	#8
.8693	d0 ed		bne $8682			bne 	_GXExpand
.8695	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8696					GXSpriteHandler:
.8696	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8698	4d 3e 06	eor $063e			eor 	gxMode
.869b	8d 5d 06	sta $065d			sta 	gxUseMode
.869e	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a0	da		phx				phx
.86a1	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; can access sprite information
.86a4	68		pla				pla
.86a5	20 4d 88	jsr $884d			jsr 	GXFindSprite 				; get the sprite address
.86a8	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.86ab	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86ae	a2 b6		ldx #$b6			ldx 	#GXSpriteAcquire & $FF
.86b0	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b2	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.86b5	60		rts				rts
.86b6					GXSpriteAcquire:
.86b6	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86b9	85 0b		sta $0b				sta 	GXEditSlot
.86bb	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86bd	a9 00		lda #$00			lda 	#0
.86bf	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c2					_GXTimesRowNumber:
.86c2	18		clc				clc
.86c3	65 36		adc $36				adc 	zTemp0
.86c5	ca		dex				dex
.86c6	10 fa		bpl $86c2			bpl 	_GXTimesRowNumber
.86c8	64 37		stz $37				stz 	gxzTemp0+1
.86ca	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cb	26 37		rol $37				rol 	gxzTemp0+1
.86cd	0a		asl a				asl 	a 							; row x 4,8,12,16
.86ce	26 37		rol $37				rol 	gxzTemp0+1
.86d0	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d1	26 37		rol $37				rol 	gxzTemp0+1
.86d3	85 36		sta $36				sta 	gxzTemp0
.86d5	18		clc				clc 								; add base address.
.86d6	a5 36		lda $36				lda 	gxzTemp0
.86d8	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86db	85 36		sta $36				sta 	gxzTemp0
.86dd	a5 37		lda $37				lda 	gxzTemp0+1
.86df	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e2					_GXSAFindPage:
.86e2	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e4	90 06		bcc $86ec			bcc 	_GXSAFoundPage
.86e6	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e8	e6 0b		inc $0b				inc 	GXEditSlot
.86ea	80 f6		bra $86e2			bra 	_GXSAFindPage
.86ec					_GXSAFoundPage:
.86ec	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ee	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f0	a0 00		ldy #$00			ldy 	#0
.86f2					_GXSACopyLoop:
.86f2	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f4	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f7	c8		iny				iny
.86f8	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fb	d0 f5		bne $86f2			bne 	_GXSACopyLoop
.86fd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86fe					GXSelect:
.86fe	ad 39 06	lda $0639			lda 	gxSpritesOn
.8701	f0 1f		beq $8722			beq 	_GXSFail
.8703	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8705	c9 40		cmp #$40			cmp 	#64
.8707	b0 19		bcs $8722			bcs 	_GXSFail
.8709	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870d	06 36		asl $36				asl 	gxzTemp0
.870f	06 36		asl $36				asl 	gxzTemp0
.8711	06 36		asl $36				asl 	gxzTemp0
.8713	2a		rol a				rol 	a
.8714	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8716	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8719	85 37		sta $37				sta 	gxzTemp0+1
.871b	a5 36		lda $36				lda 	gxzTemp0
.871d	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8720	18		clc				clc
.8721	60		rts				rts
.8722					_GXSFail:
.8722	38		sec				sec
.8723	60		rts				rts
.8724					GXSelectImage:
.8724	ad 39 06	lda $0639			lda 	gxSpritesOn
.8727	f0 5e		beq $8787			beq 	_GXSIFail
.8729	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.872c	f0 59		beq $8787			beq 	_GXSIFail
.872e	64 01		stz $01				stz 	1
.8730	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8732	d0 43		bne $8777			bne 	_GXSIHide
.8734	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8736	48		pha				pha
.8737	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.873a	68		pla				pla
.873b	20 4d 88	jsr $884d			jsr 	GXFindSprite
.873e	a0 01		ldy #$01			ldy 	#1
.8740	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8743	85 36		sta $36				sta 	gxzTemp0
.8745	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8748	85 37		sta $37				sta 	gxzTemp0+1
.874a	ad 61 06	lda $0661			lda 	GXSpriteOffset
.874d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.874f	18		clc				clc
.8750	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8753	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8756	c8		iny				iny
.8757	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8759	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.875c	69 00		adc #$00			adc 	#0
.875e	c8		iny				iny
.875f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8761	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8764	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8766	2a		rol a				rol 	a 							; x 2
.8767	0a		asl a				asl 	a 							; x 4
.8768	0a		asl a				asl 	a 							; x 8
.8769	0a		asl a				asl 	a 							; x 16
.876a	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.876d	0a		asl a				asl 	a 							; 1 shift
.876e	09 01		ora #$01			ora 	#1 							; enable sprite.
.8770	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8772	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8775	18		clc				clc
.8776	60		rts				rts
.8777					_GXSIHide:
.8777	ad 45 06	lda $0645			lda 	GSCurrentSprite
.877a	85 36		sta $36				sta 	gxzTemp0
.877c	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.877f	85 37		sta $37				sta 	gxzTemp0+1
.8781	a9 00		lda #$00			lda 	#0
.8783	92 36		sta ($36)			sta 	(gxzTemp0)
.8785	18		clc				clc
.8786	60		rts				rts
.8787					_GXSIFail:
.8787	38		sec				sec
.8788	60		rts				rts
.8789					GXMoveSprite:
.8789	ad 39 06	lda $0639			lda 	gxSpritesOn
.878c	f0 2e		beq $87bc			beq 	_GXSIFail
.878e	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8791	f0 29		beq $87bc			beq 	_GXSIFail
.8793	85 37		sta $37				sta 	gxzTemp0+1
.8795	a0 04		ldy #$04			ldy 	#4
.8797	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879a	85 36		sta $36				sta 	gxzTemp0
.879c	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.879e	38		sec				sec
.879f	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a2	4a		lsr a				lsr 	a
.87a3	48		pha				pha
.87a4	18		clc				clc
.87a5	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87a8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87aa	c8		iny				iny
.87ab	ad 32 06	lda $0632			lda 	gxX0+1
.87ae	69 00		adc #$00			adc 	#0
.87b0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b2	c8		iny				iny
.87b3	68		pla				pla
.87b4	18		clc				clc
.87b5	6d 33 06	adc $0633			adc 	gxY0
.87b8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ba	18		clc				clc
.87bb	60		rts				rts
.87bc					_GXSIFail:
.87bc	38		sec				sec
.87bd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87be					GXOpenBitmap:
.87be	78		sei				sei 								; no interrupts here
.87bf	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c1	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c4	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c6	85 00		sta $00				sta 	0
.87c8	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87ca	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87cd	58		cli				cli
.87ce	60		rts				rts
.87cf					GXCloseBitmap:
.87cf	78		sei				sei
.87d0	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d3	85 0b		sta $0b				sta 	GXEditSlot
.87d5	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87d8	85 00		sta $00				sta 	0
.87da	58		cli				cli
.87db	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87dc					GXPositionCalc:
.87dc	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87de	48		pha				pha
.87df	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e2	85 3c		sta $3c				sta 	gxzScreen
.87e4	64 3d		stz $3d				stz 	gxzScreen+1
.87e6	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87e8	26 3d		rol $3d				rol 	gxzScreen+1
.87ea	06 3c		asl $3c				asl 	gxzScreen
.87ec	26 3d		rol $3d				rol 	gxzScreen+1
.87ee	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87ef	65 3c		adc $3c				adc 	gxzScreen
.87f1	85 3c		sta $3c				sta 	gxzScreen
.87f3	90 02		bcc $87f7			bcc 	_GXPCNoCarry
.87f5	e6 3d		inc $3d				inc 	gxzScreen+1
.87f7					_GXPCNoCarry:
.87f7	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87f9	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fb	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87fd	85 36		sta $36				sta 	gxzTemp0
.87ff	64 3d		stz $3d				stz 	gxzScreen+1
.8801	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8803					_GXPCMultiply32:
.8803	06 3c		asl $3c				asl 	gxzScreen
.8805	26 3d		rol $3d				rol 	gxzScreen+1
.8807	3a		dec a				dec 	a
.8808	d0 f9		bne $8803			bne 	_GXPCMultiply32
.880a	18		clc				clc
.880b	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.880e	65 3c		adc $3c				adc 	gxzScreen
.8810	8d 44 06	sta $0644			sta 	gsOffset
.8813	ad 32 06	lda $0632			lda 	GXX0+1
.8816	65 3d		adc $3d				adc 	gxzScreen+1
.8818	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881a	90 04		bcc $8820			bcc 	_GXPCNoOverflow
.881c	29 1f		and #$1f			and 	#$1F 						; fix it up
.881e	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8820					_GXPCNoOverflow:
.8820	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8822	85 3d		sta $3d				sta 	gxzScreen+1
.8824	64 3c		stz $3c				stz 	gxzScreen
.8826	18		clc				clc
.8827	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8829	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882c	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.882e	68		pla				pla
.882f	85 36		sta $36				sta 	gxzTemp0
.8831	60		rts				rts
.8832					GXMovePositionDown:
.8832	18		clc				clc 								; add 320 to offset/temp+1
.8833	ad 44 06	lda $0644			lda 	gsOffset
.8836	69 40		adc #$40			adc 	#64
.8838	8d 44 06	sta $0644			sta 	gsOffset
.883b	a5 3d		lda $3d				lda 	gxzScreen+1
.883d	69 01		adc #$01			adc 	#1
.883f	85 3d		sta $3d				sta 	gxzScreen+1
.8841	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8843	90 07		bcc $884c			bcc 	_GXMPDExit
.8845	38		sec				sec  								; next page
.8846	e9 20		sbc #$20			sbc 	#$20
.8848	85 3d		sta $3d				sta 	gxzScreen+1
.884a	e6 0b		inc $0b				inc 	GXEditSlot
.884c					_GXMPDExit:
.884c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884d					GXFindSprite:
.884d	aa		tax				tax
.884e	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8851	85 0b		sta $0b				sta 	GXEditSlot
.8853	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8856	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8859	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885c	48		pha				pha 								; save twice
.885d	48		pha				pha
.885e	29 03		and #$03			and 	#3 							; get sprite size
.8860	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8863	aa		tax				tax
.8864	bd 85 88	lda $8885,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8867	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886a	68		pla				pla 								; get LUT
.886b	4a		lsr a				lsr		a
.886c	4a		lsr a				lsr		a
.886d	29 03		and #$03			and 	#3
.886f	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8872	68		pla				pla 								; address, neeeds to be x 4
.8873	29 f0		and #$f0			and 	#$F0
.8875	8d 61 06	sta $0661			sta 	GXSpriteOffset
.8878	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887b	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.887e	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8881	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8884	60		rts				rts
.8885					_GXFXSSTTable:
>8885	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8889					GXSortXY:
.8889	20 a7 88	jsr $88a7			jsr 	GXSortY 					; will be sorted on Y now
.888c	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.888f	cd 35 06	cmp $0635			cmp 	gxX1
.8892	ad 32 06	lda $0632			lda 	gXX0+1
.8895	ed 36 06	sbc $0636			sbc 	gXX1+1
.8898	90 0c		bcc $88a6			bcc 	_GXSXYExit 					; X0 < X1 exit
.889a	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889c	a0 04		ldy #$04			ldy 	#4
.889e	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a1	e8		inx				inx
.88a2	c8		iny				iny
.88a3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a6					_GXSXYExit:
.88a6	60		rts				rts
.88a7					GXSortY:
.88a7	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88aa	cd 37 06	cmp $0637			cmp 	gxY1
.88ad	90 0b		bcc $88ba			bcc 	_GXSYSorted
.88af	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b1	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b3					_GXSwap1:
.88b3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88b6	88		dey				dey
.88b7	ca		dex				dex
.88b8	10 f9		bpl $88b3			bpl 	_GXSwap1
.88ba					_GXSYSorted:
.88ba	60		rts				rts
.88bb					GXSwapXY:
.88bb	bd 31 06	lda $0631,x			lda 	gxX0,x
.88be	48		pha				pha
.88bf	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c2	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c5	68		pla				pla
.88c6	99 31 06	sta $0631,y			sta 	gxX0,y
.88c9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88ca					AssembleGroup1:
.88ca	a9 ff		lda #$ff			lda 	#$FF
.88cc	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88cf	80 02		bra $88d3			bra 	AsmGroup12
.88d1					AssembleGroup2:
.88d1	a5 00		lda $00				lda 	$00
.88d3					AsmGroup12:
.88d3	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88d6	68		pla				pla 								; pop the return address to access the information following.
.88d7	fa		plx				plx
.88d8	20 61 89	jsr $8961			jsr 	AccessParameters 			; get opcode and save as base
.88db	8d a4 04	sta $04a4			sta 	BaseOpcode
.88de	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88e1	d0 08		bne $88eb			bne 	_AG12HaveMask
.88e3	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88e5	20 69 89	jsr $8969			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.88e8	8d a5 04	sta $04a5			sta 	ModeMask
.88eb					_AG12HaveMask:
.88eb	20 a4 8a	jsr $8aa4			jsr 	TypeAndCalculateOperand 	; get zero page type
.88ee	da		phx				phx 								; save found address mode
.88ef	20 cd 89	jsr $89cd			jsr 	AssembleModeX
.88f2	fa		plx				plx  								; restore address mode
.88f3	b0 0b		bcs $8900			bcs 	_AG12Exit
.88f5	20 01 89	jsr $8901			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.88f8	20 cd 89	jsr $89cd			jsr 	AssembleModeX
.88fb	b0 03		bcs $8900			bcs 	_AG12Exit
.88fd	4c d1 b2	jmp $b2d1			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8900					_AG12Exit:
.8900	60		rts				rts
.8901					PromoteToAbsolute:
.8901	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8903	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8905	f0 19		beq $8920			beq 	_PTADo
.8907	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8909	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.890b	f0 13		beq $8920			beq 	_PTADo
.890d	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.890f	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8911	f0 0d		beq $8920			beq 	_PTADo
.8913	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8915	e0 d1		cpx #$d1			cpx 	#AM_IND
.8917	f0 07		beq $8920			beq 	_PTADo
.8919	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.891b	e0 c0		cpx #$c0			cpx 	#AM_INDX
.891d	f0 01		beq $8920			beq 	_PTADo
.891f	60		rts				rts
.8920					_PTADo:
.8920	aa		tax				tax
.8921	60		rts				rts
.8922					AssembleGroup3:
.8922	68		pla				pla 								; get parameters, which is just the opcode.
.8923	fa		plx				plx
.8924	20 61 89	jsr $8961			jsr 	AccessParameters 			; get and output opcode
.8927	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.892a	20 08 8b	jsr $8b08			jsr 	CalculateOperand 			; get a 16 bit operand
.892d	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8930	38		sec				sec
.8931	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8934	48		pha				pha 								; LSB in A
.8935	ad 10 04	lda $0410			lda 	NSMantissa1
.8938	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.893b	aa		tax				tax 								; MSB in X
.893c	68		pla				pla
.893d	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.893e	69 7f		adc #$7f			adc 	#$7F
.8940	90 01		bcc $8943			bcc 	_AG3NoCarry
.8942	e8		inx				inx
.8943					_AG3NoCarry:
.8943	38		sec				sec 								; fix back and write out anyways.
.8944	e9 80		sbc #$80			sbc 	#$80
.8946	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.8949	e0 00		cpx #$00			cpx 	#0 							; was it in range
.894b	f0 0a		beq $8957			beq 	_AG3Exit
.894d	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8950	29 01		and #$01			and 	#1
.8952	f0 03		beq $8957			beq 	_AG3Exit
.8954	4c d6 b2	jmp $b2d6			jmp 	RangeError 					; no, branch is out of range
.8957					_AG3Exit:
.8957	60		rts				rts
.8958					AssembleGroup4:
.8958	68		pla				pla 								; pop address
.8959	fa		plx				plx
.895a	20 61 89	jsr $8961			jsr 	AccessParameters 			; access and get first
.895d	20 79 89	jsr $8979			jsr 	AssemblerWriteByte 			; output it.
.8960	60		rts				rts
.8961					AccessParameters:
.8961	8d a1 04	sta $04a1			sta 	ParamStart
.8964	8e a2 04	stx $04a2			stx 	ParamStart+1
.8967	a9 01		lda #$01			lda 	#1
.8969					GetParameter:
.8969	5a		phy				phy
.896a	a8		tay				tay
.896b	ad a1 04	lda $04a1			lda 	ParamStart
.896e	85 36		sta $36				sta 	zTemp0
.8970	ad a2 04	lda $04a2			lda 	ParamStart+1
.8973	85 37		sta $37				sta 	zTemp0+1
.8975	b1 36		lda ($36),y			lda 	(zTemp0),y
.8977	7a		ply				ply
.8978	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8979					AssemblerWriteByte:
.8979	48		pha			pha
.897a	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.897d	29 02		and #$02		and 	#2
.897f	f0 1b		beq $899c		beq 	_AWBNoPrint
.8981	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8984	20 b7 89	jsr $89b7		jsr 	PrintHex
.8987	ad 9e 04	lda $049e		lda		AssemblerAddress
.898a	20 b7 89	jsr $89b7		jsr 	PrintHex
.898d	a9 20		lda #$20		lda 	#' '
.898f	20 88 b4	jsr $b488		jsr 	EXTPrintCharacter
.8992	68		pla			pla 									; print byte
.8993	48		pha			pha
.8994	20 b7 89	jsr $89b7		jsr 	PrintHex
.8997	a9 0d		lda #$0d		lda 	#13
.8999	20 88 b4	jsr $b488		jsr 	EXTPrintCharacter
.899c					_AWBNoPrint:
.899c	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.899f	85 36		sta $36			sta 	zTemp0
.89a1	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89a4	f0 0e		beq $89b4		beq 	_AWBRange
.89a6	85 37		sta $37			sta 	zTemp0+1
.89a8	68		pla			pla 									; write byte out
.89a9	92 36		sta ($36)		sta 	(zTemp0)
.89ab	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89ae	d0 03		bne $89b3		bne 	_AWBNoCarry
.89b0	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89b3					_AWBNoCarry:
.89b3	60		rts			rts
.89b4					_AWBRange:
.89b4	4c d6 b2	jmp $b2d6		jmp 	RangeError
.89b7					PrintHex:
.89b7	48		pha				pha
.89b8	4a		lsr a				lsr 	a
.89b9	4a		lsr a				lsr 	a
.89ba	4a		lsr a				lsr 	a
.89bb	4a		lsr a				lsr 	a
.89bc	20 c0 89	jsr $89c0			jsr 	_PrintNibble
.89bf	68		pla				pla
.89c0					_PrintNibble:
.89c0	29 0f		and #$0f			and 	#15
.89c2	c9 0a		cmp #$0a			cmp 	#10
.89c4	90 02		bcc $89c8			bcc 	_NoShift
.89c6	69 06		adc #$06			adc 	#6
.89c8					_NoShift:
.89c8	69 30		adc #$30			adc 	#48
.89ca	4c 88 b4	jmp $b488			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89cd					AssembleModeX:
.89cd	5a		phy				phy
.89ce	ad a3 04	lda $04a3			lda 	IsGroup1
.89d1	f0 17		beq $89ea			beq 	_AMXGroup2
.89d3	8a		txa				txa 							; is it in group # 1
.89d4	29 40		and #$40			and 	#AM_ISG1
.89d6	f0 50		beq $8a28			beq 	_AMXFail 				; no, give up.
.89d8	8a		txa				txa 							; get back.
.89d9	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89db	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89dd	d0 22		bne $8a01			bne 	_AMXHaveInfo
.89df	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89e2	c9 81		cmp #$81			cmp 	#$81
.89e4	f0 42		beq $8a28			beq 	_AMXFail
.89e6	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.89e8	80 17		bra $8a01			bra 	_AMXHaveInfo 			; odd design decision there.
.89ea					_AMXGroup2:
.89ea	8a		txa				txa 							; is it in group 2 ?
.89eb	29 20		and #$20			and 	#AM_ISG2
.89ed	f0 39		beq $8a28			beq 	_AMXFail 				; no, give up.
.89ef	8a		txa				txa 							; get the offset into Y
.89f0	29 1f		and #$1f			and 	#$1F
.89f2	4a		lsr a				lsr 	a 						; make it 0-7.
.89f3	4a		lsr a				lsr  	a
.89f4	a8		tay				tay
.89f5	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.89f8					_AMXCheckOkay:
.89f8	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.89f9	88		dey				dey
.89fa	10 fc		bpl $89f8			bpl 	_AMXCheckOkay
.89fc	90 2a		bcc $8a28			bcc 	_AMXFail 				; not allowed.
.89fe	8a		txa				txa  							; get mask back
.89ff	29 1f		and #$1f			and 	#$1F
.8a01					_AMXHaveInfo:
.8a01	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a03	10 05		bpl $8a0a			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a05	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a08	d0 1e		bne $8a28			bne 	_AMXFail
.8a0a					_AMXAnySize:
.8a0a	18		clc				clc 							; add offset to the base opcode
.8a0b	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a0e					_AMXOutputCode:
.8a0e	20 79 89	jsr $8979			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a11	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a13	f0 10		beq $8a25			beq 	_AMXExit
.8a15	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a18	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.8a1b	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a1d	30 06		bmi $8a25			bmi 	_AMXExit
.8a1f	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a22	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.8a25					_AMXExit:
.8a25	7a		ply				ply
.8a26	38		sec				sec
.8a27	60		rts				rts
.8a28					_AMXFail:
.8a28	a0 00		ldy #$00			ldy 	#0
.8a2a					_AMXCheckOddities:
.8a2a	8a		txa				txa
.8a2b	d9 53 8a	cmp $8a53,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a2e	d0 16		bne $8a46			bne 	_AMXCONext
.8a30	b9 51 8a	lda $8a51,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a33	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a36	d0 0e		bne $8a46			bne 	_AMXCONext
.8a38	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a3a	10 05		bpl $8a41			bpl 	_AMXCONotZero
.8a3c	ad 10 04	lda $0410			lda 	NSMantissa1
.8a3f	d0 05		bne $8a46			bne 	_AMXCONext
.8a41					_AMXCONotZero:
.8a41	b9 52 8a	lda $8a52,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a44	80 c8		bra $8a0e			bra 	_AMXOutputCode 			; and assemble it
.8a46					_AMXCONext:
.8a46	c8		iny				iny
.8a47	c8		iny				iny
.8a48	c8		iny				iny
.8a49	b9 51 8a	lda $8a51,y			lda 	ExtraOpcode+0,y 		; end of table
.8a4c	d0 dc		bne $8a2a			bne 	_AMXCheckOddities
.8a4e					_AMXCOFail:
.8a4e	7a		ply				ply
.8a4f	18		clc				clc
.8a50	60		rts				rts
.8a51					ExtraOpcode:
>8a51	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a54	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a57	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a5a	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a5d	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a60	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a63	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a66	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a69	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a6c	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a6f	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a70					LabelHere:
.8a70	c8		iny				iny 								; skip .
.8a71	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a73	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm 				; get a term
.8a76	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a79	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a7b	d0 24		bne $8aa1			bne 	_ALType
.8a7d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a80	85 36		sta $36				sta 	zTemp0
.8a82	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a85	85 37		sta $37				sta 	zTemp0+1
.8a87	5a		phy				phy 								; copy address in.
.8a88	a0 01		ldy #$01			ldy 	#1
.8a8a	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8a8d	92 36		sta ($36)			sta 	(zTemp0)
.8a8f	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8a92	91 36		sta ($36),y			sta 	(zTemp0),y
.8a94	c8		iny				iny
.8a95	a9 00		lda #$00			lda 	#0
.8a97	91 36		sta ($36),y			sta 	(zTemp0),y
.8a99	c8		iny				iny
.8a9a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9c	c8		iny				iny
.8a9d	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9f	7a		ply				ply
.8aa0	60		rts				rts
.8aa1					_ALType:
.8aa1	4c db b2	jmp $b2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8aa4					TypeAndCalculateOperand:
.8aa4	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa6	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8aa8	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8aaa	f0 5b		beq $8b07			beq 	_TACOExit
.8aac	c9 80		cmp #$80			cmp 	#KWC_EOL
.8aae	f0 57		beq $8b07			beq 	_TACOExit
.8ab0	c8		iny				iny
.8ab1	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ab3	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ab5	f0 51		beq $8b08			beq 	CalculateOperand
.8ab7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ab9	f0 1f		beq $8ada			beq 	_TACOIndirect
.8abb	88		dey				dey 								; undo get of first character
.8abc	20 08 8b	jsr $8b08			jsr 	CalculateOperand 			; get operand
.8abf	b1 30		lda ($30),y			lda 	(codePtr),y
.8ac1	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8ac3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ac5	d0 40		bne $8b07			bne 	_TACOExit
.8ac7	c8		iny				iny
.8ac8	20 62 ac	jsr $ac62			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8acb	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8acd	c9 58		cmp #$58			cmp 	#'X'
.8acf	f0 36		beq $8b07			beq 	_TACOExit
.8ad1	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ad3	c9 59		cmp #$59			cmp 	#'Y'
.8ad5	f0 30		beq $8b07			beq 	_TACOExit
.8ad7					_TACOSyntax:
.8ad7	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.8ada					_TACOIndirect:
.8ada	20 08 8b	jsr $8b08			jsr 	CalculateOperand 			; get the operand
.8add	b1 30		lda ($30),y			lda 	(codePtr),y
.8adf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8ae1	f0 17		beq $8afa			beq 	_TACOIndX
.8ae3	20 eb ac	jsr $aceb			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8ae6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae8	a2 d1		ldx #$d1			ldx 	#AM_IND
.8aea	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8aec	d0 19		bne $8b07			bne 	_TACOExit
.8aee	c8		iny				iny
.8aef	20 62 ac	jsr $ac62			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8af2	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8af4	d0 e1		bne $8ad7			bne 	_TACOSyntax
.8af6	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8af8	80 0d		bra $8b07			bra 	_TACOExit
.8afa					_TACOIndX:
.8afa	c8		iny				iny
.8afb	20 62 ac	jsr $ac62			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8afe	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b00	d0 d5		bne $8ad7			bne 	_TACOSyntax
.8b02	20 eb ac	jsr $aceb			jsr 	CheckRightBracket			; check )
.8b05	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b07					_TACOExit:
.8b07	60		rts				rts
.8b08					CalculateOperand:
.8b08	48		pha				pha
.8b09	da		phx				phx
.8b0a	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b0c	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.8b0f	fa		plx				plx
.8b10	68		pla				pla
.8b11	60		rts				rts
.ac62					TACOCheckXY:
.ac62	b1 30		lda ($30),y			lda 	(codePtr),y
.ac64	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ac66	c9 40		cmp #$40			cmp 	#$40
.ac68	d0 21		bne $ac8b			bne 	_TCXYFail
.ac6a	b1 30		lda ($30),y			lda 	(codePtr),y
.ac6c	18		clc				clc
.ac6d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ac6f	85 37		sta $37				sta 	zTemp0+1
.ac71	c8		iny				iny
.ac72	b1 30		lda ($30),y			lda 	(codePtr),y
.ac74	c8		iny				iny
.ac75	85 36		sta $36				sta 	zTemp0
.ac77	5a		phy				phy 								; save position
.ac78	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ac7a	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac7c	d0 0c		bne $ac8a			bne 	_TCXYPopFail
.ac7e	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ac80	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac82	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ac84	f0 08		beq $ac8e			beq 	_TCXYFound
.ac86	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ac88	f0 04		beq $ac8e			beq 	_TCXYFound
.ac8a					_TCXYPopFail:
.ac8a	7a		ply				ply
.ac8b					_TCXYFail:
.ac8b	a9 00		lda #$00			lda 	#0
.ac8d	60		rts				rts
.ac8e					_TCXYFound:
.ac8e	7a		ply				ply 								; restore position
.ac8f	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ac91	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b12					EditProgramCode:
.8b12	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b15	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b18	20 22 a5	jsr $a522			jsr 	MemorySearch
.8b1b	90 05		bcc $8b22			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b1d	d0 03		bne $8b22			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b1f	20 13 b5	jsr $b513			jsr 	MemoryDeleteLine 			; delete the line
.8b22					_EPCNoDelete:
.8b22	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b25	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b27	f0 0d		beq $8b36			beq 	_EPCNoInsert
.8b29	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b2c	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b2f	20 22 a5	jsr $a522			jsr 	MemorySearch
.8b32	18		clc				clc 								; insert at this point.
.8b33	20 4a b5	jsr $b54a			jsr 	MemoryInsertLine 			; insert the line
.8b36					_EPCNoInsert:
.8b36	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b37					WarmStart:
.8b37	a2 ff		ldx #$ff			ldx 	#$FF
.8b39	9a		txs				txs
.8b3a	20 9e b4	jsr $b49e			jsr 	EXTInputLine 				; get line to lineBuffer
.8b3d	20 e3 a9	jsr $a9e3			jsr 	TokeniseLine 				; tokenise the line
.8b40	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8b43	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8b46	d0 17		bne $8b5f			bne 	_WSEditCode 				; if so,edit code.
.8b48	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b4b	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8b4d	85 30		sta $30				sta 	codePtr
.8b4f	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b51	85 31		sta $31				sta 	codePtr+1
.8b53	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8b56	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b58	f0 dd		beq $8b37			beq 	WarmStart
.8b5a	20 68 94	jsr $9468			jsr 	RUNCodePointerLine 			; execute that line.
.8b5d	80 d8		bra $8b37			bra 	WarmStart
.8b5f					_WSEditCode:
.8b5f	20 12 8b	jsr $8b12			jsr 	EditProgramCode
.8b62	20 d0 8b	jsr $8bd0			jsr 	ClearCommand
.8b65	80 d0		bra $8b37			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b67					AssembleCommand:
.8b67	a2 00		ldx #$00			ldx 	#0
.8b69	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger 		; start address
.8b6c	ad 08 04	lda $0408			lda 	NSMantissa0
.8b6f	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b72	ad 10 04	lda $0410			lda 	NSMantissa1
.8b75	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b78	20 f3 ac	jsr $acf3			jsr 	CheckComma
.8b7b	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; options
.8b7e	ad 08 04	lda $0408			lda 	NSMantissa0
.8b81	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b84	60		rts				rts
.8b85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b86					AssertCommand:
.8b86	a2 00		ldx #$00			ldx 	#0
.8b88	20 26 a4	jsr $a426			jsr 	EvaluateInteger 			; the assert test
.8b8b	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; exit if result is non zero.
.8b8e	d0 05		bne $8b95			bne 	_ACExit
.8b90	a9 0a		lda #$0a		lda	#10
.8b92	4c eb 98	jmp $98eb		jmp	ErrorHandler
.8b95					_ACExit:
.8b95	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8b96					CallCommand:
.8b96	a2 00		ldx #$00			ldx 	#0
.8b98	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.8b9b					_CCClear
.8b9b	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8b9c	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.8b9f	e0 04		cpx #$04			cpx 	#4
.8ba1	d0 f8		bne $8b9b			bne 	_CCClear
.8ba3	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8ba5					_CCCParam:
.8ba5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ba9	d0 09		bne $8bb4			bne 	_CCCRun6502
.8bab	c8		iny				iny 								; skip comma
.8bac	e8		inx				inx	 								; next level
.8bad	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bb0	e0 03		cpx #$03			cpx 	#3
.8bb2	90 f1		bcc $8ba5			bcc 	_CCCParam 					; done all 3 ?
.8bb4					_CCCRun6502:
.8bb4	5a		phy				phy 								; save position
.8bb5	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bb8	85 37		sta $37				sta 	zTemp0+1
.8bba	ad 08 04	lda $0408			lda 	NSMantissa0
.8bbd	85 36		sta $36				sta 	zTemp0
.8bbf	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bc2	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bc5	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bc8	20 cd 8b	jsr $8bcd			jsr 	_CCCZTemp0 					; call zTemp0
.8bcb	7a		ply				ply 								; restore position and exit
.8bcc	60		rts				rts
.8bcd					_CCCZTemp0:
.8bcd	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bd0					ClearCommand:
.8bd0	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bd2	85 36		sta $36				sta 	0+zTemp0
.8bd4	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bd6	85 37		sta $37				sta 	1+zTemp0
.8bd8					_ClearZeroLoop:
.8bd8	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8bda	f0 24		beq $8c00			beq 	_ClearZeroEnd
.8bdc	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8bde	a9 00		lda #$00			lda 	#0
.8be0					_ClearOneVariable:
.8be0	91 36		sta ($36),y			sta 	(zTemp0),y
.8be2	c8		iny				iny
.8be3	c0 08		cpy #$08			cpy 	#8
.8be5	d0 f9		bne $8be0			bne 	_ClearOneVariable
.8be7	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8be9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8beb	c9 18		cmp #$18			cmp 	#NSTProcedure
.8bed	d0 04		bne $8bf3			bne 	_ClearNotProcedure
.8bef	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8bf1	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf3					_ClearNotProcedure:
.8bf3	18		clc				clc 								; go to the next variable
.8bf4	b2 36		lda ($36)			lda 	(zTemp0)
.8bf6	65 36		adc $36				adc 	zTemp0
.8bf8	85 36		sta $36				sta 	zTemp0
.8bfa	90 dc		bcc $8bd8			bcc 	_ClearZeroLoop
.8bfc	e6 37		inc $37				inc 	zTemp0+1
.8bfe	80 d8		bra $8bd8			bra 	_ClearZeroLoop
.8c00					_ClearZeroEnd:
.8c00	18		clc				clc
.8c01	a5 36		lda $36				lda 	zTemp0
.8c03	69 01		adc #$01			adc 	#1
.8c05	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c08	a5 37		lda $37				lda 	zTemp0+1
.8c0a	69 00		adc #$00			adc 	#0
.8c0c	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c0f	20 dc a5	jsr $a5dc			jsr 	StackReset
.8c12	20 2d b6	jsr $b62d			jsr 	StringSystemInitialise
.8c15	20 0b 98	jsr $980b			jsr 	ProcedureScan
.8c18	20 24 94	jsr $9424			jsr 	Command_Restore
.8c1b	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c1e	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c21	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c24	20 b8 a1	jsr $a1b8			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c28					Command_Data:
.8c28	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c2a	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c2c	20 5d 98	jsr $985d			jsr 	ScanForward
.8c2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c30					DimCommand:
.8c30	b1 30		lda ($30),y			lda 	(codePtr),y
.8c32	29 c0		and #$c0			and 	#$C0
.8c34	c9 40		cmp #$40			cmp 	#$40
.8c36	d0 7a		bne $8cb2			bne 	_DCSyntax
.8c38	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3a	18		clc				clc
.8c3b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c3d	85 3f		sta $3f				sta 	zaTemp+1
.8c3f	c8		iny				iny
.8c40	b1 30		lda ($30),y			lda 	(codePtr),y
.8c42	c8		iny				iny
.8c43	85 3e		sta $3e				sta 	zaTemp
.8c45	5a		phy				phy
.8c46	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c48	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c4a	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c4c	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c4e	f0 62		beq $8cb2			beq 	_DCSyntax
.8c50	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c52	29 04		and #$04			and 	#NSBIsArray
.8c54	f0 64		beq $8cba			beq 	_DCType
.8c56	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c58	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c5a	d0 59		bne $8cb5			bne 	_DCRedefine
.8c5c	7a		ply				ply
.8c5d	20 bd 8c	jsr $8cbd			jsr 	_DCGetSize 				; get array size, check it.
.8c60	5a		phy				phy
.8c61	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c63	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c65	7a		ply				ply 							; is there a second (e.g. ,x)
.8c66	b1 30		lda ($30),y			lda 	(codePtr),y
.8c68	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c6a	d0 0a		bne $8c76			bne 	_DCOneDimension
.8c6c	c8		iny				iny 							; skip comma
.8c6d	20 bd 8c	jsr $8cbd			jsr 	_DCGetSize 				; get 2nd array size
.8c70	5a		phy				phy
.8c71	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c73	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c75	7a		ply				ply
.8c76					_DCOneDimension:
.8c76	5a		phy				phy 							; save position
.8c77	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c79	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c7b	aa		tax				tax
.8c7c	c8		iny				iny
.8c7d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c7f	e8		inx				inx 							; bump them.
.8c80	1a		inc a				inc 	a
.8c81	20 6d b1	jsr $b16d			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c84	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8c86	29 e0		and #$e0			and 	#$E0
.8c88	d0 23		bne $8cad			bne 	_DCSize
.8c8a	a0 02		ldy #$02			ldy 	#2 						; get base type
.8c8c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c8e	20 cb 8c	jsr $8ccb			jsr 	ScaleByBaseType 		; scale by base type
.8c91	a5 36		lda $36				lda 	zTemp0
.8c93	a6 37		ldx $37				ldx 	zTemp0+1
.8c95	20 7a a1	jsr $a17a			jsr 	AllocateXABytes 		; allocate memory
.8c98	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8c9a	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c9c	c8		iny				iny
.8c9d	8a		txa				txa
.8c9e	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca0	7a		ply				ply 							; get position back
.8ca1	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 		; check )
.8ca4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca6	c8		iny				iny 							; consume in case
.8ca7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8ca9	f0 85		beq $8c30			beq 	DimCommand
.8cab	88		dey				dey 							; undo consume
.8cac	60		rts				rts
.8cad					_DCSize:
.8cad	a9 16		lda #$16		lda	#22
.8caf	4c eb 98	jmp $98eb		jmp	ErrorHandler
.8cb2					_DCSyntax:
.8cb2	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.8cb5					_DCRedefine:
.8cb5	a9 15		lda #$15		lda	#21
.8cb7	4c eb 98	jmp $98eb		jmp	ErrorHandler
.8cba					_DCType:
.8cba	4c db b2	jmp $b2db			jmp 	TypeError
.8cbd					_DCGetSize:
.8cbd	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cbf	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 	; get array dimension
.8cc2	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cc4	f0 e7		beq $8cad			beq 	_DCSize
.8cc6	c9 fe		cmp #$fe			cmp 	#254
.8cc8	f0 e3		beq $8cad			beq 	_DCSize
.8cca	60		rts				rts
.8ccb					ScaleByBaseType:
.8ccb	29 10		and #$10			and 	#NSBIsString 			; is it string
.8ccd	d0 19		bne $8ce8			bne 	_SBBTString
.8ccf	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cd1	48		pha				pha
.8cd2	a5 36		lda $36				lda 	zTemp0
.8cd4	48		pha				pha
.8cd5	06 36		asl $36				asl 	zTemp0 					; x 2
.8cd7	26 37		rol $37				rol 	zTemp0+1
.8cd9	06 36		asl $36				asl 	zTemp0 					; x 4
.8cdb	26 37		rol $37				rol 	zTemp0+1
.8cdd	68		pla				pla 							; add stacked value = x 5
.8cde	65 36		adc $36				adc 	zTemp0
.8ce0	85 36		sta $36				sta 	zTemp0
.8ce2	68		pla				pla
.8ce3	65 37		adc $37				adc 	zTemp0+1
.8ce5	85 37		sta $37				sta 	zTemp0+1
.8ce7	60		rts				rts
.8ce8					_SBBTString:
.8ce8	06 36		asl $36				asl 	zTemp0
.8cea	26 37		rol $37				rol 	zTemp0+1
.8cec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8ced					EndCommand:
.8ced	4c 37 8b	jmp $8b37			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8cf0					UnaryEvent:
.8cf0	fa		plx				plx
.8cf1	20 a1 96	jsr $96a1			jsr 	TimerToStackX 				; timer in +0
.8cf4	e8		inx				inx  								; put reference into +1
.8cf5	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm
.8cf8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8cfb	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8cfd	d0 57		bne $8d56			bne 	_UEType
.8cff	e8		inx				inx 								; put the step in +2
.8d00	20 f3 ac	jsr $acf3			jsr 	CheckComma
.8d03	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.8d06	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.8d09	ca		dex				dex
.8d0a	ca		dex				dex
.8d0b	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy reference to zTemp0
.8d0e	85 36		sta $36				sta 	zTemp0
.8d10	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8d13	85 37		sta $37				sta 	zTemp0+1
.8d15	5a		phy				phy
.8d16	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d18	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d1a	30 36		bmi $8d52			bmi 	_UEFalse
.8d1c	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d1e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d21	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d23	c8		iny				iny
.8d24	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d27	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d29	c8		iny				iny
.8d2a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d2d	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d2f	90 21		bcc $8d52			bcc 	_UEFalse 					; no, return FALSE.
.8d31	18		clc				clc
.8d32	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d34	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d37	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d3a	91 36		sta ($36),y			sta 	(zTemp0),y
.8d3c	c8		iny				iny
.8d3d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d40	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d43	91 36		sta ($36),y			sta 	(zTemp0),y
.8d45	c8		iny				iny
.8d46	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d49	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d4c	91 36		sta ($36),y			sta 	(zTemp0),y
.8d4e	7a		ply				ply
.8d4f	4c 58 99	jmp $9958			jmp 	ReturnTrue
.8d52					_UEFalse:
.8d52	7a		ply				ply 								; restore Y
.8d53	4c 64 99	jmp $9964			jmp 	ReturnFalse 				; and return False
.8d56					_UEType:
.8d56	4c db b2	jmp $b2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d59					ForCommand:
.8d59	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d5b	20 77 a5	jsr $a577			jsr 	StackOpen
.8d5e	a2 00		ldx #$00			ldx 	#0
.8d60	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm
.8d63	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d66	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d68	d0 49		bne $8db3			bne		_FCError
.8d6a	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d6c	20 fb ac	jsr $acfb			jsr 	CheckNextA
.8d6f	e8		inx				inx
.8d70	20 26 a4	jsr $a426			jsr 	EvaluateInteger 			; <from> in +1
.8d73	b1 30		lda ($30),y			lda 	(codePtr),y
.8d75	c8		iny				iny 								; consume it
.8d76	48		pha				pha 								; save on stack for later
.8d77	c9 b0		cmp #$b0			cmp 	#KWD_DOWNTO
.8d79	f0 04		beq $8d7f			beq 	_FCNoSyntax
.8d7b	c9 c7		cmp #$c7			cmp 	#KWD_TO
.8d7d	d0 37		bne $8db6			bne 	_FCSyntaxError
.8d7f					_FCNoSyntax:
.8d7f	e8		inx				inx
.8d80	20 26 a4	jsr $a426			jsr 	EvaluateInteger
.8d83	20 bb a5	jsr $a5bb			jsr 	STKSaveCodePosition 		; save loop back position
.8d86	68		pla				pla 								; restore DOWNTO or TO
.8d87	5a		phy				phy 								; save Y on the stack
.8d88	49 b0		eor #$b0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8d8a	f0 02		beq $8d8e			beq 	_FCNotDownTo
.8d8c	a9 02		lda #$02			lda 	#2
.8d8e					_FCNotDownTo:
.8d8e	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8d8f	a0 10		ldy #$10			ldy 	#16
.8d91	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8d93	a0 06		ldy #$06			ldy 	#6
.8d95	ad 08 04	lda $0408			lda 	NSMantissa0
.8d98	91 34		sta ($34),y			sta 	(basicStack),y
.8d9a	ad 10 04	lda $0410			lda 	NSMantissa1
.8d9d	c8		iny				iny
.8d9e	91 34		sta ($34),y			sta 	(basicStack),y
.8da0	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8da2	a2 01		ldx #$01			ldx 	#1
.8da4	20 b9 8d	jsr $8db9			jsr 	FCIntegerToStack
.8da7	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8da9	a2 02		ldx #$02			ldx 	#2
.8dab	20 b9 8d	jsr $8db9			jsr 	FCIntegerToStack
.8dae	20 d9 8d	jsr $8dd9			jsr 	CopyIndexToReference
.8db1	7a		ply				ply 								; restore position
.8db2	60		rts				rts
.8db3					_FCError:
.8db3	4c db b2	jmp $b2db			jmp 	TypeError
.8db6					_FCSyntaxError:
.8db6	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.8db9					FCIntegerToStack:
.8db9	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dbc	10 03		bpl $8dc1			bpl	 	_FCNotNegative
.8dbe	20 78 a4	jsr $a478			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8dc1					_FCNotNegative:
.8dc1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8dc4	91 34		sta ($34),y			sta 	(basicStack),y
.8dc6	c8		iny				iny
.8dc7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dca	91 34		sta ($34),y			sta 	(basicStack),y
.8dcc	c8		iny				iny
.8dcd	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dd0	91 34		sta ($34),y			sta 	(basicStack),y
.8dd2	c8		iny				iny
.8dd3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8dd6	91 34		sta ($34),y			sta 	(basicStack),y
.8dd8	60		rts				rts
.8dd9					CopyIndexToReference:
.8dd9	5a		phy				phy
.8dda	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ddc	38		sec				sec 								; (because we copy from offset 8)
.8ddd	b1 34		lda ($34),y			lda 	(basicStack),y
.8ddf	e9 08		sbc #$08			sbc 	#8
.8de1	85 36		sta $36				sta 	zTemp0
.8de3	c8		iny				iny
.8de4	b1 34		lda ($34),y			lda 	(basicStack),y
.8de6	e9 00		sbc #$00			sbc 	#0
.8de8	85 37		sta $37				sta 	zTemp0+1
.8dea	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8dec	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8dee	b1 34		lda ($34),y			lda 	(basicStack),y
.8df0	0a		asl a				asl 	a 							; into carry
.8df1	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8df3	90 14		bcc $8e09			bcc 	_CITRNormal
.8df5	38		sec				sec
.8df6					_CITRNegative:
.8df6	a9 00		lda #$00			lda 	#0
.8df8	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8dfa	91 36		sta ($36),y			sta 	(zTemp0),y
.8dfc	c8		iny				iny
.8dfd	ca		dex				dex
.8dfe	d0 f6		bne $8df6			bne 	_CITRNegative
.8e00	88		dey				dey 								; look at MSB of mantissa
.8e01	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e03	09 80		ora #$80			ora 	#$80
.8e05	91 36		sta ($36),y			sta 	(zTemp0),y
.8e07	7a		ply				ply
.8e08	60		rts				rts
.8e09					_CITRNormal:
.8e09	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e0b	91 36		sta ($36),y			sta 	(zTemp0),y
.8e0d	c8		iny				iny
.8e0e	ca		dex				dex
.8e0f	d0 f8		bne $8e09			bne 	_CITRNormal
.8e11	7a		ply				ply 								; and exit.
.8e12	60		rts				rts
.8e13					NextCommand:
.8e13	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e15	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e17	20 a3 a5	jsr $a5a3			jsr 	StackCheckFrame
.8e1a	5a		phy				phy
.8e1b	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e1d	b1 34		lda ($34),y			lda 	(basicStack),y
.8e1f	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e21	30 02		bmi $8e25			bmi 	_NCStepNeg
.8e23	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e25					_NCStepNeg:
.8e25	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e27	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e29	18		clc				clc
.8e2a					_NCBump:
.8e2a	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e2c	91 34		sta ($34),y			sta 	(basicStack),y
.8e2e	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e30	c8		iny				iny 								; next byte
.8e31	ca		dex				dex 								; do four times
.8e32	d0 f6		bne $8e2a			bne 	_NCBump
.8e34	20 d9 8d	jsr $8dd9			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e37	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e39	b1 34		lda ($34),y			lda 	(basicStack),y
.8e3b	0a		asl a				asl 	a 							; sign bit to carry
.8e3c	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e3e	85 38		sta $38				sta 	zTemp1
.8e40	90 02		bcc $8e44			bcc 	_NCCompRev 					; use if step is +ve
.8e42	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e44					_NCCompRev:
.8e44	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e46	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e48	85 39		sta $39				sta 	zTemp1+1
.8e4a	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e4c	38		sec				sec
.8e4d					_NCCompare:
.8e4d	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e4f	b1 34		lda ($34),y			lda 	(basicStack),y
.8e51	a4 39		ldy $39				ldy 	zTemp1+1
.8e53	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e55	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e57	e6 39		inc $39				inc 	zTemp1+1
.8e59	ca		dex				dex 								; do it 4 times.
.8e5a	d0 f1		bne $8e4d			bne 	_NCCompare
.8e5c	50 02		bvc $8e60			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e5e	49 80		eor #$80			eor 	#$80
.8e60					_NCNoOverflow:
.8e60	7a		ply				ply 								; restore Y position
.8e61	0a		asl a				asl 	a 							; is bit 7 set.
.8e62	90 04		bcc $8e68			bcc 	_NCLoopback 				; if no , >= so loop back
.8e64	20 95 a5	jsr $a595			jsr 	StackClose 					; exit the loop
.8e67	60		rts				rts
.8e68					_NCLoopBack:
.8e68	20 cc a5	jsr $a5cc			jsr 	STKLoadCodePosition 		; loop back
.8e6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e6c					RectangleCommand:
.8e6c	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e6e	80 02		bra $8e72			bra 	ShapeDrawCmd
.8e70					CircleCommand:
.8e70	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e72					ShapeDrawCmd:
.8e72	20 00 8f	jsr $8f00			jsr 	RunGraphicsCommand
.8e75					ShapeDraw:
.8e75	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8e78	4c f4 8e	jmp $8ef4			jmp 	ExecuteGraphicCommand	 	; and complete
.8e7b					SpriteCommand:
.8e7b	a2 00		ldx #$00			ldx 	#0
.8e7d	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get image number.
.8e80	5a		phy				phy
.8e81	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8e83	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8e86	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8e88	b0 0d		bcs $8e97			bcs 	_SCRange
.8e8a	a0 ff		ldy #$ff			ldy 	#255
.8e8c	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8e8f	a9 32		lda #$32			lda 	#25*2
.8e91	7a		ply				ply
.8e92	20 00 8f	jsr $8f00			jsr 	RunGraphicsCommand
.8e95	80 5d		bra $8ef4			bra 	ExecuteGraphicCommand
.8e97					_SCRange:
.8e97	4c d6 b2	jmp $b2d6			jmp 	RangeError
.8e9a					ImageCommand:
.8e9a	a2 00		ldx #$00			ldx 	#0
.8e9c	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get image number.
.8e9f	20 00 8f	jsr $8f00			jsr 	RunGraphicsCommand
.8ea2					ImageRunDraw:
.8ea2	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8ea4	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ea7	ad 6a 06	lda $066a			lda 	gxDrawScale
.8eaa	0a		asl a				asl 	a
.8eab	0a		asl a				asl 	a
.8eac	0a		asl a				asl 	a
.8ead	a8		tay				tay
.8eae	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8eb0	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eb3	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8eb6	60		rts				rts
.8eb7					TextCommand:
.8eb7	a2 00		ldx #$00			ldx 	#0
.8eb9	20 0e a4	jsr $a40e			jsr 	EvaluateString 				; get text
.8ebc	20 00 8f	jsr $8f00			jsr 	RunGraphicsCommand
.8ebf					TextRunDraw:
.8ebf	a9 20		lda #$20			lda 	#16*2 						; move cursor
.8ec1	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ec4	a0 00		ldy #$00			ldy 	#0
.8ec6					_IRDLoop:
.8ec6	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ec9	85 37		sta $37				sta 	zTemp0+1
.8ecb	ad 08 04	lda $0408			lda 	NSMantissa0
.8ece	85 36		sta $36				sta 	zTemp0
.8ed0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ed2	f0 13		beq $8ee7			beq 	_IRDExit
.8ed4	5a		phy				phy									; save string pos
.8ed5	48		pha				pha 								; save char
.8ed6	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8ed9	0a		asl a				asl 	a
.8eda	0a		asl a				asl 	a
.8edb	0a		asl a				asl 	a
.8edc	a8		tay				tay
.8edd	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8edf	fa		plx				plx 								; char to draw
.8ee0	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ee3	7a		ply				ply 								; restore string pos
.8ee4	c8		iny				iny
.8ee5	90 df		bcc $8ec6			bcc 	_IRDLoop 					; go back if no error.
.8ee7					_IRDExit:
.8ee7	60		rts				rts
.8ee8					PlotCommand:
.8ee8	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8eea	20 00 8f	jsr $8f00			jsr 	RunGraphicsCommand
.8eed	80 05		bra $8ef4			bra 	ExecuteGraphicCommand
.8eef					LineCommand:
.8eef	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8ef1	20 00 8f	jsr $8f00			jsr 	RunGraphicsCommand
.8ef4					ExecuteGraphicCommand:
.8ef4	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8ef7	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; draw it and exit
.8efa	b0 01		bcs $8efd			bcs 	_EGCError
.8efc	60		rts				rts
.8efd					_EGCError:
.8efd	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.8f00					RunGraphicsCommand:
.8f00	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f03	68		pla				pla 								; pop handler address
.8f04	fa		plx				plx
.8f05	1a		inc a				inc 	a
.8f06	d0 01		bne $8f09			bne 	_RGINoCarry
.8f08	e8		inx				inx
.8f09					_RGINoCarry:
.8f09	8d 68 06	sta $0668			sta 	GXHandler
.8f0c	8e 69 06	stx $0669			stx 	GXHandler+1
.8f0f					_RGICommandLoop:
.8f0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8f11	c8		iny				iny
.8f12	c9 c7		cmp #$c7			cmp 	#KWD_TO						; is it TO x,y
.8f14	f0 53		beq $8f69			beq 	_RGI_To
.8f16	c9 b6		cmp #$b6			cmp 	#KWD_HERE 					; do it here.
.8f18	f0 55		beq $8f6f			beq 	_RGI_Here
.8f1a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f1c	f0 3d		beq $8f5b			beq 	_RGI_Exit
.8f1e	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f20	f0 39		beq $8f5b			beq 	_RGI_Exit
.8f22	c9 bd		cmp #$bd			cmp 	#KWD_OUTLINE 				; solid or outline
.8f24	f0 3e		beq $8f64			beq 	_RGI_Frame
.8f26	c9 c4		cmp #$c4			cmp 	#KWD_SOLID
.8f28	f0 33		beq $8f5d			beq 	_RGI_Solid
.8f2a	c9 a7		cmp #$a7			cmp 	#KWD_BY 					; by offset
.8f2c	f0 4b		beq $8f79			beq 	_RGI_By
.8f2e	c9 b2		cmp #$b2			cmp 	#KWD_FROM 					; from
.8f30	f0 17		beq $8f49			beq 	_RGI_Move2
.8f32	c9 af		cmp #$af			cmp 	#KWD_DIM 					; dim (set scale)
.8f34	f0 65		beq $8f9b			beq 	_RGI_Dim
.8f36	c9 ad		cmp #$ad			cmp 	#KWD_COLOUR 				; colour or Color
.8f38	f0 78		beq $8fb2			beq 	_RGI_Colour
.8f3a	c9 ac		cmp #$ac			cmp 	#KWD_COLOR
.8f3c	f0 74		beq $8fb2			beq 	_RGI_Colour
.8f3e	ae 63 06	ldx $0663			ldx 	gxCommandID
.8f41	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f43	d0 03		bne $8f48			bne 	_RGI_Move 					; move
.8f45	4c dc 8f	jmp $8fdc			jmp		_RGI_SpriteInstructions
.8f48					_RGI_Move:
.8f48	88		dey				dey 								; unpick get.
.8f49					_RGI_Move2:
.8f49	20 00 90	jsr $9000			jsr 	GCGetCoordinatePair 		; move to here
.8f4c	20 27 90	jsr $9027			jsr 	GCCopyPairToStore 			; save
.8f4f	5a		phy				phy
.8f50	20 1d 90	jsr $901d			jsr 	GCLoadAXY 					; load in
.8f53	09 20		ora #$20			ora 	#16*2 						; move there
.8f55	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f58	7a		ply				ply
.8f59	80 b4		bra $8f0f			bra 	_RGICommandLoop 			; and go round
.8f5b					_RGI_Exit:
.8f5b	88		dey				dey 								; unpick : / EOL
.8f5c	60		rts				rts
.8f5d					_RGI_Solid:
.8f5d	a9 02		lda #$02			lda 	#2
.8f5f	8d 64 06	sta $0664			sta 	gxFillSolid
.8f62	80 ab		bra $8f0f			bra 	_RGICommandLoop
.8f64					_RGI_Frame:
.8f64	9c 64 06	stz $0664			stz 	gxFillSolid
.8f67	80 a6		bra $8f0f			bra 	_RGICommandLoop
.8f69					_RGI_To:
.8f69	20 00 90	jsr $9000			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f6c	20 27 90	jsr $9027			jsr 	GCCopyPairToStore
.8f6f					_RGI_Here:
.8f6f	5a		phy				phy
.8f70	20 1d 90	jsr $901d			jsr 	GCLoadAXY 					; load it into AXY
.8f73	20 d9 8f	jsr $8fd9			jsr 	_RGICallHandler 			; go do whatever it is.
.8f76	7a		ply				ply
.8f77	80 96		bra $8f0f			bra 	_RGICommandLoop 			; and go round
.8f79					_RGI_By:
.8f79	20 0d 90	jsr $900d			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8f7c	18		clc				clc
.8f7d	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f80	6d 65 06	adc $0665			adc 	gxxPos
.8f83	8d 65 06	sta $0665			sta 	gxXPos
.8f86	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8f89	6d 66 06	adc $0666			adc 	gxxPos+1
.8f8c	8d 66 06	sta $0666			sta 	gxXPos+1
.8f8f	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8f92	18		clc				clc
.8f93	6d 67 06	adc $0667			adc 	gxYPos
.8f96	8d 67 06	sta $0667			sta 	gxYPos
.8f99	80 d4		bra $8f6f			bra 	_RGI_Here
.8f9b					_RGI_Dim:
.8f9b	a2 01		ldx #$01			ldx	 	#1
.8f9d	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger
.8fa0	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fa3	c9 00		cmp #$00			cmp 	#0
.8fa5	f0 2f		beq $8fd6			beq 	_RGIRange
.8fa7	c9 09		cmp #$09			cmp 	#8+1
.8fa9	b0 2b		bcs $8fd6			bcs		_RGIRange
.8fab	3a		dec a				dec 	a
.8fac	8d 6a 06	sta $066a			sta 	gxDrawScale
.8faf	4c 0f 8f	jmp $8f0f			jmp 	_RGICommandLoop
.8fb2					_RGI_Colour:
.8fb2	a2 01		ldx #$01			ldx 	#1 							; colour
.8fb4	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger
.8fb7	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fb9	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.8fbc	b1 30		lda ($30),y			lda 	(codePtr),y
.8fbe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fc0	d0 04		bne $8fc6			bne 	_RGICDefaultMode
.8fc2	c8		iny				iny
.8fc3	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger
.8fc6					_RGICDefaultMode:
.8fc6	5a		phy				phy
.8fc7	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fc9	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fcc	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fcf	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fd2	7a		ply				ply
.8fd3	4c 0f 8f	jmp $8f0f			jmp 	_RGICommandLoop 			; and go round
.8fd6					_RGIRange:
.8fd6	4c d6 b2	jmp $b2d6			jmp 	RangeError
.8fd9					_RGICallHandler:
.8fd9	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8fdc					_RGI_SpriteInstructions:
.8fdc	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.8fde	f0 07		beq $8fe7			beq 	_RGISpriteOff
.8fe0	c9 b7		cmp #$b7			cmp 	#KWD_IMAGE
.8fe2	f0 11		beq $8ff5			beq 	_RGISetImage
.8fe4	4c 48 8f	jmp $8f48			jmp 	_RGI_Move
.8fe7					_RGISpriteOff:
.8fe7	5a		phy				phy
.8fe8	a0 01		ldy #$01			ldy 	#1
.8fea	a2 00		ldx #$00			ldx 	#0
.8fec					_RGIDoCommandLoop:
.8fec	a9 10		lda #$10			lda 	#8*2
.8fee	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ff1	7a		ply				ply
.8ff2	4c 0f 8f	jmp $8f0f			jmp 	_RGICommandLoop
.8ff5					_RGISetImage:
.8ff5	a2 01		ldx #$01			ldx 	#1
.8ff7	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger
.8ffa	5a		phy				phy
.8ffb	aa		tax				tax
.8ffc	a0 00		ldy #$00			ldy 	#0
.8ffe	80 ec		bra $8fec			bra 	_RGIDoCommandLoop
.9000					GCGetCoordinatePair:
.9000	a2 01		ldx #$01			ldx 	#1
.9002	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.9005	20 f3 ac	jsr $acf3			jsr 	CheckComma
.9008	e8		inx				inx
.9009	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.900c	60		rts				rts
.900d					GCSignedCoordinatePair:
.900d	a2 01		ldx #$01			ldx 	#1
.900f	20 47 a4	jsr $a447			jsr 	Evaluate16BitIntegerSigned
.9012	20 f3 ac	jsr $acf3			jsr 	CheckComma
.9015	e8		inx				inx
.9016	20 47 a4	jsr $a447			jsr 	Evaluate16BitIntegerSigned
.9019	60		rts				rts
.901a					_GCCPRange:
.901a	4c d6 b2	jmp $b2d6			jmp 	RangeError
.901d					GCLoadAXY:
.901d	ad 66 06	lda $0666			lda 	gxXPos+1
.9020	ae 65 06	ldx $0665			ldx 	gxXPos
.9023	ac 67 06	ldy $0667			ldy 	gxYPos
.9026	60		rts				rts
.9027					GCCopyPairToStore:
.9027	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.902a	8d 65 06	sta $0665			sta 	gxXPos
.902d	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9030	8d 66 06	sta $0666			sta 	gxXPos+1
.9033	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9036	8d 67 06	sta $0667			sta 	gxYPos
.9039	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.903a					BitmapCtrl:
.903a	b1 30		lda ($30),y			lda 	(codePtr),y
.903c	c8		iny				iny
.903d	a2 01		ldx #$01			ldx 	#1
.903f	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9041	f0 11		beq $9054			beq 	BitmapSwitch
.9043	ca		dex				dex
.9044	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.9046	f0 0c		beq $9054			beq 	BitmapSwitch
.9048	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get the colour
.904b	5a		phy				phy
.904c	aa		tax				tax
.904d	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.904f	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9052	7a		ply				ply
.9053	60		rts				rts
.9054					BitmapSwitch:
.9054	5a		phy				phy
.9055	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9057	a9 02		lda #$02			lda 	#1*2
.9059	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.905c	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.905e	a0 00		ldy #$00			ldy 	#0
.9060	a2 ff		ldx #$ff			ldx 	#$FF
.9062	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9065	9c 64 06	stz $0664			stz 	gxFillSolid
.9068	9c 65 06	stz $0665			stz 	gxXPos
.906b	9c 66 06	stz $0666			stz 	gxXPos+1
.906e	9c 67 06	stz $0667			stz 	gxYPos
.9071	9c 6a 06	stz $066a			stz 	gxDrawScale
.9074	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9076	a2 00		ldx #$00			ldx 	#0
.9078	a0 00		ldy #$00			ldy 	#0
.907a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.907d	7a		ply				ply
.907e	60		rts				rts
.907f					SpritesCtrl:
.907f	b1 30		lda ($30),y			lda 	(codePtr),y
.9081	c8		iny				iny
.9082	a2 01		ldx #$01			ldx 	#1
.9084	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9086	f0 08		beq $9090			beq 	SpriteSwitch
.9088	ca		dex				dex
.9089	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.908b	f0 03		beq $9090			beq 	SpriteSwitch
.908d	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.9090					SpriteSwitch:
.9090	5a		phy				phy
.9091	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.9093	a9 04		lda #$04			lda 	#2*2
.9095	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9098	7a		ply				ply
.9099	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.909a					GfxCommand:
.909a	a2 00		ldx #$00			ldx 	#0
.909c	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; command
.909f	20 f3 ac	jsr $acf3			jsr 	CheckComma
.90a2	e8		inx				inx
.90a3	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger 		; X
.90a6	20 f3 ac	jsr $acf3			jsr 	CheckComma
.90a9	e8		inx				inx
.90aa	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; Y
.90ad	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90b0	4a		lsr a				lsr 	a
.90b1	d0 16		bne $90c9			bne 	_GfxError
.90b3	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90b6	b0 11		bcs $90c9			bcs 	_GfxError 					; bit 7 should have been zero
.90b8	5a		phy				phy 								; save pos
.90b9	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90bc	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90bf	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90c2	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90c5	b0 02		bcs $90c9			bcs 	_GfxError
.90c7	7a		ply				ply 								; restore pos and exit.
.90c8	60		rts				rts
.90c9					_GfxError:
.90c9	4c d6 b2	jmp $b2d6			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90cc					Command_GOSUB:
.90cc	a2 00		ldx #$00			ldx 	#0
.90ce	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90d1	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.90d3	20 77 a5	jsr $a577			jsr 	StackOpen 					; create frame
.90d6	20 bb a5	jsr $a5bb			jsr 	STKSaveCodePosition 		; save current position
.90d9	4c ef 90	jmp $90ef			jmp 	GotoStackX
.90dc					Command_RETURN:
.90dc	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.90de	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.90e0	20 a3 a5	jsr $a5a3			jsr 	StackCheckFrame
.90e3	20 cc a5	jsr $a5cc			jsr 	STKLoadCodePosition 		; restore code position
.90e6	20 95 a5	jsr $a595			jsr 	StackClose
.90e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.90ea					GotoCommand:
.90ea	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.90ec	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.90ef					GotoStackX:
.90ef	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.90f2	48		pha				pha 								; it is slightly inefficient, just in cases.
.90f3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.90f6	fa		plx				plx
.90f7	20 22 a5	jsr $a522			jsr 	MemorySearch 				; transfer to line number AX.
.90fa	90 05		bcc $9101			bcc 	_GotoError 					; not found, off end.
.90fc	d0 03		bne $9101			bne 	_GotoError 					; not found exactly
.90fe	4c 61 94	jmp $9461			jmp 	RunNewLine 					; and go straight to new line code.
.9101					_GotoError:
.9101	a9 0d		lda #$0d		lda	#13
.9103	4c eb 98	jmp $98eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9106					IfCommand:
.9106	a2 00		ldx #$00			ldx 	#0 							; If what.
.9108	20 03 a4	jsr $a403			jsr 	EvaluateNumber
.910b	b1 30		lda ($30),y			lda 	(codePtr),y
.910d	c9 a4		cmp #$a4			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.910f	d0 0a		bne $911b			bne 	_IFStructured
.9111	c8		iny				iny 								; consume THEN
.9112	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; is it zero
.9115	f0 01		beq $9118			beq 	_IfFail 					; if fail, go to next line
.9117	60		rts				rts 								; if THEN just continue
.9118					_IfFail:
.9118	4c c6 94	jmp $94c6			jmp 	EOLCommand
.911b					_IfStructured:
.911b	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; is it zero
.911e	d0 07		bne $9127			bne 	_IfExit 					; if not, then continue normally.
.9120	a9 b1		lda #$b1			lda 	#KWD_ELSE 					; look for else/endif
.9122	a2 a1		ldx #$a1			ldx 	#KWD_ENDIF
.9124	20 5d 98	jsr $985d			jsr 	ScanForward 				; and run from there/
.9127					_IfExit:
.9127	60		rts				rts
.9128					ElseCode:
.9128	a9 a1		lda #$a1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.912a	aa		tax				tax 								; so just go to the structure exit
.912b	20 5d 98	jsr $985d			jsr 	ScanForward
.912e	60		rts				rts
.912f					EndIf:
.912f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.9130					UnaryJoyX:
.9130	18		clc				clc
.9131	80 01		bra $9134			bra 	JoyMain
.9133					UnaryJoyY:
.9133	38		sec				sec
.9134					JoyMain:
.9134	fa		plx				plx 								; get pos
.9135	08		php				php 								; save carry (set for Y)
.9136	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9139	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.913c	20 cc b4	jsr $b4cc			jsr 	EXTReadController 			; read the controller.
.913f	28		plp				plp
.9140	90 02		bcc $9144			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9142	4a		lsr a				lsr 	a
.9143	4a		lsr a				lsr 	a
.9144					_JMNoShift:
.9144	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9145	b0 0a		bcs $9151			bcs 	_JMIsRight
.9147	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9148	b0 04		bcs $914e			bcs 	_JMIsLeft
.914a	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero 					; zero result
.914d	60		rts				rts
.914e					_JMIsLeft:
.914e	4c 58 99	jmp $9958			jmp 	ReturnTrue
.9151					_JMIsRight:
.9151	a9 01		lda #$01			lda 	#1
.9153	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.9156	60		rts				rts
.9157					UnaryJoyB:
.9157	fa		plx				plx 								; get pos
.9158	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.915b	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.915e	20 cc b4	jsr $b4cc			jsr 	EXTReadController 			; read the controller.
.9161	29 10		and #$10			and 	#16
.9163	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.9166	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9167					LetCommand:
.9167	a2 00		ldx #$00			ldx 	#0
.9169	b1 30		lda ($30),y			lda 	(codePtr),y
.916b	c9 10		cmp #$10			cmp 	#KWD_AT
.916d	d0 16		bne $9185			bne 	_LCStandard
.916f	c8		iny				iny 								; skip equal
.9170	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm 				; get a number
.9173	20 09 9e	jsr $9e09			jsr 	Dereference 				; dereference it
.9176	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.9179	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.917b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.917e	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9180	d0 10		bne $9192			bne 	_LCMain
.9182	4c db b2	jmp $b2db			jmp 	TypeError 					; was a reference before.
.9185					_LCStandard:
.9185	ad dc 9c	lda $9cdc			lda 	PrecedenceLevel+"*"			; precedence > this
.9188	20 f6 9c	jsr $9cf6			jsr 	EvaluateExpressionAtPrecedence
.918b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.918e	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.9190	f0 0e		beq $91a0			beq 	_LetGoProc 					; it's a procedure call.
.9192					_LCMain:
.9192	a9 3d		lda #$3d			lda 	#"=" 						; check =
.9194	20 fb ac	jsr $acfb			jsr 	CheckNextA
.9197	e8		inx				inx 								; RHS
.9198	20 fa a3	jsr $a3fa			jsr 	EvaluateValue
.919b	ca		dex				dex
.919c	20 a3 91	jsr $91a3			jsr 	AssignVariable
.919f	60		rts				rts
.91a0					_LetGoProc:
.91a0	4c 3c 93	jmp $933c			jmp 	CallProcedure
.91a3					AssignVariable:
.91a3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91a6	48		pha				pha 								; save a copy
.91a7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91aa	29 10		and #$10			and 	#NSBIsString
.91ac	d0 0b		bne $91b9			bne 	_ASError
.91ae	68		pla				pla 								; get back
.91af	29 10		and #$10			and 	#NSBIsString 				; check type
.91b1	d0 03		bne $91b6			bne 	_ASString
.91b3	4c 31 9d	jmp $9d31			jmp 	AssignNumber
.91b6					_ASString:
.91b6	4c 9f 9d	jmp $9d9f			jmp 	AssignString
.91b9					_ASError:
.91b9	4c db b2	jmp $b2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91bc					Command_List:
.91bc	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91bf	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91c2	a9 ff		lda #$ff			lda 	#$FF
.91c4	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91c7	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91ca	b1 30		lda ($30),y			lda 	(codePtr),y
.91cc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91ce	f0 1e		beq $91ee			beq 	_CLSecond
.91d0	20 4c 92	jsr $924c			jsr 	CLIsDigit 					; if not digit, list all
.91d3	b0 24		bcs $91f9			bcs 	_CLStart
.91d5	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91d7	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.91da	b1 30		lda ($30),y			lda 	(codePtr),y
.91dc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91de	f0 0e		beq $91ee			beq 	_CLSecond 					; if so go get it
.91e0	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.91e3	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91e6	ad 14 04	lda $0414			lda 	NSMantissa1+4
.91e9	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91ec	80 0b		bra $91f9			bra 	_CLStart
.91ee					_CLSecond:
.91ee	c8		iny				iny 								; consume comma
.91ef	20 4c 92	jsr $924c			jsr 	CLIsDigit 					; digit found
.91f2	b0 05		bcs $91f9			bcs 	_CLStart 					; if not, continue listing
.91f4	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.91f6	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger
.91f9					_CLStart
.91f9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91fb	85 30		sta $30				sta 	codePtr
.91fd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91ff	85 31		sta $31				sta 	codePtr+1
.9201					_CLLoop:
.9201	20 c9 b4	jsr $b4c9			jsr 	EXTBreakCheck 				; break check
.9204	f0 30		beq $9236			beq 	_CLExit
.9206	b2 30		lda ($30)			lda 	(codePtr)
.9208	f0 2c		beq $9236			beq 	_CLExit
.920a	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.920c	20 39 92	jsr $9239			jsr 	CLCompareLineNo
.920f	90 18		bcc $9229			bcc 	_CLNext
.9211	a2 07		ldx #$07			ldx 	#7
.9213	20 39 92	jsr $9239			jsr 	CLCompareLineNo
.9216	f0 02		beq $921a			beq 	_CLDoThisOne
.9218	b0 0f		bcs $9229			bcs 	_CLNext
.921a					_CLDoThisOne:
.921a	20 b9 96	jsr $96b9			jsr 	ListConvertLine 			; convert line into token Buffer
.921d	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.921f	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9221	20 44 99	jsr $9944			jsr 	PrintStringXA
.9224	a9 0d		lda #$0d			lda 	#13 						; new line
.9226	20 88 b4	jsr $b488			jsr 	EXTPrintCharacter
.9229					_CLNext:
.9229	18		clc				clc
.922a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.922c	65 30		adc $30				adc 	codePtr
.922e	85 30		sta $30				sta 	codePtr
.9230	90 02		bcc $9234			bcc 	_CREExit
.9232	e6 31		inc $31				inc 	codePtr+1
.9234					_CREExit:
.9234	80 cb		bra $9201			bra 	_CLLoop
.9236					_CLExit:
.9236	4c 37 8b	jmp $8b37			jmp 	WarmStart
.9239					CLCompareLineNo:
.9239	38		sec				sec
.923a	a0 01		ldy #$01			ldy 	#1
.923c	b1 30		lda ($30),y			lda 	(codePtr),y
.923e	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9241	85 36		sta $36				sta 	zTemp0
.9243	c8		iny				iny
.9244	b1 30		lda ($30),y			lda 	(codePtr),y
.9246	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9249	05 36		ora $36				ora 	zTemp0
.924b	60		rts				rts
.924c					CLIsDigit:
.924c	b1 30		lda ($30),y			lda 	(codePtr),y
.924e	c9 30		cmp #$30			cmp 	#"0"
.9250	90 03		bcc $9255			bcc	 	_CLIDExitFalse
.9252	c9 3a		cmp #$3a			cmp 	#"9"+1
.9254	60		rts				rts
.9255					_CLIDExitFalse:
.9255	38		sec				sec
.9256	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9257					Command_LOCAL:
.9257	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9259	20 65 92	jsr $9265			jsr 	LocaliseNextTerm 			; convert term to a local.
.925c	b1 30		lda ($30),y			lda 	(codePtr),y
.925e	c8		iny				iny
.925f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9261	f0 f4		beq $9257			beq 	Command_LOCAL
.9263	88		dey				dey 								; unpick pre-get
.9264	60		rts				rts
.9265					LocaliseNextTerm:
.9265	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm 				; evaluate the term
.9268	bd 00 04	lda $0400,x			lda 	NSStatus,x
.926b	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.926d	f0 69		beq $92d8			beq		_LNTError
.926f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9272	85 36		sta $36				sta 	zTemp0
.9274	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9277	85 37		sta $37				sta  	zTemp0+1
.9279	bd 00 04	lda $0400,x			lda 	NSStatus,x
.927c	29 10		and #$10			and 	#NSBIsString
.927e	d0 22		bne $92a2			bne 	_LNTPushString
.9280	5a		phy				phy
.9281	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9283					_LNTPushNumLoop:
.9283	b1 36		lda ($36),y			lda		(zTemp0),y
.9285	20 55 a5	jsr $a555			jsr 	StackPushByte
.9288	a9 00		lda #$00			lda 	#0
.928a	91 36		sta ($36),y			sta 	(zTemp0),y
.928c	c8		iny				iny
.928d	c0 05		cpy #$05			cpy 	#5
.928f	d0 f2		bne $9283			bne 	_LNTPushNumLoop
.9291	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.9293	20 55 a5	jsr $a555			jsr 	StackPushByte
.9296	a5 37		lda $37				lda 	zTemp0+1
.9298	20 55 a5	jsr $a555			jsr 	StackPushByte
.929b	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.929d	20 55 a5	jsr $a555			jsr 	StackPushByte
.92a0	7a		ply				ply
.92a1	60		rts				rts
.92a2					_LNTPushString:
.92a2	5a		phy				phy
.92a3	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92a5	85 38		sta $38				sta 	zTemp1
.92a7	a0 01		ldy #$01			ldy 	#1
.92a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ab	85 39		sta $39				sta 	zTemp1+1
.92ad	a0 00		ldy #$00			ldy 	#0 							; output string
.92af	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92b1	f0 0a		beq $92bd			beq 	_LNTStringOut
.92b3					_LNTPushStrLoop:
.92b3	b1 38		lda ($38),y			lda 	(zTemp1),y
.92b5	f0 06		beq $92bd			beq 	_LNTStringOut
.92b7	20 55 a5	jsr $a555			jsr 	StackPushByte
.92ba	c8		iny				iny
.92bb	80 f6		bra $92b3			bra 	_LNTPushStrLoop
.92bd					_LNTStringOut:
.92bd	98		tya				tya									; output length
.92be	20 55 a5	jsr $a555			jsr 	StackPushByte
.92c1	a9 00		lda #$00			lda 	#0 							; clear original string.
.92c3	92 38		sta ($38)			sta 	(zTemp1)
.92c5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92c8	20 55 a5	jsr $a555			jsr 	StackPushByte
.92cb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92ce	20 55 a5	jsr $a555			jsr 	StackPushByte
.92d1	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92d3	20 55 a5	jsr $a555			jsr 	StackPushByte
.92d6	7a		ply				ply
.92d7	60		rts				rts
.92d8					_LNTError:
.92d8	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.ac92					LocalPopValue:
.ac92	20 6e a5	jsr $a56e			jsr 	StackPopByte
.ac95	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ac97	d0 17		bne $acb0			bne 	_LPVString
.ac99	20 6e a5	jsr $a56e			jsr 	StackPopByte 				; address
.ac9c	85 37		sta $37				sta 	zTemp0+1
.ac9e	20 6e a5	jsr $a56e			jsr 	StackPopByte
.aca1	85 36		sta $36				sta 	zTemp0
.aca3	5a		phy				phy
.aca4	a0 04		ldy #$04			ldy 	#4 							; copy back
.aca6					_LPVNumberCopy:
.aca6	20 6e a5	jsr $a56e			jsr 	StackPopByte
.aca9	91 36		sta ($36),y			sta 	(zTemp0),y
.acab	88		dey				dey
.acac	10 f8		bpl $aca6			bpl 	_LPVNumberCopy
.acae	7a		ply				ply 								; and complete
.acaf	60		rts				rts
.acb0					_LPVString:
.acb0	20 6e a5	jsr $a56e			jsr 	StackPopByte 				; address of record => zTemp0
.acb3	85 37		sta $37				sta 	zTemp0+1
.acb5	20 6e a5	jsr $a56e			jsr 	StackPopByte
.acb8	85 36		sta $36				sta 	zTemp0
.acba	5a		phy				phy
.acbb	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.acbd	85 38		sta $38				sta 	zTemp1
.acbf	a0 01		ldy #$01			ldy 	#1
.acc1	b1 36		lda ($36),y			lda 	(zTemp0),y
.acc3	85 39		sta $39				sta 	zTemp1+1
.acc5	20 6e a5	jsr $a56e			jsr 	StackPopByte 				; # to get => y
.acc8	a8		tay				tay
.acc9	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.accb	f0 0e		beq $acdb			beq 	_LPVStringCopied
.accd	a9 00		lda #$00			lda 	#0 							; NULL on end
.accf	91 38		sta ($38),y			sta 	(zTemp1),y
.acd1					_LPVStringCopy:
.acd1	88		dey				dey
.acd2	30 07		bmi $acdb			bmi 	_LPVStringCopied
.acd4	20 6e a5	jsr $a56e			jsr 	StackPopByte
.acd7	91 38		sta ($38),y			sta 	(zTemp1),y
.acd9	80 f6		bra $acd1			bra 	_LPVStringCopy
.acdb					_LPVStringCopied:
.acdb	fa		plx				plx
.acdc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92db					NewCommand:
.92db	20 00 a5	jsr $a500			jsr 	MemoryNew
.92de	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.92e1	20 d0 8b	jsr $8bd0			jsr 	ClearCommand 				; clear everything.
.92e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.92e5					Command_Print:
.92e5	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.92e6					_CPLoop:
.92e6	08		php				php 								; save last action flag
.92e7	b1 30		lda ($30),y			lda 	(codePtr),y
.92e9	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.92eb	f0 46		beq $9333			beq 	_CPExit
.92ed	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.92ef	f0 42		beq $9333			beq 	_CPExit
.92f1	68		pla				pla 								; throw last action flag
.92f2	b1 30		lda ($30),y			lda 	(codePtr),y
.92f4	c8		iny				iny
.92f5	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.92f7	f0 37		beq $9330			beq 	_CPContinueWithSameLine
.92f9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.92fb	f0 2e		beq $932b			beq 	_CPTab
.92fd	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.92ff	f0 26		beq $9327			beq 	_CPNewLine
.9301	88		dey				dey 								; undo the get.
.9302	a2 00		ldx #$00			ldx 	#0
.9304	20 fa a3	jsr $a3fa			jsr 	EvaluateValue 				; get a value into slot 0
.9307	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.930a	29 10		and #$10			and 	#NSBIsString
.930c	f0 0b		beq $9319			beq 	_CPNumber
.930e	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9311	ad 08 04	lda $0408			lda 	NSMantissa0
.9314	20 44 99	jsr $9944			jsr 	PrintStringXA
.9317	80 cc		bra $92e5			bra 	Command_Print 				; loop round clearing carry so NL if end
.9319					_CPNumber:
.9319	a9 05		lda #$05			lda 	#5 							; maximum decimals
.931b	20 d0 a2	jsr $a2d0			jsr 	ConvertNumberToString 		; convert to string
.931e	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9320	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9322	20 44 99	jsr $9944			jsr 	PrintStringXA
.9325	80 be		bra $92e5			bra 	Command_Print 				; loop round clearing carry so NL if end
.9327					_CPNewLine:
.9327	a9 0d		lda #$0d			lda 	#13
.9329	80 02		bra $932d			bra 	_CPPrintChar
.932b					_CPTab:
.932b	a9 09		lda #$09			lda 	#9 							; print TAB
.932d					_CPPrintChar:
.932d	20 88 b4	jsr $b488			jsr 	EXTPrintCharacter
.9330					_CPContinueWithSameLine:
.9330	38		sec				sec 								; loop round with carry set, which
.9331	80 b3		bra $92e6			bra 	_CPLoop 					; will inhibit final CR
.9333					_CPExit:
.9333	28		plp				plp 								; get last action flag
.9334	b0 05		bcs $933b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9336	a9 0d		lda #$0d			lda 	#13 						; print new line
.9338	20 88 b4	jsr $b488			jsr 	EXTPrintCharacter
.933b					_CPExit2:
.933b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.933c					CallProcedure:
.933c	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.933e	b1 30		lda ($30),y			lda 	(codePtr),y
.9340	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9342	f0 0c		beq $9350			beq 	_CPEndParam
.9344					_CPParamLoop:
.9344	20 f4 9c	jsr $9cf4			jsr 	EvaluateExpression 			; get parameter onto stack
.9347	e8		inx				inx 								; bump next stack
.9348	b1 30		lda ($30),y			lda 	(codePtr),y
.934a	c8		iny				iny
.934b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.934d	f0 f5		beq $9344			beq 	_CPParamLoop
.934f	88		dey				dey 								; unpick.
.9350					_CPEndParam:
.9350	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9353	c8		iny				iny									; skip right bracket
.9354	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9356	20 77 a5	jsr $a577			jsr 	StackOpen
.9359	20 bb a5	jsr $a5bb			jsr 	STKSaveCodePosition 		; save loop position
.935c	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.935f	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9361	ad 10 04	lda $0410			lda 	NSMantissa1
.9364	85 37		sta $37				sta 	zTemp0+1
.9366	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9368	b2 36		lda ($36)			lda 	(zTemp0)
.936a	85 30		sta $30				sta 	safePtr
.936c	b1 36		lda ($36),y			lda 	(zTemp0),y
.936e	85 31		sta $31				sta 	safePtr+1
.9370	c8		iny				iny
.9371	b1 36		lda ($36),y			lda 	(zTemp0),y
.9373	85 32		sta $32				sta 	safePtr+2
.9375	c8		iny				iny
.9376	b1 36		lda ($36),y			lda 	(zTemp0),y
.9378	85 33		sta $33				sta 	safePtr+3
.937a	c8		iny				iny 								; get Y offset -> Y
.937b	b1 36		lda ($36),y			lda 	(zTemp0),y
.937d	a8		tay				tay
.937e	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9380	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.9383	f0 13		beq $9398			beq 	_ParamExit 					; if so, exit.
.9385					_ParamExtract:
.9385	ca		dex				dex 								; put a local term on the level before
.9386	20 65 92	jsr $9265			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9389	20 a3 91	jsr $91a3			jsr 	AssignVariable 				; assign stacked value to the variable.
.938c	e8		inx				inx 								; advance to next parameter to do.
.938d	e8		inx				inx
.938e	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9391	f0 05		beq $9398			beq 	_ParamExit
.9393	20 f3 ac	jsr $acf3			jsr 	CheckComma 					; comma seperating parameters
.9396	80 ed		bra $9385			bra 	_ParamExtract
.9398					_ParamExit:
.9398	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 			; check )
.939b	60		rts				rts 								; and continue from here
.acdd					Command_ENDPROC:
.acdd	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.acdf	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ace1	20 a3 a5	jsr $a5a3			jsr 	StackCheckFrame
.ace4	20 cc a5	jsr $a5cc			jsr 	STKLoadCodePosition 		; restore code position
.ace7	20 95 a5	jsr $a595			jsr 	StackClose
.acea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.939c					Command_Read:
.939c	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.939e	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm
.93a1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93a4	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93a6	f0 4a		beq $93f2			beq 	_CRSyntax 					; check reference (bit 0)
.93a8	20 3b 94	jsr $943b			jsr 	SwapDataCodePtrs 			; swap code and data
.93ab	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93ae	d0 20		bne $93d0			bne 	_CRContinueData
.93b0					_CRKeepSearching:
.93b0	a9 ae		lda #$ae			lda 	#KWD_DATA 					; scan for instruction
.93b2	aa		tax				tax
.93b3	20 5d 98	jsr $985d			jsr 	ScanForward
.93b6	c9 ae		cmp #$ae			cmp 	#KWD_DATA 					; found data ?
.93b8	f0 16		beq $93d0			beq 	_CRHaveData 				; found it
.93ba	18		clc				clc
.93bb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93bd	65 30		adc $30				adc 	codePtr
.93bf	85 30		sta $30				sta 	codePtr
.93c1	90 02		bcc $93c5			bcc 	_CREExit
.93c3	e6 31		inc $31				inc 	codePtr+1
.93c5					_CREExit:
.93c5	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93c7	b2 30		lda ($30)			lda 	(codePtr)
.93c9	d0 e5		bne $93b0			bne 	_CRKeepSearching
.93cb	a9 0b		lda #$0b		lda	#11
.93cd	4c eb 98	jmp $98eb		jmp	ErrorHandler
.93d0					_CRHaveData:
.93d0					_CRContinueData:
.93d0	a2 01		ldx #$01			ldx 	#1
.93d2	20 fa a3	jsr $a3fa			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93d5	ca		dex				dex
.93d6	20 a3 91	jsr $91a3			jsr		AssignVariable 				; do the assignment
.93d9	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.93dc	b1 30		lda ($30),y			lda 	(codePtr),y
.93de	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.93e0	d0 04		bne $93e6			bne 	_CRSwapBack
.93e2	c8		iny				iny 								; consume comma
.93e3	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.93e6					_CRSwapBack:
.93e6	20 3b 94	jsr $943b			jsr 	SwapDataCodePtrs			; swap them back.
.93e9	b1 30		lda ($30),y			lda 	(codePtr),y
.93eb	c8		iny				iny
.93ec	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.93ee	f0 ac		beq $939c			beq 	Command_Read 				; if so go round again.
.93f0	88		dey				dey 								; unpick get.
.93f1	60		rts				rts
.93f2					_CRSyntax:
.93f2	4c d1 b2	jmp $b2d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.93f5					RemCommand:
.93f5	b1 30		lda ($30),y			lda 	(codePtr),y
.93f7	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.93f9	d0 06		bne $9401			bne 	_RMExit
.93fb	c8		iny				iny
.93fc	98		tya				tya
.93fd	38		sec				sec
.93fe	71 30		adc ($30),y			adc 	(codePtr),y
.9400	a8		tay				tay
.9401					_RMExit:
.9401	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9402					Command_REPEAT:
.9402	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9404	20 77 a5	jsr $a577			jsr 	StackOpen
.9407	20 bb a5	jsr $a5bb			jsr 	STKSaveCodePosition 		; save loop position
.940a	60		rts				rts
.940b					Command_UNTIL:
.940b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.940d	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.940f	20 a3 a5	jsr $a5a3			jsr 	StackCheckFrame
.9412	a2 00		ldx #$00			ldx 	#0
.9414	20 03 a4	jsr $a403			jsr 	EvaluateNumber 				; work out the number
.9417	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; check if zero
.941a	f0 04		beq $9420			beq 	_CULoopBack 				; if so keep looping
.941c	20 95 a5	jsr $a595			jsr 	StackClose		 			; return
.941f	60		rts				rts
.9420					_CULoopBack:
.9420	20 cc a5	jsr $a5cc			jsr 	STKLoadCodePosition 		; loop back
.9423	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9424					Command_Restore:
.9424	20 3b 94	jsr $943b			jsr 	SwapDataCodePtrs 			; swap code and data
.9427	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9429	85 30		sta $30				sta 	codePtr
.942b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.942d	85 31		sta $31				sta 	codePtr+1
.942f	20 3b 94	jsr $943b			jsr 	SwapDataCodePtrs 			; put them back
.9432	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9434	8d 9b 04	sta $049b			sta 	dataPointer+4
.9437	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.943a	60		rts				rts
.943b					SwapDataCodePtrs:
.943b	da		phx				phx
.943c	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.943e					_SDCPLoop:
.943e	b5 30		lda $30,x			lda 	safePtr,x
.9440	48		pha				pha
.9441	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9444	95 30		sta $30,x			sta 	safePtr,x
.9446	68		pla				pla
.9447	9d 97 04	sta $0497,x			sta 	dataPointer,x
.944a	ca		dex				dex
.944b	10 f1		bpl $943e			bpl 	_SDCPLoop
.944d	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9450	8c 9b 04	sty $049b			sty 	dataPointer+4
.9453	a8		tay				tay
.9454	fa		plx				plx
.9455	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9456					CommandRUN:
.9456	20 d0 8b	jsr $8bd0			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9459	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.945b	85 30		sta $30				sta 	codePtr
.945d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.945f	85 31		sta $31				sta 	codePtr+1
.9461					RUNNewLine:
.9461	b2 30		lda ($30)			lda 	(codePtr)
.9463	f0 5e		beq $94c3			beq 	CRNoProgram         		; no then END.
.9465	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9467	9a		txs				txs
.9468					RUNCodePointerLine:
.9468	a0 02		ldy #$02			ldy 	#2 							; start of program
.946a					_CRIncMainLoop:
.946a	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.946d	d0 05		bne $9474			bne 	_CRNoBreakCheck
.946f	20 c9 b4	jsr $b4c9			jsr 	EXTBreakCheck 				; break check
.9472	f0 4a		beq $94be			beq 	_CRBreak
.9474					_CRNoBreakCheck:
.9474	c8		iny				iny
.9475					_CRMainLoop:
.9475	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9478	b1 30		lda ($30),y			lda 	(codePtr),y
.947a	10 10		bpl $948c			bpl 	_CRNotKeyword
.947c	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.947e	b0 04		bcs $9484			bcs 	_CRIsKeyword
.9480	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9482	b0 34		bcs $94b8			bcs		_CRSyntaxError
.9484					_CRIsKeyword:
.9484	c8		iny				iny 								; consume command
.9485	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9486	aa		tax				tax 								; put in X for vector jump
.9487	20 bb 94	jsr $94bb			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.948a	80 e9		bra $9475			bra 	_CRMainLoop 				; and loop round
.948c					_CRNotKeyword:
.948c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.948e	f0 da		beq $946a			beq 	_CRIncMainLoop
.9490	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9492	90 05		bcc $9499			bcc 	_CRNotVariable
.9494					_CRGoLet:
.9494	20 67 91	jsr $9167			jsr 	LetCommand
.9497	80 dc		bra $9475			bra 	_CRMainLoop
.9499					_CRNotVariable:
.9499	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.949b	f0 f7		beq $9494			beq 	_CRGoLet
.949d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.949f	f0 f3		beq $9494			beq 	_CRGoLet
.94a1	c9 21		cmp #$21			cmp 	#KWD_PLING
.94a3	f0 ef		beq $9494			beq 	_CRGoLet
.94a5	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94a7	f0 09		beq $94b2			beq 	_CRGoRem
.94a9	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94ab	d0 0b		bne $94b8			bne 	_CRSyntaxError
.94ad	20 70 8a	jsr $8a70			jsr 	LabelHere
.94b0	80 c3		bra $9475			bra 	_CRMainLoop
.94b2					_CRGoRem:
.94b2	c8		iny				iny
.94b3	20 f5 93	jsr $93f5			jsr 	RemCommand
.94b6	80 bd		bra $9475			bra 	_CRMainLoop
.94b8					_CRSyntaxError:
.94b8	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.94bb					_CRCallVector0:
.94bb	7c 66 95	jmp ($9566,x)			jmp 	(VectorSet0,x)
.94be					_CRBreak:
.94be	a9 01		lda #$01		lda	#1
.94c0	4c eb 98	jmp $98eb		jmp	ErrorHandler
.94c3					CRNoProgram:
.94c3	4c ed 8c	jmp $8ced			jmp 	EndCommand
.94c6					EOLCommand:
.94c6	18		clc				clc
.94c7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94c9	65 30		adc $30				adc 	codePtr
.94cb	85 30		sta $30				sta 	codePtr
.94cd	90 02		bcc $94d1			bcc 	_CREExit
.94cf	e6 31		inc $31				inc 	codePtr+1
.94d1					_CREExit:
.94d1	80 8e		bra $9461			bra 	RunNewLine
.94d3					Shift1Command:
.94d3	b1 30		lda ($30),y			lda 	(codePtr),y
.94d5	c8		iny				iny
.94d6	0a		asl a				asl 	a
.94d7	aa		tax				tax
.94d8	7c f6 95	jmp ($95f6,x)			jmp 	(VectorSet1,x)
.94db					Shift2Command:
.94db	b1 30		lda ($30),y			lda 	(codePtr),y
.94dd	c8		iny				iny
.94de	0a		asl a				asl 	a
.94df	aa		tax				tax
.94e0	7c 10 96	jmp ($9610,x)			jmp 	(VectorSet2,x)
.94e3					Unused1:
.94e3					Unused2:
.94e3					Unused3:
.94e3					Unused4:
.94e3	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
>94e6							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.94e6					VectorSetPunc:
>94e6	95 9a					.word	ShiftLeft                        ; $00 <<
>94e8	8f 99					.word	BinaryCompareLessEqual           ; $01 <=
>94ea	85 99					.word	BinaryCompareNotEqual            ; $02 <>
>94ec	d1 b2					.word	SyntaxError                      ; $03 !!3
>94ee	d1 b2					.word	SyntaxError                      ; $04 ><
>94f0	99 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>94f2	98 9a					.word	ShiftRight                       ; $06 >>
>94f4	d1 b2					.word	SyntaxError                      ; $07 !!7
>94f6	d1 b2					.word	SyntaxError                      ; $08 !!8
>94f8	d1 b2					.word	SyntaxError                      ; $09 !!9
>94fa	d1 b2					.word	SyntaxError                      ; $0a !!10
>94fc	d1 b2					.word	SyntaxError                      ; $0b !!11
>94fe	d1 b2					.word	SyntaxError                      ; $0c !!12
>9500	d1 b2					.word	SyntaxError                      ; $0d !!13
>9502	d1 b2					.word	SyntaxError                      ; $0e !!14
>9504	d1 b2					.word	SyntaxError                      ; $0f !!15
>9506	d1 b2					.word	SyntaxError                      ; $10 @
>9508	d1 b2					.word	SyntaxError                      ; $11 !!17
>950a	d1 b2					.word	SyntaxError                      ; $12 !!18
>950c	d1 b2					.word	SyntaxError                      ; $13 [
>950e	04 ad					.word	IntegerDivide                    ; $14 \
>9510	d1 b2					.word	SyntaxError                      ; $15 ]
>9512	1e 9c					.word	EorInteger                       ; $16 ^
>9514	d1 b2					.word	SyntaxError                      ; $17 _
>9516	d1 b2					.word	SyntaxError                      ; $18 `
>9518	d1 b2					.word	SyntaxError                      ; $19 !!25
>951a	d1 b2					.word	SyntaxError                      ; $1a !!26
>951c	d1 b2					.word	SyntaxError                      ; $1b {
>951e	d8 9b					.word	OraInteger                       ; $1c |
>9520	d1 b2					.word	SyntaxError                      ; $1d }
>9522	d1 b2					.word	SyntaxError                      ; $1e ~
>9524	d1 b2					.word	SyntaxError                      ; $1f [7m<7F>[m
>9526	d1 b2					.word	SyntaxError                      ; $20
>9528	64 9c					.word	WordIndirect                     ; $21 !
>952a	d1 b2					.word	SyntaxError                      ; $22 "
>952c	d1 b2					.word	SyntaxError                      ; $23 #
>952e	d1 b2					.word	SyntaxError                      ; $24 $
>9530	51 ad					.word	IntegerModulus                   ; $25 %
>9532	92 9b					.word	AndInteger                       ; $26 &
>9534	d1 b2					.word	SyntaxError                      ; $27 '
>9536	d1 b2					.word	SyntaxError                      ; $28 (
>9538	d1 b2					.word	SyntaxError                      ; $29 )
>953a	c6 ad					.word	MulInteger                       ; $2a *
>953c	2c 9b					.word	AddInteger                       ; $2b +
>953e	d1 b2					.word	SyntaxError                      ; $2c ,
>9540	67 9b					.word	SubInteger                       ; $2d -
>9542	d1 b2					.word	SyntaxError                      ; $2e .
>9544	5d af					.word	FDivideCommand                   ; $2f /
>9546	d1 b2					.word	SyntaxError                      ; $30 0
>9548	d1 b2					.word	SyntaxError                      ; $31 1
>954a	d1 b2					.word	SyntaxError                      ; $32 2
>954c	d1 b2					.word	SyntaxError                      ; $33 3
>954e	d1 b2					.word	SyntaxError                      ; $34 4
>9550	d1 b2					.word	SyntaxError                      ; $35 5
>9552	d1 b2					.word	SyntaxError                      ; $36 6
>9554	d1 b2					.word	SyntaxError                      ; $37 7
>9556	d1 b2					.word	SyntaxError                      ; $38 8
>9558	d1 b2					.word	SyntaxError                      ; $39 9
>955a	d1 b2					.word	SyntaxError                      ; $3a :
>955c	d1 b2					.word	SyntaxError                      ; $3b ;
>955e	71 99					.word	BinaryCompareLess                ; $3c <
>9560	67 99					.word	BinaryCompareEqual               ; $3d =
>9562	7b 99					.word	BinaryCompareGreater             ; $3e >
>9564	8b 9c					.word	ByteIndirect                     ; $3f ?
.9566					VectorSet0:
>9566	c6 94					.word	EOLCommand                       ; $80 !0:EOF
>9568	d3 94					.word	Shift1Command                    ; $81 !1:SH1
>956a	db 94					.word	Shift2Command                    ; $82 !2:SH2
>956c	a3 b0					.word	AbsUnary                         ; $83 ABS(
>956e	5b a1					.word	AllocUnary                       ; $84 ALLOC(
>9570	b3 b0					.word	AscUnary                         ; $85 ASC(
>9572	81 a2					.word	ChrUnary                         ; $86 CHR$(
>9574	f0 8c					.word	UnaryEvent                       ; $87 EVENT(
>9576	63 99					.word	UnaryFalse                       ; $88 FALSE
>9578	c0 b0					.word	FracUnary                        ; $89 FRAC(
>957a	d6 b0					.word	IntUnary                         ; $8a INT(
>957c	2c b1					.word	IsValUnary                       ; $8b ISVAL(
>957e	57 91					.word	UnaryJoyB                        ; $8c JOYB(
>9580	30 91					.word	UnaryJoyX                        ; $8d JOYX(
>9582	33 91					.word	UnaryJoyY                        ; $8e JOYY(
>9584	5b a3					.word	Unary_Left                       ; $8f LEFT$(
>9586	e8 b0					.word	LenUnary                         ; $90 LEN(
>9588	85 a3					.word	Unary_Mid                        ; $91 MID$(
>958a	cb a1					.word	Unary_Not                        ; $92 NOT(
>958c	e1 a1					.word	Unary_Random                     ; $93 RANDOM(
>958e	6b a3					.word	Unary_Right                      ; $94 RIGHT$(
>9590	00 a2					.word	Unary_Rnd                        ; $95 RND(
>9592	02 b1					.word	SgnUnary                         ; $96 SGN(
>9594	93 a2					.word	SpcUnary                         ; $97 SPC(
>9596	ae a2					.word	Unary_Str                        ; $98 STR$(
>9598	9d 96					.word	UnaryTimer                       ; $99 TIMER(
>959a	57 99					.word	UnaryTrue                        ; $9a TRUE
>959c	22 b1					.word	ValUnary                         ; $9b VAL(
>959e	59 8d					.word	ForCommand                       ; $9c FOR
>95a0	06 91					.word	IfCommand                        ; $9d IF
>95a2	e3 94					.word	Unused1                          ; $9e PROC
>95a4	02 94					.word	Command_REPEAT                   ; $9f REPEAT
>95a6	bc 98					.word	Command_WHILE                    ; $a0 WHILE
>95a8	2f 91					.word	EndIf                            ; $a1 ENDIF
>95aa	dd ac					.word	Command_ENDPROC                  ; $a2 ENDPROC
>95ac	13 8e					.word	NextCommand                      ; $a3 NEXT
>95ae	e3 94					.word	Unused4                          ; $a4 THEN
>95b0	0b 94					.word	Command_UNTIL                    ; $a5 UNTIL
>95b2	dd 98					.word	Command_WEND                     ; $a6 WEND
>95b4	d1 b2					.word	SyntaxError                      ; $a7 BY
>95b6	96 8b					.word	CallCommand                      ; $a8 CALL
>95b8	70 8e					.word	CircleCommand                    ; $a9 CIRCLE
>95ba	d0 8b					.word	ClearCommand                     ; $aa CLEAR
>95bc	d1 b2					.word	SyntaxError                      ; $ab CLS
>95be	d1 b2					.word	SyntaxError                      ; $ac COLOR
>95c0	d1 b2					.word	SyntaxError                      ; $ad COLOUR
>95c2	28 8c					.word	Command_Data                     ; $ae DATA
>95c4	30 8c					.word	DimCommand                       ; $af DIM
>95c6	e3 94					.word	Unused3                          ; $b0 DOWNTO
>95c8	28 91					.word	ElseCode                         ; $b1 ELSE
>95ca	d1 b2					.word	SyntaxError                      ; $b2 FROM
>95cc	9a 90					.word	GfxCommand                       ; $b3 GFX
>95ce	cc 90					.word	Command_GOSUB                    ; $b4 GOSUB
>95d0	ea 90					.word	GotoCommand                      ; $b5 GOTO
>95d2	d1 b2					.word	SyntaxError                      ; $b6 HERE
>95d4	9a 8e					.word	ImageCommand                     ; $b7 IMAGE
>95d6	67 91					.word	LetCommand                       ; $b8 LET
>95d8	ef 8e					.word	LineCommand                      ; $b9 LINE
>95da	57 92					.word	Command_LOCAL                    ; $ba LOCAL
>95dc	d1 b2					.word	SyntaxError                      ; $bb OFF
>95de	d1 b2					.word	SyntaxError                      ; $bc ON
>95e0	d1 b2					.word	SyntaxError                      ; $bd OUTLINE
>95e2	e8 8e					.word	PlotCommand                      ; $be PLOT
>95e4	e5 92					.word	Command_Print                    ; $bf PRINT
>95e6	9c 93					.word	Command_Read                     ; $c0 READ
>95e8	6c 8e					.word	RectangleCommand                 ; $c1 RECT
>95ea	f5 93					.word	RemCommand                       ; $c2 REM
>95ec	dc 90					.word	Command_RETURN                   ; $c3 RETURN
>95ee	d1 b2					.word	SyntaxError                      ; $c4 SOLID
>95f0	7b 8e					.word	SpriteCommand                    ; $c5 SPRITE
>95f2	b7 8e					.word	TextCommand                      ; $c6 TEXT
>95f4	e3 94					.word	Unused2                          ; $c7 TO
.95f6					VectorSet1:
>95f6	d1 b2					.word	SyntaxError                      ; $80 !0:EOF
>95f8	d1 b2					.word	SyntaxError                      ; $81 !1:SH1
>95fa	d1 b2					.word	SyntaxError                      ; $82 !2:SH2
>95fc	67 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>95fe	86 8b					.word	AssertCommand                    ; $84 ASSERT
>9600	3a 90					.word	BitmapCtrl                       ; $85 BITMAP
>9602	ed 8c					.word	EndCommand                       ; $86 END
>9604	bc 91					.word	Command_List                     ; $87 LIST
>9606	db 92					.word	NewCommand                       ; $88 NEW
>9608	24 94					.word	Command_Restore                  ; $89 RESTORE
>960a	56 94					.word	CommandRUN                       ; $8a RUN
>960c	7f 90					.word	SpritesCtrl                      ; $8b SPRITES
>960e	98 96					.word	StopCommand                      ; $8c STOP
.9610					VectorSet2:
>9610	d1 b2					.word	SyntaxError                      ; $80 !0:EOF
>9612	d1 b2					.word	SyntaxError                      ; $81 !1:SH1
>9614	d1 b2					.word	SyntaxError                      ; $82 !2:SH2
>9616	90 b1					.word	Assemble_adc                     ; $83 ADC
>9618	88 b1					.word	Assemble_and                     ; $84 AND
>961a	a4 b1					.word	Assemble_asl                     ; $85 ASL
>961c	0e b2					.word	Assemble_bcc                     ; $86 BCC
>961e	12 b2					.word	Assemble_bcs                     ; $87 BCS
>9620	1a b2					.word	Assemble_beq                     ; $88 BEQ
>9622	d1 b1					.word	Assemble_bit                     ; $89 BIT
>9624	02 b2					.word	Assemble_bmi                     ; $8a BMI
>9626	16 b2					.word	Assemble_bne                     ; $8b BNE
>9628	fe b1					.word	Assemble_bpl                     ; $8c BPL
>962a	1e b2					.word	Assemble_bra                     ; $8d BRA
>962c	22 b2					.word	Assemble_brk                     ; $8e BRK
>962e	06 b2					.word	Assemble_bvc                     ; $8f BVC
>9630	0a b2					.word	Assemble_bvs                     ; $90 BVS
>9632	2a b2					.word	Assemble_clc                     ; $91 CLC
>9634	7e b2					.word	Assemble_cld                     ; $92 CLD
>9636	3e b2					.word	Assemble_cli                     ; $93 CLI
>9638	6e b2					.word	Assemble_clv                     ; $94 CLV
>963a	9c b1					.word	Assemble_cmp                     ; $95 CMP
>963c	e5 b1					.word	Assemble_cpx                     ; $96 CPX
>963e	e0 b1					.word	Assemble_cpy                     ; $97 CPY
>9640	c2 b1					.word	Assemble_dec                     ; $98 DEC
>9642	7a b2					.word	Assemble_dex                     ; $99 DEX
>9644	56 b2					.word	Assemble_dey                     ; $9a DEY
>9646	8c b1					.word	Assemble_eor                     ; $9b EOR
>9648	c7 b1					.word	Assemble_inc                     ; $9c INC
>964a	8a b2					.word	Assemble_inx                     ; $9d INX
>964c	76 b2					.word	Assemble_iny                     ; $9e INY
>964e	f9 b1					.word	Assemble_jmp                     ; $9f JMP
>9650	f4 b1					.word	Assemble_jsr                     ; $a0 JSR
>9652	98 b1					.word	Assemble_lda                     ; $a1 LDA
>9654	bd b1					.word	Assemble_ldx                     ; $a2 LDX
>9656	db b1					.word	Assemble_ldy                     ; $a3 LDY
>9658	ae b1					.word	Assemble_lsr                     ; $a4 LSR
>965a	8e b2					.word	Assemble_nop                     ; $a5 NOP
>965c	84 b1					.word	Assemble_ora                     ; $a6 ORA
>965e	3a b2					.word	Assemble_pha                     ; $a7 PHA
>9660	26 b2					.word	Assemble_php                     ; $a8 PHP
>9662	82 b2					.word	Assemble_phx                     ; $a9 PHX
>9664	42 b2					.word	Assemble_phy                     ; $aa PHY
>9666	4a b2					.word	Assemble_pla                     ; $ab PLA
>9668	2e b2					.word	Assemble_plp                     ; $ac PLP
>966a	96 b2					.word	Assemble_plx                     ; $ad PLX
>966c	52 b2					.word	Assemble_ply                     ; $ae PLY
>966e	a9 b1					.word	Assemble_rol                     ; $af ROL
>9670	b3 b1					.word	Assemble_ror                     ; $b0 ROR
>9672	36 b2					.word	Assemble_rti                     ; $b1 RTI
>9674	46 b2					.word	Assemble_rts                     ; $b2 RTS
>9676	a0 b1					.word	Assemble_sbc                     ; $b3 SBC
>9678	32 b2					.word	Assemble_sec                     ; $b4 SEC
>967a	92 b2					.word	Assemble_sed                     ; $b5 SED
>967c	4e b2					.word	Assemble_sei                     ; $b6 SEI
>967e	94 b1					.word	Assemble_sta                     ; $b7 STA
>9680	86 b2					.word	Assemble_stp                     ; $b8 STP
>9682	b8 b1					.word	Assemble_stx                     ; $b9 STX
>9684	d6 b1					.word	Assemble_sty                     ; $ba STY
>9686	cc b1					.word	Assemble_stz                     ; $bb STZ
>9688	6a b2					.word	Assemble_tax                     ; $bc TAX
>968a	66 b2					.word	Assemble_tay                     ; $bd TAY
>968c	ef b1					.word	Assemble_trb                     ; $be TRB
>968e	ea b1					.word	Assemble_tsb                     ; $bf TSB
>9690	72 b2					.word	Assemble_tsx                     ; $c0 TSX
>9692	5a b2					.word	Assemble_txa                     ; $c1 TXA
>9694	62 b2					.word	Assemble_txs                     ; $c2 TXS
>9696	5e b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9698					StopCommand:
.9698	a9 08		lda #$08		lda	#8
.969a	4c eb 98	jmp $98eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.969d					UnaryTimer:
.969d	fa		plx				plx
.969e	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.96a1					TimerToStackX:
.96a1	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero 					; zero result
.96a4	64 01		stz $01				stz 	1 							; access I/O
.96a6	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96a9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96ac	ad 5a d6	lda $d65a			lda 	$D65A
.96af	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96b2	ad 5b d6	lda $d65b			lda 	$D65B
.96b5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96b9					ListConvertLine:
.96b9	9c 9d 04	stz $049d			stz 	tbOffset
.96bc	9c a9 04	stz $04a9			stz 	tokenBuffer
.96bf	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96c1	b1 30		lda ($30),y			lda 	(codePtr),y
.96c3	aa		tax				tax
.96c4	88		dey				dey
.96c5	b1 30		lda ($30),y			lda 	(codePtr),y
.96c7	20 47 ae	jsr $ae47			jsr 	ConvertInt16
.96ca	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96cc	86 37		stx $37				stx 	zTemp0+1
.96ce	a0 00		ldy #$00			ldy 	#0
.96d0					_LCCopyNumber:
.96d0	b1 36		lda ($36),y			lda 	(zTemp0),y
.96d2	20 d2 97	jsr $97d2			jsr 	LCLWrite
.96d5	c8		iny				iny
.96d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.96d8	d0 f6		bne $96d0			bne 	_LCCopyNumber
.96da					_LCPadOut:
.96da	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.96dc	20 d2 97	jsr $97d2			jsr 	LCLWrite
.96df	ad 9d 04	lda $049d			lda 	tbOffset
.96e2	c9 06		cmp #$06			cmp 	#6
.96e4	d0 f4		bne $96da			bne 	_LCPadOut
.96e6	a0 03		ldy #$03			ldy 	#3 							; start position.
.96e8					_LCMainLoop:
.96e8	b1 30		lda ($30),y			lda 	(codePtr),y
.96ea	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.96ec	f0 17		beq $9705			beq 	_LCExit
.96ee	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.96f0	90 14		bcc $9706			bcc 	_LCDoubles
.96f2	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.96f4	90 20		bcc $9716			bcc 	_LCShiftPunc
.96f6	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.96f8	90 2b		bcc $9725			bcc 	_LCPunctuation
.96fa	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.96fc	90 2d		bcc $972b			bcc 	_LCIdentifiers
.96fe	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9700	90 49		bcc $974b			bcc 	_LCTokens
.9702	4c a6 97	jmp $97a6			jmp 	_LCData 					; 254-5 are data objects
.9705					_LCExit:
.9705	60		rts				rts
.9706					_LCDoubles:
.9706	48		pha				pha
.9707	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9708	29 02		and #$02			and 	#2
.970a	09 3c		ora #$3c			ora 	#60 						; make < >
.970c	20 d2 97	jsr $97d2			jsr 	LCLWrite
.970f	68		pla				pla 								; restore, do lower bit
.9710	29 03		and #$03			and 	#3
.9712	09 3c		ora #$3c			ora 	#60
.9714	80 0f		bra $9725			bra		_LCPunctuation 				; print, increment, loop
.9716					_LCShiftPunc:
.9716	aa		tax				tax 								; save in X
.9717	29 07		and #$07			and 	#7 							; lower 3 bits
.9719	f0 02		beq $971d			beq 	_LCNoAdd
.971b	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.971d					_LCNoAdd:
.971d	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.971f	90 02		bcc $9723			bcc 	_LCNoAdd2
.9721	09 20		ora #$20			ora 	#32 						; adds $20
.9723					_LCNoAdd2:
.9723	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9725					_LCPunctuation:
.9725	c8		iny				iny 								; consume character
.9726	20 d2 97	jsr $97d2			jsr 	LCLWrite 					; write it out.
.9729	80 bd		bra $96e8			bra 	_LCMainLoop 				; go round again.
.972b					_LCIdentifiers:
.972b	18		clc				clc 								; convert to physical address
.972c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.972e	85 37		sta $37				sta 	zTemp0+1
.9730	c8		iny				iny
.9731	b1 30		lda ($30),y			lda 	(codePtr),y
.9733	85 36		sta $36				sta 	zTemp0
.9735	c8		iny				iny
.9736	5a		phy				phy 								; save position
.9737	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9739					_LCOutIdentifier:
.9739	c8		iny				iny
.973a	b1 36		lda ($36),y			lda 	(zTemp0),y
.973c	29 7f		and #$7f			and 	#$7F
.973e	20 00 98	jsr $9800			jsr 	LCLLowerCase
.9741	20 d2 97	jsr $97d2			jsr 	LCLWrite
.9744	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9746	10 f1		bpl $9739			bpl 	_LCOutIdentifier
.9748	7a		ply				ply 								; restore position
.9749	80 9d		bra $96e8			bra 	_LCMainLoop
.974b					_LCTokens:
.974b	aa		tax				tax 								; token in X
.974c	a9 97		lda #$97			lda 	#((KeywordSet2) & $FF)
.974e	85 36		sta $36				sta 	0+zTemp0
.9750	a9 a8		lda #$a8			lda 	#((KeywordSet2) >> 8)
.9752	85 37		sta $37				sta 	1+zTemp0
.9754	e0 82		cpx #$82			cpx 	#$82
.9756	f0 16		beq $976e			beq 	_LCUseShift
.9758	a9 49		lda #$49			lda 	#((KeywordSet1) & $FF)
.975a	85 36		sta $36				sta 	0+zTemp0
.975c	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.975e	85 37		sta $37				sta 	1+zTemp0
.9760	e0 81		cpx #$81			cpx 	#$81
.9762	f0 0a		beq $976e			beq 	_LCUseShift
.9764	a9 7f		lda #$7f			lda 	#((KeywordSet0) & $FF)
.9766	85 36		sta $36				sta 	0+zTemp0
.9768	a9 a6		lda #$a6			lda 	#((KeywordSet0) >> 8)
.976a	85 37		sta $37				sta 	1+zTemp0
.976c	80 01		bra $976f			bra 	_LCNoShift
.976e					_LCUseShift:
.976e	c8		iny				iny
.976f					_LCNoShift:
.976f	20 e1 97	jsr $97e1			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9772	b1 30		lda ($30),y			lda 	(codePtr),y
.9774	aa		tax				tax 								; into X
.9775					_LCFindText:
.9775	ca		dex				dex
.9776	10 0e		bpl $9786			bpl 	_LCFoundText 				; found text.
.9778	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.977a	1a		inc a				inc 	a 							; one extra for size
.977b	38		sec				sec 								; one extra for checksum
.977c	65 36		adc $36				adc 	zTemp0 						; go to next token
.977e	85 36		sta $36				sta 	zTemp0
.9780	90 f3		bcc $9775			bcc 	_LCFindText
.9782	e6 37		inc $37				inc 	zTemp0+1
.9784	80 ef		bra $9775			bra 	_LCFindText
.9786					_LCFoundText:
.9786	5a		phy				phy 								; save List position
.9787	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9789	aa		tax				tax
.978a	a0 02		ldy #$02			ldy 	#2
.978c					_LCCopyToken:
.978c	b1 36		lda ($36),y			lda 	(zTemp0),y
.978e	20 00 98	jsr $9800			jsr 	LCLLowerCase
.9791	20 d2 97	jsr $97d2			jsr 	LCLWrite
.9794	c8		iny				iny
.9795	ca		dex				dex
.9796	d0 f4		bne $978c			bne 	_LCCopyToken
.9798	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.979a	f0 05		beq $97a1			beq 	_LCNoSpace
.979c	a9 20		lda #$20			lda 	#' '
.979e	20 d2 97	jsr $97d2			jsr 	LCLWrite
.97a1					_LCNoSpace:
.97a1	7a		ply				ply 								; restore position.
.97a2	c8		iny				iny 								; consume token
.97a3	4c e8 96	jmp $96e8			jmp 	_LCMainLoop 				; and go around again.
.97a6					_LCData:
.97a6	48		pha				pha 								; save type $FE/$FF
.97a7	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.97a9	c9 fe		cmp #$fe			cmp 	#$FE
.97ab	f0 02		beq $97af			beq 	_LCHaveOpener
.97ad	a2 22		ldx #$22			ldx 	#'"'
.97af					_LCHaveOpener:
.97af	8a		txa				txa 								; output prefix (# or ")
.97b0	20 d2 97	jsr $97d2			jsr 	LCLWrite
.97b3	c8		iny				iny 								; get count
.97b4	b1 30		lda ($30),y			lda 	(codePtr),y
.97b6	aa		tax				tax
.97b7	c8		iny				iny 								; point at first character
.97b8					_LCOutData:
.97b8	b1 30		lda ($30),y			lda 	(codePtr),y
.97ba	c9 00		cmp #$00			cmp 	#0
.97bc	f0 03		beq $97c1			beq 	_LCNoPrint
.97be	20 d2 97	jsr $97d2			jsr 	LCLWrite
.97c1					_LCNoPrint:
.97c1	c8		iny				iny
.97c2	ca		dex				dex
.97c3	d0 f3		bne $97b8			bne 	_LCOutData
.97c5	68		pla				pla 								; closing " required ?
.97c6	c9 ff		cmp #$ff			cmp 	#$FF
.97c8	d0 05		bne $97cf			bne 	_LCNoQuote
.97ca	a9 22		lda #$22			lda 	#'"'
.97cc	20 d2 97	jsr $97d2			jsr 	LCLWrite
.97cf					_LCNoQuote:
.97cf	4c e8 96	jmp $96e8			jmp 	_LCMainLoop
.97d2					LCLWrite:
.97d2	da		phx				phx
.97d3	ae 9d 04	ldx $049d			ldx 	tbOffset
.97d6	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.97d9	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.97dc	ee 9d 04	inc $049d			inc 	tbOffset
.97df	fa		plx				plx
.97e0	60		rts				rts
.97e1					LCCheckSpaceRequired:
.97e1	ae 9d 04	ldx $049d			ldx 	tbOffset
.97e4	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.97e7	20 00 98	jsr $9800			jsr 	LCLLowerCase 				; saves a little effort
.97ea	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.97ec	90 11		bcc $97ff			bcc 	_LCCSRExit
.97ee	c9 3a		cmp #$3a			cmp 	#"9"+1
.97f0	90 08		bcc $97fa			bcc 	_LCCSRSpace
.97f2	c9 61		cmp #$61			cmp 	#"a"
.97f4	90 09		bcc $97ff			bcc 	_LCCSRExit
.97f6	c9 7b		cmp #$7b			cmp 	#"z"+1
.97f8	b0 05		bcs $97ff			bcs 	_LCCSRExit
.97fa					_LCCSRSpace:
.97fa	a9 20		lda #$20			lda 	#' '
.97fc	20 d2 97	jsr $97d2			jsr 	LCLWrite
.97ff					_LCCSRExit:
.97ff	60		rts				rts
.9800					LCLLowerCase:
.9800	c9 41		cmp #$41			cmp 	#"A"
.9802	90 06		bcc $980a			bcc 	_LCLLCOut
.9804	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9806	b0 02		bcs $980a			bcs 	_LCLLCOut
.9808	69 20		adc #$20			adc 	#$20
.980a					_LCLLCOut:
.980a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.980b					ProcedureScan:
.980b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.980d	85 30		sta $30				sta 	codePtr
.980f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9811	85 31		sta $31				sta 	codePtr+1
.9813					_PSLoop:
.9813	b2 30		lda ($30)			lda 	(codePtr)
.9815	f0 42		beq $9859			beq 	_PSExit
.9817	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9819	b1 30		lda ($30),y			lda 	(codePtr),y
.981b	c9 9e		cmp #$9e			cmp 	#KWD_PROC
.981d	d0 2d		bne $984c			bne 	_PSNext
.981f	c8		iny				iny 								; get the address of the record to zTemp0 and
.9820	b1 30		lda ($30),y			lda 	(codePtr),y
.9822	29 c0		and #$c0			and 	#$C0
.9824	c9 40		cmp #$40			cmp 	#$40
.9826	d0 32		bne $985a			bne 	_PSSyntax
.9828	b1 30		lda ($30),y			lda 	(codePtr),y
.982a	18		clc				clc
.982b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.982d	85 37		sta $37				sta 	zTemp0+1
.982f	c8		iny				iny 								; LSB
.9830	b1 30		lda ($30),y			lda 	(codePtr),y
.9832	85 36		sta $36				sta 	zTemp0
.9834	c8		iny				iny 								; character after variable call.
.9835	98		tya				tya 								; save Y offset at +7
.9836	a0 07		ldy #$07			ldy 	#7
.9838	91 36		sta ($36),y			sta 	(zTemp0),y
.983a	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.983c	a0 02		ldy #$02			ldy 	#2
.983e	91 36		sta ($36),y			sta 	(zTemp0),y
.9840	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9842					_PSCopy:
.9842	b5 30		lda $30,x			lda 	safePtr,x
.9844	c8		iny				iny
.9845	91 36		sta ($36),y			sta 	(zTemp0),y
.9847	e8		inx				inx
.9848	e0 04		cpx #$04			cpx 	#4
.984a	d0 f6		bne $9842			bne 	_PSCopy
.984c					_PSNext:
.984c	18		clc				clc
.984d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.984f	65 30		adc $30				adc 	codePtr
.9851	85 30		sta $30				sta 	codePtr
.9853	90 02		bcc $9857			bcc 	_CREExit
.9855	e6 31		inc $31				inc 	codePtr+1
.9857					_CREExit:
.9857	80 ba		bra $9813			bra 	_PSLoop
.9859					_PSExit:
.9859	60		rts				rts
.985a					_PSSyntax:
.985a	4c d1 b2	jmp $b2d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.985d					ScanForward:
.985d	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.985f	86 37		stx $37				stx 	zTemp0+1
.9861	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9863					_ScanLoop:
.9863	b1 30		lda ($30),y			lda 	(codePtr),y
.9865	c8		iny				iny
.9866	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9868	d0 0e		bne $9878			bne 	_ScanGoNext
.986a	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.986c	f0 04		beq $9872			beq 	_ScanMatch
.986e	c5 37		cmp $37				cmp 	zTemp0+1
.9870	d0 06		bne $9878			bne 	_ScanGoNext
.9872					_ScanMatch:
.9872	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9874	d0 01		bne $9877			bne 	_ScanNotEndEOL
.9876	88		dey				dey
.9877					_ScanNotEndEOL:
.9877	60		rts				rts
.9878					_ScanGoNext:
.9878	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.987a	90 e7		bcc $9863			bcc 	_ScanLoop
.987c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.987e	90 18		bcc $9898			bcc 	_ScanSkipOne
.9880	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9882	b0 2f		bcs $98b3			bcs 	_ScanSkipData
.9884	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9886	90 db		bcc $9863			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9888	c9 a7		cmp #$a7			cmp 	#KWC_LAST_STRUCTURE+1
.988a	b0 d7		bcs $9863			bcs 	_ScanLoop
.988c	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.988e	c9 a1		cmp #$a1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9890	b0 d1		bcs $9863			bcs 	_ScanLoop
.9892	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9894	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9896	80 cb		bra $9863			bra 	_ScanLoop
.9898					_ScanSkipOne:
.9898	c8		iny				iny 								; consume the extra one.
.9899	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.989b	d0 c6		bne $9863			bne 	_ScanLoop
.989d	18		clc				clc
.989e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98a0	65 30		adc $30				adc 	codePtr
.98a2	85 30		sta $30				sta 	codePtr
.98a4	90 02		bcc $98a8			bcc 	_CREExit
.98a6	e6 31		inc $31				inc 	codePtr+1
.98a8					_CREExit:
.98a8	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.98aa	b2 30		lda ($30)			lda 	(codePtr)
.98ac	d0 b5		bne $9863			bne 	_ScanLoop 					; if not zero, more to scan
.98ae	a9 13		lda #$13		lda	#19
.98b0	4c eb 98	jmp $98eb		jmp	ErrorHandler
.98b3					_ScanSkipData:
.98b3	88		dey				dey 								; point at data token
.98b4	c8		iny				iny
.98b5	98		tya				tya
.98b6	38		sec				sec
.98b7	71 30		adc ($30),y			adc 	(codePtr),y
.98b9	a8		tay				tay
.98ba	80 a7		bra $9863			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98bc					Command_WHILE:
.98bc	5a		phy				phy 								; save position of the test
.98bd	a2 00		ldx #$00			ldx 	#0
.98bf	20 03 a4	jsr $a403			jsr 	EvaluateNumber 				; work out the number
.98c2	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; check if zero
.98c5	f0 0e		beq $98d5			beq 	_WHExitLoop 				; if so exit the loop
.98c7	98		tya				tya 								; position *after* test.
.98c8	7a		ply				ply 								; restore position before test, at WHILE
.98c9	88		dey				dey
.98ca	48		pha				pha 								; push after test on the stack
.98cb	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98cd	20 77 a5	jsr $a577			jsr 	StackOpen
.98d0	20 bb a5	jsr $a5bb			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98d3	7a		ply				ply 								; restore the position *after* the test
.98d4	60		rts				rts
.98d5					_WHExitLoop:
.98d5	68		pla				pla 								; throw post loop position
.98d6	a9 a6		lda #$a6			lda 	#KWD_WEND 					; scan forward past WEND
.98d8	aa		tax				tax
.98d9	20 5d 98	jsr $985d			jsr 	ScanForward
.98dc	60		rts				rts
.98dd					Command_WEND:
.98dd	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.98df	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.98e1	20 a3 a5	jsr $a5a3			jsr 	StackCheckFrame
.98e4	20 cc a5	jsr $a5cc			jsr 	STKLoadCodePosition 		; loop back
.98e7	20 95 a5	jsr $a595			jsr 	StackClose		 			; erase the frame
.98ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.aceb					CheckRightBracket:
.aceb	b1 30		lda ($30),y			lda 	(codePtr),y
.aced	c8		iny				iny
.acee	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.acf0	d0 0f		bne $ad01			bne 	CNAFail
.acf2	60		rts				rts
.acf3					CheckComma:
.acf3	b1 30		lda ($30),y			lda 	(codePtr),y
.acf5	c8		iny				iny
.acf6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.acf8	d0 07		bne $ad01			bne 	CNAFail
.acfa	60		rts				rts
.acfb					CheckNextA:
.acfb	d1 30		cmp ($30),y			cmp 	(codePtr),y
.acfd	d0 02		bne $ad01			bne 	CNAFail
.acff	c8		iny				iny 								; skip character
.ad00	60		rts				rts 								; and exit
.ad01					CNAFail:
.ad01	4c d1 b2	jmp $b2d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.98eb					ErrorHandler:
.98eb	a8		tay				tay 								; find the error text
.98ec	f0 49		beq $9937			beq 	_EHEnd
.98ee	a2 00		ldx #$00			ldx 	#0
.98f0	a9 ea		lda #$ea			lda 	#((ErrorText) & $FF)
.98f2	85 36		sta $36				sta 	0+zTemp0
.98f4	a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.98f6	85 37		sta $37				sta 	1+zTemp0
.98f8					_EHFind:
.98f8	88		dey				dey 								; found the error text ?
.98f9	f0 0e		beq $9909			beq 	_EHFound
.98fb					_EHFindZero:
.98fb	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.98fd	e6 36		inc $36				inc 	zTemp0
.98ff	d0 02		bne $9903			bne 	_EHFNoCarry
.9901	e6 37		inc $37				inc 	zTemp0+1
.9903					_EHFNoCarry:
.9903	c9 00		cmp #$00			cmp 	#0
.9905	d0 f4		bne $98fb			bne 	_EHFindZero
.9907	80 ef		bra $98f8			bra 	_EHFind
.9909					_EHFound:
.9909	a5 36		lda $36				lda 	zTemp0 						; print message
.990b	a6 37		ldx $37				ldx 	zTemp0+1
.990d	20 44 99	jsr $9944			jsr 	PrintStringXA
.9910	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9912	b1 30		lda ($30),y			lda 	(codePtr),y
.9914	d0 05		bne $991b			bne 	_EHAtMsg
.9916	c8		iny				iny
.9917	b1 30		lda ($30),y			lda 	(codePtr),y
.9919	f0 17		beq $9932			beq 	_EHCREnd
.991b					_EHAtMsg:
.991b	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.991d	a9 3a		lda #$3a			lda 	#_AtMsg & $FF
.991f	20 44 99	jsr $9944			jsr 	PrintStringXA
.9922	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9924	b1 30		lda ($30),y			lda 	(codePtr),y
.9926	48		pha				pha
.9927	c8		iny				iny
.9928	b1 30		lda ($30),y			lda 	(codePtr),y
.992a	aa		tax				tax
.992b	68		pla				pla
.992c	20 47 ae	jsr $ae47			jsr 	ConvertInt16 				; convert XA to string
.992f	20 44 99	jsr $9944			jsr 	PrintStringXA 				; and print it.
.9932					_EHCREnd:
.9932	a9 0d		lda #$0d			lda 	#13 						; new line
.9934	20 88 b4	jsr $b488			jsr 	EXTPrintCharacter
.9937					_EHEnd:
.9937	4c 37 8b	jmp $8b37			jmp 	WarmStart
>993a	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9942	20 00
.9944					PrintStringXA:
.9944	5a		phy				phy
.9945	86 37		stx $37				stx 	zTemp0+1
.9947	85 36		sta $36				sta 	zTemp0
.9949	a0 00		ldy #$00			ldy 	#0
.994b					_PSXALoop:
.994b	b1 36		lda ($36),y			lda 	(zTemp0),y
.994d	f0 06		beq $9955			beq 	_PSXAExit
.994f	20 88 b4	jsr $b488			jsr 	EXTPrintCharacter
.9952	c8		iny				iny
.9953	80 f6		bra $994b			bra 	_PSXALoop
.9955					_PSXAExit:
.9955	7a		ply				ply
.9956	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9957					UnaryTrue:
.9957	fa		plx				plx
.9958					ReturnTrue:
.9958	a9 01		lda #$01			lda 	#1  						; set to 1
.995a	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.995d	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.995f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9962	60		rts				rts
.9963					UnaryFalse:
.9963	fa		plx				plx
.9964					ReturnFalse:
.9964	4c c3 a4	jmp $a4c3			jmp 	NSMSetZero 					; set it all to zero
.9967					BinaryCompareEqual:
.9967	fa		plx				plx
.9968	20 a3 99	jsr $99a3			jsr 	CompareBaseCode
.996b	c9 00		cmp #$00			cmp 	#0
.996d	f0 e9		beq $9958			beq 	ReturnTrue
.996f	80 f3		bra $9964			bra 	ReturnFalse
.9971					BinaryCompareLess:
.9971	fa		plx				plx
.9972	20 a3 99	jsr $99a3			jsr 	CompareBaseCode
.9975	c9 ff		cmp #$ff			cmp 	#$FF
.9977	f0 df		beq $9958			beq 	ReturnTrue
.9979	80 e9		bra $9964			bra 	ReturnFalse
.997b					BinaryCompareGreater:
.997b	fa		plx				plx
.997c	20 a3 99	jsr $99a3			jsr 	CompareBaseCode
.997f	c9 01		cmp #$01			cmp 	#1
.9981	f0 d5		beq $9958			beq 	ReturnTrue
.9983	80 df		bra $9964			bra 	ReturnFalse
.9985					BinaryCompareNotEqual:
.9985	fa		plx				plx
.9986	20 a3 99	jsr $99a3			jsr 	CompareBaseCode
.9989	c9 00		cmp #$00			cmp 	#0
.998b	d0 cb		bne $9958			bne 	ReturnTrue
.998d	80 d5		bra $9964			bra 	ReturnFalse
.998f					BinaryCompareLessEqual:
.998f	fa		plx				plx
.9990	20 a3 99	jsr $99a3			jsr 	CompareBaseCode
.9993	c9 01		cmp #$01			cmp 	#1
.9995	d0 c1		bne $9958			bne 	ReturnTrue
.9997	80 cb		bra $9964			bra 	ReturnFalse
.9999					BinaryCompareGreaterEqual:
.9999	fa		plx				plx
.999a	20 a3 99	jsr $99a3			jsr 	CompareBaseCode
.999d	c9 ff		cmp #$ff			cmp 	#$FF
.999f	d0 b7		bne $9958			bne 	ReturnTrue
.99a1	80 c1		bra $9964			bra 	ReturnFalse
.99a3					CompareBaseCode:
.99a3	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; make both values if references.
.99a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.99a9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99ac	29 10		and #$10			and 	#NSTString
.99ae	d0 40		bne $99f0			bne 	_CBCString
.99b0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99b3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99b6	d0 3b		bne $99f3			bne 	_CBCFloat
.99b8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99bb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99be	29 08		and #$08			and 	#NSTFloat
.99c0	d0 31		bne $99f3			bne 	_CBCFloat
.99c2	20 f6 99	jsr $99f6			jsr 	CompareFixMinusZero
.99c5	e8		inx				inx
.99c6	20 f6 99	jsr $99f6			jsr 	CompareFixMinusZero
.99c9	ca		dex				dex
.99ca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99cd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99d0	10 0b		bpl $99dd			bpl 	_CDCSameSign
.99d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99d5	30 16		bmi $99ed			bmi 	_CBCLess 					; return $FF
.99d7					_CBCGreater:
.99d7	a9 01		lda #$01			lda 	#1
.99d9	60		rts				rts
.99da					_CBCEqual:
.99da	a9 00		lda #$00			lda 	#0
.99dc	60		rts				rts
.99dd					_CDCSameSign:
.99dd	20 06 9b	jsr $9b06			jsr 	SubTopTwoStack 				; unsigned subtract
.99e0	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; or the mantissa together
.99e3	f0 f5		beq $99da			beq 	_CBCEqual 					; -0 == 0
.99e5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.99e8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.99eb	10 ea		bpl $99d7			bpl 	_CBCGreater
.99ed					_CBCLess:
.99ed	a9 ff		lda #$ff			lda 	#$FF
.99ef	60		rts				rts
.99f0					_CBCString:
.99f0	4c 5c 9a	jmp $9a5c			jmp 	CompareStrings
.99f3					_CBCFloat:
.99f3	4c 43 af	jmp $af43			jmp 	CompareFloat
.99f6					CompareFixMinusZero:
.99f6	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero
.99f9	d0 03		bne $99fe			bne 	_CFXMZNotZero
.99fb	9e 00 04	stz $0400,x			stz 	NSStatus,x
.99fe					_CFXMZNotZero:
.99fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.99ff					StringConcat:
.99ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a02	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a05	29 18		and #$18			and 	#NSBTypeMask
.9a07	c9 10		cmp #$10			cmp 	#NSTString
.9a09	d0 4e		bne $9a59			bne		_SCType
.9a0b	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a0d	e8		inx				inx
.9a0e	20 2c 9a	jsr $9a2c			jsr 	_SCSetupZ0 					; setup for second
.9a11	20 37 9a	jsr $9a37			jsr 	_SCLengthZ0 				; length for second
.9a14	ca		dex				dex
.9a15	20 2c 9a	jsr $9a2c			jsr 	_SCSetupZ0 					; setup for first
.9a18	20 37 9a	jsr $9a37			jsr 	_SCLengthZ0 				; length for first
.9a1b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a1d	20 51 b6	jsr $b651			jsr 	StringTempAllocate
.9a20	20 4a 9a	jsr $9a4a			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a23	e8		inx				inx
.9a24	20 2c 9a	jsr $9a2c			jsr 	_SCSetupZ0 					; copy second out
.9a27	20 4a 9a	jsr $9a4a			jsr 	_SCCopy
.9a2a	ca		dex				dex
.9a2b	60		rts				rts
.9a2c					_SCSetupZ0:
.9a2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a2f	85 36		sta $36				sta 	zTemp0
.9a31	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a34	85 37		sta $37				sta 	zTemp0+1
.9a36	60		rts				rts
.9a37					_SCLengthZ0:
.9a37	5a		phy				phy
.9a38	a0 00		ldy #$00			ldy 	#0
.9a3a					_SCLenLoop:
.9a3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a3c	f0 0a		beq $9a48			beq 	_SCLExit
.9a3e	c8		iny				iny
.9a3f	e6 38		inc $38				inc 	zTemp1
.9a41	10 f7		bpl $9a3a			bpl		_SCLenLoop
.9a43	a9 09		lda #$09		lda	#9
.9a45	4c eb 98	jmp $98eb		jmp	ErrorHandler
.9a48					_SCLExit:
.9a48	7a		ply				ply
.9a49	60		rts				rts
.9a4a					_SCCopy:
.9a4a	5a		phy				phy
.9a4b	a0 00		ldy #$00			ldy 	#0
.9a4d					_SCCopyLoop:
.9a4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a4f	f0 06		beq $9a57			beq 	_SCCExit
.9a51	20 8f b6	jsr $b68f			jsr 	StringTempWrite
.9a54	c8		iny				iny
.9a55	80 f6		bra $9a4d			bra 	_SCCopyLoop
.9a57					_SCCExit:
.9a57	7a		ply				ply
.9a58	60		rts				rts
.9a59					_SCType:
.9a59	4c db b2	jmp $b2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ad04					IntegerDivide:
.ad04	fa		plx				plx
.ad05	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad08	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad0b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad0c	0a		asl a				asl 	a
.ad0d	10 05		bpl $ad14			bpl 	_NotRef
.ad0f	48		pha				pha
.ad10	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad13	68		pla				pla
.ad14					_NotRef:
.ad14	0a		asl a				asl 	a
.ad15	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad17	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad1a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad1d	f0 03		beq $ad22			beq 	_IntegerCode 				; if clear, then we have two integers
.ad1f	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.ad22					_IntegerCode:
.ad22	20 44 ad	jsr $ad44			jsr 	CheckDivideZero 			; do div zero check
.ad25	20 7c ad	jsr $ad7c			jsr 	Int32Divide 				; do the division
.ad28	20 39 ae	jsr $ae39			jsr 	CalculateSign 				; calculate result sign
.ad2b					NSMCopyPlusTwoToZero:
.ad2b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ad2e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ad31	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ad34	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad37	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ad3a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad3d	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ad40	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad43	60		rts				rts
.ad44					CheckDivideZero:
.ad44	e8		inx				inx
.ad45	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero
.ad48	f0 02		beq $ad4c			beq 	_CDVError
.ad4a	ca		dex				dex
.ad4b	60		rts				rts
.ad4c					_CDVError:
.ad4c	a9 03		lda #$03		lda	#3
.ad4e	4c eb 98	jmp $98eb		jmp	ErrorHandler
.ad51					IntegerModulus:
.ad51	fa		plx				plx
.ad52	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad55	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad58	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad59	0a		asl a				asl 	a
.ad5a	10 05		bpl $ad61			bpl 	_NotRef
.ad5c	48		pha				pha
.ad5d	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad60	68		pla				pla
.ad61					_NotRef:
.ad61	0a		asl a				asl 	a
.ad62	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad64	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad67	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad6a	f0 03		beq $ad6f			beq 	_IntegerCode 				; if clear, then we have two integers
.ad6c	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.ad6f					_IntegerCode:
.ad6f					IntegerModulusNoCheck:
.ad6f	20 44 ad	jsr $ad44			jsr 	CheckDivideZero 			; do div zero check
.ad72	20 7c ad	jsr $ad7c			jsr 	Int32Divide 				; do the division
.ad75	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ad78	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ad7b	60		rts				rts
.ad7c					Int32Divide:
.ad7c	48		pha				pha 								; save AXY
.ad7d	5a		phy				phy
.ad7e	20 9a a4	jsr $a49a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ad81	20 bf a4	jsr $a4bf			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ad84	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ad86					_I32DivideLoop:
.ad86	e8		inx				inx
.ad87	e8		inx				inx
.ad88	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ad8b	ca		dex				dex
.ad8c	ca		dex				dex
.ad8d	20 d9 a4	jsr $a4d9			jsr 	NSMRotateLeft
.ad90	20 bc ad	jsr $adbc			jsr 	DivideCheckSubtract 		; check if subtract possible
.ad93	90 03		bcc $ad98			bcc 	_I32DivideNoCarryIn
.ad95	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ad98					_I32DivideNoCarryIn:
.ad98	88		dey				dey 								; loop round till division completed.
.ad99	d0 eb		bne $ad86			bne 	_I32DivideLoop
.ad9b	7a		ply				ply 								; restore AXY and exit
.ad9c	68		pla				pla
.ad9d	60		rts				rts
.ad9e					Int32ShiftDivide:
.ad9e	48		pha				pha 								; save AY
.ad9f	5a		phy				phy
.ada0	e8		inx				inx 								; clear S[X+2]
.ada1	e8		inx				inx
.ada2	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.ada5	ca		dex				dex
.ada6	ca		dex				dex
.ada7	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ada9					_I32SDLoop:
.ada9	20 bc ad	jsr $adbc			jsr 	DivideCheckSubtract 		; check if subtract possible
.adac	e8		inx				inx
.adad	e8		inx				inx
.adae	20 d9 a4	jsr $a4d9			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.adb1	ca		dex				dex
.adb2	ca		dex				dex
.adb3	20 d9 a4	jsr $a4d9			jsr 	NSMRotateLeft
.adb6	88		dey				dey 	 							; do 31 times
.adb7	d0 f0		bne $ada9			bne 	_I32SDLoop
.adb9	7a		ply				ply 								; restore AY and exit
.adba	68		pla				pla
.adbb	60		rts				rts
.adbc					DivideCheckSubtract:
.adbc	20 06 9b	jsr $9b06			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.adbf	b0 04		bcs $adc5			bcs 	_DCSExit 					; if carry set, then could do, exit
.adc1	20 e0 9a	jsr $9ae0			jsr 	AddTopTwoStack 				; add it back in
.adc4	18		clc				clc 								; and return False
.adc5					_DCSExit:
.adc5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.adc6					MulInteger:
.adc6	fa		plx				plx
.adc7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.adca	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.adcd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.adce	0a		asl a				asl 	a
.adcf	10 05		bpl $add6			bpl 	_NotRef
.add1	48		pha				pha
.add2	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.add5	68		pla				pla
.add6					_NotRef:
.add6	0a		asl a				asl 	a 							; put MSB of type into A:7
.add7	30 0b		bmi $ade4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.add9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.addc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.addf	f0 06		beq $ade7			beq 	_IntegerCode 				; if clear, then we have two integers
.ade1	4c 1a b0	jmp $b01a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ade4					_StringData:
.ade4	4c e5 b2	jmp $b2e5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ade7					_IntegerCode:
.ade7	20 f4 ad	jsr $adf4			jsr 	MultiplyShort
.adea	c9 00		cmp #$00			cmp 	#0
.adec	f0 05		beq $adf3			beq 	_MIExit
.adee	a9 04		lda #$04		lda	#4
.adf0	4c eb 98	jmp $98eb		jmp	ErrorHandler
.adf3					_MIExit:
.adf3	60		rts				rts
.adf4					MultiplyShort:
.adf4	5a		phy				phy 								; save Y
.adf5	20 9a a4	jsr $a49a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.adf8	20 bf a4	jsr $a4bf			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.adfb	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.adfd					_I32MLoop:
.adfd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ae00	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ae03	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ae06	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ae09	f0 28		beq $ae33			beq 	_I32MExit 					; exit if zero
.ae0b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ae0e	29 01		and #$01			and 	#1
.ae10	f0 0e		beq $ae20			beq 	_I32MNoAdd
.ae12	20 e0 9a	jsr $9ae0			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ae15	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ae18	10 06		bpl $ae20			bpl 	_I32MNoAdd
.ae1a					_I32ShiftRight:
.ae1a	20 e6 a4	jsr $a4e6			jsr 	NSMShiftRight 				; shift S[X] right
.ae1d	c8		iny				iny 								; increment shift count
.ae1e	80 0a		bra $ae2a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ae20					_I32MNoAdd:
.ae20	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ae23	70 f5		bvs $ae1a			bvs 	_I32ShiftRight 				; instead.
.ae25	e8		inx				inx
.ae26	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ae29	ca		dex				dex
.ae2a					_I32MShiftUpper:
.ae2a	e8		inx				inx 								; shift S[X+2] right
.ae2b	e8		inx				inx
.ae2c	20 e6 a4	jsr $a4e6			jsr 	NSMShiftRight
.ae2f	ca		dex				dex
.ae30	ca		dex				dex
.ae31	80 ca		bra $adfd			bra 	_I32MLoop 					; try again.
.ae33					_I32MExit:
.ae33	20 39 ae	jsr $ae39			jsr 	CalculateSign
.ae36	98		tya				tya 								; shift in A
.ae37	7a		ply				ply 								; restore Y and exit
.ae38	60		rts				rts
.ae39					CalculateSign:
.ae39	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ae3c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ae3f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ae42	0a		asl a				asl 	a 							; shift bit 7 into carry
.ae43	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ae46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a5c					CompareStrings:
.9a5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a5f	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a62	29 10		and #$10			and 	#NSBIsString
.9a64	f0 2c		beq $9a92			beq 	_CSTypeError
.9a66	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a69	85 36		sta $36				sta 	zTemp0
.9a6b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a6e	85 37		sta $37				sta 	zTemp0+1
.9a70	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a73	85 38		sta $38				sta 	zTemp1
.9a75	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a78	85 39		sta $39				sta 	zTemp1+1
.9a7a	5a		phy				phy 								; save Y so we can access strings
.9a7b	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a7d					_CSLoop:
.9a7d	c8		iny				iny
.9a7e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a80	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a82	d0 06		bne $9a8a			bne 	_CSDifferent
.9a84	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a86	d0 f5		bne $9a7d			bne 	_CSLoop 					; still comparing
.9a88					_CSExit:
.9a88	7a		ply				ply 								; reached end, return zero in A from EOS
.9a89	60		rts				rts
.9a8a					_CSDifferent:
.9a8a	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a8c	90 fa		bcc $9a88			bcc		_CSExit
.9a8e	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a90	80 f6		bra $9a88			bra 	_CSExit
.9a92					_CSTypeError:
.9a92	4c db b2	jmp $b2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a95					ShiftLeft:
.9a95	38		sec				sec
.9a96	80 01		bra $9a99			bra 	ShiftMain
.9a98					ShiftRight:
.9a98	18		clc				clc
.9a99					ShiftMain:
.9a99	fa		plx				plx 								; restore X
.9a9a	08		php				php 								; save direction
.9a9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a9e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aa1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aa2	0a		asl a				asl 	a
.9aa3	10 05		bpl $9aaa			bpl 	_NotRef
.9aa5	48		pha				pha
.9aa6	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9aa9	68		pla				pla
.9aaa					_NotRef:
.9aaa	0a		asl a				asl 	a
.9aab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9aad	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ab0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ab3	f0 03		beq $9ab8			beq 	_IntegerCode 				; if clear, then we have two integers
.9ab5	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.9ab8					_IntegerCode:
.9ab8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9abb	29 e0		and #$e0			and 	#$E0
.9abd	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ac0	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ac3	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ac6	d0 13		bne $9adb			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ac8					_SMLoop:
.9ac8	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9acb	30 11		bmi $9ade			bmi 	_SMExit 					; exit if done.
.9acd	28		plp				plp 								; restore direcition setting
.9ace	08		php				php
.9acf	90 05		bcc $9ad6			bcc 	_SMRight
.9ad1	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; shift left if CS
.9ad4	80 f2		bra $9ac8			bra 	_SMLoop
.9ad6					_SMRight:
.9ad6	20 e6 a4	jsr $a4e6			jsr 	NSMShiftRight 				; shift right if CC
.9ad9	80 ed		bra $9ac8			bra 	_SMLoop
.9adb					_SMExit0:
.9adb	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero 					; return zero.
.9ade					_SMExit:
.9ade	28		plp				plp 								; throw direction
.9adf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9ae0					AddTopTwoStack:
.9ae0	18		clc				clc
.9ae1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ae4	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9ae7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9aea	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9aed	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9af0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9af3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9af6	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9af9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9afc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9aff	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b02	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b05	60		rts				rts
.9b06					SubTopTwoStack:
.9b06	38		sec				sec
.9b07	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b0a	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b0d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b10	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b13	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b16	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b19	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b1c	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b1f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b22	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b25	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b28	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b2b	60		rts				rts
.9b2c					AddInteger:
.9b2c	fa		plx				plx
.9b2d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b30	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b33	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b34	0a		asl a				asl 	a
.9b35	10 05		bpl $9b3c			bpl 	_NotRef
.9b37	48		pha				pha
.9b38	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b3b	68		pla				pla
.9b3c					_NotRef:
.9b3c	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b3d	30 0b		bmi $9b4a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b3f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b42	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b45	f0 06		beq $9b4d			beq 	_IntegerCode 				; if clear, then we have two integers
.9b47	4c a2 ae	jmp $aea2			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b4a					_StringData:
.9b4a	4c ff 99	jmp $99ff			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b4d					_IntegerCode:
.9b4d					AddCode:
.9b4d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b50	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b53	10 8b		bpl $9ae0			bpl 	AddTopTwoStack
.9b55	20 06 9b	jsr $9b06			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b58	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b5b	10 09		bpl $9b66			bpl 	_AddExit
.9b5d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b60	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b63	20 78 a4	jsr $a478			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b66					_AddExit:
.9b66	60		rts				rts
.9b67					SubInteger:
.9b67	fa		plx				plx
.9b68	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b6b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b6e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b6f	0a		asl a				asl 	a
.9b70	10 05		bpl $9b77			bpl 	_NotRef
.9b72	48		pha				pha
.9b73	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b76	68		pla				pla
.9b77					_NotRef:
.9b77	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b78	30 0b		bmi $9b85			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b7a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b7d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b80	f0 06		beq $9b88			beq 	_IntegerCode 				; if clear, then we have two integers
.9b82	4c a7 ae	jmp $aea7			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b85					_StringData:
.9b85	4c e5 b2	jmp $b2e5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b88					_IntegerCode:
.9b88	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9b8b	49 80		eor #$80			eor 	#$80
.9b8d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b90	80 bb		bra $9b4d			bra 	AddCode 					; and do the same code as add.
.9b92					AndInteger:
.9b92	fa		plx				plx
.9b93	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b96	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b99	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b9a	0a		asl a				asl 	a
.9b9b	10 05		bpl $9ba2			bpl 	_NotRef
.9b9d	48		pha				pha
.9b9e	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ba1	68		pla				pla
.9ba2					_NotRef:
.9ba2	0a		asl a				asl 	a
.9ba3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ba5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ba8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bab	f0 03		beq $9bb0			beq 	_IntegerCode 				; if clear, then we have two integers
.9bad	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.9bb0					_IntegerCode:
.9bb0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bb3	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9bb6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bb9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bbc	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9bbf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bc2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bc5	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9bc8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bcb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bce	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9bd1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bd4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9bd7	60		rts				rts
.9bd8					OraInteger:
.9bd8	fa		plx				plx
.9bd9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bdc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bdf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9be0	0a		asl a				asl 	a
.9be1	10 05		bpl $9be8			bpl 	_NotRef
.9be3	48		pha				pha
.9be4	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9be7	68		pla				pla
.9be8					_NotRef:
.9be8	0a		asl a				asl 	a
.9be9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9beb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bee	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bf1	f0 03		beq $9bf6			beq 	_IntegerCode 				; if clear, then we have two integers
.9bf3	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.9bf6					_IntegerCode:
.9bf6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bf9	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9bfc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bff	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c02	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c05	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c08	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c0b	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c0e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c11	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c14	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c17	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c1a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c1d	60		rts				rts
.9c1e					EorInteger:
.9c1e	fa		plx				plx
.9c1f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c22	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c25	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c26	0a		asl a				asl 	a
.9c27	10 05		bpl $9c2e			bpl 	_NotRef
.9c29	48		pha				pha
.9c2a	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c2d	68		pla				pla
.9c2e					_NotRef:
.9c2e	0a		asl a				asl 	a
.9c2f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c31	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c34	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c37	f0 03		beq $9c3c			beq 	_IntegerCode 				; if clear, then we have two integers
.9c39	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.9c3c					_IntegerCode:
.9c3c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c3f	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c42	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c45	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c48	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c4b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c4e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c51	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c54	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c57	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c5a	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c5d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c60	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c63	60		rts				rts
.9c64					WordIndirect:
.9c64	fa		plx				plx
.9c65	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c68	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c6b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c6c	0a		asl a				asl 	a
.9c6d	10 05		bpl $9c74			bpl 	_NotRef
.9c6f	48		pha				pha
.9c70	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c73	68		pla				pla
.9c74					_NotRef:
.9c74	0a		asl a				asl 	a
.9c75	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c77	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c7a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c7d	f0 03		beq $9c82			beq 	_IntegerCode 				; if clear, then we have two integers
.9c7f	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.9c82					_IntegerCode:
.9c82	20 4d 9b	jsr $9b4d			jsr 	AddCode 					; add the two values
.9c85	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c87	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c8a	60		rts				rts
.9c8b					ByteIndirect:
.9c8b	fa		plx				plx
.9c8c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c8f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c92	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c93	0a		asl a				asl 	a
.9c94	10 05		bpl $9c9b			bpl 	_NotRef
.9c96	48		pha				pha
.9c97	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c9a	68		pla				pla
.9c9b					_NotRef:
.9c9b	0a		asl a				asl 	a
.9c9c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c9e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ca1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ca4	f0 03		beq $9ca9			beq 	_IntegerCode 				; if clear, then we have two integers
.9ca6	4c db b2	jmp $b2db			jmp 	TypeError 					; anything else, type mismatch.
.9ca9					_IntegerCode:
.9ca9	20 4d 9b	jsr $9b4d			jsr 	AddCode 					; add the two values
.9cac	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9cae	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cb1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ae47					ConvertInt16:
.ae47	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ae4a	8e 10 04	stx $0410			stx 	NSMantissa1
.ae4d	9c 18 04	stz $0418			stz 	NSMantissa2
.ae50	9c 20 04	stz $0420			stz 	NSMantissa3
.ae53	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ae56	a2 00		ldx #$00			ldx 	#0 							; stack level
.ae58	a9 0a		lda #$0a			lda 	#10 						; base
.ae5a	80 00		bra $ae5c			bra 	ConvertInt32
.ae5c					ConvertInt32:
.ae5c	5a		phy				phy
.ae5d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ae5f	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ae62	10 08		bpl $ae6c			bpl 	_CI32NotNeg
.ae64	48		pha				pha
.ae65	a9 2d		lda #$2d			lda 	#'-'
.ae67	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae6a	c8		iny				iny
.ae6b	68		pla				pla
.ae6c					_CI32NotNeg:
.ae6c	20 7a ae	jsr $ae7a			jsr 	_CI32DivideConvert 			; recursive conversion
.ae6f	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ae71	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae74	7a		ply				ply
.ae75	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ae77	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ae79	60		rts				rts
.ae7a					_CI32DivideConvert:
.ae7a	e8		inx				inx 								; write to next slot up
.ae7b	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.ae7e	ca		dex				dex
.ae7f	20 7c ad	jsr $ad7c			jsr 	Int32Divide 				; divide
.ae82	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ae85	48		pha				pha
.ae86	20 2b ad	jsr $ad2b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ae89	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; is it zero ?
.ae8c	f0 06		beq $ae94			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ae8e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ae91	20 7a ae	jsr $ae7a			jsr 	_CI32DivideConvert 			; and recusrively call.
.ae94					_CI32NoRecurse:
.ae94	68		pla				pla 								; remainder
.ae95	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ae97	90 02		bcc $ae9b			bcc 	_CI32NotHex
.ae99	69 26		adc #$26			adc 	#6+32
.ae9b					_CI32NotHex:
.ae9b	69 30		adc #$30			adc 	#48
.ae9d	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.aea0	c8		iny				iny
.aea1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cb2					PrecedenceLevel:
>9cb2	04					.byte	 4	; $00 <<
>9cb3	02					.byte	 2	; $01 <=
>9cb4	02					.byte	 2	; $02 <>
>9cb5	00					.byte	 0	; $03 !!3
>9cb6	00					.byte	 0	; $04 ><
>9cb7	02					.byte	 2	; $05 >=
>9cb8	04					.byte	 4	; $06 >>
>9cb9	00					.byte	 0	; $07 !!7
>9cba	00					.byte	 0	; $08 !!8
>9cbb	00					.byte	 0	; $09 !!9
>9cbc	00					.byte	 0	; $0a !!10
>9cbd	00					.byte	 0	; $0b !!11
>9cbe	00					.byte	 0	; $0c !!12
>9cbf	00					.byte	 0	; $0d !!13
>9cc0	00					.byte	 0	; $0e !!14
>9cc1	00					.byte	 0	; $0f !!15
>9cc2	00					.byte	 0	; $10 @
>9cc3	00					.byte	 0	; $11 !!17
>9cc4	00					.byte	 0	; $12 !!18
>9cc5	00					.byte	 0	; $13 [
>9cc6	04					.byte	 4	; $14 \
>9cc7	00					.byte	 0	; $15 ]
>9cc8	01					.byte	 1	; $16 ^
>9cc9	00					.byte	 0	; $17 _
>9cca	00					.byte	 0	; $18 `
>9ccb	00					.byte	 0	; $19 !!25
>9ccc	00					.byte	 0	; $1a !!26
>9ccd	00					.byte	 0	; $1b {
>9cce	01					.byte	 1	; $1c |
>9ccf	00					.byte	 0	; $1d }
>9cd0	00					.byte	 0	; $1e ~
>9cd1	00					.byte	 0	; $1f [7m<7F>[m
>9cd2	00					.byte	 0	; $20
>9cd3	05					.byte	 5	; $21 !
>9cd4	00					.byte	 0	; $22 "
>9cd5	00					.byte	 0	; $23 #
>9cd6	05					.byte	 5	; $24 $
>9cd7	04					.byte	 4	; $25 %
>9cd8	01					.byte	 1	; $26 &
>9cd9	00					.byte	 0	; $27 '
>9cda	00					.byte	 0	; $28 (
>9cdb	00					.byte	 0	; $29 )
>9cdc	04					.byte	 4	; $2a *
>9cdd	03					.byte	 3	; $2b +
>9cde	00					.byte	 0	; $2c ,
>9cdf	03					.byte	 3	; $2d -
>9ce0	00					.byte	 0	; $2e .
>9ce1	04					.byte	 4	; $2f /
>9ce2	00					.byte	 0	; $30 0
>9ce3	00					.byte	 0	; $31 1
>9ce4	00					.byte	 0	; $32 2
>9ce5	00					.byte	 0	; $33 3
>9ce6	00					.byte	 0	; $34 4
>9ce7	00					.byte	 0	; $35 5
>9ce8	00					.byte	 0	; $36 6
>9ce9	00					.byte	 0	; $37 7
>9cea	00					.byte	 0	; $38 8
>9ceb	00					.byte	 0	; $39 9
>9cec	00					.byte	 0	; $3a :
>9ced	00					.byte	 0	; $3b ;
>9cee	02					.byte	 2	; $3c <
>9cef	02					.byte	 2	; $3d =
>9cf0	02					.byte	 2	; $3e >
>9cf1	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9cf2					EvaluateExpressionAt0:
.9cf2	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9cf4					EvaluateExpression:
.9cf4	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9cf6					EvaluateExpressionAtPrecedence:
.9cf6	48		pha				pha 								; save precedence level
.9cf7	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm 				; evaluate term into level X.
.9cfa	68		pla				pla 								; restore precedence level.
.9cfb					_EXPRLoop:
.9cfb	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9cfd	b1 30		lda ($30),y			lda 	(codePtr),y
.9cff	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d01	b0 25		bcs $9d28			bcs 	_EXPRExit
.9d03	da		phx				phx 								; read the operator precedence
.9d04	aa		tax				tax
.9d05	bd b2 9c	lda $9cb2,x			lda 	PrecedenceLevel,x
.9d08	fa		plx				plx
.9d09	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d0b	f0 1b		beq $9d28			beq 	_EXPRExit
.9d0d	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d0f	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d11	c5 37		cmp $37				cmp 	zTemp0+1
.9d13	b0 13		bcs $9d28			bcs		_EXPRExit 					; if current >= operator exit
.9d15	48		pha				pha 								; save current precedence.
.9d16	b1 30		lda ($30),y			lda 	(codePtr),y
.9d18	c8		iny				iny
.9d19	48		pha				pha
.9d1a	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d1c	e8		inx				inx 								; work out the right hand side.
.9d1d	20 f6 9c	jsr $9cf6			jsr 	EvaluateExpressionAtPrecedence
.9d20	ca		dex				dex
.9d21	68		pla				pla 								; get operator, call the code.
.9d22	20 2b 9d	jsr $9d2b			jsr 	_EXPRCaller
.9d25	68		pla				pla 								; restore precedence level
.9d26	80 d3		bra $9cfb			bra 	_EXPRLoop 					; and go round.
.9d28					_EXPRExit:
.9d28	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d2a	60		rts				rts
.9d2b					_EXPRCaller:
.9d2b	da		phx				phx 								; save on stack, first thing is to restore it
.9d2c	0a		asl a				asl 	a 							; double so can use vectors into X
.9d2d	aa		tax				tax
.9d2e	7c e6 94	jmp ($94e6,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.aea2					FloatingPointAdd:
.aea2	20 43 b0	jsr $b043			jsr 	FloatPrepare 				; prepare for floats
.aea5	80 0b		bra $aeb2			bra 	FloatAdd
.aea7					FloatingPointSub:
.aea7	20 43 b0	jsr $b043			jsr 	FloatPrepare 				; prepare for floats
.aeaa					FloatSubtract:
.aeaa	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.aead	49 80		eor #$80			eor 	#$80
.aeaf	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aeb2					FloatAdd:
.aeb2	48		pha				pha
.aeb3	5a		phy				phy
.aeb4	20 54 b0	jsr $b054			jsr 	NSNormalise 				; normalise S[X]
.aeb7	f0 54		beq $af0d			beq 	_FAReturn1
.aeb9	e8		inx				inx 								; normalise S[X+1]
.aeba	20 54 b0	jsr $b054			jsr 	NSNormalise
.aebd	ca		dex				dex
.aebe	c9 00		cmp #$00			cmp 	#0
.aec0	f0 6f		beq $af31			beq 	_FAExit 					; if so, just return A
.aec2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aec5	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aec8	f0 1b		beq $aee5			beq 	_FAExponentsEqual
.aeca	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.aecd	a8		tay				tay
.aece	38		sec				sec 								; do a signed comparison of the exponents.
.aecf	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aed2	50 02		bvc $aed6			bvc 	_FANoSignedChange
.aed4	49 80		eor #$80			eor 	#$80
.aed6					_FANoSignedChange:
.aed6	29 80		and #$80			and 	#$80
.aed8	10 03		bpl $aedd			bpl 	_FAHaveMax
.aeda	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.aedd					_FAHaveMax:
.aedd	20 34 af	jsr $af34			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.aee0	e8		inx				inx
.aee1	20 34 af	jsr $af34			jsr 	_FAShiftToExponent
.aee4	ca		dex				dex
.aee5					_FAExponentsEqual:
.aee5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.aee8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aeeb	30 10		bmi $aefd			bmi 	_FADifferentSigns
.aeed	20 e0 9a	jsr $9ae0			jsr 	AddTopTwoStack 				; do the add of the mantissae
.aef0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.aef3	10 3c		bpl $af31			bpl 	_FAExit 					; if no, we are done.
.aef5	20 e6 a4	jsr $a4e6			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.aef8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.aefb	80 34		bra $af31			bra 	_FAExit
.aefd					_FADifferentSigns:
.aefd	20 06 9b	jsr $9b06			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.af00	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.af03	10 2c		bpl $af31			bpl 	_FAExit 					; if no, we are done.
.af05	20 6f a4	jsr $a46f			jsr 	NSMNegate 					; netate result
.af08	20 78 a4	jsr $a478			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.af0b	80 24		bra $af31			bra 	_FAExit
.af0d					_FAReturn1:
.af0d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.af10	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af13	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.af16	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af19	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.af1c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af1f	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.af22	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af25	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.af28	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af2b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.af2e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af31					_FAExit:
.af31	7a		ply				ply
.af32	68		pla				pla
.af33	60		rts				rts
.af34					_FAShiftToExponent:
.af34					_FAShiftToExponent2:
.af34	98		tya				tya 								; compare Y to exponent
.af35	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.af38	f0 08		beq $af42			beq 	_FASEExit 					; exit if so.
.af3a	20 e6 a4	jsr $a4e6			jsr 	NSMShiftRight	 			; shift the mantissa right
.af3d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.af40	80 f2		bra $af34			bra 	_FAShiftToExponent2
.af42					_FASEExit:
.af42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.af43					CompareFloat:
.af43	20 aa ae	jsr $aeaa			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.af46	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.af49	29 f8		and #$f8			and 	#$F8
.af4b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.af4e	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.af51	f0 09		beq $af5c			beq 	_FCExit 					; zero, so approximately identical
.af53	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.af55	3c 00 04	bit $0400,x			bit 	NSStatus,x
.af58	10 02		bpl $af5c			bpl 	_FCExit
.af5a					_FCNegative:
.af5a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.af5c					_FCExit:
.af5c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.af5d					FDivideCommand:
.af5d	fa		plx				plx	 								; restore stack position
.af5e	20 43 b0	jsr $b043			jsr 	FloatPrepare 				; prepare for floats
.af61					FloatDivide:
.af61	48		pha				pha
.af62	e8		inx				inx
.af63	20 54 b0	jsr $b054			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.af66	ca		dex				dex
.af67	c9 00		cmp #$00			cmp 	#0
.af69	f0 20		beq $af8b			beq 	_FDZero
.af6b	20 54 b0	jsr $b054			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.af6e	f0 19		beq $af89			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.af70	20 9e ad	jsr $ad9e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.af73	20 2b ad	jsr $ad2b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.af76	20 54 b0	jsr $b054			jsr		NSNormalise 				; renormalise
.af79	20 39 ae	jsr $ae39			jsr 	CalculateSign 				; calculate result sign
.af7c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.af7f	38		sec				sec
.af80	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af83	38		sec				sec
.af84	e9 1e		sbc #$1e			sbc 	#30
.af86	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af89					_FDExit:
.af89	68		pla				pla
.af8a	60		rts				rts
.af8b					_FDZero:
.af8b	a9 03		lda #$03		lda	#3
.af8d	4c eb 98	jmp $98eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.af90					FloatFractionalPart:
.af90	5a		phy				phy
.af91	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.af94	29 7f		and #$7f			and 	#$7F
.af96	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af99	20 54 b0	jsr $b054			jsr 	NSNormalise
.af9c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.af9f	38		sec				sec
.afa0	e9 e0		sbc #$e0			sbc 	#$E0
.afa2	90 31		bcc $afd5			bcc 	_FFPExit 					; already fractional
.afa4	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.afa6	b0 2a		bcs $afd2			bcs 	_FFPZero
.afa8	a8		tay				tay 								; put count to do in Y
.afa9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.afac	20 d7 af	jsr $afd7			jsr 	_FFPPartial
.afaf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afb2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.afb5	20 d7 af	jsr $afd7			jsr 	_FFPPartial
.afb8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afbb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.afbe	20 d7 af	jsr $afd7			jsr 	_FFPPartial
.afc1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afc4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.afc7	20 d7 af	jsr $afd7			jsr 	_FFPPartial
.afca	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afcd	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; zeroed check.
.afd0	d0 03		bne $afd5			bne 	_FFPExit
.afd2					_FFPZero:
.afd2	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.afd5					_FFPExit:
.afd5	7a		ply				ply
.afd6	60		rts				rts
.afd7					_FFPPartial:
.afd7	c0 00		cpy #$00			cpy 	#0 							; no more to do
.afd9	f0 17		beq $aff2			beq 	_FFFPPExit
.afdb	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.afdd	b0 0c		bcs $afeb			bcs 	_FFFPPWholeByte
.afdf	5a		phy				phy
.afe0					_FFFPPLeft:
.afe0	0a		asl a				asl 	a
.afe1	88		dey				dey
.afe2	d0 fc		bne $afe0			bne 	_FFFPPLeft
.afe4	7a		ply				ply
.afe5					_FFFPPRight:
.afe5	4a		lsr a				lsr 	a
.afe6	88		dey				dey
.afe7	d0 fc		bne $afe5			bne 	_FFFPPRight
.afe9	80 07		bra $aff2			bra 	_FFFPPExit
.afeb					_FFFPPWholeByte:
.afeb	98		tya				tya 								; subtract 8 from count
.afec	38		sec				sec
.afed	e9 08		sbc #$08			sbc 	#8
.afef	a8		tay				tay
.aff0	a9 00		lda #$00			lda 	#0 							; and clear all
.aff2					_FFFPPExit:
.aff2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aff3					FloatIntegerPart:
.aff3	48		pha				pha
.aff4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aff7	f0 1f		beq $b018			beq 	_FIPExit 					; if so do nothing
.aff9	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; is it zero ?
.affc	f0 17		beq $b015			beq 	_FIPZero 					; if so return zero.
.affe	20 54 b0	jsr $b054			jsr 	NSNormalise 				; normalise
.b001	f0 12		beq $b015			beq 	_FIPZero 					; normalised to zero, exit zero
.b003					_FIPShift:
.b003	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b006	10 08		bpl $b010			bpl 	_FIPCheckZero
.b008	20 e6 a4	jsr $a4e6			jsr 	NSMShiftRight 				; shift mantissa right
.b00b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b00e	80 f3		bra $b003			bra 	_FIPShift
.b010					_FIPCheckZero:
.b010	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; avoid -0 problem
.b013	d0 03		bne $b018			bne 	_FIPExit 					; set to zero if mantissa zero.
.b015					_FIPZero:
.b015	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.b018					_FIPExit:
.b018	68		pla				pla
.b019	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b01a					FloatingPointMultiply:
.b01a	20 43 b0	jsr $b043			jsr 	FloatPrepare 				; prepare for floats
.b01d					FloatMultiply:
.b01d	48		pha				pha
.b01e	20 54 b0	jsr $b054			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b021	f0 1b		beq $b03e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b023	e8		inx				inx
.b024	20 54 b0	jsr $b054			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b027	ca		dex				dex
.b028	c9 00		cmp #$00			cmp 	#0
.b02a	f0 0f		beq $b03b			beq 	_FDSetZero
.b02c	20 f4 ad	jsr $adf4			jsr 	MultiplyShort 				; calculate the result.
.b02f	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b032	18		clc				clc
.b033	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b036	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b039	80 03		bra $b03e			bra 	_FDExit
.b03b					_FDSetZero:
.b03b	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero 					; return 0
.b03e					_FDExit:
.b03e	20 54 b0	jsr $b054			jsr 	NSNormalise 				; normalise the result
.b041	68		pla				pla
.b042	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b043					FloatPrepare:
.b043	20 04 9e	jsr $9e04			jsr 	DereferenceTopTwo 			; dereference the top two values
.b046	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b049	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b04c	29 10		and #$10			and 	#NSBIsString
.b04e	d0 01		bne $b051			bne 	_FDType
.b050	60		rts				rts
.b051					_FDType:
.b051	4c db b2	jmp $b2db			jmp 	TypeError
.b054					NSNormalise:
.b054	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b057	29 80		and #$80			and 	#$80
.b059	09 08		ora #$08			ora 	#NSTFloat
.b05b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b05e	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; if zero exit
.b061	d0 09		bne $b06c			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b063	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b066	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b069	a9 00		lda #$00			lda 	#0 							; set Z flag
.b06b	60		rts				rts
.b06c					_NSNormaliseOptimise:
.b06c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b06f	d0 22		bne $b093			bne 	_NSNormaliseLoop
.b071	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b074	30 1d		bmi $b093			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b076	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b079	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b07c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b07f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b082	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b085	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b088	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b08b	38		sec				sec
.b08c	e9 08		sbc #$08			sbc 	#8
.b08e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b091	80 d9		bra $b06c			bra 	_NSNormaliseOptimise
.b093					_NSNormaliseLoop:
.b093	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b096	70 08		bvs $b0a0			bvs 	_NSNExit 					; exit if so with Z flag clear
.b098	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; shift mantissa left
.b09b	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b09e	80 f3		bra $b093			bra 	_NSNormaliseLoop
.b0a0					_NSNExit:
.b0a0	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b0a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d31					AssignNumber:
.9d31	5a		phy				phy
.9d32	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d35	85 36		sta $36				sta 	zTemp0
.9d37	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d3a	85 37		sta $37				sta 	zTemp0+1
.9d3c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d3f	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d41	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d44	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d46	c9 08		cmp #$08			cmp 	#NSTFloat
.9d48	f0 2a		beq $9d74			beq 	_ANFloat
.9d4a	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d4d	f0 05		beq $9d54			beq		_ANNotFloat
.9d4f	e8		inx				inx
.9d50	20 f3 af	jsr $aff3			jsr 	FloatIntegerPart 			; make it an integer
.9d53	ca		dex				dex
.9d54					_ANNotFloat:
.9d54	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d57	29 03		and #$03			and 	#3
.9d59	d0 05		bne $9d60			bne 	_ANByteWord
.9d5b	20 80 9d	jsr $9d80			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d5e	80 1e		bra $9d7e			bra 	_ANExit
.9d60					_ANByteWord:
.9d60	48		pha				pha 								; save count
.9d61	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d64	92 36		sta ($36)			sta 	(zTemp0)
.9d66	68		pla				pla
.9d67	c9 01		cmp #$01			cmp	 	#1
.9d69	f0 13		beq $9d7e			beq 	_ANExit
.9d6b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d6e	a0 01		ldy #$01			ldy 	#1
.9d70	91 36		sta ($36),y			sta 	(zTemp0),y
.9d72	80 0a		bra $9d7e			bra 	_ANExit
.9d74					_ANFloat:
.9d74	20 80 9d	jsr $9d80			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d77	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d7a	a0 04		ldy #$04			ldy 	#4
.9d7c	91 36		sta ($36),y			sta 	(zTemp0),y
.9d7e					_ANExit:
.9d7e	7a		ply				ply
.9d7f	60		rts				rts
.9d80					_ANCopy4PackSign:
.9d80	a0 03		ldy #$03			ldy 	#3
.9d82	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9d85	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d87	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9d8a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d8c	88		dey				dey
.9d8d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9d90	91 36		sta ($36),y			sta 	(zTemp0),y
.9d92	88		dey				dey
.9d93	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9d96	91 36		sta ($36),y			sta 	(zTemp0),y
.9d98	88		dey				dey
.9d99	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9d9c	91 36		sta ($36),y			sta 	(zTemp0),y
.9d9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9d9f					AssignString:
.9d9f	5a		phy				phy
.9da0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9da3	85 38		sta $38				sta 	zTemp1
.9da5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9da8	85 39		sta $39				sta 	zTemp1+1
.9daa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dad	85 36		sta $36				sta 	zTemp0
.9daf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9db2	85 37		sta $37				sta 	zTemp0+1
.9db4	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9db6	b1 36		lda ($36),y			lda 	(zTemp0),y
.9db8	f0 23		beq $9ddd			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dba	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dbb	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9dbd	e9 02		sbc #$02			sbc 	#2
.9dbf	85 3c		sta $3c				sta 	zsTemp
.9dc1	a0 01		ldy #$01			ldy 	#1
.9dc3	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc5	e9 00		sbc #$00			sbc 	#0
.9dc7	85 3d		sta $3d				sta 	zsTemp+1
.9dc9	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9dcb					_ASGetLength:
.9dcb	c8		iny				iny
.9dcc	b1 38		lda ($38),y			lda 	(zTemp1),y
.9dce	d0 fb		bne $9dcb			bne 	_ASGetLength
.9dd0	98		tya				tya 								; is this length <= current length
.9dd1	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9dd3	90 20		bcc $9df5			bcc 	_ASCopyString
.9dd5	f0 1e		beq $9df5			beq 	_ASCopyString
.9dd7	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9dd9	a0 01		ldy #$01			ldy 	#1
.9ddb	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ddd					_ASNewStringRequired:
.9ddd	e8		inx				inx 								; concrete the new string.
.9dde	20 d0 b5	jsr $b5d0			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9de1	ca		dex				dex
.9de2	18		clc				clc
.9de3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9de6	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9de8	92 36		sta ($36)			sta 	(zTemp0)
.9dea	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9ded	69 00		adc #$00			adc 	#0
.9def	a0 01		ldy #$01			ldy 	#1
.9df1	91 36		sta ($36),y			sta 	(zTemp0),y
.9df3	80 0d		bra $9e02			bra 	_ASExit
.9df5					_ASCopyString:
.9df5	a0 00		ldy #$00			ldy 	#0
.9df7					_ASCopyLoop:
.9df7	b1 38		lda ($38),y			lda 	(zTemp1),y
.9df9	c8		iny				iny
.9dfa	c8		iny				iny
.9dfb	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9dfd	88		dey				dey
.9dfe	c9 00		cmp #$00			cmp 	#0
.9e00	d0 f5		bne $9df7			bne 	_ASCopyLoop
.9e02					_ASExit:
.9e02	7a		ply				ply
.9e03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e04					DereferenceTopTwo:
.9e04	e8		inx				inx
.9e05	20 09 9e	jsr $9e09			jsr 	Dereference 				; deref x+1
.9e08	ca		dex				dex  								; falls through to deref x
.9e09					Dereference:
.9e09	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e0c	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e0e	f0 57		beq $9e67			beq 	_DRFExit 					; not a reference
.9e10	5a		phy				phy
.9e11	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e14	85 36		sta $36				sta 	zTemp0
.9e16	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e19	85 37		sta $37				sta 	zTemp0+1
.9e1b	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e1e	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e20	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e23	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e26	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e28	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e2a	f0 0f		beq $9e3b			beq 	_DRFDereferenceTwo
.9e2c	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e2e	f0 39		beq $9e69			beq 	_DRFFull
.9e30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e33	29 03		and #$03			and 	#3
.9e35	f0 32		beq $9e69			beq 	_DRFFull 					; the whole word
.9e37	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e39	f0 07		beq $9e42			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e3b					_DRFDereferenceTwo:
.9e3b	a0 01		ldy #$01			ldy 	#1
.9e3d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e3f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e42					_DRFClear23:
.9e42	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e45	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e4b	29 18		and #$18			and 	#NSBTypeMask
.9e4d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e50	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e52	d0 12		bne $9e66			bne 	_DRFNotString
.9e54	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e57	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e5a	d0 0a		bne $9e66			bne 	_DRFNotString
.9e5c	a9 68		lda #$68			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e5e	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e61	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e63	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e66					_DRFNotString
.9e66	7a		ply				ply 								; restore Y and exit
.9e67					_DRFExit:
.9e67	60		rts				rts
.9e68					_DRFNullString:
>9e68	00						.byte 	0
.9e69					_DRFFull:
.9e69	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e6b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e6d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e70	c8		iny				iny
.9e71	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e73	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e76	c8		iny				iny
.9e77	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e79	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e7c	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9e7f	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9e82	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e84	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9e87	f0 06		beq $9e8f			beq 	_DRFNoExponent
.9e89	c8		iny				iny 								; if not, read the exponent as well.
.9e8a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e8c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9e8f					_DRFNoExponent:
.9e8f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e92	10 0d		bpl $9ea1			bpl 	_DRFExit2 					; if not, then exit.
.9e94	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9e96	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9e9c	09 80		ora #$80			ora 	#NSBIsNegative
.9e9e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ea1					_DRFExit2:
.9ea1	7a		ply				ply
.9ea2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9ea3					EncodeNumberStart:
.9ea3	38		sec				sec
.9ea4	80 01		bra $9ea7			bra 	EncodeNumberContinue+1
.9ea6					EncodeNumberContinue:
.9ea6	18		clc				clc
.9ea7					EncodeNumber:
.9ea7	08		php				php 								; save reset.
.9ea8	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9eaa	f0 12		beq $9ebe			beq 	_ENIsOkay
.9eac	c9 30		cmp #$30			cmp 	#"0"
.9eae	90 04		bcc $9eb4			bcc 	_ENBadNumber
.9eb0	c9 3a		cmp #$3a			cmp 	#"9"+1
.9eb2	90 0a		bcc $9ebe			bcc 	_ENIsOkay
.9eb4					_ENBadNumber:
.9eb4	28		plp				plp 								; throw saved reset
.9eb5	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9eb8	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9eba	f0 7e		beq $9f3a			beq 	_ENConstructFinal
.9ebc					_ENFail:
.9ebc	18		clc				clc 								; not allowed
.9ebd	60		rts				rts
.9ebe					_ENIsOkay:
.9ebe	28		plp				plp 								; are we restarting
.9ebf	90 15		bcc $9ed6			bcc 	_ENNoRestart
.9ec1					_ENStartEncode:
.9ec1	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ec3	f0 0c		beq $9ed1			beq 	_ENFirstDP
.9ec5	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ec7	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.9eca	a9 01		lda #$01			lda 	#ESTA_Low
.9ecc					_ENExitChange:
.9ecc	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ecf	38		sec				sec
.9ed0	60		rts				rts
.9ed1					_ENFirstDP:
.9ed1	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero 					; clear integer part
.9ed4	80 3f		bra $9f15			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ed6					_ENNoRestart:
.9ed6	48		pha				pha 								; save on stack.
.9ed7	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9eda	c9 01		cmp #$01			cmp 	#ESTA_Low
.9edc	f0 09		beq $9ee7			beq  	_ESTALowState
.9ede	c9 02		cmp #$02			cmp 	#ESTA_High
.9ee0	f0 29		beq $9f0b			beq 	_ESTAHighState
.9ee2	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ee4	f0 3b		beq $9f21			beq 	_ESTADecimalState
>9ee6	db						.byte 	$DB 						; causes a break in the emulator
.9ee7					_ESTALowState:
.9ee7	68		pla				pla 								; get value back
.9ee8	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9eea	f0 29		beq $9f15			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9eec	29 0f		and #$0f			and 	#15 						; make digit
.9eee	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9ef1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9ef4	0a		asl a				asl 	a
.9ef5	0a		asl a				asl 	a
.9ef6	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9ef9	0a		asl a				asl 	a
.9efa	6d 86 04	adc $0486			adc 	DigitTemp
.9efd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f00	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f02	90 05		bcc $9f09			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f04	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f06	8d 85 04	sta $0485			sta 	EncodeState
.9f09					_ESTANoSwitch:
.9f09	38		sec				sec
.9f0a	60		rts				rts
.9f0b					_ESTAHighState:
.9f0b	68		pla				pla 								; get value back
.9f0c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f0e	f0 05		beq $9f15			beq 	_ESTASwitchFloat
.9f10	20 74 9f	jsr $9f74			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f13	38		sec				sec
.9f14	60		rts				rts
.9f15					_ESTASwitchFloat:
.9f15	9c 87 04	stz $0487			stz 	DecimalCount
.9f18	e8		inx				inx 								; zero the decimal additive.
.9f19	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.9f1c	ca		dex				dex
.9f1d	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f1f	80 ab		bra $9ecc			bra 	_ENExitChange
.9f21					_ESTADecimalState:
.9f21	68		pla				pla 								; digit.
.9f22	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f24	f0 96		beq $9ebc			beq 	_ENFail
.9f26	e8		inx				inx 								; put digit into fractional part of X+1
.9f27	20 74 9f	jsr $9f74			jsr 	ESTAShiftDigitIntoMantissa
.9f2a	ca		dex				dex
.9f2b	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f2e	ad 87 04	lda $0487			lda 	DecimalCount
.9f31	c9 0b		cmp #$0b			cmp 	#11
.9f33	f0 02		beq $9f37			beq 	_ESTADSFail
.9f35	38		sec				sec
.9f36	60		rts				rts
.9f37					_ESTADSFail:
.9f37	4c d6 b2	jmp $b2d6			jmp 	RangeError
.9f3a					_ENConstructFinal:
.9f3a	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f3d	f0 33		beq $9f72			beq 	_ENCFExit 					; no decimals
.9f3f	5a		phy				phy
.9f40	0a		asl a				asl 	a 							; x 4 and CLC
.9f41	0a		asl a				asl 	a
.9f42	6d 87 04	adc $0487			adc 	DecimalCount
.9f45	a8		tay				tay
.9f46	b9 95 b2	lda $b295,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f49	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f4c	b9 96 b2	lda $b296,y			lda 	DecimalScalarTable-5+1,y
.9f4f	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f52	b9 97 b2	lda $b297,y			lda 	DecimalScalarTable-5+2,y
.9f55	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f58	b9 98 b2	lda $b298,y			lda 	DecimalScalarTable-5+3,y
.9f5b	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f5e	b9 99 b2	lda $b299,y			lda 	DecimalScalarTable-5+4,y
.9f61	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f64	a9 08		lda #$08			lda 	#NSTFloat
.9f66	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f69	7a		ply				ply
.9f6a	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f6b	20 1d b0	jsr $b01d			jsr 	FloatMultiply
.9f6e	ca		dex				dex
.9f6f	20 b2 ae	jsr $aeb2			jsr 	FloatAdd 					; add to integer part.
.9f72					_ENCFExit:
.9f72	18		clc				clc 								; reject the digit.
.9f73	60		rts				rts
.9f74					ESTAShiftDigitIntoMantissa:
.9f74	29 0f		and #$0f			and 	#15 						; save digit
.9f76	48		pha				pha
.9f77	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f7a	48		pha				pha
.9f7b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f7e	48		pha				pha
.9f7f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f82	48		pha				pha
.9f83	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f86	48		pha				pha
.9f87	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; x 2
.9f8a	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; x 4
.9f8d	18		clc				clc 								; pop mantissa and add
.9f8e	68		pla				pla
.9f8f	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f92	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f95	68		pla				pla
.9f96	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9f99	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f9c	68		pla				pla
.9f9d	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9fa0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fa3	68		pla				pla
.9fa4	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9fa7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9faa	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; x 10
.9fad	68		pla				pla 								; add digit
.9fae	18		clc				clc
.9faf	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fb2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fb5	90 0d		bcc $9fc4			bcc 	_ESTASDExit
.9fb7	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fba	d0 08		bne $9fc4			bne 	_ESTASDExit
.9fbc	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fbf	d0 03		bne $9fc4			bne 	_ESTASDExit
.9fc1	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fc4					_ESTASDExit:
.9fc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fc5					EvaluateTerm:
.9fc5	b1 30		lda ($30),y			lda 	(codePtr),y
.9fc7	30 18		bmi $9fe1			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fc9	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fcb	b0 6f		bcs $a03c			bcs 	_ETVariable
.9fcd	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fcf	90 6e		bcc $a03f			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fd1	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fd3	b0 6a		bcs $a03f			bcs 	_ETPuncUnary
.9fd5	20 a3 9e	jsr $9ea3			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fd8					_ETNumber:
.9fd8	c8		iny				iny 								; keep encoding until we have the numbers
.9fd9	b1 30		lda ($30),y			lda 	(codePtr),y
.9fdb	20 a6 9e	jsr $9ea6			jsr 	EncodeNumberContinue
.9fde	b0 f8		bcs $9fd8			bcs 	_ETNumber 					; go back if accepted.
.9fe0	60		rts				rts
.9fe1					_ETCheckUnary:
.9fe1	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9fe3	f0 41		beq $a026			beq 	_ETString
.9fe5	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9fe7	f0 12		beq $9ffb			beq 	_ETHexConstant
.9fe9	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9feb	90 0b		bcc $9ff8			bcc 	_ETSyntaxError
.9fed	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1
.9fef	b0 07		bcs $9ff8			bcs 	_ETSyntaxError
.9ff1	da		phx				phx 								; push X on the stack
.9ff2	0a		asl a				asl 	a 							; put vector x 2 into X
.9ff3	aa		tax				tax
.9ff4	c8		iny				iny 								; consume unary function token
.9ff5	7c 66 95	jmp ($9566,x)			jmp 	(VectorSet0,x) 				; and do it.
.9ff8					_ETSyntaxError:
.9ff8	4c d1 b2	jmp $b2d1			jmp 	SyntaxError
.9ffb					_ETHexConstant:
.9ffb	c8		iny				iny 								; skip #
.9ffc	c8		iny				iny 								; skip count
.9ffd	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero 					; clear result
.a000					_ETHLoop:
.a000	b1 30		lda ($30),y			lda 	(codePtr),y
.a002	c8		iny				iny 								; and consume
.a003	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a005	f0 1e		beq $a025			beq 	_ETHExit
.a007	48		pha				pha 								; save on stack.
.a008	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; x 2
.a00b	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; x 4
.a00e	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; x 8
.a011	20 d8 a4	jsr $a4d8			jsr 	NSMShiftLeft 				; x 16
.a014	68		pla				pla 								; ASCII
.a015	c9 41		cmp #$41			cmp 	#'A'
.a017	90 02		bcc $a01b			bcc 	_ETHNotChar
.a019	e9 07		sbc #$07			sbc 	#7
.a01b					_ETHNotChar:
.a01b	29 0f		and #$0f			and 	#15 						; digit now
.a01d	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a020	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a023	80 db		bra $a000			bra 	_ETHLoop 					; go round.
.a025					_ETHExit:
.a025	60		rts				rts
.a026					_ETString:
.a026	c8		iny				iny 								; look at length
.a027	b1 30		lda ($30),y			lda 	(codePtr),y
.a029	48		pha				pha
.a02a	c8		iny				iny 								; first character
.a02b	20 0d a5	jsr $a50d			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a02e	68		pla				pla 								; restore count and save
.a02f	85 36		sta $36				sta 	zTemp0
.a031	98		tya				tya 								; add length to Y to skip it.
.a032	18		clc				clc
.a033	65 36		adc $36				adc 	zTemp0
.a035	a8		tay				tay
.a036	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a038	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a03b	60		rts				rts
.a03c					_ETVariable:
.a03c	4c 96 a0	jmp $a096			jmp 	VariableHandler
.a03f					_ETPuncUnary:
.a03f	c8		iny				iny 								; consume the unary character
.a040	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a042	f0 2d		beq $a071			beq 	_ETUnaryNegate
.a044	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a046	f0 39		beq $a081			beq 	_ETDereference
.a048	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a04a	f0 43		beq $a08f			beq 	_ETParenthesis
.a04c	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a04e	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a050	f0 06		beq $a058			beq 	_ETIndirection
.a052	e6 36		inc $36				inc 	zTemp0
.a054	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a056	d0 a0		bne $9ff8			bne 	_ETSyntaxError
.a058					_ETIndirection:
.a058	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a05a	1a		inc a				inc 	a
.a05b	48		pha				pha
.a05c	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm				; evaluate the term
.a05f	20 09 9e	jsr $9e09			jsr 	Dereference 				; dereference it.
.a062	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a065	d0 07		bne $a06e			bne 	_ETTypeMismatch
.a067	68		pla				pla 								; indirection 1-2
.a068	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a06a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a06d	60		rts				rts
.a06e					_ETTypeMismatch:
.a06e	4c db b2	jmp $b2db			jmp 	TypeError
.a071					_ETUnaryNegate:
.a071	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm				; evaluate the term
.a074	20 09 9e	jsr $9e09			jsr 	Dereference 				; dereference it.
.a077	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a07a	29 10		and #$10			and 	#NSTString
.a07c	d0 f0		bne $a06e			bne 	_ETTypeMismatch
.a07e	4c 6f a4	jmp $a46f			jmp 	NSMNegate  					; just toggles the sign bit.
.a081					_ETDereference:
.a081	20 c5 9f	jsr $9fc5			jsr 	EvaluateTerm				; evaluate the term
.a084	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a087	29 20		and #$20			and 	#NSBIsReference
.a089	f0 e3		beq $a06e			beq 	_ETTypeMismatch
.a08b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a08e	60		rts				rts
.a08f					_ETParenthesis:
.a08f	20 f4 9c	jsr $9cf4			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a092	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 			; check for )
.a095	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a096					VariableHandler:
.a096	b1 30		lda ($30),y			lda 	(codePtr),y
.a098	18		clc				clc
.a099	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a09b	85 37		sta $37				sta 	zTemp0+1
.a09d	c8		iny				iny
.a09e	b1 30		lda ($30),y			lda 	(codePtr),y
.a0a0	85 36		sta $36				sta 	zTemp0
.a0a2	c8		iny				iny
.a0a3	18		clc				clc									; copy variable address+3 to mantissa
.a0a4	69 03		adc #$03			adc 	#3
.a0a6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0a9	a5 37		lda $37				lda 	zTemp0+1
.a0ab	69 00		adc #$00			adc 	#0
.a0ad	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0b0	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0b3	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0b6	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0b9	5a		phy				phy
.a0ba	a0 02		ldy #$02			ldy 	#2 							; read type
.a0bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0be	7a		ply				ply
.a0bf	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0c1	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0c3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0c6	29 04		and #$04			and 	#NSBIsArray
.a0c8	d0 01		bne $a0cb			bne 	_VHArray
.a0ca	60		rts				rts
.a0cb					_VHArray:
.a0cb	e8		inx				inx
.a0cc	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0cf	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0d1	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0d4	b1 30		lda ($30),y			lda 	(codePtr),y
.a0d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0d8	d0 06		bne $a0e0			bne 	_VHNoSecondIndex
.a0da	c8		iny				iny 								; skip the comma
.a0db	e8		inx				inx
.a0dc	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0df	ca		dex				dex
.a0e0					_VHNoSecondIndex:
.a0e0	ca		dex				dex 								; set X back.
.a0e1	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 			; and check the right bracket.
.a0e4	5a		phy				phy 								; save position
.a0e5	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a0e7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0e9	f0 6b		beq $a156			beq 	_VHBadIndex
.a0eb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a0ee	85 3e		sta $3e				sta 	zaTemp
.a0f0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0f3	85 3f		sta $3f				sta 	zaTemp+1
.a0f5	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a0f7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f9	f0 02		beq $a0fd			beq 	_VHHas2Mask
.a0fb	a9 ff		lda #$ff			lda 	#$FF
.a0fd					_VHHas2Mask:
.a0fd	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a100	f0 54		beq $a156			beq 	_VHBadIndex
.a102	0a		asl a				asl 	a 							; carry will be set if a second index
.a103	90 09		bcc $a10e			bcc 	_VHCheckFirstIndex
.a105	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a107	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a109	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a10c	90 48		bcc $a156			bcc 	_VHBadIndex
.a10e					_VHCheckFirstIndex:
.a10e	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a110	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a112	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a115	90 3f		bcc $a156			bcc 	_VHBadIndex
.a117	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a119	64 37		stz $37				stz 	zTemp0+1
.a11b	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a11e	30 0f		bmi $a12f			bmi 	_VHNoMultiply
.a120	da		phx				phx
.a121	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a124	48		pha				pha
.a125	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a127	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a129	1a		inc a				inc 	a 							; add 1 for zero base
.a12a	fa		plx				plx
.a12b	20 6d b1	jsr $b16d			jsr 	Multiply8x8 				; calculate -> Z0
.a12e	fa		plx				plx
.a12f					_VHNoMultiply:
.a12f	18		clc				clc
.a130	a5 36		lda $36				lda 	zTemp0
.a132	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a135	85 36		sta $36				sta 	zTemp0
.a137	a5 37		lda $37				lda 	zTemp0+1
.a139	69 00		adc #$00			adc 	#0
.a13b	85 37		sta $37				sta 	zTemp0+1
.a13d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a140	20 cb 8c	jsr $8ccb			jsr 	ScaleByBaseType
.a143	18		clc				clc
.a144	b2 3e		lda ($3e)			lda 	(zaTemp)
.a146	65 36		adc $36				adc 	zTemp0
.a148	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a14b	a0 01		ldy #$01			ldy 	#1
.a14d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a14f	65 37		adc $37				adc 	zTemp0+1
.a151	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a154	7a		ply				ply 								; restore position
.a155	60		rts				rts
.a156					_VHBadIndex:
.a156	a9 17		lda #$17		lda	#23
.a158	4c eb 98	jmp $98eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b0a3					AbsUnary:
.b0a3	fa		plx				plx 								; restore stack pos
.b0a4	20 03 a4	jsr $a403			jsr 	EvaluateNumber 				; get a float or int
.b0a7	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.b0aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b0ad	29 7f		and #$7f			and 	#$7F
.b0af	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a15b					AllocUnary:
.a15b	fa		plx				plx 								; restore stack pos
.a15c	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger		; get bytes required.
.a15f	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.a162	da		phx				phx 								; save X/Y
.a163	5a		phy				phy
.a164	8a		txa				txa 								; copy X into Y
.a165	a8		tay				tay
.a166	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a169	aa		tax				tax
.a16a	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a16d	20 7a a1	jsr $a17a			jsr 	AllocateXABytes 			; allocate memory
.a170	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a173	8a		txa				txa
.a174	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a177	7a		ply				ply
.a178	fa		plx				plx
.a179	60		rts				rts
.a17a					AllocateXABytes:
.a17a	5a		phy				phy
.a17b	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a17e	84 36		sty $36				sty 	zTemp0
.a180	5a		phy				phy
.a181	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a184	84 37		sty $37				sty 	zTemp0+1
.a186	5a		phy				phy
.a187	18		clc				clc 								; add to low memory pointer
.a188	6d 8c 04	adc $048c			adc 	lowMemPtr
.a18b	8d 8c 04	sta $048c			sta 	lowMemPtr
.a18e	8a		txa				txa
.a18f	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a192	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a195	b0 2f		bcs $a1c6			bcs 	CISSMemory
.a197	20 b8 a1	jsr $a1b8			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a19a					_ClearMemory:
.a19a	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a19d	c5 36		cmp $36				cmp 	zTemp0
.a19f	d0 07		bne $a1a8			bne 	_CMClearNext
.a1a1	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a1a4	c5 37		cmp $37				cmp 	zTemp0+1
.a1a6	f0 0c		beq $a1b4			beq 	_CMExit
.a1a8					_CMClearNext:
.a1a8	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1aa	92 36		sta ($36)			sta 	(zTemp0)
.a1ac	e6 36		inc $36				inc 	zTemp0
.a1ae	d0 ea		bne $a19a			bne 	_ClearMemory
.a1b0	e6 37		inc $37				inc		zTemp0+1
.a1b2	80 e6		bra $a19a			bra 	_ClearMemory
.a1b4					_CMExit:
.a1b4	fa		plx				plx
.a1b5	68		pla				pla
.a1b6	7a		ply				ply
.a1b7	60		rts				rts
.a1b8					CheckIdentifierStringSpace:
.a1b8	48		pha				pha
.a1b9	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1bc	18		clc				clc
.a1bd	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1bf	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1c2	b0 02		bcs $a1c6			bcs 	CISSMemory
.a1c4	68		pla				pla
.a1c5	60		rts				rts
.a1c6					CISSMemory:
.a1c6	a9 06		lda #$06		lda	#6
.a1c8	4c eb 98	jmp $98eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b0b3					AscUnary:
.b0b3	fa		plx				plx 								; restore stack pos
.b0b4	20 0e a4	jsr $a40e			jsr 	EvaluateString 				; get a string
.b0b7	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b0b9	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.b0bc	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.b0bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b0c0					FracUnary:
.b0c0	fa		plx				plx 								; restore stack pos
.b0c1	20 03 a4	jsr $a403			jsr 	EvaluateNumber 				; get a float or int
.b0c4	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.b0c7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0ca	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0cc	f0 04		beq $b0d2			beq 	_IUZero
.b0ce	20 90 af	jsr $af90			jsr 	FloatFractionalPart
.b0d1	60		rts				rts
.b0d2					_IUZero:
.b0d2	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.b0d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b0d6					IntUnary:
.b0d6	fa		plx				plx 								; restore stack pos
.b0d7	20 03 a4	jsr $a403			jsr 	EvaluateNumber 				; get a float or int
.b0da	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.b0dd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0e0	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0e2	f0 03		beq $b0e7			beq 	_IUExit
.b0e4	20 f3 af	jsr $aff3			jsr 	FloatIntegerPart
.b0e7					_IUExit:
.b0e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b0e8					LenUnary:
.b0e8	fa		plx				plx 								; restore stack pos
.b0e9	20 0e a4	jsr $a40e			jsr 	EvaluateString 				; get a string
.b0ec	5a		phy				phy
.b0ed	a0 00		ldy #$00			ldy 	#0 							; find length
.b0ef					_LenFind:
.b0ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.b0f1	f0 06		beq $b0f9			beq 	_LenExit
.b0f3	c8		iny				iny
.b0f4	d0 f9		bne $b0ef			bne 	_LenFind
.b0f6	4c d6 b2	jmp $b2d6			jmp 	RangeError 					; string > 255
.b0f9					_LenExit:
.b0f9	98		tya				tya
.b0fa	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.b0fd	7a		ply				ply
.b0fe	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.b101	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1cb					Unary_Not:
.a1cb	fa		plx				plx
.a1cc	20 26 a4	jsr $a426			jsr 	EvaluateInteger 			; get integer
.a1cf	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.a1d2	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; zero mantissa ?
.a1d5	f0 04		beq $a1db			beq 	_NotZero
.a1d7	20 c3 a4	jsr $a4c3			jsr 	NSMSetZero
.a1da	60		rts				rts
.a1db					_NotZero:
.a1db	4c 58 99	jmp $9958			jmp 	ReturnTrue
.a1de					_UNBad:
.a1de	4c e0 b2	jmp $b2e0			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a1e1					Unary_Random:
.a1e1	fa		plx				plx
.a1e2	20 60 a2	jsr $a260			jsr 	Random32Bit 				; get a random number
.a1e5	20 45 a2	jsr $a245			jsr 	URCopyToMantissa  			; put in mantissa
.a1e8	b1 30		lda ($30),y			lda 	(codePtr),y
.a1ea	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a1ec	f0 08		beq $a1f6			beq 	_URNoModulus
.a1ee	e8		inx				inx
.a1ef	20 3b a4	jsr $a43b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a1f2	ca		dex				dex
.a1f3	20 6f ad	jsr $ad6f			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a1f6					_URNoModulus:
.a1f6	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a1f9	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a1fc	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.a1ff	60		rts				rts
.a200					Unary_Rnd:
.a200	fa		plx				plx
.a201	20 03 a4	jsr $a403			jsr 	EvaluateNumber 				; number to use.
.a204	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 			; closing bracket
.a207	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a20a	f0 2b		beq $a237			beq 	_URCopySeed
.a20c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a20f	10 23		bpl $a234			bpl 	_URDontSeed
.a211	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a214	49 17		eor #$17			eor 	#$17
.a216	8d 88 04	sta $0488			sta 	RandomSeed+0
.a219	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a21c	49 a5		eor #$a5			eor 	#$A5
.a21e	8d 89 04	sta $0489			sta 	RandomSeed+1
.a221	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a224	49 c2		eor #$c2			eor 	#$C2
.a226	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a229	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a22c	49 9d		eor #$9d			eor 	#$9D
.a22e	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a231	20 60 a2	jsr $a260			jsr 	Random32Bit
.a234					_URDontSeed:
.a234	20 60 a2	jsr $a260			jsr 	Random32Bit 				; generate a number.
.a237					_URCopySeed:
.a237	20 45 a2	jsr $a245			jsr 	URCopyToMantissa 			; copy into mantissa
.a23a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a23c	8d 28 04	sta $0428			sta 	NSExponent
.a23f	a9 08		lda #$08			lda 	#NSTFloat
.a241	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a244	60		rts				rts
.a245					URCopyToMantissa:
.a245	ad 88 04	lda $0488			lda 	RandomSeed+0
.a248	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a24b	ad 89 04	lda $0489			lda 	RandomSeed+1
.a24e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a251	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a254	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a257	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a25a	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a25c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a25f	60		rts				rts
.a260					Random32Bit:
.a260	5a		phy				phy
.a261	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a263	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a266	d0 03		bne $a26b			bne 	_Random1
.a268	a8		tay				tay 								; if so do it 256 times
.a269	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a26b					_Random1:
.a26b	0a		asl a				asl 	a 							; LSFR RNG
.a26c	2e 89 04	rol $0489			rol 	RandomSeed+1
.a26f	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a272	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a275	90 02		bcc $a279			bcc 	_Random2
.a277	49 c5		eor #$c5			eor 	#$C5
.a279					_Random2:
.a279	88		dey				dey
.a27a	d0 ef		bne $a26b			bne 	_Random1
.a27c	8d 88 04	sta $0488			sta 	RandomSeed+0
.a27f	7a		ply				ply
.a280	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b102					SgnUnary:
.b102	fa		plx				plx 								; restore stack pos
.b103	20 03 a4	jsr $a403			jsr 	EvaluateNumber 				; get a float or int
.b106	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.b109	20 f3 a4	jsr $a4f3			jsr 	NSMIsZero 					; if zero
.b10c	f0 10		beq $b11e			beq 	_SGZero  					; return Int Zero
.b10e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b111	48		pha				pha
.b112	a9 01		lda #$01			lda 	#1 							; set to 1
.b114	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.b117	68		pla				pla
.b118	29 80		and #$80			and		#$80 						; copy the sign byte out
.b11a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b11d	60		rts				rts
.b11e	20 c3 a4	jsr $a4c3	_SGZero:jsr 	NSMSetZero
.b121	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b122					ValUnary:
.b122	fa		plx				plx 								; restore stack pos
.b123	20 38 b1	jsr $b138			jsr 	ValMainCode 				; do the main val() code
.b126	b0 01		bcs $b129			bcs 	_VUError 					; couldn't convert
.b128	60		rts				rts
.b129					_VUError:
.b129	4c db b2	jmp $b2db			jmp 	TypeError
.b12c					IsValUnary:
.b12c	fa		plx				plx 								; restore stack pos
.b12d	20 38 b1	jsr $b138			jsr 	ValMainCode 				; do the main val() code
.b130	b0 03		bcs $b135			bcs 	_VUBad
.b132	4c 58 99	jmp $9958			jmp 	ReturnTrue
.b135					_VUBad:
.b135	4c 64 99	jmp $9964			jmp 	ReturnFalse
.b138					ValMainCode:
.b138	20 0e a4	jsr $a40e			jsr 	EvaluateString 				; get a string
.b13b	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 			; check right bracket present
.b13e	5a		phy				phy
.b13f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b141	f0 17		beq $b15a			beq 	_VMCFail2
.b143	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b145	48		pha				pha 								; save first character
.b146	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b148	d0 01		bne $b14b			bne 	_VMCStart
.b14a	c8		iny				iny 								; skip over -
.b14b					_VMCStart:
.b14b	38		sec				sec 								; initialise first time round.
.b14c					_VMCNext:
.b14c	c8		iny				iny 								; pre-increment
.b14d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b14f	f0 0c		beq $b15d			beq 	_VMCSuccess 				; successful.
.b151	20 a7 9e	jsr $9ea7			jsr 	EncodeNumber 				; send it to the number-builder
.b154	90 03		bcc $b159			bcc 	_VMCFail 					; if failed, give up.
.b156	18		clc				clc 								; next time round, countinue
.b157	80 f3		bra $b14c			bra 	_VMCNext
.b159					_VMCFail:
.b159	68		pla				pla
.b15a					_VMCFail2:
.b15a	7a		ply				ply
.b15b	38		sec				sec
.b15c	60		rts				rts
.b15d					_VMCSuccess:
.b15d	a9 00		lda #$00			lda 	#0 							; construct final
.b15f	20 a7 9e	jsr $9ea7			jsr 	EncodeNumber
.b162	68		pla				pla
.b163	c9 2d		cmp #$2d			cmp 	#"-"
.b165	d0 03		bne $b16a			bne 	_VMCNotNegative
.b167	20 6f a4	jsr $a46f			jsr		NSMNegate
.b16a					_VMCNotNegative:
.b16a	7a		ply				ply
.b16b	18		clc				clc
.b16c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a281					ChrUnary:
.a281	fa		plx				plx 								; restore stack pos
.a282	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger			; get value
.a285	48		pha				pha
.a286	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.a289	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a28b	20 51 b6	jsr $b651			jsr 	StringTempAllocate
.a28e	68		pla				pla 								; write number to it
.a28f	20 8f b6	jsr $b68f			jsr 	StringTempWrite
.a292	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a293					SpcUnary:
.a293	fa		plx				plx 								; restore stack pos
.a294	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger			; get value
.a297	5a		phy				phy
.a298	48		pha				pha 								; save count
.a299	20 51 b6	jsr $b651			jsr 	StringTempAllocate
.a29c	7a		ply				ply 								; to do count in Y
.a29d					_SpcLoop:
.a29d	c0 00		cpy #$00			cpy 	#0
.a29f	f0 08		beq $a2a9			beq 	_SpcExit
.a2a1	a9 20		lda #$20			lda 	#32
.a2a3	20 8f b6	jsr $b68f			jsr 	StringTempWrite
.a2a6	88		dey				dey
.a2a7	80 f4		bra $a29d			bra 	_SPCLoop
.a2a9					_SpcExit:
.a2a9	7a		ply				ply
.a2aa	20 eb ac	jsr $aceb			jsr 	CheckRightBracket
.a2ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a2ae					Unary_Str:
.a2ae	fa		plx				plx
.a2af	20 03 a4	jsr $a403			jsr 	EvaluateNumber  			; get number
.a2b2	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 			; closing bracket
.a2b5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a2b7	20 d0 a2	jsr $a2d0			jsr 	ConvertNumberToString 		; do the conversion.
.a2ba	a9 21		lda #$21			lda		#33 						; create buffer
.a2bc	20 51 b6	jsr $b651			jsr 	StringTempAllocate 			; allocate memory
.a2bf	da		phx				phx
.a2c0	a2 00		ldx #$00			ldx 	#0
.a2c2					_USCopy:
.a2c2	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2c5	20 8f b6	jsr $b68f			jsr 	StringTempWrite
.a2c8	e8		inx				inx
.a2c9	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2cc	d0 f4		bne $a2c2			bne 	_USCopy
.a2ce	fa		plx				plx
.a2cf	60		rts				rts
.a2d0					ConvertNumberToString:
.a2d0	5a		phy				phy 								; save code position
.a2d1	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a2d4	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a2d7	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a2da	10 0a		bpl $a2e6			bpl 	_CNTSNotNegative
.a2dc	29 7f		and #$7f			and 	#$7F 						; make +ve
.a2de	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2e1	a9 2d		lda #$2d			lda 	#"-"
.a2e3	20 4c a3	jsr $a34c			jsr 	WriteDecimalBuffer
.a2e6					_CNTSNotNegative:
.a2e6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a2e9	f0 15		beq $a300			beq 	_CNTSNotFloat
.a2eb	e8		inx				inx 								; round up
.a2ec	a9 01		lda #$01			lda 	#1
.a2ee	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.a2f1	ca		dex				dex
.a2f2	bd 28 04	lda $0428,x			lda		NSExponent,x
.a2f5	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a2f8	a9 08		lda #$08			lda 	#NSTFloat
.a2fa	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2fd	20 b2 ae	jsr $aeb2			jsr 	FloatAdd
.a300					_CNTSNotFloat:
.a300	20 2e a3	jsr $a32e			jsr 	MakePlusTwoString
.a303	20 90 af	jsr $af90			jsr 	FloatFractionalPart 		; get the fractional part
.a306	20 54 b0	jsr $b054			jsr 	NSNormalise					; normalise , exit if zero
.a309	f0 21		beq $a32c			beq 	_CNTSExit
.a30b	a9 2e		lda #$2e			lda 	#"."
.a30d	20 4c a3	jsr $a34c			jsr 	WriteDecimalBuffer 			; write decimal place
.a310					_CNTSDecimal:
.a310	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a313	30 17		bmi $a32c			bmi 	_CNTSExit
.a315	e8		inx				inx 								; x 10.0
.a316	a9 0a		lda #$0a			lda 	#10
.a318	20 c5 a4	jsr $a4c5			jsr 	NSMSetByte
.a31b	a9 08		lda #$08			lda 	#NSTFloat
.a31d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a320	ca		dex				dex
.a321	20 1d b0	jsr $b01d			jsr 	FloatMultiply
.a324	20 2e a3	jsr $a32e			jsr 	MakePlusTwoString
.a327	20 90 af	jsr $af90			jsr 	FloatFractionalPart 		; get the fractional part
.a32a	80 e4		bra $a310			bra 	_CNTSDecimal 				; keep going.
.a32c					_CNTSExit:
.a32c	7a		ply				ply
.a32d	60		rts				rts
.a32e					MakePlusTwoString:
.a32e	da		phx				phx
.a32f	20 9a a4	jsr $a49a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a332	e8		inx				inx 								; access it
.a333	e8		inx				inx
.a334	20 f3 af	jsr $aff3			jsr 	FloatIntegerPart 			; make it an integer
.a337	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a339	20 5c ae	jsr $ae5c			jsr 	ConvertInt32
.a33c	a2 00		ldx #$00			ldx	 	#0
.a33e					_MPTSCopy:
.a33e	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a341	20 4c a3	jsr $a34c			jsr 	WriteDecimalBuffer
.a344	e8		inx				inx
.a345	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a348	d0 f4		bne $a33e			bne 	_MPTSCopy
.a34a	fa		plx				plx
.a34b	60		rts				rts
.a34c					WriteDecimalBuffer:
.a34c	da		phx				phx
.a34d	ae 95 04	ldx $0495			ldx 	dbOffset
.a350	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a353	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a356	ee 95 04	inc $0495			inc 	dbOffset
.a359	fa		plx				plx
.a35a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a35b					Unary_Left:
.a35b	fa		plx				plx
.a35c	18		clc				clc 								; only one parameter
.a35d	20 d2 a3	jsr $a3d2			jsr 	SubstringInitial 			; set up.
.a360	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a363	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a366	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a369	80 2c		bra $a397			bra 	SubstringMain
.a36b					Unary_Right:
.a36b	fa		plx				plx
.a36c	18		clc				clc 								; only one parameter
.a36d	20 d2 a3	jsr $a3d2			jsr 	SubstringInitial 			; set up.
.a370	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a373	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a376	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a379	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a37c	b0 02		bcs $a380			bcs 	_URNotUnderflow
.a37e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a380					_URNotUnderFlow:
.a380	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a383	80 12		bra $a397			bra 	SubStringMain
.a385					Unary_Mid:
.a385	fa		plx				plx
.a386	38		sec				sec 								; two parameters
.a387	20 d2 a3	jsr $a3d2			jsr 	SubstringInitial 			; set up.
.a38a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a38d	f0 05		beq $a394			beq 	_UMError
.a38f	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a392	80 03		bra $a397			bra 	SubStringMain
.a394					_UMError:
.a394	4c e0 b2	jmp $b2e0			jmp 	ArgumentError
.a397					SubStringMain:
.a397	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a39a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a39d	b0 2d		bcs $a3cc			bcs 	_SSMNull 					; if so, return an empty string.
.a39f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a3a2	f0 28		beq $a3cc			beq 	_SSMNull 					; return empty string.
.a3a4	18		clc				clc 								; add the offset +1 to the address and
.a3a5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a3a8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a3ab	85 36		sta $36				sta 	zTemp0
.a3ad	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a3b0	69 00		adc #$00			adc 	#0
.a3b2	85 37		sta $37				sta 	zTemp0+1
.a3b4					_SSMNoCarry:
.a3b4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a3b7	20 51 b6	jsr $b651			jsr 	StringTempAllocate 			; allocate that many characters
.a3ba	5a		phy				phy 								; save Y
.a3bb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a3bd					_SSMCopy:
.a3bd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a3bf	f0 09		beq $a3ca			beq 	_SSMEString 				; no more to copy
.a3c1	20 8f b6	jsr $b68f			jsr 	StringTempWrite 			; and write it out.
.a3c4	c8		iny				iny
.a3c5	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a3c8	d0 f3		bne $a3bd			bne 	_SSMCopy
.a3ca					_SSMEString:
.a3ca	7a		ply				ply
.a3cb					_SSMExit:
.a3cb	60		rts				rts
.a3cc					_SSMNull:
.a3cc	a9 00		lda #$00			lda 	#0
.a3ce	20 51 b6	jsr $b651			jsr 	StringTempAllocate
.a3d1	60		rts				rts
.a3d2					SubstringInitial:
.a3d2	da		phx				phx 								; save initial stack position
.a3d3	08		php				php 								; save carry on stack indicating 2 parameters
.a3d4	20 0e a4	jsr $a40e			jsr 	EvaluateString 				; get a string
.a3d7	5a		phy				phy 								; calculate length to exponent.
.a3d8	a0 ff		ldy #$ff			ldy 	#$FF
.a3da					_SIFindLength:
.a3da	c8		iny				iny
.a3db	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3dd	d0 fb		bne $a3da			bne 	_SIFindLength
.a3df	98		tya				tya
.a3e0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3e3	7a		ply				ply
.a3e4	e8		inx				inx
.a3e5	20 f3 ac	jsr $acf3			jsr 	CheckComma 					; comma next
.a3e8	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get next parameter
.a3eb	28		plp				plp 								; is it the last parameter ?
.a3ec	90 07		bcc $a3f5			bcc 	_SSIExit 					; if so, exit.
.a3ee	e8		inx				inx
.a3ef	20 f3 ac	jsr $acf3			jsr 	CheckComma 					; comma next
.a3f2	20 5b a4	jsr $a45b			jsr 	Evaluate8BitInteger 		; get last parameter
.a3f5					_SSIExit:
.a3f5	fa		plx				plx
.a3f6	20 eb ac	jsr $aceb			jsr 	CheckRightBracket 			; check closing bracket
.a3f9	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a3fa					EvaluateValue:
.a3fa	48		pha				pha
.a3fb	20 f4 9c	jsr $9cf4			jsr		EvaluateExpression 			; expression
.a3fe	20 09 9e	jsr $9e09			jsr 	Dereference					; derefernce it
.a401	68		pla				pla
.a402	60		rts				rts
.a403					EvaluateNumber:
.a403	20 fa a3	jsr $a3fa			jsr 	EvaluateValue 				; get a value
.a406	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a409	29 10		and #$10			and 	#NSBIsString
.a40b	d0 16		bne $a423			bne 	HelperTypeError
.a40d	60		rts				rts
.a40e					EvaluateString:
.a40e	20 fa a3	jsr $a3fa			jsr 	EvaluateValue 				; get a value
.a411	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a414	29 10		and #$10			and 	#NSBIsString
.a416	f0 0b		beq $a423			beq 	HelperTypeError
.a418					CopyAddressToTemp0:
.a418	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a41b	85 36		sta $36				sta 	zTemp0
.a41d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a420	85 37		sta $37				sta 	zTemp0+1
.a422	60		rts				rts
.a423					HelperTypeError:
.a423	4c db b2	jmp $b2db			jmp 	TypeError
.a426					EvaluateInteger:
.a426	20 03 a4	jsr $a403			jsr 	EvaluateNumber
.a429	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a42c	d0 0a		bne $a438			bne 	HelperValueError 			; if not, it's a float.
.a42e	60		rts				rts
.a42f					EvaluateUnsignedInteger:
.a42f	20 26 a4	jsr $a426			jsr 	EvaluateInteger 			; check integer is +ve
.a432	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a435	30 01		bmi $a438			bmi 	HelperValueError
.a437	60		rts				rts
.a438					HelperValueError:
.a438	4c e0 b2	jmp $b2e0			jmp 	ArgumentError
.a43b					Evaluate16BitInteger:
.a43b	20 2f a4	jsr $a42f			jsr	 	EvaluateUnsignedInteger		; get integer
.a43e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a441	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a444	d0 f2		bne $a438			bne 	HelperValueError
.a446	60		rts				rts
.a447					Evaluate16BitIntegerSigned:
.a447	20 26 a4	jsr $a426			jsr	 	EvaluateInteger				; get integer
.a44a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a44d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a450	d0 e6		bne $a438			bne 	HelperValueError
.a452	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a455	10 03		bpl $a45a			bpl 	_EISNotSigned
.a457	20 78 a4	jsr $a478			jsr 	NSMNegateMantissa
.a45a					_EISNotSigned:
.a45a	60		rts				rts
.a45b					Evaluate8BitInteger:
.a45b	20 2f a4	jsr $a42f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a45e	d0 d8		bne $a438			bne 	HelperValueError
.a460	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a463	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a466	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a469	d0 cd		bne $a438			bne 	HelperValueError
.a46b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a46e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b16d					Multiply8x8:
.b16d	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b16e	85 36		sta $36			  	sta 	zTemp0
.b170	86 37		stx $37				stx 	zTemp0+1
.b172	a9 00		lda #$00			lda 	#0
.b174	a2 08		ldx #$08			ldx 	#8
.b176					_M88Loop:
.b176	90 03		bcc $b17b			bcc 	_M88NoAdd
.b178	18		clc				clc
.b179	65 37		adc $37				adc 	zTemp0+1
.b17b					_M88NoAdd:
.b17b	6a		ror a				ror 	a
.b17c	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b17e	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b17f	d0 f5		bne $b176			bne 	_M88Loop
.b181	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b183	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a46f					NSMNegate:
.a46f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a472	49 80		eor #$80			eor 	#NSBIsNegative
.a474	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a477	60		rts				rts
.a478					NSMNegateMantissa:
.a478	38		sec				sec
.a479	a9 00		lda #$00			lda 	#0
.a47b	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a47e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a481	a9 00		lda #$00			lda 	#0
.a483	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a486	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a489	a9 00		lda #$00			lda 	#0
.a48b	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a48e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a491	a9 00		lda #$00			lda 	#0
.a493	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a496	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a499	60		rts				rts
.a49a					NSMShiftUpTwo:
.a49a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a49d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4a0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4a3	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a4a6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a4a9	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a4ac	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4af	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a4b2	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a4b5	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a4b8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4bb	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a4be	60		rts				rts
.a4bf					NSMSetZeroMantissaOnly:
.a4bf	a9 00		lda #$00			lda 	#0
.a4c1	80 08		bra $a4cb			bra 	NSMSetMantissa
.a4c3					NSMSetZero:
.a4c3	a9 00		lda #$00			lda 	#0
.a4c5					NSMSetByte:
.a4c5	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a4c8	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a4cb					NSMSetMantissa:
.a4cb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a4ce	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a4d1	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a4d4	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a4d7	60		rts				rts
.a4d8					NSMShiftLeft:
.a4d8	18		clc				clc
.a4d9					NSMRotateLeft:
.a4d9	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a4dc	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a4df	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a4e2	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a4e5	60		rts				rts
.a4e6					NSMShiftRight:
.a4e6	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a4e9	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a4ec	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a4ef	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a4f2	60		rts				rts
.a4f3					NSMIsZero:
.a4f3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4f6	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a4f9	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a4fc	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a4ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b184					Assemble_ora:
.b184	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b187	01					.byte $01
.b188					Assemble_and:
.b188	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b18b	21					.byte $21
.b18c					Assemble_eor:
.b18c	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b18f	41					.byte $41
.b190					Assemble_adc:
.b190	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b193	61					.byte $61
.b194					Assemble_sta:
.b194	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b197	81					.byte $81
.b198					Assemble_lda:
.b198	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b19b	a1					.byte $a1
.b19c					Assemble_cmp:
.b19c	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b19f	c1					.byte $c1
.b1a0					Assemble_sbc:
.b1a0	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b1a3	e1					.byte $e1
.b1a4					Assemble_asl:
.b1a4	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1a7	02					.byte $02
>b1a8	75					.byte $75
.b1a9					Assemble_rol:
.b1a9	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1ac	22					.byte $22
>b1ad	75					.byte $75
.b1ae					Assemble_lsr:
.b1ae	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1b1	42					.byte $42
>b1b2	75					.byte $75
.b1b3					Assemble_ror:
.b1b3	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1b6	62					.byte $62
>b1b7	75					.byte $75
.b1b8					Assemble_stx:
.b1b8	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1bb	82					.byte $82
>b1bc	50					.byte $50
.b1bd					Assemble_ldx:
.b1bd	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1c0	a2					.byte $a2
>b1c1	d0					.byte $d0
.b1c2					Assemble_dec:
.b1c2	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1c5	c2					.byte $c2
>b1c6	55					.byte $55
.b1c7					Assemble_inc:
.b1c7	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1ca	e2					.byte $e2
>b1cb	55					.byte $55
.b1cc					Assemble_stz:
.b1cc	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1cf	60					.byte $60
>b1d0	44					.byte $44
.b1d1					Assemble_bit:
.b1d1	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1d4	20					.byte $20
>b1d5	55					.byte $55
.b1d6					Assemble_sty:
.b1d6	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1d9	80					.byte $80
>b1da	54					.byte $54
.b1db					Assemble_ldy:
.b1db	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1de	a0					.byte $a0
>b1df	d5					.byte $d5
.b1e0					Assemble_cpy:
.b1e0	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1e3	c0					.byte $c0
>b1e4	d4					.byte $d4
.b1e5					Assemble_cpx:
.b1e5	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1e8	e0					.byte $e0
>b1e9	d0					.byte $d0
.b1ea					Assemble_tsb:
.b1ea	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1ed	00					.byte $00
>b1ee	50					.byte $50
.b1ef					Assemble_trb:
.b1ef	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1f2	10					.byte $10
>b1f3	50					.byte $50
.b1f4					Assemble_jsr:
.b1f4	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1f7	14					.byte $14
>b1f8	10					.byte $10
.b1f9					Assemble_jmp:
.b1f9	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1fc	40					.byte $40
>b1fd	10					.byte $10
.b1fe					Assemble_bpl:
.b1fe	20 22 89	jsr $8922		jsr	AssembleGroup3
>b201	10					.byte $10
.b202					Assemble_bmi:
.b202	20 22 89	jsr $8922		jsr	AssembleGroup3
>b205	30					.byte $30
.b206					Assemble_bvc:
.b206	20 22 89	jsr $8922		jsr	AssembleGroup3
>b209	50					.byte $50
.b20a					Assemble_bvs:
.b20a	20 22 89	jsr $8922		jsr	AssembleGroup3
>b20d	70					.byte $70
.b20e					Assemble_bcc:
.b20e	20 22 89	jsr $8922		jsr	AssembleGroup3
>b211	90					.byte $90
.b212					Assemble_bcs:
.b212	20 22 89	jsr $8922		jsr	AssembleGroup3
>b215	b0					.byte $b0
.b216					Assemble_bne:
.b216	20 22 89	jsr $8922		jsr	AssembleGroup3
>b219	d0					.byte $d0
.b21a					Assemble_beq:
.b21a	20 22 89	jsr $8922		jsr	AssembleGroup3
>b21d	f0					.byte $f0
.b21e					Assemble_bra:
.b21e	20 22 89	jsr $8922		jsr	AssembleGroup3
>b221	80					.byte $80
.b222					Assemble_brk:
.b222	20 58 89	jsr $8958		jsr	AssembleGroup4
>b225	00					.byte $00
.b226					Assemble_php:
.b226	20 58 89	jsr $8958		jsr	AssembleGroup4
>b229	08					.byte $08
.b22a					Assemble_clc:
.b22a	20 58 89	jsr $8958		jsr	AssembleGroup4
>b22d	18					.byte $18
.b22e					Assemble_plp:
.b22e	20 58 89	jsr $8958		jsr	AssembleGroup4
>b231	28					.byte $28
.b232					Assemble_sec:
.b232	20 58 89	jsr $8958		jsr	AssembleGroup4
>b235	38					.byte $38
.b236					Assemble_rti:
.b236	20 58 89	jsr $8958		jsr	AssembleGroup4
>b239	40					.byte $40
.b23a					Assemble_pha:
.b23a	20 58 89	jsr $8958		jsr	AssembleGroup4
>b23d	48					.byte $48
.b23e					Assemble_cli:
.b23e	20 58 89	jsr $8958		jsr	AssembleGroup4
>b241	58					.byte $58
.b242					Assemble_phy:
.b242	20 58 89	jsr $8958		jsr	AssembleGroup4
>b245	5a					.byte $5a
.b246					Assemble_rts:
.b246	20 58 89	jsr $8958		jsr	AssembleGroup4
>b249	60					.byte $60
.b24a					Assemble_pla:
.b24a	20 58 89	jsr $8958		jsr	AssembleGroup4
>b24d	68					.byte $68
.b24e					Assemble_sei:
.b24e	20 58 89	jsr $8958		jsr	AssembleGroup4
>b251	78					.byte $78
.b252					Assemble_ply:
.b252	20 58 89	jsr $8958		jsr	AssembleGroup4
>b255	7a					.byte $7a
.b256					Assemble_dey:
.b256	20 58 89	jsr $8958		jsr	AssembleGroup4
>b259	88					.byte $88
.b25a					Assemble_txa:
.b25a	20 58 89	jsr $8958		jsr	AssembleGroup4
>b25d	8a					.byte $8a
.b25e					Assemble_tya:
.b25e	20 58 89	jsr $8958		jsr	AssembleGroup4
>b261	98					.byte $98
.b262					Assemble_txs:
.b262	20 58 89	jsr $8958		jsr	AssembleGroup4
>b265	9a					.byte $9a
.b266					Assemble_tay:
.b266	20 58 89	jsr $8958		jsr	AssembleGroup4
>b269	a8					.byte $a8
.b26a					Assemble_tax:
.b26a	20 58 89	jsr $8958		jsr	AssembleGroup4
>b26d	aa					.byte $aa
.b26e					Assemble_clv:
.b26e	20 58 89	jsr $8958		jsr	AssembleGroup4
>b271	b8					.byte $b8
.b272					Assemble_tsx:
.b272	20 58 89	jsr $8958		jsr	AssembleGroup4
>b275	ba					.byte $ba
.b276					Assemble_iny:
.b276	20 58 89	jsr $8958		jsr	AssembleGroup4
>b279	c8					.byte $c8
.b27a					Assemble_dex:
.b27a	20 58 89	jsr $8958		jsr	AssembleGroup4
>b27d	ca					.byte $ca
.b27e					Assemble_cld:
.b27e	20 58 89	jsr $8958		jsr	AssembleGroup4
>b281	d8					.byte $d8
.b282					Assemble_phx:
.b282	20 58 89	jsr $8958		jsr	AssembleGroup4
>b285	da					.byte $da
.b286					Assemble_stp:
.b286	20 58 89	jsr $8958		jsr	AssembleGroup4
>b289	db					.byte $db
.b28a					Assemble_inx:
.b28a	20 58 89	jsr $8958		jsr	AssembleGroup4
>b28d	e8					.byte $e8
.b28e					Assemble_nop:
.b28e	20 58 89	jsr $8958		jsr	AssembleGroup4
>b291	ea					.byte $ea
.b292					Assemble_sed:
.b292	20 58 89	jsr $8958		jsr	AssembleGroup4
>b295	f8					.byte $f8
.b296					Assemble_plx:
.b296	20 58 89	jsr $8958		jsr	AssembleGroup4
>b299	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b29a					DecimalScalarTable:
>b29a	66 66 66 66				.dword $66666666 ; 0.1
>b29e	de					.byte $de
>b29f	1f 85 eb 51				.dword $51eb851f ; 0.01
>b2a3	db					.byte $db
>b2a4	4c 37 89 41				.dword $4189374c ; 0.001
>b2a8	d8					.byte $d8
>b2a9	ac 8b db 68				.dword $68db8bac ; 0.0001
>b2ad	d4					.byte $d4
>b2ae	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b2b2	d1					.byte $d1
>b2b3	83 de 1b 43				.dword $431bde83 ; 1e-06
>b2b7	ce					.byte $ce
>b2b8	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b2bc	ca					.byte $ca
>b2bd	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b2c1	c7					.byte $c7
>b2c2	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b2c6	c4					.byte $c4
>b2c7	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b2cb	c0					.byte $c0
>b2cc	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b2d0	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b2d1					SyntaxError:
.b2d1	a9 02		lda #$02		lda	#2
.b2d3	4c eb 98	jmp $98eb		jmp	ErrorHandler
.b2d6					RangeError:
.b2d6	a9 04		lda #$04		lda	#4
.b2d8	4c eb 98	jmp $98eb		jmp	ErrorHandler
.b2db					TypeError:
.b2db	a9 05		lda #$05		lda	#5
.b2dd	4c eb 98	jmp $98eb		jmp	ErrorHandler
.b2e0					ArgumentError:
.b2e0	a9 07		lda #$07		lda	#7
.b2e2	4c eb 98	jmp $98eb		jmp	ErrorHandler
.b2e5					NotDoneError:
.b2e5	a9 0c		lda #$0c		lda	#12
.b2e7	4c eb 98	jmp $98eb		jmp	ErrorHandler
.b2ea					ErrorText:
>b2ea	42 72 65 61 6b 00			.text	"Break",0
>b2f0	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b2f8	72 72 6f 72 00
>b2fd	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b305	20 62 79 20 7a 65 72 6f 00
>b30e	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b316	61 6e 67 65 00
>b31b	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b323	6d 61 74 63 68 00
>b329	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b331	65 6d 6f 72 79 00
>b337	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b33f	61 72 67 75 6d 65 6e 74 00
>b348	53 74 6f 70 00				.text	"Stop",0
>b34d	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b355	6f 6f 20 6c 6f 6e 67 00
>b35d	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b365	6e 20 66 61 69 6c 65 64 00
>b36e	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b376	61 74 61 00
>b37a	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b382	65 6e 74 65 64 00
>b388	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b390	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b39c	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b3a4	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b3b1	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b3b9	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b3c6	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b3ce	68 6f 75 74 20 57 68 69 6c 65 00
>b3d9	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b3e1	68 6f 75 74 20 46 6f 72 00
>b3ea	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b3f2	61 63 6b 20 66 75 6c 6c 00
>b3fb	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b403	75 63 74 75 72 65 00
>b40a	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b412	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b41f	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b427	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b435	41 72 72 61 79 20 73 69			.text	"Array size",0
>b43d	7a 65 00
>b440	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b448	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b450	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 1965."
>b458	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>b468	32 32 2e 20 42 75 69 6c 64 20 31 39 36 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b477					EXTInitialise:
.b477	64 01		stz $01				stz 	1 							; Access I/O
.b479	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b47c	9c 08 d0	stz $d008			stz 	$D008
.b47f	9c 09 d0	stz $d009			stz 	$D009
.b482	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b484	8d 58 d6	sta $d658			sta 	$D658
.b487	60		rts				rts
.b488					EXTPrintCharacter:
.b488	48		pha				pha
.b489	da		phx				phx
.b48a	5a		phy				phy
.b48b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b48e	7a		ply				ply
.b48f	fa		plx				plx
.b490	68		pla				pla
.b491	60		rts				rts
.b492					EXTInputSingleCharacter:
.b492	da		phx				phx
.b493	5a		phy				phy
.b494					_EISCWait:
.b494	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b497	c9 00		cmp #$00			cmp 	#0
.b499	f0 f9		beq $b494			beq 	_EISCWait
.b49b	7a		ply				ply
.b49c	fa		plx				plx
.b49d	60		rts				rts
.b49e					EXTInputLine:
.b49e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b4a0					_ILLoop:
.b4a0	da		phx				phx 								; read character in
.b4a1	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b4a4	fa		plx				plx
.b4a5	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b4a7	f0 12		beq $b4bb			beq 	_ILBackspace
.b4a9	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b4ab	f0 15		beq $b4c2			beq 	_ILExit
.b4ad	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b4af	90 ef		bcc $b4a0			bcc 	_ILLoop
.b4b1	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b4b3	f0 eb		beq $b4a0			beq 	_ILLoop
.b4b5	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b4b8	e8		inx				inx
.b4b9	80 e5		bra $b4a0			bra 	_ILLoop
.b4bb					_ILBackspace:
.b4bb	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b4bd	f0 e1		beq $b4a0			beq 	_ILLoop
.b4bf	ca		dex				dex 								; back one.
.b4c0	80 de		bra $b4a0			bra 	_ILLoop
.b4c2					_ILExit:
.b4c2	20 88 b4	jsr $b488			jsr 	EXTPrintCharacter
.b4c5	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b4c8	60		rts				rts
.b4c9					EXTBreakCheck:
.b4c9	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b4cc					EXTReadController:
.b4cc	da		phx				phx
.b4cd	a2 00		ldx #$00			ldx 	#0
.b4cf	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b4d1	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4d4	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b4d6	f0 04		beq $b4dc			beq 	_NoSet1
.b4d8	8a		txa				txa
.b4d9	09 01		ora #$01			ora 	#1
.b4db	aa		tax				tax
.b4dc					_NoSet1:
.b4dc	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b4de	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4e1	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b4e3	f0 04		beq $b4e9			beq 	_NoSet1
.b4e5	8a		txa				txa
.b4e6	09 02		ora #$02			ora 	#2
.b4e8	aa		tax				tax
.b4e9					_NoSet1:
.b4e9	a9 06		lda #$06			lda 	#(($32) >> 3)
.b4eb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4ee	29 04		and #$04			and 	#($01 << (($32) & 7))
.b4f0	f0 04		beq $b4f6			beq 	_NoSet1
.b4f2	8a		txa				txa
.b4f3	09 04		ora #$04			ora 	#4
.b4f5	aa		tax				tax
.b4f6					_NoSet1:
.b4f6	a9 04		lda #$04			lda 	#(($25) >> 3)
.b4f8	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4fb	29 20		and #$20			and 	#($01 << (($25) & 7))
.b4fd	f0 04		beq $b503			beq 	_NoSet1
.b4ff	8a		txa				txa
.b500	09 08		ora #$08			ora 	#8
.b502	aa		tax				tax
.b503					_NoSet1:
.b503	a9 04		lda #$04			lda 	#(($26) >> 3)
.b505	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b508	29 40		and #$40			and 	#($01 << (($26) & 7))
.b50a	f0 04		beq $b510			beq 	_NoSet1
.b50c	8a		txa				txa
.b50d	09 10		ora #$10			ora 	#16
.b50f	aa		tax				tax
.b510					_NoSet1:
.b510	8a		txa				txa
.b511	fa		plx				plx
.b512	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b513					MemoryDeleteLine:
.b513	20 32 b5	jsr $b532			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b516	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b518	a8		tay				tay
.b519					_MDDLLoop:
.b519	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b51b	92 30		sta ($30)			sta 	(codePtr)
.b51d	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b51f	c5 3a		cmp $3a				cmp 	zTemp2
.b521	d0 07		bne $b52a			bne 	_MDLDLNext
.b523	a5 31		lda $31				lda 	codePtr+1
.b525	c5 3b		cmp $3b				cmp 	zTemp2+1
.b527	d0 01		bne $b52a			bne 	_MDLDLNext
.b529					_MDDLExit:
.b529	60		rts				rts
.b52a					_MDLDLNext:
.b52a	e6 30		inc $30				inc 	codePtr						; next byte
.b52c	d0 eb		bne $b519			bne 	_MDDLLoop
.b52e	e6 31		inc $31				inc 	codePtr+1
.b530	80 e7		bra $b519			bra 	_MDDLLoop
.b532					IMemoryFindEnd:
.b532	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b534	85 3a		sta $3a				sta 	0+zTemp2
.b536	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b538	85 3b		sta $3b				sta 	1+zTemp2
.b53a					_MDLFELoop:
.b53a	b2 3a		lda ($3a)			lda 	(zTemp2)
.b53c	f0 0b		beq $b549			beq 	_MDLFEExit
.b53e	18		clc				clc
.b53f	65 3a		adc $3a				adc 	zTemp2
.b541	85 3a		sta $3a				sta 	zTemp2
.b543	90 f5		bcc $b53a			bcc 	_MDLFELoop
.b545	e6 3b		inc $3b				inc 	zTemp2+1
.b547	80 f1		bra $b53a			bra 	_MDLFELoop
.b549					_MDLFEExit:
.b549	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b54a					MemoryInsertLine:
.b54a	08		php				php
.b54b	20 32 b5	jsr $b532			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b54e	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b550	1a		inc a				inc 	a
.b551	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b553	b0 36		bcs $b58b			bcs 	_MDLIError
.b555	28		plp				plp
.b556	90 08		bcc $b560			bcc 	_MDLIFound
.b558	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b55a	85 30		sta $30				sta 	codePtr
.b55c	a5 3b		lda $3b				lda 	zTemp2+1
.b55e	85 31		sta $31				sta 	codePtr+1
.b560					_MDLIFound:
.b560	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b563	a8		tay				tay
.b564					_MDLIInsert:
.b564	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b566	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b568	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b56a	c5 3a		cmp $3a				cmp 	zTemp2
.b56c	d0 06		bne $b574			bne 	_MDLINext
.b56e	a5 31		lda $31				lda 	codePtr+1
.b570	c5 3b		cmp $3b				cmp 	zTemp2+1
.b572	f0 0a		beq $b57e			beq 	_MDLIHaveSpace
.b574					_MDLINext:
.b574	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b576	d0 02		bne $b57a			bne 	_MDLINoBorrow
.b578	c6 3b		dec $3b				dec 	zTemp2+1
.b57a					_MDLINoBorrow:
.b57a	c6 3a		dec $3a				dec 	zTemp2
.b57c	80 e6		bra $b564			bra 	_MDLIInsert
.b57e					_MDLIHaveSpace:
.b57e	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b581	88		dey				dey 								; from offset-1 to 0
.b582					_MDLICopy:
.b582	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b585	91 30		sta ($30),y			sta 	(codePtr),y
.b587	88		dey				dey
.b588	10 f8		bpl $b582			bpl 	_MDLICopy
.b58a	60		rts				rts
.b58b					_MDLIError:
.b58b	a9 06		lda #$06		lda	#6
.b58d	4c eb 98	jmp $98eb		jmp	ErrorHandler
.b590					MDLAppendLine:
.b590	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b592	85 36		sta $36				sta 	zTemp0
.b594	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b596	85 38		sta $38				sta 	0+zTemp1
.b598	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b59a	85 39		sta $39				sta 	1+zTemp1
.b59c	b2 38		lda ($38)			lda 	(zTemp1)
.b59e	d0 0a		bne $b5aa			bne 	_MDLANoInitialise
.b5a0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5a2	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b5a5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5a7	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b5aa					_MDLANoInitialise:
.b5aa	18		clc				clc
.b5ab	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b5ae	85 38		sta $38				sta 	zTemp1
.b5b0	72 36		adc ($36)			adc 	(zTemp0)
.b5b2	8d 6b 06	sta $066b			sta 	AppendPointer
.b5b5	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b5b8	85 39		sta $39				sta 	zTemp1+1
.b5ba	69 00		adc #$00			adc 	#0
.b5bc	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b5bf	a0 00		ldy #$00			ldy 	#0
.b5c1					_MDLACopy:
.b5c1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b5c3	91 38		sta ($38),y			sta 	(zTemp1),y
.b5c5	c8		iny				iny
.b5c6	98		tya				tya
.b5c7	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b5c9	d0 f6		bne $b5c1			bne 	_MDLACopy
.b5cb	a9 00		lda #$00			lda 	#0 							; end of program.
.b5cd	91 38		sta ($38),y			sta 	(zTemp1),y
.b5cf	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a500					MemoryNew:
.a500	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a502	85 30		sta $30				sta 	codePtr
.a504	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a506	85 31		sta $31				sta 	codePtr+1
.a508	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a50a	92 30		sta ($30)			sta 	(codePtr)
.a50c	60		rts				rts
.a50d					MemoryInline:
.a50d	98		tya				tya 								; put address into stack,x
.a50e	18		clc				clc
.a50f	65 30		adc $30				adc 	codePtr
.a511	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a514	a5 31		lda $31				lda 	codePtr+1
.a516	69 00		adc #$00			adc 	#0
.a518	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a51b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a51e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a521	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a522					MemorySearch:
.a522	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a524	86 37		stx $37				stx 	zTemp0+1
.a526	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a528	85 30		sta $30				sta 	codePtr
.a52a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a52c	85 31		sta $31				sta 	codePtr+1
.a52e					_MTAXLoop:
.a52e	b2 30		lda ($30)			lda 	(codePtr)
.a530	18		clc				clc
.a531	f0 21		beq $a554			beq 	_MTAXExit 					; reached end, exit with CC.
.a533	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a535	b1 30		lda ($30),y			lda 	(codePtr),y
.a537	38		sec				sec
.a538	e5 36		sbc $36				sbc 	zTemp0
.a53a	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a53c	c8		iny				iny 								; do the MSB
.a53d	b1 30		lda ($30),y			lda 	(codePtr),y
.a53f	e5 37		sbc $37				sbc 	zTemp0+1
.a541	05 38		ora $38				ora 	zTemp1
.a543	f0 0f		beq $a554			beq 	_MTAXExit	 				; found
.a545	b0 0d		bcs $a554			bcs 	_MTAXExit 					; current < required exit
.a547	18		clc				clc
.a548	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a54a	65 30		adc $30				adc 	codePtr
.a54c	85 30		sta $30				sta 	codePtr
.a54e	90 02		bcc $a552			bcc 	_CREExit
.a550	e6 31		inc $31				inc 	codePtr+1
.a552					_CREExit:
.a552	80 da		bra $a52e			bra 	_MTAXLoop
.a554					_MTAXExit:
.a554	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a555					StackPushByte:
.a555	48		pha				pha 								; save byte
.a556	a5 34		lda $34				lda 	BasicStack
.a558	d0 09		bne $a563			bne 	_SPBNoBorrow
.a55a	c6 35		dec $35				dec 	BasicStack+1
.a55c	48		pha				pha
.a55d	a5 35		lda $35				lda 	BasicStack+1
.a55f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a561	90 06		bcc $a569			bcc 	_SPBMemory
.a563					_SPBNoBorrow:
.a563	c6 34		dec $34				dec 	BasicStack
.a565	68		pla				pla 								; get back and write
.a566	92 34		sta ($34)			sta 	(BasicStack)
.a568	60		rts				rts
.a569					_SPBMemory:
.a569	a9 12		lda #$12		lda	#18
.a56b	4c eb 98	jmp $98eb		jmp	ErrorHandler
.a56e					StackPopByte:
.a56e	b2 34		lda ($34)			lda 	(BasicStack)
.a570	e6 34		inc $34				inc 	BasicStack
.a572	d0 02		bne $a576			bne 	_SPBNoCarry
.a574	e6 35		inc $35				inc 	BasicStack+1
.a576					_SPBNoCarry:
.a576	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a577					StackOpen:
.a577	48		pha				pha 								; save frame byte
.a578	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a57a	0a		asl a				asl 	a 							; claim twice this for storage
.a57b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a57d	38		sec				sec 								; so basically subtracting from
.a57e	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a580	85 34		sta $34				sta 	basicStack
.a582	b0 08		bcs $a58c			bcs 	_SONoBorrow
.a584	c6 35		dec $35				dec 	basicStack+1
.a586	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a588	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a58a	90 04		bcc $a590			bcc 	_SOMemory
.a58c					_SONoBorrow:
.a58c	68		pla				pla 								; get marker back and write at TOS
.a58d	92 34		sta ($34)			sta 	(basicStack)
.a58f	60		rts				rts
.a590					_SOMemory:
.a590	a9 12		lda #$12		lda	#18
.a592	4c eb 98	jmp $98eb		jmp	ErrorHandler
.a595					StackClose:
.a595	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a597	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a599	0a		asl a				asl 	a 							; claim twice this.
.a59a	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a59c	85 34		sta $34				sta 	basicStack
.a59e	90 02		bcc $a5a2			bcc 	_SCExit
.a5a0	e6 35		inc $35				inc 	basicStack+1
.a5a2					_SCExit:
.a5a2	60		rts				rts
.a5a3					StackCheckFrame:
.a5a3	48		pha				pha
.a5a4					_StackRemoveLocals:
.a5a4	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a5a6	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a5a8	b0 05		bcs $a5af			bcs 	_SCNoLocal
.a5aa	20 92 ac	jsr $ac92			jsr 	LocalPopValue
.a5ad	80 f5		bra $a5a4			bra 	_StackRemoveLocals
.a5af					_SCNoLocal:
.a5af	68		pla				pla
.a5b0	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a5b2	29 f0		and #$f0			and 	#$F0 						; check type bits
.a5b4	d0 01		bne $a5b7			bne 	_SCFError 					; different, we have structures mixed up
.a5b6	60		rts				rts
.a5b7					_SCFError:
.a5b7	8a		txa				txa 								; report error X
.a5b8	4c eb 98	jmp $98eb			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a5bb					STKSaveCodePosition:
.a5bb	5a		phy				phy
.a5bc	98		tya				tya 								; save Y
.a5bd	a0 05		ldy #$05			ldy 	#5
.a5bf	91 34		sta ($34),y			sta 	(basicStack),y
.a5c1	88		dey				dey 								; save Code Pointer
.a5c2					_STKSaveLoop:
.a5c2	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a5c5	91 34		sta ($34),y			sta 	(basicStack),y
.a5c7	88		dey				dey
.a5c8	d0 f8		bne $a5c2			bne 	_STKSaveLoop
.a5ca	7a		ply				ply
.a5cb	60		rts				rts
.a5cc					STKLoadCodePosition:
.a5cc	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a5ce					_STKLoadLoop:
.a5ce	b1 34		lda ($34),y			lda 	(basicStack),y
.a5d0	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a5d3	c8		iny				iny
.a5d4	c0 05		cpy #$05			cpy 	#5
.a5d6	d0 f6		bne $a5ce			bne 	_STKLoadLoop
.a5d8	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a5da	a8		tay				tay
.a5db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a5dc					StackReset:
.a5dc	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a5de	85 34		sta $34				sta 	0+basicStack
.a5e0	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a5e2	85 35		sta $35				sta 	1+basicStack
.a5e4	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a5e6	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a5e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b5d0					StringConcrete:
.b5d0	5a		phy				phy 								; save position on stack
.b5d1	20 b8 a1	jsr $a1b8			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b5d4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b5d7	85 38		sta $38				sta 	zTemp1
.b5d9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b5dc	85 39		sta $39				sta 	zTemp1+1
.b5de	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b5e0					_SALength:
.b5e0	c8		iny				iny
.b5e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.b5e3	d0 fb		bne $b5e0			bne 	_SALength
.b5e5	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b5e7	b0 3f		bcs $b628			bcs 	_SALengthError
.b5e9	98		tya				tya 				 				; length of the new string
.b5ea	18		clc				clc
.b5eb	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b5ed	90 02		bcc $b5f1			bcc 	_SAHaveLength
.b5ef	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b5f1					_SAHaveLength:
.b5f1	48		pha				pha 								; save length.
.b5f2	38		sec				sec
.b5f3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b5f5	6d 8e 04	adc $048e			adc 	StringMemory
.b5f8	8d 8e 04	sta $048e			sta 	StringMemory
.b5fb	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b5fd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b600	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b602	6d 8f 04	adc $048f			adc 	StringMemory+1
.b605	8d 8f 04	sta $048f			sta 	StringMemory+1
.b608	85 3b		sta $3b				sta 	zTemp2+1
.b60a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b60d	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b60e	38		sec				sec
.b60f	e9 03		sbc #$03			sbc 	#3
.b611	92 3a		sta ($3a)			sta 	(zTemp2)
.b613	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b615	a0 01		ldy #$01			ldy 	#1
.b617	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b619					_SACopyNewString:
.b619	a0 00		ldy #$00			ldy 	#0
.b61b					_SACopyNSLoop:
.b61b	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b61d	c8		iny				iny 								; write two on in string storage
.b61e	c8		iny				iny
.b61f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b621	88		dey				dey 								; this makes it one one.
.b622	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b624	d0 f5		bne $b61b			bne 	_SACopyNSLoop
.b626	7a		ply				ply
.b627	60		rts				rts
.b628					_SALengthError:
.b628	a9 09		lda #$09		lda	#9
.b62a	4c eb 98	jmp $98eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b62d					StringSystemInitialise:
.b62d	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b62f	8d 8e 04	sta $048e			sta 	0+StringMemory
.b632	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b634	8d 8f 04	sta $048f			sta 	1+StringMemory
.b637	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b63a	60		rts				rts
.b63b					StringSpaceInitialise:
.b63b	20 b8 a1	jsr $a1b8			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b63e	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b640	8d 90 04	sta $0490			sta 	StringInitialised
.b643	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b646	8d 91 04	sta $0491			sta 	StringTempPointer
.b649	ad 8f 04	lda $048f			lda 	StringMemory+1
.b64c	3a		dec a				dec 	a
.b64d	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b650	60		rts				rts
.b651					StringTempAllocate:
.b651	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b653	b0 35		bcs $b68a			bcs 	_STALength
.b655	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b658	30 05		bmi $b65f			bmi 	_STAAllocate
.b65a	48		pha				pha 								; save value to subtract.
.b65b	20 3b b6	jsr $b63b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b65e	68		pla				pla 								; restore it
.b65f					_STAAllocate:
.b65f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b661	18		clc				clc  								; deliberate allows one more
.b662	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b665	8d 91 04	sta $0491			sta 	StringTempPointer
.b668	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b66b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b66d	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b670	69 ff		adc #$ff			adc 	#$FF
.b672	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b675	85 3d		sta $3d				sta 	zsTemp+1
.b677	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b67a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b67d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b680	a9 10		lda #$10			lda 	#NSTString
.b682	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b685	a9 00		lda #$00			lda 	#0 							; clear the target string
.b687	92 3c		sta ($3c)			sta 	(zsTemp)
.b689	60		rts				rts
.b68a					_STALength:
.b68a	a9 09		lda #$09		lda	#9
.b68c	4c eb 98	jmp $98eb		jmp	ErrorHandler
.b68f					StringTempWrite:
.b68f	48		pha				pha
.b690	92 3c		sta ($3c)			sta 	(zsTemp)
.b692	e6 3c		inc $3c				inc 	zsTemp
.b694	d0 02		bne $b698			bne 	_STWNoCarry
.b696	e6 3d		inc $3d				inc 	zsTemp+1
.b698					_STWNoCarry:
.b698	a9 00		lda #$00			lda 	#0
.b69a	92 3c		sta ($3c)			sta 	(zsTemp)
.b69c	68		pla				pla
.b69d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a5e9					BackloadProgram:
.a5e9	a2 ff		ldx #$ff			ldx 	#$FF
.a5eb	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a5ee	20 18 a6	jsr $a618			jsr 	BLReadByte
.a5f1	30 1e		bmi $a611			bmi 	_BPExit
.a5f3					_BPCopy:
.a5f3	e8		inx				inx  								; copy byte in
.a5f4	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a5f7	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a5fa	20 18 a6	jsr $a618			jsr 	BLReadByte 					; read next byte
.a5fd	30 0a		bmi $a609			bmi 	_BPEndLine 					; -ve = EOL
.a5ff	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a601	d0 02		bne $a605			bne 	_BPNotTab
.a603	a9 20		lda #$20			lda 	#' '
.a605					_BPNotTab:
.a605	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a607	b0 ea		bcs $a5f3			bcs 	_BPCopy
.a609					_BPEndLine:
.a609	20 e3 a9	jsr $a9e3			jsr 	TokeniseLine 				; tokenise the line.
.a60c	20 12 8b	jsr $8b12			jsr 	EditProgramCode
.a60f	80 d8		bra $a5e9			bra 	BackloadProgram
.a611					_BPExit:
.a611	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a614	20 d0 8b	jsr $8bd0			jsr 	ClearCommand 				; clear variables etc.
.a617	60		rts				rts
.a618					BLReadByte:
.a618					_BLLoad:
.a618	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a61b	ee 19 a6	inc $a619			inc 	_BLLoad+1
.a61e	d0 03		bne $a623			bne 	_BLNoCarry
.a620	ee 1a a6	inc $a61a			inc 	_BLLoad+2
.a623					_BLNoCarry:
.a623	c9 00		cmp #$00			cmp 	#0
.a625	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a626					TokeniseSearchTable:
.a626	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a628	85 36		sta $36				sta 	zTemp0
.a62a	a0 00		ldy #$00			ldy 	#0
.a62c	a9 80		lda #$80			lda 	#$80 						; token #
.a62e	85 38		sta $38				sta 	zTemp1
.a630					_TSTLoop:
.a630	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a632	30 49		bmi $a67d			bmi 	_TSTFail 					; -ve = end of table
.a634	f0 2e		beq $a664			beq 	_TSTNext 					; zero, check next it's a dummy
.a636	c8		iny				iny 								; get the hash
.a637	b1 36		lda ($36),y			lda 	(zTemp0),y
.a639	88		dey				dey
.a63a	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a63d	d0 25		bne $a664			bne 	_TSTNext
.a63f	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a642	38		sec				sec
.a643	ed 80 04	sbc $0480			sbc 	identStart
.a646	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a648	d0 1a		bne $a664			bne 	_TSTNext
.a64a	5a		phy				phy 								; save Y , we might fail
.a64b	c8		iny				iny 								; point to text
.a64c	c8		iny				iny
.a64d	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a650					_TSTCompareName:
.a650	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a653	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a655	d0 0c		bne $a663			bne 	_TSTNextPullY 				; fail, pullY and do next
.a657	e8		inx				inx
.a658	c8		iny				iny
.a659	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a65c	d0 f2		bne $a650			bne 	_TSTCompareName
.a65e	7a		ply				ply 								; throw Y
.a65f	a5 38		lda $38				lda 	zTemp1 						; get token #
.a661	38		sec				sec 								; return with CS = passed.
.a662	60		rts				rts
.a663					_TSTNextPullY:
.a663	7a		ply				ply 								; restore current, fall through.
.a664					_TSTNext:
.a664	e6 38		inc $38				inc 	zTemp1 						; token counter
.a666	98		tya				tya
.a667	18		clc				clc
.a668	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a66a	1a		inc a				inc 	a 							; +1
.a66b	1a		inc a				inc 	a 							; +2
.a66c	a8		tay				tay
.a66d	10 c1		bpl $a630			bpl 	_TSTLoop 					; if Y < $80 loop back
.a66f	98		tya				tya 								; add Y to zTemp0 and reset Y
.a670	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a672	18		clc				clc  								; but have tables > 255 bytes
.a673	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a675	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a677	90 b7		bcc $a630			bcc 	_TSTLoop
.a679	e6 37		inc $37				inc 	zTemp0+1
.a67b	80 b3		bra $a630			bra 	_TSTLoop
.a67d					_TSTFail:
.a67d	18		clc				clc
.a67e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a67f					KeywordSet0:
>a67f	00 65					.text	0,$65,""               ; $80 !0:EOF
>a681	00 58					.text	0,$58,""               ; $81 !1:SH1
>a683	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a685	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a68b	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a693	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a699	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a6a0	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a6a8	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a6af	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a6b6	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a6bc	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a6c4	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8c JOYB(
>a6cb	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8d JOYX(
>a6d2	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8e JOYY(
>a6d9	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>a6e1	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>a6e7	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>a6ee	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $92 NOT(
>a6f4	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $93 RANDOM(
>a6fc	28
>a6fd	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>a705	28
>a706	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>a70c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>a712	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>a718	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>a71f	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $99 TIMER(
>a727	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9a TRUE
>a72d	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9b VAL(
>a733	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9c FOR
>a738	02 8f 49 46				.text	2,$8f,"IF"             ; $9d IF
>a73c	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9e PROC
>a742	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9f REPEAT
>a74a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a0 WHILE
>a751	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a1 ENDIF
>a758	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a2 ENDPROC
>a760	43
>a761	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a3 NEXT
>a767	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a4 THEN
>a76d	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a5 UNTIL
>a774	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a6 WEND
>a77a	02 9b 42 59				.text	2,$9b,"BY"             ; $a7 BY
>a77e	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a8 CALL
>a784	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a9 CIRCLE
>a78c	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $aa CLEAR
>a793	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ab CLS
>a798	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ac COLOR
>a79f	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ad COLOUR
>a7a7	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ae DATA
>a7ad	03 da 44 49 4d				.text	3,$da,"DIM"            ; $af DIM
>a7b2	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b0 DOWNTO
>a7ba	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b1 ELSE
>a7c0	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b2 FROM
>a7c6	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b3 GFX
>a7cb	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b4 GOSUB
>a7d2	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b5 GOTO
>a7d8	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b6 HERE
>a7de	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b7 IMAGE
>a7e5	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b8 LET
>a7ea	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b9 LINE
>a7f0	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ba LOCAL
>a7f7	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bb OFF
>a7fc	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bc ON
>a800	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $bd OUTLINE
>a808	45
>a809	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $be PLOT
>a80f	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bf PRINT
>a816	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c0 READ
>a81c	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c1 RECT
>a822	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c2 REM
>a827	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c3 RETURN
>a82f	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c4 SOLID
>a836	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c5 SPRITE
>a83e	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c6 TEXT
>a844	02 a3 54 4f				.text	2,$a3,"TO"             ; $c7 TO
>a848	ff					.text	$FF
.a849					KeywordSet1:
>a849	00 65					.text	0,$65,""               ; $80 !0:EOF
>a84b	00 58					.text	0,$58,""               ; $81 !1:SH1
>a84d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a84f	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a857	4c 45
>a859	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a861	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a869	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a86e	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a874	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a879	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a881	45
>a882	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a887	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a88f	53
>a890	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a896	ff					.text	$FF
.a897					KeywordSet2:
>a897	00 65					.text	0,$65,""               ; $80 !0:EOF
>a899	00 58					.text	0,$58,""               ; $81 !1:SH1
>a89b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a89d	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a8a2	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a8a7	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a8ac	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a8b1	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a8b6	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a8bb	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a8c0	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a8c5	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a8ca	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a8cf	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a8d4	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a8d9	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a8de	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a8e3	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a8e8	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a8ed	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a8f2	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a8f7	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a8fc	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a901	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a906	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a90b	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a910	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a915	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a91a	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a91f	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a924	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a929	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a92e	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a933	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a938	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a93d	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a942	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a947	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a94c	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a951	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a956	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a95b	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a960	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a965	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a96a	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a96f	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a974	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a979	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a97e	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a983	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a988	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a98d	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a992	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a997	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a99c	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a9a1	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a9a6	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a9ab	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a9b0	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a9b5	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a9ba	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a9bf	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a9c4	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a9c9	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a9ce	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a9d3	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a9d8	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a9dd	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a9e2	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a9e3					TokeniseLine:
.a9e3	20 6b ab	jsr $ab6b			jsr 	FixLineBufferCase 			; fix line case
.a9e6	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a9e8	8d a6 04	sta $04a6			sta 	tokenOffset
.a9eb	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a9ee	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a9f1	a2 ff		ldx #$ff			ldx 	#$FF
.a9f3					_TKFindFirst:
.a9f3	e8		inx				inx
.a9f4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a9f7	f0 79		beq $aa72			beq 	_TKExit
.a9f9	c9 20		cmp #$20			cmp 	#' '
.a9fb	90 f6		bcc $a9f3			bcc 	_TKFindFirst
.a9fd	c9 30		cmp #$30			cmp 	#'0'
.a9ff	90 07		bcc $aa08			bcc 	_TKNoLineNumber
.aa01	c9 3a		cmp #$3a			cmp 	#'9'+1
.aa03	b0 03		bcs $aa08			bcs 	_TKNoLineNumber
.aa05	20 95 ab	jsr $ab95			jsr 	TokeniseExtractLineNumber
.aa08					_TKNoLineNumber:
.aa08					_TKTokeniseLoop:
.aa08	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.aa0b	f0 65		beq $aa72			beq 	_TKExit
.aa0d	e8		inx				inx
.aa0e	c9 20		cmp #$20			cmp 	#' '
.aa10	f0 f6		beq $aa08			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aa12	ca		dex				dex 								; undo last get, A contains character, X is position.
.aa13	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aa15	f0 61		beq $aa78			beq 	_TKTokeniseIdentifier
.aa17	c9 41		cmp #$41			cmp 	#'A'
.aa19	90 04		bcc $aa1f			bcc 	_TKTokenisePunctuation
.aa1b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aa1d	90 59		bcc $aa78			bcc 	_TKTokeniseIdentifier
.aa1f					_TKTokenisePunctuation:
.aa1f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aa21	f0 27		beq $aa4a			beq 	_TKString
.aa23	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aa25	f0 28		beq $aa4f			beq 	_TKHexConstant
.aa27	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aa29	f0 29		beq $aa54			beq 	_TKCheckDouble
.aa2b	c9 3e		cmp #$3e			cmp 	#'>'
.aa2d	f0 25		beq $aa54			beq 	_TKCheckDouble
.aa2f					_TKStandardPunctuation:
.aa2f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aa32	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aa34	90 0e		bcc $aa44			bcc 	_TKNoShift
.aa36	48		pha				pha 								; save
.aa37	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aa39	85 36		sta $36				sta 	zTemp0
.aa3b	68		pla				pla
.aa3c	29 20		and #$20			and 	#32 						; bit 5
.aa3e	4a		lsr a				lsr 	a 							; shift into bit 3
.aa3f	4a		lsr a				lsr 	a
.aa40	05 36		ora $36				ora 	zTemp0
.aa42	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aa44					_TKNoShift:
.aa44	20 da ab	jsr $abda			jsr 	TokeniseWriteByte 			; write the punctuation character
.aa47	e8		inx				inx 								; consume the character
.aa48	80 be		bra $aa08			bra 	_TKTokeniseLoop 			; and loop round again.
.aa4a					_TKString:
.aa4a	20 fa aa	jsr $aafa			jsr 	TokeniseString
.aa4d	80 b9		bra $aa08			bra 	_TKTokeniseLoop
.aa4f					_TKHexConstant:
.aa4f	20 35 ab	jsr $ab35			jsr 	TokeniseHexConstant
.aa52	80 b4		bra $aa08			bra 	_TKTokeniseLoop
.aa54					_TKCheckDouble:
.aa54	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aa57	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aa59	90 d4		bcc $aa2f			bcc 	_TKStandardPunctuation
.aa5b	c9 3f		cmp #$3f			cmp 	#'>'+1
.aa5d	b0 d0		bcs $aa2f			bcs 	_TKStandardPunctuation
.aa5f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aa62	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aa64	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aa65	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aa68	38		sec				sec
.aa69	e9 3c		sbc #$3c			sbc 	#'<'
.aa6b	20 da ab	jsr $abda			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.aa6e	e8		inx				inx 								; consume both
.aa6f	e8		inx				inx
.aa70	80 96		bra $aa08			bra 	_TKTokeniseLoop
.aa72	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.aa74	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.aa77	60		rts				rts
.aa78					_TKTokeniseIdentifier:
.aa78	8e 80 04	stx $0480			stx 	identStart 					; save start
.aa7b	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.aa7e					_TKCheckLoop:
.aa7e	e8		inx				inx 								; look at next, we know first is identifier.
.aa7f	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.aa82	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aa84	f0 f8		beq $aa7e			beq 	_TKCheckLoop
.aa86	c9 30		cmp #$30			cmp	 	#"0"
.aa88	90 0c		bcc $aa96			bcc 	_TKEndIdentifier
.aa8a	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa8c	90 f0		bcc $aa7e			bcc 	_TKCheckLoop
.aa8e	c9 41		cmp #$41			cmp	 	#"A"
.aa90	90 04		bcc $aa96			bcc 	_TKEndIdentifier
.aa92	c9 5b		cmp #$5b			cmp 	#"Z"+1
.aa94	90 e8		bcc $aa7e			bcc 	_TKCheckLoop
.aa96					_TKEndIdentifier:
.aa96	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.aa99	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.aa9b	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.aa9d	f0 06		beq $aaa5			beq 	_TKHasTypeCharacter
.aa9f	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.aaa1	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.aaa3	d0 07		bne $aaac			bne 	_TKNoTypeCharacter
.aaa5					_TKHasTypeCharacter:
.aaa5	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.aaa8	e8		inx				inx 								; read next
.aaa9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aaac					_TKNoTypeCharacter:
.aaac	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.aaae	d0 09		bne $aab9			bne 	_TKNoArray
.aab0	e8		inx				inx 								; skip the (
.aab1	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.aab4	09 04		ora #$04			ora 	#$04
.aab6	8d 84 04	sta $0484			sta 	identTypeByte
.aab9					_TKNoArray:
.aab9	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.aabc	20 56 ab	jsr $ab56			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.aabf	a0 a6		ldy #$a6			ldy 	#(KeywordSet0) >> 8
.aac1	a9 7f		lda #$7f			lda 	#(KeywordSet0) & $FF
.aac3	20 26 a6	jsr $a626			jsr 	TokeniseSearchTable
.aac6	a2 00		ldx #$00			ldx 	#0
.aac8	b0 1f		bcs $aae9			bcs 	_TKFoundToken
.aaca	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.aacc	a9 49		lda #$49			lda 	#(KeywordSet1) & $FF
.aace	20 26 a6	jsr $a626			jsr 	TokeniseSearchTable
.aad1	a2 81		ldx #$81			ldx 	#$81
.aad3	b0 14		bcs $aae9			bcs 	_TKFoundToken
.aad5	a0 a8		ldy #$a8			ldy 	#(KeywordSet2) >> 8
.aad7	a9 97		lda #$97			lda 	#(KeywordSet2) & $FF
.aad9	20 26 a6	jsr $a626			jsr 	TokeniseSearchTable
.aadc	a2 82		ldx #$82			ldx 	#$82
.aade	b0 09		bcs $aae9			bcs 	_TKFoundToken
.aae0	20 e6 ab	jsr $abe6			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.aae3	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aae6	4c 08 aa	jmp $aa08			jmp 	_TKTokeniseLoop 			; and go round again.
.aae9					_TKFoundToken:
.aae9	48		pha				pha 								; save token
.aaea	8a		txa				txa 								; shift in X, is there one ?
.aaeb	f0 03		beq $aaf0			beq 	_TKNoTShift
.aaed	20 da ab	jsr $abda			jsr 	TokeniseWriteByte 			; if so, write it out
.aaf0					_TKNoTShift:
.aaf0	68		pla				pla 								; restore and write token
.aaf1	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.aaf4	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aaf7	4c 08 aa	jmp $aa08			jmp 	_TKTokeniseLoop 			; and go round again.
.aafa					TokeniseString:
.aafa	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.aafc	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.aaff	e8		inx				inx									; start of quoted string.
.ab00	da		phx				phx 								; push start of string on top
.ab01	ca		dex				dex
.ab02					_TSFindEnd:
.ab02	e8		inx				inx
.ab03	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.ab06	f0 04		beq $ab0c			beq 	_TSEndOfString
.ab08	c9 22		cmp #$22			cmp 	#'"'
.ab0a	d0 f6		bne $ab02			bne 	_TSFindEnd
.ab0c					_TSEndOfString:
.ab0c	7a		ply				ply  								; so now Y is first character, X is character after end.
.ab0d	48		pha				pha 								; save terminating character
.ab0e	20 16 ab	jsr $ab16			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ab11	68		pla				pla 								; terminating character
.ab12	f0 01		beq $ab15			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ab14	e8		inx				inx
.ab15					_TSNotQuote:
.ab15	60		rts				rts
.ab16					TOWriteBlockXY:
.ab16	86 36		stx $36				stx 	zTemp0 						; write end character
.ab18	98		tya				tya
.ab19	49 ff		eor #$ff			eor 	#$FF
.ab1b	38		sec				sec
.ab1c	65 36		adc $36				adc 	zTemp0
.ab1e	1a		inc a				inc 	a 							; one extra for NULL
.ab1f	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.ab22					_TOBlockLoop:
.ab22	c4 36		cpy $36				cpy 	zTemp0
.ab24	f0 09		beq $ab2f			beq 	_TOBlockExit
.ab26	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.ab29	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.ab2c	c8		iny				iny
.ab2d	80 f3		bra $ab22			bra 	_TOBlockLoop
.ab2f					_TOBlockExit:
.ab2f	a9 00		lda #$00			lda 	#0
.ab31	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.ab34	60		rts				rts
.ab35					TokeniseHexConstant:
.ab35	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ab37	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.ab3a	e8		inx				inx									; start of quoted string.
.ab3b	da		phx				phx 								; push start of constant on top
.ab3c	ca		dex				dex
.ab3d					_THFindLoop:
.ab3d	e8		inx				inx
.ab3e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab41	c9 30		cmp #$30			cmp 	#"0"
.ab43	90 0c		bcc $ab51			bcc 	_THFoundEnd
.ab45	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab47	90 f4		bcc $ab3d			bcc 	_THFindLoop
.ab49	c9 41		cmp #$41			cmp 	#"A"
.ab4b	90 04		bcc $ab51			bcc 	_THFoundEnd
.ab4d	c9 47		cmp #$47			cmp 	#"F"+1
.ab4f	90 ec		bcc $ab3d			bcc 	_THFindLoop
.ab51					_THFoundEnd:
.ab51	7a		ply				ply 								; restore start
.ab52	20 16 ab	jsr $ab16			jsr 	TOWriteBlockXY 				; output the block
.ab55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ab56					TokeniseCalculateHash:
.ab56	da		phx				phx
.ab57	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ab5a	a9 00		lda #$00			lda 	#0
.ab5c					_TCHLoop:
.ab5c	18		clc				clc
.ab5d	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.ab60	e8		inx				inx
.ab61	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ab64	d0 f6		bne $ab5c			bne 	_TCHLoop
.ab66	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ab69	fa		plx				plx
.ab6a	60		rts				rts
.ab6b					FixLineBufferCase:
.ab6b	a2 00		ldx #$00			ldx 	#0
.ab6d					_FLBCLoop:
.ab6d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ab70	f0 22		beq $ab94			beq 	_FLBCExit 					; end of string.
.ab72	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ab74	f0 11		beq $ab87			beq 	_FLBCInQuotes
.ab76	e8		inx				inx
.ab77	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ab79	90 f2		bcc $ab6d			bcc 	_FLBCLoop
.ab7b	c9 7b		cmp #$7b			cmp 	#'z'+1
.ab7d	b0 ee		bcs $ab6d			bcs 	_FLBCLoop
.ab7f	38		sec				sec 								; make U/C
.ab80	e9 20		sbc #$20			sbc 	#32
.ab82	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ab85	80 e6		bra $ab6d			bra 	_FLBCLoop
.ab87					_FLBCInQuotes:
.ab87	e8		inx				inx 								; advance
.ab88	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ab8b	f0 07		beq $ab94			beq 	_FLBCExit 					; exit on EOS
.ab8d	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ab8f	d0 f6		bne $ab87			bne 	_FLBCInQuotes
.ab91	e8		inx				inx 								; skip over it
.ab92	80 d9		bra $ab6d			bra 	_FLBCLoop
.ab94					_FLBCExit:
.ab94	60		rts				rts
.ab95					TokeniseExtractLineNumber:
.ab95	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.ab98	48		pha				pha
.ab99	ad a7 04	lda $04a7			lda 	tokenLineNumber
.ab9c	48		pha				pha
.ab9d	20 d3 ab	jsr $abd3			jsr 	_TELNTimes2 				; line # x 4
.aba0	20 d3 ab	jsr $abd3			jsr 	_TELNTimes2 				; line # x 2
.aba3	18		clc				clc 								; add stacked value
.aba4	68		pla				pla
.aba5	6d a7 04	adc $04a7			adc 	tokenLineNumber
.aba8	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abab	68		pla				pla
.abac	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.abaf	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.abb2	20 d3 ab	jsr $abd3			jsr 	_TELNTimes2 				; line # x 10
.abb5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.abb8	e8		inx				inx
.abb9	29 0f		and #$0f			and 	#15 						; add to line #
.abbb	18		clc				clc
.abbc	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abbf	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abc2	90 03		bcc $abc7			bcc 	_TLENNoCarry
.abc4	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.abc7					_TLENNoCarry:
.abc7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.abca	c9 30		cmp #$30			cmp 	#'0'
.abcc	90 04		bcc $abd2			bcc 	_TLENExit
.abce	c9 3a		cmp #$3a			cmp 	#'9'+1
.abd0	90 c3		bcc $ab95			bcc 	TokeniseExtractLineNumber
.abd2					_TLENExit:
.abd2	60		rts				rts
.abd3					_TELNTimes2:
.abd3	0e a7 04	asl $04a7			asl 	tokenLineNumber
.abd6	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.abd9	60		rts				rts
.abda					TokeniseWriteByte:
.abda	da		phx				phx
.abdb	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.abde	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.abe1	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.abe4	fa		plx				plx
.abe5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.abe6					CheckCreateVariableRecord:
.abe6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.abe8	85 36		sta $36				sta 	0+zTemp0
.abea	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.abec	85 37		sta $37				sta 	1+zTemp0
.abee					_CCVSearch:
.abee	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.abf0	f0 2c		beq $ac1e			beq 	_CCVFail
.abf2	a0 01		ldy #$01			ldy 	#1 							; read the hash
.abf4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.abf6	cd 83 04	cmp $0483			cmp 	identHash
.abf9	d0 16		bne $ac11			bne 	_CCVNext
.abfb	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.abfd	ae 80 04	ldx $0480			ldx 	identStart
.ac00					_CCVCompare:
.ac00	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ac03	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ac05	e8		inx				inx 								; advance pointers
.ac06	c8		iny				iny
.ac07	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ac08	d0 07		bne $ac11			bne 	_CCVNext  					; didn't match go to next.
.ac0a	90 f4		bcc $ac00			bcc 	_CCVCompare 				; not finished yet.
.ac0c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ac0f	f0 41		beq $ac52			beq 	_CCVFound 					; yes, we were successful
.ac11					_CCVNext:
.ac11	18		clc				clc
.ac12	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ac14	65 36		adc $36				adc 	zTemp0
.ac16	85 36		sta $36				sta 	zTemp0
.ac18	90 d4		bcc $abee			bcc 	_CCVSearch
.ac1a	e6 37		inc $37				inc 	zTemp0+1
.ac1c	80 d0		bra $abee			bra 	_CCVSearch
.ac1e					_CCVFail:
.ac1e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ac20	ad 83 04	lda $0483			lda 	identHash
.ac23	91 36		sta ($36),y			sta 	(zTemp0),y
.ac25	c8		iny				iny 								; offset 2 is the type byte
.ac26	ad 84 04	lda $0484			lda 	identTypeByte
.ac29	91 36		sta ($36),y			sta 	(zTemp0),y
.ac2b	c8		iny				iny
.ac2c					_CCVData:
.ac2c	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ac2e	91 36		sta ($36),y			sta 	(zTemp0),y
.ac30	c8		iny				iny
.ac31	c0 08		cpy #$08			cpy 	#8
.ac33	90 f7		bcc $ac2c			bcc 	_CCVData
.ac35	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ac38					_CCVCopyName:
.ac38	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ac3b	91 36		sta ($36),y			sta 	(zTemp0),y
.ac3d	e8		inx				inx
.ac3e	c8		iny				iny
.ac3f	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ac42	d0 f4		bne $ac38			bne 	_CCVCopyName
.ac44	98		tya				tya 								; patch offset
.ac45	92 36		sta ($36)			sta 	(zTemp0)
.ac47	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ac49	91 36		sta ($36),y			sta 	(zTemp0),y
.ac4b	88		dey				dey
.ac4c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ac4e	09 80		ora #$80			ora 	#$80
.ac50	91 36		sta ($36),y			sta 	(zTemp0),y
.ac52					_CCVFound:
.ac52	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ac54	38		sec				sec
.ac55	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ac57	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ac59	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.ac5c	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ac5e	20 da ab	jsr $abda			jsr 	TokeniseWriteByte
.ac61	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
