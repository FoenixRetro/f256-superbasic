
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=1 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$3000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Nov 21 07:24:27 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1
=$e000					 MONITOR_ADDRESS=$E000
=$f000					 LOCKOUT_ADDRESS=$F000
=$38000					 BASIC_ADDRESS=$38000
=$3000					 SOURCE_ADDRESS=$3000
=$30000					 SPRITE_ADDRESS=$30000

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_PLAYINGLPAREN                    = $96; $96 PLAYING(
=$97					KWD_RANDOMLPAREN                     = $97; $97 RANDOM(
=$98					KWD_RIGHTDOLLARLPAREN                = $98; $98 RIGHT$(
=$99					KWD_RNDLPAREN                        = $99; $99 RND(
=$9a					KWD_SGNLPAREN                        = $9a; $9a SGN(
=$9b					KWD_SPCLPAREN                        = $9b; $9b SPC(
=$9c					KWD_STRDOLLARLPAREN                  = $9c; $9c STR$(
=$9d					KWD_TIMERLPAREN                      = $9d; $9d TIMER(
=$9e					KWD_TRUE                             = $9e; $9e TRUE
=$9f					KWD_VALLPAREN                        = $9f; $9f VAL(
=$a0					KWD_FOR                              = $a0; $a0 FOR
=$a1					KWD_IF                               = $a1; $a1 IF
=$a2					KWD_PROC                             = $a2; $a2 PROC
=$a3					KWD_REPEAT                           = $a3; $a3 REPEAT
=$a4					KWD_WHILE                            = $a4; $a4 WHILE
=$a5					KWD_ENDIF                            = $a5; $a5 ENDIF
=$a6					KWD_ENDPROC                          = $a6; $a6 ENDPROC
=$a7					KWD_NEXT                             = $a7; $a7 NEXT
=$a8					KWD_THEN                             = $a8; $a8 THEN
=$a9					KWD_UNTIL                            = $a9; $a9 UNTIL
=$aa					KWD_WEND                             = $aa; $aa WEND
=$ab					KWD_BY                               = $ab; $ab BY
=$ac					KWD_CALL                             = $ac; $ac CALL
=$ad					KWD_CIRCLE                           = $ad; $ad CIRCLE
=$ae					KWD_CLEAR                            = $ae; $ae CLEAR
=$af					KWD_CLS                              = $af; $af CLS
=$b0					KWD_COLOR                            = $b0; $b0 COLOR
=$b1					KWD_COLOUR                           = $b1; $b1 COLOUR
=$b2					KWD_DATA                             = $b2; $b2 DATA
=$b3					KWD_DIM                              = $b3; $b3 DIM
=$b4					KWD_DOWNTO                           = $b4; $b4 DOWNTO
=$b5					KWD_ELSE                             = $b5; $b5 ELSE
=$b6					KWD_FROM                             = $b6; $b6 FROM
=$b7					KWD_GFX                              = $b7; $b7 GFX
=$b8					KWD_GOSUB                            = $b8; $b8 GOSUB
=$b9					KWD_GOTO                             = $b9; $b9 GOTO
=$ba					KWD_HERE                             = $ba; $ba HERE
=$bb					KWD_IMAGE                            = $bb; $bb IMAGE
=$bc					KWD_LET                              = $bc; $bc LET
=$bd					KWD_LINE                             = $bd; $bd LINE
=$be					KWD_LOCAL                            = $be; $be LOCAL
=$bf					KWD_OFF                              = $bf; $bf OFF
=$c0					KWD_ON                               = $c0; $c0 ON
=$c1					KWD_OUTLINE                          = $c1; $c1 OUTLINE
=$c2					KWD_PALETTE                          = $c2; $c2 PALETTE
=$c3					KWD_PLOT                             = $c3; $c3 PLOT
=$c4					KWD_PRINT                            = $c4; $c4 PRINT
=$c5					KWD_READ                             = $c5; $c5 READ
=$c6					KWD_RECT                             = $c6; $c6 RECT
=$c7					KWD_REM                              = $c7; $c7 REM
=$c8					KWD_RETURN                           = $c8; $c8 RETURN
=$c9					KWD_SOLID                            = $c9; $c9 SOLID
=$ca					KWD_SOUND                            = $ca; $ca SOUND
=$cb					KWD_SPRITE                           = $cb; $cb SPRITE
=$cc					KWD_TEXT                             = $cc; $cc TEXT
=$cd					KWD_TO                               = $cd; $cd TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$a0					KWC_FIRST_STRUCTURE = $a0
=$a5					KWC_FIRST_STRUCTURE_DEC = $a5
=$aa					KWC_LAST_STRUCTURE = $aa
=$83					KWC_FIRST_UNARY = $83
=$9f					KWC_LAST_UNARY = $9f

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 a8 a9	jsr $a9a8			jsr 	EXTInitialise 				; hardware initialise
.8006	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8008	a9 22		lda #$22			lda 	#(Prompt & $FF)
.800a	20 9c 8d	jsr $8d9c			jsr 	PrintStringXA
.800d	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.800f	aa		tax				tax
.8010	a8		tay				tay
.8011	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.8014	a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8016	20 bf b7	jsr $b7bf			jsr 	SNDCommand
.8019	20 40 88	jsr $8840			jsr 	NewProgram 					; erase current program
.801c	20 e3 82	jsr $82e3			jsr 	BackloadProgram
.801f	4c df 89	jmp $89df			jmp 	CommandRun
>8022	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>802a	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>803a	53 49 43 20 2a 2a 2a 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8043	42 75 69 6c 74 20 4d 6f			.text "Built Monday 21-Nov-2022. Build 3398."
>804b	6e 64 61 79 20 32 31 2d 4e 6f 76 2d 32 30 32 32
>805b	2e 20 42 75 69 6c 64 20 33 33 39 38 2e

;******  Return to file: ./common/aa.system/00start.asm

>8068	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.806b					AssembleGroup1:
.806b	a9 ff		lda #$ff			lda 	#$FF
.806d	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8070	80 02		bra $8074			bra 	AsmGroup12
.8072					AssembleGroup2:
.8072	a9 00		lda #$00			lda 	#$00
.8074					AsmGroup12:
.8074	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8077	68		pla				pla 								; pop the return address to access the information following.
.8078	fa		plx				plx
.8079	20 02 81	jsr $8102			jsr 	AccessParameters 			; get opcode and save as base
.807c	8d a4 04	sta $04a4			sta 	BaseOpcode
.807f	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8082	d0 08		bne $808c			bne 	_AG12HaveMask
.8084	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8086	20 0a 81	jsr $810a			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8089	8d a5 04	sta $04a5			sta 	ModeMask
.808c					_AG12HaveMask:
.808c	20 45 82	jsr $8245			jsr 	TypeAndCalculateOperand 	; get zero page type
.808f	da		phx				phx 								; save found address mode
.8090	20 6e 81	jsr $816e			jsr 	AssembleModeX
.8093	fa		plx				plx  								; restore address mode
.8094	b0 0b		bcs $80a1			bcs 	_AG12Exit
.8096	20 a2 80	jsr $80a2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8099	20 6e 81	jsr $816e			jsr 	AssembleModeX
.809c	b0 03		bcs $80a1			bcs 	_AG12Exit
.809e	4c 90 9f	jmp $9f90			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80a1					_AG12Exit:
.80a1	60		rts				rts
.80a2					PromoteToAbsolute:
.80a2	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80a4	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80a6	f0 19		beq $80c1			beq 	_PTADo
.80a8	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80aa	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80ac	f0 13		beq $80c1			beq 	_PTADo
.80ae	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80b0	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80b2	f0 0d		beq $80c1			beq 	_PTADo
.80b4	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80b6	e0 d1		cpx #$d1			cpx 	#AM_IND
.80b8	f0 07		beq $80c1			beq 	_PTADo
.80ba	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80bc	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80be	f0 01		beq $80c1			beq 	_PTADo
.80c0	60		rts				rts
.80c1					_PTADo:
.80c1	aa		tax				tax
.80c2	60		rts				rts
.80c3					AssembleGroup3:
.80c3	68		pla				pla 								; get parameters, which is just the opcode.
.80c4	fa		plx				plx
.80c5	20 02 81	jsr $8102			jsr 	AccessParameters 			; get and output opcode
.80c8	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.80cb	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get a 16 bit operand
.80ce	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80d1	38		sec				sec
.80d2	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80d5	48		pha				pha 								; LSB in A
.80d6	ad 10 04	lda $0410			lda 	NSMantissa1
.80d9	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80dc	aa		tax				tax 								; MSB in X
.80dd	68		pla				pla
.80de	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80df	69 7f		adc #$7f			adc 	#$7F
.80e1	90 01		bcc $80e4			bcc 	_AG3NoCarry
.80e3	e8		inx				inx
.80e4					_AG3NoCarry:
.80e4	38		sec				sec 								; fix back and write out anyways.
.80e5	e9 80		sbc #$80			sbc 	#$80
.80e7	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.80ea	e0 00		cpx #$00			cpx 	#0 							; was it in range
.80ec	f0 0a		beq $80f8			beq 	_AG3Exit
.80ee	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.80f1	29 01		and #$01			and 	#1
.80f3	f0 03		beq $80f8			beq 	_AG3Exit
.80f5	4c 95 9f	jmp $9f95			jmp 	RangeError 					; no, branch is out of range
.80f8					_AG3Exit:
.80f8	60		rts				rts
.80f9					AssembleGroup4:
.80f9	68		pla				pla 								; pop address
.80fa	fa		plx				plx
.80fb	20 02 81	jsr $8102			jsr 	AccessParameters 			; access and get first
.80fe	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte 			; output it.
.8101	60		rts				rts
.8102					AccessParameters:
.8102	8d a1 04	sta $04a1			sta 	ParamStart
.8105	8e a2 04	stx $04a2			stx 	ParamStart+1
.8108	a9 01		lda #$01			lda 	#1
.810a					GetParameter:
.810a	5a		phy				phy
.810b	a8		tay				tay
.810c	ad a1 04	lda $04a1			lda 	ParamStart
.810f	85 36		sta $36				sta 	zTemp0
.8111	ad a2 04	lda $04a2			lda 	ParamStart+1
.8114	85 37		sta $37				sta 	zTemp0+1
.8116	b1 36		lda ($36),y			lda 	(zTemp0),y
.8118	7a		ply				ply
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.811a					AssemblerWriteByte:
.811a	48		pha			pha
.811b	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.811e	29 02		and #$02		and 	#2
.8120	f0 1b		beq $813d		beq 	_AWBNoPrint
.8122	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8125	20 58 81	jsr $8158		jsr 	PrintHex
.8128	ad 9e 04	lda $049e		lda		AssemblerAddress
.812b	20 58 81	jsr $8158		jsr 	PrintHex
.812e	a9 20		lda #$20		lda 	#' '
.8130	20 34 a7	jsr $a734		jsr 	EXTPrintCharacter
.8133	68		pla			pla 									; print byte
.8134	48		pha			pha
.8135	20 58 81	jsr $8158		jsr 	PrintHex
.8138	a9 0d		lda #$0d		lda 	#13
.813a	20 34 a7	jsr $a734		jsr 	EXTPrintCharacter
.813d					_AWBNoPrint:
.813d	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8140	85 36		sta $36			sta 	zTemp0
.8142	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8145	f0 0e		beq $8155		beq 	_AWBRange
.8147	85 37		sta $37			sta 	zTemp0+1
.8149	68		pla			pla 									; write byte out
.814a	92 36		sta ($36)		sta 	(zTemp0)
.814c	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.814f	d0 03		bne $8154		bne 	_AWBNoCarry
.8151	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8154					_AWBNoCarry:
.8154	60		rts			rts
.8155					_AWBRange:
.8155	4c 95 9f	jmp $9f95		jmp 	RangeError
.8158					PrintHex:
.8158	48		pha				pha
.8159	4a		lsr a				lsr 	a
.815a	4a		lsr a				lsr 	a
.815b	4a		lsr a				lsr 	a
.815c	4a		lsr a				lsr 	a
.815d	20 61 81	jsr $8161			jsr 	_PrintNibble
.8160	68		pla				pla
.8161					_PrintNibble:
.8161	29 0f		and #$0f			and 	#15
.8163	c9 0a		cmp #$0a			cmp 	#10
.8165	90 02		bcc $8169			bcc 	_NoShift
.8167	69 06		adc #$06			adc 	#6
.8169					_NoShift:
.8169	69 30		adc #$30			adc 	#48
.816b	4c 34 a7	jmp $a734			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.816e					AssembleModeX:
.816e	5a		phy				phy
.816f	ad a3 04	lda $04a3			lda 	IsGroup1
.8172	f0 17		beq $818b			beq 	_AMXGroup2
.8174	8a		txa				txa 							; is it in group # 1
.8175	29 40		and #$40			and 	#AM_ISG1
.8177	f0 50		beq $81c9			beq 	_AMXFail 				; no, give up.
.8179	8a		txa				txa 							; get back.
.817a	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.817c	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.817e	d0 22		bne $81a2			bne 	_AMXHaveInfo
.8180	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8183	c9 81		cmp #$81			cmp 	#$81
.8185	f0 42		beq $81c9			beq 	_AMXFail
.8187	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8189	80 17		bra $81a2			bra 	_AMXHaveInfo 			; odd design decision there.
.818b					_AMXGroup2:
.818b	8a		txa				txa 							; is it in group 2 ?
.818c	29 20		and #$20			and 	#AM_ISG2
.818e	f0 39		beq $81c9			beq 	_AMXFail 				; no, give up.
.8190	8a		txa				txa 							; get the offset into Y
.8191	29 1f		and #$1f			and 	#$1F
.8193	4a		lsr a				lsr 	a 						; make it 0-7.
.8194	4a		lsr a				lsr  	a
.8195	a8		tay				tay
.8196	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8199					_AMXCheckOkay:
.8199	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.819a	88		dey				dey
.819b	10 fc		bpl $8199			bpl 	_AMXCheckOkay
.819d	90 2a		bcc $81c9			bcc 	_AMXFail 				; not allowed.
.819f	8a		txa				txa  							; get mask back
.81a0	29 1f		and #$1f			and 	#$1F
.81a2					_AMXHaveInfo:
.81a2	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81a4	10 05		bpl $81ab			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81a6	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81a9	d0 1e		bne $81c9			bne 	_AMXFail
.81ab					_AMXAnySize:
.81ab	18		clc				clc 							; add offset to the base opcode
.81ac	6d a4 04	adc $04a4			adc 	BaseOpcode
.81af					_AMXOutputCode:
.81af	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte 		; write the opcode out.
.81b2	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81b4	f0 10		beq $81c6			beq 	_AMXExit
.81b6	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81b9	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.81bc	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81be	30 06		bmi $81c6			bmi 	_AMXExit
.81c0	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81c3	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.81c6					_AMXExit:
.81c6	7a		ply				ply
.81c7	38		sec				sec
.81c8	60		rts				rts
.81c9					_AMXFail:
.81c9	a0 00		ldy #$00			ldy 	#0
.81cb					_AMXCheckOddities:
.81cb	8a		txa				txa
.81cc	d9 f4 81	cmp $81f4,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81cf	d0 16		bne $81e7			bne 	_AMXCONext
.81d1	b9 f2 81	lda $81f2,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81d4	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81d7	d0 0e		bne $81e7			bne 	_AMXCONext
.81d9	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81db	10 05		bpl $81e2			bpl 	_AMXCONotZero
.81dd	ad 10 04	lda $0410			lda 	NSMantissa1
.81e0	d0 05		bne $81e7			bne 	_AMXCONext
.81e2					_AMXCONotZero:
.81e2	b9 f3 81	lda $81f3,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81e5	80 c8		bra $81af			bra 	_AMXOutputCode 			; and assemble it
.81e7					_AMXCONext:
.81e7	c8		iny				iny
.81e8	c8		iny				iny
.81e9	c8		iny				iny
.81ea	b9 f2 81	lda $81f2,y			lda 	ExtraOpcode+0,y 		; end of table
.81ed	d0 dc		bne $81cb			bne 	_AMXCheckOddities
.81ef					_AMXCOFail:
.81ef	7a		ply				ply
.81f0	18		clc				clc
.81f1	60		rts				rts
.81f2					ExtraOpcode:
>81f2	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>81f5	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>81f8	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>81fb	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>81fe	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8201	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8204	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8207	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>820a	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>820d	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8210	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8211					LabelHere:
.8211	c8		iny				iny 								; skip .
.8212	a2 00		ldx #$00			ldx 	#0 							; get a term
.8214	20 cc 97	jsr $97cc			jsr 	EvaluateTerm 				; get a term
.8217	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.821a	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.821c	d0 24		bne $8242			bne 	_ALType
.821e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8221	85 36		sta $36				sta 	zTemp0
.8223	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8226	85 37		sta $37				sta 	zTemp0+1
.8228	5a		phy				phy 								; copy address in.
.8229	a0 01		ldy #$01			ldy 	#1
.822b	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.822e	92 36		sta ($36)			sta 	(zTemp0)
.8230	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8233	91 36		sta ($36),y			sta 	(zTemp0),y
.8235	c8		iny				iny
.8236	a9 00		lda #$00			lda 	#0
.8238	91 36		sta ($36),y			sta 	(zTemp0),y
.823a	c8		iny				iny
.823b	91 36		sta ($36),y			sta 	(zTemp0),y
.823d	c8		iny				iny
.823e	91 36		sta ($36),y			sta 	(zTemp0),y
.8240	7a		ply				ply
.8241	60		rts				rts
.8242					_ALType:
.8242	4c 9a 9f	jmp $9f9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8245					TypeAndCalculateOperand:
.8245	b1 30		lda ($30),y			lda 	(codePtr),y
.8247	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8249	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.824b	f0 5b		beq $82a8			beq 	_TACOExit
.824d	c9 80		cmp #$80			cmp 	#KWC_EOL
.824f	f0 57		beq $82a8			beq 	_TACOExit
.8251	c8		iny				iny
.8252	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8254	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8256	f0 51		beq $82a9			beq 	CalculateOperand
.8258	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.825a	f0 1f		beq $827b			beq 	_TACOIndirect
.825c	88		dey				dey 								; undo get of first character
.825d	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get operand
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8264	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8266	d0 40		bne $82a8			bne 	_TACOExit
.8268	c8		iny				iny
.8269	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.826c	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.826e	c9 58		cmp #$58			cmp 	#'X'
.8270	f0 36		beq $82a8			beq 	_TACOExit
.8272	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8274	c9 59		cmp #$59			cmp 	#'Y'
.8276	f0 30		beq $82a8			beq 	_TACOExit
.8278					_TACOSyntax:
.8278	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.827b					_TACOIndirect:
.827b	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get the operand
.827e	b1 30		lda ($30),y			lda 	(codePtr),y
.8280	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8282	f0 17		beq $829b			beq 	_TACOIndX
.8284	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8287	b1 30		lda ($30),y			lda 	(codePtr),y
.8289	a2 d1		ldx #$d1			ldx 	#AM_IND
.828b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.828d	d0 19		bne $82a8			bne 	_TACOExit
.828f	c8		iny				iny
.8290	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8293	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8295	d0 e1		bne $8278			bne 	_TACOSyntax
.8297	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8299	80 0d		bra $82a8			bra 	_TACOExit
.829b					_TACOIndX:
.829b	c8		iny				iny
.829c	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.829f	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82a1	d0 d5		bne $8278			bne 	_TACOSyntax
.82a3	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket			; check )
.82a6	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82a8					_TACOExit:
.82a8	60		rts				rts
.82a9					CalculateOperand:
.82a9	48		pha				pha
.82aa	da		phx				phx
.82ab	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82ad	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.82b0	fa		plx				plx
.82b1	68		pla				pla
.82b2	60		rts				rts
.82b3					TACOCheckXY:
.82b3	b1 30		lda ($30),y			lda 	(codePtr),y
.82b5	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82b7	c9 40		cmp #$40			cmp 	#$40
.82b9	d0 21		bne $82dc			bne 	_TCXYFail
.82bb	b1 30		lda ($30),y			lda 	(codePtr),y
.82bd	18		clc				clc
.82be	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82c0	85 37		sta $37				sta 	zTemp0+1
.82c2	c8		iny				iny
.82c3	b1 30		lda ($30),y			lda 	(codePtr),y
.82c5	c8		iny				iny
.82c6	85 36		sta $36				sta 	zTemp0
.82c8	5a		phy				phy 								; save position
.82c9	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.82cd	d0 0c		bne $82db			bne 	_TCXYPopFail
.82cf	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.82d3	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82d5	f0 08		beq $82df			beq 	_TCXYFound
.82d7	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82d9	f0 04		beq $82df			beq 	_TCXYFound
.82db					_TCXYPopFail:
.82db	7a		ply				ply
.82dc					_TCXYFail:
.82dc	a9 00		lda #$00			lda 	#0
.82de	60		rts				rts
.82df					_TCXYFound:
.82df	7a		ply				ply 								; restore position
.82e0	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82e3					BackloadProgram:
.82e3	a2 ff		ldx #$ff			ldx 	#$FF
.82e5	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.82e8	20 12 83	jsr $8312			jsr 	BLReadByte
.82eb	30 1e		bmi $830b			bmi 	_BPExit
.82ed					_BPCopy:
.82ed	e8		inx				inx  								; copy byte in
.82ee	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.82f1	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.82f4	20 12 83	jsr $8312			jsr 	BLReadByte 					; read next byte
.82f7	30 0a		bmi $8303			bmi 	_BPEndLine 					; -ve = EOL
.82f9	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.82fb	d0 02		bne $82ff			bne 	_BPNotTab
.82fd	a9 20		lda #$20			lda 	#' '
.82ff					_BPNotTab:
.82ff	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8301	b0 ea		bcs $82ed			bcs 	_BPCopy
.8303					_BPEndLine:
.8303	20 3e b5	jsr $b53e			jsr 	TokeniseLine 				; tokenise the line.
.8306	20 20 83	jsr $8320			jsr 	EditProgramCode
.8309	80 d8		bra $82e3			bra 	BackloadProgram
.830b					_BPExit:
.830b	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.830e	20 de 83	jsr $83de			jsr 	ClearCommand 				; clear variables etc.
.8311	60		rts				rts
.8312					BLReadByte:
.8312					_BLLoad:
.8312	ad 00 30	lda $3000			lda 	SOURCE_ADDRESS
.8315	ee 13 83	inc $8313			inc 	_BLLoad+1
.8318	d0 03		bne $831d			bne 	_BLNoCarry
.831a	ee 14 83	inc $8314			inc 	_BLLoad+2
.831d					_BLNoCarry:
.831d	c9 00		cmp #$00			cmp 	#0
.831f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8320					EditProgramCode:
.8320	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.8323	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.8326	20 13 a2	jsr $a213			jsr 	MemorySearch
.8329	90 05		bcc $8330			bcc 	_EPCNoDelete 				; reached the end don't delete
.832b	d0 03		bne $8330			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.832d	20 34 a1	jsr $a134			jsr 	MemoryDeleteLine 			; delete the line
.8330					_EPCNoDelete:
.8330	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.8333	c9 80		cmp #$80			cmp 	#KWC_EOL
.8335	f0 0d		beq $8344			beq 	_EPCNoInsert
.8337	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.833a	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.833d	20 13 a2	jsr $a213			jsr 	MemorySearch
.8340	18		clc				clc 								; insert at this point.
.8341	20 6b a1	jsr $a16b			jsr 	MemoryInsertLine 			; insert the line
.8344					_EPCNoInsert:
.8344	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8345					WarmStart:
.8345	a2 ff		ldx #$ff			ldx 	#$FF
.8347	9a		txs				txs
.8348	20 c2 a8	jsr $a8c2			jsr 	EXTInputLine 				; get line to lineBuffer
.834b	20 3e b5	jsr $b53e			jsr 	TokeniseLine 				; tokenise the line
.834e	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.8351	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.8354	d0 17		bne $836d			bne 	_WSEditCode 				; if so,edit code.
.8356	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8359	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.835b	85 30		sta $30				sta 	codePtr
.835d	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.835f	85 31		sta $31				sta 	codePtr+1
.8361	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.8364	c9 80		cmp #$80			cmp 	#KWC_EOL
.8366	f0 dd		beq $8345			beq 	WarmStart
.8368	20 f1 89	jsr $89f1			jsr 	RUNCodePointerLine 			; execute that line.
.836b	80 d8		bra $8345			bra 	WarmStart
.836d					_WSEditCode:
.836d	20 20 83	jsr $8320			jsr 	EditProgramCode
.8370	20 de 83	jsr $83de			jsr 	ClearCommand
.8373	80 d0		bra $8345			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8375					AssembleCommand:
.8375	a2 00		ldx #$00			ldx 	#0
.8377	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger 		; start address
.837a	ad 08 04	lda $0408			lda 	NSMantissa0
.837d	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8380	ad 10 04	lda $0410			lda 	NSMantissa1
.8383	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8386	20 32 8d	jsr $8d32			jsr 	CheckComma
.8389	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; options
.838c	ad 08 04	lda $0408			lda 	NSMantissa0
.838f	8d a0 04	sta $04a0			sta 	AssemblerControl
.8392	60		rts				rts
.8393	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8394					AssertCommand:
.8394	a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8396	20 52 9d	jsr $9d52			jsr 	EvaluateInteger 			; the assert test
.8399	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; exit if result is non zero.
.839c	d0 05		bne $83a3			bne 	_ACExit
.839e	a9 0a		lda #$0a		lda	#10
.83a0	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.83a3					_ACExit:
.83a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83a4					CallCommand:
.83a4	a2 00		ldx #$00			ldx 	#0
.83a6	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.83a9					_CCClear
.83a9	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83aa	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.83ad	e0 04		cpx #$04			cpx 	#4
.83af	d0 f8		bne $83a9			bne 	_CCClear
.83b1	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83b3					_CCCParam:
.83b3	b1 30		lda ($30),y			lda 	(codePtr),y
.83b5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83b7	d0 09		bne $83c2			bne 	_CCCRun6502
.83b9	c8		iny				iny 								; skip comma
.83ba	e8		inx				inx	 								; next level
.83bb	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83be	e0 03		cpx #$03			cpx 	#3
.83c0	90 f1		bcc $83b3			bcc 	_CCCParam 					; done all 3 ?
.83c2					_CCCRun6502:
.83c2	5a		phy				phy 								; save position
.83c3	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83c6	85 37		sta $37				sta 	zTemp0+1
.83c8	ad 08 04	lda $0408			lda 	NSMantissa0
.83cb	85 36		sta $36				sta 	zTemp0
.83cd	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83d0	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83d3	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83d6	20 db 83	jsr $83db			jsr 	_CCCZTemp0 					; call zTemp0
.83d9	7a		ply				ply 								; restore position and exit
.83da	60		rts				rts
.83db					_CCCZTemp0:
.83db	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83de					ClearCommand:
.83de	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83e0	85 36		sta $36				sta 	0+zTemp0
.83e2	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83e4	85 37		sta $37				sta 	1+zTemp0
.83e6					_ClearZeroLoop:
.83e6	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83e8	f0 24		beq $840e			beq 	_ClearZeroEnd
.83ea	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.83ec	a9 00		lda #$00			lda 	#0
.83ee					_ClearOneVariable:
.83ee	91 36		sta ($36),y			sta 	(zTemp0),y
.83f0	c8		iny				iny
.83f1	c0 08		cpy #$08			cpy 	#8
.83f3	d0 f9		bne $83ee			bne 	_ClearOneVariable
.83f5	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.83f7	b1 36		lda ($36),y			lda 	(zTemp0),y
.83f9	c9 18		cmp #$18			cmp 	#NSTProcedure
.83fb	d0 04		bne $8401			bne 	_ClearNotProcedure
.83fd	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.83ff	91 36		sta ($36),y			sta 	(zTemp0),y
.8401					_ClearNotProcedure:
.8401	18		clc				clc 								; go to the next variable
.8402	b2 36		lda ($36)			lda 	(zTemp0)
.8404	65 36		adc $36				adc 	zTemp0
.8406	85 36		sta $36				sta 	zTemp0
.8408	90 dc		bcc $83e6			bcc 	_ClearZeroLoop
.840a	e6 37		inc $37				inc 	zTemp0+1
.840c	80 d8		bra $83e6			bra 	_ClearZeroLoop
.840e					_ClearZeroEnd:
.840e	18		clc				clc
.840f	a5 36		lda $36				lda 	zTemp0
.8411	69 01		adc #$01			adc 	#1
.8413	8d 8c 04	sta $048c			sta 	lowMemPtr
.8416	a5 37		lda $37				lda 	zTemp0+1
.8418	69 00		adc #$00			adc 	#0
.841a	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.841d	20 59 a6	jsr $a659			jsr 	StackReset
.8420	20 c3 a6	jsr $a6c3			jsr 	StringSystemInitialise
.8423	20 33 8c	jsr $8c33			jsr 	ProcedureScan
.8426	20 ad 89	jsr $89ad			jsr 	Command_Restore
.8429	9c 9e 04	stz $049e			stz 	AssemblerAddress
.842c	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.842f	9c a0 04	stz $04a0			stz 	AssemblerControl
.8432	20 cf 99	jsr $99cf			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8435	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8436					ClearScreen:
.8436	5a		phy				phy
.8437	a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8439	20 34 a7	jsr $a734			jsr 	EXTPrintCharacter
.843c	7a		ply				ply
.843d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.843e					Command_Data:
.843e	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8440	a2 80		ldx #$80			ldx 	#KWC_EOL
.8442	20 85 8c	jsr $8c85			jsr 	ScanForward
.8445	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8446					DimCommand:
.8446	b1 30		lda ($30),y			lda 	(codePtr),y
.8448	29 c0		and #$c0			and 	#$C0
.844a	c9 40		cmp #$40			cmp 	#$40
.844c	d0 7a		bne $84c8			bne 	_DCSyntax
.844e	b1 30		lda ($30),y			lda 	(codePtr),y
.8450	18		clc				clc
.8451	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8453	85 3f		sta $3f				sta 	zaTemp+1
.8455	c8		iny				iny
.8456	b1 30		lda ($30),y			lda 	(codePtr),y
.8458	c8		iny				iny
.8459	85 3e		sta $3e				sta 	zaTemp
.845b	5a		phy				phy
.845c	a0 02		ldy #$02			ldy 	#2 						; read type byte
.845e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8460	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8462	c9 18		cmp #$18			cmp 	#NSTProcedure
.8464	f0 62		beq $84c8			beq 	_DCSyntax
.8466	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8468	29 04		and #$04			and 	#NSBIsArray
.846a	f0 64		beq $84d0			beq 	_DCType
.846c	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.846e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8470	d0 59		bne $84cb			bne 	_DCRedefine
.8472	7a		ply				ply
.8473	20 d3 84	jsr $84d3			jsr 	_DCGetSize 				; get array size, check it.
.8476	5a		phy				phy
.8477	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8479	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.847b	7a		ply				ply 							; is there a second (e.g. ,x)
.847c	b1 30		lda ($30),y			lda 	(codePtr),y
.847e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8480	d0 0a		bne $848c			bne 	_DCOneDimension
.8482	c8		iny				iny 							; skip comma
.8483	20 d3 84	jsr $84d3			jsr 	_DCGetSize 				; get 2nd array size
.8486	5a		phy				phy
.8487	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8489	91 3e		sta ($3e),y			sta 	(zaTemp),y
.848b	7a		ply				ply
.848c					_DCOneDimension:
.848c	5a		phy				phy 							; save position
.848d	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.848f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8491	aa		tax				tax
.8492	c8		iny				iny
.8493	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8495	e8		inx				inx 							; bump them.
.8496	1a		inc a				inc 	a
.8497	20 9b 9d	jsr $9d9b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.849a	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.849c	29 e0		and #$e0			and 	#$E0
.849e	d0 23		bne $84c3			bne 	_DCSize
.84a0	a0 02		ldy #$02			ldy 	#2 						; get base type
.84a2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a4	20 e1 84	jsr $84e1			jsr 	ScaleByBaseType 		; scale by base type
.84a7	a5 36		lda $36				lda 	zTemp0
.84a9	a6 37		ldx $37				ldx 	zTemp0+1
.84ab	20 91 99	jsr $9991			jsr 	AllocateXABytes 		; allocate memory
.84ae	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84b0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84b2	c8		iny				iny
.84b3	8a		txa				txa
.84b4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84b6	7a		ply				ply 							; get position back
.84b7	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 		; check )
.84ba	b1 30		lda ($30),y			lda 	(codePtr),y
.84bc	c8		iny				iny 							; consume in case
.84bd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84bf	f0 85		beq $8446			beq 	DimCommand
.84c1	88		dey				dey 							; undo consume
.84c2	60		rts				rts
.84c3					_DCSize:
.84c3	a9 16		lda #$16		lda	#22
.84c5	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.84c8					_DCSyntax:
.84c8	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.84cb					_DCRedefine:
.84cb	a9 15		lda #$15		lda	#21
.84cd	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.84d0					_DCType:
.84d0	4c 9a 9f	jmp $9f9a			jmp 	TypeError
.84d3					_DCGetSize:
.84d3	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84d5	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 	; get array dimension
.84d8	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84da	f0 e7		beq $84c3			beq 	_DCSize
.84dc	c9 fe		cmp #$fe			cmp 	#254
.84de	f0 e3		beq $84c3			beq 	_DCSize
.84e0	60		rts				rts
.84e1					ScaleByBaseType:
.84e1	29 10		and #$10			and 	#NSBIsString 			; is it string
.84e3	d0 19		bne $84fe			bne 	_SBBTString
.84e5	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84e7	48		pha				pha
.84e8	a5 36		lda $36				lda 	zTemp0
.84ea	48		pha				pha
.84eb	06 36		asl $36				asl 	zTemp0 					; x 2
.84ed	26 37		rol $37				rol 	zTemp0+1
.84ef	06 36		asl $36				asl 	zTemp0 					; x 4
.84f1	26 37		rol $37				rol 	zTemp0+1
.84f3	68		pla				pla 							; add stacked value = x 5
.84f4	65 36		adc $36				adc 	zTemp0
.84f6	85 36		sta $36				sta 	zTemp0
.84f8	68		pla				pla
.84f9	65 37		adc $37				adc 	zTemp0+1
.84fb	85 37		sta $37				sta 	zTemp0+1
.84fd	60		rts				rts
.84fe					_SBBTString:
.84fe	06 36		asl $36				asl 	zTemp0
.8500	26 37		rol $37				rol 	zTemp0+1
.8502	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8503					EndCommand:
.8503	4c 45 83	jmp $8345			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8506					ForCommand:
.8506	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8508	20 f4 a5	jsr $a5f4			jsr 	StackOpen
.850b	a2 00		ldx #$00			ldx 	#0
.850d	20 cc 97	jsr $97cc			jsr 	EvaluateTerm
.8510	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8513	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8515	d0 49		bne $8560			bne		_FCError
.8517	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8519	20 3a 8d	jsr $8d3a			jsr 	CheckNextA
.851c	e8		inx				inx
.851d	20 52 9d	jsr $9d52			jsr 	EvaluateInteger 			; <from> in +1
.8520	b1 30		lda ($30),y			lda 	(codePtr),y
.8522	c8		iny				iny 								; consume it
.8523	48		pha				pha 								; save on stack for later
.8524	c9 b4		cmp #$b4			cmp 	#KWD_DOWNTO
.8526	f0 04		beq $852c			beq 	_FCNoSyntax
.8528	c9 cd		cmp #$cd			cmp 	#KWD_TO
.852a	d0 37		bne $8563			bne 	_FCSyntaxError
.852c					_FCNoSyntax:
.852c	e8		inx				inx
.852d	20 52 9d	jsr $9d52			jsr 	EvaluateInteger
.8530	20 38 a6	jsr $a638			jsr 	STKSaveCodePosition 		; save loop back position
.8533	68		pla				pla 								; restore DOWNTO or TO
.8534	5a		phy				phy 								; save Y on the stack
.8535	49 b4		eor #$b4			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8537	f0 02		beq $853b			beq 	_FCNotDownTo
.8539	a9 02		lda #$02			lda 	#2
.853b					_FCNotDownTo:
.853b	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.853c	a0 10		ldy #$10			ldy 	#16
.853e	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8540	a0 06		ldy #$06			ldy 	#6
.8542	ad 08 04	lda $0408			lda 	NSMantissa0
.8545	91 34		sta ($34),y			sta 	(basicStack),y
.8547	ad 10 04	lda $0410			lda 	NSMantissa1
.854a	c8		iny				iny
.854b	91 34		sta ($34),y			sta 	(basicStack),y
.854d	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.854f	a2 01		ldx #$01			ldx 	#1
.8551	20 66 85	jsr $8566			jsr 	FCIntegerToStack
.8554	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8556	a2 02		ldx #$02			ldx 	#2
.8558	20 66 85	jsr $8566			jsr 	FCIntegerToStack
.855b	20 86 85	jsr $8586			jsr 	CopyIndexToReference
.855e	7a		ply				ply 								; restore position
.855f	60		rts				rts
.8560					_FCError:
.8560	4c 9a 9f	jmp $9f9a			jmp 	TypeError
.8563					_FCSyntaxError:
.8563	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.8566					FCIntegerToStack:
.8566	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8569	10 03		bpl $856e			bpl	 	_FCNotNegative
.856b	20 bb 9d	jsr $9dbb			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.856e					_FCNotNegative:
.856e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8571	91 34		sta ($34),y			sta 	(basicStack),y
.8573	c8		iny				iny
.8574	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8577	91 34		sta ($34),y			sta 	(basicStack),y
.8579	c8		iny				iny
.857a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.857d	91 34		sta ($34),y			sta 	(basicStack),y
.857f	c8		iny				iny
.8580	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8583	91 34		sta ($34),y			sta 	(basicStack),y
.8585	60		rts				rts
.8586					CopyIndexToReference:
.8586	5a		phy				phy
.8587	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8589	38		sec				sec 								; (because we copy from offset 8)
.858a	b1 34		lda ($34),y			lda 	(basicStack),y
.858c	e9 08		sbc #$08			sbc 	#8
.858e	85 36		sta $36				sta 	zTemp0
.8590	c8		iny				iny
.8591	b1 34		lda ($34),y			lda 	(basicStack),y
.8593	e9 00		sbc #$00			sbc 	#0
.8595	85 37		sta $37				sta 	zTemp0+1
.8597	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8599	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.859b	b1 34		lda ($34),y			lda 	(basicStack),y
.859d	0a		asl a				asl 	a 							; into carry
.859e	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85a0	90 14		bcc $85b6			bcc 	_CITRNormal
.85a2	38		sec				sec
.85a3					_CITRNegative:
.85a3	a9 00		lda #$00			lda 	#0
.85a5	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85a7	91 36		sta ($36),y			sta 	(zTemp0),y
.85a9	c8		iny				iny
.85aa	ca		dex				dex
.85ab	d0 f6		bne $85a3			bne 	_CITRNegative
.85ad	88		dey				dey 								; look at MSB of mantissa
.85ae	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85b0	09 80		ora #$80			ora 	#$80
.85b2	91 36		sta ($36),y			sta 	(zTemp0),y
.85b4	7a		ply				ply
.85b5	60		rts				rts
.85b6					_CITRNormal:
.85b6	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85b8	91 36		sta ($36),y			sta 	(zTemp0),y
.85ba	c8		iny				iny
.85bb	ca		dex				dex
.85bc	d0 f8		bne $85b6			bne 	_CITRNormal
.85be	7a		ply				ply 								; and exit.
.85bf	60		rts				rts
.85c0					NextCommand:
.85c0	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85c2	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85c4	20 20 a6	jsr $a620			jsr 	StackCheckFrame
.85c7	5a		phy				phy
.85c8	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85ca	b1 34		lda ($34),y			lda 	(basicStack),y
.85cc	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85ce	30 02		bmi $85d2			bmi 	_NCStepNeg
.85d0	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85d2					_NCStepNeg:
.85d2	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85d4	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85d6	18		clc				clc
.85d7					_NCBump:
.85d7	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85d9	91 34		sta ($34),y			sta 	(basicStack),y
.85db	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85dd	c8		iny				iny 								; next byte
.85de	ca		dex				dex 								; do four times
.85df	d0 f6		bne $85d7			bne 	_NCBump
.85e1	20 86 85	jsr $8586			jsr		CopyIndexToReference		; copy it to the reference variable.
.85e4	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85e6	b1 34		lda ($34),y			lda 	(basicStack),y
.85e8	0a		asl a				asl 	a 							; sign bit to carry
.85e9	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85eb	85 38		sta $38				sta 	zTemp1
.85ed	90 02		bcc $85f1			bcc 	_NCCompRev 					; use if step is +ve
.85ef	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.85f1					_NCCompRev:
.85f1	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.85f3	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.85f5	85 39		sta $39				sta 	zTemp1+1
.85f7	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.85f9	38		sec				sec
.85fa					_NCCompare:
.85fa	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.85fc	b1 34		lda ($34),y			lda 	(basicStack),y
.85fe	a4 39		ldy $39				ldy 	zTemp1+1
.8600	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8602	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8604	e6 39		inc $39				inc 	zTemp1+1
.8606	ca		dex				dex 								; do it 4 times.
.8607	d0 f1		bne $85fa			bne 	_NCCompare
.8609	50 02		bvc $860d			bvc 	_NCNoOverflow 				; convert to signed comparison
.860b	49 80		eor #$80			eor 	#$80
.860d					_NCNoOverflow:
.860d	7a		ply				ply 								; restore Y position
.860e	0a		asl a				asl 	a 							; is bit 7 set.
.860f	90 04		bcc $8615			bcc 	_NCLoopback 				; if no , >= so loop back
.8611	20 12 a6	jsr $a612			jsr 	StackClose 					; exit the loop
.8614	60		rts				rts
.8615					_NCLoopBack:
.8615	20 49 a6	jsr $a649			jsr 	STKLoadCodePosition 		; loop back
.8618	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8619					Command_GOSUB:
.8619	a2 00		ldx #$00			ldx 	#0
.861b	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.861e	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8620	20 f4 a5	jsr $a5f4			jsr 	StackOpen 					; create frame
.8623	20 38 a6	jsr $a638			jsr 	STKSaveCodePosition 		; save current position
.8626	4c 3c 86	jmp $863c			jmp 	GotoStackX
.8629					Command_RETURN:
.8629	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.862b	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.862d	20 20 a6	jsr $a620			jsr 	StackCheckFrame
.8630	20 49 a6	jsr $a649			jsr 	STKLoadCodePosition 		; restore code position
.8633	20 12 a6	jsr $a612			jsr 	StackClose
.8636	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8637					GotoCommand:
.8637	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8639	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.863c					GotoStackX:
.863c	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.863f	48		pha				pha 								; it is slightly inefficient, just in cases.
.8640	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8643	fa		plx				plx
.8644	20 13 a2	jsr $a213			jsr 	MemorySearch 				; transfer to line number AX.
.8647	90 05		bcc $864e			bcc 	_GotoError 					; not found, off end.
.8649	d0 03		bne $864e			bne 	_GotoError 					; not found exactly
.864b	4c ea 89	jmp $89ea			jmp 	RunNewLine 					; and go straight to new line code.
.864e					_GotoError:
.864e	a9 0d		lda #$0d		lda	#13
.8650	4c 43 8d	jmp $8d43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8653					IfCommand:
.8653	a2 00		ldx #$00			ldx 	#0 							; If what.
.8655	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber
.8658	b1 30		lda ($30),y			lda 	(codePtr),y
.865a	c9 a8		cmp #$a8			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.865c	d0 0a		bne $8668			bne 	_IFStructured
.865e	c8		iny				iny 								; consume THEN
.865f	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; is it zero
.8662	f0 01		beq $8665			beq 	_IfFail 					; if fail, go to next line
.8664	60		rts				rts 								; if THEN just continue
.8665					_IfFail:
.8665	4c 4f 8a	jmp $8a4f			jmp 	EOLCommand
.8668					_IfStructured:
.8668	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; is it zero
.866b	d0 07		bne $8674			bne 	_IfExit 					; if not, then continue normally.
.866d	a9 b5		lda #$b5			lda 	#KWD_ELSE 					; look for else/endif
.866f	a2 a5		ldx #$a5			ldx 	#KWD_ENDIF
.8671	20 85 8c	jsr $8c85			jsr 	ScanForward 				; and run from there/
.8674					_IfExit:
.8674	60		rts				rts
.8675					ElseCode:
.8675	a9 a5		lda #$a5			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8677	aa		tax				tax 								; so just go to the structure exit
.8678	20 85 8c	jsr $8c85			jsr 	ScanForward
.867b	60		rts				rts
.867c					EndIf:
.867c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.867d					LetCommand:
.867d	a2 00		ldx #$00			ldx 	#0
.867f	b1 30		lda ($30),y			lda 	(codePtr),y
.8681	c9 10		cmp #$10			cmp 	#KWD_AT
.8683	d0 16		bne $869b			bne 	_LCStandard
.8685	c8		iny				iny 								; skip equal
.8686	20 cc 97	jsr $97cc			jsr 	EvaluateTerm 				; get a number
.8689	20 10 96	jsr $9610			jsr 	Dereference 				; dereference it
.868c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.868f	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8691	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8694	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8696	d0 10		bne $86a8			bne 	_LCMain
.8698	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; was a reference before.
.869b					_LCStandard:
.869b	ad da 92	lda $92da			lda 	PrecedenceLevel+"*"			; precedence > this
.869e	20 f4 92	jsr $92f4			jsr 	EvaluateExpressionAtPrecedence
.86a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86a4	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86a6	f0 0e		beq $86b6			beq 	_LetGoProc 					; it's a procedure call.
.86a8					_LCMain:
.86a8	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86aa	20 3a 8d	jsr $8d3a			jsr 	CheckNextA
.86ad	e8		inx				inx 								; RHS
.86ae	20 26 9d	jsr $9d26			jsr 	EvaluateValue
.86b1	ca		dex				dex
.86b2	20 b9 86	jsr $86b9			jsr 	AssignVariable
.86b5	60		rts				rts
.86b6					_LetGoProc:
.86b6	4c b7 88	jmp $88b7			jmp 	CallProcedure
.86b9					AssignVariable:
.86b9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86bc	48		pha				pha 								; save a copy
.86bd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86c0	29 10		and #$10			and 	#NSBIsString
.86c2	d0 0b		bne $86cf			bne 	_ASError
.86c4	68		pla				pla 								; get back
.86c5	29 10		and #$10			and 	#NSBIsString 				; check type
.86c7	d0 03		bne $86cc			bne 	_ASString
.86c9	4c 38 95	jmp $9538			jmp 	AssignNumber
.86cc					_ASString:
.86cc	4c a6 95	jmp $95a6			jmp 	AssignString
.86cf					_ASError:
.86cf	4c 9a 9f	jmp $9f9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86d2					Command_List:
.86d2	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86d5	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86d8	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86db	a9 ff		lda #$ff			lda 	#$FF
.86dd	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86e0	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86e3	b1 30		lda ($30),y			lda 	(codePtr),y
.86e5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86e7	f0 1e		beq $8707			beq 	_CLSecond
.86e9	20 68 87	jsr $8768			jsr 	CLIsDigit 					; if not digit, list all
.86ec	b0 24		bcs $8712			bcs 	_CLStart
.86ee	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86f0	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.86f3	b1 30		lda ($30),y			lda 	(codePtr),y
.86f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f7	f0 0e		beq $8707			beq 	_CLSecond 					; if so go get it
.86f9	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.86fc	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86ff	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8702	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8705	80 0b		bra $8712			bra 	_CLStart
.8707					_CLSecond:
.8707	c8		iny				iny 								; consume comma
.8708	20 68 87	jsr $8768			jsr 	CLIsDigit 					; digit found
.870b	b0 05		bcs $8712			bcs 	_CLStart 					; if not, continue listing
.870d	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.870f	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.8712					_CLStart
.8712	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8714	85 30		sta $30				sta 	codePtr
.8716	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8718	85 31		sta $31				sta 	codePtr+1
.871a					_CLLoop:
.871a	20 d6 a9	jsr $a9d6			jsr 	EXTBreakCheck 				; break check
.871d	f0 33		beq $8752			beq 	_CLExit
.871f	b2 30		lda ($30)			lda 	(codePtr)
.8721	f0 2f		beq $8752			beq 	_CLExit
.8723	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8725	20 55 87	jsr $8755			jsr 	CLCompareLineNo
.8728	90 1b		bcc $8745			bcc 	_CLNext
.872a	a2 07		ldx #$07			ldx 	#7
.872c	20 55 87	jsr $8755			jsr 	CLCompareLineNo
.872f	f0 02		beq $8733			beq 	_CLDoThisOne
.8731	b0 12		bcs $8745			bcs 	_CLNext
.8733					_CLDoThisOne:
.8733	20 e8 8c	jsr $8ce8			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8736	20 20 b3	jsr $b320			jsr 	ListConvertLine 			; convert line into token Buffer
.8739	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.873b	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.873d	20 9c 8d	jsr $8d9c			jsr 	PrintStringXA
.8740	a9 0d		lda #$0d			lda 	#13 						; new line
.8742	20 34 a7	jsr $a734			jsr 	EXTPrintCharacter
.8745					_CLNext:
.8745	18		clc				clc
.8746	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8748	65 30		adc $30				adc 	codePtr
.874a	85 30		sta $30				sta 	codePtr
.874c	90 02		bcc $8750			bcc 	_CREExit
.874e	e6 31		inc $31				inc 	codePtr+1
.8750					_CREExit:
.8750	80 c8		bra $871a			bra 	_CLLoop
.8752					_CLExit:
.8752	4c 45 83	jmp $8345			jmp 	WarmStart
.8755					CLCompareLineNo:
.8755	38		sec				sec
.8756	a0 01		ldy #$01			ldy 	#1
.8758	b1 30		lda ($30),y			lda 	(codePtr),y
.875a	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.875d	85 36		sta $36				sta 	zTemp0
.875f	c8		iny				iny
.8760	b1 30		lda ($30),y			lda 	(codePtr),y
.8762	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8765	05 36		ora $36				ora 	zTemp0
.8767	60		rts				rts
.8768					CLIsDigit:
.8768	b1 30		lda ($30),y			lda 	(codePtr),y
.876a	c9 30		cmp #$30			cmp 	#"0"
.876c	90 03		bcc $8771			bcc	 	_CLIDExitFalse
.876e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8770	60		rts				rts
.8771					_CLIDExitFalse:
.8771	38		sec				sec
.8772	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8773					Command_LOCAL:
.8773	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8775	20 81 87	jsr $8781			jsr 	LocaliseNextTerm 			; convert term to a local.
.8778	b1 30		lda ($30),y			lda 	(codePtr),y
.877a	c8		iny				iny
.877b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.877d	f0 f4		beq $8773			beq 	Command_LOCAL
.877f	88		dey				dey 								; unpick pre-get
.8780	60		rts				rts
.8781					LocaliseNextTerm:
.8781	20 cc 97	jsr $97cc			jsr 	EvaluateTerm 				; evaluate the term
.8784	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8787	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8789	f0 61		beq $87ec			beq		_LNTError
.878b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.878e	85 36		sta $36				sta 	zTemp0
.8790	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8793	85 37		sta $37				sta  	zTemp0+1
.8795	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8798	29 10		and #$10			and 	#NSBIsString
.879a	d0 1e		bne $87ba			bne 	_LNTPushString
.879c	5a		phy				phy
.879d	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.879f					_LNTPushNumLoop:
.879f	b1 36		lda ($36),y			lda		(zTemp0),y
.87a1	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87a4	c8		iny				iny
.87a5	c0 05		cpy #$05			cpy 	#5
.87a7	d0 f6		bne $879f			bne 	_LNTPushNumLoop
.87a9	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87ab	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87ae	a5 37		lda $37				lda 	zTemp0+1
.87b0	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87b3	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87b5	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87b8	7a		ply				ply
.87b9	60		rts				rts
.87ba					_LNTPushString:
.87ba	5a		phy				phy
.87bb	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87bd	85 38		sta $38				sta 	zTemp1
.87bf	a0 01		ldy #$01			ldy 	#1
.87c1	b1 36		lda ($36),y			lda 	(zTemp0),y
.87c3	85 39		sta $39				sta 	zTemp1+1
.87c5	a0 00		ldy #$00			ldy 	#0 							; output string
.87c7	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87c9	f0 0a		beq $87d5			beq 	_LNTStringOut
.87cb					_LNTPushStrLoop:
.87cb	b1 38		lda ($38),y			lda 	(zTemp1),y
.87cd	f0 06		beq $87d5			beq 	_LNTStringOut
.87cf	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87d2	c8		iny				iny
.87d3	80 f6		bra $87cb			bra 	_LNTPushStrLoop
.87d5					_LNTStringOut:
.87d5	98		tya				tya									; output length
.87d6	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87d9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87dc	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87df	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87e2	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87e5	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87e7	20 d2 a5	jsr $a5d2			jsr 	StackPushByte
.87ea	7a		ply				ply
.87eb	60		rts				rts
.87ec					_LNTError:
.87ec	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.87ef					LocalPopValue:
.87ef	20 eb a5	jsr $a5eb			jsr 	StackPopByte
.87f2	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.87f4	d0 17		bne $880d			bne 	_LPVString
.87f6	20 eb a5	jsr $a5eb			jsr 	StackPopByte 				; address
.87f9	85 37		sta $37				sta 	zTemp0+1
.87fb	20 eb a5	jsr $a5eb			jsr 	StackPopByte
.87fe	85 36		sta $36				sta 	zTemp0
.8800	5a		phy				phy
.8801	a0 04		ldy #$04			ldy 	#4 							; copy back
.8803					_LPVNumberCopy:
.8803	20 eb a5	jsr $a5eb			jsr 	StackPopByte
.8806	91 36		sta ($36),y			sta 	(zTemp0),y
.8808	88		dey				dey
.8809	10 f8		bpl $8803			bpl 	_LPVNumberCopy
.880b	7a		ply				ply 								; and complete
.880c	60		rts				rts
.880d					_LPVString:
.880d	20 eb a5	jsr $a5eb			jsr 	StackPopByte 				; address of record => zTemp0
.8810	85 37		sta $37				sta 	zTemp0+1
.8812	20 eb a5	jsr $a5eb			jsr 	StackPopByte
.8815	85 36		sta $36				sta 	zTemp0
.8817	5a		phy				phy
.8818	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.881a	85 38		sta $38				sta 	zTemp1
.881c	a0 01		ldy #$01			ldy 	#1
.881e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8820	85 39		sta $39				sta 	zTemp1+1
.8822	20 eb a5	jsr $a5eb			jsr 	StackPopByte 				; # to get => y
.8825	a8		tay				tay
.8826	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8828	f0 0e		beq $8838			beq 	_LPVStringCopied
.882a	a9 00		lda #$00			lda 	#0 							; NULL on end
.882c	91 38		sta ($38),y			sta 	(zTemp1),y
.882e					_LPVStringCopy:
.882e	88		dey				dey
.882f	30 07		bmi $8838			bmi 	_LPVStringCopied
.8831	20 eb a5	jsr $a5eb			jsr 	StackPopByte
.8834	91 38		sta ($38),y			sta 	(zTemp1),y
.8836	80 f6		bra $882e			bra 	_LPVStringCopy
.8838					_LPVStringCopied:
.8838	fa		plx				plx
.8839	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.883a					NewCommand:
.883a	20 40 88	jsr $8840			jsr 	NewProgram
.883d	4c 45 83	jmp $8345			jmp 	WarmStart
.8840					NewProgram:
.8840	20 f1 a1	jsr $a1f1			jsr 	MemoryNew
.8843	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8846	20 de 83	jsr $83de			jsr 	ClearCommand 				; clear everything.
.8849	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.884a					Command_Print:
.884a	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.884b					_CPLoop:
.884b	08		php				php 								; save last action flag
.884c	b1 30		lda ($30),y			lda 	(codePtr),y
.884e	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8850	f0 46		beq $8898			beq 	_CPExit
.8852	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8854	f0 42		beq $8898			beq 	_CPExit
.8856	68		pla				pla 								; throw last action flag
.8857	b1 30		lda ($30),y			lda 	(codePtr),y
.8859	c8		iny				iny
.885a	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.885c	f0 37		beq $8895			beq 	_CPContinueWithSameLine
.885e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8860	f0 2e		beq $8890			beq 	_CPTab
.8862	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8864	f0 26		beq $888c			beq 	_CPNewLine
.8866	88		dey				dey 								; undo the get.
.8867	a2 00		ldx #$00			ldx 	#0
.8869	20 26 9d	jsr $9d26			jsr 	EvaluateValue 				; get a value into slot 0
.886c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.886f	29 10		and #$10			and 	#NSBIsString
.8871	f0 0b		beq $887e			beq 	_CPNumber
.8873	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8876	ad 08 04	lda $0408			lda 	NSMantissa0
.8879	20 a1 88	jsr $88a1			jsr 	CPPrintStringXA
.887c	80 cc		bra $884a			bra 	Command_Print 				; loop round clearing carry so NL if end
.887e					_CPNumber:
.887e	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8880	20 fc 9b	jsr $9bfc			jsr 	ConvertNumberToString 		; convert to string
.8883	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8885	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.8887	20 a1 88	jsr $88a1			jsr 	CPPrintStringXA
.888a	80 be		bra $884a			bra 	Command_Print 				; loop round clearing carry so NL if end
.888c					_CPNewLine:
.888c	a9 0d		lda #$0d			lda 	#13
.888e	80 02		bra $8892			bra 	_CPPrintChar
.8890					_CPTab:
.8890	a9 09		lda #$09			lda 	#9 							; print TAB
.8892					_CPPrintChar:
.8892	20 b4 88	jsr $88b4			jsr 	CPPrintVector
.8895					_CPContinueWithSameLine:
.8895	38		sec				sec 								; loop round with carry set, which
.8896	80 b3		bra $884b			bra 	_CPLoop 					; will inhibit final CR
.8898					_CPExit:
.8898	28		plp				plp 								; get last action flag
.8899	b0 05		bcs $88a0			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.889b	a9 0d		lda #$0d			lda 	#13 						; print new line
.889d	20 b4 88	jsr $88b4			jsr 	CPPrintVector
.88a0					_CPExit2:
.88a0	60		rts				rts
.88a1					CPPrintStringXA:
.88a1	5a		phy				phy
.88a2	86 37		stx $37				stx 	zTemp0+1
.88a4	85 36		sta $36				sta 	zTemp0
.88a6	a0 00		ldy #$00			ldy 	#0
.88a8					_PSXALoop:
.88a8	b1 36		lda ($36),y			lda 	(zTemp0),y
.88aa	f0 06		beq $88b2			beq 	_PSXAExit
.88ac	20 b4 88	jsr $88b4			jsr 	CPPrintVector
.88af	c8		iny				iny
.88b0	80 f6		bra $88a8			bra 	_PSXALoop
.88b2					_PSXAExit:
.88b2	7a		ply				ply
.88b3	60		rts				rts
.88b4					CPPrintVector:
.88b4	4c 34 a7	jmp $a734			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88b7					CallProcedure:
.88b7	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88b9	b1 30		lda ($30),y			lda 	(codePtr),y
.88bb	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88bd	f0 0c		beq $88cb			beq 	_CPEndParam
.88bf					_CPParamLoop:
.88bf	20 26 9d	jsr $9d26			jsr 	EvaluateValue 				; get parameter onto stack
.88c2	e8		inx				inx 								; bump next stack
.88c3	b1 30		lda ($30),y			lda 	(codePtr),y
.88c5	c8		iny				iny
.88c6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88c8	f0 f5		beq $88bf			beq 	_CPParamLoop
.88ca	88		dey				dey 								; unpick.
.88cb					_CPEndParam:
.88cb	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88ce	c8		iny				iny									; skip right bracket
.88cf	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88d1	20 f4 a5	jsr $a5f4			jsr 	StackOpen
.88d4	20 38 a6	jsr $a638			jsr 	STKSaveCodePosition 		; save loop position
.88d7	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88da	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88dc	ad 10 04	lda $0410			lda 	NSMantissa1
.88df	85 37		sta $37				sta 	zTemp0+1
.88e1	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88e3	b2 36		lda ($36)			lda 	(zTemp0)
.88e5	85 30		sta $30				sta 	safePtr
.88e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e9	85 31		sta $31				sta 	safePtr+1
.88eb	c8		iny				iny
.88ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ee	85 32		sta $32				sta 	safePtr+2
.88f0	c8		iny				iny
.88f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f3	85 33		sta $33				sta 	safePtr+3
.88f5	c8		iny				iny 								; get Y offset -> Y
.88f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f8	a8		tay				tay
.88f9	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88fb	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88fe	f0 13		beq $8913			beq 	_ParamExit 					; if so, exit.
.8900					_ParamExtract:
.8900	ca		dex				dex 								; put a local term on the level before
.8901	20 81 87	jsr $8781			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8904	20 b9 86	jsr $86b9			jsr 	AssignVariable 				; assign stacked value to the variable.
.8907	e8		inx				inx 								; advance to next parameter to do.
.8908	e8		inx				inx
.8909	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.890c	f0 05		beq $8913			beq 	_ParamExit
.890e	20 32 8d	jsr $8d32			jsr 	CheckComma 					; comma seperating parameters
.8911	80 ed		bra $8900			bra 	_ParamExtract
.8913					_ParamExit:
.8913	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 			; check )
.8916	60		rts				rts 								; and continue from here
.8917					Command_ENDPROC:
.8917	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8919	a2 14		ldx #$14			ldx 	#ERRID_PROC
.891b	20 20 a6	jsr $a620			jsr 	StackCheckFrame
.891e	20 49 a6	jsr $a649			jsr 	STKLoadCodePosition 		; restore code position
.8921	20 12 a6	jsr $a612			jsr 	StackClose
.8924	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8925					Command_Read:
.8925	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8927	20 cc 97	jsr $97cc			jsr 	EvaluateTerm
.892a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.892d	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.892f	f0 4a		beq $897b			beq 	_CRSyntax 					; check reference (bit 0)
.8931	20 c4 89	jsr $89c4			jsr 	SwapDataCodePtrs 			; swap code and data
.8934	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8937	d0 20		bne $8959			bne 	_CRContinueData
.8939					_CRKeepSearching:
.8939	a9 b2		lda #$b2			lda 	#KWD_DATA 					; scan for instruction
.893b	aa		tax				tax
.893c	20 85 8c	jsr $8c85			jsr 	ScanForward
.893f	c9 b2		cmp #$b2			cmp 	#KWD_DATA 					; found data ?
.8941	f0 16		beq $8959			beq 	_CRHaveData 				; found it
.8943	18		clc				clc
.8944	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8946	65 30		adc $30				adc 	codePtr
.8948	85 30		sta $30				sta 	codePtr
.894a	90 02		bcc $894e			bcc 	_CREExit
.894c	e6 31		inc $31				inc 	codePtr+1
.894e					_CREExit:
.894e	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8950	b2 30		lda ($30)			lda 	(codePtr)
.8952	d0 e5		bne $8939			bne 	_CRKeepSearching
.8954	a9 0b		lda #$0b		lda	#11
.8956	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.8959					_CRHaveData:
.8959					_CRContinueData:
.8959	a2 01		ldx #$01			ldx 	#1
.895b	20 26 9d	jsr $9d26			jsr 	EvaluateValue 				; evaluate value into slot # 1
.895e	ca		dex				dex
.895f	20 b9 86	jsr $86b9			jsr		AssignVariable 				; do the assignment
.8962	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8965	b1 30		lda ($30),y			lda 	(codePtr),y
.8967	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8969	d0 04		bne $896f			bne 	_CRSwapBack
.896b	c8		iny				iny 								; consume comma
.896c	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.896f					_CRSwapBack:
.896f	20 c4 89	jsr $89c4			jsr 	SwapDataCodePtrs			; swap them back.
.8972	b1 30		lda ($30),y			lda 	(codePtr),y
.8974	c8		iny				iny
.8975	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8977	f0 ac		beq $8925			beq 	Command_Read 				; if so go round again.
.8979	88		dey				dey 								; unpick get.
.897a	60		rts				rts
.897b					_CRSyntax:
.897b	4c 90 9f	jmp $9f90			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.897e					RemCommand:
.897e	b1 30		lda ($30),y			lda 	(codePtr),y
.8980	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8982	d0 06		bne $898a			bne 	_RMExit
.8984	c8		iny				iny
.8985	98		tya				tya
.8986	38		sec				sec
.8987	71 30		adc ($30),y			adc 	(codePtr),y
.8989	a8		tay				tay
.898a					_RMExit:
.898a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.898b					Command_REPEAT:
.898b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.898d	20 f4 a5	jsr $a5f4			jsr 	StackOpen
.8990	20 38 a6	jsr $a638			jsr 	STKSaveCodePosition 		; save loop position
.8993	60		rts				rts
.8994					Command_UNTIL:
.8994	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8996	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8998	20 20 a6	jsr $a620			jsr 	StackCheckFrame
.899b	a2 00		ldx #$00			ldx 	#0
.899d	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber 				; work out the number
.89a0	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; check if zero
.89a3	f0 04		beq $89a9			beq 	_CULoopBack 				; if so keep looping
.89a5	20 12 a6	jsr $a612			jsr 	StackClose		 			; return
.89a8	60		rts				rts
.89a9					_CULoopBack:
.89a9	20 49 a6	jsr $a649			jsr 	STKLoadCodePosition 		; loop back
.89ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89ad					Command_Restore:
.89ad	20 c4 89	jsr $89c4			jsr 	SwapDataCodePtrs 			; swap code and data
.89b0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89b2	85 30		sta $30				sta 	codePtr
.89b4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89b6	85 31		sta $31				sta 	codePtr+1
.89b8	20 c4 89	jsr $89c4			jsr 	SwapDataCodePtrs 			; put them back
.89bb	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89bd	8d 9b 04	sta $049b			sta 	dataPointer+4
.89c0	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89c3	60		rts				rts
.89c4					SwapDataCodePtrs:
.89c4	da		phx				phx
.89c5	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89c7					_SDCPLoop:
.89c7	b5 30		lda $30,x			lda 	safePtr,x
.89c9	48		pha				pha
.89ca	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89cd	95 30		sta $30,x			sta 	safePtr,x
.89cf	68		pla				pla
.89d0	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89d3	ca		dex				dex
.89d4	10 f1		bpl $89c7			bpl 	_SDCPLoop
.89d6	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89d9	8c 9b 04	sty $049b			sty 	dataPointer+4
.89dc	a8		tay				tay
.89dd	fa		plx				plx
.89de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89df					CommandRUN:
.89df	20 de 83	jsr $83de			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89e2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89e4	85 30		sta $30				sta 	codePtr
.89e6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e8	85 31		sta $31				sta 	codePtr+1
.89ea					RUNNewLine:
.89ea	b2 30		lda ($30)			lda 	(codePtr)
.89ec	f0 5e		beq $8a4c			beq 	CRNoProgram         		; no then END.
.89ee	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89f0	9a		txs				txs
.89f1					RUNCodePointerLine:
.89f1	a0 02		ldy #$02			ldy 	#2 							; start of program
.89f3					_CRIncMainLoop:
.89f3	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89f6	d0 05		bne $89fd			bne 	_CRNoBreakCheck
.89f8	20 d6 a9	jsr $a9d6			jsr 	EXTBreakCheck 				; break check
.89fb	f0 4a		beq $8a47			beq 	_CRBreak
.89fd					_CRNoBreakCheck:
.89fd	c8		iny				iny
.89fe					_CRMainLoop:
.89fe	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a01	b1 30		lda ($30),y			lda 	(codePtr),y
.8a03	10 10		bpl $8a15			bpl 	_CRNotKeyword
.8a05	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a07	b0 04		bcs $8a0d			bcs 	_CRIsKeyword
.8a09	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a0b	b0 34		bcs $8a41			bcs		_CRSyntaxError
.8a0d					_CRIsKeyword:
.8a0d	c8		iny				iny 								; consume command
.8a0e	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a0f	aa		tax				tax 								; put in X for vector jump
.8a10	20 44 8a	jsr $8a44			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a13	80 e9		bra $89fe			bra 	_CRMainLoop 				; and loop round
.8a15					_CRNotKeyword:
.8a15	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a17	f0 da		beq $89f3			beq 	_CRIncMainLoop
.8a19	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a1b	90 05		bcc $8a22			bcc 	_CRNotVariable
.8a1d					_CRGoLet:
.8a1d	20 7d 86	jsr $867d			jsr 	LetCommand
.8a20	80 dc		bra $89fe			bra 	_CRMainLoop
.8a22					_CRNotVariable:
.8a22	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a24	f0 f7		beq $8a1d			beq 	_CRGoLet
.8a26	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a28	f0 f3		beq $8a1d			beq 	_CRGoLet
.8a2a	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a2c	f0 ef		beq $8a1d			beq 	_CRGoLet
.8a2e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a30	f0 09		beq $8a3b			beq 	_CRGoRem
.8a32	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a34	d0 0b		bne $8a41			bne 	_CRSyntaxError
.8a36	20 11 82	jsr $8211			jsr 	LabelHere
.8a39	80 c3		bra $89fe			bra 	_CRMainLoop
.8a3b					_CRGoRem:
.8a3b	c8		iny				iny
.8a3c	20 7e 89	jsr $897e			jsr 	RemCommand
.8a3f	80 bd		bra $89fe			bra 	_CRMainLoop
.8a41					_CRSyntaxError:
.8a41	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.8a44					_CRCallVector0:
.8a44	7c f0 8a	jmp ($8af0,x)			jmp 	(VectorSet0,x)
.8a47					_CRBreak:
.8a47	a9 01		lda #$01		lda	#1
.8a49	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.8a4c					CRNoProgram:
.8a4c	4c 03 85	jmp $8503			jmp 	EndCommand
.8a4f					EOLCommand:
.8a4f	18		clc				clc
.8a50	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a52	65 30		adc $30				adc 	codePtr
.8a54	85 30		sta $30				sta 	codePtr
.8a56	90 02		bcc $8a5a			bcc 	_CREExit
.8a58	e6 31		inc $31				inc 	codePtr+1
.8a5a					_CREExit:
.8a5a	80 8e		bra $89ea			bra 	RunNewLine
.8a5c					Shift1Command:
.8a5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5e	c8		iny				iny
.8a5f	0a		asl a				asl 	a
.8a60	aa		tax				tax
.8a61	7c 8c 8b	jmp ($8b8c,x)			jmp 	(VectorSet1,x)
.8a64					Shift2Command:
.8a64	b1 30		lda ($30),y			lda 	(codePtr),y
.8a66	c8		iny				iny
.8a67	0a		asl a				asl 	a
.8a68	aa		tax				tax
.8a69	7c a6 8b	jmp ($8ba6,x)			jmp 	(VectorSet2,x)
.8a6c					Unused1:
.8a6c					Unused2:
.8a6c					Unused3:
.8a6c					Unused4:
.8a6c	4c 90 9f	jmp $9f90			jmp 	SyntaxError
>8a6f							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a70					VectorSetPunc:
>8a70	30 90					.word	ShiftLeft                        ; $00 <<
>8a72	e7 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a74	dd 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a76	90 9f					.word	SyntaxError                      ; $03 !!3
>8a78	90 9f					.word	SyntaxError                      ; $04 ><
>8a7a	f1 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a7c	33 90					.word	ShiftRight                       ; $06 >>
>8a7e	90 9f					.word	SyntaxError                      ; $07 !!7
>8a80	90 9f					.word	SyntaxError                      ; $08 !!8
>8a82	90 9f					.word	SyntaxError                      ; $09 !!9
>8a84	90 9f					.word	SyntaxError                      ; $0a !!10
>8a86	90 9f					.word	SyntaxError                      ; $0b !!11
>8a88	90 9f					.word	SyntaxError                      ; $0c !!12
>8a8a	90 9f					.word	SyntaxError                      ; $0d !!13
>8a8c	90 9f					.word	SyntaxError                      ; $0e !!14
>8a8e	90 9f					.word	SyntaxError                      ; $0f !!15
>8a90	90 9f					.word	SyntaxError                      ; $10 @
>8a92	90 9f					.word	SyntaxError                      ; $11 !!17
>8a94	90 9f					.word	SyntaxError                      ; $12 !!18
>8a96	90 9f					.word	SyntaxError                      ; $13 [
>8a98	b4 8e					.word	IntegerDivide                    ; $14 \
>8a9a	90 9f					.word	SyntaxError                      ; $15 ]
>8a9c	c1 91					.word	EorInteger                       ; $16 ^
>8a9e	90 9f					.word	SyntaxError                      ; $17 _
>8aa0	90 9f					.word	SyntaxError                      ; $18 `
>8aa2	90 9f					.word	SyntaxError                      ; $19 !!25
>8aa4	90 9f					.word	SyntaxError                      ; $1a !!26
>8aa6	90 9f					.word	SyntaxError                      ; $1b {
>8aa8	7b 91					.word	OraInteger                       ; $1c |
>8aaa	90 9f					.word	SyntaxError                      ; $1d }
>8aac	90 9f					.word	SyntaxError                      ; $1e ~
>8aae	90 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ab0	90 9f					.word	SyntaxError                      ; $20
>8ab2	07 92					.word	WordIndirect                     ; $21 !
>8ab4	90 9f					.word	SyntaxError                      ; $22 "
>8ab6	90 9f					.word	SyntaxError                      ; $23 #
>8ab8	90 9f					.word	SyntaxError                      ; $24 $
>8aba	01 8f					.word	IntegerModulus                   ; $25 %
>8abc	35 91					.word	AndInteger                       ; $26 &
>8abe	90 9f					.word	SyntaxError                      ; $27 '
>8ac0	90 9f					.word	SyntaxError                      ; $28 (
>8ac2	90 9f					.word	SyntaxError                      ; $29 )
>8ac4	76 8f					.word	MulInteger                       ; $2a *
>8ac6	c7 90					.word	AddInteger                       ; $2b +
>8ac8	90 9f					.word	SyntaxError                      ; $2c ,
>8aca	0a 91					.word	SubInteger                       ; $2d -
>8acc	90 9f					.word	SyntaxError                      ; $2e .
>8ace	f2 93					.word	FDivideCommand                   ; $2f /
>8ad0	90 9f					.word	SyntaxError                      ; $30 0
>8ad2	90 9f					.word	SyntaxError                      ; $31 1
>8ad4	90 9f					.word	SyntaxError                      ; $32 2
>8ad6	90 9f					.word	SyntaxError                      ; $33 3
>8ad8	90 9f					.word	SyntaxError                      ; $34 4
>8ada	90 9f					.word	SyntaxError                      ; $35 5
>8adc	90 9f					.word	SyntaxError                      ; $36 6
>8ade	90 9f					.word	SyntaxError                      ; $37 7
>8ae0	90 9f					.word	SyntaxError                      ; $38 8
>8ae2	90 9f					.word	SyntaxError                      ; $39 9
>8ae4	90 9f					.word	SyntaxError                      ; $3a :
>8ae6	90 9f					.word	SyntaxError                      ; $3b ;
>8ae8	c9 8d					.word	BinaryCompareLess                ; $3c <
>8aea	bf 8d					.word	BinaryCompareEqual               ; $3d =
>8aec	d3 8d					.word	BinaryCompareGreater             ; $3e >
>8aee	2e 92					.word	ByteIndirect                     ; $3f ?
.8af0					VectorSet0:
>8af0	4f 8a					.word	EOLCommand                       ; $80 !0:EOF
>8af2	5c 8a					.word	Shift1Command                    ; $81 !1:SH1
>8af4	64 8a					.word	Shift2Command                    ; $82 !2:SH2
>8af6	62 99					.word	AbsUnary                         ; $83 ABS(
>8af8	72 99					.word	AllocUnary                       ; $84 ALLOC(
>8afa	e2 99					.word	AscUnary                         ; $85 ASC(
>8afc	ad 9b					.word	ChrUnary                         ; $86 CHR$(
>8afe	12 a5					.word	UnaryEvent                       ; $87 EVENT(
>8b00	bb 8d					.word	UnaryFalse                       ; $88 FALSE
>8b02	ef 99					.word	FracUnary                        ; $89 FRAC(
>8b04	a8 a4					.word	UnaryHit                         ; $8a HIT(
>8b06	05 9a					.word	IntUnary                         ; $8b INT(
>8b08	6c 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b0a	a2 a5					.word	UnaryJoyB                        ; $8d JOYB(
>8b0c	7b a5					.word	UnaryJoyX                        ; $8e JOYX(
>8b0e	7e a5					.word	UnaryJoyY                        ; $8f JOYY(
>8b10	87 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b12	17 9a					.word	LenUnary                         ; $91 LEN(
>8b14	35 9a					.word	Unary_Max                        ; $92 MAX(
>8b16	b1 9c					.word	Unary_Mid                        ; $93 MID$(
>8b18	31 9a					.word	Unary_Min                        ; $94 MIN(
>8b1a	8c 9a					.word	Unary_Not                        ; $95 NOT(
>8b1c	90 9f					.word	SyntaxError                      ; $96 PLAYING(
>8b1e	a2 9a					.word	Unary_Random                     ; $97 RANDOM(
>8b20	97 9c					.word	Unary_Right                      ; $98 RIGHT$(
>8b22	c1 9a					.word	Unary_Rnd                        ; $99 RND(
>8b24	42 9b					.word	SgnUnary                         ; $9a SGN(
>8b26	bf 9b					.word	SpcUnary                         ; $9b SPC(
>8b28	da 9b					.word	Unary_Str                        ; $9c STR$(
>8b2a	b6 a5					.word	UnaryTimer                       ; $9d TIMER(
>8b2c	af 8d					.word	UnaryTrue                        ; $9e TRUE
>8b2e	62 9b					.word	ValUnary                         ; $9f VAL(
>8b30	06 85					.word	ForCommand                       ; $a0 FOR
>8b32	53 86					.word	IfCommand                        ; $a1 IF
>8b34	6c 8a					.word	Unused1                          ; $a2 PROC
>8b36	8b 89					.word	Command_REPEAT                   ; $a3 REPEAT
>8b38	fb 8c					.word	Command_WHILE                    ; $a4 WHILE
>8b3a	7c 86					.word	EndIf                            ; $a5 ENDIF
>8b3c	17 89					.word	Command_ENDPROC                  ; $a6 ENDPROC
>8b3e	c0 85					.word	NextCommand                      ; $a7 NEXT
>8b40	6c 8a					.word	Unused4                          ; $a8 THEN
>8b42	94 89					.word	Command_UNTIL                    ; $a9 UNTIL
>8b44	1c 8d					.word	Command_WEND                     ; $aa WEND
>8b46	90 9f					.word	SyntaxError                      ; $ab BY
>8b48	a4 83					.word	CallCommand                      ; $ac CALL
>8b4a	4a a2					.word	CircleCommand                    ; $ad CIRCLE
>8b4c	de 83					.word	ClearCommand                     ; $ae CLEAR
>8b4e	36 84					.word	ClearScreen                      ; $af CLS
>8b50	90 9f					.word	SyntaxError                      ; $b0 COLOR
>8b52	90 9f					.word	SyntaxError                      ; $b1 COLOUR
>8b54	3e 84					.word	Command_Data                     ; $b2 DATA
>8b56	46 84					.word	DimCommand                       ; $b3 DIM
>8b58	6c 8a					.word	Unused3                          ; $b4 DOWNTO
>8b5a	75 86					.word	ElseCode                         ; $b5 ELSE
>8b5c	90 9f					.word	SyntaxError                      ; $b6 FROM
>8b5e	76 a4					.word	GfxCommand                       ; $b7 GFX
>8b60	19 86					.word	Command_GOSUB                    ; $b8 GOSUB
>8b62	37 86					.word	GotoCommand                      ; $b9 GOTO
>8b64	90 9f					.word	SyntaxError                      ; $ba HERE
>8b66	74 a2					.word	ImageCommand                     ; $bb IMAGE
>8b68	7d 86					.word	LetCommand                       ; $bc LET
>8b6a	c9 a2					.word	LineCommand                      ; $bd LINE
>8b6c	73 87					.word	Command_LOCAL                    ; $be LOCAL
>8b6e	90 9f					.word	SyntaxError                      ; $bf OFF
>8b70	90 9f					.word	SyntaxError                      ; $c0 ON
>8b72	90 9f					.word	SyntaxError                      ; $c1 OUTLINE
>8b74	ce a4					.word	PaletteCommand                   ; $c2 PALETTE
>8b76	c2 a2					.word	PlotCommand                      ; $c3 PLOT
>8b78	4a 88					.word	Command_Print                    ; $c4 PRINT
>8b7a	25 89					.word	Command_Read                     ; $c5 READ
>8b7c	46 a2					.word	RectangleCommand                 ; $c6 RECT
>8b7e	7e 89					.word	RemCommand                       ; $c7 REM
>8b80	29 86					.word	Command_RETURN                   ; $c8 RETURN
>8b82	90 9f					.word	SyntaxError                      ; $c9 SOLID
>8b84	90 9f					.word	SyntaxError                      ; $ca SOUND
>8b86	55 a2					.word	SpriteCommand                    ; $cb SPRITE
>8b88	91 a2					.word	TextCommand                      ; $cc TEXT
>8b8a	6c 8a					.word	Unused2                          ; $cd TO
.8b8c					VectorSet1:
>8b8c	90 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b8e	90 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b90	90 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b92	75 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b94	94 83					.word	AssertCommand                    ; $84 ASSERT
>8b96	16 a4					.word	BitmapCtrl                       ; $85 BITMAP
>8b98	03 85					.word	EndCommand                       ; $86 END
>8b9a	d2 86					.word	Command_List                     ; $87 LIST
>8b9c	3a 88					.word	NewCommand                       ; $88 NEW
>8b9e	ad 89					.word	Command_Restore                  ; $89 RESTORE
>8ba0	df 89					.word	CommandRUN                       ; $8a RUN
>8ba2	5b a4					.word	SpritesCtrl                      ; $8b SPRITES
>8ba4	2e 8c					.word	StopCommand                      ; $8c STOP
.8ba6					VectorSet2:
>8ba6	90 9f					.word	SyntaxError                      ; $80 !0:EOF
>8ba8	90 9f					.word	SyntaxError                      ; $81 !1:SH1
>8baa	90 9f					.word	SyntaxError                      ; $82 !2:SH2
>8bac	4f 9e					.word	Assemble_adc                     ; $83 ADC
>8bae	47 9e					.word	Assemble_and                     ; $84 AND
>8bb0	63 9e					.word	Assemble_asl                     ; $85 ASL
>8bb2	cd 9e					.word	Assemble_bcc                     ; $86 BCC
>8bb4	d1 9e					.word	Assemble_bcs                     ; $87 BCS
>8bb6	d9 9e					.word	Assemble_beq                     ; $88 BEQ
>8bb8	90 9e					.word	Assemble_bit                     ; $89 BIT
>8bba	c1 9e					.word	Assemble_bmi                     ; $8a BMI
>8bbc	d5 9e					.word	Assemble_bne                     ; $8b BNE
>8bbe	bd 9e					.word	Assemble_bpl                     ; $8c BPL
>8bc0	dd 9e					.word	Assemble_bra                     ; $8d BRA
>8bc2	e1 9e					.word	Assemble_brk                     ; $8e BRK
>8bc4	c5 9e					.word	Assemble_bvc                     ; $8f BVC
>8bc6	c9 9e					.word	Assemble_bvs                     ; $90 BVS
>8bc8	e9 9e					.word	Assemble_clc                     ; $91 CLC
>8bca	3d 9f					.word	Assemble_cld                     ; $92 CLD
>8bcc	fd 9e					.word	Assemble_cli                     ; $93 CLI
>8bce	2d 9f					.word	Assemble_clv                     ; $94 CLV
>8bd0	5b 9e					.word	Assemble_cmp                     ; $95 CMP
>8bd2	a4 9e					.word	Assemble_cpx                     ; $96 CPX
>8bd4	9f 9e					.word	Assemble_cpy                     ; $97 CPY
>8bd6	81 9e					.word	Assemble_dec                     ; $98 DEC
>8bd8	39 9f					.word	Assemble_dex                     ; $99 DEX
>8bda	15 9f					.word	Assemble_dey                     ; $9a DEY
>8bdc	4b 9e					.word	Assemble_eor                     ; $9b EOR
>8bde	86 9e					.word	Assemble_inc                     ; $9c INC
>8be0	49 9f					.word	Assemble_inx                     ; $9d INX
>8be2	35 9f					.word	Assemble_iny                     ; $9e INY
>8be4	b8 9e					.word	Assemble_jmp                     ; $9f JMP
>8be6	b3 9e					.word	Assemble_jsr                     ; $a0 JSR
>8be8	57 9e					.word	Assemble_lda                     ; $a1 LDA
>8bea	7c 9e					.word	Assemble_ldx                     ; $a2 LDX
>8bec	9a 9e					.word	Assemble_ldy                     ; $a3 LDY
>8bee	6d 9e					.word	Assemble_lsr                     ; $a4 LSR
>8bf0	4d 9f					.word	Assemble_nop                     ; $a5 NOP
>8bf2	43 9e					.word	Assemble_ora                     ; $a6 ORA
>8bf4	f9 9e					.word	Assemble_pha                     ; $a7 PHA
>8bf6	e5 9e					.word	Assemble_php                     ; $a8 PHP
>8bf8	41 9f					.word	Assemble_phx                     ; $a9 PHX
>8bfa	01 9f					.word	Assemble_phy                     ; $aa PHY
>8bfc	09 9f					.word	Assemble_pla                     ; $ab PLA
>8bfe	ed 9e					.word	Assemble_plp                     ; $ac PLP
>8c00	55 9f					.word	Assemble_plx                     ; $ad PLX
>8c02	11 9f					.word	Assemble_ply                     ; $ae PLY
>8c04	68 9e					.word	Assemble_rol                     ; $af ROL
>8c06	72 9e					.word	Assemble_ror                     ; $b0 ROR
>8c08	f5 9e					.word	Assemble_rti                     ; $b1 RTI
>8c0a	05 9f					.word	Assemble_rts                     ; $b2 RTS
>8c0c	5f 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c0e	f1 9e					.word	Assemble_sec                     ; $b4 SEC
>8c10	51 9f					.word	Assemble_sed                     ; $b5 SED
>8c12	0d 9f					.word	Assemble_sei                     ; $b6 SEI
>8c14	53 9e					.word	Assemble_sta                     ; $b7 STA
>8c16	45 9f					.word	Assemble_stp                     ; $b8 STP
>8c18	77 9e					.word	Assemble_stx                     ; $b9 STX
>8c1a	95 9e					.word	Assemble_sty                     ; $ba STY
>8c1c	8b 9e					.word	Assemble_stz                     ; $bb STZ
>8c1e	29 9f					.word	Assemble_tax                     ; $bc TAX
>8c20	25 9f					.word	Assemble_tay                     ; $bd TAY
>8c22	ae 9e					.word	Assemble_trb                     ; $be TRB
>8c24	a9 9e					.word	Assemble_tsb                     ; $bf TSB
>8c26	31 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c28	19 9f					.word	Assemble_txa                     ; $c1 TXA
>8c2a	21 9f					.word	Assemble_txs                     ; $c2 TXS
>8c2c	1d 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c2e					StopCommand:
.8c2e	a9 08		lda #$08		lda	#8
.8c30	4c 43 8d	jmp $8d43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c33					ProcedureScan:
.8c33	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c35	85 30		sta $30				sta 	codePtr
.8c37	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c39	85 31		sta $31				sta 	codePtr+1
.8c3b					_PSLoop:
.8c3b	b2 30		lda ($30)			lda 	(codePtr)
.8c3d	f0 42		beq $8c81			beq 	_PSExit
.8c3f	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c41	b1 30		lda ($30),y			lda 	(codePtr),y
.8c43	c9 a2		cmp #$a2			cmp 	#KWD_PROC
.8c45	d0 2d		bne $8c74			bne 	_PSNext
.8c47	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c48	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4a	29 c0		and #$c0			and 	#$C0
.8c4c	c9 40		cmp #$40			cmp 	#$40
.8c4e	d0 32		bne $8c82			bne 	_PSSyntax
.8c50	b1 30		lda ($30),y			lda 	(codePtr),y
.8c52	18		clc				clc
.8c53	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c55	85 37		sta $37				sta 	zTemp0+1
.8c57	c8		iny				iny 								; LSB
.8c58	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5a	85 36		sta $36				sta 	zTemp0
.8c5c	c8		iny				iny 								; character after variable call.
.8c5d	98		tya				tya 								; save Y offset at +7
.8c5e	a0 07		ldy #$07			ldy 	#7
.8c60	91 36		sta ($36),y			sta 	(zTemp0),y
.8c62	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c64	a0 02		ldy #$02			ldy 	#2
.8c66	91 36		sta ($36),y			sta 	(zTemp0),y
.8c68	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c6a					_PSCopy:
.8c6a	b5 30		lda $30,x			lda 	safePtr,x
.8c6c	c8		iny				iny
.8c6d	91 36		sta ($36),y			sta 	(zTemp0),y
.8c6f	e8		inx				inx
.8c70	e0 04		cpx #$04			cpx 	#4
.8c72	d0 f6		bne $8c6a			bne 	_PSCopy
.8c74					_PSNext:
.8c74	18		clc				clc
.8c75	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c77	65 30		adc $30				adc 	codePtr
.8c79	85 30		sta $30				sta 	codePtr
.8c7b	90 02		bcc $8c7f			bcc 	_CREExit
.8c7d	e6 31		inc $31				inc 	codePtr+1
.8c7f					_CREExit:
.8c7f	80 ba		bra $8c3b			bra 	_PSLoop
.8c81					_PSExit:
.8c81	60		rts				rts
.8c82					_PSSyntax:
.8c82	4c 90 9f	jmp $9f90			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c85					ScanForward:
.8c85	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c87	86 37		stx $37				stx 	zTemp0+1
.8c89	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c8b					_ScanLoop:
.8c8b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c8d	c8		iny				iny
.8c8e	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c90	d0 0e		bne $8ca0			bne 	_ScanGoNext
.8c92	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c94	f0 04		beq $8c9a			beq 	_ScanMatch
.8c96	c5 37		cmp $37				cmp 	zTemp0+1
.8c98	d0 06		bne $8ca0			bne 	_ScanGoNext
.8c9a					_ScanMatch:
.8c9a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c9c	d0 01		bne $8c9f			bne 	_ScanNotEndEOL
.8c9e	88		dey				dey
.8c9f					_ScanNotEndEOL:
.8c9f	60		rts				rts
.8ca0					_ScanGoNext:
.8ca0	20 a5 8c	jsr $8ca5			jsr  	ScanForwardOne
.8ca3	80 e6		bra $8c8b			bra 	_ScanLoop
.8ca5					ScanForwardOne:
.8ca5	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8ca7	90 3e		bcc $8ce7			bcc 	_SFWExit
.8ca9	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8cab	90 18		bcc $8cc5			bcc 	_ScanSkipOne
.8cad	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8caf	b0 2f		bcs $8ce0			bcs 	_ScanSkipData
.8cb1	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cb3	90 32		bcc $8ce7			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cb5	c9 ab		cmp #$ab			cmp 	#KWC_LAST_STRUCTURE+1
.8cb7	b0 2e		bcs $8ce7			bcs 	_SFWExit
.8cb9	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cbb	c9 a5		cmp #$a5			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cbd	b0 28		bcs $8ce7			bcs 	_SFWExit
.8cbf	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cc1	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cc3	80 22		bra $8ce7			bra 	_SFWExit
.8cc5					_ScanSkipOne:
.8cc5	c8		iny				iny 								; consume the extra one.
.8cc6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cc8	d0 1d		bne $8ce7			bne 	_SFWExit
.8cca	18		clc				clc
.8ccb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ccd	65 30		adc $30				adc 	codePtr
.8ccf	85 30		sta $30				sta 	codePtr
.8cd1	90 02		bcc $8cd5			bcc 	_CREExit
.8cd3	e6 31		inc $31				inc 	codePtr+1
.8cd5					_CREExit:
.8cd5	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8cd7	b2 30		lda ($30)			lda 	(codePtr)
.8cd9	d0 0c		bne $8ce7			bne 	_SFWExit 					; if not zero, more to scan
.8cdb	a9 13		lda #$13		lda	#19
.8cdd	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.8ce0					_ScanSkipData:
.8ce0	88		dey				dey 								; point at data token
.8ce1	c8		iny				iny
.8ce2	98		tya				tya
.8ce3	38		sec				sec
.8ce4	71 30		adc ($30),y			adc 	(codePtr),y
.8ce6	a8		tay				tay
.8ce7					_SFWExit:
.8ce7	60		rts				rts
.8ce8					ScanGetCurrentLineStep:
.8ce8	64 38		stz $38				stz 	zTemp1
.8cea	a0 03		ldy #$03			ldy 	#3
.8cec					_SGCLSLoop:
.8cec	b1 30		lda ($30),y			lda 	(codePtr),y
.8cee	c8		iny				iny
.8cef	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8cf1	f0 05		beq $8cf8			beq 	_SGCLSExit
.8cf3	20 a5 8c	jsr $8ca5			jsr 	ScanForwardOne
.8cf6	80 f4		bra $8cec			bra 	_SGCLSLoop
.8cf8					_SGCLSExit:
.8cf8	a5 38		lda $38				lda 	zTemp1
.8cfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cfb					Command_WHILE:
.8cfb	5a		phy				phy 								; save position of the test
.8cfc	a2 00		ldx #$00			ldx 	#0
.8cfe	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber 				; work out the number
.8d01	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; check if zero
.8d04	f0 0e		beq $8d14			beq 	_WHExitLoop 				; if so exit the loop
.8d06	98		tya				tya 								; position *after* test.
.8d07	7a		ply				ply 								; restore position before test, at WHILE
.8d08	88		dey				dey
.8d09	48		pha				pha 								; push after test on the stack
.8d0a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d0c	20 f4 a5	jsr $a5f4			jsr 	StackOpen
.8d0f	20 38 a6	jsr $a638			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d12	7a		ply				ply 								; restore the position *after* the test
.8d13	60		rts				rts
.8d14					_WHExitLoop:
.8d14	68		pla				pla 								; throw post loop position
.8d15	a9 aa		lda #$aa			lda 	#KWD_WEND 					; scan forward past WEND
.8d17	aa		tax				tax
.8d18	20 85 8c	jsr $8c85			jsr 	ScanForward
.8d1b	60		rts				rts
.8d1c					Command_WEND:
.8d1c	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d1e	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d20	20 20 a6	jsr $a620			jsr 	StackCheckFrame
.8d23	20 49 a6	jsr $a649			jsr 	STKLoadCodePosition 		; loop back
.8d26	20 12 a6	jsr $a612			jsr 	StackClose		 			; erase the frame
.8d29	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d2a					CheckRightBracket:
.8d2a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2c	c8		iny				iny
.8d2d	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d2f	d0 0f		bne $8d40			bne 	CNAFail
.8d31	60		rts				rts
.8d32					CheckComma:
.8d32	b1 30		lda ($30),y			lda 	(codePtr),y
.8d34	c8		iny				iny
.8d35	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d37	d0 07		bne $8d40			bne 	CNAFail
.8d39	60		rts				rts
.8d3a					CheckNextA:
.8d3a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d3c	d0 02		bne $8d40			bne 	CNAFail
.8d3e	c8		iny				iny 								; skip character
.8d3f	60		rts				rts 								; and exit
.8d40					CNAFail:
.8d40	4c 90 9f	jmp $9f90			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d43					ErrorHandler:
.8d43	a8		tay				tay 								; find the error text
.8d44	f0 49		beq $8d8f			beq 	_EHEnd
.8d46	a2 00		ldx #$00			ldx 	#0
.8d48	a9 a9		lda #$a9			lda 	#((ErrorText) & $FF)
.8d4a	85 36		sta $36				sta 	0+zTemp0
.8d4c	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d4e	85 37		sta $37				sta 	1+zTemp0
.8d50					_EHFind:
.8d50	88		dey				dey 								; found the error text ?
.8d51	f0 0e		beq $8d61			beq 	_EHFound
.8d53					_EHFindZero:
.8d53	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d55	e6 36		inc $36				inc 	zTemp0
.8d57	d0 02		bne $8d5b			bne 	_EHFNoCarry
.8d59	e6 37		inc $37				inc 	zTemp0+1
.8d5b					_EHFNoCarry:
.8d5b	c9 00		cmp #$00			cmp 	#0
.8d5d	d0 f4		bne $8d53			bne 	_EHFindZero
.8d5f	80 ef		bra $8d50			bra 	_EHFind
.8d61					_EHFound:
.8d61	a5 36		lda $36				lda 	zTemp0 						; print message
.8d63	a6 37		ldx $37				ldx 	zTemp0+1
.8d65	20 9c 8d	jsr $8d9c			jsr 	PrintStringXA
.8d68	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6c	d0 05		bne $8d73			bne 	_EHAtMsg
.8d6e	c8		iny				iny
.8d6f	b1 30		lda ($30),y			lda 	(codePtr),y
.8d71	f0 17		beq $8d8a			beq 	_EHCREnd
.8d73					_EHAtMsg:
.8d73	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d75	a9 92		lda #$92			lda 	#_AtMsg & $FF
.8d77	20 9c 8d	jsr $8d9c			jsr 	PrintStringXA
.8d7a	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d7c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7e	48		pha				pha
.8d7f	c8		iny				iny
.8d80	b1 30		lda ($30),y			lda 	(codePtr),y
.8d82	aa		tax				tax
.8d83	68		pla				pla
.8d84	20 55 92	jsr $9255			jsr 	LCLConvertInt16 				; convert XA to string
.8d87	20 9c 8d	jsr $8d9c			jsr 	PrintStringXA 				; and print it.
.8d8a					_EHCREnd:
.8d8a	a9 0d		lda #$0d			lda 	#13 						; new line
.8d8c	20 34 a7	jsr $a734			jsr 	EXTPrintCharacter
.8d8f					_EHEnd:
.8d8f	4c 45 83	jmp $8345			jmp 	WarmStart
>8d92	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d9a	20 00
.8d9c					PrintStringXA:
.8d9c	5a		phy				phy
.8d9d	86 37		stx $37				stx 	zTemp0+1
.8d9f	85 36		sta $36				sta 	zTemp0
.8da1	a0 00		ldy #$00			ldy 	#0
.8da3					_PSXALoop:
.8da3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8da5	f0 06		beq $8dad			beq 	_PSXAExit
.8da7	20 34 a7	jsr $a734			jsr 	EXTPrintCharacter
.8daa	c8		iny				iny
.8dab	80 f6		bra $8da3			bra 	_PSXALoop
.8dad					_PSXAExit:
.8dad	7a		ply				ply
.8dae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8daf					UnaryTrue:
.8daf	fa		plx				plx
.8db0					ReturnTrue:
.8db0	a9 01		lda #$01			lda 	#1  						; set to 1
.8db2	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.8db5	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8db7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dba	60		rts				rts
.8dbb					UnaryFalse:
.8dbb	fa		plx				plx
.8dbc					ReturnFalse:
.8dbc	4c 06 9e	jmp $9e06			jmp 	NSMSetZero 					; set it all to zero
.8dbf					BinaryCompareEqual:
.8dbf	fa		plx				plx
.8dc0	20 fb 8d	jsr $8dfb			jsr 	CompareBaseCode
.8dc3	c9 00		cmp #$00			cmp 	#0
.8dc5	f0 e9		beq $8db0			beq 	ReturnTrue
.8dc7	80 f3		bra $8dbc			bra 	ReturnFalse
.8dc9					BinaryCompareLess:
.8dc9	fa		plx				plx
.8dca	20 fb 8d	jsr $8dfb			jsr 	CompareBaseCode
.8dcd	c9 ff		cmp #$ff			cmp 	#$FF
.8dcf	f0 df		beq $8db0			beq 	ReturnTrue
.8dd1	80 e9		bra $8dbc			bra 	ReturnFalse
.8dd3					BinaryCompareGreater:
.8dd3	fa		plx				plx
.8dd4	20 fb 8d	jsr $8dfb			jsr 	CompareBaseCode
.8dd7	c9 01		cmp #$01			cmp 	#1
.8dd9	f0 d5		beq $8db0			beq 	ReturnTrue
.8ddb	80 df		bra $8dbc			bra 	ReturnFalse
.8ddd					BinaryCompareNotEqual:
.8ddd	fa		plx				plx
.8dde	20 fb 8d	jsr $8dfb			jsr 	CompareBaseCode
.8de1	c9 00		cmp #$00			cmp 	#0
.8de3	d0 cb		bne $8db0			bne 	ReturnTrue
.8de5	80 d5		bra $8dbc			bra 	ReturnFalse
.8de7					BinaryCompareLessEqual:
.8de7	fa		plx				plx
.8de8	20 fb 8d	jsr $8dfb			jsr 	CompareBaseCode
.8deb	c9 01		cmp #$01			cmp 	#1
.8ded	d0 c1		bne $8db0			bne 	ReturnTrue
.8def	80 cb		bra $8dbc			bra 	ReturnFalse
.8df1					BinaryCompareGreaterEqual:
.8df1	fa		plx				plx
.8df2	20 fb 8d	jsr $8dfb			jsr 	CompareBaseCode
.8df5	c9 ff		cmp #$ff			cmp 	#$FF
.8df7	d0 b7		bne $8db0			bne 	ReturnTrue
.8df9	80 c1		bra $8dbc			bra 	ReturnFalse
.8dfb					CompareBaseCode:
.8dfb	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; make both values if references.
.8dfe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8e01	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e04	29 10		and #$10			and 	#NSTString
.8e06	d0 40		bne $8e48			bne 	_CBCString
.8e08	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e0b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e0e	d0 3b		bne $8e4b			bne 	_CBCFloat
.8e10	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e13	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e16	29 08		and #$08			and 	#NSTFloat
.8e18	d0 31		bne $8e4b			bne 	_CBCFloat
.8e1a	20 4e 8e	jsr $8e4e			jsr 	CompareFixMinusZero
.8e1d	e8		inx				inx
.8e1e	20 4e 8e	jsr $8e4e			jsr 	CompareFixMinusZero
.8e21	ca		dex				dex
.8e22	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e25	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e28	10 0b		bpl $8e35			bpl 	_CDCSameSign
.8e2a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e2d	30 16		bmi $8e45			bmi 	_CBCLess 					; return $FF
.8e2f					_CBCGreater:
.8e2f	a9 01		lda #$01			lda 	#1
.8e31	60		rts				rts
.8e32					_CBCEqual:
.8e32	a9 00		lda #$00			lda 	#0
.8e34	60		rts				rts
.8e35					_CDCSameSign:
.8e35	20 a1 90	jsr $90a1			jsr 	SubTopTwoStack 				; unsigned subtract
.8e38	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; or the mantissa together
.8e3b	f0 f5		beq $8e32			beq 	_CBCEqual 					; -0 == 0
.8e3d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e40	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e43	10 ea		bpl $8e2f			bpl 	_CBCGreater
.8e45					_CBCLess:
.8e45	a9 ff		lda #$ff			lda 	#$FF
.8e47	60		rts				rts
.8e48					_CBCString:
.8e48	4c f7 8f	jmp $8ff7			jmp 	CompareStrings
.8e4b					_CBCFloat:
.8e4b	4c d8 93	jmp $93d8			jmp 	CompareFloat
.8e4e					CompareFixMinusZero:
.8e4e	20 36 9e	jsr $9e36			jsr 	NSMIsZero
.8e51	d0 03		bne $8e56			bne 	_CFXMZNotZero
.8e53	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e56					_CFXMZNotZero:
.8e56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e57					StringConcat:
.8e57	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e5a	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e5d	29 18		and #$18			and 	#NSBTypeMask
.8e5f	c9 10		cmp #$10			cmp 	#NSTString
.8e61	d0 4e		bne $8eb1			bne		_SCType
.8e63	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e65	e8		inx				inx
.8e66	20 84 8e	jsr $8e84			jsr 	_SCSetupZ0 					; setup for second
.8e69	20 8f 8e	jsr $8e8f			jsr 	_SCLengthZ0 				; length for second
.8e6c	ca		dex				dex
.8e6d	20 84 8e	jsr $8e84			jsr 	_SCSetupZ0 					; setup for first
.8e70	20 8f 8e	jsr $8e8f			jsr 	_SCLengthZ0 				; length for first
.8e73	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e75	20 e7 a6	jsr $a6e7			jsr 	StringTempAllocate
.8e78	20 a2 8e	jsr $8ea2			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e7b	e8		inx				inx
.8e7c	20 84 8e	jsr $8e84			jsr 	_SCSetupZ0 					; copy second out
.8e7f	20 a2 8e	jsr $8ea2			jsr 	_SCCopy
.8e82	ca		dex				dex
.8e83	60		rts				rts
.8e84					_SCSetupZ0:
.8e84	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e87	85 36		sta $36				sta 	zTemp0
.8e89	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e8c	85 37		sta $37				sta 	zTemp0+1
.8e8e	60		rts				rts
.8e8f					_SCLengthZ0:
.8e8f	5a		phy				phy
.8e90	a0 00		ldy #$00			ldy 	#0
.8e92					_SCLenLoop:
.8e92	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e94	f0 0a		beq $8ea0			beq 	_SCLExit
.8e96	c8		iny				iny
.8e97	e6 38		inc $38				inc 	zTemp1
.8e99	10 f7		bpl $8e92			bpl		_SCLenLoop
.8e9b	a9 09		lda #$09		lda	#9
.8e9d	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.8ea0					_SCLExit:
.8ea0	7a		ply				ply
.8ea1	60		rts				rts
.8ea2					_SCCopy:
.8ea2	5a		phy				phy
.8ea3	a0 00		ldy #$00			ldy 	#0
.8ea5					_SCCopyLoop:
.8ea5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea7	f0 06		beq $8eaf			beq 	_SCCExit
.8ea9	20 25 a7	jsr $a725			jsr 	StringTempWrite
.8eac	c8		iny				iny
.8ead	80 f6		bra $8ea5			bra 	_SCCopyLoop
.8eaf					_SCCExit:
.8eaf	7a		ply				ply
.8eb0	60		rts				rts
.8eb1					_SCType:
.8eb1	4c 9a 9f	jmp $9f9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8eb4					IntegerDivide:
.8eb4	fa		plx				plx
.8eb5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eb8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ebb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ebc	0a		asl a				asl 	a
.8ebd	10 05		bpl $8ec4			bpl 	_NotRef
.8ebf	48		pha				pha
.8ec0	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ec3	68		pla				pla
.8ec4					_NotRef:
.8ec4	0a		asl a				asl 	a
.8ec5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ec7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8eca	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ecd	f0 03		beq $8ed2			beq 	_IntegerCode 				; if clear, then we have two integers
.8ecf	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.8ed2					_IntegerCode:
.8ed2	20 f4 8e	jsr $8ef4			jsr 	CheckDivideZero 			; do div zero check
.8ed5	20 2c 8f	jsr $8f2c			jsr 	Int32Divide 				; do the division
.8ed8	20 e9 8f	jsr $8fe9			jsr 	CalculateSign 				; calculate result sign
.8edb					NSMCopyPlusTwoToZero:
.8edb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ede	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ee1	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ee4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ee7	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8eea	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8eed	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8ef0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8ef3	60		rts				rts
.8ef4					CheckDivideZero:
.8ef4	e8		inx				inx
.8ef5	20 36 9e	jsr $9e36			jsr 	NSMIsZero
.8ef8	f0 02		beq $8efc			beq 	_CDVError
.8efa	ca		dex				dex
.8efb	60		rts				rts
.8efc					_CDVError:
.8efc	a9 03		lda #$03		lda	#3
.8efe	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.8f01					IntegerModulus:
.8f01	fa		plx				plx
.8f02	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f05	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f08	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f09	0a		asl a				asl 	a
.8f0a	10 05		bpl $8f11			bpl 	_NotRef
.8f0c	48		pha				pha
.8f0d	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f10	68		pla				pla
.8f11					_NotRef:
.8f11	0a		asl a				asl 	a
.8f12	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f14	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f17	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f1a	f0 03		beq $8f1f			beq 	_IntegerCode 				; if clear, then we have two integers
.8f1c	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.8f1f					_IntegerCode:
.8f1f					IntegerModulusNoCheck:
.8f1f	20 f4 8e	jsr $8ef4			jsr 	CheckDivideZero 			; do div zero check
.8f22	20 2c 8f	jsr $8f2c			jsr 	Int32Divide 				; do the division
.8f25	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f28	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f2b	60		rts				rts
.8f2c					Int32Divide:
.8f2c	48		pha				pha 								; save AXY
.8f2d	5a		phy				phy
.8f2e	20 dd 9d	jsr $9ddd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f31	20 02 9e	jsr $9e02			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f34	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f36					_I32DivideLoop:
.8f36	e8		inx				inx
.8f37	e8		inx				inx
.8f38	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f3b	ca		dex				dex
.8f3c	ca		dex				dex
.8f3d	20 1c 9e	jsr $9e1c			jsr 	NSMRotateLeft
.8f40	20 6c 8f	jsr $8f6c			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f43	90 03		bcc $8f48			bcc 	_I32DivideNoCarryIn
.8f45	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f48					_I32DivideNoCarryIn:
.8f48	88		dey				dey 								; loop round till division completed.
.8f49	d0 eb		bne $8f36			bne 	_I32DivideLoop
.8f4b	7a		ply				ply 								; restore AXY and exit
.8f4c	68		pla				pla
.8f4d	60		rts				rts
.8f4e					Int32ShiftDivide:
.8f4e	48		pha				pha 								; save AY
.8f4f	5a		phy				phy
.8f50	e8		inx				inx 								; clear S[X+2]
.8f51	e8		inx				inx
.8f52	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.8f55	ca		dex				dex
.8f56	ca		dex				dex
.8f57	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f59					_I32SDLoop:
.8f59	20 6c 8f	jsr $8f6c			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f5c	e8		inx				inx
.8f5d	e8		inx				inx
.8f5e	20 1c 9e	jsr $9e1c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f61	ca		dex				dex
.8f62	ca		dex				dex
.8f63	20 1c 9e	jsr $9e1c			jsr 	NSMRotateLeft
.8f66	88		dey				dey 	 							; do 31 times
.8f67	d0 f0		bne $8f59			bne 	_I32SDLoop
.8f69	7a		ply				ply 								; restore AY and exit
.8f6a	68		pla				pla
.8f6b	60		rts				rts
.8f6c					DivideCheckSubtract:
.8f6c	20 a1 90	jsr $90a1			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f6f	b0 04		bcs $8f75			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f71	20 7b 90	jsr $907b			jsr 	AddTopTwoStack 				; add it back in
.8f74	18		clc				clc 								; and return False
.8f75					_DCSExit:
.8f75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f76					MulInteger:
.8f76	fa		plx				plx
.8f77	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f7a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f7d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f7e	0a		asl a				asl 	a
.8f7f	10 05		bpl $8f86			bpl 	_NotRef
.8f81	48		pha				pha
.8f82	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f85	68		pla				pla
.8f86					_NotRef:
.8f86	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f87	30 0b		bmi $8f94			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f89	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f8c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f8f	f0 06		beq $8f97			beq 	_IntegerCode 				; if clear, then we have two integers
.8f91	4c af 94	jmp $94af			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f94					_StringData:
.8f94	4c a4 9f	jmp $9fa4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f97					_IntegerCode:
.8f97	20 a4 8f	jsr $8fa4			jsr 	MultiplyShort
.8f9a	c9 00		cmp #$00			cmp 	#0
.8f9c	f0 05		beq $8fa3			beq 	_MIExit
.8f9e	a9 04		lda #$04		lda	#4
.8fa0	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.8fa3					_MIExit:
.8fa3	60		rts				rts
.8fa4					MultiplyShort:
.8fa4	5a		phy				phy 								; save Y
.8fa5	20 dd 9d	jsr $9ddd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fa8	20 02 9e	jsr $9e02			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fab	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fad					_I32MLoop:
.8fad	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fb0	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fb3	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fb6	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fb9	f0 28		beq $8fe3			beq 	_I32MExit 					; exit if zero
.8fbb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fbe	29 01		and #$01			and 	#1
.8fc0	f0 0e		beq $8fd0			beq 	_I32MNoAdd
.8fc2	20 7b 90	jsr $907b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fc5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fc8	10 06		bpl $8fd0			bpl 	_I32MNoAdd
.8fca					_I32ShiftRight:
.8fca	20 29 9e	jsr $9e29			jsr 	NSMShiftRight 				; shift S[X] right
.8fcd	c8		iny				iny 								; increment shift count
.8fce	80 0a		bra $8fda			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fd0					_I32MNoAdd:
.8fd0	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fd3	70 f5		bvs $8fca			bvs 	_I32ShiftRight 				; instead.
.8fd5	e8		inx				inx
.8fd6	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fd9	ca		dex				dex
.8fda					_I32MShiftUpper:
.8fda	e8		inx				inx 								; shift S[X+2] right
.8fdb	e8		inx				inx
.8fdc	20 29 9e	jsr $9e29			jsr 	NSMShiftRight
.8fdf	ca		dex				dex
.8fe0	ca		dex				dex
.8fe1	80 ca		bra $8fad			bra 	_I32MLoop 					; try again.
.8fe3					_I32MExit:
.8fe3	20 e9 8f	jsr $8fe9			jsr 	CalculateSign
.8fe6	98		tya				tya 								; shift in A
.8fe7	7a		ply				ply 								; restore Y and exit
.8fe8	60		rts				rts
.8fe9					CalculateSign:
.8fe9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fec	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fef	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8ff2	0a		asl a				asl 	a 							; shift bit 7 into carry
.8ff3	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8ff6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8ff7					CompareStrings:
.8ff7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8ffa	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ffd	29 10		and #$10			and 	#NSBIsString
.8fff	f0 2c		beq $902d			beq 	_CSTypeError
.9001	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9004	85 36		sta $36				sta 	zTemp0
.9006	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9009	85 37		sta $37				sta 	zTemp0+1
.900b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.900e	85 38		sta $38				sta 	zTemp1
.9010	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9013	85 39		sta $39				sta 	zTemp1+1
.9015	5a		phy				phy 								; save Y so we can access strings
.9016	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9018					_CSLoop:
.9018	c8		iny				iny
.9019	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.901b	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.901d	d0 06		bne $9025			bne 	_CSDifferent
.901f	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9021	d0 f5		bne $9018			bne 	_CSLoop 					; still comparing
.9023					_CSExit:
.9023	7a		ply				ply 								; reached end, return zero in A from EOS
.9024	60		rts				rts
.9025					_CSDifferent:
.9025	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9027	90 fa		bcc $9023			bcc		_CSExit
.9029	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.902b	80 f6		bra $9023			bra 	_CSExit
.902d					_CSTypeError:
.902d	4c 9a 9f	jmp $9f9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9030					ShiftLeft:
.9030	38		sec				sec
.9031	80 01		bra $9034			bra 	ShiftMain
.9033					ShiftRight:
.9033	18		clc				clc
.9034					ShiftMain:
.9034	fa		plx				plx 								; restore X
.9035	08		php				php 								; save direction
.9036	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9039	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.903c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.903d	0a		asl a				asl 	a
.903e	10 05		bpl $9045			bpl 	_NotRef
.9040	48		pha				pha
.9041	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9044	68		pla				pla
.9045					_NotRef:
.9045	0a		asl a				asl 	a
.9046	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9048	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.904b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.904e	f0 03		beq $9053			beq 	_IntegerCode 				; if clear, then we have two integers
.9050	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.9053					_IntegerCode:
.9053	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9056	29 e0		and #$e0			and 	#$E0
.9058	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.905b	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.905e	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9061	d0 13		bne $9076			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9063					_SMLoop:
.9063	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9066	30 11		bmi $9079			bmi 	_SMExit 					; exit if done.
.9068	28		plp				plp 								; restore direcition setting
.9069	08		php				php
.906a	90 05		bcc $9071			bcc 	_SMRight
.906c	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; shift left if CS
.906f	80 f2		bra $9063			bra 	_SMLoop
.9071					_SMRight:
.9071	20 29 9e	jsr $9e29			jsr 	NSMShiftRight 				; shift right if CC
.9074	80 ed		bra $9063			bra 	_SMLoop
.9076					_SMExit0:
.9076	20 06 9e	jsr $9e06			jsr 	NSMSetZero 					; return zero.
.9079					_SMExit:
.9079	28		plp				plp 								; throw direction
.907a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.907b					AddTopTwoStack:
.907b	18		clc				clc
.907c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.907f	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9082	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9085	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9088	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.908b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.908e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9091	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9094	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9097	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.909a	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.909d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90a0	60		rts				rts
.90a1					SubTopTwoStack:
.90a1	38		sec				sec
.90a2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90a5	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90a8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90ab	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90ae	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90b1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90b4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90b7	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90ba	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90bd	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90c0	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90c3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90c6	60		rts				rts
.90c7					AddInteger:
.90c7	fa		plx				plx
.90c8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90cb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90ce	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90cf	0a		asl a				asl 	a
.90d0	10 05		bpl $90d7			bpl 	_NotRef
.90d2	48		pha				pha
.90d3	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90d6	68		pla				pla
.90d7					_NotRef:
.90d7	0a		asl a				asl 	a 							; put MSB of type into A:7
.90d8	30 0b		bmi $90e5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90da	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90dd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90e0	f0 06		beq $90e8			beq 	_IntegerCode 				; if clear, then we have two integers
.90e2	4c 2f 93	jmp $932f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90e5					_StringData:
.90e5	4c 57 8e	jmp $8e57			jmp 	StringConcat							; at least one string - don't know both are strings.
.90e8					_IntegerCode:
.90e8					AddCode:
.90e8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90eb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90ee	10 8b		bpl $907b			bpl 	AddTopTwoStack
.90f0	20 a1 90	jsr $90a1			jsr 	SubTopTwoStack 				; do a physical subtraction
.90f3	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90f6	10 09		bpl $9101			bpl 	_AddExit
.90f8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90fb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90fe	20 bb 9d	jsr $9dbb			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9101					_AddExit:
.9101	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; check for -0
.9104	d0 03		bne $9109			bne 	_AddNonZero
.9106	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9109					_AddNonZero:
.9109	60		rts				rts
.910a					SubInteger:
.910a	fa		plx				plx
.910b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.910e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9111	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9112	0a		asl a				asl 	a
.9113	10 05		bpl $911a			bpl 	_NotRef
.9115	48		pha				pha
.9116	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9119	68		pla				pla
.911a					_NotRef:
.911a	0a		asl a				asl 	a 							; put MSB of type into A:7
.911b	30 0b		bmi $9128			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.911d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9120	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9123	f0 06		beq $912b			beq 	_IntegerCode 				; if clear, then we have two integers
.9125	4c 34 93	jmp $9334			jmp 	FloatingPointSub 							; otherwise at least one float.
.9128					_StringData:
.9128	4c a4 9f	jmp $9fa4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.912b					_IntegerCode:
.912b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.912e	49 80		eor #$80			eor 	#$80
.9130	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9133	80 b3		bra $90e8			bra 	AddCode 					; and do the same code as add.
.9135					AndInteger:
.9135	fa		plx				plx
.9136	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9139	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.913c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.913d	0a		asl a				asl 	a
.913e	10 05		bpl $9145			bpl 	_NotRef
.9140	48		pha				pha
.9141	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9144	68		pla				pla
.9145					_NotRef:
.9145	0a		asl a				asl 	a
.9146	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9148	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.914b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.914e	f0 03		beq $9153			beq 	_IntegerCode 				; if clear, then we have two integers
.9150	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.9153					_IntegerCode:
.9153	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9156	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9159	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.915c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.915f	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9162	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9165	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9168	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.916b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.916e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9171	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9174	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9177	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.917a	60		rts				rts
.917b					OraInteger:
.917b	fa		plx				plx
.917c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.917f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9182	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9183	0a		asl a				asl 	a
.9184	10 05		bpl $918b			bpl 	_NotRef
.9186	48		pha				pha
.9187	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.918a	68		pla				pla
.918b					_NotRef:
.918b	0a		asl a				asl 	a
.918c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.918e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9191	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9194	f0 03		beq $9199			beq 	_IntegerCode 				; if clear, then we have two integers
.9196	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.9199					_IntegerCode:
.9199	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.919c	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.919f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91a2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91a5	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91a8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91ab	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91ae	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91b1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91b4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91b7	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91ba	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91bd	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91c0	60		rts				rts
.91c1					EorInteger:
.91c1	fa		plx				plx
.91c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91c5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91c8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91c9	0a		asl a				asl 	a
.91ca	10 05		bpl $91d1			bpl 	_NotRef
.91cc	48		pha				pha
.91cd	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91d0	68		pla				pla
.91d1					_NotRef:
.91d1	0a		asl a				asl 	a
.91d2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91d4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91d7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91da	f0 03		beq $91df			beq 	_IntegerCode 				; if clear, then we have two integers
.91dc	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.91df					_IntegerCode:
.91df	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91e2	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91e5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91e8	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91eb	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91ee	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91f1	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91f4	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91f7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91fa	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91fd	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9200	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9203	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9206	60		rts				rts
.9207					WordIndirect:
.9207	fa		plx				plx
.9208	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.920b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.920e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.920f	0a		asl a				asl 	a
.9210	10 05		bpl $9217			bpl 	_NotRef
.9212	48		pha				pha
.9213	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9216	68		pla				pla
.9217					_NotRef:
.9217	0a		asl a				asl 	a
.9218	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.921a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.921d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9220	f0 03		beq $9225			beq 	_IntegerCode 				; if clear, then we have two integers
.9222	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.9225					_IntegerCode:
.9225	20 e8 90	jsr $90e8			jsr 	AddCode 					; add the two values
.9228	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.922a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.922d	60		rts				rts
.922e					ByteIndirect:
.922e	fa		plx				plx
.922f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9232	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9235	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9236	0a		asl a				asl 	a
.9237	10 05		bpl $923e			bpl 	_NotRef
.9239	48		pha				pha
.923a	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.923d	68		pla				pla
.923e					_NotRef:
.923e	0a		asl a				asl 	a
.923f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9241	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9244	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9247	f0 03		beq $924c			beq 	_IntegerCode 				; if clear, then we have two integers
.9249	4c 9a 9f	jmp $9f9a			jmp 	TypeError 					; anything else, type mismatch.
.924c					_IntegerCode:
.924c	20 e8 90	jsr $90e8			jsr 	AddCode 					; add the two values
.924f	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9251	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9254	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9255					LCLConvertInt16:
.9255	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.9258	8e 10 04	stx $0410			stx 	NSMantissa1
.925b	9c 18 04	stz $0418			stz 	NSMantissa2
.925e	9c 20 04	stz $0420			stz 	NSMantissa3
.9261	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9264	a2 00		ldx #$00			ldx 	#0 							; stack level
.9266	a9 0a		lda #$0a			lda 	#10 						; base
.9268	80 00		bra $926a			bra 	ConvertInt32
.926a					ConvertInt32:
.926a	5a		phy				phy
.926b	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.926d	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9270	10 08		bpl $927a			bpl 	_CI32NotNeg
.9272	48		pha				pha
.9273	a9 2d		lda #$2d			lda 	#'-'
.9275	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9278	c8		iny				iny
.9279	68		pla				pla
.927a					_CI32NotNeg:
.927a	20 88 92	jsr $9288			jsr 	_CI32DivideConvert 			; recursive conversion
.927d	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.927f	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9282	7a		ply				ply
.9283	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9285	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.9287	60		rts				rts
.9288					_CI32DivideConvert:
.9288	e8		inx				inx 								; write to next slot up
.9289	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.928c	ca		dex				dex
.928d	20 2c 8f	jsr $8f2c			jsr 	Int32Divide 				; divide
.9290	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.9293	48		pha				pha
.9294	20 db 8e	jsr $8edb			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9297	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; is it zero ?
.929a	f0 06		beq $92a2			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.929c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.929f	20 88 92	jsr $9288			jsr 	_CI32DivideConvert 			; and recusrively call.
.92a2					_CI32NoRecurse:
.92a2	68		pla				pla 								; remainder
.92a3	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92a5	90 02		bcc $92a9			bcc 	_CI32NotHex
.92a7	69 26		adc #$26			adc 	#6+32
.92a9					_CI32NotHex:
.92a9	69 30		adc #$30			adc 	#48
.92ab	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92ae	c8		iny				iny
.92af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92b0					PrecedenceLevel:
>92b0	04					.byte	 4	; $00 <<
>92b1	02					.byte	 2	; $01 <=
>92b2	02					.byte	 2	; $02 <>
>92b3	00					.byte	 0	; $03 !!3
>92b4	00					.byte	 0	; $04 ><
>92b5	02					.byte	 2	; $05 >=
>92b6	04					.byte	 4	; $06 >>
>92b7	00					.byte	 0	; $07 !!7
>92b8	00					.byte	 0	; $08 !!8
>92b9	00					.byte	 0	; $09 !!9
>92ba	00					.byte	 0	; $0a !!10
>92bb	00					.byte	 0	; $0b !!11
>92bc	00					.byte	 0	; $0c !!12
>92bd	00					.byte	 0	; $0d !!13
>92be	00					.byte	 0	; $0e !!14
>92bf	00					.byte	 0	; $0f !!15
>92c0	00					.byte	 0	; $10 @
>92c1	00					.byte	 0	; $11 !!17
>92c2	00					.byte	 0	; $12 !!18
>92c3	00					.byte	 0	; $13 [
>92c4	04					.byte	 4	; $14 \
>92c5	00					.byte	 0	; $15 ]
>92c6	01					.byte	 1	; $16 ^
>92c7	00					.byte	 0	; $17 _
>92c8	00					.byte	 0	; $18 `
>92c9	00					.byte	 0	; $19 !!25
>92ca	00					.byte	 0	; $1a !!26
>92cb	00					.byte	 0	; $1b {
>92cc	01					.byte	 1	; $1c |
>92cd	00					.byte	 0	; $1d }
>92ce	00					.byte	 0	; $1e ~
>92cf	00					.byte	 0	; $1f [7m<7F>[m
>92d0	00					.byte	 0	; $20
>92d1	05					.byte	 5	; $21 !
>92d2	00					.byte	 0	; $22 "
>92d3	00					.byte	 0	; $23 #
>92d4	05					.byte	 5	; $24 $
>92d5	04					.byte	 4	; $25 %
>92d6	01					.byte	 1	; $26 &
>92d7	00					.byte	 0	; $27 '
>92d8	00					.byte	 0	; $28 (
>92d9	00					.byte	 0	; $29 )
>92da	04					.byte	 4	; $2a *
>92db	03					.byte	 3	; $2b +
>92dc	00					.byte	 0	; $2c ,
>92dd	03					.byte	 3	; $2d -
>92de	00					.byte	 0	; $2e .
>92df	04					.byte	 4	; $2f /
>92e0	00					.byte	 0	; $30 0
>92e1	00					.byte	 0	; $31 1
>92e2	00					.byte	 0	; $32 2
>92e3	00					.byte	 0	; $33 3
>92e4	00					.byte	 0	; $34 4
>92e5	00					.byte	 0	; $35 5
>92e6	00					.byte	 0	; $36 6
>92e7	00					.byte	 0	; $37 7
>92e8	00					.byte	 0	; $38 8
>92e9	00					.byte	 0	; $39 9
>92ea	00					.byte	 0	; $3a :
>92eb	00					.byte	 0	; $3b ;
>92ec	02					.byte	 2	; $3c <
>92ed	02					.byte	 2	; $3d =
>92ee	02					.byte	 2	; $3e >
>92ef	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92f0					EvaluateExpressionAt0:
.92f0	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92f2					EvaluateExpression:
.92f2	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92f4					EvaluateExpressionAtPrecedence:
.92f4	48		pha				pha 								; save precedence level
.92f5	20 cc 97	jsr $97cc			jsr 	EvaluateTerm 				; evaluate term into level X.
.92f8	68		pla				pla 								; restore precedence level.
.92f9					_EXPRLoop:
.92f9	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92fb	b1 30		lda ($30),y			lda 	(codePtr),y
.92fd	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92ff	b0 25		bcs $9326			bcs 	_EXPRExit
.9301	da		phx				phx 								; read the operator precedence
.9302	aa		tax				tax
.9303	bd b0 92	lda $92b0,x			lda 	PrecedenceLevel,x
.9306	fa		plx				plx
.9307	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9309	f0 1b		beq $9326			beq 	_EXPRExit
.930b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.930d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.930f	c5 37		cmp $37				cmp 	zTemp0+1
.9311	b0 13		bcs $9326			bcs		_EXPRExit 					; if current >= operator exit
.9313	48		pha				pha 								; save current precedence.
.9314	b1 30		lda ($30),y			lda 	(codePtr),y
.9316	c8		iny				iny
.9317	48		pha				pha
.9318	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.931a	e8		inx				inx 								; work out the right hand side.
.931b	20 f4 92	jsr $92f4			jsr 	EvaluateExpressionAtPrecedence
.931e	ca		dex				dex
.931f	68		pla				pla 								; get operator, call the code.
.9320	20 29 93	jsr $9329			jsr 	_EXPRCaller
.9323	68		pla				pla 								; restore precedence level
.9324	80 d3		bra $92f9			bra 	_EXPRLoop 					; and go round.
.9326					_EXPRExit:
.9326	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9328	60		rts				rts
.9329					_EXPRCaller:
.9329	da		phx				phx 								; save on stack, first thing is to restore it
.932a	0a		asl a				asl 	a 							; double so can use vectors into X
.932b	aa		tax				tax
.932c	7c 70 8a	jmp ($8a70,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.932f					FloatingPointAdd:
.932f	20 d8 94	jsr $94d8			jsr 	FloatPrepare 				; prepare for floats
.9332	80 0b		bra $933f			bra 	FloatAdd
.9334					FloatingPointSub:
.9334	20 d8 94	jsr $94d8			jsr 	FloatPrepare 				; prepare for floats
.9337					FloatSubtract:
.9337	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.933a	49 80		eor #$80			eor 	#$80
.933c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.933f					FloatAdd:
.933f	48		pha				pha
.9340	5a		phy				phy
.9341	20 e9 94	jsr $94e9			jsr 	NSNormalise 				; normalise S[X]
.9344	f0 5c		beq $93a2			beq 	_FAReturn1
.9346	e8		inx				inx 								; normalise S[X+1]
.9347	20 e9 94	jsr $94e9			jsr 	NSNormalise
.934a	ca		dex				dex
.934b	c9 00		cmp #$00			cmp 	#0
.934d	f0 77		beq $93c6			beq 	_FAExit 					; if so, just return A
.934f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9352	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9355	f0 1b		beq $9372			beq 	_FAExponentsEqual
.9357	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.935a	a8		tay				tay
.935b	38		sec				sec 								; do a signed comparison of the exponents.
.935c	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.935f	50 02		bvc $9363			bvc 	_FANoSignedChange
.9361	49 80		eor #$80			eor 	#$80
.9363					_FANoSignedChange:
.9363	29 80		and #$80			and 	#$80
.9365	10 03		bpl $936a			bpl 	_FAHaveMax
.9367	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.936a					_FAHaveMax:
.936a	20 c9 93	jsr $93c9			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.936d	e8		inx				inx
.936e	20 c9 93	jsr $93c9			jsr 	_FAShiftToExponent
.9371	ca		dex				dex
.9372					_FAExponentsEqual:
.9372	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9375	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9378	30 10		bmi $938a			bmi 	_FADifferentSigns
.937a	20 7b 90	jsr $907b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.937d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9380	10 44		bpl $93c6			bpl 	_FAExit 					; if no, we are done.
.9382	20 29 9e	jsr $9e29			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9385	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9388	80 3c		bra $93c6			bra 	_FAExit
.938a					_FADifferentSigns:
.938a	20 a1 90	jsr $90a1			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.938d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9390	10 06		bpl $9398			bpl 	_FACheckZero 				; if no, check for -0
.9392	20 b2 9d	jsr $9db2			jsr 	NSMNegate 					; netate result
.9395	20 bb 9d	jsr $9dbb			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9398					_FACheckZero:
.9398	20 36 9e	jsr $9e36			jsr 	NSMIsZero	 				; check for -0
.939b	d0 29		bne $93c6			bne 	_FAExit
.939d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93a0	80 24		bra $93c6			bra 	_FAExit
.93a2					_FAReturn1:
.93a2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93a5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93a8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93ab	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93ae	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93b1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93b4	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93b7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93ba	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93bd	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93c0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93c3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93c6					_FAExit:
.93c6	7a		ply				ply
.93c7	68		pla				pla
.93c8	60		rts				rts
.93c9					_FAShiftToExponent:
.93c9					_FAShiftToExponent2:
.93c9	98		tya				tya 								; compare Y to exponent
.93ca	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93cd	f0 08		beq $93d7			beq 	_FASEExit 					; exit if so.
.93cf	20 29 9e	jsr $9e29			jsr 	NSMShiftRight	 			; shift the mantissa right
.93d2	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93d5	80 f2		bra $93c9			bra 	_FAShiftToExponent2
.93d7					_FASEExit:
.93d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93d8					CompareFloat:
.93d8	20 37 93	jsr $9337			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93db	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93de	29 f8		and #$f8			and 	#$F8
.93e0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93e3	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93e6	f0 09		beq $93f1			beq 	_FCExit 					; zero, so approximately identical
.93e8	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93ea	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93ed	10 02		bpl $93f1			bpl 	_FCExit
.93ef					_FCNegative:
.93ef	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93f1					_FCExit:
.93f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93f2					FDivideCommand:
.93f2	fa		plx				plx	 								; restore stack position
.93f3	20 d8 94	jsr $94d8			jsr 	FloatPrepare 				; prepare for floats
.93f6					FloatDivide:
.93f6	48		pha				pha
.93f7	e8		inx				inx
.93f8	20 e9 94	jsr $94e9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93fb	ca		dex				dex
.93fc	c9 00		cmp #$00			cmp 	#0
.93fe	f0 20		beq $9420			beq 	_FDZero
.9400	20 e9 94	jsr $94e9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9403	f0 19		beq $941e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9405	20 4e 8f	jsr $8f4e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9408	20 db 8e	jsr $8edb			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.940b	20 e9 94	jsr $94e9			jsr		NSNormalise 				; renormalise
.940e	20 e9 8f	jsr $8fe9			jsr 	CalculateSign 				; calculate result sign
.9411	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9414	38		sec				sec
.9415	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9418	38		sec				sec
.9419	e9 1e		sbc #$1e			sbc 	#30
.941b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.941e					_FDExit:
.941e	68		pla				pla
.941f	60		rts				rts
.9420					_FDZero:
.9420	a9 03		lda #$03		lda	#3
.9422	4c 43 8d	jmp $8d43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9425					FloatFractionalPart:
.9425	5a		phy				phy
.9426	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.9429	29 7f		and #$7f			and 	#$7F
.942b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.942e	20 e9 94	jsr $94e9			jsr 	NSNormalise
.9431	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9434	38		sec				sec
.9435	e9 e0		sbc #$e0			sbc 	#$E0
.9437	90 31		bcc $946a			bcc 	_FFPExit 					; already fractional
.9439	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.943b	b0 2a		bcs $9467			bcs 	_FFPZero
.943d	a8		tay				tay 								; put count to do in Y
.943e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9441	20 6c 94	jsr $946c			jsr 	_FFPPartial
.9444	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9447	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.944a	20 6c 94	jsr $946c			jsr 	_FFPPartial
.944d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9450	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9453	20 6c 94	jsr $946c			jsr 	_FFPPartial
.9456	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9459	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.945c	20 6c 94	jsr $946c			jsr 	_FFPPartial
.945f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9462	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; zeroed check.
.9465	d0 03		bne $946a			bne 	_FFPExit
.9467					_FFPZero:
.9467	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.946a					_FFPExit:
.946a	7a		ply				ply
.946b	60		rts				rts
.946c					_FFPPartial:
.946c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.946e	f0 17		beq $9487			beq 	_FFFPPExit
.9470	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9472	b0 0c		bcs $9480			bcs 	_FFFPPWholeByte
.9474	5a		phy				phy
.9475					_FFFPPLeft:
.9475	0a		asl a				asl 	a
.9476	88		dey				dey
.9477	d0 fc		bne $9475			bne 	_FFFPPLeft
.9479	7a		ply				ply
.947a					_FFFPPRight:
.947a	4a		lsr a				lsr 	a
.947b	88		dey				dey
.947c	d0 fc		bne $947a			bne 	_FFFPPRight
.947e	80 07		bra $9487			bra 	_FFFPPExit
.9480					_FFFPPWholeByte:
.9480	98		tya				tya 								; subtract 8 from count
.9481	38		sec				sec
.9482	e9 08		sbc #$08			sbc 	#8
.9484	a8		tay				tay
.9485	a9 00		lda #$00			lda 	#0 							; and clear all
.9487					_FFFPPExit:
.9487	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9488					FloatIntegerPart:
.9488	48		pha				pha
.9489	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.948c	f0 1f		beq $94ad			beq 	_FIPExit 					; if so do nothing
.948e	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; is it zero ?
.9491	f0 17		beq $94aa			beq 	_FIPZero 					; if so return zero.
.9493	20 e9 94	jsr $94e9			jsr 	NSNormalise 				; normalise
.9496	f0 12		beq $94aa			beq 	_FIPZero 					; normalised to zero, exit zero
.9498					_FIPShift:
.9498	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.949b	10 08		bpl $94a5			bpl 	_FIPCheckZero
.949d	20 29 9e	jsr $9e29			jsr 	NSMShiftRight 				; shift mantissa right
.94a0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.94a3	80 f3		bra $9498			bra 	_FIPShift
.94a5					_FIPCheckZero:
.94a5	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; avoid -0 problem
.94a8	d0 03		bne $94ad			bne 	_FIPExit 					; set to zero if mantissa zero.
.94aa					_FIPZero:
.94aa	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.94ad					_FIPExit:
.94ad	68		pla				pla
.94ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94af					FloatingPointMultiply:
.94af	20 d8 94	jsr $94d8			jsr 	FloatPrepare 				; prepare for floats
.94b2					FloatMultiply:
.94b2	48		pha				pha
.94b3	20 e9 94	jsr $94e9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94b6	f0 1b		beq $94d3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94b8	e8		inx				inx
.94b9	20 e9 94	jsr $94e9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94bc	ca		dex				dex
.94bd	c9 00		cmp #$00			cmp 	#0
.94bf	f0 0f		beq $94d0			beq 	_FDSetZero
.94c1	20 a4 8f	jsr $8fa4			jsr 	MultiplyShort 				; calculate the result.
.94c4	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94c7	18		clc				clc
.94c8	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94cb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94ce	80 03		bra $94d3			bra 	_FDExit
.94d0					_FDSetZero:
.94d0	20 06 9e	jsr $9e06			jsr 	NSMSetZero 					; return 0
.94d3					_FDExit:
.94d3	20 e9 94	jsr $94e9			jsr 	NSNormalise 				; normalise the result
.94d6	68		pla				pla
.94d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94d8					FloatPrepare:
.94d8	20 0b 96	jsr $960b			jsr 	DereferenceTopTwo 			; dereference the top two values
.94db	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94de	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94e1	29 10		and #$10			and 	#NSBIsString
.94e3	d0 01		bne $94e6			bne 	_FDType
.94e5	60		rts				rts
.94e6					_FDType:
.94e6	4c 9a 9f	jmp $9f9a			jmp 	TypeError
.94e9					NSNormalise:
.94e9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94ec	29 80		and #$80			and 	#$80
.94ee	09 08		ora #$08			ora 	#NSTFloat
.94f0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94f3	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; if zero exit
.94f6	d0 09		bne $9501			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94f8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94fb	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94fe	a9 00		lda #$00			lda 	#0 							; set Z flag
.9500	60		rts				rts
.9501					_NSNormaliseOptimise:
.9501	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9504	d0 22		bne $9528			bne 	_NSNormaliseLoop
.9506	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.9509	30 1d		bmi $9528			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.950b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.950e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9511	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9514	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9517	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.951a	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.951d	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9520	38		sec				sec
.9521	e9 08		sbc #$08			sbc 	#8
.9523	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9526	80 d9		bra $9501			bra 	_NSNormaliseOptimise
.9528					_NSNormaliseLoop:
.9528	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.952b	70 08		bvs $9535			bvs 	_NSNExit 					; exit if so with Z flag clear
.952d	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; shift mantissa left
.9530	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9533	80 f3		bra $9528			bra 	_NSNormaliseLoop
.9535					_NSNExit:
.9535	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9537	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9538					AssignNumber:
.9538	5a		phy				phy
.9539	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.953c	85 36		sta $36				sta 	zTemp0
.953e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9541	85 37		sta $37				sta 	zTemp0+1
.9543	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9546	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9548	9d 00 04	sta $0400,x			sta 	NSStatus,x
.954b	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.954d	c9 08		cmp #$08			cmp 	#NSTFloat
.954f	f0 2a		beq $957b			beq 	_ANFloat
.9551	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9554	f0 05		beq $955b			beq		_ANNotFloat
.9556	e8		inx				inx
.9557	20 88 94	jsr $9488			jsr 	FloatIntegerPart 			; make it an integer
.955a	ca		dex				dex
.955b					_ANNotFloat:
.955b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.955e	29 03		and #$03			and 	#3
.9560	d0 05		bne $9567			bne 	_ANByteWord
.9562	20 87 95	jsr $9587			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9565	80 1e		bra $9585			bra 	_ANExit
.9567					_ANByteWord:
.9567	48		pha				pha 								; save count
.9568	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.956b	92 36		sta ($36)			sta 	(zTemp0)
.956d	68		pla				pla
.956e	c9 01		cmp #$01			cmp	 	#1
.9570	f0 13		beq $9585			beq 	_ANExit
.9572	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9575	a0 01		ldy #$01			ldy 	#1
.9577	91 36		sta ($36),y			sta 	(zTemp0),y
.9579	80 0a		bra $9585			bra 	_ANExit
.957b					_ANFloat:
.957b	20 87 95	jsr $9587			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.957e	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9581	a0 04		ldy #$04			ldy 	#4
.9583	91 36		sta ($36),y			sta 	(zTemp0),y
.9585					_ANExit:
.9585	7a		ply				ply
.9586	60		rts				rts
.9587					_ANCopy4PackSign:
.9587	a0 03		ldy #$03			ldy 	#3
.9589	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.958c	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.958e	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9591	91 36		sta ($36),y			sta 	(zTemp0),y
.9593	88		dey				dey
.9594	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9597	91 36		sta ($36),y			sta 	(zTemp0),y
.9599	88		dey				dey
.959a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.959d	91 36		sta ($36),y			sta 	(zTemp0),y
.959f	88		dey				dey
.95a0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95a3	91 36		sta ($36),y			sta 	(zTemp0),y
.95a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95a6					AssignString:
.95a6	5a		phy				phy
.95a7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95aa	85 38		sta $38				sta 	zTemp1
.95ac	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95af	85 39		sta $39				sta 	zTemp1+1
.95b1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95b4	85 36		sta $36				sta 	zTemp0
.95b6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95b9	85 37		sta $37				sta 	zTemp0+1
.95bb	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.95bf	f0 23		beq $95e4			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95c1	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95c2	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95c4	e9 02		sbc #$02			sbc 	#2
.95c6	85 3c		sta $3c				sta 	zsTemp
.95c8	a0 01		ldy #$01			ldy 	#1
.95ca	b1 36		lda ($36),y			lda 	(zTemp0),y
.95cc	e9 00		sbc #$00			sbc 	#0
.95ce	85 3d		sta $3d				sta 	zsTemp+1
.95d0	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95d2					_ASGetLength:
.95d2	c8		iny				iny
.95d3	b1 38		lda ($38),y			lda 	(zTemp1),y
.95d5	d0 fb		bne $95d2			bne 	_ASGetLength
.95d7	98		tya				tya 								; is this length <= current length
.95d8	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95da	90 20		bcc $95fc			bcc 	_ASCopyString
.95dc	f0 1e		beq $95fc			beq 	_ASCopyString
.95de	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95e0	a0 01		ldy #$01			ldy 	#1
.95e2	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95e4					_ASNewStringRequired:
.95e4	e8		inx				inx 								; concrete the new string.
.95e5	20 66 a6	jsr $a666			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95e8	ca		dex				dex
.95e9	18		clc				clc
.95ea	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95ed	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95ef	92 36		sta ($36)			sta 	(zTemp0)
.95f1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95f4	69 00		adc #$00			adc 	#0
.95f6	a0 01		ldy #$01			ldy 	#1
.95f8	91 36		sta ($36),y			sta 	(zTemp0),y
.95fa	80 0d		bra $9609			bra 	_ASExit
.95fc					_ASCopyString:
.95fc	a0 00		ldy #$00			ldy 	#0
.95fe					_ASCopyLoop:
.95fe	b1 38		lda ($38),y			lda 	(zTemp1),y
.9600	c8		iny				iny
.9601	c8		iny				iny
.9602	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9604	88		dey				dey
.9605	c9 00		cmp #$00			cmp 	#0
.9607	d0 f5		bne $95fe			bne 	_ASCopyLoop
.9609					_ASExit:
.9609	7a		ply				ply
.960a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.960b					DereferenceTopTwo:
.960b	e8		inx				inx
.960c	20 10 96	jsr $9610			jsr 	Dereference 				; deref x+1
.960f	ca		dex				dex  								; falls through to deref x
.9610					Dereference:
.9610	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9613	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9615	f0 57		beq $966e			beq 	_DRFExit 					; not a reference
.9617	5a		phy				phy
.9618	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.961b	85 36		sta $36				sta 	zTemp0
.961d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9620	85 37		sta $37				sta 	zTemp0+1
.9622	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9625	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9627	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.962a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.962d	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.962f	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9631	f0 0f		beq $9642			beq 	_DRFDereferenceTwo
.9633	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9635	f0 39		beq $9670			beq 	_DRFFull
.9637	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.963a	29 03		and #$03			and 	#3
.963c	f0 32		beq $9670			beq 	_DRFFull 					; the whole word
.963e	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9640	f0 07		beq $9649			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9642					_DRFDereferenceTwo:
.9642	a0 01		ldy #$01			ldy 	#1
.9644	b1 36		lda ($36),y			lda 	(zTemp0),y
.9646	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9649					_DRFClear23:
.9649	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.964c	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.964f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9652	29 18		and #$18			and 	#NSBTypeMask
.9654	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9657	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9659	d0 12		bne $966d			bne 	_DRFNotString
.965b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.965e	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9661	d0 0a		bne $966d			bne 	_DRFNotString
.9663	a9 6f		lda #$6f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9665	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9668	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.966a	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.966d					_DRFNotString
.966d	7a		ply				ply 								; restore Y and exit
.966e					_DRFExit:
.966e	60		rts				rts
.966f					_DRFNullString:
>966f	00						.byte 	0
.9670					_DRFFull:
.9670	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9672	b1 36		lda ($36),y			lda 	(zTemp0),y
.9674	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9677	c8		iny				iny
.9678	b1 36		lda ($36),y			lda 	(zTemp0),y
.967a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.967d	c8		iny				iny
.967e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9680	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9683	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9686	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9689	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.968b	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.968e	f0 06		beq $9696			beq 	_DRFNoExponent
.9690	c8		iny				iny 								; if not, read the exponent as well.
.9691	b1 36		lda ($36),y			lda 	(zTemp0),y
.9693	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9696					_DRFNoExponent:
.9696	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9699	10 0d		bpl $96a8			bpl 	_DRFExit2 					; if not, then exit.
.969b	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.969d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96a0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.96a3	09 80		ora #$80			ora 	#NSBIsNegative
.96a5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96a8					_DRFExit2:
.96a8	7a		ply				ply
.96a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96aa					EncodeNumberStart:
.96aa	38		sec				sec
.96ab	80 01		bra $96ae			bra 	EncodeNumberContinue+1
.96ad					EncodeNumberContinue:
.96ad	18		clc				clc
.96ae					EncodeNumber:
.96ae	08		php				php 								; save reset.
.96af	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96b1	f0 12		beq $96c5			beq 	_ENIsOkay
.96b3	c9 30		cmp #$30			cmp 	#"0"
.96b5	90 04		bcc $96bb			bcc 	_ENBadNumber
.96b7	c9 3a		cmp #$3a			cmp 	#"9"+1
.96b9	90 0a		bcc $96c5			bcc 	_ENIsOkay
.96bb					_ENBadNumber:
.96bb	28		plp				plp 								; throw saved reset
.96bc	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96bf	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96c1	f0 7e		beq $9741			beq 	_ENConstructFinal
.96c3					_ENFail:
.96c3	18		clc				clc 								; not allowed
.96c4	60		rts				rts
.96c5					_ENIsOkay:
.96c5	28		plp				plp 								; are we restarting
.96c6	90 15		bcc $96dd			bcc 	_ENNoRestart
.96c8					_ENStartEncode:
.96c8	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96ca	f0 0c		beq $96d8			beq 	_ENFirstDP
.96cc	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96ce	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.96d1	a9 01		lda #$01			lda 	#ESTA_Low
.96d3					_ENExitChange:
.96d3	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96d6	38		sec				sec
.96d7	60		rts				rts
.96d8					_ENFirstDP:
.96d8	20 06 9e	jsr $9e06			jsr 	NSMSetZero 					; clear integer part
.96db	80 3f		bra $971c			bra 	_ESTASwitchFloat			; go straight to float and exi
.96dd					_ENNoRestart:
.96dd	48		pha				pha 								; save on stack.
.96de	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96e1	c9 01		cmp #$01			cmp 	#ESTA_Low
.96e3	f0 09		beq $96ee			beq  	_ESTALowState
.96e5	c9 02		cmp #$02			cmp 	#ESTA_High
.96e7	f0 29		beq $9712			beq 	_ESTAHighState
.96e9	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96eb	f0 3b		beq $9728			beq 	_ESTADecimalState
>96ed	db						.byte 	$DB 						; causes a break in the emulator
.96ee					_ESTALowState:
.96ee	68		pla				pla 								; get value back
.96ef	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96f1	f0 29		beq $971c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96f3	29 0f		and #$0f			and 	#15 						; make digit
.96f5	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96f8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96fb	0a		asl a				asl 	a
.96fc	0a		asl a				asl 	a
.96fd	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9700	0a		asl a				asl 	a
.9701	6d 86 04	adc $0486			adc 	DigitTemp
.9704	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9707	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9709	90 05		bcc $9710			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.970b	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.970d	8d 85 04	sta $0485			sta 	EncodeState
.9710					_ESTANoSwitch:
.9710	38		sec				sec
.9711	60		rts				rts
.9712					_ESTAHighState:
.9712	68		pla				pla 								; get value back
.9713	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9715	f0 05		beq $971c			beq 	_ESTASwitchFloat
.9717	20 7b 97	jsr $977b			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.971a	38		sec				sec
.971b	60		rts				rts
.971c					_ESTASwitchFloat:
.971c	9c 87 04	stz $0487			stz 	DecimalCount
.971f	e8		inx				inx 								; zero the decimal additive.
.9720	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.9723	ca		dex				dex
.9724	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9726	80 ab		bra $96d3			bra 	_ENExitChange
.9728					_ESTADecimalState:
.9728	68		pla				pla 								; digit.
.9729	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.972b	f0 96		beq $96c3			beq 	_ENFail
.972d	e8		inx				inx 								; put digit into fractional part of X+1
.972e	20 7b 97	jsr $977b			jsr 	ESTAShiftDigitIntoMantissa
.9731	ca		dex				dex
.9732	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9735	ad 87 04	lda $0487			lda 	DecimalCount
.9738	c9 0b		cmp #$0b			cmp 	#11
.973a	f0 02		beq $973e			beq 	_ESTADSFail
.973c	38		sec				sec
.973d	60		rts				rts
.973e					_ESTADSFail:
.973e	4c 95 9f	jmp $9f95			jmp 	RangeError
.9741					_ENConstructFinal:
.9741	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9744	f0 33		beq $9779			beq 	_ENCFExit 					; no decimals
.9746	5a		phy				phy
.9747	0a		asl a				asl 	a 							; x 4 and CLC
.9748	0a		asl a				asl 	a
.9749	6d 87 04	adc $0487			adc 	DecimalCount
.974c	a8		tay				tay
.974d	b9 54 9f	lda $9f54,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9750	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9753	b9 55 9f	lda $9f55,y			lda 	DecimalScalarTable-5+1,y
.9756	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9759	b9 56 9f	lda $9f56,y			lda 	DecimalScalarTable-5+2,y
.975c	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.975f	b9 57 9f	lda $9f57,y			lda 	DecimalScalarTable-5+3,y
.9762	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9765	b9 58 9f	lda $9f58,y			lda 	DecimalScalarTable-5+4,y
.9768	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.976b	a9 08		lda #$08			lda 	#NSTFloat
.976d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9770	7a		ply				ply
.9771	e8		inx				inx 								; multiply decimal const by decimal scalar
.9772	20 b2 94	jsr $94b2			jsr 	FloatMultiply
.9775	ca		dex				dex
.9776	20 3f 93	jsr $933f			jsr 	FloatAdd 					; add to integer part.
.9779					_ENCFExit:
.9779	18		clc				clc 								; reject the digit.
.977a	60		rts				rts
.977b					ESTAShiftDigitIntoMantissa:
.977b	29 0f		and #$0f			and 	#15 						; save digit
.977d	48		pha				pha
.977e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9781	48		pha				pha
.9782	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9785	48		pha				pha
.9786	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9789	48		pha				pha
.978a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.978d	48		pha				pha
.978e	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; x 2
.9791	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; x 4
.9794	18		clc				clc 								; pop mantissa and add
.9795	68		pla				pla
.9796	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9799	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.979c	68		pla				pla
.979d	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.97a0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97a3	68		pla				pla
.97a4	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97a7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97aa	68		pla				pla
.97ab	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97ae	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97b1	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; x 10
.97b4	68		pla				pla 								; add digit
.97b5	18		clc				clc
.97b6	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97b9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97bc	90 0d		bcc $97cb			bcc 	_ESTASDExit
.97be	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97c1	d0 08		bne $97cb			bne 	_ESTASDExit
.97c3	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97c6	d0 03		bne $97cb			bne 	_ESTASDExit
.97c8	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97cb					_ESTASDExit:
.97cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97cc					EvaluateTerm:
.97cc	b1 30		lda ($30),y			lda 	(codePtr),y
.97ce	30 18		bmi $97e8			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97d0	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97d2	b0 6f		bcs $9843			bcs 	_ETVariable
.97d4	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97d6	90 6e		bcc $9846			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97d8	c9 3a		cmp #$3a			cmp 	#'9'+1
.97da	b0 6a		bcs $9846			bcs 	_ETPuncUnary
.97dc	20 aa 96	jsr $96aa			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97df					_ETNumber:
.97df	c8		iny				iny 								; keep encoding until we have the numbers
.97e0	b1 30		lda ($30),y			lda 	(codePtr),y
.97e2	20 ad 96	jsr $96ad			jsr 	EncodeNumberContinue
.97e5	b0 f8		bcs $97df			bcs 	_ETNumber 					; go back if accepted.
.97e7	60		rts				rts
.97e8					_ETCheckUnary:
.97e8	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97ea	f0 41		beq $982d			beq 	_ETString
.97ec	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97ee	f0 12		beq $9802			beq 	_ETHexConstant
.97f0	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97f2	90 0b		bcc $97ff			bcc 	_ETSyntaxError
.97f4	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1
.97f6	b0 07		bcs $97ff			bcs 	_ETSyntaxError
.97f8	da		phx				phx 								; push X on the stack
.97f9	0a		asl a				asl 	a 							; put vector x 2 into X
.97fa	aa		tax				tax
.97fb	c8		iny				iny 								; consume unary function token
.97fc	7c f0 8a	jmp ($8af0,x)			jmp 	(VectorSet0,x) 				; and do it.
.97ff					_ETSyntaxError:
.97ff	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.9802					_ETHexConstant:
.9802	c8		iny				iny 								; skip #
.9803	c8		iny				iny 								; skip count
.9804	20 06 9e	jsr $9e06			jsr 	NSMSetZero 					; clear result
.9807					_ETHLoop:
.9807	b1 30		lda ($30),y			lda 	(codePtr),y
.9809	c8		iny				iny 								; and consume
.980a	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.980c	f0 1e		beq $982c			beq 	_ETHExit
.980e	48		pha				pha 								; save on stack.
.980f	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; x 2
.9812	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; x 4
.9815	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; x 8
.9818	20 1b 9e	jsr $9e1b			jsr 	NSMShiftLeft 				; x 16
.981b	68		pla				pla 								; ASCII
.981c	c9 41		cmp #$41			cmp 	#'A'
.981e	90 02		bcc $9822			bcc 	_ETHNotChar
.9820	e9 07		sbc #$07			sbc 	#7
.9822					_ETHNotChar:
.9822	29 0f		and #$0f			and 	#15 						; digit now
.9824	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9827	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.982a	80 db		bra $9807			bra 	_ETHLoop 					; go round.
.982c					_ETHExit:
.982c	60		rts				rts
.982d					_ETString:
.982d	c8		iny				iny 								; look at length
.982e	b1 30		lda ($30),y			lda 	(codePtr),y
.9830	48		pha				pha
.9831	c8		iny				iny 								; first character
.9832	20 fe a1	jsr $a1fe			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9835	68		pla				pla 								; restore count and save
.9836	85 36		sta $36				sta 	zTemp0
.9838	98		tya				tya 								; add length to Y to skip it.
.9839	18		clc				clc
.983a	65 36		adc $36				adc 	zTemp0
.983c	a8		tay				tay
.983d	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.983f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9842	60		rts				rts
.9843					_ETVariable:
.9843	4c 9d 98	jmp $989d			jmp 	VariableHandler
.9846					_ETPuncUnary:
.9846	c8		iny				iny 								; consume the unary character
.9847	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9849	f0 2d		beq $9878			beq 	_ETUnaryNegate
.984b	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.984d	f0 39		beq $9888			beq 	_ETDereference
.984f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9851	f0 43		beq $9896			beq 	_ETParenthesis
.9853	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9855	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9857	f0 06		beq $985f			beq 	_ETIndirection
.9859	e6 36		inc $36				inc 	zTemp0
.985b	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.985d	d0 a0		bne $97ff			bne 	_ETSyntaxError
.985f					_ETIndirection:
.985f	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9861	1a		inc a				inc 	a
.9862	48		pha				pha
.9863	20 cc 97	jsr $97cc			jsr 	EvaluateTerm				; evaluate the term
.9866	20 10 96	jsr $9610			jsr 	Dereference 				; dereference it.
.9869	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.986c	d0 07		bne $9875			bne 	_ETTypeMismatch
.986e	68		pla				pla 								; indirection 1-2
.986f	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9871	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9874	60		rts				rts
.9875					_ETTypeMismatch:
.9875	4c 9a 9f	jmp $9f9a			jmp 	TypeError
.9878					_ETUnaryNegate:
.9878	20 cc 97	jsr $97cc			jsr 	EvaluateTerm				; evaluate the term
.987b	20 10 96	jsr $9610			jsr 	Dereference 				; dereference it.
.987e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9881	29 10		and #$10			and 	#NSTString
.9883	d0 f0		bne $9875			bne 	_ETTypeMismatch
.9885	4c b2 9d	jmp $9db2			jmp 	NSMNegate  					; just toggles the sign bit.
.9888					_ETDereference:
.9888	20 cc 97	jsr $97cc			jsr 	EvaluateTerm				; evaluate the term
.988b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.988e	29 20		and #$20			and 	#NSBIsReference
.9890	f0 e3		beq $9875			beq 	_ETTypeMismatch
.9892	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9895	60		rts				rts
.9896					_ETParenthesis:
.9896	20 f2 92	jsr $92f2			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9899	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 			; check for )
.989c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.989d					VariableHandler:
.989d	b1 30		lda ($30),y			lda 	(codePtr),y
.989f	18		clc				clc
.98a0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98a2	85 37		sta $37				sta 	zTemp0+1
.98a4	c8		iny				iny
.98a5	b1 30		lda ($30),y			lda 	(codePtr),y
.98a7	85 36		sta $36				sta 	zTemp0
.98a9	c8		iny				iny
.98aa	18		clc				clc									; copy variable address+3 to mantissa
.98ab	69 03		adc #$03			adc 	#3
.98ad	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98b0	a5 37		lda $37				lda 	zTemp0+1
.98b2	69 00		adc #$00			adc 	#0
.98b4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98b7	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98ba	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98bd	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98c0	5a		phy				phy
.98c1	a0 02		ldy #$02			ldy 	#2 							; read type
.98c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.98c5	7a		ply				ply
.98c6	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98c8	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98ca	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98cd	29 04		and #$04			and 	#NSBIsArray
.98cf	d0 01		bne $98d2			bne 	_VHArray
.98d1	60		rts				rts
.98d2					_VHArray:
.98d2	e8		inx				inx
.98d3	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98d6	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98d8	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98db	b1 30		lda ($30),y			lda 	(codePtr),y
.98dd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98df	d0 06		bne $98e7			bne 	_VHNoSecondIndex
.98e1	c8		iny				iny 								; skip the comma
.98e2	e8		inx				inx
.98e3	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98e6	ca		dex				dex
.98e7					_VHNoSecondIndex:
.98e7	ca		dex				dex 								; set X back.
.98e8	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 			; and check the right bracket.
.98eb	5a		phy				phy 								; save position
.98ec	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98ee	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98f0	f0 6b		beq $995d			beq 	_VHBadIndex
.98f2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98f5	85 3e		sta $3e				sta 	zaTemp
.98f7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98fa	85 3f		sta $3f				sta 	zaTemp+1
.98fc	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98fe	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9900	f0 02		beq $9904			beq 	_VHHas2Mask
.9902	a9 ff		lda #$ff			lda 	#$FF
.9904					_VHHas2Mask:
.9904	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9907	f0 54		beq $995d			beq 	_VHBadIndex
.9909	0a		asl a				asl 	a 							; carry will be set if a second index
.990a	90 09		bcc $9915			bcc 	_VHCheckFirstIndex
.990c	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.990e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9910	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9913	90 48		bcc $995d			bcc 	_VHBadIndex
.9915					_VHCheckFirstIndex:
.9915	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9917	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9919	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.991c	90 3f		bcc $995d			bcc 	_VHBadIndex
.991e	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9920	64 37		stz $37				stz 	zTemp0+1
.9922	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9925	30 0f		bmi $9936			bmi 	_VHNoMultiply
.9927	da		phx				phx
.9928	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.992b	48		pha				pha
.992c	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.992e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9930	1a		inc a				inc 	a 							; add 1 for zero base
.9931	fa		plx				plx
.9932	20 9b 9d	jsr $9d9b			jsr 	Multiply8x8 				; calculate -> Z0
.9935	fa		plx				plx
.9936					_VHNoMultiply:
.9936	18		clc				clc
.9937	a5 36		lda $36				lda 	zTemp0
.9939	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.993c	85 36		sta $36				sta 	zTemp0
.993e	a5 37		lda $37				lda 	zTemp0+1
.9940	69 00		adc #$00			adc 	#0
.9942	85 37		sta $37				sta 	zTemp0+1
.9944	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9947	20 e1 84	jsr $84e1			jsr 	ScaleByBaseType
.994a	18		clc				clc
.994b	b2 3e		lda ($3e)			lda 	(zaTemp)
.994d	65 36		adc $36				adc 	zTemp0
.994f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9952	a0 01		ldy #$01			ldy 	#1
.9954	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9956	65 37		adc $37				adc 	zTemp0+1
.9958	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.995b	7a		ply				ply 								; restore position
.995c	60		rts				rts
.995d					_VHBadIndex:
.995d	a9 17		lda #$17		lda	#23
.995f	4c 43 8d	jmp $8d43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9962					AbsUnary:
.9962	fa		plx				plx 								; restore stack pos
.9963	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber 				; get a float or int
.9966	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9969	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.996c	29 7f		and #$7f			and 	#$7F
.996e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9971	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9972					AllocUnary:
.9972	fa		plx				plx 								; restore stack pos
.9973	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger		; get bytes required.
.9976	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9979	da		phx				phx 								; save X/Y
.997a	5a		phy				phy
.997b	8a		txa				txa 								; copy X into Y
.997c	a8		tay				tay
.997d	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9980	aa		tax				tax
.9981	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9984	20 91 99	jsr $9991			jsr 	AllocateXABytes 			; allocate memory
.9987	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.998a	8a		txa				txa
.998b	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.998e	7a		ply				ply
.998f	fa		plx				plx
.9990	60		rts				rts
.9991					AllocateXABytes:
.9991	5a		phy				phy
.9992	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9995	84 36		sty $36				sty 	zTemp0
.9997	5a		phy				phy
.9998	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.999b	84 37		sty $37				sty 	zTemp0+1
.999d	5a		phy				phy
.999e	18		clc				clc 								; add to low memory pointer
.999f	6d 8c 04	adc $048c			adc 	lowMemPtr
.99a2	8d 8c 04	sta $048c			sta 	lowMemPtr
.99a5	8a		txa				txa
.99a6	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99a9	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99ac	b0 2f		bcs $99dd			bcs 	CISSMemory
.99ae	20 cf 99	jsr $99cf			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99b1					_ClearMemory:
.99b1	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99b4	c5 36		cmp $36				cmp 	zTemp0
.99b6	d0 07		bne $99bf			bne 	_CMClearNext
.99b8	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99bb	c5 37		cmp $37				cmp 	zTemp0+1
.99bd	f0 0c		beq $99cb			beq 	_CMExit
.99bf					_CMClearNext:
.99bf	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99c1	92 36		sta ($36)			sta 	(zTemp0)
.99c3	e6 36		inc $36				inc 	zTemp0
.99c5	d0 ea		bne $99b1			bne 	_ClearMemory
.99c7	e6 37		inc $37				inc		zTemp0+1
.99c9	80 e6		bra $99b1			bra 	_ClearMemory
.99cb					_CMExit:
.99cb	fa		plx				plx
.99cc	68		pla				pla
.99cd	7a		ply				ply
.99ce	60		rts				rts
.99cf					CheckIdentifierStringSpace:
.99cf	48		pha				pha
.99d0	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99d3	18		clc				clc
.99d4	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99d6	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99d9	b0 02		bcs $99dd			bcs 	CISSMemory
.99db	68		pla				pla
.99dc	60		rts				rts
.99dd					CISSMemory:
.99dd	a9 06		lda #$06		lda	#6
.99df	4c 43 8d	jmp $8d43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99e2					AscUnary:
.99e2	fa		plx				plx 								; restore stack pos
.99e3	20 3a 9d	jsr $9d3a			jsr 	EvaluateString 				; get a string
.99e6	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99e8	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.99eb	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.99ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99ef					FracUnary:
.99ef	fa		plx				plx 								; restore stack pos
.99f0	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber 				; get a float or int
.99f3	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.99f6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99f9	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99fb	f0 04		beq $9a01			beq 	_IUZero
.99fd	20 25 94	jsr $9425			jsr 	FloatFractionalPart
.9a00	60		rts				rts
.9a01					_IUZero:
.9a01	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.9a04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a05					IntUnary:
.9a05	fa		plx				plx 								; restore stack pos
.9a06	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber 				; get a float or int
.9a09	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9a0c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a0f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a11	f0 03		beq $9a16			beq 	_IUExit
.9a13	20 88 94	jsr $9488			jsr 	FloatIntegerPart
.9a16					_IUExit:
.9a16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a17					LenUnary:
.9a17	fa		plx				plx 								; restore stack pos
.9a18	20 3a 9d	jsr $9d3a			jsr 	EvaluateString 				; get a string
.9a1b	5a		phy				phy
.9a1c	a0 00		ldy #$00			ldy 	#0 							; find length
.9a1e					_LenFind:
.9a1e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a20	f0 06		beq $9a28			beq 	_LenExit
.9a22	c8		iny				iny
.9a23	d0 f9		bne $9a1e			bne 	_LenFind
.9a25	4c 95 9f	jmp $9f95			jmp 	RangeError 					; string > 255
.9a28					_LenExit:
.9a28	98		tya				tya
.9a29	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.9a2c	7a		ply				ply
.9a2d	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9a30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a31					Unary_Min:
.9a31	a9 01		lda #$01			lda 	#1
.9a33	80 02		bra $9a37			bra 	UnaryMinMaxMain
.9a35					Unary_Max:
.9a35	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a37					UnaryMinMaxMain:
.9a37	fa		plx				plx 								; get index on number stack
.9a38	48		pha				pha 								; save comparator
.9a39	20 26 9d	jsr $9d26			jsr 	EvaluateValue 				; get the first value.
.9a3c					_UMMMLoop:
.9a3c	b1 30		lda ($30),y			lda 	(codePtr),y
.9a3e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a40	f0 22		beq $9a64			beq 	_UMMMDone
.9a42	20 32 8d	jsr $8d32			jsr 	CheckComma 					; must be a comma
.9a45	e8		inx				inx
.9a46	20 26 9d	jsr $9d26			jsr 	EvaluateValue
.9a49	ca		dex				dex
.9a4a	20 dd 9d	jsr $9ddd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a4d	e8		inx				inx
.9a4e	20 dd 9d	jsr $9ddd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a51	e8		inx				inx
.9a52	20 fb 8d	jsr $8dfb			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a55	ca		dex				dex
.9a56	ca		dex				dex
.9a57	85 36		sta $36				sta 	zTemp0 						; save required result
.9a59	68		pla				pla 								; get and save comparator
.9a5a	48		pha				pha
.9a5b	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a5d	d0 dd		bne $9a3c			bne 	_UMMMLoop
.9a5f	20 67 9a	jsr $9a67			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a62	80 d8		bra $9a3c			bra 	_UMMMLoop
.9a64					_UMMMDone:
.9a64	68		pla				pla 								; throw the comparator
.9a65	c8		iny				iny 								; skip )
.9a66	60		rts				rts
.9a67					ExpCopyAboveDown:
.9a67	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a6a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a6d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a70	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a73	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a76	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a79	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a7c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a7f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a82	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a85	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a88	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a8c					Unary_Not:
.9a8c	fa		plx				plx
.9a8d	20 52 9d	jsr $9d52			jsr 	EvaluateInteger 			; get integer
.9a90	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9a93	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; zero mantissa ?
.9a96	f0 04		beq $9a9c			beq 	_NotZero
.9a98	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.9a9b	60		rts				rts
.9a9c					_NotZero:
.9a9c	4c b0 8d	jmp $8db0			jmp 	ReturnTrue
.9a9f					_UNBad:
.9a9f	4c 9f 9f	jmp $9f9f			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9aa2					Unary_Random:
.9aa2	fa		plx				plx
.9aa3	20 21 9b	jsr $9b21			jsr 	Random32Bit 				; get a random number
.9aa6	20 06 9b	jsr $9b06			jsr 	URCopyToMantissa  			; put in mantissa
.9aa9	b1 30		lda ($30),y			lda 	(codePtr),y
.9aab	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9aad	f0 08		beq $9ab7			beq 	_URNoModulus
.9aaf	e8		inx				inx
.9ab0	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ab3	ca		dex				dex
.9ab4	20 1f 8f	jsr $8f1f			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9ab7					_URNoModulus:
.9ab7	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9aba	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9abd	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9ac0	60		rts				rts
.9ac1					Unary_Rnd:
.9ac1	fa		plx				plx
.9ac2	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber 				; number to use.
.9ac5	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 			; closing bracket
.9ac8	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9acb	f0 2b		beq $9af8			beq 	_URCopySeed
.9acd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ad0	10 23		bpl $9af5			bpl 	_URDontSeed
.9ad2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ad5	49 17		eor #$17			eor 	#$17
.9ad7	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ada	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9add	49 a5		eor #$a5			eor 	#$A5
.9adf	8d 89 04	sta $0489			sta 	RandomSeed+1
.9ae2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9ae5	49 c2		eor #$c2			eor 	#$C2
.9ae7	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9aea	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9aed	49 9d		eor #$9d			eor 	#$9D
.9aef	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9af2	20 21 9b	jsr $9b21			jsr 	Random32Bit
.9af5					_URDontSeed:
.9af5	20 21 9b	jsr $9b21			jsr 	Random32Bit 				; generate a number.
.9af8					_URCopySeed:
.9af8	20 06 9b	jsr $9b06			jsr 	URCopyToMantissa 			; copy into mantissa
.9afb	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9afd	8d 28 04	sta $0428			sta 	NSExponent
.9b00	a9 08		lda #$08			lda 	#NSTFloat
.9b02	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b05	60		rts				rts
.9b06					URCopyToMantissa:
.9b06	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b09	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b0c	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b0f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b12	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b15	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b18	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b1b	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b1d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b20	60		rts				rts
.9b21					Random32Bit:
.9b21	5a		phy				phy
.9b22	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b24	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b27	d0 03		bne $9b2c			bne 	_Random1
.9b29	a8		tay				tay 								; if so do it 256 times
.9b2a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b2c					_Random1:
.9b2c	0a		asl a				asl 	a 							; LSFR RNG
.9b2d	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b30	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b33	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b36	90 02		bcc $9b3a			bcc 	_Random2
.9b38	49 c5		eor #$c5			eor 	#$C5
.9b3a					_Random2:
.9b3a	88		dey				dey
.9b3b	d0 ef		bne $9b2c			bne 	_Random1
.9b3d	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b40	7a		ply				ply
.9b41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b42					SgnUnary:
.9b42	fa		plx				plx 								; restore stack pos
.9b43	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber 				; get a float or int
.9b46	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9b49	20 36 9e	jsr $9e36			jsr 	NSMIsZero 					; if zero
.9b4c	f0 10		beq $9b5e			beq 	_SGZero  					; return Int Zero
.9b4e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b51	48		pha				pha
.9b52	a9 01		lda #$01			lda 	#1 							; set to 1
.9b54	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.9b57	68		pla				pla
.9b58	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b5a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b5d	60		rts				rts
.9b5e	20 06 9e	jsr $9e06	_SGZero:jsr 	NSMSetZero
.9b61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b62					ValUnary:
.9b62	fa		plx				plx 								; restore stack pos
.9b63	20 78 9b	jsr $9b78			jsr 	ValMainCode 				; do the main val() code
.9b66	b0 01		bcs $9b69			bcs 	_VUError 					; couldn't convert
.9b68	60		rts				rts
.9b69					_VUError:
.9b69	4c 9a 9f	jmp $9f9a			jmp 	TypeError
.9b6c					IsValUnary:
.9b6c	fa		plx				plx 								; restore stack pos
.9b6d	20 78 9b	jsr $9b78			jsr 	ValMainCode 				; do the main val() code
.9b70	b0 03		bcs $9b75			bcs 	_VUBad
.9b72	4c b0 8d	jmp $8db0			jmp 	ReturnTrue
.9b75					_VUBad:
.9b75	4c bc 8d	jmp $8dbc			jmp 	ReturnFalse
.9b78					ValMainCode:
.9b78	20 3a 9d	jsr $9d3a			jsr 	EvaluateString 				; get a string
.9b7b	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 			; check right bracket present
.9b7e	5a		phy				phy
.9b7f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b81	f0 17		beq $9b9a			beq 	_VMCFail2
.9b83	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b85	48		pha				pha 								; save first character
.9b86	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b88	d0 01		bne $9b8b			bne 	_VMCStart
.9b8a	c8		iny				iny 								; skip over -
.9b8b					_VMCStart:
.9b8b	38		sec				sec 								; initialise first time round.
.9b8c					_VMCNext:
.9b8c	c8		iny				iny 								; pre-increment
.9b8d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b8f	f0 0c		beq $9b9d			beq 	_VMCSuccess 				; successful.
.9b91	20 ae 96	jsr $96ae			jsr 	EncodeNumber 				; send it to the number-builder
.9b94	90 03		bcc $9b99			bcc 	_VMCFail 					; if failed, give up.
.9b96	18		clc				clc 								; next time round, countinue
.9b97	80 f3		bra $9b8c			bra 	_VMCNext
.9b99					_VMCFail:
.9b99	68		pla				pla
.9b9a					_VMCFail2:
.9b9a	7a		ply				ply
.9b9b	38		sec				sec
.9b9c	60		rts				rts
.9b9d					_VMCSuccess:
.9b9d	a9 00		lda #$00			lda 	#0 							; construct final
.9b9f	20 ae 96	jsr $96ae			jsr 	EncodeNumber
.9ba2	68		pla				pla
.9ba3	c9 2d		cmp #$2d			cmp 	#"-"
.9ba5	d0 03		bne $9baa			bne 	_VMCNotNegative
.9ba7	20 b2 9d	jsr $9db2			jsr		NSMNegate
.9baa					_VMCNotNegative:
.9baa	7a		ply				ply
.9bab	18		clc				clc
.9bac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bad					ChrUnary:
.9bad	fa		plx				plx 								; restore stack pos
.9bae	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger			; get value
.9bb1	48		pha				pha
.9bb2	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9bb5	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bb7	20 e7 a6	jsr $a6e7			jsr 	StringTempAllocate
.9bba	68		pla				pla 								; write number to it
.9bbb	20 25 a7	jsr $a725			jsr 	StringTempWrite
.9bbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bbf					SpcUnary:
.9bbf	fa		plx				plx 								; restore stack pos
.9bc0	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger			; get value
.9bc3	5a		phy				phy
.9bc4	48		pha				pha 								; save count
.9bc5	20 e7 a6	jsr $a6e7			jsr 	StringTempAllocate
.9bc8	7a		ply				ply 								; to do count in Y
.9bc9					_SpcLoop:
.9bc9	c0 00		cpy #$00			cpy 	#0
.9bcb	f0 08		beq $9bd5			beq 	_SpcExit
.9bcd	a9 20		lda #$20			lda 	#32
.9bcf	20 25 a7	jsr $a725			jsr 	StringTempWrite
.9bd2	88		dey				dey
.9bd3	80 f4		bra $9bc9			bra 	_SPCLoop
.9bd5					_SpcExit:
.9bd5	7a		ply				ply
.9bd6	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.9bd9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bda					Unary_Str:
.9bda	fa		plx				plx
.9bdb	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber  			; get number
.9bde	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 			; closing bracket
.9be1	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9be3	20 fc 9b	jsr $9bfc			jsr 	ConvertNumberToString 		; do the conversion.
.9be6	a9 21		lda #$21			lda		#33 						; create buffer
.9be8	20 e7 a6	jsr $a6e7			jsr 	StringTempAllocate 			; allocate memory
.9beb	da		phx				phx
.9bec	a2 00		ldx #$00			ldx 	#0
.9bee					_USCopy:
.9bee	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bf1	20 25 a7	jsr $a725			jsr 	StringTempWrite
.9bf4	e8		inx				inx
.9bf5	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bf8	d0 f4		bne $9bee			bne 	_USCopy
.9bfa	fa		plx				plx
.9bfb	60		rts				rts
.9bfc					ConvertNumberToString:
.9bfc	5a		phy				phy 								; save code position
.9bfd	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c00	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c03	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c06	10 0a		bpl $9c12			bpl 	_CNTSNotNegative
.9c08	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c0a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c0d	a9 2d		lda #$2d			lda 	#"-"
.9c0f	20 78 9c	jsr $9c78			jsr 	WriteDecimalBuffer
.9c12					_CNTSNotNegative:
.9c12	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c15	f0 15		beq $9c2c			beq 	_CNTSNotFloat
.9c17	e8		inx				inx 								; round up
.9c18	a9 01		lda #$01			lda 	#1
.9c1a	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.9c1d	ca		dex				dex
.9c1e	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c21	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c24	a9 08		lda #$08			lda 	#NSTFloat
.9c26	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c29	20 3f 93	jsr $933f			jsr 	FloatAdd
.9c2c					_CNTSNotFloat:
.9c2c	20 5a 9c	jsr $9c5a			jsr 	MakePlusTwoString
.9c2f	20 25 94	jsr $9425			jsr 	FloatFractionalPart 		; get the fractional part
.9c32	20 e9 94	jsr $94e9			jsr 	NSNormalise					; normalise , exit if zero
.9c35	f0 21		beq $9c58			beq 	_CNTSExit
.9c37	a9 2e		lda #$2e			lda 	#"."
.9c39	20 78 9c	jsr $9c78			jsr 	WriteDecimalBuffer 			; write decimal place
.9c3c					_CNTSDecimal:
.9c3c	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c3f	30 17		bmi $9c58			bmi 	_CNTSExit
.9c41	e8		inx				inx 								; x 10.0
.9c42	a9 0a		lda #$0a			lda 	#10
.9c44	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.9c47	a9 08		lda #$08			lda 	#NSTFloat
.9c49	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c4c	ca		dex				dex
.9c4d	20 b2 94	jsr $94b2			jsr 	FloatMultiply
.9c50	20 5a 9c	jsr $9c5a			jsr 	MakePlusTwoString
.9c53	20 25 94	jsr $9425			jsr 	FloatFractionalPart 		; get the fractional part
.9c56	80 e4		bra $9c3c			bra 	_CNTSDecimal 				; keep going.
.9c58					_CNTSExit:
.9c58	7a		ply				ply
.9c59	60		rts				rts
.9c5a					MakePlusTwoString:
.9c5a	da		phx				phx
.9c5b	20 dd 9d	jsr $9ddd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c5e	e8		inx				inx 								; access it
.9c5f	e8		inx				inx
.9c60	20 88 94	jsr $9488			jsr 	FloatIntegerPart 			; make it an integer
.9c63	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c65	20 6a 92	jsr $926a			jsr 	ConvertInt32
.9c68	a2 00		ldx #$00			ldx	 	#0
.9c6a					_MPTSCopy:
.9c6a	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c6d	20 78 9c	jsr $9c78			jsr 	WriteDecimalBuffer
.9c70	e8		inx				inx
.9c71	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c74	d0 f4		bne $9c6a			bne 	_MPTSCopy
.9c76	fa		plx				plx
.9c77	60		rts				rts
.9c78					WriteDecimalBuffer:
.9c78	da		phx				phx
.9c79	ae 95 04	ldx $0495			ldx 	dbOffset
.9c7c	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c7f	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c82	ee 95 04	inc $0495			inc 	dbOffset
.9c85	fa		plx				plx
.9c86	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c87					Unary_Left:
.9c87	fa		plx				plx
.9c88	18		clc				clc 								; only one parameter
.9c89	20 fe 9c	jsr $9cfe			jsr 	SubstringInitial 			; set up.
.9c8c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c8f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c92	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c95	80 2c		bra $9cc3			bra 	SubstringMain
.9c97					Unary_Right:
.9c97	fa		plx				plx
.9c98	18		clc				clc 								; only one parameter
.9c99	20 fe 9c	jsr $9cfe			jsr 	SubstringInitial 			; set up.
.9c9c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c9f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ca2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9ca5	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9ca8	b0 02		bcs $9cac			bcs 	_URNotUnderflow
.9caa	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cac					_URNotUnderFlow:
.9cac	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9caf	80 12		bra $9cc3			bra 	SubStringMain
.9cb1					Unary_Mid:
.9cb1	fa		plx				plx
.9cb2	38		sec				sec 								; two parameters
.9cb3	20 fe 9c	jsr $9cfe			jsr 	SubstringInitial 			; set up.
.9cb6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cb9	f0 05		beq $9cc0			beq 	_UMError
.9cbb	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cbe	80 03		bra $9cc3			bra 	SubStringMain
.9cc0					_UMError:
.9cc0	4c 9f 9f	jmp $9f9f			jmp 	ArgumentError
.9cc3					SubStringMain:
.9cc3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cc6	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cc9	b0 2d		bcs $9cf8			bcs 	_SSMNull 					; if so, return an empty string.
.9ccb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cce	f0 28		beq $9cf8			beq 	_SSMNull 					; return empty string.
.9cd0	18		clc				clc 								; add the offset +1 to the address and
.9cd1	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cd4	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9cd7	85 36		sta $36				sta 	zTemp0
.9cd9	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cdc	69 00		adc #$00			adc 	#0
.9cde	85 37		sta $37				sta 	zTemp0+1
.9ce0					_SSMNoCarry:
.9ce0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9ce3	20 e7 a6	jsr $a6e7			jsr 	StringTempAllocate 			; allocate that many characters
.9ce6	5a		phy				phy 								; save Y
.9ce7	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9ce9					_SSMCopy:
.9ce9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9ceb	f0 09		beq $9cf6			beq 	_SSMEString 				; no more to copy
.9ced	20 25 a7	jsr $a725			jsr 	StringTempWrite 			; and write it out.
.9cf0	c8		iny				iny
.9cf1	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9cf4	d0 f3		bne $9ce9			bne 	_SSMCopy
.9cf6					_SSMEString:
.9cf6	7a		ply				ply
.9cf7					_SSMExit:
.9cf7	60		rts				rts
.9cf8					_SSMNull:
.9cf8	a9 00		lda #$00			lda 	#0
.9cfa	20 e7 a6	jsr $a6e7			jsr 	StringTempAllocate
.9cfd	60		rts				rts
.9cfe					SubstringInitial:
.9cfe	da		phx				phx 								; save initial stack position
.9cff	08		php				php 								; save carry on stack indicating 2 parameters
.9d00	20 3a 9d	jsr $9d3a			jsr 	EvaluateString 				; get a string
.9d03	5a		phy				phy 								; calculate length to exponent.
.9d04	a0 ff		ldy #$ff			ldy 	#$FF
.9d06					_SIFindLength:
.9d06	c8		iny				iny
.9d07	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d09	d0 fb		bne $9d06			bne 	_SIFindLength
.9d0b	98		tya				tya
.9d0c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d0f	7a		ply				ply
.9d10	e8		inx				inx
.9d11	20 32 8d	jsr $8d32			jsr 	CheckComma 					; comma next
.9d14	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get next parameter
.9d17	28		plp				plp 								; is it the last parameter ?
.9d18	90 07		bcc $9d21			bcc 	_SSIExit 					; if so, exit.
.9d1a	e8		inx				inx
.9d1b	20 32 8d	jsr $8d32			jsr 	CheckComma 					; comma next
.9d1e	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get last parameter
.9d21					_SSIExit:
.9d21	fa		plx				plx
.9d22	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket 			; check closing bracket
.9d25	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d26					EvaluateValue:
.9d26	48		pha				pha
.9d27	20 f2 92	jsr $92f2			jsr		EvaluateExpression 			; expression
.9d2a	20 10 96	jsr $9610			jsr 	Dereference					; derefernce it
.9d2d	68		pla				pla
.9d2e	60		rts				rts
.9d2f					EvaluateNumber:
.9d2f	20 26 9d	jsr $9d26			jsr 	EvaluateValue 				; get a value
.9d32	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d35	29 10		and #$10			and 	#NSBIsString
.9d37	d0 16		bne $9d4f			bne 	HelperTypeError
.9d39	60		rts				rts
.9d3a					EvaluateString:
.9d3a	20 26 9d	jsr $9d26			jsr 	EvaluateValue 				; get a value
.9d3d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d40	29 10		and #$10			and 	#NSBIsString
.9d42	f0 0b		beq $9d4f			beq 	HelperTypeError
.9d44					CopyAddressToTemp0:
.9d44	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d47	85 36		sta $36				sta 	zTemp0
.9d49	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d4c	85 37		sta $37				sta 	zTemp0+1
.9d4e	60		rts				rts
.9d4f					HelperTypeError:
.9d4f	4c 9a 9f	jmp $9f9a			jmp 	TypeError
.9d52					EvaluateInteger:
.9d52	20 2f 9d	jsr $9d2f			jsr 	EvaluateNumber
.9d55	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d58	d0 0a		bne $9d64			bne 	HelperValueError 			; if not, it's a float.
.9d5a	60		rts				rts
.9d5b					EvaluateUnsignedInteger:
.9d5b	20 52 9d	jsr $9d52			jsr 	EvaluateInteger 			; check integer is +ve
.9d5e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d61	30 01		bmi $9d64			bmi 	HelperValueError
.9d63	60		rts				rts
.9d64					HelperValueError:
.9d64	4c 9f 9f	jmp $9f9f			jmp 	ArgumentError
.9d67					Evaluate16BitInteger:
.9d67	20 5b 9d	jsr $9d5b			jsr	 	EvaluateUnsignedInteger		; get integer
.9d6a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d6d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d70	d0 f2		bne $9d64			bne 	HelperValueError
.9d72	60		rts				rts
.9d73					Evaluate16BitIntegerSigned:
.9d73	20 52 9d	jsr $9d52			jsr	 	EvaluateInteger				; get integer
.9d76	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d79	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d7c	d0 e6		bne $9d64			bne 	HelperValueError
.9d7e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d81	10 03		bpl $9d86			bpl 	_EISNotSigned
.9d83	20 bb 9d	jsr $9dbb			jsr 	NSMNegateMantissa
.9d86					_EISNotSigned:
.9d86	60		rts				rts
.9d87					Evaluate8BitInteger:
.9d87	20 5b 9d	jsr $9d5b			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d8a	d0 d8		bne $9d64			bne 	HelperValueError
.9d8c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d8f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d92	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d95	d0 cd		bne $9d64			bne 	HelperValueError
.9d97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d9b					Multiply8x8:
.9d9b	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d9c	85 36		sta $36			  	sta 	zTemp0
.9d9e	86 37		stx $37				stx 	zTemp0+1
.9da0	a9 00		lda #$00			lda 	#0
.9da2	a2 08		ldx #$08			ldx 	#8
.9da4					_M88Loop:
.9da4	90 03		bcc $9da9			bcc 	_M88NoAdd
.9da6	18		clc				clc
.9da7	65 37		adc $37				adc 	zTemp0+1
.9da9					_M88NoAdd:
.9da9	6a		ror a				ror 	a
.9daa	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9dac	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9dad	d0 f5		bne $9da4			bne 	_M88Loop
.9daf	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9db1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9db2					NSMNegate:
.9db2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9db5	49 80		eor #$80			eor 	#NSBIsNegative
.9db7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dba	60		rts				rts
.9dbb					NSMNegateMantissa:
.9dbb	38		sec				sec
.9dbc	a9 00		lda #$00			lda 	#0
.9dbe	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dc1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dc4	a9 00		lda #$00			lda 	#0
.9dc6	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dc9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dcc	a9 00		lda #$00			lda 	#0
.9dce	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dd1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dd4	a9 00		lda #$00			lda 	#0
.9dd6	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dd9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ddc	60		rts				rts
.9ddd					NSMShiftUpTwo:
.9ddd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9de0	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9de3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9de6	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9de9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9dec	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9def	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9df2	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9df5	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9df8	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9dfb	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dfe	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e01	60		rts				rts
.9e02					NSMSetZeroMantissaOnly:
.9e02	a9 00		lda #$00			lda 	#0
.9e04	80 08		bra $9e0e			bra 	NSMSetMantissa
.9e06					NSMSetZero:
.9e06	a9 00		lda #$00			lda 	#0
.9e08					NSMSetByte:
.9e08	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e0b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e0e					NSMSetMantissa:
.9e0e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e11	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e14	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e17	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e1a	60		rts				rts
.9e1b					NSMShiftLeft:
.9e1b	18		clc				clc
.9e1c					NSMRotateLeft:
.9e1c	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e1f	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e22	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e25	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e28	60		rts				rts
.9e29					NSMShiftRight:
.9e29	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e2c	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e2f	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e32	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e35	60		rts				rts
.9e36					NSMIsZero:
.9e36	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e39	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e3c	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e3f	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e43					Assemble_ora:
.9e43	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e46	01					.byte $01
.9e47					Assemble_and:
.9e47	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e4a	21					.byte $21
.9e4b					Assemble_eor:
.9e4b	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e4e	41					.byte $41
.9e4f					Assemble_adc:
.9e4f	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e52	61					.byte $61
.9e53					Assemble_sta:
.9e53	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e56	81					.byte $81
.9e57					Assemble_lda:
.9e57	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e5a	a1					.byte $a1
.9e5b					Assemble_cmp:
.9e5b	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e5e	c1					.byte $c1
.9e5f					Assemble_sbc:
.9e5f	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e62	e1					.byte $e1
.9e63					Assemble_asl:
.9e63	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e66	02					.byte $02
>9e67	75					.byte $75
.9e68					Assemble_rol:
.9e68	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e6b	22					.byte $22
>9e6c	75					.byte $75
.9e6d					Assemble_lsr:
.9e6d	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e70	42					.byte $42
>9e71	75					.byte $75
.9e72					Assemble_ror:
.9e72	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e75	62					.byte $62
>9e76	75					.byte $75
.9e77					Assemble_stx:
.9e77	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e7a	82					.byte $82
>9e7b	50					.byte $50
.9e7c					Assemble_ldx:
.9e7c	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e7f	a2					.byte $a2
>9e80	d0					.byte $d0
.9e81					Assemble_dec:
.9e81	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e84	c2					.byte $c2
>9e85	55					.byte $55
.9e86					Assemble_inc:
.9e86	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e89	e2					.byte $e2
>9e8a	55					.byte $55
.9e8b					Assemble_stz:
.9e8b	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e8e	60					.byte $60
>9e8f	44					.byte $44
.9e90					Assemble_bit:
.9e90	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e93	20					.byte $20
>9e94	55					.byte $55
.9e95					Assemble_sty:
.9e95	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e98	80					.byte $80
>9e99	54					.byte $54
.9e9a					Assemble_ldy:
.9e9a	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e9d	a0					.byte $a0
>9e9e	d5					.byte $d5
.9e9f					Assemble_cpy:
.9e9f	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ea2	c0					.byte $c0
>9ea3	d4					.byte $d4
.9ea4					Assemble_cpx:
.9ea4	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ea7	e0					.byte $e0
>9ea8	d0					.byte $d0
.9ea9					Assemble_tsb:
.9ea9	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eac	00					.byte $00
>9ead	50					.byte $50
.9eae					Assemble_trb:
.9eae	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eb1	10					.byte $10
>9eb2	50					.byte $50
.9eb3					Assemble_jsr:
.9eb3	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eb6	14					.byte $14
>9eb7	10					.byte $10
.9eb8					Assemble_jmp:
.9eb8	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ebb	40					.byte $40
>9ebc	10					.byte $10
.9ebd					Assemble_bpl:
.9ebd	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ec0	10					.byte $10
.9ec1					Assemble_bmi:
.9ec1	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ec4	30					.byte $30
.9ec5					Assemble_bvc:
.9ec5	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ec8	50					.byte $50
.9ec9					Assemble_bvs:
.9ec9	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ecc	70					.byte $70
.9ecd					Assemble_bcc:
.9ecd	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ed0	90					.byte $90
.9ed1					Assemble_bcs:
.9ed1	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ed4	b0					.byte $b0
.9ed5					Assemble_bne:
.9ed5	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ed8	d0					.byte $d0
.9ed9					Assemble_beq:
.9ed9	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9edc	f0					.byte $f0
.9edd					Assemble_bra:
.9edd	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ee0	80					.byte $80
.9ee1					Assemble_brk:
.9ee1	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ee4	00					.byte $00
.9ee5					Assemble_php:
.9ee5	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ee8	08					.byte $08
.9ee9					Assemble_clc:
.9ee9	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9eec	18					.byte $18
.9eed					Assemble_plp:
.9eed	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ef0	28					.byte $28
.9ef1					Assemble_sec:
.9ef1	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ef4	38					.byte $38
.9ef5					Assemble_rti:
.9ef5	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ef8	40					.byte $40
.9ef9					Assemble_pha:
.9ef9	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9efc	48					.byte $48
.9efd					Assemble_cli:
.9efd	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f00	58					.byte $58
.9f01					Assemble_phy:
.9f01	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f04	5a					.byte $5a
.9f05					Assemble_rts:
.9f05	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f08	60					.byte $60
.9f09					Assemble_pla:
.9f09	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f0c	68					.byte $68
.9f0d					Assemble_sei:
.9f0d	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f10	78					.byte $78
.9f11					Assemble_ply:
.9f11	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f14	7a					.byte $7a
.9f15					Assemble_dey:
.9f15	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f18	88					.byte $88
.9f19					Assemble_txa:
.9f19	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f1c	8a					.byte $8a
.9f1d					Assemble_tya:
.9f1d	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f20	98					.byte $98
.9f21					Assemble_txs:
.9f21	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f24	9a					.byte $9a
.9f25					Assemble_tay:
.9f25	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f28	a8					.byte $a8
.9f29					Assemble_tax:
.9f29	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f2c	aa					.byte $aa
.9f2d					Assemble_clv:
.9f2d	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f30	b8					.byte $b8
.9f31					Assemble_tsx:
.9f31	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f34	ba					.byte $ba
.9f35					Assemble_iny:
.9f35	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f38	c8					.byte $c8
.9f39					Assemble_dex:
.9f39	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f3c	ca					.byte $ca
.9f3d					Assemble_cld:
.9f3d	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f40	d8					.byte $d8
.9f41					Assemble_phx:
.9f41	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f44	da					.byte $da
.9f45					Assemble_stp:
.9f45	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f48	db					.byte $db
.9f49					Assemble_inx:
.9f49	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f4c	e8					.byte $e8
.9f4d					Assemble_nop:
.9f4d	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f50	ea					.byte $ea
.9f51					Assemble_sed:
.9f51	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f54	f8					.byte $f8
.9f55					Assemble_plx:
.9f55	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f58	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f59					DecimalScalarTable:
>9f59	66 66 66 66				.dword $66666666 ; 0.1
>9f5d	de					.byte $de
>9f5e	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f62	db					.byte $db
>9f63	4c 37 89 41				.dword $4189374c ; 0.001
>9f67	d8					.byte $d8
>9f68	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f6c	d4					.byte $d4
>9f6d	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f71	d1					.byte $d1
>9f72	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f76	ce					.byte $ce
>9f77	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f7b	ca					.byte $ca
>9f7c	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f80	c7					.byte $c7
>9f81	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f85	c4					.byte $c4
>9f86	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f8a	c0					.byte $c0
>9f8b	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f8f	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f90					SyntaxError:
.9f90	a9 02		lda #$02		lda	#2
.9f92	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.9f95					RangeError:
.9f95	a9 04		lda #$04		lda	#4
.9f97	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.9f9a					TypeError:
.9f9a	a9 05		lda #$05		lda	#5
.9f9c	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.9f9f					ArgumentError:
.9f9f	a9 07		lda #$07		lda	#7
.9fa1	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.9fa4					NotDoneError:
.9fa4	a9 0c		lda #$0c		lda	#12
.9fa6	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.9fa9					ErrorText:
>9fa9	42 72 65 61 6b 00			.text	"Break",0
>9faf	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fb7	72 72 6f 72 00
>9fbc	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fc4	20 62 79 20 7a 65 72 6f 00
>9fcd	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fd5	61 6e 67 65 00
>9fda	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fe2	6d 61 74 63 68 00
>9fe8	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9ff0	65 6d 6f 72 79 00
>9ff6	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ffe	61 72 67 75 6d 65 6e 74 00
>a007	53 74 6f 70 00				.text	"Stop",0
>a00c	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a014	6f 6f 20 6c 6f 6e 67 00
>a01c	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a024	6e 20 66 61 69 6c 65 64 00
>a02d	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a035	61 74 61 00
>a039	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a041	65 6e 74 65 64 00
>a047	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a04f	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a05b	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a063	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a070	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a078	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a085	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a08d	68 6f 75 74 20 57 68 69 6c 65 00
>a098	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0a0	68 6f 75 74 20 46 6f 72 00
>a0a9	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0b1	61 63 6b 20 66 75 6c 6c 00
>a0ba	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0c2	75 63 74 75 72 65 00
>a0c9	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0d1	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0de	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0e6	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0f4	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0fc	7a 65 00
>a0ff	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a107	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a10f	42 75 69 6c 74 20 4d 6f			.text "Built Monday 21-Nov-2022. Build 3398."
>a117	6e 64 61 79 20 32 31 2d 4e 6f 76 2d 32 30 32 32
>a127	2e 20 42 75 69 6c 64 20 33 33 39 38 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a134					MemoryDeleteLine:
.a134	20 53 a1	jsr $a153			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a137	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a139	a8		tay				tay
.a13a					_MDDLLoop:
.a13a	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a13c	92 30		sta ($30)			sta 	(codePtr)
.a13e	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a140	c5 3a		cmp $3a				cmp 	zTemp2
.a142	d0 07		bne $a14b			bne 	_MDLDLNext
.a144	a5 31		lda $31				lda 	codePtr+1
.a146	c5 3b		cmp $3b				cmp 	zTemp2+1
.a148	d0 01		bne $a14b			bne 	_MDLDLNext
.a14a					_MDDLExit:
.a14a	60		rts				rts
.a14b					_MDLDLNext:
.a14b	e6 30		inc $30				inc 	codePtr						; next byte
.a14d	d0 eb		bne $a13a			bne 	_MDDLLoop
.a14f	e6 31		inc $31				inc 	codePtr+1
.a151	80 e7		bra $a13a			bra 	_MDDLLoop
.a153					IMemoryFindEnd:
.a153	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a155	85 3a		sta $3a				sta 	0+zTemp2
.a157	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a159	85 3b		sta $3b				sta 	1+zTemp2
.a15b					_MDLFELoop:
.a15b	b2 3a		lda ($3a)			lda 	(zTemp2)
.a15d	f0 0b		beq $a16a			beq 	_MDLFEExit
.a15f	18		clc				clc
.a160	65 3a		adc $3a				adc 	zTemp2
.a162	85 3a		sta $3a				sta 	zTemp2
.a164	90 f5		bcc $a15b			bcc 	_MDLFELoop
.a166	e6 3b		inc $3b				inc 	zTemp2+1
.a168	80 f1		bra $a15b			bra 	_MDLFELoop
.a16a					_MDLFEExit:
.a16a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a16b					MemoryInsertLine:
.a16b	08		php				php
.a16c	20 53 a1	jsr $a153			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a16f	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a171	1a		inc a				inc 	a
.a172	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a174	b0 36		bcs $a1ac			bcs 	_MDLIError
.a176	28		plp				plp
.a177	90 08		bcc $a181			bcc 	_MDLIFound
.a179	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a17b	85 30		sta $30				sta 	codePtr
.a17d	a5 3b		lda $3b				lda 	zTemp2+1
.a17f	85 31		sta $31				sta 	codePtr+1
.a181					_MDLIFound:
.a181	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a184	a8		tay				tay
.a185					_MDLIInsert:
.a185	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a187	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a189	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a18b	c5 3a		cmp $3a				cmp 	zTemp2
.a18d	d0 06		bne $a195			bne 	_MDLINext
.a18f	a5 31		lda $31				lda 	codePtr+1
.a191	c5 3b		cmp $3b				cmp 	zTemp2+1
.a193	f0 0a		beq $a19f			beq 	_MDLIHaveSpace
.a195					_MDLINext:
.a195	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a197	d0 02		bne $a19b			bne 	_MDLINoBorrow
.a199	c6 3b		dec $3b				dec 	zTemp2+1
.a19b					_MDLINoBorrow:
.a19b	c6 3a		dec $3a				dec 	zTemp2
.a19d	80 e6		bra $a185			bra 	_MDLIInsert
.a19f					_MDLIHaveSpace:
.a19f	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a1a2	88		dey				dey 								; from offset-1 to 0
.a1a3					_MDLICopy:
.a1a3	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1a6	91 30		sta ($30),y			sta 	(codePtr),y
.a1a8	88		dey				dey
.a1a9	10 f8		bpl $a1a3			bpl 	_MDLICopy
.a1ab	60		rts				rts
.a1ac					_MDLIError:
.a1ac	a9 06		lda #$06		lda	#6
.a1ae	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.a1b1					MDLAppendLine:
.a1b1	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1b3	85 36		sta $36				sta 	zTemp0
.a1b5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1b7	85 38		sta $38				sta 	0+zTemp1
.a1b9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1bb	85 39		sta $39				sta 	1+zTemp1
.a1bd	b2 38		lda ($38)			lda 	(zTemp1)
.a1bf	d0 0a		bne $a1cb			bne 	_MDLANoInitialise
.a1c1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1c3	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1c6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1c8	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1cb					_MDLANoInitialise:
.a1cb	18		clc				clc
.a1cc	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1cf	85 38		sta $38				sta 	zTemp1
.a1d1	72 36		adc ($36)			adc 	(zTemp0)
.a1d3	8d 2b 06	sta $062b			sta 	AppendPointer
.a1d6	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1d9	85 39		sta $39				sta 	zTemp1+1
.a1db	69 00		adc #$00			adc 	#0
.a1dd	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1e0	a0 00		ldy #$00			ldy 	#0
.a1e2					_MDLACopy:
.a1e2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1e4	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e6	c8		iny				iny
.a1e7	98		tya				tya
.a1e8	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1ea	d0 f6		bne $a1e2			bne 	_MDLACopy
.a1ec	a9 00		lda #$00			lda 	#0 							; end of program.
.a1ee	91 38		sta ($38),y			sta 	(zTemp1),y
.a1f0	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1f1					MemoryNew:
.a1f1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1f3	85 30		sta $30				sta 	codePtr
.a1f5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1f7	85 31		sta $31				sta 	codePtr+1
.a1f9	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1fb	92 30		sta ($30)			sta 	(codePtr)
.a1fd	60		rts				rts
.a1fe					MemoryInline:
.a1fe	98		tya				tya 								; put address into stack,x
.a1ff	18		clc				clc
.a200	65 30		adc $30				adc 	codePtr
.a202	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a205	a5 31		lda $31				lda 	codePtr+1
.a207	69 00		adc #$00			adc 	#0
.a209	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a20c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a20f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a213					MemorySearch:
.a213	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a215	86 37		stx $37				stx 	zTemp0+1
.a217	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a219	85 30		sta $30				sta 	codePtr
.a21b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a21d	85 31		sta $31				sta 	codePtr+1
.a21f					_MTAXLoop:
.a21f	b2 30		lda ($30)			lda 	(codePtr)
.a221	18		clc				clc
.a222	f0 21		beq $a245			beq 	_MTAXExit 					; reached end, exit with CC.
.a224	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a226	b1 30		lda ($30),y			lda 	(codePtr),y
.a228	38		sec				sec
.a229	e5 36		sbc $36				sbc 	zTemp0
.a22b	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a22d	c8		iny				iny 								; do the MSB
.a22e	b1 30		lda ($30),y			lda 	(codePtr),y
.a230	e5 37		sbc $37				sbc 	zTemp0+1
.a232	05 38		ora $38				ora 	zTemp1
.a234	f0 0f		beq $a245			beq 	_MTAXExit	 				; found
.a236	b0 0d		bcs $a245			bcs 	_MTAXExit 					; current < required exit
.a238	18		clc				clc
.a239	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a23b	65 30		adc $30				adc 	codePtr
.a23d	85 30		sta $30				sta 	codePtr
.a23f	90 02		bcc $a243			bcc 	_CREExit
.a241	e6 31		inc $31				inc 	codePtr+1
.a243					_CREExit:
.a243	80 da		bra $a21f			bra 	_MTAXLoop
.a245					_MTAXExit:
.a245	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcommand.asm

.a246					RectangleCommand:
.a246	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a248	80 02		bra $a24c			bra 	ShapeDrawCmd
.a24a					CircleCommand:
.a24a	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a24c					ShapeDrawCmd:
.a24c	20 da a2	jsr $a2da			jsr 	RunGraphicsCommand
.a24f					ShapeDraw:
.a24f	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a252	4c ce a2	jmp $a2ce			jmp 	ExecuteGraphicCommand	 	; and complete
.a255					SpriteCommand:
.a255	a2 00		ldx #$00			ldx 	#0
.a257	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get image number.
.a25a	5a		phy				phy
.a25b	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a25d	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a260	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a262	b0 0d		bcs $a271			bcs 	_SCRange
.a264	a0 ff		ldy #$ff			ldy 	#255
.a266	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a269	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a26b	7a		ply				ply
.a26c	20 da a2	jsr $a2da			jsr 	RunGraphicsCommand
.a26f	80 5d		bra $a2ce			bra 	ExecuteGraphicCommand
.a271					_SCRange:
.a271	4c 95 9f	jmp $9f95			jmp 	RangeError
.a274					ImageCommand:
.a274	a2 00		ldx #$00			ldx 	#0
.a276	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get image number.
.a279	20 da a2	jsr $a2da			jsr 	RunGraphicsCommand
.a27c					ImageRunDraw:
.a27c	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a27e	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a281	ad 34 06	lda $0634			lda 	gxDrawScale
.a284	0a		asl a				asl 	a
.a285	0a		asl a				asl 	a
.a286	0a		asl a				asl 	a
.a287	a8		tay				tay
.a288	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a28a	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a28d	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a290	60		rts				rts
.a291					TextCommand:
.a291	a2 00		ldx #$00			ldx 	#0
.a293	20 3a 9d	jsr $9d3a			jsr 	EvaluateString 				; get text
.a296	20 da a2	jsr $a2da			jsr 	RunGraphicsCommand
.a299					TextRunDraw:
.a299	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a29b	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a29e	a0 00		ldy #$00			ldy 	#0
.a2a0					_IRDLoop:
.a2a0	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a2a3	85 37		sta $37				sta 	zTemp0+1
.a2a5	ad 08 04	lda $0408			lda 	NSMantissa0
.a2a8	85 36		sta $36				sta 	zTemp0
.a2aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2ac	f0 13		beq $a2c1			beq 	_IRDExit
.a2ae	5a		phy				phy									; save string pos
.a2af	48		pha				pha 								; save char
.a2b0	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a2b3	0a		asl a				asl 	a
.a2b4	0a		asl a				asl 	a
.a2b5	0a		asl a				asl 	a
.a2b6	a8		tay				tay
.a2b7	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2b9	fa		plx				plx 								; char to draw
.a2ba	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a2bd	7a		ply				ply 								; restore string pos
.a2be	c8		iny				iny
.a2bf	90 df		bcc $a2a0			bcc 	_IRDLoop 					; go back if no error.
.a2c1					_IRDExit:
.a2c1	60		rts				rts
.a2c2					PlotCommand:
.a2c2	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2c4	20 da a2	jsr $a2da			jsr 	RunGraphicsCommand
.a2c7	80 05		bra $a2ce			bra 	ExecuteGraphicCommand
.a2c9					LineCommand:
.a2c9	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2cb	20 da a2	jsr $a2da			jsr 	RunGraphicsCommand
.a2ce					ExecuteGraphicCommand:
.a2ce	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a2d1	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw 				; draw it and exit
.a2d4	b0 01		bcs $a2d7			bcs 	_EGCError
.a2d6	60		rts				rts
.a2d7					_EGCError:
.a2d7	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.a2da					RunGraphicsCommand:
.a2da	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a2dd	68		pla				pla 								; pop handler address
.a2de	fa		plx				plx
.a2df	1a		inc a				inc 	a
.a2e0	d0 01		bne $a2e3			bne 	_RGINoCarry
.a2e2	e8		inx				inx
.a2e3					_RGINoCarry:
.a2e3	8d 32 06	sta $0632			sta 	GXHandler
.a2e6	8e 33 06	stx $0633			stx 	GXHandler+1
.a2e9					_RGICommandLoop:
.a2e9	b1 30		lda ($30),y			lda 	(codePtr),y
.a2eb	c8		iny				iny
.a2ec	c9 cd		cmp #$cd			cmp 	#KWD_TO						; is it TO x,y
.a2ee	f0 53		beq $a343			beq 	_RGI_To
.a2f0	c9 ba		cmp #$ba			cmp 	#KWD_HERE 					; do it here.
.a2f2	f0 55		beq $a349			beq 	_RGI_Here
.a2f4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a2f6	f0 3d		beq $a335			beq 	_RGI_Exit
.a2f8	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a2fa	f0 39		beq $a335			beq 	_RGI_Exit
.a2fc	c9 c1		cmp #$c1			cmp 	#KWD_OUTLINE 				; solid or outline
.a2fe	f0 3e		beq $a33e			beq 	_RGI_Frame
.a300	c9 c9		cmp #$c9			cmp 	#KWD_SOLID
.a302	f0 33		beq $a337			beq 	_RGI_Solid
.a304	c9 ab		cmp #$ab			cmp 	#KWD_BY 					; by offset
.a306	f0 4b		beq $a353			beq 	_RGI_By
.a308	c9 b6		cmp #$b6			cmp 	#KWD_FROM 					; from
.a30a	f0 17		beq $a323			beq 	_RGI_Move2
.a30c	c9 b3		cmp #$b3			cmp 	#KWD_DIM 					; dim (set scale)
.a30e	f0 65		beq $a375			beq 	_RGI_Dim
.a310	c9 b1		cmp #$b1			cmp 	#KWD_COLOUR 				; colour or Color
.a312	f0 78		beq $a38c			beq 	_RGI_Colour
.a314	c9 b0		cmp #$b0			cmp 	#KWD_COLOR
.a316	f0 74		beq $a38c			beq 	_RGI_Colour
.a318	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a31b	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a31d	d0 03		bne $a322			bne 	_RGI_Move 					; move
.a31f	4c b6 a3	jmp $a3b6			jmp		_RGI_SpriteInstructions
.a322					_RGI_Move:
.a322	88		dey				dey 								; unpick get.
.a323					_RGI_Move2:
.a323	20 dc a3	jsr $a3dc			jsr 	GCGetCoordinatePair 		; move to here
.a326	20 03 a4	jsr $a403			jsr 	GCCopyPairToStore 			; save
.a329	5a		phy				phy
.a32a	20 f9 a3	jsr $a3f9			jsr 	GCLoadAXY 					; load in
.a32d	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a32f	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a332	7a		ply				ply
.a333	80 b4		bra $a2e9			bra 	_RGICommandLoop 			; and go round
.a335					_RGI_Exit:
.a335	88		dey				dey 								; unpick : / EOL
.a336	60		rts				rts
.a337					_RGI_Solid:
.a337	a9 02		lda #$02			lda 	#2
.a339	8d 2e 06	sta $062e			sta 	gxFillSolid
.a33c	80 ab		bra $a2e9			bra 	_RGICommandLoop
.a33e					_RGI_Frame:
.a33e	9c 2e 06	stz $062e			stz 	gxFillSolid
.a341	80 a6		bra $a2e9			bra 	_RGICommandLoop
.a343					_RGI_To:
.a343	20 dc a3	jsr $a3dc			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a346	20 03 a4	jsr $a403			jsr 	GCCopyPairToStore
.a349					_RGI_Here:
.a349	5a		phy				phy
.a34a	20 f9 a3	jsr $a3f9			jsr 	GCLoadAXY 					; load it into AXY
.a34d	20 b3 a3	jsr $a3b3			jsr 	_RGICallHandler 			; go do whatever it is.
.a350	7a		ply				ply
.a351	80 96		bra $a2e9			bra 	_RGICommandLoop 			; and go round
.a353					_RGI_By:
.a353	20 e9 a3	jsr $a3e9			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a356	18		clc				clc
.a357	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a35a	6d 2f 06	adc $062f			adc 	gxxPos
.a35d	8d 2f 06	sta $062f			sta 	gxXPos
.a360	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a363	6d 30 06	adc $0630			adc 	gxxPos+1
.a366	8d 30 06	sta $0630			sta 	gxXPos+1
.a369	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a36c	18		clc				clc
.a36d	6d 31 06	adc $0631			adc 	gxYPos
.a370	8d 31 06	sta $0631			sta 	gxYPos
.a373	80 d4		bra $a349			bra 	_RGI_Here
.a375					_RGI_Dim:
.a375	a2 01		ldx #$01			ldx	 	#1
.a377	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger
.a37a	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a37d	c9 00		cmp #$00			cmp 	#0
.a37f	f0 2f		beq $a3b0			beq 	_RGIRange
.a381	c9 09		cmp #$09			cmp 	#8+1
.a383	b0 2b		bcs $a3b0			bcs		_RGIRange
.a385	3a		dec a				dec 	a
.a386	8d 34 06	sta $0634			sta 	gxDrawScale
.a389	4c e9 a2	jmp $a2e9			jmp 	_RGICommandLoop
.a38c					_RGI_Colour:
.a38c	a2 01		ldx #$01			ldx 	#1 							; colour
.a38e	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger
.a391	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a393	20 06 9e	jsr $9e06			jsr 	NSMSetZero
.a396	b1 30		lda ($30),y			lda 	(codePtr),y
.a398	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a39a	d0 04		bne $a3a0			bne 	_RGICDefaultMode
.a39c	c8		iny				iny
.a39d	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger
.a3a0					_RGICDefaultMode:
.a3a0	5a		phy				phy
.a3a1	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a3a3	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a3a6	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a3a9	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a3ac	7a		ply				ply
.a3ad	4c e9 a2	jmp $a2e9			jmp 	_RGICommandLoop 			; and go round
.a3b0					_RGIRange:
.a3b0	4c 95 9f	jmp $9f95			jmp 	RangeError
.a3b3					_RGICallHandler:
.a3b3	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a3b6					_RGI_SpriteInstructions:
.a3b6	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a3b8	f0 07		beq $a3c1			beq 	_RGISpriteOff
.a3ba	c9 bb		cmp #$bb			cmp 	#KWD_IMAGE
.a3bc	f0 13		beq $a3d1			beq 	_RGISetImage
.a3be	4c 22 a3	jmp $a322			jmp 	_RGI_Move
.a3c1					_RGISpriteOff:
.a3c1	5a		phy				phy
.a3c2	a0 01		ldy #$01			ldy 	#1
.a3c4	a2 00		ldx #$00			ldx 	#0
.a3c6					_RGIDoCommandLoop:
.a3c6	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3c8	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a3cb	7a		ply				ply
.a3cc	b0 e2		bcs $a3b0			bcs 	_RGIRange
.a3ce	4c e9 a2	jmp $a2e9			jmp 	_RGICommandLoop
.a3d1					_RGISetImage:
.a3d1	a2 01		ldx #$01			ldx 	#1
.a3d3	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger
.a3d6	5a		phy				phy
.a3d7	aa		tax				tax
.a3d8	a0 00		ldy #$00			ldy 	#0
.a3da	80 ea		bra $a3c6			bra 	_RGIDoCommandLoop
.a3dc					GCGetCoordinatePair:
.a3dc	a2 01		ldx #$01			ldx 	#1
.a3de	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.a3e1	20 32 8d	jsr $8d32			jsr 	CheckComma
.a3e4	e8		inx				inx
.a3e5	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.a3e8	60		rts				rts
.a3e9					GCSignedCoordinatePair:
.a3e9	a2 01		ldx #$01			ldx 	#1
.a3eb	20 73 9d	jsr $9d73			jsr 	Evaluate16BitIntegerSigned
.a3ee	20 32 8d	jsr $8d32			jsr 	CheckComma
.a3f1	e8		inx				inx
.a3f2	20 73 9d	jsr $9d73			jsr 	Evaluate16BitIntegerSigned
.a3f5	60		rts				rts
.a3f6					_GCCPRange:
.a3f6	4c 95 9f	jmp $9f95			jmp 	RangeError
.a3f9					GCLoadAXY:
.a3f9	ad 30 06	lda $0630			lda 	gxXPos+1
.a3fc	ae 2f 06	ldx $062f			ldx 	gxXPos
.a3ff	ac 31 06	ldy $0631			ldy 	gxYPos
.a402	60		rts				rts
.a403					GCCopyPairToStore:
.a403	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a406	8d 2f 06	sta $062f			sta 	gxXPos
.a409	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a40c	8d 30 06	sta $0630			sta 	gxXPos+1
.a40f	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a412	8d 31 06	sta $0631			sta 	gxYPos
.a415	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcontrol.asm

.a416					BitmapCtrl:
.a416	b1 30		lda ($30),y			lda 	(codePtr),y
.a418	c8		iny				iny
.a419	a2 01		ldx #$01			ldx 	#1
.a41b	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a41d	f0 11		beq $a430			beq 	BitmapSwitch
.a41f	ca		dex				dex
.a420	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a422	f0 0c		beq $a430			beq 	BitmapSwitch
.a424	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get the colour
.a427	5a		phy				phy
.a428	aa		tax				tax
.a429	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a42b	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a42e	7a		ply				ply
.a42f	60		rts				rts
.a430					BitmapSwitch:
.a430	5a		phy				phy
.a431	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a433	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a435	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a438	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a43a	a0 00		ldy #$00			ldy 	#0
.a43c	a2 ff		ldx #$ff			ldx 	#$FF
.a43e	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a441	9c 2e 06	stz $062e			stz 	gxFillSolid
.a444	9c 2f 06	stz $062f			stz 	gxXPos
.a447	9c 30 06	stz $0630			stz 	gxXPos+1
.a44a	9c 31 06	stz $0631			stz 	gxYPos
.a44d	9c 34 06	stz $0634			stz 	gxDrawScale
.a450	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a452	a2 00		ldx #$00			ldx 	#0
.a454	a0 00		ldy #$00			ldy 	#0
.a456	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a459	7a		ply				ply
.a45a	60		rts				rts
.a45b					SpritesCtrl:
.a45b	b1 30		lda ($30),y			lda 	(codePtr),y
.a45d	c8		iny				iny
.a45e	a2 01		ldx #$01			ldx 	#1
.a460	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a462	f0 08		beq $a46c			beq 	SpriteSwitch
.a464	ca		dex				dex
.a465	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a467	f0 03		beq $a46c			beq 	SpriteSwitch
.a469	4c 90 9f	jmp $9f90			jmp 	SyntaxError
.a46c					SpriteSwitch:
.a46c	5a		phy				phy
.a46d	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a46f	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a471	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a474	7a		ply				ply
.a475	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gfx.asm

.a476					GfxCommand:
.a476	a2 00		ldx #$00			ldx 	#0
.a478	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; command
.a47b	20 32 8d	jsr $8d32			jsr 	CheckComma
.a47e	e8		inx				inx
.a47f	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger 		; X
.a482	20 32 8d	jsr $8d32			jsr 	CheckComma
.a485	e8		inx				inx
.a486	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; Y
.a489	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a48c	4a		lsr a				lsr 	a
.a48d	d0 16		bne $a4a5			bne 	_GfxError
.a48f	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a492	b0 11		bcs $a4a5			bcs 	_GfxError 					; bit 7 should have been zero
.a494	5a		phy				phy 								; save pos
.a495	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a498	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a49b	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a49e	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw
.a4a1	b0 02		bcs $a4a5			bcs 	_GfxError
.a4a3	7a		ply				ply 								; restore pos and exit.
.a4a4	60		rts				rts
.a4a5					_GfxError:
.a4a5	4c 95 9f	jmp $9f95			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/hit.asm

.a4a8					UnaryHit:
.a4a8	fa		plx				plx
.a4a9	a9 36		lda #$36			lda 	#zTemp0
.a4ab	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4ae	20 32 8d	jsr $8d32			jsr 	CheckComma
.a4b1	e8		inx				inx
.a4b2	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4b5	20 2a 8d	jsr $8d2a			jsr		CheckRightBracket
.a4b8	ca		dex				dex 								; fix back up again.
.a4b9	da		phx				phx 								; save X/Y
.a4ba	5a		phy				phy
.a4bb	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4be	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4c1	aa		tax				tax
.a4c2	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4c4	20 20 aa	jsr $aa20			jsr 	GXGraphicDraw 				; calculate result
.a4c7	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4c8	7a		ply				ply 								; restore XY
.a4c9	fa		plx				plx
.a4ca	20 08 9e	jsr $9e08			jsr 	NSMSetByte 					; return the hit result
.a4cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/palette.asm

.a4ce					PaletteCommand:
.a4ce	a2 00		ldx #$00			ldx 	#0
.a4d0	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; colour
.a4d3	20 32 8d	jsr $8d32			jsr 	CheckComma
.a4d6	e8		inx				inx
.a4d7	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger 		; r
.a4da	20 32 8d	jsr $8d32			jsr 	CheckComma
.a4dd	e8		inx				inx
.a4de	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; g
.a4e1	20 32 8d	jsr $8d32			jsr 	CheckComma
.a4e4	e8		inx				inx
.a4e5	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; b
.a4e8	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a4eb	85 36		sta $36				sta 	zTemp0
.a4ed	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a4ef	85 37		sta $37				sta 	zTemp0+1
.a4f1	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a4f3	26 37		rol $37				rol	 	zTemp0+1
.a4f5	06 36		asl $36				asl 	zTemp0
.a4f7	26 37		rol $37				rol	 	zTemp0+1
.a4f9	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a4fb	85 01		sta $01				sta 	1
.a4fd	5a		phy				phy
.a4fe	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a501	92 36		sta ($36)			sta 	(zTemp0)
.a503	a0 01		ldy #$01			ldy 	#1
.a505	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a508	91 36		sta ($36),y			sta 	(zTemp0),y
.a50a	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a50d	c8		iny				iny
.a50e	91 36		sta ($36),y			sta 	(zTemp0),y
.a510	7a		ply				ply
.a511	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/hardware/event.asm

.a512					UnaryEvent:
.a512	fa		plx				plx
.a513	20 ba a5	jsr $a5ba			jsr 	TimerToStackX 				; timer in +0
.a516	e8		inx				inx  								; put reference into +1
.a517	20 cc 97	jsr $97cc			jsr 	EvaluateTerm
.a51a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a51d	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a51f	d0 57		bne $a578			bne 	_UEType
.a521	e8		inx				inx 								; put the step in +2
.a522	20 32 8d	jsr $8d32			jsr 	CheckComma
.a525	20 67 9d	jsr $9d67			jsr 	Evaluate16BitInteger
.a528	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.a52b	ca		dex				dex
.a52c	ca		dex				dex
.a52d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a530	85 36		sta $36				sta 	zTemp0
.a532	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a535	85 37		sta $37				sta 	zTemp0+1
.a537	5a		phy				phy
.a538	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a53a	b1 36		lda ($36),y			lda 	(zTemp0),y
.a53c	30 36		bmi $a574			bmi 	_UEFalse 					; exit if signed.
.a53e	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a540	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a543	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a545	c8		iny				iny
.a546	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a549	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a54b	c8		iny				iny
.a54c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a54f	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a551	90 21		bcc $a574			bcc 	_UEFalse 					; no, return FALSE.
.a553	18		clc				clc
.a554	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a556	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a559	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a55c	91 36		sta ($36),y			sta 	(zTemp0),y
.a55e	c8		iny				iny
.a55f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a562	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a565	91 36		sta ($36),y			sta 	(zTemp0),y
.a567	c8		iny				iny
.a568	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a56b	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a56e	91 36		sta ($36),y			sta 	(zTemp0),y
.a570	7a		ply				ply
.a571	4c b0 8d	jmp $8db0			jmp 	ReturnTrue
.a574					_UEFalse:
.a574	7a		ply				ply 								; restore Y
.a575	4c bc 8d	jmp $8dbc			jmp 	ReturnFalse 				; and return False
.a578					_UEType:
.a578	4c 9a 9f	jmp $9f9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/hardware/joy.asm

.a57b					UnaryJoyX:
.a57b	18		clc				clc
.a57c	80 01		bra $a57f			bra 	JoyMain
.a57e					UnaryJoyY:
.a57e	38		sec				sec
.a57f					JoyMain:
.a57f	fa		plx				plx 								; get pos
.a580	08		php				php 								; save carry (set for Y)
.a581	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a584	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.a587	20 d9 a9	jsr $a9d9			jsr 	EXTReadController 			; read the controller.
.a58a	28		plp				plp
.a58b	90 02		bcc $a58f			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a58d	4a		lsr a				lsr 	a
.a58e	4a		lsr a				lsr 	a
.a58f					_JMNoShift:
.a58f	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a590	b0 0a		bcs $a59c			bcs 	_JMIsRight
.a592	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a593	b0 04		bcs $a599			bcs 	_JMIsLeft
.a595	20 06 9e	jsr $9e06			jsr 	NSMSetZero 					; zero result
.a598	60		rts				rts
.a599					_JMIsLeft:
.a599	4c b0 8d	jmp $8db0			jmp 	ReturnTrue
.a59c					_JMIsRight:
.a59c	a9 01		lda #$01			lda 	#1
.a59e	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.a5a1	60		rts				rts
.a5a2					UnaryJoyB:
.a5a2	fa		plx				plx 								; get pos
.a5a3	20 87 9d	jsr $9d87			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5a6	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.a5a9	20 d9 a9	jsr $a9d9			jsr 	EXTReadController 			; read the controller.
.a5ac	4a		lsr a				lsr 	a
.a5ad	4a		lsr a				lsr 	a
.a5ae	4a		lsr a				lsr 	a
.a5af	4a		lsr a				lsr 	a
.a5b0	29 01		and #$01			and 	#1
.a5b2	20 08 9e	jsr $9e08			jsr 	NSMSetByte
.a5b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/hardware/timer.asm

.a5b6					UnaryTimer:
.a5b6	fa		plx				plx
.a5b7	20 2a 8d	jsr $8d2a			jsr 	CheckRightBracket
.a5ba					TimerToStackX:
.a5ba	20 06 9e	jsr $9e06			jsr 	NSMSetZero 					; zero result
.a5bd	64 01		stz $01				stz 	1 							; access I/O
.a5bf	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5c2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5c5	ad 5a d6	lda $d65a			lda 	$D65A
.a5c8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5cb	ad 5b d6	lda $d65b			lda 	$D65B
.a5ce	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5d2					StackPushByte:
.a5d2	48		pha				pha 								; save byte
.a5d3	a5 34		lda $34				lda 	BasicStack
.a5d5	d0 09		bne $a5e0			bne 	_SPBNoBorrow
.a5d7	c6 35		dec $35				dec 	BasicStack+1
.a5d9	48		pha				pha
.a5da	a5 35		lda $35				lda 	BasicStack+1
.a5dc	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5de	90 06		bcc $a5e6			bcc 	_SPBMemory
.a5e0					_SPBNoBorrow:
.a5e0	c6 34		dec $34				dec 	BasicStack
.a5e2	68		pla				pla 								; get back and write
.a5e3	92 34		sta ($34)			sta 	(BasicStack)
.a5e5	60		rts				rts
.a5e6					_SPBMemory:
.a5e6	a9 12		lda #$12		lda	#18
.a5e8	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.a5eb					StackPopByte:
.a5eb	b2 34		lda ($34)			lda 	(BasicStack)
.a5ed	e6 34		inc $34				inc 	BasicStack
.a5ef	d0 02		bne $a5f3			bne 	_SPBNoCarry
.a5f1	e6 35		inc $35				inc 	BasicStack+1
.a5f3					_SPBNoCarry:
.a5f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a5f4					StackOpen:
.a5f4	48		pha				pha 								; save frame byte
.a5f5	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a5f7	0a		asl a				asl 	a 							; claim twice this for storage
.a5f8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a5fa	38		sec				sec 								; so basically subtracting from
.a5fb	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a5fd	85 34		sta $34				sta 	basicStack
.a5ff	b0 08		bcs $a609			bcs 	_SONoBorrow
.a601	c6 35		dec $35				dec 	basicStack+1
.a603	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a605	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a607	90 04		bcc $a60d			bcc 	_SOMemory
.a609					_SONoBorrow:
.a609	68		pla				pla 								; get marker back and write at TOS
.a60a	92 34		sta ($34)			sta 	(basicStack)
.a60c	60		rts				rts
.a60d					_SOMemory:
.a60d	a9 12		lda #$12		lda	#18
.a60f	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.a612					StackClose:
.a612	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a614	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a616	0a		asl a				asl 	a 							; claim twice this.
.a617	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a619	85 34		sta $34				sta 	basicStack
.a61b	90 02		bcc $a61f			bcc 	_SCExit
.a61d	e6 35		inc $35				inc 	basicStack+1
.a61f					_SCExit:
.a61f	60		rts				rts
.a620					StackCheckFrame:
.a620	48		pha				pha
.a621					_StackRemoveLocals:
.a621	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a623	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a625	b0 05		bcs $a62c			bcs 	_SCNoLocal
.a627	20 ef 87	jsr $87ef			jsr 	LocalPopValue
.a62a	80 f5		bra $a621			bra 	_StackRemoveLocals
.a62c					_SCNoLocal:
.a62c	68		pla				pla
.a62d	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a62f	29 f0		and #$f0			and 	#$F0 						; check type bits
.a631	d0 01		bne $a634			bne 	_SCFError 					; different, we have structures mixed up
.a633	60		rts				rts
.a634					_SCFError:
.a634	8a		txa				txa 								; report error X
.a635	4c 43 8d	jmp $8d43			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a638					STKSaveCodePosition:
.a638	5a		phy				phy
.a639	98		tya				tya 								; save Y
.a63a	a0 05		ldy #$05			ldy 	#5
.a63c	91 34		sta ($34),y			sta 	(basicStack),y
.a63e	88		dey				dey 								; save Code Pointer
.a63f					_STKSaveLoop:
.a63f	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a642	91 34		sta ($34),y			sta 	(basicStack),y
.a644	88		dey				dey
.a645	d0 f8		bne $a63f			bne 	_STKSaveLoop
.a647	7a		ply				ply
.a648	60		rts				rts
.a649					STKLoadCodePosition:
.a649	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a64b					_STKLoadLoop:
.a64b	b1 34		lda ($34),y			lda 	(basicStack),y
.a64d	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a650	c8		iny				iny
.a651	c0 05		cpy #$05			cpy 	#5
.a653	d0 f6		bne $a64b			bne 	_STKLoadLoop
.a655	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a657	a8		tay				tay
.a658	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a659					StackReset:
.a659	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a65b	85 34		sta $34				sta 	0+basicStack
.a65d	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a65f	85 35		sta $35				sta 	1+basicStack
.a661	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a663	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a665	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a666					StringConcrete:
.a666	5a		phy				phy 								; save position on stack
.a667	20 cf 99	jsr $99cf			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a66a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a66d	85 38		sta $38				sta 	zTemp1
.a66f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a672	85 39		sta $39				sta 	zTemp1+1
.a674	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a676					_SALength:
.a676	c8		iny				iny
.a677	b1 38		lda ($38),y			lda 	(zTemp1),y
.a679	d0 fb		bne $a676			bne 	_SALength
.a67b	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a67d	b0 3f		bcs $a6be			bcs 	_SALengthError
.a67f	98		tya				tya 				 				; length of the new string
.a680	18		clc				clc
.a681	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a683	90 02		bcc $a687			bcc 	_SAHaveLength
.a685	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a687					_SAHaveLength:
.a687	48		pha				pha 								; save length.
.a688	38		sec				sec
.a689	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a68b	6d 8e 04	adc $048e			adc 	StringMemory
.a68e	8d 8e 04	sta $048e			sta 	StringMemory
.a691	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a693	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a696	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a698	6d 8f 04	adc $048f			adc 	StringMemory+1
.a69b	8d 8f 04	sta $048f			sta 	StringMemory+1
.a69e	85 3b		sta $3b				sta 	zTemp2+1
.a6a0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6a3	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a6a4	38		sec				sec
.a6a5	e9 03		sbc #$03			sbc 	#3
.a6a7	92 3a		sta ($3a)			sta 	(zTemp2)
.a6a9	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a6ab	a0 01		ldy #$01			ldy 	#1
.a6ad	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6af					_SACopyNewString:
.a6af	a0 00		ldy #$00			ldy 	#0
.a6b1					_SACopyNSLoop:
.a6b1	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a6b3	c8		iny				iny 								; write two on in string storage
.a6b4	c8		iny				iny
.a6b5	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6b7	88		dey				dey 								; this makes it one one.
.a6b8	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a6ba	d0 f5		bne $a6b1			bne 	_SACopyNSLoop
.a6bc	7a		ply				ply
.a6bd	60		rts				rts
.a6be					_SALengthError:
.a6be	a9 09		lda #$09		lda	#9
.a6c0	4c 43 8d	jmp $8d43		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a6c3					StringSystemInitialise:
.a6c3	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a6c5	8d 8e 04	sta $048e			sta 	0+StringMemory
.a6c8	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a6ca	8d 8f 04	sta $048f			sta 	1+StringMemory
.a6cd	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a6d0	60		rts				rts
.a6d1					StringSpaceInitialise:
.a6d1	20 cf 99	jsr $99cf			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6d4	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a6d6	8d 90 04	sta $0490			sta 	StringInitialised
.a6d9	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a6dc	8d 91 04	sta $0491			sta 	StringTempPointer
.a6df	ad 8f 04	lda $048f			lda 	StringMemory+1
.a6e2	3a		dec a				dec 	a
.a6e3	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a6e6	60		rts				rts
.a6e7					StringTempAllocate:
.a6e7	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a6e9	b0 35		bcs $a720			bcs 	_STALength
.a6eb	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a6ee	30 05		bmi $a6f5			bmi 	_STAAllocate
.a6f0	48		pha				pha 								; save value to subtract.
.a6f1	20 d1 a6	jsr $a6d1			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a6f4	68		pla				pla 								; restore it
.a6f5					_STAAllocate:
.a6f5	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a6f7	18		clc				clc  								; deliberate allows one more
.a6f8	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a6fb	8d 91 04	sta $0491			sta 	StringTempPointer
.a6fe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a701	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a703	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a706	69 ff		adc #$ff			adc 	#$FF
.a708	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a70b	85 3d		sta $3d				sta 	zsTemp+1
.a70d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a710	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a713	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a716	a9 10		lda #$10			lda 	#NSTString
.a718	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a71b	a9 00		lda #$00			lda 	#0 							; clear the target string
.a71d	92 3c		sta ($3c)			sta 	(zsTemp)
.a71f	60		rts				rts
.a720					_STALength:
.a720	a9 09		lda #$09		lda	#9
.a722	4c 43 8d	jmp $8d43		jmp	ErrorHandler
.a725					StringTempWrite:
.a725	48		pha				pha
.a726	92 3c		sta ($3c)			sta 	(zsTemp)
.a728	e6 3c		inc $3c				inc 	zsTemp
.a72a	d0 02		bne $a72e			bne 	_STWNoCarry
.a72c	e6 3d		inc $3d				inc 	zsTemp+1
.a72e					_STWNoCarry:
.a72e	a9 00		lda #$00			lda 	#0
.a730	92 3c		sta ($3c)			sta 	(zsTemp)
.a732	68		pla				pla
.a733	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=7					CLIIdentifier = CONYellow
=10					CLIPunctuation = CONYellowGreen
=1					CLIData = CONWhite
.a734					EXTPrintCharacter:
.a734	48		pha				pha
.a735	da		phx				phx
.a736	5a		phy				phy
.a737	a6 01		ldx $01				ldx 	1
.a739	da		phx				phx
.a73a	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a73d	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a73f	30 48		bmi $a789			bmi 	_EXPCColour
.a741	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a743	90 4d		bcc $a792			bcc 	_EXPCControl
.a745	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a747	86 01		stx $01				stx 	1
.a749	91 40		sta ($40),y			sta 	(EXTAddress),y
.a74b	e6 01		inc $01				inc 	1 							; select colour memory
.a74d	ad 37 06	lda $0637			lda 	EXTTextColour
.a750	91 40		sta ($40),y			sta 	(EXTAddress),y
.a752	c8		iny				iny 								; advance horizontal position
.a753	8c 36 06	sty $0636			sty 	EXTColumn
.a756	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a759	90 66		bcc $a7c1			bcc 	_EXPCExit 					; no, then exit.
.a75b					_EXPCCRLF:
.a75b	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a75e	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a761	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a764	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a767	f0 18		beq $a781			beq 	_EXPCScroll
.a769	18		clc				clc 								; add width to address.
.a76a	a5 40		lda $40				lda 	EXTAddress
.a76c	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a76f	85 40		sta $40				sta 	EXTAddress
.a771	90 4e		bcc $a7c1			bcc 	_EXPCExit
.a773	e6 41		inc $41				inc 	EXTAddress+1
.a775	80 4a		bra $a7c1			bra 	_EXPCExit
.a777					_EXPCLeft:
.a777	ce 36 06	dec $0636			dec 	EXTColumn
.a77a	10 45		bpl $a7c1			bpl 	_EXPCExit
.a77c					_EXPCBegin:
.a77c	9c 36 06	stz $0636			stz 	EXTColumn
.a77f	80 40		bra $a7c1			bra 	_EXPCExit
.a781					_EXPCScroll:
.a781	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a784	20 4e a8	jsr $a84e			jsr 	EXTScreenScroll 			; scroll the screen
.a787	80 38		bra $a7c1			bra 	_EXPCExit
.a789					_EXPCColour:
.a789	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a78b	b0 34		bcs $a7c1			bcs 	_EXPCExit
.a78d	20 2e a8	jsr $a82e			jsr 	_EXPCHandleColour
.a790	80 2f		bra $a7c1			bra 	_EXPCExit
.a792					_EXPCControl:
.a792	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a794	b0 2b		bcs $a7c1			bcs 	_EXPCExit
.a796	0a		asl a				asl 	a 							; double into X
.a797	aa		tax				tax
.a798	7c 0c a8	jmp ($a80c,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a79b					_EXPCUp:
.a79b	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a79e	f0 21		beq $a7c1			beq 	_EXPCExit
.a7a0	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a7a3	38		sec				sec
.a7a4	a5 40		lda $40				lda 	EXTAddress
.a7a6	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a7a9	85 40		sta $40				sta 	EXTAddress
.a7ab	b0 14		bcs $a7c1			bcs 	_EXPCExit
.a7ad	c6 41		dec $41				dec 	EXTAddress+1
.a7af	80 10		bra $a7c1			bra 	_EXPCExit
.a7b1					_EXPCRight:
.a7b1	c8		iny				iny
.a7b2	8c 36 06	sty $0636			sty 	EXTColumn
.a7b5	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7b8	d0 07		bne $a7c1			bne 	_EXPCExit
.a7ba					_EXPCEnd:
.a7ba	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7bd	3a		dec a				dec 	a
.a7be	8d 36 06	sta $0636			sta 	EXTColumn
.a7c1					_EXPCExit:
.a7c1	20 a3 a8	jsr $a8a3			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7c4	68		pla				pla
.a7c5	85 01		sta $01				sta 	1
.a7c7	7a		ply				ply
.a7c8	fa		plx				plx
.a7c9	68		pla				pla
.a7ca	60		rts				rts
.a7cb					_EXPCClearScreen:
.a7cb	20 60 a8	jsr $a860			jsr		EXTClearScreenCode
.a7ce	80 f1		bra $a7c1			bra 	_EXPCExit
.a7d0					_EXPCDown:
.a7d0	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7d3	3a		dec a				dec 	a
.a7d4	cd 35 06	cmp $0635			cmp 	EXTRow
.a7d7	f0 e8		beq $a7c1			beq 	_EXPCExit
.a7d9	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7dc	18		clc				clc
.a7dd	a5 40		lda $40				lda 	EXTAddress
.a7df	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7e2	85 40		sta $40				sta 	EXTAddress
.a7e4	90 db		bcc $a7c1			bcc 	_EXPCExit
.a7e6	e6 41		inc $41				inc 	EXTAddress+1
.a7e8	80 d7		bra $a7c1			bra 	_EXPCExit
.a7ea					_EXPCTab:
.a7ea	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a7ed	29 f8		and #$f8			and 	#$F8
.a7ef	18		clc				clc
.a7f0	69 08		adc #$08			adc 	#8
.a7f2	8d 36 06	sta $0636			sta 	EXTColumn
.a7f5	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a7f8	90 c7		bcc $a7c1			bcc 	_EXPCExit
.a7fa	80 be		bra $a7ba			bra 	_EXPCEnd
.a7fc					_EXPCBackSpace:
.a7fc	88		dey				dey
.a7fd	30 c2		bmi $a7c1			bmi 	_EXPCExit
.a7ff	ce 36 06	dec $0636			dec 	EXTColumn
.a802	a9 02		lda #$02			lda 	#2
.a804	85 01		sta $01				sta 	1
.a806	a9 20		lda #$20			lda 	#32
.a808	91 40		sta ($40),y			sta 	(EXTAddress),y
.a80a	80 b5		bra $a7c1			bra 	_EXPCExit
.a80c					_EXPCActionTable:
>a80c	c1 a7						.word 	_EXPCExit 					; 00
>a80e	7c a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a810	77 a7						.word 	_EXPCLeft 					; 02 B Left
>a812	c1 a7						.word 	_EXPCExit 					; 03 <Break>
>a814	c1 a7						.word 	_EXPCExit 					; 04
>a816	ba a7						.word 	_EXPCEnd 					; 05 E End of Line
>a818	b1 a7						.word 	_EXPCRight 					; 06 F Right
>a81a	c1 a7						.word 	_EXPCExit 					; 07
>a81c	fc a7						.word 	_EXPCBackspace 				; 08 H Backspace
>a81e	ea a7						.word 	_EXPCTab 					; 09 I Tab
>a820	c1 a7						.word 	_EXPCExit 					; 0A
>a822	c1 a7						.word 	_EXPCExit 					; 0B
>a824	cb a7						.word 	_EXPCClearScreen			; 0C L CLS
>a826	5b a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a828	d0 a7						.word 	_EXPCDown 					; 0E N Down
>a82a	c1 a7						.word 	_EXPCExit 					; 0F
>a82c	9b a7						.word 	_EXPCUp 					; 10 P Up
.a82e					_EXPCHandleColour
.a82e	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a830	b0 16		bcs $a848			bcs 	_EXPCBackground
.a832	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a833	0a		asl a				asl 	a
.a834	0a		asl a				asl 	a
.a835	0a		asl a				asl 	a
.a836	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a838					_EXPCUpdate:
.a838	48		pha				pha 								; save new colour
.a839	8a		txa				txa 								; get mask
.a83a	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a83d	8d 37 06	sta $0637			sta 	EXTTextColour
.a840	68		pla				pla 								; or in new colour
.a841	0d 37 06	ora $0637			ora 	EXTTextColour
.a844	8d 37 06	sta $0637			sta 	EXTTextColour
.a847	60		rts				rts
.a848					_EXPCBackground:
.a848	29 0f		and #$0f			and 	#$0F 						; get the colour
.a84a	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a84c	80 ea		bra $a838			bra 	_EXPCUpdate
.a84e					EXTScreenScroll:
.a84e	a9 02		lda #$02			lda 	#2 							; select text page
.a850	85 01		sta $01				sta 	1
.a852	a9 20		lda #$20			lda		#32 						; fill with space
.a854	20 63 a9	jsr $a963			jsr 	EXTScrollFill
.a857	e6 01		inc $01				inc 	1 							; select colour page
.a859	ad 37 06	lda $0637			lda 	EXTTextColour
.a85c	20 63 a9	jsr $a963			jsr 	EXTScrollFill
.a85f	60		rts				rts
.a860					EXTClearScreenCode:
.a860	a9 02		lda #$02			lda 	#2 							; select text page
.a862	85 01		sta $01				sta 	1
.a864	a9 20		lda #$20			lda		#32 						; fill with space
.a866	20 73 a8	jsr $a873			jsr 	_EXTCSFill
.a869	e6 01		inc $01				inc 	1 							; select colour page
.a86b	ad 37 06	lda $0637			lda 	EXTTextColour
.a86e	20 73 a8	jsr $a873			jsr 	_EXTCSFill
.a871	80 22		bra $a895			bra 	EXTHomeCursor
.a873					_EXTCSFill:
.a873	aa		tax				tax
.a874	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a876	85 40		sta $40				sta 	EXTAddress
.a878	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a87a	85 41		sta $41				sta 	EXTAddress+1
.a87c					_EXTCSFill1:
.a87c	a0 00		ldy #$00			ldy 	#0
.a87e	8a		txa				txa
.a87f					_EXTCSFill2:
.a87f	91 40		sta ($40),y			sta 	(EXTAddress),y
.a881	c8		iny				iny
.a882	d0 fb		bne $a87f			bne 	_EXTCSFill2
.a884	e6 41		inc $41				inc 	EXTAddress+1
.a886	a5 41		lda $41				lda 	EXTAddress+1
.a888	c9 d2		cmp #$d2			cmp 	#$D2
.a88a	d0 f0		bne $a87c			bne 	_EXTCSFill1
.a88c	8a		txa				txa
.a88d					_EXTCSFill3:
.a88d	91 40		sta ($40),y			sta 	(EXTAddress),y
.a88f	c8		iny				iny
.a890	c0 c0		cpy #$c0			cpy 	#$C0
.a892	d0 f9		bne $a88d			bne 	_EXTCSFill3
.a894	60		rts				rts
.a895					EXTHomeCursor:
.a895	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a898	9c 36 06	stz $0636			stz 	EXTColumn
.a89b	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a89d	85 40		sta $40				sta 	EXTAddress
.a89f	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a8a1	85 41		sta $41				sta 	EXTAddress+1
.a8a3					EXTSetHardwareCursor:
.a8a3	64 01		stz $01				stz 	1 							; I/O Page zero
.a8a5	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a8a7	8d 10 d0	sta $d010			sta 	$D010
.a8aa	a9 b1		lda #$b1			lda 	#$B1
.a8ac	8d 12 d0	sta $d012			sta 	$D012
.a8af	ad 36 06	lda $0636			lda 	EXTColumn
.a8b2	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8b5	9c 15 d0	stz $d015			stz 	$D015
.a8b8	ad 35 06	lda $0635			lda 	EXTRow
.a8bb	8d 16 d0	sta $d016			sta 	$D016
.a8be	9c 17 d0	stz $d017			stz 	$D017
.a8c1	60		rts				rts
.a8c2					EXTInputLine:
.a8c2	48		pha				pha
.a8c3	da		phx				phx
.a8c4	5a		phy				phy
.a8c5	a5 01		lda $01				lda 	1 							; save I/O page
.a8c7	48		pha				pha
.a8c8					_EILLoop:
.a8c8	20 ca a9	jsr $a9ca			jsr 	ExtInputSingleCharacter
.a8cb	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a8cd	f0 40		beq $a90f			beq 	_EILExit
.a8cf	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a8d1	f0 1c		beq $a8ef			beq 	_EILBackspace
.a8d3	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a8d5	90 12		bcc $a8e9			bcc 	_EILPrintLoop
.a8d7	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a8d9	b0 0e		bcs $a8e9			bcs 	_EILPrintLoop
.a8db	48		pha				pha 								; save character
.a8dc	a9 02		lda #$02			lda 	#2  						; insert a space
.a8de	85 01		sta $01				sta 	1
.a8e0	20 51 a9	jsr $a951			jsr 	EXTILInsert 				; insert in text screen
.a8e3	e6 01		inc $01				inc 	1
.a8e5	20 51 a9	jsr $a951			jsr 	EXTILInsert 				; insert in colour screen
.a8e8	68		pla				pla 								; get character back.
.a8e9					_EILPrintLoop:
.a8e9	20 34 a7	jsr $a734			jsr 	ExtPrintCharacter
.a8ec	80 da		bra $a8c8			bra 	_EILLoop
.a8ee	60		rts				rts
.a8ef					_EILBackspace:
.a8ef	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a8f2	f0 d4		beq $a8c8			beq 	_EILLoop
.a8f4	a9 02		lda #$02			lda 	#2 							; move cursor left
.a8f6	20 34 a7	jsr $a734			jsr 	EXTPrintCharacter
.a8f9	a9 02		lda #$02			lda 	#2 							; text block
.a8fb	85 01		sta $01				sta 	1
.a8fd	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a8ff	20 3c a9	jsr $a93c			jsr 	EXTILDelete
.a902	e6 01		inc $01				inc 	1 							; colour block
.a904	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a907	88		dey				dey
.a908	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a90a	20 3c a9	jsr $a93c			jsr 	EXTILDelete 				; backspace attribute
.a90d	80 b9		bra $a8c8			bra 	_EILLoop 					; and go round.
.a90f					_EILExit:
.a90f	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a911	85 01		sta $01				sta 	1
.a913	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a915					_EILScrapeLine:
.a915	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a917	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a91a	c8		iny				iny
.a91b	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a91e	d0 f5		bne $a915			bne 	_EILScrapeLine
.a920					_EILTrimSpaces:
.a920	88		dey				dey
.a921	f0 08		beq $a92b			beq 	_EILEndTrim
.a923	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a926	c9 20		cmp #$20			cmp 	#' '
.a928	f0 f6		beq $a920			beq 	_EILTrimSpaces
.a92a	c8		iny				iny 								; trim after non space character.
.a92b					_EILEndTrim:
.a92b	a9 00		lda #$00			lda 	#0 							; trim here.
.a92d	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a930	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a932	20 34 a7	jsr $a734			jsr 	ExtPrintCharacter
.a935	68		pla				pla 								; reset I/O page
.a936	85 01		sta $01				sta 	1
.a938	7a		ply				ply
.a939	fa		plx				plx
.a93a	68		pla				pla
.a93b	60		rts				rts
.a93c					EXTILDelete:
.a93c	48		pha				pha 								; save the new character
.a93d	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a940					_EXTDLoop:
.a940	c8		iny				iny 								; copy one byte down.
.a941	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a943	88		dey				dey
.a944	91 40		sta ($40),y			sta 	(EXTAddress),y
.a946	c8		iny				iny 								; do till end of line.
.a947	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a94a	90 f4		bcc $a940			bcc 	_EXTDLoop
.a94c	88		dey				dey 	 							; write in last slot.
.a94d	68		pla				pla
.a94e	91 40		sta ($40),y			sta 	(EXTAddress),y
.a950	60		rts				rts
.a951					EXTILInsert:
.a951	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a954					_EXTILoop:
.a954	88		dey				dey 								; back one
.a955	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a958	f0 08		beq $a962			beq 	_EXTIExit
.a95a	88		dey				dey 								; copy one byte up.
.a95b	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a95d	c8		iny				iny
.a95e	91 40		sta ($40),y			sta 	(EXTAddress),y
.a960	80 f2		bra $a954			bra 	_EXTILoop
.a962					_EXTIExit:
.a962	60		rts				rts
.a963					EXTScrollFill:
.a963	aa		tax				tax									; save value to fill with
.a964	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a966	48		pha				pha
.a967	a5 37		lda $37				lda 	zTemp0+1
.a969	48		pha				pha
.a96a	a5 38		lda $38				lda 	zTemp1
.a96c	48		pha				pha
.a96d	a5 39		lda $39				lda 	zTemp1+1
.a96f	48		pha				pha
.a970	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a972	85 37		sta $37				sta 	zTemp0+1
.a974	85 39		sta $39				sta 	zTemp1+1
.a976	64 36		stz $36				stz 	zTemp0
.a978	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a97b	85 38		sta $38				sta 	zTemp1
.a97d	a0 00		ldy #$00			ldy 	#0
.a97f					_EXSFCopy1:
.a97f	b1 38		lda ($38),y			lda 	(zTemp1),y
.a981	91 36		sta ($36),y			sta 	(zTemp0),y
.a983	c8		iny				iny
.a984	d0 f9		bne $a97f			bne 	_EXSFCopy1
.a986	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a988	e6 39		inc $39				inc 	zTemp1+1
.a98a	a5 39		lda $39				lda 	zTemp1+1
.a98c	c9 d3		cmp #$d3			cmp 	#$D3
.a98e	d0 ef		bne $a97f			bne 	_EXSFCopy1
.a990	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.a993	8a		txa				txa
.a994					_EXSFFill1:
.a994	88		dey				dey
.a995	91 40		sta ($40),y			sta 	(EXTAddress),y
.a997	c0 00		cpy #$00			cpy 	#0
.a999	10 f9		bpl $a994			bpl 	_EXSFFill1
.a99b	68		pla				pla
.a99c	85 39		sta $39				sta 	zTemp1+1
.a99e	68		pla				pla
.a99f	85 38		sta $38				sta 	zTemp1
.a9a1	68		pla				pla
.a9a2	85 37		sta $37				sta 	zTemp0+1
.a9a4	68		pla				pla
.a9a5	85 36		sta $36				sta 	zTemp0
.a9a7	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a9a8					EXTInitialise:
.a9a8	64 01		stz $01				stz 	1 							; Access I/O
.a9aa	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a9ad	9c 08 d0	stz $d008			stz 	$D008
.a9b0	9c 09 d0	stz $d009			stz 	$D009
.a9b3	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a9b5	8d 58 d6	sta $d658			sta 	$D658
.a9b8	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a9ba	8d 37 06	sta $0637			sta 	EXTTextColour
.a9bd	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a9bf	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a9c2	a9 3c		lda #$3c			lda 	#60
.a9c4	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a9c7	64 01		stz $01				stz 	1
.a9c9	60		rts				rts
.a9ca					EXTInputSingleCharacter:
.a9ca	da		phx				phx
.a9cb	5a		phy				phy
.a9cc					_EISCWait:
.a9cc	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a9cf	c9 00		cmp #$00			cmp 	#0
.a9d1	f0 f9		beq $a9cc			beq 	_EISCWait
.a9d3	7a		ply				ply
.a9d4	fa		plx				plx
.a9d5	60		rts				rts
.a9d6					EXTBreakCheck:
.a9d6	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a9d9					EXTReadController:
.a9d9	da		phx				phx
.a9da	a2 00		ldx #$00			ldx 	#0
.a9dc	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a9de	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9e1	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a9e3	f0 04		beq $a9e9			beq 	_NoSet1
.a9e5	8a		txa				txa
.a9e6	09 01		ora #$01			ora 	#1
.a9e8	aa		tax				tax
.a9e9					_NoSet1:
.a9e9	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a9eb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9ee	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a9f0	f0 04		beq $a9f6			beq 	_NoSet1
.a9f2	8a		txa				txa
.a9f3	09 02		ora #$02			ora 	#2
.a9f5	aa		tax				tax
.a9f6					_NoSet1:
.a9f6	a9 06		lda #$06			lda 	#(($32) >> 3)
.a9f8	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a9fb	29 04		and #$04			and 	#($01 << (($32) & 7))
.a9fd	f0 04		beq $aa03			beq 	_NoSet1
.a9ff	8a		txa				txa
.aa00	09 04		ora #$04			ora 	#4
.aa02	aa		tax				tax
.aa03					_NoSet1:
.aa03	a9 04		lda #$04			lda 	#(($25) >> 3)
.aa05	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa08	29 20		and #$20			and 	#($01 << (($25) & 7))
.aa0a	f0 04		beq $aa10			beq 	_NoSet1
.aa0c	8a		txa				txa
.aa0d	09 08		ora #$08			ora 	#8
.aa0f	aa		tax				tax
.aa10					_NoSet1:
.aa10	a9 04		lda #$04			lda 	#(($26) >> 3)
.aa12	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa15	29 40		and #$40			and 	#($01 << (($26) & 7))
.aa17	f0 04		beq $aa1d			beq 	_NoSet1
.aa19	8a		txa				txa
.aa1a	09 10		ora #$10			ora 	#16
.aa1c	aa		tax				tax
.aa1d					_NoSet1:
.aa1d	8a		txa				txa
.aa1e	fa		plx				plx
.aa1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7ef					GRVectorTable:
>b7ef	1b ac					.word	GXInitialise             ; $00 Initialise
>b7f1	35 ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7f3	7d ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7f5	cd ab					.word	GXClearBitmap            ; $03 Clear
>b7f7	0c ae					.word	GXSetColourMode          ; $04 Colour
>b7f9	d4 af					.word	GXFontHandler            ; $05 DrawFont
>b7fb	1c b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7fd	88 b0					.word	GXSelect                 ; $07 SpriteUse
>b7ff	b1 b0					.word	GXSelectImage            ; $08 SpriteImage
>b801	38 b2					.word	GXCollide                ; $09 SpriteCollide
>b803	7f aa					.word	GRUndefined              ; $0a
>b805	7f aa					.word	GRUndefined              ; $0b
>b807	7f aa					.word	GRUndefined              ; $0c
>b809	7f aa					.word	GRUndefined              ; $0d
>b80b	7f aa					.word	GRUndefined              ; $0e
>b80d	7f aa					.word	GRUndefined              ; $0f
>b80f	7f aa					.word	GRUndefined              ; $10
>b811	7f aa					.word	GRUndefined              ; $11
>b813	7f aa					.word	GRUndefined              ; $12
>b815	7f aa					.word	GRUndefined              ; $13
>b817	7f aa					.word	GRUndefined              ; $14
>b819	7f aa					.word	GRUndefined              ; $15
>b81b	7f aa					.word	GRUndefined              ; $16
>b81d	7f aa					.word	GRUndefined              ; $17
>b81f	7f aa					.word	GRUndefined              ; $18
>b821	7f aa					.word	GRUndefined              ; $19
>b823	7f aa					.word	GRUndefined              ; $1a
>b825	7f aa					.word	GRUndefined              ; $1b
>b827	7f aa					.word	GRUndefined              ; $1c
>b829	7f aa					.word	GRUndefined              ; $1d
>b82b	7f aa					.word	GRUndefined              ; $1e
>b82d	7f aa					.word	GRUndefined              ; $1f
>b82f	7d aa					.word	GXMove                   ; $20 Move
>b831	da ac					.word	GXLine                   ; $21 Line
>b833	55 ae					.word	GXFrameRectangle         ; $22 FrameRect
>b835	52 ae					.word	GXFillRectangle          ; $23 FillRect
>b837	84 aa					.word	GXFrameCircle            ; $24 FrameCircle
>b839	80 aa					.word	GXFillCircle             ; $25 FillCircle
>b83b	7f aa					.word	GRUndefined              ; $26
>b83d	7f aa					.word	GRUndefined              ; $27
>b83f	3a ae					.word	GXPlotPoint              ; $28 Plot
>b841	47 b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa20					GXGraphicDraw:
.aa20	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa22	b0 06		bcs $aa2a			bcs 	_GDCoordinate
.aa24	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa26	84 37		sty $37				sty 	gxzTemp0+1
.aa28	80 4b		bra $aa75			bra 	_GDExecuteA 				; and execute
.aa2a					_GDCoordinate:
.aa2a	48		pha				pha 								; save AXY
.aa2b	da		phx				phx
.aa2c	5a		phy				phy
.aa2d	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa2f					_GDCopy1:
.aa2f	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa32	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa35	ca		dex				dex
.aa36	10 f7		bpl $aa2f			bpl 	_GDCopy1
.aa38	68		pla				pla 								; update Y
.aa39	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa3c	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa3f	68		pla				pla
.aa40	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa43	68		pla				pla 								; get A (command+X.1) back
.aa44	48		pha				pha
.aa45	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa47	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa4a	68		pla				pla 								; get command back
.aa4b	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa4d	48		pha				pha 								; push back.
.aa4e	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa50	f0 17		beq $aa69			beq 	_GDCopyToWorkArea
.aa52	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa55	f0 07		beq $aa5e			beq 	_GDCheckY
.aa57	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa5a	c9 40		cmp #$40			cmp 	#64
.aa5c	b0 08		bcs $aa66			bcs 	_GDError1
.aa5e					_GDCheckY:
.aa5e	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa61	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa64	90 03		bcc $aa69			bcc 	_GDCopyToWorkArea
.aa66					_GDError1:
.aa66	68		pla				pla
.aa67					_GDError2:
.aa67	38		sec				sec
.aa68	60		rts				rts
.aa69					_GDCopyToWorkArea:
.aa69	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa6b					_GDCopy2:
.aa6b	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa6e	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa71	ca		dex				dex
.aa72	10 f7		bpl $aa6b			bpl 	_GDCopy2
.aa74	68		pla				pla 								; get command
.aa75					_GDExecuteA:
.aa75	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa77	b0 ee		bcs $aa67			bcs 	_GDError2
.aa79	aa		tax				tax
.aa7a	7c ef b7	jmp ($b7ef,x)			jmp 	(GRVectorTable,x)
.aa7d					GXMove:
.aa7d	18		clc				clc
.aa7e	60		rts				rts
.aa7f					GRUndefined:
>aa7f	db						.byte 	$DB 						; causes a break in the emulator
.aa80					GXFillCircle:
.aa80	a9 ff		lda #$ff			lda 	#255
.aa82	80 02		bra $aa86			bra 	GXCircle
.aa84					GXFrameCircle:
.aa84	a9 00		lda #$00			lda 	#0
.aa86					GXCircle:
.aa86	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa89	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aa8c	f0 26		beq $aab4			beq 	_GXCFail
.aa8e	20 df b2	jsr $b2df			jsr 	GXSortXY 					; topleft/bottomright
.aa91	20 b7 b1	jsr $b1b7			jsr 	GXOpenBitmap 				; start drawing
.aa94	20 86 ab	jsr $ab86			jsr 	GXCircleSetup 				; set up for drawing
.aa97	9c de 06	stz $06de			stz 	gxYChanged
.aa9a					_GXCircleDraw:
.aa9a	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aa9d	cd dc 06	cmp $06dc			cmp 	gYCentre
.aaa0	90 0a		bcc $aaac			bcc 	_GXCircleContinue
.aaa2	d0 03		bne $aaa7			bne 	_GXNoLast
.aaa4	20 b9 aa	jsr $aab9			jsr 	GXPlot1
.aaa7					_GXNoLast:
.aaa7	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap 				; close the bitmap
.aaaa	18		clc				clc
.aaab	60		rts				rts
.aaac					_GXCircleContinue:
.aaac	20 b6 aa	jsr $aab6			jsr 	GXPlot2 					; draw it
.aaaf	20 33 ab	jsr $ab33			jsr 	GXCircleMove 				; adjust the coordinates
.aab2	80 e6		bra $aa9a			bra 	_GXCircleDraw
.aab4					_GXCFail:
.aab4	38		sec				sec
.aab5	60		rts				rts
.aab6					GXPlot2:
.aab6	20 b9 aa	jsr $aab9			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aab9					GXPlot1:
.aab9	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aabc	f0 03		beq $aac1			beq 	_GXPlot1Only
.aabe	20 dd aa	jsr $aadd			jsr 	GXPlot0 						; plot and negate
.aac1					_GXPlot1Only:
.aac1	20 dd aa	jsr $aadd			jsr 	GXPlot0 						; twice, undoing negation
.aac4	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aac7	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aaca	8d dc 06	sta $06dc			sta 	gYCentre
.aacd	8e db 06	stx $06db			stx 	gXCentre
.aad0	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aad3	a9 ff		lda #$ff			lda 	#$FF
.aad5	8d de 06	sta $06de			sta 	gxYChanged
.aad8	60		rts				rts
.aad9	20 dd aa	jsr $aadd			jsr 	GXPlot0 						; do once
.aadc	60		rts				rts
.aadd	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aae0	f0 05		beq $aae7			beq 	_GXPlot0Always
.aae2	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aae5	f0 2d		beq $ab14			beq 	GXPlot0Exit
.aae7					_GXPlot0Always:
.aae7	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aae9	ad dc 06	lda $06dc			lda 	gYCentre
.aaec	20 15 ab	jsr $ab15			jsr 	GXSubCopy
.aaef	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.aaf1	ad db 06	lda $06db			lda 	gXCentre
.aaf4	20 15 ab	jsr $ab15			jsr 	GXSubCopy
.aaf7	48		pha				pha 									; save last offset X
.aaf8	20 c7 b1	jsr $b1c7			jsr 	GXPositionCalc 					; calculate position/offset.
.aafb	68		pla				pla
.aafc	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.aafd	85 36		sta $36				sta 	gxzTemp0
.aaff	64 37		stz $37				stz 	gxzTemp0+1
.ab01	26 37		rol $37				rol 	gxzTemp0+1
.ab03	ad dd 06	lda $06dd			lda 	gxIsFillMode
.ab06	69 80		adc #$80			adc 	#128
.ab08	20 a5 ae	jsr $aea5			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab0b	38		sec				sec 									; GY = -GY
.ab0c	a9 00		lda #$00			lda 	#0
.ab0e	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab11	8d dc 06	sta $06dc			sta 	gYCentre
.ab14					GXPlot0Exit:
.ab14	60		rts				rts
.ab15					GXSubCopy:
.ab15	85 36		sta $36				sta 	gxzTemp0
.ab17	64 37		stz $37				stz 	gxzTemp0+1
.ab19	29 80		and #$80			and 	#$80
.ab1b	f0 02		beq $ab1f			beq 	_GXNoSx
.ab1d	c6 37		dec $37				dec 	gxzTemp0+1
.ab1f					_GXNoSx:
.ab1f	38		sec				sec
.ab20	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab23	e5 36		sbc $36				sbc 	gxzTemp0
.ab25	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab28	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab2b	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab2d	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab30	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab32	60		rts				rts
.ab33					GXCircleMove:
.ab33	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab36	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab38	10 0d		bpl $ab47			bpl 	_GXEMPositive
.ab3a	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab3d	ad db 06	lda $06db			lda 	gXCentre
.ab40	20 66 ab	jsr $ab66			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab43	a9 06		lda #$06			lda 	#6  						; and add 6
.ab45	80 15		bra $ab5c			bra 	_GXEMAddD
.ab47					_GXEMPositive:
.ab47	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab4a	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab4d	38		sec				sec 								; calculate X-Y
.ab4e	ad db 06	lda $06db			lda 	gXCentre
.ab51	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab54	20 66 ab	jsr $ab66			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab57	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab59	ce de 06	dec $06de			dec 	gxYChanged
.ab5c					_GXEMAddD:
.ab5c	18		clc				clc
.ab5d	65 38		adc $38				adc 	gxzTemp1
.ab5f	85 38		sta $38				sta 	gxzTemp1
.ab61	90 02		bcc $ab65			bcc 	_GXEMNoCarry
.ab63	e6 39		inc $39				inc 	gxzTemp1+1
.ab65					_GXEMNoCarry:
.ab65	60		rts				rts
.ab66					_GXAdd4TimesToD:
.ab66	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab68	29 80		and #$80			and 	#$80
.ab6a	f0 02		beq $ab6e			beq 	_GXA4Unsigned
.ab6c	a9 ff		lda #$ff			lda 	#$FF
.ab6e					_GXA4Unsigned:
.ab6e	85 37		sta $37				sta 	gxzTemp0+1
.ab70	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab72	26 37		rol $37				rol 	gxzTemp0+1
.ab74	06 36		asl $36				asl 	gxzTemp0
.ab76	26 37		rol $37				rol 	gxzTemp0+1
.ab78	18		clc				clc 								; add
.ab79	a5 36		lda $36				lda		gxzTemp0
.ab7b	65 38		adc $38				adc 	gxzTemp1
.ab7d	85 38		sta $38				sta 	gxzTemp1
.ab7f	a5 37		lda $37				lda		gxzTemp0+1
.ab81	65 39		adc $39				adc 	gxzTemp1+1
.ab83	85 39		sta $39				sta 	gxzTemp1+1
.ab85	60		rts				rts
.ab86					GXCircleSetup:
.ab86	38		sec				sec
.ab87	ad 48 06	lda $0648			lda 	gxY1
.ab8a	ed 44 06	sbc $0644			sbc 	gxY0
.ab8d	4a		lsr a				lsr 	a
.ab8e	8d da 06	sta $06da			sta 	gxRadius
.ab91	a2 00		ldx #$00			ldx 	#0
.ab93	20 b5 ab	jsr $abb5			jsr 	_GXCalculateCentre
.ab96	a2 02		ldx #$02			ldx 	#2
.ab98	20 b5 ab	jsr $abb5			jsr 	_GXCalculateCentre
.ab9b	9c db 06	stz $06db			stz 	gXCentre
.ab9e	ad da 06	lda $06da			lda 	gxRadius
.aba1	8d dc 06	sta $06dc			sta 	gYCentre
.aba4	0a		asl a				asl 	a 							; R x 2
.aba5	85 36		sta $36				sta 	gxzTemp0
.aba7	38		sec				sec
.aba8	a9 03		lda #$03			lda 	#3
.abaa	e5 36		sbc $36				sbc 	gxzTemp0
.abac	85 38		sta $38				sta 	gxzTemp1
.abae	a9 00		lda #$00			lda 	#0
.abb0	e9 00		sbc #$00			sbc 	#0
.abb2	85 39		sta $39				sta 	gxzTemp1+1
.abb4	60		rts				rts
.abb5					_GXCalculateCentre:
.abb5	38		sec				sec
.abb6	bd 46 06	lda $0646,x			lda 	gxX1,x
.abb9	7d 42 06	adc $0642,x			adc 	gXX0,x
.abbc	9d 46 06	sta $0646,x			sta 	gXX1,x
.abbf	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abc2	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abc5	4a		lsr a				lsr 	a
.abc6	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abc9	7e 46 06	ror $0646,x			ror 	gXX1,x
.abcc	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abcd					GXClearBitmap:
.abcd	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abd0	f0 24		beq $abf6			beq 	_GXCBFail
.abd2	20 b7 b1	jsr $b1b7			jsr 	GXOpenBitmap 				; start access
.abd5	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abd7	ad 4e 06	lda $064e			lda 	gxHeight
.abda	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abdc	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abde					_GXCalcLastPage:
.abde	98		tya				tya 								; add to base page
.abdf	18		clc				clc
.abe0	6d 4c 06	adc $064c			adc 	gxBasePage
.abe3	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abe5					_GXClearAll:
.abe5	20 f8 ab	jsr $abf8			jsr 	_GXClearBlock 				; clear 8k block
.abe8	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abea	a5 0b		lda $0b				lda 	GXEditSlot
.abec	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.abef	b0 f4		bcs $abe5			bcs 	_GXClearAll
.abf1	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap	 			; stop access
.abf4	18		clc				clc
.abf5	60		rts				rts
.abf6					_GXCBFail:
.abf6	38		sec				sec
.abf7	60		rts				rts
.abf8					_GXClearBlock:
.abf8	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.abfa	85 38		sta $38				sta 	0+gxzTemp1
.abfc	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.abfe	85 39		sta $39				sta 	1+gxzTemp1
.ac00					_GXCB0:
.ac00	a5 36		lda $36				lda 	gxzTemp0
.ac02	a0 00		ldy #$00			ldy 	#0
.ac04					_GXCB1:
.ac04	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac06	c8		iny				iny
.ac07	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac09	c8		iny				iny
.ac0a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac0c	c8		iny				iny
.ac0d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac0f	c8		iny				iny
.ac10	d0 f2		bne $ac04			bne 	_GXCB1
.ac12	e6 39		inc $39				inc 	gxzTemp1+1
.ac14	a5 39		lda $39				lda 	gxzTemp1+1
.ac16	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac18	d0 e6		bne $ac00			bne 	_GXCB0
.ac1a	60		rts				rts
.ac1b					GXInitialise:
.ac1b	64 01		stz $01				stz 	1
.ac1d	a9 01		lda #$01			lda 	#1
.ac1f	8d 00 d0	sta $d000			sta 	$D000
.ac22	18		clc				clc
.ac23	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac26	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac29	a2 0f		ldx #$0f			ldx 	#15
.ac2b					_GXIClear:
.ac2b	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac2e	ca		dex				dex
.ac2f	10 fa		bpl $ac2b			bpl 	_GXIClear
.ac31	20 cc ac	jsr $accc			jsr 	GXClearSpriteStore
.ac34	60		rts				rts
.ac35					GXControlBitmap:
.ac35	64 01		stz $01				stz 	1
.ac37	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac39	29 01		and #$01			and 	#1 							; set bitmap flag
.ac3b	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac3e	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac3f	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac42	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac44	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac46	90 02		bcc $ac4a			bcc 	_CBNotOn
.ac48	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac4a					_CBNotOn:
.ac4a	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac4d	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac4f	29 07		and #$07			and 	#7
.ac51	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac54	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac56	d0 02		bne $ac5a			bne 	_CBNotDefault
.ac58	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac5a					_CBNotDefault:
.ac5a	8d 4c 06	sta $064c			sta 	gxBasePage
.ac5d	20 be ac	jsr $acbe			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac60	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac62	8d 03 d1	sta $d103			sta 	$D103
.ac65	a5 36		lda $36				lda 	gxzTemp0
.ac67	8d 02 d1	sta $d102			sta 	$D102
.ac6a	9c 01 d1	stz $d101			stz 	$D101
.ac6d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac6f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac72	29 01		and #$01			and 	#1
.ac74	f0 02		beq $ac78			beq 	_CBHaveHeight
.ac76	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac78					_CBHaveHeight
.ac78	8e 4e 06	stx $064e			stx 	gxHeight
.ac7b	18		clc				clc
.ac7c	60		rts				rts
.ac7d					GXControlSprite:
.ac7d	64 01		stz $01				stz 	1
.ac7f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac81	29 01		and #$01			and 	#1 							; set sprites flag
.ac83	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac86	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac87	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac8a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac8c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac8e	90 02		bcc $ac92			bcc 	_CSNotOn
.ac90	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ac92					_CSNotOn:
.ac92	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac95	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac97	d0 02		bne $ac9b			bne 	_CSNotDefault
.ac99	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ac9b					_CSNotDefault:
.ac9b	8d 4d 06	sta $064d			sta 	gxSpritePage
.ac9e	20 be ac	jsr $acbe			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.aca1	a5 36		lda $36				lda 	zTemp0
.aca3	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.aca6	a5 37		lda $37				lda 	zTemp0+1
.aca8	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.acab	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.acad					_CSClear:
.acad	9e 00 d9	stz $d900,x			stz 	$D900,x
.acb0	9e 00 da	stz $da00,x			stz 	$DA00,x
.acb3	ca		dex				dex
.acb4	d0 f7		bne $acad			bne 	_CSClear
.acb6	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acb9	20 cc ac	jsr $accc			jsr 	GXClearSpriteStore
.acbc	18		clc				clc
.acbd	60		rts				rts
.acbe					GXCalculateBaseAddress:
.acbe	85 36		sta $36				sta 	gxzTemp0
.acc0	64 37		stz $37				stz 	gxzTemp0+1
.acc2	a9 05		lda #$05			lda 	#5
.acc4					_GXShift:
.acc4	06 36		asl $36				asl 	gxzTemp0
.acc6	26 37		rol $37				rol 	gxzTemp0+1
.acc8	3a		dec a				dec		a
.acc9	d0 f9		bne $acc4			bne 	_GXShift
.accb	60		rts				rts
.accc					GXClearSpriteStore:
.accc	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.acce					_GXCSSLoop:
.acce	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.acd1	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.acd3	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.acd6	ca		dex				dex
.acd7	10 f5		bpl $acce			bpl 	_GXCSSLoop
.acd9	60		rts				rts
.acda					GXLine:
.acda	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.acdd	f0 28		beq $ad07			beq 	_GXLFail
.acdf	20 b7 b1	jsr $b1b7			jsr 	GXOpenBitmap
.ace2	20 fd b2	jsr $b2fd			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ace5	20 ad ad	jsr $adad			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ace8	20 c7 b1	jsr $b1c7			jsr 	GXPositionCalc 				; calculate position/offset.
.aceb					_GXDrawLoop:
.aceb	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.acee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.acf0	2d 52 06	and $0652			and 	gxANDValue
.acf3	4d 51 06	eor $0651			eor 	gxEORValue
.acf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acf8	20 09 ad	jsr $ad09			jsr 	GXLineIsComplete 			; is the line complete ?
.acfb	f0 05		beq $ad02			beq 	_GXLExit
.acfd	20 24 ad	jsr $ad24			jsr 	GXLineAdvance 				; code as per advance method
.ad00	80 e9		bra $aceb			bra 	_GXDrawLoop
.ad02					_GXLExit:
.ad02	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap
.ad05	18		clc				clc
.ad06	60		rts				rts
.ad07					_GXLFail:
.ad07	38		sec				sec
.ad08	60		rts				rts
.ad09					GXLineIsComplete:
.ad09	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad0c	d0 0f		bne $ad1d			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad0e	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad11	4d 46 06	eor $0646			eor 	GXX1
.ad14	d0 06		bne $ad1c			bne 	_GXLICExit
.ad16	ad 43 06	lda $0643			lda 	GXX0+1
.ad19	4d 47 06	eor $0647			eor 	GXX1+1
.ad1c					_GXLICExit:
.ad1c	60		rts				rts
.ad1d					_GXLICCompareY:
.ad1d	ad 48 06	lda $0648			lda 	GXY1
.ad20	4d 44 06	eor $0644			eor 	GXY0
.ad23	60		rts				rts
.ad24					GXLineAdvance:
.ad24	18		clc				clc 								; add adjust to position
.ad25	ad e3 06	lda $06e3			lda 	GXPosition
.ad28	6d e4 06	adc $06e4			adc 	GXAdjust
.ad2b	8d e3 06	sta $06e3			sta 	GXPosition
.ad2e	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad31	b0 05		bcs $ad38			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad33	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad36	90 0a		bcc $ad42			bcc 	_GXLANoExtra
.ad38					_GXLAOverflow:
.ad38	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad3b	38		sec				sec 								; subtract total and write back
.ad3c	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad3f	8d e3 06	sta $06e3			sta 	GXPosition
.ad42					_GXLANoExtra:
.ad42	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad45	f0 0d		beq $ad54			beq 	_GXDXLarger
.ad47	20 a6 ad	jsr $ada6			jsr 	GXIncrementY
.ad4a	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad4d	f0 10		beq $ad5f			beq 	_GXLAExit
.ad4f	20 60 ad	jsr $ad60			jsr 	GXAdjustX
.ad52	80 0b		bra $ad5f			bra 	_GXLAExit
.ad54					_GXDXLarger:
.ad54	20 60 ad	jsr $ad60			jsr 	GXAdjustX
.ad57	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad5a	f0 03		beq $ad5f			beq 	_GXLAExit
.ad5c	20 a6 ad	jsr $ada6			jsr 	GXIncrementY
.ad5f					_GXLAExit:
.ad5f	60		rts				rts
.ad60					GXAdjustX:
.ad60	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad63	10 25		bpl $ad8a			bpl 	_GXAXRight
.ad65	ad 42 06	lda $0642			lda 	GXX0
.ad68	d0 03		bne $ad6d			bne 	_GXAXNoBorrow
.ad6a	ce 43 06	dec $0643			dec 	GXX0+1
.ad6d					_GXAXNoBorrow:
.ad6d	ce 42 06	dec $0642			dec 	GXX0
.ad70	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad73	ad 54 06	lda $0654			lda 	gsOffset
.ad76	c9 ff		cmp #$ff			cmp 	#$FF
.ad78	d0 0f		bne $ad89			bne 	_GXAYExit 					; underflow
.ad7a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad7c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad7e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad80	b0 07		bcs $ad89			bcs 	_GXAYExit
.ad82	18		clc				clc
.ad83	69 20		adc #$20			adc 	#$20 						; fix up
.ad85	85 3d		sta $3d				sta 	gxzScreen+1
.ad87	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad89					_GXAYExit:
.ad89	60		rts				rts
.ad8a					_GXAXRight:
.ad8a	ee 42 06	inc $0642			inc 	GXX0
.ad8d	d0 03		bne $ad92			bne 	_GXAXNoCarry
.ad8f	ee 43 06	inc $0643			inc 	GXX0+1
.ad92					_GXAXNoCarry:
.ad92	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ad95	d0 0e		bne $ada5			bne 	_GXAXExit 					; if not overflowed, exit.
.ad97	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ad99	a5 3d		lda $3d				lda 	gxzScreen+1
.ad9b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ad9d	90 06		bcc $ada5			bcc 	_GXAXExit
.ad9f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ada1	85 3d		sta $3d				sta 	gxzScreen+1
.ada3	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ada5					_GXAXExit:
.ada5	60		rts				rts
.ada6					GXIncrementY:
.ada6	ee 44 06	inc $0644			inc 	GXY0
.ada9	20 1d b2	jsr $b21d			jsr 	GXMovePositionDown
.adac	60		rts				rts
.adad					GXLineSetup:
.adad	ad 48 06	lda $0648			lda 	GXY1
.adb0	38		sec				sec
.adb1	ed 44 06	sbc $0644			sbc 	GXY0
.adb4	4a		lsr a				lsr 	a
.adb5	8d e0 06	sta $06e0			sta 	GXDiffY
.adb8	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adbb	38		sec				sec
.adbc	ad 46 06	lda $0646			lda 	GXX1
.adbf	ed 42 06	sbc $0642			sbc 	GXX0
.adc2	8d df 06	sta $06df			sta 	GXDiffX
.adc5	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.adc8	ed 43 06	sbc $0643			sbc 	GXX0+1
.adcb	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.adcc	6e df 06	ror $06df			ror 	GXDiffX
.adcf	0a		asl a				asl 	a
.add0	10 0c		bpl $adde			bpl 	_GDXNotNegative
.add2	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.add4	38		sec				sec
.add5	ed df 06	sbc $06df			sbc 	GXDiffX
.add8	8d df 06	sta $06df			sta 	GXDiffX
.addb	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.adde					_GDXNotNegative:
.adde	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.ade1	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.ade4	8d e4 06	sta $06e4			sta 	GXAdjust
.ade7	ad df 06	lda $06df			lda 	GXDiffX
.adea	8d e5 06	sta $06e5			sta 	GXTotal
.aded	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.adf0	cd df 06	cmp $06df			cmp 	GXDiffX
.adf3	90 0f		bcc $ae04			bcc 	_GDXNotLarger
.adf5	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.adf8	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.adfb	8d e4 06	sta $06e4			sta 	GXAdjust
.adfe	ad e0 06	lda $06e0			lda 	GXDiffY
.ae01	8d e5 06	sta $06e5			sta 	GXTotal
.ae04					_GDXNotLarger:
.ae04	ad e5 06	lda $06e5			lda 	GXTotal
.ae07	4a		lsr a				lsr 	a
.ae08	8d e3 06	sta $06e3			sta 	GXPosition
.ae0b	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae0c					GXSetColourMode:
.ae0c	a6 36		ldx $36				ldx 	gxzTemp0
.ae0e	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae11	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae13	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae16	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae18	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae1b	ae 50 06	ldx $0650			ldx 	gxColour
.ae1e	8e 51 06	stx $0651			stx 	gxEORValue
.ae21	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae23	90 03		bcc $ae28			bcc 	_GXSDCNotAndColour
.ae25	8e 52 06	stx $0652			stx 	gxANDValue
.ae28					_GXSDCNotAndColour:
.ae28	d0 03		bne $ae2d			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae2a	9c 51 06	stz $0651			stz 	gxEORValue
.ae2d					_GXSDCNotAnd:
.ae2d	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae2e	90 08		bcc $ae38			bcc 	_GXSDCNoFlip
.ae30	ad 52 06	lda $0652			lda	 	gxANDValue
.ae33	49 ff		eor #$ff			eor 	#$FF
.ae35	8d 52 06	sta $0652			sta 	gxANDValue
.ae38					_GXSDCNoFlip:
.ae38	18		clc				clc
.ae39	60		rts				rts
.ae3a					GXPlotPoint:
.ae3a	20 b7 b1	jsr $b1b7			jsr 	GXOpenBitmap 				; start drawing
.ae3d	20 c7 b1	jsr $b1c7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae40	ac 54 06	ldy $0654			ldy 	gsOffset
.ae43	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae45	2d 52 06	and $0652			and 	gxANDValue
.ae48	4d 51 06	eor $0651			eor 	gxEORValue
.ae4b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae4d	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae50	18		clc				clc
.ae51	60		rts				rts
.ae52					GXFillRectangle:
.ae52	38		sec				sec
.ae53	80 01		bra $ae56			bra 	GXRectangle
.ae55					GXFrameRectangle:
.ae55	18		clc				clc
.ae56					GXRectangle:
.ae56	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae59	f0 35		beq $ae90			beq 	_GXRFail
.ae5b	08		php				php 								; save Fill flag (CS)
.ae5c	20 b7 b1	jsr $b1b7			jsr 	GXOpenBitmap 				; start drawing
.ae5f	20 df b2	jsr $b2df			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae62	20 c7 b1	jsr $b1c7			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae65	38		sec				sec 								; sec = Draw line
.ae66	20 92 ae	jsr $ae92			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae69	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae6c	cd 48 06	cmp $0648			cmp 	gxY1
.ae6f	f0 19		beq $ae8a			beq 	_GXRectangleExit
.ae71					_GXRectLoop:
.ae71	20 1d b2	jsr $b21d			jsr 	GXMovePositionDown 			; down one.
.ae74	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae77	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae7a	cd 48 06	cmp $0648			cmp 	gXY1
.ae7d	f0 07		beq $ae86			beq 	_GXLastLine
.ae7f	28		plp				plp 								; get flag back
.ae80	08		php				php
.ae81	20 92 ae	jsr $ae92			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae84	80 eb		bra $ae71			bra 	_GXRectLoop
.ae86					_GXLastLine:
.ae86	38		sec				sec
.ae87	20 92 ae	jsr $ae92			jsr 	GXDrawLineX1X0
.ae8a					_GXRectangleExit:
.ae8a	68		pla				pla 								; throw fill flag.
.ae8b	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae8e	18		clc				clc
.ae8f	60		rts				rts
.ae90					_GXRFail:
.ae90	38		sec				sec
.ae91	60		rts				rts
.ae92					GXDrawLineX1X0:
.ae92	08		php				php 								; save solid/either-end
.ae93	38		sec				sec
.ae94	ad 46 06	lda $0646			lda		gXX1
.ae97	ed 42 06	sbc $0642			sbc 	gXX0
.ae9a	85 36		sta $36				sta 	gxzTemp0
.ae9c	ad 47 06	lda $0647			lda 	gXX1+1
.ae9f	ed 43 06	sbc $0643			sbc 	gXX0+1
.aea2	85 37		sta $37				sta 	gxzTemp0+1
.aea4	28		plp				plp
.aea5					GXDrawLineTemp0:
.aea5	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.aea7	48		pha				pha
.aea8	a5 3d		lda $3d				lda 	gxzScreen+1
.aeaa	48		pha				pha
.aeab	ad 54 06	lda $0654			lda 	gsOffset
.aeae	48		pha				pha
.aeaf	a5 0b		lda $0b				lda 	GXEditSlot
.aeb1	48		pha				pha
.aeb2	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aeb5	90 1e		bcc $aed5			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aeb7					_GXDLTLine:
.aeb7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aeb9	2d 52 06	and $0652			and 	gxANDValue
.aebc	4d 51 06	eor $0651			eor 	gxEORValue
.aebf	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aec1	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aec3	d0 04		bne $aec9			bne 	_GXDLTNoBorrow
.aec5	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aec7	30 2e		bmi $aef7			bmi 	_GXDLTExit
.aec9					_GXDLTNoBorrow:
.aec9	c6 36		dec $36				dec 	gxzTemp0
.aecb	c8		iny				iny 								; next slot.
.aecc	d0 e9		bne $aeb7			bne 	_GXDLTLine
.aece	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aed0	20 05 af	jsr $af05			jsr 	GXDLTCheckWrap				; check for new page.
.aed3	80 e2		bra $aeb7			bra 	_GXDLTLine
.aed5					_GXDLTEndPoints:
.aed5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aed7	2d 52 06	and $0652			and 	gxANDValue
.aeda	4d 51 06	eor $0651			eor 	gxEORValue
.aedd	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aedf	98		tya				tya 								; advance to right side
.aee0	18		clc				clc
.aee1	65 36		adc $36				adc 	gxzTemp0
.aee3	a8		tay				tay
.aee4	a5 3d		lda $3d				lda 	gxzScreen+1
.aee6	65 37		adc $37				adc 	gxzTemp0+1
.aee8	85 3d		sta $3d				sta 	gxzScreen+1
.aeea	20 05 af	jsr $af05			jsr 	GXDLTCheckWrap 			; fix up.
.aeed	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aeef	2d 52 06	and $0652			and 	gxANDValue
.aef2	4d 51 06	eor $0651			eor 	gxEORValue
.aef5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aef7					_GXDLTExit:
.aef7	68		pla				pla
.aef8	85 0b		sta $0b				sta 	GXEditSlot
.aefa	68		pla				pla
.aefb	8d 54 06	sta $0654			sta 	gsOffset
.aefe	68		pla				pla
.aeff	85 3d		sta $3d				sta 	gxzScreen+1
.af01	68		pla				pla
.af02	85 3c		sta $3c				sta 	gxzScreen
.af04	60		rts				rts
.af05					GXDLTCheckWrap:
.af05	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af07	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af09	90 06		bcc $af11			bcc 	_GXDLTCWExit
.af0b	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af0d	85 3d		sta $3d				sta 	gxzScreen+1
.af0f	e6 0b		inc $0b				inc 	GXEditSlot
.af11					_GXDLTCWExit:
.af11	60		rts				rts
.af12					GXDrawGraphicElement:
.af12	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af15	3a		dec a				dec 	a
.af16	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af19	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af1c	f0 67		beq $af85			beq 	_GXSLFail
.af1e	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af21	48		pha				pha
.af22	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af25	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af28	20 b7 b1	jsr $b1b7			jsr 	gxOpenBitmap 				; open the bitmap.
.af2b	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af2e	4a		lsr a				lsr 	a
.af2f	4a		lsr a				lsr 	a
.af30	4a		lsr a				lsr 	a
.af31	29 07		and #$07			and		#7
.af33	1a		inc a				inc 	a
.af34	8d eb 06	sta $06eb			sta 	gxScale
.af37	64 38		stz $38				stz 	gxzTemp1					; start first line
.af39					_GXGELoop:
.af39	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af3b	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af3e	10 06		bpl $af46			bpl		_GXNoVFlip
.af40	ad e8 06	lda $06e8			lda 	gxMask
.af43	38		sec				sec
.af44	e5 38		sbc $38				sbc 	gxzTemp1
.af46					_GXNoVFlip:
.af46	aa		tax				tax 								; get the Xth line.
.af47	20 87 af	jsr $af87			jsr 	_GXCallAcquire 				; get that data.
.af4a	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af4d	85 39		sta $39				sta 	gxzTemp1+1
.af4f					_GXGELoop2:
.af4f	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af52	cd 4e 06	cmp $064e			cmp 	gxHeight
.af55	b0 10		bcs $af67			bcs 	_GXDGEExit
.af57	20 8a af	jsr $af8a			jsr 	GXRenderOneLine 			; render line
.af5a	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af5c	d0 f1		bne $af4f			bne 	_GXGELoop2
.af5e	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af60	a5 38		lda $38				lda 	gxzTemp1
.af62	cd e7 06	cmp $06e7			cmp 	gxSize
.af65	d0 d2		bne $af39			bne 	_GXGELoop
.af67					_GXDGEExit:
.af67	68		pla				pla 								; restore Y for next time
.af68	8d 44 06	sta $0644			sta 	gxY0
.af6b	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af6e					_GXShiftLeft:
.af6e	18		clc				clc
.af6f	ad e7 06	lda $06e7			lda 	gxSize
.af72	6d 42 06	adc $0642			adc 	gxX0
.af75	8d 42 06	sta $0642			sta 	gxX0
.af78	90 03		bcc $af7d			bcc 	_GXSLNoCarry
.af7a	ee 43 06	inc $0643			inc 	gxX0+1
.af7d					_GXSLNoCarry:
.af7d	ca		dex				dex
.af7e	d0 ee		bne $af6e			bne 	_GXShiftLeft
.af80	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap
.af83	18		clc				clc
.af84	60		rts				rts
.af85					_GXSLFail:
.af85	38		sec				sec
.af86	60		rts				rts
.af87					_GXCallAcquire:
.af87	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af8a					GXRenderOneLine:
.af8a	20 c7 b1	jsr $b1c7			jsr 	GXPositionCalc 				; calculate position/offset.
.af8d	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.af90	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.af92					_GXROLLoop1:
.af92	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.af95	85 3b		sta $3b				sta 	gxzTemp2+1
.af97					_GXROLLoop2:
.af97	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.af99	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.af9c	50 06		bvc $afa4			bvc 	_GXNoHFlip
.af9e	ad e8 06	lda $06e8			lda 	gxMask
.afa1	38		sec				sec
.afa2	e5 3a		sbc $3a				sbc 	gxzTemp2
.afa4					_GXNoHFlip:
.afa4	aa		tax				tax 								; read from the pixel buffer
.afa5	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.afa8	d0 07		bne $afb1			bne 	_GXDraw 					; draw if non zero
.afaa	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afad	29 04		and #$04			and 	#4
.afaf	f0 0a		beq $afbb			beq 	_GXZeroPixel
.afb1					_GXDraw:
.afb1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afb3	2d 52 06	and $0652			and 	gxANDValue
.afb6	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afb9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afbb					_GXZeroPixel:
.afbb	c8		iny				iny 								; advance pointer
.afbc	d0 05		bne $afc3			bne 	_GXNoShift
.afbe	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afc0	20 05 af	jsr $af05			jsr 	GXDLTCheckWrap				; check for new page.
.afc3					_GXNoShift:
.afc3	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afc5	d0 d0		bne $af97			bne 	_GXROLLoop2
.afc7	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afc9	a5 3a		lda $3a				lda 	gxzTemp2
.afcb	cd e7 06	cmp $06e7			cmp 	gxSize
.afce	d0 c2		bne $af92			bne 	_GXROLLoop1
.afd0	ee 44 06	inc $0644			inc 	gxY0
.afd3	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afd4					GXFontHandler:
.afd4	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afd6	4d 4f 06	eor $064f			eor 	gxMode
.afd9	8d ec 06	sta $06ec			sta 	gxUseMode
.afdc	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afde	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.afe0	26 37		rol $37				rol	 	gxzTemp0+1
.afe2	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.afe4	26 37		rol $37				rol	 	gxzTemp0+1
.afe6	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.afe8	26 37		rol $37				rol	 	gxzTemp0+1
.afea	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.afec	09 c0		ora #$c0			ora 	#$C0
.afee	85 37		sta $37				sta 	gxzTemp0+1
.aff0	a9 08		lda #$08			lda 	#8 							; size 8x8
.aff2	a2 fa		ldx #$fa			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.aff4	a0 af		ldy #$af			ldy 	#GXGetGraphicDataFont >> 8
.aff6	20 12 af	jsr $af12			jsr 	GXDrawGraphicElement
.aff9	60		rts				rts
.affa					GXGetGraphicDataFont:
.affa	8a		txa				txa 								; X->Y
.affb	a8		tay				tay
.affc	a6 01		ldx $01				ldx 	1 							; preserve old value
.affe	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.b000	85 01		sta $01				sta 	1
.b002	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.b004	86 01		stx $01				stx 	1 							; put old value back.
.b006	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b008					_GXExpand:
.b008	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b00b	0a		asl a				asl 	a 							; shift bit 7 into C
.b00c	90 08		bcc $b016			bcc 	_GXNoPixel
.b00e	48		pha				pha 								; if set, set pixel buffer to current colour.
.b00f	ad 50 06	lda $0650			lda 	gxColour
.b012	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b015	68		pla				pla
.b016					_GXNoPixel:
.b016	e8		inx				inx 								; do the whole byte.
.b017	e0 08		cpx #$08			cpx 	#8
.b019	d0 ed		bne $b008			bne 	_GXExpand
.b01b	60		rts				rts
.b01c					GXSpriteHandler:
.b01c	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b01e	4d 4f 06	eor $064f			eor 	gxMode
.b021	8d ec 06	sta $06ec			sta 	gxUseMode
.b024	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b026	da		phx				phx
.b027	20 b7 b1	jsr $b1b7			jsr 	GXOpenBitmap 				; can access sprite information
.b02a	68		pla				pla
.b02b	20 98 b2	jsr $b298			jsr 	GXFindSprite 				; get the sprite address
.b02e	08		php				php
.b02f	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap
.b032	28		plp				plp
.b033	b0 0a		bcs $b03f			bcs		_GXSHExit 					; exit if find failed.
.b035	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b038	a2 40		ldx #$40			ldx 	#GXSpriteAcquire & $FF
.b03a	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b03c	20 12 af	jsr $af12			jsr 	GXDrawGraphicElement
.b03f					_GXSHExit:
.b03f	60		rts				rts
.b040					GXSpriteAcquire:
.b040	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b043	85 0b		sta $0b				sta 	GXEditSlot
.b045	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b047	a9 00		lda #$00			lda 	#0
.b049	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b04c					_GXTimesRowNumber:
.b04c	18		clc				clc
.b04d	65 36		adc $36				adc 	zTemp0
.b04f	ca		dex				dex
.b050	10 fa		bpl $b04c			bpl 	_GXTimesRowNumber
.b052	64 37		stz $37				stz 	gxzTemp0+1
.b054	0a		asl a				asl 	a 							; row x 2,4,6,8
.b055	26 37		rol $37				rol 	gxzTemp0+1
.b057	0a		asl a				asl 	a 							; row x 4,8,12,16
.b058	26 37		rol $37				rol 	gxzTemp0+1
.b05a	0a		asl a				asl 	a 							; row x 8,16,24,32
.b05b	26 37		rol $37				rol 	gxzTemp0+1
.b05d	85 36		sta $36				sta 	gxzTemp0
.b05f	18		clc				clc 								; add base address.
.b060	a5 36		lda $36				lda 	gxzTemp0
.b062	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b065	85 36		sta $36				sta 	gxzTemp0
.b067	a5 37		lda $37				lda 	gxzTemp0+1
.b069	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b06c					_GXSAFindPage:
.b06c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b06e	90 06		bcc $b076			bcc 	_GXSAFoundPage
.b070	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b072	e6 0b		inc $0b				inc 	GXEditSlot
.b074	80 f6		bra $b06c			bra 	_GXSAFindPage
.b076					_GXSAFoundPage:
.b076	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b078	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b07a	a0 00		ldy #$00			ldy 	#0
.b07c					_GXSACopyLoop:
.b07c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b07e	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b081	c8		iny				iny
.b082	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b085	d0 f5		bne $b07c			bne 	_GXSACopyLoop
.b087	60		rts				rts
.b088					GXSelect:
.b088	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b08b	f0 22		beq $b0af			beq 	_GXSFail
.b08d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b08f	c9 40		cmp #$40			cmp 	#64
.b091	b0 1c		bcs $b0af			bcs 	_GXSFail
.b093	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b096	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b098	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b09a	06 36		asl $36				asl 	gxzTemp0
.b09c	06 36		asl $36				asl 	gxzTemp0
.b09e	06 36		asl $36				asl 	gxzTemp0
.b0a0	2a		rol a				rol 	a
.b0a1	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b0a3	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b0a6	85 37		sta $37				sta 	gxzTemp0+1
.b0a8	a5 36		lda $36				lda 	gxzTemp0
.b0aa	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0ad	18		clc				clc
.b0ae	60		rts				rts
.b0af					_GXSFail:
.b0af	38		sec				sec
.b0b0	60		rts				rts
.b0b1					GXSelectImage:
.b0b1	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0b4	f0 74		beq $b12a			beq 	_GXSIFail
.b0b6	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0b9	f0 6f		beq $b12a			beq 	_GXSIFail 					; (checking the MSB)
.b0bb	64 01		stz $01				stz 	1
.b0bd	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0bf	d0 6b		bne $b12c			bne 	_GXSIHide
.b0c1	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0c3	48		pha				pha
.b0c4	20 b7 b1	jsr $b1b7			jsr 	GXOpenBitmap
.b0c7	68		pla				pla
.b0c8	20 98 b2	jsr $b298			jsr 	GXFindSprite
.b0cb	b0 5a		bcs $b127			bcs 	_GXSICloseFail 				; no image
.b0cd	a0 01		ldy #$01			ldy 	#1
.b0cf	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0d2	85 36		sta $36				sta 	gxzTemp0
.b0d4	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0d7	85 37		sta $37				sta 	gxzTemp0+1
.b0d9	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0dc	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0de	18		clc				clc
.b0df	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0e2	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0e5	c8		iny				iny
.b0e6	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0e8	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0eb	69 00		adc #$00			adc 	#0
.b0ed	c8		iny				iny
.b0ee	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0f0	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b0f3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b0f5	2a		rol a				rol 	a 							; x 2
.b0f6	0a		asl a				asl 	a 							; x 4
.b0f7	0a		asl a				asl 	a 							; x 8
.b0f8	0a		asl a				asl 	a 							; x 16
.b0f9	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b0fc	0a		asl a				asl 	a 							; 1 shift
.b0fd	09 01		ora #$01			ora 	#1 							; enable sprite.
.b0ff	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b101	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap
.b104	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b107	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b10a	29 3f		and #$3f			and 	#$3F
.b10c	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b10f	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b112	6a		ror a				ror 	a 							; shift into bits 6/7
.b113	6a		ror a				ror 	a
.b114	6a		ror a				ror 	a
.b115	29 c0		and #$c0			and 	#$C0
.b117	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b11a	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b11d	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b120	29 7f		and #$7f			and 	#$7F
.b122	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b125	18		clc				clc
.b126	60		rts				rts
.b127					_GXSICloseFail:
.b127	20 bf b1	jsr $b1bf			jsr 	GXCloseBitmap
.b12a					_GXSIFail:
.b12a	38		sec				sec
.b12b	60		rts				rts
.b12c					_GXSIHide:
.b12c	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b12f	85 36		sta $36				sta 	gxzTemp0
.b131	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b134	85 37		sta $37				sta 	gxzTemp0+1
.b136	a9 00		lda #$00			lda 	#0
.b138	92 36		sta ($36)			sta 	(gxzTemp0)
.b13a	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b13d	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b140	09 80		ora #$80			ora 	#$80
.b142	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b145	18		clc				clc
.b146	60		rts				rts
.b147					GXMoveSprite:
.b147	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b14a	f0 65		beq $b1b1			beq 	_GXSIFail
.b14c	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b14f	f0 60		beq $b1b1			beq 	_GXSIFail
.b151	85 37		sta $37				sta 	gxzTemp0+1
.b153	a0 04		ldy #$04			ldy 	#4
.b155	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b158	85 36		sta $36				sta 	gxzTemp0
.b15a	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b15d	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b160	2a		rol a				rol 	a	 						; into bits 0,1.
.b161	2a		rol a				rol 	a
.b162	2a		rol a				rol 	a
.b163	29 03		and #$03			and 	#3
.b165	aa		tax				tax
.b166	bd b3 b1	lda $b1b3,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b169	48		pha				pha
.b16a	18		clc				clc
.b16b	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b16e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b170	c8		iny				iny
.b171	ad 43 06	lda $0643			lda 	gxX0+1
.b174	69 00		adc #$00			adc 	#0
.b176	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b178	c8		iny				iny
.b179	68		pla				pla
.b17a	18		clc				clc
.b17b	6d 44 06	adc $0644			adc 	gxY0
.b17e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b180	a9 00		lda #$00			lda 	#0
.b182	69 00		adc #$00			adc 	#0
.b184	c8		iny				iny
.b185	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b187	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b18a	6e 42 06	ror $0642			ror 	gxX0
.b18d	4e 42 06	lsr $0642			lsr 	gxX0
.b190	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b193	4e 44 06	lsr $0644			lsr 	gxY0
.b196	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b199	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b19c	29 80		and #$80			and 	#$80
.b19e	0d 42 06	ora $0642			ora 	gxX0
.b1a1	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b1a4	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b1a7	29 c0		and #$c0			and 	#$C0
.b1a9	0d 44 06	ora $0644			ora 	gxY0
.b1ac	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1af	18		clc				clc
.b1b0	60		rts				rts
.b1b1					_GXSIFail:
.b1b1	38		sec				sec
.b1b2	60		rts				rts
.b1b3					_GXMSOffset:
>b1b3	1c						.byte 	32-8/2
>b1b4	18						.byte 	32-16/2
>b1b5	14						.byte 	32-24/2
>b1b6	10						.byte 	32-32/2
.b1b7					GXOpenBitmap:
.b1b7	78		sei				sei 								; no interrupts here
.b1b8	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1ba	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1bd	58		cli				cli
.b1be	60		rts				rts
.b1bf					GXCloseBitmap:
.b1bf	78		sei				sei
.b1c0	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1c3	85 0b		sta $0b				sta 	GXEditSlot
.b1c5	58		cli				cli
.b1c6	60		rts				rts
.b1c7					GXPositionCalc:
.b1c7	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1c9	48		pha				pha
.b1ca	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1cd	85 3c		sta $3c				sta 	gxzScreen
.b1cf	64 3d		stz $3d				stz 	gxzScreen+1
.b1d1	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1d3	26 3d		rol $3d				rol 	gxzScreen+1
.b1d5	06 3c		asl $3c				asl 	gxzScreen
.b1d7	26 3d		rol $3d				rol 	gxzScreen+1
.b1d9	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1da	65 3c		adc $3c				adc 	gxzScreen
.b1dc	85 3c		sta $3c				sta 	gxzScreen
.b1de	90 02		bcc $b1e2			bcc 	_GXPCNoCarry
.b1e0	e6 3d		inc $3d				inc 	gxzScreen+1
.b1e2					_GXPCNoCarry:
.b1e2	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1e4	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1e6	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1e8	85 36		sta $36				sta 	gxzTemp0
.b1ea	64 3d		stz $3d				stz 	gxzScreen+1
.b1ec	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1ee					_GXPCMultiply32:
.b1ee	06 3c		asl $3c				asl 	gxzScreen
.b1f0	26 3d		rol $3d				rol 	gxzScreen+1
.b1f2	3a		dec a				dec 	a
.b1f3	d0 f9		bne $b1ee			bne 	_GXPCMultiply32
.b1f5	18		clc				clc
.b1f6	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b1f9	65 3c		adc $3c				adc 	gxzScreen
.b1fb	8d 54 06	sta $0654			sta 	gsOffset
.b1fe	ad 43 06	lda $0643			lda 	GXX0+1
.b201	65 3d		adc $3d				adc 	gxzScreen+1
.b203	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b205	90 04		bcc $b20b			bcc 	_GXPCNoOverflow
.b207	29 1f		and #$1f			and 	#$1F 						; fix it up
.b209	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b20b					_GXPCNoOverflow:
.b20b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b20d	85 3d		sta $3d				sta 	gxzScreen+1
.b20f	64 3c		stz $3c				stz 	gxzScreen
.b211	18		clc				clc
.b212	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b214	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b217	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b219	68		pla				pla
.b21a	85 36		sta $36				sta 	gxzTemp0
.b21c	60		rts				rts
.b21d					GXMovePositionDown:
.b21d	18		clc				clc 								; add 320 to offset/temp+1
.b21e	ad 54 06	lda $0654			lda 	gsOffset
.b221	69 40		adc #$40			adc 	#64
.b223	8d 54 06	sta $0654			sta 	gsOffset
.b226	a5 3d		lda $3d				lda 	gxzScreen+1
.b228	69 01		adc #$01			adc 	#1
.b22a	85 3d		sta $3d				sta 	gxzScreen+1
.b22c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b22e	90 07		bcc $b237			bcc 	_GXMPDExit
.b230	38		sec				sec  								; next page
.b231	e9 20		sbc #$20			sbc 	#$20
.b233	85 3d		sta $3d				sta 	gxzScreen+1
.b235	e6 0b		inc $0b				inc 	GXEditSlot
.b237					_GXMPDExit:
.b237	60		rts				rts
.b238					GXCollide:
.b238	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b23a	aa		tax				tax
.b23b	05 37		ora $37				ora 	gxzTemp0+1
.b23d	29 c0		and #$c0			and 	#$C0
.b23f	38		sec				sec
.b240	d0 53		bne $b295			bne 	_GXCollideFail 				; if either >= 64, fail.
.b242	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b244	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b247	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b24a	30 48		bmi $b294			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b24c	18		clc				clc 								; need to calculate sum of sizes.
.b24d	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b250	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b253	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b255	6a		ror a				ror 	a 							; 5/6/7
.b256	4a		lsr a				lsr 	a 							; 4/5/6
.b257	4a		lsr a				lsr 	a 							; 3/4/5
.b258	4a		lsr a				lsr 	a 							; 2/3/4
.b259	18		clc				clc
.b25a	69 08		adc #$08			adc 	#$08
.b25c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b25d	4a		lsr a				lsr 	a
.b25e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b260	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b263	29 3f		and #$3f			and 	#$3F
.b265	85 39		sta $39				sta 	gxzTemp1+1
.b267	38		sec				sec
.b268	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b26b	29 3f		and #$3f			and 	#$3F
.b26d	e5 39		sbc $39				sbc 	gxzTemp1+1
.b26f	b0 03		bcs $b274			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b271	49 ff		eor #$ff			eor 	#$FF
.b273	1a		inc a				inc 	a
.b274					_GXCAbs1:
.b274	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b276	b0 1c		bcs $b294			bcs 	_GXOkayFail
.b278	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b27a	38		sec				sec 								; calculate |x1-x0|
.b27b	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b27e	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b281	b0 03		bcs $b286			bcs 	_GXCAbs2
.b283	49 ff		eor #$ff			eor 	#$FF
.b285	1a		inc a				inc 	a
.b286					_GXCAbs2:
.b286	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b288	b0 0a		bcs $b294			bcs 	_GXOkayFail
.b28a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b28c	90 02		bcc $b290			bcc 	_GXCHaveLowest
.b28e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b290					_GXCHaveLowest:
.b290	0a		asl a				asl 	a 							; scale to allow for >> 2
.b291	0a		asl a				asl 	a
.b292	18		clc				clc
.b293	60		rts				rts
.b294					_GXOkayFail:
.b294	18		clc				clc
.b295					_GXCollideFail:
.b295	a9 ff		lda #$ff			lda 	#$FF
.b297	60		rts				rts
.b298					GXFindSprite:
.b298	aa		tax				tax
.b299	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b29c	85 0b		sta $0b				sta 	GXEditSlot
.b29e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b2a1	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b2a4	f0 33		beq $b2d9			beq 	_GXFSFail
.b2a6	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b2a9	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2ac	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2af	48		pha				pha 								; save twice
.b2b0	48		pha				pha
.b2b1	29 03		and #$03			and 	#3 							; get sprite size
.b2b3	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2b6	aa		tax				tax
.b2b7	bd db b2	lda $b2db,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2ba	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2bd	68		pla				pla 								; get LUT
.b2be	4a		lsr a				lsr		a
.b2bf	4a		lsr a				lsr		a
.b2c0	29 03		and #$03			and 	#3
.b2c2	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2c5	68		pla				pla 								; address, neeeds to be x 4
.b2c6	29 f0		and #$f0			and 	#$F0
.b2c8	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2cb	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2ce	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2d1	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2d4	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2d7	18		clc				clc
.b2d8	60		rts				rts
.b2d9					_GXFSFail:
.b2d9	38		sec				sec
.b2da	60		rts				rts
.b2db					_GXFXSSTTable:
>b2db	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2df					GXSortXY:
.b2df	20 fd b2	jsr $b2fd			jsr 	GXSortY 					; will be sorted on Y now
.b2e2	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2e5	cd 46 06	cmp $0646			cmp 	gxX1
.b2e8	ad 43 06	lda $0643			lda 	gXX0+1
.b2eb	ed 47 06	sbc $0647			sbc 	gXX1+1
.b2ee	90 0c		bcc $b2fc			bcc 	_GXSXYExit 					; X0 < X1 exit
.b2f0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b2f2	a0 04		ldy #$04			ldy 	#4
.b2f4	20 11 b3	jsr $b311			jsr 	GXSwapXY
.b2f7	e8		inx				inx
.b2f8	c8		iny				iny
.b2f9	20 11 b3	jsr $b311			jsr 	GXSwapXY
.b2fc					_GXSXYExit:
.b2fc	60		rts				rts
.b2fd					GXSortY:
.b2fd	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b300	cd 48 06	cmp $0648			cmp 	gxY1
.b303	90 0b		bcc $b310			bcc 	_GXSYSorted
.b305	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b307	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b309					_GXSwap1:
.b309	20 11 b3	jsr $b311			jsr 	GXSwapXY
.b30c	88		dey				dey
.b30d	ca		dex				dex
.b30e	10 f9		bpl $b309			bpl 	_GXSwap1
.b310					_GXSYSorted:
.b310	60		rts				rts
.b311					GXSwapXY:
.b311	bd 42 06	lda $0642,x			lda 	gxX0,x
.b314	48		pha				pha
.b315	b9 42 06	lda $0642,y			lda 	gxX0,y
.b318	9d 42 06	sta $0642,x			sta 	gxX0,x
.b31b	68		pla				pla
.b31c	99 42 06	sta $0642,y			sta 	gxX0,y
.b31f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b843					KeywordSet0:
>b843	00 65					.text	0,$65,""               ; $80 !0:EOF
>b845	00 58					.text	0,$58,""               ; $81 !1:SH1
>b847	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b849	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b84f	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b857	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b85d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b864	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b86c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b873	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b87a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b880	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b886	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b88e	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b895	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b89c	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b8a3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b8ab	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b8b1	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b8b7	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b8be	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b8c4	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b8ca	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $96 PLAYING(
>b8d2	47 28
>b8d4	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $97 RANDOM(
>b8dc	28
>b8dd	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $98 RIGHT$(
>b8e5	28
>b8e6	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $99 RND(
>b8ec	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9a SGN(
>b8f2	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9b SPC(
>b8f8	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9c STR$(
>b8ff	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9d TIMER(
>b907	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9e TRUE
>b90d	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9f VAL(
>b913	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a0 FOR
>b918	02 8f 49 46				.text	2,$8f,"IF"             ; $a1 IF
>b91c	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a2 PROC
>b922	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a3 REPEAT
>b92a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a4 WHILE
>b931	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a5 ENDIF
>b938	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a6 ENDPROC
>b940	43
>b941	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a7 NEXT
>b947	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a8 THEN
>b94d	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a9 UNTIL
>b954	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $aa WEND
>b95a	02 9b 42 59				.text	2,$9b,"BY"             ; $ab BY
>b95e	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ac CALL
>b964	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ad CIRCLE
>b96c	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ae CLEAR
>b973	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $af CLS
>b978	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b0 COLOR
>b97f	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b1 COLOUR
>b987	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b2 DATA
>b98d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b3 DIM
>b992	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b4 DOWNTO
>b99a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b5 ELSE
>b9a0	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b6 FROM
>b9a6	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b7 GFX
>b9ab	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b8 GOSUB
>b9b2	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b9 GOTO
>b9b8	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $ba HERE
>b9be	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $bb IMAGE
>b9c5	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bc LET
>b9ca	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bd LINE
>b9d0	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $be LOCAL
>b9d7	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bf OFF
>b9dc	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c0 ON
>b9e0	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c1 OUTLINE
>b9e8	45
>b9e9	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c2 PALETTE
>b9f1	45
>b9f2	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c3 PLOT
>b9f8	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c4 PRINT
>b9ff	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c5 READ
>ba05	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c6 RECT
>ba0b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c7 REM
>ba10	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c8 RETURN
>ba18	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c9 SOLID
>ba1f	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $ca SOUND
>ba26	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $cb SPRITE
>ba2e	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $cc TEXT
>ba34	02 a3 54 4f				.text	2,$a3,"TO"             ; $cd TO
>ba38	ff					.text	$FF
.ba39					KeywordSet1:
>ba39	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba3b	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba3d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba3f	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>ba47	4c 45
>ba49	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba51	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba59	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba5e	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba64	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba69	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba71	45
>ba72	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba77	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba7f	53
>ba80	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba86	ff					.text	$FF
.ba87					KeywordSet2:
>ba87	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba89	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba8b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba8d	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba92	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba97	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba9c	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>baa1	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>baa6	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>baab	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>bab0	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>bab5	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>baba	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>babf	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>bac4	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>bac9	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>bace	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>bad3	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>bad8	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>badd	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>bae2	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>bae7	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>baec	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>baf1	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>baf6	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>bafb	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bb00	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bb05	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>bb0a	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bb0f	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bb14	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>bb19	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>bb1e	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>bb23	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>bb28	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bb2d	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>bb32	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bb37	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bb3c	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bb41	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bb46	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bb4b	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb50	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb55	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb5a	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb5f	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb64	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb69	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb6e	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb73	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb78	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb7d	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb82	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb87	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb8c	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb91	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb96	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb9b	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bba0	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bba5	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bbaa	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bbaf	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bbb4	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bbb9	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bbbe	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bbc3	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bbc8	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bbcd	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bbd2	ff					.text	$FF
.b320					ListConvertLine:
.b320	48		pha				pha 								; save indent on the stack
.b321	9c 9d 04	stz $049d			stz 	tbOffset
.b324	9c ab 04	stz $04ab			stz 	tokenBuffer
.b327	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b329	b1 30		lda ($30),y			lda 	(codePtr),y
.b32b	aa		tax				tax
.b32c	88		dey				dey
.b32d	b1 30		lda ($30),y			lda 	(codePtr),y
.b32f	20 55 92	jsr $9255			jsr 	LCLConvertInt16
.b332	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b334	86 37		stx $37				stx 	zTemp0+1
.b336	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b338	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b33b	a0 00		ldy #$00			ldy 	#0
.b33d					_LCCopyNumber:
.b33d	b1 36		lda ($36),y			lda 	(zTemp0),y
.b33f	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b342	c8		iny				iny
.b343	b1 36		lda ($36),y			lda 	(zTemp0),y
.b345	d0 f6		bne $b33d			bne 	_LCCopyNumber
.b347	68		pla				pla 								; adjustment to indent
.b348	48		pha				pha 								; save on stack
.b349	10 0c		bpl $b357			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b34b	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b34c	6d a6 04	adc $04a6			adc 	listIndent
.b34f	8d a6 04	sta $04a6			sta 	listIndent
.b352	10 03		bpl $b357			bpl 	_LCNoAdjust
.b354	9c a6 04	stz $04a6			stz 	listIndent
.b357					_LCNoAdjust:
.b357	18		clc				clc		 							; work out actual indent.
.b358	ad a6 04	lda $04a6			lda 	listIndent
.b35b	0a		asl a				asl 	a
.b35c	69 06		adc #$06			adc 	#6
.b35e	85 36		sta $36				sta 	zTemp0
.b360					_LCPadOut:
.b360	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b362	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b365	ad 9d 04	lda $049d			lda 	tbOffset
.b368	c5 36		cmp $36				cmp 	zTemp0
.b36a	d0 f4		bne $b360			bne 	_LCPadOut
.b36c	a0 03		ldy #$03			ldy 	#3 							; start position.
.b36e					_LCMainLoop:
.b36e	a9 8a		lda #$8a			lda 	#CLIPunctuation+$80
.b370	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b373	b1 30		lda ($30),y			lda 	(codePtr),y
.b375	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b377	f0 17		beq $b390			beq 	_LCExit
.b379	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b37b	90 1e		bcc $b39b			bcc 	_LCDoubles
.b37d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b37f	90 2a		bcc $b3ab			bcc 	_LCShiftPunc
.b381	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b383	90 35		bcc $b3ba			bcc 	_LCPunctuation
.b385	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b387	90 3e		bcc $b3c7			bcc 	_LCIdentifiers
.b389	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b38b	90 5f		bcc $b3ec			bcc 	_LCTokens
.b38d	4c 4c b4	jmp $b44c			jmp 	_LCData 					; 254-5 are data objects
.b390					_LCExit:
.b390	68		pla				pla 								; get old indent adjust
.b391	30 07		bmi $b39a			bmi 	_LCExit2
.b393	18		clc				clc 								; add to indent if +ve
.b394	6d a6 04	adc $04a6			adc 	listIndent
.b397	8d a6 04	sta $04a6			sta 	listIndent
.b39a					_LCExit2:
.b39a	60		rts				rts
.b39b					_LCDoubles:
.b39b	48		pha				pha
.b39c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b39d	29 02		and #$02			and 	#2
.b39f	09 3c		ora #$3c			ora 	#60 						; make < >
.b3a1	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b3a4	68		pla				pla 								; restore, do lower bit
.b3a5	29 03		and #$03			and 	#3
.b3a7	09 3c		ora #$3c			ora 	#60
.b3a9	80 0f		bra $b3ba			bra		_LCPunctuation 				; print, increment, loop
.b3ab					_LCShiftPunc:
.b3ab	aa		tax				tax 								; save in X
.b3ac	29 07		and #$07			and 	#7 							; lower 3 bits
.b3ae	f0 02		beq $b3b2			beq 	_LCNoAdd
.b3b0	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3b2					_LCNoAdd:
.b3b2	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3b4	90 02		bcc $b3b8			bcc 	_LCNoAdd2
.b3b6	09 20		ora #$20			ora 	#32 						; adds $20
.b3b8					_LCNoAdd2:
.b3b8	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3ba					_LCPunctuation:
.b3ba	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3bc	d0 03		bne $b3c1			bne 	_LCPContinue
.b3be	20 93 b4	jsr $b493			jsr 	LCLDeleteLastSpace
.b3c1					_LCPContinue:
.b3c1	c8		iny				iny 								; consume character
.b3c2	20 7d b4	jsr $b47d			jsr 	LCLWrite 					; write it out.
.b3c5	80 a7		bra $b36e			bra 	_LCMainLoop 				; go round again.
.b3c7					_LCIdentifiers:
.b3c7	18		clc				clc 								; convert to physical address
.b3c8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3ca	85 37		sta $37				sta 	zTemp0+1
.b3cc	c8		iny				iny
.b3cd	b1 30		lda ($30),y			lda 	(codePtr),y
.b3cf	85 36		sta $36				sta 	zTemp0
.b3d1	c8		iny				iny
.b3d2	5a		phy				phy 								; save position
.b3d3	a9 87		lda #$87			lda 	#CLIIdentifier+$80
.b3d5	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b3d8	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3da					_LCOutIdentifier:
.b3da	c8		iny				iny
.b3db	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3dd	29 7f		and #$7f			and 	#$7F
.b3df	20 cf b4	jsr $b4cf			jsr 	LCLLowerCase
.b3e2	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b3e5	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3e7	10 f1		bpl $b3da			bpl 	_LCOutIdentifier
.b3e9	7a		ply				ply 								; restore position
.b3ea	80 82		bra $b36e			bra 	_LCMainLoop
.b3ec					_LCTokens:
.b3ec	aa		tax				tax 								; token in X
.b3ed	a9 87		lda #$87			lda 	#((KeywordSet2) & $FF)
.b3ef	85 36		sta $36				sta 	0+zTemp0
.b3f1	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b3f3	85 37		sta $37				sta 	1+zTemp0
.b3f5	e0 82		cpx #$82			cpx 	#$82
.b3f7	f0 16		beq $b40f			beq 	_LCUseShift
.b3f9	a9 39		lda #$39			lda 	#((KeywordSet1) & $FF)
.b3fb	85 36		sta $36				sta 	0+zTemp0
.b3fd	a9 ba		lda #$ba			lda 	#((KeywordSet1) >> 8)
.b3ff	85 37		sta $37				sta 	1+zTemp0
.b401	e0 81		cpx #$81			cpx 	#$81
.b403	f0 0a		beq $b40f			beq 	_LCUseShift
.b405	a9 43		lda #$43			lda 	#((KeywordSet0) & $FF)
.b407	85 36		sta $36				sta 	0+zTemp0
.b409	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b40b	85 37		sta $37				sta 	1+zTemp0
.b40d	80 01		bra $b410			bra 	_LCNoShift
.b40f					_LCUseShift:
.b40f	c8		iny				iny
.b410					_LCNoShift:
.b410	20 a7 b4	jsr $b4a7			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.b413	b1 30		lda ($30),y			lda 	(codePtr),y
.b415	aa		tax				tax 								; into X
.b416					_LCFindText:
.b416	ca		dex				dex
.b417	10 0e		bpl $b427			bpl 	_LCFoundText 				; found text.
.b419	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b41b	1a		inc a				inc 	a 							; one extra for size
.b41c	38		sec				sec 								; one extra for checksum
.b41d	65 36		adc $36				adc 	zTemp0 						; go to next token
.b41f	85 36		sta $36				sta 	zTemp0
.b421	90 f3		bcc $b416			bcc 	_LCFindText
.b423	e6 37		inc $37				inc 	zTemp0+1
.b425	80 ef		bra $b416			bra 	_LCFindText
.b427					_LCFoundText:
.b427	5a		phy				phy 								; save List position
.b428	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b42a	aa		tax				tax
.b42b	a9 83		lda #$83			lda 	#CLIToken+$80
.b42d	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b430	a0 02		ldy #$02			ldy 	#2
.b432					_LCCopyToken:
.b432	b1 36		lda ($36),y			lda 	(zTemp0),y
.b434	20 cf b4	jsr $b4cf			jsr 	LCLLowerCase
.b437	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b43a	c8		iny				iny
.b43b	ca		dex				dex
.b43c	d0 f4		bne $b432			bne 	_LCCopyToken
.b43e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b440	f0 05		beq $b447			beq 	_LCNoSpace
.b442	a9 20		lda #$20			lda 	#' '
.b444	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b447					_LCNoSpace:
.b447	7a		ply				ply 								; restore position.
.b448	c8		iny				iny 								; consume token
.b449	4c 6e b3	jmp $b36e			jmp 	_LCMainLoop 				; and go around again.
.b44c					_LCData:
.b44c	48		pha				pha 								; save type $FE/$FF
.b44d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b44f	c9 fe		cmp #$fe			cmp 	#$FE
.b451	f0 07		beq $b45a			beq 	_LCHaveOpener
.b453	a2 22		ldx #$22			ldx 	#'"'
.b455	a9 81		lda #$81			lda 	#CLIData+$80
.b457	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b45a					_LCHaveOpener:
.b45a	8a		txa				txa 								; output prefix (# or ")
.b45b	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b45e	c8		iny				iny 								; get count
.b45f	b1 30		lda ($30),y			lda 	(codePtr),y
.b461	aa		tax				tax
.b462	c8		iny				iny 								; point at first character
.b463					_LCOutData:
.b463	b1 30		lda ($30),y			lda 	(codePtr),y
.b465	c9 00		cmp #$00			cmp 	#0
.b467	f0 03		beq $b46c			beq 	_LCNoPrint
.b469	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b46c					_LCNoPrint:
.b46c	c8		iny				iny
.b46d	ca		dex				dex
.b46e	d0 f3		bne $b463			bne 	_LCOutData
.b470	68		pla				pla 								; closing " required ?
.b471	c9 ff		cmp #$ff			cmp 	#$FF
.b473	d0 05		bne $b47a			bne 	_LCNoQuote
.b475	a9 22		lda #$22			lda 	#'"'
.b477	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b47a					_LCNoQuote:
.b47a	4c 6e b3	jmp $b36e			jmp 	_LCMainLoop
.b47d					LCLWrite:
.b47d	da		phx				phx
.b47e	ae 9d 04	ldx $049d			ldx 	tbOffset
.b481	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b484	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b487	ee 9d 04	inc $049d			inc 	tbOffset
.b48a	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b48c	30 03		bmi $b491			bmi 	_LCLNoColour
.b48e	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b491					_LCLNoColour:
.b491	fa		plx				plx
.b492	60		rts				rts
.b493					LCLDeleteLastSpace:
.b493	48		pha				pha
.b494	da		phx				phx
.b495	ae 9d 04	ldx $049d			ldx 	tbOffset
.b498	f0 0a		beq $b4a4			beq 	_LCDLSExit
.b49a	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b49d	c9 20		cmp #$20			cmp 	#' '
.b49f	d0 03		bne $b4a4			bne 	_LCDLSExit
.b4a1	ce 9d 04	dec $049d			dec 	tbOffset
.b4a4					_LCDLSExit:
.b4a4	fa		plx				plx
.b4a5	68		pla				pla
.b4a6	60		rts				rts
.b4a7					LCLCheckSpaceRequired:
.b4a7	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4aa	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4ac	f0 1b		beq $b4c9			beq 	_LCCSRSpace
.b4ae	c9 29		cmp #$29			cmp 	#')'
.b4b0	f0 17		beq $b4c9			beq 	_LCCSRSpace
.b4b2	c9 23		cmp #$23			cmp 	#'#'
.b4b4	f0 13		beq $b4c9			beq 	_LCCSRSpace
.b4b6	20 cf b4	jsr $b4cf			jsr 	LCLLowerCase 				; saves a little effort
.b4b9	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4bb	90 11		bcc $b4ce			bcc 	_LCCSRExit
.b4bd	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4bf	90 08		bcc $b4c9			bcc 	_LCCSRSpace
.b4c1	c9 61		cmp #$61			cmp 	#"a"
.b4c3	90 09		bcc $b4ce			bcc 	_LCCSRExit
.b4c5	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4c7	b0 05		bcs $b4ce			bcs 	_LCCSRExit
.b4c9					_LCCSRSpace:
.b4c9	a9 20		lda #$20			lda 	#' '
.b4cb	20 7d b4	jsr $b47d			jsr 	LCLWrite
.b4ce					_LCCSRExit:
.b4ce	60		rts				rts
.b4cf					LCLLowerCase:
.b4cf	c9 41		cmp #$41			cmp 	#"A"
.b4d1	90 06		bcc $b4d9			bcc 	_LCLLCOut
.b4d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4d5	b0 02		bcs $b4d9			bcs 	_LCLLCOut
.b4d7	69 20		adc #$20			adc 	#$20
.b4d9					_LCLLCOut:
.b4d9	60		rts				rts
.b4da					LCLUpperCase:
.b4da	c9 61		cmp #$61			cmp 	#"a"
.b4dc	90 06		bcc $b4e4			bcc 	_LCLUCOut
.b4de	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4e0	b0 02		bcs $b4e4			bcs 	_LCLUCOut
.b4e2	e9 1f		sbc #$1f			sbc 	#$1F
.b4e4					_LCLUCOut:
.b4e4	60		rts				rts
.b4e5					TOKSearchTable:
.b4e5	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4e7	85 36		sta $36				sta 	zTemp0
.b4e9	a0 00		ldy #$00			ldy 	#0
.b4eb	a9 80		lda #$80			lda 	#$80 						; token #
.b4ed	85 38		sta $38				sta 	zTemp1
.b4ef					_TSTLoop:
.b4ef	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b4f1	30 49		bmi $b53c			bmi 	_TSTFail 					; -ve = end of table
.b4f3	f0 2e		beq $b523			beq 	_TSTNext 					; zero, check next it's a dummy
.b4f5	c8		iny				iny 								; get the hash
.b4f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4f8	88		dey				dey
.b4f9	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b4fc	d0 25		bne $b523			bne 	_TSTNext
.b4fe	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b501	38		sec				sec
.b502	ed 80 04	sbc $0480			sbc 	identStart
.b505	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b507	d0 1a		bne $b523			bne 	_TSTNext
.b509	5a		phy				phy 								; save Y , we might fail
.b50a	c8		iny				iny 								; point to text
.b50b	c8		iny				iny
.b50c	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b50f					_TSTCompareName:
.b50f	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b512	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b514	d0 0c		bne $b522			bne 	_TSTNextPullY 				; fail, pullY and do next
.b516	e8		inx				inx
.b517	c8		iny				iny
.b518	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b51b	d0 f2		bne $b50f			bne 	_TSTCompareName
.b51d	7a		ply				ply 								; throw Y
.b51e	a5 38		lda $38				lda 	zTemp1 						; get token #
.b520	38		sec				sec 								; return with CS = passed.
.b521	60		rts				rts
.b522					_TSTNextPullY:
.b522	7a		ply				ply 								; restore current, fall through.
.b523					_TSTNext:
.b523	e6 38		inc $38				inc 	zTemp1 						; token counter
.b525	98		tya				tya
.b526	18		clc				clc
.b527	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b529	1a		inc a				inc 	a 							; +1
.b52a	1a		inc a				inc 	a 							; +2
.b52b	a8		tay				tay
.b52c	10 c1		bpl $b4ef			bpl 	_TSTLoop 					; if Y < $80 loop back
.b52e	98		tya				tya 								; add Y to zTemp0 and reset Y
.b52f	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b531	18		clc				clc  								; but have tables > 255 bytes
.b532	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b534	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b536	90 b7		bcc $b4ef			bcc 	_TSTLoop
.b538	e6 37		inc $37				inc 	zTemp0+1
.b53a	80 b3		bra $b4ef			bra 	_TSTLoop
.b53c					_TSTFail:
.b53c	18		clc				clc
.b53d	60		rts				rts
.b53e					TokeniseLine:
.b53e	20 c6 b6	jsr $b6c6			jsr 	LCLFixLineBufferCase 		; fix line case
.b541	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b543	8d a8 04	sta $04a8			sta 	tokenOffset
.b546	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b549	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b54c	a2 ff		ldx #$ff			ldx 	#$FF
.b54e					_TKFindFirst:
.b54e	e8		inx				inx
.b54f	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b552	f0 79		beq $b5cd			beq 	_TKExit
.b554	c9 20		cmp #$20			cmp 	#' '
.b556	90 f6		bcc $b54e			bcc 	_TKFindFirst
.b558	c9 30		cmp #$30			cmp 	#'0'
.b55a	90 07		bcc $b563			bcc 	_TKNoLineNumber
.b55c	c9 3a		cmp #$3a			cmp 	#'9'+1
.b55e	b0 03		bcs $b563			bcs 	_TKNoLineNumber
.b560	20 f0 b6	jsr $b6f0			jsr 	TOKExtractLineNumber
.b563					_TKNoLineNumber:
.b563					_TKTokeniseLoop:
.b563	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b566	f0 65		beq $b5cd			beq 	_TKExit
.b568	e8		inx				inx
.b569	c9 20		cmp #$20			cmp 	#' '
.b56b	f0 f6		beq $b563			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b56d	ca		dex				dex 								; undo last get, A contains character, X is position.
.b56e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b570	f0 61		beq $b5d3			beq 	_TKTokeniseIdentifier
.b572	c9 41		cmp #$41			cmp 	#'A'
.b574	90 04		bcc $b57a			bcc 	_TKTokenisePunctuation
.b576	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b578	90 59		bcc $b5d3			bcc 	_TKTokeniseIdentifier
.b57a					_TKTokenisePunctuation:
.b57a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b57c	f0 27		beq $b5a5			beq 	_TKString
.b57e	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b580	f0 28		beq $b5aa			beq 	_TKHexConstant
.b582	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b584	f0 29		beq $b5af			beq 	_TKCheckDouble
.b586	c9 3e		cmp #$3e			cmp 	#'>'
.b588	f0 25		beq $b5af			beq 	_TKCheckDouble
.b58a					_TKStandardPunctuation:
.b58a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b58d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b58f	90 0e		bcc $b59f			bcc 	_TKNoShift
.b591	48		pha				pha 								; save
.b592	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b594	85 36		sta $36				sta 	zTemp0
.b596	68		pla				pla
.b597	29 20		and #$20			and 	#32 						; bit 5
.b599	4a		lsr a				lsr 	a 							; shift into bit 3
.b59a	4a		lsr a				lsr 	a
.b59b	05 36		ora $36				ora 	zTemp0
.b59d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b59f					_TKNoShift:
.b59f	20 35 b7	jsr $b735			jsr 	TOKWriteByte 				; write the punctuation character
.b5a2	e8		inx				inx 								; consume the character
.b5a3	80 be		bra $b563			bra 	_TKTokeniseLoop 			; and loop round again.
.b5a5					_TKString:
.b5a5	20 55 b6	jsr $b655			jsr 	TOKTokenString
.b5a8	80 b9		bra $b563			bra 	_TKTokeniseLoop
.b5aa					_TKHexConstant:
.b5aa	20 90 b6	jsr $b690			jsr 	TOKHexConstant
.b5ad	80 b4		bra $b563			bra 	_TKTokeniseLoop
.b5af					_TKCheckDouble:
.b5af	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5b2	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5b4	90 d4		bcc $b58a			bcc 	_TKStandardPunctuation
.b5b6	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5b8	b0 d0		bcs $b58a			bcs 	_TKStandardPunctuation
.b5ba	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5bd	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5bf	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5c0	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5c3	38		sec				sec
.b5c4	e9 3c		sbc #$3c			sbc 	#'<'
.b5c6	20 35 b7	jsr $b735			jsr 	TOKWriteByte 				; this is in the range 0-7
.b5c9	e8		inx				inx 								; consume both
.b5ca	e8		inx				inx
.b5cb	80 96		bra $b563			bra 	_TKTokeniseLoop
.b5cd	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5cf	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b5d2	60		rts				rts
.b5d3					_TKTokeniseIdentifier:
.b5d3	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5d6	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5d9					_TKCheckLoop:
.b5d9	e8		inx				inx 								; look at next, we know first is identifier.
.b5da	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5dd	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5df	f0 f8		beq $b5d9			beq 	_TKCheckLoop
.b5e1	c9 30		cmp #$30			cmp	 	#"0"
.b5e3	90 0c		bcc $b5f1			bcc 	_TKEndIdentifier
.b5e5	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5e7	90 f0		bcc $b5d9			bcc 	_TKCheckLoop
.b5e9	c9 41		cmp #$41			cmp	 	#"A"
.b5eb	90 04		bcc $b5f1			bcc 	_TKEndIdentifier
.b5ed	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b5ef	90 e8		bcc $b5d9			bcc 	_TKCheckLoop
.b5f1					_TKEndIdentifier:
.b5f1	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b5f4	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b5f6	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b5f8	f0 06		beq $b600			beq 	_TKHasTypeCharacter
.b5fa	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b5fc	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b5fe	d0 07		bne $b607			bne 	_TKNoTypeCharacter
.b600					_TKHasTypeCharacter:
.b600	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b603	e8		inx				inx 								; read next
.b604	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b607					_TKNoTypeCharacter:
.b607	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b609	d0 09		bne $b614			bne 	_TKNoArray
.b60b	e8		inx				inx 								; skip the (
.b60c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b60f	09 04		ora #$04			ora 	#$04
.b611	8d 84 04	sta $0484			sta 	identTypeByte
.b614					_TKNoArray:
.b614	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b617	20 b1 b6	jsr $b6b1			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.b61a	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b61c	a9 43		lda #$43			lda 	#(KeywordSet0) & $FF
.b61e	20 e5 b4	jsr $b4e5			jsr 	TOKSearchTable
.b621	a2 00		ldx #$00			ldx 	#0
.b623	b0 1f		bcs $b644			bcs 	_TKFoundToken
.b625	a0 ba		ldy #$ba			ldy 	#(KeywordSet1) >> 8
.b627	a9 39		lda #$39			lda 	#(KeywordSet1) & $FF
.b629	20 e5 b4	jsr $b4e5			jsr 	TOKSearchTable
.b62c	a2 81		ldx #$81			ldx 	#$81
.b62e	b0 14		bcs $b644			bcs 	_TKFoundToken
.b630	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b632	a9 87		lda #$87			lda 	#(KeywordSet2) & $FF
.b634	20 e5 b4	jsr $b4e5			jsr 	TOKSearchTable
.b637	a2 82		ldx #$82			ldx 	#$82
.b639	b0 09		bcs $b644			bcs 	_TKFoundToken
.b63b	20 41 b7	jsr $b741			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.b63e	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b641	4c 63 b5	jmp $b563			jmp 	_TKTokeniseLoop 			; and go round again.
.b644					_TKFoundToken:
.b644	48		pha				pha 								; save token
.b645	8a		txa				txa 								; shift in X, is there one ?
.b646	f0 03		beq $b64b			beq 	_TKNoTShift
.b648	20 35 b7	jsr $b735			jsr 	TOKWriteByte 				; if so, write it out
.b64b					_TKNoTShift:
.b64b	68		pla				pla 								; restore and write token
.b64c	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b64f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b652	4c 63 b5	jmp $b563			jmp 	_TKTokeniseLoop 			; and go round again.
.b655					TOKTokenString:
.b655	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b657	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b65a	e8		inx				inx									; start of quoted string.
.b65b	da		phx				phx 								; push start of string on top
.b65c	ca		dex				dex
.b65d					_TSFindEnd:
.b65d	e8		inx				inx
.b65e	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b661	f0 04		beq $b667			beq 	_TSEndOfString
.b663	c9 22		cmp #$22			cmp 	#'"'
.b665	d0 f6		bne $b65d			bne 	_TSFindEnd
.b667					_TSEndOfString:
.b667	7a		ply				ply  								; so now Y is first character, X is character after end.
.b668	48		pha				pha 								; save terminating character
.b669	20 71 b6	jsr $b671			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.b66c	68		pla				pla 								; terminating character
.b66d	f0 01		beq $b670			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b66f	e8		inx				inx
.b670					_TSNotQuote:
.b670	60		rts				rts
.b671					TOKWriteBlockXY:
.b671	86 36		stx $36				stx 	zTemp0 						; write end character
.b673	98		tya				tya
.b674	49 ff		eor #$ff			eor 	#$FF
.b676	38		sec				sec
.b677	65 36		adc $36				adc 	zTemp0
.b679	1a		inc a				inc 	a 							; one extra for NULL
.b67a	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b67d					_TOBlockLoop:
.b67d	c4 36		cpy $36				cpy 	zTemp0
.b67f	f0 09		beq $b68a			beq 	_TOBlockExit
.b681	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b684	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b687	c8		iny				iny
.b688	80 f3		bra $b67d			bra 	_TOBlockLoop
.b68a					_TOBlockExit:
.b68a	a9 00		lda #$00			lda 	#0
.b68c	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b68f	60		rts				rts
.b690					TOKHexConstant:
.b690	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b692	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b695	e8		inx				inx									; start of quoted string.
.b696	da		phx				phx 								; push start of constant on top
.b697	ca		dex				dex
.b698					_THFindLoop:
.b698	e8		inx				inx
.b699	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b69c	c9 30		cmp #$30			cmp 	#"0"
.b69e	90 0c		bcc $b6ac			bcc 	_THFoundEnd
.b6a0	c9 3a		cmp #$3a			cmp 	#"9"+1
.b6a2	90 f4		bcc $b698			bcc 	_THFindLoop
.b6a4	c9 41		cmp #$41			cmp 	#"A"
.b6a6	90 04		bcc $b6ac			bcc 	_THFoundEnd
.b6a8	c9 47		cmp #$47			cmp 	#"F"+1
.b6aa	90 ec		bcc $b698			bcc 	_THFindLoop
.b6ac					_THFoundEnd:
.b6ac	7a		ply				ply 								; restore start
.b6ad	20 71 b6	jsr $b671			jsr 	TOKWriteBlockXY 			; output the block
.b6b0	60		rts				rts
.b6b1					TOKCalculateHash:
.b6b1	da		phx				phx
.b6b2	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6b5	a9 00		lda #$00			lda 	#0
.b6b7					_TCHLoop:
.b6b7	18		clc				clc
.b6b8	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6bb	e8		inx				inx
.b6bc	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6bf	d0 f6		bne $b6b7			bne 	_TCHLoop
.b6c1	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6c4	fa		plx				plx
.b6c5	60		rts				rts
.b6c6					LCLFixLineBufferCase:
.b6c6	a2 00		ldx #$00			ldx 	#0
.b6c8					_FLBCLoop:
.b6c8	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6cb	f0 22		beq $b6ef			beq 	_FLBCExit 					; end of string.
.b6cd	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6cf	f0 11		beq $b6e2			beq 	_FLBCInQuotes
.b6d1	e8		inx				inx
.b6d2	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6d4	90 f2		bcc $b6c8			bcc 	_FLBCLoop
.b6d6	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6d8	b0 ee		bcs $b6c8			bcs 	_FLBCLoop
.b6da	38		sec				sec 								; make U/C
.b6db	e9 20		sbc #$20			sbc 	#32
.b6dd	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6e0	80 e6		bra $b6c8			bra 	_FLBCLoop
.b6e2					_FLBCInQuotes:
.b6e2	e8		inx				inx 								; advance
.b6e3	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6e6	f0 07		beq $b6ef			beq 	_FLBCExit 					; exit on EOS
.b6e8	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6ea	d0 f6		bne $b6e2			bne 	_FLBCInQuotes
.b6ec	e8		inx				inx 								; skip over it
.b6ed	80 d9		bra $b6c8			bra 	_FLBCLoop
.b6ef					_FLBCExit:
.b6ef	60		rts				rts
.b6f0					TOKExtractLineNumber:
.b6f0	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b6f3	48		pha				pha
.b6f4	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b6f7	48		pha				pha
.b6f8	20 2e b7	jsr $b72e			jsr 	_LCLNTimes2 				; line # x 4
.b6fb	20 2e b7	jsr $b72e			jsr 	_LCLNTimes2 				; line # x 2
.b6fe	18		clc				clc 								; add stacked value
.b6ff	68		pla				pla
.b700	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b703	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b706	68		pla				pla
.b707	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b70a	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b70d	20 2e b7	jsr $b72e			jsr 	_LCLNTimes2 				; line # x 10
.b710	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b713	e8		inx				inx
.b714	29 0f		and #$0f			and 	#15 						; add to line #
.b716	18		clc				clc
.b717	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b71a	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b71d	90 03		bcc $b722			bcc 	_TLENNoCarry
.b71f	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b722					_TLENNoCarry:
.b722	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b725	c9 30		cmp #$30			cmp 	#'0'
.b727	90 04		bcc $b72d			bcc 	_TLENExit
.b729	c9 3a		cmp #$3a			cmp 	#'9'+1
.b72b	90 c3		bcc $b6f0			bcc 	TOKExtractLineNumber
.b72d					_TLENExit:
.b72d	60		rts				rts
.b72e					_LCLNTimes2:
.b72e	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b731	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b734	60		rts				rts
.b735					TOKWriteByte:
.b735	da		phx				phx
.b736	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b739	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b73c	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b73f	fa		plx				plx
.b740	60		rts				rts
.b741					TOKCheckCreateVariableRecord:
.b741	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b743	85 36		sta $36				sta 	0+zTemp0
.b745	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b747	85 37		sta $37				sta 	1+zTemp0
.b749					_CCVSearch:
.b749	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b74b	f0 2c		beq $b779			beq 	_CCVFail
.b74d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b74f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b751	cd 83 04	cmp $0483			cmp 	identHash
.b754	d0 16		bne $b76c			bne 	_CCVNext
.b756	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b758	ae 80 04	ldx $0480			ldx 	identStart
.b75b					_CCVCompare:
.b75b	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b75e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b760	e8		inx				inx 								; advance pointers
.b761	c8		iny				iny
.b762	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b763	d0 07		bne $b76c			bne 	_CCVNext  					; didn't match go to next.
.b765	90 f4		bcc $b75b			bcc 	_CCVCompare 				; not finished yet.
.b767	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b76a	f0 41		beq $b7ad			beq 	_CCVFound 					; yes, we were successful
.b76c					_CCVNext:
.b76c	18		clc				clc
.b76d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b76f	65 36		adc $36				adc 	zTemp0
.b771	85 36		sta $36				sta 	zTemp0
.b773	90 d4		bcc $b749			bcc 	_CCVSearch
.b775	e6 37		inc $37				inc 	zTemp0+1
.b777	80 d0		bra $b749			bra 	_CCVSearch
.b779					_CCVFail:
.b779	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b77b	ad 83 04	lda $0483			lda 	identHash
.b77e	91 36		sta ($36),y			sta 	(zTemp0),y
.b780	c8		iny				iny 								; offset 2 is the type byte
.b781	ad 84 04	lda $0484			lda 	identTypeByte
.b784	91 36		sta ($36),y			sta 	(zTemp0),y
.b786	c8		iny				iny
.b787					_CCVData:
.b787	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b789	91 36		sta ($36),y			sta 	(zTemp0),y
.b78b	c8		iny				iny
.b78c	c0 08		cpy #$08			cpy 	#8
.b78e	90 f7		bcc $b787			bcc 	_CCVData
.b790	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b793					_CCVCopyName:
.b793	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b796	91 36		sta ($36),y			sta 	(zTemp0),y
.b798	e8		inx				inx
.b799	c8		iny				iny
.b79a	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b79d	d0 f4		bne $b793			bne 	_CCVCopyName
.b79f	98		tya				tya 								; patch offset
.b7a0	92 36		sta ($36)			sta 	(zTemp0)
.b7a2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b7a4	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a6	88		dey				dey
.b7a7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7a9	09 80		ora #$80			ora 	#$80
.b7ab	91 36		sta ($36),y			sta 	(zTemp0),y
.b7ad					_CCVFound:
.b7ad	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7af	38		sec				sec
.b7b0	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7b2	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7b4	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b7b7	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7b9	20 35 b7	jsr $b735			jsr 	TOKWriteByte
.b7bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1					soundIntegrated=1
.b7bd					SNDQueueRequest:
>b7bd	db						.byte 	$DB 						; causes a break in the emulator
.b7be					SNDSilenceChannel:
.b7be	60		rts				rts
.b7bf					SNDCommand:
.b7bf	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.b7c1	f0 1c		beq $b7df			beq 	_SNDInitialise
.b7c3	90 29		bcc $b7ee			bcc 	_SNDExit
.b7c5	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.b7c7	f0 16		beq $b7df			beq 	_SNDSilence
.b7c9	b0 23		bcs $b7ee			bcs 	_SNDExit
.b7cb	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.b7cd	b0 09		bcs $b7d8			bcs 	_SNDQueryPlay
.b7cf	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.b7d1	b0 1b		bcs $b7ee			bcs 	_SNDExit
.b7d3	20 bd b7	jsr $b7bd			jsr 	SNDQueueRequest
.b7d6	80 16		bra $b7ee			bra 	_SNDExit
.b7d8					_SNDQueryPlay:
.b7d8	29 03		and #$03			and 	#3 							; get channel #
.b7da	bd fb 07	lda $07fb,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.b7dd	80 0f		bra $b7ee			bra 	_SNDExit
.b7df					_SNDInitialise:
.b7df					_SNDSilence:
.b7df	9c f2 06	stz $06f2			stz 	SNDLength 					; empty the queue.
.b7e2	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.b7e4					_SNDSilenceLoop:
.b7e4	48		pha				pha
.b7e5	20 be b7	jsr $b7be			jsr 	SNDSilenceChannel
.b7e8	68		pla				pla
.b7e9	3a		dec a				dec 	a
.b7ea	c9 2f		cmp #$2f			cmp 	#$2F
.b7ec	d0 f6		bne $b7e4			bne 	_SNDSilenceLoop
.b7ee					_SNDExit:
.b7ee	60		rts				rts
=32					SNDQueueSize = 32 							; number of queue entries
.06f2					SNDLength:
>06f2							.fill 	1
.06f3					SNDQueue:
>06f3							.fill 	SNDQueueSize * 8
.07f3					SNDPitchLow:
>07f3							.fill 	4
.07f7					SNDPitchHigh:
>07f7							.fill 	4
.07fb					SNDTimeLeft:
>07fb							.fill 	4
.07ff					SNDAdjustLow:
>07ff							.fill 	4
.0803					SNDAdjustHigh:
>0803							.fill 	4

;******  Return to file: _basic.asm


;******  End of listing
