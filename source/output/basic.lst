
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$3000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Nov 21 10:14:03 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0
=$e000					 MONITOR_ADDRESS=$E000
=$f000					 LOCKOUT_ADDRESS=$F000
=$38000					 BASIC_ADDRESS=$38000
=$3000					 SOURCE_ADDRESS=$3000
=$30000					 SPRITE_ADDRESS=$30000

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_PLAYINGLPAREN                    = $96; $96 PLAYING(
=$97					KWD_RANDOMLPAREN                     = $97; $97 RANDOM(
=$98					KWD_RIGHTDOLLARLPAREN                = $98; $98 RIGHT$(
=$99					KWD_RNDLPAREN                        = $99; $99 RND(
=$9a					KWD_SGNLPAREN                        = $9a; $9a SGN(
=$9b					KWD_SPCLPAREN                        = $9b; $9b SPC(
=$9c					KWD_STRDOLLARLPAREN                  = $9c; $9c STR$(
=$9d					KWD_TIMERLPAREN                      = $9d; $9d TIMER(
=$9e					KWD_TRUE                             = $9e; $9e TRUE
=$9f					KWD_VALLPAREN                        = $9f; $9f VAL(
=$a0					KWD_FOR                              = $a0; $a0 FOR
=$a1					KWD_IF                               = $a1; $a1 IF
=$a2					KWD_PROC                             = $a2; $a2 PROC
=$a3					KWD_REPEAT                           = $a3; $a3 REPEAT
=$a4					KWD_WHILE                            = $a4; $a4 WHILE
=$a5					KWD_ENDIF                            = $a5; $a5 ENDIF
=$a6					KWD_ENDPROC                          = $a6; $a6 ENDPROC
=$a7					KWD_NEXT                             = $a7; $a7 NEXT
=$a8					KWD_THEN                             = $a8; $a8 THEN
=$a9					KWD_UNTIL                            = $a9; $a9 UNTIL
=$aa					KWD_WEND                             = $aa; $aa WEND
=$ab					KWD_BY                               = $ab; $ab BY
=$ac					KWD_CALL                             = $ac; $ac CALL
=$ad					KWD_CIRCLE                           = $ad; $ad CIRCLE
=$ae					KWD_CLEAR                            = $ae; $ae CLEAR
=$af					KWD_CLS                              = $af; $af CLS
=$b0					KWD_COLOR                            = $b0; $b0 COLOR
=$b1					KWD_COLOUR                           = $b1; $b1 COLOUR
=$b2					KWD_DATA                             = $b2; $b2 DATA
=$b3					KWD_DIM                              = $b3; $b3 DIM
=$b4					KWD_DOWNTO                           = $b4; $b4 DOWNTO
=$b5					KWD_ELSE                             = $b5; $b5 ELSE
=$b6					KWD_FROM                             = $b6; $b6 FROM
=$b7					KWD_GFX                              = $b7; $b7 GFX
=$b8					KWD_GOSUB                            = $b8; $b8 GOSUB
=$b9					KWD_GOTO                             = $b9; $b9 GOTO
=$ba					KWD_HERE                             = $ba; $ba HERE
=$bb					KWD_IMAGE                            = $bb; $bb IMAGE
=$bc					KWD_LET                              = $bc; $bc LET
=$bd					KWD_LINE                             = $bd; $bd LINE
=$be					KWD_LOCAL                            = $be; $be LOCAL
=$bf					KWD_OFF                              = $bf; $bf OFF
=$c0					KWD_ON                               = $c0; $c0 ON
=$c1					KWD_OUTLINE                          = $c1; $c1 OUTLINE
=$c2					KWD_PALETTE                          = $c2; $c2 PALETTE
=$c3					KWD_PLOT                             = $c3; $c3 PLOT
=$c4					KWD_PRINT                            = $c4; $c4 PRINT
=$c5					KWD_READ                             = $c5; $c5 READ
=$c6					KWD_RECT                             = $c6; $c6 RECT
=$c7					KWD_REM                              = $c7; $c7 REM
=$c8					KWD_RETURN                           = $c8; $c8 RETURN
=$c9					KWD_SOLID                            = $c9; $c9 SOLID
=$ca					KWD_SOUND                            = $ca; $ca SOUND
=$cb					KWD_SPRITE                           = $cb; $cb SPRITE
=$cc					KWD_TEXT                             = $cc; $cc TEXT
=$cd					KWD_TO                               = $cd; $cd TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$a0					KWC_FIRST_STRUCTURE = $a0
=$a5					KWC_FIRST_STRUCTURE_DEC = $a5
=$aa					KWC_LAST_STRUCTURE = $aa
=$83					KWC_FIRST_UNARY = $83
=$9f					KWC_LAST_UNARY = $9f

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 12 aa	jsr $aa12			jsr 	EXTInitialise 				; hardware initialise
.8006	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8008	a9 22		lda #$22			lda 	#(Prompt & $FF)
.800a	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.800d	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.800f	aa		tax				tax
.8010	a8		tay				tay
.8011	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.8014	a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8016	20 29 b8	jsr $b829			jsr 	SNDCommand
.8019	20 4e 88	jsr $884e			jsr 	NewProgram 					; erase current program
.801c	20 e3 82	jsr $82e3			jsr 	BackloadProgram
.801f	4c 53 83	jmp $8353			jmp 	WarmStart
>8022	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>802a	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>803a	53 49 43 20 2a 2a 2a 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8043	42 75 69 6c 74 20 4d 6f			.text "Built Monday 21-Nov-2022. Build 3407."
>804b	6e 64 61 79 20 32 31 2d 4e 6f 76 2d 32 30 32 32
>805b	2e 20 42 75 69 6c 64 20 33 34 30 37 2e

;******  Return to file: ./common/aa.system/00start.asm

>8068	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.806b					AssembleGroup1:
.806b	a9 ff		lda #$ff			lda 	#$FF
.806d	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8070	80 02		bra $8074			bra 	AsmGroup12
.8072					AssembleGroup2:
.8072	a9 00		lda #$00			lda 	#$00
.8074					AsmGroup12:
.8074	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8077	68		pla				pla 								; pop the return address to access the information following.
.8078	fa		plx				plx
.8079	20 02 81	jsr $8102			jsr 	AccessParameters 			; get opcode and save as base
.807c	8d a4 04	sta $04a4			sta 	BaseOpcode
.807f	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8082	d0 08		bne $808c			bne 	_AG12HaveMask
.8084	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8086	20 0a 81	jsr $810a			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8089	8d a5 04	sta $04a5			sta 	ModeMask
.808c					_AG12HaveMask:
.808c	20 45 82	jsr $8245			jsr 	TypeAndCalculateOperand 	; get zero page type
.808f	da		phx				phx 								; save found address mode
.8090	20 6e 81	jsr $816e			jsr 	AssembleModeX
.8093	fa		plx				plx  								; restore address mode
.8094	b0 0b		bcs $80a1			bcs 	_AG12Exit
.8096	20 a2 80	jsr $80a2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8099	20 6e 81	jsr $816e			jsr 	AssembleModeX
.809c	b0 03		bcs $80a1			bcs 	_AG12Exit
.809e	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80a1					_AG12Exit:
.80a1	60		rts				rts
.80a2					PromoteToAbsolute:
.80a2	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80a4	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80a6	f0 19		beq $80c1			beq 	_PTADo
.80a8	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80aa	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80ac	f0 13		beq $80c1			beq 	_PTADo
.80ae	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80b0	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80b2	f0 0d		beq $80c1			beq 	_PTADo
.80b4	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80b6	e0 d1		cpx #$d1			cpx 	#AM_IND
.80b8	f0 07		beq $80c1			beq 	_PTADo
.80ba	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80bc	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80be	f0 01		beq $80c1			beq 	_PTADo
.80c0	60		rts				rts
.80c1					_PTADo:
.80c1	aa		tax				tax
.80c2	60		rts				rts
.80c3					AssembleGroup3:
.80c3	68		pla				pla 								; get parameters, which is just the opcode.
.80c4	fa		plx				plx
.80c5	20 02 81	jsr $8102			jsr 	AccessParameters 			; get and output opcode
.80c8	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.80cb	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get a 16 bit operand
.80ce	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80d1	38		sec				sec
.80d2	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80d5	48		pha				pha 								; LSB in A
.80d6	ad 10 04	lda $0410			lda 	NSMantissa1
.80d9	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80dc	aa		tax				tax 								; MSB in X
.80dd	68		pla				pla
.80de	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80df	69 7f		adc #$7f			adc 	#$7F
.80e1	90 01		bcc $80e4			bcc 	_AG3NoCarry
.80e3	e8		inx				inx
.80e4					_AG3NoCarry:
.80e4	38		sec				sec 								; fix back and write out anyways.
.80e5	e9 80		sbc #$80			sbc 	#$80
.80e7	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.80ea	e0 00		cpx #$00			cpx 	#0 							; was it in range
.80ec	f0 0a		beq $80f8			beq 	_AG3Exit
.80ee	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.80f1	29 01		and #$01			and 	#1
.80f3	f0 03		beq $80f8			beq 	_AG3Exit
.80f5	4c a3 9f	jmp $9fa3			jmp 	RangeError 					; no, branch is out of range
.80f8					_AG3Exit:
.80f8	60		rts				rts
.80f9					AssembleGroup4:
.80f9	68		pla				pla 								; pop address
.80fa	fa		plx				plx
.80fb	20 02 81	jsr $8102			jsr 	AccessParameters 			; access and get first
.80fe	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte 			; output it.
.8101	60		rts				rts
.8102					AccessParameters:
.8102	8d a1 04	sta $04a1			sta 	ParamStart
.8105	8e a2 04	stx $04a2			stx 	ParamStart+1
.8108	a9 01		lda #$01			lda 	#1
.810a					GetParameter:
.810a	5a		phy				phy
.810b	a8		tay				tay
.810c	ad a1 04	lda $04a1			lda 	ParamStart
.810f	85 36		sta $36				sta 	zTemp0
.8111	ad a2 04	lda $04a2			lda 	ParamStart+1
.8114	85 37		sta $37				sta 	zTemp0+1
.8116	b1 36		lda ($36),y			lda 	(zTemp0),y
.8118	7a		ply				ply
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.811a					AssemblerWriteByte:
.811a	48		pha			pha
.811b	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.811e	29 02		and #$02		and 	#2
.8120	f0 1b		beq $813d		beq 	_AWBNoPrint
.8122	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8125	20 58 81	jsr $8158		jsr 	PrintHex
.8128	ad 9e 04	lda $049e		lda		AssemblerAddress
.812b	20 58 81	jsr $8158		jsr 	PrintHex
.812e	a9 20		lda #$20		lda 	#' '
.8130	20 9e a7	jsr $a79e		jsr 	EXTPrintCharacter
.8133	68		pla			pla 									; print byte
.8134	48		pha			pha
.8135	20 58 81	jsr $8158		jsr 	PrintHex
.8138	a9 0d		lda #$0d		lda 	#13
.813a	20 9e a7	jsr $a79e		jsr 	EXTPrintCharacter
.813d					_AWBNoPrint:
.813d	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8140	85 36		sta $36			sta 	zTemp0
.8142	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8145	f0 0e		beq $8155		beq 	_AWBRange
.8147	85 37		sta $37			sta 	zTemp0+1
.8149	68		pla			pla 									; write byte out
.814a	92 36		sta ($36)		sta 	(zTemp0)
.814c	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.814f	d0 03		bne $8154		bne 	_AWBNoCarry
.8151	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8154					_AWBNoCarry:
.8154	60		rts			rts
.8155					_AWBRange:
.8155	4c a3 9f	jmp $9fa3		jmp 	RangeError
.8158					PrintHex:
.8158	48		pha				pha
.8159	4a		lsr a				lsr 	a
.815a	4a		lsr a				lsr 	a
.815b	4a		lsr a				lsr 	a
.815c	4a		lsr a				lsr 	a
.815d	20 61 81	jsr $8161			jsr 	_PrintNibble
.8160	68		pla				pla
.8161					_PrintNibble:
.8161	29 0f		and #$0f			and 	#15
.8163	c9 0a		cmp #$0a			cmp 	#10
.8165	90 02		bcc $8169			bcc 	_NoShift
.8167	69 06		adc #$06			adc 	#6
.8169					_NoShift:
.8169	69 30		adc #$30			adc 	#48
.816b	4c 9e a7	jmp $a79e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.816e					AssembleModeX:
.816e	5a		phy				phy
.816f	ad a3 04	lda $04a3			lda 	IsGroup1
.8172	f0 17		beq $818b			beq 	_AMXGroup2
.8174	8a		txa				txa 							; is it in group # 1
.8175	29 40		and #$40			and 	#AM_ISG1
.8177	f0 50		beq $81c9			beq 	_AMXFail 				; no, give up.
.8179	8a		txa				txa 							; get back.
.817a	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.817c	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.817e	d0 22		bne $81a2			bne 	_AMXHaveInfo
.8180	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8183	c9 81		cmp #$81			cmp 	#$81
.8185	f0 42		beq $81c9			beq 	_AMXFail
.8187	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8189	80 17		bra $81a2			bra 	_AMXHaveInfo 			; odd design decision there.
.818b					_AMXGroup2:
.818b	8a		txa				txa 							; is it in group 2 ?
.818c	29 20		and #$20			and 	#AM_ISG2
.818e	f0 39		beq $81c9			beq 	_AMXFail 				; no, give up.
.8190	8a		txa				txa 							; get the offset into Y
.8191	29 1f		and #$1f			and 	#$1F
.8193	4a		lsr a				lsr 	a 						; make it 0-7.
.8194	4a		lsr a				lsr  	a
.8195	a8		tay				tay
.8196	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8199					_AMXCheckOkay:
.8199	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.819a	88		dey				dey
.819b	10 fc		bpl $8199			bpl 	_AMXCheckOkay
.819d	90 2a		bcc $81c9			bcc 	_AMXFail 				; not allowed.
.819f	8a		txa				txa  							; get mask back
.81a0	29 1f		and #$1f			and 	#$1F
.81a2					_AMXHaveInfo:
.81a2	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81a4	10 05		bpl $81ab			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81a6	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81a9	d0 1e		bne $81c9			bne 	_AMXFail
.81ab					_AMXAnySize:
.81ab	18		clc				clc 							; add offset to the base opcode
.81ac	6d a4 04	adc $04a4			adc 	BaseOpcode
.81af					_AMXOutputCode:
.81af	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte 		; write the opcode out.
.81b2	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81b4	f0 10		beq $81c6			beq 	_AMXExit
.81b6	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81b9	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.81bc	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81be	30 06		bmi $81c6			bmi 	_AMXExit
.81c0	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81c3	20 1a 81	jsr $811a			jsr 	AssemblerWriteByte
.81c6					_AMXExit:
.81c6	7a		ply				ply
.81c7	38		sec				sec
.81c8	60		rts				rts
.81c9					_AMXFail:
.81c9	a0 00		ldy #$00			ldy 	#0
.81cb					_AMXCheckOddities:
.81cb	8a		txa				txa
.81cc	d9 f4 81	cmp $81f4,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81cf	d0 16		bne $81e7			bne 	_AMXCONext
.81d1	b9 f2 81	lda $81f2,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81d4	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81d7	d0 0e		bne $81e7			bne 	_AMXCONext
.81d9	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81db	10 05		bpl $81e2			bpl 	_AMXCONotZero
.81dd	ad 10 04	lda $0410			lda 	NSMantissa1
.81e0	d0 05		bne $81e7			bne 	_AMXCONext
.81e2					_AMXCONotZero:
.81e2	b9 f3 81	lda $81f3,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81e5	80 c8		bra $81af			bra 	_AMXOutputCode 			; and assemble it
.81e7					_AMXCONext:
.81e7	c8		iny				iny
.81e8	c8		iny				iny
.81e9	c8		iny				iny
.81ea	b9 f2 81	lda $81f2,y			lda 	ExtraOpcode+0,y 		; end of table
.81ed	d0 dc		bne $81cb			bne 	_AMXCheckOddities
.81ef					_AMXCOFail:
.81ef	7a		ply				ply
.81f0	18		clc				clc
.81f1	60		rts				rts
.81f2					ExtraOpcode:
>81f2	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>81f5	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>81f8	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>81fb	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>81fe	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8201	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8204	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8207	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>820a	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>820d	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8210	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8211					LabelHere:
.8211	c8		iny				iny 								; skip .
.8212	a2 00		ldx #$00			ldx 	#0 							; get a term
.8214	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; get a term
.8217	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.821a	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.821c	d0 24		bne $8242			bne 	_ALType
.821e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8221	85 36		sta $36				sta 	zTemp0
.8223	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8226	85 37		sta $37				sta 	zTemp0+1
.8228	5a		phy				phy 								; copy address in.
.8229	a0 01		ldy #$01			ldy 	#1
.822b	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.822e	92 36		sta ($36)			sta 	(zTemp0)
.8230	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8233	91 36		sta ($36),y			sta 	(zTemp0),y
.8235	c8		iny				iny
.8236	a9 00		lda #$00			lda 	#0
.8238	91 36		sta ($36),y			sta 	(zTemp0),y
.823a	c8		iny				iny
.823b	91 36		sta ($36),y			sta 	(zTemp0),y
.823d	c8		iny				iny
.823e	91 36		sta ($36),y			sta 	(zTemp0),y
.8240	7a		ply				ply
.8241	60		rts				rts
.8242					_ALType:
.8242	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8245					TypeAndCalculateOperand:
.8245	b1 30		lda ($30),y			lda 	(codePtr),y
.8247	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8249	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.824b	f0 5b		beq $82a8			beq 	_TACOExit
.824d	c9 80		cmp #$80			cmp 	#KWC_EOL
.824f	f0 57		beq $82a8			beq 	_TACOExit
.8251	c8		iny				iny
.8252	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8254	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8256	f0 51		beq $82a9			beq 	CalculateOperand
.8258	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.825a	f0 1f		beq $827b			beq 	_TACOIndirect
.825c	88		dey				dey 								; undo get of first character
.825d	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get operand
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8264	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8266	d0 40		bne $82a8			bne 	_TACOExit
.8268	c8		iny				iny
.8269	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.826c	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.826e	c9 58		cmp #$58			cmp 	#'X'
.8270	f0 36		beq $82a8			beq 	_TACOExit
.8272	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8274	c9 59		cmp #$59			cmp 	#'Y'
.8276	f0 30		beq $82a8			beq 	_TACOExit
.8278					_TACOSyntax:
.8278	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.827b					_TACOIndirect:
.827b	20 a9 82	jsr $82a9			jsr 	CalculateOperand 			; get the operand
.827e	b1 30		lda ($30),y			lda 	(codePtr),y
.8280	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8282	f0 17		beq $829b			beq 	_TACOIndX
.8284	20 38 8d	jsr $8d38			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8287	b1 30		lda ($30),y			lda 	(codePtr),y
.8289	a2 d1		ldx #$d1			ldx 	#AM_IND
.828b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.828d	d0 19		bne $82a8			bne 	_TACOExit
.828f	c8		iny				iny
.8290	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8293	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8295	d0 e1		bne $8278			bne 	_TACOSyntax
.8297	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8299	80 0d		bra $82a8			bra 	_TACOExit
.829b					_TACOIndX:
.829b	c8		iny				iny
.829c	20 b3 82	jsr $82b3			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.829f	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82a1	d0 d5		bne $8278			bne 	_TACOSyntax
.82a3	20 38 8d	jsr $8d38			jsr 	CheckRightBracket			; check )
.82a6	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82a8					_TACOExit:
.82a8	60		rts				rts
.82a9					CalculateOperand:
.82a9	48		pha				pha
.82aa	da		phx				phx
.82ab	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82ad	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.82b0	fa		plx				plx
.82b1	68		pla				pla
.82b2	60		rts				rts
.82b3					TACOCheckXY:
.82b3	b1 30		lda ($30),y			lda 	(codePtr),y
.82b5	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82b7	c9 40		cmp #$40			cmp 	#$40
.82b9	d0 21		bne $82dc			bne 	_TCXYFail
.82bb	b1 30		lda ($30),y			lda 	(codePtr),y
.82bd	18		clc				clc
.82be	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82c0	85 37		sta $37				sta 	zTemp0+1
.82c2	c8		iny				iny
.82c3	b1 30		lda ($30),y			lda 	(codePtr),y
.82c5	c8		iny				iny
.82c6	85 36		sta $36				sta 	zTemp0
.82c8	5a		phy				phy 								; save position
.82c9	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.82cd	d0 0c		bne $82db			bne 	_TCXYPopFail
.82cf	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.82d3	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82d5	f0 08		beq $82df			beq 	_TCXYFound
.82d7	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82d9	f0 04		beq $82df			beq 	_TCXYFound
.82db					_TCXYPopFail:
.82db	7a		ply				ply
.82dc					_TCXYFail:
.82dc	a9 00		lda #$00			lda 	#0
.82de	60		rts				rts
.82df					_TCXYFound:
.82df	7a		ply				ply 								; restore position
.82e0	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82e3					BackloadProgram:
.82e3	a9 00		lda #$00			lda 	#((SOURCE_ADDRESS) & $FF)
.82e5	8d 2b 06	sta $062b			sta 	0+BackLoadPointer
.82e8	a9 30		lda #$30			lda 	#((SOURCE_ADDRESS) >> 8)
.82ea	8d 2c 06	sta $062c			sta 	1+BackLoadPointer
.82ed					_BPLoop:
.82ed	a2 ff		ldx #$ff			ldx 	#$FF
.82ef	20 17 83	jsr $8317			jsr 	BLReadByte
.82f2	30 1f		bmi $8313			bmi 	_BPExit
.82f4					_BPCopy:
.82f4	e8		inx				inx  								; copy byte in
.82f5	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.82f8	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.82fb	20 17 83	jsr $8317			jsr 	BLReadByte 					; read next byte
.82fe	30 0a		bmi $830a			bmi 	_BPEndLine 					; -ve = EOL
.8300	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8302	d0 02		bne $8306			bne 	_BPNotTab
.8304	a9 20		lda #$20			lda 	#' '
.8306					_BPNotTab:
.8306	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8308	b0 ea		bcs $82f4			bcs 	_BPCopy
.830a					_BPEndLine:
.830a	20 a8 b5	jsr $b5a8			jsr 	TokeniseLine 				; tokenise the line.
.830d	38		sec				sec 								; append not insert
.830e	20 79 a1	jsr $a179			jsr 	MemoryInsertLine 			; append to current program
.8311	80 da		bra $82ed			bra 	_BPLoop
.8313					_BPExit:
.8313	20 ec 83	jsr $83ec			jsr 	ClearCommand 				; clear variables etc.
.8316	60		rts				rts
.8317					BLReadByte:
.8317	ad 2b 06	lda $062b			lda 	BackLoadPointer
.831a	85 36		sta $36				sta 	zTemp0
.831c	ad 2c 06	lda $062c			lda 	BackLoadPointer+1
.831f	85 37		sta $37				sta 	zTemp0+1
.8321	b2 36		lda ($36)			lda 	(zTemp0)
.8323	ee 2b 06	inc $062b			inc 	BackLoadPointer
.8326	d0 03		bne $832b			bne 	_BLNoCarry
.8328	ee 2c 06	inc $062c			inc 	BackLoadPointer+1
.832b					_BLNoCarry:
.832b	c9 00		cmp #$00			cmp 	#0
.832d	60		rts				rts
.062b					BackLoadPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.832e					EditProgramCode:
.832e	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.8331	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.8334	20 21 a2	jsr $a221			jsr 	MemorySearch
.8337	90 05		bcc $833e			bcc 	_EPCNoDelete 				; reached the end don't delete
.8339	d0 03		bne $833e			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.833b	20 42 a1	jsr $a142			jsr 	MemoryDeleteLine 			; delete the line
.833e					_EPCNoDelete:
.833e	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.8341	c9 80		cmp #$80			cmp 	#KWC_EOL
.8343	f0 0d		beq $8352			beq 	_EPCNoInsert
.8345	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8348	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.834b	20 21 a2	jsr $a221			jsr 	MemorySearch
.834e	18		clc				clc 								; insert at this point.
.834f	20 79 a1	jsr $a179			jsr 	MemoryInsertLine 			; insert the line
.8352					_EPCNoInsert:
.8352	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8353					WarmStart:
.8353	a2 ff		ldx #$ff			ldx 	#$FF
.8355	9a		txs				txs
.8356	20 2c a9	jsr $a92c			jsr 	EXTInputLine 				; get line to lineBuffer
.8359	20 a8 b5	jsr $b5a8			jsr 	TokeniseLine 				; tokenise the line
.835c	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.835f	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.8362	d0 17		bne $837b			bne 	_WSEditCode 				; if so,edit code.
.8364	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8367	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8369	85 30		sta $30				sta 	codePtr
.836b	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.836d	85 31		sta $31				sta 	codePtr+1
.836f	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.8372	c9 80		cmp #$80			cmp 	#KWC_EOL
.8374	f0 dd		beq $8353			beq 	WarmStart
.8376	20 ff 89	jsr $89ff			jsr 	RUNCodePointerLine 			; execute that line.
.8379	80 d8		bra $8353			bra 	WarmStart
.837b					_WSEditCode:
.837b	20 2e 83	jsr $832e			jsr 	EditProgramCode
.837e	20 ec 83	jsr $83ec			jsr 	ClearCommand
.8381	80 d0		bra $8353			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8383					AssembleCommand:
.8383	a2 00		ldx #$00			ldx 	#0
.8385	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; start address
.8388	ad 08 04	lda $0408			lda 	NSMantissa0
.838b	8d 9e 04	sta $049e			sta 	AssemblerAddress
.838e	ad 10 04	lda $0410			lda 	NSMantissa1
.8391	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8394	20 40 8d	jsr $8d40			jsr 	CheckComma
.8397	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; options
.839a	ad 08 04	lda $0408			lda 	NSMantissa0
.839d	8d a0 04	sta $04a0			sta 	AssemblerControl
.83a0	60		rts				rts
.83a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83a2					AssertCommand:
.83a2	a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.83a4	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; the assert test
.83a7	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; exit if result is non zero.
.83aa	d0 05		bne $83b1			bne 	_ACExit
.83ac	a9 0a		lda #$0a		lda	#10
.83ae	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.83b1					_ACExit:
.83b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83b2					CallCommand:
.83b2	a2 00		ldx #$00			ldx 	#0
.83b4	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.83b7					_CCClear
.83b7	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83b8	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.83bb	e0 04		cpx #$04			cpx 	#4
.83bd	d0 f8		bne $83b7			bne 	_CCClear
.83bf	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83c1					_CCCParam:
.83c1	b1 30		lda ($30),y			lda 	(codePtr),y
.83c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83c5	d0 09		bne $83d0			bne 	_CCCRun6502
.83c7	c8		iny				iny 								; skip comma
.83c8	e8		inx				inx	 								; next level
.83c9	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83cc	e0 03		cpx #$03			cpx 	#3
.83ce	90 f1		bcc $83c1			bcc 	_CCCParam 					; done all 3 ?
.83d0					_CCCRun6502:
.83d0	5a		phy				phy 								; save position
.83d1	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83d4	85 37		sta $37				sta 	zTemp0+1
.83d6	ad 08 04	lda $0408			lda 	NSMantissa0
.83d9	85 36		sta $36				sta 	zTemp0
.83db	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83de	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83e1	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83e4	20 e9 83	jsr $83e9			jsr 	_CCCZTemp0 					; call zTemp0
.83e7	7a		ply				ply 								; restore position and exit
.83e8	60		rts				rts
.83e9					_CCCZTemp0:
.83e9	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83ec					ClearCommand:
.83ec	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83ee	85 36		sta $36				sta 	0+zTemp0
.83f0	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83f2	85 37		sta $37				sta 	1+zTemp0
.83f4					_ClearZeroLoop:
.83f4	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83f6	f0 24		beq $841c			beq 	_ClearZeroEnd
.83f8	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.83fa	a9 00		lda #$00			lda 	#0
.83fc					_ClearOneVariable:
.83fc	91 36		sta ($36),y			sta 	(zTemp0),y
.83fe	c8		iny				iny
.83ff	c0 08		cpy #$08			cpy 	#8
.8401	d0 f9		bne $83fc			bne 	_ClearOneVariable
.8403	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8405	b1 36		lda ($36),y			lda 	(zTemp0),y
.8407	c9 18		cmp #$18			cmp 	#NSTProcedure
.8409	d0 04		bne $840f			bne 	_ClearNotProcedure
.840b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.840d	91 36		sta ($36),y			sta 	(zTemp0),y
.840f					_ClearNotProcedure:
.840f	18		clc				clc 								; go to the next variable
.8410	b2 36		lda ($36)			lda 	(zTemp0)
.8412	65 36		adc $36				adc 	zTemp0
.8414	85 36		sta $36				sta 	zTemp0
.8416	90 dc		bcc $83f4			bcc 	_ClearZeroLoop
.8418	e6 37		inc $37				inc 	zTemp0+1
.841a	80 d8		bra $83f4			bra 	_ClearZeroLoop
.841c					_ClearZeroEnd:
.841c	18		clc				clc
.841d	a5 36		lda $36				lda 	zTemp0
.841f	69 01		adc #$01			adc 	#1
.8421	8d 8c 04	sta $048c			sta 	lowMemPtr
.8424	a5 37		lda $37				lda 	zTemp0+1
.8426	69 00		adc #$00			adc 	#0
.8428	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.842b	20 c3 a6	jsr $a6c3			jsr 	StackReset
.842e	20 2d a7	jsr $a72d			jsr 	StringSystemInitialise
.8431	20 41 8c	jsr $8c41			jsr 	ProcedureScan
.8434	20 bb 89	jsr $89bb			jsr 	Command_Restore
.8437	9c 9e 04	stz $049e			stz 	AssemblerAddress
.843a	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.843d	9c a0 04	stz $04a0			stz 	AssemblerControl
.8440	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8443	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8444					ClearScreen:
.8444	5a		phy				phy
.8445	a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8447	20 9e a7	jsr $a79e			jsr 	EXTPrintCharacter
.844a	7a		ply				ply
.844b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.844c					Command_Data:
.844c	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.844e	a2 80		ldx #$80			ldx 	#KWC_EOL
.8450	20 93 8c	jsr $8c93			jsr 	ScanForward
.8453	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8454					DimCommand:
.8454	b1 30		lda ($30),y			lda 	(codePtr),y
.8456	29 c0		and #$c0			and 	#$C0
.8458	c9 40		cmp #$40			cmp 	#$40
.845a	d0 7a		bne $84d6			bne 	_DCSyntax
.845c	b1 30		lda ($30),y			lda 	(codePtr),y
.845e	18		clc				clc
.845f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8461	85 3f		sta $3f				sta 	zaTemp+1
.8463	c8		iny				iny
.8464	b1 30		lda ($30),y			lda 	(codePtr),y
.8466	c8		iny				iny
.8467	85 3e		sta $3e				sta 	zaTemp
.8469	5a		phy				phy
.846a	a0 02		ldy #$02			ldy 	#2 						; read type byte
.846c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.846e	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8470	c9 18		cmp #$18			cmp 	#NSTProcedure
.8472	f0 62		beq $84d6			beq 	_DCSyntax
.8474	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8476	29 04		and #$04			and 	#NSBIsArray
.8478	f0 64		beq $84de			beq 	_DCType
.847a	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.847c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.847e	d0 59		bne $84d9			bne 	_DCRedefine
.8480	7a		ply				ply
.8481	20 e1 84	jsr $84e1			jsr 	_DCGetSize 				; get array size, check it.
.8484	5a		phy				phy
.8485	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8487	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8489	7a		ply				ply 							; is there a second (e.g. ,x)
.848a	b1 30		lda ($30),y			lda 	(codePtr),y
.848c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.848e	d0 0a		bne $849a			bne 	_DCOneDimension
.8490	c8		iny				iny 							; skip comma
.8491	20 e1 84	jsr $84e1			jsr 	_DCGetSize 				; get 2nd array size
.8494	5a		phy				phy
.8495	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8497	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8499	7a		ply				ply
.849a					_DCOneDimension:
.849a	5a		phy				phy 							; save position
.849b	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.849d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.849f	aa		tax				tax
.84a0	c8		iny				iny
.84a1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a3	e8		inx				inx 							; bump them.
.84a4	1a		inc a				inc 	a
.84a5	20 a9 9d	jsr $9da9			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84a8	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84aa	29 e0		and #$e0			and 	#$E0
.84ac	d0 23		bne $84d1			bne 	_DCSize
.84ae	a0 02		ldy #$02			ldy 	#2 						; get base type
.84b0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84b2	20 ef 84	jsr $84ef			jsr 	ScaleByBaseType 		; scale by base type
.84b5	a5 36		lda $36				lda 	zTemp0
.84b7	a6 37		ldx $37				ldx 	zTemp0+1
.84b9	20 9f 99	jsr $999f			jsr 	AllocateXABytes 		; allocate memory
.84bc	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84be	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c0	c8		iny				iny
.84c1	8a		txa				txa
.84c2	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c4	7a		ply				ply 							; get position back
.84c5	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 		; check )
.84c8	b1 30		lda ($30),y			lda 	(codePtr),y
.84ca	c8		iny				iny 							; consume in case
.84cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84cd	f0 85		beq $8454			beq 	DimCommand
.84cf	88		dey				dey 							; undo consume
.84d0	60		rts				rts
.84d1					_DCSize:
.84d1	a9 16		lda #$16		lda	#22
.84d3	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.84d6					_DCSyntax:
.84d6	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.84d9					_DCRedefine:
.84d9	a9 15		lda #$15		lda	#21
.84db	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.84de					_DCType:
.84de	4c a8 9f	jmp $9fa8			jmp 	TypeError
.84e1					_DCGetSize:
.84e1	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84e3	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 	; get array dimension
.84e6	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84e8	f0 e7		beq $84d1			beq 	_DCSize
.84ea	c9 fe		cmp #$fe			cmp 	#254
.84ec	f0 e3		beq $84d1			beq 	_DCSize
.84ee	60		rts				rts
.84ef					ScaleByBaseType:
.84ef	29 10		and #$10			and 	#NSBIsString 			; is it string
.84f1	d0 19		bne $850c			bne 	_SBBTString
.84f3	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84f5	48		pha				pha
.84f6	a5 36		lda $36				lda 	zTemp0
.84f8	48		pha				pha
.84f9	06 36		asl $36				asl 	zTemp0 					; x 2
.84fb	26 37		rol $37				rol 	zTemp0+1
.84fd	06 36		asl $36				asl 	zTemp0 					; x 4
.84ff	26 37		rol $37				rol 	zTemp0+1
.8501	68		pla				pla 							; add stacked value = x 5
.8502	65 36		adc $36				adc 	zTemp0
.8504	85 36		sta $36				sta 	zTemp0
.8506	68		pla				pla
.8507	65 37		adc $37				adc 	zTemp0+1
.8509	85 37		sta $37				sta 	zTemp0+1
.850b	60		rts				rts
.850c					_SBBTString:
.850c	06 36		asl $36				asl 	zTemp0
.850e	26 37		rol $37				rol 	zTemp0+1
.8510	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8511					EndCommand:
.8511	4c 53 83	jmp $8353			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8514					ForCommand:
.8514	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8516	20 5e a6	jsr $a65e			jsr 	StackOpen
.8519	a2 00		ldx #$00			ldx 	#0
.851b	20 da 97	jsr $97da			jsr 	EvaluateTerm
.851e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8521	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8523	d0 49		bne $856e			bne		_FCError
.8525	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8527	20 48 8d	jsr $8d48			jsr 	CheckNextA
.852a	e8		inx				inx
.852b	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; <from> in +1
.852e	b1 30		lda ($30),y			lda 	(codePtr),y
.8530	c8		iny				iny 								; consume it
.8531	48		pha				pha 								; save on stack for later
.8532	c9 b4		cmp #$b4			cmp 	#KWD_DOWNTO
.8534	f0 04		beq $853a			beq 	_FCNoSyntax
.8536	c9 cd		cmp #$cd			cmp 	#KWD_TO
.8538	d0 37		bne $8571			bne 	_FCSyntaxError
.853a					_FCNoSyntax:
.853a	e8		inx				inx
.853b	20 60 9d	jsr $9d60			jsr 	EvaluateInteger
.853e	20 a2 a6	jsr $a6a2			jsr 	STKSaveCodePosition 		; save loop back position
.8541	68		pla				pla 								; restore DOWNTO or TO
.8542	5a		phy				phy 								; save Y on the stack
.8543	49 b4		eor #$b4			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8545	f0 02		beq $8549			beq 	_FCNotDownTo
.8547	a9 02		lda #$02			lda 	#2
.8549					_FCNotDownTo:
.8549	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.854a	a0 10		ldy #$10			ldy 	#16
.854c	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.854e	a0 06		ldy #$06			ldy 	#6
.8550	ad 08 04	lda $0408			lda 	NSMantissa0
.8553	91 34		sta ($34),y			sta 	(basicStack),y
.8555	ad 10 04	lda $0410			lda 	NSMantissa1
.8558	c8		iny				iny
.8559	91 34		sta ($34),y			sta 	(basicStack),y
.855b	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.855d	a2 01		ldx #$01			ldx 	#1
.855f	20 74 85	jsr $8574			jsr 	FCIntegerToStack
.8562	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8564	a2 02		ldx #$02			ldx 	#2
.8566	20 74 85	jsr $8574			jsr 	FCIntegerToStack
.8569	20 94 85	jsr $8594			jsr 	CopyIndexToReference
.856c	7a		ply				ply 								; restore position
.856d	60		rts				rts
.856e					_FCError:
.856e	4c a8 9f	jmp $9fa8			jmp 	TypeError
.8571					_FCSyntaxError:
.8571	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.8574					FCIntegerToStack:
.8574	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8577	10 03		bpl $857c			bpl	 	_FCNotNegative
.8579	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.857c					_FCNotNegative:
.857c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.857f	91 34		sta ($34),y			sta 	(basicStack),y
.8581	c8		iny				iny
.8582	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8585	91 34		sta ($34),y			sta 	(basicStack),y
.8587	c8		iny				iny
.8588	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.858b	91 34		sta ($34),y			sta 	(basicStack),y
.858d	c8		iny				iny
.858e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8591	91 34		sta ($34),y			sta 	(basicStack),y
.8593	60		rts				rts
.8594					CopyIndexToReference:
.8594	5a		phy				phy
.8595	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8597	38		sec				sec 								; (because we copy from offset 8)
.8598	b1 34		lda ($34),y			lda 	(basicStack),y
.859a	e9 08		sbc #$08			sbc 	#8
.859c	85 36		sta $36				sta 	zTemp0
.859e	c8		iny				iny
.859f	b1 34		lda ($34),y			lda 	(basicStack),y
.85a1	e9 00		sbc #$00			sbc 	#0
.85a3	85 37		sta $37				sta 	zTemp0+1
.85a5	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85a7	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85a9	b1 34		lda ($34),y			lda 	(basicStack),y
.85ab	0a		asl a				asl 	a 							; into carry
.85ac	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85ae	90 14		bcc $85c4			bcc 	_CITRNormal
.85b0	38		sec				sec
.85b1					_CITRNegative:
.85b1	a9 00		lda #$00			lda 	#0
.85b3	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85b5	91 36		sta ($36),y			sta 	(zTemp0),y
.85b7	c8		iny				iny
.85b8	ca		dex				dex
.85b9	d0 f6		bne $85b1			bne 	_CITRNegative
.85bb	88		dey				dey 								; look at MSB of mantissa
.85bc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85be	09 80		ora #$80			ora 	#$80
.85c0	91 36		sta ($36),y			sta 	(zTemp0),y
.85c2	7a		ply				ply
.85c3	60		rts				rts
.85c4					_CITRNormal:
.85c4	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85c6	91 36		sta ($36),y			sta 	(zTemp0),y
.85c8	c8		iny				iny
.85c9	ca		dex				dex
.85ca	d0 f8		bne $85c4			bne 	_CITRNormal
.85cc	7a		ply				ply 								; and exit.
.85cd	60		rts				rts
.85ce					NextCommand:
.85ce	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85d0	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85d2	20 8a a6	jsr $a68a			jsr 	StackCheckFrame
.85d5	5a		phy				phy
.85d6	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85d8	b1 34		lda ($34),y			lda 	(basicStack),y
.85da	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85dc	30 02		bmi $85e0			bmi 	_NCStepNeg
.85de	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85e0					_NCStepNeg:
.85e0	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85e2	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85e4	18		clc				clc
.85e5					_NCBump:
.85e5	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85e7	91 34		sta ($34),y			sta 	(basicStack),y
.85e9	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85eb	c8		iny				iny 								; next byte
.85ec	ca		dex				dex 								; do four times
.85ed	d0 f6		bne $85e5			bne 	_NCBump
.85ef	20 94 85	jsr $8594			jsr		CopyIndexToReference		; copy it to the reference variable.
.85f2	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85f4	b1 34		lda ($34),y			lda 	(basicStack),y
.85f6	0a		asl a				asl 	a 							; sign bit to carry
.85f7	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85f9	85 38		sta $38				sta 	zTemp1
.85fb	90 02		bcc $85ff			bcc 	_NCCompRev 					; use if step is +ve
.85fd	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.85ff					_NCCompRev:
.85ff	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8601	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8603	85 39		sta $39				sta 	zTemp1+1
.8605	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8607	38		sec				sec
.8608					_NCCompare:
.8608	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.860a	b1 34		lda ($34),y			lda 	(basicStack),y
.860c	a4 39		ldy $39				ldy 	zTemp1+1
.860e	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8610	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8612	e6 39		inc $39				inc 	zTemp1+1
.8614	ca		dex				dex 								; do it 4 times.
.8615	d0 f1		bne $8608			bne 	_NCCompare
.8617	50 02		bvc $861b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8619	49 80		eor #$80			eor 	#$80
.861b					_NCNoOverflow:
.861b	7a		ply				ply 								; restore Y position
.861c	0a		asl a				asl 	a 							; is bit 7 set.
.861d	90 04		bcc $8623			bcc 	_NCLoopback 				; if no , >= so loop back
.861f	20 7c a6	jsr $a67c			jsr 	StackClose 					; exit the loop
.8622	60		rts				rts
.8623					_NCLoopBack:
.8623	20 b3 a6	jsr $a6b3			jsr 	STKLoadCodePosition 		; loop back
.8626	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8627					Command_GOSUB:
.8627	a2 00		ldx #$00			ldx 	#0
.8629	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.862c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.862e	20 5e a6	jsr $a65e			jsr 	StackOpen 					; create frame
.8631	20 a2 a6	jsr $a6a2			jsr 	STKSaveCodePosition 		; save current position
.8634	4c 4a 86	jmp $864a			jmp 	GotoStackX
.8637					Command_RETURN:
.8637	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8639	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.863b	20 8a a6	jsr $a68a			jsr 	StackCheckFrame
.863e	20 b3 a6	jsr $a6b3			jsr 	STKLoadCodePosition 		; restore code position
.8641	20 7c a6	jsr $a67c			jsr 	StackClose
.8644	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8645					GotoCommand:
.8645	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8647	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.864a					GotoStackX:
.864a	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.864d	48		pha				pha 								; it is slightly inefficient, just in cases.
.864e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8651	fa		plx				plx
.8652	20 21 a2	jsr $a221			jsr 	MemorySearch 				; transfer to line number AX.
.8655	90 05		bcc $865c			bcc 	_GotoError 					; not found, off end.
.8657	d0 03		bne $865c			bne 	_GotoError 					; not found exactly
.8659	4c f8 89	jmp $89f8			jmp 	RunNewLine 					; and go straight to new line code.
.865c					_GotoError:
.865c	a9 0d		lda #$0d		lda	#13
.865e	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8661					IfCommand:
.8661	a2 00		ldx #$00			ldx 	#0 							; If what.
.8663	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber
.8666	b1 30		lda ($30),y			lda 	(codePtr),y
.8668	c9 a8		cmp #$a8			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.866a	d0 0a		bne $8676			bne 	_IFStructured
.866c	c8		iny				iny 								; consume THEN
.866d	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero
.8670	f0 01		beq $8673			beq 	_IfFail 					; if fail, go to next line
.8672	60		rts				rts 								; if THEN just continue
.8673					_IfFail:
.8673	4c 5d 8a	jmp $8a5d			jmp 	EOLCommand
.8676					_IfStructured:
.8676	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero
.8679	d0 07		bne $8682			bne 	_IfExit 					; if not, then continue normally.
.867b	a9 b5		lda #$b5			lda 	#KWD_ELSE 					; look for else/endif
.867d	a2 a5		ldx #$a5			ldx 	#KWD_ENDIF
.867f	20 93 8c	jsr $8c93			jsr 	ScanForward 				; and run from there/
.8682					_IfExit:
.8682	60		rts				rts
.8683					ElseCode:
.8683	a9 a5		lda #$a5			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8685	aa		tax				tax 								; so just go to the structure exit
.8686	20 93 8c	jsr $8c93			jsr 	ScanForward
.8689	60		rts				rts
.868a					EndIf:
.868a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.868b					LetCommand:
.868b	a2 00		ldx #$00			ldx 	#0
.868d	b1 30		lda ($30),y			lda 	(codePtr),y
.868f	c9 10		cmp #$10			cmp 	#KWD_AT
.8691	d0 16		bne $86a9			bne 	_LCStandard
.8693	c8		iny				iny 								; skip equal
.8694	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; get a number
.8697	20 1e 96	jsr $961e			jsr 	Dereference 				; dereference it
.869a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.869d	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.869f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86a2	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86a4	d0 10		bne $86b6			bne 	_LCMain
.86a6	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; was a reference before.
.86a9					_LCStandard:
.86a9	ad e8 92	lda $92e8			lda 	PrecedenceLevel+"*"			; precedence > this
.86ac	20 02 93	jsr $9302			jsr 	EvaluateExpressionAtPrecedence
.86af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86b2	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86b4	f0 0e		beq $86c4			beq 	_LetGoProc 					; it's a procedure call.
.86b6					_LCMain:
.86b6	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86b8	20 48 8d	jsr $8d48			jsr 	CheckNextA
.86bb	e8		inx				inx 								; RHS
.86bc	20 34 9d	jsr $9d34			jsr 	EvaluateValue
.86bf	ca		dex				dex
.86c0	20 c7 86	jsr $86c7			jsr 	AssignVariable
.86c3	60		rts				rts
.86c4					_LetGoProc:
.86c4	4c c5 88	jmp $88c5			jmp 	CallProcedure
.86c7					AssignVariable:
.86c7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86ca	48		pha				pha 								; save a copy
.86cb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86ce	29 10		and #$10			and 	#NSBIsString
.86d0	d0 0b		bne $86dd			bne 	_ASError
.86d2	68		pla				pla 								; get back
.86d3	29 10		and #$10			and 	#NSBIsString 				; check type
.86d5	d0 03		bne $86da			bne 	_ASString
.86d7	4c 46 95	jmp $9546			jmp 	AssignNumber
.86da					_ASString:
.86da	4c b4 95	jmp $95b4			jmp 	AssignString
.86dd					_ASError:
.86dd	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e0					Command_List:
.86e0	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86e3	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86e6	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86e9	a9 ff		lda #$ff			lda 	#$FF
.86eb	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86ee	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86f1	b1 30		lda ($30),y			lda 	(codePtr),y
.86f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f5	f0 1e		beq $8715			beq 	_CLSecond
.86f7	20 76 87	jsr $8776			jsr 	CLIsDigit 					; if not digit, list all
.86fa	b0 24		bcs $8720			bcs 	_CLStart
.86fc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86fe	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.8701	b1 30		lda ($30),y			lda 	(codePtr),y
.8703	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8705	f0 0e		beq $8715			beq 	_CLSecond 					; if so go get it
.8707	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.870a	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.870d	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8710	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8713	80 0b		bra $8720			bra 	_CLStart
.8715					_CLSecond:
.8715	c8		iny				iny 								; consume comma
.8716	20 76 87	jsr $8776			jsr 	CLIsDigit 					; digit found
.8719	b0 05		bcs $8720			bcs 	_CLStart 					; if not, continue listing
.871b	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.871d	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.8720					_CLStart
.8720	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8722	85 30		sta $30				sta 	codePtr
.8724	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8726	85 31		sta $31				sta 	codePtr+1
.8728					_CLLoop:
.8728	20 40 aa	jsr $aa40			jsr 	EXTBreakCheck 				; break check
.872b	f0 33		beq $8760			beq 	_CLExit
.872d	b2 30		lda ($30)			lda 	(codePtr)
.872f	f0 2f		beq $8760			beq 	_CLExit
.8731	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8733	20 63 87	jsr $8763			jsr 	CLCompareLineNo
.8736	90 1b		bcc $8753			bcc 	_CLNext
.8738	a2 07		ldx #$07			ldx 	#7
.873a	20 63 87	jsr $8763			jsr 	CLCompareLineNo
.873d	f0 02		beq $8741			beq 	_CLDoThisOne
.873f	b0 12		bcs $8753			bcs 	_CLNext
.8741					_CLDoThisOne:
.8741	20 f6 8c	jsr $8cf6			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8744	20 8a b3	jsr $b38a			jsr 	ListConvertLine 			; convert line into token Buffer
.8747	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8749	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.874b	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.874e	a9 0d		lda #$0d			lda 	#13 						; new line
.8750	20 9e a7	jsr $a79e			jsr 	EXTPrintCharacter
.8753					_CLNext:
.8753	18		clc				clc
.8754	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8756	65 30		adc $30				adc 	codePtr
.8758	85 30		sta $30				sta 	codePtr
.875a	90 02		bcc $875e			bcc 	_CREExit
.875c	e6 31		inc $31				inc 	codePtr+1
.875e					_CREExit:
.875e	80 c8		bra $8728			bra 	_CLLoop
.8760					_CLExit:
.8760	4c 53 83	jmp $8353			jmp 	WarmStart
.8763					CLCompareLineNo:
.8763	38		sec				sec
.8764	a0 01		ldy #$01			ldy 	#1
.8766	b1 30		lda ($30),y			lda 	(codePtr),y
.8768	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.876b	85 36		sta $36				sta 	zTemp0
.876d	c8		iny				iny
.876e	b1 30		lda ($30),y			lda 	(codePtr),y
.8770	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8773	05 36		ora $36				ora 	zTemp0
.8775	60		rts				rts
.8776					CLIsDigit:
.8776	b1 30		lda ($30),y			lda 	(codePtr),y
.8778	c9 30		cmp #$30			cmp 	#"0"
.877a	90 03		bcc $877f			bcc	 	_CLIDExitFalse
.877c	c9 3a		cmp #$3a			cmp 	#"9"+1
.877e	60		rts				rts
.877f					_CLIDExitFalse:
.877f	38		sec				sec
.8780	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8781					Command_LOCAL:
.8781	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8783	20 8f 87	jsr $878f			jsr 	LocaliseNextTerm 			; convert term to a local.
.8786	b1 30		lda ($30),y			lda 	(codePtr),y
.8788	c8		iny				iny
.8789	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.878b	f0 f4		beq $8781			beq 	Command_LOCAL
.878d	88		dey				dey 								; unpick pre-get
.878e	60		rts				rts
.878f					LocaliseNextTerm:
.878f	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; evaluate the term
.8792	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8795	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8797	f0 61		beq $87fa			beq		_LNTError
.8799	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.879c	85 36		sta $36				sta 	zTemp0
.879e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87a1	85 37		sta $37				sta  	zTemp0+1
.87a3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87a6	29 10		and #$10			and 	#NSBIsString
.87a8	d0 1e		bne $87c8			bne 	_LNTPushString
.87aa	5a		phy				phy
.87ab	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87ad					_LNTPushNumLoop:
.87ad	b1 36		lda ($36),y			lda		(zTemp0),y
.87af	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87b2	c8		iny				iny
.87b3	c0 05		cpy #$05			cpy 	#5
.87b5	d0 f6		bne $87ad			bne 	_LNTPushNumLoop
.87b7	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87b9	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87bc	a5 37		lda $37				lda 	zTemp0+1
.87be	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87c1	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87c3	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87c6	7a		ply				ply
.87c7	60		rts				rts
.87c8					_LNTPushString:
.87c8	5a		phy				phy
.87c9	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87cb	85 38		sta $38				sta 	zTemp1
.87cd	a0 01		ldy #$01			ldy 	#1
.87cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d1	85 39		sta $39				sta 	zTemp1+1
.87d3	a0 00		ldy #$00			ldy 	#0 							; output string
.87d5	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87d7	f0 0a		beq $87e3			beq 	_LNTStringOut
.87d9					_LNTPushStrLoop:
.87d9	b1 38		lda ($38),y			lda 	(zTemp1),y
.87db	f0 06		beq $87e3			beq 	_LNTStringOut
.87dd	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87e0	c8		iny				iny
.87e1	80 f6		bra $87d9			bra 	_LNTPushStrLoop
.87e3					_LNTStringOut:
.87e3	98		tya				tya									; output length
.87e4	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87e7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87ea	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87ed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f0	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87f3	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87f5	20 3c a6	jsr $a63c			jsr 	StackPushByte
.87f8	7a		ply				ply
.87f9	60		rts				rts
.87fa					_LNTError:
.87fa	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.87fd					LocalPopValue:
.87fd	20 55 a6	jsr $a655			jsr 	StackPopByte
.8800	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8802	d0 17		bne $881b			bne 	_LPVString
.8804	20 55 a6	jsr $a655			jsr 	StackPopByte 				; address
.8807	85 37		sta $37				sta 	zTemp0+1
.8809	20 55 a6	jsr $a655			jsr 	StackPopByte
.880c	85 36		sta $36				sta 	zTemp0
.880e	5a		phy				phy
.880f	a0 04		ldy #$04			ldy 	#4 							; copy back
.8811					_LPVNumberCopy:
.8811	20 55 a6	jsr $a655			jsr 	StackPopByte
.8814	91 36		sta ($36),y			sta 	(zTemp0),y
.8816	88		dey				dey
.8817	10 f8		bpl $8811			bpl 	_LPVNumberCopy
.8819	7a		ply				ply 								; and complete
.881a	60		rts				rts
.881b					_LPVString:
.881b	20 55 a6	jsr $a655			jsr 	StackPopByte 				; address of record => zTemp0
.881e	85 37		sta $37				sta 	zTemp0+1
.8820	20 55 a6	jsr $a655			jsr 	StackPopByte
.8823	85 36		sta $36				sta 	zTemp0
.8825	5a		phy				phy
.8826	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8828	85 38		sta $38				sta 	zTemp1
.882a	a0 01		ldy #$01			ldy 	#1
.882c	b1 36		lda ($36),y			lda 	(zTemp0),y
.882e	85 39		sta $39				sta 	zTemp1+1
.8830	20 55 a6	jsr $a655			jsr 	StackPopByte 				; # to get => y
.8833	a8		tay				tay
.8834	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8836	f0 0e		beq $8846			beq 	_LPVStringCopied
.8838	a9 00		lda #$00			lda 	#0 							; NULL on end
.883a	91 38		sta ($38),y			sta 	(zTemp1),y
.883c					_LPVStringCopy:
.883c	88		dey				dey
.883d	30 07		bmi $8846			bmi 	_LPVStringCopied
.883f	20 55 a6	jsr $a655			jsr 	StackPopByte
.8842	91 38		sta ($38),y			sta 	(zTemp1),y
.8844	80 f6		bra $883c			bra 	_LPVStringCopy
.8846					_LPVStringCopied:
.8846	fa		plx				plx
.8847	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8848					NewCommand:
.8848	20 4e 88	jsr $884e			jsr 	NewProgram
.884b	4c 53 83	jmp $8353			jmp 	WarmStart
.884e					NewProgram:
.884e	20 ff a1	jsr $a1ff			jsr 	MemoryNew
.8851	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8854	20 ec 83	jsr $83ec			jsr 	ClearCommand 				; clear everything.
.8857	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8858					Command_Print:
.8858	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8859					_CPLoop:
.8859	08		php				php 								; save last action flag
.885a	b1 30		lda ($30),y			lda 	(codePtr),y
.885c	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.885e	f0 46		beq $88a6			beq 	_CPExit
.8860	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8862	f0 42		beq $88a6			beq 	_CPExit
.8864	68		pla				pla 								; throw last action flag
.8865	b1 30		lda ($30),y			lda 	(codePtr),y
.8867	c8		iny				iny
.8868	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.886a	f0 37		beq $88a3			beq 	_CPContinueWithSameLine
.886c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.886e	f0 2e		beq $889e			beq 	_CPTab
.8870	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8872	f0 26		beq $889a			beq 	_CPNewLine
.8874	88		dey				dey 								; undo the get.
.8875	a2 00		ldx #$00			ldx 	#0
.8877	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get a value into slot 0
.887a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.887d	29 10		and #$10			and 	#NSBIsString
.887f	f0 0b		beq $888c			beq 	_CPNumber
.8881	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8884	ad 08 04	lda $0408			lda 	NSMantissa0
.8887	20 af 88	jsr $88af			jsr 	CPPrintStringXA
.888a	80 cc		bra $8858			bra 	Command_Print 				; loop round clearing carry so NL if end
.888c					_CPNumber:
.888c	a9 05		lda #$05			lda 	#5 							; maximum decimals
.888e	20 0a 9c	jsr $9c0a			jsr 	ConvertNumberToString 		; convert to string
.8891	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8893	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.8895	20 af 88	jsr $88af			jsr 	CPPrintStringXA
.8898	80 be		bra $8858			bra 	Command_Print 				; loop round clearing carry so NL if end
.889a					_CPNewLine:
.889a	a9 0d		lda #$0d			lda 	#13
.889c	80 02		bra $88a0			bra 	_CPPrintChar
.889e					_CPTab:
.889e	a9 09		lda #$09			lda 	#9 							; print TAB
.88a0					_CPPrintChar:
.88a0	20 c2 88	jsr $88c2			jsr 	CPPrintVector
.88a3					_CPContinueWithSameLine:
.88a3	38		sec				sec 								; loop round with carry set, which
.88a4	80 b3		bra $8859			bra 	_CPLoop 					; will inhibit final CR
.88a6					_CPExit:
.88a6	28		plp				plp 								; get last action flag
.88a7	b0 05		bcs $88ae			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88a9	a9 0d		lda #$0d			lda 	#13 						; print new line
.88ab	20 c2 88	jsr $88c2			jsr 	CPPrintVector
.88ae					_CPExit2:
.88ae	60		rts				rts
.88af					CPPrintStringXA:
.88af	5a		phy				phy
.88b0	86 37		stx $37				stx 	zTemp0+1
.88b2	85 36		sta $36				sta 	zTemp0
.88b4	a0 00		ldy #$00			ldy 	#0
.88b6					_PSXALoop:
.88b6	b1 36		lda ($36),y			lda 	(zTemp0),y
.88b8	f0 06		beq $88c0			beq 	_PSXAExit
.88ba	20 c2 88	jsr $88c2			jsr 	CPPrintVector
.88bd	c8		iny				iny
.88be	80 f6		bra $88b6			bra 	_PSXALoop
.88c0					_PSXAExit:
.88c0	7a		ply				ply
.88c1	60		rts				rts
.88c2					CPPrintVector:
.88c2	4c 9e a7	jmp $a79e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88c5					CallProcedure:
.88c5	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88c7	b1 30		lda ($30),y			lda 	(codePtr),y
.88c9	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88cb	f0 0c		beq $88d9			beq 	_CPEndParam
.88cd					_CPParamLoop:
.88cd	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get parameter onto stack
.88d0	e8		inx				inx 								; bump next stack
.88d1	b1 30		lda ($30),y			lda 	(codePtr),y
.88d3	c8		iny				iny
.88d4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88d6	f0 f5		beq $88cd			beq 	_CPParamLoop
.88d8	88		dey				dey 								; unpick.
.88d9					_CPEndParam:
.88d9	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88dc	c8		iny				iny									; skip right bracket
.88dd	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88df	20 5e a6	jsr $a65e			jsr 	StackOpen
.88e2	20 a2 a6	jsr $a6a2			jsr 	STKSaveCodePosition 		; save loop position
.88e5	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88e8	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88ea	ad 10 04	lda $0410			lda 	NSMantissa1
.88ed	85 37		sta $37				sta 	zTemp0+1
.88ef	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88f1	b2 36		lda ($36)			lda 	(zTemp0)
.88f3	85 30		sta $30				sta 	safePtr
.88f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f7	85 31		sta $31				sta 	safePtr+1
.88f9	c8		iny				iny
.88fa	b1 36		lda ($36),y			lda 	(zTemp0),y
.88fc	85 32		sta $32				sta 	safePtr+2
.88fe	c8		iny				iny
.88ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.8901	85 33		sta $33				sta 	safePtr+3
.8903	c8		iny				iny 								; get Y offset -> Y
.8904	b1 36		lda ($36),y			lda 	(zTemp0),y
.8906	a8		tay				tay
.8907	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8909	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.890c	f0 13		beq $8921			beq 	_ParamExit 					; if so, exit.
.890e					_ParamExtract:
.890e	ca		dex				dex 								; put a local term on the level before
.890f	20 8f 87	jsr $878f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8912	20 c7 86	jsr $86c7			jsr 	AssignVariable 				; assign stacked value to the variable.
.8915	e8		inx				inx 								; advance to next parameter to do.
.8916	e8		inx				inx
.8917	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.891a	f0 05		beq $8921			beq 	_ParamExit
.891c	20 40 8d	jsr $8d40			jsr 	CheckComma 					; comma seperating parameters
.891f	80 ed		bra $890e			bra 	_ParamExtract
.8921					_ParamExit:
.8921	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check )
.8924	60		rts				rts 								; and continue from here
.8925					Command_ENDPROC:
.8925	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8927	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8929	20 8a a6	jsr $a68a			jsr 	StackCheckFrame
.892c	20 b3 a6	jsr $a6b3			jsr 	STKLoadCodePosition 		; restore code position
.892f	20 7c a6	jsr $a67c			jsr 	StackClose
.8932	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8933					Command_Read:
.8933	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8935	20 da 97	jsr $97da			jsr 	EvaluateTerm
.8938	bd 00 04	lda $0400,x			lda 	NSStatus,x
.893b	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.893d	f0 4a		beq $8989			beq 	_CRSyntax 					; check reference (bit 0)
.893f	20 d2 89	jsr $89d2			jsr 	SwapDataCodePtrs 			; swap code and data
.8942	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8945	d0 20		bne $8967			bne 	_CRContinueData
.8947					_CRKeepSearching:
.8947	a9 b2		lda #$b2			lda 	#KWD_DATA 					; scan for instruction
.8949	aa		tax				tax
.894a	20 93 8c	jsr $8c93			jsr 	ScanForward
.894d	c9 b2		cmp #$b2			cmp 	#KWD_DATA 					; found data ?
.894f	f0 16		beq $8967			beq 	_CRHaveData 				; found it
.8951	18		clc				clc
.8952	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8954	65 30		adc $30				adc 	codePtr
.8956	85 30		sta $30				sta 	codePtr
.8958	90 02		bcc $895c			bcc 	_CREExit
.895a	e6 31		inc $31				inc 	codePtr+1
.895c					_CREExit:
.895c	a0 03		ldy #$03			ldy 	#3 							; start of line.
.895e	b2 30		lda ($30)			lda 	(codePtr)
.8960	d0 e5		bne $8947			bne 	_CRKeepSearching
.8962	a9 0b		lda #$0b		lda	#11
.8964	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8967					_CRHaveData:
.8967					_CRContinueData:
.8967	a2 01		ldx #$01			ldx 	#1
.8969	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; evaluate value into slot # 1
.896c	ca		dex				dex
.896d	20 c7 86	jsr $86c7			jsr		AssignVariable 				; do the assignment
.8970	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8973	b1 30		lda ($30),y			lda 	(codePtr),y
.8975	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8977	d0 04		bne $897d			bne 	_CRSwapBack
.8979	c8		iny				iny 								; consume comma
.897a	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.897d					_CRSwapBack:
.897d	20 d2 89	jsr $89d2			jsr 	SwapDataCodePtrs			; swap them back.
.8980	b1 30		lda ($30),y			lda 	(codePtr),y
.8982	c8		iny				iny
.8983	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8985	f0 ac		beq $8933			beq 	Command_Read 				; if so go round again.
.8987	88		dey				dey 								; unpick get.
.8988	60		rts				rts
.8989					_CRSyntax:
.8989	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.898c					RemCommand:
.898c	b1 30		lda ($30),y			lda 	(codePtr),y
.898e	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8990	d0 06		bne $8998			bne 	_RMExit
.8992	c8		iny				iny
.8993	98		tya				tya
.8994	38		sec				sec
.8995	71 30		adc ($30),y			adc 	(codePtr),y
.8997	a8		tay				tay
.8998					_RMExit:
.8998	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8999					Command_REPEAT:
.8999	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.899b	20 5e a6	jsr $a65e			jsr 	StackOpen
.899e	20 a2 a6	jsr $a6a2			jsr 	STKSaveCodePosition 		; save loop position
.89a1	60		rts				rts
.89a2					Command_UNTIL:
.89a2	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89a4	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89a6	20 8a a6	jsr $a68a			jsr 	StackCheckFrame
.89a9	a2 00		ldx #$00			ldx 	#0
.89ab	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; work out the number
.89ae	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; check if zero
.89b1	f0 04		beq $89b7			beq 	_CULoopBack 				; if so keep looping
.89b3	20 7c a6	jsr $a67c			jsr 	StackClose		 			; return
.89b6	60		rts				rts
.89b7					_CULoopBack:
.89b7	20 b3 a6	jsr $a6b3			jsr 	STKLoadCodePosition 		; loop back
.89ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89bb					Command_Restore:
.89bb	20 d2 89	jsr $89d2			jsr 	SwapDataCodePtrs 			; swap code and data
.89be	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89c0	85 30		sta $30				sta 	codePtr
.89c2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89c4	85 31		sta $31				sta 	codePtr+1
.89c6	20 d2 89	jsr $89d2			jsr 	SwapDataCodePtrs 			; put them back
.89c9	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89cb	8d 9b 04	sta $049b			sta 	dataPointer+4
.89ce	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89d1	60		rts				rts
.89d2					SwapDataCodePtrs:
.89d2	da		phx				phx
.89d3	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89d5					_SDCPLoop:
.89d5	b5 30		lda $30,x			lda 	safePtr,x
.89d7	48		pha				pha
.89d8	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89db	95 30		sta $30,x			sta 	safePtr,x
.89dd	68		pla				pla
.89de	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89e1	ca		dex				dex
.89e2	10 f1		bpl $89d5			bpl 	_SDCPLoop
.89e4	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89e7	8c 9b 04	sty $049b			sty 	dataPointer+4
.89ea	a8		tay				tay
.89eb	fa		plx				plx
.89ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89ed					CommandRUN:
.89ed	20 ec 83	jsr $83ec			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89f0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89f2	85 30		sta $30				sta 	codePtr
.89f4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89f6	85 31		sta $31				sta 	codePtr+1
.89f8					RUNNewLine:
.89f8	b2 30		lda ($30)			lda 	(codePtr)
.89fa	f0 5e		beq $8a5a			beq 	CRNoProgram         		; no then END.
.89fc	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89fe	9a		txs				txs
.89ff					RUNCodePointerLine:
.89ff	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a01					_CRIncMainLoop:
.8a01	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8a04	d0 05		bne $8a0b			bne 	_CRNoBreakCheck
.8a06	20 40 aa	jsr $aa40			jsr 	EXTBreakCheck 				; break check
.8a09	f0 4a		beq $8a55			beq 	_CRBreak
.8a0b					_CRNoBreakCheck:
.8a0b	c8		iny				iny
.8a0c					_CRMainLoop:
.8a0c	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a11	10 10		bpl $8a23			bpl 	_CRNotKeyword
.8a13	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a15	b0 04		bcs $8a1b			bcs 	_CRIsKeyword
.8a17	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a19	b0 34		bcs $8a4f			bcs		_CRSyntaxError
.8a1b					_CRIsKeyword:
.8a1b	c8		iny				iny 								; consume command
.8a1c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a1d	aa		tax				tax 								; put in X for vector jump
.8a1e	20 52 8a	jsr $8a52			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a21	80 e9		bra $8a0c			bra 	_CRMainLoop 				; and loop round
.8a23					_CRNotKeyword:
.8a23	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a25	f0 da		beq $8a01			beq 	_CRIncMainLoop
.8a27	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a29	90 05		bcc $8a30			bcc 	_CRNotVariable
.8a2b					_CRGoLet:
.8a2b	20 8b 86	jsr $868b			jsr 	LetCommand
.8a2e	80 dc		bra $8a0c			bra 	_CRMainLoop
.8a30					_CRNotVariable:
.8a30	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a32	f0 f7		beq $8a2b			beq 	_CRGoLet
.8a34	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a36	f0 f3		beq $8a2b			beq 	_CRGoLet
.8a38	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a3a	f0 ef		beq $8a2b			beq 	_CRGoLet
.8a3c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a3e	f0 09		beq $8a49			beq 	_CRGoRem
.8a40	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a42	d0 0b		bne $8a4f			bne 	_CRSyntaxError
.8a44	20 11 82	jsr $8211			jsr 	LabelHere
.8a47	80 c3		bra $8a0c			bra 	_CRMainLoop
.8a49					_CRGoRem:
.8a49	c8		iny				iny
.8a4a	20 8c 89	jsr $898c			jsr 	RemCommand
.8a4d	80 bd		bra $8a0c			bra 	_CRMainLoop
.8a4f					_CRSyntaxError:
.8a4f	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.8a52					_CRCallVector0:
.8a52	7c fe 8a	jmp ($8afe,x)			jmp 	(VectorSet0,x)
.8a55					_CRBreak:
.8a55	a9 01		lda #$01		lda	#1
.8a57	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8a5a					CRNoProgram:
.8a5a	4c 11 85	jmp $8511			jmp 	EndCommand
.8a5d					EOLCommand:
.8a5d	18		clc				clc
.8a5e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a60	65 30		adc $30				adc 	codePtr
.8a62	85 30		sta $30				sta 	codePtr
.8a64	90 02		bcc $8a68			bcc 	_CREExit
.8a66	e6 31		inc $31				inc 	codePtr+1
.8a68					_CREExit:
.8a68	80 8e		bra $89f8			bra 	RunNewLine
.8a6a					Shift1Command:
.8a6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a6c	c8		iny				iny
.8a6d	0a		asl a				asl 	a
.8a6e	aa		tax				tax
.8a6f	7c 9a 8b	jmp ($8b9a,x)			jmp 	(VectorSet1,x)
.8a72					Shift2Command:
.8a72	b1 30		lda ($30),y			lda 	(codePtr),y
.8a74	c8		iny				iny
.8a75	0a		asl a				asl 	a
.8a76	aa		tax				tax
.8a77	7c b4 8b	jmp ($8bb4,x)			jmp 	(VectorSet2,x)
.8a7a					Unused1:
.8a7a					Unused2:
.8a7a					Unused3:
.8a7a					Unused4:
.8a7a	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
>8a7d							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a7e					VectorSetPunc:
>8a7e	3e 90					.word	ShiftLeft                        ; $00 <<
>8a80	f5 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a82	eb 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a84	9e 9f					.word	SyntaxError                      ; $03 !!3
>8a86	9e 9f					.word	SyntaxError                      ; $04 ><
>8a88	ff 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a8a	41 90					.word	ShiftRight                       ; $06 >>
>8a8c	9e 9f					.word	SyntaxError                      ; $07 !!7
>8a8e	9e 9f					.word	SyntaxError                      ; $08 !!8
>8a90	9e 9f					.word	SyntaxError                      ; $09 !!9
>8a92	9e 9f					.word	SyntaxError                      ; $0a !!10
>8a94	9e 9f					.word	SyntaxError                      ; $0b !!11
>8a96	9e 9f					.word	SyntaxError                      ; $0c !!12
>8a98	9e 9f					.word	SyntaxError                      ; $0d !!13
>8a9a	9e 9f					.word	SyntaxError                      ; $0e !!14
>8a9c	9e 9f					.word	SyntaxError                      ; $0f !!15
>8a9e	9e 9f					.word	SyntaxError                      ; $10 @
>8aa0	9e 9f					.word	SyntaxError                      ; $11 !!17
>8aa2	9e 9f					.word	SyntaxError                      ; $12 !!18
>8aa4	9e 9f					.word	SyntaxError                      ; $13 [
>8aa6	c2 8e					.word	IntegerDivide                    ; $14 \
>8aa8	9e 9f					.word	SyntaxError                      ; $15 ]
>8aaa	cf 91					.word	EorInteger                       ; $16 ^
>8aac	9e 9f					.word	SyntaxError                      ; $17 _
>8aae	9e 9f					.word	SyntaxError                      ; $18 `
>8ab0	9e 9f					.word	SyntaxError                      ; $19 !!25
>8ab2	9e 9f					.word	SyntaxError                      ; $1a !!26
>8ab4	9e 9f					.word	SyntaxError                      ; $1b {
>8ab6	89 91					.word	OraInteger                       ; $1c |
>8ab8	9e 9f					.word	SyntaxError                      ; $1d }
>8aba	9e 9f					.word	SyntaxError                      ; $1e ~
>8abc	9e 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8abe	9e 9f					.word	SyntaxError                      ; $20
>8ac0	15 92					.word	WordIndirect                     ; $21 !
>8ac2	9e 9f					.word	SyntaxError                      ; $22 "
>8ac4	9e 9f					.word	SyntaxError                      ; $23 #
>8ac6	9e 9f					.word	SyntaxError                      ; $24 $
>8ac8	0f 8f					.word	IntegerModulus                   ; $25 %
>8aca	43 91					.word	AndInteger                       ; $26 &
>8acc	9e 9f					.word	SyntaxError                      ; $27 '
>8ace	9e 9f					.word	SyntaxError                      ; $28 (
>8ad0	9e 9f					.word	SyntaxError                      ; $29 )
>8ad2	84 8f					.word	MulInteger                       ; $2a *
>8ad4	d5 90					.word	AddInteger                       ; $2b +
>8ad6	9e 9f					.word	SyntaxError                      ; $2c ,
>8ad8	18 91					.word	SubInteger                       ; $2d -
>8ada	9e 9f					.word	SyntaxError                      ; $2e .
>8adc	00 94					.word	FDivideCommand                   ; $2f /
>8ade	9e 9f					.word	SyntaxError                      ; $30 0
>8ae0	9e 9f					.word	SyntaxError                      ; $31 1
>8ae2	9e 9f					.word	SyntaxError                      ; $32 2
>8ae4	9e 9f					.word	SyntaxError                      ; $33 3
>8ae6	9e 9f					.word	SyntaxError                      ; $34 4
>8ae8	9e 9f					.word	SyntaxError                      ; $35 5
>8aea	9e 9f					.word	SyntaxError                      ; $36 6
>8aec	9e 9f					.word	SyntaxError                      ; $37 7
>8aee	9e 9f					.word	SyntaxError                      ; $38 8
>8af0	9e 9f					.word	SyntaxError                      ; $39 9
>8af2	9e 9f					.word	SyntaxError                      ; $3a :
>8af4	9e 9f					.word	SyntaxError                      ; $3b ;
>8af6	d7 8d					.word	BinaryCompareLess                ; $3c <
>8af8	cd 8d					.word	BinaryCompareEqual               ; $3d =
>8afa	e1 8d					.word	BinaryCompareGreater             ; $3e >
>8afc	3c 92					.word	ByteIndirect                     ; $3f ?
.8afe					VectorSet0:
>8afe	5d 8a					.word	EOLCommand                       ; $80 !0:EOF
>8b00	6a 8a					.word	Shift1Command                    ; $81 !1:SH1
>8b02	72 8a					.word	Shift2Command                    ; $82 !2:SH2
>8b04	70 99					.word	AbsUnary                         ; $83 ABS(
>8b06	80 99					.word	AllocUnary                       ; $84 ALLOC(
>8b08	f0 99					.word	AscUnary                         ; $85 ASC(
>8b0a	bb 9b					.word	ChrUnary                         ; $86 CHR$(
>8b0c	20 a5					.word	UnaryEvent                       ; $87 EVENT(
>8b0e	c9 8d					.word	UnaryFalse                       ; $88 FALSE
>8b10	fd 99					.word	FracUnary                        ; $89 FRAC(
>8b12	b6 a4					.word	UnaryHit                         ; $8a HIT(
>8b14	13 9a					.word	IntUnary                         ; $8b INT(
>8b16	7a 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b18	b0 a5					.word	UnaryJoyB                        ; $8d JOYB(
>8b1a	89 a5					.word	UnaryJoyX                        ; $8e JOYX(
>8b1c	8c a5					.word	UnaryJoyY                        ; $8f JOYY(
>8b1e	95 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b20	25 9a					.word	LenUnary                         ; $91 LEN(
>8b22	43 9a					.word	Unary_Max                        ; $92 MAX(
>8b24	bf 9c					.word	Unary_Mid                        ; $93 MID$(
>8b26	3f 9a					.word	Unary_Min                        ; $94 MIN(
>8b28	9a 9a					.word	Unary_Not                        ; $95 NOT(
>8b2a	9e 9f					.word	SyntaxError                      ; $96 PLAYING(
>8b2c	b0 9a					.word	Unary_Random                     ; $97 RANDOM(
>8b2e	a5 9c					.word	Unary_Right                      ; $98 RIGHT$(
>8b30	cf 9a					.word	Unary_Rnd                        ; $99 RND(
>8b32	50 9b					.word	SgnUnary                         ; $9a SGN(
>8b34	cd 9b					.word	SpcUnary                         ; $9b SPC(
>8b36	e8 9b					.word	Unary_Str                        ; $9c STR$(
>8b38	c4 a5					.word	UnaryTimer                       ; $9d TIMER(
>8b3a	bd 8d					.word	UnaryTrue                        ; $9e TRUE
>8b3c	70 9b					.word	ValUnary                         ; $9f VAL(
>8b3e	14 85					.word	ForCommand                       ; $a0 FOR
>8b40	61 86					.word	IfCommand                        ; $a1 IF
>8b42	7a 8a					.word	Unused1                          ; $a2 PROC
>8b44	99 89					.word	Command_REPEAT                   ; $a3 REPEAT
>8b46	09 8d					.word	Command_WHILE                    ; $a4 WHILE
>8b48	8a 86					.word	EndIf                            ; $a5 ENDIF
>8b4a	25 89					.word	Command_ENDPROC                  ; $a6 ENDPROC
>8b4c	ce 85					.word	NextCommand                      ; $a7 NEXT
>8b4e	7a 8a					.word	Unused4                          ; $a8 THEN
>8b50	a2 89					.word	Command_UNTIL                    ; $a9 UNTIL
>8b52	2a 8d					.word	Command_WEND                     ; $aa WEND
>8b54	9e 9f					.word	SyntaxError                      ; $ab BY
>8b56	b2 83					.word	CallCommand                      ; $ac CALL
>8b58	58 a2					.word	CircleCommand                    ; $ad CIRCLE
>8b5a	ec 83					.word	ClearCommand                     ; $ae CLEAR
>8b5c	44 84					.word	ClearScreen                      ; $af CLS
>8b5e	9e 9f					.word	SyntaxError                      ; $b0 COLOR
>8b60	9e 9f					.word	SyntaxError                      ; $b1 COLOUR
>8b62	4c 84					.word	Command_Data                     ; $b2 DATA
>8b64	54 84					.word	DimCommand                       ; $b3 DIM
>8b66	7a 8a					.word	Unused3                          ; $b4 DOWNTO
>8b68	83 86					.word	ElseCode                         ; $b5 ELSE
>8b6a	9e 9f					.word	SyntaxError                      ; $b6 FROM
>8b6c	84 a4					.word	GfxCommand                       ; $b7 GFX
>8b6e	27 86					.word	Command_GOSUB                    ; $b8 GOSUB
>8b70	45 86					.word	GotoCommand                      ; $b9 GOTO
>8b72	9e 9f					.word	SyntaxError                      ; $ba HERE
>8b74	82 a2					.word	ImageCommand                     ; $bb IMAGE
>8b76	8b 86					.word	LetCommand                       ; $bc LET
>8b78	d7 a2					.word	LineCommand                      ; $bd LINE
>8b7a	81 87					.word	Command_LOCAL                    ; $be LOCAL
>8b7c	9e 9f					.word	SyntaxError                      ; $bf OFF
>8b7e	9e 9f					.word	SyntaxError                      ; $c0 ON
>8b80	9e 9f					.word	SyntaxError                      ; $c1 OUTLINE
>8b82	dc a4					.word	PaletteCommand                   ; $c2 PALETTE
>8b84	d0 a2					.word	PlotCommand                      ; $c3 PLOT
>8b86	58 88					.word	Command_Print                    ; $c4 PRINT
>8b88	33 89					.word	Command_Read                     ; $c5 READ
>8b8a	54 a2					.word	RectangleCommand                 ; $c6 RECT
>8b8c	8c 89					.word	RemCommand                       ; $c7 REM
>8b8e	37 86					.word	Command_RETURN                   ; $c8 RETURN
>8b90	9e 9f					.word	SyntaxError                      ; $c9 SOLID
>8b92	e0 a5					.word	SoundCommand                     ; $ca SOUND
>8b94	63 a2					.word	SpriteCommand                    ; $cb SPRITE
>8b96	9f a2					.word	TextCommand                      ; $cc TEXT
>8b98	7a 8a					.word	Unused2                          ; $cd TO
.8b9a					VectorSet1:
>8b9a	9e 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9c	9e 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b9e	9e 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba0	83 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ba2	a2 83					.word	AssertCommand                    ; $84 ASSERT
>8ba4	24 a4					.word	BitmapCtrl                       ; $85 BITMAP
>8ba6	11 85					.word	EndCommand                       ; $86 END
>8ba8	e0 86					.word	Command_List                     ; $87 LIST
>8baa	48 88					.word	NewCommand                       ; $88 NEW
>8bac	bb 89					.word	Command_Restore                  ; $89 RESTORE
>8bae	ed 89					.word	CommandRUN                       ; $8a RUN
>8bb0	69 a4					.word	SpritesCtrl                      ; $8b SPRITES
>8bb2	3c 8c					.word	StopCommand                      ; $8c STOP
.8bb4					VectorSet2:
>8bb4	9e 9f					.word	SyntaxError                      ; $80 !0:EOF
>8bb6	9e 9f					.word	SyntaxError                      ; $81 !1:SH1
>8bb8	9e 9f					.word	SyntaxError                      ; $82 !2:SH2
>8bba	5d 9e					.word	Assemble_adc                     ; $83 ADC
>8bbc	55 9e					.word	Assemble_and                     ; $84 AND
>8bbe	71 9e					.word	Assemble_asl                     ; $85 ASL
>8bc0	db 9e					.word	Assemble_bcc                     ; $86 BCC
>8bc2	df 9e					.word	Assemble_bcs                     ; $87 BCS
>8bc4	e7 9e					.word	Assemble_beq                     ; $88 BEQ
>8bc6	9e 9e					.word	Assemble_bit                     ; $89 BIT
>8bc8	cf 9e					.word	Assemble_bmi                     ; $8a BMI
>8bca	e3 9e					.word	Assemble_bne                     ; $8b BNE
>8bcc	cb 9e					.word	Assemble_bpl                     ; $8c BPL
>8bce	eb 9e					.word	Assemble_bra                     ; $8d BRA
>8bd0	ef 9e					.word	Assemble_brk                     ; $8e BRK
>8bd2	d3 9e					.word	Assemble_bvc                     ; $8f BVC
>8bd4	d7 9e					.word	Assemble_bvs                     ; $90 BVS
>8bd6	f7 9e					.word	Assemble_clc                     ; $91 CLC
>8bd8	4b 9f					.word	Assemble_cld                     ; $92 CLD
>8bda	0b 9f					.word	Assemble_cli                     ; $93 CLI
>8bdc	3b 9f					.word	Assemble_clv                     ; $94 CLV
>8bde	69 9e					.word	Assemble_cmp                     ; $95 CMP
>8be0	b2 9e					.word	Assemble_cpx                     ; $96 CPX
>8be2	ad 9e					.word	Assemble_cpy                     ; $97 CPY
>8be4	8f 9e					.word	Assemble_dec                     ; $98 DEC
>8be6	47 9f					.word	Assemble_dex                     ; $99 DEX
>8be8	23 9f					.word	Assemble_dey                     ; $9a DEY
>8bea	59 9e					.word	Assemble_eor                     ; $9b EOR
>8bec	94 9e					.word	Assemble_inc                     ; $9c INC
>8bee	57 9f					.word	Assemble_inx                     ; $9d INX
>8bf0	43 9f					.word	Assemble_iny                     ; $9e INY
>8bf2	c6 9e					.word	Assemble_jmp                     ; $9f JMP
>8bf4	c1 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bf6	65 9e					.word	Assemble_lda                     ; $a1 LDA
>8bf8	8a 9e					.word	Assemble_ldx                     ; $a2 LDX
>8bfa	a8 9e					.word	Assemble_ldy                     ; $a3 LDY
>8bfc	7b 9e					.word	Assemble_lsr                     ; $a4 LSR
>8bfe	5b 9f					.word	Assemble_nop                     ; $a5 NOP
>8c00	51 9e					.word	Assemble_ora                     ; $a6 ORA
>8c02	07 9f					.word	Assemble_pha                     ; $a7 PHA
>8c04	f3 9e					.word	Assemble_php                     ; $a8 PHP
>8c06	4f 9f					.word	Assemble_phx                     ; $a9 PHX
>8c08	0f 9f					.word	Assemble_phy                     ; $aa PHY
>8c0a	17 9f					.word	Assemble_pla                     ; $ab PLA
>8c0c	fb 9e					.word	Assemble_plp                     ; $ac PLP
>8c0e	63 9f					.word	Assemble_plx                     ; $ad PLX
>8c10	1f 9f					.word	Assemble_ply                     ; $ae PLY
>8c12	76 9e					.word	Assemble_rol                     ; $af ROL
>8c14	80 9e					.word	Assemble_ror                     ; $b0 ROR
>8c16	03 9f					.word	Assemble_rti                     ; $b1 RTI
>8c18	13 9f					.word	Assemble_rts                     ; $b2 RTS
>8c1a	6d 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c1c	ff 9e					.word	Assemble_sec                     ; $b4 SEC
>8c1e	5f 9f					.word	Assemble_sed                     ; $b5 SED
>8c20	1b 9f					.word	Assemble_sei                     ; $b6 SEI
>8c22	61 9e					.word	Assemble_sta                     ; $b7 STA
>8c24	53 9f					.word	Assemble_stp                     ; $b8 STP
>8c26	85 9e					.word	Assemble_stx                     ; $b9 STX
>8c28	a3 9e					.word	Assemble_sty                     ; $ba STY
>8c2a	99 9e					.word	Assemble_stz                     ; $bb STZ
>8c2c	37 9f					.word	Assemble_tax                     ; $bc TAX
>8c2e	33 9f					.word	Assemble_tay                     ; $bd TAY
>8c30	bc 9e					.word	Assemble_trb                     ; $be TRB
>8c32	b7 9e					.word	Assemble_tsb                     ; $bf TSB
>8c34	3f 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c36	27 9f					.word	Assemble_txa                     ; $c1 TXA
>8c38	2f 9f					.word	Assemble_txs                     ; $c2 TXS
>8c3a	2b 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c3c					StopCommand:
.8c3c	a9 08		lda #$08		lda	#8
.8c3e	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c41					ProcedureScan:
.8c41	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c43	85 30		sta $30				sta 	codePtr
.8c45	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c47	85 31		sta $31				sta 	codePtr+1
.8c49					_PSLoop:
.8c49	b2 30		lda ($30)			lda 	(codePtr)
.8c4b	f0 42		beq $8c8f			beq 	_PSExit
.8c4d	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c4f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c51	c9 a2		cmp #$a2			cmp 	#KWD_PROC
.8c53	d0 2d		bne $8c82			bne 	_PSNext
.8c55	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c56	b1 30		lda ($30),y			lda 	(codePtr),y
.8c58	29 c0		and #$c0			and 	#$C0
.8c5a	c9 40		cmp #$40			cmp 	#$40
.8c5c	d0 32		bne $8c90			bne 	_PSSyntax
.8c5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c60	18		clc				clc
.8c61	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c63	85 37		sta $37				sta 	zTemp0+1
.8c65	c8		iny				iny 								; LSB
.8c66	b1 30		lda ($30),y			lda 	(codePtr),y
.8c68	85 36		sta $36				sta 	zTemp0
.8c6a	c8		iny				iny 								; character after variable call.
.8c6b	98		tya				tya 								; save Y offset at +7
.8c6c	a0 07		ldy #$07			ldy 	#7
.8c6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8c70	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c72	a0 02		ldy #$02			ldy 	#2
.8c74	91 36		sta ($36),y			sta 	(zTemp0),y
.8c76	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c78					_PSCopy:
.8c78	b5 30		lda $30,x			lda 	safePtr,x
.8c7a	c8		iny				iny
.8c7b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7d	e8		inx				inx
.8c7e	e0 04		cpx #$04			cpx 	#4
.8c80	d0 f6		bne $8c78			bne 	_PSCopy
.8c82					_PSNext:
.8c82	18		clc				clc
.8c83	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c85	65 30		adc $30				adc 	codePtr
.8c87	85 30		sta $30				sta 	codePtr
.8c89	90 02		bcc $8c8d			bcc 	_CREExit
.8c8b	e6 31		inc $31				inc 	codePtr+1
.8c8d					_CREExit:
.8c8d	80 ba		bra $8c49			bra 	_PSLoop
.8c8f					_PSExit:
.8c8f	60		rts				rts
.8c90					_PSSyntax:
.8c90	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c93					ScanForward:
.8c93	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c95	86 37		stx $37				stx 	zTemp0+1
.8c97	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c99					_ScanLoop:
.8c99	b1 30		lda ($30),y			lda 	(codePtr),y
.8c9b	c8		iny				iny
.8c9c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c9e	d0 0e		bne $8cae			bne 	_ScanGoNext
.8ca0	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ca2	f0 04		beq $8ca8			beq 	_ScanMatch
.8ca4	c5 37		cmp $37				cmp 	zTemp0+1
.8ca6	d0 06		bne $8cae			bne 	_ScanGoNext
.8ca8					_ScanMatch:
.8ca8	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8caa	d0 01		bne $8cad			bne 	_ScanNotEndEOL
.8cac	88		dey				dey
.8cad					_ScanNotEndEOL:
.8cad	60		rts				rts
.8cae					_ScanGoNext:
.8cae	20 b3 8c	jsr $8cb3			jsr  	ScanForwardOne
.8cb1	80 e6		bra $8c99			bra 	_ScanLoop
.8cb3					ScanForwardOne:
.8cb3	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8cb5	90 3e		bcc $8cf5			bcc 	_SFWExit
.8cb7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8cb9	90 18		bcc $8cd3			bcc 	_ScanSkipOne
.8cbb	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8cbd	b0 2f		bcs $8cee			bcs 	_ScanSkipData
.8cbf	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8cc1	90 32		bcc $8cf5			bcc 	_SFWExit 					; if not, ordinary keywords.
.8cc3	c9 ab		cmp #$ab			cmp 	#KWC_LAST_STRUCTURE+1
.8cc5	b0 2e		bcs $8cf5			bcs 	_SFWExit
.8cc7	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cc9	c9 a5		cmp #$a5			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ccb	b0 28		bcs $8cf5			bcs 	_SFWExit
.8ccd	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8ccf	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cd1	80 22		bra $8cf5			bra 	_SFWExit
.8cd3					_ScanSkipOne:
.8cd3	c8		iny				iny 								; consume the extra one.
.8cd4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cd6	d0 1d		bne $8cf5			bne 	_SFWExit
.8cd8	18		clc				clc
.8cd9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cdb	65 30		adc $30				adc 	codePtr
.8cdd	85 30		sta $30				sta 	codePtr
.8cdf	90 02		bcc $8ce3			bcc 	_CREExit
.8ce1	e6 31		inc $31				inc 	codePtr+1
.8ce3					_CREExit:
.8ce3	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ce5	b2 30		lda ($30)			lda 	(codePtr)
.8ce7	d0 0c		bne $8cf5			bne 	_SFWExit 					; if not zero, more to scan
.8ce9	a9 13		lda #$13		lda	#19
.8ceb	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8cee					_ScanSkipData:
.8cee	88		dey				dey 								; point at data token
.8cef	c8		iny				iny
.8cf0	98		tya				tya
.8cf1	38		sec				sec
.8cf2	71 30		adc ($30),y			adc 	(codePtr),y
.8cf4	a8		tay				tay
.8cf5					_SFWExit:
.8cf5	60		rts				rts
.8cf6					ScanGetCurrentLineStep:
.8cf6	64 38		stz $38				stz 	zTemp1
.8cf8	a0 03		ldy #$03			ldy 	#3
.8cfa					_SGCLSLoop:
.8cfa	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfc	c8		iny				iny
.8cfd	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8cff	f0 05		beq $8d06			beq 	_SGCLSExit
.8d01	20 b3 8c	jsr $8cb3			jsr 	ScanForwardOne
.8d04	80 f4		bra $8cfa			bra 	_SGCLSLoop
.8d06					_SGCLSExit:
.8d06	a5 38		lda $38				lda 	zTemp1
.8d08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d09					Command_WHILE:
.8d09	5a		phy				phy 								; save position of the test
.8d0a	a2 00		ldx #$00			ldx 	#0
.8d0c	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; work out the number
.8d0f	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; check if zero
.8d12	f0 0e		beq $8d22			beq 	_WHExitLoop 				; if so exit the loop
.8d14	98		tya				tya 								; position *after* test.
.8d15	7a		ply				ply 								; restore position before test, at WHILE
.8d16	88		dey				dey
.8d17	48		pha				pha 								; push after test on the stack
.8d18	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d1a	20 5e a6	jsr $a65e			jsr 	StackOpen
.8d1d	20 a2 a6	jsr $a6a2			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d20	7a		ply				ply 								; restore the position *after* the test
.8d21	60		rts				rts
.8d22					_WHExitLoop:
.8d22	68		pla				pla 								; throw post loop position
.8d23	a9 aa		lda #$aa			lda 	#KWD_WEND 					; scan forward past WEND
.8d25	aa		tax				tax
.8d26	20 93 8c	jsr $8c93			jsr 	ScanForward
.8d29	60		rts				rts
.8d2a					Command_WEND:
.8d2a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d2c	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d2e	20 8a a6	jsr $a68a			jsr 	StackCheckFrame
.8d31	20 b3 a6	jsr $a6b3			jsr 	STKLoadCodePosition 		; loop back
.8d34	20 7c a6	jsr $a67c			jsr 	StackClose		 			; erase the frame
.8d37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d38					CheckRightBracket:
.8d38	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3a	c8		iny				iny
.8d3b	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d3d	d0 0f		bne $8d4e			bne 	CNAFail
.8d3f	60		rts				rts
.8d40					CheckComma:
.8d40	b1 30		lda ($30),y			lda 	(codePtr),y
.8d42	c8		iny				iny
.8d43	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d45	d0 07		bne $8d4e			bne 	CNAFail
.8d47	60		rts				rts
.8d48					CheckNextA:
.8d48	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d4a	d0 02		bne $8d4e			bne 	CNAFail
.8d4c	c8		iny				iny 								; skip character
.8d4d	60		rts				rts 								; and exit
.8d4e					CNAFail:
.8d4e	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d51					ErrorHandler:
.8d51	a8		tay				tay 								; find the error text
.8d52	f0 49		beq $8d9d			beq 	_EHEnd
.8d54	a2 00		ldx #$00			ldx 	#0
.8d56	a9 b7		lda #$b7			lda 	#((ErrorText) & $FF)
.8d58	85 36		sta $36				sta 	0+zTemp0
.8d5a	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d5c	85 37		sta $37				sta 	1+zTemp0
.8d5e					_EHFind:
.8d5e	88		dey				dey 								; found the error text ?
.8d5f	f0 0e		beq $8d6f			beq 	_EHFound
.8d61					_EHFindZero:
.8d61	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d63	e6 36		inc $36				inc 	zTemp0
.8d65	d0 02		bne $8d69			bne 	_EHFNoCarry
.8d67	e6 37		inc $37				inc 	zTemp0+1
.8d69					_EHFNoCarry:
.8d69	c9 00		cmp #$00			cmp 	#0
.8d6b	d0 f4		bne $8d61			bne 	_EHFindZero
.8d6d	80 ef		bra $8d5e			bra 	_EHFind
.8d6f					_EHFound:
.8d6f	a5 36		lda $36				lda 	zTemp0 						; print message
.8d71	a6 37		ldx $37				ldx 	zTemp0+1
.8d73	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8d76	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d78	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7a	d0 05		bne $8d81			bne 	_EHAtMsg
.8d7c	c8		iny				iny
.8d7d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7f	f0 17		beq $8d98			beq 	_EHCREnd
.8d81					_EHAtMsg:
.8d81	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d83	a9 a0		lda #$a0			lda 	#_AtMsg & $FF
.8d85	20 aa 8d	jsr $8daa			jsr 	PrintStringXA
.8d88	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d8a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8c	48		pha				pha
.8d8d	c8		iny				iny
.8d8e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d90	aa		tax				tax
.8d91	68		pla				pla
.8d92	20 63 92	jsr $9263			jsr 	LCLConvertInt16 				; convert XA to string
.8d95	20 aa 8d	jsr $8daa			jsr 	PrintStringXA 				; and print it.
.8d98					_EHCREnd:
.8d98	a9 0d		lda #$0d			lda 	#13 						; new line
.8d9a	20 9e a7	jsr $a79e			jsr 	EXTPrintCharacter
.8d9d					_EHEnd:
.8d9d	4c 53 83	jmp $8353			jmp 	WarmStart
>8da0	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8da8	20 00
.8daa					PrintStringXA:
.8daa	5a		phy				phy
.8dab	86 37		stx $37				stx 	zTemp0+1
.8dad	85 36		sta $36				sta 	zTemp0
.8daf	a0 00		ldy #$00			ldy 	#0
.8db1					_PSXALoop:
.8db1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db3	f0 06		beq $8dbb			beq 	_PSXAExit
.8db5	20 9e a7	jsr $a79e			jsr 	EXTPrintCharacter
.8db8	c8		iny				iny
.8db9	80 f6		bra $8db1			bra 	_PSXALoop
.8dbb					_PSXAExit:
.8dbb	7a		ply				ply
.8dbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8dbd					UnaryTrue:
.8dbd	fa		plx				plx
.8dbe					ReturnTrue:
.8dbe	a9 01		lda #$01			lda 	#1  						; set to 1
.8dc0	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.8dc3	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dc5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dc8	60		rts				rts
.8dc9					UnaryFalse:
.8dc9	fa		plx				plx
.8dca					ReturnFalse:
.8dca	4c 14 9e	jmp $9e14			jmp 	NSMSetZero 					; set it all to zero
.8dcd					BinaryCompareEqual:
.8dcd	fa		plx				plx
.8dce	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8dd1	c9 00		cmp #$00			cmp 	#0
.8dd3	f0 e9		beq $8dbe			beq 	ReturnTrue
.8dd5	80 f3		bra $8dca			bra 	ReturnFalse
.8dd7					BinaryCompareLess:
.8dd7	fa		plx				plx
.8dd8	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8ddb	c9 ff		cmp #$ff			cmp 	#$FF
.8ddd	f0 df		beq $8dbe			beq 	ReturnTrue
.8ddf	80 e9		bra $8dca			bra 	ReturnFalse
.8de1					BinaryCompareGreater:
.8de1	fa		plx				plx
.8de2	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8de5	c9 01		cmp #$01			cmp 	#1
.8de7	f0 d5		beq $8dbe			beq 	ReturnTrue
.8de9	80 df		bra $8dca			bra 	ReturnFalse
.8deb					BinaryCompareNotEqual:
.8deb	fa		plx				plx
.8dec	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8def	c9 00		cmp #$00			cmp 	#0
.8df1	d0 cb		bne $8dbe			bne 	ReturnTrue
.8df3	80 d5		bra $8dca			bra 	ReturnFalse
.8df5					BinaryCompareLessEqual:
.8df5	fa		plx				plx
.8df6	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8df9	c9 01		cmp #$01			cmp 	#1
.8dfb	d0 c1		bne $8dbe			bne 	ReturnTrue
.8dfd	80 cb		bra $8dca			bra 	ReturnFalse
.8dff					BinaryCompareGreaterEqual:
.8dff	fa		plx				plx
.8e00	20 09 8e	jsr $8e09			jsr 	CompareBaseCode
.8e03	c9 ff		cmp #$ff			cmp 	#$FF
.8e05	d0 b7		bne $8dbe			bne 	ReturnTrue
.8e07	80 c1		bra $8dca			bra 	ReturnFalse
.8e09					CompareBaseCode:
.8e09	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; make both values if references.
.8e0c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8e0f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e12	29 10		and #$10			and 	#NSTString
.8e14	d0 40		bne $8e56			bne 	_CBCString
.8e16	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8e19	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e1c	d0 3b		bne $8e59			bne 	_CBCFloat
.8e1e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e21	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e24	29 08		and #$08			and 	#NSTFloat
.8e26	d0 31		bne $8e59			bne 	_CBCFloat
.8e28	20 5c 8e	jsr $8e5c			jsr 	CompareFixMinusZero
.8e2b	e8		inx				inx
.8e2c	20 5c 8e	jsr $8e5c			jsr 	CompareFixMinusZero
.8e2f	ca		dex				dex
.8e30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e33	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e36	10 0b		bpl $8e43			bpl 	_CDCSameSign
.8e38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e3b	30 16		bmi $8e53			bmi 	_CBCLess 					; return $FF
.8e3d					_CBCGreater:
.8e3d	a9 01		lda #$01			lda 	#1
.8e3f	60		rts				rts
.8e40					_CBCEqual:
.8e40	a9 00		lda #$00			lda 	#0
.8e42	60		rts				rts
.8e43					_CDCSameSign:
.8e43	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; unsigned subtract
.8e46	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; or the mantissa together
.8e49	f0 f5		beq $8e40			beq 	_CBCEqual 					; -0 == 0
.8e4b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e4e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e51	10 ea		bpl $8e3d			bpl 	_CBCGreater
.8e53					_CBCLess:
.8e53	a9 ff		lda #$ff			lda 	#$FF
.8e55	60		rts				rts
.8e56					_CBCString:
.8e56	4c 05 90	jmp $9005			jmp 	CompareStrings
.8e59					_CBCFloat:
.8e59	4c e6 93	jmp $93e6			jmp 	CompareFloat
.8e5c					CompareFixMinusZero:
.8e5c	20 44 9e	jsr $9e44			jsr 	NSMIsZero
.8e5f	d0 03		bne $8e64			bne 	_CFXMZNotZero
.8e61	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e64					_CFXMZNotZero:
.8e64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e65					StringConcat:
.8e65	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e68	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e6b	29 18		and #$18			and 	#NSBTypeMask
.8e6d	c9 10		cmp #$10			cmp 	#NSTString
.8e6f	d0 4e		bne $8ebf			bne		_SCType
.8e71	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e73	e8		inx				inx
.8e74	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; setup for second
.8e77	20 9d 8e	jsr $8e9d			jsr 	_SCLengthZ0 				; length for second
.8e7a	ca		dex				dex
.8e7b	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; setup for first
.8e7e	20 9d 8e	jsr $8e9d			jsr 	_SCLengthZ0 				; length for first
.8e81	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e83	20 51 a7	jsr $a751			jsr 	StringTempAllocate
.8e86	20 b0 8e	jsr $8eb0			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e89	e8		inx				inx
.8e8a	20 92 8e	jsr $8e92			jsr 	_SCSetupZ0 					; copy second out
.8e8d	20 b0 8e	jsr $8eb0			jsr 	_SCCopy
.8e90	ca		dex				dex
.8e91	60		rts				rts
.8e92					_SCSetupZ0:
.8e92	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e95	85 36		sta $36				sta 	zTemp0
.8e97	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e9a	85 37		sta $37				sta 	zTemp0+1
.8e9c	60		rts				rts
.8e9d					_SCLengthZ0:
.8e9d	5a		phy				phy
.8e9e	a0 00		ldy #$00			ldy 	#0
.8ea0					_SCLenLoop:
.8ea0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea2	f0 0a		beq $8eae			beq 	_SCLExit
.8ea4	c8		iny				iny
.8ea5	e6 38		inc $38				inc 	zTemp1
.8ea7	10 f7		bpl $8ea0			bpl		_SCLenLoop
.8ea9	a9 09		lda #$09		lda	#9
.8eab	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8eae					_SCLExit:
.8eae	7a		ply				ply
.8eaf	60		rts				rts
.8eb0					_SCCopy:
.8eb0	5a		phy				phy
.8eb1	a0 00		ldy #$00			ldy 	#0
.8eb3					_SCCopyLoop:
.8eb3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eb5	f0 06		beq $8ebd			beq 	_SCCExit
.8eb7	20 8f a7	jsr $a78f			jsr 	StringTempWrite
.8eba	c8		iny				iny
.8ebb	80 f6		bra $8eb3			bra 	_SCCopyLoop
.8ebd					_SCCExit:
.8ebd	7a		ply				ply
.8ebe	60		rts				rts
.8ebf					_SCType:
.8ebf	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8ec2					IntegerDivide:
.8ec2	fa		plx				plx
.8ec3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ec6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ec9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eca	0a		asl a				asl 	a
.8ecb	10 05		bpl $8ed2			bpl 	_NotRef
.8ecd	48		pha				pha
.8ece	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ed1	68		pla				pla
.8ed2					_NotRef:
.8ed2	0a		asl a				asl 	a
.8ed3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ed5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ed8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8edb	f0 03		beq $8ee0			beq 	_IntegerCode 				; if clear, then we have two integers
.8edd	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.8ee0					_IntegerCode:
.8ee0	20 02 8f	jsr $8f02			jsr 	CheckDivideZero 			; do div zero check
.8ee3	20 3a 8f	jsr $8f3a			jsr 	Int32Divide 				; do the division
.8ee6	20 f7 8f	jsr $8ff7			jsr 	CalculateSign 				; calculate result sign
.8ee9					NSMCopyPlusTwoToZero:
.8ee9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8eec	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8eef	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ef2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ef5	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ef8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8efb	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8efe	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8f01	60		rts				rts
.8f02					CheckDivideZero:
.8f02	e8		inx				inx
.8f03	20 44 9e	jsr $9e44			jsr 	NSMIsZero
.8f06	f0 02		beq $8f0a			beq 	_CDVError
.8f08	ca		dex				dex
.8f09	60		rts				rts
.8f0a					_CDVError:
.8f0a	a9 03		lda #$03		lda	#3
.8f0c	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8f0f					IntegerModulus:
.8f0f	fa		plx				plx
.8f10	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f13	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f16	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f17	0a		asl a				asl 	a
.8f18	10 05		bpl $8f1f			bpl 	_NotRef
.8f1a	48		pha				pha
.8f1b	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f1e	68		pla				pla
.8f1f					_NotRef:
.8f1f	0a		asl a				asl 	a
.8f20	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f22	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f25	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f28	f0 03		beq $8f2d			beq 	_IntegerCode 				; if clear, then we have two integers
.8f2a	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.8f2d					_IntegerCode:
.8f2d					IntegerModulusNoCheck:
.8f2d	20 02 8f	jsr $8f02			jsr 	CheckDivideZero 			; do div zero check
.8f30	20 3a 8f	jsr $8f3a			jsr 	Int32Divide 				; do the division
.8f33	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f36	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f39	60		rts				rts
.8f3a					Int32Divide:
.8f3a	48		pha				pha 								; save AXY
.8f3b	5a		phy				phy
.8f3c	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f3f	20 10 9e	jsr $9e10			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f42	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f44					_I32DivideLoop:
.8f44	e8		inx				inx
.8f45	e8		inx				inx
.8f46	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f49	ca		dex				dex
.8f4a	ca		dex				dex
.8f4b	20 2a 9e	jsr $9e2a			jsr 	NSMRotateLeft
.8f4e	20 7a 8f	jsr $8f7a			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f51	90 03		bcc $8f56			bcc 	_I32DivideNoCarryIn
.8f53	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f56					_I32DivideNoCarryIn:
.8f56	88		dey				dey 								; loop round till division completed.
.8f57	d0 eb		bne $8f44			bne 	_I32DivideLoop
.8f59	7a		ply				ply 								; restore AXY and exit
.8f5a	68		pla				pla
.8f5b	60		rts				rts
.8f5c					Int32ShiftDivide:
.8f5c	48		pha				pha 								; save AY
.8f5d	5a		phy				phy
.8f5e	e8		inx				inx 								; clear S[X+2]
.8f5f	e8		inx				inx
.8f60	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.8f63	ca		dex				dex
.8f64	ca		dex				dex
.8f65	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f67					_I32SDLoop:
.8f67	20 7a 8f	jsr $8f7a			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f6a	e8		inx				inx
.8f6b	e8		inx				inx
.8f6c	20 2a 9e	jsr $9e2a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f6f	ca		dex				dex
.8f70	ca		dex				dex
.8f71	20 2a 9e	jsr $9e2a			jsr 	NSMRotateLeft
.8f74	88		dey				dey 	 							; do 31 times
.8f75	d0 f0		bne $8f67			bne 	_I32SDLoop
.8f77	7a		ply				ply 								; restore AY and exit
.8f78	68		pla				pla
.8f79	60		rts				rts
.8f7a					DivideCheckSubtract:
.8f7a	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f7d	b0 04		bcs $8f83			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f7f	20 89 90	jsr $9089			jsr 	AddTopTwoStack 				; add it back in
.8f82	18		clc				clc 								; and return False
.8f83					_DCSExit:
.8f83	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f84					MulInteger:
.8f84	fa		plx				plx
.8f85	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f88	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f8b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f8c	0a		asl a				asl 	a
.8f8d	10 05		bpl $8f94			bpl 	_NotRef
.8f8f	48		pha				pha
.8f90	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f93	68		pla				pla
.8f94					_NotRef:
.8f94	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f95	30 0b		bmi $8fa2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f97	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f9a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f9d	f0 06		beq $8fa5			beq 	_IntegerCode 				; if clear, then we have two integers
.8f9f	4c bd 94	jmp $94bd			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8fa2					_StringData:
.8fa2	4c b2 9f	jmp $9fb2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8fa5					_IntegerCode:
.8fa5	20 b2 8f	jsr $8fb2			jsr 	MultiplyShort
.8fa8	c9 00		cmp #$00			cmp 	#0
.8faa	f0 05		beq $8fb1			beq 	_MIExit
.8fac	a9 04		lda #$04		lda	#4
.8fae	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.8fb1					_MIExit:
.8fb1	60		rts				rts
.8fb2					MultiplyShort:
.8fb2	5a		phy				phy 								; save Y
.8fb3	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8fb6	20 10 9e	jsr $9e10			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8fb9	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fbb					_I32MLoop:
.8fbb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fbe	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fc1	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fc4	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fc7	f0 28		beq $8ff1			beq 	_I32MExit 					; exit if zero
.8fc9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fcc	29 01		and #$01			and 	#1
.8fce	f0 0e		beq $8fde			beq 	_I32MNoAdd
.8fd0	20 89 90	jsr $9089			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fd3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fd6	10 06		bpl $8fde			bpl 	_I32MNoAdd
.8fd8					_I32ShiftRight:
.8fd8	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift S[X] right
.8fdb	c8		iny				iny 								; increment shift count
.8fdc	80 0a		bra $8fe8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fde					_I32MNoAdd:
.8fde	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fe1	70 f5		bvs $8fd8			bvs 	_I32ShiftRight 				; instead.
.8fe3	e8		inx				inx
.8fe4	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fe7	ca		dex				dex
.8fe8					_I32MShiftUpper:
.8fe8	e8		inx				inx 								; shift S[X+2] right
.8fe9	e8		inx				inx
.8fea	20 37 9e	jsr $9e37			jsr 	NSMShiftRight
.8fed	ca		dex				dex
.8fee	ca		dex				dex
.8fef	80 ca		bra $8fbb			bra 	_I32MLoop 					; try again.
.8ff1					_I32MExit:
.8ff1	20 f7 8f	jsr $8ff7			jsr 	CalculateSign
.8ff4	98		tya				tya 								; shift in A
.8ff5	7a		ply				ply 								; restore Y and exit
.8ff6	60		rts				rts
.8ff7					CalculateSign:
.8ff7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8ffa	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8ffd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9000	0a		asl a				asl 	a 							; shift bit 7 into carry
.9001	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.9004	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9005					CompareStrings:
.9005	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9008	3d 01 04	and $0401,x			and 	NSStatus+1,x
.900b	29 10		and #$10			and 	#NSBIsString
.900d	f0 2c		beq $903b			beq 	_CSTypeError
.900f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9012	85 36		sta $36				sta 	zTemp0
.9014	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9017	85 37		sta $37				sta 	zTemp0+1
.9019	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.901c	85 38		sta $38				sta 	zTemp1
.901e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9021	85 39		sta $39				sta 	zTemp1+1
.9023	5a		phy				phy 								; save Y so we can access strings
.9024	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9026					_CSLoop:
.9026	c8		iny				iny
.9027	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9029	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.902b	d0 06		bne $9033			bne 	_CSDifferent
.902d	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.902f	d0 f5		bne $9026			bne 	_CSLoop 					; still comparing
.9031					_CSExit:
.9031	7a		ply				ply 								; reached end, return zero in A from EOS
.9032	60		rts				rts
.9033					_CSDifferent:
.9033	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9035	90 fa		bcc $9031			bcc		_CSExit
.9037	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9039	80 f6		bra $9031			bra 	_CSExit
.903b					_CSTypeError:
.903b	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.903e					ShiftLeft:
.903e	38		sec				sec
.903f	80 01		bra $9042			bra 	ShiftMain
.9041					ShiftRight:
.9041	18		clc				clc
.9042					ShiftMain:
.9042	fa		plx				plx 								; restore X
.9043	08		php				php 								; save direction
.9044	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9047	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.904a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.904b	0a		asl a				asl 	a
.904c	10 05		bpl $9053			bpl 	_NotRef
.904e	48		pha				pha
.904f	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9052	68		pla				pla
.9053					_NotRef:
.9053	0a		asl a				asl 	a
.9054	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9056	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9059	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.905c	f0 03		beq $9061			beq 	_IntegerCode 				; if clear, then we have two integers
.905e	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.9061					_IntegerCode:
.9061	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9064	29 e0		and #$e0			and 	#$E0
.9066	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9069	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.906c	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.906f	d0 13		bne $9084			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9071					_SMLoop:
.9071	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9074	30 11		bmi $9087			bmi 	_SMExit 					; exit if done.
.9076	28		plp				plp 								; restore direcition setting
.9077	08		php				php
.9078	90 05		bcc $907f			bcc 	_SMRight
.907a	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; shift left if CS
.907d	80 f2		bra $9071			bra 	_SMLoop
.907f					_SMRight:
.907f	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift right if CC
.9082	80 ed		bra $9071			bra 	_SMLoop
.9084					_SMExit0:
.9084	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; return zero.
.9087					_SMExit:
.9087	28		plp				plp 								; throw direction
.9088	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9089					AddTopTwoStack:
.9089	18		clc				clc
.908a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.908d	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9090	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9093	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9096	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9099	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.909c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.909f	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.90a2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90a5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90a8	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.90ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90ae	60		rts				rts
.90af					SubTopTwoStack:
.90af	38		sec				sec
.90b0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90b3	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.90b6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90b9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90bc	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90bf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90c2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90c5	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90c8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90cb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90ce	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90d1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90d4	60		rts				rts
.90d5					AddInteger:
.90d5	fa		plx				plx
.90d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90d9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90dc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90dd	0a		asl a				asl 	a
.90de	10 05		bpl $90e5			bpl 	_NotRef
.90e0	48		pha				pha
.90e1	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90e4	68		pla				pla
.90e5					_NotRef:
.90e5	0a		asl a				asl 	a 							; put MSB of type into A:7
.90e6	30 0b		bmi $90f3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90e8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90eb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90ee	f0 06		beq $90f6			beq 	_IntegerCode 				; if clear, then we have two integers
.90f0	4c 3d 93	jmp $933d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90f3					_StringData:
.90f3	4c 65 8e	jmp $8e65			jmp 	StringConcat							; at least one string - don't know both are strings.
.90f6					_IntegerCode:
.90f6					AddCode:
.90f6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90f9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90fc	10 8b		bpl $9089			bpl 	AddTopTwoStack
.90fe	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; do a physical subtraction
.9101	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9104	10 09		bpl $910f			bpl 	_AddExit
.9106	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9109	9d 00 04	sta $0400,x			sta 	NSStatus,x
.910c	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.910f					_AddExit:
.910f	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; check for -0
.9112	d0 03		bne $9117			bne 	_AddNonZero
.9114	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9117					_AddNonZero:
.9117	60		rts				rts
.9118					SubInteger:
.9118	fa		plx				plx
.9119	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.911c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.911f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9120	0a		asl a				asl 	a
.9121	10 05		bpl $9128			bpl 	_NotRef
.9123	48		pha				pha
.9124	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9127	68		pla				pla
.9128					_NotRef:
.9128	0a		asl a				asl 	a 							; put MSB of type into A:7
.9129	30 0b		bmi $9136			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.912b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.912e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9131	f0 06		beq $9139			beq 	_IntegerCode 				; if clear, then we have two integers
.9133	4c 42 93	jmp $9342			jmp 	FloatingPointSub 							; otherwise at least one float.
.9136					_StringData:
.9136	4c b2 9f	jmp $9fb2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9139					_IntegerCode:
.9139	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.913c	49 80		eor #$80			eor 	#$80
.913e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9141	80 b3		bra $90f6			bra 	AddCode 					; and do the same code as add.
.9143					AndInteger:
.9143	fa		plx				plx
.9144	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9147	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.914a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.914b	0a		asl a				asl 	a
.914c	10 05		bpl $9153			bpl 	_NotRef
.914e	48		pha				pha
.914f	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9152	68		pla				pla
.9153					_NotRef:
.9153	0a		asl a				asl 	a
.9154	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9156	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9159	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.915c	f0 03		beq $9161			beq 	_IntegerCode 				; if clear, then we have two integers
.915e	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.9161					_IntegerCode:
.9161	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9164	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9167	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.916a	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.916d	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9170	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9173	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9176	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9179	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.917c	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.917f	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9182	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9185	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9188	60		rts				rts
.9189					OraInteger:
.9189	fa		plx				plx
.918a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.918d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9190	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9191	0a		asl a				asl 	a
.9192	10 05		bpl $9199			bpl 	_NotRef
.9194	48		pha				pha
.9195	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9198	68		pla				pla
.9199					_NotRef:
.9199	0a		asl a				asl 	a
.919a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.919c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.919f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91a2	f0 03		beq $91a7			beq 	_IntegerCode 				; if clear, then we have two integers
.91a4	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.91a7					_IntegerCode:
.91a7	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91aa	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.91ad	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91b0	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91b3	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.91b6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91b9	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91bc	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91c2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91c5	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91c8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91cb	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91ce	60		rts				rts
.91cf					EorInteger:
.91cf	fa		plx				plx
.91d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91d3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91d6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91d7	0a		asl a				asl 	a
.91d8	10 05		bpl $91df			bpl 	_NotRef
.91da	48		pha				pha
.91db	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91de	68		pla				pla
.91df					_NotRef:
.91df	0a		asl a				asl 	a
.91e0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91e2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91e5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91e8	f0 03		beq $91ed			beq 	_IntegerCode 				; if clear, then we have two integers
.91ea	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.91ed					_IntegerCode:
.91ed	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91f0	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91f3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91f6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91f9	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91fc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91ff	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9202	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9205	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9208	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.920b	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.920e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9211	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9214	60		rts				rts
.9215					WordIndirect:
.9215	fa		plx				plx
.9216	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9219	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.921c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.921d	0a		asl a				asl 	a
.921e	10 05		bpl $9225			bpl 	_NotRef
.9220	48		pha				pha
.9221	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9224	68		pla				pla
.9225					_NotRef:
.9225	0a		asl a				asl 	a
.9226	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9228	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.922b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.922e	f0 03		beq $9233			beq 	_IntegerCode 				; if clear, then we have two integers
.9230	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.9233					_IntegerCode:
.9233	20 f6 90	jsr $90f6			jsr 	AddCode 					; add the two values
.9236	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9238	9d 00 04	sta $0400,x			sta 	NSStatus,x
.923b	60		rts				rts
.923c					ByteIndirect:
.923c	fa		plx				plx
.923d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9240	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9243	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9244	0a		asl a				asl 	a
.9245	10 05		bpl $924c			bpl 	_NotRef
.9247	48		pha				pha
.9248	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.924b	68		pla				pla
.924c					_NotRef:
.924c	0a		asl a				asl 	a
.924d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.924f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9252	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9255	f0 03		beq $925a			beq 	_IntegerCode 				; if clear, then we have two integers
.9257	4c a8 9f	jmp $9fa8			jmp 	TypeError 					; anything else, type mismatch.
.925a					_IntegerCode:
.925a	20 f6 90	jsr $90f6			jsr 	AddCode 					; add the two values
.925d	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.925f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9262	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9263					LCLConvertInt16:
.9263	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.9266	8e 10 04	stx $0410			stx 	NSMantissa1
.9269	9c 18 04	stz $0418			stz 	NSMantissa2
.926c	9c 20 04	stz $0420			stz 	NSMantissa3
.926f	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9272	a2 00		ldx #$00			ldx 	#0 							; stack level
.9274	a9 0a		lda #$0a			lda 	#10 						; base
.9276	80 00		bra $9278			bra 	ConvertInt32
.9278					ConvertInt32:
.9278	5a		phy				phy
.9279	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.927b	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.927e	10 08		bpl $9288			bpl 	_CI32NotNeg
.9280	48		pha				pha
.9281	a9 2d		lda #$2d			lda 	#'-'
.9283	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9286	c8		iny				iny
.9287	68		pla				pla
.9288					_CI32NotNeg:
.9288	20 96 92	jsr $9296			jsr 	_CI32DivideConvert 			; recursive conversion
.928b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.928d	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9290	7a		ply				ply
.9291	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9293	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.9295	60		rts				rts
.9296					_CI32DivideConvert:
.9296	e8		inx				inx 								; write to next slot up
.9297	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.929a	ca		dex				dex
.929b	20 3a 8f	jsr $8f3a			jsr 	Int32Divide 				; divide
.929e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.92a1	48		pha				pha
.92a2	20 e9 8e	jsr $8ee9			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92a5	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero ?
.92a8	f0 06		beq $92b0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92aa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92ad	20 96 92	jsr $9296			jsr 	_CI32DivideConvert 			; and recusrively call.
.92b0					_CI32NoRecurse:
.92b0	68		pla				pla 								; remainder
.92b1	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92b3	90 02		bcc $92b7			bcc 	_CI32NotHex
.92b5	69 26		adc #$26			adc 	#6+32
.92b7					_CI32NotHex:
.92b7	69 30		adc #$30			adc 	#48
.92b9	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92bc	c8		iny				iny
.92bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92be					PrecedenceLevel:
>92be	04					.byte	 4	; $00 <<
>92bf	02					.byte	 2	; $01 <=
>92c0	02					.byte	 2	; $02 <>
>92c1	00					.byte	 0	; $03 !!3
>92c2	00					.byte	 0	; $04 ><
>92c3	02					.byte	 2	; $05 >=
>92c4	04					.byte	 4	; $06 >>
>92c5	00					.byte	 0	; $07 !!7
>92c6	00					.byte	 0	; $08 !!8
>92c7	00					.byte	 0	; $09 !!9
>92c8	00					.byte	 0	; $0a !!10
>92c9	00					.byte	 0	; $0b !!11
>92ca	00					.byte	 0	; $0c !!12
>92cb	00					.byte	 0	; $0d !!13
>92cc	00					.byte	 0	; $0e !!14
>92cd	00					.byte	 0	; $0f !!15
>92ce	00					.byte	 0	; $10 @
>92cf	00					.byte	 0	; $11 !!17
>92d0	00					.byte	 0	; $12 !!18
>92d1	00					.byte	 0	; $13 [
>92d2	04					.byte	 4	; $14 \
>92d3	00					.byte	 0	; $15 ]
>92d4	01					.byte	 1	; $16 ^
>92d5	00					.byte	 0	; $17 _
>92d6	00					.byte	 0	; $18 `
>92d7	00					.byte	 0	; $19 !!25
>92d8	00					.byte	 0	; $1a !!26
>92d9	00					.byte	 0	; $1b {
>92da	01					.byte	 1	; $1c |
>92db	00					.byte	 0	; $1d }
>92dc	00					.byte	 0	; $1e ~
>92dd	00					.byte	 0	; $1f [7m<7F>[m
>92de	00					.byte	 0	; $20
>92df	05					.byte	 5	; $21 !
>92e0	00					.byte	 0	; $22 "
>92e1	00					.byte	 0	; $23 #
>92e2	05					.byte	 5	; $24 $
>92e3	04					.byte	 4	; $25 %
>92e4	01					.byte	 1	; $26 &
>92e5	00					.byte	 0	; $27 '
>92e6	00					.byte	 0	; $28 (
>92e7	00					.byte	 0	; $29 )
>92e8	04					.byte	 4	; $2a *
>92e9	03					.byte	 3	; $2b +
>92ea	00					.byte	 0	; $2c ,
>92eb	03					.byte	 3	; $2d -
>92ec	00					.byte	 0	; $2e .
>92ed	04					.byte	 4	; $2f /
>92ee	00					.byte	 0	; $30 0
>92ef	00					.byte	 0	; $31 1
>92f0	00					.byte	 0	; $32 2
>92f1	00					.byte	 0	; $33 3
>92f2	00					.byte	 0	; $34 4
>92f3	00					.byte	 0	; $35 5
>92f4	00					.byte	 0	; $36 6
>92f5	00					.byte	 0	; $37 7
>92f6	00					.byte	 0	; $38 8
>92f7	00					.byte	 0	; $39 9
>92f8	00					.byte	 0	; $3a :
>92f9	00					.byte	 0	; $3b ;
>92fa	02					.byte	 2	; $3c <
>92fb	02					.byte	 2	; $3d =
>92fc	02					.byte	 2	; $3e >
>92fd	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92fe					EvaluateExpressionAt0:
.92fe	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9300					EvaluateExpression:
.9300	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9302					EvaluateExpressionAtPrecedence:
.9302	48		pha				pha 								; save precedence level
.9303	20 da 97	jsr $97da			jsr 	EvaluateTerm 				; evaluate term into level X.
.9306	68		pla				pla 								; restore precedence level.
.9307					_EXPRLoop:
.9307	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9309	b1 30		lda ($30),y			lda 	(codePtr),y
.930b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.930d	b0 25		bcs $9334			bcs 	_EXPRExit
.930f	da		phx				phx 								; read the operator precedence
.9310	aa		tax				tax
.9311	bd be 92	lda $92be,x			lda 	PrecedenceLevel,x
.9314	fa		plx				plx
.9315	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9317	f0 1b		beq $9334			beq 	_EXPRExit
.9319	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.931b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.931d	c5 37		cmp $37				cmp 	zTemp0+1
.931f	b0 13		bcs $9334			bcs		_EXPRExit 					; if current >= operator exit
.9321	48		pha				pha 								; save current precedence.
.9322	b1 30		lda ($30),y			lda 	(codePtr),y
.9324	c8		iny				iny
.9325	48		pha				pha
.9326	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9328	e8		inx				inx 								; work out the right hand side.
.9329	20 02 93	jsr $9302			jsr 	EvaluateExpressionAtPrecedence
.932c	ca		dex				dex
.932d	68		pla				pla 								; get operator, call the code.
.932e	20 37 93	jsr $9337			jsr 	_EXPRCaller
.9331	68		pla				pla 								; restore precedence level
.9332	80 d3		bra $9307			bra 	_EXPRLoop 					; and go round.
.9334					_EXPRExit:
.9334	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9336	60		rts				rts
.9337					_EXPRCaller:
.9337	da		phx				phx 								; save on stack, first thing is to restore it
.9338	0a		asl a				asl 	a 							; double so can use vectors into X
.9339	aa		tax				tax
.933a	7c 7e 8a	jmp ($8a7e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.933d					FloatingPointAdd:
.933d	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.9340	80 0b		bra $934d			bra 	FloatAdd
.9342					FloatingPointSub:
.9342	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.9345					FloatSubtract:
.9345	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9348	49 80		eor #$80			eor 	#$80
.934a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.934d					FloatAdd:
.934d	48		pha				pha
.934e	5a		phy				phy
.934f	20 f7 94	jsr $94f7			jsr 	NSNormalise 				; normalise S[X]
.9352	f0 5c		beq $93b0			beq 	_FAReturn1
.9354	e8		inx				inx 								; normalise S[X+1]
.9355	20 f7 94	jsr $94f7			jsr 	NSNormalise
.9358	ca		dex				dex
.9359	c9 00		cmp #$00			cmp 	#0
.935b	f0 77		beq $93d4			beq 	_FAExit 					; if so, just return A
.935d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9360	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9363	f0 1b		beq $9380			beq 	_FAExponentsEqual
.9365	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9368	a8		tay				tay
.9369	38		sec				sec 								; do a signed comparison of the exponents.
.936a	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.936d	50 02		bvc $9371			bvc 	_FANoSignedChange
.936f	49 80		eor #$80			eor 	#$80
.9371					_FANoSignedChange:
.9371	29 80		and #$80			and 	#$80
.9373	10 03		bpl $9378			bpl 	_FAHaveMax
.9375	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9378					_FAHaveMax:
.9378	20 d7 93	jsr $93d7			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.937b	e8		inx				inx
.937c	20 d7 93	jsr $93d7			jsr 	_FAShiftToExponent
.937f	ca		dex				dex
.9380					_FAExponentsEqual:
.9380	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9383	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9386	30 10		bmi $9398			bmi 	_FADifferentSigns
.9388	20 89 90	jsr $9089			jsr 	AddTopTwoStack 				; do the add of the mantissae
.938b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.938e	10 44		bpl $93d4			bpl 	_FAExit 					; if no, we are done.
.9390	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9393	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9396	80 3c		bra $93d4			bra 	_FAExit
.9398					_FADifferentSigns:
.9398	20 af 90	jsr $90af			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.939b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.939e	10 06		bpl $93a6			bpl 	_FACheckZero 				; if no, check for -0
.93a0	20 c0 9d	jsr $9dc0			jsr 	NSMNegate 					; netate result
.93a3	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.93a6					_FACheckZero:
.93a6	20 44 9e	jsr $9e44			jsr 	NSMIsZero	 				; check for -0
.93a9	d0 29		bne $93d4			bne 	_FAExit
.93ab	9e 00 04	stz $0400,x			stz 	NSStatus,x
.93ae	80 24		bra $93d4			bra 	_FAExit
.93b0					_FAReturn1:
.93b0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93b3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93b6	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93b9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93bc	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93c2	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93c5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93c8	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93cb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93ce	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93d1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93d4					_FAExit:
.93d4	7a		ply				ply
.93d5	68		pla				pla
.93d6	60		rts				rts
.93d7					_FAShiftToExponent:
.93d7					_FAShiftToExponent2:
.93d7	98		tya				tya 								; compare Y to exponent
.93d8	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93db	f0 08		beq $93e5			beq 	_FASEExit 					; exit if so.
.93dd	20 37 9e	jsr $9e37			jsr 	NSMShiftRight	 			; shift the mantissa right
.93e0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93e3	80 f2		bra $93d7			bra 	_FAShiftToExponent2
.93e5					_FASEExit:
.93e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93e6					CompareFloat:
.93e6	20 45 93	jsr $9345			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93ec	29 f8		and #$f8			and 	#$F8
.93ee	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93f1	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93f4	f0 09		beq $93ff			beq 	_FCExit 					; zero, so approximately identical
.93f6	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93f8	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93fb	10 02		bpl $93ff			bpl 	_FCExit
.93fd					_FCNegative:
.93fd	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93ff					_FCExit:
.93ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9400					FDivideCommand:
.9400	fa		plx				plx	 								; restore stack position
.9401	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.9404					FloatDivide:
.9404	48		pha				pha
.9405	e8		inx				inx
.9406	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9409	ca		dex				dex
.940a	c9 00		cmp #$00			cmp 	#0
.940c	f0 20		beq $942e			beq 	_FDZero
.940e	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9411	f0 19		beq $942c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9413	20 5c 8f	jsr $8f5c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9416	20 e9 8e	jsr $8ee9			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9419	20 f7 94	jsr $94f7			jsr		NSNormalise 				; renormalise
.941c	20 f7 8f	jsr $8ff7			jsr 	CalculateSign 				; calculate result sign
.941f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9422	38		sec				sec
.9423	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9426	38		sec				sec
.9427	e9 1e		sbc #$1e			sbc 	#30
.9429	9d 28 04	sta $0428,x			sta 	NSExponent,x
.942c					_FDExit:
.942c	68		pla				pla
.942d	60		rts				rts
.942e					_FDZero:
.942e	a9 03		lda #$03		lda	#3
.9430	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9433					FloatFractionalPart:
.9433	5a		phy				phy
.9434	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.9437	29 7f		and #$7f			and 	#$7F
.9439	9d 00 04	sta $0400,x			sta 	NSStatus,x
.943c	20 f7 94	jsr $94f7			jsr 	NSNormalise
.943f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9442	38		sec				sec
.9443	e9 e0		sbc #$e0			sbc 	#$E0
.9445	90 31		bcc $9478			bcc 	_FFPExit 					; already fractional
.9447	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9449	b0 2a		bcs $9475			bcs 	_FFPZero
.944b	a8		tay				tay 								; put count to do in Y
.944c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.944f	20 7a 94	jsr $947a			jsr 	_FFPPartial
.9452	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9455	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9458	20 7a 94	jsr $947a			jsr 	_FFPPartial
.945b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.945e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9461	20 7a 94	jsr $947a			jsr 	_FFPPartial
.9464	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9467	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.946a	20 7a 94	jsr $947a			jsr 	_FFPPartial
.946d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9470	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; zeroed check.
.9473	d0 03		bne $9478			bne 	_FFPExit
.9475					_FFPZero:
.9475	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9478					_FFPExit:
.9478	7a		ply				ply
.9479	60		rts				rts
.947a					_FFPPartial:
.947a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.947c	f0 17		beq $9495			beq 	_FFFPPExit
.947e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9480	b0 0c		bcs $948e			bcs 	_FFFPPWholeByte
.9482	5a		phy				phy
.9483					_FFFPPLeft:
.9483	0a		asl a				asl 	a
.9484	88		dey				dey
.9485	d0 fc		bne $9483			bne 	_FFFPPLeft
.9487	7a		ply				ply
.9488					_FFFPPRight:
.9488	4a		lsr a				lsr 	a
.9489	88		dey				dey
.948a	d0 fc		bne $9488			bne 	_FFFPPRight
.948c	80 07		bra $9495			bra 	_FFFPPExit
.948e					_FFFPPWholeByte:
.948e	98		tya				tya 								; subtract 8 from count
.948f	38		sec				sec
.9490	e9 08		sbc #$08			sbc 	#8
.9492	a8		tay				tay
.9493	a9 00		lda #$00			lda 	#0 							; and clear all
.9495					_FFFPPExit:
.9495	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9496					FloatIntegerPart:
.9496	48		pha				pha
.9497	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.949a	f0 1f		beq $94bb			beq 	_FIPExit 					; if so do nothing
.949c	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; is it zero ?
.949f	f0 17		beq $94b8			beq 	_FIPZero 					; if so return zero.
.94a1	20 f7 94	jsr $94f7			jsr 	NSNormalise 				; normalise
.94a4	f0 12		beq $94b8			beq 	_FIPZero 					; normalised to zero, exit zero
.94a6					_FIPShift:
.94a6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.94a9	10 08		bpl $94b3			bpl 	_FIPCheckZero
.94ab	20 37 9e	jsr $9e37			jsr 	NSMShiftRight 				; shift mantissa right
.94ae	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.94b1	80 f3		bra $94a6			bra 	_FIPShift
.94b3					_FIPCheckZero:
.94b3	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; avoid -0 problem
.94b6	d0 03		bne $94bb			bne 	_FIPExit 					; set to zero if mantissa zero.
.94b8					_FIPZero:
.94b8	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.94bb					_FIPExit:
.94bb	68		pla				pla
.94bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94bd					FloatingPointMultiply:
.94bd	20 e6 94	jsr $94e6			jsr 	FloatPrepare 				; prepare for floats
.94c0					FloatMultiply:
.94c0	48		pha				pha
.94c1	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94c4	f0 1b		beq $94e1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94c6	e8		inx				inx
.94c7	20 f7 94	jsr $94f7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94ca	ca		dex				dex
.94cb	c9 00		cmp #$00			cmp 	#0
.94cd	f0 0f		beq $94de			beq 	_FDSetZero
.94cf	20 b2 8f	jsr $8fb2			jsr 	MultiplyShort 				; calculate the result.
.94d2	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94d5	18		clc				clc
.94d6	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94d9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94dc	80 03		bra $94e1			bra 	_FDExit
.94de					_FDSetZero:
.94de	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; return 0
.94e1					_FDExit:
.94e1	20 f7 94	jsr $94f7			jsr 	NSNormalise 				; normalise the result
.94e4	68		pla				pla
.94e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94e6					FloatPrepare:
.94e6	20 19 96	jsr $9619			jsr 	DereferenceTopTwo 			; dereference the top two values
.94e9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94ec	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94ef	29 10		and #$10			and 	#NSBIsString
.94f1	d0 01		bne $94f4			bne 	_FDType
.94f3	60		rts				rts
.94f4					_FDType:
.94f4	4c a8 9f	jmp $9fa8			jmp 	TypeError
.94f7					NSNormalise:
.94f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94fa	29 80		and #$80			and 	#$80
.94fc	09 08		ora #$08			ora 	#NSTFloat
.94fe	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9501	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; if zero exit
.9504	d0 09		bne $950f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9506	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.9509	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.950c	a9 00		lda #$00			lda 	#0 							; set Z flag
.950e	60		rts				rts
.950f					_NSNormaliseOptimise:
.950f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9512	d0 22		bne $9536			bne 	_NSNormaliseLoop
.9514	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.9517	30 1d		bmi $9536			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9519	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.951c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.951f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9522	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9525	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9528	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.952b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.952e	38		sec				sec
.952f	e9 08		sbc #$08			sbc 	#8
.9531	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9534	80 d9		bra $950f			bra 	_NSNormaliseOptimise
.9536					_NSNormaliseLoop:
.9536	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9539	70 08		bvs $9543			bvs 	_NSNExit 					; exit if so with Z flag clear
.953b	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; shift mantissa left
.953e	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9541	80 f3		bra $9536			bra 	_NSNormaliseLoop
.9543					_NSNExit:
.9543	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9545	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9546					AssignNumber:
.9546	5a		phy				phy
.9547	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.954a	85 36		sta $36				sta 	zTemp0
.954c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.954f	85 37		sta $37				sta 	zTemp0+1
.9551	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9554	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9556	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9559	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.955b	c9 08		cmp #$08			cmp 	#NSTFloat
.955d	f0 2a		beq $9589			beq 	_ANFloat
.955f	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9562	f0 05		beq $9569			beq		_ANNotFloat
.9564	e8		inx				inx
.9565	20 96 94	jsr $9496			jsr 	FloatIntegerPart 			; make it an integer
.9568	ca		dex				dex
.9569					_ANNotFloat:
.9569	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.956c	29 03		and #$03			and 	#3
.956e	d0 05		bne $9575			bne 	_ANByteWord
.9570	20 95 95	jsr $9595			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9573	80 1e		bra $9593			bra 	_ANExit
.9575					_ANByteWord:
.9575	48		pha				pha 								; save count
.9576	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9579	92 36		sta ($36)			sta 	(zTemp0)
.957b	68		pla				pla
.957c	c9 01		cmp #$01			cmp	 	#1
.957e	f0 13		beq $9593			beq 	_ANExit
.9580	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9583	a0 01		ldy #$01			ldy 	#1
.9585	91 36		sta ($36),y			sta 	(zTemp0),y
.9587	80 0a		bra $9593			bra 	_ANExit
.9589					_ANFloat:
.9589	20 95 95	jsr $9595			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.958c	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.958f	a0 04		ldy #$04			ldy 	#4
.9591	91 36		sta ($36),y			sta 	(zTemp0),y
.9593					_ANExit:
.9593	7a		ply				ply
.9594	60		rts				rts
.9595					_ANCopy4PackSign:
.9595	a0 03		ldy #$03			ldy 	#3
.9597	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.959a	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.959c	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.959f	91 36		sta ($36),y			sta 	(zTemp0),y
.95a1	88		dey				dey
.95a2	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.95a5	91 36		sta ($36),y			sta 	(zTemp0),y
.95a7	88		dey				dey
.95a8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95ab	91 36		sta ($36),y			sta 	(zTemp0),y
.95ad	88		dey				dey
.95ae	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b1	91 36		sta ($36),y			sta 	(zTemp0),y
.95b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.95b4					AssignString:
.95b4	5a		phy				phy
.95b5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95b8	85 38		sta $38				sta 	zTemp1
.95ba	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95bd	85 39		sta $39				sta 	zTemp1+1
.95bf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95c2	85 36		sta $36				sta 	zTemp0
.95c4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95c7	85 37		sta $37				sta 	zTemp0+1
.95c9	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.95cd	f0 23		beq $95f2			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95cf	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95d0	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95d2	e9 02		sbc #$02			sbc 	#2
.95d4	85 3c		sta $3c				sta 	zsTemp
.95d6	a0 01		ldy #$01			ldy 	#1
.95d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.95da	e9 00		sbc #$00			sbc 	#0
.95dc	85 3d		sta $3d				sta 	zsTemp+1
.95de	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95e0					_ASGetLength:
.95e0	c8		iny				iny
.95e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.95e3	d0 fb		bne $95e0			bne 	_ASGetLength
.95e5	98		tya				tya 								; is this length <= current length
.95e6	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95e8	90 20		bcc $960a			bcc 	_ASCopyString
.95ea	f0 1e		beq $960a			beq 	_ASCopyString
.95ec	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95ee	a0 01		ldy #$01			ldy 	#1
.95f0	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f2					_ASNewStringRequired:
.95f2	e8		inx				inx 								; concrete the new string.
.95f3	20 d0 a6	jsr $a6d0			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95f6	ca		dex				dex
.95f7	18		clc				clc
.95f8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95fb	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95fd	92 36		sta ($36)			sta 	(zTemp0)
.95ff	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9602	69 00		adc #$00			adc 	#0
.9604	a0 01		ldy #$01			ldy 	#1
.9606	91 36		sta ($36),y			sta 	(zTemp0),y
.9608	80 0d		bra $9617			bra 	_ASExit
.960a					_ASCopyString:
.960a	a0 00		ldy #$00			ldy 	#0
.960c					_ASCopyLoop:
.960c	b1 38		lda ($38),y			lda 	(zTemp1),y
.960e	c8		iny				iny
.960f	c8		iny				iny
.9610	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9612	88		dey				dey
.9613	c9 00		cmp #$00			cmp 	#0
.9615	d0 f5		bne $960c			bne 	_ASCopyLoop
.9617					_ASExit:
.9617	7a		ply				ply
.9618	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9619					DereferenceTopTwo:
.9619	e8		inx				inx
.961a	20 1e 96	jsr $961e			jsr 	Dereference 				; deref x+1
.961d	ca		dex				dex  								; falls through to deref x
.961e					Dereference:
.961e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9621	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9623	f0 57		beq $967c			beq 	_DRFExit 					; not a reference
.9625	5a		phy				phy
.9626	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9629	85 36		sta $36				sta 	zTemp0
.962b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.962e	85 37		sta $37				sta 	zTemp0+1
.9630	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9633	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9635	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9638	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.963b	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.963d	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.963f	f0 0f		beq $9650			beq 	_DRFDereferenceTwo
.9641	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9643	f0 39		beq $967e			beq 	_DRFFull
.9645	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9648	29 03		and #$03			and 	#3
.964a	f0 32		beq $967e			beq 	_DRFFull 					; the whole word
.964c	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.964e	f0 07		beq $9657			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9650					_DRFDereferenceTwo:
.9650	a0 01		ldy #$01			ldy 	#1
.9652	b1 36		lda ($36),y			lda 	(zTemp0),y
.9654	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9657					_DRFClear23:
.9657	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.965a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.965d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9660	29 18		and #$18			and 	#NSBTypeMask
.9662	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9665	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9667	d0 12		bne $967b			bne 	_DRFNotString
.9669	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.966c	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.966f	d0 0a		bne $967b			bne 	_DRFNotString
.9671	a9 7d		lda #$7d			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9673	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9676	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9678	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.967b					_DRFNotString
.967b	7a		ply				ply 								; restore Y and exit
.967c					_DRFExit:
.967c	60		rts				rts
.967d					_DRFNullString:
>967d	00						.byte 	0
.967e					_DRFFull:
.967e	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9680	b1 36		lda ($36),y			lda 	(zTemp0),y
.9682	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9685	c8		iny				iny
.9686	b1 36		lda ($36),y			lda 	(zTemp0),y
.9688	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.968b	c8		iny				iny
.968c	b1 36		lda ($36),y			lda 	(zTemp0),y
.968e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9691	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9694	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9697	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9699	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.969c	f0 06		beq $96a4			beq 	_DRFNoExponent
.969e	c8		iny				iny 								; if not, read the exponent as well.
.969f	b1 36		lda ($36),y			lda 	(zTemp0),y
.96a1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.96a4					_DRFNoExponent:
.96a4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.96a7	10 0d		bpl $96b6			bpl 	_DRFExit2 					; if not, then exit.
.96a9	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.96ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.96b1	09 80		ora #$80			ora 	#NSBIsNegative
.96b3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96b6					_DRFExit2:
.96b6	7a		ply				ply
.96b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.96b8					EncodeNumberStart:
.96b8	38		sec				sec
.96b9	80 01		bra $96bc			bra 	EncodeNumberContinue+1
.96bb					EncodeNumberContinue:
.96bb	18		clc				clc
.96bc					EncodeNumber:
.96bc	08		php				php 								; save reset.
.96bd	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96bf	f0 12		beq $96d3			beq 	_ENIsOkay
.96c1	c9 30		cmp #$30			cmp 	#"0"
.96c3	90 04		bcc $96c9			bcc 	_ENBadNumber
.96c5	c9 3a		cmp #$3a			cmp 	#"9"+1
.96c7	90 0a		bcc $96d3			bcc 	_ENIsOkay
.96c9					_ENBadNumber:
.96c9	28		plp				plp 								; throw saved reset
.96ca	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96cd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96cf	f0 7e		beq $974f			beq 	_ENConstructFinal
.96d1					_ENFail:
.96d1	18		clc				clc 								; not allowed
.96d2	60		rts				rts
.96d3					_ENIsOkay:
.96d3	28		plp				plp 								; are we restarting
.96d4	90 15		bcc $96eb			bcc 	_ENNoRestart
.96d6					_ENStartEncode:
.96d6	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96d8	f0 0c		beq $96e6			beq 	_ENFirstDP
.96da	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96dc	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.96df	a9 01		lda #$01			lda 	#ESTA_Low
.96e1					_ENExitChange:
.96e1	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96e4	38		sec				sec
.96e5	60		rts				rts
.96e6					_ENFirstDP:
.96e6	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; clear integer part
.96e9	80 3f		bra $972a			bra 	_ESTASwitchFloat			; go straight to float and exi
.96eb					_ENNoRestart:
.96eb	48		pha				pha 								; save on stack.
.96ec	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96ef	c9 01		cmp #$01			cmp 	#ESTA_Low
.96f1	f0 09		beq $96fc			beq  	_ESTALowState
.96f3	c9 02		cmp #$02			cmp 	#ESTA_High
.96f5	f0 29		beq $9720			beq 	_ESTAHighState
.96f7	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96f9	f0 3b		beq $9736			beq 	_ESTADecimalState
>96fb	db						.byte 	$DB 						; causes a break in the emulator
.96fc					_ESTALowState:
.96fc	68		pla				pla 								; get value back
.96fd	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96ff	f0 29		beq $972a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9701	29 0f		and #$0f			and 	#15 						; make digit
.9703	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9706	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9709	0a		asl a				asl 	a
.970a	0a		asl a				asl 	a
.970b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.970e	0a		asl a				asl 	a
.970f	6d 86 04	adc $0486			adc 	DigitTemp
.9712	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9715	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9717	90 05		bcc $971e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9719	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.971b	8d 85 04	sta $0485			sta 	EncodeState
.971e					_ESTANoSwitch:
.971e	38		sec				sec
.971f	60		rts				rts
.9720					_ESTAHighState:
.9720	68		pla				pla 								; get value back
.9721	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9723	f0 05		beq $972a			beq 	_ESTASwitchFloat
.9725	20 89 97	jsr $9789			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9728	38		sec				sec
.9729	60		rts				rts
.972a					_ESTASwitchFloat:
.972a	9c 87 04	stz $0487			stz 	DecimalCount
.972d	e8		inx				inx 								; zero the decimal additive.
.972e	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9731	ca		dex				dex
.9732	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9734	80 ab		bra $96e1			bra 	_ENExitChange
.9736					_ESTADecimalState:
.9736	68		pla				pla 								; digit.
.9737	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9739	f0 96		beq $96d1			beq 	_ENFail
.973b	e8		inx				inx 								; put digit into fractional part of X+1
.973c	20 89 97	jsr $9789			jsr 	ESTAShiftDigitIntoMantissa
.973f	ca		dex				dex
.9740	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9743	ad 87 04	lda $0487			lda 	DecimalCount
.9746	c9 0b		cmp #$0b			cmp 	#11
.9748	f0 02		beq $974c			beq 	_ESTADSFail
.974a	38		sec				sec
.974b	60		rts				rts
.974c					_ESTADSFail:
.974c	4c a3 9f	jmp $9fa3			jmp 	RangeError
.974f					_ENConstructFinal:
.974f	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9752	f0 33		beq $9787			beq 	_ENCFExit 					; no decimals
.9754	5a		phy				phy
.9755	0a		asl a				asl 	a 							; x 4 and CLC
.9756	0a		asl a				asl 	a
.9757	6d 87 04	adc $0487			adc 	DecimalCount
.975a	a8		tay				tay
.975b	b9 62 9f	lda $9f62,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.975e	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9761	b9 63 9f	lda $9f63,y			lda 	DecimalScalarTable-5+1,y
.9764	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9767	b9 64 9f	lda $9f64,y			lda 	DecimalScalarTable-5+2,y
.976a	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.976d	b9 65 9f	lda $9f65,y			lda 	DecimalScalarTable-5+3,y
.9770	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9773	b9 66 9f	lda $9f66,y			lda 	DecimalScalarTable-5+4,y
.9776	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9779	a9 08		lda #$08			lda 	#NSTFloat
.977b	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.977e	7a		ply				ply
.977f	e8		inx				inx 								; multiply decimal const by decimal scalar
.9780	20 c0 94	jsr $94c0			jsr 	FloatMultiply
.9783	ca		dex				dex
.9784	20 4d 93	jsr $934d			jsr 	FloatAdd 					; add to integer part.
.9787					_ENCFExit:
.9787	18		clc				clc 								; reject the digit.
.9788	60		rts				rts
.9789					ESTAShiftDigitIntoMantissa:
.9789	29 0f		and #$0f			and 	#15 						; save digit
.978b	48		pha				pha
.978c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.978f	48		pha				pha
.9790	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9793	48		pha				pha
.9794	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9797	48		pha				pha
.9798	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.979b	48		pha				pha
.979c	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 2
.979f	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 4
.97a2	18		clc				clc 								; pop mantissa and add
.97a3	68		pla				pla
.97a4	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97a7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97aa	68		pla				pla
.97ab	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.97ae	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97b1	68		pla				pla
.97b2	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.97b5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97b8	68		pla				pla
.97b9	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97bc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97bf	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 10
.97c2	68		pla				pla 								; add digit
.97c3	18		clc				clc
.97c4	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97c7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97ca	90 0d		bcc $97d9			bcc 	_ESTASDExit
.97cc	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97cf	d0 08		bne $97d9			bne 	_ESTASDExit
.97d1	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97d4	d0 03		bne $97d9			bne 	_ESTASDExit
.97d6	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97d9					_ESTASDExit:
.97d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97da					EvaluateTerm:
.97da	b1 30		lda ($30),y			lda 	(codePtr),y
.97dc	30 18		bmi $97f6			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97de	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97e0	b0 6f		bcs $9851			bcs 	_ETVariable
.97e2	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97e4	90 6e		bcc $9854			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97e6	c9 3a		cmp #$3a			cmp 	#'9'+1
.97e8	b0 6a		bcs $9854			bcs 	_ETPuncUnary
.97ea	20 b8 96	jsr $96b8			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97ed					_ETNumber:
.97ed	c8		iny				iny 								; keep encoding until we have the numbers
.97ee	b1 30		lda ($30),y			lda 	(codePtr),y
.97f0	20 bb 96	jsr $96bb			jsr 	EncodeNumberContinue
.97f3	b0 f8		bcs $97ed			bcs 	_ETNumber 					; go back if accepted.
.97f5	60		rts				rts
.97f6					_ETCheckUnary:
.97f6	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97f8	f0 41		beq $983b			beq 	_ETString
.97fa	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97fc	f0 12		beq $9810			beq 	_ETHexConstant
.97fe	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9800	90 0b		bcc $980d			bcc 	_ETSyntaxError
.9802	c9 a0		cmp #$a0			cmp 	#KWC_LAST_UNARY+1
.9804	b0 07		bcs $980d			bcs 	_ETSyntaxError
.9806	da		phx				phx 								; push X on the stack
.9807	0a		asl a				asl 	a 							; put vector x 2 into X
.9808	aa		tax				tax
.9809	c8		iny				iny 								; consume unary function token
.980a	7c fe 8a	jmp ($8afe,x)			jmp 	(VectorSet0,x) 				; and do it.
.980d					_ETSyntaxError:
.980d	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.9810					_ETHexConstant:
.9810	c8		iny				iny 								; skip #
.9811	c8		iny				iny 								; skip count
.9812	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; clear result
.9815					_ETHLoop:
.9815	b1 30		lda ($30),y			lda 	(codePtr),y
.9817	c8		iny				iny 								; and consume
.9818	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.981a	f0 1e		beq $983a			beq 	_ETHExit
.981c	48		pha				pha 								; save on stack.
.981d	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 2
.9820	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 4
.9823	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 8
.9826	20 29 9e	jsr $9e29			jsr 	NSMShiftLeft 				; x 16
.9829	68		pla				pla 								; ASCII
.982a	c9 41		cmp #$41			cmp 	#'A'
.982c	90 02		bcc $9830			bcc 	_ETHNotChar
.982e	e9 07		sbc #$07			sbc 	#7
.9830					_ETHNotChar:
.9830	29 0f		and #$0f			and 	#15 						; digit now
.9832	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9835	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9838	80 db		bra $9815			bra 	_ETHLoop 					; go round.
.983a					_ETHExit:
.983a	60		rts				rts
.983b					_ETString:
.983b	c8		iny				iny 								; look at length
.983c	b1 30		lda ($30),y			lda 	(codePtr),y
.983e	48		pha				pha
.983f	c8		iny				iny 								; first character
.9840	20 0c a2	jsr $a20c			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9843	68		pla				pla 								; restore count and save
.9844	85 36		sta $36				sta 	zTemp0
.9846	98		tya				tya 								; add length to Y to skip it.
.9847	18		clc				clc
.9848	65 36		adc $36				adc 	zTemp0
.984a	a8		tay				tay
.984b	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.984d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9850	60		rts				rts
.9851					_ETVariable:
.9851	4c ab 98	jmp $98ab			jmp 	VariableHandler
.9854					_ETPuncUnary:
.9854	c8		iny				iny 								; consume the unary character
.9855	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9857	f0 2d		beq $9886			beq 	_ETUnaryNegate
.9859	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.985b	f0 39		beq $9896			beq 	_ETDereference
.985d	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.985f	f0 43		beq $98a4			beq 	_ETParenthesis
.9861	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9863	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9865	f0 06		beq $986d			beq 	_ETIndirection
.9867	e6 36		inc $36				inc 	zTemp0
.9869	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.986b	d0 a0		bne $980d			bne 	_ETSyntaxError
.986d					_ETIndirection:
.986d	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.986f	1a		inc a				inc 	a
.9870	48		pha				pha
.9871	20 da 97	jsr $97da			jsr 	EvaluateTerm				; evaluate the term
.9874	20 1e 96	jsr $961e			jsr 	Dereference 				; dereference it.
.9877	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.987a	d0 07		bne $9883			bne 	_ETTypeMismatch
.987c	68		pla				pla 								; indirection 1-2
.987d	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.987f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9882	60		rts				rts
.9883					_ETTypeMismatch:
.9883	4c a8 9f	jmp $9fa8			jmp 	TypeError
.9886					_ETUnaryNegate:
.9886	20 da 97	jsr $97da			jsr 	EvaluateTerm				; evaluate the term
.9889	20 1e 96	jsr $961e			jsr 	Dereference 				; dereference it.
.988c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.988f	29 10		and #$10			and 	#NSTString
.9891	d0 f0		bne $9883			bne 	_ETTypeMismatch
.9893	4c c0 9d	jmp $9dc0			jmp 	NSMNegate  					; just toggles the sign bit.
.9896					_ETDereference:
.9896	20 da 97	jsr $97da			jsr 	EvaluateTerm				; evaluate the term
.9899	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.989c	29 20		and #$20			and 	#NSBIsReference
.989e	f0 e3		beq $9883			beq 	_ETTypeMismatch
.98a0	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.98a3	60		rts				rts
.98a4					_ETParenthesis:
.98a4	20 00 93	jsr $9300			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.98a7	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check for )
.98aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.98ab					VariableHandler:
.98ab	b1 30		lda ($30),y			lda 	(codePtr),y
.98ad	18		clc				clc
.98ae	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98b0	85 37		sta $37				sta 	zTemp0+1
.98b2	c8		iny				iny
.98b3	b1 30		lda ($30),y			lda 	(codePtr),y
.98b5	85 36		sta $36				sta 	zTemp0
.98b7	c8		iny				iny
.98b8	18		clc				clc									; copy variable address+3 to mantissa
.98b9	69 03		adc #$03			adc 	#3
.98bb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98be	a5 37		lda $37				lda 	zTemp0+1
.98c0	69 00		adc #$00			adc 	#0
.98c2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98c5	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98c8	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98cb	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98ce	5a		phy				phy
.98cf	a0 02		ldy #$02			ldy 	#2 							; read type
.98d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d3	7a		ply				ply
.98d4	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98d6	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98d8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98db	29 04		and #$04			and 	#NSBIsArray
.98dd	d0 01		bne $98e0			bne 	_VHArray
.98df	60		rts				rts
.98e0					_VHArray:
.98e0	e8		inx				inx
.98e1	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98e4	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98e6	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98e9	b1 30		lda ($30),y			lda 	(codePtr),y
.98eb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98ed	d0 06		bne $98f5			bne 	_VHNoSecondIndex
.98ef	c8		iny				iny 								; skip the comma
.98f0	e8		inx				inx
.98f1	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98f4	ca		dex				dex
.98f5					_VHNoSecondIndex:
.98f5	ca		dex				dex 								; set X back.
.98f6	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; and check the right bracket.
.98f9	5a		phy				phy 								; save position
.98fa	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98fc	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98fe	f0 6b		beq $996b			beq 	_VHBadIndex
.9900	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9903	85 3e		sta $3e				sta 	zaTemp
.9905	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9908	85 3f		sta $3f				sta 	zaTemp+1
.990a	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.990c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990e	f0 02		beq $9912			beq 	_VHHas2Mask
.9910	a9 ff		lda #$ff			lda 	#$FF
.9912					_VHHas2Mask:
.9912	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9915	f0 54		beq $996b			beq 	_VHBadIndex
.9917	0a		asl a				asl 	a 							; carry will be set if a second index
.9918	90 09		bcc $9923			bcc 	_VHCheckFirstIndex
.991a	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.991c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.991e	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9921	90 48		bcc $996b			bcc 	_VHBadIndex
.9923					_VHCheckFirstIndex:
.9923	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9925	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9927	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.992a	90 3f		bcc $996b			bcc 	_VHBadIndex
.992c	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.992e	64 37		stz $37				stz 	zTemp0+1
.9930	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9933	30 0f		bmi $9944			bmi 	_VHNoMultiply
.9935	da		phx				phx
.9936	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9939	48		pha				pha
.993a	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.993c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.993e	1a		inc a				inc 	a 							; add 1 for zero base
.993f	fa		plx				plx
.9940	20 a9 9d	jsr $9da9			jsr 	Multiply8x8 				; calculate -> Z0
.9943	fa		plx				plx
.9944					_VHNoMultiply:
.9944	18		clc				clc
.9945	a5 36		lda $36				lda 	zTemp0
.9947	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.994a	85 36		sta $36				sta 	zTemp0
.994c	a5 37		lda $37				lda 	zTemp0+1
.994e	69 00		adc #$00			adc 	#0
.9950	85 37		sta $37				sta 	zTemp0+1
.9952	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9955	20 ef 84	jsr $84ef			jsr 	ScaleByBaseType
.9958	18		clc				clc
.9959	b2 3e		lda ($3e)			lda 	(zaTemp)
.995b	65 36		adc $36				adc 	zTemp0
.995d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9960	a0 01		ldy #$01			ldy 	#1
.9962	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9964	65 37		adc $37				adc 	zTemp0+1
.9966	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9969	7a		ply				ply 								; restore position
.996a	60		rts				rts
.996b					_VHBadIndex:
.996b	a9 17		lda #$17		lda	#23
.996d	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9970					AbsUnary:
.9970	fa		plx				plx 								; restore stack pos
.9971	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9974	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9977	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.997a	29 7f		and #$7f			and 	#$7F
.997c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.997f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9980					AllocUnary:
.9980	fa		plx				plx 								; restore stack pos
.9981	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger		; get bytes required.
.9984	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9987	da		phx				phx 								; save X/Y
.9988	5a		phy				phy
.9989	8a		txa				txa 								; copy X into Y
.998a	a8		tay				tay
.998b	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.998e	aa		tax				tax
.998f	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9992	20 9f 99	jsr $999f			jsr 	AllocateXABytes 			; allocate memory
.9995	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9998	8a		txa				txa
.9999	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.999c	7a		ply				ply
.999d	fa		plx				plx
.999e	60		rts				rts
.999f					AllocateXABytes:
.999f	5a		phy				phy
.99a0	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.99a3	84 36		sty $36				sty 	zTemp0
.99a5	5a		phy				phy
.99a6	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.99a9	84 37		sty $37				sty 	zTemp0+1
.99ab	5a		phy				phy
.99ac	18		clc				clc 								; add to low memory pointer
.99ad	6d 8c 04	adc $048c			adc 	lowMemPtr
.99b0	8d 8c 04	sta $048c			sta 	lowMemPtr
.99b3	8a		txa				txa
.99b4	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.99b7	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99ba	b0 2f		bcs $99eb			bcs 	CISSMemory
.99bc	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99bf					_ClearMemory:
.99bf	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99c2	c5 36		cmp $36				cmp 	zTemp0
.99c4	d0 07		bne $99cd			bne 	_CMClearNext
.99c6	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99c9	c5 37		cmp $37				cmp 	zTemp0+1
.99cb	f0 0c		beq $99d9			beq 	_CMExit
.99cd					_CMClearNext:
.99cd	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99cf	92 36		sta ($36)			sta 	(zTemp0)
.99d1	e6 36		inc $36				inc 	zTemp0
.99d3	d0 ea		bne $99bf			bne 	_ClearMemory
.99d5	e6 37		inc $37				inc		zTemp0+1
.99d7	80 e6		bra $99bf			bra 	_ClearMemory
.99d9					_CMExit:
.99d9	fa		plx				plx
.99da	68		pla				pla
.99db	7a		ply				ply
.99dc	60		rts				rts
.99dd					CheckIdentifierStringSpace:
.99dd	48		pha				pha
.99de	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99e1	18		clc				clc
.99e2	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99e4	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99e7	b0 02		bcs $99eb			bcs 	CISSMemory
.99e9	68		pla				pla
.99ea	60		rts				rts
.99eb					CISSMemory:
.99eb	a9 06		lda #$06		lda	#6
.99ed	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99f0					AscUnary:
.99f0	fa		plx				plx 								; restore stack pos
.99f1	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.99f4	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99f6	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.99f9	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.99fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99fd					FracUnary:
.99fd	fa		plx				plx 								; restore stack pos
.99fe	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9a01	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9a04	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a07	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a09	f0 04		beq $9a0f			beq 	_IUZero
.9a0b	20 33 94	jsr $9433			jsr 	FloatFractionalPart
.9a0e	60		rts				rts
.9a0f					_IUZero:
.9a0f	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9a12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a13					IntUnary:
.9a13	fa		plx				plx 								; restore stack pos
.9a14	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9a17	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9a1a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a1d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a1f	f0 03		beq $9a24			beq 	_IUExit
.9a21	20 96 94	jsr $9496			jsr 	FloatIntegerPart
.9a24					_IUExit:
.9a24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a25					LenUnary:
.9a25	fa		plx				plx 								; restore stack pos
.9a26	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.9a29	5a		phy				phy
.9a2a	a0 00		ldy #$00			ldy 	#0 							; find length
.9a2c					_LenFind:
.9a2c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a2e	f0 06		beq $9a36			beq 	_LenExit
.9a30	c8		iny				iny
.9a31	d0 f9		bne $9a2c			bne 	_LenFind
.9a33	4c a3 9f	jmp $9fa3			jmp 	RangeError 					; string > 255
.9a36					_LenExit:
.9a36	98		tya				tya
.9a37	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9a3a	7a		ply				ply
.9a3b	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9a3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a3f					Unary_Min:
.9a3f	a9 01		lda #$01			lda 	#1
.9a41	80 02		bra $9a45			bra 	UnaryMinMaxMain
.9a43					Unary_Max:
.9a43	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a45					UnaryMinMaxMain:
.9a45	fa		plx				plx 								; get index on number stack
.9a46	48		pha				pha 								; save comparator
.9a47	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get the first value.
.9a4a					_UMMMLoop:
.9a4a	b1 30		lda ($30),y			lda 	(codePtr),y
.9a4c	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a4e	f0 22		beq $9a72			beq 	_UMMMDone
.9a50	20 40 8d	jsr $8d40			jsr 	CheckComma 					; must be a comma
.9a53	e8		inx				inx
.9a54	20 34 9d	jsr $9d34			jsr 	EvaluateValue
.9a57	ca		dex				dex
.9a58	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a5b	e8		inx				inx
.9a5c	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a5f	e8		inx				inx
.9a60	20 09 8e	jsr $8e09			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a63	ca		dex				dex
.9a64	ca		dex				dex
.9a65	85 36		sta $36				sta 	zTemp0 						; save required result
.9a67	68		pla				pla 								; get and save comparator
.9a68	48		pha				pha
.9a69	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a6b	d0 dd		bne $9a4a			bne 	_UMMMLoop
.9a6d	20 75 9a	jsr $9a75			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a70	80 d8		bra $9a4a			bra 	_UMMMLoop
.9a72					_UMMMDone:
.9a72	68		pla				pla 								; throw the comparator
.9a73	c8		iny				iny 								; skip )
.9a74	60		rts				rts
.9a75					ExpCopyAboveDown:
.9a75	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a78	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a7b	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a7e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a81	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a84	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a87	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a8a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a8d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a90	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a93	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a96	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a9a					Unary_Not:
.9a9a	fa		plx				plx
.9a9b	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; get integer
.9a9e	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9aa1	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; zero mantissa ?
.9aa4	f0 04		beq $9aaa			beq 	_NotZero
.9aa6	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.9aa9	60		rts				rts
.9aaa					_NotZero:
.9aaa	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.9aad					_UNBad:
.9aad	4c ad 9f	jmp $9fad			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ab0					Unary_Random:
.9ab0	fa		plx				plx
.9ab1	20 2f 9b	jsr $9b2f			jsr 	Random32Bit 				; get a random number
.9ab4	20 14 9b	jsr $9b14			jsr 	URCopyToMantissa  			; put in mantissa
.9ab7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ab9	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9abb	f0 08		beq $9ac5			beq 	_URNoModulus
.9abd	e8		inx				inx
.9abe	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ac1	ca		dex				dex
.9ac2	20 2d 8f	jsr $8f2d			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9ac5					_URNoModulus:
.9ac5	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ac8	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9acb	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9ace	60		rts				rts
.9acf					Unary_Rnd:
.9acf	fa		plx				plx
.9ad0	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; number to use.
.9ad3	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; closing bracket
.9ad6	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ad9	f0 2b		beq $9b06			beq 	_URCopySeed
.9adb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ade	10 23		bpl $9b03			bpl 	_URDontSeed
.9ae0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ae3	49 17		eor #$17			eor 	#$17
.9ae5	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ae8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9aeb	49 a5		eor #$a5			eor 	#$A5
.9aed	8d 89 04	sta $0489			sta 	RandomSeed+1
.9af0	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9af3	49 c2		eor #$c2			eor 	#$C2
.9af5	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9af8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9afb	49 9d		eor #$9d			eor 	#$9D
.9afd	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9b00	20 2f 9b	jsr $9b2f			jsr 	Random32Bit
.9b03					_URDontSeed:
.9b03	20 2f 9b	jsr $9b2f			jsr 	Random32Bit 				; generate a number.
.9b06					_URCopySeed:
.9b06	20 14 9b	jsr $9b14			jsr 	URCopyToMantissa 			; copy into mantissa
.9b09	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9b0b	8d 28 04	sta $0428			sta 	NSExponent
.9b0e	a9 08		lda #$08			lda 	#NSTFloat
.9b10	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9b13	60		rts				rts
.9b14					URCopyToMantissa:
.9b14	ad 88 04	lda $0488			lda 	RandomSeed+0
.9b17	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b1a	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b1d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b20	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b23	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b26	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b29	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b2b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b2e	60		rts				rts
.9b2f					Random32Bit:
.9b2f	5a		phy				phy
.9b30	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b32	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b35	d0 03		bne $9b3a			bne 	_Random1
.9b37	a8		tay				tay 								; if so do it 256 times
.9b38	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b3a					_Random1:
.9b3a	0a		asl a				asl 	a 							; LSFR RNG
.9b3b	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b3e	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b41	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b44	90 02		bcc $9b48			bcc 	_Random2
.9b46	49 c5		eor #$c5			eor 	#$C5
.9b48					_Random2:
.9b48	88		dey				dey
.9b49	d0 ef		bne $9b3a			bne 	_Random1
.9b4b	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b4e	7a		ply				ply
.9b4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b50					SgnUnary:
.9b50	fa		plx				plx 								; restore stack pos
.9b51	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber 				; get a float or int
.9b54	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9b57	20 44 9e	jsr $9e44			jsr 	NSMIsZero 					; if zero
.9b5a	f0 10		beq $9b6c			beq 	_SGZero  					; return Int Zero
.9b5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b5f	48		pha				pha
.9b60	a9 01		lda #$01			lda 	#1 							; set to 1
.9b62	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9b65	68		pla				pla
.9b66	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b68	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b6b	60		rts				rts
.9b6c	20 14 9e	jsr $9e14	_SGZero:jsr 	NSMSetZero
.9b6f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b70					ValUnary:
.9b70	fa		plx				plx 								; restore stack pos
.9b71	20 86 9b	jsr $9b86			jsr 	ValMainCode 				; do the main val() code
.9b74	b0 01		bcs $9b77			bcs 	_VUError 					; couldn't convert
.9b76	60		rts				rts
.9b77					_VUError:
.9b77	4c a8 9f	jmp $9fa8			jmp 	TypeError
.9b7a					IsValUnary:
.9b7a	fa		plx				plx 								; restore stack pos
.9b7b	20 86 9b	jsr $9b86			jsr 	ValMainCode 				; do the main val() code
.9b7e	b0 03		bcs $9b83			bcs 	_VUBad
.9b80	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.9b83					_VUBad:
.9b83	4c ca 8d	jmp $8dca			jmp 	ReturnFalse
.9b86					ValMainCode:
.9b86	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.9b89	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check right bracket present
.9b8c	5a		phy				phy
.9b8d	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b8f	f0 17		beq $9ba8			beq 	_VMCFail2
.9b91	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b93	48		pha				pha 								; save first character
.9b94	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b96	d0 01		bne $9b99			bne 	_VMCStart
.9b98	c8		iny				iny 								; skip over -
.9b99					_VMCStart:
.9b99	38		sec				sec 								; initialise first time round.
.9b9a					_VMCNext:
.9b9a	c8		iny				iny 								; pre-increment
.9b9b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b9d	f0 0c		beq $9bab			beq 	_VMCSuccess 				; successful.
.9b9f	20 bc 96	jsr $96bc			jsr 	EncodeNumber 				; send it to the number-builder
.9ba2	90 03		bcc $9ba7			bcc 	_VMCFail 					; if failed, give up.
.9ba4	18		clc				clc 								; next time round, countinue
.9ba5	80 f3		bra $9b9a			bra 	_VMCNext
.9ba7					_VMCFail:
.9ba7	68		pla				pla
.9ba8					_VMCFail2:
.9ba8	7a		ply				ply
.9ba9	38		sec				sec
.9baa	60		rts				rts
.9bab					_VMCSuccess:
.9bab	a9 00		lda #$00			lda 	#0 							; construct final
.9bad	20 bc 96	jsr $96bc			jsr 	EncodeNumber
.9bb0	68		pla				pla
.9bb1	c9 2d		cmp #$2d			cmp 	#"-"
.9bb3	d0 03		bne $9bb8			bne 	_VMCNotNegative
.9bb5	20 c0 9d	jsr $9dc0			jsr		NSMNegate
.9bb8					_VMCNotNegative:
.9bb8	7a		ply				ply
.9bb9	18		clc				clc
.9bba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bbb					ChrUnary:
.9bbb	fa		plx				plx 								; restore stack pos
.9bbc	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger			; get value
.9bbf	48		pha				pha
.9bc0	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9bc3	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bc5	20 51 a7	jsr $a751			jsr 	StringTempAllocate
.9bc8	68		pla				pla 								; write number to it
.9bc9	20 8f a7	jsr $a78f			jsr 	StringTempWrite
.9bcc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bcd					SpcUnary:
.9bcd	fa		plx				plx 								; restore stack pos
.9bce	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger			; get value
.9bd1	5a		phy				phy
.9bd2	48		pha				pha 								; save count
.9bd3	20 51 a7	jsr $a751			jsr 	StringTempAllocate
.9bd6	7a		ply				ply 								; to do count in Y
.9bd7					_SpcLoop:
.9bd7	c0 00		cpy #$00			cpy 	#0
.9bd9	f0 08		beq $9be3			beq 	_SpcExit
.9bdb	a9 20		lda #$20			lda 	#32
.9bdd	20 8f a7	jsr $a78f			jsr 	StringTempWrite
.9be0	88		dey				dey
.9be1	80 f4		bra $9bd7			bra 	_SPCLoop
.9be3					_SpcExit:
.9be3	7a		ply				ply
.9be4	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.9be7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9be8					Unary_Str:
.9be8	fa		plx				plx
.9be9	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber  			; get number
.9bec	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; closing bracket
.9bef	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bf1	20 0a 9c	jsr $9c0a			jsr 	ConvertNumberToString 		; do the conversion.
.9bf4	a9 21		lda #$21			lda		#33 						; create buffer
.9bf6	20 51 a7	jsr $a751			jsr 	StringTempAllocate 			; allocate memory
.9bf9	da		phx				phx
.9bfa	a2 00		ldx #$00			ldx 	#0
.9bfc					_USCopy:
.9bfc	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bff	20 8f a7	jsr $a78f			jsr 	StringTempWrite
.9c02	e8		inx				inx
.9c03	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9c06	d0 f4		bne $9bfc			bne 	_USCopy
.9c08	fa		plx				plx
.9c09	60		rts				rts
.9c0a					ConvertNumberToString:
.9c0a	5a		phy				phy 								; save code position
.9c0b	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c0e	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c11	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c14	10 0a		bpl $9c20			bpl 	_CNTSNotNegative
.9c16	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c18	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c1b	a9 2d		lda #$2d			lda 	#"-"
.9c1d	20 86 9c	jsr $9c86			jsr 	WriteDecimalBuffer
.9c20					_CNTSNotNegative:
.9c20	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c23	f0 15		beq $9c3a			beq 	_CNTSNotFloat
.9c25	e8		inx				inx 								; round up
.9c26	a9 01		lda #$01			lda 	#1
.9c28	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9c2b	ca		dex				dex
.9c2c	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c2f	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c32	a9 08		lda #$08			lda 	#NSTFloat
.9c34	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c37	20 4d 93	jsr $934d			jsr 	FloatAdd
.9c3a					_CNTSNotFloat:
.9c3a	20 68 9c	jsr $9c68			jsr 	MakePlusTwoString
.9c3d	20 33 94	jsr $9433			jsr 	FloatFractionalPart 		; get the fractional part
.9c40	20 f7 94	jsr $94f7			jsr 	NSNormalise					; normalise , exit if zero
.9c43	f0 21		beq $9c66			beq 	_CNTSExit
.9c45	a9 2e		lda #$2e			lda 	#"."
.9c47	20 86 9c	jsr $9c86			jsr 	WriteDecimalBuffer 			; write decimal place
.9c4a					_CNTSDecimal:
.9c4a	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c4d	30 17		bmi $9c66			bmi 	_CNTSExit
.9c4f	e8		inx				inx 								; x 10.0
.9c50	a9 0a		lda #$0a			lda 	#10
.9c52	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.9c55	a9 08		lda #$08			lda 	#NSTFloat
.9c57	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c5a	ca		dex				dex
.9c5b	20 c0 94	jsr $94c0			jsr 	FloatMultiply
.9c5e	20 68 9c	jsr $9c68			jsr 	MakePlusTwoString
.9c61	20 33 94	jsr $9433			jsr 	FloatFractionalPart 		; get the fractional part
.9c64	80 e4		bra $9c4a			bra 	_CNTSDecimal 				; keep going.
.9c66					_CNTSExit:
.9c66	7a		ply				ply
.9c67	60		rts				rts
.9c68					MakePlusTwoString:
.9c68	da		phx				phx
.9c69	20 eb 9d	jsr $9deb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c6c	e8		inx				inx 								; access it
.9c6d	e8		inx				inx
.9c6e	20 96 94	jsr $9496			jsr 	FloatIntegerPart 			; make it an integer
.9c71	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c73	20 78 92	jsr $9278			jsr 	ConvertInt32
.9c76	a2 00		ldx #$00			ldx	 	#0
.9c78					_MPTSCopy:
.9c78	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c7b	20 86 9c	jsr $9c86			jsr 	WriteDecimalBuffer
.9c7e	e8		inx				inx
.9c7f	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c82	d0 f4		bne $9c78			bne 	_MPTSCopy
.9c84	fa		plx				plx
.9c85	60		rts				rts
.9c86					WriteDecimalBuffer:
.9c86	da		phx				phx
.9c87	ae 95 04	ldx $0495			ldx 	dbOffset
.9c8a	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c8d	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c90	ee 95 04	inc $0495			inc 	dbOffset
.9c93	fa		plx				plx
.9c94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c95					Unary_Left:
.9c95	fa		plx				plx
.9c96	18		clc				clc 								; only one parameter
.9c97	20 0c 9d	jsr $9d0c			jsr 	SubstringInitial 			; set up.
.9c9a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c9d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ca0	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ca3	80 2c		bra $9cd1			bra 	SubstringMain
.9ca5					Unary_Right:
.9ca5	fa		plx				plx
.9ca6	18		clc				clc 								; only one parameter
.9ca7	20 0c 9d	jsr $9d0c			jsr 	SubstringInitial 			; set up.
.9caa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9cad	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cb0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cb3	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cb6	b0 02		bcs $9cba			bcs 	_URNotUnderflow
.9cb8	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cba					_URNotUnderFlow:
.9cba	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9cbd	80 12		bra $9cd1			bra 	SubStringMain
.9cbf					Unary_Mid:
.9cbf	fa		plx				plx
.9cc0	38		sec				sec 								; two parameters
.9cc1	20 0c 9d	jsr $9d0c			jsr 	SubstringInitial 			; set up.
.9cc4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cc7	f0 05		beq $9cce			beq 	_UMError
.9cc9	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ccc	80 03		bra $9cd1			bra 	SubStringMain
.9cce					_UMError:
.9cce	4c ad 9f	jmp $9fad			jmp 	ArgumentError
.9cd1					SubStringMain:
.9cd1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cd4	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cd7	b0 2d		bcs $9d06			bcs 	_SSMNull 					; if so, return an empty string.
.9cd9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cdc	f0 28		beq $9d06			beq 	_SSMNull 					; return empty string.
.9cde	18		clc				clc 								; add the offset +1 to the address and
.9cdf	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ce2	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ce5	85 36		sta $36				sta 	zTemp0
.9ce7	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cea	69 00		adc #$00			adc 	#0
.9cec	85 37		sta $37				sta 	zTemp0+1
.9cee					_SSMNoCarry:
.9cee	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cf1	20 51 a7	jsr $a751			jsr 	StringTempAllocate 			; allocate that many characters
.9cf4	5a		phy				phy 								; save Y
.9cf5	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cf7					_SSMCopy:
.9cf7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cf9	f0 09		beq $9d04			beq 	_SSMEString 				; no more to copy
.9cfb	20 8f a7	jsr $a78f			jsr 	StringTempWrite 			; and write it out.
.9cfe	c8		iny				iny
.9cff	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d02	d0 f3		bne $9cf7			bne 	_SSMCopy
.9d04					_SSMEString:
.9d04	7a		ply				ply
.9d05					_SSMExit:
.9d05	60		rts				rts
.9d06					_SSMNull:
.9d06	a9 00		lda #$00			lda 	#0
.9d08	20 51 a7	jsr $a751			jsr 	StringTempAllocate
.9d0b	60		rts				rts
.9d0c					SubstringInitial:
.9d0c	da		phx				phx 								; save initial stack position
.9d0d	08		php				php 								; save carry on stack indicating 2 parameters
.9d0e	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get a string
.9d11	5a		phy				phy 								; calculate length to exponent.
.9d12	a0 ff		ldy #$ff			ldy 	#$FF
.9d14					_SIFindLength:
.9d14	c8		iny				iny
.9d15	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d17	d0 fb		bne $9d14			bne 	_SIFindLength
.9d19	98		tya				tya
.9d1a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d1d	7a		ply				ply
.9d1e	e8		inx				inx
.9d1f	20 40 8d	jsr $8d40			jsr 	CheckComma 					; comma next
.9d22	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get next parameter
.9d25	28		plp				plp 								; is it the last parameter ?
.9d26	90 07		bcc $9d2f			bcc 	_SSIExit 					; if so, exit.
.9d28	e8		inx				inx
.9d29	20 40 8d	jsr $8d40			jsr 	CheckComma 					; comma next
.9d2c	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get last parameter
.9d2f					_SSIExit:
.9d2f	fa		plx				plx
.9d30	20 38 8d	jsr $8d38			jsr 	CheckRightBracket 			; check closing bracket
.9d33	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d34					EvaluateValue:
.9d34	48		pha				pha
.9d35	20 00 93	jsr $9300			jsr		EvaluateExpression 			; expression
.9d38	20 1e 96	jsr $961e			jsr 	Dereference					; derefernce it
.9d3b	68		pla				pla
.9d3c	60		rts				rts
.9d3d					EvaluateNumber:
.9d3d	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get a value
.9d40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d43	29 10		and #$10			and 	#NSBIsString
.9d45	d0 16		bne $9d5d			bne 	HelperTypeError
.9d47	60		rts				rts
.9d48					EvaluateString:
.9d48	20 34 9d	jsr $9d34			jsr 	EvaluateValue 				; get a value
.9d4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d4e	29 10		and #$10			and 	#NSBIsString
.9d50	f0 0b		beq $9d5d			beq 	HelperTypeError
.9d52					CopyAddressToTemp0:
.9d52	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d55	85 36		sta $36				sta 	zTemp0
.9d57	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d5a	85 37		sta $37				sta 	zTemp0+1
.9d5c	60		rts				rts
.9d5d					HelperTypeError:
.9d5d	4c a8 9f	jmp $9fa8			jmp 	TypeError
.9d60					EvaluateInteger:
.9d60	20 3d 9d	jsr $9d3d			jsr 	EvaluateNumber
.9d63	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d66	d0 0a		bne $9d72			bne 	HelperValueError 			; if not, it's a float.
.9d68	60		rts				rts
.9d69					EvaluateUnsignedInteger:
.9d69	20 60 9d	jsr $9d60			jsr 	EvaluateInteger 			; check integer is +ve
.9d6c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d6f	30 01		bmi $9d72			bmi 	HelperValueError
.9d71	60		rts				rts
.9d72					HelperValueError:
.9d72	4c ad 9f	jmp $9fad			jmp 	ArgumentError
.9d75					Evaluate16BitInteger:
.9d75	20 69 9d	jsr $9d69			jsr	 	EvaluateUnsignedInteger		; get integer
.9d78	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d7b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d7e	d0 f2		bne $9d72			bne 	HelperValueError
.9d80	60		rts				rts
.9d81					Evaluate16BitIntegerSigned:
.9d81	20 60 9d	jsr $9d60			jsr	 	EvaluateInteger				; get integer
.9d84	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d87	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d8a	d0 e6		bne $9d72			bne 	HelperValueError
.9d8c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d8f	10 03		bpl $9d94			bpl 	_EISNotSigned
.9d91	20 c9 9d	jsr $9dc9			jsr 	NSMNegateMantissa
.9d94					_EISNotSigned:
.9d94	60		rts				rts
.9d95					Evaluate8BitInteger:
.9d95	20 69 9d	jsr $9d69			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d98	d0 d8		bne $9d72			bne 	HelperValueError
.9d9a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d9d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9da0	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9da3	d0 cd		bne $9d72			bne 	HelperValueError
.9da5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9da8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9da9					Multiply8x8:
.9da9	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9daa	85 36		sta $36			  	sta 	zTemp0
.9dac	86 37		stx $37				stx 	zTemp0+1
.9dae	a9 00		lda #$00			lda 	#0
.9db0	a2 08		ldx #$08			ldx 	#8
.9db2					_M88Loop:
.9db2	90 03		bcc $9db7			bcc 	_M88NoAdd
.9db4	18		clc				clc
.9db5	65 37		adc $37				adc 	zTemp0+1
.9db7					_M88NoAdd:
.9db7	6a		ror a				ror 	a
.9db8	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9dba	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9dbb	d0 f5		bne $9db2			bne 	_M88Loop
.9dbd	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9dbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dc0					NSMNegate:
.9dc0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dc3	49 80		eor #$80			eor 	#NSBIsNegative
.9dc5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dc8	60		rts				rts
.9dc9					NSMNegateMantissa:
.9dc9	38		sec				sec
.9dca	a9 00		lda #$00			lda 	#0
.9dcc	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dcf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dd2	a9 00		lda #$00			lda 	#0
.9dd4	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dd7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dda	a9 00		lda #$00			lda 	#0
.9ddc	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9ddf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9de2	a9 00		lda #$00			lda 	#0
.9de4	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9de7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dea	60		rts				rts
.9deb					NSMShiftUpTwo:
.9deb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dee	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9df1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9df4	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9df7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9dfa	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9dfd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e00	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e03	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e06	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e09	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e0c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e0f	60		rts				rts
.9e10					NSMSetZeroMantissaOnly:
.9e10	a9 00		lda #$00			lda 	#0
.9e12	80 08		bra $9e1c			bra 	NSMSetMantissa
.9e14					NSMSetZero:
.9e14	a9 00		lda #$00			lda 	#0
.9e16					NSMSetByte:
.9e16	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e19	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e1c					NSMSetMantissa:
.9e1c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e1f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e22	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e25	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e28	60		rts				rts
.9e29					NSMShiftLeft:
.9e29	18		clc				clc
.9e2a					NSMRotateLeft:
.9e2a	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e2d	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e30	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e33	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e36	60		rts				rts
.9e37					NSMShiftRight:
.9e37	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e3a	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e3d	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e40	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e43	60		rts				rts
.9e44					NSMIsZero:
.9e44	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e47	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e4a	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e4d	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e51					Assemble_ora:
.9e51	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e54	01					.byte $01
.9e55					Assemble_and:
.9e55	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e58	21					.byte $21
.9e59					Assemble_eor:
.9e59	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e5c	41					.byte $41
.9e5d					Assemble_adc:
.9e5d	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e60	61					.byte $61
.9e61					Assemble_sta:
.9e61	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e64	81					.byte $81
.9e65					Assemble_lda:
.9e65	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e68	a1					.byte $a1
.9e69					Assemble_cmp:
.9e69	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e6c	c1					.byte $c1
.9e6d					Assemble_sbc:
.9e6d	20 6b 80	jsr $806b		jsr	AssembleGroup1
>9e70	e1					.byte $e1
.9e71					Assemble_asl:
.9e71	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e74	02					.byte $02
>9e75	75					.byte $75
.9e76					Assemble_rol:
.9e76	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e79	22					.byte $22
>9e7a	75					.byte $75
.9e7b					Assemble_lsr:
.9e7b	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e7e	42					.byte $42
>9e7f	75					.byte $75
.9e80					Assemble_ror:
.9e80	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e83	62					.byte $62
>9e84	75					.byte $75
.9e85					Assemble_stx:
.9e85	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e88	82					.byte $82
>9e89	50					.byte $50
.9e8a					Assemble_ldx:
.9e8a	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e8d	a2					.byte $a2
>9e8e	d0					.byte $d0
.9e8f					Assemble_dec:
.9e8f	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e92	c2					.byte $c2
>9e93	55					.byte $55
.9e94					Assemble_inc:
.9e94	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e97	e2					.byte $e2
>9e98	55					.byte $55
.9e99					Assemble_stz:
.9e99	20 72 80	jsr $8072		jsr	AssembleGroup2
>9e9c	60					.byte $60
>9e9d	44					.byte $44
.9e9e					Assemble_bit:
.9e9e	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ea1	20					.byte $20
>9ea2	55					.byte $55
.9ea3					Assemble_sty:
.9ea3	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ea6	80					.byte $80
>9ea7	54					.byte $54
.9ea8					Assemble_ldy:
.9ea8	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eab	a0					.byte $a0
>9eac	d5					.byte $d5
.9ead					Assemble_cpy:
.9ead	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eb0	c0					.byte $c0
>9eb1	d4					.byte $d4
.9eb2					Assemble_cpx:
.9eb2	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eb5	e0					.byte $e0
>9eb6	d0					.byte $d0
.9eb7					Assemble_tsb:
.9eb7	20 72 80	jsr $8072		jsr	AssembleGroup2
>9eba	00					.byte $00
>9ebb	50					.byte $50
.9ebc					Assemble_trb:
.9ebc	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ebf	10					.byte $10
>9ec0	50					.byte $50
.9ec1					Assemble_jsr:
.9ec1	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ec4	14					.byte $14
>9ec5	10					.byte $10
.9ec6					Assemble_jmp:
.9ec6	20 72 80	jsr $8072		jsr	AssembleGroup2
>9ec9	40					.byte $40
>9eca	10					.byte $10
.9ecb					Assemble_bpl:
.9ecb	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ece	10					.byte $10
.9ecf					Assemble_bmi:
.9ecf	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ed2	30					.byte $30
.9ed3					Assemble_bvc:
.9ed3	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ed6	50					.byte $50
.9ed7					Assemble_bvs:
.9ed7	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9eda	70					.byte $70
.9edb					Assemble_bcc:
.9edb	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ede	90					.byte $90
.9edf					Assemble_bcs:
.9edf	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ee2	b0					.byte $b0
.9ee3					Assemble_bne:
.9ee3	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9ee6	d0					.byte $d0
.9ee7					Assemble_beq:
.9ee7	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9eea	f0					.byte $f0
.9eeb					Assemble_bra:
.9eeb	20 c3 80	jsr $80c3		jsr	AssembleGroup3
>9eee	80					.byte $80
.9eef					Assemble_brk:
.9eef	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ef2	00					.byte $00
.9ef3					Assemble_php:
.9ef3	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9ef6	08					.byte $08
.9ef7					Assemble_clc:
.9ef7	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9efa	18					.byte $18
.9efb					Assemble_plp:
.9efb	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9efe	28					.byte $28
.9eff					Assemble_sec:
.9eff	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f02	38					.byte $38
.9f03					Assemble_rti:
.9f03	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f06	40					.byte $40
.9f07					Assemble_pha:
.9f07	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f0a	48					.byte $48
.9f0b					Assemble_cli:
.9f0b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f0e	58					.byte $58
.9f0f					Assemble_phy:
.9f0f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f12	5a					.byte $5a
.9f13					Assemble_rts:
.9f13	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f16	60					.byte $60
.9f17					Assemble_pla:
.9f17	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f1a	68					.byte $68
.9f1b					Assemble_sei:
.9f1b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f1e	78					.byte $78
.9f1f					Assemble_ply:
.9f1f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f22	7a					.byte $7a
.9f23					Assemble_dey:
.9f23	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f26	88					.byte $88
.9f27					Assemble_txa:
.9f27	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f2a	8a					.byte $8a
.9f2b					Assemble_tya:
.9f2b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f2e	98					.byte $98
.9f2f					Assemble_txs:
.9f2f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f32	9a					.byte $9a
.9f33					Assemble_tay:
.9f33	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f36	a8					.byte $a8
.9f37					Assemble_tax:
.9f37	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f3a	aa					.byte $aa
.9f3b					Assemble_clv:
.9f3b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f3e	b8					.byte $b8
.9f3f					Assemble_tsx:
.9f3f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f42	ba					.byte $ba
.9f43					Assemble_iny:
.9f43	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f46	c8					.byte $c8
.9f47					Assemble_dex:
.9f47	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f4a	ca					.byte $ca
.9f4b					Assemble_cld:
.9f4b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f4e	d8					.byte $d8
.9f4f					Assemble_phx:
.9f4f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f52	da					.byte $da
.9f53					Assemble_stp:
.9f53	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f56	db					.byte $db
.9f57					Assemble_inx:
.9f57	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f5a	e8					.byte $e8
.9f5b					Assemble_nop:
.9f5b	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f5e	ea					.byte $ea
.9f5f					Assemble_sed:
.9f5f	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f62	f8					.byte $f8
.9f63					Assemble_plx:
.9f63	20 f9 80	jsr $80f9		jsr	AssembleGroup4
>9f66	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f67					DecimalScalarTable:
>9f67	66 66 66 66				.dword $66666666 ; 0.1
>9f6b	de					.byte $de
>9f6c	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f70	db					.byte $db
>9f71	4c 37 89 41				.dword $4189374c ; 0.001
>9f75	d8					.byte $d8
>9f76	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f7a	d4					.byte $d4
>9f7b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f7f	d1					.byte $d1
>9f80	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f84	ce					.byte $ce
>9f85	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f89	ca					.byte $ca
>9f8a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f8e	c7					.byte $c7
>9f8f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f93	c4					.byte $c4
>9f94	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f98	c0					.byte $c0
>9f99	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f9d	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f9e					SyntaxError:
.9f9e	a9 02		lda #$02		lda	#2
.9fa0	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fa3					RangeError:
.9fa3	a9 04		lda #$04		lda	#4
.9fa5	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fa8					TypeError:
.9fa8	a9 05		lda #$05		lda	#5
.9faa	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fad					ArgumentError:
.9fad	a9 07		lda #$07		lda	#7
.9faf	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fb2					NotDoneError:
.9fb2	a9 0c		lda #$0c		lda	#12
.9fb4	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.9fb7					ErrorText:
>9fb7	42 72 65 61 6b 00			.text	"Break",0
>9fbd	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fc5	72 72 6f 72 00
>9fca	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fd2	20 62 79 20 7a 65 72 6f 00
>9fdb	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fe3	61 6e 67 65 00
>9fe8	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9ff0	6d 61 74 63 68 00
>9ff6	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9ffe	65 6d 6f 72 79 00
>a004	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a00c	61 72 67 75 6d 65 6e 74 00
>a015	53 74 6f 70 00				.text	"Stop",0
>a01a	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a022	6f 6f 20 6c 6f 6e 67 00
>a02a	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a032	6e 20 66 61 69 6c 65 64 00
>a03b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a043	61 74 61 00
>a047	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a04f	65 6e 74 65 64 00
>a055	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a05d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a069	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a071	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a07e	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a086	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a093	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a09b	68 6f 75 74 20 57 68 69 6c 65 00
>a0a6	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a0ae	68 6f 75 74 20 46 6f 72 00
>a0b7	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0bf	61 63 6b 20 66 75 6c 6c 00
>a0c8	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0d0	75 63 74 75 72 65 00
>a0d7	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0df	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0ec	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0f4	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a102	41 72 72 61 79 20 73 69			.text	"Array size",0
>a10a	7a 65 00
>a10d	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a115	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a11d	42 75 69 6c 74 20 4d 6f			.text "Built Monday 21-Nov-2022. Build 3407."
>a125	6e 64 61 79 20 32 31 2d 4e 6f 76 2d 32 30 32 32
>a135	2e 20 42 75 69 6c 64 20 33 34 30 37 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a142					MemoryDeleteLine:
.a142	20 61 a1	jsr $a161			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a145	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a147	a8		tay				tay
.a148					_MDDLLoop:
.a148	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a14a	92 30		sta ($30)			sta 	(codePtr)
.a14c	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a14e	c5 3a		cmp $3a				cmp 	zTemp2
.a150	d0 07		bne $a159			bne 	_MDLDLNext
.a152	a5 31		lda $31				lda 	codePtr+1
.a154	c5 3b		cmp $3b				cmp 	zTemp2+1
.a156	d0 01		bne $a159			bne 	_MDLDLNext
.a158					_MDDLExit:
.a158	60		rts				rts
.a159					_MDLDLNext:
.a159	e6 30		inc $30				inc 	codePtr						; next byte
.a15b	d0 eb		bne $a148			bne 	_MDDLLoop
.a15d	e6 31		inc $31				inc 	codePtr+1
.a15f	80 e7		bra $a148			bra 	_MDDLLoop
.a161					IMemoryFindEnd:
.a161	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a163	85 3a		sta $3a				sta 	0+zTemp2
.a165	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a167	85 3b		sta $3b				sta 	1+zTemp2
.a169					_MDLFELoop:
.a169	b2 3a		lda ($3a)			lda 	(zTemp2)
.a16b	f0 0b		beq $a178			beq 	_MDLFEExit
.a16d	18		clc				clc
.a16e	65 3a		adc $3a				adc 	zTemp2
.a170	85 3a		sta $3a				sta 	zTemp2
.a172	90 f5		bcc $a169			bcc 	_MDLFELoop
.a174	e6 3b		inc $3b				inc 	zTemp2+1
.a176	80 f1		bra $a169			bra 	_MDLFELoop
.a178					_MDLFEExit:
.a178	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a179					MemoryInsertLine:
.a179	08		php				php
.a17a	20 61 a1	jsr $a161			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a17d	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a17f	1a		inc a				inc 	a
.a180	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a182	b0 36		bcs $a1ba			bcs 	_MDLIError
.a184	28		plp				plp
.a185	90 08		bcc $a18f			bcc 	_MDLIFound
.a187	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a189	85 30		sta $30				sta 	codePtr
.a18b	a5 3b		lda $3b				lda 	zTemp2+1
.a18d	85 31		sta $31				sta 	codePtr+1
.a18f					_MDLIFound:
.a18f	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a192	a8		tay				tay
.a193					_MDLIInsert:
.a193	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a195	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a197	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a199	c5 3a		cmp $3a				cmp 	zTemp2
.a19b	d0 06		bne $a1a3			bne 	_MDLINext
.a19d	a5 31		lda $31				lda 	codePtr+1
.a19f	c5 3b		cmp $3b				cmp 	zTemp2+1
.a1a1	f0 0a		beq $a1ad			beq 	_MDLIHaveSpace
.a1a3					_MDLINext:
.a1a3	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a1a5	d0 02		bne $a1a9			bne 	_MDLINoBorrow
.a1a7	c6 3b		dec $3b				dec 	zTemp2+1
.a1a9					_MDLINoBorrow:
.a1a9	c6 3a		dec $3a				dec 	zTemp2
.a1ab	80 e6		bra $a193			bra 	_MDLIInsert
.a1ad					_MDLIHaveSpace:
.a1ad	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a1b0	88		dey				dey 								; from offset-1 to 0
.a1b1					_MDLICopy:
.a1b1	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a1b4	91 30		sta ($30),y			sta 	(codePtr),y
.a1b6	88		dey				dey
.a1b7	10 f8		bpl $a1b1			bpl 	_MDLICopy
.a1b9	60		rts				rts
.a1ba					_MDLIError:
.a1ba	a9 06		lda #$06		lda	#6
.a1bc	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a1bf					MDLAppendLine:
.a1bf	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1c1	85 36		sta $36				sta 	zTemp0
.a1c3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1c5	85 38		sta $38				sta 	0+zTemp1
.a1c7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1c9	85 39		sta $39				sta 	1+zTemp1
.a1cb	b2 38		lda ($38)			lda 	(zTemp1)
.a1cd	d0 0a		bne $a1d9			bne 	_MDLANoInitialise
.a1cf	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1d1	8d 2d 06	sta $062d			sta 	0+AppendPointer
.a1d4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1d6	8d 2e 06	sta $062e			sta 	1+AppendPointer
.a1d9					_MDLANoInitialise:
.a1d9	18		clc				clc
.a1da	ad 2d 06	lda $062d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1dd	85 38		sta $38				sta 	zTemp1
.a1df	72 36		adc ($36)			adc 	(zTemp0)
.a1e1	8d 2d 06	sta $062d			sta 	AppendPointer
.a1e4	ad 2e 06	lda $062e			lda 	AppendPointer+1
.a1e7	85 39		sta $39				sta 	zTemp1+1
.a1e9	69 00		adc #$00			adc 	#0
.a1eb	8d 2e 06	sta $062e			sta 	AppendPointer+1
.a1ee	a0 00		ldy #$00			ldy 	#0
.a1f0					_MDLACopy:
.a1f0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1f2	91 38		sta ($38),y			sta 	(zTemp1),y
.a1f4	c8		iny				iny
.a1f5	98		tya				tya
.a1f6	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1f8	d0 f6		bne $a1f0			bne 	_MDLACopy
.a1fa	a9 00		lda #$00			lda 	#0 							; end of program.
.a1fc	91 38		sta ($38),y			sta 	(zTemp1),y
.a1fe	60		rts				rts
.062d					AppendPointer:
>062d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1ff					MemoryNew:
.a1ff	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a201	85 30		sta $30				sta 	codePtr
.a203	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a205	85 31		sta $31				sta 	codePtr+1
.a207	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a209	92 30		sta ($30)			sta 	(codePtr)
.a20b	60		rts				rts
.a20c					MemoryInline:
.a20c	98		tya				tya 								; put address into stack,x
.a20d	18		clc				clc
.a20e	65 30		adc $30				adc 	codePtr
.a210	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a213	a5 31		lda $31				lda 	codePtr+1
.a215	69 00		adc #$00			adc 	#0
.a217	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a21a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a21d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a220	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a221					MemorySearch:
.a221	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a223	86 37		stx $37				stx 	zTemp0+1
.a225	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a227	85 30		sta $30				sta 	codePtr
.a229	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a22b	85 31		sta $31				sta 	codePtr+1
.a22d					_MTAXLoop:
.a22d	b2 30		lda ($30)			lda 	(codePtr)
.a22f	18		clc				clc
.a230	f0 21		beq $a253			beq 	_MTAXExit 					; reached end, exit with CC.
.a232	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a234	b1 30		lda ($30),y			lda 	(codePtr),y
.a236	38		sec				sec
.a237	e5 36		sbc $36				sbc 	zTemp0
.a239	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a23b	c8		iny				iny 								; do the MSB
.a23c	b1 30		lda ($30),y			lda 	(codePtr),y
.a23e	e5 37		sbc $37				sbc 	zTemp0+1
.a240	05 38		ora $38				ora 	zTemp1
.a242	f0 0f		beq $a253			beq 	_MTAXExit	 				; found
.a244	b0 0d		bcs $a253			bcs 	_MTAXExit 					; current < required exit
.a246	18		clc				clc
.a247	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a249	65 30		adc $30				adc 	codePtr
.a24b	85 30		sta $30				sta 	codePtr
.a24d	90 02		bcc $a251			bcc 	_CREExit
.a24f	e6 31		inc $31				inc 	codePtr+1
.a251					_CREExit:
.a251	80 da		bra $a22d			bra 	_MTAXLoop
.a253					_MTAXExit:
.a253	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcommand.asm

.a254					RectangleCommand:
.a254	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a256	80 02		bra $a25a			bra 	ShapeDrawCmd
.a258					CircleCommand:
.a258	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a25a					ShapeDrawCmd:
.a25a	20 e8 a2	jsr $a2e8			jsr 	RunGraphicsCommand
.a25d					ShapeDraw:
.a25d	0d 30 06	ora $0630			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a260	4c dc a2	jmp $a2dc			jmp 	ExecuteGraphicCommand	 	; and complete
.a263					SpriteCommand:
.a263	a2 00		ldx #$00			ldx 	#0
.a265	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get image number.
.a268	5a		phy				phy
.a269	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a26b	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a26e	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a270	b0 0d		bcs $a27f			bcs 	_SCRange
.a272	a0 ff		ldy #$ff			ldy 	#255
.a274	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a277	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a279	7a		ply				ply
.a27a	20 e8 a2	jsr $a2e8			jsr 	RunGraphicsCommand
.a27d	80 5d		bra $a2dc			bra 	ExecuteGraphicCommand
.a27f					_SCRange:
.a27f	4c a3 9f	jmp $9fa3			jmp 	RangeError
.a282					ImageCommand:
.a282	a2 00		ldx #$00			ldx 	#0
.a284	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get image number.
.a287	20 e8 a2	jsr $a2e8			jsr 	RunGraphicsCommand
.a28a					ImageRunDraw:
.a28a	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a28c	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a28f	ad 36 06	lda $0636			lda 	gxDrawScale
.a292	0a		asl a				asl 	a
.a293	0a		asl a				asl 	a
.a294	0a		asl a				asl 	a
.a295	a8		tay				tay
.a296	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a298	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a29b	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a29e	60		rts				rts
.a29f					TextCommand:
.a29f	a2 00		ldx #$00			ldx 	#0
.a2a1	20 48 9d	jsr $9d48			jsr 	EvaluateString 				; get text
.a2a4	20 e8 a2	jsr $a2e8			jsr 	RunGraphicsCommand
.a2a7					TextRunDraw:
.a2a7	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a2a9	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a2ac	a0 00		ldy #$00			ldy 	#0
.a2ae					_IRDLoop:
.a2ae	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a2b1	85 37		sta $37				sta 	zTemp0+1
.a2b3	ad 08 04	lda $0408			lda 	NSMantissa0
.a2b6	85 36		sta $36				sta 	zTemp0
.a2b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2ba	f0 13		beq $a2cf			beq 	_IRDExit
.a2bc	5a		phy				phy									; save string pos
.a2bd	48		pha				pha 								; save char
.a2be	ad 36 06	lda $0636			lda 	gxDrawScale 				; get scale
.a2c1	0a		asl a				asl 	a
.a2c2	0a		asl a				asl 	a
.a2c3	0a		asl a				asl 	a
.a2c4	a8		tay				tay
.a2c5	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a2c7	fa		plx				plx 								; char to draw
.a2c8	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a2cb	7a		ply				ply 								; restore string pos
.a2cc	c8		iny				iny
.a2cd	90 df		bcc $a2ae			bcc 	_IRDLoop 					; go back if no error.
.a2cf					_IRDExit:
.a2cf	60		rts				rts
.a2d0					PlotCommand:
.a2d0	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a2d2	20 e8 a2	jsr $a2e8			jsr 	RunGraphicsCommand
.a2d5	80 05		bra $a2dc			bra 	ExecuteGraphicCommand
.a2d7					LineCommand:
.a2d7	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a2d9	20 e8 a2	jsr $a2e8			jsr 	RunGraphicsCommand
.a2dc					ExecuteGraphicCommand:
.a2dc	0d 2f 06	ora $062f			ora 	gxCommandID 				; make a full command
.a2df	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw 				; draw it and exit
.a2e2	b0 01		bcs $a2e5			bcs 	_EGCError
.a2e4	60		rts				rts
.a2e5					_EGCError:
.a2e5	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.a2e8					RunGraphicsCommand:
.a2e8	8d 2f 06	sta $062f			sta 	gxCommandID					; save TODO graphics command.
.a2eb	68		pla				pla 								; pop handler address
.a2ec	fa		plx				plx
.a2ed	1a		inc a				inc 	a
.a2ee	d0 01		bne $a2f1			bne 	_RGINoCarry
.a2f0	e8		inx				inx
.a2f1					_RGINoCarry:
.a2f1	8d 34 06	sta $0634			sta 	GXHandler
.a2f4	8e 35 06	stx $0635			stx 	GXHandler+1
.a2f7					_RGICommandLoop:
.a2f7	b1 30		lda ($30),y			lda 	(codePtr),y
.a2f9	c8		iny				iny
.a2fa	c9 cd		cmp #$cd			cmp 	#KWD_TO						; is it TO x,y
.a2fc	f0 53		beq $a351			beq 	_RGI_To
.a2fe	c9 ba		cmp #$ba			cmp 	#KWD_HERE 					; do it here.
.a300	f0 55		beq $a357			beq 	_RGI_Here
.a302	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a304	f0 3d		beq $a343			beq 	_RGI_Exit
.a306	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a308	f0 39		beq $a343			beq 	_RGI_Exit
.a30a	c9 c1		cmp #$c1			cmp 	#KWD_OUTLINE 				; solid or outline
.a30c	f0 3e		beq $a34c			beq 	_RGI_Frame
.a30e	c9 c9		cmp #$c9			cmp 	#KWD_SOLID
.a310	f0 33		beq $a345			beq 	_RGI_Solid
.a312	c9 ab		cmp #$ab			cmp 	#KWD_BY 					; by offset
.a314	f0 4b		beq $a361			beq 	_RGI_By
.a316	c9 b6		cmp #$b6			cmp 	#KWD_FROM 					; from
.a318	f0 17		beq $a331			beq 	_RGI_Move2
.a31a	c9 b3		cmp #$b3			cmp 	#KWD_DIM 					; dim (set scale)
.a31c	f0 65		beq $a383			beq 	_RGI_Dim
.a31e	c9 b1		cmp #$b1			cmp 	#KWD_COLOUR 				; colour or Color
.a320	f0 78		beq $a39a			beq 	_RGI_Colour
.a322	c9 b0		cmp #$b0			cmp 	#KWD_COLOR
.a324	f0 74		beq $a39a			beq 	_RGI_Colour
.a326	ae 2f 06	ldx $062f			ldx 	gxCommandID
.a329	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a32b	d0 03		bne $a330			bne 	_RGI_Move 					; move
.a32d	4c c4 a3	jmp $a3c4			jmp		_RGI_SpriteInstructions
.a330					_RGI_Move:
.a330	88		dey				dey 								; unpick get.
.a331					_RGI_Move2:
.a331	20 ea a3	jsr $a3ea			jsr 	GCGetCoordinatePair 		; move to here
.a334	20 11 a4	jsr $a411			jsr 	GCCopyPairToStore 			; save
.a337	5a		phy				phy
.a338	20 07 a4	jsr $a407			jsr 	GCLoadAXY 					; load in
.a33b	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a33d	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a340	7a		ply				ply
.a341	80 b4		bra $a2f7			bra 	_RGICommandLoop 			; and go round
.a343					_RGI_Exit:
.a343	88		dey				dey 								; unpick : / EOL
.a344	60		rts				rts
.a345					_RGI_Solid:
.a345	a9 02		lda #$02			lda 	#2
.a347	8d 30 06	sta $0630			sta 	gxFillSolid
.a34a	80 ab		bra $a2f7			bra 	_RGICommandLoop
.a34c					_RGI_Frame:
.a34c	9c 30 06	stz $0630			stz 	gxFillSolid
.a34f	80 a6		bra $a2f7			bra 	_RGICommandLoop
.a351					_RGI_To:
.a351	20 ea a3	jsr $a3ea			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a354	20 11 a4	jsr $a411			jsr 	GCCopyPairToStore
.a357					_RGI_Here:
.a357	5a		phy				phy
.a358	20 07 a4	jsr $a407			jsr 	GCLoadAXY 					; load it into AXY
.a35b	20 c1 a3	jsr $a3c1			jsr 	_RGICallHandler 			; go do whatever it is.
.a35e	7a		ply				ply
.a35f	80 96		bra $a2f7			bra 	_RGICommandLoop 			; and go round
.a361					_RGI_By:
.a361	20 f7 a3	jsr $a3f7			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a364	18		clc				clc
.a365	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a368	6d 31 06	adc $0631			adc 	gxxPos
.a36b	8d 31 06	sta $0631			sta 	gxXPos
.a36e	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a371	6d 32 06	adc $0632			adc 	gxxPos+1
.a374	8d 32 06	sta $0632			sta 	gxXPos+1
.a377	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a37a	18		clc				clc
.a37b	6d 33 06	adc $0633			adc 	gxYPos
.a37e	8d 33 06	sta $0633			sta 	gxYPos
.a381	80 d4		bra $a357			bra 	_RGI_Here
.a383					_RGI_Dim:
.a383	a2 01		ldx #$01			ldx	 	#1
.a385	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a388	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a38b	c9 00		cmp #$00			cmp 	#0
.a38d	f0 2f		beq $a3be			beq 	_RGIRange
.a38f	c9 09		cmp #$09			cmp 	#8+1
.a391	b0 2b		bcs $a3be			bcs		_RGIRange
.a393	3a		dec a				dec 	a
.a394	8d 36 06	sta $0636			sta 	gxDrawScale
.a397	4c f7 a2	jmp $a2f7			jmp 	_RGICommandLoop
.a39a					_RGI_Colour:
.a39a	a2 01		ldx #$01			ldx 	#1 							; colour
.a39c	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a39f	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a3a1	20 14 9e	jsr $9e14			jsr 	NSMSetZero
.a3a4	b1 30		lda ($30),y			lda 	(codePtr),y
.a3a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a3a8	d0 04		bne $a3ae			bne 	_RGICDefaultMode
.a3aa	c8		iny				iny
.a3ab	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a3ae					_RGICDefaultMode:
.a3ae	5a		phy				phy
.a3af	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a3b1	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a3b4	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a3b7	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a3ba	7a		ply				ply
.a3bb	4c f7 a2	jmp $a2f7			jmp 	_RGICommandLoop 			; and go round
.a3be					_RGIRange:
.a3be	4c a3 9f	jmp $9fa3			jmp 	RangeError
.a3c1					_RGICallHandler:
.a3c1	6c 34 06	jmp ($0634)			jmp 	(GXHandler)
.a3c4					_RGI_SpriteInstructions:
.a3c4	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a3c6	f0 07		beq $a3cf			beq 	_RGISpriteOff
.a3c8	c9 bb		cmp #$bb			cmp 	#KWD_IMAGE
.a3ca	f0 13		beq $a3df			beq 	_RGISetImage
.a3cc	4c 30 a3	jmp $a330			jmp 	_RGI_Move
.a3cf					_RGISpriteOff:
.a3cf	5a		phy				phy
.a3d0	a0 01		ldy #$01			ldy 	#1
.a3d2	a2 00		ldx #$00			ldx 	#0
.a3d4					_RGIDoCommandLoop:
.a3d4	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a3d6	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a3d9	7a		ply				ply
.a3da	b0 e2		bcs $a3be			bcs 	_RGIRange
.a3dc	4c f7 a2	jmp $a2f7			jmp 	_RGICommandLoop
.a3df					_RGISetImage:
.a3df	a2 01		ldx #$01			ldx 	#1
.a3e1	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger
.a3e4	5a		phy				phy
.a3e5	aa		tax				tax
.a3e6	a0 00		ldy #$00			ldy 	#0
.a3e8	80 ea		bra $a3d4			bra 	_RGIDoCommandLoop
.a3ea					GCGetCoordinatePair:
.a3ea	a2 01		ldx #$01			ldx 	#1
.a3ec	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.a3ef	20 40 8d	jsr $8d40			jsr 	CheckComma
.a3f2	e8		inx				inx
.a3f3	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.a3f6	60		rts				rts
.a3f7					GCSignedCoordinatePair:
.a3f7	a2 01		ldx #$01			ldx 	#1
.a3f9	20 81 9d	jsr $9d81			jsr 	Evaluate16BitIntegerSigned
.a3fc	20 40 8d	jsr $8d40			jsr 	CheckComma
.a3ff	e8		inx				inx
.a400	20 81 9d	jsr $9d81			jsr 	Evaluate16BitIntegerSigned
.a403	60		rts				rts
.a404					_GCCPRange:
.a404	4c a3 9f	jmp $9fa3			jmp 	RangeError
.a407					GCLoadAXY:
.a407	ad 32 06	lda $0632			lda 	gxXPos+1
.a40a	ae 31 06	ldx $0631			ldx 	gxXPos
.a40d	ac 33 06	ldy $0633			ldy 	gxYPos
.a410	60		rts				rts
.a411					GCCopyPairToStore:
.a411	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a414	8d 31 06	sta $0631			sta 	gxXPos
.a417	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a41a	8d 32 06	sta $0632			sta 	gxXPos+1
.a41d	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a420	8d 33 06	sta $0633			sta 	gxYPos
.a423	60		rts				rts
.062f					gxCommandID:
>062f							.fill 	1
.0630					gxFillSolid:
>0630							.fill 	1
.0631					gxXPos:
>0631							.fill 	2
.0633					gxYPos:
>0633							.fill 	1
.0634					gxHandler:
>0634							.fill 	2
.0636					gxDrawScale:
>0636							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gcontrol.asm

.a424					BitmapCtrl:
.a424	b1 30		lda ($30),y			lda 	(codePtr),y
.a426	c8		iny				iny
.a427	a2 01		ldx #$01			ldx 	#1
.a429	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a42b	f0 11		beq $a43e			beq 	BitmapSwitch
.a42d	ca		dex				dex
.a42e	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a430	f0 0c		beq $a43e			beq 	BitmapSwitch
.a432	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get the colour
.a435	5a		phy				phy
.a436	aa		tax				tax
.a437	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a439	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a43c	7a		ply				ply
.a43d	60		rts				rts
.a43e					BitmapSwitch:
.a43e	5a		phy				phy
.a43f	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a441	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a443	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a446	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a448	a0 00		ldy #$00			ldy 	#0
.a44a	a2 ff		ldx #$ff			ldx 	#$FF
.a44c	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a44f	9c 30 06	stz $0630			stz 	gxFillSolid
.a452	9c 31 06	stz $0631			stz 	gxXPos
.a455	9c 32 06	stz $0632			stz 	gxXPos+1
.a458	9c 33 06	stz $0633			stz 	gxYPos
.a45b	9c 36 06	stz $0636			stz 	gxDrawScale
.a45e	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a460	a2 00		ldx #$00			ldx 	#0
.a462	a0 00		ldy #$00			ldy 	#0
.a464	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a467	7a		ply				ply
.a468	60		rts				rts
.a469					SpritesCtrl:
.a469	b1 30		lda ($30),y			lda 	(codePtr),y
.a46b	c8		iny				iny
.a46c	a2 01		ldx #$01			ldx 	#1
.a46e	c9 c0		cmp #$c0			cmp 	#KWD_ON
.a470	f0 08		beq $a47a			beq 	SpriteSwitch
.a472	ca		dex				dex
.a473	c9 bf		cmp #$bf			cmp 	#KWD_OFF
.a475	f0 03		beq $a47a			beq 	SpriteSwitch
.a477	4c 9e 9f	jmp $9f9e			jmp 	SyntaxError
.a47a					SpriteSwitch:
.a47a	5a		phy				phy
.a47b	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a47d	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a47f	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a482	7a		ply				ply
.a483	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/gfx.asm

.a484					GfxCommand:
.a484	a2 00		ldx #$00			ldx 	#0
.a486	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; command
.a489	20 40 8d	jsr $8d40			jsr 	CheckComma
.a48c	e8		inx				inx
.a48d	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; X
.a490	20 40 8d	jsr $8d40			jsr 	CheckComma
.a493	e8		inx				inx
.a494	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; Y
.a497	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a49a	4a		lsr a				lsr 	a
.a49b	d0 16		bne $a4b3			bne 	_GfxError
.a49d	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a4a0	b0 11		bcs $a4b3			bcs 	_GfxError 					; bit 7 should have been zero
.a4a2	5a		phy				phy 								; save pos
.a4a3	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a4a6	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a4a9	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a4ac	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw
.a4af	b0 02		bcs $a4b3			bcs 	_GfxError
.a4b1	7a		ply				ply 								; restore pos and exit.
.a4b2	60		rts				rts
.a4b3					_GfxError:
.a4b3	4c a3 9f	jmp $9fa3			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/hit.asm

.a4b6					UnaryHit:
.a4b6	fa		plx				plx
.a4b7	a9 36		lda #$36			lda 	#zTemp0
.a4b9	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4bc	20 40 8d	jsr $8d40			jsr 	CheckComma
.a4bf	e8		inx				inx
.a4c0	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4c3	20 38 8d	jsr $8d38			jsr		CheckRightBracket
.a4c6	ca		dex				dex 								; fix back up again.
.a4c7	da		phx				phx 								; save X/Y
.a4c8	5a		phy				phy
.a4c9	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a4cc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4cf	aa		tax				tax
.a4d0	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a4d2	20 8a aa	jsr $aa8a			jsr 	GXGraphicDraw 				; calculate result
.a4d5	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a4d6	7a		ply				ply 								; restore XY
.a4d7	fa		plx				plx
.a4d8	20 16 9e	jsr $9e16			jsr 	NSMSetByte 					; return the hit result
.a4db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/graphics/palette.asm

.a4dc					PaletteCommand:
.a4dc	a2 00		ldx #$00			ldx 	#0
.a4de	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; colour
.a4e1	20 40 8d	jsr $8d40			jsr 	CheckComma
.a4e4	e8		inx				inx
.a4e5	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; r
.a4e8	20 40 8d	jsr $8d40			jsr 	CheckComma
.a4eb	e8		inx				inx
.a4ec	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; g
.a4ef	20 40 8d	jsr $8d40			jsr 	CheckComma
.a4f2	e8		inx				inx
.a4f3	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; b
.a4f6	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a4f9	85 36		sta $36				sta 	zTemp0
.a4fb	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a4fd	85 37		sta $37				sta 	zTemp0+1
.a4ff	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a501	26 37		rol $37				rol	 	zTemp0+1
.a503	06 36		asl $36				asl 	zTemp0
.a505	26 37		rol $37				rol	 	zTemp0+1
.a507	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a509	85 01		sta $01				sta 	1
.a50b	5a		phy				phy
.a50c	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a50f	92 36		sta ($36)			sta 	(zTemp0)
.a511	a0 01		ldy #$01			ldy 	#1
.a513	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a516	91 36		sta ($36),y			sta 	(zTemp0),y
.a518	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a51b	c8		iny				iny
.a51c	91 36		sta ($36),y			sta 	(zTemp0),y
.a51e	7a		ply				ply
.a51f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/hardware/event.asm

.a520					UnaryEvent:
.a520	fa		plx				plx
.a521	20 c8 a5	jsr $a5c8			jsr 	TimerToStackX 				; timer in +0
.a524	e8		inx				inx  								; put reference into +1
.a525	20 da 97	jsr $97da			jsr 	EvaluateTerm
.a528	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a52b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a52d	d0 57		bne $a586			bne 	_UEType
.a52f	e8		inx				inx 								; put the step in +2
.a530	20 40 8d	jsr $8d40			jsr 	CheckComma
.a533	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger
.a536	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a539	ca		dex				dex
.a53a	ca		dex				dex
.a53b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a53e	85 36		sta $36				sta 	zTemp0
.a540	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a543	85 37		sta $37				sta 	zTemp0+1
.a545	5a		phy				phy
.a546	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a548	b1 36		lda ($36),y			lda 	(zTemp0),y
.a54a	30 36		bmi $a582			bmi 	_UEFalse 					; exit if signed.
.a54c	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a54e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a551	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a553	c8		iny				iny
.a554	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a557	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a559	c8		iny				iny
.a55a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a55d	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a55f	90 21		bcc $a582			bcc 	_UEFalse 					; no, return FALSE.
.a561	18		clc				clc
.a562	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a564	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a567	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a56a	91 36		sta ($36),y			sta 	(zTemp0),y
.a56c	c8		iny				iny
.a56d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a570	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a573	91 36		sta ($36),y			sta 	(zTemp0),y
.a575	c8		iny				iny
.a576	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a579	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a57c	91 36		sta ($36),y			sta 	(zTemp0),y
.a57e	7a		ply				ply
.a57f	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.a582					_UEFalse:
.a582	7a		ply				ply 								; restore Y
.a583	4c ca 8d	jmp $8dca			jmp 	ReturnFalse 				; and return False
.a586					_UEType:
.a586	4c a8 9f	jmp $9fa8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/hardware/joy.asm

.a589					UnaryJoyX:
.a589	18		clc				clc
.a58a	80 01		bra $a58d			bra 	JoyMain
.a58c					UnaryJoyY:
.a58c	38		sec				sec
.a58d					JoyMain:
.a58d	fa		plx				plx 								; get pos
.a58e	08		php				php 								; save carry (set for Y)
.a58f	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a592	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a595	20 43 aa	jsr $aa43			jsr 	EXTReadController 			; read the controller.
.a598	28		plp				plp
.a599	90 02		bcc $a59d			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a59b	4a		lsr a				lsr 	a
.a59c	4a		lsr a				lsr 	a
.a59d					_JMNoShift:
.a59d	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a59e	b0 0a		bcs $a5aa			bcs 	_JMIsRight
.a5a0	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a5a1	b0 04		bcs $a5a7			bcs 	_JMIsLeft
.a5a3	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; zero result
.a5a6	60		rts				rts
.a5a7					_JMIsLeft:
.a5a7	4c be 8d	jmp $8dbe			jmp 	ReturnTrue
.a5aa					_JMIsRight:
.a5aa	a9 01		lda #$01			lda 	#1
.a5ac	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.a5af	60		rts				rts
.a5b0					UnaryJoyB:
.a5b0	fa		plx				plx 								; get pos
.a5b1	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5b4	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a5b7	20 43 aa	jsr $aa43			jsr 	EXTReadController 			; read the controller.
.a5ba	4a		lsr a				lsr 	a
.a5bb	4a		lsr a				lsr 	a
.a5bc	4a		lsr a				lsr 	a
.a5bd	4a		lsr a				lsr 	a
.a5be	29 01		and #$01			and 	#1
.a5c0	20 16 9e	jsr $9e16			jsr 	NSMSetByte
.a5c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/hardware/timer.asm

.a5c4					UnaryTimer:
.a5c4	fa		plx				plx
.a5c5	20 38 8d	jsr $8d38			jsr 	CheckRightBracket
.a5c8					TimerToStackX:
.a5c8	20 14 9e	jsr $9e14			jsr 	NSMSetZero 					; zero result
.a5cb	64 01		stz $01				stz 	1 							; access I/O
.a5cd	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a5d0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5d3	ad 5a d6	lda $d65a			lda 	$D65A
.a5d6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5d9	ad 5b d6	lda $d65b			lda 	$D65B
.a5dc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/module.interface/sound/sound.asm

.a5e0					SoundCommand:
.a5e0	a2 00		ldx #$00			ldx 	#0
.a5e2	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; channel
.a5e5	c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.a5e7	b0 50		bcs $a639			bcs 	_SndError
.a5e9	e8		inx				inx 								; do the rest in slot 1.
.a5ea	20 40 8d	jsr $8d40			jsr 	CheckComma
.a5ed	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; Pitch
.a5f0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 				; must be 10 bit
.a5f3	c9 10		cmp #$10			cmp 	#16
.a5f5	b0 42		bcs $a639			bcs 	_SndError
.a5f7	8d 38 06	sta $0638			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.a5fa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a5fd	8d 37 06	sta $0637			sta 	SoundCommandBlock
.a600	20 40 8d	jsr $8d40			jsr 	CheckComma
.a603	20 95 9d	jsr $9d95			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.a606	8d 3a 06	sta $063a			sta 	SoundCommandBlock+3
.a609	a9 0f		lda #$0f			lda 	#15
.a60b	8d 39 06	sta $0639			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.a60e	9c 3b 06	stz $063b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.a611	9c 3c 06	stz $063c			stz 	SoundCommandBlock+5
.a614	b1 30		lda ($30),y			lda 	(codePtr),y
.a616	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a618	d0 10		bne $a62a			bne 	_SNDPlay
.a61a	c8		iny				iny
.a61b	20 75 9d	jsr $9d75			jsr 	Evaluate16BitInteger 		; Slide
.a61e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.a621	8d 3b 06	sta $063b			sta 	SoundCommandBlock+4
.a624	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a627	8d 3c 06	sta $063c			sta 	SoundCommandBlock+5
.a62a					_SNDPlay:
.a62a	5a		phy				phy
.a62b	ad 08 04	lda $0408			lda 	NSMantissa0 				; channel.
.a62e	09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.a630	a2 37		ldx #$37			ldx 	#(SoundCommandBlock & $FF)
.a632	a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.a634	20 29 b8	jsr $b829			jsr 	SNDCommand
.a637	7a		ply				ply
.a638	60		rts				rts
.a639					_SndError:
.a639	4c a3 9f	jmp $9fa3			jmp 	RangeError
.0637					SoundCommandBlock:
>0637							.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a63c					StackPushByte:
.a63c	48		pha				pha 								; save byte
.a63d	a5 34		lda $34				lda 	BasicStack
.a63f	d0 09		bne $a64a			bne 	_SPBNoBorrow
.a641	c6 35		dec $35				dec 	BasicStack+1
.a643	48		pha				pha
.a644	a5 35		lda $35				lda 	BasicStack+1
.a646	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a648	90 06		bcc $a650			bcc 	_SPBMemory
.a64a					_SPBNoBorrow:
.a64a	c6 34		dec $34				dec 	BasicStack
.a64c	68		pla				pla 								; get back and write
.a64d	92 34		sta ($34)			sta 	(BasicStack)
.a64f	60		rts				rts
.a650					_SPBMemory:
.a650	a9 12		lda #$12		lda	#18
.a652	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a655					StackPopByte:
.a655	b2 34		lda ($34)			lda 	(BasicStack)
.a657	e6 34		inc $34				inc 	BasicStack
.a659	d0 02		bne $a65d			bne 	_SPBNoCarry
.a65b	e6 35		inc $35				inc 	BasicStack+1
.a65d					_SPBNoCarry:
.a65d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a65e					StackOpen:
.a65e	48		pha				pha 								; save frame byte
.a65f	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a661	0a		asl a				asl 	a 							; claim twice this for storage
.a662	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a664	38		sec				sec 								; so basically subtracting from
.a665	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a667	85 34		sta $34				sta 	basicStack
.a669	b0 08		bcs $a673			bcs 	_SONoBorrow
.a66b	c6 35		dec $35				dec 	basicStack+1
.a66d	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a66f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a671	90 04		bcc $a677			bcc 	_SOMemory
.a673					_SONoBorrow:
.a673	68		pla				pla 								; get marker back and write at TOS
.a674	92 34		sta ($34)			sta 	(basicStack)
.a676	60		rts				rts
.a677					_SOMemory:
.a677	a9 12		lda #$12		lda	#18
.a679	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a67c					StackClose:
.a67c	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a67e	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a680	0a		asl a				asl 	a 							; claim twice this.
.a681	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a683	85 34		sta $34				sta 	basicStack
.a685	90 02		bcc $a689			bcc 	_SCExit
.a687	e6 35		inc $35				inc 	basicStack+1
.a689					_SCExit:
.a689	60		rts				rts
.a68a					StackCheckFrame:
.a68a	48		pha				pha
.a68b					_StackRemoveLocals:
.a68b	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a68d	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a68f	b0 05		bcs $a696			bcs 	_SCNoLocal
.a691	20 fd 87	jsr $87fd			jsr 	LocalPopValue
.a694	80 f5		bra $a68b			bra 	_StackRemoveLocals
.a696					_SCNoLocal:
.a696	68		pla				pla
.a697	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a699	29 f0		and #$f0			and 	#$F0 						; check type bits
.a69b	d0 01		bne $a69e			bne 	_SCFError 					; different, we have structures mixed up
.a69d	60		rts				rts
.a69e					_SCFError:
.a69e	8a		txa				txa 								; report error X
.a69f	4c 51 8d	jmp $8d51			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a6a2					STKSaveCodePosition:
.a6a2	5a		phy				phy
.a6a3	98		tya				tya 								; save Y
.a6a4	a0 05		ldy #$05			ldy 	#5
.a6a6	91 34		sta ($34),y			sta 	(basicStack),y
.a6a8	88		dey				dey 								; save Code Pointer
.a6a9					_STKSaveLoop:
.a6a9	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a6ac	91 34		sta ($34),y			sta 	(basicStack),y
.a6ae	88		dey				dey
.a6af	d0 f8		bne $a6a9			bne 	_STKSaveLoop
.a6b1	7a		ply				ply
.a6b2	60		rts				rts
.a6b3					STKLoadCodePosition:
.a6b3	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a6b5					_STKLoadLoop:
.a6b5	b1 34		lda ($34),y			lda 	(basicStack),y
.a6b7	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a6ba	c8		iny				iny
.a6bb	c0 05		cpy #$05			cpy 	#5
.a6bd	d0 f6		bne $a6b5			bne 	_STKLoadLoop
.a6bf	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a6c1	a8		tay				tay
.a6c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a6c3					StackReset:
.a6c3	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a6c5	85 34		sta $34				sta 	0+basicStack
.a6c7	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a6c9	85 35		sta $35				sta 	1+basicStack
.a6cb	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a6cd	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a6cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a6d0					StringConcrete:
.a6d0	5a		phy				phy 								; save position on stack
.a6d1	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a6d4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a6d7	85 38		sta $38				sta 	zTemp1
.a6d9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6dc	85 39		sta $39				sta 	zTemp1+1
.a6de	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a6e0					_SALength:
.a6e0	c8		iny				iny
.a6e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.a6e3	d0 fb		bne $a6e0			bne 	_SALength
.a6e5	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a6e7	b0 3f		bcs $a728			bcs 	_SALengthError
.a6e9	98		tya				tya 				 				; length of the new string
.a6ea	18		clc				clc
.a6eb	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a6ed	90 02		bcc $a6f1			bcc 	_SAHaveLength
.a6ef	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a6f1					_SAHaveLength:
.a6f1	48		pha				pha 								; save length.
.a6f2	38		sec				sec
.a6f3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a6f5	6d 8e 04	adc $048e			adc 	StringMemory
.a6f8	8d 8e 04	sta $048e			sta 	StringMemory
.a6fb	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a6fd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a700	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a702	6d 8f 04	adc $048f			adc 	StringMemory+1
.a705	8d 8f 04	sta $048f			sta 	StringMemory+1
.a708	85 3b		sta $3b				sta 	zTemp2+1
.a70a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a70d	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a70e	38		sec				sec
.a70f	e9 03		sbc #$03			sbc 	#3
.a711	92 3a		sta ($3a)			sta 	(zTemp2)
.a713	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a715	a0 01		ldy #$01			ldy 	#1
.a717	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a719					_SACopyNewString:
.a719	a0 00		ldy #$00			ldy 	#0
.a71b					_SACopyNSLoop:
.a71b	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a71d	c8		iny				iny 								; write two on in string storage
.a71e	c8		iny				iny
.a71f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a721	88		dey				dey 								; this makes it one one.
.a722	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a724	d0 f5		bne $a71b			bne 	_SACopyNSLoop
.a726	7a		ply				ply
.a727	60		rts				rts
.a728					_SALengthError:
.a728	a9 09		lda #$09		lda	#9
.a72a	4c 51 8d	jmp $8d51		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a72d					StringSystemInitialise:
.a72d	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a72f	8d 8e 04	sta $048e			sta 	0+StringMemory
.a732	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a734	8d 8f 04	sta $048f			sta 	1+StringMemory
.a737	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a73a	60		rts				rts
.a73b					StringSpaceInitialise:
.a73b	20 dd 99	jsr $99dd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a73e	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a740	8d 90 04	sta $0490			sta 	StringInitialised
.a743	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a746	8d 91 04	sta $0491			sta 	StringTempPointer
.a749	ad 8f 04	lda $048f			lda 	StringMemory+1
.a74c	3a		dec a				dec 	a
.a74d	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a750	60		rts				rts
.a751					StringTempAllocate:
.a751	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a753	b0 35		bcs $a78a			bcs 	_STALength
.a755	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a758	30 05		bmi $a75f			bmi 	_STAAllocate
.a75a	48		pha				pha 								; save value to subtract.
.a75b	20 3b a7	jsr $a73b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a75e	68		pla				pla 								; restore it
.a75f					_STAAllocate:
.a75f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a761	18		clc				clc  								; deliberate allows one more
.a762	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a765	8d 91 04	sta $0491			sta 	StringTempPointer
.a768	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a76b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a76d	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a770	69 ff		adc #$ff			adc 	#$FF
.a772	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a775	85 3d		sta $3d				sta 	zsTemp+1
.a777	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a77a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a77d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a780	a9 10		lda #$10			lda 	#NSTString
.a782	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a785	a9 00		lda #$00			lda 	#0 							; clear the target string
.a787	92 3c		sta ($3c)			sta 	(zsTemp)
.a789	60		rts				rts
.a78a					_STALength:
.a78a	a9 09		lda #$09		lda	#9
.a78c	4c 51 8d	jmp $8d51		jmp	ErrorHandler
.a78f					StringTempWrite:
.a78f	48		pha				pha
.a790	92 3c		sta ($3c)			sta 	(zsTemp)
.a792	e6 3c		inc $3c				inc 	zsTemp
.a794	d0 02		bne $a798			bne 	_STWNoCarry
.a796	e6 3d		inc $3d				inc 	zsTemp+1
.a798					_STWNoCarry:
.a798	a9 00		lda #$00			lda 	#0
.a79a	92 3c		sta ($3c)			sta 	(zsTemp)
.a79c	68		pla				pla
.a79d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=7					CLIIdentifier = CONYellow
=10					CLIPunctuation = CONYellowGreen
=1					CLIData = CONWhite
.a79e					EXTPrintCharacter:
.a79e	48		pha				pha
.a79f	da		phx				phx
.a7a0	5a		phy				phy
.a7a1	a6 01		ldx $01				ldx 	1
.a7a3	da		phx				phx
.a7a4	ac 3e 06	ldy $063e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a7a7	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a7a9	30 48		bmi $a7f3			bmi 	_EXPCColour
.a7ab	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a7ad	90 4d		bcc $a7fc			bcc 	_EXPCControl
.a7af	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a7b1	86 01		stx $01				stx 	1
.a7b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.a7b5	e6 01		inc $01				inc 	1 							; select colour memory
.a7b7	ad 3f 06	lda $063f			lda 	EXTTextColour
.a7ba	91 40		sta ($40),y			sta 	(EXTAddress),y
.a7bc	c8		iny				iny 								; advance horizontal position
.a7bd	8c 3e 06	sty $063e			sty 	EXTColumn
.a7c0	cc 40 06	cpy $0640			cpy 	EXTScreenWidth 				; reached RHS ?
.a7c3	90 66		bcc $a82b			bcc 	_EXPCExit 					; no, then exit.
.a7c5					_EXPCCRLF:
.a7c5	ee 3d 06	inc $063d			inc 	EXTRow  					; bump row
.a7c8	9c 3e 06	stz $063e			stz 	EXTColumn 					; back to column 0
.a7cb	ad 3d 06	lda $063d			lda 	EXTRow 						; check if reached the bottom ?
.a7ce	cd 41 06	cmp $0641			cmp 	EXTScreenHeight 			; if so, then scroll.
.a7d1	f0 18		beq $a7eb			beq 	_EXPCScroll
.a7d3	18		clc				clc 								; add width to address.
.a7d4	a5 40		lda $40				lda 	EXTAddress
.a7d6	6d 40 06	adc $0640			adc 	EXTScreenWidth
.a7d9	85 40		sta $40				sta 	EXTAddress
.a7db	90 4e		bcc $a82b			bcc 	_EXPCExit
.a7dd	e6 41		inc $41				inc 	EXTAddress+1
.a7df	80 4a		bra $a82b			bra 	_EXPCExit
.a7e1					_EXPCLeft:
.a7e1	ce 3e 06	dec $063e			dec 	EXTColumn
.a7e4	10 45		bpl $a82b			bpl 	_EXPCExit
.a7e6					_EXPCBegin:
.a7e6	9c 3e 06	stz $063e			stz 	EXTColumn
.a7e9	80 40		bra $a82b			bra 	_EXPCExit
.a7eb					_EXPCScroll:
.a7eb	ce 3d 06	dec $063d			dec 	EXTRow 						; the height-1 th line.
.a7ee	20 b8 a8	jsr $a8b8			jsr 	EXTScreenScroll 			; scroll the screen
.a7f1	80 38		bra $a82b			bra 	_EXPCExit
.a7f3					_EXPCColour:
.a7f3	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a7f5	b0 34		bcs $a82b			bcs 	_EXPCExit
.a7f7	20 98 a8	jsr $a898			jsr 	_EXPCHandleColour
.a7fa	80 2f		bra $a82b			bra 	_EXPCExit
.a7fc					_EXPCControl:
.a7fc	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a7fe	b0 2b		bcs $a82b			bcs 	_EXPCExit
.a800	0a		asl a				asl 	a 							; double into X
.a801	aa		tax				tax
.a802	7c 76 a8	jmp ($a876,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a805					_EXPCUp:
.a805	ad 3d 06	lda $063d			lda 	EXTRow 						; already at top ?
.a808	f0 21		beq $a82b			beq 	_EXPCExit
.a80a	ce 3d 06	dec $063d			dec 	EXTRow 						; up one in position/address
.a80d	38		sec				sec
.a80e	a5 40		lda $40				lda 	EXTAddress
.a810	ed 40 06	sbc $0640			sbc 	EXTScreenWidth
.a813	85 40		sta $40				sta 	EXTAddress
.a815	b0 14		bcs $a82b			bcs 	_EXPCExit
.a817	c6 41		dec $41				dec 	EXTAddress+1
.a819	80 10		bra $a82b			bra 	_EXPCExit
.a81b					_EXPCRight:
.a81b	c8		iny				iny
.a81c	8c 3e 06	sty $063e			sty 	EXTColumn
.a81f	cc 40 06	cpy $0640			cpy 	EXTScreenWidth
.a822	d0 07		bne $a82b			bne 	_EXPCExit
.a824					_EXPCEnd:
.a824	ad 40 06	lda $0640			lda 	EXTScreenWidth
.a827	3a		dec a				dec 	a
.a828	8d 3e 06	sta $063e			sta 	EXTColumn
.a82b					_EXPCExit:
.a82b	20 0d a9	jsr $a90d			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a82e	68		pla				pla
.a82f	85 01		sta $01				sta 	1
.a831	7a		ply				ply
.a832	fa		plx				plx
.a833	68		pla				pla
.a834	60		rts				rts
.a835					_EXPCClearScreen:
.a835	20 ca a8	jsr $a8ca			jsr		EXTClearScreenCode
.a838	80 f1		bra $a82b			bra 	_EXPCExit
.a83a					_EXPCDown:
.a83a	ad 41 06	lda $0641			lda 	EXTScreenHeight 			; at the bottom
.a83d	3a		dec a				dec 	a
.a83e	cd 3d 06	cmp $063d			cmp 	EXTRow
.a841	f0 e8		beq $a82b			beq 	_EXPCExit
.a843	ee 3d 06	inc $063d			inc 	EXTRow 						; down one in position/address
.a846	18		clc				clc
.a847	a5 40		lda $40				lda 	EXTAddress
.a849	6d 40 06	adc $0640			adc 	EXTScreenWidth
.a84c	85 40		sta $40				sta 	EXTAddress
.a84e	90 db		bcc $a82b			bcc 	_EXPCExit
.a850	e6 41		inc $41				inc 	EXTAddress+1
.a852	80 d7		bra $a82b			bra 	_EXPCExit
.a854					_EXPCTab:
.a854	ad 3e 06	lda $063e			lda 	EXTColumn 					; next tab stop
.a857	29 f8		and #$f8			and 	#$F8
.a859	18		clc				clc
.a85a	69 08		adc #$08			adc 	#8
.a85c	8d 3e 06	sta $063e			sta 	EXTColumn
.a85f	cd 40 06	cmp $0640			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a862	90 c7		bcc $a82b			bcc 	_EXPCExit
.a864	80 be		bra $a824			bra 	_EXPCEnd
.a866					_EXPCBackSpace:
.a866	88		dey				dey
.a867	30 c2		bmi $a82b			bmi 	_EXPCExit
.a869	ce 3e 06	dec $063e			dec 	EXTColumn
.a86c	a9 02		lda #$02			lda 	#2
.a86e	85 01		sta $01				sta 	1
.a870	a9 20		lda #$20			lda 	#32
.a872	91 40		sta ($40),y			sta 	(EXTAddress),y
.a874	80 b5		bra $a82b			bra 	_EXPCExit
.a876					_EXPCActionTable:
>a876	2b a8						.word 	_EXPCExit 					; 00
>a878	e6 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a87a	e1 a7						.word 	_EXPCLeft 					; 02 B Left
>a87c	2b a8						.word 	_EXPCExit 					; 03 <Break>
>a87e	2b a8						.word 	_EXPCExit 					; 04
>a880	24 a8						.word 	_EXPCEnd 					; 05 E End of Line
>a882	1b a8						.word 	_EXPCRight 					; 06 F Right
>a884	2b a8						.word 	_EXPCExit 					; 07
>a886	66 a8						.word 	_EXPCBackspace 				; 08 H Backspace
>a888	54 a8						.word 	_EXPCTab 					; 09 I Tab
>a88a	2b a8						.word 	_EXPCExit 					; 0A
>a88c	2b a8						.word 	_EXPCExit 					; 0B
>a88e	35 a8						.word 	_EXPCClearScreen			; 0C L CLS
>a890	c5 a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a892	3a a8						.word 	_EXPCDown 					; 0E N Down
>a894	2b a8						.word 	_EXPCExit 					; 0F
>a896	05 a8						.word 	_EXPCUp 					; 10 P Up
.a898					_EXPCHandleColour
.a898	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a89a	b0 16		bcs $a8b2			bcs 	_EXPCBackground
.a89c	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a89d	0a		asl a				asl 	a
.a89e	0a		asl a				asl 	a
.a89f	0a		asl a				asl 	a
.a8a0	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a8a2					_EXPCUpdate:
.a8a2	48		pha				pha 								; save new colour
.a8a3	8a		txa				txa 								; get mask
.a8a4	2d 3f 06	and $063f			and 	EXTTextColour 				; mask out old.
.a8a7	8d 3f 06	sta $063f			sta 	EXTTextColour
.a8aa	68		pla				pla 								; or in new colour
.a8ab	0d 3f 06	ora $063f			ora 	EXTTextColour
.a8ae	8d 3f 06	sta $063f			sta 	EXTTextColour
.a8b1	60		rts				rts
.a8b2					_EXPCBackground:
.a8b2	29 0f		and #$0f			and 	#$0F 						; get the colour
.a8b4	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a8b6	80 ea		bra $a8a2			bra 	_EXPCUpdate
.a8b8					EXTScreenScroll:
.a8b8	a9 02		lda #$02			lda 	#2 							; select text page
.a8ba	85 01		sta $01				sta 	1
.a8bc	a9 20		lda #$20			lda		#32 						; fill with space
.a8be	20 cd a9	jsr $a9cd			jsr 	EXTScrollFill
.a8c1	e6 01		inc $01				inc 	1 							; select colour page
.a8c3	ad 3f 06	lda $063f			lda 	EXTTextColour
.a8c6	20 cd a9	jsr $a9cd			jsr 	EXTScrollFill
.a8c9	60		rts				rts
.a8ca					EXTClearScreenCode:
.a8ca	a9 02		lda #$02			lda 	#2 							; select text page
.a8cc	85 01		sta $01				sta 	1
.a8ce	a9 20		lda #$20			lda		#32 						; fill with space
.a8d0	20 dd a8	jsr $a8dd			jsr 	_EXTCSFill
.a8d3	e6 01		inc $01				inc 	1 							; select colour page
.a8d5	ad 3f 06	lda $063f			lda 	EXTTextColour
.a8d8	20 dd a8	jsr $a8dd			jsr 	_EXTCSFill
.a8db	80 22		bra $a8ff			bra 	EXTHomeCursor
.a8dd					_EXTCSFill:
.a8dd	aa		tax				tax
.a8de	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a8e0	85 40		sta $40				sta 	EXTAddress
.a8e2	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a8e4	85 41		sta $41				sta 	EXTAddress+1
.a8e6					_EXTCSFill1:
.a8e6	a0 00		ldy #$00			ldy 	#0
.a8e8	8a		txa				txa
.a8e9					_EXTCSFill2:
.a8e9	91 40		sta ($40),y			sta 	(EXTAddress),y
.a8eb	c8		iny				iny
.a8ec	d0 fb		bne $a8e9			bne 	_EXTCSFill2
.a8ee	e6 41		inc $41				inc 	EXTAddress+1
.a8f0	a5 41		lda $41				lda 	EXTAddress+1
.a8f2	c9 d2		cmp #$d2			cmp 	#$D2
.a8f4	d0 f0		bne $a8e6			bne 	_EXTCSFill1
.a8f6	8a		txa				txa
.a8f7					_EXTCSFill3:
.a8f7	91 40		sta ($40),y			sta 	(EXTAddress),y
.a8f9	c8		iny				iny
.a8fa	c0 c0		cpy #$c0			cpy 	#$C0
.a8fc	d0 f9		bne $a8f7			bne 	_EXTCSFill3
.a8fe	60		rts				rts
.a8ff					EXTHomeCursor:
.a8ff	9c 3d 06	stz $063d			stz 	EXTRow 						; reset row & column
.a902	9c 3e 06	stz $063e			stz 	EXTColumn
.a905	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a907	85 40		sta $40				sta 	EXTAddress
.a909	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a90b	85 41		sta $41				sta 	EXTAddress+1
.a90d					EXTSetHardwareCursor:
.a90d	64 01		stz $01				stz 	1 							; I/O Page zero
.a90f	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a911	8d 10 d0	sta $d010			sta 	$D010
.a914	a9 b1		lda #$b1			lda 	#$B1
.a916	8d 12 d0	sta $d012			sta 	$D012
.a919	ad 3e 06	lda $063e			lda 	EXTColumn
.a91c	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a91f	9c 15 d0	stz $d015			stz 	$D015
.a922	ad 3d 06	lda $063d			lda 	EXTRow
.a925	8d 16 d0	sta $d016			sta 	$D016
.a928	9c 17 d0	stz $d017			stz 	$D017
.a92b	60		rts				rts
.a92c					EXTInputLine:
.a92c	48		pha				pha
.a92d	da		phx				phx
.a92e	5a		phy				phy
.a92f	a5 01		lda $01				lda 	1 							; save I/O page
.a931	48		pha				pha
.a932					_EILLoop:
.a932	20 34 aa	jsr $aa34			jsr 	ExtInputSingleCharacter
.a935	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a937	f0 40		beq $a979			beq 	_EILExit
.a939	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a93b	f0 1c		beq $a959			beq 	_EILBackspace
.a93d	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a93f	90 12		bcc $a953			bcc 	_EILPrintLoop
.a941	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a943	b0 0e		bcs $a953			bcs 	_EILPrintLoop
.a945	48		pha				pha 								; save character
.a946	a9 02		lda #$02			lda 	#2  						; insert a space
.a948	85 01		sta $01				sta 	1
.a94a	20 bb a9	jsr $a9bb			jsr 	EXTILInsert 				; insert in text screen
.a94d	e6 01		inc $01				inc 	1
.a94f	20 bb a9	jsr $a9bb			jsr 	EXTILInsert 				; insert in colour screen
.a952	68		pla				pla 								; get character back.
.a953					_EILPrintLoop:
.a953	20 9e a7	jsr $a79e			jsr 	ExtPrintCharacter
.a956	80 da		bra $a932			bra 	_EILLoop
.a958	60		rts				rts
.a959					_EILBackspace:
.a959	ad 3e 06	lda $063e			lda 	EXTColumn					; can we backspace ?
.a95c	f0 d4		beq $a932			beq 	_EILLoop
.a95e	a9 02		lda #$02			lda 	#2 							; move cursor left
.a960	20 9e a7	jsr $a79e			jsr 	EXTPrintCharacter
.a963	a9 02		lda #$02			lda 	#2 							; text block
.a965	85 01		sta $01				sta 	1
.a967	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a969	20 a6 a9	jsr $a9a6			jsr 	EXTILDelete
.a96c	e6 01		inc $01				inc 	1 							; colour block
.a96e	ac 3e 06	ldy $063e			ldy 	EXTColumn 					; get attribute of last character
.a971	88		dey				dey
.a972	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a974	20 a6 a9	jsr $a9a6			jsr 	EXTILDelete 				; backspace attribute
.a977	80 b9		bra $a932			bra 	_EILLoop 					; and go round.
.a979					_EILExit:
.a979	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a97b	85 01		sta $01				sta 	1
.a97d	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a97f					_EILScrapeLine:
.a97f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a981	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a984	c8		iny				iny
.a985	cc 40 06	cpy $0640			cpy 	EXTScreenWidth
.a988	d0 f5		bne $a97f			bne 	_EILScrapeLine
.a98a					_EILTrimSpaces:
.a98a	88		dey				dey
.a98b	f0 08		beq $a995			beq 	_EILEndTrim
.a98d	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a990	c9 20		cmp #$20			cmp 	#' '
.a992	f0 f6		beq $a98a			beq 	_EILTrimSpaces
.a994	c8		iny				iny 								; trim after non space character.
.a995					_EILEndTrim:
.a995	a9 00		lda #$00			lda 	#0 							; trim here.
.a997	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a99a	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a99c	20 9e a7	jsr $a79e			jsr 	ExtPrintCharacter
.a99f	68		pla				pla 								; reset I/O page
.a9a0	85 01		sta $01				sta 	1
.a9a2	7a		ply				ply
.a9a3	fa		plx				plx
.a9a4	68		pla				pla
.a9a5	60		rts				rts
.a9a6					EXTILDelete:
.a9a6	48		pha				pha 								; save the new character
.a9a7	ac 3e 06	ldy $063e			ldy 	EXTColumn 					; start copying from here.
.a9aa					_EXTDLoop:
.a9aa	c8		iny				iny 								; copy one byte down.
.a9ab	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9ad	88		dey				dey
.a9ae	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9b0	c8		iny				iny 								; do till end of line.
.a9b1	cc 40 06	cpy $0640			cpy 	EXTScreenWidth
.a9b4	90 f4		bcc $a9aa			bcc 	_EXTDLoop
.a9b6	88		dey				dey 	 							; write in last slot.
.a9b7	68		pla				pla
.a9b8	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9ba	60		rts				rts
.a9bb					EXTILInsert:
.a9bb	ac 40 06	ldy $0640			ldy 	EXTScreenWidth 				; end position
.a9be					_EXTILoop:
.a9be	88		dey				dey 								; back one
.a9bf	cc 3e 06	cpy $063e			cpy 	EXTColumn 					; exit if reached insert point.
.a9c2	f0 08		beq $a9cc			beq 	_EXTIExit
.a9c4	88		dey				dey 								; copy one byte up.
.a9c5	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9c7	c8		iny				iny
.a9c8	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9ca	80 f2		bra $a9be			bra 	_EXTILoop
.a9cc					_EXTIExit:
.a9cc	60		rts				rts
.a9cd					EXTScrollFill:
.a9cd	aa		tax				tax									; save value to fill with
.a9ce	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a9d0	48		pha				pha
.a9d1	a5 37		lda $37				lda 	zTemp0+1
.a9d3	48		pha				pha
.a9d4	a5 38		lda $38				lda 	zTemp1
.a9d6	48		pha				pha
.a9d7	a5 39		lda $39				lda 	zTemp1+1
.a9d9	48		pha				pha
.a9da	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a9dc	85 37		sta $37				sta 	zTemp0+1
.a9de	85 39		sta $39				sta 	zTemp1+1
.a9e0	64 36		stz $36				stz 	zTemp0
.a9e2	ad 40 06	lda $0640			lda 	EXTScreenWidth
.a9e5	85 38		sta $38				sta 	zTemp1
.a9e7	a0 00		ldy #$00			ldy 	#0
.a9e9					_EXSFCopy1:
.a9e9	b1 38		lda ($38),y			lda 	(zTemp1),y
.a9eb	91 36		sta ($36),y			sta 	(zTemp0),y
.a9ed	c8		iny				iny
.a9ee	d0 f9		bne $a9e9			bne 	_EXSFCopy1
.a9f0	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a9f2	e6 39		inc $39				inc 	zTemp1+1
.a9f4	a5 39		lda $39				lda 	zTemp1+1
.a9f6	c9 d3		cmp #$d3			cmp 	#$D3
.a9f8	d0 ef		bne $a9e9			bne 	_EXSFCopy1
.a9fa	ac 40 06	ldy $0640			ldy 	EXTScreenWidth 				; blank the bottom line.
.a9fd	8a		txa				txa
.a9fe					_EXSFFill1:
.a9fe	88		dey				dey
.a9ff	91 40		sta ($40),y			sta 	(EXTAddress),y
.aa01	c0 00		cpy #$00			cpy 	#0
.aa03	10 f9		bpl $a9fe			bpl 	_EXSFFill1
.aa05	68		pla				pla
.aa06	85 39		sta $39				sta 	zTemp1+1
.aa08	68		pla				pla
.aa09	85 38		sta $38				sta 	zTemp1
.aa0b	68		pla				pla
.aa0c	85 37		sta $37				sta 	zTemp0+1
.aa0e	68		pla				pla
.aa0f	85 36		sta $36				sta 	zTemp0
.aa11	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.063d					EXTRow:
>063d							.fill 	1
.063e					EXTColumn:
>063e							.fill 	1
.063f					EXTTextColour:
>063f							.fill 	1
.0640					EXTScreenWidth:
>0640							.fill 	1
.0641					EXTScreenHeight:
>0641							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.aa12					EXTInitialise:
.aa12	64 01		stz $01				stz 	1 							; Access I/O
.aa14	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.aa17	9c 08 d0	stz $d008			stz 	$D008
.aa1a	9c 09 d0	stz $d009			stz 	$D009
.aa1d	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.aa1f	8d 58 d6	sta $d658			sta 	$D658
.aa22	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.aa24	8d 3f 06	sta $063f			sta 	EXTTextColour
.aa27	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.aa29	8d 40 06	sta $0640			sta 	EXTScreenWidth
.aa2c	a9 3c		lda #$3c			lda 	#60
.aa2e	8d 41 06	sta $0641			sta 	EXTScreenHeight
.aa31	64 01		stz $01				stz 	1
.aa33	60		rts				rts
.aa34					EXTInputSingleCharacter:
.aa34	da		phx				phx
.aa35	5a		phy				phy
.aa36					_EISCWait:
.aa36	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.aa39	c9 00		cmp #$00			cmp 	#0
.aa3b	f0 f9		beq $aa36			beq 	_EISCWait
.aa3d	7a		ply				ply
.aa3e	fa		plx				plx
.aa3f	60		rts				rts
.aa40					EXTBreakCheck:
.aa40	4c e1 ff	jmp $ffe1			jmp		$FFE1
.aa43					EXTReadController:
.aa43	da		phx				phx
.aa44	a2 00		ldx #$00			ldx 	#0
.aa46	a9 05		lda #$05			lda 	#(($2D) >> 3)
.aa48	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa4b	29 20		and #$20			and 	#($01 << (($2D) & 7))
.aa4d	f0 04		beq $aa53			beq 	_NoSet1
.aa4f	8a		txa				txa
.aa50	09 01		ora #$01			ora 	#1
.aa52	aa		tax				tax
.aa53					_NoSet1:
.aa53	a9 05		lda #$05			lda 	#(($2C) >> 3)
.aa55	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa58	29 10		and #$10			and 	#($01 << (($2C) & 7))
.aa5a	f0 04		beq $aa60			beq 	_NoSet1
.aa5c	8a		txa				txa
.aa5d	09 02		ora #$02			ora 	#2
.aa5f	aa		tax				tax
.aa60					_NoSet1:
.aa60	a9 06		lda #$06			lda 	#(($32) >> 3)
.aa62	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa65	29 04		and #$04			and 	#($01 << (($32) & 7))
.aa67	f0 04		beq $aa6d			beq 	_NoSet1
.aa69	8a		txa				txa
.aa6a	09 04		ora #$04			ora 	#4
.aa6c	aa		tax				tax
.aa6d					_NoSet1:
.aa6d	a9 04		lda #$04			lda 	#(($25) >> 3)
.aa6f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa72	29 20		and #$20			and 	#($01 << (($25) & 7))
.aa74	f0 04		beq $aa7a			beq 	_NoSet1
.aa76	8a		txa				txa
.aa77	09 08		ora #$08			ora 	#8
.aa79	aa		tax				tax
.aa7a					_NoSet1:
.aa7a	a9 04		lda #$04			lda 	#(($26) >> 3)
.aa7c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.aa7f	29 40		and #$40			and 	#($01 << (($26) & 7))
.aa81	f0 04		beq $aa87			beq 	_NoSet1
.aa83	8a		txa				txa
.aa84	09 10		ora #$10			ora 	#16
.aa86	aa		tax				tax
.aa87					_NoSet1:
.aa87	8a		txa				txa
.aa88	fa		plx				plx
.aa89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b859					GRVectorTable:
>b859	85 ac					.word	GXInitialise             ; $00 Initialise
>b85b	9f ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b85d	e7 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b85f	37 ac					.word	GXClearBitmap            ; $03 Clear
>b861	76 ae					.word	GXSetColourMode          ; $04 Colour
>b863	3e b0					.word	GXFontHandler            ; $05 DrawFont
>b865	86 b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b867	f2 b0					.word	GXSelect                 ; $07 SpriteUse
>b869	1b b1					.word	GXSelectImage            ; $08 SpriteImage
>b86b	a2 b2					.word	GXCollide                ; $09 SpriteCollide
>b86d	e9 aa					.word	GRUndefined              ; $0a
>b86f	e9 aa					.word	GRUndefined              ; $0b
>b871	e9 aa					.word	GRUndefined              ; $0c
>b873	e9 aa					.word	GRUndefined              ; $0d
>b875	e9 aa					.word	GRUndefined              ; $0e
>b877	e9 aa					.word	GRUndefined              ; $0f
>b879	e9 aa					.word	GRUndefined              ; $10
>b87b	e9 aa					.word	GRUndefined              ; $11
>b87d	e9 aa					.word	GRUndefined              ; $12
>b87f	e9 aa					.word	GRUndefined              ; $13
>b881	e9 aa					.word	GRUndefined              ; $14
>b883	e9 aa					.word	GRUndefined              ; $15
>b885	e9 aa					.word	GRUndefined              ; $16
>b887	e9 aa					.word	GRUndefined              ; $17
>b889	e9 aa					.word	GRUndefined              ; $18
>b88b	e9 aa					.word	GRUndefined              ; $19
>b88d	e9 aa					.word	GRUndefined              ; $1a
>b88f	e9 aa					.word	GRUndefined              ; $1b
>b891	e9 aa					.word	GRUndefined              ; $1c
>b893	e9 aa					.word	GRUndefined              ; $1d
>b895	e9 aa					.word	GRUndefined              ; $1e
>b897	e9 aa					.word	GRUndefined              ; $1f
>b899	e7 aa					.word	GXMove                   ; $20 Move
>b89b	44 ad					.word	GXLine                   ; $21 Line
>b89d	bf ae					.word	GXFrameRectangle         ; $22 FrameRect
>b89f	bc ae					.word	GXFillRectangle          ; $23 FillRect
>b8a1	ee aa					.word	GXFrameCircle            ; $24 FrameCircle
>b8a3	ea aa					.word	GXFillCircle             ; $25 FillCircle
>b8a5	e9 aa					.word	GRUndefined              ; $26
>b8a7	e9 aa					.word	GRUndefined              ; $27
>b8a9	a4 ae					.word	GXPlotPoint              ; $28 Plot
>b8ab	b1 b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.0642					gxCurrentX:
>0642							.fill 	2
.0644					gxCurrentY:
>0644							.fill 	2
.0646					gxLastX:
>0646							.fill 	2
.0648					gxLastY:
>0648							.fill 	2
.064a					gxX0:
>064a							.fill 	2
.064c					gxY0:
>064c							.fill 	2
.064e					gxX1:
>064e							.fill 	2
.0650					gxY1:
>0650							.fill 	2
.0652					gxSpritesOn:
>0652							.fill 	1
.0653					gxBitmapsOn:
>0653							.fill 	1
.0654					gxBasePage:
>0654							.fill 	1
.0655					gxSpritePage:
>0655							.fill 	1
.0656					gxHeight:
>0656							.fill 	1
.0657					gxMode:
>0657							.fill 	1
.0658					gxColour:
>0658							.fill 	1
.0659					gxEORValue:
>0659							.fill 	1
.065a					gxANDValue:
>065a							.fill 	1
.065b					gxOriginalLUTValue:
>065b							.fill 	1
.065c					gsOffset:
>065c							.fill 	1
.065d					GSCurrentSpriteID:
>065d							.fill 	1
.065e					GSCurrentSpriteAddr:
>065e							.fill 	2
.0660					GXSpriteOffsetBase:
>0660							.fill 	2
.0662					GXSpriteLow:
>0662							.fill 	64
.06a2					GXSpriteHigh:
>06a2							.fill 	64
.aa8a					GXGraphicDraw:
.aa8a	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa8c	b0 06		bcs $aa94			bcs 	_GDCoordinate
.aa8e	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa90	84 37		sty $37				sty 	gxzTemp0+1
.aa92	80 4b		bra $aadf			bra 	_GDExecuteA 				; and execute
.aa94					_GDCoordinate:
.aa94	48		pha				pha 								; save AXY
.aa95	da		phx				phx
.aa96	5a		phy				phy
.aa97	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa99					_GDCopy1:
.aa99	bd 42 06	lda $0642,x			lda 	gxCurrentX,x
.aa9c	9d 46 06	sta $0646,x			sta 	gxLastX,x
.aa9f	ca		dex				dex
.aaa0	10 f7		bpl $aa99			bpl 	_GDCopy1
.aaa2	68		pla				pla 								; update Y
.aaa3	8d 44 06	sta $0644			sta 	gxCurrentY
.aaa6	9c 45 06	stz $0645			stz 	gxCurrentY+1
.aaa9	68		pla				pla
.aaaa	8d 42 06	sta $0642			sta 	gxCurrentX
.aaad	68		pla				pla 								; get A (command+X.1) back
.aaae	48		pha				pha
.aaaf	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aab1	8d 43 06	sta $0643			sta 	gxCurrentX+1
.aab4	68		pla				pla 								; get command back
.aab5	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aab7	48		pha				pha 								; push back.
.aab8	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aaba	f0 17		beq $aad3			beq 	_GDCopyToWorkArea
.aabc	ad 43 06	lda $0643			lda 	gxCurrentX+1 				; X < 256 X okay
.aabf	f0 07		beq $aac8			beq 	_GDCheckY
.aac1	ad 42 06	lda $0642			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aac4	c9 40		cmp #$40			cmp 	#64
.aac6	b0 08		bcs $aad0			bcs 	_GDError1
.aac8					_GDCheckY:
.aac8	ad 44 06	lda $0644			lda 	gxCurrentY 					; check Y < Height.
.aacb	cd 56 06	cmp $0656			cmp 	gxHeight
.aace	90 03		bcc $aad3			bcc 	_GDCopyToWorkArea
.aad0					_GDError1:
.aad0	68		pla				pla
.aad1					_GDError2:
.aad1	38		sec				sec
.aad2	60		rts				rts
.aad3					_GDCopyToWorkArea:
.aad3	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aad5					_GDCopy2:
.aad5	bd 42 06	lda $0642,x			lda 	gxCurrentX,x
.aad8	9d 4a 06	sta $064a,x			sta 	gxX0,x
.aadb	ca		dex				dex
.aadc	10 f7		bpl $aad5			bpl 	_GDCopy2
.aade	68		pla				pla 								; get command
.aadf					_GDExecuteA:
.aadf	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aae1	b0 ee		bcs $aad1			bcs 	_GDError2
.aae3	aa		tax				tax
.aae4	7c 59 b8	jmp ($b859,x)			jmp 	(GRVectorTable,x)
.aae7					GXMove:
.aae7	18		clc				clc
.aae8	60		rts				rts
.aae9					GRUndefined:
>aae9	db						.byte 	$DB 						; causes a break in the emulator
.aaea					GXFillCircle:
.aaea	a9 ff		lda #$ff			lda 	#255
.aaec	80 02		bra $aaf0			bra 	GXCircle
.aaee					GXFrameCircle:
.aaee	a9 00		lda #$00			lda 	#0
.aaf0					GXCircle:
.aaf0	8d e5 06	sta $06e5			sta 	gxIsFillMode					; save Fill flag
.aaf3	ad 53 06	lda $0653			lda 	gxBitmapsOn
.aaf6	f0 26		beq $ab1e			beq 	_GXCFail
.aaf8	20 49 b3	jsr $b349			jsr 	GXSortXY 					; topleft/bottomright
.aafb	20 21 b2	jsr $b221			jsr 	GXOpenBitmap 				; start drawing
.aafe	20 f0 ab	jsr $abf0			jsr 	GXCircleSetup 				; set up for drawing
.ab01	9c e6 06	stz $06e6			stz 	gxYChanged
.ab04					_GXCircleDraw:
.ab04	ad e3 06	lda $06e3			lda 	gXCentre					; while x <= y
.ab07	cd e4 06	cmp $06e4			cmp 	gYCentre
.ab0a	90 0a		bcc $ab16			bcc 	_GXCircleContinue
.ab0c	d0 03		bne $ab11			bne 	_GXNoLast
.ab0e	20 23 ab	jsr $ab23			jsr 	GXPlot1
.ab11					_GXNoLast:
.ab11	20 29 b2	jsr $b229			jsr 	GXCloseBitmap 				; close the bitmap
.ab14	18		clc				clc
.ab15	60		rts				rts
.ab16					_GXCircleContinue:
.ab16	20 20 ab	jsr $ab20			jsr 	GXPlot2 					; draw it
.ab19	20 9d ab	jsr $ab9d			jsr 	GXCircleMove 				; adjust the coordinates
.ab1c	80 e6		bra $ab04			bra 	_GXCircleDraw
.ab1e					_GXCFail:
.ab1e	38		sec				sec
.ab1f	60		rts				rts
.ab20					GXPlot2:
.ab20	20 23 ab	jsr $ab23			jsr 	GXPlot1 						; plot and swap, fall through does twice
.ab23					GXPlot1:
.ab23	ad e4 06	lda $06e4			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.ab26	f0 03		beq $ab2b			beq 	_GXPlot1Only
.ab28	20 47 ab	jsr $ab47			jsr 	GXPlot0 						; plot and negate
.ab2b					_GXPlot1Only:
.ab2b	20 47 ab	jsr $ab47			jsr 	GXPlot0 						; twice, undoing negation
.ab2e	ad e3 06	lda $06e3			lda 	gXCentre 						; swap X and Y
.ab31	ae e4 06	ldx $06e4			ldx	 	gYCentre
.ab34	8d e4 06	sta $06e4			sta 	gYCentre
.ab37	8e e3 06	stx $06e3			stx 	gXCentre
.ab3a	ad e6 06	lda $06e6			lda 	gxYChanged 						; toggle Y Changed flag
.ab3d	a9 ff		lda #$ff			lda 	#$FF
.ab3f	8d e6 06	sta $06e6			sta 	gxYChanged
.ab42	60		rts				rts
.ab43	20 47 ab	jsr $ab47			jsr 	GXPlot0 						; do once
.ab46	60		rts				rts
.ab47	ad e5 06	lda $06e5	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.ab4a	f0 05		beq $ab51			beq 	_GXPlot0Always
.ab4c	ad e6 06	lda $06e6			lda 	gxYChanged						; fill mode, only draw if changed.
.ab4f	f0 2d		beq $ab7e			beq 	GXPlot0Exit
.ab51					_GXPlot0Always:
.ab51	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.ab53	ad e4 06	lda $06e4			lda 	gYCentre
.ab56	20 7f ab	jsr $ab7f			jsr 	GXSubCopy
.ab59	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.ab5b	ad e3 06	lda $06e3			lda 	gXCentre
.ab5e	20 7f ab	jsr $ab7f			jsr 	GXSubCopy
.ab61	48		pha				pha 									; save last offset X
.ab62	20 31 b2	jsr $b231			jsr 	GXPositionCalc 					; calculate position/offset.
.ab65	68		pla				pla
.ab66	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.ab67	85 36		sta $36				sta 	gxzTemp0
.ab69	64 37		stz $37				stz 	gxzTemp0+1
.ab6b	26 37		rol $37				rol 	gxzTemp0+1
.ab6d	ad e5 06	lda $06e5			lda 	gxIsFillMode
.ab70	69 80		adc #$80			adc 	#128
.ab72	20 0f af	jsr $af0f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab75	38		sec				sec 									; GY = -GY
.ab76	a9 00		lda #$00			lda 	#0
.ab78	ed e4 06	sbc $06e4			sbc 	gYCentre
.ab7b	8d e4 06	sta $06e4			sta 	gYCentre
.ab7e					GXPlot0Exit:
.ab7e	60		rts				rts
.ab7f					GXSubCopy:
.ab7f	85 36		sta $36				sta 	gxzTemp0
.ab81	64 37		stz $37				stz 	gxzTemp0+1
.ab83	29 80		and #$80			and 	#$80
.ab85	f0 02		beq $ab89			beq 	_GXNoSx
.ab87	c6 37		dec $37				dec 	gxzTemp0+1
.ab89					_GXNoSx:
.ab89	38		sec				sec
.ab8a	bd 4e 06	lda $064e,x			lda 	gXX1,x
.ab8d	e5 36		sbc $36				sbc 	gxzTemp0
.ab8f	9d 4a 06	sta $064a,x			sta 	gXX0,x
.ab92	bd 4f 06	lda $064f,x			lda 	gXX1+1,x
.ab95	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab97	9d 4b 06	sta $064b,x			sta 	gXX0+1,x
.ab9a	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab9c	60		rts				rts
.ab9d					GXCircleMove:
.ab9d	9c e6 06	stz $06e6			stz 	gxYChanged 					; clear Y changed flag
.aba0	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.aba2	10 0d		bpl $abb1			bpl 	_GXEMPositive
.aba4	ee e3 06	inc $06e3			inc 	gXCentre 					; X++
.aba7	ad e3 06	lda $06e3			lda 	gXCentre
.abaa	20 d0 ab	jsr $abd0			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.abad	a9 06		lda #$06			lda 	#6  						; and add 6
.abaf	80 15		bra $abc6			bra 	_GXEMAddD
.abb1					_GXEMPositive:
.abb1	ee e3 06	inc $06e3			inc 	gXCentre					; X++
.abb4	ce e4 06	dec $06e4			dec 	gyCentre 					; Y--
.abb7	38		sec				sec 								; calculate X-Y
.abb8	ad e3 06	lda $06e3			lda 	gXCentre
.abbb	ed e4 06	sbc $06e4			sbc 	gYCentre
.abbe	20 d0 ab	jsr $abd0			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.abc1	a9 0a		lda #$0a			lda 	#10  						; and add 10
.abc3	ce e6 06	dec $06e6			dec 	gxYChanged
.abc6					_GXEMAddD:
.abc6	18		clc				clc
.abc7	65 38		adc $38				adc 	gxzTemp1
.abc9	85 38		sta $38				sta 	gxzTemp1
.abcb	90 02		bcc $abcf			bcc 	_GXEMNoCarry
.abcd	e6 39		inc $39				inc 	gxzTemp1+1
.abcf					_GXEMNoCarry:
.abcf	60		rts				rts
.abd0					_GXAdd4TimesToD:
.abd0	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.abd2	29 80		and #$80			and 	#$80
.abd4	f0 02		beq $abd8			beq 	_GXA4Unsigned
.abd6	a9 ff		lda #$ff			lda 	#$FF
.abd8					_GXA4Unsigned:
.abd8	85 37		sta $37				sta 	gxzTemp0+1
.abda	06 36		asl $36				asl 	gxzTemp0  					; x 4
.abdc	26 37		rol $37				rol 	gxzTemp0+1
.abde	06 36		asl $36				asl 	gxzTemp0
.abe0	26 37		rol $37				rol 	gxzTemp0+1
.abe2	18		clc				clc 								; add
.abe3	a5 36		lda $36				lda		gxzTemp0
.abe5	65 38		adc $38				adc 	gxzTemp1
.abe7	85 38		sta $38				sta 	gxzTemp1
.abe9	a5 37		lda $37				lda		gxzTemp0+1
.abeb	65 39		adc $39				adc 	gxzTemp1+1
.abed	85 39		sta $39				sta 	gxzTemp1+1
.abef	60		rts				rts
.abf0					GXCircleSetup:
.abf0	38		sec				sec
.abf1	ad 50 06	lda $0650			lda 	gxY1
.abf4	ed 4c 06	sbc $064c			sbc 	gxY0
.abf7	4a		lsr a				lsr 	a
.abf8	8d e2 06	sta $06e2			sta 	gxRadius
.abfb	a2 00		ldx #$00			ldx 	#0
.abfd	20 1f ac	jsr $ac1f			jsr 	_GXCalculateCentre
.ac00	a2 02		ldx #$02			ldx 	#2
.ac02	20 1f ac	jsr $ac1f			jsr 	_GXCalculateCentre
.ac05	9c e3 06	stz $06e3			stz 	gXCentre
.ac08	ad e2 06	lda $06e2			lda 	gxRadius
.ac0b	8d e4 06	sta $06e4			sta 	gYCentre
.ac0e	0a		asl a				asl 	a 							; R x 2
.ac0f	85 36		sta $36				sta 	gxzTemp0
.ac11	38		sec				sec
.ac12	a9 03		lda #$03			lda 	#3
.ac14	e5 36		sbc $36				sbc 	gxzTemp0
.ac16	85 38		sta $38				sta 	gxzTemp1
.ac18	a9 00		lda #$00			lda 	#0
.ac1a	e9 00		sbc #$00			sbc 	#0
.ac1c	85 39		sta $39				sta 	gxzTemp1+1
.ac1e	60		rts				rts
.ac1f					_GXCalculateCentre:
.ac1f	38		sec				sec
.ac20	bd 4e 06	lda $064e,x			lda 	gxX1,x
.ac23	7d 4a 06	adc $064a,x			adc 	gXX0,x
.ac26	9d 4e 06	sta $064e,x			sta 	gXX1,x
.ac29	bd 4f 06	lda $064f,x			lda 	gXX1+1,x
.ac2c	7d 4b 06	adc $064b,x			adc 	gXX0+1,x
.ac2f	4a		lsr a				lsr 	a
.ac30	9d 4f 06	sta $064f,x			sta 	gXX1+1,x
.ac33	7e 4e 06	ror $064e,x			ror 	gXX1,x
.ac36	60		rts				rts
.06e2					gxRadius:
>06e2							.fill 	1
.06e3					gXCentre:
>06e3							.fill 	1
.06e4					gYCentre:
>06e4							.fill 	1
.06e5					gxIsFillMode:
>06e5							.fill 	1
.06e6					gxYChanged:
>06e6							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.ac37					GXClearBitmap:
.ac37	ad 53 06	lda $0653			lda 	gxBitmapsOn 				; check BMP running.
.ac3a	f0 24		beq $ac60			beq 	_GXCBFail
.ac3c	20 21 b2	jsr $b221			jsr 	GXOpenBitmap 				; start access
.ac3f	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.ac41	ad 56 06	lda $0656			lda 	gxHeight
.ac44	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.ac46	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.ac48					_GXCalcLastPage:
.ac48	98		tya				tya 								; add to base page
.ac49	18		clc				clc
.ac4a	6d 54 06	adc $0654			adc 	gxBasePage
.ac4d	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.ac4f					_GXClearAll:
.ac4f	20 62 ac	jsr $ac62			jsr 	_GXClearBlock 				; clear 8k block
.ac52	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.ac54	a5 0b		lda $0b				lda 	GXEditSlot
.ac56	cd 54 06	cmp $0654			cmp 	gxBasePage 					; until before base page
.ac59	b0 f4		bcs $ac4f			bcs 	_GXClearAll
.ac5b	20 29 b2	jsr $b229			jsr 	GXCloseBitmap	 			; stop access
.ac5e	18		clc				clc
.ac5f	60		rts				rts
.ac60					_GXCBFail:
.ac60	38		sec				sec
.ac61	60		rts				rts
.ac62					_GXClearBlock:
.ac62	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.ac64	85 38		sta $38				sta 	0+gxzTemp1
.ac66	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.ac68	85 39		sta $39				sta 	1+gxzTemp1
.ac6a					_GXCB0:
.ac6a	a5 36		lda $36				lda 	gxzTemp0
.ac6c	a0 00		ldy #$00			ldy 	#0
.ac6e					_GXCB1:
.ac6e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac70	c8		iny				iny
.ac71	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac73	c8		iny				iny
.ac74	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac76	c8		iny				iny
.ac77	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac79	c8		iny				iny
.ac7a	d0 f2		bne $ac6e			bne 	_GXCB1
.ac7c	e6 39		inc $39				inc 	gxzTemp1+1
.ac7e	a5 39		lda $39				lda 	gxzTemp1+1
.ac80	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac82	d0 e6		bne $ac6a			bne 	_GXCB0
.ac84	60		rts				rts
.ac85					GXInitialise:
.ac85	64 01		stz $01				stz 	1
.ac87	a9 01		lda #$01			lda 	#1
.ac89	8d 00 d0	sta $d000			sta 	$D000
.ac8c	18		clc				clc
.ac8d	9c 52 06	stz $0652			stz 	GXSpritesOn
.ac90	9c 53 06	stz $0653			stz 	GXBitmapsOn
.ac93	a2 0f		ldx #$0f			ldx 	#15
.ac95					_GXIClear:
.ac95	9e 42 06	stz $0642,x			stz 	gxCurrentX,x
.ac98	ca		dex				dex
.ac99	10 fa		bpl $ac95			bpl 	_GXIClear
.ac9b	20 36 ad	jsr $ad36			jsr 	GXClearSpriteStore
.ac9e	60		rts				rts
.ac9f					GXControlBitmap:
.ac9f	64 01		stz $01				stz 	1
.aca1	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.aca3	29 01		and #$01			and 	#1 							; set bitmap flag
.aca5	8d 53 06	sta $0653			sta 	gxBitmapsOn
.aca8	4a		lsr a				lsr 	a 							; bit 0 into carry.
.aca9	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.acac	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.acae	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.acb0	90 02		bcc $acb4			bcc 	_CBNotOn
.acb2	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.acb4					_CBNotOn:
.acb4	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.acb7	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.acb9	29 07		and #$07			and 	#7
.acbb	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.acbe	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.acc0	d0 02		bne $acc4			bne 	_CBNotDefault
.acc2	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.acc4					_CBNotDefault:
.acc4	8d 54 06	sta $0654			sta 	gxBasePage
.acc7	20 28 ad	jsr $ad28			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.acca	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.accc	8d 03 d1	sta $d103			sta 	$D103
.accf	a5 36		lda $36				lda 	gxzTemp0
.acd1	8d 02 d1	sta $d102			sta 	$D102
.acd4	9c 01 d1	stz $d101			stz 	$D101
.acd7	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.acd9	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.acdc	29 01		and #$01			and 	#1
.acde	f0 02		beq $ace2			beq 	_CBHaveHeight
.ace0	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ace2					_CBHaveHeight
.ace2	8e 56 06	stx $0656			stx 	gxHeight
.ace5	18		clc				clc
.ace6	60		rts				rts
.ace7					GXControlSprite:
.ace7	64 01		stz $01				stz 	1
.ace9	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.aceb	29 01		and #$01			and 	#1 							; set sprites flag
.aced	8d 52 06	sta $0652			sta 	gxSpritesOn
.acf0	4a		lsr a				lsr 	a 							; bit 0 into carry.
.acf1	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.acf4	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.acf6	29 df		and #$df			and 	#$DF 						; clear sprite bit
.acf8	90 02		bcc $acfc			bcc 	_CSNotOn
.acfa	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.acfc					_CSNotOn:
.acfc	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.acff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ad01	d0 02		bne $ad05			bne 	_CSNotDefault
.ad03	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ad05					_CSNotDefault:
.ad05	8d 55 06	sta $0655			sta 	gxSpritePage
.ad08	20 28 ad	jsr $ad28			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ad0b	a5 36		lda $36				lda 	zTemp0
.ad0d	8d 60 06	sta $0660			sta 	GXSpriteOffsetBase
.ad10	a5 37		lda $37				lda 	zTemp0+1
.ad12	8d 61 06	sta $0661			sta 	GXSpriteOffsetBase+1
.ad15	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ad17					_CSClear:
.ad17	9e 00 d9	stz $d900,x			stz 	$D900,x
.ad1a	9e 00 da	stz $da00,x			stz 	$DA00,x
.ad1d	ca		dex				dex
.ad1e	d0 f7		bne $ad17			bne 	_CSClear
.ad20	9c 5f 06	stz $065f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ad23	20 36 ad	jsr $ad36			jsr 	GXClearSpriteStore
.ad26	18		clc				clc
.ad27	60		rts				rts
.ad28					GXCalculateBaseAddress:
.ad28	85 36		sta $36				sta 	gxzTemp0
.ad2a	64 37		stz $37				stz 	gxzTemp0+1
.ad2c	a9 05		lda #$05			lda 	#5
.ad2e					_GXShift:
.ad2e	06 36		asl $36				asl 	gxzTemp0
.ad30	26 37		rol $37				rol 	gxzTemp0+1
.ad32	3a		dec a				dec		a
.ad33	d0 f9		bne $ad2e			bne 	_GXShift
.ad35	60		rts				rts
.ad36					GXClearSpriteStore:
.ad36	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ad38					_GXCSSLoop:
.ad38	9e a2 06	stz $06a2,x			stz 	GXSpriteHigh,x
.ad3b	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ad3d	9d 62 06	sta $0662,x			sta 	GXSpriteLow,x
.ad40	ca		dex				dex
.ad41	10 f5		bpl $ad38			bpl 	_GXCSSLoop
.ad43	60		rts				rts
.ad44					GXLine:
.ad44	ad 53 06	lda $0653			lda 	GXBitmapsOn
.ad47	f0 28		beq $ad71			beq 	_GXLFail
.ad49	20 21 b2	jsr $b221			jsr 	GXOpenBitmap
.ad4c	20 67 b3	jsr $b367			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ad4f	20 17 ae	jsr $ae17			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ad52	20 31 b2	jsr $b231			jsr 	GXPositionCalc 				; calculate position/offset.
.ad55					_GXDrawLoop:
.ad55	ac 5c 06	ldy $065c			ldy 	gsOffset 					; draw the pixel
.ad58	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ad5a	2d 5a 06	and $065a			and 	gxANDValue
.ad5d	4d 59 06	eor $0659			eor 	gxEORValue
.ad60	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ad62	20 73 ad	jsr $ad73			jsr 	GXLineIsComplete 			; is the line complete ?
.ad65	f0 05		beq $ad6c			beq 	_GXLExit
.ad67	20 8e ad	jsr $ad8e			jsr 	GXLineAdvance 				; code as per advance method
.ad6a	80 e9		bra $ad55			bra 	_GXDrawLoop
.ad6c					_GXLExit:
.ad6c	20 29 b2	jsr $b229			jsr 	GXCloseBitmap
.ad6f	18		clc				clc
.ad70	60		rts				rts
.ad71					_GXLFail:
.ad71	38		sec				sec
.ad72	60		rts				rts
.ad73					GXLineIsComplete:
.ad73	ad e9 06	lda $06e9			lda 	GXIsDiffYLarger 			; is dy larger
.ad76	d0 0f		bne $ad87			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad78	ad 4a 06	lda $064a			lda 	GXX0 						; compare X, LSB and MSB
.ad7b	4d 4e 06	eor $064e			eor 	GXX1
.ad7e	d0 06		bne $ad86			bne 	_GXLICExit
.ad80	ad 4b 06	lda $064b			lda 	GXX0+1
.ad83	4d 4f 06	eor $064f			eor 	GXX1+1
.ad86					_GXLICExit:
.ad86	60		rts				rts
.ad87					_GXLICCompareY:
.ad87	ad 50 06	lda $0650			lda 	GXY1
.ad8a	4d 4c 06	eor $064c			eor 	GXY0
.ad8d	60		rts				rts
.ad8e					GXLineAdvance:
.ad8e	18		clc				clc 								; add adjust to position
.ad8f	ad eb 06	lda $06eb			lda 	GXPosition
.ad92	6d ec 06	adc $06ec			adc 	GXAdjust
.ad95	8d eb 06	sta $06eb			sta 	GXPosition
.ad98	9c ee 06	stz $06ee			stz 	GXAddSelect 				; clear add select flag
.ad9b	b0 05		bcs $ada2			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad9d	cd ed 06	cmp $06ed			cmp 	GXTotal 					; if exceeded total
.ada0	90 0a		bcc $adac			bcc 	_GXLANoExtra
.ada2					_GXLAOverflow:
.ada2	ce ee 06	dec $06ee			dec 	GXAddSelect 				; set addselect to $FF
.ada5	38		sec				sec 								; subtract total and write back
.ada6	ed ed 06	sbc $06ed			sbc 	GXTotal
.ada9	8d eb 06	sta $06eb			sta 	GXPosition
.adac					_GXLANoExtra:
.adac	ad e9 06	lda $06e9			lda 	GXIsDiffYLarger
.adaf	f0 0d		beq $adbe			beq 	_GXDXLarger
.adb1	20 10 ae	jsr $ae10			jsr 	GXIncrementY
.adb4	ad ee 06	lda $06ee			lda 	GXAddSelect
.adb7	f0 10		beq $adc9			beq 	_GXLAExit
.adb9	20 ca ad	jsr $adca			jsr 	GXAdjustX
.adbc	80 0b		bra $adc9			bra 	_GXLAExit
.adbe					_GXDXLarger:
.adbe	20 ca ad	jsr $adca			jsr 	GXAdjustX
.adc1	ad ee 06	lda $06ee			lda 	GXAddSelect
.adc4	f0 03		beq $adc9			beq 	_GXLAExit
.adc6	20 10 ae	jsr $ae10			jsr 	GXIncrementY
.adc9					_GXLAExit:
.adc9	60		rts				rts
.adca					GXAdjustX:
.adca	ad ea 06	lda $06ea			lda 	GXDXNegative
.adcd	10 25		bpl $adf4			bpl 	_GXAXRight
.adcf	ad 4a 06	lda $064a			lda 	GXX0
.add2	d0 03		bne $add7			bne 	_GXAXNoBorrow
.add4	ce 4b 06	dec $064b			dec 	GXX0+1
.add7					_GXAXNoBorrow:
.add7	ce 4a 06	dec $064a			dec 	GXX0
.adda	ce 5c 06	dec $065c			dec 	gsOffset 					; pixel left
.addd	ad 5c 06	lda $065c			lda 	gsOffset
.ade0	c9 ff		cmp #$ff			cmp 	#$FF
.ade2	d0 0f		bne $adf3			bne 	_GXAYExit 					; underflow
.ade4	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ade6	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ade8	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.adea	b0 07		bcs $adf3			bcs 	_GXAYExit
.adec	18		clc				clc
.aded	69 20		adc #$20			adc 	#$20 						; fix up
.adef	85 3d		sta $3d				sta 	gxzScreen+1
.adf1	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.adf3					_GXAYExit:
.adf3	60		rts				rts
.adf4					_GXAXRight:
.adf4	ee 4a 06	inc $064a			inc 	GXX0
.adf7	d0 03		bne $adfc			bne 	_GXAXNoCarry
.adf9	ee 4b 06	inc $064b			inc 	GXX0+1
.adfc					_GXAXNoCarry:
.adfc	ee 5c 06	inc $065c			inc 	gsOffset 					; pixel right
.adff	d0 0e		bne $ae0f			bne 	_GXAXExit 					; if not overflowed, exit.
.ae01	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ae03	a5 3d		lda $3d				lda 	gxzScreen+1
.ae05	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ae07	90 06		bcc $ae0f			bcc 	_GXAXExit
.ae09	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ae0b	85 3d		sta $3d				sta 	gxzScreen+1
.ae0d	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ae0f					_GXAXExit:
.ae0f	60		rts				rts
.ae10					GXIncrementY:
.ae10	ee 4c 06	inc $064c			inc 	GXY0
.ae13	20 87 b2	jsr $b287			jsr 	GXMovePositionDown
.ae16	60		rts				rts
.ae17					GXLineSetup:
.ae17	ad 50 06	lda $0650			lda 	GXY1
.ae1a	38		sec				sec
.ae1b	ed 4c 06	sbc $064c			sbc 	GXY0
.ae1e	4a		lsr a				lsr 	a
.ae1f	8d e8 06	sta $06e8			sta 	GXDiffY
.ae22	9c ea 06	stz $06ea			stz 	GXDXNegative 				; clear -ve flag
.ae25	38		sec				sec
.ae26	ad 4e 06	lda $064e			lda 	GXX1
.ae29	ed 4a 06	sbc $064a			sbc 	GXX0
.ae2c	8d e7 06	sta $06e7			sta 	GXDiffX
.ae2f	ad 4f 06	lda $064f			lda 	GXX1+1 						; calculate MSB
.ae32	ed 4b 06	sbc $064b			sbc 	GXX0+1
.ae35	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.ae36	6e e7 06	ror $06e7			ror 	GXDiffX
.ae39	0a		asl a				asl 	a
.ae3a	10 0c		bpl $ae48			bpl 	_GDXNotNegative
.ae3c	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.ae3e	38		sec				sec
.ae3f	ed e7 06	sbc $06e7			sbc 	GXDiffX
.ae42	8d e7 06	sta $06e7			sta 	GXDiffX
.ae45	ce ea 06	dec $06ea			dec 	GXDXNegative 				; -ve flag = $FF.
.ae48					_GDXNotNegative:
.ae48	9c e9 06	stz $06e9			stz 	GXIsDiffYLarger 			; clear larger flag
.ae4b	ad e8 06	lda $06e8			lda 	GXDiffY 					; set adjust and total.
.ae4e	8d ec 06	sta $06ec			sta 	GXAdjust
.ae51	ad e7 06	lda $06e7			lda 	GXDiffX
.ae54	8d ed 06	sta $06ed			sta 	GXTotal
.ae57	ad e8 06	lda $06e8			lda 	GXDiffY 					; if dy > dx
.ae5a	cd e7 06	cmp $06e7			cmp 	GXDiffX
.ae5d	90 0f		bcc $ae6e			bcc 	_GDXNotLarger
.ae5f	ce e9 06	dec $06e9			dec 	GXIsDiffYLarger 			; set the dy larger flag
.ae62	ad e7 06	lda $06e7			lda 	GXDiffX 					; set adjust and total other way round
.ae65	8d ec 06	sta $06ec			sta 	GXAdjust
.ae68	ad e8 06	lda $06e8			lda 	GXDiffY
.ae6b	8d ed 06	sta $06ed			sta 	GXTotal
.ae6e					_GDXNotLarger:
.ae6e	ad ed 06	lda $06ed			lda 	GXTotal
.ae71	4a		lsr a				lsr 	a
.ae72	8d eb 06	sta $06eb			sta 	GXPosition
.ae75	60		rts				rts
.06e7					GXDiffX:
>06e7							.fill 	1
.06e8					GXDiffY:
>06e8							.fill 	1
.06e9					GXIsDiffYLarger:
>06e9							.fill 	1
.06ea					GXDXNegative:
>06ea							.fill 	1
.06eb					GXPosition:
>06eb							.fill 	1
.06ec					GXAdjust:
>06ec							.fill 	1
.06ed					GXTotal:
>06ed							.fill 	1
.06ee					GXAddSelect:
>06ee							.fill 	1
.ae76					GXSetColourMode:
.ae76	a6 36		ldx $36				ldx 	gxzTemp0
.ae78	8e 58 06	stx $0658			stx 	gxColour 								; set colour
.ae7b	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae7d	8d 57 06	sta $0657			sta 	gxMode 									; set mode
.ae80	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae82	9c 5a 06	stz $065a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae85	ae 58 06	ldx $0658			ldx 	gxColour
.ae88	8e 59 06	stx $0659			stx 	gxEORValue
.ae8b	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae8d	90 03		bcc $ae92			bcc 	_GXSDCNotAndColour
.ae8f	8e 5a 06	stx $065a			stx 	gxANDValue
.ae92					_GXSDCNotAndColour:
.ae92	d0 03		bne $ae97			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae94	9c 59 06	stz $0659			stz 	gxEORValue
.ae97					_GXSDCNotAnd:
.ae97	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae98	90 08		bcc $aea2			bcc 	_GXSDCNoFlip
.ae9a	ad 5a 06	lda $065a			lda	 	gxANDValue
.ae9d	49 ff		eor #$ff			eor 	#$FF
.ae9f	8d 5a 06	sta $065a			sta 	gxANDValue
.aea2					_GXSDCNoFlip:
.aea2	18		clc				clc
.aea3	60		rts				rts
.aea4					GXPlotPoint:
.aea4	20 21 b2	jsr $b221			jsr 	GXOpenBitmap 				; start drawing
.aea7	20 31 b2	jsr $b231			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.aeaa	ac 5c 06	ldy $065c			ldy 	gsOffset
.aead	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aeaf	2d 5a 06	and $065a			and 	gxANDValue
.aeb2	4d 59 06	eor $0659			eor 	gxEORValue
.aeb5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aeb7	20 29 b2	jsr $b229			jsr 	GXCloseBitmap 				; stop drawing and exit
.aeba	18		clc				clc
.aebb	60		rts				rts
.aebc					GXFillRectangle:
.aebc	38		sec				sec
.aebd	80 01		bra $aec0			bra 	GXRectangle
.aebf					GXFrameRectangle:
.aebf	18		clc				clc
.aec0					GXRectangle:
.aec0	ad 53 06	lda $0653			lda 	gxBitmapsOn
.aec3	f0 35		beq $aefa			beq 	_GXRFail
.aec5	08		php				php 								; save Fill flag (CS)
.aec6	20 21 b2	jsr $b221			jsr 	GXOpenBitmap 				; start drawing
.aec9	20 49 b3	jsr $b349			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.aecc	20 31 b2	jsr $b231			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.aecf	38		sec				sec 								; sec = Draw line
.aed0	20 fc ae	jsr $aefc			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.aed3	ad 4c 06	lda $064c			lda 	gxY0 						; reached end of rectangle ?
.aed6	cd 50 06	cmp $0650			cmp 	gxY1
.aed9	f0 19		beq $aef4			beq 	_GXRectangleExit
.aedb					_GXRectLoop:
.aedb	20 87 b2	jsr $b287			jsr 	GXMovePositionDown 			; down one.
.aede	ee 4c 06	inc $064c			inc 	gxY0 						; change Y pos
.aee1	ad 4c 06	lda $064c			lda 	gxY0 						; reached last line
.aee4	cd 50 06	cmp $0650			cmp 	gXY1
.aee7	f0 07		beq $aef0			beq 	_GXLastLine
.aee9	28		plp				plp 								; get flag back
.aeea	08		php				php
.aeeb	20 fc ae	jsr $aefc			jsr 	GXDrawLineX1X0 				; draw horizontal line
.aeee	80 eb		bra $aedb			bra 	_GXRectLoop
.aef0					_GXLastLine:
.aef0	38		sec				sec
.aef1	20 fc ae	jsr $aefc			jsr 	GXDrawLineX1X0
.aef4					_GXRectangleExit:
.aef4	68		pla				pla 								; throw fill flag.
.aef5	20 29 b2	jsr $b229			jsr 	GXCloseBitmap 				; stop drawing and exit
.aef8	18		clc				clc
.aef9	60		rts				rts
.aefa					_GXRFail:
.aefa	38		sec				sec
.aefb	60		rts				rts
.aefc					GXDrawLineX1X0:
.aefc	08		php				php 								; save solid/either-end
.aefd	38		sec				sec
.aefe	ad 4e 06	lda $064e			lda		gXX1
.af01	ed 4a 06	sbc $064a			sbc 	gXX0
.af04	85 36		sta $36				sta 	gxzTemp0
.af06	ad 4f 06	lda $064f			lda 	gXX1+1
.af09	ed 4b 06	sbc $064b			sbc 	gXX0+1
.af0c	85 37		sta $37				sta 	gxzTemp0+1
.af0e	28		plp				plp
.af0f					GXDrawLineTemp0:
.af0f	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.af11	48		pha				pha
.af12	a5 3d		lda $3d				lda 	gxzScreen+1
.af14	48		pha				pha
.af15	ad 5c 06	lda $065c			lda 	gsOffset
.af18	48		pha				pha
.af19	a5 0b		lda $0b				lda 	GXEditSlot
.af1b	48		pha				pha
.af1c	ac 5c 06	ldy $065c			ldy 	gsOffset 					; Y offset
.af1f	90 1e		bcc $af3f			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.af21					_GXDLTLine:
.af21	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.af23	2d 5a 06	and $065a			and 	gxANDValue
.af26	4d 59 06	eor $0659			eor 	gxEORValue
.af29	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af2b	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.af2d	d0 04		bne $af33			bne 	_GXDLTNoBorrow
.af2f	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.af31	30 2e		bmi $af61			bmi 	_GXDLTExit
.af33					_GXDLTNoBorrow:
.af33	c6 36		dec $36				dec 	gxzTemp0
.af35	c8		iny				iny 								; next slot.
.af36	d0 e9		bne $af21			bne 	_GXDLTLine
.af38	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.af3a	20 6f af	jsr $af6f			jsr 	GXDLTCheckWrap				; check for new page.
.af3d	80 e2		bra $af21			bra 	_GXDLTLine
.af3f					_GXDLTEndPoints:
.af3f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.af41	2d 5a 06	and $065a			and 	gxANDValue
.af44	4d 59 06	eor $0659			eor 	gxEORValue
.af47	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af49	98		tya				tya 								; advance to right side
.af4a	18		clc				clc
.af4b	65 36		adc $36				adc 	gxzTemp0
.af4d	a8		tay				tay
.af4e	a5 3d		lda $3d				lda 	gxzScreen+1
.af50	65 37		adc $37				adc 	gxzTemp0+1
.af52	85 3d		sta $3d				sta 	gxzScreen+1
.af54	20 6f af	jsr $af6f			jsr 	GXDLTCheckWrap 			; fix up.
.af57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.af59	2d 5a 06	and $065a			and 	gxANDValue
.af5c	4d 59 06	eor $0659			eor 	gxEORValue
.af5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af61					_GXDLTExit:
.af61	68		pla				pla
.af62	85 0b		sta $0b				sta 	GXEditSlot
.af64	68		pla				pla
.af65	8d 5c 06	sta $065c			sta 	gsOffset
.af68	68		pla				pla
.af69	85 3d		sta $3d				sta 	gxzScreen+1
.af6b	68		pla				pla
.af6c	85 3c		sta $3c				sta 	gxzScreen
.af6e	60		rts				rts
.af6f					GXDLTCheckWrap:
.af6f	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.af71	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.af73	90 06		bcc $af7b			bcc 	_GXDLTCWExit
.af75	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af77	85 3d		sta $3d				sta 	gxzScreen+1
.af79	e6 0b		inc $0b				inc 	GXEditSlot
.af7b					_GXDLTCWExit:
.af7b	60		rts				rts
.af7c					GXDrawGraphicElement:
.af7c	8d ef 06	sta $06ef			sta 	gxSize 						; save size
.af7f	3a		dec a				dec 	a
.af80	8d f0 06	sta $06f0			sta 	gxMask 						; and mask
.af83	ad 53 06	lda $0653			lda 	gxBitmapsOn 				; check BMP on
.af86	f0 67		beq $afef			beq 	_GXSLFail
.af88	ad 4c 06	lda $064c			lda 	gxY0 						; push Y on stack
.af8b	48		pha				pha
.af8c	8c f2 06	sty $06f2			sty 	gxAcquireVector+1 			; and acquisition vector
.af8f	8e f1 06	stx $06f1			stx 	gxAcquireVector
.af92	20 21 b2	jsr $b221			jsr 	gxOpenBitmap 				; open the bitmap.
.af95	ad f4 06	lda $06f4			lda 	gxUseMode 					; scale bits
.af98	4a		lsr a				lsr 	a
.af99	4a		lsr a				lsr 	a
.af9a	4a		lsr a				lsr 	a
.af9b	29 07		and #$07			and		#7
.af9d	1a		inc a				inc 	a
.af9e	8d f3 06	sta $06f3			sta 	gxScale
.afa1	64 38		stz $38				stz 	gxzTemp1					; start first line
.afa3					_GXGELoop:
.afa3	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.afa5	2c f4 06	bit $06f4			bit 	gxUseMode 					; check for flip.
.afa8	10 06		bpl $afb0			bpl		_GXNoVFlip
.afaa	ad f0 06	lda $06f0			lda 	gxMask
.afad	38		sec				sec
.afae	e5 38		sbc $38				sbc 	gxzTemp1
.afb0					_GXNoVFlip:
.afb0	aa		tax				tax 								; get the Xth line.
.afb1	20 f1 af	jsr $aff1			jsr 	_GXCallAcquire 				; get that data.
.afb4	ad f3 06	lda $06f3			lda 	gxScale 					; do scale identical copies of that line.
.afb7	85 39		sta $39				sta 	gxzTemp1+1
.afb9					_GXGELoop2:
.afb9	ad 4c 06	lda $064c			lda 	gxY0 						; off screen
.afbc	cd 56 06	cmp $0656			cmp 	gxHeight
.afbf	b0 10		bcs $afd1			bcs 	_GXDGEExit
.afc1	20 f4 af	jsr $aff4			jsr 	GXRenderOneLine 			; render line
.afc4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.afc6	d0 f1		bne $afb9			bne 	_GXGELoop2
.afc8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.afca	a5 38		lda $38				lda 	gxzTemp1
.afcc	cd ef 06	cmp $06ef			cmp 	gxSize
.afcf	d0 d2		bne $afa3			bne 	_GXGELoop
.afd1					_GXDGEExit:
.afd1	68		pla				pla 								; restore Y for next time
.afd2	8d 4c 06	sta $064c			sta 	gxY0
.afd5	ae f3 06	ldx $06f3			ldx 	gxScale 					; get scale (1-8)
.afd8					_GXShiftLeft:
.afd8	18		clc				clc
.afd9	ad ef 06	lda $06ef			lda 	gxSize
.afdc	6d 4a 06	adc $064a			adc 	gxX0
.afdf	8d 4a 06	sta $064a			sta 	gxX0
.afe2	90 03		bcc $afe7			bcc 	_GXSLNoCarry
.afe4	ee 4b 06	inc $064b			inc 	gxX0+1
.afe7					_GXSLNoCarry:
.afe7	ca		dex				dex
.afe8	d0 ee		bne $afd8			bne 	_GXShiftLeft
.afea	20 29 b2	jsr $b229			jsr 	GXCloseBitmap
.afed	18		clc				clc
.afee	60		rts				rts
.afef					_GXSLFail:
.afef	38		sec				sec
.aff0	60		rts				rts
.aff1					_GXCallAcquire:
.aff1	6c f1 06	jmp ($06f1)			jmp 	(gxAcquireVector)
.aff4					GXRenderOneLine:
.aff4	20 31 b2	jsr $b231			jsr 	GXPositionCalc 				; calculate position/offset.
.aff7	ac 5c 06	ldy $065c			ldy 	gsOffset 					; Y contains position.
.affa	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.affc					_GXROLLoop1:
.affc	ad f3 06	lda $06f3			lda 	gxScale 					; set to do 'scale' times
.afff	85 3b		sta $3b				sta 	gxzTemp2+1
.b001					_GXROLLoop2:
.b001	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.b003	2c 57 06	bit $0657			bit 	gxMode 						; check H Flip
.b006	50 06		bvc $b00e			bvc 	_GXNoHFlip
.b008	ad f0 06	lda $06f0			lda 	gxMask
.b00b	38		sec				sec
.b00c	e5 3a		sbc $3a				sbc 	gxzTemp2
.b00e					_GXNoHFlip:
.b00e	aa		tax				tax 								; read from the pixel buffer
.b00f	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.b012	d0 07		bne $b01b			bne 	_GXDraw 					; draw if non zero
.b014	ad f4 06	lda $06f4			lda 	gxUseMode 					; check to see if solid background
.b017	29 04		and #$04			and 	#4
.b019	f0 0a		beq $b025			beq 	_GXZeroPixel
.b01b					_GXDraw:
.b01b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.b01d	2d 5a 06	and $065a			and 	gxANDValue
.b020	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.b023	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.b025					_GXZeroPixel:
.b025	c8		iny				iny 								; advance pointer
.b026	d0 05		bne $b02d			bne 	_GXNoShift
.b028	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.b02a	20 6f af	jsr $af6f			jsr 	GXDLTCheckWrap				; check for new page.
.b02d					_GXNoShift:
.b02d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.b02f	d0 d0		bne $b001			bne 	_GXROLLoop2
.b031	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.b033	a5 3a		lda $3a				lda 	gxzTemp2
.b035	cd ef 06	cmp $06ef			cmp 	gxSize
.b038	d0 c2		bne $affc			bne 	_GXROLLoop1
.b03a	ee 4c 06	inc $064c			inc 	gxY0
.b03d	60		rts				rts
.06ef					gxSize:
>06ef							.fill 	1
.06f0					gxMask:
>06f0							.fill 	1
.06f1					gxAcquireVector:
>06f1							.fill 	2
.06f3					gxScale:
>06f3							.fill 	1
.06f4					gxUseMode:
>06f4							.fill 	1
.b03e					GXFontHandler:
.b03e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b040	4d 57 06	eor $0657			eor 	gxMode
.b043	8d f4 06	sta $06f4			sta 	gxUseMode
.b046	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.b048	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.b04a	26 37		rol $37				rol	 	gxzTemp0+1
.b04c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.b04e	26 37		rol $37				rol	 	gxzTemp0+1
.b050	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.b052	26 37		rol $37				rol	 	gxzTemp0+1
.b054	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.b056	09 c0		ora #$c0			ora 	#$C0
.b058	85 37		sta $37				sta 	gxzTemp0+1
.b05a	a9 08		lda #$08			lda 	#8 							; size 8x8
.b05c	a2 64		ldx #$64			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.b05e	a0 b0		ldy #$b0			ldy 	#GXGetGraphicDataFont >> 8
.b060	20 7c af	jsr $af7c			jsr 	GXDrawGraphicElement
.b063	60		rts				rts
.b064					GXGetGraphicDataFont:
.b064	8a		txa				txa 								; X->Y
.b065	a8		tay				tay
.b066	a6 01		ldx $01				ldx 	1 							; preserve old value
.b068	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.b06a	85 01		sta $01				sta 	1
.b06c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.b06e	86 01		stx $01				stx 	1 							; put old value back.
.b070	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.b072					_GXExpand:
.b072	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b075	0a		asl a				asl 	a 							; shift bit 7 into C
.b076	90 08		bcc $b080			bcc 	_GXNoPixel
.b078	48		pha				pha 								; if set, set pixel buffer to current colour.
.b079	ad 58 06	lda $0658			lda 	gxColour
.b07c	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b07f	68		pla				pla
.b080					_GXNoPixel:
.b080	e8		inx				inx 								; do the whole byte.
.b081	e0 08		cpx #$08			cpx 	#8
.b083	d0 ed		bne $b072			bne 	_GXExpand
.b085	60		rts				rts
.b086					GXSpriteHandler:
.b086	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b088	4d 57 06	eor $0657			eor 	gxMode
.b08b	8d f4 06	sta $06f4			sta 	gxUseMode
.b08e	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b090	da		phx				phx
.b091	20 21 b2	jsr $b221			jsr 	GXOpenBitmap 				; can access sprite information
.b094	68		pla				pla
.b095	20 02 b3	jsr $b302			jsr 	GXFindSprite 				; get the sprite address
.b098	08		php				php
.b099	20 29 b2	jsr $b229			jsr 	GXCloseBitmap
.b09c	28		plp				plp
.b09d	b0 0a		bcs $b0a9			bcs		_GXSHExit 					; exit if find failed.
.b09f	ad f5 06	lda $06f5			lda 	GXSizePixels 				; return size
.b0a2	a2 aa		ldx #$aa			ldx 	#GXSpriteAcquire & $FF
.b0a4	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b0a6	20 7c af	jsr $af7c			jsr 	GXDrawGraphicElement
.b0a9					_GXSHExit:
.b0a9	60		rts				rts
.b0aa					GXSpriteAcquire:
.b0aa	ad 55 06	lda $0655			lda 	GXSpritePage				; point to base page
.b0ad	85 0b		sta $0b				sta 	GXEditSlot
.b0af	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b0b1	a9 00		lda #$00			lda 	#0
.b0b3	ae f6 06	ldx $06f6			ldx 	GXSizeBits
.b0b6					_GXTimesRowNumber:
.b0b6	18		clc				clc
.b0b7	65 36		adc $36				adc 	zTemp0
.b0b9	ca		dex				dex
.b0ba	10 fa		bpl $b0b6			bpl 	_GXTimesRowNumber
.b0bc	64 37		stz $37				stz 	gxzTemp0+1
.b0be	0a		asl a				asl 	a 							; row x 2,4,6,8
.b0bf	26 37		rol $37				rol 	gxzTemp0+1
.b0c1	0a		asl a				asl 	a 							; row x 4,8,12,16
.b0c2	26 37		rol $37				rol 	gxzTemp0+1
.b0c4	0a		asl a				asl 	a 							; row x 8,16,24,32
.b0c5	26 37		rol $37				rol 	gxzTemp0+1
.b0c7	85 36		sta $36				sta 	gxzTemp0
.b0c9	18		clc				clc 								; add base address.
.b0ca	a5 36		lda $36				lda 	gxzTemp0
.b0cc	6d f8 06	adc $06f8			adc 	GXSpriteOffset
.b0cf	85 36		sta $36				sta 	gxzTemp0
.b0d1	a5 37		lda $37				lda 	gxzTemp0+1
.b0d3	6d f9 06	adc $06f9			adc 	GXSpriteOffset+1
.b0d6					_GXSAFindPage:
.b0d6	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b0d8	90 06		bcc $b0e0			bcc 	_GXSAFoundPage
.b0da	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b0dc	e6 0b		inc $0b				inc 	GXEditSlot
.b0de	80 f6		bra $b0d6			bra 	_GXSAFindPage
.b0e0					_GXSAFoundPage:
.b0e0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b0e2	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b0e4	a0 00		ldy #$00			ldy 	#0
.b0e6					_GXSACopyLoop:
.b0e6	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b0e8	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b0eb	c8		iny				iny
.b0ec	cc f5 06	cpy $06f5			cpy 	GXSizePixels
.b0ef	d0 f5		bne $b0e6			bne 	_GXSACopyLoop
.b0f1	60		rts				rts
.b0f2					GXSelect:
.b0f2	ad 52 06	lda $0652			lda 	gxSpritesOn
.b0f5	f0 22		beq $b119			beq 	_GXSFail
.b0f7	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b0f9	c9 40		cmp #$40			cmp 	#64
.b0fb	b0 1c		bcs $b119			bcs 	_GXSFail
.b0fd	8d 5d 06	sta $065d			sta 	GSCurrentSpriteID
.b100	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b102	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b104	06 36		asl $36				asl 	gxzTemp0
.b106	06 36		asl $36				asl 	gxzTemp0
.b108	06 36		asl $36				asl 	gxzTemp0
.b10a	2a		rol a				rol 	a
.b10b	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b10d	8d 5f 06	sta $065f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b110	85 37		sta $37				sta 	gxzTemp0+1
.b112	a5 36		lda $36				lda 	gxzTemp0
.b114	8d 5e 06	sta $065e			sta 	GSCurrentSpriteAddr
.b117	18		clc				clc
.b118	60		rts				rts
.b119					_GXSFail:
.b119	38		sec				sec
.b11a	60		rts				rts
.b11b					GXSelectImage:
.b11b	ad 52 06	lda $0652			lda 	gxSpritesOn
.b11e	f0 74		beq $b194			beq 	_GXSIFail
.b120	ad 5f 06	lda $065f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b123	f0 6f		beq $b194			beq 	_GXSIFail 					; (checking the MSB)
.b125	64 01		stz $01				stz 	1
.b127	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b129	d0 6b		bne $b196			bne 	_GXSIHide
.b12b	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b12d	48		pha				pha
.b12e	20 21 b2	jsr $b221			jsr 	GXOpenBitmap
.b131	68		pla				pla
.b132	20 02 b3	jsr $b302			jsr 	GXFindSprite
.b135	b0 5a		bcs $b191			bcs 	_GXSICloseFail 				; no image
.b137	a0 01		ldy #$01			ldy 	#1
.b139	ad 5e 06	lda $065e			lda 	GSCurrentSpriteAddr
.b13c	85 36		sta $36				sta 	gxzTemp0
.b13e	ad 5f 06	lda $065f			lda 	GSCurrentSpriteAddr+1
.b141	85 37		sta $37				sta 	gxzTemp0+1
.b143	ad f8 06	lda $06f8			lda 	GXSpriteOffset
.b146	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b148	18		clc				clc
.b149	ad f9 06	lda $06f9			lda 	GXSpriteOffset+1
.b14c	6d 60 06	adc $0660			adc 	GXSpriteOffsetBase
.b14f	c8		iny				iny
.b150	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b152	ad 61 06	lda $0661			lda 	GXSpriteOffsetBase+1
.b155	69 00		adc #$00			adc 	#0
.b157	c8		iny				iny
.b158	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b15a	ad f6 06	lda $06f6			lda 	GXSizeBits 					; get raw size
.b15d	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b15f	2a		rol a				rol 	a 							; x 2
.b160	0a		asl a				asl 	a 							; x 4
.b161	0a		asl a				asl 	a 							; x 8
.b162	0a		asl a				asl 	a 							; x 16
.b163	0d f7 06	ora $06f7			ora 	GXSpriteLUT 				; Or with LUT
.b166	0a		asl a				asl 	a 							; 1 shift
.b167	09 01		ora #$01			ora 	#1 							; enable sprite.
.b169	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b16b	20 29 b2	jsr $b229			jsr 	GXCloseBitmap
.b16e	ae 5d 06	ldx $065d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b171	bd a2 06	lda $06a2,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b174	29 3f		and #$3f			and 	#$3F
.b176	9d a2 06	sta $06a2,x			sta 	GXSpriteHigh,x
.b179	ad f6 06	lda $06f6			lda 	GXSizeBits 					; get bit size
.b17c	6a		ror a				ror 	a 							; shift into bits 6/7
.b17d	6a		ror a				ror 	a
.b17e	6a		ror a				ror 	a
.b17f	29 c0		and #$c0			and 	#$C0
.b181	1d a2 06	ora $06a2,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b184	9d a2 06	sta $06a2,x			sta 	GXSpriteHigh,x
.b187	bd 62 06	lda $0662,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b18a	29 7f		and #$7f			and 	#$7F
.b18c	9d 62 06	sta $0662,x			sta 	GXSpriteLow,x
.b18f	18		clc				clc
.b190	60		rts				rts
.b191					_GXSICloseFail:
.b191	20 29 b2	jsr $b229			jsr 	GXCloseBitmap
.b194					_GXSIFail:
.b194	38		sec				sec
.b195	60		rts				rts
.b196					_GXSIHide:
.b196	ad 5e 06	lda $065e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b199	85 36		sta $36				sta 	gxzTemp0
.b19b	ad 5f 06	lda $065f			lda 	GSCurrentSpriteAddr+1
.b19e	85 37		sta $37				sta 	gxzTemp0+1
.b1a0	a9 00		lda #$00			lda 	#0
.b1a2	92 36		sta ($36)			sta 	(gxzTemp0)
.b1a4	ae 5d 06	ldx $065d			ldx 	GSCurrentSpriteID 			; get sprite ID
.b1a7	bd 62 06	lda $0662,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b1aa	09 80		ora #$80			ora 	#$80
.b1ac	9d 62 06	sta $0662,x			sta 	GXSpriteLow,x
.b1af	18		clc				clc
.b1b0	60		rts				rts
.b1b1					GXMoveSprite:
.b1b1	ad 52 06	lda $0652			lda 	gxSpritesOn
.b1b4	f0 65		beq $b21b			beq 	_GXSIFail
.b1b6	ad 5f 06	lda $065f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b1b9	f0 60		beq $b21b			beq 	_GXSIFail
.b1bb	85 37		sta $37				sta 	gxzTemp0+1
.b1bd	a0 04		ldy #$04			ldy 	#4
.b1bf	ad 5e 06	lda $065e			lda 	GSCurrentSpriteAddr
.b1c2	85 36		sta $36				sta 	gxzTemp0
.b1c4	ae 5d 06	ldx $065d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b1c7	bd a2 06	lda $06a2,x			lda 	GXSpriteHigh,x
.b1ca	2a		rol a				rol 	a	 						; into bits 0,1.
.b1cb	2a		rol a				rol 	a
.b1cc	2a		rol a				rol 	a
.b1cd	29 03		and #$03			and 	#3
.b1cf	aa		tax				tax
.b1d0	bd 1d b2	lda $b21d,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b1d3	48		pha				pha
.b1d4	18		clc				clc
.b1d5	6d 4a 06	adc $064a			adc 	gxX0						; copy position.
.b1d8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b1da	c8		iny				iny
.b1db	ad 4b 06	lda $064b			lda 	gxX0+1
.b1de	69 00		adc #$00			adc 	#0
.b1e0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b1e2	c8		iny				iny
.b1e3	68		pla				pla
.b1e4	18		clc				clc
.b1e5	6d 4c 06	adc $064c			adc 	gxY0
.b1e8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b1ea	a9 00		lda #$00			lda 	#0
.b1ec	69 00		adc #$00			adc 	#0
.b1ee	c8		iny				iny
.b1ef	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b1f1	4e 4b 06	lsr $064b			lsr 	gxX0+1 						; divide X by 4
.b1f4	6e 4a 06	ror $064a			ror 	gxX0
.b1f7	4e 4a 06	lsr $064a			lsr 	gxX0
.b1fa	4e 4c 06	lsr $064c			lsr 	gxY0 						; divide Y by 4
.b1fd	4e 4c 06	lsr $064c			lsr 	gxY0
.b200	ae 5d 06	ldx $065d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b203	bd 62 06	lda $0662,x			lda 	GXSpriteLow,x
.b206	29 80		and #$80			and 	#$80
.b208	0d 4a 06	ora $064a			ora 	gxX0
.b20b	9d 62 06	sta $0662,x			sta 	GXSpriteLow,x
.b20e	bd a2 06	lda $06a2,x			lda 	GXSpriteHigh,x
.b211	29 c0		and #$c0			and 	#$C0
.b213	0d 4c 06	ora $064c			ora 	gxY0
.b216	9d a2 06	sta $06a2,x			sta 	GXSpriteHigh,x
.b219	18		clc				clc
.b21a	60		rts				rts
.b21b					_GXSIFail:
.b21b	38		sec				sec
.b21c	60		rts				rts
.b21d					_GXMSOffset:
>b21d	1c						.byte 	32-8/2
>b21e	18						.byte 	32-16/2
>b21f	14						.byte 	32-24/2
>b220	10						.byte 	32-32/2
.b221					GXOpenBitmap:
.b221	78		sei				sei 								; no interrupts here
.b222	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b224	8d 5b 06	sta $065b			sta 	gxOriginalLUTValue
.b227	58		cli				cli
.b228	60		rts				rts
.b229					GXCloseBitmap:
.b229	78		sei				sei
.b22a	ad 5b 06	lda $065b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b22d	85 0b		sta $0b				sta 	GXEditSlot
.b22f	58		cli				cli
.b230	60		rts				rts
.b231					GXPositionCalc:
.b231	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b233	48		pha				pha
.b234	ad 4c 06	lda $064c			lda 	GXY0 						; gxzScreen = Y0
.b237	85 3c		sta $3c				sta 	gxzScreen
.b239	64 3d		stz $3d				stz 	gxzScreen+1
.b23b	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b23d	26 3d		rol $3d				rol 	gxzScreen+1
.b23f	06 3c		asl $3c				asl 	gxzScreen
.b241	26 3d		rol $3d				rol 	gxzScreen+1
.b243	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b244	65 3c		adc $3c				adc 	gxzScreen
.b246	85 3c		sta $3c				sta 	gxzScreen
.b248	90 02		bcc $b24c			bcc 	_GXPCNoCarry
.b24a	e6 3d		inc $3d				inc 	gxzScreen+1
.b24c					_GXPCNoCarry:
.b24c	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b24e	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b250	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b252	85 36		sta $36				sta 	gxzTemp0
.b254	64 3d		stz $3d				stz 	gxzScreen+1
.b256	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b258					_GXPCMultiply32:
.b258	06 3c		asl $3c				asl 	gxzScreen
.b25a	26 3d		rol $3d				rol 	gxzScreen+1
.b25c	3a		dec a				dec 	a
.b25d	d0 f9		bne $b258			bne 	_GXPCMultiply32
.b25f	18		clc				clc
.b260	ad 4a 06	lda $064a			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b263	65 3c		adc $3c				adc 	gxzScreen
.b265	8d 5c 06	sta $065c			sta 	gsOffset
.b268	ad 4b 06	lda $064b			lda 	GXX0+1
.b26b	65 3d		adc $3d				adc 	gxzScreen+1
.b26d	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b26f	90 04		bcc $b275			bcc 	_GXPCNoOverflow
.b271	29 1f		and #$1f			and 	#$1F 						; fix it up
.b273	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b275					_GXPCNoOverflow:
.b275	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b277	85 3d		sta $3d				sta 	gxzScreen+1
.b279	64 3c		stz $3c				stz 	gxzScreen
.b27b	18		clc				clc
.b27c	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b27e	6d 54 06	adc $0654			adc 	gxBasePage 					; by adding the base page
.b281	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b283	68		pla				pla
.b284	85 36		sta $36				sta 	gxzTemp0
.b286	60		rts				rts
.b287					GXMovePositionDown:
.b287	18		clc				clc 								; add 320 to offset/temp+1
.b288	ad 5c 06	lda $065c			lda 	gsOffset
.b28b	69 40		adc #$40			adc 	#64
.b28d	8d 5c 06	sta $065c			sta 	gsOffset
.b290	a5 3d		lda $3d				lda 	gxzScreen+1
.b292	69 01		adc #$01			adc 	#1
.b294	85 3d		sta $3d				sta 	gxzScreen+1
.b296	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b298	90 07		bcc $b2a1			bcc 	_GXMPDExit
.b29a	38		sec				sec  								; next page
.b29b	e9 20		sbc #$20			sbc 	#$20
.b29d	85 3d		sta $3d				sta 	gxzScreen+1
.b29f	e6 0b		inc $0b				inc 	GXEditSlot
.b2a1					_GXMPDExit:
.b2a1	60		rts				rts
.b2a2					GXCollide:
.b2a2	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b2a4	aa		tax				tax
.b2a5	05 37		ora $37				ora 	gxzTemp0+1
.b2a7	29 c0		and #$c0			and 	#$C0
.b2a9	38		sec				sec
.b2aa	d0 53		bne $b2ff			bne 	_GXCollideFail 				; if either >= 64, fail.
.b2ac	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b2ae	b9 62 06	lda $0662,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b2b1	1d 62 06	ora $0662,x			ora 	GXSpriteLow,x
.b2b4	30 48		bmi $b2fe			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b2b6	18		clc				clc 								; need to calculate sum of sizes.
.b2b7	b9 a2 06	lda $06a2,y			lda 	GXSpriteHigh,y
.b2ba	7d a2 06	adc $06a2,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b2bd	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b2bf	6a		ror a				ror 	a 							; 5/6/7
.b2c0	4a		lsr a				lsr 	a 							; 4/5/6
.b2c1	4a		lsr a				lsr 	a 							; 3/4/5
.b2c2	4a		lsr a				lsr 	a 							; 2/3/4
.b2c3	18		clc				clc
.b2c4	69 08		adc #$08			adc 	#$08
.b2c6	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b2c7	4a		lsr a				lsr 	a
.b2c8	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b2ca	b9 a2 06	lda $06a2,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b2cd	29 3f		and #$3f			and 	#$3F
.b2cf	85 39		sta $39				sta 	gxzTemp1+1
.b2d1	38		sec				sec
.b2d2	bd a2 06	lda $06a2,x			lda 	GXSpriteHigh,x
.b2d5	29 3f		and #$3f			and 	#$3F
.b2d7	e5 39		sbc $39				sbc 	gxzTemp1+1
.b2d9	b0 03		bcs $b2de			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b2db	49 ff		eor #$ff			eor 	#$FF
.b2dd	1a		inc a				inc 	a
.b2de					_GXCAbs1:
.b2de	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b2e0	b0 1c		bcs $b2fe			bcs 	_GXOkayFail
.b2e2	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b2e4	38		sec				sec 								; calculate |x1-x0|
.b2e5	b9 62 06	lda $0662,y			lda 	GXSpriteLow,y
.b2e8	fd 62 06	sbc $0662,x			sbc 	GXSpriteLow,x
.b2eb	b0 03		bcs $b2f0			bcs 	_GXCAbs2
.b2ed	49 ff		eor #$ff			eor 	#$FF
.b2ef	1a		inc a				inc 	a
.b2f0					_GXCAbs2:
.b2f0	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b2f2	b0 0a		bcs $b2fe			bcs 	_GXOkayFail
.b2f4	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b2f6	90 02		bcc $b2fa			bcc 	_GXCHaveLowest
.b2f8	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b2fa					_GXCHaveLowest:
.b2fa	0a		asl a				asl 	a 							; scale to allow for >> 2
.b2fb	0a		asl a				asl 	a
.b2fc	18		clc				clc
.b2fd	60		rts				rts
.b2fe					_GXOkayFail:
.b2fe	18		clc				clc
.b2ff					_GXCollideFail:
.b2ff	a9 ff		lda #$ff			lda 	#$FF
.b301	60		rts				rts
.b302					GXFindSprite:
.b302	aa		tax				tax
.b303	ad 55 06	lda $0655			lda 	GXSpritePage 				; access the base page of the sprite
.b306	85 0b		sta $0b				sta 	GXEditSlot
.b308	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b30b	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b30e	f0 33		beq $b343			beq 	_GXFSFail
.b310	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b313	8d f9 06	sta $06f9			sta 	GXSpriteOffset+1
.b316	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b319	48		pha				pha 								; save twice
.b31a	48		pha				pha
.b31b	29 03		and #$03			and 	#3 							; get sprite size
.b31d	8d f6 06	sta $06f6			sta 	GXSizeBits 					; save raw (0-3)
.b320	aa		tax				tax
.b321	bd 45 b3	lda $b345,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b324	8d f5 06	sta $06f5			sta 	GXSizePixels 					; save (8/16/24/32)
.b327	68		pla				pla 								; get LUT
.b328	4a		lsr a				lsr		a
.b329	4a		lsr a				lsr		a
.b32a	29 03		and #$03			and 	#3
.b32c	8d f7 06	sta $06f7			sta 	GXSpriteLUT
.b32f	68		pla				pla 								; address, neeeds to be x 4
.b330	29 f0		and #$f0			and 	#$F0
.b332	8d f8 06	sta $06f8			sta 	GXSpriteOffset
.b335	0e f8 06	asl $06f8			asl 	GXSpriteOffset
.b338	2e f9 06	rol $06f9			rol 	GXSpriteOffset+1
.b33b	0e f8 06	asl $06f8			asl 	GXSpriteOffset
.b33e	2e f9 06	rol $06f9			rol 	GXSpriteOffset+1
.b341	18		clc				clc
.b342	60		rts				rts
.b343					_GXFSFail:
.b343	38		sec				sec
.b344	60		rts				rts
.b345					_GXFXSSTTable:
>b345	08 10 18 20					.byte 	8,16,24,32
.06f5					GXSizePixels:
>06f5							.fill 	1
.06f6					GXSizeBits:
>06f6							.fill 	1
.06f7					GXSpriteLUT:
>06f7							.fill 	1
.06f8					GXSpriteOffset:
>06f8							.fill 	2
.b349					GXSortXY:
.b349	20 67 b3	jsr $b367			jsr 	GXSortY 					; will be sorted on Y now
.b34c	ad 4a 06	lda $064a			lda 	gxX0 						; compare X0 v X1
.b34f	cd 4e 06	cmp $064e			cmp 	gxX1
.b352	ad 4b 06	lda $064b			lda 	gXX0+1
.b355	ed 4f 06	sbc $064f			sbc 	gXX1+1
.b358	90 0c		bcc $b366			bcc 	_GXSXYExit 					; X0 < X1 exit
.b35a	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b35c	a0 04		ldy #$04			ldy 	#4
.b35e	20 7b b3	jsr $b37b			jsr 	GXSwapXY
.b361	e8		inx				inx
.b362	c8		iny				iny
.b363	20 7b b3	jsr $b37b			jsr 	GXSwapXY
.b366					_GXSXYExit:
.b366	60		rts				rts
.b367					GXSortY:
.b367	ad 4c 06	lda $064c			lda 	gxY0 						; if Y0 >= Y1
.b36a	cd 50 06	cmp $0650			cmp 	gxY1
.b36d	90 0b		bcc $b37a			bcc 	_GXSYSorted
.b36f	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b371	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b373					_GXSwap1:
.b373	20 7b b3	jsr $b37b			jsr 	GXSwapXY
.b376	88		dey				dey
.b377	ca		dex				dex
.b378	10 f9		bpl $b373			bpl 	_GXSwap1
.b37a					_GXSYSorted:
.b37a	60		rts				rts
.b37b					GXSwapXY:
.b37b	bd 4a 06	lda $064a,x			lda 	gxX0,x
.b37e	48		pha				pha
.b37f	b9 4a 06	lda $064a,y			lda 	gxX0,y
.b382	9d 4a 06	sta $064a,x			sta 	gxX0,x
.b385	68		pla				pla
.b386	99 4a 06	sta $064a,y			sta 	gxX0,y
.b389	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b8ad					KeywordSet0:
>b8ad	00 65					.text	0,$65,""               ; $80 !0:EOF
>b8af	00 58					.text	0,$58,""               ; $81 !1:SH1
>b8b1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b8b3	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b8b9	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b8c1	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b8c7	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b8ce	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b8d6	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b8dd	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b8e4	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b8ea	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b8f0	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b8f8	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b8ff	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b906	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b90d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b915	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b91b	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b921	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b928	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b92e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b934	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $96 PLAYING(
>b93c	47 28
>b93e	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $97 RANDOM(
>b946	28
>b947	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $98 RIGHT$(
>b94f	28
>b950	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $99 RND(
>b956	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9a SGN(
>b95c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9b SPC(
>b962	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9c STR$(
>b969	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9d TIMER(
>b971	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9e TRUE
>b977	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9f VAL(
>b97d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a0 FOR
>b982	02 8f 49 46				.text	2,$8f,"IF"             ; $a1 IF
>b986	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a2 PROC
>b98c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a3 REPEAT
>b994	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a4 WHILE
>b99b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a5 ENDIF
>b9a2	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a6 ENDPROC
>b9aa	43
>b9ab	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a7 NEXT
>b9b1	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a8 THEN
>b9b7	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a9 UNTIL
>b9be	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $aa WEND
>b9c4	02 9b 42 59				.text	2,$9b,"BY"             ; $ab BY
>b9c8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ac CALL
>b9ce	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ad CIRCLE
>b9d6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ae CLEAR
>b9dd	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $af CLS
>b9e2	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b0 COLOR
>b9e9	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b1 COLOUR
>b9f1	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b2 DATA
>b9f7	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b3 DIM
>b9fc	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b4 DOWNTO
>ba04	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b5 ELSE
>ba0a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b6 FROM
>ba10	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b7 GFX
>ba15	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b8 GOSUB
>ba1c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b9 GOTO
>ba22	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $ba HERE
>ba28	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $bb IMAGE
>ba2f	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bc LET
>ba34	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bd LINE
>ba3a	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $be LOCAL
>ba41	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bf OFF
>ba46	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c0 ON
>ba4a	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c1 OUTLINE
>ba52	45
>ba53	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c2 PALETTE
>ba5b	45
>ba5c	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c3 PLOT
>ba62	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c4 PRINT
>ba69	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c5 READ
>ba6f	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c6 RECT
>ba75	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c7 REM
>ba7a	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c8 RETURN
>ba82	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c9 SOLID
>ba89	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $ca SOUND
>ba90	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $cb SPRITE
>ba98	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $cc TEXT
>ba9e	02 a3 54 4f				.text	2,$a3,"TO"             ; $cd TO
>baa2	ff					.text	$FF
.baa3					KeywordSet1:
>baa3	00 65					.text	0,$65,""               ; $80 !0:EOF
>baa5	00 58					.text	0,$58,""               ; $81 !1:SH1
>baa7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>baa9	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>bab1	4c 45
>bab3	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>babb	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>bac3	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>bac8	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>bace	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>bad3	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>badb	45
>badc	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>bae1	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>bae9	53
>baea	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>baf0	ff					.text	$FF
.baf1					KeywordSet2:
>baf1	00 65					.text	0,$65,""               ; $80 !0:EOF
>baf3	00 58					.text	0,$58,""               ; $81 !1:SH1
>baf5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>baf7	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>bafc	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>bb01	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>bb06	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>bb0b	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>bb10	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>bb15	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>bb1a	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>bb1f	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>bb24	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>bb29	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>bb2e	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>bb33	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>bb38	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>bb3d	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>bb42	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>bb47	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>bb4c	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>bb51	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>bb56	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>bb5b	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>bb60	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>bb65	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bb6a	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bb6f	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>bb74	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bb79	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bb7e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>bb83	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>bb88	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>bb8d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>bb92	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bb97	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>bb9c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>bba1	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>bba6	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>bbab	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bbb0	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bbb5	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bbba	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bbbf	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bbc4	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bbc9	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bbce	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bbd3	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bbd8	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bbdd	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bbe2	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bbe7	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bbec	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bbf1	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bbf6	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bbfb	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bc00	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bc05	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bc0a	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bc0f	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bc14	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bc19	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bc1e	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bc23	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bc28	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bc2d	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bc32	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bc37	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bc3c	ff					.text	$FF
.b38a					ListConvertLine:
.b38a	48		pha				pha 								; save indent on the stack
.b38b	9c 9d 04	stz $049d			stz 	tbOffset
.b38e	9c ab 04	stz $04ab			stz 	tokenBuffer
.b391	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b393	b1 30		lda ($30),y			lda 	(codePtr),y
.b395	aa		tax				tax
.b396	88		dey				dey
.b397	b1 30		lda ($30),y			lda 	(codePtr),y
.b399	20 63 92	jsr $9263			jsr 	LCLConvertInt16
.b39c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b39e	86 37		stx $37				stx 	zTemp0+1
.b3a0	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b3a2	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b3a5	a0 00		ldy #$00			ldy 	#0
.b3a7					_LCCopyNumber:
.b3a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3a9	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b3ac	c8		iny				iny
.b3ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3af	d0 f6		bne $b3a7			bne 	_LCCopyNumber
.b3b1	68		pla				pla 								; adjustment to indent
.b3b2	48		pha				pha 								; save on stack
.b3b3	10 0c		bpl $b3c1			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b3b5	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b3b6	6d a6 04	adc $04a6			adc 	listIndent
.b3b9	8d a6 04	sta $04a6			sta 	listIndent
.b3bc	10 03		bpl $b3c1			bpl 	_LCNoAdjust
.b3be	9c a6 04	stz $04a6			stz 	listIndent
.b3c1					_LCNoAdjust:
.b3c1	18		clc				clc		 							; work out actual indent.
.b3c2	ad a6 04	lda $04a6			lda 	listIndent
.b3c5	0a		asl a				asl 	a
.b3c6	69 06		adc #$06			adc 	#6
.b3c8	85 36		sta $36				sta 	zTemp0
.b3ca					_LCPadOut:
.b3ca	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b3cc	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b3cf	ad 9d 04	lda $049d			lda 	tbOffset
.b3d2	c5 36		cmp $36				cmp 	zTemp0
.b3d4	d0 f4		bne $b3ca			bne 	_LCPadOut
.b3d6	a0 03		ldy #$03			ldy 	#3 							; start position.
.b3d8					_LCMainLoop:
.b3d8	a9 8a		lda #$8a			lda 	#CLIPunctuation+$80
.b3da	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b3dd	b1 30		lda ($30),y			lda 	(codePtr),y
.b3df	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b3e1	f0 17		beq $b3fa			beq 	_LCExit
.b3e3	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b3e5	90 1e		bcc $b405			bcc 	_LCDoubles
.b3e7	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b3e9	90 2a		bcc $b415			bcc 	_LCShiftPunc
.b3eb	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b3ed	90 35		bcc $b424			bcc 	_LCPunctuation
.b3ef	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b3f1	90 3e		bcc $b431			bcc 	_LCIdentifiers
.b3f3	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b3f5	90 5f		bcc $b456			bcc 	_LCTokens
.b3f7	4c b6 b4	jmp $b4b6			jmp 	_LCData 					; 254-5 are data objects
.b3fa					_LCExit:
.b3fa	68		pla				pla 								; get old indent adjust
.b3fb	30 07		bmi $b404			bmi 	_LCExit2
.b3fd	18		clc				clc 								; add to indent if +ve
.b3fe	6d a6 04	adc $04a6			adc 	listIndent
.b401	8d a6 04	sta $04a6			sta 	listIndent
.b404					_LCExit2:
.b404	60		rts				rts
.b405					_LCDoubles:
.b405	48		pha				pha
.b406	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b407	29 02		and #$02			and 	#2
.b409	09 3c		ora #$3c			ora 	#60 						; make < >
.b40b	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b40e	68		pla				pla 								; restore, do lower bit
.b40f	29 03		and #$03			and 	#3
.b411	09 3c		ora #$3c			ora 	#60
.b413	80 0f		bra $b424			bra		_LCPunctuation 				; print, increment, loop
.b415					_LCShiftPunc:
.b415	aa		tax				tax 								; save in X
.b416	29 07		and #$07			and 	#7 							; lower 3 bits
.b418	f0 02		beq $b41c			beq 	_LCNoAdd
.b41a	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b41c					_LCNoAdd:
.b41c	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b41e	90 02		bcc $b422			bcc 	_LCNoAdd2
.b420	09 20		ora #$20			ora 	#32 						; adds $20
.b422					_LCNoAdd2:
.b422	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b424					_LCPunctuation:
.b424	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b426	d0 03		bne $b42b			bne 	_LCPContinue
.b428	20 fd b4	jsr $b4fd			jsr 	LCLDeleteLastSpace
.b42b					_LCPContinue:
.b42b	c8		iny				iny 								; consume character
.b42c	20 e7 b4	jsr $b4e7			jsr 	LCLWrite 					; write it out.
.b42f	80 a7		bra $b3d8			bra 	_LCMainLoop 				; go round again.
.b431					_LCIdentifiers:
.b431	18		clc				clc 								; convert to physical address
.b432	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b434	85 37		sta $37				sta 	zTemp0+1
.b436	c8		iny				iny
.b437	b1 30		lda ($30),y			lda 	(codePtr),y
.b439	85 36		sta $36				sta 	zTemp0
.b43b	c8		iny				iny
.b43c	5a		phy				phy 								; save position
.b43d	a9 87		lda #$87			lda 	#CLIIdentifier+$80
.b43f	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b442	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b444					_LCOutIdentifier:
.b444	c8		iny				iny
.b445	b1 36		lda ($36),y			lda 	(zTemp0),y
.b447	29 7f		and #$7f			and 	#$7F
.b449	20 39 b5	jsr $b539			jsr 	LCLLowerCase
.b44c	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b44f	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b451	10 f1		bpl $b444			bpl 	_LCOutIdentifier
.b453	7a		ply				ply 								; restore position
.b454	80 82		bra $b3d8			bra 	_LCMainLoop
.b456					_LCTokens:
.b456	aa		tax				tax 								; token in X
.b457	a9 f1		lda #$f1			lda 	#((KeywordSet2) & $FF)
.b459	85 36		sta $36				sta 	0+zTemp0
.b45b	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b45d	85 37		sta $37				sta 	1+zTemp0
.b45f	e0 82		cpx #$82			cpx 	#$82
.b461	f0 16		beq $b479			beq 	_LCUseShift
.b463	a9 a3		lda #$a3			lda 	#((KeywordSet1) & $FF)
.b465	85 36		sta $36				sta 	0+zTemp0
.b467	a9 ba		lda #$ba			lda 	#((KeywordSet1) >> 8)
.b469	85 37		sta $37				sta 	1+zTemp0
.b46b	e0 81		cpx #$81			cpx 	#$81
.b46d	f0 0a		beq $b479			beq 	_LCUseShift
.b46f	a9 ad		lda #$ad			lda 	#((KeywordSet0) & $FF)
.b471	85 36		sta $36				sta 	0+zTemp0
.b473	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b475	85 37		sta $37				sta 	1+zTemp0
.b477	80 01		bra $b47a			bra 	_LCNoShift
.b479					_LCUseShift:
.b479	c8		iny				iny
.b47a					_LCNoShift:
.b47a	20 11 b5	jsr $b511			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.b47d	b1 30		lda ($30),y			lda 	(codePtr),y
.b47f	aa		tax				tax 								; into X
.b480					_LCFindText:
.b480	ca		dex				dex
.b481	10 0e		bpl $b491			bpl 	_LCFoundText 				; found text.
.b483	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b485	1a		inc a				inc 	a 							; one extra for size
.b486	38		sec				sec 								; one extra for checksum
.b487	65 36		adc $36				adc 	zTemp0 						; go to next token
.b489	85 36		sta $36				sta 	zTemp0
.b48b	90 f3		bcc $b480			bcc 	_LCFindText
.b48d	e6 37		inc $37				inc 	zTemp0+1
.b48f	80 ef		bra $b480			bra 	_LCFindText
.b491					_LCFoundText:
.b491	5a		phy				phy 								; save List position
.b492	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b494	aa		tax				tax
.b495	a9 83		lda #$83			lda 	#CLIToken+$80
.b497	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b49a	a0 02		ldy #$02			ldy 	#2
.b49c					_LCCopyToken:
.b49c	b1 36		lda ($36),y			lda 	(zTemp0),y
.b49e	20 39 b5	jsr $b539			jsr 	LCLLowerCase
.b4a1	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b4a4	c8		iny				iny
.b4a5	ca		dex				dex
.b4a6	d0 f4		bne $b49c			bne 	_LCCopyToken
.b4a8	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b4aa	f0 05		beq $b4b1			beq 	_LCNoSpace
.b4ac	a9 20		lda #$20			lda 	#' '
.b4ae	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b4b1					_LCNoSpace:
.b4b1	7a		ply				ply 								; restore position.
.b4b2	c8		iny				iny 								; consume token
.b4b3	4c d8 b3	jmp $b3d8			jmp 	_LCMainLoop 				; and go around again.
.b4b6					_LCData:
.b4b6	48		pha				pha 								; save type $FE/$FF
.b4b7	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b4b9	c9 fe		cmp #$fe			cmp 	#$FE
.b4bb	f0 07		beq $b4c4			beq 	_LCHaveOpener
.b4bd	a2 22		ldx #$22			ldx 	#'"'
.b4bf	a9 81		lda #$81			lda 	#CLIData+$80
.b4c1	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b4c4					_LCHaveOpener:
.b4c4	8a		txa				txa 								; output prefix (# or ")
.b4c5	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b4c8	c8		iny				iny 								; get count
.b4c9	b1 30		lda ($30),y			lda 	(codePtr),y
.b4cb	aa		tax				tax
.b4cc	c8		iny				iny 								; point at first character
.b4cd					_LCOutData:
.b4cd	b1 30		lda ($30),y			lda 	(codePtr),y
.b4cf	c9 00		cmp #$00			cmp 	#0
.b4d1	f0 03		beq $b4d6			beq 	_LCNoPrint
.b4d3	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b4d6					_LCNoPrint:
.b4d6	c8		iny				iny
.b4d7	ca		dex				dex
.b4d8	d0 f3		bne $b4cd			bne 	_LCOutData
.b4da	68		pla				pla 								; closing " required ?
.b4db	c9 ff		cmp #$ff			cmp 	#$FF
.b4dd	d0 05		bne $b4e4			bne 	_LCNoQuote
.b4df	a9 22		lda #$22			lda 	#'"'
.b4e1	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b4e4					_LCNoQuote:
.b4e4	4c d8 b3	jmp $b3d8			jmp 	_LCMainLoop
.b4e7					LCLWrite:
.b4e7	da		phx				phx
.b4e8	ae 9d 04	ldx $049d			ldx 	tbOffset
.b4eb	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b4ee	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b4f1	ee 9d 04	inc $049d			inc 	tbOffset
.b4f4	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b4f6	30 03		bmi $b4fb			bmi 	_LCLNoColour
.b4f8	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b4fb					_LCLNoColour:
.b4fb	fa		plx				plx
.b4fc	60		rts				rts
.b4fd					LCLDeleteLastSpace:
.b4fd	48		pha				pha
.b4fe	da		phx				phx
.b4ff	ae 9d 04	ldx $049d			ldx 	tbOffset
.b502	f0 0a		beq $b50e			beq 	_LCDLSExit
.b504	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b507	c9 20		cmp #$20			cmp 	#' '
.b509	d0 03		bne $b50e			bne 	_LCDLSExit
.b50b	ce 9d 04	dec $049d			dec 	tbOffset
.b50e					_LCDLSExit:
.b50e	fa		plx				plx
.b50f	68		pla				pla
.b510	60		rts				rts
.b511					LCLCheckSpaceRequired:
.b511	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b514	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b516	f0 1b		beq $b533			beq 	_LCCSRSpace
.b518	c9 29		cmp #$29			cmp 	#')'
.b51a	f0 17		beq $b533			beq 	_LCCSRSpace
.b51c	c9 23		cmp #$23			cmp 	#'#'
.b51e	f0 13		beq $b533			beq 	_LCCSRSpace
.b520	20 39 b5	jsr $b539			jsr 	LCLLowerCase 				; saves a little effort
.b523	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b525	90 11		bcc $b538			bcc 	_LCCSRExit
.b527	c9 3a		cmp #$3a			cmp 	#"9"+1
.b529	90 08		bcc $b533			bcc 	_LCCSRSpace
.b52b	c9 61		cmp #$61			cmp 	#"a"
.b52d	90 09		bcc $b538			bcc 	_LCCSRExit
.b52f	c9 7b		cmp #$7b			cmp 	#"z"+1
.b531	b0 05		bcs $b538			bcs 	_LCCSRExit
.b533					_LCCSRSpace:
.b533	a9 20		lda #$20			lda 	#' '
.b535	20 e7 b4	jsr $b4e7			jsr 	LCLWrite
.b538					_LCCSRExit:
.b538	60		rts				rts
.b539					LCLLowerCase:
.b539	c9 41		cmp #$41			cmp 	#"A"
.b53b	90 06		bcc $b543			bcc 	_LCLLCOut
.b53d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b53f	b0 02		bcs $b543			bcs 	_LCLLCOut
.b541	69 20		adc #$20			adc 	#$20
.b543					_LCLLCOut:
.b543	60		rts				rts
.b544					LCLUpperCase:
.b544	c9 61		cmp #$61			cmp 	#"a"
.b546	90 06		bcc $b54e			bcc 	_LCLUCOut
.b548	c9 7b		cmp #$7b			cmp 	#"z"+1
.b54a	b0 02		bcs $b54e			bcs 	_LCLUCOut
.b54c	e9 1f		sbc #$1f			sbc 	#$1F
.b54e					_LCLUCOut:
.b54e	60		rts				rts
.b54f					TOKSearchTable:
.b54f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b551	85 36		sta $36				sta 	zTemp0
.b553	a0 00		ldy #$00			ldy 	#0
.b555	a9 80		lda #$80			lda 	#$80 						; token #
.b557	85 38		sta $38				sta 	zTemp1
.b559					_TSTLoop:
.b559	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b55b	30 49		bmi $b5a6			bmi 	_TSTFail 					; -ve = end of table
.b55d	f0 2e		beq $b58d			beq 	_TSTNext 					; zero, check next it's a dummy
.b55f	c8		iny				iny 								; get the hash
.b560	b1 36		lda ($36),y			lda 	(zTemp0),y
.b562	88		dey				dey
.b563	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b566	d0 25		bne $b58d			bne 	_TSTNext
.b568	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b56b	38		sec				sec
.b56c	ed 80 04	sbc $0480			sbc 	identStart
.b56f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b571	d0 1a		bne $b58d			bne 	_TSTNext
.b573	5a		phy				phy 								; save Y , we might fail
.b574	c8		iny				iny 								; point to text
.b575	c8		iny				iny
.b576	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b579					_TSTCompareName:
.b579	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b57c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b57e	d0 0c		bne $b58c			bne 	_TSTNextPullY 				; fail, pullY and do next
.b580	e8		inx				inx
.b581	c8		iny				iny
.b582	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b585	d0 f2		bne $b579			bne 	_TSTCompareName
.b587	7a		ply				ply 								; throw Y
.b588	a5 38		lda $38				lda 	zTemp1 						; get token #
.b58a	38		sec				sec 								; return with CS = passed.
.b58b	60		rts				rts
.b58c					_TSTNextPullY:
.b58c	7a		ply				ply 								; restore current, fall through.
.b58d					_TSTNext:
.b58d	e6 38		inc $38				inc 	zTemp1 						; token counter
.b58f	98		tya				tya
.b590	18		clc				clc
.b591	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b593	1a		inc a				inc 	a 							; +1
.b594	1a		inc a				inc 	a 							; +2
.b595	a8		tay				tay
.b596	10 c1		bpl $b559			bpl 	_TSTLoop 					; if Y < $80 loop back
.b598	98		tya				tya 								; add Y to zTemp0 and reset Y
.b599	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b59b	18		clc				clc  								; but have tables > 255 bytes
.b59c	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b59e	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b5a0	90 b7		bcc $b559			bcc 	_TSTLoop
.b5a2	e6 37		inc $37				inc 	zTemp0+1
.b5a4	80 b3		bra $b559			bra 	_TSTLoop
.b5a6					_TSTFail:
.b5a6	18		clc				clc
.b5a7	60		rts				rts
.b5a8					TokeniseLine:
.b5a8	20 30 b7	jsr $b730			jsr 	LCLFixLineBufferCase 		; fix line case
.b5ab	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b5ad	8d a8 04	sta $04a8			sta 	tokenOffset
.b5b0	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b5b3	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b5b6	a2 ff		ldx #$ff			ldx 	#$FF
.b5b8					_TKFindFirst:
.b5b8	e8		inx				inx
.b5b9	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b5bc	f0 79		beq $b637			beq 	_TKExit
.b5be	c9 20		cmp #$20			cmp 	#' '
.b5c0	90 f6		bcc $b5b8			bcc 	_TKFindFirst
.b5c2	c9 30		cmp #$30			cmp 	#'0'
.b5c4	90 07		bcc $b5cd			bcc 	_TKNoLineNumber
.b5c6	c9 3a		cmp #$3a			cmp 	#'9'+1
.b5c8	b0 03		bcs $b5cd			bcs 	_TKNoLineNumber
.b5ca	20 5a b7	jsr $b75a			jsr 	TOKExtractLineNumber
.b5cd					_TKNoLineNumber:
.b5cd					_TKTokeniseLoop:
.b5cd	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b5d0	f0 65		beq $b637			beq 	_TKExit
.b5d2	e8		inx				inx
.b5d3	c9 20		cmp #$20			cmp 	#' '
.b5d5	f0 f6		beq $b5cd			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b5d7	ca		dex				dex 								; undo last get, A contains character, X is position.
.b5d8	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b5da	f0 61		beq $b63d			beq 	_TKTokeniseIdentifier
.b5dc	c9 41		cmp #$41			cmp 	#'A'
.b5de	90 04		bcc $b5e4			bcc 	_TKTokenisePunctuation
.b5e0	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b5e2	90 59		bcc $b63d			bcc 	_TKTokeniseIdentifier
.b5e4					_TKTokenisePunctuation:
.b5e4	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b5e6	f0 27		beq $b60f			beq 	_TKString
.b5e8	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b5ea	f0 28		beq $b614			beq 	_TKHexConstant
.b5ec	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b5ee	f0 29		beq $b619			beq 	_TKCheckDouble
.b5f0	c9 3e		cmp #$3e			cmp 	#'>'
.b5f2	f0 25		beq $b619			beq 	_TKCheckDouble
.b5f4					_TKStandardPunctuation:
.b5f4	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b5f7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b5f9	90 0e		bcc $b609			bcc 	_TKNoShift
.b5fb	48		pha				pha 								; save
.b5fc	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b5fe	85 36		sta $36				sta 	zTemp0
.b600	68		pla				pla
.b601	29 20		and #$20			and 	#32 						; bit 5
.b603	4a		lsr a				lsr 	a 							; shift into bit 3
.b604	4a		lsr a				lsr 	a
.b605	05 36		ora $36				ora 	zTemp0
.b607	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b609					_TKNoShift:
.b609	20 9f b7	jsr $b79f			jsr 	TOKWriteByte 				; write the punctuation character
.b60c	e8		inx				inx 								; consume the character
.b60d	80 be		bra $b5cd			bra 	_TKTokeniseLoop 			; and loop round again.
.b60f					_TKString:
.b60f	20 bf b6	jsr $b6bf			jsr 	TOKTokenString
.b612	80 b9		bra $b5cd			bra 	_TKTokeniseLoop
.b614					_TKHexConstant:
.b614	20 fa b6	jsr $b6fa			jsr 	TOKHexConstant
.b617	80 b4		bra $b5cd			bra 	_TKTokeniseLoop
.b619					_TKCheckDouble:
.b619	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b61c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b61e	90 d4		bcc $b5f4			bcc 	_TKStandardPunctuation
.b620	c9 3f		cmp #$3f			cmp 	#'>'+1
.b622	b0 d0		bcs $b5f4			bcs 	_TKStandardPunctuation
.b624	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b627	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b629	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b62a	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b62d	38		sec				sec
.b62e	e9 3c		sbc #$3c			sbc 	#'<'
.b630	20 9f b7	jsr $b79f			jsr 	TOKWriteByte 				; this is in the range 0-7
.b633	e8		inx				inx 								; consume both
.b634	e8		inx				inx
.b635	80 96		bra $b5cd			bra 	_TKTokeniseLoop
.b637	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b639	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b63c	60		rts				rts
.b63d					_TKTokeniseIdentifier:
.b63d	8e 80 04	stx $0480			stx 	identStart 					; save start
.b640	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b643					_TKCheckLoop:
.b643	e8		inx				inx 								; look at next, we know first is identifier.
.b644	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b647	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b649	f0 f8		beq $b643			beq 	_TKCheckLoop
.b64b	c9 30		cmp #$30			cmp	 	#"0"
.b64d	90 0c		bcc $b65b			bcc 	_TKEndIdentifier
.b64f	c9 3a		cmp #$3a			cmp 	#"9"+1
.b651	90 f0		bcc $b643			bcc 	_TKCheckLoop
.b653	c9 41		cmp #$41			cmp	 	#"A"
.b655	90 04		bcc $b65b			bcc 	_TKEndIdentifier
.b657	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b659	90 e8		bcc $b643			bcc 	_TKCheckLoop
.b65b					_TKEndIdentifier:
.b65b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b65e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b660	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b662	f0 06		beq $b66a			beq 	_TKHasTypeCharacter
.b664	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b666	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b668	d0 07		bne $b671			bne 	_TKNoTypeCharacter
.b66a					_TKHasTypeCharacter:
.b66a	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b66d	e8		inx				inx 								; read next
.b66e	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b671					_TKNoTypeCharacter:
.b671	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b673	d0 09		bne $b67e			bne 	_TKNoArray
.b675	e8		inx				inx 								; skip the (
.b676	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b679	09 04		ora #$04			ora 	#$04
.b67b	8d 84 04	sta $0484			sta 	identTypeByte
.b67e					_TKNoArray:
.b67e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b681	20 1b b7	jsr $b71b			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.b684	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b686	a9 ad		lda #$ad			lda 	#(KeywordSet0) & $FF
.b688	20 4f b5	jsr $b54f			jsr 	TOKSearchTable
.b68b	a2 00		ldx #$00			ldx 	#0
.b68d	b0 1f		bcs $b6ae			bcs 	_TKFoundToken
.b68f	a0 ba		ldy #$ba			ldy 	#(KeywordSet1) >> 8
.b691	a9 a3		lda #$a3			lda 	#(KeywordSet1) & $FF
.b693	20 4f b5	jsr $b54f			jsr 	TOKSearchTable
.b696	a2 81		ldx #$81			ldx 	#$81
.b698	b0 14		bcs $b6ae			bcs 	_TKFoundToken
.b69a	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b69c	a9 f1		lda #$f1			lda 	#(KeywordSet2) & $FF
.b69e	20 4f b5	jsr $b54f			jsr 	TOKSearchTable
.b6a1	a2 82		ldx #$82			ldx 	#$82
.b6a3	b0 09		bcs $b6ae			bcs 	_TKFoundToken
.b6a5	20 ab b7	jsr $b7ab			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.b6a8	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b6ab	4c cd b5	jmp $b5cd			jmp 	_TKTokeniseLoop 			; and go round again.
.b6ae					_TKFoundToken:
.b6ae	48		pha				pha 								; save token
.b6af	8a		txa				txa 								; shift in X, is there one ?
.b6b0	f0 03		beq $b6b5			beq 	_TKNoTShift
.b6b2	20 9f b7	jsr $b79f			jsr 	TOKWriteByte 				; if so, write it out
.b6b5					_TKNoTShift:
.b6b5	68		pla				pla 								; restore and write token
.b6b6	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b6b9	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b6bc	4c cd b5	jmp $b5cd			jmp 	_TKTokeniseLoop 			; and go round again.
.b6bf					TOKTokenString:
.b6bf	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b6c1	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b6c4	e8		inx				inx									; start of quoted string.
.b6c5	da		phx				phx 								; push start of string on top
.b6c6	ca		dex				dex
.b6c7					_TSFindEnd:
.b6c7	e8		inx				inx
.b6c8	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b6cb	f0 04		beq $b6d1			beq 	_TSEndOfString
.b6cd	c9 22		cmp #$22			cmp 	#'"'
.b6cf	d0 f6		bne $b6c7			bne 	_TSFindEnd
.b6d1					_TSEndOfString:
.b6d1	7a		ply				ply  								; so now Y is first character, X is character after end.
.b6d2	48		pha				pha 								; save terminating character
.b6d3	20 db b6	jsr $b6db			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.b6d6	68		pla				pla 								; terminating character
.b6d7	f0 01		beq $b6da			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b6d9	e8		inx				inx
.b6da					_TSNotQuote:
.b6da	60		rts				rts
.b6db					TOKWriteBlockXY:
.b6db	86 36		stx $36				stx 	zTemp0 						; write end character
.b6dd	98		tya				tya
.b6de	49 ff		eor #$ff			eor 	#$FF
.b6e0	38		sec				sec
.b6e1	65 36		adc $36				adc 	zTemp0
.b6e3	1a		inc a				inc 	a 							; one extra for NULL
.b6e4	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b6e7					_TOBlockLoop:
.b6e7	c4 36		cpy $36				cpy 	zTemp0
.b6e9	f0 09		beq $b6f4			beq 	_TOBlockExit
.b6eb	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b6ee	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b6f1	c8		iny				iny
.b6f2	80 f3		bra $b6e7			bra 	_TOBlockLoop
.b6f4					_TOBlockExit:
.b6f4	a9 00		lda #$00			lda 	#0
.b6f6	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b6f9	60		rts				rts
.b6fa					TOKHexConstant:
.b6fa	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b6fc	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b6ff	e8		inx				inx									; start of quoted string.
.b700	da		phx				phx 								; push start of constant on top
.b701	ca		dex				dex
.b702					_THFindLoop:
.b702	e8		inx				inx
.b703	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b706	c9 30		cmp #$30			cmp 	#"0"
.b708	90 0c		bcc $b716			bcc 	_THFoundEnd
.b70a	c9 3a		cmp #$3a			cmp 	#"9"+1
.b70c	90 f4		bcc $b702			bcc 	_THFindLoop
.b70e	c9 41		cmp #$41			cmp 	#"A"
.b710	90 04		bcc $b716			bcc 	_THFoundEnd
.b712	c9 47		cmp #$47			cmp 	#"F"+1
.b714	90 ec		bcc $b702			bcc 	_THFindLoop
.b716					_THFoundEnd:
.b716	7a		ply				ply 								; restore start
.b717	20 db b6	jsr $b6db			jsr 	TOKWriteBlockXY 			; output the block
.b71a	60		rts				rts
.b71b					TOKCalculateHash:
.b71b	da		phx				phx
.b71c	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b71f	a9 00		lda #$00			lda 	#0
.b721					_TCHLoop:
.b721	18		clc				clc
.b722	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b725	e8		inx				inx
.b726	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b729	d0 f6		bne $b721			bne 	_TCHLoop
.b72b	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b72e	fa		plx				plx
.b72f	60		rts				rts
.b730					LCLFixLineBufferCase:
.b730	a2 00		ldx #$00			ldx 	#0
.b732					_FLBCLoop:
.b732	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b735	f0 22		beq $b759			beq 	_FLBCExit 					; end of string.
.b737	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b739	f0 11		beq $b74c			beq 	_FLBCInQuotes
.b73b	e8		inx				inx
.b73c	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b73e	90 f2		bcc $b732			bcc 	_FLBCLoop
.b740	c9 7b		cmp #$7b			cmp 	#'z'+1
.b742	b0 ee		bcs $b732			bcs 	_FLBCLoop
.b744	38		sec				sec 								; make U/C
.b745	e9 20		sbc #$20			sbc 	#32
.b747	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b74a	80 e6		bra $b732			bra 	_FLBCLoop
.b74c					_FLBCInQuotes:
.b74c	e8		inx				inx 								; advance
.b74d	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b750	f0 07		beq $b759			beq 	_FLBCExit 					; exit on EOS
.b752	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b754	d0 f6		bne $b74c			bne 	_FLBCInQuotes
.b756	e8		inx				inx 								; skip over it
.b757	80 d9		bra $b732			bra 	_FLBCLoop
.b759					_FLBCExit:
.b759	60		rts				rts
.b75a					TOKExtractLineNumber:
.b75a	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b75d	48		pha				pha
.b75e	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b761	48		pha				pha
.b762	20 98 b7	jsr $b798			jsr 	_LCLNTimes2 				; line # x 4
.b765	20 98 b7	jsr $b798			jsr 	_LCLNTimes2 				; line # x 2
.b768	18		clc				clc 								; add stacked value
.b769	68		pla				pla
.b76a	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b76d	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b770	68		pla				pla
.b771	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b774	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b777	20 98 b7	jsr $b798			jsr 	_LCLNTimes2 				; line # x 10
.b77a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b77d	e8		inx				inx
.b77e	29 0f		and #$0f			and 	#15 						; add to line #
.b780	18		clc				clc
.b781	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b784	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b787	90 03		bcc $b78c			bcc 	_TLENNoCarry
.b789	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b78c					_TLENNoCarry:
.b78c	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b78f	c9 30		cmp #$30			cmp 	#'0'
.b791	90 04		bcc $b797			bcc 	_TLENExit
.b793	c9 3a		cmp #$3a			cmp 	#'9'+1
.b795	90 c3		bcc $b75a			bcc 	TOKExtractLineNumber
.b797					_TLENExit:
.b797	60		rts				rts
.b798					_LCLNTimes2:
.b798	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b79b	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b79e	60		rts				rts
.b79f					TOKWriteByte:
.b79f	da		phx				phx
.b7a0	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b7a3	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b7a6	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b7a9	fa		plx				plx
.b7aa	60		rts				rts
.b7ab					TOKCheckCreateVariableRecord:
.b7ab	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b7ad	85 36		sta $36				sta 	0+zTemp0
.b7af	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b7b1	85 37		sta $37				sta 	1+zTemp0
.b7b3					_CCVSearch:
.b7b3	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b7b5	f0 2c		beq $b7e3			beq 	_CCVFail
.b7b7	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b7b9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b7bb	cd 83 04	cmp $0483			cmp 	identHash
.b7be	d0 16		bne $b7d6			bne 	_CCVNext
.b7c0	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b7c2	ae 80 04	ldx $0480			ldx 	identStart
.b7c5					_CCVCompare:
.b7c5	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b7c8	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b7ca	e8		inx				inx 								; advance pointers
.b7cb	c8		iny				iny
.b7cc	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b7cd	d0 07		bne $b7d6			bne 	_CCVNext  					; didn't match go to next.
.b7cf	90 f4		bcc $b7c5			bcc 	_CCVCompare 				; not finished yet.
.b7d1	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b7d4	f0 41		beq $b817			beq 	_CCVFound 					; yes, we were successful
.b7d6					_CCVNext:
.b7d6	18		clc				clc
.b7d7	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b7d9	65 36		adc $36				adc 	zTemp0
.b7db	85 36		sta $36				sta 	zTemp0
.b7dd	90 d4		bcc $b7b3			bcc 	_CCVSearch
.b7df	e6 37		inc $37				inc 	zTemp0+1
.b7e1	80 d0		bra $b7b3			bra 	_CCVSearch
.b7e3					_CCVFail:
.b7e3	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b7e5	ad 83 04	lda $0483			lda 	identHash
.b7e8	91 36		sta ($36),y			sta 	(zTemp0),y
.b7ea	c8		iny				iny 								; offset 2 is the type byte
.b7eb	ad 84 04	lda $0484			lda 	identTypeByte
.b7ee	91 36		sta ($36),y			sta 	(zTemp0),y
.b7f0	c8		iny				iny
.b7f1					_CCVData:
.b7f1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b7f3	91 36		sta ($36),y			sta 	(zTemp0),y
.b7f5	c8		iny				iny
.b7f6	c0 08		cpy #$08			cpy 	#8
.b7f8	90 f7		bcc $b7f1			bcc 	_CCVData
.b7fa	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b7fd					_CCVCopyName:
.b7fd	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b800	91 36		sta ($36),y			sta 	(zTemp0),y
.b802	e8		inx				inx
.b803	c8		iny				iny
.b804	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b807	d0 f4		bne $b7fd			bne 	_CCVCopyName
.b809	98		tya				tya 								; patch offset
.b80a	92 36		sta ($36)			sta 	(zTemp0)
.b80c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b80e	91 36		sta ($36),y			sta 	(zTemp0),y
.b810	88		dey				dey
.b811	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b813	09 80		ora #$80			ora 	#$80
.b815	91 36		sta ($36),y			sta 	(zTemp0),y
.b817					_CCVFound:
.b817	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b819	38		sec				sec
.b81a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b81c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b81e	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b821	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b823	20 9f b7	jsr $b79f			jsr 	TOKWriteByte
.b826	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1					soundIntegrated=1
.b827					SNDQueueRequest:
>b827	db						.byte 	$DB 						; causes a break in the emulator
.b828					SNDSilenceChannel:
.b828	60		rts				rts
.b829					SNDCommand:
.b829	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.b82b	f0 1c		beq $b849			beq 	_SNDInitialise
.b82d	90 29		bcc $b858			bcc 	_SNDExit
.b82f	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.b831	f0 16		beq $b849			beq 	_SNDSilence
.b833	b0 23		bcs $b858			bcs 	_SNDExit
.b835	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.b837	b0 09		bcs $b842			bcs 	_SNDQueryPlay
.b839	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.b83b	b0 1b		bcs $b858			bcs 	_SNDExit
.b83d	20 27 b8	jsr $b827			jsr 	SNDQueueRequest
.b840	80 16		bra $b858			bra 	_SNDExit
.b842					_SNDQueryPlay:
.b842	29 03		and #$03			and 	#3 							; get channel #
.b844	bd 03 08	lda $0803,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.b847	80 0f		bra $b858			bra 	_SNDExit
.b849					_SNDInitialise:
.b849					_SNDSilence:
.b849	9c fa 06	stz $06fa			stz 	SNDLength 					; empty the queue.
.b84c	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.b84e					_SNDSilenceLoop:
.b84e	48		pha				pha
.b84f	20 28 b8	jsr $b828			jsr 	SNDSilenceChannel
.b852	68		pla				pla
.b853	3a		dec a				dec 	a
.b854	c9 2f		cmp #$2f			cmp 	#$2F
.b856	d0 f6		bne $b84e			bne 	_SNDSilenceLoop
.b858					_SNDExit:
.b858	60		rts				rts
=32					SNDQueueSize = 32 							; number of queue entries
.06fa					SNDLength:
>06fa							.fill 	1
.06fb					SNDQueue:
>06fb							.fill 	SNDQueueSize * 8
.07fb					SNDPitchLow:
>07fb							.fill 	4
.07ff					SNDPitchHigh:
>07ff							.fill 	4
.0803					SNDTimeLeft:
>0803							.fill 	4
.0807					SNDAdjustLow:
>0807							.fill 	4
.080b					SNDAdjustHigh:
>080b							.fill 	4

;******  Return to file: _basic.asm


;******  End of listing
