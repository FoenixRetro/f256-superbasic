
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Nov  1 21:34:15 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 d9 b6	jsr $b6d9			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 26 9b	jsr $9b26			jsr 	PrintStringXA
.8014	20 02 94	jsr $9402			jsr 	NewCommand 					; erase current program
.8017	20 2e a8	jsr $a82e			jsr 	BackloadProgram
.801a	4c 29 8c	jmp $8c29			jmp 	WarmStart
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2546."
>8065	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>8075	32 2e 20 42 75 69 6c 64 20 32 35 34 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSpriteID:
>0646							.fill 	1
.0647					GSCurrentSpriteAddr:
>0647							.fill 	2
.0649					GXSpriteOffsetBase:
>0649							.fill 	2
.064b					GXSpriteLow:
>064b							.fill 	64
.068b					GXSpriteHigh:
>068b							.fill 	64

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8086					GXGraphicDraw:
.8086	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use coordinates
.8088	b0 06		bcs $8090			bcs 	_GDCoordinate
.808a	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808c	84 37		sty $37				sty 	gxzTemp0+1
.808e	80 4b		bra $80db			bra 	_GDExecuteA 				; and execute
.8090					_GDCoordinate:
.8090	48		pha				pha 								; save AXY
.8091	da		phx				phx
.8092	5a		phy				phy
.8093	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8095					_GDCopy1:
.8095	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8098	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809b	ca		dex				dex
.809c	10 f7		bpl $8095			bpl 	_GDCopy1
.809e	68		pla				pla 								; update Y
.809f	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a2	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a5	68		pla				pla
.80a6	8d 2a 06	sta $062a			sta 	gxCurrentX
.80a9	68		pla				pla 								; get A (command+X.1) back
.80aa	48		pha				pha
.80ab	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ad	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b0	68		pla				pla 								; get command back
.80b1	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b3	48		pha				pha 								; push back.
.80b4	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b6	f0 17		beq $80cf			beq 	_GDCopyToWorkArea
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bb	f0 07		beq $80c4			beq 	_GDCheckY
.80bd	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c0	c9 40		cmp #$40			cmp 	#64
.80c2	b0 08		bcs $80cc			bcs 	_GDError1
.80c4					_GDCheckY:
.80c4	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c7	cd 3e 06	cmp $063e			cmp 	gxHeight
.80ca	90 03		bcc $80cf			bcc 	_GDCopyToWorkArea
.80cc					_GDError1:
.80cc	68		pla				pla
.80cd					_GDError2:
.80cd	38		sec				sec
.80ce	60		rts				rts
.80cf					_GDCopyToWorkArea:
.80cf	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d1					_GDCopy2:
.80d1	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d4	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d7	ca		dex				dex
.80d8	10 f7		bpl $80d1			bpl 	_GDCopy2
.80da	68		pla				pla 								; get command
.80db					_GDExecuteA:
.80db	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80dd	b0 ee		bcs $80cd			bcs 	_GDError2
.80df	aa		tax				tax
.80e0	7c e6 80	jmp ($80e6,x)			jmp 	(GRVectorTable,x)
.80e3					GXMove:
.80e3	18		clc				clc
.80e4	60		rts				rts
.80e5					GRUndefined:
>80e5	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e6					GRVectorTable:
>80e6	b5 82					.word	GXInitialise             ; $00 Initialise
>80e8	cf 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80ea	17 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ec	67 82					.word	GXClearBitmap            ; $03 Clear
>80ee	a6 84					.word	GXSetColourMode          ; $04 Colour
>80f0	6e 86					.word	GXFontHandler            ; $05 DrawFont
>80f2	b6 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f4	22 87					.word	GXSelect                 ; $07 SPRUSE
>80f6	4b 87					.word	GXSelectImage            ; $08 SPRIMG
>80f8	d4 88					.word	GXCollide                ; $09 COLLIDE
>80fa	e5 80					.word	GRUndefined              ; $0a
>80fc	e5 80					.word	GRUndefined              ; $0b
>80fe	e5 80					.word	GRUndefined              ; $0c
>8100	e5 80					.word	GRUndefined              ; $0d
>8102	e5 80					.word	GRUndefined              ; $0e
>8104	e5 80					.word	GRUndefined              ; $0f
>8106	e3 80					.word	GXMove                   ; $10 Move
>8108	74 83					.word	GXLine                   ; $11 Line
>810a	ef 84					.word	GXFrameRectangle         ; $12 FrameRect
>810c	ec 84					.word	GXFillRectangle          ; $13 FillRect
>810e	1e 81					.word	GXFrameCircle            ; $14 FrameCircle
>8110	1a 81					.word	GXFillCircle             ; $15 FillCircle
>8112	e5 80					.word	GRUndefined              ; $16
>8114	e5 80					.word	GRUndefined              ; $17
>8116	d4 84					.word	GXPlotPoint              ; $18 Plot
>8118	e1 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811a					GXFillCircle:
.811a	a9 ff		lda #$ff			lda 	#255
.811c	80 02		bra $8120			bra 	GXCircle
.811e					GXFrameCircle:
.811e	a9 00		lda #$00			lda 	#0
.8120					GXCircle:
.8120	8d ce 06	sta $06ce			sta 	gxIsFillMode					; save Fill flag
.8123	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8126	f0 26		beq $814e			beq 	_GXCFail
.8128	20 7b 89	jsr $897b			jsr 	GXSortXY 					; topleft/bottomright
.812b	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.812e	20 20 82	jsr $8220			jsr 	GXCircleSetup 				; set up for drawing
.8131	9c cf 06	stz $06cf			stz 	gxYChanged
.8134					_GXCircleDraw:
.8134	ad cc 06	lda $06cc			lda 	gXCentre					; while x <= y
.8137	cd cd 06	cmp $06cd			cmp 	gYCentre
.813a	90 0a		bcc $8146			bcc 	_GXCircleContinue
.813c	d0 03		bne $8141			bne 	_GXNoLast
.813e	20 53 81	jsr $8153			jsr 	GXPlot1
.8141					_GXNoLast:
.8141	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; close the bitmap
.8144	18		clc				clc
.8145	60		rts				rts
.8146					_GXCircleContinue:
.8146	20 50 81	jsr $8150			jsr 	GXPlot2 					; draw it
.8149	20 cd 81	jsr $81cd			jsr 	GXCircleMove 				; adjust the coordinates
.814c	80 e6		bra $8134			bra 	_GXCircleDraw
.814e					_GXCFail:
.814e	38		sec				sec
.814f	60		rts				rts
.8150					GXPlot2:
.8150	20 53 81	jsr $8153			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8153					GXPlot1:
.8153	ad cd 06	lda $06cd			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8156	f0 03		beq $815b			beq 	_GXPlot1Only
.8158	20 77 81	jsr $8177			jsr 	GXPlot0 						; plot and negate
.815b					_GXPlot1Only:
.815b	20 77 81	jsr $8177			jsr 	GXPlot0 						; twice, undoing negation
.815e	ad cc 06	lda $06cc			lda 	gXCentre 						; swap X and Y
.8161	ae cd 06	ldx $06cd			ldx	 	gYCentre
.8164	8d cd 06	sta $06cd			sta 	gYCentre
.8167	8e cc 06	stx $06cc			stx 	gXCentre
.816a	ad cf 06	lda $06cf			lda 	gxYChanged 						; toggle Y Changed flag
.816d	a9 ff		lda #$ff			lda 	#$FF
.816f	8d cf 06	sta $06cf			sta 	gxYChanged
.8172	60		rts				rts
.8173	20 77 81	jsr $8177			jsr 	GXPlot0 						; do once
.8176	60		rts				rts
.8177	ad ce 06	lda $06ce	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817a	f0 05		beq $8181			beq 	_GXPlot0Always
.817c	ad cf 06	lda $06cf			lda 	gxYChanged						; fill mode, only draw if changed.
.817f	f0 2d		beq $81ae			beq 	GXPlot0Exit
.8181					_GXPlot0Always:
.8181	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8183	ad cd 06	lda $06cd			lda 	gYCentre
.8186	20 af 81	jsr $81af			jsr 	GXSubCopy
.8189	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818b	ad cc 06	lda $06cc			lda 	gXCentre
.818e	20 af 81	jsr $81af			jsr 	GXSubCopy
.8191	48		pha				pha 									; save last offset X
.8192	20 63 88	jsr $8863			jsr 	GXPositionCalc 					; calculate position/offset.
.8195	68		pla				pla
.8196	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8197	85 36		sta $36				sta 	gxzTemp0
.8199	64 37		stz $37				stz 	gxzTemp0+1
.819b	26 37		rol $37				rol 	gxzTemp0+1
.819d	ad ce 06	lda $06ce			lda 	gxIsFillMode
.81a0	69 80		adc #$80			adc 	#128
.81a2	20 3f 85	jsr $853f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a5	38		sec				sec 									; GY = -GY
.81a6	a9 00		lda #$00			lda 	#0
.81a8	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ab	8d cd 06	sta $06cd			sta 	gYCentre
.81ae					GXPlot0Exit:
.81ae	60		rts				rts
.81af					GXSubCopy:
.81af	85 36		sta $36				sta 	gxzTemp0
.81b1	64 37		stz $37				stz 	gxzTemp0+1
.81b3	29 80		and #$80			and 	#$80
.81b5	f0 02		beq $81b9			beq 	_GXNoSx
.81b7	c6 37		dec $37				dec 	gxzTemp0+1
.81b9					_GXNoSx:
.81b9	38		sec				sec
.81ba	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bd	e5 36		sbc $36				sbc 	gxzTemp0
.81bf	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c2	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c5	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c7	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81ca	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cc	60		rts				rts
.81cd					GXCircleMove:
.81cd	9c cf 06	stz $06cf			stz 	gxYChanged 					; clear Y changed flag
.81d0	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d2	10 0d		bpl $81e1			bpl 	_GXEMPositive
.81d4	ee cc 06	inc $06cc			inc 	gXCentre 					; X++
.81d7	ad cc 06	lda $06cc			lda 	gXCentre
.81da	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dd	a9 06		lda #$06			lda 	#6  						; and add 6
.81df	80 15		bra $81f6			bra 	_GXEMAddD
.81e1					_GXEMPositive:
.81e1	ee cc 06	inc $06cc			inc 	gXCentre					; X++
.81e4	ce cd 06	dec $06cd			dec 	gyCentre 					; Y--
.81e7	38		sec				sec 								; calculate X-Y
.81e8	ad cc 06	lda $06cc			lda 	gXCentre
.81eb	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ee	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f1	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f3	ce cf 06	dec $06cf			dec 	gxYChanged
.81f6					_GXEMAddD:
.81f6	18		clc				clc
.81f7	65 38		adc $38				adc 	gxzTemp1
.81f9	85 38		sta $38				sta 	gxzTemp1
.81fb	90 02		bcc $81ff			bcc 	_GXEMNoCarry
.81fd	e6 39		inc $39				inc 	gxzTemp1+1
.81ff					_GXEMNoCarry:
.81ff	60		rts				rts
.8200					_GXAdd4TimesToD:
.8200	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8202	29 80		and #$80			and 	#$80
.8204	f0 02		beq $8208			beq 	_GXA4Unsigned
.8206	a9 ff		lda #$ff			lda 	#$FF
.8208					_GXA4Unsigned:
.8208	85 37		sta $37				sta 	gxzTemp0+1
.820a	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820c	26 37		rol $37				rol 	gxzTemp0+1
.820e	06 36		asl $36				asl 	gxzTemp0
.8210	26 37		rol $37				rol 	gxzTemp0+1
.8212	18		clc				clc 								; add
.8213	a5 36		lda $36				lda		gxzTemp0
.8215	65 38		adc $38				adc 	gxzTemp1
.8217	85 38		sta $38				sta 	gxzTemp1
.8219	a5 37		lda $37				lda		gxzTemp0+1
.821b	65 39		adc $39				adc 	gxzTemp1+1
.821d	85 39		sta $39				sta 	gxzTemp1+1
.821f	60		rts				rts
.8220					GXCircleSetup:
.8220	38		sec				sec
.8221	ad 38 06	lda $0638			lda 	gxY1
.8224	ed 34 06	sbc $0634			sbc 	gxY0
.8227	4a		lsr a				lsr 	a
.8228	8d cb 06	sta $06cb			sta 	gxRadius
.822b	a2 00		ldx #$00			ldx 	#0
.822d	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8230	a2 02		ldx #$02			ldx 	#2
.8232	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8235	9c cc 06	stz $06cc			stz 	gXCentre
.8238	ad cb 06	lda $06cb			lda 	gxRadius
.823b	8d cd 06	sta $06cd			sta 	gYCentre
.823e	0a		asl a				asl 	a 							; R x 2
.823f	85 36		sta $36				sta 	gxzTemp0
.8241	38		sec				sec
.8242	a9 03		lda #$03			lda 	#3
.8244	e5 36		sbc $36				sbc 	gxzTemp0
.8246	85 38		sta $38				sta 	gxzTemp1
.8248	a9 00		lda #$00			lda 	#0
.824a	e9 00		sbc #$00			sbc 	#0
.824c	85 39		sta $39				sta 	gxzTemp1+1
.824e	60		rts				rts
.824f					_GXCalculateCentre:
.824f	38		sec				sec
.8250	bd 36 06	lda $0636,x			lda 	gxX1,x
.8253	7d 32 06	adc $0632,x			adc 	gXX0,x
.8256	9d 36 06	sta $0636,x			sta 	gXX1,x
.8259	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825c	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825f	4a		lsr a				lsr 	a
.8260	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8263	7e 36 06	ror $0636,x			ror 	gXX1,x
.8266	60		rts				rts
.06cb					gxRadius:
>06cb							.fill 	1
.06cc					gXCentre:
>06cc							.fill 	1
.06cd					gYCentre:
>06cd							.fill 	1
.06ce					gxIsFillMode:
>06ce							.fill 	1
.06cf					gxYChanged:
>06cf							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8267					GXClearBitmap:
.8267	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826a	f0 24		beq $8290			beq 	_GXCBFail
.826c	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start access
.826f	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8271	ad 3e 06	lda $063e			lda 	gxHeight
.8274	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8276	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8278					_GXCalcLastPage:
.8278	98		tya				tya 								; add to base page
.8279	18		clc				clc
.827a	6d 3c 06	adc $063c			adc 	gxBasePage
.827d	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827f					_GXClearAll:
.827f	20 92 82	jsr $8292			jsr 	_GXClearBlock 				; clear 8k block
.8282	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8284	a5 0b		lda $0b				lda 	GXEditSlot
.8286	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8289	b0 f4		bcs $827f			bcs 	_GXClearAll
.828b	20 56 88	jsr $8856			jsr 	GXCloseBitmap	 			; stop access
.828e	18		clc				clc
.828f	60		rts				rts
.8290					_GXCBFail:
.8290	38		sec				sec
.8291	60		rts				rts
.8292					_GXClearBlock:
.8292	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8294	85 38		sta $38				sta 	0+gxzTemp1
.8296	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8298	85 39		sta $39				sta 	1+gxzTemp1
.829a					_GXCB0:
.829a	a5 36		lda $36				lda 	gxzTemp0
.829c	a0 00		ldy #$00			ldy 	#0
.829e					_GXCB1:
.829e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a0	c8		iny				iny
.82a1	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a3	c8		iny				iny
.82a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a6	c8		iny				iny
.82a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a9	c8		iny				iny
.82aa	d0 f2		bne $829e			bne 	_GXCB1
.82ac	e6 39		inc $39				inc 	gxzTemp1+1
.82ae	a5 39		lda $39				lda 	gxzTemp1+1
.82b0	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b2	d0 e6		bne $829a			bne 	_GXCB0
.82b4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b5					GXInitialise:
.82b5	64 01		stz $01				stz 	1
.82b7	a9 01		lda #$01			lda 	#1
.82b9	8d 00 d0	sta $d000			sta 	$D000
.82bc	18		clc				clc
.82bd	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c0	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c3	a2 0f		ldx #$0f			ldx 	#15
.82c5					_GXIClear:
.82c5	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c8	ca		dex				dex
.82c9	10 fa		bpl $82c5			bpl 	_GXIClear
.82cb	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.82ce	60		rts				rts
.82cf					GXControlBitmap:
.82cf	64 01		stz $01				stz 	1
.82d1	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d3	29 01		and #$01			and 	#1 							; set bitmap flag
.82d5	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d8	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d9	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82dc	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82de	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82e0	90 02		bcc $82e4			bcc 	_CBNotOn
.82e2	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e4					_CBNotOn:
.82e4	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e7	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e9	29 07		and #$07			and 	#7
.82eb	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ee	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f0	d0 02		bne $82f4			bne 	_CBNotDefault
.82f2	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f4					_CBNotDefault:
.82f4	8d 3c 06	sta $063c			sta 	gxBasePage
.82f7	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fa	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fc	8d 03 d1	sta $d103			sta 	$D103
.82ff	a5 36		lda $36				lda 	gxzTemp0
.8301	8d 02 d1	sta $d102			sta 	$D102
.8304	9c 01 d1	stz $d101			stz 	$D101
.8307	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8309	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830c	29 01		and #$01			and 	#1
.830e	f0 02		beq $8312			beq 	_CBHaveHeight
.8310	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8312					_CBHaveHeight
.8312	8e 3e 06	stx $063e			stx 	gxHeight
.8315	18		clc				clc
.8316	60		rts				rts
.8317					GXControlSprite:
.8317	64 01		stz $01				stz 	1
.8319	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831b	29 01		and #$01			and 	#1 							; set sprites flag
.831d	8d 3a 06	sta $063a			sta 	gxSpritesOn
.8320	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8321	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8324	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8326	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8328	90 02		bcc $832c			bcc 	_CSNotOn
.832a	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832c					_CSNotOn:
.832c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8331	d0 02		bne $8335			bne 	_CSNotDefault
.8333	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8335					_CSNotDefault:
.8335	8d 3d 06	sta $063d			sta 	gxSpritePage
.8338	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833b	a5 36		lda $36				lda 	zTemp0
.833d	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase
.8340	a5 37		lda $37				lda 	zTemp0+1
.8342	8d 4a 06	sta $064a			sta 	GXSpriteOffsetBase+1
.8345	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8347					_CSClear:
.8347	9e 00 d9	stz $d900,x			stz 	$D900,x
.834a	9e 00 da	stz $da00,x			stz 	$DA00,x
.834d	ca		dex				dex
.834e	d0 f7		bne $8347			bne 	_CSClear
.8350	9c 48 06	stz $0648			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8353	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.8356	18		clc				clc
.8357	60		rts				rts
.8358					GXCalculateBaseAddress:
.8358	85 36		sta $36				sta 	gxzTemp0
.835a	64 37		stz $37				stz 	gxzTemp0+1
.835c	a9 05		lda #$05			lda 	#5
.835e					_GXShift:
.835e	06 36		asl $36				asl 	gxzTemp0
.8360	26 37		rol $37				rol 	gxzTemp0+1
.8362	3a		dec a				dec		a
.8363	d0 f9		bne $835e			bne 	_GXShift
.8365	60		rts				rts
.8366					GXClearSpriteStore:
.8366	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8368					_GXCSSLoop:
.8368	9e 8b 06	stz $068b,x			stz 	GXSpriteHigh,x
.836b	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836d	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.8370	ca		dex				dex
.8371	10 f5		bpl $8368			bpl 	_GXCSSLoop
.8373	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8374					GXLine:
.8374	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8377	f0 28		beq $83a1			beq 	_GXLFail
.8379	20 45 88	jsr $8845			jsr 	GXOpenBitmap
.837c	20 99 89	jsr $8999			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.837f	20 47 84	jsr $8447			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8382	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; calculate position/offset.
.8385					_GXDrawLoop:
.8385	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8388	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.838a	2d 42 06	and $0642			and 	gxANDValue
.838d	4d 41 06	eor $0641			eor 	gxEORValue
.8390	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8392	20 a3 83	jsr $83a3			jsr 	GXLineIsComplete 			; is the line complete ?
.8395	f0 05		beq $839c			beq 	_GXLExit
.8397	20 be 83	jsr $83be			jsr 	GXLineAdvance 				; code as per advance method
.839a	80 e9		bra $8385			bra 	_GXDrawLoop
.839c					_GXLExit:
.839c	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.839f	18		clc				clc
.83a0	60		rts				rts
.83a1					_GXLFail:
.83a1	38		sec				sec
.83a2	60		rts				rts
.83a3					GXLineIsComplete:
.83a3	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger 			; is dy larger
.83a6	d0 0f		bne $83b7			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a8	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83ab	4d 36 06	eor $0636			eor 	GXX1
.83ae	d0 06		bne $83b6			bne 	_GXLICExit
.83b0	ad 33 06	lda $0633			lda 	GXX0+1
.83b3	4d 37 06	eor $0637			eor 	GXX1+1
.83b6					_GXLICExit:
.83b6	60		rts				rts
.83b7					_GXLICCompareY:
.83b7	ad 38 06	lda $0638			lda 	GXY1
.83ba	4d 34 06	eor $0634			eor 	GXY0
.83bd	60		rts				rts
.83be					GXLineAdvance:
.83be	18		clc				clc 								; add adjust to position
.83bf	ad d4 06	lda $06d4			lda 	GXPosition
.83c2	6d d5 06	adc $06d5			adc 	GXAdjust
.83c5	8d d4 06	sta $06d4			sta 	GXPosition
.83c8	9c d7 06	stz $06d7			stz 	GXAddSelect 				; clear add select flag
.83cb	b0 05		bcs $83d2			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83cd	cd d6 06	cmp $06d6			cmp 	GXTotal 					; if exceeded total
.83d0	90 0a		bcc $83dc			bcc 	_GXLANoExtra
.83d2					_GXLAOverflow:
.83d2	ce d7 06	dec $06d7			dec 	GXAddSelect 				; set addselect to $FF
.83d5	38		sec				sec 								; subtract total and write back
.83d6	ed d6 06	sbc $06d6			sbc 	GXTotal
.83d9	8d d4 06	sta $06d4			sta 	GXPosition
.83dc					_GXLANoExtra:
.83dc	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger
.83df	f0 0d		beq $83ee			beq 	_GXDXLarger
.83e1	20 40 84	jsr $8440			jsr 	GXIncrementY
.83e4	ad d7 06	lda $06d7			lda 	GXAddSelect
.83e7	f0 10		beq $83f9			beq 	_GXLAExit
.83e9	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83ec	80 0b		bra $83f9			bra 	_GXLAExit
.83ee					_GXDXLarger:
.83ee	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83f1	ad d7 06	lda $06d7			lda 	GXAddSelect
.83f4	f0 03		beq $83f9			beq 	_GXLAExit
.83f6	20 40 84	jsr $8440			jsr 	GXIncrementY
.83f9					_GXLAExit:
.83f9	60		rts				rts
.83fa					GXAdjustX:
.83fa	ad d3 06	lda $06d3			lda 	GXDXNegative
.83fd	10 25		bpl $8424			bpl 	_GXAXRight
.83ff	ad 32 06	lda $0632			lda 	GXX0
.8402	d0 03		bne $8407			bne 	_GXAXNoBorrow
.8404	ce 33 06	dec $0633			dec 	GXX0+1
.8407					_GXAXNoBorrow:
.8407	ce 32 06	dec $0632			dec 	GXX0
.840a	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.840d	ad 45 06	lda $0645			lda 	gsOffset
.8410	c9 ff		cmp #$ff			cmp 	#$FF
.8412	d0 0f		bne $8423			bne 	_GXAYExit 					; underflow
.8414	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8416	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8418	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.841a	b0 07		bcs $8423			bcs 	_GXAYExit
.841c	18		clc				clc
.841d	69 20		adc #$20			adc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8423					_GXAYExit:
.8423	60		rts				rts
.8424					_GXAXRight:
.8424	ee 32 06	inc $0632			inc 	GXX0
.8427	d0 03		bne $842c			bne 	_GXAXNoCarry
.8429	ee 33 06	inc $0633			inc 	GXX0+1
.842c					_GXAXNoCarry:
.842c	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.842f	d0 0e		bne $843f			bne 	_GXAXExit 					; if not overflowed, exit.
.8431	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8433	a5 3d		lda $3d				lda 	gxzScreen+1
.8435	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8437	90 06		bcc $843f			bcc 	_GXAXExit
.8439	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843b	85 3d		sta $3d				sta 	gxzScreen+1
.843d	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.843f					_GXAXExit:
.843f	60		rts				rts
.8440					GXIncrementY:
.8440	ee 34 06	inc $0634			inc 	GXY0
.8443	20 b9 88	jsr $88b9			jsr 	GXMovePositionDown
.8446	60		rts				rts
.8447					GXLineSetup:
.8447	ad 38 06	lda $0638			lda 	GXY1
.844a	38		sec				sec
.844b	ed 34 06	sbc $0634			sbc 	GXY0
.844e	4a		lsr a				lsr 	a
.844f	8d d1 06	sta $06d1			sta 	GXDiffY
.8452	9c d3 06	stz $06d3			stz 	GXDXNegative 				; clear -ve flag
.8455	38		sec				sec
.8456	ad 36 06	lda $0636			lda 	GXX1
.8459	ed 32 06	sbc $0632			sbc 	GXX0
.845c	8d d0 06	sta $06d0			sta 	GXDiffX
.845f	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8462	ed 33 06	sbc $0633			sbc 	GXX0+1
.8465	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8466	6e d0 06	ror $06d0			ror 	GXDiffX
.8469	0a		asl a				asl 	a
.846a	10 0c		bpl $8478			bpl 	_GDXNotNegative
.846c	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846e	38		sec				sec
.846f	ed d0 06	sbc $06d0			sbc 	GXDiffX
.8472	8d d0 06	sta $06d0			sta 	GXDiffX
.8475	ce d3 06	dec $06d3			dec 	GXDXNegative 				; -ve flag = $FF.
.8478					_GDXNotNegative:
.8478	9c d2 06	stz $06d2			stz 	GXIsDiffYLarger 			; clear larger flag
.847b	ad d1 06	lda $06d1			lda 	GXDiffY 					; set adjust and total.
.847e	8d d5 06	sta $06d5			sta 	GXAdjust
.8481	ad d0 06	lda $06d0			lda 	GXDiffX
.8484	8d d6 06	sta $06d6			sta 	GXTotal
.8487	ad d1 06	lda $06d1			lda 	GXDiffY 					; if dy > dx
.848a	cd d0 06	cmp $06d0			cmp 	GXDiffX
.848d	90 0f		bcc $849e			bcc 	_GDXNotLarger
.848f	ce d2 06	dec $06d2			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8492	ad d0 06	lda $06d0			lda 	GXDiffX 					; set adjust and total other way round
.8495	8d d5 06	sta $06d5			sta 	GXAdjust
.8498	ad d1 06	lda $06d1			lda 	GXDiffY
.849b	8d d6 06	sta $06d6			sta 	GXTotal
.849e					_GDXNotLarger:
.849e	ad d6 06	lda $06d6			lda 	GXTotal
.84a1	4a		lsr a				lsr 	a
.84a2	8d d4 06	sta $06d4			sta 	GXPosition
.84a5	60		rts				rts
.06d0					GXDiffX:
>06d0							.fill 	1
.06d1					GXDiffY:
>06d1							.fill 	1
.06d2					GXIsDiffYLarger:
>06d2							.fill 	1
.06d3					GXDXNegative:
>06d3							.fill 	1
.06d4					GXPosition:
>06d4							.fill 	1
.06d5					GXAdjust:
>06d5							.fill 	1
.06d6					GXTotal:
>06d6							.fill 	1
.06d7					GXAddSelect:
>06d7							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.84a6					GXSetColourMode:
.84a6	a6 36		ldx $36				ldx 	gxzTemp0
.84a8	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84ab	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ad	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84b0	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b2	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b5	ae 40 06	ldx $0640			ldx 	gxColour
.84b8	8e 41 06	stx $0641			stx 	gxEORValue
.84bb	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84bd	90 03		bcc $84c2			bcc 	_GXSDCNotAndColour
.84bf	8e 42 06	stx $0642			stx 	gxANDValue
.84c2					_GXSDCNotAndColour:
.84c2	d0 03		bne $84c7			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c4	9c 41 06	stz $0641			stz 	gxEORValue
.84c7					_GXSDCNotAnd:
.84c7	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c8	90 08		bcc $84d2			bcc 	_GXSDCNoFlip
.84ca	ad 42 06	lda $0642			lda	 	gxANDValue
.84cd	49 ff		eor #$ff			eor 	#$FF
.84cf	8d 42 06	sta $0642			sta 	gxANDValue
.84d2					_GXSDCNoFlip:
.84d2	18		clc				clc
.84d3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84d4					GXPlotPoint:
.84d4	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.84d7	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84da	ac 45 06	ldy $0645			ldy 	gsOffset
.84dd	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84df	2d 42 06	and $0642			and 	gxANDValue
.84e2	4d 41 06	eor $0641			eor 	gxEORValue
.84e5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e7	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ea	18		clc				clc
.84eb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84ec					GXFillRectangle:
.84ec	38		sec				sec
.84ed	80 01		bra $84f0			bra 	GXRectangle
.84ef					GXFrameRectangle:
.84ef	18		clc				clc
.84f0					GXRectangle:
.84f0	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f3	f0 35		beq $852a			beq 	_GXRFail
.84f5	08		php				php 								; save Fill flag (CS)
.84f6	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.84f9	20 7b 89	jsr $897b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fc	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ff	38		sec				sec 								; sec = Draw line
.8500	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8503	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8506	cd 38 06	cmp $0638			cmp 	gxY1
.8509	f0 19		beq $8524			beq 	_GXRectangleExit
.850b					_GXRectLoop:
.850b	20 b9 88	jsr $88b9			jsr 	GXMovePositionDown 			; down one.
.850e	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8511	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8514	cd 38 06	cmp $0638			cmp 	gXY1
.8517	f0 07		beq $8520			beq 	_GXLastLine
.8519	28		plp				plp 								; get flag back
.851a	08		php				php
.851b	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851e	80 eb		bra $850b			bra 	_GXRectLoop
.8520					_GXLastLine:
.8520	38		sec				sec
.8521	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0
.8524					_GXRectangleExit:
.8524	68		pla				pla 								; throw fill flag.
.8525	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; stop drawing and exit
.8528	18		clc				clc
.8529	60		rts				rts
.852a					_GXRFail:
.852a	38		sec				sec
.852b	60		rts				rts
.852c					GXDrawLineX1X0:
.852c	08		php				php 								; save solid/either-end
.852d	38		sec				sec
.852e	ad 36 06	lda $0636			lda		gXX1
.8531	ed 32 06	sbc $0632			sbc 	gXX0
.8534	85 36		sta $36				sta 	gxzTemp0
.8536	ad 37 06	lda $0637			lda 	gXX1+1
.8539	ed 33 06	sbc $0633			sbc 	gXX0+1
.853c	85 37		sta $37				sta 	gxzTemp0+1
.853e	28		plp				plp
.853f					GXDrawLineTemp0:
.853f	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8541	48		pha				pha
.8542	a5 3d		lda $3d				lda 	gxzScreen+1
.8544	48		pha				pha
.8545	ad 45 06	lda $0645			lda 	gsOffset
.8548	48		pha				pha
.8549	a5 0b		lda $0b				lda 	GXEditSlot
.854b	48		pha				pha
.854c	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.854f	90 1e		bcc $856f			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8551					_GXDLTLine:
.8551	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8553	2d 42 06	and $0642			and 	gxANDValue
.8556	4d 41 06	eor $0641			eor 	gxEORValue
.8559	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855b	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855d	d0 04		bne $8563			bne 	_GXDLTNoBorrow
.855f	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8561	30 2e		bmi $8591			bmi 	_GXDLTExit
.8563					_GXDLTNoBorrow:
.8563	c6 36		dec $36				dec 	gxzTemp0
.8565	c8		iny				iny 								; next slot.
.8566	d0 e9		bne $8551			bne 	_GXDLTLine
.8568	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.856a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.856d	80 e2		bra $8551			bra 	_GXDLTLine
.856f					_GXDLTEndPoints:
.856f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8571	2d 42 06	and $0642			and 	gxANDValue
.8574	4d 41 06	eor $0641			eor 	gxEORValue
.8577	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8579	98		tya				tya 								; advance to right side
.857a	18		clc				clc
.857b	65 36		adc $36				adc 	gxzTemp0
.857d	a8		tay				tay
.857e	a5 3d		lda $3d				lda 	gxzScreen+1
.8580	65 37		adc $37				adc 	gxzTemp0+1
.8582	85 3d		sta $3d				sta 	gxzScreen+1
.8584	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap 			; fix up.
.8587	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8589	2d 42 06	and $0642			and 	gxANDValue
.858c	4d 41 06	eor $0641			eor 	gxEORValue
.858f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8591					_GXDLTExit:
.8591	68		pla				pla
.8592	85 0b		sta $0b				sta 	GXEditSlot
.8594	68		pla				pla
.8595	8d 45 06	sta $0645			sta 	gsOffset
.8598	68		pla				pla
.8599	85 3d		sta $3d				sta 	gxzScreen+1
.859b	68		pla				pla
.859c	85 3c		sta $3c				sta 	gxzScreen
.859e	60		rts				rts
.859f					GXDLTCheckWrap:
.859f	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a3	90 06		bcc $85ab			bcc 	_GXDLTCWExit
.85a5	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a7	85 3d		sta $3d				sta 	gxzScreen+1
.85a9	e6 0b		inc $0b				inc 	GXEditSlot
.85ab					_GXDLTCWExit:
.85ab	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.85ac					GXDrawGraphicElement:
.85ac	8d d8 06	sta $06d8			sta 	gxSize 						; save size
.85af	3a		dec a				dec 	a
.85b0	8d d9 06	sta $06d9			sta 	gxMask 						; and mask
.85b3	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b6	f0 67		beq $861f			beq 	_GXSLFail
.85b8	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85bb	48		pha				pha
.85bc	8c db 06	sty $06db			sty 	gxAcquireVector+1 			; and acquisition vector
.85bf	8e da 06	stx $06da			stx 	gxAcquireVector
.85c2	20 45 88	jsr $8845			jsr 	gxOpenBitmap 				; open the bitmap.
.85c5	ad dd 06	lda $06dd			lda 	gxUseMode 					; scale bits
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	29 07		and #$07			and		#7
.85cd	1a		inc a				inc 	a
.85ce	8d dc 06	sta $06dc			sta 	gxScale
.85d1	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d3					_GXGELoop:
.85d3	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d5	2c dd 06	bit $06dd			bit 	gxUseMode 					; check for flip.
.85d8	10 06		bpl $85e0			bpl		_GXNoVFlip
.85da	ad d9 06	lda $06d9			lda 	gxMask
.85dd	38		sec				sec
.85de	e5 38		sbc $38				sbc 	gxzTemp1
.85e0					_GXNoVFlip:
.85e0	aa		tax				tax 								; get the Xth line.
.85e1	20 21 86	jsr $8621			jsr 	_GXCallAcquire 				; get that data.
.85e4	ad dc 06	lda $06dc			lda 	gxScale 					; do scale identical copies of that line.
.85e7	85 39		sta $39				sta 	gxzTemp1+1
.85e9					_GXGELoop2:
.85e9	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85ec	cd 3e 06	cmp $063e			cmp 	gxHeight
.85ef	b0 10		bcs $8601			bcs 	_GXDGEExit
.85f1	20 24 86	jsr $8624			jsr 	GXRenderOneLine 			; render line
.85f4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f6	d0 f1		bne $85e9			bne 	_GXGELoop2
.85f8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85fa	a5 38		lda $38				lda 	gxzTemp1
.85fc	cd d8 06	cmp $06d8			cmp 	gxSize
.85ff	d0 d2		bne $85d3			bne 	_GXGELoop
.8601					_GXDGEExit:
.8601	68		pla				pla 								; restore Y for next time
.8602	8d 34 06	sta $0634			sta 	gxY0
.8605	ae dc 06	ldx $06dc			ldx 	gxScale 					; get scale (1-8)
.8608					_GXShiftLeft:
.8608	18		clc				clc
.8609	ad d8 06	lda $06d8			lda 	gxSize
.860c	6d 32 06	adc $0632			adc 	gxX0
.860f	8d 32 06	sta $0632			sta 	gxX0
.8612	90 03		bcc $8617			bcc 	_GXSLNoCarry
.8614	ee 33 06	inc $0633			inc 	gxX0+1
.8617					_GXSLNoCarry:
.8617	ca		dex				dex
.8618	d0 ee		bne $8608			bne 	_GXShiftLeft
.861a	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.861d	18		clc				clc
.861e	60		rts				rts
.861f					_GXSLFail:
.861f	38		sec				sec
.8620	60		rts				rts
.8621					_GXCallAcquire:
.8621	6c da 06	jmp ($06da)			jmp 	(gxAcquireVector)
.8624					GXRenderOneLine:
.8624	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; calculate position/offset.
.8627	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.862a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862c					_GXROLLoop1:
.862c	ad dc 06	lda $06dc			lda 	gxScale 					; set to do 'scale' times
.862f	85 3b		sta $3b				sta 	gxzTemp2+1
.8631					_GXROLLoop2:
.8631	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8633	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8636	50 06		bvc $863e			bvc 	_GXNoHFlip
.8638	ad d9 06	lda $06d9			lda 	gxMask
.863b	38		sec				sec
.863c	e5 3a		sbc $3a				sbc 	gxzTemp2
.863e					_GXNoHFlip:
.863e	aa		tax				tax 								; read from the pixel buffer
.863f	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8642	d0 07		bne $864b			bne 	_GXDraw 					; draw if non zero
.8644	ad dd 06	lda $06dd			lda 	gxUseMode 					; check to see if solid background
.8647	29 04		and #$04			and 	#4
.8649	f0 0a		beq $8655			beq 	_GXZeroPixel
.864b					_GXDraw:
.864b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864d	2d 42 06	and $0642			and 	gxANDValue
.8650	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8653	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8655					_GXZeroPixel:
.8655	c8		iny				iny 								; advance pointer
.8656	d0 05		bne $865d			bne 	_GXNoShift
.8658	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.865a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.865d					_GXNoShift:
.865d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.865f	d0 d0		bne $8631			bne 	_GXROLLoop2
.8661	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8663	a5 3a		lda $3a				lda 	gxzTemp2
.8665	cd d8 06	cmp $06d8			cmp 	gxSize
.8668	d0 c2		bne $862c			bne 	_GXROLLoop1
.866a	ee 34 06	inc $0634			inc 	gxY0
.866d	60		rts				rts
.06d8					gxSize:
>06d8							.fill 	1
.06d9					gxMask:
>06d9							.fill 	1
.06da					gxAcquireVector:
>06da							.fill 	2
.06dc					gxScale:
>06dc							.fill 	1
.06dd					gxUseMode:
>06dd							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.866e					GXFontHandler:
.866e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8670	4d 3f 06	eor $063f			eor 	gxMode
.8673	8d dd 06	sta $06dd			sta 	gxUseMode
.8676	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8678	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.867a	26 37		rol $37				rol	 	gxzTemp0+1
.867c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867e	26 37		rol $37				rol	 	gxzTemp0+1
.8680	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8682	26 37		rol $37				rol	 	gxzTemp0+1
.8684	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8686	09 c0		ora #$c0			ora 	#$C0
.8688	85 37		sta $37				sta 	gxzTemp0+1
.868a	a9 08		lda #$08			lda 	#8 							; size 8x8
.868c	a2 94		ldx #$94			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8690	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.8693	60		rts				rts
.8694					GXGetGraphicDataFont:
.8694	8a		txa				txa 								; X->Y
.8695	a8		tay				tay
.8696	a6 01		ldx $01				ldx 	1 							; preserve old value
.8698	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.869a	85 01		sta $01				sta 	1
.869c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869e	86 01		stx $01				stx 	1 							; put old value back.
.86a0	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a2					_GXExpand:
.86a2	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a5	0a		asl a				asl 	a 							; shift bit 7 into C
.86a6	90 08		bcc $86b0			bcc 	_GXNoPixel
.86a8	48		pha				pha 								; if set, set pixel buffer to current colour.
.86a9	ad 40 06	lda $0640			lda 	gxColour
.86ac	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86af	68		pla				pla
.86b0					_GXNoPixel:
.86b0	e8		inx				inx 								; do the whole byte.
.86b1	e0 08		cpx #$08			cpx 	#8
.86b3	d0 ed		bne $86a2			bne 	_GXExpand
.86b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86b6					GXSpriteHandler:
.86b6	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b8	4d 3f 06	eor $063f			eor 	gxMode
.86bb	8d dd 06	sta $06dd			sta 	gxUseMode
.86be	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86c0	da		phx				phx
.86c1	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; can access sprite information
.86c4	68		pla				pla
.86c5	20 34 89	jsr $8934			jsr 	GXFindSprite 				; get the sprite address
.86c8	08		php				php
.86c9	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.86cc	28		plp				plp
.86cd	b0 0a		bcs $86d9			bcs		_GXSHExit 					; exit if find failed.
.86cf	ad de 06	lda $06de			lda 	GXSizePixels 				; return size
.86d2	a2 da		ldx #$da			ldx 	#GXSpriteAcquire & $FF
.86d4	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d6	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.86d9					_GXSHExit:
.86d9	60		rts				rts
.86da					GXSpriteAcquire:
.86da	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86dd	85 0b		sta $0b				sta 	GXEditSlot
.86df	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e1	a9 00		lda #$00			lda 	#0
.86e3	ae df 06	ldx $06df			ldx 	GXSizeBits
.86e6					_GXTimesRowNumber:
.86e6	18		clc				clc
.86e7	65 36		adc $36				adc 	zTemp0
.86e9	ca		dex				dex
.86ea	10 fa		bpl $86e6			bpl 	_GXTimesRowNumber
.86ec	64 37		stz $37				stz 	gxzTemp0+1
.86ee	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ef	26 37		rol $37				rol 	gxzTemp0+1
.86f1	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f2	26 37		rol $37				rol 	gxzTemp0+1
.86f4	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f5	26 37		rol $37				rol 	gxzTemp0+1
.86f7	85 36		sta $36				sta 	gxzTemp0
.86f9	18		clc				clc 								; add base address.
.86fa	a5 36		lda $36				lda 	gxzTemp0
.86fc	6d e1 06	adc $06e1			adc 	GXSpriteOffset
.86ff	85 36		sta $36				sta 	gxzTemp0
.8701	a5 37		lda $37				lda 	gxzTemp0+1
.8703	6d e2 06	adc $06e2			adc 	GXSpriteOffset+1
.8706					_GXSAFindPage:
.8706	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8708	90 06		bcc $8710			bcc 	_GXSAFoundPage
.870a	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870c	e6 0b		inc $0b				inc 	GXEditSlot
.870e	80 f6		bra $8706			bra 	_GXSAFindPage
.8710					_GXSAFoundPage:
.8710	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8712	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8714	a0 00		ldy #$00			ldy 	#0
.8716					_GXSACopyLoop:
.8716	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8718	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871b	c8		iny				iny
.871c	cc de 06	cpy $06de			cpy 	GXSizePixels
.871f	d0 f5		bne $8716			bne 	_GXSACopyLoop
.8721	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8722					GXSelect:
.8722	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8725	f0 22		beq $8749			beq 	_GXSFail
.8727	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8729	c9 40		cmp #$40			cmp 	#64
.872b	b0 1c		bcs $8749			bcs 	_GXSFail
.872d	8d 46 06	sta $0646			sta 	GSCurrentSpriteID
.8730	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8732	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8734	06 36		asl $36				asl 	gxzTemp0
.8736	06 36		asl $36				asl 	gxzTemp0
.8738	06 36		asl $36				asl 	gxzTemp0
.873a	2a		rol a				rol 	a
.873b	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873d	8d 48 06	sta $0648			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.8740	85 37		sta $37				sta 	gxzTemp0+1
.8742	a5 36		lda $36				lda 	gxzTemp0
.8744	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr
.8747	18		clc				clc
.8748	60		rts				rts
.8749					_GXSFail:
.8749	38		sec				sec
.874a	60		rts				rts
.874b					GXSelectImage:
.874b	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874e	f0 74		beq $87c4			beq 	_GXSIFail
.8750	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8753	f0 6f		beq $87c4			beq 	_GXSIFail 					; (checking the MSB)
.8755	64 01		stz $01				stz 	1
.8757	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8759	d0 6b		bne $87c6			bne 	_GXSIHide
.875b	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875d	48		pha				pha
.875e	20 45 88	jsr $8845			jsr 	GXOpenBitmap
.8761	68		pla				pla
.8762	20 34 89	jsr $8934			jsr 	GXFindSprite
.8765	b0 5a		bcs $87c1			bcs 	_GXSICloseFail 				; no image
.8767	a0 01		ldy #$01			ldy 	#1
.8769	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.876c	85 36		sta $36				sta 	gxzTemp0
.876e	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.8771	85 37		sta $37				sta 	gxzTemp0+1
.8773	ad e1 06	lda $06e1			lda 	GXSpriteOffset
.8776	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8778	18		clc				clc
.8779	ad e2 06	lda $06e2			lda 	GXSpriteOffset+1
.877c	6d 49 06	adc $0649			adc 	GXSpriteOffsetBase
.877f	c8		iny				iny
.8780	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8782	ad 4a 06	lda $064a			lda 	GXSpriteOffsetBase+1
.8785	69 00		adc #$00			adc 	#0
.8787	c8		iny				iny
.8788	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.878a	ad df 06	lda $06df			lda 	GXSizeBits 					; get raw size
.878d	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.878f	2a		rol a				rol 	a 							; x 2
.8790	0a		asl a				asl 	a 							; x 4
.8791	0a		asl a				asl 	a 							; x 8
.8792	0a		asl a				asl 	a 							; x 16
.8793	0d e0 06	ora $06e0			ora 	GXSpriteLUT 				; Or with LUT
.8796	0a		asl a				asl 	a 							; 1 shift
.8797	09 01		ora #$01			ora 	#1 							; enable sprite.
.8799	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.879b	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.879e	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87a1	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87a4	29 3f		and #$3f			and 	#$3F
.87a6	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87a9	ad df 06	lda $06df			lda 	GXSizeBits 					; get bit size
.87ac	6a		ror a				ror 	a 							; shift into bits 6/7
.87ad	6a		ror a				ror 	a
.87ae	6a		ror a				ror 	a
.87af	29 c0		and #$c0			and 	#$C0
.87b1	1d 8b 06	ora $068b,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87b4	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87b7	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87ba	29 7f		and #$7f			and 	#$7F
.87bc	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87bf	18		clc				clc
.87c0	60		rts				rts
.87c1					_GXSICloseFail:
.87c1	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.87c4					_GXSIFail:
.87c4	38		sec				sec
.87c5	60		rts				rts
.87c6					_GXSIHide:
.87c6	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87c9	85 36		sta $36				sta 	gxzTemp0
.87cb	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.87ce	85 37		sta $37				sta 	gxzTemp0+1
.87d0	a9 00		lda #$00			lda 	#0
.87d2	92 36		sta ($36)			sta 	(gxzTemp0)
.87d4	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; get sprite ID
.87d7	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87da	09 80		ora #$80			ora 	#$80
.87dc	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87df	18		clc				clc
.87e0	60		rts				rts
.87e1					GXMoveSprite:
.87e1	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87e4	f0 5d		beq $8843			beq 	_GXSIFail
.87e6	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.87e9	f0 58		beq $8843			beq 	_GXSIFail
.87eb	85 37		sta $37				sta 	gxzTemp0+1
.87ed	a0 04		ldy #$04			ldy 	#4
.87ef	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.87f2	85 36		sta $36				sta 	gxzTemp0
.87f4	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87f6	38		sec				sec
.87f7	ed de 06	sbc $06de			sbc 	GXSizePixels
.87fa	4a		lsr a				lsr 	a
.87fb	48		pha				pha
.87fc	18		clc				clc
.87fd	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8800	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8802	c8		iny				iny
.8803	ad 33 06	lda $0633			lda 	gxX0+1
.8806	69 00		adc #$00			adc 	#0
.8808	91 36		sta ($36),y			sta 	(gxzTemp0),y
.880a	c8		iny				iny
.880b	68		pla				pla
.880c	18		clc				clc
.880d	6d 34 06	adc $0634			adc 	gxY0
.8810	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8812	a9 00		lda #$00			lda 	#0
.8814	69 00		adc #$00			adc 	#0
.8816	c8		iny				iny
.8817	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8819	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.881c	6e 32 06	ror $0632			ror 	gxX0
.881f	4e 32 06	lsr $0632			lsr 	gxX0
.8822	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.8825	4e 34 06	lsr $0634			lsr 	gxY0
.8828	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.882b	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x
.882e	29 80		and #$80			and 	#$80
.8830	0d 32 06	ora $0632			ora 	gxX0
.8833	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.8836	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8839	29 c0		and #$c0			and 	#$C0
.883b	0d 34 06	ora $0634			ora 	gxY0
.883e	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.8841	18		clc				clc
.8842	60		rts				rts
.8843					_GXSIFail:
.8843	38		sec				sec
.8844	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8845					GXOpenBitmap:
.8845	78		sei				sei 								; no interrupts here
.8846	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8848	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.884b	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.884d	85 00		sta $00				sta 	0
.884f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.8851	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.8854	58		cli				cli
.8855	60		rts				rts
.8856					GXCloseBitmap:
.8856	78		sei				sei
.8857	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.885a	85 0b		sta $0b				sta 	GXEditSlot
.885c	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.885f	85 00		sta $00				sta 	0
.8861	58		cli				cli
.8862	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8863					GXPositionCalc:
.8863	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8865	48		pha				pha
.8866	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8869	85 3c		sta $3c				sta 	gxzScreen
.886b	64 3d		stz $3d				stz 	gxzScreen+1
.886d	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.886f	26 3d		rol $3d				rol 	gxzScreen+1
.8871	06 3c		asl $3c				asl 	gxzScreen
.8873	26 3d		rol $3d				rol 	gxzScreen+1
.8875	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8876	65 3c		adc $3c				adc 	gxzScreen
.8878	85 3c		sta $3c				sta 	gxzScreen
.887a	90 02		bcc $887e			bcc 	_GXPCNoCarry
.887c	e6 3d		inc $3d				inc 	gxzScreen+1
.887e					_GXPCNoCarry:
.887e	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8880	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8882	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8884	85 36		sta $36				sta 	gxzTemp0
.8886	64 3d		stz $3d				stz 	gxzScreen+1
.8888	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.888a					_GXPCMultiply32:
.888a	06 3c		asl $3c				asl 	gxzScreen
.888c	26 3d		rol $3d				rol 	gxzScreen+1
.888e	3a		dec a				dec 	a
.888f	d0 f9		bne $888a			bne 	_GXPCMultiply32
.8891	18		clc				clc
.8892	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8895	65 3c		adc $3c				adc 	gxzScreen
.8897	8d 45 06	sta $0645			sta 	gsOffset
.889a	ad 33 06	lda $0633			lda 	GXX0+1
.889d	65 3d		adc $3d				adc 	gxzScreen+1
.889f	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.88a1	90 04		bcc $88a7			bcc 	_GXPCNoOverflow
.88a3	29 1f		and #$1f			and 	#$1F 						; fix it up
.88a5	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88a7					_GXPCNoOverflow:
.88a7	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88a9	85 3d		sta $3d				sta 	gxzScreen+1
.88ab	64 3c		stz $3c				stz 	gxzScreen
.88ad	18		clc				clc
.88ae	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88b0	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88b3	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88b5	68		pla				pla
.88b6	85 36		sta $36				sta 	gxzTemp0
.88b8	60		rts				rts
.88b9					GXMovePositionDown:
.88b9	18		clc				clc 								; add 320 to offset/temp+1
.88ba	ad 45 06	lda $0645			lda 	gsOffset
.88bd	69 40		adc #$40			adc 	#64
.88bf	8d 45 06	sta $0645			sta 	gsOffset
.88c2	a5 3d		lda $3d				lda 	gxzScreen+1
.88c4	69 01		adc #$01			adc 	#1
.88c6	85 3d		sta $3d				sta 	gxzScreen+1
.88c8	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88ca	90 07		bcc $88d3			bcc 	_GXMPDExit
.88cc	38		sec				sec  								; next page
.88cd	e9 20		sbc #$20			sbc 	#$20
.88cf	85 3d		sta $3d				sta 	gxzScreen+1
.88d1	e6 0b		inc $0b				inc 	GXEditSlot
.88d3					_GXMPDExit:
.88d3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/collide.asm

.88d4					GXCollide:
.88d4	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.88d6	aa		tax				tax
.88d7	05 37		ora $37				ora 	gxzTemp0+1
.88d9	29 c0		and #$c0			and 	#$C0
.88db	38		sec				sec
.88dc	d0 53		bne $8931			bne 	_GXCollideFail 				; if either >= 64, fail.
.88de	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.88e0	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.88e3	1d 4b 06	ora $064b,x			ora 	GXSpriteLow,x
.88e6	30 48		bmi $8930			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.88e8	18		clc				clc 								; need to calculate sum of sizes.
.88e9	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y
.88ec	7d 8b 06	adc $068b,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.88ef	29 c0		and #$c0			and 	#$C0 					 	; mask off
.88f1	6a		ror a				ror 	a 							; 5/6/7
.88f2	4a		lsr a				lsr 	a 							; 4/5/6
.88f3	4a		lsr a				lsr 	a 							; 3/4/5
.88f4	4a		lsr a				lsr 	a 							; 2/3/4
.88f5	18		clc				clc
.88f6	69 08		adc #$08			adc 	#$08
.88f8	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.88f9	4a		lsr a				lsr 	a
.88fa	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.88fc	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.88ff	29 3f		and #$3f			and 	#$3F
.8901	85 39		sta $39				sta 	gxzTemp1+1
.8903	38		sec				sec
.8904	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8907	29 3f		and #$3f			and 	#$3F
.8909	e5 39		sbc $39				sbc 	gxzTemp1+1
.890b	b0 03		bcs $8910			bcs 	_GXCAbs1 					; calculate |y1-y0|
.890d	49 ff		eor #$ff			eor 	#$FF
.890f	1a		inc a				inc 	a
.8910					_GXCAbs1:
.8910	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8912	b0 1c		bcs $8930			bcs 	_GXOkayFail
.8914	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.8916	38		sec				sec 								; calculate |x1-x0|
.8917	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y
.891a	fd 4b 06	sbc $064b,x			sbc 	GXSpriteLow,x
.891d	b0 03		bcs $8922			bcs 	_GXCAbs2
.891f	49 ff		eor #$ff			eor 	#$FF
.8921	1a		inc a				inc 	a
.8922					_GXCAbs2:
.8922	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8924	b0 0a		bcs $8930			bcs 	_GXOkayFail
.8926	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.8928	90 02		bcc $892c			bcc 	_GXCHaveLowest
.892a	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.892c					_GXCHaveLowest:
.892c	0a		asl a				asl 	a 							; scale to allow for >> 2
.892d	0a		asl a				asl 	a
.892e	18		clc				clc
.892f	60		rts				rts
.8930					_GXOkayFail:
.8930	18		clc				clc
.8931					_GXCollideFail:
.8931	a9 ff		lda #$ff			lda 	#$FF
.8933	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8934					GXFindSprite:
.8934	aa		tax				tax
.8935	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8938	85 0b		sta $0b				sta 	GXEditSlot
.893a	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.893d	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.8940	f0 33		beq $8975			beq 	_GXFSFail
.8942	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8945	8d e2 06	sta $06e2			sta 	GXSpriteOffset+1
.8948	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.894b	48		pha				pha 								; save twice
.894c	48		pha				pha
.894d	29 03		and #$03			and 	#3 							; get sprite size
.894f	8d df 06	sta $06df			sta 	GXSizeBits 					; save raw (0-3)
.8952	aa		tax				tax
.8953	bd 77 89	lda $8977,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8956	8d de 06	sta $06de			sta 	GXSizePixels 					; save (8/16/24/32)
.8959	68		pla				pla 								; get LUT
.895a	4a		lsr a				lsr		a
.895b	4a		lsr a				lsr		a
.895c	29 03		and #$03			and 	#3
.895e	8d e0 06	sta $06e0			sta 	GXSpriteLUT
.8961	68		pla				pla 								; address, neeeds to be x 4
.8962	29 f0		and #$f0			and 	#$F0
.8964	8d e1 06	sta $06e1			sta 	GXSpriteOffset
.8967	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.896a	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.896d	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.8970	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.8973	18		clc				clc
.8974	60		rts				rts
.8975					_GXFSFail:
.8975	38		sec				sec
.8976	60		rts				rts
.8977					_GXFXSSTTable:
>8977	08 10 18 20					.byte 	8,16,24,32
.06de					GXSizePixels:
>06de							.fill 	1
.06df					GXSizeBits:
>06df							.fill 	1
.06e0					GXSpriteLUT:
>06e0							.fill 	1
.06e1					GXSpriteOffset:
>06e1							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.897b					GXSortXY:
.897b	20 99 89	jsr $8999			jsr 	GXSortY 					; will be sorted on Y now
.897e	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.8981	cd 36 06	cmp $0636			cmp 	gxX1
.8984	ad 33 06	lda $0633			lda 	gXX0+1
.8987	ed 37 06	sbc $0637			sbc 	gXX1+1
.898a	90 0c		bcc $8998			bcc 	_GXSXYExit 					; X0 < X1 exit
.898c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.898e	a0 04		ldy #$04			ldy 	#4
.8990	20 ad 89	jsr $89ad			jsr 	GXSwapXY
.8993	e8		inx				inx
.8994	c8		iny				iny
.8995	20 ad 89	jsr $89ad			jsr 	GXSwapXY
.8998					_GXSXYExit:
.8998	60		rts				rts
.8999					GXSortY:
.8999	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.899c	cd 38 06	cmp $0638			cmp 	gxY1
.899f	90 0b		bcc $89ac			bcc 	_GXSYSorted
.89a1	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.89a3	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.89a5					_GXSwap1:
.89a5	20 ad 89	jsr $89ad			jsr 	GXSwapXY
.89a8	88		dey				dey
.89a9	ca		dex				dex
.89aa	10 f9		bpl $89a5			bpl 	_GXSwap1
.89ac					_GXSYSorted:
.89ac	60		rts				rts
.89ad					GXSwapXY:
.89ad	bd 32 06	lda $0632,x			lda 	gxX0,x
.89b0	48		pha				pha
.89b1	b9 32 06	lda $0632,y			lda 	gxX0,y
.89b4	9d 32 06	sta $0632,x			sta 	gxX0,x
.89b7	68		pla				pla
.89b8	99 32 06	sta $0632,y			sta 	gxX0,y
.89bb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.89bc					AssembleGroup1:
.89bc	a9 ff		lda #$ff			lda 	#$FF
.89be	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89c1	80 02		bra $89c5			bra 	AsmGroup12
.89c3					AssembleGroup2:
.89c3	a5 00		lda $00				lda 	$00
.89c5					AsmGroup12:
.89c5	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89c8	68		pla				pla 								; pop the return address to access the information following.
.89c9	fa		plx				plx
.89ca	20 53 8a	jsr $8a53			jsr 	AccessParameters 			; get opcode and save as base
.89cd	8d a4 04	sta $04a4			sta 	BaseOpcode
.89d0	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89d3	d0 08		bne $89dd			bne 	_AG12HaveMask
.89d5	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89d7	20 5b 8a	jsr $8a5b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89da	8d a5 04	sta $04a5			sta 	ModeMask
.89dd					_AG12HaveMask:
.89dd	20 96 8b	jsr $8b96			jsr 	TypeAndCalculateOperand 	; get zero page type
.89e0	da		phx				phx 								; save found address mode
.89e1	20 bf 8a	jsr $8abf			jsr 	AssembleModeX
.89e4	fa		plx				plx  								; restore address mode
.89e5	b0 0b		bcs $89f2			bcs 	_AG12Exit
.89e7	20 f3 89	jsr $89f3			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89ea	20 bf 8a	jsr $8abf			jsr 	AssembleModeX
.89ed	b0 03		bcs $89f2			bcs 	_AG12Exit
.89ef	4c 34 b5	jmp $b534			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89f2					_AG12Exit:
.89f2	60		rts				rts
.89f3					PromoteToAbsolute:
.89f3	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89f5	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89f7	f0 19		beq $8a12			beq 	_PTADo
.89f9	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89fb	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89fd	f0 13		beq $8a12			beq 	_PTADo
.89ff	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8a01	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8a03	f0 0d		beq $8a12			beq 	_PTADo
.8a05	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8a07	e0 d1		cpx #$d1			cpx 	#AM_IND
.8a09	f0 07		beq $8a12			beq 	_PTADo
.8a0b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8a0d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8a0f	f0 01		beq $8a12			beq 	_PTADo
.8a11	60		rts				rts
.8a12					_PTADo:
.8a12	aa		tax				tax
.8a13	60		rts				rts
.8a14					AssembleGroup3:
.8a14	68		pla				pla 								; get parameters, which is just the opcode.
.8a15	fa		plx				plx
.8a16	20 53 8a	jsr $8a53			jsr 	AccessParameters 			; get and output opcode
.8a19	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8a1c	20 fa 8b	jsr $8bfa			jsr 	CalculateOperand 			; get a 16 bit operand
.8a1f	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a22	38		sec				sec
.8a23	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a26	48		pha				pha 								; LSB in A
.8a27	ad 10 04	lda $0410			lda 	NSMantissa1
.8a2a	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a2d	aa		tax				tax 								; MSB in X
.8a2e	68		pla				pla
.8a2f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a30	69 7f		adc #$7f			adc 	#$7F
.8a32	90 01		bcc $8a35			bcc 	_AG3NoCarry
.8a34	e8		inx				inx
.8a35					_AG3NoCarry:
.8a35	38		sec				sec 								; fix back and write out anyways.
.8a36	e9 80		sbc #$80			sbc 	#$80
.8a38	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8a3b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a3d	f0 0a		beq $8a49			beq 	_AG3Exit
.8a3f	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a42	29 01		and #$01			and 	#1
.8a44	f0 03		beq $8a49			beq 	_AG3Exit
.8a46	4c 39 b5	jmp $b539			jmp 	RangeError 					; no, branch is out of range
.8a49					_AG3Exit:
.8a49	60		rts				rts
.8a4a					AssembleGroup4:
.8a4a	68		pla				pla 								; pop address
.8a4b	fa		plx				plx
.8a4c	20 53 8a	jsr $8a53			jsr 	AccessParameters 			; access and get first
.8a4f	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte 			; output it.
.8a52	60		rts				rts
.8a53					AccessParameters:
.8a53	8d a1 04	sta $04a1			sta 	ParamStart
.8a56	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a59	a9 01		lda #$01			lda 	#1
.8a5b					GetParameter:
.8a5b	5a		phy				phy
.8a5c	a8		tay				tay
.8a5d	ad a1 04	lda $04a1			lda 	ParamStart
.8a60	85 36		sta $36				sta 	zTemp0
.8a62	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a65	85 37		sta $37				sta 	zTemp0+1
.8a67	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a69	7a		ply				ply
.8a6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a6b					AssemblerWriteByte:
.8a6b	48		pha			pha
.8a6c	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a6f	29 02		and #$02		and 	#2
.8a71	f0 1b		beq $8a8e		beq 	_AWBNoPrint
.8a73	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a76	20 a9 8a	jsr $8aa9		jsr 	PrintHex
.8a79	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a7c	20 a9 8a	jsr $8aa9		jsr 	PrintHex
.8a7f	a9 20		lda #$20		lda 	#' '
.8a81	20 ed b6	jsr $b6ed		jsr 	EXTPrintCharacter
.8a84	68		pla			pla 									; print byte
.8a85	48		pha			pha
.8a86	20 a9 8a	jsr $8aa9		jsr 	PrintHex
.8a89	a9 0d		lda #$0d		lda 	#13
.8a8b	20 ed b6	jsr $b6ed		jsr 	EXTPrintCharacter
.8a8e					_AWBNoPrint:
.8a8e	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a91	85 36		sta $36			sta 	zTemp0
.8a93	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a96	f0 0e		beq $8aa6		beq 	_AWBRange
.8a98	85 37		sta $37			sta 	zTemp0+1
.8a9a	68		pla			pla 									; write byte out
.8a9b	92 36		sta ($36)		sta 	(zTemp0)
.8a9d	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8aa0	d0 03		bne $8aa5		bne 	_AWBNoCarry
.8aa2	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8aa5					_AWBNoCarry:
.8aa5	60		rts			rts
.8aa6					_AWBRange:
.8aa6	4c 39 b5	jmp $b539		jmp 	RangeError
.8aa9					PrintHex:
.8aa9	48		pha				pha
.8aaa	4a		lsr a				lsr 	a
.8aab	4a		lsr a				lsr 	a
.8aac	4a		lsr a				lsr 	a
.8aad	4a		lsr a				lsr 	a
.8aae	20 b2 8a	jsr $8ab2			jsr 	_PrintNibble
.8ab1	68		pla				pla
.8ab2					_PrintNibble:
.8ab2	29 0f		and #$0f			and 	#15
.8ab4	c9 0a		cmp #$0a			cmp 	#10
.8ab6	90 02		bcc $8aba			bcc 	_NoShift
.8ab8	69 06		adc #$06			adc 	#6
.8aba					_NoShift:
.8aba	69 30		adc #$30			adc 	#48
.8abc	4c ed b6	jmp $b6ed			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8abf					AssembleModeX:
.8abf	5a		phy				phy
.8ac0	ad a3 04	lda $04a3			lda 	IsGroup1
.8ac3	f0 17		beq $8adc			beq 	_AMXGroup2
.8ac5	8a		txa				txa 							; is it in group # 1
.8ac6	29 40		and #$40			and 	#AM_ISG1
.8ac8	f0 50		beq $8b1a			beq 	_AMXFail 				; no, give up.
.8aca	8a		txa				txa 							; get back.
.8acb	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8acd	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8acf	d0 22		bne $8af3			bne 	_AMXHaveInfo
.8ad1	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ad4	c9 81		cmp #$81			cmp 	#$81
.8ad6	f0 42		beq $8b1a			beq 	_AMXFail
.8ad8	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ada	80 17		bra $8af3			bra 	_AMXHaveInfo 			; odd design decision there.
.8adc					_AMXGroup2:
.8adc	8a		txa				txa 							; is it in group 2 ?
.8add	29 20		and #$20			and 	#AM_ISG2
.8adf	f0 39		beq $8b1a			beq 	_AMXFail 				; no, give up.
.8ae1	8a		txa				txa 							; get the offset into Y
.8ae2	29 1f		and #$1f			and 	#$1F
.8ae4	4a		lsr a				lsr 	a 						; make it 0-7.
.8ae5	4a		lsr a				lsr  	a
.8ae6	a8		tay				tay
.8ae7	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8aea					_AMXCheckOkay:
.8aea	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8aeb	88		dey				dey
.8aec	10 fc		bpl $8aea			bpl 	_AMXCheckOkay
.8aee	90 2a		bcc $8b1a			bcc 	_AMXFail 				; not allowed.
.8af0	8a		txa				txa  							; get mask back
.8af1	29 1f		and #$1f			and 	#$1F
.8af3					_AMXHaveInfo:
.8af3	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8af5	10 05		bpl $8afc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8af7	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8afa	d0 1e		bne $8b1a			bne 	_AMXFail
.8afc					_AMXAnySize:
.8afc	18		clc				clc 							; add offset to the base opcode
.8afd	6d a4 04	adc $04a4			adc 	BaseOpcode
.8b00					_AMXOutputCode:
.8b00	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte 		; write the opcode out.
.8b03	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8b05	f0 10		beq $8b17			beq 	_AMXExit
.8b07	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8b0a	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8b0d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8b0f	30 06		bmi $8b17			bmi 	_AMXExit
.8b11	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8b14	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8b17					_AMXExit:
.8b17	7a		ply				ply
.8b18	38		sec				sec
.8b19	60		rts				rts
.8b1a					_AMXFail:
.8b1a	a0 00		ldy #$00			ldy 	#0
.8b1c					_AMXCheckOddities:
.8b1c	8a		txa				txa
.8b1d	d9 45 8b	cmp $8b45,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b20	d0 16		bne $8b38			bne 	_AMXCONext
.8b22	b9 43 8b	lda $8b43,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b25	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b28	d0 0e		bne $8b38			bne 	_AMXCONext
.8b2a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b2c	10 05		bpl $8b33			bpl 	_AMXCONotZero
.8b2e	ad 10 04	lda $0410			lda 	NSMantissa1
.8b31	d0 05		bne $8b38			bne 	_AMXCONext
.8b33					_AMXCONotZero:
.8b33	b9 44 8b	lda $8b44,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b36	80 c8		bra $8b00			bra 	_AMXOutputCode 			; and assemble it
.8b38					_AMXCONext:
.8b38	c8		iny				iny
.8b39	c8		iny				iny
.8b3a	c8		iny				iny
.8b3b	b9 43 8b	lda $8b43,y			lda 	ExtraOpcode+0,y 		; end of table
.8b3e	d0 dc		bne $8b1c			bne 	_AMXCheckOddities
.8b40					_AMXCOFail:
.8b40	7a		ply				ply
.8b41	18		clc				clc
.8b42	60		rts				rts
.8b43					ExtraOpcode:
>8b43	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b46	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b49	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b4c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b4f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b52	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b55	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b58	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b5b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b5e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b61	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b62					LabelHere:
.8b62	c8		iny				iny 								; skip .
.8b63	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b65	20 af a1	jsr $a1af			jsr 	EvaluateTerm 				; get a term
.8b68	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b6b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b6d	d0 24		bne $8b93			bne 	_ALType
.8b6f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b72	85 36		sta $36				sta 	zTemp0
.8b74	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b77	85 37		sta $37				sta 	zTemp0+1
.8b79	5a		phy				phy 								; copy address in.
.8b7a	a0 01		ldy #$01			ldy 	#1
.8b7c	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b7f	92 36		sta ($36)			sta 	(zTemp0)
.8b81	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b84	91 36		sta ($36),y			sta 	(zTemp0),y
.8b86	c8		iny				iny
.8b87	a9 00		lda #$00			lda 	#0
.8b89	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8b	c8		iny				iny
.8b8c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8e	c8		iny				iny
.8b8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b91	7a		ply				ply
.8b92	60		rts				rts
.8b93					_ALType:
.8b93	4c 3e b5	jmp $b53e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b96					TypeAndCalculateOperand:
.8b96	b1 30		lda ($30),y			lda 	(codePtr),y
.8b98	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b9a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b9c	f0 5b		beq $8bf9			beq 	_TACOExit
.8b9e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ba0	f0 57		beq $8bf9			beq 	_TACOExit
.8ba2	c8		iny				iny
.8ba3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ba5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ba7	f0 51		beq $8bfa			beq 	CalculateOperand
.8ba9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8bab	f0 1f		beq $8bcc			beq 	_TACOIndirect
.8bad	88		dey				dey 								; undo get of first character
.8bae	20 fa 8b	jsr $8bfa			jsr 	CalculateOperand 			; get operand
.8bb1	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8bb5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bb7	d0 40		bne $8bf9			bne 	_TACOExit
.8bb9	c8		iny				iny
.8bba	20 bd ae	jsr $aebd			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8bbd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8bbf	c9 58		cmp #$58			cmp 	#'X'
.8bc1	f0 36		beq $8bf9			beq 	_TACOExit
.8bc3	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8bc5	c9 59		cmp #$59			cmp 	#'Y'
.8bc7	f0 30		beq $8bf9			beq 	_TACOExit
.8bc9					_TACOSyntax:
.8bc9	4c 34 b5	jmp $b534			jmp 	SyntaxError
.8bcc					_TACOIndirect:
.8bcc	20 fa 8b	jsr $8bfa			jsr 	CalculateOperand 			; get the operand
.8bcf	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bd3	f0 17		beq $8bec			beq 	_TACOIndX
.8bd5	20 46 af	jsr $af46			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bda	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bdc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bde	d0 19		bne $8bf9			bne 	_TACOExit
.8be0	c8		iny				iny
.8be1	20 bd ae	jsr $aebd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8be4	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8be6	d0 e1		bne $8bc9			bne 	_TACOSyntax
.8be8	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bea	80 0d		bra $8bf9			bra 	_TACOExit
.8bec					_TACOIndX:
.8bec	c8		iny				iny
.8bed	20 bd ae	jsr $aebd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bf0	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bf2	d0 d5		bne $8bc9			bne 	_TACOSyntax
.8bf4	20 46 af	jsr $af46			jsr 	CheckRightBracket			; check )
.8bf7	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bf9					_TACOExit:
.8bf9	60		rts				rts
.8bfa					CalculateOperand:
.8bfa	48		pha				pha
.8bfb	da		phx				phx
.8bfc	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bfe	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.8c01	fa		plx				plx
.8c02	68		pla				pla
.8c03	60		rts				rts
.aebd					TACOCheckXY:
.aebd	b1 30		lda ($30),y			lda 	(codePtr),y
.aebf	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.aec1	c9 40		cmp #$40			cmp 	#$40
.aec3	d0 21		bne $aee6			bne 	_TCXYFail
.aec5	b1 30		lda ($30),y			lda 	(codePtr),y
.aec7	18		clc				clc
.aec8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aeca	85 37		sta $37				sta 	zTemp0+1
.aecc	c8		iny				iny
.aecd	b1 30		lda ($30),y			lda 	(codePtr),y
.aecf	c8		iny				iny
.aed0	85 36		sta $36				sta 	zTemp0
.aed2	5a		phy				phy 								; save position
.aed3	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.aed5	b1 36		lda ($36),y			lda 	(zTemp0),y
.aed7	d0 0c		bne $aee5			bne 	_TCXYPopFail
.aed9	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.aedb	b1 36		lda ($36),y			lda 	(zTemp0),y
.aedd	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aedf	f0 08		beq $aee9			beq 	_TCXYFound
.aee1	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aee3	f0 04		beq $aee9			beq 	_TCXYFound
.aee5					_TCXYPopFail:
.aee5	7a		ply				ply
.aee6					_TCXYFail:
.aee6	a9 00		lda #$00			lda 	#0
.aee8	60		rts				rts
.aee9					_TCXYFound:
.aee9	7a		ply				ply 								; restore position
.aeea	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aeec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8c04					EditProgramCode:
.8c04	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8c07	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8c0a	20 67 a7	jsr $a767			jsr 	MemorySearch
.8c0d	90 05		bcc $8c14			bcc 	_EPCNoDelete 				; reached the end don't delete
.8c0f	d0 03		bne $8c14			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8c11	20 78 b7	jsr $b778			jsr 	MemoryDeleteLine 			; delete the line
.8c14					_EPCNoDelete:
.8c14	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8c17	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c19	f0 0d		beq $8c28			beq 	_EPCNoInsert
.8c1b	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8c1e	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c21	20 67 a7	jsr $a767			jsr 	MemorySearch
.8c24	18		clc				clc 								; insert at this point.
.8c25	20 af b7	jsr $b7af			jsr 	MemoryInsertLine 			; insert the line
.8c28					_EPCNoInsert:
.8c28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c29					WarmStart:
.8c29	a2 ff		ldx #$ff			ldx 	#$FF
.8c2b	9a		txs				txs
.8c2c	20 03 b7	jsr $b703			jsr 	EXTInputLine 				; get line to lineBuffer
.8c2f	20 3e ac	jsr $ac3e			jsr 	TokeniseLine 				; tokenise the line
.8c32	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8c35	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8c38	d0 17		bne $8c51			bne 	_WSEditCode 				; if so,edit code.
.8c3a	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c3d	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8c3f	85 30		sta $30				sta 	codePtr
.8c41	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c43	85 31		sta $31				sta 	codePtr+1
.8c45	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8c48	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c4a	f0 dd		beq $8c29			beq 	WarmStart
.8c4c	20 d3 95	jsr $95d3			jsr 	RUNCodePointerLine 			; execute that line.
.8c4f	80 d8		bra $8c29			bra 	WarmStart
.8c51					_WSEditCode:
.8c51	20 04 8c	jsr $8c04			jsr 	EditProgramCode
.8c54	20 c2 8c	jsr $8cc2			jsr 	ClearCommand
.8c57	80 d0		bra $8c29			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c59					AssembleCommand:
.8c59	a2 00		ldx #$00			ldx 	#0
.8c5b	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger 		; start address
.8c5e	ad 08 04	lda $0408			lda 	NSMantissa0
.8c61	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c64	ad 10 04	lda $0410			lda 	NSMantissa1
.8c67	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c6a	20 4e af	jsr $af4e			jsr 	CheckComma
.8c6d	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; options
.8c70	ad 08 04	lda $0408			lda 	NSMantissa0
.8c73	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c76	60		rts				rts
.8c77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c78					AssertCommand:
.8c78	a2 00		ldx #$00			ldx 	#0
.8c7a	20 6b a6	jsr $a66b			jsr 	EvaluateInteger 			; the assert test
.8c7d	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; exit if result is non zero.
.8c80	d0 05		bne $8c87			bne 	_ACExit
.8c82	a9 0a		lda #$0a		lda	#10
.8c84	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.8c87					_ACExit:
.8c87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c88					CallCommand:
.8c88	a2 00		ldx #$00			ldx 	#0
.8c8a	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.8c8d					_CCClear
.8c8d	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c8e	20 08 a7	jsr $a708			jsr 	NSMSetZero
.8c91	e0 04		cpx #$04			cpx 	#4
.8c93	d0 f8		bne $8c8d			bne 	_CCClear
.8c95	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c97					_CCCParam:
.8c97	b1 30		lda ($30),y			lda 	(codePtr),y
.8c99	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c9b	d0 09		bne $8ca6			bne 	_CCCRun6502
.8c9d	c8		iny				iny 								; skip comma
.8c9e	e8		inx				inx	 								; next level
.8c9f	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8ca2	e0 03		cpx #$03			cpx 	#3
.8ca4	90 f1		bcc $8c97			bcc 	_CCCParam 					; done all 3 ?
.8ca6					_CCCRun6502:
.8ca6	5a		phy				phy 								; save position
.8ca7	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8caa	85 37		sta $37				sta 	zTemp0+1
.8cac	ad 08 04	lda $0408			lda 	NSMantissa0
.8caf	85 36		sta $36				sta 	zTemp0
.8cb1	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8cb4	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8cb7	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8cba	20 bf 8c	jsr $8cbf			jsr 	_CCCZTemp0 					; call zTemp0
.8cbd	7a		ply				ply 								; restore position and exit
.8cbe	60		rts				rts
.8cbf					_CCCZTemp0:
.8cbf	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8cc2					ClearCommand:
.8cc2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8cc4	85 36		sta $36				sta 	0+zTemp0
.8cc6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cc8	85 37		sta $37				sta 	1+zTemp0
.8cca					_ClearZeroLoop:
.8cca	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8ccc	f0 24		beq $8cf2			beq 	_ClearZeroEnd
.8cce	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cd0	a9 00		lda #$00			lda 	#0
.8cd2					_ClearOneVariable:
.8cd2	91 36		sta ($36),y			sta 	(zTemp0),y
.8cd4	c8		iny				iny
.8cd5	c0 08		cpy #$08			cpy 	#8
.8cd7	d0 f9		bne $8cd2			bne 	_ClearOneVariable
.8cd9	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cdb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cdd	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cdf	d0 04		bne $8ce5			bne 	_ClearNotProcedure
.8ce1	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8ce3	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce5					_ClearNotProcedure:
.8ce5	18		clc				clc 								; go to the next variable
.8ce6	b2 36		lda ($36)			lda 	(zTemp0)
.8ce8	65 36		adc $36				adc 	zTemp0
.8cea	85 36		sta $36				sta 	zTemp0
.8cec	90 dc		bcc $8cca			bcc 	_ClearZeroLoop
.8cee	e6 37		inc $37				inc 	zTemp0+1
.8cf0	80 d8		bra $8cca			bra 	_ClearZeroLoop
.8cf2					_ClearZeroEnd:
.8cf2	18		clc				clc
.8cf3	a5 36		lda $36				lda 	zTemp0
.8cf5	69 01		adc #$01			adc 	#1
.8cf7	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cfa	a5 37		lda $37				lda 	zTemp0+1
.8cfc	69 00		adc #$00			adc 	#0
.8cfe	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8d01	20 21 a8	jsr $a821			jsr 	StackReset
.8d04	20 92 b8	jsr $b892			jsr 	StringSystemInitialise
.8d07	20 d6 99	jsr $99d6			jsr 	ProcedureScan
.8d0a	20 8f 95	jsr $958f			jsr 	Command_Restore
.8d0d	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8d10	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8d13	9c a0 04	stz $04a0			stz 	AssemblerControl
.8d16	20 a2 a3	jsr $a3a2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8d19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8d1a					ClearScreen:
.8d1a	5a		phy				phy
.8d1b	20 ea b6	jsr $b6ea			jsr 	EXTClearScreen
.8d1e	7a		ply				ply
.8d1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8d20					Command_Data:
.8d20	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8d22	a2 80		ldx #$80			ldx 	#KWC_EOL
.8d24	20 28 9a	jsr $9a28			jsr 	ScanForward
.8d27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d28					DimCommand:
.8d28	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2a	29 c0		and #$c0			and 	#$C0
.8d2c	c9 40		cmp #$40			cmp 	#$40
.8d2e	d0 7a		bne $8daa			bne 	_DCSyntax
.8d30	b1 30		lda ($30),y			lda 	(codePtr),y
.8d32	18		clc				clc
.8d33	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d35	85 3f		sta $3f				sta 	zaTemp+1
.8d37	c8		iny				iny
.8d38	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3a	c8		iny				iny
.8d3b	85 3e		sta $3e				sta 	zaTemp
.8d3d	5a		phy				phy
.8d3e	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d40	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d42	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d44	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d46	f0 62		beq $8daa			beq 	_DCSyntax
.8d48	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d4a	29 04		and #$04			and 	#NSBIsArray
.8d4c	f0 64		beq $8db2			beq 	_DCType
.8d4e	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d50	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d52	d0 59		bne $8dad			bne 	_DCRedefine
.8d54	7a		ply				ply
.8d55	20 b5 8d	jsr $8db5			jsr 	_DCGetSize 				; get array size, check it.
.8d58	5a		phy				phy
.8d59	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d5b	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d5d	7a		ply				ply 							; is there a second (e.g. ,x)
.8d5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d60	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d62	d0 0a		bne $8d6e			bne 	_DCOneDimension
.8d64	c8		iny				iny 							; skip comma
.8d65	20 b5 8d	jsr $8db5			jsr 	_DCGetSize 				; get 2nd array size
.8d68	5a		phy				phy
.8d69	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d6b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6d	7a		ply				ply
.8d6e					_DCOneDimension:
.8d6e	5a		phy				phy 							; save position
.8d6f	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d71	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d73	aa		tax				tax
.8d74	c8		iny				iny
.8d75	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d77	e8		inx				inx 							; bump them.
.8d78	1a		inc a				inc 	a
.8d79	20 d0 b3	jsr $b3d0			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d7c	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d7e	29 e0		and #$e0			and 	#$E0
.8d80	d0 23		bne $8da5			bne 	_DCSize
.8d82	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d84	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d86	20 c3 8d	jsr $8dc3			jsr 	ScaleByBaseType 		; scale by base type
.8d89	a5 36		lda $36				lda 	zTemp0
.8d8b	a6 37		ldx $37				ldx 	zTemp0+1
.8d8d	20 64 a3	jsr $a364			jsr 	AllocateXABytes 		; allocate memory
.8d90	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d92	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d94	c8		iny				iny
.8d95	8a		txa				txa
.8d96	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d98	7a		ply				ply 							; get position back
.8d99	20 46 af	jsr $af46			jsr 	CheckRightBracket 		; check )
.8d9c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9e	c8		iny				iny 							; consume in case
.8d9f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8da1	f0 85		beq $8d28			beq 	DimCommand
.8da3	88		dey				dey 							; undo consume
.8da4	60		rts				rts
.8da5					_DCSize:
.8da5	a9 16		lda #$16		lda	#22
.8da7	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.8daa					_DCSyntax:
.8daa	4c 34 b5	jmp $b534			jmp 	SyntaxError
.8dad					_DCRedefine:
.8dad	a9 15		lda #$15		lda	#21
.8daf	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.8db2					_DCType:
.8db2	4c 3e b5	jmp $b53e			jmp 	TypeError
.8db5					_DCGetSize:
.8db5	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8db7	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 	; get array dimension
.8dba	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8dbc	f0 e7		beq $8da5			beq 	_DCSize
.8dbe	c9 fe		cmp #$fe			cmp 	#254
.8dc0	f0 e3		beq $8da5			beq 	_DCSize
.8dc2	60		rts				rts
.8dc3					ScaleByBaseType:
.8dc3	29 10		and #$10			and 	#NSBIsString 			; is it string
.8dc5	d0 19		bne $8de0			bne 	_SBBTString
.8dc7	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8dc9	48		pha				pha
.8dca	a5 36		lda $36				lda 	zTemp0
.8dcc	48		pha				pha
.8dcd	06 36		asl $36				asl 	zTemp0 					; x 2
.8dcf	26 37		rol $37				rol 	zTemp0+1
.8dd1	06 36		asl $36				asl 	zTemp0 					; x 4
.8dd3	26 37		rol $37				rol 	zTemp0+1
.8dd5	68		pla				pla 							; add stacked value = x 5
.8dd6	65 36		adc $36				adc 	zTemp0
.8dd8	85 36		sta $36				sta 	zTemp0
.8dda	68		pla				pla
.8ddb	65 37		adc $37				adc 	zTemp0+1
.8ddd	85 37		sta $37				sta 	zTemp0+1
.8ddf	60		rts				rts
.8de0					_SBBTString:
.8de0	06 36		asl $36				asl 	zTemp0
.8de2	26 37		rol $37				rol 	zTemp0+1
.8de4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8de5					EndCommand:
.8de5	4c 29 8c	jmp $8c29			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8de8					UnaryEvent:
.8de8	fa		plx				plx
.8de9	20 15 98	jsr $9815			jsr 	TimerToStackX 				; timer in +0
.8dec	e8		inx				inx  								; put reference into +1
.8ded	20 af a1	jsr $a1af			jsr 	EvaluateTerm
.8df0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8df3	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8df5	d0 57		bne $8e4e			bne 	_UEType
.8df7	e8		inx				inx 								; put the step in +2
.8df8	20 4e af	jsr $af4e			jsr 	CheckComma
.8dfb	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.8dfe	20 46 af	jsr $af46			jsr 	CheckRightBracket
.8e01	ca		dex				dex
.8e02	ca		dex				dex
.8e03	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8e06	85 36		sta $36				sta 	zTemp0
.8e08	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8e0b	85 37		sta $37				sta 	zTemp0+1
.8e0d	5a		phy				phy
.8e0e	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8e10	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e12	30 36		bmi $8e4a			bmi 	_UEFalse 					; exit if signed.
.8e14	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8e16	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e19	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e1b	c8		iny				iny
.8e1c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e1f	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e21	c8		iny				iny
.8e22	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e25	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e27	90 21		bcc $8e4a			bcc 	_UEFalse 					; no, return FALSE.
.8e29	18		clc				clc
.8e2a	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e2f	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e32	91 36		sta ($36),y			sta 	(zTemp0),y
.8e34	c8		iny				iny
.8e35	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e38	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e3b	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3d	c8		iny				iny
.8e3e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e41	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e44	91 36		sta ($36),y			sta 	(zTemp0),y
.8e46	7a		ply				ply
.8e47	4c 3a 9b	jmp $9b3a			jmp 	ReturnTrue
.8e4a					_UEFalse:
.8e4a	7a		ply				ply 								; restore Y
.8e4b	4c 46 9b	jmp $9b46			jmp 	ReturnFalse 				; and return False
.8e4e					_UEType:
.8e4e	4c 3e b5	jmp $b53e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e51					ForCommand:
.8e51	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e53	20 bc a7	jsr $a7bc			jsr 	StackOpen
.8e56	a2 00		ldx #$00			ldx 	#0
.8e58	20 af a1	jsr $a1af			jsr 	EvaluateTerm
.8e5b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e5e	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e60	d0 49		bne $8eab			bne		_FCError
.8e62	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e64	20 56 af	jsr $af56			jsr 	CheckNextA
.8e67	e8		inx				inx
.8e68	20 6b a6	jsr $a66b			jsr 	EvaluateInteger 			; <from> in +1
.8e6b	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6d	c8		iny				iny 								; consume it
.8e6e	48		pha				pha 								; save on stack for later
.8e6f	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e71	f0 04		beq $8e77			beq 	_FCNoSyntax
.8e73	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e75	d0 37		bne $8eae			bne 	_FCSyntaxError
.8e77					_FCNoSyntax:
.8e77	e8		inx				inx
.8e78	20 6b a6	jsr $a66b			jsr 	EvaluateInteger
.8e7b	20 00 a8	jsr $a800			jsr 	STKSaveCodePosition 		; save loop back position
.8e7e	68		pla				pla 								; restore DOWNTO or TO
.8e7f	5a		phy				phy 								; save Y on the stack
.8e80	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e82	f0 02		beq $8e86			beq 	_FCNotDownTo
.8e84	a9 02		lda #$02			lda 	#2
.8e86					_FCNotDownTo:
.8e86	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e87	a0 10		ldy #$10			ldy 	#16
.8e89	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e8b	a0 06		ldy #$06			ldy 	#6
.8e8d	ad 08 04	lda $0408			lda 	NSMantissa0
.8e90	91 34		sta ($34),y			sta 	(basicStack),y
.8e92	ad 10 04	lda $0410			lda 	NSMantissa1
.8e95	c8		iny				iny
.8e96	91 34		sta ($34),y			sta 	(basicStack),y
.8e98	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e9a	a2 01		ldx #$01			ldx 	#1
.8e9c	20 b1 8e	jsr $8eb1			jsr 	FCIntegerToStack
.8e9f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8ea1	a2 02		ldx #$02			ldx 	#2
.8ea3	20 b1 8e	jsr $8eb1			jsr 	FCIntegerToStack
.8ea6	20 d1 8e	jsr $8ed1			jsr 	CopyIndexToReference
.8ea9	7a		ply				ply 								; restore position
.8eaa	60		rts				rts
.8eab					_FCError:
.8eab	4c 3e b5	jmp $b53e			jmp 	TypeError
.8eae					_FCSyntaxError:
.8eae	4c 34 b5	jmp $b534			jmp 	SyntaxError
.8eb1					FCIntegerToStack:
.8eb1	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8eb4	10 03		bpl $8eb9			bpl	 	_FCNotNegative
.8eb6	20 bd a6	jsr $a6bd			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8eb9					_FCNotNegative:
.8eb9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8ebc	91 34		sta ($34),y			sta 	(basicStack),y
.8ebe	c8		iny				iny
.8ebf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ec2	91 34		sta ($34),y			sta 	(basicStack),y
.8ec4	c8		iny				iny
.8ec5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ec8	91 34		sta ($34),y			sta 	(basicStack),y
.8eca	c8		iny				iny
.8ecb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ece	91 34		sta ($34),y			sta 	(basicStack),y
.8ed0	60		rts				rts
.8ed1					CopyIndexToReference:
.8ed1	5a		phy				phy
.8ed2	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ed4	38		sec				sec 								; (because we copy from offset 8)
.8ed5	b1 34		lda ($34),y			lda 	(basicStack),y
.8ed7	e9 08		sbc #$08			sbc 	#8
.8ed9	85 36		sta $36				sta 	zTemp0
.8edb	c8		iny				iny
.8edc	b1 34		lda ($34),y			lda 	(basicStack),y
.8ede	e9 00		sbc #$00			sbc 	#0
.8ee0	85 37		sta $37				sta 	zTemp0+1
.8ee2	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ee4	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ee6	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee8	0a		asl a				asl 	a 							; into carry
.8ee9	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8eeb	90 14		bcc $8f01			bcc 	_CITRNormal
.8eed	38		sec				sec
.8eee					_CITRNegative:
.8eee	a9 00		lda #$00			lda 	#0
.8ef0	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ef2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ef4	c8		iny				iny
.8ef5	ca		dex				dex
.8ef6	d0 f6		bne $8eee			bne 	_CITRNegative
.8ef8	88		dey				dey 								; look at MSB of mantissa
.8ef9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8efb	09 80		ora #$80			ora 	#$80
.8efd	91 36		sta ($36),y			sta 	(zTemp0),y
.8eff	7a		ply				ply
.8f00	60		rts				rts
.8f01					_CITRNormal:
.8f01	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8f03	91 36		sta ($36),y			sta 	(zTemp0),y
.8f05	c8		iny				iny
.8f06	ca		dex				dex
.8f07	d0 f8		bne $8f01			bne 	_CITRNormal
.8f09	7a		ply				ply 								; and exit.
.8f0a	60		rts				rts
.8f0b					NextCommand:
.8f0b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8f0d	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8f0f	20 e8 a7	jsr $a7e8			jsr 	StackCheckFrame
.8f12	5a		phy				phy
.8f13	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8f15	b1 34		lda ($34),y			lda 	(basicStack),y
.8f17	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8f19	30 02		bmi $8f1d			bmi 	_NCStepNeg
.8f1b	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8f1d					_NCStepNeg:
.8f1d	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8f1f	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8f21	18		clc				clc
.8f22					_NCBump:
.8f22	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8f24	91 34		sta ($34),y			sta 	(basicStack),y
.8f26	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f28	c8		iny				iny 								; next byte
.8f29	ca		dex				dex 								; do four times
.8f2a	d0 f6		bne $8f22			bne 	_NCBump
.8f2c	20 d1 8e	jsr $8ed1			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f2f	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f31	b1 34		lda ($34),y			lda 	(basicStack),y
.8f33	0a		asl a				asl 	a 							; sign bit to carry
.8f34	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f36	85 38		sta $38				sta 	zTemp1
.8f38	90 02		bcc $8f3c			bcc 	_NCCompRev 					; use if step is +ve
.8f3a	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f3c					_NCCompRev:
.8f3c	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f3e	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f40	85 39		sta $39				sta 	zTemp1+1
.8f42	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f44	38		sec				sec
.8f45					_NCCompare:
.8f45	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f47	b1 34		lda ($34),y			lda 	(basicStack),y
.8f49	a4 39		ldy $39				ldy 	zTemp1+1
.8f4b	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f4d	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f4f	e6 39		inc $39				inc 	zTemp1+1
.8f51	ca		dex				dex 								; do it 4 times.
.8f52	d0 f1		bne $8f45			bne 	_NCCompare
.8f54	50 02		bvc $8f58			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f56	49 80		eor #$80			eor 	#$80
.8f58					_NCNoOverflow:
.8f58	7a		ply				ply 								; restore Y position
.8f59	0a		asl a				asl 	a 							; is bit 7 set.
.8f5a	90 04		bcc $8f60			bcc 	_NCLoopback 				; if no , >= so loop back
.8f5c	20 da a7	jsr $a7da			jsr 	StackClose 					; exit the loop
.8f5f	60		rts				rts
.8f60					_NCLoopBack:
.8f60	20 11 a8	jsr $a811			jsr 	STKLoadCodePosition 		; loop back
.8f63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f64					RectangleCommand:
.8f64	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8f66	80 02		bra $8f6a			bra 	ShapeDrawCmd
.8f68					CircleCommand:
.8f68	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8f6a					ShapeDrawCmd:
.8f6a	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8f6d					ShapeDraw:
.8f6d	0d e4 06	ora $06e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f70	4c ec 8f	jmp $8fec			jmp 	ExecuteGraphicCommand	 	; and complete
.8f73					SpriteCommand:
.8f73	a2 00		ldx #$00			ldx 	#0
.8f75	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get image number.
.8f78	5a		phy				phy
.8f79	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8f7b	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f7e	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f80	b0 0d		bcs $8f8f			bcs 	_SCRange
.8f82	a0 ff		ldy #$ff			ldy 	#255
.8f84	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f87	a9 32		lda #$32			lda 	#25*2
.8f89	7a		ply				ply
.8f8a	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8f8d	80 5d		bra $8fec			bra 	ExecuteGraphicCommand
.8f8f					_SCRange:
.8f8f	4c 39 b5	jmp $b539			jmp 	RangeError
.8f92					ImageCommand:
.8f92	a2 00		ldx #$00			ldx 	#0
.8f94	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get image number.
.8f97	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8f9a					ImageRunDraw:
.8f9a	09 20		ora #$20			ora 	#16*2 						; move cursor
.8f9c	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f9f	ad ea 06	lda $06ea			lda 	gxDrawScale
.8fa2	0a		asl a				asl 	a
.8fa3	0a		asl a				asl 	a
.8fa4	0a		asl a				asl 	a
.8fa5	a8		tay				tay
.8fa6	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8fa8	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8fab	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8fae	60		rts				rts
.8faf					TextCommand:
.8faf	a2 00		ldx #$00			ldx 	#0
.8fb1	20 53 a6	jsr $a653			jsr 	EvaluateString 				; get text
.8fb4	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8fb7					TextRunDraw:
.8fb7	09 20		ora #$20			ora 	#16*2 						; move cursor
.8fb9	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8fbc	a0 00		ldy #$00			ldy 	#0
.8fbe					_IRDLoop:
.8fbe	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8fc1	85 37		sta $37				sta 	zTemp0+1
.8fc3	ad 08 04	lda $0408			lda 	NSMantissa0
.8fc6	85 36		sta $36				sta 	zTemp0
.8fc8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fca	f0 13		beq $8fdf			beq 	_IRDExit
.8fcc	5a		phy				phy									; save string pos
.8fcd	48		pha				pha 								; save char
.8fce	ad ea 06	lda $06ea			lda 	gxDrawScale 				; get scale
.8fd1	0a		asl a				asl 	a
.8fd2	0a		asl a				asl 	a
.8fd3	0a		asl a				asl 	a
.8fd4	a8		tay				tay
.8fd5	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8fd7	fa		plx				plx 								; char to draw
.8fd8	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8fdb	7a		ply				ply 								; restore string pos
.8fdc	c8		iny				iny
.8fdd	90 df		bcc $8fbe			bcc 	_IRDLoop 					; go back if no error.
.8fdf					_IRDExit:
.8fdf	60		rts				rts
.8fe0					PlotCommand:
.8fe0	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8fe2	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8fe5	80 05		bra $8fec			bra 	ExecuteGraphicCommand
.8fe7					LineCommand:
.8fe7	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8fe9	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8fec					ExecuteGraphicCommand:
.8fec	0d e3 06	ora $06e3			ora 	gxCommandID 				; make a full command
.8fef	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; draw it and exit
.8ff2	b0 01		bcs $8ff5			bcs 	_EGCError
.8ff4	60		rts				rts
.8ff5					_EGCError:
.8ff5	4c 34 b5	jmp $b534			jmp 	SyntaxError
.8ff8					RunGraphicsCommand:
.8ff8	8d e3 06	sta $06e3			sta 	gxCommandID					; save TODO graphics command.
.8ffb	68		pla				pla 								; pop handler address
.8ffc	fa		plx				plx
.8ffd	1a		inc a				inc 	a
.8ffe	d0 01		bne $9001			bne 	_RGINoCarry
.9000	e8		inx				inx
.9001					_RGINoCarry:
.9001	8d e8 06	sta $06e8			sta 	GXHandler
.9004	8e e9 06	stx $06e9			stx 	GXHandler+1
.9007					_RGICommandLoop:
.9007	b1 30		lda ($30),y			lda 	(codePtr),y
.9009	c8		iny				iny
.900a	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.900c	f0 53		beq $9061			beq 	_RGI_To
.900e	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.9010	f0 55		beq $9067			beq 	_RGI_Here
.9012	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.9014	f0 3d		beq $9053			beq 	_RGI_Exit
.9016	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9018	f0 39		beq $9053			beq 	_RGI_Exit
.901a	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.901c	f0 3e		beq $905c			beq 	_RGI_Frame
.901e	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.9020	f0 33		beq $9055			beq 	_RGI_Solid
.9022	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.9024	f0 4b		beq $9071			beq 	_RGI_By
.9026	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.9028	f0 17		beq $9041			beq 	_RGI_Move2
.902a	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.902c	f0 65		beq $9093			beq 	_RGI_Dim
.902e	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.9030	f0 78		beq $90aa			beq 	_RGI_Colour
.9032	c9 af		cmp #$af			cmp 	#KWD_COLOR
.9034	f0 74		beq $90aa			beq 	_RGI_Colour
.9036	ae e3 06	ldx $06e3			ldx 	gxCommandID
.9039	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.903b	d0 03		bne $9040			bne 	_RGI_Move 					; move
.903d	4c d4 90	jmp $90d4			jmp		_RGI_SpriteInstructions
.9040					_RGI_Move:
.9040	88		dey				dey 								; unpick get.
.9041					_RGI_Move2:
.9041	20 fa 90	jsr $90fa			jsr 	GCGetCoordinatePair 		; move to here
.9044	20 21 91	jsr $9121			jsr 	GCCopyPairToStore 			; save
.9047	5a		phy				phy
.9048	20 17 91	jsr $9117			jsr 	GCLoadAXY 					; load in
.904b	09 20		ora #$20			ora 	#16*2 						; move there
.904d	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9050	7a		ply				ply
.9051	80 b4		bra $9007			bra 	_RGICommandLoop 			; and go round
.9053					_RGI_Exit:
.9053	88		dey				dey 								; unpick : / EOL
.9054	60		rts				rts
.9055					_RGI_Solid:
.9055	a9 02		lda #$02			lda 	#2
.9057	8d e4 06	sta $06e4			sta 	gxFillSolid
.905a	80 ab		bra $9007			bra 	_RGICommandLoop
.905c					_RGI_Frame:
.905c	9c e4 06	stz $06e4			stz 	gxFillSolid
.905f	80 a6		bra $9007			bra 	_RGICommandLoop
.9061					_RGI_To:
.9061	20 fa 90	jsr $90fa			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.9064	20 21 91	jsr $9121			jsr 	GCCopyPairToStore
.9067					_RGI_Here:
.9067	5a		phy				phy
.9068	20 17 91	jsr $9117			jsr 	GCLoadAXY 					; load it into AXY
.906b	20 d1 90	jsr $90d1			jsr 	_RGICallHandler 			; go do whatever it is.
.906e	7a		ply				ply
.906f	80 96		bra $9007			bra 	_RGICommandLoop 			; and go round
.9071					_RGI_By:
.9071	20 07 91	jsr $9107			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.9074	18		clc				clc
.9075	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9078	6d e5 06	adc $06e5			adc 	gxxPos
.907b	8d e5 06	sta $06e5			sta 	gxXPos
.907e	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9081	6d e6 06	adc $06e6			adc 	gxxPos+1
.9084	8d e6 06	sta $06e6			sta 	gxXPos+1
.9087	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.908a	18		clc				clc
.908b	6d e7 06	adc $06e7			adc 	gxYPos
.908e	8d e7 06	sta $06e7			sta 	gxYPos
.9091	80 d4		bra $9067			bra 	_RGI_Here
.9093					_RGI_Dim:
.9093	a2 01		ldx #$01			ldx	 	#1
.9095	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger
.9098	ad 09 04	lda $0409			lda 	NSMantissa0+1
.909b	c9 00		cmp #$00			cmp 	#0
.909d	f0 2f		beq $90ce			beq 	_RGIRange
.909f	c9 09		cmp #$09			cmp 	#8+1
.90a1	b0 2b		bcs $90ce			bcs		_RGIRange
.90a3	3a		dec a				dec 	a
.90a4	8d ea 06	sta $06ea			sta 	gxDrawScale
.90a7	4c 07 90	jmp $9007			jmp 	_RGICommandLoop
.90aa					_RGI_Colour:
.90aa	a2 01		ldx #$01			ldx 	#1 							; colour
.90ac	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger
.90af	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.90b1	20 08 a7	jsr $a708			jsr 	NSMSetZero
.90b4	b1 30		lda ($30),y			lda 	(codePtr),y
.90b6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.90b8	d0 04		bne $90be			bne 	_RGICDefaultMode
.90ba	c8		iny				iny
.90bb	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger
.90be					_RGICDefaultMode:
.90be	5a		phy				phy
.90bf	a9 08		lda #$08			lda 	#4*2 						; set colour.
.90c1	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90c4	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90c7	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90ca	7a		ply				ply
.90cb	4c 07 90	jmp $9007			jmp 	_RGICommandLoop 			; and go round
.90ce					_RGIRange:
.90ce	4c 39 b5	jmp $b539			jmp 	RangeError
.90d1					_RGICallHandler:
.90d1	6c e8 06	jmp ($06e8)			jmp 	(GXHandler)
.90d4					_RGI_SpriteInstructions:
.90d4	c9 be		cmp #$be			cmp 	#KWD_OFF
.90d6	f0 07		beq $90df			beq 	_RGISpriteOff
.90d8	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.90da	f0 13		beq $90ef			beq 	_RGISetImage
.90dc	4c 40 90	jmp $9040			jmp 	_RGI_Move
.90df					_RGISpriteOff:
.90df	5a		phy				phy
.90e0	a0 01		ldy #$01			ldy 	#1
.90e2	a2 00		ldx #$00			ldx 	#0
.90e4					_RGIDoCommandLoop:
.90e4	a9 10		lda #$10			lda 	#8*2
.90e6	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90e9	7a		ply				ply
.90ea	b0 e2		bcs $90ce			bcs 	_RGIRange
.90ec	4c 07 90	jmp $9007			jmp 	_RGICommandLoop
.90ef					_RGISetImage:
.90ef	a2 01		ldx #$01			ldx 	#1
.90f1	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger
.90f4	5a		phy				phy
.90f5	aa		tax				tax
.90f6	a0 00		ldy #$00			ldy 	#0
.90f8	80 ea		bra $90e4			bra 	_RGIDoCommandLoop
.90fa					GCGetCoordinatePair:
.90fa	a2 01		ldx #$01			ldx 	#1
.90fc	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.90ff	20 4e af	jsr $af4e			jsr 	CheckComma
.9102	e8		inx				inx
.9103	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.9106	60		rts				rts
.9107					GCSignedCoordinatePair:
.9107	a2 01		ldx #$01			ldx 	#1
.9109	20 8c a6	jsr $a68c			jsr 	Evaluate16BitIntegerSigned
.910c	20 4e af	jsr $af4e			jsr 	CheckComma
.910f	e8		inx				inx
.9110	20 8c a6	jsr $a68c			jsr 	Evaluate16BitIntegerSigned
.9113	60		rts				rts
.9114					_GCCPRange:
.9114	4c 39 b5	jmp $b539			jmp 	RangeError
.9117					GCLoadAXY:
.9117	ad e6 06	lda $06e6			lda 	gxXPos+1
.911a	ae e5 06	ldx $06e5			ldx 	gxXPos
.911d	ac e7 06	ldy $06e7			ldy 	gxYPos
.9120	60		rts				rts
.9121					GCCopyPairToStore:
.9121	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9124	8d e5 06	sta $06e5			sta 	gxXPos
.9127	ad 11 04	lda $0411			lda 	NSMantissa1+1
.912a	8d e6 06	sta $06e6			sta 	gxXPos+1
.912d	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9130	8d e7 06	sta $06e7			sta 	gxYPos
.9133	60		rts				rts
.06e3					gxCommandID:
>06e3							.fill 	1
.06e4					gxFillSolid:
>06e4							.fill 	1
.06e5					gxXPos:
>06e5							.fill 	2
.06e7					gxYPos:
>06e7							.fill 	1
.06e8					gxHandler:
>06e8							.fill 	2
.06ea					gxDrawScale:
>06ea							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9134					BitmapCtrl:
.9134	b1 30		lda ($30),y			lda 	(codePtr),y
.9136	c8		iny				iny
.9137	a2 01		ldx #$01			ldx 	#1
.9139	c9 bf		cmp #$bf			cmp 	#KWD_ON
.913b	f0 11		beq $914e			beq 	BitmapSwitch
.913d	ca		dex				dex
.913e	c9 be		cmp #$be			cmp 	#KWD_OFF
.9140	f0 0c		beq $914e			beq 	BitmapSwitch
.9142	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get the colour
.9145	5a		phy				phy
.9146	aa		tax				tax
.9147	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9149	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.914c	7a		ply				ply
.914d	60		rts				rts
.914e					BitmapSwitch:
.914e	5a		phy				phy
.914f	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9151	a9 02		lda #$02			lda 	#1*2
.9153	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9156	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9158	a0 00		ldy #$00			ldy 	#0
.915a	a2 ff		ldx #$ff			ldx 	#$FF
.915c	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.915f	9c e4 06	stz $06e4			stz 	gxFillSolid
.9162	9c e5 06	stz $06e5			stz 	gxXPos
.9165	9c e6 06	stz $06e6			stz 	gxXPos+1
.9168	9c e7 06	stz $06e7			stz 	gxYPos
.916b	9c ea 06	stz $06ea			stz 	gxDrawScale
.916e	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9170	a2 00		ldx #$00			ldx 	#0
.9172	a0 00		ldy #$00			ldy 	#0
.9174	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9177	7a		ply				ply
.9178	60		rts				rts
.9179					SpritesCtrl:
.9179	b1 30		lda ($30),y			lda 	(codePtr),y
.917b	c8		iny				iny
.917c	a2 01		ldx #$01			ldx 	#1
.917e	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9180	f0 08		beq $918a			beq 	SpriteSwitch
.9182	ca		dex				dex
.9183	c9 be		cmp #$be			cmp 	#KWD_OFF
.9185	f0 03		beq $918a			beq 	SpriteSwitch
.9187	4c 34 b5	jmp $b534			jmp 	SyntaxError
.918a					SpriteSwitch:
.918a	5a		phy				phy
.918b	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.918d	a9 04		lda #$04			lda 	#2*2
.918f	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9192	7a		ply				ply
.9193	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.9194					GfxCommand:
.9194	a2 00		ldx #$00			ldx 	#0
.9196	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; command
.9199	20 4e af	jsr $af4e			jsr 	CheckComma
.919c	e8		inx				inx
.919d	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger 		; X
.91a0	20 4e af	jsr $af4e			jsr 	CheckComma
.91a3	e8		inx				inx
.91a4	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; Y
.91a7	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.91aa	4a		lsr a				lsr 	a
.91ab	d0 16		bne $91c3			bne 	_GfxError
.91ad	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.91b0	b0 11		bcs $91c3			bcs 	_GfxError 					; bit 7 should have been zero
.91b2	5a		phy				phy 								; save pos
.91b3	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.91b6	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.91b9	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.91bc	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.91bf	b0 02		bcs $91c3			bcs 	_GfxError
.91c1	7a		ply				ply 								; restore pos and exit.
.91c2	60		rts				rts
.91c3					_GfxError:
.91c3	4c 39 b5	jmp $b539			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.91c6					Command_GOSUB:
.91c6	a2 00		ldx #$00			ldx 	#0
.91c8	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91cb	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91cd	20 bc a7	jsr $a7bc			jsr 	StackOpen 					; create frame
.91d0	20 00 a8	jsr $a800			jsr 	STKSaveCodePosition 		; save current position
.91d3	4c e9 91	jmp $91e9			jmp 	GotoStackX
.91d6					Command_RETURN:
.91d6	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91d8	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91da	20 e8 a7	jsr $a7e8			jsr 	StackCheckFrame
.91dd	20 11 a8	jsr $a811			jsr 	STKLoadCodePosition 		; restore code position
.91e0	20 da a7	jsr $a7da			jsr 	StackClose
.91e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.91e4					GotoCommand:
.91e4	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.91e6	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.91e9					GotoStackX:
.91e9	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.91ec	48		pha				pha 								; it is slightly inefficient, just in cases.
.91ed	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91f0	fa		plx				plx
.91f1	20 67 a7	jsr $a767			jsr 	MemorySearch 				; transfer to line number AX.
.91f4	90 05		bcc $91fb			bcc 	_GotoError 					; not found, off end.
.91f6	d0 03		bne $91fb			bne 	_GotoError 					; not found exactly
.91f8	4c cc 95	jmp $95cc			jmp 	RunNewLine 					; and go straight to new line code.
.91fb					_GotoError:
.91fb	a9 0d		lda #$0d		lda	#13
.91fd	4c cd 9a	jmp $9acd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.9200					UnaryHit:
.9200	fa		plx				plx
.9201	a9 36		lda #$36			lda 	#zTemp0
.9203	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get sprite number 0
.9206	20 4e af	jsr $af4e			jsr 	CheckComma
.9209	e8		inx				inx
.920a	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get sprite number 1
.920d	20 46 af	jsr $af46			jsr		CheckRightBracket
.9210	ca		dex				dex 								; fix back up again.
.9211	da		phx				phx 								; save X/Y
.9212	5a		phy				phy
.9213	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.9216	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9219	aa		tax				tax
.921a	a9 12		lda #$12			lda 	#9*2 						; command 9
.921c	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; calculate result
.921f	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.9220	7a		ply				ply 								; restore XY
.9221	fa		plx				plx
.9222	20 0a a7	jsr $a70a			jsr 	NSMSetByte 					; return the hit result
.9225	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9226					IfCommand:
.9226	a2 00		ldx #$00			ldx 	#0 							; If what.
.9228	20 48 a6	jsr $a648			jsr 	EvaluateNumber
.922b	b1 30		lda ($30),y			lda 	(codePtr),y
.922d	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.922f	d0 0a		bne $923b			bne 	_IFStructured
.9231	c8		iny				iny 								; consume THEN
.9232	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero
.9235	f0 01		beq $9238			beq 	_IfFail 					; if fail, go to next line
.9237	60		rts				rts 								; if THEN just continue
.9238					_IfFail:
.9238	4c 31 96	jmp $9631			jmp 	EOLCommand
.923b					_IfStructured:
.923b	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero
.923e	d0 07		bne $9247			bne 	_IfExit 					; if not, then continue normally.
.9240	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.9242	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9244	20 28 9a	jsr $9a28			jsr 	ScanForward 				; and run from there/
.9247					_IfExit:
.9247	60		rts				rts
.9248					ElseCode:
.9248	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.924a	aa		tax				tax 								; so just go to the structure exit
.924b	20 28 9a	jsr $9a28			jsr 	ScanForward
.924e	60		rts				rts
.924f					EndIf:
.924f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.9250					UnaryJoyX:
.9250	18		clc				clc
.9251	80 01		bra $9254			bra 	JoyMain
.9253					UnaryJoyY:
.9253	38		sec				sec
.9254					JoyMain:
.9254	fa		plx				plx 								; get pos
.9255	08		php				php 								; save carry (set for Y)
.9256	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9259	20 46 af	jsr $af46			jsr 	CheckRightBracket
.925c	20 31 b7	jsr $b731			jsr 	EXTReadController 			; read the controller.
.925f	28		plp				plp
.9260	90 02		bcc $9264			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9262	4a		lsr a				lsr 	a
.9263	4a		lsr a				lsr 	a
.9264					_JMNoShift:
.9264	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9265	b0 0a		bcs $9271			bcs 	_JMIsRight
.9267	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9268	b0 04		bcs $926e			bcs 	_JMIsLeft
.926a	20 08 a7	jsr $a708			jsr 	NSMSetZero 					; zero result
.926d	60		rts				rts
.926e					_JMIsLeft:
.926e	4c 3a 9b	jmp $9b3a			jmp 	ReturnTrue
.9271					_JMIsRight:
.9271	a9 01		lda #$01			lda 	#1
.9273	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.9276	60		rts				rts
.9277					UnaryJoyB:
.9277	fa		plx				plx 								; get pos
.9278	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.927b	20 46 af	jsr $af46			jsr 	CheckRightBracket
.927e	20 31 b7	jsr $b731			jsr 	EXTReadController 			; read the controller.
.9281	4a		lsr a				lsr 	a
.9282	4a		lsr a				lsr 	a
.9283	4a		lsr a				lsr 	a
.9284	4a		lsr a				lsr 	a
.9285	29 01		and #$01			and 	#1
.9287	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.928a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.928b					LetCommand:
.928b	a2 00		ldx #$00			ldx 	#0
.928d	b1 30		lda ($30),y			lda 	(codePtr),y
.928f	c9 10		cmp #$10			cmp 	#KWD_AT
.9291	d0 16		bne $92a9			bne 	_LCStandard
.9293	c8		iny				iny 								; skip equal
.9294	20 af a1	jsr $a1af			jsr 	EvaluateTerm 				; get a number
.9297	20 f3 9f	jsr $9ff3			jsr 	Dereference 				; dereference it
.929a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.929d	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.929f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92a2	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.92a4	d0 10		bne $92b6			bne 	_LCMain
.92a6	4c 3e b5	jmp $b53e			jmp 	TypeError 					; was a reference before.
.92a9					_LCStandard:
.92a9	ad c6 9e	lda $9ec6			lda 	PrecedenceLevel+"*"			; precedence > this
.92ac	20 e0 9e	jsr $9ee0			jsr 	EvaluateExpressionAtPrecedence
.92af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.92b2	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.92b4	f0 0e		beq $92c4			beq 	_LetGoProc 					; it's a procedure call.
.92b6					_LCMain:
.92b6	a9 3d		lda #$3d			lda 	#"=" 						; check =
.92b8	20 56 af	jsr $af56			jsr 	CheckNextA
.92bb	e8		inx				inx 								; RHS
.92bc	20 3f a6	jsr $a63f			jsr 	EvaluateValue
.92bf	ca		dex				dex
.92c0	20 c7 92	jsr $92c7			jsr 	AssignVariable
.92c3	60		rts				rts
.92c4					_LetGoProc:
.92c4	4c a7 94	jmp $94a7			jmp 	CallProcedure
.92c7					AssignVariable:
.92c7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.92ca	48		pha				pha 								; save a copy
.92cb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.92ce	29 10		and #$10			and 	#NSBIsString
.92d0	d0 0b		bne $92dd			bne 	_ASError
.92d2	68		pla				pla 								; get back
.92d3	29 10		and #$10			and 	#NSBIsString 				; check type
.92d5	d0 03		bne $92da			bne 	_ASString
.92d7	4c 1b 9f	jmp $9f1b			jmp 	AssignNumber
.92da					_ASString:
.92da	4c 89 9f	jmp $9f89			jmp 	AssignString
.92dd					_ASError:
.92dd	4c 3e b5	jmp $b53e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.92e0					Command_List:
.92e0	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.92e3	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.92e6	9c 14 04	stz $0414			stz 	NSMantissa1+4
.92e9	a9 ff		lda #$ff			lda 	#$FF
.92eb	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.92ee	8d 17 04	sta $0417			sta 	NSMantissa1+7
.92f1	b1 30		lda ($30),y			lda 	(codePtr),y
.92f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92f5	f0 1e		beq $9315			beq 	_CLSecond
.92f7	20 73 93	jsr $9373			jsr 	CLIsDigit 					; if not digit, list all
.92fa	b0 24		bcs $9320			bcs 	_CLStart
.92fc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.92fe	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.9301	b1 30		lda ($30),y			lda 	(codePtr),y
.9303	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9305	f0 0e		beq $9315			beq 	_CLSecond 					; if so go get it
.9307	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.930a	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.930d	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9310	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9313	80 0b		bra $9320			bra 	_CLStart
.9315					_CLSecond:
.9315	c8		iny				iny 								; consume comma
.9316	20 73 93	jsr $9373			jsr 	CLIsDigit 					; digit found
.9319	b0 05		bcs $9320			bcs 	_CLStart 					; if not, continue listing
.931b	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.931d	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger
.9320					_CLStart
.9320	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9322	85 30		sta $30				sta 	codePtr
.9324	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9326	85 31		sta $31				sta 	codePtr+1
.9328					_CLLoop:
.9328	20 2e b7	jsr $b72e			jsr 	EXTBreakCheck 				; break check
.932b	f0 30		beq $935d			beq 	_CLExit
.932d	b2 30		lda ($30)			lda 	(codePtr)
.932f	f0 2c		beq $935d			beq 	_CLExit
.9331	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9333	20 60 93	jsr $9360			jsr 	CLCompareLineNo
.9336	90 18		bcc $9350			bcc 	_CLNext
.9338	a2 07		ldx #$07			ldx 	#7
.933a	20 60 93	jsr $9360			jsr 	CLCompareLineNo
.933d	f0 02		beq $9341			beq 	_CLDoThisOne
.933f	b0 0f		bcs $9350			bcs 	_CLNext
.9341					_CLDoThisOne:
.9341	20 2d 98	jsr $982d			jsr 	ListConvertLine 			; convert line into token Buffer
.9344	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9346	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9348	20 26 9b	jsr $9b26			jsr 	PrintStringXA
.934b	a9 0d		lda #$0d			lda 	#13 						; new line
.934d	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.9350					_CLNext:
.9350	18		clc				clc
.9351	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9353	65 30		adc $30				adc 	codePtr
.9355	85 30		sta $30				sta 	codePtr
.9357	90 02		bcc $935b			bcc 	_CREExit
.9359	e6 31		inc $31				inc 	codePtr+1
.935b					_CREExit:
.935b	80 cb		bra $9328			bra 	_CLLoop
.935d					_CLExit:
.935d	4c 29 8c	jmp $8c29			jmp 	WarmStart
.9360					CLCompareLineNo:
.9360	38		sec				sec
.9361	a0 01		ldy #$01			ldy 	#1
.9363	b1 30		lda ($30),y			lda 	(codePtr),y
.9365	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9368	85 36		sta $36				sta 	zTemp0
.936a	c8		iny				iny
.936b	b1 30		lda ($30),y			lda 	(codePtr),y
.936d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9370	05 36		ora $36				ora 	zTemp0
.9372	60		rts				rts
.9373					CLIsDigit:
.9373	b1 30		lda ($30),y			lda 	(codePtr),y
.9375	c9 30		cmp #$30			cmp 	#"0"
.9377	90 03		bcc $937c			bcc	 	_CLIDExitFalse
.9379	c9 3a		cmp #$3a			cmp 	#"9"+1
.937b	60		rts				rts
.937c					_CLIDExitFalse:
.937c	38		sec				sec
.937d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.937e					Command_LOCAL:
.937e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9380	20 8c 93	jsr $938c			jsr 	LocaliseNextTerm 			; convert term to a local.
.9383	b1 30		lda ($30),y			lda 	(codePtr),y
.9385	c8		iny				iny
.9386	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9388	f0 f4		beq $937e			beq 	Command_LOCAL
.938a	88		dey				dey 								; unpick pre-get
.938b	60		rts				rts
.938c					LocaliseNextTerm:
.938c	20 af a1	jsr $a1af			jsr 	EvaluateTerm 				; evaluate the term
.938f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9392	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9394	f0 69		beq $93ff			beq		_LNTError
.9396	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9399	85 36		sta $36				sta 	zTemp0
.939b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.939e	85 37		sta $37				sta  	zTemp0+1
.93a0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93a3	29 10		and #$10			and 	#NSBIsString
.93a5	d0 22		bne $93c9			bne 	_LNTPushString
.93a7	5a		phy				phy
.93a8	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.93aa					_LNTPushNumLoop:
.93aa	b1 36		lda ($36),y			lda		(zTemp0),y
.93ac	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93af	a9 00		lda #$00			lda 	#0
.93b1	91 36		sta ($36),y			sta 	(zTemp0),y
.93b3	c8		iny				iny
.93b4	c0 05		cpy #$05			cpy 	#5
.93b6	d0 f2		bne $93aa			bne 	_LNTPushNumLoop
.93b8	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.93ba	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93bd	a5 37		lda $37				lda 	zTemp0+1
.93bf	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93c2	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.93c4	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93c7	7a		ply				ply
.93c8	60		rts				rts
.93c9					_LNTPushString:
.93c9	5a		phy				phy
.93ca	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.93cc	85 38		sta $38				sta 	zTemp1
.93ce	a0 01		ldy #$01			ldy 	#1
.93d0	b1 36		lda ($36),y			lda 	(zTemp0),y
.93d2	85 39		sta $39				sta 	zTemp1+1
.93d4	a0 00		ldy #$00			ldy 	#0 							; output string
.93d6	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.93d8	f0 0a		beq $93e4			beq 	_LNTStringOut
.93da					_LNTPushStrLoop:
.93da	b1 38		lda ($38),y			lda 	(zTemp1),y
.93dc	f0 06		beq $93e4			beq 	_LNTStringOut
.93de	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93e1	c8		iny				iny
.93e2	80 f6		bra $93da			bra 	_LNTPushStrLoop
.93e4					_LNTStringOut:
.93e4	98		tya				tya									; output length
.93e5	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93e8	a9 00		lda #$00			lda 	#0 							; clear original string.
.93ea	92 38		sta ($38)			sta 	(zTemp1)
.93ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.93ef	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93f2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93f5	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93f8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.93fa	20 9a a7	jsr $a79a			jsr 	StackPushByte
.93fd	7a		ply				ply
.93fe	60		rts				rts
.93ff					_LNTError:
.93ff	4c 34 b5	jmp $b534			jmp 	SyntaxError
.aeed					LocalPopValue:
.aeed	20 b3 a7	jsr $a7b3			jsr 	StackPopByte
.aef0	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.aef2	d0 17		bne $af0b			bne 	_LPVString
.aef4	20 b3 a7	jsr $a7b3			jsr 	StackPopByte 				; address
.aef7	85 37		sta $37				sta 	zTemp0+1
.aef9	20 b3 a7	jsr $a7b3			jsr 	StackPopByte
.aefc	85 36		sta $36				sta 	zTemp0
.aefe	5a		phy				phy
.aeff	a0 04		ldy #$04			ldy 	#4 							; copy back
.af01					_LPVNumberCopy:
.af01	20 b3 a7	jsr $a7b3			jsr 	StackPopByte
.af04	91 36		sta ($36),y			sta 	(zTemp0),y
.af06	88		dey				dey
.af07	10 f8		bpl $af01			bpl 	_LPVNumberCopy
.af09	7a		ply				ply 								; and complete
.af0a	60		rts				rts
.af0b					_LPVString:
.af0b	20 b3 a7	jsr $a7b3			jsr 	StackPopByte 				; address of record => zTemp0
.af0e	85 37		sta $37				sta 	zTemp0+1
.af10	20 b3 a7	jsr $a7b3			jsr 	StackPopByte
.af13	85 36		sta $36				sta 	zTemp0
.af15	5a		phy				phy
.af16	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.af18	85 38		sta $38				sta 	zTemp1
.af1a	a0 01		ldy #$01			ldy 	#1
.af1c	b1 36		lda ($36),y			lda 	(zTemp0),y
.af1e	85 39		sta $39				sta 	zTemp1+1
.af20	20 b3 a7	jsr $a7b3			jsr 	StackPopByte 				; # to get => y
.af23	a8		tay				tay
.af24	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.af26	f0 0e		beq $af36			beq 	_LPVStringCopied
.af28	a9 00		lda #$00			lda 	#0 							; NULL on end
.af2a	91 38		sta ($38),y			sta 	(zTemp1),y
.af2c					_LPVStringCopy:
.af2c	88		dey				dey
.af2d	30 07		bmi $af36			bmi 	_LPVStringCopied
.af2f	20 b3 a7	jsr $a7b3			jsr 	StackPopByte
.af32	91 38		sta ($38),y			sta 	(zTemp1),y
.af34	80 f6		bra $af2c			bra 	_LPVStringCopy
.af36					_LPVStringCopied:
.af36	fa		plx				plx
.af37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9402					NewCommand:
.9402	20 45 a7	jsr $a745			jsr 	MemoryNew
.9405	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9408	20 c2 8c	jsr $8cc2			jsr 	ClearCommand 				; clear everything.
.940b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/palette.asm

.940c					PaletteCommand:
.940c	a2 00		ldx #$00			ldx 	#0
.940e	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; colour
.9411	20 4e af	jsr $af4e			jsr 	CheckComma
.9414	e8		inx				inx
.9415	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger 		; r
.9418	20 4e af	jsr $af4e			jsr 	CheckComma
.941b	e8		inx				inx
.941c	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; g
.941f	20 4e af	jsr $af4e			jsr 	CheckComma
.9422	e8		inx				inx
.9423	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; b
.9426	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.9429	85 36		sta $36				sta 	zTemp0
.942b	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.942d	85 37		sta $37				sta 	zTemp0+1
.942f	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.9431	26 37		rol $37				rol	 	zTemp0+1
.9433	06 36		asl $36				asl 	zTemp0
.9435	26 37		rol $37				rol	 	zTemp0+1
.9437	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.9439	85 01		sta $01				sta 	1
.943b	5a		phy				phy
.943c	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.943f	92 36		sta ($36)			sta 	(zTemp0)
.9441	a0 01		ldy #$01			ldy 	#1
.9443	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9446	91 36		sta ($36),y			sta 	(zTemp0),y
.9448	ad 09 04	lda $0409			lda 	NSMantissa0+1
.944b	c8		iny				iny
.944c	91 36		sta ($36),y			sta 	(zTemp0),y
.944e	7a		ply				ply
.944f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9450					Command_Print:
.9450	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9451					_CPLoop:
.9451	08		php				php 								; save last action flag
.9452	b1 30		lda ($30),y			lda 	(codePtr),y
.9454	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9456	f0 46		beq $949e			beq 	_CPExit
.9458	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.945a	f0 42		beq $949e			beq 	_CPExit
.945c	68		pla				pla 								; throw last action flag
.945d	b1 30		lda ($30),y			lda 	(codePtr),y
.945f	c8		iny				iny
.9460	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9462	f0 37		beq $949b			beq 	_CPContinueWithSameLine
.9464	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9466	f0 2e		beq $9496			beq 	_CPTab
.9468	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.946a	f0 26		beq $9492			beq 	_CPNewLine
.946c	88		dey				dey 								; undo the get.
.946d	a2 00		ldx #$00			ldx 	#0
.946f	20 3f a6	jsr $a63f			jsr 	EvaluateValue 				; get a value into slot 0
.9472	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9475	29 10		and #$10			and 	#NSBIsString
.9477	f0 0b		beq $9484			beq 	_CPNumber
.9479	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.947c	ad 08 04	lda $0408			lda 	NSMantissa0
.947f	20 26 9b	jsr $9b26			jsr 	PrintStringXA
.9482	80 cc		bra $9450			bra 	Command_Print 				; loop round clearing carry so NL if end
.9484					_CPNumber:
.9484	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9486	20 15 a5	jsr $a515			jsr 	ConvertNumberToString 		; convert to string
.9489	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.948b	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.948d	20 26 9b	jsr $9b26			jsr 	PrintStringXA
.9490	80 be		bra $9450			bra 	Command_Print 				; loop round clearing carry so NL if end
.9492					_CPNewLine:
.9492	a9 0d		lda #$0d			lda 	#13
.9494	80 02		bra $9498			bra 	_CPPrintChar
.9496					_CPTab:
.9496	a9 09		lda #$09			lda 	#9 							; print TAB
.9498					_CPPrintChar:
.9498	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.949b					_CPContinueWithSameLine:
.949b	38		sec				sec 								; loop round with carry set, which
.949c	80 b3		bra $9451			bra 	_CPLoop 					; will inhibit final CR
.949e					_CPExit:
.949e	28		plp				plp 								; get last action flag
.949f	b0 05		bcs $94a6			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.94a1	a9 0d		lda #$0d			lda 	#13 						; print new line
.94a3	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.94a6					_CPExit2:
.94a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.94a7					CallProcedure:
.94a7	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.94a9	b1 30		lda ($30),y			lda 	(codePtr),y
.94ab	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.94ad	f0 0c		beq $94bb			beq 	_CPEndParam
.94af					_CPParamLoop:
.94af	20 3f a6	jsr $a63f			jsr 	EvaluateValue 				; get parameter onto stack
.94b2	e8		inx				inx 								; bump next stack
.94b3	b1 30		lda ($30),y			lda 	(codePtr),y
.94b5	c8		iny				iny
.94b6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.94b8	f0 f5		beq $94af			beq 	_CPParamLoop
.94ba	88		dey				dey 								; unpick.
.94bb					_CPEndParam:
.94bb	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.94be	c8		iny				iny									; skip right bracket
.94bf	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.94c1	20 bc a7	jsr $a7bc			jsr 	StackOpen
.94c4	20 00 a8	jsr $a800			jsr 	STKSaveCodePosition 		; save loop position
.94c7	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.94ca	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.94cc	ad 10 04	lda $0410			lda 	NSMantissa1
.94cf	85 37		sta $37				sta 	zTemp0+1
.94d1	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.94d3	b2 36		lda ($36)			lda 	(zTemp0)
.94d5	85 30		sta $30				sta 	safePtr
.94d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d9	85 31		sta $31				sta 	safePtr+1
.94db	c8		iny				iny
.94dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.94de	85 32		sta $32				sta 	safePtr+2
.94e0	c8		iny				iny
.94e1	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e3	85 33		sta $33				sta 	safePtr+3
.94e5	c8		iny				iny 								; get Y offset -> Y
.94e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e8	a8		tay				tay
.94e9	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.94eb	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.94ee	f0 13		beq $9503			beq 	_ParamExit 					; if so, exit.
.94f0					_ParamExtract:
.94f0	ca		dex				dex 								; put a local term on the level before
.94f1	20 8c 93	jsr $938c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.94f4	20 c7 92	jsr $92c7			jsr 	AssignVariable 				; assign stacked value to the variable.
.94f7	e8		inx				inx 								; advance to next parameter to do.
.94f8	e8		inx				inx
.94f9	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.94fc	f0 05		beq $9503			beq 	_ParamExit
.94fe	20 4e af	jsr $af4e			jsr 	CheckComma 					; comma seperating parameters
.9501	80 ed		bra $94f0			bra 	_ParamExtract
.9503					_ParamExit:
.9503	20 46 af	jsr $af46			jsr 	CheckRightBracket 			; check )
.9506	60		rts				rts 								; and continue from here
.af38					Command_ENDPROC:
.af38	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.af3a	a2 14		ldx #$14			ldx 	#ERRID_PROC
.af3c	20 e8 a7	jsr $a7e8			jsr 	StackCheckFrame
.af3f	20 11 a8	jsr $a811			jsr 	STKLoadCodePosition 		; restore code position
.af42	20 da a7	jsr $a7da			jsr 	StackClose
.af45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9507					Command_Read:
.9507	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9509	20 af a1	jsr $a1af			jsr 	EvaluateTerm
.950c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.950f	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9511	f0 4a		beq $955d			beq 	_CRSyntax 					; check reference (bit 0)
.9513	20 a6 95	jsr $95a6			jsr 	SwapDataCodePtrs 			; swap code and data
.9516	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9519	d0 20		bne $953b			bne 	_CRContinueData
.951b					_CRKeepSearching:
.951b	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.951d	aa		tax				tax
.951e	20 28 9a	jsr $9a28			jsr 	ScanForward
.9521	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.9523	f0 16		beq $953b			beq 	_CRHaveData 				; found it
.9525	18		clc				clc
.9526	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9528	65 30		adc $30				adc 	codePtr
.952a	85 30		sta $30				sta 	codePtr
.952c	90 02		bcc $9530			bcc 	_CREExit
.952e	e6 31		inc $31				inc 	codePtr+1
.9530					_CREExit:
.9530	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9532	b2 30		lda ($30)			lda 	(codePtr)
.9534	d0 e5		bne $951b			bne 	_CRKeepSearching
.9536	a9 0b		lda #$0b		lda	#11
.9538	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.953b					_CRHaveData:
.953b					_CRContinueData:
.953b	a2 01		ldx #$01			ldx 	#1
.953d	20 3f a6	jsr $a63f			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9540	ca		dex				dex
.9541	20 c7 92	jsr $92c7			jsr		AssignVariable 				; do the assignment
.9544	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9547	b1 30		lda ($30),y			lda 	(codePtr),y
.9549	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.954b	d0 04		bne $9551			bne 	_CRSwapBack
.954d	c8		iny				iny 								; consume comma
.954e	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9551					_CRSwapBack:
.9551	20 a6 95	jsr $95a6			jsr 	SwapDataCodePtrs			; swap them back.
.9554	b1 30		lda ($30),y			lda 	(codePtr),y
.9556	c8		iny				iny
.9557	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9559	f0 ac		beq $9507			beq 	Command_Read 				; if so go round again.
.955b	88		dey				dey 								; unpick get.
.955c	60		rts				rts
.955d					_CRSyntax:
.955d	4c 34 b5	jmp $b534			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9560					RemCommand:
.9560	b1 30		lda ($30),y			lda 	(codePtr),y
.9562	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9564	d0 06		bne $956c			bne 	_RMExit
.9566	c8		iny				iny
.9567	98		tya				tya
.9568	38		sec				sec
.9569	71 30		adc ($30),y			adc 	(codePtr),y
.956b	a8		tay				tay
.956c					_RMExit:
.956c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.956d					Command_REPEAT:
.956d	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.956f	20 bc a7	jsr $a7bc			jsr 	StackOpen
.9572	20 00 a8	jsr $a800			jsr 	STKSaveCodePosition 		; save loop position
.9575	60		rts				rts
.9576					Command_UNTIL:
.9576	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9578	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.957a	20 e8 a7	jsr $a7e8			jsr 	StackCheckFrame
.957d	a2 00		ldx #$00			ldx 	#0
.957f	20 48 a6	jsr $a648			jsr 	EvaluateNumber 				; work out the number
.9582	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; check if zero
.9585	f0 04		beq $958b			beq 	_CULoopBack 				; if so keep looping
.9587	20 da a7	jsr $a7da			jsr 	StackClose		 			; return
.958a	60		rts				rts
.958b					_CULoopBack:
.958b	20 11 a8	jsr $a811			jsr 	STKLoadCodePosition 		; loop back
.958e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.958f					Command_Restore:
.958f	20 a6 95	jsr $95a6			jsr 	SwapDataCodePtrs 			; swap code and data
.9592	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9594	85 30		sta $30				sta 	codePtr
.9596	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9598	85 31		sta $31				sta 	codePtr+1
.959a	20 a6 95	jsr $95a6			jsr 	SwapDataCodePtrs 			; put them back
.959d	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.959f	8d 9b 04	sta $049b			sta 	dataPointer+4
.95a2	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.95a5	60		rts				rts
.95a6					SwapDataCodePtrs:
.95a6	da		phx				phx
.95a7	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.95a9					_SDCPLoop:
.95a9	b5 30		lda $30,x			lda 	safePtr,x
.95ab	48		pha				pha
.95ac	bd 97 04	lda $0497,x			lda 	dataPointer,x
.95af	95 30		sta $30,x			sta 	safePtr,x
.95b1	68		pla				pla
.95b2	9d 97 04	sta $0497,x			sta 	dataPointer,x
.95b5	ca		dex				dex
.95b6	10 f1		bpl $95a9			bpl 	_SDCPLoop
.95b8	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.95bb	8c 9b 04	sty $049b			sty 	dataPointer+4
.95be	a8		tay				tay
.95bf	fa		plx				plx
.95c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.95c1					CommandRUN:
.95c1	20 c2 8c	jsr $8cc2			jsr 	ClearCommand 				; clear variable/stacks/etc.
.95c4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95c6	85 30		sta $30				sta 	codePtr
.95c8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95ca	85 31		sta $31				sta 	codePtr+1
.95cc					RUNNewLine:
.95cc	b2 30		lda ($30)			lda 	(codePtr)
.95ce	f0 5e		beq $962e			beq 	CRNoProgram         		; no then END.
.95d0	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.95d2	9a		txs				txs
.95d3					RUNCodePointerLine:
.95d3	a0 02		ldy #$02			ldy 	#2 							; start of program
.95d5					_CRIncMainLoop:
.95d5	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.95d8	d0 05		bne $95df			bne 	_CRNoBreakCheck
.95da	20 2e b7	jsr $b72e			jsr 	EXTBreakCheck 				; break check
.95dd	f0 4a		beq $9629			beq 	_CRBreak
.95df					_CRNoBreakCheck:
.95df	c8		iny				iny
.95e0					_CRMainLoop:
.95e0	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.95e3	b1 30		lda ($30),y			lda 	(codePtr),y
.95e5	10 10		bpl $95f7			bpl 	_CRNotKeyword
.95e7	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95e9	b0 04		bcs $95ef			bcs 	_CRIsKeyword
.95eb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.95ed	b0 34		bcs $9623			bcs		_CRSyntaxError
.95ef					_CRIsKeyword:
.95ef	c8		iny				iny 								; consume command
.95f0	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.95f1	aa		tax				tax 								; put in X for vector jump
.95f2	20 26 96	jsr $9626			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.95f5	80 e9		bra $95e0			bra 	_CRMainLoop 				; and loop round
.95f7					_CRNotKeyword:
.95f7	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.95f9	f0 da		beq $95d5			beq 	_CRIncMainLoop
.95fb	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.95fd	90 05		bcc $9604			bcc 	_CRNotVariable
.95ff					_CRGoLet:
.95ff	20 8b 92	jsr $928b			jsr 	LetCommand
.9602	80 dc		bra $95e0			bra 	_CRMainLoop
.9604					_CRNotVariable:
.9604	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9606	f0 f7		beq $95ff			beq 	_CRGoLet
.9608	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.960a	f0 f3		beq $95ff			beq 	_CRGoLet
.960c	c9 21		cmp #$21			cmp 	#KWD_PLING
.960e	f0 ef		beq $95ff			beq 	_CRGoLet
.9610	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9612	f0 09		beq $961d			beq 	_CRGoRem
.9614	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9616	d0 0b		bne $9623			bne 	_CRSyntaxError
.9618	20 62 8b	jsr $8b62			jsr 	LabelHere
.961b	80 c3		bra $95e0			bra 	_CRMainLoop
.961d					_CRGoRem:
.961d	c8		iny				iny
.961e	20 60 95	jsr $9560			jsr 	RemCommand
.9621	80 bd		bra $95e0			bra 	_CRMainLoop
.9623					_CRSyntaxError:
.9623	4c 34 b5	jmp $b534			jmp 	SyntaxError
.9626					_CRCallVector0:
.9626	7c d2 96	jmp ($96d2,x)			jmp 	(VectorSet0,x)
.9629					_CRBreak:
.9629	a9 01		lda #$01		lda	#1
.962b	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.962e					CRNoProgram:
.962e	4c e5 8d	jmp $8de5			jmp 	EndCommand
.9631					EOLCommand:
.9631	18		clc				clc
.9632	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9634	65 30		adc $30				adc 	codePtr
.9636	85 30		sta $30				sta 	codePtr
.9638	90 02		bcc $963c			bcc 	_CREExit
.963a	e6 31		inc $31				inc 	codePtr+1
.963c					_CREExit:
.963c	80 8e		bra $95cc			bra 	RunNewLine
.963e					Shift1Command:
.963e	b1 30		lda ($30),y			lda 	(codePtr),y
.9640	c8		iny				iny
.9641	0a		asl a				asl 	a
.9642	aa		tax				tax
.9643	7c 6a 97	jmp ($976a,x)			jmp 	(VectorSet1,x)
.9646					Shift2Command:
.9646	b1 30		lda ($30),y			lda 	(codePtr),y
.9648	c8		iny				iny
.9649	0a		asl a				asl 	a
.964a	aa		tax				tax
.964b	7c 84 97	jmp ($9784,x)			jmp 	(VectorSet2,x)
.964e					Unused1:
.964e					Unused2:
.964e					Unused3:
.964e					Unused4:
.964e	4c 34 b5	jmp $b534			jmp 	SyntaxError
>9651							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9652					VectorSetPunc:
>9652	77 9c					.word	ShiftLeft                        ; $00 <<
>9654	71 9b					.word	BinaryCompareLessEqual           ; $01 <=
>9656	67 9b					.word	BinaryCompareNotEqual            ; $02 <>
>9658	34 b5					.word	SyntaxError                      ; $03 !!3
>965a	34 b5					.word	SyntaxError                      ; $04 ><
>965c	7b 9b					.word	BinaryCompareGreaterEqual        ; $05 >=
>965e	7a 9c					.word	ShiftRight                       ; $06 >>
>9660	34 b5					.word	SyntaxError                      ; $07 !!7
>9662	34 b5					.word	SyntaxError                      ; $08 !!8
>9664	34 b5					.word	SyntaxError                      ; $09 !!9
>9666	34 b5					.word	SyntaxError                      ; $0a !!10
>9668	34 b5					.word	SyntaxError                      ; $0b !!11
>966a	34 b5					.word	SyntaxError                      ; $0c !!12
>966c	34 b5					.word	SyntaxError                      ; $0d !!13
>966e	34 b5					.word	SyntaxError                      ; $0e !!14
>9670	34 b5					.word	SyntaxError                      ; $0f !!15
>9672	34 b5					.word	SyntaxError                      ; $10 @
>9674	34 b5					.word	SyntaxError                      ; $11 !!17
>9676	34 b5					.word	SyntaxError                      ; $12 !!18
>9678	34 b5					.word	SyntaxError                      ; $13 [
>967a	5f af					.word	IntegerDivide                    ; $14 \
>967c	34 b5					.word	SyntaxError                      ; $15 ]
>967e	08 9e					.word	EorInteger                       ; $16 ^
>9680	34 b5					.word	SyntaxError                      ; $17 _
>9682	34 b5					.word	SyntaxError                      ; $18 `
>9684	34 b5					.word	SyntaxError                      ; $19 !!25
>9686	34 b5					.word	SyntaxError                      ; $1a !!26
>9688	34 b5					.word	SyntaxError                      ; $1b {
>968a	c2 9d					.word	OraInteger                       ; $1c |
>968c	34 b5					.word	SyntaxError                      ; $1d }
>968e	34 b5					.word	SyntaxError                      ; $1e ~
>9690	34 b5					.word	SyntaxError                      ; $1f [7m<7F>[m
>9692	34 b5					.word	SyntaxError                      ; $20
>9694	4e 9e					.word	WordIndirect                     ; $21 !
>9696	34 b5					.word	SyntaxError                      ; $22 "
>9698	34 b5					.word	SyntaxError                      ; $23 #
>969a	34 b5					.word	SyntaxError                      ; $24 $
>969c	ac af					.word	IntegerModulus                   ; $25 %
>969e	7c 9d					.word	AndInteger                       ; $26 &
>96a0	34 b5					.word	SyntaxError                      ; $27 '
>96a2	34 b5					.word	SyntaxError                      ; $28 (
>96a4	34 b5					.word	SyntaxError                      ; $29 )
>96a6	21 b0					.word	MulInteger                       ; $2a *
>96a8	0e 9d					.word	AddInteger                       ; $2b +
>96aa	34 b5					.word	SyntaxError                      ; $2c ,
>96ac	51 9d					.word	SubInteger                       ; $2d -
>96ae	34 b5					.word	SyntaxError                      ; $2e .
>96b0	c0 b1					.word	FDivideCommand                   ; $2f /
>96b2	34 b5					.word	SyntaxError                      ; $30 0
>96b4	34 b5					.word	SyntaxError                      ; $31 1
>96b6	34 b5					.word	SyntaxError                      ; $32 2
>96b8	34 b5					.word	SyntaxError                      ; $33 3
>96ba	34 b5					.word	SyntaxError                      ; $34 4
>96bc	34 b5					.word	SyntaxError                      ; $35 5
>96be	34 b5					.word	SyntaxError                      ; $36 6
>96c0	34 b5					.word	SyntaxError                      ; $37 7
>96c2	34 b5					.word	SyntaxError                      ; $38 8
>96c4	34 b5					.word	SyntaxError                      ; $39 9
>96c6	34 b5					.word	SyntaxError                      ; $3a :
>96c8	34 b5					.word	SyntaxError                      ; $3b ;
>96ca	53 9b					.word	BinaryCompareLess                ; $3c <
>96cc	49 9b					.word	BinaryCompareEqual               ; $3d =
>96ce	5d 9b					.word	BinaryCompareGreater             ; $3e >
>96d0	75 9e					.word	ByteIndirect                     ; $3f ?
.96d2					VectorSet0:
>96d2	31 96					.word	EOLCommand                       ; $80 !0:EOF
>96d4	3e 96					.word	Shift1Command                    ; $81 !1:SH1
>96d6	46 96					.word	Shift2Command                    ; $82 !2:SH2
>96d8	06 b3					.word	AbsUnary                         ; $83 ABS(
>96da	45 a3					.word	AllocUnary                       ; $84 ALLOC(
>96dc	16 b3					.word	AscUnary                         ; $85 ASC(
>96de	c6 a4					.word	ChrUnary                         ; $86 CHR$(
>96e0	e8 8d					.word	UnaryEvent                       ; $87 EVENT(
>96e2	45 9b					.word	UnaryFalse                       ; $88 FALSE
>96e4	23 b3					.word	FracUnary                        ; $89 FRAC(
>96e6	00 92					.word	UnaryHit                         ; $8a HIT(
>96e8	39 b3					.word	IntUnary                         ; $8b INT(
>96ea	8f b3					.word	IsValUnary                       ; $8c ISVAL(
>96ec	77 92					.word	UnaryJoyB                        ; $8d JOYB(
>96ee	50 92					.word	UnaryJoyX                        ; $8e JOYX(
>96f0	53 92					.word	UnaryJoyY                        ; $8f JOYY(
>96f2	a0 a5					.word	Unary_Left                       ; $90 LEFT$(
>96f4	4b b3					.word	LenUnary                         ; $91 LEN(
>96f6	b9 a3					.word	Unary_Max                        ; $92 MAX(
>96f8	ca a5					.word	Unary_Mid                        ; $93 MID$(
>96fa	b5 a3					.word	Unary_Min                        ; $94 MIN(
>96fc	10 a4					.word	Unary_Not                        ; $95 NOT(
>96fe	26 a4					.word	Unary_Random                     ; $96 RANDOM(
>9700	b0 a5					.word	Unary_Right                      ; $97 RIGHT$(
>9702	45 a4					.word	Unary_Rnd                        ; $98 RND(
>9704	65 b3					.word	SgnUnary                         ; $99 SGN(
>9706	d8 a4					.word	SpcUnary                         ; $9a SPC(
>9708	f3 a4					.word	Unary_Str                        ; $9b STR$(
>970a	11 98					.word	UnaryTimer                       ; $9c TIMER(
>970c	39 9b					.word	UnaryTrue                        ; $9d TRUE
>970e	85 b3					.word	ValUnary                         ; $9e VAL(
>9710	51 8e					.word	ForCommand                       ; $9f FOR
>9712	26 92					.word	IfCommand                        ; $a0 IF
>9714	4e 96					.word	Unused1                          ; $a1 PROC
>9716	6d 95					.word	Command_REPEAT                   ; $a2 REPEAT
>9718	9e 9a					.word	Command_WHILE                    ; $a3 WHILE
>971a	4f 92					.word	EndIf                            ; $a4 ENDIF
>971c	38 af					.word	Command_ENDPROC                  ; $a5 ENDPROC
>971e	0b 8f					.word	NextCommand                      ; $a6 NEXT
>9720	4e 96					.word	Unused4                          ; $a7 THEN
>9722	76 95					.word	Command_UNTIL                    ; $a8 UNTIL
>9724	bf 9a					.word	Command_WEND                     ; $a9 WEND
>9726	34 b5					.word	SyntaxError                      ; $aa BY
>9728	88 8c					.word	CallCommand                      ; $ab CALL
>972a	68 8f					.word	CircleCommand                    ; $ac CIRCLE
>972c	c2 8c					.word	ClearCommand                     ; $ad CLEAR
>972e	1a 8d					.word	ClearScreen                      ; $ae CLS
>9730	34 b5					.word	SyntaxError                      ; $af COLOR
>9732	34 b5					.word	SyntaxError                      ; $b0 COLOUR
>9734	20 8d					.word	Command_Data                     ; $b1 DATA
>9736	28 8d					.word	DimCommand                       ; $b2 DIM
>9738	4e 96					.word	Unused3                          ; $b3 DOWNTO
>973a	48 92					.word	ElseCode                         ; $b4 ELSE
>973c	34 b5					.word	SyntaxError                      ; $b5 FROM
>973e	94 91					.word	GfxCommand                       ; $b6 GFX
>9740	c6 91					.word	Command_GOSUB                    ; $b7 GOSUB
>9742	e4 91					.word	GotoCommand                      ; $b8 GOTO
>9744	34 b5					.word	SyntaxError                      ; $b9 HERE
>9746	92 8f					.word	ImageCommand                     ; $ba IMAGE
>9748	8b 92					.word	LetCommand                       ; $bb LET
>974a	e7 8f					.word	LineCommand                      ; $bc LINE
>974c	7e 93					.word	Command_LOCAL                    ; $bd LOCAL
>974e	34 b5					.word	SyntaxError                      ; $be OFF
>9750	34 b5					.word	SyntaxError                      ; $bf ON
>9752	34 b5					.word	SyntaxError                      ; $c0 OUTLINE
>9754	0c 94					.word	PaletteCommand                   ; $c1 PALETTE
>9756	e0 8f					.word	PlotCommand                      ; $c2 PLOT
>9758	50 94					.word	Command_Print                    ; $c3 PRINT
>975a	07 95					.word	Command_Read                     ; $c4 READ
>975c	64 8f					.word	RectangleCommand                 ; $c5 RECT
>975e	60 95					.word	RemCommand                       ; $c6 REM
>9760	d6 91					.word	Command_RETURN                   ; $c7 RETURN
>9762	34 b5					.word	SyntaxError                      ; $c8 SOLID
>9764	73 8f					.word	SpriteCommand                    ; $c9 SPRITE
>9766	af 8f					.word	TextCommand                      ; $ca TEXT
>9768	4e 96					.word	Unused2                          ; $cb TO
.976a					VectorSet1:
>976a	34 b5					.word	SyntaxError                      ; $80 !0:EOF
>976c	34 b5					.word	SyntaxError                      ; $81 !1:SH1
>976e	34 b5					.word	SyntaxError                      ; $82 !2:SH2
>9770	59 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>9772	78 8c					.word	AssertCommand                    ; $84 ASSERT
>9774	34 91					.word	BitmapCtrl                       ; $85 BITMAP
>9776	e5 8d					.word	EndCommand                       ; $86 END
>9778	e0 92					.word	Command_List                     ; $87 LIST
>977a	02 94					.word	NewCommand                       ; $88 NEW
>977c	8f 95					.word	Command_Restore                  ; $89 RESTORE
>977e	c1 95					.word	CommandRUN                       ; $8a RUN
>9780	79 91					.word	SpritesCtrl                      ; $8b SPRITES
>9782	0c 98					.word	StopCommand                      ; $8c STOP
.9784					VectorSet2:
>9784	34 b5					.word	SyntaxError                      ; $80 !0:EOF
>9786	34 b5					.word	SyntaxError                      ; $81 !1:SH1
>9788	34 b5					.word	SyntaxError                      ; $82 !2:SH2
>978a	f3 b3					.word	Assemble_adc                     ; $83 ADC
>978c	eb b3					.word	Assemble_and                     ; $84 AND
>978e	07 b4					.word	Assemble_asl                     ; $85 ASL
>9790	71 b4					.word	Assemble_bcc                     ; $86 BCC
>9792	75 b4					.word	Assemble_bcs                     ; $87 BCS
>9794	7d b4					.word	Assemble_beq                     ; $88 BEQ
>9796	34 b4					.word	Assemble_bit                     ; $89 BIT
>9798	65 b4					.word	Assemble_bmi                     ; $8a BMI
>979a	79 b4					.word	Assemble_bne                     ; $8b BNE
>979c	61 b4					.word	Assemble_bpl                     ; $8c BPL
>979e	81 b4					.word	Assemble_bra                     ; $8d BRA
>97a0	85 b4					.word	Assemble_brk                     ; $8e BRK
>97a2	69 b4					.word	Assemble_bvc                     ; $8f BVC
>97a4	6d b4					.word	Assemble_bvs                     ; $90 BVS
>97a6	8d b4					.word	Assemble_clc                     ; $91 CLC
>97a8	e1 b4					.word	Assemble_cld                     ; $92 CLD
>97aa	a1 b4					.word	Assemble_cli                     ; $93 CLI
>97ac	d1 b4					.word	Assemble_clv                     ; $94 CLV
>97ae	ff b3					.word	Assemble_cmp                     ; $95 CMP
>97b0	48 b4					.word	Assemble_cpx                     ; $96 CPX
>97b2	43 b4					.word	Assemble_cpy                     ; $97 CPY
>97b4	25 b4					.word	Assemble_dec                     ; $98 DEC
>97b6	dd b4					.word	Assemble_dex                     ; $99 DEX
>97b8	b9 b4					.word	Assemble_dey                     ; $9a DEY
>97ba	ef b3					.word	Assemble_eor                     ; $9b EOR
>97bc	2a b4					.word	Assemble_inc                     ; $9c INC
>97be	ed b4					.word	Assemble_inx                     ; $9d INX
>97c0	d9 b4					.word	Assemble_iny                     ; $9e INY
>97c2	5c b4					.word	Assemble_jmp                     ; $9f JMP
>97c4	57 b4					.word	Assemble_jsr                     ; $a0 JSR
>97c6	fb b3					.word	Assemble_lda                     ; $a1 LDA
>97c8	20 b4					.word	Assemble_ldx                     ; $a2 LDX
>97ca	3e b4					.word	Assemble_ldy                     ; $a3 LDY
>97cc	11 b4					.word	Assemble_lsr                     ; $a4 LSR
>97ce	f1 b4					.word	Assemble_nop                     ; $a5 NOP
>97d0	e7 b3					.word	Assemble_ora                     ; $a6 ORA
>97d2	9d b4					.word	Assemble_pha                     ; $a7 PHA
>97d4	89 b4					.word	Assemble_php                     ; $a8 PHP
>97d6	e5 b4					.word	Assemble_phx                     ; $a9 PHX
>97d8	a5 b4					.word	Assemble_phy                     ; $aa PHY
>97da	ad b4					.word	Assemble_pla                     ; $ab PLA
>97dc	91 b4					.word	Assemble_plp                     ; $ac PLP
>97de	f9 b4					.word	Assemble_plx                     ; $ad PLX
>97e0	b5 b4					.word	Assemble_ply                     ; $ae PLY
>97e2	0c b4					.word	Assemble_rol                     ; $af ROL
>97e4	16 b4					.word	Assemble_ror                     ; $b0 ROR
>97e6	99 b4					.word	Assemble_rti                     ; $b1 RTI
>97e8	a9 b4					.word	Assemble_rts                     ; $b2 RTS
>97ea	03 b4					.word	Assemble_sbc                     ; $b3 SBC
>97ec	95 b4					.word	Assemble_sec                     ; $b4 SEC
>97ee	f5 b4					.word	Assemble_sed                     ; $b5 SED
>97f0	b1 b4					.word	Assemble_sei                     ; $b6 SEI
>97f2	f7 b3					.word	Assemble_sta                     ; $b7 STA
>97f4	e9 b4					.word	Assemble_stp                     ; $b8 STP
>97f6	1b b4					.word	Assemble_stx                     ; $b9 STX
>97f8	39 b4					.word	Assemble_sty                     ; $ba STY
>97fa	2f b4					.word	Assemble_stz                     ; $bb STZ
>97fc	cd b4					.word	Assemble_tax                     ; $bc TAX
>97fe	c9 b4					.word	Assemble_tay                     ; $bd TAY
>9800	52 b4					.word	Assemble_trb                     ; $be TRB
>9802	4d b4					.word	Assemble_tsb                     ; $bf TSB
>9804	d5 b4					.word	Assemble_tsx                     ; $c0 TSX
>9806	bd b4					.word	Assemble_txa                     ; $c1 TXA
>9808	c5 b4					.word	Assemble_txs                     ; $c2 TXS
>980a	c1 b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.980c					StopCommand:
.980c	a9 08		lda #$08		lda	#8
.980e	4c cd 9a	jmp $9acd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.9811					UnaryTimer:
.9811	fa		plx				plx
.9812	20 46 af	jsr $af46			jsr 	CheckRightBracket
.9815					TimerToStackX:
.9815	20 08 a7	jsr $a708			jsr 	NSMSetZero 					; zero result
.9818	64 01		stz $01				stz 	1 							; access I/O
.981a	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.981d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9820	ad 5a d6	lda $d65a			lda 	$D65A
.9823	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9826	ad 5b d6	lda $d65b			lda 	$D65B
.9829	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.982c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.982d					ListConvertLine:
.982d	9c 9d 04	stz $049d			stz 	tbOffset
.9830	9c aa 04	stz $04aa			stz 	tokenBuffer
.9833	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9835	b1 30		lda ($30),y			lda 	(codePtr),y
.9837	aa		tax				tax
.9838	88		dey				dey
.9839	b1 30		lda ($30),y			lda 	(codePtr),y
.983b	20 a2 b0	jsr $b0a2			jsr 	ConvertInt16
.983e	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9840	86 37		stx $37				stx 	zTemp0+1
.9842	a0 00		ldy #$00			ldy 	#0
.9844					_LCCopyNumber:
.9844	b1 36		lda ($36),y			lda 	(zTemp0),y
.9846	20 72 99	jsr $9972			jsr 	LCLWrite
.9849	c8		iny				iny
.984a	b1 36		lda ($36),y			lda 	(zTemp0),y
.984c	d0 f6		bne $9844			bne 	_LCCopyNumber
.984e	20 8b 9a	jsr $9a8b			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.9851	48		pha				pha 								; save on stack
.9852	10 0c		bpl $9860			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9854	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9855	6d a6 04	adc $04a6			adc 	listIndent
.9858	8d a6 04	sta $04a6			sta 	listIndent
.985b	10 03		bpl $9860			bpl 	_LCNoAdjust
.985d	9c a6 04	stz $04a6			stz 	listIndent
.9860					_LCNoAdjust:
.9860	18		clc				clc		 							; work out actual indent.
.9861	ad a6 04	lda $04a6			lda 	listIndent
.9864	0a		asl a				asl 	a
.9865	69 06		adc #$06			adc 	#6
.9867	85 36		sta $36				sta 	zTemp0
.9869					_LCPadOut:
.9869	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.986b	20 72 99	jsr $9972			jsr 	LCLWrite
.986e	ad 9d 04	lda $049d			lda 	tbOffset
.9871	c5 36		cmp $36				cmp 	zTemp0
.9873	d0 f4		bne $9869			bne 	_LCPadOut
.9875	a0 03		ldy #$03			ldy 	#3 							; start position.
.9877					_LCMainLoop:
.9877	b1 30		lda ($30),y			lda 	(codePtr),y
.9879	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.987b	f0 17		beq $9894			beq 	_LCExit
.987d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.987f	90 1e		bcc $989f			bcc 	_LCDoubles
.9881	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9883	90 2a		bcc $98af			bcc 	_LCShiftPunc
.9885	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9887	90 35		bcc $98be			bcc 	_LCPunctuation
.9889	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.988b	90 3e		bcc $98cb			bcc 	_LCIdentifiers
.988d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.988f	90 5a		bcc $98eb			bcc 	_LCTokens
.9891	4c 46 99	jmp $9946			jmp 	_LCData 					; 254-5 are data objects
.9894					_LCExit:
.9894	68		pla				pla 								; get old indent adjust
.9895	30 07		bmi $989e			bmi 	_LCExit2
.9897	18		clc				clc 								; add to indent if +ve
.9898	6d a6 04	adc $04a6			adc 	listIndent
.989b	8d a6 04	sta $04a6			sta 	listIndent
.989e					_LCExit2:
.989e	60		rts				rts
.989f					_LCDoubles:
.989f	48		pha				pha
.98a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.98a1	29 02		and #$02			and 	#2
.98a3	09 3c		ora #$3c			ora 	#60 						; make < >
.98a5	20 72 99	jsr $9972			jsr 	LCLWrite
.98a8	68		pla				pla 								; restore, do lower bit
.98a9	29 03		and #$03			and 	#3
.98ab	09 3c		ora #$3c			ora 	#60
.98ad	80 0f		bra $98be			bra		_LCPunctuation 				; print, increment, loop
.98af					_LCShiftPunc:
.98af	aa		tax				tax 								; save in X
.98b0	29 07		and #$07			and 	#7 							; lower 3 bits
.98b2	f0 02		beq $98b6			beq 	_LCNoAdd
.98b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.98b6					_LCNoAdd:
.98b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.98b8	90 02		bcc $98bc			bcc 	_LCNoAdd2
.98ba	09 20		ora #$20			ora 	#32 						; adds $20
.98bc					_LCNoAdd2:
.98bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.98be					_LCPunctuation:
.98be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.98c0	d0 03		bne $98c5			bne 	_LCPContinue
.98c2	20 81 99	jsr $9981			jsr 	LCDeleteLastSpace
.98c5					_LCPContinue:
.98c5	c8		iny				iny 								; consume character
.98c6	20 72 99	jsr $9972			jsr 	LCLWrite 					; write it out.
.98c9	80 ac		bra $9877			bra 	_LCMainLoop 				; go round again.
.98cb					_LCIdentifiers:
.98cb	18		clc				clc 								; convert to physical address
.98cc	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98ce	85 37		sta $37				sta 	zTemp0+1
.98d0	c8		iny				iny
.98d1	b1 30		lda ($30),y			lda 	(codePtr),y
.98d3	85 36		sta $36				sta 	zTemp0
.98d5	c8		iny				iny
.98d6	5a		phy				phy 								; save position
.98d7	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.98d9					_LCOutIdentifier:
.98d9	c8		iny				iny
.98da	b1 36		lda ($36),y			lda 	(zTemp0),y
.98dc	29 7f		and #$7f			and 	#$7F
.98de	20 c0 99	jsr $99c0			jsr 	LCLLowerCase
.98e1	20 72 99	jsr $9972			jsr 	LCLWrite
.98e4	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.98e6	10 f1		bpl $98d9			bpl 	_LCOutIdentifier
.98e8	7a		ply				ply 								; restore position
.98e9	80 8c		bra $9877			bra 	_LCMainLoop
.98eb					_LCTokens:
.98eb	aa		tax				tax 								; token in X
.98ec	a9 f2		lda #$f2			lda 	#((KeywordSet2) & $FF)
.98ee	85 36		sta $36				sta 	0+zTemp0
.98f0	a9 aa		lda #$aa			lda 	#((KeywordSet2) >> 8)
.98f2	85 37		sta $37				sta 	1+zTemp0
.98f4	e0 82		cpx #$82			cpx 	#$82
.98f6	f0 16		beq $990e			beq 	_LCUseShift
.98f8	a9 a4		lda #$a4			lda 	#((KeywordSet1) & $FF)
.98fa	85 36		sta $36				sta 	0+zTemp0
.98fc	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.98fe	85 37		sta $37				sta 	1+zTemp0
.9900	e0 81		cpx #$81			cpx 	#$81
.9902	f0 0a		beq $990e			beq 	_LCUseShift
.9904	a9 bf		lda #$bf			lda 	#((KeywordSet0) & $FF)
.9906	85 36		sta $36				sta 	0+zTemp0
.9908	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.990a	85 37		sta $37				sta 	1+zTemp0
.990c	80 01		bra $990f			bra 	_LCNoShift
.990e					_LCUseShift:
.990e	c8		iny				iny
.990f					_LCNoShift:
.990f	20 95 99	jsr $9995			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9912	b1 30		lda ($30),y			lda 	(codePtr),y
.9914	aa		tax				tax 								; into X
.9915					_LCFindText:
.9915	ca		dex				dex
.9916	10 0e		bpl $9926			bpl 	_LCFoundText 				; found text.
.9918	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.991a	1a		inc a				inc 	a 							; one extra for size
.991b	38		sec				sec 								; one extra for checksum
.991c	65 36		adc $36				adc 	zTemp0 						; go to next token
.991e	85 36		sta $36				sta 	zTemp0
.9920	90 f3		bcc $9915			bcc 	_LCFindText
.9922	e6 37		inc $37				inc 	zTemp0+1
.9924	80 ef		bra $9915			bra 	_LCFindText
.9926					_LCFoundText:
.9926	5a		phy				phy 								; save List position
.9927	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9929	aa		tax				tax
.992a	a0 02		ldy #$02			ldy 	#2
.992c					_LCCopyToken:
.992c	b1 36		lda ($36),y			lda 	(zTemp0),y
.992e	20 c0 99	jsr $99c0			jsr 	LCLLowerCase
.9931	20 72 99	jsr $9972			jsr 	LCLWrite
.9934	c8		iny				iny
.9935	ca		dex				dex
.9936	d0 f4		bne $992c			bne 	_LCCopyToken
.9938	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.993a	f0 05		beq $9941			beq 	_LCNoSpace
.993c	a9 20		lda #$20			lda 	#' '
.993e	20 72 99	jsr $9972			jsr 	LCLWrite
.9941					_LCNoSpace:
.9941	7a		ply				ply 								; restore position.
.9942	c8		iny				iny 								; consume token
.9943	4c 77 98	jmp $9877			jmp 	_LCMainLoop 				; and go around again.
.9946					_LCData:
.9946	48		pha				pha 								; save type $FE/$FF
.9947	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9949	c9 fe		cmp #$fe			cmp 	#$FE
.994b	f0 02		beq $994f			beq 	_LCHaveOpener
.994d	a2 22		ldx #$22			ldx 	#'"'
.994f					_LCHaveOpener:
.994f	8a		txa				txa 								; output prefix (# or ")
.9950	20 72 99	jsr $9972			jsr 	LCLWrite
.9953	c8		iny				iny 								; get count
.9954	b1 30		lda ($30),y			lda 	(codePtr),y
.9956	aa		tax				tax
.9957	c8		iny				iny 								; point at first character
.9958					_LCOutData:
.9958	b1 30		lda ($30),y			lda 	(codePtr),y
.995a	c9 00		cmp #$00			cmp 	#0
.995c	f0 03		beq $9961			beq 	_LCNoPrint
.995e	20 72 99	jsr $9972			jsr 	LCLWrite
.9961					_LCNoPrint:
.9961	c8		iny				iny
.9962	ca		dex				dex
.9963	d0 f3		bne $9958			bne 	_LCOutData
.9965	68		pla				pla 								; closing " required ?
.9966	c9 ff		cmp #$ff			cmp 	#$FF
.9968	d0 05		bne $996f			bne 	_LCNoQuote
.996a	a9 22		lda #$22			lda 	#'"'
.996c	20 72 99	jsr $9972			jsr 	LCLWrite
.996f					_LCNoQuote:
.996f	4c 77 98	jmp $9877			jmp 	_LCMainLoop
.9972					LCLWrite:
.9972	da		phx				phx
.9973	ae 9d 04	ldx $049d			ldx 	tbOffset
.9976	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9979	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.997c	ee 9d 04	inc $049d			inc 	tbOffset
.997f	fa		plx				plx
.9980	60		rts				rts
.9981					LCDeleteLastSpace:
.9981	48		pha				pha
.9982	da		phx				phx
.9983	ae 9d 04	ldx $049d			ldx 	tbOffset
.9986	f0 0a		beq $9992			beq 	_LCDLSExit
.9988	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.998b	c9 20		cmp #$20			cmp 	#' '
.998d	d0 03		bne $9992			bne 	_LCDLSExit
.998f	ce 9d 04	dec $049d			dec 	tbOffset
.9992					_LCDLSExit:
.9992	fa		plx				plx
.9993	68		pla				pla
.9994	60		rts				rts
.9995					LCCheckSpaceRequired:
.9995	ae 9d 04	ldx $049d			ldx 	tbOffset
.9998	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.999b	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.999d	f0 1b		beq $99ba			beq 	_LCCSRSpace
.999f	c9 29		cmp #$29			cmp 	#')'
.99a1	f0 17		beq $99ba			beq 	_LCCSRSpace
.99a3	c9 23		cmp #$23			cmp 	#'#'
.99a5	f0 13		beq $99ba			beq 	_LCCSRSpace
.99a7	20 c0 99	jsr $99c0			jsr 	LCLLowerCase 				; saves a little effort
.99aa	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.99ac	90 11		bcc $99bf			bcc 	_LCCSRExit
.99ae	c9 3a		cmp #$3a			cmp 	#"9"+1
.99b0	90 08		bcc $99ba			bcc 	_LCCSRSpace
.99b2	c9 61		cmp #$61			cmp 	#"a"
.99b4	90 09		bcc $99bf			bcc 	_LCCSRExit
.99b6	c9 7b		cmp #$7b			cmp 	#"z"+1
.99b8	b0 05		bcs $99bf			bcs 	_LCCSRExit
.99ba					_LCCSRSpace:
.99ba	a9 20		lda #$20			lda 	#' '
.99bc	20 72 99	jsr $9972			jsr 	LCLWrite
.99bf					_LCCSRExit:
.99bf	60		rts				rts
.99c0					LCLLowerCase:
.99c0	c9 41		cmp #$41			cmp 	#"A"
.99c2	90 06		bcc $99ca			bcc 	_LCLLCOut
.99c4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.99c6	b0 02		bcs $99ca			bcs 	_LCLLCOut
.99c8	69 20		adc #$20			adc 	#$20
.99ca					_LCLLCOut:
.99ca	60		rts				rts
.99cb					LCLUpperCase:
.99cb	c9 61		cmp #$61			cmp 	#"a"
.99cd	90 06		bcc $99d5			bcc 	_LCLUCOut
.99cf	c9 7b		cmp #$7b			cmp 	#"z"+1
.99d1	b0 02		bcs $99d5			bcs 	_LCLUCOut
.99d3	e9 1f		sbc #$1f			sbc 	#$1F
.99d5					_LCLUCOut:
.99d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.99d6					ProcedureScan:
.99d6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99d8	85 30		sta $30				sta 	codePtr
.99da	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99dc	85 31		sta $31				sta 	codePtr+1
.99de					_PSLoop:
.99de	b2 30		lda ($30)			lda 	(codePtr)
.99e0	f0 42		beq $9a24			beq 	_PSExit
.99e2	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.99e4	b1 30		lda ($30),y			lda 	(codePtr),y
.99e6	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.99e8	d0 2d		bne $9a17			bne 	_PSNext
.99ea	c8		iny				iny 								; get the address of the record to zTemp0 and
.99eb	b1 30		lda ($30),y			lda 	(codePtr),y
.99ed	29 c0		and #$c0			and 	#$C0
.99ef	c9 40		cmp #$40			cmp 	#$40
.99f1	d0 32		bne $9a25			bne 	_PSSyntax
.99f3	b1 30		lda ($30),y			lda 	(codePtr),y
.99f5	18		clc				clc
.99f6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.99f8	85 37		sta $37				sta 	zTemp0+1
.99fa	c8		iny				iny 								; LSB
.99fb	b1 30		lda ($30),y			lda 	(codePtr),y
.99fd	85 36		sta $36				sta 	zTemp0
.99ff	c8		iny				iny 								; character after variable call.
.9a00	98		tya				tya 								; save Y offset at +7
.9a01	a0 07		ldy #$07			ldy 	#7
.9a03	91 36		sta ($36),y			sta 	(zTemp0),y
.9a05	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9a07	a0 02		ldy #$02			ldy 	#2
.9a09	91 36		sta ($36),y			sta 	(zTemp0),y
.9a0b	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9a0d					_PSCopy:
.9a0d	b5 30		lda $30,x			lda 	safePtr,x
.9a0f	c8		iny				iny
.9a10	91 36		sta ($36),y			sta 	(zTemp0),y
.9a12	e8		inx				inx
.9a13	e0 04		cpx #$04			cpx 	#4
.9a15	d0 f6		bne $9a0d			bne 	_PSCopy
.9a17					_PSNext:
.9a17	18		clc				clc
.9a18	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a1a	65 30		adc $30				adc 	codePtr
.9a1c	85 30		sta $30				sta 	codePtr
.9a1e	90 02		bcc $9a22			bcc 	_CREExit
.9a20	e6 31		inc $31				inc 	codePtr+1
.9a22					_CREExit:
.9a22	80 ba		bra $99de			bra 	_PSLoop
.9a24					_PSExit:
.9a24	60		rts				rts
.9a25					_PSSyntax:
.9a25	4c 34 b5	jmp $b534			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9a28					ScanForward:
.9a28	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9a2a	86 37		stx $37				stx 	zTemp0+1
.9a2c	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9a2e					_ScanLoop:
.9a2e	b1 30		lda ($30),y			lda 	(codePtr),y
.9a30	c8		iny				iny
.9a31	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9a33	d0 0e		bne $9a43			bne 	_ScanGoNext
.9a35	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9a37	f0 04		beq $9a3d			beq 	_ScanMatch
.9a39	c5 37		cmp $37				cmp 	zTemp0+1
.9a3b	d0 06		bne $9a43			bne 	_ScanGoNext
.9a3d					_ScanMatch:
.9a3d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9a3f	d0 01		bne $9a42			bne 	_ScanNotEndEOL
.9a41	88		dey				dey
.9a42					_ScanNotEndEOL:
.9a42	60		rts				rts
.9a43					_ScanGoNext:
.9a43	20 48 9a	jsr $9a48			jsr  	ScanForwardOne
.9a46	80 e6		bra $9a2e			bra 	_ScanLoop
.9a48					ScanForwardOne:
.9a48	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9a4a	90 3e		bcc $9a8a			bcc 	_SFWExit
.9a4c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9a4e	90 18		bcc $9a68			bcc 	_ScanSkipOne
.9a50	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9a52	b0 2f		bcs $9a83			bcs 	_ScanSkipData
.9a54	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9a56	90 32		bcc $9a8a			bcc 	_SFWExit 					; if not, ordinary keywords.
.9a58	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9a5a	b0 2e		bcs $9a8a			bcs 	_SFWExit
.9a5c	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9a5e	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9a60	b0 28		bcs $9a8a			bcs 	_SFWExit
.9a62	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9a64	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9a66	80 22		bra $9a8a			bra 	_SFWExit
.9a68					_ScanSkipOne:
.9a68	c8		iny				iny 								; consume the extra one.
.9a69	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9a6b	d0 1d		bne $9a8a			bne 	_SFWExit
.9a6d	18		clc				clc
.9a6e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a70	65 30		adc $30				adc 	codePtr
.9a72	85 30		sta $30				sta 	codePtr
.9a74	90 02		bcc $9a78			bcc 	_CREExit
.9a76	e6 31		inc $31				inc 	codePtr+1
.9a78					_CREExit:
.9a78	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9a7a	b2 30		lda ($30)			lda 	(codePtr)
.9a7c	d0 0c		bne $9a8a			bne 	_SFWExit 					; if not zero, more to scan
.9a7e	a9 13		lda #$13		lda	#19
.9a80	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.9a83					_ScanSkipData:
.9a83	88		dey				dey 								; point at data token
.9a84	c8		iny				iny
.9a85	98		tya				tya
.9a86	38		sec				sec
.9a87	71 30		adc ($30),y			adc 	(codePtr),y
.9a89	a8		tay				tay
.9a8a					_SFWExit:
.9a8a	60		rts				rts
.9a8b					ScanGetCurrentLineStep:
.9a8b	64 38		stz $38				stz 	zTemp1
.9a8d	a0 03		ldy #$03			ldy 	#3
.9a8f					_SGCLSLoop:
.9a8f	b1 30		lda ($30),y			lda 	(codePtr),y
.9a91	c8		iny				iny
.9a92	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9a94	f0 05		beq $9a9b			beq 	_SGCLSExit
.9a96	20 48 9a	jsr $9a48			jsr 	ScanForwardOne
.9a99	80 f4		bra $9a8f			bra 	_SGCLSLoop
.9a9b					_SGCLSExit:
.9a9b	a5 38		lda $38				lda 	zTemp1
.9a9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9a9e					Command_WHILE:
.9a9e	5a		phy				phy 								; save position of the test
.9a9f	a2 00		ldx #$00			ldx 	#0
.9aa1	20 48 a6	jsr $a648			jsr 	EvaluateNumber 				; work out the number
.9aa4	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; check if zero
.9aa7	f0 0e		beq $9ab7			beq 	_WHExitLoop 				; if so exit the loop
.9aa9	98		tya				tya 								; position *after* test.
.9aaa	7a		ply				ply 								; restore position before test, at WHILE
.9aab	88		dey				dey
.9aac	48		pha				pha 								; push after test on the stack
.9aad	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9aaf	20 bc a7	jsr $a7bc			jsr 	StackOpen
.9ab2	20 00 a8	jsr $a800			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9ab5	7a		ply				ply 								; restore the position *after* the test
.9ab6	60		rts				rts
.9ab7					_WHExitLoop:
.9ab7	68		pla				pla 								; throw post loop position
.9ab8	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9aba	aa		tax				tax
.9abb	20 28 9a	jsr $9a28			jsr 	ScanForward
.9abe	60		rts				rts
.9abf					Command_WEND:
.9abf	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9ac1	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9ac3	20 e8 a7	jsr $a7e8			jsr 	StackCheckFrame
.9ac6	20 11 a8	jsr $a811			jsr 	STKLoadCodePosition 		; loop back
.9ac9	20 da a7	jsr $a7da			jsr 	StackClose		 			; erase the frame
.9acc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.af46					CheckRightBracket:
.af46	b1 30		lda ($30),y			lda 	(codePtr),y
.af48	c8		iny				iny
.af49	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.af4b	d0 0f		bne $af5c			bne 	CNAFail
.af4d	60		rts				rts
.af4e					CheckComma:
.af4e	b1 30		lda ($30),y			lda 	(codePtr),y
.af50	c8		iny				iny
.af51	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.af53	d0 07		bne $af5c			bne 	CNAFail
.af55	60		rts				rts
.af56					CheckNextA:
.af56	d1 30		cmp ($30),y			cmp 	(codePtr),y
.af58	d0 02		bne $af5c			bne 	CNAFail
.af5a	c8		iny				iny 								; skip character
.af5b	60		rts				rts 								; and exit
.af5c					CNAFail:
.af5c	4c 34 b5	jmp $b534			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9acd					ErrorHandler:
.9acd	a8		tay				tay 								; find the error text
.9ace	f0 49		beq $9b19			beq 	_EHEnd
.9ad0	a2 00		ldx #$00			ldx 	#0
.9ad2	a9 4d		lda #$4d			lda 	#((ErrorText) & $FF)
.9ad4	85 36		sta $36				sta 	0+zTemp0
.9ad6	a9 b5		lda #$b5			lda 	#((ErrorText) >> 8)
.9ad8	85 37		sta $37				sta 	1+zTemp0
.9ada					_EHFind:
.9ada	88		dey				dey 								; found the error text ?
.9adb	f0 0e		beq $9aeb			beq 	_EHFound
.9add					_EHFindZero:
.9add	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9adf	e6 36		inc $36				inc 	zTemp0
.9ae1	d0 02		bne $9ae5			bne 	_EHFNoCarry
.9ae3	e6 37		inc $37				inc 	zTemp0+1
.9ae5					_EHFNoCarry:
.9ae5	c9 00		cmp #$00			cmp 	#0
.9ae7	d0 f4		bne $9add			bne 	_EHFindZero
.9ae9	80 ef		bra $9ada			bra 	_EHFind
.9aeb					_EHFound:
.9aeb	a5 36		lda $36				lda 	zTemp0 						; print message
.9aed	a6 37		ldx $37				ldx 	zTemp0+1
.9aef	20 26 9b	jsr $9b26			jsr 	PrintStringXA
.9af2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9af4	b1 30		lda ($30),y			lda 	(codePtr),y
.9af6	d0 05		bne $9afd			bne 	_EHAtMsg
.9af8	c8		iny				iny
.9af9	b1 30		lda ($30),y			lda 	(codePtr),y
.9afb	f0 17		beq $9b14			beq 	_EHCREnd
.9afd					_EHAtMsg:
.9afd	a2 9b		ldx #$9b			ldx 	#_AtMsg >> 8 				; print " at "
.9aff	a9 1c		lda #$1c			lda 	#_AtMsg & $FF
.9b01	20 26 9b	jsr $9b26			jsr 	PrintStringXA
.9b04	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9b06	b1 30		lda ($30),y			lda 	(codePtr),y
.9b08	48		pha				pha
.9b09	c8		iny				iny
.9b0a	b1 30		lda ($30),y			lda 	(codePtr),y
.9b0c	aa		tax				tax
.9b0d	68		pla				pla
.9b0e	20 a2 b0	jsr $b0a2			jsr 	ConvertInt16 				; convert XA to string
.9b11	20 26 9b	jsr $9b26			jsr 	PrintStringXA 				; and print it.
.9b14					_EHCREnd:
.9b14	a9 0d		lda #$0d			lda 	#13 						; new line
.9b16	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.9b19					_EHEnd:
.9b19	4c 29 8c	jmp $8c29			jmp 	WarmStart
>9b1c	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9b24	20 00
.9b26					PrintStringXA:
.9b26	5a		phy				phy
.9b27	86 37		stx $37				stx 	zTemp0+1
.9b29	85 36		sta $36				sta 	zTemp0
.9b2b	a0 00		ldy #$00			ldy 	#0
.9b2d					_PSXALoop:
.9b2d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b2f	f0 06		beq $9b37			beq 	_PSXAExit
.9b31	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.9b34	c8		iny				iny
.9b35	80 f6		bra $9b2d			bra 	_PSXALoop
.9b37					_PSXAExit:
.9b37	7a		ply				ply
.9b38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9b39					UnaryTrue:
.9b39	fa		plx				plx
.9b3a					ReturnTrue:
.9b3a	a9 01		lda #$01			lda 	#1  						; set to 1
.9b3c	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.9b3f	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9b41	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b44	60		rts				rts
.9b45					UnaryFalse:
.9b45	fa		plx				plx
.9b46					ReturnFalse:
.9b46	4c 08 a7	jmp $a708			jmp 	NSMSetZero 					; set it all to zero
.9b49					BinaryCompareEqual:
.9b49	fa		plx				plx
.9b4a	20 85 9b	jsr $9b85			jsr 	CompareBaseCode
.9b4d	c9 00		cmp #$00			cmp 	#0
.9b4f	f0 e9		beq $9b3a			beq 	ReturnTrue
.9b51	80 f3		bra $9b46			bra 	ReturnFalse
.9b53					BinaryCompareLess:
.9b53	fa		plx				plx
.9b54	20 85 9b	jsr $9b85			jsr 	CompareBaseCode
.9b57	c9 ff		cmp #$ff			cmp 	#$FF
.9b59	f0 df		beq $9b3a			beq 	ReturnTrue
.9b5b	80 e9		bra $9b46			bra 	ReturnFalse
.9b5d					BinaryCompareGreater:
.9b5d	fa		plx				plx
.9b5e	20 85 9b	jsr $9b85			jsr 	CompareBaseCode
.9b61	c9 01		cmp #$01			cmp 	#1
.9b63	f0 d5		beq $9b3a			beq 	ReturnTrue
.9b65	80 df		bra $9b46			bra 	ReturnFalse
.9b67					BinaryCompareNotEqual:
.9b67	fa		plx				plx
.9b68	20 85 9b	jsr $9b85			jsr 	CompareBaseCode
.9b6b	c9 00		cmp #$00			cmp 	#0
.9b6d	d0 cb		bne $9b3a			bne 	ReturnTrue
.9b6f	80 d5		bra $9b46			bra 	ReturnFalse
.9b71					BinaryCompareLessEqual:
.9b71	fa		plx				plx
.9b72	20 85 9b	jsr $9b85			jsr 	CompareBaseCode
.9b75	c9 01		cmp #$01			cmp 	#1
.9b77	d0 c1		bne $9b3a			bne 	ReturnTrue
.9b79	80 cb		bra $9b46			bra 	ReturnFalse
.9b7b					BinaryCompareGreaterEqual:
.9b7b	fa		plx				plx
.9b7c	20 85 9b	jsr $9b85			jsr 	CompareBaseCode
.9b7f	c9 ff		cmp #$ff			cmp 	#$FF
.9b81	d0 b7		bne $9b3a			bne 	ReturnTrue
.9b83	80 c1		bra $9b46			bra 	ReturnFalse
.9b85					CompareBaseCode:
.9b85	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; make both values if references.
.9b88	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9b8b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b8e	29 10		and #$10			and 	#NSTString
.9b90	d0 40		bne $9bd2			bne 	_CBCString
.9b92	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9b95	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b98	d0 3b		bne $9bd5			bne 	_CBCFloat
.9b9a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b9d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ba0	29 08		and #$08			and 	#NSTFloat
.9ba2	d0 31		bne $9bd5			bne 	_CBCFloat
.9ba4	20 d8 9b	jsr $9bd8			jsr 	CompareFixMinusZero
.9ba7	e8		inx				inx
.9ba8	20 d8 9b	jsr $9bd8			jsr 	CompareFixMinusZero
.9bab	ca		dex				dex
.9bac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9baf	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bb2	10 0b		bpl $9bbf			bpl 	_CDCSameSign
.9bb4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9bb7	30 16		bmi $9bcf			bmi 	_CBCLess 					; return $FF
.9bb9					_CBCGreater:
.9bb9	a9 01		lda #$01			lda 	#1
.9bbb	60		rts				rts
.9bbc					_CBCEqual:
.9bbc	a9 00		lda #$00			lda 	#0
.9bbe	60		rts				rts
.9bbf					_CDCSameSign:
.9bbf	20 e8 9c	jsr $9ce8			jsr 	SubTopTwoStack 				; unsigned subtract
.9bc2	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; or the mantissa together
.9bc5	f0 f5		beq $9bbc			beq 	_CBCEqual 					; -0 == 0
.9bc7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9bca	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9bcd	10 ea		bpl $9bb9			bpl 	_CBCGreater
.9bcf					_CBCLess:
.9bcf	a9 ff		lda #$ff			lda 	#$FF
.9bd1	60		rts				rts
.9bd2					_CBCString:
.9bd2	4c 3e 9c	jmp $9c3e			jmp 	CompareStrings
.9bd5					_CBCFloat:
.9bd5	4c a6 b1	jmp $b1a6			jmp 	CompareFloat
.9bd8					CompareFixMinusZero:
.9bd8	20 38 a7	jsr $a738			jsr 	NSMIsZero
.9bdb	d0 03		bne $9be0			bne 	_CFXMZNotZero
.9bdd	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9be0					_CFXMZNotZero:
.9be0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9be1					StringConcat:
.9be1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9be4	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9be7	29 18		and #$18			and 	#NSBTypeMask
.9be9	c9 10		cmp #$10			cmp 	#NSTString
.9beb	d0 4e		bne $9c3b			bne		_SCType
.9bed	64 38		stz $38				stz 	zTemp1 						; counting total length
.9bef	e8		inx				inx
.9bf0	20 0e 9c	jsr $9c0e			jsr 	_SCSetupZ0 					; setup for second
.9bf3	20 19 9c	jsr $9c19			jsr 	_SCLengthZ0 				; length for second
.9bf6	ca		dex				dex
.9bf7	20 0e 9c	jsr $9c0e			jsr 	_SCSetupZ0 					; setup for first
.9bfa	20 19 9c	jsr $9c19			jsr 	_SCLengthZ0 				; length for first
.9bfd	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9bff	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.9c02	20 2c 9c	jsr $9c2c			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9c05	e8		inx				inx
.9c06	20 0e 9c	jsr $9c0e			jsr 	_SCSetupZ0 					; copy second out
.9c09	20 2c 9c	jsr $9c2c			jsr 	_SCCopy
.9c0c	ca		dex				dex
.9c0d	60		rts				rts
.9c0e					_SCSetupZ0:
.9c0e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c11	85 36		sta $36				sta 	zTemp0
.9c13	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c16	85 37		sta $37				sta 	zTemp0+1
.9c18	60		rts				rts
.9c19					_SCLengthZ0:
.9c19	5a		phy				phy
.9c1a	a0 00		ldy #$00			ldy 	#0
.9c1c					_SCLenLoop:
.9c1c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c1e	f0 0a		beq $9c2a			beq 	_SCLExit
.9c20	c8		iny				iny
.9c21	e6 38		inc $38				inc 	zTemp1
.9c23	10 f7		bpl $9c1c			bpl		_SCLenLoop
.9c25	a9 09		lda #$09		lda	#9
.9c27	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.9c2a					_SCLExit:
.9c2a	7a		ply				ply
.9c2b	60		rts				rts
.9c2c					_SCCopy:
.9c2c	5a		phy				phy
.9c2d	a0 00		ldy #$00			ldy 	#0
.9c2f					_SCCopyLoop:
.9c2f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c31	f0 06		beq $9c39			beq 	_SCCExit
.9c33	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.9c36	c8		iny				iny
.9c37	80 f6		bra $9c2f			bra 	_SCCopyLoop
.9c39					_SCCExit:
.9c39	7a		ply				ply
.9c3a	60		rts				rts
.9c3b					_SCType:
.9c3b	4c 3e b5	jmp $b53e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.af5f					IntegerDivide:
.af5f	fa		plx				plx
.af60	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af63	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af66	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af67	0a		asl a				asl 	a
.af68	10 05		bpl $af6f			bpl 	_NotRef
.af6a	48		pha				pha
.af6b	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af6e	68		pla				pla
.af6f					_NotRef:
.af6f	0a		asl a				asl 	a
.af70	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af72	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af75	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af78	f0 03		beq $af7d			beq 	_IntegerCode 				; if clear, then we have two integers
.af7a	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.af7d					_IntegerCode:
.af7d	20 9f af	jsr $af9f			jsr 	CheckDivideZero 			; do div zero check
.af80	20 d7 af	jsr $afd7			jsr 	Int32Divide 				; do the division
.af83	20 94 b0	jsr $b094			jsr 	CalculateSign 				; calculate result sign
.af86					NSMCopyPlusTwoToZero:
.af86	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.af89	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af8c	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.af8f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af92	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.af95	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af98	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.af9b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af9e	60		rts				rts
.af9f					CheckDivideZero:
.af9f	e8		inx				inx
.afa0	20 38 a7	jsr $a738			jsr 	NSMIsZero
.afa3	f0 02		beq $afa7			beq 	_CDVError
.afa5	ca		dex				dex
.afa6	60		rts				rts
.afa7					_CDVError:
.afa7	a9 03		lda #$03		lda	#3
.afa9	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.afac					IntegerModulus:
.afac	fa		plx				plx
.afad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.afb0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.afb3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.afb4	0a		asl a				asl 	a
.afb5	10 05		bpl $afbc			bpl 	_NotRef
.afb7	48		pha				pha
.afb8	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.afbb	68		pla				pla
.afbc					_NotRef:
.afbc	0a		asl a				asl 	a
.afbd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.afbf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.afc2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.afc5	f0 03		beq $afca			beq 	_IntegerCode 				; if clear, then we have two integers
.afc7	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.afca					_IntegerCode:
.afca					IntegerModulusNoCheck:
.afca	20 9f af	jsr $af9f			jsr 	CheckDivideZero 			; do div zero check
.afcd	20 d7 af	jsr $afd7			jsr 	Int32Divide 				; do the division
.afd0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.afd3	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.afd6	60		rts				rts
.afd7					Int32Divide:
.afd7	48		pha				pha 								; save AXY
.afd8	5a		phy				phy
.afd9	20 df a6	jsr $a6df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.afdc	20 04 a7	jsr $a704			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.afdf	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.afe1					_I32DivideLoop:
.afe1	e8		inx				inx
.afe2	e8		inx				inx
.afe3	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.afe6	ca		dex				dex
.afe7	ca		dex				dex
.afe8	20 1e a7	jsr $a71e			jsr 	NSMRotateLeft
.afeb	20 17 b0	jsr $b017			jsr 	DivideCheckSubtract 		; check if subtract possible
.afee	90 03		bcc $aff3			bcc 	_I32DivideNoCarryIn
.aff0	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aff3					_I32DivideNoCarryIn:
.aff3	88		dey				dey 								; loop round till division completed.
.aff4	d0 eb		bne $afe1			bne 	_I32DivideLoop
.aff6	7a		ply				ply 								; restore AXY and exit
.aff7	68		pla				pla
.aff8	60		rts				rts
.aff9					Int32ShiftDivide:
.aff9	48		pha				pha 								; save AY
.affa	5a		phy				phy
.affb	e8		inx				inx 								; clear S[X+2]
.affc	e8		inx				inx
.affd	20 08 a7	jsr $a708			jsr 	NSMSetZero
.b000	ca		dex				dex
.b001	ca		dex				dex
.b002	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.b004					_I32SDLoop:
.b004	20 17 b0	jsr $b017			jsr 	DivideCheckSubtract 		; check if subtract possible
.b007	e8		inx				inx
.b008	e8		inx				inx
.b009	20 1e a7	jsr $a71e			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.b00c	ca		dex				dex
.b00d	ca		dex				dex
.b00e	20 1e a7	jsr $a71e			jsr 	NSMRotateLeft
.b011	88		dey				dey 	 							; do 31 times
.b012	d0 f0		bne $b004			bne 	_I32SDLoop
.b014	7a		ply				ply 								; restore AY and exit
.b015	68		pla				pla
.b016	60		rts				rts
.b017					DivideCheckSubtract:
.b017	20 e8 9c	jsr $9ce8			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.b01a	b0 04		bcs $b020			bcs 	_DCSExit 					; if carry set, then could do, exit
.b01c	20 c2 9c	jsr $9cc2			jsr 	AddTopTwoStack 				; add it back in
.b01f	18		clc				clc 								; and return False
.b020					_DCSExit:
.b020	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.b021					MulInteger:
.b021	fa		plx				plx
.b022	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.b025	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b028	0a		asl a				asl 	a 							; shift reference bit into sign bit
.b029	0a		asl a				asl 	a
.b02a	10 05		bpl $b031			bpl 	_NotRef
.b02c	48		pha				pha
.b02d	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.b030	68		pla				pla
.b031					_NotRef:
.b031	0a		asl a				asl 	a 							; put MSB of type into A:7
.b032	30 0b		bmi $b03f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.b034	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.b037	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.b03a	f0 06		beq $b042			beq 	_IntegerCode 				; if clear, then we have two integers
.b03c	4c 7d b2	jmp $b27d			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.b03f					_StringData:
.b03f	4c 48 b5	jmp $b548			jmp 	NotDoneError							; at least one string - don't know both are strings.
.b042					_IntegerCode:
.b042	20 4f b0	jsr $b04f			jsr 	MultiplyShort
.b045	c9 00		cmp #$00			cmp 	#0
.b047	f0 05		beq $b04e			beq 	_MIExit
.b049	a9 04		lda #$04		lda	#4
.b04b	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b04e					_MIExit:
.b04e	60		rts				rts
.b04f					MultiplyShort:
.b04f	5a		phy				phy 								; save Y
.b050	20 df a6	jsr $a6df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.b053	20 04 a7	jsr $a704			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.b056	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.b058					_I32MLoop:
.b058	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.b05b	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.b05e	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.b061	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.b064	f0 28		beq $b08e			beq 	_I32MExit 					; exit if zero
.b066	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.b069	29 01		and #$01			and 	#1
.b06b	f0 0e		beq $b07b			beq 	_I32MNoAdd
.b06d	20 c2 9c	jsr $9cc2			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.b070	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.b073	10 06		bpl $b07b			bpl 	_I32MNoAdd
.b075					_I32ShiftRight:
.b075	20 2b a7	jsr $a72b			jsr 	NSMShiftRight 				; shift S[X] right
.b078	c8		iny				iny 								; increment shift count
.b079	80 0a		bra $b085			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.b07b					_I32MNoAdd:
.b07b	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.b07e	70 f5		bvs $b075			bvs 	_I32ShiftRight 				; instead.
.b080	e8		inx				inx
.b081	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.b084	ca		dex				dex
.b085					_I32MShiftUpper:
.b085	e8		inx				inx 								; shift S[X+2] right
.b086	e8		inx				inx
.b087	20 2b a7	jsr $a72b			jsr 	NSMShiftRight
.b08a	ca		dex				dex
.b08b	ca		dex				dex
.b08c	80 ca		bra $b058			bra 	_I32MLoop 					; try again.
.b08e					_I32MExit:
.b08e	20 94 b0	jsr $b094			jsr 	CalculateSign
.b091	98		tya				tya 								; shift in A
.b092	7a		ply				ply 								; restore Y and exit
.b093	60		rts				rts
.b094					CalculateSign:
.b094	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.b097	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.b09a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b09d	0a		asl a				asl 	a 							; shift bit 7 into carry
.b09e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b0a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9c3e					CompareStrings:
.9c3e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9c41	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9c44	29 10		and #$10			and 	#NSBIsString
.9c46	f0 2c		beq $9c74			beq 	_CSTypeError
.9c48	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9c4b	85 36		sta $36				sta 	zTemp0
.9c4d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c50	85 37		sta $37				sta 	zTemp0+1
.9c52	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9c55	85 38		sta $38				sta 	zTemp1
.9c57	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c5a	85 39		sta $39				sta 	zTemp1+1
.9c5c	5a		phy				phy 								; save Y so we can access strings
.9c5d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9c5f					_CSLoop:
.9c5f	c8		iny				iny
.9c60	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9c62	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9c64	d0 06		bne $9c6c			bne 	_CSDifferent
.9c66	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9c68	d0 f5		bne $9c5f			bne 	_CSLoop 					; still comparing
.9c6a					_CSExit:
.9c6a	7a		ply				ply 								; reached end, return zero in A from EOS
.9c6b	60		rts				rts
.9c6c					_CSDifferent:
.9c6c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9c6e	90 fa		bcc $9c6a			bcc		_CSExit
.9c70	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9c72	80 f6		bra $9c6a			bra 	_CSExit
.9c74					_CSTypeError:
.9c74	4c 3e b5	jmp $b53e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9c77					ShiftLeft:
.9c77	38		sec				sec
.9c78	80 01		bra $9c7b			bra 	ShiftMain
.9c7a					ShiftRight:
.9c7a	18		clc				clc
.9c7b					ShiftMain:
.9c7b	fa		plx				plx 								; restore X
.9c7c	08		php				php 								; save direction
.9c7d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c80	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c83	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c84	0a		asl a				asl 	a
.9c85	10 05		bpl $9c8c			bpl 	_NotRef
.9c87	48		pha				pha
.9c88	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c8b	68		pla				pla
.9c8c					_NotRef:
.9c8c	0a		asl a				asl 	a
.9c8d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c8f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c92	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c95	f0 03		beq $9c9a			beq 	_IntegerCode 				; if clear, then we have two integers
.9c97	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.9c9a					_IntegerCode:
.9c9a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9c9d	29 e0		and #$e0			and 	#$E0
.9c9f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ca2	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ca5	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ca8	d0 13		bne $9cbd			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9caa					_SMLoop:
.9caa	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9cad	30 11		bmi $9cc0			bmi 	_SMExit 					; exit if done.
.9caf	28		plp				plp 								; restore direcition setting
.9cb0	08		php				php
.9cb1	90 05		bcc $9cb8			bcc 	_SMRight
.9cb3	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; shift left if CS
.9cb6	80 f2		bra $9caa			bra 	_SMLoop
.9cb8					_SMRight:
.9cb8	20 2b a7	jsr $a72b			jsr 	NSMShiftRight 				; shift right if CC
.9cbb	80 ed		bra $9caa			bra 	_SMLoop
.9cbd					_SMExit0:
.9cbd	20 08 a7	jsr $a708			jsr 	NSMSetZero 					; return zero.
.9cc0					_SMExit:
.9cc0	28		plp				plp 								; throw direction
.9cc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9cc2					AddTopTwoStack:
.9cc2	18		clc				clc
.9cc3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cc6	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9cc9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ccc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ccf	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9cd2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cd5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cd8	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9cdb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cde	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9ce1	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9ce4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ce7	60		rts				rts
.9ce8					SubTopTwoStack:
.9ce8	38		sec				sec
.9ce9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cec	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9cef	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cf2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cf5	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9cf8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cfb	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cfe	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9d01	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d04	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d07	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9d0a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d0d	60		rts				rts
.9d0e					AddInteger:
.9d0e	fa		plx				plx
.9d0f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d12	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d15	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d16	0a		asl a				asl 	a
.9d17	10 05		bpl $9d1e			bpl 	_NotRef
.9d19	48		pha				pha
.9d1a	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d1d	68		pla				pla
.9d1e					_NotRef:
.9d1e	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d1f	30 0b		bmi $9d2c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d21	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d24	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d27	f0 06		beq $9d2f			beq 	_IntegerCode 				; if clear, then we have two integers
.9d29	4c fd b0	jmp $b0fd			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9d2c					_StringData:
.9d2c	4c e1 9b	jmp $9be1			jmp 	StringConcat							; at least one string - don't know both are strings.
.9d2f					_IntegerCode:
.9d2f					AddCode:
.9d2f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9d32	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9d35	10 8b		bpl $9cc2			bpl 	AddTopTwoStack
.9d37	20 e8 9c	jsr $9ce8			jsr 	SubTopTwoStack 				; do a physical subtraction
.9d3a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9d3d	10 09		bpl $9d48			bpl 	_AddExit
.9d3f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9d42	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d45	20 bd a6	jsr $a6bd			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d48					_AddExit:
.9d48	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; check for -0
.9d4b	d0 03		bne $9d50			bne 	_AddNonZero
.9d4d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9d50					_AddNonZero:
.9d50	60		rts				rts
.9d51					SubInteger:
.9d51	fa		plx				plx
.9d52	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d55	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d58	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d59	0a		asl a				asl 	a
.9d5a	10 05		bpl $9d61			bpl 	_NotRef
.9d5c	48		pha				pha
.9d5d	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d60	68		pla				pla
.9d61					_NotRef:
.9d61	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d62	30 0b		bmi $9d6f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d64	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d67	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d6a	f0 06		beq $9d72			beq 	_IntegerCode 				; if clear, then we have two integers
.9d6c	4c 02 b1	jmp $b102			jmp 	FloatingPointSub 							; otherwise at least one float.
.9d6f					_StringData:
.9d6f	4c 48 b5	jmp $b548			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9d72					_IntegerCode:
.9d72	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9d75	49 80		eor #$80			eor 	#$80
.9d77	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d7a	80 b3		bra $9d2f			bra 	AddCode 					; and do the same code as add.
.9d7c					AndInteger:
.9d7c	fa		plx				plx
.9d7d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d80	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d83	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d84	0a		asl a				asl 	a
.9d85	10 05		bpl $9d8c			bpl 	_NotRef
.9d87	48		pha				pha
.9d88	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d8b	68		pla				pla
.9d8c					_NotRef:
.9d8c	0a		asl a				asl 	a
.9d8d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d8f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d92	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d95	f0 03		beq $9d9a			beq 	_IntegerCode 				; if clear, then we have two integers
.9d97	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.9d9a					_IntegerCode:
.9d9a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d9d	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9da0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9da3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9da6	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9da9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dac	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9daf	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9db2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9db5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9db8	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9dbb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dbe	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9dc1	60		rts				rts
.9dc2					OraInteger:
.9dc2	fa		plx				plx
.9dc3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dc6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9dc9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dca	0a		asl a				asl 	a
.9dcb	10 05		bpl $9dd2			bpl 	_NotRef
.9dcd	48		pha				pha
.9dce	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9dd1	68		pla				pla
.9dd2					_NotRef:
.9dd2	0a		asl a				asl 	a
.9dd3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9dd5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9dd8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ddb	f0 03		beq $9de0			beq 	_IntegerCode 				; if clear, then we have two integers
.9ddd	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.9de0					_IntegerCode:
.9de0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9de3	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9de6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9de9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9dec	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9def	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9df2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9df5	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9df8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dfb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9dfe	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9e01	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e04	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e07	60		rts				rts
.9e08					EorInteger:
.9e08	fa		plx				plx
.9e09	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e0c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e0f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e10	0a		asl a				asl 	a
.9e11	10 05		bpl $9e18			bpl 	_NotRef
.9e13	48		pha				pha
.9e14	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e17	68		pla				pla
.9e18					_NotRef:
.9e18	0a		asl a				asl 	a
.9e19	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e1b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e1e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e21	f0 03		beq $9e26			beq 	_IntegerCode 				; if clear, then we have two integers
.9e23	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.9e26					_IntegerCode:
.9e26	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9e29	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9e2c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e2f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9e32	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9e35	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e38	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e3b	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9e3e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e41	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e44	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9e47	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e4a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e4d	60		rts				rts
.9e4e					WordIndirect:
.9e4e	fa		plx				plx
.9e4f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e52	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e55	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e56	0a		asl a				asl 	a
.9e57	10 05		bpl $9e5e			bpl 	_NotRef
.9e59	48		pha				pha
.9e5a	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e5d	68		pla				pla
.9e5e					_NotRef:
.9e5e	0a		asl a				asl 	a
.9e5f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e61	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e64	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e67	f0 03		beq $9e6c			beq 	_IntegerCode 				; if clear, then we have two integers
.9e69	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.9e6c					_IntegerCode:
.9e6c	20 2f 9d	jsr $9d2f			jsr 	AddCode 					; add the two values
.9e6f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e71	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e74	60		rts				rts
.9e75					ByteIndirect:
.9e75	fa		plx				plx
.9e76	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e79	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e7c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e7d	0a		asl a				asl 	a
.9e7e	10 05		bpl $9e85			bpl 	_NotRef
.9e80	48		pha				pha
.9e81	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e84	68		pla				pla
.9e85					_NotRef:
.9e85	0a		asl a				asl 	a
.9e86	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e88	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e8b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e8e	f0 03		beq $9e93			beq 	_IntegerCode 				; if clear, then we have two integers
.9e90	4c 3e b5	jmp $b53e			jmp 	TypeError 					; anything else, type mismatch.
.9e93					_IntegerCode:
.9e93	20 2f 9d	jsr $9d2f			jsr 	AddCode 					; add the two values
.9e96	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9e98	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b0a2					ConvertInt16:
.b0a2	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b0a5	8e 10 04	stx $0410			stx 	NSMantissa1
.b0a8	9c 18 04	stz $0418			stz 	NSMantissa2
.b0ab	9c 20 04	stz $0420			stz 	NSMantissa3
.b0ae	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b0b1	a2 00		ldx #$00			ldx 	#0 							; stack level
.b0b3	a9 0a		lda #$0a			lda 	#10 						; base
.b0b5	80 00		bra $b0b7			bra 	ConvertInt32
.b0b7					ConvertInt32:
.b0b7	5a		phy				phy
.b0b8	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b0ba	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b0bd	10 08		bpl $b0c7			bpl 	_CI32NotNeg
.b0bf	48		pha				pha
.b0c0	a9 2d		lda #$2d			lda 	#'-'
.b0c2	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0c5	c8		iny				iny
.b0c6	68		pla				pla
.b0c7					_CI32NotNeg:
.b0c7	20 d5 b0	jsr $b0d5			jsr 	_CI32DivideConvert 			; recursive conversion
.b0ca	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b0cc	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0cf	7a		ply				ply
.b0d0	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b0d2	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b0d4	60		rts				rts
.b0d5					_CI32DivideConvert:
.b0d5	e8		inx				inx 								; write to next slot up
.b0d6	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.b0d9	ca		dex				dex
.b0da	20 d7 af	jsr $afd7			jsr 	Int32Divide 				; divide
.b0dd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b0e0	48		pha				pha
.b0e1	20 86 af	jsr $af86			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b0e4	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero ?
.b0e7	f0 06		beq $b0ef			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b0e9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b0ec	20 d5 b0	jsr $b0d5			jsr 	_CI32DivideConvert 			; and recusrively call.
.b0ef					_CI32NoRecurse:
.b0ef	68		pla				pla 								; remainder
.b0f0	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b0f2	90 02		bcc $b0f6			bcc 	_CI32NotHex
.b0f4	69 26		adc #$26			adc 	#6+32
.b0f6					_CI32NotHex:
.b0f6	69 30		adc #$30			adc 	#48
.b0f8	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b0fb	c8		iny				iny
.b0fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9e9c					PrecedenceLevel:
>9e9c	04					.byte	 4	; $00 <<
>9e9d	02					.byte	 2	; $01 <=
>9e9e	02					.byte	 2	; $02 <>
>9e9f	00					.byte	 0	; $03 !!3
>9ea0	00					.byte	 0	; $04 ><
>9ea1	02					.byte	 2	; $05 >=
>9ea2	04					.byte	 4	; $06 >>
>9ea3	00					.byte	 0	; $07 !!7
>9ea4	00					.byte	 0	; $08 !!8
>9ea5	00					.byte	 0	; $09 !!9
>9ea6	00					.byte	 0	; $0a !!10
>9ea7	00					.byte	 0	; $0b !!11
>9ea8	00					.byte	 0	; $0c !!12
>9ea9	00					.byte	 0	; $0d !!13
>9eaa	00					.byte	 0	; $0e !!14
>9eab	00					.byte	 0	; $0f !!15
>9eac	00					.byte	 0	; $10 @
>9ead	00					.byte	 0	; $11 !!17
>9eae	00					.byte	 0	; $12 !!18
>9eaf	00					.byte	 0	; $13 [
>9eb0	04					.byte	 4	; $14 \
>9eb1	00					.byte	 0	; $15 ]
>9eb2	01					.byte	 1	; $16 ^
>9eb3	00					.byte	 0	; $17 _
>9eb4	00					.byte	 0	; $18 `
>9eb5	00					.byte	 0	; $19 !!25
>9eb6	00					.byte	 0	; $1a !!26
>9eb7	00					.byte	 0	; $1b {
>9eb8	01					.byte	 1	; $1c |
>9eb9	00					.byte	 0	; $1d }
>9eba	00					.byte	 0	; $1e ~
>9ebb	00					.byte	 0	; $1f [7m<7F>[m
>9ebc	00					.byte	 0	; $20
>9ebd	05					.byte	 5	; $21 !
>9ebe	00					.byte	 0	; $22 "
>9ebf	00					.byte	 0	; $23 #
>9ec0	05					.byte	 5	; $24 $
>9ec1	04					.byte	 4	; $25 %
>9ec2	01					.byte	 1	; $26 &
>9ec3	00					.byte	 0	; $27 '
>9ec4	00					.byte	 0	; $28 (
>9ec5	00					.byte	 0	; $29 )
>9ec6	04					.byte	 4	; $2a *
>9ec7	03					.byte	 3	; $2b +
>9ec8	00					.byte	 0	; $2c ,
>9ec9	03					.byte	 3	; $2d -
>9eca	00					.byte	 0	; $2e .
>9ecb	04					.byte	 4	; $2f /
>9ecc	00					.byte	 0	; $30 0
>9ecd	00					.byte	 0	; $31 1
>9ece	00					.byte	 0	; $32 2
>9ecf	00					.byte	 0	; $33 3
>9ed0	00					.byte	 0	; $34 4
>9ed1	00					.byte	 0	; $35 5
>9ed2	00					.byte	 0	; $36 6
>9ed3	00					.byte	 0	; $37 7
>9ed4	00					.byte	 0	; $38 8
>9ed5	00					.byte	 0	; $39 9
>9ed6	00					.byte	 0	; $3a :
>9ed7	00					.byte	 0	; $3b ;
>9ed8	02					.byte	 2	; $3c <
>9ed9	02					.byte	 2	; $3d =
>9eda	02					.byte	 2	; $3e >
>9edb	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9edc					EvaluateExpressionAt0:
.9edc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9ede					EvaluateExpression:
.9ede	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9ee0					EvaluateExpressionAtPrecedence:
.9ee0	48		pha				pha 								; save precedence level
.9ee1	20 af a1	jsr $a1af			jsr 	EvaluateTerm 				; evaluate term into level X.
.9ee4	68		pla				pla 								; restore precedence level.
.9ee5					_EXPRLoop:
.9ee5	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9ee7	b1 30		lda ($30),y			lda 	(codePtr),y
.9ee9	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9eeb	b0 25		bcs $9f12			bcs 	_EXPRExit
.9eed	da		phx				phx 								; read the operator precedence
.9eee	aa		tax				tax
.9eef	bd 9c 9e	lda $9e9c,x			lda 	PrecedenceLevel,x
.9ef2	fa		plx				plx
.9ef3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9ef5	f0 1b		beq $9f12			beq 	_EXPRExit
.9ef7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9ef9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9efb	c5 37		cmp $37				cmp 	zTemp0+1
.9efd	b0 13		bcs $9f12			bcs		_EXPRExit 					; if current >= operator exit
.9eff	48		pha				pha 								; save current precedence.
.9f00	b1 30		lda ($30),y			lda 	(codePtr),y
.9f02	c8		iny				iny
.9f03	48		pha				pha
.9f04	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9f06	e8		inx				inx 								; work out the right hand side.
.9f07	20 e0 9e	jsr $9ee0			jsr 	EvaluateExpressionAtPrecedence
.9f0a	ca		dex				dex
.9f0b	68		pla				pla 								; get operator, call the code.
.9f0c	20 15 9f	jsr $9f15			jsr 	_EXPRCaller
.9f0f	68		pla				pla 								; restore precedence level
.9f10	80 d3		bra $9ee5			bra 	_EXPRLoop 					; and go round.
.9f12					_EXPRExit:
.9f12	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9f14	60		rts				rts
.9f15					_EXPRCaller:
.9f15	da		phx				phx 								; save on stack, first thing is to restore it
.9f16	0a		asl a				asl 	a 							; double so can use vectors into X
.9f17	aa		tax				tax
.9f18	7c 52 96	jmp ($9652,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b0fd					FloatingPointAdd:
.b0fd	20 a6 b2	jsr $b2a6			jsr 	FloatPrepare 				; prepare for floats
.b100	80 0b		bra $b10d			bra 	FloatAdd
.b102					FloatingPointSub:
.b102	20 a6 b2	jsr $b2a6			jsr 	FloatPrepare 				; prepare for floats
.b105					FloatSubtract:
.b105	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b108	49 80		eor #$80			eor 	#$80
.b10a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b10d					FloatAdd:
.b10d	48		pha				pha
.b10e	5a		phy				phy
.b10f	20 b7 b2	jsr $b2b7			jsr 	NSNormalise 				; normalise S[X]
.b112	f0 5c		beq $b170			beq 	_FAReturn1
.b114	e8		inx				inx 								; normalise S[X+1]
.b115	20 b7 b2	jsr $b2b7			jsr 	NSNormalise
.b118	ca		dex				dex
.b119	c9 00		cmp #$00			cmp 	#0
.b11b	f0 77		beq $b194			beq 	_FAExit 					; if so, just return A
.b11d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b120	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b123	f0 1b		beq $b140			beq 	_FAExponentsEqual
.b125	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b128	a8		tay				tay
.b129	38		sec				sec 								; do a signed comparison of the exponents.
.b12a	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b12d	50 02		bvc $b131			bvc 	_FANoSignedChange
.b12f	49 80		eor #$80			eor 	#$80
.b131					_FANoSignedChange:
.b131	29 80		and #$80			and 	#$80
.b133	10 03		bpl $b138			bpl 	_FAHaveMax
.b135	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b138					_FAHaveMax:
.b138	20 97 b1	jsr $b197			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b13b	e8		inx				inx
.b13c	20 97 b1	jsr $b197			jsr 	_FAShiftToExponent
.b13f	ca		dex				dex
.b140					_FAExponentsEqual:
.b140	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b143	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b146	30 10		bmi $b158			bmi 	_FADifferentSigns
.b148	20 c2 9c	jsr $9cc2			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b14b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b14e	10 44		bpl $b194			bpl 	_FAExit 					; if no, we are done.
.b150	20 2b a7	jsr $a72b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b153	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b156	80 3c		bra $b194			bra 	_FAExit
.b158					_FADifferentSigns:
.b158	20 e8 9c	jsr $9ce8			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b15b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b15e	10 06		bpl $b166			bpl 	_FACheckZero 				; if no, check for -0
.b160	20 b4 a6	jsr $a6b4			jsr 	NSMNegate 					; netate result
.b163	20 bd a6	jsr $a6bd			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b166					_FACheckZero:
.b166	20 38 a7	jsr $a738			jsr 	NSMIsZero	 				; check for -0
.b169	d0 29		bne $b194			bne 	_FAExit
.b16b	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b16e	80 24		bra $b194			bra 	_FAExit
.b170					_FAReturn1:
.b170	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b173	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b176	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b179	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b17c	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b17f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b182	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b185	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b188	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b18b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b18e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b191	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b194					_FAExit:
.b194	7a		ply				ply
.b195	68		pla				pla
.b196	60		rts				rts
.b197					_FAShiftToExponent:
.b197					_FAShiftToExponent2:
.b197	98		tya				tya 								; compare Y to exponent
.b198	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b19b	f0 08		beq $b1a5			beq 	_FASEExit 					; exit if so.
.b19d	20 2b a7	jsr $a72b			jsr 	NSMShiftRight	 			; shift the mantissa right
.b1a0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b1a3	80 f2		bra $b197			bra 	_FAShiftToExponent2
.b1a5					_FASEExit:
.b1a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b1a6					CompareFloat:
.b1a6	20 05 b1	jsr $b105			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b1a9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b1ac	29 f8		and #$f8			and 	#$F8
.b1ae	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b1b1	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b1b4	f0 09		beq $b1bf			beq 	_FCExit 					; zero, so approximately identical
.b1b6	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b1b8	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b1bb	10 02		bpl $b1bf			bpl 	_FCExit
.b1bd					_FCNegative:
.b1bd	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b1bf					_FCExit:
.b1bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b1c0					FDivideCommand:
.b1c0	fa		plx				plx	 								; restore stack position
.b1c1	20 a6 b2	jsr $b2a6			jsr 	FloatPrepare 				; prepare for floats
.b1c4					FloatDivide:
.b1c4	48		pha				pha
.b1c5	e8		inx				inx
.b1c6	20 b7 b2	jsr $b2b7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1c9	ca		dex				dex
.b1ca	c9 00		cmp #$00			cmp 	#0
.b1cc	f0 20		beq $b1ee			beq 	_FDZero
.b1ce	20 b7 b2	jsr $b2b7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1d1	f0 19		beq $b1ec			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1d3	20 f9 af	jsr $aff9			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b1d6	20 86 af	jsr $af86			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b1d9	20 b7 b2	jsr $b2b7			jsr		NSNormalise 				; renormalise
.b1dc	20 94 b0	jsr $b094			jsr 	CalculateSign 				; calculate result sign
.b1df	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b1e2	38		sec				sec
.b1e3	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b1e6	38		sec				sec
.b1e7	e9 1e		sbc #$1e			sbc 	#30
.b1e9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1ec					_FDExit:
.b1ec	68		pla				pla
.b1ed	60		rts				rts
.b1ee					_FDZero:
.b1ee	a9 03		lda #$03		lda	#3
.b1f0	4c cd 9a	jmp $9acd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b1f3					FloatFractionalPart:
.b1f3	5a		phy				phy
.b1f4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b1f7	29 7f		and #$7f			and 	#$7F
.b1f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1fc	20 b7 b2	jsr $b2b7			jsr 	NSNormalise
.b1ff	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b202	38		sec				sec
.b203	e9 e0		sbc #$e0			sbc 	#$E0
.b205	90 31		bcc $b238			bcc 	_FFPExit 					; already fractional
.b207	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b209	b0 2a		bcs $b235			bcs 	_FFPZero
.b20b	a8		tay				tay 								; put count to do in Y
.b20c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b20f	20 3a b2	jsr $b23a			jsr 	_FFPPartial
.b212	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b215	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b218	20 3a b2	jsr $b23a			jsr 	_FFPPartial
.b21b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b21e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b221	20 3a b2	jsr $b23a			jsr 	_FFPPartial
.b224	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b227	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b22a	20 3a b2	jsr $b23a			jsr 	_FFPPartial
.b22d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b230	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; zeroed check.
.b233	d0 03		bne $b238			bne 	_FFPExit
.b235					_FFPZero:
.b235	20 08 a7	jsr $a708			jsr 	NSMSetZero
.b238					_FFPExit:
.b238	7a		ply				ply
.b239	60		rts				rts
.b23a					_FFPPartial:
.b23a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b23c	f0 17		beq $b255			beq 	_FFFPPExit
.b23e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b240	b0 0c		bcs $b24e			bcs 	_FFFPPWholeByte
.b242	5a		phy				phy
.b243					_FFFPPLeft:
.b243	0a		asl a				asl 	a
.b244	88		dey				dey
.b245	d0 fc		bne $b243			bne 	_FFFPPLeft
.b247	7a		ply				ply
.b248					_FFFPPRight:
.b248	4a		lsr a				lsr 	a
.b249	88		dey				dey
.b24a	d0 fc		bne $b248			bne 	_FFFPPRight
.b24c	80 07		bra $b255			bra 	_FFFPPExit
.b24e					_FFFPPWholeByte:
.b24e	98		tya				tya 								; subtract 8 from count
.b24f	38		sec				sec
.b250	e9 08		sbc #$08			sbc 	#8
.b252	a8		tay				tay
.b253	a9 00		lda #$00			lda 	#0 							; and clear all
.b255					_FFFPPExit:
.b255	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b256					FloatIntegerPart:
.b256	48		pha				pha
.b257	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b25a	f0 1f		beq $b27b			beq 	_FIPExit 					; if so do nothing
.b25c	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero ?
.b25f	f0 17		beq $b278			beq 	_FIPZero 					; if so return zero.
.b261	20 b7 b2	jsr $b2b7			jsr 	NSNormalise 				; normalise
.b264	f0 12		beq $b278			beq 	_FIPZero 					; normalised to zero, exit zero
.b266					_FIPShift:
.b266	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b269	10 08		bpl $b273			bpl 	_FIPCheckZero
.b26b	20 2b a7	jsr $a72b			jsr 	NSMShiftRight 				; shift mantissa right
.b26e	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b271	80 f3		bra $b266			bra 	_FIPShift
.b273					_FIPCheckZero:
.b273	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; avoid -0 problem
.b276	d0 03		bne $b27b			bne 	_FIPExit 					; set to zero if mantissa zero.
.b278					_FIPZero:
.b278	20 08 a7	jsr $a708			jsr 	NSMSetZero
.b27b					_FIPExit:
.b27b	68		pla				pla
.b27c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b27d					FloatingPointMultiply:
.b27d	20 a6 b2	jsr $b2a6			jsr 	FloatPrepare 				; prepare for floats
.b280					FloatMultiply:
.b280	48		pha				pha
.b281	20 b7 b2	jsr $b2b7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b284	f0 1b		beq $b2a1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b286	e8		inx				inx
.b287	20 b7 b2	jsr $b2b7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b28a	ca		dex				dex
.b28b	c9 00		cmp #$00			cmp 	#0
.b28d	f0 0f		beq $b29e			beq 	_FDSetZero
.b28f	20 4f b0	jsr $b04f			jsr 	MultiplyShort 				; calculate the result.
.b292	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b295	18		clc				clc
.b296	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b299	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b29c	80 03		bra $b2a1			bra 	_FDExit
.b29e					_FDSetZero:
.b29e	20 08 a7	jsr $a708			jsr 	NSMSetZero 					; return 0
.b2a1					_FDExit:
.b2a1	20 b7 b2	jsr $b2b7			jsr 	NSNormalise 				; normalise the result
.b2a4	68		pla				pla
.b2a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b2a6					FloatPrepare:
.b2a6	20 ee 9f	jsr $9fee			jsr 	DereferenceTopTwo 			; dereference the top two values
.b2a9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b2ac	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b2af	29 10		and #$10			and 	#NSBIsString
.b2b1	d0 01		bne $b2b4			bne 	_FDType
.b2b3	60		rts				rts
.b2b4					_FDType:
.b2b4	4c 3e b5	jmp $b53e			jmp 	TypeError
.b2b7					NSNormalise:
.b2b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b2ba	29 80		and #$80			and 	#$80
.b2bc	09 08		ora #$08			ora 	#NSTFloat
.b2be	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2c1	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; if zero exit
.b2c4	d0 09		bne $b2cf			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b2c6	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b2c9	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b2cc	a9 00		lda #$00			lda 	#0 							; set Z flag
.b2ce	60		rts				rts
.b2cf					_NSNormaliseOptimise:
.b2cf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b2d2	d0 22		bne $b2f6			bne 	_NSNormaliseLoop
.b2d4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b2d7	30 1d		bmi $b2f6			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b2d9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b2dc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2df	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b2e2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b2e5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2e8	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b2eb	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b2ee	38		sec				sec
.b2ef	e9 08		sbc #$08			sbc 	#8
.b2f1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b2f4	80 d9		bra $b2cf			bra 	_NSNormaliseOptimise
.b2f6					_NSNormaliseLoop:
.b2f6	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b2f9	70 08		bvs $b303			bvs 	_NSNExit 					; exit if so with Z flag clear
.b2fb	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; shift mantissa left
.b2fe	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b301	80 f3		bra $b2f6			bra 	_NSNormaliseLoop
.b303					_NSNExit:
.b303	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b305	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f1b					AssignNumber:
.9f1b	5a		phy				phy
.9f1c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f1f	85 36		sta $36				sta 	zTemp0
.9f21	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f24	85 37		sta $37				sta 	zTemp0+1
.9f26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9f29	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f2b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f2e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f30	c9 08		cmp #$08			cmp 	#NSTFloat
.9f32	f0 2a		beq $9f5e			beq 	_ANFloat
.9f34	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9f37	f0 05		beq $9f3e			beq		_ANNotFloat
.9f39	e8		inx				inx
.9f3a	20 56 b2	jsr $b256			jsr 	FloatIntegerPart 			; make it an integer
.9f3d	ca		dex				dex
.9f3e					_ANNotFloat:
.9f3e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f41	29 03		and #$03			and 	#3
.9f43	d0 05		bne $9f4a			bne 	_ANByteWord
.9f45	20 6a 9f	jsr $9f6a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f48	80 1e		bra $9f68			bra 	_ANExit
.9f4a					_ANByteWord:
.9f4a	48		pha				pha 								; save count
.9f4b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9f4e	92 36		sta ($36)			sta 	(zTemp0)
.9f50	68		pla				pla
.9f51	c9 01		cmp #$01			cmp	 	#1
.9f53	f0 13		beq $9f68			beq 	_ANExit
.9f55	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9f58	a0 01		ldy #$01			ldy 	#1
.9f5a	91 36		sta ($36),y			sta 	(zTemp0),y
.9f5c	80 0a		bra $9f68			bra 	_ANExit
.9f5e					_ANFloat:
.9f5e	20 6a 9f	jsr $9f6a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f61	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f64	a0 04		ldy #$04			ldy 	#4
.9f66	91 36		sta ($36),y			sta 	(zTemp0),y
.9f68					_ANExit:
.9f68	7a		ply				ply
.9f69	60		rts				rts
.9f6a					_ANCopy4PackSign:
.9f6a	a0 03		ldy #$03			ldy 	#3
.9f6c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9f6f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f71	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9f74	91 36		sta ($36),y			sta 	(zTemp0),y
.9f76	88		dey				dey
.9f77	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9f7a	91 36		sta ($36),y			sta 	(zTemp0),y
.9f7c	88		dey				dey
.9f7d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f80	91 36		sta ($36),y			sta 	(zTemp0),y
.9f82	88		dey				dey
.9f83	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f86	91 36		sta ($36),y			sta 	(zTemp0),y
.9f88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f89					AssignString:
.9f89	5a		phy				phy
.9f8a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f8d	85 38		sta $38				sta 	zTemp1
.9f8f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f92	85 39		sta $39				sta 	zTemp1+1
.9f94	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f97	85 36		sta $36				sta 	zTemp0
.9f99	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f9c	85 37		sta $37				sta 	zTemp0+1
.9f9e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9fa0	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fa2	f0 23		beq $9fc7			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9fa4	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9fa5	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9fa7	e9 02		sbc #$02			sbc 	#2
.9fa9	85 3c		sta $3c				sta 	zsTemp
.9fab	a0 01		ldy #$01			ldy 	#1
.9fad	b1 36		lda ($36),y			lda 	(zTemp0),y
.9faf	e9 00		sbc #$00			sbc 	#0
.9fb1	85 3d		sta $3d				sta 	zsTemp+1
.9fb3	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9fb5					_ASGetLength:
.9fb5	c8		iny				iny
.9fb6	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fb8	d0 fb		bne $9fb5			bne 	_ASGetLength
.9fba	98		tya				tya 								; is this length <= current length
.9fbb	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9fbd	90 20		bcc $9fdf			bcc 	_ASCopyString
.9fbf	f0 1e		beq $9fdf			beq 	_ASCopyString
.9fc1	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9fc3	a0 01		ldy #$01			ldy 	#1
.9fc5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fc7					_ASNewStringRequired:
.9fc7	e8		inx				inx 								; concrete the new string.
.9fc8	20 35 b8	jsr $b835			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9fcb	ca		dex				dex
.9fcc	18		clc				clc
.9fcd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fd0	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fd2	92 36		sta ($36)			sta 	(zTemp0)
.9fd4	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9fd7	69 00		adc #$00			adc 	#0
.9fd9	a0 01		ldy #$01			ldy 	#1
.9fdb	91 36		sta ($36),y			sta 	(zTemp0),y
.9fdd	80 0d		bra $9fec			bra 	_ASExit
.9fdf					_ASCopyString:
.9fdf	a0 00		ldy #$00			ldy 	#0
.9fe1					_ASCopyLoop:
.9fe1	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fe3	c8		iny				iny
.9fe4	c8		iny				iny
.9fe5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fe7	88		dey				dey
.9fe8	c9 00		cmp #$00			cmp 	#0
.9fea	d0 f5		bne $9fe1			bne 	_ASCopyLoop
.9fec					_ASExit:
.9fec	7a		ply				ply
.9fed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9fee					DereferenceTopTwo:
.9fee	e8		inx				inx
.9fef	20 f3 9f	jsr $9ff3			jsr 	Dereference 				; deref x+1
.9ff2	ca		dex				dex  								; falls through to deref x
.9ff3					Dereference:
.9ff3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9ff6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ff8	f0 57		beq $a051			beq 	_DRFExit 					; not a reference
.9ffa	5a		phy				phy
.9ffb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9ffe	85 36		sta $36				sta 	zTemp0
.a000	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a003	85 37		sta $37				sta 	zTemp0+1
.a005	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.a008	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a00a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a00d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.a010	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a012	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a014	f0 0f		beq $a025			beq 	_DRFDereferenceTwo
.a016	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a018	f0 39		beq $a053			beq 	_DRFFull
.a01a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a01d	29 03		and #$03			and 	#3
.a01f	f0 32		beq $a053			beq 	_DRFFull 					; the whole word
.a021	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a023	f0 07		beq $a02c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a025					_DRFDereferenceTwo:
.a025	a0 01		ldy #$01			ldy 	#1
.a027	b1 36		lda ($36),y			lda 	(zTemp0),y
.a029	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a02c					_DRFClear23:
.a02c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a02f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a032	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.a035	29 18		and #$18			and 	#NSBTypeMask
.a037	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a03a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a03c	d0 12		bne $a050			bne 	_DRFNotString
.a03e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.a041	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a044	d0 0a		bne $a050			bne 	_DRFNotString
.a046	a9 52		lda #$52			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a048	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.a04b	a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a04d	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.a050					_DRFNotString
.a050	7a		ply				ply 								; restore Y and exit
.a051					_DRFExit:
.a051	60		rts				rts
.a052					_DRFNullString:
>a052	00						.byte 	0
.a053					_DRFFull:
.a053	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a055	b1 36		lda ($36),y			lda 	(zTemp0),y
.a057	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a05a	c8		iny				iny
.a05b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a05d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a060	c8		iny				iny
.a061	b1 36		lda ($36),y			lda 	(zTemp0),y
.a063	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a066	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.a069	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.a06c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a06e	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.a071	f0 06		beq $a079			beq 	_DRFNoExponent
.a073	c8		iny				iny 								; if not, read the exponent as well.
.a074	b1 36		lda ($36),y			lda 	(zTemp0),y
.a076	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a079					_DRFNoExponent:
.a079	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a07c	10 0d		bpl $a08b			bpl 	_DRFExit2 					; if not, then exit.
.a07e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a080	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a083	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.a086	09 80		ora #$80			ora 	#NSBIsNegative
.a088	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a08b					_DRFExit2:
.a08b	7a		ply				ply
.a08c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.a08d					EncodeNumberStart:
.a08d	38		sec				sec
.a08e	80 01		bra $a091			bra 	EncodeNumberContinue+1
.a090					EncodeNumberContinue:
.a090	18		clc				clc
.a091					EncodeNumber:
.a091	08		php				php 								; save reset.
.a092	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a094	f0 12		beq $a0a8			beq 	_ENIsOkay
.a096	c9 30		cmp #$30			cmp 	#"0"
.a098	90 04		bcc $a09e			bcc 	_ENBadNumber
.a09a	c9 3a		cmp #$3a			cmp 	#"9"+1
.a09c	90 0a		bcc $a0a8			bcc 	_ENIsOkay
.a09e					_ENBadNumber:
.a09e	28		plp				plp 								; throw saved reset
.a09f	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.a0a2	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0a4	f0 7e		beq $a124			beq 	_ENConstructFinal
.a0a6					_ENFail:
.a0a6	18		clc				clc 								; not allowed
.a0a7	60		rts				rts
.a0a8					_ENIsOkay:
.a0a8	28		plp				plp 								; are we restarting
.a0a9	90 15		bcc $a0c0			bcc 	_ENNoRestart
.a0ab					_ENStartEncode:
.a0ab	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a0ad	f0 0c		beq $a0bb			beq 	_ENFirstDP
.a0af	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a0b1	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.a0b4	a9 01		lda #$01			lda 	#ESTA_Low
.a0b6					_ENExitChange:
.a0b6	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a0b9	38		sec				sec
.a0ba	60		rts				rts
.a0bb					_ENFirstDP:
.a0bb	20 08 a7	jsr $a708			jsr 	NSMSetZero 					; clear integer part
.a0be	80 3f		bra $a0ff			bra 	_ESTASwitchFloat			; go straight to float and exi
.a0c0					_ENNoRestart:
.a0c0	48		pha				pha 								; save on stack.
.a0c1	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a0c4	c9 01		cmp #$01			cmp 	#ESTA_Low
.a0c6	f0 09		beq $a0d1			beq  	_ESTALowState
.a0c8	c9 02		cmp #$02			cmp 	#ESTA_High
.a0ca	f0 29		beq $a0f5			beq 	_ESTAHighState
.a0cc	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0ce	f0 3b		beq $a10b			beq 	_ESTADecimalState
>a0d0	db						.byte 	$DB 						; causes a break in the emulator
.a0d1					_ESTALowState:
.a0d1	68		pla				pla 								; get value back
.a0d2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a0d4	f0 29		beq $a0ff			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a0d6	29 0f		and #$0f			and 	#15 						; make digit
.a0d8	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a0db	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a0de	0a		asl a				asl 	a
.a0df	0a		asl a				asl 	a
.a0e0	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0e3	0a		asl a				asl 	a
.a0e4	6d 86 04	adc $0486			adc 	DigitTemp
.a0e7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0ea	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a0ec	90 05		bcc $a0f3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0ee	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0f0	8d 85 04	sta $0485			sta 	EncodeState
.a0f3					_ESTANoSwitch:
.a0f3	38		sec				sec
.a0f4	60		rts				rts
.a0f5					_ESTAHighState:
.a0f5	68		pla				pla 								; get value back
.a0f6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a0f8	f0 05		beq $a0ff			beq 	_ESTASwitchFloat
.a0fa	20 5e a1	jsr $a15e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a0fd	38		sec				sec
.a0fe	60		rts				rts
.a0ff					_ESTASwitchFloat:
.a0ff	9c 87 04	stz $0487			stz 	DecimalCount
.a102	e8		inx				inx 								; zero the decimal additive.
.a103	20 08 a7	jsr $a708			jsr 	NSMSetZero
.a106	ca		dex				dex
.a107	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a109	80 ab		bra $a0b6			bra 	_ENExitChange
.a10b					_ESTADecimalState:
.a10b	68		pla				pla 								; digit.
.a10c	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a10e	f0 96		beq $a0a6			beq 	_ENFail
.a110	e8		inx				inx 								; put digit into fractional part of X+1
.a111	20 5e a1	jsr $a15e			jsr 	ESTAShiftDigitIntoMantissa
.a114	ca		dex				dex
.a115	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a118	ad 87 04	lda $0487			lda 	DecimalCount
.a11b	c9 0b		cmp #$0b			cmp 	#11
.a11d	f0 02		beq $a121			beq 	_ESTADSFail
.a11f	38		sec				sec
.a120	60		rts				rts
.a121					_ESTADSFail:
.a121	4c 39 b5	jmp $b539			jmp 	RangeError
.a124					_ENConstructFinal:
.a124	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a127	f0 33		beq $a15c			beq 	_ENCFExit 					; no decimals
.a129	5a		phy				phy
.a12a	0a		asl a				asl 	a 							; x 4 and CLC
.a12b	0a		asl a				asl 	a
.a12c	6d 87 04	adc $0487			adc 	DecimalCount
.a12f	a8		tay				tay
.a130	b9 f8 b4	lda $b4f8,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a133	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a136	b9 f9 b4	lda $b4f9,y			lda 	DecimalScalarTable-5+1,y
.a139	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a13c	b9 fa b4	lda $b4fa,y			lda 	DecimalScalarTable-5+2,y
.a13f	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a142	b9 fb b4	lda $b4fb,y			lda 	DecimalScalarTable-5+3,y
.a145	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a148	b9 fc b4	lda $b4fc,y			lda 	DecimalScalarTable-5+4,y
.a14b	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a14e	a9 08		lda #$08			lda 	#NSTFloat
.a150	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a153	7a		ply				ply
.a154	e8		inx				inx 								; multiply decimal const by decimal scalar
.a155	20 80 b2	jsr $b280			jsr 	FloatMultiply
.a158	ca		dex				dex
.a159	20 0d b1	jsr $b10d			jsr 	FloatAdd 					; add to integer part.
.a15c					_ENCFExit:
.a15c	18		clc				clc 								; reject the digit.
.a15d	60		rts				rts
.a15e					ESTAShiftDigitIntoMantissa:
.a15e	29 0f		and #$0f			and 	#15 						; save digit
.a160	48		pha				pha
.a161	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a164	48		pha				pha
.a165	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a168	48		pha				pha
.a169	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a16c	48		pha				pha
.a16d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a170	48		pha				pha
.a171	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; x 2
.a174	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; x 4
.a177	18		clc				clc 								; pop mantissa and add
.a178	68		pla				pla
.a179	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a17c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a17f	68		pla				pla
.a180	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a183	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a186	68		pla				pla
.a187	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a18a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a18d	68		pla				pla
.a18e	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a191	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a194	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; x 10
.a197	68		pla				pla 								; add digit
.a198	18		clc				clc
.a199	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a19c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a19f	90 0d		bcc $a1ae			bcc 	_ESTASDExit
.a1a1	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a1a4	d0 08		bne $a1ae			bne 	_ESTASDExit
.a1a6	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a1a9	d0 03		bne $a1ae			bne 	_ESTASDExit
.a1ab	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a1ae					_ESTASDExit:
.a1ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a1af					EvaluateTerm:
.a1af	b1 30		lda ($30),y			lda 	(codePtr),y
.a1b1	30 18		bmi $a1cb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a1b3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a1b5	b0 6f		bcs $a226			bcs 	_ETVariable
.a1b7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a1b9	90 6e		bcc $a229			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a1bb	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1bd	b0 6a		bcs $a229			bcs 	_ETPuncUnary
.a1bf	20 8d a0	jsr $a08d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a1c2					_ETNumber:
.a1c2	c8		iny				iny 								; keep encoding until we have the numbers
.a1c3	b1 30		lda ($30),y			lda 	(codePtr),y
.a1c5	20 90 a0	jsr $a090			jsr 	EncodeNumberContinue
.a1c8	b0 f8		bcs $a1c2			bcs 	_ETNumber 					; go back if accepted.
.a1ca	60		rts				rts
.a1cb					_ETCheckUnary:
.a1cb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a1cd	f0 41		beq $a210			beq 	_ETString
.a1cf	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a1d1	f0 12		beq $a1e5			beq 	_ETHexConstant
.a1d3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a1d5	90 0b		bcc $a1e2			bcc 	_ETSyntaxError
.a1d7	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a1d9	b0 07		bcs $a1e2			bcs 	_ETSyntaxError
.a1db	da		phx				phx 								; push X on the stack
.a1dc	0a		asl a				asl 	a 							; put vector x 2 into X
.a1dd	aa		tax				tax
.a1de	c8		iny				iny 								; consume unary function token
.a1df	7c d2 96	jmp ($96d2,x)			jmp 	(VectorSet0,x) 				; and do it.
.a1e2					_ETSyntaxError:
.a1e2	4c 34 b5	jmp $b534			jmp 	SyntaxError
.a1e5					_ETHexConstant:
.a1e5	c8		iny				iny 								; skip #
.a1e6	c8		iny				iny 								; skip count
.a1e7	20 08 a7	jsr $a708			jsr 	NSMSetZero 					; clear result
.a1ea					_ETHLoop:
.a1ea	b1 30		lda ($30),y			lda 	(codePtr),y
.a1ec	c8		iny				iny 								; and consume
.a1ed	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a1ef	f0 1e		beq $a20f			beq 	_ETHExit
.a1f1	48		pha				pha 								; save on stack.
.a1f2	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; x 2
.a1f5	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; x 4
.a1f8	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; x 8
.a1fb	20 1d a7	jsr $a71d			jsr 	NSMShiftLeft 				; x 16
.a1fe	68		pla				pla 								; ASCII
.a1ff	c9 41		cmp #$41			cmp 	#'A'
.a201	90 02		bcc $a205			bcc 	_ETHNotChar
.a203	e9 07		sbc #$07			sbc 	#7
.a205					_ETHNotChar:
.a205	29 0f		and #$0f			and 	#15 						; digit now
.a207	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a20a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a20d	80 db		bra $a1ea			bra 	_ETHLoop 					; go round.
.a20f					_ETHExit:
.a20f	60		rts				rts
.a210					_ETString:
.a210	c8		iny				iny 								; look at length
.a211	b1 30		lda ($30),y			lda 	(codePtr),y
.a213	48		pha				pha
.a214	c8		iny				iny 								; first character
.a215	20 52 a7	jsr $a752			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a218	68		pla				pla 								; restore count and save
.a219	85 36		sta $36				sta 	zTemp0
.a21b	98		tya				tya 								; add length to Y to skip it.
.a21c	18		clc				clc
.a21d	65 36		adc $36				adc 	zTemp0
.a21f	a8		tay				tay
.a220	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a222	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a225	60		rts				rts
.a226					_ETVariable:
.a226	4c 80 a2	jmp $a280			jmp 	VariableHandler
.a229					_ETPuncUnary:
.a229	c8		iny				iny 								; consume the unary character
.a22a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a22c	f0 2d		beq $a25b			beq 	_ETUnaryNegate
.a22e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a230	f0 39		beq $a26b			beq 	_ETDereference
.a232	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a234	f0 43		beq $a279			beq 	_ETParenthesis
.a236	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a238	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a23a	f0 06		beq $a242			beq 	_ETIndirection
.a23c	e6 36		inc $36				inc 	zTemp0
.a23e	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a240	d0 a0		bne $a1e2			bne 	_ETSyntaxError
.a242					_ETIndirection:
.a242	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a244	1a		inc a				inc 	a
.a245	48		pha				pha
.a246	20 af a1	jsr $a1af			jsr 	EvaluateTerm				; evaluate the term
.a249	20 f3 9f	jsr $9ff3			jsr 	Dereference 				; dereference it.
.a24c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a24f	d0 07		bne $a258			bne 	_ETTypeMismatch
.a251	68		pla				pla 								; indirection 1-2
.a252	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a254	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a257	60		rts				rts
.a258					_ETTypeMismatch:
.a258	4c 3e b5	jmp $b53e			jmp 	TypeError
.a25b					_ETUnaryNegate:
.a25b	20 af a1	jsr $a1af			jsr 	EvaluateTerm				; evaluate the term
.a25e	20 f3 9f	jsr $9ff3			jsr 	Dereference 				; dereference it.
.a261	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a264	29 10		and #$10			and 	#NSTString
.a266	d0 f0		bne $a258			bne 	_ETTypeMismatch
.a268	4c b4 a6	jmp $a6b4			jmp 	NSMNegate  					; just toggles the sign bit.
.a26b					_ETDereference:
.a26b	20 af a1	jsr $a1af			jsr 	EvaluateTerm				; evaluate the term
.a26e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a271	29 20		and #$20			and 	#NSBIsReference
.a273	f0 e3		beq $a258			beq 	_ETTypeMismatch
.a275	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a278	60		rts				rts
.a279					_ETParenthesis:
.a279	20 de 9e	jsr $9ede			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a27c	20 46 af	jsr $af46			jsr 	CheckRightBracket 			; check for )
.a27f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a280					VariableHandler:
.a280	b1 30		lda ($30),y			lda 	(codePtr),y
.a282	18		clc				clc
.a283	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a285	85 37		sta $37				sta 	zTemp0+1
.a287	c8		iny				iny
.a288	b1 30		lda ($30),y			lda 	(codePtr),y
.a28a	85 36		sta $36				sta 	zTemp0
.a28c	c8		iny				iny
.a28d	18		clc				clc									; copy variable address+3 to mantissa
.a28e	69 03		adc #$03			adc 	#3
.a290	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a293	a5 37		lda $37				lda 	zTemp0+1
.a295	69 00		adc #$00			adc 	#0
.a297	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a29a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a29d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a2a0	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a2a3	5a		phy				phy
.a2a4	a0 02		ldy #$02			ldy 	#2 							; read type
.a2a6	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2a8	7a		ply				ply
.a2a9	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a2ab	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a2ad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2b0	29 04		and #$04			and 	#NSBIsArray
.a2b2	d0 01		bne $a2b5			bne 	_VHArray
.a2b4	60		rts				rts
.a2b5					_VHArray:
.a2b5	e8		inx				inx
.a2b6	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a2b9	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a2bb	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2be	b1 30		lda ($30),y			lda 	(codePtr),y
.a2c0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a2c2	d0 06		bne $a2ca			bne 	_VHNoSecondIndex
.a2c4	c8		iny				iny 								; skip the comma
.a2c5	e8		inx				inx
.a2c6	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a2c9	ca		dex				dex
.a2ca					_VHNoSecondIndex:
.a2ca	ca		dex				dex 								; set X back.
.a2cb	20 46 af	jsr $af46			jsr 	CheckRightBracket 			; and check the right bracket.
.a2ce	5a		phy				phy 								; save position
.a2cf	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a2d1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2d3	f0 6b		beq $a340			beq 	_VHBadIndex
.a2d5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a2d8	85 3e		sta $3e				sta 	zaTemp
.a2da	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2dd	85 3f		sta $3f				sta 	zaTemp+1
.a2df	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a2e1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2e3	f0 02		beq $a2e7			beq 	_VHHas2Mask
.a2e5	a9 ff		lda #$ff			lda 	#$FF
.a2e7					_VHHas2Mask:
.a2e7	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a2ea	f0 54		beq $a340			beq 	_VHBadIndex
.a2ec	0a		asl a				asl 	a 							; carry will be set if a second index
.a2ed	90 09		bcc $a2f8			bcc 	_VHCheckFirstIndex
.a2ef	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a2f1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2f3	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a2f6	90 48		bcc $a340			bcc 	_VHBadIndex
.a2f8					_VHCheckFirstIndex:
.a2f8	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a2fa	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2fc	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a2ff	90 3f		bcc $a340			bcc 	_VHBadIndex
.a301	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a303	64 37		stz $37				stz 	zTemp0+1
.a305	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a308	30 0f		bmi $a319			bmi 	_VHNoMultiply
.a30a	da		phx				phx
.a30b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a30e	48		pha				pha
.a30f	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a311	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a313	1a		inc a				inc 	a 							; add 1 for zero base
.a314	fa		plx				plx
.a315	20 d0 b3	jsr $b3d0			jsr 	Multiply8x8 				; calculate -> Z0
.a318	fa		plx				plx
.a319					_VHNoMultiply:
.a319	18		clc				clc
.a31a	a5 36		lda $36				lda 	zTemp0
.a31c	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a31f	85 36		sta $36				sta 	zTemp0
.a321	a5 37		lda $37				lda 	zTemp0+1
.a323	69 00		adc #$00			adc 	#0
.a325	85 37		sta $37				sta 	zTemp0+1
.a327	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a32a	20 c3 8d	jsr $8dc3			jsr 	ScaleByBaseType
.a32d	18		clc				clc
.a32e	b2 3e		lda ($3e)			lda 	(zaTemp)
.a330	65 36		adc $36				adc 	zTemp0
.a332	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a335	a0 01		ldy #$01			ldy 	#1
.a337	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a339	65 37		adc $37				adc 	zTemp0+1
.a33b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a33e	7a		ply				ply 								; restore position
.a33f	60		rts				rts
.a340					_VHBadIndex:
.a340	a9 17		lda #$17		lda	#23
.a342	4c cd 9a	jmp $9acd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b306					AbsUnary:
.b306	fa		plx				plx 								; restore stack pos
.b307	20 48 a6	jsr $a648			jsr 	EvaluateNumber 				; get a float or int
.b30a	20 46 af	jsr $af46			jsr 	CheckRightBracket
.b30d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b310	29 7f		and #$7f			and 	#$7F
.b312	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b315	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a345					AllocUnary:
.a345	fa		plx				plx 								; restore stack pos
.a346	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger		; get bytes required.
.a349	20 46 af	jsr $af46			jsr 	CheckRightBracket
.a34c	da		phx				phx 								; save X/Y
.a34d	5a		phy				phy
.a34e	8a		txa				txa 								; copy X into Y
.a34f	a8		tay				tay
.a350	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a353	aa		tax				tax
.a354	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a357	20 64 a3	jsr $a364			jsr 	AllocateXABytes 			; allocate memory
.a35a	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a35d	8a		txa				txa
.a35e	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a361	7a		ply				ply
.a362	fa		plx				plx
.a363	60		rts				rts
.a364					AllocateXABytes:
.a364	5a		phy				phy
.a365	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a368	84 36		sty $36				sty 	zTemp0
.a36a	5a		phy				phy
.a36b	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a36e	84 37		sty $37				sty 	zTemp0+1
.a370	5a		phy				phy
.a371	18		clc				clc 								; add to low memory pointer
.a372	6d 8c 04	adc $048c			adc 	lowMemPtr
.a375	8d 8c 04	sta $048c			sta 	lowMemPtr
.a378	8a		txa				txa
.a379	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a37c	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a37f	b0 2f		bcs $a3b0			bcs 	CISSMemory
.a381	20 a2 a3	jsr $a3a2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a384					_ClearMemory:
.a384	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a387	c5 36		cmp $36				cmp 	zTemp0
.a389	d0 07		bne $a392			bne 	_CMClearNext
.a38b	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a38e	c5 37		cmp $37				cmp 	zTemp0+1
.a390	f0 0c		beq $a39e			beq 	_CMExit
.a392					_CMClearNext:
.a392	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a394	92 36		sta ($36)			sta 	(zTemp0)
.a396	e6 36		inc $36				inc 	zTemp0
.a398	d0 ea		bne $a384			bne 	_ClearMemory
.a39a	e6 37		inc $37				inc		zTemp0+1
.a39c	80 e6		bra $a384			bra 	_ClearMemory
.a39e					_CMExit:
.a39e	fa		plx				plx
.a39f	68		pla				pla
.a3a0	7a		ply				ply
.a3a1	60		rts				rts
.a3a2					CheckIdentifierStringSpace:
.a3a2	48		pha				pha
.a3a3	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a3a6	18		clc				clc
.a3a7	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a3a9	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a3ac	b0 02		bcs $a3b0			bcs 	CISSMemory
.a3ae	68		pla				pla
.a3af	60		rts				rts
.a3b0					CISSMemory:
.a3b0	a9 06		lda #$06		lda	#6
.a3b2	4c cd 9a	jmp $9acd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b316					AscUnary:
.b316	fa		plx				plx 								; restore stack pos
.b317	20 53 a6	jsr $a653			jsr 	EvaluateString 				; get a string
.b31a	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b31c	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.b31f	20 46 af	jsr $af46			jsr 	CheckRightBracket
.b322	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b323					FracUnary:
.b323	fa		plx				plx 								; restore stack pos
.b324	20 48 a6	jsr $a648			jsr 	EvaluateNumber 				; get a float or int
.b327	20 46 af	jsr $af46			jsr 	CheckRightBracket
.b32a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b32d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b32f	f0 04		beq $b335			beq 	_IUZero
.b331	20 f3 b1	jsr $b1f3			jsr 	FloatFractionalPart
.b334	60		rts				rts
.b335					_IUZero:
.b335	20 08 a7	jsr $a708			jsr 	NSMSetZero
.b338	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b339					IntUnary:
.b339	fa		plx				plx 								; restore stack pos
.b33a	20 48 a6	jsr $a648			jsr 	EvaluateNumber 				; get a float or int
.b33d	20 46 af	jsr $af46			jsr 	CheckRightBracket
.b340	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b343	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b345	f0 03		beq $b34a			beq 	_IUExit
.b347	20 56 b2	jsr $b256			jsr 	FloatIntegerPart
.b34a					_IUExit:
.b34a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b34b					LenUnary:
.b34b	fa		plx				plx 								; restore stack pos
.b34c	20 53 a6	jsr $a653			jsr 	EvaluateString 				; get a string
.b34f	5a		phy				phy
.b350	a0 00		ldy #$00			ldy 	#0 							; find length
.b352					_LenFind:
.b352	b1 36		lda ($36),y			lda 	(zTemp0),y
.b354	f0 06		beq $b35c			beq 	_LenExit
.b356	c8		iny				iny
.b357	d0 f9		bne $b352			bne 	_LenFind
.b359	4c 39 b5	jmp $b539			jmp 	RangeError 					; string > 255
.b35c					_LenExit:
.b35c	98		tya				tya
.b35d	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.b360	7a		ply				ply
.b361	20 46 af	jsr $af46			jsr 	CheckRightBracket
.b364	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a3b5					Unary_Min:
.a3b5	a9 01		lda #$01			lda 	#1
.a3b7	80 02		bra $a3bb			bra 	UnaryMinMaxMain
.a3b9					Unary_Max:
.a3b9	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a3bb					UnaryMinMaxMain:
.a3bb	fa		plx				plx 								; get index on number stack
.a3bc	48		pha				pha 								; save comparator
.a3bd	20 3f a6	jsr $a63f			jsr 	EvaluateValue 				; get the first value.
.a3c0					_UMMMLoop:
.a3c0	b1 30		lda ($30),y			lda 	(codePtr),y
.a3c2	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3c4	f0 22		beq $a3e8			beq 	_UMMMDone
.a3c6	20 4e af	jsr $af4e			jsr 	CheckComma 					; must be a comma
.a3c9	e8		inx				inx
.a3ca	20 3f a6	jsr $a63f			jsr 	EvaluateValue
.a3cd	ca		dex				dex
.a3ce	20 df a6	jsr $a6df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3d1	e8		inx				inx
.a3d2	20 df a6	jsr $a6df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3d5	e8		inx				inx
.a3d6	20 85 9b	jsr $9b85			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3d9	ca		dex				dex
.a3da	ca		dex				dex
.a3db	85 36		sta $36				sta 	zTemp0 						; save required result
.a3dd	68		pla				pla 								; get and save comparator
.a3de	48		pha				pha
.a3df	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3e1	d0 dd		bne $a3c0			bne 	_UMMMLoop
.a3e3	20 eb a3	jsr $a3eb			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3e6	80 d8		bra $a3c0			bra 	_UMMMLoop
.a3e8					_UMMMDone:
.a3e8	68		pla				pla 								; throw the comparator
.a3e9	c8		iny				iny 								; skip )
.a3ea	60		rts				rts
.a3eb					ExpCopyAboveDown:
.a3eb	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a3ee	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3f1	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a3f4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3f7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a3fa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3fd	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a400	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a403	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a406	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a409	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a40c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a40f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a410					Unary_Not:
.a410	fa		plx				plx
.a411	20 6b a6	jsr $a66b			jsr 	EvaluateInteger 			; get integer
.a414	20 46 af	jsr $af46			jsr 	CheckRightBracket
.a417	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; zero mantissa ?
.a41a	f0 04		beq $a420			beq 	_NotZero
.a41c	20 08 a7	jsr $a708			jsr 	NSMSetZero
.a41f	60		rts				rts
.a420					_NotZero:
.a420	4c 3a 9b	jmp $9b3a			jmp 	ReturnTrue
.a423					_UNBad:
.a423	4c 43 b5	jmp $b543			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a426					Unary_Random:
.a426	fa		plx				plx
.a427	20 a5 a4	jsr $a4a5			jsr 	Random32Bit 				; get a random number
.a42a	20 8a a4	jsr $a48a			jsr 	URCopyToMantissa  			; put in mantissa
.a42d	b1 30		lda ($30),y			lda 	(codePtr),y
.a42f	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a431	f0 08		beq $a43b			beq 	_URNoModulus
.a433	e8		inx				inx
.a434	20 80 a6	jsr $a680			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a437	ca		dex				dex
.a438	20 ca af	jsr $afca			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a43b					_URNoModulus:
.a43b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a43e	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a441	20 46 af	jsr $af46			jsr 	CheckRightBracket
.a444	60		rts				rts
.a445					Unary_Rnd:
.a445	fa		plx				plx
.a446	20 48 a6	jsr $a648			jsr 	EvaluateNumber 				; number to use.
.a449	20 46 af	jsr $af46			jsr 	CheckRightBracket 			; closing bracket
.a44c	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a44f	f0 2b		beq $a47c			beq 	_URCopySeed
.a451	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a454	10 23		bpl $a479			bpl 	_URDontSeed
.a456	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a459	49 17		eor #$17			eor 	#$17
.a45b	8d 88 04	sta $0488			sta 	RandomSeed+0
.a45e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a461	49 a5		eor #$a5			eor 	#$A5
.a463	8d 89 04	sta $0489			sta 	RandomSeed+1
.a466	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a469	49 c2		eor #$c2			eor 	#$C2
.a46b	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a46e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a471	49 9d		eor #$9d			eor 	#$9D
.a473	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a476	20 a5 a4	jsr $a4a5			jsr 	Random32Bit
.a479					_URDontSeed:
.a479	20 a5 a4	jsr $a4a5			jsr 	Random32Bit 				; generate a number.
.a47c					_URCopySeed:
.a47c	20 8a a4	jsr $a48a			jsr 	URCopyToMantissa 			; copy into mantissa
.a47f	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a481	8d 28 04	sta $0428			sta 	NSExponent
.a484	a9 08		lda #$08			lda 	#NSTFloat
.a486	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a489	60		rts				rts
.a48a					URCopyToMantissa:
.a48a	ad 88 04	lda $0488			lda 	RandomSeed+0
.a48d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a490	ad 89 04	lda $0489			lda 	RandomSeed+1
.a493	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a496	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a499	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a49c	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a49f	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a4a1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4a4	60		rts				rts
.a4a5					Random32Bit:
.a4a5	5a		phy				phy
.a4a6	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a4a8	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a4ab	d0 03		bne $a4b0			bne 	_Random1
.a4ad	a8		tay				tay 								; if so do it 256 times
.a4ae	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a4b0					_Random1:
.a4b0	0a		asl a				asl 	a 							; LSFR RNG
.a4b1	2e 89 04	rol $0489			rol 	RandomSeed+1
.a4b4	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a4b7	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a4ba	90 02		bcc $a4be			bcc 	_Random2
.a4bc	49 c5		eor #$c5			eor 	#$C5
.a4be					_Random2:
.a4be	88		dey				dey
.a4bf	d0 ef		bne $a4b0			bne 	_Random1
.a4c1	8d 88 04	sta $0488			sta 	RandomSeed+0
.a4c4	7a		ply				ply
.a4c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b365					SgnUnary:
.b365	fa		plx				plx 								; restore stack pos
.b366	20 48 a6	jsr $a648			jsr 	EvaluateNumber 				; get a float or int
.b369	20 46 af	jsr $af46			jsr 	CheckRightBracket
.b36c	20 38 a7	jsr $a738			jsr 	NSMIsZero 					; if zero
.b36f	f0 10		beq $b381			beq 	_SGZero  					; return Int Zero
.b371	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b374	48		pha				pha
.b375	a9 01		lda #$01			lda 	#1 							; set to 1
.b377	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.b37a	68		pla				pla
.b37b	29 80		and #$80			and		#$80 						; copy the sign byte out
.b37d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b380	60		rts				rts
.b381	20 08 a7	jsr $a708	_SGZero:jsr 	NSMSetZero
.b384	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b385					ValUnary:
.b385	fa		plx				plx 								; restore stack pos
.b386	20 9b b3	jsr $b39b			jsr 	ValMainCode 				; do the main val() code
.b389	b0 01		bcs $b38c			bcs 	_VUError 					; couldn't convert
.b38b	60		rts				rts
.b38c					_VUError:
.b38c	4c 3e b5	jmp $b53e			jmp 	TypeError
.b38f					IsValUnary:
.b38f	fa		plx				plx 								; restore stack pos
.b390	20 9b b3	jsr $b39b			jsr 	ValMainCode 				; do the main val() code
.b393	b0 03		bcs $b398			bcs 	_VUBad
.b395	4c 3a 9b	jmp $9b3a			jmp 	ReturnTrue
.b398					_VUBad:
.b398	4c 46 9b	jmp $9b46			jmp 	ReturnFalse
.b39b					ValMainCode:
.b39b	20 53 a6	jsr $a653			jsr 	EvaluateString 				; get a string
.b39e	20 46 af	jsr $af46			jsr 	CheckRightBracket 			; check right bracket present
.b3a1	5a		phy				phy
.b3a2	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b3a4	f0 17		beq $b3bd			beq 	_VMCFail2
.b3a6	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b3a8	48		pha				pha 								; save first character
.b3a9	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b3ab	d0 01		bne $b3ae			bne 	_VMCStart
.b3ad	c8		iny				iny 								; skip over -
.b3ae					_VMCStart:
.b3ae	38		sec				sec 								; initialise first time round.
.b3af					_VMCNext:
.b3af	c8		iny				iny 								; pre-increment
.b3b0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b3b2	f0 0c		beq $b3c0			beq 	_VMCSuccess 				; successful.
.b3b4	20 91 a0	jsr $a091			jsr 	EncodeNumber 				; send it to the number-builder
.b3b7	90 03		bcc $b3bc			bcc 	_VMCFail 					; if failed, give up.
.b3b9	18		clc				clc 								; next time round, countinue
.b3ba	80 f3		bra $b3af			bra 	_VMCNext
.b3bc					_VMCFail:
.b3bc	68		pla				pla
.b3bd					_VMCFail2:
.b3bd	7a		ply				ply
.b3be	38		sec				sec
.b3bf	60		rts				rts
.b3c0					_VMCSuccess:
.b3c0	a9 00		lda #$00			lda 	#0 							; construct final
.b3c2	20 91 a0	jsr $a091			jsr 	EncodeNumber
.b3c5	68		pla				pla
.b3c6	c9 2d		cmp #$2d			cmp 	#"-"
.b3c8	d0 03		bne $b3cd			bne 	_VMCNotNegative
.b3ca	20 b4 a6	jsr $a6b4			jsr		NSMNegate
.b3cd					_VMCNotNegative:
.b3cd	7a		ply				ply
.b3ce	18		clc				clc
.b3cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a4c6					ChrUnary:
.a4c6	fa		plx				plx 								; restore stack pos
.a4c7	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger			; get value
.a4ca	48		pha				pha
.a4cb	20 46 af	jsr $af46			jsr 	CheckRightBracket
.a4ce	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4d0	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.a4d3	68		pla				pla 								; write number to it
.a4d4	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.a4d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4d8					SpcUnary:
.a4d8	fa		plx				plx 								; restore stack pos
.a4d9	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger			; get value
.a4dc	5a		phy				phy
.a4dd	48		pha				pha 								; save count
.a4de	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.a4e1	7a		ply				ply 								; to do count in Y
.a4e2					_SpcLoop:
.a4e2	c0 00		cpy #$00			cpy 	#0
.a4e4	f0 08		beq $a4ee			beq 	_SpcExit
.a4e6	a9 20		lda #$20			lda 	#32
.a4e8	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.a4eb	88		dey				dey
.a4ec	80 f4		bra $a4e2			bra 	_SPCLoop
.a4ee					_SpcExit:
.a4ee	7a		ply				ply
.a4ef	20 46 af	jsr $af46			jsr 	CheckRightBracket
.a4f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4f3					Unary_Str:
.a4f3	fa		plx				plx
.a4f4	20 48 a6	jsr $a648			jsr 	EvaluateNumber  			; get number
.a4f7	20 46 af	jsr $af46			jsr 	CheckRightBracket 			; closing bracket
.a4fa	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4fc	20 15 a5	jsr $a515			jsr 	ConvertNumberToString 		; do the conversion.
.a4ff	a9 21		lda #$21			lda		#33 						; create buffer
.a501	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate 			; allocate memory
.a504	da		phx				phx
.a505	a2 00		ldx #$00			ldx 	#0
.a507					_USCopy:
.a507	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a50a	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.a50d	e8		inx				inx
.a50e	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a511	d0 f4		bne $a507			bne 	_USCopy
.a513	fa		plx				plx
.a514	60		rts				rts
.a515					ConvertNumberToString:
.a515	5a		phy				phy 								; save code position
.a516	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a519	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a51c	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a51f	10 0a		bpl $a52b			bpl 	_CNTSNotNegative
.a521	29 7f		and #$7f			and 	#$7F 						; make +ve
.a523	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a526	a9 2d		lda #$2d			lda 	#"-"
.a528	20 91 a5	jsr $a591			jsr 	WriteDecimalBuffer
.a52b					_CNTSNotNegative:
.a52b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a52e	f0 15		beq $a545			beq 	_CNTSNotFloat
.a530	e8		inx				inx 								; round up
.a531	a9 01		lda #$01			lda 	#1
.a533	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.a536	ca		dex				dex
.a537	bd 28 04	lda $0428,x			lda		NSExponent,x
.a53a	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a53d	a9 08		lda #$08			lda 	#NSTFloat
.a53f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a542	20 0d b1	jsr $b10d			jsr 	FloatAdd
.a545					_CNTSNotFloat:
.a545	20 73 a5	jsr $a573			jsr 	MakePlusTwoString
.a548	20 f3 b1	jsr $b1f3			jsr 	FloatFractionalPart 		; get the fractional part
.a54b	20 b7 b2	jsr $b2b7			jsr 	NSNormalise					; normalise , exit if zero
.a54e	f0 21		beq $a571			beq 	_CNTSExit
.a550	a9 2e		lda #$2e			lda 	#"."
.a552	20 91 a5	jsr $a591			jsr 	WriteDecimalBuffer 			; write decimal place
.a555					_CNTSDecimal:
.a555	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a558	30 17		bmi $a571			bmi 	_CNTSExit
.a55a	e8		inx				inx 								; x 10.0
.a55b	a9 0a		lda #$0a			lda 	#10
.a55d	20 0a a7	jsr $a70a			jsr 	NSMSetByte
.a560	a9 08		lda #$08			lda 	#NSTFloat
.a562	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a565	ca		dex				dex
.a566	20 80 b2	jsr $b280			jsr 	FloatMultiply
.a569	20 73 a5	jsr $a573			jsr 	MakePlusTwoString
.a56c	20 f3 b1	jsr $b1f3			jsr 	FloatFractionalPart 		; get the fractional part
.a56f	80 e4		bra $a555			bra 	_CNTSDecimal 				; keep going.
.a571					_CNTSExit:
.a571	7a		ply				ply
.a572	60		rts				rts
.a573					MakePlusTwoString:
.a573	da		phx				phx
.a574	20 df a6	jsr $a6df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a577	e8		inx				inx 								; access it
.a578	e8		inx				inx
.a579	20 56 b2	jsr $b256			jsr 	FloatIntegerPart 			; make it an integer
.a57c	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a57e	20 b7 b0	jsr $b0b7			jsr 	ConvertInt32
.a581	a2 00		ldx #$00			ldx	 	#0
.a583					_MPTSCopy:
.a583	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a586	20 91 a5	jsr $a591			jsr 	WriteDecimalBuffer
.a589	e8		inx				inx
.a58a	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a58d	d0 f4		bne $a583			bne 	_MPTSCopy
.a58f	fa		plx				plx
.a590	60		rts				rts
.a591					WriteDecimalBuffer:
.a591	da		phx				phx
.a592	ae 95 04	ldx $0495			ldx 	dbOffset
.a595	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a598	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a59b	ee 95 04	inc $0495			inc 	dbOffset
.a59e	fa		plx				plx
.a59f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5a0					Unary_Left:
.a5a0	fa		plx				plx
.a5a1	18		clc				clc 								; only one parameter
.a5a2	20 17 a6	jsr $a617			jsr 	SubstringInitial 			; set up.
.a5a5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5a8	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5ab	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5ae	80 2c		bra $a5dc			bra 	SubstringMain
.a5b0					Unary_Right:
.a5b0	fa		plx				plx
.a5b1	18		clc				clc 								; only one parameter
.a5b2	20 17 a6	jsr $a617			jsr 	SubstringInitial 			; set up.
.a5b5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5b8	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5bb	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a5be	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5c1	b0 02		bcs $a5c5			bcs 	_URNotUnderflow
.a5c3	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5c5					_URNotUnderFlow:
.a5c5	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5c8	80 12		bra $a5dc			bra 	SubStringMain
.a5ca					Unary_Mid:
.a5ca	fa		plx				plx
.a5cb	38		sec				sec 								; two parameters
.a5cc	20 17 a6	jsr $a617			jsr 	SubstringInitial 			; set up.
.a5cf	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5d2	f0 05		beq $a5d9			beq 	_UMError
.a5d4	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5d7	80 03		bra $a5dc			bra 	SubStringMain
.a5d9					_UMError:
.a5d9	4c 43 b5	jmp $b543			jmp 	ArgumentError
.a5dc					SubStringMain:
.a5dc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5df	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a5e2	b0 2d		bcs $a611			bcs 	_SSMNull 					; if so, return an empty string.
.a5e4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5e7	f0 28		beq $a611			beq 	_SSMNull 					; return empty string.
.a5e9	18		clc				clc 								; add the offset +1 to the address and
.a5ea	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a5ed	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a5f0	85 36		sta $36				sta 	zTemp0
.a5f2	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a5f5	69 00		adc #$00			adc 	#0
.a5f7	85 37		sta $37				sta 	zTemp0+1
.a5f9					_SSMNoCarry:
.a5f9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5fc	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate 			; allocate that many characters
.a5ff	5a		phy				phy 								; save Y
.a600	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a602					_SSMCopy:
.a602	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a604	f0 09		beq $a60f			beq 	_SSMEString 				; no more to copy
.a606	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite 			; and write it out.
.a609	c8		iny				iny
.a60a	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a60d	d0 f3		bne $a602			bne 	_SSMCopy
.a60f					_SSMEString:
.a60f	7a		ply				ply
.a610					_SSMExit:
.a610	60		rts				rts
.a611					_SSMNull:
.a611	a9 00		lda #$00			lda 	#0
.a613	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.a616	60		rts				rts
.a617					SubstringInitial:
.a617	da		phx				phx 								; save initial stack position
.a618	08		php				php 								; save carry on stack indicating 2 parameters
.a619	20 53 a6	jsr $a653			jsr 	EvaluateString 				; get a string
.a61c	5a		phy				phy 								; calculate length to exponent.
.a61d	a0 ff		ldy #$ff			ldy 	#$FF
.a61f					_SIFindLength:
.a61f	c8		iny				iny
.a620	b1 36		lda ($36),y			lda 	(zTemp0),y
.a622	d0 fb		bne $a61f			bne 	_SIFindLength
.a624	98		tya				tya
.a625	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a628	7a		ply				ply
.a629	e8		inx				inx
.a62a	20 4e af	jsr $af4e			jsr 	CheckComma 					; comma next
.a62d	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get next parameter
.a630	28		plp				plp 								; is it the last parameter ?
.a631	90 07		bcc $a63a			bcc 	_SSIExit 					; if so, exit.
.a633	e8		inx				inx
.a634	20 4e af	jsr $af4e			jsr 	CheckComma 					; comma next
.a637	20 a0 a6	jsr $a6a0			jsr 	Evaluate8BitInteger 		; get last parameter
.a63a					_SSIExit:
.a63a	fa		plx				plx
.a63b	20 46 af	jsr $af46			jsr 	CheckRightBracket 			; check closing bracket
.a63e	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a63f					EvaluateValue:
.a63f	48		pha				pha
.a640	20 de 9e	jsr $9ede			jsr		EvaluateExpression 			; expression
.a643	20 f3 9f	jsr $9ff3			jsr 	Dereference					; derefernce it
.a646	68		pla				pla
.a647	60		rts				rts
.a648					EvaluateNumber:
.a648	20 3f a6	jsr $a63f			jsr 	EvaluateValue 				; get a value
.a64b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a64e	29 10		and #$10			and 	#NSBIsString
.a650	d0 16		bne $a668			bne 	HelperTypeError
.a652	60		rts				rts
.a653					EvaluateString:
.a653	20 3f a6	jsr $a63f			jsr 	EvaluateValue 				; get a value
.a656	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a659	29 10		and #$10			and 	#NSBIsString
.a65b	f0 0b		beq $a668			beq 	HelperTypeError
.a65d					CopyAddressToTemp0:
.a65d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a660	85 36		sta $36				sta 	zTemp0
.a662	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a665	85 37		sta $37				sta 	zTemp0+1
.a667	60		rts				rts
.a668					HelperTypeError:
.a668	4c 3e b5	jmp $b53e			jmp 	TypeError
.a66b					EvaluateInteger:
.a66b	20 48 a6	jsr $a648			jsr 	EvaluateNumber
.a66e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a671	d0 0a		bne $a67d			bne 	HelperValueError 			; if not, it's a float.
.a673	60		rts				rts
.a674					EvaluateUnsignedInteger:
.a674	20 6b a6	jsr $a66b			jsr 	EvaluateInteger 			; check integer is +ve
.a677	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a67a	30 01		bmi $a67d			bmi 	HelperValueError
.a67c	60		rts				rts
.a67d					HelperValueError:
.a67d	4c 43 b5	jmp $b543			jmp 	ArgumentError
.a680					Evaluate16BitInteger:
.a680	20 74 a6	jsr $a674			jsr	 	EvaluateUnsignedInteger		; get integer
.a683	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a686	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a689	d0 f2		bne $a67d			bne 	HelperValueError
.a68b	60		rts				rts
.a68c					Evaluate16BitIntegerSigned:
.a68c	20 6b a6	jsr $a66b			jsr	 	EvaluateInteger				; get integer
.a68f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a692	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a695	d0 e6		bne $a67d			bne 	HelperValueError
.a697	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a69a	10 03		bpl $a69f			bpl 	_EISNotSigned
.a69c	20 bd a6	jsr $a6bd			jsr 	NSMNegateMantissa
.a69f					_EISNotSigned:
.a69f	60		rts				rts
.a6a0					Evaluate8BitInteger:
.a6a0	20 74 a6	jsr $a674			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6a3	d0 d8		bne $a67d			bne 	HelperValueError
.a6a5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6a8	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6ab	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a6ae	d0 cd		bne $a67d			bne 	HelperValueError
.a6b0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b3d0					Multiply8x8:
.b3d0	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b3d1	85 36		sta $36			  	sta 	zTemp0
.b3d3	86 37		stx $37				stx 	zTemp0+1
.b3d5	a9 00		lda #$00			lda 	#0
.b3d7	a2 08		ldx #$08			ldx 	#8
.b3d9					_M88Loop:
.b3d9	90 03		bcc $b3de			bcc 	_M88NoAdd
.b3db	18		clc				clc
.b3dc	65 37		adc $37				adc 	zTemp0+1
.b3de					_M88NoAdd:
.b3de	6a		ror a				ror 	a
.b3df	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b3e1	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b3e2	d0 f5		bne $b3d9			bne 	_M88Loop
.b3e4	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b3e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6b4					NSMNegate:
.a6b4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6b7	49 80		eor #$80			eor 	#NSBIsNegative
.a6b9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6bc	60		rts				rts
.a6bd					NSMNegateMantissa:
.a6bd	38		sec				sec
.a6be	a9 00		lda #$00			lda 	#0
.a6c0	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a6c3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6c6	a9 00		lda #$00			lda 	#0
.a6c8	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a6cb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6ce	a9 00		lda #$00			lda 	#0
.a6d0	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a6d3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6d6	a9 00		lda #$00			lda 	#0
.a6d8	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a6db	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6de	60		rts				rts
.a6df					NSMShiftUpTwo:
.a6df	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6e2	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a6e5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6e8	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a6eb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6ee	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a6f1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a6f4	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a6f7	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a6fa	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a6fd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a700	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a703	60		rts				rts
.a704					NSMSetZeroMantissaOnly:
.a704	a9 00		lda #$00			lda 	#0
.a706	80 08		bra $a710			bra 	NSMSetMantissa
.a708					NSMSetZero:
.a708	a9 00		lda #$00			lda 	#0
.a70a					NSMSetByte:
.a70a	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a70d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a710					NSMSetMantissa:
.a710	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a713	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a716	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a719	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a71c	60		rts				rts
.a71d					NSMShiftLeft:
.a71d	18		clc				clc
.a71e					NSMRotateLeft:
.a71e	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a721	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a724	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a727	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a72a	60		rts				rts
.a72b					NSMShiftRight:
.a72b	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a72e	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a731	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a734	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a737	60		rts				rts
.a738					NSMIsZero:
.a738	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a73b	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a73e	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a741	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a744	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b3e7					Assemble_ora:
.b3e7	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3ea	01					.byte $01
.b3eb					Assemble_and:
.b3eb	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3ee	21					.byte $21
.b3ef					Assemble_eor:
.b3ef	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3f2	41					.byte $41
.b3f3					Assemble_adc:
.b3f3	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3f6	61					.byte $61
.b3f7					Assemble_sta:
.b3f7	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3fa	81					.byte $81
.b3fb					Assemble_lda:
.b3fb	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3fe	a1					.byte $a1
.b3ff					Assemble_cmp:
.b3ff	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b402	c1					.byte $c1
.b403					Assemble_sbc:
.b403	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b406	e1					.byte $e1
.b407					Assemble_asl:
.b407	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b40a	02					.byte $02
>b40b	75					.byte $75
.b40c					Assemble_rol:
.b40c	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b40f	22					.byte $22
>b410	75					.byte $75
.b411					Assemble_lsr:
.b411	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b414	42					.byte $42
>b415	75					.byte $75
.b416					Assemble_ror:
.b416	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b419	62					.byte $62
>b41a	75					.byte $75
.b41b					Assemble_stx:
.b41b	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b41e	82					.byte $82
>b41f	50					.byte $50
.b420					Assemble_ldx:
.b420	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b423	a2					.byte $a2
>b424	d0					.byte $d0
.b425					Assemble_dec:
.b425	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b428	c2					.byte $c2
>b429	55					.byte $55
.b42a					Assemble_inc:
.b42a	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b42d	e2					.byte $e2
>b42e	55					.byte $55
.b42f					Assemble_stz:
.b42f	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b432	60					.byte $60
>b433	44					.byte $44
.b434					Assemble_bit:
.b434	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b437	20					.byte $20
>b438	55					.byte $55
.b439					Assemble_sty:
.b439	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b43c	80					.byte $80
>b43d	54					.byte $54
.b43e					Assemble_ldy:
.b43e	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b441	a0					.byte $a0
>b442	d5					.byte $d5
.b443					Assemble_cpy:
.b443	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b446	c0					.byte $c0
>b447	d4					.byte $d4
.b448					Assemble_cpx:
.b448	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b44b	e0					.byte $e0
>b44c	d0					.byte $d0
.b44d					Assemble_tsb:
.b44d	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b450	00					.byte $00
>b451	50					.byte $50
.b452					Assemble_trb:
.b452	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b455	10					.byte $10
>b456	50					.byte $50
.b457					Assemble_jsr:
.b457	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b45a	14					.byte $14
>b45b	10					.byte $10
.b45c					Assemble_jmp:
.b45c	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b45f	40					.byte $40
>b460	10					.byte $10
.b461					Assemble_bpl:
.b461	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b464	10					.byte $10
.b465					Assemble_bmi:
.b465	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b468	30					.byte $30
.b469					Assemble_bvc:
.b469	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b46c	50					.byte $50
.b46d					Assemble_bvs:
.b46d	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b470	70					.byte $70
.b471					Assemble_bcc:
.b471	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b474	90					.byte $90
.b475					Assemble_bcs:
.b475	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b478	b0					.byte $b0
.b479					Assemble_bne:
.b479	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b47c	d0					.byte $d0
.b47d					Assemble_beq:
.b47d	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b480	f0					.byte $f0
.b481					Assemble_bra:
.b481	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b484	80					.byte $80
.b485					Assemble_brk:
.b485	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b488	00					.byte $00
.b489					Assemble_php:
.b489	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b48c	08					.byte $08
.b48d					Assemble_clc:
.b48d	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b490	18					.byte $18
.b491					Assemble_plp:
.b491	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b494	28					.byte $28
.b495					Assemble_sec:
.b495	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b498	38					.byte $38
.b499					Assemble_rti:
.b499	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b49c	40					.byte $40
.b49d					Assemble_pha:
.b49d	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4a0	48					.byte $48
.b4a1					Assemble_cli:
.b4a1	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4a4	58					.byte $58
.b4a5					Assemble_phy:
.b4a5	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4a8	5a					.byte $5a
.b4a9					Assemble_rts:
.b4a9	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4ac	60					.byte $60
.b4ad					Assemble_pla:
.b4ad	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4b0	68					.byte $68
.b4b1					Assemble_sei:
.b4b1	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4b4	78					.byte $78
.b4b5					Assemble_ply:
.b4b5	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4b8	7a					.byte $7a
.b4b9					Assemble_dey:
.b4b9	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4bc	88					.byte $88
.b4bd					Assemble_txa:
.b4bd	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4c0	8a					.byte $8a
.b4c1					Assemble_tya:
.b4c1	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4c4	98					.byte $98
.b4c5					Assemble_txs:
.b4c5	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4c8	9a					.byte $9a
.b4c9					Assemble_tay:
.b4c9	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4cc	a8					.byte $a8
.b4cd					Assemble_tax:
.b4cd	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4d0	aa					.byte $aa
.b4d1					Assemble_clv:
.b4d1	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4d4	b8					.byte $b8
.b4d5					Assemble_tsx:
.b4d5	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4d8	ba					.byte $ba
.b4d9					Assemble_iny:
.b4d9	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4dc	c8					.byte $c8
.b4dd					Assemble_dex:
.b4dd	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4e0	ca					.byte $ca
.b4e1					Assemble_cld:
.b4e1	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4e4	d8					.byte $d8
.b4e5					Assemble_phx:
.b4e5	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4e8	da					.byte $da
.b4e9					Assemble_stp:
.b4e9	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4ec	db					.byte $db
.b4ed					Assemble_inx:
.b4ed	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4f0	e8					.byte $e8
.b4f1					Assemble_nop:
.b4f1	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4f4	ea					.byte $ea
.b4f5					Assemble_sed:
.b4f5	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4f8	f8					.byte $f8
.b4f9					Assemble_plx:
.b4f9	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4fc	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b4fd					DecimalScalarTable:
>b4fd	66 66 66 66				.dword $66666666 ; 0.1
>b501	de					.byte $de
>b502	1f 85 eb 51				.dword $51eb851f ; 0.01
>b506	db					.byte $db
>b507	4c 37 89 41				.dword $4189374c ; 0.001
>b50b	d8					.byte $d8
>b50c	ac 8b db 68				.dword $68db8bac ; 0.0001
>b510	d4					.byte $d4
>b511	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b515	d1					.byte $d1
>b516	83 de 1b 43				.dword $431bde83 ; 1e-06
>b51a	ce					.byte $ce
>b51b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b51f	ca					.byte $ca
>b520	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b524	c7					.byte $c7
>b525	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b529	c4					.byte $c4
>b52a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b52e	c0					.byte $c0
>b52f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b533	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b534					SyntaxError:
.b534	a9 02		lda #$02		lda	#2
.b536	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b539					RangeError:
.b539	a9 04		lda #$04		lda	#4
.b53b	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b53e					TypeError:
.b53e	a9 05		lda #$05		lda	#5
.b540	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b543					ArgumentError:
.b543	a9 07		lda #$07		lda	#7
.b545	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b548					NotDoneError:
.b548	a9 0c		lda #$0c		lda	#12
.b54a	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b54d					ErrorText:
>b54d	42 72 65 61 6b 00			.text	"Break",0
>b553	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b55b	72 72 6f 72 00
>b560	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b568	20 62 79 20 7a 65 72 6f 00
>b571	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b579	61 6e 67 65 00
>b57e	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b586	6d 61 74 63 68 00
>b58c	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b594	65 6d 6f 72 79 00
>b59a	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b5a2	61 72 67 75 6d 65 6e 74 00
>b5ab	53 74 6f 70 00				.text	"Stop",0
>b5b0	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b5b8	6f 6f 20 6c 6f 6e 67 00
>b5c0	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b5c8	6e 20 66 61 69 6c 65 64 00
>b5d1	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b5d9	61 74 61 00
>b5dd	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b5e5	65 6e 74 65 64 00
>b5eb	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b5f3	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b5ff	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b607	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b614	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b61c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b629	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b631	68 6f 75 74 20 57 68 69 6c 65 00
>b63c	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b644	68 6f 75 74 20 46 6f 72 00
>b64d	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b655	61 63 6b 20 66 75 6c 6c 00
>b65e	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b666	75 63 74 75 72 65 00
>b66d	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b675	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b682	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b68a	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b698	41 72 72 61 79 20 73 69			.text	"Array size",0
>b6a0	7a 65 00
>b6a3	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b6ab	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b6b3	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2546."
>b6bb	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>b6cb	32 2e 20 42 75 69 6c 64 20 32 35 34 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b6d9					EXTInitialise:
.b6d9	64 01		stz $01				stz 	1 							; Access I/O
.b6db	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b6de	9c 08 d0	stz $d008			stz 	$D008
.b6e1	9c 09 d0	stz $d009			stz 	$D009
.b6e4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b6e6	8d 58 d6	sta $d658			sta 	$D658
.b6e9	60		rts				rts
.b6ea					EXTClearScreen:
.b6ea	4c ea ff	jmp $ffea			jmp 	$FFEA
.b6ed					EXTPrintCharacter:
.b6ed	48		pha				pha
.b6ee	da		phx				phx
.b6ef	5a		phy				phy
.b6f0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b6f3	7a		ply				ply
.b6f4	fa		plx				plx
.b6f5	68		pla				pla
.b6f6	60		rts				rts
.b6f7					EXTInputSingleCharacter:
.b6f7	da		phx				phx
.b6f8	5a		phy				phy
.b6f9					_EISCWait:
.b6f9	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b6fc	c9 00		cmp #$00			cmp 	#0
.b6fe	f0 f9		beq $b6f9			beq 	_EISCWait
.b700	7a		ply				ply
.b701	fa		plx				plx
.b702	60		rts				rts
.b703					EXTInputLine:
.b703	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b705					_ILLoop:
.b705	da		phx				phx 								; read character in
.b706	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b709	fa		plx				plx
.b70a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b70c	f0 12		beq $b720			beq 	_ILBackspace
.b70e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b710	f0 15		beq $b727			beq 	_ILExit
.b712	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b714	90 ef		bcc $b705			bcc 	_ILLoop
.b716	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b718	f0 eb		beq $b705			beq 	_ILLoop
.b71a	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b71d	e8		inx				inx
.b71e	80 e5		bra $b705			bra 	_ILLoop
.b720					_ILBackspace:
.b720	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b722	f0 e1		beq $b705			beq 	_ILLoop
.b724	ca		dex				dex 								; back one.
.b725	80 de		bra $b705			bra 	_ILLoop
.b727					_ILExit:
.b727	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.b72a	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b72d	60		rts				rts
.b72e					EXTBreakCheck:
.b72e	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b731					EXTReadController:
.b731	da		phx				phx
.b732	a2 00		ldx #$00			ldx 	#0
.b734	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b736	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b739	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b73b	f0 04		beq $b741			beq 	_NoSet1
.b73d	8a		txa				txa
.b73e	09 01		ora #$01			ora 	#1
.b740	aa		tax				tax
.b741					_NoSet1:
.b741	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b743	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b746	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b748	f0 04		beq $b74e			beq 	_NoSet1
.b74a	8a		txa				txa
.b74b	09 02		ora #$02			ora 	#2
.b74d	aa		tax				tax
.b74e					_NoSet1:
.b74e	a9 06		lda #$06			lda 	#(($32) >> 3)
.b750	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b753	29 04		and #$04			and 	#($01 << (($32) & 7))
.b755	f0 04		beq $b75b			beq 	_NoSet1
.b757	8a		txa				txa
.b758	09 04		ora #$04			ora 	#4
.b75a	aa		tax				tax
.b75b					_NoSet1:
.b75b	a9 04		lda #$04			lda 	#(($25) >> 3)
.b75d	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b760	29 20		and #$20			and 	#($01 << (($25) & 7))
.b762	f0 04		beq $b768			beq 	_NoSet1
.b764	8a		txa				txa
.b765	09 08		ora #$08			ora 	#8
.b767	aa		tax				tax
.b768					_NoSet1:
.b768	a9 04		lda #$04			lda 	#(($26) >> 3)
.b76a	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b76d	29 40		and #$40			and 	#($01 << (($26) & 7))
.b76f	f0 04		beq $b775			beq 	_NoSet1
.b771	8a		txa				txa
.b772	09 10		ora #$10			ora 	#16
.b774	aa		tax				tax
.b775					_NoSet1:
.b775	8a		txa				txa
.b776	fa		plx				plx
.b777	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b778					MemoryDeleteLine:
.b778	20 97 b7	jsr $b797			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b77b	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b77d	a8		tay				tay
.b77e					_MDDLLoop:
.b77e	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b780	92 30		sta ($30)			sta 	(codePtr)
.b782	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b784	c5 3a		cmp $3a				cmp 	zTemp2
.b786	d0 07		bne $b78f			bne 	_MDLDLNext
.b788	a5 31		lda $31				lda 	codePtr+1
.b78a	c5 3b		cmp $3b				cmp 	zTemp2+1
.b78c	d0 01		bne $b78f			bne 	_MDLDLNext
.b78e					_MDDLExit:
.b78e	60		rts				rts
.b78f					_MDLDLNext:
.b78f	e6 30		inc $30				inc 	codePtr						; next byte
.b791	d0 eb		bne $b77e			bne 	_MDDLLoop
.b793	e6 31		inc $31				inc 	codePtr+1
.b795	80 e7		bra $b77e			bra 	_MDDLLoop
.b797					IMemoryFindEnd:
.b797	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b799	85 3a		sta $3a				sta 	0+zTemp2
.b79b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b79d	85 3b		sta $3b				sta 	1+zTemp2
.b79f					_MDLFELoop:
.b79f	b2 3a		lda ($3a)			lda 	(zTemp2)
.b7a1	f0 0b		beq $b7ae			beq 	_MDLFEExit
.b7a3	18		clc				clc
.b7a4	65 3a		adc $3a				adc 	zTemp2
.b7a6	85 3a		sta $3a				sta 	zTemp2
.b7a8	90 f5		bcc $b79f			bcc 	_MDLFELoop
.b7aa	e6 3b		inc $3b				inc 	zTemp2+1
.b7ac	80 f1		bra $b79f			bra 	_MDLFELoop
.b7ae					_MDLFEExit:
.b7ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b7af					MemoryInsertLine:
.b7af	08		php				php
.b7b0	20 97 b7	jsr $b797			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b7b3	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b7b5	1a		inc a				inc 	a
.b7b6	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b7b8	b0 36		bcs $b7f0			bcs 	_MDLIError
.b7ba	28		plp				plp
.b7bb	90 08		bcc $b7c5			bcc 	_MDLIFound
.b7bd	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b7bf	85 30		sta $30				sta 	codePtr
.b7c1	a5 3b		lda $3b				lda 	zTemp2+1
.b7c3	85 31		sta $31				sta 	codePtr+1
.b7c5					_MDLIFound:
.b7c5	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b7c8	a8		tay				tay
.b7c9					_MDLIInsert:
.b7c9	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b7cb	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b7cd	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b7cf	c5 3a		cmp $3a				cmp 	zTemp2
.b7d1	d0 06		bne $b7d9			bne 	_MDLINext
.b7d3	a5 31		lda $31				lda 	codePtr+1
.b7d5	c5 3b		cmp $3b				cmp 	zTemp2+1
.b7d7	f0 0a		beq $b7e3			beq 	_MDLIHaveSpace
.b7d9					_MDLINext:
.b7d9	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b7db	d0 02		bne $b7df			bne 	_MDLINoBorrow
.b7dd	c6 3b		dec $3b				dec 	zTemp2+1
.b7df					_MDLINoBorrow:
.b7df	c6 3a		dec $3a				dec 	zTemp2
.b7e1	80 e6		bra $b7c9			bra 	_MDLIInsert
.b7e3					_MDLIHaveSpace:
.b7e3	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b7e6	88		dey				dey 								; from offset-1 to 0
.b7e7					_MDLICopy:
.b7e7	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b7ea	91 30		sta ($30),y			sta 	(codePtr),y
.b7ec	88		dey				dey
.b7ed	10 f8		bpl $b7e7			bpl 	_MDLICopy
.b7ef	60		rts				rts
.b7f0					_MDLIError:
.b7f0	a9 06		lda #$06		lda	#6
.b7f2	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b7f5					MDLAppendLine:
.b7f5	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b7f7	85 36		sta $36				sta 	zTemp0
.b7f9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7fb	85 38		sta $38				sta 	0+zTemp1
.b7fd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7ff	85 39		sta $39				sta 	1+zTemp1
.b801	b2 38		lda ($38)			lda 	(zTemp1)
.b803	d0 0a		bne $b80f			bne 	_MDLANoInitialise
.b805	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b807	8d eb 06	sta $06eb			sta 	0+AppendPointer
.b80a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b80c	8d ec 06	sta $06ec			sta 	1+AppendPointer
.b80f					_MDLANoInitialise:
.b80f	18		clc				clc
.b810	ad eb 06	lda $06eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b813	85 38		sta $38				sta 	zTemp1
.b815	72 36		adc ($36)			adc 	(zTemp0)
.b817	8d eb 06	sta $06eb			sta 	AppendPointer
.b81a	ad ec 06	lda $06ec			lda 	AppendPointer+1
.b81d	85 39		sta $39				sta 	zTemp1+1
.b81f	69 00		adc #$00			adc 	#0
.b821	8d ec 06	sta $06ec			sta 	AppendPointer+1
.b824	a0 00		ldy #$00			ldy 	#0
.b826					_MDLACopy:
.b826	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b828	91 38		sta ($38),y			sta 	(zTemp1),y
.b82a	c8		iny				iny
.b82b	98		tya				tya
.b82c	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b82e	d0 f6		bne $b826			bne 	_MDLACopy
.b830	a9 00		lda #$00			lda 	#0 							; end of program.
.b832	91 38		sta ($38),y			sta 	(zTemp1),y
.b834	60		rts				rts
.06eb					AppendPointer:
>06eb							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a745					MemoryNew:
.a745	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a747	85 30		sta $30				sta 	codePtr
.a749	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a74b	85 31		sta $31				sta 	codePtr+1
.a74d	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a74f	92 30		sta ($30)			sta 	(codePtr)
.a751	60		rts				rts
.a752					MemoryInline:
.a752	98		tya				tya 								; put address into stack,x
.a753	18		clc				clc
.a754	65 30		adc $30				adc 	codePtr
.a756	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a759	a5 31		lda $31				lda 	codePtr+1
.a75b	69 00		adc #$00			adc 	#0
.a75d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a760	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a763	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a766	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a767					MemorySearch:
.a767	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a769	86 37		stx $37				stx 	zTemp0+1
.a76b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a76d	85 30		sta $30				sta 	codePtr
.a76f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a771	85 31		sta $31				sta 	codePtr+1
.a773					_MTAXLoop:
.a773	b2 30		lda ($30)			lda 	(codePtr)
.a775	18		clc				clc
.a776	f0 21		beq $a799			beq 	_MTAXExit 					; reached end, exit with CC.
.a778	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a77a	b1 30		lda ($30),y			lda 	(codePtr),y
.a77c	38		sec				sec
.a77d	e5 36		sbc $36				sbc 	zTemp0
.a77f	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a781	c8		iny				iny 								; do the MSB
.a782	b1 30		lda ($30),y			lda 	(codePtr),y
.a784	e5 37		sbc $37				sbc 	zTemp0+1
.a786	05 38		ora $38				ora 	zTemp1
.a788	f0 0f		beq $a799			beq 	_MTAXExit	 				; found
.a78a	b0 0d		bcs $a799			bcs 	_MTAXExit 					; current < required exit
.a78c	18		clc				clc
.a78d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a78f	65 30		adc $30				adc 	codePtr
.a791	85 30		sta $30				sta 	codePtr
.a793	90 02		bcc $a797			bcc 	_CREExit
.a795	e6 31		inc $31				inc 	codePtr+1
.a797					_CREExit:
.a797	80 da		bra $a773			bra 	_MTAXLoop
.a799					_MTAXExit:
.a799	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a79a					StackPushByte:
.a79a	48		pha				pha 								; save byte
.a79b	a5 34		lda $34				lda 	BasicStack
.a79d	d0 09		bne $a7a8			bne 	_SPBNoBorrow
.a79f	c6 35		dec $35				dec 	BasicStack+1
.a7a1	48		pha				pha
.a7a2	a5 35		lda $35				lda 	BasicStack+1
.a7a4	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7a6	90 06		bcc $a7ae			bcc 	_SPBMemory
.a7a8					_SPBNoBorrow:
.a7a8	c6 34		dec $34				dec 	BasicStack
.a7aa	68		pla				pla 								; get back and write
.a7ab	92 34		sta ($34)			sta 	(BasicStack)
.a7ad	60		rts				rts
.a7ae					_SPBMemory:
.a7ae	a9 12		lda #$12		lda	#18
.a7b0	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.a7b3					StackPopByte:
.a7b3	b2 34		lda ($34)			lda 	(BasicStack)
.a7b5	e6 34		inc $34				inc 	BasicStack
.a7b7	d0 02		bne $a7bb			bne 	_SPBNoCarry
.a7b9	e6 35		inc $35				inc 	BasicStack+1
.a7bb					_SPBNoCarry:
.a7bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a7bc					StackOpen:
.a7bc	48		pha				pha 								; save frame byte
.a7bd	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a7bf	0a		asl a				asl 	a 							; claim twice this for storage
.a7c0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a7c2	38		sec				sec 								; so basically subtracting from
.a7c3	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a7c5	85 34		sta $34				sta 	basicStack
.a7c7	b0 08		bcs $a7d1			bcs 	_SONoBorrow
.a7c9	c6 35		dec $35				dec 	basicStack+1
.a7cb	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a7cd	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7cf	90 04		bcc $a7d5			bcc 	_SOMemory
.a7d1					_SONoBorrow:
.a7d1	68		pla				pla 								; get marker back and write at TOS
.a7d2	92 34		sta ($34)			sta 	(basicStack)
.a7d4	60		rts				rts
.a7d5					_SOMemory:
.a7d5	a9 12		lda #$12		lda	#18
.a7d7	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.a7da					StackClose:
.a7da	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a7dc	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a7de	0a		asl a				asl 	a 							; claim twice this.
.a7df	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a7e1	85 34		sta $34				sta 	basicStack
.a7e3	90 02		bcc $a7e7			bcc 	_SCExit
.a7e5	e6 35		inc $35				inc 	basicStack+1
.a7e7					_SCExit:
.a7e7	60		rts				rts
.a7e8					StackCheckFrame:
.a7e8	48		pha				pha
.a7e9					_StackRemoveLocals:
.a7e9	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a7eb	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a7ed	b0 05		bcs $a7f4			bcs 	_SCNoLocal
.a7ef	20 ed ae	jsr $aeed			jsr 	LocalPopValue
.a7f2	80 f5		bra $a7e9			bra 	_StackRemoveLocals
.a7f4					_SCNoLocal:
.a7f4	68		pla				pla
.a7f5	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a7f7	29 f0		and #$f0			and 	#$F0 						; check type bits
.a7f9	d0 01		bne $a7fc			bne 	_SCFError 					; different, we have structures mixed up
.a7fb	60		rts				rts
.a7fc					_SCFError:
.a7fc	8a		txa				txa 								; report error X
.a7fd	4c cd 9a	jmp $9acd			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a800					STKSaveCodePosition:
.a800	5a		phy				phy
.a801	98		tya				tya 								; save Y
.a802	a0 05		ldy #$05			ldy 	#5
.a804	91 34		sta ($34),y			sta 	(basicStack),y
.a806	88		dey				dey 								; save Code Pointer
.a807					_STKSaveLoop:
.a807	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a80a	91 34		sta ($34),y			sta 	(basicStack),y
.a80c	88		dey				dey
.a80d	d0 f8		bne $a807			bne 	_STKSaveLoop
.a80f	7a		ply				ply
.a810	60		rts				rts
.a811					STKLoadCodePosition:
.a811	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a813					_STKLoadLoop:
.a813	b1 34		lda ($34),y			lda 	(basicStack),y
.a815	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a818	c8		iny				iny
.a819	c0 05		cpy #$05			cpy 	#5
.a81b	d0 f6		bne $a813			bne 	_STKLoadLoop
.a81d	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a81f	a8		tay				tay
.a820	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a821					StackReset:
.a821	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a823	85 34		sta $34				sta 	0+basicStack
.a825	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a827	85 35		sta $35				sta 	1+basicStack
.a829	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a82b	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a82d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b835					StringConcrete:
.b835	5a		phy				phy 								; save position on stack
.b836	20 a2 a3	jsr $a3a2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b839	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b83c	85 38		sta $38				sta 	zTemp1
.b83e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b841	85 39		sta $39				sta 	zTemp1+1
.b843	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b845					_SALength:
.b845	c8		iny				iny
.b846	b1 38		lda ($38),y			lda 	(zTemp1),y
.b848	d0 fb		bne $b845			bne 	_SALength
.b84a	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b84c	b0 3f		bcs $b88d			bcs 	_SALengthError
.b84e	98		tya				tya 				 				; length of the new string
.b84f	18		clc				clc
.b850	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b852	90 02		bcc $b856			bcc 	_SAHaveLength
.b854	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b856					_SAHaveLength:
.b856	48		pha				pha 								; save length.
.b857	38		sec				sec
.b858	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b85a	6d 8e 04	adc $048e			adc 	StringMemory
.b85d	8d 8e 04	sta $048e			sta 	StringMemory
.b860	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b862	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b865	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b867	6d 8f 04	adc $048f			adc 	StringMemory+1
.b86a	8d 8f 04	sta $048f			sta 	StringMemory+1
.b86d	85 3b		sta $3b				sta 	zTemp2+1
.b86f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b872	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b873	38		sec				sec
.b874	e9 03		sbc #$03			sbc 	#3
.b876	92 3a		sta ($3a)			sta 	(zTemp2)
.b878	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b87a	a0 01		ldy #$01			ldy 	#1
.b87c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b87e					_SACopyNewString:
.b87e	a0 00		ldy #$00			ldy 	#0
.b880					_SACopyNSLoop:
.b880	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b882	c8		iny				iny 								; write two on in string storage
.b883	c8		iny				iny
.b884	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b886	88		dey				dey 								; this makes it one one.
.b887	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b889	d0 f5		bne $b880			bne 	_SACopyNSLoop
.b88b	7a		ply				ply
.b88c	60		rts				rts
.b88d					_SALengthError:
.b88d	a9 09		lda #$09		lda	#9
.b88f	4c cd 9a	jmp $9acd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b892					StringSystemInitialise:
.b892	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b894	8d 8e 04	sta $048e			sta 	0+StringMemory
.b897	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b899	8d 8f 04	sta $048f			sta 	1+StringMemory
.b89c	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b89f	60		rts				rts
.b8a0					StringSpaceInitialise:
.b8a0	20 a2 a3	jsr $a3a2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8a3	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8a5	8d 90 04	sta $0490			sta 	StringInitialised
.b8a8	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b8ab	8d 91 04	sta $0491			sta 	StringTempPointer
.b8ae	ad 8f 04	lda $048f			lda 	StringMemory+1
.b8b1	3a		dec a				dec 	a
.b8b2	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8b5	60		rts				rts
.b8b6					StringTempAllocate:
.b8b6	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8b8	b0 35		bcs $b8ef			bcs 	_STALength
.b8ba	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b8bd	30 05		bmi $b8c4			bmi 	_STAAllocate
.b8bf	48		pha				pha 								; save value to subtract.
.b8c0	20 a0 b8	jsr $b8a0			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8c3	68		pla				pla 								; restore it
.b8c4					_STAAllocate:
.b8c4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8c6	18		clc				clc  								; deliberate allows one more
.b8c7	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b8ca	8d 91 04	sta $0491			sta 	StringTempPointer
.b8cd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b8d0	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8d2	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b8d5	69 ff		adc #$ff			adc 	#$FF
.b8d7	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8da	85 3d		sta $3d				sta 	zsTemp+1
.b8dc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b8df	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b8e2	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b8e5	a9 10		lda #$10			lda 	#NSTString
.b8e7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b8ea	a9 00		lda #$00			lda 	#0 							; clear the target string
.b8ec	92 3c		sta ($3c)			sta 	(zsTemp)
.b8ee	60		rts				rts
.b8ef					_STALength:
.b8ef	a9 09		lda #$09		lda	#9
.b8f1	4c cd 9a	jmp $9acd		jmp	ErrorHandler
.b8f4					StringTempWrite:
.b8f4	48		pha				pha
.b8f5	92 3c		sta ($3c)			sta 	(zsTemp)
.b8f7	e6 3c		inc $3c				inc 	zsTemp
.b8f9	d0 02		bne $b8fd			bne 	_STWNoCarry
.b8fb	e6 3d		inc $3d				inc 	zsTemp+1
.b8fd					_STWNoCarry:
.b8fd	a9 00		lda #$00			lda 	#0
.b8ff	92 3c		sta ($3c)			sta 	(zsTemp)
.b901	68		pla				pla
.b902	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a82e					BackloadProgram:
.a82e	a2 ff		ldx #$ff			ldx 	#$FF
.a830	20 58 a8	jsr $a858			jsr 	BLReadByte
.a833	30 1f		bmi $a854			bmi 	_BPExit
.a835					_BPCopy:
.a835	e8		inx				inx  								; copy byte in
.a836	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a839	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a83c	20 58 a8	jsr $a858			jsr 	BLReadByte 					; read next byte
.a83f	30 0a		bmi $a84b			bmi 	_BPEndLine 					; -ve = EOL
.a841	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a843	d0 02		bne $a847			bne 	_BPNotTab
.a845	a9 20		lda #$20			lda 	#' '
.a847					_BPNotTab:
.a847	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a849	b0 ea		bcs $a835			bcs 	_BPCopy
.a84b					_BPEndLine:
.a84b	20 3e ac	jsr $ac3e			jsr 	TokeniseLine 				; tokenise the line.
.a84e	38		sec				sec 								; append not insert
.a84f	20 af b7	jsr $b7af			jsr 	MemoryInsertLine 			; append to current program
.a852	80 da		bra $a82e			bra 	BackloadProgram
.a854					_BPExit:
.a854	20 c2 8c	jsr $8cc2			jsr 	ClearCommand 				; clear variables etc.
.a857	60		rts				rts
.a858					BLReadByte:
.a858					_BLLoad:
.a858	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a85b	ee 59 a8	inc $a859			inc 	_BLLoad+1
.a85e	d0 03		bne $a863			bne 	_BLNoCarry
.a860	ee 5a a8	inc $a85a			inc 	_BLLoad+2
.a863					_BLNoCarry:
.a863	c9 00		cmp #$00			cmp 	#0
.a865	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a866					TokeniseSearchTable:
.a866	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a868	85 36		sta $36				sta 	zTemp0
.a86a	a0 00		ldy #$00			ldy 	#0
.a86c	a9 80		lda #$80			lda 	#$80 						; token #
.a86e	85 38		sta $38				sta 	zTemp1
.a870					_TSTLoop:
.a870	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a872	30 49		bmi $a8bd			bmi 	_TSTFail 					; -ve = end of table
.a874	f0 2e		beq $a8a4			beq 	_TSTNext 					; zero, check next it's a dummy
.a876	c8		iny				iny 								; get the hash
.a877	b1 36		lda ($36),y			lda 	(zTemp0),y
.a879	88		dey				dey
.a87a	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a87d	d0 25		bne $a8a4			bne 	_TSTNext
.a87f	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a882	38		sec				sec
.a883	ed 80 04	sbc $0480			sbc 	identStart
.a886	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a888	d0 1a		bne $a8a4			bne 	_TSTNext
.a88a	5a		phy				phy 								; save Y , we might fail
.a88b	c8		iny				iny 								; point to text
.a88c	c8		iny				iny
.a88d	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a890					_TSTCompareName:
.a890	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a893	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a895	d0 0c		bne $a8a3			bne 	_TSTNextPullY 				; fail, pullY and do next
.a897	e8		inx				inx
.a898	c8		iny				iny
.a899	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a89c	d0 f2		bne $a890			bne 	_TSTCompareName
.a89e	7a		ply				ply 								; throw Y
.a89f	a5 38		lda $38				lda 	zTemp1 						; get token #
.a8a1	38		sec				sec 								; return with CS = passed.
.a8a2	60		rts				rts
.a8a3					_TSTNextPullY:
.a8a3	7a		ply				ply 								; restore current, fall through.
.a8a4					_TSTNext:
.a8a4	e6 38		inc $38				inc 	zTemp1 						; token counter
.a8a6	98		tya				tya
.a8a7	18		clc				clc
.a8a8	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a8aa	1a		inc a				inc 	a 							; +1
.a8ab	1a		inc a				inc 	a 							; +2
.a8ac	a8		tay				tay
.a8ad	10 c1		bpl $a870			bpl 	_TSTLoop 					; if Y < $80 loop back
.a8af	98		tya				tya 								; add Y to zTemp0 and reset Y
.a8b0	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a8b2	18		clc				clc  								; but have tables > 255 bytes
.a8b3	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a8b5	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a8b7	90 b7		bcc $a870			bcc 	_TSTLoop
.a8b9	e6 37		inc $37				inc 	zTemp0+1
.a8bb	80 b3		bra $a870			bra 	_TSTLoop
.a8bd					_TSTFail:
.a8bd	18		clc				clc
.a8be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a8bf					KeywordSet0:
>a8bf	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8c1	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8c3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8c5	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a8cb	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a8d3	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a8d9	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a8e0	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a8e8	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a8ef	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a8f6	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a8fc	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a902	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a90a	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a911	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a918	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a91f	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a927	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a92d	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a933	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a93a	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a940	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a946	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a94e	28
>a94f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a957	28
>a958	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a95e	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a964	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a96a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a971	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a979	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a97f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a985	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a98a	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a98e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a994	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a99c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a9a3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a9aa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a9b2	43
>a9b3	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a9b9	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a9bf	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a9c6	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a9cc	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a9d0	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a9d6	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a9de	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a9e5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a9ea	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a9f1	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a9f9	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a9ff	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>aa04	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>aa0c	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>aa12	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>aa18	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>aa1d	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>aa24	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>aa2a	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>aa30	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>aa37	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>aa3c	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>aa42	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>aa49	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>aa4e	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>aa52	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>aa5a	45
>aa5b	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>aa63	45
>aa64	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>aa6a	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>aa71	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>aa77	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>aa7d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>aa82	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>aa8a	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>aa91	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>aa99	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aa9f	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aaa3	ff					.text	$FF
.aaa4					KeywordSet1:
>aaa4	00 65					.text	0,$65,""               ; $80 !0:EOF
>aaa6	00 58					.text	0,$58,""               ; $81 !1:SH1
>aaa8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aaaa	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aab2	4c 45
>aab4	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aabc	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aac4	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aac9	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aacf	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aad4	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aadc	45
>aadd	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aae2	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aaea	53
>aaeb	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>aaf1	ff					.text	$FF
.aaf2					KeywordSet2:
>aaf2	00 65					.text	0,$65,""               ; $80 !0:EOF
>aaf4	00 58					.text	0,$58,""               ; $81 !1:SH1
>aaf6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aaf8	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>aafd	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ab02	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ab07	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ab0c	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ab11	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ab16	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ab1b	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ab20	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ab25	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ab2a	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ab2f	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ab34	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ab39	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ab3e	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ab43	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ab48	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ab4d	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ab52	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ab57	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ab5c	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ab61	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ab66	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ab6b	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ab70	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ab75	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ab7a	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ab7f	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ab84	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>ab89	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>ab8e	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>ab93	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>ab98	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>ab9d	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>aba2	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aba7	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>abac	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>abb1	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>abb6	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>abbb	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>abc0	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>abc5	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>abca	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>abcf	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>abd4	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>abd9	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>abde	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>abe3	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>abe8	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>abed	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>abf2	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>abf7	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>abfc	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ac01	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ac06	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ac0b	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ac10	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ac15	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ac1a	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ac1f	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ac24	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ac29	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ac2e	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ac33	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ac38	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ac3d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ac3e					TokeniseLine:
.ac3e	20 c6 ad	jsr $adc6			jsr 	FixLineBufferCase 			; fix line case
.ac41	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ac43	8d a7 04	sta $04a7			sta 	tokenOffset
.ac46	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ac49	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ac4c	a2 ff		ldx #$ff			ldx 	#$FF
.ac4e					_TKFindFirst:
.ac4e	e8		inx				inx
.ac4f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac52	f0 79		beq $accd			beq 	_TKExit
.ac54	c9 20		cmp #$20			cmp 	#' '
.ac56	90 f6		bcc $ac4e			bcc 	_TKFindFirst
.ac58	c9 30		cmp #$30			cmp 	#'0'
.ac5a	90 07		bcc $ac63			bcc 	_TKNoLineNumber
.ac5c	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac5e	b0 03		bcs $ac63			bcs 	_TKNoLineNumber
.ac60	20 f0 ad	jsr $adf0			jsr 	TokeniseExtractLineNumber
.ac63					_TKNoLineNumber:
.ac63					_TKTokeniseLoop:
.ac63	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ac66	f0 65		beq $accd			beq 	_TKExit
.ac68	e8		inx				inx
.ac69	c9 20		cmp #$20			cmp 	#' '
.ac6b	f0 f6		beq $ac63			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ac6d	ca		dex				dex 								; undo last get, A contains character, X is position.
.ac6e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ac70	f0 61		beq $acd3			beq 	_TKTokeniseIdentifier
.ac72	c9 41		cmp #$41			cmp 	#'A'
.ac74	90 04		bcc $ac7a			bcc 	_TKTokenisePunctuation
.ac76	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ac78	90 59		bcc $acd3			bcc 	_TKTokeniseIdentifier
.ac7a					_TKTokenisePunctuation:
.ac7a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ac7c	f0 27		beq $aca5			beq 	_TKString
.ac7e	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ac80	f0 28		beq $acaa			beq 	_TKHexConstant
.ac82	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ac84	f0 29		beq $acaf			beq 	_TKCheckDouble
.ac86	c9 3e		cmp #$3e			cmp 	#'>'
.ac88	f0 25		beq $acaf			beq 	_TKCheckDouble
.ac8a					_TKStandardPunctuation:
.ac8a	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ac8d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ac8f	90 0e		bcc $ac9f			bcc 	_TKNoShift
.ac91	48		pha				pha 								; save
.ac92	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ac94	85 36		sta $36				sta 	zTemp0
.ac96	68		pla				pla
.ac97	29 20		and #$20			and 	#32 						; bit 5
.ac99	4a		lsr a				lsr 	a 							; shift into bit 3
.ac9a	4a		lsr a				lsr 	a
.ac9b	05 36		ora $36				ora 	zTemp0
.ac9d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.ac9f					_TKNoShift:
.ac9f	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte 			; write the punctuation character
.aca2	e8		inx				inx 								; consume the character
.aca3	80 be		bra $ac63			bra 	_TKTokeniseLoop 			; and loop round again.
.aca5					_TKString:
.aca5	20 55 ad	jsr $ad55			jsr 	TokeniseString
.aca8	80 b9		bra $ac63			bra 	_TKTokeniseLoop
.acaa					_TKHexConstant:
.acaa	20 90 ad	jsr $ad90			jsr 	TokeniseHexConstant
.acad	80 b4		bra $ac63			bra 	_TKTokeniseLoop
.acaf					_TKCheckDouble:
.acaf	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.acb2	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.acb4	90 d4		bcc $ac8a			bcc 	_TKStandardPunctuation
.acb6	c9 3f		cmp #$3f			cmp 	#'>'+1
.acb8	b0 d0		bcs $ac8a			bcs 	_TKStandardPunctuation
.acba	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.acbd	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.acbf	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.acc0	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.acc3	38		sec				sec
.acc4	e9 3c		sbc #$3c			sbc 	#'<'
.acc6	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.acc9	e8		inx				inx 								; consume both
.acca	e8		inx				inx
.accb	80 96		bra $ac63			bra 	_TKTokeniseLoop
.accd	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.accf	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.acd2	60		rts				rts
.acd3					_TKTokeniseIdentifier:
.acd3	8e 80 04	stx $0480			stx 	identStart 					; save start
.acd6	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.acd9					_TKCheckLoop:
.acd9	e8		inx				inx 								; look at next, we know first is identifier.
.acda	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.acdd	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.acdf	f0 f8		beq $acd9			beq 	_TKCheckLoop
.ace1	c9 30		cmp #$30			cmp	 	#"0"
.ace3	90 0c		bcc $acf1			bcc 	_TKEndIdentifier
.ace5	c9 3a		cmp #$3a			cmp 	#"9"+1
.ace7	90 f0		bcc $acd9			bcc 	_TKCheckLoop
.ace9	c9 41		cmp #$41			cmp	 	#"A"
.aceb	90 04		bcc $acf1			bcc 	_TKEndIdentifier
.aced	c9 5b		cmp #$5b			cmp 	#"Z"+1
.acef	90 e8		bcc $acd9			bcc 	_TKCheckLoop
.acf1					_TKEndIdentifier:
.acf1	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.acf4	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.acf6	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.acf8	f0 06		beq $ad00			beq 	_TKHasTypeCharacter
.acfa	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.acfc	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.acfe	d0 07		bne $ad07			bne 	_TKNoTypeCharacter
.ad00					_TKHasTypeCharacter:
.ad00	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ad03	e8		inx				inx 								; read next
.ad04	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad07					_TKNoTypeCharacter:
.ad07	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ad09	d0 09		bne $ad14			bne 	_TKNoArray
.ad0b	e8		inx				inx 								; skip the (
.ad0c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ad0f	09 04		ora #$04			ora 	#$04
.ad11	8d 84 04	sta $0484			sta 	identTypeByte
.ad14					_TKNoArray:
.ad14	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ad17	20 b1 ad	jsr $adb1			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ad1a	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.ad1c	a9 bf		lda #$bf			lda 	#(KeywordSet0) & $FF
.ad1e	20 66 a8	jsr $a866			jsr 	TokeniseSearchTable
.ad21	a2 00		ldx #$00			ldx 	#0
.ad23	b0 1f		bcs $ad44			bcs 	_TKFoundToken
.ad25	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ad27	a9 a4		lda #$a4			lda 	#(KeywordSet1) & $FF
.ad29	20 66 a8	jsr $a866			jsr 	TokeniseSearchTable
.ad2c	a2 81		ldx #$81			ldx 	#$81
.ad2e	b0 14		bcs $ad44			bcs 	_TKFoundToken
.ad30	a0 aa		ldy #$aa			ldy 	#(KeywordSet2) >> 8
.ad32	a9 f2		lda #$f2			lda 	#(KeywordSet2) & $FF
.ad34	20 66 a8	jsr $a866			jsr 	TokeniseSearchTable
.ad37	a2 82		ldx #$82			ldx 	#$82
.ad39	b0 09		bcs $ad44			bcs 	_TKFoundToken
.ad3b	20 41 ae	jsr $ae41			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ad3e	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad41	4c 63 ac	jmp $ac63			jmp 	_TKTokeniseLoop 			; and go round again.
.ad44					_TKFoundToken:
.ad44	48		pha				pha 								; save token
.ad45	8a		txa				txa 								; shift in X, is there one ?
.ad46	f0 03		beq $ad4b			beq 	_TKNoTShift
.ad48	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte 			; if so, write it out
.ad4b					_TKNoTShift:
.ad4b	68		pla				pla 								; restore and write token
.ad4c	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.ad4f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad52	4c 63 ac	jmp $ac63			jmp 	_TKTokeniseLoop 			; and go round again.
.ad55					TokeniseString:
.ad55	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ad57	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.ad5a	e8		inx				inx									; start of quoted string.
.ad5b	da		phx				phx 								; push start of string on top
.ad5c	ca		dex				dex
.ad5d					_TSFindEnd:
.ad5d	e8		inx				inx
.ad5e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ad61	f0 04		beq $ad67			beq 	_TSEndOfString
.ad63	c9 22		cmp #$22			cmp 	#'"'
.ad65	d0 f6		bne $ad5d			bne 	_TSFindEnd
.ad67					_TSEndOfString:
.ad67	7a		ply				ply  								; so now Y is first character, X is character after end.
.ad68	48		pha				pha 								; save terminating character
.ad69	20 71 ad	jsr $ad71			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ad6c	68		pla				pla 								; terminating character
.ad6d	f0 01		beq $ad70			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ad6f	e8		inx				inx
.ad70					_TSNotQuote:
.ad70	60		rts				rts
.ad71					TOWriteBlockXY:
.ad71	86 36		stx $36				stx 	zTemp0 						; write end character
.ad73	98		tya				tya
.ad74	49 ff		eor #$ff			eor 	#$FF
.ad76	38		sec				sec
.ad77	65 36		adc $36				adc 	zTemp0
.ad79	1a		inc a				inc 	a 							; one extra for NULL
.ad7a	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.ad7d					_TOBlockLoop:
.ad7d	c4 36		cpy $36				cpy 	zTemp0
.ad7f	f0 09		beq $ad8a			beq 	_TOBlockExit
.ad81	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ad84	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.ad87	c8		iny				iny
.ad88	80 f3		bra $ad7d			bra 	_TOBlockLoop
.ad8a					_TOBlockExit:
.ad8a	a9 00		lda #$00			lda 	#0
.ad8c	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.ad8f	60		rts				rts
.ad90					TokeniseHexConstant:
.ad90	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ad92	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.ad95	e8		inx				inx									; start of quoted string.
.ad96	da		phx				phx 								; push start of constant on top
.ad97	ca		dex				dex
.ad98					_THFindLoop:
.ad98	e8		inx				inx
.ad99	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad9c	c9 30		cmp #$30			cmp 	#"0"
.ad9e	90 0c		bcc $adac			bcc 	_THFoundEnd
.ada0	c9 3a		cmp #$3a			cmp 	#"9"+1
.ada2	90 f4		bcc $ad98			bcc 	_THFindLoop
.ada4	c9 41		cmp #$41			cmp 	#"A"
.ada6	90 04		bcc $adac			bcc 	_THFoundEnd
.ada8	c9 47		cmp #$47			cmp 	#"F"+1
.adaa	90 ec		bcc $ad98			bcc 	_THFindLoop
.adac					_THFoundEnd:
.adac	7a		ply				ply 								; restore start
.adad	20 71 ad	jsr $ad71			jsr 	TOWriteBlockXY 				; output the block
.adb0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.adb1					TokeniseCalculateHash:
.adb1	da		phx				phx
.adb2	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.adb5	a9 00		lda #$00			lda 	#0
.adb7					_TCHLoop:
.adb7	18		clc				clc
.adb8	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.adbb	e8		inx				inx
.adbc	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.adbf	d0 f6		bne $adb7			bne 	_TCHLoop
.adc1	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.adc4	fa		plx				plx
.adc5	60		rts				rts
.adc6					FixLineBufferCase:
.adc6	a2 00		ldx #$00			ldx 	#0
.adc8					_FLBCLoop:
.adc8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.adcb	f0 22		beq $adef			beq 	_FLBCExit 					; end of string.
.adcd	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.adcf	f0 11		beq $ade2			beq 	_FLBCInQuotes
.add1	e8		inx				inx
.add2	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.add4	90 f2		bcc $adc8			bcc 	_FLBCLoop
.add6	c9 7b		cmp #$7b			cmp 	#'z'+1
.add8	b0 ee		bcs $adc8			bcs 	_FLBCLoop
.adda	38		sec				sec 								; make U/C
.addb	e9 20		sbc #$20			sbc 	#32
.addd	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ade0	80 e6		bra $adc8			bra 	_FLBCLoop
.ade2					_FLBCInQuotes:
.ade2	e8		inx				inx 								; advance
.ade3	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.ade6	f0 07		beq $adef			beq 	_FLBCExit 					; exit on EOS
.ade8	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.adea	d0 f6		bne $ade2			bne 	_FLBCInQuotes
.adec	e8		inx				inx 								; skip over it
.aded	80 d9		bra $adc8			bra 	_FLBCLoop
.adef					_FLBCExit:
.adef	60		rts				rts
.adf0					TokeniseExtractLineNumber:
.adf0	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.adf3	48		pha				pha
.adf4	ad a8 04	lda $04a8			lda 	tokenLineNumber
.adf7	48		pha				pha
.adf8	20 2e ae	jsr $ae2e			jsr 	_TELNTimes2 				; line # x 4
.adfb	20 2e ae	jsr $ae2e			jsr 	_TELNTimes2 				; line # x 2
.adfe	18		clc				clc 								; add stacked value
.adff	68		pla				pla
.ae00	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae03	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae06	68		pla				pla
.ae07	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ae0a	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ae0d	20 2e ae	jsr $ae2e			jsr 	_TELNTimes2 				; line # x 10
.ae10	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ae13	e8		inx				inx
.ae14	29 0f		and #$0f			and 	#15 						; add to line #
.ae16	18		clc				clc
.ae17	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae1a	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae1d	90 03		bcc $ae22			bcc 	_TLENNoCarry
.ae1f	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ae22					_TLENNoCarry:
.ae22	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ae25	c9 30		cmp #$30			cmp 	#'0'
.ae27	90 04		bcc $ae2d			bcc 	_TLENExit
.ae29	c9 3a		cmp #$3a			cmp 	#'9'+1
.ae2b	90 c3		bcc $adf0			bcc 	TokeniseExtractLineNumber
.ae2d					_TLENExit:
.ae2d	60		rts				rts
.ae2e					_TELNTimes2:
.ae2e	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ae31	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ae34	60		rts				rts
.ae35					TokeniseWriteByte:
.ae35	da		phx				phx
.ae36	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ae39	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ae3c	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ae3f	fa		plx				plx
.ae40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ae41					CheckCreateVariableRecord:
.ae41	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ae43	85 36		sta $36				sta 	0+zTemp0
.ae45	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ae47	85 37		sta $37				sta 	1+zTemp0
.ae49					_CCVSearch:
.ae49	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ae4b	f0 2c		beq $ae79			beq 	_CCVFail
.ae4d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ae4f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ae51	cd 83 04	cmp $0483			cmp 	identHash
.ae54	d0 16		bne $ae6c			bne 	_CCVNext
.ae56	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ae58	ae 80 04	ldx $0480			ldx 	identStart
.ae5b					_CCVCompare:
.ae5b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ae5e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ae60	e8		inx				inx 								; advance pointers
.ae61	c8		iny				iny
.ae62	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ae63	d0 07		bne $ae6c			bne 	_CCVNext  					; didn't match go to next.
.ae65	90 f4		bcc $ae5b			bcc 	_CCVCompare 				; not finished yet.
.ae67	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ae6a	f0 41		beq $aead			beq 	_CCVFound 					; yes, we were successful
.ae6c					_CCVNext:
.ae6c	18		clc				clc
.ae6d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ae6f	65 36		adc $36				adc 	zTemp0
.ae71	85 36		sta $36				sta 	zTemp0
.ae73	90 d4		bcc $ae49			bcc 	_CCVSearch
.ae75	e6 37		inc $37				inc 	zTemp0+1
.ae77	80 d0		bra $ae49			bra 	_CCVSearch
.ae79					_CCVFail:
.ae79	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ae7b	ad 83 04	lda $0483			lda 	identHash
.ae7e	91 36		sta ($36),y			sta 	(zTemp0),y
.ae80	c8		iny				iny 								; offset 2 is the type byte
.ae81	ad 84 04	lda $0484			lda 	identTypeByte
.ae84	91 36		sta ($36),y			sta 	(zTemp0),y
.ae86	c8		iny				iny
.ae87					_CCVData:
.ae87	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ae89	91 36		sta ($36),y			sta 	(zTemp0),y
.ae8b	c8		iny				iny
.ae8c	c0 08		cpy #$08			cpy 	#8
.ae8e	90 f7		bcc $ae87			bcc 	_CCVData
.ae90	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ae93					_CCVCopyName:
.ae93	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ae96	91 36		sta ($36),y			sta 	(zTemp0),y
.ae98	e8		inx				inx
.ae99	c8		iny				iny
.ae9a	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ae9d	d0 f4		bne $ae93			bne 	_CCVCopyName
.ae9f	98		tya				tya 								; patch offset
.aea0	92 36		sta ($36)			sta 	(zTemp0)
.aea2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.aea4	91 36		sta ($36),y			sta 	(zTemp0),y
.aea6	88		dey				dey
.aea7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.aea9	09 80		ora #$80			ora 	#$80
.aeab	91 36		sta ($36),y			sta 	(zTemp0),y
.aead					_CCVFound:
.aead	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.aeaf	38		sec				sec
.aeb0	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aeb2	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aeb4	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.aeb7	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.aeb9	20 35 ae	jsr $ae35			jsr 	TokeniseWriteByte
.aebc	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
