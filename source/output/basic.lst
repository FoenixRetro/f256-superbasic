
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 10:32:34 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 15 83	jsr $8315			jsr 	NewCommand 					; erase current program
.8006	20 df 8f	jsr $8fdf			jsr 	BackloadProgram
.8009	4c a5 83	jmp $83a5			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 18 9c	jsr $9c18			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	3e 86					.word	ShiftLeft                        ; $00 <<
>8016	38 85					.word	BinaryCompareLessEqual           ; $01 <=
>8018	2e 85					.word	BinaryCompareNotEqual            ; $02 <>
>801a	fb 99					.word	SyntaxError                      ; $03 !!3
>801c	fb 99					.word	SyntaxError                      ; $04 ><
>801e	42 85					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	41 86					.word	ShiftRight                       ; $06 >>
>8022	fb 99					.word	SyntaxError                      ; $07 !!7
>8024	fb 99					.word	SyntaxError                      ; $08 !!8
>8026	fb 99					.word	SyntaxError                      ; $09 !!9
>8028	fb 99					.word	SyntaxError                      ; $0a !!10
>802a	fb 99					.word	SyntaxError                      ; $0b !!11
>802c	fb 99					.word	SyntaxError                      ; $0c !!12
>802e	fb 99					.word	SyntaxError                      ; $0d !!13
>8030	fb 99					.word	SyntaxError                      ; $0e !!14
>8032	fb 99					.word	SyntaxError                      ; $0f !!15
>8034	fb 99					.word	SyntaxError                      ; $10 @
>8036	fb 99					.word	SyntaxError                      ; $11 !!17
>8038	fb 99					.word	SyntaxError                      ; $12 !!18
>803a	fb 99					.word	SyntaxError                      ; $13 [
>803c	44 95					.word	IntegerDivide                    ; $14 \
>803e	fb 99					.word	SyntaxError                      ; $15 ]
>8040	c7 87					.word	EorInteger                       ; $16 ^
>8042	fb 99					.word	SyntaxError                      ; $17 _
>8044	fb 99					.word	SyntaxError                      ; $18 `
>8046	fb 99					.word	SyntaxError                      ; $19 !!25
>8048	fb 99					.word	SyntaxError                      ; $1a !!26
>804a	fb 99					.word	SyntaxError                      ; $1b {
>804c	81 87					.word	OraInteger                       ; $1c |
>804e	fb 99					.word	SyntaxError                      ; $1d }
>8050	fb 99					.word	SyntaxError                      ; $1e ~
>8052	fb 99					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	fb 99					.word	SyntaxError                      ; $20
>8056	0d 88					.word	WordIndirect                     ; $21 !
>8058	fb 99					.word	SyntaxError                      ; $22 "
>805a	fb 99					.word	SyntaxError                      ; $23 #
>805c	fb 99					.word	SyntaxError                      ; $24 $
>805e	91 95					.word	IntegerModulus                   ; $25 %
>8060	3b 87					.word	AndInteger                       ; $26 &
>8062	fb 99					.word	SyntaxError                      ; $27 '
>8064	fb 99					.word	SyntaxError                      ; $28 (
>8066	fb 99					.word	SyntaxError                      ; $29 )
>8068	06 96					.word	MulInteger                       ; $2a *
>806a	d5 86					.word	AddInteger                       ; $2b +
>806c	fb 99					.word	SyntaxError                      ; $2c ,
>806e	10 87					.word	SubInteger                       ; $2d -
>8070	fb 99					.word	SyntaxError                      ; $2e .
>8072	9d 97					.word	FDivideCommand                   ; $2f /
>8074	fb 99					.word	SyntaxError                      ; $30 0
>8076	fb 99					.word	SyntaxError                      ; $31 1
>8078	fb 99					.word	SyntaxError                      ; $32 2
>807a	fb 99					.word	SyntaxError                      ; $33 3
>807c	fb 99					.word	SyntaxError                      ; $34 4
>807e	fb 99					.word	SyntaxError                      ; $35 5
>8080	fb 99					.word	SyntaxError                      ; $36 6
>8082	fb 99					.word	SyntaxError                      ; $37 7
>8084	fb 99					.word	SyntaxError                      ; $38 8
>8086	fb 99					.word	SyntaxError                      ; $39 9
>8088	fb 99					.word	SyntaxError                      ; $3a :
>808a	fb 99					.word	SyntaxError                      ; $3b ;
>808c	1a 85					.word	BinaryCompareLess                ; $3c <
>808e	10 85					.word	BinaryCompareEqual               ; $3d =
>8090	24 85					.word	BinaryCompareGreater             ; $3e >
>8092	34 88					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	fa 83					.word	EOLCommand                       ; $80 !0:EOF
>8096	07 84					.word	Shift1Command                    ; $81 !1:SH1
>8098	fb 99					.word	SyntaxError                      ; $82 !2:SH2
>809a	e3 98					.word	AbsUnary                         ; $83 ABS(
>809c	77 8c					.word	AllocUnary                       ; $84 ALLOC(
>809e	f3 98					.word	AscUnary                         ; $85 ASC(
>80a0	14 8d					.word	ChrUnary                         ; $86 CHR$(
>80a2	0c 85					.word	UnaryFalse                       ; $87 FALSE
>80a4	00 99					.word	FracUnary                        ; $88 FRAC(
>80a6	16 99					.word	IntUnary                         ; $89 INT(
>80a8	6c 99					.word	IsValUnary                       ; $8a ISVAL(
>80aa	ee 8d					.word	Unary_Left                       ; $8b LEFT$(
>80ac	28 99					.word	LenUnary                         ; $8c LEN(
>80ae	18 8e					.word	Unary_Mid                        ; $8d MID$(
>80b0	b1 8c					.word	Unary_Not                        ; $8e NOT(
>80b2	fe 8d					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	c7 8c					.word	Unary_Rnd                        ; $90 RND(
>80b6	42 99					.word	SgnUnary                         ; $91 SGN(
>80b8	26 8d					.word	SpcUnary                         ; $92 SPC(
>80ba	41 8d					.word	Unary_Str                        ; $93 STR$(
>80bc	00 85					.word	UnaryTrue                        ; $94 TRUE
>80be	62 99					.word	ValUnary                         ; $95 VAL(
>80c0	78 81					.word	ForCommand                       ; $96 FOR
>80c2	bc 82					.word	IfCommand                        ; $97 IF
>80c4	0f 84					.word	Unused1                          ; $98 PROC
>80c6	83 83					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	6c 84					.word	Command_WHILE                    ; $9a WHILE
>80ca	e5 82					.word	EndIf                            ; $9b ENDIF
>80cc	fb 99					.word	SyntaxError                      ; $9c ENDPROC
>80ce	32 82					.word	NextCommand                      ; $9d NEXT
>80d0	fb 99					.word	SyntaxError                      ; $9e THEN
>80d2	8c 83					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	8d 84					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	fb 99					.word	SyntaxError                      ; $a2 CLS
>80da	fb 99					.word	SyntaxError                      ; $a3 DATA
>80dc	fb 99					.word	SyntaxError                      ; $a4 DIM
>80de	0f 84					.word	Unused3                          ; $a5 DOWNTO
>80e0	de 82					.word	ElseCode                         ; $a6 ELSE
>80e2	8b 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	a9 82					.word	GotoCommand                      ; $a8 GOTO
>80e6	e6 82					.word	LetCommand                       ; $a9 LET
>80e8	1f 83					.word	Command_Print                    ; $aa PRINT
>80ea	fb 99					.word	SyntaxError                      ; $ab READ
>80ec	76 83					.word	RemCommand                       ; $ac REM
>80ee	9b 82					.word	Command_RETURN                   ; $ad RETURN
>80f0	0f 84					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	fb 99					.word	SyntaxError                      ; $80 !0:EOF
>80f4	fb 99					.word	SyntaxError                      ; $81 !1:SH1
>80f6	fb 99					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	75 81					.word	EndCommand                       ; $85 END
>80fe	fb 99					.word	SyntaxError                      ; $86 LIST
>8100	15 83					.word	NewCommand                       ; $87 NEW
>8102	fb 99					.word	SyntaxError                      ; $88 RESTORE
>8104	a5 83					.word	CommandRUN                       ; $89 RUN
>8106	fb 99					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	fb 99					.word	SyntaxError                      ; $80 !0:EOF
>810a	fb 99					.word	SyntaxError                      ; $81 !1:SH1
>810c	fb 99					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 b9 8e	jsr $8eb9			jsr 	EvaluateInteger 			; the assert test
.8113	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 9b 84	jmp $849b		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 ce 8e	jsr $8ece			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 d2 8f	jsr $8fd2			jsr 	StackReset
.816e	20 8e 9b	jsr $9b8e			jsr 	StringSystemInitialise
.8171	20 1c 90	jsr $901c			jsr 	ProcedureScan
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8175					EndCommand:
.8175	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8178					ForCommand:
.8178	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.817a	20 7f 8f	jsr $8f7f			jsr 	StackOpen
.817d	a2 00		ldx #$00			ldx 	#0
.817f	20 6e 8b	jsr $8b6e			jsr 	EvaluateTerm
.8182	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8185	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8187	d0 49		bne $81d2			bne		_FCError
.8189	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.818b	20 3b 95	jsr $953b			jsr 	CheckNextA
.818e	e8		inx				inx
.818f	20 b9 8e	jsr $8eb9			jsr 	EvaluateInteger 			; <from> in +1
.8192	b1 30		lda ($30),y			lda 	(codePtr),y
.8194	c8		iny				iny 								; consume it
.8195	48		pha				pha 								; save on stack for later
.8196	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8198	f0 04		beq $819e			beq 	_FCNoSyntax
.819a	c9 ae		cmp #$ae			cmp 	#KWD_TO
.819c	d0 37		bne $81d5			bne 	_FCSyntaxError
.819e					_FCNoSyntax:
.819e	e8		inx				inx
.819f	20 b9 8e	jsr $8eb9			jsr 	EvaluateInteger
.81a2	20 b1 8f	jsr $8fb1			jsr 	STKSaveCodePosition 		; save loop back position
.81a5	68		pla				pla 								; restore DOWNTO or TO
.81a6	5a		phy				phy 								; save Y on the stack
.81a7	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.81a9	f0 02		beq $81ad			beq 	_FCNotDownTo
.81ab	a9 02		lda #$02			lda 	#2
.81ad					_FCNotDownTo:
.81ad	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.81ae	a0 10		ldy #$10			ldy 	#16
.81b0	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81b2	a0 06		ldy #$06			ldy 	#6
.81b4	ad 08 06	lda $0608			lda 	NSMantissa0
.81b7	91 34		sta ($34),y			sta 	(basicStack),y
.81b9	ad 10 06	lda $0610			lda 	NSMantissa1
.81bc	c8		iny				iny
.81bd	91 34		sta ($34),y			sta 	(basicStack),y
.81bf	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.81c1	a2 01		ldx #$01			ldx 	#1
.81c3	20 d8 81	jsr $81d8			jsr 	FCIntegerToStack
.81c6	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.81c8	a2 02		ldx #$02			ldx 	#2
.81ca	20 d8 81	jsr $81d8			jsr 	FCIntegerToStack
.81cd	20 f8 81	jsr $81f8			jsr 	CopyIndexToReference
.81d0	7a		ply				ply 								; restore position
.81d1	60		rts				rts
.81d2					_FCError:
.81d2	4c 05 9a	jmp $9a05			jmp 	TypeError
.81d5					_FCSyntaxError:
.81d5	4c fb 99	jmp $99fb			jmp 	SyntaxError
.81d8					FCIntegerToStack:
.81d8	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81db	10 03		bpl $81e0			bpl	 	_FCNotNegative
.81dd	20 f7 8e	jsr $8ef7			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81e0					_FCNotNegative:
.81e0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81e3	91 34		sta ($34),y			sta 	(basicStack),y
.81e5	c8		iny				iny
.81e6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81e9	91 34		sta ($34),y			sta 	(basicStack),y
.81eb	c8		iny				iny
.81ec	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81ef	91 34		sta ($34),y			sta 	(basicStack),y
.81f1	c8		iny				iny
.81f2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81f5	91 34		sta ($34),y			sta 	(basicStack),y
.81f7	60		rts				rts
.81f8					CopyIndexToReference:
.81f8	5a		phy				phy
.81f9	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.81fb	38		sec				sec 								; (because we copy from offset 8)
.81fc	b1 34		lda ($34),y			lda 	(basicStack),y
.81fe	e9 08		sbc #$08			sbc 	#8
.8200	85 36		sta $36				sta 	zTemp0
.8202	c8		iny				iny
.8203	b1 34		lda ($34),y			lda 	(basicStack),y
.8205	e9 00		sbc #$00			sbc 	#0
.8207	85 37		sta $37				sta 	zTemp0+1
.8209	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.820b	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.820d	b1 34		lda ($34),y			lda 	(basicStack),y
.820f	0a		asl a				asl 	a 							; into carry
.8210	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8212	90 14		bcc $8228			bcc 	_CITRNormal
.8214	38		sec				sec
.8215					_CITRNegative:
.8215	a9 00		lda #$00			lda 	#0
.8217	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8219	91 36		sta ($36),y			sta 	(zTemp0),y
.821b	c8		iny				iny
.821c	ca		dex				dex
.821d	d0 f6		bne $8215			bne 	_CITRNegative
.821f	88		dey				dey 								; look at MSB of mantissa
.8220	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8222	09 80		ora #$80			ora 	#$80
.8224	91 36		sta ($36),y			sta 	(zTemp0),y
.8226	7a		ply				ply
.8227	60		rts				rts
.8228					_CITRNormal:
.8228	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.822a	91 36		sta ($36),y			sta 	(zTemp0),y
.822c	c8		iny				iny
.822d	ca		dex				dex
.822e	d0 f8		bne $8228			bne 	_CITRNormal
.8230	7a		ply				ply 								; and exit.
.8231	60		rts				rts
.8232					NextCommand:
.8232	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8234	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8236	20 a6 8f	jsr $8fa6			jsr 	StackCheckFrame
.8239	5a		phy				phy
.823a	a0 10		ldy #$10			ldy 	#16 						; get the step count
.823c	b1 34		lda ($34),y			lda 	(basicStack),y
.823e	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8240	30 02		bmi $8244			bmi 	_NCStepNeg
.8242	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8244					_NCStepNeg:
.8244	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8246	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8248	18		clc				clc
.8249					_NCBump:
.8249	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.824b	91 34		sta ($34),y			sta 	(basicStack),y
.824d	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.824f	c8		iny				iny 								; next byte
.8250	ca		dex				dex 								; do four times
.8251	d0 f6		bne $8249			bne 	_NCBump
.8253	20 f8 81	jsr $81f8			jsr		CopyIndexToReference		; copy it to the reference variable.
.8256	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8258	b1 34		lda ($34),y			lda 	(basicStack),y
.825a	0a		asl a				asl 	a 							; sign bit to carry
.825b	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.825d	85 38		sta $38				sta 	zTemp1
.825f	90 02		bcc $8263			bcc 	_NCCompRev 					; use if step is +ve
.8261	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8263					_NCCompRev:
.8263	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8265	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8267	85 39		sta $39				sta 	zTemp1+1
.8269	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.826b	38		sec				sec
.826c					_NCCompare:
.826c	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.826e	b1 34		lda ($34),y			lda 	(basicStack),y
.8270	a4 39		ldy $39				ldy 	zTemp1+1
.8272	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8274	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8276	e6 39		inc $39				inc 	zTemp1+1
.8278	ca		dex				dex 								; do it 4 times.
.8279	d0 f1		bne $826c			bne 	_NCCompare
.827b	50 02		bvc $827f			bvc 	_NCNoOverflow 				; convert to signed comparison
.827d	49 80		eor #$80			eor 	#$80
.827f					_NCNoOverflow:
.827f	7a		ply				ply 								; restore Y position
.8280	0a		asl a				asl 	a 							; is bit 7 set.
.8281	90 04		bcc $8287			bcc 	_NCLoopback 				; if no , >= so loop back
.8283	20 98 8f	jsr $8f98			jsr 	StackClose 					; exit the loop
.8286	60		rts				rts
.8287					_NCLoopBack:
.8287	20 c2 8f	jsr $8fc2			jsr 	STKLoadCodePosition 		; loop back
.828a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.828b					Command_GOSUB:
.828b	a2 00		ldx #$00			ldx 	#0
.828d	20 ce 8e	jsr $8ece			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8290	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8292	20 7f 8f	jsr $8f7f			jsr 	StackOpen 					; create frame
.8295	20 b1 8f	jsr $8fb1			jsr 	STKSaveCodePosition 		; save current position
.8298	4c ae 82	jmp $82ae			jmp 	GotoStackX
.829b					Command_RETURN:
.829b	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.829d	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.829f	20 a6 8f	jsr $8fa6			jsr 	StackCheckFrame
.82a2	20 c2 8f	jsr $8fc2			jsr 	STKLoadCodePosition 		; restore code position
.82a5	20 98 8f	jsr $8f98			jsr 	StackClose
.82a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.82a9					GotoCommand:
.82a9	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.82ab	20 ce 8e	jsr $8ece			jsr 	Evaluate16BitInteger
.82ae					GotoStackX:
.82ae	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.82b1	48		pha				pha 								; it is slightly inefficient, just in cases.
.82b2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.82b5	fa		plx				plx
.82b6	20 f9 94	jsr $94f9			jsr 	MemoryTransferAX 			; transfer to line number AX.
.82b9	4c b0 83	jmp $83b0			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.82bc					IfCommand:
.82bc	a2 00		ldx #$00			ldx 	#0 							; If what.
.82be	20 96 8e	jsr $8e96			jsr 	EvaluateNumber
.82c1	b1 30		lda ($30),y			lda 	(codePtr),y
.82c3	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.82c5	d0 0a		bne $82d1			bne 	_IFStructured
.82c7	c8		iny				iny 								; consume THEN
.82c8	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; is it zero
.82cb	f0 01		beq $82ce			beq 	_IfFail 					; if fail, go to next line
.82cd	60		rts				rts 								; if THEN just continue
.82ce					_IfFail:
.82ce	4c fa 83	jmp $83fa			jmp 	EOLCommand
.82d1					_IfStructured:
.82d1	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; is it zero
.82d4	d0 07		bne $82dd			bne 	_IfExit 					; if not, then continue normally.
.82d6	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.82d8	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.82da	20 12 84	jsr $8412			jsr 	ScanForward 				; and run from there/
.82dd					_IfExit:
.82dd	60		rts				rts
.82de					ElseCode:
.82de	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.82e0	aa		tax				tax 								; so just go to the structure exit
.82e1	20 12 84	jsr $8412			jsr 	ScanForward
.82e4	60		rts				rts
.82e5					EndIf:
.82e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.82e6					LetCommand:
.82e6	a2 00		ldx #$00			ldx 	#0
.82e8	ad 85 88	lda $8885			lda 	PrecedenceLevel+"*"			; precedence > this
.82eb	20 9f 88	jsr $889f			jsr 	EvaluateExpressionAtPrecedence
.82ee	a9 3d		lda #$3d			lda 	#"=" 						; check =
.82f0	20 3b 95	jsr $953b			jsr 	CheckNextA
.82f3	e8		inx				inx 								; RHS
.82f4	20 8d 8e	jsr $8e8d			jsr 	EvaluateValue
.82f7	ca		dex				dex
.82f8	20 fc 82	jsr $82fc			jsr 	AssignVariable
.82fb	60		rts				rts
.82fc					AssignVariable:
.82fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.82ff	48		pha				pha 								; save a copy
.8300	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8303	29 10		and #$10			and 	#NSBIsString
.8305	d0 0b		bne $8312			bne 	_ASError
.8307	68		pla				pla 								; get back
.8308	29 10		and #$10			and 	#NSBIsString 				; check type
.830a	d0 03		bne $830f			bne 	_ASString
.830c	4c da 88	jmp $88da			jmp 	AssignNumber
.830f					_ASString:
.830f	4c 48 89	jmp $8948			jmp 	AssignString
.8312					_ASError:
.8312	4c 05 9a	jmp $9a05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8315					NewCommand:
.8315	20 a8 94	jsr $94a8			jsr 	MemoryNew
.8318	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.831b	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.831e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.831f					Command_Print:
.831f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8320					_CPLoop:
.8320	08		php				php 								; save last action flag
.8321	b1 30		lda ($30),y			lda 	(codePtr),y
.8323	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8325	f0 46		beq $836d			beq 	_CPExit
.8327	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8329	f0 42		beq $836d			beq 	_CPExit
.832b	68		pla				pla 								; throw last action flag
.832c	b1 30		lda ($30),y			lda 	(codePtr),y
.832e	c8		iny				iny
.832f	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8331	f0 37		beq $836a			beq 	_CPContinueWithSameLine
.8333	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8335	f0 2e		beq $8365			beq 	_CPTab
.8337	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8339	f0 26		beq $8361			beq 	_CPNewLine
.833b	88		dey				dey 								; undo the get.
.833c	a2 00		ldx #$00			ldx 	#0
.833e	20 8d 8e	jsr $8e8d			jsr 	EvaluateValue 				; get a value into slot 0
.8341	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8344	29 10		and #$10			and 	#NSBIsString
.8346	f0 0b		beq $8353			beq 	_CPNumber
.8348	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.834b	ad 08 06	lda $0608			lda 	NSMantissa0
.834e	20 ed 84	jsr $84ed			jsr 	PrintStringXA
.8351	80 cc		bra $831f			bra 	Command_Print 				; loop round clearing carry so NL if end
.8353					_CPNumber:
.8353	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8355	20 63 8d	jsr $8d63			jsr 	ConvertNumberToString 		; convert to string
.8358	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.835a	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.835c	20 ed 84	jsr $84ed			jsr 	PrintStringXA
.835f	80 be		bra $831f			bra 	Command_Print 				; loop round clearing carry so NL if end
.8361					_CPNewLine:
.8361	a9 0d		lda #$0d			lda 	#13
.8363	80 02		bra $8367			bra 	_CPPrintChar
.8365					_CPTab:
.8365	a9 09		lda #$09			lda 	#9 							; print TAB
.8367					_CPPrintChar:
.8367	20 18 9c	jsr $9c18			jsr 	EXTPrintCharacter
.836a					_CPContinueWithSameLine:
.836a	38		sec				sec 								; loop round with carry set, which
.836b	80 b3		bra $8320			bra 	_CPLoop 					; will inhibit final CR
.836d					_CPExit:
.836d	28		plp				plp 								; get last action flag
.836e	b0 05		bcs $8375			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8370	a9 0d		lda #$0d			lda 	#13 						; print new line
.8372	20 18 9c	jsr $9c18			jsr 	EXTPrintCharacter
.8375					_CPExit2:
.8375	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8376					RemCommand:
.8376	b1 30		lda ($30),y			lda 	(codePtr),y
.8378	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.837a	d0 06		bne $8382			bne 	_RMExit
.837c	c8		iny				iny
.837d	98		tya				tya
.837e	38		sec				sec
.837f	71 30		adc ($30),y			adc 	(codePtr),y
.8381	a8		tay				tay
.8382					_RMExit:
.8382	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8383					Command_REPEAT:
.8383	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8385	20 7f 8f	jsr $8f7f			jsr 	StackOpen
.8388	20 b1 8f	jsr $8fb1			jsr 	STKSaveCodePosition 		; save loop position
.838b	60		rts				rts
.838c					Command_UNTIL:
.838c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.838e	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8390	20 a6 8f	jsr $8fa6			jsr 	StackCheckFrame
.8393	a2 00		ldx #$00			ldx 	#0
.8395	20 96 8e	jsr $8e96			jsr 	EvaluateNumber 				; work out the number
.8398	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; check if zero
.839b	f0 04		beq $83a1			beq 	_CULoopBack 				; if so keep looping
.839d	20 98 8f	jsr $8f98			jsr 	StackClose		 			; return
.83a0	60		rts				rts
.83a1					_CULoopBack:
.83a1	20 c2 8f	jsr $8fc2			jsr 	STKLoadCodePosition 		; loop back
.83a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.83a5					CommandRUN:
.83a5	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.83a8	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.83aa	85 30		sta $30				sta 	codePtr
.83ac	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.83ae	85 31		sta $31				sta 	codePtr+1
.83b0					RUNNewLine:
.83b0	b2 30		lda ($30)			lda 	(codePtr)
.83b2	f0 43		beq $83f7			beq 	CRNoProgram         		; no then END.
.83b4	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.83b6	9a		txs				txs
.83b7					RUNCodePointerLine:
.83b7	a0 02		ldy #$02			ldy 	#2 							; start of program
.83b9					_CRIncMainLoop:
.83b9	c8		iny				iny
.83ba					_CRMainLoop:
.83ba	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.83bd	b1 30		lda ($30),y			lda 	(codePtr),y
.83bf	10 10		bpl $83d1			bpl 	_CRNotKeyword
.83c1	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.83c3	b0 04		bcs $83c9			bcs 	_CRIsKeyword
.83c5	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.83c7	b0 28		bcs $83f1			bcs		_CRSyntaxError
.83c9					_CRIsKeyword:
.83c9	c8		iny				iny 								; consume command
.83ca	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.83cb	aa		tax				tax 								; put in X for vector jump
.83cc	20 f4 83	jsr $83f4			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.83cf	80 e9		bra $83ba			bra 	_CRMainLoop 				; and loop round
.83d1					_CRNotKeyword:
.83d1	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.83d3	f0 e4		beq $83b9			beq 	_CRIncMainLoop
.83d5	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.83d7	90 05		bcc $83de			bcc 	_CRNotVariable
.83d9					_CRGoLet:
.83d9	20 e6 82	jsr $82e6			jsr 	LetCommand
.83dc	80 dc		bra $83ba			bra 	_CRMainLoop
.83de					_CRNotVariable:
.83de	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.83e0	f0 f7		beq $83d9			beq 	_CRGoLet
.83e2	c9 21		cmp #$21			cmp 	#KWD_PLING
.83e4	f0 f3		beq $83d9			beq 	_CRGoLet
.83e6	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.83e8	f0 01		beq $83eb			beq 	_CRGoRem
>83ea	db						.byte 	$DB 						; causes a break in the emulator
.83eb					_CRGoRem:
.83eb	c8		iny				iny
.83ec	20 76 83	jsr $8376			jsr 	RemCommand
.83ef	80 c9		bra $83ba			bra 	_CRMainLoop
.83f1					_CRSyntaxError:
.83f1	4c fb 99	jmp $99fb			jmp 	SyntaxError
.83f4					_CRCallVector0:
.83f4	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.83f7					CRNoProgram:
.83f7	4c 75 81	jmp $8175			jmp 	EndCommand
.83fa					EOLCommand:
.83fa	18		clc				clc
.83fb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.83fd	65 30		adc $30				adc 	codePtr
.83ff	85 30		sta $30				sta 	codePtr
.8401	90 02		bcc $8405			bcc 	_CREExit
.8403	e6 31		inc $31				inc 	codePtr+1
.8405					_CREExit:
.8405	80 a9		bra $83b0			bra 	RunNewLine
.8407					Shift1Command:
.8407	b1 30		lda ($30),y			lda 	(codePtr),y
.8409	c8		iny				iny
.840a	0a		asl a				asl 	a
.840b	aa		tax				tax
.840c	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.840f					Unused1:
.840f					Unused2:
.840f					Unused3:
.840f	4c fb 99	jmp $99fb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8412					ScanForward:
.8412	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8414	86 37		stx $37				stx 	zTemp0+1
.8416	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8418					_ScanLoop:
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	c8		iny				iny
.841b	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.841d	d0 09		bne $8428			bne 	_ScanGoNext
.841f	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8421	f0 04		beq $8427			beq 	_ScanMatch
.8423	c5 37		cmp $37				cmp 	zTemp0+1
.8425	d0 01		bne $8428			bne 	_ScanGoNext
.8427					_ScanMatch:
.8427	60		rts				rts
.8428					_ScanGoNext:
.8428	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.842a	90 ec		bcc $8418			bcc 	_ScanLoop
.842c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.842e	90 18		bcc $8448			bcc 	_ScanSkipOne
.8430	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8432	b0 2f		bcs $8463			bcs 	_ScanSkipData
.8434	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8436	90 e0		bcc $8418			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8438	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.843a	b0 dc		bcs $8418			bcs 	_ScanLoop
.843c	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.843e	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8440	b0 d6		bcs $8418			bcs 	_ScanLoop
.8442	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8444	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8446	80 d0		bra $8418			bra 	_ScanLoop
.8448					_ScanSkipOne:
.8448	c8		iny				iny 								; consume the extra one.
.8449	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.844b	d0 cb		bne $8418			bne 	_ScanLoop
.844d	18		clc				clc
.844e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8450	65 30		adc $30				adc 	codePtr
.8452	85 30		sta $30				sta 	codePtr
.8454	90 02		bcc $8458			bcc 	_CREExit
.8456	e6 31		inc $31				inc 	codePtr+1
.8458					_CREExit:
.8458	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.845a	b2 30		lda ($30)			lda 	(codePtr)
.845c	d0 ba		bne $8418			bne 	_ScanLoop 					; if not zero, more to scan
.845e	a9 13		lda #$13		lda	#19
.8460	4c 9b 84	jmp $849b		jmp	ErrorHandler
.8463					_ScanSkipData:
.8463	88		dey				dey 								; point at data token
.8464	c8		iny				iny
.8465	98		tya				tya
.8466	38		sec				sec
.8467	71 30		adc ($30),y			adc 	(codePtr),y
.8469	a8		tay				tay
.846a	80 ac		bra $8418			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.846c					Command_WHILE:
.846c	5a		phy				phy 								; save position of the test
.846d	a2 00		ldx #$00			ldx 	#0
.846f	20 96 8e	jsr $8e96			jsr 	EvaluateNumber 				; work out the number
.8472	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; check if zero
.8475	f0 0e		beq $8485			beq 	_WHExitLoop 				; if so exit the loop
.8477	98		tya				tya 								; position *after* test.
.8478	7a		ply				ply 								; restore position before test, at WHILE
.8479	88		dey				dey
.847a	48		pha				pha 								; push after test on the stack
.847b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.847d	20 7f 8f	jsr $8f7f			jsr 	StackOpen
.8480	20 b1 8f	jsr $8fb1			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8483	7a		ply				ply 								; restore the position *after* the test
.8484	60		rts				rts
.8485					_WHExitLoop:
.8485	68		pla				pla 								; throw post loop position
.8486	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8488	aa		tax				tax
.8489	20 12 84	jsr $8412			jsr 	ScanForward
.848c	60		rts				rts
.848d					Command_WEND:
.848d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.848f	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8491	20 a6 8f	jsr $8fa6			jsr 	StackCheckFrame
.8494	20 c2 8f	jsr $8fc2			jsr 	STKLoadCodePosition 		; loop back
.8497	20 98 8f	jsr $8f98			jsr 	StackClose		 			; erase the frame
.849a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.952b					CheckRightBracket:
.952b	b1 30		lda ($30),y			lda 	(codePtr),y
.952d	c8		iny				iny
.952e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9530	d0 0f		bne $9541			bne 	CNAFail
.9532	60		rts				rts
.9533					CheckComma:
.9533	b1 30		lda ($30),y			lda 	(codePtr),y
.9535	c8		iny				iny
.9536	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9538	d0 07		bne $9541			bne 	CNAFail
.953a	60		rts				rts
.953b					CheckNextA:
.953b	d1 30		cmp ($30),y			cmp 	(codePtr),y
.953d	d0 02		bne $9541			bne 	CNAFail
.953f	c8		iny				iny 								; skip character
.9540	60		rts				rts 								; and exit
.9541					CNAFail:
.9541	4c fb 99	jmp $99fb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.849b					ErrorHandler:
.849b	a8		tay				tay 								; find the error text
.849c	f0 42		beq $84e0			beq 	_EHEnd
.849e	a2 00		ldx #$00			ldx 	#0
.84a0					_EHFind:
.84a0	88		dey				dey 								; found the error text ?
.84a1	f0 0a		beq $84ad			beq 	_EHFound
.84a3					_EHFindZero:
.84a3	bd 14 9a	lda $9a14,x			lda 	ErrorText,x 				; find the next error
.84a6	e8		inx				inx
.84a7	c9 00		cmp #$00			cmp 	#0
.84a9	d0 f8		bne $84a3			bne 	_EHFindZero
.84ab	80 f3		bra $84a0			bra 	_EHFind
.84ad					_EHFound:
.84ad	bd 14 9a	lda $9a14,x			lda 	ErrorText,x 				; print the message
.84b0	20 18 9c	jsr $9c18			jsr 	EXTPrintCharacter
.84b3	e8		inx				inx
.84b4	bd 14 9a	lda $9a14,x			lda 	ErrorText,x
.84b7	d0 f4		bne $84ad			bne 	_EHFound
.84b9	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.84bb	b1 30		lda ($30),y			lda 	(codePtr),y
.84bd	d0 05		bne $84c4			bne 	_EHAtMsg
.84bf	c8		iny				iny
.84c0	b1 30		lda ($30),y			lda 	(codePtr),y
.84c2	f0 17		beq $84db			beq 	_EHCREnd
.84c4					_EHAtMsg:
.84c4	a2 84		ldx #$84			ldx 	#_AtMsg >> 8 				; print " at "
.84c6	a9 e3		lda #$e3			lda 	#_AtMsg & $FF
.84c8	20 ed 84	jsr $84ed			jsr 	PrintStringXA
.84cb	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.84cd	b1 30		lda ($30),y			lda 	(codePtr),y
.84cf	48		pha				pha
.84d0	c8		iny				iny
.84d1	b1 30		lda ($30),y			lda 	(codePtr),y
.84d3	aa		tax				tax
.84d4	68		pla				pla
.84d5	20 87 96	jsr $9687			jsr 	ConvertInt16 				; convert XA to string
.84d8	20 ed 84	jsr $84ed			jsr 	PrintStringXA 				; and print it.
.84db					_EHCREnd:
.84db	a9 0d		lda #$0d			lda 	#13 						; new line
.84dd	20 18 9c	jsr $9c18			jsr 	EXTPrintCharacter
.84e0					_EHEnd:
.84e0	4c 0c 80	jmp $800c			jmp 	WarmStart
>84e3	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>84eb	20 00
.84ed					PrintStringXA:
.84ed	5a		phy				phy
.84ee	86 37		stx $37				stx 	zTemp0+1
.84f0	85 36		sta $36				sta 	zTemp0
.84f2	a0 00		ldy #$00			ldy 	#0
.84f4					_PSXALoop:
.84f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.84f6	f0 06		beq $84fe			beq 	_PSXAExit
.84f8	20 18 9c	jsr $9c18			jsr 	EXTPrintCharacter
.84fb	c8		iny				iny
.84fc	80 f6		bra $84f4			bra 	_PSXALoop
.84fe					_PSXAExit:
.84fe	7a		ply				ply
.84ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8500					UnaryTrue:
.8500	fa		plx				plx
.8501					ReturnTrue:
.8501	a9 01		lda #$01			lda 	#1  						; set to 1
.8503	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.8506	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8508	9d 00 06	sta $0600,x			sta 	NSStatus,x
.850b	60		rts				rts
.850c					UnaryFalse:
.850c	fa		plx				plx
.850d					ReturnFalse:
.850d	4c 42 8f	jmp $8f42			jmp 	NSMSetZero 					; set it all to zero
.8510					BinaryCompareEqual:
.8510	fa		plx				plx
.8511	20 4c 85	jsr $854c			jsr 	CompareBaseCode
.8514	c9 00		cmp #$00			cmp 	#0
.8516	f0 e9		beq $8501			beq 	ReturnTrue
.8518	80 f3		bra $850d			bra 	ReturnFalse
.851a					BinaryCompareLess:
.851a	fa		plx				plx
.851b	20 4c 85	jsr $854c			jsr 	CompareBaseCode
.851e	c9 ff		cmp #$ff			cmp 	#$FF
.8520	f0 df		beq $8501			beq 	ReturnTrue
.8522	80 e9		bra $850d			bra 	ReturnFalse
.8524					BinaryCompareGreater:
.8524	fa		plx				plx
.8525	20 4c 85	jsr $854c			jsr 	CompareBaseCode
.8528	c9 01		cmp #$01			cmp 	#1
.852a	f0 d5		beq $8501			beq 	ReturnTrue
.852c	80 df		bra $850d			bra 	ReturnFalse
.852e					BinaryCompareNotEqual:
.852e	fa		plx				plx
.852f	20 4c 85	jsr $854c			jsr 	CompareBaseCode
.8532	c9 00		cmp #$00			cmp 	#0
.8534	d0 cb		bne $8501			bne 	ReturnTrue
.8536	80 d5		bra $850d			bra 	ReturnFalse
.8538					BinaryCompareLessEqual:
.8538	fa		plx				plx
.8539	20 4c 85	jsr $854c			jsr 	CompareBaseCode
.853c	c9 01		cmp #$01			cmp 	#1
.853e	d0 c1		bne $8501			bne 	ReturnTrue
.8540	80 cb		bra $850d			bra 	ReturnFalse
.8542					BinaryCompareGreaterEqual:
.8542	fa		plx				plx
.8543	20 4c 85	jsr $854c			jsr 	CompareBaseCode
.8546	c9 ff		cmp #$ff			cmp 	#$FF
.8548	d0 b7		bne $8501			bne 	ReturnTrue
.854a	80 c1		bra $850d			bra 	ReturnFalse
.854c					CompareBaseCode:
.854c	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; make both values if references.
.854f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8552	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8555	29 10		and #$10			and 	#NSTString
.8557	d0 40		bne $8599			bne 	_CBCString
.8559	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.855c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.855f	d0 3b		bne $859c			bne 	_CBCFloat
.8561	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8564	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8567	29 08		and #$08			and 	#NSTFloat
.8569	d0 31		bne $859c			bne 	_CBCFloat
.856b	20 9f 85	jsr $859f			jsr 	CompareFixMinusZero
.856e	e8		inx				inx
.856f	20 9f 85	jsr $859f			jsr 	CompareFixMinusZero
.8572	ca		dex				dex
.8573	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8576	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8579	10 0b		bpl $8586			bpl 	_CDCSameSign
.857b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.857e	30 16		bmi $8596			bmi 	_CBCLess 					; return $FF
.8580					_CBCGreater:
.8580	a9 01		lda #$01			lda 	#1
.8582	60		rts				rts
.8583					_CBCEqual:
.8583	a9 00		lda #$00			lda 	#0
.8585	60		rts				rts
.8586					_CDCSameSign:
.8586	20 af 86	jsr $86af			jsr 	SubTopTwoStack 				; unsigned subtract
.8589	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; or the mantissa together
.858c	f0 f5		beq $8583			beq 	_CBCEqual 					; -0 == 0
.858e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8591	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8594	10 ea		bpl $8580			bpl 	_CBCGreater
.8596					_CBCLess:
.8596	a9 ff		lda #$ff			lda 	#$FF
.8598	60		rts				rts
.8599					_CBCString:
.8599	4c 05 86	jmp $8605			jmp 	CompareStrings
.859c					_CBCFloat:
.859c	4c 83 97	jmp $9783			jmp 	CompareFloat
.859f					CompareFixMinusZero:
.859f	20 72 8f	jsr $8f72			jsr 	NSMIsZero
.85a2	d0 03		bne $85a7			bne 	_CFXMZNotZero
.85a4	9e 00 06	stz $0600,x			stz 	NSStatus,x
.85a7					_CFXMZNotZero:
.85a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.85a8					StringConcat:
.85a8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.85ab	3d 01 06	and $0601,x			and 	NSStatus+1,x
.85ae	29 18		and #$18			and 	#NSBTypeMask
.85b0	c9 10		cmp #$10			cmp 	#NSTString
.85b2	d0 4e		bne $8602			bne		_SCType
.85b4	64 38		stz $38				stz 	zTemp1 						; counting total length
.85b6	e8		inx				inx
.85b7	20 d5 85	jsr $85d5			jsr 	_SCSetupZ0 					; setup for second
.85ba	20 e0 85	jsr $85e0			jsr 	_SCLengthZ0 				; length for second
.85bd	ca		dex				dex
.85be	20 d5 85	jsr $85d5			jsr 	_SCSetupZ0 					; setup for first
.85c1	20 e0 85	jsr $85e0			jsr 	_SCLengthZ0 				; length for first
.85c4	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.85c6	20 af 9b	jsr $9baf			jsr 	StringTempAllocate
.85c9	20 f3 85	jsr $85f3			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.85cc	e8		inx				inx
.85cd	20 d5 85	jsr $85d5			jsr 	_SCSetupZ0 					; copy second out
.85d0	20 f3 85	jsr $85f3			jsr 	_SCCopy
.85d3	ca		dex				dex
.85d4	60		rts				rts
.85d5					_SCSetupZ0:
.85d5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.85d8	85 36		sta $36				sta 	zTemp0
.85da	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85dd	85 37		sta $37				sta 	zTemp0+1
.85df	60		rts				rts
.85e0					_SCLengthZ0:
.85e0	5a		phy				phy
.85e1	a0 00		ldy #$00			ldy 	#0
.85e3					_SCLenLoop:
.85e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.85e5	f0 0a		beq $85f1			beq 	_SCLExit
.85e7	c8		iny				iny
.85e8	e6 38		inc $38				inc 	zTemp1
.85ea	10 f7		bpl $85e3			bpl		_SCLenLoop
.85ec	a9 09		lda #$09		lda	#9
.85ee	4c 9b 84	jmp $849b		jmp	ErrorHandler
.85f1					_SCLExit:
.85f1	7a		ply				ply
.85f2	60		rts				rts
.85f3					_SCCopy:
.85f3	5a		phy				phy
.85f4	a0 00		ldy #$00			ldy 	#0
.85f6					_SCCopyLoop:
.85f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.85f8	f0 06		beq $8600			beq 	_SCCExit
.85fa	20 ed 9b	jsr $9bed			jsr 	StringTempWrite
.85fd	c8		iny				iny
.85fe	80 f6		bra $85f6			bra 	_SCCopyLoop
.8600					_SCCExit:
.8600	7a		ply				ply
.8601	60		rts				rts
.8602					_SCType:
.8602	4c 05 9a	jmp $9a05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9544					IntegerDivide:
.9544	fa		plx				plx
.9545	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9548	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.954b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.954c	0a		asl a				asl 	a
.954d	10 05		bpl $9554			bpl 	_NotRef
.954f	48		pha				pha
.9550	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9553	68		pla				pla
.9554					_NotRef:
.9554	0a		asl a				asl 	a
.9555	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9557	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.955a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.955d	f0 03		beq $9562			beq 	_IntegerCode 				; if clear, then we have two integers
.955f	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.9562					_IntegerCode:
.9562	20 84 95	jsr $9584			jsr 	CheckDivideZero 			; do div zero check
.9565	20 bc 95	jsr $95bc			jsr 	Int32Divide 				; do the division
.9568	20 79 96	jsr $9679			jsr 	CalculateSign 				; calculate result sign
.956b					NSMCopyPlusTwoToZero:
.956b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.956e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9571	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9574	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9577	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.957a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.957d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9580	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9583	60		rts				rts
.9584					CheckDivideZero:
.9584	e8		inx				inx
.9585	20 72 8f	jsr $8f72			jsr 	NSMIsZero
.9588	f0 02		beq $958c			beq 	_CDVError
.958a	ca		dex				dex
.958b	60		rts				rts
.958c					_CDVError:
.958c	a9 03		lda #$03		lda	#3
.958e	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9591					IntegerModulus:
.9591	fa		plx				plx
.9592	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9595	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9598	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9599	0a		asl a				asl 	a
.959a	10 05		bpl $95a1			bpl 	_NotRef
.959c	48		pha				pha
.959d	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95a0	68		pla				pla
.95a1					_NotRef:
.95a1	0a		asl a				asl 	a
.95a2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95a4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95a7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95aa	f0 03		beq $95af			beq 	_IntegerCode 				; if clear, then we have two integers
.95ac	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.95af					_IntegerCode:
.95af	20 84 95	jsr $9584			jsr 	CheckDivideZero 			; do div zero check
.95b2	20 bc 95	jsr $95bc			jsr 	Int32Divide 				; do the division
.95b5	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.95b8	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.95bb	60		rts				rts
.95bc					Int32Divide:
.95bc	48		pha				pha 								; save AXY
.95bd	5a		phy				phy
.95be	20 19 8f	jsr $8f19			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95c1	20 3e 8f	jsr $8f3e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.95c4	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.95c6					_I32DivideLoop:
.95c6	e8		inx				inx
.95c7	e8		inx				inx
.95c8	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.95cb	ca		dex				dex
.95cc	ca		dex				dex
.95cd	20 58 8f	jsr $8f58			jsr 	NSMRotateLeft
.95d0	20 fc 95	jsr $95fc			jsr 	DivideCheckSubtract 		; check if subtract possible
.95d3	90 03		bcc $95d8			bcc 	_I32DivideNoCarryIn
.95d5	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.95d8					_I32DivideNoCarryIn:
.95d8	88		dey				dey 								; loop round till division completed.
.95d9	d0 eb		bne $95c6			bne 	_I32DivideLoop
.95db	7a		ply				ply 								; restore AXY and exit
.95dc	68		pla				pla
.95dd	60		rts				rts
.95de					Int32ShiftDivide:
.95de	48		pha				pha 								; save AY
.95df	5a		phy				phy
.95e0	e8		inx				inx 								; clear S[X+2]
.95e1	e8		inx				inx
.95e2	20 42 8f	jsr $8f42			jsr 	NSMSetZero
.95e5	ca		dex				dex
.95e6	ca		dex				dex
.95e7	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.95e9					_I32SDLoop:
.95e9	20 fc 95	jsr $95fc			jsr 	DivideCheckSubtract 		; check if subtract possible
.95ec	e8		inx				inx
.95ed	e8		inx				inx
.95ee	20 58 8f	jsr $8f58			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.95f1	ca		dex				dex
.95f2	ca		dex				dex
.95f3	20 58 8f	jsr $8f58			jsr 	NSMRotateLeft
.95f6	88		dey				dey 	 							; do 31 times
.95f7	d0 f0		bne $95e9			bne 	_I32SDLoop
.95f9	7a		ply				ply 								; restore AY and exit
.95fa	68		pla				pla
.95fb	60		rts				rts
.95fc					DivideCheckSubtract:
.95fc	20 af 86	jsr $86af			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.95ff	b0 04		bcs $9605			bcs 	_DCSExit 					; if carry set, then could do, exit
.9601	20 89 86	jsr $8689			jsr 	AddTopTwoStack 				; add it back in
.9604	18		clc				clc 								; and return False
.9605					_DCSExit:
.9605	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9606					MulInteger:
.9606	fa		plx				plx
.9607	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.960a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.960d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.960e	0a		asl a				asl 	a
.960f	10 05		bpl $9616			bpl 	_NotRef
.9611	48		pha				pha
.9612	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9615	68		pla				pla
.9616					_NotRef:
.9616	0a		asl a				asl 	a 							; put MSB of type into A:7
.9617	30 0b		bmi $9624			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9619	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.961c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.961f	f0 06		beq $9627			beq 	_IntegerCode 				; if clear, then we have two integers
.9621	4c 5a 98	jmp $985a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9624					_StringData:
.9624	4c 0f 9a	jmp $9a0f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9627					_IntegerCode:
.9627	20 34 96	jsr $9634			jsr 	MultiplyShort
.962a	c9 00		cmp #$00			cmp 	#0
.962c	f0 05		beq $9633			beq 	_MIExit
.962e	a9 04		lda #$04		lda	#4
.9630	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9633					_MIExit:
.9633	60		rts				rts
.9634					MultiplyShort:
.9634	5a		phy				phy 								; save Y
.9635	20 19 8f	jsr $8f19			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9638	20 3e 8f	jsr $8f3e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.963b	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.963d					_I32MLoop:
.963d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9640	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9643	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9646	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9649	f0 28		beq $9673			beq 	_I32MExit 					; exit if zero
.964b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.964e	29 01		and #$01			and 	#1
.9650	f0 0e		beq $9660			beq 	_I32MNoAdd
.9652	20 89 86	jsr $8689			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9655	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9658	10 06		bpl $9660			bpl 	_I32MNoAdd
.965a					_I32ShiftRight:
.965a	20 65 8f	jsr $8f65			jsr 	NSMShiftRight 				; shift S[X] right
.965d	c8		iny				iny 								; increment shift count
.965e	80 0a		bra $966a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9660					_I32MNoAdd:
.9660	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9663	70 f5		bvs $965a			bvs 	_I32ShiftRight 				; instead.
.9665	e8		inx				inx
.9666	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9669	ca		dex				dex
.966a					_I32MShiftUpper:
.966a	e8		inx				inx 								; shift S[X+2] right
.966b	e8		inx				inx
.966c	20 65 8f	jsr $8f65			jsr 	NSMShiftRight
.966f	ca		dex				dex
.9670	ca		dex				dex
.9671	80 ca		bra $963d			bra 	_I32MLoop 					; try again.
.9673					_I32MExit:
.9673	20 79 96	jsr $9679			jsr 	CalculateSign
.9676	98		tya				tya 								; shift in A
.9677	7a		ply				ply 								; restore Y and exit
.9678	60		rts				rts
.9679					CalculateSign:
.9679	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.967c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.967f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9682	0a		asl a				asl 	a 							; shift bit 7 into carry
.9683	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9686	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8605					CompareStrings:
.8605	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8608	3d 01 06	and $0601,x			and 	NSStatus+1,x
.860b	29 10		and #$10			and 	#NSBIsString
.860d	f0 2c		beq $863b			beq 	_CSTypeError
.860f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8612	85 36		sta $36				sta 	zTemp0
.8614	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8617	85 37		sta $37				sta 	zTemp0+1
.8619	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.861c	85 38		sta $38				sta 	zTemp1
.861e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8621	85 39		sta $39				sta 	zTemp1+1
.8623	5a		phy				phy 								; save Y so we can access strings
.8624	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8626					_CSLoop:
.8626	c8		iny				iny
.8627	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8629	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.862b	d0 06		bne $8633			bne 	_CSDifferent
.862d	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.862f	d0 f5		bne $8626			bne 	_CSLoop 					; still comparing
.8631					_CSExit:
.8631	7a		ply				ply 								; reached end, return zero in A from EOS
.8632	60		rts				rts
.8633					_CSDifferent:
.8633	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8635	90 fa		bcc $8631			bcc		_CSExit
.8637	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8639	80 f6		bra $8631			bra 	_CSExit
.863b					_CSTypeError:
.863b	4c 05 9a	jmp $9a05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.863e					ShiftLeft:
.863e	38		sec				sec
.863f	80 01		bra $8642			bra 	ShiftMain
.8641					ShiftRight:
.8641	18		clc				clc
.8642					ShiftMain:
.8642	fa		plx				plx 								; restore X
.8643	08		php				php 								; save direction
.8644	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8647	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.864a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.864b	0a		asl a				asl 	a
.864c	10 05		bpl $8653			bpl 	_NotRef
.864e	48		pha				pha
.864f	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8652	68		pla				pla
.8653					_NotRef:
.8653	0a		asl a				asl 	a
.8654	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8656	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8659	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.865c	f0 03		beq $8661			beq 	_IntegerCode 				; if clear, then we have two integers
.865e	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.8661					_IntegerCode:
.8661	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8664	29 e0		and #$e0			and 	#$E0
.8666	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8669	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.866c	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.866f	d0 13		bne $8684			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8671					_SMLoop:
.8671	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8674	30 11		bmi $8687			bmi 	_SMExit 					; exit if done.
.8676	28		plp				plp 								; restore direcition setting
.8677	08		php				php
.8678	90 05		bcc $867f			bcc 	_SMRight
.867a	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; shift left if CS
.867d	80 f2		bra $8671			bra 	_SMLoop
.867f					_SMRight:
.867f	20 65 8f	jsr $8f65			jsr 	NSMShiftRight 				; shift right if CC
.8682	80 ed		bra $8671			bra 	_SMLoop
.8684					_SMExit0:
.8684	20 42 8f	jsr $8f42			jsr 	NSMSetZero 					; return zero.
.8687					_SMExit:
.8687	28		plp				plp 								; throw direction
.8688	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8689					AddTopTwoStack:
.8689	18		clc				clc
.868a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.868d	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8690	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8693	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8696	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8699	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.869c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.869f	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.86a2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86a5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.86a8	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.86ab	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86ae	60		rts				rts
.86af					SubTopTwoStack:
.86af	38		sec				sec
.86b0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.86b3	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.86b6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86b9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.86bc	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.86bf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86c2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.86c5	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.86c8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86cb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.86ce	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.86d1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86d4	60		rts				rts
.86d5					AddInteger:
.86d5	fa		plx				plx
.86d6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86d9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86dc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86dd	0a		asl a				asl 	a
.86de	10 05		bpl $86e5			bpl 	_NotRef
.86e0	48		pha				pha
.86e1	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86e4	68		pla				pla
.86e5					_NotRef:
.86e5	0a		asl a				asl 	a 							; put MSB of type into A:7
.86e6	30 0b		bmi $86f3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.86e8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86eb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86ee	f0 06		beq $86f6			beq 	_IntegerCode 				; if clear, then we have two integers
.86f0	4c e2 96	jmp $96e2			jmp 	FloatingPointAdd 							; otherwise at least one float.
.86f3					_StringData:
.86f3	4c a8 85	jmp $85a8			jmp 	StringConcat							; at least one string - don't know both are strings.
.86f6					_IntegerCode:
.86f6					AddCode:
.86f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.86f9	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86fc	10 8b		bpl $8689			bpl 	AddTopTwoStack
.86fe	20 af 86	jsr $86af			jsr 	SubTopTwoStack 				; do a physical subtraction
.8701	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8704	10 09		bpl $870f			bpl 	_AddExit
.8706	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8709	9d 00 06	sta $0600,x			sta 	NSStatus,x
.870c	20 f7 8e	jsr $8ef7			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.870f					_AddExit:
.870f	60		rts				rts
.8710					SubInteger:
.8710	fa		plx				plx
.8711	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8714	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8717	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8718	0a		asl a				asl 	a
.8719	10 05		bpl $8720			bpl 	_NotRef
.871b	48		pha				pha
.871c	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.871f	68		pla				pla
.8720					_NotRef:
.8720	0a		asl a				asl 	a 							; put MSB of type into A:7
.8721	30 0b		bmi $872e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8723	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8726	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8729	f0 06		beq $8731			beq 	_IntegerCode 				; if clear, then we have two integers
.872b	4c e7 96	jmp $96e7			jmp 	FloatingPointSub 							; otherwise at least one float.
.872e					_StringData:
.872e	4c 0f 9a	jmp $9a0f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8731					_IntegerCode:
.8731	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8734	49 80		eor #$80			eor 	#$80
.8736	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8739	80 bb		bra $86f6			bra 	AddCode 					; and do the same code as add.
.873b					AndInteger:
.873b	fa		plx				plx
.873c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.873f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8742	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8743	0a		asl a				asl 	a
.8744	10 05		bpl $874b			bpl 	_NotRef
.8746	48		pha				pha
.8747	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.874a	68		pla				pla
.874b					_NotRef:
.874b	0a		asl a				asl 	a
.874c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.874e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8751	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8754	f0 03		beq $8759			beq 	_IntegerCode 				; if clear, then we have two integers
.8756	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.8759					_IntegerCode:
.8759	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.875c	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.875f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8762	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8765	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8768	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.876b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.876e	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8771	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8774	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8777	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.877a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.877d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8780	60		rts				rts
.8781					OraInteger:
.8781	fa		plx				plx
.8782	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8785	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8788	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8789	0a		asl a				asl 	a
.878a	10 05		bpl $8791			bpl 	_NotRef
.878c	48		pha				pha
.878d	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8790	68		pla				pla
.8791					_NotRef:
.8791	0a		asl a				asl 	a
.8792	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8794	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8797	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.879a	f0 03		beq $879f			beq 	_IntegerCode 				; if clear, then we have two integers
.879c	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.879f					_IntegerCode:
.879f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87a2	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.87a5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87a8	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87ab	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.87ae	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87b1	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87b4	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.87b7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87ba	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87bd	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.87c0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87c3	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.87c6	60		rts				rts
.87c7					EorInteger:
.87c7	fa		plx				plx
.87c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87cb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87ce	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87cf	0a		asl a				asl 	a
.87d0	10 05		bpl $87d7			bpl 	_NotRef
.87d2	48		pha				pha
.87d3	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87d6	68		pla				pla
.87d7					_NotRef:
.87d7	0a		asl a				asl 	a
.87d8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87da	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87dd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87e0	f0 03		beq $87e5			beq 	_IntegerCode 				; if clear, then we have two integers
.87e2	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.87e5					_IntegerCode:
.87e5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87e8	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.87eb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87ee	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87f1	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.87f4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87f7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87fa	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.87fd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8800	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8803	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8806	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8809	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.880c	60		rts				rts
.880d					WordIndirect:
.880d	fa		plx				plx
.880e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8811	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8814	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8815	0a		asl a				asl 	a
.8816	10 05		bpl $881d			bpl 	_NotRef
.8818	48		pha				pha
.8819	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.881c	68		pla				pla
.881d					_NotRef:
.881d	0a		asl a				asl 	a
.881e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8820	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8823	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8826	f0 03		beq $882b			beq 	_IntegerCode 				; if clear, then we have two integers
.8828	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.882b					_IntegerCode:
.882b	20 f6 86	jsr $86f6			jsr 	AddCode 					; add the two values
.882e	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8830	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8833	60		rts				rts
.8834					ByteIndirect:
.8834	fa		plx				plx
.8835	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8838	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.883b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.883c	0a		asl a				asl 	a
.883d	10 05		bpl $8844			bpl 	_NotRef
.883f	48		pha				pha
.8840	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8843	68		pla				pla
.8844					_NotRef:
.8844	0a		asl a				asl 	a
.8845	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8847	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.884a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.884d	f0 03		beq $8852			beq 	_IntegerCode 				; if clear, then we have two integers
.884f	4c 05 9a	jmp $9a05			jmp 	TypeError 					; anything else, type mismatch.
.8852					_IntegerCode:
.8852	20 f6 86	jsr $86f6			jsr 	AddCode 					; add the two values
.8855	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8857	9d 00 06	sta $0600,x			sta 	NSStatus,x
.885a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9687					ConvertInt16:
.9687	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.968a	8e 10 06	stx $0610			stx 	NSMantissa1
.968d	9c 18 06	stz $0618			stz 	NSMantissa2
.9690	9c 20 06	stz $0620			stz 	NSMantissa3
.9693	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9696	a2 00		ldx #$00			ldx 	#0 							; stack level
.9698	a9 0a		lda #$0a			lda 	#10 						; base
.969a	80 00		bra $969c			bra 	ConvertInt32
.969c					ConvertInt32:
.969c	5a		phy				phy
.969d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.969f	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.96a2	10 08		bpl $96ac			bpl 	_CI32NotNeg
.96a4	48		pha				pha
.96a5	a9 2d		lda #$2d			lda 	#'-'
.96a7	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.96aa	c8		iny				iny
.96ab	68		pla				pla
.96ac					_CI32NotNeg:
.96ac	20 ba 96	jsr $96ba			jsr 	_CI32DivideConvert 			; recursive conversion
.96af	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.96b1	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.96b4	7a		ply				ply
.96b5	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.96b7	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.96b9	60		rts				rts
.96ba					_CI32DivideConvert:
.96ba	e8		inx				inx 								; write to next slot up
.96bb	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.96be	ca		dex				dex
.96bf	20 bc 95	jsr $95bc			jsr 	Int32Divide 				; divide
.96c2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.96c5	48		pha				pha
.96c6	20 6b 95	jsr $956b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.96c9	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; is it zero ?
.96cc	f0 06		beq $96d4			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.96ce	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.96d1	20 ba 96	jsr $96ba			jsr 	_CI32DivideConvert 			; and recusrively call.
.96d4					_CI32NoRecurse:
.96d4	68		pla				pla 								; remainder
.96d5	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.96d7	90 02		bcc $96db			bcc 	_CI32NotHex
.96d9	69 26		adc #$26			adc 	#6+32
.96db					_CI32NotHex:
.96db	69 30		adc #$30			adc 	#48
.96dd	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.96e0	c8		iny				iny
.96e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.885b					PrecedenceLevel:
>885b	04					.byte	 4	; $00 <<
>885c	02					.byte	 2	; $01 <=
>885d	02					.byte	 2	; $02 <>
>885e	00					.byte	 0	; $03 !!3
>885f	00					.byte	 0	; $04 ><
>8860	02					.byte	 2	; $05 >=
>8861	04					.byte	 4	; $06 >>
>8862	00					.byte	 0	; $07 !!7
>8863	00					.byte	 0	; $08 !!8
>8864	00					.byte	 0	; $09 !!9
>8865	00					.byte	 0	; $0a !!10
>8866	00					.byte	 0	; $0b !!11
>8867	00					.byte	 0	; $0c !!12
>8868	00					.byte	 0	; $0d !!13
>8869	00					.byte	 0	; $0e !!14
>886a	00					.byte	 0	; $0f !!15
>886b	00					.byte	 0	; $10 @
>886c	00					.byte	 0	; $11 !!17
>886d	00					.byte	 0	; $12 !!18
>886e	00					.byte	 0	; $13 [
>886f	04					.byte	 4	; $14 \
>8870	00					.byte	 0	; $15 ]
>8871	01					.byte	 1	; $16 ^
>8872	00					.byte	 0	; $17 _
>8873	00					.byte	 0	; $18 `
>8874	00					.byte	 0	; $19 !!25
>8875	00					.byte	 0	; $1a !!26
>8876	00					.byte	 0	; $1b {
>8877	01					.byte	 1	; $1c |
>8878	00					.byte	 0	; $1d }
>8879	00					.byte	 0	; $1e ~
>887a	00					.byte	 0	; $1f [7m<7F>[m
>887b	00					.byte	 0	; $20
>887c	05					.byte	 5	; $21 !
>887d	00					.byte	 0	; $22 "
>887e	00					.byte	 0	; $23 #
>887f	05					.byte	 5	; $24 $
>8880	04					.byte	 4	; $25 %
>8881	01					.byte	 1	; $26 &
>8882	00					.byte	 0	; $27 '
>8883	00					.byte	 0	; $28 (
>8884	00					.byte	 0	; $29 )
>8885	04					.byte	 4	; $2a *
>8886	03					.byte	 3	; $2b +
>8887	00					.byte	 0	; $2c ,
>8888	03					.byte	 3	; $2d -
>8889	00					.byte	 0	; $2e .
>888a	04					.byte	 4	; $2f /
>888b	00					.byte	 0	; $30 0
>888c	00					.byte	 0	; $31 1
>888d	00					.byte	 0	; $32 2
>888e	00					.byte	 0	; $33 3
>888f	00					.byte	 0	; $34 4
>8890	00					.byte	 0	; $35 5
>8891	00					.byte	 0	; $36 6
>8892	00					.byte	 0	; $37 7
>8893	00					.byte	 0	; $38 8
>8894	00					.byte	 0	; $39 9
>8895	00					.byte	 0	; $3a :
>8896	00					.byte	 0	; $3b ;
>8897	02					.byte	 2	; $3c <
>8898	02					.byte	 2	; $3d =
>8899	02					.byte	 2	; $3e >
>889a	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.889b					EvaluateExpressionAt0:
.889b	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.889d					EvaluateExpression:
.889d	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.889f					EvaluateExpressionAtPrecedence:
.889f	48		pha				pha 								; save precedence level
.88a0	20 6e 8b	jsr $8b6e			jsr 	EvaluateTerm 				; evaluate term into level X.
.88a3	68		pla				pla 								; restore precedence level.
.88a4					_EXPRLoop:
.88a4	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.88a6	b1 30		lda ($30),y			lda 	(codePtr),y
.88a8	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.88aa	b0 25		bcs $88d1			bcs 	_EXPRExit
.88ac	da		phx				phx 								; read the operator precedence
.88ad	aa		tax				tax
.88ae	bd 5b 88	lda $885b,x			lda 	PrecedenceLevel,x
.88b1	fa		plx				plx
.88b2	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.88b4	f0 1b		beq $88d1			beq 	_EXPRExit
.88b6	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.88b8	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.88ba	c5 37		cmp $37				cmp 	zTemp0+1
.88bc	b0 13		bcs $88d1			bcs		_EXPRExit 					; if current >= operator exit
.88be	48		pha				pha 								; save current precedence.
.88bf	b1 30		lda ($30),y			lda 	(codePtr),y
.88c1	c8		iny				iny
.88c2	48		pha				pha
.88c3	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.88c5	e8		inx				inx 								; work out the right hand side.
.88c6	20 9f 88	jsr $889f			jsr 	EvaluateExpressionAtPrecedence
.88c9	ca		dex				dex
.88ca	68		pla				pla 								; get operator, call the code.
.88cb	20 d4 88	jsr $88d4			jsr 	_EXPRCaller
.88ce	68		pla				pla 								; restore precedence level
.88cf	80 d3		bra $88a4			bra 	_EXPRLoop 					; and go round.
.88d1					_EXPRExit:
.88d1	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.88d3	60		rts				rts
.88d4					_EXPRCaller:
.88d4	da		phx				phx 								; save on stack, first thing is to restore it
.88d5	0a		asl a				asl 	a 							; double so can use vectors into X
.88d6	aa		tax				tax
.88d7	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.96e2					FloatingPointAdd:
.96e2	20 83 98	jsr $9883			jsr 	FloatPrepare 				; prepare for floats
.96e5	80 0b		bra $96f2			bra 	FloatAdd
.96e7					FloatingPointSub:
.96e7	20 83 98	jsr $9883			jsr 	FloatPrepare 				; prepare for floats
.96ea					FloatSubtract:
.96ea	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.96ed	49 80		eor #$80			eor 	#$80
.96ef	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.96f2					FloatAdd:
.96f2	48		pha				pha
.96f3	5a		phy				phy
.96f4	20 94 98	jsr $9894			jsr 	NSNormalise 				; normalise S[X]
.96f7	f0 54		beq $974d			beq 	_FAReturn1
.96f9	e8		inx				inx 								; normalise S[X+1]
.96fa	20 94 98	jsr $9894			jsr 	NSNormalise
.96fd	ca		dex				dex
.96fe	c9 00		cmp #$00			cmp 	#0
.9700	f0 6f		beq $9771			beq 	_FAExit 					; if so, just return A
.9702	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9705	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9708	f0 1b		beq $9725			beq 	_FAExponentsEqual
.970a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.970d	a8		tay				tay
.970e	38		sec				sec 								; do a signed comparison of the exponents.
.970f	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9712	50 02		bvc $9716			bvc 	_FANoSignedChange
.9714	49 80		eor #$80			eor 	#$80
.9716					_FANoSignedChange:
.9716	29 80		and #$80			and 	#$80
.9718	10 03		bpl $971d			bpl 	_FAHaveMax
.971a	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.971d					_FAHaveMax:
.971d	20 74 97	jsr $9774			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9720	e8		inx				inx
.9721	20 74 97	jsr $9774			jsr 	_FAShiftToExponent
.9724	ca		dex				dex
.9725					_FAExponentsEqual:
.9725	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9728	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.972b	30 10		bmi $973d			bmi 	_FADifferentSigns
.972d	20 89 86	jsr $8689			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9730	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9733	10 3c		bpl $9771			bpl 	_FAExit 					; if no, we are done.
.9735	20 65 8f	jsr $8f65			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9738	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.973b	80 34		bra $9771			bra 	_FAExit
.973d					_FADifferentSigns:
.973d	20 af 86	jsr $86af			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9740	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9743	10 2c		bpl $9771			bpl 	_FAExit 					; if no, we are done.
.9745	20 ee 8e	jsr $8eee			jsr 	NSMNegate 					; netate result
.9748	20 f7 8e	jsr $8ef7			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.974b	80 24		bra $9771			bra 	_FAExit
.974d					_FAReturn1:
.974d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9750	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9753	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9756	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9759	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.975c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.975f	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9762	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9765	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9768	9d 28 06	sta $0628,x			sta 	NSExponent,x
.976b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.976e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9771					_FAExit:
.9771	7a		ply				ply
.9772	68		pla				pla
.9773	60		rts				rts
.9774					_FAShiftToExponent:
.9774					_FAShiftToExponent2:
.9774	98		tya				tya 								; compare Y to exponent
.9775	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9778	f0 08		beq $9782			beq 	_FASEExit 					; exit if so.
.977a	20 65 8f	jsr $8f65			jsr 	NSMShiftRight	 			; shift the mantissa right
.977d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9780	80 f2		bra $9774			bra 	_FAShiftToExponent2
.9782					_FASEExit:
.9782	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9783					CompareFloat:
.9783	20 ea 96	jsr $96ea			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9786	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9789	29 f8		and #$f8			and 	#$F8
.978b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.978e	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9791	f0 09		beq $979c			beq 	_FCExit 					; zero, so approximately identical
.9793	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9795	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9798	10 02		bpl $979c			bpl 	_FCExit
.979a					_FCNegative:
.979a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.979c					_FCExit:
.979c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.979d					FDivideCommand:
.979d	fa		plx				plx	 								; restore stack position
.979e	20 83 98	jsr $9883			jsr 	FloatPrepare 				; prepare for floats
.97a1					FloatDivide:
.97a1	48		pha				pha
.97a2	e8		inx				inx
.97a3	20 94 98	jsr $9894			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97a6	ca		dex				dex
.97a7	c9 00		cmp #$00			cmp 	#0
.97a9	f0 20		beq $97cb			beq 	_FDZero
.97ab	20 94 98	jsr $9894			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97ae	f0 19		beq $97c9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97b0	20 de 95	jsr $95de			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.97b3	20 6b 95	jsr $956b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.97b6	20 94 98	jsr $9894			jsr		NSNormalise 				; renormalise
.97b9	20 79 96	jsr $9679			jsr 	CalculateSign 				; calculate result sign
.97bc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.97bf	38		sec				sec
.97c0	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.97c3	38		sec				sec
.97c4	e9 1e		sbc #$1e			sbc 	#30
.97c6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97c9					_FDExit:
.97c9	68		pla				pla
.97ca	60		rts				rts
.97cb					_FDZero:
.97cb	a9 03		lda #$03		lda	#3
.97cd	4c 9b 84	jmp $849b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.97d0					FloatFractionalPart:
.97d0	5a		phy				phy
.97d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.97d4	29 7f		and #$7f			and 	#$7F
.97d6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97d9	20 94 98	jsr $9894			jsr 	NSNormalise
.97dc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.97df	38		sec				sec
.97e0	e9 e0		sbc #$e0			sbc 	#$E0
.97e2	90 31		bcc $9815			bcc 	_FFPExit 					; already fractional
.97e4	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.97e6	b0 2a		bcs $9812			bcs 	_FFPZero
.97e8	a8		tay				tay 								; put count to do in Y
.97e9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.97ec	20 17 98	jsr $9817			jsr 	_FFPPartial
.97ef	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97f2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.97f5	20 17 98	jsr $9817			jsr 	_FFPPartial
.97f8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97fb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97fe	20 17 98	jsr $9817			jsr 	_FFPPartial
.9801	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9804	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9807	20 17 98	jsr $9817			jsr 	_FFPPartial
.980a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.980d	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; zeroed check.
.9810	d0 03		bne $9815			bne 	_FFPExit
.9812					_FFPZero:
.9812	20 42 8f	jsr $8f42			jsr 	NSMSetZero
.9815					_FFPExit:
.9815	7a		ply				ply
.9816	60		rts				rts
.9817					_FFPPartial:
.9817	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9819	f0 17		beq $9832			beq 	_FFFPPExit
.981b	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.981d	b0 0c		bcs $982b			bcs 	_FFFPPWholeByte
.981f	5a		phy				phy
.9820					_FFFPPLeft:
.9820	0a		asl a				asl 	a
.9821	88		dey				dey
.9822	d0 fc		bne $9820			bne 	_FFFPPLeft
.9824	7a		ply				ply
.9825					_FFFPPRight:
.9825	4a		lsr a				lsr 	a
.9826	88		dey				dey
.9827	d0 fc		bne $9825			bne 	_FFFPPRight
.9829	80 07		bra $9832			bra 	_FFFPPExit
.982b					_FFFPPWholeByte:
.982b	98		tya				tya 								; subtract 8 from count
.982c	38		sec				sec
.982d	e9 08		sbc #$08			sbc 	#8
.982f	a8		tay				tay
.9830	a9 00		lda #$00			lda 	#0 							; and clear all
.9832					_FFFPPExit:
.9832	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9833					FloatIntegerPart:
.9833	48		pha				pha
.9834	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9837	f0 1f		beq $9858			beq 	_FIPExit 					; if so do nothing
.9839	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; is it zero ?
.983c	f0 17		beq $9855			beq 	_FIPZero 					; if so return zero.
.983e	20 94 98	jsr $9894			jsr 	NSNormalise 				; normalise
.9841	f0 12		beq $9855			beq 	_FIPZero 					; normalised to zero, exit zero
.9843					_FIPShift:
.9843	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9846	10 08		bpl $9850			bpl 	_FIPCheckZero
.9848	20 65 8f	jsr $8f65			jsr 	NSMShiftRight 				; shift mantissa right
.984b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.984e	80 f3		bra $9843			bra 	_FIPShift
.9850					_FIPCheckZero:
.9850	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; avoid -0 problem
.9853	d0 03		bne $9858			bne 	_FIPExit 					; set to zero if mantissa zero.
.9855					_FIPZero:
.9855	20 42 8f	jsr $8f42			jsr 	NSMSetZero
.9858					_FIPExit:
.9858	68		pla				pla
.9859	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.985a					FloatingPointMultiply:
.985a	20 83 98	jsr $9883			jsr 	FloatPrepare 				; prepare for floats
.985d					FloatMultiply:
.985d	48		pha				pha
.985e	20 94 98	jsr $9894			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9861	f0 1b		beq $987e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9863	e8		inx				inx
.9864	20 94 98	jsr $9894			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9867	ca		dex				dex
.9868	c9 00		cmp #$00			cmp 	#0
.986a	f0 0f		beq $987b			beq 	_FDSetZero
.986c	20 34 96	jsr $9634			jsr 	MultiplyShort 				; calculate the result.
.986f	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9872	18		clc				clc
.9873	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9876	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9879	80 03		bra $987e			bra 	_FDExit
.987b					_FDSetZero:
.987b	20 42 8f	jsr $8f42			jsr 	NSMSetZero 					; return 0
.987e					_FDExit:
.987e	20 94 98	jsr $9894			jsr 	NSNormalise 				; normalise the result
.9881	68		pla				pla
.9882	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9883					FloatPrepare:
.9883	20 ad 89	jsr $89ad			jsr 	DereferenceTopTwo 			; dereference the top two values
.9886	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9889	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.988c	29 10		and #$10			and 	#NSBIsString
.988e	d0 01		bne $9891			bne 	_FDType
.9890	60		rts				rts
.9891					_FDType:
.9891	4c 05 9a	jmp $9a05			jmp 	TypeError
.9894					NSNormalise:
.9894	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9897	29 80		and #$80			and 	#$80
.9899	09 08		ora #$08			ora 	#NSTFloat
.989b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.989e	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; if zero exit
.98a1	d0 09		bne $98ac			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.98a3	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.98a6	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.98a9	a9 00		lda #$00			lda 	#0 							; set Z flag
.98ab	60		rts				rts
.98ac					_NSNormaliseOptimise:
.98ac	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.98af	d0 22		bne $98d3			bne 	_NSNormaliseLoop
.98b1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.98b4	30 1d		bmi $98d3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.98b6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.98b9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.98bc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.98bf	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.98c2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.98c5	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.98c8	bd 28 06	lda $0628,x			lda 	NSExponent,x
.98cb	38		sec				sec
.98cc	e9 08		sbc #$08			sbc 	#8
.98ce	9d 28 06	sta $0628,x			sta 	NSExponent,x
.98d1	80 d9		bra $98ac			bra 	_NSNormaliseOptimise
.98d3					_NSNormaliseLoop:
.98d3	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.98d6	70 08		bvs $98e0			bvs 	_NSNExit 					; exit if so with Z flag clear
.98d8	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; shift mantissa left
.98db	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.98de	80 f3		bra $98d3			bra 	_NSNormaliseLoop
.98e0					_NSNExit:
.98e0	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.98e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.88da					AssignNumber:
.88da	5a		phy				phy
.88db	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.88de	85 36		sta $36				sta 	zTemp0
.88e0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88e3	85 37		sta $37				sta 	zTemp0+1
.88e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.88e8	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.88ea	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88ed	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.88ef	c9 08		cmp #$08			cmp 	#NSTFloat
.88f1	f0 2a		beq $891d			beq 	_ANFloat
.88f3	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.88f6	f0 05		beq $88fd			beq		_ANNotFloat
.88f8	e8		inx				inx
.88f9	20 33 98	jsr $9833			jsr 	FloatIntegerPart 			; make it an integer
.88fc	ca		dex				dex
.88fd					_ANNotFloat:
.88fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8900	29 03		and #$03			and 	#3
.8902	d0 05		bne $8909			bne 	_ANByteWord
.8904	20 29 89	jsr $8929			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8907	80 1e		bra $8927			bra 	_ANExit
.8909					_ANByteWord:
.8909	48		pha				pha 								; save count
.890a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.890d	92 36		sta ($36)			sta 	(zTemp0)
.890f	68		pla				pla
.8910	c9 01		cmp #$01			cmp	 	#1
.8912	f0 13		beq $8927			beq 	_ANExit
.8914	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8917	a0 01		ldy #$01			ldy 	#1
.8919	91 36		sta ($36),y			sta 	(zTemp0),y
.891b	80 0a		bra $8927			bra 	_ANExit
.891d					_ANFloat:
.891d	20 29 89	jsr $8929			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8920	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8923	a0 04		ldy #$04			ldy 	#4
.8925	91 36		sta ($36),y			sta 	(zTemp0),y
.8927					_ANExit:
.8927	7a		ply				ply
.8928	60		rts				rts
.8929					_ANCopy4PackSign:
.8929	a0 03		ldy #$03			ldy 	#3
.892b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.892e	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8930	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8933	91 36		sta ($36),y			sta 	(zTemp0),y
.8935	88		dey				dey
.8936	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8939	91 36		sta ($36),y			sta 	(zTemp0),y
.893b	88		dey				dey
.893c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.893f	91 36		sta ($36),y			sta 	(zTemp0),y
.8941	88		dey				dey
.8942	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8945	91 36		sta ($36),y			sta 	(zTemp0),y
.8947	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8948					AssignString:
.8948	5a		phy				phy
.8949	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.894c	85 38		sta $38				sta 	zTemp1
.894e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8951	85 39		sta $39				sta 	zTemp1+1
.8953	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8956	85 36		sta $36				sta 	zTemp0
.8958	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.895b	85 37		sta $37				sta 	zTemp0+1
.895d	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.895f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8961	f0 23		beq $8986			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8963	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8964	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8966	e9 02		sbc #$02			sbc 	#2
.8968	85 3c		sta $3c				sta 	zsTemp
.896a	a0 01		ldy #$01			ldy 	#1
.896c	b1 36		lda ($36),y			lda 	(zTemp0),y
.896e	e9 00		sbc #$00			sbc 	#0
.8970	85 3d		sta $3d				sta 	zsTemp+1
.8972	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8974					_ASGetLength:
.8974	c8		iny				iny
.8975	b1 38		lda ($38),y			lda 	(zTemp1),y
.8977	d0 fb		bne $8974			bne 	_ASGetLength
.8979	98		tya				tya 								; is this length <= current length
.897a	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.897c	90 20		bcc $899e			bcc 	_ASCopyString
.897e	f0 1e		beq $899e			beq 	_ASCopyString
.8980	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8982	a0 01		ldy #$01			ldy 	#1
.8984	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8986					_ASNewStringRequired:
.8986	e8		inx				inx 								; concrete the new string.
.8987	20 34 9b	jsr $9b34			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.898a	ca		dex				dex
.898b	18		clc				clc
.898c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.898f	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8991	92 36		sta ($36)			sta 	(zTemp0)
.8993	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8996	69 00		adc #$00			adc 	#0
.8998	a0 01		ldy #$01			ldy 	#1
.899a	91 36		sta ($36),y			sta 	(zTemp0),y
.899c	80 0d		bra $89ab			bra 	_ASExit
.899e					_ASCopyString:
.899e	a0 00		ldy #$00			ldy 	#0
.89a0					_ASCopyLoop:
.89a0	b1 38		lda ($38),y			lda 	(zTemp1),y
.89a2	c8		iny				iny
.89a3	c8		iny				iny
.89a4	91 3c		sta ($3c),y			sta 	(zsTemp),y
.89a6	88		dey				dey
.89a7	c9 00		cmp #$00			cmp 	#0
.89a9	d0 f5		bne $89a0			bne 	_ASCopyLoop
.89ab					_ASExit:
.89ab	7a		ply				ply
.89ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.89ad					DereferenceTopTwo:
.89ad	e8		inx				inx
.89ae	20 b2 89	jsr $89b2			jsr 	Dereference 				; deref x+1
.89b1	ca		dex				dex  								; falls through to deref x
.89b2					Dereference:
.89b2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.89b5	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.89b7	f0 57		beq $8a10			beq 	_DRFExit 					; not a reference
.89b9	5a		phy				phy
.89ba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.89bd	85 36		sta $36				sta 	zTemp0
.89bf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89c2	85 37		sta $37				sta 	zTemp0+1
.89c4	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.89c7	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.89c9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89cc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.89cf	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.89d1	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.89d3	f0 0f		beq $89e4			beq 	_DRFDereferenceTwo
.89d5	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.89d7	f0 39		beq $8a12			beq 	_DRFFull
.89d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.89dc	29 03		and #$03			and 	#3
.89de	f0 32		beq $8a12			beq 	_DRFFull 					; the whole word
.89e0	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.89e2	f0 07		beq $89eb			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.89e4					_DRFDereferenceTwo:
.89e4	a0 01		ldy #$01			ldy 	#1
.89e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.89e8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89eb					_DRFClear23:
.89eb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.89ee	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.89f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.89f4	29 18		and #$18			and 	#NSBTypeMask
.89f6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89f9	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.89fb	d0 12		bne $8a0f			bne 	_DRFNotString
.89fd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8a00	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8a03	d0 0a		bne $8a0f			bne 	_DRFNotString
.8a05	a9 11		lda #$11			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8a07	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8a0a	a9 8a		lda #$8a			lda 	#_DRFNullString >> 8
.8a0c	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8a0f					_DRFNotString
.8a0f	7a		ply				ply 								; restore Y and exit
.8a10					_DRFExit:
.8a10	60		rts				rts
.8a11					_DRFNullString:
>8a11	00						.byte 	0
.8a12					_DRFFull:
.8a12	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8a14	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a16	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a19	c8		iny				iny
.8a1a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a1c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a1f	c8		iny				iny
.8a20	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a22	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a25	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8a28	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8a2b	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8a2d	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8a30	f0 06		beq $8a38			beq 	_DRFNoExponent
.8a32	c8		iny				iny 								; if not, read the exponent as well.
.8a33	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a35	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8a38					_DRFNoExponent:
.8a38	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8a3b	10 0d		bpl $8a4a			bpl 	_DRFExit2 					; if not, then exit.
.8a3d	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8a3f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a42	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8a45	09 80		ora #$80			ora 	#NSBIsNegative
.8a47	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a4a					_DRFExit2:
.8a4a	7a		ply				ply
.8a4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8a4c					EncodeNumberStart:
.8a4c	38		sec				sec
.8a4d	80 01		bra $8a50			bra 	EncodeNumberContinue+1
.8a4f					EncodeNumberContinue:
.8a4f	18		clc				clc
.8a50					EncodeNumber:
.8a50	08		php				php 								; save reset.
.8a51	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8a53	f0 12		beq $8a67			beq 	_ENIsOkay
.8a55	c9 30		cmp #$30			cmp 	#"0"
.8a57	90 04		bcc $8a5d			bcc 	_ENBadNumber
.8a59	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a5b	90 0a		bcc $8a67			bcc 	_ENIsOkay
.8a5d					_ENBadNumber:
.8a5d	28		plp				plp 								; throw saved reset
.8a5e	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8a61	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a63	f0 7e		beq $8ae3			beq 	_ENConstructFinal
.8a65					_ENFail:
.8a65	18		clc				clc 								; not allowed
.8a66	60		rts				rts
.8a67					_ENIsOkay:
.8a67	28		plp				plp 								; are we restarting
.8a68	90 15		bcc $8a7f			bcc 	_ENNoRestart
.8a6a					_ENStartEncode:
.8a6a	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8a6c	f0 0c		beq $8a7a			beq 	_ENFirstDP
.8a6e	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8a70	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.8a73	a9 01		lda #$01			lda 	#ESTA_Low
.8a75					_ENExitChange:
.8a75	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8a78	38		sec				sec
.8a79	60		rts				rts
.8a7a					_ENFirstDP:
.8a7a	20 42 8f	jsr $8f42			jsr 	NSMSetZero 					; clear integer part
.8a7d	80 3f		bra $8abe			bra 	_ESTASwitchFloat			; go straight to float and exi
.8a7f					_ENNoRestart:
.8a7f	48		pha				pha 								; save on stack.
.8a80	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8a83	c9 01		cmp #$01			cmp 	#ESTA_Low
.8a85	f0 09		beq $8a90			beq  	_ESTALowState
.8a87	c9 02		cmp #$02			cmp 	#ESTA_High
.8a89	f0 29		beq $8ab4			beq 	_ESTAHighState
.8a8b	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a8d	f0 3b		beq $8aca			beq 	_ESTADecimalState
>8a8f	db						.byte 	$DB 						; causes a break in the emulator
.8a90					_ESTALowState:
.8a90	68		pla				pla 								; get value back
.8a91	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8a93	f0 29		beq $8abe			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8a95	29 0f		and #$0f			and 	#15 						; make digit
.8a97	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8a9a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8a9d	0a		asl a				asl 	a
.8a9e	0a		asl a				asl 	a
.8a9f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8aa2	0a		asl a				asl 	a
.8aa3	6d 06 07	adc $0706			adc 	DigitTemp
.8aa6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8aa9	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8aab	90 05		bcc $8ab2			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8aad	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8aaf	8d 05 07	sta $0705			sta 	EncodeState
.8ab2					_ESTANoSwitch:
.8ab2	38		sec				sec
.8ab3	60		rts				rts
.8ab4					_ESTAHighState:
.8ab4	68		pla				pla 								; get value back
.8ab5	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8ab7	f0 05		beq $8abe			beq 	_ESTASwitchFloat
.8ab9	20 1d 8b	jsr $8b1d			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8abc	38		sec				sec
.8abd	60		rts				rts
.8abe					_ESTASwitchFloat:
.8abe	9c 07 07	stz $0707			stz 	DecimalCount
.8ac1	e8		inx				inx 								; zero the decimal additive.
.8ac2	20 42 8f	jsr $8f42			jsr 	NSMSetZero
.8ac5	ca		dex				dex
.8ac6	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8ac8	80 ab		bra $8a75			bra 	_ENExitChange
.8aca					_ESTADecimalState:
.8aca	68		pla				pla 								; digit.
.8acb	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8acd	f0 96		beq $8a65			beq 	_ENFail
.8acf	e8		inx				inx 								; put digit into fractional part of X+1
.8ad0	20 1d 8b	jsr $8b1d			jsr 	ESTAShiftDigitIntoMantissa
.8ad3	ca		dex				dex
.8ad4	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8ad7	ad 07 07	lda $0707			lda 	DecimalCount
.8ada	c9 0b		cmp #$0b			cmp 	#11
.8adc	f0 02		beq $8ae0			beq 	_ESTADSFail
.8ade	38		sec				sec
.8adf	60		rts				rts
.8ae0					_ESTADSFail:
.8ae0	4c 00 9a	jmp $9a00			jmp 	RangeError
.8ae3					_ENConstructFinal:
.8ae3	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8ae6	f0 33		beq $8b1b			beq 	_ENCFExit 					; no decimals
.8ae8	5a		phy				phy
.8ae9	0a		asl a				asl 	a 							; x 4 and CLC
.8aea	0a		asl a				asl 	a
.8aeb	6d 07 07	adc $0707			adc 	DecimalCount
.8aee	a8		tay				tay
.8aef	b9 bf 99	lda $99bf,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8af2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8af5	b9 c0 99	lda $99c0,y			lda 	DecimalScalarTable-5+1,y
.8af8	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8afb	b9 c1 99	lda $99c1,y			lda 	DecimalScalarTable-5+2,y
.8afe	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8b01	b9 c2 99	lda $99c2,y			lda 	DecimalScalarTable-5+3,y
.8b04	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8b07	b9 c3 99	lda $99c3,y			lda 	DecimalScalarTable-5+4,y
.8b0a	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8b0d	a9 08		lda #$08			lda 	#NSTFloat
.8b0f	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8b12	7a		ply				ply
.8b13	e8		inx				inx 								; multiply decimal const by decimal scalar
.8b14	20 5d 98	jsr $985d			jsr 	FloatMultiply
.8b17	ca		dex				dex
.8b18	20 f2 96	jsr $96f2			jsr 	FloatAdd 					; add to integer part.
.8b1b					_ENCFExit:
.8b1b	18		clc				clc 								; reject the digit.
.8b1c	60		rts				rts
.8b1d					ESTAShiftDigitIntoMantissa:
.8b1d	29 0f		and #$0f			and 	#15 						; save digit
.8b1f	48		pha				pha
.8b20	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8b23	48		pha				pha
.8b24	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8b27	48		pha				pha
.8b28	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b2b	48		pha				pha
.8b2c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b2f	48		pha				pha
.8b30	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; x 2
.8b33	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; x 4
.8b36	18		clc				clc 								; pop mantissa and add
.8b37	68		pla				pla
.8b38	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b3b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b3e	68		pla				pla
.8b3f	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8b42	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b45	68		pla				pla
.8b46	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8b49	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b4c	68		pla				pla
.8b4d	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8b50	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8b53	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; x 10
.8b56	68		pla				pla 								; add digit
.8b57	18		clc				clc
.8b58	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b5b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b5e	90 0d		bcc $8b6d			bcc 	_ESTASDExit
.8b60	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8b63	d0 08		bne $8b6d			bne 	_ESTASDExit
.8b65	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8b68	d0 03		bne $8b6d			bne 	_ESTASDExit
.8b6a	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8b6d					_ESTASDExit:
.8b6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8b6e					EvaluateTerm:
.8b6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b70	30 18		bmi $8b8a			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8b72	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8b74	b0 6f		bcs $8be5			bcs 	_ETVariable
.8b76	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8b78	90 6e		bcc $8be8			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8b7a	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b7c	b0 6a		bcs $8be8			bcs 	_ETPuncUnary
.8b7e	20 4c 8a	jsr $8a4c			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8b81					_ETNumber:
.8b81	c8		iny				iny 								; keep encoding until we have the numbers
.8b82	b1 30		lda ($30),y			lda 	(codePtr),y
.8b84	20 4f 8a	jsr $8a4f			jsr 	EncodeNumberContinue
.8b87	b0 f8		bcs $8b81			bcs 	_ETNumber 					; go back if accepted.
.8b89	60		rts				rts
.8b8a					_ETCheckUnary:
.8b8a	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8b8c	f0 41		beq $8bcf			beq 	_ETString
.8b8e	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8b90	f0 12		beq $8ba4			beq 	_ETHexConstant
.8b92	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8b94	90 0b		bcc $8ba1			bcc 	_ETSyntaxError
.8b96	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8b98	b0 07		bcs $8ba1			bcs 	_ETSyntaxError
.8b9a	da		phx				phx 								; push X on the stack
.8b9b	0a		asl a				asl 	a 							; put vector x 2 into X
.8b9c	aa		tax				tax
.8b9d	c8		iny				iny 								; consume unary function token
.8b9e	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8ba1					_ETSyntaxError:
.8ba1	4c fb 99	jmp $99fb			jmp 	SyntaxError
.8ba4					_ETHexConstant:
.8ba4	c8		iny				iny 								; skip #
.8ba5	c8		iny				iny 								; skip count
.8ba6	20 42 8f	jsr $8f42			jsr 	NSMSetZero 					; clear result
.8ba9					_ETHLoop:
.8ba9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bab	c8		iny				iny 								; and consume
.8bac	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8bae	f0 1e		beq $8bce			beq 	_ETHExit
.8bb0	48		pha				pha 								; save on stack.
.8bb1	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; x 2
.8bb4	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; x 4
.8bb7	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; x 8
.8bba	20 57 8f	jsr $8f57			jsr 	NSMShiftLeft 				; x 16
.8bbd	68		pla				pla 								; ASCII
.8bbe	c9 41		cmp #$41			cmp 	#'A'
.8bc0	90 02		bcc $8bc4			bcc 	_ETHNotChar
.8bc2	e9 07		sbc #$07			sbc 	#7
.8bc4					_ETHNotChar:
.8bc4	29 0f		and #$0f			and 	#15 						; digit now
.8bc6	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8bc9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bcc	80 db		bra $8ba9			bra 	_ETHLoop 					; go round.
.8bce					_ETHExit:
.8bce	60		rts				rts
.8bcf					_ETString:
.8bcf	c8		iny				iny 								; look at length
.8bd0	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd2	48		pha				pha
.8bd3	c8		iny				iny 								; first character
.8bd4	20 e4 94	jsr $94e4			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8bd7	68		pla				pla 								; restore count and save
.8bd8	85 36		sta $36				sta 	zTemp0
.8bda	98		tya				tya 								; add length to Y to skip it.
.8bdb	18		clc				clc
.8bdc	65 36		adc $36				adc 	zTemp0
.8bde	a8		tay				tay
.8bdf	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8be1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8be4	60		rts				rts
.8be5					_ETVariable:
.8be5	4c 3f 8c	jmp $8c3f			jmp 	VariableHandler
.8be8					_ETPuncUnary:
.8be8	c8		iny				iny 								; consume the unary character
.8be9	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8beb	f0 2d		beq $8c1a			beq 	_ETUnaryNegate
.8bed	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8bef	f0 39		beq $8c2a			beq 	_ETDereference
.8bf1	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8bf3	f0 43		beq $8c38			beq 	_ETParenthesis
.8bf5	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8bf7	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8bf9	f0 06		beq $8c01			beq 	_ETIndirection
.8bfb	e6 36		inc $36				inc 	zTemp0
.8bfd	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8bff	d0 a0		bne $8ba1			bne 	_ETSyntaxError
.8c01					_ETIndirection:
.8c01	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8c03	1a		inc a				inc 	a
.8c04	48		pha				pha
.8c05	20 6e 8b	jsr $8b6e			jsr 	EvaluateTerm				; evaluate the term
.8c08	20 b2 89	jsr $89b2			jsr 	Dereference 				; dereference it.
.8c0b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8c0e	d0 07		bne $8c17			bne 	_ETTypeMismatch
.8c10	68		pla				pla 								; indirection 1-2
.8c11	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8c13	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c16	60		rts				rts
.8c17					_ETTypeMismatch:
.8c17	4c 05 9a	jmp $9a05			jmp 	TypeError
.8c1a					_ETUnaryNegate:
.8c1a	20 6e 8b	jsr $8b6e			jsr 	EvaluateTerm				; evaluate the term
.8c1d	20 b2 89	jsr $89b2			jsr 	Dereference 				; dereference it.
.8c20	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8c23	29 10		and #$10			and 	#NSTString
.8c25	d0 f0		bne $8c17			bne 	_ETTypeMismatch
.8c27	4c ee 8e	jmp $8eee			jmp 	NSMNegate  					; just toggles the sign bit.
.8c2a					_ETDereference:
.8c2a	20 6e 8b	jsr $8b6e			jsr 	EvaluateTerm				; evaluate the term
.8c2d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8c30	29 20		and #$20			and 	#NSBIsReference
.8c32	f0 e3		beq $8c17			beq 	_ETTypeMismatch
.8c34	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8c37	60		rts				rts
.8c38					_ETParenthesis:
.8c38	20 9d 88	jsr $889d			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8c3b	20 2b 95	jsr $952b			jsr 	CheckRightBracket 			; check for )
.8c3e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8c3f					VariableHandler:
.8c3f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c41	18		clc				clc
.8c42	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c44	85 37		sta $37				sta 	zTemp0+1
.8c46	c8		iny				iny
.8c47	b1 30		lda ($30),y			lda 	(codePtr),y
.8c49	85 36		sta $36				sta 	zTemp0
.8c4b	c8		iny				iny
.8c4c	18		clc				clc									; copy variable address+3 to mantissa
.8c4d	69 03		adc #$03			adc 	#3
.8c4f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c52	a5 37		lda $37				lda 	zTemp0+1
.8c54	69 00		adc #$00			adc 	#0
.8c56	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c59	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8c5c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8c5f	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8c62	5a		phy				phy
.8c63	a0 02		ldy #$02			ldy 	#2 							; read type
.8c65	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c67	7a		ply				ply
.8c68	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8c6a	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8c6c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c6f	29 04		and #$04			and 	#NSBIsArray
.8c71	d0 01		bne $8c74			bne 	_VHArray
.8c73	60		rts				rts
.8c74					_VHArray:
>8c74	db						.byte 	$DB 						; causes a break in the emulator
.8c75	80 fd		bra $8c74			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.98e3					AbsUnary:
.98e3	fa		plx				plx 								; restore stack pos
.98e4	20 96 8e	jsr $8e96			jsr 	EvaluateNumber 				; get a float or int
.98e7	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.98ea	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.98ed	29 7f		and #$7f			and 	#$7F
.98ef	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8c77					AllocUnary:
.8c77	fa		plx				plx 								; restore stack pos
.8c78	20 ce 8e	jsr $8ece			jsr 	Evaluate16BitInteger		; get bytes required.
.8c7b	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.8c7e	da		phx				phx 								; save X/Y
.8c7f	5a		phy				phy
.8c80	8a		txa				txa 								; copy X into Y
.8c81	a8		tay				tay
.8c82	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8c85	aa		tax				tax
.8c86	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8c89	20 96 8c	jsr $8c96			jsr 	AllocateXABytes 			; allocate memory
.8c8c	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8c8f	8a		txa				txa
.8c90	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8c93	7a		ply				ply
.8c94	fa		plx				plx
.8c95	60		rts				rts
.8c96					AllocateXABytes:
.8c96	5a		phy				phy
.8c97	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8c9a	5a		phy				phy
.8c9b	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8c9e	5a		phy				phy
.8c9f	18		clc				clc
.8ca0	6d 0c 07	adc $070c			adc 	lowMemPtr
.8ca3	8d 0c 07	sta $070c			sta 	lowMemPtr
.8ca6	8a		txa				txa
.8ca7	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8caa	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8cad	fa		plx				plx
.8cae	68		pla				pla
.8caf	7a		ply				ply
.8cb0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.98f3					AscUnary:
.98f3	fa		plx				plx 								; restore stack pos
.98f4	20 a1 8e	jsr $8ea1			jsr 	EvaluateString 				; get a string
.98f7	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.98f9	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.98fc	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.98ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9900					FracUnary:
.9900	fa		plx				plx 								; restore stack pos
.9901	20 96 8e	jsr $8e96			jsr 	EvaluateNumber 				; get a float or int
.9904	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.9907	bd 00 06	lda $0600,x			lda 	NSStatus,x
.990a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.990c	f0 04		beq $9912			beq 	_IUZero
.990e	20 d0 97	jsr $97d0			jsr 	FloatFractionalPart
.9911	60		rts				rts
.9912					_IUZero:
.9912	20 42 8f	jsr $8f42			jsr 	NSMSetZero
.9915	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9916					IntUnary:
.9916	fa		plx				plx 								; restore stack pos
.9917	20 96 8e	jsr $8e96			jsr 	EvaluateNumber 				; get a float or int
.991a	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.991d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9920	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9922	f0 03		beq $9927			beq 	_IUExit
.9924	20 33 98	jsr $9833			jsr 	FloatIntegerPart
.9927					_IUExit:
.9927	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9928					LenUnary:
.9928	fa		plx				plx 								; restore stack pos
.9929	20 a1 8e	jsr $8ea1			jsr 	EvaluateString 				; get a string
.992c	5a		phy				phy
.992d	a0 00		ldy #$00			ldy 	#0 							; find length
.992f					_LenFind:
.992f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9931	f0 06		beq $9939			beq 	_LenExit
.9933	c8		iny				iny
.9934	d0 f9		bne $992f			bne 	_LenFind
.9936	4c 00 9a	jmp $9a00			jmp 	RangeError 					; string > 255
.9939					_LenExit:
.9939	98		tya				tya
.993a	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.993d	7a		ply				ply
.993e	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.9941	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8cb1					Unary_Not:
.8cb1	fa		plx				plx
.8cb2	20 b9 8e	jsr $8eb9			jsr 	EvaluateInteger 			; get integer
.8cb5	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.8cb8	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; zero mantissa ?
.8cbb	f0 04		beq $8cc1			beq 	_NotZero
.8cbd	20 42 8f	jsr $8f42			jsr 	NSMSetZero
.8cc0	60		rts				rts
.8cc1					_NotZero:
.8cc1	4c 01 85	jmp $8501			jmp 	ReturnTrue
.8cc4					_UNBad:
.8cc4	4c 0a 9a	jmp $9a0a			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8cc7					Unary_Rnd:
.8cc7	20 96 8e	jsr $8e96			jsr 	EvaluateNumber 				; number to use.
.8cca	20 2b 95	jsr $952b			jsr 	CheckRightBracket 			; closing bracket
.8ccd	20 f6 8c	jsr $8cf6			jsr 	Random32Bit 				; generate a number.
.8cd0	ad 08 07	lda $0708			lda 	RandomSeed+0
.8cd3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cd6	ad 09 07	lda $0709			lda 	RandomSeed+1
.8cd9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8cdc	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8cdf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ce2	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8ce5	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8ce7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cea	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8cec	8d 28 06	sta $0628			sta 	NSExponent
.8cef	a9 08		lda #$08			lda 	#NSTFloat
.8cf1	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8cf4	db						.byte 	$DB 						; causes a break in the emulator
.8cf5	60		rts				rts
.8cf6					Random32Bit:
.8cf6	5a		phy				phy
.8cf7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8cf9	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8cfc	d0 03		bne $8d01			bne 	_Random1
.8cfe	a8		tay				tay 								; if so do it 256 times
.8cff	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8d01					_Random1:
.8d01	0a		asl a				asl 	a 							; LSFR RNG
.8d02	2e 09 07	rol $0709			rol 	RandomSeed+1
.8d05	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8d08	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8d0b	90 02		bcc $8d0f			bcc 	_Random2
.8d0d	49 c5		eor #$c5			eor 	#$C5
.8d0f					_Random2:
.8d0f	88		dey				dey
.8d10	d0 ef		bne $8d01			bne 	_Random1
.8d12	7a		ply				ply
.8d13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9942					SgnUnary:
.9942	fa		plx				plx 								; restore stack pos
.9943	20 96 8e	jsr $8e96			jsr 	EvaluateNumber 				; get a float or int
.9946	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.9949	20 72 8f	jsr $8f72			jsr 	NSMIsZero 					; if zero
.994c	f0 10		beq $995e			beq 	_SGZero  					; return Int Zero
.994e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9951	48		pha				pha
.9952	a9 01		lda #$01			lda 	#1 							; set to 1
.9954	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.9957	68		pla				pla
.9958	29 80		and #$80			and		#$80 						; copy the sign byte out
.995a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.995d	60		rts				rts
.995e	20 42 8f	jsr $8f42	_SGZero:jsr 	NSMSetZero
.9961	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9962					ValUnary:
.9962	fa		plx				plx 								; restore stack pos
.9963	20 78 99	jsr $9978			jsr 	ValMainCode 				; do the main val() code
.9966	b0 01		bcs $9969			bcs 	_VUError 					; couldn't convert
.9968	60		rts				rts
.9969					_VUError:
.9969	4c 05 9a	jmp $9a05			jmp 	TypeError
.996c					IsValUnary:
.996c	fa		plx				plx 								; restore stack pos
.996d	20 78 99	jsr $9978			jsr 	ValMainCode 				; do the main val() code
.9970	b0 03		bcs $9975			bcs 	_VUBad
.9972	4c 01 85	jmp $8501			jmp 	ReturnTrue
.9975					_VUBad:
.9975	4c 0d 85	jmp $850d			jmp 	ReturnFalse
.9978					ValMainCode:
.9978	20 a1 8e	jsr $8ea1			jsr 	EvaluateString 				; get a string
.997b	20 2b 95	jsr $952b			jsr 	CheckRightBracket 			; check right bracket present
.997e	5a		phy				phy
.997f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9981	f0 17		beq $999a			beq 	_VMCFail2
.9983	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9985	48		pha				pha 								; save first character
.9986	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9988	d0 01		bne $998b			bne 	_VMCStart
.998a	c8		iny				iny 								; skip over -
.998b					_VMCStart:
.998b	38		sec				sec 								; initialise first time round.
.998c					_VMCNext:
.998c	c8		iny				iny 								; pre-increment
.998d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.998f	f0 0c		beq $999d			beq 	_VMCSuccess 				; successful.
.9991	20 50 8a	jsr $8a50			jsr 	EncodeNumber 				; send it to the number-builder
.9994	90 03		bcc $9999			bcc 	_VMCFail 					; if failed, give up.
.9996	18		clc				clc 								; next time round, countinue
.9997	80 f3		bra $998c			bra 	_VMCNext
.9999					_VMCFail:
.9999	68		pla				pla
.999a					_VMCFail2:
.999a	7a		ply				ply
.999b	38		sec				sec
.999c	60		rts				rts
.999d					_VMCSuccess:
.999d	a9 00		lda #$00			lda 	#0 							; construct final
.999f	20 50 8a	jsr $8a50			jsr 	EncodeNumber
.99a2	68		pla				pla
.99a3	c9 2d		cmp #$2d			cmp 	#"-"
.99a5	d0 03		bne $99aa			bne 	_VMCNotNegative
.99a7	20 ee 8e	jsr $8eee			jsr		NSMNegate
.99aa					_VMCNotNegative:
.99aa	7a		ply				ply
.99ab	18		clc				clc
.99ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8d14					ChrUnary:
.8d14	fa		plx				plx 								; restore stack pos
.8d15	20 da 8e	jsr $8eda			jsr 	Evaluate8BitInteger			; get value
.8d18	48		pha				pha
.8d19	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.8d1c	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8d1e	20 af 9b	jsr $9baf			jsr 	StringTempAllocate
.8d21	68		pla				pla 								; write number to it
.8d22	20 ed 9b	jsr $9bed			jsr 	StringTempWrite
.8d25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8d26					SpcUnary:
.8d26	fa		plx				plx 								; restore stack pos
.8d27	20 da 8e	jsr $8eda			jsr 	Evaluate8BitInteger			; get value
.8d2a	5a		phy				phy
.8d2b	48		pha				pha 								; save count
.8d2c	20 af 9b	jsr $9baf			jsr 	StringTempAllocate
.8d2f	7a		ply				ply 								; to do count in Y
.8d30					_SpcLoop:
.8d30	c0 00		cpy #$00			cpy 	#0
.8d32	f0 08		beq $8d3c			beq 	_SpcExit
.8d34	a9 20		lda #$20			lda 	#32
.8d36	20 ed 9b	jsr $9bed			jsr 	StringTempWrite
.8d39	88		dey				dey
.8d3a	80 f4		bra $8d30			bra 	_SPCLoop
.8d3c					_SpcExit:
.8d3c	7a		ply				ply
.8d3d	20 2b 95	jsr $952b			jsr 	CheckRightBracket
.8d40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8d41					Unary_Str:
.8d41	fa		plx				plx
.8d42	20 96 8e	jsr $8e96			jsr 	EvaluateNumber  			; get number
.8d45	20 2b 95	jsr $952b			jsr 	CheckRightBracket 			; closing bracket
.8d48	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8d4a	20 63 8d	jsr $8d63			jsr 	ConvertNumberToString 		; do the conversion.
.8d4d	a9 21		lda #$21			lda		#33 						; create buffer
.8d4f	20 af 9b	jsr $9baf			jsr 	StringTempAllocate 			; allocate memory
.8d52	da		phx				phx
.8d53	a2 00		ldx #$00			ldx 	#0
.8d55					_USCopy:
.8d55	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8d58	20 ed 9b	jsr $9bed			jsr 	StringTempWrite
.8d5b	e8		inx				inx
.8d5c	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8d5f	d0 f4		bne $8d55			bne 	_USCopy
.8d61	fa		plx				plx
.8d62	60		rts				rts
.8d63					ConvertNumberToString:
.8d63	5a		phy				phy 								; save code position
.8d64	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8d67	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8d6a	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8d6d	10 0a		bpl $8d79			bpl 	_CNTSNotNegative
.8d6f	29 7f		and #$7f			and 	#$7F 						; make +ve
.8d71	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d74	a9 2d		lda #$2d			lda 	#"-"
.8d76	20 df 8d	jsr $8ddf			jsr 	WriteDecimalBuffer
.8d79					_CNTSNotNegative:
.8d79	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8d7c	f0 15		beq $8d93			beq 	_CNTSNotFloat
.8d7e	e8		inx				inx 								; round up
.8d7f	a9 01		lda #$01			lda 	#1
.8d81	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.8d84	ca		dex				dex
.8d85	bd 28 06	lda $0628,x			lda		NSExponent,x
.8d88	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8d8b	a9 08		lda #$08			lda 	#NSTFloat
.8d8d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8d90	20 f2 96	jsr $96f2			jsr 	FloatAdd
.8d93					_CNTSNotFloat:
.8d93	20 c1 8d	jsr $8dc1			jsr 	MakePlusTwoString
.8d96	20 d0 97	jsr $97d0			jsr 	FloatFractionalPart 		; get the fractional part
.8d99	20 94 98	jsr $9894			jsr 	NSNormalise					; normalise , exit if zero
.8d9c	f0 21		beq $8dbf			beq 	_CNTSExit
.8d9e	a9 2e		lda #$2e			lda 	#"."
.8da0	20 df 8d	jsr $8ddf			jsr 	WriteDecimalBuffer 			; write decimal place
.8da3					_CNTSDecimal:
.8da3	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8da6	30 17		bmi $8dbf			bmi 	_CNTSExit
.8da8	e8		inx				inx 								; x 10.0
.8da9	a9 0a		lda #$0a			lda 	#10
.8dab	20 44 8f	jsr $8f44			jsr 	NSMSetByte
.8dae	a9 08		lda #$08			lda 	#NSTFloat
.8db0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8db3	ca		dex				dex
.8db4	20 5d 98	jsr $985d			jsr 	FloatMultiply
.8db7	20 c1 8d	jsr $8dc1			jsr 	MakePlusTwoString
.8dba	20 d0 97	jsr $97d0			jsr 	FloatFractionalPart 		; get the fractional part
.8dbd	80 e4		bra $8da3			bra 	_CNTSDecimal 				; keep going.
.8dbf					_CNTSExit:
.8dbf	7a		ply				ply
.8dc0	60		rts				rts
.8dc1					MakePlusTwoString:
.8dc1	da		phx				phx
.8dc2	20 19 8f	jsr $8f19			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8dc5	e8		inx				inx 								; access it
.8dc6	e8		inx				inx
.8dc7	20 33 98	jsr $9833			jsr 	FloatIntegerPart 			; make it an integer
.8dca	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8dcc	20 9c 96	jsr $969c			jsr 	ConvertInt32
.8dcf	a2 00		ldx #$00			ldx	 	#0
.8dd1					_MPTSCopy:
.8dd1	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8dd4	20 df 8d	jsr $8ddf			jsr 	WriteDecimalBuffer
.8dd7	e8		inx				inx
.8dd8	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ddb	d0 f4		bne $8dd1			bne 	_MPTSCopy
.8ddd	fa		plx				plx
.8dde	60		rts				rts
.8ddf					WriteDecimalBuffer:
.8ddf	da		phx				phx
.8de0	ae 14 07	ldx $0714			ldx 	dbOffset
.8de3	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8de6	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8de9	ee 14 07	inc $0714			inc 	dbOffset
.8dec	fa		plx				plx
.8ded	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8dee					Unary_Left:
.8dee	fa		plx				plx
.8def	18		clc				clc 								; only one parameter
.8df0	20 65 8e	jsr $8e65			jsr 	SubstringInitial 			; set up.
.8df3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8df6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8df9	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8dfc	80 2c		bra $8e2a			bra 	SubstringMain
.8dfe					Unary_Right:
.8dfe	fa		plx				plx
.8dff	18		clc				clc 								; only one parameter
.8e00	20 65 8e	jsr $8e65			jsr 	SubstringInitial 			; set up.
.8e03	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8e06	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e09	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8e0c	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8e0f	b0 02		bcs $8e13			bcs 	_URNotUnderflow
.8e11	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8e13					_URNotUnderFlow:
.8e13	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8e16	80 12		bra $8e2a			bra 	SubStringMain
.8e18					Unary_Mid:
.8e18	fa		plx				plx
.8e19	38		sec				sec 								; two parameters
.8e1a	20 65 8e	jsr $8e65			jsr 	SubstringInitial 			; set up.
.8e1d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8e20	f0 05		beq $8e27			beq 	_UMError
.8e22	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8e25	80 03		bra $8e2a			bra 	SubStringMain
.8e27					_UMError:
.8e27	4c 0a 9a	jmp $9a0a			jmp 	ArgumentError
.8e2a					SubStringMain:
.8e2a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8e2d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8e30	b0 2d		bcs $8e5f			bcs 	_SSMNull 					; if so, return an empty string.
.8e32	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8e35	f0 28		beq $8e5f			beq 	_SSMNull 					; return empty string.
.8e37	18		clc				clc 								; add the offset +1 to the address and
.8e38	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8e3b	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8e3e	85 36		sta $36				sta 	zTemp0
.8e40	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8e43	69 00		adc #$00			adc 	#0
.8e45	85 37		sta $37				sta 	zTemp0+1
.8e47					_SSMNoCarry:
.8e47	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8e4a	20 af 9b	jsr $9baf			jsr 	StringTempAllocate 			; allocate that many characters
.8e4d	5a		phy				phy 								; save Y
.8e4e	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8e50					_SSMCopy:
.8e50	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8e52	f0 09		beq $8e5d			beq 	_SSMEString 				; no more to copy
.8e54	20 ed 9b	jsr $9bed			jsr 	StringTempWrite 			; and write it out.
.8e57	c8		iny				iny
.8e58	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8e5b	d0 f3		bne $8e50			bne 	_SSMCopy
.8e5d					_SSMEString:
.8e5d	7a		ply				ply
.8e5e					_SSMExit:
.8e5e	60		rts				rts
.8e5f					_SSMNull:
.8e5f	a9 00		lda #$00			lda 	#0
.8e61	20 af 9b	jsr $9baf			jsr 	StringTempAllocate
.8e64	60		rts				rts
.8e65					SubstringInitial:
.8e65	da		phx				phx 								; save initial stack position
.8e66	08		php				php 								; save carry on stack indicating 2 parameters
.8e67	20 a1 8e	jsr $8ea1			jsr 	EvaluateString 				; get a string
.8e6a	5a		phy				phy 								; calculate length to exponent.
.8e6b	a0 ff		ldy #$ff			ldy 	#$FF
.8e6d					_SIFindLength:
.8e6d	c8		iny				iny
.8e6e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e70	d0 fb		bne $8e6d			bne 	_SIFindLength
.8e72	98		tya				tya
.8e73	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8e76	7a		ply				ply
.8e77	e8		inx				inx
.8e78	20 33 95	jsr $9533			jsr 	CheckComma 					; comma next
.8e7b	20 da 8e	jsr $8eda			jsr 	Evaluate8BitInteger 		; get next parameter
.8e7e	28		plp				plp 								; is it the last parameter ?
.8e7f	90 07		bcc $8e88			bcc 	_SSIExit 					; if so, exit.
.8e81	e8		inx				inx
.8e82	20 33 95	jsr $9533			jsr 	CheckComma 					; comma next
.8e85	20 da 8e	jsr $8eda			jsr 	Evaluate8BitInteger 		; get last parameter
.8e88					_SSIExit:
.8e88	fa		plx				plx
.8e89	20 2b 95	jsr $952b			jsr 	CheckRightBracket 			; check closing bracket
.8e8c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8e8d					EvaluateValue:
.8e8d	48		pha				pha
.8e8e	20 9d 88	jsr $889d			jsr		EvaluateExpression 			; expression
.8e91	20 b2 89	jsr $89b2			jsr 	Dereference					; derefernce it
.8e94	68		pla				pla
.8e95	60		rts				rts
.8e96					EvaluateNumber:
.8e96	20 8d 8e	jsr $8e8d			jsr 	EvaluateValue 				; get a value
.8e99	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e9c	29 10		and #$10			and 	#NSBIsString
.8e9e	d0 16		bne $8eb6			bne 	HelperTypeError
.8ea0	60		rts				rts
.8ea1					EvaluateString:
.8ea1	20 8d 8e	jsr $8e8d			jsr 	EvaluateValue 				; get a value
.8ea4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ea7	29 10		and #$10			and 	#NSBIsString
.8ea9	f0 0b		beq $8eb6			beq 	HelperTypeError
.8eab					CopyAddressToTemp0:
.8eab	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8eae	85 36		sta $36				sta 	zTemp0
.8eb0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8eb3	85 37		sta $37				sta 	zTemp0+1
.8eb5	60		rts				rts
.8eb6					HelperTypeError:
.8eb6	4c 05 9a	jmp $9a05			jmp 	TypeError
.8eb9					EvaluateInteger:
.8eb9	20 96 8e	jsr $8e96			jsr 	EvaluateNumber
.8ebc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8ebf	d0 0a		bne $8ecb			bne 	HelperValueError 			; if not, it's a float.
.8ec1	60		rts				rts
.8ec2					EvaluateUnsignedInteger:
.8ec2	20 b9 8e	jsr $8eb9			jsr 	EvaluateInteger 			; check integer is +ve
.8ec5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ec8	30 01		bmi $8ecb			bmi 	HelperValueError
.8eca	60		rts				rts
.8ecb					HelperValueError:
.8ecb	4c 0a 9a	jmp $9a0a			jmp 	ArgumentError
.8ece					Evaluate16BitInteger:
.8ece	20 c2 8e	jsr $8ec2			jsr	 	EvaluateUnsignedInteger		; get integer
.8ed1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8ed4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ed7	d0 f2		bne $8ecb			bne 	HelperValueError
.8ed9	60		rts				rts
.8eda					Evaluate8BitInteger:
.8eda	20 c2 8e	jsr $8ec2			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8edd	d0 ec		bne $8ecb			bne 	HelperValueError
.8edf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8ee2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ee5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8ee8	d0 e1		bne $8ecb			bne 	HelperValueError
.8eea	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8eed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.99ad					Multiply8x8:
.99ad	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.99ae	85 36		sta $36			  	sta 	zTemp0
.99b0	86 37		stx $37				stx 	zTemp0+1
.99b2	a9 00		lda #$00			lda 	#0
.99b4	a2 08		ldx #$08			ldx 	#8
.99b6					_M88Loop:
.99b6	90 03		bcc $99bb			bcc 	_M88NoAdd
.99b8	18		clc				clc
.99b9	65 37		adc $37				adc 	zTemp0+1
.99bb					_M88NoAdd:
.99bb	6a		ror a				ror 	a
.99bc	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.99be	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.99bf	d0 f5		bne $99b6			bne 	_M88Loop
.99c1	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.99c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8eee					NSMNegate:
.8eee	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ef1	49 80		eor #$80			eor 	#NSBIsNegative
.8ef3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ef6	60		rts				rts
.8ef7					NSMNegateMantissa:
.8ef7	38		sec				sec
.8ef8	a9 00		lda #$00			lda 	#0
.8efa	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8efd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f00	a9 00		lda #$00			lda 	#0
.8f02	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8f05	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f08	a9 00		lda #$00			lda 	#0
.8f0a	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8f0d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f10	a9 00		lda #$00			lda 	#0
.8f12	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8f15	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f18	60		rts				rts
.8f19					NSMShiftUpTwo:
.8f19	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f1c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f1f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f22	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8f25	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8f28	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8f2b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f2e	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8f31	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8f34	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8f37	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f3a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8f3d	60		rts				rts
.8f3e					NSMSetZeroMantissaOnly:
.8f3e	a9 00		lda #$00			lda 	#0
.8f40	80 08		bra $8f4a			bra 	NSMSetMantissa
.8f42					NSMSetZero:
.8f42	a9 00		lda #$00			lda 	#0
.8f44					NSMSetByte:
.8f44	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8f47	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8f4a					NSMSetMantissa:
.8f4a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8f4d	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8f50	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8f53	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8f56	60		rts				rts
.8f57					NSMShiftLeft:
.8f57	18		clc				clc
.8f58					NSMRotateLeft:
.8f58	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8f5b	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8f5e	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8f61	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8f64	60		rts				rts
.8f65					NSMShiftRight:
.8f65	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8f68	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8f6b	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8f6e	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8f71	60		rts				rts
.8f72					NSMIsZero:
.8f72	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f75	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8f78	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8f7b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8f7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.99c4					DecimalScalarTable:
>99c4	66 66 66 66				.dword $66666666 ; 0.1
>99c8	de					.byte $de
>99c9	1f 85 eb 51				.dword $51eb851f ; 0.01
>99cd	db					.byte $db
>99ce	4c 37 89 41				.dword $4189374c ; 0.001
>99d2	d8					.byte $d8
>99d3	ac 8b db 68				.dword $68db8bac ; 0.0001
>99d7	d4					.byte $d4
>99d8	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>99dc	d1					.byte $d1
>99dd	83 de 1b 43				.dword $431bde83 ; 1e-06
>99e1	ce					.byte $ce
>99e2	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>99e6	ca					.byte $ca
>99e7	89 3b e6 55				.dword $55e63b89 ; 1e-08
>99eb	c7					.byte $c7
>99ec	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>99f0	c4					.byte $c4
>99f1	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>99f5	c0					.byte $c0
>99f6	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>99fa	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.99fb					SyntaxError:
.99fb	a9 02		lda #$02		lda	#2
.99fd	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9a00					RangeError:
.9a00	a9 04		lda #$04		lda	#4
.9a02	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9a05					TypeError:
.9a05	a9 05		lda #$05		lda	#5
.9a07	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9a0a					ArgumentError:
.9a0a	a9 07		lda #$07		lda	#7
.9a0c	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9a0f					NotDoneError:
.9a0f	a9 0c		lda #$0c		lda	#12
.9a11	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9a14					ErrorText:
>9a14	42 72 65 61 6b 00			.text	"Break",0
>9a1a	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9a22	72 72 6f 72 00
>9a27	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9a2f	20 62 79 20 7a 65 72 6f 00
>9a38	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9a40	61 6e 67 65 00
>9a45	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9a4d	6d 61 74 63 68 00
>9a53	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9a5b	65 6d 6f 72 79 00
>9a61	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9a69	61 72 67 75 6d 65 6e 74 00
>9a72	53 74 6f 70 00				.text	"Stop",0
>9a77	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9a7f	6f 6f 20 6c 6f 6e 67 00
>9a87	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9a8f	6e 20 66 61 69 6c 65 64 00
>9a98	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9aa0	61 74 61 00
>9aa4	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9aac	65 6e 74 65 64 00
>9ab2	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9aba	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9ac6	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9ace	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9adb	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9ae3	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9af0	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9af8	68 6f 75 74 20 57 68 69 6c 65 00
>9b03	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9b0b	68 6f 75 74 20 46 6f 72 00
>9b14	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9b1c	61 63 6b 20 66 75 6c 6c 00
>9b25	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9b2d	75 63 74 75 72 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8f7f					StackOpen:
.8f7f	48		pha				pha 								; save frame byte
.8f80	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8f82	0a		asl a				asl 	a 							; claim twice this for storage
.8f83	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8f85	38		sec				sec 								; so basically subtracting from
.8f86	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8f88	85 34		sta $34				sta 	basicStack
.8f8a	b0 08		bcs $8f94			bcs 	_SONoBorrow
.8f8c	c6 35		dec $35				dec 	basicStack+1
.8f8e	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8f90	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8f92	90 04		bcc $8f98			bcc 	_SOMemory
.8f94					_SONoBorrow:
.8f94	68		pla				pla 								; get marker back and write at TOS
.8f95	92 34		sta ($34)			sta 	(basicStack)
.8f97	60		rts				rts
.8f98					_SOMemory:
.8f98							ERR_STACK
.8f98					StackClose:
.8f98	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8f9a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8f9c	0a		asl a				asl 	a 							; claim twice this.
.8f9d	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8f9f	85 34		sta $34				sta 	basicStack
.8fa1	90 02		bcc $8fa5			bcc 	_SCExit
.8fa3	e6 35		inc $35				inc 	basicStack+1
.8fa5					_SCExit:
.8fa5	60		rts				rts
.8fa6					StackCheckFrame:
.8fa6	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8fa8	29 f0		and #$f0			and 	#$F0 						; check type bits
.8faa	d0 01		bne $8fad			bne 	_SCFError 					; different, we have structures mixed up
.8fac	60		rts				rts
.8fad					_SCFError:
.8fad	8a		txa				txa 								; report error X
.8fae	4c 9b 84	jmp $849b			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8fb1					STKSaveCodePosition:
.8fb1	5a		phy				phy
.8fb2	98		tya				tya 								; save Y
.8fb3	a0 05		ldy #$05			ldy 	#5
.8fb5	91 34		sta ($34),y			sta 	(basicStack),y
.8fb7	88		dey				dey 								; save Code Pointer
.8fb8					_STKSaveLoop:
.8fb8	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8fbb	91 34		sta ($34),y			sta 	(basicStack),y
.8fbd	88		dey				dey
.8fbe	d0 f8		bne $8fb8			bne 	_STKSaveLoop
.8fc0	7a		ply				ply
.8fc1	60		rts				rts
.8fc2					STKLoadCodePosition:
.8fc2	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8fc4					_STKLoadLoop:
.8fc4	b1 34		lda ($34),y			lda 	(basicStack),y
.8fc6	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8fc9	c8		iny				iny
.8fca	c0 05		cpy #$05			cpy 	#5
.8fcc	d0 f6		bne $8fc4			bne 	_STKLoadLoop
.8fce	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8fd0	a8		tay				tay
.8fd1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8fd2					StackReset:
.8fd2	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8fd4	85 34		sta $34				sta 	0+basicStack
.8fd6	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8fd8	85 35		sta $35				sta 	1+basicStack
.8fda	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8fdc	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8fde	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9b34					StringConcrete:
.9b34	5a		phy				phy 								; save position on stack
.9b35	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9b38	85 38		sta $38				sta 	zTemp1
.9b3a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9b3d	85 39		sta $39				sta 	zTemp1+1
.9b3f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9b41					_SALength:
.9b41	c8		iny				iny
.9b42	b1 38		lda ($38),y			lda 	(zTemp1),y
.9b44	d0 fb		bne $9b41			bne 	_SALength
.9b46	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9b48	b0 3f		bcs $9b89			bcs 	_SALengthError
.9b4a	98		tya				tya 				 				; length of the new string
.9b4b	18		clc				clc
.9b4c	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9b4e	90 02		bcc $9b52			bcc 	_SAHaveLength
.9b50	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9b52					_SAHaveLength:
.9b52	48		pha				pha 								; save length.
.9b53	38		sec				sec
.9b54	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9b56	6d 0e 07	adc $070e			adc 	StringMemory
.9b59	8d 0e 07	sta $070e			sta 	StringMemory
.9b5c	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9b5e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9b61	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9b63	6d 0f 07	adc $070f			adc 	StringMemory+1
.9b66	8d 0f 07	sta $070f			sta 	StringMemory+1
.9b69	85 3b		sta $3b				sta 	zTemp2+1
.9b6b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b6e	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9b6f	38		sec				sec
.9b70	e9 03		sbc #$03			sbc 	#3
.9b72	92 3a		sta ($3a)			sta 	(zTemp2)
.9b74	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9b76	a0 01		ldy #$01			ldy 	#1
.9b78	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9b7a					_SACopyNewString:
.9b7a	a0 00		ldy #$00			ldy 	#0
.9b7c					_SACopyNSLoop:
.9b7c	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9b7e	c8		iny				iny 								; write two on in string storage
.9b7f	c8		iny				iny
.9b80	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9b82	88		dey				dey 								; this makes it one one.
.9b83	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9b85	d0 f5		bne $9b7c			bne 	_SACopyNSLoop
.9b87	7a		ply				ply
.9b88	60		rts				rts
.9b89					_SALengthError:
.9b89	a9 09		lda #$09		lda	#9
.9b8b	4c 9b 84	jmp $849b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9b8e					StringSystemInitialise:
.9b8e	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9b90	8d 0e 07	sta $070e			sta 	0+StringMemory
.9b93	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9b95	8d 0f 07	sta $070f			sta 	1+StringMemory
.9b98	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9b9b	60		rts				rts
.9b9c					StringSpaceInitialise:
.9b9c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9b9e	8d 10 07	sta $0710			sta 	StringInitialised
.9ba1	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9ba4	8d 11 07	sta $0711			sta 	StringTempPointer
.9ba7	ad 0f 07	lda $070f			lda 	StringMemory+1
.9baa	3a		dec a				dec 	a
.9bab	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9bae	60		rts				rts
.9baf					StringTempAllocate:
.9baf	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9bb1	b0 35		bcs $9be8			bcs 	_STALength
.9bb3	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9bb6	30 05		bmi $9bbd			bmi 	_STAAllocate
.9bb8	48		pha				pha 								; save value to subtract.
.9bb9	20 9c 9b	jsr $9b9c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9bbc	68		pla				pla 								; restore it
.9bbd					_STAAllocate:
.9bbd	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9bbf	18		clc				clc  								; deliberate allows one more
.9bc0	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9bc3	8d 11 07	sta $0711			sta 	StringTempPointer
.9bc6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9bc9	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9bcb	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9bce	69 ff		adc #$ff			adc 	#$FF
.9bd0	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9bd3	85 3d		sta $3d				sta 	zsTemp+1
.9bd5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9bd8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9bdb	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9bde	a9 10		lda #$10			lda 	#NSTString
.9be0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9be3	a9 00		lda #$00			lda 	#0 							; clear the target string
.9be5	92 3c		sta ($3c)			sta 	(zsTemp)
.9be7	60		rts				rts
.9be8					_STALength:
.9be8	a9 09		lda #$09		lda	#9
.9bea	4c 9b 84	jmp $849b		jmp	ErrorHandler
.9bed					StringTempWrite:
.9bed	48		pha				pha
.9bee	92 3c		sta ($3c)			sta 	(zsTemp)
.9bf0	e6 3c		inc $3c				inc 	zsTemp
.9bf2	d0 02		bne $9bf6			bne 	_STWNoCarry
.9bf4	e6 3d		inc $3d				inc 	zsTemp+1
.9bf6					_STWNoCarry:
.9bf6	a9 00		lda #$00			lda 	#0
.9bf8	92 3c		sta ($3c)			sta 	(zsTemp)
.9bfa	68		pla				pla
.9bfb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8fdf					BackloadProgram:
.8fdf	a2 ff		ldx #$ff			ldx 	#$FF
.8fe1	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8fe4	20 0e 90	jsr $900e			jsr 	BLReadByte
.8fe7	30 1e		bmi $9007			bmi 	_BPExit
.8fe9					_BPCopy:
.8fe9	e8		inx				inx  								; copy byte in
.8fea	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8fed	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8ff0	20 0e 90	jsr $900e			jsr 	BLReadByte 					; read next byte
.8ff3	30 0a		bmi $8fff			bmi 	_BPEndLine 					; -ve = EOL
.8ff5	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8ff7	d0 02		bne $8ffb			bne 	_BPNotTab
.8ff9	a9 20		lda #$20			lda 	#' '
.8ffb					_BPNotTab:
.8ffb	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8ffd	b0 ea		bcs $8fe9			bcs 	_BPCopy
.8fff					_BPEndLine:
.8fff	20 29 92	jsr $9229			jsr 	TokeniseLine 				; tokenise the line.
.9002	20 b5 94	jsr $94b5			jsr 	MemoryAppend 				; append to current program
.9005	80 d8		bra $8fdf			bra 	BackloadProgram
.9007					_BPExit:
.9007	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.900a	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.900d	60		rts				rts
.900e					BLReadByte:
.900e					_BLLoad:
.900e	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9011	ee 0f 90	inc $900f			inc 	_BLLoad+1
.9014	d0 03		bne $9019			bne 	_BLNoCarry
.9016	ee 10 90	inc $9010			inc 	_BLLoad+2
.9019					_BLNoCarry:
.9019	c9 00		cmp #$00			cmp 	#0
.901b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/procscan.asm

.901c					ProcedureScan:
.901c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.901e	85 30		sta $30				sta 	codePtr
.9020	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9022	85 31		sta $31				sta 	codePtr+1
.9024					_PSLoop:
.9024	b2 30		lda ($30)			lda 	(codePtr)
.9026	f0 41		beq $9069			beq 	_PSExit
.9028	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.902a	b1 30		lda ($30),y			lda 	(codePtr),y
.902c	c9 98		cmp #$98			cmp 	#KWD_PROC
.902e	d0 2c		bne $905c			bne 	_PSNext
.9030	c8		iny				iny 								; get the address of the record to zTemp0 and
.9031	b1 30		lda ($30),y			lda 	(codePtr),y
.9033	29 c0		and #$c0			and 	#$C0
.9035	c9 40		cmp #$40			cmp 	#$40
.9037	d0 31		bne $906a			bne 	_PSSyntax
.9039	b1 30		lda ($30),y			lda 	(codePtr),y
.903b	18		clc				clc
.903c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.903e	85 37		sta $37				sta 	zTemp0+1
.9040	c8		iny				iny 								; LSB
.9041	b1 30		lda ($30),y			lda 	(codePtr),y
.9043	85 36		sta $36				sta 	zTemp0
.9045	98		tya				tya 								; save Y offset at +7
.9046	a0 07		ldy #$07			ldy 	#7
.9048	91 36		sta ($36),y			sta 	(zTemp0),y
.904a	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.904c	a0 02		ldy #$02			ldy 	#2
.904e	91 36		sta ($36),y			sta 	(zTemp0),y
.9050	a2 00		ldx #$00			ldx 	#0 							; copy codePtr in
.9052					_PSCopy:
.9052	b5 30		lda $30,x			lda 	codePtr,x
.9054	c8		iny				iny
.9055	91 36		sta ($36),y			sta 	(zTemp0),y
.9057	e8		inx				inx
.9058	e0 04		cpx #$04			cpx 	#4
.905a	d0 f6		bne $9052			bne 	_PSCopy
.905c					_PSNext:
.905c	18		clc				clc
.905d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.905f	65 30		adc $30				adc 	codePtr
.9061	85 30		sta $30				sta 	codePtr
.9063	90 02		bcc $9067			bcc 	_CREExit
.9065	e6 31		inc $31				inc 	codePtr+1
.9067					_CREExit:
.9067	80 bb		bra $9024			bra 	_PSLoop
.9069					_PSExit:
.9069	60		rts				rts
.906a					_PSSyntax:
.906a	4c fb 99	jmp $99fb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.906d					TokeniseSearchTable:
.906d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.906f	85 36		sta $36				sta 	zTemp0
.9071	a0 00		ldy #$00			ldy 	#0
.9073	a9 80		lda #$80			lda 	#$80 						; token #
.9075	85 38		sta $38				sta 	zTemp1
.9077					_TSTLoop:
.9077	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9079	30 49		bmi $90c4			bmi 	_TSTFail 					; -ve = end of table
.907b	f0 2e		beq $90ab			beq 	_TSTNext 					; zero, check next it's a dummy
.907d	c8		iny				iny 								; get the hash
.907e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9080	88		dey				dey
.9081	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9084	d0 25		bne $90ab			bne 	_TSTNext
.9086	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9089	38		sec				sec
.908a	ed 00 07	sbc $0700			sbc 	identStart
.908d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.908f	d0 1a		bne $90ab			bne 	_TSTNext
.9091	5a		phy				phy 								; save Y , we might fail
.9092	c8		iny				iny 								; point to text
.9093	c8		iny				iny
.9094	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9097					_TSTCompareName:
.9097	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.909a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.909c	d0 0c		bne $90aa			bne 	_TSTNextPullY 				; fail, pullY and do next
.909e	e8		inx				inx
.909f	c8		iny				iny
.90a0	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.90a3	d0 f2		bne $9097			bne 	_TSTCompareName
.90a5	7a		ply				ply 								; throw Y
.90a6	a5 38		lda $38				lda 	zTemp1 						; get token #
.90a8	38		sec				sec 								; return with CS = passed.
.90a9	60		rts				rts
.90aa					_TSTNextPullY:
.90aa	7a		ply				ply 								; restore current, fall through.
.90ab					_TSTNext:
.90ab	e6 38		inc $38				inc 	zTemp1 						; token counter
.90ad	98		tya				tya
.90ae	18		clc				clc
.90af	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.90b1	1a		inc a				inc 	a 							; +1
.90b2	1a		inc a				inc 	a 							; +2
.90b3	a8		tay				tay
.90b4	10 c1		bpl $9077			bpl 	_TSTLoop 					; if Y < $80 loop back
.90b6	98		tya				tya 								; add Y to zTemp0 and reset Y
.90b7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.90b9	18		clc				clc  								; but have tables > 255 bytes
.90ba	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.90bc	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.90be	90 b7		bcc $9077			bcc 	_TSTLoop
.90c0	e6 37		inc $37				inc 	zTemp0+1
.90c2	80 b3		bra $9077			bra 	_TSTLoop
.90c4					_TSTFail:
.90c4	18		clc				clc
.90c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.90c6					KeywordSet0:
>90c6	00 65					.text	0,$65,""               ; $80 !0:EOF
>90c8	00 58					.text	0,$58,""               ; $81 !1:SH1
>90ca	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>90cc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>90d2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>90da	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>90e0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>90e7	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>90ee	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>90f5	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>90fb	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9103	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>910b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9111	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9118	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>911e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9126	28
>9127	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>912d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9133	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9139	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9140	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9146	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>914c	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9151	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9155	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>915b	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9163	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>916a	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9171	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9179	43
>917a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9180	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9186	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>918d	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9193	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9199	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>919e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>91a4	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>91a9	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>91b1	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>91b7	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>91be	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>91c4	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>91c9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>91d0	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>91d6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>91db	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>91e3	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>91e7	ff					.text	$FF
.91e8					KeywordSet1:
>91e8	00 65					.text	0,$65,""               ; $80 !0:EOF
>91ea	00 58					.text	0,$58,""               ; $81 !1:SH1
>91ec	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>91ee	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>91f6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>91fd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9202	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9208	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>920d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>9215	45
>9216	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>921b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9221	ff					.text	$FF
.9222					KeywordSet2:
>9222	00 65					.text	0,$65,""               ; $80 !0:EOF
>9224	00 58					.text	0,$58,""               ; $81 !1:SH1
>9226	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9228	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9229					TokeniseLine:
.9229	20 b1 93	jsr $93b1			jsr 	FixLineBufferCase 			; fix line case
.922c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.922e	8d 15 07	sta $0715			sta 	tokenOffset
.9231	9c 16 07	stz $0716			stz 	tokenLineNumber
.9234	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9237	a2 ff		ldx #$ff			ldx 	#$FF
.9239					_TKFindFirst:
.9239	e8		inx				inx
.923a	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.923d	f0 79		beq $92b8			beq 	_TKExit
.923f	c9 20		cmp #$20			cmp 	#' '
.9241	90 f6		bcc $9239			bcc 	_TKFindFirst
.9243	c9 30		cmp #$30			cmp 	#'0'
.9245	90 07		bcc $924e			bcc 	_TKNoLineNumber
.9247	c9 3a		cmp #$3a			cmp 	#'9'+1
.9249	b0 03		bcs $924e			bcs 	_TKNoLineNumber
.924b	20 db 93	jsr $93db			jsr 	TokeniseExtractLineNumber
.924e					_TKNoLineNumber:
.924e					_TKTokeniseLoop:
.924e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9251	f0 65		beq $92b8			beq 	_TKExit
.9253	e8		inx				inx
.9254	c9 20		cmp #$20			cmp 	#' '
.9256	f0 f6		beq $924e			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9258	ca		dex				dex 								; undo last get, A contains character, X is position.
.9259	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.925b	f0 61		beq $92be			beq 	_TKTokeniseIdentifier
.925d	c9 41		cmp #$41			cmp 	#'A'
.925f	90 04		bcc $9265			bcc 	_TKTokenisePunctuation
.9261	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9263	90 59		bcc $92be			bcc 	_TKTokeniseIdentifier
.9265					_TKTokenisePunctuation:
.9265	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9267	f0 27		beq $9290			beq 	_TKString
.9269	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.926b	f0 28		beq $9295			beq 	_TKHexConstant
.926d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.926f	f0 29		beq $929a			beq 	_TKCheckDouble
.9271	c9 3e		cmp #$3e			cmp 	#'>'
.9273	f0 25		beq $929a			beq 	_TKCheckDouble
.9275					_TKStandardPunctuation:
.9275	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9278	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.927a	90 0e		bcc $928a			bcc 	_TKNoShift
.927c	48		pha				pha 								; save
.927d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.927f	85 36		sta $36				sta 	zTemp0
.9281	68		pla				pla
.9282	29 20		and #$20			and 	#32 						; bit 5
.9284	4a		lsr a				lsr 	a 							; shift into bit 3
.9285	4a		lsr a				lsr 	a
.9286	05 36		ora $36				ora 	zTemp0
.9288	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.928a					_TKNoShift:
.928a	20 20 94	jsr $9420			jsr 	TokeniseWriteByte 			; write the punctuation character
.928d	e8		inx				inx 								; consume the character
.928e	80 be		bra $924e			bra 	_TKTokeniseLoop 			; and loop round again.
.9290					_TKString:
.9290	20 40 93	jsr $9340			jsr 	TokeniseString
.9293	80 b9		bra $924e			bra 	_TKTokeniseLoop
.9295					_TKHexConstant:
.9295	20 7b 93	jsr $937b			jsr 	TokeniseHexConstant
.9298	80 b4		bra $924e			bra 	_TKTokeniseLoop
.929a					_TKCheckDouble:
.929a	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.929d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.929f	90 d4		bcc $9275			bcc 	_TKStandardPunctuation
.92a1	c9 3f		cmp #$3f			cmp 	#'>'+1
.92a3	b0 d0		bcs $9275			bcs 	_TKStandardPunctuation
.92a5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.92a8	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.92aa	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.92ab	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.92ae	38		sec				sec
.92af	e9 3c		sbc #$3c			sbc 	#'<'
.92b1	20 20 94	jsr $9420			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.92b4	e8		inx				inx 								; consume both
.92b5	e8		inx				inx
.92b6	80 96		bra $924e			bra 	_TKTokeniseLoop
.92b8	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.92ba	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.92bd	60		rts				rts
.92be					_TKTokeniseIdentifier:
.92be	8e 00 07	stx $0700			stx 	identStart 					; save start
.92c1	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.92c4					_TKCheckLoop:
.92c4	e8		inx				inx 								; look at next, we know first is identifier.
.92c5	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.92c8	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.92ca	f0 f8		beq $92c4			beq 	_TKCheckLoop
.92cc	c9 30		cmp #$30			cmp	 	#"0"
.92ce	90 0c		bcc $92dc			bcc 	_TKEndIdentifier
.92d0	c9 3a		cmp #$3a			cmp 	#"9"+1
.92d2	90 f0		bcc $92c4			bcc 	_TKCheckLoop
.92d4	c9 41		cmp #$41			cmp	 	#"A"
.92d6	90 04		bcc $92dc			bcc 	_TKEndIdentifier
.92d8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.92da	90 e8		bcc $92c4			bcc 	_TKCheckLoop
.92dc					_TKEndIdentifier:
.92dc	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.92df	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.92e1	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.92e3	f0 06		beq $92eb			beq 	_TKHasTypeCharacter
.92e5	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.92e7	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.92e9	d0 07		bne $92f2			bne 	_TKNoTypeCharacter
.92eb					_TKHasTypeCharacter:
.92eb	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.92ee	e8		inx				inx 								; read next
.92ef	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.92f2					_TKNoTypeCharacter:
.92f2	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.92f4	d0 09		bne $92ff			bne 	_TKNoArray
.92f6	e8		inx				inx 								; skip the (
.92f7	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.92fa	09 04		ora #$04			ora 	#$04
.92fc	8d 04 07	sta $0704			sta 	identTypeByte
.92ff					_TKNoArray:
.92ff	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9302	20 9c 93	jsr $939c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9305	a0 90		ldy #$90			ldy 	#(KeywordSet0) >> 8
.9307	a9 c6		lda #$c6			lda 	#(KeywordSet0) & $FF
.9309	20 6d 90	jsr $906d			jsr 	TokeniseSearchTable
.930c	a2 00		ldx #$00			ldx 	#0
.930e	b0 1f		bcs $932f			bcs 	_TKFoundToken
.9310	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.9312	a9 e8		lda #$e8			lda 	#(KeywordSet1) & $FF
.9314	20 6d 90	jsr $906d			jsr 	TokeniseSearchTable
.9317	a2 81		ldx #$81			ldx 	#$81
.9319	b0 14		bcs $932f			bcs 	_TKFoundToken
.931b	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.931d	a9 e8		lda #$e8			lda 	#(KeywordSet1) & $FF
.931f	20 6d 90	jsr $906d			jsr 	TokeniseSearchTable
.9322	a2 82		ldx #$82			ldx 	#$82
.9324	b0 09		bcs $932f			bcs 	_TKFoundToken
.9326	20 2c 94	jsr $942c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9329	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.932c	4c 4e 92	jmp $924e			jmp 	_TKTokeniseLoop 			; and go round again.
.932f					_TKFoundToken:
.932f	48		pha				pha 								; save token
.9330	8a		txa				txa 								; shift in X, is there one ?
.9331	f0 03		beq $9336			beq 	_TKNoTShift
.9333	20 20 94	jsr $9420			jsr 	TokeniseWriteByte 			; if so, write it out
.9336					_TKNoTShift:
.9336	68		pla				pla 								; restore and write token
.9337	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.933a	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.933d	4c 4e 92	jmp $924e			jmp 	_TKTokeniseLoop 			; and go round again.
.9340					TokeniseString:
.9340	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9342	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.9345	e8		inx				inx									; start of quoted string.
.9346	da		phx				phx 								; push start of string on top
.9347	ca		dex				dex
.9348					_TSFindEnd:
.9348	e8		inx				inx
.9349	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.934c	f0 04		beq $9352			beq 	_TSEndOfString
.934e	c9 22		cmp #$22			cmp 	#'"'
.9350	d0 f6		bne $9348			bne 	_TSFindEnd
.9352					_TSEndOfString:
.9352	7a		ply				ply  								; so now Y is first character, X is character after end.
.9353	48		pha				pha 								; save terminating character
.9354	20 5c 93	jsr $935c			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9357	68		pla				pla 								; terminating character
.9358	f0 01		beq $935b			beq 	_TSNotQuote					; if it wasn't EOS skip it
.935a	e8		inx				inx
.935b					_TSNotQuote:
.935b	60		rts				rts
.935c					TOWriteBlockXY:
.935c	86 36		stx $36				stx 	zTemp0 						; write end character
.935e	98		tya				tya
.935f	49 ff		eor #$ff			eor 	#$FF
.9361	38		sec				sec
.9362	65 36		adc $36				adc 	zTemp0
.9364	1a		inc a				inc 	a 							; one extra for NULL
.9365	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.9368					_TOBlockLoop:
.9368	c4 36		cpy $36				cpy 	zTemp0
.936a	f0 09		beq $9375			beq 	_TOBlockExit
.936c	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.936f	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.9372	c8		iny				iny
.9373	80 f3		bra $9368			bra 	_TOBlockLoop
.9375					_TOBlockExit:
.9375	a9 00		lda #$00			lda 	#0
.9377	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.937a	60		rts				rts
.937b					TokeniseHexConstant:
.937b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.937d	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.9380	e8		inx				inx									; start of quoted string.
.9381	da		phx				phx 								; push start of constant on top
.9382	ca		dex				dex
.9383					_THFindLoop:
.9383	e8		inx				inx
.9384	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9387	c9 30		cmp #$30			cmp 	#"0"
.9389	90 0c		bcc $9397			bcc 	_THFoundEnd
.938b	c9 3a		cmp #$3a			cmp 	#"9"+1
.938d	90 f4		bcc $9383			bcc 	_THFindLoop
.938f	c9 41		cmp #$41			cmp 	#"A"
.9391	90 04		bcc $9397			bcc 	_THFoundEnd
.9393	c9 47		cmp #$47			cmp 	#"F"+1
.9395	90 ec		bcc $9383			bcc 	_THFindLoop
.9397					_THFoundEnd:
.9397	7a		ply				ply 								; restore start
.9398	20 5c 93	jsr $935c			jsr 	TOWriteBlockXY 				; output the block
.939b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.939c					TokeniseCalculateHash:
.939c	da		phx				phx
.939d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.93a0	a9 00		lda #$00			lda 	#0
.93a2					_TCHLoop:
.93a2	18		clc				clc
.93a3	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.93a6	e8		inx				inx
.93a7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.93aa	d0 f6		bne $93a2			bne 	_TCHLoop
.93ac	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.93af	fa		plx				plx
.93b0	60		rts				rts
.93b1					FixLineBufferCase:
.93b1	a2 00		ldx #$00			ldx 	#0
.93b3					_FLBCLoop:
.93b3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.93b6	f0 22		beq $93da			beq 	_FLBCExit 					; end of string.
.93b8	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.93ba	f0 11		beq $93cd			beq 	_FLBCInQuotes
.93bc	e8		inx				inx
.93bd	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.93bf	90 f2		bcc $93b3			bcc 	_FLBCLoop
.93c1	c9 7b		cmp #$7b			cmp 	#'z'+1
.93c3	b0 ee		bcs $93b3			bcs 	_FLBCLoop
.93c5	38		sec				sec 								; make U/C
.93c6	e9 20		sbc #$20			sbc 	#32
.93c8	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.93cb	80 e6		bra $93b3			bra 	_FLBCLoop
.93cd					_FLBCInQuotes:
.93cd	e8		inx				inx 								; advance
.93ce	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.93d1	f0 07		beq $93da			beq 	_FLBCExit 					; exit on EOS
.93d3	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.93d5	d0 f6		bne $93cd			bne 	_FLBCInQuotes
.93d7	e8		inx				inx 								; skip over it
.93d8	80 d9		bra $93b3			bra 	_FLBCLoop
.93da					_FLBCExit:
.93da	60		rts				rts
.93db					TokeniseExtractLineNumber:
.93db	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.93de	48		pha				pha
.93df	ad 16 07	lda $0716			lda 	tokenLineNumber
.93e2	48		pha				pha
.93e3	20 19 94	jsr $9419			jsr 	_TELNTimes2 				; line # x 4
.93e6	20 19 94	jsr $9419			jsr 	_TELNTimes2 				; line # x 2
.93e9	18		clc				clc 								; add stacked value
.93ea	68		pla				pla
.93eb	6d 16 07	adc $0716			adc 	tokenLineNumber
.93ee	8d 16 07	sta $0716			sta 	tokenLineNumber
.93f1	68		pla				pla
.93f2	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.93f5	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.93f8	20 19 94	jsr $9419			jsr 	_TELNTimes2 				; line # x 10
.93fb	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.93fe	e8		inx				inx
.93ff	29 0f		and #$0f			and 	#15 						; add to line #
.9401	18		clc				clc
.9402	6d 16 07	adc $0716			adc 	tokenLineNumber
.9405	8d 16 07	sta $0716			sta 	tokenLineNumber
.9408	90 03		bcc $940d			bcc 	_TLENNoCarry
.940a	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.940d					_TLENNoCarry:
.940d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9410	c9 30		cmp #$30			cmp 	#'0'
.9412	90 04		bcc $9418			bcc 	_TLENExit
.9414	c9 3a		cmp #$3a			cmp 	#'9'+1
.9416	90 c3		bcc $93db			bcc 	TokeniseExtractLineNumber
.9418					_TLENExit:
.9418	60		rts				rts
.9419					_TELNTimes2:
.9419	0e 16 07	asl $0716			asl 	tokenLineNumber
.941c	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.941f	60		rts				rts
.9420					TokeniseWriteByte:
.9420	da		phx				phx
.9421	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9424	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9427	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.942a	fa		plx				plx
.942b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.942c					CheckCreateVariableRecord:
.942c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.942e	85 36		sta $36				sta 	0+zTemp0
.9430	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9432	85 37		sta $37				sta 	1+zTemp0
.9434					_CCVSearch:
.9434	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9436	f0 2c		beq $9464			beq 	_CCVFail
.9438	a0 01		ldy #$01			ldy 	#1 							; read the hash
.943a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.943c	cd 03 07	cmp $0703			cmp 	identHash
.943f	d0 16		bne $9457			bne 	_CCVNext
.9441	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9443	ae 00 07	ldx $0700			ldx 	identStart
.9446					_CCVCompare:
.9446	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9449	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.944b	e8		inx				inx 								; advance pointers
.944c	c8		iny				iny
.944d	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.944e	d0 07		bne $9457			bne 	_CCVNext  					; didn't match go to next.
.9450	90 f4		bcc $9446			bcc 	_CCVCompare 				; not finished yet.
.9452	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9455	f0 41		beq $9498			beq 	_CCVFound 					; yes, we were successful
.9457					_CCVNext:
.9457	18		clc				clc
.9458	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.945a	65 36		adc $36				adc 	zTemp0
.945c	85 36		sta $36				sta 	zTemp0
.945e	90 d4		bcc $9434			bcc 	_CCVSearch
.9460	e6 37		inc $37				inc 	zTemp0+1
.9462	80 d0		bra $9434			bra 	_CCVSearch
.9464					_CCVFail:
.9464	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9466	ad 03 07	lda $0703			lda 	identHash
.9469	91 36		sta ($36),y			sta 	(zTemp0),y
.946b	c8		iny				iny 								; offset 2 is the type byte
.946c	ad 04 07	lda $0704			lda 	identTypeByte
.946f	91 36		sta ($36),y			sta 	(zTemp0),y
.9471	c8		iny				iny
.9472					_CCVData:
.9472	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9474	91 36		sta ($36),y			sta 	(zTemp0),y
.9476	c8		iny				iny
.9477	c0 08		cpy #$08			cpy 	#8
.9479	90 f7		bcc $9472			bcc 	_CCVData
.947b	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.947e					_CCVCopyName:
.947e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9481	91 36		sta ($36),y			sta 	(zTemp0),y
.9483	e8		inx				inx
.9484	c8		iny				iny
.9485	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9488	d0 f4		bne $947e			bne 	_CCVCopyName
.948a	98		tya				tya 								; patch offset
.948b	92 36		sta ($36)			sta 	(zTemp0)
.948d	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.948f	91 36		sta ($36),y			sta 	(zTemp0),y
.9491	88		dey				dey
.9492	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9494	09 80		ora #$80			ora 	#$80
.9496	91 36		sta ($36),y			sta 	(zTemp0),y
.9498					_CCVFound:
.9498	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.949a	38		sec				sec
.949b	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.949d	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.949f	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.94a2	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.94a4	20 20 94	jsr $9420			jsr 	TokeniseWriteByte
.94a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9bfc					MemoryPeek:
.9bfc	b2 36		lda ($36)			lda 	(zTemp0)
.9bfe	60		rts				rts
.9bff					MemoryPoke:
.9bff	92 36		sta ($36)			sta 	(zTemp0)
.9c01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9c02					PrintHex:
.9c02	48		pha				pha
.9c03	4a		lsr a				lsr 	a
.9c04	4a		lsr a				lsr 	a
.9c05	4a		lsr a				lsr 	a
.9c06	4a		lsr a				lsr 	a
.9c07	20 0b 9c	jsr $9c0b			jsr 	_PrintNibble
.9c0a	68		pla				pla
.9c0b					_PrintNibble:
.9c0b	29 0f		and #$0f			and 	#15
.9c0d	c9 0a		cmp #$0a			cmp 	#10
.9c0f	90 02		bcc $9c13			bcc 	_NoShift
.9c11	69 06		adc #$06			adc 	#6
.9c13					_NoShift:
.9c13	69 30		adc #$30			adc 	#48
.9c15	4c 18 9c	jmp $9c18			jmp 	EXTPrintCharacter
.9c18					EXTPrintCharacter:
.9c18	48		pha				pha
.9c19	da		phx				phx
.9c1a	5a		phy				phy
.9c1b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9c1e	7a		ply				ply
.9c1f	fa		plx				plx
.9c20	68		pla				pla
.9c21	60		rts				rts
.9c22					EXTInputSingleCharacter:
.9c22	da		phx				phx
.9c23	5a		phy				phy
.9c24					_EISCWait:
.9c24	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9c27	c9 00		cmp #$00			cmp 	#0
.9c29	f0 f9		beq $9c24			beq 	_EISCWait
.9c2b	7a		ply				ply
.9c2c	fa		plx				plx
.9c2d	60		rts				rts
.9c2e					EXTInputLine:
.9c2e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9c30					_ILLoop:
.9c30	da		phx				phx 								; read character in
.9c31	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9c34	fa		plx				plx
.9c35	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9c37	f0 12		beq $9c4b			beq 	_ILBackspace
.9c39	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9c3b	f0 15		beq $9c52			beq 	_ILExit
.9c3d	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9c3f	90 ef		bcc $9c30			bcc 	_ILLoop
.9c41	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9c43	f0 eb		beq $9c30			beq 	_ILLoop
.9c45	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9c48	e8		inx				inx
.9c49	80 e5		bra $9c30			bra 	_ILLoop
.9c4b					_ILBackspace:
.9c4b	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9c4d	f0 e1		beq $9c30			beq 	_ILLoop
.9c4f	ca		dex				dex 								; back one.
.9c50	80 de		bra $9c30			bra 	_ILLoop
.9c52					_ILExit:
.9c52	20 18 9c	jsr $9c18			jsr 	EXTPrintCharacter
.9c55	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9c58	60		rts				rts
.9c59					EXTBreakCheck:
.9c59	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.94a8					MemoryNew:
.94a8	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94aa	85 30		sta $30				sta 	codePtr
.94ac	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94ae	85 31		sta $31				sta 	codePtr+1
.94b0	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.94b2	92 30		sta ($30)			sta 	(codePtr)
.94b4	60		rts				rts
.94b5					MemoryAppend:
.94b5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94b7	85 30		sta $30				sta 	codePtr
.94b9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94bb	85 31		sta $31				sta 	codePtr+1
.94bd					_MAFindEnd:
.94bd	b2 30		lda ($30)			lda 	(codePtr)
.94bf	f0 0d		beq $94ce			beq 	_MAFoundEnd
.94c1	18		clc				clc
.94c2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94c4	65 30		adc $30				adc 	codePtr
.94c6	85 30		sta $30				sta 	codePtr
.94c8	90 02		bcc $94cc			bcc 	_CREExit
.94ca	e6 31		inc $31				inc 	codePtr+1
.94cc					_CREExit:
.94cc	80 ef		bra $94bd			bra 	_MAFindEnd
.94ce					_MAFoundEnd:
.94ce	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.94d1	c0 04		cpy #$04			cpy 	#4 							; blank line
.94d3	f0 0e		beq $94e3			beq 	_MANoLine
.94d5	a9 00		lda #$00			lda 	#0 							; end of program
.94d7	91 30		sta ($30),y			sta 	(codePtr),y
.94d9					_MACopy:
.94d9	88		dey				dey
.94da	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.94dd	91 30		sta ($30),y			sta 	(codePtr),y
.94df	c0 00		cpy #$00			cpy 	#0
.94e1	d0 f6		bne $94d9			bne 	_MACopy
.94e3					_MANoLine:
.94e3	60		rts				rts
.94e4					MemoryInline:
.94e4	98		tya				tya 								; put address into stack,x
.94e5	18		clc				clc
.94e6	65 30		adc $30				adc 	codePtr
.94e8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94eb	a5 31		lda $31				lda 	codePtr+1
.94ed	69 00		adc #$00			adc 	#0
.94ef	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94f2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.94f5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.94f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.94f9					MemoryTransferAX:
.94f9	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.94fb	86 37		stx $37				stx 	zTemp0+1
.94fd	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94ff	85 30		sta $30				sta 	codePtr
.9501	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9503	85 31		sta $31				sta 	codePtr+1
.9505					_MTAXLoop:
.9505	b2 30		lda ($30)			lda 	(codePtr)
.9507	f0 1d		beq $9526			beq 	_MTAXError 					; not found.
.9509	a0 01		ldy #$01			ldy 	#1 							; check LSB
.950b	b1 30		lda ($30),y			lda 	(codePtr),y
.950d	c5 36		cmp $36				cmp 	zTemp0
.950f	d0 07		bne $9518			bne 	_MTAXNext
.9511	c8		iny				iny 								; check MSB
.9512	b1 30		lda ($30),y			lda 	(codePtr),y
.9514	c5 37		cmp $37				cmp 	zTemp0+1
.9516	f0 0d		beq $9525			beq 	_MTAXExit 					; success !
.9518					_MTAXNext:
.9518	18		clc				clc
.9519	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.951b	65 30		adc $30				adc 	codePtr
.951d	85 30		sta $30				sta 	codePtr
.951f	90 02		bcc $9523			bcc 	_CREExit
.9521	e6 31		inc $31				inc 	codePtr+1
.9523					_CREExit:
.9523	80 e0		bra $9505			bra 	_MTAXLoop
.9525					_MTAXExit:
.9525	60		rts				rts
.9526					_MTAXError:
.9526	a9 0d		lda #$0d		lda	#13
.9528	4c 9b 84	jmp $849b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
