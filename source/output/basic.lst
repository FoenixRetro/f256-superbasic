
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" "-D TILEMAP_ADDRESS=\$24000" "-D TILEIMAGES_ADDRESS=\$26000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Mar  4 18:08:33 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=$24000						 TILEMAP_ADDRESS=$24000
=$26000						 TILEIMAGES_ADDRESS=$26000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						ControlStorage = $400
=$420						MemoryStorage = $420
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0420						identStart:
>0420								.fill 	1
.0421						identTypeStart:
>0421								.fill 	1
.0422						identTypeEnd:
>0422								.fill 	1
.0423						identHash:
>0423								.fill 	1
.0424						identTypeByte:
>0424								.fill 	1	 						; (see tokenising.pdf)
.0425						encodeState:
>0425								.fill 	1
.0426						digitTemp:
>0426								.fill 	1
.0427						decimalCount:
>0427								.fill 	1
.0428						lowMemPtr:
>0428								.fill 	2
.042a						stringMemory:
>042a								.fill 	2
.042c						stringInitialised:
>042c								.fill 	1
.042d						stringTempPointer:
>042d								.fill 	2
.042f						breakCheck:
>042f								.fill 	1
.0430						decimalPlaces:
>0430								.fill 	1
.0431						dbOffset:
>0431								.fill 	1
.0432						lastParameter:
>0432								.fill 	1
.0433						dataPointer:
>0433								.fill 	5
.0438						inDataStatement:
>0438								.fill 	1
.0439						tbOffset:
>0439								.fill 	1
.043a						AssemblerAddress:
>043a								.fill 	2
.043c						AssemblerControl:
>043c								.fill 	1
.043d						ParamStart:
>043d								.fill 	2
.043f						IsGroup1:
>043f								.fill 	1
.0440						BaseOpcode:
>0440								.fill 	1
.0441						ModeMask:
>0441								.fill 	1
.0442						listIndent:
>0442								.fill 	1
.0443						lcLastCharacter:
>0443								.fill 	1
.0444						isPrintFlag:
>0444								.fill 	1
.0445						currentListColour:
>0445								.fill 	1
.0446						tokenOffset:
>0446								.fill 	1
.0447						tokenLineNumber:
>0447								.fill 	2
.0449						tokenBuffer:
>0449								.fill 	253
.0546						lineBuffer:
>0546								.fill 	253
.0643						numberBuffer:
>0643								.fill 	34
.0665						decimalBuffer:
>0665								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TILELPAREN                       = $aa; $aa TILE(
=$ab						KWD_TIMERLPAREN                      = $ab; $ab TIMER(
=$ac						KWD_TRUE                             = $ac; $ac TRUE
=$ad						KWD_VALLPAREN                        = $ad; $ad VAL(
=$ae						KWD_FOR                              = $ae; $ae FOR
=$af						KWD_IF                               = $af; $af IF
=$b0						KWD_PROC                             = $b0; $b0 PROC
=$b1						KWD_REPEAT                           = $b1; $b1 REPEAT
=$b2						KWD_WHILE                            = $b2; $b2 WHILE
=$b3						KWD_ENDIF                            = $b3; $b3 ENDIF
=$b4						KWD_ENDPROC                          = $b4; $b4 ENDPROC
=$b5						KWD_NEXT                             = $b5; $b5 NEXT
=$b6						KWD_THEN                             = $b6; $b6 THEN
=$b7						KWD_UNTIL                            = $b7; $b7 UNTIL
=$b8						KWD_WEND                             = $b8; $b8 WEND
=$b9						KWD_AT                               = $b9; $b9 AT
=$ba						KWD_BY                               = $ba; $ba BY
=$bb						KWD_CALL                             = $bb; $bb CALL
=$bc						KWD_CIRCLE                           = $bc; $bc CIRCLE
=$bd						KWD_CLEAR                            = $bd; $bd CLEAR
=$be						KWD_COLOR                            = $be; $be COLOR
=$bf						KWD_COLOUR                           = $bf; $bf COLOUR
=$c0						KWD_DATA                             = $c0; $c0 DATA
=$c1						KWD_DIM                              = $c1; $c1 DIM
=$c2						KWD_DOWNTO                           = $c2; $c2 DOWNTO
=$c3						KWD_ELSE                             = $c3; $c3 ELSE
=$c4						KWD_FROM                             = $c4; $c4 FROM
=$c5						KWD_GFX                              = $c5; $c5 GFX
=$c6						KWD_HERE                             = $c6; $c6 HERE
=$c7						KWD_IMAGE                            = $c7; $c7 IMAGE
=$c8						KWD_LET                              = $c8; $c8 LET
=$c9						KWD_LINE                             = $c9; $c9 LINE
=$ca						KWD_LOCAL                            = $ca; $ca LOCAL
=$cb						KWD_MEMCOPY                          = $cb; $cb MEMCOPY
=$cc						KWD_OFF                              = $cc; $cc OFF
=$cd						KWD_ON                               = $cd; $cd ON
=$ce						KWD_OUTLINE                          = $ce; $ce OUTLINE
=$cf						KWD_PALETTE                          = $cf; $cf PALETTE
=$d0						KWD_PLOT                             = $d0; $d0 PLOT
=$d1						KWD_POKE                             = $d1; $d1 POKE
=$d2						KWD_POKED                            = $d2; $d2 POKED
=$d3						KWD_POKEL                            = $d3; $d3 POKEL
=$d4						KWD_POKEW                            = $d4; $d4 POKEW
=$d5						KWD_READ                             = $d5; $d5 READ
=$d6						KWD_RECT                             = $d6; $d6 RECT
=$d7						KWD_REM                              = $d7; $d7 REM
=$d8						KWD_SOLID                            = $d8; $d8 SOLID
=$d9						KWD_SOUND                            = $d9; $d9 SOUND
=$da						KWD_SPRITE                           = $da; $da SPRITE
=$db						KWD_TEXT                             = $db; $db TEXT
=$dc						KWD_TO                               = $dc; $dc TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_CURSOR                           = $8a; $8a CURSOR
=$8b						KWD1_DIR                              = $8b; $8b DIR
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_OPTION                           = $99; $99 OPTION
=$9a						KWD1_PING                             = $9a; $9a PING
=$9b						KWD1_PRINT                            = $9b; $9b PRINT
=$9c						KWD1_RESTORE                          = $9c; $9c RESTORE
=$9d						KWD1_RETURN                           = $9d; $9d RETURN
=$9e						KWD1_RUN                              = $9e; $9e RUN
=$9f						KWD1_SAVE                             = $9f; $9f SAVE
=$a0						KWD1_SETDATE                          = $a0; $a0 SETDATE
=$a1						KWD1_SETTIME                          = $a1; $a1 SETTIME
=$a2						KWD1_SHOOT                            = $a2; $a2 SHOOT
=$a3						KWD1_SPRITES                          = $a3; $a3 SPRITES
=$a4						KWD1_STOP                             = $a4; $a4 STOP
=$a5						KWD1_TILE                             = $a5; $a5 TILE
=$a6						KWD1_TILES                            = $a6; $a6 TILES
=$a7						KWD1_TRY                              = $a7; $a7 TRY
=$a8						KWD1_VERIFY                           = $a8; $a8 VERIFY
=$a9						KWD1_XGO                              = $a9; $a9 XGO
=$aa						KWD1_XLOAD                            = $aa; $aa XLOAD
=$ab						KWD1_ZAP                              = $ab; $ab ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ae						KWC_FIRST_STRUCTURE = $ae
=$b3						KWC_FIRST_STRUCTURE_DEC = $b3
=$b8						KWC_LAST_STRUCTURE = $b8
=$83						KWC_FIRST_UNARY = $83
=$ad						KWC_LAST_UNARY = $ad

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 d0 a1	jsr $a1d0		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 86 b9	jsr $b986		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 b9 b9	jsr $b9b9		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 1f b3	jsr $b31f		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 cb b5	jsr $b5cb		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKInitialise:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 13 b3	jsr $b313		jsr	Export_TKInitialise
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80a3		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a5		09 80		ora #$80			ora 	#$80
.80a7		85 00		sta $00				sta 	0
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80ca		20 ce 83	jsr $83ce			jsr 	KNLSetDrive
.80cd		20 93 80	jsr $8093			jsr 	TKInitialise 				; initialise tokeniser.
.80d0		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80d2		aa		tax				tax
.80d3		a8		tay				tay
.80d4		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80d7		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d9		20 6b 80	jsr $806b			jsr 	SNDCommand
.80dc		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e1		a9 09		lda #$09			lda 	#9
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e9		64 01		stz $01				stz 	1
.80eb		ad ad d6	lda $d6ad			lda 	$D6AD
.80ee		20 a3 85	jsr $85a3			jsr 	PrintHex
.80f1		ad ac d6	lda $d6ac			lda 	$D6AC
.80f4		20 a3 85	jsr $85a3			jsr 	PrintHex
.80f7		ad ab d6	lda $d6ab			lda 	$D6AB
.80fa		20 a3 85	jsr $85a3			jsr 	PrintHex
.80fd		ad aa d6	lda $d6aa			lda 	$D6AA
.8100		20 a3 85	jsr $85a3			jsr 	PrintHex
.8103		a9 20		lda #$20			lda 	#32
.8105		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8108		ad a8 d6	lda $d6a8			lda 	$D6A8
.810b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810e		ad a9 d6	lda $d6a9			lda 	$D6A9
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a9 0d		lda #$0d			lda 	#13 						; display Kernel information
.8116		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8119		a9 09		lda #$09			lda 	#9
.811b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.811e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8121		a9 08		lda #$08			lda 	#$08
.8123		a2 e0		ldx #$e0			ldx 	#$E0
.8125		20 34 94	jsr $9434			jsr 	PrintStringXA
.8128		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.812a		a9 3b		lda #$3b			lda 	#Prompt & $FF
.812c		20 34 94	jsr $9434			jsr 	PrintStringXA
.812f		20 85 82	jsr $8285			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8132		20 0c 8e	jsr $8e0c			jsr 	NewProgram 					; erase current program
.8135		4c 0f 88	jmp $880f			jmp 	WarmStart					; make same size.
.8138		4c 0f 88	jmp $880f			jmp 	WarmStart
>813b		0d				Prompt:	.text 	13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>813c		09 09 30 34 2f 30 33 2f			.text 9,9,"04/03/23 01b"
>8144		32 33 20 30 31 62

;******  Return to file: ./common/aa.system/00start.asm

>814a		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.814e						ProcessEvents:
.814e		20 0d 84	jsr $840d			jsr 	KNLSetEventPointer
.8151		20 8e 82	jsr $828e			jsr     GetNextEvent 				; get next event
.8154		b0 36		bcs $818c			bcs 	_PEExitZ 					; nothing left to process.
.8156		ad bb 07	lda $07bb			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8159		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.815b		d0 f1		bne $814e			bne 	ProcessEvents
.815d		ad c1 07	lda $07c1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8160		30 0b		bmi $816d			bmi 	_PEIsRaw
.8162		d0 ea		bne $814e			bne 	ProcessEvents
.8164		ad c0 07	lda $07c0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8167		c9 03		cmp #$03			cmp 	#3
.8169		f0 1e		beq $8189			beq 	_PEReturnBreak  			; no, keep going.
.816b		80 0b		bra $8178			bra 	_PEQueueA
.816d						_PEIsRaw:
.816d		ad bf 07	lda $07bf			lda 	KNLEvent.key.raw 			; return raw key if F1-F12
.8170		c9 81		cmp #$81			cmp 	#129
.8172		90 da		bcc $814e			bcc		ProcessEvents
.8174		c9 8d		cmp #$8d			cmp 	#140+1
.8176		b0 d6		bcs $814e			bcs 	ProcessEvents
.8178						_PEQueueA:
.8178		da		phx				phx
.8179		ae 7d 06	ldx $067d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.817c		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.817e		f0 06		beq $8186			beq 	_PENoQueue
.8180		9d 75 06	sta $0675,x			sta 	KeyboardQueue,x 			; write into queue
.8183		ee 7d 06	inc $067d			inc 	KeyboardQueueEntries 		; bump count
.8186						_PENoQueue:
.8186		fa		plx				plx
.8187		80 c5		bra $814e			bra 	ProcessEvents
.8189						_PEReturnBreak:
.8189		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.818b		60		rts				rts
.818c						_PEExitZ:
.818c		a9 00		lda #$00			lda 	#0
.818e		60		rts				rts
.818f						PopKeyboardQueue:
.818f		ad 7d 06	lda $067d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8192		f0 17		beq $81ab			beq 	_PKQExit 					; zero, then exit.
.8194		ad 75 06	lda $0675			lda 	KeyboardQueue 				; save head of keyboard queue
.8197		48		pha				pha
.8198		da		phx				phx 								; drop head of queue
.8199		a2 00		ldx #$00			ldx 	#0
.819b						_PKQLoop:
.819b		bd 76 06	lda $0676,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.819e		9d 75 06	sta $0675,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.81a1		e8		inx				inx
.81a2		e0 07		cpx #$07			cpx 	#7
.81a4		d0 f5		bne $819b			bne 	_PKQLoop
.81a6		fa		plx				plx
.81a7		ce 7d 06	dec $067d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.81aa		68		pla				pla 								; restore head of queue.
.81ab						_PKQExit:
.81ab		60		rts				rts
.81ac						KNLGetKeyPressed:
.81ac		a5 01		lda $01				lda 	1 							; save I/O 0
.81ae		48		pha				pha
.81af		64 01		stz $01				stz 	1 							; access I/O Page 0
.81b1		38		sec				sec 								; calculate timer - LastTick
.81b2		ad 59 d6	lda $d659			lda 	$D659
.81b5		cd 7e 06	cmp $067e			cmp 	LastTick
.81b8		f0 06		beq $81c0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.81ba		8d 7e 06	sta $067e			sta 	LastTick 					; update last timer
.81bd		20 7d 82	jsr $827d			jsr 	TickHandler 							; go do the code.
.81c0						_NoFireTick:
.81c0		68		pla				pla 								; restore I/O 0
.81c1		85 01		sta $01				sta 	1
.81c3		ad 7d 06	lda $067d			lda 	KeyboardQueueEntries 		; something in the queue
.81c6		d0 c7		bne $818f			bne 	PopKeyboardQueue 			; if so, pop and return it
.81c8		20 4e 81	jsr $814e			jsr 	ProcessEvents 				; process any outstanding events
.81cb		a9 00		lda #$00			lda 	#0
.81cd		60		rts				rts
.81ce						KNLGetSingleCharacter:
.81ce		20 ac 81	jsr $81ac			jsr 	KNLGetKeyPressed
.81d1		c9 00		cmp #$00			cmp 	#0
.81d3		f0 f9		beq $81ce			beq 	KNLGetSingleCharacter
.81d5		60		rts				rts
=8						KBDQueueSize = 8
.0675						KeyboardQueue:
>0675								.fill 	KBDQueueSize
.067d						KeyboardQueueEntries:
>067d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81d6						EXTInputLine:
.81d6		48		pha				pha
.81d7		da		phx				phx
.81d8		5a		phy				phy
.81d9		a5 01		lda $01				lda 	1 							; save I/O page
.81db		48		pha				pha
.81dc						_EILLoop:
.81dc		20 ce 81	jsr $81ce			jsr 	KNLGetSingleCharacter 		; get one single character
.81df		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81e1		f0 44		beq $8227			beq 	_EILExit
.81e3		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81e5		f0 2a		beq $8211			beq 	_EILDelete
.81e7		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81e9		f0 1c		beq $8207			beq 	_EILBackspace
.81eb		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81ed		90 12		bcc $8201			bcc 	_EILPrintLoop
.81ef		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81f1		b0 0e		bcs $8201			bcs 	_EILPrintLoop
.81f3		48		pha				pha 								; save character
.81f4		a9 02		lda #$02			lda 	#2  						; insert a space
.81f6		85 01		sta $01				sta 	1
.81f8		20 6b 82	jsr $826b			jsr 	EXTILInsert 				; insert in text screen
.81fb		e6 01		inc $01				inc 	1
.81fd		20 6b 82	jsr $826b			jsr 	EXTILInsert 				; insert in colour screen
.8200		68		pla				pla 								; get character back.
.8201						_EILPrintLoop:
.8201		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8204		80 d6		bra $81dc			bra 	_EILLoop
.8206		60		rts				rts
.8207						_EILBackspace:
.8207		ad e8 07	lda $07e8			lda 	EXTColumn					; can we backspace ?
.820a		f0 d0		beq $81dc			beq 	_EILLoop
.820c		a9 02		lda #$02			lda 	#2 							; move cursor left
.820e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8211						_EILDelete
.8211		a9 02		lda #$02			lda 	#2 							; text block
.8213		85 01		sta $01				sta 	1
.8215		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.8217		20 56 82	jsr $8256			jsr 	EXTILDelete
.821a		e6 01		inc $01				inc 	1 							; colour block
.821c		ac e8 07	ldy $07e8			ldy 	EXTColumn 					; get attribute of last character
.821f		88		dey				dey
.8220		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8222		20 56 82	jsr $8256			jsr 	EXTILDelete 				; backspace attribute
.8225		80 b5		bra $81dc			bra 	_EILLoop 					; and go round.
.8227						_EILExit:
.8227		a9 02		lda #$02			lda 	#2 							; switch to page 2
.8229		85 01		sta $01				sta 	1
.822b		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.822d						_EILScrapeLine:
.822d		b1 40		lda ($40),y			lda 	(EXTAddress),y
.822f		99 46 05	sta $0546,y			sta 	lineBuffer,y
.8232		c8		iny				iny
.8233		cc ea 07	cpy $07ea			cpy 	EXTScreenWidth
.8236		d0 f5		bne $822d			bne 	_EILScrapeLine
.8238						_EILTrimSpaces:
.8238		88		dey				dey
.8239		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.823b		f0 07		beq $8244			beq 	_EILEndTrim		 			; zero the input line.
.823d		b9 46 05	lda $0546,y			lda 	lineBuffer,y
.8240		c9 20		cmp #$20			cmp 	#' '
.8242		f0 f4		beq $8238			beq 	_EILTrimSpaces 				; if fail this found non space character
.8244						_EILEndTrim:
.8244		c8		iny				iny 								; trim after non space character.
.8245		a9 00		lda #$00			lda 	#0 							; trim here.
.8247		99 46 05	sta $0546,y			sta 	lineBuffer,y
.824a		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.824c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.824f		68		pla				pla 								; reset I/O page
.8250		85 01		sta $01				sta 	1
.8252		7a		ply				ply
.8253		fa		plx				plx
.8254		68		pla				pla
.8255		60		rts				rts
.8256						EXTILDelete:
.8256		48		pha				pha 								; save the new character
.8257		ac e8 07	ldy $07e8			ldy 	EXTColumn 					; start copying from here.
.825a						_EXTDLoop:
.825a		c8		iny				iny 								; copy one byte down.
.825b		b1 40		lda ($40),y			lda 	(EXTAddress),y
.825d		88		dey				dey
.825e		91 40		sta ($40),y			sta 	(EXTAddress),y
.8260		c8		iny				iny 								; do till end of line.
.8261		cc ea 07	cpy $07ea			cpy 	EXTScreenWidth
.8264		90 f4		bcc $825a			bcc 	_EXTDLoop
.8266		88		dey				dey 	 							; write in last slot.
.8267		68		pla				pla
.8268		91 40		sta ($40),y			sta 	(EXTAddress),y
.826a		60		rts				rts
.826b						EXTILInsert:
.826b		ac ea 07	ldy $07ea			ldy 	EXTScreenWidth 				; end position
.826e						_EXTILoop:
.826e		88		dey				dey 								; back one
.826f		cc e8 07	cpy $07e8			cpy 	EXTColumn 					; exit if reached insert point.
.8272		f0 08		beq $827c			beq 	_EXTIExit
.8274		88		dey				dey 								; copy one byte up.
.8275		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8277		c8		iny				iny
.8278		91 40		sta ($40),y			sta 	(EXTAddress),y
.827a		80 f2		bra $826e			bra 	_EXTILoop
.827c						_EXTIExit:
.827c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.827d						TickHandler:
.827d		da		phx				phx
.827e		5a		phy				phy 								; need to preserve Y
.827f		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8282		7a		ply				ply
.8283		fa		plx				plx
.8284		60		rts				rts
.067e						LastTick:
>067e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8285						ResetIOTracking:
.8285		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8287						_RIOLoop:
.8287		9e 7f 06	stz $067f,x			stz 	GNEBegin,x
.828a		ca		dex				dex
.828b		10 fa		bpl $8287			bpl 	_RIOLoop
.828d		60		rts				rts
.828e						GetNextEvent:
.828e		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8291		08		php				php									; save yes/no flag.
.8292		b0 29		bcs $82bd			bcs 	_GNEExit
.8294		48		pha				pha 								; save registers
.8295		da		phx				phx
.8296		5a		phy				phy
.8297		ad bb 07	lda $07bb			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.829a		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.829c		f0 04		beq $82a2			beq 	_GNEKeyEvent
.829e		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.82a0		d0 08		bne $82aa			bne 	_GNECheckMouseEvent
.82a2						_GNEKeyEvent:
.82a2		20 7c 83	jsr $837c			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.82a5		20 99 83	jsr $8399			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.82a8		80 10		bra $82ba			bra 	_GNEEventExit
.82aa						_GNECheckMouseEvent:
.82aa		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.82ac		d0 05		bne $82b3			bne 	_GNENotDelta
.82ae		20 bf 82	jsr $82bf			jsr 	ProcessMouseDeltaEvent 		; process them.
.82b1		80 07		bra $82ba			bra 	_GNEEventExit
.82b3						_GNENotDelta:
.82b3		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.82b5		d0 03		bne $82ba			bne 	_GNEEventExit
.82b7		20 ee 82	jsr $82ee			jsr 	ProcessMouseClickEvent 		; process them.
.82ba						_GNEEventExit:
.82ba		7a		ply				ply 								; restore registers
.82bb		fa		plx				plx
.82bc		68		pla				pla
.82bd						_GNEExit:
.82bd		28		plp				plp
.82be		60		rts				rts
.82bf						ProcessMouseDeltaEvent:
.82bf		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.82c1		ad be 07	lda $07be			lda 	KNLEvent.mouse.delta.x
.82c4		20 15 83	jsr $8315			jsr 	PMKAdjustTotal
.82c7		20 58 83	jsr $8358			jsr 	PMKAddSubtract
.82ca		ad bf 07	lda $07bf			lda 	KNLEvent.mouse.delta.y
.82cd		20 15 83	jsr $8315			jsr 	PMKAdjustTotal
.82d0		20 58 83	jsr $8358			jsr 	PMKAddSubtract
.82d3		ad c0 07	lda $07c0			lda 	KNLEvent.mouse.delta.z
.82d6		20 15 83	jsr $8315			jsr 	PMKAdjustTotal
.82d9		20 58 83	jsr $8358			jsr 	PMKAddSubtract
.82dc		ad c1 07	lda $07c1			lda 	KNLEvent.mouse.delta.buttons
.82df		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82e1		20 03 83	jsr $8303			jsr 	PMKOutputButton
.82e4		20 03 83	jsr $8303			jsr 	PMKOutputButton
.82e7		20 03 83	jsr $8303			jsr 	PMKOutputButton
.82ea		20 24 83	jsr $8324			jsr 	PMKClipMouseCoord
.82ed		60		rts				rts
.82ee						ProcessMouseClickEvent:
.82ee		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82f0		ad be 07	lda $07be			lda 	KNLEvent.mouse.clicks.inner
.82f3		20 5c 83	jsr $835c			jsr 	PMKAdd
.82f6		ad bf 07	lda $07bf			lda 	KNLEvent.mouse.clicks.middle
.82f9		20 5c 83	jsr $835c			jsr 	PMKAdd
.82fc		ad c0 07	lda $07c0			lda 	KNLEvent.mouse.clicks.outer
.82ff		20 5c 83	jsr $835c			jsr 	PMKAdd
.8302		60		rts				rts
.8303						PMKOutputButton:
.8303		9e 7f 06	stz $067f,x			stz 	GNEBegin,x 					; button to zero
.8306		9e 80 06	stz $0680,x			stz 	GNEBegin+1,x
.8309		6a		ror a				ror 	a 							; shift LSB into carry
.830a		90 06		bcc $8312			bcc 	_PMKOBExit
.830c		de 7f 06	dec $067f,x			dec 	GNEBegin,x 					; if set then set to -1
.830f		de 80 06	dec $0680,x			dec 	GNEBegin+1,x
.8312						_PMKOBExit:
.8312		e8		inx				inx  								; next button
.8313		e8		inx				inx
.8314		60		rts				rts
.8315						PMKAdjustTotal:
.8315		48		pha				pha 								; save offset A index X
.8316		da		phx				phx
.8317		48		pha				pha 								; point X to the position
.8318		8a		txa				txa
.8319		18		clc				clc
.831a		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.831c		aa		tax				tax
.831d		68		pla				pla
.831e		20 58 83	jsr $8358			jsr 	PMKAddSubtract 				; reuse the addition code.
.8321		fa		plx				plx 								; restore XA
.8322		68		pla				pla
.8323		60		rts				rts
.8324						PMKClipMouseCoord:
.8324		a2 00		ldx #$00			ldx 	#0
.8326						_PCMCLoop:
.8326		bd af 06	lda $06af,x			lda 	MousePosX+1,x 				; check if -ve
.8329		10 06		bpl $8331			bpl 	_PCMCNotNeg
.832b		9e ae 06	stz $06ae,x			stz 	MousePosX,x 				; if so zero position.
.832e		9e af 06	stz $06af,x			stz 	MousePosX+1,x
.8331						_PCMCNotNeg:
.8331		bd ae 06	lda $06ae,x			lda 	MousePosX,x 				; compare pos vs extent
.8334		dd 52 83	cmp $8352,x			cmp 	_PCMCExtent,x
.8337		bd af 06	lda $06af,x			lda 	MousePosX+1,x
.833a		fd 53 83	sbc $8353,x			sbc 	_PCMCExtent+1,x
.833d		90 0c		bcc $834b			bcc 	_PCMCNotOver 				; in range ?
.833f		bd 52 83	lda $8352,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8342		9d ae 06	sta $06ae,x			sta 	MousePosX,x
.8345		bd 53 83	lda $8353,x			lda 	_PCMCExtent+1,x
.8348		9d af 06	sta $06af,x			sta 	MousePosX+1,x
.834b						_PCMCNotOver:
.834b		e8		inx				inx
.834c		e8		inx				inx
.834d		e0 06		cpx #$06			cpx 	#3*2
.834f		d0 d5		bne $8326			bne 	_PCMCLoop
.8351		60		rts				rts
.8352						_PCMCExtent:
>8352		3f 01 ef 00 ff 00				.word 	319,239,255
.8358						PMKAddSubtract:
.8358		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.835a		30 0e		bmi $836a			bmi 	PMKSubtract
.835c						PMKAdd:
.835c		18		clc				clc
.835d		7d 7f 06	adc $067f,x			adc 	GNEBegin,x
.8360		9d 7f 06	sta $067f,x			sta 	GNEBegin,x
.8363		90 14		bcc $8379			bcc 	PMKExit
.8365		fe 80 06	inc $0680,x			inc 	GNEBegin+1,x
.8368		80 0f		bra $8379			bra 	PMKExit
.836a						PMKSubtract:
.836a		18		clc				clc
.836b		7d 7f 06	adc $067f,x			adc 	GNEBegin,x
.836e		9d 7f 06	sta $067f,x			sta 	GNEBegin,x
.8371		bd 80 06	lda $0680,x			lda 	GNEBegin+1,x
.8374		69 ff		adc #$ff			adc 	#$FF
.8376		9d 80 06	sta $0680,x			sta 	GNEBegin+1,x
.8379						PMKExit:
.8379		e8		inx				inx 								; next slot ?
.837a		e8		inx				inx
.837b		60		rts				rts
.837c						ProcessKeyboardEvent:
.837c		ad bf 07	lda $07bf			lda 	KNLEvent.key.raw 			; raw key code.
.837f		20 ba 83	jsr $83ba			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8382		ac bb 07	ldy $07bb			ldy 	KNLEvent.type
.8385		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8387		f0 07		beq $8390			beq 	_PKERelease
.8389		1d 80 06	ora $0680,x			ora 	KeyStatus,x 				; set bit
.838c		9d 80 06	sta $0680,x			sta 	KeyStatus,x
.838f		60		rts				rts
.8390						_PKERelease:
.8390		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8392		3d 80 06	and $0680,x			and 	KeyStatus,x
.8395		9d 80 06	sta $0680,x			sta 	KeyStatus,x
.8398		60		rts				rts
.8399						UpdateKeyboardJoystick:
.8399		9c a1 06	stz $06a1			stz 	KeyJoystick
.839c		a2 00		ldx #$00			ldx 	#0
.839e						_UKJLoop:
.839e		bd b5 83	lda $83b5,x			lda 	_UKJKeys,x 					; which key
.83a1		29 1f		and #$1f			and 	#$1F
.83a3		a8		tay				tay
.83a4		b9 80 06	lda $0680,y			lda 	KeyStatus,y 				; get status
.83a7		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.83a9		18		clc				clc  								; set C if bit set
.83aa		69 ff		adc #$ff			adc 	#$FF
.83ac		2e a1 06	rol $06a1			rol 	KeyJoystick 				; shift into place
.83af		e8		inx				inx
.83b0		e0 05		cpx #$05			cpx 	#5 							; do all 5
.83b2		d0 ea		bne $839e			bne 	_UKJLoop
.83b4		60		rts				rts
.83b5						_UKJKeys:
>83b5		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.83ba						KeyboardConvertXA:
.83ba		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.83bc		8e a0 06	stx $06a0			stx 	KeyMaskTemp
.83bf						_KCCALoop:
.83bf		18		clc				clc
.83c0		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.83c2		b0 05		bcs $83c9			bcs 	_KCCADone
.83c4		0e a0 06	asl $06a0			asl 	KeyMaskTemp 				; shift the mask temp
.83c7		80 f6		bra $83bf			bra 	_KCCALoop
.83c9						_KCCADone:
.83c9		aa		tax				tax 								; table entry in X
.83ca		ad a0 06	lda $06a0			lda 	KeyMaskTemp 				; mask temp in A.
.83cd		60		rts				rts
.067f						GNEBegin:
.067f						CMDMouseFlag:
>067f								.fill 	1
.0680						KeyStatus:
>0680								.fill 	32
.06a0						KeyMaskTemp:
>06a0								.fill 	1
.06a1						KeyJoystick:
>06a1								.fill 	1
.06a2						MouseDeltaX:
>06a2								.fill 	2
.06a4						MouseDeltaY:
>06a4								.fill 	2
.06a6						MouseDeltaZ:
>06a6								.fill 	2
.06a8						MouseCountInner:
>06a8								.fill 	2
.06aa						MouseCountMiddle:
>06aa								.fill 	2
.06ac						MouseCountOuter:
>06ac								.fill 	2
.06ae						MousePosX:
>06ae								.fill 	2
.06b0						MousePosY:
>06b0								.fill 	2
.06b2						MousePosZ:
>06b2								.fill 	2
.06b4						MouseStatusX:
>06b4								.fill 	2
.06b6						MouseStatusY:
>06b6								.fill 	2
.06b8						MouseStatusZ:
>06b8								.fill 	2
.06ba						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.83ce						KNLSetDrive:
.83ce		8d ba 07	sta $07ba			sta 	KNLDefaultDrive
.83d1		60		rts				rts
.83d2						KNLOpenFileWrite:
.83d2		48		pha				pha
.83d3		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83d5		80 03		bra $83da			bra 	KNLOpenStart
.83d7						KNLOpenFileRead:
.83d7		48		pha				pha
.83d8		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83da						KNLOpenStart:
.83da		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83dc		68		pla				pla
.83dd		20 18 84	jsr $8418			jsr 	KNLSetupFileName
.83e0		20 0d 84	jsr $840d			jsr 	KNLSetEventPointer
.83e3		ad ba 07	lda $07ba			lda 	KNLDefaultDrive 			; currently drive zero only.
.83e6		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83e8		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83eb		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83ed		b0 1d		bcs $840c			bcs     _out
.83ef						_loop
.83ef		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83f2		20 8e 82	jsr $828e			jsr     GetNextEvent
.83f5		b0 f8		bcs $83ef			bcs     _loop
.83f7		ad bb 07	lda $07bb			lda 	KNLEvent.type
.83fa		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83fc		f0 0a		beq $8408			beq 	_success
.83fe		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8400		f0 0a		beq $840c			beq 	_out
.8402		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8404		f0 06		beq $840c			beq 	_out
.8406		80 e7		bra $83ef			bra     _loop
.8408						_success
.8408		ad be 07	lda $07be			lda     KNLEvent.file.stream
.840b		18		clc				clc
.840c						_out
.840c		60		rts				rts
.840d						KNLSetEventPointer:
.840d		48		pha				pha
.840e		a9 bb		lda #$bb			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8410		85 f0		sta $f0				sta     kernel.args.events+0
.8412		a9 07		lda #$07			lda     #KNLEvent >> 8
.8414		85 f1		sta $f1				sta     kernel.args.events+1
.8416		68		pla				pla
.8417		60		rts				rts
.8418						KNLSetupFileName:
.8418		5a		phy				phy 								; save Y on stack
.8419		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.841b		86 37		stx $37				stx 	zTemp0+1
.841d		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.841f		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8421		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8423						_KNLGetLength:
.8423		c8		iny				iny
.8424		b1 36		lda ($36),y			lda 	(zTemp0),y
.8426		d0 fb		bne $8423			bne 	_KNLGetLength
.8428		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.842a		7a		ply				ply
.842b		60		rts				rts
.842c						KNLReadBlock:
.842c		85 f3		sta $f3				sta     kernel.args.file.read.stream
.842e		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8430		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8433		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8435		b0 2e		bcs $8465			bcs     _KGNBExitFail               ; report as general error
.8437						_KGRBEventLoop:
.8437		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.843a		20 8e 82	jsr $828e			jsr     GetNextEvent
.843d		b0 f8		bcs $8437			bcs     _KGRBEventLoop
.843f		ad bb 07	lda $07bb			lda 	KNLEvent.type 				; get event
.8442		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8444		f0 0a		beq $8450			beq     _KNLRBGetNextByte
.8446		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8448		f0 1b		beq $8465			beq 	_KGNBExitFail
.844a		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.844c		f0 17		beq $8465			beq 	_KGNBExitFail
.844e		80 e7		bra $8437			bra 	_KGRBEventLoop
.8450						_KNLRBGetNextByte:
.8450		a9 ba		lda #$ba			lda     #<KNLReadBuffer 			; Set the target buffer
.8452		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8454		a9 06		lda #$06			lda     #>KNLReadBuffer
.8456		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8458		ad c1 07	lda $07c1			lda     KNLEvent.file.data.read 	; Set the target length
.845b		85 fd		sta $fd				sta     kernel.args.recv.buflen
.845d		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8460		ad c1 07	lda $07c1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8463		18		clc				clc
.8464		60		rts				rts
.8465						_KGNBExitFail:
.8465		38		sec				sec
.8466		60		rts				rts
.8467						KNLWriteBlock:
.8467		da		phx				phx
.8468		5a		phy				phy
.8469		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.846b		a5 36		lda $36				lda     zTemp0 						; save the data location.
.846d		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.846f		a5 37		lda $37				lda     zTemp0+1
.8471		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8473		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8475		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8478		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.847a		b0 21		bcs $849d			bcs 	_KWBFailed
.847c						_KNLWLoop:
.847c		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.847f		20 8e 82	jsr $828e			jsr     GetNextEvent
.8482		b0 f8		bcs $847c			bcs     _KNLWLoop
.8484		ad bb 07	lda $07bb			lda     KNLEvent.type 				; various errors.
.8487		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8489		f0 12		beq $849d			beq 	_KWBFailed
.848b		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.848d		f0 0e		beq $849d			beq 	_KWBFailed
.848f		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8491		f0 0a		beq $849d			beq 	_KWBFailed
.8493		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8495		d0 e5		bne $847c			bne 	_KNLWLoop
.8497		18		clc				clc
.8498		ad c1 07	lda $07c1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.849b		80 01		bra $849e			bra 	_KWBExit
.849d						_KWBFailed:
.849d		38		sec				sec
.849e						_KWBExit:
.849e		7a		ply				ply
.849f		fa		plx				plx
.84a0		60		rts				rts
.84a1						KNLCloseFile:
.84a1		85 f3		sta $f3				sta     kernel.args.file.close.stream
.84a3		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.84a6		60		rts				rts
.84a7						KNLReadController:
.84a7		da		phx				phx
.84a8		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.84aa		64 01		stz $01				stz 	1 							; switch to I/O 0
.84ac		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.84af		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.84b1		0d a1 06	ora $06a1			ora 	KeyJoystick 				; use key joystick.
.84b4		86 01		stx $01				stx 	1 							; repair old I/O and exit
.84b6		fa		plx				plx
.84b7		60		rts				rts
.06ba						KNLReadBuffer:
>06ba								.fill   256
.07ba						KNLDefaultDrive:
>07ba								.byte 	?
.07bb						KNLEvent
>07bb						type        .byte   ?   ; Enum above
>07bc						buf         .byte   ?   ; page id or zero
>07bd						ext         .byte   ?   ; page id or zero
.07be						key
>07be						keyboard    .byte   ?   ; Keyboard ID
>07bf						raw         .byte   ?   ; Raw key ID
>07c0						ascii       .byte   ?   ; ASCII value
>07c1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.07be						mouse
.07be						delta
>07be						x           .byte   ?
>07bf						y           .byte   ?
>07c0						z           .byte   ?
>07c1						buttons     .byte   ?
.07be						clicks
>07be						inner       .byte   ?
>07bf						middle      .byte   ?
>07c0						outer       .byte   ?
.07be						joystick
>07be						joy0        .byte   ?
>07bf						joy1        .byte   ?
.07be						udp
>07be						token       .byte   ?   ; TODO: break out into fields
.07be						tcp
>07be						len         .byte   ?   ; Raw packet length.
.07be						file
>07be						stream      .byte   ?
>07bf						cookie      .byte   ?
.07c0						data
>07c0						requested   .byte   ?   ; Requested number of bytes to read
>07c1						read        .byte   ?   ; Number of bytes actually read
.07c0						wrote
>07c0						requested   .byte   ?   ; Requested number of bytes to read
>07c1						wrote       .byte   ?   ; Number of bytes actually read
.07be						directory
>07be						stream      .byte   ?
>07bf						cookie      .byte   ?
.07c0						volume
>07c0						len         .byte   ?   ; Length of volname (in buf)
>07c1						flags       .byte   ?   ; block size, text encoding
.07c0						file
>07c0						len         .byte   ?
>07c1						flags       .byte   ?   ; block scale, text encoding, approx size
.07c0						free
>07c0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Seek        .fill   4   ; Seek to a specific position in a file.
>ff78						Open        .fill   4   ; Open a directory for reading.
>ff7c						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff80						Close       .fill   4   ; Close a directory once finished reading.
>ff84						MkDir       .fill   4   ; Create a directory
>ff88						RmDir       .fill   4   ; Delete a directory
>ff8c						            .fill   4   ; call gate
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						SendICMP    .fill   4
>ffa4						Match       .fill   4
>ffa8						Init        .fill   4
>ffac						Send        .fill   4
>ffb0						Recv        .fill   4
>ffb4						Open        .fill   4
>ffb8						Accept      .fill   4
>ffbc						Reject      .fill   4
>ffc0						Send        .fill   4
>ffc4						Recv        .fill   4
>ffc8						Close       .fill   4
>ffcc						Reset       .fill   4   ; Re-init the display
>ffd0						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd4						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd8						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffdc						GetTime     .fill   4
>ffe0						SetTime     .fill   4
>ffe4						GetSysInfo  .fill   4
>ffe8						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						seek
>00f3						stream      .byte       ?
>00f4						position    .dword      ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						mkdir
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						rmdir
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.00f3						config
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						seek
>0003						stream      .byte       ?
>0004						position    .dword      ?
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						mkdir
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						rmdir
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.0003						config
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						seek
>0000						stream      .byte       ?
>0001						position    .dword      ?
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_seek_t
>0000						stream      .byte       ?
>0001						position    .dword      ?
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						mkdir
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						rmdir
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.0000						config_t
.0000						time_t
>0000						century     .byte       ?
>0001						year        .byte       ?
>0002						month       .byte       ?
>0003						day         .byte       ?
>0004						hours       .byte       ?
>0005						minutes     .byte       ?
>0006						seconds     .byte       ?
>0007						millis      .byte       ?
.0008						size
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						SEEK        .word   ?   ; The seek request has completed.
>003c						OPENED      .word   ?   ; The directory open request succeeded.
>003e						VOLUME      .word   ?   ; A volume record was found.
>0040						FILE        .word   ?   ; A file record was found.
>0042						FREE        .word   ?   ; A file-system free-space record was found.
>0044						EOF         .word   ?   ; All data has been read.
>0046						CLOSED      .word   ?   ; The directory file has been closed.
>0048						ERROR       .word   ?   ; An error occured; user should close.
>004a						CREATED     .word   ?   ; The directory has been created.
>004c						DELETED     .word   ?   ; The directory has been deleted.
>004e						TCP         .word   ?
>0050						UDP         .word   ?
>0052						TICK        .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.84b8						AssembleGroup1:
.84b8		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.84ba		8d 41 04	sta $0441			sta 	ModeMask 					; initialise the mode mask - all for all
.84bd		80 02		bra $84c1			bra 	AsmGroup12
.84bf						AssembleGroup2:
.84bf		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.84c1						AsmGroup12:
.84c1		8d 3f 04	sta $043f			sta 	IsGroup1 					; save the 'group 1' flag
.84c4		68		pla				pla 								; pop the return address to access the information following.
.84c5		fa		plx				plx
.84c6		20 4d 85	jsr $854d			jsr 	AccessParameters 			; get opcode and save as base
.84c9		8d 40 04	sta $0440			sta 	BaseOpcode
.84cc		ad 3f 04	lda $043f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84cf		d0 08		bne $84d9			bne 	_AG12HaveMask
.84d1		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84d3		20 55 85	jsr $8555			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84d6		8d 41 04	sta $0441			sta 	ModeMask
.84d9						_AG12HaveMask:
.84d9		20 89 86	jsr $8689			jsr 	TypeAndCalculateOperand 	; get zero page type
.84dc		da		phx				phx 								; save found address mode
.84dd		20 b9 85	jsr $85b9			jsr 	AssembleModeX
.84e0		fa		plx				plx  								; restore address mode
.84e1		b0 0b		bcs $84ee			bcs 	_AG12Exit
.84e3		20 ef 84	jsr $84ef			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84e6		20 b9 85	jsr $85b9			jsr 	AssembleModeX
.84e9		b0 03		bcs $84ee			bcs 	_AG12Exit
.84eb		4c ad a4	jmp $a4ad			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84ee						_AG12Exit:
.84ee		60		rts				rts
.84ef						PromoteToAbsolute:
.84ef		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84f1		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84f3		f0 19		beq $850e			beq 	_PTADo
.84f5		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84f7		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84f9		f0 13		beq $850e			beq 	_PTADo
.84fb		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84fd		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84ff		f0 0d		beq $850e			beq 	_PTADo
.8501		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8503		e0 d1		cpx #$d1			cpx 	#AM_IND
.8505		f0 07		beq $850e			beq 	_PTADo
.8507		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8509		e0 c0		cpx #$c0			cpx 	#AM_INDX
.850b		f0 01		beq $850e			beq 	_PTADo
.850d		60		rts				rts
.850e						_PTADo:
.850e		aa		tax				tax
.850f		60		rts				rts
.8510						AssembleGroup3:
.8510		68		pla				pla 								; get parameters, which is just the opcode.
.8511		fa		plx				plx
.8512		20 4d 85	jsr $854d			jsr 	AccessParameters 			; get and output opcode
.8515		20 65 85	jsr $8565			jsr 	AssemblerWriteByte
.8518		20 ed 86	jsr $86ed			jsr 	CalculateOperand 			; get a 16 bit operand
.851b		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.851d		38		sec				sec
.851e		ed 3a 04	sbc $043a			sbc 	AssemblerAddress
.8521		48		pha				pha 								; LSB in A
.8522		a5 60		lda $60				lda 	NSMantissa1
.8524		ed 3b 04	sbc $043b			sbc 	AssemblerAddress+1
.8527		aa		tax				tax 								; MSB in X
.8528		68		pla				pla
.8529		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.852a		69 7f		adc #$7f			adc 	#$7F
.852c		90 01		bcc $852f			bcc 	_AG3NoCarry
.852e		e8		inx				inx
.852f						_AG3NoCarry:
.852f		38		sec				sec 								; fix back and write out anyways.
.8530		e9 80		sbc #$80			sbc 	#$80
.8532		20 65 85	jsr $8565			jsr 	AssemblerWriteByte
.8535		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8537		f0 0a		beq $8543			beq 	_AG3Exit
.8539		ad 3c 04	lda $043c			lda 	AssemblerControl 			; are we allowing bad values ?
.853c		29 01		and #$01			and 	#1
.853e		f0 03		beq $8543			beq 	_AG3Exit
.8540		4c b2 a4	jmp $a4b2			jmp 	RangeError 					; no, branch is out of range
.8543						_AG3Exit:
.8543		60		rts				rts
.8544						AssembleGroup4:
.8544		68		pla				pla 								; pop address
.8545		fa		plx				plx
.8546		20 4d 85	jsr $854d			jsr 	AccessParameters 			; access and get first
.8549		20 65 85	jsr $8565			jsr 	AssemblerWriteByte 			; output it.
.854c		60		rts				rts
.854d						AccessParameters:
.854d		8d 3d 04	sta $043d			sta 	ParamStart
.8550		8e 3e 04	stx $043e			stx 	ParamStart+1
.8553		a9 01		lda #$01			lda 	#1
.8555						GetParameter:
.8555		5a		phy				phy
.8556		a8		tay				tay
.8557		ad 3d 04	lda $043d			lda 	ParamStart
.855a		85 36		sta $36				sta 	zTemp0
.855c		ad 3e 04	lda $043e			lda 	ParamStart+1
.855f		85 37		sta $37				sta 	zTemp0+1
.8561		b1 36		lda ($36),y			lda 	(zTemp0),y
.8563		7a		ply				ply
.8564		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8565						AssemblerWriteByte:
.8565		48		pha			pha
.8566		ad 3c 04	lda $043c		lda 	AssemblerControl 				; check printing bytes ?
.8569		29 02		and #$02		and 	#2
.856b		f0 1b		beq $8588		beq 	_AWBNoPrint
.856d		ad 3b 04	lda $043b		lda		AssemblerAddress+1 				; print address
.8570		20 a3 85	jsr $85a3		jsr 	PrintHex
.8573		ad 3a 04	lda $043a		lda		AssemblerAddress
.8576		20 a3 85	jsr $85a3		jsr 	PrintHex
.8579		a9 20		lda #$20		lda 	#' '
.857b		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.857e		68		pla			pla 									; print byte
.857f		48		pha			pha
.8580		20 a3 85	jsr $85a3		jsr 	PrintHex
.8583		a9 0d		lda #$0d		lda 	#13
.8585		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8588						_AWBNoPrint:
.8588		ad 3a 04	lda $043a		lda		AssemblerAddress				; copy address to zTemp0
.858b		85 36		sta $36			sta 	zTemp0
.858d		ad 3b 04	lda $043b		lda		AssemblerAddress+1
.8590		f0 0e		beq $85a0		beq 	_AWBRange
.8592		85 37		sta $37			sta 	zTemp0+1
.8594		68		pla			pla 									; write byte out
.8595		92 36		sta ($36)		sta 	(zTemp0)
.8597		ee 3a 04	inc $043a		inc 	AssemblerAddress 				; bump address
.859a		d0 03		bne $859f		bne 	_AWBNoCarry
.859c		ee 3b 04	inc $043b		inc 	AssemblerAddress+1
.859f						_AWBNoCarry:
.859f		60		rts			rts
.85a0						_AWBRange:
.85a0		4c b2 a4	jmp $a4b2		jmp 	RangeError
.85a3						PrintHex:
.85a3		48		pha				pha
.85a4		4a		lsr a				lsr 	a
.85a5		4a		lsr a				lsr 	a
.85a6		4a		lsr a				lsr 	a
.85a7		4a		lsr a				lsr 	a
.85a8		20 ac 85	jsr $85ac			jsr 	_PrintNibble
.85ab		68		pla				pla
.85ac						_PrintNibble:
.85ac		29 0f		and #$0f			and 	#15
.85ae		c9 0a		cmp #$0a			cmp 	#10
.85b0		90 02		bcc $85b4			bcc 	_NoShift
.85b2		69 06		adc #$06			adc 	#6
.85b4						_NoShift:
.85b4		69 30		adc #$30			adc 	#48
.85b6		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.85b9						AssembleModeX:
.85b9		5a		phy				phy
.85ba		ad 3f 04	lda $043f			lda 	IsGroup1
.85bd		f0 17		beq $85d6			beq 	_AMXGroup2
.85bf		8a		txa				txa 							; is it in group # 1
.85c0		29 40		and #$40			and 	#AM_ISG1
.85c2		f0 4d		beq $8611			beq 	_AMXFail 				; no, give up.
.85c4		8a		txa				txa 							; get back.
.85c5		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85c7		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85c9		d0 22		bne $85ed			bne 	_AMXHaveInfo
.85cb		ad 40 04	lda $0440			lda 	BaseOpcode 				; cannot store immediate.
.85ce		c9 81		cmp #$81			cmp 	#$81
.85d0		f0 3f		beq $8611			beq 	_AMXFail
.85d2		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85d4		80 17		bra $85ed			bra 	_AMXHaveInfo 			; odd design decision there.
.85d6						_AMXGroup2:
.85d6		8a		txa				txa 							; is it in group 2 ?
.85d7		29 20		and #$20			and 	#AM_ISG2
.85d9		f0 36		beq $8611			beq 	_AMXFail 				; no, give up.
.85db		8a		txa				txa 							; get the offset into Y
.85dc		29 1f		and #$1f			and 	#$1F
.85de		4a		lsr a				lsr 	a 						; make it 0-7.
.85df		4a		lsr a				lsr  	a
.85e0		a8		tay				tay
.85e1		ad 41 04	lda $0441			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85e4						_AMXCheckOkay:
.85e4		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85e5		88		dey				dey
.85e6		10 fc		bpl $85e4			bpl 	_AMXCheckOkay
.85e8		90 27		bcc $8611			bcc 	_AMXFail 				; not allowed.
.85ea		8a		txa				txa  							; get mask back
.85eb		29 1f		and #$1f			and 	#$1F
.85ed						_AMXHaveInfo:
.85ed		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85ef		10 04		bpl $85f5			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85f1		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85f3		d0 1c		bne $8611			bne 	_AMXFail
.85f5						_AMXAnySize:
.85f5		18		clc				clc 							; add offset to the base opcode
.85f6		6d 40 04	adc $0440			adc 	BaseOpcode
.85f9						_AMXOutputCode:
.85f9		20 65 85	jsr $8565			jsr 	AssemblerWriteByte 		; write the opcode out.
.85fc		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85fe		f0 0e		beq $860e			beq 	_AMXExit
.8600		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8602		20 65 85	jsr $8565			jsr 	AssemblerWriteByte
.8605		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8607		30 05		bmi $860e			bmi 	_AMXExit
.8609		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.860b		20 65 85	jsr $8565			jsr 	AssemblerWriteByte
.860e						_AMXExit:
.860e		7a		ply				ply
.860f		38		sec				sec
.8610		60		rts				rts
.8611						_AMXFail:
.8611		a0 00		ldy #$00			ldy 	#0
.8613						_AMXCheckOddities:
.8613		8a		txa				txa
.8614		d9 3b 86	cmp $863b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8617		d0 15		bne $862e			bne 	_AMXCONext
.8619		b9 39 86	lda $8639,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.861c		cd 40 04	cmp $0440			cmp 	BaseOpcode
.861f		d0 0d		bne $862e			bne 	_AMXCONext
.8621		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8623		10 04		bpl $8629			bpl 	_AMXCONotZero
.8625		a5 60		lda $60				lda 	NSMantissa1
.8627		d0 05		bne $862e			bne 	_AMXCONext
.8629						_AMXCONotZero:
.8629		b9 3a 86	lda $863a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.862c		80 cb		bra $85f9			bra 	_AMXOutputCode 			; and assemble it
.862e						_AMXCONext:
.862e		c8		iny				iny
.862f		c8		iny				iny
.8630		c8		iny				iny
.8631		b9 39 86	lda $8639,y			lda 	ExtraOpcode+0,y 		; end of table
.8634		d0 dd		bne $8613			bne 	_AMXCheckOddities
.8636						_AMXCOFail:
.8636		7a		ply				ply
.8637		18		clc				clc
.8638		60		rts				rts
.8639						ExtraOpcode:
>8639		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>863c		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>863f		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8642		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8645		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8648		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>864b		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>864e		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8651		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8654		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8657		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8658						LabelHere:
.8658		c8		iny				iny 								; skip .
.8659		a2 00		ldx #$00			ldx 	#0 							; get a term
.865b		20 29 9d	jsr $9d29			jsr 	EvaluateTerm
.865e		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8660		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8662		d0 22		bne $8686			bne 	_ALType 					; otherwise typing error
.8664		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8666		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8668		b5 60		lda $60,x			lda 	NSMantissa1,x
.866a		85 37		sta $37				sta 	zTemp0+1
.866c		5a		phy				phy 								; copy address in (64k)
.866d		a0 01		ldy #$01			ldy 	#1
.866f		ad 3a 04	lda $043a			lda	 	AssemblerAddress
.8672		92 36		sta ($36)			sta 	(zTemp0)
.8674		ad 3b 04	lda $043b			lda	 	AssemblerAddress+1
.8677		91 36		sta ($36),y			sta 	(zTemp0),y
.8679		c8		iny				iny
.867a		a9 00		lda #$00			lda 	#0 							; zero the rest.
.867c		91 36		sta ($36),y			sta 	(zTemp0),y
.867e		c8		iny				iny
.867f		91 36		sta ($36),y			sta 	(zTemp0),y
.8681		c8		iny				iny
.8682		91 36		sta ($36),y			sta 	(zTemp0),y
.8684		7a		ply				ply
.8685		60		rts				rts
.8686						_ALType:
.8686		4c b7 a4	jmp $a4b7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8689						TypeAndCalculateOperand:
.8689		b1 30		lda ($30),y			lda 	(codePtr),y
.868b		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.868d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.868f		f0 5b		beq $86ec			beq 	_TACOExit
.8691		c9 80		cmp #$80			cmp 	#KWC_EOL
.8693		f0 57		beq $86ec			beq 	_TACOExit
.8695		c8		iny				iny
.8696		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8698		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.869a		f0 51		beq $86ed			beq 	CalculateOperand
.869c		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.869e		f0 1f		beq $86bf			beq 	_TACOIndirect
.86a0		88		dey				dey 								; undo get of first character
.86a1		20 ed 86	jsr $86ed			jsr 	CalculateOperand 			; get operand
.86a4		b1 30		lda ($30),y			lda 	(codePtr),y
.86a6		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.86a8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86aa		d0 40		bne $86ec			bne 	_TACOExit
.86ac		c8		iny				iny
.86ad		20 f7 86	jsr $86f7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.86b0		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.86b2		c9 58		cmp #$58			cmp 	#'X'
.86b4		f0 36		beq $86ec			beq 	_TACOExit
.86b6		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.86b8		c9 59		cmp #$59			cmp 	#'Y'
.86ba		f0 30		beq $86ec			beq 	_TACOExit
.86bc						_TACOSyntax:
.86bc		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.86bf						_TACOIndirect:
.86bf		20 ed 86	jsr $86ed			jsr 	CalculateOperand 			; get the operand
.86c2		b1 30		lda ($30),y			lda 	(codePtr),y
.86c4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86c6		f0 17		beq $86df			beq 	_TACOIndX
.86c8		20 bc 93	jsr $93bc			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86cb		b1 30		lda ($30),y			lda 	(codePtr),y
.86cd		a2 d1		ldx #$d1			ldx 	#AM_IND
.86cf		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86d1		d0 19		bne $86ec			bne 	_TACOExit
.86d3		c8		iny				iny
.86d4		20 f7 86	jsr $86f7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86d7		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86d9		d0 e1		bne $86bc			bne 	_TACOSyntax
.86db		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86dd		80 0d		bra $86ec			bra 	_TACOExit
.86df						_TACOIndX:
.86df		c8		iny				iny
.86e0		20 f7 86	jsr $86f7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86e3		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86e5		d0 d5		bne $86bc			bne 	_TACOSyntax
.86e7		20 bc 93	jsr $93bc			jsr 	CheckRightBracket			; check )
.86ea		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86ec						_TACOExit:
.86ec		60		rts				rts
.86ed						CalculateOperand:
.86ed		48		pha				pha
.86ee		da		phx				phx
.86ef		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86f1		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.86f4		fa		plx				plx
.86f5		68		pla				pla
.86f6		60		rts				rts
.86f7						TACOCheckXY:
.86f7		b1 30		lda ($30),y			lda 	(codePtr),y
.86f9		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86fb		c9 40		cmp #$40			cmp 	#$40
.86fd		d0 21		bne $8720			bne 	_TCXYFail
.86ff		b1 30		lda ($30),y			lda 	(codePtr),y
.8701		18		clc				clc
.8702		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8704		85 37		sta $37				sta 	zTemp0+1
.8706		c8		iny				iny
.8707		b1 30		lda ($30),y			lda 	(codePtr),y
.8709		c8		iny				iny
.870a		85 36		sta $36				sta 	zTemp0
.870c		5a		phy				phy 								; save position
.870d		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.870f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8711		d0 0c		bne $871f			bne 	_TCXYPopFail
.8713		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8715		b1 36		lda ($36),y			lda 	(zTemp0),y
.8717		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8719		f0 08		beq $8723			beq 	_TCXYFound
.871b		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.871d		f0 04		beq $8723			beq 	_TCXYFound
.871f						_TCXYPopFail:
.871f		7a		ply				ply
.8720						_TCXYFail:
.8720		a9 00		lda #$00			lda 	#0
.8722		60		rts				rts
.8723						_TCXYFound:
.8723		7a		ply				ply 								; restore position
.8724		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8726		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8727						BackloadProgram:
.8727		20 0c 8e	jsr $8e0c			jsr 	NewProgram 					; does the actual NEW.
.872a		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.872c		a9 87		lda #$87			lda 	#_BLLoad & $FF
.872e		20 34 94	jsr $9434			jsr 	PrintStringXA
.8731		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8733		8d c2 07	sta $07c2			sta 	BackLoadPage
.8736		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8738		8d c3 07	sta $07c3			sta 	0+BackLoadPointer
.873b		a9 60		lda #$60			lda 	#(($6000) >> 8)
.873d		8d c4 07	sta $07c4			sta 	1+BackLoadPointer
.8740		9c c5 07	stz $07c5			stz 	BackLoadLast 				; reset backload last.
.8743		9c c6 07	stz $07c6			stz 	BackLoadLast+1
.8746		a9 ff		lda #$ff			lda 	#$FF
.8748		8d fa ff	sta $fffa			sta 	$FFFA
.874b						_BPLoop:
.874b		a2 ff		ldx #$ff			ldx 	#$FF
.874d		20 bc 87	jsr $87bc			jsr 	BLReadByte 					; read a byte
.8750		c9 00		cmp #$00			cmp 	#0
.8752		f0 2c		beq $8780			beq 	_BPExit 					; if 0 exit
.8754		30 2a		bmi $8780			bmi 	_BPExit 					; if -ve exit
.8756						_BPCopy:
.8756		e8		inx				inx  								; copy byte into the lineBuffer
.8757		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.875a		9e 47 05	stz $0547,x			stz 	lineBuffer+1,x
.875d		20 bc 87	jsr $87bc			jsr 	BLReadByte 					; read next byte
.8760		30 0a		bmi $876c			bmi 	_BPEndLine 					; -ve = EOL
.8762		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8764		d0 02		bne $8768			bne 	_BPNotTab
.8766		a9 20		lda #$20			lda 	#' '
.8768						_BPNotTab:
.8768		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.876a		b0 ea		bcs $8756			bcs 	_BPCopy 					; until a control character, should be 13 received.
.876c						_BPEndLine:
.876c		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.876f		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number = 0
.8772		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.8775		f0 d4		beq $874b			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8777		20 9c 87	jsr $879c			jsr 	BLCheckLast 				; check last backload okay.
.877a		38		sec				sec 								; append not insert
.877b		20 a1 a6	jsr $a6a1			jsr 	MemoryInsertLine 			; append to current program
.877e		80 cb		bra $874b			bra 	_BPLoop
.8780						_BPExit:
.8780		9c fa ff	stz $fffa			stz 	$FFFA
.8783		20 61 92	jsr $9261			jsr 	ClearSystem 				; clear variables etc.
.8786		60		rts				rts
.8787						_BLLoad:
>8787		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>878f		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.879c						BLCheckLast:
.879c		ad c5 07	lda $07c5			lda 	BackLoadLast 				; check last < current
.879f		cd 47 04	cmp $0447			cmp 	tokenLineNumber
.87a2		ad c6 07	lda $07c6			lda 	BackLoadLast+1
.87a5		ed 48 04	sbc $0448			sbc 	tokenLineNumber+1
.87a8		b0 0d		bcs $87b7			bcs 	_BLCheckFail
.87aa		ad 47 04	lda $0447			lda 	tokenLineNumber 			; update
.87ad		8d c5 07	sta $07c5			sta 	BackLoadLast
.87b0		ad 48 04	lda $0448			lda 	tokenLineNumber+1
.87b3		8d c6 07	sta $07c6			sta 	BackLoadLast+1
.87b6		60		rts				rts
.87b7						_BLCheckFail:
.87b7		a9 02		lda #$02		lda	#2
.87b9		4c d5 93	jmp $93d5		jmp	ErrorHandler
.87bc						BLReadByte:
.87bc		da		phx				phx
.87bd		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.87bf		ad c2 07	lda $07c2			lda 	BackLoadPage	 			; set current page
.87c2		85 0b		sta $0b				sta 	8+3
.87c4		ad c3 07	lda $07c3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.87c7		85 36		sta $36				sta 	zTemp0
.87c9		ad c4 07	lda $07c4			lda 	BackLoadPointer+1
.87cc		85 37		sta $37				sta 	zTemp0+1
.87ce		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87d0		ee c3 07	inc $07c3			inc 	BackLoadPointer 			; bump pointer
.87d3		d0 0f		bne $87e4			bne 	_BLNoCarry
.87d5		ee c4 07	inc $07c4			inc 	BackLoadPointer+1
.87d8		10 0a		bpl $87e4			bpl 	_BLNoCarry 					; need a new page
.87da		48		pha				pha
.87db		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87dd		8d c4 07	sta $07c4			sta 	BackLoadPointer+1
.87e0		ee c2 07	inc $07c2			inc 	BackLoadPage 				; next page from source.
.87e3		68		pla				pla
.87e4						_BLNoCarry:
.87e4		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87e6		fa		plx				plx
.87e7		c9 00		cmp #$00			cmp 	#0
.87e9		60		rts				rts
.07c2						BackLoadPage:
>07c2								.fill  	1
.07c3						BackLoadPointer:
>07c3								.fill 	2
.07c5						BackLoadLast:
>07c5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87ea						EditProgramCode:
.87ea		ad 47 04	lda $0447			lda 	tokenLineNumber 			; try to find the line.
.87ed		ae 48 04	ldx $0448			ldx 	tokenLineNumber+1
.87f0		20 45 a7	jsr $a745			jsr 	MemorySearch
.87f3		90 05		bcc $87fa			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87f5		d0 03		bne $87fa			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87f7		20 6a a6	jsr $a66a			jsr 	MemoryDeleteLine 			; delete the line
.87fa						_EPCNoDelete:
.87fa		ad 49 04	lda $0449			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87fd		c9 80		cmp #$80			cmp 	#KWC_EOL
.87ff		f0 0d		beq $880e			beq 	_EPCNoInsert
.8801		ad 47 04	lda $0447			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8804		ae 48 04	ldx $0448			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8807		20 45 a7	jsr $a745			jsr 	MemorySearch
.880a		18		clc				clc 								; insert at this point.
.880b		20 a1 a6	jsr $a6a1			jsr 	MemoryInsertLine 			; insert the line
.880e						_EPCNoInsert:
.880e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.880f						WarmStart:
.880f		a2 ff		ldx #$ff			ldx 	#$FF
.8811		9a		txs				txs
.8812		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8814		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8817		20 d6 81	jsr $81d6			jsr 	EXTInputLine 				; get line to lineBuffer
.881a		ad 46 05	lda $0546			lda 	lineBuffer 					; first character is slash
.881d		c9 2f		cmp #$2f			cmp 	#"/"
.881f		d0 07		bne $8828			bne 	_WSNotSlash
.8821		a2 05		ldx #$05			ldx 	#(lineBuffer+1) >> 8 		; boot rest of line.
.8823		a9 47		lda #$47			lda 	#(lineBuffer+1) & $FF
.8825		4c c8 ab	jmp $abc8			jmp 	BootXA
.8828						_WSNotSlash:
.8828		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.882b		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number <> 0
.882e		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.8831		d0 17		bne $884a			bne 	_WSEditCode 				; if so,edit code.
.8833		9c 46 04	stz $0446			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8836		a9 46		lda #$46			lda 	#((tokenOffset) & $FF)
.8838		85 30		sta $30				sta 	codePtr
.883a		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.883c		85 31		sta $31				sta 	codePtr+1
.883e		ad 49 04	lda $0449			lda 	tokenBuffer 				; nothing to run
.8841		c9 80		cmp #$80			cmp 	#KWC_EOL
.8843		f0 ca		beq $880f			beq 	WarmStart
.8845		20 bb 8f	jsr $8fbb			jsr 	RUNCodePointerLine 			; execute that line.
.8848		80 c5		bra $880f			bra 	WarmStart
.884a						_WSEditCode:
.884a		20 ea 87	jsr $87ea			jsr 	EditProgramCode 			; edit the program code
.884d		20 61 92	jsr $9261			jsr 	ClearSystem 				; clear all variables etc.
.8850		80 bd		bra $880f			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8852						AssembleCommand:
.8852		a2 00		ldx #$00			ldx 	#0
.8854		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger 		; start address
.8857		a5 58		lda $58				lda 	NSMantissa0
.8859		8d 3a 04	sta $043a			sta 	AssemblerAddress
.885c		a5 60		lda $60				lda 	NSMantissa1
.885e		8d 3b 04	sta $043b			sta 	AssemblerAddress+1
.8861		20 c4 93	jsr $93c4			jsr 	CheckComma
.8864		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; options 0-3
.8867		a5 58		lda $58				lda 	NSMantissa0
.8869		8d 3c 04	sta $043c			sta 	AssemblerControl
.886c		60		rts				rts
.886d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.886e						AssertCommand:
.886e		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8870		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger 			; the assert test
.8873		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; exit if result is non zero.
.8876		d0 05		bne $887d			bne 	_ACExit
.8878		a9 0a		lda #$0a		lda	#10
.887a		4c d5 93	jmp $93d5		jmp	ErrorHandler
.887d						_ACExit:
.887d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.887e						CallCommand:
.887e		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8880		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.8883						_CCClear
.8883		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8884		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; these are optional sequentially.
.8887		e0 04		cpx #$04			cpx 	#4
.8889		d0 f8		bne $8883			bne 	_CCClear
.888b		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.888d						_CCCParam:
.888d		b1 30		lda ($30),y			lda 	(codePtr),y
.888f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8891		d0 09		bne $889c			bne 	_CCCRun6502
.8893		c8		iny				iny 								; skip comma
.8894		e8		inx				inx	 								; next level
.8895		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8898		e0 03		cpx #$03			cpx 	#3
.889a		90 f1		bcc $888d			bcc 	_CCCParam 					; done all 3 ?
.889c						_CCCRun6502:
.889c		5a		phy				phy 								; save position
.889d		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.889f		85 37		sta $37				sta 	zTemp0+1
.88a1		a5 58		lda $58				lda 	NSMantissa0
.88a3		85 36		sta $36				sta 	zTemp0
.88a5		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.88a7		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.88a9		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.88ab		20 b0 88	jsr $88b0			jsr 	_CCCZTemp0 					; call zTemp0
.88ae		7a		ply				ply 								; restore position and exit
.88af		60		rts				rts
.88b0						_CCCZTemp0:
.88b0		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.88b3						Command_Data:
.88b3		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.88b5		a2 80		ldx #$80			ldx 	#KWC_EOL
.88b7		20 17 93	jsr $9317			jsr 	ScanForward
.88ba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.88bb						DimCommand:
.88bb		b1 30		lda ($30),y			lda 	(codePtr),y
.88bd		29 c0		and #$c0			and 	#$C0
.88bf		c9 40		cmp #$40			cmp 	#$40
.88c1		d0 7a		bne $893d			bne 	_DCSyntax 				; n o, error.
.88c3		b1 30		lda ($30),y			lda 	(codePtr),y
.88c5		18		clc				clc
.88c6		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88c8		85 3f		sta $3f				sta 	zaTemp+1
.88ca		c8		iny				iny
.88cb		b1 30		lda ($30),y			lda 	(codePtr),y
.88cd		c8		iny				iny
.88ce		85 3e		sta $3e				sta 	zaTemp
.88d0		5a		phy				phy
.88d1		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88d3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88d5		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88d7		c9 18		cmp #$18			cmp 	#NSTProcedure
.88d9		f0 62		beq $893d			beq 	_DCSyntax
.88db		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88dd		29 04		and #$04			and 	#NSBIsArray
.88df		f0 64		beq $8945			beq 	_DCType
.88e1		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88e3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88e5		d0 59		bne $8940			bne 	_DCRedefine
.88e7		7a		ply				ply
.88e8		20 48 89	jsr $8948			jsr 	_DCGetSize 				; get array size, check it.
.88eb		5a		phy				phy
.88ec		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88ee		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88f0		7a		ply				ply 							; is there a second (e.g. ,x)
.88f1		b1 30		lda ($30),y			lda 	(codePtr),y
.88f3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88f5		d0 0a		bne $8901			bne 	_DCOneDimension
.88f7		c8		iny				iny 							; skip comma
.88f8		20 48 89	jsr $8948			jsr 	_DCGetSize 				; get 2nd array size
.88fb		5a		phy				phy
.88fc		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88fe		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8900		7a		ply				ply
.8901						_DCOneDimension:
.8901		5a		phy				phy 							; save position
.8902		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8904		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8906		aa		tax				tax
.8907		c8		iny				iny
.8908		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.890a		e8		inx				inx 							; bump them.
.890b		1a		inc a				inc 	a
.890c		20 e0 a2	jsr $a2e0			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.890f		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8911		29 e0		and #$e0			and 	#$E0
.8913		d0 23		bne $8938			bne 	_DCSize
.8915		a0 02		ldy #$02			ldy 	#2 						; get base type
.8917		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8919		20 56 89	jsr $8956			jsr 	ScaleByBaseType 		; scale by base type
.891c		a5 36		lda $36				lda 	zTemp0
.891e		a6 37		ldx $37				ldx 	zTemp0+1
.8920		20 d7 9e	jsr $9ed7			jsr 	AllocateXABytes 		; allocate memory
.8923		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8925		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8927		c8		iny				iny
.8928		8a		txa				txa
.8929		91 3e		sta ($3e),y			sta 	(zaTemp),y
.892b		7a		ply				ply 							; get position back
.892c		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 		; check )
.892f		b1 30		lda ($30),y			lda 	(codePtr),y
.8931		c8		iny				iny 							; consume in case
.8932		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8934		f0 85		beq $88bb			beq 	DimCommand
.8936		88		dey				dey 							; undo consume
.8937		60		rts				rts
.8938						_DCSize:
.8938		a9 16		lda #$16		lda	#22
.893a		4c d5 93	jmp $93d5		jmp	ErrorHandler
.893d						_DCSyntax:
.893d		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.8940						_DCRedefine:
.8940		a9 15		lda #$15		lda	#21
.8942		4c d5 93	jmp $93d5		jmp	ErrorHandler
.8945						_DCType:
.8945		4c b7 a4	jmp $a4b7			jmp 	TypeError
.8948						_DCGetSize:
.8948		a2 00		ldx #$00			ldx 	#0 						; get first index.
.894a		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 	; get array dimension
.894d		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.894f		f0 e7		beq $8938			beq 	_DCSize
.8951		c9 fe		cmp #$fe			cmp 	#254
.8953		f0 e3		beq $8938			beq 	_DCSize
.8955		60		rts				rts
.8956						ScaleByBaseType:
.8956		29 10		and #$10			and 	#NSBIsString 			; is it string
.8958		d0 19		bne $8973			bne 	_SBBTString
.895a		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.895c		48		pha				pha
.895d		a5 36		lda $36				lda 	zTemp0
.895f		48		pha				pha
.8960		06 36		asl $36				asl 	zTemp0 					; x 2
.8962		26 37		rol $37				rol 	zTemp0+1
.8964		06 36		asl $36				asl 	zTemp0 					; x 4
.8966		26 37		rol $37				rol 	zTemp0+1
.8968		68		pla				pla 							; add stacked value = x 5
.8969		65 36		adc $36				adc 	zTemp0
.896b		85 36		sta $36				sta 	zTemp0
.896d		68		pla				pla
.896e		65 37		adc $37				adc 	zTemp0+1
.8970		85 37		sta $37				sta 	zTemp0+1
.8972		60		rts				rts
.8973						_SBBTString:
.8973		06 36		asl $36				asl 	zTemp0
.8975		26 37		rol $37				rol 	zTemp0+1
.8977		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8978						EndCommand:
.8978		4c 0f 88	jmp $880f			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.897b						ForCommand:
.897b		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.897d		20 90 b4	jsr $b490			jsr 	StackOpen
.8980		a2 00		ldx #$00			ldx 	#0
.8982		20 29 9d	jsr $9d29			jsr 	EvaluateTerm
.8985		b5 50		lda $50,x			lda 	NSStatus,x
.8987		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8989		d0 47		bne $89d2			bne		_FCError
.898b		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.898d		20 cc 93	jsr $93cc			jsr 	CheckNextA
.8990		e8		inx				inx
.8991		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger 			; <from> in +1
.8994		b1 30		lda ($30),y			lda 	(codePtr),y
.8996		c8		iny				iny 								; consume it
.8997		48		pha				pha 								; save on stack for later
.8998		c9 c2		cmp #$c2			cmp 	#KWD_DOWNTO
.899a		f0 04		beq $89a0			beq 	_FCNoSyntax
.899c		c9 dc		cmp #$dc			cmp 	#KWD_TO
.899e		d0 35		bne $89d5			bne 	_FCSyntaxError
.89a0						_FCNoSyntax:
.89a0		e8		inx				inx
.89a1		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger
.89a4		20 d5 b4	jsr $b4d5			jsr 	STKSaveCodePosition 		; save loop back position
.89a7		68		pla				pla 								; restore DOWNTO or TO
.89a8		5a		phy				phy 								; save Y on the stack
.89a9		49 c2		eor #$c2			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.89ab		f0 02		beq $89af			beq 	_FCNotDownTo
.89ad		a9 02		lda #$02			lda 	#2
.89af						_FCNotDownTo:
.89af		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89b0		a0 10		ldy #$10			ldy 	#16
.89b2		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89b4		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.89b6		a5 58		lda $58				lda 	NSMantissa0
.89b8		91 34		sta ($34),y			sta 	(basicStack),y
.89ba		a5 60		lda $60				lda 	NSMantissa1
.89bc		c8		iny				iny
.89bd		91 34		sta ($34),y			sta 	(basicStack),y
.89bf		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89c1		a2 01		ldx #$01			ldx 	#1
.89c3		20 d8 89	jsr $89d8			jsr 	FCIntegerToStack
.89c6		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89c8		a2 02		ldx #$02			ldx 	#2
.89ca		20 d8 89	jsr $89d8			jsr 	FCIntegerToStack
.89cd		20 f3 89	jsr $89f3			jsr 	CopyIndexToReference
.89d0		7a		ply				ply 								; restore position
.89d1		60		rts				rts
.89d2						_FCError:
.89d2		4c b7 a4	jmp $a4b7			jmp 	TypeError
.89d5						_FCSyntaxError:
.89d5		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.89d8						FCIntegerToStack:
.89d8		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89da		10 03		bpl $89df			bpl	 	_FCNotNegative
.89dc		20 fe a2	jsr $a2fe			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89df						_FCNotNegative:
.89df		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89e1		91 34		sta ($34),y			sta 	(basicStack),y
.89e3		c8		iny				iny
.89e4		b5 60		lda $60,x			lda 	NSMantissa1,x
.89e6		91 34		sta ($34),y			sta 	(basicStack),y
.89e8		c8		iny				iny
.89e9		b5 68		lda $68,x			lda 	NSMantissa2,x
.89eb		91 34		sta ($34),y			sta 	(basicStack),y
.89ed		c8		iny				iny
.89ee		b5 70		lda $70,x			lda 	NSMantissa3,x
.89f0		91 34		sta ($34),y			sta 	(basicStack),y
.89f2		60		rts				rts
.89f3						CopyIndexToReference:
.89f3		5a		phy				phy
.89f4		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89f6		38		sec				sec 								; (because we copy from offset 8)
.89f7		b1 34		lda ($34),y			lda 	(basicStack),y
.89f9		e9 08		sbc #$08			sbc 	#8
.89fb		85 36		sta $36				sta 	zTemp0
.89fd		c8		iny				iny
.89fe		b1 34		lda ($34),y			lda 	(basicStack),y
.8a00		e9 00		sbc #$00			sbc 	#0
.8a02		85 37		sta $37				sta 	zTemp0+1
.8a04		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a06		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a08		b1 34		lda ($34),y			lda 	(basicStack),y
.8a0a		0a		asl a				asl 	a 							; into carry
.8a0b		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a0d		90 14		bcc $8a23			bcc 	_CITRNormal
.8a0f		38		sec				sec
.8a10						_CITRNegative:
.8a10		a9 00		lda #$00			lda 	#0
.8a12		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a14		91 36		sta ($36),y			sta 	(zTemp0),y
.8a16		c8		iny				iny
.8a17		ca		dex				dex
.8a18		d0 f6		bne $8a10			bne 	_CITRNegative
.8a1a		88		dey				dey 								; look at MSB of mantissa
.8a1b		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a1d		09 80		ora #$80			ora 	#$80
.8a1f		91 36		sta ($36),y			sta 	(zTemp0),y
.8a21		7a		ply				ply
.8a22		60		rts				rts
.8a23						_CITRNormal:
.8a23		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a25		91 36		sta ($36),y			sta 	(zTemp0),y
.8a27		c8		iny				iny
.8a28		ca		dex				dex
.8a29		d0 f8		bne $8a23			bne 	_CITRNormal
.8a2b		7a		ply				ply 								; and exit.
.8a2c		60		rts				rts
.8a2d						NextCommand:
.8a2d		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a2f		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a31		20 bd b4	jsr $b4bd			jsr 	StackCheckFrame
.8a34		5a		phy				phy
.8a35		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a37		b1 34		lda ($34),y			lda 	(basicStack),y
.8a39		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a3b		30 02		bmi $8a3f			bmi 	_NCStepNeg
.8a3d		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a3f						_NCStepNeg:
.8a3f		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a41		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a43		18		clc				clc
.8a44						_NCBump:
.8a44		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a46		91 34		sta ($34),y			sta 	(basicStack),y
.8a48		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a4a		c8		iny				iny 								; next byte
.8a4b		ca		dex				dex 								; do four times
.8a4c		d0 f6		bne $8a44			bne 	_NCBump
.8a4e		20 f3 89	jsr $89f3			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a51		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a53		b1 34		lda ($34),y			lda 	(basicStack),y
.8a55		0a		asl a				asl 	a 							; sign bit to carry
.8a56		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a58		85 38		sta $38				sta 	zTemp1
.8a5a		90 02		bcc $8a5e			bcc 	_NCCompRev 					; use if step is +ve
.8a5c		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a5e						_NCCompRev:
.8a5e		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a60		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a62		85 39		sta $39				sta 	zTemp1+1
.8a64		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a66		38		sec				sec
.8a67						_NCCompare:
.8a67		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a69		b1 34		lda ($34),y			lda 	(basicStack),y
.8a6b		a4 39		ldy $39				ldy 	zTemp1+1
.8a6d		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a6f		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a71		e6 39		inc $39				inc 	zTemp1+1
.8a73		ca		dex				dex 								; do it 4 times.
.8a74		d0 f1		bne $8a67			bne 	_NCCompare
.8a76		50 02		bvc $8a7a			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a78		49 80		eor #$80			eor 	#$80
.8a7a						_NCNoOverflow:
.8a7a		7a		ply				ply 								; restore Y position
.8a7b		0a		asl a				asl 	a 							; is bit 7 set.
.8a7c		90 04		bcc $8a82			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a7e		20 af b4	jsr $b4af			jsr 	StackClose 					; exit the loop
.8a81		60		rts				rts
.8a82						_NCLoopBack:
.8a82		20 e6 b4	jsr $b4e6			jsr 	STKLoadCodePosition 		; loop back
.8a85		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a86						Command_GOSUB:
.8a86		a2 00		ldx #$00			ldx 	#0
.8a88		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a8b		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a8d		20 90 b4	jsr $b490			jsr 	StackOpen 					; create frame
.8a90		20 d5 b4	jsr $b4d5			jsr 	STKSaveCodePosition 		; save current position
.8a93		4c a9 8a	jmp $8aa9			jmp 	GotoStackX
.8a96						Command_RETURN:
.8a96		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a98		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a9a		20 bd b4	jsr $b4bd			jsr 	StackCheckFrame
.8a9d		20 e6 b4	jsr $b4e6			jsr 	STKLoadCodePosition 		; restore code position
.8aa0		20 af b4	jsr $b4af			jsr 	StackClose
.8aa3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8aa4						GotoCommand:
.8aa4		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8aa6		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.8aa9						GotoStackX:
.8aa9		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8aab		48		pha				pha 								; it is slightly inefficient, just in cases.
.8aac		b5 58		lda $58,x			lda 	NSMantissa0,x
.8aae		fa		plx				plx
.8aaf		20 45 a7	jsr $a745			jsr 	MemorySearch 				; transfer to line number AX.
.8ab2		90 05		bcc $8ab9			bcc 	_GotoError 					; not found, off end.
.8ab4		d0 03		bne $8ab9			bne 	_GotoError 					; not found exactly
.8ab6		4c b4 8f	jmp $8fb4			jmp 	RunNewLine 					; and go straight to new line code.
.8ab9						_GotoError:
.8ab9		a9 0d		lda #$0d		lda	#13
.8abb		4c d5 93	jmp $93d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8abe						IfCommand:
.8abe		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8ac0		20 83 a2	jsr $a283			jsr 	EvaluateNumber
.8ac3		b1 30		lda ($30),y			lda 	(codePtr),y
.8ac5		c9 b6		cmp #$b6			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8ac7		d0 0a		bne $8ad3			bne 	_IfStructured 				; we still support it.
.8ac9		c8		iny				iny 								; consume THEN
.8aca		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; is it zero
.8acd		f0 01		beq $8ad0			beq 	_IfFail 					; if fail, go to next line
.8acf		60		rts				rts 								; if THEN just continue
.8ad0						_IfFail:
.8ad0		4c 8f 8f	jmp $8f8f			jmp 	EOLCommand
.8ad3						_IfStructured:
.8ad3		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; is it zero
.8ad6		d0 07		bne $8adf			bne 	_IfExit 					; if not, then continue normally.
.8ad8		a9 c3		lda #$c3			lda 	#KWD_ELSE 					; look for else/endif
.8ada		a2 b3		ldx #$b3			ldx 	#KWD_ENDIF
.8adc		20 17 93	jsr $9317			jsr 	ScanForward 				; and run from there
.8adf						_IfExit:
.8adf		60		rts				rts
.8ae0						ElseCode:
.8ae0		a9 b3		lda #$b3			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ae2		aa		tax				tax 								; so just go to the structure exit
.8ae3		20 17 93	jsr $9317			jsr 	ScanForward
.8ae6		60		rts				rts
.8ae7						EndIf:
.8ae7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8ae8						Command_Input:
.8ae8		9c 44 04	stz $0444			stz 	isPrintFlag
.8aeb		80 0c		bra $8af9			bra 	Command_IP_Main
.8aed						Command_CPrint:
.8aed		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8aef		8d 44 04	sta $0444			sta 	isPrintFlag 				; clear input flag
.8af2		80 05		bra $8af9			bra 	Command_IP_Main
.8af4						Command_Print:
.8af4		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8af6		8d 44 04	sta $0444			sta 	isPrintFlag 				; clear input flag
.8af9						Command_IP_Main:
.8af9		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8afa						_CPLoop:
.8afa		08		php				php 								; save last action flag
.8afb		b1 30		lda ($30),y			lda 	(codePtr),y
.8afd		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8aff		f0 54		beq $8b55			beq 	_CPExit
.8b01		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b03		f0 50		beq $8b55			beq 	_CPExit
.8b05		68		pla				pla 								; throw last action flag
.8b06		b1 30		lda ($30),y			lda 	(codePtr),y
.8b08		c8		iny				iny
.8b09		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8b0b		f0 45		beq $8b52			beq 	_CPContinueWithSameLine
.8b0d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8b0f		f0 3c		beq $8b4d			beq 	_CPTab
.8b11		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8b13		f0 34		beq $8b49			beq 	_CPNewLine
.8b15		88		dey				dey 								; undo the get.
.8b16		20 dd 98	jsr $98dd			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8b19		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8b1b		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b1d		f0 0d		beq $8b2c			beq 	_CPIsValue 					; no, display it.
.8b1f		ad 44 04	lda $0444			lda 	isPrintFlag 				; if print, dereference and print.
.8b22		d0 05		bne $8b29			bne 	_CPIsPrint 					; otherwise display.
.8b24		20 5e 8b	jsr $8b5e			jsr 	CIInputValue 				; input a value to the reference
.8b27		80 20		bra $8b49			bra 	_CPNewLine
.8b29						_CPIsPrint:
.8b29		20 a2 9b	jsr $9ba2			jsr 	Dereference 				; dereference if required.
.8b2c						_CPIsValue:
.8b2c		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b2e		29 10		and #$10			and 	#NSBIsString
.8b30		f0 09		beq $8b3b			beq 	_CPNumber
.8b32		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b34		a5 58		lda $58				lda 	NSMantissa0
.8b36		20 c1 8b	jsr $8bc1			jsr 	CPPrintStringXA
.8b39		80 be		bra $8af9			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b3b						_CPNumber:
.8b3b		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b3d		20 6a a1	jsr $a16a			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b40		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b42		a9 65		lda #$65			lda 	#decimalBuffer & $FF
.8b44		20 c1 8b	jsr $8bc1			jsr 	CPPrintStringXA 			; print it.
.8b47		80 b0		bra $8af9			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b49						_CPNewLine:
.8b49		a9 0d		lda #$0d			lda 	#13
.8b4b		80 02		bra $8b4f			bra 	_CPPrintCharDirect
.8b4d						_CPTab:
.8b4d		a9 09		lda #$09			lda 	#9 							; print TAB
.8b4f						_CPPrintCharDirect:
.8b4f		20 dc 8b	jsr $8bdc			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b52						_CPContinueWithSameLine:
.8b52		38		sec				sec 								; loop round with carry set, which
.8b53		80 a5		bra $8afa			bra 	_CPLoop 					; will inhibit final CR
.8b55						_CPExit:
.8b55		28		plp				plp 								; get last action flag
.8b56		b0 05		bcs $8b5d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b58		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b5a		20 dc 8b	jsr $8bdc			jsr 	CPPVControl
.8b5d						_CPExit2:
.8b5d		60		rts				rts
.8b5e						CIInputValue:
.8b5e		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b60						_CIInputLine:
.8b60		20 df 8b	jsr $8bdf			jsr 	CPInputVector 				; get key
.8b63		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b65		f0 1f		beq $8b86			beq 	_CIHaveValue
.8b67		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b69		f0 11		beq $8b7c			beq 	_CIBackspace
.8b6b		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b6d		90 f1		bcc $8b60			bcc 	_CIInputLine
.8b6f		e0 50		cpx #$50			cpx 	#80 						; max length
.8b71		b0 ed		bcs $8b60			bcs 	_CIInputLine
.8b73		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.8b76		e8		inx				inx
.8b77		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b7a		80 e4		bra $8b60			bra 	_CIInputLine
.8b7c						_CIBackspace:
.8b7c		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b7e		f0 e0		beq $8b60			beq 	_CIInputLine
.8b80		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b83		ca		dex				dex
.8b84		80 da		bra $8b60			bra 	_CIInputLine
.8b86						_CIHaveValue:
.8b86		9e 46 05	stz $0546,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b89		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b8b		29 10		and #$10			and 	#NSBIsString
.8b8d		f0 17		beq $8ba6			beq 	_CIAssignNumber 			; assign a number
.8b8f		a2 01		ldx #$01			ldx 	#1
.8b91		a9 46		lda #$46			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b93		95 58		sta $58,x			sta 	NSMantissa0,x
.8b95		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b97		95 60		sta $60,x			sta 	NSMantissa1,x
.8b99		74 68		stz $68,x			stz 	NSMantissa2,x
.8b9b		74 70		stz $70,x			stz 	NSMantissa3,x
.8b9d		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b9f		95 50		sta $50,x			sta  	NSStatus,x
.8ba1		ca		dex				dex 								; X = 0
.8ba2		20 1b 8c	jsr $8c1b			jsr 	AssignVariable
.8ba5		60		rts				rts
.8ba6						_CIAssignNumber:
.8ba6		a9 46		lda #$46			lda 	#lineBuffer & $FF 			; set up to point to new string
.8ba8		85 36		sta $36				sta 	zTemp0
.8baa		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8bac		85 37		sta $37				sta 	zTemp0+1
.8bae		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8bb0		20 4a a0	jsr $a04a			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8bb3		90 07		bcc $8bbc			bcc 	_CIIsOkay
.8bb5		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8bb7		20 d4 8b	jsr $8bd4			jsr 	CPPrintVector
.8bba		80 a2		bra $8b5e			bra 	CIInputValue
.8bbc						_CIIsOkay:
.8bbc		ca		dex				dex 								; X = 0
.8bbd		20 1b 8c	jsr $8c1b			jsr 	AssignVariable
.8bc0		60		rts				rts
.8bc1						CPPrintStringXA:
.8bc1		5a		phy				phy
.8bc2		86 37		stx $37				stx 	zTemp0+1
.8bc4		85 36		sta $36				sta 	zTemp0
.8bc6		a0 00		ldy #$00			ldy 	#0
.8bc8						_PSXALoop:
.8bc8		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bca		f0 06		beq $8bd2			beq 	_PSXAExit
.8bcc		20 d4 8b	jsr $8bd4			jsr 	CPPrintVector
.8bcf		c8		iny				iny
.8bd0		80 f6		bra $8bc8			bra 	_PSXALoop
.8bd2						_PSXAExit:
.8bd2		7a		ply				ply
.8bd3		60		rts				rts
.8bd4						CPPrintVector:
.8bd4		2c 44 04	bit $0444			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8bd7		30 03		bmi $8bdc			bmi 	CPPVControl
.8bd9		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8bdc						CPPVControl:
.8bdc		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bdf						CPInputVector:
.8bdf		4c ce 81	jmp $81ce			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8be2						LetCommand:
.8be2		a2 00		ldx #$00			ldx 	#0
.8be4		b1 30		lda ($30),y			lda 	(codePtr),y
.8be6		c9 b9		cmp #$b9			cmp 	#KWD_AT
.8be8		d0 14		bne $8bfe			bne 	_LCStandard
.8bea		c8		iny				iny 								; skip equal
.8beb		20 29 9d	jsr $9d29			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bee		20 a2 9b	jsr $9ba2			jsr 	Dereference 				; dereference it to a value
.8bf1		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bf3		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bf5		95 50		sta $50,x			sta 	NSStatus,x
.8bf7		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bf9		d0 0f		bne $8c0a			bne 	_LCMain
.8bfb		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; was a reference before.
.8bfe						_LCStandard:
.8bfe		ad c7 98	lda $98c7			lda 	PrecedenceLevel+"*"			; precedence > this
.8c01		20 e1 98	jsr $98e1			jsr 	EvaluateExpressionAtPrecedence
.8c04		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8c06		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8c08		f0 0e		beq $8c18			beq 	_LetGoProc 					; it's a procedure call.
.8c0a						_LCMain:
.8c0a		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8c0c		20 cc 93	jsr $93cc			jsr 	CheckNextA
.8c0f		e8		inx				inx 								; RHS
.8c10		20 7a a2	jsr $a27a			jsr 	EvaluateValue
.8c13		ca		dex				dex
.8c14		20 1b 8c	jsr $8c1b			jsr 	AssignVariable
.8c17		60		rts				rts
.8c18						_LetGoProc:
.8c18		4c 65 8e	jmp $8e65			jmp 	CallProcedure
.8c1b						AssignVariable:
.8c1b		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c1d		48		pha				pha 								; save a copy
.8c1e		55 51		eor $51,x			eor 	NSStatus+1,x
.8c20		29 10		and #$10			and 	#NSBIsString
.8c22		d0 0b		bne $8c2f			bne 	_ASError
.8c24		68		pla				pla 								; get back
.8c25		29 10		and #$10			and 	#NSBIsString 				; check type
.8c27		d0 03		bne $8c2c			bne 	_ASString
.8c29		4c e0 9a	jmp $9ae0			jmp 	AssignNumber
.8c2c						_ASString:
.8c2c		4c 3e 9b	jmp $9b3e			jmp 	AssignString
.8c2f						_ASError:
.8c2f		4c b7 a4	jmp $a4b7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c32						Command_List:
.8c32		9c 42 04	stz $0442			stz 	listIndent 					; reset indent.
.8c35		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c37		20 6b 80	jsr $806b			jsr 	SNDCommand
.8c3a		b1 30		lda ($30),y			lda 	(codePtr),y
.8c3c		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c3e		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c40		f0 72		beq $8cb4			beq 	_CLListProcedure
.8c42		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c44		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c46		a9 ff		lda #$ff			lda 	#$FF
.8c48		85 5f		sta $5f				sta 	NSMantissa0+7
.8c4a		85 67		sta $67				sta 	NSMantissa1+7
.8c4c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c50		f0 1a		beq $8c6c			beq 	_CLSecond
.8c52		20 3a 8d	jsr $8d3a			jsr 	CLIsDigit 					; if not digit, list all
.8c55		b0 20		bcs $8c77			bcs 	_CLStart
.8c57		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c59		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.8c5c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c5e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c60		f0 0a		beq $8c6c			beq 	_CLSecond 					; if so go get it
.8c62		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c64		85 5f		sta $5f				sta 	NSMantissa0+7
.8c66		a5 64		lda $64				lda 	NSMantissa1+4
.8c68		85 67		sta $67				sta 	NSMantissa1+7
.8c6a		80 0b		bra $8c77			bra 	_CLStart
.8c6c						_CLSecond:
.8c6c		c8		iny				iny 								; consume comma
.8c6d		20 3a 8d	jsr $8d3a			jsr 	CLIsDigit 					; digit found
.8c70		b0 05		bcs $8c77			bcs 	_CLStart 					; if not, continue listing
.8c72		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c74		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.8c77						_CLStart
.8c77		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c79		85 30		sta $30				sta 	codePtr
.8c7b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c7d		85 31		sta $31				sta 	codePtr+1
.8c7f						_CLLoop:
.8c7f		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c81		f0 03		beq $8c86			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c83		20 4e 81	jsr $814e			jsr 	ProcessEvents
.8c86						_NoEvents:
.8c86		d0 27		bne $8caf			bne 	_CLBreak
.8c88		b2 30		lda ($30)			lda 	(codePtr)
.8c8a		f0 20		beq $8cac			beq 	_CLExit
.8c8c		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c8e		20 29 8d	jsr $8d29			jsr 	CLCompareLineNo
.8c91		90 0c		bcc $8c9f			bcc 	_CLNext
.8c93		a2 07		ldx #$07			ldx 	#7
.8c95		20 29 8d	jsr $8d29			jsr 	CLCompareLineNo
.8c98		f0 02		beq $8c9c			beq 	_CLDoThisOne
.8c9a		b0 03		bcs $8c9f			bcs 	_CLNext
.8c9c						_CLDoThisOne:
.8c9c		20 16 8d	jsr $8d16			jsr 	CLListOneLine 				; routine to list the current line.
.8c9f						_CLNext:
.8c9f		18		clc				clc
.8ca0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ca2		65 30		adc $30				adc 	codePtr
.8ca4		85 30		sta $30				sta 	codePtr
.8ca6		90 02		bcc $8caa			bcc 	_CREExit
.8ca8		e6 31		inc $31				inc 	codePtr+1 					; carry
.8caa						_CREExit:
.8caa		80 d3		bra $8c7f			bra 	_CLLoop
.8cac						_CLExit:
.8cac		4c 0f 88	jmp $880f			jmp 	WarmStart
.8caf						_CLBreak:
.8caf		a9 01		lda #$01		lda	#1
.8cb1		4c d5 93	jmp $93d5		jmp	ErrorHandler
.8cb4						_CLListProcedure:
.8cb4		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb6		85 38		sta $38				sta 	zTemp1
.8cb8		c8		iny				iny
.8cb9		b1 30		lda ($30),y			lda 	(codePtr),y
.8cbb		85 39		sta $39				sta 	zTemp1+1
.8cbd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cbf		85 30		sta $30				sta 	codePtr
.8cc1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cc3		85 31		sta $31				sta 	codePtr+1
.8cc5						_CLLPSearch:
.8cc5		b2 30		lda ($30)			lda 	(codePtr)
.8cc7		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cc9		f0 e1		beq $8cac			beq 	_CLExit
.8ccb		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8ccd		b1 30		lda ($30),y			lda 	(codePtr),y
.8ccf		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.8cd1		d0 0e		bne $8ce1			bne 	_CLLPNext
.8cd3		c8		iny				iny 								; check if PROC this.
.8cd4		b1 30		lda ($30),y			lda 	(codePtr),y
.8cd6		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8cd8		d0 07		bne $8ce1			bne 	_CLLPNext
.8cda		c8		iny				iny
.8cdb		b1 30		lda ($30),y			lda 	(codePtr),y
.8cdd		c5 39		cmp $39				cmp 	zTemp1+1
.8cdf		f0 0d		beq $8cee			beq 	_CLLPFound
.8ce1						_CLLPNext:
.8ce1		18		clc				clc
.8ce2		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ce4		65 30		adc $30				adc 	codePtr
.8ce6		85 30		sta $30				sta 	codePtr
.8ce8		90 02		bcc $8cec			bcc 	_CREExit
.8cea		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cec						_CREExit:
.8cec		80 d7		bra $8cc5			bra 	_CLLPSearch
.8cee						_CLLPFound:
.8cee		b2 30		lda ($30)			lda 	(codePtr)
.8cf0		f0 ba		beq $8cac			beq 	_CLExit
.8cf2		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8cf4		f0 03		beq $8cf9			beq 	_NoEvents					; if zero, skip with Z flag set.
.8cf6		20 4e 81	jsr $814e			jsr 	ProcessEvents
.8cf9						_NoEvents:
.8cf9		d0 b4		bne $8caf			bne 	_CLBreak
.8cfb		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cfd		b1 30		lda ($30),y			lda 	(codePtr),y
.8cff		48		pha				pha
.8d00		20 16 8d	jsr $8d16			jsr 	CLListOneLine 				; list line and go forward
.8d03		18		clc				clc
.8d04		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d06		65 30		adc $30				adc 	codePtr
.8d08		85 30		sta $30				sta 	codePtr
.8d0a		90 02		bcc $8d0e			bcc 	_CREExit
.8d0c		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d0e						_CREExit:
.8d0e		68		pla				pla 								; reached ENDPROC ?
.8d0f		c9 b4		cmp #$b4			cmp 	#KWD_ENDPROC
.8d11		d0 db		bne $8cee			bne 	_CLLPFound
.8d13		4c 0f 88	jmp $880f			jmp 	WarmStart
.8d16						CLListOneLine:
.8d16		20 7a 93	jsr $937a			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8d19		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8d1c		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d1e		a9 49		lda #$49			lda 	#(tokenBuffer & $FF)
.8d20		20 34 94	jsr $9434			jsr 	PrintStringXA
.8d23		a9 0d		lda #$0d			lda 	#13 						; new line
.8d25		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8d28		60		rts				rts
.8d29						CLCompareLineNo:
.8d29		38		sec				sec
.8d2a		a0 01		ldy #$01			ldy 	#1
.8d2c		b1 30		lda ($30),y			lda 	(codePtr),y
.8d2e		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d30		85 36		sta $36				sta 	zTemp0
.8d32		c8		iny				iny
.8d33		b1 30		lda ($30),y			lda 	(codePtr),y
.8d35		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d37		05 36		ora $36				ora 	zTemp0
.8d39		60		rts				rts
.8d3a						CLIsDigit:
.8d3a		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3c		c9 30		cmp #$30			cmp 	#"0"
.8d3e		90 03		bcc $8d43			bcc	 	_CLIDExitFalse
.8d40		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d42		60		rts				rts
.8d43						_CLIDExitFalse:
.8d43		38		sec				sec
.8d44		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d45						Command_LOCAL:
.8d45		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d47		20 53 8d	jsr $8d53			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d4a		b1 30		lda ($30),y			lda 	(codePtr),y
.8d4c		c8		iny				iny
.8d4d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d4f		f0 f4		beq $8d45			beq 	Command_LOCAL 				; if so, localise another variable.
.8d51		88		dey				dey 								; unpick pre-get
.8d52		60		rts				rts
.8d53						LocaliseNextTerm:
.8d53		20 29 9d	jsr $9d29			jsr 	EvaluateTerm 				; evaluate the term
.8d56		b5 50		lda $50,x			lda 	NSStatus,x
.8d58		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d5a		f0 5c		beq $8db8			beq		_LNTError
.8d5c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d5e		85 36		sta $36				sta 	zTemp0
.8d60		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d62		85 37		sta $37				sta  	zTemp0+1
.8d64		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d66		29 10		and #$10			and 	#NSBIsString
.8d68		d0 1e		bne $8d88			bne 	_LNTPushString
.8d6a		5a		phy				phy
.8d6b		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d6d						_LNTPushNumLoop:
.8d6d		b1 36		lda ($36),y			lda		(zTemp0),y
.8d6f		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8d72		c8		iny				iny
.8d73		c0 05		cpy #$05			cpy 	#5
.8d75		d0 f6		bne $8d6d			bne 	_LNTPushNumLoop
.8d77		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d79		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8d7c		a5 37		lda $37				lda 	zTemp0+1
.8d7e		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8d81		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d83		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8d86		7a		ply				ply
.8d87		60		rts				rts
.8d88						_LNTPushString:
.8d88		5a		phy				phy
.8d89		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d8b		85 38		sta $38				sta 	zTemp1
.8d8d		a0 01		ldy #$01			ldy 	#1
.8d8f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d91		85 39		sta $39				sta 	zTemp1+1
.8d93		a0 00		ldy #$00			ldy 	#0 							; output string
.8d95		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d97		f0 0a		beq $8da3			beq 	_LNTStringOut
.8d99						_LNTPushStrLoop:
.8d99		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d9b		f0 06		beq $8da3			beq 	_LNTStringOut
.8d9d		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8da0		c8		iny				iny
.8da1		80 f6		bra $8d99			bra 	_LNTPushStrLoop
.8da3						_LNTStringOut:
.8da3		98		tya				tya									; output length (chars written).
.8da4		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8da7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8da9		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8dac		b5 60		lda $60,x			lda 	NSMantissa1,x
.8dae		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8db1		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8db3		20 6f b4	jsr $b46f			jsr 	StackPushByte
.8db6		7a		ply				ply
.8db7		60		rts				rts
.8db8						_LNTError:
.8db8		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.8dbb						LocalPopValue:
.8dbb		20 87 b4	jsr $b487			jsr 	StackPopByte
.8dbe		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8dc0		d0 17		bne $8dd9			bne 	_LPVString
.8dc2		20 87 b4	jsr $b487			jsr 	StackPopByte 				; address
.8dc5		85 37		sta $37				sta 	zTemp0+1
.8dc7		20 87 b4	jsr $b487			jsr 	StackPopByte
.8dca		85 36		sta $36				sta 	zTemp0
.8dcc		5a		phy				phy
.8dcd		a0 04		ldy #$04			ldy 	#4 							; copy back
.8dcf						_LPVNumberCopy:
.8dcf		20 87 b4	jsr $b487			jsr 	StackPopByte
.8dd2		91 36		sta ($36),y			sta 	(zTemp0),y
.8dd4		88		dey				dey
.8dd5		10 f8		bpl $8dcf			bpl 	_LPVNumberCopy
.8dd7		7a		ply				ply 								; and complete
.8dd8		60		rts				rts
.8dd9						_LPVString:
.8dd9		20 87 b4	jsr $b487			jsr 	StackPopByte 				; address of record copied to zTemp0
.8ddc		85 37		sta $37				sta 	zTemp0+1
.8dde		20 87 b4	jsr $b487			jsr 	StackPopByte
.8de1		85 36		sta $36				sta 	zTemp0
.8de3		5a		phy				phy
.8de4		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8de6		85 38		sta $38				sta 	zTemp1
.8de8		a0 01		ldy #$01			ldy 	#1
.8dea		b1 36		lda ($36),y			lda 	(zTemp0),y
.8dec		85 39		sta $39				sta 	zTemp1+1
.8dee		20 87 b4	jsr $b487			jsr 	StackPopByte 				; # chars to get => y
.8df1		a8		tay				tay
.8df2		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8df4		f0 0e		beq $8e04			beq 	_LPVStringCopied
.8df6		a9 00		lda #$00			lda 	#0 							; NULL on end
.8df8		91 38		sta ($38),y			sta 	(zTemp1),y
.8dfa						_LPVStringCopy:
.8dfa		88		dey				dey
.8dfb		30 07		bmi $8e04			bmi 	_LPVStringCopied
.8dfd		20 87 b4	jsr $b487			jsr 	StackPopByte
.8e00		91 38		sta ($38),y			sta 	(zTemp1),y
.8e02		80 f6		bra $8dfa			bra 	_LPVStringCopy
.8e04						_LPVStringCopied:
.8e04		fa		plx				plx
.8e05		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e06						NewCommand:
.8e06		20 0c 8e	jsr $8e0c			jsr 	NewProgram 					; does the actual NEW.
.8e09		4c 0f 88	jmp $880f			jmp 	WarmStart 					; and warm starts straight away.
.8e0c						NewProgram:
.8e0c		20 27 a7	jsr $a727			jsr 	MemoryNew
.8e0f		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e12		20 61 92	jsr $9261			jsr 	ClearSystem					; clear everything.
.8e15		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/option.asm

.8e16						OptionCommand:
.8e16		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e18		20 d0 a2	jsr $a2d0			jsr		Evaluate8BitInteger 		; address
.8e1b		48		pha				pha
.8e1c		20 c4 93	jsr $93c4			jsr 	CheckComma
.8e1f		e8		inx				inx
.8e20		20 d0 a2	jsr $a2d0			jsr		Evaluate8BitInteger 		; data
.8e23		fa		plx				plx
.8e24		9d 00 04	sta $0400,x			sta 	ControlStorage,x
.8e27		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8e28						PokeBCommand:
.8e28		a9 01		lda #$01			lda 	#1
.8e2a		80 0c		bra $8e38			bra 	PokeCommand
.8e2c						PokeWCommand:
.8e2c		a9 02		lda #$02			lda 	#2
.8e2e		80 08		bra $8e38			bra 	PokeCommand
.8e30						PokeLCommand:
.8e30		a9 03		lda #$03			lda 	#3
.8e32		80 04		bra $8e38			bra 	PokeCommand
.8e34						PokeDCommand:
.8e34		a9 04		lda #$04			lda 	#4
.8e36		80 00		bra $8e38			bra 	PokeCommand
.8e38						PokeCommand:
.8e38		48		pha				pha 								; save count on stack
.8e39		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e3b		20 b5 a2	jsr $a2b5			jsr		Evaluate16BitInteger 		; address
.8e3e		20 c4 93	jsr $93c4			jsr 	CheckComma
.8e41		e8		inx				inx
.8e42		20 a2 a2	jsr $a2a2			jsr		EvaluateInteger 			; data
.8e45		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8e47		85 36		sta $36				sta 	zTemp0
.8e49		a5 60		lda $60				lda 	NSMantissa1
.8e4b		85 37		sta $37				sta 	zTemp0+1
.8e4d		68		pla				pla 								; count -> zTemp1
.8e4e		85 38		sta $38				sta 	zTemp1
.8e50		5a		phy				phy 								; save Y position.
.8e51		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e53		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e55						_PCLoop:
.8e55		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e57		91 36		sta ($36),y			sta 	(zTemp0),y
.8e59		c8		iny				iny 								; next byte to write
.8e5a		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e5b		18		clc				clc
.8e5c		69 08		adc #$08			adc 	#MathStackSize
.8e5e		aa		tax				tax
.8e5f		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e61		d0 f2		bne $8e55			bne 	_PCLoop
.8e63		7a		ply				ply 								; restore position.
.8e64		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e65						CallProcedure:
.8e65		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e67		b1 30		lda ($30),y			lda 	(codePtr),y
.8e69		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e6b		f0 0c		beq $8e79			beq 	_CPEndParam
.8e6d						_CPParamLoop:
.8e6d		20 7a a2	jsr $a27a			jsr 	EvaluateValue 				; get parameter onto stack
.8e70		e8		inx				inx 								; bump next stack
.8e71		b1 30		lda ($30),y			lda 	(codePtr),y
.8e73		c8		iny				iny
.8e74		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e76		f0 f5		beq $8e6d			beq 	_CPParamLoop
.8e78		88		dey				dey 								; unpick.
.8e79						_CPEndParam:
.8e79		8e 32 04	stx $0432			stx 	lastParameter 				; save the last parameters index.
.8e7c		c8		iny				iny									; skip right bracket
.8e7d		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e7f		20 90 b4	jsr $b490			jsr 	StackOpen
.8e82		20 d5 b4	jsr $b4d5			jsr 	STKSaveCodePosition 		; save loop position
.8e85		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e87		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e89		a5 60		lda $60				lda 	NSMantissa1
.8e8b		85 37		sta $37				sta 	zTemp0+1
.8e8d		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e8f		b2 36		lda ($36)			lda 	(zTemp0)
.8e91		85 30		sta $30				sta 	safePtr
.8e93		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e95		85 31		sta $31				sta 	safePtr+1
.8e97		c8		iny				iny
.8e98		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9a		85 32		sta $32				sta 	safePtr+2
.8e9c		c8		iny				iny
.8e9d		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9f		85 33		sta $33				sta 	safePtr+3
.8ea1		c8		iny				iny 								; get Y offset -> Y
.8ea2		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea4		a8		tay				tay
.8ea5		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8ea7		ec 32 04	cpx $0432			cpx	 	lastParameter 				; check zero parameters at the start
.8eaa		f0 13		beq $8ebf			beq 	_ParamExit 					; if so, exit.
.8eac						_ParamExtract:
.8eac		ca		dex				dex 								; put a local term on the level before
.8ead		20 53 8d	jsr $8d53			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8eb0		20 1b 8c	jsr $8c1b			jsr 	AssignVariable 				; assign stacked value to the variable.
.8eb3		e8		inx				inx 								; advance to next parameter to do.
.8eb4		e8		inx				inx
.8eb5		ec 32 04	cpx $0432			cpx 	lastParameter 				; are we done ?
.8eb8		f0 05		beq $8ebf			beq 	_ParamExit
.8eba		20 c4 93	jsr $93c4			jsr 	CheckComma 					; comma seperating parameters
.8ebd		80 ed		bra $8eac			bra 	_ParamExtract
.8ebf						_ParamExit:
.8ebf		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; check )
.8ec2		60		rts				rts 								; and continue from here
.8ec3						Command_ENDPROC:
.8ec3		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8ec5		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8ec7		20 bd b4	jsr $b4bd			jsr 	StackCheckFrame
.8eca		20 e6 b4	jsr $b4e6			jsr 	STKLoadCodePosition 		; restore code position
.8ecd		20 af b4	jsr $b4af			jsr 	StackClose
.8ed0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8ed1						Command_Read:
.8ed1		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8ed3		20 29 9d	jsr $9d29			jsr 	EvaluateTerm
.8ed6		b5 50		lda $50,x			lda 	NSStatus,x
.8ed8		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8eda		f0 4f		beq $8f2b			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8edc		20 74 8f	jsr $8f74			jsr 	SwapDataCodePtrs 			; swap code and data
.8edf		ad 38 04	lda $0438			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ee2		d0 25		bne $8f09			bne 	_CRContinueData  			; forward for the next one.
.8ee4		b2 30		lda ($30)			lda 	(codePtr)
.8ee6		f0 1c		beq $8f04			beq 	_CRNoData
.8ee8						_CRKeepSearching:
.8ee8		a9 c0		lda #$c0			lda 	#KWD_DATA 					; scan for instruction
.8eea		a2 80		ldx #$80			ldx 	#KWC_EOL
.8eec		20 17 93	jsr $9317			jsr 	ScanForward
.8eef		c9 c0		cmp #$c0			cmp 	#KWD_DATA 					; found data ?
.8ef1		f0 16		beq $8f09			beq 	_CRHaveData 				; found it
.8ef3		18		clc				clc
.8ef4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ef6		65 30		adc $30				adc 	codePtr
.8ef8		85 30		sta $30				sta 	codePtr
.8efa		90 02		bcc $8efe			bcc 	_CREExit
.8efc		e6 31		inc $31				inc 	codePtr+1 					; carry
.8efe						_CREExit:
.8efe		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f00		b2 30		lda ($30)			lda 	(codePtr)
.8f02		d0 e4		bne $8ee8			bne 	_CRKeepSearching
.8f04						_CRNoData:
.8f04		a9 0b		lda #$0b		lda	#11
.8f06		4c d5 93	jmp $93d5		jmp	ErrorHandler
.8f09						_CRHaveData:
.8f09						_CRContinueData:
.8f09		a2 01		ldx #$01			ldx 	#1
.8f0b		20 7a a2	jsr $a27a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f0e		ca		dex				dex
.8f0f		20 1b 8c	jsr $8c1b			jsr		AssignVariable 				; do the assignment
.8f12		9c 38 04	stz $0438			stz 	inDataStatement 			; clear in data flag
.8f15		b1 30		lda ($30),y			lda 	(codePtr),y
.8f17		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8f19		d0 04		bne $8f1f			bne 	_CRSwapBack
.8f1b		c8		iny				iny 								; consume comma
.8f1c		ee 38 04	inc $0438			inc 	inDataStatement 			; set in data statement currently.
.8f1f						_CRSwapBack:
.8f1f		20 74 8f	jsr $8f74			jsr 	SwapDataCodePtrs			; swap them back.
.8f22		b1 30		lda ($30),y			lda 	(codePtr),y
.8f24		c8		iny				iny
.8f25		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f27		f0 a8		beq $8ed1			beq 	Command_Read 				; if so go round again.
.8f29		88		dey				dey 								; unpick get.
.8f2a		60		rts				rts
.8f2b						_CRSyntax:
.8f2b		4c ad a4	jmp $a4ad			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f2e						RemCommand:
.8f2e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f30		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f32		d0 06		bne $8f3a			bne 	_RMExit
.8f34		c8		iny				iny 								; point to offset
.8f35		98		tya				tya 								; A = offset position
.8f36		38		sec				sec 								; add size +1 hence SEC
.8f37		71 30		adc ($30),y			adc 	(codePtr),y
.8f39		a8		tay				tay 								; make current position.
.8f3a						_RMExit:
.8f3a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f3b						Command_REPEAT:
.8f3b		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f3d		20 90 b4	jsr $b490			jsr 	StackOpen
.8f40		20 d5 b4	jsr $b4d5			jsr 	STKSaveCodePosition 		; save loop position
.8f43		60		rts				rts
.8f44						Command_UNTIL:
.8f44		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f46		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f48		20 bd b4	jsr $b4bd			jsr 	StackCheckFrame
.8f4b		a2 00		ldx #$00			ldx 	#0
.8f4d		20 83 a2	jsr $a283			jsr 	EvaluateNumber 				; work out the number
.8f50		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; check if zero
.8f53		f0 04		beq $8f59			beq 	_CULoopBack 				; if so keep looping
.8f55		20 af b4	jsr $b4af			jsr 	StackClose		 			; return
.8f58		60		rts				rts
.8f59						_CULoopBack:
.8f59		20 e6 b4	jsr $b4e6			jsr 	STKLoadCodePosition 		; loop back
.8f5c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f5d						Command_Restore:
.8f5d		20 74 8f	jsr $8f74			jsr 	SwapDataCodePtrs 			; swap code and data
.8f60		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f62		85 30		sta $30				sta 	codePtr
.8f64		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f66		85 31		sta $31				sta 	codePtr+1
.8f68		20 74 8f	jsr $8f74			jsr 	SwapDataCodePtrs 			; put them back
.8f6b		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f6d		8d 37 04	sta $0437			sta 	dataPointer+4   			; (read checks not EOF)
.8f70		9c 38 04	stz $0438			stz 	inDataStatement 			; not in data statement
.8f73		60		rts				rts
.8f74						SwapDataCodePtrs:
.8f74		da		phx				phx
.8f75		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f77						_SDCPLoop:
.8f77		b5 30		lda $30,x			lda 	safePtr,x
.8f79		48		pha				pha
.8f7a		bd 33 04	lda $0433,x			lda 	dataPointer,x
.8f7d		95 30		sta $30,x			sta 	safePtr,x
.8f7f		68		pla				pla
.8f80		9d 33 04	sta $0433,x			sta 	dataPointer,x
.8f83		ca		dex				dex
.8f84		10 f1		bpl $8f77			bpl 	_SDCPLoop
.8f86		ad 37 04	lda $0437			lda 	dataPointer+4 				; swap Y position over.
.8f89		8c 37 04	sty $0437			sty 	dataPointer+4
.8f8c		a8		tay				tay
.8f8d		fa		plx				plx
.8f8e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f8f						EOLCommand:
.8f8f		18		clc				clc
.8f90		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f92		65 30		adc $30				adc 	codePtr
.8f94		85 30		sta $30				sta 	codePtr
.8f96		90 02		bcc $8f9a			bcc 	_CREExit
.8f98		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f9a						_CREExit:
.8f9a		80 18		bra $8fb4			bra 	RunNewLine
.8f9c						CommandRUNOptLoad:
.8f9c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f9e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8fa0		f0 07		beq $8fa9			beq 	RunCurrentProgram
.8fa2		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8fa4		f0 03		beq $8fa9			beq 	RunCurrentProgram
.8fa6		20 3f ae	jsr $ae3f			jsr 	LoadFile 					; load expected name file.
.8fa9						RunCurrentProgram:
.8fa9		20 61 92	jsr $9261			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8fac		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fae		85 30		sta $30				sta 	codePtr
.8fb0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fb2		85 31		sta $31				sta 	codePtr+1
.8fb4						RunNewLine:
.8fb4		b2 30		lda ($30)			lda 	(codePtr)
.8fb6		f0 74		beq $902c			beq 	CRNoProgram         		; no then END.
.8fb8		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8fba		9a		txs				txs
.8fbb						RUNCodePointerLine:
.8fbb		a0 02		ldy #$02			ldy 	#2 							; start of program
.8fbd						_CRIncMainLoop:
.8fbd		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8fbf		f0 03		beq $8fc4			beq 	_NoEvents					; if zero, skip with Z flag set.
.8fc1		20 4e 81	jsr $814e			jsr 	ProcessEvents
.8fc4						_NoEvents:
.8fc4		d0 61		bne $9027			bne 	_CRBreak
.8fc6		a5 01		lda $01				lda 	1 							; save I/O 0
.8fc8		48		pha				pha
.8fc9		64 01		stz $01				stz 	1 							; access I/O Page 0
.8fcb		38		sec				sec 								; calculate timer - LastTick
.8fcc		ad 59 d6	lda $d659			lda 	$D659
.8fcf		cd 7e 06	cmp $067e			cmp 	LastTick
.8fd2		f0 06		beq $8fda			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8fd4		8d 7e 06	sta $067e			sta 	LastTick 					; update last timer
.8fd7		20 7d 82	jsr $827d			jsr 	TickHandler 							; go do the code.
.8fda						_NoFireTick:
.8fda		68		pla				pla 								; restore I/O 0
.8fdb		85 01		sta $01				sta 	1
.8fdd						_CRNoBreakCheck:
.8fdd		c8		iny				iny									; next token
.8fde						_CRMainLoop:
.8fde		9c 2c 04	stz $042c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8fe1		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe3		10 10		bpl $8ff5			bpl 	_CRNotKeyword				; not a token.
.8fe5		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8fe7		b0 04		bcs $8fed			bcs 	_CRIsKeyword
.8fe9		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8feb		b0 34		bcs $9021			bcs		_CRSyntaxError
.8fed						_CRIsKeyword:
.8fed		c8		iny				iny 								; consume command
.8fee		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8fef		aa		tax				tax 								; put in X for vector jump
.8ff0		20 24 90	jsr $9024			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8ff3		80 e9		bra $8fde			bra 	_CRMainLoop 				; and loop round
.8ff5						_CRNotKeyword:
.8ff5		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8ff7		f0 c4		beq $8fbd			beq 	_CRIncMainLoop
.8ff9		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8ffb		90 05		bcc $9002			bcc 	_CRNotVariable
.8ffd						_CRGoLet:
.8ffd		20 e2 8b	jsr $8be2			jsr 	LetCommand
.9000		80 dc		bra $8fde			bra 	_CRMainLoop
.9002						_CRNotVariable:
.9002		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; handle @
.9004		f0 f7		beq $8ffd			beq 	_CRGoLet
.9006		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9008		f0 f3		beq $8ffd			beq 	_CRGoLet
.900a		c9 21		cmp #$21			cmp 	#KWD_PLING
.900c		f0 ef		beq $8ffd			beq 	_CRGoLet
.900e		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9010		f0 09		beq $901b			beq 	_CRGoRem
.9012		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9014		d0 0b		bne $9021			bne 	_CRSyntaxError
.9016		20 58 86	jsr $8658			jsr 	LabelHere
.9019		80 c3		bra $8fde			bra 	_CRMainLoop
.901b						_CRGoRem:
.901b		c8		iny				iny
.901c		20 2e 8f	jsr $8f2e			jsr 	RemCommand
.901f		80 bd		bra $8fde			bra 	_CRMainLoop
.9021						_CRSyntaxError:
.9021		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.9024						_CRCallVector0:
.9024		7c c2 90	jmp ($90c2,x)			jmp 	(VectorSet0,x)
.9027						_CRBreak:
.9027		a9 01		lda #$01		lda	#1
.9029		4c d5 93	jmp $93d5		jmp	ErrorHandler
.902c						CRNoProgram:
.902c		4c 78 89	jmp $8978			jmp 	EndCommand
.902f						Shift1Command:
.902f		b1 30		lda ($30),y			lda 	(codePtr),y
.9031		c8		iny				iny
.9032		0a		asl a				asl 	a
.9033		aa		tax				tax
.9034		7c 7c 91	jmp ($917c,x)			jmp 	(VectorSet1,x)
.9037						Shift2Command:
.9037		b1 30		lda ($30),y			lda 	(codePtr),y
.9039		c8		iny				iny
.903a		0a		asl a				asl 	a
.903b		aa		tax				tax
.903c		7c d4 91	jmp ($91d4,x)			jmp 	(VectorSet2,x)
.903f						Unused1:
.903f						Unused2:
.903f						Unused3:
.903f						Unused4:
.903f		4c ad a4	jmp $a4ad			jmp 	SyntaxError
>9042								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9042						VectorSetPunc:
>9042		93 96					.word	ShiftLeft                        ; $00 <<
>9044		7e 94					.word	BinaryCompareLessEqual           ; $01 <=
>9046		74 94					.word	BinaryCompareNotEqual            ; $02 <>
>9048		ad a4					.word	SyntaxError                      ; $03 !!3
>904a		ad a4					.word	SyntaxError                      ; $04 ><
>904c		88 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>904e		96 96					.word	ShiftRight                       ; $06 >>
>9050		ad a4					.word	SyntaxError                      ; $07 !!7
>9052		ad a4					.word	SyntaxError                      ; $08 !!8
>9054		ad a4					.word	SyntaxError                      ; $09 !!9
>9056		ad a4					.word	SyntaxError                      ; $0a !!10
>9058		ad a4					.word	SyntaxError                      ; $0b !!11
>905a		ad a4					.word	SyntaxError                      ; $0c !!12
>905c		ad a4					.word	SyntaxError                      ; $0d !!13
>905e		ad a4					.word	SyntaxError                      ; $0e !!14
>9060		ad a4					.word	SyntaxError                      ; $0f !!15
>9062		ad a4					.word	SyntaxError                      ; $10 @
>9064		ad a4					.word	SyntaxError                      ; $11 !!17
>9066		ad a4					.word	SyntaxError                      ; $12 !!18
>9068		ad a4					.word	SyntaxError                      ; $13 [
>906a		3f 95					.word	IntegerDivide                    ; $14 \
>906c		ad a4					.word	SyntaxError                      ; $15 ]
>906e		d1 97					.word	EorInteger                       ; $16 ^
>9070		ad a4					.word	SyntaxError                      ; $17 _
>9072		ad a4					.word	SyntaxError                      ; $18 `
>9074		ad a4					.word	SyntaxError                      ; $19 !!25
>9076		ad a4					.word	SyntaxError                      ; $1a !!26
>9078		ad a4					.word	SyntaxError                      ; $1b {
>907a		9c 97					.word	OraInteger                       ; $1c |
>907c		ad a4					.word	SyntaxError                      ; $1d }
>907e		ad a4					.word	SyntaxError                      ; $1e ~
>9080		ad a4					.word	SyntaxError                      ; $1f <7F>
>9082		ad a4					.word	SyntaxError                      ; $20
>9084		06 98					.word	WordIndirect                     ; $21 !
>9086		ad a4					.word	SyntaxError                      ; $22 "
>9088		ad a4					.word	SyntaxError                      ; $23 #
>908a		ad a4					.word	SyntaxError                      ; $24 $
>908c		80 95					.word	IntegerModulus                   ; $25 %
>908e		67 97					.word	AndInteger                       ; $26 &
>9090		ad a4					.word	SyntaxError                      ; $27 '
>9092		ad a4					.word	SyntaxError                      ; $28 (
>9094		ad a4					.word	SyntaxError                      ; $29 )
>9096		ee 95					.word	MulInteger                       ; $2a *
>9098		09 97					.word	AddInteger                       ; $2b +
>909a		ad a4					.word	SyntaxError                      ; $2c ,
>909c		42 97					.word	SubInteger                       ; $2d -
>909e		ad a4					.word	SyntaxError                      ; $2e .
>90a0		c0 99					.word	FDivideCommand                   ; $2f /
>90a2		ad a4					.word	SyntaxError                      ; $30 0
>90a4		ad a4					.word	SyntaxError                      ; $31 1
>90a6		ad a4					.word	SyntaxError                      ; $32 2
>90a8		ad a4					.word	SyntaxError                      ; $33 3
>90aa		ad a4					.word	SyntaxError                      ; $34 4
>90ac		ad a4					.word	SyntaxError                      ; $35 5
>90ae		ad a4					.word	SyntaxError                      ; $36 6
>90b0		ad a4					.word	SyntaxError                      ; $37 7
>90b2		ad a4					.word	SyntaxError                      ; $38 8
>90b4		ad a4					.word	SyntaxError                      ; $39 9
>90b6		ad a4					.word	SyntaxError                      ; $3a :
>90b8		ad a4					.word	SyntaxError                      ; $3b ;
>90ba		60 94					.word	BinaryCompareLess                ; $3c <
>90bc		56 94					.word	BinaryCompareEqual               ; $3d =
>90be		6a 94					.word	BinaryCompareGreater             ; $3e >
>90c0		28 98					.word	ByteIndirect                     ; $3f ?
.90c2						VectorSet0:
>90c2		8f 8f					.word	EOLCommand                       ; $80 !0:EOF
>90c4		2f 90					.word	Shift1Command                    ; $81 !1:SH1
>90c6		37 90					.word	Shift2Command                    ; $82 !2:SH2
>90c8		aa 9e					.word	AbsUnary                         ; $83 ABS(
>90ca		b8 9e					.word	AllocUnary                       ; $84 ALLOC(
>90cc		28 9f					.word	AscUnary                         ; $85 ASC(
>90ce		79 a0					.word	ChrUnary                         ; $86 CHR$(
>90d0		d6 ab					.word	UnaryEvent                       ; $87 EVENT(
>90d2		52 94					.word	UnaryFalse                       ; $88 FALSE
>90d4		35 9f					.word	FracUnary                        ; $89 FRAC(
>90d6		ee b2					.word	ChrGet                           ; $8a GET$(
>90d8		d3 b2					.word	AscGet                           ; $8b GET(
>90da		7d b2					.word	UnaryGetDate                     ; $8c GETDATE$(
>90dc		79 b2					.word	UnaryGetTime                     ; $8d GETTIME$(
>90de		8e aa					.word	UnaryHit                         ; $8e HIT(
>90e0		f5 b2					.word	ChrInkey                         ; $8f INKEY$(
>90e2		e3 b2					.word	AscInkey                         ; $90 INKEY(
>90e4		4a 9f					.word	IntUnary                         ; $91 INT(
>90e6		38 a0					.word	IsValUnary                       ; $92 ISVAL(
>90e8		8b a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>90ea		af a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>90ec		50 b0					.word	UnaryJoyB                        ; $95 JOYB(
>90ee		29 b0					.word	UnaryJoyX                        ; $96 JOYX(
>90f0		2c b0					.word	UnaryJoyY                        ; $97 JOYY(
>90f2		0e b3					.word	KeyDown                          ; $98 KEYDOWN(
>90f4		ee a1					.word	Unary_Left                       ; $99 LEFT$(
>90f6		5b 9f					.word	LenUnary                         ; $9a LEN(
>90f8		79 9f					.word	Unary_Max                        ; $9b MAX(
>90fa		10 a2					.word	Unary_Mid                        ; $9c MID$(
>90fc		75 9f					.word	Unary_Min                        ; $9d MIN(
>90fe		c4 9f					.word	Unary_Not                        ; $9e NOT(
>9100		d7 9f					.word	PeekByteUnary                    ; $9f PEEK(
>9102		e3 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>9104		df 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>9106		db 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>9108		ed b3					.word	UnaryPlaying                     ; $a3 PLAYING(
>910a		28 b3					.word	Unary_Random                     ; $a4 RANDOM(
>910c		fb a1					.word	Unary_Right                      ; $a5 RIGHT$(
>910e		42 b3					.word	Unary_Rnd                        ; $a6 RND(
>9110		10 a0					.word	SgnUnary                         ; $a7 SGN(
>9112		2d a1					.word	SpcUnary                         ; $a8 SPC(
>9114		48 a1					.word	Unary_Str                        ; $a9 STR$(
>9116		6d ab					.word	TileRead                         ; $aa TILE(
>9118		60 b2					.word	UnaryTimer                       ; $ab TIMER(
>911a		47 94					.word	UnaryTrue                        ; $ac TRUE
>911c		2e a0					.word	ValUnary                         ; $ad VAL(
>911e		7b 89					.word	ForCommand                       ; $ae FOR
>9120		be 8a					.word	IfCommand                        ; $af IF
>9122		3f 90					.word	Unused1                          ; $b0 PROC
>9124		3b 8f					.word	Command_REPEAT                   ; $b1 REPEAT
>9126		8d 93					.word	Command_WHILE                    ; $b2 WHILE
>9128		e7 8a					.word	EndIf                            ; $b3 ENDIF
>912a		c3 8e					.word	Command_ENDPROC                  ; $b4 ENDPROC
>912c		2d 8a					.word	NextCommand                      ; $b5 NEXT
>912e		3f 90					.word	Unused4                          ; $b6 THEN
>9130		44 8f					.word	Command_UNTIL                    ; $b7 UNTIL
>9132		ae 93					.word	Command_WEND                     ; $b8 WEND
>9134		ad a4					.word	SyntaxError                      ; $b9 AT
>9136		ad a4					.word	SyntaxError                      ; $ba BY
>9138		7e 88					.word	CallCommand                      ; $bb CALL
>913a		7c a7					.word	CircleCommand                    ; $bc CIRCLE
>913c		ad a4					.word	SyntaxError                      ; $bd CLEAR
>913e		ad a4					.word	SyntaxError                      ; $be COLOR
>9140		ad a4					.word	SyntaxError                      ; $bf COLOUR
>9142		b3 88					.word	Command_Data                     ; $c0 DATA
>9144		bb 88					.word	DimCommand                       ; $c1 DIM
>9146		3f 90					.word	Unused3                          ; $c2 DOWNTO
>9148		e0 8a					.word	ElseCode                         ; $c3 ELSE
>914a		ad a4					.word	SyntaxError                      ; $c4 FROM
>914c		61 aa					.word	GfxCommand                       ; $c5 GFX
>914e		ad a4					.word	SyntaxError                      ; $c6 HERE
>9150		a5 a7					.word	ImageCommand                     ; $c7 IMAGE
>9152		e2 8b					.word	LetCommand                       ; $c8 LET
>9154		f7 a7					.word	LineCommand                      ; $c9 LINE
>9156		45 8d					.word	Command_LOCAL                    ; $ca LOCAL
>9158		62 b0					.word	MCCommand                        ; $cb MEMCOPY
>915a		ad a4					.word	SyntaxError                      ; $cc OFF
>915c		ad a4					.word	SyntaxError                      ; $cd ON
>915e		ad a4					.word	SyntaxError                      ; $ce OUTLINE
>9160		b2 aa					.word	PaletteCommand                   ; $cf PALETTE
>9162		f0 a7					.word	PlotCommand                      ; $d0 PLOT
>9164		28 8e					.word	PokeBCommand                     ; $d1 POKE
>9166		34 8e					.word	PokeDCommand                     ; $d2 POKED
>9168		30 8e					.word	PokeLCommand                     ; $d3 POKEL
>916a		2c 8e					.word	PokeWCommand                     ; $d4 POKEW
>916c		d1 8e					.word	Command_Read                     ; $d5 READ
>916e		78 a7					.word	RectangleCommand                 ; $d6 RECT
>9170		2e 8f					.word	RemCommand                       ; $d7 REM
>9172		ad a4					.word	SyntaxError                      ; $d8 SOLID
>9174		09 b4					.word	SoundCommand                     ; $d9 SOUND
>9176		87 a7					.word	SpriteCommand                    ; $da SPRITE
>9178		c1 a7					.word	TextCommand                      ; $db TEXT
>917a		3f 90					.word	Unused2                          ; $dc TO
.917c						VectorSet1:
>917c		ad a4					.word	SyntaxError                      ; $80 !0:EOF
>917e		ad a4					.word	SyntaxError                      ; $81 !1:SH1
>9180		ad a4					.word	SyntaxError                      ; $82 !2:SH2
>9182		52 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>9184		6e 88					.word	AssertCommand                    ; $84 ASSERT
>9186		52 a9					.word	BitmapCtrl                       ; $85 BITMAP
>9188		33 ac					.word	Command_BLoad                    ; $86 BLOAD
>918a		df ac					.word	Command_BSave                    ; $87 BSAVE
>918c		88 ab					.word	ClearScreen                      ; $88 CLS
>918e		ed 8a					.word	Command_CPrint                   ; $89 CPRINT
>9190		90 ab					.word	CursorControl                    ; $8a CURSOR
>9192		62 ad					.word	Command_Dir                      ; $8b DIR
>9194		32 ae					.word	Command_Drive                    ; $8c DRIVE
>9196		78 89					.word	EndCommand                       ; $8d END
>9198		c1 b3					.word	Explode                          ; $8e EXPLODE
>919a		ad a4					.word	SyntaxError                      ; $8f GO
>919c		86 8a					.word	Command_GOSUB                    ; $90 GOSUB
>919e		a4 8a					.word	GotoCommand                      ; $91 GOTO
>91a0		ad a4					.word	SyntaxError                      ; $92 HIMEM
>91a2		e8 8a					.word	Command_Input                    ; $93 INPUT
>91a4		32 8c					.word	Command_List                     ; $94 LIST
>91a6		39 ae					.word	Command_Load                     ; $95 LOAD
>91a8		76 b1					.word	MouseDeltaStatus                 ; $96 MDELTA
>91aa		72 b1					.word	MouseStatus                      ; $97 MOUSE
>91ac		06 8e					.word	NewCommand                       ; $98 NEW
>91ae		16 8e					.word	OptionCommand                    ; $99 OPTION
>91b0		9d b3					.word	PingCommand                      ; $9a PING
>91b2		f4 8a					.word	Command_Print                    ; $9b PRINT
>91b4		5d 8f					.word	Command_Restore                  ; $9c RESTORE
>91b6		96 8a					.word	Command_RETURN                   ; $9d RETURN
>91b8		9c 8f					.word	CommandRUNOptLoad                ; $9e RUN
>91ba		0b af					.word	Command_Save                     ; $9f SAVE
>91bc		ec b1					.word	CommandSetDate                   ; $a0 SETDATE
>91be		f0 b1					.word	CommandSetTime                   ; $a1 SETTIME
>91c0		b5 b3					.word	ShootCommand                     ; $a2 SHOOT
>91c2		ac a9					.word	SpritesCtrl                      ; $a3 SPRITES
>91c4		5c 92					.word	StopCommand                      ; $a4 STOP
>91c6		f2 aa					.word	TileCommand                      ; $a5 TILE
>91c8		d4 a9					.word	TilesCtrl                        ; $a6 TILES
>91ca		92 af					.word	Command_Try                      ; $a7 TRY
>91cc		cf af					.word	Command_VERIFY                   ; $a8 VERIFY
>91ce		bf ab					.word	XGoCommand                       ; $a9 XGO
>91d0		b6 ab					.word	XLoadCommand                     ; $aa XLOAD
>91d2		a9 b3					.word	ZapCommand                       ; $ab ZAP
.91d4						VectorSet2:
>91d4		ad a4					.word	SyntaxError                      ; $80 !0:EOF
>91d6		ad a4					.word	SyntaxError                      ; $81 !1:SH1
>91d8		ad a4					.word	SyntaxError                      ; $82 !2:SH2
>91da		6c a3					.word	Assemble_adc                     ; $83 ADC
>91dc		64 a3					.word	Assemble_and                     ; $84 AND
>91de		80 a3					.word	Assemble_asl                     ; $85 ASL
>91e0		ea a3					.word	Assemble_bcc                     ; $86 BCC
>91e2		ee a3					.word	Assemble_bcs                     ; $87 BCS
>91e4		f6 a3					.word	Assemble_beq                     ; $88 BEQ
>91e6		ad a3					.word	Assemble_bit                     ; $89 BIT
>91e8		de a3					.word	Assemble_bmi                     ; $8a BMI
>91ea		f2 a3					.word	Assemble_bne                     ; $8b BNE
>91ec		da a3					.word	Assemble_bpl                     ; $8c BPL
>91ee		fa a3					.word	Assemble_bra                     ; $8d BRA
>91f0		fe a3					.word	Assemble_brk                     ; $8e BRK
>91f2		e2 a3					.word	Assemble_bvc                     ; $8f BVC
>91f4		e6 a3					.word	Assemble_bvs                     ; $90 BVS
>91f6		06 a4					.word	Assemble_clc                     ; $91 CLC
>91f8		5a a4					.word	Assemble_cld                     ; $92 CLD
>91fa		1a a4					.word	Assemble_cli                     ; $93 CLI
>91fc		4a a4					.word	Assemble_clv                     ; $94 CLV
>91fe		78 a3					.word	Assemble_cmp                     ; $95 CMP
>9200		c1 a3					.word	Assemble_cpx                     ; $96 CPX
>9202		bc a3					.word	Assemble_cpy                     ; $97 CPY
>9204		9e a3					.word	Assemble_dec                     ; $98 DEC
>9206		56 a4					.word	Assemble_dex                     ; $99 DEX
>9208		32 a4					.word	Assemble_dey                     ; $9a DEY
>920a		68 a3					.word	Assemble_eor                     ; $9b EOR
>920c		a3 a3					.word	Assemble_inc                     ; $9c INC
>920e		66 a4					.word	Assemble_inx                     ; $9d INX
>9210		52 a4					.word	Assemble_iny                     ; $9e INY
>9212		d5 a3					.word	Assemble_jmp                     ; $9f JMP
>9214		d0 a3					.word	Assemble_jsr                     ; $a0 JSR
>9216		74 a3					.word	Assemble_lda                     ; $a1 LDA
>9218		99 a3					.word	Assemble_ldx                     ; $a2 LDX
>921a		b7 a3					.word	Assemble_ldy                     ; $a3 LDY
>921c		8a a3					.word	Assemble_lsr                     ; $a4 LSR
>921e		6a a4					.word	Assemble_nop                     ; $a5 NOP
>9220		60 a3					.word	Assemble_ora                     ; $a6 ORA
>9222		16 a4					.word	Assemble_pha                     ; $a7 PHA
>9224		02 a4					.word	Assemble_php                     ; $a8 PHP
>9226		5e a4					.word	Assemble_phx                     ; $a9 PHX
>9228		1e a4					.word	Assemble_phy                     ; $aa PHY
>922a		26 a4					.word	Assemble_pla                     ; $ab PLA
>922c		0a a4					.word	Assemble_plp                     ; $ac PLP
>922e		72 a4					.word	Assemble_plx                     ; $ad PLX
>9230		2e a4					.word	Assemble_ply                     ; $ae PLY
>9232		85 a3					.word	Assemble_rol                     ; $af ROL
>9234		8f a3					.word	Assemble_ror                     ; $b0 ROR
>9236		12 a4					.word	Assemble_rti                     ; $b1 RTI
>9238		22 a4					.word	Assemble_rts                     ; $b2 RTS
>923a		7c a3					.word	Assemble_sbc                     ; $b3 SBC
>923c		0e a4					.word	Assemble_sec                     ; $b4 SEC
>923e		6e a4					.word	Assemble_sed                     ; $b5 SED
>9240		2a a4					.word	Assemble_sei                     ; $b6 SEI
>9242		70 a3					.word	Assemble_sta                     ; $b7 STA
>9244		62 a4					.word	Assemble_stp                     ; $b8 STP
>9246		94 a3					.word	Assemble_stx                     ; $b9 STX
>9248		b2 a3					.word	Assemble_sty                     ; $ba STY
>924a		a8 a3					.word	Assemble_stz                     ; $bb STZ
>924c		46 a4					.word	Assemble_tax                     ; $bc TAX
>924e		42 a4					.word	Assemble_tay                     ; $bd TAY
>9250		cb a3					.word	Assemble_trb                     ; $be TRB
>9252		c6 a3					.word	Assemble_tsb                     ; $bf TSB
>9254		4e a4					.word	Assemble_tsx                     ; $c0 TSX
>9256		36 a4					.word	Assemble_txa                     ; $c1 TXA
>9258		3e a4					.word	Assemble_txs                     ; $c2 TXS
>925a		3a a4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.925c						StopCommand:
.925c		a9 08		lda #$08		lda	#8
.925e		4c d5 93	jmp $93d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9261						ClearSystem:
.9261		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9263		85 36		sta $36				sta 	0+zTemp0
.9265		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9267		85 37		sta $37				sta 	1+zTemp0
.9269						_ClearZeroLoop:
.9269		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.926b		f0 24		beq $9291			beq 	_ClearZeroEnd
.926d		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.926f		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9271						_ClearOneVariable:
.9271		91 36		sta ($36),y			sta 	(zTemp0),y
.9273		c8		iny				iny
.9274		c0 08		cpy #$08			cpy 	#8
.9276		d0 f9		bne $9271			bne 	_ClearOneVariable
.9278		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.927a		b1 36		lda ($36),y			lda 	(zTemp0),y
.927c		c9 18		cmp #$18			cmp 	#NSTProcedure
.927e		d0 04		bne $9284			bne 	_ClearNotProcedure
.9280		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9282		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9284						_ClearNotProcedure:
.9284		18		clc				clc 								; go to the next variable
.9285		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.9287		65 36		adc $36				adc 	zTemp0
.9289		85 36		sta $36				sta 	zTemp0
.928b		90 dc		bcc $9269			bcc 	_ClearZeroLoop
.928d		e6 37		inc $37				inc 	zTemp0+1
.928f		80 d8		bra $9269			bra 	_ClearZeroLoop
.9291						_ClearZeroEnd:
.9291		18		clc				clc
.9292		a5 36		lda $36				lda 	zTemp0
.9294		69 01		adc #$01			adc 	#1
.9296		8d 28 04	sta $0428			sta 	lowMemPtr
.9299		a5 37		lda $37				lda 	zTemp0+1
.929b		69 00		adc #$00			adc 	#0
.929d		8d 29 04	sta $0429			sta 	lowMemPtr+1
.92a0		20 f6 b4	jsr $b4f6			jsr 	StackReset
.92a3		20 5c b5	jsr $b55c			jsr 	StringSystemInitialise
.92a6		20 bf 92	jsr $92bf			jsr 	ProcedureScan
.92a9		20 5d 8f	jsr $8f5d			jsr 	Command_Restore
.92ac		9c 3a 04	stz $043a			stz 	AssemblerAddress
.92af		9c 3b 04	stz $043b			stz 	AssemblerAddress+1
.92b2		9c 3c 04	stz $043c			stz 	AssemblerControl
.92b5		9c 7d 06	stz $067d			stz 	KeyboardQueueEntries
.92b8		20 15 9f	jsr $9f15			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.92bb		20 3b a9	jsr $a93b			jsr 	ResetBitmapSpritesTiles
.92be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.92bf						ProcedureScan:
.92bf		20 74 8f	jsr $8f74			jsr 	SwapDataCodePtrs 			; swap code and data
.92c2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92c4		85 30		sta $30				sta 	codePtr
.92c6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92c8		85 31		sta $31				sta 	codePtr+1
.92ca						_PSLoop:
.92ca		b2 30		lda ($30)			lda 	(codePtr)
.92cc		f0 42		beq $9310			beq 	_PSExit
.92ce		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.92d0		b1 30		lda ($30),y			lda 	(codePtr),y
.92d2		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.92d4		d0 2d		bne $9303			bne 	_PSNext
.92d6		c8		iny				iny 								; get the address of the record to zTemp0 and
.92d7		b1 30		lda ($30),y			lda 	(codePtr),y
.92d9		29 c0		and #$c0			and 	#$C0
.92db		c9 40		cmp #$40			cmp 	#$40
.92dd		d0 35		bne $9314			bne 	_PSSyntax
.92df		b1 30		lda ($30),y			lda 	(codePtr),y
.92e1		18		clc				clc
.92e2		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92e4		85 37		sta $37				sta 	zTemp0+1
.92e6		c8		iny				iny 								; LSB
.92e7		b1 30		lda ($30),y			lda 	(codePtr),y
.92e9		85 36		sta $36				sta 	zTemp0
.92eb		c8		iny				iny 								; character after variable call.
.92ec		98		tya				tya 								; save Y offset at +7 (exponent slot)
.92ed		a0 07		ldy #$07			ldy 	#7
.92ef		91 36		sta ($36),y			sta 	(zTemp0),y
.92f1		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92f3		a0 02		ldy #$02			ldy 	#2
.92f5		91 36		sta ($36),y			sta 	(zTemp0),y
.92f7		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.92f9						_PSCopy:
.92f9		b5 30		lda $30,x			lda 	safePtr,x
.92fb		c8		iny				iny
.92fc		91 36		sta ($36),y			sta 	(zTemp0),y
.92fe		e8		inx				inx
.92ff		e0 04		cpx #$04			cpx 	#4
.9301		d0 f6		bne $92f9			bne 	_PSCopy
.9303						_PSNext:
.9303		18		clc				clc
.9304		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9306		65 30		adc $30				adc 	codePtr
.9308		85 30		sta $30				sta 	codePtr
.930a		90 02		bcc $930e			bcc 	_CREExit
.930c		e6 31		inc $31				inc 	codePtr+1 					; carry
.930e						_CREExit:
.930e		80 ba		bra $92ca			bra 	_PSLoop
.9310						_PSExit:
.9310		20 74 8f	jsr $8f74			jsr 	SwapDataCodePtrs 			; swap code and data
.9313		60		rts				rts
.9314						_PSSyntax:
.9314		4c ad a4	jmp $a4ad			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9317						ScanForward:
.9317		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9319		86 37		stx $37				stx 	zTemp0+1
.931b		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.931d						_ScanLoop:
.931d		b1 30		lda ($30),y			lda 	(codePtr),y
.931f		c8		iny				iny
.9320		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9322		d0 0e		bne $9332			bne 	_ScanGoNext
.9324		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9326		f0 04		beq $932c			beq 	_ScanMatch
.9328		c5 37		cmp $37				cmp 	zTemp0+1
.932a		d0 06		bne $9332			bne 	_ScanGoNext
.932c						_ScanMatch:
.932c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.932e		d0 01		bne $9331			bne 	_ScanNotEndEOL
.9330		88		dey				dey
.9331						_ScanNotEndEOL:
.9331		60		rts				rts
.9332						_ScanGoNext:
.9332		20 37 93	jsr $9337			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9335		80 e6		bra $931d			bra 	_ScanLoop
.9337						ScanForwardOne:
.9337		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9339		90 3e		bcc $9379			bcc 	_SFWExit
.933b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.933d		90 18		bcc $9357			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.933f		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9341		b0 2f		bcs $9372			bcs 	_ScanSkipData
.9343		c9 ae		cmp #$ae			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9345		90 32		bcc $9379			bcc 	_SFWExit 					; if not, ordinary keywords.
.9347		c9 b9		cmp #$b9			cmp 	#KWC_LAST_STRUCTURE+1
.9349		b0 2e		bcs $9379			bcs 	_SFWExit
.934b		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.934d		c9 b3		cmp #$b3			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.934f		b0 28		bcs $9379			bcs 	_SFWExit
.9351		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9353		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9355		80 22		bra $9379			bra 	_SFWExit
.9357						_ScanSkipOne:
.9357		c8		iny				iny 								; consume the extra one.
.9358		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.935a		d0 1d		bne $9379			bne 	_SFWExit
.935c		18		clc				clc
.935d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.935f		65 30		adc $30				adc 	codePtr
.9361		85 30		sta $30				sta 	codePtr
.9363		90 02		bcc $9367			bcc 	_CREExit
.9365		e6 31		inc $31				inc 	codePtr+1 					; carry
.9367						_CREExit:
.9367		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9369		b2 30		lda ($30)			lda 	(codePtr)
.936b		d0 0c		bne $9379			bne 	_SFWExit 					; if not zero, more to scan
.936d		a9 13		lda #$13		lda	#19
.936f		4c d5 93	jmp $93d5		jmp	ErrorHandler
.9372						_ScanSkipData:
.9372		88		dey				dey 								; point at data token
.9373		c8		iny				iny 								; point to offset
.9374		98		tya				tya 								; A = offset position
.9375		38		sec				sec 								; add size +1 hence SEC
.9376		71 30		adc ($30),y			adc 	(codePtr),y
.9378		a8		tay				tay 								; make current position.
.9379						_SFWExit:
.9379		60		rts				rts
.937a						ScanGetCurrentLineStep:
.937a		64 38		stz $38				stz 	zTemp1
.937c		a0 03		ldy #$03			ldy 	#3
.937e						_SGCLSLoop:
.937e		b1 30		lda ($30),y			lda 	(codePtr),y
.9380		c8		iny				iny
.9381		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9383		f0 05		beq $938a			beq 	_SGCLSExit
.9385		20 37 93	jsr $9337			jsr 	ScanForwardOne
.9388		80 f4		bra $937e			bra 	_SGCLSLoop
.938a						_SGCLSExit:
.938a		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.938c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.938d						Command_WHILE:
.938d		5a		phy				phy 								; save position of the test
.938e		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9390		20 83 a2	jsr $a283			jsr 	EvaluateNumber
.9393		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; check if zero
.9396		f0 0e		beq $93a6			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9398		98		tya				tya 								; position *after* test.
.9399		7a		ply				ply 								; restore position before test, at WHILE
.939a		88		dey				dey 								; so we execute the WHILE command again.
.939b		48		pha				pha 								; push after test on the stack
.939c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.939e		20 90 b4	jsr $b490			jsr 	StackOpen
.93a1		20 d5 b4	jsr $b4d5			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.93a4		7a		ply				ply 								; restore the position *after* the test
.93a5		60		rts				rts
.93a6						_WHExitLoop:
.93a6		68		pla				pla 								; throw post loop position
.93a7		a9 b8		lda #$b8			lda 	#KWD_WEND 					; scan forward past WEND
.93a9		aa		tax				tax
.93aa		20 17 93	jsr $9317			jsr 	ScanForward
.93ad		60		rts				rts
.93ae						Command_WEND:
.93ae		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.93b0		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.93b2		20 bd b4	jsr $b4bd			jsr 	StackCheckFrame
.93b5		20 e6 b4	jsr $b4e6			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.93b8		20 af b4	jsr $b4af			jsr 	StackClose		 			; erase the frame
.93bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.93bc						CheckRightBracket:
.93bc		b1 30		lda ($30),y			lda 	(codePtr),y
.93be		c8		iny				iny
.93bf		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.93c1		d0 0f		bne $93d2			bne 	CNAFail
.93c3		60		rts				rts
.93c4						CheckComma:
.93c4		b1 30		lda ($30),y			lda 	(codePtr),y
.93c6		c8		iny				iny
.93c7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.93c9		d0 07		bne $93d2			bne 	CNAFail
.93cb		60		rts				rts
.93cc						CheckNextA:
.93cc		d1 30		cmp ($30),y			cmp 	(codePtr),y
.93ce		d0 02		bne $93d2			bne 	CNAFail
.93d0		c8		iny				iny 								; skip character
.93d1		60		rts				rts 								; and exit
.93d2						CNAFail:
.93d2		4c ad a4	jmp $a4ad			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.93d5						ErrorHandler:
.93d5		48		pha				pha 								; save error #
.93d6		a8		tay				tay 								; find the error text
.93d7		f0 4e		beq $9427			beq 	_EHEnd
.93d9		a2 00		ldx #$00			ldx 	#0
.93db		a9 c6		lda #$c6			lda 	#((ErrorText) & $FF)
.93dd		85 36		sta $36				sta 	0+zTemp0
.93df		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.93e1		85 37		sta $37				sta 	1+zTemp0
.93e3						_EHFind:
.93e3		88		dey				dey 								; keep looking through text
.93e4		f0 0e		beq $93f4			beq 	_EHFound
.93e6						_EHFindZero:
.93e6		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.93e8		e6 36		inc $36				inc 	zTemp0
.93ea		d0 02		bne $93ee			bne 	_EHFNoCarry
.93ec		e6 37		inc $37				inc 	zTemp0+1
.93ee						_EHFNoCarry:
.93ee		c9 00		cmp #$00			cmp 	#0
.93f0		d0 f4		bne $93e6			bne 	_EHFindZero
.93f2		80 ef		bra $93e3			bra 	_EHFind
.93f4						_EHFound:
.93f4		a5 36		lda $36				lda 	zTemp0 						; print message
.93f6		a6 37		ldx $37				ldx 	zTemp0+1
.93f8		20 34 94	jsr $9434			jsr 	PrintStringXA
.93fb		68		pla				pla  								; check if error is 'open structure'
.93fc		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.93fe		f0 22		beq $9422			beq 	_EHCREnd
.9400		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9402		b1 30		lda ($30),y			lda 	(codePtr),y
.9404		d0 05		bne $940b			bne 	_EHAtMsg
.9406		c8		iny				iny
.9407		b1 30		lda ($30),y			lda 	(codePtr),y
.9409		f0 17		beq $9422			beq 	_EHCREnd
.940b						_EHAtMsg:
.940b		a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.940d		a9 2a		lda #$2a			lda 	#_AtMsg & $FF
.940f		20 34 94	jsr $9434			jsr 	PrintStringXA
.9412		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9414		b1 30		lda ($30),y			lda 	(codePtr),y
.9416		48		pha				pha
.9417		c8		iny				iny
.9418		b1 30		lda ($30),y			lda 	(codePtr),y
.941a		aa		tax				tax
.941b		68		pla				pla
.941c		20 4a 98	jsr $984a			jsr 	ConvertInt16 				; convert XA to string
.941f		20 34 94	jsr $9434			jsr 	PrintStringXA 				; and print it.
.9422						_EHCREnd:
.9422		a9 0d		lda #$0d			lda 	#13 						; new line
.9424		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9427						_EHEnd:
.9427		4c 0f 88	jmp $880f			jmp 	WarmStart
>942a		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9432		20 00
.9434						PrintStringXA:
.9434		5a		phy				phy
.9435		86 37		stx $37				stx 	zTemp0+1
.9437		85 36		sta $36				sta 	zTemp0
.9439		a0 00		ldy #$00			ldy 	#0
.943b						_PSXALoop:
.943b		b1 36		lda ($36),y			lda 	(zTemp0),y
.943d		f0 06		beq $9445			beq 	_PSXAExit
.943f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9442		c8		iny				iny
.9443		80 f6		bra $943b			bra 	_PSXALoop
.9445						_PSXAExit:
.9445		7a		ply				ply
.9446		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9447						UnaryTrue:
.9447		fa		plx				plx
.9448						ReturnTrue:
.9448		a9 01		lda #$01			lda 	#1  						; set to 1
.944a		20 37 a3	jsr $a337			jsr 	NSMSetByte
.944d		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.944f		95 50		sta $50,x			sta 	NSStatus,x
.9451		60		rts				rts
.9452						UnaryFalse:
.9452		fa		plx				plx
.9453						ReturnFalse:
.9453		4c 35 a3	jmp $a335			jmp 	NSMSetZero 					; set it all to zero
.9456						BinaryCompareEqual:
.9456		fa		plx				plx
.9457		20 92 94	jsr $9492			jsr 	CompareBaseCode
.945a		c9 00		cmp #$00			cmp 	#0
.945c		f0 ea		beq $9448			beq 	ReturnTrue
.945e		80 f3		bra $9453			bra 	ReturnFalse
.9460						BinaryCompareLess:
.9460		fa		plx				plx
.9461		20 92 94	jsr $9492			jsr 	CompareBaseCode
.9464		c9 ff		cmp #$ff			cmp 	#$FF
.9466		f0 e0		beq $9448			beq 	ReturnTrue
.9468		80 e9		bra $9453			bra 	ReturnFalse
.946a						BinaryCompareGreater:
.946a		fa		plx				plx
.946b		20 92 94	jsr $9492			jsr 	CompareBaseCode
.946e		c9 01		cmp #$01			cmp 	#1
.9470		f0 d6		beq $9448			beq 	ReturnTrue
.9472		80 df		bra $9453			bra 	ReturnFalse
.9474						BinaryCompareNotEqual:
.9474		fa		plx				plx
.9475		20 92 94	jsr $9492			jsr 	CompareBaseCode
.9478		c9 00		cmp #$00			cmp 	#0
.947a		d0 cc		bne $9448			bne 	ReturnTrue
.947c		80 d5		bra $9453			bra 	ReturnFalse
.947e						BinaryCompareLessEqual:
.947e		fa		plx				plx
.947f		20 92 94	jsr $9492			jsr 	CompareBaseCode
.9482		c9 01		cmp #$01			cmp 	#1
.9484		d0 c2		bne $9448			bne 	ReturnTrue
.9486		80 cb		bra $9453			bra 	ReturnFalse
.9488						BinaryCompareGreaterEqual:
.9488		fa		plx				plx
.9489		20 92 94	jsr $9492			jsr 	CompareBaseCode
.948c		c9 ff		cmp #$ff			cmp 	#$FF
.948e		d0 b8		bne $9448			bne 	ReturnTrue
.9490		80 c1		bra $9453			bra 	ReturnFalse
.9492						CompareBaseCode:
.9492		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; make both values if references.
.9495		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9497		15 51		ora $51,x			ora 	NSStatus+1,x
.9499		29 10		and #$10			and 	#NSTString
.949b		d0 37		bne $94d4			bne 	_CBCString 					; if so do string code, which will check if both.
.949d		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.949f		15 79		ora $79,x			ora 	NSExponent+1,x
.94a1		d0 34		bne $94d7			bne 	_CBCFloat
.94a3		b5 50		lda $50,x			lda 	NSStatus,x
.94a5		15 51		ora $51,x			ora 	NSStatus+1,x
.94a7		29 08		and #$08			and 	#NSTFloat
.94a9		d0 2c		bne $94d7			bne 	_CBCFloat
.94ab		20 da 94	jsr $94da			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.94ae		e8		inx				inx
.94af		20 da 94	jsr $94da			jsr 	CompareFixMinusZero
.94b2		ca		dex				dex
.94b3		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.94b5		55 51		eor $51,x			eor 	NSStatus+1,x
.94b7		10 0a		bpl $94c3			bpl 	_CDCSameSign
.94b9		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.94bb		30 14		bmi $94d1			bmi 	_CBCLess 					; return $FF
.94bd						_CBCGreater:
.94bd		a9 01		lda #$01			lda 	#1
.94bf		60		rts				rts
.94c0						_CBCEqual:
.94c0		a9 00		lda #$00			lda 	#0
.94c2		60		rts				rts
.94c3						_CDCSameSign:
.94c3		20 ef 96	jsr $96ef			jsr 	SubTopTwoStack 				; unsigned subtract
.94c6		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; or the mantissa together
.94c9		f0 f5		beq $94c0			beq 	_CBCEqual 					; -0 == 0
.94cb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.94cd		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.94cf		10 ec		bpl $94bd			bpl 	_CBCGreater
.94d1						_CBCLess:
.94d1		a9 ff		lda #$ff			lda 	#$FF
.94d3		60		rts				rts
.94d4						_CBCString:
.94d4		4c 60 96	jmp $9660			jmp 	CompareStrings
.94d7						_CBCFloat:
.94d7		4c aa 99	jmp $99aa			jmp 	CompareFloat
.94da						CompareFixMinusZero:
.94da		20 57 a3	jsr $a357			jsr 	NSMIsZero
.94dd		d0 02		bne $94e1			bne 	_CFXMZNotZero
.94df		74 50		stz $50,x			stz 	NSStatus,x
.94e1						_CFXMZNotZero:
.94e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94e2						StringConcat:
.94e2		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.94e4		35 51		and $51,x			and 	NSStatus+1,x
.94e6		29 18		and #$18			and 	#NSBTypeMask
.94e8		c9 10		cmp #$10			cmp 	#NSTString
.94ea		d0 50		bne $953c			bne		_SCType
.94ec		64 38		stz $38				stz 	zTemp1 						; counting total length
.94ee		e8		inx				inx
.94ef		20 0d 95	jsr $950d			jsr 	_SCSetupZ0 					; setup for second
.94f2		20 16 95	jsr $9516			jsr 	_SCLengthZ0 				; length for second
.94f5		ca		dex				dex
.94f6		20 0d 95	jsr $950d			jsr 	_SCSetupZ0 					; setup for first
.94f9		20 16 95	jsr $9516			jsr 	_SCLengthZ0 				; length for first
.94fc		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.94fe		20 80 b5	jsr $b580			jsr 	StringTempAllocate
.9501		20 2d 95	jsr $952d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9504		e8		inx				inx
.9505		20 0d 95	jsr $950d			jsr 	_SCSetupZ0 					; copy second out
.9508		20 2d 95	jsr $952d			jsr 	_SCCopy
.950b		ca		dex				dex
.950c		60		rts				rts
.950d						_SCSetupZ0:
.950d		b5 58		lda $58,x			lda 	NSMantissa0,x
.950f		85 36		sta $36				sta 	zTemp0
.9511		b5 60		lda $60,x			lda 	NSMantissa1,x
.9513		85 37		sta $37				sta 	zTemp0+1
.9515		60		rts				rts
.9516						_SCLengthZ0:
.9516		5a		phy				phy
.9517		a0 00		ldy #$00			ldy 	#0
.9519						_SCLenLoop:
.9519		b1 36		lda ($36),y			lda 	(zTemp0),y
.951b		f0 0e		beq $952b			beq 	_SCLExit
.951d		c8		iny				iny
.951e		e6 38		inc $38				inc 	zTemp1
.9520		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9522		c9 fd		cmp #$fd			cmp 	#253
.9524		d0 f3		bne $9519			bne		_SCLenLoop
.9526		a9 09		lda #$09		lda	#9
.9528		4c d5 93	jmp $93d5		jmp	ErrorHandler
.952b						_SCLExit:
.952b		7a		ply				ply
.952c		60		rts				rts
.952d						_SCCopy:
.952d		5a		phy				phy
.952e		a0 00		ldy #$00			ldy 	#0
.9530						_SCCopyLoop:
.9530		b1 36		lda ($36),y			lda 	(zTemp0),y
.9532		f0 06		beq $953a			beq 	_SCCExit
.9534		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.9537		c8		iny				iny
.9538		80 f6		bra $9530			bra 	_SCCopyLoop
.953a						_SCCExit:
.953a		7a		ply				ply
.953b		60		rts				rts
.953c						_SCType:
.953c		4c b7 a4	jmp $a4b7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.953f						IntegerDivide:
.953f		fa		plx				plx
.9540		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9542		15 51		ora $51,x			ora 	NSStatus+1,x
.9544		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9545		0a		asl a				asl 	a
.9546		10 05		bpl $954d			bpl 	_NotRef
.9548		48		pha				pha
.9549		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.954c		68		pla				pla
.954d						_NotRef:
.954d		0a		asl a				asl 	a
.954e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9550		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9552		15 79		ora $79,x			ora 	NSExponent+1,x
.9554		f0 03		beq $9559			beq 	_IntegerCode 				; if clear, then we have two integers
.9556		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.9559						_IntegerCode:
.9559		20 73 95	jsr $9573			jsr 	CheckDivideZero 			; do div zero check
.955c		20 a5 95	jsr $95a5			jsr 	Int32Divide 				; do the division
.955f		20 56 96	jsr $9656			jsr 	CalculateSign 				; calculate result sign
.9562						NSMCopyPlusTwoToZero:
.9562		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9564		95 58		sta $58,x			sta 	NSMantissa0,x
.9566		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9568		95 60		sta $60,x			sta 	NSMantissa1,x
.956a		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.956c		95 68		sta $68,x			sta 	NSMantissa2,x
.956e		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9570		95 70		sta $70,x			sta 	NSMantissa3,x
.9572		60		rts				rts
.9573						CheckDivideZero:
.9573		e8		inx				inx
.9574		20 57 a3	jsr $a357			jsr 	NSMIsZero
.9577		f0 02		beq $957b			beq 	_CDVError
.9579		ca		dex				dex
.957a		60		rts				rts
.957b						_CDVError:
.957b		a9 03		lda #$03		lda	#3
.957d		4c d5 93	jmp $93d5		jmp	ErrorHandler
.9580						IntegerModulus:
.9580		fa		plx				plx
.9581		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9583		15 51		ora $51,x			ora 	NSStatus+1,x
.9585		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9586		0a		asl a				asl 	a
.9587		10 05		bpl $958e			bpl 	_NotRef
.9589		48		pha				pha
.958a		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.958d		68		pla				pla
.958e						_NotRef:
.958e		0a		asl a				asl 	a
.958f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9591		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9593		15 79		ora $79,x			ora 	NSExponent+1,x
.9595		f0 03		beq $959a			beq 	_IntegerCode 				; if clear, then we have two integers
.9597		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.959a						_IntegerCode:
.959a						IntegerModulusNoCheck:
.959a		20 73 95	jsr $9573			jsr 	CheckDivideZero 			; do div zero check
.959d		20 a5 95	jsr $95a5			jsr 	Int32Divide 				; do the division
.95a0		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.95a2		56 50		lsr $50,x			lsr 	NSStatus,x
.95a4		60		rts				rts
.95a5						Int32Divide:
.95a5		48		pha				pha 								; save AXY
.95a6		5a		phy				phy
.95a7		20 18 a3	jsr $a318			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95aa		20 31 a3	jsr $a331			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.95ad		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.95af						_I32DivideLoop:
.95af		e8		inx				inx
.95b0		e8		inx				inx
.95b1		20 44 a3	jsr $a344			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.95b4		ca		dex				dex
.95b5		ca		dex				dex
.95b6		20 45 a3	jsr $a345			jsr 	NSMRotateLeft
.95b9		20 e4 95	jsr $95e4			jsr 	DivideCheckSubtract 		; check if subtract possible
.95bc		90 02		bcc $95c0			bcc 	_I32DivideNoCarryIn
.95be		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.95c0						_I32DivideNoCarryIn:
.95c0		88		dey				dey 								; loop round till division completed.
.95c1		d0 ec		bne $95af			bne 	_I32DivideLoop
.95c3		7a		ply				ply 								; restore AXY and exit
.95c4		68		pla				pla
.95c5		60		rts				rts
.95c6						Int32ShiftDivide:
.95c6		48		pha				pha 								; save AY
.95c7		5a		phy				phy
.95c8		e8		inx				inx 								; clear S[X+2]
.95c9		e8		inx				inx
.95ca		20 35 a3	jsr $a335			jsr 	NSMSetZero
.95cd		ca		dex				dex
.95ce		ca		dex				dex
.95cf		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.95d1						_I32SDLoop:
.95d1		20 e4 95	jsr $95e4			jsr 	DivideCheckSubtract 		; check if subtract possible
.95d4		e8		inx				inx
.95d5		e8		inx				inx
.95d6		20 45 a3	jsr $a345			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.95d9		ca		dex				dex
.95da		ca		dex				dex
.95db		20 45 a3	jsr $a345			jsr 	NSMRotateLeft
.95de		88		dey				dey 	 							; do 31 times
.95df		d0 f0		bne $95d1			bne 	_I32SDLoop
.95e1		7a		ply				ply 								; restore AY and exit
.95e2		68		pla				pla
.95e3		60		rts				rts
.95e4						DivideCheckSubtract:
.95e4		20 ef 96	jsr $96ef			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.95e7		b0 04		bcs $95ed			bcs 	_DCSExit 					; if carry set, then could do, exit
.95e9		20 d5 96	jsr $96d5			jsr 	AddTopTwoStack 				; add it back in
.95ec		18		clc				clc 								; and return False
.95ed						_DCSExit:
.95ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95ee						MulInteger:
.95ee		fa		plx				plx
.95ef		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95f1		15 51		ora $51,x			ora 	NSStatus+1,x
.95f3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95f4		0a		asl a				asl 	a
.95f5		10 05		bpl $95fc			bpl 	_NotRef
.95f7		48		pha				pha
.95f8		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95fb		68		pla				pla
.95fc						_NotRef:
.95fc		0a		asl a				asl 	a 							; put MSB of type into A:7
.95fd		30 09		bmi $9608			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95ff		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9601		15 79		ora $79,x			ora 	NSExponent+1,x
.9603		f0 06		beq $960b			beq 	_IntegerCode 				; if clear, then we have two integers
.9605		4c 6c 9a	jmp $9a6c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9608						_StringData:
.9608		4c c1 a4	jmp $a4c1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.960b						_IntegerCode:
.960b		20 18 96	jsr $9618			jsr 	MultiplyShort
.960e		c9 00		cmp #$00			cmp 	#0
.9610		f0 05		beq $9617			beq 	_MIExit
.9612		a9 04		lda #$04		lda	#4
.9614		4c d5 93	jmp $93d5		jmp	ErrorHandler
.9617						_MIExit:
.9617		60		rts				rts
.9618						MultiplyShort:
.9618		5a		phy				phy 								; save Y
.9619		20 18 a3	jsr $a318			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.961c		20 31 a3	jsr $a331			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.961f		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9621						_I32MLoop:
.9621		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9623		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9625		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9627		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9629		f0 25		beq $9650			beq 	_I32MExit 					; exit if zero
.962b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.962d		29 01		and #$01			and 	#1
.962f		f0 0d		beq $963e			beq 	_I32MNoAdd
.9631		20 d5 96	jsr $96d5			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9634		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9636		10 06		bpl $963e			bpl 	_I32MNoAdd
.9638						_I32ShiftRight:
.9638		20 4e a3	jsr $a34e			jsr 	NSMShiftRight 				; shift S[X] right
.963b		c8		iny				iny 								; increment shift count
.963c		80 09		bra $9647			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.963e						_I32MNoAdd:
.963e		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9640		70 f6		bvs $9638			bvs 	_I32ShiftRight 				; instead.
.9642		e8		inx				inx
.9643		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9646		ca		dex				dex
.9647						_I32MShiftUpper:
.9647		e8		inx				inx 								; shift S[X+2] right
.9648		e8		inx				inx
.9649		20 4e a3	jsr $a34e			jsr 	NSMShiftRight
.964c		ca		dex				dex
.964d		ca		dex				dex
.964e		80 d1		bra $9621			bra 	_I32MLoop 					; try again.
.9650						_I32MExit:
.9650		20 56 96	jsr $9656			jsr 	CalculateSign
.9653		98		tya				tya 								; shift in A
.9654		7a		ply				ply 								; restore Y and exit
.9655		60		rts				rts
.9656						CalculateSign:
.9656		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9658		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.965a		55 51		eor $51,x			eor 	NSStatus+1,x
.965c		0a		asl a				asl 	a 							; shift bit 7 into carry
.965d		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.965f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9660						CompareStrings:
.9660		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9662		35 51		and $51,x			and 	NSStatus+1,x
.9664		29 10		and #$10			and 	#NSBIsString
.9666		f0 28		beq $9690			beq 	_CSTypeError
.9668		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.966a		85 36		sta $36				sta 	zTemp0
.966c		b5 60		lda $60,x			lda 	NSMantissa1,x
.966e		85 37		sta $37				sta 	zTemp0+1
.9670		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9672		85 38		sta $38				sta 	zTemp1
.9674		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9676		85 39		sta $39				sta 	zTemp1+1
.9678		5a		phy				phy 								; save Y so we can access strings
.9679		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.967b						_CSLoop:
.967b		c8		iny				iny
.967c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.967e		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9680		d0 06		bne $9688			bne 	_CSDifferent
.9682		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9684		d0 f5		bne $967b			bne 	_CSLoop 					; still comparing
.9686						_CSExit:
.9686		7a		ply				ply 								; reached end, return zero in A from EOS
.9687		60		rts				rts
.9688						_CSDifferent:
.9688		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.968a		90 fa		bcc $9686			bcc		_CSExit
.968c		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.968e		80 f6		bra $9686			bra 	_CSExit
.9690						_CSTypeError:
.9690		4c b7 a4	jmp $a4b7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9693						ShiftLeft:
.9693		38		sec				sec 								; common code, carry determines which way.
.9694		80 01		bra $9697			bra 	ShiftMain
.9696						ShiftRight:
.9696		18		clc				clc
.9697						ShiftMain:
.9697		fa		plx				plx 								; restore X
.9698		08		php				php 								; save direction
.9699		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.969b		15 51		ora $51,x			ora 	NSStatus+1,x
.969d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.969e		0a		asl a				asl 	a
.969f		10 05		bpl $96a6			bpl 	_NotRef
.96a1		48		pha				pha
.96a2		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96a5		68		pla				pla
.96a6						_NotRef:
.96a6		0a		asl a				asl 	a
.96a7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96a9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96ab		15 79		ora $79,x			ora 	NSExponent+1,x
.96ad		f0 03		beq $96b2			beq 	_IntegerCode 				; if clear, then we have two integers
.96af		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.96b2						_IntegerCode:
.96b2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.96b4		29 e0		and #$e0			and 	#$E0
.96b6		15 61		ora $61,x			ora 	NSMantissa1+1,x
.96b8		15 69		ora $69,x			ora 	NSMantissa2+1,x
.96ba		15 71		ora $71,x			ora 	NSMantissa3+1,x
.96bc		d0 12		bne $96d0			bne 	_SMExit0 					; if >= 32 it will always return zero.
.96be						_SMLoop:
.96be		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.96c0		30 11		bmi $96d3			bmi 	_SMExit 					; exit if done.
.96c2		28		plp				plp 								; restore direction setting
.96c3		08		php				php
.96c4		90 05		bcc $96cb			bcc 	_SMRight
.96c6		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; shift left if CS
.96c9		80 f3		bra $96be			bra 	_SMLoop
.96cb						_SMRight:
.96cb		20 4e a3	jsr $a34e			jsr 	NSMShiftRight 				; shift right if CC
.96ce		80 ee		bra $96be			bra 	_SMLoop
.96d0						_SMExit0:
.96d0		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; return zero.
.96d3						_SMExit:
.96d3		28		plp				plp 								; throw direction
.96d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.96d5						AddTopTwoStack:
.96d5		18		clc				clc
.96d6		b5 58		lda $58,x			lda		NSMantissa0,x
.96d8		75 59		adc $59,x			adc 		NSMantissa0+1,x
.96da		95 58		sta $58,x			sta 	NSMantissa0,x
.96dc		b5 60		lda $60,x			lda		NSMantissa1,x
.96de		75 61		adc $61,x			adc 		NSMantissa1+1,x
.96e0		95 60		sta $60,x			sta 	NSMantissa1,x
.96e2		b5 68		lda $68,x			lda		NSMantissa2,x
.96e4		75 69		adc $69,x			adc 		NSMantissa2+1,x
.96e6		95 68		sta $68,x			sta 	NSMantissa2,x
.96e8		b5 70		lda $70,x			lda		NSMantissa3,x
.96ea		75 71		adc $71,x			adc 		NSMantissa3+1,x
.96ec		95 70		sta $70,x			sta 	NSMantissa3,x
.96ee		60		rts				rts
.96ef						SubTopTwoStack:
.96ef		38		sec				sec
.96f0		b5 58		lda $58,x			lda		NSMantissa0,x
.96f2		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.96f4		95 58		sta $58,x			sta 	NSMantissa0,x
.96f6		b5 60		lda $60,x			lda		NSMantissa1,x
.96f8		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.96fa		95 60		sta $60,x			sta 	NSMantissa1,x
.96fc		b5 68		lda $68,x			lda		NSMantissa2,x
.96fe		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9700		95 68		sta $68,x			sta 	NSMantissa2,x
.9702		b5 70		lda $70,x			lda		NSMantissa3,x
.9704		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9706		95 70		sta $70,x			sta 	NSMantissa3,x
.9708		60		rts				rts
.9709						AddInteger:
.9709		fa		plx				plx
.970a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.970c		15 51		ora $51,x			ora 	NSStatus+1,x
.970e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.970f		0a		asl a				asl 	a
.9710		10 05		bpl $9717			bpl 	_NotRef
.9712		48		pha				pha
.9713		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9716		68		pla				pla
.9717						_NotRef:
.9717		0a		asl a				asl 	a 							; put MSB of type into A:7
.9718		30 09		bmi $9723			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.971a		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.971c		15 79		ora $79,x			ora 	NSExponent+1,x
.971e		f0 06		beq $9726			beq 	_IntegerCode 				; if clear, then we have two integers
.9720		4c 1c 99	jmp $991c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9723						_StringData:
.9723		4c e2 94	jmp $94e2			jmp 	StringConcat							; at least one string - don't know both are strings.
.9726						_IntegerCode:
.9726						AddCode:
.9726		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9728		55 51		eor $51,x			eor 	NSStatus+1,x
.972a		10 a9		bpl $96d5			bpl 	AddTopTwoStack
.972c		20 ef 96	jsr $96ef			jsr 	SubTopTwoStack 				; do a physical subtraction
.972f		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9731		10 07		bpl $973a			bpl 	_AddExit
.9733		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9735		95 50		sta $50,x			sta 	NSStatus,x
.9737		20 fe a2	jsr $a2fe			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.973a						_AddExit:
.973a		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; check for -0
.973d		d0 02		bne $9741			bne 	_AddNonZero
.973f		74 50		stz $50,x			stz 	NSStatus,x
.9741						_AddNonZero:
.9741		60		rts				rts
.9742						SubInteger:
.9742		fa		plx				plx
.9743		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9745		15 51		ora $51,x			ora 	NSStatus+1,x
.9747		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9748		0a		asl a				asl 	a
.9749		10 05		bpl $9750			bpl 	_NotRef
.974b		48		pha				pha
.974c		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.974f		68		pla				pla
.9750						_NotRef:
.9750		0a		asl a				asl 	a 							; put MSB of type into A:7
.9751		30 09		bmi $975c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9753		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9755		15 79		ora $79,x			ora 	NSExponent+1,x
.9757		f0 06		beq $975f			beq 	_IntegerCode 				; if clear, then we have two integers
.9759		4c 21 99	jmp $9921			jmp 	FloatingPointSub 							; otherwise at least one float.
.975c						_StringData:
.975c		4c c1 a4	jmp $a4c1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.975f						_IntegerCode:
.975f		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9761		49 80		eor #$80			eor 	#$80
.9763		95 51		sta $51,x			sta 	NSStatus+1,x
.9765		80 bf		bra $9726			bra 	AddCode 					; and do the same code as add.
.9767						AndInteger:
.9767		fa		plx				plx
.9768		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.976a		15 51		ora $51,x			ora 	NSStatus+1,x
.976c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.976d		0a		asl a				asl 	a
.976e		10 05		bpl $9775			bpl 	_NotRef
.9770		48		pha				pha
.9771		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9774		68		pla				pla
.9775						_NotRef:
.9775		0a		asl a				asl 	a
.9776		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9778		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.977a		15 79		ora $79,x			ora 	NSExponent+1,x
.977c		f0 03		beq $9781			beq 	_IntegerCode 				; if clear, then we have two integers
.977e		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.9781						_IntegerCode:
.9781		b5 58		lda $58,x			lda		NSMantissa0,x
.9783		35 59		and $59,x			and 		NSMantissa0+1,x
.9785		95 58		sta $58,x			sta 	NSMantissa0,x
.9787		b5 60		lda $60,x			lda		NSMantissa1,x
.9789		35 61		and $61,x			and 		NSMantissa1+1,x
.978b		95 60		sta $60,x			sta 	NSMantissa1,x
.978d		b5 68		lda $68,x			lda		NSMantissa2,x
.978f		35 69		and $69,x			and 		NSMantissa2+1,x
.9791		95 68		sta $68,x			sta 	NSMantissa2,x
.9793		b5 70		lda $70,x			lda		NSMantissa3,x
.9795		35 71		and $71,x			and 		NSMantissa3+1,x
.9797		95 70		sta $70,x			sta 	NSMantissa3,x
.9799		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.979b		60		rts				rts
.979c						OraInteger:
.979c		fa		plx				plx
.979d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.979f		15 51		ora $51,x			ora 	NSStatus+1,x
.97a1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97a2		0a		asl a				asl 	a
.97a3		10 05		bpl $97aa			bpl 	_NotRef
.97a5		48		pha				pha
.97a6		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97a9		68		pla				pla
.97aa						_NotRef:
.97aa		0a		asl a				asl 	a
.97ab		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97ad		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97af		15 79		ora $79,x			ora 	NSExponent+1,x
.97b1		f0 03		beq $97b6			beq 	_IntegerCode 				; if clear, then we have two integers
.97b3		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.97b6						_IntegerCode:
.97b6		b5 58		lda $58,x			lda		NSMantissa0,x
.97b8		15 59		ora $59,x			ora 		NSMantissa0+1,x
.97ba		95 58		sta $58,x			sta 	NSMantissa0,x
.97bc		b5 60		lda $60,x			lda		NSMantissa1,x
.97be		15 61		ora $61,x			ora 		NSMantissa1+1,x
.97c0		95 60		sta $60,x			sta 	NSMantissa1,x
.97c2		b5 68		lda $68,x			lda		NSMantissa2,x
.97c4		15 69		ora $69,x			ora 		NSMantissa2+1,x
.97c6		95 68		sta $68,x			sta 	NSMantissa2,x
.97c8		b5 70		lda $70,x			lda		NSMantissa3,x
.97ca		15 71		ora $71,x			ora 		NSMantissa3+1,x
.97cc		95 70		sta $70,x			sta 	NSMantissa3,x
.97ce		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97d0		60		rts				rts
.97d1						EorInteger:
.97d1		fa		plx				plx
.97d2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97d4		15 51		ora $51,x			ora 	NSStatus+1,x
.97d6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97d7		0a		asl a				asl 	a
.97d8		10 05		bpl $97df			bpl 	_NotRef
.97da		48		pha				pha
.97db		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97de		68		pla				pla
.97df						_NotRef:
.97df		0a		asl a				asl 	a
.97e0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97e2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97e4		15 79		ora $79,x			ora 	NSExponent+1,x
.97e6		f0 03		beq $97eb			beq 	_IntegerCode 				; if clear, then we have two integers
.97e8		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.97eb						_IntegerCode:
.97eb		b5 58		lda $58,x			lda		NSMantissa0,x
.97ed		55 59		eor $59,x			eor 		NSMantissa0+1,x
.97ef		95 58		sta $58,x			sta 	NSMantissa0,x
.97f1		b5 60		lda $60,x			lda		NSMantissa1,x
.97f3		55 61		eor $61,x			eor 		NSMantissa1+1,x
.97f5		95 60		sta $60,x			sta 	NSMantissa1,x
.97f7		b5 68		lda $68,x			lda		NSMantissa2,x
.97f9		55 69		eor $69,x			eor 		NSMantissa2+1,x
.97fb		95 68		sta $68,x			sta 	NSMantissa2,x
.97fd		b5 70		lda $70,x			lda		NSMantissa3,x
.97ff		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9801		95 70		sta $70,x			sta 	NSMantissa3,x
.9803		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9805		60		rts				rts
.9806						WordIndirect:
.9806		fa		plx				plx
.9807		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9809		15 51		ora $51,x			ora 	NSStatus+1,x
.980b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.980c		0a		asl a				asl 	a
.980d		10 05		bpl $9814			bpl 	_NotRef
.980f		48		pha				pha
.9810		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9813		68		pla				pla
.9814						_NotRef:
.9814		0a		asl a				asl 	a
.9815		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9817		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9819		15 79		ora $79,x			ora 	NSExponent+1,x
.981b		f0 03		beq $9820			beq 	_IntegerCode 				; if clear, then we have two integers
.981d		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.9820						_IntegerCode:
.9820		20 26 97	jsr $9726			jsr 	AddCode 					; add the two values
.9823		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9825		95 50		sta $50,x			sta 	NSStatus,x
.9827		60		rts				rts
.9828						ByteIndirect:
.9828		fa		plx				plx
.9829		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.982b		15 51		ora $51,x			ora 	NSStatus+1,x
.982d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.982e		0a		asl a				asl 	a
.982f		10 05		bpl $9836			bpl 	_NotRef
.9831		48		pha				pha
.9832		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9835		68		pla				pla
.9836						_NotRef:
.9836		0a		asl a				asl 	a
.9837		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9839		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.983b		15 79		ora $79,x			ora 	NSExponent+1,x
.983d		f0 03		beq $9842			beq 	_IntegerCode 				; if clear, then we have two integers
.983f		4c b7 a4	jmp $a4b7			jmp 	TypeError 					; anything else, type mismatch.
.9842						_IntegerCode:
.9842		20 26 97	jsr $9726			jsr 	AddCode 					; add the two values
.9845		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9847		95 50		sta $50,x			sta 	NSStatus,x
.9849		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.984a						ConvertInt16:
.984a		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.984c		86 60		stx $60				stx 	NSMantissa1
.984e		64 68		stz $68				stz 	NSMantissa2
.9850		64 70		stz $70				stz 	NSMantissa3
.9852		64 50		stz $50				stz 	NSStatus 					; positive integer
.9854		a2 00		ldx #$00			ldx 	#0 							; stack level
.9856		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9858		80 00		bra $985a			bra 	ConvertInt32
.985a						ConvertInt32:
.985a		5a		phy				phy
.985b		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.985d		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.985f		10 08		bpl $9869			bpl 	_CI32NotNeg
.9861		48		pha				pha
.9862		a9 2d		lda #$2d			lda 	#'-'
.9864		99 43 06	sta $0643,y			sta 	numberBuffer,y
.9867		c8		iny				iny
.9868		68		pla				pla
.9869						_CI32NotNeg:
.9869		20 77 98	jsr $9877			jsr 	_CI32DivideConvert 			; recursive conversion
.986c		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.986e		99 43 06	sta $0643,y			sta 	numberBuffer,y
.9871		7a		ply				ply
.9872		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9874		a9 43		lda #$43			lda 	#numberBuffer & $FF
.9876		60		rts				rts
.9877						_CI32DivideConvert:
.9877		e8		inx				inx 								; write to next slot up
.9878		20 37 a3	jsr $a337			jsr 	NSMSetByte 		 			; write the base out.
.987b		ca		dex				dex
.987c		20 a5 95	jsr $95a5			jsr 	Int32Divide 				; divide
.987f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9881		48		pha				pha
.9882		20 62 95	jsr $9562			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9885		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; is it zero ?
.9888		f0 05		beq $988f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.988a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.988c		20 77 98	jsr $9877			jsr 	_CI32DivideConvert 			; and recusrively call.
.988f						_CI32NoRecurse:
.988f		68		pla				pla 								; remainder
.9890		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9892		90 02		bcc $9896			bcc 	_CI32NotHex
.9894		69 26		adc #$26			adc 	#6+32
.9896						_CI32NotHex:
.9896		69 30		adc #$30			adc 	#48
.9898		99 43 06	sta $0643,y			sta 	numberBuffer,y 				; write out and exit
.989b		c8		iny				iny
.989c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.989d						PrecedenceLevel:
>989d		04					.byte	 4	; $00 <<
>989e		02					.byte	 2	; $01 <=
>989f		02					.byte	 2	; $02 <>
>98a0		00					.byte	 0	; $03 !!3
>98a1		00					.byte	 0	; $04 ><
>98a2		02					.byte	 2	; $05 >=
>98a3		04					.byte	 4	; $06 >>
>98a4		00					.byte	 0	; $07 !!7
>98a5		00					.byte	 0	; $08 !!8
>98a6		00					.byte	 0	; $09 !!9
>98a7		00					.byte	 0	; $0a !!10
>98a8		00					.byte	 0	; $0b !!11
>98a9		00					.byte	 0	; $0c !!12
>98aa		00					.byte	 0	; $0d !!13
>98ab		00					.byte	 0	; $0e !!14
>98ac		00					.byte	 0	; $0f !!15
>98ad		00					.byte	 0	; $10 @
>98ae		00					.byte	 0	; $11 !!17
>98af		00					.byte	 0	; $12 !!18
>98b0		00					.byte	 0	; $13 [
>98b1		04					.byte	 4	; $14 \
>98b2		00					.byte	 0	; $15 ]
>98b3		01					.byte	 1	; $16 ^
>98b4		00					.byte	 0	; $17 _
>98b5		00					.byte	 0	; $18 `
>98b6		00					.byte	 0	; $19 !!25
>98b7		00					.byte	 0	; $1a !!26
>98b8		00					.byte	 0	; $1b {
>98b9		01					.byte	 1	; $1c |
>98ba		00					.byte	 0	; $1d }
>98bb		00					.byte	 0	; $1e ~
>98bc		00					.byte	 0	; $1f <7F>
>98bd		00					.byte	 0	; $20
>98be		05					.byte	 5	; $21 !
>98bf		00					.byte	 0	; $22 "
>98c0		00					.byte	 0	; $23 #
>98c1		05					.byte	 5	; $24 $
>98c2		04					.byte	 4	; $25 %
>98c3		01					.byte	 1	; $26 &
>98c4		00					.byte	 0	; $27 '
>98c5		00					.byte	 0	; $28 (
>98c6		00					.byte	 0	; $29 )
>98c7		04					.byte	 4	; $2a *
>98c8		03					.byte	 3	; $2b +
>98c9		00					.byte	 0	; $2c ,
>98ca		03					.byte	 3	; $2d -
>98cb		00					.byte	 0	; $2e .
>98cc		04					.byte	 4	; $2f /
>98cd		00					.byte	 0	; $30 0
>98ce		00					.byte	 0	; $31 1
>98cf		00					.byte	 0	; $32 2
>98d0		00					.byte	 0	; $33 3
>98d1		00					.byte	 0	; $34 4
>98d2		00					.byte	 0	; $35 5
>98d3		00					.byte	 0	; $36 6
>98d4		00					.byte	 0	; $37 7
>98d5		00					.byte	 0	; $38 8
>98d6		00					.byte	 0	; $39 9
>98d7		00					.byte	 0	; $3a :
>98d8		00					.byte	 0	; $3b ;
>98d9		02					.byte	 2	; $3c <
>98da		02					.byte	 2	; $3d =
>98db		02					.byte	 2	; $3e >
>98dc		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.98dd						EvaluateExpressionAt0:
.98dd		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.98df						EvaluateExpression:
.98df		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.98e1						EvaluateExpressionAtPrecedence:
.98e1		48		pha				pha 								; save precedence level
.98e2		20 29 9d	jsr $9d29			jsr 	EvaluateTerm 				; evaluate term into level X.
.98e5		68		pla				pla 								; restore precedence level.
.98e6						_EXPRLoop:
.98e6		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.98e8		b1 30		lda ($30),y			lda 	(codePtr),y
.98ea		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.98ec		b0 25		bcs $9913			bcs 	_EXPRExit
.98ee		da		phx				phx 								; read the operator precedence
.98ef		aa		tax				tax
.98f0		bd 9d 98	lda $989d,x			lda 	PrecedenceLevel,x
.98f3		fa		plx				plx
.98f4		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98f6		f0 1b		beq $9913			beq 	_EXPRExit
.98f8		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98fa		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98fc		c5 37		cmp $37				cmp 	zTemp0+1
.98fe		b0 13		bcs $9913			bcs		_EXPRExit 					; if current >= operator exit
.9900		48		pha				pha 								; save current precedence.
.9901		b1 30		lda ($30),y			lda 	(codePtr),y
.9903		c8		iny				iny
.9904		48		pha				pha
.9905		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9907		e8		inx				inx 								; work out the right hand side.
.9908		20 e1 98	jsr $98e1			jsr 	EvaluateExpressionAtPrecedence
.990b		ca		dex				dex
.990c		68		pla				pla 								; get operator, call the code.
.990d		20 16 99	jsr $9916			jsr 	_EXPRCaller
.9910		68		pla				pla 								; restore precedence level
.9911		80 d3		bra $98e6			bra 	_EXPRLoop 					; and go round.
.9913						_EXPRExit:
.9913		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9915		60		rts				rts
.9916						_EXPRCaller:
.9916		da		phx				phx 								; save on stack, first thing is to restore it
.9917		0a		asl a				asl 	a 							; double so can use vectors into X
.9918		aa		tax				tax
.9919		7c 42 90	jmp ($9042,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.991c						FloatingPointAdd:
.991c		20 92 9a	jsr $9a92			jsr 	FloatPrepare 				; prepare for floats
.991f		80 09		bra $992a			bra 	FloatAdd
.9921						FloatingPointSub:
.9921		20 92 9a	jsr $9a92			jsr 	FloatPrepare 				; prepare for floats
.9924						FloatSubtract:
.9924		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9926		49 80		eor #$80			eor 	#$80
.9928		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.992a						FloatAdd:
.992a		48		pha				pha
.992b		5a		phy				phy
.992c		20 a1 9a	jsr $9aa1			jsr 	NSNormalise 				; normalise S[X]
.992f		f0 51		beq $9982			beq 	_FAReturn1
.9931		e8		inx				inx 								; normalise S[X+1]
.9932		20 a1 9a	jsr $9aa1			jsr 	NSNormalise
.9935		ca		dex				dex
.9936		c9 00		cmp #$00			cmp 	#0
.9938		f0 60		beq $999a			beq 	_FAExit 					; if so, just return A
.993a		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.993c		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.993e		f0 18		beq $9958			beq 	_FAExponentsEqual
.9940		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9942		a8		tay				tay
.9943		38		sec				sec 								; do a signed comparison of the exponents.
.9944		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9946		50 02		bvc $994a			bvc 	_FANoSignedChange
.9948		49 80		eor #$80			eor 	#$80
.994a						_FANoSignedChange:
.994a		29 80		and #$80			and 	#$80
.994c		10 02		bpl $9950			bpl 	_FAHaveMax
.994e		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9950						_FAHaveMax:
.9950		20 9d 99	jsr $999d			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9953		e8		inx				inx
.9954		20 9d 99	jsr $999d			jsr 	_FAShiftToExponent
.9957		ca		dex				dex
.9958						_FAExponentsEqual:
.9958		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.995a		55 51		eor $51,x			eor 	NSStatus+1,x
.995c		30 0e		bmi $996c			bmi 	_FADifferentSigns
.995e		20 d5 96	jsr $96d5			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9961		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9963		10 35		bpl $999a			bpl 	_FAExit 					; if no, we are done.
.9965		20 4e a3	jsr $a34e			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9968		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.996a		80 2e		bra $999a			bra 	_FAExit
.996c						_FADifferentSigns:
.996c		20 ef 96	jsr $96ef			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.996f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9971		10 06		bpl $9979			bpl 	_FACheckZero 				; if no, check for -0
.9973		20 f7 a2	jsr $a2f7			jsr 	NSMNegate 					; netate result
.9976		20 fe a2	jsr $a2fe			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9979						_FACheckZero:
.9979		20 57 a3	jsr $a357			jsr 	NSMIsZero	 				; check for -0
.997c		d0 1c		bne $999a			bne 	_FAExit
.997e		74 50		stz $50,x			stz 	NSStatus,x
.9980		80 18		bra $999a			bra 	_FAExit
.9982						_FAReturn1:
.9982		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9984		95 58		sta $58,x			sta 	NSMantissa0,x
.9986		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9988		95 60		sta $60,x			sta 	NSMantissa1,x
.998a		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.998c		95 68		sta $68,x			sta 	NSMantissa2,x
.998e		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9990		95 70		sta $70,x			sta 	NSMantissa3,x
.9992		b5 79		lda $79,x			lda 	NSExponent+1,x
.9994		95 78		sta $78,x			sta 	NSExponent,x
.9996		b5 51		lda $51,x			lda 	NSStatus+1,x
.9998		95 50		sta $50,x			sta 	NSStatus,x
.999a						_FAExit:
.999a		7a		ply				ply
.999b		68		pla				pla
.999c		60		rts				rts
.999d						_FAShiftToExponent:
.999d						_FAShiftToExponent2:
.999d		98		tya				tya 								; compare Y to exponent
.999e		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.99a0		f0 07		beq $99a9			beq 	_FASEExit 					; exit if so.
.99a2		20 4e a3	jsr $a34e			jsr 	NSMShiftRight	 			; shift the mantissa right
.99a5		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.99a7		80 f4		bra $999d			bra 	_FAShiftToExponent2
.99a9						_FASEExit:
.99a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.99aa						CompareFloat:
.99aa		20 24 99	jsr $9924			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.99ad		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.99af		29 f8		and #$f8			and 	#$F8
.99b1		15 68		ora $68,x			ora 	NSMantissa2,x
.99b3		15 70		ora $70,x			ora 	NSMantissa3,x
.99b5		f0 08		beq $99bf			beq 	_FCExit 					; zero, so approximately identical
.99b7		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.99b9		34 50		bit $50,x			bit 	NSStatus,x
.99bb		10 02		bpl $99bf			bpl 	_FCExit
.99bd						_FCNegative:
.99bd		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.99bf						_FCExit:
.99bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.99c0						FDivideCommand:
.99c0		fa		plx				plx	 								; restore stack position
.99c1		20 92 9a	jsr $9a92			jsr 	FloatPrepare 				; prepare for floats
.99c4						FloatDivide:
.99c4		48		pha				pha
.99c5		e8		inx				inx
.99c6		20 a1 9a	jsr $9aa1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.99c9		ca		dex				dex
.99ca		c9 00		cmp #$00			cmp 	#0
.99cc		f0 1d		beq $99eb			beq 	_FDZero
.99ce		20 a1 9a	jsr $9aa1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.99d1		f0 16		beq $99e9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.99d3		20 c6 95	jsr $95c6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.99d6		20 62 95	jsr $9562			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.99d9		20 a1 9a	jsr $9aa1			jsr		NSNormalise 				; renormalise
.99dc		20 56 96	jsr $9656			jsr 	CalculateSign 				; calculate result sign
.99df		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.99e1		38		sec				sec
.99e2		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.99e4		38		sec				sec
.99e5		e9 1e		sbc #$1e			sbc 	#30
.99e7		95 78		sta $78,x			sta 	NSExponent,x
.99e9						_FDExit:
.99e9		68		pla				pla
.99ea		60		rts				rts
.99eb						_FDZero:
.99eb		a9 03		lda #$03		lda	#3
.99ed		4c d5 93	jmp $93d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.99f0						FloatFractionalPart:
.99f0		5a		phy				phy
.99f1		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.99f3		29 7f		and #$7f			and 	#$7F
.99f5		95 50		sta $50,x			sta 	NSStatus,x
.99f7		20 a1 9a	jsr $9aa1			jsr 	NSNormalise
.99fa		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.99fc		38		sec				sec
.99fd		e9 e0		sbc #$e0			sbc 	#$E0
.99ff		90 29		bcc $9a2a			bcc 	_FFPExit 					; already fractional
.9a01		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9a03		b0 22		bcs $9a27			bcs 	_FFPZero
.9a05		a8		tay				tay 								; put count to do in Y
.9a06		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9a08		20 2c 9a	jsr $9a2c			jsr 	_FFPPartial
.9a0b		95 70		sta $70,x			sta 	NSMantissa3,x
.9a0d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9a0f		20 2c 9a	jsr $9a2c			jsr 	_FFPPartial
.9a12		95 68		sta $68,x			sta 	NSMantissa2,x
.9a14		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a16		20 2c 9a	jsr $9a2c			jsr 	_FFPPartial
.9a19		95 60		sta $60,x			sta 	NSMantissa1,x
.9a1b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a1d		20 2c 9a	jsr $9a2c			jsr 	_FFPPartial
.9a20		95 58		sta $58,x			sta 	NSMantissa0,x
.9a22		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; zeroed check.
.9a25		d0 03		bne $9a2a			bne 	_FFPExit
.9a27						_FFPZero:
.9a27		20 35 a3	jsr $a335			jsr 	NSMSetZero
.9a2a						_FFPExit:
.9a2a		7a		ply				ply
.9a2b		60		rts				rts
.9a2c						_FFPPartial:
.9a2c		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9a2e		f0 17		beq $9a47			beq 	_FFFPPExit
.9a30		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9a32		b0 0c		bcs $9a40			bcs 	_FFFPPWholeByte
.9a34		5a		phy				phy
.9a35						_FFFPPLeft:
.9a35		0a		asl a				asl 	a
.9a36		88		dey				dey
.9a37		d0 fc		bne $9a35			bne 	_FFFPPLeft
.9a39		7a		ply				ply
.9a3a						_FFFPPRight:
.9a3a		4a		lsr a				lsr 	a
.9a3b		88		dey				dey
.9a3c		d0 fc		bne $9a3a			bne 	_FFFPPRight
.9a3e		80 07		bra $9a47			bra 	_FFFPPExit
.9a40						_FFFPPWholeByte:
.9a40		98		tya				tya 								; subtract 8 from count
.9a41		38		sec				sec
.9a42		e9 08		sbc #$08			sbc 	#8
.9a44		a8		tay				tay
.9a45		a9 00		lda #$00			lda 	#0 							; and clear all
.9a47						_FFFPPExit:
.9a47		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9a48						FloatIntegerPart:
.9a48		48		pha				pha
.9a49		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9a4b		f0 1d		beq $9a6a			beq 	_FIPExit 					; if so do nothing
.9a4d		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; is it zero ?
.9a50		f0 15		beq $9a67			beq 	_FIPZero 					; if so return zero.
.9a52		20 a1 9a	jsr $9aa1			jsr 	NSNormalise 				; normalise
.9a55		f0 10		beq $9a67			beq 	_FIPZero 					; normalised to zero, exit zero
.9a57						_FIPShift:
.9a57		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a59		10 07		bpl $9a62			bpl 	_FIPCheckZero
.9a5b		20 4e a3	jsr $a34e			jsr 	NSMShiftRight 				; shift mantissa right
.9a5e		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a60		80 f5		bra $9a57			bra 	_FIPShift
.9a62						_FIPCheckZero:
.9a62		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; avoid -0 problem
.9a65		d0 03		bne $9a6a			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a67						_FIPZero:
.9a67		20 35 a3	jsr $a335			jsr 	NSMSetZero
.9a6a						_FIPExit:
.9a6a		68		pla				pla
.9a6b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a6c						FloatingPointMultiply:
.9a6c		20 92 9a	jsr $9a92			jsr 	FloatPrepare 				; prepare for floats
.9a6f						FloatMultiply:
.9a6f		48		pha				pha
.9a70		20 a1 9a	jsr $9aa1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a73		f0 18		beq $9a8d			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a75		e8		inx				inx
.9a76		20 a1 9a	jsr $9aa1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a79		ca		dex				dex
.9a7a		c9 00		cmp #$00			cmp 	#0
.9a7c		f0 0c		beq $9a8a			beq 	_FDSetZero
.9a7e		20 18 96	jsr $9618			jsr 	MultiplyShort 				; calculate the result.
.9a81		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a83		18		clc				clc
.9a84		75 79		adc $79,x			adc 	NSExponent+1,x
.9a86		95 78		sta $78,x			sta 	NSExponent,x
.9a88		80 03		bra $9a8d			bra 	_FDExit
.9a8a						_FDSetZero:
.9a8a		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; return 0
.9a8d						_FDExit:
.9a8d		20 a1 9a	jsr $9aa1			jsr 	NSNormalise 				; normalise the result
.9a90		68		pla				pla
.9a91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a92						FloatPrepare:
.9a92		20 9d 9b	jsr $9b9d			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a95		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a97		15 51		ora $51,x			ora 	NSStatus+1,x
.9a99		29 10		and #$10			and 	#NSBIsString
.9a9b		d0 01		bne $9a9e			bne 	_FDType
.9a9d		60		rts				rts
.9a9e						_FDType:
.9a9e		4c b7 a4	jmp $a4b7			jmp 	TypeError
.9aa1						NSNormalise:
.9aa1		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9aa3		29 80		and #$80			and 	#$80
.9aa5		09 08		ora #$08			ora 	#NSTFloat
.9aa7		95 50		sta $50,x			sta 	NSStatus,x
.9aa9		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; if zero exit
.9aac		d0 07		bne $9ab5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9aae		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9ab0		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9ab2		a9 00		lda #$00			lda 	#0 							; set Z flag
.9ab4		60		rts				rts
.9ab5						_NSNormaliseOptimise:
.9ab5		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9ab7		d0 19		bne $9ad2			bne 	_NSNormaliseLoop
.9ab9		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9abb		30 15		bmi $9ad2			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9abd		95 70		sta $70,x			sta 	NSMantissa3,x
.9abf		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ac1		95 68		sta $68,x			sta 	NSMantissa2,x
.9ac3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ac5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ac7		74 58		stz $58,x			stz 	NSMantissa0,x
.9ac9		b5 78		lda $78,x			lda 	NSExponent,x
.9acb		38		sec				sec
.9acc		e9 08		sbc #$08			sbc 	#8
.9ace		95 78		sta $78,x			sta 	NSExponent,x
.9ad0		80 e3		bra $9ab5			bra 	_NSNormaliseOptimise
.9ad2						_NSNormaliseLoop:
.9ad2		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9ad4		70 07		bvs $9add			bvs 	_NSNExit 					; exit if so with Z flag clear
.9ad6		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; shift mantissa left
.9ad9		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9adb		80 f5		bra $9ad2			bra 	_NSNormaliseLoop
.9add						_NSNExit:
.9add		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9adf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ae0						AssignNumber:
.9ae0		5a		phy				phy
.9ae1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9ae3		85 36		sta $36				sta 	zTemp0
.9ae5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ae7		85 37		sta $37				sta 	zTemp0+1
.9ae9		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9aeb		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9aed		95 50		sta $50,x			sta 	NSStatus,x
.9aef		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9af1		c9 08		cmp #$08			cmp 	#NSTFloat
.9af3		f0 24		beq $9b19			beq 	_ANFloat
.9af5		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9af7		f0 03		beq $9afc			beq		_ANNotFloat
.9af9		4c b2 a4	jmp $a4b2			jmp 	RangeError					; if it is, report an error.
.9afc						_ANNotFloat:
.9afc		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9afe		29 03		and #$03			and 	#3
.9b00		d0 05		bne $9b07			bne 	_ANByteWord
.9b02		20 24 9b	jsr $9b24			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9b05		80 1b		bra $9b22			bra 	_ANExit
.9b07						_ANByteWord:
.9b07		48		pha				pha 								; save count
.9b08		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9b0a		92 36		sta ($36)			sta 	(zTemp0)
.9b0c		68		pla				pla
.9b0d		c9 01		cmp #$01			cmp	 	#1
.9b0f		f0 11		beq $9b22			beq 	_ANExit
.9b11		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9b13		a0 01		ldy #$01			ldy 	#1
.9b15		91 36		sta ($36),y			sta 	(zTemp0),y
.9b17		80 09		bra $9b22			bra 	_ANExit
.9b19						_ANFloat:
.9b19		20 24 9b	jsr $9b24			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9b1c		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9b1e		a0 04		ldy #$04			ldy 	#4
.9b20		91 36		sta ($36),y			sta 	(zTemp0),y
.9b22						_ANExit:
.9b22		7a		ply				ply
.9b23		60		rts				rts
.9b24						_ANCopy4PackSign:
.9b24		a0 03		ldy #$03			ldy 	#3
.9b26		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9b28		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9b2a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9b2c		91 36		sta ($36),y			sta 	(zTemp0),y
.9b2e		88		dey				dey
.9b2f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b31		91 36		sta ($36),y			sta 	(zTemp0),y
.9b33		88		dey				dey
.9b34		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b36		91 36		sta ($36),y			sta 	(zTemp0),y
.9b38		88		dey				dey
.9b39		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b3b		91 36		sta ($36),y			sta 	(zTemp0),y
.9b3d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9b3e						AssignString:
.9b3e		5a		phy				phy
.9b3f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b41		85 38		sta $38				sta 	zTemp1
.9b43		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b45		85 39		sta $39				sta 	zTemp1+1
.9b47		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b49		85 36		sta $36				sta 	zTemp0
.9b4b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b4d		85 37		sta $37				sta 	zTemp0+1
.9b4f		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b51		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b53		f0 23		beq $9b78			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b55		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b56		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b58		e9 02		sbc #$02			sbc 	#2
.9b5a		85 3c		sta $3c				sta 	zsTemp
.9b5c		a0 01		ldy #$01			ldy 	#1
.9b5e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b60		e9 00		sbc #$00			sbc 	#0
.9b62		85 3d		sta $3d				sta 	zsTemp+1
.9b64		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b66						_ASGetLength:
.9b66		c8		iny				iny
.9b67		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b69		d0 fb		bne $9b66			bne 	_ASGetLength
.9b6b		98		tya				tya 								; is this length <= current length
.9b6c		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b6e		90 1e		bcc $9b8e			bcc 	_ASCopyString
.9b70		f0 1c		beq $9b8e			beq 	_ASCopyString
.9b72		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b74		a0 01		ldy #$01			ldy 	#1
.9b76		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b78						_ASNewStringRequired:
.9b78		e8		inx				inx 								; concrete the new string.
.9b79		20 03 b5	jsr $b503			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b7c		ca		dex				dex
.9b7d		18		clc				clc
.9b7e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b80		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b82		92 36		sta ($36)			sta 	(zTemp0)
.9b84		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b86		69 00		adc #$00			adc 	#0
.9b88		a0 01		ldy #$01			ldy 	#1
.9b8a		91 36		sta ($36),y			sta 	(zTemp0),y
.9b8c		80 0d		bra $9b9b			bra 	_ASExit
.9b8e						_ASCopyString:
.9b8e		a0 00		ldy #$00			ldy 	#0
.9b90						_ASCopyLoop:
.9b90		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b92		c8		iny				iny
.9b93		c8		iny				iny
.9b94		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b96		88		dey				dey
.9b97		c9 00		cmp #$00			cmp 	#0
.9b99		d0 f5		bne $9b90			bne 	_ASCopyLoop
.9b9b						_ASExit:
.9b9b		7a		ply				ply
.9b9c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b9d						DereferenceTopTwo:
.9b9d		e8		inx				inx
.9b9e		20 a2 9b	jsr $9ba2			jsr 	Dereference 				; deref x+1
.9ba1		ca		dex				dex  								; falls through to deref x
.9ba2						Dereference:
.9ba2		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9ba4		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9ba6		f0 48		beq $9bf0			beq 	_DRFExit 					; not a reference, so exit.
.9ba8		5a		phy				phy
.9ba9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9bab		85 36		sta $36				sta 	zTemp0
.9bad		b5 60		lda $60,x			lda 	NSMantissa1,x
.9baf		85 37		sta $37				sta 	zTemp0+1
.9bb1		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9bb3		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9bb5		95 58		sta $58,x			sta 	NSMantissa0,x
.9bb7		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9bb9		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9bbb		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9bbd		f0 0e		beq $9bcd			beq 	_DRFDereferenceTwo
.9bbf		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9bc1		f0 2f		beq $9bf2			beq 	_DRFFull
.9bc3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9bc5		29 03		and #$03			and 	#3
.9bc7		f0 29		beq $9bf2			beq 	_DRFFull 					; the whole word
.9bc9		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9bcb		f0 06		beq $9bd3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9bcd						_DRFDereferenceTwo:
.9bcd		a0 01		ldy #$01			ldy 	#1
.9bcf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bd1		95 60		sta $60,x			sta 	NSMantissa1,x
.9bd3						_DRFClear23:
.9bd3		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9bd5		74 70		stz $70,x			stz 	NSMantissa3,x
.9bd7		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9bd9		29 18		and #$18			and 	#NSBTypeMask
.9bdb		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9bdd		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9bdf		d0 0e		bne $9bef			bne 	_DRFNotString
.9be1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9be3		15 60		ora $60,x			ora 	NSMantissa1,x
.9be5		d0 08		bne $9bef			bne 	_DRFNotString
.9be7		a9 f1		lda #$f1			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9be9		95 58		sta $58,x			sta 	NSMantissa0,x
.9beb		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9bed		95 60		sta $60,x			sta 	NSMantissa1,x
.9bef						_DRFNotString
.9bef		7a		ply				ply 								; restore Y and exit
.9bf0						_DRFExit:
.9bf0		60		rts				rts
.9bf1						_DRFNullString:
>9bf1		00						.byte 	0
.9bf2						_DRFFull:
.9bf2		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9bf4		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bf6		95 60		sta $60,x			sta 	NSMantissa1,x
.9bf8		c8		iny				iny
.9bf9		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bfb		95 68		sta $68,x			sta 	NSMantissa2,x
.9bfd		c8		iny				iny
.9bfe		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c00		95 70		sta $70,x			sta 	NSMantissa3,x
.9c02		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9c04		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9c06		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9c08		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9c0a		f0 05		beq $9c11			beq 	_DRFNoExponent
.9c0c		c8		iny				iny 								; if not, read the exponent as well.
.9c0d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9c0f		95 78		sta $78,x			sta 	NSExponent,x
.9c11						_DRFNoExponent:
.9c11		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9c13		10 0a		bpl $9c1f			bpl 	_DRFExit2 					; if not, then exit.
.9c15		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9c17		95 70		sta $70,x			sta 	NSMantissa3,x
.9c19		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9c1b		09 80		ora #$80			ora 	#NSBIsNegative
.9c1d		95 50		sta $50,x			sta 	NSStatus,x
.9c1f						_DRFExit2:
.9c1f		7a		ply				ply
.9c20		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9c21						EncodeNumberStart:
.9c21		38		sec				sec
.9c22		80 01		bra $9c25			bra 	EncodeNumberContinue+1
.9c24						EncodeNumberContinue:
.9c24		18		clc				clc
.9c25						EncodeNumber:
.9c25		08		php				php 								; save reset flag.
.9c26		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9c28		f0 12		beq $9c3c			beq 	_ENIsOkay
.9c2a		c9 30		cmp #$30			cmp 	#"0"
.9c2c		90 04		bcc $9c32			bcc 	_ENBadNumber
.9c2e		c9 3a		cmp #$3a			cmp 	#"9"+1
.9c30		90 0a		bcc $9c3c			bcc 	_ENIsOkay
.9c32						_ENBadNumber:
.9c32		28		plp				plp 								; throw saved reset
.9c33		ad 25 04	lda $0425			lda 	encodeState 				; if in decimal mode, construct final number
.9c36		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c38		f0 7b		beq $9cb5			beq 	_ENConstructFinal
.9c3a						_ENFail:
.9c3a		18		clc				clc 								; not allowed
.9c3b		60		rts				rts
.9c3c						_ENIsOkay:
.9c3c		28		plp				plp 								; are we restarting
.9c3d		90 15		bcc $9c54			bcc 	_ENNoRestart
.9c3f						_ENStartEncode:
.9c3f		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9c41		f0 0c		beq $9c4f			beq 	_ENFirstDP
.9c43		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9c45		20 37 a3	jsr $a337			jsr 	NSMSetByte 					; in single byte mode.
.9c48		a9 01		lda #$01			lda 	#ESTA_Low
.9c4a						_ENExitChange:
.9c4a		8d 25 04	sta $0425			sta 	encodeState 				; save new state
.9c4d		38		sec				sec
.9c4e		60		rts				rts
.9c4f						_ENFirstDP:
.9c4f		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; clear integer part
.9c52		80 3c		bra $9c90			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c54						_ENNoRestart:
.9c54		48		pha				pha 								; save digit or DP on stack.
.9c55		ad 25 04	lda $0425			lda 	encodeState 				; get current state
.9c58		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c5a		f0 09		beq $9c65			beq  	_ESTALowState
.9c5c		c9 02		cmp #$02			cmp 	#ESTA_High
.9c5e		f0 26		beq $9c86			beq 	_ESTAHighState
.9c60		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c62		f0 38		beq $9c9c			beq 	_ESTADecimalState
>9c64		db						.byte 	$DB 						; causes a break in the emulator
.9c65						_ESTALowState:
.9c65		68		pla				pla 								; get value back
.9c66		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c68		f0 26		beq $9c90			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c6a		29 0f		and #$0f			and 	#15 						; make digit
.9c6c		8d 26 04	sta $0426			sta 	digitTemp 					; save it.
.9c6f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c71		0a		asl a				asl 	a
.9c72		0a		asl a				asl 	a
.9c73		75 58		adc $58,x			adc 	NSMantissa0,x
.9c75		0a		asl a				asl 	a
.9c76		6d 26 04	adc $0426			adc 	digitTemp
.9c79		95 58		sta $58,x			sta 	NSMantissa0,x
.9c7b		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c7d		90 05		bcc $9c84			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c7f		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c81		8d 25 04	sta $0425			sta 	encodeState
.9c84						_ESTANoSwitch:
.9c84		38		sec				sec
.9c85		60		rts				rts
.9c86						_ESTAHighState:
.9c86		68		pla				pla 								; get value back
.9c87		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c89		f0 05		beq $9c90			beq 	_ESTASwitchFloat
.9c8b		20 e9 9c	jsr $9ce9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c8e		38		sec				sec
.9c8f		60		rts				rts
.9c90						_ESTASwitchFloat:
.9c90		9c 27 04	stz $0427			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c93		e8		inx				inx 								; zero the decimal additive.
.9c94		20 35 a3	jsr $a335			jsr 	NSMSetZero
.9c97		ca		dex				dex
.9c98		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c9a		80 ae		bra $9c4a			bra 	_ENExitChange
.9c9c						_ESTADecimalState:
.9c9c		68		pla				pla 								; digit.
.9c9d		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c9f		f0 99		beq $9c3a			beq 	_ENFail
.9ca1		e8		inx				inx 								; put digit into fractional part of X+1
.9ca2		20 e9 9c	jsr $9ce9			jsr 	ESTAShiftDigitIntoMantissa
.9ca5		ca		dex				dex
.9ca6		ee 27 04	inc $0427			inc 	decimalCount 				; bump the count of decimals
.9ca9		ad 27 04	lda $0427			lda 	decimalCount 				; too many decimal digits.
.9cac		c9 0b		cmp #$0b			cmp 	#11
.9cae		f0 02		beq $9cb2			beq 	_ESTADSFail
.9cb0		38		sec				sec
.9cb1		60		rts				rts
.9cb2						_ESTADSFail:
.9cb2		4c b2 a4	jmp $a4b2			jmp 	RangeError
.9cb5						_ENConstructFinal:
.9cb5		ad 27 04	lda $0427			lda 	decimalCount 				; get decimal count
.9cb8		f0 2d		beq $9ce7			beq 	_ENCFExit 					; no decimals
.9cba		5a		phy				phy
.9cbb		0a		asl a				asl 	a 							; x 4 and CLC
.9cbc		0a		asl a				asl 	a
.9cbd		6d 27 04	adc $0427			adc 	decimalCount
.9cc0		a8		tay				tay
.9cc1		b9 71 a4	lda $a471,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9cc4		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9cc6		b9 72 a4	lda $a472,y			lda 	DecimalScalarTable-5+1,y
.9cc9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9ccb		b9 73 a4	lda $a473,y			lda 	DecimalScalarTable-5+2,y
.9cce		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9cd0		b9 74 a4	lda $a474,y			lda 	DecimalScalarTable-5+3,y
.9cd3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9cd5		b9 75 a4	lda $a475,y			lda 	DecimalScalarTable-5+4,y
.9cd8		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9cda		a9 08		lda #$08			lda 	#NSTFloat
.9cdc		95 52		sta $52,x			sta 	NSStatus+2,x
.9cde		7a		ply				ply
.9cdf		e8		inx				inx 								; multiply decimal const by decimal scalar
.9ce0		20 6f 9a	jsr $9a6f			jsr 	FloatMultiply
.9ce3		ca		dex				dex
.9ce4		20 2a 99	jsr $992a			jsr 	FloatAdd 					; add to integer part.
.9ce7						_ENCFExit:
.9ce7		18		clc				clc 								; reject the digit.
.9ce8		60		rts				rts
.9ce9						ESTAShiftDigitIntoMantissa:
.9ce9		29 0f		and #$0f			and 	#15 						; save digit
.9ceb		48		pha				pha
.9cec		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9cee		48		pha				pha
.9cef		b5 68		lda $68,x			lda 	NSMantissa2,x
.9cf1		48		pha				pha
.9cf2		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cf4		48		pha				pha
.9cf5		b5 58		lda $58,x			lda 	NSMantissa0,x
.9cf7		48		pha				pha
.9cf8		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; x 2
.9cfb		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; x 4
.9cfe		18		clc				clc 								; pop mantissa and add
.9cff		68		pla				pla
.9d00		75 58		adc $58,x			adc 	NSMantissa0,x
.9d02		95 58		sta $58,x			sta 	NSMantissa0,x
.9d04		68		pla				pla
.9d05		75 60		adc $60,x			adc 	NSMantissa1,x
.9d07		95 60		sta $60,x			sta 	NSMantissa1,x
.9d09		68		pla				pla
.9d0a		75 68		adc $68,x			adc 	NSMantissa2,x
.9d0c		95 68		sta $68,x			sta 	NSMantissa2,x
.9d0e		68		pla				pla
.9d0f		75 70		adc $70,x			adc 	NSMantissa3,x
.9d11		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9d13		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; x 10
.9d16		68		pla				pla 								; add digit
.9d17		18		clc				clc
.9d18		75 58		adc $58,x			adc 	NSMantissa0,x
.9d1a		95 58		sta $58,x			sta 	NSMantissa0,x
.9d1c		90 0a		bcc $9d28			bcc 	_ESTASDExit
.9d1e		f6 60		inc $60,x			inc 	NSMantissa1,x
.9d20		d0 06		bne $9d28			bne 	_ESTASDExit
.9d22		f6 68		inc $68,x			inc 	NSMantissa2,x
.9d24		d0 02		bne $9d28			bne 	_ESTASDExit
.9d26		f6 70		inc $70,x			inc 	NSMantissa3,x
.9d28						_ESTASDExit:
.9d28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9d29						EvaluateTerm:
.9d29		b1 30		lda ($30),y			lda 	(codePtr),y
.9d2b		30 18		bmi $9d45			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9d2d		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9d2f		b0 6c		bcs $9d9d			bcs 	_ETVariable
.9d31		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9d33		90 6b		bcc $9da0			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9d35		c9 3a		cmp #$3a			cmp 	#'9'+1
.9d37		b0 67		bcs $9da0			bcs 	_ETPuncUnary
.9d39		20 21 9c	jsr $9c21			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9d3c						_ETNumber:
.9d3c		c8		iny				iny 								; keep encoding until we have the numbers
.9d3d		b1 30		lda ($30),y			lda 	(codePtr),y
.9d3f		20 24 9c	jsr $9c24			jsr 	EncodeNumberContinue
.9d42		b0 f8		bcs $9d3c			bcs 	_ETNumber 					; go back if accepted.
.9d44		60		rts				rts
.9d45						_ETCheckUnary:
.9d45		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9d47		f0 3f		beq $9d88			beq 	_ETString
.9d49		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9d4b		f0 12		beq $9d5f			beq 	_ETHexConstant
.9d4d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d4f		90 0b		bcc $9d5c			bcc 	_ETSyntaxError
.9d51		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1
.9d53		b0 07		bcs $9d5c			bcs 	_ETSyntaxError
.9d55		da		phx				phx 								; push X on the stack
.9d56		0a		asl a				asl 	a 							; put vector x 2 into X
.9d57		aa		tax				tax
.9d58		c8		iny				iny 								; consume unary function token
.9d59		7c c2 90	jmp ($90c2,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d5c						_ETSyntaxError:
.9d5c		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.9d5f						_ETHexConstant:
.9d5f		c8		iny				iny 								; skip #
.9d60		c8		iny				iny 								; skip count
.9d61		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; clear result
.9d64						_ETHLoop:
.9d64		b1 30		lda ($30),y			lda 	(codePtr),y
.9d66		c8		iny				iny 								; and consume
.9d67		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d69		f0 1c		beq $9d87			beq 	_ETHExit
.9d6b		48		pha				pha 								; save on stack.
.9d6c		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; x 2
.9d6f		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; x 4
.9d72		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; x 8
.9d75		20 44 a3	jsr $a344			jsr 	NSMShiftLeft 				; x 16
.9d78		68		pla				pla 								; ASCII
.9d79		c9 41		cmp #$41			cmp 	#'A'
.9d7b		90 02		bcc $9d7f			bcc 	_ETHNotChar
.9d7d		e9 07		sbc #$07			sbc 	#7
.9d7f						_ETHNotChar:
.9d7f		29 0f		and #$0f			and 	#15 						; digit now
.9d81		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d83		95 58		sta $58,x			sta 	NSMantissa0,x
.9d85		80 dd		bra $9d64			bra 	_ETHLoop 					; go round.
.9d87						_ETHExit:
.9d87		60		rts				rts
.9d88						_ETString:
.9d88		c8		iny				iny 								; look at length
.9d89		b1 30		lda ($30),y			lda 	(codePtr),y
.9d8b		48		pha				pha
.9d8c		c8		iny				iny 								; first character
.9d8d		20 34 a7	jsr $a734			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d90		68		pla				pla 								; restore count and save
.9d91		85 36		sta $36				sta 	zTemp0
.9d93		98		tya				tya 								; add length to Y to skip it.
.9d94		18		clc				clc
.9d95		65 36		adc $36				adc 	zTemp0
.9d97		a8		tay				tay
.9d98		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d9a		95 50		sta $50,x			sta 	NSStatus,x
.9d9c		60		rts				rts
.9d9d						_ETVariable:
.9d9d		4c f2 9d	jmp $9df2			jmp 	VariableHandler
.9da0						_ETPuncUnary:
.9da0		c8		iny				iny 								; consume the unary character
.9da1		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9da3		f0 2b		beq $9dd0			beq 	_ETUnaryNegate
.9da5		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; @ reference -> constant
.9da7		f0 36		beq $9ddf			beq 	_ETDereference
.9da9		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9dab		f0 3e		beq $9deb			beq 	_ETParenthesis
.9dad		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9daf		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9db1		f0 06		beq $9db9			beq 	_ETIndirection
.9db3		e6 36		inc $36				inc 	zTemp0
.9db5		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9db7		d0 a3		bne $9d5c			bne 	_ETSyntaxError
.9db9						_ETIndirection:
.9db9		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9dbb		1a		inc a				inc 	a
.9dbc		48		pha				pha
.9dbd		20 29 9d	jsr $9d29			jsr 	EvaluateTerm				; evaluate the term
.9dc0		20 a2 9b	jsr $9ba2			jsr 	Dereference 				; dereference it.
.9dc3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9dc5		d0 06		bne $9dcd			bne 	_ETTypeMismatch
.9dc7		68		pla				pla 								; indirection 1-2
.9dc8		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9dca		95 50		sta $50,x			sta 	NSStatus,x
.9dcc		60		rts				rts
.9dcd						_ETTypeMismatch:
.9dcd		4c b7 a4	jmp $a4b7			jmp 	TypeError
.9dd0						_ETUnaryNegate:
.9dd0		20 29 9d	jsr $9d29			jsr 	EvaluateTerm				; evaluate the term
.9dd3		20 a2 9b	jsr $9ba2			jsr 	Dereference 				; dereference it.
.9dd6		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9dd8		29 10		and #$10			and 	#NSTString
.9dda		d0 f1		bne $9dcd			bne 	_ETTypeMismatch
.9ddc		4c f7 a2	jmp $a2f7			jmp 	NSMNegate  					; just toggles the sign bit.
.9ddf						_ETDereference:
.9ddf		20 29 9d	jsr $9d29			jsr 	EvaluateTerm				; evaluate the term
.9de2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9de4		29 20		and #$20			and 	#NSBIsReference
.9de6		f0 e5		beq $9dcd			beq 	_ETTypeMismatch
.9de8		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9dea		60		rts				rts
.9deb						_ETParenthesis:
.9deb		20 df 98	jsr $98df			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9dee		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; check for )
.9df1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9df2						VariableHandler:
.9df2		b1 30		lda ($30),y			lda 	(codePtr),y
.9df4		18		clc				clc
.9df5		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9df7		85 37		sta $37				sta 	zTemp0+1
.9df9		c8		iny				iny
.9dfa		b1 30		lda ($30),y			lda 	(codePtr),y
.9dfc		85 36		sta $36				sta 	zTemp0
.9dfe		c8		iny				iny
.9dff		18		clc				clc									; copy variable address+3 to mantissa
.9e00		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9e02		95 58		sta $58,x			sta 	NSMantissa0,x
.9e04		a5 37		lda $37				lda 	zTemp0+1
.9e06		69 00		adc #$00			adc 	#0
.9e08		95 60		sta $60,x			sta 	NSMantissa1,x
.9e0a		74 68		stz $68,x			stz 	NSMantissa2,x
.9e0c		74 70		stz $70,x			stz 	NSMantissa3,x
.9e0e		74 78		stz $78,x			stz 	NSExponent,x
.9e10		5a		phy				phy
.9e11		a0 02		ldy #$02			ldy 	#2 							; read type
.9e13		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e15		7a		ply				ply
.9e16		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9e18		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9e1a		95 50		sta $50,x			sta 	NSStatus,x
.9e1c		29 04		and #$04			and 	#NSBIsArray
.9e1e		d0 01		bne $9e21			bne 	_VHArray
.9e20		60		rts				rts
.9e21						_VHArray:
.9e21		e8		inx				inx
.9e22		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9e25		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9e27		95 51		sta $51,x			sta 	NSStatus+1,x
.9e29		b1 30		lda ($30),y			lda 	(codePtr),y
.9e2b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9e2d		d0 06		bne $9e35			bne 	_VHNoSecondIndex
.9e2f		c8		iny				iny 								; skip the comma
.9e30		e8		inx				inx
.9e31		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9e34		ca		dex				dex
.9e35						_VHNoSecondIndex:
.9e35		ca		dex				dex 								; set X back.
.9e36		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; and check the right bracket.
.9e39		5a		phy				phy 								; save position
.9e3a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9e3c		85 3e		sta $3e				sta 	zaTemp
.9e3e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e40		85 3f		sta $3f				sta 	zaTemp+1
.9e42		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9e44		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e46		f0 5d		beq $9ea5			beq 	_VHBadArray
.9e48		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9e4a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e4c		f0 02		beq $9e50			beq 	_VHHas2Mask
.9e4e		a9 ff		lda #$ff			lda 	#$FF
.9e50						_VHHas2Mask:
.9e50		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e52		f0 4c		beq $9ea0			beq 	_VHBadIndex
.9e54		0a		asl a				asl 	a 							; carry will be set if a second index
.9e55		90 08		bcc $9e5f			bcc 	_VHCheckFirstIndex
.9e57		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e59		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e5b		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e5d		90 41		bcc $9ea0			bcc 	_VHBadIndex
.9e5f						_VHCheckFirstIndex:
.9e5f		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e61		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e63		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e65		90 39		bcc $9ea0			bcc 	_VHBadIndex
.9e67		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e69		64 37		stz $37				stz 	zTemp0+1
.9e6b		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e6d		30 0e		bmi $9e7d			bmi 	_VHNoMultiply
.9e6f		da		phx				phx
.9e70		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e72		48		pha				pha
.9e73		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e75		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e77		1a		inc a				inc 	a 							; add 1 for zero base
.9e78		fa		plx				plx
.9e79		20 e0 a2	jsr $a2e0			jsr 	Multiply8x8 				; calculate -> Z0
.9e7c		fa		plx				plx
.9e7d						_VHNoMultiply:
.9e7d		18		clc				clc
.9e7e		a5 36		lda $36				lda 	zTemp0
.9e80		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e82		85 36		sta $36				sta 	zTemp0
.9e84		a5 37		lda $37				lda 	zTemp0+1
.9e86		69 00		adc #$00			adc 	#0
.9e88		85 37		sta $37				sta 	zTemp0+1
.9e8a		b5 50		lda $50,x			lda 	NSStatus,x
.9e8c		20 56 89	jsr $8956			jsr 	ScaleByBaseType
.9e8f		18		clc				clc
.9e90		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e92		65 36		adc $36				adc 	zTemp0
.9e94		95 58		sta $58,x			sta 	NSMantissa0,x
.9e96		a0 01		ldy #$01			ldy 	#1
.9e98		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e9a		65 37		adc $37				adc 	zTemp0+1
.9e9c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e9e		7a		ply				ply 								; restore position
.9e9f		60		rts				rts
.9ea0						_VHBadIndex:
.9ea0		a9 17		lda #$17		lda	#23
.9ea2		4c d5 93	jmp $93d5		jmp	ErrorHandler
.9ea5						_VHBadArray:
.9ea5		a9 18		lda #$18		lda	#24
.9ea7		4c d5 93	jmp $93d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9eaa						AbsUnary:
.9eaa		fa		plx				plx 								; restore stack pos
.9eab		20 83 a2	jsr $a283			jsr 	EvaluateNumber 				; get a float or int
.9eae		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9eb1		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9eb3		29 7f		and #$7f			and 	#$7F
.9eb5		95 50		sta $50,x			sta 	NSStatus,x
.9eb7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9eb8						AllocUnary:
.9eb8		fa		plx				plx 								; restore stack pos
.9eb9		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger		; get bytes required.
.9ebc		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9ebf		da		phx				phx 								; save X/Y
.9ec0		5a		phy				phy
.9ec1		8a		txa				txa 								; copy X into Y
.9ec2		a8		tay				tay
.9ec3		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9ec6		aa		tax				tax
.9ec7		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9eca		20 d7 9e	jsr $9ed7			jsr 	AllocateXABytes 			; allocate memory
.9ecd		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9ed0		8a		txa				txa 	 							; typing is 16 bit integer.
.9ed1		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9ed4		7a		ply				ply
.9ed5		fa		plx				plx
.9ed6		60		rts				rts
.9ed7						AllocateXABytes:
.9ed7		5a		phy				phy
.9ed8		ac 28 04	ldy $0428			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9edb		84 36		sty $36				sty 	zTemp0
.9edd		5a		phy				phy
.9ede		ac 29 04	ldy $0429			ldy 	lowMemPtr+1
.9ee1		84 37		sty $37				sty 	zTemp0+1
.9ee3		5a		phy				phy
.9ee4		18		clc				clc 								; add to low memory pointer
.9ee5		6d 28 04	adc $0428			adc 	lowMemPtr
.9ee8		8d 28 04	sta $0428			sta 	lowMemPtr
.9eeb		8a		txa				txa
.9eec		6d 29 04	adc $0429			adc 	lowMemPtr+1
.9eef		8d 29 04	sta $0429			sta 	lowMemPtr+1
.9ef2		b0 2f		bcs $9f23			bcs 	CISSMemory
.9ef4		20 15 9f	jsr $9f15			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9ef7						_ClearMemory:
.9ef7		ad 28 04	lda $0428			lda 	lowMemPtr 					; cleared all memory allocated
.9efa		c5 36		cmp $36				cmp 	zTemp0
.9efc		d0 07		bne $9f05			bne 	_CMClearNext
.9efe		ad 29 04	lda $0429			lda 	lowMemPtr+1
.9f01		c5 37		cmp $37				cmp 	zTemp0+1
.9f03		f0 0c		beq $9f11			beq 	_CMExit
.9f05						_CMClearNext:
.9f05		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9f07		92 36		sta ($36)			sta 	(zTemp0)
.9f09		e6 36		inc $36				inc 	zTemp0
.9f0b		d0 ea		bne $9ef7			bne 	_ClearMemory
.9f0d		e6 37		inc $37				inc		zTemp0+1
.9f0f		80 e6		bra $9ef7			bra 	_ClearMemory
.9f11						_CMExit:
.9f11		fa		plx				plx
.9f12		68		pla				pla
.9f13		7a		ply				ply
.9f14		60		rts				rts
.9f15						CheckIdentifierStringSpace:
.9f15		48		pha				pha
.9f16		ad 29 04	lda $0429			lda 	lowMemPtr+1 				; get low memory pointer
.9f19		18		clc				clc
.9f1a		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9f1c		cd 2b 04	cmp $042b			cmp 	stringMemory+1 				; is it >= StringMemory
.9f1f		b0 02		bcs $9f23			bcs 	CISSMemory
.9f21		68		pla				pla
.9f22		60		rts				rts
.9f23						CISSMemory:
.9f23		a9 06		lda #$06		lda	#6
.9f25		4c d5 93	jmp $93d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9f28						AscUnary:
.9f28		fa		plx				plx 								; restore stack pos
.9f29		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; get a string
.9f2c		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9f2e		20 37 a3	jsr $a337			jsr 	NSMSetByte 					; ASC("") will return zero.
.9f31		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9f34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9f35						FracUnary:
.9f35		fa		plx				plx 								; restore stack pos
.9f36		20 83 a2	jsr $a283			jsr 	EvaluateNumber 				; get a float or int
.9f39		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9f3c		b5 50		lda $50,x			lda 	NSStatus,x
.9f3e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f40		f0 04		beq $9f46			beq 	_IUZero
.9f42		20 f0 99	jsr $99f0			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9f45		60		rts				rts
.9f46						_IUZero:
.9f46		20 35 a3	jsr $a335			jsr 	NSMSetZero
.9f49		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9f4a						IntUnary:
.9f4a		fa		plx				plx 								; restore stack pos
.9f4b		20 83 a2	jsr $a283			jsr 	EvaluateNumber 				; get a float or int
.9f4e		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9f51		b5 50		lda $50,x			lda 	NSStatus,x
.9f53		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f55		f0 03		beq $9f5a			beq 	_IUExit
.9f57		20 48 9a	jsr $9a48			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f5a						_IUExit:
.9f5a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f5b						LenUnary:
.9f5b		fa		plx				plx 								; restore stack pos
.9f5c		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; get a string
.9f5f		5a		phy				phy
.9f60		a0 00		ldy #$00			ldy 	#0 							; find length
.9f62						_LenFind:
.9f62		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f64		f0 06		beq $9f6c			beq 	_LenExit
.9f66		c8		iny				iny
.9f67		d0 f9		bne $9f62			bne 	_LenFind
.9f69		4c b2 a4	jmp $a4b2			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f6c						_LenExit:
.9f6c		98		tya				tya		 							; return length
.9f6d		20 37 a3	jsr $a337			jsr 	NSMSetByte
.9f70		7a		ply				ply
.9f71		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9f74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f75						Unary_Min:
.9f75		a9 01		lda #$01			lda 	#1
.9f77		80 02		bra $9f7b			bra 	UnaryMinMaxMain
.9f79						Unary_Max:
.9f79		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f7b						UnaryMinMaxMain:
.9f7b		fa		plx				plx 								; get index on number stack
.9f7c		48		pha				pha 								; save comparator
.9f7d		20 7a a2	jsr $a27a			jsr 	EvaluateValue 				; get the first value.
.9f80						_UMMMLoop:
.9f80		b1 30		lda ($30),y			lda 	(codePtr),y
.9f82		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f84		f0 22		beq $9fa8			beq 	_UMMMDone
.9f86		20 c4 93	jsr $93c4			jsr 	CheckComma 					; must be a comma
.9f89		e8		inx				inx
.9f8a		20 7a a2	jsr $a27a			jsr 	EvaluateValue
.9f8d		ca		dex				dex
.9f8e		20 18 a3	jsr $a318			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f91		e8		inx				inx
.9f92		20 18 a3	jsr $a318			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f95		e8		inx				inx
.9f96		20 92 94	jsr $9492			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f99		ca		dex				dex
.9f9a		ca		dex				dex
.9f9b		85 36		sta $36				sta 	zTemp0 						; save required result
.9f9d		68		pla				pla 								; get and save comparator
.9f9e		48		pha				pha
.9f9f		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9fa1		d0 dd		bne $9f80			bne 	_UMMMLoop
.9fa3		20 ab 9f	jsr $9fab			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9fa6		80 d8		bra $9f80			bra 	_UMMMLoop
.9fa8						_UMMMDone:
.9fa8		68		pla				pla 								; throw the comparator
.9fa9		c8		iny				iny 								; skip )
.9faa		60		rts				rts
.9fab						ExpCopyAboveDown:
.9fab		b5 51		lda $51,x			lda 	NSStatus+1,x
.9fad		95 50		sta $50,x			sta 	NSStatus,x
.9faf		b5 79		lda $79,x			lda 	NSExponent+1,x
.9fb1		95 78		sta $78,x			sta 	NSExponent,x
.9fb3		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9fb5		95 58		sta $58,x			sta 	NSMantissa0,x
.9fb7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9fb9		95 60		sta $60,x			sta 	NSMantissa1,x
.9fbb		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9fbd		95 68		sta $68,x			sta 	NSMantissa2,x
.9fbf		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9fc1		95 70		sta $70,x			sta 	NSMantissa3,x
.9fc3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9fc4						Unary_Not:
.9fc4		fa		plx				plx
.9fc5		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger 			; get integer
.9fc8		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9fcb		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; zero mantissa ?
.9fce		f0 04		beq $9fd4			beq 	_NotZero
.9fd0		20 35 a3	jsr $a335			jsr 	NSMSetZero
.9fd3		60		rts				rts
.9fd4						_NotZero:
.9fd4		4c 48 94	jmp $9448			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9fd7						PeekByteUnary:
.9fd7		a9 01		lda #$01			lda 	#1
.9fd9		80 0a		bra $9fe5			bra 	PeekUnary
.9fdb						PeekWUnary:
.9fdb		a9 02		lda #$02			lda 	#2
.9fdd		80 06		bra $9fe5			bra 	PeekUnary
.9fdf						PeekLUnary:
.9fdf		a9 03		lda #$03			lda 	#3
.9fe1		80 02		bra $9fe5			bra 	PeekUnary
.9fe3						PeekDUnary:
.9fe3		a9 04		lda #$04			lda 	#4
.9fe5						PeekUnary:
.9fe5		fa		plx				plx 								; restore position.
.9fe6		48		pha				pha 								; save count to copy on stack
.9fe7		20 b5 a2	jsr $a2b5			jsr		Evaluate16BitInteger 		; address as constant.
.9fea		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.9fed		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9fef		85 36		sta $36				sta 	zTemp0
.9ff1		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ff3		85 37		sta $37				sta 	zTemp0+1
.9ff5		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; clear the result to zero.
.9ff8		68		pla				pla 								; count in zTemp2
.9ff9		85 3a		sta $3a				sta 	zTemp2
.9ffb		da		phx				phx 								; save stack position and offset of read
.9ffc		5a		phy				phy
.9ffd		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9fff						_PULoop:
.9fff		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a001		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a003		c8		iny				iny 								; next byte to write
.a004		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a005		18		clc				clc
.a006		69 08		adc #$08			adc 	#MathStackSize
.a008		aa		tax				tax
.a009		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a00b		d0 f2		bne $9fff			bne 	_PULoop
.a00d		7a		ply				ply 								; restore stack/code pos and exit.
.a00e		fa		plx				plx
.a00f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a010						SgnUnary:
.a010		fa		plx				plx 								; restore stack pos
.a011		20 83 a2	jsr $a283			jsr 	EvaluateNumber 				; get a float or int
.a014		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.a017		20 57 a3	jsr $a357			jsr 	NSMIsZero 					; if zero
.a01a		f0 0e		beq $a02a			beq 	_SGZero  					; return Int Zero
.a01c		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a01e		48		pha				pha
.a01f		a9 01		lda #$01			lda 	#1 							; set to 1
.a021		20 37 a3	jsr $a337			jsr 	NSMSetByte
.a024		68		pla				pla
.a025		29 80		and #$80			and		#$80 						; copy the sign byte out
.a027		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a029		60		rts				rts
.a02a		20 35 a3	jsr $a335	_SGZero:jsr 	NSMSetZero
.a02d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a02e						ValUnary:
.a02e		fa		plx				plx 								; restore stack pos
.a02f		20 44 a0	jsr $a044			jsr 	ValMainCode 				; do the main val() code
.a032		b0 01		bcs $a035			bcs 	_VUError 					; couldn't convert
.a034		60		rts				rts
.a035						_VUError:
.a035		4c b7 a4	jmp $a4b7			jmp 	TypeError
.a038						IsValUnary:
.a038		fa		plx				plx 								; restore stack pos
.a039		20 44 a0	jsr $a044			jsr 	ValMainCode 				; do the main val() code
.a03c		b0 03		bcs $a041			bcs 	_VUBad
.a03e		4c 48 94	jmp $9448			jmp 	ReturnTrue
.a041						_VUBad:
.a041		4c 53 94	jmp $9453			jmp 	ReturnFalse
.a044						ValMainCode:
.a044		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; get a string
.a047		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; check right bracket present
.a04a						ValEvaluateZTemp0:
.a04a		5a		phy				phy
.a04b		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a04d		f0 17		beq $a066			beq 	_VMCFail2
.a04f		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a051		48		pha				pha 								; save first character
.a052		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a054		d0 01		bne $a057			bne 	_VMCStart
.a056		c8		iny				iny 								; skip over -
.a057						_VMCStart:
.a057		38		sec				sec 								; initialise first time round.
.a058						_VMCNext:
.a058		c8		iny				iny 								; pre-increment
.a059		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a05b		f0 0c		beq $a069			beq 	_VMCSuccess 				; successful.
.a05d		20 25 9c	jsr $9c25			jsr 	EncodeNumber 				; send it to the number-builder
.a060		90 03		bcc $a065			bcc 	_VMCFail 					; if failed, give up.
.a062		18		clc				clc 								; next time round, countinue
.a063		80 f3		bra $a058			bra 	_VMCNext
.a065						_VMCFail:
.a065		68		pla				pla
.a066						_VMCFail2:
.a066		7a		ply				ply
.a067		38		sec				sec
.a068		60		rts				rts
.a069						_VMCSuccess:
.a069		a9 00		lda #$00			lda 	#0 							; construct final
.a06b		20 25 9c	jsr $9c25			jsr 	EncodeNumber 				; by sending a duff value.
.a06e		68		pla				pla 								; if it was -ve
.a06f		c9 2d		cmp #$2d			cmp 	#"-"
.a071		d0 03		bne $a076			bne 	_VMCNotNegative
.a073		20 f7 a2	jsr $a2f7			jsr		NSMNegate 					; negate it.
.a076						_VMCNotNegative:
.a076		7a		ply				ply
.a077		18		clc				clc
.a078		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a079						ChrUnary:
.a079		fa		plx				plx 								; restore stack pos
.a07a		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a07d		48		pha				pha
.a07e		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.a081		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a083		20 80 b5	jsr $b580			jsr 	StringTempAllocate
.a086		68		pla				pla 								; write number to it
.a087		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.a08a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a08b						ItemCountUnary:
.a08b		fa		plx				plx
.a08c		20 8d a2	jsr $a28d			jsr 	EvaluateString
.a08f		e8		inx				inx
.a090		20 03 a1	jsr $a103			jsr 	ICGetSeperator
.a093		ca		dex				dex
.a094		20 24 a1	jsr $a124			jsr 	ICSetPointer 				; zTemp0 = (string)
.a097		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; zero the result.
.a09a		5a		phy				phy
.a09b		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a09d						_ICULoop:
.a09d		c8		iny				iny
.a09e		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0a0		cd c7 07	cmp $07c7			cmp 	ICSeperator
.a0a3		d0 02		bne $a0a7			bne 	_ICUNoMatch
.a0a5		f6 58		inc $58,x			inc 	NSMantissa0,x
.a0a7						_ICUNoMatch:
.a0a7		c9 00		cmp #$00			cmp 	#0
.a0a9		d0 f2		bne $a09d			bne 	_ICULoop
.a0ab		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a0ad		7a		ply				ply
.a0ae		60		rts				rts
.a0af						ItemGetUnary:
.a0af		fa		plx				plx
.a0b0		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; search string
.a0b3		20 c4 93	jsr $93c4			jsr 	CheckComma
.a0b6		e8		inx				inx 								; get count
.a0b7		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.a0ba		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a0bc		f0 61		beq $a11f			beq 	ICGSRange
.a0be		e8		inx				inx 								; get seperator.
.a0bf		20 03 a1	jsr $a103			jsr 	ICGetSeperator
.a0c2		ca		dex				dex
.a0c3		ca		dex				dex
.a0c4		5a		phy				phy
.a0c5		20 24 a1	jsr $a124			jsr 	ICSetPointer 				; zTemp0 points to string.
.a0c8		a0 00		ldy #$00			ldy 	#0
.a0ca		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a0cc		f0 0e		beq $a0dc			beq 	_IGUFoundStart
.a0ce						_IGUFindNext:
.a0ce		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a0d0		f0 4d		beq $a11f			beq 	ICGSRange 					; eol, not found.
.a0d2		c8		iny				iny
.a0d3		cd c7 07	cmp $07c7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a0d6		d0 f6		bne $a0ce			bne 	_IGUFindNext
.a0d8		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a0da		d0 f2		bne $a0ce			bne 	_IGUFindNext
.a0dc						_IGUFoundStart:
.a0dc		84 38		sty $38				sty 	zTemp1 						; save start
.a0de		88		dey				dey
.a0df						_IGUFindLength:
.a0df		c8		iny				iny 								; forward till seperator/EOS
.a0e0		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0e2		f0 05		beq $a0e9			beq 	_IGUFoundLength
.a0e4		cd c7 07	cmp $07c7			cmp 	ICSeperator
.a0e7		d0 f6		bne $a0df			bne 	_IGUFindLength
.a0e9						_IGUFoundLength:
.a0e9		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a0eb		98		tya				tya 								; calculate length of new string.
.a0ec		38		sec				sec
.a0ed		e5 38		sbc $38				sbc 	zTemp1
.a0ef		20 80 b5	jsr $b580			jsr 	StringTempAllocate 			; allocate bytes for it.
.a0f2		a4 38		ldy $38				ldy 	zTemp1
.a0f4						_IGUCopySub:
.a0f4		c4 39		cpy $39				cpy 	zTemp1+1
.a0f6		f0 08		beq $a100			beq 	_IGUCopyOver
.a0f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0fa		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.a0fd		c8		iny				iny
.a0fe		80 f4		bra $a0f4			bra 	_IGUCopySub
.a100						_IGUCopyOver:
.a100		7a		ply				ply
.a101		60		rts				rts
>a102		db						.byte 	$DB 						; causes a break in the emulator
.a103						ICGetSeperator:
.a103		20 c4 93	jsr $93c4			jsr 	CheckComma 					; preceding comma
.a106		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; seperator string
.a109		20 24 a1	jsr $a124			jsr 	ICSetPointer 				; access it
.a10c		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a10e		8d c7 07	sta $07c7			sta 	ICSeperator
.a111		f0 0c		beq $a11f			beq 	ICGSRange 					; check LEN(seperator) = 1
.a113		5a		phy				phy
.a114		a0 01		ldy #$01			ldy 	#1
.a116		b1 36		lda ($36),y			lda 	(zTemp0),y
.a118		d0 05		bne $a11f			bne 	ICGSRange
.a11a		7a		ply				ply
.a11b		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; check following )
.a11e		60		rts				rts
.a11f						ICGSRange:
.a11f		a9 04		lda #$04		lda	#4
.a121		4c d5 93	jmp $93d5		jmp	ErrorHandler
.a124						ICSetPointer:
.a124		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a126		85 36		sta $36				sta 	zTemp0
.a128		b5 60		lda $60,x			lda 	NSMantissa1,x
.a12a		85 37		sta $37				sta 	zTemp0+1
.a12c		60		rts				rts
.07c7						ICSeperator:
>07c7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a12d						SpcUnary:
.a12d		fa		plx				plx 								; restore stack pos
.a12e		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger			; get value
.a131		5a		phy				phy
.a132		48		pha				pha 								; save count
.a133		20 80 b5	jsr $b580			jsr 	StringTempAllocate
.a136		7a		ply				ply 								; to do count in Y
.a137						_SpcLoop:
.a137		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a139		f0 08		beq $a143			beq 	_SpcExit
.a13b		a9 20		lda #$20			lda 	#32
.a13d		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.a140		88		dey				dey
.a141		80 f4		bra $a137			bra 	_SpcLoop
.a143						_SpcExit:
.a143		7a		ply				ply
.a144		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.a147		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a148						Unary_Str:
.a148		fa		plx				plx
.a149		20 83 a2	jsr $a283			jsr 	EvaluateNumber  			; get number
.a14c		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; closing bracket
.a14f		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a151		20 6a a1	jsr $a16a			jsr 	ConvertNumberToString 		; do the conversion.
.a154		a9 21		lda #$21			lda		#33 						; create buffer
.a156		20 80 b5	jsr $b580			jsr 	StringTempAllocate 			; allocate memory
.a159		da		phx				phx  								; copy the converted string into the buffer.
.a15a		a2 00		ldx #$00			ldx 	#0
.a15c						_USCopy:
.a15c		bd 65 06	lda $0665,x			lda 	decimalBuffer,x
.a15f		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.a162		e8		inx				inx
.a163		bd 65 06	lda $0665,x			lda 	decimalBuffer,x
.a166		d0 f4		bne $a15c			bne 	_USCopy
.a168		fa		plx				plx
.a169		60		rts				rts
.a16a						ConvertNumberToString:
.a16a		5a		phy				phy 								; save code position
.a16b		8d 30 04	sta $0430			sta 	decimalPlaces	 			; save number of DPs.
.a16e		9c 31 04	stz $0431			stz 	dbOffset 					; offset into decimal buffer = start.
.a171		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a173		10 09		bpl $a17e			bpl 	_CNTSNotNegative
.a175		29 7f		and #$7f			and 	#$7F 						; make +ve
.a177		95 50		sta $50,x			sta 	NSStatus,x
.a179		a9 2d		lda #$2d			lda 	#"-"
.a17b		20 df a1	jsr $a1df			jsr 	WriteDecimalBuffer
.a17e						_CNTSNotNegative:
.a17e		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a180		f0 12		beq $a194			beq 	_CNTSNotFloat
.a182		e8		inx				inx 								; round up so we don't get too many 6.999999
.a183		a9 01		lda #$01			lda 	#1
.a185		20 37 a3	jsr $a337			jsr 	NSMSetByte
.a188		ca		dex				dex
.a189		b5 78		lda $78,x			lda		NSExponent,x
.a18b		95 79		sta $79,x			sta 	NSExponent+1,x
.a18d		a9 08		lda #$08			lda 	#NSTFloat
.a18f		95 51		sta $51,x			sta 	NSStatus+1,x
.a191		20 2a 99	jsr $992a			jsr 	FloatAdd
.a194						_CNTSNotFloat:
.a194		20 c1 a1	jsr $a1c1			jsr 	MakePlusTwoString 			; do the integer part.
.a197		20 f0 99	jsr $99f0			jsr 	FloatFractionalPart 		; get the fractional part
.a19a		20 a1 9a	jsr $9aa1			jsr 	NSNormalise					; normalise , exit if zero
.a19d		f0 20		beq $a1bf			beq 	_CNTSExit
.a19f		a9 2e		lda #$2e			lda 	#"."
.a1a1		20 df a1	jsr $a1df			jsr 	WriteDecimalBuffer 			; write decimal place
.a1a4						_CNTSDecimal:
.a1a4		ce 30 04	dec $0430			dec 	decimalPlaces 				; done all the decimals
.a1a7		30 16		bmi $a1bf			bmi 	_CNTSExit
.a1a9		e8		inx				inx 								; x 10.0
.a1aa		a9 0a		lda #$0a			lda 	#10
.a1ac		20 37 a3	jsr $a337			jsr 	NSMSetByte
.a1af		a9 08		lda #$08			lda 	#NSTFloat
.a1b1		95 50		sta $50,x			sta 	NSStatus,x
.a1b3		ca		dex				dex
.a1b4		20 6f 9a	jsr $9a6f			jsr 	FloatMultiply
.a1b7		20 c1 a1	jsr $a1c1			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a1ba		20 f0 99	jsr $99f0			jsr 	FloatFractionalPart 		; get the fractional part
.a1bd		80 e5		bra $a1a4			bra 	_CNTSDecimal 				; keep going.
.a1bf						_CNTSExit:
.a1bf		7a		ply				ply
.a1c0		60		rts				rts
.a1c1						MakePlusTwoString:
.a1c1		da		phx				phx
.a1c2		20 18 a3	jsr $a318			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a1c5		e8		inx				inx 								; access it
.a1c6		e8		inx				inx
.a1c7		20 48 9a	jsr $9a48			jsr 	FloatIntegerPart 			; make it an integer
.a1ca		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a1cc		20 5a 98	jsr $985a			jsr 	ConvertInt32
.a1cf		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a1d1						_MPTSCopy:
.a1d1		bd 43 06	lda $0643,x			lda 	numberBuffer,x
.a1d4		20 df a1	jsr $a1df			jsr 	WriteDecimalBuffer
.a1d7		e8		inx				inx
.a1d8		bd 43 06	lda $0643,x			lda 	numberBuffer,x
.a1db		d0 f4		bne $a1d1			bne 	_MPTSCopy
.a1dd		fa		plx				plx
.a1de		60		rts				rts
.a1df						WriteDecimalBuffer:
.a1df		da		phx				phx
.a1e0		ae 31 04	ldx $0431			ldx 	dbOffset
.a1e3		9d 65 06	sta $0665,x			sta 	decimalBuffer,x
.a1e6		9e 66 06	stz $0666,x			stz 	decimalBuffer+1,x
.a1e9		ee 31 04	inc $0431			inc 	dbOffset
.a1ec		fa		plx				plx
.a1ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a1ee						Unary_Left:
.a1ee		fa		plx				plx
.a1ef		18		clc				clc 								; only one parameter
.a1f0		20 53 a2	jsr $a253			jsr 	SubstringInitial 			; set up.
.a1f3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a1f5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1f7		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a1f9		80 25		bra $a220			bra 	SubstringMain
.a1fb						Unary_Right:
.a1fb		fa		plx				plx
.a1fc		18		clc				clc 								; only one parameter
.a1fd		20 53 a2	jsr $a253			jsr 	SubstringInitial 			; set up.
.a200		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a202		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a204		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a206		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a208		b0 02		bcs $a20c			bcs 	_URNotUnderflow
.a20a		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a20c						_URNotUnderflow:
.a20c		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a20e		80 10		bra $a220			bra 	SubstringMain
.a210						Unary_Mid:
.a210		fa		plx				plx
.a211		38		sec				sec 								; two parameters
.a212		20 53 a2	jsr $a253			jsr 	SubstringInitial 			; set up.
.a215		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a217		f0 04		beq $a21d			beq 	_UMError
.a219		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a21b		80 03		bra $a220			bra 	SubstringMain
.a21d						_UMError:
.a21d		4c bc a4	jmp $a4bc			jmp 	ArgumentError
.a220						SubstringMain:
.a220		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a222		d5 78		cmp $78,x			cmp 	NSExponent,x
.a224		b0 27		bcs $a24d			bcs 	_SSMNull 					; if so, return an empty string.
.a226		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a228		f0 23		beq $a24d			beq 	_SSMNull 					; return empty string.
.a22a		18		clc				clc 								; add the offset +1 to the address and
.a22b		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a22d		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a22f		85 36		sta $36				sta 	zTemp0
.a231		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a233		69 00		adc #$00			adc 	#0
.a235		85 37		sta $37				sta 	zTemp0+1
.a237						_SSMNoCarry:
.a237		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a239		20 80 b5	jsr $b580			jsr 	StringTempAllocate 			; allocate that many characters
.a23c		5a		phy				phy 								; save Y
.a23d		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a23f						_SSMCopy:
.a23f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a241		f0 08		beq $a24b			beq 	_SSMEString 				; no more to copy
.a243		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite 			; and write it out.
.a246		c8		iny				iny
.a247		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a249		d0 f4		bne $a23f			bne 	_SSMCopy
.a24b						_SSMEString:
.a24b		7a		ply				ply
.a24c						_SSMExit:
.a24c		60		rts				rts
.a24d						_SSMNull:
.a24d		a9 00		lda #$00			lda 	#0
.a24f		20 80 b5	jsr $b580			jsr 	StringTempAllocate
.a252		60		rts				rts
.a253						SubstringInitial:
.a253		da		phx				phx 								; save initial stack position
.a254		08		php				php 								; save carry on stack indicating 2 parameters
.a255		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; get a string
.a258		5a		phy				phy 								; calculate length to exponent.
.a259		a0 ff		ldy #$ff			ldy 	#$FF
.a25b						_SIFindLength:
.a25b		c8		iny				iny
.a25c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a25e		d0 fb		bne $a25b			bne 	_SIFindLength
.a260		98		tya				tya
.a261		95 78		sta $78,x			sta 	NSExponent,x
.a263		7a		ply				ply
.a264		e8		inx				inx
.a265		20 c4 93	jsr $93c4			jsr 	CheckComma 					; comma next
.a268		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get next parameter
.a26b		28		plp				plp 								; is it the last parameter ?
.a26c		90 07		bcc $a275			bcc 	_SSIExit 					; if so, exit.
.a26e		e8		inx				inx
.a26f		20 c4 93	jsr $93c4			jsr 	CheckComma 					; comma next
.a272		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get last parameter
.a275						_SSIExit:
.a275		fa		plx				plx
.a276		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; check closing bracket
.a279		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a27a						EvaluateValue:
.a27a		48		pha				pha
.a27b		20 df 98	jsr $98df			jsr		EvaluateExpression 			; expression
.a27e		20 a2 9b	jsr $9ba2			jsr 	Dereference					; derefernce it
.a281		68		pla				pla
.a282		60		rts				rts
.a283						EvaluateNumber:
.a283		20 7a a2	jsr $a27a			jsr 	EvaluateValue 				; get a value
.a286		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a288		29 10		and #$10			and 	#NSBIsString
.a28a		d0 13		bne $a29f			bne 	HelperTypeError
.a28c		60		rts				rts
.a28d						EvaluateString:
.a28d		20 7a a2	jsr $a27a			jsr 	EvaluateValue 				; get a value
.a290		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a292		29 10		and #$10			and 	#NSBIsString
.a294		f0 09		beq $a29f			beq 	HelperTypeError
.a296						CopyAddressToTemp0:
.a296		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a298		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a29a		b5 60		lda $60,x			lda 	NSMantissa1,x
.a29c		85 37		sta $37				sta 	zTemp0+1
.a29e		60		rts				rts
.a29f						HelperTypeError:
.a29f		4c b7 a4	jmp $a4b7			jmp 	TypeError
.a2a2						EvaluateInteger:
.a2a2		20 83 a2	jsr $a283			jsr 	EvaluateNumber
.a2a5		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a2a7		d0 09		bne $a2b2			bne 	HelperValueError 			; if not, it's a float.
.a2a9		60		rts				rts
.a2aa						EvaluateUnsignedInteger:
.a2aa		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger 			; check integer is +ve
.a2ad		b5 50		lda $50,x			lda 	NSStatus,x
.a2af		30 01		bmi $a2b2			bmi 	HelperValueError
.a2b1		60		rts				rts
.a2b2						HelperValueError:
.a2b2		4c bc a4	jmp $a4bc			jmp 	ArgumentError
.a2b5						Evaluate16BitInteger:
.a2b5		20 aa a2	jsr $a2aa			jsr	 	EvaluateUnsignedInteger		; get integer
.a2b8		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a2ba		15 68		ora $68,x			ora 	NSMantissa2,x
.a2bc		d0 f4		bne $a2b2			bne 	HelperValueError
.a2be		60		rts				rts
.a2bf						Evaluate16BitIntegerSigned:
.a2bf		20 a2 a2	jsr $a2a2			jsr	 	EvaluateInteger				; get integer
.a2c2		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a2c4		15 68		ora $68,x			ora 	NSMantissa2,x
.a2c6		d0 ea		bne $a2b2			bne 	HelperValueError
.a2c8		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a2ca		10 03		bpl $a2cf			bpl 	_EISNotSigned
.a2cc		20 fe a2	jsr $a2fe			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a2cf						_EISNotSigned:
.a2cf		60		rts				rts
.a2d0						Evaluate8BitInteger:
.a2d0		20 aa a2	jsr $a2aa			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a2d3		d0 dd		bne $a2b2			bne 	HelperValueError
.a2d5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a2d7		15 68		ora $68,x			ora 	NSMantissa2,x
.a2d9		15 60		ora $60,x			ora 	NSMantissa1,x
.a2db		d0 d5		bne $a2b2			bne 	HelperValueError
.a2dd		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2df		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2e0						Multiply8x8:
.a2e0		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2e1		85 36		sta $36			  	sta 	zTemp0
.a2e3		86 37		stx $37				stx 	zTemp0+1
.a2e5		a9 00		lda #$00			lda 	#0
.a2e7		a2 08		ldx #$08			ldx 	#8
.a2e9						_M88Loop:
.a2e9		90 03		bcc $a2ee			bcc 	_M88NoAdd
.a2eb		18		clc				clc
.a2ec		65 37		adc $37				adc 	zTemp0+1
.a2ee						_M88NoAdd:
.a2ee		6a		ror a				ror 	a
.a2ef		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2f1		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2f2		d0 f5		bne $a2e9			bne 	_M88Loop
.a2f4		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a2f7						NSMNegate:
.a2f7		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a2f9		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a2fb		95 50		sta $50,x			sta 	NSStatus,x
.a2fd		60		rts				rts
.a2fe						NSMNegateMantissa:
.a2fe		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a2ff		a9 00		lda #$00			lda 	#0
.a301		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a303		95 58		sta $58,x			sta 	NSMantissa0,x
.a305		a9 00		lda #$00			lda 	#0
.a307		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a309		95 60		sta $60,x			sta 	NSMantissa1,x
.a30b		a9 00		lda #$00			lda 	#0
.a30d		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a30f		95 68		sta $68,x			sta 	NSMantissa2,x
.a311		a9 00		lda #$00			lda 	#0
.a313		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a315		95 70		sta $70,x			sta 	NSMantissa3,x
.a317		60		rts				rts
.a318						NSMShiftUpTwo:
.a318		b5 58		lda $58,x			lda 	NSMantissa0,x
.a31a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a31c		b5 60		lda $60,x			lda 	NSMantissa1,x
.a31e		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a320		b5 68		lda $68,x			lda 	NSMantissa2,x
.a322		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a324		b5 70		lda $70,x			lda 	NSMantissa3,x
.a326		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a328		b5 78		lda $78,x			lda 	NSExponent,x
.a32a		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a32c		b5 50		lda $50,x			lda 	NSStatus,x
.a32e		95 52		sta $52,x			sta 	NSStatus+2,x
.a330		60		rts				rts
.a331						NSMSetZeroMantissaOnly:
.a331		a9 00		lda #$00			lda 	#0
.a333		80 06		bra $a33b			bra 	NSMSetMantissa
.a335						NSMSetZero:
.a335		a9 00		lda #$00			lda 	#0
.a337						NSMSetByte:
.a337		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a339		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a33b						NSMSetMantissa:
.a33b		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a33d		74 60		stz $60,x			stz 	NSMantissa1,x
.a33f		74 68		stz $68,x			stz 	NSMantissa2,x
.a341		74 70		stz $70,x			stz 	NSMantissa3,x
.a343		60		rts				rts
.a344						NSMShiftLeft:
.a344		18		clc				clc
.a345						NSMRotateLeft:
.a345		36 58		rol $58,x			rol 	NSMantissa0,x
.a347		36 60		rol $60,x			rol		NSMantissa1,x
.a349		36 68		rol $68,x			rol		NSMantissa2,x
.a34b		36 70		rol $70,x			rol		NSMantissa3,x
.a34d		60		rts				rts
.a34e						NSMShiftRight:
.a34e		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a350		76 68		ror $68,x			ror		NSMantissa2,x
.a352		76 60		ror $60,x			ror		NSMantissa1,x
.a354		76 58		ror $58,x			ror		NSMantissa0,x
.a356		60		rts				rts
.a357						NSMIsZero:
.a357		b5 70		lda $70,x			lda 	NSMantissa3,x
.a359		15 68		ora $68,x			ora		NSMantissa2,x
.a35b		15 60		ora $60,x			ora		NSMantissa1,x
.a35d		15 58		ora $58,x			ora		NSMantissa0,x
.a35f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a360						Assemble_ora:
.a360		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a363		01					.byte $01
.a364						Assemble_and:
.a364		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a367		21					.byte $21
.a368						Assemble_eor:
.a368		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a36b		41					.byte $41
.a36c						Assemble_adc:
.a36c		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a36f		61					.byte $61
.a370						Assemble_sta:
.a370		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a373		81					.byte $81
.a374						Assemble_lda:
.a374		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a377		a1					.byte $a1
.a378						Assemble_cmp:
.a378		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a37b		c1					.byte $c1
.a37c						Assemble_sbc:
.a37c		20 b8 84	jsr $84b8		jsr	AssembleGroup1
>a37f		e1					.byte $e1
.a380						Assemble_asl:
.a380		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a383		02					.byte $02
>a384		75					.byte $75
.a385						Assemble_rol:
.a385		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a388		22					.byte $22
>a389		75					.byte $75
.a38a						Assemble_lsr:
.a38a		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a38d		42					.byte $42
>a38e		75					.byte $75
.a38f						Assemble_ror:
.a38f		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a392		62					.byte $62
>a393		75					.byte $75
.a394						Assemble_stx:
.a394		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a397		82					.byte $82
>a398		50					.byte $50
.a399						Assemble_ldx:
.a399		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a39c		a2					.byte $a2
>a39d		d0					.byte $d0
.a39e						Assemble_dec:
.a39e		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3a1		c2					.byte $c2
>a3a2		55					.byte $55
.a3a3						Assemble_inc:
.a3a3		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3a6		e2					.byte $e2
>a3a7		55					.byte $55
.a3a8						Assemble_stz:
.a3a8		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3ab		60					.byte $60
>a3ac		44					.byte $44
.a3ad						Assemble_bit:
.a3ad		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3b0		20					.byte $20
>a3b1		55					.byte $55
.a3b2						Assemble_sty:
.a3b2		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3b5		80					.byte $80
>a3b6		54					.byte $54
.a3b7						Assemble_ldy:
.a3b7		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3ba		a0					.byte $a0
>a3bb		d5					.byte $d5
.a3bc						Assemble_cpy:
.a3bc		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3bf		c0					.byte $c0
>a3c0		d4					.byte $d4
.a3c1						Assemble_cpx:
.a3c1		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3c4		e0					.byte $e0
>a3c5		d0					.byte $d0
.a3c6						Assemble_tsb:
.a3c6		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3c9		00					.byte $00
>a3ca		50					.byte $50
.a3cb						Assemble_trb:
.a3cb		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3ce		10					.byte $10
>a3cf		50					.byte $50
.a3d0						Assemble_jsr:
.a3d0		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3d3		14					.byte $14
>a3d4		10					.byte $10
.a3d5						Assemble_jmp:
.a3d5		20 bf 84	jsr $84bf		jsr	AssembleGroup2
>a3d8		40					.byte $40
>a3d9		10					.byte $10
.a3da						Assemble_bpl:
.a3da		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3dd		10					.byte $10
.a3de						Assemble_bmi:
.a3de		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3e1		30					.byte $30
.a3e2						Assemble_bvc:
.a3e2		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3e5		50					.byte $50
.a3e6						Assemble_bvs:
.a3e6		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3e9		70					.byte $70
.a3ea						Assemble_bcc:
.a3ea		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3ed		90					.byte $90
.a3ee						Assemble_bcs:
.a3ee		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3f1		b0					.byte $b0
.a3f2						Assemble_bne:
.a3f2		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3f5		d0					.byte $d0
.a3f6						Assemble_beq:
.a3f6		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3f9		f0					.byte $f0
.a3fa						Assemble_bra:
.a3fa		20 10 85	jsr $8510		jsr	AssembleGroup3
>a3fd		80					.byte $80
.a3fe						Assemble_brk:
.a3fe		20 44 85	jsr $8544		jsr	AssembleGroup4
>a401		00					.byte $00
.a402						Assemble_php:
.a402		20 44 85	jsr $8544		jsr	AssembleGroup4
>a405		08					.byte $08
.a406						Assemble_clc:
.a406		20 44 85	jsr $8544		jsr	AssembleGroup4
>a409		18					.byte $18
.a40a						Assemble_plp:
.a40a		20 44 85	jsr $8544		jsr	AssembleGroup4
>a40d		28					.byte $28
.a40e						Assemble_sec:
.a40e		20 44 85	jsr $8544		jsr	AssembleGroup4
>a411		38					.byte $38
.a412						Assemble_rti:
.a412		20 44 85	jsr $8544		jsr	AssembleGroup4
>a415		40					.byte $40
.a416						Assemble_pha:
.a416		20 44 85	jsr $8544		jsr	AssembleGroup4
>a419		48					.byte $48
.a41a						Assemble_cli:
.a41a		20 44 85	jsr $8544		jsr	AssembleGroup4
>a41d		58					.byte $58
.a41e						Assemble_phy:
.a41e		20 44 85	jsr $8544		jsr	AssembleGroup4
>a421		5a					.byte $5a
.a422						Assemble_rts:
.a422		20 44 85	jsr $8544		jsr	AssembleGroup4
>a425		60					.byte $60
.a426						Assemble_pla:
.a426		20 44 85	jsr $8544		jsr	AssembleGroup4
>a429		68					.byte $68
.a42a						Assemble_sei:
.a42a		20 44 85	jsr $8544		jsr	AssembleGroup4
>a42d		78					.byte $78
.a42e						Assemble_ply:
.a42e		20 44 85	jsr $8544		jsr	AssembleGroup4
>a431		7a					.byte $7a
.a432						Assemble_dey:
.a432		20 44 85	jsr $8544		jsr	AssembleGroup4
>a435		88					.byte $88
.a436						Assemble_txa:
.a436		20 44 85	jsr $8544		jsr	AssembleGroup4
>a439		8a					.byte $8a
.a43a						Assemble_tya:
.a43a		20 44 85	jsr $8544		jsr	AssembleGroup4
>a43d		98					.byte $98
.a43e						Assemble_txs:
.a43e		20 44 85	jsr $8544		jsr	AssembleGroup4
>a441		9a					.byte $9a
.a442						Assemble_tay:
.a442		20 44 85	jsr $8544		jsr	AssembleGroup4
>a445		a8					.byte $a8
.a446						Assemble_tax:
.a446		20 44 85	jsr $8544		jsr	AssembleGroup4
>a449		aa					.byte $aa
.a44a						Assemble_clv:
.a44a		20 44 85	jsr $8544		jsr	AssembleGroup4
>a44d		b8					.byte $b8
.a44e						Assemble_tsx:
.a44e		20 44 85	jsr $8544		jsr	AssembleGroup4
>a451		ba					.byte $ba
.a452						Assemble_iny:
.a452		20 44 85	jsr $8544		jsr	AssembleGroup4
>a455		c8					.byte $c8
.a456						Assemble_dex:
.a456		20 44 85	jsr $8544		jsr	AssembleGroup4
>a459		ca					.byte $ca
.a45a						Assemble_cld:
.a45a		20 44 85	jsr $8544		jsr	AssembleGroup4
>a45d		d8					.byte $d8
.a45e						Assemble_phx:
.a45e		20 44 85	jsr $8544		jsr	AssembleGroup4
>a461		da					.byte $da
.a462						Assemble_stp:
.a462		20 44 85	jsr $8544		jsr	AssembleGroup4
>a465		db					.byte $db
.a466						Assemble_inx:
.a466		20 44 85	jsr $8544		jsr	AssembleGroup4
>a469		e8					.byte $e8
.a46a						Assemble_nop:
.a46a		20 44 85	jsr $8544		jsr	AssembleGroup4
>a46d		ea					.byte $ea
.a46e						Assemble_sed:
.a46e		20 44 85	jsr $8544		jsr	AssembleGroup4
>a471		f8					.byte $f8
.a472						Assemble_plx:
.a472		20 44 85	jsr $8544		jsr	AssembleGroup4
>a475		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a476						DecimalScalarTable:
>a476		66 66 66 66				.dword $66666666 ; 0.1
>a47a		de					.byte $de
>a47b		1f 85 eb 51				.dword $51eb851f ; 0.01
>a47f		db					.byte $db
>a480		4c 37 89 41				.dword $4189374c ; 0.001
>a484		d8					.byte $d8
>a485		ac 8b db 68				.dword $68db8bac ; 0.0001
>a489		d4					.byte $d4
>a48a		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a48e		d1					.byte $d1
>a48f		83 de 1b 43				.dword $431bde83 ; 1e-06
>a493		ce					.byte $ce
>a494		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a498		ca					.byte $ca
>a499		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a49d		c7					.byte $c7
>a49e		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a4a2		c4					.byte $c4
>a4a3		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a4a7		c0					.byte $c0
>a4a8		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a4ac		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a4ad						SyntaxError:
.a4ad		a9 02		lda #$02		lda	#2
.a4af		4c d5 93	jmp $93d5		jmp	ErrorHandler
.a4b2						RangeError:
.a4b2		a9 04		lda #$04		lda	#4
.a4b4		4c d5 93	jmp $93d5		jmp	ErrorHandler
.a4b7						TypeError:
.a4b7		a9 05		lda #$05		lda	#5
.a4b9		4c d5 93	jmp $93d5		jmp	ErrorHandler
.a4bc						ArgumentError:
.a4bc		a9 07		lda #$07		lda	#7
.a4be		4c d5 93	jmp $93d5		jmp	ErrorHandler
.a4c1						NotDoneError:
.a4c1		a9 0c		lda #$0c		lda	#12
.a4c3		4c d5 93	jmp $93d5		jmp	ErrorHandler
.a4c6						ErrorText:
>a4c6		42 72 65 61 6b 00			.text	"Break",0
>a4cc		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a4d4		72 72 6f 72 00
>a4d9		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a4e1		20 62 79 20 7a 65 72 6f 00
>a4ea		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4f2		61 6e 67 65 00
>a4f7		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4ff		6d 61 74 63 68 00
>a505		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a50d		65 6d 6f 72 79 00
>a513		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a51b		61 72 67 75 6d 65 6e 74 00
>a524		53 74 6f 70 00				.text	"Stop",0
>a529		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a531		6f 6f 20 6c 6f 6e 67 00
>a539		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a541		6e 20 66 61 69 6c 65 64 00
>a54a		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a552		61 74 61 00
>a556		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a55e		65 6e 74 65 64 00
>a564		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a56c		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a578		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a580		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a58d		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a595		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a5a2		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a5aa		68 6f 75 74 20 57 68 69 6c 65 00
>a5b5		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a5bd		68 6f 75 74 20 46 6f 72 00
>a5c6		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a5ce		61 63 6b 20 66 75 6c 6c 00
>a5d7		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a5df		75 63 74 75 72 65 00
>a5e6		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5ee		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5fb		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a603		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a611		41 72 72 61 79 20 73 69			.text	"Array size",0
>a619		7a 65 00
>a61c		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a624		79 20 69 6e 64 65 78 00
>a62c		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a634		74 20 64 65 63 6c 61 72 65 64 00
>a63f		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a647		20 66 6f 75 6e 64 00
>a64e		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a656		65 72 72 6f 72 00
>a65c		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a664		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e76b		09 09 30 34 2f 30 33 2f			.text 9,9,"04/03/23 01b"
>e773		32 33 20 30 31 62

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a66a						MemoryDeleteLine:
.a66a		20 89 a6	jsr $a689			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a66d		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a66f		a8		tay				tay
.a670						_MDDLLoop:
.a670		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a672		92 30		sta ($30)			sta 	(codePtr)
.a674		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a676		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a678		d0 07		bne $a681			bne 	_MDLDLNext
.a67a		a5 31		lda $31				lda 	codePtr+1
.a67c		c5 3b		cmp $3b				cmp 	zTemp2+1
.a67e		d0 01		bne $a681			bne 	_MDLDLNext
.a680						_MDDLExit:
.a680		60		rts				rts
.a681						_MDLDLNext:
.a681		e6 30		inc $30				inc 	codePtr						; next byte
.a683		d0 eb		bne $a670			bne 	_MDDLLoop
.a685		e6 31		inc $31				inc 	codePtr+1
.a687		80 e7		bra $a670			bra 	_MDDLLoop
.a689						IMemoryFindEnd:
.a689		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a68b		85 3a		sta $3a				sta 	0+zTemp2
.a68d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a68f		85 3b		sta $3b				sta 	1+zTemp2
.a691						_MDLFELoop:
.a691		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a693		f0 0b		beq $a6a0			beq 	_MDLFEExit
.a695		18		clc				clc
.a696		65 3a		adc $3a				adc 	zTemp2
.a698		85 3a		sta $3a				sta 	zTemp2
.a69a		90 f5		bcc $a691			bcc 	_MDLFELoop
.a69c		e6 3b		inc $3b				inc 	zTemp2+1
.a69e		80 f1		bra $a691			bra 	_MDLFELoop
.a6a0						_MDLFEExit:
.a6a0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a6a1						MemoryInsertLine:
.a6a1		08		php				php
.a6a2		20 89 a6	jsr $a689			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6a5		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a6a7		1a		inc a				inc 	a
.a6a8		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a6aa		b0 36		bcs $a6e2			bcs 	_MDLIError 					; no, fail.
.a6ac		28		plp				plp 								; do at a specific point or the end ?
.a6ad		90 08		bcc $a6b7			bcc 	_MDLIFound 					; if specific point already set.
.a6af		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a6b1		85 30		sta $30				sta 	codePtr 					; end.
.a6b3		a5 3b		lda $3b				lda 	zTemp2+1
.a6b5		85 31		sta $31				sta 	codePtr+1
.a6b7						_MDLIFound:
.a6b7		ad 46 04	lda $0446			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a6ba		a8		tay				tay
.a6bb						_MDLIInsert:
.a6bb		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a6bd		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a6bf		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a6c1		c5 3a		cmp $3a				cmp 	zTemp2
.a6c3		d0 06		bne $a6cb			bne 	_MDLINext
.a6c5		a5 31		lda $31				lda 	codePtr+1
.a6c7		c5 3b		cmp $3b				cmp 	zTemp2+1
.a6c9		f0 0a		beq $a6d5			beq 	_MDLIHaveSpace
.a6cb						_MDLINext:
.a6cb		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a6cd		d0 02		bne $a6d1			bne 	_MDLINoBorrow
.a6cf		c6 3b		dec $3b				dec 	zTemp2+1
.a6d1						_MDLINoBorrow:
.a6d1		c6 3a		dec $3a				dec 	zTemp2
.a6d3		80 e6		bra $a6bb			bra 	_MDLIInsert
.a6d5						_MDLIHaveSpace:
.a6d5		ac 46 04	ldy $0446			ldy 	tokenOffset 				; bytes to copy
.a6d8		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a6d9						_MDLICopy:
.a6d9		b9 46 04	lda $0446,y			lda 	tokenOffset,y
.a6dc		91 30		sta ($30),y			sta 	(codePtr),y
.a6de		88		dey				dey
.a6df		10 f8		bpl $a6d9			bpl 	_MDLICopy
.a6e1		60		rts				rts
.a6e2						_MDLIError:
.a6e2		a9 06		lda #$06		lda	#6
.a6e4		4c d5 93	jmp $93d5		jmp	ErrorHandler
.a6e7						MDLAppendLine:
.a6e7		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a6e9		85 36		sta $36				sta 	zTemp0
.a6eb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6ed		85 38		sta $38				sta 	0+zTemp1
.a6ef		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6f1		85 39		sta $39				sta 	1+zTemp1
.a6f3		b2 38		lda ($38)			lda 	(zTemp1)
.a6f5		d0 0a		bne $a701			bne 	_MDLANoInitialise
.a6f7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6f9		8d c8 07	sta $07c8			sta 	0+AppendPointer
.a6fc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6fe		8d c9 07	sta $07c9			sta 	1+AppendPointer
.a701						_MDLANoInitialise:
.a701		18		clc				clc
.a702		ad c8 07	lda $07c8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a705		85 38		sta $38				sta 	zTemp1
.a707		72 36		adc ($36)			adc 	(zTemp0)
.a709		8d c8 07	sta $07c8			sta 	AppendPointer
.a70c		ad c9 07	lda $07c9			lda 	AppendPointer+1
.a70f		85 39		sta $39				sta 	zTemp1+1
.a711		69 00		adc #$00			adc 	#0
.a713		8d c9 07	sta $07c9			sta 	AppendPointer+1
.a716		a0 00		ldy #$00			ldy 	#0
.a718						_MDLACopy:
.a718		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a71a		91 38		sta ($38),y			sta 	(zTemp1),y
.a71c		c8		iny				iny
.a71d		98		tya				tya
.a71e		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a720		d0 f6		bne $a718			bne 	_MDLACopy
.a722		a9 00		lda #$00			lda 	#0 							; end of program.
.a724		91 38		sta ($38),y			sta 	(zTemp1),y
.a726		60		rts				rts
.07c8						AppendPointer:
>07c8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a727						MemoryNew:
.a727		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a729		85 30		sta $30				sta 	codePtr
.a72b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a72d		85 31		sta $31				sta 	codePtr+1
.a72f		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a731		92 30		sta ($30)			sta 	(codePtr)
.a733		60		rts				rts
.a734						MemoryInline:
.a734		98		tya				tya 								; put address into stack,x
.a735		18		clc				clc  								; get the offset, add codePtr
.a736		65 30		adc $30				adc 	codePtr
.a738		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a73a		a5 31		lda $31				lda 	codePtr+1
.a73c		69 00		adc #$00			adc 	#0
.a73e		95 60		sta $60,x			sta 	NSMantissa1,x
.a740		74 68		stz $68,x			stz 	NSMantissa2,x
.a742		74 70		stz $70,x			stz 	NSMantissa3,x
.a744		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a745						MemorySearch:
.a745		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a747		86 37		stx $37				stx 	zTemp0+1
.a749		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a74b		85 30		sta $30				sta 	codePtr
.a74d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a74f		85 31		sta $31				sta 	codePtr+1
.a751						_MTAXLoop:
.a751		b2 30		lda ($30)			lda 	(codePtr)
.a753		18		clc				clc
.a754		f0 21		beq $a777			beq 	_MTAXExit 					; reached end, exit with CC.
.a756		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a758		b1 30		lda ($30),y			lda 	(codePtr),y
.a75a		38		sec				sec
.a75b		e5 36		sbc $36				sbc 	zTemp0
.a75d		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a75f		c8		iny				iny 								; do the MSB
.a760		b1 30		lda ($30),y			lda 	(codePtr),y
.a762		e5 37		sbc $37				sbc 	zTemp0+1
.a764		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a766		f0 0f		beq $a777			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a768		b0 0d		bcs $a777			bcs 	_MTAXExit 					; current < required exit
.a76a		18		clc				clc
.a76b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a76d		65 30		adc $30				adc 	codePtr
.a76f		85 30		sta $30				sta 	codePtr
.a771		90 02		bcc $a775			bcc 	_CREExit
.a773		e6 31		inc $31				inc 	codePtr+1 					; carry
.a775						_CREExit:
.a775		80 da		bra $a751			bra 	_MTAXLoop
.a777						_MTAXExit:
.a777		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a778						RectangleCommand:
.a778		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a77a		80 02		bra $a77e			bra 	ShapeDrawCmd
.a77c						CircleCommand:
.a77c		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a77e						ShapeDrawCmd:
.a77e		20 08 a8	jsr $a808			jsr 	RunGraphicsCommand
.a781						ShapeDraw:
.a781		0d cb 07	ora $07cb			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a784		4c fc a7	jmp $a7fc			jmp 	ExecuteGraphicCommand	 	; and complete
.a787						SpriteCommand:
.a787		a2 00		ldx #$00			ldx 	#0
.a789		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get image number.
.a78c		5a		phy				phy
.a78d		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a78f		a6 58		ldx $58				ldx 	NSMantissa0
.a791		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a793		b0 0d		bcs $a7a2			bcs 	_SCRange
.a795		a0 ff		ldy #$ff			ldy 	#255
.a797		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a79a		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a79c		7a		ply				ply
.a79d		20 08 a8	jsr $a808			jsr 	RunGraphicsCommand
.a7a0		80 5a		bra $a7fc			bra 	ExecuteGraphicCommand
.a7a2						_SCRange:
.a7a2		4c b2 a4	jmp $a4b2			jmp 	RangeError
.a7a5						ImageCommand:
.a7a5		a2 00		ldx #$00			ldx 	#0
.a7a7		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get image number.
.a7aa		20 08 a8	jsr $a808			jsr 	RunGraphicsCommand
.a7ad						ImageRunDraw:
.a7ad		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a7af		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7b2		ad d1 07	lda $07d1			lda 	gxDrawScale
.a7b5		0a		asl a				asl 	a
.a7b6		0a		asl a				asl 	a
.a7b7		0a		asl a				asl 	a
.a7b8		a8		tay				tay
.a7b9		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a7bb		a6 58		ldx $58				ldx 	NSMantissa0
.a7bd		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7c0		60		rts				rts
.a7c1						TextCommand:
.a7c1		a2 00		ldx #$00			ldx 	#0
.a7c3		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; get text
.a7c6		20 08 a8	jsr $a808			jsr 	RunGraphicsCommand
.a7c9						TextRunDraw:
.a7c9		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a7cb		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7ce		a0 00		ldy #$00			ldy 	#0
.a7d0						_IRDLoop:
.a7d0		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a7d2		85 37		sta $37				sta 	zTemp0+1
.a7d4		a5 58		lda $58				lda 	NSMantissa0
.a7d6		85 36		sta $36				sta 	zTemp0
.a7d8		b1 36		lda ($36),y			lda 	(zTemp0),y
.a7da		f0 13		beq $a7ef			beq 	_IRDExit
.a7dc		5a		phy				phy									; save string pos
.a7dd		48		pha				pha 								; save char
.a7de		ad d1 07	lda $07d1			lda 	gxDrawScale 				; get scale
.a7e1		0a		asl a				asl 	a
.a7e2		0a		asl a				asl 	a
.a7e3		0a		asl a				asl 	a
.a7e4		a8		tay				tay
.a7e5		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a7e7		fa		plx				plx 								; char to draw
.a7e8		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7eb		7a		ply				ply 								; restore string pos
.a7ec		c8		iny				iny
.a7ed		90 e1		bcc $a7d0			bcc 	_IRDLoop 					; go back if no error.
.a7ef						_IRDExit:
.a7ef		60		rts				rts
.a7f0						PlotCommand:
.a7f0		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a7f2		20 08 a8	jsr $a808			jsr 	RunGraphicsCommand
.a7f5		80 05		bra $a7fc			bra 	ExecuteGraphicCommand
.a7f7						LineCommand:
.a7f7		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a7f9		20 08 a8	jsr $a808			jsr 	RunGraphicsCommand
.a7fc						ExecuteGraphicCommand:
.a7fc		0d ca 07	ora $07ca			ora 	gxCommandID 				; make a full command
.a7ff		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a802		b0 01		bcs $a805			bcs 	_EGCError
.a804		60		rts				rts
.a805						_EGCError:
.a805		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.a808						RunGraphicsCommand:
.a808		8d ca 07	sta $07ca			sta 	gxCommandID					; save TODO graphics command.
.a80b		68		pla				pla 								; pop handler address
.a80c		fa		plx				plx
.a80d		1a		inc a				inc 	a
.a80e		d0 01		bne $a811			bne 	_RGINoCarry
.a810		e8		inx				inx
.a811						_RGINoCarry:
.a811		8d cf 07	sta $07cf			sta 	gxHandler
.a814		8e d0 07	stx $07d0			stx 	gxHandler+1
.a817						_RGICommandLoop:
.a817		b1 30		lda ($30),y			lda 	(codePtr),y
.a819		c8		iny				iny
.a81a		c9 dc		cmp #$dc			cmp 	#KWD_TO						; is it TO x,y
.a81c		f0 53		beq $a871			beq 	_RGI_To
.a81e		c9 c6		cmp #$c6			cmp 	#KWD_HERE 					; do it here.
.a820		f0 55		beq $a877			beq 	_RGI_Here
.a822		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a824		f0 3d		beq $a863			beq 	_RGI_Exit
.a826		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a828		f0 39		beq $a863			beq 	_RGI_Exit
.a82a		c9 ce		cmp #$ce			cmp 	#KWD_OUTLINE 				; solid or outline
.a82c		f0 3e		beq $a86c			beq 	_RGI_Frame
.a82e		c9 d8		cmp #$d8			cmp 	#KWD_SOLID
.a830		f0 33		beq $a865			beq 	_RGI_Solid
.a832		c9 ba		cmp #$ba			cmp 	#KWD_BY 					; by offset
.a834		f0 4b		beq $a881			beq 	_RGI_By
.a836		c9 c4		cmp #$c4			cmp 	#KWD_FROM 					; from
.a838		f0 17		beq $a851			beq 	_RGI_Move2
.a83a		c9 c1		cmp #$c1			cmp 	#KWD_DIM 					; dim (set scale)
.a83c		f0 62		beq $a8a0			beq 	_RGI_Dim
.a83e		c9 bf		cmp #$bf			cmp 	#KWD_COLOUR 				; colour or Color
.a840		f0 74		beq $a8b6			beq 	_RGI_Colour
.a842		c9 be		cmp #$be			cmp 	#KWD_COLOR
.a844		f0 70		beq $a8b6			beq 	_RGI_Colour
.a846		ae ca 07	ldx $07ca			ldx 	gxCommandID
.a849		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a84b		d0 03		bne $a850			bne 	_RGI_Move 					; move
.a84d		4c de a8	jmp $a8de			jmp		_RGI_SpriteInstructions
.a850						_RGI_Move:
.a850		88		dey				dey 								; unpick get.
.a851						_RGI_Move2:
.a851		20 04 a9	jsr $a904			jsr 	GCGetCoordinatePair 		; move to here
.a854		20 2b a9	jsr $a92b			jsr 	GCCopyPairToStore 			; save
.a857		5a		phy				phy
.a858		20 21 a9	jsr $a921			jsr 	GCLoadAXY 					; load in
.a85b		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a85d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a860		7a		ply				ply
.a861		80 b4		bra $a817			bra 	_RGICommandLoop 			; and go round
.a863						_RGI_Exit:
.a863		88		dey				dey 								; unpick : / EOL
.a864		60		rts				rts
.a865						_RGI_Solid:
.a865		a9 02		lda #$02			lda 	#2
.a867		8d cb 07	sta $07cb			sta 	gxFillSolid
.a86a		80 ab		bra $a817			bra 	_RGICommandLoop
.a86c						_RGI_Frame:
.a86c		9c cb 07	stz $07cb			stz 	gxFillSolid
.a86f		80 a6		bra $a817			bra 	_RGICommandLoop
.a871						_RGI_To:
.a871		20 04 a9	jsr $a904			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a874		20 2b a9	jsr $a92b			jsr 	GCCopyPairToStore
.a877						_RGI_Here:
.a877		5a		phy				phy
.a878		20 21 a9	jsr $a921			jsr 	GCLoadAXY 					; load it into AXY
.a87b		20 db a8	jsr $a8db			jsr 	_RGICallHandler 			; go do whatever it is.
.a87e		7a		ply				ply
.a87f		80 96		bra $a817			bra 	_RGICommandLoop 			; and go round
.a881						_RGI_By:
.a881		20 11 a9	jsr $a911			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a884		18		clc				clc
.a885		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a887		6d cc 07	adc $07cc			adc 	gxXPos
.a88a		8d cc 07	sta $07cc			sta 	gxXPos
.a88d		a5 61		lda $61				lda 	NSMantissa1+1
.a88f		6d cd 07	adc $07cd			adc 	gxXPos+1
.a892		8d cd 07	sta $07cd			sta 	gxXPos+1
.a895		a5 5a		lda $5a				lda 	NSMantissa0+2
.a897		18		clc				clc
.a898		6d ce 07	adc $07ce			adc 	gxYPos
.a89b		8d ce 07	sta $07ce			sta 	gxYPos
.a89e		80 d7		bra $a877			bra 	_RGI_Here
.a8a0						_RGI_Dim:
.a8a0		a2 01		ldx #$01			ldx	 	#1
.a8a2		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.a8a5		a5 59		lda $59				lda 	NSMantissa0+1
.a8a7		c9 00		cmp #$00			cmp 	#0
.a8a9		f0 2d		beq $a8d8			beq 	_RGIRange
.a8ab		c9 09		cmp #$09			cmp 	#8+1
.a8ad		b0 29		bcs $a8d8			bcs		_RGIRange
.a8af		3a		dec a				dec 	a
.a8b0		8d d1 07	sta $07d1			sta 	gxDrawScale
.a8b3		4c 17 a8	jmp $a817			jmp 	_RGICommandLoop
.a8b6						_RGI_Colour:
.a8b6		a2 01		ldx #$01			ldx 	#1 							; colour
.a8b8		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.a8bb		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a8bd		20 35 a3	jsr $a335			jsr 	NSMSetZero
.a8c0		b1 30		lda ($30),y			lda 	(codePtr),y
.a8c2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a8c4		d0 04		bne $a8ca			bne 	_RGICDefaultMode
.a8c6		c8		iny				iny
.a8c7		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.a8ca						_RGICDefaultMode:
.a8ca		5a		phy				phy
.a8cb		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a8cd		a6 59		ldx $59				ldx 	NSMantissa0+1
.a8cf		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a8d1		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8d4		7a		ply				ply
.a8d5		4c 17 a8	jmp $a817			jmp 	_RGICommandLoop 			; and go round
.a8d8						_RGIRange:
.a8d8		4c b2 a4	jmp $a4b2			jmp 	RangeError
.a8db						_RGICallHandler:
.a8db		6c cf 07	jmp ($07cf)			jmp 	(gxHandler)
.a8de						_RGI_SpriteInstructions:
.a8de		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a8e0		f0 07		beq $a8e9			beq 	_RGISpriteOff
.a8e2		c9 c7		cmp #$c7			cmp 	#KWD_IMAGE
.a8e4		f0 13		beq $a8f9			beq 	_RGISetImage
.a8e6		4c 50 a8	jmp $a850			jmp 	_RGI_Move
.a8e9						_RGISpriteOff:
.a8e9		5a		phy				phy
.a8ea		a0 01		ldy #$01			ldy 	#1
.a8ec		a2 00		ldx #$00			ldx 	#0
.a8ee						_RGIDoCommandLoop:
.a8ee		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a8f0		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8f3		7a		ply				ply
.a8f4		b0 e2		bcs $a8d8			bcs 	_RGIRange
.a8f6		4c 17 a8	jmp $a817			jmp 	_RGICommandLoop
.a8f9						_RGISetImage:
.a8f9		a2 01		ldx #$01			ldx 	#1
.a8fb		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.a8fe		5a		phy				phy
.a8ff		aa		tax				tax
.a900		a0 00		ldy #$00			ldy 	#0
.a902		80 ea		bra $a8ee			bra 	_RGIDoCommandLoop
.a904						GCGetCoordinatePair:
.a904		a2 01		ldx #$01			ldx 	#1
.a906		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.a909		20 c4 93	jsr $93c4			jsr 	CheckComma
.a90c		e8		inx				inx
.a90d		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.a910		60		rts				rts
.a911						GCSignedCoordinatePair:
.a911		a2 01		ldx #$01			ldx 	#1
.a913		20 bf a2	jsr $a2bf			jsr 	Evaluate16BitIntegerSigned
.a916		20 c4 93	jsr $93c4			jsr 	CheckComma
.a919		e8		inx				inx
.a91a		20 bf a2	jsr $a2bf			jsr 	Evaluate16BitIntegerSigned
.a91d		60		rts				rts
.a91e						_GCCPRange:
.a91e		4c b2 a4	jmp $a4b2			jmp 	RangeError
.a921						GCLoadAXY:
.a921		ad cd 07	lda $07cd			lda 	gxXPos+1
.a924		ae cc 07	ldx $07cc			ldx 	gxXPos
.a927		ac ce 07	ldy $07ce			ldy 	gxYPos
.a92a		60		rts				rts
.a92b						GCCopyPairToStore:
.a92b		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a92d		8d cc 07	sta $07cc			sta 	gxXPos
.a930		a5 61		lda $61				lda 	NSMantissa1+1
.a932		8d cd 07	sta $07cd			sta 	gxXPos+1
.a935		a5 5a		lda $5a				lda 	NSMantissa0+2
.a937		8d ce 07	sta $07ce			sta 	gxYPos
.a93a		60		rts				rts
.07ca						gxCommandID:
>07ca								.fill 	1
.07cb						gxFillSolid:
>07cb								.fill 	1
.07cc						gxXPos:
>07cc								.fill 	2
.07ce						gxYPos:
>07ce								.fill 	1
.07cf						gxHandler:
>07cf								.fill 	2
.07d1						gxDrawScale:
>07d1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a93b						ResetBitmapSpritesTiles:
.a93b		9c d2 07	stz $07d2			stz 	BitmapPageNumber
.a93e		9c d3 07	stz $07d3			stz 	SpritePageNumber
.a941		9c d4 07	stz $07d4			stz 	TileMapPageNumber
.a944		9c d5 07	stz $07d5			stz 	TileImagePageNumber
.a947		a9 40		lda #$40			lda 	#64
.a949		8d d6 07	sta $07d6			sta 	TileMapWidth
.a94c		a9 20		lda #$20			lda 	#32
.a94e		8d d7 07	sta $07d7			sta 	TileMapHeight
.a951		60		rts				rts
.a952						BitmapCtrl:
.a952						BitmapCtrlLoop:
.a952		b1 30		lda ($30),y			lda 	(codePtr),y
.a954		c8		iny				iny
.a955		a2 01		ldx #$01			ldx 	#1
.a957		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a959		f0 24		beq $a97f			beq 	BitmapSwitch
.a95b		ca		dex				dex
.a95c		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a95e		f0 1f		beq $a97f			beq 	BitmapSwitch
.a960		c9 b9		cmp #$b9			cmp 	#KWD_AT  					; set address
.a962		f0 13		beq $a977			beq 	BitmapAddress
.a964		c9 bd		cmp #$bd			cmp 	#KWD_CLEAR
.a966		f0 02		beq $a96a			beq 	BitmapClear
.a968		88		dey				dey
.a969		60		rts				rts
.a96a						BitmapClear:
.a96a		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get the colour
.a96d		5a		phy				phy
.a96e		aa		tax				tax
.a96f		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a971		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a974		7a		ply				ply
.a975		80 db		bra $a952			bra 	BitmapCtrlLoop
.a977						BitmapAddress:
.a977		20 43 aa	jsr $aa43			jsr 	GetPageNumber
.a97a		8d d2 07	sta $07d2			sta 	BitmapPageNumber
.a97d		80 d3		bra $a952			bra 	BitmapCtrlLoop
.a97f						BitmapSwitch:
.a97f		5a		phy				phy
.a980		ac d2 07	ldy $07d2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a983		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a985		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a988		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a98a		a0 00		ldy #$00			ldy 	#0
.a98c		a2 ff		ldx #$ff			ldx 	#$FF
.a98e		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a991		9c cb 07	stz $07cb			stz 	gxFillSolid
.a994		9c cc 07	stz $07cc			stz 	gxXPos
.a997		9c cd 07	stz $07cd			stz 	gxXPos+1
.a99a		9c ce 07	stz $07ce			stz 	gxYPos
.a99d		9c d1 07	stz $07d1			stz 	gxDrawScale
.a9a0		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a9a2		a2 00		ldx #$00			ldx 	#0
.a9a4		a0 00		ldy #$00			ldy 	#0
.a9a6		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9a9		7a		ply				ply
.a9aa		80 a6		bra $a952			bra 	BitmapCtrlLoop
.a9ac						SpritesCtrl:
.a9ac						SpritesCtrlLoop:
.a9ac		b1 30		lda ($30),y			lda 	(codePtr),y
.a9ae		c8		iny				iny
.a9af		a2 01		ldx #$01			ldx 	#1
.a9b1		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a9b3		f0 13		beq $a9c8			beq 	SpriteSwitch
.a9b5		ca		dex				dex
.a9b6		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a9b8		f0 0e		beq $a9c8			beq 	SpriteSwitch
.a9ba		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a9bc		f0 02		beq $a9c0			beq 	SpriteSetAddress
.a9be		88		dey				dey
.a9bf		60		rts				rts
.a9c0						SpriteSetAddress:
.a9c0		20 43 aa	jsr $aa43			jsr 	GetPageNumber
.a9c3		8d d3 07	sta $07d3			sta 	SpritePageNumber
.a9c6		80 e4		bra $a9ac			bra 	SpritesCtrlLoop
.a9c8						SpriteSwitch:
.a9c8		5a		phy				phy
.a9c9		ac d3 07	ldy $07d3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a9cc		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a9ce		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9d1		7a		ply				ply
.a9d2		80 d8		bra $a9ac			bra 	SpritesCtrlLoop
.a9d4						TilesCtrl:
.a9d4						TilesCtrlLoop:
.a9d4		b1 30		lda ($30),y			lda 	(codePtr),y
.a9d6		c8		iny				iny
.a9d7		a2 80		ldx #$80			ldx 	#$80
.a9d9		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a9db		f0 34		beq $aa11			beq 	TileSwitch
.a9dd		a2 00		ldx #$00			ldx 	#$00
.a9df		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a9e1		f0 2e		beq $aa11			beq 	TileSwitch
.a9e3		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a9e5		f0 19		beq $aa00			beq 	TileSetAddress
.a9e7		c9 c1		cmp #$c1			cmp 	#KWD_DIM
.a9e9		f0 02		beq $a9ed			beq 	TileSetSize
.a9eb		88		dey				dey
.a9ec		60		rts				rts
.a9ed						TileSetSize:
.a9ed		a2 00		ldx #$00			ldx 	#0
.a9ef		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.a9f2		8d d6 07	sta $07d6			sta 	TileMapWidth
.a9f5		20 c4 93	jsr $93c4			jsr 	CheckComma
.a9f8		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.a9fb		8d d7 07	sta $07d7			sta 	TileMapHeight
.a9fe		80 d4		bra $a9d4			bra 	TilesCtrlLoop
.aa00						TileSetAddress:
.aa00		20 43 aa	jsr $aa43			jsr 	GetPageNumber 				; map page
.aa03		8d d4 07	sta $07d4			sta 	TileMapPageNumber
.aa06		20 c4 93	jsr $93c4			jsr 	CheckComma
.aa09		20 43 aa	jsr $aa43			jsr 	GetPageNumber 				; image page
.aa0c		8d d5 07	sta $07d5			sta 	TileImagePageNumber
.aa0f		80 c3		bra $a9d4			bra 	TilesCtrlLoop
.aa11						TileSwitch:
.aa11		5a		phy				phy
.aa12		da		phx				phx 								; set the on/off state and the pages.
.aa13		8a		txa				txa
.aa14		0d d4 07	ora $07d4			ora 	TileMapPageNumber
.aa17		aa		tax				tax
.aa18		ac d5 07	ldy $07d5			ldy 	TileImagePageNumber
.aa1b		a9 14		lda #$14			lda 	#GCMD_TileCtl
.aa1d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa20		fa		plx				plx
.aa21		10 b1		bpl $a9d4			bpl 	TilesCtrlLoop 				; nothing else.
.aa23		a9 16		lda #$16			lda 	#GCMD_TileSize 				; set size of tile map.
.aa25		ae d6 07	ldx $07d6			ldx 	TileMapWidth
.aa28		ac d7 07	ldy $07d7			ldy 	TileMapHeight
.aa2b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa2e		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; reset scroll
.aa30		20 3c aa	jsr $aa3c			jsr 	_TileResetScroll
.aa33		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY
.aa35		20 3c aa	jsr $aa3c			jsr 	_TileResetScroll
.aa38		7a		ply				ply
.aa39		4c d4 a9	jmp $a9d4			jmp 	TilesCtrlLoop
.aa3c						_TileResetScroll:
.aa3c		a2 00		ldx #$00			ldx 	#0
.aa3e		a0 00		ldy #$00			ldy 	#0
.aa40		4c 61 80	jmp $8061			jmp 	GXGraphicDraw
.aa43						GetPageNumber:
.aa43		a2 00		ldx #$00			ldx 	#0
.aa45		20 aa a2	jsr $a2aa			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.aa48		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.aa4a		29 1f		and #$1f			and 	#$1F
.aa4c		05 58		ora $58				ora 	NSMantissa0
.aa4e		d0 0c		bne $aa5c			bne 	_GPNError
.aa50		a5 68		lda $68				lda 	NSMantissa2
.aa52		06 60		asl $60				asl 	NSMantissa1					; get page number
.aa54		2a		rol a				rol 	a
.aa55		06 60		asl $60				asl 	NSMantissa1
.aa57		2a		rol a				rol 	a
.aa58		06 60		asl $60				asl 	NSMantissa1
.aa5a		2a		rol a				rol 	a
.aa5b		60		rts				rts
.aa5c						_GPNError:
.aa5c		a9 07		lda #$07		lda	#7
.aa5e		4c d5 93	jmp $93d5		jmp	ErrorHandler
.07d2						BitmapPageNumber:
>07d2								.fill 	1
.07d3						SpritePageNumber:
>07d3								.fill 	1
.07d4						TileMapPageNumber:
>07d4								.fill 	1
.07d5						TileImagePageNumber:
>07d5								.fill 	1
.07d6						TileMapWidth:
>07d6								.fill 	1
.07d7						TileMapHeight:
>07d7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.aa61						GfxCommand:
.aa61		a2 00		ldx #$00			ldx 	#0
.aa63		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; command
.aa66		20 c4 93	jsr $93c4			jsr 	CheckComma
.aa69		e8		inx				inx
.aa6a		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger 		; X
.aa6d		20 c4 93	jsr $93c4			jsr 	CheckComma
.aa70		e8		inx				inx
.aa71		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; Y
.aa74		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aa76		4a		lsr a				lsr 	a
.aa77		d0 12		bne $aa8b			bne 	_GfxError
.aa79		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.aa7b		b0 0e		bcs $aa8b			bcs 	_GfxError 					; bit 7 should have been zero
.aa7d		5a		phy				phy 								; save pos
.aa7e		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.aa80		a6 59		ldx $59				ldx 	NSMantissa0+1
.aa82		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aa84		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa87		b0 02		bcs $aa8b			bcs 	_GfxError
.aa89		7a		ply				ply 								; restore pos and exit.
.aa8a		60		rts				rts
.aa8b						_GfxError:
.aa8b		4c b2 a4	jmp $a4b2			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.aa8e						UnaryHit:
.aa8e		fa		plx				plx
.aa8f		a9 36		lda #$36			lda 	#zTemp0
.aa91		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get sprite number 0
.aa94		20 c4 93	jsr $93c4			jsr 	CheckComma
.aa97		e8		inx				inx
.aa98		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get sprite number 1
.aa9b		20 bc 93	jsr $93bc			jsr		CheckRightBracket
.aa9e		ca		dex				dex 								; fix back up again.
.aa9f		da		phx				phx 								; save X/Y
.aaa0		5a		phy				phy
.aaa1		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.aaa3		b5 58		lda $58,x			lda 	NSMantissa0,x
.aaa5		aa		tax				tax
.aaa6		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.aaa8		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.aaab		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.aaac		7a		ply				ply 								; restore XY
.aaad		fa		plx				plx
.aaae		20 37 a3	jsr $a337			jsr 	NSMSetByte 					; return the hit result
.aab1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.aab2						PaletteCommand:
.aab2		a2 00		ldx #$00			ldx 	#0
.aab4		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; colour
.aab7		20 c4 93	jsr $93c4			jsr 	CheckComma
.aaba		e8		inx				inx
.aabb		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger 		; r
.aabe		20 c4 93	jsr $93c4			jsr 	CheckComma
.aac1		e8		inx				inx
.aac2		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; g
.aac5		20 c4 93	jsr $93c4			jsr 	CheckComma
.aac8		e8		inx				inx
.aac9		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; b
.aacc		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aace		85 36		sta $36				sta 	zTemp0
.aad0		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aad2		85 37		sta $37				sta 	zTemp0+1
.aad4		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.aad6		26 37		rol $37				rol	 	zTemp0+1
.aad8		06 36		asl $36				asl 	zTemp0
.aada		26 37		rol $37				rol	 	zTemp0+1
.aadc		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.aade		85 01		sta $01				sta 	1
.aae0		5a		phy				phy
.aae1		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aae3		92 36		sta ($36)			sta 	(zTemp0)
.aae5		a0 01		ldy #$01			ldy 	#1
.aae7		a5 5a		lda $5a				lda 	NSMantissa0+2
.aae9		91 36		sta ($36),y			sta 	(zTemp0),y
.aaeb		a5 59		lda $59				lda 	NSMantissa0+1
.aaed		c8		iny				iny
.aaee		91 36		sta ($36),y			sta 	(zTemp0),y
.aaf0		7a		ply				ply
.aaf1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/tile.asm

.aaf2						TileCommand:
.aaf2		b1 30		lda ($30),y			lda 	(codePtr),y
.aaf4		c8		iny				iny
.aaf5		c9 b9		cmp #$b9			cmp 	#KWD_AT
.aaf7		f0 0a		beq $ab03			beq 	_TileSetPos
.aaf9		c9 d0		cmp #$d0			cmp 	#KWD_PLOT
.aafb		f0 15		beq $ab12			beq 	_TilePlot
.aafd		c9 dc		cmp #$dc			cmp 	#KWD_TO
.aaff		f0 40		beq $ab41			beq 	_TileScroll
.ab01		88		dey				dey
.ab02		60		rts				rts
.ab03						_TileSetPos:
.ab03		a2 00		ldx #$00			ldx 	#0 							; location to XA
.ab05		20 61 ab	jsr $ab61			jsr 	TileGetPair
.ab08		5a		phy				phy 								; call routine
.ab09		a8		tay				tay
.ab0a		a9 1c		lda #$1c			lda 	#GCMD_TilePos
.ab0c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab0f		7a		ply				ply
.ab10		80 e0		bra $aaf2			bra 	TileCommand 				; loop round
.ab12						_TilePlot:
.ab12		a2 00		ldx #$00			ldx 	#0
.ab14		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; tile to print
.ab17		a9 01		lda #$01			lda 	#1
.ab19		85 59		sta $59				sta 	NSMantissa0+1 				; default repeat count.
.ab1b		a2 01		ldx #$01			ldx 	#1
.ab1d		b1 30		lda ($30),y			lda 	(codePtr),y
.ab1f		c9 c9		cmp #$c9			cmp 	#KWD_LINE
.ab21		d0 04		bne $ab27			bne 	_TileNoRepeat
.ab23		c8		iny				iny 								; skip LINE
.ab24		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; evaluate count
.ab27						_TileNoRepeat:
.ab27						_TileOutLoop:
.ab27		a5 59		lda $59				lda 	NSMantissa0+1 				; complete ?
.ab29		f0 0d		beq $ab38			beq 	_TileCheckAgain 			; check , <repeats>
.ab2b		c6 59		dec $59				dec 	NSMantissa0+1 				; dec count
.ab2d		a9 1e		lda #$1e			lda 	#GCMD_TileWrite				; set up to write tile.
.ab2f		a6 58		ldx $58				ldx 	NSMantissa0
.ab31		5a		phy				phy 								; call preserving Y
.ab32		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab35		7a		ply				ply
.ab36		80 ef		bra $ab27			bra 	_TileOutLoop
.ab38						_TileCheckAgain:
.ab38		b1 30		lda ($30),y			lda 	(codePtr),y
.ab3a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.ab3c		d0 b4		bne $aaf2			bne 	TileCommand 				; no, do again
.ab3e		c8		iny				iny 								; consume comma
.ab3f		80 d1		bra $ab12			bra 	_TilePlot 					; and loop round.
.ab41						_TileScroll:
.ab41		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; do X
.ab43		20 50 ab	jsr $ab50			jsr 	_TileSetScroll
.ab46		20 c4 93	jsr $93c4			jsr 	CheckComma
.ab49		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY 			; do Y
.ab4b		20 50 ab	jsr $ab50			jsr 	_TileSetScroll
.ab4e		80 a2		bra $aaf2			bra 	TileCommand
.ab50						_TileSetScroll:
.ab50		48		pha				pha 								; save command on stack
.ab51		a2 00		ldx #$00			ldx 	#0 							; get value to scroll to
.ab53		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.ab56		68		pla				pla 								; restore command
.ab57		5a		phy				phy 								; save Y code pos
.ab58		a6 58		ldx $58				ldx 	NSMantissa0 				; YX = scroll value
.ab5a		a4 60		ldy $60				ldy 	NSMantissa1
.ab5c		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; do command
.ab5f		7a		ply				ply 								; restore code pos
.ab60		60		rts				rts
.ab61						TileGetPair:
.ab61		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.ab64		48		pha				pha
.ab65		20 c4 93	jsr $93c4			jsr 	CheckComma
.ab68		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.ab6b		fa		plx				plx
.ab6c		60		rts				rts
.ab6d						TileRead:
.ab6d		fa		plx				plx 								; current stack pos (where the result goes)
.ab6e		da		phx				phx 								; save it back again
.ab6f		e8		inx				inx   								; space to evaluate coordinates
.ab70		20 61 ab	jsr $ab61			jsr 	TileGetPair 				; X A are the coordinates
.ab73		5a		phy				phy 								; save code position
.ab74		a8		tay				tay 								; X Y are the coordinates.
.ab75		a9 1c		lda #$1c			lda 	#GCMD_TilePos 				; set the read position.
.ab77		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab7a		a9 20		lda #$20			lda 	#GCMD_TileRead 				; read the tile there
.ab7c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab7f		7a		ply				ply 								; restore code and stack positions
.ab80		fa		plx				plx
.ab81		20 37 a3	jsr $a337			jsr 	NSMSetByte 					; set the result.
.ab84		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; check for )
.ab87		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.ab88						ClearScreen:
.ab88		5a		phy				phy
.ab89		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.ab8b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ab8e		7a		ply				ply
.ab8f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cursor.asm

.ab90						CursorControl:
.ab90		a2 00		ldx #$00			ldx 	#0
.ab92		b1 30		lda ($30),y			lda 	(codePtr),y
.ab94		c8		iny				iny
.ab95		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.ab97		f0 08		beq $aba1			beq 	_CCOnOff
.ab99		e8		inx				inx
.ab9a		c9 cd		cmp #$cd			cmp 	#KWD_ON
.ab9c		f0 03		beq $aba1			beq 	_CCOnOff
.ab9e		4c ad a4	jmp $a4ad			jmp 	SyntaxError
.aba1						_CCOnOff:
.aba1		a5 01		lda $01				lda 	1 							; save current I/O
.aba3		48		pha				pha
.aba4		64 01		stz $01				stz 	1 		 					; page 0.
.aba6		ad 10 d0	lda $d010			lda 	$D010 						; read Cursor control register
.aba9		29 fe		and #$fe			and 	#$FE 						; clear enable bit
.abab		86 36		stx $36				stx 	zTemp0 						; put bit back in
.abad		05 36		ora $36				ora 	zTemp0
.abaf		8d 10 d0	sta $d010			sta 	$D010
.abb2		68		pla				pla 	 							; switch I/O back
.abb3		85 01		sta $01				sta 	1
.abb5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.abb6						XLoadCommand:
.abb6		20 0c 8e	jsr $8e0c			jsr 	NewProgram
.abb9		20 27 87	jsr $8727			jsr 	BackloadProgram
.abbc		4c 0f 88	jmp $880f			jmp 	WarmStart
.abbf						XGoCommand:
.abbf		20 0c 8e	jsr $8e0c			jsr 	NewProgram
.abc2		20 27 87	jsr $8727			jsr 	BackloadProgram
.abc5		4c a9 8f	jmp $8fa9			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.abc8						BootXA:
.abc8		85 fb		sta $fb		            sta     kernel.args.buf+0
.abca		86 fc		stx $fc		            stx     kernel.args.buf+1
.abcc		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.abcf		4c 0f 88	jmp $880f	            jmp 	WarmStart
>abd2		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.abd6						UnaryEvent:
.abd6		fa		plx				plx
.abd7		20 64 b2	jsr $b264			jsr 	TimerToStackX 				; timer in +0
.abda		e8		inx				inx  								; put reference into +1
.abdb		20 29 9d	jsr $9d29			jsr 	EvaluateTerm
.abde		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.abe0		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.abe2		d0 4c		bne $ac30			bne 	_UEType
.abe4		e8		inx				inx 								; put the step in +2
.abe5		20 c4 93	jsr $93c4			jsr 	CheckComma
.abe8		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.abeb		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.abee		ca		dex				dex
.abef		ca		dex				dex
.abf0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.abf2		85 36		sta $36				sta 	zTemp0
.abf4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.abf6		85 37		sta $37				sta 	zTemp0+1
.abf8		5a		phy				phy
.abf9		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.abfb		b1 36		lda ($36),y			lda 	(zTemp0),y
.abfd		30 2d		bmi $ac2c			bmi 	_UEFalse 					; exit if signed.
.abff		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.ac01		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac03		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.ac05		c8		iny				iny
.ac06		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac08		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ac0a		c8		iny				iny
.ac0b		b5 68		lda $68,x			lda 	NSMantissa2,x
.ac0d		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ac0f		90 1b		bcc $ac2c			bcc 	_UEFalse 					; no, return FALSE.
.ac11		18		clc				clc
.ac12		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.ac14		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac16		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.ac18		91 36		sta ($36),y			sta 	(zTemp0),y
.ac1a		c8		iny				iny
.ac1b		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac1d		75 62		adc $62,x			adc 	NSMantissa1+2,x
.ac1f		91 36		sta ($36),y			sta 	(zTemp0),y
.ac21		c8		iny				iny
.ac22		b5 68		lda $68,x			lda 	NSMantissa2,x
.ac24		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.ac26		91 36		sta ($36),y			sta 	(zTemp0),y
.ac28		7a		ply				ply
.ac29		4c 48 94	jmp $9448			jmp 	ReturnTrue
.ac2c						_UEFalse:
.ac2c		7a		ply				ply 								; restore Y
.ac2d		4c 53 94	jmp $9453			jmp 	ReturnFalse 				; and return False
.ac30						_UEType:
.ac30		4c b7 a4	jmp $a4b7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.ac33						Command_BLoad:
.ac33		20 3e ac	jsr $ac3e			jsr 	BLOADHandler
.ac36		c9 00		cmp #$00			cmp 	#0
.ac38		d0 01		bne $ac3b			bne 	_BLError
.ac3a		60		rts				rts
.ac3b						_BLError:
.ac3b		4c 8d ae	jmp $ae8d			jmp 	CLErrorHandler
.ac3e						BLOADHandler:
.ac3e		a2 00		ldx #$00			ldx 	#0
.ac40		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; file name to load
.ac43		20 c4 93	jsr $93c4			jsr 	CheckComma 					; consume comma
.ac46		e8		inx				inx
.ac47		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger 			; load address (full physical address)
.ac4a		5a		phy				phy
.ac4b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ac4d		a6 60		ldx $60				ldx 	NSMantissa1
.ac4f		20 d7 83	jsr $83d7			jsr 	KNLOpenFileRead 			; open file for reading
.ac52		b0 50		bcs $aca4			bcs 	_BLErrorExit 				; error, so fail.
.ac54		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.ac57		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ac59		20 a6 ac	jsr $aca6			jsr 	BLOpenPhysicalMemory 		; open for access.
.ac5c						_BLReadFile:
.ac5c		ad dc 07	lda $07dc			lda 	BasicFileStream
.ac5f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ac61		20 2c 84	jsr $842c			jsr 	KNLReadBlock 				; read next block
.ac64		b0 22		bcs $ac88			bcs 	_BLFileError 				; file error, which might be EOF.
.ac66		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.ac68		f0 f2		beq $ac5c			beq 	_BLReadFile
.ac6a		8d da 07	sta $07da			sta 	BLCopyCounter 				; counter.
.ac6d		ac d9 07	ldy $07d9			ldy 	BLYOffset 					; copy the buffer out here
.ac70		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.ac72						_BLCopyLoop:
.ac72		bd ba 06	lda $06ba,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.ac75		91 3a		sta ($3a),y			sta 	(zTemp2),y
.ac77		c8		iny				iny
.ac78		d0 03		bne $ac7d			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.ac7a		20 ce ac	jsr $acce			jsr 	BLAdvancePhysicalMemory
.ac7d						_BLNoAdjust:
.ac7d		e8		inx				inx
.ac7e		ce da 07	dec $07da			dec 	BLCopyCounter
.ac81		d0 ef		bne $ac72			bne 	_BLCopyLoop
.ac83		8c d9 07	sty $07d9			sty 	BLYOffset 					; update Y offset
.ac86		80 d4		bra $ac5c			bra 	_BLReadFile 				; go ask for more.
.ac88						_BLFileError:
.ac88		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.ac8a		d0 0d		bne $ac99			bne 	_BLErrorHandler				; no, it's an actual error
.ac8c		20 c8 ac	jsr $acc8			jsr 	BLClosePhysicalMemory 		; close the access.
.ac8f		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close the file
.ac92		20 a1 84	jsr $84a1			jsr 	KNLCloseFile
.ac95		a9 00		lda #$00			lda 	#0 							; and return zero.
.ac97		7a		ply				ply
.ac98		60		rts				rts
.ac99						_BLErrorHandler:
.ac99		48		pha				pha 								; save code
.ac9a		20 c8 ac	jsr $acc8			jsr 	BLClosePhysicalMemory 		; close access
.ac9d		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close the open file
.aca0		20 a1 84	jsr $84a1			jsr 	KNLCloseFile
.aca3		68		pla				pla 								; get error code
.aca4						_BLErrorExit:
.aca4		7a		ply				ply 								; restore position and exit.
.aca5		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.aca6						BLOpenPhysicalMemory:
.aca6		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.aca8		8d d8 07	sta $07d8			sta 	BLNormalMapping
.acab		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.acad		8d d9 07	sta $07d9			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.acb0		64 3a		stz $3a				stz 	zTemp2
.acb2		b5 60		lda $60,x			lda 	NSMantissa1,x
.acb4		29 1f		and #$1f			and 	#$1F
.acb6		09 60		ora #$60			ora 	#BLAccessPage << 5
.acb8		85 3b		sta $3b				sta 	zTemp2+1
.acba		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.acbc		16 60		asl $60,x			asl 	NSMantissa1,x
.acbe		2a		rol a				rol 	a
.acbf		16 60		asl $60,x			asl 	NSMantissa1,x
.acc1		2a		rol a				rol 	a
.acc2		16 60		asl $60,x			asl 	NSMantissa1,x
.acc4		2a		rol a				rol 	a
.acc5		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.acc7		60		rts				rts
.acc8						BLClosePhysicalMemory:
.acc8		ad d8 07	lda $07d8			lda 	BLNormalMapping
.accb		85 0b		sta $0b				sta 	BLAccessPage+8
.accd		60		rts				rts
.acce						BLAdvancePhysicalMemory:
.acce		48		pha				pha
.accf		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.acd1		a5 3b		lda $3b				lda 	zTemp2+1
.acd3		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.acd5		d0 06		bne $acdd			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.acd7		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.acd9		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.acdb		85 3b		sta $3b				sta 	zTemp2+1
.acdd						_BLAPMExit:
.acdd		68		pla				pla
.acde		60		rts				rts
.07d8						BLNormalMapping:
>07d8								.fill 	1
.07d9						BLYOffset:
>07d9								.fill 	1
.07da						BLCopyCounter:
>07da								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.acdf						Command_BSave:
.acdf		20 ea ac	jsr $acea			jsr 	BSaveHandler
.ace2		c9 00		cmp #$00			cmp 	#0
.ace4		d0 01		bne $ace7			bne 	_BSError
.ace6		60		rts				rts
.ace7						_BSError:
.ace7		4c 8d ae	jmp $ae8d			jmp 	CLErrorHandler
.acea						BSaveHandler:
.acea		a2 00		ldx #$00			ldx 	#0
.acec		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; file name to load
.acef		20 c4 93	jsr $93c4			jsr 	CheckComma 					; consume comma
.acf2		e8		inx				inx
.acf3		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger 			; load address (full physical address)
.acf6		20 c4 93	jsr $93c4			jsr 	CheckComma 					; consume comma
.acf9		e8		inx				inx
.acfa		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger 			; data length (3 bytes only)
.acfd		5a		phy				phy
.acfe		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ad00		a6 60		ldx $60				ldx 	NSMantissa1
.ad02		20 d2 83	jsr $83d2			jsr 	KNLOpenFileWrite 			; open file for reading
.ad05		b0 47		bcs $ad4e			bcs 	_BSErrorExit 				; error, so fail.
.ad07		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.ad0a		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ad0c		20 a6 ac	jsr $aca6			jsr 	BLOpenPhysicalMemory 		; open for access.
.ad0f		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.ad11		ac d9 07	ldy $07d9			ldy 	BLYOffset 					; used for data offset.
.ad14						_BSWriteToFileLoop:
.ad14		38		sec				sec 								; pre decrement count.
.ad15		a5 5a		lda $5a				lda 	NSMantissa0+2
.ad17		e9 01		sbc #$01			sbc 	#1
.ad19		85 5a		sta $5a				sta 	NSMantissa0+2
.ad1b		a5 62		lda $62				lda 	NSMantissa1+2
.ad1d		e9 00		sbc #$00			sbc 	#0
.ad1f		85 62		sta $62				sta 	NSMantissa1+2
.ad21		a5 6a		lda $6a				lda 	NSMantissa2+2
.ad23		e9 00		sbc #$00			sbc 	#0
.ad25		85 6a		sta $6a				sta 	NSMantissa2+2
.ad27		30 15		bmi $ad3e			bmi 	_BSFileComplete 			; undercounted, so exit.
.ad29		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.ad2b		9d ba 06	sta $06ba,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.ad2e		e8		inx				inx
.ad2f		c8		iny				iny 								; next byte
.ad30		d0 03		bne $ad35			bne 	_BSNoCheck
.ad32		20 ce ac	jsr $acce			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.ad35						_BSNoCheck:
.ad35		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.ad37		d0 db		bne $ad14			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.ad39		20 50 ad	jsr $ad50			jsr 	BSFlushBuffer 				; yes, flush the buffer
.ad3c		80 d6		bra $ad14			bra 	_BSWriteToFileLoop 			; and keep on going
.ad3e						_BSFileComplete:
.ad3e		20 50 ad	jsr $ad50			jsr 	BSFlushBuffer 				; write the buffer remainder.
.ad41		20 c8 ac	jsr $acc8			jsr 	BLClosePhysicalMemory 		; close the access.
.ad44		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close the file
.ad47		20 a1 84	jsr $84a1			jsr 	KNLCloseFile
.ad4a		a9 00		lda #$00			lda 	#0
.ad4c		7a		ply				ply
.ad4d		60		rts				rts
.ad4e						_BSErrorExit:
.ad4e		7a		ply				ply
.ad4f		60		rts				rts
.ad50						BSFlushBuffer:
.ad50		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.ad52		f0 0d		beq $ad61			beq 	_BSFBExit 					; if so, exit.
.ad54		a9 ba		lda #$ba			lda 	#KNLReadBuffer & $FF 		; where to write from.
.ad56		85 36		sta $36				sta 	zTemp0
.ad58		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.ad5a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.ad5c		20 4c af	jsr $af4c			jsr 	CLWriteByteBlock 			; write it.
.ad5f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.ad61						_BSFBExit:
.ad61		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.ad62						Command_Dir:
.ad62		ad ba 07	lda $07ba			lda     KNLDefaultDrive				; set drive to list.
.ad65		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.ad67		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.ad69		20 78 ff	jsr $ff78			jsr     kernel.Directory.Open
.ad6c		b0 4f		bcs $adbd			bcs     _CDExit
.ad6e						_CDEventLoop:
.ad6e		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.ad71		20 8e 82	jsr $828e			jsr     GetNextEvent
.ad74		b0 f8		bcs $ad6e			bcs     _CDEventLoop
.ad76		ad bb 07	lda $07bb			lda     KNLEvent.type
.ad79		c9 46		cmp #$46			cmp     #kernel.event.directory.CLOSED
.ad7b		f0 40		beq $adbd			beq    	_CDExit
.ad7d		20 82 ad	jsr $ad82			jsr     _CDMessages 				; handle various messages
.ad80		80 ec		bra $ad6e			bra     _CDEventLoop
.ad82						_CDMessages:
.ad82		c9 3c		cmp #$3c			cmp     #kernel.event.directory.OPENED
.ad84		f0 15		beq $ad9b			beq     _CDEVRead
.ad86		c9 3e		cmp #$3e			cmp     #kernel.event.directory.VOLUME
.ad88		f0 19		beq $ada3			beq     _CDEVVolume
.ad8a		c9 40		cmp #$40			cmp     #kernel.event.directory.FILE
.ad8c		f0 32		beq $adc0			beq     _CDEVFile
.ad8e		c9 42		cmp #$42			cmp     #kernel.event.directory.FREE
.ad90		f0 70		beq $ae02			beq     _CDEVFree
.ad92		c9 44		cmp #$44			cmp     #kernel.event.directory.EOF
.ad94		f0 6e		beq $ae04			beq     _CDEVEOF
.ad96		c9 48		cmp #$48			cmp     #kernel.event.directory.ERROR
.ad98		f0 6a		beq $ae04			beq     _CDEVEOF
.ad9a		60		rts				rts
.ad9b						_CDEVRead:
.ad9b		ad be 07	lda $07be			lda     KNLEvent.directory.stream
.ad9e		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.ada0		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Read
.ada3						_CDEVVolume:
.ada3		a9 5b		lda #$5b			lda 	#"["
.ada5		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ada8		ad c0 07	lda $07c0			lda     KNLEvent.directory.volume.len
.adab		20 0c ae	jsr $ae0c			jsr     _CDReadData
.adae		20 34 94	jsr $9434			jsr 	PrintStringXA
.adb1		a9 5d		lda #$5d			lda 	#"]"
.adb3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adb6		a9 0d		lda #$0d			lda 	#13
.adb8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adbb		80 de		bra $ad9b			bra     _CDEVRead
.adbd						_CDExit:
.adbd		4c 0f 88	jmp $880f			jmp 	WarmStart
.adc0						_CDEVFile:
.adc0		a9 20		lda #$20			lda 	#32
.adc2		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adc5		ad c0 07	lda $07c0			lda     KNLEvent.directory.file.len
.adc8		48		pha				pha
.adc9		20 0c ae	jsr $ae0c			jsr     _CDReadData
.adcc		20 34 94	jsr $9434			jsr 	PrintStringXA
.adcf		68		pla				pla
.add0		49 ff		eor #$ff			eor 	#$FF
.add2		38		sec				sec
.add3		69 10		adc #$10			adc 	#16
.add5		aa		tax				tax
.add6						_CDEVTab:
.add6		a9 20		lda #$20			lda 	#32
.add8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.addb		ca		dex				dex
.addc		10 f8		bpl $add6			bpl 	_CDEVTab
.adde		20 23 ae	jsr $ae23			jsr 	_CDReadExtended
.ade1		ad 46 05	lda $0546			lda 	lineBuffer
.ade4		ae 47 05	ldx $0547			ldx 	lineBuffer+1
.ade7		20 4a 98	jsr $984a			jsr 	ConvertInt16
.adea		20 34 94	jsr $9434			jsr 	PrintStringXA
.aded		a2 ad		ldx #$ad			ldx 	#_CDEVFMessage >> 8
.adef		a9 f6		lda #$f6			lda 	#_CDEVFMessage & $FF
.adf1		20 34 94	jsr $9434			jsr 	PrintStringXA
.adf4		80 a5		bra $ad9b			bra     _CDEVRead
.adf6						_CDEVFMessage:
>adf6		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>adfe		29 2e 0d 00
.ae02						_CDEVFree:
.ae02		80 00		bra $ae04			bra     _CDEVEOF
.ae04						_CDEVEOF:
.ae04		ad be 07	lda $07be			lda     KNLEvent.directory.stream
.ae07		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.ae09		4c 80 ff	jmp $ff80			jmp     kernel.Directory.Close
.ae0c						_CDReadData:
.ae0c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ae0e		a9 46		lda #$46			lda     #lineBuffer & $FF
.ae10		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ae12		a9 05		lda #$05			lda     #lineBuffer >> 8
.ae14		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ae16		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.ae19		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.ae1b		9e 46 05	stz $0546,x			stz     lineBuffer,x
.ae1e		a9 46		lda #$46			lda 	#lineBuffer & $FF
.ae20		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.ae22		60		rts				rts
.ae23						_CDReadExtended:
.ae23		a9 02		lda #$02			lda     #2
.ae25		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ae27		a9 46		lda #$46			lda     #lineBuffer & $FF
.ae29		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ae2b		a9 05		lda #$05			lda     #lineBuffer >> 8
.ae2d		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ae2f		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.ae32						Command_Drive:
.ae32		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.ae35		20 ce 83	jsr $83ce			jsr 	KNLSetDrive
.ae38		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.ae39						Command_Load:
.ae39		20 3f ae	jsr $ae3f			jsr 	LoadFile
.ae3c		4c 0f 88	jmp $880f			jmp 	WarmStart
.ae3f						LoadFile:
.ae3f		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; file name to load
.ae42		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ae44		a5 36		lda $36				lda 	zTemp0
.ae46		20 d7 83	jsr $83d7			jsr 	KNLOpenFileRead 			; open file for reading
.ae49		b0 42		bcs $ae8d			bcs 	CLErrorHandler 				; error, so fail.
.ae4b		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.ae4e		20 dd ae	jsr $aedd			jsr     LoadReadByteInit            ; Init reader with the stream
.ae51		20 0c 8e	jsr $8e0c			jsr 	NewProgram 					; does the actual NEW.
.ae54		9c db 07	stz $07db			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae57						_CLLoop:
.ae57		20 9b ae	jsr $ae9b			jsr 	LoadReadLine 				; get next line.
.ae5a		f0 10		beq $ae6c			beq 	_CLExit 					; end, exit.
.ae5c		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae5f		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number = 0
.ae62		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.ae65		f0 f0		beq $ae57			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.ae67		20 ea 87	jsr $87ea			jsr 	EditProgramCode 			; do the editing etc.
.ae6a		80 eb		bra $ae57			bra 	_CLLoop
.ae6c						_CLExit:
.ae6c		ad dc 07	lda $07dc			lda 	BasicFileStream
.ae6f		20 a1 84	jsr $84a1			jsr 	KNLCloseFile
.ae72						CLComplete:
.ae72		a9 7a		lda #$7a			lda 	#_CLCMsg & $FF
.ae74		a2 ae		ldx #$ae			ldx 	#_CLCMsg >> 8
.ae76		20 34 94	jsr $9434			jsr 	PrintStringXA
.ae79		60		rts				rts
.ae7a						_CLCMsg:
>ae7a		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>ae82		2e 0d 00
.ae85						CLCloseError:
.ae85		48		pha				pha
.ae86		ad dc 07	lda $07dc			lda 	BasicFileStream
.ae89		20 a1 84	jsr $84a1			jsr 	KNLCloseFile
.ae8c		68		pla				pla
.ae8d						CLErrorHandler:
.ae8d		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.ae8f		f0 05		beq $ae96			beq 	_CLEHNotFound
.ae91		a9 1a		lda #$1a		lda	#26
.ae93		4c d5 93	jmp $93d5		jmp	ErrorHandler
.ae96						_CLEHNotFound:
.ae96		a9 19		lda #$19		lda	#25
.ae98		4c d5 93	jmp $93d5		jmp	ErrorHandler
.ae9b						LoadReadLine:
.ae9b		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.ae9d		20 b7 ae	jsr $aeb7			jsr 	LoadReadCharacter
.aea0		f0 14		beq $aeb6			beq 	_LRLExit 					; eof ?
.aea2		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.aea4		90 f5		bcc $ae9b			bcc 	LoadReadLine
.aea6						_LRLLoop:
.aea6		9d 46 05	sta $0546,x			sta 	lineBuffer,x 				; write into line buffer
.aea9		9e 47 05	stz $0547,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.aeac		e8		inx				inx
.aead		20 b7 ae	jsr $aeb7			jsr 	LoadReadCharacter 			; next line
.aeb0		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.aeb2		b0 f2		bcs $aea6			bcs 	_LRLLoop
.aeb4		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.aeb6						_LRLExit:
.aeb6		60		rts				rts
.aeb7						LoadReadCharacter:
.aeb7		da		phx				phx
.aeb8		5a		phy				phy
.aeb9		ad db 07	lda $07db			lda 	LoadEOFFlag 				; already done EOF.
.aebc		d0 0c		bne $aeca			bne 	_LRCIsEOF
.aebe		20 e7 ae	jsr $aee7			jsr 	LoadReadByte 				; read a byte
.aec1		90 09		bcc $aecc			bcc		_LRCExit 					; read okay.
.aec3		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.aec5		d0 be		bne $ae85			bne 	CLCloseError
.aec7		ce db 07	dec $07db			dec 	LoadEOFFlag
.aeca						_LRCIsEOF:
.aeca		a9 00		lda #$00			lda 	#0
.aecc						_LRCExit:
.aecc		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.aece		d0 02		bne $aed2			bne 	_LRCNotTab
.aed0		a9 20		lda #$20			lda 	#' '
.aed2						_LRCNotTab:
.aed2		c9 0a		cmp #$0a			cmp 	#$0A
.aed4		d0 02		bne $aed8			bne 	_LRCNotLF
.aed6		a9 0d		lda #$0d			lda 	#$0D
.aed8						_LRCNotLF:
.aed8		7a		ply				ply
.aed9		fa		plx				plx
.aeda		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.aedc		60		rts				rts
.aedd						LoadReadByteInit:
.aedd		8d dd 07	sta $07dd			sta     LoadFileStream 				; save stream
.aee0		9c de 07	stz $07de			stz     LoadNextCharacter 			; reset buffer
.aee3		9c df 07	stz $07df			stz     LoadEndCharacter
.aee6		60		rts				rts
.aee7						LoadReadByte:
.aee7		da		phx				phx
.aee8		ae de 07	ldx $07de			ldx     LoadNextCharacter 					; all data consumed ?
.aeeb		ec df 07	cpx $07df			cpx     LoadEndCharacter
.aeee		d0 12		bne $af02			bne     _KNLRBGetNextByte
.aef0		ad dd 07	lda $07dd			lda     LoadFileStream
.aef3		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.aef5		20 2c 84	jsr $842c			jsr     KNLReadBlock 				; read next chunk from the stream
.aef8		b0 0f		bcs $af09			bcs     _KNLRBError 				; error has occurred on read.
.aefa		8d df 07	sta $07df			sta     LoadEndCharacter 						; # read is the number available
.aefd		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.aeff		8e de 07	stx $07de			stx     LoadNextCharacter
.af02						_KNLRBGetNextByte:
.af02		bd ba 06	lda $06ba,x			lda     KNLReadBuffer,x 			; get the next data item
.af05		ee de 07	inc $07de			inc     LoadNextCharacter 					; and advance the index
.af08		18		clc				clc 								; succeeded
.af09						_KNLRBError:
.af09		fa		plx				plx
.af0a		60		rts				rts
.07db						LoadEOFFlag:
>07db								.fill 	1
.07dc						BasicFileStream:
>07dc								.fill 	1
.07dd						LoadFileStream:
>07dd								.byte   ?
.07de						LoadNextCharacter:
>07de								.byte   ?
.07df						LoadEndCharacter:
>07df								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.af0b						Command_Save:
.af0b		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; file name to load
.af0e		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.af10		a5 36		lda $36				lda 	zTemp0
.af12		20 d2 83	jsr $83d2			jsr 	KNLOpenFileWrite 			; open file for writing
.af15		b0 32		bcs $af49			bcs 	CSErrorHandler 				; error, so fail.
.af17		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.af1a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af1c		85 30		sta $30				sta 	codePtr
.af1e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af20		85 31		sta $31				sta 	codePtr+1
.af22						_CSLoop:
.af22		b2 30		lda ($30)			lda 	(codePtr)
.af24		f0 17		beq $af3d			beq 	_CSExit
.af26		20 6d af	jsr $af6d			jsr 	CSGetCleanLine
.af29		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.af2b		85 36		sta $36				sta 	zTemp0
.af2d		20 4c af	jsr $af4c			jsr 	CLWriteByteBlock 			; write the block out.
.af30		18		clc				clc
.af31		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.af33		65 30		adc $30				adc 	codePtr
.af35		85 30		sta $30				sta 	codePtr
.af37		90 02		bcc $af3b			bcc 	_CREExit
.af39		e6 31		inc $31				inc 	codePtr+1 					; carry
.af3b						_CREExit:
.af3b		80 e5		bra $af22			bra 	_CSLoop
.af3d						_CSExit:
.af3d		ad dc 07	lda $07dc			lda 	BasicFileStream 			; close file
.af40		20 a1 84	jsr $84a1			jsr 	KNLCloseFile
.af43		20 72 ae	jsr $ae72			jsr 	CLComplete 					; display complete message.
.af46		4c 0f 88	jmp $880f			jmp 	WarmStart 					; and warm start
.af49						CSErrorHandler:
.af49		4c 8d ae	jmp $ae8d			jmp 	CLErrorHandler
.af4c						CLWriteByteBlock:
.af4c		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.af4e		f0 1c		beq $af6c			beq 	_CLWBBExit					; if so, exit
.af50		ad dc 07	lda $07dc			lda 	BasicFileStream 			; stream to write, count in X
.af53		20 67 84	jsr $8467			jsr 	KNLWriteBlock 				; call one write attempt
.af56		b0 f1		bcs $af49			bcs 	CSErrorHandler 				; error occurred
.af58		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.af5a		8a		txa				txa 								; subtract bytes written from X, total count.
.af5b		38		sec				sec
.af5c		e5 38		sbc $38				sbc 	zTemp1
.af5e		aa		tax				tax
.af5f		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.af60		a5 36		lda $36				lda 	zTemp0
.af62		65 38		adc $38				adc 	zTemp1
.af64		85 36		sta $36				sta 	zTemp0
.af66		90 e4		bcc $af4c			bcc 	CLWriteByteBlock
.af68		e6 37		inc $37				inc 	zTemp0+1
.af6a		80 e0		bra $af4c			bra 	CLWriteByteBlock 			; and retry write out.
.af6c						_CLWBBExit:
.af6c		60		rts				rts
.af6d						CSGetCleanLine:
.af6d		a9 00		lda #$00			lda 	#0 							; no indent.
.af6f		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.af72		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.af74		a0 00		ldy #$00			ldy 	#0
.af76						_CSClean:
.af76		b9 49 04	lda $0449,y			lda 	tokenBuffer,y
.af79		f0 09		beq $af84			beq 	_CSDoneClean
.af7b		30 04		bmi $af81			bmi 	_CSIgnoreCharacter
.af7d		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.af80		e8		inx				inx
.af81						_CSIgnoreCharacter:
.af81		c8		iny				iny
.af82		80 f2		bra $af76			bra 	_CSClean
.af84						_CSDoneClean:
.af84		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.af86		9d 46 05	sta $0546,x			sta 	lineBuffer,x
.af89		e8		inx				inx
.af8a		9e 46 05	stz $0546,x			stz 	lineBuffer,x
.af8d		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.af8f		a9 46		lda #$46			lda 	#(lineBuffer & $FF)
.af91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.af92						Command_Try:
.af92		b1 30		lda ($30),y			lda 	(codePtr),y
.af94		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.af96		d0 0c		bne $afa4			bne 	_TrySyntax
.af98		c8		iny				iny 								; get second
.af99		b1 30		lda ($30),y			lda 	(codePtr),y
.af9b		c8		iny				iny 								; and consume it.
.af9c		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.af9e		f0 09		beq $afa9			beq 	_TryBLoad
.afa0		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.afa2		f0 0a		beq $afae			beq 	_TryBSave
.afa4						_TrySyntax:
.afa4		a9 02		lda #$02		lda	#2
.afa6		4c d5 93	jmp $93d5		jmp	ErrorHandler
.afa9						_TryBLoad:
.afa9		20 3e ac	jsr $ac3e			jsr 	BLOADHandler
.afac		80 03		bra $afb1			bra 	_TryExit
.afae						_TryBSave:
.afae		20 ea ac	jsr $acea			jsr 	BSaveHandler
.afb1						_TryExit:
.afb1		48		pha				pha 								; save result
.afb2		b1 30		lda ($30),y			lda 	(codePtr),y
.afb4		c8		iny				iny
.afb5		c9 dc		cmp #$dc			cmp 	#KWD_TO
.afb7		d0 eb		bne $afa4			bne 	_TrySyntax
.afb9		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.afbb		20 29 9d	jsr $9d29			jsr 	EvaluateTerm
.afbe		b5 50		lda $50,x			lda 	NSStatus,x
.afc0		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.afc2		d0 e0		bne $afa4			bne		_TrySyntax
.afc4		68		pla				pla 								; error code.
.afc5		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.afc7		20 37 a3	jsr $a337			jsr 	NSMSetByte
.afca		ca		dex				dex
.afcb		20 1b 8c	jsr $8c1b			jsr 	AssignVariable 				; do the assign and exit
.afce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e779						m
.afcf						Command_VERIFY:
.afcf		20 8d a2	jsr $a28d			jsr 	EvaluateString 				; file name to verify
.afd2		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.afd4		a5 36		lda $36				lda 	zTemp0
.afd6		20 d7 83	jsr $83d7			jsr 	KNLOpenFileRead 			; open file for reading
.afd9		b0 4b		bcs $b026			bcs 	_CVErrorHandler 			; error, so fail.
.afdb		8d dc 07	sta $07dc			sta 	BasicFileStream 			; save the reading stream.
.afde		20 dd ae	jsr $aedd			jsr     LoadReadByteInit            ; Init reader with the stream
.afe1		9c db 07	stz $07db			stz 	LoadEOFFlag 				; clear EOF Flag.
.afe4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.afe6		85 30		sta $30				sta 	codePtr
.afe8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afea		85 31		sta $31				sta 	codePtr+1
.afec						_CVLoop:
.afec		20 9b ae	jsr $ae9b			jsr 	LoadReadLine 				; get next line.
.afef		f0 27		beq $b018			beq 	_CVExit 					; end, exit.
.aff1		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.aff4		ad 47 04	lda $0447			lda 	tokenLineNumber 			; line number = 0
.aff7		0d 48 04	ora $0448			ora 	tokenLineNumber+1
.affa		f0 f0		beq $afec			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.affc		a0 00		ldy #$00			ldy 	#0 							; start compare
.affe						_CVCompareLoop:
.affe		b1 30		lda ($30),y			lda 	(codePtr),y
.b000		d9 46 04	cmp $0446,y			cmp 	tokenOffset,y 				; compare against actual code.
.b003		d0 1c		bne $b021			bne 	_CVCompareError
.b005		c8		iny				iny
.b006		cc 46 04	cpy $0446			cpy 	tokenOffset 				; until done whole line of code
.b009		d0 f3		bne $affe			bne 	_CVCompareLoop
.b00b		18		clc				clc
.b00c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b00e		65 30		adc $30				adc 	codePtr
.b010		85 30		sta $30				sta 	codePtr
.b012		90 02		bcc $b016			bcc 	_CREExit
.b014		e6 31		inc $31				inc 	codePtr+1 					; carry
.b016						_CREExit:
.b016		80 d4		bra $afec			bra 	_CVLoop
.b018						_CVExit:
.b018		ad dc 07	lda $07dc			lda 	BasicFileStream
.b01b		20 a1 84	jsr $84a1			jsr 	KNLCloseFile
.b01e		4c 72 ae	jmp $ae72			jmp 	CLComplete
.b021						_CVCompareError:
.b021		a9 1b		lda #$1b		lda	#27
.b023		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b026						_CVErrorHandler:
.b026		4c 8d ae	jmp $ae8d			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.b029						UnaryJoyX:
.b029		18		clc				clc
.b02a		80 01		bra $b02d			bra 	JoyMain
.b02c						UnaryJoyY:
.b02c		38		sec				sec
.b02d						JoyMain:
.b02d		fa		plx				plx 								; get pos
.b02e		08		php				php 								; save carry (set for Y)
.b02f		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.b032		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.b035		20 a7 84	jsr $84a7			jsr 	KNLReadController 			; read the controller.
.b038		28		plp				plp
.b039		b0 02		bcs $b03d			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.b03b		4a		lsr a				lsr 	a
.b03c		4a		lsr a				lsr 	a
.b03d						_JMNoShift:
.b03d		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.b03e		b0 07		bcs $b047			bcs 	JMIsLeft
.b040		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.b041		b0 07		bcs $b04a			bcs 	JMIsRight
.b043		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; zero result
.b046		60		rts				rts
.b047						JMIsLeft:
.b047		4c 48 94	jmp $9448			jmp 	ReturnTrue
.b04a						JMIsRight:
.b04a		a9 01		lda #$01			lda 	#1
.b04c		20 37 a3	jsr $a337			jsr 	NSMSetByte
.b04f		60		rts				rts
.b050						UnaryJoyB:
.b050		fa		plx				plx 								; get pos
.b051		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.b054		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.b057		20 a7 84	jsr $84a7			jsr 	KNLReadController 			; read the controller.
.b05a		29 10		and #$10			and 	#$10
.b05c		d0 e9		bne $b047			bne 	JMIsLeft
.b05e		20 35 a3	jsr $a335			jsr 	NSMSetZero
.b061		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.b062						MCCommand:
.b062		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.b064		48		pha				pha
.b065		64 01		stz $01				stz 	1
.b067		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.b06a		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.b06c		8d e0 07	sta $07e0			sta 	DMAControlByte
.b06f		20 1d b1	jsr $b11d			jsr 	MCPosition 					; start position
.b072		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.b074		20 ee b0	jsr $b0ee			jsr 	MCCopyAddress
.b077		a2 08		ldx #$08			ldx 	#8
.b079		20 ee b0	jsr $b0ee			jsr 	MCCopyAddress
.b07c		b1 30		lda ($30),y			lda 	(codePtr),y
.b07e		c8		iny				iny
.b07f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.b081		f0 09		beq $b08c			beq 	_MCSize1D
.b083		c9 d6		cmp #$d6			cmp 	#KWD_RECT 					; RECT <x>,<y>
.b085		f0 11		beq $b098			beq 	_MCRect2D
.b087						_MCSyntax:
.b087		a9 02		lda #$02		lda	#2
.b089		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b08c						_MCSize1D:
.b08c		a2 00		ldx #$00			ldx 	#0 							; get size
.b08e		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger
.b091		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.b093		20 ee b0	jsr $b0ee			jsr 	MCCopyAddress
.b096		80 24		bra $b0bc			bra 	_MCDestination
.b098						_MCRect2D:
.b098		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.b09a		20 0b b1	jsr $b10b			jsr 	MCEvalCopyData16
.b09d		20 c4 93	jsr $93c4			jsr 	CheckComma
.b0a0		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.b0a2		20 0b b1	jsr $b10b			jsr 	MCEvalCopyData16
.b0a5		a9 ba		lda #$ba			lda 	#KWD_BY 					; BY keyword.
.b0a7		20 cc 93	jsr $93cc			jsr 	CheckNextA
.b0aa		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.b0ac		20 0b b1	jsr $b10b			jsr 	MCEvalCopyData16
.b0af		a2 12		ldx #$12			ldx 	#$12
.b0b1		20 12 b1	jsr $b112			jsr 	MCCopyData16
.b0b4		ad e0 07	lda $07e0			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.b0b7		09 02		ora #$02			ora 	#$02
.b0b9		8d e0 07	sta $07e0			sta 	DMAControlByte
.b0bc						_MCDestination:
.b0bc		b1 30		lda ($30),y			lda 	(codePtr),y
.b0be		c8		iny				iny
.b0bf		c9 d1		cmp #$d1			cmp 	#KWD_POKE 					; is it POKE n
.b0c1		f0 0e		beq $b0d1			beq 	_MCDestPoke
.b0c3		c9 dc		cmp #$dc			cmp 	#KWD_TO 					; is it TO n
.b0c5		d0 c0		bne $b087			bne 	_MCSyntax
.b0c7		20 1d b1	jsr $b11d			jsr 	MCPosition 					; get target address
.b0ca		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.b0cc		20 ee b0	jsr $b0ee			jsr 	MCCopyAddress
.b0cf		80 0e		bra $b0df			bra 	_MCDoDMA 					; and we can go.
.b0d1						_MCDestPoke:
.b0d1		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; POKE what
.b0d4		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.b0d7		ad e0 07	lda $07e0			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.b0da		09 04		ora #$04			ora 	#$04
.b0dc		8d e0 07	sta $07e0			sta 	DMAControlByte
.b0df						_MCDoDMA:
.b0df		ad e0 07	lda $07e0			lda 	DMAControlByte 				; set the DMA Control byte to go !
.b0e2		8d 00 df	sta $df00			sta 	$DF00
.b0e5						_MCWaitBUSD:
.b0e5		ad 01 df	lda $df01			lda 	$DF01
.b0e8		30 fb		bmi $b0e5			bmi 	_MCWaitBUSD
.b0ea		68		pla				pla 								; restore I/O.
.b0eb		85 01		sta $01				sta 	1
.b0ed		60		rts				rts
.b0ee						MCCopyAddress:
.b0ee		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.b0f0		29 fc		and #$fc			and 	#$FC
.b0f2		05 70		ora $70				ora 	NSMantissa3
.b0f4		d0 10		bne $b106			bne 	_MCRange
.b0f6		a5 58		lda $58				lda 	NSMantissa0
.b0f8		9d 00 df	sta $df00,x			sta 	$DF00,x
.b0fb		a5 60		lda $60				lda 	NSMantissa1
.b0fd		9d 01 df	sta $df01,x			sta 	$DF01,x
.b100		a5 68		lda $68				lda 	NSMantissa2
.b102		9d 02 df	sta $df02,x			sta 	$DF02,x
.b105		60		rts				rts
.b106						_MCRange:
.b106		a9 04		lda #$04		lda	#4
.b108		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b10b						MCEvalCopyData16:
.b10b		da		phx				phx
.b10c		a2 00		ldx #$00			ldx 	#0
.b10e		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger
.b111		fa		plx				plx
.b112						MCCopyData16:
.b112		a5 58		lda $58				lda 	NSMantissa0
.b114		9d 00 df	sta $df00,x			sta 	$DF00,x
.b117		a5 60		lda $60				lda 	NSMantissa1
.b119		9d 01 df	sta $df01,x			sta 	$DF01,x
.b11c		60		rts				rts
.b11d						MCPosition:
.b11d		a2 00		ldx #$00			ldx 	#0 							; get start address.
.b11f		b1 30		lda ($30),y			lda 	(codePtr),y
.b121		c9 b9		cmp #$b9			cmp 	#KWD_AT
.b123		f0 04		beq $b129			beq 	_MCPAt
.b125		20 a2 a2	jsr $a2a2			jsr 	EvaluateInteger
.b128		60		rts				rts
.b129						_MCPAt:
.b129		c8		iny				iny
.b12a		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; X position
.b12d		48		pha				pha
.b12e		20 c4 93	jsr $93c4			jsr 	CheckComma
.b131		e8		inx				inx
.b132		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; Y position
.b135		ca		dex				dex
.b136		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.b138		64 58		stz $58				stz 	NSMantissa0
.b13a		64 68		stz $68				stz 	NSMantissa2
.b13c		64 70		stz $70				stz 	NSMantissa3
.b13e		46 60		lsr $60				lsr 	NSMantissa1
.b140		66 58		ror $58				ror 	NSMantissa0
.b142		46 60		lsr $60				lsr 	NSMantissa1
.b144		66 58		ror $58				ror 	NSMantissa0
.b146		68		pla				pla
.b147		18		clc				clc
.b148		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.b14a		85 58		sta $58				sta 	NSMantissa0
.b14c		a5 60		lda $60				lda 	NSMantissa1
.b14e		65 59		adc $59				adc 	NSMantissa0+1
.b150		85 60		sta $60				sta 	NSMantissa1
.b152		90 02		bcc $b156			bcc 	_MCPNoCarry
.b154		e6 68		inc $68				inc 	NSMantissa2
.b156						_MCPNoCarry:
.b156		ad ff 07	lda $07ff			lda 	gxBasePage
.b159		85 69		sta $69				sta 	NSMantissa2+1
.b15b		64 59		stz $59				stz 	NSMantissa0+1
.b15d		64 61		stz $61				stz 	NSMantissa1+1
.b15f		64 71		stz $71				stz 	NSMantissa3+1
.b161		a2 01		ldx #$01			ldx 	#1
.b163		20 4e a3	jsr $a34e			jsr 	NSMShiftRight
.b166		20 4e a3	jsr $a34e			jsr 	NSMShiftRight
.b169		20 4e a3	jsr $a34e			jsr 	NSMShiftRight
.b16c		a2 00		ldx #$00			ldx 	#0
.b16e		20 d5 96	jsr $96d5			jsr 	AddTopTwoStack
.b171		60		rts				rts
.07e0						DMAControlByte:
>07e0								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.b172						MouseStatus:
.b172		a9 ff		lda #$ff	        lda     #255
.b174		80 02		bra $b178	        bra     MouseCommand
.b176						MouseDeltaStatus:
.b176		a9 00		lda #$00	        lda     #0
.b178						MouseCommand:
.b178		8d 7f 06	sta $067f	        sta     CMDMouseFlag
.b17b		a2 00		ldx #$00	        ldx     #0
.b17d						_MouseCommandLoop:
.b17d		da		phx		        phx                                 ; save slot.
.b17e		20 dd 98	jsr $98dd	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.b181		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.b183		c9 20		cmp #$20	        cmp     #NSBIsReference
.b185		d0 60		bne $b1e7	        bne     _MouseNotRef
.b187		b1 30		lda ($30),y			lda 	(codePtr),y
.b189		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.b18b		d0 01		bne $b18e	        bne     _MouseNoSkipComma
.b18d		c8		iny		        iny
.b18e						_MouseNoSkipComma:
.b18e		fa		plx		        plx                                 ; restore X
.b18f		5a		phy		        phy                                 ; save Y
.b190		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.b192		85 36		sta $36		        sta     zTemp0
.b194		a5 60		lda $60		        lda     NSMantissa1
.b196		85 37		sta $37		        sta     zTemp0+1
.b198		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b19a		a9 00		lda #$00	        lda     #0
.b19c		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b19e		88		dey		        dey
.b19f		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b1a1		88		dey		        dey
.b1a2		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b1a4		88		dey		        dey
.b1a5		2c 7f 06	bit $067f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b1a8		30 12		bmi $b1bc	        bmi     _MouseMouseCommand
.b1aa						_MouseMDeltaCommand:
.b1aa		bd a2 06	lda $06a2,x	        lda     MouseDeltaX,x
.b1ad		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b1af		bd a3 06	lda $06a3,x	        lda     MouseDeltaX+1,x
.b1b2		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b1b4		9e a2 06	stz $06a2,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b1b7		9e a3 06	stz $06a3,x	        stz     MouseDeltaX+1,x
.b1ba		80 0a		bra $b1c6	        bra     _MouseProcessData
.b1bc						_MouseMouseCommand:
.b1bc		bd ae 06	lda $06ae,x	        lda     MousePosX,x
.b1bf		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b1c1		bd af 06	lda $06af,x	        lda     MousePosX+1,x
.b1c4		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b1c6						_MouseProcessData:
.b1c6		b1 36		lda ($36),y	        lda     (zTemp0),y
.b1c8		10 15		bpl $b1df	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b1ca		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b1cb		a9 00		lda #$00	        lda     #0
.b1cd		f2 36		sbc ($36)	        sbc     (zTemp0)
.b1cf		92 36		sta ($36)	        sta     (zTemp0)
.b1d1		a9 00		lda #$00	        lda     #0
.b1d3		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b1d5		91 36		sta ($36),y	        sta     (zTemp0),y
.b1d7		a0 03		ldy #$03	        ldy     #3
.b1d9		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b1db		09 80		ora #$80	        ora     #$80
.b1dd		91 36		sta ($36),y	        sta     (zTemp0),y
.b1df						_MouseDataPos:
.b1df		7a		ply		        ply                                 ; restore Y.
.b1e0		e8		inx		        inx                                 ; next entry
.b1e1		e8		inx		        inx
.b1e2		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b1e4		d0 97		bne $b17d	        bne     _MouseCommandLoop
.b1e6		60		rts		        rts
.b1e7						_MouseNotRef:
.b1e7		a9 07		lda #$07		lda	#7
.b1e9		4c d5 93	jmp $93d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b1ec						CommandSetDate:
.b1ec		a9 03		lda #$03			lda 	#3
.b1ee		80 02		bra $b1f2			bra 	CSDTMain
.b1f0						CommandSetTime:
.b1f0		a9 00		lda #$00			lda 	#0
.b1f2						CSDTMain:
.b1f2		48		pha				pha 								; save table offsets 0 or 3
.b1f3		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b1f5		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.b1f8		20 c4 93	jsr $93c4			jsr 	CheckComma
.b1fb		e8		inx				inx
.b1fc		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.b1ff		20 c4 93	jsr $93c4			jsr 	CheckComma
.b202		e8		inx				inx
.b203		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger
.b206		68		pla				pla 								; table offset in Y, saving Y
.b207		5a		phy				phy
.b208		a8		tay				tay
.b209		a2 00		ldx #$00			ldx 	#0 							; first number
.b20b		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b20d		48		pha				pha
.b20e		64 01		stz $01				stz 	1
.b210						_CSDTCopy:
.b210		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b212		d9 54 b2	cmp $b254,y			cmp 	RTCWMinValues,y 			; check range
.b215		90 1b		bcc $b232			bcc 	_CSDTRange
.b217		d9 5a b2	cmp $b25a,y			cmp 	RTCWMaxValues,y
.b21a		b0 16		bcs $b232			bcs 	_CSDTRange
.b21c		20 37 b2	jsr $b237			jsr 	CSDTDecimalToBCD
.b21f		da		phx				phx 								; save X
.b220		be 4e b2	ldx $b24e,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b223		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b226		fa		plx				plx 								; restore X
.b227		e8		inx				inx 								; next number
.b228		c8		iny				iny 								; next table entries
.b229		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b22b		d0 e3		bne $b210			bne 	_CSDTCopy
.b22d		68		pla				pla 								; restore I/O space
.b22e		85 01		sta $01				sta 	1
.b230		7a		ply				ply 								; restore code pos and exit.
.b231		60		rts				rts
.b232						_CSDTRange:
.b232		a9 04		lda #$04		lda	#4
.b234		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b237						CSDTDecimalToBCD:
.b237		da		phx				phx 								; 10 count in X
.b238		a2 00		ldx #$00			ldx 	#0
.b23a						_CSDTDBLoop:
.b23a		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b23c		90 05		bcc $b243			bcc 	_CSDTDBExit
.b23e		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b240		e8		inx				inx 								; one more 10s.
.b241		80 f7		bra $b23a			bra 	_CSDTDBLoop
.b243						_CSDTDBExit:
.b243		85 36		sta $36				sta 	zTemp0 						; units
.b245		8a		txa				txa 								; 10s x 16
.b246		0a		asl a				asl 	a
.b247		0a		asl a				asl 	a
.b248		0a		asl a				asl 	a
.b249		0a		asl a				asl 	a
.b24a		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b24c		fa		plx				plx
.b24d		60		rts				rts
.b24e						RTCWOffset:
>b24e		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b254						RTCWMinValues:
>b254		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b25a						RTCWMaxValues:
>b25a		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b260						UnaryTimer:
.b260		fa		plx				plx
.b261		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.b264						TimerToStackX:
.b264		20 35 a3	jsr $a335			jsr 	NSMSetZero 					; zero result
.b267		64 01		stz $01				stz 	1 							; access I/O
.b269		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b26c		95 58		sta $58,x			sta 	NSMantissa0,x
.b26e		ad 5a d6	lda $d65a			lda 	$D65A
.b271		95 60		sta $60,x			sta 	NSMantissa1,x
.b273		ad 5b d6	lda $d65b			lda 	$D65B
.b276		95 68		sta $68,x			sta 	NSMantissa2,x
.b278		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b279						UnaryGetTime:
.b279		a9 00		lda #$00			lda 	#0
.b27b		80 02		bra $b27f			bra 	UGDTMain
.b27d						UnaryGetDate:
.b27d		a9 03		lda #$03			lda 	#3
.b27f						UGDTMain:
.b27f		fa		plx				plx 								; get stack position back
.b280		48		pha				pha 								; save table offset
.b281		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger			; ignored parameter
.b284		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; closing )
.b287		68		pla				pla 								; table offset in A
.b288		5a		phy				phy 								; saving Y
.b289		a8		tay				tay 								; table offset in Y
.b28a		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b28c		20 80 b5	jsr $b580			jsr 	StringTempAllocate
.b28f		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b291		48		pha				pha
.b292		64 01		stz $01				stz 	1
.b294		20 a7 b2	jsr $b2a7			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b297		20 a2 b2	jsr $b2a2			jsr 	UGDTColonDigit
.b29a		20 a2 b2	jsr $b2a2			jsr 	UGDTColonDigit
.b29d		68		pla				pla 								; restore I/O select
.b29e		85 01		sta $01				sta 	1
.b2a0		7a		ply				ply  								; restore code position
.b2a1		60		rts				rts
.b2a2						UGDTColonDigit:
.b2a2		a9 3a		lda #$3a			lda 	#':'
.b2a4		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.b2a7						UGDTDigit:
.b2a7		da		phx				phx 								; save X
.b2a8		b9 c7 b2	lda $b2c7,y			lda 	RTCROffset,y 				; get offset in RTC register
.b2ab		aa		tax				tax
.b2ac		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b2af		39 cd b2	and $b2cd,y			and 	RTCRMask,y 					; and with Mask.
.b2b2		fa		plx				plx
.b2b3		48		pha				pha 								; output in BCD
.b2b4		4a		lsr a				lsr 	a
.b2b5		4a		lsr a				lsr 	a
.b2b6		4a		lsr a				lsr 	a
.b2b7		4a		lsr a				lsr 	a
.b2b8		09 30		ora #$30			ora 	#48
.b2ba		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.b2bd		68		pla				pla
.b2be		29 0f		and #$0f			and 	#15
.b2c0		09 30		ora #$30			ora 	#48
.b2c2		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.b2c5		c8		iny				iny
.b2c6		60		rts				rts
.b2c7						RTCROffset:
>b2c7		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b2cd						RTCRMask:
>b2cd		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b2d3						AscGet:
.b2d3		fa		plx				plx 								; restore stack pos
.b2d4						AscGet2:
.b2d4		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.b2d7		20 ce 81	jsr $81ce			jsr 	KNLGetSingleCharacter
.b2da		20 37 a3	jsr $a337			jsr 	NSMSetByte
.b2dd		60		rts				rts
.b2de						_AGBreak:
.b2de		a9 01		lda #$01		lda	#1
.b2e0		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b2e3						AscInkey:
.b2e3		fa		plx				plx 								; restore stack pos
.b2e4						AscInkey2:
.b2e4		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.b2e7		20 ac 81	jsr $81ac			jsr 	KNLGetKeyPressed
.b2ea		20 37 a3	jsr $a337			jsr 	NSMSetByte
.b2ed		60		rts				rts
.b2ee						ChrGet:
.b2ee		fa		plx				plx
.b2ef		20 d4 b2	jsr $b2d4			jsr 	AscGet2
.b2f2		4c f9 b2	jmp $b2f9			jmp 	GetInkeyToString
.b2f5						ChrInkey:
.b2f5		fa		plx				plx
.b2f6		20 e4 b2	jsr $b2e4			jsr 	AscInkey2
.b2f9						GetInkeyToString:
.b2f9		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b2fb		f0 0b		beq $b308			beq 	_GKISNull
.b2fd		48		pha				pha
.b2fe		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b300		20 80 b5	jsr $b580			jsr 	StringTempAllocate
.b303		68		pla				pla 								; write number to it
.b304		20 b9 b5	jsr $b5b9			jsr 	StringTempWrite
.b307		60		rts				rts
.b308						_GKISNull:
.b308		a9 00		lda #$00			lda 	#0
.b30a		20 80 b5	jsr $b580			jsr 	StringTempAllocate
.b30d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b30e						KeyDown:
.b30e		20 4e 81	jsr $814e			jsr 	ProcessEvents 				; process outstanding events.
.b311		fa		plx				plx 								; restore stack pos
.b312		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; key to check.
.b315		48		pha				pha 								; check right bracket.
.b316		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.b319		68		pla				pla
.b31a		20 ba 83	jsr $83ba			jsr 	KeyboardConvertXA 			; get offset and mask.
.b31d		3d 80 06	and $0680,x			and 	KeyStatus,x 				; is it zero ?
.b320		f0 03		beq $b325			beq 	_KeyUp
.b322		4c 48 94	jmp $9448			jmp 	ReturnTrue
.b325		4c 53 94	jmp $9453	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b328						Unary_Random:
.b328		fa		plx				plx
.b329		20 79 b3	jsr $b379			jsr 	URCopyToMantissa  			; put random # in mantissa
.b32c		b1 30		lda ($30),y			lda 	(codePtr),y
.b32e		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b330		f0 08		beq $b33a			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b332		e8		inx				inx
.b333		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b336		ca		dex				dex
.b337		20 9a 95	jsr $959a			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b33a						_URNoModulus:
.b33a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b33c		74 78		stz $78,x			stz 	NSExponent,x
.b33e		20 bc 93	jsr $93bc			jsr 	CheckRightBracket
.b341		60		rts				rts
.b342						Unary_Rnd:
.b342		fa		plx				plx
.b343		20 83 a2	jsr $a283			jsr 	EvaluateNumber 				; number to use.
.b346		20 bc 93	jsr $93bc			jsr 	CheckRightBracket 			; closing bracket
.b349		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b34b		10 20		bpl $b36d			bpl 	_URDontSeed
.b34d		a5 01		lda $01				lda 	1 							; switch to page 0
.b34f		48		pha				pha
.b350		64 01		stz $01				stz 	1
.b352		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b354		49 17		eor #$17			eor 	#$17
.b356		8d a4 d6	sta $d6a4			sta 	$D6A4
.b359		b5 60		lda $60,x			lda 	NSMantissa1,x
.b35b		49 a5		eor #$a5			eor 	#$A5
.b35d		8d a5 d6	sta $d6a5			sta 	$D6A5
.b360		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b362		8d a6 d6	sta $d6a6			sta 	$D6A6
.b365		a9 01		lda #$01			lda 	#1
.b367		8d a6 d6	sta $d6a6			sta 	$D6A6
.b36a		68		pla				pla
.b36b		85 01		sta $01				sta 	1
.b36d						_URDontSeed:
.b36d		20 79 b3	jsr $b379			jsr 	URCopyToMantissa 			; copy into mantissa
.b370		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b372		95 78		sta $78,x			sta 	NSExponent,x
.b374		a9 08		lda #$08			lda 	#NSTFloat
.b376		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b378		60		rts				rts
.b379						URCopyToMantissa:
.b379		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b37b		48		pha				pha
.b37c		64 01		stz $01				stz 	1
.b37e		a9 01		lda #$01			lda 	#1
.b380		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b383		ad a4 d6	lda $d6a4			lda 	$D6A4
.b386		95 58		sta $58,x			sta 	NSMantissa0,x
.b388		ad a5 d6	lda $d6a5			lda 	$D6A5
.b38b		95 60		sta $60,x			sta 	NSMantissa1,x
.b38d		ad a4 d6	lda $d6a4			lda 	$D6A4
.b390		95 68		sta $68,x			sta 	NSMantissa2,x
.b392		ad a5 d6	lda $d6a5			lda 	$D6A5
.b395		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b397		95 70		sta $70,x			sta 	NSMantissa3,x
.b399		68		pla				pla
.b39a		85 01		sta $01				sta 	1
.b39c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b39d						PingCommand:
.b39d		5a		phy				phy 								; save pos
.b39e		a9 01		lda #$01			lda 	#1 						; push channel.
.b3a0		48		pha				pha
.b3a1		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b3a3		a2 06		ldx #$06			ldx 	#6 						; length
.b3a5		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3a7		80 24		bra $b3cd			bra 	SoundEffectCommand
.b3a9						ZapCommand:
.b3a9		5a		phy				phy 								; save pos
.b3aa		a9 01		lda #$01			lda 	#1 						; push channel.
.b3ac		48		pha				pha
.b3ad		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b3af		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3b1		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b3b3		80 18		bra $b3cd			bra 	SoundEffectCommand
.b3b5						ShootCommand:
.b3b5		5a		phy				phy 								; save pos
.b3b6		a9 03		lda #$03			lda 	#3 						; push channel.
.b3b8		48		pha				pha
.b3b9		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b3bb		a2 04		ldx #$04			ldx 	#4 						; length
.b3bd		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3bf		80 0c		bra $b3cd			bra 	SoundEffectCommand
.b3c1						Explode:
.b3c1		5a		phy				phy 								; save pos
.b3c2		a9 03		lda #$03			lda 	#3 						; push channel.
.b3c4		48		pha				pha
.b3c5		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b3c7		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3c9		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3cb		80 00		bra $b3cd			bra 	SoundEffectCommand
.b3cd						SoundEffectCommand:
.b3cd		8d e1 07	sta $07e1			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b3d0		9c e2 07	stz $07e2			stz 	SoundCommandBlock+1
.b3d3		a9 0f		lda #$0f			lda 	#15
.b3d5		8d e3 07	sta $07e3			sta 	SoundCommandBlock+2
.b3d8		8e e4 07	stx $07e4			stx 	SoundCommandBlock+3
.b3db		8c e5 07	sty $07e5			sty 	SoundCommandBlock+4
.b3de		9c e6 07	stz $07e6			stz 	SoundCommandBlock+5
.b3e1		68		pla				pla
.b3e2		09 10		ora #$10			ora 	#$10  						; execute command $11
.b3e4		a2 e1		ldx #$e1			ldx 	#(SoundCommandBlock & $FF)
.b3e6		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b3e8		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3eb		7a		ply				ply
.b3ec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b3ed						UnaryPlaying:
.b3ed		fa		plx				plx
.b3ee		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; get channel #
.b3f1		48		pha				pha
.b3f2		20 bc 93	jsr $93bc			jsr		CheckRightBracket
.b3f5		68		pla				pla
.b3f6		c9 04		cmp #$04			cmp 	#4
.b3f8		b0 0c		bcs $b406			bcs 	_UPNotPlaying
.b3fa		09 20		ora #$20			ora 	#$20 						; query playing ?
.b3fc		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3ff		c9 00		cmp #$00			cmp 	#0
.b401		f0 03		beq $b406			beq 	_UPNotPlaying
.b403		4c 48 94	jmp $9448			jmp 	ReturnTrue
.b406						_UPNotPlaying:
.b406		4c 53 94	jmp $9453			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b409						SoundCommand:
.b409		b1 30		lda ($30),y			lda 	(codePtr),y
.b40b		c9 cc		cmp #$cc			cmp 	#KWD_OFF 					; SOUND OFF ?
.b40d		d0 09		bne $b418			bne 	_SNDMain
.b40f		c8		iny				iny 								; skip OFF
.b410		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b412		5a		phy				phy
.b413		20 6b 80	jsr $806b			jsr 	SNDCommand
.b416		7a		ply				ply
.b417		60		rts				rts
.b418						_SNDMain:
.b418		a2 00		ldx #$00			ldx 	#0
.b41a		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; channel
.b41d		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b41f		b0 4b		bcs $b46c			bcs 	_SndError
.b421		e8		inx				inx 								; do the rest in slot 1.
.b422		20 c4 93	jsr $93c4			jsr 	CheckComma
.b425		20 b5 a2	jsr $a2b5			jsr 	Evaluate16BitInteger 		; Pitch
.b428		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b42a		c9 10		cmp #$10			cmp 	#16
.b42c		b0 3e		bcs $b46c			bcs 	_SndError
.b42e		8d e2 07	sta $07e2			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b431		b5 58		lda $58,x			lda 	NSMantissa0,x
.b433		8d e1 07	sta $07e1			sta 	SoundCommandBlock
.b436		20 c4 93	jsr $93c4			jsr 	CheckComma
.b439		20 d0 a2	jsr $a2d0			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b43c		8d e4 07	sta $07e4			sta 	SoundCommandBlock+3
.b43f		a9 0f		lda #$0f			lda 	#15
.b441		8d e3 07	sta $07e3			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b444		9c e5 07	stz $07e5			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b447		9c e6 07	stz $07e6			stz 	SoundCommandBlock+5
.b44a		b1 30		lda ($30),y			lda 	(codePtr),y
.b44c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b44e		d0 0e		bne $b45e			bne 	_SNDPlay
.b450		c8		iny				iny
.b451		20 bf a2	jsr $a2bf			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b454		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b456		8d e5 07	sta $07e5			sta 	SoundCommandBlock+4
.b459		b5 60		lda $60,x			lda 	NSMantissa1,x
.b45b		8d e6 07	sta $07e6			sta 	SoundCommandBlock+5
.b45e						_SNDPlay:
.b45e		5a		phy				phy
.b45f		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b461		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b463		a2 e1		ldx #$e1			ldx 	#(SoundCommandBlock & $FF)
.b465		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b467		20 6b 80	jsr $806b			jsr 	SNDCommand
.b46a		7a		ply				ply
.b46b		60		rts				rts
.b46c						_SndError:
.b46c		4c b2 a4	jmp $a4b2			jmp 	RangeError
.07e1						SoundCommandBlock:
>07e1								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b46f						StackPushByte:
.b46f		48		pha				pha 								; save byte on stack
.b470		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b472		d0 08		bne $b47c			bne 	_SPBNoBorrow
.b474		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b476		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b478		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b47a		90 06		bcc $b482			bcc 	_SPBMemory
.b47c						_SPBNoBorrow:
.b47c		c6 34		dec $34				dec 	basicStack
.b47e		68		pla				pla 								; get back and write
.b47f		92 34		sta ($34)			sta 	(basicStack)
.b481		60		rts				rts
.b482						_SPBMemory:
.b482		a9 12		lda #$12		lda	#18
.b484		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b487						StackPopByte:
.b487		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b489		e6 34		inc $34				inc 	basicStack
.b48b		d0 02		bne $b48f			bne 	_SPBNoCarry
.b48d		e6 35		inc $35				inc 	basicStack+1
.b48f						_SPBNoCarry:
.b48f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b490						StackOpen:
.b490		48		pha				pha 								; save frame byte
.b491		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b493		0a		asl a				asl 	a 							; claim twice this for storage
.b494		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b496		38		sec				sec 								; so basically subtracting from
.b497		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b499		85 34		sta $34				sta 	basicStack
.b49b		b0 09		bcs $b4a6			bcs 	_SONoBorrow
>b49d		db						.byte 	$DB 						; causes a break in the emulator
.b49e		c6 35		dec $35				dec 	basicStack+1
.b4a0		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b4a2		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b4a4		90 04		bcc $b4aa			bcc 	_SOMemory
.b4a6						_SONoBorrow:
.b4a6		68		pla				pla 								; get marker back and write at TOS
.b4a7		92 34		sta ($34)			sta 	(basicStack)
.b4a9		60		rts				rts
.b4aa						_SOMemory:
.b4aa		a9 12		lda #$12		lda	#18
.b4ac		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b4af						StackClose:
.b4af		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b4b1		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b4b3		0a		asl a				asl 	a 							; claim twice this.
.b4b4		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b4b6		85 34		sta $34				sta 	basicStack
.b4b8		90 02		bcc $b4bc			bcc 	_SCExit
.b4ba		e6 35		inc $35				inc 	basicStack+1
.b4bc						_SCExit:
.b4bc		60		rts				rts
.b4bd						StackCheckFrame:
.b4bd		48		pha				pha
.b4be						_StackRemoveLocals:
.b4be		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b4c0		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b4c2		b0 05		bcs $b4c9			bcs 	_SCNoLocal
.b4c4		20 bb 8d	jsr $8dbb			jsr 	LocalPopValue 				; restore the local value
.b4c7		80 f5		bra $b4be			bra 	_StackRemoveLocals 			; gr round again
.b4c9						_SCNoLocal:
.b4c9		68		pla				pla 								; get the frame check.
.b4ca		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b4cc		29 f0		and #$f0			and 	#$F0 						; check type bits
.b4ce		d0 01		bne $b4d1			bne 	_SCFError 					; different, we have structures mixed up
.b4d0		60		rts				rts
.b4d1						_SCFError:
.b4d1		8a		txa				txa 								; report error X
.b4d2		4c d5 93	jmp $93d5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b4d5						STKSaveCodePosition:
.b4d5		5a		phy				phy
.b4d6		98		tya				tya 								; save Y
.b4d7		a0 05		ldy #$05			ldy 	#5
.b4d9		91 34		sta ($34),y			sta 	(basicStack),y
.b4db		88		dey				dey 								; save Code Pointer
.b4dc						_STKSaveLoop:
.b4dc		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b4df		91 34		sta ($34),y			sta 	(basicStack),y
.b4e1		88		dey				dey
.b4e2		d0 f8		bne $b4dc			bne 	_STKSaveLoop
.b4e4		7a		ply				ply
.b4e5		60		rts				rts
.b4e6						STKLoadCodePosition:
.b4e6		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b4e8						_STKLoadLoop:
.b4e8		b1 34		lda ($34),y			lda 	(basicStack),y
.b4ea		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b4ed		c8		iny				iny
.b4ee		c0 05		cpy #$05			cpy 	#5
.b4f0		d0 f6		bne $b4e8			bne 	_STKLoadLoop
.b4f2		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b4f4		a8		tay				tay
.b4f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b4f6						StackReset:
.b4f6		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b4f8		85 34		sta $34				sta 	0+basicStack
.b4fa		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b4fc		85 35		sta $35				sta 	1+basicStack
.b4fe		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b500		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b502		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b503						StringConcrete:
.b503		5a		phy				phy 								; save position on stack
.b504		20 15 9f	jsr $9f15			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b507		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b509		85 38		sta $38				sta 	zTemp1
.b50b		b5 60		lda $60,x			lda 	NSMantissa1,x
.b50d		85 39		sta $39				sta 	zTemp1+1
.b50f		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b511						_SALength:
.b511		c8		iny				iny
.b512		b1 38		lda ($38),y			lda 	(zTemp1),y
.b514		d0 fb		bne $b511			bne 	_SALength
.b516		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b518		b0 3d		bcs $b557			bcs 	_SALengthError
.b51a		98		tya				tya 				 				; length of the new string
.b51b		18		clc				clc
.b51c		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b51e		90 02		bcc $b522			bcc 	_SAHaveLength
.b520		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b522						_SAHaveLength:
.b522		48		pha				pha 								; save length.
.b523		38		sec				sec
.b524		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b526		6d 2a 04	adc $042a			adc 	stringMemory
.b529		8d 2a 04	sta $042a			sta 	stringMemory
.b52c		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b52e		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b530		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b532		6d 2b 04	adc $042b			adc 	stringMemory+1
.b535		8d 2b 04	sta $042b			sta 	stringMemory+1
.b538		85 3b		sta $3b				sta 	zTemp2+1
.b53a		95 60		sta $60,x			sta 	NSMantissa1,x
.b53c		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b53d		38		sec				sec
.b53e		e9 03		sbc #$03			sbc 	#3
.b540		92 3a		sta ($3a)			sta 	(zTemp2)
.b542		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b544		a0 01		ldy #$01			ldy 	#1
.b546		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b548						_SACopyNewString:
.b548		a0 00		ldy #$00			ldy 	#0
.b54a						_SACopyNSLoop:
.b54a		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b54c		c8		iny				iny 								; write two on in string storage
.b54d		c8		iny				iny
.b54e		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b550		88		dey				dey 								; this makes it one one.
.b551		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b553		d0 f5		bne $b54a			bne 	_SACopyNSLoop
.b555		7a		ply				ply
.b556		60		rts				rts
.b557						_SALengthError:
.b557		a9 09		lda #$09		lda	#9
.b559		4c d5 93	jmp $93d5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b55c						StringSystemInitialise:
.b55c		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b55e		8d 2a 04	sta $042a			sta 	0+stringMemory
.b561		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b563		8d 2b 04	sta $042b			sta 	1+stringMemory
.b566		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b569		60		rts				rts
.b56a						StringSpaceInitialise:
.b56a		20 15 9f	jsr $9f15			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b56d		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b56f		8d 2c 04	sta $042c			sta 	stringInitialised
.b572		ad 2a 04	lda $042a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b575		8d 2d 04	sta $042d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b578		ad 2b 04	lda $042b			lda 	stringMemory+1
.b57b		3a		dec a				dec 	a
.b57c		8d 2e 04	sta $042e			sta 	stringTempPointer+1
.b57f		60		rts				rts
.b580						StringTempAllocate:
.b580		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b582		b0 30		bcs $b5b4			bcs 	_STALength
.b584		2c 2c 04	bit $042c			bit 	stringInitialised 			; already initialised
.b587		30 05		bmi $b58e			bmi 	_STAAllocate
.b589		48		pha				pha 								; save value to subtract.
.b58a		20 6a b5	jsr $b56a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b58d		68		pla				pla 								; restore it
.b58e						_STAAllocate:
.b58e		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b590		18		clc				clc  								; deliberate allows one more
.b591		6d 2d 04	adc $042d			adc 	stringTempPointer 			; subtract from temp pointer
.b594		8d 2d 04	sta $042d			sta 	stringTempPointer
.b597		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b599		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b59b		ad 2e 04	lda $042e			lda 	stringTempPointer+1
.b59e		69 ff		adc #$ff			adc 	#$FF
.b5a0		8d 2e 04	sta $042e			sta 	stringTempPointer+1
.b5a3		85 3d		sta $3d				sta 	zsTemp+1
.b5a5		95 60		sta $60,x			sta 	NSMantissa1,x
.b5a7		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b5a9		74 70		stz $70,x			stz 	NSMantissa3,x
.b5ab		a9 10		lda #$10			lda 	#NSTString
.b5ad		95 50		sta $50,x			sta 	NSStatus,x
.b5af		a9 00		lda #$00			lda 	#0 							; clear the target string
.b5b1		92 3c		sta ($3c)			sta 	(zsTemp)
.b5b3		60		rts				rts
.b5b4						_STALength:
.b5b4		a9 09		lda #$09		lda	#9
.b5b6		4c d5 93	jmp $93d5		jmp	ErrorHandler
.b5b9						StringTempWrite:
.b5b9		48		pha				pha
.b5ba		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b5bc		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b5be		d0 02		bne $b5c2			bne 	_STWNoCarry
.b5c0		e6 3d		inc $3d				inc 	zsTemp+1
.b5c2						_STWNoCarry:
.b5c2		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b5c4		92 3c		sta ($3c)			sta 	(zsTemp)
.b5c6		68		pla				pla
.b5c7		60		rts				rts

;******  Return to file: _basic.asm

.b5c8						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac e8 07	ldy $07e8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac e8 07	ldy $07e8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad e9 07	lda $07e9			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c e8 07	sty $07e8			sty 	EXTColumn
.c02d	a02d	cc ea 07	cpy $07ea			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee e7 07	inc $07e7			inc 	EXTRow  					; bump row
.c035	a035	9c e8 07	stz $07e8			stz 	EXTColumn 					; back to column 0
.c038	a038	ad e7 07	lda $07e7			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd eb 07	cmp $07eb			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d ea 07	adc $07ea			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce e8 07	dec $07e8			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c e8 07	stz $07e8			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce e7 07	dec $07e7			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad e7 07	lda $07e7			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce e7 07	dec $07e7			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed ea 07	sbc $07ea			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c e8 07	sty $07e8			sty 	EXTColumn
.c08c	a08c	cc ea 07	cpy $07ea			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c e8 07	sty $07e8			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad eb 07	lda $07eb			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd e7 07	cmp $07e7			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee e7 07	inc $07e7			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d ea 07	adc $07ea			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad e8 07	lda $07e8			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d e8 07	sta $07e8			sta 	EXTColumn
.c0c9	a0c9	cd ea 07	cmp $07ea			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce e8 07	dec $07e8			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac ea 07	ldy $07ea			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc ea 07	cpy $07ea			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d e9 07	and $07e9			and 	EXTTextColour 				; mask out old.
.c135	a135	8d e9 07	sta $07e9			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d e9 07	ora $07e9			ora 	EXTTextColour
.c13c	a13c	8d e9 07	sta $07e9			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad e9 07	lda $07e9			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad e9 07	lda $07e9			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor				; home cursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c e7 07	stz $07e7			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c e8 07	stz $07e8			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address in I/O memory
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	ad e8 07	lda $07e8			lda 	EXTColumn
.c1c0	a1c0	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c3	a1c3	9c 15 d0	stz $d015			stz 	$D015
.c1c6	a1c6	ad e7 07	lda $07e7			lda 	EXTRow
.c1c9	a1c9	8d 16 d0	sta $d016			sta 	$D016
.c1cc	a1cc	9c 17 d0	stz $d017			stz 	$D017
.c1cf	a1cf	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07e7						EXTRow:
>07e7								.fill 	1
.07e8						EXTColumn:
>07e8								.fill 	1
.07e9						EXTTextColour:
>07e9								.fill 	1
.07ea						EXTScreenWidth:
>07ea								.fill 	1
.07eb						EXTScreenHeight:
>07eb								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1d0	a1d0					Export_EXTInitialise:
.c1d0	a1d0	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1d2	a1d2	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1d5	a1d5	9c 08 d0	stz $d008			stz 	$D008
.c1d8	a1d8	9c 09 d0	stz $d009			stz 	$D009
.c1db	a1db	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1dd	a1dd	8d 58 d6	sta $d658			sta 	$D658
.c1e0	a1e0	a9 52		lda #$52			lda 	#$52
.c1e2	a1e2	8d e9 07	sta $07e9			sta 	EXTTextColour
.c1e5	a1e5	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1e7	a1e7	8d ea 07	sta $07ea			sta 	EXTScreenWidth
.c1ea	a1ea	a9 3c		lda #$3c			lda 	#60
.c1ec	a1ec	8d eb 07	sta $07eb			sta 	EXTScreenHeight
.c1ef	a1ef	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1f1	a1f1	8d 10 d0	sta $d010			sta 	$D010
.c1f4	a1f4	a9 d6		lda #$d6			lda 	#214 						; cursor character
.c1f6	a1f6	8d 12 d0	sta $d012			sta 	$D012
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad e7 07	lda $07e7			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 92		ldx #$92			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 21		ldx #$21			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 c2		ldx #$c2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd 23 67	lda $6723,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad ea 07	lda $07ea			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac ea 07	ldy $07ea			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=20						GCMD_TileCtl = 10*2
=22						GCMD_TileSize = 11*2
=24						GCMD_TileScrollX = 12*2
=26						GCMD_TileScrollY = 13*2
=28						GCMD_TilePos = 14*2
=30						GCMD_TileWrite = 15*2
=32						GCMD_TileRead = 16*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	39 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	60 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	a8 a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e9 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	d9 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f8 a9					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	40 aa					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	b1 aa					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	da aa					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	ff ac					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	e9 a5					.word	GXControlTilemap         ; $0a TileCtl
>c2fd	a2fd	71 a6					.word	GXControlTileSize        ; $0b TileSize
>c2ff	a2ff	a1 a9					.word	GXControlTileScrollX     ; $0c TileScrollX
>c301	a301	b2 a9					.word	GXControlTileScrollY     ; $0d TileScrollY
>c303	a303	e0 ab					.word	GXSelectTile             ; $0e TilePos
>c305	a305	42 ac					.word	GXSTWriteTile            ; $0f TileWrite
>c307	a307	45 ac					.word	GXSTReadTile             ; $10 TileRead
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	a7 a6					.word	GXLine                   ; $21 Line
>c32b	a32b	22 a8					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	1f a8					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	a0 a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9c a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	07 a8					.word	GXPlotPoint              ; $28 Plot
>c339	a339	70 ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$643						gxPixelBuffer = numberBuffer
.07ec						gxCurrentX:
>07ec								.fill 	2
.07ee						gxCurrentY:
>07ee								.fill 	2
.07f0						gxLastX:
>07f0								.fill 	2
.07f2						gxLastY:
>07f2								.fill 	2
.07f4						gxX0:
>07f4								.fill 	2
.07f6						gxY0:
>07f6								.fill 	2
.07f8						gxX1:
>07f8								.fill 	2
.07fa						gxY1:
>07fa								.fill 	2
.07fc						gxSpritesOn:
>07fc								.fill 	1
.07fd						gxBitmapsOn:
>07fd								.fill 	1
.07fe						gxTilesOn:
>07fe								.fill 	1
.07ff						gxBasePage:
>07ff								.fill 	1
.0800						gxSpritePage:
>0800								.fill 	1
.0801						gxTileImagePage:
>0801								.fill 	1
.0802						gxTileMapPage:
>0802								.fill 	1
.0803						gxTileMapWidth:
>0803								.fill 	1
.0804						gxTileMapHeight:
>0804								.fill 	1
.0805						gxHeight:
>0805								.fill 	1
.0806						gxMode:
>0806								.fill 	1
.0807						gxColour:
>0807								.fill 	1
.0808						gxEORValue:
>0808								.fill 	1
.0809						gxANDValue:
>0809								.fill 	1
.080a						gxOriginalLUTValue:
>080a								.fill 	1
.080b						gxOffset:
>080b								.fill 	1
.080c						GSCurrentSpriteID:
>080c								.fill 	1
.080d						GSCurrentSpriteAddr:
>080d								.fill 	2
.080f						gxSpriteOffsetBase:
>080f								.fill 	2
.0811						gxSpriteLow:
>0811								.fill 	64
.0851						gxSpriteHigh:
>0851								.fill 	64
.0891						gxTileAccessPage:
>0891								.fill 	1
.0892						gxTileAccessAddress:
>0892								.fill 	2
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd ec 07	lda $07ec,x			lda 	gxCurrentX,x
.c34d	a34d	9d f0 07	sta $07f0,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d ee 07	sta $07ee			sta 	gxCurrentY
.c357	a357	9c ef 07	stz $07ef			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d ec 07	sta $07ec			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d ed 07	sta $07ed			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad ed 07	lda $07ed			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad ec 07	lda $07ec			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad ee 07	lda $07ee			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd 05 08	cmp $0805			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd ec 07	lda $07ec,x			lda 	gxCurrentX,x
.c389	a389	9d f4 07	sta $07f4,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
.c39a	a39a	38		sec				sec
.c39b	a39b	60		rts				rts
.c39c	a39c					GXFillCircle:
.c39c	a39c	a9 ff		lda #$ff			lda 	#255 						; A determines fill or not
.c39e	a39e	80 02		bra $a3a2			bra 	GXCircle
.c3a0	a3a0					GXFrameCircle:
.c3a0	a3a0	a9 00		lda #$00			lda 	#0
.c3a2	a3a2					GXCircle:
.c3a2	a3a2	8d 97 08	sta $0897			sta 	gxIsFillMode				; save Fill flag
.c3a5	a3a5	ad fd 07	lda $07fd			lda 	gxBitmapsOn
.c3a8	a3a8	f0 26		beq $a3d0			beq 	_GXCFail
.c3aa	a3aa	20 ed ad	jsr $aded			jsr 	GXSortXY 					; topleft/bottomright
.c3ad	a3ad	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c3b0	a3b0	20 a2 a4	jsr $a4a2			jsr 	GXCircleSetup 				; set up for drawing
.c3b3	a3b3	9c 98 08	stz $0898			stz 	gxYChanged
.c3b6	a3b6					_GXCircleDraw:
.c3b6	a3b6	ad 95 08	lda $0895			lda 	gxxCentre					; while x <= y
.c3b9	a3b9	cd 96 08	cmp $0896			cmp 	gxYCentre
.c3bc	a3bc	90 0a		bcc $a3c8			bcc 	_GXCircleContinue
.c3be	a3be	d0 03		bne $a3c3			bne 	_GXNoLast  					; fix up if x < y
.c3c0	a3c0	20 d5 a3	jsr $a3d5			jsr 	GXPlot1
.c3c3	a3c3					_GXNoLast:
.c3c3	a3c3	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; close the bitmap
.c3c6	a3c6	18		clc				clc
.c3c7	a3c7	60		rts				rts
.c3c8	a3c8					_GXCircleContinue:
.c3c8	a3c8	20 d2 a3	jsr $a3d2			jsr 	GXPlot2 					; draw it
.c3cb	a3cb	20 4f a4	jsr $a44f			jsr 	GXCircleMove 				; adjust the coordinates
.c3ce	a3ce	80 e6		bra $a3b6			bra 	_GXCircleDraw
.c3d0	a3d0					_GXCFail:
.c3d0	a3d0	38		sec				sec
.c3d1	a3d1	60		rts				rts
.c3d2	a3d2					GXPlot2:
.c3d2	a3d2	20 d5 a3	jsr $a3d5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d5	a3d5					GXPlot1:
.c3d5	a3d5	ad 96 08	lda $0896			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d8	a3d8	f0 03		beq $a3dd			beq 	_GXPlot1Only
.c3da	a3da	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; plot and negate
.c3dd	a3dd					_GXPlot1Only:
.c3dd	a3dd	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; twice, undoing negation
.c3e0	a3e0	ad 95 08	lda $0895			lda 	gxxCentre 						; swap X and Y
.c3e3	a3e3	ae 96 08	ldx $0896			ldx	 	gxYCentre
.c3e6	a3e6	8d 96 08	sta $0896			sta 	gxYCentre
.c3e9	a3e9	8e 95 08	stx $0895			stx 	gxxCentre
.c3ec	a3ec	ad 98 08	lda $0898			lda 	gxYChanged 						; toggle Y Changed flag
.c3ef	a3ef	a9 ff		lda #$ff			lda 	#$FF
.c3f1	a3f1	8d 98 08	sta $0898			sta 	gxYChanged
.c3f4	a3f4	60		rts				rts
.c3f5	a3f5	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; do once
.c3f8	a3f8	60		rts				rts
.c3f9	a3f9	ad 97 08	lda $0897	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fc	a3fc	f0 05		beq $a403			beq 	_GXPlot0Always
.c3fe	a3fe	ad 98 08	lda $0898			lda 	gxYChanged						; fill mode, only draw if changed.
.c401	a401	f0 2d		beq $a430			beq 	GXPlot0Exit
.c403	a403					_GXPlot0Always:
.c403	a403	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c405	a405	ad 96 08	lda $0896			lda 	gxYCentre
.c408	a408	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c40b	a40b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40d	a40d	ad 95 08	lda $0895			lda 	gxxCentre
.c410	a410	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c413	a413	48		pha				pha 									; save last offset X
.c414	a414	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 					; calculate position/offset.
.c417	a417	68		pla				pla
.c418	a418	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c419	a419	85 36		sta $36				sta 	gxzTemp0
.c41b	a41b	64 37		stz $37				stz 	gxzTemp0+1
.c41d	a41d	26 37		rol $37				rol 	gxzTemp0+1
.c41f	a41f	ad 97 08	lda $0897			lda 	gxIsFillMode
.c422	a422	69 80		adc #$80			adc 	#128
.c424	a424	20 72 a8	jsr $a872			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c427	a427	38		sec				sec 									; GY = -GY
.c428	a428	a9 00		lda #$00			lda 	#0
.c42a	a42a	ed 96 08	sbc $0896			sbc 	gxYCentre
.c42d	a42d	8d 96 08	sta $0896			sta 	gxYCentre
.c430	a430					GXPlot0Exit:
.c430	a430	60		rts				rts
.c431	a431					GXSubCopy:
.c431	a431	85 36		sta $36				sta 	gxzTemp0
.c433	a433	64 37		stz $37				stz 	gxzTemp0+1
.c435	a435	29 80		and #$80			and 	#$80
.c437	a437	f0 02		beq $a43b			beq 	_GXNoSx
.c439	a439	c6 37		dec $37				dec 	gxzTemp0+1
.c43b	a43b					_GXNoSx:
.c43b	a43b	38		sec				sec
.c43c	a43c	bd f8 07	lda $07f8,x			lda 	gxX1,x
.c43f	a43f	e5 36		sbc $36				sbc 	gxzTemp0
.c441	a441	9d f4 07	sta $07f4,x			sta 	gxX0,x
.c444	a444	bd f9 07	lda $07f9,x			lda 	gxX1+1,x
.c447	a447	e5 37		sbc $37				sbc 	gxzTemp0+1
.c449	a449	9d f5 07	sta $07f5,x			sta 	gxX0+1,x
.c44c	a44c	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44e	a44e	60		rts				rts
.c44f	a44f					GXCircleMove:
.c44f	a44f	9c 98 08	stz $0898			stz 	gxYChanged 					; clear Y changed flag
.c452	a452	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c454	a454	10 0d		bpl $a463			bpl 	_GXEMPositive
.c456	a456	ee 95 08	inc $0895			inc 	gxxCentre 					; X++
.c459	a459	ad 95 08	lda $0895			lda 	gxxCentre
.c45c	a45c	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45f	a45f	a9 06		lda #$06			lda 	#6  						; and add 6
.c461	a461	80 15		bra $a478			bra 	_GXEMAddD
.c463	a463					_GXEMPositive:
.c463	a463	ee 95 08	inc $0895			inc 	gxxCentre					; X++
.c466	a466	ce 96 08	dec $0896			dec 	gxYCentre 					; Y--
.c469	a469	38		sec				sec 								; calculate X-Y
.c46a	a46a	ad 95 08	lda $0895			lda 	gxxCentre
.c46d	a46d	ed 96 08	sbc $0896			sbc 	gxYCentre
.c470	a470	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c473	a473	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c475	a475	ce 98 08	dec $0898			dec 	gxYChanged
.c478	a478					_GXEMAddD:
.c478	a478	18		clc				clc
.c479	a479	65 38		adc $38				adc 	gxzTemp1
.c47b	a47b	85 38		sta $38				sta 	gxzTemp1
.c47d	a47d	90 02		bcc $a481			bcc 	_GXEMNoCarry
.c47f	a47f	e6 39		inc $39				inc 	gxzTemp1+1
.c481	a481					_GXEMNoCarry:
.c481	a481	60		rts				rts
.c482	a482					_GXAdd4TimesToD:
.c482	a482	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c484	a484	29 80		and #$80			and 	#$80
.c486	a486	f0 02		beq $a48a			beq 	_GXA4Unsigned
.c488	a488	a9 ff		lda #$ff			lda 	#$FF
.c48a	a48a					_GXA4Unsigned:
.c48a	a48a	85 37		sta $37				sta 	gxzTemp0+1
.c48c	a48c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48e	a48e	26 37		rol $37				rol 	gxzTemp0+1
.c490	a490	06 36		asl $36				asl 	gxzTemp0
.c492	a492	26 37		rol $37				rol 	gxzTemp0+1
.c494	a494	18		clc				clc 								; add
.c495	a495	a5 36		lda $36				lda		gxzTemp0
.c497	a497	65 38		adc $38				adc 	gxzTemp1
.c499	a499	85 38		sta $38				sta 	gxzTemp1
.c49b	a49b	a5 37		lda $37				lda		gxzTemp0+1
.c49d	a49d	65 39		adc $39				adc 	gxzTemp1+1
.c49f	a49f	85 39		sta $39				sta 	gxzTemp1+1
.c4a1	a4a1	60		rts				rts
.c4a2	a4a2					GXCircleSetup:
.c4a2	a4a2	38		sec				sec
.c4a3	a4a3	ad fa 07	lda $07fa			lda 	gxY1
.c4a6	a4a6	ed f6 07	sbc $07f6			sbc 	gxY0
.c4a9	a4a9	4a		lsr a				lsr 	a
.c4aa	a4aa	8d 94 08	sta $0894			sta 	gxRadius
.c4ad	a4ad	a2 00		ldx #$00			ldx 	#0
.c4af	a4af	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b2	a4b2	a2 02		ldx #$02			ldx 	#2
.c4b4	a4b4	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b7	a4b7	9c 95 08	stz $0895			stz 	gxxCentre
.c4ba	a4ba	ad 94 08	lda $0894			lda 	gxRadius
.c4bd	a4bd	8d 96 08	sta $0896			sta 	gxYCentre
.c4c0	a4c0	0a		asl a				asl 	a 							; R x 2
.c4c1	a4c1	85 36		sta $36				sta 	gxzTemp0
.c4c3	a4c3	38		sec				sec
.c4c4	a4c4	a9 03		lda #$03			lda 	#3
.c4c6	a4c6	e5 36		sbc $36				sbc 	gxzTemp0
.c4c8	a4c8	85 38		sta $38				sta 	gxzTemp1
.c4ca	a4ca	a9 00		lda #$00			lda 	#0
.c4cc	a4cc	e9 00		sbc #$00			sbc 	#0
.c4ce	a4ce	85 39		sta $39				sta 	gxzTemp1+1
.c4d0	a4d0	60		rts				rts
.c4d1	a4d1					_GXCalculateCentre:
.c4d1	a4d1	38		sec				sec
.c4d2	a4d2	bd f8 07	lda $07f8,x			lda 	gxX1,x
.c4d5	a4d5	7d f4 07	adc $07f4,x			adc 	gxX0,x
.c4d8	a4d8	9d f8 07	sta $07f8,x			sta 	gxX1,x
.c4db	a4db	bd f9 07	lda $07f9,x			lda 	gxX1+1,x
.c4de	a4de	7d f5 07	adc $07f5,x			adc 	gxX0+1,x
.c4e1	a4e1	4a		lsr a				lsr 	a
.c4e2	a4e2	9d f9 07	sta $07f9,x			sta 	gxX1+1,x
.c4e5	a4e5	7e f8 07	ror $07f8,x			ror 	gxX1,x
.c4e8	a4e8	60		rts				rts
.0894						gxRadius:
>0894								.fill 	1
.0895						gxxCentre:
>0895								.fill 	1
.0896						gxYCentre:
>0896								.fill 	1
.0897						gxIsFillMode:
>0897								.fill 	1
.0898						gxYChanged:
>0898								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e9	a4e9					GXClearBitmap:
.c4e9	a4e9	ad fd 07	lda $07fd			lda 	gxBitmapsOn 				; check BMP turned on.
.c4ec	a4ec	f0 26		beq $a514			beq 	_GXCBFail
.c4ee	a4ee	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start access
.c4f1	a4f1	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f3	a4f3	ad 05 08	lda $0805			lda 	gxHeight
.c4f6	a4f6	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f8	a4f8	f0 02		beq $a4fc			beq 	_GXCalcLastPage
.c4fa	a4fa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fc	a4fc					_GXCalcLastPage:
.c4fc	a4fc	98		tya				tya 								; add to base page
.c4fd	a4fd	18		clc				clc
.c4fe	a4fe	6d ff 07	adc $07ff			adc 	gxBasePage
.c501	a501	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c503	a503					_GXClearAll:
.c503	a503	20 16 a5	jsr $a516			jsr 	_GXClearBlock 				; clear 8k block
.c506	a506	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c508	a508	a5 0b		lda $0b				lda 	GXEditSlot
.c50a	a50a	cd ff 07	cmp $07ff			cmp 	gxBasePage 					; until before base page
.c50d	a50d	b0 f4		bcs $a503			bcs 	_GXClearAll
.c50f	a50f	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap	 			; stop access
.c512	a512	18		clc				clc
.c513	a513	60		rts				rts
.c514	a514					_GXCBFail:
.c514	a514	38		sec				sec
.c515	a515	60		rts				rts
.c516	a516					_GXClearBlock:
.c516	a516	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c518	a518	85 38		sta $38				sta 	0+gxzTemp1
.c51a	a51a	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51c	a51c	85 39		sta $39				sta 	1+gxzTemp1
.c51e	a51e					_GXCB0:
.c51e	a51e	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c520	a520	a0 00		ldy #$00			ldy 	#0
.c522	a522					_GXCB1:
.c522	a522	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c524	a524	c8		iny				iny
.c525	a525	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c527	a527	c8		iny				iny
.c528	a528	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52a	a52a	c8		iny				iny
.c52b	a52b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52d	a52d	c8		iny				iny
.c52e	a52e	d0 f2		bne $a522			bne 	_GXCB1
.c530	a530	e6 39		inc $39				inc 	gxzTemp1+1
.c532	a532	a5 39		lda $39				lda 	gxzTemp1+1
.c534	a534	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c536	a536	d0 e6		bne $a51e			bne 	_GXCB0
.c538	a538	60		rts				rts
.c539	a539					GXInitialise:
.c539	a539	64 01		stz $01				stz 	1 							; access I/O
.c53b	a53b	a9 01		lda #$01			lda 	#1 							; reset bitmap address
.c53d	a53d	8d 00 d0	sta $d000			sta 	$D000
.c540	a540	18		clc				clc
.c541	a541	9c fc 07	stz $07fc			stz 	gxSpritesOn					; sprites/bitmaps/tiles off.
.c544	a544	9c fd 07	stz $07fd			stz 	gxBitmapsOn
.c547	a547	9c fe 07	stz $07fe			stz 	gxTilesOn
.c54a	a54a	a2 0f		ldx #$0f			ldx 	#15 						; erase work area
.c54c	a54c					_GXIClear:
.c54c	a54c	9e ec 07	stz $07ec,x			stz 	gxCurrentX,x
.c54f	a54f	ca		dex				dex
.c550	a550	10 fa		bpl $a54c			bpl 	_GXIClear
.c552	a552	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore 			; clear sprite backup space.
.c555	a555	a9 40		lda #$40			lda 	#$40                   		; Layer 0 = Bitmap 0, Layer 1 = Tile map 0
.c557	a557	8d 02 d0	sta $d002			sta 	$D002
.c55a	a55a	a9 15		lda #$15			lda 	#$15                   		; Layer 2 = Tile Map 1
.c55c	a55c	8d 03 d0	sta $d003			sta 	$D003
.c55f	a55f	60		rts				rts
.c560	a560					GXControlBitmap:
.c560	a560	64 01		stz $01				stz 	1
.c562	a562	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c564	a564	29 01		and #$01			and 	#1 							; get bitmap flag (is enabled)
.c566	a566	8d fd 07	sta $07fd			sta 	gxBitmapsOn
.c569	a569	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c56a	a56a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c56d	a56d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c56f	a56f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c571	a571	90 02		bcc $a575			bcc 	_CBNotOn
.c573	a573	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c575	a575					_CBNotOn:
.c575	a575	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c578	a578	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c57a	a57a	29 07		and #$07			and 	#7
.c57c	a57c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c57f	a57f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page requested
.c581	a581	d0 02		bne $a585			bne 	_CBNotDefault
.c583	a583	a9 08		lda #$08			lda 	#8  						; if zero, use default 8 e.g. bitmap at $10000
.c585	a585					_CBNotDefault:
.c585	a585	8d ff 07	sta $07ff			sta 	gxBasePage 					; save as bitmap base page.
.c588	a588	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c58b	a58b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c58d	a58d	8d 03 d1	sta $d103			sta 	$D103
.c590	a590	a5 36		lda $36				lda 	gxzTemp0
.c592	a592	8d 02 d1	sta $d102			sta 	$D102
.c595	a595	9c 01 d1	stz $d101			stz 	$D101
.c598	a598	a2 f0		ldx #$f0			ldx 	#240 						; height is 240 or 200 ?
.c59a	a59a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c59d	a59d	29 01		and #$01			and 	#1
.c59f	a59f	f0 02		beq $a5a3			beq 	_CBHaveHeight
.c5a1	a5a1	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c5a3	a5a3					_CBHaveHeight
.c5a3	a5a3	8e 05 08	stx $0805			stx 	gxHeight
.c5a6	a5a6	18		clc				clc
.c5a7	a5a7	60		rts				rts
.c5a8	a5a8					GXControlSprite:
.c5a8	a5a8	64 01		stz $01				stz 	1
.c5aa	a5aa	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5ac	a5ac	29 01		and #$01			and 	#1 							; set sprites flag
.c5ae	a5ae	8d fc 07	sta $07fc			sta 	gxSpritesOn
.c5b1	a5b1	4a		lsr a				lsr 	a 							; bit 0 into carry
.c5b2	a5b2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5b5	a5b5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5b7	a5b7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5b9	a5b9	90 02		bcc $a5bd			bcc 	_CSNotOn
.c5bb	a5bb	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5bd	a5bd					_CSNotOn:
.c5bd	a5bd	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5c0	a5c0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5c2	a5c2	d0 02		bne $a5c6			bne 	_CSNotDefault
.c5c4	a5c4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5c6	a5c6					_CSNotDefault:
.c5c6	a5c6	8d 00 08	sta $0800			sta 	gxSpritePage
.c5c9	a5c9	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5cc	a5cc	a5 36		lda $36				lda 	gxzTemp0 					; save this so we know where the sprites are.
.c5ce	a5ce	8d 0f 08	sta $080f			sta 	gxSpriteOffsetBase
.c5d1	a5d1	a5 37		lda $37				lda 	gxzTemp0+1
.c5d3	a5d3	8d 10 08	sta $0810			sta 	gxSpriteOffsetBase+1
.c5d6	a5d6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5d8	a5d8					_CSClear:
.c5d8	a5d8	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5db	a5db	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5de	a5de	ca		dex				dex
.c5df	a5df	d0 f7		bne $a5d8			bne 	_CSClear
.c5e1	a5e1	9c 0e 08	stz $080e			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5e4	a5e4	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore
.c5e7	a5e7	18		clc				clc
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXControlTilemap:
.c5e9	a5e9	64 01		stz $01				stz 	1 							; access I/O
.c5eb	a5eb	a5 36		lda $36				lda 	gxzTemp0 					; get the Map Page/Enable
.c5ed	a5ed	30 0d		bmi $a5fc			bmi 	_GXCTOn
.c5ef	a5ef	ad 00 d0	lda $d000			lda 	$D000 						; turn off bitmap enable bit in MCR
.c5f2	a5f2	29 ef		and #$ef			and 	#$EF 						; clear bit 4
.c5f4	a5f4	8d 00 d0	sta $d000			sta 	$D000
.c5f7	a5f7	9c fe 07	stz $07fe			stz 	gxTilesOn 					; clear tiles on flag.
.c5fa	a5fa	18		clc				clc
.c5fb	a5fb	60		rts				rts
.c5fc	a5fc					_GXCTOn:
.c5fc	a5fc	8d fe 07	sta $07fe			sta 	gxTilesOn 					; set tiles on flag.
.c5ff	a5ff	ad 00 d0	lda $d000			lda 	$D000	 					; turn tilemap on
.c602	a602	09 17		ora #$17			ora 	#$17
.c604	a604	8d 00 d0	sta $d000			sta 	$D000
.c607	a607	9c c0 d2	stz $d2c0			stz 	$D2C0 						; turn off tilemap#1 and tilemap#2
.c60a	a60a	9c 18 d2	stz $d218			stz 	$D218
.c60d	a60d	a9 40		lda #$40			lda 	#64 						; default size of 64x32
.c60f	a60f	8d 03 08	sta $0803			sta 	gxTileMapWidth
.c612	a612	a9 20		lda #$20			lda		#32
.c614	a614	8d 04 08	sta $0804			sta 	gxTileMapHeight
.c617	a617	ad fe 07	lda $07fe			lda 	gxTilesOn 					; set the tile map page
.c61a	a61a	29 7f		and #$7f			and 	#$7F
.c61c	a61c	d0 02		bne $a620			bne	 	_GXCTNotMapDefault 			; check for default
.c61e	a61e	a9 12		lda #$12			lda 	#TILEMAP_ADDRESS >> 13
.c620	a620					_GXCTNotMapDefault:
.c620	a620	8d 02 08	sta $0802			sta 	gxTileMapPage
.c623	a623	a5 37		lda $37				lda 	gxzTemp0+1 					; set the tile image page
.c625	a625	d0 02		bne $a629			bne 	_GXCTNotImgDefault 			; check for default
.c627	a627	a9 13		lda #$13			lda 	#TILEIMAGES_ADDRESS >> 13
.c629	a629					_GXCTNotImgDefault:
.c629	a629	8d 01 08	sta $0801			sta 	gxTileImagePage
.c62c	a62c	a9 11		lda #$11			lda 	#$11 						; set tilemap#0 on and 8x8
.c62e	a62e	8d 00 d2	sta $d200			sta 	$D200
.c631	a631	ad 02 08	lda $0802			lda 	gxTileMapPage 				; put tile map address in.
.c634	a634	20 8b a6	jsr $a68b			jsr		GXCalculateBaseAddress
.c637	a637	9c 01 d2	stz $d201			stz 	$D201
.c63a	a63a	a5 36		lda $36				lda 	gxzTemp0
.c63c	a63c	8d 02 d2	sta $d202			sta 	$D202
.c63f	a63f	a5 37		lda $37				lda 	gxzTemp0+1
.c641	a641	8d 03 d2	sta $d203			sta 	$D203
.c644	a644	ad 03 08	lda $0803			lda 	gxTileMapWidth	 			; set tilemap size.
.c647	a647	8d 04 d2	sta $d204			sta 	$D204
.c64a	a64a	ad 04 08	lda $0804			lda 	gxTileMapHeight
.c64d	a64d	8d 06 d2	sta $d206			sta 	$D206
.c650	a650	9c 08 d2	stz $d208			stz 	$D208 						; clear scrolling register
.c653	a653	9c 09 d2	stz $d209			stz 	$D209
.c656	a656	9c 0a d2	stz $d20a			stz 	$D20A
.c659	a659	9c 0b d2	stz $d20b			stz 	$D20B
.c65c	a65c	ad 01 08	lda $0801			lda 	gxTileImagePage 			; set the tile image address
.c65f	a65f	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress
.c662	a662	9c 80 d2	stz $d280			stz 	$D280
.c665	a665	a5 36		lda $36				lda 	gxzTemp0
.c667	a667	8d 81 d2	sta $d281			sta 	$D281
.c66a	a66a	a5 37		lda $37				lda 	gxzTemp0+1
.c66c	a66c	8d 82 d2	sta $d282			sta 	$D282
.c66f	a66f	18		clc				clc
.c670	a670	60		rts				rts
.c671	a671					GXControlTileSize:
.c671	a671	ad fe 07	lda $07fe			lda 	gxTilesOn 					; check on
.c674	a674	38		sec				sec
.c675	a675	f0 13		beq $a68a			beq 	_GXCTSExit
.c677	a677	64 01		stz $01				stz 	1 							; access I/O 0
.c679	a679	a5 36		lda $36				lda 	gxzTemp0 					; save parameter to registes
.c67b	a67b	8d 03 08	sta $0803			sta 	gxTileMapWidth
.c67e	a67e	8d 04 d2	sta $d204			sta 	$D204
.c681	a681	a5 37		lda $37				lda 	gxzTemp0+1
.c683	a683	8d 04 08	sta $0804			sta 	gxTileMapHeight
.c686	a686	8d 06 d2	sta $d206			sta 	$D206
.c689	a689	18		clc				clc
.c68a	a68a					_GXCTSExit:
.c68a	a68a	60		rts				rts
.c68b	a68b					GXCalculateBaseAddress:
.c68b	a68b	85 36		sta $36				sta 	gxzTemp0
.c68d	a68d	64 37		stz $37				stz 	gxzTemp0+1
.c68f	a68f	a9 05		lda #$05			lda 	#5
.c691	a691					_GXShift:
.c691	a691	06 36		asl $36				asl 	gxzTemp0
.c693	a693	26 37		rol $37				rol 	gxzTemp0+1
.c695	a695	3a		dec a				dec		a
.c696	a696	d0 f9		bne $a691			bne 	_GXShift
.c698	a698	60		rts				rts
.c699	a699					GXClearSpriteStore:
.c699	a699	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c69b	a69b					_GXCSSLoop:
.c69b	a69b	9e 51 08	stz $0851,x			stz 	gxSpriteHigh,x
.c69e	a69e	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c6a0	a6a0	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.c6a3	a6a3	ca		dex				dex
.c6a4	a6a4	10 f5		bpl $a69b			bpl 	_GXCSSLoop
.c6a6	a6a6	60		rts				rts
.c6a7	a6a7					GXLine:
.c6a7	a6a7	ad fd 07	lda $07fd			lda 	gxBitmapsOn					; check bitmap on.
.c6aa	a6aa	f0 28		beq $a6d4			beq 	_GXLFail
.c6ac	a6ac	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; access it.
.c6af	a6af	20 0b ae	jsr $ae0b			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6b2	a6b2	20 7a a7	jsr $a77a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6b5	a6b5	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c6b8	a6b8					_GXDrawLoop:
.c6b8	a6b8	ac 0b 08	ldy $080b			ldy 	gxOffset 					; draw the pixel
.c6bb	a6bb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6bd	a6bd	2d 09 08	and $0809			and 	gxANDValue
.c6c0	a6c0	4d 08 08	eor $0808			eor 	gxEORValue
.c6c3	a6c3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6c5	a6c5	20 d6 a6	jsr $a6d6			jsr 	GXLineIsComplete 			; is the line complete ?
.c6c8	a6c8	f0 05		beq $a6cf			beq 	_GXLExit
.c6ca	a6ca	20 f1 a6	jsr $a6f1			jsr 	GXLineAdvance 				; code as per advance method
.c6cd	a6cd	80 e9		bra $a6b8			bra 	_GXDrawLoop
.c6cf	a6cf					_GXLExit:
.c6cf	a6cf	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; restore and return success.
.c6d2	a6d2	18		clc				clc
.c6d3	a6d3	60		rts				rts
.c6d4	a6d4					_GXLFail:
.c6d4	a6d4	38		sec				sec
.c6d5	a6d5	60		rts				rts
.c6d6	a6d6					GXLineIsComplete:
.c6d6	a6d6	ad 9b 08	lda $089b			lda 	gxIsDiffYLarger 			; is dy larger
.c6d9	a6d9	d0 0f		bne $a6ea			bne 	_GXLICCompareY 				; if so compare Y1 versus Y0
.c6db	a6db	ad f4 07	lda $07f4			lda 	gxX0 						; compare X, LSB and MSB
.c6de	a6de	4d f8 07	eor $07f8			eor 	gxX1
.c6e1	a6e1	d0 06		bne $a6e9			bne 	_GXLICExit
.c6e3	a6e3	ad f5 07	lda $07f5			lda 	gxX0+1
.c6e6	a6e6	4d f9 07	eor $07f9			eor 	gxX1+1
.c6e9	a6e9					_GXLICExit:
.c6e9	a6e9	60		rts				rts
.c6ea	a6ea					_GXLICCompareY:
.c6ea	a6ea	ad fa 07	lda $07fa			lda 	gxY1
.c6ed	a6ed	4d f6 07	eor $07f6			eor 	gxY0
.c6f0	a6f0	60		rts				rts
.c6f1	a6f1					GXLineAdvance:
.c6f1	a6f1	18		clc				clc 								; add adjust to position
.c6f2	a6f2	ad 9d 08	lda $089d			lda 	gxPosition
.c6f5	a6f5	6d 9e 08	adc $089e			adc 	gxAdjust
.c6f8	a6f8	8d 9d 08	sta $089d			sta 	gxPosition
.c6fb	a6fb	9c a0 08	stz $08a0			stz 	gxAddSelect 				; clear add select flag
.c6fe	a6fe	b0 05		bcs $a705			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c700	a700	cd 9f 08	cmp $089f			cmp 	gxTotal 					; if exceeded total
.c703	a703	90 0a		bcc $a70f			bcc 	_GXLANoExtra
.c705	a705					_GXLAOverflow:
.c705	a705	ce a0 08	dec $08a0			dec 	gxAddSelect 				; set addselect to $FF
.c708	a708	38		sec				sec 								; subtract total and write back
.c709	a709	ed 9f 08	sbc $089f			sbc 	gxTotal
.c70c	a70c	8d 9d 08	sta $089d			sta 	gxPosition
.c70f	a70f					_GXLANoExtra:
.c70f	a70f	ad 9b 08	lda $089b			lda 	gxIsDiffYLarger
.c712	a712	f0 0d		beq $a721			beq 	_GXDXLarger
.c714	a714	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c717	a717	ad a0 08	lda $08a0			lda 	gxAddSelect
.c71a	a71a	f0 10		beq $a72c			beq 	_GXLAExit
.c71c	a71c	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c71f	a71f	80 0b		bra $a72c			bra 	_GXLAExit
.c721	a721					_GXDXLarger:
.c721	a721	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c724	a724	ad a0 08	lda $08a0			lda 	gxAddSelect
.c727	a727	f0 03		beq $a72c			beq 	_GXLAExit
.c729	a729	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c72c	a72c					_GXLAExit:
.c72c	a72c	60		rts				rts
.c72d	a72d					gxAdjustX:
.c72d	a72d	ad 9c 08	lda $089c			lda 	gxDXNegative
.c730	a730	10 25		bpl $a757			bpl 	_GXAXRight
.c732	a732	ad f4 07	lda $07f4			lda 	gxX0
.c735	a735	d0 03		bne $a73a			bne 	_GXAXNoBorrow
.c737	a737	ce f5 07	dec $07f5			dec 	gxX0+1
.c73a	a73a					_GXAXNoBorrow:
.c73a	a73a	ce f4 07	dec $07f4			dec 	gxX0
.c73d	a73d	ce 0b 08	dec $080b			dec 	gxOffset 					; pixel left
.c740	a740	ad 0b 08	lda $080b			lda 	gxOffset
.c743	a743	c9 ff		cmp #$ff			cmp 	#$FF
.c745	a745	d0 0f		bne $a756			bne 	_GXAYExit 					; underflow
.c747	a747	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c749	a749	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c74b	a74b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c74d	a74d	b0 07		bcs $a756			bcs 	_GXAYExit
.c74f	a74f	18		clc				clc
.c750	a750	69 20		adc #$20			adc 	#$20 						; fix up
.c752	a752	85 3d		sta $3d				sta 	gxzScreen+1
.c754	a754	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c756	a756					_GXAYExit:
.c756	a756	60		rts				rts
.c757	a757					_GXAXRight:
.c757	a757	ee f4 07	inc $07f4			inc 	gxX0
.c75a	a75a	d0 03		bne $a75f			bne 	_GXAXNoCarry
.c75c	a75c	ee f5 07	inc $07f5			inc 	gxX0+1
.c75f	a75f					_GXAXNoCarry:
.c75f	a75f	ee 0b 08	inc $080b			inc 	gxOffset 					; pixel right
.c762	a762	d0 0e		bne $a772			bne 	_GXAXExit 					; if not overflowed, exit.
.c764	a764	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c766	a766	a5 3d		lda $3d				lda 	gxzScreen+1
.c768	a768	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c76a	a76a	90 06		bcc $a772			bcc 	_GXAXExit
.c76c	a76c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c76e	a76e	85 3d		sta $3d				sta 	gxzScreen+1
.c770	a770	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c772	a772					_GXAXExit:
.c772	a772	60		rts				rts
.c773	a773					GXIncrementY:
.c773	a773	ee f6 07	inc $07f6			inc 	gxY0
.c776	a776	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown
.c779	a779	60		rts				rts
.c77a	a77a					GXLineSetup:
.c77a	a77a	ad fa 07	lda $07fa			lda 	gxY1
.c77d	a77d	38		sec				sec
.c77e	a77e	ed f6 07	sbc $07f6			sbc 	gxY0
.c781	a781	4a		lsr a				lsr 	a
.c782	a782	8d 9a 08	sta $089a			sta 	gxDiffY
.c785	a785	9c 9c 08	stz $089c			stz 	gxDXNegative 				; clear -ve flag
.c788	a788	38		sec				sec
.c789	a789	ad f8 07	lda $07f8			lda 	gxX1
.c78c	a78c	ed f4 07	sbc $07f4			sbc 	gxX0
.c78f	a78f	8d 99 08	sta $0899			sta 	gxDiffX
.c792	a792	ad f9 07	lda $07f9			lda 	gxX1+1 						; calculate MSB
.c795	a795	ed f5 07	sbc $07f5			sbc 	gxX0+1
.c798	a798	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c799	a799	6e 99 08	ror $0899			ror 	gxDiffX
.c79c	a79c	0a		asl a				asl 	a
.c79d	a79d	10 0c		bpl $a7ab			bpl 	_GDXNotNegative
.c79f	a79f	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c7a1	a7a1	38		sec				sec
.c7a2	a7a2	ed 99 08	sbc $0899			sbc 	gxDiffX
.c7a5	a7a5	8d 99 08	sta $0899			sta 	gxDiffX
.c7a8	a7a8	ce 9c 08	dec $089c			dec 	gxDXNegative 				; -ve flag = $FF.
.c7ab	a7ab					_GDXNotNegative:
.c7ab	a7ab	9c 9b 08	stz $089b			stz 	gxIsDiffYLarger 			; clear larger flag
.c7ae	a7ae	ad 9a 08	lda $089a			lda 	gxDiffY 					; set adjust and total.
.c7b1	a7b1	8d 9e 08	sta $089e			sta 	gxAdjust
.c7b4	a7b4	ad 99 08	lda $0899			lda 	gxDiffX
.c7b7	a7b7	8d 9f 08	sta $089f			sta 	gxTotal
.c7ba	a7ba	ad 9a 08	lda $089a			lda 	gxDiffY 					; if dy > dx
.c7bd	a7bd	cd 99 08	cmp $0899			cmp 	gxDiffX
.c7c0	a7c0	90 0f		bcc $a7d1			bcc 	_GDXNotLarger
.c7c2	a7c2	ce 9b 08	dec $089b			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7c5	a7c5	ad 99 08	lda $0899			lda 	gxDiffX 					; set adjust and total other way round
.c7c8	a7c8	8d 9e 08	sta $089e			sta 	gxAdjust
.c7cb	a7cb	ad 9a 08	lda $089a			lda 	gxDiffY
.c7ce	a7ce	8d 9f 08	sta $089f			sta 	gxTotal
.c7d1	a7d1					_GDXNotLarger:
.c7d1	a7d1	ad 9f 08	lda $089f			lda 	gxTotal
.c7d4	a7d4	4a		lsr a				lsr 	a
.c7d5	a7d5	8d 9d 08	sta $089d			sta 	gxPosition
.c7d8	a7d8	60		rts				rts
.0899						gxDiffX:
>0899								.fill 	1
.089a						gxDiffY:
>089a								.fill 	1
.089b						gxIsDiffYLarger:
>089b								.fill 	1
.089c						gxDXNegative:
>089c								.fill 	1
.089d						gxPosition:
>089d								.fill 	1
.089e						gxAdjust:
>089e								.fill 	1
.089f						gxTotal:
>089f								.fill 	1
.08a0						gxAddSelect:
>08a0								.fill 	1
.c7d9	a7d9					GXSetColourMode:
.c7d9	a7d9	a6 36		ldx $36				ldx 	gxzTemp0
.c7db	a7db	8e 07 08	stx $0807			stx 	gxColour 								; set colour
.c7de	a7de	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7e0	a7e0	8d 06 08	sta $0806			sta 	gxMode 									; set mode
.c7e3	a7e3	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7e5	a7e5	9c 09 08	stz $0809			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7e8	a7e8	ae 07 08	ldx $0807			ldx 	gxColour
.c7eb	a7eb	8e 08 08	stx $0808			stx 	gxEORValue
.c7ee	a7ee	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7f0	a7f0	90 03		bcc $a7f5			bcc 	_GXSDCNotAndColour
.c7f2	a7f2	8e 09 08	stx $0809			stx 	gxANDValue
.c7f5	a7f5					_GXSDCNotAndColour:
.c7f5	a7f5	d0 03		bne $a7fa			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7f7	a7f7	9c 08 08	stz $0808			stz 	gxEORValue
.c7fa	a7fa					_GXSDCNotAnd:
.c7fa	a7fa	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7fb	a7fb	90 08		bcc $a805			bcc 	_GXSDCNoFlip
.c7fd	a7fd	ad 09 08	lda $0809			lda	 	gxANDValue
.c800	a800	49 ff		eor #$ff			eor 	#$FF
.c802	a802	8d 09 08	sta $0809			sta 	gxANDValue
.c805	a805					_GXSDCNoFlip:
.c805	a805	18		clc				clc
.c806	a806	60		rts				rts
.c807	a807					GXPlotPoint:
.c807	a807	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c80a	a80a	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c80d	a80d	ac 0b 08	ldy $080b			ldy 	gxOffset
.c810	a810	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c812	a812	2d 09 08	and $0809			and 	gxANDValue
.c815	a815	4d 08 08	eor $0808			eor 	gxEORValue
.c818	a818	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c81a	a81a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GXFillRectangle:
.c81f	a81f	38		sec				sec 								; pass carry in for fill/frame
.c820	a820	80 01		bra $a823			bra 	GXRectangle
.c822	a822					GXFrameRectangle:
.c822	a822	18		clc				clc
.c823	a823					GXRectangle:
.c823	a823	ad fd 07	lda $07fd			lda 	gxBitmapsOn 				; exit if off.
.c826	a826	f0 35		beq $a85d			beq 	_GXRFail
.c828	a828	08		php				php 								; save Fill flag (CS)
.c829	a829	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c82c	a82c	20 ed ad	jsr $aded			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c82f	a82f	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c832	a832	38		sec				sec 								; sec = Draw line
.c833	a833	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c836	a836	ad f6 07	lda $07f6			lda 	gxY0 						; reached end of rectangle ?
.c839	a839	cd fa 07	cmp $07fa			cmp 	gxY1 						; e.g. 1 pixel high.
.c83c	a83c	f0 19		beq $a857			beq 	_GXRectangleExit
.c83e	a83e					_GXRectLoop:
.c83e	a83e	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown 			; down one.
.c841	a841	ee f6 07	inc $07f6			inc 	gxY0 						; change Y pos
.c844	a844	ad f6 07	lda $07f6			lda 	gxY0 						; reached last line
.c847	a847	cd fa 07	cmp $07fa			cmp 	gxY1
.c84a	a84a	f0 07		beq $a853			beq 	_GXLastLine
.c84c	a84c	28		plp				plp 								; get flag back for solid/edged
.c84d	a84d	08		php				php
.c84e	a84e	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c851	a851	80 eb		bra $a83e			bra 	_GXRectLoop
.c853	a853					_GXLastLine:
.c853	a853	38		sec				sec
.c854	a854	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0
.c857	a857					_GXRectangleExit:
.c857	a857	68		pla				pla 								; throw fill flag.
.c858	a858	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c85b	a85b	18		clc				clc
.c85c	a85c	60		rts				rts
.c85d	a85d					_GXRFail:
.c85d	a85d	38		sec				sec
.c85e	a85e	60		rts				rts
.c85f	a85f					GXDrawLineX1X0:
.c85f	a85f	08		php				php 								; save solid/either-end
.c860	a860	38		sec				sec 								; calculate x1-x0
.c861	a861	ad f8 07	lda $07f8			lda		gxX1
.c864	a864	ed f4 07	sbc $07f4			sbc 	gxX0
.c867	a867	85 36		sta $36				sta 	gxzTemp0
.c869	a869	ad f9 07	lda $07f9			lda 	gxX1+1
.c86c	a86c	ed f5 07	sbc $07f5			sbc 	gxX0+1
.c86f	a86f	85 37		sta $37				sta 	gxzTemp0+1
.c871	a871	28		plp				plp
.c872	a872					GXDrawLineTemp0:
.c872	a872	a5 3c		lda $3c				lda 	gxzScreen 					; push gxzScreen, gxOffset and GXEditSlot on stack
.c874	a874	48		pha				pha
.c875	a875	a5 3d		lda $3d				lda 	gxzScreen+1
.c877	a877	48		pha				pha
.c878	a878	ad 0b 08	lda $080b			lda 	gxOffset
.c87b	a87b	48		pha				pha
.c87c	a87c	a5 0b		lda $0b				lda 	GXEditSlot
.c87e	a87e	48		pha				pha
.c87f	a87f	ac 0b 08	ldy $080b			ldy 	gxOffset 					; Y offset
.c882	a882	90 1e		bcc $a8a2			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c884	a884					_GXDLTLine:
.c884	a884	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c886	a886	2d 09 08	and $0809			and 	gxANDValue
.c889	a889	4d 08 08	eor $0808			eor 	gxEORValue
.c88c	a88c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c88e	a88e	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c890	a890	d0 04		bne $a896			bne 	_GXDLTNoBorrow
.c892	a892	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c894	a894	30 2e		bmi $a8c4			bmi 	_GXDLTExit
.c896	a896					_GXDLTNoBorrow:
.c896	a896	c6 36		dec $36				dec 	gxzTemp0
.c898	a898	c8		iny				iny 								; next slot.
.c899	a899	d0 e9		bne $a884			bne 	_GXDLTLine
.c89b	a89b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c89d	a89d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c8a0	a8a0	80 e2		bra $a884			bra 	_GXDLTLine
.c8a2	a8a2					_GXDLTEndPoints:
.c8a2	a8a2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c8a4	a8a4	2d 09 08	and $0809			and 	gxANDValue
.c8a7	a8a7	4d 08 08	eor $0808			eor 	gxEORValue
.c8aa	a8aa	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8ac	a8ac	98		tya				tya 								; advance to right side
.c8ad	a8ad	18		clc				clc
.c8ae	a8ae	65 36		adc $36				adc 	gxzTemp0
.c8b0	a8b0	a8		tay				tay
.c8b1	a8b1	a5 3d		lda $3d				lda 	gxzScreen+1
.c8b3	a8b3	65 37		adc $37				adc 	gxzTemp0+1
.c8b5	a8b5	85 3d		sta $3d				sta 	gxzScreen+1
.c8b7	a8b7	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap 				; fix up.
.c8ba	a8ba	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c8bc	a8bc	2d 09 08	and $0809			and 	gxANDValue
.c8bf	a8bf	4d 08 08	eor $0808			eor 	gxEORValue
.c8c2	a8c2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8c4	a8c4					_GXDLTExit:
.c8c4	a8c4	68		pla				pla
.c8c5	a8c5	85 0b		sta $0b				sta 	GXEditSlot
.c8c7	a8c7	68		pla				pla
.c8c8	a8c8	8d 0b 08	sta $080b			sta 	gxOffset
.c8cb	a8cb	68		pla				pla
.c8cc	a8cc	85 3d		sta $3d				sta 	gxzScreen+1
.c8ce	a8ce	68		pla				pla
.c8cf	a8cf	85 3c		sta $3c				sta 	gxzScreen
.c8d1	a8d1	60		rts				rts
.c8d2	a8d2					GXDLTCheckWrap:
.c8d2	a8d2	a5 3d		lda $3d				lda 	gxzScreen+1 				; check end of page
.c8d4	a8d4	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8d6	a8d6	90 06		bcc $a8de			bcc 	_GXDLTCWExit
.c8d8	a8d8	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8da	a8da	85 3d		sta $3d				sta 	gxzScreen+1
.c8dc	a8dc	e6 0b		inc $0b				inc 	GXEditSlot 					; next bitmap vram page.
.c8de	a8de					_GXDLTCWExit:
.c8de	a8de	60		rts				rts
.c8df	a8df					GXDrawGraphicElement:
.c8df	a8df	8d a1 08	sta $08a1			sta 	gxSize 						; save size
.c8e2	a8e2	3a		dec a				dec 	a
.c8e3	a8e3	8d a2 08	sta $08a2			sta 	gxMask 						; and mask
.c8e6	a8e6	ad fd 07	lda $07fd			lda 	gxBitmapsOn 				; check BMP on
.c8e9	a8e9	f0 67		beq $a952			beq 	_GXSLFail
.c8eb	a8eb	ad f6 07	lda $07f6			lda 	gxY0 						; push Y on stack
.c8ee	a8ee	48		pha				pha
.c8ef	a8ef	8c a4 08	sty $08a4			sty 	gxAcquireVector+1 			; and acquisition vector
.c8f2	a8f2	8e a3 08	stx $08a3			stx 	gxAcquireVector
.c8f5	a8f5	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; open the bitmap.
.c8f8	a8f8	ad a6 08	lda $08a6			lda 	gxUseMode 					; scale bits
.c8fb	a8fb	4a		lsr a				lsr 	a
.c8fc	a8fc	4a		lsr a				lsr 	a
.c8fd	a8fd	4a		lsr a				lsr 	a
.c8fe	a8fe	29 07		and #$07			and		#7
.c900	a900	1a		inc a				inc 	a
.c901	a901	8d a5 08	sta $08a5			sta 	gxScale
.c904	a904	64 38		stz $38				stz 	gxzTemp1					; start first line
.c906	a906					_GXGELoop:
.c906	a906	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c908	a908	2c a6 08	bit $08a6			bit 	gxUseMode 					; check for flip.
.c90b	a90b	10 06		bpl $a913			bpl		_GXNoVFlip
.c90d	a90d	ad a2 08	lda $08a2			lda 	gxMask
.c910	a910	38		sec				sec
.c911	a911	e5 38		sbc $38				sbc 	gxzTemp1
.c913	a913					_GXNoVFlip:
.c913	a913	aa		tax				tax 								; get the Xth line.
.c914	a914	20 54 a9	jsr $a954			jsr 	_GXCallAcquire 				; get that data.
.c917	a917	ad a5 08	lda $08a5			lda 	gxScale 					; do scale identical copies of that line.
.c91a	a91a	85 39		sta $39				sta 	gxzTemp1+1
.c91c	a91c					_GXGELoop2:
.c91c	a91c	ad f6 07	lda $07f6			lda 	gxY0 						; off screen
.c91f	a91f	cd 05 08	cmp $0805			cmp 	gxHeight
.c922	a922	b0 10		bcs $a934			bcs 	_GXDGEExit
.c924	a924	20 57 a9	jsr $a957			jsr 	GXRenderOneLine 			; render line
.c927	a927	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c929	a929	d0 f1		bne $a91c			bne 	_GXGELoop2
.c92b	a92b	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c92d	a92d	a5 38		lda $38				lda 	gxzTemp1
.c92f	a92f	cd a1 08	cmp $08a1			cmp 	gxSize
.c932	a932	d0 d2		bne $a906			bne 	_GXGELoop
.c934	a934					_GXDGEExit:
.c934	a934	68		pla				pla 								; restore Y for next time
.c935	a935	8d f6 07	sta $07f6			sta 	gxY0
.c938	a938	ae a5 08	ldx $08a5			ldx 	gxScale 					; get scale (1-8)
.c93b	a93b					_GXShiftLeft:
.c93b	a93b	18		clc				clc
.c93c	a93c	ad a1 08	lda $08a1			lda 	gxSize
.c93f	a93f	6d f4 07	adc $07f4			adc 	gxX0
.c942	a942	8d f4 07	sta $07f4			sta 	gxX0
.c945	a945	90 03		bcc $a94a			bcc 	_GXSLNoCarry
.c947	a947	ee f5 07	inc $07f5			inc 	gxX0+1
.c94a	a94a					_GXSLNoCarry:
.c94a	a94a	ca		dex				dex
.c94b	a94b	d0 ee		bne $a93b			bne 	_GXShiftLeft
.c94d	a94d	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.c950	a950	18		clc				clc
.c951	a951	60		rts				rts
.c952	a952					_GXSLFail:
.c952	a952	38		sec				sec
.c953	a953	60		rts				rts
.c954	a954					_GXCallAcquire:
.c954	a954	6c a3 08	jmp ($08a3)			jmp 	(gxAcquireVector)
.c957	a957					GXRenderOneLine:
.c957	a957	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c95a	a95a	ac 0b 08	ldy $080b			ldy 	gxOffset 					; Y contains position.
.c95d	a95d	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c95f	a95f					_GXROLLoop1:
.c95f	a95f	ad a5 08	lda $08a5			lda 	gxScale 					; set to do 'scale' times
.c962	a962	85 3b		sta $3b				sta 	gxzTemp2+1
.c964	a964					_GXROLLoop2:
.c964	a964	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c966	a966	2c 06 08	bit $0806			bit 	gxMode 						; check H Flip
.c969	a969	50 06		bvc $a971			bvc 	_GXNoHFlip
.c96b	a96b	ad a2 08	lda $08a2			lda 	gxMask
.c96e	a96e	38		sec				sec
.c96f	a96f	e5 3a		sbc $3a				sbc 	gxzTemp2
.c971	a971					_GXNoHFlip:
.c971	a971	aa		tax				tax 								; read from the pixel buffer
.c972	a972	bd 43 06	lda $0643,x			lda 	gxPixelBuffer,x
.c975	a975	d0 07		bne $a97e			bne 	_GXDraw 					; draw if non zero
.c977	a977	ad a6 08	lda $08a6			lda 	gxUseMode 					; check to see if solid background
.c97a	a97a	29 04		and #$04			and 	#4
.c97c	a97c	f0 0a		beq $a988			beq 	_GXZeroPixel
.c97e	a97e					_GXDraw:
.c97e	a97e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c980	a980	2d 09 08	and $0809			and 	gxANDValue
.c983	a983	5d 43 06	eor $0643,x			eor 	gxPixelBuffer,x
.c986	a986	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c988	a988					_GXZeroPixel:
.c988	a988	c8		iny				iny 								; advance pointer
.c989	a989	d0 05		bne $a990			bne 	_GXNoShift
.c98b	a98b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c98d	a98d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c990	a990					_GXNoShift:
.c990	a990	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c992	a992	d0 d0		bne $a964			bne 	_GXROLLoop2
.c994	a994	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c996	a996	a5 3a		lda $3a				lda 	gxzTemp2
.c998	a998	cd a1 08	cmp $08a1			cmp 	gxSize
.c99b	a99b	d0 c2		bne $a95f			bne 	_GXROLLoop1
.c99d	a99d	ee f6 07	inc $07f6			inc 	gxY0
.c9a0	a9a0	60		rts				rts
.08a1						gxSize:
>08a1								.fill 	1
.08a2						gxMask:
>08a2								.fill 	1
.08a3						gxAcquireVector:
>08a3								.fill 	2
.08a5						gxScale:
>08a5								.fill 	1
.08a6						gxUseMode:
>08a6								.fill 	1
.c9a1	a9a1					GXControlTileScrollX:
.c9a1	a9a1	ad 03 08	lda $0803			lda 	gxTileMapWidth 				; comparator value (max X tile)
.c9a4	a9a4	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9a7	a9a7	b0 08		bcs $a9b1			bcs 	_GXCTSExit
.c9a9	a9a9	64 01		stz $01				stz 	1 							; write it out.
.c9ab	a9ab	8e 08 d2	stx $d208			stx 	$D208
.c9ae	a9ae	8c 09 d2	sty $d209			sty 	$D209
.c9b1	a9b1					_GXCTSExit:
.c9b1	a9b1	60		rts				rts
.c9b2	a9b2					GXControlTileScrollY:
.c9b2	a9b2	ad 04 08	lda $0804			lda 	gxTileMapHeight 			; comparator value (max X tile)
.c9b5	a9b5	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9b8	a9b8	b0 08		bcs $a9c2			bcs 	_GXCTSExit
.c9ba	a9ba	64 01		stz $01				stz 	1 							; write it out.
.c9bc	a9bc	8e 0a d2	stx $d20a			stx 	$D20A
.c9bf	a9bf	8c 0b d2	sty $d20b			sty 	$D20B
.c9c2	a9c2					_GXCTSExit:
.c9c2	a9c2	60		rts				rts
.c9c3	a9c3					GXScrollProcessor:
.c9c3	a9c3	85 38		sta $38				sta 	gxzTemp1 					; save max tile value.
.c9c5	a9c5	ad fe 07	lda $07fe			lda 	gxTilesOn 					; check tile map is on.
.c9c8	a9c8	38		sec				sec
.c9c9	a9c9	f0 2c		beq $a9f7			beq 	_GXSPExit
.c9cb	a9cb	64 39		stz $39				stz 	gxzTemp1+1 					; convert tile size to a pixel scroll.
.c9cd	a9cd	a2 03		ldx #$03			ldx 	#3
.c9cf	a9cf					_GXCalcMaxPixelScroll:
.c9cf	a9cf	06 38		asl $38				asl 	gxzTemp1
.c9d1	a9d1	26 39		rol $39				rol 	gxzTemp1+1
.c9d3	a9d3	ca		dex				dex
.c9d4	a9d4	d0 f9		bne $a9cf			bne 	_GXCalcMaxPixelScroll
.c9d6	a9d6	a5 36		lda $36				lda 	gxzTemp0 					; check scroll in range.
.c9d8	a9d8	c5 38		cmp $38				cmp 	gxzTemp1
.c9da	a9da	a5 37		lda $37				lda 	gxzTemp0+1
.c9dc	a9dc	e5 39		sbc $39				sbc 	gxzTemp1+1
.c9de	a9de	b0 17		bcs $a9f7			bcs		_GXSPExit
.c9e0	a9e0	a5 36		lda $36				lda 	gxzTemp0 	 				; save fine scroll.
.c9e2	a9e2	29 07		and #$07			and		#7
.c9e4	a9e4	85 38		sta $38				sta 	gxzTemp1
.c9e6	a9e6	06 36		asl $36				asl 	gxzTemp0 					; shift left one, as whole tiles are 8 pixels.
.c9e8	a9e8	26 37		rol $37				rol 	gxzTemp0+1
.c9ea	a9ea	a5 37		lda $37				lda 	gxzTemp0+1 					; MSB is the upper byte.
.c9ec	a9ec	29 0f		and #$0f			and 	#$0F
.c9ee	a9ee	a8		tay				tay
.c9ef	a9ef	a5 36		lda $36				lda 	gxzTemp0 					; get coarse scroll
.c9f1	a9f1	29 f0		and #$f0			and 	#$F0
.c9f3	a9f3	05 38		ora $38				ora 	gxzTemp1 					; OR in fine scroll.
.c9f5	a9f5	aa		tax				tax 								; return in X
.c9f6	a9f6	18		clc				clc
.c9f7	a9f7					_GXSPExit:
.c9f7	a9f7	60		rts				rts
.c9f8	a9f8					GXFontHandler:
.c9f8	a9f8	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9fa	a9fa	4d 06 08	eor $0806			eor 	gxMode
.c9fd	a9fd	8d a6 08	sta $08a6			sta 	gxUseMode
.ca00	aa00	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.ca02	aa02	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.ca04	aa04	26 37		rol $37				rol	 	gxzTemp0+1
.ca06	aa06	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.ca08	aa08	26 37		rol $37				rol	 	gxzTemp0+1
.ca0a	aa0a	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ca0c	aa0c	26 37		rol $37				rol	 	gxzTemp0+1
.ca0e	aa0e	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ca10	aa10	09 c0		ora #$c0			ora 	#$C0
.ca12	aa12	85 37		sta $37				sta 	gxzTemp0+1
.ca14	aa14	a9 08		lda #$08			lda 	#8 							; size 8x8
.ca16	aa16	a2 1e		ldx #$1e			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.ca18	aa18	a0 aa		ldy #$aa			ldy 	#GXGetGraphicDataFont >> 8
.ca1a	aa1a	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca1d	aa1d	60		rts				rts
.ca1e	aa1e					GXGetGraphicDataFont:
.ca1e	aa1e	8a		txa				txa 								; X->Y
.ca1f	aa1f	a8		tay				tay
.ca20	aa20	a6 01		ldx $01				ldx 	1 							; preserve old value
.ca22	aa22	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.ca24	aa24	85 01		sta $01				sta 	1
.ca26	aa26	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.ca28	aa28	86 01		stx $01				stx 	1 							; put old value back.
.ca2a	aa2a	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ca2c	aa2c					_GXExpand:
.ca2c	aa2c	9e 43 06	stz $0643,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ca2f	aa2f	0a		asl a				asl 	a 							; shift bit 7 into C
.ca30	aa30	90 08		bcc $aa3a			bcc 	_GXNoPixel
.ca32	aa32	48		pha				pha 								; if set, set pixel buffer to current colour.
.ca33	aa33	ad 07 08	lda $0807			lda 	gxColour
.ca36	aa36	9d 43 06	sta $0643,x			sta 	gxPixelBuffer,x
.ca39	aa39	68		pla				pla
.ca3a	aa3a					_GXNoPixel:
.ca3a	aa3a	e8		inx				inx 								; do the whole byte.
.ca3b	aa3b	e0 08		cpx #$08			cpx 	#8
.ca3d	aa3d	d0 ed		bne $aa2c			bne 	_GXExpand
.ca3f	aa3f	60		rts				rts
.ca40	aa40					GXSpriteHandler:
.ca40	aa40	ad fc 07	lda $07fc			lda 	gxSpritesOn 				; sprites on ?
.ca43	aa43	f0 23		beq $aa68			beq 	_GXSHExit
.ca45	aa45	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ca47	aa47	4d 06 08	eor $0806			eor 	gxMode
.ca4a	aa4a	8d a6 08	sta $08a6			sta 	gxUseMode
.ca4d	aa4d	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ca4f	aa4f	da		phx				phx
.ca50	aa50	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; can access sprite information
.ca53	aa53	68		pla				pla
.ca54	aa54	20 5f ad	jsr $ad5f			jsr 	GXFindSprite 				; get the sprite address
.ca57	aa57	08		php				php
.ca58	aa58	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.ca5b	aa5b	28		plp				plp
.ca5c	aa5c	b0 0a		bcs $aa68			bcs		_GXSHExit 					; exit if find failed.
.ca5e	aa5e	ad a7 08	lda $08a7			lda 	gxSizePixels 				; return size
.ca61	aa61	a2 69		ldx #$69			ldx 	#GXSpriteAcquire & $FF
.ca63	aa63	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca65	aa65	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca68	aa68					_GXSHExit:
.ca68	aa68	60		rts				rts
.ca69	aa69					GXSpriteAcquire:
.ca69	aa69	ad 00 08	lda $0800			lda 	gxSpritePage				; point to base page
.ca6c	aa6c	85 0b		sta $0b				sta 	GXEditSlot
.ca6e	aa6e	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca70	aa70	a9 00		lda #$00			lda 	#0
.ca72	aa72	ae a8 08	ldx $08a8			ldx 	gxSizeBits
.ca75	aa75					_GXTimesRowNumber:
.ca75	aa75	18		clc				clc
.ca76	aa76	65 36		adc $36				adc 	gxzTemp0
.ca78	aa78	ca		dex				dex
.ca79	aa79	10 fa		bpl $aa75			bpl 	_GXTimesRowNumber
.ca7b	aa7b	64 37		stz $37				stz 	gxzTemp0+1
.ca7d	aa7d	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca7e	aa7e	26 37		rol $37				rol 	gxzTemp0+1
.ca80	aa80	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca81	aa81	26 37		rol $37				rol 	gxzTemp0+1
.ca83	aa83	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca84	aa84	26 37		rol $37				rol 	gxzTemp0+1
.ca86	aa86	85 36		sta $36				sta 	gxzTemp0
.ca88	aa88	18		clc				clc 								; add base address.
.ca89	aa89	a5 36		lda $36				lda 	gxzTemp0
.ca8b	aa8b	6d aa 08	adc $08aa			adc 	gxSpriteOffset
.ca8e	aa8e	85 36		sta $36				sta 	gxzTemp0
.ca90	aa90	a5 37		lda $37				lda 	gxzTemp0+1
.ca92	aa92	6d ab 08	adc $08ab			adc 	gxSpriteOffset+1
.ca95	aa95					_GXSAFindPage:
.ca95	aa95	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca97	aa97	90 06		bcc $aa9f			bcc 	_GXSAFoundPage
.ca99	aa99	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca9b	aa9b	e6 0b		inc $0b				inc 	GXEditSlot
.ca9d	aa9d	80 f6		bra $aa95			bra 	_GXSAFindPage
.ca9f	aa9f					_GXSAFoundPage:
.ca9f	aa9f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.caa1	aaa1	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.caa3	aaa3	a0 00		ldy #$00			ldy 	#0
.caa5	aaa5					_GXSACopyLoop:
.caa5	aaa5	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.caa7	aaa7	99 43 06	sta $0643,y			sta 	gxPixelBuffer,y
.caaa	aaaa	c8		iny				iny
.caab	aaab	cc a7 08	cpy $08a7			cpy 	gxSizePixels
.caae	aaae	d0 f5		bne $aaa5			bne 	_GXSACopyLoop
.cab0	aab0	60		rts				rts
.cab1	aab1					GXSelect:
.cab1	aab1	ad fc 07	lda $07fc			lda 	gxSpritesOn
.cab4	aab4	f0 22		beq $aad8			beq 	_GXSFail
.cab6	aab6	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.cab8	aab8	c9 40		cmp #$40			cmp 	#64
.caba	aaba	b0 1c		bcs $aad8			bcs 	_GXSFail
.cabc	aabc	8d 0c 08	sta $080c			sta 	GSCurrentSpriteID
.cabf	aabf	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.cac1	aac1	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.cac3	aac3	06 36		asl $36				asl 	gxzTemp0
.cac5	aac5	06 36		asl $36				asl 	gxzTemp0
.cac7	aac7	06 36		asl $36				asl 	gxzTemp0
.cac9	aac9	2a		rol a				rol 	a
.caca	aaca	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.cacc	aacc	8d 0e 08	sta $080e			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.cacf	aacf	85 37		sta $37				sta 	gxzTemp0+1
.cad1	aad1	a5 36		lda $36				lda 	gxzTemp0
.cad3	aad3	8d 0d 08	sta $080d			sta 	GSCurrentSpriteAddr
.cad6	aad6	18		clc				clc
.cad7	aad7	60		rts				rts
.cad8	aad8					_GXSFail:
.cad8	aad8	38		sec				sec
.cad9	aad9	60		rts				rts
.cada	aada					GXSelectImage:
.cada	aada	ad fc 07	lda $07fc			lda 	gxSpritesOn
.cadd	aadd	f0 74		beq $ab53			beq 	_GXSIFail
.cadf	aadf	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cae2	aae2	f0 6f		beq $ab53			beq 	_GXSIFail 					; (checking the MSB)
.cae4	aae4	64 01		stz $01				stz 	1
.cae6	aae6	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.cae8	aae8	d0 6b		bne $ab55			bne 	_GXSIHide
.caea	aaea	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.caec	aaec	48		pha				pha
.caed	aaed	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap
.caf0	aaf0	68		pla				pla
.caf1	aaf1	20 5f ad	jsr $ad5f			jsr 	GXFindSprite
.caf4	aaf4	b0 5a		bcs $ab50			bcs 	_GXSICloseFail 				; no image
.caf6	aaf6	a0 01		ldy #$01			ldy 	#1
.caf8	aaf8	ad 0d 08	lda $080d			lda 	GSCurrentSpriteAddr
.cafb	aafb	85 36		sta $36				sta 	gxzTemp0
.cafd	aafd	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1
.cb00	ab00	85 37		sta $37				sta 	gxzTemp0+1
.cb02	ab02	ad aa 08	lda $08aa			lda 	gxSpriteOffset
.cb05	ab05	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb07	ab07	18		clc				clc
.cb08	ab08	ad ab 08	lda $08ab			lda 	gxSpriteOffset+1
.cb0b	ab0b	6d 0f 08	adc $080f			adc 	gxSpriteOffsetBase
.cb0e	ab0e	c8		iny				iny
.cb0f	ab0f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb11	ab11	ad 10 08	lda $0810			lda 	gxSpriteOffsetBase+1
.cb14	ab14	69 00		adc #$00			adc 	#0
.cb16	ab16	c8		iny				iny
.cb17	ab17	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb19	ab19	ad a8 08	lda $08a8			lda 	gxSizeBits 					; get raw size
.cb1c	ab1c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cb1e	ab1e	2a		rol a				rol 	a 							; x 2
.cb1f	ab1f	0a		asl a				asl 	a 							; x 4
.cb20	ab20	0a		asl a				asl 	a 							; x 8
.cb21	ab21	0a		asl a				asl 	a 							; x 16
.cb22	ab22	0d a9 08	ora $08a9			ora 	gxSpriteLUT 				; Or with LUT
.cb25	ab25	0a		asl a				asl 	a 							; 1 shift
.cb26	ab26	09 01		ora #$01			ora 	#1 							; enable sprite.
.cb28	ab28	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cb2a	ab2a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb2d	ab2d	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cb30	ab30	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cb33	ab33	29 3f		and #$3f			and 	#$3F
.cb35	ab35	9d 51 08	sta $0851,x			sta 	gxSpriteHigh,x
.cb38	ab38	ad a8 08	lda $08a8			lda 	gxSizeBits 					; get bit size
.cb3b	ab3b	6a		ror a				ror 	a 							; shift into bits 6/7
.cb3c	ab3c	6a		ror a				ror 	a
.cb3d	ab3d	6a		ror a				ror 	a
.cb3e	ab3e	29 c0		and #$c0			and 	#$C0
.cb40	ab40	1d 51 08	ora $0851,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cb43	ab43	9d 51 08	sta $0851,x			sta 	gxSpriteHigh,x
.cb46	ab46	bd 11 08	lda $0811,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cb49	ab49	29 7f		and #$7f			and 	#$7F
.cb4b	ab4b	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.cb4e	ab4e	18		clc				clc
.cb4f	ab4f	60		rts				rts
.cb50	ab50					_GXSICloseFail:
.cb50	ab50	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb53	ab53					_GXSIFail:
.cb53	ab53	38		sec				sec
.cb54	ab54	60		rts				rts
.cb55	ab55					_GXSIHide:
.cb55	ab55	ad 0d 08	lda $080d			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cb58	ab58	85 36		sta $36				sta 	gxzTemp0
.cb5a	ab5a	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1
.cb5d	ab5d	85 37		sta $37				sta 	gxzTemp0+1
.cb5f	ab5f	a9 00		lda #$00			lda 	#0
.cb61	ab61	92 36		sta ($36)			sta 	(gxzTemp0)
.cb63	ab63	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb66	ab66	bd 11 08	lda $0811,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb69	ab69	09 80		ora #$80			ora 	#$80
.cb6b	ab6b	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.cb6e	ab6e	18		clc				clc
.cb6f	ab6f	60		rts				rts
.cb70	ab70					GXMoveSprite:
.cb70	ab70	ad fc 07	lda $07fc			lda 	gxSpritesOn
.cb73	ab73	f0 65		beq $abda			beq 	_GXSIFail
.cb75	ab75	ad 0e 08	lda $080e			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb78	ab78	f0 60		beq $abda			beq 	_GXSIFail
.cb7a	ab7a	85 37		sta $37				sta 	gxzTemp0+1
.cb7c	ab7c	a0 04		ldy #$04			ldy 	#4
.cb7e	ab7e	ad 0d 08	lda $080d			lda 	GSCurrentSpriteAddr
.cb81	ab81	85 36		sta $36				sta 	gxzTemp0
.cb83	ab83	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb86	ab86	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x
.cb89	ab89	2a		rol a				rol 	a	 						; into bits 0,1.
.cb8a	ab8a	2a		rol a				rol 	a
.cb8b	ab8b	2a		rol a				rol 	a
.cb8c	ab8c	29 03		and #$03			and 	#3
.cb8e	ab8e	aa		tax				tax
.cb8f	ab8f	bd dc ab	lda $abdc,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb92	ab92	48		pha				pha
.cb93	ab93	18		clc				clc
.cb94	ab94	6d f4 07	adc $07f4			adc 	gxX0						; copy position.
.cb97	ab97	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb99	ab99	c8		iny				iny
.cb9a	ab9a	ad f5 07	lda $07f5			lda 	gxX0+1
.cb9d	ab9d	69 00		adc #$00			adc 	#0
.cb9f	ab9f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba1	aba1	c8		iny				iny
.cba2	aba2	68		pla				pla
.cba3	aba3	18		clc				clc
.cba4	aba4	6d f6 07	adc $07f6			adc 	gxY0
.cba7	aba7	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba9	aba9	a9 00		lda #$00			lda 	#0
.cbab	abab	69 00		adc #$00			adc 	#0
.cbad	abad	c8		iny				iny
.cbae	abae	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cbb0	abb0	4e f5 07	lsr $07f5			lsr 	gxX0+1 						; divide X by 4
.cbb3	abb3	6e f4 07	ror $07f4			ror 	gxX0
.cbb6	abb6	4e f4 07	lsr $07f4			lsr 	gxX0
.cbb9	abb9	4e f6 07	lsr $07f6			lsr 	gxY0 						; divide Y by 4
.cbbc	abbc	4e f6 07	lsr $07f6			lsr 	gxY0
.cbbf	abbf	ae 0c 08	ldx $080c			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cbc2	abc2	bd 11 08	lda $0811,x			lda 	gxSpriteLow,x
.cbc5	abc5	29 80		and #$80			and 	#$80
.cbc7	abc7	0d f4 07	ora $07f4			ora 	gxX0
.cbca	abca	9d 11 08	sta $0811,x			sta 	gxSpriteLow,x
.cbcd	abcd	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x
.cbd0	abd0	29 c0		and #$c0			and 	#$C0
.cbd2	abd2	0d f6 07	ora $07f6			ora 	gxY0
.cbd5	abd5	9d 51 08	sta $0851,x			sta 	gxSpriteHigh,x
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					_GXSIFail:
.cbda	abda	38		sec				sec
.cbdb	abdb	60		rts				rts
.cbdc	abdc					_GXMSOffset:
>cbdc	abdc	1c						.byte 	32-8/2
>cbdd	abdd	18						.byte 	32-16/2
>cbde	abde	14						.byte 	32-24/2
>cbdf	abdf	10						.byte 	32-32/2
.cbe0	abe0					GXSelectTile:
.cbe0	abe0	ad fe 07	lda $07fe			lda 	gxTilesOn 					; check tilemap in use
.cbe3	abe3	f0 4b		beq $ac30			beq 	_GXSFail
.cbe5	abe5	a5 36		lda $36				lda 	gxzTemp0 					; check X and Y in range
.cbe7	abe7	cd 03 08	cmp $0803			cmp 	gxTileMapWidth
.cbea	abea	b0 44		bcs $ac30			bcs 	_GXSFail
.cbec	abec	a5 37		lda $37				lda 	gxzTemp0+1
.cbee	abee	cd 04 08	cmp $0804			cmp 	gxTileMapHeight
.cbf1	abf1	b0 3d		bcs $ac30			bcs 	_GXSFail
.cbf3	abf3	ad 02 08	lda $0802			lda 	gxTileMapPage 				; page to access = tile access page.
.cbf6	abf6	8d 91 08	sta $0891			sta 	gxTileAccessPage
.cbf9	abf9	ae 03 08	ldx $0803			ldx 	gxTileMapWidth 				; YX is the additive, e.g. shifted left. gxzTemp0+1 is shifted right.
.cbfc	abfc	a0 00		ldy #$00			ldy 	#0
.cbfe	abfe	a5 36		lda $36				lda 	gxzTemp0 					; initial result is X
.cc00	ac00	8d 92 08	sta $0892			sta 	gxTileAccessAddress
.cc03	ac03	9c 93 08	stz $0893			stz  	gxTileAccessAddress+1
.cc06	ac06					_GXSTMultiply:
.cc06	ac06	46 37		lsr $37				lsr 	gxzTemp0+1 					; shift Y right
.cc08	ac08	90 0f		bcc $ac19			bcc 	_GXSTNoAdd 					; add if CS
.cc0a	ac0a	18		clc				clc 								; add YX to result
.cc0b	ac0b	8a		txa				txa
.cc0c	ac0c	6d 92 08	adc $0892			adc 	gxTileAccessAddress
.cc0f	ac0f	8d 92 08	sta $0892			sta 	gxTileAccessAddress
.cc12	ac12	98		tya				tya
.cc13	ac13	6d 93 08	adc $0893			adc 	gxTileAccessAddress+1
.cc16	ac16	8d 93 08	sta $0893			sta 	gxTileAccessAddress+1
.cc19	ac19					_GXSTNoAdd:
.cc19	ac19	8a		txa				txa 								; shift YX left
.cc1a	ac1a	0a		asl a				asl 	a
.cc1b	ac1b	aa		tax				tax
.cc1c	ac1c	98		tya				tya
.cc1d	ac1d	2a		rol a				rol 	a
.cc1e	ac1e	a8		tay				tay
.cc1f	ac1f	a5 37		lda $37				lda 	gxzTemp0+1 					; multiply complete
.cc21	ac21	d0 e3		bne $ac06			bne 	_GXSTMultiply
.cc23	ac23	0e 92 08	asl $0892			asl 	gxTileAccessAddress 		; double it, as it is a word array.
.cc26	ac26	2e 93 08	rol $0893			rol 	gxTileAccessAddress+1
.cc29	ac29					_GXSTFixAddressLoop:
.cc29	ac29	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress
.cc2c	ac2c	b0 fb		bcs $ac29			bcs 	_GXSTFixAddressLoop
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXSFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXSTFixAddress:
.cc32	ac32	48		pha				pha
.cc33	ac33	ad 93 08	lda $0893			lda 	gxTileAccessAddress+1 		; in legal page range e.g. $0000-$1FFF
.cc36	ac36	c9 20		cmp #$20			cmp 	#$20
.cc38	ac38	90 06		bcc $ac40			bcc 	_GXSTFAExit
.cc3a	ac3a	e9 20		sbc #$20			sbc 	#$20 						; adjust address
.cc3c	ac3c	ee 91 08	inc $0891			inc 	gxTileAccessPage 			; adjust page up.
.cc3f	ac3f	38		sec				sec
.cc40	ac40					_GXSTFAExit:
.cc40	ac40	68		pla				pla
.cc41	ac41	60		rts				rts
.cc42	ac42					GXSTWriteTile:
.cc42	ac42	38		sec				sec 								; CS = update flag
.cc43	ac43	80 01		bra $ac46			bra 	GXSTTileAccess
.cc45	ac45					GXSTReadTile:
.cc45	ac45	18		clc				clc
.cc46	ac46					GXSTTileAccess:
.cc46	ac46	a5 0b		lda $0b				lda 	GXEditSlot 					; save oroginal page
.cc48	ac48	48		pha				pha
.cc49	ac49	08		php				php 								; save update flag
.cc4a	ac4a	ad 91 08	lda $0891			lda 	gxTileAccessPage 			; access the tile page.
.cc4d	ac4d	85 0b		sta $0b				sta 	GXEditSlot
.cc4f	ac4f	a6 36		ldx $36				ldx 	gxzTemp0 					; X = New value
.cc51	ac51	ad 92 08	lda $0892			lda 	gxTileAccessAddress 		; set gxzTemp0 to point there
.cc54	ac54	85 36		sta $36				sta 	gxzTemp0
.cc56	ac56	ad 93 08	lda $0893			lda 	gxTileAccessAddress+1
.cc59	ac59	09 60		ora #$60			ora 	#(GXMappingAddress >> 8)
.cc5b	ac5b	85 37		sta $37				sta 	gxzTemp0+1
.cc5d	ac5d	28		plp				plp 								; get flag
.cc5e	ac5e	90 09		bcc $ac69			bcc 	_GXSNoUpdate 				; updating the tile map ?
.cc60	ac60	8a		txa				txa 								; new value
.cc61	ac61	92 36		sta ($36)			sta 	(gxzTemp0) 					; write it out, as a word.
.cc63	ac63	a0 01		ldy #$01			ldy 	#1
.cc65	ac65	a9 00		lda #$00			lda 	#0
.cc67	ac67	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cc69	ac69					_GXSNoUpdate:
.cc69	ac69	b2 36		lda ($36)			lda 	(gxzTemp0) 					; read the value
.cc6b	ac6b	fa		plx				plx 								; restore old page
.cc6c	ac6c	86 0b		stx $0b				stx 	GXEditSlot
.cc6e	ac6e	ee 92 08	inc $0892			inc 	gxTileAccessAddress 		; advance tile ptr by 2 - will always be even.
.cc71	ac71	ee 92 08	inc $0892			inc 	gxTileAccessAddress
.cc74	ac74	d0 03		bne $ac79			bne 	_GXSNoCarry
.cc76	ac76	ee 93 08	inc $0893			inc 	gxTileAccessAddress+1
.cc79	ac79					_GXSNoCarry:
.cc79	ac79	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress 				; fix address if required.
.cc7c	ac7c	18		clc				clc 								; return with ok flag.
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					GXOpenBitmap:
.cc7e	ac7e	78		sei				sei 								; no interrupts here
.cc7f	ac7f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cc81	ac81	8d 0a 08	sta $080a			sta 	gxOriginalLUTValue
.cc84	ac84	58		cli				cli
.cc85	ac85	60		rts				rts
.cc86	ac86					GXCloseBitmap:
.cc86	ac86	78		sei				sei
.cc87	ac87	ad 0a 08	lda $080a			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cc8a	ac8a	85 0b		sta $0b				sta 	GXEditSlot
.cc8c	ac8c	58		cli				cli
.cc8d	ac8d	60		rts				rts
.cc8e	ac8e					gxPositionCalc:
.cc8e	ac8e	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.cc90	ac90	48		pha				pha
.cc91	ac91	ad f6 07	lda $07f6			lda 	gxY0 							; gxzScreen = Y0
.cc94	ac94	85 3c		sta $3c				sta 	gxzScreen
.cc96	ac96	64 3d		stz $3d				stz 	gxzScreen+1
.cc98	ac98	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cc9a	ac9a	26 3d		rol $3d				rol 	gxzScreen+1
.cc9c	ac9c	06 3c		asl $3c				asl 	gxzScreen
.cc9e	ac9e	26 3d		rol $3d				rol 	gxzScreen+1
.cca0	aca0	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cca1	aca1	65 3c		adc $3c				adc 	gxzScreen
.cca3	aca3	85 3c		sta $3c				sta 	gxzScreen
.cca5	aca5	90 02		bcc $aca9			bcc 	_GXPCNoCarry
.cca7	aca7	e6 3d		inc $3d				inc 	gxzScreen+1
.cca9	aca9					_GXPCNoCarry:
.cca9	aca9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.ccab	acab	26 3d		rol $3d				rol 	gxzScreen+1
.ccad	acad	a5 3d		lda $3d				lda	 	gxzScreen+1
.ccaf	acaf	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.ccb1	acb1	64 3d		stz $3d				stz 	gxzScreen+1
.ccb3	acb3	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.ccb5	acb5					_GXPCMultiply32:
.ccb5	acb5	06 3c		asl $3c				asl 	gxzScreen
.ccb7	acb7	26 3d		rol $3d				rol 	gxzScreen+1
.ccb9	acb9	3a		dec a				dec 	a
.ccba	acba	d0 f9		bne $acb5			bne 	_GXPCMultiply32
.ccbc	acbc	18		clc				clc
.ccbd	acbd	ad f4 07	lda $07f4			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.ccc0	acc0	65 3c		adc $3c				adc 	gxzScreen
.ccc2	acc2	8d 0b 08	sta $080b			sta 	gxOffset
.ccc5	acc5	ad f5 07	lda $07f5			lda 	gxX0+1
.ccc8	acc8	65 3d		adc $3d				adc 	gxzScreen+1
.ccca	acca	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cccc	accc	90 04		bcc $acd2			bcc 	_GXPCNoOverflow
.ccce	acce	29 1f		and #$1f			and 	#$1F 						; fix it up
.ccd0	acd0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.ccd2	acd2					_GXPCNoOverflow:
.ccd2	acd2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.ccd4	acd4	85 3d		sta $3d				sta 	gxzScreen+1
.ccd6	acd6	64 3c		stz $3c				stz 	gxzScreen
.ccd8	acd8	18		clc				clc
.ccd9	acd9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.ccdb	acdb	6d ff 07	adc $07ff			adc 	gxBasePage 					; by adding the base page
.ccde	acde	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cce0	ace0	68		pla				pla
.cce1	ace1	85 36		sta $36				sta 	gxzTemp0
.cce3	ace3	60		rts				rts
.cce4	ace4					GXMovePositionDown:
.cce4	ace4	18		clc				clc 								; add 320 to offset/temp+1
.cce5	ace5	ad 0b 08	lda $080b			lda 	gxOffset
.cce8	ace8	69 40		adc #$40			adc 	#64
.ccea	acea	8d 0b 08	sta $080b			sta 	gxOffset
.cced	aced	a5 3d		lda $3d				lda 	gxzScreen+1
.ccef	acef	69 01		adc #$01			adc 	#1
.ccf1	acf1	85 3d		sta $3d				sta 	gxzScreen+1
.ccf3	acf3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ccf5	acf5	90 07		bcc $acfe			bcc 	_GXMPDExit
.ccf7	acf7	38		sec				sec  								; next page, adjust address
.ccf8	acf8	e9 20		sbc #$20			sbc 	#$20
.ccfa	acfa	85 3d		sta $3d				sta 	gxzScreen+1
.ccfc	acfc	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.ccfe	acfe					_GXMPDExit:
.ccfe	acfe	60		rts				rts
.ccff	acff					GXCollide:
.ccff	acff	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cd01	ad01	aa		tax				tax
.cd02	ad02	05 37		ora $37				ora 	gxzTemp0+1
.cd04	ad04	29 c0		and #$c0			and 	#$C0
.cd06	ad06	38		sec				sec
.cd07	ad07	d0 53		bne $ad5c			bne 	_GXCollideFail 				; if either >= 64, fail.
.cd09	ad09	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cd0b	ad0b	b9 11 08	lda $0811,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cd0e	ad0e	1d 11 08	ora $0811,x			ora 	gxSpriteLow,x
.cd11	ad11	30 48		bmi $ad5b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cd13	ad13	18		clc				clc 								; need to calculate sum of sizes.
.cd14	ad14	b9 51 08	lda $0851,y			lda 	gxSpriteHigh,y
.cd17	ad17	7d 51 08	adc $0851,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cd1a	ad1a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cd1c	ad1c	6a		ror a				ror 	a 							; 5/6/7
.cd1d	ad1d	4a		lsr a				lsr 	a 							; 4/5/6
.cd1e	ad1e	4a		lsr a				lsr 	a 							; 3/4/5
.cd1f	ad1f	4a		lsr a				lsr 	a 							; 2/3/4
.cd20	ad20	18		clc				clc
.cd21	ad21	69 08		adc #$08			adc 	#$08
.cd23	ad23	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cd24	ad24	4a		lsr a				lsr 	a
.cd25	ad25	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cd27	ad27	b9 51 08	lda $0851,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cd2a	ad2a	29 3f		and #$3f			and 	#$3F
.cd2c	ad2c	85 39		sta $39				sta 	gxzTemp1+1
.cd2e	ad2e	38		sec				sec
.cd2f	ad2f	bd 51 08	lda $0851,x			lda 	gxSpriteHigh,x
.cd32	ad32	29 3f		and #$3f			and 	#$3F
.cd34	ad34	e5 39		sbc $39				sbc 	gxzTemp1+1
.cd36	ad36	b0 03		bcs $ad3b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cd38	ad38	49 ff		eor #$ff			eor 	#$FF
.cd3a	ad3a	1a		inc a				inc 	a
.cd3b	ad3b					_GXCAbs1:
.cd3b	ad3b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd3d	ad3d	b0 1c		bcs $ad5b			bcs 	_GXOkayFail
.cd3f	ad3f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cd41	ad41	38		sec				sec 								; calculate |x1-x0|
.cd42	ad42	b9 11 08	lda $0811,y			lda 	gxSpriteLow,y
.cd45	ad45	fd 11 08	sbc $0811,x			sbc 	gxSpriteLow,x
.cd48	ad48	b0 03		bcs $ad4d			bcs 	_GXCAbs2
.cd4a	ad4a	49 ff		eor #$ff			eor 	#$FF
.cd4c	ad4c	1a		inc a				inc 	a
.cd4d	ad4d					_GXCAbs2:
.cd4d	ad4d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd4f	ad4f	b0 0a		bcs $ad5b			bcs 	_GXOkayFail
.cd51	ad51	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cd53	ad53	90 02		bcc $ad57			bcc 	_GXCHaveLowest
.cd55	ad55	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cd57	ad57					_GXCHaveLowest:
.cd57	ad57	0a		asl a				asl 	a 							; scale to allow for >> 2
.cd58	ad58	0a		asl a				asl 	a
.cd59	ad59	18		clc				clc
.cd5a	ad5a	60		rts				rts
.cd5b	ad5b					_GXOkayFail:
.cd5b	ad5b	18		clc				clc
.cd5c	ad5c					_GXCollideFail:
.cd5c	ad5c	a9 ff		lda #$ff			lda 	#$FF
.cd5e	ad5e	60		rts				rts
.cd5f	ad5f					GXFindSprite:
.cd5f	ad5f	aa		tax				tax  								; sprite index in X
.cd60	ad60	9c aa 08	stz $08aa			stz 	gxSpriteOffset 				; sprite offset is the offset in the sprite list.
.cd63	ad63	9c ab 08	stz $08ab			stz 	gxSpriteOffset+1
.cd66	ad66	64 38		stz $38				stz 	gxzTemp1 					; zTemp1 is the address in memory, given the current selected page.
.cd68	ad68	a9 60		lda #$60			lda 	#GXMappingAddress >> 8
.cd6a	ad6a	85 39		sta $39				sta 	gxzTemp1+1
.cd6c	ad6c	ad 00 08	lda $0800			lda 	gxSpritePage 				; and point to the sprite page.
.cd6f	ad6f	85 0b		sta $0b				sta 	GXEditSlot
.cd71	ad71	b2 38		lda ($38)			lda 	(gxzTemp1) 					; get the first sprite record header, identifying the format.
.cd73	ad73	c9 11		cmp #$11			cmp 	#$11						; should be $11
.cd75	ad75	d0 6c		bne $ade3			bne 	_GXFSFail 					; if not, fail
.cd77	ad77	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; increment pointers.
.cd7a	ad7a					_GXFindLoop:
.cd7a	ad7a	b2 38		lda ($38)			lda 	(gxzTemp1) 					; reached the end, if so then failed.
.cd7c	ad7c	c9 80		cmp #$80			cmp 	#$80
.cd7e	ad7e	f0 63		beq $ade3			beq 	_GXFSFail
.cd80	ad80	e0 00		cpx #$00			cpx 	#0 							; if zero, then found.
.cd82	ad82	f0 2c		beq $adb0			beq 	_GXFSFound
.cd84	ad84	ca		dex				dex 								; decrement count.
.cd85	ad85	0a		asl a				asl 	a 							; index into table
.cd86	ad86	a8		tay				tay 								; so we can look it up.
.cd87	ad87	18		clc				clc 								; add LSB
.cd88	ad88	ad aa 08	lda $08aa			lda 	gxSpriteOffset
.cd8b	ad8b	79 e5 ad	adc $ade5,y			adc 	_GXFSSizeTable,y
.cd8e	ad8e	8d aa 08	sta $08aa			sta 	gxSpriteOffset 				; these two should move in lock step.
.cd91	ad91	85 38		sta $38				sta 	gxzTemp1
.cd93	ad93	90 05		bcc $ad9a			bcc 	_GXNextNoCarry 				; adjust for carry as we add the MSB seperately.
.cd95	ad95	ee ab 08	inc $08ab			inc 	gxSpriteOffset+1
.cd98	ad98	e6 39		inc $39				inc 	gxzTemp1+1
.cd9a	ad9a					_GXNextNoCarry:
.cd9a	ad9a	18		clc				clc
.cd9b	ad9b	a5 39		lda $39				lda 	gxzTemp1+1 					; add MSB
.cd9d	ad9d	79 e6 ad	adc $ade6,y			adc 	_GXFSSizeTable+1,y
.cda0	ada0	85 39		sta $39				sta 	gxzTemp1+1
.cda2	ada2	ad ab 08	lda $08ab			lda 	gxSpriteOffset+1
.cda5	ada5	79 e6 ad	adc $ade6,y			adc 	_GXFSSizeTable+1,y
.cda8	ada8	8d ab 08	sta $08ab			sta 	gxSpriteOffset+1
.cdab	adab	20 d5 ad	jsr $add5			jsr 	_GXFSNormalise 				; and normalise the page address.
.cdae	adae	80 ca		bra $ad7a			bra 	_GXFindLoop 				; and go round again.
.cdb0	adb0					_GXFSFound:
.cdb0	adb0	b2 38		lda ($38)			lda 	(gxzTemp1)					; get the bit size (e.g. 0-3)
.cdb2	adb2	8d a8 08	sta $08a8			sta 	gxSizeBits
.cdb5	adb5	1a		inc a				inc 	a 							; 1,2,3,4 - calculating pixel size
.cdb6	adb6	0a		asl a				asl 	a 							; 2,4,6,8
.cdb7	adb7	0a		asl a				asl 	a 							; 4,8,12,16
.cdb8	adb8	0a		asl a				asl 	a 							; 8,16,24,32
.cdb9	adb9	8d a7 08	sta $08a7			sta 	gxSizePixels
.cdbc	adbc	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; and to the LUT
.cdbf	adbf	b2 38		lda ($38)			lda 	(gxzTemp1) 					; copy that out.
.cdc1	adc1	8d a9 08	sta $08a9			sta 	gxSpriteLUT
.cdc4	adc4	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; and it now points to the first graphic data byte
.cdc7	adc7	18		clc				clc
.cdc8	adc8	60		rts				rts
.cdc9	adc9					_GXFSIncrement:
.cdc9	adc9	ee aa 08	inc $08aa			inc 	gxSpriteOffset 				; these two should move in sync
.cdcc	adcc	e6 38		inc $38				inc 	gxzTemp1
.cdce	adce	d0 05		bne $add5			bne 	_GXFSNormalise
.cdd0	add0	ee ab 08	inc $08ab			inc 	gxSpriteOffset+1
.cdd3	add3	e6 39		inc $39				inc 	gxzTemp1+1
.cdd5	add5					_GXFSNormalise:
.cdd5	add5	a5 39		lda $39				lda 	gxzTemp1+1 					; are we out of range.
.cdd7	add7	c9 80		cmp #$80			cmp 	#(GXMappingAddress >> 8)+$20
.cdd9	add9	90 07		bcc $ade2			bcc 	_GXFSOkay
.cddb	addb	e6 0b		inc $0b				inc 	GXEditSlot 					; next 8k page
.cddd	addd	38		sec				sec 								; adjust page address back
.cdde	adde	e9 20		sbc #$20			sbc 	#$20
.cde0	ade0	85 39		sta $39				sta 	gxzTemp1+1
.cde2	ade2					_GXFSOkay:
.cde2	ade2	60		rts				rts
.cde3	ade3					_GXFSFail:
.cde3	ade3	38		sec				sec
.cde4	ade4	60		rts				rts
.cde5	ade5					_GXFSSizeTable:
>cde5	ade5	42 00 02 01 42 02 02 04				.word 	8*8+2,16*16+2,24*24+2,32*32+2
.08a7						gxSizePixels:
>08a7								.fill 	1
.08a8						gxSizeBits:
>08a8								.fill 	1
.08a9						gxSpriteLUT:
>08a9								.fill 	1
.08aa						gxSpriteOffset:
>08aa								.fill 	2
.cded	aded					GXSortXY:
.cded	aded	20 0b ae	jsr $ae0b			jsr 	GXSortY 					; will be sorted on Y now
.cdf0	adf0	ad f4 07	lda $07f4			lda 	gxX0 						; compare X0 v X1
.cdf3	adf3	cd f8 07	cmp $07f8			cmp 	gxX1
.cdf6	adf6	ad f5 07	lda $07f5			lda 	gxX0+1
.cdf9	adf9	ed f9 07	sbc $07f9			sbc 	gxX1+1
.cdfc	adfc	90 0c		bcc $ae0a			bcc 	_GXSXYExit 					; X0 < X1 exit
.cdfe	adfe	a2 00		ldx #$00			ldx 	#0 							; swap them over
.ce00	ae00	a0 04		ldy #$04			ldy 	#4
.ce02	ae02	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce05	ae05	e8		inx				inx
.ce06	ae06	c8		iny				iny
.ce07	ae07	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce0a	ae0a					_GXSXYExit:
.ce0a	ae0a	60		rts				rts
.ce0b	ae0b					GXSortY:
.ce0b	ae0b	ad f6 07	lda $07f6			lda 	gxY0 						; if Y0 >= Y1
.ce0e	ae0e	cd fa 07	cmp $07fa			cmp 	gxY1
.ce11	ae11	90 0b		bcc $ae1e			bcc 	_GXSYSorted
.ce13	ae13	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.ce15	ae15	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.ce17	ae17					_GXSwap1:
.ce17	ae17	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce1a	ae1a	88		dey				dey
.ce1b	ae1b	ca		dex				dex
.ce1c	ae1c	10 f9		bpl $ae17			bpl 	_GXSwap1
.ce1e	ae1e					_GXSYSorted:
.ce1e	ae1e	60		rts				rts
.ce1f	ae1f					GXSwapXY:
.ce1f	ae1f	bd f4 07	lda $07f4,x			lda 	gxX0,x
.ce22	ae22	48		pha				pha
.ce23	ae23	b9 f4 07	lda $07f4,y			lda 	gxX0,y
.ce26	ae26	9d f4 07	sta $07f4,x			sta 	gxX0,x
.ce29	ae29	68		pla				pla
.ce2a	ae2a	99 f4 07	sta $07f4,y			sta 	gxX0,y
.ce2d	ae2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.ce2e	ae2e					KeywordSet0:
>ce2e	ae2e	00 65					.text	0,$65,""               ; $80 !0:EOF
>ce30	ae30	00 58					.text	0,$58,""               ; $81 !1:SH1
>ce32	ae32	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ce34	ae34	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>ce3a	ae3a	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>ce42	ae42	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>ce48	ae48	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>ce4f	ae4f	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>ce57	ae57	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>ce5e	ae5e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>ce65	ae65	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>ce6c	ae6c	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>ce72	ae72	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>ce7a	ae7a	45 24 28
>ce7d	ae7d	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>ce85	ae85	45 24 28
>ce88	ae88	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>ce8e	ae8e	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>ce96	ae96	28
>ce97	ae97	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ce9f	ae9f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>cea5	aea5	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>cead	aead	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ceb5	aeb5	55 4e 54 28
>ceb9	aeb9	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>cec1	aec1	54 24 28
>cec4	aec4	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>cecb	aecb	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>ced2	aed2	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>ced9	aed9	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>cee1	aee1	4e 28
>cee3	aee3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>ceeb	aeeb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cef1	aef1	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cef7	aef7	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cefe	aefe	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cf04	af04	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cf0a	af0a	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cf11	af11	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cf19	af19	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cf21	af21	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cf29	af29	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cf31	af31	47 28
>cf33	af33	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cf3b	af3b	28
>cf3c	af3c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cf44	af44	28
>cf45	af45	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cf4b	af4b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cf51	af51	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cf57	af57	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cf5e	af5e	05 56 54 49 4c 45 28			.text	5,$56,"TILE("          ; $aa TILE(
>cf65	af65	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $ab TIMER(
>cf6d	af6d	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ac TRUE
>cf73	af73	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ad VAL(
>cf79	af79	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ae FOR
>cf7e	af7e	02 8f 49 46				.text	2,$8f,"IF"             ; $af IF
>cf82	af82	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $b0 PROC
>cf88	af88	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b1 REPEAT
>cf90	af90	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b2 WHILE
>cf97	af97	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b3 ENDIF
>cf9e	af9e	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b4 ENDPROC
>cfa6	afa6	43
>cfa7	afa7	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b5 NEXT
>cfad	afad	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b6 THEN
>cfb3	afb3	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b7 UNTIL
>cfba	afba	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b8 WEND
>cfc0	afc0	02 95 41 54				.text	2,$95,"AT"             ; $b9 AT
>cfc4	afc4	02 9b 42 59				.text	2,$9b,"BY"             ; $ba BY
>cfc8	afc8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $bb CALL
>cfce	afce	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bc CIRCLE
>cfd6	afd6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bd CLEAR
>cfdd	afdd	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $be COLOR
>cfe4	afe4	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bf COLOUR
>cfec	afec	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $c0 DATA
>cff2	aff2	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c1 DIM
>cff7	aff7	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c2 DOWNTO
>cfff	afff	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c3 ELSE
>d005	b005	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c4 FROM
>d00b	b00b	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c5 GFX
>d010	b010	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c6 HERE
>d016	b016	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c7 IMAGE
>d01d	b01d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c8 LET
>d022	b022	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c9 LINE
>d028	b028	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ca LOCAL
>d02f	b02f	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $cb MEMCOPY
>d037	b037	59
>d038	b038	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cc OFF
>d03d	b03d	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cd ON
>d041	b041	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ce OUTLINE
>d049	b049	45
>d04a	b04a	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cf PALETTE
>d052	b052	45
>d053	b053	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $d0 PLOT
>d059	b059	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d1 POKE
>d05f	b05f	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d2 POKED
>d066	b066	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d3 POKEL
>d06d	b06d	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d4 POKEW
>d074	b074	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d5 READ
>d07a	b07a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d6 RECT
>d080	b080	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d7 REM
>d085	b085	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d8 SOLID
>d08c	b08c	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d9 SOUND
>d093	b093	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $da SPRITE
>d09b	b09b	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $db TEXT
>d0a1	b0a1	02 a3 54 4f				.text	2,$a3,"TO"             ; $dc TO
>d0a5	b0a5	ff					.text	$FF
.d0a6	b0a6					KeywordSet1:
>d0a6	b0a6	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0a8	b0a8	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0aa	b0aa	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0ac	b0ac	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d0b4	b0b4	4c 45
>d0b6	b0b6	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d0be	b0be	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d0c6	b0c6	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d0cd	b0cd	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d0d4	b0d4	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d0d9	b0d9	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d0e1	b0e1	06 de 43 55 52 53 4f 52			.text	6,$de,"CURSOR"         ; $8a CURSOR
>d0e9	b0e9	03 df 44 49 52				.text	3,$df,"DIR"            ; $8b DIR
>d0ee	b0ee	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d0f5	b0f5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d0fa	b0fa	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d102	b102	45
>d103	b103	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d107	b107	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d10e	b10e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d114	b114	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d11b	b11b	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d122	b122	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d128	b128	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d12e	b12e	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>d136	b136	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>d13d	b13d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>d142	b142	06 d9 4f 50 54 49 4f 4e			.text	6,$d9,"OPTION"         ; $99 OPTION
>d14a	b14a	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $9a PING
>d150	b150	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9b PRINT
>d157	b157	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9c RESTORE
>d15f	b15f	45
>d160	b160	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9d RETURN
>d168	b168	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9e RUN
>d16d	b16d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9f SAVE
>d173	b173	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $a0 SETDATE
>d17b	b17b	45
>d17c	b17c	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a1 SETTIME
>d184	b184	45
>d185	b185	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a2 SHOOT
>d18c	b18c	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a3 SPRITES
>d194	b194	53
>d195	b195	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a4 STOP
>d19b	b19b	04 2e 54 49 4c 45			.text	4,$2e,"TILE"           ; $a5 TILE
>d1a1	b1a1	05 81 54 49 4c 45 53			.text	5,$81,"TILES"          ; $a6 TILES
>d1a8	b1a8	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a7 TRY
>d1ad	b1ad	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a8 VERIFY
>d1b5	b1b5	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a9 XGO
>d1ba	b1ba	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $aa XLOAD
>d1c1	b1c1	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $ab ZAP
>d1c6	b1c6	ff					.text	$FF
.d1c7	b1c7					KeywordSet2:
>d1c7	b1c7	00 65					.text	0,$65,""               ; $80 !0:EOF
>d1c9	b1c9	00 58					.text	0,$58,""               ; $81 !1:SH1
>d1cb	b1cb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d1cd	b1cd	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d1d2	b1d2	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d1d7	b1d7	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d1dc	b1dc	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d1e1	b1e1	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d1e6	b1e6	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d1eb	b1eb	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d1f0	b1f0	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d1f5	b1f5	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d1fa	b1fa	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d1ff	b1ff	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d204	b204	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d209	b209	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d20e	b20e	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d213	b213	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d218	b218	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d21d	b21d	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d222	b222	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d227	b227	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d22c	b22c	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d231	b231	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d236	b236	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d23b	b23b	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d240	b240	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d245	b245	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d24a	b24a	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d24f	b24f	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d254	b254	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d259	b259	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d25e	b25e	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d263	b263	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d268	b268	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d26d	b26d	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d272	b272	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d277	b277	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d27c	b27c	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d281	b281	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d286	b286	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d28b	b28b	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d290	b290	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d295	b295	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d29a	b29a	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d29f	b29f	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d2a4	b2a4	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d2a9	b2a9	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d2ae	b2ae	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d2b3	b2b3	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d2b8	b2b8	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d2bd	b2bd	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d2c2	b2c2	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d2c7	b2c7	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d2cc	b2cc	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d2d1	b2d1	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d2d6	b2d6	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d2db	b2db	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d2e0	b2e0	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d2e5	b2e5	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d2ea	b2ea	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d2ef	b2ef	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d2f4	b2f4	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d2f9	b2f9	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d2fe	b2fe	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d303	b303	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d308	b308	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d30d	b30d	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d312	b312	ff					.text	$FF
.d313	b313					Export_TKInitialise:
.d313	b313	a2 07		ldx #$07			ldx 	#7
.d315	b315					_ETKISetDefault:
.d315	b315	bd 6a b5	lda $b56a,x			lda 	CLIDefault,x
.d318	b318	9d 00 04	sta $0400,x			sta 	CLIFComment,x
.d31b	b31b	ca		dex				dex
.d31c	b31c	10 f7		bpl $b315			bpl 	_ETKISetDefault
.d31e	b31e	60		rts				rts
.d31f	b31f					Export_TKListConvertLine:
.d31f	b31f	48		pha				pha 								; save indent on the stack
.d320	b320	9c 39 04	stz $0439			stz 	tbOffset
.d323	b323	9c 49 04	stz $0449			stz 	tokenBuffer
.d326	b326	9c 45 04	stz $0445			stz 	currentListColour
.d329	b329	ad 02 04	lda $0402			lda 	CLILineNumber
.d32c	b32c	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d32f	b32f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d331	b331	b1 30		lda ($30),y			lda 	(codePtr),y
.d333	b333	aa		tax				tax
.d334	b334	88		dey				dey
.d335	b335	b1 30		lda ($30),y			lda 	(codePtr),y
.d337	b337	20 29 b5	jsr $b529			jsr 	LCLWriteNumberXA
.d33a	b33a	68		pla				pla 								; adjustment to indent
.d33b	b33b	48		pha				pha 								; save on stack
.d33c	b33c	10 0c		bpl $b34a			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d33e	b33e	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d33f	b33f	6d 42 04	adc $0442			adc 	listIndent
.d342	b342	8d 42 04	sta $0442			sta 	listIndent
.d345	b345	10 03		bpl $b34a			bpl 	_LCNoAdjust
.d347	b347	9c 42 04	stz $0442			stz 	listIndent
.d34a	b34a					_LCNoAdjust:
.d34a	b34a	18		clc				clc		 							; work out actual indent.
.d34b	b34b	ad 42 04	lda $0442			lda 	listIndent
.d34e	b34e	0a		asl a				asl 	a
.d34f	b34f	69 07		adc #$07			adc 	#7
.d351	b351	85 36		sta $36				sta 	zTemp0
.d353	b353					_LCPadOut:
.d353	b353	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d355	b355	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d358	b358	ad 39 04	lda $0439			lda 	tbOffset
.d35b	b35b	c5 36		cmp $36				cmp 	zTemp0
.d35d	b35d	d0 f4		bne $b353			bne 	_LCPadOut
.d35f	b35f	a0 03		ldy #$03			ldy 	#3 							; start position.
.d361	b361					_LCMainLoop:
.d361	b361	ad 06 04	lda $0406			lda 	CLIPunctuation
.d364	b364	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d367	b367	b1 30		lda ($30),y			lda 	(codePtr),y
.d369	b369	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d36b	b36b	f0 17		beq $b384			beq 	_LCExit
.d36d	b36d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d36f	b36f	90 1e		bcc $b38f			bcc 	_LCDoubles
.d371	b371	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d373	b373	90 2a		bcc $b39f			bcc 	_LCShiftPunc
.d375	b375	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d377	b377	90 35		bcc $b3ae			bcc 	_LCPunctuation
.d379	b379	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d37b	b37b	90 52		bcc $b3cf			bcc 	_LCIdentifiers
.d37d	b37d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d37f	b37f	90 75		bcc $b3f6			bcc 	_LCTokens
.d381	b381	4c 57 b4	jmp $b457			jmp 	_LCData 					; 254-5 are data objects
.d384	b384					_LCExit:
.d384	b384	68		pla				pla 								; get old indent adjust
.d385	b385	30 07		bmi $b38e			bmi 	_LCExit2
.d387	b387	18		clc				clc 								; add to indent if +ve
.d388	b388	6d 42 04	adc $0442			adc 	listIndent
.d38b	b38b	8d 42 04	sta $0442			sta 	listIndent
.d38e	b38e					_LCExit2:
.d38e	b38e	60		rts				rts
.d38f	b38f					_LCDoubles:
.d38f	b38f	48		pha				pha
.d390	b390	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d391	b391	29 02		and #$02			and 	#2
.d393	b393	09 3c		ora #$3c			ora 	#60 						; make < >
.d395	b395	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d398	b398	68		pla				pla 								; restore, do lower bit
.d399	b399	29 03		and #$03			and 	#3
.d39b	b39b	09 3c		ora #$3c			ora 	#60
.d39d	b39d	80 0f		bra $b3ae			bra		_LCPunctuation 				; print, increment, loop
.d39f	b39f					_LCShiftPunc:
.d39f	b39f	aa		tax				tax 								; save in X
.d3a0	b3a0	29 07		and #$07			and 	#7 							; lower 3 bits
.d3a2	b3a2	f0 02		beq $b3a6			beq 	_LCNoAdd
.d3a4	b3a4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d3a6	b3a6					_LCNoAdd:
.d3a6	b3a6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d3a8	b3a8	90 02		bcc $b3ac			bcc 	_LCNoAdd2
.d3aa	b3aa	09 20		ora #$20			ora 	#32 						; adds $20
.d3ac	b3ac					_LCNoAdd2:
.d3ac	b3ac	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d3ae	b3ae					_LCPunctuation:
.d3ae	b3ae	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d3b0	b3b0	d0 03		bne $b3b5			bne 	_LCPContinue
.d3b2	b3b2	20 d7 b4	jsr $b4d7			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d3b5	b3b5					_LCPContinue:
.d3b5	b3b5	c9 2e		cmp #$2e			cmp 	#'.'
.d3b7	b3b7	f0 08		beq $b3c1			beq 	_LCPIsConstant
.d3b9	b3b9	c9 30		cmp #$30			cmp 	#'0'
.d3bb	b3bb	90 0c		bcc $b3c9			bcc 	_LCPNotConstant
.d3bd	b3bd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d3bf	b3bf	b0 08		bcs $b3c9			bcs 	_LCPNotConstant
.d3c1	b3c1					_LCPIsConstant:
.d3c1	b3c1	48		pha				pha
.d3c2	b3c2	ad 04 04	lda $0404			lda 	CLIConstant
.d3c5	b3c5	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d3c8	b3c8	68		pla				pla
.d3c9	b3c9					_LCPNotConstant:
.d3c9	b3c9	c8		iny				iny 								; consume character
.d3ca	b3ca	20 c1 b4	jsr $b4c1			jsr 	LCLWrite 					; write it out.
.d3cd	b3cd	80 92		bra $b361			bra 	_LCMainLoop 				; go round again.
.d3cf	b3cf					_LCIdentifiers:
.d3cf	b3cf	18		clc				clc 								; convert to physical address
.d3d0	b3d0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d3d2	b3d2	85 37		sta $37				sta 	zTemp0+1
.d3d4	b3d4	c8		iny				iny
.d3d5	b3d5	b1 30		lda ($30),y			lda 	(codePtr),y
.d3d7	b3d7	85 36		sta $36				sta 	zTemp0
.d3d9	b3d9	c8		iny				iny
.d3da	b3da	5a		phy				phy 								; save position
.d3db	b3db	ad 05 04	lda $0405			lda 	CLIIdentifier
.d3de	b3de	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d3e1	b3e1	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d3e3	b3e3					_LCOutIdentifier:
.d3e3	b3e3	c8		iny				iny
.d3e4	b3e4	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d3e6	b3e6	29 7f		and #$7f			and 	#$7F
.d3e8	b3e8	20 13 b5	jsr $b513			jsr 	LCLLowerCase
.d3eb	b3eb	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d3ee	b3ee	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d3f0	b3f0	10 f1		bpl $b3e3			bpl 	_LCOutIdentifier
.d3f2	b3f2	7a		ply				ply 								; restore position
.d3f3	b3f3	4c 61 b3	jmp $b361			jmp 	_LCMainLoop
.d3f6	b3f6					_LCTokens:
.d3f6	b3f6	aa		tax				tax 								; token in X
.d3f7	b3f7	a9 c7		lda #$c7			lda 	#((KeywordSet2) & $FF)
.d3f9	b3f9	85 36		sta $36				sta 	0+zTemp0
.d3fb	b3fb	a9 b1		lda #$b1			lda 	#((KeywordSet2) >> 8)
.d3fd	b3fd	85 37		sta $37				sta 	1+zTemp0
.d3ff	b3ff	e0 82		cpx #$82			cpx 	#$82
.d401	b401	f0 16		beq $b419			beq 	_LCUseShift
.d403	b403	a9 a6		lda #$a6			lda 	#((KeywordSet1) & $FF)
.d405	b405	85 36		sta $36				sta 	0+zTemp0
.d407	b407	a9 b0		lda #$b0			lda 	#((KeywordSet1) >> 8)
.d409	b409	85 37		sta $37				sta 	1+zTemp0
.d40b	b40b	e0 81		cpx #$81			cpx 	#$81
.d40d	b40d	f0 0a		beq $b419			beq 	_LCUseShift
.d40f	b40f	a9 2e		lda #$2e			lda 	#((KeywordSet0) & $FF)
.d411	b411	85 36		sta $36				sta 	0+zTemp0
.d413	b413	a9 ae		lda #$ae			lda 	#((KeywordSet0) >> 8)
.d415	b415	85 37		sta $37				sta 	1+zTemp0
.d417	b417	80 01		bra $b41a			bra 	_LCNoShift
.d419	b419					_LCUseShift:
.d419	b419	c8		iny				iny
.d41a	b41a					_LCNoShift:
.d41a	b41a	20 eb b4	jsr $b4eb			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d41d	b41d	b1 30		lda ($30),y			lda 	(codePtr),y
.d41f	b41f	aa		tax				tax 								; into X
.d420	b420					_LCFindText:
.d420	b420	ca		dex				dex
.d421	b421	10 0e		bpl $b431			bpl 	_LCFoundText 				; found text.
.d423	b423	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d425	b425	1a		inc a				inc 	a 							; one extra for size
.d426	b426	38		sec				sec 								; one extra for checksum
.d427	b427	65 36		adc $36				adc 	zTemp0 						; go to next token
.d429	b429	85 36		sta $36				sta 	zTemp0
.d42b	b42b	90 f3		bcc $b420			bcc 	_LCFindText
.d42d	b42d	e6 37		inc $37				inc 	zTemp0+1
.d42f	b42f	80 ef		bra $b420			bra 	_LCFindText
.d431	b431					_LCFoundText:
.d431	b431	5a		phy				phy 								; save List position
.d432	b432	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d434	b434	aa		tax				tax
.d435	b435	ad 03 04	lda $0403			lda 	CLIToken
.d438	b438	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d43b	b43b	a0 02		ldy #$02			ldy 	#2
.d43d	b43d					_LCCopyToken:
.d43d	b43d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d43f	b43f	20 13 b5	jsr $b513			jsr 	LCLLowerCase
.d442	b442	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d445	b445	c8		iny				iny
.d446	b446	ca		dex				dex
.d447	b447	d0 f4		bne $b43d			bne 	_LCCopyToken
.d449	b449	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d44b	b44b	f0 05		beq $b452			beq 	_LCNoSpace
.d44d	b44d	a9 20		lda #$20			lda 	#' '
.d44f	b44f	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d452	b452					_LCNoSpace:
.d452	b452	7a		ply				ply 								; restore position.
.d453	b453	c8		iny				iny 								; consume token
.d454	b454	4c 61 b3	jmp $b361			jmp 	_LCMainLoop 				; and go around again.
.d457	b457					_LCData:
.d457	b457	48		pha				pha 								; save type $FE/$FF
.d458	b458	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d45a	b45a	c9 fe		cmp #$fe			cmp 	#$FE
.d45c	b45c	f0 29		beq $b487			beq 	_LCHaveOpener
.d45e	b45e	a2 22		ldx #$22			ldx 	#'"'
.d460	b460	ad 07 04	lda $0407			lda 	CLIData
.d463	b463	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d466	b466	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d468	b468	d0 1d		bne $b487			bne 	_LCHaveOpener
.d46a	b46a	88		dey				dey 								; what precedes it ?
.d46b	b46b	b1 30		lda ($30),y			lda 	(codePtr),y
.d46d	b46d	c8		iny				iny
.d46e	b46e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d470	b470	d0 15		bne $b487			bne 	_LCHaveOpener
.d472	b472	a9 09		lda #$09			lda 	#9 							; tab
.d474	b474	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d477	b477	ad 01 04	lda $0401			lda 	CLIBComment
.d47a	b47a	30 0b		bmi $b487			bmi 	_LCHaveOpener
.d47c	b47c	09 90		ora #$90			ora 	#$90
.d47e	b47e	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d481	b481	ad 00 04	lda $0400			lda 	CLIFComment
.d484	b484	20 b4 b4	jsr $b4b4			jsr 	LCLWriteColour
.d487	b487					_LCHaveOpener:
.d487	b487	8a		txa				txa 								; output prefix (# or ")
.d488	b488	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d48b	b48b	c8		iny				iny 								; get count
.d48c	b48c	b1 30		lda ($30),y			lda 	(codePtr),y
.d48e	b48e	aa		tax				tax
.d48f	b48f	c8		iny				iny 								; point at first character
.d490	b490					_LCOutData:
.d490	b490	b1 30		lda ($30),y			lda 	(codePtr),y
.d492	b492	c9 00		cmp #$00			cmp 	#0
.d494	b494	f0 03		beq $b499			beq 	_LCNoPrint
.d496	b496	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d499	b499					_LCNoPrint:
.d499	b499	c8		iny				iny
.d49a	b49a	ca		dex				dex
.d49b	b49b	d0 f3		bne $b490			bne 	_LCOutData
.d49d	b49d	68		pla				pla 								; closing " required ?
.d49e	b49e	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d4a0	b4a0	d0 0f		bne $b4b1			bne 	_LCNoQuote
.d4a2	b4a2	a9 22		lda #$22			lda 	#'"'
.d4a4	b4a4	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d4a7	b4a7	ad e9 07	lda $07e9			lda 	EXTTextColour
.d4aa	b4aa	29 0f		and #$0f			and 	#$0F
.d4ac	b4ac	09 90		ora #$90			ora 	#$90
.d4ae	b4ae	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d4b1	b4b1					_LCNoQuote:
.d4b1	b4b1	4c 61 b3	jmp $b361			jmp 	_LCMainLoop
.d4b4	b4b4					LCLWriteColour:
.d4b4	b4b4	29 0f		and #$0f			and 	#$0F
.d4b6	b4b6	09 80		ora #$80			ora 	#$80
.d4b8	b4b8	cd 45 04	cmp $0445			cmp 	currentListColour 			; has the colour changed
.d4bb	b4bb	8d 45 04	sta $0445			sta 	currentListColour 			; (update it anyway)
.d4be	b4be	d0 01		bne $b4c1			bne 	LCLWrite 					; if different, output it
.d4c0	b4c0	60		rts				rts
.d4c1	b4c1					LCLWrite:
.d4c1	b4c1	da		phx				phx
.d4c2	b4c2	ae 39 04	ldx $0439			ldx 	tbOffset 					; write out make ASCIIZ
.d4c5	b4c5	9d 49 04	sta $0449,x			sta 	tokenBuffer,x
.d4c8	b4c8	9e 4a 04	stz $044a,x			stz 	tokenBuffer+1,x
.d4cb	b4cb	ee 39 04	inc $0439			inc 	tbOffset 					; bump the position
.d4ce	b4ce	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d4d0	b4d0	30 03		bmi $b4d5			bmi 	_LCLNoColour
.d4d2	b4d2	8d 43 04	sta $0443			sta 	lcLastCharacter
.d4d5	b4d5					_LCLNoColour:
.d4d5	b4d5	fa		plx				plx
.d4d6	b4d6	60		rts				rts
.d4d7	b4d7					LCLDeleteLastSpace:
.d4d7	b4d7	48		pha				pha
.d4d8	b4d8	da		phx				phx
.d4d9	b4d9	ae 39 04	ldx $0439			ldx 	tbOffset
.d4dc	b4dc	f0 0a		beq $b4e8			beq 	_LCDLSExit
.d4de	b4de	bd 48 04	lda $0448,x			lda 	tokenBuffer-1,x
.d4e1	b4e1	c9 20		cmp #$20			cmp 	#' '
.d4e3	b4e3	d0 03		bne $b4e8			bne 	_LCDLSExit
.d4e5	b4e5	ce 39 04	dec $0439			dec 	tbOffset
.d4e8	b4e8					_LCDLSExit:
.d4e8	b4e8	fa		plx				plx
.d4e9	b4e9	68		pla				pla
.d4ea	b4ea	60		rts				rts
.d4eb	b4eb					LCLCheckSpaceRequired:
.d4eb	b4eb	ad 43 04	lda $0443			lda 	lcLastCharacter 			; check last character
.d4ee	b4ee	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d4f0	b4f0	f0 1b		beq $b50d			beq 	_LCCSRSpace
.d4f2	b4f2	c9 29		cmp #$29			cmp 	#')'
.d4f4	b4f4	f0 17		beq $b50d			beq 	_LCCSRSpace
.d4f6	b4f6	c9 23		cmp #$23			cmp 	#'#'
.d4f8	b4f8	f0 13		beq $b50d			beq 	_LCCSRSpace
.d4fa	b4fa	20 13 b5	jsr $b513			jsr 	LCLLowerCase 				; saves a little effort
.d4fd	b4fd	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d4ff	b4ff	90 11		bcc $b512			bcc 	_LCCSRExit
.d501	b501	c9 3a		cmp #$3a			cmp 	#"9"+1
.d503	b503	90 08		bcc $b50d			bcc 	_LCCSRSpace
.d505	b505	c9 61		cmp #$61			cmp 	#"a"
.d507	b507	90 09		bcc $b512			bcc 	_LCCSRExit
.d509	b509	c9 7b		cmp #$7b			cmp 	#"z"+1
.d50b	b50b	b0 05		bcs $b512			bcs 	_LCCSRExit
.d50d	b50d					_LCCSRSpace:
.d50d	b50d	a9 20		lda #$20			lda 	#' '
.d50f	b50f	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d512	b512					_LCCSRExit:
.d512	b512	60		rts				rts
.d513	b513					LCLLowerCase:
.d513	b513	c9 41		cmp #$41			cmp 	#"A"
.d515	b515	90 06		bcc $b51d			bcc 	_LCLLCOut
.d517	b517	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d519	b519	b0 02		bcs $b51d			bcs 	_LCLLCOut
.d51b	b51b	69 20		adc #$20			adc 	#$20
.d51d	b51d					_LCLLCOut:
.d51d	b51d	60		rts				rts
.d51e	b51e					LCLUpperCase:
.d51e	b51e	c9 61		cmp #$61			cmp 	#"a"
.d520	b520	90 06		bcc $b528			bcc 	_LCLUCOut
.d522	b522	c9 7b		cmp #$7b			cmp 	#"z"+1
.d524	b524	b0 02		bcs $b528			bcs 	_LCLUCOut
.d526	b526	e9 1f		sbc #$1f			sbc 	#$1F
.d528	b528					_LCLUCOut:
.d528	b528	60		rts				rts
.d529	b529					LCLWriteNumberXA:
.d529	b529	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d52b	b52b					_LCLWNLoop1:
.d52b	b52b	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d52d	b52d					_LCLWNLoop2:
.d52d	b52d	48		pha				pha 								; save initial LSB
.d52e	b52e	38		sec				sec
.d52f	b52f	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d531	b531	f9 62 b5	sbc $b562,y			sbc 	_LCLWNTable,y
.d534	b534	48		pha				pha
.d535	b535	8a		txa				txa
.d536	b536	f9 63 b5	sbc $b563,y			sbc 	_LCLWNTable+1,y
.d539	b539	90 07		bcc $b542			bcc 	_LCLWNUnderflow
.d53b	b53b	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d53d	b53d	aa		tax				tax 								; update X
.d53e	b53e	68		pla				pla 								; restore A
.d53f	b53f	7a		ply				ply 								; throw original
.d540	b540	80 eb		bra $b52d			bra 	_LCLWNLoop2 				; try again.
.d542	b542					_LCLWNUnderflow:
.d542	b542	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d544	b544	d0 06		bne $b54c			bne 	_LCLWNOut
.d546	b546	ad 39 04	lda $0439			lda 	tbOffset 					; suppress leading zeroes
.d549	b549	3a		dec a				dec 	a
.d54a	b54a	f0 04		beq $b550			beq 	_LCLWNNext
.d54c	b54c					_LCLWNOut:
.d54c	b54c	98		tya				tya
.d54d	b54d	20 5c b5	jsr $b55c			jsr 	_LCLWNOutDigit
.d550	b550					_LCLWNNext:
.d550	b550	7a		ply				ply 							 	; restore original value.
.d551	b551	68		pla				pla
.d552	b552	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d554	b554	c8		iny				iny
.d555	b555	c8		iny				iny
.d556	b556	84 37		sty $37				sty 	zTemp0+1
.d558	b558	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d55a	b55a	d0 cf		bne $b52b			bne 	_LCLWNLoop1
.d55c	b55c					_LCLWNOutDigit:
.d55c	b55c	09 30		ora #$30			ora 	#'0'
.d55e	b55e	20 c1 b4	jsr $b4c1			jsr 	LCLWrite
.d561	b561	60		rts				rts
.d562	b562					_LCLWNTable:
>d562	b562	10 27						.word 	10000
>d564	b564	e8 03						.word 	1000
>d566	b566	64 00						.word 	100
>d568	b568	0a 00						.word 	10
.d56a	b56a					CLIDefault:
>d56a	b56a	05 0e 0d 06 07 0e 0c 0f				.byte	CONBrown, CONYellow, CONRed, CONOrange, CONCyan, CONYellow, CONPink, CONWhite
=1024						CLIFComment = ControlStorage + 0
=1025						CLIBComment = ControlStorage + 1
=1026						CLILineNumber = ControlStorage + 2
=1027						CLIToken = ControlStorage + 3
=1028						CLIConstant = ControlStorage + 4
=1029						CLIIdentifier = ControlStorage + 5
=1030						CLIPunctuation = ControlStorage + 6
=1031						CLIData = ControlStorage + 7
.d572	b572					TOKSearchTable:
.d572	b572	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d574	b574	85 36		sta $36				sta 	zTemp0
.d576	b576	a0 00		ldy #$00			ldy 	#0
.d578	b578	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d57a	b57a	85 38		sta $38				sta 	zTemp1
.d57c	b57c					_TSTLoop:
.d57c	b57c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d57e	b57e	30 49		bmi $b5c9			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d580	b580	f0 2e		beq $b5b0			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d582	b582	c8		iny				iny 								; get the hash
.d583	b583	b1 36		lda ($36),y			lda 	(zTemp0),y
.d585	b585	88		dey				dey
.d586	b586	cd 23 04	cmp $0423			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d589	b589	d0 25		bne $b5b0			bne 	_TSTNext
.d58b	b58b	ad 22 04	lda $0422			lda 	identTypeEnd 				; get length of identifier from end-start
.d58e	b58e	38		sec				sec
.d58f	b58f	ed 20 04	sbc $0420			sbc 	identStart
.d592	b592	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d594	b594	d0 1a		bne $b5b0			bne 	_TSTNext
.d596	b596	5a		phy				phy 								; save Y , we might fail to match.
.d597	b597	c8		iny				iny 								; point to text
.d598	b598	c8		iny				iny
.d599	b599	ae 20 04	ldx $0420			ldx 	identStart 					; offset in line buffer in X
.d59c	b59c					_TSTCompareName:
.d59c	b59c	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; compare text.
.d59f	b59f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d5a1	b5a1	d0 0c		bne $b5af			bne 	_TSTNextPullY 				; fail, pullY and do next
.d5a3	b5a3	e8		inx				inx
.d5a4	b5a4	c8		iny				iny
.d5a5	b5a5	ec 22 04	cpx $0422			cpx 	identTypeEnd 				; complete match.
.d5a8	b5a8	d0 f2		bne $b59c			bne 	_TSTCompareName
.d5aa	b5aa	7a		ply				ply 								; throw Y
.d5ab	b5ab	a5 38		lda $38				lda 	zTemp1 						; get token #
.d5ad	b5ad	38		sec				sec 								; return with CS = passed.
.d5ae	b5ae	60		rts				rts
.d5af	b5af					_TSTNextPullY:
.d5af	b5af	7a		ply				ply 								; restore current, fall through.
.d5b0	b5b0					_TSTNext:
.d5b0	b5b0	e6 38		inc $38				inc 	zTemp1 						; token counter
.d5b2	b5b2	98		tya				tya
.d5b3	b5b3	18		clc				clc
.d5b4	b5b4	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d5b6	b5b6	1a		inc a				inc 	a 							; +1
.d5b7	b5b7	1a		inc a				inc 	a 							; +2
.d5b8	b5b8	a8		tay				tay
.d5b9	b5b9	10 c1		bpl $b57c			bpl 	_TSTLoop 					; if Y < $80 loop back
.d5bb	b5bb	98		tya				tya 								; add Y to zTemp0 and reset Y
.d5bc	b5bc	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d5be	b5be	18		clc				clc  								; but have tables > 255 bytes
.d5bf	b5bf	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d5c1	b5c1	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d5c3	b5c3	90 b7		bcc $b57c			bcc 	_TSTLoop
.d5c5	b5c5	e6 37		inc $37				inc 	zTemp0+1
.d5c7	b5c7	80 b3		bra $b57c			bra 	_TSTLoop
.d5c9	b5c9					_TSTFail:
.d5c9	b5c9	18		clc				clc
.d5ca	b5ca	60		rts				rts
.d5cb	b5cb					Export_TKTokeniseLine:
.d5cb	b5cb	20 98 b7	jsr $b798			jsr 	LCLFixLineBufferCase 		; fix line case
.d5ce	b5ce	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d5d0	b5d0	8d 46 04	sta $0446			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d5d3	b5d3	9c 47 04	stz $0447			stz 	tokenLineNumber
.d5d6	b5d6	9c 48 04	stz $0448			stz 	tokenLineNumber+1
.d5d9	b5d9	a2 ff		ldx #$ff			ldx 	#$FF
.d5db	b5db					_TKFindFirst:
.d5db	b5db	e8		inx				inx
.d5dc	b5dc	bd 46 05	lda $0546,x			lda 	lineBuffer,x
.d5df	b5df	f0 62		beq $b643			beq 	_TKExit
.d5e1	b5e1	c9 20		cmp #$20			cmp 	#' '
.d5e3	b5e3	90 f6		bcc $b5db			bcc 	_TKFindFirst
.d5e5	b5e5	c9 30		cmp #$30			cmp 	#'0'
.d5e7	b5e7	90 07		bcc $b5f0			bcc 	_TKNoLineNumber
.d5e9	b5e9	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5eb	b5eb	b0 03		bcs $b5f0			bcs 	_TKNoLineNumber
.d5ed	b5ed	20 c2 b7	jsr $b7c2			jsr 	TOKExtractLineNumber
.d5f0	b5f0					_TKNoLineNumber:
.d5f0	b5f0					_TKTokeniseLoop:
.d5f0	b5f0	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d5f3	b5f3	f0 4e		beq $b643			beq 	_TKExit
.d5f5	b5f5	e8		inx				inx
.d5f6	b5f6	c9 20		cmp #$20			cmp 	#' '
.d5f8	b5f8	f0 f6		beq $b5f0			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d5fa	b5fa	ca		dex				dex 								; undo last get, A contains character, X is position.
.d5fb	b5fb	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d5fd	b5fd	f0 68		beq $b667			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d5ff	b5ff	c9 41		cmp #$41			cmp 	#'A'
.d601	b601	90 04		bcc $b607			bcc 	_TKTokenisePunctuation
.d603	b603	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d605	b605	90 60		bcc $b667			bcc 	_TKTokeniseIdentifier
.d607	b607					_TKTokenisePunctuation:
.d607	b607	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d609	b609	f0 2e		beq $b639			beq 	_TKString
.d60b	b60b	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d60d	b60d	f0 2f		beq $b63e			beq 	_TKHexConstant
.d60f	b60f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d611	b611	f0 36		beq $b649			beq 	_TKCheckDouble
.d613	b613	c9 3e		cmp #$3e			cmp 	#'>'
.d615	b615	f0 32		beq $b649			beq 	_TKCheckDouble
.d617	b617					_TKStandardPunctuation:
.d617	b617	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d61a	b61a	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d61c	b61c	90 0e		bcc $b62c			bcc 	_TKNoShift
.d61e	b61e	48		pha				pha 								; save. we are about to convert this punctuation token from
.d61f	b61f	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d621	b621	85 36		sta $36				sta 	zTemp0
.d623	b623	68		pla				pla
.d624	b624	29 20		and #$20			and 	#32 						; bit 5
.d626	b626	4a		lsr a				lsr 	a 							; shift into bit 3
.d627	b627	4a		lsr a				lsr 	a
.d628	b628	05 36		ora $36				ora 	zTemp0
.d62a	b62a	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d62c	b62c					_TKNoShift:
.d62c	b62c	20 07 b8	jsr $b807			jsr 	TOKWriteByte 				; write the punctuation character
.d62f	b62f	e8		inx				inx 								; consume the character
.d630	b630	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d632	b632	d0 bc		bne $b5f0			bne 	_TKTokeniseLoop 			; and loop round again.
.d634	b634	20 fa b6	jsr $b6fa			jsr 	TOKCheckComment 			; comment checl
.d637	b637	80 b7		bra $b5f0			bra 	_TKTokeniseLoop
.d639	b639					_TKString:
.d639	b639	20 27 b7	jsr $b727			jsr 	TOKTokenString
.d63c	b63c	80 b2		bra $b5f0			bra 	_TKTokeniseLoop
.d63e	b63e					_TKHexConstant:
.d63e	b63e	20 62 b7	jsr $b762			jsr 	TOKHexConstant
.d641	b641	80 ad		bra $b5f0			bra 	_TKTokeniseLoop
.d643	b643	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d645	b645	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d648	b648	60		rts				rts
.d649	b649					_TKCheckDouble:
.d649	b649	bd 47 05	lda $0547,x			lda 	lineBuffer+1,x 				; get next character
.d64c	b64c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d64e	b64e	90 c7		bcc $b617			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d650	b650	c9 3f		cmp #$3f			cmp 	#'>'+1
.d652	b652	b0 c3		bcs $b617			bcs 	_TKStandardPunctuation
.d654	b654	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d657	b657	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d659	b659	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d65a	b65a	7d 47 05	adc $0547,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d65d	b65d	38		sec				sec
.d65e	b65e	e9 3c		sbc #$3c			sbc 	#'<'
.d660	b660	20 07 b8	jsr $b807			jsr 	TOKWriteByte 				; this is in the range 0-7
.d663	b663	e8		inx				inx 								; consume both
.d664	b664	e8		inx				inx
.d665	b665	80 89		bra $b5f0			bra 	_TKTokeniseLoop
.d667	b667					_TKTokeniseIdentifier:
.d667	b667	8e 20 04	stx $0420			stx 	identStart 					; save start
.d66a	b66a	9c 24 04	stz $0424			stz 	identTypeByte 				; zero the type byte
.d66d	b66d					_TKCheckLoop:
.d66d	b66d	e8		inx				inx 								; look at next, we know first is identifier already.
.d66e	b66e	bd 46 05	lda $0546,x			lda  	lineBuffer,x
.d671	b671	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d673	b673	f0 f8		beq $b66d			beq 	_TKCheckLoop
.d675	b675	c9 30		cmp #$30			cmp	 	#"0"
.d677	b677	90 0c		bcc $b685			bcc 	_TKEndIdentifier
.d679	b679	c9 3a		cmp #$3a			cmp 	#"9"+1
.d67b	b67b	90 f0		bcc $b66d			bcc 	_TKCheckLoop
.d67d	b67d	c9 41		cmp #$41			cmp	 	#"A"
.d67f	b67f	90 04		bcc $b685			bcc 	_TKEndIdentifier
.d681	b681	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d683	b683	90 e8		bcc $b66d			bcc 	_TKCheckLoop
.d685	b685					_TKEndIdentifier:
.d685	b685	8e 21 04	stx $0421			stx 	identTypeStart 				; save start of type text (if any !)
.d688	b688	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d68a	b68a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d68c	b68c	f0 06		beq $b694			beq 	_TKHasTypeCharacter
.d68e	b68e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d690	b690	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d692	b692	d0 07		bne $b69b			bne 	_TKNoTypeCharacter
.d694	b694					_TKHasTypeCharacter:
.d694	b694	8c 24 04	sty $0424			sty 	identTypeByte 				; has # or $, save the type
.d697	b697	e8		inx				inx 								; consume the type character
.d698	b698	bd 46 05	lda $0546,x			lda 	lineBuffer,x
.d69b	b69b					_TKNoTypeCharacter:
.d69b	b69b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d69d	b69d	d0 09		bne $b6a8			bne 	_TKNoArray
.d69f	b69f	e8		inx				inx 								; skip the (
.d6a0	b6a0	ad 24 04	lda $0424			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d6a3	b6a3	09 04		ora #$04			ora 	#$04
.d6a5	b6a5	8d 24 04	sta $0424			sta 	identTypeByte
.d6a8	b6a8					_TKNoArray:
.d6a8	b6a8	8e 22 04	stx $0422			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d6ab	b6ab	20 83 b7	jsr $b783			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d6ae	b6ae	a0 ae		ldy #$ae			ldy 	#(KeywordSet0) >> 8
.d6b0	b6b0	a9 2e		lda #$2e			lda 	#(KeywordSet0) & $FF
.d6b2	b6b2	20 72 b5	jsr $b572			jsr 	TOKSearchTable
.d6b5	b6b5	a2 00		ldx #$00			ldx 	#0
.d6b7	b6b7	b0 1f		bcs $b6d8			bcs 	_TKFoundToken
.d6b9	b6b9	a0 b0		ldy #$b0			ldy 	#(KeywordSet1) >> 8
.d6bb	b6bb	a9 a6		lda #$a6			lda 	#(KeywordSet1) & $FF
.d6bd	b6bd	20 72 b5	jsr $b572			jsr 	TOKSearchTable
.d6c0	b6c0	a2 81		ldx #$81			ldx 	#$81
.d6c2	b6c2	b0 14		bcs $b6d8			bcs 	_TKFoundToken
.d6c4	b6c4	a0 b1		ldy #$b1			ldy 	#(KeywordSet2) >> 8
.d6c6	b6c6	a9 c7		lda #$c7			lda 	#(KeywordSet2) & $FF
.d6c8	b6c8	20 72 b5	jsr $b572			jsr 	TOKSearchTable
.d6cb	b6cb	a2 82		ldx #$82			ldx 	#$82
.d6cd	b6cd	b0 09		bcs $b6d8			bcs 	_TKFoundToken
.d6cf	b6cf	20 13 b8	jsr $b813			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d6d2	b6d2	ae 22 04	ldx $0422			ldx 	identTypeEnd 				; X points to following byte
.d6d5	b6d5	4c f0 b5	jmp $b5f0			jmp 	_TKTokeniseLoop 			; and go round again.
.d6d8	b6d8					_TKFoundToken:
.d6d8	b6d8	48		pha				pha 								; save token
.d6d9	b6d9	8a		txa				txa 								; shift in X, is there one ?
.d6da	b6da	f0 03		beq $b6df			beq 	_TKNoTShift
.d6dc	b6dc	20 07 b8	jsr $b807			jsr 	TOKWriteByte 				; if so, write it out
.d6df	b6df					_TKNoTShift:
.d6df	b6df	68		pla				pla 								; restore and write token
.d6e0	b6e0	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d6e3	b6e3	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d6e5	b6e5	d0 0d		bne $b6f4			bne 	_TKNotRem 			 		; not shifted ?
.d6e7	b6e7	c9 d7		cmp #$d7			cmp 	#KWD_REM
.d6e9	b6e9	d0 09		bne $b6f4			bne 	_TKNotRem
.d6eb	b6eb	ae 22 04	ldx $0422			ldx 	identTypeEnd 				; check if comment follows.
.d6ee	b6ee	20 fa b6	jsr $b6fa			jsr 	TOKCheckComment
.d6f1	b6f1	4c f0 b5	jmp $b5f0			jmp 	_TKTokeniseLoop
.d6f4	b6f4					_TKNotRem:
.d6f4	b6f4	ae 22 04	ldx $0422			ldx 	identTypeEnd 				; X points to following byte
.d6f7	b6f7	4c f0 b5	jmp $b5f0			jmp 	_TKTokeniseLoop 			; and go round again.
.d6fa	b6fa					TOKCheckComment:
.d6fa	b6fa	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; skip over space
.d6fd	b6fd	e8		inx				inx
.d6fe	b6fe	c9 20		cmp #$20			cmp 	#' '
.d700	b700	f0 f8		beq $b6fa			beq 	TOKCheckComment
.d702	b702	ca		dex				dex 								; first non space character
.d703	b703	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d705	b705	f0 1f		beq $b726			beq 	_TOKCCExit 					; then we are okay
.d707	b707	c9 00		cmp #$00			cmp 	#0 							; EOL
.d709	b709	f0 1b		beq $b726			beq 	_TOKCCExit 					; then we are okay
.d70b	b70b	da		phx				phx
.d70c	b70c					_TOKCCLowerCase:
.d70c	b70c	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d70f	b70f	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d711	b711	90 09		bcc $b71c			bcc 	_TOKKCNotUC
.d713	b713	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d715	b715	b0 05		bcs $b71c			bcs 	_TOKKCNotUC
.d717	b717	49 20		eor #$20			eor 	#$20
.d719	b719	9d 46 05	sta $0546,x			sta 	lineBuffer,x
.d71c	b71c					_TOKKCNotUC:
.d71c	b71c	e8		inx				inx
.d71d	b71d	c9 00		cmp #$00			cmp 	#0
.d71f	b71f	d0 eb		bne $b70c			bne 	_TOKCCLowerCase
.d721	b721	fa		plx				plx
.d722	b722	ca		dex				dex 								; tokenise string expects initial skip.
.d723	b723	20 27 b7	jsr $b727			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d726	b726					_TOKCCExit:
.d726	b726	60		rts				rts
.d727	b727					TOKTokenString:
.d727	b727	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d729	b729	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d72c	b72c	e8		inx				inx									; start of quoted string.
.d72d	b72d	da		phx				phx 								; push start of string on top
.d72e	b72e	ca		dex				dex 								; because we pre-increment
.d72f	b72f					_TSFindEnd:
.d72f	b72f	e8		inx				inx
.d730	b730	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; next character
.d733	b733	f0 04		beq $b739			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d735	b735	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d737	b737	d0 f6		bne $b72f			bne 	_TSFindEnd
.d739	b739					_TSEndOfString:
.d739	b739	7a		ply				ply  								; so now Y is first character, X is character after end.
.d73a	b73a	48		pha				pha 								; save terminating character
.d73b	b73b	20 43 b7	jsr $b743			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d73e	b73e	68		pla				pla 								; terminating character
.d73f	b73f	f0 01		beq $b742			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d741	b741	e8		inx				inx
.d742	b742					_TSNotQuote:
.d742	b742	60		rts				rts
.d743	b743					TOKWriteBlockXY:
.d743	b743	86 36		stx $36				stx 	zTemp0 						; save end character
.d745	b745	98		tya				tya 								; use 2's complement to work out the byte size
.d746	b746	49 ff		eor #$ff			eor 	#$FF
.d748	b748	38		sec				sec
.d749	b749	65 36		adc $36				adc 	zTemp0
.d74b	b74b	1a		inc a				inc 	a 							; one extra for NULL
.d74c	b74c	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d74f	b74f					_TOBlockLoop:
.d74f	b74f	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d751	b751	f0 09		beq $b75c			beq 	_TOBlockExit
.d753	b753	b9 46 05	lda $0546,y			lda 	lineBuffer,y 				; write byte out.
.d756	b756	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d759	b759	c8		iny				iny
.d75a	b75a	80 f3		bra $b74f			bra 	_TOBlockLoop
.d75c	b75c					_TOBlockExit:
.d75c	b75c	a9 00		lda #$00			lda 	#0 							; add NULL.
.d75e	b75e	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d761	b761	60		rts				rts
.d762	b762					TOKHexConstant:
.d762	b762	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d764	b764	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d767	b767	e8		inx				inx									; start of quoted string.
.d768	b768	da		phx				phx 								; push start of constant on top
.d769	b769	ca		dex				dex
.d76a	b76a					_THFindLoop:
.d76a	b76a	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d76b	b76b	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; the hex constant is.
.d76e	b76e	c9 30		cmp #$30			cmp 	#"0"
.d770	b770	90 0c		bcc $b77e			bcc 	_THFoundEnd
.d772	b772	c9 3a		cmp #$3a			cmp 	#"9"+1
.d774	b774	90 f4		bcc $b76a			bcc 	_THFindLoop
.d776	b776	c9 41		cmp #$41			cmp 	#"A"
.d778	b778	90 04		bcc $b77e			bcc 	_THFoundEnd
.d77a	b77a	c9 47		cmp #$47			cmp 	#"F"+1
.d77c	b77c	90 ec		bcc $b76a			bcc 	_THFindLoop
.d77e	b77e					_THFoundEnd:
.d77e	b77e	7a		ply				ply 								; restore start
.d77f	b77f	20 43 b7	jsr $b743			jsr 	TOKWriteBlockXY 			; output the block
.d782	b782	60		rts				rts
.d783	b783					TOKCalculateHash:
.d783	b783	da		phx				phx
.d784	b784	ae 20 04	ldx $0420			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d787	b787	a9 00		lda #$00			lda 	#0
.d789	b789					_TCHLoop:
.d789	b789	18		clc				clc
.d78a	b78a	7d 46 05	adc $0546,x			adc 	lineBuffer,x
.d78d	b78d	e8		inx				inx
.d78e	b78e	ec 22 04	cpx $0422			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d791	b791	d0 f6		bne $b789			bne 	_TCHLoop
.d793	b793	8d 23 04	sta $0423			sta 	identHash 					; save the hash
.d796	b796	fa		plx				plx
.d797	b797	60		rts				rts
.d798	b798					LCLFixLineBufferCase:
.d798	b798	a2 00		ldx #$00			ldx 	#0
.d79a	b79a					_FLBCLoop:
.d79a	b79a	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get next character
.d79d	b79d	f0 22		beq $b7c1			beq 	_FLBCExit 					; end of string.
.d79f	b79f	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d7a1	b7a1	f0 11		beq $b7b4			beq 	_FLBCInQuotes
.d7a3	b7a3	e8		inx				inx
.d7a4	b7a4	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d7a6	b7a6	90 f2		bcc $b79a			bcc 	_FLBCLoop
.d7a8	b7a8	c9 7b		cmp #$7b			cmp 	#'z'+1
.d7aa	b7aa	b0 ee		bcs $b79a			bcs 	_FLBCLoop
.d7ac	b7ac	38		sec				sec 								; make U/C
.d7ad	b7ad	e9 20		sbc #$20			sbc 	#32
.d7af	b7af	9d 45 05	sta $0545,x			sta	 	lineBuffer-1,x 				; write back
.d7b2	b7b2	80 e6		bra $b79a			bra 	_FLBCLoop
.d7b4	b7b4					_FLBCInQuotes:
.d7b4	b7b4	e8		inx				inx 								; advance
.d7b5	b7b5	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get next
.d7b8	b7b8	f0 07		beq $b7c1			beq 	_FLBCExit 					; exit on EOS
.d7ba	b7ba	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d7bc	b7bc	d0 f6		bne $b7b4			bne 	_FLBCInQuotes
.d7be	b7be	e8		inx				inx 								; skip over it
.d7bf	b7bf	80 d9		bra $b79a			bra 	_FLBCLoop
.d7c1	b7c1					_FLBCExit:
.d7c1	b7c1	60		rts				rts
.d7c2	b7c2					TOKExtractLineNumber:
.d7c2	b7c2	ad 48 04	lda $0448			lda 	tokenLineNumber+1 			; push current value on stack
.d7c5	b7c5	48		pha				pha
.d7c6	b7c6	ad 47 04	lda $0447			lda 	tokenLineNumber
.d7c9	b7c9	48		pha				pha
.d7ca	b7ca	20 00 b8	jsr $b800			jsr 	_LCLNTimes2 				; line # x 2
.d7cd	b7cd	20 00 b8	jsr $b800			jsr 	_LCLNTimes2 				; line # x 4
.d7d0	b7d0	18		clc				clc 								; add stacked value
.d7d1	b7d1	68		pla				pla
.d7d2	b7d2	6d 47 04	adc $0447			adc 	tokenLineNumber
.d7d5	b7d5	8d 47 04	sta $0447			sta 	tokenLineNumber
.d7d8	b7d8	68		pla				pla
.d7d9	b7d9	6d 48 04	adc $0448			adc 	tokenLineNumber+1
.d7dc	b7dc	8d 48 04	sta $0448			sta 	tokenLineNumber+1 			; line # x 5
.d7df	b7df	20 00 b8	jsr $b800			jsr 	_LCLNTimes2 				; line # x 10
.d7e2	b7e2	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; get and consume character
.d7e5	b7e5	e8		inx				inx
.d7e6	b7e6	29 0f		and #$0f			and 	#15 						; add to line #
.d7e8	b7e8	18		clc				clc
.d7e9	b7e9	6d 47 04	adc $0447			adc 	tokenLineNumber
.d7ec	b7ec	8d 47 04	sta $0447			sta 	tokenLineNumber
.d7ef	b7ef	90 03		bcc $b7f4			bcc 	_TLENNoCarry
.d7f1	b7f1	ee 48 04	inc $0448			inc 	tokenLineNumber+1
.d7f4	b7f4					_TLENNoCarry:
.d7f4	b7f4	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; more digits ?
.d7f7	b7f7	c9 30		cmp #$30			cmp 	#'0'
.d7f9	b7f9	90 04		bcc $b7ff			bcc 	_TLENExit
.d7fb	b7fb	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7fd	b7fd	90 c3		bcc $b7c2			bcc 	TOKExtractLineNumber
.d7ff	b7ff					_TLENExit:
.d7ff	b7ff	60		rts				rts
.d800	b800					_LCLNTimes2:
.d800	b800	0e 47 04	asl $0447			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d803	b803	2e 48 04	rol $0448			rol 	tokenLineNumber+1
.d806	b806	60		rts				rts
.d807	b807					TOKWriteByte:
.d807	b807	da		phx				phx
.d808	b808	ae 46 04	ldx $0446			ldx 	tokenOffset 				; next slot to write to
.d80b	b80b	9d 46 04	sta $0446,x			sta 	tokenOffset,x 				; write byte out
.d80e	b80e	ee 46 04	inc $0446			inc 	tokenOffset 				; advance slot.
.d811	b811	fa		plx				plx
.d812	b812	60		rts				rts
.d813	b813					TOKCheckCreateVariableRecord:
.d813	b813	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d815	b815	85 36		sta $36				sta 	0+zTemp0
.d817	b817	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d819	b819	85 37		sta $37				sta 	1+zTemp0
.d81b	b81b					_CCVSearch:
.d81b	b81b	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d81d	b81d	f0 2c		beq $b84b			beq 	_CCVFail
.d81f	b81f	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d821	b821	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d823	b823	cd 23 04	cmp $0423			cmp 	identHash 	  				; if not, try the next.
.d826	b826	d0 16		bne $b83e			bne 	_CCVNext
.d828	b828	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d82a	b82a	ae 20 04	ldx $0420			ldx 	identStart
.d82d	b82d					_CCVCompare:
.d82d	b82d	bd 46 05	lda $0546,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d830	b830	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d832	b832	e8		inx				inx 								; advance pointers
.d833	b833	c8		iny				iny
.d834	b834	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d835	b835	d0 07		bne $b83e			bne 	_CCVNext  					; didn't match go to next.
.d837	b837	90 f4		bcc $b82d			bcc 	_CCVCompare 				; not finished yet.
.d839	b839	ec 22 04	cpx $0422			cpx 	identTypeEnd 				; matched whole thing ?
.d83c	b83c	f0 41		beq $b87f			beq 	_CCVFound 					; yes, we were successful
.d83e	b83e					_CCVNext:
.d83e	b83e	18		clc				clc 								; go to next record.
.d83f	b83f	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d841	b841	65 36		adc $36				adc 	zTemp0
.d843	b843	85 36		sta $36				sta 	zTemp0
.d845	b845	90 d4		bcc $b81b			bcc 	_CCVSearch
.d847	b847	e6 37		inc $37				inc 	zTemp0+1
.d849	b849	80 d0		bra $b81b			bra 	_CCVSearch
.d84b	b84b					_CCVFail:
.d84b	b84b	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d84d	b84d	ad 23 04	lda $0423			lda 	identHash
.d850	b850	91 36		sta ($36),y			sta 	(zTemp0),y
.d852	b852	c8		iny				iny 								; offset 2 is the type byte
.d853	b853	ad 24 04	lda $0424			lda 	identTypeByte
.d856	b856	91 36		sta ($36),y			sta 	(zTemp0),y
.d858	b858	c8		iny				iny
.d859	b859					_CCVData:
.d859	b859	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d85b	b85b	91 36		sta ($36),y			sta 	(zTemp0),y
.d85d	b85d	c8		iny				iny
.d85e	b85e	c0 08		cpy #$08			cpy 	#8
.d860	b860	90 f7		bcc $b859			bcc 	_CCVData
.d862	b862	ae 20 04	ldx $0420			ldx 	identStart 					; copy name into 8 on.
.d865	b865					_CCVCopyName:
.d865	b865	bd 46 05	lda $0546,x			lda 	lineBuffer,x
.d868	b868	91 36		sta ($36),y			sta 	(zTemp0),y
.d86a	b86a	e8		inx				inx
.d86b	b86b	c8		iny				iny
.d86c	b86c	ec 22 04	cpx $0422			cpx 	identTypeEnd
.d86f	b86f	d0 f4		bne $b865			bne 	_CCVCopyName
.d871	b871	98		tya				tya 								; patch offset
.d872	b872	92 36		sta ($36)			sta 	(zTemp0)
.d874	b874	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d876	b876	91 36		sta ($36),y			sta 	(zTemp0),y
.d878	b878	88		dey				dey
.d879	b879	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d87b	b87b	09 80		ora #$80			ora 	#$80
.d87d	b87d	91 36		sta ($36),y			sta 	(zTemp0),y
.d87f	b87f					_CCVFound:
.d87f	b87f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d881	b881	38		sec				sec
.d882	b882	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d884	b884	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d886	b886	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d889	b889	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d88b	b88b	20 07 b8	jsr $b807			jsr 	TOKWriteByte
.d88e	b88e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d88f	b88f					SNDCheckChannel:
.d88f	b88f	aa		tax				tax
.d890	b890	bd ba 09	lda $09ba,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d893	b893	d0 38		bne $b8cd			bne 	_SNDCCExit
.d895	b895	da		phx				phx 								; save current channel
.d896	b896	8a		txa				txa 								; put in A
.d897	b897	20 13 b9	jsr $b913			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d89a	b89a	68		pla				pla 								; channel # in A
.d89b	b89b	90 30		bcc $b8cd			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d89d	b89d	a8		tay				tay 								; Y is the channel #
.d89e	b89e	bd af 08	lda $08af,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d8a1	b8a1	99 ae 09	sta $09ae,y			sta 	SNDPitchLow,y
.d8a4	b8a4	bd b0 08	lda $08b0,x			lda 	SNDQueue+2,x
.d8a7	b8a7	99 b2 09	sta $09b2,y			sta 	SNDPitchHigh,y
.d8aa	b8aa	bd b1 08	lda $08b1,x			lda 	SNDQueue+3,x
.d8ad	b8ad	99 b6 09	sta $09b6,y			sta 	SNDVolume,y
.d8b0	b8b0	bd b2 08	lda $08b2,x			lda 	SNDQueue+4,x
.d8b3	b8b3	99 ba 09	sta $09ba,y			sta 	SNDTimeLeft,y
.d8b6	b8b6	bd b3 08	lda $08b3,x			lda 	SNDQueue+5,x
.d8b9	b8b9	99 be 09	sta $09be,y			sta 	SNDAdjustLow,y
.d8bc	b8bc	bd b4 08	lda $08b4,x			lda 	SNDQueue+6,x
.d8bf	b8bf	99 c2 09	sta $09c2,y			sta 	SNDAdjustHigh,y
.d8c2	b8c2	5a		phy				phy 								; save channel #
.d8c3	b8c3	20 2d b9	jsr $b92d			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d8c6	b8c6	ce ad 08	dec $08ad			dec 	SNDLength 					; reduce the queue length.
.d8c9	b8c9	68		pla				pla
.d8ca	b8ca	20 ce b8	jsr $b8ce			jsr 	SNDUpdateNote 				; update channel A
.d8cd	b8cd					_SNDCCExit:
.d8cd	b8cd	60		rts				rts
.d8ce	b8ce					SNDUpdateNote:
.d8ce	b8ce	aa		tax				tax 								; so we can access records
.d8cf	b8cf	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d8d0	b8d0	0a		asl a				asl 	a
.d8d1	b8d1	0a		asl a				asl 	a
.d8d2	b8d2	0a		asl a				asl 	a
.d8d3	b8d3	0a		asl a				asl 	a
.d8d4	b8d4	8d ac 08	sta $08ac			sta 	SNDChannelBits
.d8d7	b8d7	bd ba 09	lda $09ba,x			lda 	SNDTimeLeft,x 				; are we silent
.d8da	b8da	f0 2e		beq $b90a			beq 	_SNDUNIsSilent
.d8dc	b8dc	ad ac 08	lda $08ac			lda 	SNDChannelBits 				; push channel bits on stack
.d8df	b8df	48		pha				pha
.d8e0	b8e0	bd ae 09	lda $09ae,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d8e3	b8e3	29 0f		and #$0f			and 	#$0F
.d8e5	b8e5	0d ac 08	ora $08ac			ora 	SNDChannelBits 				; set channel bits
.d8e8	b8e8	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d8ea	b8ea	20 77 b9	jsr $b977			jsr 	SNDWritePorts
.d8ed	b8ed	bd b2 09	lda $09b2,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d8f0	b8f0	8d ac 08	sta $08ac			sta 	SNDChannelBits
.d8f3	b8f3	bd ae 09	lda $09ae,x			lda 	SNDPitchLow,x
.d8f6	b8f6	4e ac 08	lsr $08ac			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d8f9	b8f9	6a		ror a				ror 	a
.d8fa	b8fa	4e ac 08	lsr $08ac			lsr 	SNDChannelBits
.d8fd	b8fd	6a		ror a				ror 	a
.d8fe	b8fe	4a		lsr a				lsr 	a 							; put in bits 0-5
.d8ff	b8ff	4a		lsr a				lsr 	a
.d900	b900	20 77 b9	jsr $b977			jsr 	SNDWritePorts 				; write as rest of pitch register
.d903	b903	68		pla				pla
.d904	b904	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d906	b906	20 77 b9	jsr $b977			jsr 	SNDWritePorts
.d909	b909	60		rts				rts
.d90a	b90a					_SNDUNIsSilent:
.d90a	b90a	ad ac 08	lda $08ac			lda 	SNDChannelBits 				; channel bits
.d90d	b90d	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d90f	b90f	20 77 b9	jsr $b977			jsr 	SNDWritePorts 				; write to the ports
.d912	b912	60		rts				rts
.d913	b913					SNDFindNextNoteForA:
.d913	b913	ac ad 08	ldy $08ad			ldy 	SNDLength 					; queue size into Y
.d916	b916	f0 13		beq $b92b			beq 	_SNDFNNFail 				; queue empty.
.d918	b918	a2 00		ldx #$00			ldx 	#0
.d91a	b91a					_SNDFNNSearch:
.d91a	b91a	dd ae 08	cmp $08ae,x			cmp 	SNDQueue,x 					; does it match the channel
.d91d	b91d	38		sec				sec
.d91e	b91e	f0 0c		beq $b92c			beq 	_SNDFNNExit 				; if so exit with CS.
.d920	b920	e8		inx				inx 								; next queue slot.
.d921	b921	e8		inx				inx
.d922	b922	e8		inx				inx
.d923	b923	e8		inx				inx
.d924	b924	e8		inx				inx
.d925	b925	e8		inx				inx
.d926	b926	e8		inx				inx
.d927	b927	e8		inx				inx
.d928	b928	88		dey				dey 								; done the whole queue
.d929	b929	d0 ef		bne $b91a			bne 	_SNDFNNSearch 				; no, go back.
.d92b	b92b					_SNDFNNFail:
.d92b	b92b	18		clc				clc
.d92c	b92c					_SNDFNNExit:
.d92c	b92c	60		rts				rts
.d92d	b92d					SNDDeleteXFromQueue:
.d92d	b92d	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d92f	b92f	f0 09		beq $b93a			beq 	_SNDDXExit
.d931	b931	bd b6 08	lda $08b6,x			lda 	SNDQueue+8,x
.d934	b934	9d ae 08	sta $08ae,x			sta 	SNDQueue,x
.d937	b937	e8		inx				inx
.d938	b938	80 f3		bra $b92d			bra 	SNDDeleteXFromQueue
.d93a	b93a					_SNDDXExit:
.d93a	b93a	60		rts				rts
.08ac						SNDChannelBits:
>08ac								.fill 	1
.d93b	b93b					SNDQueueRequest:
.d93b	b93b	86 36		stx $36				stx 	zTemp0						; save queue address
.d93d	b93d	84 37		sty $37				sty 	zTemp0+1
.d93f	b93f	ae ad 08	ldx $08ad			ldx 	SNDLength 					; queue is full, can't take any more.
.d942	b942	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d944	b944	f0 21		beq $b967			beq 	_SNDQRExit
.d946	b946	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d948	b948	48		pha				pha
.d949	b949	8a		txa				txa  								; get offset in queue buffer/
.d94a	b94a	0a		asl a				asl 	a
.d94b	b94b	0a		asl a				asl 	a
.d94c	b94c	0a		asl a				asl 	a
.d94d	b94d	aa		tax				tax
.d94e	b94e	68		pla				pla 								; get back and push again
.d94f	b94f	48		pha				pha
.d950	b950	9d ae 08	sta $08ae,x			sta 	SNDQueue+0,x 				; save the channel #
.d953	b953	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d955	b955					_SNDQCopy:
.d955	b955	b1 36		lda ($36),y			lda 	(zTemp0),y
.d957	b957	e8		inx				inx
.d958	b958	c8		iny				iny
.d959	b959	9d ae 08	sta $08ae,x			sta 	SNDQueue,x
.d95c	b95c	c0 06		cpy #$06			cpy 	#6
.d95e	b95e	d0 f5		bne $b955			bne 	_SNDQCopy
.d960	b960	ee ad 08	inc $08ad			inc 	SNDLength 					; bump queue length.
.d963	b963	68		pla				pla 								; get channel # back
.d964	b964	20 8f b8	jsr $b88f			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d967	b967					_SNDQRExit:
.d967	b967	60		rts				rts
.d968	b968					SNDSilenceChannel:
.d968	b968	aa		tax				tax 								; zero time left.
.d969	b969	9e ba 09	stz $09ba,x			stz 	SNDTimeLeft,x
.d96c	b96c	0a		asl a				asl 	a 							; shift into position
.d96d	b96d	0a		asl a				asl 	a
.d96e	b96e	0a		asl a				asl 	a
.d96f	b96f	0a		asl a				asl 	a
.d970	b970	0a		asl a				asl 	a
.d971	b971	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d973	b973	20 77 b9	jsr $b977			jsr 	SNDWritePorts
.d976	b976	60		rts				rts
.d977	b977					SNDWritePorts:
.d977	b977	da		phx				phx 								; save X
.d978	b978	a6 01		ldx $01				ldx 	1 							; save I/O status
.d97a	b97a	64 01		stz $01				stz 	1 							; access I/O page 0
.d97c	b97c	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d97f	b97f	8d 10 d6	sta $d610			sta 	$D610
.d982	b982	86 01		stx $01				stx 	1 							; restore I/O
.d984	b984	fa		plx				plx 								; restore X
.d985	b985	60		rts				rts
.d986	b986					Export_SNDCommand:
.d986	b986	da		phx				phx 								; save XY
.d987	b987	5a		phy				phy
.d988	b988	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d98a	b98a	f0 1d		beq $b9a9			beq 	_SNDInitialise
.d98c	b98c	90 28		bcc $b9b6			bcc 	_SNDExit
.d98e	b98e	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d990	b990	f0 17		beq $b9a9			beq 	_SNDSilence
.d992	b992	b0 22		bcs $b9b6			bcs 	_SNDExit
.d994	b994	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d996	b996	b0 09		bcs $b9a1			bcs 	_SNDQueryPlay
.d998	b998	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d99a	b99a	b0 1a		bcs $b9b6			bcs 	_SNDExit
.d99c	b99c	20 3b b9	jsr $b93b			jsr 	SNDQueueRequest
.d99f	b99f	80 15		bra $b9b6			bra 	_SNDExit
.d9a1	b9a1					_SNDQueryPlay:
.d9a1	b9a1	29 03		and #$03			and 	#3 							; get channel #
.d9a3	b9a3	aa		tax				tax
.d9a4	b9a4	bd ba 09	lda $09ba,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d9a7	b9a7	80 0d		bra $b9b6			bra 	_SNDExit
.d9a9	b9a9					_SNDInitialise:
.d9a9	b9a9					_SNDSilence:
.d9a9	b9a9	9c ad 08	stz $08ad			stz 	SNDLength 					; empty the queue.
.d9ac	b9ac	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d9ae	b9ae					_SNDSilenceLoop:
.d9ae	b9ae	48		pha				pha
.d9af	b9af	20 68 b9	jsr $b968			jsr 	SNDSilenceChannel
.d9b2	b9b2	68		pla				pla
.d9b3	b9b3	3a		dec a				dec 	a
.d9b4	b9b4	10 f8		bpl $b9ae			bpl 	_SNDSilenceLoop
.d9b6	b9b6					_SNDExit:
.d9b6	b9b6	7a		ply				ply
.d9b7	b9b7	fa		plx				plx
.d9b8	b9b8	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.08ad						SNDLength:
>08ad								.fill 	1
.08ae						SNDQueue:
>08ae								.fill 	SNDQueueSize * 8
.09ae						SNDPitchLow:
>09ae								.fill 	4
.09b2						SNDPitchHigh:
>09b2								.fill 	4
.09b6						SNDVolume:
>09b6								.fill 	4
.09ba						SNDTimeLeft:
>09ba								.fill 	4
.09be						SNDAdjustLow:
>09be								.fill 	4
.09c2						SNDAdjustHigh:
>09c2								.fill 	4
.d9b9	b9b9					Export_SNDUpdate:
.d9b9	b9b9					PagedSNDUpdate:
.d9b9	b9b9	ad ba 09	lda $09ba			lda 	SNDTimeLeft+0 				; look at time remaining
.d9bc	b9bc	f0 05		beq $b9c3			beq 	_SNDUNot0 					; not playing
.d9be	b9be	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d9c0	b9c0	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel 			; update it.
.d9c3	b9c3					_SNDUNot0:
.d9c3	b9c3	ad bb 09	lda $09bb			lda 	SNDTimeLeft+1
.d9c6	b9c6	f0 05		beq $b9cd			beq 	_SNDUNot1
.d9c8	b9c8	a2 01		ldx #$01			ldx 	#1
.d9ca	b9ca	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel
.d9cd	b9cd					_SNDUNot1:
.d9cd	b9cd	ad bc 09	lda $09bc			lda 	SNDTimeLeft+2
.d9d0	b9d0	f0 05		beq $b9d7			beq 	_SNDUNot2
.d9d2	b9d2	a2 02		ldx #$02			ldx 	#2
.d9d4	b9d4	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel
.d9d7	b9d7					_SNDUNot2:
.d9d7	b9d7	ad bd 09	lda $09bd			lda 	SNDTimeLeft+3
.d9da	b9da	f0 05		beq $b9e1			beq 	_SNDUNot3
.d9dc	b9dc	a2 03		ldx #$03			ldx 	#3
.d9de	b9de	20 e2 b9	jsr $b9e2			jsr 	SNDUpdateChannel
.d9e1	b9e1					_SNDUNot3:
.d9e1	b9e1	60		rts				rts
.d9e2	b9e2					SNDUpdateChannel:
.d9e2	b9e2	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d9e4	b9e4	f0 2c		beq $ba12			beq 	_SNDUCExit
.d9e6	b9e6	3a		dec a				dec 	a 							; decrement and update timer
.d9e7	b9e7	9d ba 09	sta $09ba,x			sta 	SNDTimeLeft,x
.d9ea	b9ea	f0 1d		beq $ba09			beq 	_SNDUCUpdate 				; if zero, silence channel
.d9ec	b9ec	bd be 09	lda $09be,x			lda 	SNDAdjustLow,x 				; adjust ?
.d9ef	b9ef	1d c2 09	ora $09c2,x			ora 	SNDAdjustHigh,x
.d9f2	b9f2	f0 1e		beq $ba12			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d9f4	b9f4	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d9f5	b9f5	bd ae 09	lda $09ae,x			lda 	SNDPitchLow,x
.d9f8	b9f8	7d be 09	adc $09be,x			adc 	SNDAdjustLow,x
.d9fb	b9fb	9d ae 09	sta $09ae,x			sta 	SNDPitchLow,x
.d9fe	b9fe	bd b2 09	lda $09b2,x			lda 	SNDPitchHigh,x
.da01	ba01	7d c2 09	adc $09c2,x			adc 	SNDAdjustHigh,x
.da04	ba04	29 03		and #$03			and 	#3
.da06	ba06	9d b2 09	sta $09b2,x			sta 	SNDPitchHigh,x
.da09	ba09					_SNDUCUpdate:
.da09	ba09	8a		txa				txa 								; which channel.
.da0a	ba0a	48		pha				pha
.da0b	ba0b	20 ce b8	jsr $b8ce			jsr 	SNDUpdateNote 				; update the current note
.da0e	ba0e	68		pla				pla
.da0f	ba0f	20 8f b8	jsr $b88f			jsr 	SNDCheckChannel 			; more to do ?
.da12	ba12					_SNDUCExit:
.da12	ba12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff f2 58 f2 ff d8 07 d8			.byte	255,242,88,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,255,242,8,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,15,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,120,120,255,242,7,242,120,120,255,242,15,242,120,120,242,242,120,120,255,242,4,242,120,120,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,2,242,210,210,255,242,18,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,3,242,210,210,255,242,17,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,3,242,255,210,4,210,209,210,255,242,2,242,210,210,255,242,4,242,210,210,255,242,87,242,255,114,80,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e018	a018	ff f2 02 f2 ff d8 06 d8 ff f2 09 f2 d2 d2 f2 f2
>e028	a028	ff d2 07 d2 ff f2 11 f2 68 68 ff f2 07 f2 68 68
>e038	a038	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e048	a048	ff f2 04 f2 68 68 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e058	a058	ff f2 04 f2 d2 d2 ff f2 10 f2 e8 e8 ff f2 0e f2
>e068	a068	e8 e8 f2 f2 e8 e8 ff f2 08 f2 e8 e8 ff f2 0f f2
>e078	a078	d2 d2 f2 f2 d2 d2 ff f2 04 f2 d2 d2 ff f2 10 f2
>e088	a088	ff 38 05 38 ff f2 04 f2 ff 38 06 38 ff f2 02 f2
>e098	a098	ff 38 07 38 ff f2 02 f2 ff 38 07 38 ff f2 09 f2
>e0a8	a0a8	d2 d2 f2 f2 ff d2 07 d2 ff f2 11 f2 78 78 ff f2
>e0b8	a0b8	07 f2 78 78 ff f2 0f f2 78 78 f2 f2 78 78 ff f2
>e0c8	a0c8	04 f2 78 78 f2 f2 d2 d2 ff f2 04 f2 d2 d2 f2 f2
>e0d8	a0d8	d2 d2 ff f2 02 f2 d2 d2 ff f2 12 f2 a8 a8 ff f2
>e0e8	a0e8	07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2 04 f2 a8 a8
>e0f8	a0f8	f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2 d2 d2 ff f2
>e108	a108	04 f2 d2 d2 f2 f2 d2 d2 ff f2 03 f2 d2 d2 ff f2
>e118	a118	11 f2 48 48 ff f2 07 f2 ff 48 08 48 ff f2 02 f2
>e128	a128	ff 48 06 48 ff f2 03 f2 ff 48 06 48 ff f2 03 f2
>e138	a138	ff d2 04 d2 d1 d2 ff f2 02 f2 d2 d2 ff f2 04 f2
>e148	a148	d2 d2 ff f2 57 f2 ff 72 50 72 ff e2 1b e2 72 ff
>e158	a158	92 03 92 91 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	1b e2 72 ff 92 03 92 91 ff 72 12 72 ff c2 18 c2
>e178	a178	72 72 ff e2 1b e2 72 ff 92 03 92 91 ff 72 12 72
>e188	a188	ff c2 18 c2 ff 72 50 72 ff 00
.e192	a192					Header_jchars:
>e192	a192	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e19a	a19a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1aa	a1aa	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1ba	a1ba	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ca	a1ca	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1da	a1da	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e1ea	a1ea	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e1fa	a1fa	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e20a	a20a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e21a	a21a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e22a	a22a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e23a	a23a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e24a	a24a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e25a	a25a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e26a	a26a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e27a	a27a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e28a	a28a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e29a	a29a	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2aa	a2aa	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2ba	a2ba	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ca	a2ca	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2da	a2da	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2ea	a2ea	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e2fa	a2fa	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e30a	a30a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e31a	a31a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e32a	a32a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e33a	a33a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e34a	a34a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e35a	a35a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e36a	a36a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e37a	a37a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e38a	a38a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e39a	a39a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3aa	a3aa	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3ba	a3ba	9d ff 96 18 96 a3 ff 00
.e3c2	a3c2					Header_kattrs:
>e3c2	a3c2	ff f2 5e f2 ff d8 07 d8			.byte	255,242,94,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,2,242,210,210,255,242,3,242,210,210,255,242,28,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,242,242,210,210,255,242,2,242,210,210,255,242,29,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,8,242,210,210,242,242,210,210,255,242,30,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,2,242,255,210,4,210,255,242,31,242,120,120,255,242,7,242,120,120,255,242,15,242,113,113,242,242,113,113,255,242,4,242,113,113,242,242,210,210,242,242,210,210,255,242,30,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,2,242,210,210,255,242,29,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,2,242,210,210,255,242,3,242,210,210,255,242,93,242,255,114,80,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3ca	a3ca	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e3da	a3da	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 d2 d2 ff f2
>e3ea	a3ea	03 f2 d2 d2 ff f2 1c f2 68 68 ff f2 07 f2 68 68
>e3fa	a3fa	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e40a	a40a	ff f2 04 f2 68 68 f2 f2 d2 d2 ff f2 02 f2 d2 d2
>e41a	a41a	ff f2 1d f2 e8 e8 ff f2 0e f2 e8 e8 f2 f2 e8 e8
>e42a	a42a	ff f2 08 f2 e8 e8 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e43a	a43a	ff f2 1e f2 ff 38 05 38 ff f2 04 f2 ff 38 06 38
>e44a	a44a	ff f2 02 f2 ff 38 07 38 ff f2 02 f2 ff 38 07 38
>e45a	a45a	ff f2 02 f2 ff d2 04 d2 ff f2 1f f2 78 78 ff f2
>e46a	a46a	07 f2 78 78 ff f2 0f f2 71 71 f2 f2 71 71 ff f2
>e47a	a47a	04 f2 71 71 f2 f2 d2 d2 f2 f2 d2 d2 ff f2 1e f2
>e48a	a48a	a8 a8 ff f2 07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2
>e49a	a49a	04 f2 a8 a8 f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2
>e4aa	a4aa	d2 d2 ff f2 02 f2 d2 d2 ff f2 1d f2 48 48 ff f2
>e4ba	a4ba	07 f2 ff 48 08 48 ff f2 02 f2 ff 48 06 48 ff f2
>e4ca	a4ca	03 f2 ff 48 06 48 ff f2 02 f2 d2 d2 ff f2 03 f2
>e4da	a4da	d2 d2 ff f2 5d f2 ff 72 50 72 ff e2 1b e2 72 ff
>e4ea	a4ea	92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2 1b
>e4fa	a4fa	e2 72 ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72
>e50a	a50a	ff e2 1b e2 72 ff 92 04 92 ff 72 12 72 ff c2 18
>e51a	a51a	c2 ff 72 50 72 ff 00
.e521	a521					Header_kchars:
>e521	a521	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e529	a529	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e539	a539	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e549	a549	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e559	a559	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e569	a569	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e579	a579	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e589	a589	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e599	a599	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e5a9	a5a9	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e5b9	a5b9	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e5c9	a5c9	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e5d9	a5d9	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e5e9	a5e9	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e5f9	a5f9	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e609	a609	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e619	a619	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e629	a629	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e639	a639	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e649	a649	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e659	a659	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e669	a669	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e679	a679	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e689	a689	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e699	a699	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e6a9	a6a9	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e6b9	a6b9	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e6c9	a6c9	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e6d9	a6d9	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e6e9	a6e9	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e6f9	a6f9	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e709	a709	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e719	a719	16 96 9d ff 96 18 96 bf ff 00
.e723	a723					Header_Palette:
>e723	a723	00 00 00 00				.dword $000000
>e727	a727	66 66 66 00				.dword $666666
>e72b	a72b	aa 00 00 00				.dword $0000aa
>e72f	a72f	00 aa 00 00				.dword $00aa00
>e733	a733	ea 41 c0 00				.dword $c041ea
>e737	a737	00 48 87 00				.dword $874800
>e73b	a73b	00 9c ff 00				.dword $ff9c00
>e73f	a73f	ff db 57 00				.dword $57dbff
>e743	a743	28 3f 3f 00				.dword $3f3f28
>e747	a747	8a aa aa 00				.dword $aaaa8a
>e74b	a74b	ff 55 55 00				.dword $5555ff
>e74f	a74f	55 ff 55 00				.dword $55ff55
>e753	a753	ed 8d ff 00				.dword $ff8ded
>e757	a757	00 00 ff 00				.dword $ff0000
>e75b	a75b	55 ff ff 00				.dword $ffff55
>e75f	a75f	ff ff ff 00				.dword $ffffff
>e763	a763	ff ff ff 00				.dword $ffffff
>e767	a767	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
