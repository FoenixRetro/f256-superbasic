
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 18:34:31 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 c6 93	jsr $93c6			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 64 85	jsr $8564			jsr 	RunDemos
.8013	20 a9 8d	jsr $8da9			jsr 	NewCommand 					; erase current program
.8016	20 4b a0	jsr $a04b			jsr 	BackloadProgram
.8019	4c 05 89	jmp $8905			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1116."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 31 31 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 57 86	jsr $8657			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 c8 85	jsr $85c8			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 d9 85	jsr $85d9			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 e6 85	jsr $85e6			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 c8 85	jsr $85c8			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 d9 85	jsr $85d9			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 c8 85	jsr $85c8			jsr 	GXOpenBitmap
.8216	20 75 86	jsr $8675			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 e6 85	jsr $85e6			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3c		sta ($3c),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 d9 85	jsr $85d9			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.82ad	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3d		sta $3d				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.82ca	a5 3d		lda $3d				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3d		sta $3d				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 3c 86	jsr $863c			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 c8 85	jsr $85c8			jsr 	GXOpenBitmap 				; start drawing
.8345	20 57 86	jsr $8657			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 e6 85	jsr $85e6			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 3c 86	jsr $863c			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 d9 85	jsr $85d9			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3d		lda $3d				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3d		lda $3d				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3d		sta $3d				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap 			; fix up.
.83d0	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3d		sta $3d				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3c		sta $3c				sta 	gsTemp
.83e7	60		rts				rts
.83e8					GXDLTCheckWrap:
.83e8	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3d		sta $3d				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/render.asm

.83f5					GXDrawGraphicElement:
.83f5	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.83f8	3a		dec a				dec 	a
.83f9	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.83fc	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.83ff	9c 1d a6	stz $a61d			stz 	gxHFlip
.8402	2c 3b 06	bit $063b			bit 	gxMode
.8405	10 03		bpl $840a			bpl 	_GXNotVertical
.8407	8d 54 06	sta $0654			sta 	gxVFlip
.840a					_GXNotVertical:
.840a	50 03		bvc $840f			bvc 	_GXNotHorizontal
.840c	8d 1d a6	sta $a61d			sta 	gxHFlip
.840f					_GXNotHorizontal:
.840f	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.8412	8e 51 06	stx $0651			stx 	gxAcquireVector
.8415	20 c8 85	jsr $85c8			jsr 	gxOpenBitmap 				; open the bitmap.
.8418	ad 3b 06	lda $063b			lda 	gxMode 						; scale bits
.841b	4a		lsr a				lsr 	a
.841c	4a		lsr a				lsr 	a
.841d	4a		lsr a				lsr 	a
.841e	29 07		and #$07			and		#7
.8420	1a		inc a				inc 	a
.8421	8d 53 06	sta $0653			sta 	gxScale
.8424	64 38		stz $38				stz 	gzTemp1						; start first line
.8426					_GXGELoop:
.8426	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.8428	4d 54 06	eor $0654			eor 	gxVFlip
.842b	aa		tax				tax 								; get the Xth line.
.842c	20 50 84	jsr $8450			jsr 	_GXCallAcquire 				; get that data.
.842f	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.8432	85 39		sta $39				sta 	gzTemp1+1
.8434					_GXGELoop2:
.8434	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8437	cd 3a 06	cmp $063a			cmp 	gxHeight
.843a	b0 10		bcs $844c			bcs 	_GXDGEExit
.843c	20 53 84	jsr $8453			jsr 	GXRenderOneLine 			; render line
.843f	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.8441	d0 f1		bne $8434			bne 	_GXGELoop2
.8443	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.8445	a5 38		lda $38				lda 	gzTemp1
.8447	cd 4f 06	cmp $064f			cmp 	gxSize
.844a	d0 da		bne $8426			bne 	_GXGELoop
.844c					_GXDGEExit:
.844c	20 d9 85	jsr $85d9			jsr 	GXCloseBitmap
.844f	60		rts				rts
.8450					_GXCallAcquire:
.8450	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.8453					GXRenderOneLine:
.8453	20 e6 85	jsr $85e6			jsr 	GXPositionCalc 				; calculate position/offset.
.8456	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8459	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.845b					_GXROLLoop1:
.845b	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.845e	85 3b		sta $3b				sta 	gzTemp2+1
.8460					_GXROLLoop2:
.8460	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.8462	4d 1d a6	eor $a61d			eor 	gxHFlip
.8465	aa		tax				tax 								; read from the pixel buffer
.8466	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8469	f0 0a		beq $8475			beq 	_GXZeroPixel 				; don't draw if zero.
.846b	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.846d	2d 3e 06	and $063e			and 	gxANDValue
.8470	4d 3d 06	eor $063d			eor 	gxEORValue
.8473	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8475					_GXZeroPixel:
.8475	c8		iny				iny 								; advance pointer
.8476	d0 05		bne $847d			bne 	_GXNoShift
.8478	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.847a	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.847d					_GXNoShift:
.847d	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.847f	d0 df		bne $8460			bne 	_GXROLLoop2
.8481	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.8483	a5 3a		lda $3a				lda 	gzTemp2
.8485	cd 4f 06	cmp $064f			cmp 	gxSize
.8488	d0 d1		bne $845b			bne 	_GXROLLoop1
.848a	ee 33 06	inc $0633			inc 	gxY0
.848d	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.a61d					gxHFlip:
>a61d							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/font.asm

.848e					GXFontHandler:
.848e	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.8490	06 36		asl $36				asl	 	gzTemp0 					; x 2
.8492	26 37		rol $37				rol	 	gzTemp0+1
.8494	06 36		asl $36				asl	 	gzTemp0 					; x 4
.8496	26 37		rol $37				rol	 	gzTemp0+1
.8498	06 36		asl $36				asl	 	gzTemp0 					; x 8
.849a	26 37		rol $37				rol	 	gzTemp0+1
.849c	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.849e	09 c0		ora #$c0			ora 	#$C0
.84a0	85 37		sta $37				sta 	gzTemp0+1
.84a2	a9 08		lda #$08			lda 	#8 							; size 8x8
.84a4	a2 ac		ldx #$ac			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.84a6	a0 84		ldy #$84			ldy 	#GXGetGraphicDataFont >> 8
.84a8	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.84ab	60		rts				rts
.84ac					GXGetGraphicDataFont:
.84ac	8a		txa				txa 								; X->Y
.84ad	a8		tay				tay
.84ae	a6 01		ldx $01				ldx 	1 							; preserve old value
.84b0	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.84b2	85 01		sta $01				sta 	1
.84b4	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.84b6	86 01		stx $01				stx 	1 							; put old value back.
.84b8	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.84ba					_GXExpand:
.84ba	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.84bd	0a		asl a				asl 	a 							; shift bit 7 into C
.84be	90 08		bcc $84c8			bcc 	_GXNoPixel
.84c0	48		pha				pha 								; if set, set pixel buffer to current colour.
.84c1	ad 3c 06	lda $063c			lda 	gxColour
.84c4	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.84c7	68		pla				pla
.84c8					_GXNoPixel:
.84c8	e8		inx				inx 								; do the whole byte.
.84c9	e0 08		cpx #$08			cpx 	#8
.84cb	d0 ed		bne $84ba			bne 	_GXExpand
.84cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.84ce					GraphicDraw:
.84ce	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.84d0	b0 06		bcs $84d8			bcs 	_GDCoordinate
.84d2	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.84d4	84 37		sty $37				sty 	gzTemp0+1
.84d6	80 2c		bra $8504			bra 	_GDExecuteA 				; and execute
.84d8					_GDCoordinate:
.84d8	48		pha				pha 								; save AXY
.84d9	da		phx				phx
.84da	5a		phy				phy
.84db	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.84dd					_GDCopy1:
.84dd	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.84e0	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.84e3	ca		dex				dex
.84e4	10 f7		bpl $84dd			bpl 	_GDCopy1
.84e6	68		pla				pla 								; update Y
.84e7	8d 2b 06	sta $062b			sta 	gxCurrentY
.84ea	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.84ed	68		pla				pla
.84ee	8d 29 06	sta $0629			sta 	gxCurrentX
.84f1	68		pla				pla 								; get A (command+X.1) back
.84f2	48		pha				pha
.84f3	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.84f5	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.84f8	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.84fa					_GDCopy2:
.84fa	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.84fd	9d 31 06	sta $0631,x			sta 	gxX0,x
.8500	ca		dex				dex
.8501	10 f7		bpl $84fa			bpl 	_GDCopy2
.8503	68		pla				pla 								; get command back
.8504					_GDExecuteA:
.8504	29 fe		and #$fe			and 	#$FE 						; lose LSB
.8506	aa		tax				tax
.8507	7c 0b 85	jmp ($850b,x)			jmp 	(GDVectors,x)
.850a					GXMove:
.850a	60		rts				rts
.850b					GDVectors:
>850b							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>850f	c9 81						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>8511	37 85						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>8513	8e 84						.word 	GXFontHandler 				; $04 		; Draw from font
>8515							.fill 	11*2 						; $05-$0F 	: Reserved
>852b	0a 85						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>852d	13 82						.word 	GXLine 						; $11 		: Draw line
>852f	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8531	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>8533	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>8535	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
.8537					GXSetColourMode:
.8537	a6 36		ldx $36				ldx 	gzTemp0
.8539	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.853c	a5 37		lda $37				lda 	gzTemp0+1 								;
.853e	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.8541	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8543	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8546	ae 3c 06	ldx $063c			ldx 	gxColour
.8549	8e 3d 06	stx $063d			stx 	gxEORValue
.854c	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.854e	90 03		bcc $8553			bcc 	_GXSDCNotAndColour
.8550	8e 3e 06	stx $063e			stx 	gxANDValue
.8553					_GXSDCNotAndColour:
.8553	d0 03		bne $8558			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.8555	9c 3d 06	stz $063d			stz 	gxEORValue
.8558					_GXSDCNotAnd:
.8558	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8559	90 08		bcc $8563			bcc 	_GXSDCNoFlip
.855b	ad 3e 06	lda $063e			lda	 	gxANDValue
.855e	49 ff		eor #$ff			eor 	#$FF
.8560	8d 3e 06	sta $063e			sta 	gxANDValue
.8563					_GXSDCNoFlip:
.8563	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.8564					RunDemos:
.8564	64 01		stz $01				stz 	1
.8566	a9 0f		lda #$0f			lda 	#$0F
.8568	8d 00 d0	sta $d000			sta 	$D000
.856b	a9 01		lda #$01			lda 	#1
.856d	8d 00 d1	sta $d100			sta 	$D100
.8570	9c 01 d1	stz $d101			stz 	$D101
.8573	9c 02 d1	stz $d102			stz 	$D102
.8576	a9 02		lda #$02			lda 	#2
.8578	8d 03 d1	sta $d103			sta 	$D103
.857b	a9 10		lda #$10			lda 	#16
.857d	8d 39 06	sta $0639			sta 	gxBasePage
.8580	a9 f0		lda #$f0			lda 	#240
.8582	8d 3a 06	sta $063a			sta 	gxHeight
.8585					loop:
.8585	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.8587	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.8589	a0 00		ldy #$00			ldy 	#(0)
.858b	20 ce 84	jsr $84ce			jsr 	GraphicDraw
.858e	a9 06		lda #$06			lda 	#((3)*2)+((($1C) >> 8) & 1)
.8590	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.8592	a0 38		ldy #$38			ldy 	#(0+8*7)
.8594	20 ce 84	jsr $84ce			jsr 	GraphicDraw
.8597	a9 20		lda #$20			lda 	#((16)*2)+(((20) >> 8) & 1)
.8599	a2 14		ldx #$14			ldx 	#((20) & $FF)
.859b	a0 0a		ldy #$0a			ldy 	#(10)
.859d	20 ce 84	jsr $84ce			jsr 	GraphicDraw
.85a0	a9 08		lda #$08			lda 	#((4)*2)+((('F') >> 8) & 1)
.85a2	a2 46		ldx #$46			ldx 	#(('F') & $FF)
.85a4	a0 00		ldy #$00			ldy 	#(0)
.85a6	20 ce 84	jsr $84ce			jsr 	GraphicDraw
.85a9	20 d6 9c	jsr $9cd6	demo:	jsr 	Random32Bit
.85ac	ee 3d 06	inc $063d			inc 	gxEORValue
.85af	a9 20		lda #$20			lda 	#16*2
.85b1	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.85b4	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.85b7	20 ce 84	jsr $84ce			jsr 	GraphicDraw
.85ba	ad 8a 04	lda $048a			lda 	RandomSeed+2
.85bd	29 7f		and #$7f			and 	#127
.85bf	aa		tax				tax
.85c0	a9 08		lda #$08			lda 	#4*2
.85c2	20 ce 84	jsr $84ce			jsr 	GraphicDraw
.85c5	80 e2		bra $85a9			bra 	demo
.85c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.85c8					GXOpenBitmap:
.85c8	78		sei				sei 								; no interrupts here
.85c9	a5 00		lda $00				lda 	0 							; save original MMU Control register
.85cb	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.85ce	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.85d0	85 00		sta $00				sta 	0
.85d2	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.85d4	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.85d7	58		cli				cli
.85d8	60		rts				rts
.85d9					GXCloseBitmap:
.85d9	78		sei				sei
.85da	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.85dd	85 0b		sta $0b				sta 	GFXEditSlot
.85df	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.85e2	85 00		sta $00				sta 	0
.85e4	58		cli				cli
.85e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.85e6					GXPositionCalc:
.85e6	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.85e8	48		pha				pha
.85e9	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.85ec	85 3c		sta $3c				sta 	gsTemp
.85ee	64 3d		stz $3d				stz 	gsTemp+1
.85f0	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.85f2	26 3d		rol $3d				rol 	gsTemp+1
.85f4	06 3c		asl $3c				asl 	gsTemp
.85f6	26 3d		rol $3d				rol 	gsTemp+1
.85f8	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.85f9	65 3c		adc $3c				adc 	gsTemp
.85fb	85 3c		sta $3c				sta 	gsTemp
.85fd	90 02		bcc $8601			bcc 	_GXPCNoCarry
.85ff	e6 3d		inc $3d				inc 	gsTemp+1
.8601					_GXPCNoCarry:
.8601	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8603	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8605	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.8607	85 36		sta $36				sta 	gzTemp0
.8609	64 3d		stz $3d				stz 	gsTemp+1
.860b	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.860d					_GXPCMultiply32:
.860d	06 3c		asl $3c				asl 	gsTemp
.860f	26 3d		rol $3d				rol 	gsTemp+1
.8611	3a		dec a				dec 	a
.8612	d0 f9		bne $860d			bne 	_GXPCMultiply32
.8614	18		clc				clc
.8615	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.8618	65 3c		adc $3c				adc 	gsTemp
.861a	8d 41 06	sta $0641			sta 	gsOffset
.861d	ad 32 06	lda $0632			lda 	GXX0+1
.8620	65 3d		adc $3d				adc 	gsTemp+1
.8622	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8624	90 04		bcc $862a			bcc 	_GXPCNoOverflow
.8626	29 1f		and #$1f			and 	#$1F 						; fix it up
.8628	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.862a					_GXPCNoOverflow:
.862a	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.862c	85 3d		sta $3d				sta 	gsTemp+1
.862e	64 3c		stz $3c				stz 	gsTemp
.8630	18		clc				clc
.8631	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8633	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8636	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8638	68		pla				pla
.8639	85 36		sta $36				sta 	gzTemp0
.863b	60		rts				rts
.863c					GXMovePositionDown:
.863c	18		clc				clc 								; add 320 to offset/temp+1
.863d	ad 41 06	lda $0641			lda 	gsOffset
.8640	69 40		adc #$40			adc 	#64
.8642	8d 41 06	sta $0641			sta 	gsOffset
.8645	a5 3d		lda $3d				lda 	gsTemp+1
.8647	69 01		adc #$01			adc 	#1
.8649	85 3d		sta $3d				sta 	gsTemp+1
.864b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.864d	90 07		bcc $8656			bcc 	_GXMPDExit
.864f	38		sec				sec  								; next page
.8650	e9 20		sbc #$20			sbc 	#$20
.8652	85 3d		sta $3d				sta 	gsTemp+1
.8654	e6 0b		inc $0b				inc 	GFXEditSlot
.8656					_GXMPDExit:
.8656	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.8657					GXSortXY:
.8657	20 75 86	jsr $8675			jsr 	GXSortY 					; will be sorted on Y now
.865a	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.865d	cd 35 06	cmp $0635			cmp 	gxX1
.8660	ad 32 06	lda $0632			lda 	gXX0+1
.8663	ed 36 06	sbc $0636			sbc 	gXX1+1
.8666	90 0c		bcc $8674			bcc 	_GXSXYExit 					; X0 < X1 exit
.8668	a2 00		ldx #$00			ldx 	#0 							; swap them over
.866a	a0 04		ldy #$04			ldy 	#4
.866c	20 89 86	jsr $8689			jsr 	GXSwapXY
.866f	e8		inx				inx
.8670	c8		iny				iny
.8671	20 89 86	jsr $8689			jsr 	GXSwapXY
.8674					_GXSXYExit:
.8674	60		rts				rts
.8675					GXSortY:
.8675	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8678	cd 37 06	cmp $0637			cmp 	gxY1
.867b	90 0b		bcc $8688			bcc 	_GXSYSorted
.867d	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.867f	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8681					_GXSwap1:
.8681	20 89 86	jsr $8689			jsr 	GXSwapXY
.8684	88		dey				dey
.8685	ca		dex				dex
.8686	10 f9		bpl $8681			bpl 	_GXSwap1
.8688					_GXSYSorted:
.8688	60		rts				rts
.8689					GXSwapXY:
.8689	bd 31 06	lda $0631,x			lda 	gxX0,x
.868c	48		pha				pha
.868d	b9 31 06	lda $0631,y			lda 	gxX0,y
.8690	9d 31 06	sta $0631,x			sta 	gxX0,x
.8693	68		pla				pla
.8694	99 31 06	sta $0631,y			sta 	gxX0,y
.8697	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8698					AssembleGroup1:
.8698	a9 ff		lda #$ff			lda 	#$FF
.869a	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.869d	80 02		bra $86a1			bra 	AsmGroup12
.869f					AssembleGroup2:
.869f	a5 00		lda $00				lda 	$00
.86a1					AsmGroup12:
.86a1	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.86a4	68		pla				pla 								; pop the return address to access the information following.
.86a5	fa		plx				plx
.86a6	20 2f 87	jsr $872f			jsr 	AccessParameters 			; get opcode and save as base
.86a9	8d a4 04	sta $04a4			sta 	BaseOpcode
.86ac	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.86af	d0 08		bne $86b9			bne 	_AG12HaveMask
.86b1	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.86b3	20 37 87	jsr $8737			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.86b6	8d a5 04	sta $04a5			sta 	ModeMask
.86b9					_AG12HaveMask:
.86b9	20 72 88	jsr $8872			jsr 	TypeAndCalculateOperand 	; get zero page type
.86bc	da		phx				phx 								; save found address mode
.86bd	20 9b 87	jsr $879b			jsr 	AssembleModeX
.86c0	fa		plx				plx  								; restore address mode
.86c1	b0 0b		bcs $86ce			bcs 	_AG12Exit
.86c3	20 cf 86	jsr $86cf			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.86c6	20 9b 87	jsr $879b			jsr 	AssembleModeX
.86c9	b0 03		bcs $86ce			bcs 	_AG12Exit
.86cb	4c 8d ac	jmp $ac8d			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.86ce					_AG12Exit:
.86ce	60		rts				rts
.86cf					PromoteToAbsolute:
.86cf	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.86d1	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.86d3	f0 19		beq $86ee			beq 	_PTADo
.86d5	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.86d7	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.86d9	f0 13		beq $86ee			beq 	_PTADo
.86db	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.86dd	e0 80		cpx #$80			cpx 	#AM_ZEROY
.86df	f0 0d		beq $86ee			beq 	_PTADo
.86e1	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.86e3	e0 d1		cpx #$d1			cpx 	#AM_IND
.86e5	f0 07		beq $86ee			beq 	_PTADo
.86e7	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.86e9	e0 c0		cpx #$c0			cpx 	#AM_INDX
.86eb	f0 01		beq $86ee			beq 	_PTADo
.86ed	60		rts				rts
.86ee					_PTADo:
.86ee	aa		tax				tax
.86ef	60		rts				rts
.86f0					AssembleGroup3:
.86f0	68		pla				pla 								; get parameters, which is just the opcode.
.86f1	fa		plx				plx
.86f2	20 2f 87	jsr $872f			jsr 	AccessParameters 			; get and output opcode
.86f5	20 47 87	jsr $8747			jsr 	AssemblerWriteByte
.86f8	20 d6 88	jsr $88d6			jsr 	CalculateOperand 			; get a 16 bit operand
.86fb	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.86fe	38		sec				sec
.86ff	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8702	48		pha				pha 								; LSB in A
.8703	ad 10 04	lda $0410			lda 	NSMantissa1
.8706	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8709	aa		tax				tax 								; MSB in X
.870a	68		pla				pla
.870b	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.870c	69 7f		adc #$7f			adc 	#$7F
.870e	90 01		bcc $8711			bcc 	_AG3NoCarry
.8710	e8		inx				inx
.8711					_AG3NoCarry:
.8711	38		sec				sec 								; fix back and write out anyways.
.8712	e9 80		sbc #$80			sbc 	#$80
.8714	20 47 87	jsr $8747			jsr 	AssemblerWriteByte
.8717	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8719	f0 0a		beq $8725			beq 	_AG3Exit
.871b	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.871e	29 01		and #$01			and 	#1
.8720	f0 03		beq $8725			beq 	_AG3Exit
.8722	4c 92 ac	jmp $ac92			jmp 	RangeError 					; no, branch is out of range
.8725					_AG3Exit:
.8725	60		rts				rts
.8726					AssembleGroup4:
.8726	68		pla				pla 								; pop address
.8727	fa		plx				plx
.8728	20 2f 87	jsr $872f			jsr 	AccessParameters 			; access and get first
.872b	20 47 87	jsr $8747			jsr 	AssemblerWriteByte 			; output it.
.872e	60		rts				rts
.872f					AccessParameters:
.872f	8d a1 04	sta $04a1			sta 	ParamStart
.8732	8e a2 04	stx $04a2			stx 	ParamStart+1
.8735	a9 01		lda #$01			lda 	#1
.8737					GetParameter:
.8737	5a		phy				phy
.8738	a8		tay				tay
.8739	ad a1 04	lda $04a1			lda 	ParamStart
.873c	85 36		sta $36				sta 	zTemp0
.873e	ad a2 04	lda $04a2			lda 	ParamStart+1
.8741	85 37		sta $37				sta 	zTemp0+1
.8743	b1 36		lda ($36),y			lda 	(zTemp0),y
.8745	7a		ply				ply
.8746	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8747					AssemblerWriteByte:
.8747	48		pha			pha
.8748	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.874b	29 02		and #$02		and 	#2
.874d	f0 1b		beq $876a		beq 	_AWBNoPrint
.874f	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8752	20 85 87	jsr $8785		jsr 	PrintHex
.8755	ad 9e 04	lda $049e		lda		AssemblerAddress
.8758	20 85 87	jsr $8785		jsr 	PrintHex
.875b	a9 20		lda #$20		lda 	#' '
.875d	20 31 ae	jsr $ae31		jsr 	EXTPrintCharacter
.8760	68		pla			pla 									; print byte
.8761	48		pha			pha
.8762	20 85 87	jsr $8785		jsr 	PrintHex
.8765	a9 0d		lda #$0d		lda 	#13
.8767	20 31 ae	jsr $ae31		jsr 	EXTPrintCharacter
.876a					_AWBNoPrint:
.876a	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.876d	85 36		sta $36			sta 	zTemp0
.876f	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8772	f0 0e		beq $8782		beq 	_AWBRange
.8774	85 37		sta $37			sta 	zTemp0+1
.8776	68		pla			pla 									; write byte out
.8777	92 36		sta ($36)		sta 	(zTemp0)
.8779	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.877c	d0 03		bne $8781		bne 	_AWBNoCarry
.877e	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8781					_AWBNoCarry:
.8781	60		rts			rts
.8782					_AWBRange:
.8782	4c 92 ac	jmp $ac92		jmp 	RangeError
.8785					PrintHex:
.8785	48		pha				pha
.8786	4a		lsr a				lsr 	a
.8787	4a		lsr a				lsr 	a
.8788	4a		lsr a				lsr 	a
.8789	4a		lsr a				lsr 	a
.878a	20 8e 87	jsr $878e			jsr 	_PrintNibble
.878d	68		pla				pla
.878e					_PrintNibble:
.878e	29 0f		and #$0f			and 	#15
.8790	c9 0a		cmp #$0a			cmp 	#10
.8792	90 02		bcc $8796			bcc 	_NoShift
.8794	69 06		adc #$06			adc 	#6
.8796					_NoShift:
.8796	69 30		adc #$30			adc 	#48
.8798	4c 31 ae	jmp $ae31			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.879b					AssembleModeX:
.879b	5a		phy				phy
.879c	ad a3 04	lda $04a3			lda 	IsGroup1
.879f	f0 17		beq $87b8			beq 	_AMXGroup2
.87a1	8a		txa				txa 							; is it in group # 1
.87a2	29 40		and #$40			and 	#AM_ISG1
.87a4	f0 50		beq $87f6			beq 	_AMXFail 				; no, give up.
.87a6	8a		txa				txa 							; get back.
.87a7	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.87a9	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.87ab	d0 22		bne $87cf			bne 	_AMXHaveInfo
.87ad	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.87b0	c9 81		cmp #$81			cmp 	#$81
.87b2	f0 42		beq $87f6			beq 	_AMXFail
.87b4	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.87b6	80 17		bra $87cf			bra 	_AMXHaveInfo 			; odd design decision there.
.87b8					_AMXGroup2:
.87b8	8a		txa				txa 							; is it in group 2 ?
.87b9	29 20		and #$20			and 	#AM_ISG2
.87bb	f0 39		beq $87f6			beq 	_AMXFail 				; no, give up.
.87bd	8a		txa				txa 							; get the offset into Y
.87be	29 1f		and #$1f			and 	#$1F
.87c0	4a		lsr a				lsr 	a 						; make it 0-7.
.87c1	4a		lsr a				lsr  	a
.87c2	a8		tay				tay
.87c3	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.87c6					_AMXCheckOkay:
.87c6	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.87c7	88		dey				dey
.87c8	10 fc		bpl $87c6			bpl 	_AMXCheckOkay
.87ca	90 2a		bcc $87f6			bcc 	_AMXFail 				; not allowed.
.87cc	8a		txa				txa  							; get mask back
.87cd	29 1f		and #$1f			and 	#$1F
.87cf					_AMXHaveInfo:
.87cf	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.87d1	10 05		bpl $87d8			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.87d3	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.87d6	d0 1e		bne $87f6			bne 	_AMXFail
.87d8					_AMXAnySize:
.87d8	18		clc				clc 							; add offset to the base opcode
.87d9	6d a4 04	adc $04a4			adc 	BaseOpcode
.87dc					_AMXOutputCode:
.87dc	20 47 87	jsr $8747			jsr 	AssemblerWriteByte 		; write the opcode out.
.87df	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.87e1	f0 10		beq $87f3			beq 	_AMXExit
.87e3	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.87e6	20 47 87	jsr $8747			jsr 	AssemblerWriteByte
.87e9	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.87eb	30 06		bmi $87f3			bmi 	_AMXExit
.87ed	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.87f0	20 47 87	jsr $8747			jsr 	AssemblerWriteByte
.87f3					_AMXExit:
.87f3	7a		ply				ply
.87f4	38		sec				sec
.87f5	60		rts				rts
.87f6					_AMXFail:
.87f6	a0 00		ldy #$00			ldy 	#0
.87f8					_AMXCheckOddities:
.87f8	8a		txa				txa
.87f9	d9 21 88	cmp $8821,y			cmp 	ExtraOpcode+2,y 		; match address mode
.87fc	d0 16		bne $8814			bne 	_AMXCONext
.87fe	b9 1f 88	lda $881f,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8801	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8804	d0 0e		bne $8814			bne 	_AMXCONext
.8806	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8808	10 05		bpl $880f			bpl 	_AMXCONotZero
.880a	ad 10 04	lda $0410			lda 	NSMantissa1
.880d	d0 05		bne $8814			bne 	_AMXCONext
.880f					_AMXCONotZero:
.880f	b9 20 88	lda $8820,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8812	80 c8		bra $87dc			bra 	_AMXOutputCode 			; and assemble it
.8814					_AMXCONext:
.8814	c8		iny				iny
.8815	c8		iny				iny
.8816	c8		iny				iny
.8817	b9 1f 88	lda $881f,y			lda 	ExtraOpcode+0,y 		; end of table
.881a	d0 dc		bne $87f8			bne 	_AMXCheckOddities
.881c					_AMXCOFail:
.881c	7a		ply				ply
.881d	18		clc				clc
.881e	60		rts				rts
.881f					ExtraOpcode:
>881f	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8822	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8825	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8828	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>882b	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>882e	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8831	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8834	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8837	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>883a	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>883d	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.883e					LabelHere:
.883e	c8		iny				iny 								; skip .
.883f	a2 00		ldx #$00			ldx 	#0 							; get a term
.8841	20 47 9a	jsr $9a47			jsr 	EvaluateTerm 				; get a term
.8844	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8847	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8849	d0 24		bne $886f			bne 	_ALType
.884b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.884e	85 36		sta $36				sta 	zTemp0
.8850	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8853	85 37		sta $37				sta 	zTemp0+1
.8855	5a		phy				phy 								; copy address in.
.8856	a0 01		ldy #$01			ldy 	#1
.8858	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.885b	92 36		sta ($36)			sta 	(zTemp0)
.885d	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8860	91 36		sta ($36),y			sta 	(zTemp0),y
.8862	c8		iny				iny
.8863	a9 00		lda #$00			lda 	#0
.8865	91 36		sta ($36),y			sta 	(zTemp0),y
.8867	c8		iny				iny
.8868	91 36		sta ($36),y			sta 	(zTemp0),y
.886a	c8		iny				iny
.886b	91 36		sta ($36),y			sta 	(zTemp0),y
.886d	7a		ply				ply
.886e	60		rts				rts
.886f					_ALType:
.886f	4c 97 ac	jmp $ac97			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8872					TypeAndCalculateOperand:
.8872	b1 30		lda ($30),y			lda 	(codePtr),y
.8874	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8876	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8878	f0 5b		beq $88d5			beq 	_TACOExit
.887a	c9 80		cmp #$80			cmp 	#KWC_EOL
.887c	f0 57		beq $88d5			beq 	_TACOExit
.887e	c8		iny				iny
.887f	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8881	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8883	f0 51		beq $88d6			beq 	CalculateOperand
.8885	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8887	f0 1f		beq $88a8			beq 	_TACOIndirect
.8889	88		dey				dey 								; undo get of first character
.888a	20 d6 88	jsr $88d6			jsr 	CalculateOperand 			; get operand
.888d	b1 30		lda ($30),y			lda 	(codePtr),y
.888f	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8891	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8893	d0 40		bne $88d5			bne 	_TACOExit
.8895	c8		iny				iny
.8896	20 1e a6	jsr $a61e			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8899	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.889b	c9 58		cmp #$58			cmp 	#'X'
.889d	f0 36		beq $88d5			beq 	_TACOExit
.889f	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.88a1	c9 59		cmp #$59			cmp 	#'Y'
.88a3	f0 30		beq $88d5			beq 	_TACOExit
.88a5					_TACOSyntax:
.88a5	4c 8d ac	jmp $ac8d			jmp 	SyntaxError
.88a8					_TACOIndirect:
.88a8	20 d6 88	jsr $88d6			jsr 	CalculateOperand 			; get the operand
.88ab	b1 30		lda ($30),y			lda 	(codePtr),y
.88ad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.88af	f0 17		beq $88c8			beq 	_TACOIndX
.88b1	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.88b4	b1 30		lda ($30),y			lda 	(codePtr),y
.88b6	a2 d1		ldx #$d1			ldx 	#AM_IND
.88b8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.88ba	d0 19		bne $88d5			bne 	_TACOExit
.88bc	c8		iny				iny
.88bd	20 1e a6	jsr $a61e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.88c0	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.88c2	d0 e1		bne $88a5			bne 	_TACOSyntax
.88c4	a2 d0		ldx #$d0			ldx 	#AM_INDY
.88c6	80 0d		bra $88d5			bra 	_TACOExit
.88c8					_TACOIndX:
.88c8	c8		iny				iny
.88c9	20 1e a6	jsr $a61e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.88cc	c9 58		cmp #$58			cmp 	#'X' 						; check X
.88ce	d0 d5		bne $88a5			bne 	_TACOSyntax
.88d0	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket			; check )
.88d3	a2 c0		ldx #$c0			ldx 	#AM_INDX
.88d5					_TACOExit:
.88d5	60		rts				rts
.88d6					CalculateOperand:
.88d6	48		pha				pha
.88d7	da		phx				phx
.88d8	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.88da	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger
.88dd	fa		plx				plx
.88de	68		pla				pla
.88df	60		rts				rts
.a61e					TACOCheckXY:
.a61e	b1 30		lda ($30),y			lda 	(codePtr),y
.a620	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a622	c9 40		cmp #$40			cmp 	#$40
.a624	d0 21		bne $a647			bne 	_TCXYFail
.a626	b1 30		lda ($30),y			lda 	(codePtr),y
.a628	18		clc				clc
.a629	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a62b	85 37		sta $37				sta 	zTemp0+1
.a62d	c8		iny				iny
.a62e	b1 30		lda ($30),y			lda 	(codePtr),y
.a630	c8		iny				iny
.a631	85 36		sta $36				sta 	zTemp0
.a633	5a		phy				phy 								; save position
.a634	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a636	b1 36		lda ($36),y			lda 	(zTemp0),y
.a638	d0 0c		bne $a646			bne 	_TCXYPopFail
.a63a	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a63c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a63e	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a640	f0 08		beq $a64a			beq 	_TCXYFound
.a642	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a644	f0 04		beq $a64a			beq 	_TCXYFound
.a646					_TCXYPopFail:
.a646	7a		ply				ply
.a647					_TCXYFail:
.a647	a9 00		lda #$00			lda 	#0
.a649	60		rts				rts
.a64a					_TCXYFound:
.a64a	7a		ply				ply 								; restore position
.a64b	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a64d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.88e0					EditProgramCode:
.88e0	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.88e3	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.88e6	20 84 9f	jsr $9f84			jsr 	MemorySearch
.88e9	90 05		bcc $88f0			bcc 	_EPCNoDelete 				; reached the end don't delete
.88eb	d0 03		bne $88f0			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.88ed	20 75 ae	jsr $ae75			jsr 	MemoryDeleteLine 			; delete the line
.88f0					_EPCNoDelete:
.88f0	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.88f3	c9 80		cmp #$80			cmp 	#KWC_EOL
.88f5	f0 0d		beq $8904			beq 	_EPCNoInsert
.88f7	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.88fa	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.88fd	20 84 9f	jsr $9f84			jsr 	MemorySearch
.8900	18		clc				clc 								; insert at this point.
.8901	20 ac ae	jsr $aeac			jsr 	MemoryInsertLine 			; insert the line
.8904					_EPCNoInsert:
.8904	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8905					WarmStart:
.8905	a2 ff		ldx #$ff			ldx 	#$FF
.8907	9a		txs				txs
.8908	20 47 ae	jsr $ae47			jsr 	EXTInputLine 				; get line to lineBuffer
.890b	20 9e a3	jsr $a39e			jsr 	TokeniseLine 				; tokenise the line
.890e	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8911	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8914	d0 17		bne $892d			bne 	_WSEditCode 				; if so,edit code.
.8916	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8919	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.891b	85 30		sta $30				sta 	codePtr
.891d	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.891f	85 31		sta $31				sta 	codePtr+1
.8921	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8924	c9 80		cmp #$80			cmp 	#KWC_EOL
.8926	f0 dd		beq $8905			beq 	WarmStart
.8928	20 36 8f	jsr $8f36			jsr 	RUNCodePointerLine 			; execute that line.
.892b	80 d8		bra $8905			bra 	WarmStart
.892d					_WSEditCode:
.892d	20 e0 88	jsr $88e0			jsr 	EditProgramCode
.8930	20 9e 89	jsr $899e			jsr 	ClearCommand
.8933	80 d0		bra $8905			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8935					AssembleCommand:
.8935	a2 00		ldx #$00			ldx 	#0
.8937	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger 		; start address
.893a	ad 08 04	lda $0408			lda 	NSMantissa0
.893d	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8940	ad 10 04	lda $0410			lda 	NSMantissa1
.8943	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8946	20 af a6	jsr $a6af			jsr 	CheckComma
.8949	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger 		; options
.894c	ad 08 04	lda $0408			lda 	NSMantissa0
.894f	8d a0 04	sta $04a0			sta 	AssemblerControl
.8952	60		rts				rts
.8953	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8954					AssertCommand:
.8954	a2 00		ldx #$00			ldx 	#0
.8956	20 9c 9e	jsr $9e9c			jsr 	EvaluateInteger 			; the assert test
.8959	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; exit if result is non zero.
.895c	d0 05		bne $8963			bne 	_ACExit
.895e	a9 0a		lda #$0a		lda	#10
.8960	4c 6d 93	jmp $936d		jmp	ErrorHandler
.8963					_ACExit:
.8963	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8964					CallCommand:
.8964	a2 00		ldx #$00			ldx 	#0
.8966	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger
.8969					_CCClear
.8969	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.896a	20 25 9f	jsr $9f25			jsr 	NSMSetZero
.896d	e0 04		cpx #$04			cpx 	#4
.896f	d0 f8		bne $8969			bne 	_CCClear
.8971	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8973					_CCCParam:
.8973	b1 30		lda ($30),y			lda 	(codePtr),y
.8975	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8977	d0 09		bne $8982			bne 	_CCCRun6502
.8979	c8		iny				iny 								; skip comma
.897a	e8		inx				inx	 								; next level
.897b	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger 		; get A/X/Y
.897e	e0 03		cpx #$03			cpx 	#3
.8980	90 f1		bcc $8973			bcc 	_CCCParam 					; done all 3 ?
.8982					_CCCRun6502:
.8982	5a		phy				phy 								; save position
.8983	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8986	85 37		sta $37				sta 	zTemp0+1
.8988	ad 08 04	lda $0408			lda 	NSMantissa0
.898b	85 36		sta $36				sta 	zTemp0
.898d	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8990	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8993	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8996	20 9b 89	jsr $899b			jsr 	_CCCZTemp0 					; call zTemp0
.8999	7a		ply				ply 								; restore position and exit
.899a	60		rts				rts
.899b					_CCCZTemp0:
.899b	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.899e					ClearCommand:
.899e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.89a0	85 36		sta $36				sta 	0+zTemp0
.89a2	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.89a4	85 37		sta $37				sta 	1+zTemp0
.89a6					_ClearZeroLoop:
.89a6	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.89a8	f0 24		beq $89ce			beq 	_ClearZeroEnd
.89aa	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.89ac	a9 00		lda #$00			lda 	#0
.89ae					_ClearOneVariable:
.89ae	91 36		sta ($36),y			sta 	(zTemp0),y
.89b0	c8		iny				iny
.89b1	c0 08		cpy #$08			cpy 	#8
.89b3	d0 f9		bne $89ae			bne 	_ClearOneVariable
.89b5	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.89b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.89b9	c9 18		cmp #$18			cmp 	#NSTProcedure
.89bb	d0 04		bne $89c1			bne 	_ClearNotProcedure
.89bd	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.89bf	91 36		sta ($36),y			sta 	(zTemp0),y
.89c1					_ClearNotProcedure:
.89c1	18		clc				clc 								; go to the next variable
.89c2	b2 36		lda ($36)			lda 	(zTemp0)
.89c4	65 36		adc $36				adc 	zTemp0
.89c6	85 36		sta $36				sta 	zTemp0
.89c8	90 dc		bcc $89a6			bcc 	_ClearZeroLoop
.89ca	e6 37		inc $37				inc 	zTemp0+1
.89cc	80 d8		bra $89a6			bra 	_ClearZeroLoop
.89ce					_ClearZeroEnd:
.89ce	18		clc				clc
.89cf	a5 36		lda $36				lda 	zTemp0
.89d1	69 01		adc #$01			adc 	#1
.89d3	8d 8c 04	sta $048c			sta 	lowMemPtr
.89d6	a5 37		lda $37				lda 	zTemp0+1
.89d8	69 00		adc #$00			adc 	#0
.89da	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.89dd	20 3e a0	jsr $a03e			jsr 	StackReset
.89e0	20 8f af	jsr $af8f			jsr 	StringSystemInitialise
.89e3	20 8d 92	jsr $928d			jsr 	ProcedureScan
.89e6	20 f2 8e	jsr $8ef2			jsr 	Command_Restore
.89e9	9c 9e 04	stz $049e			stz 	AssemblerAddress
.89ec	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.89ef	9c a0 04	stz $04a0			stz 	AssemblerControl
.89f2	20 34 9c	jsr $9c34			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.89f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.89f6					Command_Data:
.89f6	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.89f8	a2 80		ldx #$80			ldx 	#KWC_EOL
.89fa	20 df 92	jsr $92df			jsr 	ScanForward
.89fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.89fe					DimCommand:
.89fe	b1 30		lda ($30),y			lda 	(codePtr),y
.8a00	29 c0		and #$c0			and 	#$C0
.8a02	c9 40		cmp #$40			cmp 	#$40
.8a04	d0 7a		bne $8a80			bne 	_DCSyntax
.8a06	b1 30		lda ($30),y			lda 	(codePtr),y
.8a08	18		clc				clc
.8a09	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a0b	85 3f		sta $3f				sta 	zaTemp+1
.8a0d	c8		iny				iny
.8a0e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a10	c8		iny				iny
.8a11	85 3e		sta $3e				sta 	zaTemp
.8a13	5a		phy				phy
.8a14	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8a16	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a18	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8a1a	c9 18		cmp #$18			cmp 	#NSTProcedure
.8a1c	f0 62		beq $8a80			beq 	_DCSyntax
.8a1e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8a20	29 04		and #$04			and 	#NSBIsArray
.8a22	f0 64		beq $8a88			beq 	_DCType
.8a24	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8a26	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a28	d0 59		bne $8a83			bne 	_DCRedefine
.8a2a	7a		ply				ply
.8a2b	20 8b 8a	jsr $8a8b			jsr 	_DCGetSize 				; get array size, check it.
.8a2e	5a		phy				phy
.8a2f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8a31	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8a33	7a		ply				ply 							; is there a second (e.g. ,x)
.8a34	b1 30		lda ($30),y			lda 	(codePtr),y
.8a36	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a38	d0 0a		bne $8a44			bne 	_DCOneDimension
.8a3a	c8		iny				iny 							; skip comma
.8a3b	20 8b 8a	jsr $8a8b			jsr 	_DCGetSize 				; get 2nd array size
.8a3e	5a		phy				phy
.8a3f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8a41	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a43	7a		ply				ply
.8a44					_DCOneDimension:
.8a44	5a		phy				phy 							; save position
.8a45	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8a47	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a49	aa		tax				tax
.8a4a	c8		iny				iny
.8a4b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a4d	e8		inx				inx 							; bump them.
.8a4e	1a		inc a				inc 	a
.8a4f	20 29 ab	jsr $ab29			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8a52	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8a54	29 e0		and #$e0			and 	#$E0
.8a56	d0 23		bne $8a7b			bne 	_DCSize
.8a58	a0 02		ldy #$02			ldy 	#2 						; get base type
.8a5a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a5c	20 99 8a	jsr $8a99			jsr 	ScaleByBaseType 		; scale by base type
.8a5f	a5 36		lda $36				lda 	zTemp0
.8a61	a6 37		ldx $37				ldx 	zTemp0+1
.8a63	20 f6 9b	jsr $9bf6			jsr 	AllocateXABytes 		; allocate memory
.8a66	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8a68	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a6a	c8		iny				iny
.8a6b	8a		txa				txa
.8a6c	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a6e	7a		ply				ply 							; get position back
.8a6f	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 		; check )
.8a72	b1 30		lda ($30),y			lda 	(codePtr),y
.8a74	c8		iny				iny 							; consume in case
.8a75	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8a77	f0 85		beq $89fe			beq 	DimCommand
.8a79	88		dey				dey 							; undo consume
.8a7a	60		rts				rts
.8a7b					_DCSize:
.8a7b	a9 16		lda #$16		lda	#22
.8a7d	4c 6d 93	jmp $936d		jmp	ErrorHandler
.8a80					_DCSyntax:
.8a80	4c 8d ac	jmp $ac8d			jmp 	SyntaxError
.8a83					_DCRedefine:
.8a83	a9 15		lda #$15		lda	#21
.8a85	4c 6d 93	jmp $936d		jmp	ErrorHandler
.8a88					_DCType:
.8a88	4c 97 ac	jmp $ac97			jmp 	TypeError
.8a8b					_DCGetSize:
.8a8b	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8a8d	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger 	; get array dimension
.8a90	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8a92	f0 e7		beq $8a7b			beq 	_DCSize
.8a94	c9 fe		cmp #$fe			cmp 	#254
.8a96	f0 e3		beq $8a7b			beq 	_DCSize
.8a98	60		rts				rts
.8a99					ScaleByBaseType:
.8a99	29 10		and #$10			and 	#NSBIsString 			; is it string
.8a9b	d0 19		bne $8ab6			bne 	_SBBTString
.8a9d	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8a9f	48		pha				pha
.8aa0	a5 36		lda $36				lda 	zTemp0
.8aa2	48		pha				pha
.8aa3	06 36		asl $36				asl 	zTemp0 					; x 2
.8aa5	26 37		rol $37				rol 	zTemp0+1
.8aa7	06 36		asl $36				asl 	zTemp0 					; x 4
.8aa9	26 37		rol $37				rol 	zTemp0+1
.8aab	68		pla				pla 							; add stacked value = x 5
.8aac	65 36		adc $36				adc 	zTemp0
.8aae	85 36		sta $36				sta 	zTemp0
.8ab0	68		pla				pla
.8ab1	65 37		adc $37				adc 	zTemp0+1
.8ab3	85 37		sta $37				sta 	zTemp0+1
.8ab5	60		rts				rts
.8ab6					_SBBTString:
.8ab6	06 36		asl $36				asl 	zTemp0
.8ab8	26 37		rol $37				rol 	zTemp0+1
.8aba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8abb					EndCommand:
.8abb	4c 05 89	jmp $8905			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8abe					ForCommand:
.8abe	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8ac0	20 d9 9f	jsr $9fd9			jsr 	StackOpen
.8ac3	a2 00		ldx #$00			ldx 	#0
.8ac5	20 47 9a	jsr $9a47			jsr 	EvaluateTerm
.8ac8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8acb	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8acd	d0 49		bne $8b18			bne		_FCError
.8acf	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8ad1	20 b7 a6	jsr $a6b7			jsr 	CheckNextA
.8ad4	e8		inx				inx
.8ad5	20 9c 9e	jsr $9e9c			jsr 	EvaluateInteger 			; <from> in +1
.8ad8	b1 30		lda ($30),y			lda 	(codePtr),y
.8ada	c8		iny				iny 								; consume it
.8adb	48		pha				pha 								; save on stack for later
.8adc	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8ade	f0 04		beq $8ae4			beq 	_FCNoSyntax
.8ae0	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8ae2	d0 37		bne $8b1b			bne 	_FCSyntaxError
.8ae4					_FCNoSyntax:
.8ae4	e8		inx				inx
.8ae5	20 9c 9e	jsr $9e9c			jsr 	EvaluateInteger
.8ae8	20 1d a0	jsr $a01d			jsr 	STKSaveCodePosition 		; save loop back position
.8aeb	68		pla				pla 								; restore DOWNTO or TO
.8aec	5a		phy				phy 								; save Y on the stack
.8aed	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8aef	f0 02		beq $8af3			beq 	_FCNotDownTo
.8af1	a9 02		lda #$02			lda 	#2
.8af3					_FCNotDownTo:
.8af3	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8af4	a0 10		ldy #$10			ldy 	#16
.8af6	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8af8	a0 06		ldy #$06			ldy 	#6
.8afa	ad 08 04	lda $0408			lda 	NSMantissa0
.8afd	91 34		sta ($34),y			sta 	(basicStack),y
.8aff	ad 10 04	lda $0410			lda 	NSMantissa1
.8b02	c8		iny				iny
.8b03	91 34		sta ($34),y			sta 	(basicStack),y
.8b05	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8b07	a2 01		ldx #$01			ldx 	#1
.8b09	20 1e 8b	jsr $8b1e			jsr 	FCIntegerToStack
.8b0c	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8b0e	a2 02		ldx #$02			ldx 	#2
.8b10	20 1e 8b	jsr $8b1e			jsr 	FCIntegerToStack
.8b13	20 3e 8b	jsr $8b3e			jsr 	CopyIndexToReference
.8b16	7a		ply				ply 								; restore position
.8b17	60		rts				rts
.8b18					_FCError:
.8b18	4c 97 ac	jmp $ac97			jmp 	TypeError
.8b1b					_FCSyntaxError:
.8b1b	4c 8d ac	jmp $ac8d			jmp 	SyntaxError
.8b1e					FCIntegerToStack:
.8b1e	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8b21	10 03		bpl $8b26			bpl	 	_FCNotNegative
.8b23	20 da 9e	jsr $9eda			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8b26					_FCNotNegative:
.8b26	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8b29	91 34		sta ($34),y			sta 	(basicStack),y
.8b2b	c8		iny				iny
.8b2c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b2f	91 34		sta ($34),y			sta 	(basicStack),y
.8b31	c8		iny				iny
.8b32	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8b35	91 34		sta ($34),y			sta 	(basicStack),y
.8b37	c8		iny				iny
.8b38	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8b3b	91 34		sta ($34),y			sta 	(basicStack),y
.8b3d	60		rts				rts
.8b3e					CopyIndexToReference:
.8b3e	5a		phy				phy
.8b3f	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8b41	38		sec				sec 								; (because we copy from offset 8)
.8b42	b1 34		lda ($34),y			lda 	(basicStack),y
.8b44	e9 08		sbc #$08			sbc 	#8
.8b46	85 36		sta $36				sta 	zTemp0
.8b48	c8		iny				iny
.8b49	b1 34		lda ($34),y			lda 	(basicStack),y
.8b4b	e9 00		sbc #$00			sbc 	#0
.8b4d	85 37		sta $37				sta 	zTemp0+1
.8b4f	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8b51	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8b53	b1 34		lda ($34),y			lda 	(basicStack),y
.8b55	0a		asl a				asl 	a 							; into carry
.8b56	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8b58	90 14		bcc $8b6e			bcc 	_CITRNormal
.8b5a	38		sec				sec
.8b5b					_CITRNegative:
.8b5b	a9 00		lda #$00			lda 	#0
.8b5d	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8b5f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b61	c8		iny				iny
.8b62	ca		dex				dex
.8b63	d0 f6		bne $8b5b			bne 	_CITRNegative
.8b65	88		dey				dey 								; look at MSB of mantissa
.8b66	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8b68	09 80		ora #$80			ora 	#$80
.8b6a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6c	7a		ply				ply
.8b6d	60		rts				rts
.8b6e					_CITRNormal:
.8b6e	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8b70	91 36		sta ($36),y			sta 	(zTemp0),y
.8b72	c8		iny				iny
.8b73	ca		dex				dex
.8b74	d0 f8		bne $8b6e			bne 	_CITRNormal
.8b76	7a		ply				ply 								; and exit.
.8b77	60		rts				rts
.8b78					NextCommand:
.8b78	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8b7a	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8b7c	20 05 a0	jsr $a005			jsr 	StackCheckFrame
.8b7f	5a		phy				phy
.8b80	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8b82	b1 34		lda ($34),y			lda 	(basicStack),y
.8b84	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8b86	30 02		bmi $8b8a			bmi 	_NCStepNeg
.8b88	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8b8a					_NCStepNeg:
.8b8a	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8b8c	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8b8e	18		clc				clc
.8b8f					_NCBump:
.8b8f	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8b91	91 34		sta ($34),y			sta 	(basicStack),y
.8b93	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8b95	c8		iny				iny 								; next byte
.8b96	ca		dex				dex 								; do four times
.8b97	d0 f6		bne $8b8f			bne 	_NCBump
.8b99	20 3e 8b	jsr $8b3e			jsr		CopyIndexToReference		; copy it to the reference variable.
.8b9c	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8b9e	b1 34		lda ($34),y			lda 	(basicStack),y
.8ba0	0a		asl a				asl 	a 							; sign bit to carry
.8ba1	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ba3	85 38		sta $38				sta 	zTemp1
.8ba5	90 02		bcc $8ba9			bcc 	_NCCompRev 					; use if step is +ve
.8ba7	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8ba9					_NCCompRev:
.8ba9	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8bab	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8bad	85 39		sta $39				sta 	zTemp1+1
.8baf	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8bb1	38		sec				sec
.8bb2					_NCCompare:
.8bb2	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8bb4	b1 34		lda ($34),y			lda 	(basicStack),y
.8bb6	a4 39		ldy $39				ldy 	zTemp1+1
.8bb8	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8bba	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8bbc	e6 39		inc $39				inc 	zTemp1+1
.8bbe	ca		dex				dex 								; do it 4 times.
.8bbf	d0 f1		bne $8bb2			bne 	_NCCompare
.8bc1	50 02		bvc $8bc5			bvc 	_NCNoOverflow 				; convert to signed comparison
.8bc3	49 80		eor #$80			eor 	#$80
.8bc5					_NCNoOverflow:
.8bc5	7a		ply				ply 								; restore Y position
.8bc6	0a		asl a				asl 	a 							; is bit 7 set.
.8bc7	90 04		bcc $8bcd			bcc 	_NCLoopback 				; if no , >= so loop back
.8bc9	20 f7 9f	jsr $9ff7			jsr 	StackClose 					; exit the loop
.8bcc	60		rts				rts
.8bcd					_NCLoopBack:
.8bcd	20 2e a0	jsr $a02e			jsr 	STKLoadCodePosition 		; loop back
.8bd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8bd1					Command_GOSUB:
.8bd1	a2 00		ldx #$00			ldx 	#0
.8bd3	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8bd6	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8bd8	20 d9 9f	jsr $9fd9			jsr 	StackOpen 					; create frame
.8bdb	20 1d a0	jsr $a01d			jsr 	STKSaveCodePosition 		; save current position
.8bde	4c f4 8b	jmp $8bf4			jmp 	GotoStackX
.8be1					Command_RETURN:
.8be1	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8be3	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8be5	20 05 a0	jsr $a005			jsr 	StackCheckFrame
.8be8	20 2e a0	jsr $a02e			jsr 	STKLoadCodePosition 		; restore code position
.8beb	20 f7 9f	jsr $9ff7			jsr 	StackClose
.8bee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8bef					GotoCommand:
.8bef	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8bf1	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger
.8bf4					GotoStackX:
.8bf4	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8bf7	48		pha				pha 								; it is slightly inefficient, just in cases.
.8bf8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8bfb	fa		plx				plx
.8bfc	20 84 9f	jsr $9f84			jsr 	MemorySearch 				; transfer to line number AX.
.8bff	90 05		bcc $8c06			bcc 	_GotoError 					; not found, off end.
.8c01	d0 03		bne $8c06			bne 	_GotoError 					; not found exactly
.8c03	4c 2f 8f	jmp $8f2f			jmp 	RunNewLine 					; and go straight to new line code.
.8c06					_GotoError:
.8c06	a9 0d		lda #$0d		lda	#13
.8c08	4c 6d 93	jmp $936d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8c0b					IfCommand:
.8c0b	a2 00		ldx #$00			ldx 	#0 							; If what.
.8c0d	20 79 9e	jsr $9e79			jsr 	EvaluateNumber
.8c10	b1 30		lda ($30),y			lda 	(codePtr),y
.8c12	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8c14	d0 0a		bne $8c20			bne 	_IFStructured
.8c16	c8		iny				iny 								; consume THEN
.8c17	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; is it zero
.8c1a	f0 01		beq $8c1d			beq 	_IfFail 					; if fail, go to next line
.8c1c	60		rts				rts 								; if THEN just continue
.8c1d					_IfFail:
.8c1d	4c 94 8f	jmp $8f94			jmp 	EOLCommand
.8c20					_IfStructured:
.8c20	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; is it zero
.8c23	d0 07		bne $8c2c			bne 	_IfExit 					; if not, then continue normally.
.8c25	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8c27	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8c29	20 df 92	jsr $92df			jsr 	ScanForward 				; and run from there/
.8c2c					_IfExit:
.8c2c	60		rts				rts
.8c2d					ElseCode:
.8c2d	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8c2f	aa		tax				tax 								; so just go to the structure exit
.8c30	20 df 92	jsr $92df			jsr 	ScanForward
.8c33	60		rts				rts
.8c34					EndIf:
.8c34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8c35					LetCommand:
.8c35	a2 00		ldx #$00			ldx 	#0
.8c37	b1 30		lda ($30),y			lda 	(codePtr),y
.8c39	c9 10		cmp #$10			cmp 	#KWD_AT
.8c3b	d0 16		bne $8c53			bne 	_LCStandard
.8c3d	c8		iny				iny 								; skip equal
.8c3e	20 47 9a	jsr $9a47			jsr 	EvaluateTerm 				; get a number
.8c41	20 8b 98	jsr $988b			jsr 	Dereference 				; dereference it
.8c44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8c47	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8c49	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8c4c	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8c4e	d0 10		bne $8c60			bne 	_LCMain
.8c50	4c 97 ac	jmp $ac97			jmp 	TypeError 					; was a reference before.
.8c53					_LCStandard:
.8c53	ad 5e 97	lda $975e			lda 	PrecedenceLevel+"*"			; precedence > this
.8c56	20 78 97	jsr $9778			jsr 	EvaluateExpressionAtPrecedence
.8c59	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8c5c	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8c5e	f0 0e		beq $8c6e			beq 	_LetGoProc 					; it's a procedure call.
.8c60					_LCMain:
.8c60	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8c62	20 b7 a6	jsr $a6b7			jsr 	CheckNextA
.8c65	e8		inx				inx 								; RHS
.8c66	20 70 9e	jsr $9e70			jsr 	EvaluateValue
.8c69	ca		dex				dex
.8c6a	20 71 8c	jsr $8c71			jsr 	AssignVariable
.8c6d	60		rts				rts
.8c6e					_LetGoProc:
.8c6e	4c 0a 8e	jmp $8e0a			jmp 	CallProcedure
.8c71					AssignVariable:
.8c71	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c74	48		pha				pha 								; save a copy
.8c75	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8c78	29 10		and #$10			and 	#NSBIsString
.8c7a	d0 0b		bne $8c87			bne 	_ASError
.8c7c	68		pla				pla 								; get back
.8c7d	29 10		and #$10			and 	#NSBIsString 				; check type
.8c7f	d0 03		bne $8c84			bne 	_ASString
.8c81	4c b3 97	jmp $97b3			jmp 	AssignNumber
.8c84					_ASString:
.8c84	4c 21 98	jmp $9821			jmp 	AssignString
.8c87					_ASError:
.8c87	4c 97 ac	jmp $ac97			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c8a					Command_List:
.8c8a	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c8d	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8c90	a9 ff		lda #$ff			lda 	#$FF
.8c92	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8c95	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8c98	b1 30		lda ($30),y			lda 	(codePtr),y
.8c9a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c9c	f0 1e		beq $8cbc			beq 	_CLSecond
.8c9e	20 1a 8d	jsr $8d1a			jsr 	CLIsDigit 					; if not digit, list all
.8ca1	b0 24		bcs $8cc7			bcs 	_CLStart
.8ca3	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8ca5	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger
.8ca8	b1 30		lda ($30),y			lda 	(codePtr),y
.8caa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cac	f0 0e		beq $8cbc			beq 	_CLSecond 					; if so go get it
.8cae	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8cb1	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8cb4	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8cb7	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8cba	80 0b		bra $8cc7			bra 	_CLStart
.8cbc					_CLSecond:
.8cbc	c8		iny				iny 								; consume comma
.8cbd	20 1a 8d	jsr $8d1a			jsr 	CLIsDigit 					; digit found
.8cc0	b0 05		bcs $8cc7			bcs 	_CLStart 					; if not, continue listing
.8cc2	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8cc4	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger
.8cc7					_CLStart
.8cc7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cc9	85 30		sta $30				sta 	codePtr
.8ccb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ccd	85 31		sta $31				sta 	codePtr+1
.8ccf					_CLLoop:
.8ccf	20 72 ae	jsr $ae72			jsr 	EXTBreakCheck 				; break check
.8cd2	f0 30		beq $8d04			beq 	_CLExit
.8cd4	b2 30		lda ($30)			lda 	(codePtr)
.8cd6	f0 2c		beq $8d04			beq 	_CLExit
.8cd8	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8cda	20 07 8d	jsr $8d07			jsr 	CLCompareLineNo
.8cdd	90 18		bcc $8cf7			bcc 	_CLNext
.8cdf	a2 07		ldx #$07			ldx 	#7
.8ce1	20 07 8d	jsr $8d07			jsr 	CLCompareLineNo
.8ce4	f0 02		beq $8ce8			beq 	_CLDoThisOne
.8ce6	b0 0f		bcs $8cf7			bcs 	_CLNext
.8ce8					_CLDoThisOne:
.8ce8	20 3b 91	jsr $913b			jsr 	ListConvertLine 			; convert line into token Buffer
.8ceb	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ced	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8cef	20 c6 93	jsr $93c6			jsr 	PrintStringXA
.8cf2	a9 0d		lda #$0d			lda 	#13 						; new line
.8cf4	20 31 ae	jsr $ae31			jsr 	EXTPrintCharacter
.8cf7					_CLNext:
.8cf7	18		clc				clc
.8cf8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cfa	65 30		adc $30				adc 	codePtr
.8cfc	85 30		sta $30				sta 	codePtr
.8cfe	90 02		bcc $8d02			bcc 	_CREExit
.8d00	e6 31		inc $31				inc 	codePtr+1
.8d02					_CREExit:
.8d02	80 cb		bra $8ccf			bra 	_CLLoop
.8d04					_CLExit:
.8d04	4c 05 89	jmp $8905			jmp 	WarmStart
.8d07					CLCompareLineNo:
.8d07	38		sec				sec
.8d08	a0 01		ldy #$01			ldy 	#1
.8d0a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0c	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8d0f	85 36		sta $36				sta 	zTemp0
.8d11	c8		iny				iny
.8d12	b1 30		lda ($30),y			lda 	(codePtr),y
.8d14	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8d17	05 36		ora $36				ora 	zTemp0
.8d19	60		rts				rts
.8d1a					CLIsDigit:
.8d1a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d1c	c9 30		cmp #$30			cmp 	#"0"
.8d1e	90 03		bcc $8d23			bcc	 	_CLIDExitFalse
.8d20	c9 3a		cmp #$3a			cmp 	#"9"+1
.8d22	60		rts				rts
.8d23					_CLIDExitFalse:
.8d23	38		sec				sec
.8d24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d25					Command_LOCAL:
.8d25	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d27	20 33 8d	jsr $8d33			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d2a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2c	c8		iny				iny
.8d2d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d2f	f0 f4		beq $8d25			beq 	Command_LOCAL
.8d31	88		dey				dey 								; unpick pre-get
.8d32	60		rts				rts
.8d33					LocaliseNextTerm:
.8d33	20 47 9a	jsr $9a47			jsr 	EvaluateTerm 				; evaluate the term
.8d36	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d39	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8d3b	f0 69		beq $8da6			beq		_LNTError
.8d3d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d40	85 36		sta $36				sta 	zTemp0
.8d42	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d45	85 37		sta $37				sta  	zTemp0+1
.8d47	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d4a	29 10		and #$10			and 	#NSBIsString
.8d4c	d0 22		bne $8d70			bne 	_LNTPushString
.8d4e	5a		phy				phy
.8d4f	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d51					_LNTPushNumLoop:
.8d51	b1 36		lda ($36),y			lda		(zTemp0),y
.8d53	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d56	a9 00		lda #$00			lda 	#0
.8d58	91 36		sta ($36),y			sta 	(zTemp0),y
.8d5a	c8		iny				iny
.8d5b	c0 05		cpy #$05			cpy 	#5
.8d5d	d0 f2		bne $8d51			bne 	_LNTPushNumLoop
.8d5f	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d61	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d64	a5 37		lda $37				lda 	zTemp0+1
.8d66	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d69	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d6b	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d6e	7a		ply				ply
.8d6f	60		rts				rts
.8d70					_LNTPushString:
.8d70	5a		phy				phy
.8d71	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d73	85 38		sta $38				sta 	zTemp1
.8d75	a0 01		ldy #$01			ldy 	#1
.8d77	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d79	85 39		sta $39				sta 	zTemp1+1
.8d7b	a0 00		ldy #$00			ldy 	#0 							; output string
.8d7d	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8d7f	f0 0a		beq $8d8b			beq 	_LNTStringOut
.8d81					_LNTPushStrLoop:
.8d81	b1 38		lda ($38),y			lda 	(zTemp1),y
.8d83	f0 06		beq $8d8b			beq 	_LNTStringOut
.8d85	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d88	c8		iny				iny
.8d89	80 f6		bra $8d81			bra 	_LNTPushStrLoop
.8d8b					_LNTStringOut:
.8d8b	98		tya				tya									; output length
.8d8c	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d8f	a9 00		lda #$00			lda 	#0 							; clear original string.
.8d91	92 38		sta ($38)			sta 	(zTemp1)
.8d93	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d96	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d99	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d9c	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8d9f	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8da1	20 b7 9f	jsr $9fb7			jsr 	StackPushByte
.8da4	7a		ply				ply
.8da5	60		rts				rts
.8da6					_LNTError:
.8da6	4c 8d ac	jmp $ac8d			jmp 	SyntaxError
.a64e					LocalPopValue:
.a64e	20 d0 9f	jsr $9fd0			jsr 	StackPopByte
.a651	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a653	d0 17		bne $a66c			bne 	_LPVString
.a655	20 d0 9f	jsr $9fd0			jsr 	StackPopByte 				; address
.a658	85 37		sta $37				sta 	zTemp0+1
.a65a	20 d0 9f	jsr $9fd0			jsr 	StackPopByte
.a65d	85 36		sta $36				sta 	zTemp0
.a65f	5a		phy				phy
.a660	a0 04		ldy #$04			ldy 	#4 							; copy back
.a662					_LPVNumberCopy:
.a662	20 d0 9f	jsr $9fd0			jsr 	StackPopByte
.a665	91 36		sta ($36),y			sta 	(zTemp0),y
.a667	88		dey				dey
.a668	10 f8		bpl $a662			bpl 	_LPVNumberCopy
.a66a	7a		ply				ply 								; and complete
.a66b	60		rts				rts
.a66c					_LPVString:
.a66c	20 d0 9f	jsr $9fd0			jsr 	StackPopByte 				; address of record => zTemp0
.a66f	85 37		sta $37				sta 	zTemp0+1
.a671	20 d0 9f	jsr $9fd0			jsr 	StackPopByte
.a674	85 36		sta $36				sta 	zTemp0
.a676	5a		phy				phy
.a677	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a679	85 38		sta $38				sta 	zTemp1
.a67b	a0 01		ldy #$01			ldy 	#1
.a67d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a67f	85 39		sta $39				sta 	zTemp1+1
.a681	20 d0 9f	jsr $9fd0			jsr 	StackPopByte 				; # to get => y
.a684	a8		tay				tay
.a685	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a687	f0 0e		beq $a697			beq 	_LPVStringCopied
.a689	a9 00		lda #$00			lda 	#0 							; NULL on end
.a68b	91 38		sta ($38),y			sta 	(zTemp1),y
.a68d					_LPVStringCopy:
.a68d	88		dey				dey
.a68e	30 07		bmi $a697			bmi 	_LPVStringCopied
.a690	20 d0 9f	jsr $9fd0			jsr 	StackPopByte
.a693	91 38		sta ($38),y			sta 	(zTemp1),y
.a695	80 f6		bra $a68d			bra 	_LPVStringCopy
.a697					_LPVStringCopied:
.a697	fa		plx				plx
.a698	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8da9					NewCommand:
.8da9	20 62 9f	jsr $9f62			jsr 	MemoryNew
.8dac	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8daf	20 9e 89	jsr $899e			jsr 	ClearCommand 				; clear everything.
.8db2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8db3					Command_Print:
.8db3	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8db4					_CPLoop:
.8db4	08		php				php 								; save last action flag
.8db5	b1 30		lda ($30),y			lda 	(codePtr),y
.8db7	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8db9	f0 46		beq $8e01			beq 	_CPExit
.8dbb	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8dbd	f0 42		beq $8e01			beq 	_CPExit
.8dbf	68		pla				pla 								; throw last action flag
.8dc0	b1 30		lda ($30),y			lda 	(codePtr),y
.8dc2	c8		iny				iny
.8dc3	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8dc5	f0 37		beq $8dfe			beq 	_CPContinueWithSameLine
.8dc7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8dc9	f0 2e		beq $8df9			beq 	_CPTab
.8dcb	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8dcd	f0 26		beq $8df5			beq 	_CPNewLine
.8dcf	88		dey				dey 								; undo the get.
.8dd0	a2 00		ldx #$00			ldx 	#0
.8dd2	20 70 9e	jsr $9e70			jsr 	EvaluateValue 				; get a value into slot 0
.8dd5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8dd8	29 10		and #$10			and 	#NSBIsString
.8dda	f0 0b		beq $8de7			beq 	_CPNumber
.8ddc	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8ddf	ad 08 04	lda $0408			lda 	NSMantissa0
.8de2	20 c6 93	jsr $93c6			jsr 	PrintStringXA
.8de5	80 cc		bra $8db3			bra 	Command_Print 				; loop round clearing carry so NL if end
.8de7					_CPNumber:
.8de7	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8de9	20 46 9d	jsr $9d46			jsr 	ConvertNumberToString 		; convert to string
.8dec	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8dee	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8df0	20 c6 93	jsr $93c6			jsr 	PrintStringXA
.8df3	80 be		bra $8db3			bra 	Command_Print 				; loop round clearing carry so NL if end
.8df5					_CPNewLine:
.8df5	a9 0d		lda #$0d			lda 	#13
.8df7	80 02		bra $8dfb			bra 	_CPPrintChar
.8df9					_CPTab:
.8df9	a9 09		lda #$09			lda 	#9 							; print TAB
.8dfb					_CPPrintChar:
.8dfb	20 31 ae	jsr $ae31			jsr 	EXTPrintCharacter
.8dfe					_CPContinueWithSameLine:
.8dfe	38		sec				sec 								; loop round with carry set, which
.8dff	80 b3		bra $8db4			bra 	_CPLoop 					; will inhibit final CR
.8e01					_CPExit:
.8e01	28		plp				plp 								; get last action flag
.8e02	b0 05		bcs $8e09			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e04	a9 0d		lda #$0d			lda 	#13 						; print new line
.8e06	20 31 ae	jsr $ae31			jsr 	EXTPrintCharacter
.8e09					_CPExit2:
.8e09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8e0a					CallProcedure:
.8e0a	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e0c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e0e	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e10	f0 0c		beq $8e1e			beq 	_CPEndParam
.8e12					_CPParamLoop:
.8e12	20 76 97	jsr $9776			jsr 	EvaluateExpression 			; get parameter onto stack
.8e15	e8		inx				inx 								; bump next stack
.8e16	b1 30		lda ($30),y			lda 	(codePtr),y
.8e18	c8		iny				iny
.8e19	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e1b	f0 f5		beq $8e12			beq 	_CPParamLoop
.8e1d	88		dey				dey 								; unpick.
.8e1e					_CPEndParam:
.8e1e	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8e21	c8		iny				iny									; skip right bracket
.8e22	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e24	20 d9 9f	jsr $9fd9			jsr 	StackOpen
.8e27	20 1d a0	jsr $a01d			jsr 	STKSaveCodePosition 		; save loop position
.8e2a	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e2d	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e2f	ad 10 04	lda $0410			lda 	NSMantissa1
.8e32	85 37		sta $37				sta 	zTemp0+1
.8e34	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e36	b2 36		lda ($36)			lda 	(zTemp0)
.8e38	85 30		sta $30				sta 	safePtr
.8e3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e3c	85 31		sta $31				sta 	safePtr+1
.8e3e	c8		iny				iny
.8e3f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e41	85 32		sta $32				sta 	safePtr+2
.8e43	c8		iny				iny
.8e44	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e46	85 33		sta $33				sta 	safePtr+3
.8e48	c8		iny				iny 								; get Y offset -> Y
.8e49	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4b	a8		tay				tay
.8e4c	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e4e	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8e51	f0 13		beq $8e66			beq 	_ParamExit 					; if so, exit.
.8e53					_ParamExtract:
.8e53	ca		dex				dex 								; put a local term on the level before
.8e54	20 33 8d	jsr $8d33			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e57	20 71 8c	jsr $8c71			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e5a	e8		inx				inx 								; advance to next parameter to do.
.8e5b	e8		inx				inx
.8e5c	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8e5f	f0 05		beq $8e66			beq 	_ParamExit
.8e61	20 af a6	jsr $a6af			jsr 	CheckComma 					; comma seperating parameters
.8e64	80 ed		bra $8e53			bra 	_ParamExtract
.8e66					_ParamExit:
.8e66	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 			; check )
.8e69	60		rts				rts 								; and continue from here
.a699					Command_ENDPROC:
.a699	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a69b	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a69d	20 05 a0	jsr $a005			jsr 	StackCheckFrame
.a6a0	20 2e a0	jsr $a02e			jsr 	STKLoadCodePosition 		; restore code position
.a6a3	20 f7 9f	jsr $9ff7			jsr 	StackClose
.a6a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e6a					Command_Read:
.8e6a	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e6c	20 47 9a	jsr $9a47			jsr 	EvaluateTerm
.8e6f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e72	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8e74	f0 4a		beq $8ec0			beq 	_CRSyntax 					; check reference (bit 0)
.8e76	20 09 8f	jsr $8f09			jsr 	SwapDataCodePtrs 			; swap code and data
.8e79	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8e7c	d0 20		bne $8e9e			bne 	_CRContinueData
.8e7e					_CRKeepSearching:
.8e7e	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8e80	aa		tax				tax
.8e81	20 df 92	jsr $92df			jsr 	ScanForward
.8e84	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8e86	f0 16		beq $8e9e			beq 	_CRHaveData 				; found it
.8e88	18		clc				clc
.8e89	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8e8b	65 30		adc $30				adc 	codePtr
.8e8d	85 30		sta $30				sta 	codePtr
.8e8f	90 02		bcc $8e93			bcc 	_CREExit
.8e91	e6 31		inc $31				inc 	codePtr+1
.8e93					_CREExit:
.8e93	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8e95	b2 30		lda ($30)			lda 	(codePtr)
.8e97	d0 e5		bne $8e7e			bne 	_CRKeepSearching
.8e99	a9 0b		lda #$0b		lda	#11
.8e9b	4c 6d 93	jmp $936d		jmp	ErrorHandler
.8e9e					_CRHaveData:
.8e9e					_CRContinueData:
.8e9e	a2 01		ldx #$01			ldx 	#1
.8ea0	20 70 9e	jsr $9e70			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8ea3	ca		dex				dex
.8ea4	20 71 8c	jsr $8c71			jsr		AssignVariable 				; do the assignment
.8ea7	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8eaa	b1 30		lda ($30),y			lda 	(codePtr),y
.8eac	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8eae	d0 04		bne $8eb4			bne 	_CRSwapBack
.8eb0	c8		iny				iny 								; consume comma
.8eb1	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8eb4					_CRSwapBack:
.8eb4	20 09 8f	jsr $8f09			jsr 	SwapDataCodePtrs			; swap them back.
.8eb7	b1 30		lda ($30),y			lda 	(codePtr),y
.8eb9	c8		iny				iny
.8eba	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ebc	f0 ac		beq $8e6a			beq 	Command_Read 				; if so go round again.
.8ebe	88		dey				dey 								; unpick get.
.8ebf	60		rts				rts
.8ec0					_CRSyntax:
.8ec0	4c 8d ac	jmp $ac8d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ec3					RemCommand:
.8ec3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ec5	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ec7	d0 06		bne $8ecf			bne 	_RMExit
.8ec9	c8		iny				iny
.8eca	98		tya				tya
.8ecb	38		sec				sec
.8ecc	71 30		adc ($30),y			adc 	(codePtr),y
.8ece	a8		tay				tay
.8ecf					_RMExit:
.8ecf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8ed0					Command_REPEAT:
.8ed0	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ed2	20 d9 9f	jsr $9fd9			jsr 	StackOpen
.8ed5	20 1d a0	jsr $a01d			jsr 	STKSaveCodePosition 		; save loop position
.8ed8	60		rts				rts
.8ed9					Command_UNTIL:
.8ed9	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8edb	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8edd	20 05 a0	jsr $a005			jsr 	StackCheckFrame
.8ee0	a2 00		ldx #$00			ldx 	#0
.8ee2	20 79 9e	jsr $9e79			jsr 	EvaluateNumber 				; work out the number
.8ee5	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; check if zero
.8ee8	f0 04		beq $8eee			beq 	_CULoopBack 				; if so keep looping
.8eea	20 f7 9f	jsr $9ff7			jsr 	StackClose		 			; return
.8eed	60		rts				rts
.8eee					_CULoopBack:
.8eee	20 2e a0	jsr $a02e			jsr 	STKLoadCodePosition 		; loop back
.8ef1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8ef2					Command_Restore:
.8ef2	20 09 8f	jsr $8f09			jsr 	SwapDataCodePtrs 			; swap code and data
.8ef5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ef7	85 30		sta $30				sta 	codePtr
.8ef9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8efb	85 31		sta $31				sta 	codePtr+1
.8efd	20 09 8f	jsr $8f09			jsr 	SwapDataCodePtrs 			; put them back
.8f00	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f02	8d 9b 04	sta $049b			sta 	dataPointer+4
.8f05	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8f08	60		rts				rts
.8f09					SwapDataCodePtrs:
.8f09	da		phx				phx
.8f0a	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f0c					_SDCPLoop:
.8f0c	b5 30		lda $30,x			lda 	safePtr,x
.8f0e	48		pha				pha
.8f0f	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8f12	95 30		sta $30,x			sta 	safePtr,x
.8f14	68		pla				pla
.8f15	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8f18	ca		dex				dex
.8f19	10 f1		bpl $8f0c			bpl 	_SDCPLoop
.8f1b	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8f1e	8c 9b 04	sty $049b			sty 	dataPointer+4
.8f21	a8		tay				tay
.8f22	fa		plx				plx
.8f23	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f24					CommandRUN:
.8f24	20 9e 89	jsr $899e			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8f27	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f29	85 30		sta $30				sta 	codePtr
.8f2b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f2d	85 31		sta $31				sta 	codePtr+1
.8f2f					RUNNewLine:
.8f2f	b2 30		lda ($30)			lda 	(codePtr)
.8f31	f0 5e		beq $8f91			beq 	CRNoProgram         		; no then END.
.8f33	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f35	9a		txs				txs
.8f36					RUNCodePointerLine:
.8f36	a0 02		ldy #$02			ldy 	#2 							; start of program
.8f38					_CRIncMainLoop:
.8f38	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8f3b	d0 05		bne $8f42			bne 	_CRNoBreakCheck
.8f3d	20 72 ae	jsr $ae72			jsr 	EXTBreakCheck 				; break check
.8f40	f0 4a		beq $8f8c			beq 	_CRBreak
.8f42					_CRNoBreakCheck:
.8f42	c8		iny				iny
.8f43					_CRMainLoop:
.8f43	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f46	b1 30		lda ($30),y			lda 	(codePtr),y
.8f48	10 10		bpl $8f5a			bpl 	_CRNotKeyword
.8f4a	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8f4c	b0 04		bcs $8f52			bcs 	_CRIsKeyword
.8f4e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8f50	b0 34		bcs $8f86			bcs		_CRSyntaxError
.8f52					_CRIsKeyword:
.8f52	c8		iny				iny 								; consume command
.8f53	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8f54	aa		tax				tax 								; put in X for vector jump
.8f55	20 89 8f	jsr $8f89			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8f58	80 e9		bra $8f43			bra 	_CRMainLoop 				; and loop round
.8f5a					_CRNotKeyword:
.8f5a	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8f5c	f0 da		beq $8f38			beq 	_CRIncMainLoop
.8f5e	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8f60	90 05		bcc $8f67			bcc 	_CRNotVariable
.8f62					_CRGoLet:
.8f62	20 35 8c	jsr $8c35			jsr 	LetCommand
.8f65	80 dc		bra $8f43			bra 	_CRMainLoop
.8f67					_CRNotVariable:
.8f67	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8f69	f0 f7		beq $8f62			beq 	_CRGoLet
.8f6b	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8f6d	f0 f3		beq $8f62			beq 	_CRGoLet
.8f6f	c9 21		cmp #$21			cmp 	#KWD_PLING
.8f71	f0 ef		beq $8f62			beq 	_CRGoLet
.8f73	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8f75	f0 09		beq $8f80			beq 	_CRGoRem
.8f77	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8f79	d0 0b		bne $8f86			bne 	_CRSyntaxError
.8f7b	20 3e 88	jsr $883e			jsr 	LabelHere
.8f7e	80 c3		bra $8f43			bra 	_CRMainLoop
.8f80					_CRGoRem:
.8f80	c8		iny				iny
.8f81	20 c3 8e	jsr $8ec3			jsr 	RemCommand
.8f84	80 bd		bra $8f43			bra 	_CRMainLoop
.8f86					_CRSyntaxError:
.8f86	4c 8d ac	jmp $ac8d			jmp 	SyntaxError
.8f89					_CRCallVector0:
.8f89	7c 34 90	jmp ($9034,x)			jmp 	(VectorSet0,x)
.8f8c					_CRBreak:
.8f8c	a9 01		lda #$01		lda	#1
.8f8e	4c 6d 93	jmp $936d		jmp	ErrorHandler
.8f91					CRNoProgram:
.8f91	4c bb 8a	jmp $8abb			jmp 	EndCommand
.8f94					EOLCommand:
.8f94	18		clc				clc
.8f95	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f97	65 30		adc $30				adc 	codePtr
.8f99	85 30		sta $30				sta 	codePtr
.8f9b	90 02		bcc $8f9f			bcc 	_CREExit
.8f9d	e6 31		inc $31				inc 	codePtr+1
.8f9f					_CREExit:
.8f9f	80 8e		bra $8f2f			bra 	RunNewLine
.8fa1					Shift1Command:
.8fa1	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa3	c8		iny				iny
.8fa4	0a		asl a				asl 	a
.8fa5	aa		tax				tax
.8fa6	7c 96 90	jmp ($9096,x)			jmp 	(VectorSet1,x)
.8fa9					Shift2Command:
.8fa9	b1 30		lda ($30),y			lda 	(codePtr),y
.8fab	c8		iny				iny
.8fac	0a		asl a				asl 	a
.8fad	aa		tax				tax
.8fae	7c ae 90	jmp ($90ae,x)			jmp 	(VectorSet2,x)
.8fb1					Unused1:
.8fb1					Unused2:
.8fb1					Unused3:
.8fb1					Unused4:
.8fb1	4c 8d ac	jmp $ac8d			jmp 	SyntaxError
>8fb4							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8fb4					VectorSetPunc:
>8fb4	17 95					.word	ShiftLeft                        ; $00 <<
>8fb6	11 94					.word	BinaryCompareLessEqual           ; $01 <=
>8fb8	07 94					.word	BinaryCompareNotEqual            ; $02 <>
>8fba	8d ac					.word	SyntaxError                      ; $03 !!3
>8fbc	8d ac					.word	SyntaxError                      ; $04 ><
>8fbe	1b 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>8fc0	1a 95					.word	ShiftRight                       ; $06 >>
>8fc2	8d ac					.word	SyntaxError                      ; $07 !!7
>8fc4	8d ac					.word	SyntaxError                      ; $08 !!8
>8fc6	8d ac					.word	SyntaxError                      ; $09 !!9
>8fc8	8d ac					.word	SyntaxError                      ; $0a !!10
>8fca	8d ac					.word	SyntaxError                      ; $0b !!11
>8fcc	8d ac					.word	SyntaxError                      ; $0c !!12
>8fce	8d ac					.word	SyntaxError                      ; $0d !!13
>8fd0	8d ac					.word	SyntaxError                      ; $0e !!14
>8fd2	8d ac					.word	SyntaxError                      ; $0f !!15
>8fd4	8d ac					.word	SyntaxError                      ; $10 @
>8fd6	8d ac					.word	SyntaxError                      ; $11 !!17
>8fd8	8d ac					.word	SyntaxError                      ; $12 !!18
>8fda	8d ac					.word	SyntaxError                      ; $13 [
>8fdc	c0 a6					.word	IntegerDivide                    ; $14 \
>8fde	8d ac					.word	SyntaxError                      ; $15 ]
>8fe0	a0 96					.word	EorInteger                       ; $16 ^
>8fe2	8d ac					.word	SyntaxError                      ; $17 _
>8fe4	8d ac					.word	SyntaxError                      ; $18 `
>8fe6	8d ac					.word	SyntaxError                      ; $19 !!25
>8fe8	8d ac					.word	SyntaxError                      ; $1a !!26
>8fea	8d ac					.word	SyntaxError                      ; $1b {
>8fec	5a 96					.word	OraInteger                       ; $1c |
>8fee	8d ac					.word	SyntaxError                      ; $1d }
>8ff0	8d ac					.word	SyntaxError                      ; $1e ~
>8ff2	8d ac					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ff4	8d ac					.word	SyntaxError                      ; $20
>8ff6	e6 96					.word	WordIndirect                     ; $21 !
>8ff8	8d ac					.word	SyntaxError                      ; $22 "
>8ffa	8d ac					.word	SyntaxError                      ; $23 #
>8ffc	8d ac					.word	SyntaxError                      ; $24 $
>8ffe	0d a7					.word	IntegerModulus                   ; $25 %
>9000	14 96					.word	AndInteger                       ; $26 &
>9002	8d ac					.word	SyntaxError                      ; $27 '
>9004	8d ac					.word	SyntaxError                      ; $28 (
>9006	8d ac					.word	SyntaxError                      ; $29 )
>9008	82 a7					.word	MulInteger                       ; $2a *
>900a	ae 95					.word	AddInteger                       ; $2b +
>900c	8d ac					.word	SyntaxError                      ; $2c ,
>900e	e9 95					.word	SubInteger                       ; $2d -
>9010	8d ac					.word	SyntaxError                      ; $2e .
>9012	19 a9					.word	FDivideCommand                   ; $2f /
>9014	8d ac					.word	SyntaxError                      ; $30 0
>9016	8d ac					.word	SyntaxError                      ; $31 1
>9018	8d ac					.word	SyntaxError                      ; $32 2
>901a	8d ac					.word	SyntaxError                      ; $33 3
>901c	8d ac					.word	SyntaxError                      ; $34 4
>901e	8d ac					.word	SyntaxError                      ; $35 5
>9020	8d ac					.word	SyntaxError                      ; $36 6
>9022	8d ac					.word	SyntaxError                      ; $37 7
>9024	8d ac					.word	SyntaxError                      ; $38 8
>9026	8d ac					.word	SyntaxError                      ; $39 9
>9028	8d ac					.word	SyntaxError                      ; $3a :
>902a	8d ac					.word	SyntaxError                      ; $3b ;
>902c	f3 93					.word	BinaryCompareLess                ; $3c <
>902e	e9 93					.word	BinaryCompareEqual               ; $3d =
>9030	fd 93					.word	BinaryCompareGreater             ; $3e >
>9032	0d 97					.word	ByteIndirect                     ; $3f ?
.9034					VectorSet0:
>9034	94 8f					.word	EOLCommand                       ; $80 !0:EOF
>9036	a1 8f					.word	Shift1Command                    ; $81 !1:SH1
>9038	a9 8f					.word	Shift2Command                    ; $82 !2:SH2
>903a	5f aa					.word	AbsUnary                         ; $83 ABS(
>903c	d7 9b					.word	AllocUnary                       ; $84 ALLOC(
>903e	6f aa					.word	AscUnary                         ; $85 ASC(
>9040	f7 9c					.word	ChrUnary                         ; $86 CHR$(
>9042	e5 93					.word	UnaryFalse                       ; $87 FALSE
>9044	7c aa					.word	FracUnary                        ; $88 FRAC(
>9046	92 aa					.word	IntUnary                         ; $89 INT(
>9048	e8 aa					.word	IsValUnary                       ; $8a ISVAL(
>904a	d1 9d					.word	Unary_Left                       ; $8b LEFT$(
>904c	a4 aa					.word	LenUnary                         ; $8c LEN(
>904e	fb 9d					.word	Unary_Mid                        ; $8d MID$(
>9050	47 9c					.word	Unary_Not                        ; $8e NOT(
>9052	5d 9c					.word	Unary_Random                     ; $8f RANDOM(
>9054	e1 9d					.word	Unary_Right                      ; $90 RIGHT$(
>9056	76 9c					.word	Unary_Rnd                        ; $91 RND(
>9058	be aa					.word	SgnUnary                         ; $92 SGN(
>905a	09 9d					.word	SpcUnary                         ; $93 SPC(
>905c	24 9d					.word	Unary_Str                        ; $94 STR$(
>905e	d9 93					.word	UnaryTrue                        ; $95 TRUE
>9060	de aa					.word	ValUnary                         ; $96 VAL(
>9062	be 8a					.word	ForCommand                       ; $97 FOR
>9064	0b 8c					.word	IfCommand                        ; $98 IF
>9066	b1 8f					.word	Unused1                          ; $99 PROC
>9068	d0 8e					.word	Command_REPEAT                   ; $9a REPEAT
>906a	3e 93					.word	Command_WHILE                    ; $9b WHILE
>906c	34 8c					.word	EndIf                            ; $9c ENDIF
>906e	99 a6					.word	Command_ENDPROC                  ; $9d ENDPROC
>9070	78 8b					.word	NextCommand                      ; $9e NEXT
>9072	b1 8f					.word	Unused4                          ; $9f THEN
>9074	d9 8e					.word	Command_UNTIL                    ; $a0 UNTIL
>9076	5f 93					.word	Command_WEND                     ; $a1 WEND
>9078	64 89					.word	CallCommand                      ; $a2 CALL
>907a	8d ac					.word	SyntaxError                      ; $a3 CLS
>907c	f6 89					.word	Command_Data                     ; $a4 DATA
>907e	fe 89					.word	DimCommand                       ; $a5 DIM
>9080	b1 8f					.word	Unused3                          ; $a6 DOWNTO
>9082	2d 8c					.word	ElseCode                         ; $a7 ELSE
>9084	d1 8b					.word	Command_GOSUB                    ; $a8 GOSUB
>9086	ef 8b					.word	GotoCommand                      ; $a9 GOTO
>9088	35 8c					.word	LetCommand                       ; $aa LET
>908a	25 8d					.word	Command_LOCAL                    ; $ab LOCAL
>908c	b3 8d					.word	Command_Print                    ; $ac PRINT
>908e	6a 8e					.word	Command_Read                     ; $ad READ
>9090	c3 8e					.word	RemCommand                       ; $ae REM
>9092	e1 8b					.word	Command_RETURN                   ; $af RETURN
>9094	b1 8f					.word	Unused2                          ; $b0 TO
.9096					VectorSet1:
>9096	8d ac					.word	SyntaxError                      ; $80 !0:EOF
>9098	8d ac					.word	SyntaxError                      ; $81 !1:SH1
>909a	8d ac					.word	SyntaxError                      ; $82 !2:SH2
>909c	35 89					.word	AssembleCommand                  ; $83 ASSEMBLE
>909e	54 89					.word	AssertCommand                    ; $84 ASSERT
>90a0	9e 89					.word	ClearCommand                     ; $85 CLEAR
>90a2	bb 8a					.word	EndCommand                       ; $86 END
>90a4	8a 8c					.word	Command_List                     ; $87 LIST
>90a6	a9 8d					.word	NewCommand                       ; $88 NEW
>90a8	f2 8e					.word	Command_Restore                  ; $89 RESTORE
>90aa	24 8f					.word	CommandRUN                       ; $8a RUN
>90ac	36 91					.word	StopCommand                      ; $8b STOP
.90ae					VectorSet2:
>90ae	8d ac					.word	SyntaxError                      ; $80 !0:EOF
>90b0	8d ac					.word	SyntaxError                      ; $81 !1:SH1
>90b2	8d ac					.word	SyntaxError                      ; $82 !2:SH2
>90b4	4c ab					.word	Assemble_adc                     ; $83 ADC
>90b6	44 ab					.word	Assemble_and                     ; $84 AND
>90b8	60 ab					.word	Assemble_asl                     ; $85 ASL
>90ba	ca ab					.word	Assemble_bcc                     ; $86 BCC
>90bc	ce ab					.word	Assemble_bcs                     ; $87 BCS
>90be	d6 ab					.word	Assemble_beq                     ; $88 BEQ
>90c0	8d ab					.word	Assemble_bit                     ; $89 BIT
>90c2	be ab					.word	Assemble_bmi                     ; $8a BMI
>90c4	d2 ab					.word	Assemble_bne                     ; $8b BNE
>90c6	ba ab					.word	Assemble_bpl                     ; $8c BPL
>90c8	da ab					.word	Assemble_bra                     ; $8d BRA
>90ca	de ab					.word	Assemble_brk                     ; $8e BRK
>90cc	c2 ab					.word	Assemble_bvc                     ; $8f BVC
>90ce	c6 ab					.word	Assemble_bvs                     ; $90 BVS
>90d0	e6 ab					.word	Assemble_clc                     ; $91 CLC
>90d2	3a ac					.word	Assemble_cld                     ; $92 CLD
>90d4	fa ab					.word	Assemble_cli                     ; $93 CLI
>90d6	2a ac					.word	Assemble_clv                     ; $94 CLV
>90d8	58 ab					.word	Assemble_cmp                     ; $95 CMP
>90da	a1 ab					.word	Assemble_cpx                     ; $96 CPX
>90dc	9c ab					.word	Assemble_cpy                     ; $97 CPY
>90de	7e ab					.word	Assemble_dec                     ; $98 DEC
>90e0	36 ac					.word	Assemble_dex                     ; $99 DEX
>90e2	12 ac					.word	Assemble_dey                     ; $9a DEY
>90e4	48 ab					.word	Assemble_eor                     ; $9b EOR
>90e6	83 ab					.word	Assemble_inc                     ; $9c INC
>90e8	46 ac					.word	Assemble_inx                     ; $9d INX
>90ea	32 ac					.word	Assemble_iny                     ; $9e INY
>90ec	b5 ab					.word	Assemble_jmp                     ; $9f JMP
>90ee	b0 ab					.word	Assemble_jsr                     ; $a0 JSR
>90f0	54 ab					.word	Assemble_lda                     ; $a1 LDA
>90f2	79 ab					.word	Assemble_ldx                     ; $a2 LDX
>90f4	97 ab					.word	Assemble_ldy                     ; $a3 LDY
>90f6	6a ab					.word	Assemble_lsr                     ; $a4 LSR
>90f8	4a ac					.word	Assemble_nop                     ; $a5 NOP
>90fa	40 ab					.word	Assemble_ora                     ; $a6 ORA
>90fc	f6 ab					.word	Assemble_pha                     ; $a7 PHA
>90fe	e2 ab					.word	Assemble_php                     ; $a8 PHP
>9100	3e ac					.word	Assemble_phx                     ; $a9 PHX
>9102	fe ab					.word	Assemble_phy                     ; $aa PHY
>9104	06 ac					.word	Assemble_pla                     ; $ab PLA
>9106	ea ab					.word	Assemble_plp                     ; $ac PLP
>9108	52 ac					.word	Assemble_plx                     ; $ad PLX
>910a	0e ac					.word	Assemble_ply                     ; $ae PLY
>910c	65 ab					.word	Assemble_rol                     ; $af ROL
>910e	6f ab					.word	Assemble_ror                     ; $b0 ROR
>9110	f2 ab					.word	Assemble_rti                     ; $b1 RTI
>9112	02 ac					.word	Assemble_rts                     ; $b2 RTS
>9114	5c ab					.word	Assemble_sbc                     ; $b3 SBC
>9116	ee ab					.word	Assemble_sec                     ; $b4 SEC
>9118	4e ac					.word	Assemble_sed                     ; $b5 SED
>911a	0a ac					.word	Assemble_sei                     ; $b6 SEI
>911c	50 ab					.word	Assemble_sta                     ; $b7 STA
>911e	42 ac					.word	Assemble_stp                     ; $b8 STP
>9120	74 ab					.word	Assemble_stx                     ; $b9 STX
>9122	92 ab					.word	Assemble_sty                     ; $ba STY
>9124	88 ab					.word	Assemble_stz                     ; $bb STZ
>9126	26 ac					.word	Assemble_tax                     ; $bc TAX
>9128	22 ac					.word	Assemble_tay                     ; $bd TAY
>912a	ab ab					.word	Assemble_trb                     ; $be TRB
>912c	a6 ab					.word	Assemble_tsb                     ; $bf TSB
>912e	2e ac					.word	Assemble_tsx                     ; $c0 TSX
>9130	16 ac					.word	Assemble_txa                     ; $c1 TXA
>9132	1e ac					.word	Assemble_txs                     ; $c2 TXS
>9134	1a ac					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9136					StopCommand:
.9136	a9 08		lda #$08		lda	#8
.9138	4c 6d 93	jmp $936d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.913b					ListConvertLine:
.913b	9c 9d 04	stz $049d			stz 	tbOffset
.913e	9c a9 04	stz $04a9			stz 	tokenBuffer
.9141	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9143	b1 30		lda ($30),y			lda 	(codePtr),y
.9145	aa		tax				tax
.9146	88		dey				dey
.9147	b1 30		lda ($30),y			lda 	(codePtr),y
.9149	20 03 a8	jsr $a803			jsr 	ConvertInt16
.914c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.914e	86 37		stx $37				stx 	zTemp0+1
.9150	a0 00		ldy #$00			ldy 	#0
.9152					_LCCopyNumber:
.9152	b1 36		lda ($36),y			lda 	(zTemp0),y
.9154	20 54 92	jsr $9254			jsr 	LCLWrite
.9157	c8		iny				iny
.9158	b1 36		lda ($36),y			lda 	(zTemp0),y
.915a	d0 f6		bne $9152			bne 	_LCCopyNumber
.915c					_LCPadOut:
.915c	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.915e	20 54 92	jsr $9254			jsr 	LCLWrite
.9161	ad 9d 04	lda $049d			lda 	tbOffset
.9164	c9 06		cmp #$06			cmp 	#6
.9166	d0 f4		bne $915c			bne 	_LCPadOut
.9168	a0 03		ldy #$03			ldy 	#3 							; start position.
.916a					_LCMainLoop:
.916a	b1 30		lda ($30),y			lda 	(codePtr),y
.916c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.916e	f0 17		beq $9187			beq 	_LCExit
.9170	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9172	90 14		bcc $9188			bcc 	_LCDoubles
.9174	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9176	90 20		bcc $9198			bcc 	_LCShiftPunc
.9178	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.917a	90 2b		bcc $91a7			bcc 	_LCPunctuation
.917c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.917e	90 2d		bcc $91ad			bcc 	_LCIdentifiers
.9180	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9182	90 49		bcc $91cd			bcc 	_LCTokens
.9184	4c 28 92	jmp $9228			jmp 	_LCData 					; 254-5 are data objects
.9187					_LCExit:
.9187	60		rts				rts
.9188					_LCDoubles:
.9188	48		pha				pha
.9189	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.918a	29 02		and #$02			and 	#2
.918c	09 3c		ora #$3c			ora 	#60 						; make < >
.918e	20 54 92	jsr $9254			jsr 	LCLWrite
.9191	68		pla				pla 								; restore, do lower bit
.9192	29 03		and #$03			and 	#3
.9194	09 3c		ora #$3c			ora 	#60
.9196	80 0f		bra $91a7			bra		_LCPunctuation 				; print, increment, loop
.9198					_LCShiftPunc:
.9198	aa		tax				tax 								; save in X
.9199	29 07		and #$07			and 	#7 							; lower 3 bits
.919b	f0 02		beq $919f			beq 	_LCNoAdd
.919d	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.919f					_LCNoAdd:
.919f	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.91a1	90 02		bcc $91a5			bcc 	_LCNoAdd2
.91a3	09 20		ora #$20			ora 	#32 						; adds $20
.91a5					_LCNoAdd2:
.91a5	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.91a7					_LCPunctuation:
.91a7	c8		iny				iny 								; consume character
.91a8	20 54 92	jsr $9254			jsr 	LCLWrite 					; write it out.
.91ab	80 bd		bra $916a			bra 	_LCMainLoop 				; go round again.
.91ad					_LCIdentifiers:
.91ad	18		clc				clc 								; convert to physical address
.91ae	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.91b0	85 37		sta $37				sta 	zTemp0+1
.91b2	c8		iny				iny
.91b3	b1 30		lda ($30),y			lda 	(codePtr),y
.91b5	85 36		sta $36				sta 	zTemp0
.91b7	c8		iny				iny
.91b8	5a		phy				phy 								; save position
.91b9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.91bb					_LCOutIdentifier:
.91bb	c8		iny				iny
.91bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.91be	29 7f		and #$7f			and 	#$7F
.91c0	20 82 92	jsr $9282			jsr 	LCLLowerCase
.91c3	20 54 92	jsr $9254			jsr 	LCLWrite
.91c6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.91c8	10 f1		bpl $91bb			bpl 	_LCOutIdentifier
.91ca	7a		ply				ply 								; restore position
.91cb	80 9d		bra $916a			bra 	_LCMainLoop
.91cd					_LCTokens:
.91cd	aa		tax				tax 								; token in X
.91ce	a9 52		lda #$52			lda 	#((KeywordSet2) & $FF)
.91d0	85 36		sta $36				sta 	0+zTemp0
.91d2	a9 a2		lda #$a2			lda 	#((KeywordSet2) >> 8)
.91d4	85 37		sta $37				sta 	1+zTemp0
.91d6	e0 82		cpx #$82			cpx 	#$82
.91d8	f0 16		beq $91f0			beq 	_LCUseShift
.91da	a9 0e		lda #$0e			lda 	#((KeywordSet1) & $FF)
.91dc	85 36		sta $36				sta 	0+zTemp0
.91de	a9 a2		lda #$a2			lda 	#((KeywordSet1) >> 8)
.91e0	85 37		sta $37				sta 	1+zTemp0
.91e2	e0 81		cpx #$81			cpx 	#$81
.91e4	f0 0a		beq $91f0			beq 	_LCUseShift
.91e6	a9 dc		lda #$dc			lda 	#((KeywordSet0) & $FF)
.91e8	85 36		sta $36				sta 	0+zTemp0
.91ea	a9 a0		lda #$a0			lda 	#((KeywordSet0) >> 8)
.91ec	85 37		sta $37				sta 	1+zTemp0
.91ee	80 01		bra $91f1			bra 	_LCNoShift
.91f0					_LCUseShift:
.91f0	c8		iny				iny
.91f1					_LCNoShift:
.91f1	20 63 92	jsr $9263			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.91f4	b1 30		lda ($30),y			lda 	(codePtr),y
.91f6	aa		tax				tax 								; into X
.91f7					_LCFindText:
.91f7	ca		dex				dex
.91f8	10 0e		bpl $9208			bpl 	_LCFoundText 				; found text.
.91fa	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.91fc	1a		inc a				inc 	a 							; one extra for size
.91fd	38		sec				sec 								; one extra for checksum
.91fe	65 36		adc $36				adc 	zTemp0 						; go to next token
.9200	85 36		sta $36				sta 	zTemp0
.9202	90 f3		bcc $91f7			bcc 	_LCFindText
.9204	e6 37		inc $37				inc 	zTemp0+1
.9206	80 ef		bra $91f7			bra 	_LCFindText
.9208					_LCFoundText:
.9208	5a		phy				phy 								; save List position
.9209	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.920b	aa		tax				tax
.920c	a0 02		ldy #$02			ldy 	#2
.920e					_LCCopyToken:
.920e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9210	20 82 92	jsr $9282			jsr 	LCLLowerCase
.9213	20 54 92	jsr $9254			jsr 	LCLWrite
.9216	c8		iny				iny
.9217	ca		dex				dex
.9218	d0 f4		bne $920e			bne 	_LCCopyToken
.921a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.921c	f0 05		beq $9223			beq 	_LCNoSpace
.921e	a9 20		lda #$20			lda 	#' '
.9220	20 54 92	jsr $9254			jsr 	LCLWrite
.9223					_LCNoSpace:
.9223	7a		ply				ply 								; restore position.
.9224	c8		iny				iny 								; consume token
.9225	4c 6a 91	jmp $916a			jmp 	_LCMainLoop 				; and go around again.
.9228					_LCData:
.9228	48		pha				pha 								; save type $FE/$FF
.9229	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.922b	c9 fe		cmp #$fe			cmp 	#$FE
.922d	f0 02		beq $9231			beq 	_LCHaveOpener
.922f	a2 22		ldx #$22			ldx 	#'"'
.9231					_LCHaveOpener:
.9231	8a		txa				txa 								; output prefix (# or ")
.9232	20 54 92	jsr $9254			jsr 	LCLWrite
.9235	c8		iny				iny 								; get count
.9236	b1 30		lda ($30),y			lda 	(codePtr),y
.9238	aa		tax				tax
.9239	c8		iny				iny 								; point at first character
.923a					_LCOutData:
.923a	b1 30		lda ($30),y			lda 	(codePtr),y
.923c	c9 00		cmp #$00			cmp 	#0
.923e	f0 03		beq $9243			beq 	_LCNoPrint
.9240	20 54 92	jsr $9254			jsr 	LCLWrite
.9243					_LCNoPrint:
.9243	c8		iny				iny
.9244	ca		dex				dex
.9245	d0 f3		bne $923a			bne 	_LCOutData
.9247	68		pla				pla 								; closing " required ?
.9248	c9 ff		cmp #$ff			cmp 	#$FF
.924a	d0 05		bne $9251			bne 	_LCNoQuote
.924c	a9 22		lda #$22			lda 	#'"'
.924e	20 54 92	jsr $9254			jsr 	LCLWrite
.9251					_LCNoQuote:
.9251	4c 6a 91	jmp $916a			jmp 	_LCMainLoop
.9254					LCLWrite:
.9254	da		phx				phx
.9255	ae 9d 04	ldx $049d			ldx 	tbOffset
.9258	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.925b	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.925e	ee 9d 04	inc $049d			inc 	tbOffset
.9261	fa		plx				plx
.9262	60		rts				rts
.9263					LCCheckSpaceRequired:
.9263	ae 9d 04	ldx $049d			ldx 	tbOffset
.9266	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9269	20 82 92	jsr $9282			jsr 	LCLLowerCase 				; saves a little effort
.926c	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.926e	90 11		bcc $9281			bcc 	_LCCSRExit
.9270	c9 3a		cmp #$3a			cmp 	#"9"+1
.9272	90 08		bcc $927c			bcc 	_LCCSRSpace
.9274	c9 61		cmp #$61			cmp 	#"a"
.9276	90 09		bcc $9281			bcc 	_LCCSRExit
.9278	c9 7b		cmp #$7b			cmp 	#"z"+1
.927a	b0 05		bcs $9281			bcs 	_LCCSRExit
.927c					_LCCSRSpace:
.927c	a9 20		lda #$20			lda 	#' '
.927e	20 54 92	jsr $9254			jsr 	LCLWrite
.9281					_LCCSRExit:
.9281	60		rts				rts
.9282					LCLLowerCase:
.9282	c9 41		cmp #$41			cmp 	#"A"
.9284	90 06		bcc $928c			bcc 	_LCLLCOut
.9286	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9288	b0 02		bcs $928c			bcs 	_LCLLCOut
.928a	69 20		adc #$20			adc 	#$20
.928c					_LCLLCOut:
.928c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.928d					ProcedureScan:
.928d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.928f	85 30		sta $30				sta 	codePtr
.9291	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9293	85 31		sta $31				sta 	codePtr+1
.9295					_PSLoop:
.9295	b2 30		lda ($30)			lda 	(codePtr)
.9297	f0 42		beq $92db			beq 	_PSExit
.9299	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.929b	b1 30		lda ($30),y			lda 	(codePtr),y
.929d	c9 99		cmp #$99			cmp 	#KWD_PROC
.929f	d0 2d		bne $92ce			bne 	_PSNext
.92a1	c8		iny				iny 								; get the address of the record to zTemp0 and
.92a2	b1 30		lda ($30),y			lda 	(codePtr),y
.92a4	29 c0		and #$c0			and 	#$C0
.92a6	c9 40		cmp #$40			cmp 	#$40
.92a8	d0 32		bne $92dc			bne 	_PSSyntax
.92aa	b1 30		lda ($30),y			lda 	(codePtr),y
.92ac	18		clc				clc
.92ad	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92af	85 37		sta $37				sta 	zTemp0+1
.92b1	c8		iny				iny 								; LSB
.92b2	b1 30		lda ($30),y			lda 	(codePtr),y
.92b4	85 36		sta $36				sta 	zTemp0
.92b6	c8		iny				iny 								; character after variable call.
.92b7	98		tya				tya 								; save Y offset at +7
.92b8	a0 07		ldy #$07			ldy 	#7
.92ba	91 36		sta ($36),y			sta 	(zTemp0),y
.92bc	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92be	a0 02		ldy #$02			ldy 	#2
.92c0	91 36		sta ($36),y			sta 	(zTemp0),y
.92c2	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.92c4					_PSCopy:
.92c4	b5 30		lda $30,x			lda 	safePtr,x
.92c6	c8		iny				iny
.92c7	91 36		sta ($36),y			sta 	(zTemp0),y
.92c9	e8		inx				inx
.92ca	e0 04		cpx #$04			cpx 	#4
.92cc	d0 f6		bne $92c4			bne 	_PSCopy
.92ce					_PSNext:
.92ce	18		clc				clc
.92cf	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92d1	65 30		adc $30				adc 	codePtr
.92d3	85 30		sta $30				sta 	codePtr
.92d5	90 02		bcc $92d9			bcc 	_CREExit
.92d7	e6 31		inc $31				inc 	codePtr+1
.92d9					_CREExit:
.92d9	80 ba		bra $9295			bra 	_PSLoop
.92db					_PSExit:
.92db	60		rts				rts
.92dc					_PSSyntax:
.92dc	4c 8d ac	jmp $ac8d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92df					ScanForward:
.92df	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.92e1	86 37		stx $37				stx 	zTemp0+1
.92e3	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.92e5					_ScanLoop:
.92e5	b1 30		lda ($30),y			lda 	(codePtr),y
.92e7	c8		iny				iny
.92e8	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.92ea	d0 0e		bne $92fa			bne 	_ScanGoNext
.92ec	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.92ee	f0 04		beq $92f4			beq 	_ScanMatch
.92f0	c5 37		cmp $37				cmp 	zTemp0+1
.92f2	d0 06		bne $92fa			bne 	_ScanGoNext
.92f4					_ScanMatch:
.92f4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.92f6	d0 01		bne $92f9			bne 	_ScanNotEndEOL
.92f8	88		dey				dey
.92f9					_ScanNotEndEOL:
.92f9	60		rts				rts
.92fa					_ScanGoNext:
.92fa	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.92fc	90 e7		bcc $92e5			bcc 	_ScanLoop
.92fe	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9300	90 18		bcc $931a			bcc 	_ScanSkipOne
.9302	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9304	b0 2f		bcs $9335			bcs 	_ScanSkipData
.9306	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9308	90 db		bcc $92e5			bcc 	_ScanLoop 					; if not, ordinary keywords.
.930a	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.930c	b0 d7		bcs $92e5			bcs 	_ScanLoop
.930e	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9310	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9312	b0 d1		bcs $92e5			bcs 	_ScanLoop
.9314	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9316	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9318	80 cb		bra $92e5			bra 	_ScanLoop
.931a					_ScanSkipOne:
.931a	c8		iny				iny 								; consume the extra one.
.931b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.931d	d0 c6		bne $92e5			bne 	_ScanLoop
.931f	18		clc				clc
.9320	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9322	65 30		adc $30				adc 	codePtr
.9324	85 30		sta $30				sta 	codePtr
.9326	90 02		bcc $932a			bcc 	_CREExit
.9328	e6 31		inc $31				inc 	codePtr+1
.932a					_CREExit:
.932a	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.932c	b2 30		lda ($30)			lda 	(codePtr)
.932e	d0 b5		bne $92e5			bne 	_ScanLoop 					; if not zero, more to scan
.9330	a9 13		lda #$13		lda	#19
.9332	4c 6d 93	jmp $936d		jmp	ErrorHandler
.9335					_ScanSkipData:
.9335	88		dey				dey 								; point at data token
.9336	c8		iny				iny
.9337	98		tya				tya
.9338	38		sec				sec
.9339	71 30		adc ($30),y			adc 	(codePtr),y
.933b	a8		tay				tay
.933c	80 a7		bra $92e5			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.933e					Command_WHILE:
.933e	5a		phy				phy 								; save position of the test
.933f	a2 00		ldx #$00			ldx 	#0
.9341	20 79 9e	jsr $9e79			jsr 	EvaluateNumber 				; work out the number
.9344	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; check if zero
.9347	f0 0e		beq $9357			beq 	_WHExitLoop 				; if so exit the loop
.9349	98		tya				tya 								; position *after* test.
.934a	7a		ply				ply 								; restore position before test, at WHILE
.934b	88		dey				dey
.934c	48		pha				pha 								; push after test on the stack
.934d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.934f	20 d9 9f	jsr $9fd9			jsr 	StackOpen
.9352	20 1d a0	jsr $a01d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9355	7a		ply				ply 								; restore the position *after* the test
.9356	60		rts				rts
.9357					_WHExitLoop:
.9357	68		pla				pla 								; throw post loop position
.9358	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.935a	aa		tax				tax
.935b	20 df 92	jsr $92df			jsr 	ScanForward
.935e	60		rts				rts
.935f					Command_WEND:
.935f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9361	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9363	20 05 a0	jsr $a005			jsr 	StackCheckFrame
.9366	20 2e a0	jsr $a02e			jsr 	STKLoadCodePosition 		; loop back
.9369	20 f7 9f	jsr $9ff7			jsr 	StackClose		 			; erase the frame
.936c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a6a7					CheckRightBracket:
.a6a7	b1 30		lda ($30),y			lda 	(codePtr),y
.a6a9	c8		iny				iny
.a6aa	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a6ac	d0 0f		bne $a6bd			bne 	CNAFail
.a6ae	60		rts				rts
.a6af					CheckComma:
.a6af	b1 30		lda ($30),y			lda 	(codePtr),y
.a6b1	c8		iny				iny
.a6b2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a6b4	d0 07		bne $a6bd			bne 	CNAFail
.a6b6	60		rts				rts
.a6b7					CheckNextA:
.a6b7	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a6b9	d0 02		bne $a6bd			bne 	CNAFail
.a6bb	c8		iny				iny 								; skip character
.a6bc	60		rts				rts 								; and exit
.a6bd					CNAFail:
.a6bd	4c 8d ac	jmp $ac8d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.936d					ErrorHandler:
.936d	a8		tay				tay 								; find the error text
.936e	f0 49		beq $93b9			beq 	_EHEnd
.9370	a2 00		ldx #$00			ldx 	#0
.9372	a9 a6		lda #$a6			lda 	#((ErrorText) & $FF)
.9374	85 36		sta $36				sta 	0+zTemp0
.9376	a9 ac		lda #$ac			lda 	#((ErrorText) >> 8)
.9378	85 37		sta $37				sta 	1+zTemp0
.937a					_EHFind:
.937a	88		dey				dey 								; found the error text ?
.937b	f0 0e		beq $938b			beq 	_EHFound
.937d					_EHFindZero:
.937d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.937f	e6 36		inc $36				inc 	zTemp0
.9381	d0 02		bne $9385			bne 	_EHFNoCarry
.9383	e6 37		inc $37				inc 	zTemp0+1
.9385					_EHFNoCarry:
.9385	c9 00		cmp #$00			cmp 	#0
.9387	d0 f4		bne $937d			bne 	_EHFindZero
.9389	80 ef		bra $937a			bra 	_EHFind
.938b					_EHFound:
.938b	a5 36		lda $36				lda 	zTemp0 						; print message
.938d	a6 37		ldx $37				ldx 	zTemp0+1
.938f	20 c6 93	jsr $93c6			jsr 	PrintStringXA
.9392	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9394	b1 30		lda ($30),y			lda 	(codePtr),y
.9396	d0 05		bne $939d			bne 	_EHAtMsg
.9398	c8		iny				iny
.9399	b1 30		lda ($30),y			lda 	(codePtr),y
.939b	f0 17		beq $93b4			beq 	_EHCREnd
.939d					_EHAtMsg:
.939d	a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.939f	a9 bc		lda #$bc			lda 	#_AtMsg & $FF
.93a1	20 c6 93	jsr $93c6			jsr 	PrintStringXA
.93a4	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93a6	b1 30		lda ($30),y			lda 	(codePtr),y
.93a8	48		pha				pha
.93a9	c8		iny				iny
.93aa	b1 30		lda ($30),y			lda 	(codePtr),y
.93ac	aa		tax				tax
.93ad	68		pla				pla
.93ae	20 03 a8	jsr $a803			jsr 	ConvertInt16 				; convert XA to string
.93b1	20 c6 93	jsr $93c6			jsr 	PrintStringXA 				; and print it.
.93b4					_EHCREnd:
.93b4	a9 0d		lda #$0d			lda 	#13 						; new line
.93b6	20 31 ae	jsr $ae31			jsr 	EXTPrintCharacter
.93b9					_EHEnd:
.93b9	4c 05 89	jmp $8905			jmp 	WarmStart
>93bc	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93c4	20 00
.93c6					PrintStringXA:
.93c6	5a		phy				phy
.93c7	86 37		stx $37				stx 	zTemp0+1
.93c9	85 36		sta $36				sta 	zTemp0
.93cb	a0 00		ldy #$00			ldy 	#0
.93cd					_PSXALoop:
.93cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.93cf	f0 06		beq $93d7			beq 	_PSXAExit
.93d1	20 31 ae	jsr $ae31			jsr 	EXTPrintCharacter
.93d4	c8		iny				iny
.93d5	80 f6		bra $93cd			bra 	_PSXALoop
.93d7					_PSXAExit:
.93d7	7a		ply				ply
.93d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.93d9					UnaryTrue:
.93d9	fa		plx				plx
.93da					ReturnTrue:
.93da	a9 01		lda #$01			lda 	#1  						; set to 1
.93dc	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.93df	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.93e1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93e4	60		rts				rts
.93e5					UnaryFalse:
.93e5	fa		plx				plx
.93e6					ReturnFalse:
.93e6	4c 25 9f	jmp $9f25			jmp 	NSMSetZero 					; set it all to zero
.93e9					BinaryCompareEqual:
.93e9	fa		plx				plx
.93ea	20 25 94	jsr $9425			jsr 	CompareBaseCode
.93ed	c9 00		cmp #$00			cmp 	#0
.93ef	f0 e9		beq $93da			beq 	ReturnTrue
.93f1	80 f3		bra $93e6			bra 	ReturnFalse
.93f3					BinaryCompareLess:
.93f3	fa		plx				plx
.93f4	20 25 94	jsr $9425			jsr 	CompareBaseCode
.93f7	c9 ff		cmp #$ff			cmp 	#$FF
.93f9	f0 df		beq $93da			beq 	ReturnTrue
.93fb	80 e9		bra $93e6			bra 	ReturnFalse
.93fd					BinaryCompareGreater:
.93fd	fa		plx				plx
.93fe	20 25 94	jsr $9425			jsr 	CompareBaseCode
.9401	c9 01		cmp #$01			cmp 	#1
.9403	f0 d5		beq $93da			beq 	ReturnTrue
.9405	80 df		bra $93e6			bra 	ReturnFalse
.9407					BinaryCompareNotEqual:
.9407	fa		plx				plx
.9408	20 25 94	jsr $9425			jsr 	CompareBaseCode
.940b	c9 00		cmp #$00			cmp 	#0
.940d	d0 cb		bne $93da			bne 	ReturnTrue
.940f	80 d5		bra $93e6			bra 	ReturnFalse
.9411					BinaryCompareLessEqual:
.9411	fa		plx				plx
.9412	20 25 94	jsr $9425			jsr 	CompareBaseCode
.9415	c9 01		cmp #$01			cmp 	#1
.9417	d0 c1		bne $93da			bne 	ReturnTrue
.9419	80 cb		bra $93e6			bra 	ReturnFalse
.941b					BinaryCompareGreaterEqual:
.941b	fa		plx				plx
.941c	20 25 94	jsr $9425			jsr 	CompareBaseCode
.941f	c9 ff		cmp #$ff			cmp 	#$FF
.9421	d0 b7		bne $93da			bne 	ReturnTrue
.9423	80 c1		bra $93e6			bra 	ReturnFalse
.9425					CompareBaseCode:
.9425	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; make both values if references.
.9428	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.942b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.942e	29 10		and #$10			and 	#NSTString
.9430	d0 40		bne $9472			bne 	_CBCString
.9432	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9435	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9438	d0 3b		bne $9475			bne 	_CBCFloat
.943a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.943d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9440	29 08		and #$08			and 	#NSTFloat
.9442	d0 31		bne $9475			bne 	_CBCFloat
.9444	20 78 94	jsr $9478			jsr 	CompareFixMinusZero
.9447	e8		inx				inx
.9448	20 78 94	jsr $9478			jsr 	CompareFixMinusZero
.944b	ca		dex				dex
.944c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.944f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9452	10 0b		bpl $945f			bpl 	_CDCSameSign
.9454	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9457	30 16		bmi $946f			bmi 	_CBCLess 					; return $FF
.9459					_CBCGreater:
.9459	a9 01		lda #$01			lda 	#1
.945b	60		rts				rts
.945c					_CBCEqual:
.945c	a9 00		lda #$00			lda 	#0
.945e	60		rts				rts
.945f					_CDCSameSign:
.945f	20 88 95	jsr $9588			jsr 	SubTopTwoStack 				; unsigned subtract
.9462	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; or the mantissa together
.9465	f0 f5		beq $945c			beq 	_CBCEqual 					; -0 == 0
.9467	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.946a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.946d	10 ea		bpl $9459			bpl 	_CBCGreater
.946f					_CBCLess:
.946f	a9 ff		lda #$ff			lda 	#$FF
.9471	60		rts				rts
.9472					_CBCString:
.9472	4c de 94	jmp $94de			jmp 	CompareStrings
.9475					_CBCFloat:
.9475	4c ff a8	jmp $a8ff			jmp 	CompareFloat
.9478					CompareFixMinusZero:
.9478	20 55 9f	jsr $9f55			jsr 	NSMIsZero
.947b	d0 03		bne $9480			bne 	_CFXMZNotZero
.947d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9480					_CFXMZNotZero:
.9480	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9481					StringConcat:
.9481	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9484	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9487	29 18		and #$18			and 	#NSBTypeMask
.9489	c9 10		cmp #$10			cmp 	#NSTString
.948b	d0 4e		bne $94db			bne		_SCType
.948d	64 38		stz $38				stz 	zTemp1 						; counting total length
.948f	e8		inx				inx
.9490	20 ae 94	jsr $94ae			jsr 	_SCSetupZ0 					; setup for second
.9493	20 b9 94	jsr $94b9			jsr 	_SCLengthZ0 				; length for second
.9496	ca		dex				dex
.9497	20 ae 94	jsr $94ae			jsr 	_SCSetupZ0 					; setup for first
.949a	20 b9 94	jsr $94b9			jsr 	_SCLengthZ0 				; length for first
.949d	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.949f	20 b3 af	jsr $afb3			jsr 	StringTempAllocate
.94a2	20 cc 94	jsr $94cc			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94a5	e8		inx				inx
.94a6	20 ae 94	jsr $94ae			jsr 	_SCSetupZ0 					; copy second out
.94a9	20 cc 94	jsr $94cc			jsr 	_SCCopy
.94ac	ca		dex				dex
.94ad	60		rts				rts
.94ae					_SCSetupZ0:
.94ae	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.94b1	85 36		sta $36				sta 	zTemp0
.94b3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.94b6	85 37		sta $37				sta 	zTemp0+1
.94b8	60		rts				rts
.94b9					_SCLengthZ0:
.94b9	5a		phy				phy
.94ba	a0 00		ldy #$00			ldy 	#0
.94bc					_SCLenLoop:
.94bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.94be	f0 0a		beq $94ca			beq 	_SCLExit
.94c0	c8		iny				iny
.94c1	e6 38		inc $38				inc 	zTemp1
.94c3	10 f7		bpl $94bc			bpl		_SCLenLoop
.94c5	a9 09		lda #$09		lda	#9
.94c7	4c 6d 93	jmp $936d		jmp	ErrorHandler
.94ca					_SCLExit:
.94ca	7a		ply				ply
.94cb	60		rts				rts
.94cc					_SCCopy:
.94cc	5a		phy				phy
.94cd	a0 00		ldy #$00			ldy 	#0
.94cf					_SCCopyLoop:
.94cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d1	f0 06		beq $94d9			beq 	_SCCExit
.94d3	20 f1 af	jsr $aff1			jsr 	StringTempWrite
.94d6	c8		iny				iny
.94d7	80 f6		bra $94cf			bra 	_SCCopyLoop
.94d9					_SCCExit:
.94d9	7a		ply				ply
.94da	60		rts				rts
.94db					_SCType:
.94db	4c 97 ac	jmp $ac97			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a6c0					IntegerDivide:
.a6c0	fa		plx				plx
.a6c1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a6c4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a6c7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a6c8	0a		asl a				asl 	a
.a6c9	10 05		bpl $a6d0			bpl 	_NotRef
.a6cb	48		pha				pha
.a6cc	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a6cf	68		pla				pla
.a6d0					_NotRef:
.a6d0	0a		asl a				asl 	a
.a6d1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a6d3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a6d6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a6d9	f0 03		beq $a6de			beq 	_IntegerCode 				; if clear, then we have two integers
.a6db	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.a6de					_IntegerCode:
.a6de	20 00 a7	jsr $a700			jsr 	CheckDivideZero 			; do div zero check
.a6e1	20 38 a7	jsr $a738			jsr 	Int32Divide 				; do the division
.a6e4	20 f5 a7	jsr $a7f5			jsr 	CalculateSign 				; calculate result sign
.a6e7					NSMCopyPlusTwoToZero:
.a6e7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a6ea	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6ed	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a6f0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6f3	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a6f6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6f9	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a6fc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6ff	60		rts				rts
.a700					CheckDivideZero:
.a700	e8		inx				inx
.a701	20 55 9f	jsr $9f55			jsr 	NSMIsZero
.a704	f0 02		beq $a708			beq 	_CDVError
.a706	ca		dex				dex
.a707	60		rts				rts
.a708					_CDVError:
.a708	a9 03		lda #$03		lda	#3
.a70a	4c 6d 93	jmp $936d		jmp	ErrorHandler
.a70d					IntegerModulus:
.a70d	fa		plx				plx
.a70e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a711	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a714	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a715	0a		asl a				asl 	a
.a716	10 05		bpl $a71d			bpl 	_NotRef
.a718	48		pha				pha
.a719	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a71c	68		pla				pla
.a71d					_NotRef:
.a71d	0a		asl a				asl 	a
.a71e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a720	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a723	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a726	f0 03		beq $a72b			beq 	_IntegerCode 				; if clear, then we have two integers
.a728	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.a72b					_IntegerCode:
.a72b					IntegerModulusNoCheck:
.a72b	20 00 a7	jsr $a700			jsr 	CheckDivideZero 			; do div zero check
.a72e	20 38 a7	jsr $a738			jsr 	Int32Divide 				; do the division
.a731	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a734	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a737	60		rts				rts
.a738					Int32Divide:
.a738	48		pha				pha 								; save AXY
.a739	5a		phy				phy
.a73a	20 fc 9e	jsr $9efc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a73d	20 21 9f	jsr $9f21			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a740	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a742					_I32DivideLoop:
.a742	e8		inx				inx
.a743	e8		inx				inx
.a744	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a747	ca		dex				dex
.a748	ca		dex				dex
.a749	20 3b 9f	jsr $9f3b			jsr 	NSMRotateLeft
.a74c	20 78 a7	jsr $a778			jsr 	DivideCheckSubtract 		; check if subtract possible
.a74f	90 03		bcc $a754			bcc 	_I32DivideNoCarryIn
.a751	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a754					_I32DivideNoCarryIn:
.a754	88		dey				dey 								; loop round till division completed.
.a755	d0 eb		bne $a742			bne 	_I32DivideLoop
.a757	7a		ply				ply 								; restore AXY and exit
.a758	68		pla				pla
.a759	60		rts				rts
.a75a					Int32ShiftDivide:
.a75a	48		pha				pha 								; save AY
.a75b	5a		phy				phy
.a75c	e8		inx				inx 								; clear S[X+2]
.a75d	e8		inx				inx
.a75e	20 25 9f	jsr $9f25			jsr 	NSMSetZero
.a761	ca		dex				dex
.a762	ca		dex				dex
.a763	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a765					_I32SDLoop:
.a765	20 78 a7	jsr $a778			jsr 	DivideCheckSubtract 		; check if subtract possible
.a768	e8		inx				inx
.a769	e8		inx				inx
.a76a	20 3b 9f	jsr $9f3b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a76d	ca		dex				dex
.a76e	ca		dex				dex
.a76f	20 3b 9f	jsr $9f3b			jsr 	NSMRotateLeft
.a772	88		dey				dey 	 							; do 31 times
.a773	d0 f0		bne $a765			bne 	_I32SDLoop
.a775	7a		ply				ply 								; restore AY and exit
.a776	68		pla				pla
.a777	60		rts				rts
.a778					DivideCheckSubtract:
.a778	20 88 95	jsr $9588			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a77b	b0 04		bcs $a781			bcs 	_DCSExit 					; if carry set, then could do, exit
.a77d	20 62 95	jsr $9562			jsr 	AddTopTwoStack 				; add it back in
.a780	18		clc				clc 								; and return False
.a781					_DCSExit:
.a781	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a782					MulInteger:
.a782	fa		plx				plx
.a783	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a786	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a789	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a78a	0a		asl a				asl 	a
.a78b	10 05		bpl $a792			bpl 	_NotRef
.a78d	48		pha				pha
.a78e	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a791	68		pla				pla
.a792					_NotRef:
.a792	0a		asl a				asl 	a 							; put MSB of type into A:7
.a793	30 0b		bmi $a7a0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a795	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a798	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a79b	f0 06		beq $a7a3			beq 	_IntegerCode 				; if clear, then we have two integers
.a79d	4c d6 a9	jmp $a9d6			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a7a0					_StringData:
.a7a0	4c a1 ac	jmp $aca1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a7a3					_IntegerCode:
.a7a3	20 b0 a7	jsr $a7b0			jsr 	MultiplyShort
.a7a6	c9 00		cmp #$00			cmp 	#0
.a7a8	f0 05		beq $a7af			beq 	_MIExit
.a7aa	a9 04		lda #$04		lda	#4
.a7ac	4c 6d 93	jmp $936d		jmp	ErrorHandler
.a7af					_MIExit:
.a7af	60		rts				rts
.a7b0					MultiplyShort:
.a7b0	5a		phy				phy 								; save Y
.a7b1	20 fc 9e	jsr $9efc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a7b4	20 21 9f	jsr $9f21			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a7b7	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a7b9					_I32MLoop:
.a7b9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a7bc	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a7bf	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a7c2	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a7c5	f0 28		beq $a7ef			beq 	_I32MExit 					; exit if zero
.a7c7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a7ca	29 01		and #$01			and 	#1
.a7cc	f0 0e		beq $a7dc			beq 	_I32MNoAdd
.a7ce	20 62 95	jsr $9562			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a7d1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a7d4	10 06		bpl $a7dc			bpl 	_I32MNoAdd
.a7d6					_I32ShiftRight:
.a7d6	20 48 9f	jsr $9f48			jsr 	NSMShiftRight 				; shift S[X] right
.a7d9	c8		iny				iny 								; increment shift count
.a7da	80 0a		bra $a7e6			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a7dc					_I32MNoAdd:
.a7dc	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a7df	70 f5		bvs $a7d6			bvs 	_I32ShiftRight 				; instead.
.a7e1	e8		inx				inx
.a7e2	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a7e5	ca		dex				dex
.a7e6					_I32MShiftUpper:
.a7e6	e8		inx				inx 								; shift S[X+2] right
.a7e7	e8		inx				inx
.a7e8	20 48 9f	jsr $9f48			jsr 	NSMShiftRight
.a7eb	ca		dex				dex
.a7ec	ca		dex				dex
.a7ed	80 ca		bra $a7b9			bra 	_I32MLoop 					; try again.
.a7ef					_I32MExit:
.a7ef	20 f5 a7	jsr $a7f5			jsr 	CalculateSign
.a7f2	98		tya				tya 								; shift in A
.a7f3	7a		ply				ply 								; restore Y and exit
.a7f4	60		rts				rts
.a7f5					CalculateSign:
.a7f5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a7f8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a7fb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a7fe	0a		asl a				asl 	a 							; shift bit 7 into carry
.a7ff	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a802	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.94de					CompareStrings:
.94de	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.94e1	3d 01 04	and $0401,x			and 	NSStatus+1,x
.94e4	29 10		and #$10			and 	#NSBIsString
.94e6	f0 2c		beq $9514			beq 	_CSTypeError
.94e8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.94eb	85 36		sta $36				sta 	zTemp0
.94ed	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.94f0	85 37		sta $37				sta 	zTemp0+1
.94f2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.94f5	85 38		sta $38				sta 	zTemp1
.94f7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.94fa	85 39		sta $39				sta 	zTemp1+1
.94fc	5a		phy				phy 								; save Y so we can access strings
.94fd	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.94ff					_CSLoop:
.94ff	c8		iny				iny
.9500	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9502	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9504	d0 06		bne $950c			bne 	_CSDifferent
.9506	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9508	d0 f5		bne $94ff			bne 	_CSLoop 					; still comparing
.950a					_CSExit:
.950a	7a		ply				ply 								; reached end, return zero in A from EOS
.950b	60		rts				rts
.950c					_CSDifferent:
.950c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.950e	90 fa		bcc $950a			bcc		_CSExit
.9510	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9512	80 f6		bra $950a			bra 	_CSExit
.9514					_CSTypeError:
.9514	4c 97 ac	jmp $ac97			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9517					ShiftLeft:
.9517	38		sec				sec
.9518	80 01		bra $951b			bra 	ShiftMain
.951a					ShiftRight:
.951a	18		clc				clc
.951b					ShiftMain:
.951b	fa		plx				plx 								; restore X
.951c	08		php				php 								; save direction
.951d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9520	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9523	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9524	0a		asl a				asl 	a
.9525	10 05		bpl $952c			bpl 	_NotRef
.9527	48		pha				pha
.9528	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.952b	68		pla				pla
.952c					_NotRef:
.952c	0a		asl a				asl 	a
.952d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.952f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9532	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9535	f0 03		beq $953a			beq 	_IntegerCode 				; if clear, then we have two integers
.9537	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.953a					_IntegerCode:
.953a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.953d	29 e0		and #$e0			and 	#$E0
.953f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9542	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9545	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9548	d0 13		bne $955d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.954a					_SMLoop:
.954a	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.954d	30 11		bmi $9560			bmi 	_SMExit 					; exit if done.
.954f	28		plp				plp 								; restore direcition setting
.9550	08		php				php
.9551	90 05		bcc $9558			bcc 	_SMRight
.9553	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; shift left if CS
.9556	80 f2		bra $954a			bra 	_SMLoop
.9558					_SMRight:
.9558	20 48 9f	jsr $9f48			jsr 	NSMShiftRight 				; shift right if CC
.955b	80 ed		bra $954a			bra 	_SMLoop
.955d					_SMExit0:
.955d	20 25 9f	jsr $9f25			jsr 	NSMSetZero 					; return zero.
.9560					_SMExit:
.9560	28		plp				plp 								; throw direction
.9561	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9562					AddTopTwoStack:
.9562	18		clc				clc
.9563	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9566	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9569	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.956c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.956f	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9572	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9575	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9578	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.957b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.957e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9581	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9584	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9587	60		rts				rts
.9588					SubTopTwoStack:
.9588	38		sec				sec
.9589	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.958c	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.958f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9592	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9595	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9598	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.959b	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.959e	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.95a1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95a4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95a7	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.95aa	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95ad	60		rts				rts
.95ae					AddInteger:
.95ae	fa		plx				plx
.95af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95b2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95b5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95b6	0a		asl a				asl 	a
.95b7	10 05		bpl $95be			bpl 	_NotRef
.95b9	48		pha				pha
.95ba	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95bd	68		pla				pla
.95be					_NotRef:
.95be	0a		asl a				asl 	a 							; put MSB of type into A:7
.95bf	30 0b		bmi $95cc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95c1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95c4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95c7	f0 06		beq $95cf			beq 	_IntegerCode 				; if clear, then we have two integers
.95c9	4c 5e a8	jmp $a85e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.95cc					_StringData:
.95cc	4c 81 94	jmp $9481			jmp 	StringConcat							; at least one string - don't know both are strings.
.95cf					_IntegerCode:
.95cf					AddCode:
.95cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.95d2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.95d5	10 8b		bpl $9562			bpl 	AddTopTwoStack
.95d7	20 88 95	jsr $9588			jsr 	SubTopTwoStack 				; do a physical subtraction
.95da	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.95dd	10 09		bpl $95e8			bpl 	_AddExit
.95df	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.95e2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95e5	20 da 9e	jsr $9eda			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.95e8					_AddExit:
.95e8	60		rts				rts
.95e9					SubInteger:
.95e9	fa		plx				plx
.95ea	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95ed	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95f0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95f1	0a		asl a				asl 	a
.95f2	10 05		bpl $95f9			bpl 	_NotRef
.95f4	48		pha				pha
.95f5	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95f8	68		pla				pla
.95f9					_NotRef:
.95f9	0a		asl a				asl 	a 							; put MSB of type into A:7
.95fa	30 0b		bmi $9607			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95fc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95ff	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9602	f0 06		beq $960a			beq 	_IntegerCode 				; if clear, then we have two integers
.9604	4c 63 a8	jmp $a863			jmp 	FloatingPointSub 							; otherwise at least one float.
.9607					_StringData:
.9607	4c a1 ac	jmp $aca1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.960a					_IntegerCode:
.960a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.960d	49 80		eor #$80			eor 	#$80
.960f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9612	80 bb		bra $95cf			bra 	AddCode 					; and do the same code as add.
.9614					AndInteger:
.9614	fa		plx				plx
.9615	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9618	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.961b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.961c	0a		asl a				asl 	a
.961d	10 05		bpl $9624			bpl 	_NotRef
.961f	48		pha				pha
.9620	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9623	68		pla				pla
.9624					_NotRef:
.9624	0a		asl a				asl 	a
.9625	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9627	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.962a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.962d	f0 03		beq $9632			beq 	_IntegerCode 				; if clear, then we have two integers
.962f	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.9632					_IntegerCode:
.9632	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9635	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9638	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.963b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.963e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9641	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9644	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9647	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.964a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.964d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9650	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9653	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9656	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9659	60		rts				rts
.965a					OraInteger:
.965a	fa		plx				plx
.965b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.965e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9661	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9662	0a		asl a				asl 	a
.9663	10 05		bpl $966a			bpl 	_NotRef
.9665	48		pha				pha
.9666	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9669	68		pla				pla
.966a					_NotRef:
.966a	0a		asl a				asl 	a
.966b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.966d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9670	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9673	f0 03		beq $9678			beq 	_IntegerCode 				; if clear, then we have two integers
.9675	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.9678					_IntegerCode:
.9678	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.967b	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.967e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9681	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9684	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9687	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.968a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.968d	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9690	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9693	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9696	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9699	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.969c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.969f	60		rts				rts
.96a0					EorInteger:
.96a0	fa		plx				plx
.96a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96a4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96a7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96a8	0a		asl a				asl 	a
.96a9	10 05		bpl $96b0			bpl 	_NotRef
.96ab	48		pha				pha
.96ac	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96af	68		pla				pla
.96b0					_NotRef:
.96b0	0a		asl a				asl 	a
.96b1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96b3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96b6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96b9	f0 03		beq $96be			beq 	_IntegerCode 				; if clear, then we have two integers
.96bb	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.96be					_IntegerCode:
.96be	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96c1	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.96c4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96c7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96ca	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.96cd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96d0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96d3	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.96d6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96d9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96dc	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.96df	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96e2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.96e5	60		rts				rts
.96e6					WordIndirect:
.96e6	fa		plx				plx
.96e7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96ea	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96ed	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96ee	0a		asl a				asl 	a
.96ef	10 05		bpl $96f6			bpl 	_NotRef
.96f1	48		pha				pha
.96f2	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96f5	68		pla				pla
.96f6					_NotRef:
.96f6	0a		asl a				asl 	a
.96f7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96f9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96fc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96ff	f0 03		beq $9704			beq 	_IntegerCode 				; if clear, then we have two integers
.9701	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.9704					_IntegerCode:
.9704	20 cf 95	jsr $95cf			jsr 	AddCode 					; add the two values
.9707	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9709	9d 00 04	sta $0400,x			sta 	NSStatus,x
.970c	60		rts				rts
.970d					ByteIndirect:
.970d	fa		plx				plx
.970e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9711	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9714	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9715	0a		asl a				asl 	a
.9716	10 05		bpl $971d			bpl 	_NotRef
.9718	48		pha				pha
.9719	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.971c	68		pla				pla
.971d					_NotRef:
.971d	0a		asl a				asl 	a
.971e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9720	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9723	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9726	f0 03		beq $972b			beq 	_IntegerCode 				; if clear, then we have two integers
.9728	4c 97 ac	jmp $ac97			jmp 	TypeError 					; anything else, type mismatch.
.972b					_IntegerCode:
.972b	20 cf 95	jsr $95cf			jsr 	AddCode 					; add the two values
.972e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9730	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9733	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a803					ConvertInt16:
.a803	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a806	8e 10 04	stx $0410			stx 	NSMantissa1
.a809	9c 18 04	stz $0418			stz 	NSMantissa2
.a80c	9c 20 04	stz $0420			stz 	NSMantissa3
.a80f	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a812	a2 00		ldx #$00			ldx 	#0 							; stack level
.a814	a9 0a		lda #$0a			lda 	#10 						; base
.a816	80 00		bra $a818			bra 	ConvertInt32
.a818					ConvertInt32:
.a818	5a		phy				phy
.a819	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a81b	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a81e	10 08		bpl $a828			bpl 	_CI32NotNeg
.a820	48		pha				pha
.a821	a9 2d		lda #$2d			lda 	#'-'
.a823	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a826	c8		iny				iny
.a827	68		pla				pla
.a828					_CI32NotNeg:
.a828	20 36 a8	jsr $a836			jsr 	_CI32DivideConvert 			; recursive conversion
.a82b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a82d	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a830	7a		ply				ply
.a831	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a833	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a835	60		rts				rts
.a836					_CI32DivideConvert:
.a836	e8		inx				inx 								; write to next slot up
.a837	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.a83a	ca		dex				dex
.a83b	20 38 a7	jsr $a738			jsr 	Int32Divide 				; divide
.a83e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a841	48		pha				pha
.a842	20 e7 a6	jsr $a6e7			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a845	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; is it zero ?
.a848	f0 06		beq $a850			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a84a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a84d	20 36 a8	jsr $a836			jsr 	_CI32DivideConvert 			; and recusrively call.
.a850					_CI32NoRecurse:
.a850	68		pla				pla 								; remainder
.a851	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a853	90 02		bcc $a857			bcc 	_CI32NotHex
.a855	69 26		adc #$26			adc 	#6+32
.a857					_CI32NotHex:
.a857	69 30		adc #$30			adc 	#48
.a859	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a85c	c8		iny				iny
.a85d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9734					PrecedenceLevel:
>9734	04					.byte	 4	; $00 <<
>9735	02					.byte	 2	; $01 <=
>9736	02					.byte	 2	; $02 <>
>9737	00					.byte	 0	; $03 !!3
>9738	00					.byte	 0	; $04 ><
>9739	02					.byte	 2	; $05 >=
>973a	04					.byte	 4	; $06 >>
>973b	00					.byte	 0	; $07 !!7
>973c	00					.byte	 0	; $08 !!8
>973d	00					.byte	 0	; $09 !!9
>973e	00					.byte	 0	; $0a !!10
>973f	00					.byte	 0	; $0b !!11
>9740	00					.byte	 0	; $0c !!12
>9741	00					.byte	 0	; $0d !!13
>9742	00					.byte	 0	; $0e !!14
>9743	00					.byte	 0	; $0f !!15
>9744	00					.byte	 0	; $10 @
>9745	00					.byte	 0	; $11 !!17
>9746	00					.byte	 0	; $12 !!18
>9747	00					.byte	 0	; $13 [
>9748	04					.byte	 4	; $14 \
>9749	00					.byte	 0	; $15 ]
>974a	01					.byte	 1	; $16 ^
>974b	00					.byte	 0	; $17 _
>974c	00					.byte	 0	; $18 `
>974d	00					.byte	 0	; $19 !!25
>974e	00					.byte	 0	; $1a !!26
>974f	00					.byte	 0	; $1b {
>9750	01					.byte	 1	; $1c |
>9751	00					.byte	 0	; $1d }
>9752	00					.byte	 0	; $1e ~
>9753	00					.byte	 0	; $1f [7m<7F>[m
>9754	00					.byte	 0	; $20
>9755	05					.byte	 5	; $21 !
>9756	00					.byte	 0	; $22 "
>9757	00					.byte	 0	; $23 #
>9758	05					.byte	 5	; $24 $
>9759	04					.byte	 4	; $25 %
>975a	01					.byte	 1	; $26 &
>975b	00					.byte	 0	; $27 '
>975c	00					.byte	 0	; $28 (
>975d	00					.byte	 0	; $29 )
>975e	04					.byte	 4	; $2a *
>975f	03					.byte	 3	; $2b +
>9760	00					.byte	 0	; $2c ,
>9761	03					.byte	 3	; $2d -
>9762	00					.byte	 0	; $2e .
>9763	04					.byte	 4	; $2f /
>9764	00					.byte	 0	; $30 0
>9765	00					.byte	 0	; $31 1
>9766	00					.byte	 0	; $32 2
>9767	00					.byte	 0	; $33 3
>9768	00					.byte	 0	; $34 4
>9769	00					.byte	 0	; $35 5
>976a	00					.byte	 0	; $36 6
>976b	00					.byte	 0	; $37 7
>976c	00					.byte	 0	; $38 8
>976d	00					.byte	 0	; $39 9
>976e	00					.byte	 0	; $3a :
>976f	00					.byte	 0	; $3b ;
>9770	02					.byte	 2	; $3c <
>9771	02					.byte	 2	; $3d =
>9772	02					.byte	 2	; $3e >
>9773	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9774					EvaluateExpressionAt0:
.9774	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9776					EvaluateExpression:
.9776	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9778					EvaluateExpressionAtPrecedence:
.9778	48		pha				pha 								; save precedence level
.9779	20 47 9a	jsr $9a47			jsr 	EvaluateTerm 				; evaluate term into level X.
.977c	68		pla				pla 								; restore precedence level.
.977d					_EXPRLoop:
.977d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.977f	b1 30		lda ($30),y			lda 	(codePtr),y
.9781	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9783	b0 25		bcs $97aa			bcs 	_EXPRExit
.9785	da		phx				phx 								; read the operator precedence
.9786	aa		tax				tax
.9787	bd 34 97	lda $9734,x			lda 	PrecedenceLevel,x
.978a	fa		plx				plx
.978b	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.978d	f0 1b		beq $97aa			beq 	_EXPRExit
.978f	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9791	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9793	c5 37		cmp $37				cmp 	zTemp0+1
.9795	b0 13		bcs $97aa			bcs		_EXPRExit 					; if current >= operator exit
.9797	48		pha				pha 								; save current precedence.
.9798	b1 30		lda ($30),y			lda 	(codePtr),y
.979a	c8		iny				iny
.979b	48		pha				pha
.979c	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.979e	e8		inx				inx 								; work out the right hand side.
.979f	20 78 97	jsr $9778			jsr 	EvaluateExpressionAtPrecedence
.97a2	ca		dex				dex
.97a3	68		pla				pla 								; get operator, call the code.
.97a4	20 ad 97	jsr $97ad			jsr 	_EXPRCaller
.97a7	68		pla				pla 								; restore precedence level
.97a8	80 d3		bra $977d			bra 	_EXPRLoop 					; and go round.
.97aa					_EXPRExit:
.97aa	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.97ac	60		rts				rts
.97ad					_EXPRCaller:
.97ad	da		phx				phx 								; save on stack, first thing is to restore it
.97ae	0a		asl a				asl 	a 							; double so can use vectors into X
.97af	aa		tax				tax
.97b0	7c b4 8f	jmp ($8fb4,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a85e					FloatingPointAdd:
.a85e	20 ff a9	jsr $a9ff			jsr 	FloatPrepare 				; prepare for floats
.a861	80 0b		bra $a86e			bra 	FloatAdd
.a863					FloatingPointSub:
.a863	20 ff a9	jsr $a9ff			jsr 	FloatPrepare 				; prepare for floats
.a866					FloatSubtract:
.a866	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a869	49 80		eor #$80			eor 	#$80
.a86b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a86e					FloatAdd:
.a86e	48		pha				pha
.a86f	5a		phy				phy
.a870	20 10 aa	jsr $aa10			jsr 	NSNormalise 				; normalise S[X]
.a873	f0 54		beq $a8c9			beq 	_FAReturn1
.a875	e8		inx				inx 								; normalise S[X+1]
.a876	20 10 aa	jsr $aa10			jsr 	NSNormalise
.a879	ca		dex				dex
.a87a	c9 00		cmp #$00			cmp 	#0
.a87c	f0 6f		beq $a8ed			beq 	_FAExit 					; if so, just return A
.a87e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a881	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a884	f0 1b		beq $a8a1			beq 	_FAExponentsEqual
.a886	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a889	a8		tay				tay
.a88a	38		sec				sec 								; do a signed comparison of the exponents.
.a88b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a88e	50 02		bvc $a892			bvc 	_FANoSignedChange
.a890	49 80		eor #$80			eor 	#$80
.a892					_FANoSignedChange:
.a892	29 80		and #$80			and 	#$80
.a894	10 03		bpl $a899			bpl 	_FAHaveMax
.a896	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a899					_FAHaveMax:
.a899	20 f0 a8	jsr $a8f0			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a89c	e8		inx				inx
.a89d	20 f0 a8	jsr $a8f0			jsr 	_FAShiftToExponent
.a8a0	ca		dex				dex
.a8a1					_FAExponentsEqual:
.a8a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a8a4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a8a7	30 10		bmi $a8b9			bmi 	_FADifferentSigns
.a8a9	20 62 95	jsr $9562			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a8ac	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a8af	10 3c		bpl $a8ed			bpl 	_FAExit 					; if no, we are done.
.a8b1	20 48 9f	jsr $9f48			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a8b4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a8b7	80 34		bra $a8ed			bra 	_FAExit
.a8b9					_FADifferentSigns:
.a8b9	20 88 95	jsr $9588			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a8bc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a8bf	10 2c		bpl $a8ed			bpl 	_FAExit 					; if no, we are done.
.a8c1	20 d1 9e	jsr $9ed1			jsr 	NSMNegate 					; netate result
.a8c4	20 da 9e	jsr $9eda			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a8c7	80 24		bra $a8ed			bra 	_FAExit
.a8c9					_FAReturn1:
.a8c9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a8cc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a8cf	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a8d2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a8d5	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a8d8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a8db	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a8de	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a8e1	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a8e4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a8e7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a8ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a8ed					_FAExit:
.a8ed	7a		ply				ply
.a8ee	68		pla				pla
.a8ef	60		rts				rts
.a8f0					_FAShiftToExponent:
.a8f0					_FAShiftToExponent2:
.a8f0	98		tya				tya 								; compare Y to exponent
.a8f1	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a8f4	f0 08		beq $a8fe			beq 	_FASEExit 					; exit if so.
.a8f6	20 48 9f	jsr $9f48			jsr 	NSMShiftRight	 			; shift the mantissa right
.a8f9	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a8fc	80 f2		bra $a8f0			bra 	_FAShiftToExponent2
.a8fe					_FASEExit:
.a8fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a8ff					CompareFloat:
.a8ff	20 66 a8	jsr $a866			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a902	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a905	29 f8		and #$f8			and 	#$F8
.a907	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a90a	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a90d	f0 09		beq $a918			beq 	_FCExit 					; zero, so approximately identical
.a90f	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a911	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a914	10 02		bpl $a918			bpl 	_FCExit
.a916					_FCNegative:
.a916	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a918					_FCExit:
.a918	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a919					FDivideCommand:
.a919	fa		plx				plx	 								; restore stack position
.a91a	20 ff a9	jsr $a9ff			jsr 	FloatPrepare 				; prepare for floats
.a91d					FloatDivide:
.a91d	48		pha				pha
.a91e	e8		inx				inx
.a91f	20 10 aa	jsr $aa10			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a922	ca		dex				dex
.a923	c9 00		cmp #$00			cmp 	#0
.a925	f0 20		beq $a947			beq 	_FDZero
.a927	20 10 aa	jsr $aa10			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a92a	f0 19		beq $a945			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a92c	20 5a a7	jsr $a75a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a92f	20 e7 a6	jsr $a6e7			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a932	20 10 aa	jsr $aa10			jsr		NSNormalise 				; renormalise
.a935	20 f5 a7	jsr $a7f5			jsr 	CalculateSign 				; calculate result sign
.a938	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a93b	38		sec				sec
.a93c	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a93f	38		sec				sec
.a940	e9 1e		sbc #$1e			sbc 	#30
.a942	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a945					_FDExit:
.a945	68		pla				pla
.a946	60		rts				rts
.a947					_FDZero:
.a947	a9 03		lda #$03		lda	#3
.a949	4c 6d 93	jmp $936d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a94c					FloatFractionalPart:
.a94c	5a		phy				phy
.a94d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a950	29 7f		and #$7f			and 	#$7F
.a952	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a955	20 10 aa	jsr $aa10			jsr 	NSNormalise
.a958	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a95b	38		sec				sec
.a95c	e9 e0		sbc #$e0			sbc 	#$E0
.a95e	90 31		bcc $a991			bcc 	_FFPExit 					; already fractional
.a960	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a962	b0 2a		bcs $a98e			bcs 	_FFPZero
.a964	a8		tay				tay 								; put count to do in Y
.a965	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a968	20 93 a9	jsr $a993			jsr 	_FFPPartial
.a96b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a96e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a971	20 93 a9	jsr $a993			jsr 	_FFPPartial
.a974	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a977	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a97a	20 93 a9	jsr $a993			jsr 	_FFPPartial
.a97d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a980	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a983	20 93 a9	jsr $a993			jsr 	_FFPPartial
.a986	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a989	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; zeroed check.
.a98c	d0 03		bne $a991			bne 	_FFPExit
.a98e					_FFPZero:
.a98e	20 25 9f	jsr $9f25			jsr 	NSMSetZero
.a991					_FFPExit:
.a991	7a		ply				ply
.a992	60		rts				rts
.a993					_FFPPartial:
.a993	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a995	f0 17		beq $a9ae			beq 	_FFFPPExit
.a997	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a999	b0 0c		bcs $a9a7			bcs 	_FFFPPWholeByte
.a99b	5a		phy				phy
.a99c					_FFFPPLeft:
.a99c	0a		asl a				asl 	a
.a99d	88		dey				dey
.a99e	d0 fc		bne $a99c			bne 	_FFFPPLeft
.a9a0	7a		ply				ply
.a9a1					_FFFPPRight:
.a9a1	4a		lsr a				lsr 	a
.a9a2	88		dey				dey
.a9a3	d0 fc		bne $a9a1			bne 	_FFFPPRight
.a9a5	80 07		bra $a9ae			bra 	_FFFPPExit
.a9a7					_FFFPPWholeByte:
.a9a7	98		tya				tya 								; subtract 8 from count
.a9a8	38		sec				sec
.a9a9	e9 08		sbc #$08			sbc 	#8
.a9ab	a8		tay				tay
.a9ac	a9 00		lda #$00			lda 	#0 							; and clear all
.a9ae					_FFFPPExit:
.a9ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a9af					FloatIntegerPart:
.a9af	48		pha				pha
.a9b0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a9b3	f0 1f		beq $a9d4			beq 	_FIPExit 					; if so do nothing
.a9b5	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; is it zero ?
.a9b8	f0 17		beq $a9d1			beq 	_FIPZero 					; if so return zero.
.a9ba	20 10 aa	jsr $aa10			jsr 	NSNormalise 				; normalise
.a9bd	f0 12		beq $a9d1			beq 	_FIPZero 					; normalised to zero, exit zero
.a9bf					_FIPShift:
.a9bf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a9c2	10 08		bpl $a9cc			bpl 	_FIPCheckZero
.a9c4	20 48 9f	jsr $9f48			jsr 	NSMShiftRight 				; shift mantissa right
.a9c7	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a9ca	80 f3		bra $a9bf			bra 	_FIPShift
.a9cc					_FIPCheckZero:
.a9cc	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; avoid -0 problem
.a9cf	d0 03		bne $a9d4			bne 	_FIPExit 					; set to zero if mantissa zero.
.a9d1					_FIPZero:
.a9d1	20 25 9f	jsr $9f25			jsr 	NSMSetZero
.a9d4					_FIPExit:
.a9d4	68		pla				pla
.a9d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a9d6					FloatingPointMultiply:
.a9d6	20 ff a9	jsr $a9ff			jsr 	FloatPrepare 				; prepare for floats
.a9d9					FloatMultiply:
.a9d9	48		pha				pha
.a9da	20 10 aa	jsr $aa10			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a9dd	f0 1b		beq $a9fa			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a9df	e8		inx				inx
.a9e0	20 10 aa	jsr $aa10			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a9e3	ca		dex				dex
.a9e4	c9 00		cmp #$00			cmp 	#0
.a9e6	f0 0f		beq $a9f7			beq 	_FDSetZero
.a9e8	20 b0 a7	jsr $a7b0			jsr 	MultiplyShort 				; calculate the result.
.a9eb	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a9ee	18		clc				clc
.a9ef	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a9f2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a9f5	80 03		bra $a9fa			bra 	_FDExit
.a9f7					_FDSetZero:
.a9f7	20 25 9f	jsr $9f25			jsr 	NSMSetZero 					; return 0
.a9fa					_FDExit:
.a9fa	20 10 aa	jsr $aa10			jsr 	NSNormalise 				; normalise the result
.a9fd	68		pla				pla
.a9fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a9ff					FloatPrepare:
.a9ff	20 86 98	jsr $9886			jsr 	DereferenceTopTwo 			; dereference the top two values
.aa02	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aa05	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa08	29 10		and #$10			and 	#NSBIsString
.aa0a	d0 01		bne $aa0d			bne 	_FDType
.aa0c	60		rts				rts
.aa0d					_FDType:
.aa0d	4c 97 ac	jmp $ac97			jmp 	TypeError
.aa10					NSNormalise:
.aa10	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.aa13	29 80		and #$80			and 	#$80
.aa15	09 08		ora #$08			ora 	#NSTFloat
.aa17	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa1a	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; if zero exit
.aa1d	d0 09		bne $aa28			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.aa1f	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aa22	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.aa25	a9 00		lda #$00			lda 	#0 							; set Z flag
.aa27	60		rts				rts
.aa28					_NSNormaliseOptimise:
.aa28	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.aa2b	d0 22		bne $aa4f			bne 	_NSNormaliseLoop
.aa2d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.aa30	30 1d		bmi $aa4f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.aa32	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa35	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa38	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa3b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa3e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa41	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.aa44	bd 28 04	lda $0428,x			lda 	NSExponent,x
.aa47	38		sec				sec
.aa48	e9 08		sbc #$08			sbc 	#8
.aa4a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa4d	80 d9		bra $aa28			bra 	_NSNormaliseOptimise
.aa4f					_NSNormaliseLoop:
.aa4f	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.aa52	70 08		bvs $aa5c			bvs 	_NSNExit 					; exit if so with Z flag clear
.aa54	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; shift mantissa left
.aa57	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.aa5a	80 f3		bra $aa4f			bra 	_NSNormaliseLoop
.aa5c					_NSNExit:
.aa5c	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.aa5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.97b3					AssignNumber:
.97b3	5a		phy				phy
.97b4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.97b7	85 36		sta $36				sta 	zTemp0
.97b9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97bc	85 37		sta $37				sta 	zTemp0+1
.97be	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.97c1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.97c3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97c6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.97c8	c9 08		cmp #$08			cmp 	#NSTFloat
.97ca	f0 2a		beq $97f6			beq 	_ANFloat
.97cc	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.97cf	f0 05		beq $97d6			beq		_ANNotFloat
.97d1	e8		inx				inx
.97d2	20 af a9	jsr $a9af			jsr 	FloatIntegerPart 			; make it an integer
.97d5	ca		dex				dex
.97d6					_ANNotFloat:
.97d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.97d9	29 03		and #$03			and 	#3
.97db	d0 05		bne $97e2			bne 	_ANByteWord
.97dd	20 02 98	jsr $9802			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.97e0	80 1e		bra $9800			bra 	_ANExit
.97e2					_ANByteWord:
.97e2	48		pha				pha 								; save count
.97e3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.97e6	92 36		sta ($36)			sta 	(zTemp0)
.97e8	68		pla				pla
.97e9	c9 01		cmp #$01			cmp	 	#1
.97eb	f0 13		beq $9800			beq 	_ANExit
.97ed	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.97f0	a0 01		ldy #$01			ldy 	#1
.97f2	91 36		sta ($36),y			sta 	(zTemp0),y
.97f4	80 0a		bra $9800			bra 	_ANExit
.97f6					_ANFloat:
.97f6	20 02 98	jsr $9802			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.97f9	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.97fc	a0 04		ldy #$04			ldy 	#4
.97fe	91 36		sta ($36),y			sta 	(zTemp0),y
.9800					_ANExit:
.9800	7a		ply				ply
.9801	60		rts				rts
.9802					_ANCopy4PackSign:
.9802	a0 03		ldy #$03			ldy 	#3
.9804	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9807	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9809	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.980c	91 36		sta ($36),y			sta 	(zTemp0),y
.980e	88		dey				dey
.980f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9812	91 36		sta ($36),y			sta 	(zTemp0),y
.9814	88		dey				dey
.9815	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9818	91 36		sta ($36),y			sta 	(zTemp0),y
.981a	88		dey				dey
.981b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.981e	91 36		sta ($36),y			sta 	(zTemp0),y
.9820	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9821					AssignString:
.9821	5a		phy				phy
.9822	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9825	85 38		sta $38				sta 	zTemp1
.9827	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.982a	85 39		sta $39				sta 	zTemp1+1
.982c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.982f	85 36		sta $36				sta 	zTemp0
.9831	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9834	85 37		sta $37				sta 	zTemp0+1
.9836	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9838	b1 36		lda ($36),y			lda 	(zTemp0),y
.983a	f0 23		beq $985f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.983c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.983d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.983f	e9 02		sbc #$02			sbc 	#2
.9841	85 3c		sta $3c				sta 	zsTemp
.9843	a0 01		ldy #$01			ldy 	#1
.9845	b1 36		lda ($36),y			lda 	(zTemp0),y
.9847	e9 00		sbc #$00			sbc 	#0
.9849	85 3d		sta $3d				sta 	zsTemp+1
.984b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.984d					_ASGetLength:
.984d	c8		iny				iny
.984e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9850	d0 fb		bne $984d			bne 	_ASGetLength
.9852	98		tya				tya 								; is this length <= current length
.9853	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9855	90 20		bcc $9877			bcc 	_ASCopyString
.9857	f0 1e		beq $9877			beq 	_ASCopyString
.9859	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.985b	a0 01		ldy #$01			ldy 	#1
.985d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.985f					_ASNewStringRequired:
.985f	e8		inx				inx 								; concrete the new string.
.9860	20 32 af	jsr $af32			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9863	ca		dex				dex
.9864	18		clc				clc
.9865	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9868	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.986a	92 36		sta ($36)			sta 	(zTemp0)
.986c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.986f	69 00		adc #$00			adc 	#0
.9871	a0 01		ldy #$01			ldy 	#1
.9873	91 36		sta ($36),y			sta 	(zTemp0),y
.9875	80 0d		bra $9884			bra 	_ASExit
.9877					_ASCopyString:
.9877	a0 00		ldy #$00			ldy 	#0
.9879					_ASCopyLoop:
.9879	b1 38		lda ($38),y			lda 	(zTemp1),y
.987b	c8		iny				iny
.987c	c8		iny				iny
.987d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.987f	88		dey				dey
.9880	c9 00		cmp #$00			cmp 	#0
.9882	d0 f5		bne $9879			bne 	_ASCopyLoop
.9884					_ASExit:
.9884	7a		ply				ply
.9885	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9886					DereferenceTopTwo:
.9886	e8		inx				inx
.9887	20 8b 98	jsr $988b			jsr 	Dereference 				; deref x+1
.988a	ca		dex				dex  								; falls through to deref x
.988b					Dereference:
.988b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.988e	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9890	f0 57		beq $98e9			beq 	_DRFExit 					; not a reference
.9892	5a		phy				phy
.9893	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9896	85 36		sta $36				sta 	zTemp0
.9898	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.989b	85 37		sta $37				sta 	zTemp0+1
.989d	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.98a0	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.98a2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.98a8	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.98aa	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.98ac	f0 0f		beq $98bd			beq 	_DRFDereferenceTwo
.98ae	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.98b0	f0 39		beq $98eb			beq 	_DRFFull
.98b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.98b5	29 03		and #$03			and 	#3
.98b7	f0 32		beq $98eb			beq 	_DRFFull 					; the whole word
.98b9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.98bb	f0 07		beq $98c4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.98bd					_DRFDereferenceTwo:
.98bd	a0 01		ldy #$01			ldy 	#1
.98bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.98c1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98c4					_DRFClear23:
.98c4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.98c7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98ca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.98cd	29 18		and #$18			and 	#NSBTypeMask
.98cf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98d2	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.98d4	d0 12		bne $98e8			bne 	_DRFNotString
.98d6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.98d9	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.98dc	d0 0a		bne $98e8			bne 	_DRFNotString
.98de	a9 ea		lda #$ea			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.98e0	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.98e3	a9 98		lda #$98			lda 	#_DRFNullString >> 8
.98e5	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.98e8					_DRFNotString
.98e8	7a		ply				ply 								; restore Y and exit
.98e9					_DRFExit:
.98e9	60		rts				rts
.98ea					_DRFNullString:
>98ea	00						.byte 	0
.98eb					_DRFFull:
.98eb	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.98ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.98ef	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98f2	c8		iny				iny
.98f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.98f5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98f8	c8		iny				iny
.98f9	b1 36		lda ($36),y			lda 	(zTemp0),y
.98fb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.98fe	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9901	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9904	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9906	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9909	f0 06		beq $9911			beq 	_DRFNoExponent
.990b	c8		iny				iny 								; if not, read the exponent as well.
.990c	b1 36		lda ($36),y			lda 	(zTemp0),y
.990e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9911					_DRFNoExponent:
.9911	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9914	10 0d		bpl $9923			bpl 	_DRFExit2 					; if not, then exit.
.9916	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9918	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.991b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.991e	09 80		ora #$80			ora 	#NSBIsNegative
.9920	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9923					_DRFExit2:
.9923	7a		ply				ply
.9924	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9925					EncodeNumberStart:
.9925	38		sec				sec
.9926	80 01		bra $9929			bra 	EncodeNumberContinue+1
.9928					EncodeNumberContinue:
.9928	18		clc				clc
.9929					EncodeNumber:
.9929	08		php				php 								; save reset.
.992a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.992c	f0 12		beq $9940			beq 	_ENIsOkay
.992e	c9 30		cmp #$30			cmp 	#"0"
.9930	90 04		bcc $9936			bcc 	_ENBadNumber
.9932	c9 3a		cmp #$3a			cmp 	#"9"+1
.9934	90 0a		bcc $9940			bcc 	_ENIsOkay
.9936					_ENBadNumber:
.9936	28		plp				plp 								; throw saved reset
.9937	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.993a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.993c	f0 7e		beq $99bc			beq 	_ENConstructFinal
.993e					_ENFail:
.993e	18		clc				clc 								; not allowed
.993f	60		rts				rts
.9940					_ENIsOkay:
.9940	28		plp				plp 								; are we restarting
.9941	90 15		bcc $9958			bcc 	_ENNoRestart
.9943					_ENStartEncode:
.9943	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9945	f0 0c		beq $9953			beq 	_ENFirstDP
.9947	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9949	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.994c	a9 01		lda #$01			lda 	#ESTA_Low
.994e					_ENExitChange:
.994e	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9951	38		sec				sec
.9952	60		rts				rts
.9953					_ENFirstDP:
.9953	20 25 9f	jsr $9f25			jsr 	NSMSetZero 					; clear integer part
.9956	80 3f		bra $9997			bra 	_ESTASwitchFloat			; go straight to float and exi
.9958					_ENNoRestart:
.9958	48		pha				pha 								; save on stack.
.9959	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.995c	c9 01		cmp #$01			cmp 	#ESTA_Low
.995e	f0 09		beq $9969			beq  	_ESTALowState
.9960	c9 02		cmp #$02			cmp 	#ESTA_High
.9962	f0 29		beq $998d			beq 	_ESTAHighState
.9964	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9966	f0 3b		beq $99a3			beq 	_ESTADecimalState
>9968	db						.byte 	$DB 						; causes a break in the emulator
.9969					_ESTALowState:
.9969	68		pla				pla 								; get value back
.996a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.996c	f0 29		beq $9997			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.996e	29 0f		and #$0f			and 	#15 						; make digit
.9970	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9973	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9976	0a		asl a				asl 	a
.9977	0a		asl a				asl 	a
.9978	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.997b	0a		asl a				asl 	a
.997c	6d 86 04	adc $0486			adc 	DigitTemp
.997f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9982	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9984	90 05		bcc $998b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9986	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9988	8d 85 04	sta $0485			sta 	EncodeState
.998b					_ESTANoSwitch:
.998b	38		sec				sec
.998c	60		rts				rts
.998d					_ESTAHighState:
.998d	68		pla				pla 								; get value back
.998e	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9990	f0 05		beq $9997			beq 	_ESTASwitchFloat
.9992	20 f6 99	jsr $99f6			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9995	38		sec				sec
.9996	60		rts				rts
.9997					_ESTASwitchFloat:
.9997	9c 87 04	stz $0487			stz 	DecimalCount
.999a	e8		inx				inx 								; zero the decimal additive.
.999b	20 25 9f	jsr $9f25			jsr 	NSMSetZero
.999e	ca		dex				dex
.999f	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99a1	80 ab		bra $994e			bra 	_ENExitChange
.99a3					_ESTADecimalState:
.99a3	68		pla				pla 								; digit.
.99a4	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99a6	f0 96		beq $993e			beq 	_ENFail
.99a8	e8		inx				inx 								; put digit into fractional part of X+1
.99a9	20 f6 99	jsr $99f6			jsr 	ESTAShiftDigitIntoMantissa
.99ac	ca		dex				dex
.99ad	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.99b0	ad 87 04	lda $0487			lda 	DecimalCount
.99b3	c9 0b		cmp #$0b			cmp 	#11
.99b5	f0 02		beq $99b9			beq 	_ESTADSFail
.99b7	38		sec				sec
.99b8	60		rts				rts
.99b9					_ESTADSFail:
.99b9	4c 92 ac	jmp $ac92			jmp 	RangeError
.99bc					_ENConstructFinal:
.99bc	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.99bf	f0 33		beq $99f4			beq 	_ENCFExit 					; no decimals
.99c1	5a		phy				phy
.99c2	0a		asl a				asl 	a 							; x 4 and CLC
.99c3	0a		asl a				asl 	a
.99c4	6d 87 04	adc $0487			adc 	DecimalCount
.99c7	a8		tay				tay
.99c8	b9 51 ac	lda $ac51,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.99cb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.99ce	b9 52 ac	lda $ac52,y			lda 	DecimalScalarTable-5+1,y
.99d1	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.99d4	b9 53 ac	lda $ac53,y			lda 	DecimalScalarTable-5+2,y
.99d7	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.99da	b9 54 ac	lda $ac54,y			lda 	DecimalScalarTable-5+3,y
.99dd	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.99e0	b9 55 ac	lda $ac55,y			lda 	DecimalScalarTable-5+4,y
.99e3	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.99e6	a9 08		lda #$08			lda 	#NSTFloat
.99e8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.99eb	7a		ply				ply
.99ec	e8		inx				inx 								; multiply decimal const by decimal scalar
.99ed	20 d9 a9	jsr $a9d9			jsr 	FloatMultiply
.99f0	ca		dex				dex
.99f1	20 6e a8	jsr $a86e			jsr 	FloatAdd 					; add to integer part.
.99f4					_ENCFExit:
.99f4	18		clc				clc 								; reject the digit.
.99f5	60		rts				rts
.99f6					ESTAShiftDigitIntoMantissa:
.99f6	29 0f		and #$0f			and 	#15 						; save digit
.99f8	48		pha				pha
.99f9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.99fc	48		pha				pha
.99fd	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9a00	48		pha				pha
.9a01	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a04	48		pha				pha
.9a05	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a08	48		pha				pha
.9a09	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; x 2
.9a0c	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; x 4
.9a0f	18		clc				clc 								; pop mantissa and add
.9a10	68		pla				pla
.9a11	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a14	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a17	68		pla				pla
.9a18	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9a1b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a1e	68		pla				pla
.9a1f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9a22	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a25	68		pla				pla
.9a26	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9a29	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9a2c	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; x 10
.9a2f	68		pla				pla 								; add digit
.9a30	18		clc				clc
.9a31	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a34	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a37	90 0d		bcc $9a46			bcc 	_ESTASDExit
.9a39	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9a3c	d0 08		bne $9a46			bne 	_ESTASDExit
.9a3e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9a41	d0 03		bne $9a46			bne 	_ESTASDExit
.9a43	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9a46					_ESTASDExit:
.9a46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a47					EvaluateTerm:
.9a47	b1 30		lda ($30),y			lda 	(codePtr),y
.9a49	30 18		bmi $9a63			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9a4b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9a4d	b0 6f		bcs $9abe			bcs 	_ETVariable
.9a4f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9a51	90 6e		bcc $9ac1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9a53	c9 3a		cmp #$3a			cmp 	#'9'+1
.9a55	b0 6a		bcs $9ac1			bcs 	_ETPuncUnary
.9a57	20 25 99	jsr $9925			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9a5a					_ETNumber:
.9a5a	c8		iny				iny 								; keep encoding until we have the numbers
.9a5b	b1 30		lda ($30),y			lda 	(codePtr),y
.9a5d	20 28 99	jsr $9928			jsr 	EncodeNumberContinue
.9a60	b0 f8		bcs $9a5a			bcs 	_ETNumber 					; go back if accepted.
.9a62	60		rts				rts
.9a63					_ETCheckUnary:
.9a63	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9a65	f0 41		beq $9aa8			beq 	_ETString
.9a67	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9a69	f0 12		beq $9a7d			beq 	_ETHexConstant
.9a6b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9a6d	90 0b		bcc $9a7a			bcc 	_ETSyntaxError
.9a6f	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9a71	b0 07		bcs $9a7a			bcs 	_ETSyntaxError
.9a73	da		phx				phx 								; push X on the stack
.9a74	0a		asl a				asl 	a 							; put vector x 2 into X
.9a75	aa		tax				tax
.9a76	c8		iny				iny 								; consume unary function token
.9a77	7c 34 90	jmp ($9034,x)			jmp 	(VectorSet0,x) 				; and do it.
.9a7a					_ETSyntaxError:
.9a7a	4c 8d ac	jmp $ac8d			jmp 	SyntaxError
.9a7d					_ETHexConstant:
.9a7d	c8		iny				iny 								; skip #
.9a7e	c8		iny				iny 								; skip count
.9a7f	20 25 9f	jsr $9f25			jsr 	NSMSetZero 					; clear result
.9a82					_ETHLoop:
.9a82	b1 30		lda ($30),y			lda 	(codePtr),y
.9a84	c8		iny				iny 								; and consume
.9a85	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9a87	f0 1e		beq $9aa7			beq 	_ETHExit
.9a89	48		pha				pha 								; save on stack.
.9a8a	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; x 2
.9a8d	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; x 4
.9a90	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; x 8
.9a93	20 3a 9f	jsr $9f3a			jsr 	NSMShiftLeft 				; x 16
.9a96	68		pla				pla 								; ASCII
.9a97	c9 41		cmp #$41			cmp 	#'A'
.9a99	90 02		bcc $9a9d			bcc 	_ETHNotChar
.9a9b	e9 07		sbc #$07			sbc 	#7
.9a9d					_ETHNotChar:
.9a9d	29 0f		and #$0f			and 	#15 						; digit now
.9a9f	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9aa2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9aa5	80 db		bra $9a82			bra 	_ETHLoop 					; go round.
.9aa7					_ETHExit:
.9aa7	60		rts				rts
.9aa8					_ETString:
.9aa8	c8		iny				iny 								; look at length
.9aa9	b1 30		lda ($30),y			lda 	(codePtr),y
.9aab	48		pha				pha
.9aac	c8		iny				iny 								; first character
.9aad	20 6f 9f	jsr $9f6f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9ab0	68		pla				pla 								; restore count and save
.9ab1	85 36		sta $36				sta 	zTemp0
.9ab3	98		tya				tya 								; add length to Y to skip it.
.9ab4	18		clc				clc
.9ab5	65 36		adc $36				adc 	zTemp0
.9ab7	a8		tay				tay
.9ab8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9aba	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9abd	60		rts				rts
.9abe					_ETVariable:
.9abe	4c 18 9b	jmp $9b18			jmp 	VariableHandler
.9ac1					_ETPuncUnary:
.9ac1	c8		iny				iny 								; consume the unary character
.9ac2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9ac4	f0 2d		beq $9af3			beq 	_ETUnaryNegate
.9ac6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9ac8	f0 39		beq $9b03			beq 	_ETDereference
.9aca	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9acc	f0 43		beq $9b11			beq 	_ETParenthesis
.9ace	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9ad0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9ad2	f0 06		beq $9ada			beq 	_ETIndirection
.9ad4	e6 36		inc $36				inc 	zTemp0
.9ad6	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9ad8	d0 a0		bne $9a7a			bne 	_ETSyntaxError
.9ada					_ETIndirection:
.9ada	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9adc	1a		inc a				inc 	a
.9add	48		pha				pha
.9ade	20 47 9a	jsr $9a47			jsr 	EvaluateTerm				; evaluate the term
.9ae1	20 8b 98	jsr $988b			jsr 	Dereference 				; dereference it.
.9ae4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9ae7	d0 07		bne $9af0			bne 	_ETTypeMismatch
.9ae9	68		pla				pla 								; indirection 1-2
.9aea	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9aec	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9aef	60		rts				rts
.9af0					_ETTypeMismatch:
.9af0	4c 97 ac	jmp $ac97			jmp 	TypeError
.9af3					_ETUnaryNegate:
.9af3	20 47 9a	jsr $9a47			jsr 	EvaluateTerm				; evaluate the term
.9af6	20 8b 98	jsr $988b			jsr 	Dereference 				; dereference it.
.9af9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9afc	29 10		and #$10			and 	#NSTString
.9afe	d0 f0		bne $9af0			bne 	_ETTypeMismatch
.9b00	4c d1 9e	jmp $9ed1			jmp 	NSMNegate  					; just toggles the sign bit.
.9b03					_ETDereference:
.9b03	20 47 9a	jsr $9a47			jsr 	EvaluateTerm				; evaluate the term
.9b06	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9b09	29 20		and #$20			and 	#NSBIsReference
.9b0b	f0 e3		beq $9af0			beq 	_ETTypeMismatch
.9b0d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9b10	60		rts				rts
.9b11					_ETParenthesis:
.9b11	20 76 97	jsr $9776			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b14	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 			; check for )
.9b17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b18					VariableHandler:
.9b18	b1 30		lda ($30),y			lda 	(codePtr),y
.9b1a	18		clc				clc
.9b1b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b1d	85 37		sta $37				sta 	zTemp0+1
.9b1f	c8		iny				iny
.9b20	b1 30		lda ($30),y			lda 	(codePtr),y
.9b22	85 36		sta $36				sta 	zTemp0
.9b24	c8		iny				iny
.9b25	18		clc				clc									; copy variable address+3 to mantissa
.9b26	69 03		adc #$03			adc 	#3
.9b28	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b2b	a5 37		lda $37				lda 	zTemp0+1
.9b2d	69 00		adc #$00			adc 	#0
.9b2f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b32	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9b35	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9b38	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b3b	5a		phy				phy
.9b3c	a0 02		ldy #$02			ldy 	#2 							; read type
.9b3e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b40	7a		ply				ply
.9b41	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b43	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b45	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b48	29 04		and #$04			and 	#NSBIsArray
.9b4a	d0 01		bne $9b4d			bne 	_VHArray
.9b4c	60		rts				rts
.9b4d					_VHArray:
.9b4d	e8		inx				inx
.9b4e	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9b51	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9b53	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b56	b1 30		lda ($30),y			lda 	(codePtr),y
.9b58	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9b5a	d0 06		bne $9b62			bne 	_VHNoSecondIndex
.9b5c	c8		iny				iny 								; skip the comma
.9b5d	e8		inx				inx
.9b5e	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9b61	ca		dex				dex
.9b62					_VHNoSecondIndex:
.9b62	ca		dex				dex 								; set X back.
.9b63	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 			; and check the right bracket.
.9b66	5a		phy				phy 								; save position
.9b67	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9b6a	85 3e		sta $3e				sta 	zaTemp
.9b6c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b6f	85 3f		sta $3f				sta 	zaTemp+1
.9b71	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9b73	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b75	f0 02		beq $9b79			beq 	_VHHas2Mask
.9b77	a9 ff		lda #$ff			lda 	#$FF
.9b79					_VHHas2Mask:
.9b79	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9b7c	f0 54		beq $9bd2			beq 	_VHBadIndex
.9b7e	0a		asl a				asl 	a 							; carry will be set if a second index
.9b7f	90 09		bcc $9b8a			bcc 	_VHCheckFirstIndex
.9b81	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9b83	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b85	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9b88	90 48		bcc $9bd2			bcc 	_VHBadIndex
.9b8a					_VHCheckFirstIndex:
.9b8a	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9b8c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b8e	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9b91	90 3f		bcc $9bd2			bcc 	_VHBadIndex
.9b93	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9b95	64 37		stz $37				stz 	zTemp0+1
.9b97	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9b9a	30 0f		bmi $9bab			bmi 	_VHNoMultiply
.9b9c	da		phx				phx
.9b9d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9ba0	48		pha				pha
.9ba1	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9ba3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ba5	1a		inc a				inc 	a 							; add 1 for zero base
.9ba6	fa		plx				plx
.9ba7	20 29 ab	jsr $ab29			jsr 	Multiply8x8 				; calculate -> Z0
.9baa	fa		plx				plx
.9bab					_VHNoMultiply:
.9bab	18		clc				clc
.9bac	a5 36		lda $36				lda 	zTemp0
.9bae	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9bb1	85 36		sta $36				sta 	zTemp0
.9bb3	a5 37		lda $37				lda 	zTemp0+1
.9bb5	69 00		adc #$00			adc 	#0
.9bb7	85 37		sta $37				sta 	zTemp0+1
.9bb9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9bbc	20 99 8a	jsr $8a99			jsr 	ScaleByBaseType
.9bbf	18		clc				clc
.9bc0	b2 3e		lda ($3e)			lda 	(zaTemp)
.9bc2	65 36		adc $36				adc 	zTemp0
.9bc4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bc7	a0 01		ldy #$01			ldy 	#1
.9bc9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bcb	65 37		adc $37				adc 	zTemp0+1
.9bcd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bd0	7a		ply				ply 								; restore position
.9bd1	60		rts				rts
.9bd2					_VHBadIndex:
.9bd2	a9 17		lda #$17		lda	#23
.9bd4	4c 6d 93	jmp $936d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.aa5f					AbsUnary:
.aa5f	fa		plx				plx 								; restore stack pos
.aa60	20 79 9e	jsr $9e79			jsr 	EvaluateNumber 				; get a float or int
.aa63	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.aa66	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.aa69	29 7f		and #$7f			and 	#$7F
.aa6b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9bd7					AllocUnary:
.9bd7	fa		plx				plx 								; restore stack pos
.9bd8	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger		; get bytes required.
.9bdb	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.9bde	da		phx				phx 								; save X/Y
.9bdf	5a		phy				phy
.9be0	8a		txa				txa 								; copy X into Y
.9be1	a8		tay				tay
.9be2	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9be5	aa		tax				tax
.9be6	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9be9	20 f6 9b	jsr $9bf6			jsr 	AllocateXABytes 			; allocate memory
.9bec	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9bef	8a		txa				txa
.9bf0	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9bf3	7a		ply				ply
.9bf4	fa		plx				plx
.9bf5	60		rts				rts
.9bf6					AllocateXABytes:
.9bf6	5a		phy				phy
.9bf7	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9bfa	84 36		sty $36				sty 	zTemp0
.9bfc	5a		phy				phy
.9bfd	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9c00	84 37		sty $37				sty 	zTemp0+1
.9c02	5a		phy				phy
.9c03	18		clc				clc 								; add to low memory pointer
.9c04	6d 8c 04	adc $048c			adc 	lowMemPtr
.9c07	8d 8c 04	sta $048c			sta 	lowMemPtr
.9c0a	8a		txa				txa
.9c0b	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9c0e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9c11	b0 2f		bcs $9c42			bcs 	CISSMemory
.9c13	20 34 9c	jsr $9c34			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c16					_ClearMemory:
.9c16	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9c19	c5 36		cmp $36				cmp 	zTemp0
.9c1b	d0 07		bne $9c24			bne 	_CMClearNext
.9c1d	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9c20	c5 37		cmp $37				cmp 	zTemp0+1
.9c22	f0 0c		beq $9c30			beq 	_CMExit
.9c24					_CMClearNext:
.9c24	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c26	92 36		sta ($36)			sta 	(zTemp0)
.9c28	e6 36		inc $36				inc 	zTemp0
.9c2a	d0 ea		bne $9c16			bne 	_ClearMemory
.9c2c	e6 37		inc $37				inc		zTemp0+1
.9c2e	80 e6		bra $9c16			bra 	_ClearMemory
.9c30					_CMExit:
.9c30	fa		plx				plx
.9c31	68		pla				pla
.9c32	7a		ply				ply
.9c33	60		rts				rts
.9c34					CheckIdentifierStringSpace:
.9c34	48		pha				pha
.9c35	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9c38	18		clc				clc
.9c39	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c3b	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9c3e	b0 02		bcs $9c42			bcs 	CISSMemory
.9c40	68		pla				pla
.9c41	60		rts				rts
.9c42					CISSMemory:
.9c42	a9 06		lda #$06		lda	#6
.9c44	4c 6d 93	jmp $936d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.aa6f					AscUnary:
.aa6f	fa		plx				plx 								; restore stack pos
.aa70	20 84 9e	jsr $9e84			jsr 	EvaluateString 				; get a string
.aa73	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.aa75	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.aa78	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.aa7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.aa7c					FracUnary:
.aa7c	fa		plx				plx 								; restore stack pos
.aa7d	20 79 9e	jsr $9e79			jsr 	EvaluateNumber 				; get a float or int
.aa80	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.aa83	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aa86	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aa88	f0 04		beq $aa8e			beq 	_IUZero
.aa8a	20 4c a9	jsr $a94c			jsr 	FloatFractionalPart
.aa8d	60		rts				rts
.aa8e					_IUZero:
.aa8e	20 25 9f	jsr $9f25			jsr 	NSMSetZero
.aa91	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.aa92					IntUnary:
.aa92	fa		plx				plx 								; restore stack pos
.aa93	20 79 9e	jsr $9e79			jsr 	EvaluateNumber 				; get a float or int
.aa96	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.aa99	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aa9c	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aa9e	f0 03		beq $aaa3			beq 	_IUExit
.aaa0	20 af a9	jsr $a9af			jsr 	FloatIntegerPart
.aaa3					_IUExit:
.aaa3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.aaa4					LenUnary:
.aaa4	fa		plx				plx 								; restore stack pos
.aaa5	20 84 9e	jsr $9e84			jsr 	EvaluateString 				; get a string
.aaa8	5a		phy				phy
.aaa9	a0 00		ldy #$00			ldy 	#0 							; find length
.aaab					_LenFind:
.aaab	b1 36		lda ($36),y			lda 	(zTemp0),y
.aaad	f0 06		beq $aab5			beq 	_LenExit
.aaaf	c8		iny				iny
.aab0	d0 f9		bne $aaab			bne 	_LenFind
.aab2	4c 92 ac	jmp $ac92			jmp 	RangeError 					; string > 255
.aab5					_LenExit:
.aab5	98		tya				tya
.aab6	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.aab9	7a		ply				ply
.aaba	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.aabd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9c47					Unary_Not:
.9c47	fa		plx				plx
.9c48	20 9c 9e	jsr $9e9c			jsr 	EvaluateInteger 			; get integer
.9c4b	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.9c4e	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; zero mantissa ?
.9c51	f0 04		beq $9c57			beq 	_NotZero
.9c53	20 25 9f	jsr $9f25			jsr 	NSMSetZero
.9c56	60		rts				rts
.9c57					_NotZero:
.9c57	4c da 93	jmp $93da			jmp 	ReturnTrue
.9c5a					_UNBad:
.9c5a	4c 9c ac	jmp $ac9c			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9c5d					Unary_Random:
.9c5d	fa		plx				plx
.9c5e	20 d6 9c	jsr $9cd6			jsr 	Random32Bit 				; get a random number
.9c61	20 bb 9c	jsr $9cbb			jsr 	URCopyToMantissa  			; put in mantissa
.9c64	e8		inx				inx
.9c65	20 b1 9e	jsr $9eb1			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9c68	ca		dex				dex
.9c69	20 2b a7	jsr $a72b			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9c6c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9c6f	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c72	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.9c75	60		rts				rts
.9c76					Unary_Rnd:
.9c76	fa		plx				plx
.9c77	20 79 9e	jsr $9e79			jsr 	EvaluateNumber 				; number to use.
.9c7a	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 			; closing bracket
.9c7d	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9c80	f0 2b		beq $9cad			beq 	_URCopySeed
.9c82	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9c85	10 23		bpl $9caa			bpl 	_URDontSeed
.9c87	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9c8a	49 17		eor #$17			eor 	#$17
.9c8c	8d 88 04	sta $0488			sta 	RandomSeed+0
.9c8f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c92	49 a5		eor #$a5			eor 	#$A5
.9c94	8d 89 04	sta $0489			sta 	RandomSeed+1
.9c97	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9c9a	49 c2		eor #$c2			eor 	#$C2
.9c9c	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9c9f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ca2	49 9d		eor #$9d			eor 	#$9D
.9ca4	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ca7	20 d6 9c	jsr $9cd6			jsr 	Random32Bit
.9caa					_URDontSeed:
.9caa	20 d6 9c	jsr $9cd6			jsr 	Random32Bit 				; generate a number.
.9cad					_URCopySeed:
.9cad	20 bb 9c	jsr $9cbb			jsr 	URCopyToMantissa 			; copy into mantissa
.9cb0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9cb2	8d 28 04	sta $0428			sta 	NSExponent
.9cb5	a9 08		lda #$08			lda 	#NSTFloat
.9cb7	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9cba	60		rts				rts
.9cbb					URCopyToMantissa:
.9cbb	ad 88 04	lda $0488			lda 	RandomSeed+0
.9cbe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cc1	ad 89 04	lda $0489			lda 	RandomSeed+1
.9cc4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cc7	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9cca	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ccd	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9cd0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9cd2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cd5	60		rts				rts
.9cd6					Random32Bit:
.9cd6	5a		phy				phy
.9cd7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9cd9	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9cdc	d0 03		bne $9ce1			bne 	_Random1
.9cde	a8		tay				tay 								; if so do it 256 times
.9cdf	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9ce1					_Random1:
.9ce1	0a		asl a				asl 	a 							; LSFR RNG
.9ce2	2e 89 04	rol $0489			rol 	RandomSeed+1
.9ce5	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9ce8	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9ceb	90 02		bcc $9cef			bcc 	_Random2
.9ced	49 c5		eor #$c5			eor 	#$C5
.9cef					_Random2:
.9cef	88		dey				dey
.9cf0	d0 ef		bne $9ce1			bne 	_Random1
.9cf2	8d 88 04	sta $0488			sta 	RandomSeed+0
.9cf5	7a		ply				ply
.9cf6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.aabe					SgnUnary:
.aabe	fa		plx				plx 								; restore stack pos
.aabf	20 79 9e	jsr $9e79			jsr 	EvaluateNumber 				; get a float or int
.aac2	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.aac5	20 55 9f	jsr $9f55			jsr 	NSMIsZero 					; if zero
.aac8	f0 10		beq $aada			beq 	_SGZero  					; return Int Zero
.aaca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.aacd	48		pha				pha
.aace	a9 01		lda #$01			lda 	#1 							; set to 1
.aad0	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.aad3	68		pla				pla
.aad4	29 80		and #$80			and		#$80 						; copy the sign byte out
.aad6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aad9	60		rts				rts
.aada	20 25 9f	jsr $9f25	_SGZero:jsr 	NSMSetZero
.aadd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.aade					ValUnary:
.aade	fa		plx				plx 								; restore stack pos
.aadf	20 f4 aa	jsr $aaf4			jsr 	ValMainCode 				; do the main val() code
.aae2	b0 01		bcs $aae5			bcs 	_VUError 					; couldn't convert
.aae4	60		rts				rts
.aae5					_VUError:
.aae5	4c 97 ac	jmp $ac97			jmp 	TypeError
.aae8					IsValUnary:
.aae8	fa		plx				plx 								; restore stack pos
.aae9	20 f4 aa	jsr $aaf4			jsr 	ValMainCode 				; do the main val() code
.aaec	b0 03		bcs $aaf1			bcs 	_VUBad
.aaee	4c da 93	jmp $93da			jmp 	ReturnTrue
.aaf1					_VUBad:
.aaf1	4c e6 93	jmp $93e6			jmp 	ReturnFalse
.aaf4					ValMainCode:
.aaf4	20 84 9e	jsr $9e84			jsr 	EvaluateString 				; get a string
.aaf7	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 			; check right bracket present
.aafa	5a		phy				phy
.aafb	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.aafd	f0 17		beq $ab16			beq 	_VMCFail2
.aaff	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ab01	48		pha				pha 								; save first character
.ab02	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ab04	d0 01		bne $ab07			bne 	_VMCStart
.ab06	c8		iny				iny 								; skip over -
.ab07					_VMCStart:
.ab07	38		sec				sec 								; initialise first time round.
.ab08					_VMCNext:
.ab08	c8		iny				iny 								; pre-increment
.ab09	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ab0b	f0 0c		beq $ab19			beq 	_VMCSuccess 				; successful.
.ab0d	20 29 99	jsr $9929			jsr 	EncodeNumber 				; send it to the number-builder
.ab10	90 03		bcc $ab15			bcc 	_VMCFail 					; if failed, give up.
.ab12	18		clc				clc 								; next time round, countinue
.ab13	80 f3		bra $ab08			bra 	_VMCNext
.ab15					_VMCFail:
.ab15	68		pla				pla
.ab16					_VMCFail2:
.ab16	7a		ply				ply
.ab17	38		sec				sec
.ab18	60		rts				rts
.ab19					_VMCSuccess:
.ab19	a9 00		lda #$00			lda 	#0 							; construct final
.ab1b	20 29 99	jsr $9929			jsr 	EncodeNumber
.ab1e	68		pla				pla
.ab1f	c9 2d		cmp #$2d			cmp 	#"-"
.ab21	d0 03		bne $ab26			bne 	_VMCNotNegative
.ab23	20 d1 9e	jsr $9ed1			jsr		NSMNegate
.ab26					_VMCNotNegative:
.ab26	7a		ply				ply
.ab27	18		clc				clc
.ab28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9cf7					ChrUnary:
.9cf7	fa		plx				plx 								; restore stack pos
.9cf8	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger			; get value
.9cfb	48		pha				pha
.9cfc	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.9cff	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9d01	20 b3 af	jsr $afb3			jsr 	StringTempAllocate
.9d04	68		pla				pla 								; write number to it
.9d05	20 f1 af	jsr $aff1			jsr 	StringTempWrite
.9d08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9d09					SpcUnary:
.9d09	fa		plx				plx 								; restore stack pos
.9d0a	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger			; get value
.9d0d	5a		phy				phy
.9d0e	48		pha				pha 								; save count
.9d0f	20 b3 af	jsr $afb3			jsr 	StringTempAllocate
.9d12	7a		ply				ply 								; to do count in Y
.9d13					_SpcLoop:
.9d13	c0 00		cpy #$00			cpy 	#0
.9d15	f0 08		beq $9d1f			beq 	_SpcExit
.9d17	a9 20		lda #$20			lda 	#32
.9d19	20 f1 af	jsr $aff1			jsr 	StringTempWrite
.9d1c	88		dey				dey
.9d1d	80 f4		bra $9d13			bra 	_SPCLoop
.9d1f					_SpcExit:
.9d1f	7a		ply				ply
.9d20	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket
.9d23	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9d24					Unary_Str:
.9d24	fa		plx				plx
.9d25	20 79 9e	jsr $9e79			jsr 	EvaluateNumber  			; get number
.9d28	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 			; closing bracket
.9d2b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9d2d	20 46 9d	jsr $9d46			jsr 	ConvertNumberToString 		; do the conversion.
.9d30	a9 21		lda #$21			lda		#33 						; create buffer
.9d32	20 b3 af	jsr $afb3			jsr 	StringTempAllocate 			; allocate memory
.9d35	da		phx				phx
.9d36	a2 00		ldx #$00			ldx 	#0
.9d38					_USCopy:
.9d38	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d3b	20 f1 af	jsr $aff1			jsr 	StringTempWrite
.9d3e	e8		inx				inx
.9d3f	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d42	d0 f4		bne $9d38			bne 	_USCopy
.9d44	fa		plx				plx
.9d45	60		rts				rts
.9d46					ConvertNumberToString:
.9d46	5a		phy				phy 								; save code position
.9d47	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9d4a	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9d4d	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9d50	10 0a		bpl $9d5c			bpl 	_CNTSNotNegative
.9d52	29 7f		and #$7f			and 	#$7F 						; make +ve
.9d54	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d57	a9 2d		lda #$2d			lda 	#"-"
.9d59	20 c2 9d	jsr $9dc2			jsr 	WriteDecimalBuffer
.9d5c					_CNTSNotNegative:
.9d5c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9d5f	f0 15		beq $9d76			beq 	_CNTSNotFloat
.9d61	e8		inx				inx 								; round up
.9d62	a9 01		lda #$01			lda 	#1
.9d64	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.9d67	ca		dex				dex
.9d68	bd 28 04	lda $0428,x			lda		NSExponent,x
.9d6b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9d6e	a9 08		lda #$08			lda 	#NSTFloat
.9d70	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d73	20 6e a8	jsr $a86e			jsr 	FloatAdd
.9d76					_CNTSNotFloat:
.9d76	20 a4 9d	jsr $9da4			jsr 	MakePlusTwoString
.9d79	20 4c a9	jsr $a94c			jsr 	FloatFractionalPart 		; get the fractional part
.9d7c	20 10 aa	jsr $aa10			jsr 	NSNormalise					; normalise , exit if zero
.9d7f	f0 21		beq $9da2			beq 	_CNTSExit
.9d81	a9 2e		lda #$2e			lda 	#"."
.9d83	20 c2 9d	jsr $9dc2			jsr 	WriteDecimalBuffer 			; write decimal place
.9d86					_CNTSDecimal:
.9d86	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9d89	30 17		bmi $9da2			bmi 	_CNTSExit
.9d8b	e8		inx				inx 								; x 10.0
.9d8c	a9 0a		lda #$0a			lda 	#10
.9d8e	20 27 9f	jsr $9f27			jsr 	NSMSetByte
.9d91	a9 08		lda #$08			lda 	#NSTFloat
.9d93	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d96	ca		dex				dex
.9d97	20 d9 a9	jsr $a9d9			jsr 	FloatMultiply
.9d9a	20 a4 9d	jsr $9da4			jsr 	MakePlusTwoString
.9d9d	20 4c a9	jsr $a94c			jsr 	FloatFractionalPart 		; get the fractional part
.9da0	80 e4		bra $9d86			bra 	_CNTSDecimal 				; keep going.
.9da2					_CNTSExit:
.9da2	7a		ply				ply
.9da3	60		rts				rts
.9da4					MakePlusTwoString:
.9da4	da		phx				phx
.9da5	20 fc 9e	jsr $9efc			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9da8	e8		inx				inx 								; access it
.9da9	e8		inx				inx
.9daa	20 af a9	jsr $a9af			jsr 	FloatIntegerPart 			; make it an integer
.9dad	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9daf	20 18 a8	jsr $a818			jsr 	ConvertInt32
.9db2	a2 00		ldx #$00			ldx	 	#0
.9db4					_MPTSCopy:
.9db4	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9db7	20 c2 9d	jsr $9dc2			jsr 	WriteDecimalBuffer
.9dba	e8		inx				inx
.9dbb	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9dbe	d0 f4		bne $9db4			bne 	_MPTSCopy
.9dc0	fa		plx				plx
.9dc1	60		rts				rts
.9dc2					WriteDecimalBuffer:
.9dc2	da		phx				phx
.9dc3	ae 95 04	ldx $0495			ldx 	dbOffset
.9dc6	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9dc9	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9dcc	ee 95 04	inc $0495			inc 	dbOffset
.9dcf	fa		plx				plx
.9dd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9dd1					Unary_Left:
.9dd1	fa		plx				plx
.9dd2	18		clc				clc 								; only one parameter
.9dd3	20 48 9e	jsr $9e48			jsr 	SubstringInitial 			; set up.
.9dd6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9dd9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ddc	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ddf	80 2c		bra $9e0d			bra 	SubstringMain
.9de1					Unary_Right:
.9de1	fa		plx				plx
.9de2	18		clc				clc 								; only one parameter
.9de3	20 48 9e	jsr $9e48			jsr 	SubstringInitial 			; set up.
.9de6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9de9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dec	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9def	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9df2	b0 02		bcs $9df6			bcs 	_URNotUnderflow
.9df4	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9df6					_URNotUnderFlow:
.9df6	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9df9	80 12		bra $9e0d			bra 	SubStringMain
.9dfb					Unary_Mid:
.9dfb	fa		plx				plx
.9dfc	38		sec				sec 								; two parameters
.9dfd	20 48 9e	jsr $9e48			jsr 	SubstringInitial 			; set up.
.9e00	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9e03	f0 05		beq $9e0a			beq 	_UMError
.9e05	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9e08	80 03		bra $9e0d			bra 	SubStringMain
.9e0a					_UMError:
.9e0a	4c 9c ac	jmp $ac9c			jmp 	ArgumentError
.9e0d					SubStringMain:
.9e0d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9e10	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9e13	b0 2d		bcs $9e42			bcs 	_SSMNull 					; if so, return an empty string.
.9e15	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9e18	f0 28		beq $9e42			beq 	_SSMNull 					; return empty string.
.9e1a	18		clc				clc 								; add the offset +1 to the address and
.9e1b	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9e1e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9e21	85 36		sta $36				sta 	zTemp0
.9e23	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9e26	69 00		adc #$00			adc 	#0
.9e28	85 37		sta $37				sta 	zTemp0+1
.9e2a					_SSMNoCarry:
.9e2a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9e2d	20 b3 af	jsr $afb3			jsr 	StringTempAllocate 			; allocate that many characters
.9e30	5a		phy				phy 								; save Y
.9e31	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9e33					_SSMCopy:
.9e33	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9e35	f0 09		beq $9e40			beq 	_SSMEString 				; no more to copy
.9e37	20 f1 af	jsr $aff1			jsr 	StringTempWrite 			; and write it out.
.9e3a	c8		iny				iny
.9e3b	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9e3e	d0 f3		bne $9e33			bne 	_SSMCopy
.9e40					_SSMEString:
.9e40	7a		ply				ply
.9e41					_SSMExit:
.9e41	60		rts				rts
.9e42					_SSMNull:
.9e42	a9 00		lda #$00			lda 	#0
.9e44	20 b3 af	jsr $afb3			jsr 	StringTempAllocate
.9e47	60		rts				rts
.9e48					SubstringInitial:
.9e48	da		phx				phx 								; save initial stack position
.9e49	08		php				php 								; save carry on stack indicating 2 parameters
.9e4a	20 84 9e	jsr $9e84			jsr 	EvaluateString 				; get a string
.9e4d	5a		phy				phy 								; calculate length to exponent.
.9e4e	a0 ff		ldy #$ff			ldy 	#$FF
.9e50					_SIFindLength:
.9e50	c8		iny				iny
.9e51	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e53	d0 fb		bne $9e50			bne 	_SIFindLength
.9e55	98		tya				tya
.9e56	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9e59	7a		ply				ply
.9e5a	e8		inx				inx
.9e5b	20 af a6	jsr $a6af			jsr 	CheckComma 					; comma next
.9e5e	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger 		; get next parameter
.9e61	28		plp				plp 								; is it the last parameter ?
.9e62	90 07		bcc $9e6b			bcc 	_SSIExit 					; if so, exit.
.9e64	e8		inx				inx
.9e65	20 af a6	jsr $a6af			jsr 	CheckComma 					; comma next
.9e68	20 bd 9e	jsr $9ebd			jsr 	Evaluate8BitInteger 		; get last parameter
.9e6b					_SSIExit:
.9e6b	fa		plx				plx
.9e6c	20 a7 a6	jsr $a6a7			jsr 	CheckRightBracket 			; check closing bracket
.9e6f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9e70					EvaluateValue:
.9e70	48		pha				pha
.9e71	20 76 97	jsr $9776			jsr		EvaluateExpression 			; expression
.9e74	20 8b 98	jsr $988b			jsr 	Dereference					; derefernce it
.9e77	68		pla				pla
.9e78	60		rts				rts
.9e79					EvaluateNumber:
.9e79	20 70 9e	jsr $9e70			jsr 	EvaluateValue 				; get a value
.9e7c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9e7f	29 10		and #$10			and 	#NSBIsString
.9e81	d0 16		bne $9e99			bne 	HelperTypeError
.9e83	60		rts				rts
.9e84					EvaluateString:
.9e84	20 70 9e	jsr $9e70			jsr 	EvaluateValue 				; get a value
.9e87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9e8a	29 10		and #$10			and 	#NSBIsString
.9e8c	f0 0b		beq $9e99			beq 	HelperTypeError
.9e8e					CopyAddressToTemp0:
.9e8e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9e91	85 36		sta $36				sta 	zTemp0
.9e93	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e96	85 37		sta $37				sta 	zTemp0+1
.9e98	60		rts				rts
.9e99					HelperTypeError:
.9e99	4c 97 ac	jmp $ac97			jmp 	TypeError
.9e9c					EvaluateInteger:
.9e9c	20 79 9e	jsr $9e79			jsr 	EvaluateNumber
.9e9f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9ea2	d0 0a		bne $9eae			bne 	HelperValueError 			; if not, it's a float.
.9ea4	60		rts				rts
.9ea5					EvaluateUnsignedInteger:
.9ea5	20 9c 9e	jsr $9e9c			jsr 	EvaluateInteger 			; check integer is +ve
.9ea8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9eab	30 01		bmi $9eae			bmi 	HelperValueError
.9ead	60		rts				rts
.9eae					HelperValueError:
.9eae	4c 9c ac	jmp $ac9c			jmp 	ArgumentError
.9eb1					Evaluate16BitInteger:
.9eb1	20 a5 9e	jsr $9ea5			jsr	 	EvaluateUnsignedInteger		; get integer
.9eb4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9eb7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9eba	d0 f2		bne $9eae			bne 	HelperValueError
.9ebc	60		rts				rts
.9ebd					Evaluate8BitInteger:
.9ebd	20 a5 9e	jsr $9ea5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9ec0	d0 ec		bne $9eae			bne 	HelperValueError
.9ec2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9ec5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9ec8	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9ecb	d0 e1		bne $9eae			bne 	HelperValueError
.9ecd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ed0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ab29					Multiply8x8:
.ab29	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ab2a	85 36		sta $36			  	sta 	zTemp0
.ab2c	86 37		stx $37				stx 	zTemp0+1
.ab2e	a9 00		lda #$00			lda 	#0
.ab30	a2 08		ldx #$08			ldx 	#8
.ab32					_M88Loop:
.ab32	90 03		bcc $ab37			bcc 	_M88NoAdd
.ab34	18		clc				clc
.ab35	65 37		adc $37				adc 	zTemp0+1
.ab37					_M88NoAdd:
.ab37	6a		ror a				ror 	a
.ab38	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ab3a	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ab3b	d0 f5		bne $ab32			bne 	_M88Loop
.ab3d	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ab3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9ed1					NSMNegate:
.9ed1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ed4	49 80		eor #$80			eor 	#NSBIsNegative
.9ed6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ed9	60		rts				rts
.9eda					NSMNegateMantissa:
.9eda	38		sec				sec
.9edb	a9 00		lda #$00			lda 	#0
.9edd	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9ee0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ee3	a9 00		lda #$00			lda 	#0
.9ee5	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9ee8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9eeb	a9 00		lda #$00			lda 	#0
.9eed	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9ef0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ef3	a9 00		lda #$00			lda 	#0
.9ef5	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9ef8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9efb	60		rts				rts
.9efc					NSMShiftUpTwo:
.9efc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9eff	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f02	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f05	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f08	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f0b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f0e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f11	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f14	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9f17	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f1a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f1d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f20	60		rts				rts
.9f21					NSMSetZeroMantissaOnly:
.9f21	a9 00		lda #$00			lda 	#0
.9f23	80 08		bra $9f2d			bra 	NSMSetMantissa
.9f25					NSMSetZero:
.9f25	a9 00		lda #$00			lda 	#0
.9f27					NSMSetByte:
.9f27	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9f2a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9f2d					NSMSetMantissa:
.9f2d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9f30	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9f33	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9f36	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f39	60		rts				rts
.9f3a					NSMShiftLeft:
.9f3a	18		clc				clc
.9f3b					NSMRotateLeft:
.9f3b	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9f3e	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9f41	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9f44	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9f47	60		rts				rts
.9f48					NSMShiftRight:
.9f48	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9f4b	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9f4e	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9f51	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9f54	60		rts				rts
.9f55					NSMIsZero:
.9f55	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f58	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9f5b	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9f5e	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9f61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ab40					Assemble_ora:
.ab40	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab43	01					.byte $01
.ab44					Assemble_and:
.ab44	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab47	21					.byte $21
.ab48					Assemble_eor:
.ab48	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab4b	41					.byte $41
.ab4c					Assemble_adc:
.ab4c	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab4f	61					.byte $61
.ab50					Assemble_sta:
.ab50	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab53	81					.byte $81
.ab54					Assemble_lda:
.ab54	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab57	a1					.byte $a1
.ab58					Assemble_cmp:
.ab58	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab5b	c1					.byte $c1
.ab5c					Assemble_sbc:
.ab5c	20 98 86	jsr $8698		jsr	AssembleGroup1
>ab5f	e1					.byte $e1
.ab60					Assemble_asl:
.ab60	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab63	02					.byte $02
>ab64	75					.byte $75
.ab65					Assemble_rol:
.ab65	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab68	22					.byte $22
>ab69	75					.byte $75
.ab6a					Assemble_lsr:
.ab6a	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab6d	42					.byte $42
>ab6e	75					.byte $75
.ab6f					Assemble_ror:
.ab6f	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab72	62					.byte $62
>ab73	75					.byte $75
.ab74					Assemble_stx:
.ab74	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab77	82					.byte $82
>ab78	50					.byte $50
.ab79					Assemble_ldx:
.ab79	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab7c	a2					.byte $a2
>ab7d	d0					.byte $d0
.ab7e					Assemble_dec:
.ab7e	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab81	c2					.byte $c2
>ab82	55					.byte $55
.ab83					Assemble_inc:
.ab83	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab86	e2					.byte $e2
>ab87	55					.byte $55
.ab88					Assemble_stz:
.ab88	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab8b	60					.byte $60
>ab8c	44					.byte $44
.ab8d					Assemble_bit:
.ab8d	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab90	20					.byte $20
>ab91	55					.byte $55
.ab92					Assemble_sty:
.ab92	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab95	80					.byte $80
>ab96	54					.byte $54
.ab97					Assemble_ldy:
.ab97	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab9a	a0					.byte $a0
>ab9b	d5					.byte $d5
.ab9c					Assemble_cpy:
.ab9c	20 9f 86	jsr $869f		jsr	AssembleGroup2
>ab9f	c0					.byte $c0
>aba0	d4					.byte $d4
.aba1					Assemble_cpx:
.aba1	20 9f 86	jsr $869f		jsr	AssembleGroup2
>aba4	e0					.byte $e0
>aba5	d0					.byte $d0
.aba6					Assemble_tsb:
.aba6	20 9f 86	jsr $869f		jsr	AssembleGroup2
>aba9	00					.byte $00
>abaa	50					.byte $50
.abab					Assemble_trb:
.abab	20 9f 86	jsr $869f		jsr	AssembleGroup2
>abae	10					.byte $10
>abaf	50					.byte $50
.abb0					Assemble_jsr:
.abb0	20 9f 86	jsr $869f		jsr	AssembleGroup2
>abb3	14					.byte $14
>abb4	10					.byte $10
.abb5					Assemble_jmp:
.abb5	20 9f 86	jsr $869f		jsr	AssembleGroup2
>abb8	40					.byte $40
>abb9	10					.byte $10
.abba					Assemble_bpl:
.abba	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abbd	10					.byte $10
.abbe					Assemble_bmi:
.abbe	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abc1	30					.byte $30
.abc2					Assemble_bvc:
.abc2	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abc5	50					.byte $50
.abc6					Assemble_bvs:
.abc6	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abc9	70					.byte $70
.abca					Assemble_bcc:
.abca	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abcd	90					.byte $90
.abce					Assemble_bcs:
.abce	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abd1	b0					.byte $b0
.abd2					Assemble_bne:
.abd2	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abd5	d0					.byte $d0
.abd6					Assemble_beq:
.abd6	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abd9	f0					.byte $f0
.abda					Assemble_bra:
.abda	20 f0 86	jsr $86f0		jsr	AssembleGroup3
>abdd	80					.byte $80
.abde					Assemble_brk:
.abde	20 26 87	jsr $8726		jsr	AssembleGroup4
>abe1	00					.byte $00
.abe2					Assemble_php:
.abe2	20 26 87	jsr $8726		jsr	AssembleGroup4
>abe5	08					.byte $08
.abe6					Assemble_clc:
.abe6	20 26 87	jsr $8726		jsr	AssembleGroup4
>abe9	18					.byte $18
.abea					Assemble_plp:
.abea	20 26 87	jsr $8726		jsr	AssembleGroup4
>abed	28					.byte $28
.abee					Assemble_sec:
.abee	20 26 87	jsr $8726		jsr	AssembleGroup4
>abf1	38					.byte $38
.abf2					Assemble_rti:
.abf2	20 26 87	jsr $8726		jsr	AssembleGroup4
>abf5	40					.byte $40
.abf6					Assemble_pha:
.abf6	20 26 87	jsr $8726		jsr	AssembleGroup4
>abf9	48					.byte $48
.abfa					Assemble_cli:
.abfa	20 26 87	jsr $8726		jsr	AssembleGroup4
>abfd	58					.byte $58
.abfe					Assemble_phy:
.abfe	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac01	5a					.byte $5a
.ac02					Assemble_rts:
.ac02	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac05	60					.byte $60
.ac06					Assemble_pla:
.ac06	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac09	68					.byte $68
.ac0a					Assemble_sei:
.ac0a	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac0d	78					.byte $78
.ac0e					Assemble_ply:
.ac0e	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac11	7a					.byte $7a
.ac12					Assemble_dey:
.ac12	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac15	88					.byte $88
.ac16					Assemble_txa:
.ac16	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac19	8a					.byte $8a
.ac1a					Assemble_tya:
.ac1a	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac1d	98					.byte $98
.ac1e					Assemble_txs:
.ac1e	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac21	9a					.byte $9a
.ac22					Assemble_tay:
.ac22	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac25	a8					.byte $a8
.ac26					Assemble_tax:
.ac26	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac29	aa					.byte $aa
.ac2a					Assemble_clv:
.ac2a	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac2d	b8					.byte $b8
.ac2e					Assemble_tsx:
.ac2e	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac31	ba					.byte $ba
.ac32					Assemble_iny:
.ac32	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac35	c8					.byte $c8
.ac36					Assemble_dex:
.ac36	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac39	ca					.byte $ca
.ac3a					Assemble_cld:
.ac3a	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac3d	d8					.byte $d8
.ac3e					Assemble_phx:
.ac3e	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac41	da					.byte $da
.ac42					Assemble_stp:
.ac42	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac45	db					.byte $db
.ac46					Assemble_inx:
.ac46	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac49	e8					.byte $e8
.ac4a					Assemble_nop:
.ac4a	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac4d	ea					.byte $ea
.ac4e					Assemble_sed:
.ac4e	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac51	f8					.byte $f8
.ac52					Assemble_plx:
.ac52	20 26 87	jsr $8726		jsr	AssembleGroup4
>ac55	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ac56					DecimalScalarTable:
>ac56	66 66 66 66				.dword $66666666 ; 0.1
>ac5a	de					.byte $de
>ac5b	1f 85 eb 51				.dword $51eb851f ; 0.01
>ac5f	db					.byte $db
>ac60	4c 37 89 41				.dword $4189374c ; 0.001
>ac64	d8					.byte $d8
>ac65	ac 8b db 68				.dword $68db8bac ; 0.0001
>ac69	d4					.byte $d4
>ac6a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ac6e	d1					.byte $d1
>ac6f	83 de 1b 43				.dword $431bde83 ; 1e-06
>ac73	ce					.byte $ce
>ac74	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ac78	ca					.byte $ca
>ac79	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ac7d	c7					.byte $c7
>ac7e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ac82	c4					.byte $c4
>ac83	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ac87	c0					.byte $c0
>ac88	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ac8c	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ac8d					SyntaxError:
.ac8d	a9 02		lda #$02		lda	#2
.ac8f	4c 6d 93	jmp $936d		jmp	ErrorHandler
.ac92					RangeError:
.ac92	a9 04		lda #$04		lda	#4
.ac94	4c 6d 93	jmp $936d		jmp	ErrorHandler
.ac97					TypeError:
.ac97	a9 05		lda #$05		lda	#5
.ac99	4c 6d 93	jmp $936d		jmp	ErrorHandler
.ac9c					ArgumentError:
.ac9c	a9 07		lda #$07		lda	#7
.ac9e	4c 6d 93	jmp $936d		jmp	ErrorHandler
.aca1					NotDoneError:
.aca1	a9 0c		lda #$0c		lda	#12
.aca3	4c 6d 93	jmp $936d		jmp	ErrorHandler
.aca6					ErrorText:
>aca6	42 72 65 61 6b 00			.text	"Break",0
>acac	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>acb4	72 72 6f 72 00
>acb9	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>acc1	20 62 79 20 7a 65 72 6f 00
>acca	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>acd2	61 6e 67 65 00
>acd7	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>acdf	6d 61 74 63 68 00
>ace5	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aced	65 6d 6f 72 79 00
>acf3	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>acfb	61 72 67 75 6d 65 6e 74 00
>ad04	53 74 6f 70 00				.text	"Stop",0
>ad09	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ad11	6f 6f 20 6c 6f 6e 67 00
>ad19	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ad21	6e 20 66 61 69 6c 65 64 00
>ad2a	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ad32	61 74 61 00
>ad36	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ad3e	65 6e 74 65 64 00
>ad44	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ad4c	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ad58	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ad60	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ad6d	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ad75	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ad82	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ad8a	68 6f 75 74 20 57 68 69 6c 65 00
>ad95	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ad9d	68 6f 75 74 20 46 6f 72 00
>ada6	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>adae	61 63 6b 20 66 75 6c 6c 00
>adb7	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>adbf	75 63 74 75 72 65 00
>adc6	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>adce	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>addb	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ade3	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>adf1	41 72 72 61 79 20 73 69			.text	"Array size",0
>adf9	7a 65 00
>adfc	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ae04	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ae0c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1116."
>ae14	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>ae24	2e 20 42 75 69 6c 64 20 31 31 31 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ae31					EXTPrintCharacter:
.ae31	48		pha				pha
.ae32	da		phx				phx
.ae33	5a		phy				phy
.ae34	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ae37	7a		ply				ply
.ae38	fa		plx				plx
.ae39	68		pla				pla
.ae3a	60		rts				rts
.ae3b					EXTInputSingleCharacter:
.ae3b	da		phx				phx
.ae3c	5a		phy				phy
.ae3d					_EISCWait:
.ae3d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ae40	c9 00		cmp #$00			cmp 	#0
.ae42	f0 f9		beq $ae3d			beq 	_EISCWait
.ae44	7a		ply				ply
.ae45	fa		plx				plx
.ae46	60		rts				rts
.ae47					EXTInputLine:
.ae47	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ae49					_ILLoop:
.ae49	da		phx				phx 								; read character in
.ae4a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ae4d	fa		plx				plx
.ae4e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ae50	f0 12		beq $ae64			beq 	_ILBackspace
.ae52	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ae54	f0 15		beq $ae6b			beq 	_ILExit
.ae56	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ae58	90 ef		bcc $ae49			bcc 	_ILLoop
.ae5a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ae5c	f0 eb		beq $ae49			beq 	_ILLoop
.ae5e	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ae61	e8		inx				inx
.ae62	80 e5		bra $ae49			bra 	_ILLoop
.ae64					_ILBackspace:
.ae64	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ae66	f0 e1		beq $ae49			beq 	_ILLoop
.ae68	ca		dex				dex 								; back one.
.ae69	80 de		bra $ae49			bra 	_ILLoop
.ae6b					_ILExit:
.ae6b	20 31 ae	jsr $ae31			jsr 	EXTPrintCharacter
.ae6e	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ae71	60		rts				rts
.ae72					EXTBreakCheck:
.ae72	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ae75					MemoryDeleteLine:
.ae75	20 94 ae	jsr $ae94			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ae78	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ae7a	a8		tay				tay
.ae7b					_MDDLLoop:
.ae7b	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ae7d	92 30		sta ($30)			sta 	(codePtr)
.ae7f	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ae81	c5 3a		cmp $3a				cmp 	zTemp2
.ae83	d0 07		bne $ae8c			bne 	_MDLDLNext
.ae85	a5 31		lda $31				lda 	codePtr+1
.ae87	c5 3b		cmp $3b				cmp 	zTemp2+1
.ae89	d0 01		bne $ae8c			bne 	_MDLDLNext
.ae8b					_MDDLExit:
.ae8b	60		rts				rts
.ae8c					_MDLDLNext:
.ae8c	e6 30		inc $30				inc 	codePtr						; next byte
.ae8e	d0 eb		bne $ae7b			bne 	_MDDLLoop
.ae90	e6 31		inc $31				inc 	codePtr+1
.ae92	80 e7		bra $ae7b			bra 	_MDDLLoop
.ae94					IMemoryFindEnd:
.ae94	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae96	85 3a		sta $3a				sta 	0+zTemp2
.ae98	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae9a	85 3b		sta $3b				sta 	1+zTemp2
.ae9c					_MDLFELoop:
.ae9c	b2 3a		lda ($3a)			lda 	(zTemp2)
.ae9e	f0 0b		beq $aeab			beq 	_MDLFEExit
.aea0	18		clc				clc
.aea1	65 3a		adc $3a				adc 	zTemp2
.aea3	85 3a		sta $3a				sta 	zTemp2
.aea5	90 f5		bcc $ae9c			bcc 	_MDLFELoop
.aea7	e6 3b		inc $3b				inc 	zTemp2+1
.aea9	80 f1		bra $ae9c			bra 	_MDLFELoop
.aeab					_MDLFEExit:
.aeab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.aeac					MemoryInsertLine:
.aeac	08		php				php
.aead	20 94 ae	jsr $ae94			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aeb0	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.aeb2	1a		inc a				inc 	a
.aeb3	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.aeb5	b0 36		bcs $aeed			bcs 	_MDLIError
.aeb7	28		plp				plp
.aeb8	90 08		bcc $aec2			bcc 	_MDLIFound
.aeba	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.aebc	85 30		sta $30				sta 	codePtr
.aebe	a5 3b		lda $3b				lda 	zTemp2+1
.aec0	85 31		sta $31				sta 	codePtr+1
.aec2					_MDLIFound:
.aec2	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.aec5	a8		tay				tay
.aec6					_MDLIInsert:
.aec6	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.aec8	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aeca	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.aecc	c5 3a		cmp $3a				cmp 	zTemp2
.aece	d0 06		bne $aed6			bne 	_MDLINext
.aed0	a5 31		lda $31				lda 	codePtr+1
.aed2	c5 3b		cmp $3b				cmp 	zTemp2+1
.aed4	f0 0a		beq $aee0			beq 	_MDLIHaveSpace
.aed6					_MDLINext:
.aed6	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.aed8	d0 02		bne $aedc			bne 	_MDLINoBorrow
.aeda	c6 3b		dec $3b				dec 	zTemp2+1
.aedc					_MDLINoBorrow:
.aedc	c6 3a		dec $3a				dec 	zTemp2
.aede	80 e6		bra $aec6			bra 	_MDLIInsert
.aee0					_MDLIHaveSpace:
.aee0	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.aee3	88		dey				dey 								; from offset-1 to 0
.aee4					_MDLICopy:
.aee4	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.aee7	91 30		sta ($30),y			sta 	(codePtr),y
.aee9	88		dey				dey
.aeea	10 f8		bpl $aee4			bpl 	_MDLICopy
.aeec	60		rts				rts
.aeed					_MDLIError:
.aeed	a9 06		lda #$06		lda	#6
.aeef	4c 6d 93	jmp $936d		jmp	ErrorHandler
.aef2					MDLAppendLine:
.aef2	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.aef4	85 36		sta $36				sta 	zTemp0
.aef6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aef8	85 38		sta $38				sta 	0+zTemp1
.aefa	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aefc	85 39		sta $39				sta 	1+zTemp1
.aefe	b2 38		lda ($38)			lda 	(zTemp1)
.af00	d0 0a		bne $af0c			bne 	_MDLANoInitialise
.af02	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af04	8d 55 06	sta $0655			sta 	0+AppendPointer
.af07	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af09	8d 56 06	sta $0656			sta 	1+AppendPointer
.af0c					_MDLANoInitialise:
.af0c	18		clc				clc
.af0d	ad 55 06	lda $0655			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.af10	85 38		sta $38				sta 	zTemp1
.af12	72 36		adc ($36)			adc 	(zTemp0)
.af14	8d 55 06	sta $0655			sta 	AppendPointer
.af17	ad 56 06	lda $0656			lda 	AppendPointer+1
.af1a	85 39		sta $39				sta 	zTemp1+1
.af1c	69 00		adc #$00			adc 	#0
.af1e	8d 56 06	sta $0656			sta 	AppendPointer+1
.af21	a0 00		ldy #$00			ldy 	#0
.af23					_MDLACopy:
.af23	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.af25	91 38		sta ($38),y			sta 	(zTemp1),y
.af27	c8		iny				iny
.af28	98		tya				tya
.af29	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.af2b	d0 f6		bne $af23			bne 	_MDLACopy
.af2d	a9 00		lda #$00			lda 	#0 							; end of program.
.af2f	91 38		sta ($38),y			sta 	(zTemp1),y
.af31	60		rts				rts
.0655					AppendPointer:
>0655							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9f62					MemoryNew:
.9f62	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f64	85 30		sta $30				sta 	codePtr
.9f66	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f68	85 31		sta $31				sta 	codePtr+1
.9f6a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9f6c	92 30		sta ($30)			sta 	(codePtr)
.9f6e	60		rts				rts
.9f6f					MemoryInline:
.9f6f	98		tya				tya 								; put address into stack,x
.9f70	18		clc				clc
.9f71	65 30		adc $30				adc 	codePtr
.9f73	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f76	a5 31		lda $31				lda 	codePtr+1
.9f78	69 00		adc #$00			adc 	#0
.9f7a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f7d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9f80	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f83	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9f84					MemorySearch:
.9f84	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9f86	86 37		stx $37				stx 	zTemp0+1
.9f88	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f8a	85 30		sta $30				sta 	codePtr
.9f8c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f8e	85 31		sta $31				sta 	codePtr+1
.9f90					_MTAXLoop:
.9f90	b2 30		lda ($30)			lda 	(codePtr)
.9f92	18		clc				clc
.9f93	f0 21		beq $9fb6			beq 	_MTAXExit 					; reached end, exit with CC.
.9f95	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9f97	b1 30		lda ($30),y			lda 	(codePtr),y
.9f99	38		sec				sec
.9f9a	e5 36		sbc $36				sbc 	zTemp0
.9f9c	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9f9e	c8		iny				iny 								; do the MSB
.9f9f	b1 30		lda ($30),y			lda 	(codePtr),y
.9fa1	e5 37		sbc $37				sbc 	zTemp0+1
.9fa3	05 38		ora $38				ora 	zTemp1
.9fa5	f0 0f		beq $9fb6			beq 	_MTAXExit	 				; found
.9fa7	b0 0d		bcs $9fb6			bcs 	_MTAXExit 					; current < required exit
.9fa9	18		clc				clc
.9faa	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9fac	65 30		adc $30				adc 	codePtr
.9fae	85 30		sta $30				sta 	codePtr
.9fb0	90 02		bcc $9fb4			bcc 	_CREExit
.9fb2	e6 31		inc $31				inc 	codePtr+1
.9fb4					_CREExit:
.9fb4	80 da		bra $9f90			bra 	_MTAXLoop
.9fb6					_MTAXExit:
.9fb6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9fb7					StackPushByte:
.9fb7	48		pha				pha 								; save byte
.9fb8	a5 34		lda $34				lda 	BasicStack
.9fba	d0 09		bne $9fc5			bne 	_SPBNoBorrow
.9fbc	c6 35		dec $35				dec 	BasicStack+1
.9fbe	48		pha				pha
.9fbf	a5 35		lda $35				lda 	BasicStack+1
.9fc1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9fc3	90 06		bcc $9fcb			bcc 	_SPBMemory
.9fc5					_SPBNoBorrow:
.9fc5	c6 34		dec $34				dec 	BasicStack
.9fc7	68		pla				pla 								; get back and write
.9fc8	92 34		sta ($34)			sta 	(BasicStack)
.9fca	60		rts				rts
.9fcb					_SPBMemory:
.9fcb	a9 12		lda #$12		lda	#18
.9fcd	4c 6d 93	jmp $936d		jmp	ErrorHandler
.9fd0					StackPopByte:
.9fd0	b2 34		lda ($34)			lda 	(BasicStack)
.9fd2	e6 34		inc $34				inc 	BasicStack
.9fd4	d0 02		bne $9fd8			bne 	_SPBNoCarry
.9fd6	e6 35		inc $35				inc 	BasicStack+1
.9fd8					_SPBNoCarry:
.9fd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9fd9					StackOpen:
.9fd9	48		pha				pha 								; save frame byte
.9fda	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9fdc	0a		asl a				asl 	a 							; claim twice this for storage
.9fdd	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9fdf	38		sec				sec 								; so basically subtracting from
.9fe0	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9fe2	85 34		sta $34				sta 	basicStack
.9fe4	b0 08		bcs $9fee			bcs 	_SONoBorrow
.9fe6	c6 35		dec $35				dec 	basicStack+1
.9fe8	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9fea	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9fec	90 04		bcc $9ff2			bcc 	_SOMemory
.9fee					_SONoBorrow:
.9fee	68		pla				pla 								; get marker back and write at TOS
.9fef	92 34		sta ($34)			sta 	(basicStack)
.9ff1	60		rts				rts
.9ff2					_SOMemory:
.9ff2	a9 12		lda #$12		lda	#18
.9ff4	4c 6d 93	jmp $936d		jmp	ErrorHandler
.9ff7					StackClose:
.9ff7	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9ff9	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9ffb	0a		asl a				asl 	a 							; claim twice this.
.9ffc	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9ffe	85 34		sta $34				sta 	basicStack
.a000	90 02		bcc $a004			bcc 	_SCExit
.a002	e6 35		inc $35				inc 	basicStack+1
.a004					_SCExit:
.a004	60		rts				rts
.a005					StackCheckFrame:
.a005	48		pha				pha
.a006					_StackRemoveLocals:
.a006	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a008	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a00a	b0 05		bcs $a011			bcs 	_SCNoLocal
.a00c	20 4e a6	jsr $a64e			jsr 	LocalPopValue
.a00f	80 f5		bra $a006			bra 	_StackRemoveLocals
.a011					_SCNoLocal:
.a011	68		pla				pla
.a012	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a014	29 f0		and #$f0			and 	#$F0 						; check type bits
.a016	d0 01		bne $a019			bne 	_SCFError 					; different, we have structures mixed up
.a018	60		rts				rts
.a019					_SCFError:
.a019	8a		txa				txa 								; report error X
.a01a	4c 6d 93	jmp $936d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a01d					STKSaveCodePosition:
.a01d	5a		phy				phy
.a01e	98		tya				tya 								; save Y
.a01f	a0 05		ldy #$05			ldy 	#5
.a021	91 34		sta ($34),y			sta 	(basicStack),y
.a023	88		dey				dey 								; save Code Pointer
.a024					_STKSaveLoop:
.a024	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a027	91 34		sta ($34),y			sta 	(basicStack),y
.a029	88		dey				dey
.a02a	d0 f8		bne $a024			bne 	_STKSaveLoop
.a02c	7a		ply				ply
.a02d	60		rts				rts
.a02e					STKLoadCodePosition:
.a02e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a030					_STKLoadLoop:
.a030	b1 34		lda ($34),y			lda 	(basicStack),y
.a032	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a035	c8		iny				iny
.a036	c0 05		cpy #$05			cpy 	#5
.a038	d0 f6		bne $a030			bne 	_STKLoadLoop
.a03a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a03c	a8		tay				tay
.a03d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a03e					StackReset:
.a03e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a040	85 34		sta $34				sta 	0+basicStack
.a042	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a044	85 35		sta $35				sta 	1+basicStack
.a046	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a048	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a04a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.af32					StringConcrete:
.af32	5a		phy				phy 								; save position on stack
.af33	20 34 9c	jsr $9c34			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.af36	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.af39	85 38		sta $38				sta 	zTemp1
.af3b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.af3e	85 39		sta $39				sta 	zTemp1+1
.af40	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.af42					_SALength:
.af42	c8		iny				iny
.af43	b1 38		lda ($38),y			lda 	(zTemp1),y
.af45	d0 fb		bne $af42			bne 	_SALength
.af47	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.af49	b0 3f		bcs $af8a			bcs 	_SALengthError
.af4b	98		tya				tya 				 				; length of the new string
.af4c	18		clc				clc
.af4d	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.af4f	90 02		bcc $af53			bcc 	_SAHaveLength
.af51	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.af53					_SAHaveLength:
.af53	48		pha				pha 								; save length.
.af54	38		sec				sec
.af55	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.af57	6d 8e 04	adc $048e			adc 	StringMemory
.af5a	8d 8e 04	sta $048e			sta 	StringMemory
.af5d	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.af5f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.af62	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.af64	6d 8f 04	adc $048f			adc 	StringMemory+1
.af67	8d 8f 04	sta $048f			sta 	StringMemory+1
.af6a	85 3b		sta $3b				sta 	zTemp2+1
.af6c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af6f	68		pla				pla 								; save length-3 (chars allowed) in first byte
.af70	38		sec				sec
.af71	e9 03		sbc #$03			sbc 	#3
.af73	92 3a		sta ($3a)			sta 	(zTemp2)
.af75	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.af77	a0 01		ldy #$01			ldy 	#1
.af79	91 3a		sta ($3a),y			sta 	(zTemp2),y
.af7b					_SACopyNewString:
.af7b	a0 00		ldy #$00			ldy 	#0
.af7d					_SACopyNSLoop:
.af7d	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.af7f	c8		iny				iny 								; write two on in string storage
.af80	c8		iny				iny
.af81	91 3a		sta ($3a),y			sta 	(zTemp2),y
.af83	88		dey				dey 								; this makes it one one.
.af84	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.af86	d0 f5		bne $af7d			bne 	_SACopyNSLoop
.af88	7a		ply				ply
.af89	60		rts				rts
.af8a					_SALengthError:
.af8a	a9 09		lda #$09		lda	#9
.af8c	4c 6d 93	jmp $936d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.af8f					StringSystemInitialise:
.af8f	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.af91	8d 8e 04	sta $048e			sta 	0+StringMemory
.af94	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.af96	8d 8f 04	sta $048f			sta 	1+StringMemory
.af99	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.af9c	60		rts				rts
.af9d					StringSpaceInitialise:
.af9d	20 34 9c	jsr $9c34			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afa0	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.afa2	8d 90 04	sta $0490			sta 	StringInitialised
.afa5	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.afa8	8d 91 04	sta $0491			sta 	StringTempPointer
.afab	ad 8f 04	lda $048f			lda 	StringMemory+1
.afae	3a		dec a				dec 	a
.afaf	8d 92 04	sta $0492			sta 	StringTempPointer+1
.afb2	60		rts				rts
.afb3					StringTempAllocate:
.afb3	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.afb5	b0 35		bcs $afec			bcs 	_STALength
.afb7	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.afba	30 05		bmi $afc1			bmi 	_STAAllocate
.afbc	48		pha				pha 								; save value to subtract.
.afbd	20 9d af	jsr $af9d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.afc0	68		pla				pla 								; restore it
.afc1					_STAAllocate:
.afc1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.afc3	18		clc				clc  								; deliberate allows one more
.afc4	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.afc7	8d 91 04	sta $0491			sta 	StringTempPointer
.afca	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.afcd	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.afcf	ad 92 04	lda $0492			lda 	StringTempPointer+1
.afd2	69 ff		adc #$ff			adc 	#$FF
.afd4	8d 92 04	sta $0492			sta 	StringTempPointer+1
.afd7	85 3d		sta $3d				sta 	zsTemp+1
.afd9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afdc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.afdf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.afe2	a9 10		lda #$10			lda 	#NSTString
.afe4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.afe7	a9 00		lda #$00			lda 	#0 							; clear the target string
.afe9	92 3c		sta ($3c)			sta 	(zsTemp)
.afeb	60		rts				rts
.afec					_STALength:
.afec	a9 09		lda #$09		lda	#9
.afee	4c 6d 93	jmp $936d		jmp	ErrorHandler
.aff1					StringTempWrite:
.aff1	48		pha				pha
.aff2	92 3c		sta ($3c)			sta 	(zsTemp)
.aff4	e6 3c		inc $3c				inc 	zsTemp
.aff6	d0 02		bne $affa			bne 	_STWNoCarry
.aff8	e6 3d		inc $3d				inc 	zsTemp+1
.affa					_STWNoCarry:
.affa	a9 00		lda #$00			lda 	#0
.affc	92 3c		sta ($3c)			sta 	(zsTemp)
.affe	68		pla				pla
.afff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a04b					BackloadProgram:
.a04b	a2 ff		ldx #$ff			ldx 	#$FF
.a04d	20 75 a0	jsr $a075			jsr 	BLReadByte
.a050	30 1f		bmi $a071			bmi 	_BPExit
.a052					_BPCopy:
.a052	e8		inx				inx  								; copy byte in
.a053	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a056	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a059	20 75 a0	jsr $a075			jsr 	BLReadByte 					; read next byte
.a05c	30 0a		bmi $a068			bmi 	_BPEndLine 					; -ve = EOL
.a05e	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a060	d0 02		bne $a064			bne 	_BPNotTab
.a062	a9 20		lda #$20			lda 	#' '
.a064					_BPNotTab:
.a064	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a066	b0 ea		bcs $a052			bcs 	_BPCopy
.a068					_BPEndLine:
.a068	20 9e a3	jsr $a39e			jsr 	TokeniseLine 				; tokenise the line.
.a06b	38		sec				sec 								; append not insert
.a06c	20 ac ae	jsr $aeac			jsr 	MemoryInsertLine 			; append to current program
.a06f	80 da		bra $a04b			bra 	BackloadProgram
.a071					_BPExit:
.a071	20 9e 89	jsr $899e			jsr 	ClearCommand 				; clear variables etc.
.a074	60		rts				rts
.a075					BLReadByte:
.a075					_BLLoad:
.a075	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a078	ee 76 a0	inc $a076			inc 	_BLLoad+1
.a07b	d0 03		bne $a080			bne 	_BLNoCarry
.a07d	ee 77 a0	inc $a077			inc 	_BLLoad+2
.a080					_BLNoCarry:
.a080	c9 00		cmp #$00			cmp 	#0
.a082	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a083					TokeniseSearchTable:
.a083	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a085	85 36		sta $36				sta 	zTemp0
.a087	a0 00		ldy #$00			ldy 	#0
.a089	a9 80		lda #$80			lda 	#$80 						; token #
.a08b	85 38		sta $38				sta 	zTemp1
.a08d					_TSTLoop:
.a08d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a08f	30 49		bmi $a0da			bmi 	_TSTFail 					; -ve = end of table
.a091	f0 2e		beq $a0c1			beq 	_TSTNext 					; zero, check next it's a dummy
.a093	c8		iny				iny 								; get the hash
.a094	b1 36		lda ($36),y			lda 	(zTemp0),y
.a096	88		dey				dey
.a097	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a09a	d0 25		bne $a0c1			bne 	_TSTNext
.a09c	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a09f	38		sec				sec
.a0a0	ed 80 04	sbc $0480			sbc 	identStart
.a0a3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a0a5	d0 1a		bne $a0c1			bne 	_TSTNext
.a0a7	5a		phy				phy 								; save Y , we might fail
.a0a8	c8		iny				iny 								; point to text
.a0a9	c8		iny				iny
.a0aa	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a0ad					_TSTCompareName:
.a0ad	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a0b0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a0b2	d0 0c		bne $a0c0			bne 	_TSTNextPullY 				; fail, pullY and do next
.a0b4	e8		inx				inx
.a0b5	c8		iny				iny
.a0b6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a0b9	d0 f2		bne $a0ad			bne 	_TSTCompareName
.a0bb	7a		ply				ply 								; throw Y
.a0bc	a5 38		lda $38				lda 	zTemp1 						; get token #
.a0be	38		sec				sec 								; return with CS = passed.
.a0bf	60		rts				rts
.a0c0					_TSTNextPullY:
.a0c0	7a		ply				ply 								; restore current, fall through.
.a0c1					_TSTNext:
.a0c1	e6 38		inc $38				inc 	zTemp1 						; token counter
.a0c3	98		tya				tya
.a0c4	18		clc				clc
.a0c5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a0c7	1a		inc a				inc 	a 							; +1
.a0c8	1a		inc a				inc 	a 							; +2
.a0c9	a8		tay				tay
.a0ca	10 c1		bpl $a08d			bpl 	_TSTLoop 					; if Y < $80 loop back
.a0cc	98		tya				tya 								; add Y to zTemp0 and reset Y
.a0cd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a0cf	18		clc				clc  								; but have tables > 255 bytes
.a0d0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a0d2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a0d4	90 b7		bcc $a08d			bcc 	_TSTLoop
.a0d6	e6 37		inc $37				inc 	zTemp0+1
.a0d8	80 b3		bra $a08d			bra 	_TSTLoop
.a0da					_TSTFail:
.a0da	18		clc				clc
.a0db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a0dc					KeywordSet0:
>a0dc	00 65					.text	0,$65,""               ; $80 !0:EOF
>a0de	00 58					.text	0,$58,""               ; $81 !1:SH1
>a0e0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a0e2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a0e8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a0f0	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a0f6	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a0fd	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a104	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a10b	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a111	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a119	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a121	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a127	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a12e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a134	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a13c	28
>a13d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a145	28
>a146	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a14c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a152	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a158	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a15f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a165	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a16b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a170	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a174	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a17a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a182	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a189	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a190	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a198	43
>a199	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a19f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a1a5	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a1ac	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a1b2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a1b8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a1bd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a1c3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a1c8	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a1d0	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a1d6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a1dd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a1e3	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a1e8	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a1ef	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a1f6	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a1fc	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a201	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a209	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a20d	ff					.text	$FF
.a20e					KeywordSet1:
>a20e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a210	00 58					.text	0,$58,""               ; $81 !1:SH1
>a212	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a214	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a21c	4c 45
>a21e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a226	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a22d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a232	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a238	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a23d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a245	45
>a246	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a24b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a251	ff					.text	$FF
.a252					KeywordSet2:
>a252	00 65					.text	0,$65,""               ; $80 !0:EOF
>a254	00 58					.text	0,$58,""               ; $81 !1:SH1
>a256	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a258	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a25d	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a262	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a267	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a26c	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a271	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a276	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a27b	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a280	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a285	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a28a	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a28f	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a294	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a299	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a29e	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a2a3	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a2a8	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a2ad	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a2b2	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a2b7	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a2bc	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a2c1	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a2c6	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a2cb	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a2d0	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a2d5	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a2da	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a2df	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a2e4	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a2e9	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a2ee	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a2f3	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a2f8	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a2fd	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a302	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a307	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a30c	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a311	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a316	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a31b	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a320	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a325	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a32a	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a32f	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a334	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a339	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a33e	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a343	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a348	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a34d	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a352	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a357	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a35c	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a361	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a366	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a36b	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a370	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a375	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a37a	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a37f	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a384	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a389	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a38e	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a393	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a398	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a39d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a39e					TokeniseLine:
.a39e	20 26 a5	jsr $a526			jsr 	FixLineBufferCase 			; fix line case
.a3a1	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a3a3	8d a6 04	sta $04a6			sta 	tokenOffset
.a3a6	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a3a9	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a3ac	a2 ff		ldx #$ff			ldx 	#$FF
.a3ae					_TKFindFirst:
.a3ae	e8		inx				inx
.a3af	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a3b2	f0 79		beq $a42d			beq 	_TKExit
.a3b4	c9 20		cmp #$20			cmp 	#' '
.a3b6	90 f6		bcc $a3ae			bcc 	_TKFindFirst
.a3b8	c9 30		cmp #$30			cmp 	#'0'
.a3ba	90 07		bcc $a3c3			bcc 	_TKNoLineNumber
.a3bc	c9 3a		cmp #$3a			cmp 	#'9'+1
.a3be	b0 03		bcs $a3c3			bcs 	_TKNoLineNumber
.a3c0	20 50 a5	jsr $a550			jsr 	TokeniseExtractLineNumber
.a3c3					_TKNoLineNumber:
.a3c3					_TKTokeniseLoop:
.a3c3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a3c6	f0 65		beq $a42d			beq 	_TKExit
.a3c8	e8		inx				inx
.a3c9	c9 20		cmp #$20			cmp 	#' '
.a3cb	f0 f6		beq $a3c3			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a3cd	ca		dex				dex 								; undo last get, A contains character, X is position.
.a3ce	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a3d0	f0 61		beq $a433			beq 	_TKTokeniseIdentifier
.a3d2	c9 41		cmp #$41			cmp 	#'A'
.a3d4	90 04		bcc $a3da			bcc 	_TKTokenisePunctuation
.a3d6	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a3d8	90 59		bcc $a433			bcc 	_TKTokeniseIdentifier
.a3da					_TKTokenisePunctuation:
.a3da	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a3dc	f0 27		beq $a405			beq 	_TKString
.a3de	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a3e0	f0 28		beq $a40a			beq 	_TKHexConstant
.a3e2	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a3e4	f0 29		beq $a40f			beq 	_TKCheckDouble
.a3e6	c9 3e		cmp #$3e			cmp 	#'>'
.a3e8	f0 25		beq $a40f			beq 	_TKCheckDouble
.a3ea					_TKStandardPunctuation:
.a3ea	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a3ed	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a3ef	90 0e		bcc $a3ff			bcc 	_TKNoShift
.a3f1	48		pha				pha 								; save
.a3f2	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a3f4	85 36		sta $36				sta 	zTemp0
.a3f6	68		pla				pla
.a3f7	29 20		and #$20			and 	#32 						; bit 5
.a3f9	4a		lsr a				lsr 	a 							; shift into bit 3
.a3fa	4a		lsr a				lsr 	a
.a3fb	05 36		ora $36				ora 	zTemp0
.a3fd	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a3ff					_TKNoShift:
.a3ff	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte 			; write the punctuation character
.a402	e8		inx				inx 								; consume the character
.a403	80 be		bra $a3c3			bra 	_TKTokeniseLoop 			; and loop round again.
.a405					_TKString:
.a405	20 b5 a4	jsr $a4b5			jsr 	TokeniseString
.a408	80 b9		bra $a3c3			bra 	_TKTokeniseLoop
.a40a					_TKHexConstant:
.a40a	20 f0 a4	jsr $a4f0			jsr 	TokeniseHexConstant
.a40d	80 b4		bra $a3c3			bra 	_TKTokeniseLoop
.a40f					_TKCheckDouble:
.a40f	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a412	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a414	90 d4		bcc $a3ea			bcc 	_TKStandardPunctuation
.a416	c9 3f		cmp #$3f			cmp 	#'>'+1
.a418	b0 d0		bcs $a3ea			bcs 	_TKStandardPunctuation
.a41a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a41d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a41f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a420	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a423	38		sec				sec
.a424	e9 3c		sbc #$3c			sbc 	#'<'
.a426	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a429	e8		inx				inx 								; consume both
.a42a	e8		inx				inx
.a42b	80 96		bra $a3c3			bra 	_TKTokeniseLoop
.a42d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a42f	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a432	60		rts				rts
.a433					_TKTokeniseIdentifier:
.a433	8e 80 04	stx $0480			stx 	identStart 					; save start
.a436	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a439					_TKCheckLoop:
.a439	e8		inx				inx 								; look at next, we know first is identifier.
.a43a	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a43d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a43f	f0 f8		beq $a439			beq 	_TKCheckLoop
.a441	c9 30		cmp #$30			cmp	 	#"0"
.a443	90 0c		bcc $a451			bcc 	_TKEndIdentifier
.a445	c9 3a		cmp #$3a			cmp 	#"9"+1
.a447	90 f0		bcc $a439			bcc 	_TKCheckLoop
.a449	c9 41		cmp #$41			cmp	 	#"A"
.a44b	90 04		bcc $a451			bcc 	_TKEndIdentifier
.a44d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a44f	90 e8		bcc $a439			bcc 	_TKCheckLoop
.a451					_TKEndIdentifier:
.a451	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a454	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a456	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a458	f0 06		beq $a460			beq 	_TKHasTypeCharacter
.a45a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a45c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a45e	d0 07		bne $a467			bne 	_TKNoTypeCharacter
.a460					_TKHasTypeCharacter:
.a460	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a463	e8		inx				inx 								; read next
.a464	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a467					_TKNoTypeCharacter:
.a467	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a469	d0 09		bne $a474			bne 	_TKNoArray
.a46b	e8		inx				inx 								; skip the (
.a46c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a46f	09 04		ora #$04			ora 	#$04
.a471	8d 84 04	sta $0484			sta 	identTypeByte
.a474					_TKNoArray:
.a474	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a477	20 11 a5	jsr $a511			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a47a	a0 a0		ldy #$a0			ldy 	#(KeywordSet0) >> 8
.a47c	a9 dc		lda #$dc			lda 	#(KeywordSet0) & $FF
.a47e	20 83 a0	jsr $a083			jsr 	TokeniseSearchTable
.a481	a2 00		ldx #$00			ldx 	#0
.a483	b0 1f		bcs $a4a4			bcs 	_TKFoundToken
.a485	a0 a2		ldy #$a2			ldy 	#(KeywordSet1) >> 8
.a487	a9 0e		lda #$0e			lda 	#(KeywordSet1) & $FF
.a489	20 83 a0	jsr $a083			jsr 	TokeniseSearchTable
.a48c	a2 81		ldx #$81			ldx 	#$81
.a48e	b0 14		bcs $a4a4			bcs 	_TKFoundToken
.a490	a0 a2		ldy #$a2			ldy 	#(KeywordSet2) >> 8
.a492	a9 52		lda #$52			lda 	#(KeywordSet2) & $FF
.a494	20 83 a0	jsr $a083			jsr 	TokeniseSearchTable
.a497	a2 82		ldx #$82			ldx 	#$82
.a499	b0 09		bcs $a4a4			bcs 	_TKFoundToken
.a49b	20 a1 a5	jsr $a5a1			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a49e	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a4a1	4c c3 a3	jmp $a3c3			jmp 	_TKTokeniseLoop 			; and go round again.
.a4a4					_TKFoundToken:
.a4a4	48		pha				pha 								; save token
.a4a5	8a		txa				txa 								; shift in X, is there one ?
.a4a6	f0 03		beq $a4ab			beq 	_TKNoTShift
.a4a8	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte 			; if so, write it out
.a4ab					_TKNoTShift:
.a4ab	68		pla				pla 								; restore and write token
.a4ac	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a4af	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a4b2	4c c3 a3	jmp $a3c3			jmp 	_TKTokeniseLoop 			; and go round again.
.a4b5					TokeniseString:
.a4b5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a4b7	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a4ba	e8		inx				inx									; start of quoted string.
.a4bb	da		phx				phx 								; push start of string on top
.a4bc	ca		dex				dex
.a4bd					_TSFindEnd:
.a4bd	e8		inx				inx
.a4be	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a4c1	f0 04		beq $a4c7			beq 	_TSEndOfString
.a4c3	c9 22		cmp #$22			cmp 	#'"'
.a4c5	d0 f6		bne $a4bd			bne 	_TSFindEnd
.a4c7					_TSEndOfString:
.a4c7	7a		ply				ply  								; so now Y is first character, X is character after end.
.a4c8	48		pha				pha 								; save terminating character
.a4c9	20 d1 a4	jsr $a4d1			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a4cc	68		pla				pla 								; terminating character
.a4cd	f0 01		beq $a4d0			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a4cf	e8		inx				inx
.a4d0					_TSNotQuote:
.a4d0	60		rts				rts
.a4d1					TOWriteBlockXY:
.a4d1	86 36		stx $36				stx 	zTemp0 						; write end character
.a4d3	98		tya				tya
.a4d4	49 ff		eor #$ff			eor 	#$FF
.a4d6	38		sec				sec
.a4d7	65 36		adc $36				adc 	zTemp0
.a4d9	1a		inc a				inc 	a 							; one extra for NULL
.a4da	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a4dd					_TOBlockLoop:
.a4dd	c4 36		cpy $36				cpy 	zTemp0
.a4df	f0 09		beq $a4ea			beq 	_TOBlockExit
.a4e1	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a4e4	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a4e7	c8		iny				iny
.a4e8	80 f3		bra $a4dd			bra 	_TOBlockLoop
.a4ea					_TOBlockExit:
.a4ea	a9 00		lda #$00			lda 	#0
.a4ec	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a4ef	60		rts				rts
.a4f0					TokeniseHexConstant:
.a4f0	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a4f2	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a4f5	e8		inx				inx									; start of quoted string.
.a4f6	da		phx				phx 								; push start of constant on top
.a4f7	ca		dex				dex
.a4f8					_THFindLoop:
.a4f8	e8		inx				inx
.a4f9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4fc	c9 30		cmp #$30			cmp 	#"0"
.a4fe	90 0c		bcc $a50c			bcc 	_THFoundEnd
.a500	c9 3a		cmp #$3a			cmp 	#"9"+1
.a502	90 f4		bcc $a4f8			bcc 	_THFindLoop
.a504	c9 41		cmp #$41			cmp 	#"A"
.a506	90 04		bcc $a50c			bcc 	_THFoundEnd
.a508	c9 47		cmp #$47			cmp 	#"F"+1
.a50a	90 ec		bcc $a4f8			bcc 	_THFindLoop
.a50c					_THFoundEnd:
.a50c	7a		ply				ply 								; restore start
.a50d	20 d1 a4	jsr $a4d1			jsr 	TOWriteBlockXY 				; output the block
.a510	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a511					TokeniseCalculateHash:
.a511	da		phx				phx
.a512	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a515	a9 00		lda #$00			lda 	#0
.a517					_TCHLoop:
.a517	18		clc				clc
.a518	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a51b	e8		inx				inx
.a51c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a51f	d0 f6		bne $a517			bne 	_TCHLoop
.a521	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a524	fa		plx				plx
.a525	60		rts				rts
.a526					FixLineBufferCase:
.a526	a2 00		ldx #$00			ldx 	#0
.a528					_FLBCLoop:
.a528	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a52b	f0 22		beq $a54f			beq 	_FLBCExit 					; end of string.
.a52d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a52f	f0 11		beq $a542			beq 	_FLBCInQuotes
.a531	e8		inx				inx
.a532	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a534	90 f2		bcc $a528			bcc 	_FLBCLoop
.a536	c9 7b		cmp #$7b			cmp 	#'z'+1
.a538	b0 ee		bcs $a528			bcs 	_FLBCLoop
.a53a	38		sec				sec 								; make U/C
.a53b	e9 20		sbc #$20			sbc 	#32
.a53d	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a540	80 e6		bra $a528			bra 	_FLBCLoop
.a542					_FLBCInQuotes:
.a542	e8		inx				inx 								; advance
.a543	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a546	f0 07		beq $a54f			beq 	_FLBCExit 					; exit on EOS
.a548	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a54a	d0 f6		bne $a542			bne 	_FLBCInQuotes
.a54c	e8		inx				inx 								; skip over it
.a54d	80 d9		bra $a528			bra 	_FLBCLoop
.a54f					_FLBCExit:
.a54f	60		rts				rts
.a550					TokeniseExtractLineNumber:
.a550	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a553	48		pha				pha
.a554	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a557	48		pha				pha
.a558	20 8e a5	jsr $a58e			jsr 	_TELNTimes2 				; line # x 4
.a55b	20 8e a5	jsr $a58e			jsr 	_TELNTimes2 				; line # x 2
.a55e	18		clc				clc 								; add stacked value
.a55f	68		pla				pla
.a560	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a563	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a566	68		pla				pla
.a567	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a56a	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a56d	20 8e a5	jsr $a58e			jsr 	_TELNTimes2 				; line # x 10
.a570	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a573	e8		inx				inx
.a574	29 0f		and #$0f			and 	#15 						; add to line #
.a576	18		clc				clc
.a577	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a57a	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a57d	90 03		bcc $a582			bcc 	_TLENNoCarry
.a57f	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a582					_TLENNoCarry:
.a582	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a585	c9 30		cmp #$30			cmp 	#'0'
.a587	90 04		bcc $a58d			bcc 	_TLENExit
.a589	c9 3a		cmp #$3a			cmp 	#'9'+1
.a58b	90 c3		bcc $a550			bcc 	TokeniseExtractLineNumber
.a58d					_TLENExit:
.a58d	60		rts				rts
.a58e					_TELNTimes2:
.a58e	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a591	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a594	60		rts				rts
.a595					TokeniseWriteByte:
.a595	da		phx				phx
.a596	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a599	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a59c	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a59f	fa		plx				plx
.a5a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a5a1					CheckCreateVariableRecord:
.a5a1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a5a3	85 36		sta $36				sta 	0+zTemp0
.a5a5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a5a7	85 37		sta $37				sta 	1+zTemp0
.a5a9					_CCVSearch:
.a5a9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a5ab	f0 2c		beq $a5d9			beq 	_CCVFail
.a5ad	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a5af	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a5b1	cd 83 04	cmp $0483			cmp 	identHash
.a5b4	d0 16		bne $a5cc			bne 	_CCVNext
.a5b6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a5b8	ae 80 04	ldx $0480			ldx 	identStart
.a5bb					_CCVCompare:
.a5bb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a5be	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a5c0	e8		inx				inx 								; advance pointers
.a5c1	c8		iny				iny
.a5c2	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a5c3	d0 07		bne $a5cc			bne 	_CCVNext  					; didn't match go to next.
.a5c5	90 f4		bcc $a5bb			bcc 	_CCVCompare 				; not finished yet.
.a5c7	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a5ca	f0 41		beq $a60d			beq 	_CCVFound 					; yes, we were successful
.a5cc					_CCVNext:
.a5cc	18		clc				clc
.a5cd	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a5cf	65 36		adc $36				adc 	zTemp0
.a5d1	85 36		sta $36				sta 	zTemp0
.a5d3	90 d4		bcc $a5a9			bcc 	_CCVSearch
.a5d5	e6 37		inc $37				inc 	zTemp0+1
.a5d7	80 d0		bra $a5a9			bra 	_CCVSearch
.a5d9					_CCVFail:
.a5d9	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a5db	ad 83 04	lda $0483			lda 	identHash
.a5de	91 36		sta ($36),y			sta 	(zTemp0),y
.a5e0	c8		iny				iny 								; offset 2 is the type byte
.a5e1	ad 84 04	lda $0484			lda 	identTypeByte
.a5e4	91 36		sta ($36),y			sta 	(zTemp0),y
.a5e6	c8		iny				iny
.a5e7					_CCVData:
.a5e7	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a5e9	91 36		sta ($36),y			sta 	(zTemp0),y
.a5eb	c8		iny				iny
.a5ec	c0 08		cpy #$08			cpy 	#8
.a5ee	90 f7		bcc $a5e7			bcc 	_CCVData
.a5f0	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a5f3					_CCVCopyName:
.a5f3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a5f6	91 36		sta ($36),y			sta 	(zTemp0),y
.a5f8	e8		inx				inx
.a5f9	c8		iny				iny
.a5fa	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a5fd	d0 f4		bne $a5f3			bne 	_CCVCopyName
.a5ff	98		tya				tya 								; patch offset
.a600	92 36		sta ($36)			sta 	(zTemp0)
.a602	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a604	91 36		sta ($36),y			sta 	(zTemp0),y
.a606	88		dey				dey
.a607	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a609	09 80		ora #$80			ora 	#$80
.a60b	91 36		sta ($36),y			sta 	(zTemp0),y
.a60d					_CCVFound:
.a60d	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a60f	38		sec				sec
.a610	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a612	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a614	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a617	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a619	20 95 a5	jsr $a595			jsr 	TokeniseWriteByte
.a61c	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
