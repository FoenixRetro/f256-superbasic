
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 11:41:14 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					AssemblerAddress:
>071c							.fill 	2
.071e					AssemblerControl:
>071e							.fill 	1
.071f					ParamStart:
>071f							.fill 	2
.0721					IsGroup1:
>0721							.fill 	1
.0722					BaseOpcode:
>0722							.fill 	1
.0723					ModeMask:
>0723							.fill 	1
.0724					tokenOffset:
>0724							.fill 	1
.0725					tokenLineNumber:
>0725							.fill 	2
.0727					tokenBuffer:
>0727							.fill 	253
.0824					lineBuffer:
>0824							.fill 	MaxLineSize+1
.0875					numberBuffer:
>0875							.fill 	34
.0897					decimalBuffer:
>0897							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 c4 87	jsr $87c4			jsr 	NewCommand 					; erase current program
.8006	20 b1 97	jsr $97b1			jsr 	BackloadProgram
.8009	4c f4 83	jmp $83f4			jmp 	WarmStart
>800c							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.800c					VectorSetPunc:
>800c	6b 8d					.word	ShiftLeft                        ; $00 <<
>800e	65 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8010	5b 8c					.word	BinaryCompareNotEqual            ; $02 <>
>8012	17 a4					.word	SyntaxError                      ; $03 !!3
>8014	17 a4					.word	SyntaxError                      ; $04 ><
>8016	6f 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8018	6e 8d					.word	ShiftRight                       ; $06 >>
>801a	17 a4					.word	SyntaxError                      ; $07 !!7
>801c	17 a4					.word	SyntaxError                      ; $08 !!8
>801e	17 a4					.word	SyntaxError                      ; $09 !!9
>8020	17 a4					.word	SyntaxError                      ; $0a !!10
>8022	17 a4					.word	SyntaxError                      ; $0b !!11
>8024	17 a4					.word	SyntaxError                      ; $0c !!12
>8026	17 a4					.word	SyntaxError                      ; $0d !!13
>8028	17 a4					.word	SyntaxError                      ; $0e !!14
>802a	17 a4					.word	SyntaxError                      ; $0f !!15
>802c	17 a4					.word	SyntaxError                      ; $10 @
>802e	17 a4					.word	SyntaxError                      ; $11 !!17
>8030	17 a4					.word	SyntaxError                      ; $12 !!18
>8032	17 a4					.word	SyntaxError                      ; $13 [
>8034	4e 9e					.word	IntegerDivide                    ; $14 \
>8036	17 a4					.word	SyntaxError                      ; $15 ]
>8038	f4 8e					.word	EorInteger                       ; $16 ^
>803a	17 a4					.word	SyntaxError                      ; $17 _
>803c	17 a4					.word	SyntaxError                      ; $18 `
>803e	17 a4					.word	SyntaxError                      ; $19 !!25
>8040	17 a4					.word	SyntaxError                      ; $1a !!26
>8042	17 a4					.word	SyntaxError                      ; $1b {
>8044	ae 8e					.word	OraInteger                       ; $1c |
>8046	17 a4					.word	SyntaxError                      ; $1d }
>8048	17 a4					.word	SyntaxError                      ; $1e ~
>804a	17 a4					.word	SyntaxError                      ; $1f [7m<7F>[m
>804c	17 a4					.word	SyntaxError                      ; $20
>804e	3a 8f					.word	WordIndirect                     ; $21 !
>8050	17 a4					.word	SyntaxError                      ; $22 "
>8052	17 a4					.word	SyntaxError                      ; $23 #
>8054	17 a4					.word	SyntaxError                      ; $24 $
>8056	9b 9e					.word	IntegerModulus                   ; $25 %
>8058	68 8e					.word	AndInteger                       ; $26 &
>805a	17 a4					.word	SyntaxError                      ; $27 '
>805c	17 a4					.word	SyntaxError                      ; $28 (
>805e	17 a4					.word	SyntaxError                      ; $29 )
>8060	10 9f					.word	MulInteger                       ; $2a *
>8062	02 8e					.word	AddInteger                       ; $2b +
>8064	17 a4					.word	SyntaxError                      ; $2c ,
>8066	3d 8e					.word	SubInteger                       ; $2d -
>8068	17 a4					.word	SyntaxError                      ; $2e .
>806a	a7 a0					.word	FDivideCommand                   ; $2f /
>806c	17 a4					.word	SyntaxError                      ; $30 0
>806e	17 a4					.word	SyntaxError                      ; $31 1
>8070	17 a4					.word	SyntaxError                      ; $32 2
>8072	17 a4					.word	SyntaxError                      ; $33 3
>8074	17 a4					.word	SyntaxError                      ; $34 4
>8076	17 a4					.word	SyntaxError                      ; $35 5
>8078	17 a4					.word	SyntaxError                      ; $36 6
>807a	17 a4					.word	SyntaxError                      ; $37 7
>807c	17 a4					.word	SyntaxError                      ; $38 8
>807e	17 a4					.word	SyntaxError                      ; $39 9
>8080	17 a4					.word	SyntaxError                      ; $3a :
>8082	17 a4					.word	SyntaxError                      ; $3b ;
>8084	47 8c					.word	BinaryCompareLess                ; $3c <
>8086	3d 8c					.word	BinaryCompareEqual               ; $3d =
>8088	51 8c					.word	BinaryCompareGreater             ; $3e >
>808a	61 8f					.word	ByteIndirect                     ; $3f ?
.808c					VectorSet0:
>808c	6d 89					.word	EOLCommand                       ; $80 !0:EOF
>808e	7a 89					.word	Shift1Command                    ; $81 !1:SH1
>8090	82 89					.word	Shift2Command                    ; $82 !2:SH2
>8092	ed a1					.word	AbsUnary                         ; $83 ABS(
>8094	2b 94					.word	AllocUnary                       ; $84 ALLOC(
>8096	fd a1					.word	AscUnary                         ; $85 ASC(
>8098	e6 94					.word	ChrUnary                         ; $86 CHR$(
>809a	39 8c					.word	UnaryFalse                       ; $87 FALSE
>809c	0a a2					.word	FracUnary                        ; $88 FRAC(
>809e	20 a2					.word	IntUnary                         ; $89 INT(
>80a0	76 a2					.word	IsValUnary                       ; $8a ISVAL(
>80a2	c0 95					.word	Unary_Left                       ; $8b LEFT$(
>80a4	32 a2					.word	LenUnary                         ; $8c LEN(
>80a6	ea 95					.word	Unary_Mid                        ; $8d MID$(
>80a8	83 94					.word	Unary_Not                        ; $8e NOT(
>80aa	d0 95					.word	Unary_Right                      ; $8f RIGHT$(
>80ac	99 94					.word	Unary_Rnd                        ; $90 RND(
>80ae	4c a2					.word	SgnUnary                         ; $91 SGN(
>80b0	f8 94					.word	SpcUnary                         ; $92 SPC(
>80b2	13 95					.word	Unary_Str                        ; $93 STR$(
>80b4	2d 8c					.word	UnaryTrue                        ; $94 TRUE
>80b6	6c a2					.word	ValUnary                         ; $95 VAL(
>80b8	7e 85					.word	ForCommand                       ; $96 FOR
>80ba	cb 86					.word	IfCommand                        ; $97 IF
>80bc	8a 89					.word	Unused1                          ; $98 PROC
>80be	bc 88					.word	Command_REPEAT                   ; $99 REPEAT
>80c0	92 8b					.word	Command_WHILE                    ; $9a WHILE
>80c2	f4 86					.word	EndIf                            ; $9b ENDIF
>80c4	27 9e					.word	Command_ENDPROC                  ; $9c ENDPROC
>80c6	38 86					.word	NextCommand                      ; $9d NEXT
>80c8	8a 89					.word	Unused4                          ; $9e THEN
>80ca	c5 88					.word	Command_UNTIL                    ; $9f UNTIL
>80cc	b3 8b					.word	Command_WEND                     ; $a0 WEND
>80ce	53 84					.word	CallCommand                      ; $a1 CALL
>80d0	17 a4					.word	SyntaxError                      ; $a2 CLS
>80d2	b6 84					.word	Command_Data                     ; $a3 DATA
>80d4	be 84					.word	DimCommand                       ; $a4 DIM
>80d6	8a 89					.word	Unused3                          ; $a5 DOWNTO
>80d8	ed 86					.word	ElseCode                         ; $a6 ELSE
>80da	91 86					.word	Command_GOSUB                    ; $a7 GOSUB
>80dc	af 86					.word	GotoCommand                      ; $a8 GOTO
>80de	f5 86					.word	LetCommand                       ; $a9 LET
>80e0	ce 87					.word	Command_Print                    ; $aa PRINT
>80e2	56 88					.word	Command_Read                     ; $ab READ
>80e4	af 88					.word	RemCommand                       ; $ac REM
>80e6	a1 86					.word	Command_RETURN                   ; $ad RETURN
>80e8	8a 89					.word	Unused2                          ; $ae TO
.80ea					VectorSet1:
>80ea	17 a4					.word	SyntaxError                      ; $80 !0:EOF
>80ec	17 a4					.word	SyntaxError                      ; $81 !1:SH1
>80ee	17 a4					.word	SyntaxError                      ; $82 !2:SH2
>80f0	24 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>80f2	43 84					.word	AssertCommand                    ; $84 ASSERT
>80f4	61 84					.word	ClearCommand                     ; $85 CLEAR
>80f6	7b 85					.word	EndCommand                       ; $86 END
>80f8	2e 87					.word	Command_List                     ; $87 LIST
>80fa	c4 87					.word	NewCommand                       ; $88 NEW
>80fc	de 88					.word	Command_Restore                  ; $89 RESTORE
>80fe	10 89					.word	CommandRUN                       ; $8a RUN
>8100	8d 89					.word	StopCommand                      ; $8b STOP
.8102					VectorSet2:
>8102	17 a4					.word	SyntaxError                      ; $80 !0:EOF
>8104	17 a4					.word	SyntaxError                      ; $81 !1:SH1
>8106	17 a4					.word	SyntaxError                      ; $82 !2:SH2
>8108	da a2					.word	Assemble_adc                     ; $83 ADC
>810a	d2 a2					.word	Assemble_and                     ; $84 AND
>810c	ee a2					.word	Assemble_asl                     ; $85 ASL
>810e	58 a3					.word	Assemble_bcc                     ; $86 BCC
>8110	5c a3					.word	Assemble_bcs                     ; $87 BCS
>8112	64 a3					.word	Assemble_beq                     ; $88 BEQ
>8114	1b a3					.word	Assemble_bit                     ; $89 BIT
>8116	4c a3					.word	Assemble_bmi                     ; $8a BMI
>8118	60 a3					.word	Assemble_bne                     ; $8b BNE
>811a	48 a3					.word	Assemble_bpl                     ; $8c BPL
>811c	68 a3					.word	Assemble_bra                     ; $8d BRA
>811e	6c a3					.word	Assemble_brk                     ; $8e BRK
>8120	50 a3					.word	Assemble_bvc                     ; $8f BVC
>8122	54 a3					.word	Assemble_bvs                     ; $90 BVS
>8124	74 a3					.word	Assemble_clc                     ; $91 CLC
>8126	c8 a3					.word	Assemble_cld                     ; $92 CLD
>8128	88 a3					.word	Assemble_cli                     ; $93 CLI
>812a	b8 a3					.word	Assemble_clv                     ; $94 CLV
>812c	e6 a2					.word	Assemble_cmp                     ; $95 CMP
>812e	2f a3					.word	Assemble_cpx                     ; $96 CPX
>8130	2a a3					.word	Assemble_cpy                     ; $97 CPY
>8132	0c a3					.word	Assemble_dec                     ; $98 DEC
>8134	c4 a3					.word	Assemble_dex                     ; $99 DEX
>8136	a0 a3					.word	Assemble_dey                     ; $9a DEY
>8138	d6 a2					.word	Assemble_eor                     ; $9b EOR
>813a	11 a3					.word	Assemble_inc                     ; $9c INC
>813c	d0 a3					.word	Assemble_inx                     ; $9d INX
>813e	c0 a3					.word	Assemble_iny                     ; $9e INY
>8140	43 a3					.word	Assemble_jmp                     ; $9f JMP
>8142	3e a3					.word	Assemble_jsr                     ; $a0 JSR
>8144	e2 a2					.word	Assemble_lda                     ; $a1 LDA
>8146	07 a3					.word	Assemble_ldx                     ; $a2 LDX
>8148	25 a3					.word	Assemble_ldy                     ; $a3 LDY
>814a	f8 a2					.word	Assemble_lsr                     ; $a4 LSR
>814c	d4 a3					.word	Assemble_nop                     ; $a5 NOP
>814e	ce a2					.word	Assemble_ora                     ; $a6 ORA
>8150	84 a3					.word	Assemble_pha                     ; $a7 PHA
>8152	70 a3					.word	Assemble_php                     ; $a8 PHP
>8154	cc a3					.word	Assemble_phx                     ; $a9 PHX
>8156	8c a3					.word	Assemble_phy                     ; $aa PHY
>8158	94 a3					.word	Assemble_pla                     ; $ab PLA
>815a	78 a3					.word	Assemble_plp                     ; $ac PLP
>815c	dc a3					.word	Assemble_plx                     ; $ad PLX
>815e	9c a3					.word	Assemble_ply                     ; $ae PLY
>8160	f3 a2					.word	Assemble_rol                     ; $af ROL
>8162	fd a2					.word	Assemble_ror                     ; $b0 ROR
>8164	80 a3					.word	Assemble_rti                     ; $b1 RTI
>8166	90 a3					.word	Assemble_rts                     ; $b2 RTS
>8168	ea a2					.word	Assemble_sbc                     ; $b3 SBC
>816a	7c a3					.word	Assemble_sec                     ; $b4 SEC
>816c	d8 a3					.word	Assemble_sed                     ; $b5 SED
>816e	98 a3					.word	Assemble_sei                     ; $b6 SEI
>8170	de a2					.word	Assemble_sta                     ; $b7 STA
>8172	02 a3					.word	Assemble_stx                     ; $b8 STX
>8174	20 a3					.word	Assemble_sty                     ; $b9 STY
>8176	16 a3					.word	Assemble_stz                     ; $ba STZ
>8178	b4 a3					.word	Assemble_tax                     ; $bb TAX
>817a	b0 a3					.word	Assemble_tay                     ; $bc TAY
>817c	39 a3					.word	Assemble_trb                     ; $bd TRB
>817e	34 a3					.word	Assemble_tsb                     ; $be TSB
>8180	bc a3					.word	Assemble_tsx                     ; $bf TSX
>8182	a4 a3					.word	Assemble_txa                     ; $c0 TXA
>8184	ac a3					.word	Assemble_txs                     ; $c1 TXS
>8186	a8 a3					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8188					AssembleGroup1:
.8188	a9 ff		lda #$ff			lda 	#$FF
.818a	8d 23 07	sta $0723			sta 	ModeMask 					; initialise the mode mask - all for all
.818d	80 02		bra $8191			bra 	AsmGroup12
.818f					AssembleGroup2:
.818f	a5 00		lda $00				lda 	$00
.8191					AsmGroup12:
.8191	8d 21 07	sta $0721			sta 	IsGroup1 					; save the 'group 1' flag
.8194	68		pla				pla 								; pop the return address to access the information following.
.8195	fa		plx				plx
.8196	20 1f 82	jsr $821f			jsr 	AccessParameters 			; get opcode and save as base
.8199	8d 22 07	sta $0722			sta 	BaseOpcode
.819c	ad 21 07	lda $0721			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.819f	d0 08		bne $81a9			bne 	_AG12HaveMask
.81a1	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81a3	20 27 82	jsr $8227			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81a6	8d 23 07	sta $0723			sta 	ModeMask
.81a9					_AG12HaveMask:
.81a9	20 62 83	jsr $8362			jsr 	TypeAndCalculateOperand 	; get zero page type
.81ac	da		phx				phx 								; save found address mode
.81ad	20 8b 82	jsr $828b			jsr 	AssembleModeX
.81b0	fa		plx				plx  								; restore address mode
.81b1	b0 0b		bcs $81be			bcs 	_AG12Exit
.81b3	20 bf 81	jsr $81bf			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81b6	20 8b 82	jsr $828b			jsr 	AssembleModeX
.81b9	b0 03		bcs $81be			bcs 	_AG12Exit
.81bb	4c 17 a4	jmp $a417			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81be					_AG12Exit:
.81be	60		rts				rts
.81bf					PromoteToAbsolute:
.81bf	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.81c1	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.81c3	f0 19		beq $81de			beq 	_PTADo
.81c5	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.81c7	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.81c9	f0 13		beq $81de			beq 	_PTADo
.81cb	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.81cd	e0 80		cpx #$80			cpx 	#AM_ZEROY
.81cf	f0 0d		beq $81de			beq 	_PTADo
.81d1	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81d3	e0 d1		cpx #$d1			cpx 	#AM_IND
.81d5	f0 07		beq $81de			beq 	_PTADo
.81d7	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.81d9	e0 c0		cpx #$c0			cpx 	#AM_INDX
.81db	f0 01		beq $81de			beq 	_PTADo
.81dd	60		rts				rts
.81de					_PTADo:
.81de	aa		tax				tax
.81df	60		rts				rts
.81e0					AssembleGroup3:
.81e0	68		pla				pla 								; get parameters, which is just the opcode.
.81e1	fa		plx				plx
.81e2	20 1f 82	jsr $821f			jsr 	AccessParameters 			; get and output opcode
.81e5	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.81e8	20 c6 83	jsr $83c6			jsr 	CalculateOperand 			; get a 16 bit operand
.81eb	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.81ee	38		sec				sec
.81ef	ed 1c 07	sbc $071c			sbc 	AssemblerAddress
.81f2	48		pha				pha 								; LSB in A
.81f3	ad 10 06	lda $0610			lda 	NSMantissa1
.81f6	ed 1d 07	sbc $071d			sbc 	AssemblerAddress+1
.81f9	aa		tax				tax 								; MSB in X
.81fa	68		pla				pla
.81fb	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.81fc	69 7f		adc #$7f			adc 	#$7F
.81fe	90 01		bcc $8201			bcc 	_AG3NoCarry
.8200	e8		inx				inx
.8201					_AG3NoCarry:
.8201	38		sec				sec 								; fix back and write out anyways.
.8202	e9 80		sbc #$80			sbc 	#$80
.8204	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.8207	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8209	f0 0a		beq $8215			beq 	_AG3Exit
.820b	ad 1e 07	lda $071e			lda 	AssemblerControl 			; are we allowing bad values ?
.820e	29 01		and #$01			and 	#1
.8210	f0 03		beq $8215			beq 	_AG3Exit
.8212	4c 1c a4	jmp $a41c			jmp 	RangeError 					; no, branch is out of range
.8215					_AG3Exit:
.8215	60		rts				rts
.8216					AssembleGroup4:
.8216	68		pla				pla 								; pop address
.8217	fa		plx				plx
.8218	20 1f 82	jsr $821f			jsr 	AccessParameters 			; access and get first
.821b	20 37 82	jsr $8237			jsr 	AssemblerWriteByte 			; output it.
.821e	60		rts				rts
.821f					AccessParameters:
.821f	8d 1f 07	sta $071f			sta 	ParamStart
.8222	8e 20 07	stx $0720			stx 	ParamStart+1
.8225	a9 01		lda #$01			lda 	#1
.8227					GetParameter:
.8227	5a		phy				phy
.8228	a8		tay				tay
.8229	ad 1f 07	lda $071f			lda 	ParamStart
.822c	85 36		sta $36				sta 	zTemp0
.822e	ad 20 07	lda $0720			lda 	ParamStart+1
.8231	85 37		sta $37				sta 	zTemp0+1
.8233	b1 36		lda ($36),y			lda 	(zTemp0),y
.8235	7a		ply				ply
.8236	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8237					AssemblerWriteByte:
.8237	48		pha			pha
.8238	ad 1e 07	lda $071e		lda 	AssemblerControl 				; check printing bytes ?
.823b	29 02		and #$02		and 	#2
.823d	f0 1b		beq $825a		beq 	_AWBNoPrint
.823f	ad 1d 07	lda $071d		lda		AssemblerAddress+1 				; print address
.8242	20 75 82	jsr $8275		jsr 	PrintHex
.8245	ad 1c 07	lda $071c		lda		AssemblerAddress
.8248	20 75 82	jsr $8275		jsr 	PrintHex
.824b	a9 20		lda #$20		lda 	#' '
.824d	20 64 a6	jsr $a664		jsr 	EXTPrintCharacter
.8250	68		pla			pla 									; print byte
.8251	48		pha			pha
.8252	20 75 82	jsr $8275		jsr 	PrintHex
.8255	a9 0d		lda #$0d		lda 	#13
.8257	20 64 a6	jsr $a664		jsr 	EXTPrintCharacter
.825a					_AWBNoPrint:
.825a	ad 1c 07	lda $071c		lda		AssemblerAddress				; copy address to zTemp0
.825d	85 36		sta $36			sta 	zTemp0
.825f	ad 1d 07	lda $071d		lda		AssemblerAddress+1
.8262	f0 0e		beq $8272		beq 	_AWBRange
.8264	85 37		sta $37			sta 	zTemp0+1
.8266	68		pla			pla 									; write byte out
.8267	92 36		sta ($36)		sta 	(zTemp0)
.8269	ee 1c 07	inc $071c		inc 	AssemblerAddress 				; bump address
.826c	d0 03		bne $8271		bne 	_AWBNoCarry
.826e	ee 1d 07	inc $071d		inc 	AssemblerAddress+1
.8271					_AWBNoCarry:
.8271	60		rts			rts
.8272					_AWBRange:
.8272	4c 1c a4	jmp $a41c		jmp 	RangeError
.8275					PrintHex:
.8275	48		pha				pha
.8276	4a		lsr a				lsr 	a
.8277	4a		lsr a				lsr 	a
.8278	4a		lsr a				lsr 	a
.8279	4a		lsr a				lsr 	a
.827a	20 7e 82	jsr $827e			jsr 	_PrintNibble
.827d	68		pla				pla
.827e					_PrintNibble:
.827e	29 0f		and #$0f			and 	#15
.8280	c9 0a		cmp #$0a			cmp 	#10
.8282	90 02		bcc $8286			bcc 	_NoShift
.8284	69 06		adc #$06			adc 	#6
.8286					_NoShift:
.8286	69 30		adc #$30			adc 	#48
.8288	4c 64 a6	jmp $a664			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.828b					AssembleModeX:
.828b	5a		phy				phy
.828c	ad 21 07	lda $0721			lda 	IsGroup1
.828f	f0 17		beq $82a8			beq 	_AMXGroup2
.8291	8a		txa				txa 							; is it in group # 1
.8292	29 40		and #$40			and 	#AM_ISG1
.8294	f0 50		beq $82e6			beq 	_AMXFail 				; no, give up.
.8296	8a		txa				txa 							; get back.
.8297	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8299	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.829b	d0 22		bne $82bf			bne 	_AMXHaveInfo
.829d	ad 22 07	lda $0722			lda 	BaseOpcode 				; cannot store immediate.
.82a0	c9 81		cmp #$81			cmp 	#$81
.82a2	f0 42		beq $82e6			beq 	_AMXFail
.82a4	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.82a6	80 17		bra $82bf			bra 	_AMXHaveInfo 			; odd design decision there.
.82a8					_AMXGroup2:
.82a8	8a		txa				txa 							; is it in group 2 ?
.82a9	29 20		and #$20			and 	#AM_ISG2
.82ab	f0 39		beq $82e6			beq 	_AMXFail 				; no, give up.
.82ad	8a		txa				txa 							; get the offset into Y
.82ae	29 1f		and #$1f			and 	#$1F
.82b0	4a		lsr a				lsr 	a 						; make it 0-7.
.82b1	4a		lsr a				lsr  	a
.82b2	a8		tay				tay
.82b3	ad 23 07	lda $0723			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.82b6					_AMXCheckOkay:
.82b6	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.82b7	88		dey				dey
.82b8	10 fc		bpl $82b6			bpl 	_AMXCheckOkay
.82ba	90 2a		bcc $82e6			bcc 	_AMXFail 				; not allowed.
.82bc	8a		txa				txa  							; get mask back
.82bd	29 1f		and #$1f			and 	#$1F
.82bf					_AMXHaveInfo:
.82bf	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.82c1	10 05		bpl $82c8			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.82c3	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.82c6	d0 1e		bne $82e6			bne 	_AMXFail
.82c8					_AMXAnySize:
.82c8	18		clc				clc 							; add offset to the base opcode
.82c9	6d 22 07	adc $0722			adc 	BaseOpcode
.82cc					_AMXOutputCode:
.82cc	20 37 82	jsr $8237			jsr 	AssemblerWriteByte 		; write the opcode out.
.82cf	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.82d1	f0 10		beq $82e3			beq 	_AMXExit
.82d3	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.82d6	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.82d9	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.82db	30 06		bmi $82e3			bmi 	_AMXExit
.82dd	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.82e0	20 37 82	jsr $8237			jsr 	AssemblerWriteByte
.82e3					_AMXExit:
.82e3	7a		ply				ply
.82e4	38		sec				sec
.82e5	60		rts				rts
.82e6					_AMXFail:
.82e6	a0 00		ldy #$00			ldy 	#0
.82e8					_AMXCheckOddities:
.82e8	8a		txa				txa
.82e9	d9 11 83	cmp $8311,y			cmp 	ExtraOpcode+2,y 		; match address mode
.82ec	d0 16		bne $8304			bne 	_AMXCONext
.82ee	b9 0f 83	lda $830f,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.82f1	cd 22 07	cmp $0722			cmp 	BaseOpcode
.82f4	d0 0e		bne $8304			bne 	_AMXCONext
.82f6	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.82f8	10 05		bpl $82ff			bpl 	_AMXCONotZero
.82fa	ad 10 06	lda $0610			lda 	NSMantissa1
.82fd	d0 05		bne $8304			bne 	_AMXCONext
.82ff					_AMXCONotZero:
.82ff	b9 10 83	lda $8310,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8302	80 c8		bra $82cc			bra 	_AMXOutputCode 			; and assemble it
.8304					_AMXCONext:
.8304	c8		iny				iny
.8305	c8		iny				iny
.8306	c8		iny				iny
.8307	b9 0f 83	lda $830f,y			lda 	ExtraOpcode+0,y 		; end of table
.830a	d0 dc		bne $82e8			bne 	_AMXCheckOddities
.830c					_AMXCOFail:
.830c	7a		ply				ply
.830d	18		clc				clc
.830e	60		rts				rts
.830f					ExtraOpcode:
>830f	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8312	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8315	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8318	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>831b	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>831e	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8321	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8324	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8327	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>832a	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>832d	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.832e					LabelHere:
.832e	c8		iny				iny 								; skip .
.832f	a2 00		ldx #$00			ldx 	#0 							; get a term
.8331	20 9b 92	jsr $929b			jsr 	EvaluateTerm 				; get a term
.8334	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.8337	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8339	d0 24		bne $835f			bne 	_ALType
.833b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.833e	85 36		sta $36				sta 	zTemp0
.8340	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8343	85 37		sta $37				sta 	zTemp0+1
.8345	5a		phy				phy 								; copy address in.
.8346	a0 01		ldy #$01			ldy 	#1
.8348	ad 1c 07	lda $071c			lda	 	AssemblerAddress
.834b	92 36		sta ($36)			sta 	(zTemp0)
.834d	ad 1d 07	lda $071d			lda	 	AssemblerAddress+1
.8350	91 36		sta ($36),y			sta 	(zTemp0),y
.8352	c8		iny				iny
.8353	a9 00		lda #$00			lda 	#0
.8355	91 36		sta ($36),y			sta 	(zTemp0),y
.8357	c8		iny				iny
.8358	91 36		sta ($36),y			sta 	(zTemp0),y
.835a	c8		iny				iny
.835b	91 36		sta ($36),y			sta 	(zTemp0),y
.835d	7a		ply				ply
.835e	60		rts				rts
.835f					_ALType:
.835f	4c 21 a4	jmp $a421			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8362					TypeAndCalculateOperand:
.8362	b1 30		lda ($30),y			lda 	(codePtr),y
.8364	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8366	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8368	f0 5b		beq $83c5			beq 	_TACOExit
.836a	c9 80		cmp #$80			cmp 	#KWC_EOL
.836c	f0 57		beq $83c5			beq 	_TACOExit
.836e	c8		iny				iny
.836f	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8371	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8373	f0 51		beq $83c6			beq 	CalculateOperand
.8375	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8377	f0 1f		beq $8398			beq 	_TACOIndirect
.8379	88		dey				dey 								; undo get of first character
.837a	20 c6 83	jsr $83c6			jsr 	CalculateOperand 			; get operand
.837d	b1 30		lda ($30),y			lda 	(codePtr),y
.837f	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8381	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8383	d0 40		bne $83c5			bne 	_TACOExit
.8385	c8		iny				iny
.8386	20 f7 9d	jsr $9df7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8389	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.838b	c9 58		cmp #$58			cmp 	#'X'
.838d	f0 36		beq $83c5			beq 	_TACOExit
.838f	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8391	c9 59		cmp #$59			cmp 	#'Y'
.8393	f0 30		beq $83c5			beq 	_TACOExit
.8395					_TACOSyntax:
.8395	4c 17 a4	jmp $a417			jmp 	SyntaxError
.8398					_TACOIndirect:
.8398	20 c6 83	jsr $83c6			jsr 	CalculateOperand 			; get the operand
.839b	b1 30		lda ($30),y			lda 	(codePtr),y
.839d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.839f	f0 17		beq $83b8			beq 	_TACOIndX
.83a1	20 35 9e	jsr $9e35			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.83a4	b1 30		lda ($30),y			lda 	(codePtr),y
.83a6	a2 d1		ldx #$d1			ldx 	#AM_IND
.83a8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.83aa	d0 19		bne $83c5			bne 	_TACOExit
.83ac	c8		iny				iny
.83ad	20 f7 9d	jsr $9df7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83b0	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.83b2	d0 e1		bne $8395			bne 	_TACOSyntax
.83b4	a2 d0		ldx #$d0			ldx 	#AM_INDY
.83b6	80 0d		bra $83c5			bra 	_TACOExit
.83b8					_TACOIndX:
.83b8	c8		iny				iny
.83b9	20 f7 9d	jsr $9df7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83bc	c9 58		cmp #$58			cmp 	#'X' 						; check X
.83be	d0 d5		bne $8395			bne 	_TACOSyntax
.83c0	20 35 9e	jsr $9e35			jsr 	CheckRightBracket			; check )
.83c3	a2 c0		ldx #$c0			ldx 	#AM_INDX
.83c5					_TACOExit:
.83c5	60		rts				rts
.83c6					CalculateOperand:
.83c6	48		pha				pha
.83c7	da		phx				phx
.83c8	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.83ca	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger
.83cd	fa		plx				plx
.83ce	68		pla				pla
.83cf	60		rts				rts
.9df7					TACOCheckXY:
.9df7	b1 30		lda ($30),y			lda 	(codePtr),y
.9df9	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9dfb	c9 40		cmp #$40			cmp 	#$40
.9dfd	d0 21		bne $9e20			bne 	_TCXYFail
.9dff	b1 30		lda ($30),y			lda 	(codePtr),y
.9e01	18		clc				clc
.9e02	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e04	85 37		sta $37				sta 	zTemp0+1
.9e06	c8		iny				iny
.9e07	b1 30		lda ($30),y			lda 	(codePtr),y
.9e09	c8		iny				iny
.9e0a	85 36		sta $36				sta 	zTemp0
.9e0c	5a		phy				phy 								; save position
.9e0d	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9e0f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e11	d0 0c		bne $9e1f			bne 	_TCXYPopFail
.9e13	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9e15	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e17	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9e19	f0 08		beq $9e23			beq 	_TCXYFound
.9e1b	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9e1d	f0 04		beq $9e23			beq 	_TCXYFound
.9e1f					_TCXYPopFail:
.9e1f	7a		ply				ply
.9e20					_TCXYFail:
.9e20	a9 00		lda #$00			lda 	#0
.9e22	60		rts				rts
.9e23					_TCXYFound:
.9e23	7a		ply				ply 								; restore position
.9e24	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9e26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83d0					EditProgramCode:
.83d0	ad 25 07	lda $0725			lda 	TokenLineNumber 			; find the line.
.83d3	ae 26 07	ldx $0726			ldx 	TokenLineNumber+1
.83d6	20 c4 9d	jsr $9dc4			jsr 	MemorySearch
.83d9	90 05		bcc $83e0			bcc 	_EPCNoDelete 				; reached the end don't delete
.83db	d0 03		bne $83e0			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.83dd	20 a8 a6	jsr $a6a8			jsr 	MemoryDeleteLine 			; delete the line
.83e0					_EPCNoDelete:
.83e0	ad 27 07	lda $0727			lda 	TokenBuffer 				; buffer empty
.83e3	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e5	f0 0c		beq $83f3			beq 	_EPCNoInsert
.83e7	ad 25 07	lda $0725			lda 	TokenLineNumber 			; find the line - it cannot exist.
.83ea	ae 26 07	ldx $0726			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83ed	20 c4 9d	jsr $9dc4			jsr 	MemorySearch
.83f0	20 df a6	jsr $a6df			jsr 	MemoryInsertLine 			; insert the line
.83f3					_EPCNoInsert:
.83f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.83f4					WarmStart:
.83f4	a2 ff		ldx #$ff			ldx 	#$FF
.83f6	9a		txs				txs
.83f7	20 7a a6	jsr $a67a			jsr 	EXTInputLine 				; get line to lineBuffer
.83fa	20 f4 9a	jsr $9af4			jsr 	TokeniseLine 				; tokenise the line
.83fd	ad 25 07	lda $0725			lda 	TokenLineNumber 			; line number ?
.8400	0d 26 07	ora $0726			ora 	TokenLineNumber+1
.8403	d0 17		bne $841c			bne 	_WSEditCode 				; if so,edit code.
.8405	9c 24 07	stz $0724			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8408	a9 24		lda #$24			lda 	#((TokenOffset) & $FF)
.840a	85 30		sta $30				sta 	codePtr
.840c	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.840e	85 31		sta $31				sta 	codePtr+1
.8410	ad 27 07	lda $0727			lda 	TokenBuffer 				; nothing to run
.8413	c9 80		cmp #$80			cmp 	#KWC_EOL
.8415	f0 dd		beq $83f4			beq 	WarmStart
.8417	20 22 89	jsr $8922			jsr 	RUNCodePointerLine 			; execute that line.
.841a	80 d8		bra $83f4			bra 	WarmStart
.841c					_WSEditCode:
.841c	20 d0 83	jsr $83d0			jsr 	EditProgramCode
.841f	20 61 84	jsr $8461			jsr 	ClearCommand
.8422	80 d0		bra $83f4			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8424					AssembleCommand:
.8424	a2 00		ldx #$00			ldx 	#0
.8426	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger 		; start address
.8429	ad 08 06	lda $0608			lda 	NSMantissa0
.842c	8d 1c 07	sta $071c			sta 	AssemblerAddress
.842f	ad 10 06	lda $0610			lda 	NSMantissa1
.8432	8d 1d 07	sta $071d			sta 	AssemblerAddress+1
.8435	20 3d 9e	jsr $9e3d			jsr 	CheckComma
.8438	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger 		; options
.843b	ad 08 06	lda $0608			lda 	NSMantissa0
.843e	8d 1e 07	sta $071e			sta 	AssemblerControl
.8441	60		rts				rts
.8442	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8443					AssertCommand:
.8443	a2 00		ldx #$00			ldx 	#0
.8445	20 8b 96	jsr $968b			jsr 	EvaluateInteger 			; the assert test
.8448	20 44 97	jsr $9744			jsr 	NSMIsZero 					; exit if result is non zero.
.844b	d0 05		bne $8452			bne 	_ACExit
.844d	a9 0a		lda #$0a		lda	#10
.844f	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.8452					_ACExit:
.8452	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8453					CallCommand:
.8453	a2 00		ldx #$00			ldx 	#0
.8455	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger
.8458	ad 10 06	lda $0610			lda 	NSMantissa1
.845b	8d 09 06	sta $0609			sta 	NSMantissa0+1
.845e	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8461					ClearCommand:
.8461	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8463	85 36		sta $36				sta 	0+zTemp0
.8465	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8467	85 37		sta $37				sta 	1+zTemp0
.8469					_ClearZeroLoop:
.8469	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.846b	f0 24		beq $8491			beq 	_ClearZeroEnd
.846d	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.846f	a9 00		lda #$00			lda 	#0
.8471					_ClearOneVariable:
.8471	91 36		sta ($36),y			sta 	(zTemp0),y
.8473	c8		iny				iny
.8474	c0 08		cpy #$08			cpy 	#8
.8476	d0 f9		bne $8471			bne 	_ClearOneVariable
.8478	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.847a	b1 36		lda ($36),y			lda 	(zTemp0),y
.847c	c9 18		cmp #$18			cmp 	#NSTProcedure
.847e	d0 04		bne $8484			bne 	_ClearNotProcedure
.8480	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8482	91 36		sta ($36),y			sta 	(zTemp0),y
.8484					_ClearNotProcedure:
.8484	18		clc				clc 								; go to the next variable
.8485	b2 36		lda ($36)			lda 	(zTemp0)
.8487	65 36		adc $36				adc 	zTemp0
.8489	85 36		sta $36				sta 	zTemp0
.848b	90 dc		bcc $8469			bcc 	_ClearZeroLoop
.848d	e6 37		inc $37				inc 	zTemp0+1
.848f	80 d8		bra $8469			bra 	_ClearZeroLoop
.8491					_ClearZeroEnd:
.8491	18		clc				clc
.8492	a5 36		lda $36				lda 	zTemp0
.8494	69 01		adc #$01			adc 	#1
.8496	8d 0c 07	sta $070c			sta 	lowMemPtr
.8499	a5 37		lda $37				lda 	zTemp0+1
.849b	69 00		adc #$00			adc 	#0
.849d	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.84a0	20 a4 97	jsr $97a4			jsr 	StackReset
.84a3	20 f0 a5	jsr $a5f0			jsr 	StringSystemInitialise
.84a6	20 e1 8a	jsr $8ae1			jsr 	ProcedureScan
.84a9	20 de 88	jsr $88de			jsr 	Command_Restore
.84ac	9c 1c 07	stz $071c			stz 	AssemblerAddress
.84af	9c 1d 07	stz $071d			stz 	AssemblerAddress+1
.84b2	9c 1e 07	stz $071e			stz 	AssemblerControl
.84b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84b6					Command_Data:
.84b6	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.84b8	a2 80		ldx #$80			ldx 	#KWC_EOL
.84ba	20 33 8b	jsr $8b33			jsr 	ScanForward
.84bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84be					DimCommand:
.84be	b1 30		lda ($30),y			lda 	(codePtr),y
.84c0	29 c0		and #$c0			and 	#$C0
.84c2	c9 40		cmp #$40			cmp 	#$40
.84c4	d0 7a		bne $8540			bne 	_DCSyntax
.84c6	b1 30		lda ($30),y			lda 	(codePtr),y
.84c8	18		clc				clc
.84c9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84cb	85 3f		sta $3f				sta 	zaTemp+1
.84cd	c8		iny				iny
.84ce	b1 30		lda ($30),y			lda 	(codePtr),y
.84d0	c8		iny				iny
.84d1	85 3e		sta $3e				sta 	zaTemp
.84d3	5a		phy				phy
.84d4	a0 02		ldy #$02			ldy 	#2 						; read type byte
.84d6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84d8	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.84da	c9 18		cmp #$18			cmp 	#NSTProcedure
.84dc	f0 62		beq $8540			beq 	_DCSyntax
.84de	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.84e0	29 04		and #$04			and 	#NSBIsArray
.84e2	f0 64		beq $8548			beq 	_DCType
.84e4	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.84e6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84e8	d0 59		bne $8543			bne 	_DCRedefine
.84ea	7a		ply				ply
.84eb	20 4b 85	jsr $854b			jsr 	_DCGetSize 				; get array size, check it.
.84ee	5a		phy				phy
.84ef	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.84f1	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.84f3	7a		ply				ply 							; is there a second (e.g. ,x)
.84f4	b1 30		lda ($30),y			lda 	(codePtr),y
.84f6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84f8	d0 0a		bne $8504			bne 	_DCOneDimension
.84fa	c8		iny				iny 							; skip comma
.84fb	20 4b 85	jsr $854b			jsr 	_DCGetSize 				; get 2nd array size
.84fe	5a		phy				phy
.84ff	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8501	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8503	7a		ply				ply
.8504					_DCOneDimension:
.8504	5a		phy				phy 							; save position
.8505	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8507	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8509	aa		tax				tax
.850a	c8		iny				iny
.850b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.850d	e8		inx				inx 							; bump them.
.850e	1a		inc a				inc 	a
.850f	20 b7 a2	jsr $a2b7			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8512	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8514	29 e0		and #$e0			and 	#$E0
.8516	d0 23		bne $853b			bne 	_DCSize
.8518	a0 02		ldy #$02			ldy 	#2 						; get base type
.851a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.851c	20 59 85	jsr $8559			jsr 	ScaleByBaseType 		; scale by base type
.851f	a5 36		lda $36				lda 	zTemp0
.8521	a6 37		ldx $37				ldx 	zTemp0+1
.8523	20 4a 94	jsr $944a			jsr 	AllocateXABytes 		; allocate memory
.8526	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8528	91 3e		sta ($3e),y			sta 	(zaTemp),y
.852a	c8		iny				iny
.852b	8a		txa				txa
.852c	91 3e		sta ($3e),y			sta 	(zaTemp),y
.852e	7a		ply				ply 							; get position back
.852f	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 		; check )
.8532	b1 30		lda ($30),y			lda 	(codePtr),y
.8534	c8		iny				iny 							; consume in case
.8535	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8537	f0 85		beq $84be			beq 	DimCommand
.8539	88		dey				dey 							; undo consume
.853a	60		rts				rts
.853b					_DCSize:
.853b	a9 16		lda #$16		lda	#22
.853d	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.8540					_DCSyntax:
.8540	4c 17 a4	jmp $a417			jmp 	SyntaxError
.8543					_DCRedefine:
.8543	a9 15		lda #$15		lda	#21
.8545	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.8548					_DCType:
.8548	4c 21 a4	jmp $a421			jmp 	TypeError
.854b					_DCGetSize:
.854b	a2 00		ldx #$00			ldx 	#0 						; get first index.
.854d	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger 	; get array dimension
.8550	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8552	f0 e7		beq $853b			beq 	_DCSize
.8554	c9 fe		cmp #$fe			cmp 	#254
.8556	f0 e3		beq $853b			beq 	_DCSize
.8558	60		rts				rts
.8559					ScaleByBaseType:
.8559	29 10		and #$10			and 	#NSBIsString 			; is it string
.855b	d0 19		bne $8576			bne 	_SBBTString
.855d	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.855f	48		pha				pha
.8560	a5 36		lda $36				lda 	zTemp0
.8562	48		pha				pha
.8563	06 36		asl $36				asl 	zTemp0 					; x 2
.8565	26 37		rol $37				rol 	zTemp0+1
.8567	06 36		asl $36				asl 	zTemp0 					; x 4
.8569	26 37		rol $37				rol 	zTemp0+1
.856b	68		pla				pla 							; add stacked value = x 5
.856c	65 36		adc $36				adc 	zTemp0
.856e	85 36		sta $36				sta 	zTemp0
.8570	68		pla				pla
.8571	65 37		adc $37				adc 	zTemp0+1
.8573	85 37		sta $37				sta 	zTemp0+1
.8575	60		rts				rts
.8576					_SBBTString:
.8576	06 36		asl $36				asl 	zTemp0
.8578	26 37		rol $37				rol 	zTemp0+1
.857a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.857b					EndCommand:
.857b	4c f4 83	jmp $83f4			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.857e					ForCommand:
.857e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8580	20 51 97	jsr $9751			jsr 	StackOpen
.8583	a2 00		ldx #$00			ldx 	#0
.8585	20 9b 92	jsr $929b			jsr 	EvaluateTerm
.8588	bd 00 06	lda $0600,x			lda 	NSStatus,x
.858b	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.858d	d0 49		bne $85d8			bne		_FCError
.858f	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8591	20 45 9e	jsr $9e45			jsr 	CheckNextA
.8594	e8		inx				inx
.8595	20 8b 96	jsr $968b			jsr 	EvaluateInteger 			; <from> in +1
.8598	b1 30		lda ($30),y			lda 	(codePtr),y
.859a	c8		iny				iny 								; consume it
.859b	48		pha				pha 								; save on stack for later
.859c	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.859e	f0 04		beq $85a4			beq 	_FCNoSyntax
.85a0	c9 ae		cmp #$ae			cmp 	#KWD_TO
.85a2	d0 37		bne $85db			bne 	_FCSyntaxError
.85a4					_FCNoSyntax:
.85a4	e8		inx				inx
.85a5	20 8b 96	jsr $968b			jsr 	EvaluateInteger
.85a8	20 83 97	jsr $9783			jsr 	STKSaveCodePosition 		; save loop back position
.85ab	68		pla				pla 								; restore DOWNTO or TO
.85ac	5a		phy				phy 								; save Y on the stack
.85ad	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85af	f0 02		beq $85b3			beq 	_FCNotDownTo
.85b1	a9 02		lda #$02			lda 	#2
.85b3					_FCNotDownTo:
.85b3	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85b4	a0 10		ldy #$10			ldy 	#16
.85b6	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85b8	a0 06		ldy #$06			ldy 	#6
.85ba	ad 08 06	lda $0608			lda 	NSMantissa0
.85bd	91 34		sta ($34),y			sta 	(basicStack),y
.85bf	ad 10 06	lda $0610			lda 	NSMantissa1
.85c2	c8		iny				iny
.85c3	91 34		sta ($34),y			sta 	(basicStack),y
.85c5	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85c7	a2 01		ldx #$01			ldx 	#1
.85c9	20 de 85	jsr $85de			jsr 	FCIntegerToStack
.85cc	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85ce	a2 02		ldx #$02			ldx 	#2
.85d0	20 de 85	jsr $85de			jsr 	FCIntegerToStack
.85d3	20 fe 85	jsr $85fe			jsr 	CopyIndexToReference
.85d6	7a		ply				ply 								; restore position
.85d7	60		rts				rts
.85d8					_FCError:
.85d8	4c 21 a4	jmp $a421			jmp 	TypeError
.85db					_FCSyntaxError:
.85db	4c 17 a4	jmp $a417			jmp 	SyntaxError
.85de					FCIntegerToStack:
.85de	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.85e1	10 03		bpl $85e6			bpl	 	_FCNotNegative
.85e3	20 c9 96	jsr $96c9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.85e6					_FCNotNegative:
.85e6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.85e9	91 34		sta ($34),y			sta 	(basicStack),y
.85eb	c8		iny				iny
.85ec	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85ef	91 34		sta ($34),y			sta 	(basicStack),y
.85f1	c8		iny				iny
.85f2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.85f5	91 34		sta ($34),y			sta 	(basicStack),y
.85f7	c8		iny				iny
.85f8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.85fb	91 34		sta ($34),y			sta 	(basicStack),y
.85fd	60		rts				rts
.85fe					CopyIndexToReference:
.85fe	5a		phy				phy
.85ff	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8601	38		sec				sec 								; (because we copy from offset 8)
.8602	b1 34		lda ($34),y			lda 	(basicStack),y
.8604	e9 08		sbc #$08			sbc 	#8
.8606	85 36		sta $36				sta 	zTemp0
.8608	c8		iny				iny
.8609	b1 34		lda ($34),y			lda 	(basicStack),y
.860b	e9 00		sbc #$00			sbc 	#0
.860d	85 37		sta $37				sta 	zTemp0+1
.860f	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8611	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8613	b1 34		lda ($34),y			lda 	(basicStack),y
.8615	0a		asl a				asl 	a 							; into carry
.8616	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8618	90 14		bcc $862e			bcc 	_CITRNormal
.861a	38		sec				sec
.861b					_CITRNegative:
.861b	a9 00		lda #$00			lda 	#0
.861d	f1 34		sbc ($34),y			sbc 	(basicStack),y
.861f	91 36		sta ($36),y			sta 	(zTemp0),y
.8621	c8		iny				iny
.8622	ca		dex				dex
.8623	d0 f6		bne $861b			bne 	_CITRNegative
.8625	88		dey				dey 								; look at MSB of mantissa
.8626	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8628	09 80		ora #$80			ora 	#$80
.862a	91 36		sta ($36),y			sta 	(zTemp0),y
.862c	7a		ply				ply
.862d	60		rts				rts
.862e					_CITRNormal:
.862e	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8630	91 36		sta ($36),y			sta 	(zTemp0),y
.8632	c8		iny				iny
.8633	ca		dex				dex
.8634	d0 f8		bne $862e			bne 	_CITRNormal
.8636	7a		ply				ply 								; and exit.
.8637	60		rts				rts
.8638					NextCommand:
.8638	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.863a	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.863c	20 78 97	jsr $9778			jsr 	StackCheckFrame
.863f	5a		phy				phy
.8640	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8642	b1 34		lda ($34),y			lda 	(basicStack),y
.8644	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8646	30 02		bmi $864a			bmi 	_NCStepNeg
.8648	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.864a					_NCStepNeg:
.864a	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.864c	a2 04		ldx #$04			ldx 	#4 							; count to bump
.864e	18		clc				clc
.864f					_NCBump:
.864f	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8651	91 34		sta ($34),y			sta 	(basicStack),y
.8653	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8655	c8		iny				iny 								; next byte
.8656	ca		dex				dex 								; do four times
.8657	d0 f6		bne $864f			bne 	_NCBump
.8659	20 fe 85	jsr $85fe			jsr		CopyIndexToReference		; copy it to the reference variable.
.865c	a0 10		ldy #$10			ldy 	#16 						; get step count again
.865e	b1 34		lda ($34),y			lda 	(basicStack),y
.8660	0a		asl a				asl 	a 							; sign bit to carry
.8661	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8663	85 38		sta $38				sta 	zTemp1
.8665	90 02		bcc $8669			bcc 	_NCCompRev 					; use if step is +ve
.8667	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8669					_NCCompRev:
.8669	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.866b	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.866d	85 39		sta $39				sta 	zTemp1+1
.866f	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8671	38		sec				sec
.8672					_NCCompare:
.8672	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8674	b1 34		lda ($34),y			lda 	(basicStack),y
.8676	a4 39		ldy $39				ldy 	zTemp1+1
.8678	f1 34		sbc ($34),y			sbc 	(basicStack),y
.867a	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.867c	e6 39		inc $39				inc 	zTemp1+1
.867e	ca		dex				dex 								; do it 4 times.
.867f	d0 f1		bne $8672			bne 	_NCCompare
.8681	50 02		bvc $8685			bvc 	_NCNoOverflow 				; convert to signed comparison
.8683	49 80		eor #$80			eor 	#$80
.8685					_NCNoOverflow:
.8685	7a		ply				ply 								; restore Y position
.8686	0a		asl a				asl 	a 							; is bit 7 set.
.8687	90 04		bcc $868d			bcc 	_NCLoopback 				; if no , >= so loop back
.8689	20 6a 97	jsr $976a			jsr 	StackClose 					; exit the loop
.868c	60		rts				rts
.868d					_NCLoopBack:
.868d	20 94 97	jsr $9794			jsr 	STKLoadCodePosition 		; loop back
.8690	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8691					Command_GOSUB:
.8691	a2 00		ldx #$00			ldx 	#0
.8693	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8696	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8698	20 51 97	jsr $9751			jsr 	StackOpen 					; create frame
.869b	20 83 97	jsr $9783			jsr 	STKSaveCodePosition 		; save current position
.869e	4c b4 86	jmp $86b4			jmp 	GotoStackX
.86a1					Command_RETURN:
.86a1	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86a3	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86a5	20 78 97	jsr $9778			jsr 	StackCheckFrame
.86a8	20 94 97	jsr $9794			jsr 	STKLoadCodePosition 		; restore code position
.86ab	20 6a 97	jsr $976a			jsr 	StackClose
.86ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86af					GotoCommand:
.86af	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86b1	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger
.86b4					GotoStackX:
.86b4	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86b7	48		pha				pha 								; it is slightly inefficient, just in cases.
.86b8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.86bb	fa		plx				plx
.86bc	20 c4 9d	jsr $9dc4			jsr 	MemorySearch 				; transfer to line number AX.
.86bf	90 05		bcc $86c6			bcc 	_GotoError 					; not found, off end.
.86c1	d0 03		bne $86c6			bne 	_GotoError 					; not found exactly
.86c3	4c 1b 89	jmp $891b			jmp 	RunNewLine 					; and go straight to new line code.
.86c6					_GotoError:
.86c6	a9 0d		lda #$0d		lda	#13
.86c8	4c c1 8b	jmp $8bc1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.86cb					IfCommand:
.86cb	a2 00		ldx #$00			ldx 	#0 							; If what.
.86cd	20 68 96	jsr $9668			jsr 	EvaluateNumber
.86d0	b1 30		lda ($30),y			lda 	(codePtr),y
.86d2	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.86d4	d0 0a		bne $86e0			bne 	_IFStructured
.86d6	c8		iny				iny 								; consume THEN
.86d7	20 44 97	jsr $9744			jsr 	NSMIsZero 					; is it zero
.86da	f0 01		beq $86dd			beq 	_IfFail 					; if fail, go to next line
.86dc	60		rts				rts 								; if THEN just continue
.86dd					_IfFail:
.86dd	4c 6d 89	jmp $896d			jmp 	EOLCommand
.86e0					_IfStructured:
.86e0	20 44 97	jsr $9744			jsr 	NSMIsZero 					; is it zero
.86e3	d0 07		bne $86ec			bne 	_IfExit 					; if not, then continue normally.
.86e5	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.86e7	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.86e9	20 33 8b	jsr $8b33			jsr 	ScanForward 				; and run from there/
.86ec					_IfExit:
.86ec	60		rts				rts
.86ed					ElseCode:
.86ed	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.86ef	aa		tax				tax 								; so just go to the structure exit
.86f0	20 33 8b	jsr $8b33			jsr 	ScanForward
.86f3	60		rts				rts
.86f4					EndIf:
.86f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.86f5					LetCommand:
.86f5	a2 00		ldx #$00			ldx 	#0
.86f7	ad b2 8f	lda $8fb2			lda 	PrecedenceLevel+"*"			; precedence > this
.86fa	20 cc 8f	jsr $8fcc			jsr 	EvaluateExpressionAtPrecedence
.86fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8700	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8702	f0 0e		beq $8712			beq 	_LetGoProc 					; it's a procedure call.
.8704	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8706	20 45 9e	jsr $9e45			jsr 	CheckNextA
.8709	e8		inx				inx 								; RHS
.870a	20 5f 96	jsr $965f			jsr 	EvaluateValue
.870d	ca		dex				dex
.870e	20 15 87	jsr $8715			jsr 	AssignVariable
.8711	60		rts				rts
.8712					_LetGoProc:
.8712	4c 25 88	jmp $8825			jmp 	CallProcedure
.8715					AssignVariable:
.8715	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8718	48		pha				pha 								; save a copy
.8719	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.871c	29 10		and #$10			and 	#NSBIsString
.871e	d0 0b		bne $872b			bne 	_ASError
.8720	68		pla				pla 								; get back
.8721	29 10		and #$10			and 	#NSBIsString 				; check type
.8723	d0 03		bne $8728			bne 	_ASString
.8725	4c 07 90	jmp $9007			jmp 	AssignNumber
.8728					_ASString:
.8728	4c 75 90	jmp $9075			jmp 	AssignString
.872b					_ASError:
.872b	4c 21 a4	jmp $a421			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.872e					Command_List:
.872e	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8731	9c 14 06	stz $0614			stz 	NSMantissa1+4
.8734	a9 ff		lda #$ff			lda 	#$FF
.8736	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8739	8d 17 06	sta $0617			sta 	NSMantissa1+7
.873c	b1 30		lda ($30),y			lda 	(codePtr),y
.873e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8740	f0 1e		beq $8760			beq 	_CLSecond
.8742	20 b9 87	jsr $87b9			jsr 	CLIsDigit 					; if not digit, list all
.8745	b0 24		bcs $876b			bcs 	_CLStart
.8747	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8749	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger
.874c	b1 30		lda ($30),y			lda 	(codePtr),y
.874e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8750	f0 0e		beq $8760			beq 	_CLSecond 					; if so go get it
.8752	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.8755	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8758	ad 14 06	lda $0614			lda 	NSMantissa1+4
.875b	8d 17 06	sta $0617			sta 	NSMantissa1+7
.875e	80 0b		bra $876b			bra 	_CLStart
.8760					_CLSecond:
.8760	c8		iny				iny 								; consume comma
.8761	20 b9 87	jsr $87b9			jsr 	CLIsDigit 					; digit found
.8764	b0 05		bcs $876b			bcs 	_CLStart 					; if not, continue listing
.8766	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8768	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger
.876b					_CLStart
.876b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.876d	85 30		sta $30				sta 	codePtr
.876f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8771	85 31		sta $31				sta 	codePtr+1
.8773					_CLLoop:
.8773	b2 30		lda ($30)			lda 	(codePtr)
.8775	f0 2c		beq $87a3			beq 	_CLExit
.8777	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8779	20 a6 87	jsr $87a6			jsr 	CLCompareLineNo
.877c	90 18		bcc $8796			bcc 	_CLNext
.877e	a2 07		ldx #$07			ldx 	#7
.8780	20 a6 87	jsr $87a6			jsr 	CLCompareLineNo
.8783	f0 02		beq $8787			beq 	_CLDoThisOne
.8785	b0 0f		bcs $8796			bcs 	_CLNext
.8787					_CLDoThisOne:
.8787	20 92 89	jsr $8992			jsr 	ListConvertLine 			; convert line into token Buffer
.878a	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.878c	a9 27		lda #$27			lda 	#(tokenBuffer & $FF)
.878e	20 1a 8c	jsr $8c1a			jsr 	PrintStringXA
.8791	a9 0d		lda #$0d			lda 	#13 						; new line
.8793	20 64 a6	jsr $a664			jsr 	EXTPrintCharacter
.8796					_CLNext:
.8796	18		clc				clc
.8797	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8799	65 30		adc $30				adc 	codePtr
.879b	85 30		sta $30				sta 	codePtr
.879d	90 02		bcc $87a1			bcc 	_CREExit
.879f	e6 31		inc $31				inc 	codePtr+1
.87a1					_CREExit:
.87a1	80 d0		bra $8773			bra 	_CLLoop
.87a3					_CLExit:
.87a3	4c f4 83	jmp $83f4			jmp 	WarmStart
.87a6					CLCompareLineNo:
.87a6	38		sec				sec
.87a7	a0 01		ldy #$01			ldy 	#1
.87a9	b1 30		lda ($30),y			lda 	(codePtr),y
.87ab	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.87ae	85 36		sta $36				sta 	zTemp0
.87b0	c8		iny				iny
.87b1	b1 30		lda ($30),y			lda 	(codePtr),y
.87b3	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.87b6	05 36		ora $36				ora 	zTemp0
.87b8	60		rts				rts
.87b9					CLIsDigit:
.87b9	b1 30		lda ($30),y			lda 	(codePtr),y
.87bb	c9 30		cmp #$30			cmp 	#"0"
.87bd	90 03		bcc $87c2			bcc	 	_CLIDExitFalse
.87bf	c9 3a		cmp #$3a			cmp 	#"9"+1
.87c1	60		rts				rts
.87c2					_CLIDExitFalse:
.87c2	38		sec				sec
.87c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.87c4					NewCommand:
.87c4	20 73 9d	jsr $9d73			jsr 	MemoryNew
.87c7	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.87ca	20 61 84	jsr $8461			jsr 	ClearCommand 				; clear everything.
.87cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.87ce					Command_Print:
.87ce	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87cf					_CPLoop:
.87cf	08		php				php 								; save last action flag
.87d0	b1 30		lda ($30),y			lda 	(codePtr),y
.87d2	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87d4	f0 46		beq $881c			beq 	_CPExit
.87d6	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87d8	f0 42		beq $881c			beq 	_CPExit
.87da	68		pla				pla 								; throw last action flag
.87db	b1 30		lda ($30),y			lda 	(codePtr),y
.87dd	c8		iny				iny
.87de	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.87e0	f0 37		beq $8819			beq 	_CPContinueWithSameLine
.87e2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.87e4	f0 2e		beq $8814			beq 	_CPTab
.87e6	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.87e8	f0 26		beq $8810			beq 	_CPNewLine
.87ea	88		dey				dey 								; undo the get.
.87eb	a2 00		ldx #$00			ldx 	#0
.87ed	20 5f 96	jsr $965f			jsr 	EvaluateValue 				; get a value into slot 0
.87f0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.87f3	29 10		and #$10			and 	#NSBIsString
.87f5	f0 0b		beq $8802			beq 	_CPNumber
.87f7	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.87fa	ad 08 06	lda $0608			lda 	NSMantissa0
.87fd	20 1a 8c	jsr $8c1a			jsr 	PrintStringXA
.8800	80 cc		bra $87ce			bra 	Command_Print 				; loop round clearing carry so NL if end
.8802					_CPNumber:
.8802	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8804	20 35 95	jsr $9535			jsr 	ConvertNumberToString 		; convert to string
.8807	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8809	a9 97		lda #$97			lda 	#DecimalBuffer & $FF
.880b	20 1a 8c	jsr $8c1a			jsr 	PrintStringXA
.880e	80 be		bra $87ce			bra 	Command_Print 				; loop round clearing carry so NL if end
.8810					_CPNewLine:
.8810	a9 0d		lda #$0d			lda 	#13
.8812	80 02		bra $8816			bra 	_CPPrintChar
.8814					_CPTab:
.8814	a9 09		lda #$09			lda 	#9 							; print TAB
.8816					_CPPrintChar:
.8816	20 64 a6	jsr $a664			jsr 	EXTPrintCharacter
.8819					_CPContinueWithSameLine:
.8819	38		sec				sec 								; loop round with carry set, which
.881a	80 b3		bra $87cf			bra 	_CPLoop 					; will inhibit final CR
.881c					_CPExit:
.881c	28		plp				plp 								; get last action flag
.881d	b0 05		bcs $8824			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.881f	a9 0d		lda #$0d			lda 	#13 						; print new line
.8821	20 64 a6	jsr $a664			jsr 	EXTPrintCharacter
.8824					_CPExit2:
.8824	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8825					CallProcedure:
.8825	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.8828	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.882a	20 51 97	jsr $9751			jsr 	StackOpen
.882d	20 83 97	jsr $9783			jsr 	STKSaveCodePosition 		; save loop position
.8830	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8833	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8835	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8838	85 37		sta $37				sta 	zTemp0+1
.883a	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.883c	b2 36		lda ($36)			lda 	(zTemp0)
.883e	85 30		sta $30				sta 	safePtr
.8840	b1 36		lda ($36),y			lda 	(zTemp0),y
.8842	85 31		sta $31				sta 	safePtr+1
.8844	c8		iny				iny
.8845	b1 36		lda ($36),y			lda 	(zTemp0),y
.8847	85 32		sta $32				sta 	safePtr+2
.8849	c8		iny				iny
.884a	b1 36		lda ($36),y			lda 	(zTemp0),y
.884c	85 33		sta $33				sta 	safePtr+3
.884e	c8		iny				iny 								; get Y offset -> Y
.884f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8851	a8		tay				tay
.8852	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 			; check )
.8855	60		rts				rts 								; and continue from here
.9e27					Command_ENDPROC:
.9e27	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9e29	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9e2b	20 78 97	jsr $9778			jsr 	StackCheckFrame
.9e2e	20 94 97	jsr $9794			jsr 	STKLoadCodePosition 		; restore code position
.9e31	20 6a 97	jsr $976a			jsr 	StackClose
.9e34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8856					Command_Read:
.8856	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8858	20 9b 92	jsr $929b			jsr 	EvaluateTerm
.885b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.885e	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8860	f0 4a		beq $88ac			beq 	_CRSyntax 					; check reference (bit 0)
.8862	20 f5 88	jsr $88f5			jsr 	SwapDataCodePtrs 			; swap code and data
.8865	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8868	d0 20		bne $888a			bne 	_CRContinueData
.886a					_CRKeepSearching:
.886a	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.886c	aa		tax				tax
.886d	20 33 8b	jsr $8b33			jsr 	ScanForward
.8870	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8872	f0 16		beq $888a			beq 	_CRHaveData 				; found it
.8874	18		clc				clc
.8875	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8877	65 30		adc $30				adc 	codePtr
.8879	85 30		sta $30				sta 	codePtr
.887b	90 02		bcc $887f			bcc 	_CREExit
.887d	e6 31		inc $31				inc 	codePtr+1
.887f					_CREExit:
.887f	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8881	b2 30		lda ($30)			lda 	(codePtr)
.8883	d0 e5		bne $886a			bne 	_CRKeepSearching
.8885	a9 0b		lda #$0b		lda	#11
.8887	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.888a					_CRHaveData:
.888a					_CRContinueData:
.888a	a2 01		ldx #$01			ldx 	#1
.888c	20 5f 96	jsr $965f			jsr 	EvaluateValue 				; evaluate value into slot # 1
.888f	ca		dex				dex
.8890	20 15 87	jsr $8715			jsr		AssignVariable 				; do the assignment
.8893	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.8896	b1 30		lda ($30),y			lda 	(codePtr),y
.8898	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.889a	d0 04		bne $88a0			bne 	_CRSwapBack
.889c	c8		iny				iny 								; consume comma
.889d	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.88a0					_CRSwapBack:
.88a0	20 f5 88	jsr $88f5			jsr 	SwapDataCodePtrs			; swap them back.
.88a3	b1 30		lda ($30),y			lda 	(codePtr),y
.88a5	c8		iny				iny
.88a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88a8	f0 ac		beq $8856			beq 	Command_Read 				; if so go round again.
.88aa	88		dey				dey 								; unpick get.
.88ab	60		rts				rts
.88ac					_CRSyntax:
.88ac	4c 17 a4	jmp $a417			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.88af					RemCommand:
.88af	b1 30		lda ($30),y			lda 	(codePtr),y
.88b1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.88b3	d0 06		bne $88bb			bne 	_RMExit
.88b5	c8		iny				iny
.88b6	98		tya				tya
.88b7	38		sec				sec
.88b8	71 30		adc ($30),y			adc 	(codePtr),y
.88ba	a8		tay				tay
.88bb					_RMExit:
.88bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.88bc					Command_REPEAT:
.88bc	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.88be	20 51 97	jsr $9751			jsr 	StackOpen
.88c1	20 83 97	jsr $9783			jsr 	STKSaveCodePosition 		; save loop position
.88c4	60		rts				rts
.88c5					Command_UNTIL:
.88c5	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.88c7	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.88c9	20 78 97	jsr $9778			jsr 	StackCheckFrame
.88cc	a2 00		ldx #$00			ldx 	#0
.88ce	20 68 96	jsr $9668			jsr 	EvaluateNumber 				; work out the number
.88d1	20 44 97	jsr $9744			jsr 	NSMIsZero 					; check if zero
.88d4	f0 04		beq $88da			beq 	_CULoopBack 				; if so keep looping
.88d6	20 6a 97	jsr $976a			jsr 	StackClose		 			; return
.88d9	60		rts				rts
.88da					_CULoopBack:
.88da	20 94 97	jsr $9794			jsr 	STKLoadCodePosition 		; loop back
.88dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.88de					Command_Restore:
.88de	20 f5 88	jsr $88f5			jsr 	SwapDataCodePtrs 			; swap code and data
.88e1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88e3	85 30		sta $30				sta 	codePtr
.88e5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88e7	85 31		sta $31				sta 	codePtr+1
.88e9	20 f5 88	jsr $88f5			jsr 	SwapDataCodePtrs 			; put them back
.88ec	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.88ee	8d 19 07	sta $0719			sta 	dataPointer+4
.88f1	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.88f4	60		rts				rts
.88f5					SwapDataCodePtrs:
.88f5	da		phx				phx
.88f6	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.88f8					_SDCPLoop:
.88f8	b5 30		lda $30,x			lda 	safePtr,x
.88fa	48		pha				pha
.88fb	bd 15 07	lda $0715,x			lda 	dataPointer,x
.88fe	95 30		sta $30,x			sta 	safePtr,x
.8900	68		pla				pla
.8901	9d 15 07	sta $0715,x			sta 	dataPointer,x
.8904	ca		dex				dex
.8905	10 f1		bpl $88f8			bpl 	_SDCPLoop
.8907	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.890a	8c 19 07	sty $0719			sty 	dataPointer+4
.890d	a8		tay				tay
.890e	fa		plx				plx
.890f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8910					CommandRUN:
.8910	20 61 84	jsr $8461			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8913	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8915	85 30		sta $30				sta 	codePtr
.8917	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8919	85 31		sta $31				sta 	codePtr+1
.891b					RUNNewLine:
.891b	b2 30		lda ($30)			lda 	(codePtr)
.891d	f0 4b		beq $896a			beq 	CRNoProgram         		; no then END.
.891f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8921	9a		txs				txs
.8922					RUNCodePointerLine:
.8922	a0 02		ldy #$02			ldy 	#2 							; start of program
.8924					_CRIncMainLoop:
.8924	c8		iny				iny
.8925					_CRMainLoop:
.8925	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8928	b1 30		lda ($30),y			lda 	(codePtr),y
.892a	10 10		bpl $893c			bpl 	_CRNotKeyword
.892c	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.892e	b0 04		bcs $8934			bcs 	_CRIsKeyword
.8930	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8932	b0 30		bcs $8964			bcs		_CRSyntaxError
.8934					_CRIsKeyword:
.8934	c8		iny				iny 								; consume command
.8935	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8936	aa		tax				tax 								; put in X for vector jump
.8937	20 67 89	jsr $8967			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.893a	80 e9		bra $8925			bra 	_CRMainLoop 				; and loop round
.893c					_CRNotKeyword:
.893c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.893e	f0 e4		beq $8924			beq 	_CRIncMainLoop
.8940	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8942	90 05		bcc $8949			bcc 	_CRNotVariable
.8944					_CRGoLet:
.8944	20 f5 86	jsr $86f5			jsr 	LetCommand
.8947	80 dc		bra $8925			bra 	_CRMainLoop
.8949					_CRNotVariable:
.8949	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.894b	f0 f7		beq $8944			beq 	_CRGoLet
.894d	c9 21		cmp #$21			cmp 	#KWD_PLING
.894f	f0 f3		beq $8944			beq 	_CRGoLet
.8951	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8953	f0 09		beq $895e			beq 	_CRGoRem
.8955	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8957	d0 0b		bne $8964			bne 	_CRSyntaxError
.8959	20 2e 83	jsr $832e			jsr 	LabelHere
.895c	80 c7		bra $8925			bra 	_CRMainLoop
.895e					_CRGoRem:
.895e	c8		iny				iny
.895f	20 af 88	jsr $88af			jsr 	RemCommand
.8962	80 c1		bra $8925			bra 	_CRMainLoop
.8964					_CRSyntaxError:
.8964	4c 17 a4	jmp $a417			jmp 	SyntaxError
.8967					_CRCallVector0:
.8967	7c 8c 80	jmp ($808c,x)			jmp 	(VectorSet0,x)
.896a					CRNoProgram:
.896a	4c 7b 85	jmp $857b			jmp 	EndCommand
.896d					EOLCommand:
.896d	18		clc				clc
.896e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8970	65 30		adc $30				adc 	codePtr
.8972	85 30		sta $30				sta 	codePtr
.8974	90 02		bcc $8978			bcc 	_CREExit
.8976	e6 31		inc $31				inc 	codePtr+1
.8978					_CREExit:
.8978	80 a1		bra $891b			bra 	RunNewLine
.897a					Shift1Command:
.897a	b1 30		lda ($30),y			lda 	(codePtr),y
.897c	c8		iny				iny
.897d	0a		asl a				asl 	a
.897e	aa		tax				tax
.897f	7c ea 80	jmp ($80ea,x)			jmp 	(VectorSet1,x)
.8982					Shift2Command:
.8982	b1 30		lda ($30),y			lda 	(codePtr),y
.8984	c8		iny				iny
.8985	0a		asl a				asl 	a
.8986	aa		tax				tax
.8987	7c 02 81	jmp ($8102,x)			jmp 	(VectorSet2,x)
.898a					Unused1:
.898a					Unused2:
.898a					Unused3:
.898a					Unused4:
.898a	4c 17 a4	jmp $a417			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.898d					StopCommand:
.898d	a9 08		lda #$08		lda	#8
.898f	4c c1 8b	jmp $8bc1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8992					ListConvertLine:
.8992	9c 1b 07	stz $071b			stz 	tbOffset
.8995	9c 27 07	stz $0727			stz 	tokenBuffer
.8998	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.899a	b1 30		lda ($30),y			lda 	(codePtr),y
.899c	aa		tax				tax
.899d	88		dey				dey
.899e	b1 30		lda ($30),y			lda 	(codePtr),y
.89a0	20 91 9f	jsr $9f91			jsr 	ConvertInt16
.89a3	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.89a5	86 37		stx $37				stx 	zTemp0+1
.89a7	a0 00		ldy #$00			ldy 	#0
.89a9					_LCCopyNumber:
.89a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ab	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.89ae	c8		iny				iny
.89af	b1 36		lda ($36),y			lda 	(zTemp0),y
.89b1	d0 f6		bne $89a9			bne 	_LCCopyNumber
.89b3					_LCPadOut:
.89b3	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.89b5	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.89b8	ad 1b 07	lda $071b			lda 	tbOffset
.89bb	c9 06		cmp #$06			cmp 	#6
.89bd	d0 f4		bne $89b3			bne 	_LCPadOut
.89bf	a0 03		ldy #$03			ldy 	#3 							; start position.
.89c1					_LCMainLoop:
.89c1	b1 30		lda ($30),y			lda 	(codePtr),y
.89c3	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.89c5	f0 17		beq $89de			beq 	_LCExit
.89c7	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.89c9	90 14		bcc $89df			bcc 	_LCDoubles
.89cb	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.89cd	90 20		bcc $89ef			bcc 	_LCShiftPunc
.89cf	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.89d1	90 2b		bcc $89fe			bcc 	_LCPunctuation
.89d3	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.89d5	90 2d		bcc $8a04			bcc 	_LCIdentifiers
.89d7	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.89d9	90 49		bcc $8a24			bcc 	_LCTokens
.89db	4c 7c 8a	jmp $8a7c			jmp 	_LCData 					; 254-5 are data objects
.89de					_LCExit:
.89de	60		rts				rts
.89df					_LCDoubles:
.89df	48		pha				pha
.89e0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.89e1	29 02		and #$02			and 	#2
.89e3	09 3c		ora #$3c			ora 	#60 						; make < >
.89e5	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.89e8	68		pla				pla 								; restore, do lower bit
.89e9	29 03		and #$03			and 	#3
.89eb	09 3c		ora #$3c			ora 	#60
.89ed	80 0f		bra $89fe			bra		_LCPunctuation 				; print, increment, loop
.89ef					_LCShiftPunc:
.89ef	aa		tax				tax 								; save in X
.89f0	29 07		and #$07			and 	#7 							; lower 3 bits
.89f2	f0 02		beq $89f6			beq 	_LCNoAdd
.89f4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.89f6					_LCNoAdd:
.89f6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.89f8	90 02		bcc $89fc			bcc 	_LCNoAdd2
.89fa	09 20		ora #$20			ora 	#32 						; adds $20
.89fc					_LCNoAdd2:
.89fc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.89fe					_LCPunctuation:
.89fe	c8		iny				iny 								; consume character
.89ff	20 a8 8a	jsr $8aa8			jsr 	LCLWrite 					; write it out.
.8a02	80 bd		bra $89c1			bra 	_LCMainLoop 				; go round again.
.8a04					_LCIdentifiers:
.8a04	18		clc				clc 								; convert to physical address
.8a05	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a07	85 37		sta $37				sta 	zTemp0+1
.8a09	c8		iny				iny
.8a0a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a0c	85 36		sta $36				sta 	zTemp0
.8a0e	c8		iny				iny
.8a0f	5a		phy				phy 								; save position
.8a10	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8a12					_LCOutIdentifier:
.8a12	c8		iny				iny
.8a13	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a15	29 7f		and #$7f			and 	#$7F
.8a17	20 d6 8a	jsr $8ad6			jsr 	LCLLowerCase
.8a1a	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.8a1d	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8a1f	10 f1		bpl $8a12			bpl 	_LCOutIdentifier
.8a21	7a		ply				ply 								; restore position
.8a22	80 9d		bra $89c1			bra 	_LCMainLoop
.8a24					_LCTokens:
.8a24	aa		tax				tax 								; token in X
.8a25	a9 ad		lda #$ad			lda 	#((KeywordSet2) & $FF)
.8a27	85 36		sta $36				sta 	0+zTemp0
.8a29	a9 99		lda #$99			lda 	#((KeywordSet2) >> 8)
.8a2b	85 37		sta $37				sta 	1+zTemp0
.8a2d	e0 82		cpx #$82			cpx 	#$82
.8a2f	f0 16		beq $8a47			beq 	_LCUseShift
.8a31	a9 69		lda #$69			lda 	#((KeywordSet1) & $FF)
.8a33	85 36		sta $36				sta 	0+zTemp0
.8a35	a9 99		lda #$99			lda 	#((KeywordSet1) >> 8)
.8a37	85 37		sta $37				sta 	1+zTemp0
.8a39	e0 81		cpx #$81			cpx 	#$81
.8a3b	f0 0a		beq $8a47			beq 	_LCUseShift
.8a3d	a9 47		lda #$47			lda 	#((KeywordSet0) & $FF)
.8a3f	85 36		sta $36				sta 	0+zTemp0
.8a41	a9 98		lda #$98			lda 	#((KeywordSet0) >> 8)
.8a43	85 37		sta $37				sta 	1+zTemp0
.8a45	80 01		bra $8a48			bra 	_LCNoShift
.8a47					_LCUseShift:
.8a47	c8		iny				iny
.8a48					_LCNoShift:
.8a48	20 b7 8a	jsr $8ab7			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8a4b	b1 30		lda ($30),y			lda 	(codePtr),y
.8a4d	aa		tax				tax 								; into X
.8a4e					_LCFindText:
.8a4e	ca		dex				dex
.8a4f	10 0e		bpl $8a5f			bpl 	_LCFoundText 				; found text.
.8a51	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8a53	1a		inc a				inc 	a 							; one extra for size
.8a54	38		sec				sec 								; one extra for checksum
.8a55	65 36		adc $36				adc 	zTemp0 						; go to next token
.8a57	85 36		sta $36				sta 	zTemp0
.8a59	90 f3		bcc $8a4e			bcc 	_LCFindText
.8a5b	e6 37		inc $37				inc 	zTemp0+1
.8a5d	80 ef		bra $8a4e			bra 	_LCFindText
.8a5f					_LCFoundText:
.8a5f	5a		phy				phy 								; save List position
.8a60	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8a62	aa		tax				tax
.8a63	a0 02		ldy #$02			ldy 	#2
.8a65					_LCCopyToken:
.8a65	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a67	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.8a6a	c8		iny				iny
.8a6b	ca		dex				dex
.8a6c	d0 f7		bne $8a65			bne 	_LCCopyToken
.8a6e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8a70	f0 05		beq $8a77			beq 	_LCNoSpace
.8a72	a9 20		lda #$20			lda 	#' '
.8a74	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.8a77					_LCNoSpace:
.8a77	7a		ply				ply 								; restore position.
.8a78	c8		iny				iny 								; consume token
.8a79	4c c1 89	jmp $89c1			jmp 	_LCMainLoop 				; and go around again.
.8a7c					_LCData:
.8a7c	48		pha				pha 								; save type $FE/$FF
.8a7d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8a7f	c9 fe		cmp #$fe			cmp 	#$FE
.8a81	f0 02		beq $8a85			beq 	_LCHaveOpener
.8a83	a2 22		ldx #$22			ldx 	#'"'
.8a85					_LCHaveOpener:
.8a85	8a		txa				txa 								; output prefix (# or ")
.8a86	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.8a89	c8		iny				iny 								; get count
.8a8a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a8c	aa		tax				tax
.8a8d	c8		iny				iny 								; point at first character
.8a8e					_LCOutData:
.8a8e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a90	c9 00		cmp #$00			cmp 	#0
.8a92	f0 03		beq $8a97			beq 	_LCNoPrint
.8a94	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.8a97					_LCNoPrint:
.8a97	c8		iny				iny
.8a98	ca		dex				dex
.8a99	d0 f3		bne $8a8e			bne 	_LCOutData
.8a9b	68		pla				pla 								; closing " required ?
.8a9c	c9 ff		cmp #$ff			cmp 	#$FF
.8a9e	d0 05		bne $8aa5			bne 	_LCNoQuote
.8aa0	a9 22		lda #$22			lda 	#'"'
.8aa2	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.8aa5					_LCNoQuote:
.8aa5	4c c1 89	jmp $89c1			jmp 	_LCMainLoop
.8aa8					LCLWrite:
.8aa8	da		phx				phx
.8aa9	ae 1b 07	ldx $071b			ldx 	tbOffset
.8aac	9d 27 07	sta $0727,x			sta 	tokenBuffer,x
.8aaf	9e 28 07	stz $0728,x			stz 	tokenBuffer+1,x
.8ab2	ee 1b 07	inc $071b			inc 	tbOffset
.8ab5	fa		plx				plx
.8ab6	60		rts				rts
.8ab7					LCCheckSpaceRequired:
.8ab7	ae 1b 07	ldx $071b			ldx 	tbOffset
.8aba	bd 26 07	lda $0726,x			lda 	tokenBuffer-1,x 			; previous character
.8abd	20 d6 8a	jsr $8ad6			jsr 	LCLLowerCase 				; saves a little effort
.8ac0	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8ac2	90 11		bcc $8ad5			bcc 	_LCCSRExit
.8ac4	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ac6	90 08		bcc $8ad0			bcc 	_LCCSRSpace
.8ac8	c9 61		cmp #$61			cmp 	#"a"
.8aca	90 09		bcc $8ad5			bcc 	_LCCSRExit
.8acc	c9 7b		cmp #$7b			cmp 	#"z"+1
.8ace	b0 05		bcs $8ad5			bcs 	_LCCSRExit
.8ad0					_LCCSRSpace:
.8ad0	a9 20		lda #$20			lda 	#' '
.8ad2	20 a8 8a	jsr $8aa8			jsr 	LCLWrite
.8ad5					_LCCSRExit:
.8ad5	60		rts				rts
.8ad6					LCLLowerCase:
.8ad6	c9 41		cmp #$41			cmp 	#"A"
.8ad8	90 06		bcc $8ae0			bcc 	_LCLLCOut
.8ada	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8adc	b0 02		bcs $8ae0			bcs 	_LCLLCOut
.8ade	69 20		adc #$20			adc 	#$20
.8ae0					_LCLLCOut:
.8ae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8ae1					ProcedureScan:
.8ae1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ae3	85 30		sta $30				sta 	codePtr
.8ae5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ae7	85 31		sta $31				sta 	codePtr+1
.8ae9					_PSLoop:
.8ae9	b2 30		lda ($30)			lda 	(codePtr)
.8aeb	f0 42		beq $8b2f			beq 	_PSExit
.8aed	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8aef	b1 30		lda ($30),y			lda 	(codePtr),y
.8af1	c9 98		cmp #$98			cmp 	#KWD_PROC
.8af3	d0 2d		bne $8b22			bne 	_PSNext
.8af5	c8		iny				iny 								; get the address of the record to zTemp0 and
.8af6	b1 30		lda ($30),y			lda 	(codePtr),y
.8af8	29 c0		and #$c0			and 	#$C0
.8afa	c9 40		cmp #$40			cmp 	#$40
.8afc	d0 32		bne $8b30			bne 	_PSSyntax
.8afe	b1 30		lda ($30),y			lda 	(codePtr),y
.8b00	18		clc				clc
.8b01	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b03	85 37		sta $37				sta 	zTemp0+1
.8b05	c8		iny				iny 								; LSB
.8b06	b1 30		lda ($30),y			lda 	(codePtr),y
.8b08	85 36		sta $36				sta 	zTemp0
.8b0a	c8		iny				iny 								; character after variable call.
.8b0b	98		tya				tya 								; save Y offset at +7
.8b0c	a0 07		ldy #$07			ldy 	#7
.8b0e	91 36		sta ($36),y			sta 	(zTemp0),y
.8b10	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8b12	a0 02		ldy #$02			ldy 	#2
.8b14	91 36		sta ($36),y			sta 	(zTemp0),y
.8b16	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8b18					_PSCopy:
.8b18	b5 30		lda $30,x			lda 	safePtr,x
.8b1a	c8		iny				iny
.8b1b	91 36		sta ($36),y			sta 	(zTemp0),y
.8b1d	e8		inx				inx
.8b1e	e0 04		cpx #$04			cpx 	#4
.8b20	d0 f6		bne $8b18			bne 	_PSCopy
.8b22					_PSNext:
.8b22	18		clc				clc
.8b23	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b25	65 30		adc $30				adc 	codePtr
.8b27	85 30		sta $30				sta 	codePtr
.8b29	90 02		bcc $8b2d			bcc 	_CREExit
.8b2b	e6 31		inc $31				inc 	codePtr+1
.8b2d					_CREExit:
.8b2d	80 ba		bra $8ae9			bra 	_PSLoop
.8b2f					_PSExit:
.8b2f	60		rts				rts
.8b30					_PSSyntax:
.8b30	4c 17 a4	jmp $a417			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8b33					ScanForward:
.8b33	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8b35	86 37		stx $37				stx 	zTemp0+1
.8b37	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8b39					_ScanLoop:
.8b39	b1 30		lda ($30),y			lda 	(codePtr),y
.8b3b	c8		iny				iny
.8b3c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8b3e	d0 0e		bne $8b4e			bne 	_ScanGoNext
.8b40	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8b42	f0 04		beq $8b48			beq 	_ScanMatch
.8b44	c5 37		cmp $37				cmp 	zTemp0+1
.8b46	d0 06		bne $8b4e			bne 	_ScanGoNext
.8b48					_ScanMatch:
.8b48	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8b4a	d0 01		bne $8b4d			bne 	_ScanNotEndEOL
.8b4c	88		dey				dey
.8b4d					_ScanNotEndEOL:
.8b4d	60		rts				rts
.8b4e					_ScanGoNext:
.8b4e	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8b50	90 e7		bcc $8b39			bcc 	_ScanLoop
.8b52	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8b54	90 18		bcc $8b6e			bcc 	_ScanSkipOne
.8b56	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8b58	b0 2f		bcs $8b89			bcs 	_ScanSkipData
.8b5a	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8b5c	90 db		bcc $8b39			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8b5e	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8b60	b0 d7		bcs $8b39			bcs 	_ScanLoop
.8b62	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8b64	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8b66	b0 d1		bcs $8b39			bcs 	_ScanLoop
.8b68	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8b6a	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8b6c	80 cb		bra $8b39			bra 	_ScanLoop
.8b6e					_ScanSkipOne:
.8b6e	c8		iny				iny 								; consume the extra one.
.8b6f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8b71	d0 c6		bne $8b39			bne 	_ScanLoop
.8b73	18		clc				clc
.8b74	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b76	65 30		adc $30				adc 	codePtr
.8b78	85 30		sta $30				sta 	codePtr
.8b7a	90 02		bcc $8b7e			bcc 	_CREExit
.8b7c	e6 31		inc $31				inc 	codePtr+1
.8b7e					_CREExit:
.8b7e	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8b80	b2 30		lda ($30)			lda 	(codePtr)
.8b82	d0 b5		bne $8b39			bne 	_ScanLoop 					; if not zero, more to scan
.8b84	a9 13		lda #$13		lda	#19
.8b86	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.8b89					_ScanSkipData:
.8b89	88		dey				dey 								; point at data token
.8b8a	c8		iny				iny
.8b8b	98		tya				tya
.8b8c	38		sec				sec
.8b8d	71 30		adc ($30),y			adc 	(codePtr),y
.8b8f	a8		tay				tay
.8b90	80 a7		bra $8b39			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8b92					Command_WHILE:
.8b92	5a		phy				phy 								; save position of the test
.8b93	a2 00		ldx #$00			ldx 	#0
.8b95	20 68 96	jsr $9668			jsr 	EvaluateNumber 				; work out the number
.8b98	20 44 97	jsr $9744			jsr 	NSMIsZero 					; check if zero
.8b9b	f0 0e		beq $8bab			beq 	_WHExitLoop 				; if so exit the loop
.8b9d	98		tya				tya 								; position *after* test.
.8b9e	7a		ply				ply 								; restore position before test, at WHILE
.8b9f	88		dey				dey
.8ba0	48		pha				pha 								; push after test on the stack
.8ba1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8ba3	20 51 97	jsr $9751			jsr 	StackOpen
.8ba6	20 83 97	jsr $9783			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8ba9	7a		ply				ply 								; restore the position *after* the test
.8baa	60		rts				rts
.8bab					_WHExitLoop:
.8bab	68		pla				pla 								; throw post loop position
.8bac	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8bae	aa		tax				tax
.8baf	20 33 8b	jsr $8b33			jsr 	ScanForward
.8bb2	60		rts				rts
.8bb3					Command_WEND:
.8bb3	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8bb5	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8bb7	20 78 97	jsr $9778			jsr 	StackCheckFrame
.8bba	20 94 97	jsr $9794			jsr 	STKLoadCodePosition 		; loop back
.8bbd	20 6a 97	jsr $976a			jsr 	StackClose		 			; erase the frame
.8bc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9e35					CheckRightBracket:
.9e35	b1 30		lda ($30),y			lda 	(codePtr),y
.9e37	c8		iny				iny
.9e38	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9e3a	d0 0f		bne $9e4b			bne 	CNAFail
.9e3c	60		rts				rts
.9e3d					CheckComma:
.9e3d	b1 30		lda ($30),y			lda 	(codePtr),y
.9e3f	c8		iny				iny
.9e40	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9e42	d0 07		bne $9e4b			bne 	CNAFail
.9e44	60		rts				rts
.9e45					CheckNextA:
.9e45	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9e47	d0 02		bne $9e4b			bne 	CNAFail
.9e49	c8		iny				iny 								; skip character
.9e4a	60		rts				rts 								; and exit
.9e4b					CNAFail:
.9e4b	4c 17 a4	jmp $a417			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8bc1					ErrorHandler:
.8bc1	a8		tay				tay 								; find the error text
.8bc2	f0 49		beq $8c0d			beq 	_EHEnd
.8bc4	a2 00		ldx #$00			ldx 	#0
.8bc6	a9 30		lda #$30			lda 	#((ErrorText) & $FF)
.8bc8	85 36		sta $36				sta 	0+zTemp0
.8bca	a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.8bcc	85 37		sta $37				sta 	1+zTemp0
.8bce					_EHFind:
.8bce	88		dey				dey 								; found the error text ?
.8bcf	f0 0e		beq $8bdf			beq 	_EHFound
.8bd1					_EHFindZero:
.8bd1	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8bd3	e6 36		inc $36				inc 	zTemp0
.8bd5	d0 02		bne $8bd9			bne 	_EHFNoCarry
.8bd7	e6 37		inc $37				inc 	zTemp0+1
.8bd9					_EHFNoCarry:
.8bd9	c9 00		cmp #$00			cmp 	#0
.8bdb	d0 f4		bne $8bd1			bne 	_EHFindZero
.8bdd	80 ef		bra $8bce			bra 	_EHFind
.8bdf					_EHFound:
.8bdf	a5 36		lda $36				lda 	zTemp0 						; print message
.8be1	a6 37		ldx $37				ldx 	zTemp0+1
.8be3	20 1a 8c	jsr $8c1a			jsr 	PrintStringXA
.8be6	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8be8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bea	d0 05		bne $8bf1			bne 	_EHAtMsg
.8bec	c8		iny				iny
.8bed	b1 30		lda ($30),y			lda 	(codePtr),y
.8bef	f0 17		beq $8c08			beq 	_EHCREnd
.8bf1					_EHAtMsg:
.8bf1	a2 8c		ldx #$8c			ldx 	#_AtMsg >> 8 				; print " at "
.8bf3	a9 10		lda #$10			lda 	#_AtMsg & $FF
.8bf5	20 1a 8c	jsr $8c1a			jsr 	PrintStringXA
.8bf8	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8bfa	b1 30		lda ($30),y			lda 	(codePtr),y
.8bfc	48		pha				pha
.8bfd	c8		iny				iny
.8bfe	b1 30		lda ($30),y			lda 	(codePtr),y
.8c00	aa		tax				tax
.8c01	68		pla				pla
.8c02	20 91 9f	jsr $9f91			jsr 	ConvertInt16 				; convert XA to string
.8c05	20 1a 8c	jsr $8c1a			jsr 	PrintStringXA 				; and print it.
.8c08					_EHCREnd:
.8c08	a9 0d		lda #$0d			lda 	#13 						; new line
.8c0a	20 64 a6	jsr $a664			jsr 	EXTPrintCharacter
.8c0d					_EHEnd:
.8c0d	4c f4 83	jmp $83f4			jmp 	WarmStart
>8c10	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8c18	20 00
.8c1a					PrintStringXA:
.8c1a	5a		phy				phy
.8c1b	86 37		stx $37				stx 	zTemp0+1
.8c1d	85 36		sta $36				sta 	zTemp0
.8c1f	a0 00		ldy #$00			ldy 	#0
.8c21					_PSXALoop:
.8c21	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c23	f0 06		beq $8c2b			beq 	_PSXAExit
.8c25	20 64 a6	jsr $a664			jsr 	EXTPrintCharacter
.8c28	c8		iny				iny
.8c29	80 f6		bra $8c21			bra 	_PSXALoop
.8c2b					_PSXAExit:
.8c2b	7a		ply				ply
.8c2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8c2d					UnaryTrue:
.8c2d	fa		plx				plx
.8c2e					ReturnTrue:
.8c2e	a9 01		lda #$01			lda 	#1  						; set to 1
.8c30	20 16 97	jsr $9716			jsr 	NSMSetByte
.8c33	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8c35	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c38	60		rts				rts
.8c39					UnaryFalse:
.8c39	fa		plx				plx
.8c3a					ReturnFalse:
.8c3a	4c 14 97	jmp $9714			jmp 	NSMSetZero 					; set it all to zero
.8c3d					BinaryCompareEqual:
.8c3d	fa		plx				plx
.8c3e	20 79 8c	jsr $8c79			jsr 	CompareBaseCode
.8c41	c9 00		cmp #$00			cmp 	#0
.8c43	f0 e9		beq $8c2e			beq 	ReturnTrue
.8c45	80 f3		bra $8c3a			bra 	ReturnFalse
.8c47					BinaryCompareLess:
.8c47	fa		plx				plx
.8c48	20 79 8c	jsr $8c79			jsr 	CompareBaseCode
.8c4b	c9 ff		cmp #$ff			cmp 	#$FF
.8c4d	f0 df		beq $8c2e			beq 	ReturnTrue
.8c4f	80 e9		bra $8c3a			bra 	ReturnFalse
.8c51					BinaryCompareGreater:
.8c51	fa		plx				plx
.8c52	20 79 8c	jsr $8c79			jsr 	CompareBaseCode
.8c55	c9 01		cmp #$01			cmp 	#1
.8c57	f0 d5		beq $8c2e			beq 	ReturnTrue
.8c59	80 df		bra $8c3a			bra 	ReturnFalse
.8c5b					BinaryCompareNotEqual:
.8c5b	fa		plx				plx
.8c5c	20 79 8c	jsr $8c79			jsr 	CompareBaseCode
.8c5f	c9 00		cmp #$00			cmp 	#0
.8c61	d0 cb		bne $8c2e			bne 	ReturnTrue
.8c63	80 d5		bra $8c3a			bra 	ReturnFalse
.8c65					BinaryCompareLessEqual:
.8c65	fa		plx				plx
.8c66	20 79 8c	jsr $8c79			jsr 	CompareBaseCode
.8c69	c9 01		cmp #$01			cmp 	#1
.8c6b	d0 c1		bne $8c2e			bne 	ReturnTrue
.8c6d	80 cb		bra $8c3a			bra 	ReturnFalse
.8c6f					BinaryCompareGreaterEqual:
.8c6f	fa		plx				plx
.8c70	20 79 8c	jsr $8c79			jsr 	CompareBaseCode
.8c73	c9 ff		cmp #$ff			cmp 	#$FF
.8c75	d0 b7		bne $8c2e			bne 	ReturnTrue
.8c77	80 c1		bra $8c3a			bra 	ReturnFalse
.8c79					CompareBaseCode:
.8c79	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; make both values if references.
.8c7c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c7f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c82	29 10		and #$10			and 	#NSTString
.8c84	d0 40		bne $8cc6			bne 	_CBCString
.8c86	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c89	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c8c	d0 3b		bne $8cc9			bne 	_CBCFloat
.8c8e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c91	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c94	29 08		and #$08			and 	#NSTFloat
.8c96	d0 31		bne $8cc9			bne 	_CBCFloat
.8c98	20 cc 8c	jsr $8ccc			jsr 	CompareFixMinusZero
.8c9b	e8		inx				inx
.8c9c	20 cc 8c	jsr $8ccc			jsr 	CompareFixMinusZero
.8c9f	ca		dex				dex
.8ca0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8ca3	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ca6	10 0b		bpl $8cb3			bpl 	_CDCSameSign
.8ca8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8cab	30 16		bmi $8cc3			bmi 	_CBCLess 					; return $FF
.8cad					_CBCGreater:
.8cad	a9 01		lda #$01			lda 	#1
.8caf	60		rts				rts
.8cb0					_CBCEqual:
.8cb0	a9 00		lda #$00			lda 	#0
.8cb2	60		rts				rts
.8cb3					_CDCSameSign:
.8cb3	20 dc 8d	jsr $8ddc			jsr 	SubTopTwoStack 				; unsigned subtract
.8cb6	20 44 97	jsr $9744			jsr 	NSMIsZero 					; or the mantissa together
.8cb9	f0 f5		beq $8cb0			beq 	_CBCEqual 					; -0 == 0
.8cbb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8cbe	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8cc1	10 ea		bpl $8cad			bpl 	_CBCGreater
.8cc3					_CBCLess:
.8cc3	a9 ff		lda #$ff			lda 	#$FF
.8cc5	60		rts				rts
.8cc6					_CBCString:
.8cc6	4c 32 8d	jmp $8d32			jmp 	CompareStrings
.8cc9					_CBCFloat:
.8cc9	4c 8d a0	jmp $a08d			jmp 	CompareFloat
.8ccc					CompareFixMinusZero:
.8ccc	20 44 97	jsr $9744			jsr 	NSMIsZero
.8ccf	d0 03		bne $8cd4			bne 	_CFXMZNotZero
.8cd1	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8cd4					_CFXMZNotZero:
.8cd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8cd5					StringConcat:
.8cd5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8cd8	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8cdb	29 18		and #$18			and 	#NSBTypeMask
.8cdd	c9 10		cmp #$10			cmp 	#NSTString
.8cdf	d0 4e		bne $8d2f			bne		_SCType
.8ce1	64 38		stz $38				stz 	zTemp1 						; counting total length
.8ce3	e8		inx				inx
.8ce4	20 02 8d	jsr $8d02			jsr 	_SCSetupZ0 					; setup for second
.8ce7	20 0d 8d	jsr $8d0d			jsr 	_SCLengthZ0 				; length for second
.8cea	ca		dex				dex
.8ceb	20 02 8d	jsr $8d02			jsr 	_SCSetupZ0 					; setup for first
.8cee	20 0d 8d	jsr $8d0d			jsr 	_SCLengthZ0 				; length for first
.8cf1	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8cf3	20 11 a6	jsr $a611			jsr 	StringTempAllocate
.8cf6	20 20 8d	jsr $8d20			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8cf9	e8		inx				inx
.8cfa	20 02 8d	jsr $8d02			jsr 	_SCSetupZ0 					; copy second out
.8cfd	20 20 8d	jsr $8d20			jsr 	_SCCopy
.8d00	ca		dex				dex
.8d01	60		rts				rts
.8d02					_SCSetupZ0:
.8d02	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d05	85 36		sta $36				sta 	zTemp0
.8d07	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d0a	85 37		sta $37				sta 	zTemp0+1
.8d0c	60		rts				rts
.8d0d					_SCLengthZ0:
.8d0d	5a		phy				phy
.8d0e	a0 00		ldy #$00			ldy 	#0
.8d10					_SCLenLoop:
.8d10	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d12	f0 0a		beq $8d1e			beq 	_SCLExit
.8d14	c8		iny				iny
.8d15	e6 38		inc $38				inc 	zTemp1
.8d17	10 f7		bpl $8d10			bpl		_SCLenLoop
.8d19	a9 09		lda #$09		lda	#9
.8d1b	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.8d1e					_SCLExit:
.8d1e	7a		ply				ply
.8d1f	60		rts				rts
.8d20					_SCCopy:
.8d20	5a		phy				phy
.8d21	a0 00		ldy #$00			ldy 	#0
.8d23					_SCCopyLoop:
.8d23	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d25	f0 06		beq $8d2d			beq 	_SCCExit
.8d27	20 4f a6	jsr $a64f			jsr 	StringTempWrite
.8d2a	c8		iny				iny
.8d2b	80 f6		bra $8d23			bra 	_SCCopyLoop
.8d2d					_SCCExit:
.8d2d	7a		ply				ply
.8d2e	60		rts				rts
.8d2f					_SCType:
.8d2f	4c 21 a4	jmp $a421			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9e4e					IntegerDivide:
.9e4e	fa		plx				plx
.9e4f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e52	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e55	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e56	0a		asl a				asl 	a
.9e57	10 05		bpl $9e5e			bpl 	_NotRef
.9e59	48		pha				pha
.9e5a	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e5d	68		pla				pla
.9e5e					_NotRef:
.9e5e	0a		asl a				asl 	a
.9e5f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e61	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e64	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9e67	f0 03		beq $9e6c			beq 	_IntegerCode 				; if clear, then we have two integers
.9e69	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.9e6c					_IntegerCode:
.9e6c	20 8e 9e	jsr $9e8e			jsr 	CheckDivideZero 			; do div zero check
.9e6f	20 c6 9e	jsr $9ec6			jsr 	Int32Divide 				; do the division
.9e72	20 83 9f	jsr $9f83			jsr 	CalculateSign 				; calculate result sign
.9e75					NSMCopyPlusTwoToZero:
.9e75	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9e78	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9e7b	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9e7e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e81	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9e84	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9e87	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9e8a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9e8d	60		rts				rts
.9e8e					CheckDivideZero:
.9e8e	e8		inx				inx
.9e8f	20 44 97	jsr $9744			jsr 	NSMIsZero
.9e92	f0 02		beq $9e96			beq 	_CDVError
.9e94	ca		dex				dex
.9e95	60		rts				rts
.9e96					_CDVError:
.9e96	a9 03		lda #$03		lda	#3
.9e98	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.9e9b					IntegerModulus:
.9e9b	fa		plx				plx
.9e9c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e9f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ea2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ea3	0a		asl a				asl 	a
.9ea4	10 05		bpl $9eab			bpl 	_NotRef
.9ea6	48		pha				pha
.9ea7	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9eaa	68		pla				pla
.9eab					_NotRef:
.9eab	0a		asl a				asl 	a
.9eac	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9eae	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9eb1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9eb4	f0 03		beq $9eb9			beq 	_IntegerCode 				; if clear, then we have two integers
.9eb6	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.9eb9					_IntegerCode:
.9eb9	20 8e 9e	jsr $9e8e			jsr 	CheckDivideZero 			; do div zero check
.9ebc	20 c6 9e	jsr $9ec6			jsr 	Int32Divide 				; do the division
.9ebf	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9ec2	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9ec5	60		rts				rts
.9ec6					Int32Divide:
.9ec6	48		pha				pha 								; save AXY
.9ec7	5a		phy				phy
.9ec8	20 eb 96	jsr $96eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9ecb	20 10 97	jsr $9710			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9ece	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9ed0					_I32DivideLoop:
.9ed0	e8		inx				inx
.9ed1	e8		inx				inx
.9ed2	20 29 97	jsr $9729			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9ed5	ca		dex				dex
.9ed6	ca		dex				dex
.9ed7	20 2a 97	jsr $972a			jsr 	NSMRotateLeft
.9eda	20 06 9f	jsr $9f06			jsr 	DivideCheckSubtract 		; check if subtract possible
.9edd	90 03		bcc $9ee2			bcc 	_I32DivideNoCarryIn
.9edf	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9ee2					_I32DivideNoCarryIn:
.9ee2	88		dey				dey 								; loop round till division completed.
.9ee3	d0 eb		bne $9ed0			bne 	_I32DivideLoop
.9ee5	7a		ply				ply 								; restore AXY and exit
.9ee6	68		pla				pla
.9ee7	60		rts				rts
.9ee8					Int32ShiftDivide:
.9ee8	48		pha				pha 								; save AY
.9ee9	5a		phy				phy
.9eea	e8		inx				inx 								; clear S[X+2]
.9eeb	e8		inx				inx
.9eec	20 14 97	jsr $9714			jsr 	NSMSetZero
.9eef	ca		dex				dex
.9ef0	ca		dex				dex
.9ef1	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9ef3					_I32SDLoop:
.9ef3	20 06 9f	jsr $9f06			jsr 	DivideCheckSubtract 		; check if subtract possible
.9ef6	e8		inx				inx
.9ef7	e8		inx				inx
.9ef8	20 2a 97	jsr $972a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9efb	ca		dex				dex
.9efc	ca		dex				dex
.9efd	20 2a 97	jsr $972a			jsr 	NSMRotateLeft
.9f00	88		dey				dey 	 							; do 31 times
.9f01	d0 f0		bne $9ef3			bne 	_I32SDLoop
.9f03	7a		ply				ply 								; restore AY and exit
.9f04	68		pla				pla
.9f05	60		rts				rts
.9f06					DivideCheckSubtract:
.9f06	20 dc 8d	jsr $8ddc			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9f09	b0 04		bcs $9f0f			bcs 	_DCSExit 					; if carry set, then could do, exit
.9f0b	20 b6 8d	jsr $8db6			jsr 	AddTopTwoStack 				; add it back in
.9f0e	18		clc				clc 								; and return False
.9f0f					_DCSExit:
.9f0f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9f10					MulInteger:
.9f10	fa		plx				plx
.9f11	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f14	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f17	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f18	0a		asl a				asl 	a
.9f19	10 05		bpl $9f20			bpl 	_NotRef
.9f1b	48		pha				pha
.9f1c	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9f1f	68		pla				pla
.9f20					_NotRef:
.9f20	0a		asl a				asl 	a 							; put MSB of type into A:7
.9f21	30 0b		bmi $9f2e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9f23	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f26	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f29	f0 06		beq $9f31			beq 	_IntegerCode 				; if clear, then we have two integers
.9f2b	4c 64 a1	jmp $a164			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9f2e					_StringData:
.9f2e	4c 2b a4	jmp $a42b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9f31					_IntegerCode:
.9f31	20 3e 9f	jsr $9f3e			jsr 	MultiplyShort
.9f34	c9 00		cmp #$00			cmp 	#0
.9f36	f0 05		beq $9f3d			beq 	_MIExit
.9f38	a9 04		lda #$04		lda	#4
.9f3a	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.9f3d					_MIExit:
.9f3d	60		rts				rts
.9f3e					MultiplyShort:
.9f3e	5a		phy				phy 								; save Y
.9f3f	20 eb 96	jsr $96eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f42	20 10 97	jsr $9710			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9f45	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9f47					_I32MLoop:
.9f47	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9f4a	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9f4d	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9f50	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9f53	f0 28		beq $9f7d			beq 	_I32MExit 					; exit if zero
.9f55	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9f58	29 01		and #$01			and 	#1
.9f5a	f0 0e		beq $9f6a			beq 	_I32MNoAdd
.9f5c	20 b6 8d	jsr $8db6			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9f5f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9f62	10 06		bpl $9f6a			bpl 	_I32MNoAdd
.9f64					_I32ShiftRight:
.9f64	20 37 97	jsr $9737			jsr 	NSMShiftRight 				; shift S[X] right
.9f67	c8		iny				iny 								; increment shift count
.9f68	80 0a		bra $9f74			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9f6a					_I32MNoAdd:
.9f6a	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9f6d	70 f5		bvs $9f64			bvs 	_I32ShiftRight 				; instead.
.9f6f	e8		inx				inx
.9f70	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9f73	ca		dex				dex
.9f74					_I32MShiftUpper:
.9f74	e8		inx				inx 								; shift S[X+2] right
.9f75	e8		inx				inx
.9f76	20 37 97	jsr $9737			jsr 	NSMShiftRight
.9f79	ca		dex				dex
.9f7a	ca		dex				dex
.9f7b	80 ca		bra $9f47			bra 	_I32MLoop 					; try again.
.9f7d					_I32MExit:
.9f7d	20 83 9f	jsr $9f83			jsr 	CalculateSign
.9f80	98		tya				tya 								; shift in A
.9f81	7a		ply				ply 								; restore Y and exit
.9f82	60		rts				rts
.9f83					CalculateSign:
.9f83	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9f86	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9f89	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9f8c	0a		asl a				asl 	a 							; shift bit 7 into carry
.9f8d	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9f90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8d32					CompareStrings:
.8d32	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8d35	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d38	29 10		and #$10			and 	#NSBIsString
.8d3a	f0 2c		beq $8d68			beq 	_CSTypeError
.8d3c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8d3f	85 36		sta $36				sta 	zTemp0
.8d41	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d44	85 37		sta $37				sta 	zTemp0+1
.8d46	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8d49	85 38		sta $38				sta 	zTemp1
.8d4b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d4e	85 39		sta $39				sta 	zTemp1+1
.8d50	5a		phy				phy 								; save Y so we can access strings
.8d51	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8d53					_CSLoop:
.8d53	c8		iny				iny
.8d54	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8d56	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8d58	d0 06		bne $8d60			bne 	_CSDifferent
.8d5a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8d5c	d0 f5		bne $8d53			bne 	_CSLoop 					; still comparing
.8d5e					_CSExit:
.8d5e	7a		ply				ply 								; reached end, return zero in A from EOS
.8d5f	60		rts				rts
.8d60					_CSDifferent:
.8d60	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8d62	90 fa		bcc $8d5e			bcc		_CSExit
.8d64	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8d66	80 f6		bra $8d5e			bra 	_CSExit
.8d68					_CSTypeError:
.8d68	4c 21 a4	jmp $a421			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8d6b					ShiftLeft:
.8d6b	38		sec				sec
.8d6c	80 01		bra $8d6f			bra 	ShiftMain
.8d6e					ShiftRight:
.8d6e	18		clc				clc
.8d6f					ShiftMain:
.8d6f	fa		plx				plx 								; restore X
.8d70	08		php				php 								; save direction
.8d71	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d74	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d77	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d78	0a		asl a				asl 	a
.8d79	10 05		bpl $8d80			bpl 	_NotRef
.8d7b	48		pha				pha
.8d7c	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d7f	68		pla				pla
.8d80					_NotRef:
.8d80	0a		asl a				asl 	a
.8d81	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d83	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d86	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d89	f0 03		beq $8d8e			beq 	_IntegerCode 				; if clear, then we have two integers
.8d8b	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.8d8e					_IntegerCode:
.8d8e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8d91	29 e0		and #$e0			and 	#$E0
.8d93	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8d96	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8d99	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8d9c	d0 13		bne $8db1			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8d9e					_SMLoop:
.8d9e	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8da1	30 11		bmi $8db4			bmi 	_SMExit 					; exit if done.
.8da3	28		plp				plp 								; restore direcition setting
.8da4	08		php				php
.8da5	90 05		bcc $8dac			bcc 	_SMRight
.8da7	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; shift left if CS
.8daa	80 f2		bra $8d9e			bra 	_SMLoop
.8dac					_SMRight:
.8dac	20 37 97	jsr $9737			jsr 	NSMShiftRight 				; shift right if CC
.8daf	80 ed		bra $8d9e			bra 	_SMLoop
.8db1					_SMExit0:
.8db1	20 14 97	jsr $9714			jsr 	NSMSetZero 					; return zero.
.8db4					_SMExit:
.8db4	28		plp				plp 								; throw direction
.8db5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8db6					AddTopTwoStack:
.8db6	18		clc				clc
.8db7	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8dba	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8dbd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dc0	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8dc3	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8dc6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8dc9	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8dcc	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8dcf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8dd2	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8dd5	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8dd8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ddb	60		rts				rts
.8ddc					SubTopTwoStack:
.8ddc	38		sec				sec
.8ddd	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8de0	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8de3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8de6	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8de9	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8dec	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8def	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8df2	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8df5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8df8	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8dfb	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8dfe	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e01	60		rts				rts
.8e02					AddInteger:
.8e02	fa		plx				plx
.8e03	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e06	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e09	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e0a	0a		asl a				asl 	a
.8e0b	10 05		bpl $8e12			bpl 	_NotRef
.8e0d	48		pha				pha
.8e0e	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e11	68		pla				pla
.8e12					_NotRef:
.8e12	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e13	30 0b		bmi $8e20			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e15	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e18	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e1b	f0 06		beq $8e23			beq 	_IntegerCode 				; if clear, then we have two integers
.8e1d	4c ec 9f	jmp $9fec			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8e20					_StringData:
.8e20	4c d5 8c	jmp $8cd5			jmp 	StringConcat							; at least one string - don't know both are strings.
.8e23					_IntegerCode:
.8e23					AddCode:
.8e23	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8e26	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e29	10 8b		bpl $8db6			bpl 	AddTopTwoStack
.8e2b	20 dc 8d	jsr $8ddc			jsr 	SubTopTwoStack 				; do a physical subtraction
.8e2e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8e31	10 09		bpl $8e3c			bpl 	_AddExit
.8e33	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8e36	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e39	20 c9 96	jsr $96c9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8e3c					_AddExit:
.8e3c	60		rts				rts
.8e3d					SubInteger:
.8e3d	fa		plx				plx
.8e3e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e41	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e44	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e45	0a		asl a				asl 	a
.8e46	10 05		bpl $8e4d			bpl 	_NotRef
.8e48	48		pha				pha
.8e49	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e4c	68		pla				pla
.8e4d					_NotRef:
.8e4d	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e4e	30 0b		bmi $8e5b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e50	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e53	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e56	f0 06		beq $8e5e			beq 	_IntegerCode 				; if clear, then we have two integers
.8e58	4c f1 9f	jmp $9ff1			jmp 	FloatingPointSub 							; otherwise at least one float.
.8e5b					_StringData:
.8e5b	4c 2b a4	jmp $a42b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8e5e					_IntegerCode:
.8e5e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8e61	49 80		eor #$80			eor 	#$80
.8e63	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e66	80 bb		bra $8e23			bra 	AddCode 					; and do the same code as add.
.8e68					AndInteger:
.8e68	fa		plx				plx
.8e69	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e6c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e6f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e70	0a		asl a				asl 	a
.8e71	10 05		bpl $8e78			bpl 	_NotRef
.8e73	48		pha				pha
.8e74	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e77	68		pla				pla
.8e78					_NotRef:
.8e78	0a		asl a				asl 	a
.8e79	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e7b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e7e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e81	f0 03		beq $8e86			beq 	_IntegerCode 				; if clear, then we have two integers
.8e83	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.8e86					_IntegerCode:
.8e86	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e89	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8e8c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e8f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e92	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8e95	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e98	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e9b	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8e9e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ea1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ea4	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8ea7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eaa	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8ead	60		rts				rts
.8eae					OraInteger:
.8eae	fa		plx				plx
.8eaf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8eb2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eb5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb6	0a		asl a				asl 	a
.8eb7	10 05		bpl $8ebe			bpl 	_NotRef
.8eb9	48		pha				pha
.8eba	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ebd	68		pla				pla
.8ebe					_NotRef:
.8ebe	0a		asl a				asl 	a
.8ebf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ec1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ec7	f0 03		beq $8ecc			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec9	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.8ecc					_IntegerCode:
.8ecc	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ecf	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8ed2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ed5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ed8	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8edb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ede	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ee1	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8ee4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ee7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8eea	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8eed	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ef0	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8ef3	60		rts				rts
.8ef4					EorInteger:
.8ef4	fa		plx				plx
.8ef5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ef8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8efb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8efc	0a		asl a				asl 	a
.8efd	10 05		bpl $8f04			bpl 	_NotRef
.8eff	48		pha				pha
.8f00	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f03	68		pla				pla
.8f04					_NotRef:
.8f04	0a		asl a				asl 	a
.8f05	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f07	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f0a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f0d	f0 03		beq $8f12			beq 	_IntegerCode 				; if clear, then we have two integers
.8f0f	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.8f12					_IntegerCode:
.8f12	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f15	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8f18	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f1b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f1e	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8f21	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f24	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f27	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8f2a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f2d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f30	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8f33	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f36	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f39	60		rts				rts
.8f3a					WordIndirect:
.8f3a	fa		plx				plx
.8f3b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f3e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f41	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f42	0a		asl a				asl 	a
.8f43	10 05		bpl $8f4a			bpl 	_NotRef
.8f45	48		pha				pha
.8f46	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f49	68		pla				pla
.8f4a					_NotRef:
.8f4a	0a		asl a				asl 	a
.8f4b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f4d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f50	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f53	f0 03		beq $8f58			beq 	_IntegerCode 				; if clear, then we have two integers
.8f55	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.8f58					_IntegerCode:
.8f58	20 23 8e	jsr $8e23			jsr 	AddCode 					; add the two values
.8f5b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8f5d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f60	60		rts				rts
.8f61					ByteIndirect:
.8f61	fa		plx				plx
.8f62	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f65	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f68	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f69	0a		asl a				asl 	a
.8f6a	10 05		bpl $8f71			bpl 	_NotRef
.8f6c	48		pha				pha
.8f6d	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f70	68		pla				pla
.8f71					_NotRef:
.8f71	0a		asl a				asl 	a
.8f72	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f74	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f77	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f7a	f0 03		beq $8f7f			beq 	_IntegerCode 				; if clear, then we have two integers
.8f7c	4c 21 a4	jmp $a421			jmp 	TypeError 					; anything else, type mismatch.
.8f7f					_IntegerCode:
.8f7f	20 23 8e	jsr $8e23			jsr 	AddCode 					; add the two values
.8f82	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8f84	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9f91					ConvertInt16:
.9f91	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9f94	8e 10 06	stx $0610			stx 	NSMantissa1
.9f97	9c 18 06	stz $0618			stz 	NSMantissa2
.9f9a	9c 20 06	stz $0620			stz 	NSMantissa3
.9f9d	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9fa0	a2 00		ldx #$00			ldx 	#0 							; stack level
.9fa2	a9 0a		lda #$0a			lda 	#10 						; base
.9fa4	80 00		bra $9fa6			bra 	ConvertInt32
.9fa6					ConvertInt32:
.9fa6	5a		phy				phy
.9fa7	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9fa9	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9fac	10 08		bpl $9fb6			bpl 	_CI32NotNeg
.9fae	48		pha				pha
.9faf	a9 2d		lda #$2d			lda 	#'-'
.9fb1	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9fb4	c8		iny				iny
.9fb5	68		pla				pla
.9fb6					_CI32NotNeg:
.9fb6	20 c4 9f	jsr $9fc4			jsr 	_CI32DivideConvert 			; recursive conversion
.9fb9	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9fbb	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9fbe	7a		ply				ply
.9fbf	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9fc1	a9 75		lda #$75			lda 	#NumberBuffer & $FF
.9fc3	60		rts				rts
.9fc4					_CI32DivideConvert:
.9fc4	e8		inx				inx 								; write to next slot up
.9fc5	20 16 97	jsr $9716			jsr 	NSMSetByte
.9fc8	ca		dex				dex
.9fc9	20 c6 9e	jsr $9ec6			jsr 	Int32Divide 				; divide
.9fcc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9fcf	48		pha				pha
.9fd0	20 75 9e	jsr $9e75			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9fd3	20 44 97	jsr $9744			jsr 	NSMIsZero 					; is it zero ?
.9fd6	f0 06		beq $9fde			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9fd8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9fdb	20 c4 9f	jsr $9fc4			jsr 	_CI32DivideConvert 			; and recusrively call.
.9fde					_CI32NoRecurse:
.9fde	68		pla				pla 								; remainder
.9fdf	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9fe1	90 02		bcc $9fe5			bcc 	_CI32NotHex
.9fe3	69 26		adc #$26			adc 	#6+32
.9fe5					_CI32NotHex:
.9fe5	69 30		adc #$30			adc 	#48
.9fe7	99 75 08	sta $0875,y			sta 	NumberBuffer,y 				; write out and exit
.9fea	c8		iny				iny
.9feb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8f88					PrecedenceLevel:
>8f88	04					.byte	 4	; $00 <<
>8f89	02					.byte	 2	; $01 <=
>8f8a	02					.byte	 2	; $02 <>
>8f8b	00					.byte	 0	; $03 !!3
>8f8c	00					.byte	 0	; $04 ><
>8f8d	02					.byte	 2	; $05 >=
>8f8e	04					.byte	 4	; $06 >>
>8f8f	00					.byte	 0	; $07 !!7
>8f90	00					.byte	 0	; $08 !!8
>8f91	00					.byte	 0	; $09 !!9
>8f92	00					.byte	 0	; $0a !!10
>8f93	00					.byte	 0	; $0b !!11
>8f94	00					.byte	 0	; $0c !!12
>8f95	00					.byte	 0	; $0d !!13
>8f96	00					.byte	 0	; $0e !!14
>8f97	00					.byte	 0	; $0f !!15
>8f98	00					.byte	 0	; $10 @
>8f99	00					.byte	 0	; $11 !!17
>8f9a	00					.byte	 0	; $12 !!18
>8f9b	00					.byte	 0	; $13 [
>8f9c	04					.byte	 4	; $14 \
>8f9d	00					.byte	 0	; $15 ]
>8f9e	01					.byte	 1	; $16 ^
>8f9f	00					.byte	 0	; $17 _
>8fa0	00					.byte	 0	; $18 `
>8fa1	00					.byte	 0	; $19 !!25
>8fa2	00					.byte	 0	; $1a !!26
>8fa3	00					.byte	 0	; $1b {
>8fa4	01					.byte	 1	; $1c |
>8fa5	00					.byte	 0	; $1d }
>8fa6	00					.byte	 0	; $1e ~
>8fa7	00					.byte	 0	; $1f [7m<7F>[m
>8fa8	00					.byte	 0	; $20
>8fa9	05					.byte	 5	; $21 !
>8faa	00					.byte	 0	; $22 "
>8fab	00					.byte	 0	; $23 #
>8fac	05					.byte	 5	; $24 $
>8fad	04					.byte	 4	; $25 %
>8fae	01					.byte	 1	; $26 &
>8faf	00					.byte	 0	; $27 '
>8fb0	00					.byte	 0	; $28 (
>8fb1	00					.byte	 0	; $29 )
>8fb2	04					.byte	 4	; $2a *
>8fb3	03					.byte	 3	; $2b +
>8fb4	00					.byte	 0	; $2c ,
>8fb5	03					.byte	 3	; $2d -
>8fb6	00					.byte	 0	; $2e .
>8fb7	04					.byte	 4	; $2f /
>8fb8	00					.byte	 0	; $30 0
>8fb9	00					.byte	 0	; $31 1
>8fba	00					.byte	 0	; $32 2
>8fbb	00					.byte	 0	; $33 3
>8fbc	00					.byte	 0	; $34 4
>8fbd	00					.byte	 0	; $35 5
>8fbe	00					.byte	 0	; $36 6
>8fbf	00					.byte	 0	; $37 7
>8fc0	00					.byte	 0	; $38 8
>8fc1	00					.byte	 0	; $39 9
>8fc2	00					.byte	 0	; $3a :
>8fc3	00					.byte	 0	; $3b ;
>8fc4	02					.byte	 2	; $3c <
>8fc5	02					.byte	 2	; $3d =
>8fc6	02					.byte	 2	; $3e >
>8fc7	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8fc8					EvaluateExpressionAt0:
.8fc8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8fca					EvaluateExpression:
.8fca	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8fcc					EvaluateExpressionAtPrecedence:
.8fcc	48		pha				pha 								; save precedence level
.8fcd	20 9b 92	jsr $929b			jsr 	EvaluateTerm 				; evaluate term into level X.
.8fd0	68		pla				pla 								; restore precedence level.
.8fd1					_EXPRLoop:
.8fd1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8fd3	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8fd7	b0 25		bcs $8ffe			bcs 	_EXPRExit
.8fd9	da		phx				phx 								; read the operator precedence
.8fda	aa		tax				tax
.8fdb	bd 88 8f	lda $8f88,x			lda 	PrecedenceLevel,x
.8fde	fa		plx				plx
.8fdf	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8fe1	f0 1b		beq $8ffe			beq 	_EXPRExit
.8fe3	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8fe5	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8fe7	c5 37		cmp $37				cmp 	zTemp0+1
.8fe9	b0 13		bcs $8ffe			bcs		_EXPRExit 					; if current >= operator exit
.8feb	48		pha				pha 								; save current precedence.
.8fec	b1 30		lda ($30),y			lda 	(codePtr),y
.8fee	c8		iny				iny
.8fef	48		pha				pha
.8ff0	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8ff2	e8		inx				inx 								; work out the right hand side.
.8ff3	20 cc 8f	jsr $8fcc			jsr 	EvaluateExpressionAtPrecedence
.8ff6	ca		dex				dex
.8ff7	68		pla				pla 								; get operator, call the code.
.8ff8	20 01 90	jsr $9001			jsr 	_EXPRCaller
.8ffb	68		pla				pla 								; restore precedence level
.8ffc	80 d3		bra $8fd1			bra 	_EXPRLoop 					; and go round.
.8ffe					_EXPRExit:
.8ffe	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9000	60		rts				rts
.9001					_EXPRCaller:
.9001	da		phx				phx 								; save on stack, first thing is to restore it
.9002	0a		asl a				asl 	a 							; double so can use vectors into X
.9003	aa		tax				tax
.9004	7c 0c 80	jmp ($800c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9fec					FloatingPointAdd:
.9fec	20 8d a1	jsr $a18d			jsr 	FloatPrepare 				; prepare for floats
.9fef	80 0b		bra $9ffc			bra 	FloatAdd
.9ff1					FloatingPointSub:
.9ff1	20 8d a1	jsr $a18d			jsr 	FloatPrepare 				; prepare for floats
.9ff4					FloatSubtract:
.9ff4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9ff7	49 80		eor #$80			eor 	#$80
.9ff9	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9ffc					FloatAdd:
.9ffc	48		pha				pha
.9ffd	5a		phy				phy
.9ffe	20 9e a1	jsr $a19e			jsr 	NSNormalise 				; normalise S[X]
.a001	f0 54		beq $a057			beq 	_FAReturn1
.a003	e8		inx				inx 								; normalise S[X+1]
.a004	20 9e a1	jsr $a19e			jsr 	NSNormalise
.a007	ca		dex				dex
.a008	c9 00		cmp #$00			cmp 	#0
.a00a	f0 6f		beq $a07b			beq 	_FAExit 					; if so, just return A
.a00c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a00f	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a012	f0 1b		beq $a02f			beq 	_FAExponentsEqual
.a014	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a017	a8		tay				tay
.a018	38		sec				sec 								; do a signed comparison of the exponents.
.a019	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a01c	50 02		bvc $a020			bvc 	_FANoSignedChange
.a01e	49 80		eor #$80			eor 	#$80
.a020					_FANoSignedChange:
.a020	29 80		and #$80			and 	#$80
.a022	10 03		bpl $a027			bpl 	_FAHaveMax
.a024	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a027					_FAHaveMax:
.a027	20 7e a0	jsr $a07e			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a02a	e8		inx				inx
.a02b	20 7e a0	jsr $a07e			jsr 	_FAShiftToExponent
.a02e	ca		dex				dex
.a02f					_FAExponentsEqual:
.a02f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a032	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a035	30 10		bmi $a047			bmi 	_FADifferentSigns
.a037	20 b6 8d	jsr $8db6			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a03a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a03d	10 3c		bpl $a07b			bpl 	_FAExit 					; if no, we are done.
.a03f	20 37 97	jsr $9737			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a042	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a045	80 34		bra $a07b			bra 	_FAExit
.a047					_FADifferentSigns:
.a047	20 dc 8d	jsr $8ddc			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a04a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a04d	10 2c		bpl $a07b			bpl 	_FAExit 					; if no, we are done.
.a04f	20 c0 96	jsr $96c0			jsr 	NSMNegate 					; netate result
.a052	20 c9 96	jsr $96c9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a055	80 24		bra $a07b			bra 	_FAExit
.a057					_FAReturn1:
.a057	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a05a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a05d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a060	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a063	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a066	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a069	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a06c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a06f	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a072	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a075	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a078	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a07b					_FAExit:
.a07b	7a		ply				ply
.a07c	68		pla				pla
.a07d	60		rts				rts
.a07e					_FAShiftToExponent:
.a07e					_FAShiftToExponent2:
.a07e	98		tya				tya 								; compare Y to exponent
.a07f	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a082	f0 08		beq $a08c			beq 	_FASEExit 					; exit if so.
.a084	20 37 97	jsr $9737			jsr 	NSMShiftRight	 			; shift the mantissa right
.a087	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a08a	80 f2		bra $a07e			bra 	_FAShiftToExponent2
.a08c					_FASEExit:
.a08c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a08d					CompareFloat:
.a08d	20 f4 9f	jsr $9ff4			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a090	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a093	29 f8		and #$f8			and 	#$F8
.a095	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a098	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a09b	f0 09		beq $a0a6			beq 	_FCExit 					; zero, so approximately identical
.a09d	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a09f	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a0a2	10 02		bpl $a0a6			bpl 	_FCExit
.a0a4					_FCNegative:
.a0a4	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a0a6					_FCExit:
.a0a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a0a7					FDivideCommand:
.a0a7	fa		plx				plx	 								; restore stack position
.a0a8	20 8d a1	jsr $a18d			jsr 	FloatPrepare 				; prepare for floats
.a0ab					FloatDivide:
.a0ab	48		pha				pha
.a0ac	e8		inx				inx
.a0ad	20 9e a1	jsr $a19e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a0b0	ca		dex				dex
.a0b1	c9 00		cmp #$00			cmp 	#0
.a0b3	f0 20		beq $a0d5			beq 	_FDZero
.a0b5	20 9e a1	jsr $a19e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a0b8	f0 19		beq $a0d3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a0ba	20 e8 9e	jsr $9ee8			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a0bd	20 75 9e	jsr $9e75			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a0c0	20 9e a1	jsr $a19e			jsr		NSNormalise 				; renormalise
.a0c3	20 83 9f	jsr $9f83			jsr 	CalculateSign 				; calculate result sign
.a0c6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a0c9	38		sec				sec
.a0ca	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a0cd	38		sec				sec
.a0ce	e9 1e		sbc #$1e			sbc 	#30
.a0d0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a0d3					_FDExit:
.a0d3	68		pla				pla
.a0d4	60		rts				rts
.a0d5					_FDZero:
.a0d5	a9 03		lda #$03		lda	#3
.a0d7	4c c1 8b	jmp $8bc1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a0da					FloatFractionalPart:
.a0da	5a		phy				phy
.a0db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a0de	29 7f		and #$7f			and 	#$7F
.a0e0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0e3	20 9e a1	jsr $a19e			jsr 	NSNormalise
.a0e6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a0e9	38		sec				sec
.a0ea	e9 e0		sbc #$e0			sbc 	#$E0
.a0ec	90 31		bcc $a11f			bcc 	_FFPExit 					; already fractional
.a0ee	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a0f0	b0 2a		bcs $a11c			bcs 	_FFPZero
.a0f2	a8		tay				tay 								; put count to do in Y
.a0f3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a0f6	20 21 a1	jsr $a121			jsr 	_FFPPartial
.a0f9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a0fc	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a0ff	20 21 a1	jsr $a121			jsr 	_FFPPartial
.a102	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a105	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a108	20 21 a1	jsr $a121			jsr 	_FFPPartial
.a10b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a10e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a111	20 21 a1	jsr $a121			jsr 	_FFPPartial
.a114	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a117	20 44 97	jsr $9744			jsr 	NSMIsZero 					; zeroed check.
.a11a	d0 03		bne $a11f			bne 	_FFPExit
.a11c					_FFPZero:
.a11c	20 14 97	jsr $9714			jsr 	NSMSetZero
.a11f					_FFPExit:
.a11f	7a		ply				ply
.a120	60		rts				rts
.a121					_FFPPartial:
.a121	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a123	f0 17		beq $a13c			beq 	_FFFPPExit
.a125	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a127	b0 0c		bcs $a135			bcs 	_FFFPPWholeByte
.a129	5a		phy				phy
.a12a					_FFFPPLeft:
.a12a	0a		asl a				asl 	a
.a12b	88		dey				dey
.a12c	d0 fc		bne $a12a			bne 	_FFFPPLeft
.a12e	7a		ply				ply
.a12f					_FFFPPRight:
.a12f	4a		lsr a				lsr 	a
.a130	88		dey				dey
.a131	d0 fc		bne $a12f			bne 	_FFFPPRight
.a133	80 07		bra $a13c			bra 	_FFFPPExit
.a135					_FFFPPWholeByte:
.a135	98		tya				tya 								; subtract 8 from count
.a136	38		sec				sec
.a137	e9 08		sbc #$08			sbc 	#8
.a139	a8		tay				tay
.a13a	a9 00		lda #$00			lda 	#0 							; and clear all
.a13c					_FFFPPExit:
.a13c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a13d					FloatIntegerPart:
.a13d	48		pha				pha
.a13e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a141	f0 1f		beq $a162			beq 	_FIPExit 					; if so do nothing
.a143	20 44 97	jsr $9744			jsr 	NSMIsZero 					; is it zero ?
.a146	f0 17		beq $a15f			beq 	_FIPZero 					; if so return zero.
.a148	20 9e a1	jsr $a19e			jsr 	NSNormalise 				; normalise
.a14b	f0 12		beq $a15f			beq 	_FIPZero 					; normalised to zero, exit zero
.a14d					_FIPShift:
.a14d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a150	10 08		bpl $a15a			bpl 	_FIPCheckZero
.a152	20 37 97	jsr $9737			jsr 	NSMShiftRight 				; shift mantissa right
.a155	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a158	80 f3		bra $a14d			bra 	_FIPShift
.a15a					_FIPCheckZero:
.a15a	20 44 97	jsr $9744			jsr 	NSMIsZero 					; avoid -0 problem
.a15d	d0 03		bne $a162			bne 	_FIPExit 					; set to zero if mantissa zero.
.a15f					_FIPZero:
.a15f	20 14 97	jsr $9714			jsr 	NSMSetZero
.a162					_FIPExit:
.a162	68		pla				pla
.a163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a164					FloatingPointMultiply:
.a164	20 8d a1	jsr $a18d			jsr 	FloatPrepare 				; prepare for floats
.a167					FloatMultiply:
.a167	48		pha				pha
.a168	20 9e a1	jsr $a19e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a16b	f0 1b		beq $a188			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a16d	e8		inx				inx
.a16e	20 9e a1	jsr $a19e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a171	ca		dex				dex
.a172	c9 00		cmp #$00			cmp 	#0
.a174	f0 0f		beq $a185			beq 	_FDSetZero
.a176	20 3e 9f	jsr $9f3e			jsr 	MultiplyShort 				; calculate the result.
.a179	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a17c	18		clc				clc
.a17d	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a180	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a183	80 03		bra $a188			bra 	_FDExit
.a185					_FDSetZero:
.a185	20 14 97	jsr $9714			jsr 	NSMSetZero 					; return 0
.a188					_FDExit:
.a188	20 9e a1	jsr $a19e			jsr 	NSNormalise 				; normalise the result
.a18b	68		pla				pla
.a18c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a18d					FloatPrepare:
.a18d	20 da 90	jsr $90da			jsr 	DereferenceTopTwo 			; dereference the top two values
.a190	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a193	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a196	29 10		and #$10			and 	#NSBIsString
.a198	d0 01		bne $a19b			bne 	_FDType
.a19a	60		rts				rts
.a19b					_FDType:
.a19b	4c 21 a4	jmp $a421			jmp 	TypeError
.a19e					NSNormalise:
.a19e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a1a1	29 80		and #$80			and 	#$80
.a1a3	09 08		ora #$08			ora 	#NSTFloat
.a1a5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1a8	20 44 97	jsr $9744			jsr 	NSMIsZero 					; if zero exit
.a1ab	d0 09		bne $a1b6			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a1ad	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a1b0	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a1b3	a9 00		lda #$00			lda 	#0 							; set Z flag
.a1b5	60		rts				rts
.a1b6					_NSNormaliseOptimise:
.a1b6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a1b9	d0 22		bne $a1dd			bne 	_NSNormaliseLoop
.a1bb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a1be	30 1d		bmi $a1dd			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a1c0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1c3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a1c6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1c9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a1cc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1cf	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a1d2	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a1d5	38		sec				sec
.a1d6	e9 08		sbc #$08			sbc 	#8
.a1d8	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1db	80 d9		bra $a1b6			bra 	_NSNormaliseOptimise
.a1dd					_NSNormaliseLoop:
.a1dd	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a1e0	70 08		bvs $a1ea			bvs 	_NSNExit 					; exit if so with Z flag clear
.a1e2	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; shift mantissa left
.a1e5	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a1e8	80 f3		bra $a1dd			bra 	_NSNormaliseLoop
.a1ea					_NSNExit:
.a1ea	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a1ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9007					AssignNumber:
.9007	5a		phy				phy
.9008	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.900b	85 36		sta $36				sta 	zTemp0
.900d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9010	85 37		sta $37				sta 	zTemp0+1
.9012	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9015	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9017	9d 00 06	sta $0600,x			sta 	NSStatus,x
.901a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.901c	c9 08		cmp #$08			cmp 	#NSTFloat
.901e	f0 2a		beq $904a			beq 	_ANFloat
.9020	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9023	f0 05		beq $902a			beq		_ANNotFloat
.9025	e8		inx				inx
.9026	20 3d a1	jsr $a13d			jsr 	FloatIntegerPart 			; make it an integer
.9029	ca		dex				dex
.902a					_ANNotFloat:
.902a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.902d	29 03		and #$03			and 	#3
.902f	d0 05		bne $9036			bne 	_ANByteWord
.9031	20 56 90	jsr $9056			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9034	80 1e		bra $9054			bra 	_ANExit
.9036					_ANByteWord:
.9036	48		pha				pha 								; save count
.9037	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.903a	92 36		sta ($36)			sta 	(zTemp0)
.903c	68		pla				pla
.903d	c9 01		cmp #$01			cmp	 	#1
.903f	f0 13		beq $9054			beq 	_ANExit
.9041	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9044	a0 01		ldy #$01			ldy 	#1
.9046	91 36		sta ($36),y			sta 	(zTemp0),y
.9048	80 0a		bra $9054			bra 	_ANExit
.904a					_ANFloat:
.904a	20 56 90	jsr $9056			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.904d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9050	a0 04		ldy #$04			ldy 	#4
.9052	91 36		sta ($36),y			sta 	(zTemp0),y
.9054					_ANExit:
.9054	7a		ply				ply
.9055	60		rts				rts
.9056					_ANCopy4PackSign:
.9056	a0 03		ldy #$03			ldy 	#3
.9058	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.905b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.905d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.9060	91 36		sta ($36),y			sta 	(zTemp0),y
.9062	88		dey				dey
.9063	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9066	91 36		sta ($36),y			sta 	(zTemp0),y
.9068	88		dey				dey
.9069	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.906c	91 36		sta ($36),y			sta 	(zTemp0),y
.906e	88		dey				dey
.906f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9072	91 36		sta ($36),y			sta 	(zTemp0),y
.9074	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9075					AssignString:
.9075	5a		phy				phy
.9076	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9079	85 38		sta $38				sta 	zTemp1
.907b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.907e	85 39		sta $39				sta 	zTemp1+1
.9080	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9083	85 36		sta $36				sta 	zTemp0
.9085	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9088	85 37		sta $37				sta 	zTemp0+1
.908a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.908c	b1 36		lda ($36),y			lda 	(zTemp0),y
.908e	f0 23		beq $90b3			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9090	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9091	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9093	e9 02		sbc #$02			sbc 	#2
.9095	85 3c		sta $3c				sta 	zsTemp
.9097	a0 01		ldy #$01			ldy 	#1
.9099	b1 36		lda ($36),y			lda 	(zTemp0),y
.909b	e9 00		sbc #$00			sbc 	#0
.909d	85 3d		sta $3d				sta 	zsTemp+1
.909f	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.90a1					_ASGetLength:
.90a1	c8		iny				iny
.90a2	b1 38		lda ($38),y			lda 	(zTemp1),y
.90a4	d0 fb		bne $90a1			bne 	_ASGetLength
.90a6	98		tya				tya 								; is this length <= current length
.90a7	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.90a9	90 20		bcc $90cb			bcc 	_ASCopyString
.90ab	f0 1e		beq $90cb			beq 	_ASCopyString
.90ad	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.90af	a0 01		ldy #$01			ldy 	#1
.90b1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.90b3					_ASNewStringRequired:
.90b3	e8		inx				inx 								; concrete the new string.
.90b4	20 96 a5	jsr $a596			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.90b7	ca		dex				dex
.90b8	18		clc				clc
.90b9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.90bc	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.90be	92 36		sta ($36)			sta 	(zTemp0)
.90c0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.90c3	69 00		adc #$00			adc 	#0
.90c5	a0 01		ldy #$01			ldy 	#1
.90c7	91 36		sta ($36),y			sta 	(zTemp0),y
.90c9	80 0d		bra $90d8			bra 	_ASExit
.90cb					_ASCopyString:
.90cb	a0 00		ldy #$00			ldy 	#0
.90cd					_ASCopyLoop:
.90cd	b1 38		lda ($38),y			lda 	(zTemp1),y
.90cf	c8		iny				iny
.90d0	c8		iny				iny
.90d1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.90d3	88		dey				dey
.90d4	c9 00		cmp #$00			cmp 	#0
.90d6	d0 f5		bne $90cd			bne 	_ASCopyLoop
.90d8					_ASExit:
.90d8	7a		ply				ply
.90d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.90da					DereferenceTopTwo:
.90da	e8		inx				inx
.90db	20 df 90	jsr $90df			jsr 	Dereference 				; deref x+1
.90de	ca		dex				dex  								; falls through to deref x
.90df					Dereference:
.90df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.90e2	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.90e4	f0 57		beq $913d			beq 	_DRFExit 					; not a reference
.90e6	5a		phy				phy
.90e7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.90ea	85 36		sta $36				sta 	zTemp0
.90ec	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90ef	85 37		sta $37				sta 	zTemp0+1
.90f1	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.90f4	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.90f6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.90fc	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.90fe	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9100	f0 0f		beq $9111			beq 	_DRFDereferenceTwo
.9102	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9104	f0 39		beq $913f			beq 	_DRFFull
.9106	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9109	29 03		and #$03			and 	#3
.910b	f0 32		beq $913f			beq 	_DRFFull 					; the whole word
.910d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.910f	f0 07		beq $9118			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9111					_DRFDereferenceTwo:
.9111	a0 01		ldy #$01			ldy 	#1
.9113	b1 36		lda ($36),y			lda 	(zTemp0),y
.9115	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9118					_DRFClear23:
.9118	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.911b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.911e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.9121	29 18		and #$18			and 	#NSBTypeMask
.9123	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9126	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9128	d0 12		bne $913c			bne 	_DRFNotString
.912a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.912d	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9130	d0 0a		bne $913c			bne 	_DRFNotString
.9132	a9 3e		lda #$3e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9134	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9137	a9 91		lda #$91			lda 	#_DRFNullString >> 8
.9139	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.913c					_DRFNotString
.913c	7a		ply				ply 								; restore Y and exit
.913d					_DRFExit:
.913d	60		rts				rts
.913e					_DRFNullString:
>913e	00						.byte 	0
.913f					_DRFFull:
.913f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9141	b1 36		lda ($36),y			lda 	(zTemp0),y
.9143	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9146	c8		iny				iny
.9147	b1 36		lda ($36),y			lda 	(zTemp0),y
.9149	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.914c	c8		iny				iny
.914d	b1 36		lda ($36),y			lda 	(zTemp0),y
.914f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9152	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9155	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9158	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.915a	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.915d	f0 06		beq $9165			beq 	_DRFNoExponent
.915f	c8		iny				iny 								; if not, read the exponent as well.
.9160	b1 36		lda ($36),y			lda 	(zTemp0),y
.9162	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9165					_DRFNoExponent:
.9165	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9168	10 0d		bpl $9177			bpl 	_DRFExit2 					; if not, then exit.
.916a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.916c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.916f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9172	09 80		ora #$80			ora 	#NSBIsNegative
.9174	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9177					_DRFExit2:
.9177	7a		ply				ply
.9178	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9179					EncodeNumberStart:
.9179	38		sec				sec
.917a	80 01		bra $917d			bra 	EncodeNumberContinue+1
.917c					EncodeNumberContinue:
.917c	18		clc				clc
.917d					EncodeNumber:
.917d	08		php				php 								; save reset.
.917e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9180	f0 12		beq $9194			beq 	_ENIsOkay
.9182	c9 30		cmp #$30			cmp 	#"0"
.9184	90 04		bcc $918a			bcc 	_ENBadNumber
.9186	c9 3a		cmp #$3a			cmp 	#"9"+1
.9188	90 0a		bcc $9194			bcc 	_ENIsOkay
.918a					_ENBadNumber:
.918a	28		plp				plp 								; throw saved reset
.918b	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.918e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9190	f0 7e		beq $9210			beq 	_ENConstructFinal
.9192					_ENFail:
.9192	18		clc				clc 								; not allowed
.9193	60		rts				rts
.9194					_ENIsOkay:
.9194	28		plp				plp 								; are we restarting
.9195	90 15		bcc $91ac			bcc 	_ENNoRestart
.9197					_ENStartEncode:
.9197	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9199	f0 0c		beq $91a7			beq 	_ENFirstDP
.919b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.919d	20 16 97	jsr $9716			jsr 	NSMSetByte
.91a0	a9 01		lda #$01			lda 	#ESTA_Low
.91a2					_ENExitChange:
.91a2	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.91a5	38		sec				sec
.91a6	60		rts				rts
.91a7					_ENFirstDP:
.91a7	20 14 97	jsr $9714			jsr 	NSMSetZero 					; clear integer part
.91aa	80 3f		bra $91eb			bra 	_ESTASwitchFloat			; go straight to float and exi
.91ac					_ENNoRestart:
.91ac	48		pha				pha 								; save on stack.
.91ad	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.91b0	c9 01		cmp #$01			cmp 	#ESTA_Low
.91b2	f0 09		beq $91bd			beq  	_ESTALowState
.91b4	c9 02		cmp #$02			cmp 	#ESTA_High
.91b6	f0 29		beq $91e1			beq 	_ESTAHighState
.91b8	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.91ba	f0 3b		beq $91f7			beq 	_ESTADecimalState
>91bc	db						.byte 	$DB 						; causes a break in the emulator
.91bd					_ESTALowState:
.91bd	68		pla				pla 								; get value back
.91be	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.91c0	f0 29		beq $91eb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.91c2	29 0f		and #$0f			and 	#15 						; make digit
.91c4	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.91c7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.91ca	0a		asl a				asl 	a
.91cb	0a		asl a				asl 	a
.91cc	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.91cf	0a		asl a				asl 	a
.91d0	6d 06 07	adc $0706			adc 	DigitTemp
.91d3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91d6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.91d8	90 05		bcc $91df			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.91da	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.91dc	8d 05 07	sta $0705			sta 	EncodeState
.91df					_ESTANoSwitch:
.91df	38		sec				sec
.91e0	60		rts				rts
.91e1					_ESTAHighState:
.91e1	68		pla				pla 								; get value back
.91e2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.91e4	f0 05		beq $91eb			beq 	_ESTASwitchFloat
.91e6	20 4a 92	jsr $924a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.91e9	38		sec				sec
.91ea	60		rts				rts
.91eb					_ESTASwitchFloat:
.91eb	9c 07 07	stz $0707			stz 	DecimalCount
.91ee	e8		inx				inx 								; zero the decimal additive.
.91ef	20 14 97	jsr $9714			jsr 	NSMSetZero
.91f2	ca		dex				dex
.91f3	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.91f5	80 ab		bra $91a2			bra 	_ENExitChange
.91f7					_ESTADecimalState:
.91f7	68		pla				pla 								; digit.
.91f8	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.91fa	f0 96		beq $9192			beq 	_ENFail
.91fc	e8		inx				inx 								; put digit into fractional part of X+1
.91fd	20 4a 92	jsr $924a			jsr 	ESTAShiftDigitIntoMantissa
.9200	ca		dex				dex
.9201	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9204	ad 07 07	lda $0707			lda 	DecimalCount
.9207	c9 0b		cmp #$0b			cmp 	#11
.9209	f0 02		beq $920d			beq 	_ESTADSFail
.920b	38		sec				sec
.920c	60		rts				rts
.920d					_ESTADSFail:
.920d	4c 1c a4	jmp $a41c			jmp 	RangeError
.9210					_ENConstructFinal:
.9210	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9213	f0 33		beq $9248			beq 	_ENCFExit 					; no decimals
.9215	5a		phy				phy
.9216	0a		asl a				asl 	a 							; x 4 and CLC
.9217	0a		asl a				asl 	a
.9218	6d 07 07	adc $0707			adc 	DecimalCount
.921b	a8		tay				tay
.921c	b9 db a3	lda $a3db,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.921f	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9222	b9 dc a3	lda $a3dc,y			lda 	DecimalScalarTable-5+1,y
.9225	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9228	b9 dd a3	lda $a3dd,y			lda 	DecimalScalarTable-5+2,y
.922b	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.922e	b9 de a3	lda $a3de,y			lda 	DecimalScalarTable-5+3,y
.9231	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9234	b9 df a3	lda $a3df,y			lda 	DecimalScalarTable-5+4,y
.9237	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.923a	a9 08		lda #$08			lda 	#NSTFloat
.923c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.923f	7a		ply				ply
.9240	e8		inx				inx 								; multiply decimal const by decimal scalar
.9241	20 67 a1	jsr $a167			jsr 	FloatMultiply
.9244	ca		dex				dex
.9245	20 fc 9f	jsr $9ffc			jsr 	FloatAdd 					; add to integer part.
.9248					_ENCFExit:
.9248	18		clc				clc 								; reject the digit.
.9249	60		rts				rts
.924a					ESTAShiftDigitIntoMantissa:
.924a	29 0f		and #$0f			and 	#15 						; save digit
.924c	48		pha				pha
.924d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9250	48		pha				pha
.9251	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9254	48		pha				pha
.9255	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9258	48		pha				pha
.9259	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.925c	48		pha				pha
.925d	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; x 2
.9260	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; x 4
.9263	18		clc				clc 								; pop mantissa and add
.9264	68		pla				pla
.9265	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9268	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.926b	68		pla				pla
.926c	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.926f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9272	68		pla				pla
.9273	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9276	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9279	68		pla				pla
.927a	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.927d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.9280	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; x 10
.9283	68		pla				pla 								; add digit
.9284	18		clc				clc
.9285	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9288	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.928b	90 0d		bcc $929a			bcc 	_ESTASDExit
.928d	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.9290	d0 08		bne $929a			bne 	_ESTASDExit
.9292	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9295	d0 03		bne $929a			bne 	_ESTASDExit
.9297	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.929a					_ESTASDExit:
.929a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.929b					EvaluateTerm:
.929b	b1 30		lda ($30),y			lda 	(codePtr),y
.929d	30 18		bmi $92b7			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.929f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.92a1	b0 6f		bcs $9312			bcs 	_ETVariable
.92a3	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.92a5	90 6e		bcc $9315			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.92a7	c9 3a		cmp #$3a			cmp 	#'9'+1
.92a9	b0 6a		bcs $9315			bcs 	_ETPuncUnary
.92ab	20 79 91	jsr $9179			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.92ae					_ETNumber:
.92ae	c8		iny				iny 								; keep encoding until we have the numbers
.92af	b1 30		lda ($30),y			lda 	(codePtr),y
.92b1	20 7c 91	jsr $917c			jsr 	EncodeNumberContinue
.92b4	b0 f8		bcs $92ae			bcs 	_ETNumber 					; go back if accepted.
.92b6	60		rts				rts
.92b7					_ETCheckUnary:
.92b7	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.92b9	f0 41		beq $92fc			beq 	_ETString
.92bb	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.92bd	f0 12		beq $92d1			beq 	_ETHexConstant
.92bf	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.92c1	90 0b		bcc $92ce			bcc 	_ETSyntaxError
.92c3	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.92c5	b0 07		bcs $92ce			bcs 	_ETSyntaxError
.92c7	da		phx				phx 								; push X on the stack
.92c8	0a		asl a				asl 	a 							; put vector x 2 into X
.92c9	aa		tax				tax
.92ca	c8		iny				iny 								; consume unary function token
.92cb	7c 8c 80	jmp ($808c,x)			jmp 	(VectorSet0,x) 				; and do it.
.92ce					_ETSyntaxError:
.92ce	4c 17 a4	jmp $a417			jmp 	SyntaxError
.92d1					_ETHexConstant:
.92d1	c8		iny				iny 								; skip #
.92d2	c8		iny				iny 								; skip count
.92d3	20 14 97	jsr $9714			jsr 	NSMSetZero 					; clear result
.92d6					_ETHLoop:
.92d6	b1 30		lda ($30),y			lda 	(codePtr),y
.92d8	c8		iny				iny 								; and consume
.92d9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.92db	f0 1e		beq $92fb			beq 	_ETHExit
.92dd	48		pha				pha 								; save on stack.
.92de	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; x 2
.92e1	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; x 4
.92e4	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; x 8
.92e7	20 29 97	jsr $9729			jsr 	NSMShiftLeft 				; x 16
.92ea	68		pla				pla 								; ASCII
.92eb	c9 41		cmp #$41			cmp 	#'A'
.92ed	90 02		bcc $92f1			bcc 	_ETHNotChar
.92ef	e9 07		sbc #$07			sbc 	#7
.92f1					_ETHNotChar:
.92f1	29 0f		and #$0f			and 	#15 						; digit now
.92f3	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.92f6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92f9	80 db		bra $92d6			bra 	_ETHLoop 					; go round.
.92fb					_ETHExit:
.92fb	60		rts				rts
.92fc					_ETString:
.92fc	c8		iny				iny 								; look at length
.92fd	b1 30		lda ($30),y			lda 	(codePtr),y
.92ff	48		pha				pha
.9300	c8		iny				iny 								; first character
.9301	20 af 9d	jsr $9daf			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9304	68		pla				pla 								; restore count and save
.9305	85 36		sta $36				sta 	zTemp0
.9307	98		tya				tya 								; add length to Y to skip it.
.9308	18		clc				clc
.9309	65 36		adc $36				adc 	zTemp0
.930b	a8		tay				tay
.930c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.930e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9311	60		rts				rts
.9312					_ETVariable:
.9312	4c 6c 93	jmp $936c			jmp 	VariableHandler
.9315					_ETPuncUnary:
.9315	c8		iny				iny 								; consume the unary character
.9316	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9318	f0 2d		beq $9347			beq 	_ETUnaryNegate
.931a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.931c	f0 39		beq $9357			beq 	_ETDereference
.931e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9320	f0 43		beq $9365			beq 	_ETParenthesis
.9322	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9324	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9326	f0 06		beq $932e			beq 	_ETIndirection
.9328	e6 36		inc $36				inc 	zTemp0
.932a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.932c	d0 a0		bne $92ce			bne 	_ETSyntaxError
.932e					_ETIndirection:
.932e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9330	1a		inc a				inc 	a
.9331	48		pha				pha
.9332	20 9b 92	jsr $929b			jsr 	EvaluateTerm				; evaluate the term
.9335	20 df 90	jsr $90df			jsr 	Dereference 				; dereference it.
.9338	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.933b	d0 07		bne $9344			bne 	_ETTypeMismatch
.933d	68		pla				pla 								; indirection 1-2
.933e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9340	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9343	60		rts				rts
.9344					_ETTypeMismatch:
.9344	4c 21 a4	jmp $a421			jmp 	TypeError
.9347					_ETUnaryNegate:
.9347	20 9b 92	jsr $929b			jsr 	EvaluateTerm				; evaluate the term
.934a	20 df 90	jsr $90df			jsr 	Dereference 				; dereference it.
.934d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.9350	29 10		and #$10			and 	#NSTString
.9352	d0 f0		bne $9344			bne 	_ETTypeMismatch
.9354	4c c0 96	jmp $96c0			jmp 	NSMNegate  					; just toggles the sign bit.
.9357					_ETDereference:
.9357	20 9b 92	jsr $929b			jsr 	EvaluateTerm				; evaluate the term
.935a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.935d	29 20		and #$20			and 	#NSBIsReference
.935f	f0 e3		beq $9344			beq 	_ETTypeMismatch
.9361	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9364	60		rts				rts
.9365					_ETParenthesis:
.9365	20 ca 8f	jsr $8fca			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9368	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 			; check for )
.936b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.936c					VariableHandler:
.936c	b1 30		lda ($30),y			lda 	(codePtr),y
.936e	18		clc				clc
.936f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9371	85 37		sta $37				sta 	zTemp0+1
.9373	c8		iny				iny
.9374	b1 30		lda ($30),y			lda 	(codePtr),y
.9376	85 36		sta $36				sta 	zTemp0
.9378	c8		iny				iny
.9379	18		clc				clc									; copy variable address+3 to mantissa
.937a	69 03		adc #$03			adc 	#3
.937c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.937f	a5 37		lda $37				lda 	zTemp0+1
.9381	69 00		adc #$00			adc 	#0
.9383	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9386	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9389	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.938c	9e 28 06	stz $0628,x			stz 	NSExponent,x
.938f	5a		phy				phy
.9390	a0 02		ldy #$02			ldy 	#2 							; read type
.9392	b1 36		lda ($36),y			lda 	(zTemp0),y
.9394	7a		ply				ply
.9395	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9397	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9399	9d 00 06	sta $0600,x			sta 	NSStatus,x
.939c	29 04		and #$04			and 	#NSBIsArray
.939e	d0 01		bne $93a1			bne 	_VHArray
.93a0	60		rts				rts
.93a1					_VHArray:
.93a1	e8		inx				inx
.93a2	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger 		; get the 1st index.
.93a5	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.93a7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.93aa	b1 30		lda ($30),y			lda 	(codePtr),y
.93ac	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.93ae	d0 06		bne $93b6			bne 	_VHNoSecondIndex
.93b0	c8		iny				iny 								; skip the comma
.93b1	e8		inx				inx
.93b2	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.93b5	ca		dex				dex
.93b6					_VHNoSecondIndex:
.93b6	ca		dex				dex 								; set X back.
.93b7	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 			; and check the right bracket.
.93ba	5a		phy				phy 								; save position
.93bb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.93be	85 3e		sta $3e				sta 	zaTemp
.93c0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93c3	85 3f		sta $3f				sta 	zaTemp+1
.93c5	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.93c7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93c9	f0 02		beq $93cd			beq 	_VHHas2Mask
.93cb	a9 ff		lda #$ff			lda 	#$FF
.93cd					_VHHas2Mask:
.93cd	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.93d0	f0 54		beq $9426			beq 	_VHBadIndex
.93d2	0a		asl a				asl 	a 							; carry will be set if a second index
.93d3	90 09		bcc $93de			bcc 	_VHCheckFirstIndex
.93d5	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.93d7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93d9	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.93dc	90 48		bcc $9426			bcc 	_VHBadIndex
.93de					_VHCheckFirstIndex:
.93de	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.93e0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93e2	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.93e5	90 3f		bcc $9426			bcc 	_VHBadIndex
.93e7	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.93e9	64 37		stz $37				stz 	zTemp0+1
.93eb	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.93ee	30 0f		bmi $93ff			bmi 	_VHNoMultiply
.93f0	da		phx				phx
.93f1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.93f4	48		pha				pha
.93f5	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.93f7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93f9	1a		inc a				inc 	a 							; add 1 for zero base
.93fa	fa		plx				plx
.93fb	20 b7 a2	jsr $a2b7			jsr 	Multiply8x8 				; calculate -> Z0
.93fe	fa		plx				plx
.93ff					_VHNoMultiply:
.93ff	18		clc				clc
.9400	a5 36		lda $36				lda 	zTemp0
.9402	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9405	85 36		sta $36				sta 	zTemp0
.9407	a5 37		lda $37				lda 	zTemp0+1
.9409	69 00		adc #$00			adc 	#0
.940b	85 37		sta $37				sta 	zTemp0+1
.940d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9410	20 59 85	jsr $8559			jsr 	ScaleByBaseType
.9413	18		clc				clc
.9414	b2 3e		lda ($3e)			lda 	(zaTemp)
.9416	65 36		adc $36				adc 	zTemp0
.9418	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.941b	a0 01		ldy #$01			ldy 	#1
.941d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.941f	65 37		adc $37				adc 	zTemp0+1
.9421	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9424	7a		ply				ply 								; restore position
.9425	60		rts				rts
.9426					_VHBadIndex:
.9426	a9 17		lda #$17		lda	#23
.9428	4c c1 8b	jmp $8bc1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a1ed					AbsUnary:
.a1ed	fa		plx				plx 								; restore stack pos
.a1ee	20 68 96	jsr $9668			jsr 	EvaluateNumber 				; get a float or int
.a1f1	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.a1f4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a1f7	29 7f		and #$7f			and 	#$7F
.a1f9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.942b					AllocUnary:
.942b	fa		plx				plx 								; restore stack pos
.942c	20 a0 96	jsr $96a0			jsr 	Evaluate16BitInteger		; get bytes required.
.942f	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.9432	da		phx				phx 								; save X/Y
.9433	5a		phy				phy
.9434	8a		txa				txa 								; copy X into Y
.9435	a8		tay				tay
.9436	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9439	aa		tax				tax
.943a	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.943d	20 4a 94	jsr $944a			jsr 	AllocateXABytes 			; allocate memory
.9440	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9443	8a		txa				txa
.9444	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9447	7a		ply				ply
.9448	fa		plx				plx
.9449	60		rts				rts
.944a					AllocateXABytes:
.944a	5a		phy				phy
.944b	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.944e	84 36		sty $36				sty 	zTemp0
.9450	5a		phy				phy
.9451	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9454	84 37		sty $37				sty 	zTemp0+1
.9456	5a		phy				phy
.9457	18		clc				clc 								; add to low memory pointer
.9458	6d 0c 07	adc $070c			adc 	lowMemPtr
.945b	8d 0c 07	sta $070c			sta 	lowMemPtr
.945e	8a		txa				txa
.945f	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9462	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9465					_ClearMemory:
.9465	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9468	c5 36		cmp $36				cmp 	zTemp0
.946a	d0 07		bne $9473			bne 	_CMClearNext
.946c	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.946f	c5 37		cmp $37				cmp 	zTemp0+1
.9471	f0 0c		beq $947f			beq 	_CMExit
.9473					_CMClearNext:
.9473	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9475	92 36		sta ($36)			sta 	(zTemp0)
.9477	e6 36		inc $36				inc 	zTemp0
.9479	d0 ea		bne $9465			bne 	_ClearMemory
.947b	e6 37		inc $37				inc		zTemp0+1
.947d	80 e6		bra $9465			bra 	_ClearMemory
.947f					_CMExit:
.947f	fa		plx				plx
.9480	68		pla				pla
.9481	7a		ply				ply
.9482	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a1fd					AscUnary:
.a1fd	fa		plx				plx 								; restore stack pos
.a1fe	20 73 96	jsr $9673			jsr 	EvaluateString 				; get a string
.a201	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a203	20 16 97	jsr $9716			jsr 	NSMSetByte
.a206	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.a209	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a20a					FracUnary:
.a20a	fa		plx				plx 								; restore stack pos
.a20b	20 68 96	jsr $9668			jsr 	EvaluateNumber 				; get a float or int
.a20e	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.a211	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a214	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a216	f0 04		beq $a21c			beq 	_IUZero
.a218	20 da a0	jsr $a0da			jsr 	FloatFractionalPart
.a21b	60		rts				rts
.a21c					_IUZero:
.a21c	20 14 97	jsr $9714			jsr 	NSMSetZero
.a21f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a220					IntUnary:
.a220	fa		plx				plx 								; restore stack pos
.a221	20 68 96	jsr $9668			jsr 	EvaluateNumber 				; get a float or int
.a224	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.a227	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a22a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a22c	f0 03		beq $a231			beq 	_IUExit
.a22e	20 3d a1	jsr $a13d			jsr 	FloatIntegerPart
.a231					_IUExit:
.a231	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a232					LenUnary:
.a232	fa		plx				plx 								; restore stack pos
.a233	20 73 96	jsr $9673			jsr 	EvaluateString 				; get a string
.a236	5a		phy				phy
.a237	a0 00		ldy #$00			ldy 	#0 							; find length
.a239					_LenFind:
.a239	b1 36		lda ($36),y			lda 	(zTemp0),y
.a23b	f0 06		beq $a243			beq 	_LenExit
.a23d	c8		iny				iny
.a23e	d0 f9		bne $a239			bne 	_LenFind
.a240	4c 1c a4	jmp $a41c			jmp 	RangeError 					; string > 255
.a243					_LenExit:
.a243	98		tya				tya
.a244	20 16 97	jsr $9716			jsr 	NSMSetByte
.a247	7a		ply				ply
.a248	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.a24b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9483					Unary_Not:
.9483	fa		plx				plx
.9484	20 8b 96	jsr $968b			jsr 	EvaluateInteger 			; get integer
.9487	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.948a	20 44 97	jsr $9744			jsr 	NSMIsZero 					; zero mantissa ?
.948d	f0 04		beq $9493			beq 	_NotZero
.948f	20 14 97	jsr $9714			jsr 	NSMSetZero
.9492	60		rts				rts
.9493					_NotZero:
.9493	4c 2e 8c	jmp $8c2e			jmp 	ReturnTrue
.9496					_UNBad:
.9496	4c 26 a4	jmp $a426			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9499					Unary_Rnd:
.9499	20 68 96	jsr $9668			jsr 	EvaluateNumber 				; number to use.
.949c	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 			; closing bracket
.949f	20 c8 94	jsr $94c8			jsr 	Random32Bit 				; generate a number.
.94a2	ad 08 07	lda $0708			lda 	RandomSeed+0
.94a5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94a8	ad 09 07	lda $0709			lda 	RandomSeed+1
.94ab	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94ae	ad 0a 07	lda $070a			lda 	RandomSeed+2
.94b1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94b4	ad 0b 07	lda $070b			lda 	RandomSeed+3
.94b7	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.94b9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94bc	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.94be	8d 28 06	sta $0628			sta 	NSExponent
.94c1	a9 08		lda #$08			lda 	#NSTFloat
.94c3	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>94c6	db						.byte 	$DB 						; causes a break in the emulator
.94c7	60		rts				rts
.94c8					Random32Bit:
.94c8	5a		phy				phy
.94c9	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.94cb	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.94ce	d0 03		bne $94d3			bne 	_Random1
.94d0	a8		tay				tay 								; if so do it 256 times
.94d1	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.94d3					_Random1:
.94d3	0a		asl a				asl 	a 							; LSFR RNG
.94d4	2e 09 07	rol $0709			rol 	RandomSeed+1
.94d7	2e 0a 07	rol $070a			rol 	RandomSeed+2
.94da	2e 0b 07	rol $070b			rol 	RandomSeed+3
.94dd	90 02		bcc $94e1			bcc 	_Random2
.94df	49 c5		eor #$c5			eor 	#$C5
.94e1					_Random2:
.94e1	88		dey				dey
.94e2	d0 ef		bne $94d3			bne 	_Random1
.94e4	7a		ply				ply
.94e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a24c					SgnUnary:
.a24c	fa		plx				plx 								; restore stack pos
.a24d	20 68 96	jsr $9668			jsr 	EvaluateNumber 				; get a float or int
.a250	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.a253	20 44 97	jsr $9744			jsr 	NSMIsZero 					; if zero
.a256	f0 10		beq $a268			beq 	_SGZero  					; return Int Zero
.a258	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a25b	48		pha				pha
.a25c	a9 01		lda #$01			lda 	#1 							; set to 1
.a25e	20 16 97	jsr $9716			jsr 	NSMSetByte
.a261	68		pla				pla
.a262	29 80		and #$80			and		#$80 						; copy the sign byte out
.a264	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a267	60		rts				rts
.a268	20 14 97	jsr $9714	_SGZero:jsr 	NSMSetZero
.a26b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a26c					ValUnary:
.a26c	fa		plx				plx 								; restore stack pos
.a26d	20 82 a2	jsr $a282			jsr 	ValMainCode 				; do the main val() code
.a270	b0 01		bcs $a273			bcs 	_VUError 					; couldn't convert
.a272	60		rts				rts
.a273					_VUError:
.a273	4c 21 a4	jmp $a421			jmp 	TypeError
.a276					IsValUnary:
.a276	fa		plx				plx 								; restore stack pos
.a277	20 82 a2	jsr $a282			jsr 	ValMainCode 				; do the main val() code
.a27a	b0 03		bcs $a27f			bcs 	_VUBad
.a27c	4c 2e 8c	jmp $8c2e			jmp 	ReturnTrue
.a27f					_VUBad:
.a27f	4c 3a 8c	jmp $8c3a			jmp 	ReturnFalse
.a282					ValMainCode:
.a282	20 73 96	jsr $9673			jsr 	EvaluateString 				; get a string
.a285	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 			; check right bracket present
.a288	5a		phy				phy
.a289	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a28b	f0 17		beq $a2a4			beq 	_VMCFail2
.a28d	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a28f	48		pha				pha 								; save first character
.a290	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a292	d0 01		bne $a295			bne 	_VMCStart
.a294	c8		iny				iny 								; skip over -
.a295					_VMCStart:
.a295	38		sec				sec 								; initialise first time round.
.a296					_VMCNext:
.a296	c8		iny				iny 								; pre-increment
.a297	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a299	f0 0c		beq $a2a7			beq 	_VMCSuccess 				; successful.
.a29b	20 7d 91	jsr $917d			jsr 	EncodeNumber 				; send it to the number-builder
.a29e	90 03		bcc $a2a3			bcc 	_VMCFail 					; if failed, give up.
.a2a0	18		clc				clc 								; next time round, countinue
.a2a1	80 f3		bra $a296			bra 	_VMCNext
.a2a3					_VMCFail:
.a2a3	68		pla				pla
.a2a4					_VMCFail2:
.a2a4	7a		ply				ply
.a2a5	38		sec				sec
.a2a6	60		rts				rts
.a2a7					_VMCSuccess:
.a2a7	a9 00		lda #$00			lda 	#0 							; construct final
.a2a9	20 7d 91	jsr $917d			jsr 	EncodeNumber
.a2ac	68		pla				pla
.a2ad	c9 2d		cmp #$2d			cmp 	#"-"
.a2af	d0 03		bne $a2b4			bne 	_VMCNotNegative
.a2b1	20 c0 96	jsr $96c0			jsr		NSMNegate
.a2b4					_VMCNotNegative:
.a2b4	7a		ply				ply
.a2b5	18		clc				clc
.a2b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.94e6					ChrUnary:
.94e6	fa		plx				plx 								; restore stack pos
.94e7	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger			; get value
.94ea	48		pha				pha
.94eb	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.94ee	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.94f0	20 11 a6	jsr $a611			jsr 	StringTempAllocate
.94f3	68		pla				pla 								; write number to it
.94f4	20 4f a6	jsr $a64f			jsr 	StringTempWrite
.94f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.94f8					SpcUnary:
.94f8	fa		plx				plx 								; restore stack pos
.94f9	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger			; get value
.94fc	5a		phy				phy
.94fd	48		pha				pha 								; save count
.94fe	20 11 a6	jsr $a611			jsr 	StringTempAllocate
.9501	7a		ply				ply 								; to do count in Y
.9502					_SpcLoop:
.9502	c0 00		cpy #$00			cpy 	#0
.9504	f0 08		beq $950e			beq 	_SpcExit
.9506	a9 20		lda #$20			lda 	#32
.9508	20 4f a6	jsr $a64f			jsr 	StringTempWrite
.950b	88		dey				dey
.950c	80 f4		bra $9502			bra 	_SPCLoop
.950e					_SpcExit:
.950e	7a		ply				ply
.950f	20 35 9e	jsr $9e35			jsr 	CheckRightBracket
.9512	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9513					Unary_Str:
.9513	fa		plx				plx
.9514	20 68 96	jsr $9668			jsr 	EvaluateNumber  			; get number
.9517	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 			; closing bracket
.951a	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.951c	20 35 95	jsr $9535			jsr 	ConvertNumberToString 		; do the conversion.
.951f	a9 21		lda #$21			lda		#33 						; create buffer
.9521	20 11 a6	jsr $a611			jsr 	StringTempAllocate 			; allocate memory
.9524	da		phx				phx
.9525	a2 00		ldx #$00			ldx 	#0
.9527					_USCopy:
.9527	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.952a	20 4f a6	jsr $a64f			jsr 	StringTempWrite
.952d	e8		inx				inx
.952e	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.9531	d0 f4		bne $9527			bne 	_USCopy
.9533	fa		plx				plx
.9534	60		rts				rts
.9535					ConvertNumberToString:
.9535	5a		phy				phy 								; save code position
.9536	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.9539	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.953c	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.953f	10 0a		bpl $954b			bpl 	_CNTSNotNegative
.9541	29 7f		and #$7f			and 	#$7F 						; make +ve
.9543	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9546	a9 2d		lda #$2d			lda 	#"-"
.9548	20 b1 95	jsr $95b1			jsr 	WriteDecimalBuffer
.954b					_CNTSNotNegative:
.954b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.954e	f0 15		beq $9565			beq 	_CNTSNotFloat
.9550	e8		inx				inx 								; round up
.9551	a9 01		lda #$01			lda 	#1
.9553	20 16 97	jsr $9716			jsr 	NSMSetByte
.9556	ca		dex				dex
.9557	bd 28 06	lda $0628,x			lda		NSExponent,x
.955a	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.955d	a9 08		lda #$08			lda 	#NSTFloat
.955f	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9562	20 fc 9f	jsr $9ffc			jsr 	FloatAdd
.9565					_CNTSNotFloat:
.9565	20 93 95	jsr $9593			jsr 	MakePlusTwoString
.9568	20 da a0	jsr $a0da			jsr 	FloatFractionalPart 		; get the fractional part
.956b	20 9e a1	jsr $a19e			jsr 	NSNormalise					; normalise , exit if zero
.956e	f0 21		beq $9591			beq 	_CNTSExit
.9570	a9 2e		lda #$2e			lda 	#"."
.9572	20 b1 95	jsr $95b1			jsr 	WriteDecimalBuffer 			; write decimal place
.9575					_CNTSDecimal:
.9575	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.9578	30 17		bmi $9591			bmi 	_CNTSExit
.957a	e8		inx				inx 								; x 10.0
.957b	a9 0a		lda #$0a			lda 	#10
.957d	20 16 97	jsr $9716			jsr 	NSMSetByte
.9580	a9 08		lda #$08			lda 	#NSTFloat
.9582	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9585	ca		dex				dex
.9586	20 67 a1	jsr $a167			jsr 	FloatMultiply
.9589	20 93 95	jsr $9593			jsr 	MakePlusTwoString
.958c	20 da a0	jsr $a0da			jsr 	FloatFractionalPart 		; get the fractional part
.958f	80 e4		bra $9575			bra 	_CNTSDecimal 				; keep going.
.9591					_CNTSExit:
.9591	7a		ply				ply
.9592	60		rts				rts
.9593					MakePlusTwoString:
.9593	da		phx				phx
.9594	20 eb 96	jsr $96eb			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9597	e8		inx				inx 								; access it
.9598	e8		inx				inx
.9599	20 3d a1	jsr $a13d			jsr 	FloatIntegerPart 			; make it an integer
.959c	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.959e	20 a6 9f	jsr $9fa6			jsr 	ConvertInt32
.95a1	a2 00		ldx #$00			ldx	 	#0
.95a3					_MPTSCopy:
.95a3	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.95a6	20 b1 95	jsr $95b1			jsr 	WriteDecimalBuffer
.95a9	e8		inx				inx
.95aa	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.95ad	d0 f4		bne $95a3			bne 	_MPTSCopy
.95af	fa		plx				plx
.95b0	60		rts				rts
.95b1					WriteDecimalBuffer:
.95b1	da		phx				phx
.95b2	ae 14 07	ldx $0714			ldx 	dbOffset
.95b5	9d 97 08	sta $0897,x			sta 	DecimalBuffer,x
.95b8	9e 98 08	stz $0898,x			stz 	DecimalBuffer+1,x
.95bb	ee 14 07	inc $0714			inc 	dbOffset
.95be	fa		plx				plx
.95bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.95c0					Unary_Left:
.95c0	fa		plx				plx
.95c1	18		clc				clc 								; only one parameter
.95c2	20 37 96	jsr $9637			jsr 	SubstringInitial 			; set up.
.95c5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.95c8	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.95cb	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.95ce	80 2c		bra $95fc			bra 	SubstringMain
.95d0					Unary_Right:
.95d0	fa		plx				plx
.95d1	18		clc				clc 								; only one parameter
.95d2	20 37 96	jsr $9637			jsr 	SubstringInitial 			; set up.
.95d5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.95d8	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.95db	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.95de	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.95e1	b0 02		bcs $95e5			bcs 	_URNotUnderflow
.95e3	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.95e5					_URNotUnderFlow:
.95e5	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.95e8	80 12		bra $95fc			bra 	SubStringMain
.95ea					Unary_Mid:
.95ea	fa		plx				plx
.95eb	38		sec				sec 								; two parameters
.95ec	20 37 96	jsr $9637			jsr 	SubstringInitial 			; set up.
.95ef	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.95f2	f0 05		beq $95f9			beq 	_UMError
.95f4	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.95f7	80 03		bra $95fc			bra 	SubStringMain
.95f9					_UMError:
.95f9	4c 26 a4	jmp $a426			jmp 	ArgumentError
.95fc					SubStringMain:
.95fc	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.95ff	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9602	b0 2d		bcs $9631			bcs 	_SSMNull 					; if so, return an empty string.
.9604	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9607	f0 28		beq $9631			beq 	_SSMNull 					; return empty string.
.9609	18		clc				clc 								; add the offset +1 to the address and
.960a	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.960d	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9610	85 36		sta $36				sta 	zTemp0
.9612	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9615	69 00		adc #$00			adc 	#0
.9617	85 37		sta $37				sta 	zTemp0+1
.9619					_SSMNoCarry:
.9619	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.961c	20 11 a6	jsr $a611			jsr 	StringTempAllocate 			; allocate that many characters
.961f	5a		phy				phy 								; save Y
.9620	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9622					_SSMCopy:
.9622	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9624	f0 09		beq $962f			beq 	_SSMEString 				; no more to copy
.9626	20 4f a6	jsr $a64f			jsr 	StringTempWrite 			; and write it out.
.9629	c8		iny				iny
.962a	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.962d	d0 f3		bne $9622			bne 	_SSMCopy
.962f					_SSMEString:
.962f	7a		ply				ply
.9630					_SSMExit:
.9630	60		rts				rts
.9631					_SSMNull:
.9631	a9 00		lda #$00			lda 	#0
.9633	20 11 a6	jsr $a611			jsr 	StringTempAllocate
.9636	60		rts				rts
.9637					SubstringInitial:
.9637	da		phx				phx 								; save initial stack position
.9638	08		php				php 								; save carry on stack indicating 2 parameters
.9639	20 73 96	jsr $9673			jsr 	EvaluateString 				; get a string
.963c	5a		phy				phy 								; calculate length to exponent.
.963d	a0 ff		ldy #$ff			ldy 	#$FF
.963f					_SIFindLength:
.963f	c8		iny				iny
.9640	b1 36		lda ($36),y			lda 	(zTemp0),y
.9642	d0 fb		bne $963f			bne 	_SIFindLength
.9644	98		tya				tya
.9645	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9648	7a		ply				ply
.9649	e8		inx				inx
.964a	20 3d 9e	jsr $9e3d			jsr 	CheckComma 					; comma next
.964d	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger 		; get next parameter
.9650	28		plp				plp 								; is it the last parameter ?
.9651	90 07		bcc $965a			bcc 	_SSIExit 					; if so, exit.
.9653	e8		inx				inx
.9654	20 3d 9e	jsr $9e3d			jsr 	CheckComma 					; comma next
.9657	20 ac 96	jsr $96ac			jsr 	Evaluate8BitInteger 		; get last parameter
.965a					_SSIExit:
.965a	fa		plx				plx
.965b	20 35 9e	jsr $9e35			jsr 	CheckRightBracket 			; check closing bracket
.965e	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.965f					EvaluateValue:
.965f	48		pha				pha
.9660	20 ca 8f	jsr $8fca			jsr		EvaluateExpression 			; expression
.9663	20 df 90	jsr $90df			jsr 	Dereference					; derefernce it
.9666	68		pla				pla
.9667	60		rts				rts
.9668					EvaluateNumber:
.9668	20 5f 96	jsr $965f			jsr 	EvaluateValue 				; get a value
.966b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.966e	29 10		and #$10			and 	#NSBIsString
.9670	d0 16		bne $9688			bne 	HelperTypeError
.9672	60		rts				rts
.9673					EvaluateString:
.9673	20 5f 96	jsr $965f			jsr 	EvaluateValue 				; get a value
.9676	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9679	29 10		and #$10			and 	#NSBIsString
.967b	f0 0b		beq $9688			beq 	HelperTypeError
.967d					CopyAddressToTemp0:
.967d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9680	85 36		sta $36				sta 	zTemp0
.9682	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9685	85 37		sta $37				sta 	zTemp0+1
.9687	60		rts				rts
.9688					HelperTypeError:
.9688	4c 21 a4	jmp $a421			jmp 	TypeError
.968b					EvaluateInteger:
.968b	20 68 96	jsr $9668			jsr 	EvaluateNumber
.968e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9691	d0 0a		bne $969d			bne 	HelperValueError 			; if not, it's a float.
.9693	60		rts				rts
.9694					EvaluateUnsignedInteger:
.9694	20 8b 96	jsr $968b			jsr 	EvaluateInteger 			; check integer is +ve
.9697	bd 00 06	lda $0600,x			lda 	NSStatus,x
.969a	30 01		bmi $969d			bmi 	HelperValueError
.969c	60		rts				rts
.969d					HelperValueError:
.969d	4c 26 a4	jmp $a426			jmp 	ArgumentError
.96a0					Evaluate16BitInteger:
.96a0	20 94 96	jsr $9694			jsr	 	EvaluateUnsignedInteger		; get integer
.96a3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.96a6	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96a9	d0 f2		bne $969d			bne 	HelperValueError
.96ab	60		rts				rts
.96ac					Evaluate8BitInteger:
.96ac	20 94 96	jsr $9694			jsr	 	EvaluateUnsignedInteger 	; get an integer
.96af	d0 ec		bne $969d			bne 	HelperValueError
.96b1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.96b4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96b7	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.96ba	d0 e1		bne $969d			bne 	HelperValueError
.96bc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.96bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2b7					Multiply8x8:
.a2b7	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2b8	85 36		sta $36			  	sta 	zTemp0
.a2ba	86 37		stx $37				stx 	zTemp0+1
.a2bc	a9 00		lda #$00			lda 	#0
.a2be	a2 08		ldx #$08			ldx 	#8
.a2c0					_M88Loop:
.a2c0	90 03		bcc $a2c5			bcc 	_M88NoAdd
.a2c2	18		clc				clc
.a2c3	65 37		adc $37				adc 	zTemp0+1
.a2c5					_M88NoAdd:
.a2c5	6a		ror a				ror 	a
.a2c6	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2c8	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2c9	d0 f5		bne $a2c0			bne 	_M88Loop
.a2cb	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.96c0					NSMNegate:
.96c0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96c3	49 80		eor #$80			eor 	#NSBIsNegative
.96c5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96c8	60		rts				rts
.96c9					NSMNegateMantissa:
.96c9	38		sec				sec
.96ca	a9 00		lda #$00			lda 	#0
.96cc	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.96cf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.96d2	a9 00		lda #$00			lda 	#0
.96d4	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.96d7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96da	a9 00		lda #$00			lda 	#0
.96dc	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.96df	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96e2	a9 00		lda #$00			lda 	#0
.96e4	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.96e7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96ea	60		rts				rts
.96eb					NSMShiftUpTwo:
.96eb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.96ee	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96f1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.96f4	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.96f7	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.96fa	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.96fd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9700	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9703	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9706	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9709	bd 00 06	lda $0600,x			lda 	NSStatus,x
.970c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.970f	60		rts				rts
.9710					NSMSetZeroMantissaOnly:
.9710	a9 00		lda #$00			lda 	#0
.9712	80 08		bra $971c			bra 	NSMSetMantissa
.9714					NSMSetZero:
.9714	a9 00		lda #$00			lda 	#0
.9716					NSMSetByte:
.9716	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9719	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.971c					NSMSetMantissa:
.971c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.971f	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9722	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9725	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9728	60		rts				rts
.9729					NSMShiftLeft:
.9729	18		clc				clc
.972a					NSMRotateLeft:
.972a	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.972d	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9730	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9733	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9736	60		rts				rts
.9737					NSMShiftRight:
.9737	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.973a	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.973d	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9740	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9743	60		rts				rts
.9744					NSMIsZero:
.9744	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9747	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.974a	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.974d	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9750	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a2ce					Assemble_ora:
.a2ce	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2d1	01					.byte $01
.a2d2					Assemble_and:
.a2d2	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2d5	21					.byte $21
.a2d6					Assemble_eor:
.a2d6	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2d9	41					.byte $41
.a2da					Assemble_adc:
.a2da	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2dd	61					.byte $61
.a2de					Assemble_sta:
.a2de	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2e1	81					.byte $81
.a2e2					Assemble_lda:
.a2e2	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2e5	a1					.byte $a1
.a2e6					Assemble_cmp:
.a2e6	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2e9	c1					.byte $c1
.a2ea					Assemble_sbc:
.a2ea	20 88 81	jsr $8188		jsr	AssembleGroup1
>a2ed	e1					.byte $e1
.a2ee					Assemble_asl:
.a2ee	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2f1	02					.byte $02
>a2f2	75					.byte $75
.a2f3					Assemble_rol:
.a2f3	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2f6	22					.byte $22
>a2f7	75					.byte $75
.a2f8					Assemble_lsr:
.a2f8	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a2fb	42					.byte $42
>a2fc	75					.byte $75
.a2fd					Assemble_ror:
.a2fd	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a300	62					.byte $62
>a301	75					.byte $75
.a302					Assemble_stx:
.a302	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a305	82					.byte $82
>a306	50					.byte $50
.a307					Assemble_ldx:
.a307	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a30a	a2					.byte $a2
>a30b	d0					.byte $d0
.a30c					Assemble_dec:
.a30c	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a30f	c2					.byte $c2
>a310	55					.byte $55
.a311					Assemble_inc:
.a311	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a314	e2					.byte $e2
>a315	55					.byte $55
.a316					Assemble_stz:
.a316	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a319	60					.byte $60
>a31a	44					.byte $44
.a31b					Assemble_bit:
.a31b	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a31e	20					.byte $20
>a31f	55					.byte $55
.a320					Assemble_sty:
.a320	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a323	80					.byte $80
>a324	54					.byte $54
.a325					Assemble_ldy:
.a325	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a328	a0					.byte $a0
>a329	d5					.byte $d5
.a32a					Assemble_cpy:
.a32a	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a32d	c0					.byte $c0
>a32e	d4					.byte $d4
.a32f					Assemble_cpx:
.a32f	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a332	e0					.byte $e0
>a333	d0					.byte $d0
.a334					Assemble_tsb:
.a334	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a337	00					.byte $00
>a338	50					.byte $50
.a339					Assemble_trb:
.a339	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a33c	10					.byte $10
>a33d	50					.byte $50
.a33e					Assemble_jsr:
.a33e	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a341	14					.byte $14
>a342	10					.byte $10
.a343					Assemble_jmp:
.a343	20 8f 81	jsr $818f		jsr	AssembleGroup2
>a346	40					.byte $40
>a347	10					.byte $10
.a348					Assemble_bpl:
.a348	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a34b	10					.byte $10
.a34c					Assemble_bmi:
.a34c	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a34f	30					.byte $30
.a350					Assemble_bvc:
.a350	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a353	50					.byte $50
.a354					Assemble_bvs:
.a354	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a357	70					.byte $70
.a358					Assemble_bcc:
.a358	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a35b	90					.byte $90
.a35c					Assemble_bcs:
.a35c	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a35f	b0					.byte $b0
.a360					Assemble_bne:
.a360	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a363	d0					.byte $d0
.a364					Assemble_beq:
.a364	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a367	f0					.byte $f0
.a368					Assemble_bra:
.a368	20 e0 81	jsr $81e0		jsr	AssembleGroup3
>a36b	80					.byte $80
.a36c					Assemble_brk:
.a36c	20 16 82	jsr $8216		jsr	AssembleGroup4
>a36f	00					.byte $00
.a370					Assemble_php:
.a370	20 16 82	jsr $8216		jsr	AssembleGroup4
>a373	08					.byte $08
.a374					Assemble_clc:
.a374	20 16 82	jsr $8216		jsr	AssembleGroup4
>a377	18					.byte $18
.a378					Assemble_plp:
.a378	20 16 82	jsr $8216		jsr	AssembleGroup4
>a37b	28					.byte $28
.a37c					Assemble_sec:
.a37c	20 16 82	jsr $8216		jsr	AssembleGroup4
>a37f	38					.byte $38
.a380					Assemble_rti:
.a380	20 16 82	jsr $8216		jsr	AssembleGroup4
>a383	40					.byte $40
.a384					Assemble_pha:
.a384	20 16 82	jsr $8216		jsr	AssembleGroup4
>a387	48					.byte $48
.a388					Assemble_cli:
.a388	20 16 82	jsr $8216		jsr	AssembleGroup4
>a38b	58					.byte $58
.a38c					Assemble_phy:
.a38c	20 16 82	jsr $8216		jsr	AssembleGroup4
>a38f	5a					.byte $5a
.a390					Assemble_rts:
.a390	20 16 82	jsr $8216		jsr	AssembleGroup4
>a393	60					.byte $60
.a394					Assemble_pla:
.a394	20 16 82	jsr $8216		jsr	AssembleGroup4
>a397	68					.byte $68
.a398					Assemble_sei:
.a398	20 16 82	jsr $8216		jsr	AssembleGroup4
>a39b	78					.byte $78
.a39c					Assemble_ply:
.a39c	20 16 82	jsr $8216		jsr	AssembleGroup4
>a39f	7a					.byte $7a
.a3a0					Assemble_dey:
.a3a0	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3a3	88					.byte $88
.a3a4					Assemble_txa:
.a3a4	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3a7	8a					.byte $8a
.a3a8					Assemble_tya:
.a3a8	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3ab	98					.byte $98
.a3ac					Assemble_txs:
.a3ac	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3af	9a					.byte $9a
.a3b0					Assemble_tay:
.a3b0	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3b3	a8					.byte $a8
.a3b4					Assemble_tax:
.a3b4	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3b7	aa					.byte $aa
.a3b8					Assemble_clv:
.a3b8	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3bb	b8					.byte $b8
.a3bc					Assemble_tsx:
.a3bc	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3bf	ba					.byte $ba
.a3c0					Assemble_iny:
.a3c0	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3c3	c8					.byte $c8
.a3c4					Assemble_dex:
.a3c4	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3c7	ca					.byte $ca
.a3c8					Assemble_cld:
.a3c8	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3cb	d8					.byte $d8
.a3cc					Assemble_phx:
.a3cc	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3cf	da					.byte $da
.a3d0					Assemble_inx:
.a3d0	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3d3	e8					.byte $e8
.a3d4					Assemble_nop:
.a3d4	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3d7	ea					.byte $ea
.a3d8					Assemble_sed:
.a3d8	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3db	f8					.byte $f8
.a3dc					Assemble_plx:
.a3dc	20 16 82	jsr $8216		jsr	AssembleGroup4
>a3df	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a3e0					DecimalScalarTable:
>a3e0	66 66 66 66				.dword $66666666 ; 0.1
>a3e4	de					.byte $de
>a3e5	1f 85 eb 51				.dword $51eb851f ; 0.01
>a3e9	db					.byte $db
>a3ea	4c 37 89 41				.dword $4189374c ; 0.001
>a3ee	d8					.byte $d8
>a3ef	ac 8b db 68				.dword $68db8bac ; 0.0001
>a3f3	d4					.byte $d4
>a3f4	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a3f8	d1					.byte $d1
>a3f9	83 de 1b 43				.dword $431bde83 ; 1e-06
>a3fd	ce					.byte $ce
>a3fe	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a402	ca					.byte $ca
>a403	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a407	c7					.byte $c7
>a408	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a40c	c4					.byte $c4
>a40d	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a411	c0					.byte $c0
>a412	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a416	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a417					SyntaxError:
.a417	a9 02		lda #$02		lda	#2
.a419	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.a41c					RangeError:
.a41c	a9 04		lda #$04		lda	#4
.a41e	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.a421					TypeError:
.a421	a9 05		lda #$05		lda	#5
.a423	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.a426					ArgumentError:
.a426	a9 07		lda #$07		lda	#7
.a428	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.a42b					NotDoneError:
.a42b	a9 0c		lda #$0c		lda	#12
.a42d	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.a430					ErrorText:
>a430	42 72 65 61 6b 00			.text	"Break",0
>a436	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a43e	72 72 6f 72 00
>a443	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a44b	20 62 79 20 7a 65 72 6f 00
>a454	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a45c	61 6e 67 65 00
>a461	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a469	6d 61 74 63 68 00
>a46f	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a477	65 6d 6f 72 79 00
>a47d	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a485	61 72 67 75 6d 65 6e 74 00
>a48e	53 74 6f 70 00				.text	"Stop",0
>a493	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a49b	6f 6f 20 6c 6f 6e 67 00
>a4a3	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a4ab	6e 20 66 61 69 6c 65 64 00
>a4b4	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a4bc	61 74 61 00
>a4c0	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a4c8	65 6e 74 65 64 00
>a4ce	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a4d6	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a4e2	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a4ea	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a4f7	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a4ff	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a50c	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a514	68 6f 75 74 20 57 68 69 6c 65 00
>a51f	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a527	68 6f 75 74 20 46 6f 72 00
>a530	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a538	61 63 6b 20 66 75 6c 6c 00
>a541	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a549	75 63 74 75 72 65 00
>a550	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a558	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a565	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a56d	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a57b	41 72 72 61 79 20 73 69			.text	"Array size",0
>a583	7a 65 00
>a586	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a58e	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9751					StackOpen:
.9751	48		pha				pha 								; save frame byte
.9752	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9754	0a		asl a				asl 	a 							; claim twice this for storage
.9755	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9757	38		sec				sec 								; so basically subtracting from
.9758	65 34		adc $34				adc 	basicStack 	 				; basicStack
.975a	85 34		sta $34				sta 	basicStack
.975c	b0 08		bcs $9766			bcs 	_SONoBorrow
.975e	c6 35		dec $35				dec 	basicStack+1
.9760	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9762	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9764	90 04		bcc $976a			bcc 	_SOMemory
.9766					_SONoBorrow:
.9766	68		pla				pla 								; get marker back and write at TOS
.9767	92 34		sta ($34)			sta 	(basicStack)
.9769	60		rts				rts
.976a					_SOMemory:
.976a							ERR_STACK
.976a					StackClose:
.976a	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.976c	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.976e	0a		asl a				asl 	a 							; claim twice this.
.976f	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9771	85 34		sta $34				sta 	basicStack
.9773	90 02		bcc $9777			bcc 	_SCExit
.9775	e6 35		inc $35				inc 	basicStack+1
.9777					_SCExit:
.9777	60		rts				rts
.9778					StackCheckFrame:
.9778	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.977a	29 f0		and #$f0			and 	#$F0 						; check type bits
.977c	d0 01		bne $977f			bne 	_SCFError 					; different, we have structures mixed up
.977e	60		rts				rts
.977f					_SCFError:
.977f	8a		txa				txa 								; report error X
.9780	4c c1 8b	jmp $8bc1			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9783					STKSaveCodePosition:
.9783	5a		phy				phy
.9784	98		tya				tya 								; save Y
.9785	a0 05		ldy #$05			ldy 	#5
.9787	91 34		sta ($34),y			sta 	(basicStack),y
.9789	88		dey				dey 								; save Code Pointer
.978a					_STKSaveLoop:
.978a	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.978d	91 34		sta ($34),y			sta 	(basicStack),y
.978f	88		dey				dey
.9790	d0 f8		bne $978a			bne 	_STKSaveLoop
.9792	7a		ply				ply
.9793	60		rts				rts
.9794					STKLoadCodePosition:
.9794	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9796					_STKLoadLoop:
.9796	b1 34		lda ($34),y			lda 	(basicStack),y
.9798	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.979b	c8		iny				iny
.979c	c0 05		cpy #$05			cpy 	#5
.979e	d0 f6		bne $9796			bne 	_STKLoadLoop
.97a0	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.97a2	a8		tay				tay
.97a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.97a4					StackReset:
.97a4	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.97a6	85 34		sta $34				sta 	0+basicStack
.97a8	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.97aa	85 35		sta $35				sta 	1+basicStack
.97ac	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.97ae	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.97b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a596					StringConcrete:
.a596	5a		phy				phy 								; save position on stack
.a597	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a59a	85 38		sta $38				sta 	zTemp1
.a59c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a59f	85 39		sta $39				sta 	zTemp1+1
.a5a1	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a5a3					_SALength:
.a5a3	c8		iny				iny
.a5a4	b1 38		lda ($38),y			lda 	(zTemp1),y
.a5a6	d0 fb		bne $a5a3			bne 	_SALength
.a5a8	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a5aa	b0 3f		bcs $a5eb			bcs 	_SALengthError
.a5ac	98		tya				tya 				 				; length of the new string
.a5ad	18		clc				clc
.a5ae	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a5b0	90 02		bcc $a5b4			bcc 	_SAHaveLength
.a5b2	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a5b4					_SAHaveLength:
.a5b4	48		pha				pha 								; save length.
.a5b5	38		sec				sec
.a5b6	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a5b8	6d 0e 07	adc $070e			adc 	StringMemory
.a5bb	8d 0e 07	sta $070e			sta 	StringMemory
.a5be	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a5c0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a5c3	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a5c5	6d 0f 07	adc $070f			adc 	StringMemory+1
.a5c8	8d 0f 07	sta $070f			sta 	StringMemory+1
.a5cb	85 3b		sta $3b				sta 	zTemp2+1
.a5cd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a5d0	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a5d1	38		sec				sec
.a5d2	e9 03		sbc #$03			sbc 	#3
.a5d4	92 3a		sta ($3a)			sta 	(zTemp2)
.a5d6	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a5d8	a0 01		ldy #$01			ldy 	#1
.a5da	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a5dc					_SACopyNewString:
.a5dc	a0 00		ldy #$00			ldy 	#0
.a5de					_SACopyNSLoop:
.a5de	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a5e0	c8		iny				iny 								; write two on in string storage
.a5e1	c8		iny				iny
.a5e2	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a5e4	88		dey				dey 								; this makes it one one.
.a5e5	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a5e7	d0 f5		bne $a5de			bne 	_SACopyNSLoop
.a5e9	7a		ply				ply
.a5ea	60		rts				rts
.a5eb					_SALengthError:
.a5eb	a9 09		lda #$09		lda	#9
.a5ed	4c c1 8b	jmp $8bc1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a5f0					StringSystemInitialise:
.a5f0	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a5f2	8d 0e 07	sta $070e			sta 	0+StringMemory
.a5f5	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a5f7	8d 0f 07	sta $070f			sta 	1+StringMemory
.a5fa	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a5fd	60		rts				rts
.a5fe					StringSpaceInitialise:
.a5fe	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a600	8d 10 07	sta $0710			sta 	StringInitialised
.a603	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a606	8d 11 07	sta $0711			sta 	StringTempPointer
.a609	ad 0f 07	lda $070f			lda 	StringMemory+1
.a60c	3a		dec a				dec 	a
.a60d	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a610	60		rts				rts
.a611					StringTempAllocate:
.a611	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a613	b0 35		bcs $a64a			bcs 	_STALength
.a615	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a618	30 05		bmi $a61f			bmi 	_STAAllocate
.a61a	48		pha				pha 								; save value to subtract.
.a61b	20 fe a5	jsr $a5fe			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a61e	68		pla				pla 								; restore it
.a61f					_STAAllocate:
.a61f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a621	18		clc				clc  								; deliberate allows one more
.a622	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a625	8d 11 07	sta $0711			sta 	StringTempPointer
.a628	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a62b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a62d	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a630	69 ff		adc #$ff			adc 	#$FF
.a632	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a635	85 3d		sta $3d				sta 	zsTemp+1
.a637	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a63a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a63d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a640	a9 10		lda #$10			lda 	#NSTString
.a642	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a645	a9 00		lda #$00			lda 	#0 							; clear the target string
.a647	92 3c		sta ($3c)			sta 	(zsTemp)
.a649	60		rts				rts
.a64a					_STALength:
.a64a	a9 09		lda #$09		lda	#9
.a64c	4c c1 8b	jmp $8bc1		jmp	ErrorHandler
.a64f					StringTempWrite:
.a64f	48		pha				pha
.a650	92 3c		sta ($3c)			sta 	(zsTemp)
.a652	e6 3c		inc $3c				inc 	zsTemp
.a654	d0 02		bne $a658			bne 	_STWNoCarry
.a656	e6 3d		inc $3d				inc 	zsTemp+1
.a658					_STWNoCarry:
.a658	a9 00		lda #$00			lda 	#0
.a65a	92 3c		sta ($3c)			sta 	(zsTemp)
.a65c	68		pla				pla
.a65d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.97b1					BackloadProgram:
.97b1	a2 ff		ldx #$ff			ldx 	#$FF
.97b3	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.97b6	20 e0 97	jsr $97e0			jsr 	BLReadByte
.97b9	30 1e		bmi $97d9			bmi 	_BPExit
.97bb					_BPCopy:
.97bb	e8		inx				inx  								; copy byte in
.97bc	9d 24 08	sta $0824,x			sta 	lineBuffer,x
.97bf	9e 25 08	stz $0825,x			stz 	lineBuffer+1,x
.97c2	20 e0 97	jsr $97e0			jsr 	BLReadByte 					; read next byte
.97c5	30 0a		bmi $97d1			bmi 	_BPEndLine 					; -ve = EOL
.97c7	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.97c9	d0 02		bne $97cd			bne 	_BPNotTab
.97cb	a9 20		lda #$20			lda 	#' '
.97cd					_BPNotTab:
.97cd	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.97cf	b0 ea		bcs $97bb			bcs 	_BPCopy
.97d1					_BPEndLine:
.97d1	20 f4 9a	jsr $9af4			jsr 	TokeniseLine 				; tokenise the line.
.97d4	20 80 9d	jsr $9d80			jsr 	MemoryAppend 				; append to current program
.97d7	80 d8		bra $97b1			bra 	BackloadProgram
.97d9					_BPExit:
.97d9	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.97dc	20 61 84	jsr $8461			jsr 	ClearCommand 				; clear variables etc.
.97df	60		rts				rts
.97e0					BLReadByte:
.97e0					_BLLoad:
.97e0	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.97e3	ee e1 97	inc $97e1			inc 	_BLLoad+1
.97e6	d0 03		bne $97eb			bne 	_BLNoCarry
.97e8	ee e2 97	inc $97e2			inc 	_BLLoad+2
.97eb					_BLNoCarry:
.97eb	c9 00		cmp #$00			cmp 	#0
.97ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.97ee					TokeniseSearchTable:
.97ee	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.97f0	85 36		sta $36				sta 	zTemp0
.97f2	a0 00		ldy #$00			ldy 	#0
.97f4	a9 80		lda #$80			lda 	#$80 						; token #
.97f6	85 38		sta $38				sta 	zTemp1
.97f8					_TSTLoop:
.97f8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.97fa	30 49		bmi $9845			bmi 	_TSTFail 					; -ve = end of table
.97fc	f0 2e		beq $982c			beq 	_TSTNext 					; zero, check next it's a dummy
.97fe	c8		iny				iny 								; get the hash
.97ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.9801	88		dey				dey
.9802	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9805	d0 25		bne $982c			bne 	_TSTNext
.9807	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.980a	38		sec				sec
.980b	ed 00 07	sbc $0700			sbc 	identStart
.980e	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9810	d0 1a		bne $982c			bne 	_TSTNext
.9812	5a		phy				phy 								; save Y , we might fail
.9813	c8		iny				iny 								; point to text
.9814	c8		iny				iny
.9815	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9818					_TSTCompareName:
.9818	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; compare text.
.981b	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.981d	d0 0c		bne $982b			bne 	_TSTNextPullY 				; fail, pullY and do next
.981f	e8		inx				inx
.9820	c8		iny				iny
.9821	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9824	d0 f2		bne $9818			bne 	_TSTCompareName
.9826	7a		ply				ply 								; throw Y
.9827	a5 38		lda $38				lda 	zTemp1 						; get token #
.9829	38		sec				sec 								; return with CS = passed.
.982a	60		rts				rts
.982b					_TSTNextPullY:
.982b	7a		ply				ply 								; restore current, fall through.
.982c					_TSTNext:
.982c	e6 38		inc $38				inc 	zTemp1 						; token counter
.982e	98		tya				tya
.982f	18		clc				clc
.9830	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9832	1a		inc a				inc 	a 							; +1
.9833	1a		inc a				inc 	a 							; +2
.9834	a8		tay				tay
.9835	10 c1		bpl $97f8			bpl 	_TSTLoop 					; if Y < $80 loop back
.9837	98		tya				tya 								; add Y to zTemp0 and reset Y
.9838	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.983a	18		clc				clc  								; but have tables > 255 bytes
.983b	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.983d	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.983f	90 b7		bcc $97f8			bcc 	_TSTLoop
.9841	e6 37		inc $37				inc 	zTemp0+1
.9843	80 b3		bra $97f8			bra 	_TSTLoop
.9845					_TSTFail:
.9845	18		clc				clc
.9846	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9847					KeywordSet0:
>9847	00 65					.text	0,$65,""               ; $80 !0:EOF
>9849	00 58					.text	0,$58,""               ; $81 !1:SH1
>984b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>984d	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9853	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>985b	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9861	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9868	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>986f	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9876	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>987c	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9884	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>988c	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9892	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9899	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>989f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>98a7	28
>98a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>98ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>98b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>98ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>98c1	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>98c7	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>98cd	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>98d2	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>98d6	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>98dc	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>98e4	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>98eb	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>98f2	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>98fa	43
>98fb	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9901	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9907	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>990e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9914	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>991a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>991f	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9925	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>992a	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9932	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9938	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>993f	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9945	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>994a	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9951	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9957	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>995c	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9964	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9968	ff					.text	$FF
.9969					KeywordSet1:
>9969	00 65					.text	0,$65,""               ; $80 !0:EOF
>996b	00 58					.text	0,$58,""               ; $81 !1:SH1
>996d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>996f	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9977	4c 45
>9979	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9981	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9988	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>998d	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9993	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9998	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>99a0	45
>99a1	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>99a6	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>99ac	ff					.text	$FF
.99ad					KeywordSet2:
>99ad	00 65					.text	0,$65,""               ; $80 !0:EOF
>99af	00 58					.text	0,$58,""               ; $81 !1:SH1
>99b1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99b3	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>99b8	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>99bd	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>99c2	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>99c7	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>99cc	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>99d1	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>99d6	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>99db	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>99e0	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>99e5	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>99ea	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>99ef	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>99f4	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>99f9	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>99fe	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9a03	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9a08	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9a0d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9a12	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9a17	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9a1c	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9a21	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9a26	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9a2b	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9a30	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9a35	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9a3a	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9a3f	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9a44	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9a49	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9a4e	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9a53	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9a58	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9a5d	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9a62	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9a67	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9a6c	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9a71	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9a76	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9a7b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9a80	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9a85	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9a8a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9a8f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9a94	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9a99	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9a9e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9aa3	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9aa8	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9aad	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9ab2	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9ab7	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9abc	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9ac1	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9ac6	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9acb	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9ad0	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9ad5	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9ada	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9adf	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9ae4	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9ae9	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9aee	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9af3	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9af4					TokeniseLine:
.9af4	20 7c 9c	jsr $9c7c			jsr 	FixLineBufferCase 			; fix line case
.9af7	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9af9	8d 24 07	sta $0724			sta 	tokenOffset
.9afc	9c 25 07	stz $0725			stz 	tokenLineNumber
.9aff	9c 26 07	stz $0726			stz 	tokenLineNumber+1
.9b02	a2 ff		ldx #$ff			ldx 	#$FF
.9b04					_TKFindFirst:
.9b04	e8		inx				inx
.9b05	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9b08	f0 79		beq $9b83			beq 	_TKExit
.9b0a	c9 20		cmp #$20			cmp 	#' '
.9b0c	90 f6		bcc $9b04			bcc 	_TKFindFirst
.9b0e	c9 30		cmp #$30			cmp 	#'0'
.9b10	90 07		bcc $9b19			bcc 	_TKNoLineNumber
.9b12	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b14	b0 03		bcs $9b19			bcs 	_TKNoLineNumber
.9b16	20 a6 9c	jsr $9ca6			jsr 	TokeniseExtractLineNumber
.9b19					_TKNoLineNumber:
.9b19					_TKTokeniseLoop:
.9b19	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9b1c	f0 65		beq $9b83			beq 	_TKExit
.9b1e	e8		inx				inx
.9b1f	c9 20		cmp #$20			cmp 	#' '
.9b21	f0 f6		beq $9b19			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9b23	ca		dex				dex 								; undo last get, A contains character, X is position.
.9b24	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9b26	f0 61		beq $9b89			beq 	_TKTokeniseIdentifier
.9b28	c9 41		cmp #$41			cmp 	#'A'
.9b2a	90 04		bcc $9b30			bcc 	_TKTokenisePunctuation
.9b2c	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9b2e	90 59		bcc $9b89			bcc 	_TKTokeniseIdentifier
.9b30					_TKTokenisePunctuation:
.9b30	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9b32	f0 27		beq $9b5b			beq 	_TKString
.9b34	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9b36	f0 28		beq $9b60			beq 	_TKHexConstant
.9b38	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9b3a	f0 29		beq $9b65			beq 	_TKCheckDouble
.9b3c	c9 3e		cmp #$3e			cmp 	#'>'
.9b3e	f0 25		beq $9b65			beq 	_TKCheckDouble
.9b40					_TKStandardPunctuation:
.9b40	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get it back.
.9b43	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9b45	90 0e		bcc $9b55			bcc 	_TKNoShift
.9b47	48		pha				pha 								; save
.9b48	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9b4a	85 36		sta $36				sta 	zTemp0
.9b4c	68		pla				pla
.9b4d	29 20		and #$20			and 	#32 						; bit 5
.9b4f	4a		lsr a				lsr 	a 							; shift into bit 3
.9b50	4a		lsr a				lsr 	a
.9b51	05 36		ora $36				ora 	zTemp0
.9b53	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9b55					_TKNoShift:
.9b55	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte 			; write the punctuation character
.9b58	e8		inx				inx 								; consume the character
.9b59	80 be		bra $9b19			bra 	_TKTokeniseLoop 			; and loop round again.
.9b5b					_TKString:
.9b5b	20 0b 9c	jsr $9c0b			jsr 	TokeniseString
.9b5e	80 b9		bra $9b19			bra 	_TKTokeniseLoop
.9b60					_TKHexConstant:
.9b60	20 46 9c	jsr $9c46			jsr 	TokeniseHexConstant
.9b63	80 b4		bra $9b19			bra 	_TKTokeniseLoop
.9b65					_TKCheckDouble:
.9b65	bd 25 08	lda $0825,x			lda 	lineBuffer+1,x 				; get next character
.9b68	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9b6a	90 d4		bcc $9b40			bcc 	_TKStandardPunctuation
.9b6c	c9 3f		cmp #$3f			cmp 	#'>'+1
.9b6e	b0 d0		bcs $9b40			bcs 	_TKStandardPunctuation
.9b70	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9b73	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9b75	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9b76	7d 25 08	adc $0825,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9b79	38		sec				sec
.9b7a	e9 3c		sbc #$3c			sbc 	#'<'
.9b7c	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9b7f	e8		inx				inx 								; consume both
.9b80	e8		inx				inx
.9b81	80 96		bra $9b19			bra 	_TKTokeniseLoop
.9b83	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9b85	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9b88	60		rts				rts
.9b89					_TKTokeniseIdentifier:
.9b89	8e 00 07	stx $0700			stx 	identStart 					; save start
.9b8c	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9b8f					_TKCheckLoop:
.9b8f	e8		inx				inx 								; look at next, we know first is identifier.
.9b90	bd 24 08	lda $0824,x			lda  	lineBuffer,x
.9b93	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9b95	f0 f8		beq $9b8f			beq 	_TKCheckLoop
.9b97	c9 30		cmp #$30			cmp	 	#"0"
.9b99	90 0c		bcc $9ba7			bcc 	_TKEndIdentifier
.9b9b	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b9d	90 f0		bcc $9b8f			bcc 	_TKCheckLoop
.9b9f	c9 41		cmp #$41			cmp	 	#"A"
.9ba1	90 04		bcc $9ba7			bcc 	_TKEndIdentifier
.9ba3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9ba5	90 e8		bcc $9b8f			bcc 	_TKCheckLoop
.9ba7					_TKEndIdentifier:
.9ba7	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9baa	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9bac	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9bae	f0 06		beq $9bb6			beq 	_TKHasTypeCharacter
.9bb0	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9bb2	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9bb4	d0 07		bne $9bbd			bne 	_TKNoTypeCharacter
.9bb6					_TKHasTypeCharacter:
.9bb6	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9bb9	e8		inx				inx 								; read next
.9bba	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9bbd					_TKNoTypeCharacter:
.9bbd	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9bbf	d0 09		bne $9bca			bne 	_TKNoArray
.9bc1	e8		inx				inx 								; skip the (
.9bc2	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9bc5	09 04		ora #$04			ora 	#$04
.9bc7	8d 04 07	sta $0704			sta 	identTypeByte
.9bca					_TKNoArray:
.9bca	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9bcd	20 67 9c	jsr $9c67			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9bd0	a0 98		ldy #$98			ldy 	#(KeywordSet0) >> 8
.9bd2	a9 47		lda #$47			lda 	#(KeywordSet0) & $FF
.9bd4	20 ee 97	jsr $97ee			jsr 	TokeniseSearchTable
.9bd7	a2 00		ldx #$00			ldx 	#0
.9bd9	b0 1f		bcs $9bfa			bcs 	_TKFoundToken
.9bdb	a0 99		ldy #$99			ldy 	#(KeywordSet1) >> 8
.9bdd	a9 69		lda #$69			lda 	#(KeywordSet1) & $FF
.9bdf	20 ee 97	jsr $97ee			jsr 	TokeniseSearchTable
.9be2	a2 81		ldx #$81			ldx 	#$81
.9be4	b0 14		bcs $9bfa			bcs 	_TKFoundToken
.9be6	a0 99		ldy #$99			ldy 	#(KeywordSet2) >> 8
.9be8	a9 ad		lda #$ad			lda 	#(KeywordSet2) & $FF
.9bea	20 ee 97	jsr $97ee			jsr 	TokeniseSearchTable
.9bed	a2 82		ldx #$82			ldx 	#$82
.9bef	b0 09		bcs $9bfa			bcs 	_TKFoundToken
.9bf1	20 f7 9c	jsr $9cf7			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9bf4	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9bf7	4c 19 9b	jmp $9b19			jmp 	_TKTokeniseLoop 			; and go round again.
.9bfa					_TKFoundToken:
.9bfa	48		pha				pha 								; save token
.9bfb	8a		txa				txa 								; shift in X, is there one ?
.9bfc	f0 03		beq $9c01			beq 	_TKNoTShift
.9bfe	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte 			; if so, write it out
.9c01					_TKNoTShift:
.9c01	68		pla				pla 								; restore and write token
.9c02	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9c05	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9c08	4c 19 9b	jmp $9b19			jmp 	_TKTokeniseLoop 			; and go round again.
.9c0b					TokeniseString:
.9c0b	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9c0d	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9c10	e8		inx				inx									; start of quoted string.
.9c11	da		phx				phx 								; push start of string on top
.9c12	ca		dex				dex
.9c13					_TSFindEnd:
.9c13	e8		inx				inx
.9c14	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character
.9c17	f0 04		beq $9c1d			beq 	_TSEndOfString
.9c19	c9 22		cmp #$22			cmp 	#'"'
.9c1b	d0 f6		bne $9c13			bne 	_TSFindEnd
.9c1d					_TSEndOfString:
.9c1d	7a		ply				ply  								; so now Y is first character, X is character after end.
.9c1e	48		pha				pha 								; save terminating character
.9c1f	20 27 9c	jsr $9c27			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9c22	68		pla				pla 								; terminating character
.9c23	f0 01		beq $9c26			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9c25	e8		inx				inx
.9c26					_TSNotQuote:
.9c26	60		rts				rts
.9c27					TOWriteBlockXY:
.9c27	86 36		stx $36				stx 	zTemp0 						; write end character
.9c29	98		tya				tya
.9c2a	49 ff		eor #$ff			eor 	#$FF
.9c2c	38		sec				sec
.9c2d	65 36		adc $36				adc 	zTemp0
.9c2f	1a		inc a				inc 	a 							; one extra for NULL
.9c30	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9c33					_TOBlockLoop:
.9c33	c4 36		cpy $36				cpy 	zTemp0
.9c35	f0 09		beq $9c40			beq 	_TOBlockExit
.9c37	b9 24 08	lda $0824,y			lda 	lineBuffer,y
.9c3a	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9c3d	c8		iny				iny
.9c3e	80 f3		bra $9c33			bra 	_TOBlockLoop
.9c40					_TOBlockExit:
.9c40	a9 00		lda #$00			lda 	#0
.9c42	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9c45	60		rts				rts
.9c46					TokeniseHexConstant:
.9c46	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9c48	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9c4b	e8		inx				inx									; start of quoted string.
.9c4c	da		phx				phx 								; push start of constant on top
.9c4d	ca		dex				dex
.9c4e					_THFindLoop:
.9c4e	e8		inx				inx
.9c4f	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9c52	c9 30		cmp #$30			cmp 	#"0"
.9c54	90 0c		bcc $9c62			bcc 	_THFoundEnd
.9c56	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c58	90 f4		bcc $9c4e			bcc 	_THFindLoop
.9c5a	c9 41		cmp #$41			cmp 	#"A"
.9c5c	90 04		bcc $9c62			bcc 	_THFoundEnd
.9c5e	c9 47		cmp #$47			cmp 	#"F"+1
.9c60	90 ec		bcc $9c4e			bcc 	_THFindLoop
.9c62					_THFoundEnd:
.9c62	7a		ply				ply 								; restore start
.9c63	20 27 9c	jsr $9c27			jsr 	TOWriteBlockXY 				; output the block
.9c66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9c67					TokeniseCalculateHash:
.9c67	da		phx				phx
.9c68	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9c6b	a9 00		lda #$00			lda 	#0
.9c6d					_TCHLoop:
.9c6d	18		clc				clc
.9c6e	7d 24 08	adc $0824,x			adc 	lineBuffer,x
.9c71	e8		inx				inx
.9c72	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9c75	d0 f6		bne $9c6d			bne 	_TCHLoop
.9c77	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9c7a	fa		plx				plx
.9c7b	60		rts				rts
.9c7c					FixLineBufferCase:
.9c7c	a2 00		ldx #$00			ldx 	#0
.9c7e					_FLBCLoop:
.9c7e	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next character
.9c81	f0 22		beq $9ca5			beq 	_FLBCExit 					; end of string.
.9c83	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9c85	f0 11		beq $9c98			beq 	_FLBCInQuotes
.9c87	e8		inx				inx
.9c88	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9c8a	90 f2		bcc $9c7e			bcc 	_FLBCLoop
.9c8c	c9 7b		cmp #$7b			cmp 	#'z'+1
.9c8e	b0 ee		bcs $9c7e			bcs 	_FLBCLoop
.9c90	38		sec				sec 								; make U/C
.9c91	e9 20		sbc #$20			sbc 	#32
.9c93	9d 23 08	sta $0823,x			sta	 	lineBuffer-1,x 				; write back
.9c96	80 e6		bra $9c7e			bra 	_FLBCLoop
.9c98					_FLBCInQuotes:
.9c98	e8		inx				inx 								; advance
.9c99	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next
.9c9c	f0 07		beq $9ca5			beq 	_FLBCExit 					; exit on EOS
.9c9e	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9ca0	d0 f6		bne $9c98			bne 	_FLBCInQuotes
.9ca2	e8		inx				inx 								; skip over it
.9ca3	80 d9		bra $9c7e			bra 	_FLBCLoop
.9ca5					_FLBCExit:
.9ca5	60		rts				rts
.9ca6					TokeniseExtractLineNumber:
.9ca6	ad 26 07	lda $0726			lda 	tokenLineNumber+1 			; push current value on stack
.9ca9	48		pha				pha
.9caa	ad 25 07	lda $0725			lda 	tokenLineNumber
.9cad	48		pha				pha
.9cae	20 e4 9c	jsr $9ce4			jsr 	_TELNTimes2 				; line # x 4
.9cb1	20 e4 9c	jsr $9ce4			jsr 	_TELNTimes2 				; line # x 2
.9cb4	18		clc				clc 								; add stacked value
.9cb5	68		pla				pla
.9cb6	6d 25 07	adc $0725			adc 	tokenLineNumber
.9cb9	8d 25 07	sta $0725			sta 	tokenLineNumber
.9cbc	68		pla				pla
.9cbd	6d 26 07	adc $0726			adc 	tokenLineNumber+1
.9cc0	8d 26 07	sta $0726			sta 	tokenLineNumber+1 			; line # x 5
.9cc3	20 e4 9c	jsr $9ce4			jsr 	_TELNTimes2 				; line # x 10
.9cc6	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get and consume character
.9cc9	e8		inx				inx
.9cca	29 0f		and #$0f			and 	#15 						; add to line #
.9ccc	18		clc				clc
.9ccd	6d 25 07	adc $0725			adc 	tokenLineNumber
.9cd0	8d 25 07	sta $0725			sta 	tokenLineNumber
.9cd3	90 03		bcc $9cd8			bcc 	_TLENNoCarry
.9cd5	ee 26 07	inc $0726			inc 	tokenLineNumber+1
.9cd8					_TLENNoCarry:
.9cd8	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; more digits ?
.9cdb	c9 30		cmp #$30			cmp 	#'0'
.9cdd	90 04		bcc $9ce3			bcc 	_TLENExit
.9cdf	c9 3a		cmp #$3a			cmp 	#'9'+1
.9ce1	90 c3		bcc $9ca6			bcc 	TokeniseExtractLineNumber
.9ce3					_TLENExit:
.9ce3	60		rts				rts
.9ce4					_TELNTimes2:
.9ce4	0e 25 07	asl $0725			asl 	tokenLineNumber
.9ce7	2e 26 07	rol $0726			rol 	tokenLineNumber+1
.9cea	60		rts				rts
.9ceb					TokeniseWriteByte:
.9ceb	da		phx				phx
.9cec	ae 24 07	ldx $0724			ldx 	tokenOffset 				; next slot to write to
.9cef	9d 24 07	sta $0724,x			sta 	tokenOffset,x 				; write byte out
.9cf2	ee 24 07	inc $0724			inc 	tokenOffset 				; advance slot.
.9cf5	fa		plx				plx
.9cf6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9cf7					CheckCreateVariableRecord:
.9cf7	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9cf9	85 36		sta $36				sta 	0+zTemp0
.9cfb	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9cfd	85 37		sta $37				sta 	1+zTemp0
.9cff					_CCVSearch:
.9cff	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9d01	f0 2c		beq $9d2f			beq 	_CCVFail
.9d03	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9d05	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9d07	cd 03 07	cmp $0703			cmp 	identHash
.9d0a	d0 16		bne $9d22			bne 	_CCVNext
.9d0c	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9d0e	ae 00 07	ldx $0700			ldx 	identStart
.9d11					_CCVCompare:
.9d11	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9d14	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9d16	e8		inx				inx 								; advance pointers
.9d17	c8		iny				iny
.9d18	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9d19	d0 07		bne $9d22			bne 	_CCVNext  					; didn't match go to next.
.9d1b	90 f4		bcc $9d11			bcc 	_CCVCompare 				; not finished yet.
.9d1d	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9d20	f0 41		beq $9d63			beq 	_CCVFound 					; yes, we were successful
.9d22					_CCVNext:
.9d22	18		clc				clc
.9d23	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9d25	65 36		adc $36				adc 	zTemp0
.9d27	85 36		sta $36				sta 	zTemp0
.9d29	90 d4		bcc $9cff			bcc 	_CCVSearch
.9d2b	e6 37		inc $37				inc 	zTemp0+1
.9d2d	80 d0		bra $9cff			bra 	_CCVSearch
.9d2f					_CCVFail:
.9d2f	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9d31	ad 03 07	lda $0703			lda 	identHash
.9d34	91 36		sta ($36),y			sta 	(zTemp0),y
.9d36	c8		iny				iny 								; offset 2 is the type byte
.9d37	ad 04 07	lda $0704			lda 	identTypeByte
.9d3a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d3c	c8		iny				iny
.9d3d					_CCVData:
.9d3d	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9d3f	91 36		sta ($36),y			sta 	(zTemp0),y
.9d41	c8		iny				iny
.9d42	c0 08		cpy #$08			cpy 	#8
.9d44	90 f7		bcc $9d3d			bcc 	_CCVData
.9d46	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9d49					_CCVCopyName:
.9d49	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9d4c	91 36		sta ($36),y			sta 	(zTemp0),y
.9d4e	e8		inx				inx
.9d4f	c8		iny				iny
.9d50	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9d53	d0 f4		bne $9d49			bne 	_CCVCopyName
.9d55	98		tya				tya 								; patch offset
.9d56	92 36		sta ($36)			sta 	(zTemp0)
.9d58	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9d5a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d5c	88		dey				dey
.9d5d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9d5f	09 80		ora #$80			ora 	#$80
.9d61	91 36		sta ($36),y			sta 	(zTemp0),y
.9d63					_CCVFound:
.9d63	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9d65	38		sec				sec
.9d66	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9d68	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9d6a	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9d6d	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9d6f	20 eb 9c	jsr $9ceb			jsr 	TokeniseWriteByte
.9d72	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a65e					MemoryPeek:
.a65e	b2 36		lda ($36)			lda 	(zTemp0)
.a660	60		rts				rts
.a661					MemoryPoke:
.a661	92 36		sta ($36)			sta 	(zTemp0)
.a663	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a664					EXTPrintCharacter:
.a664	48		pha				pha
.a665	da		phx				phx
.a666	5a		phy				phy
.a667	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a66a	7a		ply				ply
.a66b	fa		plx				plx
.a66c	68		pla				pla
.a66d	60		rts				rts
.a66e					EXTInputSingleCharacter:
.a66e	da		phx				phx
.a66f	5a		phy				phy
.a670					_EISCWait:
.a670	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a673	c9 00		cmp #$00			cmp 	#0
.a675	f0 f9		beq $a670			beq 	_EISCWait
.a677	7a		ply				ply
.a678	fa		plx				plx
.a679	60		rts				rts
.a67a					EXTInputLine:
.a67a	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a67c					_ILLoop:
.a67c	da		phx				phx 								; read character in
.a67d	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a680	fa		plx				plx
.a681	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a683	f0 12		beq $a697			beq 	_ILBackspace
.a685	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a687	f0 15		beq $a69e			beq 	_ILExit
.a689	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a68b	90 ef		bcc $a67c			bcc 	_ILLoop
.a68d	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a68f	f0 eb		beq $a67c			beq 	_ILLoop
.a691	9d 24 08	sta $0824,x			sta 	lineBuffer,x 				; save it
.a694	e8		inx				inx
.a695	80 e5		bra $a67c			bra 	_ILLoop
.a697					_ILBackspace:
.a697	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a699	f0 e1		beq $a67c			beq 	_ILLoop
.a69b	ca		dex				dex 								; back one.
.a69c	80 de		bra $a67c			bra 	_ILLoop
.a69e					_ILExit:
.a69e	20 64 a6	jsr $a664			jsr 	EXTPrintCharacter
.a6a1	9e 24 08	stz $0824,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a6a4	60		rts				rts
.a6a5					EXTBreakCheck:
.a6a5	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a6a8					MemoryDeleteLine:
.a6a8	20 c7 a6	jsr $a6c7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6ab	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a6ad	a8		tay				tay
.a6ae					_MDDLLoop:
.a6ae	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a6b0	92 30		sta ($30)			sta 	(codePtr)
.a6b2	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a6b4	c5 3a		cmp $3a				cmp 	zTemp2
.a6b6	d0 07		bne $a6bf			bne 	_MDLDLNext
.a6b8	a5 31		lda $31				lda 	codePtr+1
.a6ba	c5 3b		cmp $3b				cmp 	zTemp2+1
.a6bc	d0 01		bne $a6bf			bne 	_MDLDLNext
.a6be					_MDDLExit:
.a6be	60		rts				rts
.a6bf					_MDLDLNext:
.a6bf	e6 30		inc $30				inc 	codePtr						; next byte
.a6c1	d0 eb		bne $a6ae			bne 	_MDDLLoop
.a6c3	e6 31		inc $31				inc 	codePtr+1
.a6c5	80 e7		bra $a6ae			bra 	_MDDLLoop
.a6c7					IMemoryFindEnd:
.a6c7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6c9	85 3a		sta $3a				sta 	0+zTemp2
.a6cb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6cd	85 3b		sta $3b				sta 	1+zTemp2
.a6cf					_MDLFELoop:
.a6cf	b2 3a		lda ($3a)			lda 	(zTemp2)
.a6d1	f0 0b		beq $a6de			beq 	_MDLFEExit
.a6d3	18		clc				clc
.a6d4	65 3a		adc $3a				adc 	zTemp2
.a6d6	85 3a		sta $3a				sta 	zTemp2
.a6d8	90 f5		bcc $a6cf			bcc 	_MDLFELoop
.a6da	e6 3b		inc $3b				inc 	zTemp2+1
.a6dc	80 f1		bra $a6cf			bra 	_MDLFELoop
.a6de					_MDLFEExit:
.a6de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a6df					MemoryInsertLine:
.a6df	20 c7 a6	jsr $a6c7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6e2					_MDLIFound:
.a6e2	ad 24 07	lda $0724			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a6e5	a8		tay				tay
.a6e6					_MDLIInsert:
.a6e6	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a6e8	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a6ea	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a6ec	c5 3a		cmp $3a				cmp 	zTemp2
.a6ee	d0 06		bne $a6f6			bne 	_MDLINext
.a6f0	a5 31		lda $31				lda 	codePtr+1
.a6f2	c5 3b		cmp $3b				cmp 	zTemp2+1
.a6f4	f0 0a		beq $a700			beq 	_MDLIHaveSpace
.a6f6					_MDLINext:
.a6f6	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a6f8	d0 02		bne $a6fc			bne 	_MDLINoBorrow
.a6fa	c6 3b		dec $3b				dec 	zTemp2+1
.a6fc					_MDLINoBorrow:
.a6fc	c6 3a		dec $3a				dec 	zTemp2
.a6fe	80 e6		bra $a6e6			bra 	_MDLIInsert
.a700					_MDLIHaveSpace:
.a700	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.a703	88		dey				dey 								; from offset-1 to 0
.a704					_MDLICopy:
.a704	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.a707	91 30		sta ($30),y			sta 	(codePtr),y
.a709	88		dey				dey
.a70a	10 f8		bpl $a704			bpl 	_MDLICopy
.a70c	60		rts				rts
.a70d					MDLAppendLine:
.a70d	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a70f	85 36		sta $36				sta 	zTemp0
.a711	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a713	85 38		sta $38				sta 	0+zTemp1
.a715	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a717	85 39		sta $39				sta 	1+zTemp1
.a719	b2 38		lda ($38)			lda 	(zTemp1)
.a71b	d0 0a		bne $a727			bne 	_MDLANoInitialise
.a71d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a71f	8d a7 08	sta $08a7			sta 	0+AppendPointer
.a722	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a724	8d a8 08	sta $08a8			sta 	1+AppendPointer
.a727					_MDLANoInitialise:
.a727	18		clc				clc
.a728	ad a7 08	lda $08a7			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a72b	85 38		sta $38				sta 	zTemp1
.a72d	72 36		adc ($36)			adc 	(zTemp0)
.a72f	8d a7 08	sta $08a7			sta 	AppendPointer
.a732	ad a8 08	lda $08a8			lda 	AppendPointer+1
.a735	85 39		sta $39				sta 	zTemp1+1
.a737	69 00		adc #$00			adc 	#0
.a739	8d a8 08	sta $08a8			sta 	AppendPointer+1
.a73c	a0 00		ldy #$00			ldy 	#0
.a73e					_MDLACopy:
.a73e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a740	91 38		sta ($38),y			sta 	(zTemp1),y
.a742	c8		iny				iny
.a743	98		tya				tya
.a744	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a746	d0 f6		bne $a73e			bne 	_MDLACopy
.a748	a9 00		lda #$00			lda 	#0 							; end of program.
.a74a	91 38		sta ($38),y			sta 	(zTemp1),y
.a74c	60		rts				rts
.08a7					AppendPointer:
>08a7							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9d73					MemoryNew:
.9d73	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9d75	85 30		sta $30				sta 	codePtr
.9d77	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d79	85 31		sta $31				sta 	codePtr+1
.9d7b	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9d7d	92 30		sta ($30)			sta 	(codePtr)
.9d7f	60		rts				rts
.9d80					MemoryAppend:
.9d80	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9d82	85 30		sta $30				sta 	codePtr
.9d84	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d86	85 31		sta $31				sta 	codePtr+1
.9d88					_MAFindEnd:
.9d88	b2 30		lda ($30)			lda 	(codePtr)
.9d8a	f0 0d		beq $9d99			beq 	_MAFoundEnd
.9d8c	18		clc				clc
.9d8d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9d8f	65 30		adc $30				adc 	codePtr
.9d91	85 30		sta $30				sta 	codePtr
.9d93	90 02		bcc $9d97			bcc 	_CREExit
.9d95	e6 31		inc $31				inc 	codePtr+1
.9d97					_CREExit:
.9d97	80 ef		bra $9d88			bra 	_MAFindEnd
.9d99					_MAFoundEnd:
.9d99	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.9d9c	c0 04		cpy #$04			cpy 	#4 							; blank line
.9d9e	f0 0e		beq $9dae			beq 	_MANoLine
.9da0	a9 00		lda #$00			lda 	#0 							; end of program
.9da2	91 30		sta ($30),y			sta 	(codePtr),y
.9da4					_MACopy:
.9da4	88		dey				dey
.9da5	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.9da8	91 30		sta ($30),y			sta 	(codePtr),y
.9daa	c0 00		cpy #$00			cpy 	#0
.9dac	d0 f6		bne $9da4			bne 	_MACopy
.9dae					_MANoLine:
.9dae	60		rts				rts
.9daf					MemoryInline:
.9daf	98		tya				tya 								; put address into stack,x
.9db0	18		clc				clc
.9db1	65 30		adc $30				adc 	codePtr
.9db3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9db6	a5 31		lda $31				lda 	codePtr+1
.9db8	69 00		adc #$00			adc 	#0
.9dba	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9dbd	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9dc0	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9dc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9dc4					MemorySearch:
.9dc4	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9dc6	86 37		stx $37				stx 	zTemp0+1
.9dc8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9dca	85 30		sta $30				sta 	codePtr
.9dcc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9dce	85 31		sta $31				sta 	codePtr+1
.9dd0					_MTAXLoop:
.9dd0	b2 30		lda ($30)			lda 	(codePtr)
.9dd2	18		clc				clc
.9dd3	f0 21		beq $9df6			beq 	_MTAXExit 					; reached end, exit with CC.
.9dd5	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9dd7	b1 30		lda ($30),y			lda 	(codePtr),y
.9dd9	38		sec				sec
.9dda	e5 36		sbc $36				sbc 	zTemp0
.9ddc	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9dde	c8		iny				iny 								; do the MSB
.9ddf	b1 30		lda ($30),y			lda 	(codePtr),y
.9de1	e5 37		sbc $37				sbc 	zTemp0+1
.9de3	05 38		ora $38				ora 	zTemp1
.9de5	f0 0f		beq $9df6			beq 	_MTAXExit	 				; found
.9de7	b0 0d		bcs $9df6			bcs 	_MTAXExit 					; current < required exit
.9de9	18		clc				clc
.9dea	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9dec	65 30		adc $30				adc 	codePtr
.9dee	85 30		sta $30				sta 	codePtr
.9df0	90 02		bcc $9df4			bcc 	_CREExit
.9df2	e6 31		inc $31				inc 	codePtr+1
.9df4					_CREExit:
.9df4	80 da		bra $9dd0			bra 	_MTAXLoop
.9df6					_MTAXExit:
.9df6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
