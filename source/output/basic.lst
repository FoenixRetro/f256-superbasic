
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 14:02:49 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_CALL                             = $a6; $a6 CALL
=$a7					KWD_CIRCLE                           = $a7; $a7 CIRCLE
=$a8					KWD_CLS                              = $a8; $a8 CLS
=$a9					KWD_COLOR                            = $a9; $a9 COLOR
=$aa					KWD_COLOUR                           = $aa; $aa COLOUR
=$ab					KWD_DATA                             = $ab; $ab DATA
=$ac					KWD_DIM                              = $ac; $ac DIM
=$ad					KWD_DOWNTO                           = $ad; $ad DOWNTO
=$ae					KWD_ELSE                             = $ae; $ae ELSE
=$af					KWD_GFX                              = $af; $af GFX
=$b0					KWD_GOSUB                            = $b0; $b0 GOSUB
=$b1					KWD_GOTO                             = $b1; $b1 GOTO
=$b2					KWD_HERE                             = $b2; $b2 HERE
=$b3					KWD_HIDE                             = $b3; $b3 HIDE
=$b4					KWD_LET                              = $b4; $b4 LET
=$b5					KWD_LINE                             = $b5; $b5 LINE
=$b6					KWD_LOCAL                            = $b6; $b6 LOCAL
=$b7					KWD_OUTLINE                          = $b7; $b7 OUTLINE
=$b8					KWD_PRINT                            = $b8; $b8 PRINT
=$b9					KWD_READ                             = $b9; $b9 READ
=$ba					KWD_RECT                             = $ba; $ba RECT
=$bb					KWD_REM                              = $bb; $bb REM
=$bc					KWD_RETURN                           = $bc; $bc RETURN
=$bd					KWD_SCALE                            = $bd; $bd SCALE
=$be					KWD_SHOW                             = $be; $be SHOW
=$bf					KWD_SOLID                            = $bf; $bf SOLID
=$c0					KWD_SPRITE                           = $c0; $c0 SPRITE
=$c1					KWD_TEXT                             = $c1; $c1 TEXT
=$c2					KWD_TO                               = $c2; $c2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 c2 95	jsr $95c2			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 ec 87	jsr $87ec			jsr 	RunDemos
.8013	20 7d 8f	jsr $8f7d			jsr 	NewCommand 					; erase current program
.8016	20 47 a2	jsr $a247			jsr 	BackloadProgram
.8019	4c d9 8a	jmp $8ad9			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1381."
>8064	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8074	32 2e 20 42 75 69 6c 64 20 31 33 38 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxSpritePage:
>063a							.fill 	1
.063b					gxHeight:
>063b							.fill 	1
.063c					gxMode:
>063c							.fill 	1
.063d					gxColour:
>063d							.fill 	1
.063e					gxEORValue:
>063e							.fill 	1
.063f					gxANDValue:
>063f							.fill 	1
.0640					gxOriginalLUTValue:
>0640							.fill 	1
.0641					gxOriginalMMUSetting:
>0641							.fill 	1
.0642					gsOffset:
>0642							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gzTemp0+1
.808d	80 3d		bra $80cc			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	f0 07		beq $80b8			beq 	_GDXOkay 					; check X range
.80b1	ad 29 06	lda $0629			lda 	gxCurrentX
.80b4	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b6	b0 1a		bcs $80d2			bcs 	_GDError
.80b8					_GDXOkay:
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bb	cd 3b 06	cmp $063b			cmp 	gxHeight
.80be	b0 12		bcs $80d2			bcs 	_GDError
.80c0	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c2					_GDCopy2:
.80c2	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c5	9d 31 06	sta $0631,x			sta 	gxX0,x
.80c8	ca		dex				dex
.80c9	10 f7		bpl $80c2			bpl 	_GDCopy2
.80cb	68		pla				pla 								; get command back
.80cc					_GDExecuteA:
.80cc	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80ce	aa		tax				tax
.80cf	7c d8 80	jmp ($80d8,x)			jmp 	(GRVectorTable,x)
.80d2					_GDError:
.80d2	68		pla				pla 								; throw command
.80d3	38		sec				sec
.80d4	60		rts				rts
.80d5					GXMove:
.80d5	18		clc				clc
.80d6	60		rts				rts
.80d7					GRUndefined:
>80d7	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

.80d8					GRVectorTable:
>80d8	a5 82					.word	GXControlBitmap          ; $00 BITMAPCTL
>80da	e8 82					.word	GXControlSprite          ; $01 SPRITECTL
>80dc	5e 82					.word	GXClearBitmap            ; $02 Clear
>80de	7a 84					.word	GXSetColourMode          ; $03 Colour
>80e0	30 86					.word	GXFontHandler            ; $04 DrawFont
>80e2	78 86					.word	GXSpriteHandler          ; $05 DrawSprite
>80e4	d7 80					.word	GRUndefined              ; $06
>80e6	d7 80					.word	GRUndefined              ; $07
>80e8	d7 80					.word	GRUndefined              ; $08
>80ea	d7 80					.word	GRUndefined              ; $09
>80ec	d7 80					.word	GRUndefined              ; $0a
>80ee	d7 80					.word	GRUndefined              ; $0b
>80f0	d7 80					.word	GRUndefined              ; $0c
>80f2	d7 80					.word	GRUndefined              ; $0d
>80f4	d7 80					.word	GRUndefined              ; $0e
>80f6	d7 80					.word	GRUndefined              ; $0f
>80f8	d5 80					.word	GXMove                   ; $10 Move
>80fa	4f 83					.word	GXLine                   ; $11 Line
>80fc	c3 84					.word	GXFrameRectangle         ; $12 FrameRect
>80fe	c0 84					.word	GXFillRectangle          ; $13 FillRect
>8100	1c 81					.word	GXFrameCircle            ; $14 FrameCircle
>8102	18 81					.word	GXFillCircle             ; $15 FillCircle
>8104	d7 80					.word	GRUndefined              ; $16
>8106	d7 80					.word	GRUndefined              ; $17
>8108	a8 84					.word	GXPlotPoint              ; $18 Plot
>810a	d7 80					.word	GRUndefined              ; $19
>810c	d7 80					.word	GRUndefined              ; $1a
>810e	d7 80					.word	GRUndefined              ; $1b
>8110	d7 80					.word	GRUndefined              ; $1c
>8112	d7 80					.word	GRUndefined              ; $1d
>8114	d7 80					.word	GRUndefined              ; $1e
>8116	d7 80					.word	GRUndefined              ; $1f

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8118					GXFillCircle:
.8118	a9 ff		lda #$ff			lda 	#255
.811a	80 02		bra $811e			bra 	GXCircle
.811c					GXFrameCircle:
.811c	a9 00		lda #$00			lda 	#0
.811e					GXCircle:
.811e	8d 46 06	sta $0646			sta 	gIsFillMode					; save Fill flag
.8121	20 ab 87	jsr $87ab			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 e0 86	jsr $86e0			jsr 	GXOpenBitmap 				; start drawing
.8127	20 17 82	jsr $8217			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 47 06	stz $0647			stz 	gYChanged
.812d					_GXCircleDraw:
.812d	ad 44 06	lda $0644			lda 	gX 							; while x <= y
.8130	cd 45 06	cmp $0645			cmp 	gY
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4a 81	jsr $814a			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 f1 86	jsr $86f1			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 47 81	jsr $8147			jsr 	GXPlot2 					; draw it
.8142	20 c4 81	jsr $81c4			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					GXPlot2:
.8147	20 4a 81	jsr $814a			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814a					GXPlot1:
.814a	ad 45 06	lda $0645			lda 	gY 								; if y = 0, don't do it twice (xor)
.814d	f0 03		beq $8152			beq 	_GXPlot1Only
.814f	20 6e 81	jsr $816e			jsr 	GXPlot0 						; plot and negate
.8152					_GXPlot1Only:
.8152	20 6e 81	jsr $816e			jsr 	GXPlot0 						; twice, undoing negation
.8155	ad 44 06	lda $0644			lda 	gX 								; swap X and Y
.8158	ae 45 06	ldx $0645			ldx	 	gY
.815b	8d 45 06	sta $0645			sta 	gY
.815e	8e 44 06	stx $0644			stx 	gX
.8161	ad 47 06	lda $0647			lda 	gYChanged 						; toggle Y Changed flag
.8164	a9 ff		lda #$ff			lda 	#$FF
.8166	8d 47 06	sta $0647			sta 	gYChanged
.8169	60		rts				rts
.816a	20 6e 81	jsr $816e			jsr 	GXPlot0 						; do once
.816d	60		rts				rts
.816e	ad 46 06	lda $0646	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.8171	f0 05		beq $8178			beq 	_GXPlot0Always
.8173	ad 47 06	lda $0647			lda 	gYChanged						; fill mode, only draw if changed.
.8176	f0 2d		beq $81a5			beq 	GXPlot0Exit
.8178					_GXPlot0Always:
.8178	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817a	ad 45 06	lda $0645			lda 	gY
.817d	20 a6 81	jsr $81a6			jsr 	GXSubCopy
.8180	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8182	ad 44 06	lda $0644			lda 	gX
.8185	20 a6 81	jsr $81a6			jsr 	GXSubCopy
.8188	48		pha				pha 									; save last offset X
.8189	20 fe 86	jsr $86fe			jsr 	GXPositionCalc 					; calculate position/offset.
.818c	68		pla				pla
.818d	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.818e	85 36		sta $36				sta 	gzTemp0
.8190	64 37		stz $37				stz 	gzTemp0+1
.8192	26 37		rol $37				rol 	gzTemp0+1
.8194	ad 46 06	lda $0646			lda 	gIsFillMode
.8197	69 80		adc #$80			adc 	#128
.8199	20 0c 85	jsr $850c			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819c	38		sec				sec 									; GY = -GY
.819d	a9 00		lda #$00			lda 	#0
.819f	ed 45 06	sbc $0645			sbc 	gY
.81a2	8d 45 06	sta $0645			sta 	gY
.81a5					GXPlot0Exit:
.81a5	60		rts				rts
.81a6					GXSubCopy:
.81a6	85 36		sta $36				sta 	gzTemp0
.81a8	64 37		stz $37				stz 	gzTemp0+1
.81aa	29 80		and #$80			and 	#$80
.81ac	f0 02		beq $81b0			beq 	_GXNoSx
.81ae	c6 37		dec $37				dec 	gzTemp0+1
.81b0					_GXNoSx:
.81b0	38		sec				sec
.81b1	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b4	e5 36		sbc $36				sbc 	gzTemp0
.81b6	9d 31 06	sta $0631,x			sta 	gXX0,x
.81b9	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81bc	e5 37		sbc $37				sbc 	gzTemp0+1
.81be	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c1	a5 36		lda $36				lda 	gzTemp0 						; return A
.81c3	60		rts				rts
.81c4					GXCircleMove:
.81c4	9c 47 06	stz $0647			stz 	gYChanged 					; clear Y changed flag
.81c7	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.81c9	10 0d		bpl $81d8			bpl 	_GXEMPositive
.81cb	ee 44 06	inc $0644			inc 	gX 							; X++
.81ce	ad 44 06	lda $0644			lda 	gX
.81d1	20 f7 81	jsr $81f7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d4	a9 06		lda #$06			lda 	#6  						; and add 6
.81d6	80 15		bra $81ed			bra 	_GXEMAddD
.81d8					_GXEMPositive:
.81d8	ee 44 06	inc $0644			inc 	gX 							; X++
.81db	ce 45 06	dec $0645			dec 	gy 							; Y--
.81de	38		sec				sec 								; calculate X-Y
.81df	ad 44 06	lda $0644			lda 	gX
.81e2	ed 45 06	sbc $0645			sbc 	gY
.81e5	20 f7 81	jsr $81f7			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81e8	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ea	ce 47 06	dec $0647			dec 	gYChanged
.81ed					_GXEMAddD:
.81ed	18		clc				clc
.81ee	65 38		adc $38				adc 	gzTemp1
.81f0	85 38		sta $38				sta 	gzTemp1
.81f2	90 02		bcc $81f6			bcc 	_GXEMNoCarry
.81f4	e6 39		inc $39				inc 	gzTemp1+1
.81f6					_GXEMNoCarry:
.81f6	60		rts				rts
.81f7					_GXAdd4TimesToD:
.81f7	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.81f9	29 80		and #$80			and 	#$80
.81fb	f0 02		beq $81ff			beq 	_GXA4Unsigned
.81fd	a9 ff		lda #$ff			lda 	#$FF
.81ff					_GXA4Unsigned:
.81ff	85 37		sta $37				sta 	gzTemp0+1
.8201	06 36		asl $36				asl 	gzTemp0  					; x 4
.8203	26 37		rol $37				rol 	gzTemp0+1
.8205	06 36		asl $36				asl 	gzTemp0
.8207	26 37		rol $37				rol 	gzTemp0+1
.8209	18		clc				clc 								; add
.820a	a5 36		lda $36				lda		gzTemp0
.820c	65 38		adc $38				adc 	gzTemp1
.820e	85 38		sta $38				sta 	gzTemp1
.8210	a5 37		lda $37				lda		gzTemp0+1
.8212	65 39		adc $39				adc 	gzTemp1+1
.8214	85 39		sta $39				sta 	gzTemp1+1
.8216	60		rts				rts
.8217					GXCircleSetup:
.8217	38		sec				sec
.8218	ad 37 06	lda $0637			lda 	gxY1
.821b	ed 33 06	sbc $0633			sbc 	gxY0
.821e	4a		lsr a				lsr 	a
.821f	8d 43 06	sta $0643			sta 	gRadius
.8222	a2 00		ldx #$00			ldx 	#0
.8224	20 46 82	jsr $8246			jsr 	_GXCalculateCentre
.8227	a2 02		ldx #$02			ldx 	#2
.8229	20 46 82	jsr $8246			jsr 	_GXCalculateCentre
.822c	9c 44 06	stz $0644			stz 	gX
.822f	ad 43 06	lda $0643			lda 	gRadius
.8232	8d 45 06	sta $0645			sta 	gY
.8235	0a		asl a				asl 	a 							; R x 2
.8236	85 36		sta $36				sta 	gzTemp0
.8238	38		sec				sec
.8239	a9 03		lda #$03			lda 	#3
.823b	e5 36		sbc $36				sbc 	gzTemp0
.823d	85 38		sta $38				sta 	gzTemp1
.823f	a9 00		lda #$00			lda 	#0
.8241	e9 00		sbc #$00			sbc 	#0
.8243	85 39		sta $39				sta 	gzTemp1+1
.8245	60		rts				rts
.8246					_GXCalculateCentre:
.8246	38		sec				sec
.8247	bd 35 06	lda $0635,x			lda 	gxX1,x
.824a	7d 31 06	adc $0631,x			adc 	gXX0,x
.824d	9d 35 06	sta $0635,x			sta 	gXX1,x
.8250	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8253	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8256	4a		lsr a				lsr 	a
.8257	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825a	7e 35 06	ror $0635,x			ror 	gXX1,x
.825d	60		rts				rts
.0643					gRadius:
>0643							.fill 	1
.0644					gX:
>0644							.fill 	1
.0645					gY:
>0645							.fill 	1
.0646					gIsFillMode:
>0646							.fill 	1
.0647					gYChanged:
>0647							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.825e					GXClearBitmap:
.825e	20 e0 86	jsr $86e0			jsr 	GXOpenBitmap 				; start access
.8261	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8263	ad 3b 06	lda $063b			lda 	gxHeight
.8266	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8268	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.826a					_GXCalcLastPage:
.826a	98		tya				tya 								; add to base page
.826b	18		clc				clc
.826c	6d 39 06	adc $0639			adc 	gxBasePage
.826f	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8271					_GXClearAll:
.8271	20 82 82	jsr $8282			jsr 	_GXClearBlock 				; clear 8k block
.8274	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.8276	a5 0b		lda $0b				lda 	GFXEditSlot
.8278	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.827b	b0 f4		bcs $8271			bcs 	_GXClearAll
.827d	20 f1 86	jsr $86f1			jsr 	GXCloseBitmap	 			; stop access
.8280	18		clc				clc
.8281	60		rts				rts
.8282					_GXClearBlock:
.8282	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8284	85 38		sta $38				sta 	0+gzTemp1
.8286	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8288	85 39		sta $39				sta 	1+gzTemp1
.828a					_GXCB0:
.828a	a5 36		lda $36				lda 	gzTemp0
.828c	a0 00		ldy #$00			ldy 	#0
.828e					_GXCB1:
.828e	91 38		sta ($38),y			sta 	(gzTemp1),y
.8290	c8		iny				iny
.8291	91 38		sta ($38),y			sta 	(gzTemp1),y
.8293	c8		iny				iny
.8294	91 38		sta ($38),y			sta 	(gzTemp1),y
.8296	c8		iny				iny
.8297	91 38		sta ($38),y			sta 	(gzTemp1),y
.8299	c8		iny				iny
.829a	d0 f2		bne $828e			bne 	_GXCB1
.829c	e6 39		inc $39				inc 	gzTemp1+1
.829e	a5 39		lda $39				lda 	gzTemp1+1
.82a0	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82a2	d0 e6		bne $828a			bne 	_GXCB0
.82a4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82a5					GXControlBitmap:
.82a5	64 01		stz $01				stz 	1
.82a7	a5 36		lda $36				lda 	gzTemp0 					; get control bits
.82a9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82aa	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82ad	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82af	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82b1	90 02		bcc $82b5			bcc 	_CBNotOn
.82b3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82b5					_CBNotOn:
.82b5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82b8	a5 36		lda $36				lda 	gzTemp0 					; get control settings (bits 0-2)
.82ba	29 07		and #$07			and 	#7
.82bc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82bf	a5 37		lda $37				lda 	gzTemp0+1 					; get the base page
.82c1	d0 02		bne $82c5			bne 	_CBNotDefault
.82c3	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82c5					_CBNotDefault:
.82c5	8d 39 06	sta $0639			sta 	gxBasePage
.82c8	20 41 83	jsr $8341			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82cb	a5 37		lda $37				lda 	gzTemp0+1 					; copy address into Bitmap address registers
.82cd	8d 03 d1	sta $d103			sta 	$D103
.82d0	a5 36		lda $36				lda 	gzTemp0
.82d2	8d 02 d1	sta $d102			sta 	$D102
.82d5	9c 01 d1	stz $d101			stz 	$D101
.82d8	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82da	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.82dd	29 01		and #$01			and 	#1
.82df	f0 02		beq $82e3			beq 	_CBHaveHeight
.82e1	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.82e3					_CBHaveHeight
.82e3	8e 3b 06	stx $063b			stx 	gxHeight
.82e6	18		clc				clc
.82e7	60		rts				rts
.82e8					GXControlSprite:
.82e8	64 01		stz $01				stz 	1
.82ea	a5 36		lda $36				lda 	gzTemp0 					; get control bits
.82ec	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82ed	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82f0	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82f2	29 df		and #$df			and 	#$DF 						; clear sprite bit
.82f4	90 02		bcc $82f8			bcc 	_CSNotOn
.82f6	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.82f8					_CSNotOn:
.82f8	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82fb	a5 37		lda $37				lda 	gzTemp0+1 					; get the base page
.82fd	d0 02		bne $8301			bne 	_CSNotDefault
.82ff	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8301					_CSNotDefault:
.8301	8d 3a 06	sta $063a			sta 	gxSpritePage
.8304	20 41 83	jsr $8341			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8307	a5 36		lda $36				lda 	zTemp0
.8309	8d 5b 06	sta $065b			sta 	GXSAddress
.830c	a5 37		lda $37				lda 	zTemp0+1
.830e	8d 5c 06	sta $065c			sta 	GXSAddress+1
.8311	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8313					_CSClear:
.8313	9e 00 d9	stz $d900,x			stz 	$D900,x
.8316	9e 00 da	stz $da00,x			stz 	$DA00,x
.8319	ca		dex				dex
.831a	d0 f7		bne $8313			bne 	_CSClear
.831c	a9 02		lda #$02			lda 	#2
.831e	20 6f 87	jsr $876f			jsr 	GXFindSprite
.8321	a9 19		lda #$19			lda 	#1+$18
.8323	8d 00 d9	sta $d900			sta 	$D900
.8326	ad 5b 06	lda $065b			lda 	GXSAddress
.8329	8d 01 d9	sta $d901			sta	 	$D901
.832c	ad 5c 06	lda $065c			lda 	GXSAddress+1
.832f	8d 02 d9	sta $d902			sta	 	$D902
.8332	a9 03		lda #$03			lda 	#3
.8334	8d 03 d9	sta $d903			sta 	$D903
.8337	a9 40		lda #$40			lda 	#64
.8339	8d 04 d9	sta $d904			sta 	$D904
.833c	8d 06 d9	sta $d906			sta 	$D906
.833f	18		clc				clc
.8340	60		rts				rts
.8341					GXCalculateBaseAddress:
.8341	85 36		sta $36				sta 	gzTemp0
.8343	64 37		stz $37				stz 	gzTemp0+1
.8345	a9 05		lda #$05			lda 	#5
.8347					_GXShift:
.8347	06 36		asl $36				asl 	gzTemp0
.8349	26 37		rol $37				rol 	gzTemp0+1
.834b	3a		dec a				dec		a
.834c	d0 f9		bne $8347			bne 	_GXShift
.834e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.834f					GXLine:
.834f	20 e0 86	jsr $86e0			jsr 	GXOpenBitmap
.8352	20 c9 87	jsr $87c9			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8355	20 1b 84	jsr $841b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8358	20 fe 86	jsr $86fe			jsr 	GXPositionCalc 				; calculate position/offset.
.835b					_GXDrawLoop:
.835b	ac 42 06	ldy $0642			ldy 	gsOffset 					; draw the pixel
.835e	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8360	2d 3f 06	and $063f			and 	gxANDValue
.8363	4d 3e 06	eor $063e			eor 	gxEORValue
.8366	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8368	20 77 83	jsr $8377			jsr 	GXLineIsComplete 			; is the line complete ?
.836b	f0 05		beq $8372			beq 	_GXLExit
.836d	20 92 83	jsr $8392			jsr 	GXLineAdvance 				; code as per advance method
.8370	80 e9		bra $835b			bra 	_GXDrawLoop
.8372					_GXLExit:
.8372	20 f1 86	jsr $86f1			jsr 	GXCloseBitmap
.8375	18		clc				clc
.8376	60		rts				rts
.8377					GXLineIsComplete:
.8377	ad 4a 06	lda $064a			lda 	GXIsDiffYLarger 			; is dy larger
.837a	d0 0f		bne $838b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.837c	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.837f	4d 35 06	eor $0635			eor 	GXX1
.8382	d0 06		bne $838a			bne 	_GXLICExit
.8384	ad 32 06	lda $0632			lda 	GXX0+1
.8387	4d 36 06	eor $0636			eor 	GXX1+1
.838a					_GXLICExit:
.838a	60		rts				rts
.838b					_GXLICCompareY:
.838b	ad 37 06	lda $0637			lda 	GXY1
.838e	4d 33 06	eor $0633			eor 	GXY0
.8391	60		rts				rts
.8392					GXLineAdvance:
.8392	18		clc				clc 								; add adjust to position
.8393	ad 4c 06	lda $064c			lda 	GXPosition
.8396	6d 4d 06	adc $064d			adc 	GXAdjust
.8399	8d 4c 06	sta $064c			sta 	GXPosition
.839c	9c 4f 06	stz $064f			stz 	GXAddSelect 				; clear add select flag
.839f	b0 05		bcs $83a6			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83a1	cd 4e 06	cmp $064e			cmp 	GXTotal 					; if exceeded total
.83a4	90 0a		bcc $83b0			bcc 	_GXLANoExtra
.83a6					_GXLAOverflow:
.83a6	ce 4f 06	dec $064f			dec 	GXAddSelect 				; set addselect to $FF
.83a9	38		sec				sec 								; subtract total and write back
.83aa	ed 4e 06	sbc $064e			sbc 	GXTotal
.83ad	8d 4c 06	sta $064c			sta 	GXPosition
.83b0					_GXLANoExtra:
.83b0	ad 4a 06	lda $064a			lda 	GXIsDiffYLarger
.83b3	f0 0d		beq $83c2			beq 	_GXDXLarger
.83b5	20 14 84	jsr $8414			jsr 	GXIncrementY
.83b8	ad 4f 06	lda $064f			lda 	GXAddSelect
.83bb	f0 10		beq $83cd			beq 	_GXLAExit
.83bd	20 ce 83	jsr $83ce			jsr 	GXAdjustX
.83c0	80 0b		bra $83cd			bra 	_GXLAExit
.83c2					_GXDXLarger:
.83c2	20 ce 83	jsr $83ce			jsr 	GXAdjustX
.83c5	ad 4f 06	lda $064f			lda 	GXAddSelect
.83c8	f0 03		beq $83cd			beq 	_GXLAExit
.83ca	20 14 84	jsr $8414			jsr 	GXIncrementY
.83cd					_GXLAExit:
.83cd	60		rts				rts
.83ce					GXAdjustX:
.83ce	ad 4b 06	lda $064b			lda 	GXDXNegative
.83d1	10 25		bpl $83f8			bpl 	_GXAXRight
.83d3	ad 31 06	lda $0631			lda 	GXX0
.83d6	d0 03		bne $83db			bne 	_GXAXNoBorrow
.83d8	ce 32 06	dec $0632			dec 	GXX0+1
.83db					_GXAXNoBorrow:
.83db	ce 31 06	dec $0631			dec 	GXX0
.83de	ce 42 06	dec $0642			dec 	gsOffset 					; pixel left
.83e1	ad 42 06	lda $0642			lda 	gsOffset
.83e4	c9 ff		cmp #$ff			cmp 	#$FF
.83e6	d0 0f		bne $83f7			bne 	_GXAYExit 					; underflow
.83e8	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.83ea	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.83ec	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83ee	b0 07		bcs $83f7			bcs 	_GXAYExit
.83f0	18		clc				clc
.83f1	69 20		adc #$20			adc 	#$20 						; fix up
.83f3	85 3d		sta $3d				sta 	gsTemp+1
.83f5	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.83f7					_GXAYExit:
.83f7	60		rts				rts
.83f8					_GXAXRight:
.83f8	ee 31 06	inc $0631			inc 	GXX0
.83fb	d0 03		bne $8400			bne 	_GXAXNoCarry
.83fd	ee 32 06	inc $0632			inc 	GXX0+1
.8400					_GXAXNoCarry:
.8400	ee 42 06	inc $0642			inc 	gsOffset 					; pixel right
.8403	d0 0e		bne $8413			bne 	_GXAXExit 					; if not overflowed, exit.
.8405	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.8407	a5 3d		lda $3d				lda 	gsTemp+1
.8409	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.840b	90 06		bcc $8413			bcc 	_GXAXExit
.840d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.840f	85 3d		sta $3d				sta 	gsTemp+1
.8411	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.8413					_GXAXExit:
.8413	60		rts				rts
.8414					GXIncrementY:
.8414	ee 33 06	inc $0633			inc 	GXY0
.8417	20 54 87	jsr $8754			jsr 	GXMovePositionDown
.841a	60		rts				rts
.841b					GXLineSetup:
.841b	ad 37 06	lda $0637			lda 	GXY1
.841e	38		sec				sec
.841f	ed 33 06	sbc $0633			sbc 	GXY0
.8422	4a		lsr a				lsr 	a
.8423	8d 49 06	sta $0649			sta 	GXDiffY
.8426	9c 4b 06	stz $064b			stz 	GXDXNegative 				; clear -ve flag
.8429	38		sec				sec
.842a	ad 35 06	lda $0635			lda 	GXX1
.842d	ed 31 06	sbc $0631			sbc 	GXX0
.8430	8d 48 06	sta $0648			sta 	GXDiffX
.8433	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8436	ed 32 06	sbc $0632			sbc 	GXX0+1
.8439	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.843a	6e 48 06	ror $0648			ror 	GXDiffX
.843d	0a		asl a				asl 	a
.843e	10 0c		bpl $844c			bpl 	_GDXNotNegative
.8440	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8442	38		sec				sec
.8443	ed 48 06	sbc $0648			sbc 	GXDiffX
.8446	8d 48 06	sta $0648			sta 	GXDiffX
.8449	ce 4b 06	dec $064b			dec 	GXDXNegative 				; -ve flag = $FF.
.844c					_GDXNotNegative:
.844c	9c 4a 06	stz $064a			stz 	GXIsDiffYLarger 			; clear larger flag
.844f	ad 49 06	lda $0649			lda 	GXDiffY 					; set adjust and total.
.8452	8d 4d 06	sta $064d			sta 	GXAdjust
.8455	ad 48 06	lda $0648			lda 	GXDiffX
.8458	8d 4e 06	sta $064e			sta 	GXTotal
.845b	ad 49 06	lda $0649			lda 	GXDiffY 					; if dy > dx
.845e	cd 48 06	cmp $0648			cmp 	GXDiffX
.8461	90 0f		bcc $8472			bcc 	_GDXNotLarger
.8463	ce 4a 06	dec $064a			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8466	ad 48 06	lda $0648			lda 	GXDiffX 					; set adjust and total other way round
.8469	8d 4d 06	sta $064d			sta 	GXAdjust
.846c	ad 49 06	lda $0649			lda 	GXDiffY
.846f	8d 4e 06	sta $064e			sta 	GXTotal
.8472					_GDXNotLarger:
.8472	ad 4e 06	lda $064e			lda 	GXTotal
.8475	4a		lsr a				lsr 	a
.8476	8d 4c 06	sta $064c			sta 	GXPosition
.8479	60		rts				rts
.0648					GXDiffX:
>0648							.fill 	1
.0649					GXDiffY:
>0649							.fill 	1
.064a					GXIsDiffYLarger:
>064a							.fill 	1
.064b					GXDXNegative:
>064b							.fill 	1
.064c					GXPosition:
>064c							.fill 	1
.064d					GXAdjust:
>064d							.fill 	1
.064e					GXTotal:
>064e							.fill 	1
.064f					GXAddSelect:
>064f							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.847a					GXSetColourMode:
.847a	a6 36		ldx $36				ldx 	gzTemp0
.847c	8e 3d 06	stx $063d			stx 	gxColour 								; set colour
.847f	a5 37		lda $37				lda 	gzTemp0+1 								;
.8481	8d 3c 06	sta $063c			sta 	gxMode 									; set mode
.8484	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8486	9c 3f 06	stz $063f			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8489	ae 3d 06	ldx $063d			ldx 	gxColour
.848c	8e 3e 06	stx $063e			stx 	gxEORValue
.848f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8491	90 03		bcc $8496			bcc 	_GXSDCNotAndColour
.8493	8e 3f 06	stx $063f			stx 	gxANDValue
.8496					_GXSDCNotAndColour:
.8496	d0 03		bne $849b			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.8498	9c 3e 06	stz $063e			stz 	gxEORValue
.849b					_GXSDCNotAnd:
.849b	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.849c	90 08		bcc $84a6			bcc 	_GXSDCNoFlip
.849e	ad 3f 06	lda $063f			lda	 	gxANDValue
.84a1	49 ff		eor #$ff			eor 	#$FF
.84a3	8d 3f 06	sta $063f			sta 	gxANDValue
.84a6					_GXSDCNoFlip:
.84a6	18		clc				clc
.84a7	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84a8					GXPlotPoint:
.84a8	20 e0 86	jsr $86e0			jsr 	GXOpenBitmap 				; start drawing
.84ab	20 fe 86	jsr $86fe			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.84ae	ac 42 06	ldy $0642			ldy 	gsOffset
.84b1	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.84b3	2d 3f 06	and $063f			and 	gxANDValue
.84b6	4d 3e 06	eor $063e			eor 	gxEORValue
.84b9	91 3c		sta ($3c),y			sta 	(gsTemp),y
.84bb	20 f1 86	jsr $86f1			jsr 	GXCloseBitmap 				; stop drawing and exit
.84be	18		clc				clc
.84bf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84c0					GXFillRectangle:
.84c0	38		sec				sec
.84c1	80 01		bra $84c4			bra 	GXRectangle
.84c3					GXFrameRectangle:
.84c3	18		clc				clc
.84c4					GXRectangle:
.84c4	08		php				php 								; save Fill flag (CS)
.84c5	20 e0 86	jsr $86e0			jsr 	GXOpenBitmap 				; start drawing
.84c8	20 ab 87	jsr $87ab			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84cb	20 fe 86	jsr $86fe			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.84ce	38		sec				sec 								; sec = Draw line
.84cf	20 f9 84	jsr $84f9			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84d2	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84d5	cd 37 06	cmp $0637			cmp 	gxY1
.84d8	f0 19		beq $84f3			beq 	_GXRectangleExit
.84da					_GXRectLoop:
.84da	20 54 87	jsr $8754			jsr 	GXMovePositionDown 			; down one.
.84dd	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84e0	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84e3	cd 37 06	cmp $0637			cmp 	gXY1
.84e6	f0 07		beq $84ef			beq 	_GXLastLine
.84e8	28		plp				plp 								; get flag back
.84e9	08		php				php
.84ea	20 f9 84	jsr $84f9			jsr 	GXDrawLineX1X0 				; draw horizontal line
.84ed	80 eb		bra $84da			bra 	_GXRectLoop
.84ef					_GXLastLine:
.84ef	38		sec				sec
.84f0	20 f9 84	jsr $84f9			jsr 	GXDrawLineX1X0
.84f3					_GXRectangleExit:
.84f3	68		pla				pla 								; throw fill flag.
.84f4	20 f1 86	jsr $86f1			jsr 	GXCloseBitmap 				; stop drawing and exit
.84f7	18		clc				clc
.84f8	60		rts				rts
.84f9					GXDrawLineX1X0:
.84f9	08		php				php 								; save solid/either-end
.84fa	38		sec				sec
.84fb	ad 35 06	lda $0635			lda		gXX1
.84fe	ed 31 06	sbc $0631			sbc 	gXX0
.8501	85 36		sta $36				sta 	gzTemp0
.8503	ad 36 06	lda $0636			lda 	gXX1+1
.8506	ed 32 06	sbc $0632			sbc 	gXX0+1
.8509	85 37		sta $37				sta 	gzTemp0+1
.850b	28		plp				plp
.850c					GXDrawLineTemp0:
.850c	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.850e	48		pha				pha
.850f	a5 3d		lda $3d				lda 	gsTemp+1
.8511	48		pha				pha
.8512	ad 42 06	lda $0642			lda 	gsOffset
.8515	48		pha				pha
.8516	a5 0b		lda $0b				lda 	GFXEditSlot
.8518	48		pha				pha
.8519	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y offset
.851c	90 1e		bcc $853c			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.851e					_GXDLTLine:
.851e	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.8520	2d 3f 06	and $063f			and 	gxANDValue
.8523	4d 3e 06	eor $063e			eor 	gxEORValue
.8526	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8528	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.852a	d0 04		bne $8530			bne 	_GXDLTNoBorrow
.852c	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.852e	30 2e		bmi $855e			bmi 	_GXDLTExit
.8530					_GXDLTNoBorrow:
.8530	c6 36		dec $36				dec 	gzTemp0
.8532	c8		iny				iny 								; next slot.
.8533	d0 e9		bne $851e			bne 	_GXDLTLine
.8535	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.8537	20 6c 85	jsr $856c			jsr 	GXDLTCheckWrap				; check for new page.
.853a	80 e2		bra $851e			bra 	_GXDLTLine
.853c					_GXDLTEndPoints:
.853c	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.853e	2d 3f 06	and $063f			and 	gxANDValue
.8541	4d 3e 06	eor $063e			eor 	gxEORValue
.8544	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8546	98		tya				tya 								; advance to right side
.8547	18		clc				clc
.8548	65 36		adc $36				adc 	gzTemp0
.854a	a8		tay				tay
.854b	a5 3d		lda $3d				lda 	gsTemp+1
.854d	65 37		adc $37				adc 	gzTemp0+1
.854f	85 3d		sta $3d				sta 	gsTemp+1
.8551	20 6c 85	jsr $856c			jsr 	GXDLTCheckWrap 			; fix up.
.8554	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.8556	2d 3f 06	and $063f			and 	gxANDValue
.8559	4d 3e 06	eor $063e			eor 	gxEORValue
.855c	91 3c		sta ($3c),y			sta 	(gsTemp),y
.855e					_GXDLTExit:
.855e	68		pla				pla
.855f	85 0b		sta $0b				sta 	GFXEditSlot
.8561	68		pla				pla
.8562	8d 42 06	sta $0642			sta 	gsOffset
.8565	68		pla				pla
.8566	85 3d		sta $3d				sta 	gsTemp+1
.8568	68		pla				pla
.8569	85 3c		sta $3c				sta 	gsTemp
.856b	60		rts				rts
.856c					GXDLTCheckWrap:
.856c	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.856e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8570	90 06		bcc $8578			bcc 	_GXDLTCWExit
.8572	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8574	85 3d		sta $3d				sta 	gsTemp+1
.8576	e6 0b		inc $0b				inc 	GFXEditSlot
.8578					_GXDLTCWExit:
.8578	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8579					GXDrawGraphicElement:
.8579	8d 50 06	sta $0650			sta 	gxSize 						; save size
.857c	3a		dec a				dec 	a
.857d	8d 51 06	sta $0651			sta 	gxMask 						; and mask
.8580	9c 55 06	stz $0655			stz 	gxVFlip 					; set the flip bytes
.8583	9c 56 06	stz $0656			stz 	gxHFlip
.8586	2c 57 06	bit $0657			bit 	gxUseMode
.8589	10 03		bpl $858e			bpl 	_GXNotVertical
.858b	8d 55 06	sta $0655			sta 	gxVFlip
.858e					_GXNotVertical:
.858e	50 03		bvc $8593			bvc 	_GXNotHorizontal
.8590	8d 56 06	sta $0656			sta 	gxHFlip
.8593					_GXNotHorizontal:
.8593	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.8596	48		pha				pha
.8597	8c 53 06	sty $0653			sty 	gxAcquireVector+1 			; and acquisition vector
.859a	8e 52 06	stx $0652			stx 	gxAcquireVector
.859d	20 e0 86	jsr $86e0			jsr 	gxOpenBitmap 				; open the bitmap.
.85a0	ad 57 06	lda $0657			lda 	gxUseMode 					; scale bits
.85a3	4a		lsr a				lsr 	a
.85a4	4a		lsr a				lsr 	a
.85a5	4a		lsr a				lsr 	a
.85a6	29 07		and #$07			and		#7
.85a8	1a		inc a				inc 	a
.85a9	8d 54 06	sta $0654			sta 	gxScale
.85ac	64 38		stz $38				stz 	gzTemp1						; start first line
.85ae					_GXGELoop:
.85ae	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.85b0	4d 55 06	eor $0655			eor 	gxVFlip
.85b3	aa		tax				tax 								; get the Xth line.
.85b4	20 f2 85	jsr $85f2			jsr 	_GXCallAcquire 				; get that data.
.85b7	ad 54 06	lda $0654			lda 	gxScale 					; do scale identical copies of that line.
.85ba	85 39		sta $39				sta 	gzTemp1+1
.85bc					_GXGELoop2:
.85bc	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85bf	cd 3b 06	cmp $063b			cmp 	gxHeight
.85c2	b0 10		bcs $85d4			bcs 	_GXDGEExit
.85c4	20 f5 85	jsr $85f5			jsr 	GXRenderOneLine 			; render line
.85c7	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.85c9	d0 f1		bne $85bc			bne 	_GXGELoop2
.85cb	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.85cd	a5 38		lda $38				lda 	gzTemp1
.85cf	cd 50 06	cmp $0650			cmp 	gxSize
.85d2	d0 da		bne $85ae			bne 	_GXGELoop
.85d4					_GXDGEExit:
.85d4	68		pla				pla 								; restore Y for next time
.85d5	8d 33 06	sta $0633			sta 	gxY0
.85d8	ae 54 06	ldx $0654			ldx 	gxScale 					; get scale (1-8)
.85db					_GXShiftLeft:
.85db	18		clc				clc
.85dc	ad 50 06	lda $0650			lda 	gxSize
.85df	6d 31 06	adc $0631			adc 	gxX0
.85e2	8d 31 06	sta $0631			sta 	gxX0
.85e5	90 03		bcc $85ea			bcc 	_GXSLNoCarry
.85e7	ee 32 06	inc $0632			inc 	gxX0+1
.85ea					_GXSLNoCarry:
.85ea	ca		dex				dex
.85eb	d0 ee		bne $85db			bne 	_GXShiftLeft
.85ed	20 f1 86	jsr $86f1			jsr 	GXCloseBitmap
.85f0	18		clc				clc
.85f1	60		rts				rts
.85f2					_GXCallAcquire:
.85f2	6c 52 06	jmp ($0652)			jmp 	(gxAcquireVector)
.85f5					GXRenderOneLine:
.85f5	20 fe 86	jsr $86fe			jsr 	GXPositionCalc 				; calculate position/offset.
.85f8	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y contains position.
.85fb	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.85fd					_GXROLLoop1:
.85fd	ad 54 06	lda $0654			lda 	gxScale 					; set to do 'scale' times
.8600	85 3b		sta $3b				sta 	gzTemp2+1
.8602					_GXROLLoop2:
.8602	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.8604	4d 56 06	eor $0656			eor 	gxHFlip
.8607	aa		tax				tax 								; read from the pixel buffer
.8608	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.860b	f0 0a		beq $8617			beq 	_GXZeroPixel 				; don't draw if zero.
.860d	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.860f	2d 3f 06	and $063f			and 	gxANDValue
.8612	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8615	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8617					_GXZeroPixel:
.8617	c8		iny				iny 								; advance pointer
.8618	d0 05		bne $861f			bne 	_GXNoShift
.861a	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.861c	20 6c 85	jsr $856c			jsr 	GXDLTCheckWrap				; check for new page.
.861f					_GXNoShift:
.861f	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.8621	d0 df		bne $8602			bne 	_GXROLLoop2
.8623	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.8625	a5 3a		lda $3a				lda 	gzTemp2
.8627	cd 50 06	cmp $0650			cmp 	gxSize
.862a	d0 d1		bne $85fd			bne 	_GXROLLoop1
.862c	ee 33 06	inc $0633			inc 	gxY0
.862f	60		rts				rts
.0650					gxSize:
>0650							.fill 	1
.0651					gxMask:
>0651							.fill 	1
.0652					gxAcquireVector:
>0652							.fill 	2
.0654					gxScale:
>0654							.fill 	1
.0655					gxVFlip:
>0655							.fill 	1
.0656					gxHFlip:
>0656							.fill 	1
.0657					gxUseMode:
>0657							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8630					GXFontHandler:
.8630	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.8632	4d 3c 06	eor $063c			eor 	gxMode
.8635	8d 57 06	sta $0657			sta 	gxUseMode
.8638	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.863a	06 36		asl $36				asl	 	gzTemp0 					; x 2
.863c	26 37		rol $37				rol	 	gzTemp0+1
.863e	06 36		asl $36				asl	 	gzTemp0 					; x 4
.8640	26 37		rol $37				rol	 	gzTemp0+1
.8642	06 36		asl $36				asl	 	gzTemp0 					; x 8
.8644	26 37		rol $37				rol	 	gzTemp0+1
.8646	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.8648	09 c0		ora #$c0			ora 	#$C0
.864a	85 37		sta $37				sta 	gzTemp0+1
.864c	a9 08		lda #$08			lda 	#8 							; size 8x8
.864e	a2 56		ldx #$56			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8650	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8652	20 79 85	jsr $8579			jsr 	GXDrawGraphicElement
.8655	60		rts				rts
.8656					GXGetGraphicDataFont:
.8656	8a		txa				txa 								; X->Y
.8657	a8		tay				tay
.8658	a6 01		ldx $01				ldx 	1 							; preserve old value
.865a	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.865c	85 01		sta $01				sta 	1
.865e	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.8660	86 01		stx $01				stx 	1 							; put old value back.
.8662	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8664					_GXExpand:
.8664	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8667	0a		asl a				asl 	a 							; shift bit 7 into C
.8668	90 08		bcc $8672			bcc 	_GXNoPixel
.866a	48		pha				pha 								; if set, set pixel buffer to current colour.
.866b	ad 3d 06	lda $063d			lda 	gxColour
.866e	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8671	68		pla				pla
.8672					_GXNoPixel:
.8672	e8		inx				inx 								; do the whole byte.
.8673	e0 08		cpx #$08			cpx 	#8
.8675	d0 ed		bne $8664			bne 	_GXExpand
.8677	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8678					GXSpriteHandler:
.8678	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.867a	4d 3c 06	eor $063c			eor 	gxMode
.867d	8d 57 06	sta $0657			sta 	gxUseMode
.8680	a6 36		ldx $36				ldx 	gzTemp0 					; sprite #
.8682	da		phx				phx
.8683	20 e0 86	jsr $86e0			jsr 	GXOpenBitmap 				; can access sprite information
.8686	68		pla				pla
.8687	20 6f 87	jsr $876f			jsr 	GXFindSprite 				; get the sprite address
.868a	20 f1 86	jsr $86f1			jsr 	GXCloseBitmap
.868d	ad 58 06	lda $0658			lda 	GXSSize 					; return size
.8690	a2 98		ldx #$98			ldx 	#GXSpriteAcquire & $FF
.8692	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.8694	20 79 85	jsr $8579			jsr 	GXDrawGraphicElement
.8697	60		rts				rts
.8698					GXSpriteAcquire:
.8698	ad 3a 06	lda $063a			lda 	GXSpritePage				; point to base page
.869b	85 0b		sta $0b				sta 	GFXEditSlot
.869d	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.869f	a9 00		lda #$00			lda 	#0
.86a1	ae 59 06	ldx $0659			ldx 	GXSSizeRaw
.86a4					_GXTimesRowNumber:
.86a4	18		clc				clc
.86a5	65 36		adc $36				adc 	zTemp0
.86a7	ca		dex				dex
.86a8	10 fa		bpl $86a4			bpl 	_GXTimesRowNumber
.86aa	64 37		stz $37				stz 	gzTemp0+1
.86ac	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ad	26 37		rol $37				rol 	gzTemp0+1
.86af	0a		asl a				asl 	a 							; row x 4,8,12,16
.86b0	26 37		rol $37				rol 	gzTemp0+1
.86b2	0a		asl a				asl 	a 							; row x 8,16,24,32
.86b3	26 37		rol $37				rol 	gzTemp0+1
.86b5	85 36		sta $36				sta 	gzTemp0
.86b7	18		clc				clc 								; add base address.
.86b8	a5 36		lda $36				lda 	gzTemp0
.86ba	6d 5b 06	adc $065b			adc 	GXSAddress
.86bd	85 36		sta $36				sta 	gzTemp0
.86bf	a5 37		lda $37				lda 	gzTemp0+1
.86c1	6d 5c 06	adc $065c			adc 	GXSAddress+1
.86c4					_GXSAFindPage:
.86c4	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86c6	90 06		bcc $86ce			bcc 	_GXSAFoundPage
.86c8	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86ca	e6 0b		inc $0b				inc 	GFXEditSlot
.86cc	80 f6		bra $86c4			bra 	_GXSAFindPage
.86ce					_GXSAFoundPage:
.86ce	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86d0	85 37		sta $37				sta 	gzTemp0+1 					; gzTemp0 now points to the page
.86d2	a0 00		ldy #$00			ldy 	#0
.86d4					_GXSACopyLoop:
.86d4	b1 36		lda ($36),y			lda 	(gzTemp0),y
.86d6	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86d9	c8		iny				iny
.86da	cc 58 06	cpy $0658			cpy 	GXSSize
.86dd	d0 f5		bne $86d4			bne 	_GXSACopyLoop
.86df	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.86e0					GXOpenBitmap:
.86e0	78		sei				sei 								; no interrupts here
.86e1	a5 00		lda $00				lda 	0 							; save original MMU Control register
.86e3	8d 41 06	sta $0641			sta 	gxOriginalMMUSetting
.86e6	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.86e8	85 00		sta $00				sta 	0
.86ea	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.86ec	8d 40 06	sta $0640			sta 	gxOriginalLUTValue
.86ef	58		cli				cli
.86f0	60		rts				rts
.86f1					GXCloseBitmap:
.86f1	78		sei				sei
.86f2	ad 40 06	lda $0640			lda 	gxOriginalLUTValue 			; restore LUT slot value
.86f5	85 0b		sta $0b				sta 	GFXEditSlot
.86f7	ad 41 06	lda $0641			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.86fa	85 00		sta $00				sta 	0
.86fc	58		cli				cli
.86fd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.86fe					GXPositionCalc:
.86fe	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.8700	48		pha				pha
.8701	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8704	85 3c		sta $3c				sta 	gsTemp
.8706	64 3d		stz $3d				stz 	gsTemp+1
.8708	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.870a	26 3d		rol $3d				rol 	gsTemp+1
.870c	06 3c		asl $3c				asl 	gsTemp
.870e	26 3d		rol $3d				rol 	gsTemp+1
.8710	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8711	65 3c		adc $3c				adc 	gsTemp
.8713	85 3c		sta $3c				sta 	gsTemp
.8715	90 02		bcc $8719			bcc 	_GXPCNoCarry
.8717	e6 3d		inc $3d				inc 	gsTemp+1
.8719					_GXPCNoCarry:
.8719	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.871b	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.871d	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.871f	85 36		sta $36				sta 	gzTemp0
.8721	64 3d		stz $3d				stz 	gsTemp+1
.8723	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8725					_GXPCMultiply32:
.8725	06 3c		asl $3c				asl 	gsTemp
.8727	26 3d		rol $3d				rol 	gsTemp+1
.8729	3a		dec a				dec 	a
.872a	d0 f9		bne $8725			bne 	_GXPCMultiply32
.872c	18		clc				clc
.872d	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.8730	65 3c		adc $3c				adc 	gsTemp
.8732	8d 42 06	sta $0642			sta 	gsOffset
.8735	ad 32 06	lda $0632			lda 	GXX0+1
.8738	65 3d		adc $3d				adc 	gsTemp+1
.873a	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.873c	90 04		bcc $8742			bcc 	_GXPCNoOverflow
.873e	29 1f		and #$1f			and 	#$1F 						; fix it up
.8740	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8742					_GXPCNoOverflow:
.8742	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8744	85 3d		sta $3d				sta 	gsTemp+1
.8746	64 3c		stz $3c				stz 	gsTemp
.8748	18		clc				clc
.8749	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.874b	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.874e	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8750	68		pla				pla
.8751	85 36		sta $36				sta 	gzTemp0
.8753	60		rts				rts
.8754					GXMovePositionDown:
.8754	18		clc				clc 								; add 320 to offset/temp+1
.8755	ad 42 06	lda $0642			lda 	gsOffset
.8758	69 40		adc #$40			adc 	#64
.875a	8d 42 06	sta $0642			sta 	gsOffset
.875d	a5 3d		lda $3d				lda 	gsTemp+1
.875f	69 01		adc #$01			adc 	#1
.8761	85 3d		sta $3d				sta 	gsTemp+1
.8763	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8765	90 07		bcc $876e			bcc 	_GXMPDExit
.8767	38		sec				sec  								; next page
.8768	e9 20		sbc #$20			sbc 	#$20
.876a	85 3d		sta $3d				sta 	gsTemp+1
.876c	e6 0b		inc $0b				inc 	GFXEditSlot
.876e					_GXMPDExit:
.876e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.876f					GXFindSprite:
.876f	aa		tax				tax
.8770	ad 3a 06	lda $063a			lda 	GXSpritePage 				; access the base page of the sprite
.8773	85 0b		sta $0b				sta 	GFXEditSlot
.8775	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8778	8d 5c 06	sta $065c			sta 	GXSAddress+1
.877b	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.877e	48		pha				pha 								; save twice
.877f	48		pha				pha
.8780	29 03		and #$03			and 	#3 							; get sprite size
.8782	8d 59 06	sta $0659			sta 	GXSSizeRaw 					; save raw (0-3)
.8785	aa		tax				tax
.8786	bd a7 87	lda $87a7,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8789	8d 58 06	sta $0658			sta 	GXSSize 					; save (8/16/24/32)
.878c	68		pla				pla 								; get LUT
.878d	4a		lsr a				lsr		a
.878e	4a		lsr a				lsr		a
.878f	29 03		and #$03			and 	#3
.8791	8d 5a 06	sta $065a			sta 	GXSLUT
.8794	68		pla				pla 								; address, neeeds to be x 4
.8795	29 f0		and #$f0			and 	#$F0
.8797	8d 5b 06	sta $065b			sta 	GXSAddress
.879a	0e 5b 06	asl $065b			asl 	GXSAddress
.879d	2e 5c 06	rol $065c			rol 	GXSAddress+1
.87a0	0e 5b 06	asl $065b			asl 	GXSAddress
.87a3	2e 5c 06	rol $065c			rol 	GXSAddress+1
.87a6	60		rts				rts
.87a7					_GXFXSSTTable:
>87a7	08 10 18 20					.byte 	8,16,24,32
.0658					GXSSize:
>0658							.fill 	1
.0659					GXSSizeRaw:
>0659							.fill 	1
.065a					GXSLUT:
>065a							.fill 	1
.065b					GXSAddress:
>065b							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.87ab					GXSortXY:
.87ab	20 c9 87	jsr $87c9			jsr 	GXSortY 					; will be sorted on Y now
.87ae	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.87b1	cd 35 06	cmp $0635			cmp 	gxX1
.87b4	ad 32 06	lda $0632			lda 	gXX0+1
.87b7	ed 36 06	sbc $0636			sbc 	gXX1+1
.87ba	90 0c		bcc $87c8			bcc 	_GXSXYExit 					; X0 < X1 exit
.87bc	a2 00		ldx #$00			ldx 	#0 							; swap them over
.87be	a0 04		ldy #$04			ldy 	#4
.87c0	20 dd 87	jsr $87dd			jsr 	GXSwapXY
.87c3	e8		inx				inx
.87c4	c8		iny				iny
.87c5	20 dd 87	jsr $87dd			jsr 	GXSwapXY
.87c8					_GXSXYExit:
.87c8	60		rts				rts
.87c9					GXSortY:
.87c9	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.87cc	cd 37 06	cmp $0637			cmp 	gxY1
.87cf	90 0b		bcc $87dc			bcc 	_GXSYSorted
.87d1	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.87d3	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.87d5					_GXSwap1:
.87d5	20 dd 87	jsr $87dd			jsr 	GXSwapXY
.87d8	88		dey				dey
.87d9	ca		dex				dex
.87da	10 f9		bpl $87d5			bpl 	_GXSwap1
.87dc					_GXSYSorted:
.87dc	60		rts				rts
.87dd					GXSwapXY:
.87dd	bd 31 06	lda $0631,x			lda 	gxX0,x
.87e0	48		pha				pha
.87e1	b9 31 06	lda $0631,y			lda 	gxX0,y
.87e4	9d 31 06	sta $0631,x			sta 	gxX0,x
.87e7	68		pla				pla
.87e8	99 31 06	sta $0631,y			sta 	gxX0,y
.87eb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.87ec					RunDemos:
.87ec					loop:
.87ec	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.87ee	a2 01		ldx #$01			ldx 	#((1) & $FF)
.87f0	a0 00		ldy #$00			ldy 	#(0)
.87f2	20 85 80	jsr $8085			jsr 	GraphicDraw
.87f5	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.87f7	a2 01		ldx #$01			ldx 	#((1) & $FF)
.87f9	a0 00		ldy #$00			ldy 	#(0)
.87fb	20 85 80	jsr $8085			jsr 	GraphicDraw
.87fe	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.8800	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.8802	a0 00		ldy #$00			ldy 	#(0)
.8804	20 85 80	jsr $8085			jsr 	GraphicDraw
.8807	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.8809	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.880b	a0 00		ldy #$00			ldy 	#(0)
.880d	20 85 80	jsr $8085			jsr 	GraphicDraw
.8810	a9 20		lda #$20			lda 	#((16)*2)+(((30) >> 8) & 1)
.8812	a2 1e		ldx #$1e			ldx 	#((30) & $FF)
.8814	a0 82		ldy #$82			ldy 	#(130)
.8816	20 85 80	jsr $8085			jsr 	GraphicDraw
.8819	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.881b	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.881d	a0 08		ldy #$08			ldy 	#(1*8)
.881f	20 85 80	jsr $8085			jsr 	GraphicDraw
.8822	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.8824	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.8826	a0 08		ldy #$08			ldy 	#(1*8)
.8828	20 85 80	jsr $8085			jsr 	GraphicDraw
.882b	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.882d	a2 00		ldx #$00			ldx 	#((0) & $FF)
.882f	a0 08		ldy #$08			ldy 	#(1*8)
.8831	20 85 80	jsr $8085			jsr 	GraphicDraw
.8834	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8836	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8838	a0 08		ldy #$08			ldy 	#(1*8)
.883a	20 85 80	jsr $8085			jsr 	GraphicDraw
.883d	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.883f	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8841	a0 08		ldy #$08			ldy 	#(1*8)
.8843	20 85 80	jsr $8085			jsr 	GraphicDraw
.8846	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8848	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.884a	a0 0a		ldy #$0a			ldy 	#(10)
.884c	20 85 80	jsr $8085			jsr 	GraphicDraw
.884f	a9 24		lda #$24			lda 	#((18)*2)+(((100) >> 8) & 1)
.8851	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8853	a0 64		ldy #$64			ldy 	#(100)
.8855	20 85 80	jsr $8085			jsr 	GraphicDraw
.8858	60		rts				rts
.8859	20 d2 9e	jsr $9ed2	demo:	jsr 	Random32Bit
.885c	ee 3e 06	inc $063e			inc 	gxEORValue
.885f	a9 30		lda #$30			lda 	#24*2
.8861	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8864	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8867	20 85 80	jsr $8085			jsr 	GraphicDraw
.886a	80 ed		bra $8859			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.886c					AssembleGroup1:
.886c	a9 ff		lda #$ff			lda 	#$FF
.886e	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8871	80 02		bra $8875			bra 	AsmGroup12
.8873					AssembleGroup2:
.8873	a5 00		lda $00				lda 	$00
.8875					AsmGroup12:
.8875	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8878	68		pla				pla 								; pop the return address to access the information following.
.8879	fa		plx				plx
.887a	20 03 89	jsr $8903			jsr 	AccessParameters 			; get opcode and save as base
.887d	8d a4 04	sta $04a4			sta 	BaseOpcode
.8880	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8883	d0 08		bne $888d			bne 	_AG12HaveMask
.8885	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8887	20 0b 89	jsr $890b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.888a	8d a5 04	sta $04a5			sta 	ModeMask
.888d					_AG12HaveMask:
.888d	20 46 8a	jsr $8a46			jsr 	TypeAndCalculateOperand 	; get zero page type
.8890	da		phx				phx 								; save found address mode
.8891	20 6f 89	jsr $896f			jsr 	AssembleModeX
.8894	fa		plx				plx  								; restore address mode
.8895	b0 0b		bcs $88a2			bcs 	_AG12Exit
.8897	20 a3 88	jsr $88a3			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.889a	20 6f 89	jsr $896f			jsr 	AssembleModeX
.889d	b0 03		bcs $88a2			bcs 	_AG12Exit
.889f	4c 11 af	jmp $af11			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.88a2					_AG12Exit:
.88a2	60		rts				rts
.88a3					PromoteToAbsolute:
.88a3	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.88a5	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.88a7	f0 19		beq $88c2			beq 	_PTADo
.88a9	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.88ab	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.88ad	f0 13		beq $88c2			beq 	_PTADo
.88af	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.88b1	e0 80		cpx #$80			cpx 	#AM_ZEROY
.88b3	f0 0d		beq $88c2			beq 	_PTADo
.88b5	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.88b7	e0 d1		cpx #$d1			cpx 	#AM_IND
.88b9	f0 07		beq $88c2			beq 	_PTADo
.88bb	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.88bd	e0 c0		cpx #$c0			cpx 	#AM_INDX
.88bf	f0 01		beq $88c2			beq 	_PTADo
.88c1	60		rts				rts
.88c2					_PTADo:
.88c2	aa		tax				tax
.88c3	60		rts				rts
.88c4					AssembleGroup3:
.88c4	68		pla				pla 								; get parameters, which is just the opcode.
.88c5	fa		plx				plx
.88c6	20 03 89	jsr $8903			jsr 	AccessParameters 			; get and output opcode
.88c9	20 1b 89	jsr $891b			jsr 	AssemblerWriteByte
.88cc	20 aa 8a	jsr $8aaa			jsr 	CalculateOperand 			; get a 16 bit operand
.88cf	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.88d2	38		sec				sec
.88d3	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.88d6	48		pha				pha 								; LSB in A
.88d7	ad 10 04	lda $0410			lda 	NSMantissa1
.88da	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.88dd	aa		tax				tax 								; MSB in X
.88de	68		pla				pla
.88df	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.88e0	69 7f		adc #$7f			adc 	#$7F
.88e2	90 01		bcc $88e5			bcc 	_AG3NoCarry
.88e4	e8		inx				inx
.88e5					_AG3NoCarry:
.88e5	38		sec				sec 								; fix back and write out anyways.
.88e6	e9 80		sbc #$80			sbc 	#$80
.88e8	20 1b 89	jsr $891b			jsr 	AssemblerWriteByte
.88eb	e0 00		cpx #$00			cpx 	#0 							; was it in range
.88ed	f0 0a		beq $88f9			beq 	_AG3Exit
.88ef	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.88f2	29 01		and #$01			and 	#1
.88f4	f0 03		beq $88f9			beq 	_AG3Exit
.88f6	4c 16 af	jmp $af16			jmp 	RangeError 					; no, branch is out of range
.88f9					_AG3Exit:
.88f9	60		rts				rts
.88fa					AssembleGroup4:
.88fa	68		pla				pla 								; pop address
.88fb	fa		plx				plx
.88fc	20 03 89	jsr $8903			jsr 	AccessParameters 			; access and get first
.88ff	20 1b 89	jsr $891b			jsr 	AssemblerWriteByte 			; output it.
.8902	60		rts				rts
.8903					AccessParameters:
.8903	8d a1 04	sta $04a1			sta 	ParamStart
.8906	8e a2 04	stx $04a2			stx 	ParamStart+1
.8909	a9 01		lda #$01			lda 	#1
.890b					GetParameter:
.890b	5a		phy				phy
.890c	a8		tay				tay
.890d	ad a1 04	lda $04a1			lda 	ParamStart
.8910	85 36		sta $36				sta 	zTemp0
.8912	ad a2 04	lda $04a2			lda 	ParamStart+1
.8915	85 37		sta $37				sta 	zTemp0+1
.8917	b1 36		lda ($36),y			lda 	(zTemp0),y
.8919	7a		ply				ply
.891a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.891b					AssemblerWriteByte:
.891b	48		pha			pha
.891c	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.891f	29 02		and #$02		and 	#2
.8921	f0 1b		beq $893e		beq 	_AWBNoPrint
.8923	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8926	20 59 89	jsr $8959		jsr 	PrintHex
.8929	ad 9e 04	lda $049e		lda		AssemblerAddress
.892c	20 59 89	jsr $8959		jsr 	PrintHex
.892f	a9 20		lda #$20		lda 	#' '
.8931	20 b6 b0	jsr $b0b6		jsr 	EXTPrintCharacter
.8934	68		pla			pla 									; print byte
.8935	48		pha			pha
.8936	20 59 89	jsr $8959		jsr 	PrintHex
.8939	a9 0d		lda #$0d		lda 	#13
.893b	20 b6 b0	jsr $b0b6		jsr 	EXTPrintCharacter
.893e					_AWBNoPrint:
.893e	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8941	85 36		sta $36			sta 	zTemp0
.8943	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8946	f0 0e		beq $8956		beq 	_AWBRange
.8948	85 37		sta $37			sta 	zTemp0+1
.894a	68		pla			pla 									; write byte out
.894b	92 36		sta ($36)		sta 	(zTemp0)
.894d	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8950	d0 03		bne $8955		bne 	_AWBNoCarry
.8952	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8955					_AWBNoCarry:
.8955	60		rts			rts
.8956					_AWBRange:
.8956	4c 16 af	jmp $af16		jmp 	RangeError
.8959					PrintHex:
.8959	48		pha				pha
.895a	4a		lsr a				lsr 	a
.895b	4a		lsr a				lsr 	a
.895c	4a		lsr a				lsr 	a
.895d	4a		lsr a				lsr 	a
.895e	20 62 89	jsr $8962			jsr 	_PrintNibble
.8961	68		pla				pla
.8962					_PrintNibble:
.8962	29 0f		and #$0f			and 	#15
.8964	c9 0a		cmp #$0a			cmp 	#10
.8966	90 02		bcc $896a			bcc 	_NoShift
.8968	69 06		adc #$06			adc 	#6
.896a					_NoShift:
.896a	69 30		adc #$30			adc 	#48
.896c	4c b6 b0	jmp $b0b6			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.896f					AssembleModeX:
.896f	5a		phy				phy
.8970	ad a3 04	lda $04a3			lda 	IsGroup1
.8973	f0 17		beq $898c			beq 	_AMXGroup2
.8975	8a		txa				txa 							; is it in group # 1
.8976	29 40		and #$40			and 	#AM_ISG1
.8978	f0 50		beq $89ca			beq 	_AMXFail 				; no, give up.
.897a	8a		txa				txa 							; get back.
.897b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.897d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.897f	d0 22		bne $89a3			bne 	_AMXHaveInfo
.8981	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8984	c9 81		cmp #$81			cmp 	#$81
.8986	f0 42		beq $89ca			beq 	_AMXFail
.8988	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.898a	80 17		bra $89a3			bra 	_AMXHaveInfo 			; odd design decision there.
.898c					_AMXGroup2:
.898c	8a		txa				txa 							; is it in group 2 ?
.898d	29 20		and #$20			and 	#AM_ISG2
.898f	f0 39		beq $89ca			beq 	_AMXFail 				; no, give up.
.8991	8a		txa				txa 							; get the offset into Y
.8992	29 1f		and #$1f			and 	#$1F
.8994	4a		lsr a				lsr 	a 						; make it 0-7.
.8995	4a		lsr a				lsr  	a
.8996	a8		tay				tay
.8997	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.899a					_AMXCheckOkay:
.899a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.899b	88		dey				dey
.899c	10 fc		bpl $899a			bpl 	_AMXCheckOkay
.899e	90 2a		bcc $89ca			bcc 	_AMXFail 				; not allowed.
.89a0	8a		txa				txa  							; get mask back
.89a1	29 1f		and #$1f			and 	#$1F
.89a3					_AMXHaveInfo:
.89a3	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.89a5	10 05		bpl $89ac			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.89a7	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.89aa	d0 1e		bne $89ca			bne 	_AMXFail
.89ac					_AMXAnySize:
.89ac	18		clc				clc 							; add offset to the base opcode
.89ad	6d a4 04	adc $04a4			adc 	BaseOpcode
.89b0					_AMXOutputCode:
.89b0	20 1b 89	jsr $891b			jsr 	AssemblerWriteByte 		; write the opcode out.
.89b3	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.89b5	f0 10		beq $89c7			beq 	_AMXExit
.89b7	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.89ba	20 1b 89	jsr $891b			jsr 	AssemblerWriteByte
.89bd	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.89bf	30 06		bmi $89c7			bmi 	_AMXExit
.89c1	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.89c4	20 1b 89	jsr $891b			jsr 	AssemblerWriteByte
.89c7					_AMXExit:
.89c7	7a		ply				ply
.89c8	38		sec				sec
.89c9	60		rts				rts
.89ca					_AMXFail:
.89ca	a0 00		ldy #$00			ldy 	#0
.89cc					_AMXCheckOddities:
.89cc	8a		txa				txa
.89cd	d9 f5 89	cmp $89f5,y			cmp 	ExtraOpcode+2,y 		; match address mode
.89d0	d0 16		bne $89e8			bne 	_AMXCONext
.89d2	b9 f3 89	lda $89f3,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.89d5	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.89d8	d0 0e		bne $89e8			bne 	_AMXCONext
.89da	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.89dc	10 05		bpl $89e3			bpl 	_AMXCONotZero
.89de	ad 10 04	lda $0410			lda 	NSMantissa1
.89e1	d0 05		bne $89e8			bne 	_AMXCONext
.89e3					_AMXCONotZero:
.89e3	b9 f4 89	lda $89f4,y			lda 	ExtraOpcode+1,y 		; get new opcode
.89e6	80 c8		bra $89b0			bra 	_AMXOutputCode 			; and assemble it
.89e8					_AMXCONext:
.89e8	c8		iny				iny
.89e9	c8		iny				iny
.89ea	c8		iny				iny
.89eb	b9 f3 89	lda $89f3,y			lda 	ExtraOpcode+0,y 		; end of table
.89ee	d0 dc		bne $89cc			bne 	_AMXCheckOddities
.89f0					_AMXCOFail:
.89f0	7a		ply				ply
.89f1	18		clc				clc
.89f2	60		rts				rts
.89f3					ExtraOpcode:
>89f3	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>89f6	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>89f9	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>89fc	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>89ff	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a02	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a05	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a08	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a0b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a0e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a11	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a12					LabelHere:
.8a12	c8		iny				iny 								; skip .
.8a13	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a15	20 43 9c	jsr $9c43			jsr 	EvaluateTerm 				; get a term
.8a18	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a1b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a1d	d0 24		bne $8a43			bne 	_ALType
.8a1f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a22	85 36		sta $36				sta 	zTemp0
.8a24	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a27	85 37		sta $37				sta 	zTemp0+1
.8a29	5a		phy				phy 								; copy address in.
.8a2a	a0 01		ldy #$01			ldy 	#1
.8a2c	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8a2f	92 36		sta ($36)			sta 	(zTemp0)
.8a31	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8a34	91 36		sta ($36),y			sta 	(zTemp0),y
.8a36	c8		iny				iny
.8a37	a9 00		lda #$00			lda 	#0
.8a39	91 36		sta ($36),y			sta 	(zTemp0),y
.8a3b	c8		iny				iny
.8a3c	91 36		sta ($36),y			sta 	(zTemp0),y
.8a3e	c8		iny				iny
.8a3f	91 36		sta ($36),y			sta 	(zTemp0),y
.8a41	7a		ply				ply
.8a42	60		rts				rts
.8a43					_ALType:
.8a43	4c 1b af	jmp $af1b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8a46					TypeAndCalculateOperand:
.8a46	b1 30		lda ($30),y			lda 	(codePtr),y
.8a48	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8a4a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a4c	f0 5b		beq $8aa9			beq 	_TACOExit
.8a4e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a50	f0 57		beq $8aa9			beq 	_TACOExit
.8a52	c8		iny				iny
.8a53	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8a55	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8a57	f0 51		beq $8aaa			beq 	CalculateOperand
.8a59	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8a5b	f0 1f		beq $8a7c			beq 	_TACOIndirect
.8a5d	88		dey				dey 								; undo get of first character
.8a5e	20 aa 8a	jsr $8aaa			jsr 	CalculateOperand 			; get operand
.8a61	b1 30		lda ($30),y			lda 	(codePtr),y
.8a63	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8a65	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a67	d0 40		bne $8aa9			bne 	_TACOExit
.8a69	c8		iny				iny
.8a6a	20 a2 a8	jsr $a8a2			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8a6d	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8a6f	c9 58		cmp #$58			cmp 	#'X'
.8a71	f0 36		beq $8aa9			beq 	_TACOExit
.8a73	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8a75	c9 59		cmp #$59			cmp 	#'Y'
.8a77	f0 30		beq $8aa9			beq 	_TACOExit
.8a79					_TACOSyntax:
.8a79	4c 11 af	jmp $af11			jmp 	SyntaxError
.8a7c					_TACOIndirect:
.8a7c	20 aa 8a	jsr $8aaa			jsr 	CalculateOperand 			; get the operand
.8a7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a81	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8a83	f0 17		beq $8a9c			beq 	_TACOIndX
.8a85	20 2b a9	jsr $a92b			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8a88	b1 30		lda ($30),y			lda 	(codePtr),y
.8a8a	a2 d1		ldx #$d1			ldx 	#AM_IND
.8a8c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8a8e	d0 19		bne $8aa9			bne 	_TACOExit
.8a90	c8		iny				iny
.8a91	20 a2 a8	jsr $a8a2			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8a94	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8a96	d0 e1		bne $8a79			bne 	_TACOSyntax
.8a98	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8a9a	80 0d		bra $8aa9			bra 	_TACOExit
.8a9c					_TACOIndX:
.8a9c	c8		iny				iny
.8a9d	20 a2 a8	jsr $a8a2			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8aa0	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8aa2	d0 d5		bne $8a79			bne 	_TACOSyntax
.8aa4	20 2b a9	jsr $a92b			jsr 	CheckRightBracket			; check )
.8aa7	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8aa9					_TACOExit:
.8aa9	60		rts				rts
.8aaa					CalculateOperand:
.8aaa	48		pha				pha
.8aab	da		phx				phx
.8aac	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8aae	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger
.8ab1	fa		plx				plx
.8ab2	68		pla				pla
.8ab3	60		rts				rts
.a8a2					TACOCheckXY:
.a8a2	b1 30		lda ($30),y			lda 	(codePtr),y
.a8a4	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a8a6	c9 40		cmp #$40			cmp 	#$40
.a8a8	d0 21		bne $a8cb			bne 	_TCXYFail
.a8aa	b1 30		lda ($30),y			lda 	(codePtr),y
.a8ac	18		clc				clc
.a8ad	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a8af	85 37		sta $37				sta 	zTemp0+1
.a8b1	c8		iny				iny
.a8b2	b1 30		lda ($30),y			lda 	(codePtr),y
.a8b4	c8		iny				iny
.a8b5	85 36		sta $36				sta 	zTemp0
.a8b7	5a		phy				phy 								; save position
.a8b8	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a8ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.a8bc	d0 0c		bne $a8ca			bne 	_TCXYPopFail
.a8be	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a8c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.a8c2	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a8c4	f0 08		beq $a8ce			beq 	_TCXYFound
.a8c6	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a8c8	f0 04		beq $a8ce			beq 	_TCXYFound
.a8ca					_TCXYPopFail:
.a8ca	7a		ply				ply
.a8cb					_TCXYFail:
.a8cb	a9 00		lda #$00			lda 	#0
.a8cd	60		rts				rts
.a8ce					_TCXYFound:
.a8ce	7a		ply				ply 								; restore position
.a8cf	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a8d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8ab4					EditProgramCode:
.8ab4	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8ab7	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8aba	20 80 a1	jsr $a180			jsr 	MemorySearch
.8abd	90 05		bcc $8ac4			bcc 	_EPCNoDelete 				; reached the end don't delete
.8abf	d0 03		bne $8ac4			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8ac1	20 fa b0	jsr $b0fa			jsr 	MemoryDeleteLine 			; delete the line
.8ac4					_EPCNoDelete:
.8ac4	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8ac7	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ac9	f0 0d		beq $8ad8			beq 	_EPCNoInsert
.8acb	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8ace	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8ad1	20 80 a1	jsr $a180			jsr 	MemorySearch
.8ad4	18		clc				clc 								; insert at this point.
.8ad5	20 31 b1	jsr $b131			jsr 	MemoryInsertLine 			; insert the line
.8ad8					_EPCNoInsert:
.8ad8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8ad9					WarmStart:
.8ad9	a2 ff		ldx #$ff			ldx 	#$FF
.8adb	9a		txs				txs
.8adc	20 cc b0	jsr $b0cc			jsr 	EXTInputLine 				; get line to lineBuffer
.8adf	20 23 a6	jsr $a623			jsr 	TokeniseLine 				; tokenise the line
.8ae2	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8ae5	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8ae8	d0 17		bne $8b01			bne 	_WSEditCode 				; if so,edit code.
.8aea	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8aed	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8aef	85 30		sta $30				sta 	codePtr
.8af1	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8af3	85 31		sta $31				sta 	codePtr+1
.8af5	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8af8	c9 80		cmp #$80			cmp 	#KWC_EOL
.8afa	f0 dd		beq $8ad9			beq 	WarmStart
.8afc	20 0a 91	jsr $910a			jsr 	RUNCodePointerLine 			; execute that line.
.8aff	80 d8		bra $8ad9			bra 	WarmStart
.8b01					_WSEditCode:
.8b01	20 b4 8a	jsr $8ab4			jsr 	EditProgramCode
.8b04	20 72 8b	jsr $8b72			jsr 	ClearCommand
.8b07	80 d0		bra $8ad9			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b09					AssembleCommand:
.8b09	a2 00		ldx #$00			ldx 	#0
.8b0b	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger 		; start address
.8b0e	ad 08 04	lda $0408			lda 	NSMantissa0
.8b11	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b14	ad 10 04	lda $0410			lda 	NSMantissa1
.8b17	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b1a	20 33 a9	jsr $a933			jsr 	CheckComma
.8b1d	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger 		; options
.8b20	ad 08 04	lda $0408			lda 	NSMantissa0
.8b23	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b26	60		rts				rts
.8b27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b28					AssertCommand:
.8b28	a2 00		ldx #$00			ldx 	#0
.8b2a	20 98 a0	jsr $a098			jsr 	EvaluateInteger 			; the assert test
.8b2d	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; exit if result is non zero.
.8b30	d0 05		bne $8b37			bne 	_ACExit
.8b32	a9 0a		lda #$0a		lda	#10
.8b34	4c 69 95	jmp $9569		jmp	ErrorHandler
.8b37					_ACExit:
.8b37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8b38					CallCommand:
.8b38	a2 00		ldx #$00			ldx 	#0
.8b3a	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger
.8b3d					_CCClear
.8b3d	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8b3e	20 21 a1	jsr $a121			jsr 	NSMSetZero
.8b41	e0 04		cpx #$04			cpx 	#4
.8b43	d0 f8		bne $8b3d			bne 	_CCClear
.8b45	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8b47					_CCCParam:
.8b47	b1 30		lda ($30),y			lda 	(codePtr),y
.8b49	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b4b	d0 09		bne $8b56			bne 	_CCCRun6502
.8b4d	c8		iny				iny 								; skip comma
.8b4e	e8		inx				inx	 								; next level
.8b4f	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8b52	e0 03		cpx #$03			cpx 	#3
.8b54	90 f1		bcc $8b47			bcc 	_CCCParam 					; done all 3 ?
.8b56					_CCCRun6502:
.8b56	5a		phy				phy 								; save position
.8b57	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8b5a	85 37		sta $37				sta 	zTemp0+1
.8b5c	ad 08 04	lda $0408			lda 	NSMantissa0
.8b5f	85 36		sta $36				sta 	zTemp0
.8b61	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8b64	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8b67	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8b6a	20 6f 8b	jsr $8b6f			jsr 	_CCCZTemp0 					; call zTemp0
.8b6d	7a		ply				ply 								; restore position and exit
.8b6e	60		rts				rts
.8b6f					_CCCZTemp0:
.8b6f	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8b72					ClearCommand:
.8b72	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b74	85 36		sta $36				sta 	0+zTemp0
.8b76	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8b78	85 37		sta $37				sta 	1+zTemp0
.8b7a					_ClearZeroLoop:
.8b7a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8b7c	f0 24		beq $8ba2			beq 	_ClearZeroEnd
.8b7e	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8b80	a9 00		lda #$00			lda 	#0
.8b82					_ClearOneVariable:
.8b82	91 36		sta ($36),y			sta 	(zTemp0),y
.8b84	c8		iny				iny
.8b85	c0 08		cpy #$08			cpy 	#8
.8b87	d0 f9		bne $8b82			bne 	_ClearOneVariable
.8b89	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8b8b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b8d	c9 18		cmp #$18			cmp 	#NSTProcedure
.8b8f	d0 04		bne $8b95			bne 	_ClearNotProcedure
.8b91	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8b93	91 36		sta ($36),y			sta 	(zTemp0),y
.8b95					_ClearNotProcedure:
.8b95	18		clc				clc 								; go to the next variable
.8b96	b2 36		lda ($36)			lda 	(zTemp0)
.8b98	65 36		adc $36				adc 	zTemp0
.8b9a	85 36		sta $36				sta 	zTemp0
.8b9c	90 dc		bcc $8b7a			bcc 	_ClearZeroLoop
.8b9e	e6 37		inc $37				inc 	zTemp0+1
.8ba0	80 d8		bra $8b7a			bra 	_ClearZeroLoop
.8ba2					_ClearZeroEnd:
.8ba2	18		clc				clc
.8ba3	a5 36		lda $36				lda 	zTemp0
.8ba5	69 01		adc #$01			adc 	#1
.8ba7	8d 8c 04	sta $048c			sta 	lowMemPtr
.8baa	a5 37		lda $37				lda 	zTemp0+1
.8bac	69 00		adc #$00			adc 	#0
.8bae	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8bb1	20 3a a2	jsr $a23a			jsr 	StackReset
.8bb4	20 14 b2	jsr $b214			jsr 	StringSystemInitialise
.8bb7	20 89 94	jsr $9489			jsr 	ProcedureScan
.8bba	20 c6 90	jsr $90c6			jsr 	Command_Restore
.8bbd	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8bc0	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8bc3	9c a0 04	stz $04a0			stz 	AssemblerControl
.8bc6	20 30 9e	jsr $9e30			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8bc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8bca					Command_Data:
.8bca	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8bcc	a2 80		ldx #$80			ldx 	#KWC_EOL
.8bce	20 db 94	jsr $94db			jsr 	ScanForward
.8bd1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8bd2					DimCommand:
.8bd2	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd4	29 c0		and #$c0			and 	#$C0
.8bd6	c9 40		cmp #$40			cmp 	#$40
.8bd8	d0 7a		bne $8c54			bne 	_DCSyntax
.8bda	b1 30		lda ($30),y			lda 	(codePtr),y
.8bdc	18		clc				clc
.8bdd	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8bdf	85 3f		sta $3f				sta 	zaTemp+1
.8be1	c8		iny				iny
.8be2	b1 30		lda ($30),y			lda 	(codePtr),y
.8be4	c8		iny				iny
.8be5	85 3e		sta $3e				sta 	zaTemp
.8be7	5a		phy				phy
.8be8	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8bea	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8bec	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8bee	c9 18		cmp #$18			cmp 	#NSTProcedure
.8bf0	f0 62		beq $8c54			beq 	_DCSyntax
.8bf2	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8bf4	29 04		and #$04			and 	#NSBIsArray
.8bf6	f0 64		beq $8c5c			beq 	_DCType
.8bf8	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8bfa	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8bfc	d0 59		bne $8c57			bne 	_DCRedefine
.8bfe	7a		ply				ply
.8bff	20 5f 8c	jsr $8c5f			jsr 	_DCGetSize 				; get array size, check it.
.8c02	5a		phy				phy
.8c03	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c05	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c07	7a		ply				ply 							; is there a second (e.g. ,x)
.8c08	b1 30		lda ($30),y			lda 	(codePtr),y
.8c0a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c0c	d0 0a		bne $8c18			bne 	_DCOneDimension
.8c0e	c8		iny				iny 							; skip comma
.8c0f	20 5f 8c	jsr $8c5f			jsr 	_DCGetSize 				; get 2nd array size
.8c12	5a		phy				phy
.8c13	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c15	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c17	7a		ply				ply
.8c18					_DCOneDimension:
.8c18	5a		phy				phy 							; save position
.8c19	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c1b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c1d	aa		tax				tax
.8c1e	c8		iny				iny
.8c1f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c21	e8		inx				inx 							; bump them.
.8c22	1a		inc a				inc 	a
.8c23	20 ad ad	jsr $adad			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c26	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8c28	29 e0		and #$e0			and 	#$E0
.8c2a	d0 23		bne $8c4f			bne 	_DCSize
.8c2c	a0 02		ldy #$02			ldy 	#2 						; get base type
.8c2e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c30	20 6d 8c	jsr $8c6d			jsr 	ScaleByBaseType 		; scale by base type
.8c33	a5 36		lda $36				lda 	zTemp0
.8c35	a6 37		ldx $37				ldx 	zTemp0+1
.8c37	20 f2 9d	jsr $9df2			jsr 	AllocateXABytes 		; allocate memory
.8c3a	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8c3c	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c3e	c8		iny				iny
.8c3f	8a		txa				txa
.8c40	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c42	7a		ply				ply 							; get position back
.8c43	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 		; check )
.8c46	b1 30		lda ($30),y			lda 	(codePtr),y
.8c48	c8		iny				iny 							; consume in case
.8c49	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8c4b	f0 85		beq $8bd2			beq 	DimCommand
.8c4d	88		dey				dey 							; undo consume
.8c4e	60		rts				rts
.8c4f					_DCSize:
.8c4f	a9 16		lda #$16		lda	#22
.8c51	4c 69 95	jmp $9569		jmp	ErrorHandler
.8c54					_DCSyntax:
.8c54	4c 11 af	jmp $af11			jmp 	SyntaxError
.8c57					_DCRedefine:
.8c57	a9 15		lda #$15		lda	#21
.8c59	4c 69 95	jmp $9569		jmp	ErrorHandler
.8c5c					_DCType:
.8c5c	4c 1b af	jmp $af1b			jmp 	TypeError
.8c5f					_DCGetSize:
.8c5f	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8c61	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger 	; get array dimension
.8c64	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8c66	f0 e7		beq $8c4f			beq 	_DCSize
.8c68	c9 fe		cmp #$fe			cmp 	#254
.8c6a	f0 e3		beq $8c4f			beq 	_DCSize
.8c6c	60		rts				rts
.8c6d					ScaleByBaseType:
.8c6d	29 10		and #$10			and 	#NSBIsString 			; is it string
.8c6f	d0 19		bne $8c8a			bne 	_SBBTString
.8c71	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8c73	48		pha				pha
.8c74	a5 36		lda $36				lda 	zTemp0
.8c76	48		pha				pha
.8c77	06 36		asl $36				asl 	zTemp0 					; x 2
.8c79	26 37		rol $37				rol 	zTemp0+1
.8c7b	06 36		asl $36				asl 	zTemp0 					; x 4
.8c7d	26 37		rol $37				rol 	zTemp0+1
.8c7f	68		pla				pla 							; add stacked value = x 5
.8c80	65 36		adc $36				adc 	zTemp0
.8c82	85 36		sta $36				sta 	zTemp0
.8c84	68		pla				pla
.8c85	65 37		adc $37				adc 	zTemp0+1
.8c87	85 37		sta $37				sta 	zTemp0+1
.8c89	60		rts				rts
.8c8a					_SBBTString:
.8c8a	06 36		asl $36				asl 	zTemp0
.8c8c	26 37		rol $37				rol 	zTemp0+1
.8c8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8c8f					EndCommand:
.8c8f	4c d9 8a	jmp $8ad9			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c92					ForCommand:
.8c92	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8c94	20 d5 a1	jsr $a1d5			jsr 	StackOpen
.8c97	a2 00		ldx #$00			ldx 	#0
.8c99	20 43 9c	jsr $9c43			jsr 	EvaluateTerm
.8c9c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c9f	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8ca1	d0 49		bne $8cec			bne		_FCError
.8ca3	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8ca5	20 3b a9	jsr $a93b			jsr 	CheckNextA
.8ca8	e8		inx				inx
.8ca9	20 98 a0	jsr $a098			jsr 	EvaluateInteger 			; <from> in +1
.8cac	b1 30		lda ($30),y			lda 	(codePtr),y
.8cae	c8		iny				iny 								; consume it
.8caf	48		pha				pha 								; save on stack for later
.8cb0	c9 ad		cmp #$ad			cmp 	#KWD_DOWNTO
.8cb2	f0 04		beq $8cb8			beq 	_FCNoSyntax
.8cb4	c9 c2		cmp #$c2			cmp 	#KWD_TO
.8cb6	d0 37		bne $8cef			bne 	_FCSyntaxError
.8cb8					_FCNoSyntax:
.8cb8	e8		inx				inx
.8cb9	20 98 a0	jsr $a098			jsr 	EvaluateInteger
.8cbc	20 19 a2	jsr $a219			jsr 	STKSaveCodePosition 		; save loop back position
.8cbf	68		pla				pla 								; restore DOWNTO or TO
.8cc0	5a		phy				phy 								; save Y on the stack
.8cc1	49 ad		eor #$ad			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8cc3	f0 02		beq $8cc7			beq 	_FCNotDownTo
.8cc5	a9 02		lda #$02			lda 	#2
.8cc7					_FCNotDownTo:
.8cc7	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8cc8	a0 10		ldy #$10			ldy 	#16
.8cca	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8ccc	a0 06		ldy #$06			ldy 	#6
.8cce	ad 08 04	lda $0408			lda 	NSMantissa0
.8cd1	91 34		sta ($34),y			sta 	(basicStack),y
.8cd3	ad 10 04	lda $0410			lda 	NSMantissa1
.8cd6	c8		iny				iny
.8cd7	91 34		sta ($34),y			sta 	(basicStack),y
.8cd9	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8cdb	a2 01		ldx #$01			ldx 	#1
.8cdd	20 f2 8c	jsr $8cf2			jsr 	FCIntegerToStack
.8ce0	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8ce2	a2 02		ldx #$02			ldx 	#2
.8ce4	20 f2 8c	jsr $8cf2			jsr 	FCIntegerToStack
.8ce7	20 12 8d	jsr $8d12			jsr 	CopyIndexToReference
.8cea	7a		ply				ply 								; restore position
.8ceb	60		rts				rts
.8cec					_FCError:
.8cec	4c 1b af	jmp $af1b			jmp 	TypeError
.8cef					_FCSyntaxError:
.8cef	4c 11 af	jmp $af11			jmp 	SyntaxError
.8cf2					FCIntegerToStack:
.8cf2	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8cf5	10 03		bpl $8cfa			bpl	 	_FCNotNegative
.8cf7	20 d6 a0	jsr $a0d6			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8cfa					_FCNotNegative:
.8cfa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8cfd	91 34		sta ($34),y			sta 	(basicStack),y
.8cff	c8		iny				iny
.8d00	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d03	91 34		sta ($34),y			sta 	(basicStack),y
.8d05	c8		iny				iny
.8d06	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d09	91 34		sta ($34),y			sta 	(basicStack),y
.8d0b	c8		iny				iny
.8d0c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8d0f	91 34		sta ($34),y			sta 	(basicStack),y
.8d11	60		rts				rts
.8d12					CopyIndexToReference:
.8d12	5a		phy				phy
.8d13	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8d15	38		sec				sec 								; (because we copy from offset 8)
.8d16	b1 34		lda ($34),y			lda 	(basicStack),y
.8d18	e9 08		sbc #$08			sbc 	#8
.8d1a	85 36		sta $36				sta 	zTemp0
.8d1c	c8		iny				iny
.8d1d	b1 34		lda ($34),y			lda 	(basicStack),y
.8d1f	e9 00		sbc #$00			sbc 	#0
.8d21	85 37		sta $37				sta 	zTemp0+1
.8d23	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8d25	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8d27	b1 34		lda ($34),y			lda 	(basicStack),y
.8d29	0a		asl a				asl 	a 							; into carry
.8d2a	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8d2c	90 14		bcc $8d42			bcc 	_CITRNormal
.8d2e	38		sec				sec
.8d2f					_CITRNegative:
.8d2f	a9 00		lda #$00			lda 	#0
.8d31	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d33	91 36		sta ($36),y			sta 	(zTemp0),y
.8d35	c8		iny				iny
.8d36	ca		dex				dex
.8d37	d0 f6		bne $8d2f			bne 	_CITRNegative
.8d39	88		dey				dey 								; look at MSB of mantissa
.8d3a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8d3c	09 80		ora #$80			ora 	#$80
.8d3e	91 36		sta ($36),y			sta 	(zTemp0),y
.8d40	7a		ply				ply
.8d41	60		rts				rts
.8d42					_CITRNormal:
.8d42	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8d44	91 36		sta ($36),y			sta 	(zTemp0),y
.8d46	c8		iny				iny
.8d47	ca		dex				dex
.8d48	d0 f8		bne $8d42			bne 	_CITRNormal
.8d4a	7a		ply				ply 								; and exit.
.8d4b	60		rts				rts
.8d4c					NextCommand:
.8d4c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8d4e	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8d50	20 01 a2	jsr $a201			jsr 	StackCheckFrame
.8d53	5a		phy				phy
.8d54	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8d56	b1 34		lda ($34),y			lda 	(basicStack),y
.8d58	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8d5a	30 02		bmi $8d5e			bmi 	_NCStepNeg
.8d5c	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8d5e					_NCStepNeg:
.8d5e	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8d60	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8d62	18		clc				clc
.8d63					_NCBump:
.8d63	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8d65	91 34		sta ($34),y			sta 	(basicStack),y
.8d67	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8d69	c8		iny				iny 								; next byte
.8d6a	ca		dex				dex 								; do four times
.8d6b	d0 f6		bne $8d63			bne 	_NCBump
.8d6d	20 12 8d	jsr $8d12			jsr		CopyIndexToReference		; copy it to the reference variable.
.8d70	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8d72	b1 34		lda ($34),y			lda 	(basicStack),y
.8d74	0a		asl a				asl 	a 							; sign bit to carry
.8d75	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8d77	85 38		sta $38				sta 	zTemp1
.8d79	90 02		bcc $8d7d			bcc 	_NCCompRev 					; use if step is +ve
.8d7b	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8d7d					_NCCompRev:
.8d7d	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8d7f	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8d81	85 39		sta $39				sta 	zTemp1+1
.8d83	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8d85	38		sec				sec
.8d86					_NCCompare:
.8d86	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d88	b1 34		lda ($34),y			lda 	(basicStack),y
.8d8a	a4 39		ldy $39				ldy 	zTemp1+1
.8d8c	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d8e	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d90	e6 39		inc $39				inc 	zTemp1+1
.8d92	ca		dex				dex 								; do it 4 times.
.8d93	d0 f1		bne $8d86			bne 	_NCCompare
.8d95	50 02		bvc $8d99			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d97	49 80		eor #$80			eor 	#$80
.8d99					_NCNoOverflow:
.8d99	7a		ply				ply 								; restore Y position
.8d9a	0a		asl a				asl 	a 							; is bit 7 set.
.8d9b	90 04		bcc $8da1			bcc 	_NCLoopback 				; if no , >= so loop back
.8d9d	20 f3 a1	jsr $a1f3			jsr 	StackClose 					; exit the loop
.8da0	60		rts				rts
.8da1					_NCLoopBack:
.8da1	20 2a a2	jsr $a22a			jsr 	STKLoadCodePosition 		; loop back
.8da4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8da5					Command_GOSUB:
.8da5	a2 00		ldx #$00			ldx 	#0
.8da7	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8daa	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8dac	20 d5 a1	jsr $a1d5			jsr 	StackOpen 					; create frame
.8daf	20 19 a2	jsr $a219			jsr 	STKSaveCodePosition 		; save current position
.8db2	4c c8 8d	jmp $8dc8			jmp 	GotoStackX
.8db5					Command_RETURN:
.8db5	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8db7	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8db9	20 01 a2	jsr $a201			jsr 	StackCheckFrame
.8dbc	20 2a a2	jsr $a22a			jsr 	STKLoadCodePosition 		; restore code position
.8dbf	20 f3 a1	jsr $a1f3			jsr 	StackClose
.8dc2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8dc3					GotoCommand:
.8dc3	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8dc5	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger
.8dc8					GotoStackX:
.8dc8	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8dcb	48		pha				pha 								; it is slightly inefficient, just in cases.
.8dcc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8dcf	fa		plx				plx
.8dd0	20 80 a1	jsr $a180			jsr 	MemorySearch 				; transfer to line number AX.
.8dd3	90 05		bcc $8dda			bcc 	_GotoError 					; not found, off end.
.8dd5	d0 03		bne $8dda			bne 	_GotoError 					; not found exactly
.8dd7	4c 03 91	jmp $9103			jmp 	RunNewLine 					; and go straight to new line code.
.8dda					_GotoError:
.8dda	a9 0d		lda #$0d		lda	#13
.8ddc	4c 69 95	jmp $9569		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ddf					IfCommand:
.8ddf	a2 00		ldx #$00			ldx 	#0 							; If what.
.8de1	20 75 a0	jsr $a075			jsr 	EvaluateNumber
.8de4	b1 30		lda ($30),y			lda 	(codePtr),y
.8de6	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8de8	d0 0a		bne $8df4			bne 	_IFStructured
.8dea	c8		iny				iny 								; consume THEN
.8deb	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; is it zero
.8dee	f0 01		beq $8df1			beq 	_IfFail 					; if fail, go to next line
.8df0	60		rts				rts 								; if THEN just continue
.8df1					_IfFail:
.8df1	4c 68 91	jmp $9168			jmp 	EOLCommand
.8df4					_IfStructured:
.8df4	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; is it zero
.8df7	d0 07		bne $8e00			bne 	_IfExit 					; if not, then continue normally.
.8df9	a9 ae		lda #$ae			lda 	#KWD_ELSE 					; look for else/endif
.8dfb	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.8dfd	20 db 94	jsr $94db			jsr 	ScanForward 				; and run from there/
.8e00					_IfExit:
.8e00	60		rts				rts
.8e01					ElseCode:
.8e01	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8e03	aa		tax				tax 								; so just go to the structure exit
.8e04	20 db 94	jsr $94db			jsr 	ScanForward
.8e07	60		rts				rts
.8e08					EndIf:
.8e08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8e09					LetCommand:
.8e09	a2 00		ldx #$00			ldx 	#0
.8e0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8e0d	c9 10		cmp #$10			cmp 	#KWD_AT
.8e0f	d0 16		bne $8e27			bne 	_LCStandard
.8e11	c8		iny				iny 								; skip equal
.8e12	20 43 9c	jsr $9c43			jsr 	EvaluateTerm 				; get a number
.8e15	20 87 9a	jsr $9a87			jsr 	Dereference 				; dereference it
.8e18	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8e1b	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8e1d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8e20	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8e22	d0 10		bne $8e34			bne 	_LCMain
.8e24	4c 1b af	jmp $af1b			jmp 	TypeError 					; was a reference before.
.8e27					_LCStandard:
.8e27	ad 5a 99	lda $995a			lda 	PrecedenceLevel+"*"			; precedence > this
.8e2a	20 74 99	jsr $9974			jsr 	EvaluateExpressionAtPrecedence
.8e2d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8e30	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8e32	f0 0e		beq $8e42			beq 	_LetGoProc 					; it's a procedure call.
.8e34					_LCMain:
.8e34	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8e36	20 3b a9	jsr $a93b			jsr 	CheckNextA
.8e39	e8		inx				inx 								; RHS
.8e3a	20 6c a0	jsr $a06c			jsr 	EvaluateValue
.8e3d	ca		dex				dex
.8e3e	20 45 8e	jsr $8e45			jsr 	AssignVariable
.8e41	60		rts				rts
.8e42					_LetGoProc:
.8e42	4c de 8f	jmp $8fde			jmp 	CallProcedure
.8e45					AssignVariable:
.8e45	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8e48	48		pha				pha 								; save a copy
.8e49	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e4c	29 10		and #$10			and 	#NSBIsString
.8e4e	d0 0b		bne $8e5b			bne 	_ASError
.8e50	68		pla				pla 								; get back
.8e51	29 10		and #$10			and 	#NSBIsString 				; check type
.8e53	d0 03		bne $8e58			bne 	_ASString
.8e55	4c af 99	jmp $99af			jmp 	AssignNumber
.8e58					_ASString:
.8e58	4c 1d 9a	jmp $9a1d			jmp 	AssignString
.8e5b					_ASError:
.8e5b	4c 1b af	jmp $af1b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8e5e					Command_List:
.8e5e	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8e61	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8e64	a9 ff		lda #$ff			lda 	#$FF
.8e66	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8e69	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8e6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e70	f0 1e		beq $8e90			beq 	_CLSecond
.8e72	20 ee 8e	jsr $8eee			jsr 	CLIsDigit 					; if not digit, list all
.8e75	b0 24		bcs $8e9b			bcs 	_CLStart
.8e77	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8e79	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger
.8e7c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e7e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e80	f0 0e		beq $8e90			beq 	_CLSecond 					; if so go get it
.8e82	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8e85	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8e88	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8e8b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8e8e	80 0b		bra $8e9b			bra 	_CLStart
.8e90					_CLSecond:
.8e90	c8		iny				iny 								; consume comma
.8e91	20 ee 8e	jsr $8eee			jsr 	CLIsDigit 					; digit found
.8e94	b0 05		bcs $8e9b			bcs 	_CLStart 					; if not, continue listing
.8e96	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8e98	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger
.8e9b					_CLStart
.8e9b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e9d	85 30		sta $30				sta 	codePtr
.8e9f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ea1	85 31		sta $31				sta 	codePtr+1
.8ea3					_CLLoop:
.8ea3	20 f7 b0	jsr $b0f7			jsr 	EXTBreakCheck 				; break check
.8ea6	f0 30		beq $8ed8			beq 	_CLExit
.8ea8	b2 30		lda ($30)			lda 	(codePtr)
.8eaa	f0 2c		beq $8ed8			beq 	_CLExit
.8eac	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8eae	20 db 8e	jsr $8edb			jsr 	CLCompareLineNo
.8eb1	90 18		bcc $8ecb			bcc 	_CLNext
.8eb3	a2 07		ldx #$07			ldx 	#7
.8eb5	20 db 8e	jsr $8edb			jsr 	CLCompareLineNo
.8eb8	f0 02		beq $8ebc			beq 	_CLDoThisOne
.8eba	b0 0f		bcs $8ecb			bcs 	_CLNext
.8ebc					_CLDoThisOne:
.8ebc	20 37 93	jsr $9337			jsr 	ListConvertLine 			; convert line into token Buffer
.8ebf	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ec1	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8ec3	20 c2 95	jsr $95c2			jsr 	PrintStringXA
.8ec6	a9 0d		lda #$0d			lda 	#13 						; new line
.8ec8	20 b6 b0	jsr $b0b6			jsr 	EXTPrintCharacter
.8ecb					_CLNext:
.8ecb	18		clc				clc
.8ecc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ece	65 30		adc $30				adc 	codePtr
.8ed0	85 30		sta $30				sta 	codePtr
.8ed2	90 02		bcc $8ed6			bcc 	_CREExit
.8ed4	e6 31		inc $31				inc 	codePtr+1
.8ed6					_CREExit:
.8ed6	80 cb		bra $8ea3			bra 	_CLLoop
.8ed8					_CLExit:
.8ed8	4c d9 8a	jmp $8ad9			jmp 	WarmStart
.8edb					CLCompareLineNo:
.8edb	38		sec				sec
.8edc	a0 01		ldy #$01			ldy 	#1
.8ede	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee0	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8ee3	85 36		sta $36				sta 	zTemp0
.8ee5	c8		iny				iny
.8ee6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee8	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8eeb	05 36		ora $36				ora 	zTemp0
.8eed	60		rts				rts
.8eee					CLIsDigit:
.8eee	b1 30		lda ($30),y			lda 	(codePtr),y
.8ef0	c9 30		cmp #$30			cmp 	#"0"
.8ef2	90 03		bcc $8ef7			bcc	 	_CLIDExitFalse
.8ef4	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ef6	60		rts				rts
.8ef7					_CLIDExitFalse:
.8ef7	38		sec				sec
.8ef8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8ef9					Command_LOCAL:
.8ef9	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8efb	20 07 8f	jsr $8f07			jsr 	LocaliseNextTerm 			; convert term to a local.
.8efe	b1 30		lda ($30),y			lda 	(codePtr),y
.8f00	c8		iny				iny
.8f01	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f03	f0 f4		beq $8ef9			beq 	Command_LOCAL
.8f05	88		dey				dey 								; unpick pre-get
.8f06	60		rts				rts
.8f07					LocaliseNextTerm:
.8f07	20 43 9c	jsr $9c43			jsr 	EvaluateTerm 				; evaluate the term
.8f0a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f0d	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8f0f	f0 69		beq $8f7a			beq		_LNTError
.8f11	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8f14	85 36		sta $36				sta 	zTemp0
.8f16	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f19	85 37		sta $37				sta  	zTemp0+1
.8f1b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f1e	29 10		and #$10			and 	#NSBIsString
.8f20	d0 22		bne $8f44			bne 	_LNTPushString
.8f22	5a		phy				phy
.8f23	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8f25					_LNTPushNumLoop:
.8f25	b1 36		lda ($36),y			lda		(zTemp0),y
.8f27	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f2a	a9 00		lda #$00			lda 	#0
.8f2c	91 36		sta ($36),y			sta 	(zTemp0),y
.8f2e	c8		iny				iny
.8f2f	c0 05		cpy #$05			cpy 	#5
.8f31	d0 f2		bne $8f25			bne 	_LNTPushNumLoop
.8f33	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8f35	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f38	a5 37		lda $37				lda 	zTemp0+1
.8f3a	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f3d	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8f3f	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f42	7a		ply				ply
.8f43	60		rts				rts
.8f44					_LNTPushString:
.8f44	5a		phy				phy
.8f45	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8f47	85 38		sta $38				sta 	zTemp1
.8f49	a0 01		ldy #$01			ldy 	#1
.8f4b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f4d	85 39		sta $39				sta 	zTemp1+1
.8f4f	a0 00		ldy #$00			ldy 	#0 							; output string
.8f51	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8f53	f0 0a		beq $8f5f			beq 	_LNTStringOut
.8f55					_LNTPushStrLoop:
.8f55	b1 38		lda ($38),y			lda 	(zTemp1),y
.8f57	f0 06		beq $8f5f			beq 	_LNTStringOut
.8f59	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f5c	c8		iny				iny
.8f5d	80 f6		bra $8f55			bra 	_LNTPushStrLoop
.8f5f					_LNTStringOut:
.8f5f	98		tya				tya									; output length
.8f60	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f63	a9 00		lda #$00			lda 	#0 							; clear original string.
.8f65	92 38		sta ($38)			sta 	(zTemp1)
.8f67	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8f6a	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f6d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f70	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f73	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8f75	20 b3 a1	jsr $a1b3			jsr 	StackPushByte
.8f78	7a		ply				ply
.8f79	60		rts				rts
.8f7a					_LNTError:
.8f7a	4c 11 af	jmp $af11			jmp 	SyntaxError
.a8d2					LocalPopValue:
.a8d2	20 cc a1	jsr $a1cc			jsr 	StackPopByte
.a8d5	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a8d7	d0 17		bne $a8f0			bne 	_LPVString
.a8d9	20 cc a1	jsr $a1cc			jsr 	StackPopByte 				; address
.a8dc	85 37		sta $37				sta 	zTemp0+1
.a8de	20 cc a1	jsr $a1cc			jsr 	StackPopByte
.a8e1	85 36		sta $36				sta 	zTemp0
.a8e3	5a		phy				phy
.a8e4	a0 04		ldy #$04			ldy 	#4 							; copy back
.a8e6					_LPVNumberCopy:
.a8e6	20 cc a1	jsr $a1cc			jsr 	StackPopByte
.a8e9	91 36		sta ($36),y			sta 	(zTemp0),y
.a8eb	88		dey				dey
.a8ec	10 f8		bpl $a8e6			bpl 	_LPVNumberCopy
.a8ee	7a		ply				ply 								; and complete
.a8ef	60		rts				rts
.a8f0					_LPVString:
.a8f0	20 cc a1	jsr $a1cc			jsr 	StackPopByte 				; address of record => zTemp0
.a8f3	85 37		sta $37				sta 	zTemp0+1
.a8f5	20 cc a1	jsr $a1cc			jsr 	StackPopByte
.a8f8	85 36		sta $36				sta 	zTemp0
.a8fa	5a		phy				phy
.a8fb	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a8fd	85 38		sta $38				sta 	zTemp1
.a8ff	a0 01		ldy #$01			ldy 	#1
.a901	b1 36		lda ($36),y			lda 	(zTemp0),y
.a903	85 39		sta $39				sta 	zTemp1+1
.a905	20 cc a1	jsr $a1cc			jsr 	StackPopByte 				; # to get => y
.a908	a8		tay				tay
.a909	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a90b	f0 0e		beq $a91b			beq 	_LPVStringCopied
.a90d	a9 00		lda #$00			lda 	#0 							; NULL on end
.a90f	91 38		sta ($38),y			sta 	(zTemp1),y
.a911					_LPVStringCopy:
.a911	88		dey				dey
.a912	30 07		bmi $a91b			bmi 	_LPVStringCopied
.a914	20 cc a1	jsr $a1cc			jsr 	StackPopByte
.a917	91 38		sta ($38),y			sta 	(zTemp1),y
.a919	80 f6		bra $a911			bra 	_LPVStringCopy
.a91b					_LPVStringCopied:
.a91b	fa		plx				plx
.a91c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8f7d					NewCommand:
.8f7d	20 5e a1	jsr $a15e			jsr 	MemoryNew
.8f80	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8f83	20 72 8b	jsr $8b72			jsr 	ClearCommand 				; clear everything.
.8f86	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8f87					Command_Print:
.8f87	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8f88					_CPLoop:
.8f88	08		php				php 								; save last action flag
.8f89	b1 30		lda ($30),y			lda 	(codePtr),y
.8f8b	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8f8d	f0 46		beq $8fd5			beq 	_CPExit
.8f8f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f91	f0 42		beq $8fd5			beq 	_CPExit
.8f93	68		pla				pla 								; throw last action flag
.8f94	b1 30		lda ($30),y			lda 	(codePtr),y
.8f96	c8		iny				iny
.8f97	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8f99	f0 37		beq $8fd2			beq 	_CPContinueWithSameLine
.8f9b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8f9d	f0 2e		beq $8fcd			beq 	_CPTab
.8f9f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8fa1	f0 26		beq $8fc9			beq 	_CPNewLine
.8fa3	88		dey				dey 								; undo the get.
.8fa4	a2 00		ldx #$00			ldx 	#0
.8fa6	20 6c a0	jsr $a06c			jsr 	EvaluateValue 				; get a value into slot 0
.8fa9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8fac	29 10		and #$10			and 	#NSBIsString
.8fae	f0 0b		beq $8fbb			beq 	_CPNumber
.8fb0	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8fb3	ad 08 04	lda $0408			lda 	NSMantissa0
.8fb6	20 c2 95	jsr $95c2			jsr 	PrintStringXA
.8fb9	80 cc		bra $8f87			bra 	Command_Print 				; loop round clearing carry so NL if end
.8fbb					_CPNumber:
.8fbb	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8fbd	20 42 9f	jsr $9f42			jsr 	ConvertNumberToString 		; convert to string
.8fc0	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8fc2	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8fc4	20 c2 95	jsr $95c2			jsr 	PrintStringXA
.8fc7	80 be		bra $8f87			bra 	Command_Print 				; loop round clearing carry so NL if end
.8fc9					_CPNewLine:
.8fc9	a9 0d		lda #$0d			lda 	#13
.8fcb	80 02		bra $8fcf			bra 	_CPPrintChar
.8fcd					_CPTab:
.8fcd	a9 09		lda #$09			lda 	#9 							; print TAB
.8fcf					_CPPrintChar:
.8fcf	20 b6 b0	jsr $b0b6			jsr 	EXTPrintCharacter
.8fd2					_CPContinueWithSameLine:
.8fd2	38		sec				sec 								; loop round with carry set, which
.8fd3	80 b3		bra $8f88			bra 	_CPLoop 					; will inhibit final CR
.8fd5					_CPExit:
.8fd5	28		plp				plp 								; get last action flag
.8fd6	b0 05		bcs $8fdd			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8fd8	a9 0d		lda #$0d			lda 	#13 						; print new line
.8fda	20 b6 b0	jsr $b0b6			jsr 	EXTPrintCharacter
.8fdd					_CPExit2:
.8fdd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8fde					CallProcedure:
.8fde	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8fe0	b1 30		lda ($30),y			lda 	(codePtr),y
.8fe2	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8fe4	f0 0c		beq $8ff2			beq 	_CPEndParam
.8fe6					_CPParamLoop:
.8fe6	20 72 99	jsr $9972			jsr 	EvaluateExpression 			; get parameter onto stack
.8fe9	e8		inx				inx 								; bump next stack
.8fea	b1 30		lda ($30),y			lda 	(codePtr),y
.8fec	c8		iny				iny
.8fed	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8fef	f0 f5		beq $8fe6			beq 	_CPParamLoop
.8ff1	88		dey				dey 								; unpick.
.8ff2					_CPEndParam:
.8ff2	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8ff5	c8		iny				iny									; skip right bracket
.8ff6	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ff8	20 d5 a1	jsr $a1d5			jsr 	StackOpen
.8ffb	20 19 a2	jsr $a219			jsr 	STKSaveCodePosition 		; save loop position
.8ffe	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9001	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9003	ad 10 04	lda $0410			lda 	NSMantissa1
.9006	85 37		sta $37				sta 	zTemp0+1
.9008	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.900a	b2 36		lda ($36)			lda 	(zTemp0)
.900c	85 30		sta $30				sta 	safePtr
.900e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9010	85 31		sta $31				sta 	safePtr+1
.9012	c8		iny				iny
.9013	b1 36		lda ($36),y			lda 	(zTemp0),y
.9015	85 32		sta $32				sta 	safePtr+2
.9017	c8		iny				iny
.9018	b1 36		lda ($36),y			lda 	(zTemp0),y
.901a	85 33		sta $33				sta 	safePtr+3
.901c	c8		iny				iny 								; get Y offset -> Y
.901d	b1 36		lda ($36),y			lda 	(zTemp0),y
.901f	a8		tay				tay
.9020	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9022	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.9025	f0 13		beq $903a			beq 	_ParamExit 					; if so, exit.
.9027					_ParamExtract:
.9027	ca		dex				dex 								; put a local term on the level before
.9028	20 07 8f	jsr $8f07			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.902b	20 45 8e	jsr $8e45			jsr 	AssignVariable 				; assign stacked value to the variable.
.902e	e8		inx				inx 								; advance to next parameter to do.
.902f	e8		inx				inx
.9030	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9033	f0 05		beq $903a			beq 	_ParamExit
.9035	20 33 a9	jsr $a933			jsr 	CheckComma 					; comma seperating parameters
.9038	80 ed		bra $9027			bra 	_ParamExtract
.903a					_ParamExit:
.903a	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 			; check )
.903d	60		rts				rts 								; and continue from here
.a91d					Command_ENDPROC:
.a91d	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a91f	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a921	20 01 a2	jsr $a201			jsr 	StackCheckFrame
.a924	20 2a a2	jsr $a22a			jsr 	STKLoadCodePosition 		; restore code position
.a927	20 f3 a1	jsr $a1f3			jsr 	StackClose
.a92a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.903e					Command_Read:
.903e	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9040	20 43 9c	jsr $9c43			jsr 	EvaluateTerm
.9043	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9046	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9048	f0 4a		beq $9094			beq 	_CRSyntax 					; check reference (bit 0)
.904a	20 dd 90	jsr $90dd			jsr 	SwapDataCodePtrs 			; swap code and data
.904d	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9050	d0 20		bne $9072			bne 	_CRContinueData
.9052					_CRKeepSearching:
.9052	a9 ab		lda #$ab			lda 	#KWD_DATA 					; scan for instruction
.9054	aa		tax				tax
.9055	20 db 94	jsr $94db			jsr 	ScanForward
.9058	c9 ab		cmp #$ab			cmp 	#KWD_DATA 					; found data ?
.905a	f0 16		beq $9072			beq 	_CRHaveData 				; found it
.905c	18		clc				clc
.905d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.905f	65 30		adc $30				adc 	codePtr
.9061	85 30		sta $30				sta 	codePtr
.9063	90 02		bcc $9067			bcc 	_CREExit
.9065	e6 31		inc $31				inc 	codePtr+1
.9067					_CREExit:
.9067	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9069	b2 30		lda ($30)			lda 	(codePtr)
.906b	d0 e5		bne $9052			bne 	_CRKeepSearching
.906d	a9 0b		lda #$0b		lda	#11
.906f	4c 69 95	jmp $9569		jmp	ErrorHandler
.9072					_CRHaveData:
.9072					_CRContinueData:
.9072	a2 01		ldx #$01			ldx 	#1
.9074	20 6c a0	jsr $a06c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9077	ca		dex				dex
.9078	20 45 8e	jsr $8e45			jsr		AssignVariable 				; do the assignment
.907b	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.907e	b1 30		lda ($30),y			lda 	(codePtr),y
.9080	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9082	d0 04		bne $9088			bne 	_CRSwapBack
.9084	c8		iny				iny 								; consume comma
.9085	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9088					_CRSwapBack:
.9088	20 dd 90	jsr $90dd			jsr 	SwapDataCodePtrs			; swap them back.
.908b	b1 30		lda ($30),y			lda 	(codePtr),y
.908d	c8		iny				iny
.908e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9090	f0 ac		beq $903e			beq 	Command_Read 				; if so go round again.
.9092	88		dey				dey 								; unpick get.
.9093	60		rts				rts
.9094					_CRSyntax:
.9094	4c 11 af	jmp $af11			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9097					RemCommand:
.9097	b1 30		lda ($30),y			lda 	(codePtr),y
.9099	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.909b	d0 06		bne $90a3			bne 	_RMExit
.909d	c8		iny				iny
.909e	98		tya				tya
.909f	38		sec				sec
.90a0	71 30		adc ($30),y			adc 	(codePtr),y
.90a2	a8		tay				tay
.90a3					_RMExit:
.90a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.90a4					Command_REPEAT:
.90a4	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.90a6	20 d5 a1	jsr $a1d5			jsr 	StackOpen
.90a9	20 19 a2	jsr $a219			jsr 	STKSaveCodePosition 		; save loop position
.90ac	60		rts				rts
.90ad					Command_UNTIL:
.90ad	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.90af	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.90b1	20 01 a2	jsr $a201			jsr 	StackCheckFrame
.90b4	a2 00		ldx #$00			ldx 	#0
.90b6	20 75 a0	jsr $a075			jsr 	EvaluateNumber 				; work out the number
.90b9	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; check if zero
.90bc	f0 04		beq $90c2			beq 	_CULoopBack 				; if so keep looping
.90be	20 f3 a1	jsr $a1f3			jsr 	StackClose		 			; return
.90c1	60		rts				rts
.90c2					_CULoopBack:
.90c2	20 2a a2	jsr $a22a			jsr 	STKLoadCodePosition 		; loop back
.90c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.90c6					Command_Restore:
.90c6	20 dd 90	jsr $90dd			jsr 	SwapDataCodePtrs 			; swap code and data
.90c9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90cb	85 30		sta $30				sta 	codePtr
.90cd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90cf	85 31		sta $31				sta 	codePtr+1
.90d1	20 dd 90	jsr $90dd			jsr 	SwapDataCodePtrs 			; put them back
.90d4	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.90d6	8d 9b 04	sta $049b			sta 	dataPointer+4
.90d9	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.90dc	60		rts				rts
.90dd					SwapDataCodePtrs:
.90dd	da		phx				phx
.90de	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.90e0					_SDCPLoop:
.90e0	b5 30		lda $30,x			lda 	safePtr,x
.90e2	48		pha				pha
.90e3	bd 97 04	lda $0497,x			lda 	dataPointer,x
.90e6	95 30		sta $30,x			sta 	safePtr,x
.90e8	68		pla				pla
.90e9	9d 97 04	sta $0497,x			sta 	dataPointer,x
.90ec	ca		dex				dex
.90ed	10 f1		bpl $90e0			bpl 	_SDCPLoop
.90ef	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.90f2	8c 9b 04	sty $049b			sty 	dataPointer+4
.90f5	a8		tay				tay
.90f6	fa		plx				plx
.90f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.90f8					CommandRUN:
.90f8	20 72 8b	jsr $8b72			jsr 	ClearCommand 				; clear variable/stacks/etc.
.90fb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90fd	85 30		sta $30				sta 	codePtr
.90ff	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9101	85 31		sta $31				sta 	codePtr+1
.9103					RUNNewLine:
.9103	b2 30		lda ($30)			lda 	(codePtr)
.9105	f0 5e		beq $9165			beq 	CRNoProgram         		; no then END.
.9107	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9109	9a		txs				txs
.910a					RUNCodePointerLine:
.910a	a0 02		ldy #$02			ldy 	#2 							; start of program
.910c					_CRIncMainLoop:
.910c	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.910f	d0 05		bne $9116			bne 	_CRNoBreakCheck
.9111	20 f7 b0	jsr $b0f7			jsr 	EXTBreakCheck 				; break check
.9114	f0 4a		beq $9160			beq 	_CRBreak
.9116					_CRNoBreakCheck:
.9116	c8		iny				iny
.9117					_CRMainLoop:
.9117	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.911a	b1 30		lda ($30),y			lda 	(codePtr),y
.911c	10 10		bpl $912e			bpl 	_CRNotKeyword
.911e	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9120	b0 04		bcs $9126			bcs 	_CRIsKeyword
.9122	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9124	b0 34		bcs $915a			bcs		_CRSyntaxError
.9126					_CRIsKeyword:
.9126	c8		iny				iny 								; consume command
.9127	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9128	aa		tax				tax 								; put in X for vector jump
.9129	20 5d 91	jsr $915d			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.912c	80 e9		bra $9117			bra 	_CRMainLoop 				; and loop round
.912e					_CRNotKeyword:
.912e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9130	f0 da		beq $910c			beq 	_CRIncMainLoop
.9132	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9134	90 05		bcc $913b			bcc 	_CRNotVariable
.9136					_CRGoLet:
.9136	20 09 8e	jsr $8e09			jsr 	LetCommand
.9139	80 dc		bra $9117			bra 	_CRMainLoop
.913b					_CRNotVariable:
.913b	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.913d	f0 f7		beq $9136			beq 	_CRGoLet
.913f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9141	f0 f3		beq $9136			beq 	_CRGoLet
.9143	c9 21		cmp #$21			cmp 	#KWD_PLING
.9145	f0 ef		beq $9136			beq 	_CRGoLet
.9147	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9149	f0 09		beq $9154			beq 	_CRGoRem
.914b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.914d	d0 0b		bne $915a			bne 	_CRSyntaxError
.914f	20 12 8a	jsr $8a12			jsr 	LabelHere
.9152	80 c3		bra $9117			bra 	_CRMainLoop
.9154					_CRGoRem:
.9154	c8		iny				iny
.9155	20 97 90	jsr $9097			jsr 	RemCommand
.9158	80 bd		bra $9117			bra 	_CRMainLoop
.915a					_CRSyntaxError:
.915a	4c 11 af	jmp $af11			jmp 	SyntaxError
.915d					_CRCallVector0:
.915d	7c 08 92	jmp ($9208,x)			jmp 	(VectorSet0,x)
.9160					_CRBreak:
.9160	a9 01		lda #$01		lda	#1
.9162	4c 69 95	jmp $9569		jmp	ErrorHandler
.9165					CRNoProgram:
.9165	4c 8f 8c	jmp $8c8f			jmp 	EndCommand
.9168					EOLCommand:
.9168	18		clc				clc
.9169	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.916b	65 30		adc $30				adc 	codePtr
.916d	85 30		sta $30				sta 	codePtr
.916f	90 02		bcc $9173			bcc 	_CREExit
.9171	e6 31		inc $31				inc 	codePtr+1
.9173					_CREExit:
.9173	80 8e		bra $9103			bra 	RunNewLine
.9175					Shift1Command:
.9175	b1 30		lda ($30),y			lda 	(codePtr),y
.9177	c8		iny				iny
.9178	0a		asl a				asl 	a
.9179	aa		tax				tax
.917a	7c 8e 92	jmp ($928e,x)			jmp 	(VectorSet1,x)
.917d					Shift2Command:
.917d	b1 30		lda ($30),y			lda 	(codePtr),y
.917f	c8		iny				iny
.9180	0a		asl a				asl 	a
.9181	aa		tax				tax
.9182	7c aa 92	jmp ($92aa,x)			jmp 	(VectorSet2,x)
.9185					Unused1:
.9185					Unused2:
.9185					Unused3:
.9185					Unused4:
.9185	4c 11 af	jmp $af11			jmp 	SyntaxError
>9188							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9188					VectorSetPunc:
>9188	13 97					.word	ShiftLeft                        ; $00 <<
>918a	0d 96					.word	BinaryCompareLessEqual           ; $01 <=
>918c	03 96					.word	BinaryCompareNotEqual            ; $02 <>
>918e	11 af					.word	SyntaxError                      ; $03 !!3
>9190	11 af					.word	SyntaxError                      ; $04 ><
>9192	17 96					.word	BinaryCompareGreaterEqual        ; $05 >=
>9194	16 97					.word	ShiftRight                       ; $06 >>
>9196	11 af					.word	SyntaxError                      ; $07 !!7
>9198	11 af					.word	SyntaxError                      ; $08 !!8
>919a	11 af					.word	SyntaxError                      ; $09 !!9
>919c	11 af					.word	SyntaxError                      ; $0a !!10
>919e	11 af					.word	SyntaxError                      ; $0b !!11
>91a0	11 af					.word	SyntaxError                      ; $0c !!12
>91a2	11 af					.word	SyntaxError                      ; $0d !!13
>91a4	11 af					.word	SyntaxError                      ; $0e !!14
>91a6	11 af					.word	SyntaxError                      ; $0f !!15
>91a8	11 af					.word	SyntaxError                      ; $10 @
>91aa	11 af					.word	SyntaxError                      ; $11 !!17
>91ac	11 af					.word	SyntaxError                      ; $12 !!18
>91ae	11 af					.word	SyntaxError                      ; $13 [
>91b0	44 a9					.word	IntegerDivide                    ; $14 \
>91b2	11 af					.word	SyntaxError                      ; $15 ]
>91b4	9c 98					.word	EorInteger                       ; $16 ^
>91b6	11 af					.word	SyntaxError                      ; $17 _
>91b8	11 af					.word	SyntaxError                      ; $18 `
>91ba	11 af					.word	SyntaxError                      ; $19 !!25
>91bc	11 af					.word	SyntaxError                      ; $1a !!26
>91be	11 af					.word	SyntaxError                      ; $1b {
>91c0	56 98					.word	OraInteger                       ; $1c |
>91c2	11 af					.word	SyntaxError                      ; $1d }
>91c4	11 af					.word	SyntaxError                      ; $1e ~
>91c6	11 af					.word	SyntaxError                      ; $1f [7m<7F>[m
>91c8	11 af					.word	SyntaxError                      ; $20
>91ca	e2 98					.word	WordIndirect                     ; $21 !
>91cc	11 af					.word	SyntaxError                      ; $22 "
>91ce	11 af					.word	SyntaxError                      ; $23 #
>91d0	11 af					.word	SyntaxError                      ; $24 $
>91d2	91 a9					.word	IntegerModulus                   ; $25 %
>91d4	10 98					.word	AndInteger                       ; $26 &
>91d6	11 af					.word	SyntaxError                      ; $27 '
>91d8	11 af					.word	SyntaxError                      ; $28 (
>91da	11 af					.word	SyntaxError                      ; $29 )
>91dc	06 aa					.word	MulInteger                       ; $2a *
>91de	aa 97					.word	AddInteger                       ; $2b +
>91e0	11 af					.word	SyntaxError                      ; $2c ,
>91e2	e5 97					.word	SubInteger                       ; $2d -
>91e4	11 af					.word	SyntaxError                      ; $2e .
>91e6	9d ab					.word	FDivideCommand                   ; $2f /
>91e8	11 af					.word	SyntaxError                      ; $30 0
>91ea	11 af					.word	SyntaxError                      ; $31 1
>91ec	11 af					.word	SyntaxError                      ; $32 2
>91ee	11 af					.word	SyntaxError                      ; $33 3
>91f0	11 af					.word	SyntaxError                      ; $34 4
>91f2	11 af					.word	SyntaxError                      ; $35 5
>91f4	11 af					.word	SyntaxError                      ; $36 6
>91f6	11 af					.word	SyntaxError                      ; $37 7
>91f8	11 af					.word	SyntaxError                      ; $38 8
>91fa	11 af					.word	SyntaxError                      ; $39 9
>91fc	11 af					.word	SyntaxError                      ; $3a :
>91fe	11 af					.word	SyntaxError                      ; $3b ;
>9200	ef 95					.word	BinaryCompareLess                ; $3c <
>9202	e5 95					.word	BinaryCompareEqual               ; $3d =
>9204	f9 95					.word	BinaryCompareGreater             ; $3e >
>9206	09 99					.word	ByteIndirect                     ; $3f ?
.9208					VectorSet0:
>9208	68 91					.word	EOLCommand                       ; $80 !0:EOF
>920a	75 91					.word	Shift1Command                    ; $81 !1:SH1
>920c	7d 91					.word	Shift2Command                    ; $82 !2:SH2
>920e	e3 ac					.word	AbsUnary                         ; $83 ABS(
>9210	d3 9d					.word	AllocUnary                       ; $84 ALLOC(
>9212	f3 ac					.word	AscUnary                         ; $85 ASC(
>9214	f3 9e					.word	ChrUnary                         ; $86 CHR$(
>9216	11 af					.word	SyntaxError                      ; $87 EVENT(
>9218	e1 95					.word	UnaryFalse                       ; $88 FALSE
>921a	00 ad					.word	FracUnary                        ; $89 FRAC(
>921c	16 ad					.word	IntUnary                         ; $8a INT(
>921e	6c ad					.word	IsValUnary                       ; $8b ISVAL(
>9220	cd 9f					.word	Unary_Left                       ; $8c LEFT$(
>9222	28 ad					.word	LenUnary                         ; $8d LEN(
>9224	f7 9f					.word	Unary_Mid                        ; $8e MID$(
>9226	43 9e					.word	Unary_Not                        ; $8f NOT(
>9228	11 af					.word	SyntaxError                      ; $90 OFF
>922a	11 af					.word	SyntaxError                      ; $91 ON
>922c	59 9e					.word	Unary_Random                     ; $92 RANDOM(
>922e	dd 9f					.word	Unary_Right                      ; $93 RIGHT$(
>9230	72 9e					.word	Unary_Rnd                        ; $94 RND(
>9232	42 ad					.word	SgnUnary                         ; $95 SGN(
>9234	05 9f					.word	SpcUnary                         ; $96 SPC(
>9236	20 9f					.word	Unary_Str                        ; $97 STR$(
>9238	11 af					.word	SyntaxError                      ; $98 TIMER(
>923a	d5 95					.word	UnaryTrue                        ; $99 TRUE
>923c	62 ad					.word	ValUnary                         ; $9a VAL(
>923e	92 8c					.word	ForCommand                       ; $9b FOR
>9240	df 8d					.word	IfCommand                        ; $9c IF
>9242	85 91					.word	Unused1                          ; $9d PROC
>9244	a4 90					.word	Command_REPEAT                   ; $9e REPEAT
>9246	3a 95					.word	Command_WHILE                    ; $9f WHILE
>9248	08 8e					.word	EndIf                            ; $a0 ENDIF
>924a	1d a9					.word	Command_ENDPROC                  ; $a1 ENDPROC
>924c	4c 8d					.word	NextCommand                      ; $a2 NEXT
>924e	85 91					.word	Unused4                          ; $a3 THEN
>9250	ad 90					.word	Command_UNTIL                    ; $a4 UNTIL
>9252	5b 95					.word	Command_WEND                     ; $a5 WEND
>9254	38 8b					.word	CallCommand                      ; $a6 CALL
>9256	11 af					.word	SyntaxError                      ; $a7 CIRCLE
>9258	11 af					.word	SyntaxError                      ; $a8 CLS
>925a	11 af					.word	SyntaxError                      ; $a9 COLOR
>925c	11 af					.word	SyntaxError                      ; $aa COLOUR
>925e	ca 8b					.word	Command_Data                     ; $ab DATA
>9260	d2 8b					.word	DimCommand                       ; $ac DIM
>9262	85 91					.word	Unused3                          ; $ad DOWNTO
>9264	01 8e					.word	ElseCode                         ; $ae ELSE
>9266	11 af					.word	SyntaxError                      ; $af GFX
>9268	a5 8d					.word	Command_GOSUB                    ; $b0 GOSUB
>926a	c3 8d					.word	GotoCommand                      ; $b1 GOTO
>926c	11 af					.word	SyntaxError                      ; $b2 HERE
>926e	11 af					.word	SyntaxError                      ; $b3 HIDE
>9270	09 8e					.word	LetCommand                       ; $b4 LET
>9272	11 af					.word	SyntaxError                      ; $b5 LINE
>9274	f9 8e					.word	Command_LOCAL                    ; $b6 LOCAL
>9276	11 af					.word	SyntaxError                      ; $b7 OUTLINE
>9278	87 8f					.word	Command_Print                    ; $b8 PRINT
>927a	3e 90					.word	Command_Read                     ; $b9 READ
>927c	11 af					.word	SyntaxError                      ; $ba RECT
>927e	97 90					.word	RemCommand                       ; $bb REM
>9280	b5 8d					.word	Command_RETURN                   ; $bc RETURN
>9282	11 af					.word	SyntaxError                      ; $bd SCALE
>9284	11 af					.word	SyntaxError                      ; $be SHOW
>9286	11 af					.word	SyntaxError                      ; $bf SOLID
>9288	11 af					.word	SyntaxError                      ; $c0 SPRITE
>928a	11 af					.word	SyntaxError                      ; $c1 TEXT
>928c	85 91					.word	Unused2                          ; $c2 TO
.928e					VectorSet1:
>928e	11 af					.word	SyntaxError                      ; $80 !0:EOF
>9290	11 af					.word	SyntaxError                      ; $81 !1:SH1
>9292	11 af					.word	SyntaxError                      ; $82 !2:SH2
>9294	09 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9296	28 8b					.word	AssertCommand                    ; $84 ASSERT
>9298	11 af					.word	SyntaxError                      ; $85 BITMAP
>929a	72 8b					.word	ClearCommand                     ; $86 CLEAR
>929c	8f 8c					.word	EndCommand                       ; $87 END
>929e	5e 8e					.word	Command_List                     ; $88 LIST
>92a0	7d 8f					.word	NewCommand                       ; $89 NEW
>92a2	c6 90					.word	Command_Restore                  ; $8a RESTORE
>92a4	f8 90					.word	CommandRUN                       ; $8b RUN
>92a6	11 af					.word	SyntaxError                      ; $8c SPRITES
>92a8	32 93					.word	StopCommand                      ; $8d STOP
.92aa					VectorSet2:
>92aa	11 af					.word	SyntaxError                      ; $80 !0:EOF
>92ac	11 af					.word	SyntaxError                      ; $81 !1:SH1
>92ae	11 af					.word	SyntaxError                      ; $82 !2:SH2
>92b0	d0 ad					.word	Assemble_adc                     ; $83 ADC
>92b2	c8 ad					.word	Assemble_and                     ; $84 AND
>92b4	e4 ad					.word	Assemble_asl                     ; $85 ASL
>92b6	4e ae					.word	Assemble_bcc                     ; $86 BCC
>92b8	52 ae					.word	Assemble_bcs                     ; $87 BCS
>92ba	5a ae					.word	Assemble_beq                     ; $88 BEQ
>92bc	11 ae					.word	Assemble_bit                     ; $89 BIT
>92be	42 ae					.word	Assemble_bmi                     ; $8a BMI
>92c0	56 ae					.word	Assemble_bne                     ; $8b BNE
>92c2	3e ae					.word	Assemble_bpl                     ; $8c BPL
>92c4	5e ae					.word	Assemble_bra                     ; $8d BRA
>92c6	62 ae					.word	Assemble_brk                     ; $8e BRK
>92c8	46 ae					.word	Assemble_bvc                     ; $8f BVC
>92ca	4a ae					.word	Assemble_bvs                     ; $90 BVS
>92cc	6a ae					.word	Assemble_clc                     ; $91 CLC
>92ce	be ae					.word	Assemble_cld                     ; $92 CLD
>92d0	7e ae					.word	Assemble_cli                     ; $93 CLI
>92d2	ae ae					.word	Assemble_clv                     ; $94 CLV
>92d4	dc ad					.word	Assemble_cmp                     ; $95 CMP
>92d6	25 ae					.word	Assemble_cpx                     ; $96 CPX
>92d8	20 ae					.word	Assemble_cpy                     ; $97 CPY
>92da	02 ae					.word	Assemble_dec                     ; $98 DEC
>92dc	ba ae					.word	Assemble_dex                     ; $99 DEX
>92de	96 ae					.word	Assemble_dey                     ; $9a DEY
>92e0	cc ad					.word	Assemble_eor                     ; $9b EOR
>92e2	07 ae					.word	Assemble_inc                     ; $9c INC
>92e4	ca ae					.word	Assemble_inx                     ; $9d INX
>92e6	b6 ae					.word	Assemble_iny                     ; $9e INY
>92e8	39 ae					.word	Assemble_jmp                     ; $9f JMP
>92ea	34 ae					.word	Assemble_jsr                     ; $a0 JSR
>92ec	d8 ad					.word	Assemble_lda                     ; $a1 LDA
>92ee	fd ad					.word	Assemble_ldx                     ; $a2 LDX
>92f0	1b ae					.word	Assemble_ldy                     ; $a3 LDY
>92f2	ee ad					.word	Assemble_lsr                     ; $a4 LSR
>92f4	ce ae					.word	Assemble_nop                     ; $a5 NOP
>92f6	c4 ad					.word	Assemble_ora                     ; $a6 ORA
>92f8	7a ae					.word	Assemble_pha                     ; $a7 PHA
>92fa	66 ae					.word	Assemble_php                     ; $a8 PHP
>92fc	c2 ae					.word	Assemble_phx                     ; $a9 PHX
>92fe	82 ae					.word	Assemble_phy                     ; $aa PHY
>9300	8a ae					.word	Assemble_pla                     ; $ab PLA
>9302	6e ae					.word	Assemble_plp                     ; $ac PLP
>9304	d6 ae					.word	Assemble_plx                     ; $ad PLX
>9306	92 ae					.word	Assemble_ply                     ; $ae PLY
>9308	e9 ad					.word	Assemble_rol                     ; $af ROL
>930a	f3 ad					.word	Assemble_ror                     ; $b0 ROR
>930c	76 ae					.word	Assemble_rti                     ; $b1 RTI
>930e	86 ae					.word	Assemble_rts                     ; $b2 RTS
>9310	e0 ad					.word	Assemble_sbc                     ; $b3 SBC
>9312	72 ae					.word	Assemble_sec                     ; $b4 SEC
>9314	d2 ae					.word	Assemble_sed                     ; $b5 SED
>9316	8e ae					.word	Assemble_sei                     ; $b6 SEI
>9318	d4 ad					.word	Assemble_sta                     ; $b7 STA
>931a	c6 ae					.word	Assemble_stp                     ; $b8 STP
>931c	f8 ad					.word	Assemble_stx                     ; $b9 STX
>931e	16 ae					.word	Assemble_sty                     ; $ba STY
>9320	0c ae					.word	Assemble_stz                     ; $bb STZ
>9322	aa ae					.word	Assemble_tax                     ; $bc TAX
>9324	a6 ae					.word	Assemble_tay                     ; $bd TAY
>9326	2f ae					.word	Assemble_trb                     ; $be TRB
>9328	2a ae					.word	Assemble_tsb                     ; $bf TSB
>932a	b2 ae					.word	Assemble_tsx                     ; $c0 TSX
>932c	9a ae					.word	Assemble_txa                     ; $c1 TXA
>932e	a2 ae					.word	Assemble_txs                     ; $c2 TXS
>9330	9e ae					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9332					StopCommand:
.9332	a9 08		lda #$08		lda	#8
.9334	4c 69 95	jmp $9569		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9337					ListConvertLine:
.9337	9c 9d 04	stz $049d			stz 	tbOffset
.933a	9c a9 04	stz $04a9			stz 	tokenBuffer
.933d	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.933f	b1 30		lda ($30),y			lda 	(codePtr),y
.9341	aa		tax				tax
.9342	88		dey				dey
.9343	b1 30		lda ($30),y			lda 	(codePtr),y
.9345	20 87 aa	jsr $aa87			jsr 	ConvertInt16
.9348	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.934a	86 37		stx $37				stx 	zTemp0+1
.934c	a0 00		ldy #$00			ldy 	#0
.934e					_LCCopyNumber:
.934e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9350	20 50 94	jsr $9450			jsr 	LCLWrite
.9353	c8		iny				iny
.9354	b1 36		lda ($36),y			lda 	(zTemp0),y
.9356	d0 f6		bne $934e			bne 	_LCCopyNumber
.9358					_LCPadOut:
.9358	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.935a	20 50 94	jsr $9450			jsr 	LCLWrite
.935d	ad 9d 04	lda $049d			lda 	tbOffset
.9360	c9 06		cmp #$06			cmp 	#6
.9362	d0 f4		bne $9358			bne 	_LCPadOut
.9364	a0 03		ldy #$03			ldy 	#3 							; start position.
.9366					_LCMainLoop:
.9366	b1 30		lda ($30),y			lda 	(codePtr),y
.9368	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.936a	f0 17		beq $9383			beq 	_LCExit
.936c	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.936e	90 14		bcc $9384			bcc 	_LCDoubles
.9370	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9372	90 20		bcc $9394			bcc 	_LCShiftPunc
.9374	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9376	90 2b		bcc $93a3			bcc 	_LCPunctuation
.9378	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.937a	90 2d		bcc $93a9			bcc 	_LCIdentifiers
.937c	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.937e	90 49		bcc $93c9			bcc 	_LCTokens
.9380	4c 24 94	jmp $9424			jmp 	_LCData 					; 254-5 are data objects
.9383					_LCExit:
.9383	60		rts				rts
.9384					_LCDoubles:
.9384	48		pha				pha
.9385	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9386	29 02		and #$02			and 	#2
.9388	09 3c		ora #$3c			ora 	#60 						; make < >
.938a	20 50 94	jsr $9450			jsr 	LCLWrite
.938d	68		pla				pla 								; restore, do lower bit
.938e	29 03		and #$03			and 	#3
.9390	09 3c		ora #$3c			ora 	#60
.9392	80 0f		bra $93a3			bra		_LCPunctuation 				; print, increment, loop
.9394					_LCShiftPunc:
.9394	aa		tax				tax 								; save in X
.9395	29 07		and #$07			and 	#7 							; lower 3 bits
.9397	f0 02		beq $939b			beq 	_LCNoAdd
.9399	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.939b					_LCNoAdd:
.939b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.939d	90 02		bcc $93a1			bcc 	_LCNoAdd2
.939f	09 20		ora #$20			ora 	#32 						; adds $20
.93a1					_LCNoAdd2:
.93a1	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.93a3					_LCPunctuation:
.93a3	c8		iny				iny 								; consume character
.93a4	20 50 94	jsr $9450			jsr 	LCLWrite 					; write it out.
.93a7	80 bd		bra $9366			bra 	_LCMainLoop 				; go round again.
.93a9					_LCIdentifiers:
.93a9	18		clc				clc 								; convert to physical address
.93aa	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.93ac	85 37		sta $37				sta 	zTemp0+1
.93ae	c8		iny				iny
.93af	b1 30		lda ($30),y			lda 	(codePtr),y
.93b1	85 36		sta $36				sta 	zTemp0
.93b3	c8		iny				iny
.93b4	5a		phy				phy 								; save position
.93b5	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.93b7					_LCOutIdentifier:
.93b7	c8		iny				iny
.93b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.93ba	29 7f		and #$7f			and 	#$7F
.93bc	20 7e 94	jsr $947e			jsr 	LCLLowerCase
.93bf	20 50 94	jsr $9450			jsr 	LCLWrite
.93c2	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.93c4	10 f1		bpl $93b7			bpl 	_LCOutIdentifier
.93c6	7a		ply				ply 								; restore position
.93c7	80 9d		bra $9366			bra 	_LCMainLoop
.93c9					_LCTokens:
.93c9	aa		tax				tax 								; token in X
.93ca	a9 d7		lda #$d7			lda 	#((KeywordSet2) & $FF)
.93cc	85 36		sta $36				sta 	0+zTemp0
.93ce	a9 a4		lda #$a4			lda 	#((KeywordSet2) >> 8)
.93d0	85 37		sta $37				sta 	1+zTemp0
.93d2	e0 82		cpx #$82			cpx 	#$82
.93d4	f0 16		beq $93ec			beq 	_LCUseShift
.93d6	a9 82		lda #$82			lda 	#((KeywordSet1) & $FF)
.93d8	85 36		sta $36				sta 	0+zTemp0
.93da	a9 a4		lda #$a4			lda 	#((KeywordSet1) >> 8)
.93dc	85 37		sta $37				sta 	1+zTemp0
.93de	e0 81		cpx #$81			cpx 	#$81
.93e0	f0 0a		beq $93ec			beq 	_LCUseShift
.93e2	a9 d8		lda #$d8			lda 	#((KeywordSet0) & $FF)
.93e4	85 36		sta $36				sta 	0+zTemp0
.93e6	a9 a2		lda #$a2			lda 	#((KeywordSet0) >> 8)
.93e8	85 37		sta $37				sta 	1+zTemp0
.93ea	80 01		bra $93ed			bra 	_LCNoShift
.93ec					_LCUseShift:
.93ec	c8		iny				iny
.93ed					_LCNoShift:
.93ed	20 5f 94	jsr $945f			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.93f0	b1 30		lda ($30),y			lda 	(codePtr),y
.93f2	aa		tax				tax 								; into X
.93f3					_LCFindText:
.93f3	ca		dex				dex
.93f4	10 0e		bpl $9404			bpl 	_LCFoundText 				; found text.
.93f6	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.93f8	1a		inc a				inc 	a 							; one extra for size
.93f9	38		sec				sec 								; one extra for checksum
.93fa	65 36		adc $36				adc 	zTemp0 						; go to next token
.93fc	85 36		sta $36				sta 	zTemp0
.93fe	90 f3		bcc $93f3			bcc 	_LCFindText
.9400	e6 37		inc $37				inc 	zTemp0+1
.9402	80 ef		bra $93f3			bra 	_LCFindText
.9404					_LCFoundText:
.9404	5a		phy				phy 								; save List position
.9405	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9407	aa		tax				tax
.9408	a0 02		ldy #$02			ldy 	#2
.940a					_LCCopyToken:
.940a	b1 36		lda ($36),y			lda 	(zTemp0),y
.940c	20 7e 94	jsr $947e			jsr 	LCLLowerCase
.940f	20 50 94	jsr $9450			jsr 	LCLWrite
.9412	c8		iny				iny
.9413	ca		dex				dex
.9414	d0 f4		bne $940a			bne 	_LCCopyToken
.9416	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9418	f0 05		beq $941f			beq 	_LCNoSpace
.941a	a9 20		lda #$20			lda 	#' '
.941c	20 50 94	jsr $9450			jsr 	LCLWrite
.941f					_LCNoSpace:
.941f	7a		ply				ply 								; restore position.
.9420	c8		iny				iny 								; consume token
.9421	4c 66 93	jmp $9366			jmp 	_LCMainLoop 				; and go around again.
.9424					_LCData:
.9424	48		pha				pha 								; save type $FE/$FF
.9425	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9427	c9 fe		cmp #$fe			cmp 	#$FE
.9429	f0 02		beq $942d			beq 	_LCHaveOpener
.942b	a2 22		ldx #$22			ldx 	#'"'
.942d					_LCHaveOpener:
.942d	8a		txa				txa 								; output prefix (# or ")
.942e	20 50 94	jsr $9450			jsr 	LCLWrite
.9431	c8		iny				iny 								; get count
.9432	b1 30		lda ($30),y			lda 	(codePtr),y
.9434	aa		tax				tax
.9435	c8		iny				iny 								; point at first character
.9436					_LCOutData:
.9436	b1 30		lda ($30),y			lda 	(codePtr),y
.9438	c9 00		cmp #$00			cmp 	#0
.943a	f0 03		beq $943f			beq 	_LCNoPrint
.943c	20 50 94	jsr $9450			jsr 	LCLWrite
.943f					_LCNoPrint:
.943f	c8		iny				iny
.9440	ca		dex				dex
.9441	d0 f3		bne $9436			bne 	_LCOutData
.9443	68		pla				pla 								; closing " required ?
.9444	c9 ff		cmp #$ff			cmp 	#$FF
.9446	d0 05		bne $944d			bne 	_LCNoQuote
.9448	a9 22		lda #$22			lda 	#'"'
.944a	20 50 94	jsr $9450			jsr 	LCLWrite
.944d					_LCNoQuote:
.944d	4c 66 93	jmp $9366			jmp 	_LCMainLoop
.9450					LCLWrite:
.9450	da		phx				phx
.9451	ae 9d 04	ldx $049d			ldx 	tbOffset
.9454	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9457	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.945a	ee 9d 04	inc $049d			inc 	tbOffset
.945d	fa		plx				plx
.945e	60		rts				rts
.945f					LCCheckSpaceRequired:
.945f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9462	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9465	20 7e 94	jsr $947e			jsr 	LCLLowerCase 				; saves a little effort
.9468	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.946a	90 11		bcc $947d			bcc 	_LCCSRExit
.946c	c9 3a		cmp #$3a			cmp 	#"9"+1
.946e	90 08		bcc $9478			bcc 	_LCCSRSpace
.9470	c9 61		cmp #$61			cmp 	#"a"
.9472	90 09		bcc $947d			bcc 	_LCCSRExit
.9474	c9 7b		cmp #$7b			cmp 	#"z"+1
.9476	b0 05		bcs $947d			bcs 	_LCCSRExit
.9478					_LCCSRSpace:
.9478	a9 20		lda #$20			lda 	#' '
.947a	20 50 94	jsr $9450			jsr 	LCLWrite
.947d					_LCCSRExit:
.947d	60		rts				rts
.947e					LCLLowerCase:
.947e	c9 41		cmp #$41			cmp 	#"A"
.9480	90 06		bcc $9488			bcc 	_LCLLCOut
.9482	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9484	b0 02		bcs $9488			bcs 	_LCLLCOut
.9486	69 20		adc #$20			adc 	#$20
.9488					_LCLLCOut:
.9488	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9489					ProcedureScan:
.9489	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.948b	85 30		sta $30				sta 	codePtr
.948d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.948f	85 31		sta $31				sta 	codePtr+1
.9491					_PSLoop:
.9491	b2 30		lda ($30)			lda 	(codePtr)
.9493	f0 42		beq $94d7			beq 	_PSExit
.9495	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9497	b1 30		lda ($30),y			lda 	(codePtr),y
.9499	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.949b	d0 2d		bne $94ca			bne 	_PSNext
.949d	c8		iny				iny 								; get the address of the record to zTemp0 and
.949e	b1 30		lda ($30),y			lda 	(codePtr),y
.94a0	29 c0		and #$c0			and 	#$C0
.94a2	c9 40		cmp #$40			cmp 	#$40
.94a4	d0 32		bne $94d8			bne 	_PSSyntax
.94a6	b1 30		lda ($30),y			lda 	(codePtr),y
.94a8	18		clc				clc
.94a9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94ab	85 37		sta $37				sta 	zTemp0+1
.94ad	c8		iny				iny 								; LSB
.94ae	b1 30		lda ($30),y			lda 	(codePtr),y
.94b0	85 36		sta $36				sta 	zTemp0
.94b2	c8		iny				iny 								; character after variable call.
.94b3	98		tya				tya 								; save Y offset at +7
.94b4	a0 07		ldy #$07			ldy 	#7
.94b6	91 36		sta ($36),y			sta 	(zTemp0),y
.94b8	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.94ba	a0 02		ldy #$02			ldy 	#2
.94bc	91 36		sta ($36),y			sta 	(zTemp0),y
.94be	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.94c0					_PSCopy:
.94c0	b5 30		lda $30,x			lda 	safePtr,x
.94c2	c8		iny				iny
.94c3	91 36		sta ($36),y			sta 	(zTemp0),y
.94c5	e8		inx				inx
.94c6	e0 04		cpx #$04			cpx 	#4
.94c8	d0 f6		bne $94c0			bne 	_PSCopy
.94ca					_PSNext:
.94ca	18		clc				clc
.94cb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94cd	65 30		adc $30				adc 	codePtr
.94cf	85 30		sta $30				sta 	codePtr
.94d1	90 02		bcc $94d5			bcc 	_CREExit
.94d3	e6 31		inc $31				inc 	codePtr+1
.94d5					_CREExit:
.94d5	80 ba		bra $9491			bra 	_PSLoop
.94d7					_PSExit:
.94d7	60		rts				rts
.94d8					_PSSyntax:
.94d8	4c 11 af	jmp $af11			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.94db					ScanForward:
.94db	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.94dd	86 37		stx $37				stx 	zTemp0+1
.94df	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.94e1					_ScanLoop:
.94e1	b1 30		lda ($30),y			lda 	(codePtr),y
.94e3	c8		iny				iny
.94e4	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.94e6	d0 0e		bne $94f6			bne 	_ScanGoNext
.94e8	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.94ea	f0 04		beq $94f0			beq 	_ScanMatch
.94ec	c5 37		cmp $37				cmp 	zTemp0+1
.94ee	d0 06		bne $94f6			bne 	_ScanGoNext
.94f0					_ScanMatch:
.94f0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.94f2	d0 01		bne $94f5			bne 	_ScanNotEndEOL
.94f4	88		dey				dey
.94f5					_ScanNotEndEOL:
.94f5	60		rts				rts
.94f6					_ScanGoNext:
.94f6	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.94f8	90 e7		bcc $94e1			bcc 	_ScanLoop
.94fa	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.94fc	90 18		bcc $9516			bcc 	_ScanSkipOne
.94fe	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9500	b0 2f		bcs $9531			bcs 	_ScanSkipData
.9502	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9504	90 db		bcc $94e1			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9506	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.9508	b0 d7		bcs $94e1			bcs 	_ScanLoop
.950a	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.950c	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.950e	b0 d1		bcs $94e1			bcs 	_ScanLoop
.9510	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9512	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9514	80 cb		bra $94e1			bra 	_ScanLoop
.9516					_ScanSkipOne:
.9516	c8		iny				iny 								; consume the extra one.
.9517	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9519	d0 c6		bne $94e1			bne 	_ScanLoop
.951b	18		clc				clc
.951c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.951e	65 30		adc $30				adc 	codePtr
.9520	85 30		sta $30				sta 	codePtr
.9522	90 02		bcc $9526			bcc 	_CREExit
.9524	e6 31		inc $31				inc 	codePtr+1
.9526					_CREExit:
.9526	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9528	b2 30		lda ($30)			lda 	(codePtr)
.952a	d0 b5		bne $94e1			bne 	_ScanLoop 					; if not zero, more to scan
.952c	a9 13		lda #$13		lda	#19
.952e	4c 69 95	jmp $9569		jmp	ErrorHandler
.9531					_ScanSkipData:
.9531	88		dey				dey 								; point at data token
.9532	c8		iny				iny
.9533	98		tya				tya
.9534	38		sec				sec
.9535	71 30		adc ($30),y			adc 	(codePtr),y
.9537	a8		tay				tay
.9538	80 a7		bra $94e1			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.953a					Command_WHILE:
.953a	5a		phy				phy 								; save position of the test
.953b	a2 00		ldx #$00			ldx 	#0
.953d	20 75 a0	jsr $a075			jsr 	EvaluateNumber 				; work out the number
.9540	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; check if zero
.9543	f0 0e		beq $9553			beq 	_WHExitLoop 				; if so exit the loop
.9545	98		tya				tya 								; position *after* test.
.9546	7a		ply				ply 								; restore position before test, at WHILE
.9547	88		dey				dey
.9548	48		pha				pha 								; push after test on the stack
.9549	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.954b	20 d5 a1	jsr $a1d5			jsr 	StackOpen
.954e	20 19 a2	jsr $a219			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9551	7a		ply				ply 								; restore the position *after* the test
.9552	60		rts				rts
.9553					_WHExitLoop:
.9553	68		pla				pla 								; throw post loop position
.9554	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.9556	aa		tax				tax
.9557	20 db 94	jsr $94db			jsr 	ScanForward
.955a	60		rts				rts
.955b					Command_WEND:
.955b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.955d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.955f	20 01 a2	jsr $a201			jsr 	StackCheckFrame
.9562	20 2a a2	jsr $a22a			jsr 	STKLoadCodePosition 		; loop back
.9565	20 f3 a1	jsr $a1f3			jsr 	StackClose		 			; erase the frame
.9568	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a92b					CheckRightBracket:
.a92b	b1 30		lda ($30),y			lda 	(codePtr),y
.a92d	c8		iny				iny
.a92e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a930	d0 0f		bne $a941			bne 	CNAFail
.a932	60		rts				rts
.a933					CheckComma:
.a933	b1 30		lda ($30),y			lda 	(codePtr),y
.a935	c8		iny				iny
.a936	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a938	d0 07		bne $a941			bne 	CNAFail
.a93a	60		rts				rts
.a93b					CheckNextA:
.a93b	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a93d	d0 02		bne $a941			bne 	CNAFail
.a93f	c8		iny				iny 								; skip character
.a940	60		rts				rts 								; and exit
.a941					CNAFail:
.a941	4c 11 af	jmp $af11			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9569					ErrorHandler:
.9569	a8		tay				tay 								; find the error text
.956a	f0 49		beq $95b5			beq 	_EHEnd
.956c	a2 00		ldx #$00			ldx 	#0
.956e	a9 2a		lda #$2a			lda 	#((ErrorText) & $FF)
.9570	85 36		sta $36				sta 	0+zTemp0
.9572	a9 af		lda #$af			lda 	#((ErrorText) >> 8)
.9574	85 37		sta $37				sta 	1+zTemp0
.9576					_EHFind:
.9576	88		dey				dey 								; found the error text ?
.9577	f0 0e		beq $9587			beq 	_EHFound
.9579					_EHFindZero:
.9579	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.957b	e6 36		inc $36				inc 	zTemp0
.957d	d0 02		bne $9581			bne 	_EHFNoCarry
.957f	e6 37		inc $37				inc 	zTemp0+1
.9581					_EHFNoCarry:
.9581	c9 00		cmp #$00			cmp 	#0
.9583	d0 f4		bne $9579			bne 	_EHFindZero
.9585	80 ef		bra $9576			bra 	_EHFind
.9587					_EHFound:
.9587	a5 36		lda $36				lda 	zTemp0 						; print message
.9589	a6 37		ldx $37				ldx 	zTemp0+1
.958b	20 c2 95	jsr $95c2			jsr 	PrintStringXA
.958e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9590	b1 30		lda ($30),y			lda 	(codePtr),y
.9592	d0 05		bne $9599			bne 	_EHAtMsg
.9594	c8		iny				iny
.9595	b1 30		lda ($30),y			lda 	(codePtr),y
.9597	f0 17		beq $95b0			beq 	_EHCREnd
.9599					_EHAtMsg:
.9599	a2 95		ldx #$95			ldx 	#_AtMsg >> 8 				; print " at "
.959b	a9 b8		lda #$b8			lda 	#_AtMsg & $FF
.959d	20 c2 95	jsr $95c2			jsr 	PrintStringXA
.95a0	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.95a2	b1 30		lda ($30),y			lda 	(codePtr),y
.95a4	48		pha				pha
.95a5	c8		iny				iny
.95a6	b1 30		lda ($30),y			lda 	(codePtr),y
.95a8	aa		tax				tax
.95a9	68		pla				pla
.95aa	20 87 aa	jsr $aa87			jsr 	ConvertInt16 				; convert XA to string
.95ad	20 c2 95	jsr $95c2			jsr 	PrintStringXA 				; and print it.
.95b0					_EHCREnd:
.95b0	a9 0d		lda #$0d			lda 	#13 						; new line
.95b2	20 b6 b0	jsr $b0b6			jsr 	EXTPrintCharacter
.95b5					_EHEnd:
.95b5	4c d9 8a	jmp $8ad9			jmp 	WarmStart
>95b8	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>95c0	20 00
.95c2					PrintStringXA:
.95c2	5a		phy				phy
.95c3	86 37		stx $37				stx 	zTemp0+1
.95c5	85 36		sta $36				sta 	zTemp0
.95c7	a0 00		ldy #$00			ldy 	#0
.95c9					_PSXALoop:
.95c9	b1 36		lda ($36),y			lda 	(zTemp0),y
.95cb	f0 06		beq $95d3			beq 	_PSXAExit
.95cd	20 b6 b0	jsr $b0b6			jsr 	EXTPrintCharacter
.95d0	c8		iny				iny
.95d1	80 f6		bra $95c9			bra 	_PSXALoop
.95d3					_PSXAExit:
.95d3	7a		ply				ply
.95d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.95d5					UnaryTrue:
.95d5	fa		plx				plx
.95d6					ReturnTrue:
.95d6	a9 01		lda #$01			lda 	#1  						; set to 1
.95d8	20 23 a1	jsr $a123			jsr 	NSMSetByte
.95db	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.95dd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95e0	60		rts				rts
.95e1					UnaryFalse:
.95e1	fa		plx				plx
.95e2					ReturnFalse:
.95e2	4c 21 a1	jmp $a121			jmp 	NSMSetZero 					; set it all to zero
.95e5					BinaryCompareEqual:
.95e5	fa		plx				plx
.95e6	20 21 96	jsr $9621			jsr 	CompareBaseCode
.95e9	c9 00		cmp #$00			cmp 	#0
.95eb	f0 e9		beq $95d6			beq 	ReturnTrue
.95ed	80 f3		bra $95e2			bra 	ReturnFalse
.95ef					BinaryCompareLess:
.95ef	fa		plx				plx
.95f0	20 21 96	jsr $9621			jsr 	CompareBaseCode
.95f3	c9 ff		cmp #$ff			cmp 	#$FF
.95f5	f0 df		beq $95d6			beq 	ReturnTrue
.95f7	80 e9		bra $95e2			bra 	ReturnFalse
.95f9					BinaryCompareGreater:
.95f9	fa		plx				plx
.95fa	20 21 96	jsr $9621			jsr 	CompareBaseCode
.95fd	c9 01		cmp #$01			cmp 	#1
.95ff	f0 d5		beq $95d6			beq 	ReturnTrue
.9601	80 df		bra $95e2			bra 	ReturnFalse
.9603					BinaryCompareNotEqual:
.9603	fa		plx				plx
.9604	20 21 96	jsr $9621			jsr 	CompareBaseCode
.9607	c9 00		cmp #$00			cmp 	#0
.9609	d0 cb		bne $95d6			bne 	ReturnTrue
.960b	80 d5		bra $95e2			bra 	ReturnFalse
.960d					BinaryCompareLessEqual:
.960d	fa		plx				plx
.960e	20 21 96	jsr $9621			jsr 	CompareBaseCode
.9611	c9 01		cmp #$01			cmp 	#1
.9613	d0 c1		bne $95d6			bne 	ReturnTrue
.9615	80 cb		bra $95e2			bra 	ReturnFalse
.9617					BinaryCompareGreaterEqual:
.9617	fa		plx				plx
.9618	20 21 96	jsr $9621			jsr 	CompareBaseCode
.961b	c9 ff		cmp #$ff			cmp 	#$FF
.961d	d0 b7		bne $95d6			bne 	ReturnTrue
.961f	80 c1		bra $95e2			bra 	ReturnFalse
.9621					CompareBaseCode:
.9621	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; make both values if references.
.9624	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9627	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.962a	29 10		and #$10			and 	#NSTString
.962c	d0 40		bne $966e			bne 	_CBCString
.962e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9631	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9634	d0 3b		bne $9671			bne 	_CBCFloat
.9636	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9639	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.963c	29 08		and #$08			and 	#NSTFloat
.963e	d0 31		bne $9671			bne 	_CBCFloat
.9640	20 74 96	jsr $9674			jsr 	CompareFixMinusZero
.9643	e8		inx				inx
.9644	20 74 96	jsr $9674			jsr 	CompareFixMinusZero
.9647	ca		dex				dex
.9648	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.964b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.964e	10 0b		bpl $965b			bpl 	_CDCSameSign
.9650	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9653	30 16		bmi $966b			bmi 	_CBCLess 					; return $FF
.9655					_CBCGreater:
.9655	a9 01		lda #$01			lda 	#1
.9657	60		rts				rts
.9658					_CBCEqual:
.9658	a9 00		lda #$00			lda 	#0
.965a	60		rts				rts
.965b					_CDCSameSign:
.965b	20 84 97	jsr $9784			jsr 	SubTopTwoStack 				; unsigned subtract
.965e	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; or the mantissa together
.9661	f0 f5		beq $9658			beq 	_CBCEqual 					; -0 == 0
.9663	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9666	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9669	10 ea		bpl $9655			bpl 	_CBCGreater
.966b					_CBCLess:
.966b	a9 ff		lda #$ff			lda 	#$FF
.966d	60		rts				rts
.966e					_CBCString:
.966e	4c da 96	jmp $96da			jmp 	CompareStrings
.9671					_CBCFloat:
.9671	4c 83 ab	jmp $ab83			jmp 	CompareFloat
.9674					CompareFixMinusZero:
.9674	20 51 a1	jsr $a151			jsr 	NSMIsZero
.9677	d0 03		bne $967c			bne 	_CFXMZNotZero
.9679	9e 00 04	stz $0400,x			stz 	NSStatus,x
.967c					_CFXMZNotZero:
.967c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.967d					StringConcat:
.967d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9680	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9683	29 18		and #$18			and 	#NSBTypeMask
.9685	c9 10		cmp #$10			cmp 	#NSTString
.9687	d0 4e		bne $96d7			bne		_SCType
.9689	64 38		stz $38				stz 	zTemp1 						; counting total length
.968b	e8		inx				inx
.968c	20 aa 96	jsr $96aa			jsr 	_SCSetupZ0 					; setup for second
.968f	20 b5 96	jsr $96b5			jsr 	_SCLengthZ0 				; length for second
.9692	ca		dex				dex
.9693	20 aa 96	jsr $96aa			jsr 	_SCSetupZ0 					; setup for first
.9696	20 b5 96	jsr $96b5			jsr 	_SCLengthZ0 				; length for first
.9699	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.969b	20 38 b2	jsr $b238			jsr 	StringTempAllocate
.969e	20 c8 96	jsr $96c8			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.96a1	e8		inx				inx
.96a2	20 aa 96	jsr $96aa			jsr 	_SCSetupZ0 					; copy second out
.96a5	20 c8 96	jsr $96c8			jsr 	_SCCopy
.96a8	ca		dex				dex
.96a9	60		rts				rts
.96aa					_SCSetupZ0:
.96aa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.96ad	85 36		sta $36				sta 	zTemp0
.96af	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96b2	85 37		sta $37				sta 	zTemp0+1
.96b4	60		rts				rts
.96b5					_SCLengthZ0:
.96b5	5a		phy				phy
.96b6	a0 00		ldy #$00			ldy 	#0
.96b8					_SCLenLoop:
.96b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.96ba	f0 0a		beq $96c6			beq 	_SCLExit
.96bc	c8		iny				iny
.96bd	e6 38		inc $38				inc 	zTemp1
.96bf	10 f7		bpl $96b8			bpl		_SCLenLoop
.96c1	a9 09		lda #$09		lda	#9
.96c3	4c 69 95	jmp $9569		jmp	ErrorHandler
.96c6					_SCLExit:
.96c6	7a		ply				ply
.96c7	60		rts				rts
.96c8					_SCCopy:
.96c8	5a		phy				phy
.96c9	a0 00		ldy #$00			ldy 	#0
.96cb					_SCCopyLoop:
.96cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.96cd	f0 06		beq $96d5			beq 	_SCCExit
.96cf	20 76 b2	jsr $b276			jsr 	StringTempWrite
.96d2	c8		iny				iny
.96d3	80 f6		bra $96cb			bra 	_SCCopyLoop
.96d5					_SCCExit:
.96d5	7a		ply				ply
.96d6	60		rts				rts
.96d7					_SCType:
.96d7	4c 1b af	jmp $af1b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a944					IntegerDivide:
.a944	fa		plx				plx
.a945	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a948	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a94b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a94c	0a		asl a				asl 	a
.a94d	10 05		bpl $a954			bpl 	_NotRef
.a94f	48		pha				pha
.a950	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a953	68		pla				pla
.a954					_NotRef:
.a954	0a		asl a				asl 	a
.a955	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a957	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a95a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a95d	f0 03		beq $a962			beq 	_IntegerCode 				; if clear, then we have two integers
.a95f	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.a962					_IntegerCode:
.a962	20 84 a9	jsr $a984			jsr 	CheckDivideZero 			; do div zero check
.a965	20 bc a9	jsr $a9bc			jsr 	Int32Divide 				; do the division
.a968	20 79 aa	jsr $aa79			jsr 	CalculateSign 				; calculate result sign
.a96b					NSMCopyPlusTwoToZero:
.a96b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a96e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a971	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a974	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a977	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a97a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a97d	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a980	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a983	60		rts				rts
.a984					CheckDivideZero:
.a984	e8		inx				inx
.a985	20 51 a1	jsr $a151			jsr 	NSMIsZero
.a988	f0 02		beq $a98c			beq 	_CDVError
.a98a	ca		dex				dex
.a98b	60		rts				rts
.a98c					_CDVError:
.a98c	a9 03		lda #$03		lda	#3
.a98e	4c 69 95	jmp $9569		jmp	ErrorHandler
.a991					IntegerModulus:
.a991	fa		plx				plx
.a992	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a995	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a998	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a999	0a		asl a				asl 	a
.a99a	10 05		bpl $a9a1			bpl 	_NotRef
.a99c	48		pha				pha
.a99d	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a9a0	68		pla				pla
.a9a1					_NotRef:
.a9a1	0a		asl a				asl 	a
.a9a2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a9a4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a9a7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a9aa	f0 03		beq $a9af			beq 	_IntegerCode 				; if clear, then we have two integers
.a9ac	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.a9af					_IntegerCode:
.a9af					IntegerModulusNoCheck:
.a9af	20 84 a9	jsr $a984			jsr 	CheckDivideZero 			; do div zero check
.a9b2	20 bc a9	jsr $a9bc			jsr 	Int32Divide 				; do the division
.a9b5	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a9b8	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a9bb	60		rts				rts
.a9bc					Int32Divide:
.a9bc	48		pha				pha 								; save AXY
.a9bd	5a		phy				phy
.a9be	20 f8 a0	jsr $a0f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a9c1	20 1d a1	jsr $a11d			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a9c4	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a9c6					_I32DivideLoop:
.a9c6	e8		inx				inx
.a9c7	e8		inx				inx
.a9c8	20 36 a1	jsr $a136			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a9cb	ca		dex				dex
.a9cc	ca		dex				dex
.a9cd	20 37 a1	jsr $a137			jsr 	NSMRotateLeft
.a9d0	20 fc a9	jsr $a9fc			jsr 	DivideCheckSubtract 		; check if subtract possible
.a9d3	90 03		bcc $a9d8			bcc 	_I32DivideNoCarryIn
.a9d5	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a9d8					_I32DivideNoCarryIn:
.a9d8	88		dey				dey 								; loop round till division completed.
.a9d9	d0 eb		bne $a9c6			bne 	_I32DivideLoop
.a9db	7a		ply				ply 								; restore AXY and exit
.a9dc	68		pla				pla
.a9dd	60		rts				rts
.a9de					Int32ShiftDivide:
.a9de	48		pha				pha 								; save AY
.a9df	5a		phy				phy
.a9e0	e8		inx				inx 								; clear S[X+2]
.a9e1	e8		inx				inx
.a9e2	20 21 a1	jsr $a121			jsr 	NSMSetZero
.a9e5	ca		dex				dex
.a9e6	ca		dex				dex
.a9e7	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a9e9					_I32SDLoop:
.a9e9	20 fc a9	jsr $a9fc			jsr 	DivideCheckSubtract 		; check if subtract possible
.a9ec	e8		inx				inx
.a9ed	e8		inx				inx
.a9ee	20 37 a1	jsr $a137			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a9f1	ca		dex				dex
.a9f2	ca		dex				dex
.a9f3	20 37 a1	jsr $a137			jsr 	NSMRotateLeft
.a9f6	88		dey				dey 	 							; do 31 times
.a9f7	d0 f0		bne $a9e9			bne 	_I32SDLoop
.a9f9	7a		ply				ply 								; restore AY and exit
.a9fa	68		pla				pla
.a9fb	60		rts				rts
.a9fc					DivideCheckSubtract:
.a9fc	20 84 97	jsr $9784			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a9ff	b0 04		bcs $aa05			bcs 	_DCSExit 					; if carry set, then could do, exit
.aa01	20 5e 97	jsr $975e			jsr 	AddTopTwoStack 				; add it back in
.aa04	18		clc				clc 								; and return False
.aa05					_DCSExit:
.aa05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.aa06					MulInteger:
.aa06	fa		plx				plx
.aa07	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aa0a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa0d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa0e	0a		asl a				asl 	a
.aa0f	10 05		bpl $aa16			bpl 	_NotRef
.aa11	48		pha				pha
.aa12	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aa15	68		pla				pla
.aa16					_NotRef:
.aa16	0a		asl a				asl 	a 							; put MSB of type into A:7
.aa17	30 0b		bmi $aa24			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.aa19	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aa1c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aa1f	f0 06		beq $aa27			beq 	_IntegerCode 				; if clear, then we have two integers
.aa21	4c 5a ac	jmp $ac5a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.aa24					_StringData:
.aa24	4c 25 af	jmp $af25			jmp 	NotDoneError							; at least one string - don't know both are strings.
.aa27					_IntegerCode:
.aa27	20 34 aa	jsr $aa34			jsr 	MultiplyShort
.aa2a	c9 00		cmp #$00			cmp 	#0
.aa2c	f0 05		beq $aa33			beq 	_MIExit
.aa2e	a9 04		lda #$04		lda	#4
.aa30	4c 69 95	jmp $9569		jmp	ErrorHandler
.aa33					_MIExit:
.aa33	60		rts				rts
.aa34					MultiplyShort:
.aa34	5a		phy				phy 								; save Y
.aa35	20 f8 a0	jsr $a0f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aa38	20 1d a1	jsr $a11d			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.aa3b	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.aa3d					_I32MLoop:
.aa3d	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.aa40	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.aa43	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.aa46	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.aa49	f0 28		beq $aa73			beq 	_I32MExit 					; exit if zero
.aa4b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.aa4e	29 01		and #$01			and 	#1
.aa50	f0 0e		beq $aa60			beq 	_I32MNoAdd
.aa52	20 5e 97	jsr $975e			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.aa55	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.aa58	10 06		bpl $aa60			bpl 	_I32MNoAdd
.aa5a					_I32ShiftRight:
.aa5a	20 44 a1	jsr $a144			jsr 	NSMShiftRight 				; shift S[X] right
.aa5d	c8		iny				iny 								; increment shift count
.aa5e	80 0a		bra $aa6a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.aa60					_I32MNoAdd:
.aa60	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.aa63	70 f5		bvs $aa5a			bvs 	_I32ShiftRight 				; instead.
.aa65	e8		inx				inx
.aa66	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.aa69	ca		dex				dex
.aa6a					_I32MShiftUpper:
.aa6a	e8		inx				inx 								; shift S[X+2] right
.aa6b	e8		inx				inx
.aa6c	20 44 a1	jsr $a144			jsr 	NSMShiftRight
.aa6f	ca		dex				dex
.aa70	ca		dex				dex
.aa71	80 ca		bra $aa3d			bra 	_I32MLoop 					; try again.
.aa73					_I32MExit:
.aa73	20 79 aa	jsr $aa79			jsr 	CalculateSign
.aa76	98		tya				tya 								; shift in A
.aa77	7a		ply				ply 								; restore Y and exit
.aa78	60		rts				rts
.aa79					CalculateSign:
.aa79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.aa7c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.aa7f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aa82	0a		asl a				asl 	a 							; shift bit 7 into carry
.aa83	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.aa86	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.96da					CompareStrings:
.96da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.96dd	3d 01 04	and $0401,x			and 	NSStatus+1,x
.96e0	29 10		and #$10			and 	#NSBIsString
.96e2	f0 2c		beq $9710			beq 	_CSTypeError
.96e4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.96e7	85 36		sta $36				sta 	zTemp0
.96e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96ec	85 37		sta $37				sta 	zTemp0+1
.96ee	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.96f1	85 38		sta $38				sta 	zTemp1
.96f3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.96f6	85 39		sta $39				sta 	zTemp1+1
.96f8	5a		phy				phy 								; save Y so we can access strings
.96f9	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.96fb					_CSLoop:
.96fb	c8		iny				iny
.96fc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.96fe	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9700	d0 06		bne $9708			bne 	_CSDifferent
.9702	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9704	d0 f5		bne $96fb			bne 	_CSLoop 					; still comparing
.9706					_CSExit:
.9706	7a		ply				ply 								; reached end, return zero in A from EOS
.9707	60		rts				rts
.9708					_CSDifferent:
.9708	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.970a	90 fa		bcc $9706			bcc		_CSExit
.970c	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.970e	80 f6		bra $9706			bra 	_CSExit
.9710					_CSTypeError:
.9710	4c 1b af	jmp $af1b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9713					ShiftLeft:
.9713	38		sec				sec
.9714	80 01		bra $9717			bra 	ShiftMain
.9716					ShiftRight:
.9716	18		clc				clc
.9717					ShiftMain:
.9717	fa		plx				plx 								; restore X
.9718	08		php				php 								; save direction
.9719	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.971c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.971f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9720	0a		asl a				asl 	a
.9721	10 05		bpl $9728			bpl 	_NotRef
.9723	48		pha				pha
.9724	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9727	68		pla				pla
.9728					_NotRef:
.9728	0a		asl a				asl 	a
.9729	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.972b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.972e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9731	f0 03		beq $9736			beq 	_IntegerCode 				; if clear, then we have two integers
.9733	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.9736					_IntegerCode:
.9736	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9739	29 e0		and #$e0			and 	#$E0
.973b	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.973e	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9741	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9744	d0 13		bne $9759			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9746					_SMLoop:
.9746	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9749	30 11		bmi $975c			bmi 	_SMExit 					; exit if done.
.974b	28		plp				plp 								; restore direcition setting
.974c	08		php				php
.974d	90 05		bcc $9754			bcc 	_SMRight
.974f	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; shift left if CS
.9752	80 f2		bra $9746			bra 	_SMLoop
.9754					_SMRight:
.9754	20 44 a1	jsr $a144			jsr 	NSMShiftRight 				; shift right if CC
.9757	80 ed		bra $9746			bra 	_SMLoop
.9759					_SMExit0:
.9759	20 21 a1	jsr $a121			jsr 	NSMSetZero 					; return zero.
.975c					_SMExit:
.975c	28		plp				plp 								; throw direction
.975d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.975e					AddTopTwoStack:
.975e	18		clc				clc
.975f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9762	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9765	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9768	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.976b	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.976e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9771	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9774	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9777	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.977a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.977d	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9780	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9783	60		rts				rts
.9784					SubTopTwoStack:
.9784	38		sec				sec
.9785	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9788	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.978b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.978e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9791	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9794	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9797	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.979a	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.979d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97a0	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97a3	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.97a6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97a9	60		rts				rts
.97aa					AddInteger:
.97aa	fa		plx				plx
.97ab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97ae	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97b1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97b2	0a		asl a				asl 	a
.97b3	10 05		bpl $97ba			bpl 	_NotRef
.97b5	48		pha				pha
.97b6	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97b9	68		pla				pla
.97ba					_NotRef:
.97ba	0a		asl a				asl 	a 							; put MSB of type into A:7
.97bb	30 0b		bmi $97c8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97bd	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97c0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97c3	f0 06		beq $97cb			beq 	_IntegerCode 				; if clear, then we have two integers
.97c5	4c e2 aa	jmp $aae2			jmp 	FloatingPointAdd 							; otherwise at least one float.
.97c8					_StringData:
.97c8	4c 7d 96	jmp $967d			jmp 	StringConcat							; at least one string - don't know both are strings.
.97cb					_IntegerCode:
.97cb					AddCode:
.97cb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.97ce	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.97d1	10 8b		bpl $975e			bpl 	AddTopTwoStack
.97d3	20 84 97	jsr $9784			jsr 	SubTopTwoStack 				; do a physical subtraction
.97d6	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.97d9	10 09		bpl $97e4			bpl 	_AddExit
.97db	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.97de	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97e1	20 d6 a0	jsr $a0d6			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.97e4					_AddExit:
.97e4	60		rts				rts
.97e5					SubInteger:
.97e5	fa		plx				plx
.97e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97e9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97ec	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ed	0a		asl a				asl 	a
.97ee	10 05		bpl $97f5			bpl 	_NotRef
.97f0	48		pha				pha
.97f1	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97f4	68		pla				pla
.97f5					_NotRef:
.97f5	0a		asl a				asl 	a 							; put MSB of type into A:7
.97f6	30 0b		bmi $9803			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97f8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97fb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97fe	f0 06		beq $9806			beq 	_IntegerCode 				; if clear, then we have two integers
.9800	4c e7 aa	jmp $aae7			jmp 	FloatingPointSub 							; otherwise at least one float.
.9803					_StringData:
.9803	4c 25 af	jmp $af25			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9806					_IntegerCode:
.9806	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9809	49 80		eor #$80			eor 	#$80
.980b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.980e	80 bb		bra $97cb			bra 	AddCode 					; and do the same code as add.
.9810					AndInteger:
.9810	fa		plx				plx
.9811	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9814	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9817	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9818	0a		asl a				asl 	a
.9819	10 05		bpl $9820			bpl 	_NotRef
.981b	48		pha				pha
.981c	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.981f	68		pla				pla
.9820					_NotRef:
.9820	0a		asl a				asl 	a
.9821	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9823	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9826	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9829	f0 03		beq $982e			beq 	_IntegerCode 				; if clear, then we have two integers
.982b	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.982e					_IntegerCode:
.982e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9831	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9834	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9837	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.983a	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.983d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9840	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9843	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9846	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9849	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.984c	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.984f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9852	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9855	60		rts				rts
.9856					OraInteger:
.9856	fa		plx				plx
.9857	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.985a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.985d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.985e	0a		asl a				asl 	a
.985f	10 05		bpl $9866			bpl 	_NotRef
.9861	48		pha				pha
.9862	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9865	68		pla				pla
.9866					_NotRef:
.9866	0a		asl a				asl 	a
.9867	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9869	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.986c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.986f	f0 03		beq $9874			beq 	_IntegerCode 				; if clear, then we have two integers
.9871	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.9874					_IntegerCode:
.9874	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9877	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.987a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.987d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9880	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9883	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9886	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9889	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.988c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.988f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9892	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9895	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9898	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.989b	60		rts				rts
.989c					EorInteger:
.989c	fa		plx				plx
.989d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98a0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98a3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98a4	0a		asl a				asl 	a
.98a5	10 05		bpl $98ac			bpl 	_NotRef
.98a7	48		pha				pha
.98a8	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98ab	68		pla				pla
.98ac					_NotRef:
.98ac	0a		asl a				asl 	a
.98ad	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98af	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98b2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98b5	f0 03		beq $98ba			beq 	_IntegerCode 				; if clear, then we have two integers
.98b7	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.98ba					_IntegerCode:
.98ba	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.98bd	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.98c0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98c3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.98c6	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.98c9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98cc	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.98cf	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.98d2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98d5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.98d8	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.98db	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.98de	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.98e1	60		rts				rts
.98e2					WordIndirect:
.98e2	fa		plx				plx
.98e3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98e6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98e9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98ea	0a		asl a				asl 	a
.98eb	10 05		bpl $98f2			bpl 	_NotRef
.98ed	48		pha				pha
.98ee	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98f1	68		pla				pla
.98f2					_NotRef:
.98f2	0a		asl a				asl 	a
.98f3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98f5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98f8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98fb	f0 03		beq $9900			beq 	_IntegerCode 				; if clear, then we have two integers
.98fd	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.9900					_IntegerCode:
.9900	20 cb 97	jsr $97cb			jsr 	AddCode 					; add the two values
.9903	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9905	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9908	60		rts				rts
.9909					ByteIndirect:
.9909	fa		plx				plx
.990a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.990d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9910	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9911	0a		asl a				asl 	a
.9912	10 05		bpl $9919			bpl 	_NotRef
.9914	48		pha				pha
.9915	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9918	68		pla				pla
.9919					_NotRef:
.9919	0a		asl a				asl 	a
.991a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.991c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.991f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9922	f0 03		beq $9927			beq 	_IntegerCode 				; if clear, then we have two integers
.9924	4c 1b af	jmp $af1b			jmp 	TypeError 					; anything else, type mismatch.
.9927					_IntegerCode:
.9927	20 cb 97	jsr $97cb			jsr 	AddCode 					; add the two values
.992a	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.992c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.992f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.aa87					ConvertInt16:
.aa87	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.aa8a	8e 10 04	stx $0410			stx 	NSMantissa1
.aa8d	9c 18 04	stz $0418			stz 	NSMantissa2
.aa90	9c 20 04	stz $0420			stz 	NSMantissa3
.aa93	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.aa96	a2 00		ldx #$00			ldx 	#0 							; stack level
.aa98	a9 0a		lda #$0a			lda 	#10 						; base
.aa9a	80 00		bra $aa9c			bra 	ConvertInt32
.aa9c					ConvertInt32:
.aa9c	5a		phy				phy
.aa9d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.aa9f	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aaa2	10 08		bpl $aaac			bpl 	_CI32NotNeg
.aaa4	48		pha				pha
.aaa5	a9 2d		lda #$2d			lda 	#'-'
.aaa7	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aaaa	c8		iny				iny
.aaab	68		pla				pla
.aaac					_CI32NotNeg:
.aaac	20 ba aa	jsr $aaba			jsr 	_CI32DivideConvert 			; recursive conversion
.aaaf	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.aab1	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aab4	7a		ply				ply
.aab5	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.aab7	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.aab9	60		rts				rts
.aaba					_CI32DivideConvert:
.aaba	e8		inx				inx 								; write to next slot up
.aabb	20 23 a1	jsr $a123			jsr 	NSMSetByte
.aabe	ca		dex				dex
.aabf	20 bc a9	jsr $a9bc			jsr 	Int32Divide 				; divide
.aac2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.aac5	48		pha				pha
.aac6	20 6b a9	jsr $a96b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.aac9	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; is it zero ?
.aacc	f0 06		beq $aad4			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.aace	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.aad1	20 ba aa	jsr $aaba			jsr 	_CI32DivideConvert 			; and recusrively call.
.aad4					_CI32NoRecurse:
.aad4	68		pla				pla 								; remainder
.aad5	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.aad7	90 02		bcc $aadb			bcc 	_CI32NotHex
.aad9	69 26		adc #$26			adc 	#6+32
.aadb					_CI32NotHex:
.aadb	69 30		adc #$30			adc 	#48
.aadd	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.aae0	c8		iny				iny
.aae1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9930					PrecedenceLevel:
>9930	04					.byte	 4	; $00 <<
>9931	02					.byte	 2	; $01 <=
>9932	02					.byte	 2	; $02 <>
>9933	00					.byte	 0	; $03 !!3
>9934	00					.byte	 0	; $04 ><
>9935	02					.byte	 2	; $05 >=
>9936	04					.byte	 4	; $06 >>
>9937	00					.byte	 0	; $07 !!7
>9938	00					.byte	 0	; $08 !!8
>9939	00					.byte	 0	; $09 !!9
>993a	00					.byte	 0	; $0a !!10
>993b	00					.byte	 0	; $0b !!11
>993c	00					.byte	 0	; $0c !!12
>993d	00					.byte	 0	; $0d !!13
>993e	00					.byte	 0	; $0e !!14
>993f	00					.byte	 0	; $0f !!15
>9940	00					.byte	 0	; $10 @
>9941	00					.byte	 0	; $11 !!17
>9942	00					.byte	 0	; $12 !!18
>9943	00					.byte	 0	; $13 [
>9944	04					.byte	 4	; $14 \
>9945	00					.byte	 0	; $15 ]
>9946	01					.byte	 1	; $16 ^
>9947	00					.byte	 0	; $17 _
>9948	00					.byte	 0	; $18 `
>9949	00					.byte	 0	; $19 !!25
>994a	00					.byte	 0	; $1a !!26
>994b	00					.byte	 0	; $1b {
>994c	01					.byte	 1	; $1c |
>994d	00					.byte	 0	; $1d }
>994e	00					.byte	 0	; $1e ~
>994f	00					.byte	 0	; $1f [7m<7F>[m
>9950	00					.byte	 0	; $20
>9951	05					.byte	 5	; $21 !
>9952	00					.byte	 0	; $22 "
>9953	00					.byte	 0	; $23 #
>9954	05					.byte	 5	; $24 $
>9955	04					.byte	 4	; $25 %
>9956	01					.byte	 1	; $26 &
>9957	00					.byte	 0	; $27 '
>9958	00					.byte	 0	; $28 (
>9959	00					.byte	 0	; $29 )
>995a	04					.byte	 4	; $2a *
>995b	03					.byte	 3	; $2b +
>995c	00					.byte	 0	; $2c ,
>995d	03					.byte	 3	; $2d -
>995e	00					.byte	 0	; $2e .
>995f	04					.byte	 4	; $2f /
>9960	00					.byte	 0	; $30 0
>9961	00					.byte	 0	; $31 1
>9962	00					.byte	 0	; $32 2
>9963	00					.byte	 0	; $33 3
>9964	00					.byte	 0	; $34 4
>9965	00					.byte	 0	; $35 5
>9966	00					.byte	 0	; $36 6
>9967	00					.byte	 0	; $37 7
>9968	00					.byte	 0	; $38 8
>9969	00					.byte	 0	; $39 9
>996a	00					.byte	 0	; $3a :
>996b	00					.byte	 0	; $3b ;
>996c	02					.byte	 2	; $3c <
>996d	02					.byte	 2	; $3d =
>996e	02					.byte	 2	; $3e >
>996f	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9970					EvaluateExpressionAt0:
.9970	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9972					EvaluateExpression:
.9972	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9974					EvaluateExpressionAtPrecedence:
.9974	48		pha				pha 								; save precedence level
.9975	20 43 9c	jsr $9c43			jsr 	EvaluateTerm 				; evaluate term into level X.
.9978	68		pla				pla 								; restore precedence level.
.9979					_EXPRLoop:
.9979	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.997b	b1 30		lda ($30),y			lda 	(codePtr),y
.997d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.997f	b0 25		bcs $99a6			bcs 	_EXPRExit
.9981	da		phx				phx 								; read the operator precedence
.9982	aa		tax				tax
.9983	bd 30 99	lda $9930,x			lda 	PrecedenceLevel,x
.9986	fa		plx				plx
.9987	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9989	f0 1b		beq $99a6			beq 	_EXPRExit
.998b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.998d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.998f	c5 37		cmp $37				cmp 	zTemp0+1
.9991	b0 13		bcs $99a6			bcs		_EXPRExit 					; if current >= operator exit
.9993	48		pha				pha 								; save current precedence.
.9994	b1 30		lda ($30),y			lda 	(codePtr),y
.9996	c8		iny				iny
.9997	48		pha				pha
.9998	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.999a	e8		inx				inx 								; work out the right hand side.
.999b	20 74 99	jsr $9974			jsr 	EvaluateExpressionAtPrecedence
.999e	ca		dex				dex
.999f	68		pla				pla 								; get operator, call the code.
.99a0	20 a9 99	jsr $99a9			jsr 	_EXPRCaller
.99a3	68		pla				pla 								; restore precedence level
.99a4	80 d3		bra $9979			bra 	_EXPRLoop 					; and go round.
.99a6					_EXPRExit:
.99a6	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.99a8	60		rts				rts
.99a9					_EXPRCaller:
.99a9	da		phx				phx 								; save on stack, first thing is to restore it
.99aa	0a		asl a				asl 	a 							; double so can use vectors into X
.99ab	aa		tax				tax
.99ac	7c 88 91	jmp ($9188,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.aae2					FloatingPointAdd:
.aae2	20 83 ac	jsr $ac83			jsr 	FloatPrepare 				; prepare for floats
.aae5	80 0b		bra $aaf2			bra 	FloatAdd
.aae7					FloatingPointSub:
.aae7	20 83 ac	jsr $ac83			jsr 	FloatPrepare 				; prepare for floats
.aaea					FloatSubtract:
.aaea	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.aaed	49 80		eor #$80			eor 	#$80
.aaef	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aaf2					FloatAdd:
.aaf2	48		pha				pha
.aaf3	5a		phy				phy
.aaf4	20 94 ac	jsr $ac94			jsr 	NSNormalise 				; normalise S[X]
.aaf7	f0 54		beq $ab4d			beq 	_FAReturn1
.aaf9	e8		inx				inx 								; normalise S[X+1]
.aafa	20 94 ac	jsr $ac94			jsr 	NSNormalise
.aafd	ca		dex				dex
.aafe	c9 00		cmp #$00			cmp 	#0
.ab00	f0 6f		beq $ab71			beq 	_FAExit 					; if so, just return A
.ab02	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.ab05	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.ab08	f0 1b		beq $ab25			beq 	_FAExponentsEqual
.ab0a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.ab0d	a8		tay				tay
.ab0e	38		sec				sec 								; do a signed comparison of the exponents.
.ab0f	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ab12	50 02		bvc $ab16			bvc 	_FANoSignedChange
.ab14	49 80		eor #$80			eor 	#$80
.ab16					_FANoSignedChange:
.ab16	29 80		and #$80			and 	#$80
.ab18	10 03		bpl $ab1d			bpl 	_FAHaveMax
.ab1a	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.ab1d					_FAHaveMax:
.ab1d	20 74 ab	jsr $ab74			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.ab20	e8		inx				inx
.ab21	20 74 ab	jsr $ab74			jsr 	_FAShiftToExponent
.ab24	ca		dex				dex
.ab25					_FAExponentsEqual:
.ab25	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.ab28	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ab2b	30 10		bmi $ab3d			bmi 	_FADifferentSigns
.ab2d	20 5e 97	jsr $975e			jsr 	AddTopTwoStack 				; do the add of the mantissae
.ab30	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.ab33	10 3c		bpl $ab71			bpl 	_FAExit 					; if no, we are done.
.ab35	20 44 a1	jsr $a144			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.ab38	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.ab3b	80 34		bra $ab71			bra 	_FAExit
.ab3d					_FADifferentSigns:
.ab3d	20 84 97	jsr $9784			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.ab40	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.ab43	10 2c		bpl $ab71			bpl 	_FAExit 					; if no, we are done.
.ab45	20 cd a0	jsr $a0cd			jsr 	NSMNegate 					; netate result
.ab48	20 d6 a0	jsr $a0d6			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.ab4b	80 24		bra $ab71			bra 	_FAExit
.ab4d					_FAReturn1:
.ab4d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.ab50	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ab53	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.ab56	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab59	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.ab5c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab5f	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.ab62	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab65	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.ab68	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ab6b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.ab6e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab71					_FAExit:
.ab71	7a		ply				ply
.ab72	68		pla				pla
.ab73	60		rts				rts
.ab74					_FAShiftToExponent:
.ab74					_FAShiftToExponent2:
.ab74	98		tya				tya 								; compare Y to exponent
.ab75	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.ab78	f0 08		beq $ab82			beq 	_FASEExit 					; exit if so.
.ab7a	20 44 a1	jsr $a144			jsr 	NSMShiftRight	 			; shift the mantissa right
.ab7d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.ab80	80 f2		bra $ab74			bra 	_FAShiftToExponent2
.ab82					_FASEExit:
.ab82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.ab83					CompareFloat:
.ab83	20 ea aa	jsr $aaea			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.ab86	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.ab89	29 f8		and #$f8			and 	#$F8
.ab8b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.ab8e	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.ab91	f0 09		beq $ab9c			beq 	_FCExit 					; zero, so approximately identical
.ab93	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.ab95	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ab98	10 02		bpl $ab9c			bpl 	_FCExit
.ab9a					_FCNegative:
.ab9a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ab9c					_FCExit:
.ab9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ab9d					FDivideCommand:
.ab9d	fa		plx				plx	 								; restore stack position
.ab9e	20 83 ac	jsr $ac83			jsr 	FloatPrepare 				; prepare for floats
.aba1					FloatDivide:
.aba1	48		pha				pha
.aba2	e8		inx				inx
.aba3	20 94 ac	jsr $ac94			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aba6	ca		dex				dex
.aba7	c9 00		cmp #$00			cmp 	#0
.aba9	f0 20		beq $abcb			beq 	_FDZero
.abab	20 94 ac	jsr $ac94			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.abae	f0 19		beq $abc9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.abb0	20 de a9	jsr $a9de			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.abb3	20 6b a9	jsr $a96b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.abb6	20 94 ac	jsr $ac94			jsr		NSNormalise 				; renormalise
.abb9	20 79 aa	jsr $aa79			jsr 	CalculateSign 				; calculate result sign
.abbc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.abbf	38		sec				sec
.abc0	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.abc3	38		sec				sec
.abc4	e9 1e		sbc #$1e			sbc 	#30
.abc6	9d 28 04	sta $0428,x			sta 	NSExponent,x
.abc9					_FDExit:
.abc9	68		pla				pla
.abca	60		rts				rts
.abcb					_FDZero:
.abcb	a9 03		lda #$03		lda	#3
.abcd	4c 69 95	jmp $9569		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.abd0					FloatFractionalPart:
.abd0	5a		phy				phy
.abd1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.abd4	29 7f		and #$7f			and 	#$7F
.abd6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abd9	20 94 ac	jsr $ac94			jsr 	NSNormalise
.abdc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.abdf	38		sec				sec
.abe0	e9 e0		sbc #$e0			sbc 	#$E0
.abe2	90 31		bcc $ac15			bcc 	_FFPExit 					; already fractional
.abe4	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.abe6	b0 2a		bcs $ac12			bcs 	_FFPZero
.abe8	a8		tay				tay 								; put count to do in Y
.abe9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.abec	20 17 ac	jsr $ac17			jsr 	_FFPPartial
.abef	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.abf2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.abf5	20 17 ac	jsr $ac17			jsr 	_FFPPartial
.abf8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.abfb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.abfe	20 17 ac	jsr $ac17			jsr 	_FFPPartial
.ac01	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac04	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ac07	20 17 ac	jsr $ac17			jsr 	_FFPPartial
.ac0a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ac0d	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; zeroed check.
.ac10	d0 03		bne $ac15			bne 	_FFPExit
.ac12					_FFPZero:
.ac12	20 21 a1	jsr $a121			jsr 	NSMSetZero
.ac15					_FFPExit:
.ac15	7a		ply				ply
.ac16	60		rts				rts
.ac17					_FFPPartial:
.ac17	c0 00		cpy #$00			cpy 	#0 							; no more to do
.ac19	f0 17		beq $ac32			beq 	_FFFPPExit
.ac1b	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.ac1d	b0 0c		bcs $ac2b			bcs 	_FFFPPWholeByte
.ac1f	5a		phy				phy
.ac20					_FFFPPLeft:
.ac20	0a		asl a				asl 	a
.ac21	88		dey				dey
.ac22	d0 fc		bne $ac20			bne 	_FFFPPLeft
.ac24	7a		ply				ply
.ac25					_FFFPPRight:
.ac25	4a		lsr a				lsr 	a
.ac26	88		dey				dey
.ac27	d0 fc		bne $ac25			bne 	_FFFPPRight
.ac29	80 07		bra $ac32			bra 	_FFFPPExit
.ac2b					_FFFPPWholeByte:
.ac2b	98		tya				tya 								; subtract 8 from count
.ac2c	38		sec				sec
.ac2d	e9 08		sbc #$08			sbc 	#8
.ac2f	a8		tay				tay
.ac30	a9 00		lda #$00			lda 	#0 							; and clear all
.ac32					_FFFPPExit:
.ac32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.ac33					FloatIntegerPart:
.ac33	48		pha				pha
.ac34	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.ac37	f0 1f		beq $ac58			beq 	_FIPExit 					; if so do nothing
.ac39	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; is it zero ?
.ac3c	f0 17		beq $ac55			beq 	_FIPZero 					; if so return zero.
.ac3e	20 94 ac	jsr $ac94			jsr 	NSNormalise 				; normalise
.ac41	f0 12		beq $ac55			beq 	_FIPZero 					; normalised to zero, exit zero
.ac43					_FIPShift:
.ac43	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.ac46	10 08		bpl $ac50			bpl 	_FIPCheckZero
.ac48	20 44 a1	jsr $a144			jsr 	NSMShiftRight 				; shift mantissa right
.ac4b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.ac4e	80 f3		bra $ac43			bra 	_FIPShift
.ac50					_FIPCheckZero:
.ac50	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; avoid -0 problem
.ac53	d0 03		bne $ac58			bne 	_FIPExit 					; set to zero if mantissa zero.
.ac55					_FIPZero:
.ac55	20 21 a1	jsr $a121			jsr 	NSMSetZero
.ac58					_FIPExit:
.ac58	68		pla				pla
.ac59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.ac5a					FloatingPointMultiply:
.ac5a	20 83 ac	jsr $ac83			jsr 	FloatPrepare 				; prepare for floats
.ac5d					FloatMultiply:
.ac5d	48		pha				pha
.ac5e	20 94 ac	jsr $ac94			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ac61	f0 1b		beq $ac7e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ac63	e8		inx				inx
.ac64	20 94 ac	jsr $ac94			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ac67	ca		dex				dex
.ac68	c9 00		cmp #$00			cmp 	#0
.ac6a	f0 0f		beq $ac7b			beq 	_FDSetZero
.ac6c	20 34 aa	jsr $aa34			jsr 	MultiplyShort 				; calculate the result.
.ac6f	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.ac72	18		clc				clc
.ac73	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.ac76	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ac79	80 03		bra $ac7e			bra 	_FDExit
.ac7b					_FDSetZero:
.ac7b	20 21 a1	jsr $a121			jsr 	NSMSetZero 					; return 0
.ac7e					_FDExit:
.ac7e	20 94 ac	jsr $ac94			jsr 	NSNormalise 				; normalise the result
.ac81	68		pla				pla
.ac82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.ac83					FloatPrepare:
.ac83	20 82 9a	jsr $9a82			jsr 	DereferenceTopTwo 			; dereference the top two values
.ac86	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.ac89	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ac8c	29 10		and #$10			and 	#NSBIsString
.ac8e	d0 01		bne $ac91			bne 	_FDType
.ac90	60		rts				rts
.ac91					_FDType:
.ac91	4c 1b af	jmp $af1b			jmp 	TypeError
.ac94					NSNormalise:
.ac94	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ac97	29 80		and #$80			and 	#$80
.ac99	09 08		ora #$08			ora 	#NSTFloat
.ac9b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac9e	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; if zero exit
.aca1	d0 09		bne $acac			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.aca3	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aca6	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.aca9	a9 00		lda #$00			lda 	#0 							; set Z flag
.acab	60		rts				rts
.acac					_NSNormaliseOptimise:
.acac	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.acaf	d0 22		bne $acd3			bne 	_NSNormaliseLoop
.acb1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.acb4	30 1d		bmi $acd3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.acb6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.acb9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.acbc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.acbf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.acc2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.acc5	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.acc8	bd 28 04	lda $0428,x			lda 	NSExponent,x
.accb	38		sec				sec
.accc	e9 08		sbc #$08			sbc 	#8
.acce	9d 28 04	sta $0428,x			sta 	NSExponent,x
.acd1	80 d9		bra $acac			bra 	_NSNormaliseOptimise
.acd3					_NSNormaliseLoop:
.acd3	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.acd6	70 08		bvs $ace0			bvs 	_NSNExit 					; exit if so with Z flag clear
.acd8	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; shift mantissa left
.acdb	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.acde	80 f3		bra $acd3			bra 	_NSNormaliseLoop
.ace0					_NSNExit:
.ace0	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ace2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.99af					AssignNumber:
.99af	5a		phy				phy
.99b0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.99b3	85 36		sta $36				sta 	zTemp0
.99b5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.99b8	85 37		sta $37				sta 	zTemp0+1
.99ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.99bd	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.99bf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99c2	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.99c4	c9 08		cmp #$08			cmp 	#NSTFloat
.99c6	f0 2a		beq $99f2			beq 	_ANFloat
.99c8	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.99cb	f0 05		beq $99d2			beq		_ANNotFloat
.99cd	e8		inx				inx
.99ce	20 33 ac	jsr $ac33			jsr 	FloatIntegerPart 			; make it an integer
.99d1	ca		dex				dex
.99d2					_ANNotFloat:
.99d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.99d5	29 03		and #$03			and 	#3
.99d7	d0 05		bne $99de			bne 	_ANByteWord
.99d9	20 fe 99	jsr $99fe			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.99dc	80 1e		bra $99fc			bra 	_ANExit
.99de					_ANByteWord:
.99de	48		pha				pha 								; save count
.99df	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.99e2	92 36		sta ($36)			sta 	(zTemp0)
.99e4	68		pla				pla
.99e5	c9 01		cmp #$01			cmp	 	#1
.99e7	f0 13		beq $99fc			beq 	_ANExit
.99e9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.99ec	a0 01		ldy #$01			ldy 	#1
.99ee	91 36		sta ($36),y			sta 	(zTemp0),y
.99f0	80 0a		bra $99fc			bra 	_ANExit
.99f2					_ANFloat:
.99f2	20 fe 99	jsr $99fe			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.99f5	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.99f8	a0 04		ldy #$04			ldy 	#4
.99fa	91 36		sta ($36),y			sta 	(zTemp0),y
.99fc					_ANExit:
.99fc	7a		ply				ply
.99fd	60		rts				rts
.99fe					_ANCopy4PackSign:
.99fe	a0 03		ldy #$03			ldy 	#3
.9a00	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9a03	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9a05	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9a08	91 36		sta ($36),y			sta 	(zTemp0),y
.9a0a	88		dey				dey
.9a0b	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a0e	91 36		sta ($36),y			sta 	(zTemp0),y
.9a10	88		dey				dey
.9a11	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a14	91 36		sta ($36),y			sta 	(zTemp0),y
.9a16	88		dey				dey
.9a17	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a1a	91 36		sta ($36),y			sta 	(zTemp0),y
.9a1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9a1d					AssignString:
.9a1d	5a		phy				phy
.9a1e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a21	85 38		sta $38				sta 	zTemp1
.9a23	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a26	85 39		sta $39				sta 	zTemp1+1
.9a28	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a2b	85 36		sta $36				sta 	zTemp0
.9a2d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a30	85 37		sta $37				sta 	zTemp0+1
.9a32	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9a34	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a36	f0 23		beq $9a5b			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9a38	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9a39	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9a3b	e9 02		sbc #$02			sbc 	#2
.9a3d	85 3c		sta $3c				sta 	zsTemp
.9a3f	a0 01		ldy #$01			ldy 	#1
.9a41	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a43	e9 00		sbc #$00			sbc 	#0
.9a45	85 3d		sta $3d				sta 	zsTemp+1
.9a47	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9a49					_ASGetLength:
.9a49	c8		iny				iny
.9a4a	b1 38		lda ($38),y			lda 	(zTemp1),y
.9a4c	d0 fb		bne $9a49			bne 	_ASGetLength
.9a4e	98		tya				tya 								; is this length <= current length
.9a4f	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9a51	90 20		bcc $9a73			bcc 	_ASCopyString
.9a53	f0 1e		beq $9a73			beq 	_ASCopyString
.9a55	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9a57	a0 01		ldy #$01			ldy 	#1
.9a59	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a5b					_ASNewStringRequired:
.9a5b	e8		inx				inx 								; concrete the new string.
.9a5c	20 b7 b1	jsr $b1b7			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9a5f	ca		dex				dex
.9a60	18		clc				clc
.9a61	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9a64	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9a66	92 36		sta ($36)			sta 	(zTemp0)
.9a68	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a6b	69 00		adc #$00			adc 	#0
.9a6d	a0 01		ldy #$01			ldy 	#1
.9a6f	91 36		sta ($36),y			sta 	(zTemp0),y
.9a71	80 0d		bra $9a80			bra 	_ASExit
.9a73					_ASCopyString:
.9a73	a0 00		ldy #$00			ldy 	#0
.9a75					_ASCopyLoop:
.9a75	b1 38		lda ($38),y			lda 	(zTemp1),y
.9a77	c8		iny				iny
.9a78	c8		iny				iny
.9a79	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9a7b	88		dey				dey
.9a7c	c9 00		cmp #$00			cmp 	#0
.9a7e	d0 f5		bne $9a75			bne 	_ASCopyLoop
.9a80					_ASExit:
.9a80	7a		ply				ply
.9a81	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9a82					DereferenceTopTwo:
.9a82	e8		inx				inx
.9a83	20 87 9a	jsr $9a87			jsr 	Dereference 				; deref x+1
.9a86	ca		dex				dex  								; falls through to deref x
.9a87					Dereference:
.9a87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9a8a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9a8c	f0 57		beq $9ae5			beq 	_DRFExit 					; not a reference
.9a8e	5a		phy				phy
.9a8f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9a92	85 36		sta $36				sta 	zTemp0
.9a94	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a97	85 37		sta $37				sta 	zTemp0+1
.9a99	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9a9c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9a9e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9aa1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9aa4	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9aa6	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9aa8	f0 0f		beq $9ab9			beq 	_DRFDereferenceTwo
.9aaa	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9aac	f0 39		beq $9ae7			beq 	_DRFFull
.9aae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9ab1	29 03		and #$03			and 	#3
.9ab3	f0 32		beq $9ae7			beq 	_DRFFull 					; the whole word
.9ab5	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9ab7	f0 07		beq $9ac0			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9ab9					_DRFDereferenceTwo:
.9ab9	a0 01		ldy #$01			ldy 	#1
.9abb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9abd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ac0					_DRFClear23:
.9ac0	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9ac3	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ac6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9ac9	29 18		and #$18			and 	#NSBTypeMask
.9acb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ace	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9ad0	d0 12		bne $9ae4			bne 	_DRFNotString
.9ad2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9ad5	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9ad8	d0 0a		bne $9ae4			bne 	_DRFNotString
.9ada	a9 e6		lda #$e6			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9adc	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9adf	a9 9a		lda #$9a			lda 	#_DRFNullString >> 8
.9ae1	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9ae4					_DRFNotString
.9ae4	7a		ply				ply 								; restore Y and exit
.9ae5					_DRFExit:
.9ae5	60		rts				rts
.9ae6					_DRFNullString:
>9ae6	00						.byte 	0
.9ae7					_DRFFull:
.9ae7	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9ae9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9aeb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9aee	c8		iny				iny
.9aef	b1 36		lda ($36),y			lda 	(zTemp0),y
.9af1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9af4	c8		iny				iny
.9af5	b1 36		lda ($36),y			lda 	(zTemp0),y
.9af7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9afa	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9afd	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9b00	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9b02	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9b05	f0 06		beq $9b0d			beq 	_DRFNoExponent
.9b07	c8		iny				iny 								; if not, read the exponent as well.
.9b08	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b0a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9b0d					_DRFNoExponent:
.9b0d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9b10	10 0d		bpl $9b1f			bpl 	_DRFExit2 					; if not, then exit.
.9b12	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9b14	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b17	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9b1a	09 80		ora #$80			ora 	#NSBIsNegative
.9b1c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b1f					_DRFExit2:
.9b1f	7a		ply				ply
.9b20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9b21					EncodeNumberStart:
.9b21	38		sec				sec
.9b22	80 01		bra $9b25			bra 	EncodeNumberContinue+1
.9b24					EncodeNumberContinue:
.9b24	18		clc				clc
.9b25					EncodeNumber:
.9b25	08		php				php 								; save reset.
.9b26	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9b28	f0 12		beq $9b3c			beq 	_ENIsOkay
.9b2a	c9 30		cmp #$30			cmp 	#"0"
.9b2c	90 04		bcc $9b32			bcc 	_ENBadNumber
.9b2e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b30	90 0a		bcc $9b3c			bcc 	_ENIsOkay
.9b32					_ENBadNumber:
.9b32	28		plp				plp 								; throw saved reset
.9b33	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9b36	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9b38	f0 7e		beq $9bb8			beq 	_ENConstructFinal
.9b3a					_ENFail:
.9b3a	18		clc				clc 								; not allowed
.9b3b	60		rts				rts
.9b3c					_ENIsOkay:
.9b3c	28		plp				plp 								; are we restarting
.9b3d	90 15		bcc $9b54			bcc 	_ENNoRestart
.9b3f					_ENStartEncode:
.9b3f	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9b41	f0 0c		beq $9b4f			beq 	_ENFirstDP
.9b43	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9b45	20 23 a1	jsr $a123			jsr 	NSMSetByte
.9b48	a9 01		lda #$01			lda 	#ESTA_Low
.9b4a					_ENExitChange:
.9b4a	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9b4d	38		sec				sec
.9b4e	60		rts				rts
.9b4f					_ENFirstDP:
.9b4f	20 21 a1	jsr $a121			jsr 	NSMSetZero 					; clear integer part
.9b52	80 3f		bra $9b93			bra 	_ESTASwitchFloat			; go straight to float and exi
.9b54					_ENNoRestart:
.9b54	48		pha				pha 								; save on stack.
.9b55	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9b58	c9 01		cmp #$01			cmp 	#ESTA_Low
.9b5a	f0 09		beq $9b65			beq  	_ESTALowState
.9b5c	c9 02		cmp #$02			cmp 	#ESTA_High
.9b5e	f0 29		beq $9b89			beq 	_ESTAHighState
.9b60	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9b62	f0 3b		beq $9b9f			beq 	_ESTADecimalState
>9b64	db						.byte 	$DB 						; causes a break in the emulator
.9b65					_ESTALowState:
.9b65	68		pla				pla 								; get value back
.9b66	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9b68	f0 29		beq $9b93			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9b6a	29 0f		and #$0f			and 	#15 						; make digit
.9b6c	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9b6f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9b72	0a		asl a				asl 	a
.9b73	0a		asl a				asl 	a
.9b74	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b77	0a		asl a				asl 	a
.9b78	6d 86 04	adc $0486			adc 	DigitTemp
.9b7b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b7e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9b80	90 05		bcc $9b87			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9b82	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9b84	8d 85 04	sta $0485			sta 	EncodeState
.9b87					_ESTANoSwitch:
.9b87	38		sec				sec
.9b88	60		rts				rts
.9b89					_ESTAHighState:
.9b89	68		pla				pla 								; get value back
.9b8a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9b8c	f0 05		beq $9b93			beq 	_ESTASwitchFloat
.9b8e	20 f2 9b	jsr $9bf2			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9b91	38		sec				sec
.9b92	60		rts				rts
.9b93					_ESTASwitchFloat:
.9b93	9c 87 04	stz $0487			stz 	DecimalCount
.9b96	e8		inx				inx 								; zero the decimal additive.
.9b97	20 21 a1	jsr $a121			jsr 	NSMSetZero
.9b9a	ca		dex				dex
.9b9b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9b9d	80 ab		bra $9b4a			bra 	_ENExitChange
.9b9f					_ESTADecimalState:
.9b9f	68		pla				pla 								; digit.
.9ba0	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9ba2	f0 96		beq $9b3a			beq 	_ENFail
.9ba4	e8		inx				inx 								; put digit into fractional part of X+1
.9ba5	20 f2 9b	jsr $9bf2			jsr 	ESTAShiftDigitIntoMantissa
.9ba8	ca		dex				dex
.9ba9	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9bac	ad 87 04	lda $0487			lda 	DecimalCount
.9baf	c9 0b		cmp #$0b			cmp 	#11
.9bb1	f0 02		beq $9bb5			beq 	_ESTADSFail
.9bb3	38		sec				sec
.9bb4	60		rts				rts
.9bb5					_ESTADSFail:
.9bb5	4c 16 af	jmp $af16			jmp 	RangeError
.9bb8					_ENConstructFinal:
.9bb8	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9bbb	f0 33		beq $9bf0			beq 	_ENCFExit 					; no decimals
.9bbd	5a		phy				phy
.9bbe	0a		asl a				asl 	a 							; x 4 and CLC
.9bbf	0a		asl a				asl 	a
.9bc0	6d 87 04	adc $0487			adc 	DecimalCount
.9bc3	a8		tay				tay
.9bc4	b9 d5 ae	lda $aed5,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9bc7	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9bca	b9 d6 ae	lda $aed6,y			lda 	DecimalScalarTable-5+1,y
.9bcd	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9bd0	b9 d7 ae	lda $aed7,y			lda 	DecimalScalarTable-5+2,y
.9bd3	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9bd6	b9 d8 ae	lda $aed8,y			lda 	DecimalScalarTable-5+3,y
.9bd9	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9bdc	b9 d9 ae	lda $aed9,y			lda 	DecimalScalarTable-5+4,y
.9bdf	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9be2	a9 08		lda #$08			lda 	#NSTFloat
.9be4	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9be7	7a		ply				ply
.9be8	e8		inx				inx 								; multiply decimal const by decimal scalar
.9be9	20 5d ac	jsr $ac5d			jsr 	FloatMultiply
.9bec	ca		dex				dex
.9bed	20 f2 aa	jsr $aaf2			jsr 	FloatAdd 					; add to integer part.
.9bf0					_ENCFExit:
.9bf0	18		clc				clc 								; reject the digit.
.9bf1	60		rts				rts
.9bf2					ESTAShiftDigitIntoMantissa:
.9bf2	29 0f		and #$0f			and 	#15 						; save digit
.9bf4	48		pha				pha
.9bf5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9bf8	48		pha				pha
.9bf9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9bfc	48		pha				pha
.9bfd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c00	48		pha				pha
.9c01	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c04	48		pha				pha
.9c05	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; x 2
.9c08	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; x 4
.9c0b	18		clc				clc 								; pop mantissa and add
.9c0c	68		pla				pla
.9c0d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c10	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c13	68		pla				pla
.9c14	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9c17	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c1a	68		pla				pla
.9c1b	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9c1e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c21	68		pla				pla
.9c22	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9c25	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9c28	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; x 10
.9c2b	68		pla				pla 								; add digit
.9c2c	18		clc				clc
.9c2d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c30	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c33	90 0d		bcc $9c42			bcc 	_ESTASDExit
.9c35	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9c38	d0 08		bne $9c42			bne 	_ESTASDExit
.9c3a	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9c3d	d0 03		bne $9c42			bne 	_ESTASDExit
.9c3f	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9c42					_ESTASDExit:
.9c42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9c43					EvaluateTerm:
.9c43	b1 30		lda ($30),y			lda 	(codePtr),y
.9c45	30 18		bmi $9c5f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9c47	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9c49	b0 6f		bcs $9cba			bcs 	_ETVariable
.9c4b	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9c4d	90 6e		bcc $9cbd			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9c4f	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c51	b0 6a		bcs $9cbd			bcs 	_ETPuncUnary
.9c53	20 21 9b	jsr $9b21			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9c56					_ETNumber:
.9c56	c8		iny				iny 								; keep encoding until we have the numbers
.9c57	b1 30		lda ($30),y			lda 	(codePtr),y
.9c59	20 24 9b	jsr $9b24			jsr 	EncodeNumberContinue
.9c5c	b0 f8		bcs $9c56			bcs 	_ETNumber 					; go back if accepted.
.9c5e	60		rts				rts
.9c5f					_ETCheckUnary:
.9c5f	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9c61	f0 41		beq $9ca4			beq 	_ETString
.9c63	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9c65	f0 12		beq $9c79			beq 	_ETHexConstant
.9c67	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9c69	90 0b		bcc $9c76			bcc 	_ETSyntaxError
.9c6b	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9c6d	b0 07		bcs $9c76			bcs 	_ETSyntaxError
.9c6f	da		phx				phx 								; push X on the stack
.9c70	0a		asl a				asl 	a 							; put vector x 2 into X
.9c71	aa		tax				tax
.9c72	c8		iny				iny 								; consume unary function token
.9c73	7c 08 92	jmp ($9208,x)			jmp 	(VectorSet0,x) 				; and do it.
.9c76					_ETSyntaxError:
.9c76	4c 11 af	jmp $af11			jmp 	SyntaxError
.9c79					_ETHexConstant:
.9c79	c8		iny				iny 								; skip #
.9c7a	c8		iny				iny 								; skip count
.9c7b	20 21 a1	jsr $a121			jsr 	NSMSetZero 					; clear result
.9c7e					_ETHLoop:
.9c7e	b1 30		lda ($30),y			lda 	(codePtr),y
.9c80	c8		iny				iny 								; and consume
.9c81	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9c83	f0 1e		beq $9ca3			beq 	_ETHExit
.9c85	48		pha				pha 								; save on stack.
.9c86	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; x 2
.9c89	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; x 4
.9c8c	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; x 8
.9c8f	20 36 a1	jsr $a136			jsr 	NSMShiftLeft 				; x 16
.9c92	68		pla				pla 								; ASCII
.9c93	c9 41		cmp #$41			cmp 	#'A'
.9c95	90 02		bcc $9c99			bcc 	_ETHNotChar
.9c97	e9 07		sbc #$07			sbc 	#7
.9c99					_ETHNotChar:
.9c99	29 0f		and #$0f			and 	#15 						; digit now
.9c9b	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9c9e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ca1	80 db		bra $9c7e			bra 	_ETHLoop 					; go round.
.9ca3					_ETHExit:
.9ca3	60		rts				rts
.9ca4					_ETString:
.9ca4	c8		iny				iny 								; look at length
.9ca5	b1 30		lda ($30),y			lda 	(codePtr),y
.9ca7	48		pha				pha
.9ca8	c8		iny				iny 								; first character
.9ca9	20 6b a1	jsr $a16b			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9cac	68		pla				pla 								; restore count and save
.9cad	85 36		sta $36				sta 	zTemp0
.9caf	98		tya				tya 								; add length to Y to skip it.
.9cb0	18		clc				clc
.9cb1	65 36		adc $36				adc 	zTemp0
.9cb3	a8		tay				tay
.9cb4	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9cb6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cb9	60		rts				rts
.9cba					_ETVariable:
.9cba	4c 14 9d	jmp $9d14			jmp 	VariableHandler
.9cbd					_ETPuncUnary:
.9cbd	c8		iny				iny 								; consume the unary character
.9cbe	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9cc0	f0 2d		beq $9cef			beq 	_ETUnaryNegate
.9cc2	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9cc4	f0 39		beq $9cff			beq 	_ETDereference
.9cc6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9cc8	f0 43		beq $9d0d			beq 	_ETParenthesis
.9cca	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9ccc	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9cce	f0 06		beq $9cd6			beq 	_ETIndirection
.9cd0	e6 36		inc $36				inc 	zTemp0
.9cd2	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9cd4	d0 a0		bne $9c76			bne 	_ETSyntaxError
.9cd6					_ETIndirection:
.9cd6	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9cd8	1a		inc a				inc 	a
.9cd9	48		pha				pha
.9cda	20 43 9c	jsr $9c43			jsr 	EvaluateTerm				; evaluate the term
.9cdd	20 87 9a	jsr $9a87			jsr 	Dereference 				; dereference it.
.9ce0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9ce3	d0 07		bne $9cec			bne 	_ETTypeMismatch
.9ce5	68		pla				pla 								; indirection 1-2
.9ce6	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9ce8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ceb	60		rts				rts
.9cec					_ETTypeMismatch:
.9cec	4c 1b af	jmp $af1b			jmp 	TypeError
.9cef					_ETUnaryNegate:
.9cef	20 43 9c	jsr $9c43			jsr 	EvaluateTerm				; evaluate the term
.9cf2	20 87 9a	jsr $9a87			jsr 	Dereference 				; dereference it.
.9cf5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9cf8	29 10		and #$10			and 	#NSTString
.9cfa	d0 f0		bne $9cec			bne 	_ETTypeMismatch
.9cfc	4c cd a0	jmp $a0cd			jmp 	NSMNegate  					; just toggles the sign bit.
.9cff					_ETDereference:
.9cff	20 43 9c	jsr $9c43			jsr 	EvaluateTerm				; evaluate the term
.9d02	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9d05	29 20		and #$20			and 	#NSBIsReference
.9d07	f0 e3		beq $9cec			beq 	_ETTypeMismatch
.9d09	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9d0c	60		rts				rts
.9d0d					_ETParenthesis:
.9d0d	20 72 99	jsr $9972			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9d10	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 			; check for )
.9d13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9d14					VariableHandler:
.9d14	b1 30		lda ($30),y			lda 	(codePtr),y
.9d16	18		clc				clc
.9d17	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9d19	85 37		sta $37				sta 	zTemp0+1
.9d1b	c8		iny				iny
.9d1c	b1 30		lda ($30),y			lda 	(codePtr),y
.9d1e	85 36		sta $36				sta 	zTemp0
.9d20	c8		iny				iny
.9d21	18		clc				clc									; copy variable address+3 to mantissa
.9d22	69 03		adc #$03			adc 	#3
.9d24	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d27	a5 37		lda $37				lda 	zTemp0+1
.9d29	69 00		adc #$00			adc 	#0
.9d2b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d2e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9d31	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9d34	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d37	5a		phy				phy
.9d38	a0 02		ldy #$02			ldy 	#2 							; read type
.9d3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d3c	7a		ply				ply
.9d3d	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9d3f	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9d41	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d44	29 04		and #$04			and 	#NSBIsArray
.9d46	d0 01		bne $9d49			bne 	_VHArray
.9d48	60		rts				rts
.9d49					_VHArray:
.9d49	e8		inx				inx
.9d4a	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9d4d	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9d4f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d52	b1 30		lda ($30),y			lda 	(codePtr),y
.9d54	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9d56	d0 06		bne $9d5e			bne 	_VHNoSecondIndex
.9d58	c8		iny				iny 								; skip the comma
.9d59	e8		inx				inx
.9d5a	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9d5d	ca		dex				dex
.9d5e					_VHNoSecondIndex:
.9d5e	ca		dex				dex 								; set X back.
.9d5f	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 			; and check the right bracket.
.9d62	5a		phy				phy 								; save position
.9d63	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9d66	85 3e		sta $3e				sta 	zaTemp
.9d68	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d6b	85 3f		sta $3f				sta 	zaTemp+1
.9d6d	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9d6f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d71	f0 02		beq $9d75			beq 	_VHHas2Mask
.9d73	a9 ff		lda #$ff			lda 	#$FF
.9d75					_VHHas2Mask:
.9d75	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9d78	f0 54		beq $9dce			beq 	_VHBadIndex
.9d7a	0a		asl a				asl 	a 							; carry will be set if a second index
.9d7b	90 09		bcc $9d86			bcc 	_VHCheckFirstIndex
.9d7d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9d7f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d81	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9d84	90 48		bcc $9dce			bcc 	_VHBadIndex
.9d86					_VHCheckFirstIndex:
.9d86	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9d88	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9d8a	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9d8d	90 3f		bcc $9dce			bcc 	_VHBadIndex
.9d8f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9d91	64 37		stz $37				stz 	zTemp0+1
.9d93	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9d96	30 0f		bmi $9da7			bmi 	_VHNoMultiply
.9d98	da		phx				phx
.9d99	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9d9c	48		pha				pha
.9d9d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9d9f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9da1	1a		inc a				inc 	a 							; add 1 for zero base
.9da2	fa		plx				plx
.9da3	20 ad ad	jsr $adad			jsr 	Multiply8x8 				; calculate -> Z0
.9da6	fa		plx				plx
.9da7					_VHNoMultiply:
.9da7	18		clc				clc
.9da8	a5 36		lda $36				lda 	zTemp0
.9daa	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9dad	85 36		sta $36				sta 	zTemp0
.9daf	a5 37		lda $37				lda 	zTemp0+1
.9db1	69 00		adc #$00			adc 	#0
.9db3	85 37		sta $37				sta 	zTemp0+1
.9db5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9db8	20 6d 8c	jsr $8c6d			jsr 	ScaleByBaseType
.9dbb	18		clc				clc
.9dbc	b2 3e		lda ($3e)			lda 	(zaTemp)
.9dbe	65 36		adc $36				adc 	zTemp0
.9dc0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dc3	a0 01		ldy #$01			ldy 	#1
.9dc5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9dc7	65 37		adc $37				adc 	zTemp0+1
.9dc9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dcc	7a		ply				ply 								; restore position
.9dcd	60		rts				rts
.9dce					_VHBadIndex:
.9dce	a9 17		lda #$17		lda	#23
.9dd0	4c 69 95	jmp $9569		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ace3					AbsUnary:
.ace3	fa		plx				plx 								; restore stack pos
.ace4	20 75 a0	jsr $a075			jsr 	EvaluateNumber 				; get a float or int
.ace7	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.acea	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.aced	29 7f		and #$7f			and 	#$7F
.acef	9d 00 04	sta $0400,x			sta 	NSStatus,x
.acf2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9dd3					AllocUnary:
.9dd3	fa		plx				plx 								; restore stack pos
.9dd4	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger		; get bytes required.
.9dd7	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.9dda	da		phx				phx 								; save X/Y
.9ddb	5a		phy				phy
.9ddc	8a		txa				txa 								; copy X into Y
.9ddd	a8		tay				tay
.9dde	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9de1	aa		tax				tax
.9de2	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9de5	20 f2 9d	jsr $9df2			jsr 	AllocateXABytes 			; allocate memory
.9de8	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9deb	8a		txa				txa
.9dec	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9def	7a		ply				ply
.9df0	fa		plx				plx
.9df1	60		rts				rts
.9df2					AllocateXABytes:
.9df2	5a		phy				phy
.9df3	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9df6	84 36		sty $36				sty 	zTemp0
.9df8	5a		phy				phy
.9df9	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9dfc	84 37		sty $37				sty 	zTemp0+1
.9dfe	5a		phy				phy
.9dff	18		clc				clc 								; add to low memory pointer
.9e00	6d 8c 04	adc $048c			adc 	lowMemPtr
.9e03	8d 8c 04	sta $048c			sta 	lowMemPtr
.9e06	8a		txa				txa
.9e07	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9e0a	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9e0d	b0 2f		bcs $9e3e			bcs 	CISSMemory
.9e0f	20 30 9e	jsr $9e30			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9e12					_ClearMemory:
.9e12	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9e15	c5 36		cmp $36				cmp 	zTemp0
.9e17	d0 07		bne $9e20			bne 	_CMClearNext
.9e19	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9e1c	c5 37		cmp $37				cmp 	zTemp0+1
.9e1e	f0 0c		beq $9e2c			beq 	_CMExit
.9e20					_CMClearNext:
.9e20	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9e22	92 36		sta ($36)			sta 	(zTemp0)
.9e24	e6 36		inc $36				inc 	zTemp0
.9e26	d0 ea		bne $9e12			bne 	_ClearMemory
.9e28	e6 37		inc $37				inc		zTemp0+1
.9e2a	80 e6		bra $9e12			bra 	_ClearMemory
.9e2c					_CMExit:
.9e2c	fa		plx				plx
.9e2d	68		pla				pla
.9e2e	7a		ply				ply
.9e2f	60		rts				rts
.9e30					CheckIdentifierStringSpace:
.9e30	48		pha				pha
.9e31	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9e34	18		clc				clc
.9e35	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9e37	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9e3a	b0 02		bcs $9e3e			bcs 	CISSMemory
.9e3c	68		pla				pla
.9e3d	60		rts				rts
.9e3e					CISSMemory:
.9e3e	a9 06		lda #$06		lda	#6
.9e40	4c 69 95	jmp $9569		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.acf3					AscUnary:
.acf3	fa		plx				plx 								; restore stack pos
.acf4	20 80 a0	jsr $a080			jsr 	EvaluateString 				; get a string
.acf7	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.acf9	20 23 a1	jsr $a123			jsr 	NSMSetByte
.acfc	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.acff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ad00					FracUnary:
.ad00	fa		plx				plx 								; restore stack pos
.ad01	20 75 a0	jsr $a075			jsr 	EvaluateNumber 				; get a float or int
.ad04	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.ad07	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ad0a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ad0c	f0 04		beq $ad12			beq 	_IUZero
.ad0e	20 d0 ab	jsr $abd0			jsr 	FloatFractionalPart
.ad11	60		rts				rts
.ad12					_IUZero:
.ad12	20 21 a1	jsr $a121			jsr 	NSMSetZero
.ad15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ad16					IntUnary:
.ad16	fa		plx				plx 								; restore stack pos
.ad17	20 75 a0	jsr $a075			jsr 	EvaluateNumber 				; get a float or int
.ad1a	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.ad1d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ad20	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ad22	f0 03		beq $ad27			beq 	_IUExit
.ad24	20 33 ac	jsr $ac33			jsr 	FloatIntegerPart
.ad27					_IUExit:
.ad27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ad28					LenUnary:
.ad28	fa		plx				plx 								; restore stack pos
.ad29	20 80 a0	jsr $a080			jsr 	EvaluateString 				; get a string
.ad2c	5a		phy				phy
.ad2d	a0 00		ldy #$00			ldy 	#0 							; find length
.ad2f					_LenFind:
.ad2f	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad31	f0 06		beq $ad39			beq 	_LenExit
.ad33	c8		iny				iny
.ad34	d0 f9		bne $ad2f			bne 	_LenFind
.ad36	4c 16 af	jmp $af16			jmp 	RangeError 					; string > 255
.ad39					_LenExit:
.ad39	98		tya				tya
.ad3a	20 23 a1	jsr $a123			jsr 	NSMSetByte
.ad3d	7a		ply				ply
.ad3e	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.ad41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9e43					Unary_Not:
.9e43	fa		plx				plx
.9e44	20 98 a0	jsr $a098			jsr 	EvaluateInteger 			; get integer
.9e47	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.9e4a	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; zero mantissa ?
.9e4d	f0 04		beq $9e53			beq 	_NotZero
.9e4f	20 21 a1	jsr $a121			jsr 	NSMSetZero
.9e52	60		rts				rts
.9e53					_NotZero:
.9e53	4c d6 95	jmp $95d6			jmp 	ReturnTrue
.9e56					_UNBad:
.9e56	4c 20 af	jmp $af20			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9e59					Unary_Random:
.9e59	fa		plx				plx
.9e5a	20 d2 9e	jsr $9ed2			jsr 	Random32Bit 				; get a random number
.9e5d	20 b7 9e	jsr $9eb7			jsr 	URCopyToMantissa  			; put in mantissa
.9e60	e8		inx				inx
.9e61	20 ad a0	jsr $a0ad			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9e64	ca		dex				dex
.9e65	20 af a9	jsr $a9af			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9e68	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9e6b	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9e6e	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.9e71	60		rts				rts
.9e72					Unary_Rnd:
.9e72	fa		plx				plx
.9e73	20 75 a0	jsr $a075			jsr 	EvaluateNumber 				; number to use.
.9e76	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 			; closing bracket
.9e79	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9e7c	f0 2b		beq $9ea9			beq 	_URCopySeed
.9e7e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9e81	10 23		bpl $9ea6			bpl 	_URDontSeed
.9e83	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9e86	49 17		eor #$17			eor 	#$17
.9e88	8d 88 04	sta $0488			sta 	RandomSeed+0
.9e8b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e8e	49 a5		eor #$a5			eor 	#$A5
.9e90	8d 89 04	sta $0489			sta 	RandomSeed+1
.9e93	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e96	49 c2		eor #$c2			eor 	#$C2
.9e98	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9e9b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e9e	49 9d		eor #$9d			eor 	#$9D
.9ea0	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ea3	20 d2 9e	jsr $9ed2			jsr 	Random32Bit
.9ea6					_URDontSeed:
.9ea6	20 d2 9e	jsr $9ed2			jsr 	Random32Bit 				; generate a number.
.9ea9					_URCopySeed:
.9ea9	20 b7 9e	jsr $9eb7			jsr 	URCopyToMantissa 			; copy into mantissa
.9eac	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9eae	8d 28 04	sta $0428			sta 	NSExponent
.9eb1	a9 08		lda #$08			lda 	#NSTFloat
.9eb3	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9eb6	60		rts				rts
.9eb7					URCopyToMantissa:
.9eb7	ad 88 04	lda $0488			lda 	RandomSeed+0
.9eba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ebd	ad 89 04	lda $0489			lda 	RandomSeed+1
.9ec0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ec3	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9ec6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ec9	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9ecc	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9ece	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ed1	60		rts				rts
.9ed2					Random32Bit:
.9ed2	5a		phy				phy
.9ed3	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9ed5	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9ed8	d0 03		bne $9edd			bne 	_Random1
.9eda	a8		tay				tay 								; if so do it 256 times
.9edb	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9edd					_Random1:
.9edd	0a		asl a				asl 	a 							; LSFR RNG
.9ede	2e 89 04	rol $0489			rol 	RandomSeed+1
.9ee1	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9ee4	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9ee7	90 02		bcc $9eeb			bcc 	_Random2
.9ee9	49 c5		eor #$c5			eor 	#$C5
.9eeb					_Random2:
.9eeb	88		dey				dey
.9eec	d0 ef		bne $9edd			bne 	_Random1
.9eee	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ef1	7a		ply				ply
.9ef2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.ad42					SgnUnary:
.ad42	fa		plx				plx 								; restore stack pos
.ad43	20 75 a0	jsr $a075			jsr 	EvaluateNumber 				; get a float or int
.ad46	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.ad49	20 51 a1	jsr $a151			jsr 	NSMIsZero 					; if zero
.ad4c	f0 10		beq $ad5e			beq 	_SGZero  					; return Int Zero
.ad4e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.ad51	48		pha				pha
.ad52	a9 01		lda #$01			lda 	#1 							; set to 1
.ad54	20 23 a1	jsr $a123			jsr 	NSMSetByte
.ad57	68		pla				pla
.ad58	29 80		and #$80			and		#$80 						; copy the sign byte out
.ad5a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad5d	60		rts				rts
.ad5e	20 21 a1	jsr $a121	_SGZero:jsr 	NSMSetZero
.ad61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.ad62					ValUnary:
.ad62	fa		plx				plx 								; restore stack pos
.ad63	20 78 ad	jsr $ad78			jsr 	ValMainCode 				; do the main val() code
.ad66	b0 01		bcs $ad69			bcs 	_VUError 					; couldn't convert
.ad68	60		rts				rts
.ad69					_VUError:
.ad69	4c 1b af	jmp $af1b			jmp 	TypeError
.ad6c					IsValUnary:
.ad6c	fa		plx				plx 								; restore stack pos
.ad6d	20 78 ad	jsr $ad78			jsr 	ValMainCode 				; do the main val() code
.ad70	b0 03		bcs $ad75			bcs 	_VUBad
.ad72	4c d6 95	jmp $95d6			jmp 	ReturnTrue
.ad75					_VUBad:
.ad75	4c e2 95	jmp $95e2			jmp 	ReturnFalse
.ad78					ValMainCode:
.ad78	20 80 a0	jsr $a080			jsr 	EvaluateString 				; get a string
.ad7b	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 			; check right bracket present
.ad7e	5a		phy				phy
.ad7f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ad81	f0 17		beq $ad9a			beq 	_VMCFail2
.ad83	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ad85	48		pha				pha 								; save first character
.ad86	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ad88	d0 01		bne $ad8b			bne 	_VMCStart
.ad8a	c8		iny				iny 								; skip over -
.ad8b					_VMCStart:
.ad8b	38		sec				sec 								; initialise first time round.
.ad8c					_VMCNext:
.ad8c	c8		iny				iny 								; pre-increment
.ad8d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ad8f	f0 0c		beq $ad9d			beq 	_VMCSuccess 				; successful.
.ad91	20 25 9b	jsr $9b25			jsr 	EncodeNumber 				; send it to the number-builder
.ad94	90 03		bcc $ad99			bcc 	_VMCFail 					; if failed, give up.
.ad96	18		clc				clc 								; next time round, countinue
.ad97	80 f3		bra $ad8c			bra 	_VMCNext
.ad99					_VMCFail:
.ad99	68		pla				pla
.ad9a					_VMCFail2:
.ad9a	7a		ply				ply
.ad9b	38		sec				sec
.ad9c	60		rts				rts
.ad9d					_VMCSuccess:
.ad9d	a9 00		lda #$00			lda 	#0 							; construct final
.ad9f	20 25 9b	jsr $9b25			jsr 	EncodeNumber
.ada2	68		pla				pla
.ada3	c9 2d		cmp #$2d			cmp 	#"-"
.ada5	d0 03		bne $adaa			bne 	_VMCNotNegative
.ada7	20 cd a0	jsr $a0cd			jsr		NSMNegate
.adaa					_VMCNotNegative:
.adaa	7a		ply				ply
.adab	18		clc				clc
.adac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ef3					ChrUnary:
.9ef3	fa		plx				plx 								; restore stack pos
.9ef4	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger			; get value
.9ef7	48		pha				pha
.9ef8	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.9efb	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9efd	20 38 b2	jsr $b238			jsr 	StringTempAllocate
.9f00	68		pla				pla 								; write number to it
.9f01	20 76 b2	jsr $b276			jsr 	StringTempWrite
.9f04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9f05					SpcUnary:
.9f05	fa		plx				plx 								; restore stack pos
.9f06	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger			; get value
.9f09	5a		phy				phy
.9f0a	48		pha				pha 								; save count
.9f0b	20 38 b2	jsr $b238			jsr 	StringTempAllocate
.9f0e	7a		ply				ply 								; to do count in Y
.9f0f					_SpcLoop:
.9f0f	c0 00		cpy #$00			cpy 	#0
.9f11	f0 08		beq $9f1b			beq 	_SpcExit
.9f13	a9 20		lda #$20			lda 	#32
.9f15	20 76 b2	jsr $b276			jsr 	StringTempWrite
.9f18	88		dey				dey
.9f19	80 f4		bra $9f0f			bra 	_SPCLoop
.9f1b					_SpcExit:
.9f1b	7a		ply				ply
.9f1c	20 2b a9	jsr $a92b			jsr 	CheckRightBracket
.9f1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9f20					Unary_Str:
.9f20	fa		plx				plx
.9f21	20 75 a0	jsr $a075			jsr 	EvaluateNumber  			; get number
.9f24	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 			; closing bracket
.9f27	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9f29	20 42 9f	jsr $9f42			jsr 	ConvertNumberToString 		; do the conversion.
.9f2c	a9 21		lda #$21			lda		#33 						; create buffer
.9f2e	20 38 b2	jsr $b238			jsr 	StringTempAllocate 			; allocate memory
.9f31	da		phx				phx
.9f32	a2 00		ldx #$00			ldx 	#0
.9f34					_USCopy:
.9f34	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9f37	20 76 b2	jsr $b276			jsr 	StringTempWrite
.9f3a	e8		inx				inx
.9f3b	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9f3e	d0 f4		bne $9f34			bne 	_USCopy
.9f40	fa		plx				plx
.9f41	60		rts				rts
.9f42					ConvertNumberToString:
.9f42	5a		phy				phy 								; save code position
.9f43	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9f46	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9f49	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9f4c	10 0a		bpl $9f58			bpl 	_CNTSNotNegative
.9f4e	29 7f		and #$7f			and 	#$7F 						; make +ve
.9f50	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f53	a9 2d		lda #$2d			lda 	#"-"
.9f55	20 be 9f	jsr $9fbe			jsr 	WriteDecimalBuffer
.9f58					_CNTSNotNegative:
.9f58	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9f5b	f0 15		beq $9f72			beq 	_CNTSNotFloat
.9f5d	e8		inx				inx 								; round up
.9f5e	a9 01		lda #$01			lda 	#1
.9f60	20 23 a1	jsr $a123			jsr 	NSMSetByte
.9f63	ca		dex				dex
.9f64	bd 28 04	lda $0428,x			lda		NSExponent,x
.9f67	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9f6a	a9 08		lda #$08			lda 	#NSTFloat
.9f6c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9f6f	20 f2 aa	jsr $aaf2			jsr 	FloatAdd
.9f72					_CNTSNotFloat:
.9f72	20 a0 9f	jsr $9fa0			jsr 	MakePlusTwoString
.9f75	20 d0 ab	jsr $abd0			jsr 	FloatFractionalPart 		; get the fractional part
.9f78	20 94 ac	jsr $ac94			jsr 	NSNormalise					; normalise , exit if zero
.9f7b	f0 21		beq $9f9e			beq 	_CNTSExit
.9f7d	a9 2e		lda #$2e			lda 	#"."
.9f7f	20 be 9f	jsr $9fbe			jsr 	WriteDecimalBuffer 			; write decimal place
.9f82					_CNTSDecimal:
.9f82	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9f85	30 17		bmi $9f9e			bmi 	_CNTSExit
.9f87	e8		inx				inx 								; x 10.0
.9f88	a9 0a		lda #$0a			lda 	#10
.9f8a	20 23 a1	jsr $a123			jsr 	NSMSetByte
.9f8d	a9 08		lda #$08			lda 	#NSTFloat
.9f8f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f92	ca		dex				dex
.9f93	20 5d ac	jsr $ac5d			jsr 	FloatMultiply
.9f96	20 a0 9f	jsr $9fa0			jsr 	MakePlusTwoString
.9f99	20 d0 ab	jsr $abd0			jsr 	FloatFractionalPart 		; get the fractional part
.9f9c	80 e4		bra $9f82			bra 	_CNTSDecimal 				; keep going.
.9f9e					_CNTSExit:
.9f9e	7a		ply				ply
.9f9f	60		rts				rts
.9fa0					MakePlusTwoString:
.9fa0	da		phx				phx
.9fa1	20 f8 a0	jsr $a0f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9fa4	e8		inx				inx 								; access it
.9fa5	e8		inx				inx
.9fa6	20 33 ac	jsr $ac33			jsr 	FloatIntegerPart 			; make it an integer
.9fa9	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9fab	20 9c aa	jsr $aa9c			jsr 	ConvertInt32
.9fae	a2 00		ldx #$00			ldx	 	#0
.9fb0					_MPTSCopy:
.9fb0	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9fb3	20 be 9f	jsr $9fbe			jsr 	WriteDecimalBuffer
.9fb6	e8		inx				inx
.9fb7	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9fba	d0 f4		bne $9fb0			bne 	_MPTSCopy
.9fbc	fa		plx				plx
.9fbd	60		rts				rts
.9fbe					WriteDecimalBuffer:
.9fbe	da		phx				phx
.9fbf	ae 95 04	ldx $0495			ldx 	dbOffset
.9fc2	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9fc5	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9fc8	ee 95 04	inc $0495			inc 	dbOffset
.9fcb	fa		plx				plx
.9fcc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9fcd					Unary_Left:
.9fcd	fa		plx				plx
.9fce	18		clc				clc 								; only one parameter
.9fcf	20 44 a0	jsr $a044			jsr 	SubstringInitial 			; set up.
.9fd2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9fd5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fd8	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9fdb	80 2c		bra $a009			bra 	SubstringMain
.9fdd					Unary_Right:
.9fdd	fa		plx				plx
.9fde	18		clc				clc 								; only one parameter
.9fdf	20 44 a0	jsr $a044			jsr 	SubstringInitial 			; set up.
.9fe2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9fe5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fe8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9feb	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9fee	b0 02		bcs $9ff2			bcs 	_URNotUnderflow
.9ff0	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ff2					_URNotUnderFlow:
.9ff2	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ff5	80 12		bra $a009			bra 	SubStringMain
.9ff7					Unary_Mid:
.9ff7	fa		plx				plx
.9ff8	38		sec				sec 								; two parameters
.9ff9	20 44 a0	jsr $a044			jsr 	SubstringInitial 			; set up.
.9ffc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9fff	f0 05		beq $a006			beq 	_UMError
.a001	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a004	80 03		bra $a009			bra 	SubStringMain
.a006					_UMError:
.a006	4c 20 af	jmp $af20			jmp 	ArgumentError
.a009					SubStringMain:
.a009	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a00c	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a00f	b0 2d		bcs $a03e			bcs 	_SSMNull 					; if so, return an empty string.
.a011	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a014	f0 28		beq $a03e			beq 	_SSMNull 					; return empty string.
.a016	18		clc				clc 								; add the offset +1 to the address and
.a017	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a01a	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a01d	85 36		sta $36				sta 	zTemp0
.a01f	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a022	69 00		adc #$00			adc 	#0
.a024	85 37		sta $37				sta 	zTemp0+1
.a026					_SSMNoCarry:
.a026	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a029	20 38 b2	jsr $b238			jsr 	StringTempAllocate 			; allocate that many characters
.a02c	5a		phy				phy 								; save Y
.a02d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a02f					_SSMCopy:
.a02f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a031	f0 09		beq $a03c			beq 	_SSMEString 				; no more to copy
.a033	20 76 b2	jsr $b276			jsr 	StringTempWrite 			; and write it out.
.a036	c8		iny				iny
.a037	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a03a	d0 f3		bne $a02f			bne 	_SSMCopy
.a03c					_SSMEString:
.a03c	7a		ply				ply
.a03d					_SSMExit:
.a03d	60		rts				rts
.a03e					_SSMNull:
.a03e	a9 00		lda #$00			lda 	#0
.a040	20 38 b2	jsr $b238			jsr 	StringTempAllocate
.a043	60		rts				rts
.a044					SubstringInitial:
.a044	da		phx				phx 								; save initial stack position
.a045	08		php				php 								; save carry on stack indicating 2 parameters
.a046	20 80 a0	jsr $a080			jsr 	EvaluateString 				; get a string
.a049	5a		phy				phy 								; calculate length to exponent.
.a04a	a0 ff		ldy #$ff			ldy 	#$FF
.a04c					_SIFindLength:
.a04c	c8		iny				iny
.a04d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a04f	d0 fb		bne $a04c			bne 	_SIFindLength
.a051	98		tya				tya
.a052	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a055	7a		ply				ply
.a056	e8		inx				inx
.a057	20 33 a9	jsr $a933			jsr 	CheckComma 					; comma next
.a05a	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger 		; get next parameter
.a05d	28		plp				plp 								; is it the last parameter ?
.a05e	90 07		bcc $a067			bcc 	_SSIExit 					; if so, exit.
.a060	e8		inx				inx
.a061	20 33 a9	jsr $a933			jsr 	CheckComma 					; comma next
.a064	20 b9 a0	jsr $a0b9			jsr 	Evaluate8BitInteger 		; get last parameter
.a067					_SSIExit:
.a067	fa		plx				plx
.a068	20 2b a9	jsr $a92b			jsr 	CheckRightBracket 			; check closing bracket
.a06b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a06c					EvaluateValue:
.a06c	48		pha				pha
.a06d	20 72 99	jsr $9972			jsr		EvaluateExpression 			; expression
.a070	20 87 9a	jsr $9a87			jsr 	Dereference					; derefernce it
.a073	68		pla				pla
.a074	60		rts				rts
.a075					EvaluateNumber:
.a075	20 6c a0	jsr $a06c			jsr 	EvaluateValue 				; get a value
.a078	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a07b	29 10		and #$10			and 	#NSBIsString
.a07d	d0 16		bne $a095			bne 	HelperTypeError
.a07f	60		rts				rts
.a080					EvaluateString:
.a080	20 6c a0	jsr $a06c			jsr 	EvaluateValue 				; get a value
.a083	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a086	29 10		and #$10			and 	#NSBIsString
.a088	f0 0b		beq $a095			beq 	HelperTypeError
.a08a					CopyAddressToTemp0:
.a08a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a08d	85 36		sta $36				sta 	zTemp0
.a08f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a092	85 37		sta $37				sta 	zTemp0+1
.a094	60		rts				rts
.a095					HelperTypeError:
.a095	4c 1b af	jmp $af1b			jmp 	TypeError
.a098					EvaluateInteger:
.a098	20 75 a0	jsr $a075			jsr 	EvaluateNumber
.a09b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a09e	d0 0a		bne $a0aa			bne 	HelperValueError 			; if not, it's a float.
.a0a0	60		rts				rts
.a0a1					EvaluateUnsignedInteger:
.a0a1	20 98 a0	jsr $a098			jsr 	EvaluateInteger 			; check integer is +ve
.a0a4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a0a7	30 01		bmi $a0aa			bmi 	HelperValueError
.a0a9	60		rts				rts
.a0aa					HelperValueError:
.a0aa	4c 20 af	jmp $af20			jmp 	ArgumentError
.a0ad					Evaluate16BitInteger:
.a0ad	20 a1 a0	jsr $a0a1			jsr	 	EvaluateUnsignedInteger		; get integer
.a0b0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a0b3	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a0b6	d0 f2		bne $a0aa			bne 	HelperValueError
.a0b8	60		rts				rts
.a0b9					Evaluate8BitInteger:
.a0b9	20 a1 a0	jsr $a0a1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a0bc	d0 ec		bne $a0aa			bne 	HelperValueError
.a0be	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a0c1	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a0c4	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a0c7	d0 e1		bne $a0aa			bne 	HelperValueError
.a0c9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a0cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.adad					Multiply8x8:
.adad	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.adae	85 36		sta $36			  	sta 	zTemp0
.adb0	86 37		stx $37				stx 	zTemp0+1
.adb2	a9 00		lda #$00			lda 	#0
.adb4	a2 08		ldx #$08			ldx 	#8
.adb6					_M88Loop:
.adb6	90 03		bcc $adbb			bcc 	_M88NoAdd
.adb8	18		clc				clc
.adb9	65 37		adc $37				adc 	zTemp0+1
.adbb					_M88NoAdd:
.adbb	6a		ror a				ror 	a
.adbc	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.adbe	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.adbf	d0 f5		bne $adb6			bne 	_M88Loop
.adc1	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.adc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a0cd					NSMNegate:
.a0cd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a0d0	49 80		eor #$80			eor 	#NSBIsNegative
.a0d2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0d5	60		rts				rts
.a0d6					NSMNegateMantissa:
.a0d6	38		sec				sec
.a0d7	a9 00		lda #$00			lda 	#0
.a0d9	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a0dc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0df	a9 00		lda #$00			lda 	#0
.a0e1	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a0e4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0e7	a9 00		lda #$00			lda 	#0
.a0e9	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a0ec	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a0ef	a9 00		lda #$00			lda 	#0
.a0f1	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a0f4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a0f7	60		rts				rts
.a0f8					NSMShiftUpTwo:
.a0f8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a0fb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a0fe	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a101	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a104	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a107	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a10a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a10d	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a110	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a113	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a116	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a119	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a11c	60		rts				rts
.a11d					NSMSetZeroMantissaOnly:
.a11d	a9 00		lda #$00			lda 	#0
.a11f	80 08		bra $a129			bra 	NSMSetMantissa
.a121					NSMSetZero:
.a121	a9 00		lda #$00			lda 	#0
.a123					NSMSetByte:
.a123	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a126	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a129					NSMSetMantissa:
.a129	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a12c	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a12f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a132	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a135	60		rts				rts
.a136					NSMShiftLeft:
.a136	18		clc				clc
.a137					NSMRotateLeft:
.a137	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a13a	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a13d	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a140	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a143	60		rts				rts
.a144					NSMShiftRight:
.a144	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a147	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a14a	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a14d	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a150	60		rts				rts
.a151					NSMIsZero:
.a151	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a154	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a157	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a15a	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a15d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.adc4					Assemble_ora:
.adc4	20 6c 88	jsr $886c		jsr	AssembleGroup1
>adc7	01					.byte $01
.adc8					Assemble_and:
.adc8	20 6c 88	jsr $886c		jsr	AssembleGroup1
>adcb	21					.byte $21
.adcc					Assemble_eor:
.adcc	20 6c 88	jsr $886c		jsr	AssembleGroup1
>adcf	41					.byte $41
.add0					Assemble_adc:
.add0	20 6c 88	jsr $886c		jsr	AssembleGroup1
>add3	61					.byte $61
.add4					Assemble_sta:
.add4	20 6c 88	jsr $886c		jsr	AssembleGroup1
>add7	81					.byte $81
.add8					Assemble_lda:
.add8	20 6c 88	jsr $886c		jsr	AssembleGroup1
>addb	a1					.byte $a1
.addc					Assemble_cmp:
.addc	20 6c 88	jsr $886c		jsr	AssembleGroup1
>addf	c1					.byte $c1
.ade0					Assemble_sbc:
.ade0	20 6c 88	jsr $886c		jsr	AssembleGroup1
>ade3	e1					.byte $e1
.ade4					Assemble_asl:
.ade4	20 73 88	jsr $8873		jsr	AssembleGroup2
>ade7	02					.byte $02
>ade8	75					.byte $75
.ade9					Assemble_rol:
.ade9	20 73 88	jsr $8873		jsr	AssembleGroup2
>adec	22					.byte $22
>aded	75					.byte $75
.adee					Assemble_lsr:
.adee	20 73 88	jsr $8873		jsr	AssembleGroup2
>adf1	42					.byte $42
>adf2	75					.byte $75
.adf3					Assemble_ror:
.adf3	20 73 88	jsr $8873		jsr	AssembleGroup2
>adf6	62					.byte $62
>adf7	75					.byte $75
.adf8					Assemble_stx:
.adf8	20 73 88	jsr $8873		jsr	AssembleGroup2
>adfb	82					.byte $82
>adfc	50					.byte $50
.adfd					Assemble_ldx:
.adfd	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae00	a2					.byte $a2
>ae01	d0					.byte $d0
.ae02					Assemble_dec:
.ae02	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae05	c2					.byte $c2
>ae06	55					.byte $55
.ae07					Assemble_inc:
.ae07	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae0a	e2					.byte $e2
>ae0b	55					.byte $55
.ae0c					Assemble_stz:
.ae0c	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae0f	60					.byte $60
>ae10	44					.byte $44
.ae11					Assemble_bit:
.ae11	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae14	20					.byte $20
>ae15	55					.byte $55
.ae16					Assemble_sty:
.ae16	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae19	80					.byte $80
>ae1a	54					.byte $54
.ae1b					Assemble_ldy:
.ae1b	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae1e	a0					.byte $a0
>ae1f	d5					.byte $d5
.ae20					Assemble_cpy:
.ae20	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae23	c0					.byte $c0
>ae24	d4					.byte $d4
.ae25					Assemble_cpx:
.ae25	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae28	e0					.byte $e0
>ae29	d0					.byte $d0
.ae2a					Assemble_tsb:
.ae2a	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae2d	00					.byte $00
>ae2e	50					.byte $50
.ae2f					Assemble_trb:
.ae2f	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae32	10					.byte $10
>ae33	50					.byte $50
.ae34					Assemble_jsr:
.ae34	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae37	14					.byte $14
>ae38	10					.byte $10
.ae39					Assemble_jmp:
.ae39	20 73 88	jsr $8873		jsr	AssembleGroup2
>ae3c	40					.byte $40
>ae3d	10					.byte $10
.ae3e					Assemble_bpl:
.ae3e	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae41	10					.byte $10
.ae42					Assemble_bmi:
.ae42	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae45	30					.byte $30
.ae46					Assemble_bvc:
.ae46	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae49	50					.byte $50
.ae4a					Assemble_bvs:
.ae4a	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae4d	70					.byte $70
.ae4e					Assemble_bcc:
.ae4e	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae51	90					.byte $90
.ae52					Assemble_bcs:
.ae52	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae55	b0					.byte $b0
.ae56					Assemble_bne:
.ae56	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae59	d0					.byte $d0
.ae5a					Assemble_beq:
.ae5a	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae5d	f0					.byte $f0
.ae5e					Assemble_bra:
.ae5e	20 c4 88	jsr $88c4		jsr	AssembleGroup3
>ae61	80					.byte $80
.ae62					Assemble_brk:
.ae62	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae65	00					.byte $00
.ae66					Assemble_php:
.ae66	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae69	08					.byte $08
.ae6a					Assemble_clc:
.ae6a	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae6d	18					.byte $18
.ae6e					Assemble_plp:
.ae6e	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae71	28					.byte $28
.ae72					Assemble_sec:
.ae72	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae75	38					.byte $38
.ae76					Assemble_rti:
.ae76	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae79	40					.byte $40
.ae7a					Assemble_pha:
.ae7a	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae7d	48					.byte $48
.ae7e					Assemble_cli:
.ae7e	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae81	58					.byte $58
.ae82					Assemble_phy:
.ae82	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae85	5a					.byte $5a
.ae86					Assemble_rts:
.ae86	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae89	60					.byte $60
.ae8a					Assemble_pla:
.ae8a	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae8d	68					.byte $68
.ae8e					Assemble_sei:
.ae8e	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae91	78					.byte $78
.ae92					Assemble_ply:
.ae92	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae95	7a					.byte $7a
.ae96					Assemble_dey:
.ae96	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae99	88					.byte $88
.ae9a					Assemble_txa:
.ae9a	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>ae9d	8a					.byte $8a
.ae9e					Assemble_tya:
.ae9e	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aea1	98					.byte $98
.aea2					Assemble_txs:
.aea2	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aea5	9a					.byte $9a
.aea6					Assemble_tay:
.aea6	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aea9	a8					.byte $a8
.aeaa					Assemble_tax:
.aeaa	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aead	aa					.byte $aa
.aeae					Assemble_clv:
.aeae	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aeb1	b8					.byte $b8
.aeb2					Assemble_tsx:
.aeb2	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aeb5	ba					.byte $ba
.aeb6					Assemble_iny:
.aeb6	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aeb9	c8					.byte $c8
.aeba					Assemble_dex:
.aeba	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aebd	ca					.byte $ca
.aebe					Assemble_cld:
.aebe	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aec1	d8					.byte $d8
.aec2					Assemble_phx:
.aec2	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aec5	da					.byte $da
.aec6					Assemble_stp:
.aec6	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aec9	db					.byte $db
.aeca					Assemble_inx:
.aeca	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aecd	e8					.byte $e8
.aece					Assemble_nop:
.aece	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aed1	ea					.byte $ea
.aed2					Assemble_sed:
.aed2	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aed5	f8					.byte $f8
.aed6					Assemble_plx:
.aed6	20 fa 88	jsr $88fa		jsr	AssembleGroup4
>aed9	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.aeda					DecimalScalarTable:
>aeda	66 66 66 66				.dword $66666666 ; 0.1
>aede	de					.byte $de
>aedf	1f 85 eb 51				.dword $51eb851f ; 0.01
>aee3	db					.byte $db
>aee4	4c 37 89 41				.dword $4189374c ; 0.001
>aee8	d8					.byte $d8
>aee9	ac 8b db 68				.dword $68db8bac ; 0.0001
>aeed	d4					.byte $d4
>aeee	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>aef2	d1					.byte $d1
>aef3	83 de 1b 43				.dword $431bde83 ; 1e-06
>aef7	ce					.byte $ce
>aef8	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aefc	ca					.byte $ca
>aefd	89 3b e6 55				.dword $55e63b89 ; 1e-08
>af01	c7					.byte $c7
>af02	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>af06	c4					.byte $c4
>af07	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>af0b	c0					.byte $c0
>af0c	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>af10	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.af11					SyntaxError:
.af11	a9 02		lda #$02		lda	#2
.af13	4c 69 95	jmp $9569		jmp	ErrorHandler
.af16					RangeError:
.af16	a9 04		lda #$04		lda	#4
.af18	4c 69 95	jmp $9569		jmp	ErrorHandler
.af1b					TypeError:
.af1b	a9 05		lda #$05		lda	#5
.af1d	4c 69 95	jmp $9569		jmp	ErrorHandler
.af20					ArgumentError:
.af20	a9 07		lda #$07		lda	#7
.af22	4c 69 95	jmp $9569		jmp	ErrorHandler
.af25					NotDoneError:
.af25	a9 0c		lda #$0c		lda	#12
.af27	4c 69 95	jmp $9569		jmp	ErrorHandler
.af2a					ErrorText:
>af2a	42 72 65 61 6b 00			.text	"Break",0
>af30	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>af38	72 72 6f 72 00
>af3d	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>af45	20 62 79 20 7a 65 72 6f 00
>af4e	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>af56	61 6e 67 65 00
>af5b	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>af63	6d 61 74 63 68 00
>af69	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>af71	65 6d 6f 72 79 00
>af77	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>af7f	61 72 67 75 6d 65 6e 74 00
>af88	53 74 6f 70 00				.text	"Stop",0
>af8d	53 74 72 69 6e 67 20 74			.text	"String too long",0
>af95	6f 6f 20 6c 6f 6e 67 00
>af9d	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>afa5	6e 20 66 61 69 6c 65 64 00
>afae	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>afb6	61 74 61 00
>afba	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>afc2	65 6e 74 65 64 00
>afc8	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>afd0	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>afdc	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>afe4	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>aff1	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aff9	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b006	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b00e	68 6f 75 74 20 57 68 69 6c 65 00
>b019	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b021	68 6f 75 74 20 46 6f 72 00
>b02a	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b032	61 63 6b 20 66 75 6c 6c 00
>b03b	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b043	75 63 74 75 72 65 00
>b04a	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b052	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b05f	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b067	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b075	41 72 72 61 79 20 73 69			.text	"Array size",0
>b07d	7a 65 00
>b080	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b088	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b090	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1381."
>b098	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>b0a8	32 2e 20 42 75 69 6c 64 20 31 33 38 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b0b6					EXTPrintCharacter:
.b0b6	48		pha				pha
.b0b7	da		phx				phx
.b0b8	5a		phy				phy
.b0b9	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b0bc	7a		ply				ply
.b0bd	fa		plx				plx
.b0be	68		pla				pla
.b0bf	60		rts				rts
.b0c0					EXTInputSingleCharacter:
.b0c0	da		phx				phx
.b0c1	5a		phy				phy
.b0c2					_EISCWait:
.b0c2	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b0c5	c9 00		cmp #$00			cmp 	#0
.b0c7	f0 f9		beq $b0c2			beq 	_EISCWait
.b0c9	7a		ply				ply
.b0ca	fa		plx				plx
.b0cb	60		rts				rts
.b0cc					EXTInputLine:
.b0cc	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b0ce					_ILLoop:
.b0ce	da		phx				phx 								; read character in
.b0cf	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b0d2	fa		plx				plx
.b0d3	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b0d5	f0 12		beq $b0e9			beq 	_ILBackspace
.b0d7	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b0d9	f0 15		beq $b0f0			beq 	_ILExit
.b0db	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b0dd	90 ef		bcc $b0ce			bcc 	_ILLoop
.b0df	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b0e1	f0 eb		beq $b0ce			beq 	_ILLoop
.b0e3	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b0e6	e8		inx				inx
.b0e7	80 e5		bra $b0ce			bra 	_ILLoop
.b0e9					_ILBackspace:
.b0e9	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b0eb	f0 e1		beq $b0ce			beq 	_ILLoop
.b0ed	ca		dex				dex 								; back one.
.b0ee	80 de		bra $b0ce			bra 	_ILLoop
.b0f0					_ILExit:
.b0f0	20 b6 b0	jsr $b0b6			jsr 	EXTPrintCharacter
.b0f3	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b0f6	60		rts				rts
.b0f7					EXTBreakCheck:
.b0f7	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b0fa					MemoryDeleteLine:
.b0fa	20 19 b1	jsr $b119			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b0fd	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b0ff	a8		tay				tay
.b100					_MDDLLoop:
.b100	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b102	92 30		sta ($30)			sta 	(codePtr)
.b104	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b106	c5 3a		cmp $3a				cmp 	zTemp2
.b108	d0 07		bne $b111			bne 	_MDLDLNext
.b10a	a5 31		lda $31				lda 	codePtr+1
.b10c	c5 3b		cmp $3b				cmp 	zTemp2+1
.b10e	d0 01		bne $b111			bne 	_MDLDLNext
.b110					_MDDLExit:
.b110	60		rts				rts
.b111					_MDLDLNext:
.b111	e6 30		inc $30				inc 	codePtr						; next byte
.b113	d0 eb		bne $b100			bne 	_MDDLLoop
.b115	e6 31		inc $31				inc 	codePtr+1
.b117	80 e7		bra $b100			bra 	_MDDLLoop
.b119					IMemoryFindEnd:
.b119	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b11b	85 3a		sta $3a				sta 	0+zTemp2
.b11d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b11f	85 3b		sta $3b				sta 	1+zTemp2
.b121					_MDLFELoop:
.b121	b2 3a		lda ($3a)			lda 	(zTemp2)
.b123	f0 0b		beq $b130			beq 	_MDLFEExit
.b125	18		clc				clc
.b126	65 3a		adc $3a				adc 	zTemp2
.b128	85 3a		sta $3a				sta 	zTemp2
.b12a	90 f5		bcc $b121			bcc 	_MDLFELoop
.b12c	e6 3b		inc $3b				inc 	zTemp2+1
.b12e	80 f1		bra $b121			bra 	_MDLFELoop
.b130					_MDLFEExit:
.b130	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b131					MemoryInsertLine:
.b131	08		php				php
.b132	20 19 b1	jsr $b119			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b135	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b137	1a		inc a				inc 	a
.b138	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b13a	b0 36		bcs $b172			bcs 	_MDLIError
.b13c	28		plp				plp
.b13d	90 08		bcc $b147			bcc 	_MDLIFound
.b13f	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b141	85 30		sta $30				sta 	codePtr
.b143	a5 3b		lda $3b				lda 	zTemp2+1
.b145	85 31		sta $31				sta 	codePtr+1
.b147					_MDLIFound:
.b147	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b14a	a8		tay				tay
.b14b					_MDLIInsert:
.b14b	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b14d	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b14f	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b151	c5 3a		cmp $3a				cmp 	zTemp2
.b153	d0 06		bne $b15b			bne 	_MDLINext
.b155	a5 31		lda $31				lda 	codePtr+1
.b157	c5 3b		cmp $3b				cmp 	zTemp2+1
.b159	f0 0a		beq $b165			beq 	_MDLIHaveSpace
.b15b					_MDLINext:
.b15b	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b15d	d0 02		bne $b161			bne 	_MDLINoBorrow
.b15f	c6 3b		dec $3b				dec 	zTemp2+1
.b161					_MDLINoBorrow:
.b161	c6 3a		dec $3a				dec 	zTemp2
.b163	80 e6		bra $b14b			bra 	_MDLIInsert
.b165					_MDLIHaveSpace:
.b165	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b168	88		dey				dey 								; from offset-1 to 0
.b169					_MDLICopy:
.b169	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b16c	91 30		sta ($30),y			sta 	(codePtr),y
.b16e	88		dey				dey
.b16f	10 f8		bpl $b169			bpl 	_MDLICopy
.b171	60		rts				rts
.b172					_MDLIError:
.b172	a9 06		lda #$06		lda	#6
.b174	4c 69 95	jmp $9569		jmp	ErrorHandler
.b177					MDLAppendLine:
.b177	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b179	85 36		sta $36				sta 	zTemp0
.b17b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b17d	85 38		sta $38				sta 	0+zTemp1
.b17f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b181	85 39		sta $39				sta 	1+zTemp1
.b183	b2 38		lda ($38)			lda 	(zTemp1)
.b185	d0 0a		bne $b191			bne 	_MDLANoInitialise
.b187	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b189	8d 5d 06	sta $065d			sta 	0+AppendPointer
.b18c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b18e	8d 5e 06	sta $065e			sta 	1+AppendPointer
.b191					_MDLANoInitialise:
.b191	18		clc				clc
.b192	ad 5d 06	lda $065d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b195	85 38		sta $38				sta 	zTemp1
.b197	72 36		adc ($36)			adc 	(zTemp0)
.b199	8d 5d 06	sta $065d			sta 	AppendPointer
.b19c	ad 5e 06	lda $065e			lda 	AppendPointer+1
.b19f	85 39		sta $39				sta 	zTemp1+1
.b1a1	69 00		adc #$00			adc 	#0
.b1a3	8d 5e 06	sta $065e			sta 	AppendPointer+1
.b1a6	a0 00		ldy #$00			ldy 	#0
.b1a8					_MDLACopy:
.b1a8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b1aa	91 38		sta ($38),y			sta 	(zTemp1),y
.b1ac	c8		iny				iny
.b1ad	98		tya				tya
.b1ae	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b1b0	d0 f6		bne $b1a8			bne 	_MDLACopy
.b1b2	a9 00		lda #$00			lda 	#0 							; end of program.
.b1b4	91 38		sta ($38),y			sta 	(zTemp1),y
.b1b6	60		rts				rts
.065d					AppendPointer:
>065d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a15e					MemoryNew:
.a15e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a160	85 30		sta $30				sta 	codePtr
.a162	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a164	85 31		sta $31				sta 	codePtr+1
.a166	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a168	92 30		sta ($30)			sta 	(codePtr)
.a16a	60		rts				rts
.a16b					MemoryInline:
.a16b	98		tya				tya 								; put address into stack,x
.a16c	18		clc				clc
.a16d	65 30		adc $30				adc 	codePtr
.a16f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a172	a5 31		lda $31				lda 	codePtr+1
.a174	69 00		adc #$00			adc 	#0
.a176	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a179	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a17c	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a17f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a180					MemorySearch:
.a180	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a182	86 37		stx $37				stx 	zTemp0+1
.a184	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a186	85 30		sta $30				sta 	codePtr
.a188	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a18a	85 31		sta $31				sta 	codePtr+1
.a18c					_MTAXLoop:
.a18c	b2 30		lda ($30)			lda 	(codePtr)
.a18e	18		clc				clc
.a18f	f0 21		beq $a1b2			beq 	_MTAXExit 					; reached end, exit with CC.
.a191	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a193	b1 30		lda ($30),y			lda 	(codePtr),y
.a195	38		sec				sec
.a196	e5 36		sbc $36				sbc 	zTemp0
.a198	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a19a	c8		iny				iny 								; do the MSB
.a19b	b1 30		lda ($30),y			lda 	(codePtr),y
.a19d	e5 37		sbc $37				sbc 	zTemp0+1
.a19f	05 38		ora $38				ora 	zTemp1
.a1a1	f0 0f		beq $a1b2			beq 	_MTAXExit	 				; found
.a1a3	b0 0d		bcs $a1b2			bcs 	_MTAXExit 					; current < required exit
.a1a5	18		clc				clc
.a1a6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a1a8	65 30		adc $30				adc 	codePtr
.a1aa	85 30		sta $30				sta 	codePtr
.a1ac	90 02		bcc $a1b0			bcc 	_CREExit
.a1ae	e6 31		inc $31				inc 	codePtr+1
.a1b0					_CREExit:
.a1b0	80 da		bra $a18c			bra 	_MTAXLoop
.a1b2					_MTAXExit:
.a1b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a1b3					StackPushByte:
.a1b3	48		pha				pha 								; save byte
.a1b4	a5 34		lda $34				lda 	BasicStack
.a1b6	d0 09		bne $a1c1			bne 	_SPBNoBorrow
.a1b8	c6 35		dec $35				dec 	BasicStack+1
.a1ba	48		pha				pha
.a1bb	a5 35		lda $35				lda 	BasicStack+1
.a1bd	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a1bf	90 06		bcc $a1c7			bcc 	_SPBMemory
.a1c1					_SPBNoBorrow:
.a1c1	c6 34		dec $34				dec 	BasicStack
.a1c3	68		pla				pla 								; get back and write
.a1c4	92 34		sta ($34)			sta 	(BasicStack)
.a1c6	60		rts				rts
.a1c7					_SPBMemory:
.a1c7	a9 12		lda #$12		lda	#18
.a1c9	4c 69 95	jmp $9569		jmp	ErrorHandler
.a1cc					StackPopByte:
.a1cc	b2 34		lda ($34)			lda 	(BasicStack)
.a1ce	e6 34		inc $34				inc 	BasicStack
.a1d0	d0 02		bne $a1d4			bne 	_SPBNoCarry
.a1d2	e6 35		inc $35				inc 	BasicStack+1
.a1d4					_SPBNoCarry:
.a1d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a1d5					StackOpen:
.a1d5	48		pha				pha 								; save frame byte
.a1d6	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a1d8	0a		asl a				asl 	a 							; claim twice this for storage
.a1d9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a1db	38		sec				sec 								; so basically subtracting from
.a1dc	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a1de	85 34		sta $34				sta 	basicStack
.a1e0	b0 08		bcs $a1ea			bcs 	_SONoBorrow
.a1e2	c6 35		dec $35				dec 	basicStack+1
.a1e4	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a1e6	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a1e8	90 04		bcc $a1ee			bcc 	_SOMemory
.a1ea					_SONoBorrow:
.a1ea	68		pla				pla 								; get marker back and write at TOS
.a1eb	92 34		sta ($34)			sta 	(basicStack)
.a1ed	60		rts				rts
.a1ee					_SOMemory:
.a1ee	a9 12		lda #$12		lda	#18
.a1f0	4c 69 95	jmp $9569		jmp	ErrorHandler
.a1f3					StackClose:
.a1f3	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a1f5	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a1f7	0a		asl a				asl 	a 							; claim twice this.
.a1f8	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a1fa	85 34		sta $34				sta 	basicStack
.a1fc	90 02		bcc $a200			bcc 	_SCExit
.a1fe	e6 35		inc $35				inc 	basicStack+1
.a200					_SCExit:
.a200	60		rts				rts
.a201					StackCheckFrame:
.a201	48		pha				pha
.a202					_StackRemoveLocals:
.a202	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a204	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a206	b0 05		bcs $a20d			bcs 	_SCNoLocal
.a208	20 d2 a8	jsr $a8d2			jsr 	LocalPopValue
.a20b	80 f5		bra $a202			bra 	_StackRemoveLocals
.a20d					_SCNoLocal:
.a20d	68		pla				pla
.a20e	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a210	29 f0		and #$f0			and 	#$F0 						; check type bits
.a212	d0 01		bne $a215			bne 	_SCFError 					; different, we have structures mixed up
.a214	60		rts				rts
.a215					_SCFError:
.a215	8a		txa				txa 								; report error X
.a216	4c 69 95	jmp $9569			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a219					STKSaveCodePosition:
.a219	5a		phy				phy
.a21a	98		tya				tya 								; save Y
.a21b	a0 05		ldy #$05			ldy 	#5
.a21d	91 34		sta ($34),y			sta 	(basicStack),y
.a21f	88		dey				dey 								; save Code Pointer
.a220					_STKSaveLoop:
.a220	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a223	91 34		sta ($34),y			sta 	(basicStack),y
.a225	88		dey				dey
.a226	d0 f8		bne $a220			bne 	_STKSaveLoop
.a228	7a		ply				ply
.a229	60		rts				rts
.a22a					STKLoadCodePosition:
.a22a	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a22c					_STKLoadLoop:
.a22c	b1 34		lda ($34),y			lda 	(basicStack),y
.a22e	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a231	c8		iny				iny
.a232	c0 05		cpy #$05			cpy 	#5
.a234	d0 f6		bne $a22c			bne 	_STKLoadLoop
.a236	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a238	a8		tay				tay
.a239	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a23a					StackReset:
.a23a	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a23c	85 34		sta $34				sta 	0+basicStack
.a23e	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a240	85 35		sta $35				sta 	1+basicStack
.a242	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a244	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a246	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b1b7					StringConcrete:
.b1b7	5a		phy				phy 								; save position on stack
.b1b8	20 30 9e	jsr $9e30			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1bb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b1be	85 38		sta $38				sta 	zTemp1
.b1c0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b1c3	85 39		sta $39				sta 	zTemp1+1
.b1c5	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b1c7					_SALength:
.b1c7	c8		iny				iny
.b1c8	b1 38		lda ($38),y			lda 	(zTemp1),y
.b1ca	d0 fb		bne $b1c7			bne 	_SALength
.b1cc	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b1ce	b0 3f		bcs $b20f			bcs 	_SALengthError
.b1d0	98		tya				tya 				 				; length of the new string
.b1d1	18		clc				clc
.b1d2	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b1d4	90 02		bcc $b1d8			bcc 	_SAHaveLength
.b1d6	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b1d8					_SAHaveLength:
.b1d8	48		pha				pha 								; save length.
.b1d9	38		sec				sec
.b1da	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b1dc	6d 8e 04	adc $048e			adc 	StringMemory
.b1df	8d 8e 04	sta $048e			sta 	StringMemory
.b1e2	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b1e4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b1e7	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b1e9	6d 8f 04	adc $048f			adc 	StringMemory+1
.b1ec	8d 8f 04	sta $048f			sta 	StringMemory+1
.b1ef	85 3b		sta $3b				sta 	zTemp2+1
.b1f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b1f4	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b1f5	38		sec				sec
.b1f6	e9 03		sbc #$03			sbc 	#3
.b1f8	92 3a		sta ($3a)			sta 	(zTemp2)
.b1fa	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b1fc	a0 01		ldy #$01			ldy 	#1
.b1fe	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b200					_SACopyNewString:
.b200	a0 00		ldy #$00			ldy 	#0
.b202					_SACopyNSLoop:
.b202	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b204	c8		iny				iny 								; write two on in string storage
.b205	c8		iny				iny
.b206	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b208	88		dey				dey 								; this makes it one one.
.b209	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b20b	d0 f5		bne $b202			bne 	_SACopyNSLoop
.b20d	7a		ply				ply
.b20e	60		rts				rts
.b20f					_SALengthError:
.b20f	a9 09		lda #$09		lda	#9
.b211	4c 69 95	jmp $9569		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b214					StringSystemInitialise:
.b214	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b216	8d 8e 04	sta $048e			sta 	0+StringMemory
.b219	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b21b	8d 8f 04	sta $048f			sta 	1+StringMemory
.b21e	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b221	60		rts				rts
.b222					StringSpaceInitialise:
.b222	20 30 9e	jsr $9e30			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b225	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b227	8d 90 04	sta $0490			sta 	StringInitialised
.b22a	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b22d	8d 91 04	sta $0491			sta 	StringTempPointer
.b230	ad 8f 04	lda $048f			lda 	StringMemory+1
.b233	3a		dec a				dec 	a
.b234	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b237	60		rts				rts
.b238					StringTempAllocate:
.b238	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b23a	b0 35		bcs $b271			bcs 	_STALength
.b23c	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b23f	30 05		bmi $b246			bmi 	_STAAllocate
.b241	48		pha				pha 								; save value to subtract.
.b242	20 22 b2	jsr $b222			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b245	68		pla				pla 								; restore it
.b246					_STAAllocate:
.b246	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b248	18		clc				clc  								; deliberate allows one more
.b249	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b24c	8d 91 04	sta $0491			sta 	StringTempPointer
.b24f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b252	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b254	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b257	69 ff		adc #$ff			adc 	#$FF
.b259	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b25c	85 3d		sta $3d				sta 	zsTemp+1
.b25e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b261	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b264	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b267	a9 10		lda #$10			lda 	#NSTString
.b269	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b26c	a9 00		lda #$00			lda 	#0 							; clear the target string
.b26e	92 3c		sta ($3c)			sta 	(zsTemp)
.b270	60		rts				rts
.b271					_STALength:
.b271	a9 09		lda #$09		lda	#9
.b273	4c 69 95	jmp $9569		jmp	ErrorHandler
.b276					StringTempWrite:
.b276	48		pha				pha
.b277	92 3c		sta ($3c)			sta 	(zsTemp)
.b279	e6 3c		inc $3c				inc 	zsTemp
.b27b	d0 02		bne $b27f			bne 	_STWNoCarry
.b27d	e6 3d		inc $3d				inc 	zsTemp+1
.b27f					_STWNoCarry:
.b27f	a9 00		lda #$00			lda 	#0
.b281	92 3c		sta ($3c)			sta 	(zsTemp)
.b283	68		pla				pla
.b284	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a247					BackloadProgram:
.a247	a2 ff		ldx #$ff			ldx 	#$FF
.a249	20 71 a2	jsr $a271			jsr 	BLReadByte
.a24c	30 1f		bmi $a26d			bmi 	_BPExit
.a24e					_BPCopy:
.a24e	e8		inx				inx  								; copy byte in
.a24f	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a252	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a255	20 71 a2	jsr $a271			jsr 	BLReadByte 					; read next byte
.a258	30 0a		bmi $a264			bmi 	_BPEndLine 					; -ve = EOL
.a25a	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a25c	d0 02		bne $a260			bne 	_BPNotTab
.a25e	a9 20		lda #$20			lda 	#' '
.a260					_BPNotTab:
.a260	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a262	b0 ea		bcs $a24e			bcs 	_BPCopy
.a264					_BPEndLine:
.a264	20 23 a6	jsr $a623			jsr 	TokeniseLine 				; tokenise the line.
.a267	38		sec				sec 								; append not insert
.a268	20 31 b1	jsr $b131			jsr 	MemoryInsertLine 			; append to current program
.a26b	80 da		bra $a247			bra 	BackloadProgram
.a26d					_BPExit:
.a26d	20 72 8b	jsr $8b72			jsr 	ClearCommand 				; clear variables etc.
.a270	60		rts				rts
.a271					BLReadByte:
.a271					_BLLoad:
.a271	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a274	ee 72 a2	inc $a272			inc 	_BLLoad+1
.a277	d0 03		bne $a27c			bne 	_BLNoCarry
.a279	ee 73 a2	inc $a273			inc 	_BLLoad+2
.a27c					_BLNoCarry:
.a27c	c9 00		cmp #$00			cmp 	#0
.a27e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a27f					TokeniseSearchTable:
.a27f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a281	85 36		sta $36				sta 	zTemp0
.a283	a0 00		ldy #$00			ldy 	#0
.a285	a9 80		lda #$80			lda 	#$80 						; token #
.a287	85 38		sta $38				sta 	zTemp1
.a289					_TSTLoop:
.a289	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a28b	30 49		bmi $a2d6			bmi 	_TSTFail 					; -ve = end of table
.a28d	f0 2e		beq $a2bd			beq 	_TSTNext 					; zero, check next it's a dummy
.a28f	c8		iny				iny 								; get the hash
.a290	b1 36		lda ($36),y			lda 	(zTemp0),y
.a292	88		dey				dey
.a293	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a296	d0 25		bne $a2bd			bne 	_TSTNext
.a298	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a29b	38		sec				sec
.a29c	ed 80 04	sbc $0480			sbc 	identStart
.a29f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a2a1	d0 1a		bne $a2bd			bne 	_TSTNext
.a2a3	5a		phy				phy 								; save Y , we might fail
.a2a4	c8		iny				iny 								; point to text
.a2a5	c8		iny				iny
.a2a6	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a2a9					_TSTCompareName:
.a2a9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a2ac	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a2ae	d0 0c		bne $a2bc			bne 	_TSTNextPullY 				; fail, pullY and do next
.a2b0	e8		inx				inx
.a2b1	c8		iny				iny
.a2b2	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a2b5	d0 f2		bne $a2a9			bne 	_TSTCompareName
.a2b7	7a		ply				ply 								; throw Y
.a2b8	a5 38		lda $38				lda 	zTemp1 						; get token #
.a2ba	38		sec				sec 								; return with CS = passed.
.a2bb	60		rts				rts
.a2bc					_TSTNextPullY:
.a2bc	7a		ply				ply 								; restore current, fall through.
.a2bd					_TSTNext:
.a2bd	e6 38		inc $38				inc 	zTemp1 						; token counter
.a2bf	98		tya				tya
.a2c0	18		clc				clc
.a2c1	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a2c3	1a		inc a				inc 	a 							; +1
.a2c4	1a		inc a				inc 	a 							; +2
.a2c5	a8		tay				tay
.a2c6	10 c1		bpl $a289			bpl 	_TSTLoop 					; if Y < $80 loop back
.a2c8	98		tya				tya 								; add Y to zTemp0 and reset Y
.a2c9	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a2cb	18		clc				clc  								; but have tables > 255 bytes
.a2cc	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a2ce	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a2d0	90 b7		bcc $a289			bcc 	_TSTLoop
.a2d2	e6 37		inc $37				inc 	zTemp0+1
.a2d4	80 b3		bra $a289			bra 	_TSTLoop
.a2d6					_TSTFail:
.a2d6	18		clc				clc
.a2d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a2d8					KeywordSet0:
>a2d8	00 65					.text	0,$65,""               ; $80 !0:EOF
>a2da	00 58					.text	0,$58,""               ; $81 !1:SH1
>a2dc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a2de	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a2e4	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a2ec	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a2f2	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a2f9	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a301	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a308	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a30f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a315	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a31d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a325	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a32b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a332	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a338	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a33d	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a341	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a349	28
>a34a	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a352	28
>a353	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a359	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a35f	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a365	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a36c	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a374	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a37a	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a380	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a385	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a389	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a38f	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a397	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a39e	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a3a5	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a3ad	43
>a3ae	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a3b4	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a3ba	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a3c1	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a3c7	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a6 CALL
>a3cd	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a7 CIRCLE
>a3d5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a8 CLS
>a3da	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $a9 COLOR
>a3e1	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $aa COLOUR
>a3e9	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ab DATA
>a3ef	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ac DIM
>a3f4	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ad DOWNTO
>a3fc	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $ae ELSE
>a402	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $af GFX
>a407	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b0 GOSUB
>a40e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b1 GOTO
>a414	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b2 HERE
>a41a	04 1a 48 49 44 45			.text	4,$1a,"HIDE"           ; $b3 HIDE
>a420	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b4 LET
>a425	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b5 LINE
>a42b	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b6 LOCAL
>a432	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b7 OUTLINE
>a43a	45
>a43b	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $b8 PRINT
>a442	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $b9 READ
>a448	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $ba RECT
>a44e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bb REM
>a453	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bc RETURN
>a45b	05 68 53 43 41 4c 45			.text	5,$68,"SCALE"          ; $bd SCALE
>a462	04 41 53 48 4f 57			.text	4,$41,"SHOW"           ; $be SHOW
>a468	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $bf SOLID
>a46f	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c0 SPRITE
>a477	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c1 TEXT
>a47d	02 a3 54 4f				.text	2,$a3,"TO"             ; $c2 TO
>a481	ff					.text	$FF
.a482					KeywordSet1:
>a482	00 65					.text	0,$65,""               ; $80 !0:EOF
>a484	00 58					.text	0,$58,""               ; $81 !1:SH1
>a486	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a488	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a490	4c 45
>a492	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a49a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a4a2	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $86 CLEAR
>a4a9	03 d7 45 4e 44				.text	3,$d7,"END"            ; $87 END
>a4ae	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $88 LIST
>a4b4	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $89 NEW
>a4b9	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8a RESTORE
>a4c1	45
>a4c2	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8b RUN
>a4c7	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8c SPRITES
>a4cf	53
>a4d0	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8d STOP
>a4d6	ff					.text	$FF
.a4d7					KeywordSet2:
>a4d7	00 65					.text	0,$65,""               ; $80 !0:EOF
>a4d9	00 58					.text	0,$58,""               ; $81 !1:SH1
>a4db	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a4dd	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a4e2	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a4e7	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a4ec	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a4f1	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a4f6	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a4fb	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a500	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a505	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a50a	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a50f	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a514	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a519	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a51e	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a523	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a528	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a52d	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a532	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a537	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a53c	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a541	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a546	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a54b	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a550	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a555	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a55a	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a55f	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a564	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a569	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a56e	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a573	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a578	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a57d	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a582	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a587	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a58c	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a591	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a596	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a59b	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a5a0	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a5a5	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a5aa	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a5af	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a5b4	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a5b9	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a5be	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a5c3	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a5c8	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a5cd	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a5d2	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a5d7	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a5dc	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a5e1	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a5e6	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a5eb	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a5f0	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a5f5	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a5fa	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a5ff	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a604	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a609	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a60e	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a613	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a618	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a61d	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a622	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a623					TokeniseLine:
.a623	20 ab a7	jsr $a7ab			jsr 	FixLineBufferCase 			; fix line case
.a626	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a628	8d a6 04	sta $04a6			sta 	tokenOffset
.a62b	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a62e	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a631	a2 ff		ldx #$ff			ldx 	#$FF
.a633					_TKFindFirst:
.a633	e8		inx				inx
.a634	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a637	f0 79		beq $a6b2			beq 	_TKExit
.a639	c9 20		cmp #$20			cmp 	#' '
.a63b	90 f6		bcc $a633			bcc 	_TKFindFirst
.a63d	c9 30		cmp #$30			cmp 	#'0'
.a63f	90 07		bcc $a648			bcc 	_TKNoLineNumber
.a641	c9 3a		cmp #$3a			cmp 	#'9'+1
.a643	b0 03		bcs $a648			bcs 	_TKNoLineNumber
.a645	20 d5 a7	jsr $a7d5			jsr 	TokeniseExtractLineNumber
.a648					_TKNoLineNumber:
.a648					_TKTokeniseLoop:
.a648	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a64b	f0 65		beq $a6b2			beq 	_TKExit
.a64d	e8		inx				inx
.a64e	c9 20		cmp #$20			cmp 	#' '
.a650	f0 f6		beq $a648			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a652	ca		dex				dex 								; undo last get, A contains character, X is position.
.a653	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a655	f0 61		beq $a6b8			beq 	_TKTokeniseIdentifier
.a657	c9 41		cmp #$41			cmp 	#'A'
.a659	90 04		bcc $a65f			bcc 	_TKTokenisePunctuation
.a65b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a65d	90 59		bcc $a6b8			bcc 	_TKTokeniseIdentifier
.a65f					_TKTokenisePunctuation:
.a65f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a661	f0 27		beq $a68a			beq 	_TKString
.a663	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a665	f0 28		beq $a68f			beq 	_TKHexConstant
.a667	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a669	f0 29		beq $a694			beq 	_TKCheckDouble
.a66b	c9 3e		cmp #$3e			cmp 	#'>'
.a66d	f0 25		beq $a694			beq 	_TKCheckDouble
.a66f					_TKStandardPunctuation:
.a66f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a672	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a674	90 0e		bcc $a684			bcc 	_TKNoShift
.a676	48		pha				pha 								; save
.a677	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a679	85 36		sta $36				sta 	zTemp0
.a67b	68		pla				pla
.a67c	29 20		and #$20			and 	#32 						; bit 5
.a67e	4a		lsr a				lsr 	a 							; shift into bit 3
.a67f	4a		lsr a				lsr 	a
.a680	05 36		ora $36				ora 	zTemp0
.a682	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a684					_TKNoShift:
.a684	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte 			; write the punctuation character
.a687	e8		inx				inx 								; consume the character
.a688	80 be		bra $a648			bra 	_TKTokeniseLoop 			; and loop round again.
.a68a					_TKString:
.a68a	20 3a a7	jsr $a73a			jsr 	TokeniseString
.a68d	80 b9		bra $a648			bra 	_TKTokeniseLoop
.a68f					_TKHexConstant:
.a68f	20 75 a7	jsr $a775			jsr 	TokeniseHexConstant
.a692	80 b4		bra $a648			bra 	_TKTokeniseLoop
.a694					_TKCheckDouble:
.a694	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a697	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a699	90 d4		bcc $a66f			bcc 	_TKStandardPunctuation
.a69b	c9 3f		cmp #$3f			cmp 	#'>'+1
.a69d	b0 d0		bcs $a66f			bcs 	_TKStandardPunctuation
.a69f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a6a2	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a6a4	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a6a5	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a6a8	38		sec				sec
.a6a9	e9 3c		sbc #$3c			sbc 	#'<'
.a6ab	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a6ae	e8		inx				inx 								; consume both
.a6af	e8		inx				inx
.a6b0	80 96		bra $a648			bra 	_TKTokeniseLoop
.a6b2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a6b4	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a6b7	60		rts				rts
.a6b8					_TKTokeniseIdentifier:
.a6b8	8e 80 04	stx $0480			stx 	identStart 					; save start
.a6bb	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a6be					_TKCheckLoop:
.a6be	e8		inx				inx 								; look at next, we know first is identifier.
.a6bf	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a6c2	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a6c4	f0 f8		beq $a6be			beq 	_TKCheckLoop
.a6c6	c9 30		cmp #$30			cmp	 	#"0"
.a6c8	90 0c		bcc $a6d6			bcc 	_TKEndIdentifier
.a6ca	c9 3a		cmp #$3a			cmp 	#"9"+1
.a6cc	90 f0		bcc $a6be			bcc 	_TKCheckLoop
.a6ce	c9 41		cmp #$41			cmp	 	#"A"
.a6d0	90 04		bcc $a6d6			bcc 	_TKEndIdentifier
.a6d2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a6d4	90 e8		bcc $a6be			bcc 	_TKCheckLoop
.a6d6					_TKEndIdentifier:
.a6d6	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a6d9	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a6db	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a6dd	f0 06		beq $a6e5			beq 	_TKHasTypeCharacter
.a6df	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a6e1	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a6e3	d0 07		bne $a6ec			bne 	_TKNoTypeCharacter
.a6e5					_TKHasTypeCharacter:
.a6e5	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a6e8	e8		inx				inx 								; read next
.a6e9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a6ec					_TKNoTypeCharacter:
.a6ec	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a6ee	d0 09		bne $a6f9			bne 	_TKNoArray
.a6f0	e8		inx				inx 								; skip the (
.a6f1	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a6f4	09 04		ora #$04			ora 	#$04
.a6f6	8d 84 04	sta $0484			sta 	identTypeByte
.a6f9					_TKNoArray:
.a6f9	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a6fc	20 96 a7	jsr $a796			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a6ff	a0 a2		ldy #$a2			ldy 	#(KeywordSet0) >> 8
.a701	a9 d8		lda #$d8			lda 	#(KeywordSet0) & $FF
.a703	20 7f a2	jsr $a27f			jsr 	TokeniseSearchTable
.a706	a2 00		ldx #$00			ldx 	#0
.a708	b0 1f		bcs $a729			bcs 	_TKFoundToken
.a70a	a0 a4		ldy #$a4			ldy 	#(KeywordSet1) >> 8
.a70c	a9 82		lda #$82			lda 	#(KeywordSet1) & $FF
.a70e	20 7f a2	jsr $a27f			jsr 	TokeniseSearchTable
.a711	a2 81		ldx #$81			ldx 	#$81
.a713	b0 14		bcs $a729			bcs 	_TKFoundToken
.a715	a0 a4		ldy #$a4			ldy 	#(KeywordSet2) >> 8
.a717	a9 d7		lda #$d7			lda 	#(KeywordSet2) & $FF
.a719	20 7f a2	jsr $a27f			jsr 	TokeniseSearchTable
.a71c	a2 82		ldx #$82			ldx 	#$82
.a71e	b0 09		bcs $a729			bcs 	_TKFoundToken
.a720	20 26 a8	jsr $a826			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a723	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a726	4c 48 a6	jmp $a648			jmp 	_TKTokeniseLoop 			; and go round again.
.a729					_TKFoundToken:
.a729	48		pha				pha 								; save token
.a72a	8a		txa				txa 								; shift in X, is there one ?
.a72b	f0 03		beq $a730			beq 	_TKNoTShift
.a72d	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte 			; if so, write it out
.a730					_TKNoTShift:
.a730	68		pla				pla 								; restore and write token
.a731	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a734	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a737	4c 48 a6	jmp $a648			jmp 	_TKTokeniseLoop 			; and go round again.
.a73a					TokeniseString:
.a73a	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a73c	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a73f	e8		inx				inx									; start of quoted string.
.a740	da		phx				phx 								; push start of string on top
.a741	ca		dex				dex
.a742					_TSFindEnd:
.a742	e8		inx				inx
.a743	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a746	f0 04		beq $a74c			beq 	_TSEndOfString
.a748	c9 22		cmp #$22			cmp 	#'"'
.a74a	d0 f6		bne $a742			bne 	_TSFindEnd
.a74c					_TSEndOfString:
.a74c	7a		ply				ply  								; so now Y is first character, X is character after end.
.a74d	48		pha				pha 								; save terminating character
.a74e	20 56 a7	jsr $a756			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a751	68		pla				pla 								; terminating character
.a752	f0 01		beq $a755			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a754	e8		inx				inx
.a755					_TSNotQuote:
.a755	60		rts				rts
.a756					TOWriteBlockXY:
.a756	86 36		stx $36				stx 	zTemp0 						; write end character
.a758	98		tya				tya
.a759	49 ff		eor #$ff			eor 	#$FF
.a75b	38		sec				sec
.a75c	65 36		adc $36				adc 	zTemp0
.a75e	1a		inc a				inc 	a 							; one extra for NULL
.a75f	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a762					_TOBlockLoop:
.a762	c4 36		cpy $36				cpy 	zTemp0
.a764	f0 09		beq $a76f			beq 	_TOBlockExit
.a766	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a769	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a76c	c8		iny				iny
.a76d	80 f3		bra $a762			bra 	_TOBlockLoop
.a76f					_TOBlockExit:
.a76f	a9 00		lda #$00			lda 	#0
.a771	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a774	60		rts				rts
.a775					TokeniseHexConstant:
.a775	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a777	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a77a	e8		inx				inx									; start of quoted string.
.a77b	da		phx				phx 								; push start of constant on top
.a77c	ca		dex				dex
.a77d					_THFindLoop:
.a77d	e8		inx				inx
.a77e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a781	c9 30		cmp #$30			cmp 	#"0"
.a783	90 0c		bcc $a791			bcc 	_THFoundEnd
.a785	c9 3a		cmp #$3a			cmp 	#"9"+1
.a787	90 f4		bcc $a77d			bcc 	_THFindLoop
.a789	c9 41		cmp #$41			cmp 	#"A"
.a78b	90 04		bcc $a791			bcc 	_THFoundEnd
.a78d	c9 47		cmp #$47			cmp 	#"F"+1
.a78f	90 ec		bcc $a77d			bcc 	_THFindLoop
.a791					_THFoundEnd:
.a791	7a		ply				ply 								; restore start
.a792	20 56 a7	jsr $a756			jsr 	TOWriteBlockXY 				; output the block
.a795	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a796					TokeniseCalculateHash:
.a796	da		phx				phx
.a797	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a79a	a9 00		lda #$00			lda 	#0
.a79c					_TCHLoop:
.a79c	18		clc				clc
.a79d	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a7a0	e8		inx				inx
.a7a1	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a7a4	d0 f6		bne $a79c			bne 	_TCHLoop
.a7a6	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a7a9	fa		plx				plx
.a7aa	60		rts				rts
.a7ab					FixLineBufferCase:
.a7ab	a2 00		ldx #$00			ldx 	#0
.a7ad					_FLBCLoop:
.a7ad	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a7b0	f0 22		beq $a7d4			beq 	_FLBCExit 					; end of string.
.a7b2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a7b4	f0 11		beq $a7c7			beq 	_FLBCInQuotes
.a7b6	e8		inx				inx
.a7b7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a7b9	90 f2		bcc $a7ad			bcc 	_FLBCLoop
.a7bb	c9 7b		cmp #$7b			cmp 	#'z'+1
.a7bd	b0 ee		bcs $a7ad			bcs 	_FLBCLoop
.a7bf	38		sec				sec 								; make U/C
.a7c0	e9 20		sbc #$20			sbc 	#32
.a7c2	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a7c5	80 e6		bra $a7ad			bra 	_FLBCLoop
.a7c7					_FLBCInQuotes:
.a7c7	e8		inx				inx 								; advance
.a7c8	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a7cb	f0 07		beq $a7d4			beq 	_FLBCExit 					; exit on EOS
.a7cd	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a7cf	d0 f6		bne $a7c7			bne 	_FLBCInQuotes
.a7d1	e8		inx				inx 								; skip over it
.a7d2	80 d9		bra $a7ad			bra 	_FLBCLoop
.a7d4					_FLBCExit:
.a7d4	60		rts				rts
.a7d5					TokeniseExtractLineNumber:
.a7d5	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a7d8	48		pha				pha
.a7d9	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a7dc	48		pha				pha
.a7dd	20 13 a8	jsr $a813			jsr 	_TELNTimes2 				; line # x 4
.a7e0	20 13 a8	jsr $a813			jsr 	_TELNTimes2 				; line # x 2
.a7e3	18		clc				clc 								; add stacked value
.a7e4	68		pla				pla
.a7e5	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a7e8	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a7eb	68		pla				pla
.a7ec	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a7ef	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a7f2	20 13 a8	jsr $a813			jsr 	_TELNTimes2 				; line # x 10
.a7f5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a7f8	e8		inx				inx
.a7f9	29 0f		and #$0f			and 	#15 						; add to line #
.a7fb	18		clc				clc
.a7fc	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a7ff	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a802	90 03		bcc $a807			bcc 	_TLENNoCarry
.a804	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a807					_TLENNoCarry:
.a807	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a80a	c9 30		cmp #$30			cmp 	#'0'
.a80c	90 04		bcc $a812			bcc 	_TLENExit
.a80e	c9 3a		cmp #$3a			cmp 	#'9'+1
.a810	90 c3		bcc $a7d5			bcc 	TokeniseExtractLineNumber
.a812					_TLENExit:
.a812	60		rts				rts
.a813					_TELNTimes2:
.a813	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a816	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a819	60		rts				rts
.a81a					TokeniseWriteByte:
.a81a	da		phx				phx
.a81b	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a81e	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a821	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a824	fa		plx				plx
.a825	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a826					CheckCreateVariableRecord:
.a826	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a828	85 36		sta $36				sta 	0+zTemp0
.a82a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a82c	85 37		sta $37				sta 	1+zTemp0
.a82e					_CCVSearch:
.a82e	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a830	f0 2c		beq $a85e			beq 	_CCVFail
.a832	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a834	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a836	cd 83 04	cmp $0483			cmp 	identHash
.a839	d0 16		bne $a851			bne 	_CCVNext
.a83b	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a83d	ae 80 04	ldx $0480			ldx 	identStart
.a840					_CCVCompare:
.a840	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a843	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a845	e8		inx				inx 								; advance pointers
.a846	c8		iny				iny
.a847	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a848	d0 07		bne $a851			bne 	_CCVNext  					; didn't match go to next.
.a84a	90 f4		bcc $a840			bcc 	_CCVCompare 				; not finished yet.
.a84c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a84f	f0 41		beq $a892			beq 	_CCVFound 					; yes, we were successful
.a851					_CCVNext:
.a851	18		clc				clc
.a852	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a854	65 36		adc $36				adc 	zTemp0
.a856	85 36		sta $36				sta 	zTemp0
.a858	90 d4		bcc $a82e			bcc 	_CCVSearch
.a85a	e6 37		inc $37				inc 	zTemp0+1
.a85c	80 d0		bra $a82e			bra 	_CCVSearch
.a85e					_CCVFail:
.a85e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a860	ad 83 04	lda $0483			lda 	identHash
.a863	91 36		sta ($36),y			sta 	(zTemp0),y
.a865	c8		iny				iny 								; offset 2 is the type byte
.a866	ad 84 04	lda $0484			lda 	identTypeByte
.a869	91 36		sta ($36),y			sta 	(zTemp0),y
.a86b	c8		iny				iny
.a86c					_CCVData:
.a86c	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a86e	91 36		sta ($36),y			sta 	(zTemp0),y
.a870	c8		iny				iny
.a871	c0 08		cpy #$08			cpy 	#8
.a873	90 f7		bcc $a86c			bcc 	_CCVData
.a875	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a878					_CCVCopyName:
.a878	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a87b	91 36		sta ($36),y			sta 	(zTemp0),y
.a87d	e8		inx				inx
.a87e	c8		iny				iny
.a87f	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a882	d0 f4		bne $a878			bne 	_CCVCopyName
.a884	98		tya				tya 								; patch offset
.a885	92 36		sta ($36)			sta 	(zTemp0)
.a887	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a889	91 36		sta ($36),y			sta 	(zTemp0),y
.a88b	88		dey				dey
.a88c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a88e	09 80		ora #$80			ora 	#$80
.a890	91 36		sta ($36),y			sta 	(zTemp0),y
.a892					_CCVFound:
.a892	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a894	38		sec				sec
.a895	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a897	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a899	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a89c	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a89e	20 1a a8	jsr $a81a			jsr 	TokeniseWriteByte
.a8a1	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
