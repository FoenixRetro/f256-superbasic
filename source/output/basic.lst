
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 10:13:43 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a9 7b		lda #$7b			lda 	#123
.8005	a2 72		ldx #$72			ldx 	#114
>8007	db						.byte 	$DB 						; causes a break in the emulator
.8008	20 55 99	jsr $9955			jsr 	Multiply8x8
>800b	db						.byte 	$DB 						; causes a break in the emulator
.800c	20 0e 83	jsr $830e			jsr 	NewCommand 					; erase current program
.800f	20 d8 8f	jsr $8fd8			jsr 	BackloadProgram
.8012	4c 9e 83	jmp $839e			jmp 	CommandRun
.8015					WarmStart:
.8015	a9 57		lda #$57			lda 	#"W"
.8017	20 c0 9b	jsr $9bc0			jsr 	EXTPrintCharacter
.801a	80 fe		bra $801a	halt:	bra 	halt
>801c							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.801c					VectorSetPunc:
>801c	37 86					.word	ShiftLeft                        ; $00 <<
>801e	31 85					.word	BinaryCompareLessEqual           ; $01 <=
>8020	27 85					.word	BinaryCompareNotEqual            ; $02 <>
>8022	a3 99					.word	SyntaxError                      ; $03 !!3
>8024	a3 99					.word	SyntaxError                      ; $04 ><
>8026	3b 85					.word	BinaryCompareGreaterEqual        ; $05 >=
>8028	3a 86					.word	ShiftRight                       ; $06 >>
>802a	a3 99					.word	SyntaxError                      ; $07 !!7
>802c	a3 99					.word	SyntaxError                      ; $08 !!8
>802e	a3 99					.word	SyntaxError                      ; $09 !!9
>8030	a3 99					.word	SyntaxError                      ; $0a !!10
>8032	a3 99					.word	SyntaxError                      ; $0b !!11
>8034	a3 99					.word	SyntaxError                      ; $0c !!12
>8036	a3 99					.word	SyntaxError                      ; $0d !!13
>8038	a3 99					.word	SyntaxError                      ; $0e !!14
>803a	a3 99					.word	SyntaxError                      ; $0f !!15
>803c	a3 99					.word	SyntaxError                      ; $10 @
>803e	a3 99					.word	SyntaxError                      ; $11 !!17
>8040	a3 99					.word	SyntaxError                      ; $12 !!18
>8042	a3 99					.word	SyntaxError                      ; $13 [
>8044	ec 94					.word	IntegerDivide                    ; $14 \
>8046	a3 99					.word	SyntaxError                      ; $15 ]
>8048	c0 87					.word	EorInteger                       ; $16 ^
>804a	a3 99					.word	SyntaxError                      ; $17 _
>804c	a3 99					.word	SyntaxError                      ; $18 `
>804e	a3 99					.word	SyntaxError                      ; $19 !!25
>8050	a3 99					.word	SyntaxError                      ; $1a !!26
>8052	a3 99					.word	SyntaxError                      ; $1b {
>8054	7a 87					.word	OraInteger                       ; $1c |
>8056	a3 99					.word	SyntaxError                      ; $1d }
>8058	a3 99					.word	SyntaxError                      ; $1e ~
>805a	a3 99					.word	SyntaxError                      ; $1f [7m<7F>[m
>805c	a3 99					.word	SyntaxError                      ; $20
>805e	06 88					.word	WordIndirect                     ; $21 !
>8060	a3 99					.word	SyntaxError                      ; $22 "
>8062	a3 99					.word	SyntaxError                      ; $23 #
>8064	a3 99					.word	SyntaxError                      ; $24 $
>8066	39 95					.word	IntegerModulus                   ; $25 %
>8068	34 87					.word	AndInteger                       ; $26 &
>806a	a3 99					.word	SyntaxError                      ; $27 '
>806c	a3 99					.word	SyntaxError                      ; $28 (
>806e	a3 99					.word	SyntaxError                      ; $29 )
>8070	ae 95					.word	MulInteger                       ; $2a *
>8072	ce 86					.word	AddInteger                       ; $2b +
>8074	a3 99					.word	SyntaxError                      ; $2c ,
>8076	09 87					.word	SubInteger                       ; $2d -
>8078	a3 99					.word	SyntaxError                      ; $2e .
>807a	45 97					.word	FDivideCommand                   ; $2f /
>807c	a3 99					.word	SyntaxError                      ; $30 0
>807e	a3 99					.word	SyntaxError                      ; $31 1
>8080	a3 99					.word	SyntaxError                      ; $32 2
>8082	a3 99					.word	SyntaxError                      ; $33 3
>8084	a3 99					.word	SyntaxError                      ; $34 4
>8086	a3 99					.word	SyntaxError                      ; $35 5
>8088	a3 99					.word	SyntaxError                      ; $36 6
>808a	a3 99					.word	SyntaxError                      ; $37 7
>808c	a3 99					.word	SyntaxError                      ; $38 8
>808e	a3 99					.word	SyntaxError                      ; $39 9
>8090	a3 99					.word	SyntaxError                      ; $3a :
>8092	a3 99					.word	SyntaxError                      ; $3b ;
>8094	13 85					.word	BinaryCompareLess                ; $3c <
>8096	09 85					.word	BinaryCompareEqual               ; $3d =
>8098	1d 85					.word	BinaryCompareGreater             ; $3e >
>809a	2d 88					.word	ByteIndirect                     ; $3f ?
.809c					VectorSet0:
>809c	f3 83					.word	EOLCommand                       ; $80 !0:EOF
>809e	00 84					.word	Shift1Command                    ; $81 !1:SH1
>80a0	a3 99					.word	SyntaxError                      ; $82 !2:SH2
>80a2	8b 98					.word	AbsUnary                         ; $83 ABS(
>80a4	70 8c					.word	AllocUnary                       ; $84 ALLOC(
>80a6	9b 98					.word	AscUnary                         ; $85 ASC(
>80a8	0d 8d					.word	ChrUnary                         ; $86 CHR$(
>80aa	05 85					.word	UnaryFalse                       ; $87 FALSE
>80ac	a8 98					.word	FracUnary                        ; $88 FRAC(
>80ae	be 98					.word	IntUnary                         ; $89 INT(
>80b0	14 99					.word	IsValUnary                       ; $8a ISVAL(
>80b2	e7 8d					.word	Unary_Left                       ; $8b LEFT$(
>80b4	d0 98					.word	LenUnary                         ; $8c LEN(
>80b6	11 8e					.word	Unary_Mid                        ; $8d MID$(
>80b8	aa 8c					.word	Unary_Not                        ; $8e NOT(
>80ba	f7 8d					.word	Unary_Right                      ; $8f RIGHT$(
>80bc	c0 8c					.word	Unary_Rnd                        ; $90 RND(
>80be	ea 98					.word	SgnUnary                         ; $91 SGN(
>80c0	1f 8d					.word	SpcUnary                         ; $92 SPC(
>80c2	3a 8d					.word	Unary_Str                        ; $93 STR$(
>80c4	f9 84					.word	UnaryTrue                        ; $94 TRUE
>80c6	0a 99					.word	ValUnary                         ; $95 VAL(
>80c8	71 81					.word	ForCommand                       ; $96 FOR
>80ca	b5 82					.word	IfCommand                        ; $97 IF
>80cc	08 84					.word	Unused1                          ; $98 PROC
>80ce	7c 83					.word	Command_REPEAT                   ; $99 REPEAT
>80d0	65 84					.word	Command_WHILE                    ; $9a WHILE
>80d2	de 82					.word	EndIf                            ; $9b ENDIF
>80d4	a3 99					.word	SyntaxError                      ; $9c ENDPROC
>80d6	2b 82					.word	NextCommand                      ; $9d NEXT
>80d8	a3 99					.word	SyntaxError                      ; $9e THEN
>80da	85 83					.word	Command_UNTIL                    ; $9f UNTIL
>80dc	86 84					.word	Command_WEND                     ; $a0 WEND
>80de	26 81					.word	CallCommand                      ; $a1 CALL
>80e0	a3 99					.word	SyntaxError                      ; $a2 CLS
>80e2	a3 99					.word	SyntaxError                      ; $a3 DATA
>80e4	a3 99					.word	SyntaxError                      ; $a4 DIM
>80e6	08 84					.word	Unused3                          ; $a5 DOWNTO
>80e8	d7 82					.word	ElseCode                         ; $a6 ELSE
>80ea	84 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80ec	a2 82					.word	GotoCommand                      ; $a8 GOTO
>80ee	df 82					.word	LetCommand                       ; $a9 LET
>80f0	18 83					.word	Command_Print                    ; $aa PRINT
>80f2	a3 99					.word	SyntaxError                      ; $ab READ
>80f4	6f 83					.word	RemCommand                       ; $ac REM
>80f6	94 82					.word	Command_RETURN                   ; $ad RETURN
>80f8	08 84					.word	Unused2                          ; $ae TO
.80fa					VectorSet1:
>80fa	a3 99					.word	SyntaxError                      ; $80 !0:EOF
>80fc	a3 99					.word	SyntaxError                      ; $81 !1:SH1
>80fe	a3 99					.word	SyntaxError                      ; $82 !2:SH2
>8100	16 81					.word	AssertCommand                    ; $83 ASSERT
>8102	34 81					.word	ClearCommand                     ; $84 CLEAR
>8104	6e 81					.word	EndCommand                       ; $85 END
>8106	a3 99					.word	SyntaxError                      ; $86 LIST
>8108	0e 83					.word	NewCommand                       ; $87 NEW
>810a	a3 99					.word	SyntaxError                      ; $88 RESTORE
>810c	9e 83					.word	CommandRUN                       ; $89 RUN
>810e	a3 99					.word	SyntaxError                      ; $8a STOP
.8110					VectorSet2:
>8110	a3 99					.word	SyntaxError                      ; $80 !0:EOF
>8112	a3 99					.word	SyntaxError                      ; $81 !1:SH1
>8114	a3 99					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8116					AssertCommand:
.8116	a2 00		ldx #$00			ldx 	#0
.8118	20 b2 8e	jsr $8eb2			jsr 	EvaluateInteger 			; the assert test
.811b	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; exit if result is non zero.
.811e	d0 05		bne $8125			bne 	_ACExit
.8120	a9 0a		lda #$0a		lda	#10
.8122	4c 94 84	jmp $8494		jmp	ErrorHandler
.8125					_ACExit:
.8125	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8126					CallCommand:
.8126	a2 00		ldx #$00			ldx 	#0
.8128	20 c7 8e	jsr $8ec7			jsr 	Evaluate16BitInteger
.812b	ad 10 06	lda $0610			lda 	NSMantissa1
.812e	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8131	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8134					ClearCommand:
.8134	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8136	85 36		sta $36				sta 	0+zTemp0
.8138	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.813a	85 37		sta $37				sta 	1+zTemp0
.813c					_ClearZeroLoop:
.813c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.813e	f0 18		beq $8158			beq 	_ClearZeroEnd
.8140	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8142	a9 00		lda #$00			lda 	#0
.8144					_ClearOneVariable:
.8144	91 36		sta ($36),y			sta 	(zTemp0),y
.8146	c8		iny				iny
.8147	c0 08		cpy #$08			cpy 	#8
.8149	d0 f9		bne $8144			bne 	_ClearOneVariable
.814b	18		clc				clc 								; go to the next variable
.814c	b2 36		lda ($36)			lda 	(zTemp0)
.814e	65 36		adc $36				adc 	zTemp0
.8150	85 36		sta $36				sta 	zTemp0
.8152	90 e8		bcc $813c			bcc 	_ClearZeroLoop
.8154	e6 37		inc $37				inc 	zTemp0+1
.8156	80 e4		bra $813c			bra 	_ClearZeroLoop
.8158					_ClearZeroEnd:
.8158	18		clc				clc
.8159	a5 36		lda $36				lda 	zTemp0
.815b	69 01		adc #$01			adc 	#1
.815d	8d 0c 07	sta $070c			sta 	lowMemPtr
.8160	a5 37		lda $37				lda 	zTemp0+1
.8162	69 00		adc #$00			adc 	#0
.8164	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8167	20 cb 8f	jsr $8fcb			jsr 	StackReset
.816a	20 36 9b	jsr $9b36			jsr 	StringSystemInitialise
.816d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.816e					EndCommand:
.816e	4c 15 80	jmp $8015			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8171					ForCommand:
.8171	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8173	20 78 8f	jsr $8f78			jsr 	StackOpen
.8176	a2 00		ldx #$00			ldx 	#0
.8178	20 67 8b	jsr $8b67			jsr 	EvaluateTerm
.817b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.817e	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8180	d0 49		bne $81cb			bne		_FCError
.8182	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8184	20 e3 94	jsr $94e3			jsr 	CheckNextA
.8187	e8		inx				inx
.8188	20 b2 8e	jsr $8eb2			jsr 	EvaluateInteger 			; <from> in +1
.818b	b1 30		lda ($30),y			lda 	(codePtr),y
.818d	c8		iny				iny 								; consume it
.818e	48		pha				pha 								; save on stack for later
.818f	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8191	f0 04		beq $8197			beq 	_FCNoSyntax
.8193	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8195	d0 37		bne $81ce			bne 	_FCSyntaxError
.8197					_FCNoSyntax:
.8197	e8		inx				inx
.8198	20 b2 8e	jsr $8eb2			jsr 	EvaluateInteger
.819b	20 aa 8f	jsr $8faa			jsr 	STKSaveCodePosition 		; save loop back position
.819e	68		pla				pla 								; restore DOWNTO or TO
.819f	5a		phy				phy 								; save Y on the stack
.81a0	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.81a2	f0 02		beq $81a6			beq 	_FCNotDownTo
.81a4	a9 02		lda #$02			lda 	#2
.81a6					_FCNotDownTo:
.81a6	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.81a7	a0 10		ldy #$10			ldy 	#16
.81a9	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81ab	a0 06		ldy #$06			ldy 	#6
.81ad	ad 08 06	lda $0608			lda 	NSMantissa0
.81b0	91 34		sta ($34),y			sta 	(basicStack),y
.81b2	ad 10 06	lda $0610			lda 	NSMantissa1
.81b5	c8		iny				iny
.81b6	91 34		sta ($34),y			sta 	(basicStack),y
.81b8	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.81ba	a2 01		ldx #$01			ldx 	#1
.81bc	20 d1 81	jsr $81d1			jsr 	FCIntegerToStack
.81bf	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.81c1	a2 02		ldx #$02			ldx 	#2
.81c3	20 d1 81	jsr $81d1			jsr 	FCIntegerToStack
.81c6	20 f1 81	jsr $81f1			jsr 	CopyIndexToReference
.81c9	7a		ply				ply 								; restore position
.81ca	60		rts				rts
.81cb					_FCError:
.81cb	4c ad 99	jmp $99ad			jmp 	TypeError
.81ce					_FCSyntaxError:
.81ce	4c a3 99	jmp $99a3			jmp 	SyntaxError
.81d1					FCIntegerToStack:
.81d1	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81d4	10 03		bpl $81d9			bpl	 	_FCNotNegative
.81d6	20 f0 8e	jsr $8ef0			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81d9					_FCNotNegative:
.81d9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81dc	91 34		sta ($34),y			sta 	(basicStack),y
.81de	c8		iny				iny
.81df	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81e2	91 34		sta ($34),y			sta 	(basicStack),y
.81e4	c8		iny				iny
.81e5	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81e8	91 34		sta ($34),y			sta 	(basicStack),y
.81ea	c8		iny				iny
.81eb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81ee	91 34		sta ($34),y			sta 	(basicStack),y
.81f0	60		rts				rts
.81f1					CopyIndexToReference:
.81f1	5a		phy				phy
.81f2	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.81f4	38		sec				sec 								; (because we copy from offset 8)
.81f5	b1 34		lda ($34),y			lda 	(basicStack),y
.81f7	e9 08		sbc #$08			sbc 	#8
.81f9	85 36		sta $36				sta 	zTemp0
.81fb	c8		iny				iny
.81fc	b1 34		lda ($34),y			lda 	(basicStack),y
.81fe	e9 00		sbc #$00			sbc 	#0
.8200	85 37		sta $37				sta 	zTemp0+1
.8202	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8204	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8206	b1 34		lda ($34),y			lda 	(basicStack),y
.8208	0a		asl a				asl 	a 							; into carry
.8209	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.820b	90 14		bcc $8221			bcc 	_CITRNormal
.820d	38		sec				sec
.820e					_CITRNegative:
.820e	a9 00		lda #$00			lda 	#0
.8210	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8212	91 36		sta ($36),y			sta 	(zTemp0),y
.8214	c8		iny				iny
.8215	ca		dex				dex
.8216	d0 f6		bne $820e			bne 	_CITRNegative
.8218	88		dey				dey 								; look at MSB of mantissa
.8219	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.821b	09 80		ora #$80			ora 	#$80
.821d	91 36		sta ($36),y			sta 	(zTemp0),y
.821f	7a		ply				ply
.8220	60		rts				rts
.8221					_CITRNormal:
.8221	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8223	91 36		sta ($36),y			sta 	(zTemp0),y
.8225	c8		iny				iny
.8226	ca		dex				dex
.8227	d0 f8		bne $8221			bne 	_CITRNormal
.8229	7a		ply				ply 								; and exit.
.822a	60		rts				rts
.822b					NextCommand:
.822b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.822d	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.822f	20 9f 8f	jsr $8f9f			jsr 	StackCheckFrame
.8232	5a		phy				phy
.8233	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8235	b1 34		lda ($34),y			lda 	(basicStack),y
.8237	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8239	30 02		bmi $823d			bmi 	_NCStepNeg
.823b	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.823d					_NCStepNeg:
.823d	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.823f	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8241	18		clc				clc
.8242					_NCBump:
.8242	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8244	91 34		sta ($34),y			sta 	(basicStack),y
.8246	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8248	c8		iny				iny 								; next byte
.8249	ca		dex				dex 								; do four times
.824a	d0 f6		bne $8242			bne 	_NCBump
.824c	20 f1 81	jsr $81f1			jsr		CopyIndexToReference		; copy it to the reference variable.
.824f	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8251	b1 34		lda ($34),y			lda 	(basicStack),y
.8253	0a		asl a				asl 	a 							; sign bit to carry
.8254	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8256	85 38		sta $38				sta 	zTemp1
.8258	90 02		bcc $825c			bcc 	_NCCompRev 					; use if step is +ve
.825a	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.825c					_NCCompRev:
.825c	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.825e	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8260	85 39		sta $39				sta 	zTemp1+1
.8262	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8264	38		sec				sec
.8265					_NCCompare:
.8265	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8267	b1 34		lda ($34),y			lda 	(basicStack),y
.8269	a4 39		ldy $39				ldy 	zTemp1+1
.826b	f1 34		sbc ($34),y			sbc 	(basicStack),y
.826d	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.826f	e6 39		inc $39				inc 	zTemp1+1
.8271	ca		dex				dex 								; do it 4 times.
.8272	d0 f1		bne $8265			bne 	_NCCompare
.8274	50 02		bvc $8278			bvc 	_NCNoOverflow 				; convert to signed comparison
.8276	49 80		eor #$80			eor 	#$80
.8278					_NCNoOverflow:
.8278	7a		ply				ply 								; restore Y position
.8279	0a		asl a				asl 	a 							; is bit 7 set.
.827a	90 04		bcc $8280			bcc 	_NCLoopback 				; if no , >= so loop back
.827c	20 91 8f	jsr $8f91			jsr 	StackClose 					; exit the loop
.827f	60		rts				rts
.8280					_NCLoopBack:
.8280	20 bb 8f	jsr $8fbb			jsr 	STKLoadCodePosition 		; loop back
.8283	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8284					Command_GOSUB:
.8284	a2 00		ldx #$00			ldx 	#0
.8286	20 c7 8e	jsr $8ec7			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8289	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.828b	20 78 8f	jsr $8f78			jsr 	StackOpen 					; create frame
.828e	20 aa 8f	jsr $8faa			jsr 	STKSaveCodePosition 		; save current position
.8291	4c a7 82	jmp $82a7			jmp 	GotoStackX
.8294					Command_RETURN:
.8294	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8296	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8298	20 9f 8f	jsr $8f9f			jsr 	StackCheckFrame
.829b	20 bb 8f	jsr $8fbb			jsr 	STKLoadCodePosition 		; restore code position
.829e	20 91 8f	jsr $8f91			jsr 	StackClose
.82a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.82a2					GotoCommand:
.82a2	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.82a4	20 c7 8e	jsr $8ec7			jsr 	Evaluate16BitInteger
.82a7					GotoStackX:
.82a7	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.82aa	48		pha				pha 								; it is slightly inefficient, just in cases.
.82ab	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.82ae	fa		plx				plx
.82af	20 a1 94	jsr $94a1			jsr 	MemoryTransferAX 			; transfer to line number AX.
.82b2	4c a9 83	jmp $83a9			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.82b5					IfCommand:
.82b5	a2 00		ldx #$00			ldx 	#0 							; If what.
.82b7	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber
.82ba	b1 30		lda ($30),y			lda 	(codePtr),y
.82bc	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.82be	d0 0a		bne $82ca			bne 	_IFStructured
.82c0	c8		iny				iny 								; consume THEN
.82c1	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; is it zero
.82c4	f0 01		beq $82c7			beq 	_IfFail 					; if fail, go to next line
.82c6	60		rts				rts 								; if THEN just continue
.82c7					_IfFail:
.82c7	4c f3 83	jmp $83f3			jmp 	EOLCommand
.82ca					_IfStructured:
.82ca	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; is it zero
.82cd	d0 07		bne $82d6			bne 	_IfExit 					; if not, then continue normally.
.82cf	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.82d1	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.82d3	20 0b 84	jsr $840b			jsr 	ScanForward 				; and run from there/
.82d6					_IfExit:
.82d6	60		rts				rts
.82d7					ElseCode:
.82d7	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.82d9	aa		tax				tax 								; so just go to the structure exit
.82da	20 0b 84	jsr $840b			jsr 	ScanForward
.82dd	60		rts				rts
.82de					EndIf:
.82de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.82df					LetCommand:
.82df	a2 00		ldx #$00			ldx 	#0
.82e1	ad 7e 88	lda $887e			lda 	PrecedenceLevel+"*"			; precedence > this
.82e4	20 98 88	jsr $8898			jsr 	EvaluateExpressionAtPrecedence
.82e7	a9 3d		lda #$3d			lda 	#"=" 						; check =
.82e9	20 e3 94	jsr $94e3			jsr 	CheckNextA
.82ec	e8		inx				inx 								; RHS
.82ed	20 86 8e	jsr $8e86			jsr 	EvaluateValue
.82f0	ca		dex				dex
.82f1	20 f5 82	jsr $82f5			jsr 	AssignVariable
.82f4	60		rts				rts
.82f5					AssignVariable:
.82f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.82f8	48		pha				pha 								; save a copy
.82f9	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.82fc	29 10		and #$10			and 	#NSBIsString
.82fe	d0 0b		bne $830b			bne 	_ASError
.8300	68		pla				pla 								; get back
.8301	29 10		and #$10			and 	#NSBIsString 				; check type
.8303	d0 03		bne $8308			bne 	_ASString
.8305	4c d3 88	jmp $88d3			jmp 	AssignNumber
.8308					_ASString:
.8308	4c 41 89	jmp $8941			jmp 	AssignString
.830b					_ASError:
.830b	4c ad 99	jmp $99ad			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.830e					NewCommand:
.830e	20 50 94	jsr $9450			jsr 	MemoryNew
.8311	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8314	20 34 81	jsr $8134			jsr 	ClearCommand 				; clear everything.
.8317	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8318					Command_Print:
.8318	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8319					_CPLoop:
.8319	08		php				php 								; save last action flag
.831a	b1 30		lda ($30),y			lda 	(codePtr),y
.831c	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.831e	f0 46		beq $8366			beq 	_CPExit
.8320	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8322	f0 42		beq $8366			beq 	_CPExit
.8324	68		pla				pla 								; throw last action flag
.8325	b1 30		lda ($30),y			lda 	(codePtr),y
.8327	c8		iny				iny
.8328	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.832a	f0 37		beq $8363			beq 	_CPContinueWithSameLine
.832c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.832e	f0 2e		beq $835e			beq 	_CPTab
.8330	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8332	f0 26		beq $835a			beq 	_CPNewLine
.8334	88		dey				dey 								; undo the get.
.8335	a2 00		ldx #$00			ldx 	#0
.8337	20 86 8e	jsr $8e86			jsr 	EvaluateValue 				; get a value into slot 0
.833a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.833d	29 10		and #$10			and 	#NSBIsString
.833f	f0 0b		beq $834c			beq 	_CPNumber
.8341	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8344	ad 08 06	lda $0608			lda 	NSMantissa0
.8347	20 e6 84	jsr $84e6			jsr 	PrintStringXA
.834a	80 cc		bra $8318			bra 	Command_Print 				; loop round clearing carry so NL if end
.834c					_CPNumber:
.834c	a9 05		lda #$05			lda 	#5 							; maximum decimals
.834e	20 5c 8d	jsr $8d5c			jsr 	ConvertNumberToString 		; convert to string
.8351	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8353	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8355	20 e6 84	jsr $84e6			jsr 	PrintStringXA
.8358	80 be		bra $8318			bra 	Command_Print 				; loop round clearing carry so NL if end
.835a					_CPNewLine:
.835a	a9 0d		lda #$0d			lda 	#13
.835c	80 02		bra $8360			bra 	_CPPrintChar
.835e					_CPTab:
.835e	a9 09		lda #$09			lda 	#9 							; print TAB
.8360					_CPPrintChar:
.8360	20 c0 9b	jsr $9bc0			jsr 	EXTPrintCharacter
.8363					_CPContinueWithSameLine:
.8363	38		sec				sec 								; loop round with carry set, which
.8364	80 b3		bra $8319			bra 	_CPLoop 					; will inhibit final CR
.8366					_CPExit:
.8366	28		plp				plp 								; get last action flag
.8367	b0 05		bcs $836e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8369	a9 0d		lda #$0d			lda 	#13 						; print new line
.836b	20 c0 9b	jsr $9bc0			jsr 	EXTPrintCharacter
.836e					_CPExit2:
.836e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.836f					RemCommand:
.836f	b1 30		lda ($30),y			lda 	(codePtr),y
.8371	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8373	d0 06		bne $837b			bne 	_RMExit
.8375	c8		iny				iny
.8376	98		tya				tya
.8377	38		sec				sec
.8378	71 30		adc ($30),y			adc 	(codePtr),y
.837a	a8		tay				tay
.837b					_RMExit:
.837b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.837c					Command_REPEAT:
.837c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.837e	20 78 8f	jsr $8f78			jsr 	StackOpen
.8381	20 aa 8f	jsr $8faa			jsr 	STKSaveCodePosition 		; save loop position
.8384	60		rts				rts
.8385					Command_UNTIL:
.8385	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8387	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8389	20 9f 8f	jsr $8f9f			jsr 	StackCheckFrame
.838c	a2 00		ldx #$00			ldx 	#0
.838e	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber 				; work out the number
.8391	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; check if zero
.8394	f0 04		beq $839a			beq 	_CULoopBack 				; if so keep looping
.8396	20 91 8f	jsr $8f91			jsr 	StackClose		 			; return
.8399	60		rts				rts
.839a					_CULoopBack:
.839a	20 bb 8f	jsr $8fbb			jsr 	STKLoadCodePosition 		; loop back
.839d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.839e					CommandRUN:
.839e	20 34 81	jsr $8134			jsr 	ClearCommand 				; clear variable/stacks/etc.
.83a1	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.83a3	85 30		sta $30				sta 	codePtr
.83a5	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.83a7	85 31		sta $31				sta 	codePtr+1
.83a9					RUNNewLine:
.83a9	b2 30		lda ($30)			lda 	(codePtr)
.83ab	f0 43		beq $83f0			beq 	CRNoProgram         		; no then END.
.83ad	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.83af	9a		txs				txs
.83b0					RUNCodePointerLine:
.83b0	a0 02		ldy #$02			ldy 	#2 							; start of program
.83b2					_CRIncMainLoop:
.83b2	c8		iny				iny
.83b3					_CRMainLoop:
.83b3	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.83b6	b1 30		lda ($30),y			lda 	(codePtr),y
.83b8	10 10		bpl $83ca			bpl 	_CRNotKeyword
.83ba	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.83bc	b0 04		bcs $83c2			bcs 	_CRIsKeyword
.83be	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.83c0	b0 28		bcs $83ea			bcs		_CRSyntaxError
.83c2					_CRIsKeyword:
.83c2	c8		iny				iny 								; consume command
.83c3	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.83c4	aa		tax				tax 								; put in X for vector jump
.83c5	20 ed 83	jsr $83ed			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.83c8	80 e9		bra $83b3			bra 	_CRMainLoop 				; and loop round
.83ca					_CRNotKeyword:
.83ca	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.83cc	f0 e4		beq $83b2			beq 	_CRIncMainLoop
.83ce	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.83d0	90 05		bcc $83d7			bcc 	_CRNotVariable
.83d2					_CRGoLet:
.83d2	20 df 82	jsr $82df			jsr 	LetCommand
.83d5	80 dc		bra $83b3			bra 	_CRMainLoop
.83d7					_CRNotVariable:
.83d7	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.83d9	f0 f7		beq $83d2			beq 	_CRGoLet
.83db	c9 21		cmp #$21			cmp 	#KWD_PLING
.83dd	f0 f3		beq $83d2			beq 	_CRGoLet
.83df	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.83e1	f0 01		beq $83e4			beq 	_CRGoRem
>83e3	db						.byte 	$DB 						; causes a break in the emulator
.83e4					_CRGoRem:
.83e4	c8		iny				iny
.83e5	20 6f 83	jsr $836f			jsr 	RemCommand
.83e8	80 c9		bra $83b3			bra 	_CRMainLoop
.83ea					_CRSyntaxError:
.83ea	4c a3 99	jmp $99a3			jmp 	SyntaxError
.83ed					_CRCallVector0:
.83ed	7c 9c 80	jmp ($809c,x)			jmp 	(VectorSet0,x)
.83f0					CRNoProgram:
.83f0	4c 6e 81	jmp $816e			jmp 	EndCommand
.83f3					EOLCommand:
.83f3	18		clc				clc
.83f4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.83f6	65 30		adc $30				adc 	codePtr
.83f8	85 30		sta $30				sta 	codePtr
.83fa	90 02		bcc $83fe			bcc 	_CREExit
.83fc	e6 31		inc $31				inc 	codePtr+1
.83fe					_CREExit:
.83fe	80 a9		bra $83a9			bra 	RunNewLine
.8400					Shift1Command:
.8400	b1 30		lda ($30),y			lda 	(codePtr),y
.8402	c8		iny				iny
.8403	0a		asl a				asl 	a
.8404	aa		tax				tax
.8405	7c fa 80	jmp ($80fa,x)			jmp 	(VectorSet1,x)
.8408					Unused1:
.8408					Unused2:
.8408					Unused3:
.8408	4c a3 99	jmp $99a3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.840b					ScanForward:
.840b	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.840d	86 37		stx $37				stx 	zTemp0+1
.840f	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8411					_ScanLoop:
.8411	b1 30		lda ($30),y			lda 	(codePtr),y
.8413	c8		iny				iny
.8414	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8416	d0 09		bne $8421			bne 	_ScanGoNext
.8418	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.841a	f0 04		beq $8420			beq 	_ScanMatch
.841c	c5 37		cmp $37				cmp 	zTemp0+1
.841e	d0 01		bne $8421			bne 	_ScanGoNext
.8420					_ScanMatch:
.8420	60		rts				rts
.8421					_ScanGoNext:
.8421	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8423	90 ec		bcc $8411			bcc 	_ScanLoop
.8425	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8427	90 18		bcc $8441			bcc 	_ScanSkipOne
.8429	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.842b	b0 2f		bcs $845c			bcs 	_ScanSkipData
.842d	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.842f	90 e0		bcc $8411			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8431	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8433	b0 dc		bcs $8411			bcs 	_ScanLoop
.8435	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8437	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8439	b0 d6		bcs $8411			bcs 	_ScanLoop
.843b	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.843d	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.843f	80 d0		bra $8411			bra 	_ScanLoop
.8441					_ScanSkipOne:
.8441	c8		iny				iny 								; consume the extra one.
.8442	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8444	d0 cb		bne $8411			bne 	_ScanLoop
.8446	18		clc				clc
.8447	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8449	65 30		adc $30				adc 	codePtr
.844b	85 30		sta $30				sta 	codePtr
.844d	90 02		bcc $8451			bcc 	_CREExit
.844f	e6 31		inc $31				inc 	codePtr+1
.8451					_CREExit:
.8451	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8453	b2 30		lda ($30)			lda 	(codePtr)
.8455	d0 ba		bne $8411			bne 	_ScanLoop 					; if not zero, more to scan
.8457	a9 13		lda #$13		lda	#19
.8459	4c 94 84	jmp $8494		jmp	ErrorHandler
.845c					_ScanSkipData:
.845c	88		dey				dey 								; point at data token
.845d	c8		iny				iny
.845e	98		tya				tya
.845f	38		sec				sec
.8460	71 30		adc ($30),y			adc 	(codePtr),y
.8462	a8		tay				tay
.8463	80 ac		bra $8411			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8465					Command_WHILE:
.8465	5a		phy				phy 								; save position of the test
.8466	a2 00		ldx #$00			ldx 	#0
.8468	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber 				; work out the number
.846b	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; check if zero
.846e	f0 0e		beq $847e			beq 	_WHExitLoop 				; if so exit the loop
.8470	98		tya				tya 								; position *after* test.
.8471	7a		ply				ply 								; restore position before test, at WHILE
.8472	88		dey				dey
.8473	48		pha				pha 								; push after test on the stack
.8474	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8476	20 78 8f	jsr $8f78			jsr 	StackOpen
.8479	20 aa 8f	jsr $8faa			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.847c	7a		ply				ply 								; restore the position *after* the test
.847d	60		rts				rts
.847e					_WHExitLoop:
.847e	68		pla				pla 								; throw post loop position
.847f	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8481	aa		tax				tax
.8482	20 0b 84	jsr $840b			jsr 	ScanForward
.8485	60		rts				rts
.8486					Command_WEND:
.8486	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8488	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.848a	20 9f 8f	jsr $8f9f			jsr 	StackCheckFrame
.848d	20 bb 8f	jsr $8fbb			jsr 	STKLoadCodePosition 		; loop back
.8490	20 91 8f	jsr $8f91			jsr 	StackClose		 			; erase the frame
.8493	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.94d3					CheckRightBracket:
.94d3	b1 30		lda ($30),y			lda 	(codePtr),y
.94d5	c8		iny				iny
.94d6	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.94d8	d0 0f		bne $94e9			bne 	CNAFail
.94da	60		rts				rts
.94db					CheckComma:
.94db	b1 30		lda ($30),y			lda 	(codePtr),y
.94dd	c8		iny				iny
.94de	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.94e0	d0 07		bne $94e9			bne 	CNAFail
.94e2	60		rts				rts
.94e3					CheckNextA:
.94e3	d1 30		cmp ($30),y			cmp 	(codePtr),y
.94e5	d0 02		bne $94e9			bne 	CNAFail
.94e7	c8		iny				iny 								; skip character
.94e8	60		rts				rts 								; and exit
.94e9					CNAFail:
.94e9	4c a3 99	jmp $99a3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8494					ErrorHandler:
.8494	a8		tay				tay 								; find the error text
.8495	f0 42		beq $84d9			beq 	_EHEnd
.8497	a2 00		ldx #$00			ldx 	#0
.8499					_EHFind:
.8499	88		dey				dey 								; found the error text ?
.849a	f0 0a		beq $84a6			beq 	_EHFound
.849c					_EHFindZero:
.849c	bd bc 99	lda $99bc,x			lda 	ErrorText,x 				; find the next error
.849f	e8		inx				inx
.84a0	c9 00		cmp #$00			cmp 	#0
.84a2	d0 f8		bne $849c			bne 	_EHFindZero
.84a4	80 f3		bra $8499			bra 	_EHFind
.84a6					_EHFound:
.84a6	bd bc 99	lda $99bc,x			lda 	ErrorText,x 				; print the message
.84a9	20 c0 9b	jsr $9bc0			jsr 	EXTPrintCharacter
.84ac	e8		inx				inx
.84ad	bd bc 99	lda $99bc,x			lda 	ErrorText,x
.84b0	d0 f4		bne $84a6			bne 	_EHFound
.84b2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.84b4	b1 30		lda ($30),y			lda 	(codePtr),y
.84b6	d0 05		bne $84bd			bne 	_EHAtMsg
.84b8	c8		iny				iny
.84b9	b1 30		lda ($30),y			lda 	(codePtr),y
.84bb	f0 17		beq $84d4			beq 	_EHCREnd
.84bd					_EHAtMsg:
.84bd	a2 84		ldx #$84			ldx 	#_AtMsg >> 8 				; print " at "
.84bf	a9 dc		lda #$dc			lda 	#_AtMsg & $FF
.84c1	20 e6 84	jsr $84e6			jsr 	PrintStringXA
.84c4	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.84c6	b1 30		lda ($30),y			lda 	(codePtr),y
.84c8	48		pha				pha
.84c9	c8		iny				iny
.84ca	b1 30		lda ($30),y			lda 	(codePtr),y
.84cc	aa		tax				tax
.84cd	68		pla				pla
.84ce	20 2f 96	jsr $962f			jsr 	ConvertInt16 				; convert XA to string
.84d1	20 e6 84	jsr $84e6			jsr 	PrintStringXA 				; and print it.
.84d4					_EHCREnd:
.84d4	a9 0d		lda #$0d			lda 	#13 						; new line
.84d6	20 c0 9b	jsr $9bc0			jsr 	EXTPrintCharacter
.84d9					_EHEnd:
.84d9	4c 15 80	jmp $8015			jmp 	WarmStart
>84dc	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>84e4	20 00
.84e6					PrintStringXA:
.84e6	5a		phy				phy
.84e7	86 37		stx $37				stx 	zTemp0+1
.84e9	85 36		sta $36				sta 	zTemp0
.84eb	a0 00		ldy #$00			ldy 	#0
.84ed					_PSXALoop:
.84ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.84ef	f0 06		beq $84f7			beq 	_PSXAExit
.84f1	20 c0 9b	jsr $9bc0			jsr 	EXTPrintCharacter
.84f4	c8		iny				iny
.84f5	80 f6		bra $84ed			bra 	_PSXALoop
.84f7					_PSXAExit:
.84f7	7a		ply				ply
.84f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.84f9					UnaryTrue:
.84f9	fa		plx				plx
.84fa					ReturnTrue:
.84fa	a9 01		lda #$01			lda 	#1  						; set to 1
.84fc	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.84ff	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8501	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8504	60		rts				rts
.8505					UnaryFalse:
.8505	fa		plx				plx
.8506					ReturnFalse:
.8506	4c 3b 8f	jmp $8f3b			jmp 	NSMSetZero 					; set it all to zero
.8509					BinaryCompareEqual:
.8509	fa		plx				plx
.850a	20 45 85	jsr $8545			jsr 	CompareBaseCode
.850d	c9 00		cmp #$00			cmp 	#0
.850f	f0 e9		beq $84fa			beq 	ReturnTrue
.8511	80 f3		bra $8506			bra 	ReturnFalse
.8513					BinaryCompareLess:
.8513	fa		plx				plx
.8514	20 45 85	jsr $8545			jsr 	CompareBaseCode
.8517	c9 ff		cmp #$ff			cmp 	#$FF
.8519	f0 df		beq $84fa			beq 	ReturnTrue
.851b	80 e9		bra $8506			bra 	ReturnFalse
.851d					BinaryCompareGreater:
.851d	fa		plx				plx
.851e	20 45 85	jsr $8545			jsr 	CompareBaseCode
.8521	c9 01		cmp #$01			cmp 	#1
.8523	f0 d5		beq $84fa			beq 	ReturnTrue
.8525	80 df		bra $8506			bra 	ReturnFalse
.8527					BinaryCompareNotEqual:
.8527	fa		plx				plx
.8528	20 45 85	jsr $8545			jsr 	CompareBaseCode
.852b	c9 00		cmp #$00			cmp 	#0
.852d	d0 cb		bne $84fa			bne 	ReturnTrue
.852f	80 d5		bra $8506			bra 	ReturnFalse
.8531					BinaryCompareLessEqual:
.8531	fa		plx				plx
.8532	20 45 85	jsr $8545			jsr 	CompareBaseCode
.8535	c9 01		cmp #$01			cmp 	#1
.8537	d0 c1		bne $84fa			bne 	ReturnTrue
.8539	80 cb		bra $8506			bra 	ReturnFalse
.853b					BinaryCompareGreaterEqual:
.853b	fa		plx				plx
.853c	20 45 85	jsr $8545			jsr 	CompareBaseCode
.853f	c9 ff		cmp #$ff			cmp 	#$FF
.8541	d0 b7		bne $84fa			bne 	ReturnTrue
.8543	80 c1		bra $8506			bra 	ReturnFalse
.8545					CompareBaseCode:
.8545	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; make both values if references.
.8548	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.854b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.854e	29 10		and #$10			and 	#NSTString
.8550	d0 40		bne $8592			bne 	_CBCString
.8552	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8555	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8558	d0 3b		bne $8595			bne 	_CBCFloat
.855a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.855d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8560	29 08		and #$08			and 	#NSTFloat
.8562	d0 31		bne $8595			bne 	_CBCFloat
.8564	20 98 85	jsr $8598			jsr 	CompareFixMinusZero
.8567	e8		inx				inx
.8568	20 98 85	jsr $8598			jsr 	CompareFixMinusZero
.856b	ca		dex				dex
.856c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.856f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8572	10 0b		bpl $857f			bpl 	_CDCSameSign
.8574	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8577	30 16		bmi $858f			bmi 	_CBCLess 					; return $FF
.8579					_CBCGreater:
.8579	a9 01		lda #$01			lda 	#1
.857b	60		rts				rts
.857c					_CBCEqual:
.857c	a9 00		lda #$00			lda 	#0
.857e	60		rts				rts
.857f					_CDCSameSign:
.857f	20 a8 86	jsr $86a8			jsr 	SubTopTwoStack 				; unsigned subtract
.8582	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; or the mantissa together
.8585	f0 f5		beq $857c			beq 	_CBCEqual 					; -0 == 0
.8587	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.858a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.858d	10 ea		bpl $8579			bpl 	_CBCGreater
.858f					_CBCLess:
.858f	a9 ff		lda #$ff			lda 	#$FF
.8591	60		rts				rts
.8592					_CBCString:
.8592	4c fe 85	jmp $85fe			jmp 	CompareStrings
.8595					_CBCFloat:
.8595	4c 2b 97	jmp $972b			jmp 	CompareFloat
.8598					CompareFixMinusZero:
.8598	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero
.859b	d0 03		bne $85a0			bne 	_CFXMZNotZero
.859d	9e 00 06	stz $0600,x			stz 	NSStatus,x
.85a0					_CFXMZNotZero:
.85a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.85a1					StringConcat:
.85a1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.85a4	3d 01 06	and $0601,x			and 	NSStatus+1,x
.85a7	29 18		and #$18			and 	#NSBTypeMask
.85a9	c9 10		cmp #$10			cmp 	#NSTString
.85ab	d0 4e		bne $85fb			bne		_SCType
.85ad	64 38		stz $38				stz 	zTemp1 						; counting total length
.85af	e8		inx				inx
.85b0	20 ce 85	jsr $85ce			jsr 	_SCSetupZ0 					; setup for second
.85b3	20 d9 85	jsr $85d9			jsr 	_SCLengthZ0 				; length for second
.85b6	ca		dex				dex
.85b7	20 ce 85	jsr $85ce			jsr 	_SCSetupZ0 					; setup for first
.85ba	20 d9 85	jsr $85d9			jsr 	_SCLengthZ0 				; length for first
.85bd	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.85bf	20 57 9b	jsr $9b57			jsr 	StringTempAllocate
.85c2	20 ec 85	jsr $85ec			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.85c5	e8		inx				inx
.85c6	20 ce 85	jsr $85ce			jsr 	_SCSetupZ0 					; copy second out
.85c9	20 ec 85	jsr $85ec			jsr 	_SCCopy
.85cc	ca		dex				dex
.85cd	60		rts				rts
.85ce					_SCSetupZ0:
.85ce	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.85d1	85 36		sta $36				sta 	zTemp0
.85d3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85d6	85 37		sta $37				sta 	zTemp0+1
.85d8	60		rts				rts
.85d9					_SCLengthZ0:
.85d9	5a		phy				phy
.85da	a0 00		ldy #$00			ldy 	#0
.85dc					_SCLenLoop:
.85dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.85de	f0 0a		beq $85ea			beq 	_SCLExit
.85e0	c8		iny				iny
.85e1	e6 38		inc $38				inc 	zTemp1
.85e3	10 f7		bpl $85dc			bpl		_SCLenLoop
.85e5	a9 09		lda #$09		lda	#9
.85e7	4c 94 84	jmp $8494		jmp	ErrorHandler
.85ea					_SCLExit:
.85ea	7a		ply				ply
.85eb	60		rts				rts
.85ec					_SCCopy:
.85ec	5a		phy				phy
.85ed	a0 00		ldy #$00			ldy 	#0
.85ef					_SCCopyLoop:
.85ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.85f1	f0 06		beq $85f9			beq 	_SCCExit
.85f3	20 95 9b	jsr $9b95			jsr 	StringTempWrite
.85f6	c8		iny				iny
.85f7	80 f6		bra $85ef			bra 	_SCCopyLoop
.85f9					_SCCExit:
.85f9	7a		ply				ply
.85fa	60		rts				rts
.85fb					_SCType:
.85fb	4c ad 99	jmp $99ad			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.94ec					IntegerDivide:
.94ec	fa		plx				plx
.94ed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.94f0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.94f3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f4	0a		asl a				asl 	a
.94f5	10 05		bpl $94fc			bpl 	_NotRef
.94f7	48		pha				pha
.94f8	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94fb	68		pla				pla
.94fc					_NotRef:
.94fc	0a		asl a				asl 	a
.94fd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94ff	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9502	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9505	f0 03		beq $950a			beq 	_IntegerCode 				; if clear, then we have two integers
.9507	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.950a					_IntegerCode:
.950a	20 2c 95	jsr $952c			jsr 	CheckDivideZero 			; do div zero check
.950d	20 64 95	jsr $9564			jsr 	Int32Divide 				; do the division
.9510	20 21 96	jsr $9621			jsr 	CalculateSign 				; calculate result sign
.9513					NSMCopyPlusTwoToZero:
.9513	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9516	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9519	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.951c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.951f	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9522	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9525	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9528	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.952b	60		rts				rts
.952c					CheckDivideZero:
.952c	e8		inx				inx
.952d	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero
.9530	f0 02		beq $9534			beq 	_CDVError
.9532	ca		dex				dex
.9533	60		rts				rts
.9534					_CDVError:
.9534	a9 03		lda #$03		lda	#3
.9536	4c 94 84	jmp $8494		jmp	ErrorHandler
.9539					IntegerModulus:
.9539	fa		plx				plx
.953a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.953d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9540	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9541	0a		asl a				asl 	a
.9542	10 05		bpl $9549			bpl 	_NotRef
.9544	48		pha				pha
.9545	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9548	68		pla				pla
.9549					_NotRef:
.9549	0a		asl a				asl 	a
.954a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.954c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.954f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9552	f0 03		beq $9557			beq 	_IntegerCode 				; if clear, then we have two integers
.9554	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.9557					_IntegerCode:
.9557	20 2c 95	jsr $952c			jsr 	CheckDivideZero 			; do div zero check
.955a	20 64 95	jsr $9564			jsr 	Int32Divide 				; do the division
.955d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9560	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9563	60		rts				rts
.9564					Int32Divide:
.9564	48		pha				pha 								; save AXY
.9565	5a		phy				phy
.9566	20 12 8f	jsr $8f12			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9569	20 37 8f	jsr $8f37			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.956c	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.956e					_I32DivideLoop:
.956e	e8		inx				inx
.956f	e8		inx				inx
.9570	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9573	ca		dex				dex
.9574	ca		dex				dex
.9575	20 51 8f	jsr $8f51			jsr 	NSMRotateLeft
.9578	20 a4 95	jsr $95a4			jsr 	DivideCheckSubtract 		; check if subtract possible
.957b	90 03		bcc $9580			bcc 	_I32DivideNoCarryIn
.957d	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9580					_I32DivideNoCarryIn:
.9580	88		dey				dey 								; loop round till division completed.
.9581	d0 eb		bne $956e			bne 	_I32DivideLoop
.9583	7a		ply				ply 								; restore AXY and exit
.9584	68		pla				pla
.9585	60		rts				rts
.9586					Int32ShiftDivide:
.9586	48		pha				pha 								; save AY
.9587	5a		phy				phy
.9588	e8		inx				inx 								; clear S[X+2]
.9589	e8		inx				inx
.958a	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero
.958d	ca		dex				dex
.958e	ca		dex				dex
.958f	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9591					_I32SDLoop:
.9591	20 a4 95	jsr $95a4			jsr 	DivideCheckSubtract 		; check if subtract possible
.9594	e8		inx				inx
.9595	e8		inx				inx
.9596	20 51 8f	jsr $8f51			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9599	ca		dex				dex
.959a	ca		dex				dex
.959b	20 51 8f	jsr $8f51			jsr 	NSMRotateLeft
.959e	88		dey				dey 	 							; do 31 times
.959f	d0 f0		bne $9591			bne 	_I32SDLoop
.95a1	7a		ply				ply 								; restore AY and exit
.95a2	68		pla				pla
.95a3	60		rts				rts
.95a4					DivideCheckSubtract:
.95a4	20 a8 86	jsr $86a8			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.95a7	b0 04		bcs $95ad			bcs 	_DCSExit 					; if carry set, then could do, exit
.95a9	20 82 86	jsr $8682			jsr 	AddTopTwoStack 				; add it back in
.95ac	18		clc				clc 								; and return False
.95ad					_DCSExit:
.95ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95ae					MulInteger:
.95ae	fa		plx				plx
.95af	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.95b2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.95b5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95b6	0a		asl a				asl 	a
.95b7	10 05		bpl $95be			bpl 	_NotRef
.95b9	48		pha				pha
.95ba	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95bd	68		pla				pla
.95be					_NotRef:
.95be	0a		asl a				asl 	a 							; put MSB of type into A:7
.95bf	30 0b		bmi $95cc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95c1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95c4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95c7	f0 06		beq $95cf			beq 	_IntegerCode 				; if clear, then we have two integers
.95c9	4c 02 98	jmp $9802			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95cc					_StringData:
.95cc	4c b7 99	jmp $99b7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95cf					_IntegerCode:
.95cf	20 dc 95	jsr $95dc			jsr 	MultiplyShort
.95d2	c9 00		cmp #$00			cmp 	#0
.95d4	f0 05		beq $95db			beq 	_MIExit
.95d6	a9 04		lda #$04		lda	#4
.95d8	4c 94 84	jmp $8494		jmp	ErrorHandler
.95db					_MIExit:
.95db	60		rts				rts
.95dc					MultiplyShort:
.95dc	5a		phy				phy 								; save Y
.95dd	20 12 8f	jsr $8f12			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95e0	20 37 8f	jsr $8f37			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95e3	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95e5					_I32MLoop:
.95e5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95e8	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.95eb	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.95ee	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.95f1	f0 28		beq $961b			beq 	_I32MExit 					; exit if zero
.95f3	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.95f6	29 01		and #$01			and 	#1
.95f8	f0 0e		beq $9608			beq 	_I32MNoAdd
.95fa	20 82 86	jsr $8682			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.95fd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9600	10 06		bpl $9608			bpl 	_I32MNoAdd
.9602					_I32ShiftRight:
.9602	20 5e 8f	jsr $8f5e			jsr 	NSMShiftRight 				; shift S[X] right
.9605	c8		iny				iny 								; increment shift count
.9606	80 0a		bra $9612			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9608					_I32MNoAdd:
.9608	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.960b	70 f5		bvs $9602			bvs 	_I32ShiftRight 				; instead.
.960d	e8		inx				inx
.960e	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9611	ca		dex				dex
.9612					_I32MShiftUpper:
.9612	e8		inx				inx 								; shift S[X+2] right
.9613	e8		inx				inx
.9614	20 5e 8f	jsr $8f5e			jsr 	NSMShiftRight
.9617	ca		dex				dex
.9618	ca		dex				dex
.9619	80 ca		bra $95e5			bra 	_I32MLoop 					; try again.
.961b					_I32MExit:
.961b	20 21 96	jsr $9621			jsr 	CalculateSign
.961e	98		tya				tya 								; shift in A
.961f	7a		ply				ply 								; restore Y and exit
.9620	60		rts				rts
.9621					CalculateSign:
.9621	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9624	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9627	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.962a	0a		asl a				asl 	a 							; shift bit 7 into carry
.962b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.962e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.85fe					CompareStrings:
.85fe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8601	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8604	29 10		and #$10			and 	#NSBIsString
.8606	f0 2c		beq $8634			beq 	_CSTypeError
.8608	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.860b	85 36		sta $36				sta 	zTemp0
.860d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8610	85 37		sta $37				sta 	zTemp0+1
.8612	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8615	85 38		sta $38				sta 	zTemp1
.8617	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.861a	85 39		sta $39				sta 	zTemp1+1
.861c	5a		phy				phy 								; save Y so we can access strings
.861d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.861f					_CSLoop:
.861f	c8		iny				iny
.8620	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8622	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8624	d0 06		bne $862c			bne 	_CSDifferent
.8626	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8628	d0 f5		bne $861f			bne 	_CSLoop 					; still comparing
.862a					_CSExit:
.862a	7a		ply				ply 								; reached end, return zero in A from EOS
.862b	60		rts				rts
.862c					_CSDifferent:
.862c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.862e	90 fa		bcc $862a			bcc		_CSExit
.8630	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8632	80 f6		bra $862a			bra 	_CSExit
.8634					_CSTypeError:
.8634	4c ad 99	jmp $99ad			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8637					ShiftLeft:
.8637	38		sec				sec
.8638	80 01		bra $863b			bra 	ShiftMain
.863a					ShiftRight:
.863a	18		clc				clc
.863b					ShiftMain:
.863b	fa		plx				plx 								; restore X
.863c	08		php				php 								; save direction
.863d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8640	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8643	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8644	0a		asl a				asl 	a
.8645	10 05		bpl $864c			bpl 	_NotRef
.8647	48		pha				pha
.8648	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.864b	68		pla				pla
.864c					_NotRef:
.864c	0a		asl a				asl 	a
.864d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.864f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8652	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8655	f0 03		beq $865a			beq 	_IntegerCode 				; if clear, then we have two integers
.8657	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.865a					_IntegerCode:
.865a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.865d	29 e0		and #$e0			and 	#$E0
.865f	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8662	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8665	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8668	d0 13		bne $867d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.866a					_SMLoop:
.866a	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.866d	30 11		bmi $8680			bmi 	_SMExit 					; exit if done.
.866f	28		plp				plp 								; restore direcition setting
.8670	08		php				php
.8671	90 05		bcc $8678			bcc 	_SMRight
.8673	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; shift left if CS
.8676	80 f2		bra $866a			bra 	_SMLoop
.8678					_SMRight:
.8678	20 5e 8f	jsr $8f5e			jsr 	NSMShiftRight 				; shift right if CC
.867b	80 ed		bra $866a			bra 	_SMLoop
.867d					_SMExit0:
.867d	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero 					; return zero.
.8680					_SMExit:
.8680	28		plp				plp 								; throw direction
.8681	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8682					AddTopTwoStack:
.8682	18		clc				clc
.8683	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8686	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8689	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.868c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.868f	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8692	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8695	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8698	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.869b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.869e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.86a1	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.86a4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86a7	60		rts				rts
.86a8					SubTopTwoStack:
.86a8	38		sec				sec
.86a9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.86ac	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.86af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86b2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.86b5	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.86b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86bb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.86be	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.86c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86c4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.86c7	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.86ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86cd	60		rts				rts
.86ce					AddInteger:
.86ce	fa		plx				plx
.86cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86d2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86d5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86d6	0a		asl a				asl 	a
.86d7	10 05		bpl $86de			bpl 	_NotRef
.86d9	48		pha				pha
.86da	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86dd	68		pla				pla
.86de					_NotRef:
.86de	0a		asl a				asl 	a 							; put MSB of type into A:7
.86df	30 0b		bmi $86ec			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.86e1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86e4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86e7	f0 06		beq $86ef			beq 	_IntegerCode 				; if clear, then we have two integers
.86e9	4c 8a 96	jmp $968a			jmp 	FloatingPointAdd 							; otherwise at least one float.
.86ec					_StringData:
.86ec	4c a1 85	jmp $85a1			jmp 	StringConcat							; at least one string - don't know both are strings.
.86ef					_IntegerCode:
.86ef					AddCode:
.86ef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.86f2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86f5	10 8b		bpl $8682			bpl 	AddTopTwoStack
.86f7	20 a8 86	jsr $86a8			jsr 	SubTopTwoStack 				; do a physical subtraction
.86fa	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.86fd	10 09		bpl $8708			bpl 	_AddExit
.86ff	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8702	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8705	20 f0 8e	jsr $8ef0			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8708					_AddExit:
.8708	60		rts				rts
.8709					SubInteger:
.8709	fa		plx				plx
.870a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.870d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8710	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8711	0a		asl a				asl 	a
.8712	10 05		bpl $8719			bpl 	_NotRef
.8714	48		pha				pha
.8715	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8718	68		pla				pla
.8719					_NotRef:
.8719	0a		asl a				asl 	a 							; put MSB of type into A:7
.871a	30 0b		bmi $8727			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.871c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.871f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8722	f0 06		beq $872a			beq 	_IntegerCode 				; if clear, then we have two integers
.8724	4c 8f 96	jmp $968f			jmp 	FloatingPointSub 							; otherwise at least one float.
.8727					_StringData:
.8727	4c b7 99	jmp $99b7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.872a					_IntegerCode:
.872a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.872d	49 80		eor #$80			eor 	#$80
.872f	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8732	80 bb		bra $86ef			bra 	AddCode 					; and do the same code as add.
.8734					AndInteger:
.8734	fa		plx				plx
.8735	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8738	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.873b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.873c	0a		asl a				asl 	a
.873d	10 05		bpl $8744			bpl 	_NotRef
.873f	48		pha				pha
.8740	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8743	68		pla				pla
.8744					_NotRef:
.8744	0a		asl a				asl 	a
.8745	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8747	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.874a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.874d	f0 03		beq $8752			beq 	_IntegerCode 				; if clear, then we have two integers
.874f	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.8752					_IntegerCode:
.8752	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8755	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8758	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.875b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.875e	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8761	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8764	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8767	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.876a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.876d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8770	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8773	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8776	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8779	60		rts				rts
.877a					OraInteger:
.877a	fa		plx				plx
.877b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.877e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8781	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8782	0a		asl a				asl 	a
.8783	10 05		bpl $878a			bpl 	_NotRef
.8785	48		pha				pha
.8786	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8789	68		pla				pla
.878a					_NotRef:
.878a	0a		asl a				asl 	a
.878b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.878d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8790	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8793	f0 03		beq $8798			beq 	_IntegerCode 				; if clear, then we have two integers
.8795	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.8798					_IntegerCode:
.8798	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.879b	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.879e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87a1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87a4	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.87a7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87aa	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87ad	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.87b0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87b3	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87b6	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.87b9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87bc	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.87bf	60		rts				rts
.87c0					EorInteger:
.87c0	fa		plx				plx
.87c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87c4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87c7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87c8	0a		asl a				asl 	a
.87c9	10 05		bpl $87d0			bpl 	_NotRef
.87cb	48		pha				pha
.87cc	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87cf	68		pla				pla
.87d0					_NotRef:
.87d0	0a		asl a				asl 	a
.87d1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87d3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87d6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87d9	f0 03		beq $87de			beq 	_IntegerCode 				; if clear, then we have two integers
.87db	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.87de					_IntegerCode:
.87de	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87e1	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.87e4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87e7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87ea	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.87ed	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87f0	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87f3	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.87f6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87f9	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87fc	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.87ff	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8802	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8805	60		rts				rts
.8806					WordIndirect:
.8806	fa		plx				plx
.8807	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.880a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.880d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.880e	0a		asl a				asl 	a
.880f	10 05		bpl $8816			bpl 	_NotRef
.8811	48		pha				pha
.8812	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8815	68		pla				pla
.8816					_NotRef:
.8816	0a		asl a				asl 	a
.8817	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8819	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.881c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.881f	f0 03		beq $8824			beq 	_IntegerCode 				; if clear, then we have two integers
.8821	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.8824					_IntegerCode:
.8824	20 ef 86	jsr $86ef			jsr 	AddCode 					; add the two values
.8827	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8829	9d 00 06	sta $0600,x			sta 	NSStatus,x
.882c	60		rts				rts
.882d					ByteIndirect:
.882d	fa		plx				plx
.882e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8831	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8834	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8835	0a		asl a				asl 	a
.8836	10 05		bpl $883d			bpl 	_NotRef
.8838	48		pha				pha
.8839	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.883c	68		pla				pla
.883d					_NotRef:
.883d	0a		asl a				asl 	a
.883e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8840	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8843	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8846	f0 03		beq $884b			beq 	_IntegerCode 				; if clear, then we have two integers
.8848	4c ad 99	jmp $99ad			jmp 	TypeError 					; anything else, type mismatch.
.884b					_IntegerCode:
.884b	20 ef 86	jsr $86ef			jsr 	AddCode 					; add the two values
.884e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8850	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8853	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.962f					ConvertInt16:
.962f	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9632	8e 10 06	stx $0610			stx 	NSMantissa1
.9635	9c 18 06	stz $0618			stz 	NSMantissa2
.9638	9c 20 06	stz $0620			stz 	NSMantissa3
.963b	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.963e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9640	a9 0a		lda #$0a			lda 	#10 						; base
.9642	80 00		bra $9644			bra 	ConvertInt32
.9644					ConvertInt32:
.9644	5a		phy				phy
.9645	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9647	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.964a	10 08		bpl $9654			bpl 	_CI32NotNeg
.964c	48		pha				pha
.964d	a9 2d		lda #$2d			lda 	#'-'
.964f	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9652	c8		iny				iny
.9653	68		pla				pla
.9654					_CI32NotNeg:
.9654	20 62 96	jsr $9662			jsr 	_CI32DivideConvert 			; recursive conversion
.9657	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9659	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.965c	7a		ply				ply
.965d	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.965f	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9661	60		rts				rts
.9662					_CI32DivideConvert:
.9662	e8		inx				inx 								; write to next slot up
.9663	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.9666	ca		dex				dex
.9667	20 64 95	jsr $9564			jsr 	Int32Divide 				; divide
.966a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.966d	48		pha				pha
.966e	20 13 95	jsr $9513			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9671	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; is it zero ?
.9674	f0 06		beq $967c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9676	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9679	20 62 96	jsr $9662			jsr 	_CI32DivideConvert 			; and recusrively call.
.967c					_CI32NoRecurse:
.967c	68		pla				pla 								; remainder
.967d	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.967f	90 02		bcc $9683			bcc 	_CI32NotHex
.9681	69 26		adc #$26			adc 	#6+32
.9683					_CI32NotHex:
.9683	69 30		adc #$30			adc 	#48
.9685	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9688	c8		iny				iny
.9689	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8854					PrecedenceLevel:
>8854	04					.byte	 4	; $00 <<
>8855	02					.byte	 2	; $01 <=
>8856	02					.byte	 2	; $02 <>
>8857	00					.byte	 0	; $03 !!3
>8858	00					.byte	 0	; $04 ><
>8859	02					.byte	 2	; $05 >=
>885a	04					.byte	 4	; $06 >>
>885b	00					.byte	 0	; $07 !!7
>885c	00					.byte	 0	; $08 !!8
>885d	00					.byte	 0	; $09 !!9
>885e	00					.byte	 0	; $0a !!10
>885f	00					.byte	 0	; $0b !!11
>8860	00					.byte	 0	; $0c !!12
>8861	00					.byte	 0	; $0d !!13
>8862	00					.byte	 0	; $0e !!14
>8863	00					.byte	 0	; $0f !!15
>8864	00					.byte	 0	; $10 @
>8865	00					.byte	 0	; $11 !!17
>8866	00					.byte	 0	; $12 !!18
>8867	00					.byte	 0	; $13 [
>8868	04					.byte	 4	; $14 \
>8869	00					.byte	 0	; $15 ]
>886a	01					.byte	 1	; $16 ^
>886b	00					.byte	 0	; $17 _
>886c	00					.byte	 0	; $18 `
>886d	00					.byte	 0	; $19 !!25
>886e	00					.byte	 0	; $1a !!26
>886f	00					.byte	 0	; $1b {
>8870	01					.byte	 1	; $1c |
>8871	00					.byte	 0	; $1d }
>8872	00					.byte	 0	; $1e ~
>8873	00					.byte	 0	; $1f [7m<7F>[m
>8874	00					.byte	 0	; $20
>8875	05					.byte	 5	; $21 !
>8876	00					.byte	 0	; $22 "
>8877	00					.byte	 0	; $23 #
>8878	05					.byte	 5	; $24 $
>8879	04					.byte	 4	; $25 %
>887a	01					.byte	 1	; $26 &
>887b	00					.byte	 0	; $27 '
>887c	00					.byte	 0	; $28 (
>887d	00					.byte	 0	; $29 )
>887e	04					.byte	 4	; $2a *
>887f	03					.byte	 3	; $2b +
>8880	00					.byte	 0	; $2c ,
>8881	03					.byte	 3	; $2d -
>8882	00					.byte	 0	; $2e .
>8883	04					.byte	 4	; $2f /
>8884	00					.byte	 0	; $30 0
>8885	00					.byte	 0	; $31 1
>8886	00					.byte	 0	; $32 2
>8887	00					.byte	 0	; $33 3
>8888	00					.byte	 0	; $34 4
>8889	00					.byte	 0	; $35 5
>888a	00					.byte	 0	; $36 6
>888b	00					.byte	 0	; $37 7
>888c	00					.byte	 0	; $38 8
>888d	00					.byte	 0	; $39 9
>888e	00					.byte	 0	; $3a :
>888f	00					.byte	 0	; $3b ;
>8890	02					.byte	 2	; $3c <
>8891	02					.byte	 2	; $3d =
>8892	02					.byte	 2	; $3e >
>8893	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8894					EvaluateExpressionAt0:
.8894	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8896					EvaluateExpression:
.8896	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8898					EvaluateExpressionAtPrecedence:
.8898	48		pha				pha 								; save precedence level
.8899	20 67 8b	jsr $8b67			jsr 	EvaluateTerm 				; evaluate term into level X.
.889c	68		pla				pla 								; restore precedence level.
.889d					_EXPRLoop:
.889d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.889f	b1 30		lda ($30),y			lda 	(codePtr),y
.88a1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.88a3	b0 25		bcs $88ca			bcs 	_EXPRExit
.88a5	da		phx				phx 								; read the operator precedence
.88a6	aa		tax				tax
.88a7	bd 54 88	lda $8854,x			lda 	PrecedenceLevel,x
.88aa	fa		plx				plx
.88ab	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.88ad	f0 1b		beq $88ca			beq 	_EXPRExit
.88af	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.88b1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.88b3	c5 37		cmp $37				cmp 	zTemp0+1
.88b5	b0 13		bcs $88ca			bcs		_EXPRExit 					; if current >= operator exit
.88b7	48		pha				pha 								; save current precedence.
.88b8	b1 30		lda ($30),y			lda 	(codePtr),y
.88ba	c8		iny				iny
.88bb	48		pha				pha
.88bc	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.88be	e8		inx				inx 								; work out the right hand side.
.88bf	20 98 88	jsr $8898			jsr 	EvaluateExpressionAtPrecedence
.88c2	ca		dex				dex
.88c3	68		pla				pla 								; get operator, call the code.
.88c4	20 cd 88	jsr $88cd			jsr 	_EXPRCaller
.88c7	68		pla				pla 								; restore precedence level
.88c8	80 d3		bra $889d			bra 	_EXPRLoop 					; and go round.
.88ca					_EXPRExit:
.88ca	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.88cc	60		rts				rts
.88cd					_EXPRCaller:
.88cd	da		phx				phx 								; save on stack, first thing is to restore it
.88ce	0a		asl a				asl 	a 							; double so can use vectors into X
.88cf	aa		tax				tax
.88d0	7c 1c 80	jmp ($801c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.968a					FloatingPointAdd:
.968a	20 2b 98	jsr $982b			jsr 	FloatPrepare 				; prepare for floats
.968d	80 0b		bra $969a			bra 	FloatAdd
.968f					FloatingPointSub:
.968f	20 2b 98	jsr $982b			jsr 	FloatPrepare 				; prepare for floats
.9692					FloatSubtract:
.9692	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9695	49 80		eor #$80			eor 	#$80
.9697	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.969a					FloatAdd:
.969a	48		pha				pha
.969b	5a		phy				phy
.969c	20 3c 98	jsr $983c			jsr 	NSNormalise 				; normalise S[X]
.969f	f0 54		beq $96f5			beq 	_FAReturn1
.96a1	e8		inx				inx 								; normalise S[X+1]
.96a2	20 3c 98	jsr $983c			jsr 	NSNormalise
.96a5	ca		dex				dex
.96a6	c9 00		cmp #$00			cmp 	#0
.96a8	f0 6f		beq $9719			beq 	_FAExit 					; if so, just return A
.96aa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.96ad	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.96b0	f0 1b		beq $96cd			beq 	_FAExponentsEqual
.96b2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.96b5	a8		tay				tay
.96b6	38		sec				sec 								; do a signed comparison of the exponents.
.96b7	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.96ba	50 02		bvc $96be			bvc 	_FANoSignedChange
.96bc	49 80		eor #$80			eor 	#$80
.96be					_FANoSignedChange:
.96be	29 80		and #$80			and 	#$80
.96c0	10 03		bpl $96c5			bpl 	_FAHaveMax
.96c2	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.96c5					_FAHaveMax:
.96c5	20 1c 97	jsr $971c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.96c8	e8		inx				inx
.96c9	20 1c 97	jsr $971c			jsr 	_FAShiftToExponent
.96cc	ca		dex				dex
.96cd					_FAExponentsEqual:
.96cd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.96d0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.96d3	30 10		bmi $96e5			bmi 	_FADifferentSigns
.96d5	20 82 86	jsr $8682			jsr 	AddTopTwoStack 				; do the add of the mantissae
.96d8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.96db	10 3c		bpl $9719			bpl 	_FAExit 					; if no, we are done.
.96dd	20 5e 8f	jsr $8f5e			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.96e0	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.96e3	80 34		bra $9719			bra 	_FAExit
.96e5					_FADifferentSigns:
.96e5	20 a8 86	jsr $86a8			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.96e8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.96eb	10 2c		bpl $9719			bpl 	_FAExit 					; if no, we are done.
.96ed	20 e7 8e	jsr $8ee7			jsr 	NSMNegate 					; netate result
.96f0	20 f0 8e	jsr $8ef0			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.96f3	80 24		bra $9719			bra 	_FAExit
.96f5					_FAReturn1:
.96f5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.96f8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.96fb	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.96fe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9701	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9704	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9707	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.970a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.970d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9710	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9713	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9716	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9719					_FAExit:
.9719	7a		ply				ply
.971a	68		pla				pla
.971b	60		rts				rts
.971c					_FAShiftToExponent:
.971c					_FAShiftToExponent2:
.971c	98		tya				tya 								; compare Y to exponent
.971d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9720	f0 08		beq $972a			beq 	_FASEExit 					; exit if so.
.9722	20 5e 8f	jsr $8f5e			jsr 	NSMShiftRight	 			; shift the mantissa right
.9725	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9728	80 f2		bra $971c			bra 	_FAShiftToExponent2
.972a					_FASEExit:
.972a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.972b					CompareFloat:
.972b	20 92 96	jsr $9692			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.972e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9731	29 f8		and #$f8			and 	#$F8
.9733	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9736	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9739	f0 09		beq $9744			beq 	_FCExit 					; zero, so approximately identical
.973b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.973d	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9740	10 02		bpl $9744			bpl 	_FCExit
.9742					_FCNegative:
.9742	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9744					_FCExit:
.9744	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9745					FDivideCommand:
.9745	fa		plx				plx	 								; restore stack position
.9746	20 2b 98	jsr $982b			jsr 	FloatPrepare 				; prepare for floats
.9749					FloatDivide:
.9749	48		pha				pha
.974a	e8		inx				inx
.974b	20 3c 98	jsr $983c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.974e	ca		dex				dex
.974f	c9 00		cmp #$00			cmp 	#0
.9751	f0 20		beq $9773			beq 	_FDZero
.9753	20 3c 98	jsr $983c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9756	f0 19		beq $9771			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9758	20 86 95	jsr $9586			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.975b	20 13 95	jsr $9513			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.975e	20 3c 98	jsr $983c			jsr		NSNormalise 				; renormalise
.9761	20 21 96	jsr $9621			jsr 	CalculateSign 				; calculate result sign
.9764	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9767	38		sec				sec
.9768	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.976b	38		sec				sec
.976c	e9 1e		sbc #$1e			sbc 	#30
.976e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9771					_FDExit:
.9771	68		pla				pla
.9772	60		rts				rts
.9773					_FDZero:
.9773	a9 03		lda #$03		lda	#3
.9775	4c 94 84	jmp $8494		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9778					FloatFractionalPart:
.9778	5a		phy				phy
.9779	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.977c	29 7f		and #$7f			and 	#$7F
.977e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9781	20 3c 98	jsr $983c			jsr 	NSNormalise
.9784	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9787	38		sec				sec
.9788	e9 e0		sbc #$e0			sbc 	#$E0
.978a	90 31		bcc $97bd			bcc 	_FFPExit 					; already fractional
.978c	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.978e	b0 2a		bcs $97ba			bcs 	_FFPZero
.9790	a8		tay				tay 								; put count to do in Y
.9791	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9794	20 bf 97	jsr $97bf			jsr 	_FFPPartial
.9797	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.979a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.979d	20 bf 97	jsr $97bf			jsr 	_FFPPartial
.97a0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97a3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97a6	20 bf 97	jsr $97bf			jsr 	_FFPPartial
.97a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97ac	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97af	20 bf 97	jsr $97bf			jsr 	_FFPPartial
.97b2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97b5	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; zeroed check.
.97b8	d0 03		bne $97bd			bne 	_FFPExit
.97ba					_FFPZero:
.97ba	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero
.97bd					_FFPExit:
.97bd	7a		ply				ply
.97be	60		rts				rts
.97bf					_FFPPartial:
.97bf	c0 00		cpy #$00			cpy 	#0 							; no more to do
.97c1	f0 17		beq $97da			beq 	_FFFPPExit
.97c3	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.97c5	b0 0c		bcs $97d3			bcs 	_FFFPPWholeByte
.97c7	5a		phy				phy
.97c8					_FFFPPLeft:
.97c8	0a		asl a				asl 	a
.97c9	88		dey				dey
.97ca	d0 fc		bne $97c8			bne 	_FFFPPLeft
.97cc	7a		ply				ply
.97cd					_FFFPPRight:
.97cd	4a		lsr a				lsr 	a
.97ce	88		dey				dey
.97cf	d0 fc		bne $97cd			bne 	_FFFPPRight
.97d1	80 07		bra $97da			bra 	_FFFPPExit
.97d3					_FFFPPWholeByte:
.97d3	98		tya				tya 								; subtract 8 from count
.97d4	38		sec				sec
.97d5	e9 08		sbc #$08			sbc 	#8
.97d7	a8		tay				tay
.97d8	a9 00		lda #$00			lda 	#0 							; and clear all
.97da					_FFFPPExit:
.97da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.97db					FloatIntegerPart:
.97db	48		pha				pha
.97dc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.97df	f0 1f		beq $9800			beq 	_FIPExit 					; if so do nothing
.97e1	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; is it zero ?
.97e4	f0 17		beq $97fd			beq 	_FIPZero 					; if so return zero.
.97e6	20 3c 98	jsr $983c			jsr 	NSNormalise 				; normalise
.97e9	f0 12		beq $97fd			beq 	_FIPZero 					; normalised to zero, exit zero
.97eb					_FIPShift:
.97eb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.97ee	10 08		bpl $97f8			bpl 	_FIPCheckZero
.97f0	20 5e 8f	jsr $8f5e			jsr 	NSMShiftRight 				; shift mantissa right
.97f3	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.97f6	80 f3		bra $97eb			bra 	_FIPShift
.97f8					_FIPCheckZero:
.97f8	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; avoid -0 problem
.97fb	d0 03		bne $9800			bne 	_FIPExit 					; set to zero if mantissa zero.
.97fd					_FIPZero:
.97fd	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero
.9800					_FIPExit:
.9800	68		pla				pla
.9801	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9802					FloatingPointMultiply:
.9802	20 2b 98	jsr $982b			jsr 	FloatPrepare 				; prepare for floats
.9805					FloatMultiply:
.9805	48		pha				pha
.9806	20 3c 98	jsr $983c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9809	f0 1b		beq $9826			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.980b	e8		inx				inx
.980c	20 3c 98	jsr $983c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.980f	ca		dex				dex
.9810	c9 00		cmp #$00			cmp 	#0
.9812	f0 0f		beq $9823			beq 	_FDSetZero
.9814	20 dc 95	jsr $95dc			jsr 	MultiplyShort 				; calculate the result.
.9817	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.981a	18		clc				clc
.981b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.981e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9821	80 03		bra $9826			bra 	_FDExit
.9823					_FDSetZero:
.9823	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero 					; return 0
.9826					_FDExit:
.9826	20 3c 98	jsr $983c			jsr 	NSNormalise 				; normalise the result
.9829	68		pla				pla
.982a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.982b					FloatPrepare:
.982b	20 a6 89	jsr $89a6			jsr 	DereferenceTopTwo 			; dereference the top two values
.982e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9831	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9834	29 10		and #$10			and 	#NSBIsString
.9836	d0 01		bne $9839			bne 	_FDType
.9838	60		rts				rts
.9839					_FDType:
.9839	4c ad 99	jmp $99ad			jmp 	TypeError
.983c					NSNormalise:
.983c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.983f	29 80		and #$80			and 	#$80
.9841	09 08		ora #$08			ora 	#NSTFloat
.9843	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9846	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; if zero exit
.9849	d0 09		bne $9854			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.984b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.984e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9851	a9 00		lda #$00			lda 	#0 							; set Z flag
.9853	60		rts				rts
.9854					_NSNormaliseOptimise:
.9854	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9857	d0 22		bne $987b			bne 	_NSNormaliseLoop
.9859	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.985c	30 1d		bmi $987b			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.985e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9861	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9864	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9867	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.986a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.986d	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9870	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9873	38		sec				sec
.9874	e9 08		sbc #$08			sbc 	#8
.9876	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9879	80 d9		bra $9854			bra 	_NSNormaliseOptimise
.987b					_NSNormaliseLoop:
.987b	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.987e	70 08		bvs $9888			bvs 	_NSNExit 					; exit if so with Z flag clear
.9880	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; shift mantissa left
.9883	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9886	80 f3		bra $987b			bra 	_NSNormaliseLoop
.9888					_NSNExit:
.9888	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.988a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.88d3					AssignNumber:
.88d3	5a		phy				phy
.88d4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.88d7	85 36		sta $36				sta 	zTemp0
.88d9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88dc	85 37		sta $37				sta 	zTemp0+1
.88de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.88e1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.88e3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88e6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.88e8	c9 08		cmp #$08			cmp 	#NSTFloat
.88ea	f0 2a		beq $8916			beq 	_ANFloat
.88ec	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.88ef	f0 05		beq $88f6			beq		_ANNotFloat
.88f1	e8		inx				inx
.88f2	20 db 97	jsr $97db			jsr 	FloatIntegerPart 			; make it an integer
.88f5	ca		dex				dex
.88f6					_ANNotFloat:
.88f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.88f9	29 03		and #$03			and 	#3
.88fb	d0 05		bne $8902			bne 	_ANByteWord
.88fd	20 22 89	jsr $8922			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8900	80 1e		bra $8920			bra 	_ANExit
.8902					_ANByteWord:
.8902	48		pha				pha 								; save count
.8903	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8906	92 36		sta ($36)			sta 	(zTemp0)
.8908	68		pla				pla
.8909	c9 01		cmp #$01			cmp	 	#1
.890b	f0 13		beq $8920			beq 	_ANExit
.890d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8910	a0 01		ldy #$01			ldy 	#1
.8912	91 36		sta ($36),y			sta 	(zTemp0),y
.8914	80 0a		bra $8920			bra 	_ANExit
.8916					_ANFloat:
.8916	20 22 89	jsr $8922			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8919	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.891c	a0 04		ldy #$04			ldy 	#4
.891e	91 36		sta ($36),y			sta 	(zTemp0),y
.8920					_ANExit:
.8920	7a		ply				ply
.8921	60		rts				rts
.8922					_ANCopy4PackSign:
.8922	a0 03		ldy #$03			ldy 	#3
.8924	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8927	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8929	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.892c	91 36		sta ($36),y			sta 	(zTemp0),y
.892e	88		dey				dey
.892f	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8932	91 36		sta ($36),y			sta 	(zTemp0),y
.8934	88		dey				dey
.8935	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8938	91 36		sta ($36),y			sta 	(zTemp0),y
.893a	88		dey				dey
.893b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.893e	91 36		sta ($36),y			sta 	(zTemp0),y
.8940	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8941					AssignString:
.8941	5a		phy				phy
.8942	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8945	85 38		sta $38				sta 	zTemp1
.8947	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.894a	85 39		sta $39				sta 	zTemp1+1
.894c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.894f	85 36		sta $36				sta 	zTemp0
.8951	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8954	85 37		sta $37				sta 	zTemp0+1
.8956	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8958	b1 36		lda ($36),y			lda 	(zTemp0),y
.895a	f0 23		beq $897f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.895c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.895d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.895f	e9 02		sbc #$02			sbc 	#2
.8961	85 3c		sta $3c				sta 	zsTemp
.8963	a0 01		ldy #$01			ldy 	#1
.8965	b1 36		lda ($36),y			lda 	(zTemp0),y
.8967	e9 00		sbc #$00			sbc 	#0
.8969	85 3d		sta $3d				sta 	zsTemp+1
.896b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.896d					_ASGetLength:
.896d	c8		iny				iny
.896e	b1 38		lda ($38),y			lda 	(zTemp1),y
.8970	d0 fb		bne $896d			bne 	_ASGetLength
.8972	98		tya				tya 								; is this length <= current length
.8973	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8975	90 20		bcc $8997			bcc 	_ASCopyString
.8977	f0 1e		beq $8997			beq 	_ASCopyString
.8979	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.897b	a0 01		ldy #$01			ldy 	#1
.897d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.897f					_ASNewStringRequired:
.897f	e8		inx				inx 								; concrete the new string.
.8980	20 dc 9a	jsr $9adc			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8983	ca		dex				dex
.8984	18		clc				clc
.8985	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8988	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.898a	92 36		sta ($36)			sta 	(zTemp0)
.898c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.898f	69 00		adc #$00			adc 	#0
.8991	a0 01		ldy #$01			ldy 	#1
.8993	91 36		sta ($36),y			sta 	(zTemp0),y
.8995	80 0d		bra $89a4			bra 	_ASExit
.8997					_ASCopyString:
.8997	a0 00		ldy #$00			ldy 	#0
.8999					_ASCopyLoop:
.8999	b1 38		lda ($38),y			lda 	(zTemp1),y
.899b	c8		iny				iny
.899c	c8		iny				iny
.899d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.899f	88		dey				dey
.89a0	c9 00		cmp #$00			cmp 	#0
.89a2	d0 f5		bne $8999			bne 	_ASCopyLoop
.89a4					_ASExit:
.89a4	7a		ply				ply
.89a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.89a6					DereferenceTopTwo:
.89a6	e8		inx				inx
.89a7	20 ab 89	jsr $89ab			jsr 	Dereference 				; deref x+1
.89aa	ca		dex				dex  								; falls through to deref x
.89ab					Dereference:
.89ab	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.89ae	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.89b0	f0 57		beq $8a09			beq 	_DRFExit 					; not a reference
.89b2	5a		phy				phy
.89b3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.89b6	85 36		sta $36				sta 	zTemp0
.89b8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89bb	85 37		sta $37				sta 	zTemp0+1
.89bd	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.89c0	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.89c2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89c5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.89c8	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.89ca	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.89cc	f0 0f		beq $89dd			beq 	_DRFDereferenceTwo
.89ce	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.89d0	f0 39		beq $8a0b			beq 	_DRFFull
.89d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.89d5	29 03		and #$03			and 	#3
.89d7	f0 32		beq $8a0b			beq 	_DRFFull 					; the whole word
.89d9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.89db	f0 07		beq $89e4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.89dd					_DRFDereferenceTwo:
.89dd	a0 01		ldy #$01			ldy 	#1
.89df	b1 36		lda ($36),y			lda 	(zTemp0),y
.89e1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89e4					_DRFClear23:
.89e4	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.89e7	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.89ea	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.89ed	29 18		and #$18			and 	#NSBTypeMask
.89ef	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89f2	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.89f4	d0 12		bne $8a08			bne 	_DRFNotString
.89f6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.89f9	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.89fc	d0 0a		bne $8a08			bne 	_DRFNotString
.89fe	a9 0a		lda #$0a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8a00	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8a03	a9 8a		lda #$8a			lda 	#_DRFNullString >> 8
.8a05	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8a08					_DRFNotString
.8a08	7a		ply				ply 								; restore Y and exit
.8a09					_DRFExit:
.8a09	60		rts				rts
.8a0a					_DRFNullString:
>8a0a	00						.byte 	0
.8a0b					_DRFFull:
.8a0b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8a0d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a0f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a12	c8		iny				iny
.8a13	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a15	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a18	c8		iny				iny
.8a19	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a1b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a1e	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8a21	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8a24	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8a26	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8a29	f0 06		beq $8a31			beq 	_DRFNoExponent
.8a2b	c8		iny				iny 								; if not, read the exponent as well.
.8a2c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a2e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8a31					_DRFNoExponent:
.8a31	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8a34	10 0d		bpl $8a43			bpl 	_DRFExit2 					; if not, then exit.
.8a36	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8a38	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a3b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8a3e	09 80		ora #$80			ora 	#NSBIsNegative
.8a40	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a43					_DRFExit2:
.8a43	7a		ply				ply
.8a44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8a45					EncodeNumberStart:
.8a45	38		sec				sec
.8a46	80 01		bra $8a49			bra 	EncodeNumberContinue+1
.8a48					EncodeNumberContinue:
.8a48	18		clc				clc
.8a49					EncodeNumber:
.8a49	08		php				php 								; save reset.
.8a4a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8a4c	f0 12		beq $8a60			beq 	_ENIsOkay
.8a4e	c9 30		cmp #$30			cmp 	#"0"
.8a50	90 04		bcc $8a56			bcc 	_ENBadNumber
.8a52	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a54	90 0a		bcc $8a60			bcc 	_ENIsOkay
.8a56					_ENBadNumber:
.8a56	28		plp				plp 								; throw saved reset
.8a57	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8a5a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a5c	f0 7e		beq $8adc			beq 	_ENConstructFinal
.8a5e					_ENFail:
.8a5e	18		clc				clc 								; not allowed
.8a5f	60		rts				rts
.8a60					_ENIsOkay:
.8a60	28		plp				plp 								; are we restarting
.8a61	90 15		bcc $8a78			bcc 	_ENNoRestart
.8a63					_ENStartEncode:
.8a63	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8a65	f0 0c		beq $8a73			beq 	_ENFirstDP
.8a67	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8a69	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.8a6c	a9 01		lda #$01			lda 	#ESTA_Low
.8a6e					_ENExitChange:
.8a6e	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8a71	38		sec				sec
.8a72	60		rts				rts
.8a73					_ENFirstDP:
.8a73	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero 					; clear integer part
.8a76	80 3f		bra $8ab7			bra 	_ESTASwitchFloat			; go straight to float and exi
.8a78					_ENNoRestart:
.8a78	48		pha				pha 								; save on stack.
.8a79	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8a7c	c9 01		cmp #$01			cmp 	#ESTA_Low
.8a7e	f0 09		beq $8a89			beq  	_ESTALowState
.8a80	c9 02		cmp #$02			cmp 	#ESTA_High
.8a82	f0 29		beq $8aad			beq 	_ESTAHighState
.8a84	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a86	f0 3b		beq $8ac3			beq 	_ESTADecimalState
>8a88	db						.byte 	$DB 						; causes a break in the emulator
.8a89					_ESTALowState:
.8a89	68		pla				pla 								; get value back
.8a8a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8a8c	f0 29		beq $8ab7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8a8e	29 0f		and #$0f			and 	#15 						; make digit
.8a90	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8a93	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8a96	0a		asl a				asl 	a
.8a97	0a		asl a				asl 	a
.8a98	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a9b	0a		asl a				asl 	a
.8a9c	6d 06 07	adc $0706			adc 	DigitTemp
.8a9f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8aa2	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8aa4	90 05		bcc $8aab			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8aa6	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8aa8	8d 05 07	sta $0705			sta 	EncodeState
.8aab					_ESTANoSwitch:
.8aab	38		sec				sec
.8aac	60		rts				rts
.8aad					_ESTAHighState:
.8aad	68		pla				pla 								; get value back
.8aae	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8ab0	f0 05		beq $8ab7			beq 	_ESTASwitchFloat
.8ab2	20 16 8b	jsr $8b16			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8ab5	38		sec				sec
.8ab6	60		rts				rts
.8ab7					_ESTASwitchFloat:
.8ab7	9c 07 07	stz $0707			stz 	DecimalCount
.8aba	e8		inx				inx 								; zero the decimal additive.
.8abb	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero
.8abe	ca		dex				dex
.8abf	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8ac1	80 ab		bra $8a6e			bra 	_ENExitChange
.8ac3					_ESTADecimalState:
.8ac3	68		pla				pla 								; digit.
.8ac4	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8ac6	f0 96		beq $8a5e			beq 	_ENFail
.8ac8	e8		inx				inx 								; put digit into fractional part of X+1
.8ac9	20 16 8b	jsr $8b16			jsr 	ESTAShiftDigitIntoMantissa
.8acc	ca		dex				dex
.8acd	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8ad0	ad 07 07	lda $0707			lda 	DecimalCount
.8ad3	c9 0b		cmp #$0b			cmp 	#11
.8ad5	f0 02		beq $8ad9			beq 	_ESTADSFail
.8ad7	38		sec				sec
.8ad8	60		rts				rts
.8ad9					_ESTADSFail:
.8ad9	4c a8 99	jmp $99a8			jmp 	RangeError
.8adc					_ENConstructFinal:
.8adc	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8adf	f0 33		beq $8b14			beq 	_ENCFExit 					; no decimals
.8ae1	5a		phy				phy
.8ae2	0a		asl a				asl 	a 							; x 4 and CLC
.8ae3	0a		asl a				asl 	a
.8ae4	6d 07 07	adc $0707			adc 	DecimalCount
.8ae7	a8		tay				tay
.8ae8	b9 67 99	lda $9967,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8aeb	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8aee	b9 68 99	lda $9968,y			lda 	DecimalScalarTable-5+1,y
.8af1	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8af4	b9 69 99	lda $9969,y			lda 	DecimalScalarTable-5+2,y
.8af7	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8afa	b9 6a 99	lda $996a,y			lda 	DecimalScalarTable-5+3,y
.8afd	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8b00	b9 6b 99	lda $996b,y			lda 	DecimalScalarTable-5+4,y
.8b03	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8b06	a9 08		lda #$08			lda 	#NSTFloat
.8b08	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8b0b	7a		ply				ply
.8b0c	e8		inx				inx 								; multiply decimal const by decimal scalar
.8b0d	20 05 98	jsr $9805			jsr 	FloatMultiply
.8b10	ca		dex				dex
.8b11	20 9a 96	jsr $969a			jsr 	FloatAdd 					; add to integer part.
.8b14					_ENCFExit:
.8b14	18		clc				clc 								; reject the digit.
.8b15	60		rts				rts
.8b16					ESTAShiftDigitIntoMantissa:
.8b16	29 0f		and #$0f			and 	#15 						; save digit
.8b18	48		pha				pha
.8b19	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8b1c	48		pha				pha
.8b1d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8b20	48		pha				pha
.8b21	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b24	48		pha				pha
.8b25	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b28	48		pha				pha
.8b29	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; x 2
.8b2c	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; x 4
.8b2f	18		clc				clc 								; pop mantissa and add
.8b30	68		pla				pla
.8b31	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b34	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b37	68		pla				pla
.8b38	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8b3b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b3e	68		pla				pla
.8b3f	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8b42	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b45	68		pla				pla
.8b46	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8b49	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8b4c	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; x 10
.8b4f	68		pla				pla 								; add digit
.8b50	18		clc				clc
.8b51	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b54	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b57	90 0d		bcc $8b66			bcc 	_ESTASDExit
.8b59	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8b5c	d0 08		bne $8b66			bne 	_ESTASDExit
.8b5e	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8b61	d0 03		bne $8b66			bne 	_ESTASDExit
.8b63	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8b66					_ESTASDExit:
.8b66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8b67					EvaluateTerm:
.8b67	b1 30		lda ($30),y			lda 	(codePtr),y
.8b69	30 18		bmi $8b83			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8b6b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8b6d	b0 6f		bcs $8bde			bcs 	_ETVariable
.8b6f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8b71	90 6e		bcc $8be1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8b73	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b75	b0 6a		bcs $8be1			bcs 	_ETPuncUnary
.8b77	20 45 8a	jsr $8a45			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8b7a					_ETNumber:
.8b7a	c8		iny				iny 								; keep encoding until we have the numbers
.8b7b	b1 30		lda ($30),y			lda 	(codePtr),y
.8b7d	20 48 8a	jsr $8a48			jsr 	EncodeNumberContinue
.8b80	b0 f8		bcs $8b7a			bcs 	_ETNumber 					; go back if accepted.
.8b82	60		rts				rts
.8b83					_ETCheckUnary:
.8b83	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8b85	f0 41		beq $8bc8			beq 	_ETString
.8b87	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8b89	f0 12		beq $8b9d			beq 	_ETHexConstant
.8b8b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8b8d	90 0b		bcc $8b9a			bcc 	_ETSyntaxError
.8b8f	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8b91	b0 07		bcs $8b9a			bcs 	_ETSyntaxError
.8b93	da		phx				phx 								; push X on the stack
.8b94	0a		asl a				asl 	a 							; put vector x 2 into X
.8b95	aa		tax				tax
.8b96	c8		iny				iny 								; consume unary function token
.8b97	7c 9c 80	jmp ($809c,x)			jmp 	(VectorSet0,x) 				; and do it.
.8b9a					_ETSyntaxError:
.8b9a	4c a3 99	jmp $99a3			jmp 	SyntaxError
.8b9d					_ETHexConstant:
.8b9d	c8		iny				iny 								; skip #
.8b9e	c8		iny				iny 								; skip count
.8b9f	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero 					; clear result
.8ba2					_ETHLoop:
.8ba2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba4	c8		iny				iny 								; and consume
.8ba5	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8ba7	f0 1e		beq $8bc7			beq 	_ETHExit
.8ba9	48		pha				pha 								; save on stack.
.8baa	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; x 2
.8bad	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; x 4
.8bb0	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; x 8
.8bb3	20 50 8f	jsr $8f50			jsr 	NSMShiftLeft 				; x 16
.8bb6	68		pla				pla 								; ASCII
.8bb7	c9 41		cmp #$41			cmp 	#'A'
.8bb9	90 02		bcc $8bbd			bcc 	_ETHNotChar
.8bbb	e9 07		sbc #$07			sbc 	#7
.8bbd					_ETHNotChar:
.8bbd	29 0f		and #$0f			and 	#15 						; digit now
.8bbf	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8bc2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bc5	80 db		bra $8ba2			bra 	_ETHLoop 					; go round.
.8bc7					_ETHExit:
.8bc7	60		rts				rts
.8bc8					_ETString:
.8bc8	c8		iny				iny 								; look at length
.8bc9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcb	48		pha				pha
.8bcc	c8		iny				iny 								; first character
.8bcd	20 8c 94	jsr $948c			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8bd0	68		pla				pla 								; restore count and save
.8bd1	85 36		sta $36				sta 	zTemp0
.8bd3	98		tya				tya 								; add length to Y to skip it.
.8bd4	18		clc				clc
.8bd5	65 36		adc $36				adc 	zTemp0
.8bd7	a8		tay				tay
.8bd8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8bda	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bdd	60		rts				rts
.8bde					_ETVariable:
.8bde	4c 38 8c	jmp $8c38			jmp 	VariableHandler
.8be1					_ETPuncUnary:
.8be1	c8		iny				iny 								; consume the unary character
.8be2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8be4	f0 2d		beq $8c13			beq 	_ETUnaryNegate
.8be6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8be8	f0 39		beq $8c23			beq 	_ETDereference
.8bea	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8bec	f0 43		beq $8c31			beq 	_ETParenthesis
.8bee	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8bf0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8bf2	f0 06		beq $8bfa			beq 	_ETIndirection
.8bf4	e6 36		inc $36				inc 	zTemp0
.8bf6	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8bf8	d0 a0		bne $8b9a			bne 	_ETSyntaxError
.8bfa					_ETIndirection:
.8bfa	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8bfc	1a		inc a				inc 	a
.8bfd	48		pha				pha
.8bfe	20 67 8b	jsr $8b67			jsr 	EvaluateTerm				; evaluate the term
.8c01	20 ab 89	jsr $89ab			jsr 	Dereference 				; dereference it.
.8c04	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8c07	d0 07		bne $8c10			bne 	_ETTypeMismatch
.8c09	68		pla				pla 								; indirection 1-2
.8c0a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8c0c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c0f	60		rts				rts
.8c10					_ETTypeMismatch:
.8c10	4c ad 99	jmp $99ad			jmp 	TypeError
.8c13					_ETUnaryNegate:
.8c13	20 67 8b	jsr $8b67			jsr 	EvaluateTerm				; evaluate the term
.8c16	20 ab 89	jsr $89ab			jsr 	Dereference 				; dereference it.
.8c19	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8c1c	29 10		and #$10			and 	#NSTString
.8c1e	d0 f0		bne $8c10			bne 	_ETTypeMismatch
.8c20	4c e7 8e	jmp $8ee7			jmp 	NSMNegate  					; just toggles the sign bit.
.8c23					_ETDereference:
.8c23	20 67 8b	jsr $8b67			jsr 	EvaluateTerm				; evaluate the term
.8c26	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8c29	29 20		and #$20			and 	#NSBIsReference
.8c2b	f0 e3		beq $8c10			beq 	_ETTypeMismatch
.8c2d	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8c30	60		rts				rts
.8c31					_ETParenthesis:
.8c31	20 96 88	jsr $8896			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8c34	20 d3 94	jsr $94d3			jsr 	CheckRightBracket 			; check for )
.8c37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8c38					VariableHandler:
.8c38	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3a	18		clc				clc
.8c3b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c3d	85 37		sta $37				sta 	zTemp0+1
.8c3f	c8		iny				iny
.8c40	b1 30		lda ($30),y			lda 	(codePtr),y
.8c42	85 36		sta $36				sta 	zTemp0
.8c44	c8		iny				iny
.8c45	18		clc				clc									; copy variable address+3 to mantissa
.8c46	69 03		adc #$03			adc 	#3
.8c48	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c4b	a5 37		lda $37				lda 	zTemp0+1
.8c4d	69 00		adc #$00			adc 	#0
.8c4f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c52	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8c55	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8c58	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8c5b	5a		phy				phy
.8c5c	a0 02		ldy #$02			ldy 	#2 							; read type
.8c5e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c60	7a		ply				ply
.8c61	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8c63	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8c65	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c68	29 04		and #$04			and 	#NSBIsArray
.8c6a	d0 01		bne $8c6d			bne 	_VHArray
.8c6c	60		rts				rts
.8c6d					_VHArray:
>8c6d	db						.byte 	$DB 						; causes a break in the emulator
.8c6e	80 fd		bra $8c6d			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.988b					AbsUnary:
.988b	fa		plx				plx 								; restore stack pos
.988c	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber 				; get a float or int
.988f	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.9892	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9895	29 7f		and #$7f			and 	#$7F
.9897	9d 00 06	sta $0600,x			sta 	NSStatus,x
.989a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8c70					AllocUnary:
.8c70	fa		plx				plx 								; restore stack pos
.8c71	20 c7 8e	jsr $8ec7			jsr 	Evaluate16BitInteger		; get bytes required.
.8c74	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.8c77	da		phx				phx 								; save X/Y
.8c78	5a		phy				phy
.8c79	8a		txa				txa 								; copy X into Y
.8c7a	a8		tay				tay
.8c7b	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8c7e	aa		tax				tax
.8c7f	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8c82	20 8f 8c	jsr $8c8f			jsr 	AllocateXABytes 			; allocate memory
.8c85	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8c88	8a		txa				txa
.8c89	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8c8c	7a		ply				ply
.8c8d	fa		plx				plx
.8c8e	60		rts				rts
.8c8f					AllocateXABytes:
.8c8f	5a		phy				phy
.8c90	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8c93	5a		phy				phy
.8c94	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8c97	5a		phy				phy
.8c98	18		clc				clc
.8c99	6d 0c 07	adc $070c			adc 	lowMemPtr
.8c9c	8d 0c 07	sta $070c			sta 	lowMemPtr
.8c9f	8a		txa				txa
.8ca0	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8ca3	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8ca6	fa		plx				plx
.8ca7	68		pla				pla
.8ca8	7a		ply				ply
.8ca9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.989b					AscUnary:
.989b	fa		plx				plx 								; restore stack pos
.989c	20 9a 8e	jsr $8e9a			jsr 	EvaluateString 				; get a string
.989f	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.98a1	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.98a4	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.98a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.98a8					FracUnary:
.98a8	fa		plx				plx 								; restore stack pos
.98a9	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber 				; get a float or int
.98ac	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.98af	bd 00 06	lda $0600,x			lda 	NSStatus,x
.98b2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.98b4	f0 04		beq $98ba			beq 	_IUZero
.98b6	20 78 97	jsr $9778			jsr 	FloatFractionalPart
.98b9	60		rts				rts
.98ba					_IUZero:
.98ba	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero
.98bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.98be					IntUnary:
.98be	fa		plx				plx 								; restore stack pos
.98bf	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber 				; get a float or int
.98c2	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.98c5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.98c8	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.98ca	f0 03		beq $98cf			beq 	_IUExit
.98cc	20 db 97	jsr $97db			jsr 	FloatIntegerPart
.98cf					_IUExit:
.98cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.98d0					LenUnary:
.98d0	fa		plx				plx 								; restore stack pos
.98d1	20 9a 8e	jsr $8e9a			jsr 	EvaluateString 				; get a string
.98d4	5a		phy				phy
.98d5	a0 00		ldy #$00			ldy 	#0 							; find length
.98d7					_LenFind:
.98d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d9	f0 06		beq $98e1			beq 	_LenExit
.98db	c8		iny				iny
.98dc	d0 f9		bne $98d7			bne 	_LenFind
.98de	4c a8 99	jmp $99a8			jmp 	RangeError 					; string > 255
.98e1					_LenExit:
.98e1	98		tya				tya
.98e2	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.98e5	7a		ply				ply
.98e6	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.98e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8caa					Unary_Not:
.8caa	fa		plx				plx
.8cab	20 b2 8e	jsr $8eb2			jsr 	EvaluateInteger 			; get integer
.8cae	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.8cb1	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; zero mantissa ?
.8cb4	f0 04		beq $8cba			beq 	_NotZero
.8cb6	20 3b 8f	jsr $8f3b			jsr 	NSMSetZero
.8cb9	60		rts				rts
.8cba					_NotZero:
.8cba	4c fa 84	jmp $84fa			jmp 	ReturnTrue
.8cbd					_UNBad:
.8cbd	4c b2 99	jmp $99b2			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8cc0					Unary_Rnd:
.8cc0	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber 				; number to use.
.8cc3	20 d3 94	jsr $94d3			jsr 	CheckRightBracket 			; closing bracket
.8cc6	20 ef 8c	jsr $8cef			jsr 	Random32Bit 				; generate a number.
.8cc9	ad 08 07	lda $0708			lda 	RandomSeed+0
.8ccc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ccf	ad 09 07	lda $0709			lda 	RandomSeed+1
.8cd2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8cd5	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8cd8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cdb	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8cde	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8ce0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ce3	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8ce5	8d 28 06	sta $0628			sta 	NSExponent
.8ce8	a9 08		lda #$08			lda 	#NSTFloat
.8cea	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8ced	db						.byte 	$DB 						; causes a break in the emulator
.8cee	60		rts				rts
.8cef					Random32Bit:
.8cef	5a		phy				phy
.8cf0	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8cf2	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8cf5	d0 03		bne $8cfa			bne 	_Random1
.8cf7	a8		tay				tay 								; if so do it 256 times
.8cf8	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8cfa					_Random1:
.8cfa	0a		asl a				asl 	a 							; LSFR RNG
.8cfb	2e 09 07	rol $0709			rol 	RandomSeed+1
.8cfe	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8d01	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8d04	90 02		bcc $8d08			bcc 	_Random2
.8d06	49 c5		eor #$c5			eor 	#$C5
.8d08					_Random2:
.8d08	88		dey				dey
.8d09	d0 ef		bne $8cfa			bne 	_Random1
.8d0b	7a		ply				ply
.8d0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.98ea					SgnUnary:
.98ea	fa		plx				plx 								; restore stack pos
.98eb	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber 				; get a float or int
.98ee	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.98f1	20 6b 8f	jsr $8f6b			jsr 	NSMIsZero 					; if zero
.98f4	f0 10		beq $9906			beq 	_SGZero  					; return Int Zero
.98f6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.98f9	48		pha				pha
.98fa	a9 01		lda #$01			lda 	#1 							; set to 1
.98fc	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.98ff	68		pla				pla
.9900	29 80		and #$80			and		#$80 						; copy the sign byte out
.9902	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9905	60		rts				rts
.9906	20 3b 8f	jsr $8f3b	_SGZero:jsr 	NSMSetZero
.9909	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.990a					ValUnary:
.990a	fa		plx				plx 								; restore stack pos
.990b	20 20 99	jsr $9920			jsr 	ValMainCode 				; do the main val() code
.990e	b0 01		bcs $9911			bcs 	_VUError 					; couldn't convert
.9910	60		rts				rts
.9911					_VUError:
.9911	4c ad 99	jmp $99ad			jmp 	TypeError
.9914					IsValUnary:
.9914	fa		plx				plx 								; restore stack pos
.9915	20 20 99	jsr $9920			jsr 	ValMainCode 				; do the main val() code
.9918	b0 03		bcs $991d			bcs 	_VUBad
.991a	4c fa 84	jmp $84fa			jmp 	ReturnTrue
.991d					_VUBad:
.991d	4c 06 85	jmp $8506			jmp 	ReturnFalse
.9920					ValMainCode:
.9920	20 9a 8e	jsr $8e9a			jsr 	EvaluateString 				; get a string
.9923	20 d3 94	jsr $94d3			jsr 	CheckRightBracket 			; check right bracket present
.9926	5a		phy				phy
.9927	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9929	f0 17		beq $9942			beq 	_VMCFail2
.992b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.992d	48		pha				pha 								; save first character
.992e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9930	d0 01		bne $9933			bne 	_VMCStart
.9932	c8		iny				iny 								; skip over -
.9933					_VMCStart:
.9933	38		sec				sec 								; initialise first time round.
.9934					_VMCNext:
.9934	c8		iny				iny 								; pre-increment
.9935	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9937	f0 0c		beq $9945			beq 	_VMCSuccess 				; successful.
.9939	20 49 8a	jsr $8a49			jsr 	EncodeNumber 				; send it to the number-builder
.993c	90 03		bcc $9941			bcc 	_VMCFail 					; if failed, give up.
.993e	18		clc				clc 								; next time round, countinue
.993f	80 f3		bra $9934			bra 	_VMCNext
.9941					_VMCFail:
.9941	68		pla				pla
.9942					_VMCFail2:
.9942	7a		ply				ply
.9943	38		sec				sec
.9944	60		rts				rts
.9945					_VMCSuccess:
.9945	a9 00		lda #$00			lda 	#0 							; construct final
.9947	20 49 8a	jsr $8a49			jsr 	EncodeNumber
.994a	68		pla				pla
.994b	c9 2d		cmp #$2d			cmp 	#"-"
.994d	d0 03		bne $9952			bne 	_VMCNotNegative
.994f	20 e7 8e	jsr $8ee7			jsr		NSMNegate
.9952					_VMCNotNegative:
.9952	7a		ply				ply
.9953	18		clc				clc
.9954	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8d0d					ChrUnary:
.8d0d	fa		plx				plx 								; restore stack pos
.8d0e	20 d3 8e	jsr $8ed3			jsr 	Evaluate8BitInteger			; get value
.8d11	48		pha				pha
.8d12	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.8d15	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8d17	20 57 9b	jsr $9b57			jsr 	StringTempAllocate
.8d1a	68		pla				pla 								; write number to it
.8d1b	20 95 9b	jsr $9b95			jsr 	StringTempWrite
.8d1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8d1f					SpcUnary:
.8d1f	fa		plx				plx 								; restore stack pos
.8d20	20 d3 8e	jsr $8ed3			jsr 	Evaluate8BitInteger			; get value
.8d23	5a		phy				phy
.8d24	48		pha				pha 								; save count
.8d25	20 57 9b	jsr $9b57			jsr 	StringTempAllocate
.8d28	7a		ply				ply 								; to do count in Y
.8d29					_SpcLoop:
.8d29	c0 00		cpy #$00			cpy 	#0
.8d2b	f0 08		beq $8d35			beq 	_SpcExit
.8d2d	a9 20		lda #$20			lda 	#32
.8d2f	20 95 9b	jsr $9b95			jsr 	StringTempWrite
.8d32	88		dey				dey
.8d33	80 f4		bra $8d29			bra 	_SPCLoop
.8d35					_SpcExit:
.8d35	7a		ply				ply
.8d36	20 d3 94	jsr $94d3			jsr 	CheckRightBracket
.8d39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8d3a					Unary_Str:
.8d3a	fa		plx				plx
.8d3b	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber  			; get number
.8d3e	20 d3 94	jsr $94d3			jsr 	CheckRightBracket 			; closing bracket
.8d41	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8d43	20 5c 8d	jsr $8d5c			jsr 	ConvertNumberToString 		; do the conversion.
.8d46	a9 21		lda #$21			lda		#33 						; create buffer
.8d48	20 57 9b	jsr $9b57			jsr 	StringTempAllocate 			; allocate memory
.8d4b	da		phx				phx
.8d4c	a2 00		ldx #$00			ldx 	#0
.8d4e					_USCopy:
.8d4e	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8d51	20 95 9b	jsr $9b95			jsr 	StringTempWrite
.8d54	e8		inx				inx
.8d55	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8d58	d0 f4		bne $8d4e			bne 	_USCopy
.8d5a	fa		plx				plx
.8d5b	60		rts				rts
.8d5c					ConvertNumberToString:
.8d5c	5a		phy				phy 								; save code position
.8d5d	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8d60	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8d63	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8d66	10 0a		bpl $8d72			bpl 	_CNTSNotNegative
.8d68	29 7f		and #$7f			and 	#$7F 						; make +ve
.8d6a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d6d	a9 2d		lda #$2d			lda 	#"-"
.8d6f	20 d8 8d	jsr $8dd8			jsr 	WriteDecimalBuffer
.8d72					_CNTSNotNegative:
.8d72	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8d75	f0 15		beq $8d8c			beq 	_CNTSNotFloat
.8d77	e8		inx				inx 								; round up
.8d78	a9 01		lda #$01			lda 	#1
.8d7a	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.8d7d	ca		dex				dex
.8d7e	bd 28 06	lda $0628,x			lda		NSExponent,x
.8d81	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8d84	a9 08		lda #$08			lda 	#NSTFloat
.8d86	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8d89	20 9a 96	jsr $969a			jsr 	FloatAdd
.8d8c					_CNTSNotFloat:
.8d8c	20 ba 8d	jsr $8dba			jsr 	MakePlusTwoString
.8d8f	20 78 97	jsr $9778			jsr 	FloatFractionalPart 		; get the fractional part
.8d92	20 3c 98	jsr $983c			jsr 	NSNormalise					; normalise , exit if zero
.8d95	f0 21		beq $8db8			beq 	_CNTSExit
.8d97	a9 2e		lda #$2e			lda 	#"."
.8d99	20 d8 8d	jsr $8dd8			jsr 	WriteDecimalBuffer 			; write decimal place
.8d9c					_CNTSDecimal:
.8d9c	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8d9f	30 17		bmi $8db8			bmi 	_CNTSExit
.8da1	e8		inx				inx 								; x 10.0
.8da2	a9 0a		lda #$0a			lda 	#10
.8da4	20 3d 8f	jsr $8f3d			jsr 	NSMSetByte
.8da7	a9 08		lda #$08			lda 	#NSTFloat
.8da9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dac	ca		dex				dex
.8dad	20 05 98	jsr $9805			jsr 	FloatMultiply
.8db0	20 ba 8d	jsr $8dba			jsr 	MakePlusTwoString
.8db3	20 78 97	jsr $9778			jsr 	FloatFractionalPart 		; get the fractional part
.8db6	80 e4		bra $8d9c			bra 	_CNTSDecimal 				; keep going.
.8db8					_CNTSExit:
.8db8	7a		ply				ply
.8db9	60		rts				rts
.8dba					MakePlusTwoString:
.8dba	da		phx				phx
.8dbb	20 12 8f	jsr $8f12			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8dbe	e8		inx				inx 								; access it
.8dbf	e8		inx				inx
.8dc0	20 db 97	jsr $97db			jsr 	FloatIntegerPart 			; make it an integer
.8dc3	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8dc5	20 44 96	jsr $9644			jsr 	ConvertInt32
.8dc8	a2 00		ldx #$00			ldx	 	#0
.8dca					_MPTSCopy:
.8dca	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8dcd	20 d8 8d	jsr $8dd8			jsr 	WriteDecimalBuffer
.8dd0	e8		inx				inx
.8dd1	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8dd4	d0 f4		bne $8dca			bne 	_MPTSCopy
.8dd6	fa		plx				plx
.8dd7	60		rts				rts
.8dd8					WriteDecimalBuffer:
.8dd8	da		phx				phx
.8dd9	ae 14 07	ldx $0714			ldx 	dbOffset
.8ddc	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8ddf	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8de2	ee 14 07	inc $0714			inc 	dbOffset
.8de5	fa		plx				plx
.8de6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8de7					Unary_Left:
.8de7	fa		plx				plx
.8de8	18		clc				clc 								; only one parameter
.8de9	20 5e 8e	jsr $8e5e			jsr 	SubstringInitial 			; set up.
.8dec	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8def	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8df2	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8df5	80 2c		bra $8e23			bra 	SubstringMain
.8df7					Unary_Right:
.8df7	fa		plx				plx
.8df8	18		clc				clc 								; only one parameter
.8df9	20 5e 8e	jsr $8e5e			jsr 	SubstringInitial 			; set up.
.8dfc	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8dff	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e02	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8e05	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8e08	b0 02		bcs $8e0c			bcs 	_URNotUnderflow
.8e0a	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8e0c					_URNotUnderFlow:
.8e0c	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8e0f	80 12		bra $8e23			bra 	SubStringMain
.8e11					Unary_Mid:
.8e11	fa		plx				plx
.8e12	38		sec				sec 								; two parameters
.8e13	20 5e 8e	jsr $8e5e			jsr 	SubstringInitial 			; set up.
.8e16	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8e19	f0 05		beq $8e20			beq 	_UMError
.8e1b	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8e1e	80 03		bra $8e23			bra 	SubStringMain
.8e20					_UMError:
.8e20	4c b2 99	jmp $99b2			jmp 	ArgumentError
.8e23					SubStringMain:
.8e23	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8e26	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8e29	b0 2d		bcs $8e58			bcs 	_SSMNull 					; if so, return an empty string.
.8e2b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8e2e	f0 28		beq $8e58			beq 	_SSMNull 					; return empty string.
.8e30	18		clc				clc 								; add the offset +1 to the address and
.8e31	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8e34	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8e37	85 36		sta $36				sta 	zTemp0
.8e39	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8e3c	69 00		adc #$00			adc 	#0
.8e3e	85 37		sta $37				sta 	zTemp0+1
.8e40					_SSMNoCarry:
.8e40	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8e43	20 57 9b	jsr $9b57			jsr 	StringTempAllocate 			; allocate that many characters
.8e46	5a		phy				phy 								; save Y
.8e47	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8e49					_SSMCopy:
.8e49	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8e4b	f0 09		beq $8e56			beq 	_SSMEString 				; no more to copy
.8e4d	20 95 9b	jsr $9b95			jsr 	StringTempWrite 			; and write it out.
.8e50	c8		iny				iny
.8e51	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8e54	d0 f3		bne $8e49			bne 	_SSMCopy
.8e56					_SSMEString:
.8e56	7a		ply				ply
.8e57					_SSMExit:
.8e57	60		rts				rts
.8e58					_SSMNull:
.8e58	a9 00		lda #$00			lda 	#0
.8e5a	20 57 9b	jsr $9b57			jsr 	StringTempAllocate
.8e5d	60		rts				rts
.8e5e					SubstringInitial:
.8e5e	da		phx				phx 								; save initial stack position
.8e5f	08		php				php 								; save carry on stack indicating 2 parameters
.8e60	20 9a 8e	jsr $8e9a			jsr 	EvaluateString 				; get a string
.8e63	5a		phy				phy 								; calculate length to exponent.
.8e64	a0 ff		ldy #$ff			ldy 	#$FF
.8e66					_SIFindLength:
.8e66	c8		iny				iny
.8e67	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e69	d0 fb		bne $8e66			bne 	_SIFindLength
.8e6b	98		tya				tya
.8e6c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8e6f	7a		ply				ply
.8e70	e8		inx				inx
.8e71	20 db 94	jsr $94db			jsr 	CheckComma 					; comma next
.8e74	20 d3 8e	jsr $8ed3			jsr 	Evaluate8BitInteger 		; get next parameter
.8e77	28		plp				plp 								; is it the last parameter ?
.8e78	90 07		bcc $8e81			bcc 	_SSIExit 					; if so, exit.
.8e7a	e8		inx				inx
.8e7b	20 db 94	jsr $94db			jsr 	CheckComma 					; comma next
.8e7e	20 d3 8e	jsr $8ed3			jsr 	Evaluate8BitInteger 		; get last parameter
.8e81					_SSIExit:
.8e81	fa		plx				plx
.8e82	20 d3 94	jsr $94d3			jsr 	CheckRightBracket 			; check closing bracket
.8e85	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8e86					EvaluateValue:
.8e86	48		pha				pha
.8e87	20 96 88	jsr $8896			jsr		EvaluateExpression 			; expression
.8e8a	20 ab 89	jsr $89ab			jsr 	Dereference					; derefernce it
.8e8d	68		pla				pla
.8e8e	60		rts				rts
.8e8f					EvaluateNumber:
.8e8f	20 86 8e	jsr $8e86			jsr 	EvaluateValue 				; get a value
.8e92	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e95	29 10		and #$10			and 	#NSBIsString
.8e97	d0 16		bne $8eaf			bne 	HelperTypeError
.8e99	60		rts				rts
.8e9a					EvaluateString:
.8e9a	20 86 8e	jsr $8e86			jsr 	EvaluateValue 				; get a value
.8e9d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ea0	29 10		and #$10			and 	#NSBIsString
.8ea2	f0 0b		beq $8eaf			beq 	HelperTypeError
.8ea4					CopyAddressToTemp0:
.8ea4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8ea7	85 36		sta $36				sta 	zTemp0
.8ea9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8eac	85 37		sta $37				sta 	zTemp0+1
.8eae	60		rts				rts
.8eaf					HelperTypeError:
.8eaf	4c ad 99	jmp $99ad			jmp 	TypeError
.8eb2					EvaluateInteger:
.8eb2	20 8f 8e	jsr $8e8f			jsr 	EvaluateNumber
.8eb5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8eb8	d0 0a		bne $8ec4			bne 	HelperValueError 			; if not, it's a float.
.8eba	60		rts				rts
.8ebb					EvaluateUnsignedInteger:
.8ebb	20 b2 8e	jsr $8eb2			jsr 	EvaluateInteger 			; check integer is +ve
.8ebe	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ec1	30 01		bmi $8ec4			bmi 	HelperValueError
.8ec3	60		rts				rts
.8ec4					HelperValueError:
.8ec4	4c b2 99	jmp $99b2			jmp 	ArgumentError
.8ec7					Evaluate16BitInteger:
.8ec7	20 bb 8e	jsr $8ebb			jsr	 	EvaluateUnsignedInteger		; get integer
.8eca	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8ecd	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ed0	d0 f2		bne $8ec4			bne 	HelperValueError
.8ed2	60		rts				rts
.8ed3					Evaluate8BitInteger:
.8ed3	20 bb 8e	jsr $8ebb			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8ed6	d0 ec		bne $8ec4			bne 	HelperValueError
.8ed8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8edb	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ede	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8ee1	d0 e1		bne $8ec4			bne 	HelperValueError
.8ee3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ee6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9955					Multiply8x8:
.9955	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9956	85 36		sta $36			  	sta 	zTemp0
.9958	86 37		stx $37				stx 	zTemp0+1
.995a	a9 00		lda #$00			lda 	#0
.995c	a2 08		ldx #$08			ldx 	#8
.995e					_M88Loop:
.995e	90 03		bcc $9963			bcc 	_M88NoAdd
.9960	18		clc				clc
.9961	65 37		adc $37				adc 	zTemp0+1
.9963					_M88NoAdd:
.9963	6a		ror a				ror 	a
.9964	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9966	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9967	d0 f5		bne $995e			bne 	_M88Loop
.9969	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.996b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8ee7					NSMNegate:
.8ee7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8eea	49 80		eor #$80			eor 	#NSBIsNegative
.8eec	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8eef	60		rts				rts
.8ef0					NSMNegateMantissa:
.8ef0	38		sec				sec
.8ef1	a9 00		lda #$00			lda 	#0
.8ef3	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8ef6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ef9	a9 00		lda #$00			lda 	#0
.8efb	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8efe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f01	a9 00		lda #$00			lda 	#0
.8f03	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8f06	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f09	a9 00		lda #$00			lda 	#0
.8f0b	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8f0e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f11	60		rts				rts
.8f12					NSMShiftUpTwo:
.8f12	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f15	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f18	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f1b	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8f1e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8f21	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8f24	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f27	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8f2a	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8f2d	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8f30	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f33	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8f36	60		rts				rts
.8f37					NSMSetZeroMantissaOnly:
.8f37	a9 00		lda #$00			lda 	#0
.8f39	80 08		bra $8f43			bra 	NSMSetMantissa
.8f3b					NSMSetZero:
.8f3b	a9 00		lda #$00			lda 	#0
.8f3d					NSMSetByte:
.8f3d	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8f40	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8f43					NSMSetMantissa:
.8f43	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8f46	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8f49	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8f4c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8f4f	60		rts				rts
.8f50					NSMShiftLeft:
.8f50	18		clc				clc
.8f51					NSMRotateLeft:
.8f51	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8f54	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8f57	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8f5a	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8f5d	60		rts				rts
.8f5e					NSMShiftRight:
.8f5e	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8f61	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8f64	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8f67	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8f6a	60		rts				rts
.8f6b					NSMIsZero:
.8f6b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f6e	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8f71	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8f74	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8f77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.996c					DecimalScalarTable:
>996c	66 66 66 66				.dword $66666666 ; 0.1
>9970	de					.byte $de
>9971	1f 85 eb 51				.dword $51eb851f ; 0.01
>9975	db					.byte $db
>9976	4c 37 89 41				.dword $4189374c ; 0.001
>997a	d8					.byte $d8
>997b	ac 8b db 68				.dword $68db8bac ; 0.0001
>997f	d4					.byte $d4
>9980	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9984	d1					.byte $d1
>9985	83 de 1b 43				.dword $431bde83 ; 1e-06
>9989	ce					.byte $ce
>998a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>998e	ca					.byte $ca
>998f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9993	c7					.byte $c7
>9994	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9998	c4					.byte $c4
>9999	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>999d	c0					.byte $c0
>999e	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>99a2	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.99a3					SyntaxError:
.99a3	a9 02		lda #$02		lda	#2
.99a5	4c 94 84	jmp $8494		jmp	ErrorHandler
.99a8					RangeError:
.99a8	a9 04		lda #$04		lda	#4
.99aa	4c 94 84	jmp $8494		jmp	ErrorHandler
.99ad					TypeError:
.99ad	a9 05		lda #$05		lda	#5
.99af	4c 94 84	jmp $8494		jmp	ErrorHandler
.99b2					ArgumentError:
.99b2	a9 07		lda #$07		lda	#7
.99b4	4c 94 84	jmp $8494		jmp	ErrorHandler
.99b7					NotDoneError:
.99b7	a9 0c		lda #$0c		lda	#12
.99b9	4c 94 84	jmp $8494		jmp	ErrorHandler
.99bc					ErrorText:
>99bc	42 72 65 61 6b 00			.text	"Break",0
>99c2	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>99ca	72 72 6f 72 00
>99cf	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>99d7	20 62 79 20 7a 65 72 6f 00
>99e0	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>99e8	61 6e 67 65 00
>99ed	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>99f5	6d 61 74 63 68 00
>99fb	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9a03	65 6d 6f 72 79 00
>9a09	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9a11	61 72 67 75 6d 65 6e 74 00
>9a1a	53 74 6f 70 00				.text	"Stop",0
>9a1f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9a27	6f 6f 20 6c 6f 6e 67 00
>9a2f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9a37	6e 20 66 61 69 6c 65 64 00
>9a40	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9a48	61 74 61 00
>9a4c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9a54	65 6e 74 65 64 00
>9a5a	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9a62	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9a6e	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9a76	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9a83	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9a8b	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9a98	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9aa0	68 6f 75 74 20 57 68 69 6c 65 00
>9aab	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9ab3	68 6f 75 74 20 46 6f 72 00
>9abc	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9ac4	61 63 6b 20 66 75 6c 6c 00
>9acd	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9ad5	75 63 74 75 72 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8f78					StackOpen:
.8f78	48		pha				pha 								; save frame byte
.8f79	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8f7b	0a		asl a				asl 	a 							; claim twice this for storage
.8f7c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8f7e	38		sec				sec 								; so basically subtracting from
.8f7f	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8f81	85 34		sta $34				sta 	basicStack
.8f83	b0 08		bcs $8f8d			bcs 	_SONoBorrow
.8f85	c6 35		dec $35				dec 	basicStack+1
.8f87	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8f89	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8f8b	90 04		bcc $8f91			bcc 	_SOMemory
.8f8d					_SONoBorrow:
.8f8d	68		pla				pla 								; get marker back and write at TOS
.8f8e	92 34		sta ($34)			sta 	(basicStack)
.8f90	60		rts				rts
.8f91					_SOMemory:
.8f91							ERR_STACK
.8f91					StackClose:
.8f91	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8f93	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8f95	0a		asl a				asl 	a 							; claim twice this.
.8f96	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8f98	85 34		sta $34				sta 	basicStack
.8f9a	90 02		bcc $8f9e			bcc 	_SCExit
.8f9c	e6 35		inc $35				inc 	basicStack+1
.8f9e					_SCExit:
.8f9e	60		rts				rts
.8f9f					StackCheckFrame:
.8f9f	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8fa1	29 f0		and #$f0			and 	#$F0 						; check type bits
.8fa3	d0 01		bne $8fa6			bne 	_SCFError 					; different, we have structures mixed up
.8fa5	60		rts				rts
.8fa6					_SCFError:
.8fa6	8a		txa				txa 								; report error X
.8fa7	4c 94 84	jmp $8494			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8faa					STKSaveCodePosition:
.8faa	5a		phy				phy
.8fab	98		tya				tya 								; save Y
.8fac	a0 05		ldy #$05			ldy 	#5
.8fae	91 34		sta ($34),y			sta 	(basicStack),y
.8fb0	88		dey				dey 								; save Code Pointer
.8fb1					_STKSaveLoop:
.8fb1	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8fb4	91 34		sta ($34),y			sta 	(basicStack),y
.8fb6	88		dey				dey
.8fb7	d0 f8		bne $8fb1			bne 	_STKSaveLoop
.8fb9	7a		ply				ply
.8fba	60		rts				rts
.8fbb					STKLoadCodePosition:
.8fbb	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8fbd					_STKLoadLoop:
.8fbd	b1 34		lda ($34),y			lda 	(basicStack),y
.8fbf	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8fc2	c8		iny				iny
.8fc3	c0 05		cpy #$05			cpy 	#5
.8fc5	d0 f6		bne $8fbd			bne 	_STKLoadLoop
.8fc7	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8fc9	a8		tay				tay
.8fca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8fcb					StackReset:
.8fcb	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8fcd	85 34		sta $34				sta 	0+basicStack
.8fcf	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8fd1	85 35		sta $35				sta 	1+basicStack
.8fd3	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8fd5	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8fd7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9adc					StringConcrete:
.9adc	5a		phy				phy 								; save position on stack
.9add	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9ae0	85 38		sta $38				sta 	zTemp1
.9ae2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9ae5	85 39		sta $39				sta 	zTemp1+1
.9ae7	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9ae9					_SALength:
.9ae9	c8		iny				iny
.9aea	b1 38		lda ($38),y			lda 	(zTemp1),y
.9aec	d0 fb		bne $9ae9			bne 	_SALength
.9aee	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9af0	b0 3f		bcs $9b31			bcs 	_SALengthError
.9af2	98		tya				tya 				 				; length of the new string
.9af3	18		clc				clc
.9af4	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9af6	90 02		bcc $9afa			bcc 	_SAHaveLength
.9af8	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9afa					_SAHaveLength:
.9afa	48		pha				pha 								; save length.
.9afb	38		sec				sec
.9afc	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9afe	6d 0e 07	adc $070e			adc 	StringMemory
.9b01	8d 0e 07	sta $070e			sta 	StringMemory
.9b04	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9b06	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9b09	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9b0b	6d 0f 07	adc $070f			adc 	StringMemory+1
.9b0e	8d 0f 07	sta $070f			sta 	StringMemory+1
.9b11	85 3b		sta $3b				sta 	zTemp2+1
.9b13	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b16	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9b17	38		sec				sec
.9b18	e9 03		sbc #$03			sbc 	#3
.9b1a	92 3a		sta ($3a)			sta 	(zTemp2)
.9b1c	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9b1e	a0 01		ldy #$01			ldy 	#1
.9b20	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9b22					_SACopyNewString:
.9b22	a0 00		ldy #$00			ldy 	#0
.9b24					_SACopyNSLoop:
.9b24	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9b26	c8		iny				iny 								; write two on in string storage
.9b27	c8		iny				iny
.9b28	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9b2a	88		dey				dey 								; this makes it one one.
.9b2b	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9b2d	d0 f5		bne $9b24			bne 	_SACopyNSLoop
.9b2f	7a		ply				ply
.9b30	60		rts				rts
.9b31					_SALengthError:
.9b31	a9 09		lda #$09		lda	#9
.9b33	4c 94 84	jmp $8494		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9b36					StringSystemInitialise:
.9b36	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9b38	8d 0e 07	sta $070e			sta 	0+StringMemory
.9b3b	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9b3d	8d 0f 07	sta $070f			sta 	1+StringMemory
.9b40	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9b43	60		rts				rts
.9b44					StringSpaceInitialise:
.9b44	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9b46	8d 10 07	sta $0710			sta 	StringInitialised
.9b49	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9b4c	8d 11 07	sta $0711			sta 	StringTempPointer
.9b4f	ad 0f 07	lda $070f			lda 	StringMemory+1
.9b52	3a		dec a				dec 	a
.9b53	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9b56	60		rts				rts
.9b57					StringTempAllocate:
.9b57	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9b59	b0 35		bcs $9b90			bcs 	_STALength
.9b5b	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9b5e	30 05		bmi $9b65			bmi 	_STAAllocate
.9b60	48		pha				pha 								; save value to subtract.
.9b61	20 44 9b	jsr $9b44			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9b64	68		pla				pla 								; restore it
.9b65					_STAAllocate:
.9b65	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9b67	18		clc				clc  								; deliberate allows one more
.9b68	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9b6b	8d 11 07	sta $0711			sta 	StringTempPointer
.9b6e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9b71	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9b73	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9b76	69 ff		adc #$ff			adc 	#$FF
.9b78	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9b7b	85 3d		sta $3d				sta 	zsTemp+1
.9b7d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b80	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9b83	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9b86	a9 10		lda #$10			lda 	#NSTString
.9b88	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b8b	a9 00		lda #$00			lda 	#0 							; clear the target string
.9b8d	92 3c		sta ($3c)			sta 	(zsTemp)
.9b8f	60		rts				rts
.9b90					_STALength:
.9b90	a9 09		lda #$09		lda	#9
.9b92	4c 94 84	jmp $8494		jmp	ErrorHandler
.9b95					StringTempWrite:
.9b95	48		pha				pha
.9b96	92 3c		sta ($3c)			sta 	(zsTemp)
.9b98	e6 3c		inc $3c				inc 	zsTemp
.9b9a	d0 02		bne $9b9e			bne 	_STWNoCarry
.9b9c	e6 3d		inc $3d				inc 	zsTemp+1
.9b9e					_STWNoCarry:
.9b9e	a9 00		lda #$00			lda 	#0
.9ba0	92 3c		sta ($3c)			sta 	(zsTemp)
.9ba2	68		pla				pla
.9ba3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8fd8					BackloadProgram:
.8fd8	a2 ff		ldx #$ff			ldx 	#$FF
.8fda	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8fdd	20 07 90	jsr $9007			jsr 	BLReadByte
.8fe0	30 1e		bmi $9000			bmi 	_BPExit
.8fe2					_BPCopy:
.8fe2	e8		inx				inx  								; copy byte in
.8fe3	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8fe6	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8fe9	20 07 90	jsr $9007			jsr 	BLReadByte 					; read next byte
.8fec	30 0a		bmi $8ff8			bmi 	_BPEndLine 					; -ve = EOL
.8fee	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8ff0	d0 02		bne $8ff4			bne 	_BPNotTab
.8ff2	a9 20		lda #$20			lda 	#' '
.8ff4					_BPNotTab:
.8ff4	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8ff6	b0 ea		bcs $8fe2			bcs 	_BPCopy
.8ff8					_BPEndLine:
.8ff8	20 d1 91	jsr $91d1			jsr 	TokeniseLine 				; tokenise the line.
.8ffb	20 5d 94	jsr $945d			jsr 	MemoryAppend 				; append to current program
.8ffe	80 d8		bra $8fd8			bra 	BackloadProgram
.9000					_BPExit:
.9000	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9003	20 34 81	jsr $8134			jsr 	ClearCommand 				; clear variables etc.
.9006	60		rts				rts
.9007					BLReadByte:
.9007					_BLLoad:
.9007	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.900a	ee 08 90	inc $9008			inc 	_BLLoad+1
.900d	d0 03		bne $9012			bne 	_BLNoCarry
.900f	ee 09 90	inc $9009			inc 	_BLLoad+2
.9012					_BLNoCarry:
.9012	c9 00		cmp #$00			cmp 	#0
.9014	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9015					TokeniseSearchTable:
.9015	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9017	85 36		sta $36				sta 	zTemp0
.9019	a0 00		ldy #$00			ldy 	#0
.901b	a9 80		lda #$80			lda 	#$80 						; token #
.901d	85 38		sta $38				sta 	zTemp1
.901f					_TSTLoop:
.901f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9021	30 49		bmi $906c			bmi 	_TSTFail 					; -ve = end of table
.9023	f0 2e		beq $9053			beq 	_TSTNext 					; zero, check next it's a dummy
.9025	c8		iny				iny 								; get the hash
.9026	b1 36		lda ($36),y			lda 	(zTemp0),y
.9028	88		dey				dey
.9029	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.902c	d0 25		bne $9053			bne 	_TSTNext
.902e	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9031	38		sec				sec
.9032	ed 00 07	sbc $0700			sbc 	identStart
.9035	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9037	d0 1a		bne $9053			bne 	_TSTNext
.9039	5a		phy				phy 								; save Y , we might fail
.903a	c8		iny				iny 								; point to text
.903b	c8		iny				iny
.903c	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.903f					_TSTCompareName:
.903f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.9042	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9044	d0 0c		bne $9052			bne 	_TSTNextPullY 				; fail, pullY and do next
.9046	e8		inx				inx
.9047	c8		iny				iny
.9048	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.904b	d0 f2		bne $903f			bne 	_TSTCompareName
.904d	7a		ply				ply 								; throw Y
.904e	a5 38		lda $38				lda 	zTemp1 						; get token #
.9050	38		sec				sec 								; return with CS = passed.
.9051	60		rts				rts
.9052					_TSTNextPullY:
.9052	7a		ply				ply 								; restore current, fall through.
.9053					_TSTNext:
.9053	e6 38		inc $38				inc 	zTemp1 						; token counter
.9055	98		tya				tya
.9056	18		clc				clc
.9057	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9059	1a		inc a				inc 	a 							; +1
.905a	1a		inc a				inc 	a 							; +2
.905b	a8		tay				tay
.905c	10 c1		bpl $901f			bpl 	_TSTLoop 					; if Y < $80 loop back
.905e	98		tya				tya 								; add Y to zTemp0 and reset Y
.905f	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9061	18		clc				clc  								; but have tables > 255 bytes
.9062	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9064	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9066	90 b7		bcc $901f			bcc 	_TSTLoop
.9068	e6 37		inc $37				inc 	zTemp0+1
.906a	80 b3		bra $901f			bra 	_TSTLoop
.906c					_TSTFail:
.906c	18		clc				clc
.906d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.906e					KeywordSet0:
>906e	00 65					.text	0,$65,""               ; $80 !0:EOF
>9070	00 58					.text	0,$58,""               ; $81 !1:SH1
>9072	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9074	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>907a	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9082	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9088	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>908f	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9096	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>909d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>90a3	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>90ab	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>90b3	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>90b9	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>90c0	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>90c6	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>90ce	28
>90cf	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>90d5	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>90db	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>90e1	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>90e8	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>90ee	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>90f4	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>90f9	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>90fd	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9103	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>910b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9112	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9119	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9121	43
>9122	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9128	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>912e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9135	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>913b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9141	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9146	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>914c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9151	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9159	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>915f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9166	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>916c	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9171	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9178	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>917e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9183	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>918b	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>918f	ff					.text	$FF
.9190					KeywordSet1:
>9190	00 65					.text	0,$65,""               ; $80 !0:EOF
>9192	00 58					.text	0,$58,""               ; $81 !1:SH1
>9194	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9196	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>919e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>91a5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>91aa	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>91b0	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>91b5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>91bd	45
>91be	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>91c3	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>91c9	ff					.text	$FF
.91ca					KeywordSet2:
>91ca	00 65					.text	0,$65,""               ; $80 !0:EOF
>91cc	00 58					.text	0,$58,""               ; $81 !1:SH1
>91ce	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>91d0	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.91d1					TokeniseLine:
.91d1	20 59 93	jsr $9359			jsr 	FixLineBufferCase 			; fix line case
.91d4	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.91d6	8d 15 07	sta $0715			sta 	tokenOffset
.91d9	9c 16 07	stz $0716			stz 	tokenLineNumber
.91dc	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.91df	a2 ff		ldx #$ff			ldx 	#$FF
.91e1					_TKFindFirst:
.91e1	e8		inx				inx
.91e2	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.91e5	f0 79		beq $9260			beq 	_TKExit
.91e7	c9 20		cmp #$20			cmp 	#' '
.91e9	90 f6		bcc $91e1			bcc 	_TKFindFirst
.91eb	c9 30		cmp #$30			cmp 	#'0'
.91ed	90 07		bcc $91f6			bcc 	_TKNoLineNumber
.91ef	c9 3a		cmp #$3a			cmp 	#'9'+1
.91f1	b0 03		bcs $91f6			bcs 	_TKNoLineNumber
.91f3	20 83 93	jsr $9383			jsr 	TokeniseExtractLineNumber
.91f6					_TKNoLineNumber:
.91f6					_TKTokeniseLoop:
.91f6	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.91f9	f0 65		beq $9260			beq 	_TKExit
.91fb	e8		inx				inx
.91fc	c9 20		cmp #$20			cmp 	#' '
.91fe	f0 f6		beq $91f6			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9200	ca		dex				dex 								; undo last get, A contains character, X is position.
.9201	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9203	f0 61		beq $9266			beq 	_TKTokeniseIdentifier
.9205	c9 41		cmp #$41			cmp 	#'A'
.9207	90 04		bcc $920d			bcc 	_TKTokenisePunctuation
.9209	c9 5b		cmp #$5b			cmp 	#'Z'+1
.920b	90 59		bcc $9266			bcc 	_TKTokeniseIdentifier
.920d					_TKTokenisePunctuation:
.920d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.920f	f0 27		beq $9238			beq 	_TKString
.9211	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9213	f0 28		beq $923d			beq 	_TKHexConstant
.9215	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9217	f0 29		beq $9242			beq 	_TKCheckDouble
.9219	c9 3e		cmp #$3e			cmp 	#'>'
.921b	f0 25		beq $9242			beq 	_TKCheckDouble
.921d					_TKStandardPunctuation:
.921d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9220	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9222	90 0e		bcc $9232			bcc 	_TKNoShift
.9224	48		pha				pha 								; save
.9225	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9227	85 36		sta $36				sta 	zTemp0
.9229	68		pla				pla
.922a	29 20		and #$20			and 	#32 						; bit 5
.922c	4a		lsr a				lsr 	a 							; shift into bit 3
.922d	4a		lsr a				lsr 	a
.922e	05 36		ora $36				ora 	zTemp0
.9230	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9232					_TKNoShift:
.9232	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte 			; write the punctuation character
.9235	e8		inx				inx 								; consume the character
.9236	80 be		bra $91f6			bra 	_TKTokeniseLoop 			; and loop round again.
.9238					_TKString:
.9238	20 e8 92	jsr $92e8			jsr 	TokeniseString
.923b	80 b9		bra $91f6			bra 	_TKTokeniseLoop
.923d					_TKHexConstant:
.923d	20 23 93	jsr $9323			jsr 	TokeniseHexConstant
.9240	80 b4		bra $91f6			bra 	_TKTokeniseLoop
.9242					_TKCheckDouble:
.9242	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.9245	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9247	90 d4		bcc $921d			bcc 	_TKStandardPunctuation
.9249	c9 3f		cmp #$3f			cmp 	#'>'+1
.924b	b0 d0		bcs $921d			bcs 	_TKStandardPunctuation
.924d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9250	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9252	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9253	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9256	38		sec				sec
.9257	e9 3c		sbc #$3c			sbc 	#'<'
.9259	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.925c	e8		inx				inx 								; consume both
.925d	e8		inx				inx
.925e	80 96		bra $91f6			bra 	_TKTokeniseLoop
.9260	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9262	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.9265	60		rts				rts
.9266					_TKTokeniseIdentifier:
.9266	8e 00 07	stx $0700			stx 	identStart 					; save start
.9269	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.926c					_TKCheckLoop:
.926c	e8		inx				inx 								; look at next, we know first is identifier.
.926d	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9270	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9272	f0 f8		beq $926c			beq 	_TKCheckLoop
.9274	c9 30		cmp #$30			cmp	 	#"0"
.9276	90 0c		bcc $9284			bcc 	_TKEndIdentifier
.9278	c9 3a		cmp #$3a			cmp 	#"9"+1
.927a	90 f0		bcc $926c			bcc 	_TKCheckLoop
.927c	c9 41		cmp #$41			cmp	 	#"A"
.927e	90 04		bcc $9284			bcc 	_TKEndIdentifier
.9280	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9282	90 e8		bcc $926c			bcc 	_TKCheckLoop
.9284					_TKEndIdentifier:
.9284	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9287	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9289	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.928b	f0 06		beq $9293			beq 	_TKHasTypeCharacter
.928d	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.928f	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9291	d0 07		bne $929a			bne 	_TKNoTypeCharacter
.9293					_TKHasTypeCharacter:
.9293	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9296	e8		inx				inx 								; read next
.9297	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.929a					_TKNoTypeCharacter:
.929a	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.929c	d0 09		bne $92a7			bne 	_TKNoArray
.929e	e8		inx				inx 								; skip the (
.929f	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.92a2	09 04		ora #$04			ora 	#$04
.92a4	8d 04 07	sta $0704			sta 	identTypeByte
.92a7					_TKNoArray:
.92a7	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.92aa	20 44 93	jsr $9344			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.92ad	a0 90		ldy #$90			ldy 	#(KeywordSet0) >> 8
.92af	a9 6e		lda #$6e			lda 	#(KeywordSet0) & $FF
.92b1	20 15 90	jsr $9015			jsr 	TokeniseSearchTable
.92b4	a2 00		ldx #$00			ldx 	#0
.92b6	b0 1f		bcs $92d7			bcs 	_TKFoundToken
.92b8	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.92ba	a9 90		lda #$90			lda 	#(KeywordSet1) & $FF
.92bc	20 15 90	jsr $9015			jsr 	TokeniseSearchTable
.92bf	a2 81		ldx #$81			ldx 	#$81
.92c1	b0 14		bcs $92d7			bcs 	_TKFoundToken
.92c3	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.92c5	a9 90		lda #$90			lda 	#(KeywordSet1) & $FF
.92c7	20 15 90	jsr $9015			jsr 	TokeniseSearchTable
.92ca	a2 82		ldx #$82			ldx 	#$82
.92cc	b0 09		bcs $92d7			bcs 	_TKFoundToken
.92ce	20 d4 93	jsr $93d4			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.92d1	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.92d4	4c f6 91	jmp $91f6			jmp 	_TKTokeniseLoop 			; and go round again.
.92d7					_TKFoundToken:
.92d7	48		pha				pha 								; save token
.92d8	8a		txa				txa 								; shift in X, is there one ?
.92d9	f0 03		beq $92de			beq 	_TKNoTShift
.92db	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte 			; if so, write it out
.92de					_TKNoTShift:
.92de	68		pla				pla 								; restore and write token
.92df	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.92e2	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.92e5	4c f6 91	jmp $91f6			jmp 	_TKTokeniseLoop 			; and go round again.
.92e8					TokeniseString:
.92e8	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.92ea	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.92ed	e8		inx				inx									; start of quoted string.
.92ee	da		phx				phx 								; push start of string on top
.92ef	ca		dex				dex
.92f0					_TSFindEnd:
.92f0	e8		inx				inx
.92f1	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.92f4	f0 04		beq $92fa			beq 	_TSEndOfString
.92f6	c9 22		cmp #$22			cmp 	#'"'
.92f8	d0 f6		bne $92f0			bne 	_TSFindEnd
.92fa					_TSEndOfString:
.92fa	7a		ply				ply  								; so now Y is first character, X is character after end.
.92fb	48		pha				pha 								; save terminating character
.92fc	20 04 93	jsr $9304			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.92ff	68		pla				pla 								; terminating character
.9300	f0 01		beq $9303			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9302	e8		inx				inx
.9303					_TSNotQuote:
.9303	60		rts				rts
.9304					TOWriteBlockXY:
.9304	86 36		stx $36				stx 	zTemp0 						; write end character
.9306	98		tya				tya
.9307	49 ff		eor #$ff			eor 	#$FF
.9309	38		sec				sec
.930a	65 36		adc $36				adc 	zTemp0
.930c	1a		inc a				inc 	a 							; one extra for NULL
.930d	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.9310					_TOBlockLoop:
.9310	c4 36		cpy $36				cpy 	zTemp0
.9312	f0 09		beq $931d			beq 	_TOBlockExit
.9314	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9317	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.931a	c8		iny				iny
.931b	80 f3		bra $9310			bra 	_TOBlockLoop
.931d					_TOBlockExit:
.931d	a9 00		lda #$00			lda 	#0
.931f	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.9322	60		rts				rts
.9323					TokeniseHexConstant:
.9323	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9325	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.9328	e8		inx				inx									; start of quoted string.
.9329	da		phx				phx 								; push start of constant on top
.932a	ca		dex				dex
.932b					_THFindLoop:
.932b	e8		inx				inx
.932c	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.932f	c9 30		cmp #$30			cmp 	#"0"
.9331	90 0c		bcc $933f			bcc 	_THFoundEnd
.9333	c9 3a		cmp #$3a			cmp 	#"9"+1
.9335	90 f4		bcc $932b			bcc 	_THFindLoop
.9337	c9 41		cmp #$41			cmp 	#"A"
.9339	90 04		bcc $933f			bcc 	_THFoundEnd
.933b	c9 47		cmp #$47			cmp 	#"F"+1
.933d	90 ec		bcc $932b			bcc 	_THFindLoop
.933f					_THFoundEnd:
.933f	7a		ply				ply 								; restore start
.9340	20 04 93	jsr $9304			jsr 	TOWriteBlockXY 				; output the block
.9343	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9344					TokeniseCalculateHash:
.9344	da		phx				phx
.9345	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9348	a9 00		lda #$00			lda 	#0
.934a					_TCHLoop:
.934a	18		clc				clc
.934b	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.934e	e8		inx				inx
.934f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9352	d0 f6		bne $934a			bne 	_TCHLoop
.9354	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9357	fa		plx				plx
.9358	60		rts				rts
.9359					FixLineBufferCase:
.9359	a2 00		ldx #$00			ldx 	#0
.935b					_FLBCLoop:
.935b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.935e	f0 22		beq $9382			beq 	_FLBCExit 					; end of string.
.9360	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9362	f0 11		beq $9375			beq 	_FLBCInQuotes
.9364	e8		inx				inx
.9365	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9367	90 f2		bcc $935b			bcc 	_FLBCLoop
.9369	c9 7b		cmp #$7b			cmp 	#'z'+1
.936b	b0 ee		bcs $935b			bcs 	_FLBCLoop
.936d	38		sec				sec 								; make U/C
.936e	e9 20		sbc #$20			sbc 	#32
.9370	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9373	80 e6		bra $935b			bra 	_FLBCLoop
.9375					_FLBCInQuotes:
.9375	e8		inx				inx 								; advance
.9376	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9379	f0 07		beq $9382			beq 	_FLBCExit 					; exit on EOS
.937b	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.937d	d0 f6		bne $9375			bne 	_FLBCInQuotes
.937f	e8		inx				inx 								; skip over it
.9380	80 d9		bra $935b			bra 	_FLBCLoop
.9382					_FLBCExit:
.9382	60		rts				rts
.9383					TokeniseExtractLineNumber:
.9383	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.9386	48		pha				pha
.9387	ad 16 07	lda $0716			lda 	tokenLineNumber
.938a	48		pha				pha
.938b	20 c1 93	jsr $93c1			jsr 	_TELNTimes2 				; line # x 4
.938e	20 c1 93	jsr $93c1			jsr 	_TELNTimes2 				; line # x 2
.9391	18		clc				clc 								; add stacked value
.9392	68		pla				pla
.9393	6d 16 07	adc $0716			adc 	tokenLineNumber
.9396	8d 16 07	sta $0716			sta 	tokenLineNumber
.9399	68		pla				pla
.939a	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.939d	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.93a0	20 c1 93	jsr $93c1			jsr 	_TELNTimes2 				; line # x 10
.93a3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.93a6	e8		inx				inx
.93a7	29 0f		and #$0f			and 	#15 						; add to line #
.93a9	18		clc				clc
.93aa	6d 16 07	adc $0716			adc 	tokenLineNumber
.93ad	8d 16 07	sta $0716			sta 	tokenLineNumber
.93b0	90 03		bcc $93b5			bcc 	_TLENNoCarry
.93b2	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.93b5					_TLENNoCarry:
.93b5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.93b8	c9 30		cmp #$30			cmp 	#'0'
.93ba	90 04		bcc $93c0			bcc 	_TLENExit
.93bc	c9 3a		cmp #$3a			cmp 	#'9'+1
.93be	90 c3		bcc $9383			bcc 	TokeniseExtractLineNumber
.93c0					_TLENExit:
.93c0	60		rts				rts
.93c1					_TELNTimes2:
.93c1	0e 16 07	asl $0716			asl 	tokenLineNumber
.93c4	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.93c7	60		rts				rts
.93c8					TokeniseWriteByte:
.93c8	da		phx				phx
.93c9	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.93cc	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.93cf	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.93d2	fa		plx				plx
.93d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.93d4					CheckCreateVariableRecord:
.93d4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.93d6	85 36		sta $36				sta 	0+zTemp0
.93d8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.93da	85 37		sta $37				sta 	1+zTemp0
.93dc					_CCVSearch:
.93dc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.93de	f0 2c		beq $940c			beq 	_CCVFail
.93e0	a0 01		ldy #$01			ldy 	#1 							; read the hash
.93e2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.93e4	cd 03 07	cmp $0703			cmp 	identHash
.93e7	d0 16		bne $93ff			bne 	_CCVNext
.93e9	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.93eb	ae 00 07	ldx $0700			ldx 	identStart
.93ee					_CCVCompare:
.93ee	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.93f1	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.93f3	e8		inx				inx 								; advance pointers
.93f4	c8		iny				iny
.93f5	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.93f6	d0 07		bne $93ff			bne 	_CCVNext  					; didn't match go to next.
.93f8	90 f4		bcc $93ee			bcc 	_CCVCompare 				; not finished yet.
.93fa	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.93fd	f0 41		beq $9440			beq 	_CCVFound 					; yes, we were successful
.93ff					_CCVNext:
.93ff	18		clc				clc
.9400	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9402	65 36		adc $36				adc 	zTemp0
.9404	85 36		sta $36				sta 	zTemp0
.9406	90 d4		bcc $93dc			bcc 	_CCVSearch
.9408	e6 37		inc $37				inc 	zTemp0+1
.940a	80 d0		bra $93dc			bra 	_CCVSearch
.940c					_CCVFail:
.940c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.940e	ad 03 07	lda $0703			lda 	identHash
.9411	91 36		sta ($36),y			sta 	(zTemp0),y
.9413	c8		iny				iny 								; offset 2 is the type byte
.9414	ad 04 07	lda $0704			lda 	identTypeByte
.9417	91 36		sta ($36),y			sta 	(zTemp0),y
.9419	c8		iny				iny
.941a					_CCVData:
.941a	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.941c	91 36		sta ($36),y			sta 	(zTemp0),y
.941e	c8		iny				iny
.941f	c0 08		cpy #$08			cpy 	#8
.9421	90 f7		bcc $941a			bcc 	_CCVData
.9423	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9426					_CCVCopyName:
.9426	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9429	91 36		sta ($36),y			sta 	(zTemp0),y
.942b	e8		inx				inx
.942c	c8		iny				iny
.942d	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9430	d0 f4		bne $9426			bne 	_CCVCopyName
.9432	98		tya				tya 								; patch offset
.9433	92 36		sta ($36)			sta 	(zTemp0)
.9435	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9437	91 36		sta ($36),y			sta 	(zTemp0),y
.9439	88		dey				dey
.943a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.943c	09 80		ora #$80			ora 	#$80
.943e	91 36		sta ($36),y			sta 	(zTemp0),y
.9440					_CCVFound:
.9440	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9442	38		sec				sec
.9443	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9445	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9447	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.944a	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.944c	20 c8 93	jsr $93c8			jsr 	TokeniseWriteByte
.944f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9ba4					MemoryPeek:
.9ba4	b2 36		lda ($36)			lda 	(zTemp0)
.9ba6	60		rts				rts
.9ba7					MemoryPoke:
.9ba7	92 36		sta ($36)			sta 	(zTemp0)
.9ba9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9baa					PrintHex:
.9baa	48		pha				pha
.9bab	4a		lsr a				lsr 	a
.9bac	4a		lsr a				lsr 	a
.9bad	4a		lsr a				lsr 	a
.9bae	4a		lsr a				lsr 	a
.9baf	20 b3 9b	jsr $9bb3			jsr 	_PrintNibble
.9bb2	68		pla				pla
.9bb3					_PrintNibble:
.9bb3	29 0f		and #$0f			and 	#15
.9bb5	c9 0a		cmp #$0a			cmp 	#10
.9bb7	90 02		bcc $9bbb			bcc 	_NoShift
.9bb9	69 06		adc #$06			adc 	#6
.9bbb					_NoShift:
.9bbb	69 30		adc #$30			adc 	#48
.9bbd	4c c0 9b	jmp $9bc0			jmp 	EXTPrintCharacter
.9bc0					EXTPrintCharacter:
.9bc0	48		pha				pha
.9bc1	da		phx				phx
.9bc2	5a		phy				phy
.9bc3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9bc6	7a		ply				ply
.9bc7	fa		plx				plx
.9bc8	68		pla				pla
.9bc9	60		rts				rts
.9bca					EXTInputSingleCharacter:
.9bca	da		phx				phx
.9bcb	5a		phy				phy
.9bcc					_EISCWait:
.9bcc	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9bcf	c9 00		cmp #$00			cmp 	#0
.9bd1	f0 f9		beq $9bcc			beq 	_EISCWait
.9bd3	7a		ply				ply
.9bd4	fa		plx				plx
.9bd5	60		rts				rts
.9bd6					EXTInputLine:
.9bd6	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9bd8					_ILLoop:
.9bd8	da		phx				phx 								; read character in
.9bd9	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9bdc	fa		plx				plx
.9bdd	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9bdf	f0 12		beq $9bf3			beq 	_ILBackspace
.9be1	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9be3	f0 15		beq $9bfa			beq 	_ILExit
.9be5	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9be7	90 ef		bcc $9bd8			bcc 	_ILLoop
.9be9	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9beb	f0 eb		beq $9bd8			beq 	_ILLoop
.9bed	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9bf0	e8		inx				inx
.9bf1	80 e5		bra $9bd8			bra 	_ILLoop
.9bf3					_ILBackspace:
.9bf3	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9bf5	f0 e1		beq $9bd8			beq 	_ILLoop
.9bf7	ca		dex				dex 								; back one.
.9bf8	80 de		bra $9bd8			bra 	_ILLoop
.9bfa					_ILExit:
.9bfa	20 c0 9b	jsr $9bc0			jsr 	EXTPrintCharacter
.9bfd	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9c00	60		rts				rts
.9c01					EXTBreakCheck:
.9c01	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9450					MemoryNew:
.9450	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9452	85 30		sta $30				sta 	codePtr
.9454	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9456	85 31		sta $31				sta 	codePtr+1
.9458	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.945a	92 30		sta ($30)			sta 	(codePtr)
.945c	60		rts				rts
.945d					MemoryAppend:
.945d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.945f	85 30		sta $30				sta 	codePtr
.9461	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9463	85 31		sta $31				sta 	codePtr+1
.9465					_MAFindEnd:
.9465	b2 30		lda ($30)			lda 	(codePtr)
.9467	f0 0d		beq $9476			beq 	_MAFoundEnd
.9469	18		clc				clc
.946a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.946c	65 30		adc $30				adc 	codePtr
.946e	85 30		sta $30				sta 	codePtr
.9470	90 02		bcc $9474			bcc 	_CREExit
.9472	e6 31		inc $31				inc 	codePtr+1
.9474					_CREExit:
.9474	80 ef		bra $9465			bra 	_MAFindEnd
.9476					_MAFoundEnd:
.9476	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9479	c0 04		cpy #$04			cpy 	#4 							; blank line
.947b	f0 0e		beq $948b			beq 	_MANoLine
.947d	a9 00		lda #$00			lda 	#0 							; end of program
.947f	91 30		sta ($30),y			sta 	(codePtr),y
.9481					_MACopy:
.9481	88		dey				dey
.9482	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9485	91 30		sta ($30),y			sta 	(codePtr),y
.9487	c0 00		cpy #$00			cpy 	#0
.9489	d0 f6		bne $9481			bne 	_MACopy
.948b					_MANoLine:
.948b	60		rts				rts
.948c					MemoryInline:
.948c	98		tya				tya 								; put address into stack,x
.948d	18		clc				clc
.948e	65 30		adc $30				adc 	codePtr
.9490	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9493	a5 31		lda $31				lda 	codePtr+1
.9495	69 00		adc #$00			adc 	#0
.9497	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.949a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.949d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.94a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.94a1					MemoryTransferAX:
.94a1	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.94a3	86 37		stx $37				stx 	zTemp0+1
.94a5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94a7	85 30		sta $30				sta 	codePtr
.94a9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94ab	85 31		sta $31				sta 	codePtr+1
.94ad					_MTAXLoop:
.94ad	b2 30		lda ($30)			lda 	(codePtr)
.94af	f0 1d		beq $94ce			beq 	_MTAXError 					; not found.
.94b1	a0 01		ldy #$01			ldy 	#1 							; check LSB
.94b3	b1 30		lda ($30),y			lda 	(codePtr),y
.94b5	c5 36		cmp $36				cmp 	zTemp0
.94b7	d0 07		bne $94c0			bne 	_MTAXNext
.94b9	c8		iny				iny 								; check MSB
.94ba	b1 30		lda ($30),y			lda 	(codePtr),y
.94bc	c5 37		cmp $37				cmp 	zTemp0+1
.94be	f0 0d		beq $94cd			beq 	_MTAXExit 					; success !
.94c0					_MTAXNext:
.94c0	18		clc				clc
.94c1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94c3	65 30		adc $30				adc 	codePtr
.94c5	85 30		sta $30				sta 	codePtr
.94c7	90 02		bcc $94cb			bcc 	_CREExit
.94c9	e6 31		inc $31				inc 	codePtr+1
.94cb					_CREExit:
.94cb	80 e0		bra $94ad			bra 	_MTAXLoop
.94cd					_MTAXExit:
.94cd	60		rts				rts
.94ce					_MTAXError:
.94ce	a9 0d		lda #$0d		lda	#13
.94d0	4c 94 84	jmp $8494		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
