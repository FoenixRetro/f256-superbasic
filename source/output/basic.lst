
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct 13 14:00:48 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_JOYBLPAREN                       = $8c; $8c JOYB(
=$8d					KWD_JOYXLPAREN                       = $8d; $8d JOYX(
=$8e					KWD_JOYYLPAREN                       = $8e; $8e JOYY(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOTLPAREN                        = $92; $92 NOT(
=$93					KWD_RANDOMLPAREN                     = $93; $93 RANDOM(
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TIMERLPAREN                      = $99; $99 TIMER(
=$9a					KWD_TRUE                             = $9a; $9a TRUE
=$9b					KWD_VALLPAREN                        = $9b; $9b VAL(
=$9c					KWD_FOR                              = $9c; $9c FOR
=$9d					KWD_IF                               = $9d; $9d IF
=$9e					KWD_PROC                             = $9e; $9e PROC
=$9f					KWD_REPEAT                           = $9f; $9f REPEAT
=$a0					KWD_WHILE                            = $a0; $a0 WHILE
=$a1					KWD_ENDIF                            = $a1; $a1 ENDIF
=$a2					KWD_ENDPROC                          = $a2; $a2 ENDPROC
=$a3					KWD_NEXT                             = $a3; $a3 NEXT
=$a4					KWD_THEN                             = $a4; $a4 THEN
=$a5					KWD_UNTIL                            = $a5; $a5 UNTIL
=$a6					KWD_WEND                             = $a6; $a6 WEND
=$a7					KWD_BY                               = $a7; $a7 BY
=$a8					KWD_CALL                             = $a8; $a8 CALL
=$a9					KWD_CIRCLE                           = $a9; $a9 CIRCLE
=$aa					KWD_CLEAR                            = $aa; $aa CLEAR
=$ab					KWD_CLS                              = $ab; $ab CLS
=$ac					KWD_COLOR                            = $ac; $ac COLOR
=$ad					KWD_COLOUR                           = $ad; $ad COLOUR
=$ae					KWD_DATA                             = $ae; $ae DATA
=$af					KWD_DIM                              = $af; $af DIM
=$b0					KWD_DOWNTO                           = $b0; $b0 DOWNTO
=$b1					KWD_ELSE                             = $b1; $b1 ELSE
=$b2					KWD_FROM                             = $b2; $b2 FROM
=$b3					KWD_GFX                              = $b3; $b3 GFX
=$b4					KWD_GOSUB                            = $b4; $b4 GOSUB
=$b5					KWD_GOTO                             = $b5; $b5 GOTO
=$b6					KWD_HERE                             = $b6; $b6 HERE
=$b7					KWD_IMAGE                            = $b7; $b7 IMAGE
=$b8					KWD_LET                              = $b8; $b8 LET
=$b9					KWD_LINE                             = $b9; $b9 LINE
=$ba					KWD_LOCAL                            = $ba; $ba LOCAL
=$bb					KWD_OFF                              = $bb; $bb OFF
=$bc					KWD_ON                               = $bc; $bc ON
=$bd					KWD_OUTLINE                          = $bd; $bd OUTLINE
=$be					KWD_PLOT                             = $be; $be PLOT
=$bf					KWD_PRINT                            = $bf; $bf PRINT
=$c0					KWD_READ                             = $c0; $c0 READ
=$c1					KWD_RECT                             = $c1; $c1 RECT
=$c2					KWD_REM                              = $c2; $c2 REM
=$c3					KWD_RETURN                           = $c3; $c3 RETURN
=$c4					KWD_SOLID                            = $c4; $c4 SOLID
=$c5					KWD_SPRITE                           = $c5; $c5 SPRITE
=$c6					KWD_TEXT                             = $c6; $c6 TEXT
=$c7					KWD_TO                               = $c7; $c7 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9c					KWC_FIRST_STRUCTURE = $9c
=$a1					KWC_FIRST_STRUCTURE_DEC = $a1
=$a6					KWC_LAST_STRUCTURE = $a6
=$83					KWC_FIRST_UNARY = $83
=$9b					KWC_LAST_UNARY = $9b

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 7c b4	jsr $b47c			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 4e 99	jsr $994e			jsr 	PrintStringXA
.8014	20 e5 92	jsr $92e5			jsr 	NewCommand 					; erase current program
.8017	20 f3 a5	jsr $a5f3			jsr 	BackloadProgram
.801a	4c 37 8b	jmp $8b37			jmp 	WarmStart
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 2064."
>8065	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>8075	32 32 2e 20 42 75 69 6c 64 20 32 30 36 34 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8087					GXGraphicDraw:
.8087	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8089	b0 06		bcs $8091			bcs 	_GDCoordinate
.808b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808d	84 37		sty $37				sty 	gxzTemp0+1
.808f	80 3d		bra $80ce			bra 	_GDExecuteA 				; and execute
.8091					_GDCoordinate:
.8091	48		pha				pha 								; save AXY
.8092	da		phx				phx
.8093	5a		phy				phy
.8094	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8096					_GDCopy1:
.8096	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8099	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809c	ca		dex				dex
.809d	10 f7		bpl $8096			bpl 	_GDCopy1
.809f	68		pla				pla 								; update Y
.80a0	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a3	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a6	68		pla				pla
.80a7	8d 29 06	sta $0629			sta 	gxCurrentX
.80aa	68		pla				pla 								; get A (command+X.1) back
.80ab	48		pha				pha
.80ac	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ae	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b1	f0 07		beq $80ba			beq 	_GDXOkay 					; check X range
.80b3	ad 29 06	lda $0629			lda 	gxCurrentX
.80b6	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b8	b0 1e		bcs $80d8			bcs 	_GDError
.80ba					_GDXOkay:
.80ba	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bd	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c0	b0 16		bcs $80d8			bcs 	_GDError
.80c2	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c4					_GDCopy2:
.80c4	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c7	9d 31 06	sta $0631,x			sta 	gxX0,x
.80ca	ca		dex				dex
.80cb	10 f7		bpl $80c4			bpl 	_GDCopy2
.80cd	68		pla				pla 								; get command back
.80ce					_GDExecuteA:
.80ce	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d0	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d2	b0 05		bcs $80d9			bcs 	_GDError2
.80d4	aa		tax				tax
.80d5	7c de 80	jmp ($80de,x)			jmp 	(GRVectorTable,x)
.80d8					_GDError:
.80d8	68		pla				pla 								; throw command
.80d9					_GDError2:
.80d9	38		sec				sec
.80da	60		rts				rts
.80db					GXMove:
.80db	18		clc				clc
.80dc	60		rts				rts
.80dd					GRUndefined:
>80dd	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80de					GRVectorTable:
>80de	ad 82					.word	GXInitialise             ; $00 Initialise
>80e0	c4 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e2	0c 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e4	5f 82					.word	GXClearBitmap            ; $03 Clear
>80e6	8a 84					.word	GXSetColourMode          ; $04 Colour
>80e8	4e 86					.word	GXFontHandler            ; $05 DrawFont
>80ea	96 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ec	fe 86					.word	GXSelect                 ; $07 SPRUSE
>80ee	24 87					.word	GXSelectImage            ; $08 SPRIMG
>80f0	dd 80					.word	GRUndefined              ; $09
>80f2	dd 80					.word	GRUndefined              ; $0a
>80f4	dd 80					.word	GRUndefined              ; $0b
>80f6	dd 80					.word	GRUndefined              ; $0c
>80f8	dd 80					.word	GRUndefined              ; $0d
>80fa	dd 80					.word	GRUndefined              ; $0e
>80fc	dd 80					.word	GRUndefined              ; $0f
>80fe	db 80					.word	GXMove                   ; $10 Move
>8100	58 83					.word	GXLine                   ; $11 Line
>8102	d3 84					.word	GXFrameRectangle         ; $12 FrameRect
>8104	d0 84					.word	GXFillRectangle          ; $13 FillRect
>8106	16 81					.word	GXFrameCircle            ; $14 FrameCircle
>8108	12 81					.word	GXFillCircle             ; $15 FillCircle
>810a	dd 80					.word	GRUndefined              ; $16
>810c	dd 80					.word	GRUndefined              ; $17
>810e	b8 84					.word	GXPlotPoint              ; $18 Plot
>8110	89 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8112					GXFillCircle:
.8112	a9 ff		lda #$ff			lda 	#255
.8114	80 02		bra $8118			bra 	GXCircle
.8116					GXFrameCircle:
.8116	a9 00		lda #$00			lda 	#0
.8118					GXCircle:
.8118	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811b	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811e	f0 26		beq $8146			beq 	_GXCFail
.8120	20 89 88	jsr $8889			jsr 	GXSortXY 					; topleft/bottomright
.8123	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.8126	20 18 82	jsr $8218			jsr 	GXCircleSetup 				; set up for drawing
.8129	9c 4d 06	stz $064d			stz 	gxYChanged
.812c					_GXCircleDraw:
.812c	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.812f	cd 4b 06	cmp $064b			cmp 	gYCentre
.8132	90 0a		bcc $813e			bcc 	_GXCircleContinue
.8134	d0 03		bne $8139			bne 	_GXNoLast
.8136	20 4b 81	jsr $814b			jsr 	GXPlot1
.8139					_GXNoLast:
.8139	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; close the bitmap
.813c	18		clc				clc
.813d	60		rts				rts
.813e					_GXCircleContinue:
.813e	20 48 81	jsr $8148			jsr 	GXPlot2 					; draw it
.8141	20 c5 81	jsr $81c5			jsr 	GXCircleMove 				; adjust the coordinates
.8144	80 e6		bra $812c			bra 	_GXCircleDraw
.8146					_GXCFail:
.8146	38		sec				sec
.8147	60		rts				rts
.8148					GXPlot2:
.8148	20 4b 81	jsr $814b			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814b					GXPlot1:
.814b	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814e	f0 03		beq $8153			beq 	_GXPlot1Only
.8150	20 6f 81	jsr $816f			jsr 	GXPlot0 						; plot and negate
.8153					_GXPlot1Only:
.8153	20 6f 81	jsr $816f			jsr 	GXPlot0 						; twice, undoing negation
.8156	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.8159	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815c	8d 4b 06	sta $064b			sta 	gYCentre
.815f	8e 4a 06	stx $064a			stx 	gXCentre
.8162	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8165	a9 ff		lda #$ff			lda 	#$FF
.8167	8d 4d 06	sta $064d			sta 	gxYChanged
.816a	60		rts				rts
.816b	20 6f 81	jsr $816f			jsr 	GXPlot0 						; do once
.816e	60		rts				rts
.816f	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8172	f0 05		beq $8179			beq 	_GXPlot0Always
.8174	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8177	f0 2d		beq $81a6			beq 	GXPlot0Exit
.8179					_GXPlot0Always:
.8179	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817b	ad 4b 06	lda $064b			lda 	gYCentre
.817e	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8181	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8183	ad 4a 06	lda $064a			lda 	gXCentre
.8186	20 a7 81	jsr $81a7			jsr 	GXSubCopy
.8189	48		pha				pha 									; save last offset X
.818a	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 					; calculate position/offset.
.818d	68		pla				pla
.818e	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.818f	85 36		sta $36				sta 	gxzTemp0
.8191	64 37		stz $37				stz 	gxzTemp0+1
.8193	26 37		rol $37				rol 	gxzTemp0+1
.8195	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8198	69 80		adc #$80			adc 	#128
.819a	20 23 85	jsr $8523			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819d	38		sec				sec 									; GY = -GY
.819e	a9 00		lda #$00			lda 	#0
.81a0	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a3	8d 4b 06	sta $064b			sta 	gYCentre
.81a6					GXPlot0Exit:
.81a6	60		rts				rts
.81a7					GXSubCopy:
.81a7	85 36		sta $36				sta 	gxzTemp0
.81a9	64 37		stz $37				stz 	gxzTemp0+1
.81ab	29 80		and #$80			and 	#$80
.81ad	f0 02		beq $81b1			beq 	_GXNoSx
.81af	c6 37		dec $37				dec 	gxzTemp0+1
.81b1					_GXNoSx:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b5	e5 36		sbc $36				sbc 	gxzTemp0
.81b7	9d 31 06	sta $0631,x			sta 	gXX0,x
.81ba	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81bd	e5 37		sbc $37				sbc 	gxzTemp0+1
.81bf	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c2	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c4	60		rts				rts
.81c5					GXCircleMove:
.81c5	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c8	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81ca	10 0d		bpl $81d9			bpl 	_GXEMPositive
.81cc	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81cf	ad 4a 06	lda $064a			lda 	gXCentre
.81d2	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d5	a9 06		lda #$06			lda 	#6  						; and add 6
.81d7	80 15		bra $81ee			bra 	_GXEMAddD
.81d9					_GXEMPositive:
.81d9	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dc	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81df	38		sec				sec 								; calculate X-Y
.81e0	ad 4a 06	lda $064a			lda 	gXCentre
.81e3	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e6	20 f8 81	jsr $81f8			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81e9	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81eb	ce 4d 06	dec $064d			dec 	gxYChanged
.81ee					_GXEMAddD:
.81ee	18		clc				clc
.81ef	65 38		adc $38				adc 	gxzTemp1
.81f1	85 38		sta $38				sta 	gxzTemp1
.81f3	90 02		bcc $81f7			bcc 	_GXEMNoCarry
.81f5	e6 39		inc $39				inc 	gxzTemp1+1
.81f7					_GXEMNoCarry:
.81f7	60		rts				rts
.81f8					_GXAdd4TimesToD:
.81f8	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fa	29 80		and #$80			and 	#$80
.81fc	f0 02		beq $8200			beq 	_GXA4Unsigned
.81fe	a9 ff		lda #$ff			lda 	#$FF
.8200					_GXA4Unsigned:
.8200	85 37		sta $37				sta 	gxzTemp0+1
.8202	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8204	26 37		rol $37				rol 	gxzTemp0+1
.8206	06 36		asl $36				asl 	gxzTemp0
.8208	26 37		rol $37				rol 	gxzTemp0+1
.820a	18		clc				clc 								; add
.820b	a5 36		lda $36				lda		gxzTemp0
.820d	65 38		adc $38				adc 	gxzTemp1
.820f	85 38		sta $38				sta 	gxzTemp1
.8211	a5 37		lda $37				lda		gxzTemp0+1
.8213	65 39		adc $39				adc 	gxzTemp1+1
.8215	85 39		sta $39				sta 	gxzTemp1+1
.8217	60		rts				rts
.8218					GXCircleSetup:
.8218	38		sec				sec
.8219	ad 37 06	lda $0637			lda 	gxY1
.821c	ed 33 06	sbc $0633			sbc 	gxY0
.821f	4a		lsr a				lsr 	a
.8220	8d 49 06	sta $0649			sta 	gxRadius
.8223	a2 00		ldx #$00			ldx 	#0
.8225	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.8228	a2 02		ldx #$02			ldx 	#2
.822a	20 47 82	jsr $8247			jsr 	_GXCalculateCentre
.822d	9c 4a 06	stz $064a			stz 	gXCentre
.8230	ad 49 06	lda $0649			lda 	gxRadius
.8233	8d 4b 06	sta $064b			sta 	gYCentre
.8236	0a		asl a				asl 	a 							; R x 2
.8237	85 36		sta $36				sta 	gxzTemp0
.8239	38		sec				sec
.823a	a9 03		lda #$03			lda 	#3
.823c	e5 36		sbc $36				sbc 	gxzTemp0
.823e	85 38		sta $38				sta 	gxzTemp1
.8240	a9 00		lda #$00			lda 	#0
.8242	e9 00		sbc #$00			sbc 	#0
.8244	85 39		sta $39				sta 	gxzTemp1+1
.8246	60		rts				rts
.8247					_GXCalculateCentre:
.8247	38		sec				sec
.8248	bd 35 06	lda $0635,x			lda 	gxX1,x
.824b	7d 31 06	adc $0631,x			adc 	gXX0,x
.824e	9d 35 06	sta $0635,x			sta 	gXX1,x
.8251	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8254	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8257	4a		lsr a				lsr 	a
.8258	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825b	7e 35 06	ror $0635,x			ror 	gXX1,x
.825e	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.825f					GXClearBitmap:
.825f	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8262	f0 24		beq $8288			beq 	_GXCBFail
.8264	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start access
.8267	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8269	ad 3d 06	lda $063d			lda 	gxHeight
.826c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8270					_GXCalcLastPage:
.8270	98		tya				tya 								; add to base page
.8271	18		clc				clc
.8272	6d 3b 06	adc $063b			adc 	gxBasePage
.8275	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8277					_GXClearAll:
.8277	20 8a 82	jsr $828a			jsr 	_GXClearBlock 				; clear 8k block
.827a	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827c	a5 0b		lda $0b				lda 	GXEditSlot
.827e	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8281	b0 f4		bcs $8277			bcs 	_GXClearAll
.8283	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap	 			; stop access
.8286	18		clc				clc
.8287	60		rts				rts
.8288					_GXCBFail:
.8288	38		sec				sec
.8289	60		rts				rts
.828a					_GXClearBlock:
.828a	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828c	85 38		sta $38				sta 	0+gxzTemp1
.828e	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8290	85 39		sta $39				sta 	1+gxzTemp1
.8292					_GXCB0:
.8292	a5 36		lda $36				lda 	gxzTemp0
.8294	a0 00		ldy #$00			ldy 	#0
.8296					_GXCB1:
.8296	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8298	c8		iny				iny
.8299	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829b	c8		iny				iny
.829c	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829e	c8		iny				iny
.829f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a1	c8		iny				iny
.82a2	d0 f2		bne $8296			bne 	_GXCB1
.82a4	e6 39		inc $39				inc 	gxzTemp1+1
.82a6	a5 39		lda $39				lda 	gxzTemp1+1
.82a8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82aa	d0 e6		bne $8292			bne 	_GXCB0
.82ac	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ad					GXInitialise:
.82ad	64 01		stz $01				stz 	1
.82af	a9 01		lda #$01			lda 	#1
.82b1	8d 00 d0	sta $d000			sta 	$D000
.82b4	18		clc				clc
.82b5	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b8	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bb	a2 0f		ldx #$0f			ldx 	#15
.82bd					_GXIClear:
.82bd	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c0	ca		dex				dex
.82c1	10 fa		bpl $82bd			bpl 	_GXIClear
.82c3	60		rts				rts
.82c4					GXControlBitmap:
.82c4	64 01		stz $01				stz 	1
.82c6	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c8	29 01		and #$01			and 	#1 							; set bitmap flag
.82ca	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82cd	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82ce	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d1	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d3	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d5	90 02		bcc $82d9			bcc 	_CBNotOn
.82d7	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82d9					_CBNotOn:
.82d9	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dc	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82de	29 07		and #$07			and 	#7
.82e0	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e3	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e5	d0 02		bne $82e9			bne 	_CBNotDefault
.82e7	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82e9					_CBNotDefault:
.82e9	8d 3b 06	sta $063b			sta 	gxBasePage
.82ec	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82ef	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f1	8d 03 d1	sta $d103			sta 	$D103
.82f4	a5 36		lda $36				lda 	gxzTemp0
.82f6	8d 02 d1	sta $d102			sta 	$D102
.82f9	9c 01 d1	stz $d101			stz 	$D101
.82fc	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82fe	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8301	29 01		and #$01			and 	#1
.8303	f0 02		beq $8307			beq 	_CBHaveHeight
.8305	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8307					_CBHaveHeight
.8307	8e 3d 06	stx $063d			stx 	gxHeight
.830a	18		clc				clc
.830b	60		rts				rts
.830c					GXControlSprite:
.830c	64 01		stz $01				stz 	1
.830e	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8310	29 01		and #$01			and 	#1 							; set sprites flag
.8312	8d 39 06	sta $0639			sta 	gxSpritesOn
.8315	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8316	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8319	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831b	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831d	90 02		bcc $8321			bcc 	_CSNotOn
.831f	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8321					_CSNotOn:
.8321	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8324	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8326	d0 02		bne $832a			bne 	_CSNotDefault
.8328	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832a					_CSNotDefault:
.832a	8d 3c 06	sta $063c			sta 	gxSpritePage
.832d	20 4a 83	jsr $834a			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8330	a5 36		lda $36				lda 	zTemp0
.8332	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8335	a5 37		lda $37				lda 	zTemp0+1
.8337	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833a	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833c					_CSClear:
.833c	9e 00 d9	stz $d900,x			stz 	$D900,x
.833f	9e 00 da	stz $da00,x			stz 	$DA00,x
.8342	ca		dex				dex
.8343	d0 f7		bne $833c			bne 	_CSClear
.8345	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8348	18		clc				clc
.8349	60		rts				rts
.834a					GXCalculateBaseAddress:
.834a	85 36		sta $36				sta 	gxzTemp0
.834c	64 37		stz $37				stz 	gxzTemp0+1
.834e	a9 05		lda #$05			lda 	#5
.8350					_GXShift:
.8350	06 36		asl $36				asl 	gxzTemp0
.8352	26 37		rol $37				rol 	gxzTemp0+1
.8354	3a		dec a				dec		a
.8355	d0 f9		bne $8350			bne 	_GXShift
.8357	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8358					GXLine:
.8358	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835b	f0 28		beq $8385			beq 	_GXLFail
.835d	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.8360	20 a7 88	jsr $88a7			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8363	20 2b 84	jsr $842b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8366	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8369					_GXDrawLoop:
.8369	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836e	2d 41 06	and $0641			and 	gxANDValue
.8371	4d 40 06	eor $0640			eor 	gxEORValue
.8374	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8376	20 87 83	jsr $8387			jsr 	GXLineIsComplete 			; is the line complete ?
.8379	f0 05		beq $8380			beq 	_GXLExit
.837b	20 a2 83	jsr $83a2			jsr 	GXLineAdvance 				; code as per advance method
.837e	80 e9		bra $8369			bra 	_GXDrawLoop
.8380					_GXLExit:
.8380	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8383	18		clc				clc
.8384	60		rts				rts
.8385					_GXLFail:
.8385	38		sec				sec
.8386	60		rts				rts
.8387					GXLineIsComplete:
.8387	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838a	d0 0f		bne $839b			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838c	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.838f	4d 35 06	eor $0635			eor 	GXX1
.8392	d0 06		bne $839a			bne 	_GXLICExit
.8394	ad 32 06	lda $0632			lda 	GXX0+1
.8397	4d 36 06	eor $0636			eor 	GXX1+1
.839a					_GXLICExit:
.839a	60		rts				rts
.839b					_GXLICCompareY:
.839b	ad 37 06	lda $0637			lda 	GXY1
.839e	4d 33 06	eor $0633			eor 	GXY0
.83a1	60		rts				rts
.83a2					GXLineAdvance:
.83a2	18		clc				clc 								; add adjust to position
.83a3	ad 52 06	lda $0652			lda 	GXPosition
.83a6	6d 53 06	adc $0653			adc 	GXAdjust
.83a9	8d 52 06	sta $0652			sta 	GXPosition
.83ac	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83af	b0 05		bcs $83b6			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b1	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b4	90 0a		bcc $83c0			bcc 	_GXLANoExtra
.83b6					_GXLAOverflow:
.83b6	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83b9	38		sec				sec 								; subtract total and write back
.83ba	ed 54 06	sbc $0654			sbc 	GXTotal
.83bd	8d 52 06	sta $0652			sta 	GXPosition
.83c0					_GXLANoExtra:
.83c0	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c3	f0 0d		beq $83d2			beq 	_GXDXLarger
.83c5	20 24 84	jsr $8424			jsr 	GXIncrementY
.83c8	ad 55 06	lda $0655			lda 	GXAddSelect
.83cb	f0 10		beq $83dd			beq 	_GXLAExit
.83cd	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d0	80 0b		bra $83dd			bra 	_GXLAExit
.83d2					_GXDXLarger:
.83d2	20 de 83	jsr $83de			jsr 	GXAdjustX
.83d5	ad 55 06	lda $0655			lda 	GXAddSelect
.83d8	f0 03		beq $83dd			beq 	_GXLAExit
.83da	20 24 84	jsr $8424			jsr 	GXIncrementY
.83dd					_GXLAExit:
.83dd	60		rts				rts
.83de					GXAdjustX:
.83de	ad 51 06	lda $0651			lda 	GXDXNegative
.83e1	10 25		bpl $8408			bpl 	_GXAXRight
.83e3	ad 31 06	lda $0631			lda 	GXX0
.83e6	d0 03		bne $83eb			bne 	_GXAXNoBorrow
.83e8	ce 32 06	dec $0632			dec 	GXX0+1
.83eb					_GXAXNoBorrow:
.83eb	ce 31 06	dec $0631			dec 	GXX0
.83ee	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f1	ad 44 06	lda $0644			lda 	gsOffset
.83f4	c9 ff		cmp #$ff			cmp 	#$FF
.83f6	d0 0f		bne $8407			bne 	_GXAYExit 					; underflow
.83f8	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fa	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fc	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83fe	b0 07		bcs $8407			bcs 	_GXAYExit
.8400	18		clc				clc
.8401	69 20		adc #$20			adc 	#$20 						; fix up
.8403	85 3d		sta $3d				sta 	gxzScreen+1
.8405	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8407					_GXAYExit:
.8407	60		rts				rts
.8408					_GXAXRight:
.8408	ee 31 06	inc $0631			inc 	GXX0
.840b	d0 03		bne $8410			bne 	_GXAXNoCarry
.840d	ee 32 06	inc $0632			inc 	GXX0+1
.8410					_GXAXNoCarry:
.8410	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8413	d0 0e		bne $8423			bne 	_GXAXExit 					; if not overflowed, exit.
.8415	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8417	a5 3d		lda $3d				lda 	gxzScreen+1
.8419	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841b	90 06		bcc $8423			bcc 	_GXAXExit
.841d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8423					_GXAXExit:
.8423	60		rts				rts
.8424					GXIncrementY:
.8424	ee 33 06	inc $0633			inc 	GXY0
.8427	20 32 88	jsr $8832			jsr 	GXMovePositionDown
.842a	60		rts				rts
.842b					GXLineSetup:
.842b	ad 37 06	lda $0637			lda 	GXY1
.842e	38		sec				sec
.842f	ed 33 06	sbc $0633			sbc 	GXY0
.8432	4a		lsr a				lsr 	a
.8433	8d 4f 06	sta $064f			sta 	GXDiffY
.8436	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.8439	38		sec				sec
.843a	ad 35 06	lda $0635			lda 	GXX1
.843d	ed 31 06	sbc $0631			sbc 	GXX0
.8440	8d 4e 06	sta $064e			sta 	GXDiffX
.8443	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8446	ed 32 06	sbc $0632			sbc 	GXX0+1
.8449	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844a	6e 4e 06	ror $064e			ror 	GXDiffX
.844d	0a		asl a				asl 	a
.844e	10 0c		bpl $845c			bpl 	_GDXNotNegative
.8450	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8452	38		sec				sec
.8453	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8456	8d 4e 06	sta $064e			sta 	GXDiffX
.8459	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845c					_GDXNotNegative:
.845c	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.845f	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8462	8d 53 06	sta $0653			sta 	GXAdjust
.8465	ad 4e 06	lda $064e			lda 	GXDiffX
.8468	8d 54 06	sta $0654			sta 	GXTotal
.846b	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846e	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8471	90 0f		bcc $8482			bcc 	_GDXNotLarger
.8473	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8476	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.8479	8d 53 06	sta $0653			sta 	GXAdjust
.847c	ad 4f 06	lda $064f			lda 	GXDiffY
.847f	8d 54 06	sta $0654			sta 	GXTotal
.8482					_GDXNotLarger:
.8482	ad 54 06	lda $0654			lda 	GXTotal
.8485	4a		lsr a				lsr 	a
.8486	8d 52 06	sta $0652			sta 	GXPosition
.8489	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848a					GXSetColourMode:
.848a	a6 36		ldx $36				ldx 	gxzTemp0
.848c	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.848f	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8491	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8494	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8496	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8499	ae 3f 06	ldx $063f			ldx 	gxColour
.849c	8e 40 06	stx $0640			stx 	gxEORValue
.849f	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a1	90 03		bcc $84a6			bcc 	_GXSDCNotAndColour
.84a3	8e 41 06	stx $0641			stx 	gxANDValue
.84a6					_GXSDCNotAndColour:
.84a6	d0 03		bne $84ab			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a8	9c 40 06	stz $0640			stz 	gxEORValue
.84ab					_GXSDCNotAnd:
.84ab	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ac	90 08		bcc $84b6			bcc 	_GXSDCNoFlip
.84ae	ad 41 06	lda $0641			lda	 	gxANDValue
.84b1	49 ff		eor #$ff			eor 	#$FF
.84b3	8d 41 06	sta $0641			sta 	gxANDValue
.84b6					_GXSDCNoFlip:
.84b6	18		clc				clc
.84b7	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b8					GXPlotPoint:
.84b8	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84bb	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84be	ac 44 06	ldy $0644			ldy 	gsOffset
.84c1	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c3	2d 41 06	and $0641			and 	gxANDValue
.84c6	4d 40 06	eor $0640			eor 	gxEORValue
.84c9	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cb	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ce	18		clc				clc
.84cf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d0					GXFillRectangle:
.84d0	38		sec				sec
.84d1	80 01		bra $84d4			bra 	GXRectangle
.84d3					GXFrameRectangle:
.84d3	18		clc				clc
.84d4					GXRectangle:
.84d4	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d7	f0 35		beq $850e			beq 	_GXRFail
.84d9	08		php				php 								; save Fill flag (CS)
.84da	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; start drawing
.84dd	20 89 88	jsr $8889			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e0	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e3	38		sec				sec 								; sec = Draw line
.84e4	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e7	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84ea	cd 37 06	cmp $0637			cmp 	gxY1
.84ed	f0 19		beq $8508			beq 	_GXRectangleExit
.84ef					_GXRectLoop:
.84ef	20 32 88	jsr $8832			jsr 	GXMovePositionDown 			; down one.
.84f2	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f5	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f8	cd 37 06	cmp $0637			cmp 	gXY1
.84fb	f0 07		beq $8504			beq 	_GXLastLine
.84fd	28		plp				plp 								; get flag back
.84fe	08		php				php
.84ff	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8502	80 eb		bra $84ef			bra 	_GXRectLoop
.8504					_GXLastLine:
.8504	38		sec				sec
.8505	20 10 85	jsr $8510			jsr 	GXDrawLineX1X0
.8508					_GXRectangleExit:
.8508	68		pla				pla 								; throw fill flag.
.8509	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap 				; stop drawing and exit
.850c	18		clc				clc
.850d	60		rts				rts
.850e					_GXRFail:
.850e	38		sec				sec
.850f	60		rts				rts
.8510					GXDrawLineX1X0:
.8510	08		php				php 								; save solid/either-end
.8511	38		sec				sec
.8512	ad 35 06	lda $0635			lda		gXX1
.8515	ed 31 06	sbc $0631			sbc 	gXX0
.8518	85 36		sta $36				sta 	gxzTemp0
.851a	ad 36 06	lda $0636			lda 	gXX1+1
.851d	ed 32 06	sbc $0632			sbc 	gXX0+1
.8520	85 37		sta $37				sta 	gxzTemp0+1
.8522	28		plp				plp
.8523					GXDrawLineTemp0:
.8523	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8525	48		pha				pha
.8526	a5 3d		lda $3d				lda 	gxzScreen+1
.8528	48		pha				pha
.8529	ad 44 06	lda $0644			lda 	gsOffset
.852c	48		pha				pha
.852d	a5 0b		lda $0b				lda 	GXEditSlot
.852f	48		pha				pha
.8530	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8533	90 1e		bcc $8553			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8535					_GXDLTLine:
.8535	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8537	2d 41 06	and $0641			and 	gxANDValue
.853a	4d 40 06	eor $0640			eor 	gxEORValue
.853d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.853f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8541	d0 04		bne $8547			bne 	_GXDLTNoBorrow
.8543	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8545	30 2e		bmi $8575			bmi 	_GXDLTExit
.8547					_GXDLTNoBorrow:
.8547	c6 36		dec $36				dec 	gxzTemp0
.8549	c8		iny				iny 								; next slot.
.854a	d0 e9		bne $8535			bne 	_GXDLTLine
.854c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854e	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.8551	80 e2		bra $8535			bra 	_GXDLTLine
.8553					_GXDLTEndPoints:
.8553	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8555	2d 41 06	and $0641			and 	gxANDValue
.8558	4d 40 06	eor $0640			eor 	gxEORValue
.855b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855d	98		tya				tya 								; advance to right side
.855e	18		clc				clc
.855f	65 36		adc $36				adc 	gxzTemp0
.8561	a8		tay				tay
.8562	a5 3d		lda $3d				lda 	gxzScreen+1
.8564	65 37		adc $37				adc 	gxzTemp0+1
.8566	85 3d		sta $3d				sta 	gxzScreen+1
.8568	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap 			; fix up.
.856b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856d	2d 41 06	and $0641			and 	gxANDValue
.8570	4d 40 06	eor $0640			eor 	gxEORValue
.8573	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8575					_GXDLTExit:
.8575	68		pla				pla
.8576	85 0b		sta $0b				sta 	GXEditSlot
.8578	68		pla				pla
.8579	8d 44 06	sta $0644			sta 	gsOffset
.857c	68		pla				pla
.857d	85 3d		sta $3d				sta 	gxzScreen+1
.857f	68		pla				pla
.8580	85 3c		sta $3c				sta 	gxzScreen
.8582	60		rts				rts
.8583					GXDLTCheckWrap:
.8583	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8585	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8587	90 06		bcc $858f			bcc 	_GXDLTCWExit
.8589	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858b	85 3d		sta $3d				sta 	gxzScreen+1
.858d	e6 0b		inc $0b				inc 	GXEditSlot
.858f					_GXDLTCWExit:
.858f	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8590					GXDrawGraphicElement:
.8590	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8593	3a		dec a				dec 	a
.8594	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8597	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859a	9c 5c 06	stz $065c			stz 	gxHFlip
.859d	2c 5d 06	bit $065d			bit 	gxUseMode
.85a0	10 03		bpl $85a5			bpl 	_GXNotVertical
.85a2	8d 5b 06	sta $065b			sta 	gxVFlip
.85a5					_GXNotVertical:
.85a5	50 03		bvc $85aa			bvc 	_GXNotHorizontal
.85a7	8d 5c 06	sta $065c			sta 	gxHFlip
.85aa					_GXNotHorizontal:
.85aa	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ad	f0 5f		beq $860e			beq 	_GXSLFail
.85af	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b2	48		pha				pha
.85b3	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b6	8e 58 06	stx $0658			stx 	gxAcquireVector
.85b9	20 be 87	jsr $87be			jsr 	gxOpenBitmap 				; open the bitmap.
.85bc	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85bf	4a		lsr a				lsr 	a
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	29 07		and #$07			and		#7
.85c4	1a		inc a				inc 	a
.85c5	8d 5a 06	sta $065a			sta 	gxScale
.85c8	64 38		stz $38				stz 	gxzTemp1						; start first line
.85ca					_GXGELoop:
.85ca	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cc	4d 5b 06	eor $065b			eor 	gxVFlip
.85cf	aa		tax				tax 								; get the Xth line.
.85d0	20 10 86	jsr $8610			jsr 	_GXCallAcquire 				; get that data.
.85d3	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d6	85 39		sta $39				sta 	gxzTemp1+1
.85d8					_GXGELoop2:
.85d8	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85db	cd 3d 06	cmp $063d			cmp 	gxHeight
.85de	b0 10		bcs $85f0			bcs 	_GXDGEExit
.85e0	20 13 86	jsr $8613			jsr 	GXRenderOneLine 			; render line
.85e3	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e5	d0 f1		bne $85d8			bne 	_GXGELoop2
.85e7	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85e9	a5 38		lda $38				lda 	gxzTemp1
.85eb	cd 56 06	cmp $0656			cmp 	gxSize
.85ee	d0 da		bne $85ca			bne 	_GXGELoop
.85f0					_GXDGEExit:
.85f0	68		pla				pla 								; restore Y for next time
.85f1	8d 33 06	sta $0633			sta 	gxY0
.85f4	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f7					_GXShiftLeft:
.85f7	18		clc				clc
.85f8	ad 56 06	lda $0656			lda 	gxSize
.85fb	6d 31 06	adc $0631			adc 	gxX0
.85fe	8d 31 06	sta $0631			sta 	gxX0
.8601	90 03		bcc $8606			bcc 	_GXSLNoCarry
.8603	ee 32 06	inc $0632			inc 	gxX0+1
.8606					_GXSLNoCarry:
.8606	ca		dex				dex
.8607	d0 ee		bne $85f7			bne 	_GXShiftLeft
.8609	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.860c	18		clc				clc
.860d	60		rts				rts
.860e					_GXSLFail:
.860e	38		sec				sec
.860f	60		rts				rts
.8610					_GXCallAcquire:
.8610	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8613					GXRenderOneLine:
.8613	20 dc 87	jsr $87dc			jsr 	GXPositionCalc 				; calculate position/offset.
.8616	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8619	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861b					_GXROLLoop1:
.861b	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861e	85 3b		sta $3b				sta 	gxzTemp2+1
.8620					_GXROLLoop2:
.8620	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8622	4d 5c 06	eor $065c			eor 	gxHFlip
.8625	aa		tax				tax 								; read from the pixel buffer
.8626	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8629	f0 0a		beq $8635			beq 	_GXZeroPixel 				; don't draw if zero.
.862b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862d	2d 41 06	and $0641			and 	gxANDValue
.8630	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8633	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8635					_GXZeroPixel:
.8635	c8		iny				iny 								; advance pointer
.8636	d0 05		bne $863d			bne 	_GXNoShift
.8638	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863a	20 83 85	jsr $8583			jsr 	GXDLTCheckWrap				; check for new page.
.863d					_GXNoShift:
.863d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.863f	d0 df		bne $8620			bne 	_GXROLLoop2
.8641	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8643	a5 3a		lda $3a				lda 	gxzTemp2
.8645	cd 56 06	cmp $0656			cmp 	gxSize
.8648	d0 d1		bne $861b			bne 	_GXROLLoop1
.864a	ee 33 06	inc $0633			inc 	gxY0
.864d	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864e					GXFontHandler:
.864e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8650	4d 3e 06	eor $063e			eor 	gxMode
.8653	8d 5d 06	sta $065d			sta 	gxUseMode
.8656	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8658	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865a	26 37		rol $37				rol	 	gxzTemp0+1
.865c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865e	26 37		rol $37				rol	 	gxzTemp0+1
.8660	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8662	26 37		rol $37				rol	 	gxzTemp0+1
.8664	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8666	09 c0		ora #$c0			ora 	#$C0
.8668	85 37		sta $37				sta 	gxzTemp0+1
.866a	a9 08		lda #$08			lda 	#8 							; size 8x8
.866c	a2 74		ldx #$74			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8670	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.8673	60		rts				rts
.8674					GXGetGraphicDataFont:
.8674	8a		txa				txa 								; X->Y
.8675	a8		tay				tay
.8676	a6 01		ldx $01				ldx 	1 							; preserve old value
.8678	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867a	85 01		sta $01				sta 	1
.867c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867e	86 01		stx $01				stx 	1 							; put old value back.
.8680	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8682					_GXExpand:
.8682	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8685	0a		asl a				asl 	a 							; shift bit 7 into C
.8686	90 08		bcc $8690			bcc 	_GXNoPixel
.8688	48		pha				pha 								; if set, set pixel buffer to current colour.
.8689	ad 3f 06	lda $063f			lda 	gxColour
.868c	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.868f	68		pla				pla
.8690					_GXNoPixel:
.8690	e8		inx				inx 								; do the whole byte.
.8691	e0 08		cpx #$08			cpx 	#8
.8693	d0 ed		bne $8682			bne 	_GXExpand
.8695	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8696					GXSpriteHandler:
.8696	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8698	4d 3e 06	eor $063e			eor 	gxMode
.869b	8d 5d 06	sta $065d			sta 	gxUseMode
.869e	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a0	da		phx				phx
.86a1	20 be 87	jsr $87be			jsr 	GXOpenBitmap 				; can access sprite information
.86a4	68		pla				pla
.86a5	20 4d 88	jsr $884d			jsr 	GXFindSprite 				; get the sprite address
.86a8	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.86ab	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86ae	a2 b6		ldx #$b6			ldx 	#GXSpriteAcquire & $FF
.86b0	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b2	20 90 85	jsr $8590			jsr 	GXDrawGraphicElement
.86b5	60		rts				rts
.86b6					GXSpriteAcquire:
.86b6	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86b9	85 0b		sta $0b				sta 	GXEditSlot
.86bb	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86bd	a9 00		lda #$00			lda 	#0
.86bf	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c2					_GXTimesRowNumber:
.86c2	18		clc				clc
.86c3	65 36		adc $36				adc 	zTemp0
.86c5	ca		dex				dex
.86c6	10 fa		bpl $86c2			bpl 	_GXTimesRowNumber
.86c8	64 37		stz $37				stz 	gxzTemp0+1
.86ca	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cb	26 37		rol $37				rol 	gxzTemp0+1
.86cd	0a		asl a				asl 	a 							; row x 4,8,12,16
.86ce	26 37		rol $37				rol 	gxzTemp0+1
.86d0	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d1	26 37		rol $37				rol 	gxzTemp0+1
.86d3	85 36		sta $36				sta 	gxzTemp0
.86d5	18		clc				clc 								; add base address.
.86d6	a5 36		lda $36				lda 	gxzTemp0
.86d8	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86db	85 36		sta $36				sta 	gxzTemp0
.86dd	a5 37		lda $37				lda 	gxzTemp0+1
.86df	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e2					_GXSAFindPage:
.86e2	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e4	90 06		bcc $86ec			bcc 	_GXSAFoundPage
.86e6	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e8	e6 0b		inc $0b				inc 	GXEditSlot
.86ea	80 f6		bra $86e2			bra 	_GXSAFindPage
.86ec					_GXSAFoundPage:
.86ec	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ee	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f0	a0 00		ldy #$00			ldy 	#0
.86f2					_GXSACopyLoop:
.86f2	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f4	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f7	c8		iny				iny
.86f8	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fb	d0 f5		bne $86f2			bne 	_GXSACopyLoop
.86fd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86fe					GXSelect:
.86fe	ad 39 06	lda $0639			lda 	gxSpritesOn
.8701	f0 1f		beq $8722			beq 	_GXSFail
.8703	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8705	c9 40		cmp #$40			cmp 	#64
.8707	b0 19		bcs $8722			bcs 	_GXSFail
.8709	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870d	06 36		asl $36				asl 	gxzTemp0
.870f	06 36		asl $36				asl 	gxzTemp0
.8711	06 36		asl $36				asl 	gxzTemp0
.8713	2a		rol a				rol 	a
.8714	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8716	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8719	85 37		sta $37				sta 	gxzTemp0+1
.871b	a5 36		lda $36				lda 	gxzTemp0
.871d	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8720	18		clc				clc
.8721	60		rts				rts
.8722					_GXSFail:
.8722	38		sec				sec
.8723	60		rts				rts
.8724					GXSelectImage:
.8724	ad 39 06	lda $0639			lda 	gxSpritesOn
.8727	f0 5e		beq $8787			beq 	_GXSIFail
.8729	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.872c	f0 59		beq $8787			beq 	_GXSIFail
.872e	64 01		stz $01				stz 	1
.8730	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8732	d0 43		bne $8777			bne 	_GXSIHide
.8734	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8736	48		pha				pha
.8737	20 be 87	jsr $87be			jsr 	GXOpenBitmap
.873a	68		pla				pla
.873b	20 4d 88	jsr $884d			jsr 	GXFindSprite
.873e	a0 01		ldy #$01			ldy 	#1
.8740	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8743	85 36		sta $36				sta 	gxzTemp0
.8745	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8748	85 37		sta $37				sta 	gxzTemp0+1
.874a	ad 61 06	lda $0661			lda 	GXSpriteOffset
.874d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.874f	18		clc				clc
.8750	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8753	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8756	c8		iny				iny
.8757	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8759	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.875c	69 00		adc #$00			adc 	#0
.875e	c8		iny				iny
.875f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8761	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8764	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8766	2a		rol a				rol 	a 							; x 2
.8767	0a		asl a				asl 	a 							; x 4
.8768	0a		asl a				asl 	a 							; x 8
.8769	0a		asl a				asl 	a 							; x 16
.876a	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.876d	0a		asl a				asl 	a 							; 1 shift
.876e	09 01		ora #$01			ora 	#1 							; enable sprite.
.8770	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8772	20 cf 87	jsr $87cf			jsr 	GXCloseBitmap
.8775	18		clc				clc
.8776	60		rts				rts
.8777					_GXSIHide:
.8777	ad 45 06	lda $0645			lda 	GSCurrentSprite
.877a	85 36		sta $36				sta 	gxzTemp0
.877c	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.877f	85 37		sta $37				sta 	gxzTemp0+1
.8781	a9 00		lda #$00			lda 	#0
.8783	92 36		sta ($36)			sta 	(gxzTemp0)
.8785	18		clc				clc
.8786	60		rts				rts
.8787					_GXSIFail:
.8787	38		sec				sec
.8788	60		rts				rts
.8789					GXMoveSprite:
.8789	ad 39 06	lda $0639			lda 	gxSpritesOn
.878c	f0 2e		beq $87bc			beq 	_GXSIFail
.878e	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8791	f0 29		beq $87bc			beq 	_GXSIFail
.8793	85 37		sta $37				sta 	gxzTemp0+1
.8795	a0 04		ldy #$04			ldy 	#4
.8797	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879a	85 36		sta $36				sta 	gxzTemp0
.879c	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.879e	38		sec				sec
.879f	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a2	4a		lsr a				lsr 	a
.87a3	48		pha				pha
.87a4	18		clc				clc
.87a5	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87a8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87aa	c8		iny				iny
.87ab	ad 32 06	lda $0632			lda 	gxX0+1
.87ae	69 00		adc #$00			adc 	#0
.87b0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b2	c8		iny				iny
.87b3	68		pla				pla
.87b4	18		clc				clc
.87b5	6d 33 06	adc $0633			adc 	gxY0
.87b8	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ba	18		clc				clc
.87bb	60		rts				rts
.87bc					_GXSIFail:
.87bc	38		sec				sec
.87bd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87be					GXOpenBitmap:
.87be	78		sei				sei 								; no interrupts here
.87bf	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c1	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c4	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c6	85 00		sta $00				sta 	0
.87c8	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87ca	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87cd	58		cli				cli
.87ce	60		rts				rts
.87cf					GXCloseBitmap:
.87cf	78		sei				sei
.87d0	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d3	85 0b		sta $0b				sta 	GXEditSlot
.87d5	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87d8	85 00		sta $00				sta 	0
.87da	58		cli				cli
.87db	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87dc					GXPositionCalc:
.87dc	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87de	48		pha				pha
.87df	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e2	85 3c		sta $3c				sta 	gxzScreen
.87e4	64 3d		stz $3d				stz 	gxzScreen+1
.87e6	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87e8	26 3d		rol $3d				rol 	gxzScreen+1
.87ea	06 3c		asl $3c				asl 	gxzScreen
.87ec	26 3d		rol $3d				rol 	gxzScreen+1
.87ee	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87ef	65 3c		adc $3c				adc 	gxzScreen
.87f1	85 3c		sta $3c				sta 	gxzScreen
.87f3	90 02		bcc $87f7			bcc 	_GXPCNoCarry
.87f5	e6 3d		inc $3d				inc 	gxzScreen+1
.87f7					_GXPCNoCarry:
.87f7	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87f9	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fb	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87fd	85 36		sta $36				sta 	gxzTemp0
.87ff	64 3d		stz $3d				stz 	gxzScreen+1
.8801	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8803					_GXPCMultiply32:
.8803	06 3c		asl $3c				asl 	gxzScreen
.8805	26 3d		rol $3d				rol 	gxzScreen+1
.8807	3a		dec a				dec 	a
.8808	d0 f9		bne $8803			bne 	_GXPCMultiply32
.880a	18		clc				clc
.880b	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.880e	65 3c		adc $3c				adc 	gxzScreen
.8810	8d 44 06	sta $0644			sta 	gsOffset
.8813	ad 32 06	lda $0632			lda 	GXX0+1
.8816	65 3d		adc $3d				adc 	gxzScreen+1
.8818	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881a	90 04		bcc $8820			bcc 	_GXPCNoOverflow
.881c	29 1f		and #$1f			and 	#$1F 						; fix it up
.881e	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8820					_GXPCNoOverflow:
.8820	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8822	85 3d		sta $3d				sta 	gxzScreen+1
.8824	64 3c		stz $3c				stz 	gxzScreen
.8826	18		clc				clc
.8827	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8829	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882c	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.882e	68		pla				pla
.882f	85 36		sta $36				sta 	gxzTemp0
.8831	60		rts				rts
.8832					GXMovePositionDown:
.8832	18		clc				clc 								; add 320 to offset/temp+1
.8833	ad 44 06	lda $0644			lda 	gsOffset
.8836	69 40		adc #$40			adc 	#64
.8838	8d 44 06	sta $0644			sta 	gsOffset
.883b	a5 3d		lda $3d				lda 	gxzScreen+1
.883d	69 01		adc #$01			adc 	#1
.883f	85 3d		sta $3d				sta 	gxzScreen+1
.8841	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8843	90 07		bcc $884c			bcc 	_GXMPDExit
.8845	38		sec				sec  								; next page
.8846	e9 20		sbc #$20			sbc 	#$20
.8848	85 3d		sta $3d				sta 	gxzScreen+1
.884a	e6 0b		inc $0b				inc 	GXEditSlot
.884c					_GXMPDExit:
.884c	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884d					GXFindSprite:
.884d	aa		tax				tax
.884e	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8851	85 0b		sta $0b				sta 	GXEditSlot
.8853	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8856	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8859	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885c	48		pha				pha 								; save twice
.885d	48		pha				pha
.885e	29 03		and #$03			and 	#3 							; get sprite size
.8860	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8863	aa		tax				tax
.8864	bd 85 88	lda $8885,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8867	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886a	68		pla				pla 								; get LUT
.886b	4a		lsr a				lsr		a
.886c	4a		lsr a				lsr		a
.886d	29 03		and #$03			and 	#3
.886f	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8872	68		pla				pla 								; address, neeeds to be x 4
.8873	29 f0		and #$f0			and 	#$F0
.8875	8d 61 06	sta $0661			sta 	GXSpriteOffset
.8878	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887b	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.887e	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8881	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8884	60		rts				rts
.8885					_GXFXSSTTable:
>8885	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8889					GXSortXY:
.8889	20 a7 88	jsr $88a7			jsr 	GXSortY 					; will be sorted on Y now
.888c	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.888f	cd 35 06	cmp $0635			cmp 	gxX1
.8892	ad 32 06	lda $0632			lda 	gXX0+1
.8895	ed 36 06	sbc $0636			sbc 	gXX1+1
.8898	90 0c		bcc $88a6			bcc 	_GXSXYExit 					; X0 < X1 exit
.889a	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889c	a0 04		ldy #$04			ldy 	#4
.889e	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a1	e8		inx				inx
.88a2	c8		iny				iny
.88a3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88a6					_GXSXYExit:
.88a6	60		rts				rts
.88a7					GXSortY:
.88a7	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88aa	cd 37 06	cmp $0637			cmp 	gxY1
.88ad	90 0b		bcc $88ba			bcc 	_GXSYSorted
.88af	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b1	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b3					_GXSwap1:
.88b3	20 bb 88	jsr $88bb			jsr 	GXSwapXY
.88b6	88		dey				dey
.88b7	ca		dex				dex
.88b8	10 f9		bpl $88b3			bpl 	_GXSwap1
.88ba					_GXSYSorted:
.88ba	60		rts				rts
.88bb					GXSwapXY:
.88bb	bd 31 06	lda $0631,x			lda 	gxX0,x
.88be	48		pha				pha
.88bf	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c2	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c5	68		pla				pla
.88c6	99 31 06	sta $0631,y			sta 	gxX0,y
.88c9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88ca					AssembleGroup1:
.88ca	a9 ff		lda #$ff			lda 	#$FF
.88cc	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88cf	80 02		bra $88d3			bra 	AsmGroup12
.88d1					AssembleGroup2:
.88d1	a5 00		lda $00				lda 	$00
.88d3					AsmGroup12:
.88d3	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88d6	68		pla				pla 								; pop the return address to access the information following.
.88d7	fa		plx				plx
.88d8	20 61 89	jsr $8961			jsr 	AccessParameters 			; get opcode and save as base
.88db	8d a4 04	sta $04a4			sta 	BaseOpcode
.88de	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88e1	d0 08		bne $88eb			bne 	_AG12HaveMask
.88e3	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88e5	20 69 89	jsr $8969			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.88e8	8d a5 04	sta $04a5			sta 	ModeMask
.88eb					_AG12HaveMask:
.88eb	20 a4 8a	jsr $8aa4			jsr 	TypeAndCalculateOperand 	; get zero page type
.88ee	da		phx				phx 								; save found address mode
.88ef	20 cd 89	jsr $89cd			jsr 	AssembleModeX
.88f2	fa		plx				plx  								; restore address mode
.88f3	b0 0b		bcs $8900			bcs 	_AG12Exit
.88f5	20 01 89	jsr $8901			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.88f8	20 cd 89	jsr $89cd			jsr 	AssembleModeX
.88fb	b0 03		bcs $8900			bcs 	_AG12Exit
.88fd	4c d6 b2	jmp $b2d6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8900					_AG12Exit:
.8900	60		rts				rts
.8901					PromoteToAbsolute:
.8901	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8903	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8905	f0 19		beq $8920			beq 	_PTADo
.8907	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8909	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.890b	f0 13		beq $8920			beq 	_PTADo
.890d	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.890f	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8911	f0 0d		beq $8920			beq 	_PTADo
.8913	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8915	e0 d1		cpx #$d1			cpx 	#AM_IND
.8917	f0 07		beq $8920			beq 	_PTADo
.8919	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.891b	e0 c0		cpx #$c0			cpx 	#AM_INDX
.891d	f0 01		beq $8920			beq 	_PTADo
.891f	60		rts				rts
.8920					_PTADo:
.8920	aa		tax				tax
.8921	60		rts				rts
.8922					AssembleGroup3:
.8922	68		pla				pla 								; get parameters, which is just the opcode.
.8923	fa		plx				plx
.8924	20 61 89	jsr $8961			jsr 	AccessParameters 			; get and output opcode
.8927	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.892a	20 08 8b	jsr $8b08			jsr 	CalculateOperand 			; get a 16 bit operand
.892d	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8930	38		sec				sec
.8931	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8934	48		pha				pha 								; LSB in A
.8935	ad 10 04	lda $0410			lda 	NSMantissa1
.8938	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.893b	aa		tax				tax 								; MSB in X
.893c	68		pla				pla
.893d	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.893e	69 7f		adc #$7f			adc 	#$7F
.8940	90 01		bcc $8943			bcc 	_AG3NoCarry
.8942	e8		inx				inx
.8943					_AG3NoCarry:
.8943	38		sec				sec 								; fix back and write out anyways.
.8944	e9 80		sbc #$80			sbc 	#$80
.8946	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.8949	e0 00		cpx #$00			cpx 	#0 							; was it in range
.894b	f0 0a		beq $8957			beq 	_AG3Exit
.894d	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8950	29 01		and #$01			and 	#1
.8952	f0 03		beq $8957			beq 	_AG3Exit
.8954	4c db b2	jmp $b2db			jmp 	RangeError 					; no, branch is out of range
.8957					_AG3Exit:
.8957	60		rts				rts
.8958					AssembleGroup4:
.8958	68		pla				pla 								; pop address
.8959	fa		plx				plx
.895a	20 61 89	jsr $8961			jsr 	AccessParameters 			; access and get first
.895d	20 79 89	jsr $8979			jsr 	AssemblerWriteByte 			; output it.
.8960	60		rts				rts
.8961					AccessParameters:
.8961	8d a1 04	sta $04a1			sta 	ParamStart
.8964	8e a2 04	stx $04a2			stx 	ParamStart+1
.8967	a9 01		lda #$01			lda 	#1
.8969					GetParameter:
.8969	5a		phy				phy
.896a	a8		tay				tay
.896b	ad a1 04	lda $04a1			lda 	ParamStart
.896e	85 36		sta $36				sta 	zTemp0
.8970	ad a2 04	lda $04a2			lda 	ParamStart+1
.8973	85 37		sta $37				sta 	zTemp0+1
.8975	b1 36		lda ($36),y			lda 	(zTemp0),y
.8977	7a		ply				ply
.8978	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8979					AssemblerWriteByte:
.8979	48		pha			pha
.897a	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.897d	29 02		and #$02		and 	#2
.897f	f0 1b		beq $899c		beq 	_AWBNoPrint
.8981	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8984	20 b7 89	jsr $89b7		jsr 	PrintHex
.8987	ad 9e 04	lda $049e		lda		AssemblerAddress
.898a	20 b7 89	jsr $89b7		jsr 	PrintHex
.898d	a9 20		lda #$20		lda 	#' '
.898f	20 90 b4	jsr $b490		jsr 	EXTPrintCharacter
.8992	68		pla			pla 									; print byte
.8993	48		pha			pha
.8994	20 b7 89	jsr $89b7		jsr 	PrintHex
.8997	a9 0d		lda #$0d		lda 	#13
.8999	20 90 b4	jsr $b490		jsr 	EXTPrintCharacter
.899c					_AWBNoPrint:
.899c	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.899f	85 36		sta $36			sta 	zTemp0
.89a1	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89a4	f0 0e		beq $89b4		beq 	_AWBRange
.89a6	85 37		sta $37			sta 	zTemp0+1
.89a8	68		pla			pla 									; write byte out
.89a9	92 36		sta ($36)		sta 	(zTemp0)
.89ab	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89ae	d0 03		bne $89b3		bne 	_AWBNoCarry
.89b0	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89b3					_AWBNoCarry:
.89b3	60		rts			rts
.89b4					_AWBRange:
.89b4	4c db b2	jmp $b2db		jmp 	RangeError
.89b7					PrintHex:
.89b7	48		pha				pha
.89b8	4a		lsr a				lsr 	a
.89b9	4a		lsr a				lsr 	a
.89ba	4a		lsr a				lsr 	a
.89bb	4a		lsr a				lsr 	a
.89bc	20 c0 89	jsr $89c0			jsr 	_PrintNibble
.89bf	68		pla				pla
.89c0					_PrintNibble:
.89c0	29 0f		and #$0f			and 	#15
.89c2	c9 0a		cmp #$0a			cmp 	#10
.89c4	90 02		bcc $89c8			bcc 	_NoShift
.89c6	69 06		adc #$06			adc 	#6
.89c8					_NoShift:
.89c8	69 30		adc #$30			adc 	#48
.89ca	4c 90 b4	jmp $b490			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89cd					AssembleModeX:
.89cd	5a		phy				phy
.89ce	ad a3 04	lda $04a3			lda 	IsGroup1
.89d1	f0 17		beq $89ea			beq 	_AMXGroup2
.89d3	8a		txa				txa 							; is it in group # 1
.89d4	29 40		and #$40			and 	#AM_ISG1
.89d6	f0 50		beq $8a28			beq 	_AMXFail 				; no, give up.
.89d8	8a		txa				txa 							; get back.
.89d9	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89db	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89dd	d0 22		bne $8a01			bne 	_AMXHaveInfo
.89df	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89e2	c9 81		cmp #$81			cmp 	#$81
.89e4	f0 42		beq $8a28			beq 	_AMXFail
.89e6	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.89e8	80 17		bra $8a01			bra 	_AMXHaveInfo 			; odd design decision there.
.89ea					_AMXGroup2:
.89ea	8a		txa				txa 							; is it in group 2 ?
.89eb	29 20		and #$20			and 	#AM_ISG2
.89ed	f0 39		beq $8a28			beq 	_AMXFail 				; no, give up.
.89ef	8a		txa				txa 							; get the offset into Y
.89f0	29 1f		and #$1f			and 	#$1F
.89f2	4a		lsr a				lsr 	a 						; make it 0-7.
.89f3	4a		lsr a				lsr  	a
.89f4	a8		tay				tay
.89f5	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.89f8					_AMXCheckOkay:
.89f8	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.89f9	88		dey				dey
.89fa	10 fc		bpl $89f8			bpl 	_AMXCheckOkay
.89fc	90 2a		bcc $8a28			bcc 	_AMXFail 				; not allowed.
.89fe	8a		txa				txa  							; get mask back
.89ff	29 1f		and #$1f			and 	#$1F
.8a01					_AMXHaveInfo:
.8a01	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a03	10 05		bpl $8a0a			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a05	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a08	d0 1e		bne $8a28			bne 	_AMXFail
.8a0a					_AMXAnySize:
.8a0a	18		clc				clc 							; add offset to the base opcode
.8a0b	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a0e					_AMXOutputCode:
.8a0e	20 79 89	jsr $8979			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a11	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a13	f0 10		beq $8a25			beq 	_AMXExit
.8a15	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a18	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.8a1b	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a1d	30 06		bmi $8a25			bmi 	_AMXExit
.8a1f	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a22	20 79 89	jsr $8979			jsr 	AssemblerWriteByte
.8a25					_AMXExit:
.8a25	7a		ply				ply
.8a26	38		sec				sec
.8a27	60		rts				rts
.8a28					_AMXFail:
.8a28	a0 00		ldy #$00			ldy 	#0
.8a2a					_AMXCheckOddities:
.8a2a	8a		txa				txa
.8a2b	d9 53 8a	cmp $8a53,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a2e	d0 16		bne $8a46			bne 	_AMXCONext
.8a30	b9 51 8a	lda $8a51,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a33	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a36	d0 0e		bne $8a46			bne 	_AMXCONext
.8a38	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a3a	10 05		bpl $8a41			bpl 	_AMXCONotZero
.8a3c	ad 10 04	lda $0410			lda 	NSMantissa1
.8a3f	d0 05		bne $8a46			bne 	_AMXCONext
.8a41					_AMXCONotZero:
.8a41	b9 52 8a	lda $8a52,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a44	80 c8		bra $8a0e			bra 	_AMXOutputCode 			; and assemble it
.8a46					_AMXCONext:
.8a46	c8		iny				iny
.8a47	c8		iny				iny
.8a48	c8		iny				iny
.8a49	b9 51 8a	lda $8a51,y			lda 	ExtraOpcode+0,y 		; end of table
.8a4c	d0 dc		bne $8a2a			bne 	_AMXCheckOddities
.8a4e					_AMXCOFail:
.8a4e	7a		ply				ply
.8a4f	18		clc				clc
.8a50	60		rts				rts
.8a51					ExtraOpcode:
>8a51	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a54	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a57	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a5a	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a5d	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a60	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a63	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a66	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a69	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a6c	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a6f	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a70					LabelHere:
.8a70	c8		iny				iny 								; skip .
.8a71	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a73	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm 				; get a term
.8a76	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a79	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a7b	d0 24		bne $8aa1			bne 	_ALType
.8a7d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a80	85 36		sta $36				sta 	zTemp0
.8a82	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a85	85 37		sta $37				sta 	zTemp0+1
.8a87	5a		phy				phy 								; copy address in.
.8a88	a0 01		ldy #$01			ldy 	#1
.8a8a	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8a8d	92 36		sta ($36)			sta 	(zTemp0)
.8a8f	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8a92	91 36		sta ($36),y			sta 	(zTemp0),y
.8a94	c8		iny				iny
.8a95	a9 00		lda #$00			lda 	#0
.8a97	91 36		sta ($36),y			sta 	(zTemp0),y
.8a99	c8		iny				iny
.8a9a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9c	c8		iny				iny
.8a9d	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9f	7a		ply				ply
.8aa0	60		rts				rts
.8aa1					_ALType:
.8aa1	4c e0 b2	jmp $b2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8aa4					TypeAndCalculateOperand:
.8aa4	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa6	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8aa8	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8aaa	f0 5b		beq $8b07			beq 	_TACOExit
.8aac	c9 80		cmp #$80			cmp 	#KWC_EOL
.8aae	f0 57		beq $8b07			beq 	_TACOExit
.8ab0	c8		iny				iny
.8ab1	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ab3	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ab5	f0 51		beq $8b08			beq 	CalculateOperand
.8ab7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ab9	f0 1f		beq $8ada			beq 	_TACOIndirect
.8abb	88		dey				dey 								; undo get of first character
.8abc	20 08 8b	jsr $8b08			jsr 	CalculateOperand 			; get operand
.8abf	b1 30		lda ($30),y			lda 	(codePtr),y
.8ac1	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8ac3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ac5	d0 40		bne $8b07			bne 	_TACOExit
.8ac7	c8		iny				iny
.8ac8	20 67 ac	jsr $ac67			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8acb	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8acd	c9 58		cmp #$58			cmp 	#'X'
.8acf	f0 36		beq $8b07			beq 	_TACOExit
.8ad1	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ad3	c9 59		cmp #$59			cmp 	#'Y'
.8ad5	f0 30		beq $8b07			beq 	_TACOExit
.8ad7					_TACOSyntax:
.8ad7	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.8ada					_TACOIndirect:
.8ada	20 08 8b	jsr $8b08			jsr 	CalculateOperand 			; get the operand
.8add	b1 30		lda ($30),y			lda 	(codePtr),y
.8adf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8ae1	f0 17		beq $8afa			beq 	_TACOIndX
.8ae3	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8ae6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae8	a2 d1		ldx #$d1			ldx 	#AM_IND
.8aea	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8aec	d0 19		bne $8b07			bne 	_TACOExit
.8aee	c8		iny				iny
.8aef	20 67 ac	jsr $ac67			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8af2	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8af4	d0 e1		bne $8ad7			bne 	_TACOSyntax
.8af6	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8af8	80 0d		bra $8b07			bra 	_TACOExit
.8afa					_TACOIndX:
.8afa	c8		iny				iny
.8afb	20 67 ac	jsr $ac67			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8afe	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b00	d0 d5		bne $8ad7			bne 	_TACOSyntax
.8b02	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket			; check )
.8b05	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b07					_TACOExit:
.8b07	60		rts				rts
.8b08					CalculateOperand:
.8b08	48		pha				pha
.8b09	da		phx				phx
.8b0a	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b0c	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.8b0f	fa		plx				plx
.8b10	68		pla				pla
.8b11	60		rts				rts
.ac67					TACOCheckXY:
.ac67	b1 30		lda ($30),y			lda 	(codePtr),y
.ac69	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ac6b	c9 40		cmp #$40			cmp 	#$40
.ac6d	d0 21		bne $ac90			bne 	_TCXYFail
.ac6f	b1 30		lda ($30),y			lda 	(codePtr),y
.ac71	18		clc				clc
.ac72	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ac74	85 37		sta $37				sta 	zTemp0+1
.ac76	c8		iny				iny
.ac77	b1 30		lda ($30),y			lda 	(codePtr),y
.ac79	c8		iny				iny
.ac7a	85 36		sta $36				sta 	zTemp0
.ac7c	5a		phy				phy 								; save position
.ac7d	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ac7f	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac81	d0 0c		bne $ac8f			bne 	_TCXYPopFail
.ac83	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ac85	b1 36		lda ($36),y			lda 	(zTemp0),y
.ac87	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ac89	f0 08		beq $ac93			beq 	_TCXYFound
.ac8b	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ac8d	f0 04		beq $ac93			beq 	_TCXYFound
.ac8f					_TCXYPopFail:
.ac8f	7a		ply				ply
.ac90					_TCXYFail:
.ac90	a9 00		lda #$00			lda 	#0
.ac92	60		rts				rts
.ac93					_TCXYFound:
.ac93	7a		ply				ply 								; restore position
.ac94	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ac96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b12					EditProgramCode:
.8b12	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b15	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b18	20 2c a5	jsr $a52c			jsr 	MemorySearch
.8b1b	90 05		bcc $8b22			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b1d	d0 03		bne $8b22			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b1f	20 1b b5	jsr $b51b			jsr 	MemoryDeleteLine 			; delete the line
.8b22					_EPCNoDelete:
.8b22	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b25	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b27	f0 0d		beq $8b36			beq 	_EPCNoInsert
.8b29	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b2c	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b2f	20 2c a5	jsr $a52c			jsr 	MemorySearch
.8b32	18		clc				clc 								; insert at this point.
.8b33	20 52 b5	jsr $b552			jsr 	MemoryInsertLine 			; insert the line
.8b36					_EPCNoInsert:
.8b36	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b37					WarmStart:
.8b37	a2 ff		ldx #$ff			ldx 	#$FF
.8b39	9a		txs				txs
.8b3a	20 a6 b4	jsr $b4a6			jsr 	EXTInputLine 				; get line to lineBuffer
.8b3d	20 e8 a9	jsr $a9e8			jsr 	TokeniseLine 				; tokenise the line
.8b40	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8b43	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8b46	d0 17		bne $8b5f			bne 	_WSEditCode 				; if so,edit code.
.8b48	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b4b	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8b4d	85 30		sta $30				sta 	codePtr
.8b4f	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b51	85 31		sta $31				sta 	codePtr+1
.8b53	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8b56	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b58	f0 dd		beq $8b37			beq 	WarmStart
.8b5a	20 72 94	jsr $9472			jsr 	RUNCodePointerLine 			; execute that line.
.8b5d	80 d8		bra $8b37			bra 	WarmStart
.8b5f					_WSEditCode:
.8b5f	20 12 8b	jsr $8b12			jsr 	EditProgramCode
.8b62	20 d0 8b	jsr $8bd0			jsr 	ClearCommand
.8b65	80 d0		bra $8b37			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b67					AssembleCommand:
.8b67	a2 00		ldx #$00			ldx 	#0
.8b69	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger 		; start address
.8b6c	ad 08 04	lda $0408			lda 	NSMantissa0
.8b6f	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b72	ad 10 04	lda $0410			lda 	NSMantissa1
.8b75	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b78	20 f8 ac	jsr $acf8			jsr 	CheckComma
.8b7b	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; options
.8b7e	ad 08 04	lda $0408			lda 	NSMantissa0
.8b81	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b84	60		rts				rts
.8b85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b86					AssertCommand:
.8b86	a2 00		ldx #$00			ldx 	#0
.8b88	20 30 a4	jsr $a430			jsr 	EvaluateInteger 			; the assert test
.8b8b	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; exit if result is non zero.
.8b8e	d0 05		bne $8b95			bne 	_ACExit
.8b90	a9 0a		lda #$0a		lda	#10
.8b92	4c f5 98	jmp $98f5		jmp	ErrorHandler
.8b95					_ACExit:
.8b95	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8b96					CallCommand:
.8b96	a2 00		ldx #$00			ldx 	#0
.8b98	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.8b9b					_CCClear
.8b9b	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8b9c	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.8b9f	e0 04		cpx #$04			cpx 	#4
.8ba1	d0 f8		bne $8b9b			bne 	_CCClear
.8ba3	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8ba5					_CCCParam:
.8ba5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ba9	d0 09		bne $8bb4			bne 	_CCCRun6502
.8bab	c8		iny				iny 								; skip comma
.8bac	e8		inx				inx	 								; next level
.8bad	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bb0	e0 03		cpx #$03			cpx 	#3
.8bb2	90 f1		bcc $8ba5			bcc 	_CCCParam 					; done all 3 ?
.8bb4					_CCCRun6502:
.8bb4	5a		phy				phy 								; save position
.8bb5	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bb8	85 37		sta $37				sta 	zTemp0+1
.8bba	ad 08 04	lda $0408			lda 	NSMantissa0
.8bbd	85 36		sta $36				sta 	zTemp0
.8bbf	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bc2	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bc5	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bc8	20 cd 8b	jsr $8bcd			jsr 	_CCCZTemp0 					; call zTemp0
.8bcb	7a		ply				ply 								; restore position and exit
.8bcc	60		rts				rts
.8bcd					_CCCZTemp0:
.8bcd	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bd0					ClearCommand:
.8bd0	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bd2	85 36		sta $36				sta 	0+zTemp0
.8bd4	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bd6	85 37		sta $37				sta 	1+zTemp0
.8bd8					_ClearZeroLoop:
.8bd8	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8bda	f0 24		beq $8c00			beq 	_ClearZeroEnd
.8bdc	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8bde	a9 00		lda #$00			lda 	#0
.8be0					_ClearOneVariable:
.8be0	91 36		sta ($36),y			sta 	(zTemp0),y
.8be2	c8		iny				iny
.8be3	c0 08		cpy #$08			cpy 	#8
.8be5	d0 f9		bne $8be0			bne 	_ClearOneVariable
.8be7	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8be9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8beb	c9 18		cmp #$18			cmp 	#NSTProcedure
.8bed	d0 04		bne $8bf3			bne 	_ClearNotProcedure
.8bef	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8bf1	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf3					_ClearNotProcedure:
.8bf3	18		clc				clc 								; go to the next variable
.8bf4	b2 36		lda ($36)			lda 	(zTemp0)
.8bf6	65 36		adc $36				adc 	zTemp0
.8bf8	85 36		sta $36				sta 	zTemp0
.8bfa	90 dc		bcc $8bd8			bcc 	_ClearZeroLoop
.8bfc	e6 37		inc $37				inc 	zTemp0+1
.8bfe	80 d8		bra $8bd8			bra 	_ClearZeroLoop
.8c00					_ClearZeroEnd:
.8c00	18		clc				clc
.8c01	a5 36		lda $36				lda 	zTemp0
.8c03	69 01		adc #$01			adc 	#1
.8c05	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c08	a5 37		lda $37				lda 	zTemp0+1
.8c0a	69 00		adc #$00			adc 	#0
.8c0c	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c0f	20 e6 a5	jsr $a5e6			jsr 	StackReset
.8c12	20 35 b6	jsr $b635			jsr 	StringSystemInitialise
.8c15	20 15 98	jsr $9815			jsr 	ProcedureScan
.8c18	20 2e 94	jsr $942e			jsr 	Command_Restore
.8c1b	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c1e	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c21	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c24	20 c2 a1	jsr $a1c2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c28					ClearScreen:
.8c28	5a		phy				phy
.8c29	20 8d b4	jsr $b48d			jsr 	EXTClearScreen
.8c2c	7a		ply				ply
.8c2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c2e					Command_Data:
.8c2e	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c30	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c32	20 67 98	jsr $9867			jsr 	ScanForward
.8c35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c36					DimCommand:
.8c36	b1 30		lda ($30),y			lda 	(codePtr),y
.8c38	29 c0		and #$c0			and 	#$C0
.8c3a	c9 40		cmp #$40			cmp 	#$40
.8c3c	d0 7a		bne $8cb8			bne 	_DCSyntax
.8c3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c40	18		clc				clc
.8c41	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c43	85 3f		sta $3f				sta 	zaTemp+1
.8c45	c8		iny				iny
.8c46	b1 30		lda ($30),y			lda 	(codePtr),y
.8c48	c8		iny				iny
.8c49	85 3e		sta $3e				sta 	zaTemp
.8c4b	5a		phy				phy
.8c4c	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c4e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c50	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c52	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c54	f0 62		beq $8cb8			beq 	_DCSyntax
.8c56	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c58	29 04		and #$04			and 	#NSBIsArray
.8c5a	f0 64		beq $8cc0			beq 	_DCType
.8c5c	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c5e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c60	d0 59		bne $8cbb			bne 	_DCRedefine
.8c62	7a		ply				ply
.8c63	20 c3 8c	jsr $8cc3			jsr 	_DCGetSize 				; get array size, check it.
.8c66	5a		phy				phy
.8c67	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c69	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c6b	7a		ply				ply 							; is there a second (e.g. ,x)
.8c6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c6e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c70	d0 0a		bne $8c7c			bne 	_DCOneDimension
.8c72	c8		iny				iny 							; skip comma
.8c73	20 c3 8c	jsr $8cc3			jsr 	_DCGetSize 				; get 2nd array size
.8c76	5a		phy				phy
.8c77	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c79	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c7b	7a		ply				ply
.8c7c					_DCOneDimension:
.8c7c	5a		phy				phy 							; save position
.8c7d	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c7f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c81	aa		tax				tax
.8c82	c8		iny				iny
.8c83	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c85	e8		inx				inx 							; bump them.
.8c86	1a		inc a				inc 	a
.8c87	20 72 b1	jsr $b172			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c8a	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8c8c	29 e0		and #$e0			and 	#$E0
.8c8e	d0 23		bne $8cb3			bne 	_DCSize
.8c90	a0 02		ldy #$02			ldy 	#2 						; get base type
.8c92	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c94	20 d1 8c	jsr $8cd1			jsr 	ScaleByBaseType 		; scale by base type
.8c97	a5 36		lda $36				lda 	zTemp0
.8c99	a6 37		ldx $37				ldx 	zTemp0+1
.8c9b	20 84 a1	jsr $a184			jsr 	AllocateXABytes 		; allocate memory
.8c9e	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8ca0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca2	c8		iny				iny
.8ca3	8a		txa				txa
.8ca4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca6	7a		ply				ply 							; get position back
.8ca7	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 		; check )
.8caa	b1 30		lda ($30),y			lda 	(codePtr),y
.8cac	c8		iny				iny 							; consume in case
.8cad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8caf	f0 85		beq $8c36			beq 	DimCommand
.8cb1	88		dey				dey 							; undo consume
.8cb2	60		rts				rts
.8cb3					_DCSize:
.8cb3	a9 16		lda #$16		lda	#22
.8cb5	4c f5 98	jmp $98f5		jmp	ErrorHandler
.8cb8					_DCSyntax:
.8cb8	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.8cbb					_DCRedefine:
.8cbb	a9 15		lda #$15		lda	#21
.8cbd	4c f5 98	jmp $98f5		jmp	ErrorHandler
.8cc0					_DCType:
.8cc0	4c e0 b2	jmp $b2e0			jmp 	TypeError
.8cc3					_DCGetSize:
.8cc3	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cc5	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 	; get array dimension
.8cc8	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cca	f0 e7		beq $8cb3			beq 	_DCSize
.8ccc	c9 fe		cmp #$fe			cmp 	#254
.8cce	f0 e3		beq $8cb3			beq 	_DCSize
.8cd0	60		rts				rts
.8cd1					ScaleByBaseType:
.8cd1	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cd3	d0 19		bne $8cee			bne 	_SBBTString
.8cd5	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cd7	48		pha				pha
.8cd8	a5 36		lda $36				lda 	zTemp0
.8cda	48		pha				pha
.8cdb	06 36		asl $36				asl 	zTemp0 					; x 2
.8cdd	26 37		rol $37				rol 	zTemp0+1
.8cdf	06 36		asl $36				asl 	zTemp0 					; x 4
.8ce1	26 37		rol $37				rol 	zTemp0+1
.8ce3	68		pla				pla 							; add stacked value = x 5
.8ce4	65 36		adc $36				adc 	zTemp0
.8ce6	85 36		sta $36				sta 	zTemp0
.8ce8	68		pla				pla
.8ce9	65 37		adc $37				adc 	zTemp0+1
.8ceb	85 37		sta $37				sta 	zTemp0+1
.8ced	60		rts				rts
.8cee					_SBBTString:
.8cee	06 36		asl $36				asl 	zTemp0
.8cf0	26 37		rol $37				rol 	zTemp0+1
.8cf2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8cf3					EndCommand:
.8cf3	4c 37 8b	jmp $8b37			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8cf6					UnaryEvent:
.8cf6	fa		plx				plx
.8cf7	20 ab 96	jsr $96ab			jsr 	TimerToStackX 				; timer in +0
.8cfa	e8		inx				inx  								; put reference into +1
.8cfb	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm
.8cfe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d01	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d03	d0 57		bne $8d5c			bne 	_UEType
.8d05	e8		inx				inx 								; put the step in +2
.8d06	20 f8 ac	jsr $acf8			jsr 	CheckComma
.8d09	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.8d0c	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.8d0f	ca		dex				dex
.8d10	ca		dex				dex
.8d11	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy reference to zTemp0
.8d14	85 36		sta $36				sta 	zTemp0
.8d16	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8d19	85 37		sta $37				sta 	zTemp0+1
.8d1b	5a		phy				phy
.8d1c	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d1e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d20	30 36		bmi $8d58			bmi 	_UEFalse
.8d22	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d24	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d27	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d29	c8		iny				iny
.8d2a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d2d	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d2f	c8		iny				iny
.8d30	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d33	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d35	90 21		bcc $8d58			bcc 	_UEFalse 					; no, return FALSE.
.8d37	18		clc				clc
.8d38	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d3a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d3d	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d40	91 36		sta ($36),y			sta 	(zTemp0),y
.8d42	c8		iny				iny
.8d43	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d46	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d49	91 36		sta ($36),y			sta 	(zTemp0),y
.8d4b	c8		iny				iny
.8d4c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d4f	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d52	91 36		sta ($36),y			sta 	(zTemp0),y
.8d54	7a		ply				ply
.8d55	4c 62 99	jmp $9962			jmp 	ReturnTrue
.8d58					_UEFalse:
.8d58	7a		ply				ply 								; restore Y
.8d59	4c 6e 99	jmp $996e			jmp 	ReturnFalse 				; and return False
.8d5c					_UEType:
.8d5c	4c e0 b2	jmp $b2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d5f					ForCommand:
.8d5f	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d61	20 81 a5	jsr $a581			jsr 	StackOpen
.8d64	a2 00		ldx #$00			ldx 	#0
.8d66	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm
.8d69	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d6c	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d6e	d0 49		bne $8db9			bne		_FCError
.8d70	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d72	20 00 ad	jsr $ad00			jsr 	CheckNextA
.8d75	e8		inx				inx
.8d76	20 30 a4	jsr $a430			jsr 	EvaluateInteger 			; <from> in +1
.8d79	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7b	c8		iny				iny 								; consume it
.8d7c	48		pha				pha 								; save on stack for later
.8d7d	c9 b0		cmp #$b0			cmp 	#KWD_DOWNTO
.8d7f	f0 04		beq $8d85			beq 	_FCNoSyntax
.8d81	c9 c7		cmp #$c7			cmp 	#KWD_TO
.8d83	d0 37		bne $8dbc			bne 	_FCSyntaxError
.8d85					_FCNoSyntax:
.8d85	e8		inx				inx
.8d86	20 30 a4	jsr $a430			jsr 	EvaluateInteger
.8d89	20 c5 a5	jsr $a5c5			jsr 	STKSaveCodePosition 		; save loop back position
.8d8c	68		pla				pla 								; restore DOWNTO or TO
.8d8d	5a		phy				phy 								; save Y on the stack
.8d8e	49 b0		eor #$b0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8d90	f0 02		beq $8d94			beq 	_FCNotDownTo
.8d92	a9 02		lda #$02			lda 	#2
.8d94					_FCNotDownTo:
.8d94	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8d95	a0 10		ldy #$10			ldy 	#16
.8d97	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8d99	a0 06		ldy #$06			ldy 	#6
.8d9b	ad 08 04	lda $0408			lda 	NSMantissa0
.8d9e	91 34		sta ($34),y			sta 	(basicStack),y
.8da0	ad 10 04	lda $0410			lda 	NSMantissa1
.8da3	c8		iny				iny
.8da4	91 34		sta ($34),y			sta 	(basicStack),y
.8da6	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8da8	a2 01		ldx #$01			ldx 	#1
.8daa	20 bf 8d	jsr $8dbf			jsr 	FCIntegerToStack
.8dad	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8daf	a2 02		ldx #$02			ldx 	#2
.8db1	20 bf 8d	jsr $8dbf			jsr 	FCIntegerToStack
.8db4	20 df 8d	jsr $8ddf			jsr 	CopyIndexToReference
.8db7	7a		ply				ply 								; restore position
.8db8	60		rts				rts
.8db9					_FCError:
.8db9	4c e0 b2	jmp $b2e0			jmp 	TypeError
.8dbc					_FCSyntaxError:
.8dbc	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.8dbf					FCIntegerToStack:
.8dbf	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dc2	10 03		bpl $8dc7			bpl	 	_FCNotNegative
.8dc4	20 82 a4	jsr $a482			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8dc7					_FCNotNegative:
.8dc7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8dca	91 34		sta ($34),y			sta 	(basicStack),y
.8dcc	c8		iny				iny
.8dcd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dd0	91 34		sta ($34),y			sta 	(basicStack),y
.8dd2	c8		iny				iny
.8dd3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dd6	91 34		sta ($34),y			sta 	(basicStack),y
.8dd8	c8		iny				iny
.8dd9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ddc	91 34		sta ($34),y			sta 	(basicStack),y
.8dde	60		rts				rts
.8ddf					CopyIndexToReference:
.8ddf	5a		phy				phy
.8de0	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8de2	38		sec				sec 								; (because we copy from offset 8)
.8de3	b1 34		lda ($34),y			lda 	(basicStack),y
.8de5	e9 08		sbc #$08			sbc 	#8
.8de7	85 36		sta $36				sta 	zTemp0
.8de9	c8		iny				iny
.8dea	b1 34		lda ($34),y			lda 	(basicStack),y
.8dec	e9 00		sbc #$00			sbc 	#0
.8dee	85 37		sta $37				sta 	zTemp0+1
.8df0	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8df2	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8df4	b1 34		lda ($34),y			lda 	(basicStack),y
.8df6	0a		asl a				asl 	a 							; into carry
.8df7	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8df9	90 14		bcc $8e0f			bcc 	_CITRNormal
.8dfb	38		sec				sec
.8dfc					_CITRNegative:
.8dfc	a9 00		lda #$00			lda 	#0
.8dfe	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e00	91 36		sta ($36),y			sta 	(zTemp0),y
.8e02	c8		iny				iny
.8e03	ca		dex				dex
.8e04	d0 f6		bne $8dfc			bne 	_CITRNegative
.8e06	88		dey				dey 								; look at MSB of mantissa
.8e07	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e09	09 80		ora #$80			ora 	#$80
.8e0b	91 36		sta ($36),y			sta 	(zTemp0),y
.8e0d	7a		ply				ply
.8e0e	60		rts				rts
.8e0f					_CITRNormal:
.8e0f	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e11	91 36		sta ($36),y			sta 	(zTemp0),y
.8e13	c8		iny				iny
.8e14	ca		dex				dex
.8e15	d0 f8		bne $8e0f			bne 	_CITRNormal
.8e17	7a		ply				ply 								; and exit.
.8e18	60		rts				rts
.8e19					NextCommand:
.8e19	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e1b	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e1d	20 ad a5	jsr $a5ad			jsr 	StackCheckFrame
.8e20	5a		phy				phy
.8e21	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e23	b1 34		lda ($34),y			lda 	(basicStack),y
.8e25	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e27	30 02		bmi $8e2b			bmi 	_NCStepNeg
.8e29	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e2b					_NCStepNeg:
.8e2b	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e2d	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e2f	18		clc				clc
.8e30					_NCBump:
.8e30	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e32	91 34		sta ($34),y			sta 	(basicStack),y
.8e34	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e36	c8		iny				iny 								; next byte
.8e37	ca		dex				dex 								; do four times
.8e38	d0 f6		bne $8e30			bne 	_NCBump
.8e3a	20 df 8d	jsr $8ddf			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e3d	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e3f	b1 34		lda ($34),y			lda 	(basicStack),y
.8e41	0a		asl a				asl 	a 							; sign bit to carry
.8e42	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e44	85 38		sta $38				sta 	zTemp1
.8e46	90 02		bcc $8e4a			bcc 	_NCCompRev 					; use if step is +ve
.8e48	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e4a					_NCCompRev:
.8e4a	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e4c	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e4e	85 39		sta $39				sta 	zTemp1+1
.8e50	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e52	38		sec				sec
.8e53					_NCCompare:
.8e53	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e55	b1 34		lda ($34),y			lda 	(basicStack),y
.8e57	a4 39		ldy $39				ldy 	zTemp1+1
.8e59	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e5b	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e5d	e6 39		inc $39				inc 	zTemp1+1
.8e5f	ca		dex				dex 								; do it 4 times.
.8e60	d0 f1		bne $8e53			bne 	_NCCompare
.8e62	50 02		bvc $8e66			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e64	49 80		eor #$80			eor 	#$80
.8e66					_NCNoOverflow:
.8e66	7a		ply				ply 								; restore Y position
.8e67	0a		asl a				asl 	a 							; is bit 7 set.
.8e68	90 04		bcc $8e6e			bcc 	_NCLoopback 				; if no , >= so loop back
.8e6a	20 9f a5	jsr $a59f			jsr 	StackClose 					; exit the loop
.8e6d	60		rts				rts
.8e6e					_NCLoopBack:
.8e6e	20 d6 a5	jsr $a5d6			jsr 	STKLoadCodePosition 		; loop back
.8e71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e72					RectangleCommand:
.8e72	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e74	80 02		bra $8e78			bra 	ShapeDrawCmd
.8e76					CircleCommand:
.8e76	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e78					ShapeDrawCmd:
.8e78	20 06 8f	jsr $8f06			jsr 	RunGraphicsCommand
.8e7b					ShapeDraw:
.8e7b	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8e7e	4c fa 8e	jmp $8efa			jmp 	ExecuteGraphicCommand	 	; and complete
.8e81					SpriteCommand:
.8e81	a2 00		ldx #$00			ldx 	#0
.8e83	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get image number.
.8e86	5a		phy				phy
.8e87	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8e89	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8e8c	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8e8e	b0 0d		bcs $8e9d			bcs 	_SCRange
.8e90	a0 ff		ldy #$ff			ldy 	#255
.8e92	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8e95	a9 32		lda #$32			lda 	#25*2
.8e97	7a		ply				ply
.8e98	20 06 8f	jsr $8f06			jsr 	RunGraphicsCommand
.8e9b	80 5d		bra $8efa			bra 	ExecuteGraphicCommand
.8e9d					_SCRange:
.8e9d	4c db b2	jmp $b2db			jmp 	RangeError
.8ea0					ImageCommand:
.8ea0	a2 00		ldx #$00			ldx 	#0
.8ea2	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get image number.
.8ea5	20 06 8f	jsr $8f06			jsr 	RunGraphicsCommand
.8ea8					ImageRunDraw:
.8ea8	09 20		ora #$20			ora 	#16*2 						; move cursor
.8eaa	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ead	ad 6a 06	lda $066a			lda 	gxDrawScale
.8eb0	0a		asl a				asl 	a
.8eb1	0a		asl a				asl 	a
.8eb2	0a		asl a				asl 	a
.8eb3	a8		tay				tay
.8eb4	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8eb6	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eb9	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ebc	60		rts				rts
.8ebd					TextCommand:
.8ebd	a2 00		ldx #$00			ldx 	#0
.8ebf	20 18 a4	jsr $a418			jsr 	EvaluateString 				; get text
.8ec2	20 06 8f	jsr $8f06			jsr 	RunGraphicsCommand
.8ec5					TextRunDraw:
.8ec5	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ec7	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8eca	a0 00		ldy #$00			ldy 	#0
.8ecc					_IRDLoop:
.8ecc	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ecf	85 37		sta $37				sta 	zTemp0+1
.8ed1	ad 08 04	lda $0408			lda 	NSMantissa0
.8ed4	85 36		sta $36				sta 	zTemp0
.8ed6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ed8	f0 13		beq $8eed			beq 	_IRDExit
.8eda	5a		phy				phy									; save string pos
.8edb	48		pha				pha 								; save char
.8edc	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8edf	0a		asl a				asl 	a
.8ee0	0a		asl a				asl 	a
.8ee1	0a		asl a				asl 	a
.8ee2	a8		tay				tay
.8ee3	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8ee5	fa		plx				plx 								; char to draw
.8ee6	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ee9	7a		ply				ply 								; restore string pos
.8eea	c8		iny				iny
.8eeb	90 df		bcc $8ecc			bcc 	_IRDLoop 					; go back if no error.
.8eed					_IRDExit:
.8eed	60		rts				rts
.8eee					PlotCommand:
.8eee	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8ef0	20 06 8f	jsr $8f06			jsr 	RunGraphicsCommand
.8ef3	80 05		bra $8efa			bra 	ExecuteGraphicCommand
.8ef5					LineCommand:
.8ef5	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8ef7	20 06 8f	jsr $8f06			jsr 	RunGraphicsCommand
.8efa					ExecuteGraphicCommand:
.8efa	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8efd	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; draw it and exit
.8f00	b0 01		bcs $8f03			bcs 	_EGCError
.8f02	60		rts				rts
.8f03					_EGCError:
.8f03	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.8f06					RunGraphicsCommand:
.8f06	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f09	68		pla				pla 								; pop handler address
.8f0a	fa		plx				plx
.8f0b	1a		inc a				inc 	a
.8f0c	d0 01		bne $8f0f			bne 	_RGINoCarry
.8f0e	e8		inx				inx
.8f0f					_RGINoCarry:
.8f0f	8d 68 06	sta $0668			sta 	GXHandler
.8f12	8e 69 06	stx $0669			stx 	GXHandler+1
.8f15					_RGICommandLoop:
.8f15	b1 30		lda ($30),y			lda 	(codePtr),y
.8f17	c8		iny				iny
.8f18	c9 c7		cmp #$c7			cmp 	#KWD_TO						; is it TO x,y
.8f1a	f0 53		beq $8f6f			beq 	_RGI_To
.8f1c	c9 b6		cmp #$b6			cmp 	#KWD_HERE 					; do it here.
.8f1e	f0 55		beq $8f75			beq 	_RGI_Here
.8f20	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f22	f0 3d		beq $8f61			beq 	_RGI_Exit
.8f24	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f26	f0 39		beq $8f61			beq 	_RGI_Exit
.8f28	c9 bd		cmp #$bd			cmp 	#KWD_OUTLINE 				; solid or outline
.8f2a	f0 3e		beq $8f6a			beq 	_RGI_Frame
.8f2c	c9 c4		cmp #$c4			cmp 	#KWD_SOLID
.8f2e	f0 33		beq $8f63			beq 	_RGI_Solid
.8f30	c9 a7		cmp #$a7			cmp 	#KWD_BY 					; by offset
.8f32	f0 4b		beq $8f7f			beq 	_RGI_By
.8f34	c9 b2		cmp #$b2			cmp 	#KWD_FROM 					; from
.8f36	f0 17		beq $8f4f			beq 	_RGI_Move2
.8f38	c9 af		cmp #$af			cmp 	#KWD_DIM 					; dim (set scale)
.8f3a	f0 65		beq $8fa1			beq 	_RGI_Dim
.8f3c	c9 ad		cmp #$ad			cmp 	#KWD_COLOUR 				; colour or Color
.8f3e	f0 78		beq $8fb8			beq 	_RGI_Colour
.8f40	c9 ac		cmp #$ac			cmp 	#KWD_COLOR
.8f42	f0 74		beq $8fb8			beq 	_RGI_Colour
.8f44	ae 63 06	ldx $0663			ldx 	gxCommandID
.8f47	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f49	d0 03		bne $8f4e			bne 	_RGI_Move 					; move
.8f4b	4c e2 8f	jmp $8fe2			jmp		_RGI_SpriteInstructions
.8f4e					_RGI_Move:
.8f4e	88		dey				dey 								; unpick get.
.8f4f					_RGI_Move2:
.8f4f	20 06 90	jsr $9006			jsr 	GCGetCoordinatePair 		; move to here
.8f52	20 2d 90	jsr $902d			jsr 	GCCopyPairToStore 			; save
.8f55	5a		phy				phy
.8f56	20 23 90	jsr $9023			jsr 	GCLoadAXY 					; load in
.8f59	09 20		ora #$20			ora 	#16*2 						; move there
.8f5b	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f5e	7a		ply				ply
.8f5f	80 b4		bra $8f15			bra 	_RGICommandLoop 			; and go round
.8f61					_RGI_Exit:
.8f61	88		dey				dey 								; unpick : / EOL
.8f62	60		rts				rts
.8f63					_RGI_Solid:
.8f63	a9 02		lda #$02			lda 	#2
.8f65	8d 64 06	sta $0664			sta 	gxFillSolid
.8f68	80 ab		bra $8f15			bra 	_RGICommandLoop
.8f6a					_RGI_Frame:
.8f6a	9c 64 06	stz $0664			stz 	gxFillSolid
.8f6d	80 a6		bra $8f15			bra 	_RGICommandLoop
.8f6f					_RGI_To:
.8f6f	20 06 90	jsr $9006			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f72	20 2d 90	jsr $902d			jsr 	GCCopyPairToStore
.8f75					_RGI_Here:
.8f75	5a		phy				phy
.8f76	20 23 90	jsr $9023			jsr 	GCLoadAXY 					; load it into AXY
.8f79	20 df 8f	jsr $8fdf			jsr 	_RGICallHandler 			; go do whatever it is.
.8f7c	7a		ply				ply
.8f7d	80 96		bra $8f15			bra 	_RGICommandLoop 			; and go round
.8f7f					_RGI_By:
.8f7f	20 13 90	jsr $9013			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8f82	18		clc				clc
.8f83	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f86	6d 65 06	adc $0665			adc 	gxxPos
.8f89	8d 65 06	sta $0665			sta 	gxXPos
.8f8c	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8f8f	6d 66 06	adc $0666			adc 	gxxPos+1
.8f92	8d 66 06	sta $0666			sta 	gxXPos+1
.8f95	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8f98	18		clc				clc
.8f99	6d 67 06	adc $0667			adc 	gxYPos
.8f9c	8d 67 06	sta $0667			sta 	gxYPos
.8f9f	80 d4		bra $8f75			bra 	_RGI_Here
.8fa1					_RGI_Dim:
.8fa1	a2 01		ldx #$01			ldx	 	#1
.8fa3	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger
.8fa6	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fa9	c9 00		cmp #$00			cmp 	#0
.8fab	f0 2f		beq $8fdc			beq 	_RGIRange
.8fad	c9 09		cmp #$09			cmp 	#8+1
.8faf	b0 2b		bcs $8fdc			bcs		_RGIRange
.8fb1	3a		dec a				dec 	a
.8fb2	8d 6a 06	sta $066a			sta 	gxDrawScale
.8fb5	4c 15 8f	jmp $8f15			jmp 	_RGICommandLoop
.8fb8					_RGI_Colour:
.8fb8	a2 01		ldx #$01			ldx 	#1 							; colour
.8fba	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger
.8fbd	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fbf	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.8fc2	b1 30		lda ($30),y			lda 	(codePtr),y
.8fc4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fc6	d0 04		bne $8fcc			bne 	_RGICDefaultMode
.8fc8	c8		iny				iny
.8fc9	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger
.8fcc					_RGICDefaultMode:
.8fcc	5a		phy				phy
.8fcd	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fcf	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fd2	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fd5	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8fd8	7a		ply				ply
.8fd9	4c 15 8f	jmp $8f15			jmp 	_RGICommandLoop 			; and go round
.8fdc					_RGIRange:
.8fdc	4c db b2	jmp $b2db			jmp 	RangeError
.8fdf					_RGICallHandler:
.8fdf	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8fe2					_RGI_SpriteInstructions:
.8fe2	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.8fe4	f0 07		beq $8fed			beq 	_RGISpriteOff
.8fe6	c9 b7		cmp #$b7			cmp 	#KWD_IMAGE
.8fe8	f0 11		beq $8ffb			beq 	_RGISetImage
.8fea	4c 4e 8f	jmp $8f4e			jmp 	_RGI_Move
.8fed					_RGISpriteOff:
.8fed	5a		phy				phy
.8fee	a0 01		ldy #$01			ldy 	#1
.8ff0	a2 00		ldx #$00			ldx 	#0
.8ff2					_RGIDoCommandLoop:
.8ff2	a9 10		lda #$10			lda 	#8*2
.8ff4	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ff7	7a		ply				ply
.8ff8	4c 15 8f	jmp $8f15			jmp 	_RGICommandLoop
.8ffb					_RGISetImage:
.8ffb	a2 01		ldx #$01			ldx 	#1
.8ffd	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger
.9000	5a		phy				phy
.9001	aa		tax				tax
.9002	a0 00		ldy #$00			ldy 	#0
.9004	80 ec		bra $8ff2			bra 	_RGIDoCommandLoop
.9006					GCGetCoordinatePair:
.9006	a2 01		ldx #$01			ldx 	#1
.9008	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.900b	20 f8 ac	jsr $acf8			jsr 	CheckComma
.900e	e8		inx				inx
.900f	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.9012	60		rts				rts
.9013					GCSignedCoordinatePair:
.9013	a2 01		ldx #$01			ldx 	#1
.9015	20 51 a4	jsr $a451			jsr 	Evaluate16BitIntegerSigned
.9018	20 f8 ac	jsr $acf8			jsr 	CheckComma
.901b	e8		inx				inx
.901c	20 51 a4	jsr $a451			jsr 	Evaluate16BitIntegerSigned
.901f	60		rts				rts
.9020					_GCCPRange:
.9020	4c db b2	jmp $b2db			jmp 	RangeError
.9023					GCLoadAXY:
.9023	ad 66 06	lda $0666			lda 	gxXPos+1
.9026	ae 65 06	ldx $0665			ldx 	gxXPos
.9029	ac 67 06	ldy $0667			ldy 	gxYPos
.902c	60		rts				rts
.902d					GCCopyPairToStore:
.902d	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9030	8d 65 06	sta $0665			sta 	gxXPos
.9033	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9036	8d 66 06	sta $0666			sta 	gxXPos+1
.9039	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.903c	8d 67 06	sta $0667			sta 	gxYPos
.903f	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9040					BitmapCtrl:
.9040	b1 30		lda ($30),y			lda 	(codePtr),y
.9042	c8		iny				iny
.9043	a2 01		ldx #$01			ldx 	#1
.9045	c9 bc		cmp #$bc			cmp 	#KWD_ON
.9047	f0 11		beq $905a			beq 	BitmapSwitch
.9049	ca		dex				dex
.904a	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.904c	f0 0c		beq $905a			beq 	BitmapSwitch
.904e	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get the colour
.9051	5a		phy				phy
.9052	aa		tax				tax
.9053	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9055	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9058	7a		ply				ply
.9059	60		rts				rts
.905a					BitmapSwitch:
.905a	5a		phy				phy
.905b	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.905d	a9 02		lda #$02			lda 	#1*2
.905f	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9062	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9064	a0 00		ldy #$00			ldy 	#0
.9066	a2 ff		ldx #$ff			ldx 	#$FF
.9068	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.906b	9c 64 06	stz $0664			stz 	gxFillSolid
.906e	9c 65 06	stz $0665			stz 	gxXPos
.9071	9c 66 06	stz $0666			stz 	gxXPos+1
.9074	9c 67 06	stz $0667			stz 	gxYPos
.9077	9c 6a 06	stz $066a			stz 	gxDrawScale
.907a	a9 20		lda #$20			lda 	#16*2 						; home cursor
.907c	a2 00		ldx #$00			ldx 	#0
.907e	a0 00		ldy #$00			ldy 	#0
.9080	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9083	7a		ply				ply
.9084	60		rts				rts
.9085					SpritesCtrl:
.9085	b1 30		lda ($30),y			lda 	(codePtr),y
.9087	c8		iny				iny
.9088	a2 01		ldx #$01			ldx 	#1
.908a	c9 bc		cmp #$bc			cmp 	#KWD_ON
.908c	f0 08		beq $9096			beq 	SpriteSwitch
.908e	ca		dex				dex
.908f	c9 bb		cmp #$bb			cmp 	#KWD_OFF
.9091	f0 03		beq $9096			beq 	SpriteSwitch
.9093	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.9096					SpriteSwitch:
.9096	5a		phy				phy
.9097	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.9099	a9 04		lda #$04			lda 	#2*2
.909b	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.909e	7a		ply				ply
.909f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90a0					GfxCommand:
.90a0	a2 00		ldx #$00			ldx 	#0
.90a2	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; command
.90a5	20 f8 ac	jsr $acf8			jsr 	CheckComma
.90a8	e8		inx				inx
.90a9	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger 		; X
.90ac	20 f8 ac	jsr $acf8			jsr 	CheckComma
.90af	e8		inx				inx
.90b0	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; Y
.90b3	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90b6	4a		lsr a				lsr 	a
.90b7	d0 16		bne $90cf			bne 	_GfxError
.90b9	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90bc	b0 11		bcs $90cf			bcs 	_GfxError 					; bit 7 should have been zero
.90be	5a		phy				phy 								; save pos
.90bf	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90c2	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90c5	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90c8	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90cb	b0 02		bcs $90cf			bcs 	_GfxError
.90cd	7a		ply				ply 								; restore pos and exit.
.90ce	60		rts				rts
.90cf					_GfxError:
.90cf	4c db b2	jmp $b2db			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90d2					Command_GOSUB:
.90d2	a2 00		ldx #$00			ldx 	#0
.90d4	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90d7	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.90d9	20 81 a5	jsr $a581			jsr 	StackOpen 					; create frame
.90dc	20 c5 a5	jsr $a5c5			jsr 	STKSaveCodePosition 		; save current position
.90df	4c f5 90	jmp $90f5			jmp 	GotoStackX
.90e2					Command_RETURN:
.90e2	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.90e4	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.90e6	20 ad a5	jsr $a5ad			jsr 	StackCheckFrame
.90e9	20 d6 a5	jsr $a5d6			jsr 	STKLoadCodePosition 		; restore code position
.90ec	20 9f a5	jsr $a59f			jsr 	StackClose
.90ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.90f0					GotoCommand:
.90f0	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.90f2	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.90f5					GotoStackX:
.90f5	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.90f8	48		pha				pha 								; it is slightly inefficient, just in cases.
.90f9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.90fc	fa		plx				plx
.90fd	20 2c a5	jsr $a52c			jsr 	MemorySearch 				; transfer to line number AX.
.9100	90 05		bcc $9107			bcc 	_GotoError 					; not found, off end.
.9102	d0 03		bne $9107			bne 	_GotoError 					; not found exactly
.9104	4c 6b 94	jmp $946b			jmp 	RunNewLine 					; and go straight to new line code.
.9107					_GotoError:
.9107	a9 0d		lda #$0d		lda	#13
.9109	4c f5 98	jmp $98f5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.910c					IfCommand:
.910c	a2 00		ldx #$00			ldx 	#0 							; If what.
.910e	20 0d a4	jsr $a40d			jsr 	EvaluateNumber
.9111	b1 30		lda ($30),y			lda 	(codePtr),y
.9113	c9 a4		cmp #$a4			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.9115	d0 0a		bne $9121			bne 	_IFStructured
.9117	c8		iny				iny 								; consume THEN
.9118	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; is it zero
.911b	f0 01		beq $911e			beq 	_IfFail 					; if fail, go to next line
.911d	60		rts				rts 								; if THEN just continue
.911e					_IfFail:
.911e	4c d0 94	jmp $94d0			jmp 	EOLCommand
.9121					_IfStructured:
.9121	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; is it zero
.9124	d0 07		bne $912d			bne 	_IfExit 					; if not, then continue normally.
.9126	a9 b1		lda #$b1			lda 	#KWD_ELSE 					; look for else/endif
.9128	a2 a1		ldx #$a1			ldx 	#KWD_ENDIF
.912a	20 67 98	jsr $9867			jsr 	ScanForward 				; and run from there/
.912d					_IfExit:
.912d	60		rts				rts
.912e					ElseCode:
.912e	a9 a1		lda #$a1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9130	aa		tax				tax 								; so just go to the structure exit
.9131	20 67 98	jsr $9867			jsr 	ScanForward
.9134	60		rts				rts
.9135					EndIf:
.9135	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.9136					UnaryJoyX:
.9136	18		clc				clc
.9137	80 01		bra $913a			bra 	JoyMain
.9139					UnaryJoyY:
.9139	38		sec				sec
.913a					JoyMain:
.913a	fa		plx				plx 								; get pos
.913b	08		php				php 								; save carry (set for Y)
.913c	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; ignore the parameter
.913f	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.9142	20 d4 b4	jsr $b4d4			jsr 	EXTReadController 			; read the controller.
.9145	28		plp				plp
.9146	90 02		bcc $914a			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9148	4a		lsr a				lsr 	a
.9149	4a		lsr a				lsr 	a
.914a					_JMNoShift:
.914a	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.914b	b0 0a		bcs $9157			bcs 	_JMIsRight
.914d	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.914e	b0 04		bcs $9154			bcs 	_JMIsLeft
.9150	20 cd a4	jsr $a4cd			jsr 	NSMSetZero 					; zero result
.9153	60		rts				rts
.9154					_JMIsLeft:
.9154	4c 62 99	jmp $9962			jmp 	ReturnTrue
.9157					_JMIsRight:
.9157	a9 01		lda #$01			lda 	#1
.9159	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.915c	60		rts				rts
.915d					UnaryJoyB:
.915d	fa		plx				plx 								; get pos
.915e	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9161	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.9164	20 d4 b4	jsr $b4d4			jsr 	EXTReadController 			; read the controller.
.9167	4a		lsr a				lsr 	a
.9168	4a		lsr a				lsr 	a
.9169	4a		lsr a				lsr 	a
.916a	4a		lsr a				lsr 	a
.916b	29 01		and #$01			and 	#1
.916d	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.9170	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9171					LetCommand:
.9171	a2 00		ldx #$00			ldx 	#0
.9173	b1 30		lda ($30),y			lda 	(codePtr),y
.9175	c9 10		cmp #$10			cmp 	#KWD_AT
.9177	d0 16		bne $918f			bne 	_LCStandard
.9179	c8		iny				iny 								; skip equal
.917a	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm 				; get a number
.917d	20 13 9e	jsr $9e13			jsr 	Dereference 				; dereference it
.9180	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.9183	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.9185	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9188	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.918a	d0 10		bne $919c			bne 	_LCMain
.918c	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; was a reference before.
.918f					_LCStandard:
.918f	ad e6 9c	lda $9ce6			lda 	PrecedenceLevel+"*"			; precedence > this
.9192	20 00 9d	jsr $9d00			jsr 	EvaluateExpressionAtPrecedence
.9195	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.9198	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.919a	f0 0e		beq $91aa			beq 	_LetGoProc 					; it's a procedure call.
.919c					_LCMain:
.919c	a9 3d		lda #$3d			lda 	#"=" 						; check =
.919e	20 00 ad	jsr $ad00			jsr 	CheckNextA
.91a1	e8		inx				inx 								; RHS
.91a2	20 04 a4	jsr $a404			jsr 	EvaluateValue
.91a5	ca		dex				dex
.91a6	20 ad 91	jsr $91ad			jsr 	AssignVariable
.91a9	60		rts				rts
.91aa					_LetGoProc:
.91aa	4c 46 93	jmp $9346			jmp 	CallProcedure
.91ad					AssignVariable:
.91ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91b0	48		pha				pha 								; save a copy
.91b1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91b4	29 10		and #$10			and 	#NSBIsString
.91b6	d0 0b		bne $91c3			bne 	_ASError
.91b8	68		pla				pla 								; get back
.91b9	29 10		and #$10			and 	#NSBIsString 				; check type
.91bb	d0 03		bne $91c0			bne 	_ASString
.91bd	4c 3b 9d	jmp $9d3b			jmp 	AssignNumber
.91c0					_ASString:
.91c0	4c a9 9d	jmp $9da9			jmp 	AssignString
.91c3					_ASError:
.91c3	4c e0 b2	jmp $b2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91c6					Command_List:
.91c6	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91c9	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91cc	a9 ff		lda #$ff			lda 	#$FF
.91ce	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91d1	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91d4	b1 30		lda ($30),y			lda 	(codePtr),y
.91d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91d8	f0 1e		beq $91f8			beq 	_CLSecond
.91da	20 56 92	jsr $9256			jsr 	CLIsDigit 					; if not digit, list all
.91dd	b0 24		bcs $9203			bcs 	_CLStart
.91df	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91e1	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.91e4	b1 30		lda ($30),y			lda 	(codePtr),y
.91e6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91e8	f0 0e		beq $91f8			beq 	_CLSecond 					; if so go get it
.91ea	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.91ed	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91f0	ad 14 04	lda $0414			lda 	NSMantissa1+4
.91f3	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91f6	80 0b		bra $9203			bra 	_CLStart
.91f8					_CLSecond:
.91f8	c8		iny				iny 								; consume comma
.91f9	20 56 92	jsr $9256			jsr 	CLIsDigit 					; digit found
.91fc	b0 05		bcs $9203			bcs 	_CLStart 					; if not, continue listing
.91fe	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9200	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger
.9203					_CLStart
.9203	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9205	85 30		sta $30				sta 	codePtr
.9207	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9209	85 31		sta $31				sta 	codePtr+1
.920b					_CLLoop:
.920b	20 d1 b4	jsr $b4d1			jsr 	EXTBreakCheck 				; break check
.920e	f0 30		beq $9240			beq 	_CLExit
.9210	b2 30		lda ($30)			lda 	(codePtr)
.9212	f0 2c		beq $9240			beq 	_CLExit
.9214	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9216	20 43 92	jsr $9243			jsr 	CLCompareLineNo
.9219	90 18		bcc $9233			bcc 	_CLNext
.921b	a2 07		ldx #$07			ldx 	#7
.921d	20 43 92	jsr $9243			jsr 	CLCompareLineNo
.9220	f0 02		beq $9224			beq 	_CLDoThisOne
.9222	b0 0f		bcs $9233			bcs 	_CLNext
.9224					_CLDoThisOne:
.9224	20 c3 96	jsr $96c3			jsr 	ListConvertLine 			; convert line into token Buffer
.9227	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9229	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.922b	20 4e 99	jsr $994e			jsr 	PrintStringXA
.922e	a9 0d		lda #$0d			lda 	#13 						; new line
.9230	20 90 b4	jsr $b490			jsr 	EXTPrintCharacter
.9233					_CLNext:
.9233	18		clc				clc
.9234	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9236	65 30		adc $30				adc 	codePtr
.9238	85 30		sta $30				sta 	codePtr
.923a	90 02		bcc $923e			bcc 	_CREExit
.923c	e6 31		inc $31				inc 	codePtr+1
.923e					_CREExit:
.923e	80 cb		bra $920b			bra 	_CLLoop
.9240					_CLExit:
.9240	4c 37 8b	jmp $8b37			jmp 	WarmStart
.9243					CLCompareLineNo:
.9243	38		sec				sec
.9244	a0 01		ldy #$01			ldy 	#1
.9246	b1 30		lda ($30),y			lda 	(codePtr),y
.9248	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.924b	85 36		sta $36				sta 	zTemp0
.924d	c8		iny				iny
.924e	b1 30		lda ($30),y			lda 	(codePtr),y
.9250	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9253	05 36		ora $36				ora 	zTemp0
.9255	60		rts				rts
.9256					CLIsDigit:
.9256	b1 30		lda ($30),y			lda 	(codePtr),y
.9258	c9 30		cmp #$30			cmp 	#"0"
.925a	90 03		bcc $925f			bcc	 	_CLIDExitFalse
.925c	c9 3a		cmp #$3a			cmp 	#"9"+1
.925e	60		rts				rts
.925f					_CLIDExitFalse:
.925f	38		sec				sec
.9260	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9261					Command_LOCAL:
.9261	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9263	20 6f 92	jsr $926f			jsr 	LocaliseNextTerm 			; convert term to a local.
.9266	b1 30		lda ($30),y			lda 	(codePtr),y
.9268	c8		iny				iny
.9269	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.926b	f0 f4		beq $9261			beq 	Command_LOCAL
.926d	88		dey				dey 								; unpick pre-get
.926e	60		rts				rts
.926f					LocaliseNextTerm:
.926f	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm 				; evaluate the term
.9272	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9275	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9277	f0 69		beq $92e2			beq		_LNTError
.9279	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.927c	85 36		sta $36				sta 	zTemp0
.927e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9281	85 37		sta $37				sta  	zTemp0+1
.9283	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9286	29 10		and #$10			and 	#NSBIsString
.9288	d0 22		bne $92ac			bne 	_LNTPushString
.928a	5a		phy				phy
.928b	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.928d					_LNTPushNumLoop:
.928d	b1 36		lda ($36),y			lda		(zTemp0),y
.928f	20 5f a5	jsr $a55f			jsr 	StackPushByte
.9292	a9 00		lda #$00			lda 	#0
.9294	91 36		sta ($36),y			sta 	(zTemp0),y
.9296	c8		iny				iny
.9297	c0 05		cpy #$05			cpy 	#5
.9299	d0 f2		bne $928d			bne 	_LNTPushNumLoop
.929b	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.929d	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92a0	a5 37		lda $37				lda 	zTemp0+1
.92a2	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92a5	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92a7	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92aa	7a		ply				ply
.92ab	60		rts				rts
.92ac					_LNTPushString:
.92ac	5a		phy				phy
.92ad	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92af	85 38		sta $38				sta 	zTemp1
.92b1	a0 01		ldy #$01			ldy 	#1
.92b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.92b5	85 39		sta $39				sta 	zTemp1+1
.92b7	a0 00		ldy #$00			ldy 	#0 							; output string
.92b9	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92bb	f0 0a		beq $92c7			beq 	_LNTStringOut
.92bd					_LNTPushStrLoop:
.92bd	b1 38		lda ($38),y			lda 	(zTemp1),y
.92bf	f0 06		beq $92c7			beq 	_LNTStringOut
.92c1	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92c4	c8		iny				iny
.92c5	80 f6		bra $92bd			bra 	_LNTPushStrLoop
.92c7					_LNTStringOut:
.92c7	98		tya				tya									; output length
.92c8	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92cb	a9 00		lda #$00			lda 	#0 							; clear original string.
.92cd	92 38		sta ($38)			sta 	(zTemp1)
.92cf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92d2	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92d5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92d8	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92db	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92dd	20 5f a5	jsr $a55f			jsr 	StackPushByte
.92e0	7a		ply				ply
.92e1	60		rts				rts
.92e2					_LNTError:
.92e2	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.ac97					LocalPopValue:
.ac97	20 78 a5	jsr $a578			jsr 	StackPopByte
.ac9a	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ac9c	d0 17		bne $acb5			bne 	_LPVString
.ac9e	20 78 a5	jsr $a578			jsr 	StackPopByte 				; address
.aca1	85 37		sta $37				sta 	zTemp0+1
.aca3	20 78 a5	jsr $a578			jsr 	StackPopByte
.aca6	85 36		sta $36				sta 	zTemp0
.aca8	5a		phy				phy
.aca9	a0 04		ldy #$04			ldy 	#4 							; copy back
.acab					_LPVNumberCopy:
.acab	20 78 a5	jsr $a578			jsr 	StackPopByte
.acae	91 36		sta ($36),y			sta 	(zTemp0),y
.acb0	88		dey				dey
.acb1	10 f8		bpl $acab			bpl 	_LPVNumberCopy
.acb3	7a		ply				ply 								; and complete
.acb4	60		rts				rts
.acb5					_LPVString:
.acb5	20 78 a5	jsr $a578			jsr 	StackPopByte 				; address of record => zTemp0
.acb8	85 37		sta $37				sta 	zTemp0+1
.acba	20 78 a5	jsr $a578			jsr 	StackPopByte
.acbd	85 36		sta $36				sta 	zTemp0
.acbf	5a		phy				phy
.acc0	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.acc2	85 38		sta $38				sta 	zTemp1
.acc4	a0 01		ldy #$01			ldy 	#1
.acc6	b1 36		lda ($36),y			lda 	(zTemp0),y
.acc8	85 39		sta $39				sta 	zTemp1+1
.acca	20 78 a5	jsr $a578			jsr 	StackPopByte 				; # to get => y
.accd	a8		tay				tay
.acce	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.acd0	f0 0e		beq $ace0			beq 	_LPVStringCopied
.acd2	a9 00		lda #$00			lda 	#0 							; NULL on end
.acd4	91 38		sta ($38),y			sta 	(zTemp1),y
.acd6					_LPVStringCopy:
.acd6	88		dey				dey
.acd7	30 07		bmi $ace0			bmi 	_LPVStringCopied
.acd9	20 78 a5	jsr $a578			jsr 	StackPopByte
.acdc	91 38		sta ($38),y			sta 	(zTemp1),y
.acde	80 f6		bra $acd6			bra 	_LPVStringCopy
.ace0					_LPVStringCopied:
.ace0	fa		plx				plx
.ace1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92e5					NewCommand:
.92e5	20 0a a5	jsr $a50a			jsr 	MemoryNew
.92e8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.92eb	20 d0 8b	jsr $8bd0			jsr 	ClearCommand 				; clear everything.
.92ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.92ef					Command_Print:
.92ef	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.92f0					_CPLoop:
.92f0	08		php				php 								; save last action flag
.92f1	b1 30		lda ($30),y			lda 	(codePtr),y
.92f3	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.92f5	f0 46		beq $933d			beq 	_CPExit
.92f7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.92f9	f0 42		beq $933d			beq 	_CPExit
.92fb	68		pla				pla 								; throw last action flag
.92fc	b1 30		lda ($30),y			lda 	(codePtr),y
.92fe	c8		iny				iny
.92ff	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9301	f0 37		beq $933a			beq 	_CPContinueWithSameLine
.9303	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9305	f0 2e		beq $9335			beq 	_CPTab
.9307	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9309	f0 26		beq $9331			beq 	_CPNewLine
.930b	88		dey				dey 								; undo the get.
.930c	a2 00		ldx #$00			ldx 	#0
.930e	20 04 a4	jsr $a404			jsr 	EvaluateValue 				; get a value into slot 0
.9311	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9314	29 10		and #$10			and 	#NSBIsString
.9316	f0 0b		beq $9323			beq 	_CPNumber
.9318	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.931b	ad 08 04	lda $0408			lda 	NSMantissa0
.931e	20 4e 99	jsr $994e			jsr 	PrintStringXA
.9321	80 cc		bra $92ef			bra 	Command_Print 				; loop round clearing carry so NL if end
.9323					_CPNumber:
.9323	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9325	20 da a2	jsr $a2da			jsr 	ConvertNumberToString 		; convert to string
.9328	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.932a	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.932c	20 4e 99	jsr $994e			jsr 	PrintStringXA
.932f	80 be		bra $92ef			bra 	Command_Print 				; loop round clearing carry so NL if end
.9331					_CPNewLine:
.9331	a9 0d		lda #$0d			lda 	#13
.9333	80 02		bra $9337			bra 	_CPPrintChar
.9335					_CPTab:
.9335	a9 09		lda #$09			lda 	#9 							; print TAB
.9337					_CPPrintChar:
.9337	20 90 b4	jsr $b490			jsr 	EXTPrintCharacter
.933a					_CPContinueWithSameLine:
.933a	38		sec				sec 								; loop round with carry set, which
.933b	80 b3		bra $92f0			bra 	_CPLoop 					; will inhibit final CR
.933d					_CPExit:
.933d	28		plp				plp 								; get last action flag
.933e	b0 05		bcs $9345			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9340	a9 0d		lda #$0d			lda 	#13 						; print new line
.9342	20 90 b4	jsr $b490			jsr 	EXTPrintCharacter
.9345					_CPExit2:
.9345	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9346					CallProcedure:
.9346	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9348	b1 30		lda ($30),y			lda 	(codePtr),y
.934a	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.934c	f0 0c		beq $935a			beq 	_CPEndParam
.934e					_CPParamLoop:
.934e	20 fe 9c	jsr $9cfe			jsr 	EvaluateExpression 			; get parameter onto stack
.9351	e8		inx				inx 								; bump next stack
.9352	b1 30		lda ($30),y			lda 	(codePtr),y
.9354	c8		iny				iny
.9355	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9357	f0 f5		beq $934e			beq 	_CPParamLoop
.9359	88		dey				dey 								; unpick.
.935a					_CPEndParam:
.935a	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.935d	c8		iny				iny									; skip right bracket
.935e	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9360	20 81 a5	jsr $a581			jsr 	StackOpen
.9363	20 c5 a5	jsr $a5c5			jsr 	STKSaveCodePosition 		; save loop position
.9366	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9369	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.936b	ad 10 04	lda $0410			lda 	NSMantissa1
.936e	85 37		sta $37				sta 	zTemp0+1
.9370	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9372	b2 36		lda ($36)			lda 	(zTemp0)
.9374	85 30		sta $30				sta 	safePtr
.9376	b1 36		lda ($36),y			lda 	(zTemp0),y
.9378	85 31		sta $31				sta 	safePtr+1
.937a	c8		iny				iny
.937b	b1 36		lda ($36),y			lda 	(zTemp0),y
.937d	85 32		sta $32				sta 	safePtr+2
.937f	c8		iny				iny
.9380	b1 36		lda ($36),y			lda 	(zTemp0),y
.9382	85 33		sta $33				sta 	safePtr+3
.9384	c8		iny				iny 								; get Y offset -> Y
.9385	b1 36		lda ($36),y			lda 	(zTemp0),y
.9387	a8		tay				tay
.9388	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.938a	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.938d	f0 13		beq $93a2			beq 	_ParamExit 					; if so, exit.
.938f					_ParamExtract:
.938f	ca		dex				dex 								; put a local term on the level before
.9390	20 6f 92	jsr $926f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9393	20 ad 91	jsr $91ad			jsr 	AssignVariable 				; assign stacked value to the variable.
.9396	e8		inx				inx 								; advance to next parameter to do.
.9397	e8		inx				inx
.9398	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.939b	f0 05		beq $93a2			beq 	_ParamExit
.939d	20 f8 ac	jsr $acf8			jsr 	CheckComma 					; comma seperating parameters
.93a0	80 ed		bra $938f			bra 	_ParamExtract
.93a2					_ParamExit:
.93a2	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 			; check )
.93a5	60		rts				rts 								; and continue from here
.ace2					Command_ENDPROC:
.ace2	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ace4	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ace6	20 ad a5	jsr $a5ad			jsr 	StackCheckFrame
.ace9	20 d6 a5	jsr $a5d6			jsr 	STKLoadCodePosition 		; restore code position
.acec	20 9f a5	jsr $a59f			jsr 	StackClose
.acef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93a6					Command_Read:
.93a6	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93a8	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm
.93ab	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93ae	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93b0	f0 4a		beq $93fc			beq 	_CRSyntax 					; check reference (bit 0)
.93b2	20 45 94	jsr $9445			jsr 	SwapDataCodePtrs 			; swap code and data
.93b5	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93b8	d0 20		bne $93da			bne 	_CRContinueData
.93ba					_CRKeepSearching:
.93ba	a9 ae		lda #$ae			lda 	#KWD_DATA 					; scan for instruction
.93bc	aa		tax				tax
.93bd	20 67 98	jsr $9867			jsr 	ScanForward
.93c0	c9 ae		cmp #$ae			cmp 	#KWD_DATA 					; found data ?
.93c2	f0 16		beq $93da			beq 	_CRHaveData 				; found it
.93c4	18		clc				clc
.93c5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93c7	65 30		adc $30				adc 	codePtr
.93c9	85 30		sta $30				sta 	codePtr
.93cb	90 02		bcc $93cf			bcc 	_CREExit
.93cd	e6 31		inc $31				inc 	codePtr+1
.93cf					_CREExit:
.93cf	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93d1	b2 30		lda ($30)			lda 	(codePtr)
.93d3	d0 e5		bne $93ba			bne 	_CRKeepSearching
.93d5	a9 0b		lda #$0b		lda	#11
.93d7	4c f5 98	jmp $98f5		jmp	ErrorHandler
.93da					_CRHaveData:
.93da					_CRContinueData:
.93da	a2 01		ldx #$01			ldx 	#1
.93dc	20 04 a4	jsr $a404			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93df	ca		dex				dex
.93e0	20 ad 91	jsr $91ad			jsr		AssignVariable 				; do the assignment
.93e3	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.93e6	b1 30		lda ($30),y			lda 	(codePtr),y
.93e8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.93ea	d0 04		bne $93f0			bne 	_CRSwapBack
.93ec	c8		iny				iny 								; consume comma
.93ed	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.93f0					_CRSwapBack:
.93f0	20 45 94	jsr $9445			jsr 	SwapDataCodePtrs			; swap them back.
.93f3	b1 30		lda ($30),y			lda 	(codePtr),y
.93f5	c8		iny				iny
.93f6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.93f8	f0 ac		beq $93a6			beq 	Command_Read 				; if so go round again.
.93fa	88		dey				dey 								; unpick get.
.93fb	60		rts				rts
.93fc					_CRSyntax:
.93fc	4c d6 b2	jmp $b2d6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.93ff					RemCommand:
.93ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9401	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9403	d0 06		bne $940b			bne 	_RMExit
.9405	c8		iny				iny
.9406	98		tya				tya
.9407	38		sec				sec
.9408	71 30		adc ($30),y			adc 	(codePtr),y
.940a	a8		tay				tay
.940b					_RMExit:
.940b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.940c					Command_REPEAT:
.940c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.940e	20 81 a5	jsr $a581			jsr 	StackOpen
.9411	20 c5 a5	jsr $a5c5			jsr 	STKSaveCodePosition 		; save loop position
.9414	60		rts				rts
.9415					Command_UNTIL:
.9415	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9417	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9419	20 ad a5	jsr $a5ad			jsr 	StackCheckFrame
.941c	a2 00		ldx #$00			ldx 	#0
.941e	20 0d a4	jsr $a40d			jsr 	EvaluateNumber 				; work out the number
.9421	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; check if zero
.9424	f0 04		beq $942a			beq 	_CULoopBack 				; if so keep looping
.9426	20 9f a5	jsr $a59f			jsr 	StackClose		 			; return
.9429	60		rts				rts
.942a					_CULoopBack:
.942a	20 d6 a5	jsr $a5d6			jsr 	STKLoadCodePosition 		; loop back
.942d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.942e					Command_Restore:
.942e	20 45 94	jsr $9445			jsr 	SwapDataCodePtrs 			; swap code and data
.9431	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9433	85 30		sta $30				sta 	codePtr
.9435	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9437	85 31		sta $31				sta 	codePtr+1
.9439	20 45 94	jsr $9445			jsr 	SwapDataCodePtrs 			; put them back
.943c	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.943e	8d 9b 04	sta $049b			sta 	dataPointer+4
.9441	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9444	60		rts				rts
.9445					SwapDataCodePtrs:
.9445	da		phx				phx
.9446	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9448					_SDCPLoop:
.9448	b5 30		lda $30,x			lda 	safePtr,x
.944a	48		pha				pha
.944b	bd 97 04	lda $0497,x			lda 	dataPointer,x
.944e	95 30		sta $30,x			sta 	safePtr,x
.9450	68		pla				pla
.9451	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9454	ca		dex				dex
.9455	10 f1		bpl $9448			bpl 	_SDCPLoop
.9457	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.945a	8c 9b 04	sty $049b			sty 	dataPointer+4
.945d	a8		tay				tay
.945e	fa		plx				plx
.945f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9460					CommandRUN:
.9460	20 d0 8b	jsr $8bd0			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9463	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9465	85 30		sta $30				sta 	codePtr
.9467	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9469	85 31		sta $31				sta 	codePtr+1
.946b					RUNNewLine:
.946b	b2 30		lda ($30)			lda 	(codePtr)
.946d	f0 5e		beq $94cd			beq 	CRNoProgram         		; no then END.
.946f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9471	9a		txs				txs
.9472					RUNCodePointerLine:
.9472	a0 02		ldy #$02			ldy 	#2 							; start of program
.9474					_CRIncMainLoop:
.9474	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9477	d0 05		bne $947e			bne 	_CRNoBreakCheck
.9479	20 d1 b4	jsr $b4d1			jsr 	EXTBreakCheck 				; break check
.947c	f0 4a		beq $94c8			beq 	_CRBreak
.947e					_CRNoBreakCheck:
.947e	c8		iny				iny
.947f					_CRMainLoop:
.947f	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9482	b1 30		lda ($30),y			lda 	(codePtr),y
.9484	10 10		bpl $9496			bpl 	_CRNotKeyword
.9486	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9488	b0 04		bcs $948e			bcs 	_CRIsKeyword
.948a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.948c	b0 34		bcs $94c2			bcs		_CRSyntaxError
.948e					_CRIsKeyword:
.948e	c8		iny				iny 								; consume command
.948f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9490	aa		tax				tax 								; put in X for vector jump
.9491	20 c5 94	jsr $94c5			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9494	80 e9		bra $947f			bra 	_CRMainLoop 				; and loop round
.9496					_CRNotKeyword:
.9496	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9498	f0 da		beq $9474			beq 	_CRIncMainLoop
.949a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.949c	90 05		bcc $94a3			bcc 	_CRNotVariable
.949e					_CRGoLet:
.949e	20 71 91	jsr $9171			jsr 	LetCommand
.94a1	80 dc		bra $947f			bra 	_CRMainLoop
.94a3					_CRNotVariable:
.94a3	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94a5	f0 f7		beq $949e			beq 	_CRGoLet
.94a7	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94a9	f0 f3		beq $949e			beq 	_CRGoLet
.94ab	c9 21		cmp #$21			cmp 	#KWD_PLING
.94ad	f0 ef		beq $949e			beq 	_CRGoLet
.94af	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94b1	f0 09		beq $94bc			beq 	_CRGoRem
.94b3	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94b5	d0 0b		bne $94c2			bne 	_CRSyntaxError
.94b7	20 70 8a	jsr $8a70			jsr 	LabelHere
.94ba	80 c3		bra $947f			bra 	_CRMainLoop
.94bc					_CRGoRem:
.94bc	c8		iny				iny
.94bd	20 ff 93	jsr $93ff			jsr 	RemCommand
.94c0	80 bd		bra $947f			bra 	_CRMainLoop
.94c2					_CRSyntaxError:
.94c2	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.94c5					_CRCallVector0:
.94c5	7c 70 95	jmp ($9570,x)			jmp 	(VectorSet0,x)
.94c8					_CRBreak:
.94c8	a9 01		lda #$01		lda	#1
.94ca	4c f5 98	jmp $98f5		jmp	ErrorHandler
.94cd					CRNoProgram:
.94cd	4c f3 8c	jmp $8cf3			jmp 	EndCommand
.94d0					EOLCommand:
.94d0	18		clc				clc
.94d1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94d3	65 30		adc $30				adc 	codePtr
.94d5	85 30		sta $30				sta 	codePtr
.94d7	90 02		bcc $94db			bcc 	_CREExit
.94d9	e6 31		inc $31				inc 	codePtr+1
.94db					_CREExit:
.94db	80 8e		bra $946b			bra 	RunNewLine
.94dd					Shift1Command:
.94dd	b1 30		lda ($30),y			lda 	(codePtr),y
.94df	c8		iny				iny
.94e0	0a		asl a				asl 	a
.94e1	aa		tax				tax
.94e2	7c 00 96	jmp ($9600,x)			jmp 	(VectorSet1,x)
.94e5					Shift2Command:
.94e5	b1 30		lda ($30),y			lda 	(codePtr),y
.94e7	c8		iny				iny
.94e8	0a		asl a				asl 	a
.94e9	aa		tax				tax
.94ea	7c 1a 96	jmp ($961a,x)			jmp 	(VectorSet2,x)
.94ed					Unused1:
.94ed					Unused2:
.94ed					Unused3:
.94ed					Unused4:
.94ed	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
>94f0							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.94f0					VectorSetPunc:
>94f0	9f 9a					.word	ShiftLeft                        ; $00 <<
>94f2	99 99					.word	BinaryCompareLessEqual           ; $01 <=
>94f4	8f 99					.word	BinaryCompareNotEqual            ; $02 <>
>94f6	d6 b2					.word	SyntaxError                      ; $03 !!3
>94f8	d6 b2					.word	SyntaxError                      ; $04 ><
>94fa	a3 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>94fc	a2 9a					.word	ShiftRight                       ; $06 >>
>94fe	d6 b2					.word	SyntaxError                      ; $07 !!7
>9500	d6 b2					.word	SyntaxError                      ; $08 !!8
>9502	d6 b2					.word	SyntaxError                      ; $09 !!9
>9504	d6 b2					.word	SyntaxError                      ; $0a !!10
>9506	d6 b2					.word	SyntaxError                      ; $0b !!11
>9508	d6 b2					.word	SyntaxError                      ; $0c !!12
>950a	d6 b2					.word	SyntaxError                      ; $0d !!13
>950c	d6 b2					.word	SyntaxError                      ; $0e !!14
>950e	d6 b2					.word	SyntaxError                      ; $0f !!15
>9510	d6 b2					.word	SyntaxError                      ; $10 @
>9512	d6 b2					.word	SyntaxError                      ; $11 !!17
>9514	d6 b2					.word	SyntaxError                      ; $12 !!18
>9516	d6 b2					.word	SyntaxError                      ; $13 [
>9518	09 ad					.word	IntegerDivide                    ; $14 \
>951a	d6 b2					.word	SyntaxError                      ; $15 ]
>951c	28 9c					.word	EorInteger                       ; $16 ^
>951e	d6 b2					.word	SyntaxError                      ; $17 _
>9520	d6 b2					.word	SyntaxError                      ; $18 `
>9522	d6 b2					.word	SyntaxError                      ; $19 !!25
>9524	d6 b2					.word	SyntaxError                      ; $1a !!26
>9526	d6 b2					.word	SyntaxError                      ; $1b {
>9528	e2 9b					.word	OraInteger                       ; $1c |
>952a	d6 b2					.word	SyntaxError                      ; $1d }
>952c	d6 b2					.word	SyntaxError                      ; $1e ~
>952e	d6 b2					.word	SyntaxError                      ; $1f [7m<7F>[m
>9530	d6 b2					.word	SyntaxError                      ; $20
>9532	6e 9c					.word	WordIndirect                     ; $21 !
>9534	d6 b2					.word	SyntaxError                      ; $22 "
>9536	d6 b2					.word	SyntaxError                      ; $23 #
>9538	d6 b2					.word	SyntaxError                      ; $24 $
>953a	56 ad					.word	IntegerModulus                   ; $25 %
>953c	9c 9b					.word	AndInteger                       ; $26 &
>953e	d6 b2					.word	SyntaxError                      ; $27 '
>9540	d6 b2					.word	SyntaxError                      ; $28 (
>9542	d6 b2					.word	SyntaxError                      ; $29 )
>9544	cb ad					.word	MulInteger                       ; $2a *
>9546	36 9b					.word	AddInteger                       ; $2b +
>9548	d6 b2					.word	SyntaxError                      ; $2c ,
>954a	71 9b					.word	SubInteger                       ; $2d -
>954c	d6 b2					.word	SyntaxError                      ; $2e .
>954e	62 af					.word	FDivideCommand                   ; $2f /
>9550	d6 b2					.word	SyntaxError                      ; $30 0
>9552	d6 b2					.word	SyntaxError                      ; $31 1
>9554	d6 b2					.word	SyntaxError                      ; $32 2
>9556	d6 b2					.word	SyntaxError                      ; $33 3
>9558	d6 b2					.word	SyntaxError                      ; $34 4
>955a	d6 b2					.word	SyntaxError                      ; $35 5
>955c	d6 b2					.word	SyntaxError                      ; $36 6
>955e	d6 b2					.word	SyntaxError                      ; $37 7
>9560	d6 b2					.word	SyntaxError                      ; $38 8
>9562	d6 b2					.word	SyntaxError                      ; $39 9
>9564	d6 b2					.word	SyntaxError                      ; $3a :
>9566	d6 b2					.word	SyntaxError                      ; $3b ;
>9568	7b 99					.word	BinaryCompareLess                ; $3c <
>956a	71 99					.word	BinaryCompareEqual               ; $3d =
>956c	85 99					.word	BinaryCompareGreater             ; $3e >
>956e	95 9c					.word	ByteIndirect                     ; $3f ?
.9570					VectorSet0:
>9570	d0 94					.word	EOLCommand                       ; $80 !0:EOF
>9572	dd 94					.word	Shift1Command                    ; $81 !1:SH1
>9574	e5 94					.word	Shift2Command                    ; $82 !2:SH2
>9576	a8 b0					.word	AbsUnary                         ; $83 ABS(
>9578	65 a1					.word	AllocUnary                       ; $84 ALLOC(
>957a	b8 b0					.word	AscUnary                         ; $85 ASC(
>957c	8b a2					.word	ChrUnary                         ; $86 CHR$(
>957e	f6 8c					.word	UnaryEvent                       ; $87 EVENT(
>9580	6d 99					.word	UnaryFalse                       ; $88 FALSE
>9582	c5 b0					.word	FracUnary                        ; $89 FRAC(
>9584	db b0					.word	IntUnary                         ; $8a INT(
>9586	31 b1					.word	IsValUnary                       ; $8b ISVAL(
>9588	5d 91					.word	UnaryJoyB                        ; $8c JOYB(
>958a	36 91					.word	UnaryJoyX                        ; $8d JOYX(
>958c	39 91					.word	UnaryJoyY                        ; $8e JOYY(
>958e	65 a3					.word	Unary_Left                       ; $8f LEFT$(
>9590	ed b0					.word	LenUnary                         ; $90 LEN(
>9592	8f a3					.word	Unary_Mid                        ; $91 MID$(
>9594	d5 a1					.word	Unary_Not                        ; $92 NOT(
>9596	eb a1					.word	Unary_Random                     ; $93 RANDOM(
>9598	75 a3					.word	Unary_Right                      ; $94 RIGHT$(
>959a	0a a2					.word	Unary_Rnd                        ; $95 RND(
>959c	07 b1					.word	SgnUnary                         ; $96 SGN(
>959e	9d a2					.word	SpcUnary                         ; $97 SPC(
>95a0	b8 a2					.word	Unary_Str                        ; $98 STR$(
>95a2	a7 96					.word	UnaryTimer                       ; $99 TIMER(
>95a4	61 99					.word	UnaryTrue                        ; $9a TRUE
>95a6	27 b1					.word	ValUnary                         ; $9b VAL(
>95a8	5f 8d					.word	ForCommand                       ; $9c FOR
>95aa	0c 91					.word	IfCommand                        ; $9d IF
>95ac	ed 94					.word	Unused1                          ; $9e PROC
>95ae	0c 94					.word	Command_REPEAT                   ; $9f REPEAT
>95b0	c6 98					.word	Command_WHILE                    ; $a0 WHILE
>95b2	35 91					.word	EndIf                            ; $a1 ENDIF
>95b4	e2 ac					.word	Command_ENDPROC                  ; $a2 ENDPROC
>95b6	19 8e					.word	NextCommand                      ; $a3 NEXT
>95b8	ed 94					.word	Unused4                          ; $a4 THEN
>95ba	15 94					.word	Command_UNTIL                    ; $a5 UNTIL
>95bc	e7 98					.word	Command_WEND                     ; $a6 WEND
>95be	d6 b2					.word	SyntaxError                      ; $a7 BY
>95c0	96 8b					.word	CallCommand                      ; $a8 CALL
>95c2	76 8e					.word	CircleCommand                    ; $a9 CIRCLE
>95c4	d0 8b					.word	ClearCommand                     ; $aa CLEAR
>95c6	28 8c					.word	ClearScreen                      ; $ab CLS
>95c8	d6 b2					.word	SyntaxError                      ; $ac COLOR
>95ca	d6 b2					.word	SyntaxError                      ; $ad COLOUR
>95cc	2e 8c					.word	Command_Data                     ; $ae DATA
>95ce	36 8c					.word	DimCommand                       ; $af DIM
>95d0	ed 94					.word	Unused3                          ; $b0 DOWNTO
>95d2	2e 91					.word	ElseCode                         ; $b1 ELSE
>95d4	d6 b2					.word	SyntaxError                      ; $b2 FROM
>95d6	a0 90					.word	GfxCommand                       ; $b3 GFX
>95d8	d2 90					.word	Command_GOSUB                    ; $b4 GOSUB
>95da	f0 90					.word	GotoCommand                      ; $b5 GOTO
>95dc	d6 b2					.word	SyntaxError                      ; $b6 HERE
>95de	a0 8e					.word	ImageCommand                     ; $b7 IMAGE
>95e0	71 91					.word	LetCommand                       ; $b8 LET
>95e2	f5 8e					.word	LineCommand                      ; $b9 LINE
>95e4	61 92					.word	Command_LOCAL                    ; $ba LOCAL
>95e6	d6 b2					.word	SyntaxError                      ; $bb OFF
>95e8	d6 b2					.word	SyntaxError                      ; $bc ON
>95ea	d6 b2					.word	SyntaxError                      ; $bd OUTLINE
>95ec	ee 8e					.word	PlotCommand                      ; $be PLOT
>95ee	ef 92					.word	Command_Print                    ; $bf PRINT
>95f0	a6 93					.word	Command_Read                     ; $c0 READ
>95f2	72 8e					.word	RectangleCommand                 ; $c1 RECT
>95f4	ff 93					.word	RemCommand                       ; $c2 REM
>95f6	e2 90					.word	Command_RETURN                   ; $c3 RETURN
>95f8	d6 b2					.word	SyntaxError                      ; $c4 SOLID
>95fa	81 8e					.word	SpriteCommand                    ; $c5 SPRITE
>95fc	bd 8e					.word	TextCommand                      ; $c6 TEXT
>95fe	ed 94					.word	Unused2                          ; $c7 TO
.9600					VectorSet1:
>9600	d6 b2					.word	SyntaxError                      ; $80 !0:EOF
>9602	d6 b2					.word	SyntaxError                      ; $81 !1:SH1
>9604	d6 b2					.word	SyntaxError                      ; $82 !2:SH2
>9606	67 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9608	86 8b					.word	AssertCommand                    ; $84 ASSERT
>960a	40 90					.word	BitmapCtrl                       ; $85 BITMAP
>960c	f3 8c					.word	EndCommand                       ; $86 END
>960e	c6 91					.word	Command_List                     ; $87 LIST
>9610	e5 92					.word	NewCommand                       ; $88 NEW
>9612	2e 94					.word	Command_Restore                  ; $89 RESTORE
>9614	60 94					.word	CommandRUN                       ; $8a RUN
>9616	85 90					.word	SpritesCtrl                      ; $8b SPRITES
>9618	a2 96					.word	StopCommand                      ; $8c STOP
.961a					VectorSet2:
>961a	d6 b2					.word	SyntaxError                      ; $80 !0:EOF
>961c	d6 b2					.word	SyntaxError                      ; $81 !1:SH1
>961e	d6 b2					.word	SyntaxError                      ; $82 !2:SH2
>9620	95 b1					.word	Assemble_adc                     ; $83 ADC
>9622	8d b1					.word	Assemble_and                     ; $84 AND
>9624	a9 b1					.word	Assemble_asl                     ; $85 ASL
>9626	13 b2					.word	Assemble_bcc                     ; $86 BCC
>9628	17 b2					.word	Assemble_bcs                     ; $87 BCS
>962a	1f b2					.word	Assemble_beq                     ; $88 BEQ
>962c	d6 b1					.word	Assemble_bit                     ; $89 BIT
>962e	07 b2					.word	Assemble_bmi                     ; $8a BMI
>9630	1b b2					.word	Assemble_bne                     ; $8b BNE
>9632	03 b2					.word	Assemble_bpl                     ; $8c BPL
>9634	23 b2					.word	Assemble_bra                     ; $8d BRA
>9636	27 b2					.word	Assemble_brk                     ; $8e BRK
>9638	0b b2					.word	Assemble_bvc                     ; $8f BVC
>963a	0f b2					.word	Assemble_bvs                     ; $90 BVS
>963c	2f b2					.word	Assemble_clc                     ; $91 CLC
>963e	83 b2					.word	Assemble_cld                     ; $92 CLD
>9640	43 b2					.word	Assemble_cli                     ; $93 CLI
>9642	73 b2					.word	Assemble_clv                     ; $94 CLV
>9644	a1 b1					.word	Assemble_cmp                     ; $95 CMP
>9646	ea b1					.word	Assemble_cpx                     ; $96 CPX
>9648	e5 b1					.word	Assemble_cpy                     ; $97 CPY
>964a	c7 b1					.word	Assemble_dec                     ; $98 DEC
>964c	7f b2					.word	Assemble_dex                     ; $99 DEX
>964e	5b b2					.word	Assemble_dey                     ; $9a DEY
>9650	91 b1					.word	Assemble_eor                     ; $9b EOR
>9652	cc b1					.word	Assemble_inc                     ; $9c INC
>9654	8f b2					.word	Assemble_inx                     ; $9d INX
>9656	7b b2					.word	Assemble_iny                     ; $9e INY
>9658	fe b1					.word	Assemble_jmp                     ; $9f JMP
>965a	f9 b1					.word	Assemble_jsr                     ; $a0 JSR
>965c	9d b1					.word	Assemble_lda                     ; $a1 LDA
>965e	c2 b1					.word	Assemble_ldx                     ; $a2 LDX
>9660	e0 b1					.word	Assemble_ldy                     ; $a3 LDY
>9662	b3 b1					.word	Assemble_lsr                     ; $a4 LSR
>9664	93 b2					.word	Assemble_nop                     ; $a5 NOP
>9666	89 b1					.word	Assemble_ora                     ; $a6 ORA
>9668	3f b2					.word	Assemble_pha                     ; $a7 PHA
>966a	2b b2					.word	Assemble_php                     ; $a8 PHP
>966c	87 b2					.word	Assemble_phx                     ; $a9 PHX
>966e	47 b2					.word	Assemble_phy                     ; $aa PHY
>9670	4f b2					.word	Assemble_pla                     ; $ab PLA
>9672	33 b2					.word	Assemble_plp                     ; $ac PLP
>9674	9b b2					.word	Assemble_plx                     ; $ad PLX
>9676	57 b2					.word	Assemble_ply                     ; $ae PLY
>9678	ae b1					.word	Assemble_rol                     ; $af ROL
>967a	b8 b1					.word	Assemble_ror                     ; $b0 ROR
>967c	3b b2					.word	Assemble_rti                     ; $b1 RTI
>967e	4b b2					.word	Assemble_rts                     ; $b2 RTS
>9680	a5 b1					.word	Assemble_sbc                     ; $b3 SBC
>9682	37 b2					.word	Assemble_sec                     ; $b4 SEC
>9684	97 b2					.word	Assemble_sed                     ; $b5 SED
>9686	53 b2					.word	Assemble_sei                     ; $b6 SEI
>9688	99 b1					.word	Assemble_sta                     ; $b7 STA
>968a	8b b2					.word	Assemble_stp                     ; $b8 STP
>968c	bd b1					.word	Assemble_stx                     ; $b9 STX
>968e	db b1					.word	Assemble_sty                     ; $ba STY
>9690	d1 b1					.word	Assemble_stz                     ; $bb STZ
>9692	6f b2					.word	Assemble_tax                     ; $bc TAX
>9694	6b b2					.word	Assemble_tay                     ; $bd TAY
>9696	f4 b1					.word	Assemble_trb                     ; $be TRB
>9698	ef b1					.word	Assemble_tsb                     ; $bf TSB
>969a	77 b2					.word	Assemble_tsx                     ; $c0 TSX
>969c	5f b2					.word	Assemble_txa                     ; $c1 TXA
>969e	67 b2					.word	Assemble_txs                     ; $c2 TXS
>96a0	63 b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96a2					StopCommand:
.96a2	a9 08		lda #$08		lda	#8
.96a4	4c f5 98	jmp $98f5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96a7					UnaryTimer:
.96a7	fa		plx				plx
.96a8	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.96ab					TimerToStackX:
.96ab	20 cd a4	jsr $a4cd			jsr 	NSMSetZero 					; zero result
.96ae	64 01		stz $01				stz 	1 							; access I/O
.96b0	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96b3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96b6	ad 5a d6	lda $d65a			lda 	$D65A
.96b9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96bc	ad 5b d6	lda $d65b			lda 	$D65B
.96bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96c3					ListConvertLine:
.96c3	9c 9d 04	stz $049d			stz 	tbOffset
.96c6	9c a9 04	stz $04a9			stz 	tokenBuffer
.96c9	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96cb	b1 30		lda ($30),y			lda 	(codePtr),y
.96cd	aa		tax				tax
.96ce	88		dey				dey
.96cf	b1 30		lda ($30),y			lda 	(codePtr),y
.96d1	20 4c ae	jsr $ae4c			jsr 	ConvertInt16
.96d4	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96d6	86 37		stx $37				stx 	zTemp0+1
.96d8	a0 00		ldy #$00			ldy 	#0
.96da					_LCCopyNumber:
.96da	b1 36		lda ($36),y			lda 	(zTemp0),y
.96dc	20 dc 97	jsr $97dc			jsr 	LCLWrite
.96df	c8		iny				iny
.96e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.96e2	d0 f6		bne $96da			bne 	_LCCopyNumber
.96e4					_LCPadOut:
.96e4	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.96e6	20 dc 97	jsr $97dc			jsr 	LCLWrite
.96e9	ad 9d 04	lda $049d			lda 	tbOffset
.96ec	c9 06		cmp #$06			cmp 	#6
.96ee	d0 f4		bne $96e4			bne 	_LCPadOut
.96f0	a0 03		ldy #$03			ldy 	#3 							; start position.
.96f2					_LCMainLoop:
.96f2	b1 30		lda ($30),y			lda 	(codePtr),y
.96f4	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.96f6	f0 17		beq $970f			beq 	_LCExit
.96f8	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.96fa	90 14		bcc $9710			bcc 	_LCDoubles
.96fc	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.96fe	90 20		bcc $9720			bcc 	_LCShiftPunc
.9700	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9702	90 2b		bcc $972f			bcc 	_LCPunctuation
.9704	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9706	90 2d		bcc $9735			bcc 	_LCIdentifiers
.9708	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.970a	90 49		bcc $9755			bcc 	_LCTokens
.970c	4c b0 97	jmp $97b0			jmp 	_LCData 					; 254-5 are data objects
.970f					_LCExit:
.970f	60		rts				rts
.9710					_LCDoubles:
.9710	48		pha				pha
.9711	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9712	29 02		and #$02			and 	#2
.9714	09 3c		ora #$3c			ora 	#60 						; make < >
.9716	20 dc 97	jsr $97dc			jsr 	LCLWrite
.9719	68		pla				pla 								; restore, do lower bit
.971a	29 03		and #$03			and 	#3
.971c	09 3c		ora #$3c			ora 	#60
.971e	80 0f		bra $972f			bra		_LCPunctuation 				; print, increment, loop
.9720					_LCShiftPunc:
.9720	aa		tax				tax 								; save in X
.9721	29 07		and #$07			and 	#7 							; lower 3 bits
.9723	f0 02		beq $9727			beq 	_LCNoAdd
.9725	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9727					_LCNoAdd:
.9727	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9729	90 02		bcc $972d			bcc 	_LCNoAdd2
.972b	09 20		ora #$20			ora 	#32 						; adds $20
.972d					_LCNoAdd2:
.972d	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.972f					_LCPunctuation:
.972f	c8		iny				iny 								; consume character
.9730	20 dc 97	jsr $97dc			jsr 	LCLWrite 					; write it out.
.9733	80 bd		bra $96f2			bra 	_LCMainLoop 				; go round again.
.9735					_LCIdentifiers:
.9735	18		clc				clc 								; convert to physical address
.9736	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9738	85 37		sta $37				sta 	zTemp0+1
.973a	c8		iny				iny
.973b	b1 30		lda ($30),y			lda 	(codePtr),y
.973d	85 36		sta $36				sta 	zTemp0
.973f	c8		iny				iny
.9740	5a		phy				phy 								; save position
.9741	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9743					_LCOutIdentifier:
.9743	c8		iny				iny
.9744	b1 36		lda ($36),y			lda 	(zTemp0),y
.9746	29 7f		and #$7f			and 	#$7F
.9748	20 0a 98	jsr $980a			jsr 	LCLLowerCase
.974b	20 dc 97	jsr $97dc			jsr 	LCLWrite
.974e	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9750	10 f1		bpl $9743			bpl 	_LCOutIdentifier
.9752	7a		ply				ply 								; restore position
.9753	80 9d		bra $96f2			bra 	_LCMainLoop
.9755					_LCTokens:
.9755	aa		tax				tax 								; token in X
.9756	a9 9c		lda #$9c			lda 	#((KeywordSet2) & $FF)
.9758	85 36		sta $36				sta 	0+zTemp0
.975a	a9 a8		lda #$a8			lda 	#((KeywordSet2) >> 8)
.975c	85 37		sta $37				sta 	1+zTemp0
.975e	e0 82		cpx #$82			cpx 	#$82
.9760	f0 16		beq $9778			beq 	_LCUseShift
.9762	a9 4e		lda #$4e			lda 	#((KeywordSet1) & $FF)
.9764	85 36		sta $36				sta 	0+zTemp0
.9766	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.9768	85 37		sta $37				sta 	1+zTemp0
.976a	e0 81		cpx #$81			cpx 	#$81
.976c	f0 0a		beq $9778			beq 	_LCUseShift
.976e	a9 84		lda #$84			lda 	#((KeywordSet0) & $FF)
.9770	85 36		sta $36				sta 	0+zTemp0
.9772	a9 a6		lda #$a6			lda 	#((KeywordSet0) >> 8)
.9774	85 37		sta $37				sta 	1+zTemp0
.9776	80 01		bra $9779			bra 	_LCNoShift
.9778					_LCUseShift:
.9778	c8		iny				iny
.9779					_LCNoShift:
.9779	20 eb 97	jsr $97eb			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.977c	b1 30		lda ($30),y			lda 	(codePtr),y
.977e	aa		tax				tax 								; into X
.977f					_LCFindText:
.977f	ca		dex				dex
.9780	10 0e		bpl $9790			bpl 	_LCFoundText 				; found text.
.9782	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9784	1a		inc a				inc 	a 							; one extra for size
.9785	38		sec				sec 								; one extra for checksum
.9786	65 36		adc $36				adc 	zTemp0 						; go to next token
.9788	85 36		sta $36				sta 	zTemp0
.978a	90 f3		bcc $977f			bcc 	_LCFindText
.978c	e6 37		inc $37				inc 	zTemp0+1
.978e	80 ef		bra $977f			bra 	_LCFindText
.9790					_LCFoundText:
.9790	5a		phy				phy 								; save List position
.9791	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9793	aa		tax				tax
.9794	a0 02		ldy #$02			ldy 	#2
.9796					_LCCopyToken:
.9796	b1 36		lda ($36),y			lda 	(zTemp0),y
.9798	20 0a 98	jsr $980a			jsr 	LCLLowerCase
.979b	20 dc 97	jsr $97dc			jsr 	LCLWrite
.979e	c8		iny				iny
.979f	ca		dex				dex
.97a0	d0 f4		bne $9796			bne 	_LCCopyToken
.97a2	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.97a4	f0 05		beq $97ab			beq 	_LCNoSpace
.97a6	a9 20		lda #$20			lda 	#' '
.97a8	20 dc 97	jsr $97dc			jsr 	LCLWrite
.97ab					_LCNoSpace:
.97ab	7a		ply				ply 								; restore position.
.97ac	c8		iny				iny 								; consume token
.97ad	4c f2 96	jmp $96f2			jmp 	_LCMainLoop 				; and go around again.
.97b0					_LCData:
.97b0	48		pha				pha 								; save type $FE/$FF
.97b1	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.97b3	c9 fe		cmp #$fe			cmp 	#$FE
.97b5	f0 02		beq $97b9			beq 	_LCHaveOpener
.97b7	a2 22		ldx #$22			ldx 	#'"'
.97b9					_LCHaveOpener:
.97b9	8a		txa				txa 								; output prefix (# or ")
.97ba	20 dc 97	jsr $97dc			jsr 	LCLWrite
.97bd	c8		iny				iny 								; get count
.97be	b1 30		lda ($30),y			lda 	(codePtr),y
.97c0	aa		tax				tax
.97c1	c8		iny				iny 								; point at first character
.97c2					_LCOutData:
.97c2	b1 30		lda ($30),y			lda 	(codePtr),y
.97c4	c9 00		cmp #$00			cmp 	#0
.97c6	f0 03		beq $97cb			beq 	_LCNoPrint
.97c8	20 dc 97	jsr $97dc			jsr 	LCLWrite
.97cb					_LCNoPrint:
.97cb	c8		iny				iny
.97cc	ca		dex				dex
.97cd	d0 f3		bne $97c2			bne 	_LCOutData
.97cf	68		pla				pla 								; closing " required ?
.97d0	c9 ff		cmp #$ff			cmp 	#$FF
.97d2	d0 05		bne $97d9			bne 	_LCNoQuote
.97d4	a9 22		lda #$22			lda 	#'"'
.97d6	20 dc 97	jsr $97dc			jsr 	LCLWrite
.97d9					_LCNoQuote:
.97d9	4c f2 96	jmp $96f2			jmp 	_LCMainLoop
.97dc					LCLWrite:
.97dc	da		phx				phx
.97dd	ae 9d 04	ldx $049d			ldx 	tbOffset
.97e0	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.97e3	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.97e6	ee 9d 04	inc $049d			inc 	tbOffset
.97e9	fa		plx				plx
.97ea	60		rts				rts
.97eb					LCCheckSpaceRequired:
.97eb	ae 9d 04	ldx $049d			ldx 	tbOffset
.97ee	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.97f1	20 0a 98	jsr $980a			jsr 	LCLLowerCase 				; saves a little effort
.97f4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.97f6	90 11		bcc $9809			bcc 	_LCCSRExit
.97f8	c9 3a		cmp #$3a			cmp 	#"9"+1
.97fa	90 08		bcc $9804			bcc 	_LCCSRSpace
.97fc	c9 61		cmp #$61			cmp 	#"a"
.97fe	90 09		bcc $9809			bcc 	_LCCSRExit
.9800	c9 7b		cmp #$7b			cmp 	#"z"+1
.9802	b0 05		bcs $9809			bcs 	_LCCSRExit
.9804					_LCCSRSpace:
.9804	a9 20		lda #$20			lda 	#' '
.9806	20 dc 97	jsr $97dc			jsr 	LCLWrite
.9809					_LCCSRExit:
.9809	60		rts				rts
.980a					LCLLowerCase:
.980a	c9 41		cmp #$41			cmp 	#"A"
.980c	90 06		bcc $9814			bcc 	_LCLLCOut
.980e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9810	b0 02		bcs $9814			bcs 	_LCLLCOut
.9812	69 20		adc #$20			adc 	#$20
.9814					_LCLLCOut:
.9814	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9815					ProcedureScan:
.9815	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9817	85 30		sta $30				sta 	codePtr
.9819	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.981b	85 31		sta $31				sta 	codePtr+1
.981d					_PSLoop:
.981d	b2 30		lda ($30)			lda 	(codePtr)
.981f	f0 42		beq $9863			beq 	_PSExit
.9821	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9823	b1 30		lda ($30),y			lda 	(codePtr),y
.9825	c9 9e		cmp #$9e			cmp 	#KWD_PROC
.9827	d0 2d		bne $9856			bne 	_PSNext
.9829	c8		iny				iny 								; get the address of the record to zTemp0 and
.982a	b1 30		lda ($30),y			lda 	(codePtr),y
.982c	29 c0		and #$c0			and 	#$C0
.982e	c9 40		cmp #$40			cmp 	#$40
.9830	d0 32		bne $9864			bne 	_PSSyntax
.9832	b1 30		lda ($30),y			lda 	(codePtr),y
.9834	18		clc				clc
.9835	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9837	85 37		sta $37				sta 	zTemp0+1
.9839	c8		iny				iny 								; LSB
.983a	b1 30		lda ($30),y			lda 	(codePtr),y
.983c	85 36		sta $36				sta 	zTemp0
.983e	c8		iny				iny 								; character after variable call.
.983f	98		tya				tya 								; save Y offset at +7
.9840	a0 07		ldy #$07			ldy 	#7
.9842	91 36		sta ($36),y			sta 	(zTemp0),y
.9844	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9846	a0 02		ldy #$02			ldy 	#2
.9848	91 36		sta ($36),y			sta 	(zTemp0),y
.984a	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.984c					_PSCopy:
.984c	b5 30		lda $30,x			lda 	safePtr,x
.984e	c8		iny				iny
.984f	91 36		sta ($36),y			sta 	(zTemp0),y
.9851	e8		inx				inx
.9852	e0 04		cpx #$04			cpx 	#4
.9854	d0 f6		bne $984c			bne 	_PSCopy
.9856					_PSNext:
.9856	18		clc				clc
.9857	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9859	65 30		adc $30				adc 	codePtr
.985b	85 30		sta $30				sta 	codePtr
.985d	90 02		bcc $9861			bcc 	_CREExit
.985f	e6 31		inc $31				inc 	codePtr+1
.9861					_CREExit:
.9861	80 ba		bra $981d			bra 	_PSLoop
.9863					_PSExit:
.9863	60		rts				rts
.9864					_PSSyntax:
.9864	4c d6 b2	jmp $b2d6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9867					ScanForward:
.9867	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9869	86 37		stx $37				stx 	zTemp0+1
.986b	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.986d					_ScanLoop:
.986d	b1 30		lda ($30),y			lda 	(codePtr),y
.986f	c8		iny				iny
.9870	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9872	d0 0e		bne $9882			bne 	_ScanGoNext
.9874	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9876	f0 04		beq $987c			beq 	_ScanMatch
.9878	c5 37		cmp $37				cmp 	zTemp0+1
.987a	d0 06		bne $9882			bne 	_ScanGoNext
.987c					_ScanMatch:
.987c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.987e	d0 01		bne $9881			bne 	_ScanNotEndEOL
.9880	88		dey				dey
.9881					_ScanNotEndEOL:
.9881	60		rts				rts
.9882					_ScanGoNext:
.9882	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9884	90 e7		bcc $986d			bcc 	_ScanLoop
.9886	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9888	90 18		bcc $98a2			bcc 	_ScanSkipOne
.988a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.988c	b0 2f		bcs $98bd			bcs 	_ScanSkipData
.988e	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9890	90 db		bcc $986d			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9892	c9 a7		cmp #$a7			cmp 	#KWC_LAST_STRUCTURE+1
.9894	b0 d7		bcs $986d			bcs 	_ScanLoop
.9896	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9898	c9 a1		cmp #$a1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.989a	b0 d1		bcs $986d			bcs 	_ScanLoop
.989c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.989e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.98a0	80 cb		bra $986d			bra 	_ScanLoop
.98a2					_ScanSkipOne:
.98a2	c8		iny				iny 								; consume the extra one.
.98a3	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.98a5	d0 c6		bne $986d			bne 	_ScanLoop
.98a7	18		clc				clc
.98a8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98aa	65 30		adc $30				adc 	codePtr
.98ac	85 30		sta $30				sta 	codePtr
.98ae	90 02		bcc $98b2			bcc 	_CREExit
.98b0	e6 31		inc $31				inc 	codePtr+1
.98b2					_CREExit:
.98b2	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.98b4	b2 30		lda ($30)			lda 	(codePtr)
.98b6	d0 b5		bne $986d			bne 	_ScanLoop 					; if not zero, more to scan
.98b8	a9 13		lda #$13		lda	#19
.98ba	4c f5 98	jmp $98f5		jmp	ErrorHandler
.98bd					_ScanSkipData:
.98bd	88		dey				dey 								; point at data token
.98be	c8		iny				iny
.98bf	98		tya				tya
.98c0	38		sec				sec
.98c1	71 30		adc ($30),y			adc 	(codePtr),y
.98c3	a8		tay				tay
.98c4	80 a7		bra $986d			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98c6					Command_WHILE:
.98c6	5a		phy				phy 								; save position of the test
.98c7	a2 00		ldx #$00			ldx 	#0
.98c9	20 0d a4	jsr $a40d			jsr 	EvaluateNumber 				; work out the number
.98cc	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; check if zero
.98cf	f0 0e		beq $98df			beq 	_WHExitLoop 				; if so exit the loop
.98d1	98		tya				tya 								; position *after* test.
.98d2	7a		ply				ply 								; restore position before test, at WHILE
.98d3	88		dey				dey
.98d4	48		pha				pha 								; push after test on the stack
.98d5	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98d7	20 81 a5	jsr $a581			jsr 	StackOpen
.98da	20 c5 a5	jsr $a5c5			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98dd	7a		ply				ply 								; restore the position *after* the test
.98de	60		rts				rts
.98df					_WHExitLoop:
.98df	68		pla				pla 								; throw post loop position
.98e0	a9 a6		lda #$a6			lda 	#KWD_WEND 					; scan forward past WEND
.98e2	aa		tax				tax
.98e3	20 67 98	jsr $9867			jsr 	ScanForward
.98e6	60		rts				rts
.98e7					Command_WEND:
.98e7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.98e9	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.98eb	20 ad a5	jsr $a5ad			jsr 	StackCheckFrame
.98ee	20 d6 a5	jsr $a5d6			jsr 	STKLoadCodePosition 		; loop back
.98f1	20 9f a5	jsr $a59f			jsr 	StackClose		 			; erase the frame
.98f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.acf0					CheckRightBracket:
.acf0	b1 30		lda ($30),y			lda 	(codePtr),y
.acf2	c8		iny				iny
.acf3	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.acf5	d0 0f		bne $ad06			bne 	CNAFail
.acf7	60		rts				rts
.acf8					CheckComma:
.acf8	b1 30		lda ($30),y			lda 	(codePtr),y
.acfa	c8		iny				iny
.acfb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.acfd	d0 07		bne $ad06			bne 	CNAFail
.acff	60		rts				rts
.ad00					CheckNextA:
.ad00	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ad02	d0 02		bne $ad06			bne 	CNAFail
.ad04	c8		iny				iny 								; skip character
.ad05	60		rts				rts 								; and exit
.ad06					CNAFail:
.ad06	4c d6 b2	jmp $b2d6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.98f5					ErrorHandler:
.98f5	a8		tay				tay 								; find the error text
.98f6	f0 49		beq $9941			beq 	_EHEnd
.98f8	a2 00		ldx #$00			ldx 	#0
.98fa	a9 ef		lda #$ef			lda 	#((ErrorText) & $FF)
.98fc	85 36		sta $36				sta 	0+zTemp0
.98fe	a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.9900	85 37		sta $37				sta 	1+zTemp0
.9902					_EHFind:
.9902	88		dey				dey 								; found the error text ?
.9903	f0 0e		beq $9913			beq 	_EHFound
.9905					_EHFindZero:
.9905	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9907	e6 36		inc $36				inc 	zTemp0
.9909	d0 02		bne $990d			bne 	_EHFNoCarry
.990b	e6 37		inc $37				inc 	zTemp0+1
.990d					_EHFNoCarry:
.990d	c9 00		cmp #$00			cmp 	#0
.990f	d0 f4		bne $9905			bne 	_EHFindZero
.9911	80 ef		bra $9902			bra 	_EHFind
.9913					_EHFound:
.9913	a5 36		lda $36				lda 	zTemp0 						; print message
.9915	a6 37		ldx $37				ldx 	zTemp0+1
.9917	20 4e 99	jsr $994e			jsr 	PrintStringXA
.991a	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.991c	b1 30		lda ($30),y			lda 	(codePtr),y
.991e	d0 05		bne $9925			bne 	_EHAtMsg
.9920	c8		iny				iny
.9921	b1 30		lda ($30),y			lda 	(codePtr),y
.9923	f0 17		beq $993c			beq 	_EHCREnd
.9925					_EHAtMsg:
.9925	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.9927	a9 44		lda #$44			lda 	#_AtMsg & $FF
.9929	20 4e 99	jsr $994e			jsr 	PrintStringXA
.992c	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.992e	b1 30		lda ($30),y			lda 	(codePtr),y
.9930	48		pha				pha
.9931	c8		iny				iny
.9932	b1 30		lda ($30),y			lda 	(codePtr),y
.9934	aa		tax				tax
.9935	68		pla				pla
.9936	20 4c ae	jsr $ae4c			jsr 	ConvertInt16 				; convert XA to string
.9939	20 4e 99	jsr $994e			jsr 	PrintStringXA 				; and print it.
.993c					_EHCREnd:
.993c	a9 0d		lda #$0d			lda 	#13 						; new line
.993e	20 90 b4	jsr $b490			jsr 	EXTPrintCharacter
.9941					_EHEnd:
.9941	4c 37 8b	jmp $8b37			jmp 	WarmStart
>9944	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>994c	20 00
.994e					PrintStringXA:
.994e	5a		phy				phy
.994f	86 37		stx $37				stx 	zTemp0+1
.9951	85 36		sta $36				sta 	zTemp0
.9953	a0 00		ldy #$00			ldy 	#0
.9955					_PSXALoop:
.9955	b1 36		lda ($36),y			lda 	(zTemp0),y
.9957	f0 06		beq $995f			beq 	_PSXAExit
.9959	20 90 b4	jsr $b490			jsr 	EXTPrintCharacter
.995c	c8		iny				iny
.995d	80 f6		bra $9955			bra 	_PSXALoop
.995f					_PSXAExit:
.995f	7a		ply				ply
.9960	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9961					UnaryTrue:
.9961	fa		plx				plx
.9962					ReturnTrue:
.9962	a9 01		lda #$01			lda 	#1  						; set to 1
.9964	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.9967	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9969	9d 00 04	sta $0400,x			sta 	NSStatus,x
.996c	60		rts				rts
.996d					UnaryFalse:
.996d	fa		plx				plx
.996e					ReturnFalse:
.996e	4c cd a4	jmp $a4cd			jmp 	NSMSetZero 					; set it all to zero
.9971					BinaryCompareEqual:
.9971	fa		plx				plx
.9972	20 ad 99	jsr $99ad			jsr 	CompareBaseCode
.9975	c9 00		cmp #$00			cmp 	#0
.9977	f0 e9		beq $9962			beq 	ReturnTrue
.9979	80 f3		bra $996e			bra 	ReturnFalse
.997b					BinaryCompareLess:
.997b	fa		plx				plx
.997c	20 ad 99	jsr $99ad			jsr 	CompareBaseCode
.997f	c9 ff		cmp #$ff			cmp 	#$FF
.9981	f0 df		beq $9962			beq 	ReturnTrue
.9983	80 e9		bra $996e			bra 	ReturnFalse
.9985					BinaryCompareGreater:
.9985	fa		plx				plx
.9986	20 ad 99	jsr $99ad			jsr 	CompareBaseCode
.9989	c9 01		cmp #$01			cmp 	#1
.998b	f0 d5		beq $9962			beq 	ReturnTrue
.998d	80 df		bra $996e			bra 	ReturnFalse
.998f					BinaryCompareNotEqual:
.998f	fa		plx				plx
.9990	20 ad 99	jsr $99ad			jsr 	CompareBaseCode
.9993	c9 00		cmp #$00			cmp 	#0
.9995	d0 cb		bne $9962			bne 	ReturnTrue
.9997	80 d5		bra $996e			bra 	ReturnFalse
.9999					BinaryCompareLessEqual:
.9999	fa		plx				plx
.999a	20 ad 99	jsr $99ad			jsr 	CompareBaseCode
.999d	c9 01		cmp #$01			cmp 	#1
.999f	d0 c1		bne $9962			bne 	ReturnTrue
.99a1	80 cb		bra $996e			bra 	ReturnFalse
.99a3					BinaryCompareGreaterEqual:
.99a3	fa		plx				plx
.99a4	20 ad 99	jsr $99ad			jsr 	CompareBaseCode
.99a7	c9 ff		cmp #$ff			cmp 	#$FF
.99a9	d0 b7		bne $9962			bne 	ReturnTrue
.99ab	80 c1		bra $996e			bra 	ReturnFalse
.99ad					CompareBaseCode:
.99ad	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; make both values if references.
.99b0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.99b3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99b6	29 10		and #$10			and 	#NSTString
.99b8	d0 40		bne $99fa			bne 	_CBCString
.99ba	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99bd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99c0	d0 3b		bne $99fd			bne 	_CBCFloat
.99c2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99c5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99c8	29 08		and #$08			and 	#NSTFloat
.99ca	d0 31		bne $99fd			bne 	_CBCFloat
.99cc	20 00 9a	jsr $9a00			jsr 	CompareFixMinusZero
.99cf	e8		inx				inx
.99d0	20 00 9a	jsr $9a00			jsr 	CompareFixMinusZero
.99d3	ca		dex				dex
.99d4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99d7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99da	10 0b		bpl $99e7			bpl 	_CDCSameSign
.99dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99df	30 16		bmi $99f7			bmi 	_CBCLess 					; return $FF
.99e1					_CBCGreater:
.99e1	a9 01		lda #$01			lda 	#1
.99e3	60		rts				rts
.99e4					_CBCEqual:
.99e4	a9 00		lda #$00			lda 	#0
.99e6	60		rts				rts
.99e7					_CDCSameSign:
.99e7	20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; unsigned subtract
.99ea	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; or the mantissa together
.99ed	f0 f5		beq $99e4			beq 	_CBCEqual 					; -0 == 0
.99ef	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.99f2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.99f5	10 ea		bpl $99e1			bpl 	_CBCGreater
.99f7					_CBCLess:
.99f7	a9 ff		lda #$ff			lda 	#$FF
.99f9	60		rts				rts
.99fa					_CBCString:
.99fa	4c 66 9a	jmp $9a66			jmp 	CompareStrings
.99fd					_CBCFloat:
.99fd	4c 48 af	jmp $af48			jmp 	CompareFloat
.9a00					CompareFixMinusZero:
.9a00	20 fd a4	jsr $a4fd			jsr 	NSMIsZero
.9a03	d0 03		bne $9a08			bne 	_CFXMZNotZero
.9a05	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a08					_CFXMZNotZero:
.9a08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a09					StringConcat:
.9a09	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a0c	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a0f	29 18		and #$18			and 	#NSBTypeMask
.9a11	c9 10		cmp #$10			cmp 	#NSTString
.9a13	d0 4e		bne $9a63			bne		_SCType
.9a15	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a17	e8		inx				inx
.9a18	20 36 9a	jsr $9a36			jsr 	_SCSetupZ0 					; setup for second
.9a1b	20 41 9a	jsr $9a41			jsr 	_SCLengthZ0 				; length for second
.9a1e	ca		dex				dex
.9a1f	20 36 9a	jsr $9a36			jsr 	_SCSetupZ0 					; setup for first
.9a22	20 41 9a	jsr $9a41			jsr 	_SCLengthZ0 				; length for first
.9a25	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a27	20 59 b6	jsr $b659			jsr 	StringTempAllocate
.9a2a	20 54 9a	jsr $9a54			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a2d	e8		inx				inx
.9a2e	20 36 9a	jsr $9a36			jsr 	_SCSetupZ0 					; copy second out
.9a31	20 54 9a	jsr $9a54			jsr 	_SCCopy
.9a34	ca		dex				dex
.9a35	60		rts				rts
.9a36					_SCSetupZ0:
.9a36	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a39	85 36		sta $36				sta 	zTemp0
.9a3b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a3e	85 37		sta $37				sta 	zTemp0+1
.9a40	60		rts				rts
.9a41					_SCLengthZ0:
.9a41	5a		phy				phy
.9a42	a0 00		ldy #$00			ldy 	#0
.9a44					_SCLenLoop:
.9a44	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a46	f0 0a		beq $9a52			beq 	_SCLExit
.9a48	c8		iny				iny
.9a49	e6 38		inc $38				inc 	zTemp1
.9a4b	10 f7		bpl $9a44			bpl		_SCLenLoop
.9a4d	a9 09		lda #$09		lda	#9
.9a4f	4c f5 98	jmp $98f5		jmp	ErrorHandler
.9a52					_SCLExit:
.9a52	7a		ply				ply
.9a53	60		rts				rts
.9a54					_SCCopy:
.9a54	5a		phy				phy
.9a55	a0 00		ldy #$00			ldy 	#0
.9a57					_SCCopyLoop:
.9a57	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a59	f0 06		beq $9a61			beq 	_SCCExit
.9a5b	20 97 b6	jsr $b697			jsr 	StringTempWrite
.9a5e	c8		iny				iny
.9a5f	80 f6		bra $9a57			bra 	_SCCopyLoop
.9a61					_SCCExit:
.9a61	7a		ply				ply
.9a62	60		rts				rts
.9a63					_SCType:
.9a63	4c e0 b2	jmp $b2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ad09					IntegerDivide:
.ad09	fa		plx				plx
.ad0a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad0d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad10	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad11	0a		asl a				asl 	a
.ad12	10 05		bpl $ad19			bpl 	_NotRef
.ad14	48		pha				pha
.ad15	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad18	68		pla				pla
.ad19					_NotRef:
.ad19	0a		asl a				asl 	a
.ad1a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad1c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad1f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad22	f0 03		beq $ad27			beq 	_IntegerCode 				; if clear, then we have two integers
.ad24	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.ad27					_IntegerCode:
.ad27	20 49 ad	jsr $ad49			jsr 	CheckDivideZero 			; do div zero check
.ad2a	20 81 ad	jsr $ad81			jsr 	Int32Divide 				; do the division
.ad2d	20 3e ae	jsr $ae3e			jsr 	CalculateSign 				; calculate result sign
.ad30					NSMCopyPlusTwoToZero:
.ad30	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ad33	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ad36	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ad39	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad3c	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ad3f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad42	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ad45	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad48	60		rts				rts
.ad49					CheckDivideZero:
.ad49	e8		inx				inx
.ad4a	20 fd a4	jsr $a4fd			jsr 	NSMIsZero
.ad4d	f0 02		beq $ad51			beq 	_CDVError
.ad4f	ca		dex				dex
.ad50	60		rts				rts
.ad51					_CDVError:
.ad51	a9 03		lda #$03		lda	#3
.ad53	4c f5 98	jmp $98f5		jmp	ErrorHandler
.ad56					IntegerModulus:
.ad56	fa		plx				plx
.ad57	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad5a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad5d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad5e	0a		asl a				asl 	a
.ad5f	10 05		bpl $ad66			bpl 	_NotRef
.ad61	48		pha				pha
.ad62	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ad65	68		pla				pla
.ad66					_NotRef:
.ad66	0a		asl a				asl 	a
.ad67	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ad69	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ad6c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ad6f	f0 03		beq $ad74			beq 	_IntegerCode 				; if clear, then we have two integers
.ad71	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.ad74					_IntegerCode:
.ad74					IntegerModulusNoCheck:
.ad74	20 49 ad	jsr $ad49			jsr 	CheckDivideZero 			; do div zero check
.ad77	20 81 ad	jsr $ad81			jsr 	Int32Divide 				; do the division
.ad7a	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ad7d	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ad80	60		rts				rts
.ad81					Int32Divide:
.ad81	48		pha				pha 								; save AXY
.ad82	5a		phy				phy
.ad83	20 a4 a4	jsr $a4a4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ad86	20 c9 a4	jsr $a4c9			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ad89	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ad8b					_I32DivideLoop:
.ad8b	e8		inx				inx
.ad8c	e8		inx				inx
.ad8d	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ad90	ca		dex				dex
.ad91	ca		dex				dex
.ad92	20 e3 a4	jsr $a4e3			jsr 	NSMRotateLeft
.ad95	20 c1 ad	jsr $adc1			jsr 	DivideCheckSubtract 		; check if subtract possible
.ad98	90 03		bcc $ad9d			bcc 	_I32DivideNoCarryIn
.ad9a	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ad9d					_I32DivideNoCarryIn:
.ad9d	88		dey				dey 								; loop round till division completed.
.ad9e	d0 eb		bne $ad8b			bne 	_I32DivideLoop
.ada0	7a		ply				ply 								; restore AXY and exit
.ada1	68		pla				pla
.ada2	60		rts				rts
.ada3					Int32ShiftDivide:
.ada3	48		pha				pha 								; save AY
.ada4	5a		phy				phy
.ada5	e8		inx				inx 								; clear S[X+2]
.ada6	e8		inx				inx
.ada7	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.adaa	ca		dex				dex
.adab	ca		dex				dex
.adac	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.adae					_I32SDLoop:
.adae	20 c1 ad	jsr $adc1			jsr 	DivideCheckSubtract 		; check if subtract possible
.adb1	e8		inx				inx
.adb2	e8		inx				inx
.adb3	20 e3 a4	jsr $a4e3			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.adb6	ca		dex				dex
.adb7	ca		dex				dex
.adb8	20 e3 a4	jsr $a4e3			jsr 	NSMRotateLeft
.adbb	88		dey				dey 	 							; do 31 times
.adbc	d0 f0		bne $adae			bne 	_I32SDLoop
.adbe	7a		ply				ply 								; restore AY and exit
.adbf	68		pla				pla
.adc0	60		rts				rts
.adc1					DivideCheckSubtract:
.adc1	20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.adc4	b0 04		bcs $adca			bcs 	_DCSExit 					; if carry set, then could do, exit
.adc6	20 ea 9a	jsr $9aea			jsr 	AddTopTwoStack 				; add it back in
.adc9	18		clc				clc 								; and return False
.adca					_DCSExit:
.adca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.adcb					MulInteger:
.adcb	fa		plx				plx
.adcc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.adcf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.add2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.add3	0a		asl a				asl 	a
.add4	10 05		bpl $addb			bpl 	_NotRef
.add6	48		pha				pha
.add7	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.adda	68		pla				pla
.addb					_NotRef:
.addb	0a		asl a				asl 	a 							; put MSB of type into A:7
.addc	30 0b		bmi $ade9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.adde	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ade1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ade4	f0 06		beq $adec			beq 	_IntegerCode 				; if clear, then we have two integers
.ade6	4c 1f b0	jmp $b01f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ade9					_StringData:
.ade9	4c ea b2	jmp $b2ea			jmp 	NotDoneError							; at least one string - don't know both are strings.
.adec					_IntegerCode:
.adec	20 f9 ad	jsr $adf9			jsr 	MultiplyShort
.adef	c9 00		cmp #$00			cmp 	#0
.adf1	f0 05		beq $adf8			beq 	_MIExit
.adf3	a9 04		lda #$04		lda	#4
.adf5	4c f5 98	jmp $98f5		jmp	ErrorHandler
.adf8					_MIExit:
.adf8	60		rts				rts
.adf9					MultiplyShort:
.adf9	5a		phy				phy 								; save Y
.adfa	20 a4 a4	jsr $a4a4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.adfd	20 c9 a4	jsr $a4c9			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ae00	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ae02					_I32MLoop:
.ae02	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ae05	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ae08	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ae0b	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ae0e	f0 28		beq $ae38			beq 	_I32MExit 					; exit if zero
.ae10	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ae13	29 01		and #$01			and 	#1
.ae15	f0 0e		beq $ae25			beq 	_I32MNoAdd
.ae17	20 ea 9a	jsr $9aea			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ae1a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ae1d	10 06		bpl $ae25			bpl 	_I32MNoAdd
.ae1f					_I32ShiftRight:
.ae1f	20 f0 a4	jsr $a4f0			jsr 	NSMShiftRight 				; shift S[X] right
.ae22	c8		iny				iny 								; increment shift count
.ae23	80 0a		bra $ae2f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ae25					_I32MNoAdd:
.ae25	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ae28	70 f5		bvs $ae1f			bvs 	_I32ShiftRight 				; instead.
.ae2a	e8		inx				inx
.ae2b	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ae2e	ca		dex				dex
.ae2f					_I32MShiftUpper:
.ae2f	e8		inx				inx 								; shift S[X+2] right
.ae30	e8		inx				inx
.ae31	20 f0 a4	jsr $a4f0			jsr 	NSMShiftRight
.ae34	ca		dex				dex
.ae35	ca		dex				dex
.ae36	80 ca		bra $ae02			bra 	_I32MLoop 					; try again.
.ae38					_I32MExit:
.ae38	20 3e ae	jsr $ae3e			jsr 	CalculateSign
.ae3b	98		tya				tya 								; shift in A
.ae3c	7a		ply				ply 								; restore Y and exit
.ae3d	60		rts				rts
.ae3e					CalculateSign:
.ae3e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ae41	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ae44	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ae47	0a		asl a				asl 	a 							; shift bit 7 into carry
.ae48	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ae4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a66					CompareStrings:
.9a66	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a69	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a6c	29 10		and #$10			and 	#NSBIsString
.9a6e	f0 2c		beq $9a9c			beq 	_CSTypeError
.9a70	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a73	85 36		sta $36				sta 	zTemp0
.9a75	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a78	85 37		sta $37				sta 	zTemp0+1
.9a7a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a7d	85 38		sta $38				sta 	zTemp1
.9a7f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a82	85 39		sta $39				sta 	zTemp1+1
.9a84	5a		phy				phy 								; save Y so we can access strings
.9a85	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a87					_CSLoop:
.9a87	c8		iny				iny
.9a88	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a8a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a8c	d0 06		bne $9a94			bne 	_CSDifferent
.9a8e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a90	d0 f5		bne $9a87			bne 	_CSLoop 					; still comparing
.9a92					_CSExit:
.9a92	7a		ply				ply 								; reached end, return zero in A from EOS
.9a93	60		rts				rts
.9a94					_CSDifferent:
.9a94	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a96	90 fa		bcc $9a92			bcc		_CSExit
.9a98	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a9a	80 f6		bra $9a92			bra 	_CSExit
.9a9c					_CSTypeError:
.9a9c	4c e0 b2	jmp $b2e0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a9f					ShiftLeft:
.9a9f	38		sec				sec
.9aa0	80 01		bra $9aa3			bra 	ShiftMain
.9aa2					ShiftRight:
.9aa2	18		clc				clc
.9aa3					ShiftMain:
.9aa3	fa		plx				plx 								; restore X
.9aa4	08		php				php 								; save direction
.9aa5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9aa8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aab	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aac	0a		asl a				asl 	a
.9aad	10 05		bpl $9ab4			bpl 	_NotRef
.9aaf	48		pha				pha
.9ab0	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ab3	68		pla				pla
.9ab4					_NotRef:
.9ab4	0a		asl a				asl 	a
.9ab5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ab7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9aba	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9abd	f0 03		beq $9ac2			beq 	_IntegerCode 				; if clear, then we have two integers
.9abf	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.9ac2					_IntegerCode:
.9ac2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ac5	29 e0		and #$e0			and 	#$E0
.9ac7	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9aca	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9acd	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ad0	d0 13		bne $9ae5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ad2					_SMLoop:
.9ad2	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9ad5	30 11		bmi $9ae8			bmi 	_SMExit 					; exit if done.
.9ad7	28		plp				plp 								; restore direcition setting
.9ad8	08		php				php
.9ad9	90 05		bcc $9ae0			bcc 	_SMRight
.9adb	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; shift left if CS
.9ade	80 f2		bra $9ad2			bra 	_SMLoop
.9ae0					_SMRight:
.9ae0	20 f0 a4	jsr $a4f0			jsr 	NSMShiftRight 				; shift right if CC
.9ae3	80 ed		bra $9ad2			bra 	_SMLoop
.9ae5					_SMExit0:
.9ae5	20 cd a4	jsr $a4cd			jsr 	NSMSetZero 					; return zero.
.9ae8					_SMExit:
.9ae8	28		plp				plp 								; throw direction
.9ae9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9aea					AddTopTwoStack:
.9aea	18		clc				clc
.9aeb	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9aee	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9af1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9af4	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9af7	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9afa	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9afd	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b00	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b03	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b06	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b09	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b0c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b0f	60		rts				rts
.9b10					SubTopTwoStack:
.9b10	38		sec				sec
.9b11	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b14	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b17	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b1a	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b1d	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b20	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b23	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b26	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b29	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b2c	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b2f	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b32	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b35	60		rts				rts
.9b36					AddInteger:
.9b36	fa		plx				plx
.9b37	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b3a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b3d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b3e	0a		asl a				asl 	a
.9b3f	10 05		bpl $9b46			bpl 	_NotRef
.9b41	48		pha				pha
.9b42	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b45	68		pla				pla
.9b46					_NotRef:
.9b46	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b47	30 0b		bmi $9b54			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b49	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b4c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b4f	f0 06		beq $9b57			beq 	_IntegerCode 				; if clear, then we have two integers
.9b51	4c a7 ae	jmp $aea7			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b54					_StringData:
.9b54	4c 09 9a	jmp $9a09			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b57					_IntegerCode:
.9b57					AddCode:
.9b57	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b5a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b5d	10 8b		bpl $9aea			bpl 	AddTopTwoStack
.9b5f	20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b62	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b65	10 09		bpl $9b70			bpl 	_AddExit
.9b67	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b6a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b6d	20 82 a4	jsr $a482			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b70					_AddExit:
.9b70	60		rts				rts
.9b71					SubInteger:
.9b71	fa		plx				plx
.9b72	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b75	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b78	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b79	0a		asl a				asl 	a
.9b7a	10 05		bpl $9b81			bpl 	_NotRef
.9b7c	48		pha				pha
.9b7d	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b80	68		pla				pla
.9b81					_NotRef:
.9b81	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b82	30 0b		bmi $9b8f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b84	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b87	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b8a	f0 06		beq $9b92			beq 	_IntegerCode 				; if clear, then we have two integers
.9b8c	4c ac ae	jmp $aeac			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b8f					_StringData:
.9b8f	4c ea b2	jmp $b2ea			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b92					_IntegerCode:
.9b92	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9b95	49 80		eor #$80			eor 	#$80
.9b97	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b9a	80 bb		bra $9b57			bra 	AddCode 					; and do the same code as add.
.9b9c					AndInteger:
.9b9c	fa		plx				plx
.9b9d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ba0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ba3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ba4	0a		asl a				asl 	a
.9ba5	10 05		bpl $9bac			bpl 	_NotRef
.9ba7	48		pha				pha
.9ba8	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bab	68		pla				pla
.9bac					_NotRef:
.9bac	0a		asl a				asl 	a
.9bad	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9baf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bb2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bb5	f0 03		beq $9bba			beq 	_IntegerCode 				; if clear, then we have two integers
.9bb7	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.9bba					_IntegerCode:
.9bba	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bbd	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9bc0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bc3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bc6	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9bc9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bcc	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bcf	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9bd2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bd5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bd8	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9bdb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bde	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9be1	60		rts				rts
.9be2					OraInteger:
.9be2	fa		plx				plx
.9be3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9be6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9be9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bea	0a		asl a				asl 	a
.9beb	10 05		bpl $9bf2			bpl 	_NotRef
.9bed	48		pha				pha
.9bee	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bf1	68		pla				pla
.9bf2					_NotRef:
.9bf2	0a		asl a				asl 	a
.9bf3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bf5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bf8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bfb	f0 03		beq $9c00			beq 	_IntegerCode 				; if clear, then we have two integers
.9bfd	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.9c00					_IntegerCode:
.9c00	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c03	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c06	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c09	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c0c	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c0f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c12	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c15	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c18	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c1b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c1e	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c21	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c24	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c27	60		rts				rts
.9c28					EorInteger:
.9c28	fa		plx				plx
.9c29	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c2c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c2f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c30	0a		asl a				asl 	a
.9c31	10 05		bpl $9c38			bpl 	_NotRef
.9c33	48		pha				pha
.9c34	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c37	68		pla				pla
.9c38					_NotRef:
.9c38	0a		asl a				asl 	a
.9c39	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c3b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c3e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c41	f0 03		beq $9c46			beq 	_IntegerCode 				; if clear, then we have two integers
.9c43	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.9c46					_IntegerCode:
.9c46	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c49	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c4c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c4f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c52	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c55	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c58	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c5b	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c5e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c61	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c64	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c67	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c6a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c6d	60		rts				rts
.9c6e					WordIndirect:
.9c6e	fa		plx				plx
.9c6f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c72	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c75	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c76	0a		asl a				asl 	a
.9c77	10 05		bpl $9c7e			bpl 	_NotRef
.9c79	48		pha				pha
.9c7a	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c7d	68		pla				pla
.9c7e					_NotRef:
.9c7e	0a		asl a				asl 	a
.9c7f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c81	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c84	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c87	f0 03		beq $9c8c			beq 	_IntegerCode 				; if clear, then we have two integers
.9c89	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.9c8c					_IntegerCode:
.9c8c	20 57 9b	jsr $9b57			jsr 	AddCode 					; add the two values
.9c8f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c91	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c94	60		rts				rts
.9c95					ByteIndirect:
.9c95	fa		plx				plx
.9c96	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c99	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c9c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c9d	0a		asl a				asl 	a
.9c9e	10 05		bpl $9ca5			bpl 	_NotRef
.9ca0	48		pha				pha
.9ca1	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ca4	68		pla				pla
.9ca5					_NotRef:
.9ca5	0a		asl a				asl 	a
.9ca6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ca8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cab	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cae	f0 03		beq $9cb3			beq 	_IntegerCode 				; if clear, then we have two integers
.9cb0	4c e0 b2	jmp $b2e0			jmp 	TypeError 					; anything else, type mismatch.
.9cb3					_IntegerCode:
.9cb3	20 57 9b	jsr $9b57			jsr 	AddCode 					; add the two values
.9cb6	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9cb8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ae4c					ConvertInt16:
.ae4c	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ae4f	8e 10 04	stx $0410			stx 	NSMantissa1
.ae52	9c 18 04	stz $0418			stz 	NSMantissa2
.ae55	9c 20 04	stz $0420			stz 	NSMantissa3
.ae58	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ae5b	a2 00		ldx #$00			ldx 	#0 							; stack level
.ae5d	a9 0a		lda #$0a			lda 	#10 						; base
.ae5f	80 00		bra $ae61			bra 	ConvertInt32
.ae61					ConvertInt32:
.ae61	5a		phy				phy
.ae62	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ae64	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ae67	10 08		bpl $ae71			bpl 	_CI32NotNeg
.ae69	48		pha				pha
.ae6a	a9 2d		lda #$2d			lda 	#'-'
.ae6c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae6f	c8		iny				iny
.ae70	68		pla				pla
.ae71					_CI32NotNeg:
.ae71	20 7f ae	jsr $ae7f			jsr 	_CI32DivideConvert 			; recursive conversion
.ae74	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ae76	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ae79	7a		ply				ply
.ae7a	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ae7c	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ae7e	60		rts				rts
.ae7f					_CI32DivideConvert:
.ae7f	e8		inx				inx 								; write to next slot up
.ae80	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.ae83	ca		dex				dex
.ae84	20 81 ad	jsr $ad81			jsr 	Int32Divide 				; divide
.ae87	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ae8a	48		pha				pha
.ae8b	20 30 ad	jsr $ad30			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ae8e	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; is it zero ?
.ae91	f0 06		beq $ae99			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ae93	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ae96	20 7f ae	jsr $ae7f			jsr 	_CI32DivideConvert 			; and recusrively call.
.ae99					_CI32NoRecurse:
.ae99	68		pla				pla 								; remainder
.ae9a	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ae9c	90 02		bcc $aea0			bcc 	_CI32NotHex
.ae9e	69 26		adc #$26			adc 	#6+32
.aea0					_CI32NotHex:
.aea0	69 30		adc #$30			adc 	#48
.aea2	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.aea5	c8		iny				iny
.aea6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cbc					PrecedenceLevel:
>9cbc	04					.byte	 4	; $00 <<
>9cbd	02					.byte	 2	; $01 <=
>9cbe	02					.byte	 2	; $02 <>
>9cbf	00					.byte	 0	; $03 !!3
>9cc0	00					.byte	 0	; $04 ><
>9cc1	02					.byte	 2	; $05 >=
>9cc2	04					.byte	 4	; $06 >>
>9cc3	00					.byte	 0	; $07 !!7
>9cc4	00					.byte	 0	; $08 !!8
>9cc5	00					.byte	 0	; $09 !!9
>9cc6	00					.byte	 0	; $0a !!10
>9cc7	00					.byte	 0	; $0b !!11
>9cc8	00					.byte	 0	; $0c !!12
>9cc9	00					.byte	 0	; $0d !!13
>9cca	00					.byte	 0	; $0e !!14
>9ccb	00					.byte	 0	; $0f !!15
>9ccc	00					.byte	 0	; $10 @
>9ccd	00					.byte	 0	; $11 !!17
>9cce	00					.byte	 0	; $12 !!18
>9ccf	00					.byte	 0	; $13 [
>9cd0	04					.byte	 4	; $14 \
>9cd1	00					.byte	 0	; $15 ]
>9cd2	01					.byte	 1	; $16 ^
>9cd3	00					.byte	 0	; $17 _
>9cd4	00					.byte	 0	; $18 `
>9cd5	00					.byte	 0	; $19 !!25
>9cd6	00					.byte	 0	; $1a !!26
>9cd7	00					.byte	 0	; $1b {
>9cd8	01					.byte	 1	; $1c |
>9cd9	00					.byte	 0	; $1d }
>9cda	00					.byte	 0	; $1e ~
>9cdb	00					.byte	 0	; $1f [7m<7F>[m
>9cdc	00					.byte	 0	; $20
>9cdd	05					.byte	 5	; $21 !
>9cde	00					.byte	 0	; $22 "
>9cdf	00					.byte	 0	; $23 #
>9ce0	05					.byte	 5	; $24 $
>9ce1	04					.byte	 4	; $25 %
>9ce2	01					.byte	 1	; $26 &
>9ce3	00					.byte	 0	; $27 '
>9ce4	00					.byte	 0	; $28 (
>9ce5	00					.byte	 0	; $29 )
>9ce6	04					.byte	 4	; $2a *
>9ce7	03					.byte	 3	; $2b +
>9ce8	00					.byte	 0	; $2c ,
>9ce9	03					.byte	 3	; $2d -
>9cea	00					.byte	 0	; $2e .
>9ceb	04					.byte	 4	; $2f /
>9cec	00					.byte	 0	; $30 0
>9ced	00					.byte	 0	; $31 1
>9cee	00					.byte	 0	; $32 2
>9cef	00					.byte	 0	; $33 3
>9cf0	00					.byte	 0	; $34 4
>9cf1	00					.byte	 0	; $35 5
>9cf2	00					.byte	 0	; $36 6
>9cf3	00					.byte	 0	; $37 7
>9cf4	00					.byte	 0	; $38 8
>9cf5	00					.byte	 0	; $39 9
>9cf6	00					.byte	 0	; $3a :
>9cf7	00					.byte	 0	; $3b ;
>9cf8	02					.byte	 2	; $3c <
>9cf9	02					.byte	 2	; $3d =
>9cfa	02					.byte	 2	; $3e >
>9cfb	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9cfc					EvaluateExpressionAt0:
.9cfc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9cfe					EvaluateExpression:
.9cfe	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d00					EvaluateExpressionAtPrecedence:
.9d00	48		pha				pha 								; save precedence level
.9d01	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d04	68		pla				pla 								; restore precedence level.
.9d05					_EXPRLoop:
.9d05	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d07	b1 30		lda ($30),y			lda 	(codePtr),y
.9d09	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d0b	b0 25		bcs $9d32			bcs 	_EXPRExit
.9d0d	da		phx				phx 								; read the operator precedence
.9d0e	aa		tax				tax
.9d0f	bd bc 9c	lda $9cbc,x			lda 	PrecedenceLevel,x
.9d12	fa		plx				plx
.9d13	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d15	f0 1b		beq $9d32			beq 	_EXPRExit
.9d17	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d19	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d1b	c5 37		cmp $37				cmp 	zTemp0+1
.9d1d	b0 13		bcs $9d32			bcs		_EXPRExit 					; if current >= operator exit
.9d1f	48		pha				pha 								; save current precedence.
.9d20	b1 30		lda ($30),y			lda 	(codePtr),y
.9d22	c8		iny				iny
.9d23	48		pha				pha
.9d24	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d26	e8		inx				inx 								; work out the right hand side.
.9d27	20 00 9d	jsr $9d00			jsr 	EvaluateExpressionAtPrecedence
.9d2a	ca		dex				dex
.9d2b	68		pla				pla 								; get operator, call the code.
.9d2c	20 35 9d	jsr $9d35			jsr 	_EXPRCaller
.9d2f	68		pla				pla 								; restore precedence level
.9d30	80 d3		bra $9d05			bra 	_EXPRLoop 					; and go round.
.9d32					_EXPRExit:
.9d32	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d34	60		rts				rts
.9d35					_EXPRCaller:
.9d35	da		phx				phx 								; save on stack, first thing is to restore it
.9d36	0a		asl a				asl 	a 							; double so can use vectors into X
.9d37	aa		tax				tax
.9d38	7c f0 94	jmp ($94f0,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.aea7					FloatingPointAdd:
.aea7	20 48 b0	jsr $b048			jsr 	FloatPrepare 				; prepare for floats
.aeaa	80 0b		bra $aeb7			bra 	FloatAdd
.aeac					FloatingPointSub:
.aeac	20 48 b0	jsr $b048			jsr 	FloatPrepare 				; prepare for floats
.aeaf					FloatSubtract:
.aeaf	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.aeb2	49 80		eor #$80			eor 	#$80
.aeb4	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.aeb7					FloatAdd:
.aeb7	48		pha				pha
.aeb8	5a		phy				phy
.aeb9	20 59 b0	jsr $b059			jsr 	NSNormalise 				; normalise S[X]
.aebc	f0 54		beq $af12			beq 	_FAReturn1
.aebe	e8		inx				inx 								; normalise S[X+1]
.aebf	20 59 b0	jsr $b059			jsr 	NSNormalise
.aec2	ca		dex				dex
.aec3	c9 00		cmp #$00			cmp 	#0
.aec5	f0 6f		beq $af36			beq 	_FAExit 					; if so, just return A
.aec7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aeca	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aecd	f0 1b		beq $aeea			beq 	_FAExponentsEqual
.aecf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.aed2	a8		tay				tay
.aed3	38		sec				sec 								; do a signed comparison of the exponents.
.aed4	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aed7	50 02		bvc $aedb			bvc 	_FANoSignedChange
.aed9	49 80		eor #$80			eor 	#$80
.aedb					_FANoSignedChange:
.aedb	29 80		and #$80			and 	#$80
.aedd	10 03		bpl $aee2			bpl 	_FAHaveMax
.aedf	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.aee2					_FAHaveMax:
.aee2	20 39 af	jsr $af39			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.aee5	e8		inx				inx
.aee6	20 39 af	jsr $af39			jsr 	_FAShiftToExponent
.aee9	ca		dex				dex
.aeea					_FAExponentsEqual:
.aeea	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.aeed	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aef0	30 10		bmi $af02			bmi 	_FADifferentSigns
.aef2	20 ea 9a	jsr $9aea			jsr 	AddTopTwoStack 				; do the add of the mantissae
.aef5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.aef8	10 3c		bpl $af36			bpl 	_FAExit 					; if no, we are done.
.aefa	20 f0 a4	jsr $a4f0			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.aefd	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.af00	80 34		bra $af36			bra 	_FAExit
.af02					_FADifferentSigns:
.af02	20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.af05	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.af08	10 2c		bpl $af36			bpl 	_FAExit 					; if no, we are done.
.af0a	20 79 a4	jsr $a479			jsr 	NSMNegate 					; netate result
.af0d	20 82 a4	jsr $a482			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.af10	80 24		bra $af36			bra 	_FAExit
.af12					_FAReturn1:
.af12	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.af15	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af18	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.af1b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af1e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.af21	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af24	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.af27	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af2a	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.af2d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af30	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.af33	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af36					_FAExit:
.af36	7a		ply				ply
.af37	68		pla				pla
.af38	60		rts				rts
.af39					_FAShiftToExponent:
.af39					_FAShiftToExponent2:
.af39	98		tya				tya 								; compare Y to exponent
.af3a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.af3d	f0 08		beq $af47			beq 	_FASEExit 					; exit if so.
.af3f	20 f0 a4	jsr $a4f0			jsr 	NSMShiftRight	 			; shift the mantissa right
.af42	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.af45	80 f2		bra $af39			bra 	_FAShiftToExponent2
.af47					_FASEExit:
.af47	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.af48					CompareFloat:
.af48	20 af ae	jsr $aeaf			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.af4b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.af4e	29 f8		and #$f8			and 	#$F8
.af50	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.af53	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.af56	f0 09		beq $af61			beq 	_FCExit 					; zero, so approximately identical
.af58	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.af5a	3c 00 04	bit $0400,x			bit 	NSStatus,x
.af5d	10 02		bpl $af61			bpl 	_FCExit
.af5f					_FCNegative:
.af5f	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.af61					_FCExit:
.af61	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.af62					FDivideCommand:
.af62	fa		plx				plx	 								; restore stack position
.af63	20 48 b0	jsr $b048			jsr 	FloatPrepare 				; prepare for floats
.af66					FloatDivide:
.af66	48		pha				pha
.af67	e8		inx				inx
.af68	20 59 b0	jsr $b059			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.af6b	ca		dex				dex
.af6c	c9 00		cmp #$00			cmp 	#0
.af6e	f0 20		beq $af90			beq 	_FDZero
.af70	20 59 b0	jsr $b059			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.af73	f0 19		beq $af8e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.af75	20 a3 ad	jsr $ada3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.af78	20 30 ad	jsr $ad30			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.af7b	20 59 b0	jsr $b059			jsr		NSNormalise 				; renormalise
.af7e	20 3e ae	jsr $ae3e			jsr 	CalculateSign 				; calculate result sign
.af81	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.af84	38		sec				sec
.af85	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af88	38		sec				sec
.af89	e9 1e		sbc #$1e			sbc 	#30
.af8b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af8e					_FDExit:
.af8e	68		pla				pla
.af8f	60		rts				rts
.af90					_FDZero:
.af90	a9 03		lda #$03		lda	#3
.af92	4c f5 98	jmp $98f5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.af95					FloatFractionalPart:
.af95	5a		phy				phy
.af96	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.af99	29 7f		and #$7f			and 	#$7F
.af9b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af9e	20 59 b0	jsr $b059			jsr 	NSNormalise
.afa1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.afa4	38		sec				sec
.afa5	e9 e0		sbc #$e0			sbc 	#$E0
.afa7	90 31		bcc $afda			bcc 	_FFPExit 					; already fractional
.afa9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.afab	b0 2a		bcs $afd7			bcs 	_FFPZero
.afad	a8		tay				tay 								; put count to do in Y
.afae	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.afb1	20 dc af	jsr $afdc			jsr 	_FFPPartial
.afb4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afb7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.afba	20 dc af	jsr $afdc			jsr 	_FFPPartial
.afbd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afc0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.afc3	20 dc af	jsr $afdc			jsr 	_FFPPartial
.afc6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afc9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.afcc	20 dc af	jsr $afdc			jsr 	_FFPPartial
.afcf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afd2	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; zeroed check.
.afd5	d0 03		bne $afda			bne 	_FFPExit
.afd7					_FFPZero:
.afd7	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.afda					_FFPExit:
.afda	7a		ply				ply
.afdb	60		rts				rts
.afdc					_FFPPartial:
.afdc	c0 00		cpy #$00			cpy 	#0 							; no more to do
.afde	f0 17		beq $aff7			beq 	_FFFPPExit
.afe0	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.afe2	b0 0c		bcs $aff0			bcs 	_FFFPPWholeByte
.afe4	5a		phy				phy
.afe5					_FFFPPLeft:
.afe5	0a		asl a				asl 	a
.afe6	88		dey				dey
.afe7	d0 fc		bne $afe5			bne 	_FFFPPLeft
.afe9	7a		ply				ply
.afea					_FFFPPRight:
.afea	4a		lsr a				lsr 	a
.afeb	88		dey				dey
.afec	d0 fc		bne $afea			bne 	_FFFPPRight
.afee	80 07		bra $aff7			bra 	_FFFPPExit
.aff0					_FFFPPWholeByte:
.aff0	98		tya				tya 								; subtract 8 from count
.aff1	38		sec				sec
.aff2	e9 08		sbc #$08			sbc 	#8
.aff4	a8		tay				tay
.aff5	a9 00		lda #$00			lda 	#0 							; and clear all
.aff7					_FFFPPExit:
.aff7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aff8					FloatIntegerPart:
.aff8	48		pha				pha
.aff9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.affc	f0 1f		beq $b01d			beq 	_FIPExit 					; if so do nothing
.affe	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; is it zero ?
.b001	f0 17		beq $b01a			beq 	_FIPZero 					; if so return zero.
.b003	20 59 b0	jsr $b059			jsr 	NSNormalise 				; normalise
.b006	f0 12		beq $b01a			beq 	_FIPZero 					; normalised to zero, exit zero
.b008					_FIPShift:
.b008	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b00b	10 08		bpl $b015			bpl 	_FIPCheckZero
.b00d	20 f0 a4	jsr $a4f0			jsr 	NSMShiftRight 				; shift mantissa right
.b010	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b013	80 f3		bra $b008			bra 	_FIPShift
.b015					_FIPCheckZero:
.b015	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; avoid -0 problem
.b018	d0 03		bne $b01d			bne 	_FIPExit 					; set to zero if mantissa zero.
.b01a					_FIPZero:
.b01a	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.b01d					_FIPExit:
.b01d	68		pla				pla
.b01e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b01f					FloatingPointMultiply:
.b01f	20 48 b0	jsr $b048			jsr 	FloatPrepare 				; prepare for floats
.b022					FloatMultiply:
.b022	48		pha				pha
.b023	20 59 b0	jsr $b059			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b026	f0 1b		beq $b043			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b028	e8		inx				inx
.b029	20 59 b0	jsr $b059			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b02c	ca		dex				dex
.b02d	c9 00		cmp #$00			cmp 	#0
.b02f	f0 0f		beq $b040			beq 	_FDSetZero
.b031	20 f9 ad	jsr $adf9			jsr 	MultiplyShort 				; calculate the result.
.b034	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b037	18		clc				clc
.b038	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b03b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b03e	80 03		bra $b043			bra 	_FDExit
.b040					_FDSetZero:
.b040	20 cd a4	jsr $a4cd			jsr 	NSMSetZero 					; return 0
.b043					_FDExit:
.b043	20 59 b0	jsr $b059			jsr 	NSNormalise 				; normalise the result
.b046	68		pla				pla
.b047	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b048					FloatPrepare:
.b048	20 0e 9e	jsr $9e0e			jsr 	DereferenceTopTwo 			; dereference the top two values
.b04b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b04e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b051	29 10		and #$10			and 	#NSBIsString
.b053	d0 01		bne $b056			bne 	_FDType
.b055	60		rts				rts
.b056					_FDType:
.b056	4c e0 b2	jmp $b2e0			jmp 	TypeError
.b059					NSNormalise:
.b059	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b05c	29 80		and #$80			and 	#$80
.b05e	09 08		ora #$08			ora 	#NSTFloat
.b060	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b063	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; if zero exit
.b066	d0 09		bne $b071			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b068	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b06b	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b06e	a9 00		lda #$00			lda 	#0 							; set Z flag
.b070	60		rts				rts
.b071					_NSNormaliseOptimise:
.b071	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b074	d0 22		bne $b098			bne 	_NSNormaliseLoop
.b076	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b079	30 1d		bmi $b098			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b07b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b07e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b081	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b084	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b087	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b08a	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b08d	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b090	38		sec				sec
.b091	e9 08		sbc #$08			sbc 	#8
.b093	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b096	80 d9		bra $b071			bra 	_NSNormaliseOptimise
.b098					_NSNormaliseLoop:
.b098	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b09b	70 08		bvs $b0a5			bvs 	_NSNExit 					; exit if so with Z flag clear
.b09d	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; shift mantissa left
.b0a0	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b0a3	80 f3		bra $b098			bra 	_NSNormaliseLoop
.b0a5					_NSNExit:
.b0a5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b0a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d3b					AssignNumber:
.9d3b	5a		phy				phy
.9d3c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d3f	85 36		sta $36				sta 	zTemp0
.9d41	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d44	85 37		sta $37				sta 	zTemp0+1
.9d46	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d49	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d4b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d4e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d50	c9 08		cmp #$08			cmp 	#NSTFloat
.9d52	f0 2a		beq $9d7e			beq 	_ANFloat
.9d54	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d57	f0 05		beq $9d5e			beq		_ANNotFloat
.9d59	e8		inx				inx
.9d5a	20 f8 af	jsr $aff8			jsr 	FloatIntegerPart 			; make it an integer
.9d5d	ca		dex				dex
.9d5e					_ANNotFloat:
.9d5e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d61	29 03		and #$03			and 	#3
.9d63	d0 05		bne $9d6a			bne 	_ANByteWord
.9d65	20 8a 9d	jsr $9d8a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d68	80 1e		bra $9d88			bra 	_ANExit
.9d6a					_ANByteWord:
.9d6a	48		pha				pha 								; save count
.9d6b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d6e	92 36		sta ($36)			sta 	(zTemp0)
.9d70	68		pla				pla
.9d71	c9 01		cmp #$01			cmp	 	#1
.9d73	f0 13		beq $9d88			beq 	_ANExit
.9d75	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d78	a0 01		ldy #$01			ldy 	#1
.9d7a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d7c	80 0a		bra $9d88			bra 	_ANExit
.9d7e					_ANFloat:
.9d7e	20 8a 9d	jsr $9d8a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d81	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d84	a0 04		ldy #$04			ldy 	#4
.9d86	91 36		sta ($36),y			sta 	(zTemp0),y
.9d88					_ANExit:
.9d88	7a		ply				ply
.9d89	60		rts				rts
.9d8a					_ANCopy4PackSign:
.9d8a	a0 03		ldy #$03			ldy 	#3
.9d8c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9d8f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9d91	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9d94	91 36		sta ($36),y			sta 	(zTemp0),y
.9d96	88		dey				dey
.9d97	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9d9a	91 36		sta ($36),y			sta 	(zTemp0),y
.9d9c	88		dey				dey
.9d9d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9da0	91 36		sta ($36),y			sta 	(zTemp0),y
.9da2	88		dey				dey
.9da3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9da6	91 36		sta ($36),y			sta 	(zTemp0),y
.9da8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9da9					AssignString:
.9da9	5a		phy				phy
.9daa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dad	85 38		sta $38				sta 	zTemp1
.9daf	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9db2	85 39		sta $39				sta 	zTemp1+1
.9db4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9db7	85 36		sta $36				sta 	zTemp0
.9db9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dbc	85 37		sta $37				sta 	zTemp0+1
.9dbe	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9dc0	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc2	f0 23		beq $9de7			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dc4	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dc5	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9dc7	e9 02		sbc #$02			sbc 	#2
.9dc9	85 3c		sta $3c				sta 	zsTemp
.9dcb	a0 01		ldy #$01			ldy 	#1
.9dcd	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dcf	e9 00		sbc #$00			sbc 	#0
.9dd1	85 3d		sta $3d				sta 	zsTemp+1
.9dd3	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9dd5					_ASGetLength:
.9dd5	c8		iny				iny
.9dd6	b1 38		lda ($38),y			lda 	(zTemp1),y
.9dd8	d0 fb		bne $9dd5			bne 	_ASGetLength
.9dda	98		tya				tya 								; is this length <= current length
.9ddb	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9ddd	90 20		bcc $9dff			bcc 	_ASCopyString
.9ddf	f0 1e		beq $9dff			beq 	_ASCopyString
.9de1	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9de3	a0 01		ldy #$01			ldy 	#1
.9de5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9de7					_ASNewStringRequired:
.9de7	e8		inx				inx 								; concrete the new string.
.9de8	20 d8 b5	jsr $b5d8			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9deb	ca		dex				dex
.9dec	18		clc				clc
.9ded	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9df0	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9df2	92 36		sta ($36)			sta 	(zTemp0)
.9df4	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9df7	69 00		adc #$00			adc 	#0
.9df9	a0 01		ldy #$01			ldy 	#1
.9dfb	91 36		sta ($36),y			sta 	(zTemp0),y
.9dfd	80 0d		bra $9e0c			bra 	_ASExit
.9dff					_ASCopyString:
.9dff	a0 00		ldy #$00			ldy 	#0
.9e01					_ASCopyLoop:
.9e01	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e03	c8		iny				iny
.9e04	c8		iny				iny
.9e05	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e07	88		dey				dey
.9e08	c9 00		cmp #$00			cmp 	#0
.9e0a	d0 f5		bne $9e01			bne 	_ASCopyLoop
.9e0c					_ASExit:
.9e0c	7a		ply				ply
.9e0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e0e					DereferenceTopTwo:
.9e0e	e8		inx				inx
.9e0f	20 13 9e	jsr $9e13			jsr 	Dereference 				; deref x+1
.9e12	ca		dex				dex  								; falls through to deref x
.9e13					Dereference:
.9e13	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e16	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e18	f0 57		beq $9e71			beq 	_DRFExit 					; not a reference
.9e1a	5a		phy				phy
.9e1b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e1e	85 36		sta $36				sta 	zTemp0
.9e20	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e23	85 37		sta $37				sta 	zTemp0+1
.9e25	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e28	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e2a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e2d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e30	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e32	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e34	f0 0f		beq $9e45			beq 	_DRFDereferenceTwo
.9e36	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e38	f0 39		beq $9e73			beq 	_DRFFull
.9e3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e3d	29 03		and #$03			and 	#3
.9e3f	f0 32		beq $9e73			beq 	_DRFFull 					; the whole word
.9e41	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e43	f0 07		beq $9e4c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e45					_DRFDereferenceTwo:
.9e45	a0 01		ldy #$01			ldy 	#1
.9e47	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e49	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e4c					_DRFClear23:
.9e4c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e4f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e52	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e55	29 18		and #$18			and 	#NSBTypeMask
.9e57	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e5a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e5c	d0 12		bne $9e70			bne 	_DRFNotString
.9e5e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e61	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e64	d0 0a		bne $9e70			bne 	_DRFNotString
.9e66	a9 72		lda #$72			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e68	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e6b	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e6d	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e70					_DRFNotString
.9e70	7a		ply				ply 								; restore Y and exit
.9e71					_DRFExit:
.9e71	60		rts				rts
.9e72					_DRFNullString:
>9e72	00						.byte 	0
.9e73					_DRFFull:
.9e73	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e75	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e77	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e7a	c8		iny				iny
.9e7b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e7d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e80	c8		iny				iny
.9e81	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e83	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e86	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9e89	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9e8c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e8e	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9e91	f0 06		beq $9e99			beq 	_DRFNoExponent
.9e93	c8		iny				iny 								; if not, read the exponent as well.
.9e94	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e96	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9e99					_DRFNoExponent:
.9e99	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e9c	10 0d		bpl $9eab			bpl 	_DRFExit2 					; if not, then exit.
.9e9e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ea0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ea3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9ea6	09 80		ora #$80			ora 	#NSBIsNegative
.9ea8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9eab					_DRFExit2:
.9eab	7a		ply				ply
.9eac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9ead					EncodeNumberStart:
.9ead	38		sec				sec
.9eae	80 01		bra $9eb1			bra 	EncodeNumberContinue+1
.9eb0					EncodeNumberContinue:
.9eb0	18		clc				clc
.9eb1					EncodeNumber:
.9eb1	08		php				php 								; save reset.
.9eb2	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9eb4	f0 12		beq $9ec8			beq 	_ENIsOkay
.9eb6	c9 30		cmp #$30			cmp 	#"0"
.9eb8	90 04		bcc $9ebe			bcc 	_ENBadNumber
.9eba	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ebc	90 0a		bcc $9ec8			bcc 	_ENIsOkay
.9ebe					_ENBadNumber:
.9ebe	28		plp				plp 								; throw saved reset
.9ebf	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9ec2	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ec4	f0 7e		beq $9f44			beq 	_ENConstructFinal
.9ec6					_ENFail:
.9ec6	18		clc				clc 								; not allowed
.9ec7	60		rts				rts
.9ec8					_ENIsOkay:
.9ec8	28		plp				plp 								; are we restarting
.9ec9	90 15		bcc $9ee0			bcc 	_ENNoRestart
.9ecb					_ENStartEncode:
.9ecb	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ecd	f0 0c		beq $9edb			beq 	_ENFirstDP
.9ecf	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ed1	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.9ed4	a9 01		lda #$01			lda 	#ESTA_Low
.9ed6					_ENExitChange:
.9ed6	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ed9	38		sec				sec
.9eda	60		rts				rts
.9edb					_ENFirstDP:
.9edb	20 cd a4	jsr $a4cd			jsr 	NSMSetZero 					; clear integer part
.9ede	80 3f		bra $9f1f			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ee0					_ENNoRestart:
.9ee0	48		pha				pha 								; save on stack.
.9ee1	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9ee4	c9 01		cmp #$01			cmp 	#ESTA_Low
.9ee6	f0 09		beq $9ef1			beq  	_ESTALowState
.9ee8	c9 02		cmp #$02			cmp 	#ESTA_High
.9eea	f0 29		beq $9f15			beq 	_ESTAHighState
.9eec	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9eee	f0 3b		beq $9f2b			beq 	_ESTADecimalState
>9ef0	db						.byte 	$DB 						; causes a break in the emulator
.9ef1					_ESTALowState:
.9ef1	68		pla				pla 								; get value back
.9ef2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9ef4	f0 29		beq $9f1f			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9ef6	29 0f		and #$0f			and 	#15 						; make digit
.9ef8	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9efb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9efe	0a		asl a				asl 	a
.9eff	0a		asl a				asl 	a
.9f00	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f03	0a		asl a				asl 	a
.9f04	6d 86 04	adc $0486			adc 	DigitTemp
.9f07	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f0a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f0c	90 05		bcc $9f13			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f0e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f10	8d 85 04	sta $0485			sta 	EncodeState
.9f13					_ESTANoSwitch:
.9f13	38		sec				sec
.9f14	60		rts				rts
.9f15					_ESTAHighState:
.9f15	68		pla				pla 								; get value back
.9f16	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f18	f0 05		beq $9f1f			beq 	_ESTASwitchFloat
.9f1a	20 7e 9f	jsr $9f7e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f1d	38		sec				sec
.9f1e	60		rts				rts
.9f1f					_ESTASwitchFloat:
.9f1f	9c 87 04	stz $0487			stz 	DecimalCount
.9f22	e8		inx				inx 								; zero the decimal additive.
.9f23	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.9f26	ca		dex				dex
.9f27	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f29	80 ab		bra $9ed6			bra 	_ENExitChange
.9f2b					_ESTADecimalState:
.9f2b	68		pla				pla 								; digit.
.9f2c	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f2e	f0 96		beq $9ec6			beq 	_ENFail
.9f30	e8		inx				inx 								; put digit into fractional part of X+1
.9f31	20 7e 9f	jsr $9f7e			jsr 	ESTAShiftDigitIntoMantissa
.9f34	ca		dex				dex
.9f35	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f38	ad 87 04	lda $0487			lda 	DecimalCount
.9f3b	c9 0b		cmp #$0b			cmp 	#11
.9f3d	f0 02		beq $9f41			beq 	_ESTADSFail
.9f3f	38		sec				sec
.9f40	60		rts				rts
.9f41					_ESTADSFail:
.9f41	4c db b2	jmp $b2db			jmp 	RangeError
.9f44					_ENConstructFinal:
.9f44	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f47	f0 33		beq $9f7c			beq 	_ENCFExit 					; no decimals
.9f49	5a		phy				phy
.9f4a	0a		asl a				asl 	a 							; x 4 and CLC
.9f4b	0a		asl a				asl 	a
.9f4c	6d 87 04	adc $0487			adc 	DecimalCount
.9f4f	a8		tay				tay
.9f50	b9 9a b2	lda $b29a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f53	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f56	b9 9b b2	lda $b29b,y			lda 	DecimalScalarTable-5+1,y
.9f59	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f5c	b9 9c b2	lda $b29c,y			lda 	DecimalScalarTable-5+2,y
.9f5f	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f62	b9 9d b2	lda $b29d,y			lda 	DecimalScalarTable-5+3,y
.9f65	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f68	b9 9e b2	lda $b29e,y			lda 	DecimalScalarTable-5+4,y
.9f6b	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f6e	a9 08		lda #$08			lda 	#NSTFloat
.9f70	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f73	7a		ply				ply
.9f74	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f75	20 22 b0	jsr $b022			jsr 	FloatMultiply
.9f78	ca		dex				dex
.9f79	20 b7 ae	jsr $aeb7			jsr 	FloatAdd 					; add to integer part.
.9f7c					_ENCFExit:
.9f7c	18		clc				clc 								; reject the digit.
.9f7d	60		rts				rts
.9f7e					ESTAShiftDigitIntoMantissa:
.9f7e	29 0f		and #$0f			and 	#15 						; save digit
.9f80	48		pha				pha
.9f81	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f84	48		pha				pha
.9f85	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f88	48		pha				pha
.9f89	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f8c	48		pha				pha
.9f8d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f90	48		pha				pha
.9f91	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; x 2
.9f94	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; x 4
.9f97	18		clc				clc 								; pop mantissa and add
.9f98	68		pla				pla
.9f99	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f9c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f9f	68		pla				pla
.9fa0	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9fa3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fa6	68		pla				pla
.9fa7	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9faa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fad	68		pla				pla
.9fae	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9fb1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9fb4	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; x 10
.9fb7	68		pla				pla 								; add digit
.9fb8	18		clc				clc
.9fb9	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fbc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fbf	90 0d		bcc $9fce			bcc 	_ESTASDExit
.9fc1	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fc4	d0 08		bne $9fce			bne 	_ESTASDExit
.9fc6	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fc9	d0 03		bne $9fce			bne 	_ESTASDExit
.9fcb	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fce					_ESTASDExit:
.9fce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fcf					EvaluateTerm:
.9fcf	b1 30		lda ($30),y			lda 	(codePtr),y
.9fd1	30 18		bmi $9feb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fd3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fd5	b0 6f		bcs $a046			bcs 	_ETVariable
.9fd7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fd9	90 6e		bcc $a049			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fdb	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fdd	b0 6a		bcs $a049			bcs 	_ETPuncUnary
.9fdf	20 ad 9e	jsr $9ead			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fe2					_ETNumber:
.9fe2	c8		iny				iny 								; keep encoding until we have the numbers
.9fe3	b1 30		lda ($30),y			lda 	(codePtr),y
.9fe5	20 b0 9e	jsr $9eb0			jsr 	EncodeNumberContinue
.9fe8	b0 f8		bcs $9fe2			bcs 	_ETNumber 					; go back if accepted.
.9fea	60		rts				rts
.9feb					_ETCheckUnary:
.9feb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9fed	f0 41		beq $a030			beq 	_ETString
.9fef	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9ff1	f0 12		beq $a005			beq 	_ETHexConstant
.9ff3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9ff5	90 0b		bcc $a002			bcc 	_ETSyntaxError
.9ff7	c9 9c		cmp #$9c			cmp 	#KWC_LAST_UNARY+1
.9ff9	b0 07		bcs $a002			bcs 	_ETSyntaxError
.9ffb	da		phx				phx 								; push X on the stack
.9ffc	0a		asl a				asl 	a 							; put vector x 2 into X
.9ffd	aa		tax				tax
.9ffe	c8		iny				iny 								; consume unary function token
.9fff	7c 70 95	jmp ($9570,x)			jmp 	(VectorSet0,x) 				; and do it.
.a002					_ETSyntaxError:
.a002	4c d6 b2	jmp $b2d6			jmp 	SyntaxError
.a005					_ETHexConstant:
.a005	c8		iny				iny 								; skip #
.a006	c8		iny				iny 								; skip count
.a007	20 cd a4	jsr $a4cd			jsr 	NSMSetZero 					; clear result
.a00a					_ETHLoop:
.a00a	b1 30		lda ($30),y			lda 	(codePtr),y
.a00c	c8		iny				iny 								; and consume
.a00d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a00f	f0 1e		beq $a02f			beq 	_ETHExit
.a011	48		pha				pha 								; save on stack.
.a012	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; x 2
.a015	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; x 4
.a018	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; x 8
.a01b	20 e2 a4	jsr $a4e2			jsr 	NSMShiftLeft 				; x 16
.a01e	68		pla				pla 								; ASCII
.a01f	c9 41		cmp #$41			cmp 	#'A'
.a021	90 02		bcc $a025			bcc 	_ETHNotChar
.a023	e9 07		sbc #$07			sbc 	#7
.a025					_ETHNotChar:
.a025	29 0f		and #$0f			and 	#15 						; digit now
.a027	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a02a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a02d	80 db		bra $a00a			bra 	_ETHLoop 					; go round.
.a02f					_ETHExit:
.a02f	60		rts				rts
.a030					_ETString:
.a030	c8		iny				iny 								; look at length
.a031	b1 30		lda ($30),y			lda 	(codePtr),y
.a033	48		pha				pha
.a034	c8		iny				iny 								; first character
.a035	20 17 a5	jsr $a517			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a038	68		pla				pla 								; restore count and save
.a039	85 36		sta $36				sta 	zTemp0
.a03b	98		tya				tya 								; add length to Y to skip it.
.a03c	18		clc				clc
.a03d	65 36		adc $36				adc 	zTemp0
.a03f	a8		tay				tay
.a040	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a042	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a045	60		rts				rts
.a046					_ETVariable:
.a046	4c a0 a0	jmp $a0a0			jmp 	VariableHandler
.a049					_ETPuncUnary:
.a049	c8		iny				iny 								; consume the unary character
.a04a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a04c	f0 2d		beq $a07b			beq 	_ETUnaryNegate
.a04e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a050	f0 39		beq $a08b			beq 	_ETDereference
.a052	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a054	f0 43		beq $a099			beq 	_ETParenthesis
.a056	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a058	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a05a	f0 06		beq $a062			beq 	_ETIndirection
.a05c	e6 36		inc $36				inc 	zTemp0
.a05e	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a060	d0 a0		bne $a002			bne 	_ETSyntaxError
.a062					_ETIndirection:
.a062	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a064	1a		inc a				inc 	a
.a065	48		pha				pha
.a066	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm				; evaluate the term
.a069	20 13 9e	jsr $9e13			jsr 	Dereference 				; dereference it.
.a06c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a06f	d0 07		bne $a078			bne 	_ETTypeMismatch
.a071	68		pla				pla 								; indirection 1-2
.a072	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a074	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a077	60		rts				rts
.a078					_ETTypeMismatch:
.a078	4c e0 b2	jmp $b2e0			jmp 	TypeError
.a07b					_ETUnaryNegate:
.a07b	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm				; evaluate the term
.a07e	20 13 9e	jsr $9e13			jsr 	Dereference 				; dereference it.
.a081	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a084	29 10		and #$10			and 	#NSTString
.a086	d0 f0		bne $a078			bne 	_ETTypeMismatch
.a088	4c 79 a4	jmp $a479			jmp 	NSMNegate  					; just toggles the sign bit.
.a08b					_ETDereference:
.a08b	20 cf 9f	jsr $9fcf			jsr 	EvaluateTerm				; evaluate the term
.a08e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a091	29 20		and #$20			and 	#NSBIsReference
.a093	f0 e3		beq $a078			beq 	_ETTypeMismatch
.a095	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a098	60		rts				rts
.a099					_ETParenthesis:
.a099	20 fe 9c	jsr $9cfe			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a09c	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 			; check for )
.a09f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a0a0					VariableHandler:
.a0a0	b1 30		lda ($30),y			lda 	(codePtr),y
.a0a2	18		clc				clc
.a0a3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0a5	85 37		sta $37				sta 	zTemp0+1
.a0a7	c8		iny				iny
.a0a8	b1 30		lda ($30),y			lda 	(codePtr),y
.a0aa	85 36		sta $36				sta 	zTemp0
.a0ac	c8		iny				iny
.a0ad	18		clc				clc									; copy variable address+3 to mantissa
.a0ae	69 03		adc #$03			adc 	#3
.a0b0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0b3	a5 37		lda $37				lda 	zTemp0+1
.a0b5	69 00		adc #$00			adc 	#0
.a0b7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0ba	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0bd	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0c0	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0c3	5a		phy				phy
.a0c4	a0 02		ldy #$02			ldy 	#2 							; read type
.a0c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0c8	7a		ply				ply
.a0c9	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0cb	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0cd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0d0	29 04		and #$04			and 	#NSBIsArray
.a0d2	d0 01		bne $a0d5			bne 	_VHArray
.a0d4	60		rts				rts
.a0d5					_VHArray:
.a0d5	e8		inx				inx
.a0d6	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0d9	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0db	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0de	b1 30		lda ($30),y			lda 	(codePtr),y
.a0e0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0e2	d0 06		bne $a0ea			bne 	_VHNoSecondIndex
.a0e4	c8		iny				iny 								; skip the comma
.a0e5	e8		inx				inx
.a0e6	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0e9	ca		dex				dex
.a0ea					_VHNoSecondIndex:
.a0ea	ca		dex				dex 								; set X back.
.a0eb	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 			; and check the right bracket.
.a0ee	5a		phy				phy 								; save position
.a0ef	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a0f1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0f3	f0 6b		beq $a160			beq 	_VHBadIndex
.a0f5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a0f8	85 3e		sta $3e				sta 	zaTemp
.a0fa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0fd	85 3f		sta $3f				sta 	zaTemp+1
.a0ff	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a101	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a103	f0 02		beq $a107			beq 	_VHHas2Mask
.a105	a9 ff		lda #$ff			lda 	#$FF
.a107					_VHHas2Mask:
.a107	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a10a	f0 54		beq $a160			beq 	_VHBadIndex
.a10c	0a		asl a				asl 	a 							; carry will be set if a second index
.a10d	90 09		bcc $a118			bcc 	_VHCheckFirstIndex
.a10f	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a111	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a113	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a116	90 48		bcc $a160			bcc 	_VHBadIndex
.a118					_VHCheckFirstIndex:
.a118	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a11a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a11c	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a11f	90 3f		bcc $a160			bcc 	_VHBadIndex
.a121	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a123	64 37		stz $37				stz 	zTemp0+1
.a125	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a128	30 0f		bmi $a139			bmi 	_VHNoMultiply
.a12a	da		phx				phx
.a12b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a12e	48		pha				pha
.a12f	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a131	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a133	1a		inc a				inc 	a 							; add 1 for zero base
.a134	fa		plx				plx
.a135	20 72 b1	jsr $b172			jsr 	Multiply8x8 				; calculate -> Z0
.a138	fa		plx				plx
.a139					_VHNoMultiply:
.a139	18		clc				clc
.a13a	a5 36		lda $36				lda 	zTemp0
.a13c	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a13f	85 36		sta $36				sta 	zTemp0
.a141	a5 37		lda $37				lda 	zTemp0+1
.a143	69 00		adc #$00			adc 	#0
.a145	85 37		sta $37				sta 	zTemp0+1
.a147	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a14a	20 d1 8c	jsr $8cd1			jsr 	ScaleByBaseType
.a14d	18		clc				clc
.a14e	b2 3e		lda ($3e)			lda 	(zaTemp)
.a150	65 36		adc $36				adc 	zTemp0
.a152	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a155	a0 01		ldy #$01			ldy 	#1
.a157	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a159	65 37		adc $37				adc 	zTemp0+1
.a15b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a15e	7a		ply				ply 								; restore position
.a15f	60		rts				rts
.a160					_VHBadIndex:
.a160	a9 17		lda #$17		lda	#23
.a162	4c f5 98	jmp $98f5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b0a8					AbsUnary:
.b0a8	fa		plx				plx 								; restore stack pos
.b0a9	20 0d a4	jsr $a40d			jsr 	EvaluateNumber 				; get a float or int
.b0ac	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.b0af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b0b2	29 7f		and #$7f			and 	#$7F
.b0b4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a165					AllocUnary:
.a165	fa		plx				plx 								; restore stack pos
.a166	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger		; get bytes required.
.a169	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.a16c	da		phx				phx 								; save X/Y
.a16d	5a		phy				phy
.a16e	8a		txa				txa 								; copy X into Y
.a16f	a8		tay				tay
.a170	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a173	aa		tax				tax
.a174	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a177	20 84 a1	jsr $a184			jsr 	AllocateXABytes 			; allocate memory
.a17a	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a17d	8a		txa				txa
.a17e	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a181	7a		ply				ply
.a182	fa		plx				plx
.a183	60		rts				rts
.a184					AllocateXABytes:
.a184	5a		phy				phy
.a185	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a188	84 36		sty $36				sty 	zTemp0
.a18a	5a		phy				phy
.a18b	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a18e	84 37		sty $37				sty 	zTemp0+1
.a190	5a		phy				phy
.a191	18		clc				clc 								; add to low memory pointer
.a192	6d 8c 04	adc $048c			adc 	lowMemPtr
.a195	8d 8c 04	sta $048c			sta 	lowMemPtr
.a198	8a		txa				txa
.a199	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a19c	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a19f	b0 2f		bcs $a1d0			bcs 	CISSMemory
.a1a1	20 c2 a1	jsr $a1c2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a1a4					_ClearMemory:
.a1a4	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a1a7	c5 36		cmp $36				cmp 	zTemp0
.a1a9	d0 07		bne $a1b2			bne 	_CMClearNext
.a1ab	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a1ae	c5 37		cmp $37				cmp 	zTemp0+1
.a1b0	f0 0c		beq $a1be			beq 	_CMExit
.a1b2					_CMClearNext:
.a1b2	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1b4	92 36		sta ($36)			sta 	(zTemp0)
.a1b6	e6 36		inc $36				inc 	zTemp0
.a1b8	d0 ea		bne $a1a4			bne 	_ClearMemory
.a1ba	e6 37		inc $37				inc		zTemp0+1
.a1bc	80 e6		bra $a1a4			bra 	_ClearMemory
.a1be					_CMExit:
.a1be	fa		plx				plx
.a1bf	68		pla				pla
.a1c0	7a		ply				ply
.a1c1	60		rts				rts
.a1c2					CheckIdentifierStringSpace:
.a1c2	48		pha				pha
.a1c3	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1c6	18		clc				clc
.a1c7	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1c9	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1cc	b0 02		bcs $a1d0			bcs 	CISSMemory
.a1ce	68		pla				pla
.a1cf	60		rts				rts
.a1d0					CISSMemory:
.a1d0	a9 06		lda #$06		lda	#6
.a1d2	4c f5 98	jmp $98f5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b0b8					AscUnary:
.b0b8	fa		plx				plx 								; restore stack pos
.b0b9	20 18 a4	jsr $a418			jsr 	EvaluateString 				; get a string
.b0bc	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b0be	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.b0c1	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b0c5					FracUnary:
.b0c5	fa		plx				plx 								; restore stack pos
.b0c6	20 0d a4	jsr $a40d			jsr 	EvaluateNumber 				; get a float or int
.b0c9	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.b0cc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0cf	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0d1	f0 04		beq $b0d7			beq 	_IUZero
.b0d3	20 95 af	jsr $af95			jsr 	FloatFractionalPart
.b0d6	60		rts				rts
.b0d7					_IUZero:
.b0d7	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.b0da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b0db					IntUnary:
.b0db	fa		plx				plx 								; restore stack pos
.b0dc	20 0d a4	jsr $a40d			jsr 	EvaluateNumber 				; get a float or int
.b0df	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.b0e2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b0e5	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b0e7	f0 03		beq $b0ec			beq 	_IUExit
.b0e9	20 f8 af	jsr $aff8			jsr 	FloatIntegerPart
.b0ec					_IUExit:
.b0ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b0ed					LenUnary:
.b0ed	fa		plx				plx 								; restore stack pos
.b0ee	20 18 a4	jsr $a418			jsr 	EvaluateString 				; get a string
.b0f1	5a		phy				phy
.b0f2	a0 00		ldy #$00			ldy 	#0 							; find length
.b0f4					_LenFind:
.b0f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.b0f6	f0 06		beq $b0fe			beq 	_LenExit
.b0f8	c8		iny				iny
.b0f9	d0 f9		bne $b0f4			bne 	_LenFind
.b0fb	4c db b2	jmp $b2db			jmp 	RangeError 					; string > 255
.b0fe					_LenExit:
.b0fe	98		tya				tya
.b0ff	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.b102	7a		ply				ply
.b103	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.b106	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a1d5					Unary_Not:
.a1d5	fa		plx				plx
.a1d6	20 30 a4	jsr $a430			jsr 	EvaluateInteger 			; get integer
.a1d9	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.a1dc	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; zero mantissa ?
.a1df	f0 04		beq $a1e5			beq 	_NotZero
.a1e1	20 cd a4	jsr $a4cd			jsr 	NSMSetZero
.a1e4	60		rts				rts
.a1e5					_NotZero:
.a1e5	4c 62 99	jmp $9962			jmp 	ReturnTrue
.a1e8					_UNBad:
.a1e8	4c e5 b2	jmp $b2e5			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a1eb					Unary_Random:
.a1eb	fa		plx				plx
.a1ec	20 6a a2	jsr $a26a			jsr 	Random32Bit 				; get a random number
.a1ef	20 4f a2	jsr $a24f			jsr 	URCopyToMantissa  			; put in mantissa
.a1f2	b1 30		lda ($30),y			lda 	(codePtr),y
.a1f4	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a1f6	f0 08		beq $a200			beq 	_URNoModulus
.a1f8	e8		inx				inx
.a1f9	20 45 a4	jsr $a445			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a1fc	ca		dex				dex
.a1fd	20 74 ad	jsr $ad74			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a200					_URNoModulus:
.a200	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a203	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a206	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.a209	60		rts				rts
.a20a					Unary_Rnd:
.a20a	fa		plx				plx
.a20b	20 0d a4	jsr $a40d			jsr 	EvaluateNumber 				; number to use.
.a20e	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 			; closing bracket
.a211	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a214	f0 2b		beq $a241			beq 	_URCopySeed
.a216	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a219	10 23		bpl $a23e			bpl 	_URDontSeed
.a21b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a21e	49 17		eor #$17			eor 	#$17
.a220	8d 88 04	sta $0488			sta 	RandomSeed+0
.a223	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a226	49 a5		eor #$a5			eor 	#$A5
.a228	8d 89 04	sta $0489			sta 	RandomSeed+1
.a22b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a22e	49 c2		eor #$c2			eor 	#$C2
.a230	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a233	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a236	49 9d		eor #$9d			eor 	#$9D
.a238	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a23b	20 6a a2	jsr $a26a			jsr 	Random32Bit
.a23e					_URDontSeed:
.a23e	20 6a a2	jsr $a26a			jsr 	Random32Bit 				; generate a number.
.a241					_URCopySeed:
.a241	20 4f a2	jsr $a24f			jsr 	URCopyToMantissa 			; copy into mantissa
.a244	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a246	8d 28 04	sta $0428			sta 	NSExponent
.a249	a9 08		lda #$08			lda 	#NSTFloat
.a24b	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a24e	60		rts				rts
.a24f					URCopyToMantissa:
.a24f	ad 88 04	lda $0488			lda 	RandomSeed+0
.a252	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a255	ad 89 04	lda $0489			lda 	RandomSeed+1
.a258	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a25b	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a25e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a261	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a264	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a266	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a269	60		rts				rts
.a26a					Random32Bit:
.a26a	5a		phy				phy
.a26b	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a26d	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a270	d0 03		bne $a275			bne 	_Random1
.a272	a8		tay				tay 								; if so do it 256 times
.a273	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a275					_Random1:
.a275	0a		asl a				asl 	a 							; LSFR RNG
.a276	2e 89 04	rol $0489			rol 	RandomSeed+1
.a279	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a27c	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a27f	90 02		bcc $a283			bcc 	_Random2
.a281	49 c5		eor #$c5			eor 	#$C5
.a283					_Random2:
.a283	88		dey				dey
.a284	d0 ef		bne $a275			bne 	_Random1
.a286	8d 88 04	sta $0488			sta 	RandomSeed+0
.a289	7a		ply				ply
.a28a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b107					SgnUnary:
.b107	fa		plx				plx 								; restore stack pos
.b108	20 0d a4	jsr $a40d			jsr 	EvaluateNumber 				; get a float or int
.b10b	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.b10e	20 fd a4	jsr $a4fd			jsr 	NSMIsZero 					; if zero
.b111	f0 10		beq $b123			beq 	_SGZero  					; return Int Zero
.b113	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b116	48		pha				pha
.b117	a9 01		lda #$01			lda 	#1 							; set to 1
.b119	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.b11c	68		pla				pla
.b11d	29 80		and #$80			and		#$80 						; copy the sign byte out
.b11f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b122	60		rts				rts
.b123	20 cd a4	jsr $a4cd	_SGZero:jsr 	NSMSetZero
.b126	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b127					ValUnary:
.b127	fa		plx				plx 								; restore stack pos
.b128	20 3d b1	jsr $b13d			jsr 	ValMainCode 				; do the main val() code
.b12b	b0 01		bcs $b12e			bcs 	_VUError 					; couldn't convert
.b12d	60		rts				rts
.b12e					_VUError:
.b12e	4c e0 b2	jmp $b2e0			jmp 	TypeError
.b131					IsValUnary:
.b131	fa		plx				plx 								; restore stack pos
.b132	20 3d b1	jsr $b13d			jsr 	ValMainCode 				; do the main val() code
.b135	b0 03		bcs $b13a			bcs 	_VUBad
.b137	4c 62 99	jmp $9962			jmp 	ReturnTrue
.b13a					_VUBad:
.b13a	4c 6e 99	jmp $996e			jmp 	ReturnFalse
.b13d					ValMainCode:
.b13d	20 18 a4	jsr $a418			jsr 	EvaluateString 				; get a string
.b140	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 			; check right bracket present
.b143	5a		phy				phy
.b144	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b146	f0 17		beq $b15f			beq 	_VMCFail2
.b148	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b14a	48		pha				pha 								; save first character
.b14b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b14d	d0 01		bne $b150			bne 	_VMCStart
.b14f	c8		iny				iny 								; skip over -
.b150					_VMCStart:
.b150	38		sec				sec 								; initialise first time round.
.b151					_VMCNext:
.b151	c8		iny				iny 								; pre-increment
.b152	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b154	f0 0c		beq $b162			beq 	_VMCSuccess 				; successful.
.b156	20 b1 9e	jsr $9eb1			jsr 	EncodeNumber 				; send it to the number-builder
.b159	90 03		bcc $b15e			bcc 	_VMCFail 					; if failed, give up.
.b15b	18		clc				clc 								; next time round, countinue
.b15c	80 f3		bra $b151			bra 	_VMCNext
.b15e					_VMCFail:
.b15e	68		pla				pla
.b15f					_VMCFail2:
.b15f	7a		ply				ply
.b160	38		sec				sec
.b161	60		rts				rts
.b162					_VMCSuccess:
.b162	a9 00		lda #$00			lda 	#0 							; construct final
.b164	20 b1 9e	jsr $9eb1			jsr 	EncodeNumber
.b167	68		pla				pla
.b168	c9 2d		cmp #$2d			cmp 	#"-"
.b16a	d0 03		bne $b16f			bne 	_VMCNotNegative
.b16c	20 79 a4	jsr $a479			jsr		NSMNegate
.b16f					_VMCNotNegative:
.b16f	7a		ply				ply
.b170	18		clc				clc
.b171	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a28b					ChrUnary:
.a28b	fa		plx				plx 								; restore stack pos
.a28c	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger			; get value
.a28f	48		pha				pha
.a290	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.a293	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a295	20 59 b6	jsr $b659			jsr 	StringTempAllocate
.a298	68		pla				pla 								; write number to it
.a299	20 97 b6	jsr $b697			jsr 	StringTempWrite
.a29c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a29d					SpcUnary:
.a29d	fa		plx				plx 								; restore stack pos
.a29e	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger			; get value
.a2a1	5a		phy				phy
.a2a2	48		pha				pha 								; save count
.a2a3	20 59 b6	jsr $b659			jsr 	StringTempAllocate
.a2a6	7a		ply				ply 								; to do count in Y
.a2a7					_SpcLoop:
.a2a7	c0 00		cpy #$00			cpy 	#0
.a2a9	f0 08		beq $a2b3			beq 	_SpcExit
.a2ab	a9 20		lda #$20			lda 	#32
.a2ad	20 97 b6	jsr $b697			jsr 	StringTempWrite
.a2b0	88		dey				dey
.a2b1	80 f4		bra $a2a7			bra 	_SPCLoop
.a2b3					_SpcExit:
.a2b3	7a		ply				ply
.a2b4	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket
.a2b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a2b8					Unary_Str:
.a2b8	fa		plx				plx
.a2b9	20 0d a4	jsr $a40d			jsr 	EvaluateNumber  			; get number
.a2bc	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 			; closing bracket
.a2bf	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a2c1	20 da a2	jsr $a2da			jsr 	ConvertNumberToString 		; do the conversion.
.a2c4	a9 21		lda #$21			lda		#33 						; create buffer
.a2c6	20 59 b6	jsr $b659			jsr 	StringTempAllocate 			; allocate memory
.a2c9	da		phx				phx
.a2ca	a2 00		ldx #$00			ldx 	#0
.a2cc					_USCopy:
.a2cc	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2cf	20 97 b6	jsr $b697			jsr 	StringTempWrite
.a2d2	e8		inx				inx
.a2d3	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a2d6	d0 f4		bne $a2cc			bne 	_USCopy
.a2d8	fa		plx				plx
.a2d9	60		rts				rts
.a2da					ConvertNumberToString:
.a2da	5a		phy				phy 								; save code position
.a2db	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a2de	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a2e1	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a2e4	10 0a		bpl $a2f0			bpl 	_CNTSNotNegative
.a2e6	29 7f		and #$7f			and 	#$7F 						; make +ve
.a2e8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2eb	a9 2d		lda #$2d			lda 	#"-"
.a2ed	20 56 a3	jsr $a356			jsr 	WriteDecimalBuffer
.a2f0					_CNTSNotNegative:
.a2f0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a2f3	f0 15		beq $a30a			beq 	_CNTSNotFloat
.a2f5	e8		inx				inx 								; round up
.a2f6	a9 01		lda #$01			lda 	#1
.a2f8	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.a2fb	ca		dex				dex
.a2fc	bd 28 04	lda $0428,x			lda		NSExponent,x
.a2ff	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a302	a9 08		lda #$08			lda 	#NSTFloat
.a304	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a307	20 b7 ae	jsr $aeb7			jsr 	FloatAdd
.a30a					_CNTSNotFloat:
.a30a	20 38 a3	jsr $a338			jsr 	MakePlusTwoString
.a30d	20 95 af	jsr $af95			jsr 	FloatFractionalPart 		; get the fractional part
.a310	20 59 b0	jsr $b059			jsr 	NSNormalise					; normalise , exit if zero
.a313	f0 21		beq $a336			beq 	_CNTSExit
.a315	a9 2e		lda #$2e			lda 	#"."
.a317	20 56 a3	jsr $a356			jsr 	WriteDecimalBuffer 			; write decimal place
.a31a					_CNTSDecimal:
.a31a	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a31d	30 17		bmi $a336			bmi 	_CNTSExit
.a31f	e8		inx				inx 								; x 10.0
.a320	a9 0a		lda #$0a			lda 	#10
.a322	20 cf a4	jsr $a4cf			jsr 	NSMSetByte
.a325	a9 08		lda #$08			lda 	#NSTFloat
.a327	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a32a	ca		dex				dex
.a32b	20 22 b0	jsr $b022			jsr 	FloatMultiply
.a32e	20 38 a3	jsr $a338			jsr 	MakePlusTwoString
.a331	20 95 af	jsr $af95			jsr 	FloatFractionalPart 		; get the fractional part
.a334	80 e4		bra $a31a			bra 	_CNTSDecimal 				; keep going.
.a336					_CNTSExit:
.a336	7a		ply				ply
.a337	60		rts				rts
.a338					MakePlusTwoString:
.a338	da		phx				phx
.a339	20 a4 a4	jsr $a4a4			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a33c	e8		inx				inx 								; access it
.a33d	e8		inx				inx
.a33e	20 f8 af	jsr $aff8			jsr 	FloatIntegerPart 			; make it an integer
.a341	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a343	20 61 ae	jsr $ae61			jsr 	ConvertInt32
.a346	a2 00		ldx #$00			ldx	 	#0
.a348					_MPTSCopy:
.a348	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a34b	20 56 a3	jsr $a356			jsr 	WriteDecimalBuffer
.a34e	e8		inx				inx
.a34f	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a352	d0 f4		bne $a348			bne 	_MPTSCopy
.a354	fa		plx				plx
.a355	60		rts				rts
.a356					WriteDecimalBuffer:
.a356	da		phx				phx
.a357	ae 95 04	ldx $0495			ldx 	dbOffset
.a35a	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a35d	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a360	ee 95 04	inc $0495			inc 	dbOffset
.a363	fa		plx				plx
.a364	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a365					Unary_Left:
.a365	fa		plx				plx
.a366	18		clc				clc 								; only one parameter
.a367	20 dc a3	jsr $a3dc			jsr 	SubstringInitial 			; set up.
.a36a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a36d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a370	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a373	80 2c		bra $a3a1			bra 	SubstringMain
.a375					Unary_Right:
.a375	fa		plx				plx
.a376	18		clc				clc 								; only one parameter
.a377	20 dc a3	jsr $a3dc			jsr 	SubstringInitial 			; set up.
.a37a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a37d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a380	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a383	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a386	b0 02		bcs $a38a			bcs 	_URNotUnderflow
.a388	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a38a					_URNotUnderFlow:
.a38a	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a38d	80 12		bra $a3a1			bra 	SubStringMain
.a38f					Unary_Mid:
.a38f	fa		plx				plx
.a390	38		sec				sec 								; two parameters
.a391	20 dc a3	jsr $a3dc			jsr 	SubstringInitial 			; set up.
.a394	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a397	f0 05		beq $a39e			beq 	_UMError
.a399	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a39c	80 03		bra $a3a1			bra 	SubStringMain
.a39e					_UMError:
.a39e	4c e5 b2	jmp $b2e5			jmp 	ArgumentError
.a3a1					SubStringMain:
.a3a1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a3a4	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a3a7	b0 2d		bcs $a3d6			bcs 	_SSMNull 					; if so, return an empty string.
.a3a9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a3ac	f0 28		beq $a3d6			beq 	_SSMNull 					; return empty string.
.a3ae	18		clc				clc 								; add the offset +1 to the address and
.a3af	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a3b2	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a3b5	85 36		sta $36				sta 	zTemp0
.a3b7	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a3ba	69 00		adc #$00			adc 	#0
.a3bc	85 37		sta $37				sta 	zTemp0+1
.a3be					_SSMNoCarry:
.a3be	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a3c1	20 59 b6	jsr $b659			jsr 	StringTempAllocate 			; allocate that many characters
.a3c4	5a		phy				phy 								; save Y
.a3c5	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a3c7					_SSMCopy:
.a3c7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a3c9	f0 09		beq $a3d4			beq 	_SSMEString 				; no more to copy
.a3cb	20 97 b6	jsr $b697			jsr 	StringTempWrite 			; and write it out.
.a3ce	c8		iny				iny
.a3cf	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a3d2	d0 f3		bne $a3c7			bne 	_SSMCopy
.a3d4					_SSMEString:
.a3d4	7a		ply				ply
.a3d5					_SSMExit:
.a3d5	60		rts				rts
.a3d6					_SSMNull:
.a3d6	a9 00		lda #$00			lda 	#0
.a3d8	20 59 b6	jsr $b659			jsr 	StringTempAllocate
.a3db	60		rts				rts
.a3dc					SubstringInitial:
.a3dc	da		phx				phx 								; save initial stack position
.a3dd	08		php				php 								; save carry on stack indicating 2 parameters
.a3de	20 18 a4	jsr $a418			jsr 	EvaluateString 				; get a string
.a3e1	5a		phy				phy 								; calculate length to exponent.
.a3e2	a0 ff		ldy #$ff			ldy 	#$FF
.a3e4					_SIFindLength:
.a3e4	c8		iny				iny
.a3e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3e7	d0 fb		bne $a3e4			bne 	_SIFindLength
.a3e9	98		tya				tya
.a3ea	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3ed	7a		ply				ply
.a3ee	e8		inx				inx
.a3ef	20 f8 ac	jsr $acf8			jsr 	CheckComma 					; comma next
.a3f2	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get next parameter
.a3f5	28		plp				plp 								; is it the last parameter ?
.a3f6	90 07		bcc $a3ff			bcc 	_SSIExit 					; if so, exit.
.a3f8	e8		inx				inx
.a3f9	20 f8 ac	jsr $acf8			jsr 	CheckComma 					; comma next
.a3fc	20 65 a4	jsr $a465			jsr 	Evaluate8BitInteger 		; get last parameter
.a3ff					_SSIExit:
.a3ff	fa		plx				plx
.a400	20 f0 ac	jsr $acf0			jsr 	CheckRightBracket 			; check closing bracket
.a403	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a404					EvaluateValue:
.a404	48		pha				pha
.a405	20 fe 9c	jsr $9cfe			jsr		EvaluateExpression 			; expression
.a408	20 13 9e	jsr $9e13			jsr 	Dereference					; derefernce it
.a40b	68		pla				pla
.a40c	60		rts				rts
.a40d					EvaluateNumber:
.a40d	20 04 a4	jsr $a404			jsr 	EvaluateValue 				; get a value
.a410	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a413	29 10		and #$10			and 	#NSBIsString
.a415	d0 16		bne $a42d			bne 	HelperTypeError
.a417	60		rts				rts
.a418					EvaluateString:
.a418	20 04 a4	jsr $a404			jsr 	EvaluateValue 				; get a value
.a41b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a41e	29 10		and #$10			and 	#NSBIsString
.a420	f0 0b		beq $a42d			beq 	HelperTypeError
.a422					CopyAddressToTemp0:
.a422	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a425	85 36		sta $36				sta 	zTemp0
.a427	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a42a	85 37		sta $37				sta 	zTemp0+1
.a42c	60		rts				rts
.a42d					HelperTypeError:
.a42d	4c e0 b2	jmp $b2e0			jmp 	TypeError
.a430					EvaluateInteger:
.a430	20 0d a4	jsr $a40d			jsr 	EvaluateNumber
.a433	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a436	d0 0a		bne $a442			bne 	HelperValueError 			; if not, it's a float.
.a438	60		rts				rts
.a439					EvaluateUnsignedInteger:
.a439	20 30 a4	jsr $a430			jsr 	EvaluateInteger 			; check integer is +ve
.a43c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a43f	30 01		bmi $a442			bmi 	HelperValueError
.a441	60		rts				rts
.a442					HelperValueError:
.a442	4c e5 b2	jmp $b2e5			jmp 	ArgumentError
.a445					Evaluate16BitInteger:
.a445	20 39 a4	jsr $a439			jsr	 	EvaluateUnsignedInteger		; get integer
.a448	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a44b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a44e	d0 f2		bne $a442			bne 	HelperValueError
.a450	60		rts				rts
.a451					Evaluate16BitIntegerSigned:
.a451	20 30 a4	jsr $a430			jsr	 	EvaluateInteger				; get integer
.a454	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a457	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a45a	d0 e6		bne $a442			bne 	HelperValueError
.a45c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a45f	10 03		bpl $a464			bpl 	_EISNotSigned
.a461	20 82 a4	jsr $a482			jsr 	NSMNegateMantissa
.a464					_EISNotSigned:
.a464	60		rts				rts
.a465					Evaluate8BitInteger:
.a465	20 39 a4	jsr $a439			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a468	d0 d8		bne $a442			bne 	HelperValueError
.a46a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a46d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a470	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a473	d0 cd		bne $a442			bne 	HelperValueError
.a475	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a478	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b172					Multiply8x8:
.b172	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b173	85 36		sta $36			  	sta 	zTemp0
.b175	86 37		stx $37				stx 	zTemp0+1
.b177	a9 00		lda #$00			lda 	#0
.b179	a2 08		ldx #$08			ldx 	#8
.b17b					_M88Loop:
.b17b	90 03		bcc $b180			bcc 	_M88NoAdd
.b17d	18		clc				clc
.b17e	65 37		adc $37				adc 	zTemp0+1
.b180					_M88NoAdd:
.b180	6a		ror a				ror 	a
.b181	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b183	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b184	d0 f5		bne $b17b			bne 	_M88Loop
.b186	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b188	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a479					NSMNegate:
.a479	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a47c	49 80		eor #$80			eor 	#NSBIsNegative
.a47e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a481	60		rts				rts
.a482					NSMNegateMantissa:
.a482	38		sec				sec
.a483	a9 00		lda #$00			lda 	#0
.a485	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a488	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a48b	a9 00		lda #$00			lda 	#0
.a48d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a490	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a493	a9 00		lda #$00			lda 	#0
.a495	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a498	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a49b	a9 00		lda #$00			lda 	#0
.a49d	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a4a0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4a3	60		rts				rts
.a4a4					NSMShiftUpTwo:
.a4a4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4a7	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4aa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4ad	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a4b0	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a4b3	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a4b6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a4b9	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a4bc	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a4bf	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a4c2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4c5	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a4c8	60		rts				rts
.a4c9					NSMSetZeroMantissaOnly:
.a4c9	a9 00		lda #$00			lda 	#0
.a4cb	80 08		bra $a4d5			bra 	NSMSetMantissa
.a4cd					NSMSetZero:
.a4cd	a9 00		lda #$00			lda 	#0
.a4cf					NSMSetByte:
.a4cf	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a4d2	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a4d5					NSMSetMantissa:
.a4d5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a4d8	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a4db	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a4de	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a4e1	60		rts				rts
.a4e2					NSMShiftLeft:
.a4e2	18		clc				clc
.a4e3					NSMRotateLeft:
.a4e3	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a4e6	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a4e9	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a4ec	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a4ef	60		rts				rts
.a4f0					NSMShiftRight:
.a4f0	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a4f3	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a4f6	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a4f9	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a4fc	60		rts				rts
.a4fd					NSMIsZero:
.a4fd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a500	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a503	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a506	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a509	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b189					Assemble_ora:
.b189	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b18c	01					.byte $01
.b18d					Assemble_and:
.b18d	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b190	21					.byte $21
.b191					Assemble_eor:
.b191	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b194	41					.byte $41
.b195					Assemble_adc:
.b195	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b198	61					.byte $61
.b199					Assemble_sta:
.b199	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b19c	81					.byte $81
.b19d					Assemble_lda:
.b19d	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b1a0	a1					.byte $a1
.b1a1					Assemble_cmp:
.b1a1	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b1a4	c1					.byte $c1
.b1a5					Assemble_sbc:
.b1a5	20 ca 88	jsr $88ca		jsr	AssembleGroup1
>b1a8	e1					.byte $e1
.b1a9					Assemble_asl:
.b1a9	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1ac	02					.byte $02
>b1ad	75					.byte $75
.b1ae					Assemble_rol:
.b1ae	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1b1	22					.byte $22
>b1b2	75					.byte $75
.b1b3					Assemble_lsr:
.b1b3	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1b6	42					.byte $42
>b1b7	75					.byte $75
.b1b8					Assemble_ror:
.b1b8	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1bb	62					.byte $62
>b1bc	75					.byte $75
.b1bd					Assemble_stx:
.b1bd	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1c0	82					.byte $82
>b1c1	50					.byte $50
.b1c2					Assemble_ldx:
.b1c2	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1c5	a2					.byte $a2
>b1c6	d0					.byte $d0
.b1c7					Assemble_dec:
.b1c7	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1ca	c2					.byte $c2
>b1cb	55					.byte $55
.b1cc					Assemble_inc:
.b1cc	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1cf	e2					.byte $e2
>b1d0	55					.byte $55
.b1d1					Assemble_stz:
.b1d1	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1d4	60					.byte $60
>b1d5	44					.byte $44
.b1d6					Assemble_bit:
.b1d6	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1d9	20					.byte $20
>b1da	55					.byte $55
.b1db					Assemble_sty:
.b1db	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1de	80					.byte $80
>b1df	54					.byte $54
.b1e0					Assemble_ldy:
.b1e0	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1e3	a0					.byte $a0
>b1e4	d5					.byte $d5
.b1e5					Assemble_cpy:
.b1e5	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1e8	c0					.byte $c0
>b1e9	d4					.byte $d4
.b1ea					Assemble_cpx:
.b1ea	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1ed	e0					.byte $e0
>b1ee	d0					.byte $d0
.b1ef					Assemble_tsb:
.b1ef	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1f2	00					.byte $00
>b1f3	50					.byte $50
.b1f4					Assemble_trb:
.b1f4	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1f7	10					.byte $10
>b1f8	50					.byte $50
.b1f9					Assemble_jsr:
.b1f9	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b1fc	14					.byte $14
>b1fd	10					.byte $10
.b1fe					Assemble_jmp:
.b1fe	20 d1 88	jsr $88d1		jsr	AssembleGroup2
>b201	40					.byte $40
>b202	10					.byte $10
.b203					Assemble_bpl:
.b203	20 22 89	jsr $8922		jsr	AssembleGroup3
>b206	10					.byte $10
.b207					Assemble_bmi:
.b207	20 22 89	jsr $8922		jsr	AssembleGroup3
>b20a	30					.byte $30
.b20b					Assemble_bvc:
.b20b	20 22 89	jsr $8922		jsr	AssembleGroup3
>b20e	50					.byte $50
.b20f					Assemble_bvs:
.b20f	20 22 89	jsr $8922		jsr	AssembleGroup3
>b212	70					.byte $70
.b213					Assemble_bcc:
.b213	20 22 89	jsr $8922		jsr	AssembleGroup3
>b216	90					.byte $90
.b217					Assemble_bcs:
.b217	20 22 89	jsr $8922		jsr	AssembleGroup3
>b21a	b0					.byte $b0
.b21b					Assemble_bne:
.b21b	20 22 89	jsr $8922		jsr	AssembleGroup3
>b21e	d0					.byte $d0
.b21f					Assemble_beq:
.b21f	20 22 89	jsr $8922		jsr	AssembleGroup3
>b222	f0					.byte $f0
.b223					Assemble_bra:
.b223	20 22 89	jsr $8922		jsr	AssembleGroup3
>b226	80					.byte $80
.b227					Assemble_brk:
.b227	20 58 89	jsr $8958		jsr	AssembleGroup4
>b22a	00					.byte $00
.b22b					Assemble_php:
.b22b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b22e	08					.byte $08
.b22f					Assemble_clc:
.b22f	20 58 89	jsr $8958		jsr	AssembleGroup4
>b232	18					.byte $18
.b233					Assemble_plp:
.b233	20 58 89	jsr $8958		jsr	AssembleGroup4
>b236	28					.byte $28
.b237					Assemble_sec:
.b237	20 58 89	jsr $8958		jsr	AssembleGroup4
>b23a	38					.byte $38
.b23b					Assemble_rti:
.b23b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b23e	40					.byte $40
.b23f					Assemble_pha:
.b23f	20 58 89	jsr $8958		jsr	AssembleGroup4
>b242	48					.byte $48
.b243					Assemble_cli:
.b243	20 58 89	jsr $8958		jsr	AssembleGroup4
>b246	58					.byte $58
.b247					Assemble_phy:
.b247	20 58 89	jsr $8958		jsr	AssembleGroup4
>b24a	5a					.byte $5a
.b24b					Assemble_rts:
.b24b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b24e	60					.byte $60
.b24f					Assemble_pla:
.b24f	20 58 89	jsr $8958		jsr	AssembleGroup4
>b252	68					.byte $68
.b253					Assemble_sei:
.b253	20 58 89	jsr $8958		jsr	AssembleGroup4
>b256	78					.byte $78
.b257					Assemble_ply:
.b257	20 58 89	jsr $8958		jsr	AssembleGroup4
>b25a	7a					.byte $7a
.b25b					Assemble_dey:
.b25b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b25e	88					.byte $88
.b25f					Assemble_txa:
.b25f	20 58 89	jsr $8958		jsr	AssembleGroup4
>b262	8a					.byte $8a
.b263					Assemble_tya:
.b263	20 58 89	jsr $8958		jsr	AssembleGroup4
>b266	98					.byte $98
.b267					Assemble_txs:
.b267	20 58 89	jsr $8958		jsr	AssembleGroup4
>b26a	9a					.byte $9a
.b26b					Assemble_tay:
.b26b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b26e	a8					.byte $a8
.b26f					Assemble_tax:
.b26f	20 58 89	jsr $8958		jsr	AssembleGroup4
>b272	aa					.byte $aa
.b273					Assemble_clv:
.b273	20 58 89	jsr $8958		jsr	AssembleGroup4
>b276	b8					.byte $b8
.b277					Assemble_tsx:
.b277	20 58 89	jsr $8958		jsr	AssembleGroup4
>b27a	ba					.byte $ba
.b27b					Assemble_iny:
.b27b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b27e	c8					.byte $c8
.b27f					Assemble_dex:
.b27f	20 58 89	jsr $8958		jsr	AssembleGroup4
>b282	ca					.byte $ca
.b283					Assemble_cld:
.b283	20 58 89	jsr $8958		jsr	AssembleGroup4
>b286	d8					.byte $d8
.b287					Assemble_phx:
.b287	20 58 89	jsr $8958		jsr	AssembleGroup4
>b28a	da					.byte $da
.b28b					Assemble_stp:
.b28b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b28e	db					.byte $db
.b28f					Assemble_inx:
.b28f	20 58 89	jsr $8958		jsr	AssembleGroup4
>b292	e8					.byte $e8
.b293					Assemble_nop:
.b293	20 58 89	jsr $8958		jsr	AssembleGroup4
>b296	ea					.byte $ea
.b297					Assemble_sed:
.b297	20 58 89	jsr $8958		jsr	AssembleGroup4
>b29a	f8					.byte $f8
.b29b					Assemble_plx:
.b29b	20 58 89	jsr $8958		jsr	AssembleGroup4
>b29e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b29f					DecimalScalarTable:
>b29f	66 66 66 66				.dword $66666666 ; 0.1
>b2a3	de					.byte $de
>b2a4	1f 85 eb 51				.dword $51eb851f ; 0.01
>b2a8	db					.byte $db
>b2a9	4c 37 89 41				.dword $4189374c ; 0.001
>b2ad	d8					.byte $d8
>b2ae	ac 8b db 68				.dword $68db8bac ; 0.0001
>b2b2	d4					.byte $d4
>b2b3	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b2b7	d1					.byte $d1
>b2b8	83 de 1b 43				.dword $431bde83 ; 1e-06
>b2bc	ce					.byte $ce
>b2bd	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b2c1	ca					.byte $ca
>b2c2	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b2c6	c7					.byte $c7
>b2c7	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b2cb	c4					.byte $c4
>b2cc	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b2d0	c0					.byte $c0
>b2d1	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b2d5	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b2d6					SyntaxError:
.b2d6	a9 02		lda #$02		lda	#2
.b2d8	4c f5 98	jmp $98f5		jmp	ErrorHandler
.b2db					RangeError:
.b2db	a9 04		lda #$04		lda	#4
.b2dd	4c f5 98	jmp $98f5		jmp	ErrorHandler
.b2e0					TypeError:
.b2e0	a9 05		lda #$05		lda	#5
.b2e2	4c f5 98	jmp $98f5		jmp	ErrorHandler
.b2e5					ArgumentError:
.b2e5	a9 07		lda #$07		lda	#7
.b2e7	4c f5 98	jmp $98f5		jmp	ErrorHandler
.b2ea					NotDoneError:
.b2ea	a9 0c		lda #$0c		lda	#12
.b2ec	4c f5 98	jmp $98f5		jmp	ErrorHandler
.b2ef					ErrorText:
>b2ef	42 72 65 61 6b 00			.text	"Break",0
>b2f5	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b2fd	72 72 6f 72 00
>b302	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b30a	20 62 79 20 7a 65 72 6f 00
>b313	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b31b	61 6e 67 65 00
>b320	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b328	6d 61 74 63 68 00
>b32e	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b336	65 6d 6f 72 79 00
>b33c	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b344	61 72 67 75 6d 65 6e 74 00
>b34d	53 74 6f 70 00				.text	"Stop",0
>b352	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b35a	6f 6f 20 6c 6f 6e 67 00
>b362	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b36a	6e 20 66 61 69 6c 65 64 00
>b373	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b37b	61 74 61 00
>b37f	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b387	65 6e 74 65 64 00
>b38d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b395	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b3a1	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b3a9	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b3b6	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b3be	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b3cb	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b3d3	68 6f 75 74 20 57 68 69 6c 65 00
>b3de	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b3e6	68 6f 75 74 20 46 6f 72 00
>b3ef	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b3f7	61 63 6b 20 66 75 6c 6c 00
>b400	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b408	75 63 74 75 72 65 00
>b40f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b417	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b424	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b42c	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b43a	41 72 72 61 79 20 73 69			.text	"Array size",0
>b442	7a 65 00
>b445	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b44d	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b455	42 75 69 6c 74 20 54 68			.text "Built Thursday 13-Oct-2022. Build 2064."
>b45d	75 72 73 64 61 79 20 31 33 2d 4f 63 74 2d 32 30
>b46d	32 32 2e 20 42 75 69 6c 64 20 32 30 36 34 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b47c					EXTInitialise:
.b47c	64 01		stz $01				stz 	1 							; Access I/O
.b47e	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b481	9c 08 d0	stz $d008			stz 	$D008
.b484	9c 09 d0	stz $d009			stz 	$D009
.b487	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b489	8d 58 d6	sta $d658			sta 	$D658
.b48c	60		rts				rts
.b48d					EXTClearScreen:
.b48d	4c ea ff	jmp $ffea			jmp 	$FFEA
.b490					EXTPrintCharacter:
.b490	48		pha				pha
.b491	da		phx				phx
.b492	5a		phy				phy
.b493	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b496	7a		ply				ply
.b497	fa		plx				plx
.b498	68		pla				pla
.b499	60		rts				rts
.b49a					EXTInputSingleCharacter:
.b49a	da		phx				phx
.b49b	5a		phy				phy
.b49c					_EISCWait:
.b49c	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b49f	c9 00		cmp #$00			cmp 	#0
.b4a1	f0 f9		beq $b49c			beq 	_EISCWait
.b4a3	7a		ply				ply
.b4a4	fa		plx				plx
.b4a5	60		rts				rts
.b4a6					EXTInputLine:
.b4a6	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b4a8					_ILLoop:
.b4a8	da		phx				phx 								; read character in
.b4a9	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b4ac	fa		plx				plx
.b4ad	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b4af	f0 12		beq $b4c3			beq 	_ILBackspace
.b4b1	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b4b3	f0 15		beq $b4ca			beq 	_ILExit
.b4b5	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b4b7	90 ef		bcc $b4a8			bcc 	_ILLoop
.b4b9	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b4bb	f0 eb		beq $b4a8			beq 	_ILLoop
.b4bd	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b4c0	e8		inx				inx
.b4c1	80 e5		bra $b4a8			bra 	_ILLoop
.b4c3					_ILBackspace:
.b4c3	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b4c5	f0 e1		beq $b4a8			beq 	_ILLoop
.b4c7	ca		dex				dex 								; back one.
.b4c8	80 de		bra $b4a8			bra 	_ILLoop
.b4ca					_ILExit:
.b4ca	20 90 b4	jsr $b490			jsr 	EXTPrintCharacter
.b4cd	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b4d0	60		rts				rts
.b4d1					EXTBreakCheck:
.b4d1	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b4d4					EXTReadController:
.b4d4	da		phx				phx
.b4d5	a2 00		ldx #$00			ldx 	#0
.b4d7	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b4d9	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4dc	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b4de	f0 04		beq $b4e4			beq 	_NoSet1
.b4e0	8a		txa				txa
.b4e1	09 01		ora #$01			ora 	#1
.b4e3	aa		tax				tax
.b4e4					_NoSet1:
.b4e4	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b4e6	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4e9	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b4eb	f0 04		beq $b4f1			beq 	_NoSet1
.b4ed	8a		txa				txa
.b4ee	09 02		ora #$02			ora 	#2
.b4f0	aa		tax				tax
.b4f1					_NoSet1:
.b4f1	a9 06		lda #$06			lda 	#(($32) >> 3)
.b4f3	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b4f6	29 04		and #$04			and 	#($01 << (($32) & 7))
.b4f8	f0 04		beq $b4fe			beq 	_NoSet1
.b4fa	8a		txa				txa
.b4fb	09 04		ora #$04			ora 	#4
.b4fd	aa		tax				tax
.b4fe					_NoSet1:
.b4fe	a9 04		lda #$04			lda 	#(($25) >> 3)
.b500	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b503	29 20		and #$20			and 	#($01 << (($25) & 7))
.b505	f0 04		beq $b50b			beq 	_NoSet1
.b507	8a		txa				txa
.b508	09 08		ora #$08			ora 	#8
.b50a	aa		tax				tax
.b50b					_NoSet1:
.b50b	a9 04		lda #$04			lda 	#(($26) >> 3)
.b50d	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b510	29 40		and #$40			and 	#($01 << (($26) & 7))
.b512	f0 04		beq $b518			beq 	_NoSet1
.b514	8a		txa				txa
.b515	09 10		ora #$10			ora 	#16
.b517	aa		tax				tax
.b518					_NoSet1:
.b518	8a		txa				txa
.b519	fa		plx				plx
.b51a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b51b					MemoryDeleteLine:
.b51b	20 3a b5	jsr $b53a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b51e	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b520	a8		tay				tay
.b521					_MDDLLoop:
.b521	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b523	92 30		sta ($30)			sta 	(codePtr)
.b525	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b527	c5 3a		cmp $3a				cmp 	zTemp2
.b529	d0 07		bne $b532			bne 	_MDLDLNext
.b52b	a5 31		lda $31				lda 	codePtr+1
.b52d	c5 3b		cmp $3b				cmp 	zTemp2+1
.b52f	d0 01		bne $b532			bne 	_MDLDLNext
.b531					_MDDLExit:
.b531	60		rts				rts
.b532					_MDLDLNext:
.b532	e6 30		inc $30				inc 	codePtr						; next byte
.b534	d0 eb		bne $b521			bne 	_MDDLLoop
.b536	e6 31		inc $31				inc 	codePtr+1
.b538	80 e7		bra $b521			bra 	_MDDLLoop
.b53a					IMemoryFindEnd:
.b53a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b53c	85 3a		sta $3a				sta 	0+zTemp2
.b53e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b540	85 3b		sta $3b				sta 	1+zTemp2
.b542					_MDLFELoop:
.b542	b2 3a		lda ($3a)			lda 	(zTemp2)
.b544	f0 0b		beq $b551			beq 	_MDLFEExit
.b546	18		clc				clc
.b547	65 3a		adc $3a				adc 	zTemp2
.b549	85 3a		sta $3a				sta 	zTemp2
.b54b	90 f5		bcc $b542			bcc 	_MDLFELoop
.b54d	e6 3b		inc $3b				inc 	zTemp2+1
.b54f	80 f1		bra $b542			bra 	_MDLFELoop
.b551					_MDLFEExit:
.b551	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b552					MemoryInsertLine:
.b552	08		php				php
.b553	20 3a b5	jsr $b53a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b556	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b558	1a		inc a				inc 	a
.b559	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b55b	b0 36		bcs $b593			bcs 	_MDLIError
.b55d	28		plp				plp
.b55e	90 08		bcc $b568			bcc 	_MDLIFound
.b560	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b562	85 30		sta $30				sta 	codePtr
.b564	a5 3b		lda $3b				lda 	zTemp2+1
.b566	85 31		sta $31				sta 	codePtr+1
.b568					_MDLIFound:
.b568	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b56b	a8		tay				tay
.b56c					_MDLIInsert:
.b56c	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b56e	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b570	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b572	c5 3a		cmp $3a				cmp 	zTemp2
.b574	d0 06		bne $b57c			bne 	_MDLINext
.b576	a5 31		lda $31				lda 	codePtr+1
.b578	c5 3b		cmp $3b				cmp 	zTemp2+1
.b57a	f0 0a		beq $b586			beq 	_MDLIHaveSpace
.b57c					_MDLINext:
.b57c	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b57e	d0 02		bne $b582			bne 	_MDLINoBorrow
.b580	c6 3b		dec $3b				dec 	zTemp2+1
.b582					_MDLINoBorrow:
.b582	c6 3a		dec $3a				dec 	zTemp2
.b584	80 e6		bra $b56c			bra 	_MDLIInsert
.b586					_MDLIHaveSpace:
.b586	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b589	88		dey				dey 								; from offset-1 to 0
.b58a					_MDLICopy:
.b58a	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b58d	91 30		sta ($30),y			sta 	(codePtr),y
.b58f	88		dey				dey
.b590	10 f8		bpl $b58a			bpl 	_MDLICopy
.b592	60		rts				rts
.b593					_MDLIError:
.b593	a9 06		lda #$06		lda	#6
.b595	4c f5 98	jmp $98f5		jmp	ErrorHandler
.b598					MDLAppendLine:
.b598	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b59a	85 36		sta $36				sta 	zTemp0
.b59c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b59e	85 38		sta $38				sta 	0+zTemp1
.b5a0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5a2	85 39		sta $39				sta 	1+zTemp1
.b5a4	b2 38		lda ($38)			lda 	(zTemp1)
.b5a6	d0 0a		bne $b5b2			bne 	_MDLANoInitialise
.b5a8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5aa	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b5ad	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5af	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b5b2					_MDLANoInitialise:
.b5b2	18		clc				clc
.b5b3	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b5b6	85 38		sta $38				sta 	zTemp1
.b5b8	72 36		adc ($36)			adc 	(zTemp0)
.b5ba	8d 6b 06	sta $066b			sta 	AppendPointer
.b5bd	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b5c0	85 39		sta $39				sta 	zTemp1+1
.b5c2	69 00		adc #$00			adc 	#0
.b5c4	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b5c7	a0 00		ldy #$00			ldy 	#0
.b5c9					_MDLACopy:
.b5c9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b5cb	91 38		sta ($38),y			sta 	(zTemp1),y
.b5cd	c8		iny				iny
.b5ce	98		tya				tya
.b5cf	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b5d1	d0 f6		bne $b5c9			bne 	_MDLACopy
.b5d3	a9 00		lda #$00			lda 	#0 							; end of program.
.b5d5	91 38		sta ($38),y			sta 	(zTemp1),y
.b5d7	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a50a					MemoryNew:
.a50a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a50c	85 30		sta $30				sta 	codePtr
.a50e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a510	85 31		sta $31				sta 	codePtr+1
.a512	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a514	92 30		sta ($30)			sta 	(codePtr)
.a516	60		rts				rts
.a517					MemoryInline:
.a517	98		tya				tya 								; put address into stack,x
.a518	18		clc				clc
.a519	65 30		adc $30				adc 	codePtr
.a51b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a51e	a5 31		lda $31				lda 	codePtr+1
.a520	69 00		adc #$00			adc 	#0
.a522	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a525	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a528	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a52b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a52c					MemorySearch:
.a52c	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a52e	86 37		stx $37				stx 	zTemp0+1
.a530	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a532	85 30		sta $30				sta 	codePtr
.a534	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a536	85 31		sta $31				sta 	codePtr+1
.a538					_MTAXLoop:
.a538	b2 30		lda ($30)			lda 	(codePtr)
.a53a	18		clc				clc
.a53b	f0 21		beq $a55e			beq 	_MTAXExit 					; reached end, exit with CC.
.a53d	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a53f	b1 30		lda ($30),y			lda 	(codePtr),y
.a541	38		sec				sec
.a542	e5 36		sbc $36				sbc 	zTemp0
.a544	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a546	c8		iny				iny 								; do the MSB
.a547	b1 30		lda ($30),y			lda 	(codePtr),y
.a549	e5 37		sbc $37				sbc 	zTemp0+1
.a54b	05 38		ora $38				ora 	zTemp1
.a54d	f0 0f		beq $a55e			beq 	_MTAXExit	 				; found
.a54f	b0 0d		bcs $a55e			bcs 	_MTAXExit 					; current < required exit
.a551	18		clc				clc
.a552	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a554	65 30		adc $30				adc 	codePtr
.a556	85 30		sta $30				sta 	codePtr
.a558	90 02		bcc $a55c			bcc 	_CREExit
.a55a	e6 31		inc $31				inc 	codePtr+1
.a55c					_CREExit:
.a55c	80 da		bra $a538			bra 	_MTAXLoop
.a55e					_MTAXExit:
.a55e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a55f					StackPushByte:
.a55f	48		pha				pha 								; save byte
.a560	a5 34		lda $34				lda 	BasicStack
.a562	d0 09		bne $a56d			bne 	_SPBNoBorrow
.a564	c6 35		dec $35				dec 	BasicStack+1
.a566	48		pha				pha
.a567	a5 35		lda $35				lda 	BasicStack+1
.a569	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a56b	90 06		bcc $a573			bcc 	_SPBMemory
.a56d					_SPBNoBorrow:
.a56d	c6 34		dec $34				dec 	BasicStack
.a56f	68		pla				pla 								; get back and write
.a570	92 34		sta ($34)			sta 	(BasicStack)
.a572	60		rts				rts
.a573					_SPBMemory:
.a573	a9 12		lda #$12		lda	#18
.a575	4c f5 98	jmp $98f5		jmp	ErrorHandler
.a578					StackPopByte:
.a578	b2 34		lda ($34)			lda 	(BasicStack)
.a57a	e6 34		inc $34				inc 	BasicStack
.a57c	d0 02		bne $a580			bne 	_SPBNoCarry
.a57e	e6 35		inc $35				inc 	BasicStack+1
.a580					_SPBNoCarry:
.a580	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a581					StackOpen:
.a581	48		pha				pha 								; save frame byte
.a582	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a584	0a		asl a				asl 	a 							; claim twice this for storage
.a585	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a587	38		sec				sec 								; so basically subtracting from
.a588	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a58a	85 34		sta $34				sta 	basicStack
.a58c	b0 08		bcs $a596			bcs 	_SONoBorrow
.a58e	c6 35		dec $35				dec 	basicStack+1
.a590	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a592	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a594	90 04		bcc $a59a			bcc 	_SOMemory
.a596					_SONoBorrow:
.a596	68		pla				pla 								; get marker back and write at TOS
.a597	92 34		sta ($34)			sta 	(basicStack)
.a599	60		rts				rts
.a59a					_SOMemory:
.a59a	a9 12		lda #$12		lda	#18
.a59c	4c f5 98	jmp $98f5		jmp	ErrorHandler
.a59f					StackClose:
.a59f	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a5a1	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a5a3	0a		asl a				asl 	a 							; claim twice this.
.a5a4	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a5a6	85 34		sta $34				sta 	basicStack
.a5a8	90 02		bcc $a5ac			bcc 	_SCExit
.a5aa	e6 35		inc $35				inc 	basicStack+1
.a5ac					_SCExit:
.a5ac	60		rts				rts
.a5ad					StackCheckFrame:
.a5ad	48		pha				pha
.a5ae					_StackRemoveLocals:
.a5ae	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a5b0	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a5b2	b0 05		bcs $a5b9			bcs 	_SCNoLocal
.a5b4	20 97 ac	jsr $ac97			jsr 	LocalPopValue
.a5b7	80 f5		bra $a5ae			bra 	_StackRemoveLocals
.a5b9					_SCNoLocal:
.a5b9	68		pla				pla
.a5ba	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a5bc	29 f0		and #$f0			and 	#$F0 						; check type bits
.a5be	d0 01		bne $a5c1			bne 	_SCFError 					; different, we have structures mixed up
.a5c0	60		rts				rts
.a5c1					_SCFError:
.a5c1	8a		txa				txa 								; report error X
.a5c2	4c f5 98	jmp $98f5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a5c5					STKSaveCodePosition:
.a5c5	5a		phy				phy
.a5c6	98		tya				tya 								; save Y
.a5c7	a0 05		ldy #$05			ldy 	#5
.a5c9	91 34		sta ($34),y			sta 	(basicStack),y
.a5cb	88		dey				dey 								; save Code Pointer
.a5cc					_STKSaveLoop:
.a5cc	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a5cf	91 34		sta ($34),y			sta 	(basicStack),y
.a5d1	88		dey				dey
.a5d2	d0 f8		bne $a5cc			bne 	_STKSaveLoop
.a5d4	7a		ply				ply
.a5d5	60		rts				rts
.a5d6					STKLoadCodePosition:
.a5d6	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a5d8					_STKLoadLoop:
.a5d8	b1 34		lda ($34),y			lda 	(basicStack),y
.a5da	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a5dd	c8		iny				iny
.a5de	c0 05		cpy #$05			cpy 	#5
.a5e0	d0 f6		bne $a5d8			bne 	_STKLoadLoop
.a5e2	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a5e4	a8		tay				tay
.a5e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a5e6					StackReset:
.a5e6	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a5e8	85 34		sta $34				sta 	0+basicStack
.a5ea	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a5ec	85 35		sta $35				sta 	1+basicStack
.a5ee	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a5f0	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a5f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b5d8					StringConcrete:
.b5d8	5a		phy				phy 								; save position on stack
.b5d9	20 c2 a1	jsr $a1c2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b5dc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b5df	85 38		sta $38				sta 	zTemp1
.b5e1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b5e4	85 39		sta $39				sta 	zTemp1+1
.b5e6	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b5e8					_SALength:
.b5e8	c8		iny				iny
.b5e9	b1 38		lda ($38),y			lda 	(zTemp1),y
.b5eb	d0 fb		bne $b5e8			bne 	_SALength
.b5ed	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b5ef	b0 3f		bcs $b630			bcs 	_SALengthError
.b5f1	98		tya				tya 				 				; length of the new string
.b5f2	18		clc				clc
.b5f3	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b5f5	90 02		bcc $b5f9			bcc 	_SAHaveLength
.b5f7	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b5f9					_SAHaveLength:
.b5f9	48		pha				pha 								; save length.
.b5fa	38		sec				sec
.b5fb	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b5fd	6d 8e 04	adc $048e			adc 	StringMemory
.b600	8d 8e 04	sta $048e			sta 	StringMemory
.b603	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b605	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b608	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b60a	6d 8f 04	adc $048f			adc 	StringMemory+1
.b60d	8d 8f 04	sta $048f			sta 	StringMemory+1
.b610	85 3b		sta $3b				sta 	zTemp2+1
.b612	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b615	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b616	38		sec				sec
.b617	e9 03		sbc #$03			sbc 	#3
.b619	92 3a		sta ($3a)			sta 	(zTemp2)
.b61b	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b61d	a0 01		ldy #$01			ldy 	#1
.b61f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b621					_SACopyNewString:
.b621	a0 00		ldy #$00			ldy 	#0
.b623					_SACopyNSLoop:
.b623	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b625	c8		iny				iny 								; write two on in string storage
.b626	c8		iny				iny
.b627	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b629	88		dey				dey 								; this makes it one one.
.b62a	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b62c	d0 f5		bne $b623			bne 	_SACopyNSLoop
.b62e	7a		ply				ply
.b62f	60		rts				rts
.b630					_SALengthError:
.b630	a9 09		lda #$09		lda	#9
.b632	4c f5 98	jmp $98f5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b635					StringSystemInitialise:
.b635	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b637	8d 8e 04	sta $048e			sta 	0+StringMemory
.b63a	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b63c	8d 8f 04	sta $048f			sta 	1+StringMemory
.b63f	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b642	60		rts				rts
.b643					StringSpaceInitialise:
.b643	20 c2 a1	jsr $a1c2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b646	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b648	8d 90 04	sta $0490			sta 	StringInitialised
.b64b	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b64e	8d 91 04	sta $0491			sta 	StringTempPointer
.b651	ad 8f 04	lda $048f			lda 	StringMemory+1
.b654	3a		dec a				dec 	a
.b655	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b658	60		rts				rts
.b659					StringTempAllocate:
.b659	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b65b	b0 35		bcs $b692			bcs 	_STALength
.b65d	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b660	30 05		bmi $b667			bmi 	_STAAllocate
.b662	48		pha				pha 								; save value to subtract.
.b663	20 43 b6	jsr $b643			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b666	68		pla				pla 								; restore it
.b667					_STAAllocate:
.b667	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b669	18		clc				clc  								; deliberate allows one more
.b66a	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b66d	8d 91 04	sta $0491			sta 	StringTempPointer
.b670	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b673	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b675	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b678	69 ff		adc #$ff			adc 	#$FF
.b67a	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b67d	85 3d		sta $3d				sta 	zsTemp+1
.b67f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b682	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b685	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b688	a9 10		lda #$10			lda 	#NSTString
.b68a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b68d	a9 00		lda #$00			lda 	#0 							; clear the target string
.b68f	92 3c		sta ($3c)			sta 	(zsTemp)
.b691	60		rts				rts
.b692					_STALength:
.b692	a9 09		lda #$09		lda	#9
.b694	4c f5 98	jmp $98f5		jmp	ErrorHandler
.b697					StringTempWrite:
.b697	48		pha				pha
.b698	92 3c		sta ($3c)			sta 	(zsTemp)
.b69a	e6 3c		inc $3c				inc 	zsTemp
.b69c	d0 02		bne $b6a0			bne 	_STWNoCarry
.b69e	e6 3d		inc $3d				inc 	zsTemp+1
.b6a0					_STWNoCarry:
.b6a0	a9 00		lda #$00			lda 	#0
.b6a2	92 3c		sta ($3c)			sta 	(zsTemp)
.b6a4	68		pla				pla
.b6a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a5f3					BackloadProgram:
.a5f3	a2 ff		ldx #$ff			ldx 	#$FF
.a5f5	20 1d a6	jsr $a61d			jsr 	BLReadByte
.a5f8	30 1f		bmi $a619			bmi 	_BPExit
.a5fa					_BPCopy:
.a5fa	e8		inx				inx  								; copy byte in
.a5fb	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a5fe	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a601	20 1d a6	jsr $a61d			jsr 	BLReadByte 					; read next byte
.a604	30 0a		bmi $a610			bmi 	_BPEndLine 					; -ve = EOL
.a606	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a608	d0 02		bne $a60c			bne 	_BPNotTab
.a60a	a9 20		lda #$20			lda 	#' '
.a60c					_BPNotTab:
.a60c	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a60e	b0 ea		bcs $a5fa			bcs 	_BPCopy
.a610					_BPEndLine:
.a610	20 e8 a9	jsr $a9e8			jsr 	TokeniseLine 				; tokenise the line.
.a613	38		sec				sec 								; append not insert
.a614	20 52 b5	jsr $b552			jsr 	MemoryInsertLine 			; append to current program
.a617	80 da		bra $a5f3			bra 	BackloadProgram
.a619					_BPExit:
.a619	20 d0 8b	jsr $8bd0			jsr 	ClearCommand 				; clear variables etc.
.a61c	60		rts				rts
.a61d					BLReadByte:
.a61d					_BLLoad:
.a61d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a620	ee 1e a6	inc $a61e			inc 	_BLLoad+1
.a623	d0 03		bne $a628			bne 	_BLNoCarry
.a625	ee 1f a6	inc $a61f			inc 	_BLLoad+2
.a628					_BLNoCarry:
.a628	c9 00		cmp #$00			cmp 	#0
.a62a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a62b					TokeniseSearchTable:
.a62b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a62d	85 36		sta $36				sta 	zTemp0
.a62f	a0 00		ldy #$00			ldy 	#0
.a631	a9 80		lda #$80			lda 	#$80 						; token #
.a633	85 38		sta $38				sta 	zTemp1
.a635					_TSTLoop:
.a635	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a637	30 49		bmi $a682			bmi 	_TSTFail 					; -ve = end of table
.a639	f0 2e		beq $a669			beq 	_TSTNext 					; zero, check next it's a dummy
.a63b	c8		iny				iny 								; get the hash
.a63c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a63e	88		dey				dey
.a63f	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a642	d0 25		bne $a669			bne 	_TSTNext
.a644	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a647	38		sec				sec
.a648	ed 80 04	sbc $0480			sbc 	identStart
.a64b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a64d	d0 1a		bne $a669			bne 	_TSTNext
.a64f	5a		phy				phy 								; save Y , we might fail
.a650	c8		iny				iny 								; point to text
.a651	c8		iny				iny
.a652	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a655					_TSTCompareName:
.a655	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a658	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a65a	d0 0c		bne $a668			bne 	_TSTNextPullY 				; fail, pullY and do next
.a65c	e8		inx				inx
.a65d	c8		iny				iny
.a65e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a661	d0 f2		bne $a655			bne 	_TSTCompareName
.a663	7a		ply				ply 								; throw Y
.a664	a5 38		lda $38				lda 	zTemp1 						; get token #
.a666	38		sec				sec 								; return with CS = passed.
.a667	60		rts				rts
.a668					_TSTNextPullY:
.a668	7a		ply				ply 								; restore current, fall through.
.a669					_TSTNext:
.a669	e6 38		inc $38				inc 	zTemp1 						; token counter
.a66b	98		tya				tya
.a66c	18		clc				clc
.a66d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a66f	1a		inc a				inc 	a 							; +1
.a670	1a		inc a				inc 	a 							; +2
.a671	a8		tay				tay
.a672	10 c1		bpl $a635			bpl 	_TSTLoop 					; if Y < $80 loop back
.a674	98		tya				tya 								; add Y to zTemp0 and reset Y
.a675	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a677	18		clc				clc  								; but have tables > 255 bytes
.a678	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a67a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a67c	90 b7		bcc $a635			bcc 	_TSTLoop
.a67e	e6 37		inc $37				inc 	zTemp0+1
.a680	80 b3		bra $a635			bra 	_TSTLoop
.a682					_TSTFail:
.a682	18		clc				clc
.a683	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a684					KeywordSet0:
>a684	00 65					.text	0,$65,""               ; $80 !0:EOF
>a686	00 58					.text	0,$58,""               ; $81 !1:SH1
>a688	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a68a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a690	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a698	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a69e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a6a5	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a6ad	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a6b4	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a6bb	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a6c1	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a6c9	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8c JOYB(
>a6d0	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8d JOYX(
>a6d7	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8e JOYY(
>a6de	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>a6e6	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>a6ec	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>a6f3	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $92 NOT(
>a6f9	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $93 RANDOM(
>a701	28
>a702	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>a70a	28
>a70b	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>a711	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>a717	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>a71d	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>a724	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $99 TIMER(
>a72c	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9a TRUE
>a732	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9b VAL(
>a738	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9c FOR
>a73d	02 8f 49 46				.text	2,$8f,"IF"             ; $9d IF
>a741	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9e PROC
>a747	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9f REPEAT
>a74f	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a0 WHILE
>a756	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a1 ENDIF
>a75d	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a2 ENDPROC
>a765	43
>a766	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a3 NEXT
>a76c	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a4 THEN
>a772	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a5 UNTIL
>a779	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a6 WEND
>a77f	02 9b 42 59				.text	2,$9b,"BY"             ; $a7 BY
>a783	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a8 CALL
>a789	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a9 CIRCLE
>a791	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $aa CLEAR
>a798	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ab CLS
>a79d	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ac COLOR
>a7a4	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ad COLOUR
>a7ac	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ae DATA
>a7b2	03 da 44 49 4d				.text	3,$da,"DIM"            ; $af DIM
>a7b7	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b0 DOWNTO
>a7bf	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b1 ELSE
>a7c5	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b2 FROM
>a7cb	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b3 GFX
>a7d0	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b4 GOSUB
>a7d7	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b5 GOTO
>a7dd	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b6 HERE
>a7e3	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b7 IMAGE
>a7ea	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b8 LET
>a7ef	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b9 LINE
>a7f5	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ba LOCAL
>a7fc	03 db 4f 46 46				.text	3,$db,"OFF"            ; $bb OFF
>a801	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bc ON
>a805	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $bd OUTLINE
>a80d	45
>a80e	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $be PLOT
>a814	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bf PRINT
>a81b	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c0 READ
>a821	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c1 RECT
>a827	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c2 REM
>a82c	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c3 RETURN
>a834	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c4 SOLID
>a83b	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c5 SPRITE
>a843	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c6 TEXT
>a849	02 a3 54 4f				.text	2,$a3,"TO"             ; $c7 TO
>a84d	ff					.text	$FF
.a84e					KeywordSet1:
>a84e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a850	00 58					.text	0,$58,""               ; $81 !1:SH1
>a852	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a854	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a85c	4c 45
>a85e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a866	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a86e	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a873	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a879	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a87e	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a886	45
>a887	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a88c	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a894	53
>a895	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a89b	ff					.text	$FF
.a89c					KeywordSet2:
>a89c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a89e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8a0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8a2	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a8a7	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a8ac	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a8b1	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a8b6	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a8bb	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a8c0	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a8c5	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a8ca	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a8cf	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a8d4	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a8d9	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a8de	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a8e3	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a8e8	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a8ed	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a8f2	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a8f7	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a8fc	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a901	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a906	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a90b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a910	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a915	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a91a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a91f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a924	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a929	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a92e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a933	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a938	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a93d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a942	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a947	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a94c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a951	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a956	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a95b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a960	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a965	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a96a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a96f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a974	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a979	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a97e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a983	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a988	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a98d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a992	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a997	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a99c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a9a1	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a9a6	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a9ab	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a9b0	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a9b5	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a9ba	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a9bf	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a9c4	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a9c9	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a9ce	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a9d3	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a9d8	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a9dd	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a9e2	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a9e7	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a9e8					TokeniseLine:
.a9e8	20 70 ab	jsr $ab70			jsr 	FixLineBufferCase 			; fix line case
.a9eb	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a9ed	8d a6 04	sta $04a6			sta 	tokenOffset
.a9f0	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a9f3	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a9f6	a2 ff		ldx #$ff			ldx 	#$FF
.a9f8					_TKFindFirst:
.a9f8	e8		inx				inx
.a9f9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a9fc	f0 79		beq $aa77			beq 	_TKExit
.a9fe	c9 20		cmp #$20			cmp 	#' '
.aa00	90 f6		bcc $a9f8			bcc 	_TKFindFirst
.aa02	c9 30		cmp #$30			cmp 	#'0'
.aa04	90 07		bcc $aa0d			bcc 	_TKNoLineNumber
.aa06	c9 3a		cmp #$3a			cmp 	#'9'+1
.aa08	b0 03		bcs $aa0d			bcs 	_TKNoLineNumber
.aa0a	20 9a ab	jsr $ab9a			jsr 	TokeniseExtractLineNumber
.aa0d					_TKNoLineNumber:
.aa0d					_TKTokeniseLoop:
.aa0d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.aa10	f0 65		beq $aa77			beq 	_TKExit
.aa12	e8		inx				inx
.aa13	c9 20		cmp #$20			cmp 	#' '
.aa15	f0 f6		beq $aa0d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aa17	ca		dex				dex 								; undo last get, A contains character, X is position.
.aa18	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aa1a	f0 61		beq $aa7d			beq 	_TKTokeniseIdentifier
.aa1c	c9 41		cmp #$41			cmp 	#'A'
.aa1e	90 04		bcc $aa24			bcc 	_TKTokenisePunctuation
.aa20	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aa22	90 59		bcc $aa7d			bcc 	_TKTokeniseIdentifier
.aa24					_TKTokenisePunctuation:
.aa24	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aa26	f0 27		beq $aa4f			beq 	_TKString
.aa28	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aa2a	f0 28		beq $aa54			beq 	_TKHexConstant
.aa2c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aa2e	f0 29		beq $aa59			beq 	_TKCheckDouble
.aa30	c9 3e		cmp #$3e			cmp 	#'>'
.aa32	f0 25		beq $aa59			beq 	_TKCheckDouble
.aa34					_TKStandardPunctuation:
.aa34	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aa37	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aa39	90 0e		bcc $aa49			bcc 	_TKNoShift
.aa3b	48		pha				pha 								; save
.aa3c	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aa3e	85 36		sta $36				sta 	zTemp0
.aa40	68		pla				pla
.aa41	29 20		and #$20			and 	#32 						; bit 5
.aa43	4a		lsr a				lsr 	a 							; shift into bit 3
.aa44	4a		lsr a				lsr 	a
.aa45	05 36		ora $36				ora 	zTemp0
.aa47	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aa49					_TKNoShift:
.aa49	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte 			; write the punctuation character
.aa4c	e8		inx				inx 								; consume the character
.aa4d	80 be		bra $aa0d			bra 	_TKTokeniseLoop 			; and loop round again.
.aa4f					_TKString:
.aa4f	20 ff aa	jsr $aaff			jsr 	TokeniseString
.aa52	80 b9		bra $aa0d			bra 	_TKTokeniseLoop
.aa54					_TKHexConstant:
.aa54	20 3a ab	jsr $ab3a			jsr 	TokeniseHexConstant
.aa57	80 b4		bra $aa0d			bra 	_TKTokeniseLoop
.aa59					_TKCheckDouble:
.aa59	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aa5c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aa5e	90 d4		bcc $aa34			bcc 	_TKStandardPunctuation
.aa60	c9 3f		cmp #$3f			cmp 	#'>'+1
.aa62	b0 d0		bcs $aa34			bcs 	_TKStandardPunctuation
.aa64	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aa67	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aa69	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aa6a	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aa6d	38		sec				sec
.aa6e	e9 3c		sbc #$3c			sbc 	#'<'
.aa70	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.aa73	e8		inx				inx 								; consume both
.aa74	e8		inx				inx
.aa75	80 96		bra $aa0d			bra 	_TKTokeniseLoop
.aa77	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.aa79	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.aa7c	60		rts				rts
.aa7d					_TKTokeniseIdentifier:
.aa7d	8e 80 04	stx $0480			stx 	identStart 					; save start
.aa80	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.aa83					_TKCheckLoop:
.aa83	e8		inx				inx 								; look at next, we know first is identifier.
.aa84	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.aa87	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aa89	f0 f8		beq $aa83			beq 	_TKCheckLoop
.aa8b	c9 30		cmp #$30			cmp	 	#"0"
.aa8d	90 0c		bcc $aa9b			bcc 	_TKEndIdentifier
.aa8f	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa91	90 f0		bcc $aa83			bcc 	_TKCheckLoop
.aa93	c9 41		cmp #$41			cmp	 	#"A"
.aa95	90 04		bcc $aa9b			bcc 	_TKEndIdentifier
.aa97	c9 5b		cmp #$5b			cmp 	#"Z"+1
.aa99	90 e8		bcc $aa83			bcc 	_TKCheckLoop
.aa9b					_TKEndIdentifier:
.aa9b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.aa9e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.aaa0	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.aaa2	f0 06		beq $aaaa			beq 	_TKHasTypeCharacter
.aaa4	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.aaa6	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.aaa8	d0 07		bne $aab1			bne 	_TKNoTypeCharacter
.aaaa					_TKHasTypeCharacter:
.aaaa	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.aaad	e8		inx				inx 								; read next
.aaae	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aab1					_TKNoTypeCharacter:
.aab1	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.aab3	d0 09		bne $aabe			bne 	_TKNoArray
.aab5	e8		inx				inx 								; skip the (
.aab6	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.aab9	09 04		ora #$04			ora 	#$04
.aabb	8d 84 04	sta $0484			sta 	identTypeByte
.aabe					_TKNoArray:
.aabe	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.aac1	20 5b ab	jsr $ab5b			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.aac4	a0 a6		ldy #$a6			ldy 	#(KeywordSet0) >> 8
.aac6	a9 84		lda #$84			lda 	#(KeywordSet0) & $FF
.aac8	20 2b a6	jsr $a62b			jsr 	TokeniseSearchTable
.aacb	a2 00		ldx #$00			ldx 	#0
.aacd	b0 1f		bcs $aaee			bcs 	_TKFoundToken
.aacf	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.aad1	a9 4e		lda #$4e			lda 	#(KeywordSet1) & $FF
.aad3	20 2b a6	jsr $a62b			jsr 	TokeniseSearchTable
.aad6	a2 81		ldx #$81			ldx 	#$81
.aad8	b0 14		bcs $aaee			bcs 	_TKFoundToken
.aada	a0 a8		ldy #$a8			ldy 	#(KeywordSet2) >> 8
.aadc	a9 9c		lda #$9c			lda 	#(KeywordSet2) & $FF
.aade	20 2b a6	jsr $a62b			jsr 	TokeniseSearchTable
.aae1	a2 82		ldx #$82			ldx 	#$82
.aae3	b0 09		bcs $aaee			bcs 	_TKFoundToken
.aae5	20 eb ab	jsr $abeb			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.aae8	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aaeb	4c 0d aa	jmp $aa0d			jmp 	_TKTokeniseLoop 			; and go round again.
.aaee					_TKFoundToken:
.aaee	48		pha				pha 								; save token
.aaef	8a		txa				txa 								; shift in X, is there one ?
.aaf0	f0 03		beq $aaf5			beq 	_TKNoTShift
.aaf2	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte 			; if so, write it out
.aaf5					_TKNoTShift:
.aaf5	68		pla				pla 								; restore and write token
.aaf6	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.aaf9	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aafc	4c 0d aa	jmp $aa0d			jmp 	_TKTokeniseLoop 			; and go round again.
.aaff					TokeniseString:
.aaff	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ab01	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.ab04	e8		inx				inx									; start of quoted string.
.ab05	da		phx				phx 								; push start of string on top
.ab06	ca		dex				dex
.ab07					_TSFindEnd:
.ab07	e8		inx				inx
.ab08	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.ab0b	f0 04		beq $ab11			beq 	_TSEndOfString
.ab0d	c9 22		cmp #$22			cmp 	#'"'
.ab0f	d0 f6		bne $ab07			bne 	_TSFindEnd
.ab11					_TSEndOfString:
.ab11	7a		ply				ply  								; so now Y is first character, X is character after end.
.ab12	48		pha				pha 								; save terminating character
.ab13	20 1b ab	jsr $ab1b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ab16	68		pla				pla 								; terminating character
.ab17	f0 01		beq $ab1a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ab19	e8		inx				inx
.ab1a					_TSNotQuote:
.ab1a	60		rts				rts
.ab1b					TOWriteBlockXY:
.ab1b	86 36		stx $36				stx 	zTemp0 						; write end character
.ab1d	98		tya				tya
.ab1e	49 ff		eor #$ff			eor 	#$FF
.ab20	38		sec				sec
.ab21	65 36		adc $36				adc 	zTemp0
.ab23	1a		inc a				inc 	a 							; one extra for NULL
.ab24	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.ab27					_TOBlockLoop:
.ab27	c4 36		cpy $36				cpy 	zTemp0
.ab29	f0 09		beq $ab34			beq 	_TOBlockExit
.ab2b	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.ab2e	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.ab31	c8		iny				iny
.ab32	80 f3		bra $ab27			bra 	_TOBlockLoop
.ab34					_TOBlockExit:
.ab34	a9 00		lda #$00			lda 	#0
.ab36	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.ab39	60		rts				rts
.ab3a					TokeniseHexConstant:
.ab3a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ab3c	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.ab3f	e8		inx				inx									; start of quoted string.
.ab40	da		phx				phx 								; push start of constant on top
.ab41	ca		dex				dex
.ab42					_THFindLoop:
.ab42	e8		inx				inx
.ab43	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab46	c9 30		cmp #$30			cmp 	#"0"
.ab48	90 0c		bcc $ab56			bcc 	_THFoundEnd
.ab4a	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab4c	90 f4		bcc $ab42			bcc 	_THFindLoop
.ab4e	c9 41		cmp #$41			cmp 	#"A"
.ab50	90 04		bcc $ab56			bcc 	_THFoundEnd
.ab52	c9 47		cmp #$47			cmp 	#"F"+1
.ab54	90 ec		bcc $ab42			bcc 	_THFindLoop
.ab56					_THFoundEnd:
.ab56	7a		ply				ply 								; restore start
.ab57	20 1b ab	jsr $ab1b			jsr 	TOWriteBlockXY 				; output the block
.ab5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ab5b					TokeniseCalculateHash:
.ab5b	da		phx				phx
.ab5c	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ab5f	a9 00		lda #$00			lda 	#0
.ab61					_TCHLoop:
.ab61	18		clc				clc
.ab62	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.ab65	e8		inx				inx
.ab66	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ab69	d0 f6		bne $ab61			bne 	_TCHLoop
.ab6b	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ab6e	fa		plx				plx
.ab6f	60		rts				rts
.ab70					FixLineBufferCase:
.ab70	a2 00		ldx #$00			ldx 	#0
.ab72					_FLBCLoop:
.ab72	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ab75	f0 22		beq $ab99			beq 	_FLBCExit 					; end of string.
.ab77	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ab79	f0 11		beq $ab8c			beq 	_FLBCInQuotes
.ab7b	e8		inx				inx
.ab7c	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ab7e	90 f2		bcc $ab72			bcc 	_FLBCLoop
.ab80	c9 7b		cmp #$7b			cmp 	#'z'+1
.ab82	b0 ee		bcs $ab72			bcs 	_FLBCLoop
.ab84	38		sec				sec 								; make U/C
.ab85	e9 20		sbc #$20			sbc 	#32
.ab87	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ab8a	80 e6		bra $ab72			bra 	_FLBCLoop
.ab8c					_FLBCInQuotes:
.ab8c	e8		inx				inx 								; advance
.ab8d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ab90	f0 07		beq $ab99			beq 	_FLBCExit 					; exit on EOS
.ab92	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ab94	d0 f6		bne $ab8c			bne 	_FLBCInQuotes
.ab96	e8		inx				inx 								; skip over it
.ab97	80 d9		bra $ab72			bra 	_FLBCLoop
.ab99					_FLBCExit:
.ab99	60		rts				rts
.ab9a					TokeniseExtractLineNumber:
.ab9a	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.ab9d	48		pha				pha
.ab9e	ad a7 04	lda $04a7			lda 	tokenLineNumber
.aba1	48		pha				pha
.aba2	20 d8 ab	jsr $abd8			jsr 	_TELNTimes2 				; line # x 4
.aba5	20 d8 ab	jsr $abd8			jsr 	_TELNTimes2 				; line # x 2
.aba8	18		clc				clc 								; add stacked value
.aba9	68		pla				pla
.abaa	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abad	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abb0	68		pla				pla
.abb1	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.abb4	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.abb7	20 d8 ab	jsr $abd8			jsr 	_TELNTimes2 				; line # x 10
.abba	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.abbd	e8		inx				inx
.abbe	29 0f		and #$0f			and 	#15 						; add to line #
.abc0	18		clc				clc
.abc1	6d a7 04	adc $04a7			adc 	tokenLineNumber
.abc4	8d a7 04	sta $04a7			sta 	tokenLineNumber
.abc7	90 03		bcc $abcc			bcc 	_TLENNoCarry
.abc9	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.abcc					_TLENNoCarry:
.abcc	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.abcf	c9 30		cmp #$30			cmp 	#'0'
.abd1	90 04		bcc $abd7			bcc 	_TLENExit
.abd3	c9 3a		cmp #$3a			cmp 	#'9'+1
.abd5	90 c3		bcc $ab9a			bcc 	TokeniseExtractLineNumber
.abd7					_TLENExit:
.abd7	60		rts				rts
.abd8					_TELNTimes2:
.abd8	0e a7 04	asl $04a7			asl 	tokenLineNumber
.abdb	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.abde	60		rts				rts
.abdf					TokeniseWriteByte:
.abdf	da		phx				phx
.abe0	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.abe3	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.abe6	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.abe9	fa		plx				plx
.abea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.abeb					CheckCreateVariableRecord:
.abeb	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.abed	85 36		sta $36				sta 	0+zTemp0
.abef	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.abf1	85 37		sta $37				sta 	1+zTemp0
.abf3					_CCVSearch:
.abf3	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.abf5	f0 2c		beq $ac23			beq 	_CCVFail
.abf7	a0 01		ldy #$01			ldy 	#1 							; read the hash
.abf9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.abfb	cd 83 04	cmp $0483			cmp 	identHash
.abfe	d0 16		bne $ac16			bne 	_CCVNext
.ac00	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ac02	ae 80 04	ldx $0480			ldx 	identStart
.ac05					_CCVCompare:
.ac05	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ac08	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ac0a	e8		inx				inx 								; advance pointers
.ac0b	c8		iny				iny
.ac0c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ac0d	d0 07		bne $ac16			bne 	_CCVNext  					; didn't match go to next.
.ac0f	90 f4		bcc $ac05			bcc 	_CCVCompare 				; not finished yet.
.ac11	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ac14	f0 41		beq $ac57			beq 	_CCVFound 					; yes, we were successful
.ac16					_CCVNext:
.ac16	18		clc				clc
.ac17	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ac19	65 36		adc $36				adc 	zTemp0
.ac1b	85 36		sta $36				sta 	zTemp0
.ac1d	90 d4		bcc $abf3			bcc 	_CCVSearch
.ac1f	e6 37		inc $37				inc 	zTemp0+1
.ac21	80 d0		bra $abf3			bra 	_CCVSearch
.ac23					_CCVFail:
.ac23	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ac25	ad 83 04	lda $0483			lda 	identHash
.ac28	91 36		sta ($36),y			sta 	(zTemp0),y
.ac2a	c8		iny				iny 								; offset 2 is the type byte
.ac2b	ad 84 04	lda $0484			lda 	identTypeByte
.ac2e	91 36		sta ($36),y			sta 	(zTemp0),y
.ac30	c8		iny				iny
.ac31					_CCVData:
.ac31	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ac33	91 36		sta ($36),y			sta 	(zTemp0),y
.ac35	c8		iny				iny
.ac36	c0 08		cpy #$08			cpy 	#8
.ac38	90 f7		bcc $ac31			bcc 	_CCVData
.ac3a	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ac3d					_CCVCopyName:
.ac3d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ac40	91 36		sta ($36),y			sta 	(zTemp0),y
.ac42	e8		inx				inx
.ac43	c8		iny				iny
.ac44	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ac47	d0 f4		bne $ac3d			bne 	_CCVCopyName
.ac49	98		tya				tya 								; patch offset
.ac4a	92 36		sta ($36)			sta 	(zTemp0)
.ac4c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ac4e	91 36		sta ($36),y			sta 	(zTemp0),y
.ac50	88		dey				dey
.ac51	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ac53	09 80		ora #$80			ora 	#$80
.ac55	91 36		sta ($36),y			sta 	(zTemp0),y
.ac57					_CCVFound:
.ac57	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ac59	38		sec				sec
.ac5a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ac5c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ac5e	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.ac61	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ac63	20 df ab	jsr $abdf			jsr 	TokeniseWriteByte
.ac66	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
