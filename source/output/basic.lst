
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Oct  3 21:02:55 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 dc 83	jsr $83dc			jsr 	NewCommand 					; erase current program
.8006	20 da 91	jsr $91da			jsr 	BackloadProgram
.8009	4c 9d 84	jmp $849d			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 16 9e	jsr $9e16			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	94 87					.word	ShiftLeft                        ; $00 <<
>8016	8e 86					.word	BinaryCompareLessEqual           ; $01 <=
>8018	84 86					.word	BinaryCompareNotEqual            ; $02 <>
>801a	b3 9b					.word	SyntaxError                      ; $03 !!3
>801c	b3 9b					.word	SyntaxError                      ; $04 ><
>801e	98 86					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	97 87					.word	ShiftRight                       ; $06 >>
>8022	b3 9b					.word	SyntaxError                      ; $07 !!7
>8024	b3 9b					.word	SyntaxError                      ; $08 !!8
>8026	b3 9b					.word	SyntaxError                      ; $09 !!9
>8028	b3 9b					.word	SyntaxError                      ; $0a !!10
>802a	b3 9b					.word	SyntaxError                      ; $0b !!11
>802c	b3 9b					.word	SyntaxError                      ; $0c !!12
>802e	b3 9b					.word	SyntaxError                      ; $0d !!13
>8030	b3 9b					.word	SyntaxError                      ; $0e !!14
>8032	b3 9b					.word	SyntaxError                      ; $0f !!15
>8034	b3 9b					.word	SyntaxError                      ; $10 @
>8036	b3 9b					.word	SyntaxError                      ; $11 !!17
>8038	b3 9b					.word	SyntaxError                      ; $12 !!18
>803a	b3 9b					.word	SyntaxError                      ; $13 [
>803c	fc 96					.word	IntegerDivide                    ; $14 \
>803e	b3 9b					.word	SyntaxError                      ; $15 ]
>8040	1d 89					.word	EorInteger                       ; $16 ^
>8042	b3 9b					.word	SyntaxError                      ; $17 _
>8044	b3 9b					.word	SyntaxError                      ; $18 `
>8046	b3 9b					.word	SyntaxError                      ; $19 !!25
>8048	b3 9b					.word	SyntaxError                      ; $1a !!26
>804a	b3 9b					.word	SyntaxError                      ; $1b {
>804c	d7 88					.word	OraInteger                       ; $1c |
>804e	b3 9b					.word	SyntaxError                      ; $1d }
>8050	b3 9b					.word	SyntaxError                      ; $1e ~
>8052	b3 9b					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	b3 9b					.word	SyntaxError                      ; $20
>8056	63 89					.word	WordIndirect                     ; $21 !
>8058	b3 9b					.word	SyntaxError                      ; $22 "
>805a	b3 9b					.word	SyntaxError                      ; $23 #
>805c	b3 9b					.word	SyntaxError                      ; $24 $
>805e	49 97					.word	IntegerModulus                   ; $25 %
>8060	91 88					.word	AndInteger                       ; $26 &
>8062	b3 9b					.word	SyntaxError                      ; $27 '
>8064	b3 9b					.word	SyntaxError                      ; $28 (
>8066	b3 9b					.word	SyntaxError                      ; $29 )
>8068	be 97					.word	MulInteger                       ; $2a *
>806a	2b 88					.word	AddInteger                       ; $2b +
>806c	b3 9b					.word	SyntaxError                      ; $2c ,
>806e	66 88					.word	SubInteger                       ; $2d -
>8070	b3 9b					.word	SyntaxError                      ; $2e .
>8072	55 99					.word	FDivideCommand                   ; $2f /
>8074	b3 9b					.word	SyntaxError                      ; $30 0
>8076	b3 9b					.word	SyntaxError                      ; $31 1
>8078	b3 9b					.word	SyntaxError                      ; $32 2
>807a	b3 9b					.word	SyntaxError                      ; $33 3
>807c	b3 9b					.word	SyntaxError                      ; $34 4
>807e	b3 9b					.word	SyntaxError                      ; $35 5
>8080	b3 9b					.word	SyntaxError                      ; $36 6
>8082	b3 9b					.word	SyntaxError                      ; $37 7
>8084	b3 9b					.word	SyntaxError                      ; $38 8
>8086	b3 9b					.word	SyntaxError                      ; $39 9
>8088	b3 9b					.word	SyntaxError                      ; $3a :
>808a	b3 9b					.word	SyntaxError                      ; $3b ;
>808c	70 86					.word	BinaryCompareLess                ; $3c <
>808e	66 86					.word	BinaryCompareEqual               ; $3d =
>8090	7a 86					.word	BinaryCompareGreater             ; $3e >
>8092	8a 89					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	f2 84					.word	EOLCommand                       ; $80 !0:EOF
>8096	ff 84					.word	Shift1Command                    ; $81 !1:SH1
>8098	b3 9b					.word	SyntaxError                      ; $82 !2:SH2
>809a	9b 9a					.word	AbsUnary                         ; $83 ABS(
>809c	54 8e					.word	AllocUnary                       ; $84 ALLOC(
>809e	ab 9a					.word	AscUnary                         ; $85 ASC(
>80a0	0f 8f					.word	ChrUnary                         ; $86 CHR$(
>80a2	62 86					.word	UnaryFalse                       ; $87 FALSE
>80a4	b8 9a					.word	FracUnary                        ; $88 FRAC(
>80a6	ce 9a					.word	IntUnary                         ; $89 INT(
>80a8	24 9b					.word	IsValUnary                       ; $8a ISVAL(
>80aa	e9 8f					.word	Unary_Left                       ; $8b LEFT$(
>80ac	e0 9a					.word	LenUnary                         ; $8c LEN(
>80ae	13 90					.word	Unary_Mid                        ; $8d MID$(
>80b0	ac 8e					.word	Unary_Not                        ; $8e NOT(
>80b2	f9 8f					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	c2 8e					.word	Unary_Rnd                        ; $90 RND(
>80b6	fa 9a					.word	SgnUnary                         ; $91 SGN(
>80b8	21 8f					.word	SpcUnary                         ; $92 SPC(
>80ba	3c 8f					.word	Unary_Str                        ; $93 STR$(
>80bc	56 86					.word	UnaryTrue                        ; $94 TRUE
>80be	1a 9b					.word	ValUnary                         ; $95 VAL(
>80c0	35 82					.word	ForCommand                       ; $96 FOR
>80c2	79 83					.word	IfCommand                        ; $97 IF
>80c4	07 85					.word	Unused1                          ; $98 PROC
>80c6	7b 84					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	bb 85					.word	Command_WHILE                    ; $9a WHILE
>80ca	a2 83					.word	EndIf                            ; $9b ENDIF
>80cc	d5 96					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	ef 82					.word	NextCommand                      ; $9d NEXT
>80d0	07 85					.word	Unused4                          ; $9e THEN
>80d2	84 84					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	dc 85					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	b3 9b					.word	SyntaxError                      ; $a2 CLS
>80da	b3 9b					.word	SyntaxError                      ; $a3 DATA
>80dc	75 81					.word	DimCommand                       ; $a4 DIM
>80de	07 85					.word	Unused3                          ; $a5 DOWNTO
>80e0	9b 83					.word	ElseCode                         ; $a6 ELSE
>80e2	48 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	66 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	a3 83					.word	LetCommand                       ; $a9 LET
>80e8	e6 83					.word	Command_Print                    ; $aa PRINT
>80ea	b3 9b					.word	SyntaxError                      ; $ab READ
>80ec	6e 84					.word	RemCommand                       ; $ac REM
>80ee	58 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	07 85					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	b3 9b					.word	SyntaxError                      ; $80 !0:EOF
>80f4	b3 9b					.word	SyntaxError                      ; $81 !1:SH1
>80f6	b3 9b					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	32 82					.word	EndCommand                       ; $85 END
>80fe	b3 9b					.word	SyntaxError                      ; $86 LIST
>8100	dc 83					.word	NewCommand                       ; $87 NEW
>8102	b3 9b					.word	SyntaxError                      ; $88 RESTORE
>8104	9d 84					.word	CommandRUN                       ; $89 RUN
>8106	0a 85					.word	StopCommand                      ; $8a STOP
.8108					VectorSet2:
>8108	b3 9b					.word	SyntaxError                      ; $80 !0:EOF
>810a	b3 9b					.word	SyntaxError                      ; $81 !1:SH1
>810c	b3 9b					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 b4 90	jsr $90b4			jsr 	EvaluateInteger 			; the assert test
.8113	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c ea 85	jmp $85ea		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 c9 90	jsr $90c9			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 cd 91	jsr $91cd			jsr 	StackReset
.816e	20 8c 9d	jsr $9d8c			jsr 	StringSystemInitialise
.8171	20 0f 85	jsr $850f			jsr 	ProcedureScan
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8175					DimCommand:
.8175	b1 30		lda ($30),y			lda 	(codePtr),y
.8177	29 c0		and #$c0			and 	#$C0
.8179	c9 40		cmp #$40			cmp 	#$40
.817b	d0 7a		bne $81f7			bne 	_DCSyntax
.817d	b1 30		lda ($30),y			lda 	(codePtr),y
.817f	18		clc				clc
.8180	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8182	85 3f		sta $3f				sta 	zaTemp+1
.8184	c8		iny				iny
.8185	b1 30		lda ($30),y			lda 	(codePtr),y
.8187	c8		iny				iny
.8188	85 3e		sta $3e				sta 	zaTemp
.818a	5a		phy				phy
.818b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.818d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.818f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8191	c9 18		cmp #$18			cmp 	#NSTProcedure
.8193	f0 62		beq $81f7			beq 	_DCSyntax
.8195	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8197	29 04		and #$04			and 	#NSBIsArray
.8199	f0 64		beq $81ff			beq 	_DCType
.819b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.819d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.819f	d0 59		bne $81fa			bne 	_DCRedefine
.81a1	7a		ply				ply
.81a2	20 02 82	jsr $8202			jsr 	_DCGetSize 				; get array size, check it.
.81a5	5a		phy				phy
.81a6	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.81a8	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.81aa	7a		ply				ply 							; is there a second (e.g. ,x)
.81ab	b1 30		lda ($30),y			lda 	(codePtr),y
.81ad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.81af	d0 0a		bne $81bb			bne 	_DCOneDimension
.81b1	c8		iny				iny 							; skip comma
.81b2	20 02 82	jsr $8202			jsr 	_DCGetSize 				; get 2nd array size
.81b5	5a		phy				phy
.81b6	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.81b8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81ba	7a		ply				ply
.81bb					_DCOneDimension:
.81bb	5a		phy				phy 							; save position
.81bc	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.81be	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81c0	aa		tax				tax
.81c1	c8		iny				iny
.81c2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81c4	e8		inx				inx 							; bump them.
.81c5	1a		inc a				inc 	a
.81c6	20 65 9b	jsr $9b65			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.81c9	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.81cb	29 e0		and #$e0			and 	#$E0
.81cd	d0 23		bne $81f2			bne 	_DCSize
.81cf	a0 02		ldy #$02			ldy 	#2 						; get base type
.81d1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81d3	20 10 82	jsr $8210			jsr 	ScaleByBaseType 		; scale by base type
.81d6	a5 36		lda $36				lda 	zTemp0
.81d8	a6 37		ldx $37				ldx 	zTemp0+1
.81da	20 73 8e	jsr $8e73			jsr 	AllocateXABytes 		; allocate memory
.81dd	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.81df	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81e1	c8		iny				iny
.81e2	8a		txa				txa
.81e3	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81e5	7a		ply				ply 							; get position back
.81e6	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 		; check )
.81e9	b1 30		lda ($30),y			lda 	(codePtr),y
.81eb	c8		iny				iny 							; consume in case
.81ec	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.81ee	f0 85		beq $8175			beq 	DimCommand
.81f0	88		dey				dey 							; undo consume
.81f1	60		rts				rts
.81f2					_DCSize:
.81f2	a9 16		lda #$16		lda	#22
.81f4	4c ea 85	jmp $85ea		jmp	ErrorHandler
.81f7					_DCSyntax:
.81f7	4c b3 9b	jmp $9bb3			jmp 	SyntaxError
.81fa					_DCRedefine:
.81fa	a9 15		lda #$15		lda	#21
.81fc	4c ea 85	jmp $85ea		jmp	ErrorHandler
.81ff					_DCType:
.81ff	4c bd 9b	jmp $9bbd			jmp 	TypeError
.8202					_DCGetSize:
.8202	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8204	20 d5 90	jsr $90d5			jsr 	Evaluate8BitInteger 	; get array dimension
.8207	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8209	f0 e7		beq $81f2			beq 	_DCSize
.820b	c9 fe		cmp #$fe			cmp 	#254
.820d	f0 e3		beq $81f2			beq 	_DCSize
.820f	60		rts				rts
.8210					ScaleByBaseType:
.8210	29 10		and #$10			and 	#NSBIsString 			; is it string
.8212	d0 19		bne $822d			bne 	_SBBTString
.8214	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8216	48		pha				pha
.8217	a5 36		lda $36				lda 	zTemp0
.8219	48		pha				pha
.821a	06 36		asl $36				asl 	zTemp0 					; x 2
.821c	26 37		rol $37				rol 	zTemp0+1
.821e	06 36		asl $36				asl 	zTemp0 					; x 4
.8220	26 37		rol $37				rol 	zTemp0+1
.8222	68		pla				pla 							; add stacked value = x 5
.8223	65 36		adc $36				adc 	zTemp0
.8225	85 36		sta $36				sta 	zTemp0
.8227	68		pla				pla
.8228	65 37		adc $37				adc 	zTemp0+1
.822a	85 37		sta $37				sta 	zTemp0+1
.822c	60		rts				rts
.822d					_SBBTString:
.822d	06 36		asl $36				asl 	zTemp0
.822f	26 37		rol $37				rol 	zTemp0+1
.8231	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8232					EndCommand:
.8232	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8235					ForCommand:
.8235	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8237	20 7a 91	jsr $917a			jsr 	StackOpen
.823a	a2 00		ldx #$00			ldx 	#0
.823c	20 c4 8c	jsr $8cc4			jsr 	EvaluateTerm
.823f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8242	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8244	d0 49		bne $828f			bne		_FCError
.8246	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8248	20 f3 96	jsr $96f3			jsr 	CheckNextA
.824b	e8		inx				inx
.824c	20 b4 90	jsr $90b4			jsr 	EvaluateInteger 			; <from> in +1
.824f	b1 30		lda ($30),y			lda 	(codePtr),y
.8251	c8		iny				iny 								; consume it
.8252	48		pha				pha 								; save on stack for later
.8253	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8255	f0 04		beq $825b			beq 	_FCNoSyntax
.8257	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8259	d0 37		bne $8292			bne 	_FCSyntaxError
.825b					_FCNoSyntax:
.825b	e8		inx				inx
.825c	20 b4 90	jsr $90b4			jsr 	EvaluateInteger
.825f	20 ac 91	jsr $91ac			jsr 	STKSaveCodePosition 		; save loop back position
.8262	68		pla				pla 								; restore DOWNTO or TO
.8263	5a		phy				phy 								; save Y on the stack
.8264	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8266	f0 02		beq $826a			beq 	_FCNotDownTo
.8268	a9 02		lda #$02			lda 	#2
.826a					_FCNotDownTo:
.826a	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.826b	a0 10		ldy #$10			ldy 	#16
.826d	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.826f	a0 06		ldy #$06			ldy 	#6
.8271	ad 08 06	lda $0608			lda 	NSMantissa0
.8274	91 34		sta ($34),y			sta 	(basicStack),y
.8276	ad 10 06	lda $0610			lda 	NSMantissa1
.8279	c8		iny				iny
.827a	91 34		sta ($34),y			sta 	(basicStack),y
.827c	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.827e	a2 01		ldx #$01			ldx 	#1
.8280	20 95 82	jsr $8295			jsr 	FCIntegerToStack
.8283	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8285	a2 02		ldx #$02			ldx 	#2
.8287	20 95 82	jsr $8295			jsr 	FCIntegerToStack
.828a	20 b5 82	jsr $82b5			jsr 	CopyIndexToReference
.828d	7a		ply				ply 								; restore position
.828e	60		rts				rts
.828f					_FCError:
.828f	4c bd 9b	jmp $9bbd			jmp 	TypeError
.8292					_FCSyntaxError:
.8292	4c b3 9b	jmp $9bb3			jmp 	SyntaxError
.8295					FCIntegerToStack:
.8295	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8298	10 03		bpl $829d			bpl	 	_FCNotNegative
.829a	20 f2 90	jsr $90f2			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.829d					_FCNotNegative:
.829d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.82a0	91 34		sta ($34),y			sta 	(basicStack),y
.82a2	c8		iny				iny
.82a3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82a6	91 34		sta ($34),y			sta 	(basicStack),y
.82a8	c8		iny				iny
.82a9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82ac	91 34		sta ($34),y			sta 	(basicStack),y
.82ae	c8		iny				iny
.82af	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.82b2	91 34		sta ($34),y			sta 	(basicStack),y
.82b4	60		rts				rts
.82b5					CopyIndexToReference:
.82b5	5a		phy				phy
.82b6	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.82b8	38		sec				sec 								; (because we copy from offset 8)
.82b9	b1 34		lda ($34),y			lda 	(basicStack),y
.82bb	e9 08		sbc #$08			sbc 	#8
.82bd	85 36		sta $36				sta 	zTemp0
.82bf	c8		iny				iny
.82c0	b1 34		lda ($34),y			lda 	(basicStack),y
.82c2	e9 00		sbc #$00			sbc 	#0
.82c4	85 37		sta $37				sta 	zTemp0+1
.82c6	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.82c8	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.82ca	b1 34		lda ($34),y			lda 	(basicStack),y
.82cc	0a		asl a				asl 	a 							; into carry
.82cd	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.82cf	90 14		bcc $82e5			bcc 	_CITRNormal
.82d1	38		sec				sec
.82d2					_CITRNegative:
.82d2	a9 00		lda #$00			lda 	#0
.82d4	f1 34		sbc ($34),y			sbc 	(basicStack),y
.82d6	91 36		sta ($36),y			sta 	(zTemp0),y
.82d8	c8		iny				iny
.82d9	ca		dex				dex
.82da	d0 f6		bne $82d2			bne 	_CITRNegative
.82dc	88		dey				dey 								; look at MSB of mantissa
.82dd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.82df	09 80		ora #$80			ora 	#$80
.82e1	91 36		sta ($36),y			sta 	(zTemp0),y
.82e3	7a		ply				ply
.82e4	60		rts				rts
.82e5					_CITRNormal:
.82e5	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.82e7	91 36		sta ($36),y			sta 	(zTemp0),y
.82e9	c8		iny				iny
.82ea	ca		dex				dex
.82eb	d0 f8		bne $82e5			bne 	_CITRNormal
.82ed	7a		ply				ply 								; and exit.
.82ee	60		rts				rts
.82ef					NextCommand:
.82ef	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.82f1	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.82f3	20 a1 91	jsr $91a1			jsr 	StackCheckFrame
.82f6	5a		phy				phy
.82f7	a0 10		ldy #$10			ldy 	#16 						; get the step count
.82f9	b1 34		lda ($34),y			lda 	(basicStack),y
.82fb	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.82fd	30 02		bmi $8301			bmi 	_NCStepNeg
.82ff	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8301					_NCStepNeg:
.8301	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8303	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8305	18		clc				clc
.8306					_NCBump:
.8306	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8308	91 34		sta ($34),y			sta 	(basicStack),y
.830a	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.830c	c8		iny				iny 								; next byte
.830d	ca		dex				dex 								; do four times
.830e	d0 f6		bne $8306			bne 	_NCBump
.8310	20 b5 82	jsr $82b5			jsr		CopyIndexToReference		; copy it to the reference variable.
.8313	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8315	b1 34		lda ($34),y			lda 	(basicStack),y
.8317	0a		asl a				asl 	a 							; sign bit to carry
.8318	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.831a	85 38		sta $38				sta 	zTemp1
.831c	90 02		bcc $8320			bcc 	_NCCompRev 					; use if step is +ve
.831e	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8320					_NCCompRev:
.8320	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8322	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8324	85 39		sta $39				sta 	zTemp1+1
.8326	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8328	38		sec				sec
.8329					_NCCompare:
.8329	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.832b	b1 34		lda ($34),y			lda 	(basicStack),y
.832d	a4 39		ldy $39				ldy 	zTemp1+1
.832f	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8331	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8333	e6 39		inc $39				inc 	zTemp1+1
.8335	ca		dex				dex 								; do it 4 times.
.8336	d0 f1		bne $8329			bne 	_NCCompare
.8338	50 02		bvc $833c			bvc 	_NCNoOverflow 				; convert to signed comparison
.833a	49 80		eor #$80			eor 	#$80
.833c					_NCNoOverflow:
.833c	7a		ply				ply 								; restore Y position
.833d	0a		asl a				asl 	a 							; is bit 7 set.
.833e	90 04		bcc $8344			bcc 	_NCLoopback 				; if no , >= so loop back
.8340	20 93 91	jsr $9193			jsr 	StackClose 					; exit the loop
.8343	60		rts				rts
.8344					_NCLoopBack:
.8344	20 bd 91	jsr $91bd			jsr 	STKLoadCodePosition 		; loop back
.8347	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8348					Command_GOSUB:
.8348	a2 00		ldx #$00			ldx 	#0
.834a	20 c9 90	jsr $90c9			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.834d	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.834f	20 7a 91	jsr $917a			jsr 	StackOpen 					; create frame
.8352	20 ac 91	jsr $91ac			jsr 	STKSaveCodePosition 		; save current position
.8355	4c 6b 83	jmp $836b			jmp 	GotoStackX
.8358					Command_RETURN:
.8358	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.835a	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.835c	20 a1 91	jsr $91a1			jsr 	StackCheckFrame
.835f	20 bd 91	jsr $91bd			jsr 	STKLoadCodePosition 		; restore code position
.8362	20 93 91	jsr $9193			jsr 	StackClose
.8365	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8366					GotoCommand:
.8366	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8368	20 c9 90	jsr $90c9			jsr 	Evaluate16BitInteger
.836b					GotoStackX:
.836b	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.836e	48		pha				pha 								; it is slightly inefficient, just in cases.
.836f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8372	fa		plx				plx
.8373	20 a3 96	jsr $96a3			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8376	4c a8 84	jmp $84a8			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8379					IfCommand:
.8379	a2 00		ldx #$00			ldx 	#0 							; If what.
.837b	20 91 90	jsr $9091			jsr 	EvaluateNumber
.837e	b1 30		lda ($30),y			lda 	(codePtr),y
.8380	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8382	d0 0a		bne $838e			bne 	_IFStructured
.8384	c8		iny				iny 								; consume THEN
.8385	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; is it zero
.8388	f0 01		beq $838b			beq 	_IfFail 					; if fail, go to next line
.838a	60		rts				rts 								; if THEN just continue
.838b					_IfFail:
.838b	4c f2 84	jmp $84f2			jmp 	EOLCommand
.838e					_IfStructured:
.838e	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; is it zero
.8391	d0 07		bne $839a			bne 	_IfExit 					; if not, then continue normally.
.8393	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8395	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8397	20 61 85	jsr $8561			jsr 	ScanForward 				; and run from there/
.839a					_IfExit:
.839a	60		rts				rts
.839b					ElseCode:
.839b	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.839d	aa		tax				tax 								; so just go to the structure exit
.839e	20 61 85	jsr $8561			jsr 	ScanForward
.83a1	60		rts				rts
.83a2					EndIf:
.83a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.83a3					LetCommand:
.83a3	a2 00		ldx #$00			ldx 	#0
.83a5	ad db 89	lda $89db			lda 	PrecedenceLevel+"*"			; precedence > this
.83a8	20 f5 89	jsr $89f5			jsr 	EvaluateExpressionAtPrecedence
.83ab	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.83ae	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.83b0	f0 0e		beq $83c0			beq 	_LetGoProc 					; it's a procedure call.
.83b2	a9 3d		lda #$3d			lda 	#"=" 						; check =
.83b4	20 f3 96	jsr $96f3			jsr 	CheckNextA
.83b7	e8		inx				inx 								; RHS
.83b8	20 88 90	jsr $9088			jsr 	EvaluateValue
.83bb	ca		dex				dex
.83bc	20 c3 83	jsr $83c3			jsr 	AssignVariable
.83bf	60		rts				rts
.83c0					_LetGoProc:
.83c0	4c 3d 84	jmp $843d			jmp 	CallProcedure
.83c3					AssignVariable:
.83c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.83c6	48		pha				pha 								; save a copy
.83c7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83ca	29 10		and #$10			and 	#NSBIsString
.83cc	d0 0b		bne $83d9			bne 	_ASError
.83ce	68		pla				pla 								; get back
.83cf	29 10		and #$10			and 	#NSBIsString 				; check type
.83d1	d0 03		bne $83d6			bne 	_ASString
.83d3	4c 30 8a	jmp $8a30			jmp 	AssignNumber
.83d6					_ASString:
.83d6	4c 9e 8a	jmp $8a9e			jmp 	AssignString
.83d9					_ASError:
.83d9	4c bd 9b	jmp $9bbd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.83dc					NewCommand:
.83dc	20 52 96	jsr $9652			jsr 	MemoryNew
.83df	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.83e2	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.83e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.83e6					Command_Print:
.83e6	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.83e7					_CPLoop:
.83e7	08		php				php 								; save last action flag
.83e8	b1 30		lda ($30),y			lda 	(codePtr),y
.83ea	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.83ec	f0 46		beq $8434			beq 	_CPExit
.83ee	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83f0	f0 42		beq $8434			beq 	_CPExit
.83f2	68		pla				pla 								; throw last action flag
.83f3	b1 30		lda ($30),y			lda 	(codePtr),y
.83f5	c8		iny				iny
.83f6	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.83f8	f0 37		beq $8431			beq 	_CPContinueWithSameLine
.83fa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.83fc	f0 2e		beq $842c			beq 	_CPTab
.83fe	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8400	f0 26		beq $8428			beq 	_CPNewLine
.8402	88		dey				dey 								; undo the get.
.8403	a2 00		ldx #$00			ldx 	#0
.8405	20 88 90	jsr $9088			jsr 	EvaluateValue 				; get a value into slot 0
.8408	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.840b	29 10		and #$10			and 	#NSBIsString
.840d	f0 0b		beq $841a			beq 	_CPNumber
.840f	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8412	ad 08 06	lda $0608			lda 	NSMantissa0
.8415	20 43 86	jsr $8643			jsr 	PrintStringXA
.8418	80 cc		bra $83e6			bra 	Command_Print 				; loop round clearing carry so NL if end
.841a					_CPNumber:
.841a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.841c	20 5e 8f	jsr $8f5e			jsr 	ConvertNumberToString 		; convert to string
.841f	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8421	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8423	20 43 86	jsr $8643			jsr 	PrintStringXA
.8426	80 be		bra $83e6			bra 	Command_Print 				; loop round clearing carry so NL if end
.8428					_CPNewLine:
.8428	a9 0d		lda #$0d			lda 	#13
.842a	80 02		bra $842e			bra 	_CPPrintChar
.842c					_CPTab:
.842c	a9 09		lda #$09			lda 	#9 							; print TAB
.842e					_CPPrintChar:
.842e	20 16 9e	jsr $9e16			jsr 	EXTPrintCharacter
.8431					_CPContinueWithSameLine:
.8431	38		sec				sec 								; loop round with carry set, which
.8432	80 b3		bra $83e7			bra 	_CPLoop 					; will inhibit final CR
.8434					_CPExit:
.8434	28		plp				plp 								; get last action flag
.8435	b0 05		bcs $843c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8437	a9 0d		lda #$0d			lda 	#13 						; print new line
.8439	20 16 9e	jsr $9e16			jsr 	EXTPrintCharacter
.843c					_CPExit2:
.843c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.843d					CallProcedure:
.843d	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.8440	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8442	20 7a 91	jsr $917a			jsr 	StackOpen
.8445	20 ac 91	jsr $91ac			jsr 	STKSaveCodePosition 		; save loop position
.8448	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.844b	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.844d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8450	85 37		sta $37				sta 	zTemp0+1
.8452	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8454	b2 36		lda ($36)			lda 	(zTemp0)
.8456	85 30		sta $30				sta 	safePtr
.8458	b1 36		lda ($36),y			lda 	(zTemp0),y
.845a	85 31		sta $31				sta 	safePtr+1
.845c	c8		iny				iny
.845d	b1 36		lda ($36),y			lda 	(zTemp0),y
.845f	85 32		sta $32				sta 	safePtr+2
.8461	c8		iny				iny
.8462	b1 36		lda ($36),y			lda 	(zTemp0),y
.8464	85 33		sta $33				sta 	safePtr+3
.8466	c8		iny				iny 								; get Y offset -> Y
.8467	b1 36		lda ($36),y			lda 	(zTemp0),y
.8469	a8		tay				tay
.846a	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 			; check )
.846d	60		rts				rts 								; and continue from here
.96d5					Command_ENDPROC:
.96d5	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.96d7	a2 14		ldx #$14			ldx 	#ERRID_PROC
.96d9	20 a1 91	jsr $91a1			jsr 	StackCheckFrame
.96dc	20 bd 91	jsr $91bd			jsr 	STKLoadCodePosition 		; restore code position
.96df	20 93 91	jsr $9193			jsr 	StackClose
.96e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.846e					RemCommand:
.846e	b1 30		lda ($30),y			lda 	(codePtr),y
.8470	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8472	d0 06		bne $847a			bne 	_RMExit
.8474	c8		iny				iny
.8475	98		tya				tya
.8476	38		sec				sec
.8477	71 30		adc ($30),y			adc 	(codePtr),y
.8479	a8		tay				tay
.847a					_RMExit:
.847a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.847b					Command_REPEAT:
.847b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.847d	20 7a 91	jsr $917a			jsr 	StackOpen
.8480	20 ac 91	jsr $91ac			jsr 	STKSaveCodePosition 		; save loop position
.8483	60		rts				rts
.8484					Command_UNTIL:
.8484	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8486	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8488	20 a1 91	jsr $91a1			jsr 	StackCheckFrame
.848b	a2 00		ldx #$00			ldx 	#0
.848d	20 91 90	jsr $9091			jsr 	EvaluateNumber 				; work out the number
.8490	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; check if zero
.8493	f0 04		beq $8499			beq 	_CULoopBack 				; if so keep looping
.8495	20 93 91	jsr $9193			jsr 	StackClose		 			; return
.8498	60		rts				rts
.8499					_CULoopBack:
.8499	20 bd 91	jsr $91bd			jsr 	STKLoadCodePosition 		; loop back
.849c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.849d					CommandRUN:
.849d	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.84a0	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.84a2	85 30		sta $30				sta 	codePtr
.84a4	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.84a6	85 31		sta $31				sta 	codePtr+1
.84a8					RUNNewLine:
.84a8	b2 30		lda ($30)			lda 	(codePtr)
.84aa	f0 43		beq $84ef			beq 	CRNoProgram         		; no then END.
.84ac	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.84ae	9a		txs				txs
.84af					RUNCodePointerLine:
.84af	a0 02		ldy #$02			ldy 	#2 							; start of program
.84b1					_CRIncMainLoop:
.84b1	c8		iny				iny
.84b2					_CRMainLoop:
.84b2	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.84b5	b1 30		lda ($30),y			lda 	(codePtr),y
.84b7	10 10		bpl $84c9			bpl 	_CRNotKeyword
.84b9	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.84bb	b0 04		bcs $84c1			bcs 	_CRIsKeyword
.84bd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.84bf	b0 28		bcs $84e9			bcs		_CRSyntaxError
.84c1					_CRIsKeyword:
.84c1	c8		iny				iny 								; consume command
.84c2	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.84c3	aa		tax				tax 								; put in X for vector jump
.84c4	20 ec 84	jsr $84ec			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.84c7	80 e9		bra $84b2			bra 	_CRMainLoop 				; and loop round
.84c9					_CRNotKeyword:
.84c9	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.84cb	f0 e4		beq $84b1			beq 	_CRIncMainLoop
.84cd	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.84cf	90 05		bcc $84d6			bcc 	_CRNotVariable
.84d1					_CRGoLet:
.84d1	20 a3 83	jsr $83a3			jsr 	LetCommand
.84d4	80 dc		bra $84b2			bra 	_CRMainLoop
.84d6					_CRNotVariable:
.84d6	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.84d8	f0 f7		beq $84d1			beq 	_CRGoLet
.84da	c9 21		cmp #$21			cmp 	#KWD_PLING
.84dc	f0 f3		beq $84d1			beq 	_CRGoLet
.84de	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.84e0	f0 01		beq $84e3			beq 	_CRGoRem
>84e2	db						.byte 	$DB 						; causes a break in the emulator
.84e3					_CRGoRem:
.84e3	c8		iny				iny
.84e4	20 6e 84	jsr $846e			jsr 	RemCommand
.84e7	80 c9		bra $84b2			bra 	_CRMainLoop
.84e9					_CRSyntaxError:
.84e9	4c b3 9b	jmp $9bb3			jmp 	SyntaxError
.84ec					_CRCallVector0:
.84ec	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.84ef					CRNoProgram:
.84ef	4c 32 82	jmp $8232			jmp 	EndCommand
.84f2					EOLCommand:
.84f2	18		clc				clc
.84f3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84f5	65 30		adc $30				adc 	codePtr
.84f7	85 30		sta $30				sta 	codePtr
.84f9	90 02		bcc $84fd			bcc 	_CREExit
.84fb	e6 31		inc $31				inc 	codePtr+1
.84fd					_CREExit:
.84fd	80 a9		bra $84a8			bra 	RunNewLine
.84ff					Shift1Command:
.84ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8501	c8		iny				iny
.8502	0a		asl a				asl 	a
.8503	aa		tax				tax
.8504	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.8507					Unused1:
.8507					Unused2:
.8507					Unused3:
.8507					Unused4:
.8507	4c b3 9b	jmp $9bb3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.850a					StopCommand:
.850a	a9 08		lda #$08		lda	#8
.850c	4c ea 85	jmp $85ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.850f					ProcedureScan:
.850f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8511	85 30		sta $30				sta 	codePtr
.8513	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8515	85 31		sta $31				sta 	codePtr+1
.8517					_PSLoop:
.8517	b2 30		lda ($30)			lda 	(codePtr)
.8519	f0 42		beq $855d			beq 	_PSExit
.851b	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.851d	b1 30		lda ($30),y			lda 	(codePtr),y
.851f	c9 98		cmp #$98			cmp 	#KWD_PROC
.8521	d0 2d		bne $8550			bne 	_PSNext
.8523	c8		iny				iny 								; get the address of the record to zTemp0 and
.8524	b1 30		lda ($30),y			lda 	(codePtr),y
.8526	29 c0		and #$c0			and 	#$C0
.8528	c9 40		cmp #$40			cmp 	#$40
.852a	d0 32		bne $855e			bne 	_PSSyntax
.852c	b1 30		lda ($30),y			lda 	(codePtr),y
.852e	18		clc				clc
.852f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8531	85 37		sta $37				sta 	zTemp0+1
.8533	c8		iny				iny 								; LSB
.8534	b1 30		lda ($30),y			lda 	(codePtr),y
.8536	85 36		sta $36				sta 	zTemp0
.8538	c8		iny				iny 								; character after variable call.
.8539	98		tya				tya 								; save Y offset at +7
.853a	a0 07		ldy #$07			ldy 	#7
.853c	91 36		sta ($36),y			sta 	(zTemp0),y
.853e	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8540	a0 02		ldy #$02			ldy 	#2
.8542	91 36		sta ($36),y			sta 	(zTemp0),y
.8544	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8546					_PSCopy:
.8546	b5 30		lda $30,x			lda 	safePtr,x
.8548	c8		iny				iny
.8549	91 36		sta ($36),y			sta 	(zTemp0),y
.854b	e8		inx				inx
.854c	e0 04		cpx #$04			cpx 	#4
.854e	d0 f6		bne $8546			bne 	_PSCopy
.8550					_PSNext:
.8550	18		clc				clc
.8551	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8553	65 30		adc $30				adc 	codePtr
.8555	85 30		sta $30				sta 	codePtr
.8557	90 02		bcc $855b			bcc 	_CREExit
.8559	e6 31		inc $31				inc 	codePtr+1
.855b					_CREExit:
.855b	80 ba		bra $8517			bra 	_PSLoop
.855d					_PSExit:
.855d	60		rts				rts
.855e					_PSSyntax:
.855e	4c b3 9b	jmp $9bb3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8561					ScanForward:
.8561	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8563	86 37		stx $37				stx 	zTemp0+1
.8565	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8567					_ScanLoop:
.8567	b1 30		lda ($30),y			lda 	(codePtr),y
.8569	c8		iny				iny
.856a	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.856c	d0 09		bne $8577			bne 	_ScanGoNext
.856e	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8570	f0 04		beq $8576			beq 	_ScanMatch
.8572	c5 37		cmp $37				cmp 	zTemp0+1
.8574	d0 01		bne $8577			bne 	_ScanGoNext
.8576					_ScanMatch:
.8576	60		rts				rts
.8577					_ScanGoNext:
.8577	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8579	90 ec		bcc $8567			bcc 	_ScanLoop
.857b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.857d	90 18		bcc $8597			bcc 	_ScanSkipOne
.857f	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8581	b0 2f		bcs $85b2			bcs 	_ScanSkipData
.8583	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8585	90 e0		bcc $8567			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8587	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8589	b0 dc		bcs $8567			bcs 	_ScanLoop
.858b	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.858d	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.858f	b0 d6		bcs $8567			bcs 	_ScanLoop
.8591	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8593	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8595	80 d0		bra $8567			bra 	_ScanLoop
.8597					_ScanSkipOne:
.8597	c8		iny				iny 								; consume the extra one.
.8598	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.859a	d0 cb		bne $8567			bne 	_ScanLoop
.859c	18		clc				clc
.859d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.859f	65 30		adc $30				adc 	codePtr
.85a1	85 30		sta $30				sta 	codePtr
.85a3	90 02		bcc $85a7			bcc 	_CREExit
.85a5	e6 31		inc $31				inc 	codePtr+1
.85a7					_CREExit:
.85a7	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.85a9	b2 30		lda ($30)			lda 	(codePtr)
.85ab	d0 ba		bne $8567			bne 	_ScanLoop 					; if not zero, more to scan
.85ad	a9 13		lda #$13		lda	#19
.85af	4c ea 85	jmp $85ea		jmp	ErrorHandler
.85b2					_ScanSkipData:
.85b2	88		dey				dey 								; point at data token
.85b3	c8		iny				iny
.85b4	98		tya				tya
.85b5	38		sec				sec
.85b6	71 30		adc ($30),y			adc 	(codePtr),y
.85b8	a8		tay				tay
.85b9	80 ac		bra $8567			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.85bb					Command_WHILE:
.85bb	5a		phy				phy 								; save position of the test
.85bc	a2 00		ldx #$00			ldx 	#0
.85be	20 91 90	jsr $9091			jsr 	EvaluateNumber 				; work out the number
.85c1	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; check if zero
.85c4	f0 0e		beq $85d4			beq 	_WHExitLoop 				; if so exit the loop
.85c6	98		tya				tya 								; position *after* test.
.85c7	7a		ply				ply 								; restore position before test, at WHILE
.85c8	88		dey				dey
.85c9	48		pha				pha 								; push after test on the stack
.85ca	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.85cc	20 7a 91	jsr $917a			jsr 	StackOpen
.85cf	20 ac 91	jsr $91ac			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.85d2	7a		ply				ply 								; restore the position *after* the test
.85d3	60		rts				rts
.85d4					_WHExitLoop:
.85d4	68		pla				pla 								; throw post loop position
.85d5	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.85d7	aa		tax				tax
.85d8	20 61 85	jsr $8561			jsr 	ScanForward
.85db	60		rts				rts
.85dc					Command_WEND:
.85dc	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.85de	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.85e0	20 a1 91	jsr $91a1			jsr 	StackCheckFrame
.85e3	20 bd 91	jsr $91bd			jsr 	STKLoadCodePosition 		; loop back
.85e6	20 93 91	jsr $9193			jsr 	StackClose		 			; erase the frame
.85e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.96e3					CheckRightBracket:
.96e3	b1 30		lda ($30),y			lda 	(codePtr),y
.96e5	c8		iny				iny
.96e6	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.96e8	d0 0f		bne $96f9			bne 	CNAFail
.96ea	60		rts				rts
.96eb					CheckComma:
.96eb	b1 30		lda ($30),y			lda 	(codePtr),y
.96ed	c8		iny				iny
.96ee	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.96f0	d0 07		bne $96f9			bne 	CNAFail
.96f2	60		rts				rts
.96f3					CheckNextA:
.96f3	d1 30		cmp ($30),y			cmp 	(codePtr),y
.96f5	d0 02		bne $96f9			bne 	CNAFail
.96f7	c8		iny				iny 								; skip character
.96f8	60		rts				rts 								; and exit
.96f9					CNAFail:
.96f9	4c b3 9b	jmp $9bb3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.85ea					ErrorHandler:
.85ea	a8		tay				tay 								; find the error text
.85eb	f0 49		beq $8636			beq 	_EHEnd
.85ed	a2 00		ldx #$00			ldx 	#0
.85ef	a9 cc		lda #$cc			lda 	#((ErrorText) & $FF)
.85f1	85 36		sta $36				sta 	0+zTemp0
.85f3	a9 9b		lda #$9b			lda 	#((ErrorText) >> 8)
.85f5	85 37		sta $37				sta 	1+zTemp0
.85f7					_EHFind:
.85f7	88		dey				dey 								; found the error text ?
.85f8	f0 0e		beq $8608			beq 	_EHFound
.85fa					_EHFindZero:
.85fa	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.85fc	e6 36		inc $36				inc 	zTemp0
.85fe	d0 02		bne $8602			bne 	_EHFNoCarry
.8600	e6 37		inc $37				inc 	zTemp0+1
.8602					_EHFNoCarry:
.8602	c9 00		cmp #$00			cmp 	#0
.8604	d0 f4		bne $85fa			bne 	_EHFindZero
.8606	80 ef		bra $85f7			bra 	_EHFind
.8608					_EHFound:
.8608	a5 36		lda $36				lda 	zTemp0 						; print message
.860a	a6 37		ldx $37				ldx 	zTemp0+1
.860c	20 43 86	jsr $8643			jsr 	PrintStringXA
.860f	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8611	b1 30		lda ($30),y			lda 	(codePtr),y
.8613	d0 05		bne $861a			bne 	_EHAtMsg
.8615	c8		iny				iny
.8616	b1 30		lda ($30),y			lda 	(codePtr),y
.8618	f0 17		beq $8631			beq 	_EHCREnd
.861a					_EHAtMsg:
.861a	a2 86		ldx #$86			ldx 	#_AtMsg >> 8 				; print " at "
.861c	a9 39		lda #$39			lda 	#_AtMsg & $FF
.861e	20 43 86	jsr $8643			jsr 	PrintStringXA
.8621	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8623	b1 30		lda ($30),y			lda 	(codePtr),y
.8625	48		pha				pha
.8626	c8		iny				iny
.8627	b1 30		lda ($30),y			lda 	(codePtr),y
.8629	aa		tax				tax
.862a	68		pla				pla
.862b	20 3f 98	jsr $983f			jsr 	ConvertInt16 				; convert XA to string
.862e	20 43 86	jsr $8643			jsr 	PrintStringXA 				; and print it.
.8631					_EHCREnd:
.8631	a9 0d		lda #$0d			lda 	#13 						; new line
.8633	20 16 9e	jsr $9e16			jsr 	EXTPrintCharacter
.8636					_EHEnd:
.8636	4c 0c 80	jmp $800c			jmp 	WarmStart
>8639	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8641	20 00
.8643					PrintStringXA:
.8643	5a		phy				phy
.8644	86 37		stx $37				stx 	zTemp0+1
.8646	85 36		sta $36				sta 	zTemp0
.8648	a0 00		ldy #$00			ldy 	#0
.864a					_PSXALoop:
.864a	b1 36		lda ($36),y			lda 	(zTemp0),y
.864c	f0 06		beq $8654			beq 	_PSXAExit
.864e	20 16 9e	jsr $9e16			jsr 	EXTPrintCharacter
.8651	c8		iny				iny
.8652	80 f6		bra $864a			bra 	_PSXALoop
.8654					_PSXAExit:
.8654	7a		ply				ply
.8655	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8656					UnaryTrue:
.8656	fa		plx				plx
.8657					ReturnTrue:
.8657	a9 01		lda #$01			lda 	#1  						; set to 1
.8659	20 3f 91	jsr $913f			jsr 	NSMSetByte
.865c	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.865e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8661	60		rts				rts
.8662					UnaryFalse:
.8662	fa		plx				plx
.8663					ReturnFalse:
.8663	4c 3d 91	jmp $913d			jmp 	NSMSetZero 					; set it all to zero
.8666					BinaryCompareEqual:
.8666	fa		plx				plx
.8667	20 a2 86	jsr $86a2			jsr 	CompareBaseCode
.866a	c9 00		cmp #$00			cmp 	#0
.866c	f0 e9		beq $8657			beq 	ReturnTrue
.866e	80 f3		bra $8663			bra 	ReturnFalse
.8670					BinaryCompareLess:
.8670	fa		plx				plx
.8671	20 a2 86	jsr $86a2			jsr 	CompareBaseCode
.8674	c9 ff		cmp #$ff			cmp 	#$FF
.8676	f0 df		beq $8657			beq 	ReturnTrue
.8678	80 e9		bra $8663			bra 	ReturnFalse
.867a					BinaryCompareGreater:
.867a	fa		plx				plx
.867b	20 a2 86	jsr $86a2			jsr 	CompareBaseCode
.867e	c9 01		cmp #$01			cmp 	#1
.8680	f0 d5		beq $8657			beq 	ReturnTrue
.8682	80 df		bra $8663			bra 	ReturnFalse
.8684					BinaryCompareNotEqual:
.8684	fa		plx				plx
.8685	20 a2 86	jsr $86a2			jsr 	CompareBaseCode
.8688	c9 00		cmp #$00			cmp 	#0
.868a	d0 cb		bne $8657			bne 	ReturnTrue
.868c	80 d5		bra $8663			bra 	ReturnFalse
.868e					BinaryCompareLessEqual:
.868e	fa		plx				plx
.868f	20 a2 86	jsr $86a2			jsr 	CompareBaseCode
.8692	c9 01		cmp #$01			cmp 	#1
.8694	d0 c1		bne $8657			bne 	ReturnTrue
.8696	80 cb		bra $8663			bra 	ReturnFalse
.8698					BinaryCompareGreaterEqual:
.8698	fa		plx				plx
.8699	20 a2 86	jsr $86a2			jsr 	CompareBaseCode
.869c	c9 ff		cmp #$ff			cmp 	#$FF
.869e	d0 b7		bne $8657			bne 	ReturnTrue
.86a0	80 c1		bra $8663			bra 	ReturnFalse
.86a2					CompareBaseCode:
.86a2	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; make both values if references.
.86a5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.86a8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86ab	29 10		and #$10			and 	#NSTString
.86ad	d0 40		bne $86ef			bne 	_CBCString
.86af	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.86b2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86b5	d0 3b		bne $86f2			bne 	_CBCFloat
.86b7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86ba	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86bd	29 08		and #$08			and 	#NSTFloat
.86bf	d0 31		bne $86f2			bne 	_CBCFloat
.86c1	20 f5 86	jsr $86f5			jsr 	CompareFixMinusZero
.86c4	e8		inx				inx
.86c5	20 f5 86	jsr $86f5			jsr 	CompareFixMinusZero
.86c8	ca		dex				dex
.86c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.86cc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86cf	10 0b		bpl $86dc			bpl 	_CDCSameSign
.86d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.86d4	30 16		bmi $86ec			bmi 	_CBCLess 					; return $FF
.86d6					_CBCGreater:
.86d6	a9 01		lda #$01			lda 	#1
.86d8	60		rts				rts
.86d9					_CBCEqual:
.86d9	a9 00		lda #$00			lda 	#0
.86db	60		rts				rts
.86dc					_CDCSameSign:
.86dc	20 05 88	jsr $8805			jsr 	SubTopTwoStack 				; unsigned subtract
.86df	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; or the mantissa together
.86e2	f0 f5		beq $86d9			beq 	_CBCEqual 					; -0 == 0
.86e4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.86e7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.86ea	10 ea		bpl $86d6			bpl 	_CBCGreater
.86ec					_CBCLess:
.86ec	a9 ff		lda #$ff			lda 	#$FF
.86ee	60		rts				rts
.86ef					_CBCString:
.86ef	4c 5b 87	jmp $875b			jmp 	CompareStrings
.86f2					_CBCFloat:
.86f2	4c 3b 99	jmp $993b			jmp 	CompareFloat
.86f5					CompareFixMinusZero:
.86f5	20 6d 91	jsr $916d			jsr 	NSMIsZero
.86f8	d0 03		bne $86fd			bne 	_CFXMZNotZero
.86fa	9e 00 06	stz $0600,x			stz 	NSStatus,x
.86fd					_CFXMZNotZero:
.86fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.86fe					StringConcat:
.86fe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8701	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8704	29 18		and #$18			and 	#NSBTypeMask
.8706	c9 10		cmp #$10			cmp 	#NSTString
.8708	d0 4e		bne $8758			bne		_SCType
.870a	64 38		stz $38				stz 	zTemp1 						; counting total length
.870c	e8		inx				inx
.870d	20 2b 87	jsr $872b			jsr 	_SCSetupZ0 					; setup for second
.8710	20 36 87	jsr $8736			jsr 	_SCLengthZ0 				; length for second
.8713	ca		dex				dex
.8714	20 2b 87	jsr $872b			jsr 	_SCSetupZ0 					; setup for first
.8717	20 36 87	jsr $8736			jsr 	_SCLengthZ0 				; length for first
.871a	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.871c	20 ad 9d	jsr $9dad			jsr 	StringTempAllocate
.871f	20 49 87	jsr $8749			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8722	e8		inx				inx
.8723	20 2b 87	jsr $872b			jsr 	_SCSetupZ0 					; copy second out
.8726	20 49 87	jsr $8749			jsr 	_SCCopy
.8729	ca		dex				dex
.872a	60		rts				rts
.872b					_SCSetupZ0:
.872b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.872e	85 36		sta $36				sta 	zTemp0
.8730	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8733	85 37		sta $37				sta 	zTemp0+1
.8735	60		rts				rts
.8736					_SCLengthZ0:
.8736	5a		phy				phy
.8737	a0 00		ldy #$00			ldy 	#0
.8739					_SCLenLoop:
.8739	b1 36		lda ($36),y			lda 	(zTemp0),y
.873b	f0 0a		beq $8747			beq 	_SCLExit
.873d	c8		iny				iny
.873e	e6 38		inc $38				inc 	zTemp1
.8740	10 f7		bpl $8739			bpl		_SCLenLoop
.8742	a9 09		lda #$09		lda	#9
.8744	4c ea 85	jmp $85ea		jmp	ErrorHandler
.8747					_SCLExit:
.8747	7a		ply				ply
.8748	60		rts				rts
.8749					_SCCopy:
.8749	5a		phy				phy
.874a	a0 00		ldy #$00			ldy 	#0
.874c					_SCCopyLoop:
.874c	b1 36		lda ($36),y			lda 	(zTemp0),y
.874e	f0 06		beq $8756			beq 	_SCCExit
.8750	20 eb 9d	jsr $9deb			jsr 	StringTempWrite
.8753	c8		iny				iny
.8754	80 f6		bra $874c			bra 	_SCCopyLoop
.8756					_SCCExit:
.8756	7a		ply				ply
.8757	60		rts				rts
.8758					_SCType:
.8758	4c bd 9b	jmp $9bbd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.96fc					IntegerDivide:
.96fc	fa		plx				plx
.96fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9700	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9703	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9704	0a		asl a				asl 	a
.9705	10 05		bpl $970c			bpl 	_NotRef
.9707	48		pha				pha
.9708	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.970b	68		pla				pla
.970c					_NotRef:
.970c	0a		asl a				asl 	a
.970d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.970f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9712	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9715	f0 03		beq $971a			beq 	_IntegerCode 				; if clear, then we have two integers
.9717	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.971a					_IntegerCode:
.971a	20 3c 97	jsr $973c			jsr 	CheckDivideZero 			; do div zero check
.971d	20 74 97	jsr $9774			jsr 	Int32Divide 				; do the division
.9720	20 31 98	jsr $9831			jsr 	CalculateSign 				; calculate result sign
.9723					NSMCopyPlusTwoToZero:
.9723	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9726	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9729	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.972c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.972f	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9732	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9735	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9738	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.973b	60		rts				rts
.973c					CheckDivideZero:
.973c	e8		inx				inx
.973d	20 6d 91	jsr $916d			jsr 	NSMIsZero
.9740	f0 02		beq $9744			beq 	_CDVError
.9742	ca		dex				dex
.9743	60		rts				rts
.9744					_CDVError:
.9744	a9 03		lda #$03		lda	#3
.9746	4c ea 85	jmp $85ea		jmp	ErrorHandler
.9749					IntegerModulus:
.9749	fa		plx				plx
.974a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.974d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9750	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9751	0a		asl a				asl 	a
.9752	10 05		bpl $9759			bpl 	_NotRef
.9754	48		pha				pha
.9755	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9758	68		pla				pla
.9759					_NotRef:
.9759	0a		asl a				asl 	a
.975a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.975c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.975f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9762	f0 03		beq $9767			beq 	_IntegerCode 				; if clear, then we have two integers
.9764	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.9767					_IntegerCode:
.9767	20 3c 97	jsr $973c			jsr 	CheckDivideZero 			; do div zero check
.976a	20 74 97	jsr $9774			jsr 	Int32Divide 				; do the division
.976d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9770	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9773	60		rts				rts
.9774					Int32Divide:
.9774	48		pha				pha 								; save AXY
.9775	5a		phy				phy
.9776	20 14 91	jsr $9114			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9779	20 39 91	jsr $9139			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.977c	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.977e					_I32DivideLoop:
.977e	e8		inx				inx
.977f	e8		inx				inx
.9780	20 52 91	jsr $9152			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9783	ca		dex				dex
.9784	ca		dex				dex
.9785	20 53 91	jsr $9153			jsr 	NSMRotateLeft
.9788	20 b4 97	jsr $97b4			jsr 	DivideCheckSubtract 		; check if subtract possible
.978b	90 03		bcc $9790			bcc 	_I32DivideNoCarryIn
.978d	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9790					_I32DivideNoCarryIn:
.9790	88		dey				dey 								; loop round till division completed.
.9791	d0 eb		bne $977e			bne 	_I32DivideLoop
.9793	7a		ply				ply 								; restore AXY and exit
.9794	68		pla				pla
.9795	60		rts				rts
.9796					Int32ShiftDivide:
.9796	48		pha				pha 								; save AY
.9797	5a		phy				phy
.9798	e8		inx				inx 								; clear S[X+2]
.9799	e8		inx				inx
.979a	20 3d 91	jsr $913d			jsr 	NSMSetZero
.979d	ca		dex				dex
.979e	ca		dex				dex
.979f	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.97a1					_I32SDLoop:
.97a1	20 b4 97	jsr $97b4			jsr 	DivideCheckSubtract 		; check if subtract possible
.97a4	e8		inx				inx
.97a5	e8		inx				inx
.97a6	20 53 91	jsr $9153			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.97a9	ca		dex				dex
.97aa	ca		dex				dex
.97ab	20 53 91	jsr $9153			jsr 	NSMRotateLeft
.97ae	88		dey				dey 	 							; do 31 times
.97af	d0 f0		bne $97a1			bne 	_I32SDLoop
.97b1	7a		ply				ply 								; restore AY and exit
.97b2	68		pla				pla
.97b3	60		rts				rts
.97b4					DivideCheckSubtract:
.97b4	20 05 88	jsr $8805			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.97b7	b0 04		bcs $97bd			bcs 	_DCSExit 					; if carry set, then could do, exit
.97b9	20 df 87	jsr $87df			jsr 	AddTopTwoStack 				; add it back in
.97bc	18		clc				clc 								; and return False
.97bd					_DCSExit:
.97bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.97be					MulInteger:
.97be	fa		plx				plx
.97bf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.97c2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.97c5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97c6	0a		asl a				asl 	a
.97c7	10 05		bpl $97ce			bpl 	_NotRef
.97c9	48		pha				pha
.97ca	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97cd	68		pla				pla
.97ce					_NotRef:
.97ce	0a		asl a				asl 	a 							; put MSB of type into A:7
.97cf	30 0b		bmi $97dc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97d1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97d4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.97d7	f0 06		beq $97df			beq 	_IntegerCode 				; if clear, then we have two integers
.97d9	4c 12 9a	jmp $9a12			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.97dc					_StringData:
.97dc	4c c7 9b	jmp $9bc7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.97df					_IntegerCode:
.97df	20 ec 97	jsr $97ec			jsr 	MultiplyShort
.97e2	c9 00		cmp #$00			cmp 	#0
.97e4	f0 05		beq $97eb			beq 	_MIExit
.97e6	a9 04		lda #$04		lda	#4
.97e8	4c ea 85	jmp $85ea		jmp	ErrorHandler
.97eb					_MIExit:
.97eb	60		rts				rts
.97ec					MultiplyShort:
.97ec	5a		phy				phy 								; save Y
.97ed	20 14 91	jsr $9114			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.97f0	20 39 91	jsr $9139			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.97f3	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.97f5					_I32MLoop:
.97f5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.97f8	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.97fb	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.97fe	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9801	f0 28		beq $982b			beq 	_I32MExit 					; exit if zero
.9803	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9806	29 01		and #$01			and 	#1
.9808	f0 0e		beq $9818			beq 	_I32MNoAdd
.980a	20 df 87	jsr $87df			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.980d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9810	10 06		bpl $9818			bpl 	_I32MNoAdd
.9812					_I32ShiftRight:
.9812	20 60 91	jsr $9160			jsr 	NSMShiftRight 				; shift S[X] right
.9815	c8		iny				iny 								; increment shift count
.9816	80 0a		bra $9822			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9818					_I32MNoAdd:
.9818	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.981b	70 f5		bvs $9812			bvs 	_I32ShiftRight 				; instead.
.981d	e8		inx				inx
.981e	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9821	ca		dex				dex
.9822					_I32MShiftUpper:
.9822	e8		inx				inx 								; shift S[X+2] right
.9823	e8		inx				inx
.9824	20 60 91	jsr $9160			jsr 	NSMShiftRight
.9827	ca		dex				dex
.9828	ca		dex				dex
.9829	80 ca		bra $97f5			bra 	_I32MLoop 					; try again.
.982b					_I32MExit:
.982b	20 31 98	jsr $9831			jsr 	CalculateSign
.982e	98		tya				tya 								; shift in A
.982f	7a		ply				ply 								; restore Y and exit
.9830	60		rts				rts
.9831					CalculateSign:
.9831	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9834	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9837	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.983a	0a		asl a				asl 	a 							; shift bit 7 into carry
.983b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.983e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.875b					CompareStrings:
.875b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.875e	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8761	29 10		and #$10			and 	#NSBIsString
.8763	f0 2c		beq $8791			beq 	_CSTypeError
.8765	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8768	85 36		sta $36				sta 	zTemp0
.876a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.876d	85 37		sta $37				sta 	zTemp0+1
.876f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8772	85 38		sta $38				sta 	zTemp1
.8774	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8777	85 39		sta $39				sta 	zTemp1+1
.8779	5a		phy				phy 								; save Y so we can access strings
.877a	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.877c					_CSLoop:
.877c	c8		iny				iny
.877d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.877f	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8781	d0 06		bne $8789			bne 	_CSDifferent
.8783	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8785	d0 f5		bne $877c			bne 	_CSLoop 					; still comparing
.8787					_CSExit:
.8787	7a		ply				ply 								; reached end, return zero in A from EOS
.8788	60		rts				rts
.8789					_CSDifferent:
.8789	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.878b	90 fa		bcc $8787			bcc		_CSExit
.878d	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.878f	80 f6		bra $8787			bra 	_CSExit
.8791					_CSTypeError:
.8791	4c bd 9b	jmp $9bbd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8794					ShiftLeft:
.8794	38		sec				sec
.8795	80 01		bra $8798			bra 	ShiftMain
.8797					ShiftRight:
.8797	18		clc				clc
.8798					ShiftMain:
.8798	fa		plx				plx 								; restore X
.8799	08		php				php 								; save direction
.879a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.879d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87a0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87a1	0a		asl a				asl 	a
.87a2	10 05		bpl $87a9			bpl 	_NotRef
.87a4	48		pha				pha
.87a5	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87a8	68		pla				pla
.87a9					_NotRef:
.87a9	0a		asl a				asl 	a
.87aa	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87ac	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87af	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87b2	f0 03		beq $87b7			beq 	_IntegerCode 				; if clear, then we have two integers
.87b4	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.87b7					_IntegerCode:
.87b7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.87ba	29 e0		and #$e0			and 	#$E0
.87bc	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.87bf	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.87c2	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.87c5	d0 13		bne $87da			bne 	_SMExit0 					; if >= 32 it will always return zero.
.87c7					_SMLoop:
.87c7	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.87ca	30 11		bmi $87dd			bmi 	_SMExit 					; exit if done.
.87cc	28		plp				plp 								; restore direcition setting
.87cd	08		php				php
.87ce	90 05		bcc $87d5			bcc 	_SMRight
.87d0	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; shift left if CS
.87d3	80 f2		bra $87c7			bra 	_SMLoop
.87d5					_SMRight:
.87d5	20 60 91	jsr $9160			jsr 	NSMShiftRight 				; shift right if CC
.87d8	80 ed		bra $87c7			bra 	_SMLoop
.87da					_SMExit0:
.87da	20 3d 91	jsr $913d			jsr 	NSMSetZero 					; return zero.
.87dd					_SMExit:
.87dd	28		plp				plp 								; throw direction
.87de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.87df					AddTopTwoStack:
.87df	18		clc				clc
.87e0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87e3	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.87e6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87e9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87ec	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.87ef	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87f2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87f5	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.87f8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87fb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87fe	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8801	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8804	60		rts				rts
.8805					SubTopTwoStack:
.8805	38		sec				sec
.8806	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8809	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.880c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.880f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8812	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8815	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8818	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.881b	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.881e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8821	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8824	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8827	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.882a	60		rts				rts
.882b					AddInteger:
.882b	fa		plx				plx
.882c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.882f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8832	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8833	0a		asl a				asl 	a
.8834	10 05		bpl $883b			bpl 	_NotRef
.8836	48		pha				pha
.8837	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.883a	68		pla				pla
.883b					_NotRef:
.883b	0a		asl a				asl 	a 							; put MSB of type into A:7
.883c	30 0b		bmi $8849			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.883e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8841	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8844	f0 06		beq $884c			beq 	_IntegerCode 				; if clear, then we have two integers
.8846	4c 9a 98	jmp $989a			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8849					_StringData:
.8849	4c fe 86	jmp $86fe			jmp 	StringConcat							; at least one string - don't know both are strings.
.884c					_IntegerCode:
.884c					AddCode:
.884c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.884f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8852	10 8b		bpl $87df			bpl 	AddTopTwoStack
.8854	20 05 88	jsr $8805			jsr 	SubTopTwoStack 				; do a physical subtraction
.8857	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.885a	10 09		bpl $8865			bpl 	_AddExit
.885c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.885f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8862	20 f2 90	jsr $90f2			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8865					_AddExit:
.8865	60		rts				rts
.8866					SubInteger:
.8866	fa		plx				plx
.8867	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.886a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.886d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.886e	0a		asl a				asl 	a
.886f	10 05		bpl $8876			bpl 	_NotRef
.8871	48		pha				pha
.8872	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8875	68		pla				pla
.8876					_NotRef:
.8876	0a		asl a				asl 	a 							; put MSB of type into A:7
.8877	30 0b		bmi $8884			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8879	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.887c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.887f	f0 06		beq $8887			beq 	_IntegerCode 				; if clear, then we have two integers
.8881	4c 9f 98	jmp $989f			jmp 	FloatingPointSub 							; otherwise at least one float.
.8884					_StringData:
.8884	4c c7 9b	jmp $9bc7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8887					_IntegerCode:
.8887	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.888a	49 80		eor #$80			eor 	#$80
.888c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.888f	80 bb		bra $884c			bra 	AddCode 					; and do the same code as add.
.8891					AndInteger:
.8891	fa		plx				plx
.8892	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8895	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8898	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8899	0a		asl a				asl 	a
.889a	10 05		bpl $88a1			bpl 	_NotRef
.889c	48		pha				pha
.889d	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88a0	68		pla				pla
.88a1					_NotRef:
.88a1	0a		asl a				asl 	a
.88a2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88a4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88a7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88aa	f0 03		beq $88af			beq 	_IntegerCode 				; if clear, then we have two integers
.88ac	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.88af					_IntegerCode:
.88af	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.88b2	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.88b5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88b8	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.88bb	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.88be	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88c1	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.88c4	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.88c7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.88ca	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.88cd	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.88d0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.88d3	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.88d6	60		rts				rts
.88d7					OraInteger:
.88d7	fa		plx				plx
.88d8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88db	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88de	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88df	0a		asl a				asl 	a
.88e0	10 05		bpl $88e7			bpl 	_NotRef
.88e2	48		pha				pha
.88e3	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88e6	68		pla				pla
.88e7					_NotRef:
.88e7	0a		asl a				asl 	a
.88e8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88ea	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88ed	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88f0	f0 03		beq $88f5			beq 	_IntegerCode 				; if clear, then we have two integers
.88f2	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.88f5					_IntegerCode:
.88f5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.88f8	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.88fb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88fe	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8901	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8904	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8907	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.890a	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.890d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8910	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8913	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8916	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8919	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.891c	60		rts				rts
.891d					EorInteger:
.891d	fa		plx				plx
.891e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8921	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8924	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8925	0a		asl a				asl 	a
.8926	10 05		bpl $892d			bpl 	_NotRef
.8928	48		pha				pha
.8929	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.892c	68		pla				pla
.892d					_NotRef:
.892d	0a		asl a				asl 	a
.892e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8930	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8933	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8936	f0 03		beq $893b			beq 	_IntegerCode 				; if clear, then we have two integers
.8938	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.893b					_IntegerCode:
.893b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.893e	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8941	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8944	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8947	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.894a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.894d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8950	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8953	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8956	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8959	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.895c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.895f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8962	60		rts				rts
.8963					WordIndirect:
.8963	fa		plx				plx
.8964	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8967	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.896a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.896b	0a		asl a				asl 	a
.896c	10 05		bpl $8973			bpl 	_NotRef
.896e	48		pha				pha
.896f	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8972	68		pla				pla
.8973					_NotRef:
.8973	0a		asl a				asl 	a
.8974	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8976	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8979	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.897c	f0 03		beq $8981			beq 	_IntegerCode 				; if clear, then we have two integers
.897e	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.8981					_IntegerCode:
.8981	20 4c 88	jsr $884c			jsr 	AddCode 					; add the two values
.8984	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8986	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8989	60		rts				rts
.898a					ByteIndirect:
.898a	fa		plx				plx
.898b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.898e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8991	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8992	0a		asl a				asl 	a
.8993	10 05		bpl $899a			bpl 	_NotRef
.8995	48		pha				pha
.8996	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8999	68		pla				pla
.899a					_NotRef:
.899a	0a		asl a				asl 	a
.899b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.899d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.89a0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.89a3	f0 03		beq $89a8			beq 	_IntegerCode 				; if clear, then we have two integers
.89a5	4c bd 9b	jmp $9bbd			jmp 	TypeError 					; anything else, type mismatch.
.89a8					_IntegerCode:
.89a8	20 4c 88	jsr $884c			jsr 	AddCode 					; add the two values
.89ab	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.89ad	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.983f					ConvertInt16:
.983f	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9842	8e 10 06	stx $0610			stx 	NSMantissa1
.9845	9c 18 06	stz $0618			stz 	NSMantissa2
.9848	9c 20 06	stz $0620			stz 	NSMantissa3
.984b	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.984e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9850	a9 0a		lda #$0a			lda 	#10 						; base
.9852	80 00		bra $9854			bra 	ConvertInt32
.9854					ConvertInt32:
.9854	5a		phy				phy
.9855	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9857	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.985a	10 08		bpl $9864			bpl 	_CI32NotNeg
.985c	48		pha				pha
.985d	a9 2d		lda #$2d			lda 	#'-'
.985f	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9862	c8		iny				iny
.9863	68		pla				pla
.9864					_CI32NotNeg:
.9864	20 72 98	jsr $9872			jsr 	_CI32DivideConvert 			; recursive conversion
.9867	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9869	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.986c	7a		ply				ply
.986d	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.986f	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9871	60		rts				rts
.9872					_CI32DivideConvert:
.9872	e8		inx				inx 								; write to next slot up
.9873	20 3f 91	jsr $913f			jsr 	NSMSetByte
.9876	ca		dex				dex
.9877	20 74 97	jsr $9774			jsr 	Int32Divide 				; divide
.987a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.987d	48		pha				pha
.987e	20 23 97	jsr $9723			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9881	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; is it zero ?
.9884	f0 06		beq $988c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9886	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9889	20 72 98	jsr $9872			jsr 	_CI32DivideConvert 			; and recusrively call.
.988c					_CI32NoRecurse:
.988c	68		pla				pla 								; remainder
.988d	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.988f	90 02		bcc $9893			bcc 	_CI32NotHex
.9891	69 26		adc #$26			adc 	#6+32
.9893					_CI32NotHex:
.9893	69 30		adc #$30			adc 	#48
.9895	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9898	c8		iny				iny
.9899	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.89b1					PrecedenceLevel:
>89b1	04					.byte	 4	; $00 <<
>89b2	02					.byte	 2	; $01 <=
>89b3	02					.byte	 2	; $02 <>
>89b4	00					.byte	 0	; $03 !!3
>89b5	00					.byte	 0	; $04 ><
>89b6	02					.byte	 2	; $05 >=
>89b7	04					.byte	 4	; $06 >>
>89b8	00					.byte	 0	; $07 !!7
>89b9	00					.byte	 0	; $08 !!8
>89ba	00					.byte	 0	; $09 !!9
>89bb	00					.byte	 0	; $0a !!10
>89bc	00					.byte	 0	; $0b !!11
>89bd	00					.byte	 0	; $0c !!12
>89be	00					.byte	 0	; $0d !!13
>89bf	00					.byte	 0	; $0e !!14
>89c0	00					.byte	 0	; $0f !!15
>89c1	00					.byte	 0	; $10 @
>89c2	00					.byte	 0	; $11 !!17
>89c3	00					.byte	 0	; $12 !!18
>89c4	00					.byte	 0	; $13 [
>89c5	04					.byte	 4	; $14 \
>89c6	00					.byte	 0	; $15 ]
>89c7	01					.byte	 1	; $16 ^
>89c8	00					.byte	 0	; $17 _
>89c9	00					.byte	 0	; $18 `
>89ca	00					.byte	 0	; $19 !!25
>89cb	00					.byte	 0	; $1a !!26
>89cc	00					.byte	 0	; $1b {
>89cd	01					.byte	 1	; $1c |
>89ce	00					.byte	 0	; $1d }
>89cf	00					.byte	 0	; $1e ~
>89d0	00					.byte	 0	; $1f [7m<7F>[m
>89d1	00					.byte	 0	; $20
>89d2	05					.byte	 5	; $21 !
>89d3	00					.byte	 0	; $22 "
>89d4	00					.byte	 0	; $23 #
>89d5	05					.byte	 5	; $24 $
>89d6	04					.byte	 4	; $25 %
>89d7	01					.byte	 1	; $26 &
>89d8	00					.byte	 0	; $27 '
>89d9	00					.byte	 0	; $28 (
>89da	00					.byte	 0	; $29 )
>89db	04					.byte	 4	; $2a *
>89dc	03					.byte	 3	; $2b +
>89dd	00					.byte	 0	; $2c ,
>89de	03					.byte	 3	; $2d -
>89df	00					.byte	 0	; $2e .
>89e0	04					.byte	 4	; $2f /
>89e1	00					.byte	 0	; $30 0
>89e2	00					.byte	 0	; $31 1
>89e3	00					.byte	 0	; $32 2
>89e4	00					.byte	 0	; $33 3
>89e5	00					.byte	 0	; $34 4
>89e6	00					.byte	 0	; $35 5
>89e7	00					.byte	 0	; $36 6
>89e8	00					.byte	 0	; $37 7
>89e9	00					.byte	 0	; $38 8
>89ea	00					.byte	 0	; $39 9
>89eb	00					.byte	 0	; $3a :
>89ec	00					.byte	 0	; $3b ;
>89ed	02					.byte	 2	; $3c <
>89ee	02					.byte	 2	; $3d =
>89ef	02					.byte	 2	; $3e >
>89f0	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.89f1					EvaluateExpressionAt0:
.89f1	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.89f3					EvaluateExpression:
.89f3	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.89f5					EvaluateExpressionAtPrecedence:
.89f5	48		pha				pha 								; save precedence level
.89f6	20 c4 8c	jsr $8cc4			jsr 	EvaluateTerm 				; evaluate term into level X.
.89f9	68		pla				pla 								; restore precedence level.
.89fa					_EXPRLoop:
.89fa	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.89fc	b1 30		lda ($30),y			lda 	(codePtr),y
.89fe	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8a00	b0 25		bcs $8a27			bcs 	_EXPRExit
.8a02	da		phx				phx 								; read the operator precedence
.8a03	aa		tax				tax
.8a04	bd b1 89	lda $89b1,x			lda 	PrecedenceLevel,x
.8a07	fa		plx				plx
.8a08	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8a0a	f0 1b		beq $8a27			beq 	_EXPRExit
.8a0c	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8a0e	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8a10	c5 37		cmp $37				cmp 	zTemp0+1
.8a12	b0 13		bcs $8a27			bcs		_EXPRExit 					; if current >= operator exit
.8a14	48		pha				pha 								; save current precedence.
.8a15	b1 30		lda ($30),y			lda 	(codePtr),y
.8a17	c8		iny				iny
.8a18	48		pha				pha
.8a19	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8a1b	e8		inx				inx 								; work out the right hand side.
.8a1c	20 f5 89	jsr $89f5			jsr 	EvaluateExpressionAtPrecedence
.8a1f	ca		dex				dex
.8a20	68		pla				pla 								; get operator, call the code.
.8a21	20 2a 8a	jsr $8a2a			jsr 	_EXPRCaller
.8a24	68		pla				pla 								; restore precedence level
.8a25	80 d3		bra $89fa			bra 	_EXPRLoop 					; and go round.
.8a27					_EXPRExit:
.8a27	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8a29	60		rts				rts
.8a2a					_EXPRCaller:
.8a2a	da		phx				phx 								; save on stack, first thing is to restore it
.8a2b	0a		asl a				asl 	a 							; double so can use vectors into X
.8a2c	aa		tax				tax
.8a2d	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.989a					FloatingPointAdd:
.989a	20 3b 9a	jsr $9a3b			jsr 	FloatPrepare 				; prepare for floats
.989d	80 0b		bra $98aa			bra 	FloatAdd
.989f					FloatingPointSub:
.989f	20 3b 9a	jsr $9a3b			jsr 	FloatPrepare 				; prepare for floats
.98a2					FloatSubtract:
.98a2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.98a5	49 80		eor #$80			eor 	#$80
.98a7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.98aa					FloatAdd:
.98aa	48		pha				pha
.98ab	5a		phy				phy
.98ac	20 4c 9a	jsr $9a4c			jsr 	NSNormalise 				; normalise S[X]
.98af	f0 54		beq $9905			beq 	_FAReturn1
.98b1	e8		inx				inx 								; normalise S[X+1]
.98b2	20 4c 9a	jsr $9a4c			jsr 	NSNormalise
.98b5	ca		dex				dex
.98b6	c9 00		cmp #$00			cmp 	#0
.98b8	f0 6f		beq $9929			beq 	_FAExit 					; if so, just return A
.98ba	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.98bd	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.98c0	f0 1b		beq $98dd			beq 	_FAExponentsEqual
.98c2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.98c5	a8		tay				tay
.98c6	38		sec				sec 								; do a signed comparison of the exponents.
.98c7	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.98ca	50 02		bvc $98ce			bvc 	_FANoSignedChange
.98cc	49 80		eor #$80			eor 	#$80
.98ce					_FANoSignedChange:
.98ce	29 80		and #$80			and 	#$80
.98d0	10 03		bpl $98d5			bpl 	_FAHaveMax
.98d2	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.98d5					_FAHaveMax:
.98d5	20 2c 99	jsr $992c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.98d8	e8		inx				inx
.98d9	20 2c 99	jsr $992c			jsr 	_FAShiftToExponent
.98dc	ca		dex				dex
.98dd					_FAExponentsEqual:
.98dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.98e0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.98e3	30 10		bmi $98f5			bmi 	_FADifferentSigns
.98e5	20 df 87	jsr $87df			jsr 	AddTopTwoStack 				; do the add of the mantissae
.98e8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.98eb	10 3c		bpl $9929			bpl 	_FAExit 					; if no, we are done.
.98ed	20 60 91	jsr $9160			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.98f0	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.98f3	80 34		bra $9929			bra 	_FAExit
.98f5					_FADifferentSigns:
.98f5	20 05 88	jsr $8805			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.98f8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.98fb	10 2c		bpl $9929			bpl 	_FAExit 					; if no, we are done.
.98fd	20 e9 90	jsr $90e9			jsr 	NSMNegate 					; netate result
.9900	20 f2 90	jsr $90f2			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9903	80 24		bra $9929			bra 	_FAExit
.9905					_FAReturn1:
.9905	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9908	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.990b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.990e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9911	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9914	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9917	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.991a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.991d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9920	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9923	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9926	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9929					_FAExit:
.9929	7a		ply				ply
.992a	68		pla				pla
.992b	60		rts				rts
.992c					_FAShiftToExponent:
.992c					_FAShiftToExponent2:
.992c	98		tya				tya 								; compare Y to exponent
.992d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9930	f0 08		beq $993a			beq 	_FASEExit 					; exit if so.
.9932	20 60 91	jsr $9160			jsr 	NSMShiftRight	 			; shift the mantissa right
.9935	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9938	80 f2		bra $992c			bra 	_FAShiftToExponent2
.993a					_FASEExit:
.993a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.993b					CompareFloat:
.993b	20 a2 98	jsr $98a2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.993e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9941	29 f8		and #$f8			and 	#$F8
.9943	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9946	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9949	f0 09		beq $9954			beq 	_FCExit 					; zero, so approximately identical
.994b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.994d	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9950	10 02		bpl $9954			bpl 	_FCExit
.9952					_FCNegative:
.9952	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9954					_FCExit:
.9954	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9955					FDivideCommand:
.9955	fa		plx				plx	 								; restore stack position
.9956	20 3b 9a	jsr $9a3b			jsr 	FloatPrepare 				; prepare for floats
.9959					FloatDivide:
.9959	48		pha				pha
.995a	e8		inx				inx
.995b	20 4c 9a	jsr $9a4c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.995e	ca		dex				dex
.995f	c9 00		cmp #$00			cmp 	#0
.9961	f0 20		beq $9983			beq 	_FDZero
.9963	20 4c 9a	jsr $9a4c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9966	f0 19		beq $9981			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9968	20 96 97	jsr $9796			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.996b	20 23 97	jsr $9723			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.996e	20 4c 9a	jsr $9a4c			jsr		NSNormalise 				; renormalise
.9971	20 31 98	jsr $9831			jsr 	CalculateSign 				; calculate result sign
.9974	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9977	38		sec				sec
.9978	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.997b	38		sec				sec
.997c	e9 1e		sbc #$1e			sbc 	#30
.997e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9981					_FDExit:
.9981	68		pla				pla
.9982	60		rts				rts
.9983					_FDZero:
.9983	a9 03		lda #$03		lda	#3
.9985	4c ea 85	jmp $85ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9988					FloatFractionalPart:
.9988	5a		phy				phy
.9989	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.998c	29 7f		and #$7f			and 	#$7F
.998e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9991	20 4c 9a	jsr $9a4c			jsr 	NSNormalise
.9994	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9997	38		sec				sec
.9998	e9 e0		sbc #$e0			sbc 	#$E0
.999a	90 31		bcc $99cd			bcc 	_FFPExit 					; already fractional
.999c	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.999e	b0 2a		bcs $99ca			bcs 	_FFPZero
.99a0	a8		tay				tay 								; put count to do in Y
.99a1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.99a4	20 cf 99	jsr $99cf			jsr 	_FFPPartial
.99a7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.99aa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.99ad	20 cf 99	jsr $99cf			jsr 	_FFPPartial
.99b0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.99b3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.99b6	20 cf 99	jsr $99cf			jsr 	_FFPPartial
.99b9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.99bc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.99bf	20 cf 99	jsr $99cf			jsr 	_FFPPartial
.99c2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.99c5	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; zeroed check.
.99c8	d0 03		bne $99cd			bne 	_FFPExit
.99ca					_FFPZero:
.99ca	20 3d 91	jsr $913d			jsr 	NSMSetZero
.99cd					_FFPExit:
.99cd	7a		ply				ply
.99ce	60		rts				rts
.99cf					_FFPPartial:
.99cf	c0 00		cpy #$00			cpy 	#0 							; no more to do
.99d1	f0 17		beq $99ea			beq 	_FFFPPExit
.99d3	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.99d5	b0 0c		bcs $99e3			bcs 	_FFFPPWholeByte
.99d7	5a		phy				phy
.99d8					_FFFPPLeft:
.99d8	0a		asl a				asl 	a
.99d9	88		dey				dey
.99da	d0 fc		bne $99d8			bne 	_FFFPPLeft
.99dc	7a		ply				ply
.99dd					_FFFPPRight:
.99dd	4a		lsr a				lsr 	a
.99de	88		dey				dey
.99df	d0 fc		bne $99dd			bne 	_FFFPPRight
.99e1	80 07		bra $99ea			bra 	_FFFPPExit
.99e3					_FFFPPWholeByte:
.99e3	98		tya				tya 								; subtract 8 from count
.99e4	38		sec				sec
.99e5	e9 08		sbc #$08			sbc 	#8
.99e7	a8		tay				tay
.99e8	a9 00		lda #$00			lda 	#0 							; and clear all
.99ea					_FFFPPExit:
.99ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.99eb					FloatIntegerPart:
.99eb	48		pha				pha
.99ec	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.99ef	f0 1f		beq $9a10			beq 	_FIPExit 					; if so do nothing
.99f1	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; is it zero ?
.99f4	f0 17		beq $9a0d			beq 	_FIPZero 					; if so return zero.
.99f6	20 4c 9a	jsr $9a4c			jsr 	NSNormalise 				; normalise
.99f9	f0 12		beq $9a0d			beq 	_FIPZero 					; normalised to zero, exit zero
.99fb					_FIPShift:
.99fb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.99fe	10 08		bpl $9a08			bpl 	_FIPCheckZero
.9a00	20 60 91	jsr $9160			jsr 	NSMShiftRight 				; shift mantissa right
.9a03	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9a06	80 f3		bra $99fb			bra 	_FIPShift
.9a08					_FIPCheckZero:
.9a08	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; avoid -0 problem
.9a0b	d0 03		bne $9a10			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a0d					_FIPZero:
.9a0d	20 3d 91	jsr $913d			jsr 	NSMSetZero
.9a10					_FIPExit:
.9a10	68		pla				pla
.9a11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a12					FloatingPointMultiply:
.9a12	20 3b 9a	jsr $9a3b			jsr 	FloatPrepare 				; prepare for floats
.9a15					FloatMultiply:
.9a15	48		pha				pha
.9a16	20 4c 9a	jsr $9a4c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a19	f0 1b		beq $9a36			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9a1b	e8		inx				inx
.9a1c	20 4c 9a	jsr $9a4c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a1f	ca		dex				dex
.9a20	c9 00		cmp #$00			cmp 	#0
.9a22	f0 0f		beq $9a33			beq 	_FDSetZero
.9a24	20 ec 97	jsr $97ec			jsr 	MultiplyShort 				; calculate the result.
.9a27	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a2a	18		clc				clc
.9a2b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9a2e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9a31	80 03		bra $9a36			bra 	_FDExit
.9a33					_FDSetZero:
.9a33	20 3d 91	jsr $913d			jsr 	NSMSetZero 					; return 0
.9a36					_FDExit:
.9a36	20 4c 9a	jsr $9a4c			jsr 	NSNormalise 				; normalise the result
.9a39	68		pla				pla
.9a3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a3b					FloatPrepare:
.9a3b	20 03 8b	jsr $8b03			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a3e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9a41	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9a44	29 10		and #$10			and 	#NSBIsString
.9a46	d0 01		bne $9a49			bne 	_FDType
.9a48	60		rts				rts
.9a49					_FDType:
.9a49	4c bd 9b	jmp $9bbd			jmp 	TypeError
.9a4c					NSNormalise:
.9a4c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9a4f	29 80		and #$80			and 	#$80
.9a51	09 08		ora #$08			ora 	#NSTFloat
.9a53	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9a56	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; if zero exit
.9a59	d0 09		bne $9a64			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a5b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9a5e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9a61	a9 00		lda #$00			lda 	#0 							; set Z flag
.9a63	60		rts				rts
.9a64					_NSNormaliseOptimise:
.9a64	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a67	d0 22		bne $9a8b			bne 	_NSNormaliseLoop
.9a69	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9a6c	30 1d		bmi $9a8b			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a6e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9a71	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9a74	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9a77	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9a7a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9a7d	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9a80	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9a83	38		sec				sec
.9a84	e9 08		sbc #$08			sbc 	#8
.9a86	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9a89	80 d9		bra $9a64			bra 	_NSNormaliseOptimise
.9a8b					_NSNormaliseLoop:
.9a8b	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9a8e	70 08		bvs $9a98			bvs 	_NSNExit 					; exit if so with Z flag clear
.9a90	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; shift mantissa left
.9a93	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9a96	80 f3		bra $9a8b			bra 	_NSNormaliseLoop
.9a98					_NSNExit:
.9a98	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9a9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8a30					AssignNumber:
.8a30	5a		phy				phy
.8a31	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8a34	85 36		sta $36				sta 	zTemp0
.8a36	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a39	85 37		sta $37				sta 	zTemp0+1
.8a3b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8a3e	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8a40	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a43	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8a45	c9 08		cmp #$08			cmp 	#NSTFloat
.8a47	f0 2a		beq $8a73			beq 	_ANFloat
.8a49	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8a4c	f0 05		beq $8a53			beq		_ANNotFloat
.8a4e	e8		inx				inx
.8a4f	20 eb 99	jsr $99eb			jsr 	FloatIntegerPart 			; make it an integer
.8a52	ca		dex				dex
.8a53					_ANNotFloat:
.8a53	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8a56	29 03		and #$03			and 	#3
.8a58	d0 05		bne $8a5f			bne 	_ANByteWord
.8a5a	20 7f 8a	jsr $8a7f			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8a5d	80 1e		bra $8a7d			bra 	_ANExit
.8a5f					_ANByteWord:
.8a5f	48		pha				pha 								; save count
.8a60	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8a63	92 36		sta ($36)			sta 	(zTemp0)
.8a65	68		pla				pla
.8a66	c9 01		cmp #$01			cmp	 	#1
.8a68	f0 13		beq $8a7d			beq 	_ANExit
.8a6a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8a6d	a0 01		ldy #$01			ldy 	#1
.8a6f	91 36		sta ($36),y			sta 	(zTemp0),y
.8a71	80 0a		bra $8a7d			bra 	_ANExit
.8a73					_ANFloat:
.8a73	20 7f 8a	jsr $8a7f			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8a76	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8a79	a0 04		ldy #$04			ldy 	#4
.8a7b	91 36		sta ($36),y			sta 	(zTemp0),y
.8a7d					_ANExit:
.8a7d	7a		ply				ply
.8a7e	60		rts				rts
.8a7f					_ANCopy4PackSign:
.8a7f	a0 03		ldy #$03			ldy 	#3
.8a81	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8a84	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8a86	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8a89	91 36		sta ($36),y			sta 	(zTemp0),y
.8a8b	88		dey				dey
.8a8c	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8a8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8a91	88		dey				dey
.8a92	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a95	91 36		sta ($36),y			sta 	(zTemp0),y
.8a97	88		dey				dey
.8a98	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8a9b	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8a9e					AssignString:
.8a9e	5a		phy				phy
.8a9f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8aa2	85 38		sta $38				sta 	zTemp1
.8aa4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8aa7	85 39		sta $39				sta 	zTemp1+1
.8aa9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8aac	85 36		sta $36				sta 	zTemp0
.8aae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ab1	85 37		sta $37				sta 	zTemp0+1
.8ab3	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8ab5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ab7	f0 23		beq $8adc			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8ab9	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8aba	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8abc	e9 02		sbc #$02			sbc 	#2
.8abe	85 3c		sta $3c				sta 	zsTemp
.8ac0	a0 01		ldy #$01			ldy 	#1
.8ac2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ac4	e9 00		sbc #$00			sbc 	#0
.8ac6	85 3d		sta $3d				sta 	zsTemp+1
.8ac8	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8aca					_ASGetLength:
.8aca	c8		iny				iny
.8acb	b1 38		lda ($38),y			lda 	(zTemp1),y
.8acd	d0 fb		bne $8aca			bne 	_ASGetLength
.8acf	98		tya				tya 								; is this length <= current length
.8ad0	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8ad2	90 20		bcc $8af4			bcc 	_ASCopyString
.8ad4	f0 1e		beq $8af4			beq 	_ASCopyString
.8ad6	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8ad8	a0 01		ldy #$01			ldy 	#1
.8ada	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8adc					_ASNewStringRequired:
.8adc	e8		inx				inx 								; concrete the new string.
.8add	20 32 9d	jsr $9d32			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8ae0	ca		dex				dex
.8ae1	18		clc				clc
.8ae2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8ae5	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8ae7	92 36		sta ($36)			sta 	(zTemp0)
.8ae9	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8aec	69 00		adc #$00			adc 	#0
.8aee	a0 01		ldy #$01			ldy 	#1
.8af0	91 36		sta ($36),y			sta 	(zTemp0),y
.8af2	80 0d		bra $8b01			bra 	_ASExit
.8af4					_ASCopyString:
.8af4	a0 00		ldy #$00			ldy 	#0
.8af6					_ASCopyLoop:
.8af6	b1 38		lda ($38),y			lda 	(zTemp1),y
.8af8	c8		iny				iny
.8af9	c8		iny				iny
.8afa	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8afc	88		dey				dey
.8afd	c9 00		cmp #$00			cmp 	#0
.8aff	d0 f5		bne $8af6			bne 	_ASCopyLoop
.8b01					_ASExit:
.8b01	7a		ply				ply
.8b02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8b03					DereferenceTopTwo:
.8b03	e8		inx				inx
.8b04	20 08 8b	jsr $8b08			jsr 	Dereference 				; deref x+1
.8b07	ca		dex				dex  								; falls through to deref x
.8b08					Dereference:
.8b08	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8b0b	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8b0d	f0 57		beq $8b66			beq 	_DRFExit 					; not a reference
.8b0f	5a		phy				phy
.8b10	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8b13	85 36		sta $36				sta 	zTemp0
.8b15	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b18	85 37		sta $37				sta 	zTemp0+1
.8b1a	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8b1d	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8b1f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b22	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8b25	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8b27	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8b29	f0 0f		beq $8b3a			beq 	_DRFDereferenceTwo
.8b2b	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8b2d	f0 39		beq $8b68			beq 	_DRFFull
.8b2f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8b32	29 03		and #$03			and 	#3
.8b34	f0 32		beq $8b68			beq 	_DRFFull 					; the whole word
.8b36	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8b38	f0 07		beq $8b41			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8b3a					_DRFDereferenceTwo:
.8b3a	a0 01		ldy #$01			ldy 	#1
.8b3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b3e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b41					_DRFClear23:
.8b41	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8b44	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8b47	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8b4a	29 18		and #$18			and 	#NSBTypeMask
.8b4c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b4f	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8b51	d0 12		bne $8b65			bne 	_DRFNotString
.8b53	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8b56	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8b59	d0 0a		bne $8b65			bne 	_DRFNotString
.8b5b	a9 67		lda #$67			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8b5d	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8b60	a9 8b		lda #$8b			lda 	#_DRFNullString >> 8
.8b62	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8b65					_DRFNotString
.8b65	7a		ply				ply 								; restore Y and exit
.8b66					_DRFExit:
.8b66	60		rts				rts
.8b67					_DRFNullString:
>8b67	00						.byte 	0
.8b68					_DRFFull:
.8b68	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8b6a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b6c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b6f	c8		iny				iny
.8b70	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b72	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b75	c8		iny				iny
.8b76	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b78	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b7b	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8b7e	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8b81	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8b83	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8b86	f0 06		beq $8b8e			beq 	_DRFNoExponent
.8b88	c8		iny				iny 								; if not, read the exponent as well.
.8b89	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b8b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8b8e					_DRFNoExponent:
.8b8e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8b91	10 0d		bpl $8ba0			bpl 	_DRFExit2 					; if not, then exit.
.8b93	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8b95	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b98	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8b9b	09 80		ora #$80			ora 	#NSBIsNegative
.8b9d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ba0					_DRFExit2:
.8ba0	7a		ply				ply
.8ba1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8ba2					EncodeNumberStart:
.8ba2	38		sec				sec
.8ba3	80 01		bra $8ba6			bra 	EncodeNumberContinue+1
.8ba5					EncodeNumberContinue:
.8ba5	18		clc				clc
.8ba6					EncodeNumber:
.8ba6	08		php				php 								; save reset.
.8ba7	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8ba9	f0 12		beq $8bbd			beq 	_ENIsOkay
.8bab	c9 30		cmp #$30			cmp 	#"0"
.8bad	90 04		bcc $8bb3			bcc 	_ENBadNumber
.8baf	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bb1	90 0a		bcc $8bbd			bcc 	_ENIsOkay
.8bb3					_ENBadNumber:
.8bb3	28		plp				plp 								; throw saved reset
.8bb4	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8bb7	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8bb9	f0 7e		beq $8c39			beq 	_ENConstructFinal
.8bbb					_ENFail:
.8bbb	18		clc				clc 								; not allowed
.8bbc	60		rts				rts
.8bbd					_ENIsOkay:
.8bbd	28		plp				plp 								; are we restarting
.8bbe	90 15		bcc $8bd5			bcc 	_ENNoRestart
.8bc0					_ENStartEncode:
.8bc0	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8bc2	f0 0c		beq $8bd0			beq 	_ENFirstDP
.8bc4	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8bc6	20 3f 91	jsr $913f			jsr 	NSMSetByte
.8bc9	a9 01		lda #$01			lda 	#ESTA_Low
.8bcb					_ENExitChange:
.8bcb	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8bce	38		sec				sec
.8bcf	60		rts				rts
.8bd0					_ENFirstDP:
.8bd0	20 3d 91	jsr $913d			jsr 	NSMSetZero 					; clear integer part
.8bd3	80 3f		bra $8c14			bra 	_ESTASwitchFloat			; go straight to float and exi
.8bd5					_ENNoRestart:
.8bd5	48		pha				pha 								; save on stack.
.8bd6	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8bd9	c9 01		cmp #$01			cmp 	#ESTA_Low
.8bdb	f0 09		beq $8be6			beq  	_ESTALowState
.8bdd	c9 02		cmp #$02			cmp 	#ESTA_High
.8bdf	f0 29		beq $8c0a			beq 	_ESTAHighState
.8be1	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8be3	f0 3b		beq $8c20			beq 	_ESTADecimalState
>8be5	db						.byte 	$DB 						; causes a break in the emulator
.8be6					_ESTALowState:
.8be6	68		pla				pla 								; get value back
.8be7	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8be9	f0 29		beq $8c14			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8beb	29 0f		and #$0f			and 	#15 						; make digit
.8bed	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8bf0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8bf3	0a		asl a				asl 	a
.8bf4	0a		asl a				asl 	a
.8bf5	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8bf8	0a		asl a				asl 	a
.8bf9	6d 06 07	adc $0706			adc 	DigitTemp
.8bfc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bff	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8c01	90 05		bcc $8c08			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8c03	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8c05	8d 05 07	sta $0705			sta 	EncodeState
.8c08					_ESTANoSwitch:
.8c08	38		sec				sec
.8c09	60		rts				rts
.8c0a					_ESTAHighState:
.8c0a	68		pla				pla 								; get value back
.8c0b	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8c0d	f0 05		beq $8c14			beq 	_ESTASwitchFloat
.8c0f	20 73 8c	jsr $8c73			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8c12	38		sec				sec
.8c13	60		rts				rts
.8c14					_ESTASwitchFloat:
.8c14	9c 07 07	stz $0707			stz 	DecimalCount
.8c17	e8		inx				inx 								; zero the decimal additive.
.8c18	20 3d 91	jsr $913d			jsr 	NSMSetZero
.8c1b	ca		dex				dex
.8c1c	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8c1e	80 ab		bra $8bcb			bra 	_ENExitChange
.8c20					_ESTADecimalState:
.8c20	68		pla				pla 								; digit.
.8c21	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8c23	f0 96		beq $8bbb			beq 	_ENFail
.8c25	e8		inx				inx 								; put digit into fractional part of X+1
.8c26	20 73 8c	jsr $8c73			jsr 	ESTAShiftDigitIntoMantissa
.8c29	ca		dex				dex
.8c2a	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8c2d	ad 07 07	lda $0707			lda 	DecimalCount
.8c30	c9 0b		cmp #$0b			cmp 	#11
.8c32	f0 02		beq $8c36			beq 	_ESTADSFail
.8c34	38		sec				sec
.8c35	60		rts				rts
.8c36					_ESTADSFail:
.8c36	4c b8 9b	jmp $9bb8			jmp 	RangeError
.8c39					_ENConstructFinal:
.8c39	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8c3c	f0 33		beq $8c71			beq 	_ENCFExit 					; no decimals
.8c3e	5a		phy				phy
.8c3f	0a		asl a				asl 	a 							; x 4 and CLC
.8c40	0a		asl a				asl 	a
.8c41	6d 07 07	adc $0707			adc 	DecimalCount
.8c44	a8		tay				tay
.8c45	b9 77 9b	lda $9b77,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8c48	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c4b	b9 78 9b	lda $9b78,y			lda 	DecimalScalarTable-5+1,y
.8c4e	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8c51	b9 79 9b	lda $9b79,y			lda 	DecimalScalarTable-5+2,y
.8c54	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8c57	b9 7a 9b	lda $9b7a,y			lda 	DecimalScalarTable-5+3,y
.8c5a	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8c5d	b9 7b 9b	lda $9b7b,y			lda 	DecimalScalarTable-5+4,y
.8c60	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8c63	a9 08		lda #$08			lda 	#NSTFloat
.8c65	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8c68	7a		ply				ply
.8c69	e8		inx				inx 								; multiply decimal const by decimal scalar
.8c6a	20 15 9a	jsr $9a15			jsr 	FloatMultiply
.8c6d	ca		dex				dex
.8c6e	20 aa 98	jsr $98aa			jsr 	FloatAdd 					; add to integer part.
.8c71					_ENCFExit:
.8c71	18		clc				clc 								; reject the digit.
.8c72	60		rts				rts
.8c73					ESTAShiftDigitIntoMantissa:
.8c73	29 0f		and #$0f			and 	#15 						; save digit
.8c75	48		pha				pha
.8c76	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8c79	48		pha				pha
.8c7a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8c7d	48		pha				pha
.8c7e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c81	48		pha				pha
.8c82	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c85	48		pha				pha
.8c86	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; x 2
.8c89	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; x 4
.8c8c	18		clc				clc 								; pop mantissa and add
.8c8d	68		pla				pla
.8c8e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8c91	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c94	68		pla				pla
.8c95	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8c98	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c9b	68		pla				pla
.8c9c	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8c9f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ca2	68		pla				pla
.8ca3	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8ca6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8ca9	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; x 10
.8cac	68		pla				pla 								; add digit
.8cad	18		clc				clc
.8cae	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8cb1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cb4	90 0d		bcc $8cc3			bcc 	_ESTASDExit
.8cb6	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8cb9	d0 08		bne $8cc3			bne 	_ESTASDExit
.8cbb	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8cbe	d0 03		bne $8cc3			bne 	_ESTASDExit
.8cc0	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8cc3					_ESTASDExit:
.8cc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8cc4					EvaluateTerm:
.8cc4	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc6	30 18		bmi $8ce0			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8cc8	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8cca	b0 6f		bcs $8d3b			bcs 	_ETVariable
.8ccc	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8cce	90 6e		bcc $8d3e			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8cd0	c9 3a		cmp #$3a			cmp 	#'9'+1
.8cd2	b0 6a		bcs $8d3e			bcs 	_ETPuncUnary
.8cd4	20 a2 8b	jsr $8ba2			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8cd7					_ETNumber:
.8cd7	c8		iny				iny 								; keep encoding until we have the numbers
.8cd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cda	20 a5 8b	jsr $8ba5			jsr 	EncodeNumberContinue
.8cdd	b0 f8		bcs $8cd7			bcs 	_ETNumber 					; go back if accepted.
.8cdf	60		rts				rts
.8ce0					_ETCheckUnary:
.8ce0	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8ce2	f0 41		beq $8d25			beq 	_ETString
.8ce4	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8ce6	f0 12		beq $8cfa			beq 	_ETHexConstant
.8ce8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8cea	90 0b		bcc $8cf7			bcc 	_ETSyntaxError
.8cec	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8cee	b0 07		bcs $8cf7			bcs 	_ETSyntaxError
.8cf0	da		phx				phx 								; push X on the stack
.8cf1	0a		asl a				asl 	a 							; put vector x 2 into X
.8cf2	aa		tax				tax
.8cf3	c8		iny				iny 								; consume unary function token
.8cf4	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8cf7					_ETSyntaxError:
.8cf7	4c b3 9b	jmp $9bb3			jmp 	SyntaxError
.8cfa					_ETHexConstant:
.8cfa	c8		iny				iny 								; skip #
.8cfb	c8		iny				iny 								; skip count
.8cfc	20 3d 91	jsr $913d			jsr 	NSMSetZero 					; clear result
.8cff					_ETHLoop:
.8cff	b1 30		lda ($30),y			lda 	(codePtr),y
.8d01	c8		iny				iny 								; and consume
.8d02	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8d04	f0 1e		beq $8d24			beq 	_ETHExit
.8d06	48		pha				pha 								; save on stack.
.8d07	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; x 2
.8d0a	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; x 4
.8d0d	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; x 8
.8d10	20 52 91	jsr $9152			jsr 	NSMShiftLeft 				; x 16
.8d13	68		pla				pla 								; ASCII
.8d14	c9 41		cmp #$41			cmp 	#'A'
.8d16	90 02		bcc $8d1a			bcc 	_ETHNotChar
.8d18	e9 07		sbc #$07			sbc 	#7
.8d1a					_ETHNotChar:
.8d1a	29 0f		and #$0f			and 	#15 						; digit now
.8d1c	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8d1f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d22	80 db		bra $8cff			bra 	_ETHLoop 					; go round.
.8d24					_ETHExit:
.8d24	60		rts				rts
.8d25					_ETString:
.8d25	c8		iny				iny 								; look at length
.8d26	b1 30		lda ($30),y			lda 	(codePtr),y
.8d28	48		pha				pha
.8d29	c8		iny				iny 								; first character
.8d2a	20 8e 96	jsr $968e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8d2d	68		pla				pla 								; restore count and save
.8d2e	85 36		sta $36				sta 	zTemp0
.8d30	98		tya				tya 								; add length to Y to skip it.
.8d31	18		clc				clc
.8d32	65 36		adc $36				adc 	zTemp0
.8d34	a8		tay				tay
.8d35	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8d37	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d3a	60		rts				rts
.8d3b					_ETVariable:
.8d3b	4c 95 8d	jmp $8d95			jmp 	VariableHandler
.8d3e					_ETPuncUnary:
.8d3e	c8		iny				iny 								; consume the unary character
.8d3f	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8d41	f0 2d		beq $8d70			beq 	_ETUnaryNegate
.8d43	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8d45	f0 39		beq $8d80			beq 	_ETDereference
.8d47	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8d49	f0 43		beq $8d8e			beq 	_ETParenthesis
.8d4b	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8d4d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8d4f	f0 06		beq $8d57			beq 	_ETIndirection
.8d51	e6 36		inc $36				inc 	zTemp0
.8d53	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8d55	d0 a0		bne $8cf7			bne 	_ETSyntaxError
.8d57					_ETIndirection:
.8d57	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8d59	1a		inc a				inc 	a
.8d5a	48		pha				pha
.8d5b	20 c4 8c	jsr $8cc4			jsr 	EvaluateTerm				; evaluate the term
.8d5e	20 08 8b	jsr $8b08			jsr 	Dereference 				; dereference it.
.8d61	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8d64	d0 07		bne $8d6d			bne 	_ETTypeMismatch
.8d66	68		pla				pla 								; indirection 1-2
.8d67	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8d69	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d6c	60		rts				rts
.8d6d					_ETTypeMismatch:
.8d6d	4c bd 9b	jmp $9bbd			jmp 	TypeError
.8d70					_ETUnaryNegate:
.8d70	20 c4 8c	jsr $8cc4			jsr 	EvaluateTerm				; evaluate the term
.8d73	20 08 8b	jsr $8b08			jsr 	Dereference 				; dereference it.
.8d76	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8d79	29 10		and #$10			and 	#NSTString
.8d7b	d0 f0		bne $8d6d			bne 	_ETTypeMismatch
.8d7d	4c e9 90	jmp $90e9			jmp 	NSMNegate  					; just toggles the sign bit.
.8d80					_ETDereference:
.8d80	20 c4 8c	jsr $8cc4			jsr 	EvaluateTerm				; evaluate the term
.8d83	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8d86	29 20		and #$20			and 	#NSBIsReference
.8d88	f0 e3		beq $8d6d			beq 	_ETTypeMismatch
.8d8a	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8d8d	60		rts				rts
.8d8e					_ETParenthesis:
.8d8e	20 f3 89	jsr $89f3			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8d91	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 			; check for )
.8d94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8d95					VariableHandler:
.8d95	b1 30		lda ($30),y			lda 	(codePtr),y
.8d97	18		clc				clc
.8d98	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d9a	85 37		sta $37				sta 	zTemp0+1
.8d9c	c8		iny				iny
.8d9d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9f	85 36		sta $36				sta 	zTemp0
.8da1	c8		iny				iny
.8da2	18		clc				clc									; copy variable address+3 to mantissa
.8da3	69 03		adc #$03			adc 	#3
.8da5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8da8	a5 37		lda $37				lda 	zTemp0+1
.8daa	69 00		adc #$00			adc 	#0
.8dac	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8daf	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8db2	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8db5	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8db8	5a		phy				phy
.8db9	a0 02		ldy #$02			ldy 	#2 							; read type
.8dbb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dbd	7a		ply				ply
.8dbe	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8dc0	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8dc2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dc5	29 04		and #$04			and 	#NSBIsArray
.8dc7	d0 01		bne $8dca			bne 	_VHArray
.8dc9	60		rts				rts
.8dca					_VHArray:
.8dca	e8		inx				inx
.8dcb	20 d5 90	jsr $90d5			jsr 	Evaluate8BitInteger 		; get the 1st index.
.8dce	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.8dd0	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8dd3	b1 30		lda ($30),y			lda 	(codePtr),y
.8dd5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dd7	d0 06		bne $8ddf			bne 	_VHNoSecondIndex
.8dd9	c8		iny				iny 								; skip the comma
.8dda	e8		inx				inx
.8ddb	20 d5 90	jsr $90d5			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.8dde	ca		dex				dex
.8ddf					_VHNoSecondIndex:
.8ddf	ca		dex				dex 								; set X back.
.8de0	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 			; and check the right bracket.
.8de3	5a		phy				phy 								; save position
.8de4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.8de7	85 3e		sta $3e				sta 	zaTemp
.8de9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8dec	85 3f		sta $3f				sta 	zaTemp+1
.8dee	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.8df0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8df2	f0 02		beq $8df6			beq 	_VHHas2Mask
.8df4	a9 ff		lda #$ff			lda 	#$FF
.8df6					_VHHas2Mask:
.8df6	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.8df9	f0 54		beq $8e4f			beq 	_VHBadIndex
.8dfb	0a		asl a				asl 	a 							; carry will be set if a second index
.8dfc	90 09		bcc $8e07			bcc 	_VHCheckFirstIndex
.8dfe	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.8e00	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8e02	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.8e05	90 48		bcc $8e4f			bcc 	_VHBadIndex
.8e07					_VHCheckFirstIndex:
.8e07	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.8e09	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8e0b	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.8e0e	90 3f		bcc $8e4f			bcc 	_VHBadIndex
.8e10	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.8e12	64 37		stz $37				stz 	zTemp0+1
.8e14	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.8e17	30 0f		bmi $8e28			bmi 	_VHNoMultiply
.8e19	da		phx				phx
.8e1a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.8e1d	48		pha				pha
.8e1e	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.8e20	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8e22	1a		inc a				inc 	a 							; add 1 for zero base
.8e23	fa		plx				plx
.8e24	20 65 9b	jsr $9b65			jsr 	Multiply8x8 				; calculate -> Z0
.8e27	fa		plx				plx
.8e28					_VHNoMultiply:
.8e28	18		clc				clc
.8e29	a5 36		lda $36				lda 	zTemp0
.8e2b	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8e2e	85 36		sta $36				sta 	zTemp0
.8e30	a5 37		lda $37				lda 	zTemp0+1
.8e32	69 00		adc #$00			adc 	#0
.8e34	85 37		sta $37				sta 	zTemp0+1
.8e36	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e39	20 10 82	jsr $8210			jsr 	ScaleByBaseType
.8e3c	18		clc				clc
.8e3d	b2 3e		lda ($3e)			lda 	(zaTemp)
.8e3f	65 36		adc $36				adc 	zTemp0
.8e41	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e44	a0 01		ldy #$01			ldy 	#1
.8e46	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8e48	65 37		adc $37				adc 	zTemp0+1
.8e4a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e4d	7a		ply				ply 								; restore position
.8e4e	60		rts				rts
.8e4f					_VHBadIndex:
.8e4f	a9 17		lda #$17		lda	#23
.8e51	4c ea 85	jmp $85ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9a9b					AbsUnary:
.9a9b	fa		plx				plx 								; restore stack pos
.9a9c	20 91 90	jsr $9091			jsr 	EvaluateNumber 				; get a float or int
.9a9f	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.9aa2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9aa5	29 7f		and #$7f			and 	#$7F
.9aa7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9aaa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8e54					AllocUnary:
.8e54	fa		plx				plx 								; restore stack pos
.8e55	20 c9 90	jsr $90c9			jsr 	Evaluate16BitInteger		; get bytes required.
.8e58	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.8e5b	da		phx				phx 								; save X/Y
.8e5c	5a		phy				phy
.8e5d	8a		txa				txa 								; copy X into Y
.8e5e	a8		tay				tay
.8e5f	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8e62	aa		tax				tax
.8e63	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8e66	20 73 8e	jsr $8e73			jsr 	AllocateXABytes 			; allocate memory
.8e69	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8e6c	8a		txa				txa
.8e6d	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8e70	7a		ply				ply
.8e71	fa		plx				plx
.8e72	60		rts				rts
.8e73					AllocateXABytes:
.8e73	5a		phy				phy
.8e74	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.8e77	84 36		sty $36				sty 	zTemp0
.8e79	5a		phy				phy
.8e7a	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8e7d	84 37		sty $37				sty 	zTemp0+1
.8e7f	5a		phy				phy
.8e80	18		clc				clc 								; add to low memory pointer
.8e81	6d 0c 07	adc $070c			adc 	lowMemPtr
.8e84	8d 0c 07	sta $070c			sta 	lowMemPtr
.8e87	8a		txa				txa
.8e88	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8e8b	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8e8e					_ClearMemory:
.8e8e	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.8e91	c5 36		cmp $36				cmp 	zTemp0
.8e93	d0 07		bne $8e9c			bne 	_CMClearNext
.8e95	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.8e98	c5 37		cmp $37				cmp 	zTemp0+1
.8e9a	f0 0c		beq $8ea8			beq 	_CMExit
.8e9c					_CMClearNext:
.8e9c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.8e9e	92 36		sta ($36)			sta 	(zTemp0)
.8ea0	e6 36		inc $36				inc 	zTemp0
.8ea2	d0 ea		bne $8e8e			bne 	_ClearMemory
.8ea4	e6 37		inc $37				inc		zTemp0+1
.8ea6	80 e6		bra $8e8e			bra 	_ClearMemory
.8ea8					_CMExit:
.8ea8	fa		plx				plx
.8ea9	68		pla				pla
.8eaa	7a		ply				ply
.8eab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9aab					AscUnary:
.9aab	fa		plx				plx 								; restore stack pos
.9aac	20 9c 90	jsr $909c			jsr 	EvaluateString 				; get a string
.9aaf	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9ab1	20 3f 91	jsr $913f			jsr 	NSMSetByte
.9ab4	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.9ab7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9ab8					FracUnary:
.9ab8	fa		plx				plx 								; restore stack pos
.9ab9	20 91 90	jsr $9091			jsr 	EvaluateNumber 				; get a float or int
.9abc	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.9abf	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9ac2	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ac4	f0 04		beq $9aca			beq 	_IUZero
.9ac6	20 88 99	jsr $9988			jsr 	FloatFractionalPart
.9ac9	60		rts				rts
.9aca					_IUZero:
.9aca	20 3d 91	jsr $913d			jsr 	NSMSetZero
.9acd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9ace					IntUnary:
.9ace	fa		plx				plx 								; restore stack pos
.9acf	20 91 90	jsr $9091			jsr 	EvaluateNumber 				; get a float or int
.9ad2	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.9ad5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9ad8	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9ada	f0 03		beq $9adf			beq 	_IUExit
.9adc	20 eb 99	jsr $99eb			jsr 	FloatIntegerPart
.9adf					_IUExit:
.9adf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9ae0					LenUnary:
.9ae0	fa		plx				plx 								; restore stack pos
.9ae1	20 9c 90	jsr $909c			jsr 	EvaluateString 				; get a string
.9ae4	5a		phy				phy
.9ae5	a0 00		ldy #$00			ldy 	#0 							; find length
.9ae7					_LenFind:
.9ae7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ae9	f0 06		beq $9af1			beq 	_LenExit
.9aeb	c8		iny				iny
.9aec	d0 f9		bne $9ae7			bne 	_LenFind
.9aee	4c b8 9b	jmp $9bb8			jmp 	RangeError 					; string > 255
.9af1					_LenExit:
.9af1	98		tya				tya
.9af2	20 3f 91	jsr $913f			jsr 	NSMSetByte
.9af5	7a		ply				ply
.9af6	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.9af9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8eac					Unary_Not:
.8eac	fa		plx				plx
.8ead	20 b4 90	jsr $90b4			jsr 	EvaluateInteger 			; get integer
.8eb0	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.8eb3	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; zero mantissa ?
.8eb6	f0 04		beq $8ebc			beq 	_NotZero
.8eb8	20 3d 91	jsr $913d			jsr 	NSMSetZero
.8ebb	60		rts				rts
.8ebc					_NotZero:
.8ebc	4c 57 86	jmp $8657			jmp 	ReturnTrue
.8ebf					_UNBad:
.8ebf	4c c2 9b	jmp $9bc2			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8ec2					Unary_Rnd:
.8ec2	20 91 90	jsr $9091			jsr 	EvaluateNumber 				; number to use.
.8ec5	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 			; closing bracket
.8ec8	20 f1 8e	jsr $8ef1			jsr 	Random32Bit 				; generate a number.
.8ecb	ad 08 07	lda $0708			lda 	RandomSeed+0
.8ece	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ed1	ad 09 07	lda $0709			lda 	RandomSeed+1
.8ed4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ed7	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8eda	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8edd	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8ee0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8ee2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ee5	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8ee7	8d 28 06	sta $0628			sta 	NSExponent
.8eea	a9 08		lda #$08			lda 	#NSTFloat
.8eec	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8eef	db						.byte 	$DB 						; causes a break in the emulator
.8ef0	60		rts				rts
.8ef1					Random32Bit:
.8ef1	5a		phy				phy
.8ef2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8ef4	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8ef7	d0 03		bne $8efc			bne 	_Random1
.8ef9	a8		tay				tay 								; if so do it 256 times
.8efa	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8efc					_Random1:
.8efc	0a		asl a				asl 	a 							; LSFR RNG
.8efd	2e 09 07	rol $0709			rol 	RandomSeed+1
.8f00	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8f03	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8f06	90 02		bcc $8f0a			bcc 	_Random2
.8f08	49 c5		eor #$c5			eor 	#$C5
.8f0a					_Random2:
.8f0a	88		dey				dey
.8f0b	d0 ef		bne $8efc			bne 	_Random1
.8f0d	7a		ply				ply
.8f0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9afa					SgnUnary:
.9afa	fa		plx				plx 								; restore stack pos
.9afb	20 91 90	jsr $9091			jsr 	EvaluateNumber 				; get a float or int
.9afe	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.9b01	20 6d 91	jsr $916d			jsr 	NSMIsZero 					; if zero
.9b04	f0 10		beq $9b16			beq 	_SGZero  					; return Int Zero
.9b06	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9b09	48		pha				pha
.9b0a	a9 01		lda #$01			lda 	#1 							; set to 1
.9b0c	20 3f 91	jsr $913f			jsr 	NSMSetByte
.9b0f	68		pla				pla
.9b10	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b12	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b15	60		rts				rts
.9b16	20 3d 91	jsr $913d	_SGZero:jsr 	NSMSetZero
.9b19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b1a					ValUnary:
.9b1a	fa		plx				plx 								; restore stack pos
.9b1b	20 30 9b	jsr $9b30			jsr 	ValMainCode 				; do the main val() code
.9b1e	b0 01		bcs $9b21			bcs 	_VUError 					; couldn't convert
.9b20	60		rts				rts
.9b21					_VUError:
.9b21	4c bd 9b	jmp $9bbd			jmp 	TypeError
.9b24					IsValUnary:
.9b24	fa		plx				plx 								; restore stack pos
.9b25	20 30 9b	jsr $9b30			jsr 	ValMainCode 				; do the main val() code
.9b28	b0 03		bcs $9b2d			bcs 	_VUBad
.9b2a	4c 57 86	jmp $8657			jmp 	ReturnTrue
.9b2d					_VUBad:
.9b2d	4c 63 86	jmp $8663			jmp 	ReturnFalse
.9b30					ValMainCode:
.9b30	20 9c 90	jsr $909c			jsr 	EvaluateString 				; get a string
.9b33	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 			; check right bracket present
.9b36	5a		phy				phy
.9b37	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b39	f0 17		beq $9b52			beq 	_VMCFail2
.9b3b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b3d	48		pha				pha 								; save first character
.9b3e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b40	d0 01		bne $9b43			bne 	_VMCStart
.9b42	c8		iny				iny 								; skip over -
.9b43					_VMCStart:
.9b43	38		sec				sec 								; initialise first time round.
.9b44					_VMCNext:
.9b44	c8		iny				iny 								; pre-increment
.9b45	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b47	f0 0c		beq $9b55			beq 	_VMCSuccess 				; successful.
.9b49	20 a6 8b	jsr $8ba6			jsr 	EncodeNumber 				; send it to the number-builder
.9b4c	90 03		bcc $9b51			bcc 	_VMCFail 					; if failed, give up.
.9b4e	18		clc				clc 								; next time round, countinue
.9b4f	80 f3		bra $9b44			bra 	_VMCNext
.9b51					_VMCFail:
.9b51	68		pla				pla
.9b52					_VMCFail2:
.9b52	7a		ply				ply
.9b53	38		sec				sec
.9b54	60		rts				rts
.9b55					_VMCSuccess:
.9b55	a9 00		lda #$00			lda 	#0 							; construct final
.9b57	20 a6 8b	jsr $8ba6			jsr 	EncodeNumber
.9b5a	68		pla				pla
.9b5b	c9 2d		cmp #$2d			cmp 	#"-"
.9b5d	d0 03		bne $9b62			bne 	_VMCNotNegative
.9b5f	20 e9 90	jsr $90e9			jsr		NSMNegate
.9b62					_VMCNotNegative:
.9b62	7a		ply				ply
.9b63	18		clc				clc
.9b64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8f0f					ChrUnary:
.8f0f	fa		plx				plx 								; restore stack pos
.8f10	20 d5 90	jsr $90d5			jsr 	Evaluate8BitInteger			; get value
.8f13	48		pha				pha
.8f14	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.8f17	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8f19	20 ad 9d	jsr $9dad			jsr 	StringTempAllocate
.8f1c	68		pla				pla 								; write number to it
.8f1d	20 eb 9d	jsr $9deb			jsr 	StringTempWrite
.8f20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8f21					SpcUnary:
.8f21	fa		plx				plx 								; restore stack pos
.8f22	20 d5 90	jsr $90d5			jsr 	Evaluate8BitInteger			; get value
.8f25	5a		phy				phy
.8f26	48		pha				pha 								; save count
.8f27	20 ad 9d	jsr $9dad			jsr 	StringTempAllocate
.8f2a	7a		ply				ply 								; to do count in Y
.8f2b					_SpcLoop:
.8f2b	c0 00		cpy #$00			cpy 	#0
.8f2d	f0 08		beq $8f37			beq 	_SpcExit
.8f2f	a9 20		lda #$20			lda 	#32
.8f31	20 eb 9d	jsr $9deb			jsr 	StringTempWrite
.8f34	88		dey				dey
.8f35	80 f4		bra $8f2b			bra 	_SPCLoop
.8f37					_SpcExit:
.8f37	7a		ply				ply
.8f38	20 e3 96	jsr $96e3			jsr 	CheckRightBracket
.8f3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8f3c					Unary_Str:
.8f3c	fa		plx				plx
.8f3d	20 91 90	jsr $9091			jsr 	EvaluateNumber  			; get number
.8f40	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 			; closing bracket
.8f43	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8f45	20 5e 8f	jsr $8f5e			jsr 	ConvertNumberToString 		; do the conversion.
.8f48	a9 21		lda #$21			lda		#33 						; create buffer
.8f4a	20 ad 9d	jsr $9dad			jsr 	StringTempAllocate 			; allocate memory
.8f4d	da		phx				phx
.8f4e	a2 00		ldx #$00			ldx 	#0
.8f50					_USCopy:
.8f50	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8f53	20 eb 9d	jsr $9deb			jsr 	StringTempWrite
.8f56	e8		inx				inx
.8f57	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8f5a	d0 f4		bne $8f50			bne 	_USCopy
.8f5c	fa		plx				plx
.8f5d	60		rts				rts
.8f5e					ConvertNumberToString:
.8f5e	5a		phy				phy 								; save code position
.8f5f	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8f62	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8f65	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8f68	10 0a		bpl $8f74			bpl 	_CNTSNotNegative
.8f6a	29 7f		and #$7f			and 	#$7F 						; make +ve
.8f6c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f6f	a9 2d		lda #$2d			lda 	#"-"
.8f71	20 da 8f	jsr $8fda			jsr 	WriteDecimalBuffer
.8f74					_CNTSNotNegative:
.8f74	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8f77	f0 15		beq $8f8e			beq 	_CNTSNotFloat
.8f79	e8		inx				inx 								; round up
.8f7a	a9 01		lda #$01			lda 	#1
.8f7c	20 3f 91	jsr $913f			jsr 	NSMSetByte
.8f7f	ca		dex				dex
.8f80	bd 28 06	lda $0628,x			lda		NSExponent,x
.8f83	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8f86	a9 08		lda #$08			lda 	#NSTFloat
.8f88	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8f8b	20 aa 98	jsr $98aa			jsr 	FloatAdd
.8f8e					_CNTSNotFloat:
.8f8e	20 bc 8f	jsr $8fbc			jsr 	MakePlusTwoString
.8f91	20 88 99	jsr $9988			jsr 	FloatFractionalPart 		; get the fractional part
.8f94	20 4c 9a	jsr $9a4c			jsr 	NSNormalise					; normalise , exit if zero
.8f97	f0 21		beq $8fba			beq 	_CNTSExit
.8f99	a9 2e		lda #$2e			lda 	#"."
.8f9b	20 da 8f	jsr $8fda			jsr 	WriteDecimalBuffer 			; write decimal place
.8f9e					_CNTSDecimal:
.8f9e	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8fa1	30 17		bmi $8fba			bmi 	_CNTSExit
.8fa3	e8		inx				inx 								; x 10.0
.8fa4	a9 0a		lda #$0a			lda 	#10
.8fa6	20 3f 91	jsr $913f			jsr 	NSMSetByte
.8fa9	a9 08		lda #$08			lda 	#NSTFloat
.8fab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fae	ca		dex				dex
.8faf	20 15 9a	jsr $9a15			jsr 	FloatMultiply
.8fb2	20 bc 8f	jsr $8fbc			jsr 	MakePlusTwoString
.8fb5	20 88 99	jsr $9988			jsr 	FloatFractionalPart 		; get the fractional part
.8fb8	80 e4		bra $8f9e			bra 	_CNTSDecimal 				; keep going.
.8fba					_CNTSExit:
.8fba	7a		ply				ply
.8fbb	60		rts				rts
.8fbc					MakePlusTwoString:
.8fbc	da		phx				phx
.8fbd	20 14 91	jsr $9114			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8fc0	e8		inx				inx 								; access it
.8fc1	e8		inx				inx
.8fc2	20 eb 99	jsr $99eb			jsr 	FloatIntegerPart 			; make it an integer
.8fc5	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8fc7	20 54 98	jsr $9854			jsr 	ConvertInt32
.8fca	a2 00		ldx #$00			ldx	 	#0
.8fcc					_MPTSCopy:
.8fcc	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8fcf	20 da 8f	jsr $8fda			jsr 	WriteDecimalBuffer
.8fd2	e8		inx				inx
.8fd3	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8fd6	d0 f4		bne $8fcc			bne 	_MPTSCopy
.8fd8	fa		plx				plx
.8fd9	60		rts				rts
.8fda					WriteDecimalBuffer:
.8fda	da		phx				phx
.8fdb	ae 14 07	ldx $0714			ldx 	dbOffset
.8fde	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8fe1	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8fe4	ee 14 07	inc $0714			inc 	dbOffset
.8fe7	fa		plx				plx
.8fe8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8fe9					Unary_Left:
.8fe9	fa		plx				plx
.8fea	18		clc				clc 								; only one parameter
.8feb	20 60 90	jsr $9060			jsr 	SubstringInitial 			; set up.
.8fee	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8ff1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ff4	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8ff7	80 2c		bra $9025			bra 	SubstringMain
.8ff9					Unary_Right:
.8ff9	fa		plx				plx
.8ffa	18		clc				clc 								; only one parameter
.8ffb	20 60 90	jsr $9060			jsr 	SubstringInitial 			; set up.
.8ffe	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9001	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9004	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9007	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.900a	b0 02		bcs $900e			bcs 	_URNotUnderflow
.900c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.900e					_URNotUnderFlow:
.900e	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9011	80 12		bra $9025			bra 	SubStringMain
.9013					Unary_Mid:
.9013	fa		plx				plx
.9014	38		sec				sec 								; two parameters
.9015	20 60 90	jsr $9060			jsr 	SubstringInitial 			; set up.
.9018	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.901b	f0 05		beq $9022			beq 	_UMError
.901d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9020	80 03		bra $9025			bra 	SubStringMain
.9022					_UMError:
.9022	4c c2 9b	jmp $9bc2			jmp 	ArgumentError
.9025					SubStringMain:
.9025	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9028	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.902b	b0 2d		bcs $905a			bcs 	_SSMNull 					; if so, return an empty string.
.902d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9030	f0 28		beq $905a			beq 	_SSMNull 					; return empty string.
.9032	18		clc				clc 								; add the offset +1 to the address and
.9033	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9036	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9039	85 36		sta $36				sta 	zTemp0
.903b	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.903e	69 00		adc #$00			adc 	#0
.9040	85 37		sta $37				sta 	zTemp0+1
.9042					_SSMNoCarry:
.9042	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9045	20 ad 9d	jsr $9dad			jsr 	StringTempAllocate 			; allocate that many characters
.9048	5a		phy				phy 								; save Y
.9049	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.904b					_SSMCopy:
.904b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.904d	f0 09		beq $9058			beq 	_SSMEString 				; no more to copy
.904f	20 eb 9d	jsr $9deb			jsr 	StringTempWrite 			; and write it out.
.9052	c8		iny				iny
.9053	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.9056	d0 f3		bne $904b			bne 	_SSMCopy
.9058					_SSMEString:
.9058	7a		ply				ply
.9059					_SSMExit:
.9059	60		rts				rts
.905a					_SSMNull:
.905a	a9 00		lda #$00			lda 	#0
.905c	20 ad 9d	jsr $9dad			jsr 	StringTempAllocate
.905f	60		rts				rts
.9060					SubstringInitial:
.9060	da		phx				phx 								; save initial stack position
.9061	08		php				php 								; save carry on stack indicating 2 parameters
.9062	20 9c 90	jsr $909c			jsr 	EvaluateString 				; get a string
.9065	5a		phy				phy 								; calculate length to exponent.
.9066	a0 ff		ldy #$ff			ldy 	#$FF
.9068					_SIFindLength:
.9068	c8		iny				iny
.9069	b1 36		lda ($36),y			lda 	(zTemp0),y
.906b	d0 fb		bne $9068			bne 	_SIFindLength
.906d	98		tya				tya
.906e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9071	7a		ply				ply
.9072	e8		inx				inx
.9073	20 eb 96	jsr $96eb			jsr 	CheckComma 					; comma next
.9076	20 d5 90	jsr $90d5			jsr 	Evaluate8BitInteger 		; get next parameter
.9079	28		plp				plp 								; is it the last parameter ?
.907a	90 07		bcc $9083			bcc 	_SSIExit 					; if so, exit.
.907c	e8		inx				inx
.907d	20 eb 96	jsr $96eb			jsr 	CheckComma 					; comma next
.9080	20 d5 90	jsr $90d5			jsr 	Evaluate8BitInteger 		; get last parameter
.9083					_SSIExit:
.9083	fa		plx				plx
.9084	20 e3 96	jsr $96e3			jsr 	CheckRightBracket 			; check closing bracket
.9087	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9088					EvaluateValue:
.9088	48		pha				pha
.9089	20 f3 89	jsr $89f3			jsr		EvaluateExpression 			; expression
.908c	20 08 8b	jsr $8b08			jsr 	Dereference					; derefernce it
.908f	68		pla				pla
.9090	60		rts				rts
.9091					EvaluateNumber:
.9091	20 88 90	jsr $9088			jsr 	EvaluateValue 				; get a value
.9094	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9097	29 10		and #$10			and 	#NSBIsString
.9099	d0 16		bne $90b1			bne 	HelperTypeError
.909b	60		rts				rts
.909c					EvaluateString:
.909c	20 88 90	jsr $9088			jsr 	EvaluateValue 				; get a value
.909f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.90a2	29 10		and #$10			and 	#NSBIsString
.90a4	f0 0b		beq $90b1			beq 	HelperTypeError
.90a6					CopyAddressToTemp0:
.90a6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.90a9	85 36		sta $36				sta 	zTemp0
.90ab	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90ae	85 37		sta $37				sta 	zTemp0+1
.90b0	60		rts				rts
.90b1					HelperTypeError:
.90b1	4c bd 9b	jmp $9bbd			jmp 	TypeError
.90b4					EvaluateInteger:
.90b4	20 91 90	jsr $9091			jsr 	EvaluateNumber
.90b7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.90ba	d0 0a		bne $90c6			bne 	HelperValueError 			; if not, it's a float.
.90bc	60		rts				rts
.90bd					EvaluateUnsignedInteger:
.90bd	20 b4 90	jsr $90b4			jsr 	EvaluateInteger 			; check integer is +ve
.90c0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.90c3	30 01		bmi $90c6			bmi 	HelperValueError
.90c5	60		rts				rts
.90c6					HelperValueError:
.90c6	4c c2 9b	jmp $9bc2			jmp 	ArgumentError
.90c9					Evaluate16BitInteger:
.90c9	20 bd 90	jsr $90bd			jsr	 	EvaluateUnsignedInteger		; get integer
.90cc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.90cf	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.90d2	d0 f2		bne $90c6			bne 	HelperValueError
.90d4	60		rts				rts
.90d5					Evaluate8BitInteger:
.90d5	20 bd 90	jsr $90bd			jsr	 	EvaluateUnsignedInteger 	; get an integer
.90d8	d0 ec		bne $90c6			bne 	HelperValueError
.90da	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.90dd	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.90e0	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.90e3	d0 e1		bne $90c6			bne 	HelperValueError
.90e5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.90e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9b65					Multiply8x8:
.9b65	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9b66	85 36		sta $36			  	sta 	zTemp0
.9b68	86 37		stx $37				stx 	zTemp0+1
.9b6a	a9 00		lda #$00			lda 	#0
.9b6c	a2 08		ldx #$08			ldx 	#8
.9b6e					_M88Loop:
.9b6e	90 03		bcc $9b73			bcc 	_M88NoAdd
.9b70	18		clc				clc
.9b71	65 37		adc $37				adc 	zTemp0+1
.9b73					_M88NoAdd:
.9b73	6a		ror a				ror 	a
.9b74	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9b76	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9b77	d0 f5		bne $9b6e			bne 	_M88Loop
.9b79	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9b7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.90e9					NSMNegate:
.90e9	bd 00 06	lda $0600,x			lda 	NSStatus,x
.90ec	49 80		eor #$80			eor 	#NSBIsNegative
.90ee	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90f1	60		rts				rts
.90f2					NSMNegateMantissa:
.90f2	38		sec				sec
.90f3	a9 00		lda #$00			lda 	#0
.90f5	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.90f8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90fb	a9 00		lda #$00			lda 	#0
.90fd	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9100	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9103	a9 00		lda #$00			lda 	#0
.9105	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9108	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.910b	a9 00		lda #$00			lda 	#0
.910d	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9110	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9113	60		rts				rts
.9114					NSMShiftUpTwo:
.9114	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9117	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.911a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.911d	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9120	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9123	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9126	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9129	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.912c	bd 28 06	lda $0628,x			lda 	NSExponent,x
.912f	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9132	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9135	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9138	60		rts				rts
.9139					NSMSetZeroMantissaOnly:
.9139	a9 00		lda #$00			lda 	#0
.913b	80 08		bra $9145			bra 	NSMSetMantissa
.913d					NSMSetZero:
.913d	a9 00		lda #$00			lda 	#0
.913f					NSMSetByte:
.913f	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9142	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9145					NSMSetMantissa:
.9145	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.9148	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.914b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.914e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9151	60		rts				rts
.9152					NSMShiftLeft:
.9152	18		clc				clc
.9153					NSMRotateLeft:
.9153	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.9156	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9159	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.915c	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.915f	60		rts				rts
.9160					NSMShiftRight:
.9160	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9163	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.9166	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9169	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.916c	60		rts				rts
.916d					NSMIsZero:
.916d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9170	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9173	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9176	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9179	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9b7c					DecimalScalarTable:
>9b7c	66 66 66 66				.dword $66666666 ; 0.1
>9b80	de					.byte $de
>9b81	1f 85 eb 51				.dword $51eb851f ; 0.01
>9b85	db					.byte $db
>9b86	4c 37 89 41				.dword $4189374c ; 0.001
>9b8a	d8					.byte $d8
>9b8b	ac 8b db 68				.dword $68db8bac ; 0.0001
>9b8f	d4					.byte $d4
>9b90	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9b94	d1					.byte $d1
>9b95	83 de 1b 43				.dword $431bde83 ; 1e-06
>9b99	ce					.byte $ce
>9b9a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9b9e	ca					.byte $ca
>9b9f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9ba3	c7					.byte $c7
>9ba4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9ba8	c4					.byte $c4
>9ba9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9bad	c0					.byte $c0
>9bae	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9bb2	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9bb3					SyntaxError:
.9bb3	a9 02		lda #$02		lda	#2
.9bb5	4c ea 85	jmp $85ea		jmp	ErrorHandler
.9bb8					RangeError:
.9bb8	a9 04		lda #$04		lda	#4
.9bba	4c ea 85	jmp $85ea		jmp	ErrorHandler
.9bbd					TypeError:
.9bbd	a9 05		lda #$05		lda	#5
.9bbf	4c ea 85	jmp $85ea		jmp	ErrorHandler
.9bc2					ArgumentError:
.9bc2	a9 07		lda #$07		lda	#7
.9bc4	4c ea 85	jmp $85ea		jmp	ErrorHandler
.9bc7					NotDoneError:
.9bc7	a9 0c		lda #$0c		lda	#12
.9bc9	4c ea 85	jmp $85ea		jmp	ErrorHandler
.9bcc					ErrorText:
>9bcc	42 72 65 61 6b 00			.text	"Break",0
>9bd2	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9bda	72 72 6f 72 00
>9bdf	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9be7	20 62 79 20 7a 65 72 6f 00
>9bf0	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9bf8	61 6e 67 65 00
>9bfd	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9c05	6d 61 74 63 68 00
>9c0b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9c13	65 6d 6f 72 79 00
>9c19	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9c21	61 72 67 75 6d 65 6e 74 00
>9c2a	53 74 6f 70 00				.text	"Stop",0
>9c2f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9c37	6f 6f 20 6c 6f 6e 67 00
>9c3f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9c47	6e 20 66 61 69 6c 65 64 00
>9c50	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9c58	61 74 61 00
>9c5c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9c64	65 6e 74 65 64 00
>9c6a	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9c72	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9c7e	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9c86	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9c93	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9c9b	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9ca8	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9cb0	68 6f 75 74 20 57 68 69 6c 65 00
>9cbb	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9cc3	68 6f 75 74 20 46 6f 72 00
>9ccc	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9cd4	61 63 6b 20 66 75 6c 6c 00
>9cdd	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9ce5	75 63 74 75 72 65 00
>9cec	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9cf4	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>9d01	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>9d09	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>9d17	41 72 72 61 79 20 73 69			.text	"Array size",0
>9d1f	7a 65 00
>9d22	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>9d2a	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.917a					StackOpen:
.917a	48		pha				pha 								; save frame byte
.917b	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.917d	0a		asl a				asl 	a 							; claim twice this for storage
.917e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9180	38		sec				sec 								; so basically subtracting from
.9181	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9183	85 34		sta $34				sta 	basicStack
.9185	b0 08		bcs $918f			bcs 	_SONoBorrow
.9187	c6 35		dec $35				dec 	basicStack+1
.9189	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.918b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.918d	90 04		bcc $9193			bcc 	_SOMemory
.918f					_SONoBorrow:
.918f	68		pla				pla 								; get marker back and write at TOS
.9190	92 34		sta ($34)			sta 	(basicStack)
.9192	60		rts				rts
.9193					_SOMemory:
.9193							ERR_STACK
.9193					StackClose:
.9193	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9195	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9197	0a		asl a				asl 	a 							; claim twice this.
.9198	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.919a	85 34		sta $34				sta 	basicStack
.919c	90 02		bcc $91a0			bcc 	_SCExit
.919e	e6 35		inc $35				inc 	basicStack+1
.91a0					_SCExit:
.91a0	60		rts				rts
.91a1					StackCheckFrame:
.91a1	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.91a3	29 f0		and #$f0			and 	#$F0 						; check type bits
.91a5	d0 01		bne $91a8			bne 	_SCFError 					; different, we have structures mixed up
.91a7	60		rts				rts
.91a8					_SCFError:
.91a8	8a		txa				txa 								; report error X
.91a9	4c ea 85	jmp $85ea			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.91ac					STKSaveCodePosition:
.91ac	5a		phy				phy
.91ad	98		tya				tya 								; save Y
.91ae	a0 05		ldy #$05			ldy 	#5
.91b0	91 34		sta ($34),y			sta 	(basicStack),y
.91b2	88		dey				dey 								; save Code Pointer
.91b3					_STKSaveLoop:
.91b3	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.91b6	91 34		sta ($34),y			sta 	(basicStack),y
.91b8	88		dey				dey
.91b9	d0 f8		bne $91b3			bne 	_STKSaveLoop
.91bb	7a		ply				ply
.91bc	60		rts				rts
.91bd					STKLoadCodePosition:
.91bd	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.91bf					_STKLoadLoop:
.91bf	b1 34		lda ($34),y			lda 	(basicStack),y
.91c1	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.91c4	c8		iny				iny
.91c5	c0 05		cpy #$05			cpy 	#5
.91c7	d0 f6		bne $91bf			bne 	_STKLoadLoop
.91c9	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.91cb	a8		tay				tay
.91cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.91cd					StackReset:
.91cd	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.91cf	85 34		sta $34				sta 	0+basicStack
.91d1	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.91d3	85 35		sta $35				sta 	1+basicStack
.91d5	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.91d7	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.91d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9d32					StringConcrete:
.9d32	5a		phy				phy 								; save position on stack
.9d33	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9d36	85 38		sta $38				sta 	zTemp1
.9d38	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9d3b	85 39		sta $39				sta 	zTemp1+1
.9d3d	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9d3f					_SALength:
.9d3f	c8		iny				iny
.9d40	b1 38		lda ($38),y			lda 	(zTemp1),y
.9d42	d0 fb		bne $9d3f			bne 	_SALength
.9d44	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9d46	b0 3f		bcs $9d87			bcs 	_SALengthError
.9d48	98		tya				tya 				 				; length of the new string
.9d49	18		clc				clc
.9d4a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9d4c	90 02		bcc $9d50			bcc 	_SAHaveLength
.9d4e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9d50					_SAHaveLength:
.9d50	48		pha				pha 								; save length.
.9d51	38		sec				sec
.9d52	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9d54	6d 0e 07	adc $070e			adc 	StringMemory
.9d57	8d 0e 07	sta $070e			sta 	StringMemory
.9d5a	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9d5c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9d5f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9d61	6d 0f 07	adc $070f			adc 	StringMemory+1
.9d64	8d 0f 07	sta $070f			sta 	StringMemory+1
.9d67	85 3b		sta $3b				sta 	zTemp2+1
.9d69	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d6c	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9d6d	38		sec				sec
.9d6e	e9 03		sbc #$03			sbc 	#3
.9d70	92 3a		sta ($3a)			sta 	(zTemp2)
.9d72	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9d74	a0 01		ldy #$01			ldy 	#1
.9d76	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9d78					_SACopyNewString:
.9d78	a0 00		ldy #$00			ldy 	#0
.9d7a					_SACopyNSLoop:
.9d7a	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9d7c	c8		iny				iny 								; write two on in string storage
.9d7d	c8		iny				iny
.9d7e	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9d80	88		dey				dey 								; this makes it one one.
.9d81	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9d83	d0 f5		bne $9d7a			bne 	_SACopyNSLoop
.9d85	7a		ply				ply
.9d86	60		rts				rts
.9d87					_SALengthError:
.9d87	a9 09		lda #$09		lda	#9
.9d89	4c ea 85	jmp $85ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9d8c					StringSystemInitialise:
.9d8c	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9d8e	8d 0e 07	sta $070e			sta 	0+StringMemory
.9d91	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9d93	8d 0f 07	sta $070f			sta 	1+StringMemory
.9d96	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9d99	60		rts				rts
.9d9a					StringSpaceInitialise:
.9d9a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9d9c	8d 10 07	sta $0710			sta 	StringInitialised
.9d9f	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9da2	8d 11 07	sta $0711			sta 	StringTempPointer
.9da5	ad 0f 07	lda $070f			lda 	StringMemory+1
.9da8	3a		dec a				dec 	a
.9da9	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9dac	60		rts				rts
.9dad					StringTempAllocate:
.9dad	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9daf	b0 35		bcs $9de6			bcs 	_STALength
.9db1	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9db4	30 05		bmi $9dbb			bmi 	_STAAllocate
.9db6	48		pha				pha 								; save value to subtract.
.9db7	20 9a 9d	jsr $9d9a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9dba	68		pla				pla 								; restore it
.9dbb					_STAAllocate:
.9dbb	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9dbd	18		clc				clc  								; deliberate allows one more
.9dbe	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9dc1	8d 11 07	sta $0711			sta 	StringTempPointer
.9dc4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9dc7	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9dc9	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9dcc	69 ff		adc #$ff			adc 	#$FF
.9dce	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9dd1	85 3d		sta $3d				sta 	zsTemp+1
.9dd3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9dd6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9dd9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9ddc	a9 10		lda #$10			lda 	#NSTString
.9dde	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9de1	a9 00		lda #$00			lda 	#0 							; clear the target string
.9de3	92 3c		sta ($3c)			sta 	(zsTemp)
.9de5	60		rts				rts
.9de6					_STALength:
.9de6	a9 09		lda #$09		lda	#9
.9de8	4c ea 85	jmp $85ea		jmp	ErrorHandler
.9deb					StringTempWrite:
.9deb	48		pha				pha
.9dec	92 3c		sta ($3c)			sta 	(zsTemp)
.9dee	e6 3c		inc $3c				inc 	zsTemp
.9df0	d0 02		bne $9df4			bne 	_STWNoCarry
.9df2	e6 3d		inc $3d				inc 	zsTemp+1
.9df4					_STWNoCarry:
.9df4	a9 00		lda #$00			lda 	#0
.9df6	92 3c		sta ($3c)			sta 	(zsTemp)
.9df8	68		pla				pla
.9df9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.91da					BackloadProgram:
.91da	a2 ff		ldx #$ff			ldx 	#$FF
.91dc	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.91df	20 09 92	jsr $9209			jsr 	BLReadByte
.91e2	30 1e		bmi $9202			bmi 	_BPExit
.91e4					_BPCopy:
.91e4	e8		inx				inx  								; copy byte in
.91e5	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.91e8	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.91eb	20 09 92	jsr $9209			jsr 	BLReadByte 					; read next byte
.91ee	30 0a		bmi $91fa			bmi 	_BPEndLine 					; -ve = EOL
.91f0	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.91f2	d0 02		bne $91f6			bne 	_BPNotTab
.91f4	a9 20		lda #$20			lda 	#' '
.91f6					_BPNotTab:
.91f6	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.91f8	b0 ea		bcs $91e4			bcs 	_BPCopy
.91fa					_BPEndLine:
.91fa	20 d3 93	jsr $93d3			jsr 	TokeniseLine 				; tokenise the line.
.91fd	20 5f 96	jsr $965f			jsr 	MemoryAppend 				; append to current program
.9200	80 d8		bra $91da			bra 	BackloadProgram
.9202					_BPExit:
.9202	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9205	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.9208	60		rts				rts
.9209					BLReadByte:
.9209					_BLLoad:
.9209	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.920c	ee 0a 92	inc $920a			inc 	_BLLoad+1
.920f	d0 03		bne $9214			bne 	_BLNoCarry
.9211	ee 0b 92	inc $920b			inc 	_BLLoad+2
.9214					_BLNoCarry:
.9214	c9 00		cmp #$00			cmp 	#0
.9216	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9217					TokeniseSearchTable:
.9217	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9219	85 36		sta $36				sta 	zTemp0
.921b	a0 00		ldy #$00			ldy 	#0
.921d	a9 80		lda #$80			lda 	#$80 						; token #
.921f	85 38		sta $38				sta 	zTemp1
.9221					_TSTLoop:
.9221	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9223	30 49		bmi $926e			bmi 	_TSTFail 					; -ve = end of table
.9225	f0 2e		beq $9255			beq 	_TSTNext 					; zero, check next it's a dummy
.9227	c8		iny				iny 								; get the hash
.9228	b1 36		lda ($36),y			lda 	(zTemp0),y
.922a	88		dey				dey
.922b	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.922e	d0 25		bne $9255			bne 	_TSTNext
.9230	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9233	38		sec				sec
.9234	ed 00 07	sbc $0700			sbc 	identStart
.9237	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9239	d0 1a		bne $9255			bne 	_TSTNext
.923b	5a		phy				phy 								; save Y , we might fail
.923c	c8		iny				iny 								; point to text
.923d	c8		iny				iny
.923e	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9241					_TSTCompareName:
.9241	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.9244	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9246	d0 0c		bne $9254			bne 	_TSTNextPullY 				; fail, pullY and do next
.9248	e8		inx				inx
.9249	c8		iny				iny
.924a	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.924d	d0 f2		bne $9241			bne 	_TSTCompareName
.924f	7a		ply				ply 								; throw Y
.9250	a5 38		lda $38				lda 	zTemp1 						; get token #
.9252	38		sec				sec 								; return with CS = passed.
.9253	60		rts				rts
.9254					_TSTNextPullY:
.9254	7a		ply				ply 								; restore current, fall through.
.9255					_TSTNext:
.9255	e6 38		inc $38				inc 	zTemp1 						; token counter
.9257	98		tya				tya
.9258	18		clc				clc
.9259	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.925b	1a		inc a				inc 	a 							; +1
.925c	1a		inc a				inc 	a 							; +2
.925d	a8		tay				tay
.925e	10 c1		bpl $9221			bpl 	_TSTLoop 					; if Y < $80 loop back
.9260	98		tya				tya 								; add Y to zTemp0 and reset Y
.9261	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9263	18		clc				clc  								; but have tables > 255 bytes
.9264	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9266	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9268	90 b7		bcc $9221			bcc 	_TSTLoop
.926a	e6 37		inc $37				inc 	zTemp0+1
.926c	80 b3		bra $9221			bra 	_TSTLoop
.926e					_TSTFail:
.926e	18		clc				clc
.926f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9270					KeywordSet0:
>9270	00 65					.text	0,$65,""               ; $80 !0:EOF
>9272	00 58					.text	0,$58,""               ; $81 !1:SH1
>9274	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9276	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>927c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9284	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>928a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9291	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9298	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>929f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>92a5	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>92ad	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>92b5	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>92bb	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>92c2	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>92c8	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>92d0	28
>92d1	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>92d7	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>92dd	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>92e3	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>92ea	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>92f0	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>92f6	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>92fb	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>92ff	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9305	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>930d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9314	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>931b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9323	43
>9324	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>932a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9330	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9337	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>933d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9343	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9348	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>934e	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9353	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>935b	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9361	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9368	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>936e	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9373	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>937a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9380	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9385	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>938d	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9391	ff					.text	$FF
.9392					KeywordSet1:
>9392	00 65					.text	0,$65,""               ; $80 !0:EOF
>9394	00 58					.text	0,$58,""               ; $81 !1:SH1
>9396	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9398	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>93a0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>93a7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>93ac	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>93b2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>93b7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>93bf	45
>93c0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>93c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>93cb	ff					.text	$FF
.93cc					KeywordSet2:
>93cc	00 65					.text	0,$65,""               ; $80 !0:EOF
>93ce	00 58					.text	0,$58,""               ; $81 !1:SH1
>93d0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>93d2	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.93d3					TokeniseLine:
.93d3	20 5b 95	jsr $955b			jsr 	FixLineBufferCase 			; fix line case
.93d6	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.93d8	8d 15 07	sta $0715			sta 	tokenOffset
.93db	9c 16 07	stz $0716			stz 	tokenLineNumber
.93de	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.93e1	a2 ff		ldx #$ff			ldx 	#$FF
.93e3					_TKFindFirst:
.93e3	e8		inx				inx
.93e4	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.93e7	f0 79		beq $9462			beq 	_TKExit
.93e9	c9 20		cmp #$20			cmp 	#' '
.93eb	90 f6		bcc $93e3			bcc 	_TKFindFirst
.93ed	c9 30		cmp #$30			cmp 	#'0'
.93ef	90 07		bcc $93f8			bcc 	_TKNoLineNumber
.93f1	c9 3a		cmp #$3a			cmp 	#'9'+1
.93f3	b0 03		bcs $93f8			bcs 	_TKNoLineNumber
.93f5	20 85 95	jsr $9585			jsr 	TokeniseExtractLineNumber
.93f8					_TKNoLineNumber:
.93f8					_TKTokeniseLoop:
.93f8	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.93fb	f0 65		beq $9462			beq 	_TKExit
.93fd	e8		inx				inx
.93fe	c9 20		cmp #$20			cmp 	#' '
.9400	f0 f6		beq $93f8			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9402	ca		dex				dex 								; undo last get, A contains character, X is position.
.9403	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9405	f0 61		beq $9468			beq 	_TKTokeniseIdentifier
.9407	c9 41		cmp #$41			cmp 	#'A'
.9409	90 04		bcc $940f			bcc 	_TKTokenisePunctuation
.940b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.940d	90 59		bcc $9468			bcc 	_TKTokeniseIdentifier
.940f					_TKTokenisePunctuation:
.940f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9411	f0 27		beq $943a			beq 	_TKString
.9413	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9415	f0 28		beq $943f			beq 	_TKHexConstant
.9417	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9419	f0 29		beq $9444			beq 	_TKCheckDouble
.941b	c9 3e		cmp #$3e			cmp 	#'>'
.941d	f0 25		beq $9444			beq 	_TKCheckDouble
.941f					_TKStandardPunctuation:
.941f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9422	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9424	90 0e		bcc $9434			bcc 	_TKNoShift
.9426	48		pha				pha 								; save
.9427	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9429	85 36		sta $36				sta 	zTemp0
.942b	68		pla				pla
.942c	29 20		and #$20			and 	#32 						; bit 5
.942e	4a		lsr a				lsr 	a 							; shift into bit 3
.942f	4a		lsr a				lsr 	a
.9430	05 36		ora $36				ora 	zTemp0
.9432	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9434					_TKNoShift:
.9434	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte 			; write the punctuation character
.9437	e8		inx				inx 								; consume the character
.9438	80 be		bra $93f8			bra 	_TKTokeniseLoop 			; and loop round again.
.943a					_TKString:
.943a	20 ea 94	jsr $94ea			jsr 	TokeniseString
.943d	80 b9		bra $93f8			bra 	_TKTokeniseLoop
.943f					_TKHexConstant:
.943f	20 25 95	jsr $9525			jsr 	TokeniseHexConstant
.9442	80 b4		bra $93f8			bra 	_TKTokeniseLoop
.9444					_TKCheckDouble:
.9444	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.9447	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9449	90 d4		bcc $941f			bcc 	_TKStandardPunctuation
.944b	c9 3f		cmp #$3f			cmp 	#'>'+1
.944d	b0 d0		bcs $941f			bcs 	_TKStandardPunctuation
.944f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9452	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9454	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9455	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9458	38		sec				sec
.9459	e9 3c		sbc #$3c			sbc 	#'<'
.945b	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.945e	e8		inx				inx 								; consume both
.945f	e8		inx				inx
.9460	80 96		bra $93f8			bra 	_TKTokeniseLoop
.9462	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9464	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.9467	60		rts				rts
.9468					_TKTokeniseIdentifier:
.9468	8e 00 07	stx $0700			stx 	identStart 					; save start
.946b	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.946e					_TKCheckLoop:
.946e	e8		inx				inx 								; look at next, we know first is identifier.
.946f	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9472	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9474	f0 f8		beq $946e			beq 	_TKCheckLoop
.9476	c9 30		cmp #$30			cmp	 	#"0"
.9478	90 0c		bcc $9486			bcc 	_TKEndIdentifier
.947a	c9 3a		cmp #$3a			cmp 	#"9"+1
.947c	90 f0		bcc $946e			bcc 	_TKCheckLoop
.947e	c9 41		cmp #$41			cmp	 	#"A"
.9480	90 04		bcc $9486			bcc 	_TKEndIdentifier
.9482	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9484	90 e8		bcc $946e			bcc 	_TKCheckLoop
.9486					_TKEndIdentifier:
.9486	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9489	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.948b	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.948d	f0 06		beq $9495			beq 	_TKHasTypeCharacter
.948f	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9491	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9493	d0 07		bne $949c			bne 	_TKNoTypeCharacter
.9495					_TKHasTypeCharacter:
.9495	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9498	e8		inx				inx 								; read next
.9499	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.949c					_TKNoTypeCharacter:
.949c	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.949e	d0 09		bne $94a9			bne 	_TKNoArray
.94a0	e8		inx				inx 								; skip the (
.94a1	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.94a4	09 04		ora #$04			ora 	#$04
.94a6	8d 04 07	sta $0704			sta 	identTypeByte
.94a9					_TKNoArray:
.94a9	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.94ac	20 46 95	jsr $9546			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.94af	a0 92		ldy #$92			ldy 	#(KeywordSet0) >> 8
.94b1	a9 70		lda #$70			lda 	#(KeywordSet0) & $FF
.94b3	20 17 92	jsr $9217			jsr 	TokeniseSearchTable
.94b6	a2 00		ldx #$00			ldx 	#0
.94b8	b0 1f		bcs $94d9			bcs 	_TKFoundToken
.94ba	a0 93		ldy #$93			ldy 	#(KeywordSet1) >> 8
.94bc	a9 92		lda #$92			lda 	#(KeywordSet1) & $FF
.94be	20 17 92	jsr $9217			jsr 	TokeniseSearchTable
.94c1	a2 81		ldx #$81			ldx 	#$81
.94c3	b0 14		bcs $94d9			bcs 	_TKFoundToken
.94c5	a0 93		ldy #$93			ldy 	#(KeywordSet1) >> 8
.94c7	a9 92		lda #$92			lda 	#(KeywordSet1) & $FF
.94c9	20 17 92	jsr $9217			jsr 	TokeniseSearchTable
.94cc	a2 82		ldx #$82			ldx 	#$82
.94ce	b0 09		bcs $94d9			bcs 	_TKFoundToken
.94d0	20 d6 95	jsr $95d6			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.94d3	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.94d6	4c f8 93	jmp $93f8			jmp 	_TKTokeniseLoop 			; and go round again.
.94d9					_TKFoundToken:
.94d9	48		pha				pha 								; save token
.94da	8a		txa				txa 								; shift in X, is there one ?
.94db	f0 03		beq $94e0			beq 	_TKNoTShift
.94dd	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte 			; if so, write it out
.94e0					_TKNoTShift:
.94e0	68		pla				pla 								; restore and write token
.94e1	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.94e4	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.94e7	4c f8 93	jmp $93f8			jmp 	_TKTokeniseLoop 			; and go round again.
.94ea					TokeniseString:
.94ea	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.94ec	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.94ef	e8		inx				inx									; start of quoted string.
.94f0	da		phx				phx 								; push start of string on top
.94f1	ca		dex				dex
.94f2					_TSFindEnd:
.94f2	e8		inx				inx
.94f3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.94f6	f0 04		beq $94fc			beq 	_TSEndOfString
.94f8	c9 22		cmp #$22			cmp 	#'"'
.94fa	d0 f6		bne $94f2			bne 	_TSFindEnd
.94fc					_TSEndOfString:
.94fc	7a		ply				ply  								; so now Y is first character, X is character after end.
.94fd	48		pha				pha 								; save terminating character
.94fe	20 06 95	jsr $9506			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9501	68		pla				pla 								; terminating character
.9502	f0 01		beq $9505			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9504	e8		inx				inx
.9505					_TSNotQuote:
.9505	60		rts				rts
.9506					TOWriteBlockXY:
.9506	86 36		stx $36				stx 	zTemp0 						; write end character
.9508	98		tya				tya
.9509	49 ff		eor #$ff			eor 	#$FF
.950b	38		sec				sec
.950c	65 36		adc $36				adc 	zTemp0
.950e	1a		inc a				inc 	a 							; one extra for NULL
.950f	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.9512					_TOBlockLoop:
.9512	c4 36		cpy $36				cpy 	zTemp0
.9514	f0 09		beq $951f			beq 	_TOBlockExit
.9516	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9519	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.951c	c8		iny				iny
.951d	80 f3		bra $9512			bra 	_TOBlockLoop
.951f					_TOBlockExit:
.951f	a9 00		lda #$00			lda 	#0
.9521	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.9524	60		rts				rts
.9525					TokeniseHexConstant:
.9525	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9527	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.952a	e8		inx				inx									; start of quoted string.
.952b	da		phx				phx 								; push start of constant on top
.952c	ca		dex				dex
.952d					_THFindLoop:
.952d	e8		inx				inx
.952e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9531	c9 30		cmp #$30			cmp 	#"0"
.9533	90 0c		bcc $9541			bcc 	_THFoundEnd
.9535	c9 3a		cmp #$3a			cmp 	#"9"+1
.9537	90 f4		bcc $952d			bcc 	_THFindLoop
.9539	c9 41		cmp #$41			cmp 	#"A"
.953b	90 04		bcc $9541			bcc 	_THFoundEnd
.953d	c9 47		cmp #$47			cmp 	#"F"+1
.953f	90 ec		bcc $952d			bcc 	_THFindLoop
.9541					_THFoundEnd:
.9541	7a		ply				ply 								; restore start
.9542	20 06 95	jsr $9506			jsr 	TOWriteBlockXY 				; output the block
.9545	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9546					TokeniseCalculateHash:
.9546	da		phx				phx
.9547	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.954a	a9 00		lda #$00			lda 	#0
.954c					_TCHLoop:
.954c	18		clc				clc
.954d	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.9550	e8		inx				inx
.9551	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9554	d0 f6		bne $954c			bne 	_TCHLoop
.9556	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9559	fa		plx				plx
.955a	60		rts				rts
.955b					FixLineBufferCase:
.955b	a2 00		ldx #$00			ldx 	#0
.955d					_FLBCLoop:
.955d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.9560	f0 22		beq $9584			beq 	_FLBCExit 					; end of string.
.9562	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9564	f0 11		beq $9577			beq 	_FLBCInQuotes
.9566	e8		inx				inx
.9567	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9569	90 f2		bcc $955d			bcc 	_FLBCLoop
.956b	c9 7b		cmp #$7b			cmp 	#'z'+1
.956d	b0 ee		bcs $955d			bcs 	_FLBCLoop
.956f	38		sec				sec 								; make U/C
.9570	e9 20		sbc #$20			sbc 	#32
.9572	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9575	80 e6		bra $955d			bra 	_FLBCLoop
.9577					_FLBCInQuotes:
.9577	e8		inx				inx 								; advance
.9578	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.957b	f0 07		beq $9584			beq 	_FLBCExit 					; exit on EOS
.957d	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.957f	d0 f6		bne $9577			bne 	_FLBCInQuotes
.9581	e8		inx				inx 								; skip over it
.9582	80 d9		bra $955d			bra 	_FLBCLoop
.9584					_FLBCExit:
.9584	60		rts				rts
.9585					TokeniseExtractLineNumber:
.9585	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.9588	48		pha				pha
.9589	ad 16 07	lda $0716			lda 	tokenLineNumber
.958c	48		pha				pha
.958d	20 c3 95	jsr $95c3			jsr 	_TELNTimes2 				; line # x 4
.9590	20 c3 95	jsr $95c3			jsr 	_TELNTimes2 				; line # x 2
.9593	18		clc				clc 								; add stacked value
.9594	68		pla				pla
.9595	6d 16 07	adc $0716			adc 	tokenLineNumber
.9598	8d 16 07	sta $0716			sta 	tokenLineNumber
.959b	68		pla				pla
.959c	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.959f	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.95a2	20 c3 95	jsr $95c3			jsr 	_TELNTimes2 				; line # x 10
.95a5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.95a8	e8		inx				inx
.95a9	29 0f		and #$0f			and 	#15 						; add to line #
.95ab	18		clc				clc
.95ac	6d 16 07	adc $0716			adc 	tokenLineNumber
.95af	8d 16 07	sta $0716			sta 	tokenLineNumber
.95b2	90 03		bcc $95b7			bcc 	_TLENNoCarry
.95b4	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.95b7					_TLENNoCarry:
.95b7	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.95ba	c9 30		cmp #$30			cmp 	#'0'
.95bc	90 04		bcc $95c2			bcc 	_TLENExit
.95be	c9 3a		cmp #$3a			cmp 	#'9'+1
.95c0	90 c3		bcc $9585			bcc 	TokeniseExtractLineNumber
.95c2					_TLENExit:
.95c2	60		rts				rts
.95c3					_TELNTimes2:
.95c3	0e 16 07	asl $0716			asl 	tokenLineNumber
.95c6	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.95c9	60		rts				rts
.95ca					TokeniseWriteByte:
.95ca	da		phx				phx
.95cb	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.95ce	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.95d1	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.95d4	fa		plx				plx
.95d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.95d6					CheckCreateVariableRecord:
.95d6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.95d8	85 36		sta $36				sta 	0+zTemp0
.95da	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.95dc	85 37		sta $37				sta 	1+zTemp0
.95de					_CCVSearch:
.95de	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.95e0	f0 2c		beq $960e			beq 	_CCVFail
.95e2	a0 01		ldy #$01			ldy 	#1 							; read the hash
.95e4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.95e6	cd 03 07	cmp $0703			cmp 	identHash
.95e9	d0 16		bne $9601			bne 	_CCVNext
.95eb	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.95ed	ae 00 07	ldx $0700			ldx 	identStart
.95f0					_CCVCompare:
.95f0	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.95f3	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.95f5	e8		inx				inx 								; advance pointers
.95f6	c8		iny				iny
.95f7	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.95f8	d0 07		bne $9601			bne 	_CCVNext  					; didn't match go to next.
.95fa	90 f4		bcc $95f0			bcc 	_CCVCompare 				; not finished yet.
.95fc	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.95ff	f0 41		beq $9642			beq 	_CCVFound 					; yes, we were successful
.9601					_CCVNext:
.9601	18		clc				clc
.9602	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9604	65 36		adc $36				adc 	zTemp0
.9606	85 36		sta $36				sta 	zTemp0
.9608	90 d4		bcc $95de			bcc 	_CCVSearch
.960a	e6 37		inc $37				inc 	zTemp0+1
.960c	80 d0		bra $95de			bra 	_CCVSearch
.960e					_CCVFail:
.960e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9610	ad 03 07	lda $0703			lda 	identHash
.9613	91 36		sta ($36),y			sta 	(zTemp0),y
.9615	c8		iny				iny 								; offset 2 is the type byte
.9616	ad 04 07	lda $0704			lda 	identTypeByte
.9619	91 36		sta ($36),y			sta 	(zTemp0),y
.961b	c8		iny				iny
.961c					_CCVData:
.961c	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.961e	91 36		sta ($36),y			sta 	(zTemp0),y
.9620	c8		iny				iny
.9621	c0 08		cpy #$08			cpy 	#8
.9623	90 f7		bcc $961c			bcc 	_CCVData
.9625	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9628					_CCVCopyName:
.9628	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.962b	91 36		sta ($36),y			sta 	(zTemp0),y
.962d	e8		inx				inx
.962e	c8		iny				iny
.962f	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9632	d0 f4		bne $9628			bne 	_CCVCopyName
.9634	98		tya				tya 								; patch offset
.9635	92 36		sta ($36)			sta 	(zTemp0)
.9637	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9639	91 36		sta ($36),y			sta 	(zTemp0),y
.963b	88		dey				dey
.963c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.963e	09 80		ora #$80			ora 	#$80
.9640	91 36		sta ($36),y			sta 	(zTemp0),y
.9642					_CCVFound:
.9642	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9644	38		sec				sec
.9645	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9647	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9649	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.964c	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.964e	20 ca 95	jsr $95ca			jsr 	TokeniseWriteByte
.9651	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9dfa					MemoryPeek:
.9dfa	b2 36		lda ($36)			lda 	(zTemp0)
.9dfc	60		rts				rts
.9dfd					MemoryPoke:
.9dfd	92 36		sta ($36)			sta 	(zTemp0)
.9dff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9e00					PrintHex:
.9e00	48		pha				pha
.9e01	4a		lsr a				lsr 	a
.9e02	4a		lsr a				lsr 	a
.9e03	4a		lsr a				lsr 	a
.9e04	4a		lsr a				lsr 	a
.9e05	20 09 9e	jsr $9e09			jsr 	_PrintNibble
.9e08	68		pla				pla
.9e09					_PrintNibble:
.9e09	29 0f		and #$0f			and 	#15
.9e0b	c9 0a		cmp #$0a			cmp 	#10
.9e0d	90 02		bcc $9e11			bcc 	_NoShift
.9e0f	69 06		adc #$06			adc 	#6
.9e11					_NoShift:
.9e11	69 30		adc #$30			adc 	#48
.9e13	4c 16 9e	jmp $9e16			jmp 	EXTPrintCharacter
.9e16					EXTPrintCharacter:
.9e16	48		pha				pha
.9e17	da		phx				phx
.9e18	5a		phy				phy
.9e19	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9e1c	7a		ply				ply
.9e1d	fa		plx				plx
.9e1e	68		pla				pla
.9e1f	60		rts				rts
.9e20					EXTInputSingleCharacter:
.9e20	da		phx				phx
.9e21	5a		phy				phy
.9e22					_EISCWait:
.9e22	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9e25	c9 00		cmp #$00			cmp 	#0
.9e27	f0 f9		beq $9e22			beq 	_EISCWait
.9e29	7a		ply				ply
.9e2a	fa		plx				plx
.9e2b	60		rts				rts
.9e2c					EXTInputLine:
.9e2c	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9e2e					_ILLoop:
.9e2e	da		phx				phx 								; read character in
.9e2f	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9e32	fa		plx				plx
.9e33	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9e35	f0 12		beq $9e49			beq 	_ILBackspace
.9e37	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9e39	f0 15		beq $9e50			beq 	_ILExit
.9e3b	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9e3d	90 ef		bcc $9e2e			bcc 	_ILLoop
.9e3f	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9e41	f0 eb		beq $9e2e			beq 	_ILLoop
.9e43	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9e46	e8		inx				inx
.9e47	80 e5		bra $9e2e			bra 	_ILLoop
.9e49					_ILBackspace:
.9e49	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9e4b	f0 e1		beq $9e2e			beq 	_ILLoop
.9e4d	ca		dex				dex 								; back one.
.9e4e	80 de		bra $9e2e			bra 	_ILLoop
.9e50					_ILExit:
.9e50	20 16 9e	jsr $9e16			jsr 	EXTPrintCharacter
.9e53	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9e56	60		rts				rts
.9e57					EXTBreakCheck:
.9e57	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9652					MemoryNew:
.9652	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9654	85 30		sta $30				sta 	codePtr
.9656	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9658	85 31		sta $31				sta 	codePtr+1
.965a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.965c	92 30		sta ($30)			sta 	(codePtr)
.965e	60		rts				rts
.965f					MemoryAppend:
.965f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9661	85 30		sta $30				sta 	codePtr
.9663	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9665	85 31		sta $31				sta 	codePtr+1
.9667					_MAFindEnd:
.9667	b2 30		lda ($30)			lda 	(codePtr)
.9669	f0 0d		beq $9678			beq 	_MAFoundEnd
.966b	18		clc				clc
.966c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.966e	65 30		adc $30				adc 	codePtr
.9670	85 30		sta $30				sta 	codePtr
.9672	90 02		bcc $9676			bcc 	_CREExit
.9674	e6 31		inc $31				inc 	codePtr+1
.9676					_CREExit:
.9676	80 ef		bra $9667			bra 	_MAFindEnd
.9678					_MAFoundEnd:
.9678	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.967b	c0 04		cpy #$04			cpy 	#4 							; blank line
.967d	f0 0e		beq $968d			beq 	_MANoLine
.967f	a9 00		lda #$00			lda 	#0 							; end of program
.9681	91 30		sta ($30),y			sta 	(codePtr),y
.9683					_MACopy:
.9683	88		dey				dey
.9684	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9687	91 30		sta ($30),y			sta 	(codePtr),y
.9689	c0 00		cpy #$00			cpy 	#0
.968b	d0 f6		bne $9683			bne 	_MACopy
.968d					_MANoLine:
.968d	60		rts				rts
.968e					MemoryInline:
.968e	98		tya				tya 								; put address into stack,x
.968f	18		clc				clc
.9690	65 30		adc $30				adc 	codePtr
.9692	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9695	a5 31		lda $31				lda 	codePtr+1
.9697	69 00		adc #$00			adc 	#0
.9699	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.969c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.969f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.96a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.96a3					MemoryTransferAX:
.96a3	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.96a5	86 37		stx $37				stx 	zTemp0+1
.96a7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.96a9	85 30		sta $30				sta 	codePtr
.96ab	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.96ad	85 31		sta $31				sta 	codePtr+1
.96af					_MTAXLoop:
.96af	b2 30		lda ($30)			lda 	(codePtr)
.96b1	f0 1d		beq $96d0			beq 	_MTAXError 					; not found.
.96b3	a0 01		ldy #$01			ldy 	#1 							; check LSB
.96b5	b1 30		lda ($30),y			lda 	(codePtr),y
.96b7	c5 36		cmp $36				cmp 	zTemp0
.96b9	d0 07		bne $96c2			bne 	_MTAXNext
.96bb	c8		iny				iny 								; check MSB
.96bc	b1 30		lda ($30),y			lda 	(codePtr),y
.96be	c5 37		cmp $37				cmp 	zTemp0+1
.96c0	f0 0d		beq $96cf			beq 	_MTAXExit 					; success !
.96c2					_MTAXNext:
.96c2	18		clc				clc
.96c3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.96c5	65 30		adc $30				adc 	codePtr
.96c7	85 30		sta $30				sta 	codePtr
.96c9	90 02		bcc $96cd			bcc 	_CREExit
.96cb	e6 31		inc $31				inc 	codePtr+1
.96cd					_CREExit:
.96cd	80 e0		bra $96af			bra 	_MTAXLoop
.96cf					_MTAXExit:
.96cf	60		rts				rts
.96d0					_MTAXError:
.96d0	a9 0d		lda #$0d		lda	#13
.96d2	4c ea 85	jmp $85ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
