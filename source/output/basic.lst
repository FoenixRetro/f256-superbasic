
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Nov  1 15:07:58 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 9a b6	jsr $b69a			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 e2 9a	jsr $9ae2			jsr 	PrintStringXA
.8014	20 02 94	jsr $9402			jsr 	NewCommand 					; erase current program
.8017	20 ea a7	jsr $a7ea			jsr 	BackloadProgram
.801a	4c 7d 95	jmp $957d			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2510."
>8065	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>8075	32 2e 20 42 75 69 6c 64 20 32 35 31 30 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSpriteID:
>0646							.fill 	1
.0647					GSCurrentSpriteAddr:
>0647							.fill 	2
.0649					GXSpriteOffsetBase:
>0649							.fill 	2
.064b					GXSpriteLow:
>064b							.fill 	64
.068b					GXSpriteHigh:
>068b							.fill 	64

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8086					GXGraphicDraw:
.8086	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use coordinates
.8088	b0 06		bcs $8090			bcs 	_GDCoordinate
.808a	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808c	84 37		sty $37				sty 	gxzTemp0+1
.808e	80 4b		bra $80db			bra 	_GDExecuteA 				; and execute
.8090					_GDCoordinate:
.8090	48		pha				pha 								; save AXY
.8091	da		phx				phx
.8092	5a		phy				phy
.8093	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8095					_GDCopy1:
.8095	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8098	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809b	ca		dex				dex
.809c	10 f7		bpl $8095			bpl 	_GDCopy1
.809e	68		pla				pla 								; update Y
.809f	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a2	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a5	68		pla				pla
.80a6	8d 2a 06	sta $062a			sta 	gxCurrentX
.80a9	68		pla				pla 								; get A (command+X.1) back
.80aa	48		pha				pha
.80ab	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ad	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b0	68		pla				pla 								; get command back
.80b1	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b3	48		pha				pha 								; push back.
.80b4	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b6	f0 17		beq $80cf			beq 	_GDCopyToWorkArea
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bb	f0 07		beq $80c4			beq 	_GDCheckY
.80bd	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c0	c9 40		cmp #$40			cmp 	#64
.80c2	b0 08		bcs $80cc			bcs 	_GDError1
.80c4					_GDCheckY:
.80c4	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c7	cd 3e 06	cmp $063e			cmp 	gxHeight
.80ca	90 03		bcc $80cf			bcc 	_GDCopyToWorkArea
.80cc					_GDError1:
.80cc	68		pla				pla
.80cd					_GDError2:
.80cd	38		sec				sec
.80ce	60		rts				rts
.80cf					_GDCopyToWorkArea:
.80cf	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d1					_GDCopy2:
.80d1	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d4	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d7	ca		dex				dex
.80d8	10 f7		bpl $80d1			bpl 	_GDCopy2
.80da	68		pla				pla 								; get command
.80db					_GDExecuteA:
.80db	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80dd	b0 ee		bcs $80cd			bcs 	_GDError2
.80df	aa		tax				tax
.80e0	7c e6 80	jmp ($80e6,x)			jmp 	(GRVectorTable,x)
.80e3					GXMove:
.80e3	18		clc				clc
.80e4	60		rts				rts
.80e5					GRUndefined:
>80e5	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e6					GRVectorTable:
>80e6	b5 82					.word	GXInitialise             ; $00 Initialise
>80e8	cf 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80ea	17 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ec	67 82					.word	GXClearBitmap            ; $03 Clear
>80ee	a6 84					.word	GXSetColourMode          ; $04 Colour
>80f0	6e 86					.word	GXFontHandler            ; $05 DrawFont
>80f2	b6 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f4	22 87					.word	GXSelect                 ; $07 SPRUSE
>80f6	4b 87					.word	GXSelectImage            ; $08 SPRIMG
>80f8	d4 88					.word	GXCollide                ; $09 COLLIDE
>80fa	e5 80					.word	GRUndefined              ; $0a
>80fc	e5 80					.word	GRUndefined              ; $0b
>80fe	e5 80					.word	GRUndefined              ; $0c
>8100	e5 80					.word	GRUndefined              ; $0d
>8102	e5 80					.word	GRUndefined              ; $0e
>8104	e5 80					.word	GRUndefined              ; $0f
>8106	e3 80					.word	GXMove                   ; $10 Move
>8108	74 83					.word	GXLine                   ; $11 Line
>810a	ef 84					.word	GXFrameRectangle         ; $12 FrameRect
>810c	ec 84					.word	GXFillRectangle          ; $13 FillRect
>810e	1e 81					.word	GXFrameCircle            ; $14 FrameCircle
>8110	1a 81					.word	GXFillCircle             ; $15 FillCircle
>8112	e5 80					.word	GRUndefined              ; $16
>8114	e5 80					.word	GRUndefined              ; $17
>8116	d4 84					.word	GXPlotPoint              ; $18 Plot
>8118	e1 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811a					GXFillCircle:
.811a	a9 ff		lda #$ff			lda 	#255
.811c	80 02		bra $8120			bra 	GXCircle
.811e					GXFrameCircle:
.811e	a9 00		lda #$00			lda 	#0
.8120					GXCircle:
.8120	8d ce 06	sta $06ce			sta 	gxIsFillMode					; save Fill flag
.8123	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8126	f0 26		beq $814e			beq 	_GXCFail
.8128	20 7b 89	jsr $897b			jsr 	GXSortXY 					; topleft/bottomright
.812b	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.812e	20 20 82	jsr $8220			jsr 	GXCircleSetup 				; set up for drawing
.8131	9c cf 06	stz $06cf			stz 	gxYChanged
.8134					_GXCircleDraw:
.8134	ad cc 06	lda $06cc			lda 	gXCentre					; while x <= y
.8137	cd cd 06	cmp $06cd			cmp 	gYCentre
.813a	90 0a		bcc $8146			bcc 	_GXCircleContinue
.813c	d0 03		bne $8141			bne 	_GXNoLast
.813e	20 53 81	jsr $8153			jsr 	GXPlot1
.8141					_GXNoLast:
.8141	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; close the bitmap
.8144	18		clc				clc
.8145	60		rts				rts
.8146					_GXCircleContinue:
.8146	20 50 81	jsr $8150			jsr 	GXPlot2 					; draw it
.8149	20 cd 81	jsr $81cd			jsr 	GXCircleMove 				; adjust the coordinates
.814c	80 e6		bra $8134			bra 	_GXCircleDraw
.814e					_GXCFail:
.814e	38		sec				sec
.814f	60		rts				rts
.8150					GXPlot2:
.8150	20 53 81	jsr $8153			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8153					GXPlot1:
.8153	ad cd 06	lda $06cd			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8156	f0 03		beq $815b			beq 	_GXPlot1Only
.8158	20 77 81	jsr $8177			jsr 	GXPlot0 						; plot and negate
.815b					_GXPlot1Only:
.815b	20 77 81	jsr $8177			jsr 	GXPlot0 						; twice, undoing negation
.815e	ad cc 06	lda $06cc			lda 	gXCentre 						; swap X and Y
.8161	ae cd 06	ldx $06cd			ldx	 	gYCentre
.8164	8d cd 06	sta $06cd			sta 	gYCentre
.8167	8e cc 06	stx $06cc			stx 	gXCentre
.816a	ad cf 06	lda $06cf			lda 	gxYChanged 						; toggle Y Changed flag
.816d	a9 ff		lda #$ff			lda 	#$FF
.816f	8d cf 06	sta $06cf			sta 	gxYChanged
.8172	60		rts				rts
.8173	20 77 81	jsr $8177			jsr 	GXPlot0 						; do once
.8176	60		rts				rts
.8177	ad ce 06	lda $06ce	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817a	f0 05		beq $8181			beq 	_GXPlot0Always
.817c	ad cf 06	lda $06cf			lda 	gxYChanged						; fill mode, only draw if changed.
.817f	f0 2d		beq $81ae			beq 	GXPlot0Exit
.8181					_GXPlot0Always:
.8181	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8183	ad cd 06	lda $06cd			lda 	gYCentre
.8186	20 af 81	jsr $81af			jsr 	GXSubCopy
.8189	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818b	ad cc 06	lda $06cc			lda 	gXCentre
.818e	20 af 81	jsr $81af			jsr 	GXSubCopy
.8191	48		pha				pha 									; save last offset X
.8192	20 63 88	jsr $8863			jsr 	GXPositionCalc 					; calculate position/offset.
.8195	68		pla				pla
.8196	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8197	85 36		sta $36				sta 	gxzTemp0
.8199	64 37		stz $37				stz 	gxzTemp0+1
.819b	26 37		rol $37				rol 	gxzTemp0+1
.819d	ad ce 06	lda $06ce			lda 	gxIsFillMode
.81a0	69 80		adc #$80			adc 	#128
.81a2	20 3f 85	jsr $853f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a5	38		sec				sec 									; GY = -GY
.81a6	a9 00		lda #$00			lda 	#0
.81a8	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ab	8d cd 06	sta $06cd			sta 	gYCentre
.81ae					GXPlot0Exit:
.81ae	60		rts				rts
.81af					GXSubCopy:
.81af	85 36		sta $36				sta 	gxzTemp0
.81b1	64 37		stz $37				stz 	gxzTemp0+1
.81b3	29 80		and #$80			and 	#$80
.81b5	f0 02		beq $81b9			beq 	_GXNoSx
.81b7	c6 37		dec $37				dec 	gxzTemp0+1
.81b9					_GXNoSx:
.81b9	38		sec				sec
.81ba	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bd	e5 36		sbc $36				sbc 	gxzTemp0
.81bf	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c2	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c5	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c7	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81ca	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cc	60		rts				rts
.81cd					GXCircleMove:
.81cd	9c cf 06	stz $06cf			stz 	gxYChanged 					; clear Y changed flag
.81d0	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d2	10 0d		bpl $81e1			bpl 	_GXEMPositive
.81d4	ee cc 06	inc $06cc			inc 	gXCentre 					; X++
.81d7	ad cc 06	lda $06cc			lda 	gXCentre
.81da	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dd	a9 06		lda #$06			lda 	#6  						; and add 6
.81df	80 15		bra $81f6			bra 	_GXEMAddD
.81e1					_GXEMPositive:
.81e1	ee cc 06	inc $06cc			inc 	gXCentre					; X++
.81e4	ce cd 06	dec $06cd			dec 	gyCentre 					; Y--
.81e7	38		sec				sec 								; calculate X-Y
.81e8	ad cc 06	lda $06cc			lda 	gXCentre
.81eb	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ee	20 00 82	jsr $8200			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f1	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f3	ce cf 06	dec $06cf			dec 	gxYChanged
.81f6					_GXEMAddD:
.81f6	18		clc				clc
.81f7	65 38		adc $38				adc 	gxzTemp1
.81f9	85 38		sta $38				sta 	gxzTemp1
.81fb	90 02		bcc $81ff			bcc 	_GXEMNoCarry
.81fd	e6 39		inc $39				inc 	gxzTemp1+1
.81ff					_GXEMNoCarry:
.81ff	60		rts				rts
.8200					_GXAdd4TimesToD:
.8200	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8202	29 80		and #$80			and 	#$80
.8204	f0 02		beq $8208			beq 	_GXA4Unsigned
.8206	a9 ff		lda #$ff			lda 	#$FF
.8208					_GXA4Unsigned:
.8208	85 37		sta $37				sta 	gxzTemp0+1
.820a	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820c	26 37		rol $37				rol 	gxzTemp0+1
.820e	06 36		asl $36				asl 	gxzTemp0
.8210	26 37		rol $37				rol 	gxzTemp0+1
.8212	18		clc				clc 								; add
.8213	a5 36		lda $36				lda		gxzTemp0
.8215	65 38		adc $38				adc 	gxzTemp1
.8217	85 38		sta $38				sta 	gxzTemp1
.8219	a5 37		lda $37				lda		gxzTemp0+1
.821b	65 39		adc $39				adc 	gxzTemp1+1
.821d	85 39		sta $39				sta 	gxzTemp1+1
.821f	60		rts				rts
.8220					GXCircleSetup:
.8220	38		sec				sec
.8221	ad 38 06	lda $0638			lda 	gxY1
.8224	ed 34 06	sbc $0634			sbc 	gxY0
.8227	4a		lsr a				lsr 	a
.8228	8d cb 06	sta $06cb			sta 	gxRadius
.822b	a2 00		ldx #$00			ldx 	#0
.822d	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8230	a2 02		ldx #$02			ldx 	#2
.8232	20 4f 82	jsr $824f			jsr 	_GXCalculateCentre
.8235	9c cc 06	stz $06cc			stz 	gXCentre
.8238	ad cb 06	lda $06cb			lda 	gxRadius
.823b	8d cd 06	sta $06cd			sta 	gYCentre
.823e	0a		asl a				asl 	a 							; R x 2
.823f	85 36		sta $36				sta 	gxzTemp0
.8241	38		sec				sec
.8242	a9 03		lda #$03			lda 	#3
.8244	e5 36		sbc $36				sbc 	gxzTemp0
.8246	85 38		sta $38				sta 	gxzTemp1
.8248	a9 00		lda #$00			lda 	#0
.824a	e9 00		sbc #$00			sbc 	#0
.824c	85 39		sta $39				sta 	gxzTemp1+1
.824e	60		rts				rts
.824f					_GXCalculateCentre:
.824f	38		sec				sec
.8250	bd 36 06	lda $0636,x			lda 	gxX1,x
.8253	7d 32 06	adc $0632,x			adc 	gXX0,x
.8256	9d 36 06	sta $0636,x			sta 	gXX1,x
.8259	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825c	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825f	4a		lsr a				lsr 	a
.8260	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8263	7e 36 06	ror $0636,x			ror 	gXX1,x
.8266	60		rts				rts
.06cb					gxRadius:
>06cb							.fill 	1
.06cc					gXCentre:
>06cc							.fill 	1
.06cd					gYCentre:
>06cd							.fill 	1
.06ce					gxIsFillMode:
>06ce							.fill 	1
.06cf					gxYChanged:
>06cf							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8267					GXClearBitmap:
.8267	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826a	f0 24		beq $8290			beq 	_GXCBFail
.826c	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start access
.826f	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8271	ad 3e 06	lda $063e			lda 	gxHeight
.8274	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8276	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8278					_GXCalcLastPage:
.8278	98		tya				tya 								; add to base page
.8279	18		clc				clc
.827a	6d 3c 06	adc $063c			adc 	gxBasePage
.827d	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827f					_GXClearAll:
.827f	20 92 82	jsr $8292			jsr 	_GXClearBlock 				; clear 8k block
.8282	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8284	a5 0b		lda $0b				lda 	GXEditSlot
.8286	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8289	b0 f4		bcs $827f			bcs 	_GXClearAll
.828b	20 56 88	jsr $8856			jsr 	GXCloseBitmap	 			; stop access
.828e	18		clc				clc
.828f	60		rts				rts
.8290					_GXCBFail:
.8290	38		sec				sec
.8291	60		rts				rts
.8292					_GXClearBlock:
.8292	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8294	85 38		sta $38				sta 	0+gxzTemp1
.8296	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8298	85 39		sta $39				sta 	1+gxzTemp1
.829a					_GXCB0:
.829a	a5 36		lda $36				lda 	gxzTemp0
.829c	a0 00		ldy #$00			ldy 	#0
.829e					_GXCB1:
.829e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a0	c8		iny				iny
.82a1	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a3	c8		iny				iny
.82a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a6	c8		iny				iny
.82a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a9	c8		iny				iny
.82aa	d0 f2		bne $829e			bne 	_GXCB1
.82ac	e6 39		inc $39				inc 	gxzTemp1+1
.82ae	a5 39		lda $39				lda 	gxzTemp1+1
.82b0	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b2	d0 e6		bne $829a			bne 	_GXCB0
.82b4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b5					GXInitialise:
.82b5	64 01		stz $01				stz 	1
.82b7	a9 01		lda #$01			lda 	#1
.82b9	8d 00 d0	sta $d000			sta 	$D000
.82bc	18		clc				clc
.82bd	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c0	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c3	a2 0f		ldx #$0f			ldx 	#15
.82c5					_GXIClear:
.82c5	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c8	ca		dex				dex
.82c9	10 fa		bpl $82c5			bpl 	_GXIClear
.82cb	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.82ce	60		rts				rts
.82cf					GXControlBitmap:
.82cf	64 01		stz $01				stz 	1
.82d1	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d3	29 01		and #$01			and 	#1 							; set bitmap flag
.82d5	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d8	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d9	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82dc	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82de	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82e0	90 02		bcc $82e4			bcc 	_CBNotOn
.82e2	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e4					_CBNotOn:
.82e4	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e7	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e9	29 07		and #$07			and 	#7
.82eb	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ee	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f0	d0 02		bne $82f4			bne 	_CBNotDefault
.82f2	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f4					_CBNotDefault:
.82f4	8d 3c 06	sta $063c			sta 	gxBasePage
.82f7	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fa	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fc	8d 03 d1	sta $d103			sta 	$D103
.82ff	a5 36		lda $36				lda 	gxzTemp0
.8301	8d 02 d1	sta $d102			sta 	$D102
.8304	9c 01 d1	stz $d101			stz 	$D101
.8307	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8309	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830c	29 01		and #$01			and 	#1
.830e	f0 02		beq $8312			beq 	_CBHaveHeight
.8310	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8312					_CBHaveHeight
.8312	8e 3e 06	stx $063e			stx 	gxHeight
.8315	18		clc				clc
.8316	60		rts				rts
.8317					GXControlSprite:
.8317	64 01		stz $01				stz 	1
.8319	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831b	29 01		and #$01			and 	#1 							; set sprites flag
.831d	8d 3a 06	sta $063a			sta 	gxSpritesOn
.8320	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8321	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8324	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8326	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8328	90 02		bcc $832c			bcc 	_CSNotOn
.832a	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832c					_CSNotOn:
.832c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8331	d0 02		bne $8335			bne 	_CSNotDefault
.8333	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8335					_CSNotDefault:
.8335	8d 3d 06	sta $063d			sta 	gxSpritePage
.8338	20 58 83	jsr $8358			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833b	a5 36		lda $36				lda 	zTemp0
.833d	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase
.8340	a5 37		lda $37				lda 	zTemp0+1
.8342	8d 4a 06	sta $064a			sta 	GXSpriteOffsetBase+1
.8345	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8347					_CSClear:
.8347	9e 00 d9	stz $d900,x			stz 	$D900,x
.834a	9e 00 da	stz $da00,x			stz 	$DA00,x
.834d	ca		dex				dex
.834e	d0 f7		bne $8347			bne 	_CSClear
.8350	9c 48 06	stz $0648			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8353	20 66 83	jsr $8366			jsr 	GXClearSpriteStore
.8356	18		clc				clc
.8357	60		rts				rts
.8358					GXCalculateBaseAddress:
.8358	85 36		sta $36				sta 	gxzTemp0
.835a	64 37		stz $37				stz 	gxzTemp0+1
.835c	a9 05		lda #$05			lda 	#5
.835e					_GXShift:
.835e	06 36		asl $36				asl 	gxzTemp0
.8360	26 37		rol $37				rol 	gxzTemp0+1
.8362	3a		dec a				dec		a
.8363	d0 f9		bne $835e			bne 	_GXShift
.8365	60		rts				rts
.8366					GXClearSpriteStore:
.8366	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8368					_GXCSSLoop:
.8368	9e 8b 06	stz $068b,x			stz 	GXSpriteHigh,x
.836b	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836d	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.8370	ca		dex				dex
.8371	10 f5		bpl $8368			bpl 	_GXCSSLoop
.8373	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8374					GXLine:
.8374	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8377	f0 28		beq $83a1			beq 	_GXLFail
.8379	20 45 88	jsr $8845			jsr 	GXOpenBitmap
.837c	20 99 89	jsr $8999			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.837f	20 47 84	jsr $8447			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8382	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; calculate position/offset.
.8385					_GXDrawLoop:
.8385	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8388	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.838a	2d 42 06	and $0642			and 	gxANDValue
.838d	4d 41 06	eor $0641			eor 	gxEORValue
.8390	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8392	20 a3 83	jsr $83a3			jsr 	GXLineIsComplete 			; is the line complete ?
.8395	f0 05		beq $839c			beq 	_GXLExit
.8397	20 be 83	jsr $83be			jsr 	GXLineAdvance 				; code as per advance method
.839a	80 e9		bra $8385			bra 	_GXDrawLoop
.839c					_GXLExit:
.839c	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.839f	18		clc				clc
.83a0	60		rts				rts
.83a1					_GXLFail:
.83a1	38		sec				sec
.83a2	60		rts				rts
.83a3					GXLineIsComplete:
.83a3	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger 			; is dy larger
.83a6	d0 0f		bne $83b7			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a8	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83ab	4d 36 06	eor $0636			eor 	GXX1
.83ae	d0 06		bne $83b6			bne 	_GXLICExit
.83b0	ad 33 06	lda $0633			lda 	GXX0+1
.83b3	4d 37 06	eor $0637			eor 	GXX1+1
.83b6					_GXLICExit:
.83b6	60		rts				rts
.83b7					_GXLICCompareY:
.83b7	ad 38 06	lda $0638			lda 	GXY1
.83ba	4d 34 06	eor $0634			eor 	GXY0
.83bd	60		rts				rts
.83be					GXLineAdvance:
.83be	18		clc				clc 								; add adjust to position
.83bf	ad d4 06	lda $06d4			lda 	GXPosition
.83c2	6d d5 06	adc $06d5			adc 	GXAdjust
.83c5	8d d4 06	sta $06d4			sta 	GXPosition
.83c8	9c d7 06	stz $06d7			stz 	GXAddSelect 				; clear add select flag
.83cb	b0 05		bcs $83d2			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83cd	cd d6 06	cmp $06d6			cmp 	GXTotal 					; if exceeded total
.83d0	90 0a		bcc $83dc			bcc 	_GXLANoExtra
.83d2					_GXLAOverflow:
.83d2	ce d7 06	dec $06d7			dec 	GXAddSelect 				; set addselect to $FF
.83d5	38		sec				sec 								; subtract total and write back
.83d6	ed d6 06	sbc $06d6			sbc 	GXTotal
.83d9	8d d4 06	sta $06d4			sta 	GXPosition
.83dc					_GXLANoExtra:
.83dc	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger
.83df	f0 0d		beq $83ee			beq 	_GXDXLarger
.83e1	20 40 84	jsr $8440			jsr 	GXIncrementY
.83e4	ad d7 06	lda $06d7			lda 	GXAddSelect
.83e7	f0 10		beq $83f9			beq 	_GXLAExit
.83e9	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83ec	80 0b		bra $83f9			bra 	_GXLAExit
.83ee					_GXDXLarger:
.83ee	20 fa 83	jsr $83fa			jsr 	GXAdjustX
.83f1	ad d7 06	lda $06d7			lda 	GXAddSelect
.83f4	f0 03		beq $83f9			beq 	_GXLAExit
.83f6	20 40 84	jsr $8440			jsr 	GXIncrementY
.83f9					_GXLAExit:
.83f9	60		rts				rts
.83fa					GXAdjustX:
.83fa	ad d3 06	lda $06d3			lda 	GXDXNegative
.83fd	10 25		bpl $8424			bpl 	_GXAXRight
.83ff	ad 32 06	lda $0632			lda 	GXX0
.8402	d0 03		bne $8407			bne 	_GXAXNoBorrow
.8404	ce 33 06	dec $0633			dec 	GXX0+1
.8407					_GXAXNoBorrow:
.8407	ce 32 06	dec $0632			dec 	GXX0
.840a	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.840d	ad 45 06	lda $0645			lda 	gsOffset
.8410	c9 ff		cmp #$ff			cmp 	#$FF
.8412	d0 0f		bne $8423			bne 	_GXAYExit 					; underflow
.8414	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8416	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8418	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.841a	b0 07		bcs $8423			bcs 	_GXAYExit
.841c	18		clc				clc
.841d	69 20		adc #$20			adc 	#$20 						; fix up
.841f	85 3d		sta $3d				sta 	gxzScreen+1
.8421	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8423					_GXAYExit:
.8423	60		rts				rts
.8424					_GXAXRight:
.8424	ee 32 06	inc $0632			inc 	GXX0
.8427	d0 03		bne $842c			bne 	_GXAXNoCarry
.8429	ee 33 06	inc $0633			inc 	GXX0+1
.842c					_GXAXNoCarry:
.842c	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.842f	d0 0e		bne $843f			bne 	_GXAXExit 					; if not overflowed, exit.
.8431	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8433	a5 3d		lda $3d				lda 	gxzScreen+1
.8435	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8437	90 06		bcc $843f			bcc 	_GXAXExit
.8439	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843b	85 3d		sta $3d				sta 	gxzScreen+1
.843d	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.843f					_GXAXExit:
.843f	60		rts				rts
.8440					GXIncrementY:
.8440	ee 34 06	inc $0634			inc 	GXY0
.8443	20 b9 88	jsr $88b9			jsr 	GXMovePositionDown
.8446	60		rts				rts
.8447					GXLineSetup:
.8447	ad 38 06	lda $0638			lda 	GXY1
.844a	38		sec				sec
.844b	ed 34 06	sbc $0634			sbc 	GXY0
.844e	4a		lsr a				lsr 	a
.844f	8d d1 06	sta $06d1			sta 	GXDiffY
.8452	9c d3 06	stz $06d3			stz 	GXDXNegative 				; clear -ve flag
.8455	38		sec				sec
.8456	ad 36 06	lda $0636			lda 	GXX1
.8459	ed 32 06	sbc $0632			sbc 	GXX0
.845c	8d d0 06	sta $06d0			sta 	GXDiffX
.845f	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8462	ed 33 06	sbc $0633			sbc 	GXX0+1
.8465	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8466	6e d0 06	ror $06d0			ror 	GXDiffX
.8469	0a		asl a				asl 	a
.846a	10 0c		bpl $8478			bpl 	_GDXNotNegative
.846c	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846e	38		sec				sec
.846f	ed d0 06	sbc $06d0			sbc 	GXDiffX
.8472	8d d0 06	sta $06d0			sta 	GXDiffX
.8475	ce d3 06	dec $06d3			dec 	GXDXNegative 				; -ve flag = $FF.
.8478					_GDXNotNegative:
.8478	9c d2 06	stz $06d2			stz 	GXIsDiffYLarger 			; clear larger flag
.847b	ad d1 06	lda $06d1			lda 	GXDiffY 					; set adjust and total.
.847e	8d d5 06	sta $06d5			sta 	GXAdjust
.8481	ad d0 06	lda $06d0			lda 	GXDiffX
.8484	8d d6 06	sta $06d6			sta 	GXTotal
.8487	ad d1 06	lda $06d1			lda 	GXDiffY 					; if dy > dx
.848a	cd d0 06	cmp $06d0			cmp 	GXDiffX
.848d	90 0f		bcc $849e			bcc 	_GDXNotLarger
.848f	ce d2 06	dec $06d2			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8492	ad d0 06	lda $06d0			lda 	GXDiffX 					; set adjust and total other way round
.8495	8d d5 06	sta $06d5			sta 	GXAdjust
.8498	ad d1 06	lda $06d1			lda 	GXDiffY
.849b	8d d6 06	sta $06d6			sta 	GXTotal
.849e					_GDXNotLarger:
.849e	ad d6 06	lda $06d6			lda 	GXTotal
.84a1	4a		lsr a				lsr 	a
.84a2	8d d4 06	sta $06d4			sta 	GXPosition
.84a5	60		rts				rts
.06d0					GXDiffX:
>06d0							.fill 	1
.06d1					GXDiffY:
>06d1							.fill 	1
.06d2					GXIsDiffYLarger:
>06d2							.fill 	1
.06d3					GXDXNegative:
>06d3							.fill 	1
.06d4					GXPosition:
>06d4							.fill 	1
.06d5					GXAdjust:
>06d5							.fill 	1
.06d6					GXTotal:
>06d6							.fill 	1
.06d7					GXAddSelect:
>06d7							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.84a6					GXSetColourMode:
.84a6	a6 36		ldx $36				ldx 	gxzTemp0
.84a8	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84ab	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ad	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84b0	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b2	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b5	ae 40 06	ldx $0640			ldx 	gxColour
.84b8	8e 41 06	stx $0641			stx 	gxEORValue
.84bb	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84bd	90 03		bcc $84c2			bcc 	_GXSDCNotAndColour
.84bf	8e 42 06	stx $0642			stx 	gxANDValue
.84c2					_GXSDCNotAndColour:
.84c2	d0 03		bne $84c7			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c4	9c 41 06	stz $0641			stz 	gxEORValue
.84c7					_GXSDCNotAnd:
.84c7	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c8	90 08		bcc $84d2			bcc 	_GXSDCNoFlip
.84ca	ad 42 06	lda $0642			lda	 	gxANDValue
.84cd	49 ff		eor #$ff			eor 	#$FF
.84cf	8d 42 06	sta $0642			sta 	gxANDValue
.84d2					_GXSDCNoFlip:
.84d2	18		clc				clc
.84d3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84d4					GXPlotPoint:
.84d4	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.84d7	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84da	ac 45 06	ldy $0645			ldy 	gsOffset
.84dd	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84df	2d 42 06	and $0642			and 	gxANDValue
.84e2	4d 41 06	eor $0641			eor 	gxEORValue
.84e5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e7	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ea	18		clc				clc
.84eb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84ec					GXFillRectangle:
.84ec	38		sec				sec
.84ed	80 01		bra $84f0			bra 	GXRectangle
.84ef					GXFrameRectangle:
.84ef	18		clc				clc
.84f0					GXRectangle:
.84f0	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f3	f0 35		beq $852a			beq 	_GXRFail
.84f5	08		php				php 								; save Fill flag (CS)
.84f6	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; start drawing
.84f9	20 7b 89	jsr $897b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fc	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ff	38		sec				sec 								; sec = Draw line
.8500	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8503	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8506	cd 38 06	cmp $0638			cmp 	gxY1
.8509	f0 19		beq $8524			beq 	_GXRectangleExit
.850b					_GXRectLoop:
.850b	20 b9 88	jsr $88b9			jsr 	GXMovePositionDown 			; down one.
.850e	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8511	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8514	cd 38 06	cmp $0638			cmp 	gXY1
.8517	f0 07		beq $8520			beq 	_GXLastLine
.8519	28		plp				plp 								; get flag back
.851a	08		php				php
.851b	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851e	80 eb		bra $850b			bra 	_GXRectLoop
.8520					_GXLastLine:
.8520	38		sec				sec
.8521	20 2c 85	jsr $852c			jsr 	GXDrawLineX1X0
.8524					_GXRectangleExit:
.8524	68		pla				pla 								; throw fill flag.
.8525	20 56 88	jsr $8856			jsr 	GXCloseBitmap 				; stop drawing and exit
.8528	18		clc				clc
.8529	60		rts				rts
.852a					_GXRFail:
.852a	38		sec				sec
.852b	60		rts				rts
.852c					GXDrawLineX1X0:
.852c	08		php				php 								; save solid/either-end
.852d	38		sec				sec
.852e	ad 36 06	lda $0636			lda		gXX1
.8531	ed 32 06	sbc $0632			sbc 	gXX0
.8534	85 36		sta $36				sta 	gxzTemp0
.8536	ad 37 06	lda $0637			lda 	gXX1+1
.8539	ed 33 06	sbc $0633			sbc 	gXX0+1
.853c	85 37		sta $37				sta 	gxzTemp0+1
.853e	28		plp				plp
.853f					GXDrawLineTemp0:
.853f	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8541	48		pha				pha
.8542	a5 3d		lda $3d				lda 	gxzScreen+1
.8544	48		pha				pha
.8545	ad 45 06	lda $0645			lda 	gsOffset
.8548	48		pha				pha
.8549	a5 0b		lda $0b				lda 	GXEditSlot
.854b	48		pha				pha
.854c	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.854f	90 1e		bcc $856f			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8551					_GXDLTLine:
.8551	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8553	2d 42 06	and $0642			and 	gxANDValue
.8556	4d 41 06	eor $0641			eor 	gxEORValue
.8559	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855b	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855d	d0 04		bne $8563			bne 	_GXDLTNoBorrow
.855f	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8561	30 2e		bmi $8591			bmi 	_GXDLTExit
.8563					_GXDLTNoBorrow:
.8563	c6 36		dec $36				dec 	gxzTemp0
.8565	c8		iny				iny 								; next slot.
.8566	d0 e9		bne $8551			bne 	_GXDLTLine
.8568	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.856a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.856d	80 e2		bra $8551			bra 	_GXDLTLine
.856f					_GXDLTEndPoints:
.856f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8571	2d 42 06	and $0642			and 	gxANDValue
.8574	4d 41 06	eor $0641			eor 	gxEORValue
.8577	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8579	98		tya				tya 								; advance to right side
.857a	18		clc				clc
.857b	65 36		adc $36				adc 	gxzTemp0
.857d	a8		tay				tay
.857e	a5 3d		lda $3d				lda 	gxzScreen+1
.8580	65 37		adc $37				adc 	gxzTemp0+1
.8582	85 3d		sta $3d				sta 	gxzScreen+1
.8584	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap 			; fix up.
.8587	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8589	2d 42 06	and $0642			and 	gxANDValue
.858c	4d 41 06	eor $0641			eor 	gxEORValue
.858f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8591					_GXDLTExit:
.8591	68		pla				pla
.8592	85 0b		sta $0b				sta 	GXEditSlot
.8594	68		pla				pla
.8595	8d 45 06	sta $0645			sta 	gsOffset
.8598	68		pla				pla
.8599	85 3d		sta $3d				sta 	gxzScreen+1
.859b	68		pla				pla
.859c	85 3c		sta $3c				sta 	gxzScreen
.859e	60		rts				rts
.859f					GXDLTCheckWrap:
.859f	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a3	90 06		bcc $85ab			bcc 	_GXDLTCWExit
.85a5	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a7	85 3d		sta $3d				sta 	gxzScreen+1
.85a9	e6 0b		inc $0b				inc 	GXEditSlot
.85ab					_GXDLTCWExit:
.85ab	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.85ac					GXDrawGraphicElement:
.85ac	8d d8 06	sta $06d8			sta 	gxSize 						; save size
.85af	3a		dec a				dec 	a
.85b0	8d d9 06	sta $06d9			sta 	gxMask 						; and mask
.85b3	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b6	f0 67		beq $861f			beq 	_GXSLFail
.85b8	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85bb	48		pha				pha
.85bc	8c db 06	sty $06db			sty 	gxAcquireVector+1 			; and acquisition vector
.85bf	8e da 06	stx $06da			stx 	gxAcquireVector
.85c2	20 45 88	jsr $8845			jsr 	gxOpenBitmap 				; open the bitmap.
.85c5	ad dd 06	lda $06dd			lda 	gxUseMode 					; scale bits
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	29 07		and #$07			and		#7
.85cd	1a		inc a				inc 	a
.85ce	8d dc 06	sta $06dc			sta 	gxScale
.85d1	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d3					_GXGELoop:
.85d3	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d5	2c dd 06	bit $06dd			bit 	gxUseMode 					; check for flip.
.85d8	10 06		bpl $85e0			bpl		_GXNoVFlip
.85da	ad d9 06	lda $06d9			lda 	gxMask
.85dd	38		sec				sec
.85de	e5 38		sbc $38				sbc 	gxzTemp1
.85e0					_GXNoVFlip:
.85e0	aa		tax				tax 								; get the Xth line.
.85e1	20 21 86	jsr $8621			jsr 	_GXCallAcquire 				; get that data.
.85e4	ad dc 06	lda $06dc			lda 	gxScale 					; do scale identical copies of that line.
.85e7	85 39		sta $39				sta 	gxzTemp1+1
.85e9					_GXGELoop2:
.85e9	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85ec	cd 3e 06	cmp $063e			cmp 	gxHeight
.85ef	b0 10		bcs $8601			bcs 	_GXDGEExit
.85f1	20 24 86	jsr $8624			jsr 	GXRenderOneLine 			; render line
.85f4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f6	d0 f1		bne $85e9			bne 	_GXGELoop2
.85f8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85fa	a5 38		lda $38				lda 	gxzTemp1
.85fc	cd d8 06	cmp $06d8			cmp 	gxSize
.85ff	d0 d2		bne $85d3			bne 	_GXGELoop
.8601					_GXDGEExit:
.8601	68		pla				pla 								; restore Y for next time
.8602	8d 34 06	sta $0634			sta 	gxY0
.8605	ae dc 06	ldx $06dc			ldx 	gxScale 					; get scale (1-8)
.8608					_GXShiftLeft:
.8608	18		clc				clc
.8609	ad d8 06	lda $06d8			lda 	gxSize
.860c	6d 32 06	adc $0632			adc 	gxX0
.860f	8d 32 06	sta $0632			sta 	gxX0
.8612	90 03		bcc $8617			bcc 	_GXSLNoCarry
.8614	ee 33 06	inc $0633			inc 	gxX0+1
.8617					_GXSLNoCarry:
.8617	ca		dex				dex
.8618	d0 ee		bne $8608			bne 	_GXShiftLeft
.861a	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.861d	18		clc				clc
.861e	60		rts				rts
.861f					_GXSLFail:
.861f	38		sec				sec
.8620	60		rts				rts
.8621					_GXCallAcquire:
.8621	6c da 06	jmp ($06da)			jmp 	(gxAcquireVector)
.8624					GXRenderOneLine:
.8624	20 63 88	jsr $8863			jsr 	GXPositionCalc 				; calculate position/offset.
.8627	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.862a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862c					_GXROLLoop1:
.862c	ad dc 06	lda $06dc			lda 	gxScale 					; set to do 'scale' times
.862f	85 3b		sta $3b				sta 	gxzTemp2+1
.8631					_GXROLLoop2:
.8631	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8633	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8636	50 06		bvc $863e			bvc 	_GXNoHFlip
.8638	ad d9 06	lda $06d9			lda 	gxMask
.863b	38		sec				sec
.863c	e5 3a		sbc $3a				sbc 	gxzTemp2
.863e					_GXNoHFlip:
.863e	aa		tax				tax 								; read from the pixel buffer
.863f	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8642	d0 07		bne $864b			bne 	_GXDraw 					; draw if non zero
.8644	ad dd 06	lda $06dd			lda 	gxUseMode 					; check to see if solid background
.8647	29 04		and #$04			and 	#4
.8649	f0 0a		beq $8655			beq 	_GXZeroPixel
.864b					_GXDraw:
.864b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864d	2d 42 06	and $0642			and 	gxANDValue
.8650	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8653	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8655					_GXZeroPixel:
.8655	c8		iny				iny 								; advance pointer
.8656	d0 05		bne $865d			bne 	_GXNoShift
.8658	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.865a	20 9f 85	jsr $859f			jsr 	GXDLTCheckWrap				; check for new page.
.865d					_GXNoShift:
.865d	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.865f	d0 d0		bne $8631			bne 	_GXROLLoop2
.8661	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8663	a5 3a		lda $3a				lda 	gxzTemp2
.8665	cd d8 06	cmp $06d8			cmp 	gxSize
.8668	d0 c2		bne $862c			bne 	_GXROLLoop1
.866a	ee 34 06	inc $0634			inc 	gxY0
.866d	60		rts				rts
.06d8					gxSize:
>06d8							.fill 	1
.06d9					gxMask:
>06d9							.fill 	1
.06da					gxAcquireVector:
>06da							.fill 	2
.06dc					gxScale:
>06dc							.fill 	1
.06dd					gxUseMode:
>06dd							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.866e					GXFontHandler:
.866e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8670	4d 3f 06	eor $063f			eor 	gxMode
.8673	8d dd 06	sta $06dd			sta 	gxUseMode
.8676	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8678	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.867a	26 37		rol $37				rol	 	gxzTemp0+1
.867c	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867e	26 37		rol $37				rol	 	gxzTemp0+1
.8680	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8682	26 37		rol $37				rol	 	gxzTemp0+1
.8684	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8686	09 c0		ora #$c0			ora 	#$C0
.8688	85 37		sta $37				sta 	gxzTemp0+1
.868a	a9 08		lda #$08			lda 	#8 							; size 8x8
.868c	a2 94		ldx #$94			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868e	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8690	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.8693	60		rts				rts
.8694					GXGetGraphicDataFont:
.8694	8a		txa				txa 								; X->Y
.8695	a8		tay				tay
.8696	a6 01		ldx $01				ldx 	1 							; preserve old value
.8698	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.869a	85 01		sta $01				sta 	1
.869c	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869e	86 01		stx $01				stx 	1 							; put old value back.
.86a0	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a2					_GXExpand:
.86a2	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a5	0a		asl a				asl 	a 							; shift bit 7 into C
.86a6	90 08		bcc $86b0			bcc 	_GXNoPixel
.86a8	48		pha				pha 								; if set, set pixel buffer to current colour.
.86a9	ad 40 06	lda $0640			lda 	gxColour
.86ac	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86af	68		pla				pla
.86b0					_GXNoPixel:
.86b0	e8		inx				inx 								; do the whole byte.
.86b1	e0 08		cpx #$08			cpx 	#8
.86b3	d0 ed		bne $86a2			bne 	_GXExpand
.86b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86b6					GXSpriteHandler:
.86b6	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b8	4d 3f 06	eor $063f			eor 	gxMode
.86bb	8d dd 06	sta $06dd			sta 	gxUseMode
.86be	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86c0	da		phx				phx
.86c1	20 45 88	jsr $8845			jsr 	GXOpenBitmap 				; can access sprite information
.86c4	68		pla				pla
.86c5	20 34 89	jsr $8934			jsr 	GXFindSprite 				; get the sprite address
.86c8	08		php				php
.86c9	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.86cc	28		plp				plp
.86cd	b0 0a		bcs $86d9			bcs		_GXSHExit 					; exit if find failed.
.86cf	ad de 06	lda $06de			lda 	GXSizePixels 				; return size
.86d2	a2 da		ldx #$da			ldx 	#GXSpriteAcquire & $FF
.86d4	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d6	20 ac 85	jsr $85ac			jsr 	GXDrawGraphicElement
.86d9					_GXSHExit:
.86d9	60		rts				rts
.86da					GXSpriteAcquire:
.86da	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86dd	85 0b		sta $0b				sta 	GXEditSlot
.86df	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e1	a9 00		lda #$00			lda 	#0
.86e3	ae df 06	ldx $06df			ldx 	GXSizeBits
.86e6					_GXTimesRowNumber:
.86e6	18		clc				clc
.86e7	65 36		adc $36				adc 	zTemp0
.86e9	ca		dex				dex
.86ea	10 fa		bpl $86e6			bpl 	_GXTimesRowNumber
.86ec	64 37		stz $37				stz 	gxzTemp0+1
.86ee	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ef	26 37		rol $37				rol 	gxzTemp0+1
.86f1	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f2	26 37		rol $37				rol 	gxzTemp0+1
.86f4	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f5	26 37		rol $37				rol 	gxzTemp0+1
.86f7	85 36		sta $36				sta 	gxzTemp0
.86f9	18		clc				clc 								; add base address.
.86fa	a5 36		lda $36				lda 	gxzTemp0
.86fc	6d e1 06	adc $06e1			adc 	GXSpriteOffset
.86ff	85 36		sta $36				sta 	gxzTemp0
.8701	a5 37		lda $37				lda 	gxzTemp0+1
.8703	6d e2 06	adc $06e2			adc 	GXSpriteOffset+1
.8706					_GXSAFindPage:
.8706	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8708	90 06		bcc $8710			bcc 	_GXSAFoundPage
.870a	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870c	e6 0b		inc $0b				inc 	GXEditSlot
.870e	80 f6		bra $8706			bra 	_GXSAFindPage
.8710					_GXSAFoundPage:
.8710	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8712	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8714	a0 00		ldy #$00			ldy 	#0
.8716					_GXSACopyLoop:
.8716	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8718	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871b	c8		iny				iny
.871c	cc de 06	cpy $06de			cpy 	GXSizePixels
.871f	d0 f5		bne $8716			bne 	_GXSACopyLoop
.8721	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8722					GXSelect:
.8722	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8725	f0 22		beq $8749			beq 	_GXSFail
.8727	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8729	c9 40		cmp #$40			cmp 	#64
.872b	b0 1c		bcs $8749			bcs 	_GXSFail
.872d	8d 46 06	sta $0646			sta 	GSCurrentSpriteID
.8730	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8732	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8734	06 36		asl $36				asl 	gxzTemp0
.8736	06 36		asl $36				asl 	gxzTemp0
.8738	06 36		asl $36				asl 	gxzTemp0
.873a	2a		rol a				rol 	a
.873b	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873d	8d 48 06	sta $0648			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.8740	85 37		sta $37				sta 	gxzTemp0+1
.8742	a5 36		lda $36				lda 	gxzTemp0
.8744	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr
.8747	18		clc				clc
.8748	60		rts				rts
.8749					_GXSFail:
.8749	38		sec				sec
.874a	60		rts				rts
.874b					GXSelectImage:
.874b	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874e	f0 74		beq $87c4			beq 	_GXSIFail
.8750	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8753	f0 6f		beq $87c4			beq 	_GXSIFail 					; (checking the MSB)
.8755	64 01		stz $01				stz 	1
.8757	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8759	d0 6b		bne $87c6			bne 	_GXSIHide
.875b	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875d	48		pha				pha
.875e	20 45 88	jsr $8845			jsr 	GXOpenBitmap
.8761	68		pla				pla
.8762	20 34 89	jsr $8934			jsr 	GXFindSprite
.8765	b0 5a		bcs $87c1			bcs 	_GXSICloseFail 				; no image
.8767	a0 01		ldy #$01			ldy 	#1
.8769	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.876c	85 36		sta $36				sta 	gxzTemp0
.876e	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.8771	85 37		sta $37				sta 	gxzTemp0+1
.8773	ad e1 06	lda $06e1			lda 	GXSpriteOffset
.8776	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8778	18		clc				clc
.8779	ad e2 06	lda $06e2			lda 	GXSpriteOffset+1
.877c	6d 49 06	adc $0649			adc 	GXSpriteOffsetBase
.877f	c8		iny				iny
.8780	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8782	ad 4a 06	lda $064a			lda 	GXSpriteOffsetBase+1
.8785	69 00		adc #$00			adc 	#0
.8787	c8		iny				iny
.8788	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.878a	ad df 06	lda $06df			lda 	GXSizeBits 					; get raw size
.878d	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.878f	2a		rol a				rol 	a 							; x 2
.8790	0a		asl a				asl 	a 							; x 4
.8791	0a		asl a				asl 	a 							; x 8
.8792	0a		asl a				asl 	a 							; x 16
.8793	0d e0 06	ora $06e0			ora 	GXSpriteLUT 				; Or with LUT
.8796	0a		asl a				asl 	a 							; 1 shift
.8797	09 01		ora #$01			ora 	#1 							; enable sprite.
.8799	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.879b	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.879e	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87a1	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87a4	29 3f		and #$3f			and 	#$3F
.87a6	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87a9	ad df 06	lda $06df			lda 	GXSizeBits 					; get bit size
.87ac	6a		ror a				ror 	a 							; shift into bits 6/7
.87ad	6a		ror a				ror 	a
.87ae	6a		ror a				ror 	a
.87af	29 c0		and #$c0			and 	#$C0
.87b1	1d 8b 06	ora $068b,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87b4	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87b7	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87ba	29 7f		and #$7f			and 	#$7F
.87bc	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87bf	18		clc				clc
.87c0	60		rts				rts
.87c1					_GXSICloseFail:
.87c1	20 56 88	jsr $8856			jsr 	GXCloseBitmap
.87c4					_GXSIFail:
.87c4	38		sec				sec
.87c5	60		rts				rts
.87c6					_GXSIHide:
.87c6	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87c9	85 36		sta $36				sta 	gxzTemp0
.87cb	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.87ce	85 37		sta $37				sta 	gxzTemp0+1
.87d0	a9 00		lda #$00			lda 	#0
.87d2	92 36		sta ($36)			sta 	(gxzTemp0)
.87d4	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; get sprite ID
.87d7	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87da	09 80		ora #$80			ora 	#$80
.87dc	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87df	18		clc				clc
.87e0	60		rts				rts
.87e1					GXMoveSprite:
.87e1	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87e4	f0 5d		beq $8843			beq 	_GXSIFail
.87e6	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.87e9	f0 58		beq $8843			beq 	_GXSIFail
.87eb	85 37		sta $37				sta 	gxzTemp0+1
.87ed	a0 04		ldy #$04			ldy 	#4
.87ef	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.87f2	85 36		sta $36				sta 	gxzTemp0
.87f4	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87f6	38		sec				sec
.87f7	ed de 06	sbc $06de			sbc 	GXSizePixels
.87fa	4a		lsr a				lsr 	a
.87fb	48		pha				pha
.87fc	18		clc				clc
.87fd	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8800	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8802	c8		iny				iny
.8803	ad 33 06	lda $0633			lda 	gxX0+1
.8806	69 00		adc #$00			adc 	#0
.8808	91 36		sta ($36),y			sta 	(gxzTemp0),y
.880a	c8		iny				iny
.880b	68		pla				pla
.880c	18		clc				clc
.880d	6d 34 06	adc $0634			adc 	gxY0
.8810	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8812	a9 00		lda #$00			lda 	#0
.8814	69 00		adc #$00			adc 	#0
.8816	c8		iny				iny
.8817	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8819	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.881c	6e 32 06	ror $0632			ror 	gxX0
.881f	4e 32 06	lsr $0632			lsr 	gxX0
.8822	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.8825	4e 34 06	lsr $0634			lsr 	gxY0
.8828	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.882b	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x
.882e	29 80		and #$80			and 	#$80
.8830	0d 32 06	ora $0632			ora 	gxX0
.8833	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.8836	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8839	29 c0		and #$c0			and 	#$C0
.883b	0d 34 06	ora $0634			ora 	gxY0
.883e	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.8841	18		clc				clc
.8842	60		rts				rts
.8843					_GXSIFail:
.8843	38		sec				sec
.8844	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8845					GXOpenBitmap:
.8845	78		sei				sei 								; no interrupts here
.8846	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8848	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.884b	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.884d	85 00		sta $00				sta 	0
.884f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.8851	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.8854	58		cli				cli
.8855	60		rts				rts
.8856					GXCloseBitmap:
.8856	78		sei				sei
.8857	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.885a	85 0b		sta $0b				sta 	GXEditSlot
.885c	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.885f	85 00		sta $00				sta 	0
.8861	58		cli				cli
.8862	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8863					GXPositionCalc:
.8863	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8865	48		pha				pha
.8866	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8869	85 3c		sta $3c				sta 	gxzScreen
.886b	64 3d		stz $3d				stz 	gxzScreen+1
.886d	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.886f	26 3d		rol $3d				rol 	gxzScreen+1
.8871	06 3c		asl $3c				asl 	gxzScreen
.8873	26 3d		rol $3d				rol 	gxzScreen+1
.8875	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8876	65 3c		adc $3c				adc 	gxzScreen
.8878	85 3c		sta $3c				sta 	gxzScreen
.887a	90 02		bcc $887e			bcc 	_GXPCNoCarry
.887c	e6 3d		inc $3d				inc 	gxzScreen+1
.887e					_GXPCNoCarry:
.887e	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8880	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8882	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8884	85 36		sta $36				sta 	gxzTemp0
.8886	64 3d		stz $3d				stz 	gxzScreen+1
.8888	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.888a					_GXPCMultiply32:
.888a	06 3c		asl $3c				asl 	gxzScreen
.888c	26 3d		rol $3d				rol 	gxzScreen+1
.888e	3a		dec a				dec 	a
.888f	d0 f9		bne $888a			bne 	_GXPCMultiply32
.8891	18		clc				clc
.8892	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8895	65 3c		adc $3c				adc 	gxzScreen
.8897	8d 45 06	sta $0645			sta 	gsOffset
.889a	ad 33 06	lda $0633			lda 	GXX0+1
.889d	65 3d		adc $3d				adc 	gxzScreen+1
.889f	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.88a1	90 04		bcc $88a7			bcc 	_GXPCNoOverflow
.88a3	29 1f		and #$1f			and 	#$1F 						; fix it up
.88a5	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88a7					_GXPCNoOverflow:
.88a7	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88a9	85 3d		sta $3d				sta 	gxzScreen+1
.88ab	64 3c		stz $3c				stz 	gxzScreen
.88ad	18		clc				clc
.88ae	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88b0	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88b3	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88b5	68		pla				pla
.88b6	85 36		sta $36				sta 	gxzTemp0
.88b8	60		rts				rts
.88b9					GXMovePositionDown:
.88b9	18		clc				clc 								; add 320 to offset/temp+1
.88ba	ad 45 06	lda $0645			lda 	gsOffset
.88bd	69 40		adc #$40			adc 	#64
.88bf	8d 45 06	sta $0645			sta 	gsOffset
.88c2	a5 3d		lda $3d				lda 	gxzScreen+1
.88c4	69 01		adc #$01			adc 	#1
.88c6	85 3d		sta $3d				sta 	gxzScreen+1
.88c8	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88ca	90 07		bcc $88d3			bcc 	_GXMPDExit
.88cc	38		sec				sec  								; next page
.88cd	e9 20		sbc #$20			sbc 	#$20
.88cf	85 3d		sta $3d				sta 	gxzScreen+1
.88d1	e6 0b		inc $0b				inc 	GXEditSlot
.88d3					_GXMPDExit:
.88d3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/collide.asm

.88d4					GXCollide:
.88d4	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.88d6	aa		tax				tax
.88d7	05 37		ora $37				ora 	gxzTemp0+1
.88d9	29 c0		and #$c0			and 	#$C0
.88db	38		sec				sec
.88dc	d0 53		bne $8931			bne 	_GXCollideFail 				; if either >= 64, fail.
.88de	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.88e0	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.88e3	1d 4b 06	ora $064b,x			ora 	GXSpriteLow,x
.88e6	30 48		bmi $8930			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.88e8	18		clc				clc 								; need to calculate sum of sizes.
.88e9	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y
.88ec	7d 8b 06	adc $068b,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.88ef	29 c0		and #$c0			and 	#$C0 					 	; mask off
.88f1	6a		ror a				ror 	a 							; 5/6/7
.88f2	4a		lsr a				lsr 	a 							; 4/5/6
.88f3	4a		lsr a				lsr 	a 							; 3/4/5
.88f4	4a		lsr a				lsr 	a 							; 2/3/4
.88f5	18		clc				clc
.88f6	69 08		adc #$08			adc 	#$08
.88f8	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.88f9	4a		lsr a				lsr 	a
.88fa	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.88fc	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.88ff	29 3f		and #$3f			and 	#$3F
.8901	85 39		sta $39				sta 	gxzTemp1+1
.8903	38		sec				sec
.8904	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8907	29 3f		and #$3f			and 	#$3F
.8909	e5 39		sbc $39				sbc 	gxzTemp1+1
.890b	b0 03		bcs $8910			bcs 	_GXCAbs1 					; calculate |y1-y0|
.890d	49 ff		eor #$ff			eor 	#$FF
.890f	1a		inc a				inc 	a
.8910					_GXCAbs1:
.8910	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8912	b0 1c		bcs $8930			bcs 	_GXOkayFail
.8914	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.8916	38		sec				sec 								; calculate |x1-x0|
.8917	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y
.891a	fd 4b 06	sbc $064b,x			sbc 	GXSpriteLow,x
.891d	b0 03		bcs $8922			bcs 	_GXCAbs2
.891f	49 ff		eor #$ff			eor 	#$FF
.8921	1a		inc a				inc 	a
.8922					_GXCAbs2:
.8922	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8924	b0 0a		bcs $8930			bcs 	_GXOkayFail
.8926	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.8928	90 02		bcc $892c			bcc 	_GXCHaveLowest
.892a	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.892c					_GXCHaveLowest:
.892c	0a		asl a				asl 	a 							; scale to allow for >> 2
.892d	0a		asl a				asl 	a
.892e	18		clc				clc
.892f	60		rts				rts
.8930					_GXOkayFail:
.8930	18		clc				clc
.8931					_GXCollideFail:
.8931	a9 ff		lda #$ff			lda 	#$FF
.8933	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8934					GXFindSprite:
.8934	aa		tax				tax
.8935	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8938	85 0b		sta $0b				sta 	GXEditSlot
.893a	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.893d	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.8940	f0 33		beq $8975			beq 	_GXFSFail
.8942	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8945	8d e2 06	sta $06e2			sta 	GXSpriteOffset+1
.8948	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.894b	48		pha				pha 								; save twice
.894c	48		pha				pha
.894d	29 03		and #$03			and 	#3 							; get sprite size
.894f	8d df 06	sta $06df			sta 	GXSizeBits 					; save raw (0-3)
.8952	aa		tax				tax
.8953	bd 77 89	lda $8977,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8956	8d de 06	sta $06de			sta 	GXSizePixels 					; save (8/16/24/32)
.8959	68		pla				pla 								; get LUT
.895a	4a		lsr a				lsr		a
.895b	4a		lsr a				lsr		a
.895c	29 03		and #$03			and 	#3
.895e	8d e0 06	sta $06e0			sta 	GXSpriteLUT
.8961	68		pla				pla 								; address, neeeds to be x 4
.8962	29 f0		and #$f0			and 	#$F0
.8964	8d e1 06	sta $06e1			sta 	GXSpriteOffset
.8967	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.896a	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.896d	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.8970	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.8973	18		clc				clc
.8974	60		rts				rts
.8975					_GXFSFail:
.8975	38		sec				sec
.8976	60		rts				rts
.8977					_GXFXSSTTable:
>8977	08 10 18 20					.byte 	8,16,24,32
.06de					GXSizePixels:
>06de							.fill 	1
.06df					GXSizeBits:
>06df							.fill 	1
.06e0					GXSpriteLUT:
>06e0							.fill 	1
.06e1					GXSpriteOffset:
>06e1							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.897b					GXSortXY:
.897b	20 99 89	jsr $8999			jsr 	GXSortY 					; will be sorted on Y now
.897e	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.8981	cd 36 06	cmp $0636			cmp 	gxX1
.8984	ad 33 06	lda $0633			lda 	gXX0+1
.8987	ed 37 06	sbc $0637			sbc 	gXX1+1
.898a	90 0c		bcc $8998			bcc 	_GXSXYExit 					; X0 < X1 exit
.898c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.898e	a0 04		ldy #$04			ldy 	#4
.8990	20 ad 89	jsr $89ad			jsr 	GXSwapXY
.8993	e8		inx				inx
.8994	c8		iny				iny
.8995	20 ad 89	jsr $89ad			jsr 	GXSwapXY
.8998					_GXSXYExit:
.8998	60		rts				rts
.8999					GXSortY:
.8999	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.899c	cd 38 06	cmp $0638			cmp 	gxY1
.899f	90 0b		bcc $89ac			bcc 	_GXSYSorted
.89a1	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.89a3	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.89a5					_GXSwap1:
.89a5	20 ad 89	jsr $89ad			jsr 	GXSwapXY
.89a8	88		dey				dey
.89a9	ca		dex				dex
.89aa	10 f9		bpl $89a5			bpl 	_GXSwap1
.89ac					_GXSYSorted:
.89ac	60		rts				rts
.89ad					GXSwapXY:
.89ad	bd 32 06	lda $0632,x			lda 	gxX0,x
.89b0	48		pha				pha
.89b1	b9 32 06	lda $0632,y			lda 	gxX0,y
.89b4	9d 32 06	sta $0632,x			sta 	gxX0,x
.89b7	68		pla				pla
.89b8	99 32 06	sta $0632,y			sta 	gxX0,y
.89bb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.89bc					AssembleGroup1:
.89bc	a9 ff		lda #$ff			lda 	#$FF
.89be	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89c1	80 02		bra $89c5			bra 	AsmGroup12
.89c3					AssembleGroup2:
.89c3	a5 00		lda $00				lda 	$00
.89c5					AsmGroup12:
.89c5	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89c8	68		pla				pla 								; pop the return address to access the information following.
.89c9	fa		plx				plx
.89ca	20 53 8a	jsr $8a53			jsr 	AccessParameters 			; get opcode and save as base
.89cd	8d a4 04	sta $04a4			sta 	BaseOpcode
.89d0	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89d3	d0 08		bne $89dd			bne 	_AG12HaveMask
.89d5	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89d7	20 5b 8a	jsr $8a5b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89da	8d a5 04	sta $04a5			sta 	ModeMask
.89dd					_AG12HaveMask:
.89dd	20 96 8b	jsr $8b96			jsr 	TypeAndCalculateOperand 	; get zero page type
.89e0	da		phx				phx 								; save found address mode
.89e1	20 bf 8a	jsr $8abf			jsr 	AssembleModeX
.89e4	fa		plx				plx  								; restore address mode
.89e5	b0 0b		bcs $89f2			bcs 	_AG12Exit
.89e7	20 f3 89	jsr $89f3			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89ea	20 bf 8a	jsr $8abf			jsr 	AssembleModeX
.89ed	b0 03		bcs $89f2			bcs 	_AG12Exit
.89ef	4c f5 b4	jmp $b4f5			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89f2					_AG12Exit:
.89f2	60		rts				rts
.89f3					PromoteToAbsolute:
.89f3	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89f5	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89f7	f0 19		beq $8a12			beq 	_PTADo
.89f9	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89fb	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89fd	f0 13		beq $8a12			beq 	_PTADo
.89ff	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8a01	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8a03	f0 0d		beq $8a12			beq 	_PTADo
.8a05	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8a07	e0 d1		cpx #$d1			cpx 	#AM_IND
.8a09	f0 07		beq $8a12			beq 	_PTADo
.8a0b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8a0d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8a0f	f0 01		beq $8a12			beq 	_PTADo
.8a11	60		rts				rts
.8a12					_PTADo:
.8a12	aa		tax				tax
.8a13	60		rts				rts
.8a14					AssembleGroup3:
.8a14	68		pla				pla 								; get parameters, which is just the opcode.
.8a15	fa		plx				plx
.8a16	20 53 8a	jsr $8a53			jsr 	AccessParameters 			; get and output opcode
.8a19	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8a1c	20 fa 8b	jsr $8bfa			jsr 	CalculateOperand 			; get a 16 bit operand
.8a1f	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a22	38		sec				sec
.8a23	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a26	48		pha				pha 								; LSB in A
.8a27	ad 10 04	lda $0410			lda 	NSMantissa1
.8a2a	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a2d	aa		tax				tax 								; MSB in X
.8a2e	68		pla				pla
.8a2f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a30	69 7f		adc #$7f			adc 	#$7F
.8a32	90 01		bcc $8a35			bcc 	_AG3NoCarry
.8a34	e8		inx				inx
.8a35					_AG3NoCarry:
.8a35	38		sec				sec 								; fix back and write out anyways.
.8a36	e9 80		sbc #$80			sbc 	#$80
.8a38	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8a3b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a3d	f0 0a		beq $8a49			beq 	_AG3Exit
.8a3f	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a42	29 01		and #$01			and 	#1
.8a44	f0 03		beq $8a49			beq 	_AG3Exit
.8a46	4c fa b4	jmp $b4fa			jmp 	RangeError 					; no, branch is out of range
.8a49					_AG3Exit:
.8a49	60		rts				rts
.8a4a					AssembleGroup4:
.8a4a	68		pla				pla 								; pop address
.8a4b	fa		plx				plx
.8a4c	20 53 8a	jsr $8a53			jsr 	AccessParameters 			; access and get first
.8a4f	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte 			; output it.
.8a52	60		rts				rts
.8a53					AccessParameters:
.8a53	8d a1 04	sta $04a1			sta 	ParamStart
.8a56	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a59	a9 01		lda #$01			lda 	#1
.8a5b					GetParameter:
.8a5b	5a		phy				phy
.8a5c	a8		tay				tay
.8a5d	ad a1 04	lda $04a1			lda 	ParamStart
.8a60	85 36		sta $36				sta 	zTemp0
.8a62	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a65	85 37		sta $37				sta 	zTemp0+1
.8a67	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a69	7a		ply				ply
.8a6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a6b					AssemblerWriteByte:
.8a6b	48		pha			pha
.8a6c	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a6f	29 02		and #$02		and 	#2
.8a71	f0 1b		beq $8a8e		beq 	_AWBNoPrint
.8a73	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a76	20 a9 8a	jsr $8aa9		jsr 	PrintHex
.8a79	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a7c	20 a9 8a	jsr $8aa9		jsr 	PrintHex
.8a7f	a9 20		lda #$20		lda 	#' '
.8a81	20 ae b6	jsr $b6ae		jsr 	EXTPrintCharacter
.8a84	68		pla			pla 									; print byte
.8a85	48		pha			pha
.8a86	20 a9 8a	jsr $8aa9		jsr 	PrintHex
.8a89	a9 0d		lda #$0d		lda 	#13
.8a8b	20 ae b6	jsr $b6ae		jsr 	EXTPrintCharacter
.8a8e					_AWBNoPrint:
.8a8e	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a91	85 36		sta $36			sta 	zTemp0
.8a93	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a96	f0 0e		beq $8aa6		beq 	_AWBRange
.8a98	85 37		sta $37			sta 	zTemp0+1
.8a9a	68		pla			pla 									; write byte out
.8a9b	92 36		sta ($36)		sta 	(zTemp0)
.8a9d	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8aa0	d0 03		bne $8aa5		bne 	_AWBNoCarry
.8aa2	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8aa5					_AWBNoCarry:
.8aa5	60		rts			rts
.8aa6					_AWBRange:
.8aa6	4c fa b4	jmp $b4fa		jmp 	RangeError
.8aa9					PrintHex:
.8aa9	48		pha				pha
.8aaa	4a		lsr a				lsr 	a
.8aab	4a		lsr a				lsr 	a
.8aac	4a		lsr a				lsr 	a
.8aad	4a		lsr a				lsr 	a
.8aae	20 b2 8a	jsr $8ab2			jsr 	_PrintNibble
.8ab1	68		pla				pla
.8ab2					_PrintNibble:
.8ab2	29 0f		and #$0f			and 	#15
.8ab4	c9 0a		cmp #$0a			cmp 	#10
.8ab6	90 02		bcc $8aba			bcc 	_NoShift
.8ab8	69 06		adc #$06			adc 	#6
.8aba					_NoShift:
.8aba	69 30		adc #$30			adc 	#48
.8abc	4c ae b6	jmp $b6ae			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8abf					AssembleModeX:
.8abf	5a		phy				phy
.8ac0	ad a3 04	lda $04a3			lda 	IsGroup1
.8ac3	f0 17		beq $8adc			beq 	_AMXGroup2
.8ac5	8a		txa				txa 							; is it in group # 1
.8ac6	29 40		and #$40			and 	#AM_ISG1
.8ac8	f0 50		beq $8b1a			beq 	_AMXFail 				; no, give up.
.8aca	8a		txa				txa 							; get back.
.8acb	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8acd	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8acf	d0 22		bne $8af3			bne 	_AMXHaveInfo
.8ad1	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ad4	c9 81		cmp #$81			cmp 	#$81
.8ad6	f0 42		beq $8b1a			beq 	_AMXFail
.8ad8	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ada	80 17		bra $8af3			bra 	_AMXHaveInfo 			; odd design decision there.
.8adc					_AMXGroup2:
.8adc	8a		txa				txa 							; is it in group 2 ?
.8add	29 20		and #$20			and 	#AM_ISG2
.8adf	f0 39		beq $8b1a			beq 	_AMXFail 				; no, give up.
.8ae1	8a		txa				txa 							; get the offset into Y
.8ae2	29 1f		and #$1f			and 	#$1F
.8ae4	4a		lsr a				lsr 	a 						; make it 0-7.
.8ae5	4a		lsr a				lsr  	a
.8ae6	a8		tay				tay
.8ae7	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8aea					_AMXCheckOkay:
.8aea	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8aeb	88		dey				dey
.8aec	10 fc		bpl $8aea			bpl 	_AMXCheckOkay
.8aee	90 2a		bcc $8b1a			bcc 	_AMXFail 				; not allowed.
.8af0	8a		txa				txa  							; get mask back
.8af1	29 1f		and #$1f			and 	#$1F
.8af3					_AMXHaveInfo:
.8af3	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8af5	10 05		bpl $8afc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8af7	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8afa	d0 1e		bne $8b1a			bne 	_AMXFail
.8afc					_AMXAnySize:
.8afc	18		clc				clc 							; add offset to the base opcode
.8afd	6d a4 04	adc $04a4			adc 	BaseOpcode
.8b00					_AMXOutputCode:
.8b00	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte 		; write the opcode out.
.8b03	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8b05	f0 10		beq $8b17			beq 	_AMXExit
.8b07	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8b0a	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8b0d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8b0f	30 06		bmi $8b17			bmi 	_AMXExit
.8b11	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8b14	20 6b 8a	jsr $8a6b			jsr 	AssemblerWriteByte
.8b17					_AMXExit:
.8b17	7a		ply				ply
.8b18	38		sec				sec
.8b19	60		rts				rts
.8b1a					_AMXFail:
.8b1a	a0 00		ldy #$00			ldy 	#0
.8b1c					_AMXCheckOddities:
.8b1c	8a		txa				txa
.8b1d	d9 45 8b	cmp $8b45,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b20	d0 16		bne $8b38			bne 	_AMXCONext
.8b22	b9 43 8b	lda $8b43,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b25	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b28	d0 0e		bne $8b38			bne 	_AMXCONext
.8b2a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b2c	10 05		bpl $8b33			bpl 	_AMXCONotZero
.8b2e	ad 10 04	lda $0410			lda 	NSMantissa1
.8b31	d0 05		bne $8b38			bne 	_AMXCONext
.8b33					_AMXCONotZero:
.8b33	b9 44 8b	lda $8b44,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b36	80 c8		bra $8b00			bra 	_AMXOutputCode 			; and assemble it
.8b38					_AMXCONext:
.8b38	c8		iny				iny
.8b39	c8		iny				iny
.8b3a	c8		iny				iny
.8b3b	b9 43 8b	lda $8b43,y			lda 	ExtraOpcode+0,y 		; end of table
.8b3e	d0 dc		bne $8b1c			bne 	_AMXCheckOddities
.8b40					_AMXCOFail:
.8b40	7a		ply				ply
.8b41	18		clc				clc
.8b42	60		rts				rts
.8b43					ExtraOpcode:
>8b43	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b46	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b49	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b4c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b4f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b52	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b55	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b58	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b5b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b5e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b61	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b62					LabelHere:
.8b62	c8		iny				iny 								; skip .
.8b63	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b65	20 6b a1	jsr $a16b			jsr 	EvaluateTerm 				; get a term
.8b68	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b6b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b6d	d0 24		bne $8b93			bne 	_ALType
.8b6f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b72	85 36		sta $36				sta 	zTemp0
.8b74	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b77	85 37		sta $37				sta 	zTemp0+1
.8b79	5a		phy				phy 								; copy address in.
.8b7a	a0 01		ldy #$01			ldy 	#1
.8b7c	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b7f	92 36		sta ($36)			sta 	(zTemp0)
.8b81	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b84	91 36		sta ($36),y			sta 	(zTemp0),y
.8b86	c8		iny				iny
.8b87	a9 00		lda #$00			lda 	#0
.8b89	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8b	c8		iny				iny
.8b8c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8e	c8		iny				iny
.8b8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b91	7a		ply				ply
.8b92	60		rts				rts
.8b93					_ALType:
.8b93	4c ff b4	jmp $b4ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b96					TypeAndCalculateOperand:
.8b96	b1 30		lda ($30),y			lda 	(codePtr),y
.8b98	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b9a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b9c	f0 5b		beq $8bf9			beq 	_TACOExit
.8b9e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ba0	f0 57		beq $8bf9			beq 	_TACOExit
.8ba2	c8		iny				iny
.8ba3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ba5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ba7	f0 51		beq $8bfa			beq 	CalculateOperand
.8ba9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8bab	f0 1f		beq $8bcc			beq 	_TACOIndirect
.8bad	88		dey				dey 								; undo get of first character
.8bae	20 fa 8b	jsr $8bfa			jsr 	CalculateOperand 			; get operand
.8bb1	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8bb5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bb7	d0 40		bne $8bf9			bne 	_TACOExit
.8bb9	c8		iny				iny
.8bba	20 7e ae	jsr $ae7e			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8bbd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8bbf	c9 58		cmp #$58			cmp 	#'X'
.8bc1	f0 36		beq $8bf9			beq 	_TACOExit
.8bc3	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8bc5	c9 59		cmp #$59			cmp 	#'Y'
.8bc7	f0 30		beq $8bf9			beq 	_TACOExit
.8bc9					_TACOSyntax:
.8bc9	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.8bcc					_TACOIndirect:
.8bcc	20 fa 8b	jsr $8bfa			jsr 	CalculateOperand 			; get the operand
.8bcf	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bd3	f0 17		beq $8bec			beq 	_TACOIndX
.8bd5	20 07 af	jsr $af07			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bda	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bdc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bde	d0 19		bne $8bf9			bne 	_TACOExit
.8be0	c8		iny				iny
.8be1	20 7e ae	jsr $ae7e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8be4	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8be6	d0 e1		bne $8bc9			bne 	_TACOSyntax
.8be8	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bea	80 0d		bra $8bf9			bra 	_TACOExit
.8bec					_TACOIndX:
.8bec	c8		iny				iny
.8bed	20 7e ae	jsr $ae7e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bf0	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bf2	d0 d5		bne $8bc9			bne 	_TACOSyntax
.8bf4	20 07 af	jsr $af07			jsr 	CheckRightBracket			; check )
.8bf7	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bf9					_TACOExit:
.8bf9	60		rts				rts
.8bfa					CalculateOperand:
.8bfa	48		pha				pha
.8bfb	da		phx				phx
.8bfc	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bfe	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.8c01	fa		plx				plx
.8c02	68		pla				pla
.8c03	60		rts				rts
.ae7e					TACOCheckXY:
.ae7e	b1 30		lda ($30),y			lda 	(codePtr),y
.ae80	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ae82	c9 40		cmp #$40			cmp 	#$40
.ae84	d0 21		bne $aea7			bne 	_TCXYFail
.ae86	b1 30		lda ($30),y			lda 	(codePtr),y
.ae88	18		clc				clc
.ae89	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ae8b	85 37		sta $37				sta 	zTemp0+1
.ae8d	c8		iny				iny
.ae8e	b1 30		lda ($30),y			lda 	(codePtr),y
.ae90	c8		iny				iny
.ae91	85 36		sta $36				sta 	zTemp0
.ae93	5a		phy				phy 								; save position
.ae94	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ae96	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae98	d0 0c		bne $aea6			bne 	_TCXYPopFail
.ae9a	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ae9c	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae9e	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aea0	f0 08		beq $aeaa			beq 	_TCXYFound
.aea2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aea4	f0 04		beq $aeaa			beq 	_TCXYFound
.aea6					_TCXYPopFail:
.aea6	7a		ply				ply
.aea7					_TCXYFail:
.aea7	a9 00		lda #$00			lda 	#0
.aea9	60		rts				rts
.aeaa					_TCXYFound:
.aeaa	7a		ply				ply 								; restore position
.aeab	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aead	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8c04					EditProgramCode:
.8c04	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8c07	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8c0a	20 23 a7	jsr $a723			jsr 	MemorySearch
.8c0d	90 05		bcc $8c14			bcc 	_EPCNoDelete 				; reached the end don't delete
.8c0f	d0 03		bne $8c14			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8c11	20 39 b7	jsr $b739			jsr 	MemoryDeleteLine 			; delete the line
.8c14					_EPCNoDelete:
.8c14	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8c17	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c19	f0 0d		beq $8c28			beq 	_EPCNoInsert
.8c1b	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8c1e	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c21	20 23 a7	jsr $a723			jsr 	MemorySearch
.8c24	18		clc				clc 								; insert at this point.
.8c25	20 70 b7	jsr $b770			jsr 	MemoryInsertLine 			; insert the line
.8c28					_EPCNoInsert:
.8c28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c29					WarmStart:
.8c29	a2 ff		ldx #$ff			ldx 	#$FF
.8c2b	9a		txs				txs
.8c2c	20 c4 b6	jsr $b6c4			jsr 	EXTInputLine 				; get line to lineBuffer
.8c2f	20 ff ab	jsr $abff			jsr 	TokeniseLine 				; tokenise the line
.8c32	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8c35	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8c38	d0 17		bne $8c51			bne 	_WSEditCode 				; if so,edit code.
.8c3a	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c3d	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8c3f	85 30		sta $30				sta 	codePtr
.8c41	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c43	85 31		sta $31				sta 	codePtr+1
.8c45	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8c48	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c4a	f0 dd		beq $8c29			beq 	WarmStart
.8c4c	20 8f 95	jsr $958f			jsr 	RUNCodePointerLine 			; execute that line.
.8c4f	80 d8		bra $8c29			bra 	WarmStart
.8c51					_WSEditCode:
.8c51	20 04 8c	jsr $8c04			jsr 	EditProgramCode
.8c54	20 c2 8c	jsr $8cc2			jsr 	ClearCommand
.8c57	80 d0		bra $8c29			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c59					AssembleCommand:
.8c59	a2 00		ldx #$00			ldx 	#0
.8c5b	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger 		; start address
.8c5e	ad 08 04	lda $0408			lda 	NSMantissa0
.8c61	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c64	ad 10 04	lda $0410			lda 	NSMantissa1
.8c67	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c6a	20 0f af	jsr $af0f			jsr 	CheckComma
.8c6d	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; options
.8c70	ad 08 04	lda $0408			lda 	NSMantissa0
.8c73	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c76	60		rts				rts
.8c77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c78					AssertCommand:
.8c78	a2 00		ldx #$00			ldx 	#0
.8c7a	20 27 a6	jsr $a627			jsr 	EvaluateInteger 			; the assert test
.8c7d	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; exit if result is non zero.
.8c80	d0 05		bne $8c87			bne 	_ACExit
.8c82	a9 0a		lda #$0a		lda	#10
.8c84	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.8c87					_ACExit:
.8c87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c88					CallCommand:
.8c88	a2 00		ldx #$00			ldx 	#0
.8c8a	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.8c8d					_CCClear
.8c8d	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c8e	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.8c91	e0 04		cpx #$04			cpx 	#4
.8c93	d0 f8		bne $8c8d			bne 	_CCClear
.8c95	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c97					_CCCParam:
.8c97	b1 30		lda ($30),y			lda 	(codePtr),y
.8c99	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c9b	d0 09		bne $8ca6			bne 	_CCCRun6502
.8c9d	c8		iny				iny 								; skip comma
.8c9e	e8		inx				inx	 								; next level
.8c9f	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8ca2	e0 03		cpx #$03			cpx 	#3
.8ca4	90 f1		bcc $8c97			bcc 	_CCCParam 					; done all 3 ?
.8ca6					_CCCRun6502:
.8ca6	5a		phy				phy 								; save position
.8ca7	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8caa	85 37		sta $37				sta 	zTemp0+1
.8cac	ad 08 04	lda $0408			lda 	NSMantissa0
.8caf	85 36		sta $36				sta 	zTemp0
.8cb1	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8cb4	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8cb7	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8cba	20 bf 8c	jsr $8cbf			jsr 	_CCCZTemp0 					; call zTemp0
.8cbd	7a		ply				ply 								; restore position and exit
.8cbe	60		rts				rts
.8cbf					_CCCZTemp0:
.8cbf	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8cc2					ClearCommand:
.8cc2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8cc4	85 36		sta $36				sta 	0+zTemp0
.8cc6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cc8	85 37		sta $37				sta 	1+zTemp0
.8cca					_ClearZeroLoop:
.8cca	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8ccc	f0 24		beq $8cf2			beq 	_ClearZeroEnd
.8cce	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cd0	a9 00		lda #$00			lda 	#0
.8cd2					_ClearOneVariable:
.8cd2	91 36		sta ($36),y			sta 	(zTemp0),y
.8cd4	c8		iny				iny
.8cd5	c0 08		cpy #$08			cpy 	#8
.8cd7	d0 f9		bne $8cd2			bne 	_ClearOneVariable
.8cd9	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cdb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cdd	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cdf	d0 04		bne $8ce5			bne 	_ClearNotProcedure
.8ce1	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8ce3	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce5					_ClearNotProcedure:
.8ce5	18		clc				clc 								; go to the next variable
.8ce6	b2 36		lda ($36)			lda 	(zTemp0)
.8ce8	65 36		adc $36				adc 	zTemp0
.8cea	85 36		sta $36				sta 	zTemp0
.8cec	90 dc		bcc $8cca			bcc 	_ClearZeroLoop
.8cee	e6 37		inc $37				inc 	zTemp0+1
.8cf0	80 d8		bra $8cca			bra 	_ClearZeroLoop
.8cf2					_ClearZeroEnd:
.8cf2	18		clc				clc
.8cf3	a5 36		lda $36				lda 	zTemp0
.8cf5	69 01		adc #$01			adc 	#1
.8cf7	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cfa	a5 37		lda $37				lda 	zTemp0+1
.8cfc	69 00		adc #$00			adc 	#0
.8cfe	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8d01	20 dd a7	jsr $a7dd			jsr 	StackReset
.8d04	20 53 b8	jsr $b853			jsr 	StringSystemInitialise
.8d07	20 92 99	jsr $9992			jsr 	ProcedureScan
.8d0a	20 4b 95	jsr $954b			jsr 	Command_Restore
.8d0d	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8d10	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8d13	9c a0 04	stz $04a0			stz 	AssemblerControl
.8d16	20 5e a3	jsr $a35e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8d19	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8d1a					ClearScreen:
.8d1a	5a		phy				phy
.8d1b	20 ab b6	jsr $b6ab			jsr 	EXTClearScreen
.8d1e	7a		ply				ply
.8d1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8d20					Command_Data:
.8d20	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8d22	a2 80		ldx #$80			ldx 	#KWC_EOL
.8d24	20 e4 99	jsr $99e4			jsr 	ScanForward
.8d27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d28					DimCommand:
.8d28	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2a	29 c0		and #$c0			and 	#$C0
.8d2c	c9 40		cmp #$40			cmp 	#$40
.8d2e	d0 7a		bne $8daa			bne 	_DCSyntax
.8d30	b1 30		lda ($30),y			lda 	(codePtr),y
.8d32	18		clc				clc
.8d33	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d35	85 3f		sta $3f				sta 	zaTemp+1
.8d37	c8		iny				iny
.8d38	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3a	c8		iny				iny
.8d3b	85 3e		sta $3e				sta 	zaTemp
.8d3d	5a		phy				phy
.8d3e	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d40	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d42	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d44	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d46	f0 62		beq $8daa			beq 	_DCSyntax
.8d48	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d4a	29 04		and #$04			and 	#NSBIsArray
.8d4c	f0 64		beq $8db2			beq 	_DCType
.8d4e	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d50	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d52	d0 59		bne $8dad			bne 	_DCRedefine
.8d54	7a		ply				ply
.8d55	20 b5 8d	jsr $8db5			jsr 	_DCGetSize 				; get array size, check it.
.8d58	5a		phy				phy
.8d59	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d5b	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d5d	7a		ply				ply 							; is there a second (e.g. ,x)
.8d5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d60	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d62	d0 0a		bne $8d6e			bne 	_DCOneDimension
.8d64	c8		iny				iny 							; skip comma
.8d65	20 b5 8d	jsr $8db5			jsr 	_DCGetSize 				; get 2nd array size
.8d68	5a		phy				phy
.8d69	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d6b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6d	7a		ply				ply
.8d6e					_DCOneDimension:
.8d6e	5a		phy				phy 							; save position
.8d6f	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d71	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d73	aa		tax				tax
.8d74	c8		iny				iny
.8d75	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d77	e8		inx				inx 							; bump them.
.8d78	1a		inc a				inc 	a
.8d79	20 91 b3	jsr $b391			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d7c	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d7e	29 e0		and #$e0			and 	#$E0
.8d80	d0 23		bne $8da5			bne 	_DCSize
.8d82	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d84	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d86	20 c3 8d	jsr $8dc3			jsr 	ScaleByBaseType 		; scale by base type
.8d89	a5 36		lda $36				lda 	zTemp0
.8d8b	a6 37		ldx $37				ldx 	zTemp0+1
.8d8d	20 20 a3	jsr $a320			jsr 	AllocateXABytes 		; allocate memory
.8d90	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d92	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d94	c8		iny				iny
.8d95	8a		txa				txa
.8d96	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d98	7a		ply				ply 							; get position back
.8d99	20 07 af	jsr $af07			jsr 	CheckRightBracket 		; check )
.8d9c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9e	c8		iny				iny 							; consume in case
.8d9f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8da1	f0 85		beq $8d28			beq 	DimCommand
.8da3	88		dey				dey 							; undo consume
.8da4	60		rts				rts
.8da5					_DCSize:
.8da5	a9 16		lda #$16		lda	#22
.8da7	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.8daa					_DCSyntax:
.8daa	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.8dad					_DCRedefine:
.8dad	a9 15		lda #$15		lda	#21
.8daf	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.8db2					_DCType:
.8db2	4c ff b4	jmp $b4ff			jmp 	TypeError
.8db5					_DCGetSize:
.8db5	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8db7	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 	; get array dimension
.8dba	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8dbc	f0 e7		beq $8da5			beq 	_DCSize
.8dbe	c9 fe		cmp #$fe			cmp 	#254
.8dc0	f0 e3		beq $8da5			beq 	_DCSize
.8dc2	60		rts				rts
.8dc3					ScaleByBaseType:
.8dc3	29 10		and #$10			and 	#NSBIsString 			; is it string
.8dc5	d0 19		bne $8de0			bne 	_SBBTString
.8dc7	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8dc9	48		pha				pha
.8dca	a5 36		lda $36				lda 	zTemp0
.8dcc	48		pha				pha
.8dcd	06 36		asl $36				asl 	zTemp0 					; x 2
.8dcf	26 37		rol $37				rol 	zTemp0+1
.8dd1	06 36		asl $36				asl 	zTemp0 					; x 4
.8dd3	26 37		rol $37				rol 	zTemp0+1
.8dd5	68		pla				pla 							; add stacked value = x 5
.8dd6	65 36		adc $36				adc 	zTemp0
.8dd8	85 36		sta $36				sta 	zTemp0
.8dda	68		pla				pla
.8ddb	65 37		adc $37				adc 	zTemp0+1
.8ddd	85 37		sta $37				sta 	zTemp0+1
.8ddf	60		rts				rts
.8de0					_SBBTString:
.8de0	06 36		asl $36				asl 	zTemp0
.8de2	26 37		rol $37				rol 	zTemp0+1
.8de4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8de5					EndCommand:
.8de5	4c 29 8c	jmp $8c29			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8de8					UnaryEvent:
.8de8	fa		plx				plx
.8de9	20 d1 97	jsr $97d1			jsr 	TimerToStackX 				; timer in +0
.8dec	e8		inx				inx  								; put reference into +1
.8ded	20 6b a1	jsr $a16b			jsr 	EvaluateTerm
.8df0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8df3	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8df5	d0 57		bne $8e4e			bne 	_UEType
.8df7	e8		inx				inx 								; put the step in +2
.8df8	20 0f af	jsr $af0f			jsr 	CheckComma
.8dfb	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.8dfe	20 07 af	jsr $af07			jsr 	CheckRightBracket
.8e01	ca		dex				dex
.8e02	ca		dex				dex
.8e03	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8e06	85 36		sta $36				sta 	zTemp0
.8e08	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8e0b	85 37		sta $37				sta 	zTemp0+1
.8e0d	5a		phy				phy
.8e0e	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8e10	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e12	30 36		bmi $8e4a			bmi 	_UEFalse 					; exit if signed.
.8e14	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8e16	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e19	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e1b	c8		iny				iny
.8e1c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e1f	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e21	c8		iny				iny
.8e22	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e25	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e27	90 21		bcc $8e4a			bcc 	_UEFalse 					; no, return FALSE.
.8e29	18		clc				clc
.8e2a	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e2f	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e32	91 36		sta ($36),y			sta 	(zTemp0),y
.8e34	c8		iny				iny
.8e35	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e38	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e3b	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3d	c8		iny				iny
.8e3e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e41	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e44	91 36		sta ($36),y			sta 	(zTemp0),y
.8e46	7a		ply				ply
.8e47	4c f6 9a	jmp $9af6			jmp 	ReturnTrue
.8e4a					_UEFalse:
.8e4a	7a		ply				ply 								; restore Y
.8e4b	4c 02 9b	jmp $9b02			jmp 	ReturnFalse 				; and return False
.8e4e					_UEType:
.8e4e	4c ff b4	jmp $b4ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e51					ForCommand:
.8e51	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e53	20 78 a7	jsr $a778			jsr 	StackOpen
.8e56	a2 00		ldx #$00			ldx 	#0
.8e58	20 6b a1	jsr $a16b			jsr 	EvaluateTerm
.8e5b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e5e	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e60	d0 49		bne $8eab			bne		_FCError
.8e62	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e64	20 17 af	jsr $af17			jsr 	CheckNextA
.8e67	e8		inx				inx
.8e68	20 27 a6	jsr $a627			jsr 	EvaluateInteger 			; <from> in +1
.8e6b	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6d	c8		iny				iny 								; consume it
.8e6e	48		pha				pha 								; save on stack for later
.8e6f	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e71	f0 04		beq $8e77			beq 	_FCNoSyntax
.8e73	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e75	d0 37		bne $8eae			bne 	_FCSyntaxError
.8e77					_FCNoSyntax:
.8e77	e8		inx				inx
.8e78	20 27 a6	jsr $a627			jsr 	EvaluateInteger
.8e7b	20 bc a7	jsr $a7bc			jsr 	STKSaveCodePosition 		; save loop back position
.8e7e	68		pla				pla 								; restore DOWNTO or TO
.8e7f	5a		phy				phy 								; save Y on the stack
.8e80	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e82	f0 02		beq $8e86			beq 	_FCNotDownTo
.8e84	a9 02		lda #$02			lda 	#2
.8e86					_FCNotDownTo:
.8e86	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e87	a0 10		ldy #$10			ldy 	#16
.8e89	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e8b	a0 06		ldy #$06			ldy 	#6
.8e8d	ad 08 04	lda $0408			lda 	NSMantissa0
.8e90	91 34		sta ($34),y			sta 	(basicStack),y
.8e92	ad 10 04	lda $0410			lda 	NSMantissa1
.8e95	c8		iny				iny
.8e96	91 34		sta ($34),y			sta 	(basicStack),y
.8e98	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e9a	a2 01		ldx #$01			ldx 	#1
.8e9c	20 b1 8e	jsr $8eb1			jsr 	FCIntegerToStack
.8e9f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8ea1	a2 02		ldx #$02			ldx 	#2
.8ea3	20 b1 8e	jsr $8eb1			jsr 	FCIntegerToStack
.8ea6	20 d1 8e	jsr $8ed1			jsr 	CopyIndexToReference
.8ea9	7a		ply				ply 								; restore position
.8eaa	60		rts				rts
.8eab					_FCError:
.8eab	4c ff b4	jmp $b4ff			jmp 	TypeError
.8eae					_FCSyntaxError:
.8eae	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.8eb1					FCIntegerToStack:
.8eb1	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8eb4	10 03		bpl $8eb9			bpl	 	_FCNotNegative
.8eb6	20 79 a6	jsr $a679			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8eb9					_FCNotNegative:
.8eb9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8ebc	91 34		sta ($34),y			sta 	(basicStack),y
.8ebe	c8		iny				iny
.8ebf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ec2	91 34		sta ($34),y			sta 	(basicStack),y
.8ec4	c8		iny				iny
.8ec5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ec8	91 34		sta ($34),y			sta 	(basicStack),y
.8eca	c8		iny				iny
.8ecb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ece	91 34		sta ($34),y			sta 	(basicStack),y
.8ed0	60		rts				rts
.8ed1					CopyIndexToReference:
.8ed1	5a		phy				phy
.8ed2	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ed4	38		sec				sec 								; (because we copy from offset 8)
.8ed5	b1 34		lda ($34),y			lda 	(basicStack),y
.8ed7	e9 08		sbc #$08			sbc 	#8
.8ed9	85 36		sta $36				sta 	zTemp0
.8edb	c8		iny				iny
.8edc	b1 34		lda ($34),y			lda 	(basicStack),y
.8ede	e9 00		sbc #$00			sbc 	#0
.8ee0	85 37		sta $37				sta 	zTemp0+1
.8ee2	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ee4	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ee6	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee8	0a		asl a				asl 	a 							; into carry
.8ee9	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8eeb	90 14		bcc $8f01			bcc 	_CITRNormal
.8eed	38		sec				sec
.8eee					_CITRNegative:
.8eee	a9 00		lda #$00			lda 	#0
.8ef0	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ef2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ef4	c8		iny				iny
.8ef5	ca		dex				dex
.8ef6	d0 f6		bne $8eee			bne 	_CITRNegative
.8ef8	88		dey				dey 								; look at MSB of mantissa
.8ef9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8efb	09 80		ora #$80			ora 	#$80
.8efd	91 36		sta ($36),y			sta 	(zTemp0),y
.8eff	7a		ply				ply
.8f00	60		rts				rts
.8f01					_CITRNormal:
.8f01	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8f03	91 36		sta ($36),y			sta 	(zTemp0),y
.8f05	c8		iny				iny
.8f06	ca		dex				dex
.8f07	d0 f8		bne $8f01			bne 	_CITRNormal
.8f09	7a		ply				ply 								; and exit.
.8f0a	60		rts				rts
.8f0b					NextCommand:
.8f0b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8f0d	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8f0f	20 a4 a7	jsr $a7a4			jsr 	StackCheckFrame
.8f12	5a		phy				phy
.8f13	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8f15	b1 34		lda ($34),y			lda 	(basicStack),y
.8f17	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8f19	30 02		bmi $8f1d			bmi 	_NCStepNeg
.8f1b	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8f1d					_NCStepNeg:
.8f1d	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8f1f	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8f21	18		clc				clc
.8f22					_NCBump:
.8f22	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8f24	91 34		sta ($34),y			sta 	(basicStack),y
.8f26	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f28	c8		iny				iny 								; next byte
.8f29	ca		dex				dex 								; do four times
.8f2a	d0 f6		bne $8f22			bne 	_NCBump
.8f2c	20 d1 8e	jsr $8ed1			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f2f	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f31	b1 34		lda ($34),y			lda 	(basicStack),y
.8f33	0a		asl a				asl 	a 							; sign bit to carry
.8f34	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f36	85 38		sta $38				sta 	zTemp1
.8f38	90 02		bcc $8f3c			bcc 	_NCCompRev 					; use if step is +ve
.8f3a	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f3c					_NCCompRev:
.8f3c	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f3e	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f40	85 39		sta $39				sta 	zTemp1+1
.8f42	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f44	38		sec				sec
.8f45					_NCCompare:
.8f45	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f47	b1 34		lda ($34),y			lda 	(basicStack),y
.8f49	a4 39		ldy $39				ldy 	zTemp1+1
.8f4b	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f4d	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f4f	e6 39		inc $39				inc 	zTemp1+1
.8f51	ca		dex				dex 								; do it 4 times.
.8f52	d0 f1		bne $8f45			bne 	_NCCompare
.8f54	50 02		bvc $8f58			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f56	49 80		eor #$80			eor 	#$80
.8f58					_NCNoOverflow:
.8f58	7a		ply				ply 								; restore Y position
.8f59	0a		asl a				asl 	a 							; is bit 7 set.
.8f5a	90 04		bcc $8f60			bcc 	_NCLoopback 				; if no , >= so loop back
.8f5c	20 96 a7	jsr $a796			jsr 	StackClose 					; exit the loop
.8f5f	60		rts				rts
.8f60					_NCLoopBack:
.8f60	20 cd a7	jsr $a7cd			jsr 	STKLoadCodePosition 		; loop back
.8f63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f64					RectangleCommand:
.8f64	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8f66	80 02		bra $8f6a			bra 	ShapeDrawCmd
.8f68					CircleCommand:
.8f68	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8f6a					ShapeDrawCmd:
.8f6a	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8f6d					ShapeDraw:
.8f6d	0d e4 06	ora $06e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f70	4c ec 8f	jmp $8fec			jmp 	ExecuteGraphicCommand	 	; and complete
.8f73					SpriteCommand:
.8f73	a2 00		ldx #$00			ldx 	#0
.8f75	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get image number.
.8f78	5a		phy				phy
.8f79	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8f7b	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f7e	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f80	b0 0d		bcs $8f8f			bcs 	_SCRange
.8f82	a0 ff		ldy #$ff			ldy 	#255
.8f84	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f87	a9 32		lda #$32			lda 	#25*2
.8f89	7a		ply				ply
.8f8a	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8f8d	80 5d		bra $8fec			bra 	ExecuteGraphicCommand
.8f8f					_SCRange:
.8f8f	4c fa b4	jmp $b4fa			jmp 	RangeError
.8f92					ImageCommand:
.8f92	a2 00		ldx #$00			ldx 	#0
.8f94	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get image number.
.8f97	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8f9a					ImageRunDraw:
.8f9a	09 20		ora #$20			ora 	#16*2 						; move cursor
.8f9c	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8f9f	ad ea 06	lda $06ea			lda 	gxDrawScale
.8fa2	0a		asl a				asl 	a
.8fa3	0a		asl a				asl 	a
.8fa4	0a		asl a				asl 	a
.8fa5	a8		tay				tay
.8fa6	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8fa8	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8fab	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8fae	60		rts				rts
.8faf					TextCommand:
.8faf	a2 00		ldx #$00			ldx 	#0
.8fb1	20 0f a6	jsr $a60f			jsr 	EvaluateString 				; get text
.8fb4	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8fb7					TextRunDraw:
.8fb7	09 20		ora #$20			ora 	#16*2 						; move cursor
.8fb9	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8fbc	a0 00		ldy #$00			ldy 	#0
.8fbe					_IRDLoop:
.8fbe	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8fc1	85 37		sta $37				sta 	zTemp0+1
.8fc3	ad 08 04	lda $0408			lda 	NSMantissa0
.8fc6	85 36		sta $36				sta 	zTemp0
.8fc8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fca	f0 13		beq $8fdf			beq 	_IRDExit
.8fcc	5a		phy				phy									; save string pos
.8fcd	48		pha				pha 								; save char
.8fce	ad ea 06	lda $06ea			lda 	gxDrawScale 				; get scale
.8fd1	0a		asl a				asl 	a
.8fd2	0a		asl a				asl 	a
.8fd3	0a		asl a				asl 	a
.8fd4	a8		tay				tay
.8fd5	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8fd7	fa		plx				plx 								; char to draw
.8fd8	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.8fdb	7a		ply				ply 								; restore string pos
.8fdc	c8		iny				iny
.8fdd	90 df		bcc $8fbe			bcc 	_IRDLoop 					; go back if no error.
.8fdf					_IRDExit:
.8fdf	60		rts				rts
.8fe0					PlotCommand:
.8fe0	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8fe2	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8fe5	80 05		bra $8fec			bra 	ExecuteGraphicCommand
.8fe7					LineCommand:
.8fe7	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8fe9	20 f8 8f	jsr $8ff8			jsr 	RunGraphicsCommand
.8fec					ExecuteGraphicCommand:
.8fec	0d e3 06	ora $06e3			ora 	gxCommandID 				; make a full command
.8fef	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; draw it and exit
.8ff2	b0 01		bcs $8ff5			bcs 	_EGCError
.8ff4	60		rts				rts
.8ff5					_EGCError:
.8ff5	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.8ff8					RunGraphicsCommand:
.8ff8	8d e3 06	sta $06e3			sta 	gxCommandID					; save TODO graphics command.
.8ffb	68		pla				pla 								; pop handler address
.8ffc	fa		plx				plx
.8ffd	1a		inc a				inc 	a
.8ffe	d0 01		bne $9001			bne 	_RGINoCarry
.9000	e8		inx				inx
.9001					_RGINoCarry:
.9001	8d e8 06	sta $06e8			sta 	GXHandler
.9004	8e e9 06	stx $06e9			stx 	GXHandler+1
.9007					_RGICommandLoop:
.9007	b1 30		lda ($30),y			lda 	(codePtr),y
.9009	c8		iny				iny
.900a	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.900c	f0 53		beq $9061			beq 	_RGI_To
.900e	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.9010	f0 55		beq $9067			beq 	_RGI_Here
.9012	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.9014	f0 3d		beq $9053			beq 	_RGI_Exit
.9016	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9018	f0 39		beq $9053			beq 	_RGI_Exit
.901a	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.901c	f0 3e		beq $905c			beq 	_RGI_Frame
.901e	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.9020	f0 33		beq $9055			beq 	_RGI_Solid
.9022	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.9024	f0 4b		beq $9071			beq 	_RGI_By
.9026	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.9028	f0 17		beq $9041			beq 	_RGI_Move2
.902a	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.902c	f0 65		beq $9093			beq 	_RGI_Dim
.902e	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.9030	f0 78		beq $90aa			beq 	_RGI_Colour
.9032	c9 af		cmp #$af			cmp 	#KWD_COLOR
.9034	f0 74		beq $90aa			beq 	_RGI_Colour
.9036	ae e3 06	ldx $06e3			ldx 	gxCommandID
.9039	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.903b	d0 03		bne $9040			bne 	_RGI_Move 					; move
.903d	4c d4 90	jmp $90d4			jmp		_RGI_SpriteInstructions
.9040					_RGI_Move:
.9040	88		dey				dey 								; unpick get.
.9041					_RGI_Move2:
.9041	20 fa 90	jsr $90fa			jsr 	GCGetCoordinatePair 		; move to here
.9044	20 21 91	jsr $9121			jsr 	GCCopyPairToStore 			; save
.9047	5a		phy				phy
.9048	20 17 91	jsr $9117			jsr 	GCLoadAXY 					; load in
.904b	09 20		ora #$20			ora 	#16*2 						; move there
.904d	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9050	7a		ply				ply
.9051	80 b4		bra $9007			bra 	_RGICommandLoop 			; and go round
.9053					_RGI_Exit:
.9053	88		dey				dey 								; unpick : / EOL
.9054	60		rts				rts
.9055					_RGI_Solid:
.9055	a9 02		lda #$02			lda 	#2
.9057	8d e4 06	sta $06e4			sta 	gxFillSolid
.905a	80 ab		bra $9007			bra 	_RGICommandLoop
.905c					_RGI_Frame:
.905c	9c e4 06	stz $06e4			stz 	gxFillSolid
.905f	80 a6		bra $9007			bra 	_RGICommandLoop
.9061					_RGI_To:
.9061	20 fa 90	jsr $90fa			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.9064	20 21 91	jsr $9121			jsr 	GCCopyPairToStore
.9067					_RGI_Here:
.9067	5a		phy				phy
.9068	20 17 91	jsr $9117			jsr 	GCLoadAXY 					; load it into AXY
.906b	20 d1 90	jsr $90d1			jsr 	_RGICallHandler 			; go do whatever it is.
.906e	7a		ply				ply
.906f	80 96		bra $9007			bra 	_RGICommandLoop 			; and go round
.9071					_RGI_By:
.9071	20 07 91	jsr $9107			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.9074	18		clc				clc
.9075	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9078	6d e5 06	adc $06e5			adc 	gxxPos
.907b	8d e5 06	sta $06e5			sta 	gxXPos
.907e	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9081	6d e6 06	adc $06e6			adc 	gxxPos+1
.9084	8d e6 06	sta $06e6			sta 	gxXPos+1
.9087	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.908a	18		clc				clc
.908b	6d e7 06	adc $06e7			adc 	gxYPos
.908e	8d e7 06	sta $06e7			sta 	gxYPos
.9091	80 d4		bra $9067			bra 	_RGI_Here
.9093					_RGI_Dim:
.9093	a2 01		ldx #$01			ldx	 	#1
.9095	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger
.9098	ad 09 04	lda $0409			lda 	NSMantissa0+1
.909b	c9 00		cmp #$00			cmp 	#0
.909d	f0 2f		beq $90ce			beq 	_RGIRange
.909f	c9 09		cmp #$09			cmp 	#8+1
.90a1	b0 2b		bcs $90ce			bcs		_RGIRange
.90a3	3a		dec a				dec 	a
.90a4	8d ea 06	sta $06ea			sta 	gxDrawScale
.90a7	4c 07 90	jmp $9007			jmp 	_RGICommandLoop
.90aa					_RGI_Colour:
.90aa	a2 01		ldx #$01			ldx 	#1 							; colour
.90ac	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger
.90af	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.90b1	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.90b4	b1 30		lda ($30),y			lda 	(codePtr),y
.90b6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.90b8	d0 04		bne $90be			bne 	_RGICDefaultMode
.90ba	c8		iny				iny
.90bb	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger
.90be					_RGICDefaultMode:
.90be	5a		phy				phy
.90bf	a9 08		lda #$08			lda 	#4*2 						; set colour.
.90c1	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90c4	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90c7	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90ca	7a		ply				ply
.90cb	4c 07 90	jmp $9007			jmp 	_RGICommandLoop 			; and go round
.90ce					_RGIRange:
.90ce	4c fa b4	jmp $b4fa			jmp 	RangeError
.90d1					_RGICallHandler:
.90d1	6c e8 06	jmp ($06e8)			jmp 	(GXHandler)
.90d4					_RGI_SpriteInstructions:
.90d4	c9 be		cmp #$be			cmp 	#KWD_OFF
.90d6	f0 07		beq $90df			beq 	_RGISpriteOff
.90d8	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.90da	f0 13		beq $90ef			beq 	_RGISetImage
.90dc	4c 40 90	jmp $9040			jmp 	_RGI_Move
.90df					_RGISpriteOff:
.90df	5a		phy				phy
.90e0	a0 01		ldy #$01			ldy 	#1
.90e2	a2 00		ldx #$00			ldx 	#0
.90e4					_RGIDoCommandLoop:
.90e4	a9 10		lda #$10			lda 	#8*2
.90e6	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.90e9	7a		ply				ply
.90ea	b0 e2		bcs $90ce			bcs 	_RGIRange
.90ec	4c 07 90	jmp $9007			jmp 	_RGICommandLoop
.90ef					_RGISetImage:
.90ef	a2 01		ldx #$01			ldx 	#1
.90f1	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger
.90f4	5a		phy				phy
.90f5	aa		tax				tax
.90f6	a0 00		ldy #$00			ldy 	#0
.90f8	80 ea		bra $90e4			bra 	_RGIDoCommandLoop
.90fa					GCGetCoordinatePair:
.90fa	a2 01		ldx #$01			ldx 	#1
.90fc	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.90ff	20 0f af	jsr $af0f			jsr 	CheckComma
.9102	e8		inx				inx
.9103	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.9106	60		rts				rts
.9107					GCSignedCoordinatePair:
.9107	a2 01		ldx #$01			ldx 	#1
.9109	20 48 a6	jsr $a648			jsr 	Evaluate16BitIntegerSigned
.910c	20 0f af	jsr $af0f			jsr 	CheckComma
.910f	e8		inx				inx
.9110	20 48 a6	jsr $a648			jsr 	Evaluate16BitIntegerSigned
.9113	60		rts				rts
.9114					_GCCPRange:
.9114	4c fa b4	jmp $b4fa			jmp 	RangeError
.9117					GCLoadAXY:
.9117	ad e6 06	lda $06e6			lda 	gxXPos+1
.911a	ae e5 06	ldx $06e5			ldx 	gxXPos
.911d	ac e7 06	ldy $06e7			ldy 	gxYPos
.9120	60		rts				rts
.9121					GCCopyPairToStore:
.9121	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9124	8d e5 06	sta $06e5			sta 	gxXPos
.9127	ad 11 04	lda $0411			lda 	NSMantissa1+1
.912a	8d e6 06	sta $06e6			sta 	gxXPos+1
.912d	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9130	8d e7 06	sta $06e7			sta 	gxYPos
.9133	60		rts				rts
.06e3					gxCommandID:
>06e3							.fill 	1
.06e4					gxFillSolid:
>06e4							.fill 	1
.06e5					gxXPos:
>06e5							.fill 	2
.06e7					gxYPos:
>06e7							.fill 	1
.06e8					gxHandler:
>06e8							.fill 	2
.06ea					gxDrawScale:
>06ea							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9134					BitmapCtrl:
.9134	b1 30		lda ($30),y			lda 	(codePtr),y
.9136	c8		iny				iny
.9137	a2 01		ldx #$01			ldx 	#1
.9139	c9 bf		cmp #$bf			cmp 	#KWD_ON
.913b	f0 11		beq $914e			beq 	BitmapSwitch
.913d	ca		dex				dex
.913e	c9 be		cmp #$be			cmp 	#KWD_OFF
.9140	f0 0c		beq $914e			beq 	BitmapSwitch
.9142	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get the colour
.9145	5a		phy				phy
.9146	aa		tax				tax
.9147	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9149	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.914c	7a		ply				ply
.914d	60		rts				rts
.914e					BitmapSwitch:
.914e	5a		phy				phy
.914f	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9151	a9 02		lda #$02			lda 	#1*2
.9153	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9156	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9158	a0 00		ldy #$00			ldy 	#0
.915a	a2 ff		ldx #$ff			ldx 	#$FF
.915c	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.915f	9c e4 06	stz $06e4			stz 	gxFillSolid
.9162	9c e5 06	stz $06e5			stz 	gxXPos
.9165	9c e6 06	stz $06e6			stz 	gxXPos+1
.9168	9c e7 06	stz $06e7			stz 	gxYPos
.916b	9c ea 06	stz $06ea			stz 	gxDrawScale
.916e	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9170	a2 00		ldx #$00			ldx 	#0
.9172	a0 00		ldy #$00			ldy 	#0
.9174	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9177	7a		ply				ply
.9178	60		rts				rts
.9179					SpritesCtrl:
.9179	b1 30		lda ($30),y			lda 	(codePtr),y
.917b	c8		iny				iny
.917c	a2 01		ldx #$01			ldx 	#1
.917e	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9180	f0 08		beq $918a			beq 	SpriteSwitch
.9182	ca		dex				dex
.9183	c9 be		cmp #$be			cmp 	#KWD_OFF
.9185	f0 03		beq $918a			beq 	SpriteSwitch
.9187	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.918a					SpriteSwitch:
.918a	5a		phy				phy
.918b	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.918d	a9 04		lda #$04			lda 	#2*2
.918f	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.9192	7a		ply				ply
.9193	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.9194					GfxCommand:
.9194	a2 00		ldx #$00			ldx 	#0
.9196	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; command
.9199	20 0f af	jsr $af0f			jsr 	CheckComma
.919c	e8		inx				inx
.919d	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger 		; X
.91a0	20 0f af	jsr $af0f			jsr 	CheckComma
.91a3	e8		inx				inx
.91a4	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; Y
.91a7	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.91aa	4a		lsr a				lsr 	a
.91ab	d0 16		bne $91c3			bne 	_GfxError
.91ad	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.91b0	b0 11		bcs $91c3			bcs 	_GfxError 					; bit 7 should have been zero
.91b2	5a		phy				phy 								; save pos
.91b3	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.91b6	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.91b9	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.91bc	20 86 80	jsr $8086			jsr 	GXGraphicDraw
.91bf	b0 02		bcs $91c3			bcs 	_GfxError
.91c1	7a		ply				ply 								; restore pos and exit.
.91c2	60		rts				rts
.91c3					_GfxError:
.91c3	4c fa b4	jmp $b4fa			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.91c6					Command_GOSUB:
.91c6	a2 00		ldx #$00			ldx 	#0
.91c8	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91cb	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91cd	20 78 a7	jsr $a778			jsr 	StackOpen 					; create frame
.91d0	20 bc a7	jsr $a7bc			jsr 	STKSaveCodePosition 		; save current position
.91d3	4c e9 91	jmp $91e9			jmp 	GotoStackX
.91d6					Command_RETURN:
.91d6	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91d8	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91da	20 a4 a7	jsr $a7a4			jsr 	StackCheckFrame
.91dd	20 cd a7	jsr $a7cd			jsr 	STKLoadCodePosition 		; restore code position
.91e0	20 96 a7	jsr $a796			jsr 	StackClose
.91e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.91e4					GotoCommand:
.91e4	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.91e6	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.91e9					GotoStackX:
.91e9	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.91ec	48		pha				pha 								; it is slightly inefficient, just in cases.
.91ed	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91f0	fa		plx				plx
.91f1	20 23 a7	jsr $a723			jsr 	MemorySearch 				; transfer to line number AX.
.91f4	90 05		bcc $91fb			bcc 	_GotoError 					; not found, off end.
.91f6	d0 03		bne $91fb			bne 	_GotoError 					; not found exactly
.91f8	4c 88 95	jmp $9588			jmp 	RunNewLine 					; and go straight to new line code.
.91fb					_GotoError:
.91fb	a9 0d		lda #$0d		lda	#13
.91fd	4c 89 9a	jmp $9a89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.9200					UnaryHit:
.9200	fa		plx				plx
.9201	a9 36		lda #$36			lda 	#zTemp0
.9203	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get sprite number 0
.9206	20 0f af	jsr $af0f			jsr 	CheckComma
.9209	e8		inx				inx
.920a	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get sprite number 1
.920d	20 07 af	jsr $af07			jsr		CheckRightBracket
.9210	ca		dex				dex 								; fix back up again.
.9211	da		phx				phx 								; save X/Y
.9212	5a		phy				phy
.9213	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.9216	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9219	aa		tax				tax
.921a	a9 12		lda #$12			lda 	#9*2 						; command 9
.921c	20 86 80	jsr $8086			jsr 	GXGraphicDraw 				; calculate result
.921f	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.9220	7a		ply				ply 								; restore XY
.9221	fa		plx				plx
.9222	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte 					; return the hit result
.9225	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9226					IfCommand:
.9226	a2 00		ldx #$00			ldx 	#0 							; If what.
.9228	20 04 a6	jsr $a604			jsr 	EvaluateNumber
.922b	b1 30		lda ($30),y			lda 	(codePtr),y
.922d	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.922f	d0 0a		bne $923b			bne 	_IFStructured
.9231	c8		iny				iny 								; consume THEN
.9232	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; is it zero
.9235	f0 01		beq $9238			beq 	_IfFail 					; if fail, go to next line
.9237	60		rts				rts 								; if THEN just continue
.9238					_IfFail:
.9238	4c ed 95	jmp $95ed			jmp 	EOLCommand
.923b					_IfStructured:
.923b	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; is it zero
.923e	d0 07		bne $9247			bne 	_IfExit 					; if not, then continue normally.
.9240	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.9242	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9244	20 e4 99	jsr $99e4			jsr 	ScanForward 				; and run from there/
.9247					_IfExit:
.9247	60		rts				rts
.9248					ElseCode:
.9248	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.924a	aa		tax				tax 								; so just go to the structure exit
.924b	20 e4 99	jsr $99e4			jsr 	ScanForward
.924e	60		rts				rts
.924f					EndIf:
.924f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.9250					UnaryJoyX:
.9250	18		clc				clc
.9251	80 01		bra $9254			bra 	JoyMain
.9253					UnaryJoyY:
.9253	38		sec				sec
.9254					JoyMain:
.9254	fa		plx				plx 								; get pos
.9255	08		php				php 								; save carry (set for Y)
.9256	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9259	20 07 af	jsr $af07			jsr 	CheckRightBracket
.925c	20 f2 b6	jsr $b6f2			jsr 	EXTReadController 			; read the controller.
.925f	28		plp				plp
.9260	90 02		bcc $9264			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9262	4a		lsr a				lsr 	a
.9263	4a		lsr a				lsr 	a
.9264					_JMNoShift:
.9264	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9265	b0 0a		bcs $9271			bcs 	_JMIsRight
.9267	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9268	b0 04		bcs $926e			bcs 	_JMIsLeft
.926a	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero 					; zero result
.926d	60		rts				rts
.926e					_JMIsLeft:
.926e	4c f6 9a	jmp $9af6			jmp 	ReturnTrue
.9271					_JMIsRight:
.9271	a9 01		lda #$01			lda 	#1
.9273	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.9276	60		rts				rts
.9277					UnaryJoyB:
.9277	fa		plx				plx 								; get pos
.9278	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; ignore the parameter
.927b	20 07 af	jsr $af07			jsr 	CheckRightBracket
.927e	20 f2 b6	jsr $b6f2			jsr 	EXTReadController 			; read the controller.
.9281	4a		lsr a				lsr 	a
.9282	4a		lsr a				lsr 	a
.9283	4a		lsr a				lsr 	a
.9284	4a		lsr a				lsr 	a
.9285	29 01		and #$01			and 	#1
.9287	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.928a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.928b					LetCommand:
.928b	a2 00		ldx #$00			ldx 	#0
.928d	b1 30		lda ($30),y			lda 	(codePtr),y
.928f	c9 10		cmp #$10			cmp 	#KWD_AT
.9291	d0 16		bne $92a9			bne 	_LCStandard
.9293	c8		iny				iny 								; skip equal
.9294	20 6b a1	jsr $a16b			jsr 	EvaluateTerm 				; get a number
.9297	20 af 9f	jsr $9faf			jsr 	Dereference 				; dereference it
.929a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.929d	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.929f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92a2	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.92a4	d0 10		bne $92b6			bne 	_LCMain
.92a6	4c ff b4	jmp $b4ff			jmp 	TypeError 					; was a reference before.
.92a9					_LCStandard:
.92a9	ad 82 9e	lda $9e82			lda 	PrecedenceLevel+"*"			; precedence > this
.92ac	20 9c 9e	jsr $9e9c			jsr 	EvaluateExpressionAtPrecedence
.92af	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.92b2	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.92b4	f0 0e		beq $92c4			beq 	_LetGoProc 					; it's a procedure call.
.92b6					_LCMain:
.92b6	a9 3d		lda #$3d			lda 	#"=" 						; check =
.92b8	20 17 af	jsr $af17			jsr 	CheckNextA
.92bb	e8		inx				inx 								; RHS
.92bc	20 fb a5	jsr $a5fb			jsr 	EvaluateValue
.92bf	ca		dex				dex
.92c0	20 c7 92	jsr $92c7			jsr 	AssignVariable
.92c3	60		rts				rts
.92c4					_LetGoProc:
.92c4	4c 63 94	jmp $9463			jmp 	CallProcedure
.92c7					AssignVariable:
.92c7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.92ca	48		pha				pha 								; save a copy
.92cb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.92ce	29 10		and #$10			and 	#NSBIsString
.92d0	d0 0b		bne $92dd			bne 	_ASError
.92d2	68		pla				pla 								; get back
.92d3	29 10		and #$10			and 	#NSBIsString 				; check type
.92d5	d0 03		bne $92da			bne 	_ASString
.92d7	4c d7 9e	jmp $9ed7			jmp 	AssignNumber
.92da					_ASString:
.92da	4c 45 9f	jmp $9f45			jmp 	AssignString
.92dd					_ASError:
.92dd	4c ff b4	jmp $b4ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.92e0					Command_List:
.92e0	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.92e3	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.92e6	9c 14 04	stz $0414			stz 	NSMantissa1+4
.92e9	a9 ff		lda #$ff			lda 	#$FF
.92eb	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.92ee	8d 17 04	sta $0417			sta 	NSMantissa1+7
.92f1	b1 30		lda ($30),y			lda 	(codePtr),y
.92f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92f5	f0 1e		beq $9315			beq 	_CLSecond
.92f7	20 73 93	jsr $9373			jsr 	CLIsDigit 					; if not digit, list all
.92fa	b0 24		bcs $9320			bcs 	_CLStart
.92fc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.92fe	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.9301	b1 30		lda ($30),y			lda 	(codePtr),y
.9303	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9305	f0 0e		beq $9315			beq 	_CLSecond 					; if so go get it
.9307	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.930a	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.930d	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9310	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9313	80 0b		bra $9320			bra 	_CLStart
.9315					_CLSecond:
.9315	c8		iny				iny 								; consume comma
.9316	20 73 93	jsr $9373			jsr 	CLIsDigit 					; digit found
.9319	b0 05		bcs $9320			bcs 	_CLStart 					; if not, continue listing
.931b	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.931d	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger
.9320					_CLStart
.9320	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9322	85 30		sta $30				sta 	codePtr
.9324	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9326	85 31		sta $31				sta 	codePtr+1
.9328					_CLLoop:
.9328	20 ef b6	jsr $b6ef			jsr 	EXTBreakCheck 				; break check
.932b	f0 30		beq $935d			beq 	_CLExit
.932d	b2 30		lda ($30)			lda 	(codePtr)
.932f	f0 2c		beq $935d			beq 	_CLExit
.9331	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9333	20 60 93	jsr $9360			jsr 	CLCompareLineNo
.9336	90 18		bcc $9350			bcc 	_CLNext
.9338	a2 07		ldx #$07			ldx 	#7
.933a	20 60 93	jsr $9360			jsr 	CLCompareLineNo
.933d	f0 02		beq $9341			beq 	_CLDoThisOne
.933f	b0 0f		bcs $9350			bcs 	_CLNext
.9341					_CLDoThisOne:
.9341	20 e9 97	jsr $97e9			jsr 	ListConvertLine 			; convert line into token Buffer
.9344	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9346	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9348	20 e2 9a	jsr $9ae2			jsr 	PrintStringXA
.934b	a9 0d		lda #$0d			lda 	#13 						; new line
.934d	20 ae b6	jsr $b6ae			jsr 	EXTPrintCharacter
.9350					_CLNext:
.9350	18		clc				clc
.9351	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9353	65 30		adc $30				adc 	codePtr
.9355	85 30		sta $30				sta 	codePtr
.9357	90 02		bcc $935b			bcc 	_CREExit
.9359	e6 31		inc $31				inc 	codePtr+1
.935b					_CREExit:
.935b	80 cb		bra $9328			bra 	_CLLoop
.935d					_CLExit:
.935d	4c 29 8c	jmp $8c29			jmp 	WarmStart
.9360					CLCompareLineNo:
.9360	38		sec				sec
.9361	a0 01		ldy #$01			ldy 	#1
.9363	b1 30		lda ($30),y			lda 	(codePtr),y
.9365	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9368	85 36		sta $36				sta 	zTemp0
.936a	c8		iny				iny
.936b	b1 30		lda ($30),y			lda 	(codePtr),y
.936d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9370	05 36		ora $36				ora 	zTemp0
.9372	60		rts				rts
.9373					CLIsDigit:
.9373	b1 30		lda ($30),y			lda 	(codePtr),y
.9375	c9 30		cmp #$30			cmp 	#"0"
.9377	90 03		bcc $937c			bcc	 	_CLIDExitFalse
.9379	c9 3a		cmp #$3a			cmp 	#"9"+1
.937b	60		rts				rts
.937c					_CLIDExitFalse:
.937c	38		sec				sec
.937d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.937e					Command_LOCAL:
.937e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9380	20 8c 93	jsr $938c			jsr 	LocaliseNextTerm 			; convert term to a local.
.9383	b1 30		lda ($30),y			lda 	(codePtr),y
.9385	c8		iny				iny
.9386	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9388	f0 f4		beq $937e			beq 	Command_LOCAL
.938a	88		dey				dey 								; unpick pre-get
.938b	60		rts				rts
.938c					LocaliseNextTerm:
.938c	20 6b a1	jsr $a16b			jsr 	EvaluateTerm 				; evaluate the term
.938f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9392	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9394	f0 69		beq $93ff			beq		_LNTError
.9396	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9399	85 36		sta $36				sta 	zTemp0
.939b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.939e	85 37		sta $37				sta  	zTemp0+1
.93a0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93a3	29 10		and #$10			and 	#NSBIsString
.93a5	d0 22		bne $93c9			bne 	_LNTPushString
.93a7	5a		phy				phy
.93a8	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.93aa					_LNTPushNumLoop:
.93aa	b1 36		lda ($36),y			lda		(zTemp0),y
.93ac	20 56 a7	jsr $a756			jsr 	StackPushByte
.93af	a9 00		lda #$00			lda 	#0
.93b1	91 36		sta ($36),y			sta 	(zTemp0),y
.93b3	c8		iny				iny
.93b4	c0 05		cpy #$05			cpy 	#5
.93b6	d0 f2		bne $93aa			bne 	_LNTPushNumLoop
.93b8	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.93ba	20 56 a7	jsr $a756			jsr 	StackPushByte
.93bd	a5 37		lda $37				lda 	zTemp0+1
.93bf	20 56 a7	jsr $a756			jsr 	StackPushByte
.93c2	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.93c4	20 56 a7	jsr $a756			jsr 	StackPushByte
.93c7	7a		ply				ply
.93c8	60		rts				rts
.93c9					_LNTPushString:
.93c9	5a		phy				phy
.93ca	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.93cc	85 38		sta $38				sta 	zTemp1
.93ce	a0 01		ldy #$01			ldy 	#1
.93d0	b1 36		lda ($36),y			lda 	(zTemp0),y
.93d2	85 39		sta $39				sta 	zTemp1+1
.93d4	a0 00		ldy #$00			ldy 	#0 							; output string
.93d6	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.93d8	f0 0a		beq $93e4			beq 	_LNTStringOut
.93da					_LNTPushStrLoop:
.93da	b1 38		lda ($38),y			lda 	(zTemp1),y
.93dc	f0 06		beq $93e4			beq 	_LNTStringOut
.93de	20 56 a7	jsr $a756			jsr 	StackPushByte
.93e1	c8		iny				iny
.93e2	80 f6		bra $93da			bra 	_LNTPushStrLoop
.93e4					_LNTStringOut:
.93e4	98		tya				tya									; output length
.93e5	20 56 a7	jsr $a756			jsr 	StackPushByte
.93e8	a9 00		lda #$00			lda 	#0 							; clear original string.
.93ea	92 38		sta ($38)			sta 	(zTemp1)
.93ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.93ef	20 56 a7	jsr $a756			jsr 	StackPushByte
.93f2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93f5	20 56 a7	jsr $a756			jsr 	StackPushByte
.93f8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.93fa	20 56 a7	jsr $a756			jsr 	StackPushByte
.93fd	7a		ply				ply
.93fe	60		rts				rts
.93ff					_LNTError:
.93ff	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.aeae					LocalPopValue:
.aeae	20 6f a7	jsr $a76f			jsr 	StackPopByte
.aeb1	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.aeb3	d0 17		bne $aecc			bne 	_LPVString
.aeb5	20 6f a7	jsr $a76f			jsr 	StackPopByte 				; address
.aeb8	85 37		sta $37				sta 	zTemp0+1
.aeba	20 6f a7	jsr $a76f			jsr 	StackPopByte
.aebd	85 36		sta $36				sta 	zTemp0
.aebf	5a		phy				phy
.aec0	a0 04		ldy #$04			ldy 	#4 							; copy back
.aec2					_LPVNumberCopy:
.aec2	20 6f a7	jsr $a76f			jsr 	StackPopByte
.aec5	91 36		sta ($36),y			sta 	(zTemp0),y
.aec7	88		dey				dey
.aec8	10 f8		bpl $aec2			bpl 	_LPVNumberCopy
.aeca	7a		ply				ply 								; and complete
.aecb	60		rts				rts
.aecc					_LPVString:
.aecc	20 6f a7	jsr $a76f			jsr 	StackPopByte 				; address of record => zTemp0
.aecf	85 37		sta $37				sta 	zTemp0+1
.aed1	20 6f a7	jsr $a76f			jsr 	StackPopByte
.aed4	85 36		sta $36				sta 	zTemp0
.aed6	5a		phy				phy
.aed7	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.aed9	85 38		sta $38				sta 	zTemp1
.aedb	a0 01		ldy #$01			ldy 	#1
.aedd	b1 36		lda ($36),y			lda 	(zTemp0),y
.aedf	85 39		sta $39				sta 	zTemp1+1
.aee1	20 6f a7	jsr $a76f			jsr 	StackPopByte 				; # to get => y
.aee4	a8		tay				tay
.aee5	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.aee7	f0 0e		beq $aef7			beq 	_LPVStringCopied
.aee9	a9 00		lda #$00			lda 	#0 							; NULL on end
.aeeb	91 38		sta ($38),y			sta 	(zTemp1),y
.aeed					_LPVStringCopy:
.aeed	88		dey				dey
.aeee	30 07		bmi $aef7			bmi 	_LPVStringCopied
.aef0	20 6f a7	jsr $a76f			jsr 	StackPopByte
.aef3	91 38		sta ($38),y			sta 	(zTemp1),y
.aef5	80 f6		bra $aeed			bra 	_LPVStringCopy
.aef7					_LPVStringCopied:
.aef7	fa		plx				plx
.aef8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9402					NewCommand:
.9402	20 01 a7	jsr $a701			jsr 	MemoryNew
.9405	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9408	20 c2 8c	jsr $8cc2			jsr 	ClearCommand 				; clear everything.
.940b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.940c					Command_Print:
.940c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.940d					_CPLoop:
.940d	08		php				php 								; save last action flag
.940e	b1 30		lda ($30),y			lda 	(codePtr),y
.9410	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9412	f0 46		beq $945a			beq 	_CPExit
.9414	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9416	f0 42		beq $945a			beq 	_CPExit
.9418	68		pla				pla 								; throw last action flag
.9419	b1 30		lda ($30),y			lda 	(codePtr),y
.941b	c8		iny				iny
.941c	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.941e	f0 37		beq $9457			beq 	_CPContinueWithSameLine
.9420	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9422	f0 2e		beq $9452			beq 	_CPTab
.9424	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9426	f0 26		beq $944e			beq 	_CPNewLine
.9428	88		dey				dey 								; undo the get.
.9429	a2 00		ldx #$00			ldx 	#0
.942b	20 fb a5	jsr $a5fb			jsr 	EvaluateValue 				; get a value into slot 0
.942e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9431	29 10		and #$10			and 	#NSBIsString
.9433	f0 0b		beq $9440			beq 	_CPNumber
.9435	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9438	ad 08 04	lda $0408			lda 	NSMantissa0
.943b	20 e2 9a	jsr $9ae2			jsr 	PrintStringXA
.943e	80 cc		bra $940c			bra 	Command_Print 				; loop round clearing carry so NL if end
.9440					_CPNumber:
.9440	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9442	20 d1 a4	jsr $a4d1			jsr 	ConvertNumberToString 		; convert to string
.9445	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9447	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.9449	20 e2 9a	jsr $9ae2			jsr 	PrintStringXA
.944c	80 be		bra $940c			bra 	Command_Print 				; loop round clearing carry so NL if end
.944e					_CPNewLine:
.944e	a9 0d		lda #$0d			lda 	#13
.9450	80 02		bra $9454			bra 	_CPPrintChar
.9452					_CPTab:
.9452	a9 09		lda #$09			lda 	#9 							; print TAB
.9454					_CPPrintChar:
.9454	20 ae b6	jsr $b6ae			jsr 	EXTPrintCharacter
.9457					_CPContinueWithSameLine:
.9457	38		sec				sec 								; loop round with carry set, which
.9458	80 b3		bra $940d			bra 	_CPLoop 					; will inhibit final CR
.945a					_CPExit:
.945a	28		plp				plp 								; get last action flag
.945b	b0 05		bcs $9462			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.945d	a9 0d		lda #$0d			lda 	#13 						; print new line
.945f	20 ae b6	jsr $b6ae			jsr 	EXTPrintCharacter
.9462					_CPExit2:
.9462	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9463					CallProcedure:
.9463	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9465	b1 30		lda ($30),y			lda 	(codePtr),y
.9467	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9469	f0 0c		beq $9477			beq 	_CPEndParam
.946b					_CPParamLoop:
.946b	20 fb a5	jsr $a5fb			jsr 	EvaluateValue 				; get parameter onto stack
.946e	e8		inx				inx 								; bump next stack
.946f	b1 30		lda ($30),y			lda 	(codePtr),y
.9471	c8		iny				iny
.9472	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9474	f0 f5		beq $946b			beq 	_CPParamLoop
.9476	88		dey				dey 								; unpick.
.9477					_CPEndParam:
.9477	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.947a	c8		iny				iny									; skip right bracket
.947b	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.947d	20 78 a7	jsr $a778			jsr 	StackOpen
.9480	20 bc a7	jsr $a7bc			jsr 	STKSaveCodePosition 		; save loop position
.9483	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9486	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9488	ad 10 04	lda $0410			lda 	NSMantissa1
.948b	85 37		sta $37				sta 	zTemp0+1
.948d	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.948f	b2 36		lda ($36)			lda 	(zTemp0)
.9491	85 30		sta $30				sta 	safePtr
.9493	b1 36		lda ($36),y			lda 	(zTemp0),y
.9495	85 31		sta $31				sta 	safePtr+1
.9497	c8		iny				iny
.9498	b1 36		lda ($36),y			lda 	(zTemp0),y
.949a	85 32		sta $32				sta 	safePtr+2
.949c	c8		iny				iny
.949d	b1 36		lda ($36),y			lda 	(zTemp0),y
.949f	85 33		sta $33				sta 	safePtr+3
.94a1	c8		iny				iny 								; get Y offset -> Y
.94a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.94a4	a8		tay				tay
.94a5	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.94a7	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.94aa	f0 13		beq $94bf			beq 	_ParamExit 					; if so, exit.
.94ac					_ParamExtract:
.94ac	ca		dex				dex 								; put a local term on the level before
.94ad	20 8c 93	jsr $938c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.94b0	20 c7 92	jsr $92c7			jsr 	AssignVariable 				; assign stacked value to the variable.
.94b3	e8		inx				inx 								; advance to next parameter to do.
.94b4	e8		inx				inx
.94b5	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.94b8	f0 05		beq $94bf			beq 	_ParamExit
.94ba	20 0f af	jsr $af0f			jsr 	CheckComma 					; comma seperating parameters
.94bd	80 ed		bra $94ac			bra 	_ParamExtract
.94bf					_ParamExit:
.94bf	20 07 af	jsr $af07			jsr 	CheckRightBracket 			; check )
.94c2	60		rts				rts 								; and continue from here
.aef9					Command_ENDPROC:
.aef9	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.aefb	a2 14		ldx #$14			ldx 	#ERRID_PROC
.aefd	20 a4 a7	jsr $a7a4			jsr 	StackCheckFrame
.af00	20 cd a7	jsr $a7cd			jsr 	STKLoadCodePosition 		; restore code position
.af03	20 96 a7	jsr $a796			jsr 	StackClose
.af06	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.94c3					Command_Read:
.94c3	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.94c5	20 6b a1	jsr $a16b			jsr 	EvaluateTerm
.94c8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.94cb	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.94cd	f0 4a		beq $9519			beq 	_CRSyntax 					; check reference (bit 0)
.94cf	20 62 95	jsr $9562			jsr 	SwapDataCodePtrs 			; swap code and data
.94d2	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.94d5	d0 20		bne $94f7			bne 	_CRContinueData
.94d7					_CRKeepSearching:
.94d7	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.94d9	aa		tax				tax
.94da	20 e4 99	jsr $99e4			jsr 	ScanForward
.94dd	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.94df	f0 16		beq $94f7			beq 	_CRHaveData 				; found it
.94e1	18		clc				clc
.94e2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94e4	65 30		adc $30				adc 	codePtr
.94e6	85 30		sta $30				sta 	codePtr
.94e8	90 02		bcc $94ec			bcc 	_CREExit
.94ea	e6 31		inc $31				inc 	codePtr+1
.94ec					_CREExit:
.94ec	a0 03		ldy #$03			ldy 	#3 							; start of line.
.94ee	b2 30		lda ($30)			lda 	(codePtr)
.94f0	d0 e5		bne $94d7			bne 	_CRKeepSearching
.94f2	a9 0b		lda #$0b		lda	#11
.94f4	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.94f7					_CRHaveData:
.94f7					_CRContinueData:
.94f7	a2 01		ldx #$01			ldx 	#1
.94f9	20 fb a5	jsr $a5fb			jsr 	EvaluateValue 				; evaluate value into slot # 1
.94fc	ca		dex				dex
.94fd	20 c7 92	jsr $92c7			jsr		AssignVariable 				; do the assignment
.9500	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9503	b1 30		lda ($30),y			lda 	(codePtr),y
.9505	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9507	d0 04		bne $950d			bne 	_CRSwapBack
.9509	c8		iny				iny 								; consume comma
.950a	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.950d					_CRSwapBack:
.950d	20 62 95	jsr $9562			jsr 	SwapDataCodePtrs			; swap them back.
.9510	b1 30		lda ($30),y			lda 	(codePtr),y
.9512	c8		iny				iny
.9513	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9515	f0 ac		beq $94c3			beq 	Command_Read 				; if so go round again.
.9517	88		dey				dey 								; unpick get.
.9518	60		rts				rts
.9519					_CRSyntax:
.9519	4c f5 b4	jmp $b4f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.951c					RemCommand:
.951c	b1 30		lda ($30),y			lda 	(codePtr),y
.951e	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9520	d0 06		bne $9528			bne 	_RMExit
.9522	c8		iny				iny
.9523	98		tya				tya
.9524	38		sec				sec
.9525	71 30		adc ($30),y			adc 	(codePtr),y
.9527	a8		tay				tay
.9528					_RMExit:
.9528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9529					Command_REPEAT:
.9529	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.952b	20 78 a7	jsr $a778			jsr 	StackOpen
.952e	20 bc a7	jsr $a7bc			jsr 	STKSaveCodePosition 		; save loop position
.9531	60		rts				rts
.9532					Command_UNTIL:
.9532	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9534	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9536	20 a4 a7	jsr $a7a4			jsr 	StackCheckFrame
.9539	a2 00		ldx #$00			ldx 	#0
.953b	20 04 a6	jsr $a604			jsr 	EvaluateNumber 				; work out the number
.953e	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; check if zero
.9541	f0 04		beq $9547			beq 	_CULoopBack 				; if so keep looping
.9543	20 96 a7	jsr $a796			jsr 	StackClose		 			; return
.9546	60		rts				rts
.9547					_CULoopBack:
.9547	20 cd a7	jsr $a7cd			jsr 	STKLoadCodePosition 		; loop back
.954a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.954b					Command_Restore:
.954b	20 62 95	jsr $9562			jsr 	SwapDataCodePtrs 			; swap code and data
.954e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9550	85 30		sta $30				sta 	codePtr
.9552	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9554	85 31		sta $31				sta 	codePtr+1
.9556	20 62 95	jsr $9562			jsr 	SwapDataCodePtrs 			; put them back
.9559	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.955b	8d 9b 04	sta $049b			sta 	dataPointer+4
.955e	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9561	60		rts				rts
.9562					SwapDataCodePtrs:
.9562	da		phx				phx
.9563	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9565					_SDCPLoop:
.9565	b5 30		lda $30,x			lda 	safePtr,x
.9567	48		pha				pha
.9568	bd 97 04	lda $0497,x			lda 	dataPointer,x
.956b	95 30		sta $30,x			sta 	safePtr,x
.956d	68		pla				pla
.956e	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9571	ca		dex				dex
.9572	10 f1		bpl $9565			bpl 	_SDCPLoop
.9574	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9577	8c 9b 04	sty $049b			sty 	dataPointer+4
.957a	a8		tay				tay
.957b	fa		plx				plx
.957c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.957d					CommandRUN:
.957d	20 c2 8c	jsr $8cc2			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9580	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9582	85 30		sta $30				sta 	codePtr
.9584	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9586	85 31		sta $31				sta 	codePtr+1
.9588					RUNNewLine:
.9588	b2 30		lda ($30)			lda 	(codePtr)
.958a	f0 5e		beq $95ea			beq 	CRNoProgram         		; no then END.
.958c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.958e	9a		txs				txs
.958f					RUNCodePointerLine:
.958f	a0 02		ldy #$02			ldy 	#2 							; start of program
.9591					_CRIncMainLoop:
.9591	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9594	d0 05		bne $959b			bne 	_CRNoBreakCheck
.9596	20 ef b6	jsr $b6ef			jsr 	EXTBreakCheck 				; break check
.9599	f0 4a		beq $95e5			beq 	_CRBreak
.959b					_CRNoBreakCheck:
.959b	c8		iny				iny
.959c					_CRMainLoop:
.959c	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.959f	b1 30		lda ($30),y			lda 	(codePtr),y
.95a1	10 10		bpl $95b3			bpl 	_CRNotKeyword
.95a3	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95a5	b0 04		bcs $95ab			bcs 	_CRIsKeyword
.95a7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.95a9	b0 34		bcs $95df			bcs		_CRSyntaxError
.95ab					_CRIsKeyword:
.95ab	c8		iny				iny 								; consume command
.95ac	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.95ad	aa		tax				tax 								; put in X for vector jump
.95ae	20 e2 95	jsr $95e2			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.95b1	80 e9		bra $959c			bra 	_CRMainLoop 				; and loop round
.95b3					_CRNotKeyword:
.95b3	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.95b5	f0 da		beq $9591			beq 	_CRIncMainLoop
.95b7	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.95b9	90 05		bcc $95c0			bcc 	_CRNotVariable
.95bb					_CRGoLet:
.95bb	20 8b 92	jsr $928b			jsr 	LetCommand
.95be	80 dc		bra $959c			bra 	_CRMainLoop
.95c0					_CRNotVariable:
.95c0	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.95c2	f0 f7		beq $95bb			beq 	_CRGoLet
.95c4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.95c6	f0 f3		beq $95bb			beq 	_CRGoLet
.95c8	c9 21		cmp #$21			cmp 	#KWD_PLING
.95ca	f0 ef		beq $95bb			beq 	_CRGoLet
.95cc	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.95ce	f0 09		beq $95d9			beq 	_CRGoRem
.95d0	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.95d2	d0 0b		bne $95df			bne 	_CRSyntaxError
.95d4	20 62 8b	jsr $8b62			jsr 	LabelHere
.95d7	80 c3		bra $959c			bra 	_CRMainLoop
.95d9					_CRGoRem:
.95d9	c8		iny				iny
.95da	20 1c 95	jsr $951c			jsr 	RemCommand
.95dd	80 bd		bra $959c			bra 	_CRMainLoop
.95df					_CRSyntaxError:
.95df	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.95e2					_CRCallVector0:
.95e2	7c 8e 96	jmp ($968e,x)			jmp 	(VectorSet0,x)
.95e5					_CRBreak:
.95e5	a9 01		lda #$01		lda	#1
.95e7	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.95ea					CRNoProgram:
.95ea	4c e5 8d	jmp $8de5			jmp 	EndCommand
.95ed					EOLCommand:
.95ed	18		clc				clc
.95ee	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.95f0	65 30		adc $30				adc 	codePtr
.95f2	85 30		sta $30				sta 	codePtr
.95f4	90 02		bcc $95f8			bcc 	_CREExit
.95f6	e6 31		inc $31				inc 	codePtr+1
.95f8					_CREExit:
.95f8	80 8e		bra $9588			bra 	RunNewLine
.95fa					Shift1Command:
.95fa	b1 30		lda ($30),y			lda 	(codePtr),y
.95fc	c8		iny				iny
.95fd	0a		asl a				asl 	a
.95fe	aa		tax				tax
.95ff	7c 26 97	jmp ($9726,x)			jmp 	(VectorSet1,x)
.9602					Shift2Command:
.9602	b1 30		lda ($30),y			lda 	(codePtr),y
.9604	c8		iny				iny
.9605	0a		asl a				asl 	a
.9606	aa		tax				tax
.9607	7c 40 97	jmp ($9740,x)			jmp 	(VectorSet2,x)
.960a					Unused1:
.960a					Unused2:
.960a					Unused3:
.960a					Unused4:
.960a	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
>960d							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.960e					VectorSetPunc:
>960e	33 9c					.word	ShiftLeft                        ; $00 <<
>9610	2d 9b					.word	BinaryCompareLessEqual           ; $01 <=
>9612	23 9b					.word	BinaryCompareNotEqual            ; $02 <>
>9614	f5 b4					.word	SyntaxError                      ; $03 !!3
>9616	f5 b4					.word	SyntaxError                      ; $04 ><
>9618	37 9b					.word	BinaryCompareGreaterEqual        ; $05 >=
>961a	36 9c					.word	ShiftRight                       ; $06 >>
>961c	f5 b4					.word	SyntaxError                      ; $07 !!7
>961e	f5 b4					.word	SyntaxError                      ; $08 !!8
>9620	f5 b4					.word	SyntaxError                      ; $09 !!9
>9622	f5 b4					.word	SyntaxError                      ; $0a !!10
>9624	f5 b4					.word	SyntaxError                      ; $0b !!11
>9626	f5 b4					.word	SyntaxError                      ; $0c !!12
>9628	f5 b4					.word	SyntaxError                      ; $0d !!13
>962a	f5 b4					.word	SyntaxError                      ; $0e !!14
>962c	f5 b4					.word	SyntaxError                      ; $0f !!15
>962e	f5 b4					.word	SyntaxError                      ; $10 @
>9630	f5 b4					.word	SyntaxError                      ; $11 !!17
>9632	f5 b4					.word	SyntaxError                      ; $12 !!18
>9634	f5 b4					.word	SyntaxError                      ; $13 [
>9636	20 af					.word	IntegerDivide                    ; $14 \
>9638	f5 b4					.word	SyntaxError                      ; $15 ]
>963a	c4 9d					.word	EorInteger                       ; $16 ^
>963c	f5 b4					.word	SyntaxError                      ; $17 _
>963e	f5 b4					.word	SyntaxError                      ; $18 `
>9640	f5 b4					.word	SyntaxError                      ; $19 !!25
>9642	f5 b4					.word	SyntaxError                      ; $1a !!26
>9644	f5 b4					.word	SyntaxError                      ; $1b {
>9646	7e 9d					.word	OraInteger                       ; $1c |
>9648	f5 b4					.word	SyntaxError                      ; $1d }
>964a	f5 b4					.word	SyntaxError                      ; $1e ~
>964c	f5 b4					.word	SyntaxError                      ; $1f [7m<7F>[m
>964e	f5 b4					.word	SyntaxError                      ; $20
>9650	0a 9e					.word	WordIndirect                     ; $21 !
>9652	f5 b4					.word	SyntaxError                      ; $22 "
>9654	f5 b4					.word	SyntaxError                      ; $23 #
>9656	f5 b4					.word	SyntaxError                      ; $24 $
>9658	6d af					.word	IntegerModulus                   ; $25 %
>965a	38 9d					.word	AndInteger                       ; $26 &
>965c	f5 b4					.word	SyntaxError                      ; $27 '
>965e	f5 b4					.word	SyntaxError                      ; $28 (
>9660	f5 b4					.word	SyntaxError                      ; $29 )
>9662	e2 af					.word	MulInteger                       ; $2a *
>9664	ca 9c					.word	AddInteger                       ; $2b +
>9666	f5 b4					.word	SyntaxError                      ; $2c ,
>9668	0d 9d					.word	SubInteger                       ; $2d -
>966a	f5 b4					.word	SyntaxError                      ; $2e .
>966c	81 b1					.word	FDivideCommand                   ; $2f /
>966e	f5 b4					.word	SyntaxError                      ; $30 0
>9670	f5 b4					.word	SyntaxError                      ; $31 1
>9672	f5 b4					.word	SyntaxError                      ; $32 2
>9674	f5 b4					.word	SyntaxError                      ; $33 3
>9676	f5 b4					.word	SyntaxError                      ; $34 4
>9678	f5 b4					.word	SyntaxError                      ; $35 5
>967a	f5 b4					.word	SyntaxError                      ; $36 6
>967c	f5 b4					.word	SyntaxError                      ; $37 7
>967e	f5 b4					.word	SyntaxError                      ; $38 8
>9680	f5 b4					.word	SyntaxError                      ; $39 9
>9682	f5 b4					.word	SyntaxError                      ; $3a :
>9684	f5 b4					.word	SyntaxError                      ; $3b ;
>9686	0f 9b					.word	BinaryCompareLess                ; $3c <
>9688	05 9b					.word	BinaryCompareEqual               ; $3d =
>968a	19 9b					.word	BinaryCompareGreater             ; $3e >
>968c	31 9e					.word	ByteIndirect                     ; $3f ?
.968e					VectorSet0:
>968e	ed 95					.word	EOLCommand                       ; $80 !0:EOF
>9690	fa 95					.word	Shift1Command                    ; $81 !1:SH1
>9692	02 96					.word	Shift2Command                    ; $82 !2:SH2
>9694	c7 b2					.word	AbsUnary                         ; $83 ABS(
>9696	01 a3					.word	AllocUnary                       ; $84 ALLOC(
>9698	d7 b2					.word	AscUnary                         ; $85 ASC(
>969a	82 a4					.word	ChrUnary                         ; $86 CHR$(
>969c	e8 8d					.word	UnaryEvent                       ; $87 EVENT(
>969e	01 9b					.word	UnaryFalse                       ; $88 FALSE
>96a0	e4 b2					.word	FracUnary                        ; $89 FRAC(
>96a2	00 92					.word	UnaryHit                         ; $8a HIT(
>96a4	fa b2					.word	IntUnary                         ; $8b INT(
>96a6	50 b3					.word	IsValUnary                       ; $8c ISVAL(
>96a8	77 92					.word	UnaryJoyB                        ; $8d JOYB(
>96aa	50 92					.word	UnaryJoyX                        ; $8e JOYX(
>96ac	53 92					.word	UnaryJoyY                        ; $8f JOYY(
>96ae	5c a5					.word	Unary_Left                       ; $90 LEFT$(
>96b0	0c b3					.word	LenUnary                         ; $91 LEN(
>96b2	75 a3					.word	Unary_Max                        ; $92 MAX(
>96b4	86 a5					.word	Unary_Mid                        ; $93 MID$(
>96b6	71 a3					.word	Unary_Min                        ; $94 MIN(
>96b8	cc a3					.word	Unary_Not                        ; $95 NOT(
>96ba	e2 a3					.word	Unary_Random                     ; $96 RANDOM(
>96bc	6c a5					.word	Unary_Right                      ; $97 RIGHT$(
>96be	01 a4					.word	Unary_Rnd                        ; $98 RND(
>96c0	26 b3					.word	SgnUnary                         ; $99 SGN(
>96c2	94 a4					.word	SpcUnary                         ; $9a SPC(
>96c4	af a4					.word	Unary_Str                        ; $9b STR$(
>96c6	cd 97					.word	UnaryTimer                       ; $9c TIMER(
>96c8	f5 9a					.word	UnaryTrue                        ; $9d TRUE
>96ca	46 b3					.word	ValUnary                         ; $9e VAL(
>96cc	51 8e					.word	ForCommand                       ; $9f FOR
>96ce	26 92					.word	IfCommand                        ; $a0 IF
>96d0	0a 96					.word	Unused1                          ; $a1 PROC
>96d2	29 95					.word	Command_REPEAT                   ; $a2 REPEAT
>96d4	5a 9a					.word	Command_WHILE                    ; $a3 WHILE
>96d6	4f 92					.word	EndIf                            ; $a4 ENDIF
>96d8	f9 ae					.word	Command_ENDPROC                  ; $a5 ENDPROC
>96da	0b 8f					.word	NextCommand                      ; $a6 NEXT
>96dc	0a 96					.word	Unused4                          ; $a7 THEN
>96de	32 95					.word	Command_UNTIL                    ; $a8 UNTIL
>96e0	7b 9a					.word	Command_WEND                     ; $a9 WEND
>96e2	f5 b4					.word	SyntaxError                      ; $aa BY
>96e4	88 8c					.word	CallCommand                      ; $ab CALL
>96e6	68 8f					.word	CircleCommand                    ; $ac CIRCLE
>96e8	c2 8c					.word	ClearCommand                     ; $ad CLEAR
>96ea	1a 8d					.word	ClearScreen                      ; $ae CLS
>96ec	f5 b4					.word	SyntaxError                      ; $af COLOR
>96ee	f5 b4					.word	SyntaxError                      ; $b0 COLOUR
>96f0	20 8d					.word	Command_Data                     ; $b1 DATA
>96f2	28 8d					.word	DimCommand                       ; $b2 DIM
>96f4	0a 96					.word	Unused3                          ; $b3 DOWNTO
>96f6	48 92					.word	ElseCode                         ; $b4 ELSE
>96f8	f5 b4					.word	SyntaxError                      ; $b5 FROM
>96fa	94 91					.word	GfxCommand                       ; $b6 GFX
>96fc	c6 91					.word	Command_GOSUB                    ; $b7 GOSUB
>96fe	e4 91					.word	GotoCommand                      ; $b8 GOTO
>9700	f5 b4					.word	SyntaxError                      ; $b9 HERE
>9702	92 8f					.word	ImageCommand                     ; $ba IMAGE
>9704	8b 92					.word	LetCommand                       ; $bb LET
>9706	e7 8f					.word	LineCommand                      ; $bc LINE
>9708	7e 93					.word	Command_LOCAL                    ; $bd LOCAL
>970a	f5 b4					.word	SyntaxError                      ; $be OFF
>970c	f5 b4					.word	SyntaxError                      ; $bf ON
>970e	f5 b4					.word	SyntaxError                      ; $c0 OUTLINE
>9710	f5 b4					.word	SyntaxError                      ; $c1 PALETTE
>9712	e0 8f					.word	PlotCommand                      ; $c2 PLOT
>9714	0c 94					.word	Command_Print                    ; $c3 PRINT
>9716	c3 94					.word	Command_Read                     ; $c4 READ
>9718	64 8f					.word	RectangleCommand                 ; $c5 RECT
>971a	1c 95					.word	RemCommand                       ; $c6 REM
>971c	d6 91					.word	Command_RETURN                   ; $c7 RETURN
>971e	f5 b4					.word	SyntaxError                      ; $c8 SOLID
>9720	73 8f					.word	SpriteCommand                    ; $c9 SPRITE
>9722	af 8f					.word	TextCommand                      ; $ca TEXT
>9724	0a 96					.word	Unused2                          ; $cb TO
.9726					VectorSet1:
>9726	f5 b4					.word	SyntaxError                      ; $80 !0:EOF
>9728	f5 b4					.word	SyntaxError                      ; $81 !1:SH1
>972a	f5 b4					.word	SyntaxError                      ; $82 !2:SH2
>972c	59 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>972e	78 8c					.word	AssertCommand                    ; $84 ASSERT
>9730	34 91					.word	BitmapCtrl                       ; $85 BITMAP
>9732	e5 8d					.word	EndCommand                       ; $86 END
>9734	e0 92					.word	Command_List                     ; $87 LIST
>9736	02 94					.word	NewCommand                       ; $88 NEW
>9738	4b 95					.word	Command_Restore                  ; $89 RESTORE
>973a	7d 95					.word	CommandRUN                       ; $8a RUN
>973c	79 91					.word	SpritesCtrl                      ; $8b SPRITES
>973e	c8 97					.word	StopCommand                      ; $8c STOP
.9740					VectorSet2:
>9740	f5 b4					.word	SyntaxError                      ; $80 !0:EOF
>9742	f5 b4					.word	SyntaxError                      ; $81 !1:SH1
>9744	f5 b4					.word	SyntaxError                      ; $82 !2:SH2
>9746	b4 b3					.word	Assemble_adc                     ; $83 ADC
>9748	ac b3					.word	Assemble_and                     ; $84 AND
>974a	c8 b3					.word	Assemble_asl                     ; $85 ASL
>974c	32 b4					.word	Assemble_bcc                     ; $86 BCC
>974e	36 b4					.word	Assemble_bcs                     ; $87 BCS
>9750	3e b4					.word	Assemble_beq                     ; $88 BEQ
>9752	f5 b3					.word	Assemble_bit                     ; $89 BIT
>9754	26 b4					.word	Assemble_bmi                     ; $8a BMI
>9756	3a b4					.word	Assemble_bne                     ; $8b BNE
>9758	22 b4					.word	Assemble_bpl                     ; $8c BPL
>975a	42 b4					.word	Assemble_bra                     ; $8d BRA
>975c	46 b4					.word	Assemble_brk                     ; $8e BRK
>975e	2a b4					.word	Assemble_bvc                     ; $8f BVC
>9760	2e b4					.word	Assemble_bvs                     ; $90 BVS
>9762	4e b4					.word	Assemble_clc                     ; $91 CLC
>9764	a2 b4					.word	Assemble_cld                     ; $92 CLD
>9766	62 b4					.word	Assemble_cli                     ; $93 CLI
>9768	92 b4					.word	Assemble_clv                     ; $94 CLV
>976a	c0 b3					.word	Assemble_cmp                     ; $95 CMP
>976c	09 b4					.word	Assemble_cpx                     ; $96 CPX
>976e	04 b4					.word	Assemble_cpy                     ; $97 CPY
>9770	e6 b3					.word	Assemble_dec                     ; $98 DEC
>9772	9e b4					.word	Assemble_dex                     ; $99 DEX
>9774	7a b4					.word	Assemble_dey                     ; $9a DEY
>9776	b0 b3					.word	Assemble_eor                     ; $9b EOR
>9778	eb b3					.word	Assemble_inc                     ; $9c INC
>977a	ae b4					.word	Assemble_inx                     ; $9d INX
>977c	9a b4					.word	Assemble_iny                     ; $9e INY
>977e	1d b4					.word	Assemble_jmp                     ; $9f JMP
>9780	18 b4					.word	Assemble_jsr                     ; $a0 JSR
>9782	bc b3					.word	Assemble_lda                     ; $a1 LDA
>9784	e1 b3					.word	Assemble_ldx                     ; $a2 LDX
>9786	ff b3					.word	Assemble_ldy                     ; $a3 LDY
>9788	d2 b3					.word	Assemble_lsr                     ; $a4 LSR
>978a	b2 b4					.word	Assemble_nop                     ; $a5 NOP
>978c	a8 b3					.word	Assemble_ora                     ; $a6 ORA
>978e	5e b4					.word	Assemble_pha                     ; $a7 PHA
>9790	4a b4					.word	Assemble_php                     ; $a8 PHP
>9792	a6 b4					.word	Assemble_phx                     ; $a9 PHX
>9794	66 b4					.word	Assemble_phy                     ; $aa PHY
>9796	6e b4					.word	Assemble_pla                     ; $ab PLA
>9798	52 b4					.word	Assemble_plp                     ; $ac PLP
>979a	ba b4					.word	Assemble_plx                     ; $ad PLX
>979c	76 b4					.word	Assemble_ply                     ; $ae PLY
>979e	cd b3					.word	Assemble_rol                     ; $af ROL
>97a0	d7 b3					.word	Assemble_ror                     ; $b0 ROR
>97a2	5a b4					.word	Assemble_rti                     ; $b1 RTI
>97a4	6a b4					.word	Assemble_rts                     ; $b2 RTS
>97a6	c4 b3					.word	Assemble_sbc                     ; $b3 SBC
>97a8	56 b4					.word	Assemble_sec                     ; $b4 SEC
>97aa	b6 b4					.word	Assemble_sed                     ; $b5 SED
>97ac	72 b4					.word	Assemble_sei                     ; $b6 SEI
>97ae	b8 b3					.word	Assemble_sta                     ; $b7 STA
>97b0	aa b4					.word	Assemble_stp                     ; $b8 STP
>97b2	dc b3					.word	Assemble_stx                     ; $b9 STX
>97b4	fa b3					.word	Assemble_sty                     ; $ba STY
>97b6	f0 b3					.word	Assemble_stz                     ; $bb STZ
>97b8	8e b4					.word	Assemble_tax                     ; $bc TAX
>97ba	8a b4					.word	Assemble_tay                     ; $bd TAY
>97bc	13 b4					.word	Assemble_trb                     ; $be TRB
>97be	0e b4					.word	Assemble_tsb                     ; $bf TSB
>97c0	96 b4					.word	Assemble_tsx                     ; $c0 TSX
>97c2	7e b4					.word	Assemble_txa                     ; $c1 TXA
>97c4	86 b4					.word	Assemble_txs                     ; $c2 TXS
>97c6	82 b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.97c8					StopCommand:
.97c8	a9 08		lda #$08		lda	#8
.97ca	4c 89 9a	jmp $9a89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.97cd					UnaryTimer:
.97cd	fa		plx				plx
.97ce	20 07 af	jsr $af07			jsr 	CheckRightBracket
.97d1					TimerToStackX:
.97d1	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero 					; zero result
.97d4	64 01		stz $01				stz 	1 							; access I/O
.97d6	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.97d9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97dc	ad 5a d6	lda $d65a			lda 	$D65A
.97df	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97e2	ad 5b d6	lda $d65b			lda 	$D65B
.97e5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.97e9					ListConvertLine:
.97e9	9c 9d 04	stz $049d			stz 	tbOffset
.97ec	9c aa 04	stz $04aa			stz 	tokenBuffer
.97ef	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.97f1	b1 30		lda ($30),y			lda 	(codePtr),y
.97f3	aa		tax				tax
.97f4	88		dey				dey
.97f5	b1 30		lda ($30),y			lda 	(codePtr),y
.97f7	20 63 b0	jsr $b063			jsr 	ConvertInt16
.97fa	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.97fc	86 37		stx $37				stx 	zTemp0+1
.97fe	a0 00		ldy #$00			ldy 	#0
.9800					_LCCopyNumber:
.9800	b1 36		lda ($36),y			lda 	(zTemp0),y
.9802	20 2e 99	jsr $992e			jsr 	LCLWrite
.9805	c8		iny				iny
.9806	b1 36		lda ($36),y			lda 	(zTemp0),y
.9808	d0 f6		bne $9800			bne 	_LCCopyNumber
.980a	20 47 9a	jsr $9a47			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.980d	48		pha				pha 								; save on stack
.980e	10 0c		bpl $981c			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9810	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9811	6d a6 04	adc $04a6			adc 	listIndent
.9814	8d a6 04	sta $04a6			sta 	listIndent
.9817	10 03		bpl $981c			bpl 	_LCNoAdjust
.9819	9c a6 04	stz $04a6			stz 	listIndent
.981c					_LCNoAdjust:
.981c	18		clc				clc		 							; work out actual indent.
.981d	ad a6 04	lda $04a6			lda 	listIndent
.9820	0a		asl a				asl 	a
.9821	69 06		adc #$06			adc 	#6
.9823	85 36		sta $36				sta 	zTemp0
.9825					_LCPadOut:
.9825	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9827	20 2e 99	jsr $992e			jsr 	LCLWrite
.982a	ad 9d 04	lda $049d			lda 	tbOffset
.982d	c5 36		cmp $36				cmp 	zTemp0
.982f	d0 f4		bne $9825			bne 	_LCPadOut
.9831	a0 03		ldy #$03			ldy 	#3 							; start position.
.9833					_LCMainLoop:
.9833	b1 30		lda ($30),y			lda 	(codePtr),y
.9835	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9837	f0 17		beq $9850			beq 	_LCExit
.9839	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.983b	90 1e		bcc $985b			bcc 	_LCDoubles
.983d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.983f	90 2a		bcc $986b			bcc 	_LCShiftPunc
.9841	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9843	90 35		bcc $987a			bcc 	_LCPunctuation
.9845	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9847	90 3e		bcc $9887			bcc 	_LCIdentifiers
.9849	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.984b	90 5a		bcc $98a7			bcc 	_LCTokens
.984d	4c 02 99	jmp $9902			jmp 	_LCData 					; 254-5 are data objects
.9850					_LCExit:
.9850	68		pla				pla 								; get old indent adjust
.9851	30 07		bmi $985a			bmi 	_LCExit2
.9853	18		clc				clc 								; add to indent if +ve
.9854	6d a6 04	adc $04a6			adc 	listIndent
.9857	8d a6 04	sta $04a6			sta 	listIndent
.985a					_LCExit2:
.985a	60		rts				rts
.985b					_LCDoubles:
.985b	48		pha				pha
.985c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.985d	29 02		and #$02			and 	#2
.985f	09 3c		ora #$3c			ora 	#60 						; make < >
.9861	20 2e 99	jsr $992e			jsr 	LCLWrite
.9864	68		pla				pla 								; restore, do lower bit
.9865	29 03		and #$03			and 	#3
.9867	09 3c		ora #$3c			ora 	#60
.9869	80 0f		bra $987a			bra		_LCPunctuation 				; print, increment, loop
.986b					_LCShiftPunc:
.986b	aa		tax				tax 								; save in X
.986c	29 07		and #$07			and 	#7 							; lower 3 bits
.986e	f0 02		beq $9872			beq 	_LCNoAdd
.9870	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9872					_LCNoAdd:
.9872	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9874	90 02		bcc $9878			bcc 	_LCNoAdd2
.9876	09 20		ora #$20			ora 	#32 						; adds $20
.9878					_LCNoAdd2:
.9878	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.987a					_LCPunctuation:
.987a	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.987c	d0 03		bne $9881			bne 	_LCPContinue
.987e	20 3d 99	jsr $993d			jsr 	LCDeleteLastSpace
.9881					_LCPContinue:
.9881	c8		iny				iny 								; consume character
.9882	20 2e 99	jsr $992e			jsr 	LCLWrite 					; write it out.
.9885	80 ac		bra $9833			bra 	_LCMainLoop 				; go round again.
.9887					_LCIdentifiers:
.9887	18		clc				clc 								; convert to physical address
.9888	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.988a	85 37		sta $37				sta 	zTemp0+1
.988c	c8		iny				iny
.988d	b1 30		lda ($30),y			lda 	(codePtr),y
.988f	85 36		sta $36				sta 	zTemp0
.9891	c8		iny				iny
.9892	5a		phy				phy 								; save position
.9893	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9895					_LCOutIdentifier:
.9895	c8		iny				iny
.9896	b1 36		lda ($36),y			lda 	(zTemp0),y
.9898	29 7f		and #$7f			and 	#$7F
.989a	20 7c 99	jsr $997c			jsr 	LCLLowerCase
.989d	20 2e 99	jsr $992e			jsr 	LCLWrite
.98a0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.98a2	10 f1		bpl $9895			bpl 	_LCOutIdentifier
.98a4	7a		ply				ply 								; restore position
.98a5	80 8c		bra $9833			bra 	_LCMainLoop
.98a7					_LCTokens:
.98a7	aa		tax				tax 								; token in X
.98a8	a9 b3		lda #$b3			lda 	#((KeywordSet2) & $FF)
.98aa	85 36		sta $36				sta 	0+zTemp0
.98ac	a9 aa		lda #$aa			lda 	#((KeywordSet2) >> 8)
.98ae	85 37		sta $37				sta 	1+zTemp0
.98b0	e0 82		cpx #$82			cpx 	#$82
.98b2	f0 16		beq $98ca			beq 	_LCUseShift
.98b4	a9 65		lda #$65			lda 	#((KeywordSet1) & $FF)
.98b6	85 36		sta $36				sta 	0+zTemp0
.98b8	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.98ba	85 37		sta $37				sta 	1+zTemp0
.98bc	e0 81		cpx #$81			cpx 	#$81
.98be	f0 0a		beq $98ca			beq 	_LCUseShift
.98c0	a9 80		lda #$80			lda 	#((KeywordSet0) & $FF)
.98c2	85 36		sta $36				sta 	0+zTemp0
.98c4	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.98c6	85 37		sta $37				sta 	1+zTemp0
.98c8	80 01		bra $98cb			bra 	_LCNoShift
.98ca					_LCUseShift:
.98ca	c8		iny				iny
.98cb					_LCNoShift:
.98cb	20 51 99	jsr $9951			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.98ce	b1 30		lda ($30),y			lda 	(codePtr),y
.98d0	aa		tax				tax 								; into X
.98d1					_LCFindText:
.98d1	ca		dex				dex
.98d2	10 0e		bpl $98e2			bpl 	_LCFoundText 				; found text.
.98d4	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.98d6	1a		inc a				inc 	a 							; one extra for size
.98d7	38		sec				sec 								; one extra for checksum
.98d8	65 36		adc $36				adc 	zTemp0 						; go to next token
.98da	85 36		sta $36				sta 	zTemp0
.98dc	90 f3		bcc $98d1			bcc 	_LCFindText
.98de	e6 37		inc $37				inc 	zTemp0+1
.98e0	80 ef		bra $98d1			bra 	_LCFindText
.98e2					_LCFoundText:
.98e2	5a		phy				phy 								; save List position
.98e3	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.98e5	aa		tax				tax
.98e6	a0 02		ldy #$02			ldy 	#2
.98e8					_LCCopyToken:
.98e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.98ea	20 7c 99	jsr $997c			jsr 	LCLLowerCase
.98ed	20 2e 99	jsr $992e			jsr 	LCLWrite
.98f0	c8		iny				iny
.98f1	ca		dex				dex
.98f2	d0 f4		bne $98e8			bne 	_LCCopyToken
.98f4	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.98f6	f0 05		beq $98fd			beq 	_LCNoSpace
.98f8	a9 20		lda #$20			lda 	#' '
.98fa	20 2e 99	jsr $992e			jsr 	LCLWrite
.98fd					_LCNoSpace:
.98fd	7a		ply				ply 								; restore position.
.98fe	c8		iny				iny 								; consume token
.98ff	4c 33 98	jmp $9833			jmp 	_LCMainLoop 				; and go around again.
.9902					_LCData:
.9902	48		pha				pha 								; save type $FE/$FF
.9903	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9905	c9 fe		cmp #$fe			cmp 	#$FE
.9907	f0 02		beq $990b			beq 	_LCHaveOpener
.9909	a2 22		ldx #$22			ldx 	#'"'
.990b					_LCHaveOpener:
.990b	8a		txa				txa 								; output prefix (# or ")
.990c	20 2e 99	jsr $992e			jsr 	LCLWrite
.990f	c8		iny				iny 								; get count
.9910	b1 30		lda ($30),y			lda 	(codePtr),y
.9912	aa		tax				tax
.9913	c8		iny				iny 								; point at first character
.9914					_LCOutData:
.9914	b1 30		lda ($30),y			lda 	(codePtr),y
.9916	c9 00		cmp #$00			cmp 	#0
.9918	f0 03		beq $991d			beq 	_LCNoPrint
.991a	20 2e 99	jsr $992e			jsr 	LCLWrite
.991d					_LCNoPrint:
.991d	c8		iny				iny
.991e	ca		dex				dex
.991f	d0 f3		bne $9914			bne 	_LCOutData
.9921	68		pla				pla 								; closing " required ?
.9922	c9 ff		cmp #$ff			cmp 	#$FF
.9924	d0 05		bne $992b			bne 	_LCNoQuote
.9926	a9 22		lda #$22			lda 	#'"'
.9928	20 2e 99	jsr $992e			jsr 	LCLWrite
.992b					_LCNoQuote:
.992b	4c 33 98	jmp $9833			jmp 	_LCMainLoop
.992e					LCLWrite:
.992e	da		phx				phx
.992f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9932	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9935	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9938	ee 9d 04	inc $049d			inc 	tbOffset
.993b	fa		plx				plx
.993c	60		rts				rts
.993d					LCDeleteLastSpace:
.993d	48		pha				pha
.993e	da		phx				phx
.993f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9942	f0 0a		beq $994e			beq 	_LCDLSExit
.9944	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9947	c9 20		cmp #$20			cmp 	#' '
.9949	d0 03		bne $994e			bne 	_LCDLSExit
.994b	ce 9d 04	dec $049d			dec 	tbOffset
.994e					_LCDLSExit:
.994e	fa		plx				plx
.994f	68		pla				pla
.9950	60		rts				rts
.9951					LCCheckSpaceRequired:
.9951	ae 9d 04	ldx $049d			ldx 	tbOffset
.9954	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.9957	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.9959	f0 1b		beq $9976			beq 	_LCCSRSpace
.995b	c9 29		cmp #$29			cmp 	#')'
.995d	f0 17		beq $9976			beq 	_LCCSRSpace
.995f	c9 23		cmp #$23			cmp 	#'#'
.9961	f0 13		beq $9976			beq 	_LCCSRSpace
.9963	20 7c 99	jsr $997c			jsr 	LCLLowerCase 				; saves a little effort
.9966	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9968	90 11		bcc $997b			bcc 	_LCCSRExit
.996a	c9 3a		cmp #$3a			cmp 	#"9"+1
.996c	90 08		bcc $9976			bcc 	_LCCSRSpace
.996e	c9 61		cmp #$61			cmp 	#"a"
.9970	90 09		bcc $997b			bcc 	_LCCSRExit
.9972	c9 7b		cmp #$7b			cmp 	#"z"+1
.9974	b0 05		bcs $997b			bcs 	_LCCSRExit
.9976					_LCCSRSpace:
.9976	a9 20		lda #$20			lda 	#' '
.9978	20 2e 99	jsr $992e			jsr 	LCLWrite
.997b					_LCCSRExit:
.997b	60		rts				rts
.997c					LCLLowerCase:
.997c	c9 41		cmp #$41			cmp 	#"A"
.997e	90 06		bcc $9986			bcc 	_LCLLCOut
.9980	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9982	b0 02		bcs $9986			bcs 	_LCLLCOut
.9984	69 20		adc #$20			adc 	#$20
.9986					_LCLLCOut:
.9986	60		rts				rts
.9987					LCLUpperCase:
.9987	c9 61		cmp #$61			cmp 	#"a"
.9989	90 06		bcc $9991			bcc 	_LCLUCOut
.998b	c9 7b		cmp #$7b			cmp 	#"z"+1
.998d	b0 02		bcs $9991			bcs 	_LCLUCOut
.998f	e9 1f		sbc #$1f			sbc 	#$1F
.9991					_LCLUCOut:
.9991	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9992					ProcedureScan:
.9992	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9994	85 30		sta $30				sta 	codePtr
.9996	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9998	85 31		sta $31				sta 	codePtr+1
.999a					_PSLoop:
.999a	b2 30		lda ($30)			lda 	(codePtr)
.999c	f0 42		beq $99e0			beq 	_PSExit
.999e	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.99a0	b1 30		lda ($30),y			lda 	(codePtr),y
.99a2	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.99a4	d0 2d		bne $99d3			bne 	_PSNext
.99a6	c8		iny				iny 								; get the address of the record to zTemp0 and
.99a7	b1 30		lda ($30),y			lda 	(codePtr),y
.99a9	29 c0		and #$c0			and 	#$C0
.99ab	c9 40		cmp #$40			cmp 	#$40
.99ad	d0 32		bne $99e1			bne 	_PSSyntax
.99af	b1 30		lda ($30),y			lda 	(codePtr),y
.99b1	18		clc				clc
.99b2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.99b4	85 37		sta $37				sta 	zTemp0+1
.99b6	c8		iny				iny 								; LSB
.99b7	b1 30		lda ($30),y			lda 	(codePtr),y
.99b9	85 36		sta $36				sta 	zTemp0
.99bb	c8		iny				iny 								; character after variable call.
.99bc	98		tya				tya 								; save Y offset at +7
.99bd	a0 07		ldy #$07			ldy 	#7
.99bf	91 36		sta ($36),y			sta 	(zTemp0),y
.99c1	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.99c3	a0 02		ldy #$02			ldy 	#2
.99c5	91 36		sta ($36),y			sta 	(zTemp0),y
.99c7	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.99c9					_PSCopy:
.99c9	b5 30		lda $30,x			lda 	safePtr,x
.99cb	c8		iny				iny
.99cc	91 36		sta ($36),y			sta 	(zTemp0),y
.99ce	e8		inx				inx
.99cf	e0 04		cpx #$04			cpx 	#4
.99d1	d0 f6		bne $99c9			bne 	_PSCopy
.99d3					_PSNext:
.99d3	18		clc				clc
.99d4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.99d6	65 30		adc $30				adc 	codePtr
.99d8	85 30		sta $30				sta 	codePtr
.99da	90 02		bcc $99de			bcc 	_CREExit
.99dc	e6 31		inc $31				inc 	codePtr+1
.99de					_CREExit:
.99de	80 ba		bra $999a			bra 	_PSLoop
.99e0					_PSExit:
.99e0	60		rts				rts
.99e1					_PSSyntax:
.99e1	4c f5 b4	jmp $b4f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.99e4					ScanForward:
.99e4	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.99e6	86 37		stx $37				stx 	zTemp0+1
.99e8	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.99ea					_ScanLoop:
.99ea	b1 30		lda ($30),y			lda 	(codePtr),y
.99ec	c8		iny				iny
.99ed	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.99ef	d0 0e		bne $99ff			bne 	_ScanGoNext
.99f1	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.99f3	f0 04		beq $99f9			beq 	_ScanMatch
.99f5	c5 37		cmp $37				cmp 	zTemp0+1
.99f7	d0 06		bne $99ff			bne 	_ScanGoNext
.99f9					_ScanMatch:
.99f9	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.99fb	d0 01		bne $99fe			bne 	_ScanNotEndEOL
.99fd	88		dey				dey
.99fe					_ScanNotEndEOL:
.99fe	60		rts				rts
.99ff					_ScanGoNext:
.99ff	20 04 9a	jsr $9a04			jsr  	ScanForwardOne
.9a02	80 e6		bra $99ea			bra 	_ScanLoop
.9a04					ScanForwardOne:
.9a04	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9a06	90 3e		bcc $9a46			bcc 	_SFWExit
.9a08	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9a0a	90 18		bcc $9a24			bcc 	_ScanSkipOne
.9a0c	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9a0e	b0 2f		bcs $9a3f			bcs 	_ScanSkipData
.9a10	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9a12	90 32		bcc $9a46			bcc 	_SFWExit 					; if not, ordinary keywords.
.9a14	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9a16	b0 2e		bcs $9a46			bcs 	_SFWExit
.9a18	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9a1a	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9a1c	b0 28		bcs $9a46			bcs 	_SFWExit
.9a1e	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9a20	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9a22	80 22		bra $9a46			bra 	_SFWExit
.9a24					_ScanSkipOne:
.9a24	c8		iny				iny 								; consume the extra one.
.9a25	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9a27	d0 1d		bne $9a46			bne 	_SFWExit
.9a29	18		clc				clc
.9a2a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a2c	65 30		adc $30				adc 	codePtr
.9a2e	85 30		sta $30				sta 	codePtr
.9a30	90 02		bcc $9a34			bcc 	_CREExit
.9a32	e6 31		inc $31				inc 	codePtr+1
.9a34					_CREExit:
.9a34	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9a36	b2 30		lda ($30)			lda 	(codePtr)
.9a38	d0 0c		bne $9a46			bne 	_SFWExit 					; if not zero, more to scan
.9a3a	a9 13		lda #$13		lda	#19
.9a3c	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.9a3f					_ScanSkipData:
.9a3f	88		dey				dey 								; point at data token
.9a40	c8		iny				iny
.9a41	98		tya				tya
.9a42	38		sec				sec
.9a43	71 30		adc ($30),y			adc 	(codePtr),y
.9a45	a8		tay				tay
.9a46					_SFWExit:
.9a46	60		rts				rts
.9a47					ScanGetCurrentLineStep:
.9a47	64 38		stz $38				stz 	zTemp1
.9a49	a0 03		ldy #$03			ldy 	#3
.9a4b					_SGCLSLoop:
.9a4b	b1 30		lda ($30),y			lda 	(codePtr),y
.9a4d	c8		iny				iny
.9a4e	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9a50	f0 05		beq $9a57			beq 	_SGCLSExit
.9a52	20 04 9a	jsr $9a04			jsr 	ScanForwardOne
.9a55	80 f4		bra $9a4b			bra 	_SGCLSLoop
.9a57					_SGCLSExit:
.9a57	a5 38		lda $38				lda 	zTemp1
.9a59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9a5a					Command_WHILE:
.9a5a	5a		phy				phy 								; save position of the test
.9a5b	a2 00		ldx #$00			ldx 	#0
.9a5d	20 04 a6	jsr $a604			jsr 	EvaluateNumber 				; work out the number
.9a60	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; check if zero
.9a63	f0 0e		beq $9a73			beq 	_WHExitLoop 				; if so exit the loop
.9a65	98		tya				tya 								; position *after* test.
.9a66	7a		ply				ply 								; restore position before test, at WHILE
.9a67	88		dey				dey
.9a68	48		pha				pha 								; push after test on the stack
.9a69	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9a6b	20 78 a7	jsr $a778			jsr 	StackOpen
.9a6e	20 bc a7	jsr $a7bc			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9a71	7a		ply				ply 								; restore the position *after* the test
.9a72	60		rts				rts
.9a73					_WHExitLoop:
.9a73	68		pla				pla 								; throw post loop position
.9a74	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9a76	aa		tax				tax
.9a77	20 e4 99	jsr $99e4			jsr 	ScanForward
.9a7a	60		rts				rts
.9a7b					Command_WEND:
.9a7b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9a7d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9a7f	20 a4 a7	jsr $a7a4			jsr 	StackCheckFrame
.9a82	20 cd a7	jsr $a7cd			jsr 	STKLoadCodePosition 		; loop back
.9a85	20 96 a7	jsr $a796			jsr 	StackClose		 			; erase the frame
.9a88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.af07					CheckRightBracket:
.af07	b1 30		lda ($30),y			lda 	(codePtr),y
.af09	c8		iny				iny
.af0a	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.af0c	d0 0f		bne $af1d			bne 	CNAFail
.af0e	60		rts				rts
.af0f					CheckComma:
.af0f	b1 30		lda ($30),y			lda 	(codePtr),y
.af11	c8		iny				iny
.af12	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.af14	d0 07		bne $af1d			bne 	CNAFail
.af16	60		rts				rts
.af17					CheckNextA:
.af17	d1 30		cmp ($30),y			cmp 	(codePtr),y
.af19	d0 02		bne $af1d			bne 	CNAFail
.af1b	c8		iny				iny 								; skip character
.af1c	60		rts				rts 								; and exit
.af1d					CNAFail:
.af1d	4c f5 b4	jmp $b4f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9a89					ErrorHandler:
.9a89	a8		tay				tay 								; find the error text
.9a8a	f0 49		beq $9ad5			beq 	_EHEnd
.9a8c	a2 00		ldx #$00			ldx 	#0
.9a8e	a9 0e		lda #$0e			lda 	#((ErrorText) & $FF)
.9a90	85 36		sta $36				sta 	0+zTemp0
.9a92	a9 b5		lda #$b5			lda 	#((ErrorText) >> 8)
.9a94	85 37		sta $37				sta 	1+zTemp0
.9a96					_EHFind:
.9a96	88		dey				dey 								; found the error text ?
.9a97	f0 0e		beq $9aa7			beq 	_EHFound
.9a99					_EHFindZero:
.9a99	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9a9b	e6 36		inc $36				inc 	zTemp0
.9a9d	d0 02		bne $9aa1			bne 	_EHFNoCarry
.9a9f	e6 37		inc $37				inc 	zTemp0+1
.9aa1					_EHFNoCarry:
.9aa1	c9 00		cmp #$00			cmp 	#0
.9aa3	d0 f4		bne $9a99			bne 	_EHFindZero
.9aa5	80 ef		bra $9a96			bra 	_EHFind
.9aa7					_EHFound:
.9aa7	a5 36		lda $36				lda 	zTemp0 						; print message
.9aa9	a6 37		ldx $37				ldx 	zTemp0+1
.9aab	20 e2 9a	jsr $9ae2			jsr 	PrintStringXA
.9aae	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9ab0	b1 30		lda ($30),y			lda 	(codePtr),y
.9ab2	d0 05		bne $9ab9			bne 	_EHAtMsg
.9ab4	c8		iny				iny
.9ab5	b1 30		lda ($30),y			lda 	(codePtr),y
.9ab7	f0 17		beq $9ad0			beq 	_EHCREnd
.9ab9					_EHAtMsg:
.9ab9	a2 9a		ldx #$9a			ldx 	#_AtMsg >> 8 				; print " at "
.9abb	a9 d8		lda #$d8			lda 	#_AtMsg & $FF
.9abd	20 e2 9a	jsr $9ae2			jsr 	PrintStringXA
.9ac0	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9ac2	b1 30		lda ($30),y			lda 	(codePtr),y
.9ac4	48		pha				pha
.9ac5	c8		iny				iny
.9ac6	b1 30		lda ($30),y			lda 	(codePtr),y
.9ac8	aa		tax				tax
.9ac9	68		pla				pla
.9aca	20 63 b0	jsr $b063			jsr 	ConvertInt16 				; convert XA to string
.9acd	20 e2 9a	jsr $9ae2			jsr 	PrintStringXA 				; and print it.
.9ad0					_EHCREnd:
.9ad0	a9 0d		lda #$0d			lda 	#13 						; new line
.9ad2	20 ae b6	jsr $b6ae			jsr 	EXTPrintCharacter
.9ad5					_EHEnd:
.9ad5	4c 29 8c	jmp $8c29			jmp 	WarmStart
>9ad8	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9ae0	20 00
.9ae2					PrintStringXA:
.9ae2	5a		phy				phy
.9ae3	86 37		stx $37				stx 	zTemp0+1
.9ae5	85 36		sta $36				sta 	zTemp0
.9ae7	a0 00		ldy #$00			ldy 	#0
.9ae9					_PSXALoop:
.9ae9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9aeb	f0 06		beq $9af3			beq 	_PSXAExit
.9aed	20 ae b6	jsr $b6ae			jsr 	EXTPrintCharacter
.9af0	c8		iny				iny
.9af1	80 f6		bra $9ae9			bra 	_PSXALoop
.9af3					_PSXAExit:
.9af3	7a		ply				ply
.9af4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9af5					UnaryTrue:
.9af5	fa		plx				plx
.9af6					ReturnTrue:
.9af6	a9 01		lda #$01			lda 	#1  						; set to 1
.9af8	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.9afb	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9afd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b00	60		rts				rts
.9b01					UnaryFalse:
.9b01	fa		plx				plx
.9b02					ReturnFalse:
.9b02	4c c4 a6	jmp $a6c4			jmp 	NSMSetZero 					; set it all to zero
.9b05					BinaryCompareEqual:
.9b05	fa		plx				plx
.9b06	20 41 9b	jsr $9b41			jsr 	CompareBaseCode
.9b09	c9 00		cmp #$00			cmp 	#0
.9b0b	f0 e9		beq $9af6			beq 	ReturnTrue
.9b0d	80 f3		bra $9b02			bra 	ReturnFalse
.9b0f					BinaryCompareLess:
.9b0f	fa		plx				plx
.9b10	20 41 9b	jsr $9b41			jsr 	CompareBaseCode
.9b13	c9 ff		cmp #$ff			cmp 	#$FF
.9b15	f0 df		beq $9af6			beq 	ReturnTrue
.9b17	80 e9		bra $9b02			bra 	ReturnFalse
.9b19					BinaryCompareGreater:
.9b19	fa		plx				plx
.9b1a	20 41 9b	jsr $9b41			jsr 	CompareBaseCode
.9b1d	c9 01		cmp #$01			cmp 	#1
.9b1f	f0 d5		beq $9af6			beq 	ReturnTrue
.9b21	80 df		bra $9b02			bra 	ReturnFalse
.9b23					BinaryCompareNotEqual:
.9b23	fa		plx				plx
.9b24	20 41 9b	jsr $9b41			jsr 	CompareBaseCode
.9b27	c9 00		cmp #$00			cmp 	#0
.9b29	d0 cb		bne $9af6			bne 	ReturnTrue
.9b2b	80 d5		bra $9b02			bra 	ReturnFalse
.9b2d					BinaryCompareLessEqual:
.9b2d	fa		plx				plx
.9b2e	20 41 9b	jsr $9b41			jsr 	CompareBaseCode
.9b31	c9 01		cmp #$01			cmp 	#1
.9b33	d0 c1		bne $9af6			bne 	ReturnTrue
.9b35	80 cb		bra $9b02			bra 	ReturnFalse
.9b37					BinaryCompareGreaterEqual:
.9b37	fa		plx				plx
.9b38	20 41 9b	jsr $9b41			jsr 	CompareBaseCode
.9b3b	c9 ff		cmp #$ff			cmp 	#$FF
.9b3d	d0 b7		bne $9af6			bne 	ReturnTrue
.9b3f	80 c1		bra $9b02			bra 	ReturnFalse
.9b41					CompareBaseCode:
.9b41	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; make both values if references.
.9b44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9b47	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b4a	29 10		and #$10			and 	#NSTString
.9b4c	d0 40		bne $9b8e			bne 	_CBCString
.9b4e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9b51	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b54	d0 3b		bne $9b91			bne 	_CBCFloat
.9b56	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b59	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b5c	29 08		and #$08			and 	#NSTFloat
.9b5e	d0 31		bne $9b91			bne 	_CBCFloat
.9b60	20 94 9b	jsr $9b94			jsr 	CompareFixMinusZero
.9b63	e8		inx				inx
.9b64	20 94 9b	jsr $9b94			jsr 	CompareFixMinusZero
.9b67	ca		dex				dex
.9b68	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9b6b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b6e	10 0b		bpl $9b7b			bpl 	_CDCSameSign
.9b70	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9b73	30 16		bmi $9b8b			bmi 	_CBCLess 					; return $FF
.9b75					_CBCGreater:
.9b75	a9 01		lda #$01			lda 	#1
.9b77	60		rts				rts
.9b78					_CBCEqual:
.9b78	a9 00		lda #$00			lda 	#0
.9b7a	60		rts				rts
.9b7b					_CDCSameSign:
.9b7b	20 a4 9c	jsr $9ca4			jsr 	SubTopTwoStack 				; unsigned subtract
.9b7e	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; or the mantissa together
.9b81	f0 f5		beq $9b78			beq 	_CBCEqual 					; -0 == 0
.9b83	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9b86	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9b89	10 ea		bpl $9b75			bpl 	_CBCGreater
.9b8b					_CBCLess:
.9b8b	a9 ff		lda #$ff			lda 	#$FF
.9b8d	60		rts				rts
.9b8e					_CBCString:
.9b8e	4c fa 9b	jmp $9bfa			jmp 	CompareStrings
.9b91					_CBCFloat:
.9b91	4c 67 b1	jmp $b167			jmp 	CompareFloat
.9b94					CompareFixMinusZero:
.9b94	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero
.9b97	d0 03		bne $9b9c			bne 	_CFXMZNotZero
.9b99	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9b9c					_CFXMZNotZero:
.9b9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9b9d					StringConcat:
.9b9d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9ba0	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9ba3	29 18		and #$18			and 	#NSBTypeMask
.9ba5	c9 10		cmp #$10			cmp 	#NSTString
.9ba7	d0 4e		bne $9bf7			bne		_SCType
.9ba9	64 38		stz $38				stz 	zTemp1 						; counting total length
.9bab	e8		inx				inx
.9bac	20 ca 9b	jsr $9bca			jsr 	_SCSetupZ0 					; setup for second
.9baf	20 d5 9b	jsr $9bd5			jsr 	_SCLengthZ0 				; length for second
.9bb2	ca		dex				dex
.9bb3	20 ca 9b	jsr $9bca			jsr 	_SCSetupZ0 					; setup for first
.9bb6	20 d5 9b	jsr $9bd5			jsr 	_SCLengthZ0 				; length for first
.9bb9	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9bbb	20 77 b8	jsr $b877			jsr 	StringTempAllocate
.9bbe	20 e8 9b	jsr $9be8			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9bc1	e8		inx				inx
.9bc2	20 ca 9b	jsr $9bca			jsr 	_SCSetupZ0 					; copy second out
.9bc5	20 e8 9b	jsr $9be8			jsr 	_SCCopy
.9bc8	ca		dex				dex
.9bc9	60		rts				rts
.9bca					_SCSetupZ0:
.9bca	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9bcd	85 36		sta $36				sta 	zTemp0
.9bcf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bd2	85 37		sta $37				sta 	zTemp0+1
.9bd4	60		rts				rts
.9bd5					_SCLengthZ0:
.9bd5	5a		phy				phy
.9bd6	a0 00		ldy #$00			ldy 	#0
.9bd8					_SCLenLoop:
.9bd8	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bda	f0 0a		beq $9be6			beq 	_SCLExit
.9bdc	c8		iny				iny
.9bdd	e6 38		inc $38				inc 	zTemp1
.9bdf	10 f7		bpl $9bd8			bpl		_SCLenLoop
.9be1	a9 09		lda #$09		lda	#9
.9be3	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.9be6					_SCLExit:
.9be6	7a		ply				ply
.9be7	60		rts				rts
.9be8					_SCCopy:
.9be8	5a		phy				phy
.9be9	a0 00		ldy #$00			ldy 	#0
.9beb					_SCCopyLoop:
.9beb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bed	f0 06		beq $9bf5			beq 	_SCCExit
.9bef	20 b5 b8	jsr $b8b5			jsr 	StringTempWrite
.9bf2	c8		iny				iny
.9bf3	80 f6		bra $9beb			bra 	_SCCopyLoop
.9bf5					_SCCExit:
.9bf5	7a		ply				ply
.9bf6	60		rts				rts
.9bf7					_SCType:
.9bf7	4c ff b4	jmp $b4ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.af20					IntegerDivide:
.af20	fa		plx				plx
.af21	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af24	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af27	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af28	0a		asl a				asl 	a
.af29	10 05		bpl $af30			bpl 	_NotRef
.af2b	48		pha				pha
.af2c	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af2f	68		pla				pla
.af30					_NotRef:
.af30	0a		asl a				asl 	a
.af31	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af33	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af36	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af39	f0 03		beq $af3e			beq 	_IntegerCode 				; if clear, then we have two integers
.af3b	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.af3e					_IntegerCode:
.af3e	20 60 af	jsr $af60			jsr 	CheckDivideZero 			; do div zero check
.af41	20 98 af	jsr $af98			jsr 	Int32Divide 				; do the division
.af44	20 55 b0	jsr $b055			jsr 	CalculateSign 				; calculate result sign
.af47					NSMCopyPlusTwoToZero:
.af47	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.af4a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af4d	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.af50	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af53	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.af56	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af59	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.af5c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af5f	60		rts				rts
.af60					CheckDivideZero:
.af60	e8		inx				inx
.af61	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero
.af64	f0 02		beq $af68			beq 	_CDVError
.af66	ca		dex				dex
.af67	60		rts				rts
.af68					_CDVError:
.af68	a9 03		lda #$03		lda	#3
.af6a	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.af6d					IntegerModulus:
.af6d	fa		plx				plx
.af6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af71	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af74	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af75	0a		asl a				asl 	a
.af76	10 05		bpl $af7d			bpl 	_NotRef
.af78	48		pha				pha
.af79	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af7c	68		pla				pla
.af7d					_NotRef:
.af7d	0a		asl a				asl 	a
.af7e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af80	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af83	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af86	f0 03		beq $af8b			beq 	_IntegerCode 				; if clear, then we have two integers
.af88	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.af8b					_IntegerCode:
.af8b					IntegerModulusNoCheck:
.af8b	20 60 af	jsr $af60			jsr 	CheckDivideZero 			; do div zero check
.af8e	20 98 af	jsr $af98			jsr 	Int32Divide 				; do the division
.af91	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.af94	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.af97	60		rts				rts
.af98					Int32Divide:
.af98	48		pha				pha 								; save AXY
.af99	5a		phy				phy
.af9a	20 9b a6	jsr $a69b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.af9d	20 c0 a6	jsr $a6c0			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.afa0	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.afa2					_I32DivideLoop:
.afa2	e8		inx				inx
.afa3	e8		inx				inx
.afa4	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.afa7	ca		dex				dex
.afa8	ca		dex				dex
.afa9	20 da a6	jsr $a6da			jsr 	NSMRotateLeft
.afac	20 d8 af	jsr $afd8			jsr 	DivideCheckSubtract 		; check if subtract possible
.afaf	90 03		bcc $afb4			bcc 	_I32DivideNoCarryIn
.afb1	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.afb4					_I32DivideNoCarryIn:
.afb4	88		dey				dey 								; loop round till division completed.
.afb5	d0 eb		bne $afa2			bne 	_I32DivideLoop
.afb7	7a		ply				ply 								; restore AXY and exit
.afb8	68		pla				pla
.afb9	60		rts				rts
.afba					Int32ShiftDivide:
.afba	48		pha				pha 								; save AY
.afbb	5a		phy				phy
.afbc	e8		inx				inx 								; clear S[X+2]
.afbd	e8		inx				inx
.afbe	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.afc1	ca		dex				dex
.afc2	ca		dex				dex
.afc3	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.afc5					_I32SDLoop:
.afc5	20 d8 af	jsr $afd8			jsr 	DivideCheckSubtract 		; check if subtract possible
.afc8	e8		inx				inx
.afc9	e8		inx				inx
.afca	20 da a6	jsr $a6da			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.afcd	ca		dex				dex
.afce	ca		dex				dex
.afcf	20 da a6	jsr $a6da			jsr 	NSMRotateLeft
.afd2	88		dey				dey 	 							; do 31 times
.afd3	d0 f0		bne $afc5			bne 	_I32SDLoop
.afd5	7a		ply				ply 								; restore AY and exit
.afd6	68		pla				pla
.afd7	60		rts				rts
.afd8					DivideCheckSubtract:
.afd8	20 a4 9c	jsr $9ca4			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.afdb	b0 04		bcs $afe1			bcs 	_DCSExit 					; if carry set, then could do, exit
.afdd	20 7e 9c	jsr $9c7e			jsr 	AddTopTwoStack 				; add it back in
.afe0	18		clc				clc 								; and return False
.afe1					_DCSExit:
.afe1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.afe2					MulInteger:
.afe2	fa		plx				plx
.afe3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.afe6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.afe9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.afea	0a		asl a				asl 	a
.afeb	10 05		bpl $aff2			bpl 	_NotRef
.afed	48		pha				pha
.afee	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aff1	68		pla				pla
.aff2					_NotRef:
.aff2	0a		asl a				asl 	a 							; put MSB of type into A:7
.aff3	30 0b		bmi $b000			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.aff5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aff8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.affb	f0 06		beq $b003			beq 	_IntegerCode 				; if clear, then we have two integers
.affd	4c 3e b2	jmp $b23e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.b000					_StringData:
.b000	4c 09 b5	jmp $b509			jmp 	NotDoneError							; at least one string - don't know both are strings.
.b003					_IntegerCode:
.b003	20 10 b0	jsr $b010			jsr 	MultiplyShort
.b006	c9 00		cmp #$00			cmp 	#0
.b008	f0 05		beq $b00f			beq 	_MIExit
.b00a	a9 04		lda #$04		lda	#4
.b00c	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b00f					_MIExit:
.b00f	60		rts				rts
.b010					MultiplyShort:
.b010	5a		phy				phy 								; save Y
.b011	20 9b a6	jsr $a69b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.b014	20 c0 a6	jsr $a6c0			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.b017	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.b019					_I32MLoop:
.b019	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.b01c	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.b01f	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.b022	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.b025	f0 28		beq $b04f			beq 	_I32MExit 					; exit if zero
.b027	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.b02a	29 01		and #$01			and 	#1
.b02c	f0 0e		beq $b03c			beq 	_I32MNoAdd
.b02e	20 7e 9c	jsr $9c7e			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.b031	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.b034	10 06		bpl $b03c			bpl 	_I32MNoAdd
.b036					_I32ShiftRight:
.b036	20 e7 a6	jsr $a6e7			jsr 	NSMShiftRight 				; shift S[X] right
.b039	c8		iny				iny 								; increment shift count
.b03a	80 0a		bra $b046			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.b03c					_I32MNoAdd:
.b03c	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.b03f	70 f5		bvs $b036			bvs 	_I32ShiftRight 				; instead.
.b041	e8		inx				inx
.b042	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.b045	ca		dex				dex
.b046					_I32MShiftUpper:
.b046	e8		inx				inx 								; shift S[X+2] right
.b047	e8		inx				inx
.b048	20 e7 a6	jsr $a6e7			jsr 	NSMShiftRight
.b04b	ca		dex				dex
.b04c	ca		dex				dex
.b04d	80 ca		bra $b019			bra 	_I32MLoop 					; try again.
.b04f					_I32MExit:
.b04f	20 55 b0	jsr $b055			jsr 	CalculateSign
.b052	98		tya				tya 								; shift in A
.b053	7a		ply				ply 								; restore Y and exit
.b054	60		rts				rts
.b055					CalculateSign:
.b055	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.b058	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.b05b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b05e	0a		asl a				asl 	a 							; shift bit 7 into carry
.b05f	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b062	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9bfa					CompareStrings:
.9bfa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9bfd	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9c00	29 10		and #$10			and 	#NSBIsString
.9c02	f0 2c		beq $9c30			beq 	_CSTypeError
.9c04	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9c07	85 36		sta $36				sta 	zTemp0
.9c09	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c0c	85 37		sta $37				sta 	zTemp0+1
.9c0e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9c11	85 38		sta $38				sta 	zTemp1
.9c13	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c16	85 39		sta $39				sta 	zTemp1+1
.9c18	5a		phy				phy 								; save Y so we can access strings
.9c19	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9c1b					_CSLoop:
.9c1b	c8		iny				iny
.9c1c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9c1e	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9c20	d0 06		bne $9c28			bne 	_CSDifferent
.9c22	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9c24	d0 f5		bne $9c1b			bne 	_CSLoop 					; still comparing
.9c26					_CSExit:
.9c26	7a		ply				ply 								; reached end, return zero in A from EOS
.9c27	60		rts				rts
.9c28					_CSDifferent:
.9c28	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9c2a	90 fa		bcc $9c26			bcc		_CSExit
.9c2c	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9c2e	80 f6		bra $9c26			bra 	_CSExit
.9c30					_CSTypeError:
.9c30	4c ff b4	jmp $b4ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9c33					ShiftLeft:
.9c33	38		sec				sec
.9c34	80 01		bra $9c37			bra 	ShiftMain
.9c36					ShiftRight:
.9c36	18		clc				clc
.9c37					ShiftMain:
.9c37	fa		plx				plx 								; restore X
.9c38	08		php				php 								; save direction
.9c39	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c3c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c3f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c40	0a		asl a				asl 	a
.9c41	10 05		bpl $9c48			bpl 	_NotRef
.9c43	48		pha				pha
.9c44	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c47	68		pla				pla
.9c48					_NotRef:
.9c48	0a		asl a				asl 	a
.9c49	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c4b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c4e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c51	f0 03		beq $9c56			beq 	_IntegerCode 				; if clear, then we have two integers
.9c53	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.9c56					_IntegerCode:
.9c56	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9c59	29 e0		and #$e0			and 	#$E0
.9c5b	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9c5e	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9c61	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9c64	d0 13		bne $9c79			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9c66					_SMLoop:
.9c66	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9c69	30 11		bmi $9c7c			bmi 	_SMExit 					; exit if done.
.9c6b	28		plp				plp 								; restore direcition setting
.9c6c	08		php				php
.9c6d	90 05		bcc $9c74			bcc 	_SMRight
.9c6f	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; shift left if CS
.9c72	80 f2		bra $9c66			bra 	_SMLoop
.9c74					_SMRight:
.9c74	20 e7 a6	jsr $a6e7			jsr 	NSMShiftRight 				; shift right if CC
.9c77	80 ed		bra $9c66			bra 	_SMLoop
.9c79					_SMExit0:
.9c79	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero 					; return zero.
.9c7c					_SMExit:
.9c7c	28		plp				plp 								; throw direction
.9c7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9c7e					AddTopTwoStack:
.9c7e	18		clc				clc
.9c7f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c82	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9c85	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c88	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c8b	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9c8e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c91	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c94	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9c97	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c9a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c9d	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9ca0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ca3	60		rts				rts
.9ca4					SubTopTwoStack:
.9ca4	38		sec				sec
.9ca5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ca8	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9cab	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cae	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cb1	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9cb4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cb7	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cba	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9cbd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cc0	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cc3	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9cc6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cc9	60		rts				rts
.9cca					AddInteger:
.9cca	fa		plx				plx
.9ccb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cce	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cd1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cd2	0a		asl a				asl 	a
.9cd3	10 05		bpl $9cda			bpl 	_NotRef
.9cd5	48		pha				pha
.9cd6	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cd9	68		pla				pla
.9cda					_NotRef:
.9cda	0a		asl a				asl 	a 							; put MSB of type into A:7
.9cdb	30 0b		bmi $9ce8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9cdd	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ce0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ce3	f0 06		beq $9ceb			beq 	_IntegerCode 				; if clear, then we have two integers
.9ce5	4c be b0	jmp $b0be			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9ce8					_StringData:
.9ce8	4c 9d 9b	jmp $9b9d			jmp 	StringConcat							; at least one string - don't know both are strings.
.9ceb					_IntegerCode:
.9ceb					AddCode:
.9ceb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9cee	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9cf1	10 8b		bpl $9c7e			bpl 	AddTopTwoStack
.9cf3	20 a4 9c	jsr $9ca4			jsr 	SubTopTwoStack 				; do a physical subtraction
.9cf6	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9cf9	10 09		bpl $9d04			bpl 	_AddExit
.9cfb	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9cfe	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d01	20 79 a6	jsr $a679			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d04					_AddExit:
.9d04	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; check for -0
.9d07	d0 03		bne $9d0c			bne 	_AddNonZero
.9d09	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9d0c					_AddNonZero:
.9d0c	60		rts				rts
.9d0d					SubInteger:
.9d0d	fa		plx				plx
.9d0e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d11	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d14	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d15	0a		asl a				asl 	a
.9d16	10 05		bpl $9d1d			bpl 	_NotRef
.9d18	48		pha				pha
.9d19	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d1c	68		pla				pla
.9d1d					_NotRef:
.9d1d	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d1e	30 0b		bmi $9d2b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d20	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d23	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d26	f0 06		beq $9d2e			beq 	_IntegerCode 				; if clear, then we have two integers
.9d28	4c c3 b0	jmp $b0c3			jmp 	FloatingPointSub 							; otherwise at least one float.
.9d2b					_StringData:
.9d2b	4c 09 b5	jmp $b509			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9d2e					_IntegerCode:
.9d2e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9d31	49 80		eor #$80			eor 	#$80
.9d33	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d36	80 b3		bra $9ceb			bra 	AddCode 					; and do the same code as add.
.9d38					AndInteger:
.9d38	fa		plx				plx
.9d39	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d3c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d3f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d40	0a		asl a				asl 	a
.9d41	10 05		bpl $9d48			bpl 	_NotRef
.9d43	48		pha				pha
.9d44	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d47	68		pla				pla
.9d48					_NotRef:
.9d48	0a		asl a				asl 	a
.9d49	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d4b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d4e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d51	f0 03		beq $9d56			beq 	_IntegerCode 				; if clear, then we have two integers
.9d53	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.9d56					_IntegerCode:
.9d56	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d59	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9d5c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d5f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d62	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9d65	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d68	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d6b	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9d6e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d71	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d74	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9d77	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d7a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d7d	60		rts				rts
.9d7e					OraInteger:
.9d7e	fa		plx				plx
.9d7f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d82	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d85	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d86	0a		asl a				asl 	a
.9d87	10 05		bpl $9d8e			bpl 	_NotRef
.9d89	48		pha				pha
.9d8a	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d8d	68		pla				pla
.9d8e					_NotRef:
.9d8e	0a		asl a				asl 	a
.9d8f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d91	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d94	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d97	f0 03		beq $9d9c			beq 	_IntegerCode 				; if clear, then we have two integers
.9d99	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.9d9c					_IntegerCode:
.9d9c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d9f	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9da2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9da5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9da8	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9dab	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dae	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9db1	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9db4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9db7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9dba	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9dbd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dc0	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9dc3	60		rts				rts
.9dc4					EorInteger:
.9dc4	fa		plx				plx
.9dc5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dc8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9dcb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dcc	0a		asl a				asl 	a
.9dcd	10 05		bpl $9dd4			bpl 	_NotRef
.9dcf	48		pha				pha
.9dd0	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9dd3	68		pla				pla
.9dd4					_NotRef:
.9dd4	0a		asl a				asl 	a
.9dd5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9dd7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9dda	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ddd	f0 03		beq $9de2			beq 	_IntegerCode 				; if clear, then we have two integers
.9ddf	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.9de2					_IntegerCode:
.9de2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9de5	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9de8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9deb	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9dee	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9df1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9df4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9df7	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9dfa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dfd	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e00	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9e03	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e06	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e09	60		rts				rts
.9e0a					WordIndirect:
.9e0a	fa		plx				plx
.9e0b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e0e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e11	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e12	0a		asl a				asl 	a
.9e13	10 05		bpl $9e1a			bpl 	_NotRef
.9e15	48		pha				pha
.9e16	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e19	68		pla				pla
.9e1a					_NotRef:
.9e1a	0a		asl a				asl 	a
.9e1b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e1d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e20	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e23	f0 03		beq $9e28			beq 	_IntegerCode 				; if clear, then we have two integers
.9e25	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.9e28					_IntegerCode:
.9e28	20 eb 9c	jsr $9ceb			jsr 	AddCode 					; add the two values
.9e2b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e2d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e30	60		rts				rts
.9e31					ByteIndirect:
.9e31	fa		plx				plx
.9e32	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e35	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e38	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e39	0a		asl a				asl 	a
.9e3a	10 05		bpl $9e41			bpl 	_NotRef
.9e3c	48		pha				pha
.9e3d	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e40	68		pla				pla
.9e41					_NotRef:
.9e41	0a		asl a				asl 	a
.9e42	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e44	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e47	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e4a	f0 03		beq $9e4f			beq 	_IntegerCode 				; if clear, then we have two integers
.9e4c	4c ff b4	jmp $b4ff			jmp 	TypeError 					; anything else, type mismatch.
.9e4f					_IntegerCode:
.9e4f	20 eb 9c	jsr $9ceb			jsr 	AddCode 					; add the two values
.9e52	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9e54	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b063					ConvertInt16:
.b063	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b066	8e 10 04	stx $0410			stx 	NSMantissa1
.b069	9c 18 04	stz $0418			stz 	NSMantissa2
.b06c	9c 20 04	stz $0420			stz 	NSMantissa3
.b06f	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b072	a2 00		ldx #$00			ldx 	#0 							; stack level
.b074	a9 0a		lda #$0a			lda 	#10 						; base
.b076	80 00		bra $b078			bra 	ConvertInt32
.b078					ConvertInt32:
.b078	5a		phy				phy
.b079	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b07b	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b07e	10 08		bpl $b088			bpl 	_CI32NotNeg
.b080	48		pha				pha
.b081	a9 2d		lda #$2d			lda 	#'-'
.b083	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b086	c8		iny				iny
.b087	68		pla				pla
.b088					_CI32NotNeg:
.b088	20 96 b0	jsr $b096			jsr 	_CI32DivideConvert 			; recursive conversion
.b08b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b08d	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b090	7a		ply				ply
.b091	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b093	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b095	60		rts				rts
.b096					_CI32DivideConvert:
.b096	e8		inx				inx 								; write to next slot up
.b097	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.b09a	ca		dex				dex
.b09b	20 98 af	jsr $af98			jsr 	Int32Divide 				; divide
.b09e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b0a1	48		pha				pha
.b0a2	20 47 af	jsr $af47			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b0a5	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; is it zero ?
.b0a8	f0 06		beq $b0b0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b0aa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b0ad	20 96 b0	jsr $b096			jsr 	_CI32DivideConvert 			; and recusrively call.
.b0b0					_CI32NoRecurse:
.b0b0	68		pla				pla 								; remainder
.b0b1	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b0b3	90 02		bcc $b0b7			bcc 	_CI32NotHex
.b0b5	69 26		adc #$26			adc 	#6+32
.b0b7					_CI32NotHex:
.b0b7	69 30		adc #$30			adc 	#48
.b0b9	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b0bc	c8		iny				iny
.b0bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9e58					PrecedenceLevel:
>9e58	04					.byte	 4	; $00 <<
>9e59	02					.byte	 2	; $01 <=
>9e5a	02					.byte	 2	; $02 <>
>9e5b	00					.byte	 0	; $03 !!3
>9e5c	00					.byte	 0	; $04 ><
>9e5d	02					.byte	 2	; $05 >=
>9e5e	04					.byte	 4	; $06 >>
>9e5f	00					.byte	 0	; $07 !!7
>9e60	00					.byte	 0	; $08 !!8
>9e61	00					.byte	 0	; $09 !!9
>9e62	00					.byte	 0	; $0a !!10
>9e63	00					.byte	 0	; $0b !!11
>9e64	00					.byte	 0	; $0c !!12
>9e65	00					.byte	 0	; $0d !!13
>9e66	00					.byte	 0	; $0e !!14
>9e67	00					.byte	 0	; $0f !!15
>9e68	00					.byte	 0	; $10 @
>9e69	00					.byte	 0	; $11 !!17
>9e6a	00					.byte	 0	; $12 !!18
>9e6b	00					.byte	 0	; $13 [
>9e6c	04					.byte	 4	; $14 \
>9e6d	00					.byte	 0	; $15 ]
>9e6e	01					.byte	 1	; $16 ^
>9e6f	00					.byte	 0	; $17 _
>9e70	00					.byte	 0	; $18 `
>9e71	00					.byte	 0	; $19 !!25
>9e72	00					.byte	 0	; $1a !!26
>9e73	00					.byte	 0	; $1b {
>9e74	01					.byte	 1	; $1c |
>9e75	00					.byte	 0	; $1d }
>9e76	00					.byte	 0	; $1e ~
>9e77	00					.byte	 0	; $1f [7m<7F>[m
>9e78	00					.byte	 0	; $20
>9e79	05					.byte	 5	; $21 !
>9e7a	00					.byte	 0	; $22 "
>9e7b	00					.byte	 0	; $23 #
>9e7c	05					.byte	 5	; $24 $
>9e7d	04					.byte	 4	; $25 %
>9e7e	01					.byte	 1	; $26 &
>9e7f	00					.byte	 0	; $27 '
>9e80	00					.byte	 0	; $28 (
>9e81	00					.byte	 0	; $29 )
>9e82	04					.byte	 4	; $2a *
>9e83	03					.byte	 3	; $2b +
>9e84	00					.byte	 0	; $2c ,
>9e85	03					.byte	 3	; $2d -
>9e86	00					.byte	 0	; $2e .
>9e87	04					.byte	 4	; $2f /
>9e88	00					.byte	 0	; $30 0
>9e89	00					.byte	 0	; $31 1
>9e8a	00					.byte	 0	; $32 2
>9e8b	00					.byte	 0	; $33 3
>9e8c	00					.byte	 0	; $34 4
>9e8d	00					.byte	 0	; $35 5
>9e8e	00					.byte	 0	; $36 6
>9e8f	00					.byte	 0	; $37 7
>9e90	00					.byte	 0	; $38 8
>9e91	00					.byte	 0	; $39 9
>9e92	00					.byte	 0	; $3a :
>9e93	00					.byte	 0	; $3b ;
>9e94	02					.byte	 2	; $3c <
>9e95	02					.byte	 2	; $3d =
>9e96	02					.byte	 2	; $3e >
>9e97	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9e98					EvaluateExpressionAt0:
.9e98	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9e9a					EvaluateExpression:
.9e9a	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9e9c					EvaluateExpressionAtPrecedence:
.9e9c	48		pha				pha 								; save precedence level
.9e9d	20 6b a1	jsr $a16b			jsr 	EvaluateTerm 				; evaluate term into level X.
.9ea0	68		pla				pla 								; restore precedence level.
.9ea1					_EXPRLoop:
.9ea1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9ea3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ea5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ea7	b0 25		bcs $9ece			bcs 	_EXPRExit
.9ea9	da		phx				phx 								; read the operator precedence
.9eaa	aa		tax				tax
.9eab	bd 58 9e	lda $9e58,x			lda 	PrecedenceLevel,x
.9eae	fa		plx				plx
.9eaf	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9eb1	f0 1b		beq $9ece			beq 	_EXPRExit
.9eb3	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9eb5	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9eb7	c5 37		cmp $37				cmp 	zTemp0+1
.9eb9	b0 13		bcs $9ece			bcs		_EXPRExit 					; if current >= operator exit
.9ebb	48		pha				pha 								; save current precedence.
.9ebc	b1 30		lda ($30),y			lda 	(codePtr),y
.9ebe	c8		iny				iny
.9ebf	48		pha				pha
.9ec0	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9ec2	e8		inx				inx 								; work out the right hand side.
.9ec3	20 9c 9e	jsr $9e9c			jsr 	EvaluateExpressionAtPrecedence
.9ec6	ca		dex				dex
.9ec7	68		pla				pla 								; get operator, call the code.
.9ec8	20 d1 9e	jsr $9ed1			jsr 	_EXPRCaller
.9ecb	68		pla				pla 								; restore precedence level
.9ecc	80 d3		bra $9ea1			bra 	_EXPRLoop 					; and go round.
.9ece					_EXPRExit:
.9ece	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9ed0	60		rts				rts
.9ed1					_EXPRCaller:
.9ed1	da		phx				phx 								; save on stack, first thing is to restore it
.9ed2	0a		asl a				asl 	a 							; double so can use vectors into X
.9ed3	aa		tax				tax
.9ed4	7c 0e 96	jmp ($960e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b0be					FloatingPointAdd:
.b0be	20 67 b2	jsr $b267			jsr 	FloatPrepare 				; prepare for floats
.b0c1	80 0b		bra $b0ce			bra 	FloatAdd
.b0c3					FloatingPointSub:
.b0c3	20 67 b2	jsr $b267			jsr 	FloatPrepare 				; prepare for floats
.b0c6					FloatSubtract:
.b0c6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b0c9	49 80		eor #$80			eor 	#$80
.b0cb	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b0ce					FloatAdd:
.b0ce	48		pha				pha
.b0cf	5a		phy				phy
.b0d0	20 78 b2	jsr $b278			jsr 	NSNormalise 				; normalise S[X]
.b0d3	f0 5c		beq $b131			beq 	_FAReturn1
.b0d5	e8		inx				inx 								; normalise S[X+1]
.b0d6	20 78 b2	jsr $b278			jsr 	NSNormalise
.b0d9	ca		dex				dex
.b0da	c9 00		cmp #$00			cmp 	#0
.b0dc	f0 77		beq $b155			beq 	_FAExit 					; if so, just return A
.b0de	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b0e1	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b0e4	f0 1b		beq $b101			beq 	_FAExponentsEqual
.b0e6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b0e9	a8		tay				tay
.b0ea	38		sec				sec 								; do a signed comparison of the exponents.
.b0eb	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b0ee	50 02		bvc $b0f2			bvc 	_FANoSignedChange
.b0f0	49 80		eor #$80			eor 	#$80
.b0f2					_FANoSignedChange:
.b0f2	29 80		and #$80			and 	#$80
.b0f4	10 03		bpl $b0f9			bpl 	_FAHaveMax
.b0f6	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b0f9					_FAHaveMax:
.b0f9	20 58 b1	jsr $b158			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b0fc	e8		inx				inx
.b0fd	20 58 b1	jsr $b158			jsr 	_FAShiftToExponent
.b100	ca		dex				dex
.b101					_FAExponentsEqual:
.b101	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b104	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b107	30 10		bmi $b119			bmi 	_FADifferentSigns
.b109	20 7e 9c	jsr $9c7e			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b10c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b10f	10 44		bpl $b155			bpl 	_FAExit 					; if no, we are done.
.b111	20 e7 a6	jsr $a6e7			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b114	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b117	80 3c		bra $b155			bra 	_FAExit
.b119					_FADifferentSigns:
.b119	20 a4 9c	jsr $9ca4			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b11c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b11f	10 06		bpl $b127			bpl 	_FACheckZero 				; if no, check for -0
.b121	20 70 a6	jsr $a670			jsr 	NSMNegate 					; netate result
.b124	20 79 a6	jsr $a679			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b127					_FACheckZero:
.b127	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero	 				; check for -0
.b12a	d0 29		bne $b155			bne 	_FAExit
.b12c	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b12f	80 24		bra $b155			bra 	_FAExit
.b131					_FAReturn1:
.b131	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b134	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b137	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b13a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b13d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b140	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b143	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b146	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b149	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b14c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b14f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b152	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b155					_FAExit:
.b155	7a		ply				ply
.b156	68		pla				pla
.b157	60		rts				rts
.b158					_FAShiftToExponent:
.b158					_FAShiftToExponent2:
.b158	98		tya				tya 								; compare Y to exponent
.b159	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b15c	f0 08		beq $b166			beq 	_FASEExit 					; exit if so.
.b15e	20 e7 a6	jsr $a6e7			jsr 	NSMShiftRight	 			; shift the mantissa right
.b161	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b164	80 f2		bra $b158			bra 	_FAShiftToExponent2
.b166					_FASEExit:
.b166	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b167					CompareFloat:
.b167	20 c6 b0	jsr $b0c6			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b16a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b16d	29 f8		and #$f8			and 	#$F8
.b16f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b172	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b175	f0 09		beq $b180			beq 	_FCExit 					; zero, so approximately identical
.b177	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b179	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b17c	10 02		bpl $b180			bpl 	_FCExit
.b17e					_FCNegative:
.b17e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b180					_FCExit:
.b180	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b181					FDivideCommand:
.b181	fa		plx				plx	 								; restore stack position
.b182	20 67 b2	jsr $b267			jsr 	FloatPrepare 				; prepare for floats
.b185					FloatDivide:
.b185	48		pha				pha
.b186	e8		inx				inx
.b187	20 78 b2	jsr $b278			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b18a	ca		dex				dex
.b18b	c9 00		cmp #$00			cmp 	#0
.b18d	f0 20		beq $b1af			beq 	_FDZero
.b18f	20 78 b2	jsr $b278			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b192	f0 19		beq $b1ad			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b194	20 ba af	jsr $afba			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b197	20 47 af	jsr $af47			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b19a	20 78 b2	jsr $b278			jsr		NSNormalise 				; renormalise
.b19d	20 55 b0	jsr $b055			jsr 	CalculateSign 				; calculate result sign
.b1a0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b1a3	38		sec				sec
.b1a4	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b1a7	38		sec				sec
.b1a8	e9 1e		sbc #$1e			sbc 	#30
.b1aa	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1ad					_FDExit:
.b1ad	68		pla				pla
.b1ae	60		rts				rts
.b1af					_FDZero:
.b1af	a9 03		lda #$03		lda	#3
.b1b1	4c 89 9a	jmp $9a89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b1b4					FloatFractionalPart:
.b1b4	5a		phy				phy
.b1b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b1b8	29 7f		and #$7f			and 	#$7F
.b1ba	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1bd	20 78 b2	jsr $b278			jsr 	NSNormalise
.b1c0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b1c3	38		sec				sec
.b1c4	e9 e0		sbc #$e0			sbc 	#$E0
.b1c6	90 31		bcc $b1f9			bcc 	_FFPExit 					; already fractional
.b1c8	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b1ca	b0 2a		bcs $b1f6			bcs 	_FFPZero
.b1cc	a8		tay				tay 								; put count to do in Y
.b1cd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b1d0	20 fb b1	jsr $b1fb			jsr 	_FFPPartial
.b1d3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b1d6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b1d9	20 fb b1	jsr $b1fb			jsr 	_FFPPartial
.b1dc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b1df	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b1e2	20 fb b1	jsr $b1fb			jsr 	_FFPPartial
.b1e5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b1e8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b1eb	20 fb b1	jsr $b1fb			jsr 	_FFPPartial
.b1ee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b1f1	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; zeroed check.
.b1f4	d0 03		bne $b1f9			bne 	_FFPExit
.b1f6					_FFPZero:
.b1f6	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.b1f9					_FFPExit:
.b1f9	7a		ply				ply
.b1fa	60		rts				rts
.b1fb					_FFPPartial:
.b1fb	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b1fd	f0 17		beq $b216			beq 	_FFFPPExit
.b1ff	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b201	b0 0c		bcs $b20f			bcs 	_FFFPPWholeByte
.b203	5a		phy				phy
.b204					_FFFPPLeft:
.b204	0a		asl a				asl 	a
.b205	88		dey				dey
.b206	d0 fc		bne $b204			bne 	_FFFPPLeft
.b208	7a		ply				ply
.b209					_FFFPPRight:
.b209	4a		lsr a				lsr 	a
.b20a	88		dey				dey
.b20b	d0 fc		bne $b209			bne 	_FFFPPRight
.b20d	80 07		bra $b216			bra 	_FFFPPExit
.b20f					_FFFPPWholeByte:
.b20f	98		tya				tya 								; subtract 8 from count
.b210	38		sec				sec
.b211	e9 08		sbc #$08			sbc 	#8
.b213	a8		tay				tay
.b214	a9 00		lda #$00			lda 	#0 							; and clear all
.b216					_FFFPPExit:
.b216	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b217					FloatIntegerPart:
.b217	48		pha				pha
.b218	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b21b	f0 1f		beq $b23c			beq 	_FIPExit 					; if so do nothing
.b21d	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; is it zero ?
.b220	f0 17		beq $b239			beq 	_FIPZero 					; if so return zero.
.b222	20 78 b2	jsr $b278			jsr 	NSNormalise 				; normalise
.b225	f0 12		beq $b239			beq 	_FIPZero 					; normalised to zero, exit zero
.b227					_FIPShift:
.b227	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b22a	10 08		bpl $b234			bpl 	_FIPCheckZero
.b22c	20 e7 a6	jsr $a6e7			jsr 	NSMShiftRight 				; shift mantissa right
.b22f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b232	80 f3		bra $b227			bra 	_FIPShift
.b234					_FIPCheckZero:
.b234	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; avoid -0 problem
.b237	d0 03		bne $b23c			bne 	_FIPExit 					; set to zero if mantissa zero.
.b239					_FIPZero:
.b239	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.b23c					_FIPExit:
.b23c	68		pla				pla
.b23d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b23e					FloatingPointMultiply:
.b23e	20 67 b2	jsr $b267			jsr 	FloatPrepare 				; prepare for floats
.b241					FloatMultiply:
.b241	48		pha				pha
.b242	20 78 b2	jsr $b278			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b245	f0 1b		beq $b262			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b247	e8		inx				inx
.b248	20 78 b2	jsr $b278			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b24b	ca		dex				dex
.b24c	c9 00		cmp #$00			cmp 	#0
.b24e	f0 0f		beq $b25f			beq 	_FDSetZero
.b250	20 10 b0	jsr $b010			jsr 	MultiplyShort 				; calculate the result.
.b253	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b256	18		clc				clc
.b257	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b25a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b25d	80 03		bra $b262			bra 	_FDExit
.b25f					_FDSetZero:
.b25f	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero 					; return 0
.b262					_FDExit:
.b262	20 78 b2	jsr $b278			jsr 	NSNormalise 				; normalise the result
.b265	68		pla				pla
.b266	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b267					FloatPrepare:
.b267	20 aa 9f	jsr $9faa			jsr 	DereferenceTopTwo 			; dereference the top two values
.b26a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b26d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b270	29 10		and #$10			and 	#NSBIsString
.b272	d0 01		bne $b275			bne 	_FDType
.b274	60		rts				rts
.b275					_FDType:
.b275	4c ff b4	jmp $b4ff			jmp 	TypeError
.b278					NSNormalise:
.b278	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b27b	29 80		and #$80			and 	#$80
.b27d	09 08		ora #$08			ora 	#NSTFloat
.b27f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b282	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; if zero exit
.b285	d0 09		bne $b290			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b287	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b28a	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b28d	a9 00		lda #$00			lda 	#0 							; set Z flag
.b28f	60		rts				rts
.b290					_NSNormaliseOptimise:
.b290	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b293	d0 22		bne $b2b7			bne 	_NSNormaliseLoop
.b295	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b298	30 1d		bmi $b2b7			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b29a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b29d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2a0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b2a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b2a6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2a9	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b2ac	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b2af	38		sec				sec
.b2b0	e9 08		sbc #$08			sbc 	#8
.b2b2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b2b5	80 d9		bra $b290			bra 	_NSNormaliseOptimise
.b2b7					_NSNormaliseLoop:
.b2b7	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b2ba	70 08		bvs $b2c4			bvs 	_NSNExit 					; exit if so with Z flag clear
.b2bc	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; shift mantissa left
.b2bf	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b2c2	80 f3		bra $b2b7			bra 	_NSNormaliseLoop
.b2c4					_NSNExit:
.b2c4	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b2c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ed7					AssignNumber:
.9ed7	5a		phy				phy
.9ed8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9edb	85 36		sta $36				sta 	zTemp0
.9edd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ee0	85 37		sta $37				sta 	zTemp0+1
.9ee2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9ee5	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ee7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9eea	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9eec	c9 08		cmp #$08			cmp 	#NSTFloat
.9eee	f0 2a		beq $9f1a			beq 	_ANFloat
.9ef0	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9ef3	f0 05		beq $9efa			beq		_ANNotFloat
.9ef5	e8		inx				inx
.9ef6	20 17 b2	jsr $b217			jsr 	FloatIntegerPart 			; make it an integer
.9ef9	ca		dex				dex
.9efa					_ANNotFloat:
.9efa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9efd	29 03		and #$03			and 	#3
.9eff	d0 05		bne $9f06			bne 	_ANByteWord
.9f01	20 26 9f	jsr $9f26			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f04	80 1e		bra $9f24			bra 	_ANExit
.9f06					_ANByteWord:
.9f06	48		pha				pha 								; save count
.9f07	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9f0a	92 36		sta ($36)			sta 	(zTemp0)
.9f0c	68		pla				pla
.9f0d	c9 01		cmp #$01			cmp	 	#1
.9f0f	f0 13		beq $9f24			beq 	_ANExit
.9f11	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9f14	a0 01		ldy #$01			ldy 	#1
.9f16	91 36		sta ($36),y			sta 	(zTemp0),y
.9f18	80 0a		bra $9f24			bra 	_ANExit
.9f1a					_ANFloat:
.9f1a	20 26 9f	jsr $9f26			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f1d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f20	a0 04		ldy #$04			ldy 	#4
.9f22	91 36		sta ($36),y			sta 	(zTemp0),y
.9f24					_ANExit:
.9f24	7a		ply				ply
.9f25	60		rts				rts
.9f26					_ANCopy4PackSign:
.9f26	a0 03		ldy #$03			ldy 	#3
.9f28	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9f2b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f2d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9f30	91 36		sta ($36),y			sta 	(zTemp0),y
.9f32	88		dey				dey
.9f33	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9f36	91 36		sta ($36),y			sta 	(zTemp0),y
.9f38	88		dey				dey
.9f39	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f3c	91 36		sta ($36),y			sta 	(zTemp0),y
.9f3e	88		dey				dey
.9f3f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f42	91 36		sta ($36),y			sta 	(zTemp0),y
.9f44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f45					AssignString:
.9f45	5a		phy				phy
.9f46	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f49	85 38		sta $38				sta 	zTemp1
.9f4b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f4e	85 39		sta $39				sta 	zTemp1+1
.9f50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f53	85 36		sta $36				sta 	zTemp0
.9f55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f58	85 37		sta $37				sta 	zTemp0+1
.9f5a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f5c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f5e	f0 23		beq $9f83			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f60	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f61	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f63	e9 02		sbc #$02			sbc 	#2
.9f65	85 3c		sta $3c				sta 	zsTemp
.9f67	a0 01		ldy #$01			ldy 	#1
.9f69	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f6b	e9 00		sbc #$00			sbc 	#0
.9f6d	85 3d		sta $3d				sta 	zsTemp+1
.9f6f	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9f71					_ASGetLength:
.9f71	c8		iny				iny
.9f72	b1 38		lda ($38),y			lda 	(zTemp1),y
.9f74	d0 fb		bne $9f71			bne 	_ASGetLength
.9f76	98		tya				tya 								; is this length <= current length
.9f77	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9f79	90 20		bcc $9f9b			bcc 	_ASCopyString
.9f7b	f0 1e		beq $9f9b			beq 	_ASCopyString
.9f7d	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9f7f	a0 01		ldy #$01			ldy 	#1
.9f81	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f83					_ASNewStringRequired:
.9f83	e8		inx				inx 								; concrete the new string.
.9f84	20 f6 b7	jsr $b7f6			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9f87	ca		dex				dex
.9f88	18		clc				clc
.9f89	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9f8c	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9f8e	92 36		sta ($36)			sta 	(zTemp0)
.9f90	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f93	69 00		adc #$00			adc 	#0
.9f95	a0 01		ldy #$01			ldy 	#1
.9f97	91 36		sta ($36),y			sta 	(zTemp0),y
.9f99	80 0d		bra $9fa8			bra 	_ASExit
.9f9b					_ASCopyString:
.9f9b	a0 00		ldy #$00			ldy 	#0
.9f9d					_ASCopyLoop:
.9f9d	b1 38		lda ($38),y			lda 	(zTemp1),y
.9f9f	c8		iny				iny
.9fa0	c8		iny				iny
.9fa1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fa3	88		dey				dey
.9fa4	c9 00		cmp #$00			cmp 	#0
.9fa6	d0 f5		bne $9f9d			bne 	_ASCopyLoop
.9fa8					_ASExit:
.9fa8	7a		ply				ply
.9fa9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9faa					DereferenceTopTwo:
.9faa	e8		inx				inx
.9fab	20 af 9f	jsr $9faf			jsr 	Dereference 				; deref x+1
.9fae	ca		dex				dex  								; falls through to deref x
.9faf					Dereference:
.9faf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9fb2	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9fb4	f0 57		beq $a00d			beq 	_DRFExit 					; not a reference
.9fb6	5a		phy				phy
.9fb7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9fba	85 36		sta $36				sta 	zTemp0
.9fbc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fbf	85 37		sta $37				sta 	zTemp0+1
.9fc1	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9fc4	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9fc6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fc9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9fcc	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9fce	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9fd0	f0 0f		beq $9fe1			beq 	_DRFDereferenceTwo
.9fd2	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9fd4	f0 39		beq $a00f			beq 	_DRFFull
.9fd6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9fd9	29 03		and #$03			and 	#3
.9fdb	f0 32		beq $a00f			beq 	_DRFFull 					; the whole word
.9fdd	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9fdf	f0 07		beq $9fe8			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9fe1					_DRFDereferenceTwo:
.9fe1	a0 01		ldy #$01			ldy 	#1
.9fe3	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fe5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fe8					_DRFClear23:
.9fe8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9feb	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9fee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9ff1	29 18		and #$18			and 	#NSBTypeMask
.9ff3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ff6	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9ff8	d0 12		bne $a00c			bne 	_DRFNotString
.9ffa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9ffd	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a000	d0 0a		bne $a00c			bne 	_DRFNotString
.a002	a9 0e		lda #$0e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a004	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.a007	a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a009	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.a00c					_DRFNotString
.a00c	7a		ply				ply 								; restore Y and exit
.a00d					_DRFExit:
.a00d	60		rts				rts
.a00e					_DRFNullString:
>a00e	00						.byte 	0
.a00f					_DRFFull:
.a00f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a011	b1 36		lda ($36),y			lda 	(zTemp0),y
.a013	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a016	c8		iny				iny
.a017	b1 36		lda ($36),y			lda 	(zTemp0),y
.a019	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a01c	c8		iny				iny
.a01d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a01f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a022	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.a025	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.a028	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a02a	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.a02d	f0 06		beq $a035			beq 	_DRFNoExponent
.a02f	c8		iny				iny 								; if not, read the exponent as well.
.a030	b1 36		lda ($36),y			lda 	(zTemp0),y
.a032	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a035					_DRFNoExponent:
.a035	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a038	10 0d		bpl $a047			bpl 	_DRFExit2 					; if not, then exit.
.a03a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a03c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a03f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.a042	09 80		ora #$80			ora 	#NSBIsNegative
.a044	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a047					_DRFExit2:
.a047	7a		ply				ply
.a048	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.a049					EncodeNumberStart:
.a049	38		sec				sec
.a04a	80 01		bra $a04d			bra 	EncodeNumberContinue+1
.a04c					EncodeNumberContinue:
.a04c	18		clc				clc
.a04d					EncodeNumber:
.a04d	08		php				php 								; save reset.
.a04e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a050	f0 12		beq $a064			beq 	_ENIsOkay
.a052	c9 30		cmp #$30			cmp 	#"0"
.a054	90 04		bcc $a05a			bcc 	_ENBadNumber
.a056	c9 3a		cmp #$3a			cmp 	#"9"+1
.a058	90 0a		bcc $a064			bcc 	_ENIsOkay
.a05a					_ENBadNumber:
.a05a	28		plp				plp 								; throw saved reset
.a05b	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.a05e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a060	f0 7e		beq $a0e0			beq 	_ENConstructFinal
.a062					_ENFail:
.a062	18		clc				clc 								; not allowed
.a063	60		rts				rts
.a064					_ENIsOkay:
.a064	28		plp				plp 								; are we restarting
.a065	90 15		bcc $a07c			bcc 	_ENNoRestart
.a067					_ENStartEncode:
.a067	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a069	f0 0c		beq $a077			beq 	_ENFirstDP
.a06b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a06d	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.a070	a9 01		lda #$01			lda 	#ESTA_Low
.a072					_ENExitChange:
.a072	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a075	38		sec				sec
.a076	60		rts				rts
.a077					_ENFirstDP:
.a077	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero 					; clear integer part
.a07a	80 3f		bra $a0bb			bra 	_ESTASwitchFloat			; go straight to float and exi
.a07c					_ENNoRestart:
.a07c	48		pha				pha 								; save on stack.
.a07d	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a080	c9 01		cmp #$01			cmp 	#ESTA_Low
.a082	f0 09		beq $a08d			beq  	_ESTALowState
.a084	c9 02		cmp #$02			cmp 	#ESTA_High
.a086	f0 29		beq $a0b1			beq 	_ESTAHighState
.a088	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a08a	f0 3b		beq $a0c7			beq 	_ESTADecimalState
>a08c	db						.byte 	$DB 						; causes a break in the emulator
.a08d					_ESTALowState:
.a08d	68		pla				pla 								; get value back
.a08e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a090	f0 29		beq $a0bb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a092	29 0f		and #$0f			and 	#15 						; make digit
.a094	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a097	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a09a	0a		asl a				asl 	a
.a09b	0a		asl a				asl 	a
.a09c	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a09f	0a		asl a				asl 	a
.a0a0	6d 86 04	adc $0486			adc 	DigitTemp
.a0a3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0a6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a0a8	90 05		bcc $a0af			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0aa	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0ac	8d 85 04	sta $0485			sta 	EncodeState
.a0af					_ESTANoSwitch:
.a0af	38		sec				sec
.a0b0	60		rts				rts
.a0b1					_ESTAHighState:
.a0b1	68		pla				pla 								; get value back
.a0b2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a0b4	f0 05		beq $a0bb			beq 	_ESTASwitchFloat
.a0b6	20 1a a1	jsr $a11a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a0b9	38		sec				sec
.a0ba	60		rts				rts
.a0bb					_ESTASwitchFloat:
.a0bb	9c 87 04	stz $0487			stz 	DecimalCount
.a0be	e8		inx				inx 								; zero the decimal additive.
.a0bf	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.a0c2	ca		dex				dex
.a0c3	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a0c5	80 ab		bra $a072			bra 	_ENExitChange
.a0c7					_ESTADecimalState:
.a0c7	68		pla				pla 								; digit.
.a0c8	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a0ca	f0 96		beq $a062			beq 	_ENFail
.a0cc	e8		inx				inx 								; put digit into fractional part of X+1
.a0cd	20 1a a1	jsr $a11a			jsr 	ESTAShiftDigitIntoMantissa
.a0d0	ca		dex				dex
.a0d1	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a0d4	ad 87 04	lda $0487			lda 	DecimalCount
.a0d7	c9 0b		cmp #$0b			cmp 	#11
.a0d9	f0 02		beq $a0dd			beq 	_ESTADSFail
.a0db	38		sec				sec
.a0dc	60		rts				rts
.a0dd					_ESTADSFail:
.a0dd	4c fa b4	jmp $b4fa			jmp 	RangeError
.a0e0					_ENConstructFinal:
.a0e0	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a0e3	f0 33		beq $a118			beq 	_ENCFExit 					; no decimals
.a0e5	5a		phy				phy
.a0e6	0a		asl a				asl 	a 							; x 4 and CLC
.a0e7	0a		asl a				asl 	a
.a0e8	6d 87 04	adc $0487			adc 	DecimalCount
.a0eb	a8		tay				tay
.a0ec	b9 b9 b4	lda $b4b9,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a0ef	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a0f2	b9 ba b4	lda $b4ba,y			lda 	DecimalScalarTable-5+1,y
.a0f5	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a0f8	b9 bb b4	lda $b4bb,y			lda 	DecimalScalarTable-5+2,y
.a0fb	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a0fe	b9 bc b4	lda $b4bc,y			lda 	DecimalScalarTable-5+3,y
.a101	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a104	b9 bd b4	lda $b4bd,y			lda 	DecimalScalarTable-5+4,y
.a107	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a10a	a9 08		lda #$08			lda 	#NSTFloat
.a10c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a10f	7a		ply				ply
.a110	e8		inx				inx 								; multiply decimal const by decimal scalar
.a111	20 41 b2	jsr $b241			jsr 	FloatMultiply
.a114	ca		dex				dex
.a115	20 ce b0	jsr $b0ce			jsr 	FloatAdd 					; add to integer part.
.a118					_ENCFExit:
.a118	18		clc				clc 								; reject the digit.
.a119	60		rts				rts
.a11a					ESTAShiftDigitIntoMantissa:
.a11a	29 0f		and #$0f			and 	#15 						; save digit
.a11c	48		pha				pha
.a11d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a120	48		pha				pha
.a121	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a124	48		pha				pha
.a125	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a128	48		pha				pha
.a129	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a12c	48		pha				pha
.a12d	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; x 2
.a130	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; x 4
.a133	18		clc				clc 								; pop mantissa and add
.a134	68		pla				pla
.a135	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a138	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a13b	68		pla				pla
.a13c	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a13f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a142	68		pla				pla
.a143	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a146	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a149	68		pla				pla
.a14a	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a14d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a150	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; x 10
.a153	68		pla				pla 								; add digit
.a154	18		clc				clc
.a155	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a158	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a15b	90 0d		bcc $a16a			bcc 	_ESTASDExit
.a15d	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a160	d0 08		bne $a16a			bne 	_ESTASDExit
.a162	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a165	d0 03		bne $a16a			bne 	_ESTASDExit
.a167	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a16a					_ESTASDExit:
.a16a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a16b					EvaluateTerm:
.a16b	b1 30		lda ($30),y			lda 	(codePtr),y
.a16d	30 18		bmi $a187			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a16f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a171	b0 6f		bcs $a1e2			bcs 	_ETVariable
.a173	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a175	90 6e		bcc $a1e5			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a177	c9 3a		cmp #$3a			cmp 	#'9'+1
.a179	b0 6a		bcs $a1e5			bcs 	_ETPuncUnary
.a17b	20 49 a0	jsr $a049			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a17e					_ETNumber:
.a17e	c8		iny				iny 								; keep encoding until we have the numbers
.a17f	b1 30		lda ($30),y			lda 	(codePtr),y
.a181	20 4c a0	jsr $a04c			jsr 	EncodeNumberContinue
.a184	b0 f8		bcs $a17e			bcs 	_ETNumber 					; go back if accepted.
.a186	60		rts				rts
.a187					_ETCheckUnary:
.a187	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a189	f0 41		beq $a1cc			beq 	_ETString
.a18b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a18d	f0 12		beq $a1a1			beq 	_ETHexConstant
.a18f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a191	90 0b		bcc $a19e			bcc 	_ETSyntaxError
.a193	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a195	b0 07		bcs $a19e			bcs 	_ETSyntaxError
.a197	da		phx				phx 								; push X on the stack
.a198	0a		asl a				asl 	a 							; put vector x 2 into X
.a199	aa		tax				tax
.a19a	c8		iny				iny 								; consume unary function token
.a19b	7c 8e 96	jmp ($968e,x)			jmp 	(VectorSet0,x) 				; and do it.
.a19e					_ETSyntaxError:
.a19e	4c f5 b4	jmp $b4f5			jmp 	SyntaxError
.a1a1					_ETHexConstant:
.a1a1	c8		iny				iny 								; skip #
.a1a2	c8		iny				iny 								; skip count
.a1a3	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero 					; clear result
.a1a6					_ETHLoop:
.a1a6	b1 30		lda ($30),y			lda 	(codePtr),y
.a1a8	c8		iny				iny 								; and consume
.a1a9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a1ab	f0 1e		beq $a1cb			beq 	_ETHExit
.a1ad	48		pha				pha 								; save on stack.
.a1ae	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; x 2
.a1b1	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; x 4
.a1b4	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; x 8
.a1b7	20 d9 a6	jsr $a6d9			jsr 	NSMShiftLeft 				; x 16
.a1ba	68		pla				pla 								; ASCII
.a1bb	c9 41		cmp #$41			cmp 	#'A'
.a1bd	90 02		bcc $a1c1			bcc 	_ETHNotChar
.a1bf	e9 07		sbc #$07			sbc 	#7
.a1c1					_ETHNotChar:
.a1c1	29 0f		and #$0f			and 	#15 						; digit now
.a1c3	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a1c6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1c9	80 db		bra $a1a6			bra 	_ETHLoop 					; go round.
.a1cb					_ETHExit:
.a1cb	60		rts				rts
.a1cc					_ETString:
.a1cc	c8		iny				iny 								; look at length
.a1cd	b1 30		lda ($30),y			lda 	(codePtr),y
.a1cf	48		pha				pha
.a1d0	c8		iny				iny 								; first character
.a1d1	20 0e a7	jsr $a70e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a1d4	68		pla				pla 								; restore count and save
.a1d5	85 36		sta $36				sta 	zTemp0
.a1d7	98		tya				tya 								; add length to Y to skip it.
.a1d8	18		clc				clc
.a1d9	65 36		adc $36				adc 	zTemp0
.a1db	a8		tay				tay
.a1dc	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a1de	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a1e1	60		rts				rts
.a1e2					_ETVariable:
.a1e2	4c 3c a2	jmp $a23c			jmp 	VariableHandler
.a1e5					_ETPuncUnary:
.a1e5	c8		iny				iny 								; consume the unary character
.a1e6	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a1e8	f0 2d		beq $a217			beq 	_ETUnaryNegate
.a1ea	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a1ec	f0 39		beq $a227			beq 	_ETDereference
.a1ee	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a1f0	f0 43		beq $a235			beq 	_ETParenthesis
.a1f2	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a1f4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a1f6	f0 06		beq $a1fe			beq 	_ETIndirection
.a1f8	e6 36		inc $36				inc 	zTemp0
.a1fa	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a1fc	d0 a0		bne $a19e			bne 	_ETSyntaxError
.a1fe					_ETIndirection:
.a1fe	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a200	1a		inc a				inc 	a
.a201	48		pha				pha
.a202	20 6b a1	jsr $a16b			jsr 	EvaluateTerm				; evaluate the term
.a205	20 af 9f	jsr $9faf			jsr 	Dereference 				; dereference it.
.a208	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a20b	d0 07		bne $a214			bne 	_ETTypeMismatch
.a20d	68		pla				pla 								; indirection 1-2
.a20e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a210	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a213	60		rts				rts
.a214					_ETTypeMismatch:
.a214	4c ff b4	jmp $b4ff			jmp 	TypeError
.a217					_ETUnaryNegate:
.a217	20 6b a1	jsr $a16b			jsr 	EvaluateTerm				; evaluate the term
.a21a	20 af 9f	jsr $9faf			jsr 	Dereference 				; dereference it.
.a21d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a220	29 10		and #$10			and 	#NSTString
.a222	d0 f0		bne $a214			bne 	_ETTypeMismatch
.a224	4c 70 a6	jmp $a670			jmp 	NSMNegate  					; just toggles the sign bit.
.a227					_ETDereference:
.a227	20 6b a1	jsr $a16b			jsr 	EvaluateTerm				; evaluate the term
.a22a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a22d	29 20		and #$20			and 	#NSBIsReference
.a22f	f0 e3		beq $a214			beq 	_ETTypeMismatch
.a231	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a234	60		rts				rts
.a235					_ETParenthesis:
.a235	20 9a 9e	jsr $9e9a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a238	20 07 af	jsr $af07			jsr 	CheckRightBracket 			; check for )
.a23b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a23c					VariableHandler:
.a23c	b1 30		lda ($30),y			lda 	(codePtr),y
.a23e	18		clc				clc
.a23f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a241	85 37		sta $37				sta 	zTemp0+1
.a243	c8		iny				iny
.a244	b1 30		lda ($30),y			lda 	(codePtr),y
.a246	85 36		sta $36				sta 	zTemp0
.a248	c8		iny				iny
.a249	18		clc				clc									; copy variable address+3 to mantissa
.a24a	69 03		adc #$03			adc 	#3
.a24c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a24f	a5 37		lda $37				lda 	zTemp0+1
.a251	69 00		adc #$00			adc 	#0
.a253	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a256	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a259	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a25c	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a25f	5a		phy				phy
.a260	a0 02		ldy #$02			ldy 	#2 							; read type
.a262	b1 36		lda ($36),y			lda 	(zTemp0),y
.a264	7a		ply				ply
.a265	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a267	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a269	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a26c	29 04		and #$04			and 	#NSBIsArray
.a26e	d0 01		bne $a271			bne 	_VHArray
.a270	60		rts				rts
.a271					_VHArray:
.a271	e8		inx				inx
.a272	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a275	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a277	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a27a	b1 30		lda ($30),y			lda 	(codePtr),y
.a27c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a27e	d0 06		bne $a286			bne 	_VHNoSecondIndex
.a280	c8		iny				iny 								; skip the comma
.a281	e8		inx				inx
.a282	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a285	ca		dex				dex
.a286					_VHNoSecondIndex:
.a286	ca		dex				dex 								; set X back.
.a287	20 07 af	jsr $af07			jsr 	CheckRightBracket 			; and check the right bracket.
.a28a	5a		phy				phy 								; save position
.a28b	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a28d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a28f	f0 6b		beq $a2fc			beq 	_VHBadIndex
.a291	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a294	85 3e		sta $3e				sta 	zaTemp
.a296	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a299	85 3f		sta $3f				sta 	zaTemp+1
.a29b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a29d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a29f	f0 02		beq $a2a3			beq 	_VHHas2Mask
.a2a1	a9 ff		lda #$ff			lda 	#$FF
.a2a3					_VHHas2Mask:
.a2a3	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a2a6	f0 54		beq $a2fc			beq 	_VHBadIndex
.a2a8	0a		asl a				asl 	a 							; carry will be set if a second index
.a2a9	90 09		bcc $a2b4			bcc 	_VHCheckFirstIndex
.a2ab	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a2ad	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2af	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a2b2	90 48		bcc $a2fc			bcc 	_VHBadIndex
.a2b4					_VHCheckFirstIndex:
.a2b4	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a2b6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2b8	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a2bb	90 3f		bcc $a2fc			bcc 	_VHBadIndex
.a2bd	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a2bf	64 37		stz $37				stz 	zTemp0+1
.a2c1	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a2c4	30 0f		bmi $a2d5			bmi 	_VHNoMultiply
.a2c6	da		phx				phx
.a2c7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a2ca	48		pha				pha
.a2cb	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a2cd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2cf	1a		inc a				inc 	a 							; add 1 for zero base
.a2d0	fa		plx				plx
.a2d1	20 91 b3	jsr $b391			jsr 	Multiply8x8 				; calculate -> Z0
.a2d4	fa		plx				plx
.a2d5					_VHNoMultiply:
.a2d5	18		clc				clc
.a2d6	a5 36		lda $36				lda 	zTemp0
.a2d8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a2db	85 36		sta $36				sta 	zTemp0
.a2dd	a5 37		lda $37				lda 	zTemp0+1
.a2df	69 00		adc #$00			adc 	#0
.a2e1	85 37		sta $37				sta 	zTemp0+1
.a2e3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a2e6	20 c3 8d	jsr $8dc3			jsr 	ScaleByBaseType
.a2e9	18		clc				clc
.a2ea	b2 3e		lda ($3e)			lda 	(zaTemp)
.a2ec	65 36		adc $36				adc 	zTemp0
.a2ee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2f1	a0 01		ldy #$01			ldy 	#1
.a2f3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2f5	65 37		adc $37				adc 	zTemp0+1
.a2f7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2fa	7a		ply				ply 								; restore position
.a2fb	60		rts				rts
.a2fc					_VHBadIndex:
.a2fc	a9 17		lda #$17		lda	#23
.a2fe	4c 89 9a	jmp $9a89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b2c7					AbsUnary:
.b2c7	fa		plx				plx 								; restore stack pos
.b2c8	20 04 a6	jsr $a604			jsr 	EvaluateNumber 				; get a float or int
.b2cb	20 07 af	jsr $af07			jsr 	CheckRightBracket
.b2ce	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b2d1	29 7f		and #$7f			and 	#$7F
.b2d3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a301					AllocUnary:
.a301	fa		plx				plx 								; restore stack pos
.a302	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger		; get bytes required.
.a305	20 07 af	jsr $af07			jsr 	CheckRightBracket
.a308	da		phx				phx 								; save X/Y
.a309	5a		phy				phy
.a30a	8a		txa				txa 								; copy X into Y
.a30b	a8		tay				tay
.a30c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a30f	aa		tax				tax
.a310	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a313	20 20 a3	jsr $a320			jsr 	AllocateXABytes 			; allocate memory
.a316	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a319	8a		txa				txa
.a31a	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a31d	7a		ply				ply
.a31e	fa		plx				plx
.a31f	60		rts				rts
.a320					AllocateXABytes:
.a320	5a		phy				phy
.a321	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a324	84 36		sty $36				sty 	zTemp0
.a326	5a		phy				phy
.a327	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a32a	84 37		sty $37				sty 	zTemp0+1
.a32c	5a		phy				phy
.a32d	18		clc				clc 								; add to low memory pointer
.a32e	6d 8c 04	adc $048c			adc 	lowMemPtr
.a331	8d 8c 04	sta $048c			sta 	lowMemPtr
.a334	8a		txa				txa
.a335	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a338	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a33b	b0 2f		bcs $a36c			bcs 	CISSMemory
.a33d	20 5e a3	jsr $a35e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a340					_ClearMemory:
.a340	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a343	c5 36		cmp $36				cmp 	zTemp0
.a345	d0 07		bne $a34e			bne 	_CMClearNext
.a347	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a34a	c5 37		cmp $37				cmp 	zTemp0+1
.a34c	f0 0c		beq $a35a			beq 	_CMExit
.a34e					_CMClearNext:
.a34e	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a350	92 36		sta ($36)			sta 	(zTemp0)
.a352	e6 36		inc $36				inc 	zTemp0
.a354	d0 ea		bne $a340			bne 	_ClearMemory
.a356	e6 37		inc $37				inc		zTemp0+1
.a358	80 e6		bra $a340			bra 	_ClearMemory
.a35a					_CMExit:
.a35a	fa		plx				plx
.a35b	68		pla				pla
.a35c	7a		ply				ply
.a35d	60		rts				rts
.a35e					CheckIdentifierStringSpace:
.a35e	48		pha				pha
.a35f	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a362	18		clc				clc
.a363	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a365	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a368	b0 02		bcs $a36c			bcs 	CISSMemory
.a36a	68		pla				pla
.a36b	60		rts				rts
.a36c					CISSMemory:
.a36c	a9 06		lda #$06		lda	#6
.a36e	4c 89 9a	jmp $9a89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b2d7					AscUnary:
.b2d7	fa		plx				plx 								; restore stack pos
.b2d8	20 0f a6	jsr $a60f			jsr 	EvaluateString 				; get a string
.b2db	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b2dd	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.b2e0	20 07 af	jsr $af07			jsr 	CheckRightBracket
.b2e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b2e4					FracUnary:
.b2e4	fa		plx				plx 								; restore stack pos
.b2e5	20 04 a6	jsr $a604			jsr 	EvaluateNumber 				; get a float or int
.b2e8	20 07 af	jsr $af07			jsr 	CheckRightBracket
.b2eb	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b2ee	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b2f0	f0 04		beq $b2f6			beq 	_IUZero
.b2f2	20 b4 b1	jsr $b1b4			jsr 	FloatFractionalPart
.b2f5	60		rts				rts
.b2f6					_IUZero:
.b2f6	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.b2f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b2fa					IntUnary:
.b2fa	fa		plx				plx 								; restore stack pos
.b2fb	20 04 a6	jsr $a604			jsr 	EvaluateNumber 				; get a float or int
.b2fe	20 07 af	jsr $af07			jsr 	CheckRightBracket
.b301	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b304	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b306	f0 03		beq $b30b			beq 	_IUExit
.b308	20 17 b2	jsr $b217			jsr 	FloatIntegerPart
.b30b					_IUExit:
.b30b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b30c					LenUnary:
.b30c	fa		plx				plx 								; restore stack pos
.b30d	20 0f a6	jsr $a60f			jsr 	EvaluateString 				; get a string
.b310	5a		phy				phy
.b311	a0 00		ldy #$00			ldy 	#0 							; find length
.b313					_LenFind:
.b313	b1 36		lda ($36),y			lda 	(zTemp0),y
.b315	f0 06		beq $b31d			beq 	_LenExit
.b317	c8		iny				iny
.b318	d0 f9		bne $b313			bne 	_LenFind
.b31a	4c fa b4	jmp $b4fa			jmp 	RangeError 					; string > 255
.b31d					_LenExit:
.b31d	98		tya				tya
.b31e	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.b321	7a		ply				ply
.b322	20 07 af	jsr $af07			jsr 	CheckRightBracket
.b325	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a371					Unary_Min:
.a371	a9 01		lda #$01			lda 	#1
.a373	80 02		bra $a377			bra 	UnaryMinMaxMain
.a375					Unary_Max:
.a375	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a377					UnaryMinMaxMain:
.a377	fa		plx				plx 								; get index on number stack
.a378	48		pha				pha 								; save comparator
.a379	20 fb a5	jsr $a5fb			jsr 	EvaluateValue 				; get the first value.
.a37c					_UMMMLoop:
.a37c	b1 30		lda ($30),y			lda 	(codePtr),y
.a37e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a380	f0 22		beq $a3a4			beq 	_UMMMDone
.a382	20 0f af	jsr $af0f			jsr 	CheckComma 					; must be a comma
.a385	e8		inx				inx
.a386	20 fb a5	jsr $a5fb			jsr 	EvaluateValue
.a389	ca		dex				dex
.a38a	20 9b a6	jsr $a69b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a38d	e8		inx				inx
.a38e	20 9b a6	jsr $a69b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a391	e8		inx				inx
.a392	20 41 9b	jsr $9b41			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a395	ca		dex				dex
.a396	ca		dex				dex
.a397	85 36		sta $36				sta 	zTemp0 						; save required result
.a399	68		pla				pla 								; get and save comparator
.a39a	48		pha				pha
.a39b	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a39d	d0 dd		bne $a37c			bne 	_UMMMLoop
.a39f	20 a7 a3	jsr $a3a7			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3a2	80 d8		bra $a37c			bra 	_UMMMLoop
.a3a4					_UMMMDone:
.a3a4	68		pla				pla 								; throw the comparator
.a3a5	c8		iny				iny 								; skip )
.a3a6	60		rts				rts
.a3a7					ExpCopyAboveDown:
.a3a7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a3aa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3ad	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a3b0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3b3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a3b6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3b9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3bc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3bf	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a3c2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3c5	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a3c8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a3cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a3cc					Unary_Not:
.a3cc	fa		plx				plx
.a3cd	20 27 a6	jsr $a627			jsr 	EvaluateInteger 			; get integer
.a3d0	20 07 af	jsr $af07			jsr 	CheckRightBracket
.a3d3	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; zero mantissa ?
.a3d6	f0 04		beq $a3dc			beq 	_NotZero
.a3d8	20 c4 a6	jsr $a6c4			jsr 	NSMSetZero
.a3db	60		rts				rts
.a3dc					_NotZero:
.a3dc	4c f6 9a	jmp $9af6			jmp 	ReturnTrue
.a3df					_UNBad:
.a3df	4c 04 b5	jmp $b504			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a3e2					Unary_Random:
.a3e2	fa		plx				plx
.a3e3	20 61 a4	jsr $a461			jsr 	Random32Bit 				; get a random number
.a3e6	20 46 a4	jsr $a446			jsr 	URCopyToMantissa  			; put in mantissa
.a3e9	b1 30		lda ($30),y			lda 	(codePtr),y
.a3eb	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a3ed	f0 08		beq $a3f7			beq 	_URNoModulus
.a3ef	e8		inx				inx
.a3f0	20 3c a6	jsr $a63c			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a3f3	ca		dex				dex
.a3f4	20 8b af	jsr $af8b			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a3f7					_URNoModulus:
.a3f7	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a3fa	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a3fd	20 07 af	jsr $af07			jsr 	CheckRightBracket
.a400	60		rts				rts
.a401					Unary_Rnd:
.a401	fa		plx				plx
.a402	20 04 a6	jsr $a604			jsr 	EvaluateNumber 				; number to use.
.a405	20 07 af	jsr $af07			jsr 	CheckRightBracket 			; closing bracket
.a408	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a40b	f0 2b		beq $a438			beq 	_URCopySeed
.a40d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a410	10 23		bpl $a435			bpl 	_URDontSeed
.a412	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a415	49 17		eor #$17			eor 	#$17
.a417	8d 88 04	sta $0488			sta 	RandomSeed+0
.a41a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a41d	49 a5		eor #$a5			eor 	#$A5
.a41f	8d 89 04	sta $0489			sta 	RandomSeed+1
.a422	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a425	49 c2		eor #$c2			eor 	#$C2
.a427	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a42a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a42d	49 9d		eor #$9d			eor 	#$9D
.a42f	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a432	20 61 a4	jsr $a461			jsr 	Random32Bit
.a435					_URDontSeed:
.a435	20 61 a4	jsr $a461			jsr 	Random32Bit 				; generate a number.
.a438					_URCopySeed:
.a438	20 46 a4	jsr $a446			jsr 	URCopyToMantissa 			; copy into mantissa
.a43b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a43d	8d 28 04	sta $0428			sta 	NSExponent
.a440	a9 08		lda #$08			lda 	#NSTFloat
.a442	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a445	60		rts				rts
.a446					URCopyToMantissa:
.a446	ad 88 04	lda $0488			lda 	RandomSeed+0
.a449	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a44c	ad 89 04	lda $0489			lda 	RandomSeed+1
.a44f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a452	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a455	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a458	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a45b	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a45d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a460	60		rts				rts
.a461					Random32Bit:
.a461	5a		phy				phy
.a462	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a464	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a467	d0 03		bne $a46c			bne 	_Random1
.a469	a8		tay				tay 								; if so do it 256 times
.a46a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a46c					_Random1:
.a46c	0a		asl a				asl 	a 							; LSFR RNG
.a46d	2e 89 04	rol $0489			rol 	RandomSeed+1
.a470	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a473	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a476	90 02		bcc $a47a			bcc 	_Random2
.a478	49 c5		eor #$c5			eor 	#$C5
.a47a					_Random2:
.a47a	88		dey				dey
.a47b	d0 ef		bne $a46c			bne 	_Random1
.a47d	8d 88 04	sta $0488			sta 	RandomSeed+0
.a480	7a		ply				ply
.a481	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b326					SgnUnary:
.b326	fa		plx				plx 								; restore stack pos
.b327	20 04 a6	jsr $a604			jsr 	EvaluateNumber 				; get a float or int
.b32a	20 07 af	jsr $af07			jsr 	CheckRightBracket
.b32d	20 f4 a6	jsr $a6f4			jsr 	NSMIsZero 					; if zero
.b330	f0 10		beq $b342			beq 	_SGZero  					; return Int Zero
.b332	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b335	48		pha				pha
.b336	a9 01		lda #$01			lda 	#1 							; set to 1
.b338	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.b33b	68		pla				pla
.b33c	29 80		and #$80			and		#$80 						; copy the sign byte out
.b33e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b341	60		rts				rts
.b342	20 c4 a6	jsr $a6c4	_SGZero:jsr 	NSMSetZero
.b345	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b346					ValUnary:
.b346	fa		plx				plx 								; restore stack pos
.b347	20 5c b3	jsr $b35c			jsr 	ValMainCode 				; do the main val() code
.b34a	b0 01		bcs $b34d			bcs 	_VUError 					; couldn't convert
.b34c	60		rts				rts
.b34d					_VUError:
.b34d	4c ff b4	jmp $b4ff			jmp 	TypeError
.b350					IsValUnary:
.b350	fa		plx				plx 								; restore stack pos
.b351	20 5c b3	jsr $b35c			jsr 	ValMainCode 				; do the main val() code
.b354	b0 03		bcs $b359			bcs 	_VUBad
.b356	4c f6 9a	jmp $9af6			jmp 	ReturnTrue
.b359					_VUBad:
.b359	4c 02 9b	jmp $9b02			jmp 	ReturnFalse
.b35c					ValMainCode:
.b35c	20 0f a6	jsr $a60f			jsr 	EvaluateString 				; get a string
.b35f	20 07 af	jsr $af07			jsr 	CheckRightBracket 			; check right bracket present
.b362	5a		phy				phy
.b363	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b365	f0 17		beq $b37e			beq 	_VMCFail2
.b367	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b369	48		pha				pha 								; save first character
.b36a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b36c	d0 01		bne $b36f			bne 	_VMCStart
.b36e	c8		iny				iny 								; skip over -
.b36f					_VMCStart:
.b36f	38		sec				sec 								; initialise first time round.
.b370					_VMCNext:
.b370	c8		iny				iny 								; pre-increment
.b371	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b373	f0 0c		beq $b381			beq 	_VMCSuccess 				; successful.
.b375	20 4d a0	jsr $a04d			jsr 	EncodeNumber 				; send it to the number-builder
.b378	90 03		bcc $b37d			bcc 	_VMCFail 					; if failed, give up.
.b37a	18		clc				clc 								; next time round, countinue
.b37b	80 f3		bra $b370			bra 	_VMCNext
.b37d					_VMCFail:
.b37d	68		pla				pla
.b37e					_VMCFail2:
.b37e	7a		ply				ply
.b37f	38		sec				sec
.b380	60		rts				rts
.b381					_VMCSuccess:
.b381	a9 00		lda #$00			lda 	#0 							; construct final
.b383	20 4d a0	jsr $a04d			jsr 	EncodeNumber
.b386	68		pla				pla
.b387	c9 2d		cmp #$2d			cmp 	#"-"
.b389	d0 03		bne $b38e			bne 	_VMCNotNegative
.b38b	20 70 a6	jsr $a670			jsr		NSMNegate
.b38e					_VMCNotNegative:
.b38e	7a		ply				ply
.b38f	18		clc				clc
.b390	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a482					ChrUnary:
.a482	fa		plx				plx 								; restore stack pos
.a483	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger			; get value
.a486	48		pha				pha
.a487	20 07 af	jsr $af07			jsr 	CheckRightBracket
.a48a	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a48c	20 77 b8	jsr $b877			jsr 	StringTempAllocate
.a48f	68		pla				pla 								; write number to it
.a490	20 b5 b8	jsr $b8b5			jsr 	StringTempWrite
.a493	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a494					SpcUnary:
.a494	fa		plx				plx 								; restore stack pos
.a495	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger			; get value
.a498	5a		phy				phy
.a499	48		pha				pha 								; save count
.a49a	20 77 b8	jsr $b877			jsr 	StringTempAllocate
.a49d	7a		ply				ply 								; to do count in Y
.a49e					_SpcLoop:
.a49e	c0 00		cpy #$00			cpy 	#0
.a4a0	f0 08		beq $a4aa			beq 	_SpcExit
.a4a2	a9 20		lda #$20			lda 	#32
.a4a4	20 b5 b8	jsr $b8b5			jsr 	StringTempWrite
.a4a7	88		dey				dey
.a4a8	80 f4		bra $a49e			bra 	_SPCLoop
.a4aa					_SpcExit:
.a4aa	7a		ply				ply
.a4ab	20 07 af	jsr $af07			jsr 	CheckRightBracket
.a4ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4af					Unary_Str:
.a4af	fa		plx				plx
.a4b0	20 04 a6	jsr $a604			jsr 	EvaluateNumber  			; get number
.a4b3	20 07 af	jsr $af07			jsr 	CheckRightBracket 			; closing bracket
.a4b6	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4b8	20 d1 a4	jsr $a4d1			jsr 	ConvertNumberToString 		; do the conversion.
.a4bb	a9 21		lda #$21			lda		#33 						; create buffer
.a4bd	20 77 b8	jsr $b877			jsr 	StringTempAllocate 			; allocate memory
.a4c0	da		phx				phx
.a4c1	a2 00		ldx #$00			ldx 	#0
.a4c3					_USCopy:
.a4c3	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a4c6	20 b5 b8	jsr $b8b5			jsr 	StringTempWrite
.a4c9	e8		inx				inx
.a4ca	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a4cd	d0 f4		bne $a4c3			bne 	_USCopy
.a4cf	fa		plx				plx
.a4d0	60		rts				rts
.a4d1					ConvertNumberToString:
.a4d1	5a		phy				phy 								; save code position
.a4d2	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a4d5	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a4d8	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a4db	10 0a		bpl $a4e7			bpl 	_CNTSNotNegative
.a4dd	29 7f		and #$7f			and 	#$7F 						; make +ve
.a4df	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a4e2	a9 2d		lda #$2d			lda 	#"-"
.a4e4	20 4d a5	jsr $a54d			jsr 	WriteDecimalBuffer
.a4e7					_CNTSNotNegative:
.a4e7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a4ea	f0 15		beq $a501			beq 	_CNTSNotFloat
.a4ec	e8		inx				inx 								; round up
.a4ed	a9 01		lda #$01			lda 	#1
.a4ef	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.a4f2	ca		dex				dex
.a4f3	bd 28 04	lda $0428,x			lda		NSExponent,x
.a4f6	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a4f9	a9 08		lda #$08			lda 	#NSTFloat
.a4fb	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a4fe	20 ce b0	jsr $b0ce			jsr 	FloatAdd
.a501					_CNTSNotFloat:
.a501	20 2f a5	jsr $a52f			jsr 	MakePlusTwoString
.a504	20 b4 b1	jsr $b1b4			jsr 	FloatFractionalPart 		; get the fractional part
.a507	20 78 b2	jsr $b278			jsr 	NSNormalise					; normalise , exit if zero
.a50a	f0 21		beq $a52d			beq 	_CNTSExit
.a50c	a9 2e		lda #$2e			lda 	#"."
.a50e	20 4d a5	jsr $a54d			jsr 	WriteDecimalBuffer 			; write decimal place
.a511					_CNTSDecimal:
.a511	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a514	30 17		bmi $a52d			bmi 	_CNTSExit
.a516	e8		inx				inx 								; x 10.0
.a517	a9 0a		lda #$0a			lda 	#10
.a519	20 c6 a6	jsr $a6c6			jsr 	NSMSetByte
.a51c	a9 08		lda #$08			lda 	#NSTFloat
.a51e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a521	ca		dex				dex
.a522	20 41 b2	jsr $b241			jsr 	FloatMultiply
.a525	20 2f a5	jsr $a52f			jsr 	MakePlusTwoString
.a528	20 b4 b1	jsr $b1b4			jsr 	FloatFractionalPart 		; get the fractional part
.a52b	80 e4		bra $a511			bra 	_CNTSDecimal 				; keep going.
.a52d					_CNTSExit:
.a52d	7a		ply				ply
.a52e	60		rts				rts
.a52f					MakePlusTwoString:
.a52f	da		phx				phx
.a530	20 9b a6	jsr $a69b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a533	e8		inx				inx 								; access it
.a534	e8		inx				inx
.a535	20 17 b2	jsr $b217			jsr 	FloatIntegerPart 			; make it an integer
.a538	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a53a	20 78 b0	jsr $b078			jsr 	ConvertInt32
.a53d	a2 00		ldx #$00			ldx	 	#0
.a53f					_MPTSCopy:
.a53f	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a542	20 4d a5	jsr $a54d			jsr 	WriteDecimalBuffer
.a545	e8		inx				inx
.a546	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a549	d0 f4		bne $a53f			bne 	_MPTSCopy
.a54b	fa		plx				plx
.a54c	60		rts				rts
.a54d					WriteDecimalBuffer:
.a54d	da		phx				phx
.a54e	ae 95 04	ldx $0495			ldx 	dbOffset
.a551	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a554	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a557	ee 95 04	inc $0495			inc 	dbOffset
.a55a	fa		plx				plx
.a55b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a55c					Unary_Left:
.a55c	fa		plx				plx
.a55d	18		clc				clc 								; only one parameter
.a55e	20 d3 a5	jsr $a5d3			jsr 	SubstringInitial 			; set up.
.a561	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a564	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a567	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a56a	80 2c		bra $a598			bra 	SubstringMain
.a56c					Unary_Right:
.a56c	fa		plx				plx
.a56d	18		clc				clc 								; only one parameter
.a56e	20 d3 a5	jsr $a5d3			jsr 	SubstringInitial 			; set up.
.a571	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a574	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a577	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a57a	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a57d	b0 02		bcs $a581			bcs 	_URNotUnderflow
.a57f	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a581					_URNotUnderFlow:
.a581	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a584	80 12		bra $a598			bra 	SubStringMain
.a586					Unary_Mid:
.a586	fa		plx				plx
.a587	38		sec				sec 								; two parameters
.a588	20 d3 a5	jsr $a5d3			jsr 	SubstringInitial 			; set up.
.a58b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a58e	f0 05		beq $a595			beq 	_UMError
.a590	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a593	80 03		bra $a598			bra 	SubStringMain
.a595					_UMError:
.a595	4c 04 b5	jmp $b504			jmp 	ArgumentError
.a598					SubStringMain:
.a598	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a59b	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a59e	b0 2d		bcs $a5cd			bcs 	_SSMNull 					; if so, return an empty string.
.a5a0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5a3	f0 28		beq $a5cd			beq 	_SSMNull 					; return empty string.
.a5a5	18		clc				clc 								; add the offset +1 to the address and
.a5a6	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a5a9	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a5ac	85 36		sta $36				sta 	zTemp0
.a5ae	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a5b1	69 00		adc #$00			adc 	#0
.a5b3	85 37		sta $37				sta 	zTemp0+1
.a5b5					_SSMNoCarry:
.a5b5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5b8	20 77 b8	jsr $b877			jsr 	StringTempAllocate 			; allocate that many characters
.a5bb	5a		phy				phy 								; save Y
.a5bc	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5be					_SSMCopy:
.a5be	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5c0	f0 09		beq $a5cb			beq 	_SSMEString 				; no more to copy
.a5c2	20 b5 b8	jsr $b8b5			jsr 	StringTempWrite 			; and write it out.
.a5c5	c8		iny				iny
.a5c6	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a5c9	d0 f3		bne $a5be			bne 	_SSMCopy
.a5cb					_SSMEString:
.a5cb	7a		ply				ply
.a5cc					_SSMExit:
.a5cc	60		rts				rts
.a5cd					_SSMNull:
.a5cd	a9 00		lda #$00			lda 	#0
.a5cf	20 77 b8	jsr $b877			jsr 	StringTempAllocate
.a5d2	60		rts				rts
.a5d3					SubstringInitial:
.a5d3	da		phx				phx 								; save initial stack position
.a5d4	08		php				php 								; save carry on stack indicating 2 parameters
.a5d5	20 0f a6	jsr $a60f			jsr 	EvaluateString 				; get a string
.a5d8	5a		phy				phy 								; calculate length to exponent.
.a5d9	a0 ff		ldy #$ff			ldy 	#$FF
.a5db					_SIFindLength:
.a5db	c8		iny				iny
.a5dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.a5de	d0 fb		bne $a5db			bne 	_SIFindLength
.a5e0	98		tya				tya
.a5e1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a5e4	7a		ply				ply
.a5e5	e8		inx				inx
.a5e6	20 0f af	jsr $af0f			jsr 	CheckComma 					; comma next
.a5e9	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get next parameter
.a5ec	28		plp				plp 								; is it the last parameter ?
.a5ed	90 07		bcc $a5f6			bcc 	_SSIExit 					; if so, exit.
.a5ef	e8		inx				inx
.a5f0	20 0f af	jsr $af0f			jsr 	CheckComma 					; comma next
.a5f3	20 5c a6	jsr $a65c			jsr 	Evaluate8BitInteger 		; get last parameter
.a5f6					_SSIExit:
.a5f6	fa		plx				plx
.a5f7	20 07 af	jsr $af07			jsr 	CheckRightBracket 			; check closing bracket
.a5fa	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a5fb					EvaluateValue:
.a5fb	48		pha				pha
.a5fc	20 9a 9e	jsr $9e9a			jsr		EvaluateExpression 			; expression
.a5ff	20 af 9f	jsr $9faf			jsr 	Dereference					; derefernce it
.a602	68		pla				pla
.a603	60		rts				rts
.a604					EvaluateNumber:
.a604	20 fb a5	jsr $a5fb			jsr 	EvaluateValue 				; get a value
.a607	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a60a	29 10		and #$10			and 	#NSBIsString
.a60c	d0 16		bne $a624			bne 	HelperTypeError
.a60e	60		rts				rts
.a60f					EvaluateString:
.a60f	20 fb a5	jsr $a5fb			jsr 	EvaluateValue 				; get a value
.a612	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a615	29 10		and #$10			and 	#NSBIsString
.a617	f0 0b		beq $a624			beq 	HelperTypeError
.a619					CopyAddressToTemp0:
.a619	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a61c	85 36		sta $36				sta 	zTemp0
.a61e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a621	85 37		sta $37				sta 	zTemp0+1
.a623	60		rts				rts
.a624					HelperTypeError:
.a624	4c ff b4	jmp $b4ff			jmp 	TypeError
.a627					EvaluateInteger:
.a627	20 04 a6	jsr $a604			jsr 	EvaluateNumber
.a62a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a62d	d0 0a		bne $a639			bne 	HelperValueError 			; if not, it's a float.
.a62f	60		rts				rts
.a630					EvaluateUnsignedInteger:
.a630	20 27 a6	jsr $a627			jsr 	EvaluateInteger 			; check integer is +ve
.a633	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a636	30 01		bmi $a639			bmi 	HelperValueError
.a638	60		rts				rts
.a639					HelperValueError:
.a639	4c 04 b5	jmp $b504			jmp 	ArgumentError
.a63c					Evaluate16BitInteger:
.a63c	20 30 a6	jsr $a630			jsr	 	EvaluateUnsignedInteger		; get integer
.a63f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a642	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a645	d0 f2		bne $a639			bne 	HelperValueError
.a647	60		rts				rts
.a648					Evaluate16BitIntegerSigned:
.a648	20 27 a6	jsr $a627			jsr	 	EvaluateInteger				; get integer
.a64b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a64e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a651	d0 e6		bne $a639			bne 	HelperValueError
.a653	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a656	10 03		bpl $a65b			bpl 	_EISNotSigned
.a658	20 79 a6	jsr $a679			jsr 	NSMNegateMantissa
.a65b					_EISNotSigned:
.a65b	60		rts				rts
.a65c					Evaluate8BitInteger:
.a65c	20 30 a6	jsr $a630			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a65f	d0 d8		bne $a639			bne 	HelperValueError
.a661	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a664	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a667	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a66a	d0 cd		bne $a639			bne 	HelperValueError
.a66c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a66f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b391					Multiply8x8:
.b391	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b392	85 36		sta $36			  	sta 	zTemp0
.b394	86 37		stx $37				stx 	zTemp0+1
.b396	a9 00		lda #$00			lda 	#0
.b398	a2 08		ldx #$08			ldx 	#8
.b39a					_M88Loop:
.b39a	90 03		bcc $b39f			bcc 	_M88NoAdd
.b39c	18		clc				clc
.b39d	65 37		adc $37				adc 	zTemp0+1
.b39f					_M88NoAdd:
.b39f	6a		ror a				ror 	a
.b3a0	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b3a2	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b3a3	d0 f5		bne $b39a			bne 	_M88Loop
.b3a5	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b3a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a670					NSMNegate:
.a670	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a673	49 80		eor #$80			eor 	#NSBIsNegative
.a675	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a678	60		rts				rts
.a679					NSMNegateMantissa:
.a679	38		sec				sec
.a67a	a9 00		lda #$00			lda 	#0
.a67c	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a67f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a682	a9 00		lda #$00			lda 	#0
.a684	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a687	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a68a	a9 00		lda #$00			lda 	#0
.a68c	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a68f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a692	a9 00		lda #$00			lda 	#0
.a694	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a697	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a69a	60		rts				rts
.a69b					NSMShiftUpTwo:
.a69b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a69e	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a6a1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6a4	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a6a7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6aa	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a6ad	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a6b0	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a6b3	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a6b6	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a6b9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6bc	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a6bf	60		rts				rts
.a6c0					NSMSetZeroMantissaOnly:
.a6c0	a9 00		lda #$00			lda 	#0
.a6c2	80 08		bra $a6cc			bra 	NSMSetMantissa
.a6c4					NSMSetZero:
.a6c4	a9 00		lda #$00			lda 	#0
.a6c6					NSMSetByte:
.a6c6	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a6c9	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a6cc					NSMSetMantissa:
.a6cc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a6cf	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a6d2	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a6d5	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a6d8	60		rts				rts
.a6d9					NSMShiftLeft:
.a6d9	18		clc				clc
.a6da					NSMRotateLeft:
.a6da	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a6dd	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a6e0	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a6e3	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a6e6	60		rts				rts
.a6e7					NSMShiftRight:
.a6e7	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a6ea	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a6ed	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a6f0	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a6f3	60		rts				rts
.a6f4					NSMIsZero:
.a6f4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a6f7	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a6fa	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a6fd	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a700	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b3a8					Assemble_ora:
.b3a8	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3ab	01					.byte $01
.b3ac					Assemble_and:
.b3ac	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3af	21					.byte $21
.b3b0					Assemble_eor:
.b3b0	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3b3	41					.byte $41
.b3b4					Assemble_adc:
.b3b4	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3b7	61					.byte $61
.b3b8					Assemble_sta:
.b3b8	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3bb	81					.byte $81
.b3bc					Assemble_lda:
.b3bc	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3bf	a1					.byte $a1
.b3c0					Assemble_cmp:
.b3c0	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3c3	c1					.byte $c1
.b3c4					Assemble_sbc:
.b3c4	20 bc 89	jsr $89bc		jsr	AssembleGroup1
>b3c7	e1					.byte $e1
.b3c8					Assemble_asl:
.b3c8	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3cb	02					.byte $02
>b3cc	75					.byte $75
.b3cd					Assemble_rol:
.b3cd	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3d0	22					.byte $22
>b3d1	75					.byte $75
.b3d2					Assemble_lsr:
.b3d2	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3d5	42					.byte $42
>b3d6	75					.byte $75
.b3d7					Assemble_ror:
.b3d7	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3da	62					.byte $62
>b3db	75					.byte $75
.b3dc					Assemble_stx:
.b3dc	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3df	82					.byte $82
>b3e0	50					.byte $50
.b3e1					Assemble_ldx:
.b3e1	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3e4	a2					.byte $a2
>b3e5	d0					.byte $d0
.b3e6					Assemble_dec:
.b3e6	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3e9	c2					.byte $c2
>b3ea	55					.byte $55
.b3eb					Assemble_inc:
.b3eb	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3ee	e2					.byte $e2
>b3ef	55					.byte $55
.b3f0					Assemble_stz:
.b3f0	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3f3	60					.byte $60
>b3f4	44					.byte $44
.b3f5					Assemble_bit:
.b3f5	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3f8	20					.byte $20
>b3f9	55					.byte $55
.b3fa					Assemble_sty:
.b3fa	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b3fd	80					.byte $80
>b3fe	54					.byte $54
.b3ff					Assemble_ldy:
.b3ff	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b402	a0					.byte $a0
>b403	d5					.byte $d5
.b404					Assemble_cpy:
.b404	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b407	c0					.byte $c0
>b408	d4					.byte $d4
.b409					Assemble_cpx:
.b409	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b40c	e0					.byte $e0
>b40d	d0					.byte $d0
.b40e					Assemble_tsb:
.b40e	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b411	00					.byte $00
>b412	50					.byte $50
.b413					Assemble_trb:
.b413	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b416	10					.byte $10
>b417	50					.byte $50
.b418					Assemble_jsr:
.b418	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b41b	14					.byte $14
>b41c	10					.byte $10
.b41d					Assemble_jmp:
.b41d	20 c3 89	jsr $89c3		jsr	AssembleGroup2
>b420	40					.byte $40
>b421	10					.byte $10
.b422					Assemble_bpl:
.b422	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b425	10					.byte $10
.b426					Assemble_bmi:
.b426	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b429	30					.byte $30
.b42a					Assemble_bvc:
.b42a	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b42d	50					.byte $50
.b42e					Assemble_bvs:
.b42e	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b431	70					.byte $70
.b432					Assemble_bcc:
.b432	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b435	90					.byte $90
.b436					Assemble_bcs:
.b436	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b439	b0					.byte $b0
.b43a					Assemble_bne:
.b43a	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b43d	d0					.byte $d0
.b43e					Assemble_beq:
.b43e	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b441	f0					.byte $f0
.b442					Assemble_bra:
.b442	20 14 8a	jsr $8a14		jsr	AssembleGroup3
>b445	80					.byte $80
.b446					Assemble_brk:
.b446	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b449	00					.byte $00
.b44a					Assemble_php:
.b44a	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b44d	08					.byte $08
.b44e					Assemble_clc:
.b44e	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b451	18					.byte $18
.b452					Assemble_plp:
.b452	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b455	28					.byte $28
.b456					Assemble_sec:
.b456	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b459	38					.byte $38
.b45a					Assemble_rti:
.b45a	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b45d	40					.byte $40
.b45e					Assemble_pha:
.b45e	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b461	48					.byte $48
.b462					Assemble_cli:
.b462	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b465	58					.byte $58
.b466					Assemble_phy:
.b466	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b469	5a					.byte $5a
.b46a					Assemble_rts:
.b46a	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b46d	60					.byte $60
.b46e					Assemble_pla:
.b46e	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b471	68					.byte $68
.b472					Assemble_sei:
.b472	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b475	78					.byte $78
.b476					Assemble_ply:
.b476	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b479	7a					.byte $7a
.b47a					Assemble_dey:
.b47a	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b47d	88					.byte $88
.b47e					Assemble_txa:
.b47e	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b481	8a					.byte $8a
.b482					Assemble_tya:
.b482	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b485	98					.byte $98
.b486					Assemble_txs:
.b486	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b489	9a					.byte $9a
.b48a					Assemble_tay:
.b48a	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b48d	a8					.byte $a8
.b48e					Assemble_tax:
.b48e	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b491	aa					.byte $aa
.b492					Assemble_clv:
.b492	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b495	b8					.byte $b8
.b496					Assemble_tsx:
.b496	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b499	ba					.byte $ba
.b49a					Assemble_iny:
.b49a	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b49d	c8					.byte $c8
.b49e					Assemble_dex:
.b49e	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4a1	ca					.byte $ca
.b4a2					Assemble_cld:
.b4a2	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4a5	d8					.byte $d8
.b4a6					Assemble_phx:
.b4a6	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4a9	da					.byte $da
.b4aa					Assemble_stp:
.b4aa	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4ad	db					.byte $db
.b4ae					Assemble_inx:
.b4ae	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4b1	e8					.byte $e8
.b4b2					Assemble_nop:
.b4b2	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4b5	ea					.byte $ea
.b4b6					Assemble_sed:
.b4b6	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4b9	f8					.byte $f8
.b4ba					Assemble_plx:
.b4ba	20 4a 8a	jsr $8a4a		jsr	AssembleGroup4
>b4bd	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b4be					DecimalScalarTable:
>b4be	66 66 66 66				.dword $66666666 ; 0.1
>b4c2	de					.byte $de
>b4c3	1f 85 eb 51				.dword $51eb851f ; 0.01
>b4c7	db					.byte $db
>b4c8	4c 37 89 41				.dword $4189374c ; 0.001
>b4cc	d8					.byte $d8
>b4cd	ac 8b db 68				.dword $68db8bac ; 0.0001
>b4d1	d4					.byte $d4
>b4d2	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b4d6	d1					.byte $d1
>b4d7	83 de 1b 43				.dword $431bde83 ; 1e-06
>b4db	ce					.byte $ce
>b4dc	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b4e0	ca					.byte $ca
>b4e1	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b4e5	c7					.byte $c7
>b4e6	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b4ea	c4					.byte $c4
>b4eb	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b4ef	c0					.byte $c0
>b4f0	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b4f4	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b4f5					SyntaxError:
.b4f5	a9 02		lda #$02		lda	#2
.b4f7	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b4fa					RangeError:
.b4fa	a9 04		lda #$04		lda	#4
.b4fc	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b4ff					TypeError:
.b4ff	a9 05		lda #$05		lda	#5
.b501	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b504					ArgumentError:
.b504	a9 07		lda #$07		lda	#7
.b506	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b509					NotDoneError:
.b509	a9 0c		lda #$0c		lda	#12
.b50b	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b50e					ErrorText:
>b50e	42 72 65 61 6b 00			.text	"Break",0
>b514	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b51c	72 72 6f 72 00
>b521	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b529	20 62 79 20 7a 65 72 6f 00
>b532	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b53a	61 6e 67 65 00
>b53f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b547	6d 61 74 63 68 00
>b54d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b555	65 6d 6f 72 79 00
>b55b	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b563	61 72 67 75 6d 65 6e 74 00
>b56c	53 74 6f 70 00				.text	"Stop",0
>b571	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b579	6f 6f 20 6c 6f 6e 67 00
>b581	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b589	6e 20 66 61 69 6c 65 64 00
>b592	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b59a	61 74 61 00
>b59e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b5a6	65 6e 74 65 64 00
>b5ac	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b5b4	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b5c0	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b5c8	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b5d5	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b5dd	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b5ea	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b5f2	68 6f 75 74 20 57 68 69 6c 65 00
>b5fd	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b605	68 6f 75 74 20 46 6f 72 00
>b60e	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b616	61 63 6b 20 66 75 6c 6c 00
>b61f	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b627	75 63 74 75 72 65 00
>b62e	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b636	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b643	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b64b	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b659	41 72 72 61 79 20 73 69			.text	"Array size",0
>b661	7a 65 00
>b664	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b66c	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b674	42 75 69 6c 74 20 54 75			.text "Built Tuesday 01-Nov-2022. Build 2510."
>b67c	65 73 64 61 79 20 30 31 2d 4e 6f 76 2d 32 30 32
>b68c	32 2e 20 42 75 69 6c 64 20 32 35 31 30 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b69a					EXTInitialise:
.b69a	64 01		stz $01				stz 	1 							; Access I/O
.b69c	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b69f	9c 08 d0	stz $d008			stz 	$D008
.b6a2	9c 09 d0	stz $d009			stz 	$D009
.b6a5	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b6a7	8d 58 d6	sta $d658			sta 	$D658
.b6aa	60		rts				rts
.b6ab					EXTClearScreen:
.b6ab	4c ea ff	jmp $ffea			jmp 	$FFEA
.b6ae					EXTPrintCharacter:
.b6ae	48		pha				pha
.b6af	da		phx				phx
.b6b0	5a		phy				phy
.b6b1	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b6b4	7a		ply				ply
.b6b5	fa		plx				plx
.b6b6	68		pla				pla
.b6b7	60		rts				rts
.b6b8					EXTInputSingleCharacter:
.b6b8	da		phx				phx
.b6b9	5a		phy				phy
.b6ba					_EISCWait:
.b6ba	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b6bd	c9 00		cmp #$00			cmp 	#0
.b6bf	f0 f9		beq $b6ba			beq 	_EISCWait
.b6c1	7a		ply				ply
.b6c2	fa		plx				plx
.b6c3	60		rts				rts
.b6c4					EXTInputLine:
.b6c4	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b6c6					_ILLoop:
.b6c6	da		phx				phx 								; read character in
.b6c7	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b6ca	fa		plx				plx
.b6cb	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b6cd	f0 12		beq $b6e1			beq 	_ILBackspace
.b6cf	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b6d1	f0 15		beq $b6e8			beq 	_ILExit
.b6d3	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b6d5	90 ef		bcc $b6c6			bcc 	_ILLoop
.b6d7	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b6d9	f0 eb		beq $b6c6			beq 	_ILLoop
.b6db	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b6de	e8		inx				inx
.b6df	80 e5		bra $b6c6			bra 	_ILLoop
.b6e1					_ILBackspace:
.b6e1	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b6e3	f0 e1		beq $b6c6			beq 	_ILLoop
.b6e5	ca		dex				dex 								; back one.
.b6e6	80 de		bra $b6c6			bra 	_ILLoop
.b6e8					_ILExit:
.b6e8	20 ae b6	jsr $b6ae			jsr 	EXTPrintCharacter
.b6eb	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b6ee	60		rts				rts
.b6ef					EXTBreakCheck:
.b6ef	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b6f2					EXTReadController:
.b6f2	da		phx				phx
.b6f3	a2 00		ldx #$00			ldx 	#0
.b6f5	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b6f7	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b6fa	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b6fc	f0 04		beq $b702			beq 	_NoSet1
.b6fe	8a		txa				txa
.b6ff	09 01		ora #$01			ora 	#1
.b701	aa		tax				tax
.b702					_NoSet1:
.b702	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b704	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b707	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b709	f0 04		beq $b70f			beq 	_NoSet1
.b70b	8a		txa				txa
.b70c	09 02		ora #$02			ora 	#2
.b70e	aa		tax				tax
.b70f					_NoSet1:
.b70f	a9 06		lda #$06			lda 	#(($32) >> 3)
.b711	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b714	29 04		and #$04			and 	#($01 << (($32) & 7))
.b716	f0 04		beq $b71c			beq 	_NoSet1
.b718	8a		txa				txa
.b719	09 04		ora #$04			ora 	#4
.b71b	aa		tax				tax
.b71c					_NoSet1:
.b71c	a9 04		lda #$04			lda 	#(($25) >> 3)
.b71e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b721	29 20		and #$20			and 	#($01 << (($25) & 7))
.b723	f0 04		beq $b729			beq 	_NoSet1
.b725	8a		txa				txa
.b726	09 08		ora #$08			ora 	#8
.b728	aa		tax				tax
.b729					_NoSet1:
.b729	a9 04		lda #$04			lda 	#(($26) >> 3)
.b72b	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b72e	29 40		and #$40			and 	#($01 << (($26) & 7))
.b730	f0 04		beq $b736			beq 	_NoSet1
.b732	8a		txa				txa
.b733	09 10		ora #$10			ora 	#16
.b735	aa		tax				tax
.b736					_NoSet1:
.b736	8a		txa				txa
.b737	fa		plx				plx
.b738	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b739					MemoryDeleteLine:
.b739	20 58 b7	jsr $b758			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b73c	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b73e	a8		tay				tay
.b73f					_MDDLLoop:
.b73f	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b741	92 30		sta ($30)			sta 	(codePtr)
.b743	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b745	c5 3a		cmp $3a				cmp 	zTemp2
.b747	d0 07		bne $b750			bne 	_MDLDLNext
.b749	a5 31		lda $31				lda 	codePtr+1
.b74b	c5 3b		cmp $3b				cmp 	zTemp2+1
.b74d	d0 01		bne $b750			bne 	_MDLDLNext
.b74f					_MDDLExit:
.b74f	60		rts				rts
.b750					_MDLDLNext:
.b750	e6 30		inc $30				inc 	codePtr						; next byte
.b752	d0 eb		bne $b73f			bne 	_MDDLLoop
.b754	e6 31		inc $31				inc 	codePtr+1
.b756	80 e7		bra $b73f			bra 	_MDDLLoop
.b758					IMemoryFindEnd:
.b758	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b75a	85 3a		sta $3a				sta 	0+zTemp2
.b75c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b75e	85 3b		sta $3b				sta 	1+zTemp2
.b760					_MDLFELoop:
.b760	b2 3a		lda ($3a)			lda 	(zTemp2)
.b762	f0 0b		beq $b76f			beq 	_MDLFEExit
.b764	18		clc				clc
.b765	65 3a		adc $3a				adc 	zTemp2
.b767	85 3a		sta $3a				sta 	zTemp2
.b769	90 f5		bcc $b760			bcc 	_MDLFELoop
.b76b	e6 3b		inc $3b				inc 	zTemp2+1
.b76d	80 f1		bra $b760			bra 	_MDLFELoop
.b76f					_MDLFEExit:
.b76f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b770					MemoryInsertLine:
.b770	08		php				php
.b771	20 58 b7	jsr $b758			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b774	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b776	1a		inc a				inc 	a
.b777	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b779	b0 36		bcs $b7b1			bcs 	_MDLIError
.b77b	28		plp				plp
.b77c	90 08		bcc $b786			bcc 	_MDLIFound
.b77e	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b780	85 30		sta $30				sta 	codePtr
.b782	a5 3b		lda $3b				lda 	zTemp2+1
.b784	85 31		sta $31				sta 	codePtr+1
.b786					_MDLIFound:
.b786	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b789	a8		tay				tay
.b78a					_MDLIInsert:
.b78a	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b78c	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b78e	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b790	c5 3a		cmp $3a				cmp 	zTemp2
.b792	d0 06		bne $b79a			bne 	_MDLINext
.b794	a5 31		lda $31				lda 	codePtr+1
.b796	c5 3b		cmp $3b				cmp 	zTemp2+1
.b798	f0 0a		beq $b7a4			beq 	_MDLIHaveSpace
.b79a					_MDLINext:
.b79a	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b79c	d0 02		bne $b7a0			bne 	_MDLINoBorrow
.b79e	c6 3b		dec $3b				dec 	zTemp2+1
.b7a0					_MDLINoBorrow:
.b7a0	c6 3a		dec $3a				dec 	zTemp2
.b7a2	80 e6		bra $b78a			bra 	_MDLIInsert
.b7a4					_MDLIHaveSpace:
.b7a4	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b7a7	88		dey				dey 								; from offset-1 to 0
.b7a8					_MDLICopy:
.b7a8	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b7ab	91 30		sta ($30),y			sta 	(codePtr),y
.b7ad	88		dey				dey
.b7ae	10 f8		bpl $b7a8			bpl 	_MDLICopy
.b7b0	60		rts				rts
.b7b1					_MDLIError:
.b7b1	a9 06		lda #$06		lda	#6
.b7b3	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b7b6					MDLAppendLine:
.b7b6	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b7b8	85 36		sta $36				sta 	zTemp0
.b7ba	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7bc	85 38		sta $38				sta 	0+zTemp1
.b7be	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7c0	85 39		sta $39				sta 	1+zTemp1
.b7c2	b2 38		lda ($38)			lda 	(zTemp1)
.b7c4	d0 0a		bne $b7d0			bne 	_MDLANoInitialise
.b7c6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7c8	8d eb 06	sta $06eb			sta 	0+AppendPointer
.b7cb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7cd	8d ec 06	sta $06ec			sta 	1+AppendPointer
.b7d0					_MDLANoInitialise:
.b7d0	18		clc				clc
.b7d1	ad eb 06	lda $06eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b7d4	85 38		sta $38				sta 	zTemp1
.b7d6	72 36		adc ($36)			adc 	(zTemp0)
.b7d8	8d eb 06	sta $06eb			sta 	AppendPointer
.b7db	ad ec 06	lda $06ec			lda 	AppendPointer+1
.b7de	85 39		sta $39				sta 	zTemp1+1
.b7e0	69 00		adc #$00			adc 	#0
.b7e2	8d ec 06	sta $06ec			sta 	AppendPointer+1
.b7e5	a0 00		ldy #$00			ldy 	#0
.b7e7					_MDLACopy:
.b7e7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b7e9	91 38		sta ($38),y			sta 	(zTemp1),y
.b7eb	c8		iny				iny
.b7ec	98		tya				tya
.b7ed	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b7ef	d0 f6		bne $b7e7			bne 	_MDLACopy
.b7f1	a9 00		lda #$00			lda 	#0 							; end of program.
.b7f3	91 38		sta ($38),y			sta 	(zTemp1),y
.b7f5	60		rts				rts
.06eb					AppendPointer:
>06eb							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a701					MemoryNew:
.a701	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a703	85 30		sta $30				sta 	codePtr
.a705	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a707	85 31		sta $31				sta 	codePtr+1
.a709	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a70b	92 30		sta ($30)			sta 	(codePtr)
.a70d	60		rts				rts
.a70e					MemoryInline:
.a70e	98		tya				tya 								; put address into stack,x
.a70f	18		clc				clc
.a710	65 30		adc $30				adc 	codePtr
.a712	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a715	a5 31		lda $31				lda 	codePtr+1
.a717	69 00		adc #$00			adc 	#0
.a719	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a71c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a71f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a722	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a723					MemorySearch:
.a723	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a725	86 37		stx $37				stx 	zTemp0+1
.a727	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a729	85 30		sta $30				sta 	codePtr
.a72b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a72d	85 31		sta $31				sta 	codePtr+1
.a72f					_MTAXLoop:
.a72f	b2 30		lda ($30)			lda 	(codePtr)
.a731	18		clc				clc
.a732	f0 21		beq $a755			beq 	_MTAXExit 					; reached end, exit with CC.
.a734	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a736	b1 30		lda ($30),y			lda 	(codePtr),y
.a738	38		sec				sec
.a739	e5 36		sbc $36				sbc 	zTemp0
.a73b	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a73d	c8		iny				iny 								; do the MSB
.a73e	b1 30		lda ($30),y			lda 	(codePtr),y
.a740	e5 37		sbc $37				sbc 	zTemp0+1
.a742	05 38		ora $38				ora 	zTemp1
.a744	f0 0f		beq $a755			beq 	_MTAXExit	 				; found
.a746	b0 0d		bcs $a755			bcs 	_MTAXExit 					; current < required exit
.a748	18		clc				clc
.a749	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a74b	65 30		adc $30				adc 	codePtr
.a74d	85 30		sta $30				sta 	codePtr
.a74f	90 02		bcc $a753			bcc 	_CREExit
.a751	e6 31		inc $31				inc 	codePtr+1
.a753					_CREExit:
.a753	80 da		bra $a72f			bra 	_MTAXLoop
.a755					_MTAXExit:
.a755	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a756					StackPushByte:
.a756	48		pha				pha 								; save byte
.a757	a5 34		lda $34				lda 	BasicStack
.a759	d0 09		bne $a764			bne 	_SPBNoBorrow
.a75b	c6 35		dec $35				dec 	BasicStack+1
.a75d	48		pha				pha
.a75e	a5 35		lda $35				lda 	BasicStack+1
.a760	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a762	90 06		bcc $a76a			bcc 	_SPBMemory
.a764					_SPBNoBorrow:
.a764	c6 34		dec $34				dec 	BasicStack
.a766	68		pla				pla 								; get back and write
.a767	92 34		sta ($34)			sta 	(BasicStack)
.a769	60		rts				rts
.a76a					_SPBMemory:
.a76a	a9 12		lda #$12		lda	#18
.a76c	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.a76f					StackPopByte:
.a76f	b2 34		lda ($34)			lda 	(BasicStack)
.a771	e6 34		inc $34				inc 	BasicStack
.a773	d0 02		bne $a777			bne 	_SPBNoCarry
.a775	e6 35		inc $35				inc 	BasicStack+1
.a777					_SPBNoCarry:
.a777	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a778					StackOpen:
.a778	48		pha				pha 								; save frame byte
.a779	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a77b	0a		asl a				asl 	a 							; claim twice this for storage
.a77c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a77e	38		sec				sec 								; so basically subtracting from
.a77f	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a781	85 34		sta $34				sta 	basicStack
.a783	b0 08		bcs $a78d			bcs 	_SONoBorrow
.a785	c6 35		dec $35				dec 	basicStack+1
.a787	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a789	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a78b	90 04		bcc $a791			bcc 	_SOMemory
.a78d					_SONoBorrow:
.a78d	68		pla				pla 								; get marker back and write at TOS
.a78e	92 34		sta ($34)			sta 	(basicStack)
.a790	60		rts				rts
.a791					_SOMemory:
.a791	a9 12		lda #$12		lda	#18
.a793	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.a796					StackClose:
.a796	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a798	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a79a	0a		asl a				asl 	a 							; claim twice this.
.a79b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a79d	85 34		sta $34				sta 	basicStack
.a79f	90 02		bcc $a7a3			bcc 	_SCExit
.a7a1	e6 35		inc $35				inc 	basicStack+1
.a7a3					_SCExit:
.a7a3	60		rts				rts
.a7a4					StackCheckFrame:
.a7a4	48		pha				pha
.a7a5					_StackRemoveLocals:
.a7a5	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a7a7	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a7a9	b0 05		bcs $a7b0			bcs 	_SCNoLocal
.a7ab	20 ae ae	jsr $aeae			jsr 	LocalPopValue
.a7ae	80 f5		bra $a7a5			bra 	_StackRemoveLocals
.a7b0					_SCNoLocal:
.a7b0	68		pla				pla
.a7b1	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a7b3	29 f0		and #$f0			and 	#$F0 						; check type bits
.a7b5	d0 01		bne $a7b8			bne 	_SCFError 					; different, we have structures mixed up
.a7b7	60		rts				rts
.a7b8					_SCFError:
.a7b8	8a		txa				txa 								; report error X
.a7b9	4c 89 9a	jmp $9a89			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a7bc					STKSaveCodePosition:
.a7bc	5a		phy				phy
.a7bd	98		tya				tya 								; save Y
.a7be	a0 05		ldy #$05			ldy 	#5
.a7c0	91 34		sta ($34),y			sta 	(basicStack),y
.a7c2	88		dey				dey 								; save Code Pointer
.a7c3					_STKSaveLoop:
.a7c3	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a7c6	91 34		sta ($34),y			sta 	(basicStack),y
.a7c8	88		dey				dey
.a7c9	d0 f8		bne $a7c3			bne 	_STKSaveLoop
.a7cb	7a		ply				ply
.a7cc	60		rts				rts
.a7cd					STKLoadCodePosition:
.a7cd	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a7cf					_STKLoadLoop:
.a7cf	b1 34		lda ($34),y			lda 	(basicStack),y
.a7d1	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a7d4	c8		iny				iny
.a7d5	c0 05		cpy #$05			cpy 	#5
.a7d7	d0 f6		bne $a7cf			bne 	_STKLoadLoop
.a7d9	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a7db	a8		tay				tay
.a7dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a7dd					StackReset:
.a7dd	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a7df	85 34		sta $34				sta 	0+basicStack
.a7e1	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a7e3	85 35		sta $35				sta 	1+basicStack
.a7e5	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a7e7	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a7e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b7f6					StringConcrete:
.b7f6	5a		phy				phy 								; save position on stack
.b7f7	20 5e a3	jsr $a35e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b7fa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b7fd	85 38		sta $38				sta 	zTemp1
.b7ff	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b802	85 39		sta $39				sta 	zTemp1+1
.b804	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b806					_SALength:
.b806	c8		iny				iny
.b807	b1 38		lda ($38),y			lda 	(zTemp1),y
.b809	d0 fb		bne $b806			bne 	_SALength
.b80b	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b80d	b0 3f		bcs $b84e			bcs 	_SALengthError
.b80f	98		tya				tya 				 				; length of the new string
.b810	18		clc				clc
.b811	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b813	90 02		bcc $b817			bcc 	_SAHaveLength
.b815	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b817					_SAHaveLength:
.b817	48		pha				pha 								; save length.
.b818	38		sec				sec
.b819	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b81b	6d 8e 04	adc $048e			adc 	StringMemory
.b81e	8d 8e 04	sta $048e			sta 	StringMemory
.b821	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b823	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b826	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b828	6d 8f 04	adc $048f			adc 	StringMemory+1
.b82b	8d 8f 04	sta $048f			sta 	StringMemory+1
.b82e	85 3b		sta $3b				sta 	zTemp2+1
.b830	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b833	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b834	38		sec				sec
.b835	e9 03		sbc #$03			sbc 	#3
.b837	92 3a		sta ($3a)			sta 	(zTemp2)
.b839	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b83b	a0 01		ldy #$01			ldy 	#1
.b83d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b83f					_SACopyNewString:
.b83f	a0 00		ldy #$00			ldy 	#0
.b841					_SACopyNSLoop:
.b841	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b843	c8		iny				iny 								; write two on in string storage
.b844	c8		iny				iny
.b845	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b847	88		dey				dey 								; this makes it one one.
.b848	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b84a	d0 f5		bne $b841			bne 	_SACopyNSLoop
.b84c	7a		ply				ply
.b84d	60		rts				rts
.b84e					_SALengthError:
.b84e	a9 09		lda #$09		lda	#9
.b850	4c 89 9a	jmp $9a89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b853					StringSystemInitialise:
.b853	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b855	8d 8e 04	sta $048e			sta 	0+StringMemory
.b858	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b85a	8d 8f 04	sta $048f			sta 	1+StringMemory
.b85d	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b860	60		rts				rts
.b861					StringSpaceInitialise:
.b861	20 5e a3	jsr $a35e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b864	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b866	8d 90 04	sta $0490			sta 	StringInitialised
.b869	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b86c	8d 91 04	sta $0491			sta 	StringTempPointer
.b86f	ad 8f 04	lda $048f			lda 	StringMemory+1
.b872	3a		dec a				dec 	a
.b873	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b876	60		rts				rts
.b877					StringTempAllocate:
.b877	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b879	b0 35		bcs $b8b0			bcs 	_STALength
.b87b	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b87e	30 05		bmi $b885			bmi 	_STAAllocate
.b880	48		pha				pha 								; save value to subtract.
.b881	20 61 b8	jsr $b861			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b884	68		pla				pla 								; restore it
.b885					_STAAllocate:
.b885	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b887	18		clc				clc  								; deliberate allows one more
.b888	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b88b	8d 91 04	sta $0491			sta 	StringTempPointer
.b88e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b891	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b893	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b896	69 ff		adc #$ff			adc 	#$FF
.b898	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b89b	85 3d		sta $3d				sta 	zsTemp+1
.b89d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b8a0	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b8a3	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b8a6	a9 10		lda #$10			lda 	#NSTString
.b8a8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b8ab	a9 00		lda #$00			lda 	#0 							; clear the target string
.b8ad	92 3c		sta ($3c)			sta 	(zsTemp)
.b8af	60		rts				rts
.b8b0					_STALength:
.b8b0	a9 09		lda #$09		lda	#9
.b8b2	4c 89 9a	jmp $9a89		jmp	ErrorHandler
.b8b5					StringTempWrite:
.b8b5	48		pha				pha
.b8b6	92 3c		sta ($3c)			sta 	(zsTemp)
.b8b8	e6 3c		inc $3c				inc 	zsTemp
.b8ba	d0 02		bne $b8be			bne 	_STWNoCarry
.b8bc	e6 3d		inc $3d				inc 	zsTemp+1
.b8be					_STWNoCarry:
.b8be	a9 00		lda #$00			lda 	#0
.b8c0	92 3c		sta ($3c)			sta 	(zsTemp)
.b8c2	68		pla				pla
.b8c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a7ea					BackloadProgram:
.a7ea	a2 ff		ldx #$ff			ldx 	#$FF
.a7ec	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a7ef	20 19 a8	jsr $a819			jsr 	BLReadByte
.a7f2	30 1e		bmi $a812			bmi 	_BPExit
.a7f4					_BPCopy:
.a7f4	e8		inx				inx  								; copy byte in
.a7f5	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a7f8	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a7fb	20 19 a8	jsr $a819			jsr 	BLReadByte 					; read next byte
.a7fe	30 0a		bmi $a80a			bmi 	_BPEndLine 					; -ve = EOL
.a800	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a802	d0 02		bne $a806			bne 	_BPNotTab
.a804	a9 20		lda #$20			lda 	#' '
.a806					_BPNotTab:
.a806	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a808	b0 ea		bcs $a7f4			bcs 	_BPCopy
.a80a					_BPEndLine:
.a80a	20 ff ab	jsr $abff			jsr 	TokeniseLine 				; tokenise the line.
.a80d	20 04 8c	jsr $8c04			jsr 	EditProgramCode
.a810	80 d8		bra $a7ea			bra 	BackloadProgram
.a812					_BPExit:
.a812	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a815	20 c2 8c	jsr $8cc2			jsr 	ClearCommand 				; clear variables etc.
.a818	60		rts				rts
.a819					BLReadByte:
.a819					_BLLoad:
.a819	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a81c	ee 1a a8	inc $a81a			inc 	_BLLoad+1
.a81f	d0 03		bne $a824			bne 	_BLNoCarry
.a821	ee 1b a8	inc $a81b			inc 	_BLLoad+2
.a824					_BLNoCarry:
.a824	c9 00		cmp #$00			cmp 	#0
.a826	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a827					TokeniseSearchTable:
.a827	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a829	85 36		sta $36				sta 	zTemp0
.a82b	a0 00		ldy #$00			ldy 	#0
.a82d	a9 80		lda #$80			lda 	#$80 						; token #
.a82f	85 38		sta $38				sta 	zTemp1
.a831					_TSTLoop:
.a831	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a833	30 49		bmi $a87e			bmi 	_TSTFail 					; -ve = end of table
.a835	f0 2e		beq $a865			beq 	_TSTNext 					; zero, check next it's a dummy
.a837	c8		iny				iny 								; get the hash
.a838	b1 36		lda ($36),y			lda 	(zTemp0),y
.a83a	88		dey				dey
.a83b	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a83e	d0 25		bne $a865			bne 	_TSTNext
.a840	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a843	38		sec				sec
.a844	ed 80 04	sbc $0480			sbc 	identStart
.a847	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a849	d0 1a		bne $a865			bne 	_TSTNext
.a84b	5a		phy				phy 								; save Y , we might fail
.a84c	c8		iny				iny 								; point to text
.a84d	c8		iny				iny
.a84e	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a851					_TSTCompareName:
.a851	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a854	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a856	d0 0c		bne $a864			bne 	_TSTNextPullY 				; fail, pullY and do next
.a858	e8		inx				inx
.a859	c8		iny				iny
.a85a	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a85d	d0 f2		bne $a851			bne 	_TSTCompareName
.a85f	7a		ply				ply 								; throw Y
.a860	a5 38		lda $38				lda 	zTemp1 						; get token #
.a862	38		sec				sec 								; return with CS = passed.
.a863	60		rts				rts
.a864					_TSTNextPullY:
.a864	7a		ply				ply 								; restore current, fall through.
.a865					_TSTNext:
.a865	e6 38		inc $38				inc 	zTemp1 						; token counter
.a867	98		tya				tya
.a868	18		clc				clc
.a869	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a86b	1a		inc a				inc 	a 							; +1
.a86c	1a		inc a				inc 	a 							; +2
.a86d	a8		tay				tay
.a86e	10 c1		bpl $a831			bpl 	_TSTLoop 					; if Y < $80 loop back
.a870	98		tya				tya 								; add Y to zTemp0 and reset Y
.a871	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a873	18		clc				clc  								; but have tables > 255 bytes
.a874	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a876	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a878	90 b7		bcc $a831			bcc 	_TSTLoop
.a87a	e6 37		inc $37				inc 	zTemp0+1
.a87c	80 b3		bra $a831			bra 	_TSTLoop
.a87e					_TSTFail:
.a87e	18		clc				clc
.a87f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a880					KeywordSet0:
>a880	00 65					.text	0,$65,""               ; $80 !0:EOF
>a882	00 58					.text	0,$58,""               ; $81 !1:SH1
>a884	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a886	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a88c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a894	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a89a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a8a1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a8a9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a8b0	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a8b7	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a8bd	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a8c3	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a8cb	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a8d2	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a8d9	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a8e0	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a8e8	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a8ee	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a8f4	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a8fb	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a901	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a907	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a90f	28
>a910	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a918	28
>a919	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a91f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a925	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a92b	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a932	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a93a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a940	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a946	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a94b	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a94f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a955	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a95d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a964	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a96b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a973	43
>a974	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a97a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a980	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a987	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a98d	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a991	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a997	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a99f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a9a6	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a9ab	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a9b2	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a9ba	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a9c0	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a9c5	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a9cd	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a9d3	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a9d9	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a9de	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a9e5	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a9eb	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a9f1	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a9f8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a9fd	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>aa03	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>aa0a	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>aa0f	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>aa13	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>aa1b	45
>aa1c	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>aa24	45
>aa25	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>aa2b	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>aa32	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>aa38	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>aa3e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>aa43	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>aa4b	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>aa52	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>aa5a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aa60	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aa64	ff					.text	$FF
.aa65					KeywordSet1:
>aa65	00 65					.text	0,$65,""               ; $80 !0:EOF
>aa67	00 58					.text	0,$58,""               ; $81 !1:SH1
>aa69	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aa6b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aa73	4c 45
>aa75	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aa7d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aa85	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aa8a	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aa90	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aa95	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aa9d	45
>aa9e	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aaa3	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aaab	53
>aaac	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>aab2	ff					.text	$FF
.aab3					KeywordSet2:
>aab3	00 65					.text	0,$65,""               ; $80 !0:EOF
>aab5	00 58					.text	0,$58,""               ; $81 !1:SH1
>aab7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aab9	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>aabe	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>aac3	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>aac8	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>aacd	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>aad2	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>aad7	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>aadc	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>aae1	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>aae6	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>aaeb	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>aaf0	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>aaf5	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>aafa	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>aaff	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ab04	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ab09	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ab0e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ab13	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ab18	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ab1d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ab22	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ab27	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ab2c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ab31	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ab36	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ab3b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ab40	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ab45	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>ab4a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>ab4f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>ab54	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>ab59	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>ab5e	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>ab63	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>ab68	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>ab6d	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>ab72	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>ab77	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>ab7c	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>ab81	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>ab86	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>ab8b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>ab90	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>ab95	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>ab9a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>ab9f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aba4	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aba9	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>abae	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>abb3	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>abb8	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>abbd	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>abc2	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>abc7	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>abcc	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>abd1	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>abd6	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>abdb	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>abe0	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>abe5	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>abea	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>abef	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>abf4	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>abf9	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>abfe	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.abff					TokeniseLine:
.abff	20 87 ad	jsr $ad87			jsr 	FixLineBufferCase 			; fix line case
.ac02	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ac04	8d a7 04	sta $04a7			sta 	tokenOffset
.ac07	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ac0a	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ac0d	a2 ff		ldx #$ff			ldx 	#$FF
.ac0f					_TKFindFirst:
.ac0f	e8		inx				inx
.ac10	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac13	f0 79		beq $ac8e			beq 	_TKExit
.ac15	c9 20		cmp #$20			cmp 	#' '
.ac17	90 f6		bcc $ac0f			bcc 	_TKFindFirst
.ac19	c9 30		cmp #$30			cmp 	#'0'
.ac1b	90 07		bcc $ac24			bcc 	_TKNoLineNumber
.ac1d	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac1f	b0 03		bcs $ac24			bcs 	_TKNoLineNumber
.ac21	20 b1 ad	jsr $adb1			jsr 	TokeniseExtractLineNumber
.ac24					_TKNoLineNumber:
.ac24					_TKTokeniseLoop:
.ac24	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ac27	f0 65		beq $ac8e			beq 	_TKExit
.ac29	e8		inx				inx
.ac2a	c9 20		cmp #$20			cmp 	#' '
.ac2c	f0 f6		beq $ac24			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ac2e	ca		dex				dex 								; undo last get, A contains character, X is position.
.ac2f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ac31	f0 61		beq $ac94			beq 	_TKTokeniseIdentifier
.ac33	c9 41		cmp #$41			cmp 	#'A'
.ac35	90 04		bcc $ac3b			bcc 	_TKTokenisePunctuation
.ac37	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ac39	90 59		bcc $ac94			bcc 	_TKTokeniseIdentifier
.ac3b					_TKTokenisePunctuation:
.ac3b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ac3d	f0 27		beq $ac66			beq 	_TKString
.ac3f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ac41	f0 28		beq $ac6b			beq 	_TKHexConstant
.ac43	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ac45	f0 29		beq $ac70			beq 	_TKCheckDouble
.ac47	c9 3e		cmp #$3e			cmp 	#'>'
.ac49	f0 25		beq $ac70			beq 	_TKCheckDouble
.ac4b					_TKStandardPunctuation:
.ac4b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ac4e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ac50	90 0e		bcc $ac60			bcc 	_TKNoShift
.ac52	48		pha				pha 								; save
.ac53	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ac55	85 36		sta $36				sta 	zTemp0
.ac57	68		pla				pla
.ac58	29 20		and #$20			and 	#32 						; bit 5
.ac5a	4a		lsr a				lsr 	a 							; shift into bit 3
.ac5b	4a		lsr a				lsr 	a
.ac5c	05 36		ora $36				ora 	zTemp0
.ac5e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.ac60					_TKNoShift:
.ac60	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte 			; write the punctuation character
.ac63	e8		inx				inx 								; consume the character
.ac64	80 be		bra $ac24			bra 	_TKTokeniseLoop 			; and loop round again.
.ac66					_TKString:
.ac66	20 16 ad	jsr $ad16			jsr 	TokeniseString
.ac69	80 b9		bra $ac24			bra 	_TKTokeniseLoop
.ac6b					_TKHexConstant:
.ac6b	20 51 ad	jsr $ad51			jsr 	TokeniseHexConstant
.ac6e	80 b4		bra $ac24			bra 	_TKTokeniseLoop
.ac70					_TKCheckDouble:
.ac70	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.ac73	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.ac75	90 d4		bcc $ac4b			bcc 	_TKStandardPunctuation
.ac77	c9 3f		cmp #$3f			cmp 	#'>'+1
.ac79	b0 d0		bcs $ac4b			bcs 	_TKStandardPunctuation
.ac7b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.ac7e	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.ac80	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.ac81	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.ac84	38		sec				sec
.ac85	e9 3c		sbc #$3c			sbc 	#'<'
.ac87	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ac8a	e8		inx				inx 								; consume both
.ac8b	e8		inx				inx
.ac8c	80 96		bra $ac24			bra 	_TKTokeniseLoop
.ac8e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ac90	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ac93	60		rts				rts
.ac94					_TKTokeniseIdentifier:
.ac94	8e 80 04	stx $0480			stx 	identStart 					; save start
.ac97	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ac9a					_TKCheckLoop:
.ac9a	e8		inx				inx 								; look at next, we know first is identifier.
.ac9b	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.ac9e	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.aca0	f0 f8		beq $ac9a			beq 	_TKCheckLoop
.aca2	c9 30		cmp #$30			cmp	 	#"0"
.aca4	90 0c		bcc $acb2			bcc 	_TKEndIdentifier
.aca6	c9 3a		cmp #$3a			cmp 	#"9"+1
.aca8	90 f0		bcc $ac9a			bcc 	_TKCheckLoop
.acaa	c9 41		cmp #$41			cmp	 	#"A"
.acac	90 04		bcc $acb2			bcc 	_TKEndIdentifier
.acae	c9 5b		cmp #$5b			cmp 	#"Z"+1
.acb0	90 e8		bcc $ac9a			bcc 	_TKCheckLoop
.acb2					_TKEndIdentifier:
.acb2	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.acb5	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.acb7	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.acb9	f0 06		beq $acc1			beq 	_TKHasTypeCharacter
.acbb	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.acbd	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.acbf	d0 07		bne $acc8			bne 	_TKNoTypeCharacter
.acc1					_TKHasTypeCharacter:
.acc1	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.acc4	e8		inx				inx 								; read next
.acc5	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.acc8					_TKNoTypeCharacter:
.acc8	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.acca	d0 09		bne $acd5			bne 	_TKNoArray
.accc	e8		inx				inx 								; skip the (
.accd	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.acd0	09 04		ora #$04			ora 	#$04
.acd2	8d 84 04	sta $0484			sta 	identTypeByte
.acd5					_TKNoArray:
.acd5	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.acd8	20 72 ad	jsr $ad72			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.acdb	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.acdd	a9 80		lda #$80			lda 	#(KeywordSet0) & $FF
.acdf	20 27 a8	jsr $a827			jsr 	TokeniseSearchTable
.ace2	a2 00		ldx #$00			ldx 	#0
.ace4	b0 1f		bcs $ad05			bcs 	_TKFoundToken
.ace6	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ace8	a9 65		lda #$65			lda 	#(KeywordSet1) & $FF
.acea	20 27 a8	jsr $a827			jsr 	TokeniseSearchTable
.aced	a2 81		ldx #$81			ldx 	#$81
.acef	b0 14		bcs $ad05			bcs 	_TKFoundToken
.acf1	a0 aa		ldy #$aa			ldy 	#(KeywordSet2) >> 8
.acf3	a9 b3		lda #$b3			lda 	#(KeywordSet2) & $FF
.acf5	20 27 a8	jsr $a827			jsr 	TokeniseSearchTable
.acf8	a2 82		ldx #$82			ldx 	#$82
.acfa	b0 09		bcs $ad05			bcs 	_TKFoundToken
.acfc	20 02 ae	jsr $ae02			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.acff	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad02	4c 24 ac	jmp $ac24			jmp 	_TKTokeniseLoop 			; and go round again.
.ad05					_TKFoundToken:
.ad05	48		pha				pha 								; save token
.ad06	8a		txa				txa 								; shift in X, is there one ?
.ad07	f0 03		beq $ad0c			beq 	_TKNoTShift
.ad09	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte 			; if so, write it out
.ad0c					_TKNoTShift:
.ad0c	68		pla				pla 								; restore and write token
.ad0d	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ad10	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad13	4c 24 ac	jmp $ac24			jmp 	_TKTokeniseLoop 			; and go round again.
.ad16					TokeniseString:
.ad16	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ad18	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ad1b	e8		inx				inx									; start of quoted string.
.ad1c	da		phx				phx 								; push start of string on top
.ad1d	ca		dex				dex
.ad1e					_TSFindEnd:
.ad1e	e8		inx				inx
.ad1f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ad22	f0 04		beq $ad28			beq 	_TSEndOfString
.ad24	c9 22		cmp #$22			cmp 	#'"'
.ad26	d0 f6		bne $ad1e			bne 	_TSFindEnd
.ad28					_TSEndOfString:
.ad28	7a		ply				ply  								; so now Y is first character, X is character after end.
.ad29	48		pha				pha 								; save terminating character
.ad2a	20 32 ad	jsr $ad32			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ad2d	68		pla				pla 								; terminating character
.ad2e	f0 01		beq $ad31			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ad30	e8		inx				inx
.ad31					_TSNotQuote:
.ad31	60		rts				rts
.ad32					TOWriteBlockXY:
.ad32	86 36		stx $36				stx 	zTemp0 						; write end character
.ad34	98		tya				tya
.ad35	49 ff		eor #$ff			eor 	#$FF
.ad37	38		sec				sec
.ad38	65 36		adc $36				adc 	zTemp0
.ad3a	1a		inc a				inc 	a 							; one extra for NULL
.ad3b	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ad3e					_TOBlockLoop:
.ad3e	c4 36		cpy $36				cpy 	zTemp0
.ad40	f0 09		beq $ad4b			beq 	_TOBlockExit
.ad42	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ad45	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ad48	c8		iny				iny
.ad49	80 f3		bra $ad3e			bra 	_TOBlockLoop
.ad4b					_TOBlockExit:
.ad4b	a9 00		lda #$00			lda 	#0
.ad4d	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ad50	60		rts				rts
.ad51					TokeniseHexConstant:
.ad51	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ad53	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ad56	e8		inx				inx									; start of quoted string.
.ad57	da		phx				phx 								; push start of constant on top
.ad58	ca		dex				dex
.ad59					_THFindLoop:
.ad59	e8		inx				inx
.ad5a	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad5d	c9 30		cmp #$30			cmp 	#"0"
.ad5f	90 0c		bcc $ad6d			bcc 	_THFoundEnd
.ad61	c9 3a		cmp #$3a			cmp 	#"9"+1
.ad63	90 f4		bcc $ad59			bcc 	_THFindLoop
.ad65	c9 41		cmp #$41			cmp 	#"A"
.ad67	90 04		bcc $ad6d			bcc 	_THFoundEnd
.ad69	c9 47		cmp #$47			cmp 	#"F"+1
.ad6b	90 ec		bcc $ad59			bcc 	_THFindLoop
.ad6d					_THFoundEnd:
.ad6d	7a		ply				ply 								; restore start
.ad6e	20 32 ad	jsr $ad32			jsr 	TOWriteBlockXY 				; output the block
.ad71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ad72					TokeniseCalculateHash:
.ad72	da		phx				phx
.ad73	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ad76	a9 00		lda #$00			lda 	#0
.ad78					_TCHLoop:
.ad78	18		clc				clc
.ad79	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.ad7c	e8		inx				inx
.ad7d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ad80	d0 f6		bne $ad78			bne 	_TCHLoop
.ad82	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ad85	fa		plx				plx
.ad86	60		rts				rts
.ad87					FixLineBufferCase:
.ad87	a2 00		ldx #$00			ldx 	#0
.ad89					_FLBCLoop:
.ad89	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.ad8c	f0 22		beq $adb0			beq 	_FLBCExit 					; end of string.
.ad8e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ad90	f0 11		beq $ada3			beq 	_FLBCInQuotes
.ad92	e8		inx				inx
.ad93	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ad95	90 f2		bcc $ad89			bcc 	_FLBCLoop
.ad97	c9 7b		cmp #$7b			cmp 	#'z'+1
.ad99	b0 ee		bcs $ad89			bcs 	_FLBCLoop
.ad9b	38		sec				sec 								; make U/C
.ad9c	e9 20		sbc #$20			sbc 	#32
.ad9e	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ada1	80 e6		bra $ad89			bra 	_FLBCLoop
.ada3					_FLBCInQuotes:
.ada3	e8		inx				inx 								; advance
.ada4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.ada7	f0 07		beq $adb0			beq 	_FLBCExit 					; exit on EOS
.ada9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.adab	d0 f6		bne $ada3			bne 	_FLBCInQuotes
.adad	e8		inx				inx 								; skip over it
.adae	80 d9		bra $ad89			bra 	_FLBCLoop
.adb0					_FLBCExit:
.adb0	60		rts				rts
.adb1					TokeniseExtractLineNumber:
.adb1	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.adb4	48		pha				pha
.adb5	ad a8 04	lda $04a8			lda 	tokenLineNumber
.adb8	48		pha				pha
.adb9	20 ef ad	jsr $adef			jsr 	_TELNTimes2 				; line # x 4
.adbc	20 ef ad	jsr $adef			jsr 	_TELNTimes2 				; line # x 2
.adbf	18		clc				clc 								; add stacked value
.adc0	68		pla				pla
.adc1	6d a8 04	adc $04a8			adc 	tokenLineNumber
.adc4	8d a8 04	sta $04a8			sta 	tokenLineNumber
.adc7	68		pla				pla
.adc8	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.adcb	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.adce	20 ef ad	jsr $adef			jsr 	_TELNTimes2 				; line # x 10
.add1	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.add4	e8		inx				inx
.add5	29 0f		and #$0f			and 	#15 						; add to line #
.add7	18		clc				clc
.add8	6d a8 04	adc $04a8			adc 	tokenLineNumber
.addb	8d a8 04	sta $04a8			sta 	tokenLineNumber
.adde	90 03		bcc $ade3			bcc 	_TLENNoCarry
.ade0	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ade3					_TLENNoCarry:
.ade3	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ade6	c9 30		cmp #$30			cmp 	#'0'
.ade8	90 04		bcc $adee			bcc 	_TLENExit
.adea	c9 3a		cmp #$3a			cmp 	#'9'+1
.adec	90 c3		bcc $adb1			bcc 	TokeniseExtractLineNumber
.adee					_TLENExit:
.adee	60		rts				rts
.adef					_TELNTimes2:
.adef	0e a8 04	asl $04a8			asl 	tokenLineNumber
.adf2	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.adf5	60		rts				rts
.adf6					TokeniseWriteByte:
.adf6	da		phx				phx
.adf7	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.adfa	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.adfd	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ae00	fa		plx				plx
.ae01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ae02					CheckCreateVariableRecord:
.ae02	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ae04	85 36		sta $36				sta 	0+zTemp0
.ae06	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ae08	85 37		sta $37				sta 	1+zTemp0
.ae0a					_CCVSearch:
.ae0a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ae0c	f0 2c		beq $ae3a			beq 	_CCVFail
.ae0e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ae10	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ae12	cd 83 04	cmp $0483			cmp 	identHash
.ae15	d0 16		bne $ae2d			bne 	_CCVNext
.ae17	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ae19	ae 80 04	ldx $0480			ldx 	identStart
.ae1c					_CCVCompare:
.ae1c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ae1f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ae21	e8		inx				inx 								; advance pointers
.ae22	c8		iny				iny
.ae23	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ae24	d0 07		bne $ae2d			bne 	_CCVNext  					; didn't match go to next.
.ae26	90 f4		bcc $ae1c			bcc 	_CCVCompare 				; not finished yet.
.ae28	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ae2b	f0 41		beq $ae6e			beq 	_CCVFound 					; yes, we were successful
.ae2d					_CCVNext:
.ae2d	18		clc				clc
.ae2e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ae30	65 36		adc $36				adc 	zTemp0
.ae32	85 36		sta $36				sta 	zTemp0
.ae34	90 d4		bcc $ae0a			bcc 	_CCVSearch
.ae36	e6 37		inc $37				inc 	zTemp0+1
.ae38	80 d0		bra $ae0a			bra 	_CCVSearch
.ae3a					_CCVFail:
.ae3a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ae3c	ad 83 04	lda $0483			lda 	identHash
.ae3f	91 36		sta ($36),y			sta 	(zTemp0),y
.ae41	c8		iny				iny 								; offset 2 is the type byte
.ae42	ad 84 04	lda $0484			lda 	identTypeByte
.ae45	91 36		sta ($36),y			sta 	(zTemp0),y
.ae47	c8		iny				iny
.ae48					_CCVData:
.ae48	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ae4a	91 36		sta ($36),y			sta 	(zTemp0),y
.ae4c	c8		iny				iny
.ae4d	c0 08		cpy #$08			cpy 	#8
.ae4f	90 f7		bcc $ae48			bcc 	_CCVData
.ae51	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ae54					_CCVCopyName:
.ae54	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ae57	91 36		sta ($36),y			sta 	(zTemp0),y
.ae59	e8		inx				inx
.ae5a	c8		iny				iny
.ae5b	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ae5e	d0 f4		bne $ae54			bne 	_CCVCopyName
.ae60	98		tya				tya 								; patch offset
.ae61	92 36		sta ($36)			sta 	(zTemp0)
.ae63	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ae65	91 36		sta ($36),y			sta 	(zTemp0),y
.ae67	88		dey				dey
.ae68	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ae6a	09 80		ora #$80			ora 	#$80
.ae6c	91 36		sta ($36),y			sta 	(zTemp0),y
.ae6e					_CCVFound:
.ae6e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ae70	38		sec				sec
.ae71	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ae73	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ae75	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ae78	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ae7a	20 f6 ad	jsr $adf6			jsr 	TokeniseWriteByte
.ae7d	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
