
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Nov 17 17:13:41 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					lcLastCharacter:
>04a7							.fill 	1
.04a8					tokenOffset:
>04a8							.fill 	1
.04a9					tokenLineNumber:
>04a9							.fill 	2
.04ab					tokenBuffer:
>04ab							.fill 	253
.05a8					lineBuffer:
>05a8							.fill 	MaxLineSize+1
.05f9					numberBuffer:
>05f9							.fill 	34
.061b					decimalBuffer:
>061b							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b8 a8	jsr $a8b8			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8014	20 4d 88	jsr $884d			jsr 	NewCommand 					; erase current program
.8017	20 fe 82	jsr $82fe			jsr 	BackloadProgram
.801a	4c 5b 83	jmp $835b			jmp 	WarmStart
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3118."
>8064	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>8074	32 32 2e 20 42 75 69 6c 64 20 33 31 31 38 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8086					AssembleGroup1:
.8086	a9 ff		lda #$ff			lda 	#$FF
.8088	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808b	80 02		bra $808f			bra 	AsmGroup12
.808d					AssembleGroup2:
.808d	a9 00		lda #$00			lda 	#$00
.808f					AsmGroup12:
.808f	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8092	68		pla				pla 								; pop the return address to access the information following.
.8093	fa		plx				plx
.8094	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get opcode and save as base
.8097	8d a4 04	sta $04a4			sta 	BaseOpcode
.809a	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809d	d0 08		bne $80a7			bne 	_AG12HaveMask
.809f	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a1	20 25 81	jsr $8125			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a4	8d a5 04	sta $04a5			sta 	ModeMask
.80a7					_AG12HaveMask:
.80a7	20 60 82	jsr $8260			jsr 	TypeAndCalculateOperand 	; get zero page type
.80aa	da		phx				phx 								; save found address mode
.80ab	20 89 81	jsr $8189			jsr 	AssembleModeX
.80ae	fa		plx				plx  								; restore address mode
.80af	b0 0b		bcs $80bc			bcs 	_AG12Exit
.80b1	20 bd 80	jsr $80bd			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b4	20 89 81	jsr $8189			jsr 	AssembleModeX
.80b7	b0 03		bcs $80bc			bcs 	_AG12Exit
.80b9	4c 84 9f	jmp $9f84			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bc					_AG12Exit:
.80bc	60		rts				rts
.80bd					PromoteToAbsolute:
.80bd	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bf	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c1	f0 19		beq $80dc			beq 	_PTADo
.80c3	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c5	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c7	f0 13		beq $80dc			beq 	_PTADo
.80c9	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80cb	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cd	f0 0d		beq $80dc			beq 	_PTADo
.80cf	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d1	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d3	f0 07		beq $80dc			beq 	_PTADo
.80d5	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d7	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d9	f0 01		beq $80dc			beq 	_PTADo
.80db	60		rts				rts
.80dc					_PTADo:
.80dc	aa		tax				tax
.80dd	60		rts				rts
.80de					AssembleGroup3:
.80de	68		pla				pla 								; get parameters, which is just the opcode.
.80df	fa		plx				plx
.80e0	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get and output opcode
.80e3	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.80e6	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get a 16 bit operand
.80e9	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ec	38		sec				sec
.80ed	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80f0	48		pha				pha 								; LSB in A
.80f1	ad 10 04	lda $0410			lda 	NSMantissa1
.80f4	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f7	aa		tax				tax 								; MSB in X
.80f8	68		pla				pla
.80f9	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80fa	69 7f		adc #$7f			adc 	#$7F
.80fc	90 01		bcc $80ff			bcc 	_AG3NoCarry
.80fe	e8		inx				inx
.80ff					_AG3NoCarry:
.80ff	38		sec				sec 								; fix back and write out anyways.
.8100	e9 80		sbc #$80			sbc 	#$80
.8102	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.8105	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8107	f0 0a		beq $8113			beq 	_AG3Exit
.8109	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810c	29 01		and #$01			and 	#1
.810e	f0 03		beq $8113			beq 	_AG3Exit
.8110	4c 89 9f	jmp $9f89			jmp 	RangeError 					; no, branch is out of range
.8113					_AG3Exit:
.8113	60		rts				rts
.8114					AssembleGroup4:
.8114	68		pla				pla 								; pop address
.8115	fa		plx				plx
.8116	20 1d 81	jsr $811d			jsr 	AccessParameters 			; access and get first
.8119	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 			; output it.
.811c	60		rts				rts
.811d					AccessParameters:
.811d	8d a1 04	sta $04a1			sta 	ParamStart
.8120	8e a2 04	stx $04a2			stx 	ParamStart+1
.8123	a9 01		lda #$01			lda 	#1
.8125					GetParameter:
.8125	5a		phy				phy
.8126	a8		tay				tay
.8127	ad a1 04	lda $04a1			lda 	ParamStart
.812a	85 36		sta $36				sta 	zTemp0
.812c	ad a2 04	lda $04a2			lda 	ParamStart+1
.812f	85 37		sta $37				sta 	zTemp0+1
.8131	b1 36		lda ($36),y			lda 	(zTemp0),y
.8133	7a		ply				ply
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8135					AssemblerWriteByte:
.8135	48		pha			pha
.8136	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8139	29 02		and #$02		and 	#2
.813b	f0 1b		beq $8158		beq 	_AWBNoPrint
.813d	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8140	20 73 81	jsr $8173		jsr 	PrintHex
.8143	ad 9e 04	lda $049e		lda		AssemblerAddress
.8146	20 73 81	jsr $8173		jsr 	PrintHex
.8149	a9 20		lda #$20		lda 	#' '
.814b	20 2a a7	jsr $a72a		jsr 	EXTPrintCharacter
.814e	68		pla			pla 									; print byte
.814f	48		pha			pha
.8150	20 73 81	jsr $8173		jsr 	PrintHex
.8153	a9 0d		lda #$0d		lda 	#13
.8155	20 2a a7	jsr $a72a		jsr 	EXTPrintCharacter
.8158					_AWBNoPrint:
.8158	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815b	85 36		sta $36			sta 	zTemp0
.815d	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8160	f0 0e		beq $8170		beq 	_AWBRange
.8162	85 37		sta $37			sta 	zTemp0+1
.8164	68		pla			pla 									; write byte out
.8165	92 36		sta ($36)		sta 	(zTemp0)
.8167	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.816a	d0 03		bne $816f		bne 	_AWBNoCarry
.816c	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816f					_AWBNoCarry:
.816f	60		rts			rts
.8170					_AWBRange:
.8170	4c 89 9f	jmp $9f89		jmp 	RangeError
.8173					PrintHex:
.8173	48		pha				pha
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	4a		lsr a				lsr 	a
.8178	20 7c 81	jsr $817c			jsr 	_PrintNibble
.817b	68		pla				pla
.817c					_PrintNibble:
.817c	29 0f		and #$0f			and 	#15
.817e	c9 0a		cmp #$0a			cmp 	#10
.8180	90 02		bcc $8184			bcc 	_NoShift
.8182	69 06		adc #$06			adc 	#6
.8184					_NoShift:
.8184	69 30		adc #$30			adc 	#48
.8186	4c 2a a7	jmp $a72a			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8189					AssembleModeX:
.8189	5a		phy				phy
.818a	ad a3 04	lda $04a3			lda 	IsGroup1
.818d	f0 17		beq $81a6			beq 	_AMXGroup2
.818f	8a		txa				txa 							; is it in group # 1
.8190	29 40		and #$40			and 	#AM_ISG1
.8192	f0 50		beq $81e4			beq 	_AMXFail 				; no, give up.
.8194	8a		txa				txa 							; get back.
.8195	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8197	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8199	d0 22		bne $81bd			bne 	_AMXHaveInfo
.819b	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819e	c9 81		cmp #$81			cmp 	#$81
.81a0	f0 42		beq $81e4			beq 	_AMXFail
.81a2	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a4	80 17		bra $81bd			bra 	_AMXHaveInfo 			; odd design decision there.
.81a6					_AMXGroup2:
.81a6	8a		txa				txa 							; is it in group 2 ?
.81a7	29 20		and #$20			and 	#AM_ISG2
.81a9	f0 39		beq $81e4			beq 	_AMXFail 				; no, give up.
.81ab	8a		txa				txa 							; get the offset into Y
.81ac	29 1f		and #$1f			and 	#$1F
.81ae	4a		lsr a				lsr 	a 						; make it 0-7.
.81af	4a		lsr a				lsr  	a
.81b0	a8		tay				tay
.81b1	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b4					_AMXCheckOkay:
.81b4	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b5	88		dey				dey
.81b6	10 fc		bpl $81b4			bpl 	_AMXCheckOkay
.81b8	90 2a		bcc $81e4			bcc 	_AMXFail 				; not allowed.
.81ba	8a		txa				txa  							; get mask back
.81bb	29 1f		and #$1f			and 	#$1F
.81bd					_AMXHaveInfo:
.81bd	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bf	10 05		bpl $81c6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c1	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c4	d0 1e		bne $81e4			bne 	_AMXFail
.81c6					_AMXAnySize:
.81c6	18		clc				clc 							; add offset to the base opcode
.81c7	6d a4 04	adc $04a4			adc 	BaseOpcode
.81ca					_AMXOutputCode:
.81ca	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cd	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cf	f0 10		beq $81e1			beq 	_AMXExit
.81d1	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d4	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81d7	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d9	30 06		bmi $81e1			bmi 	_AMXExit
.81db	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81de	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81e1					_AMXExit:
.81e1	7a		ply				ply
.81e2	38		sec				sec
.81e3	60		rts				rts
.81e4					_AMXFail:
.81e4	a0 00		ldy #$00			ldy 	#0
.81e6					_AMXCheckOddities:
.81e6	8a		txa				txa
.81e7	d9 0f 82	cmp $820f,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81ea	d0 16		bne $8202			bne 	_AMXCONext
.81ec	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ef	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f2	d0 0e		bne $8202			bne 	_AMXCONext
.81f4	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f6	10 05		bpl $81fd			bpl 	_AMXCONotZero
.81f8	ad 10 04	lda $0410			lda 	NSMantissa1
.81fb	d0 05		bne $8202			bne 	_AMXCONext
.81fd					_AMXCONotZero:
.81fd	b9 0e 82	lda $820e,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8200	80 c8		bra $81ca			bra 	_AMXOutputCode 			; and assemble it
.8202					_AMXCONext:
.8202	c8		iny				iny
.8203	c8		iny				iny
.8204	c8		iny				iny
.8205	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; end of table
.8208	d0 dc		bne $81e6			bne 	_AMXCheckOddities
.820a					_AMXCOFail:
.820a	7a		ply				ply
.820b	18		clc				clc
.820c	60		rts				rts
.820d					ExtraOpcode:
>820d	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8210	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8213	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8216	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8219	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821c	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821f	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8222	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8225	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8228	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822b	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822c					LabelHere:
.822c	c8		iny				iny 								; skip .
.822d	a2 00		ldx #$00			ldx 	#0 							; get a term
.822f	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; get a term
.8232	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8235	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8237	d0 24		bne $825d			bne 	_ALType
.8239	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823c	85 36		sta $36				sta 	zTemp0
.823e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8241	85 37		sta $37				sta 	zTemp0+1
.8243	5a		phy				phy 								; copy address in.
.8244	a0 01		ldy #$01			ldy 	#1
.8246	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8249	92 36		sta ($36)			sta 	(zTemp0)
.824b	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824e	91 36		sta ($36),y			sta 	(zTemp0),y
.8250	c8		iny				iny
.8251	a9 00		lda #$00			lda 	#0
.8253	91 36		sta ($36),y			sta 	(zTemp0),y
.8255	c8		iny				iny
.8256	91 36		sta ($36),y			sta 	(zTemp0),y
.8258	c8		iny				iny
.8259	91 36		sta ($36),y			sta 	(zTemp0),y
.825b	7a		ply				ply
.825c	60		rts				rts
.825d					_ALType:
.825d	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8260					TypeAndCalculateOperand:
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8264	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8266	f0 5b		beq $82c3			beq 	_TACOExit
.8268	c9 80		cmp #$80			cmp 	#KWC_EOL
.826a	f0 57		beq $82c3			beq 	_TACOExit
.826c	c8		iny				iny
.826d	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826f	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8271	f0 51		beq $82c4			beq 	CalculateOperand
.8273	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8275	f0 1f		beq $8296			beq 	_TACOIndirect
.8277	88		dey				dey 								; undo get of first character
.8278	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get operand
.827b	b1 30		lda ($30),y			lda 	(codePtr),y
.827d	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8281	d0 40		bne $82c3			bne 	_TACOExit
.8283	c8		iny				iny
.8284	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8287	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8289	c9 58		cmp #$58			cmp 	#'X'
.828b	f0 36		beq $82c3			beq 	_TACOExit
.828d	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828f	c9 59		cmp #$59			cmp 	#'Y'
.8291	f0 30		beq $82c3			beq 	_TACOExit
.8293					_TACOSyntax:
.8293	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.8296					_TACOIndirect:
.8296	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get the operand
.8299	b1 30		lda ($30),y			lda 	(codePtr),y
.829b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829d	f0 17		beq $82b6			beq 	_TACOIndX
.829f	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a2	b1 30		lda ($30),y			lda 	(codePtr),y
.82a4	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a8	d0 19		bne $82c3			bne 	_TACOExit
.82aa	c8		iny				iny
.82ab	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ae	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82b0	d0 e1		bne $8293			bne 	_TACOSyntax
.82b2	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b4	80 0d		bra $82c3			bra 	_TACOExit
.82b6					_TACOIndX:
.82b6	c8		iny				iny
.82b7	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ba	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bc	d0 d5		bne $8293			bne 	_TACOSyntax
.82be	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket			; check )
.82c1	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c3					_TACOExit:
.82c3	60		rts				rts
.82c4					CalculateOperand:
.82c4	48		pha				pha
.82c5	da		phx				phx
.82c6	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c8	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.82cb	fa		plx				plx
.82cc	68		pla				pla
.82cd	60		rts				rts
.82ce					TACOCheckXY:
.82ce	b1 30		lda ($30),y			lda 	(codePtr),y
.82d0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d2	c9 40		cmp #$40			cmp 	#$40
.82d4	d0 21		bne $82f7			bne 	_TCXYFail
.82d6	b1 30		lda ($30),y			lda 	(codePtr),y
.82d8	18		clc				clc
.82d9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82db	85 37		sta $37				sta 	zTemp0+1
.82dd	c8		iny				iny
.82de	b1 30		lda ($30),y			lda 	(codePtr),y
.82e0	c8		iny				iny
.82e1	85 36		sta $36				sta 	zTemp0
.82e3	5a		phy				phy 								; save position
.82e4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e8	d0 0c		bne $82f6			bne 	_TCXYPopFail
.82ea	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ee	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82f0	f0 08		beq $82fa			beq 	_TCXYFound
.82f2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f4	f0 04		beq $82fa			beq 	_TCXYFound
.82f6					_TCXYPopFail:
.82f6	7a		ply				ply
.82f7					_TCXYFail:
.82f7	a9 00		lda #$00			lda 	#0
.82f9	60		rts				rts
.82fa					_TCXYFound:
.82fa	7a		ply				ply 								; restore position
.82fb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fe					BackloadProgram:
.82fe	a2 ff		ldx #$ff			ldx 	#$FF
.8300	20 28 83	jsr $8328			jsr 	BLReadByte
.8303	30 1f		bmi $8324			bmi 	_BPExit
.8305					_BPCopy:
.8305	e8		inx				inx  								; copy byte in
.8306	9d a8 05	sta $05a8,x			sta 	lineBuffer,x
.8309	9e a9 05	stz $05a9,x			stz 	lineBuffer+1,x
.830c	20 28 83	jsr $8328			jsr 	BLReadByte 					; read next byte
.830f	30 0a		bmi $831b			bmi 	_BPEndLine 					; -ve = EOL
.8311	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8313	d0 02		bne $8317			bne 	_BPNotTab
.8315	a9 20		lda #$20			lda 	#' '
.8317					_BPNotTab:
.8317	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8319	b0 ea		bcs $8305			bcs 	_BPCopy
.831b					_BPEndLine:
.831b	20 35 b5	jsr $b535			jsr 	TokeniseLine 				; tokenise the line.
.831e	38		sec				sec 								; append not insert
.831f	20 61 a1	jsr $a161			jsr 	MemoryInsertLine 			; append to current program
.8322	80 da		bra $82fe			bra 	BackloadProgram
.8324					_BPExit:
.8324	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear variables etc.
.8327	60		rts				rts
.8328					BLReadByte:
.8328					_BLLoad:
.8328	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832b	ee 29 83	inc $8329			inc 	_BLLoad+1
.832e	d0 03		bne $8333			bne 	_BLNoCarry
.8330	ee 2a 83	inc $832a			inc 	_BLLoad+2
.8333					_BLNoCarry:
.8333	c9 00		cmp #$00			cmp 	#0
.8335	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8336					EditProgramCode:
.8336	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line.
.8339	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1
.833c	20 09 a2	jsr $a209			jsr 	MemorySearch
.833f	90 05		bcc $8346			bcc 	_EPCNoDelete 				; reached the end don't delete
.8341	d0 03		bne $8346			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8343	20 2a a1	jsr $a12a			jsr 	MemoryDeleteLine 			; delete the line
.8346					_EPCNoDelete:
.8346	ad ab 04	lda $04ab			lda 	TokenBuffer 				; buffer empty
.8349	c9 80		cmp #$80			cmp 	#KWC_EOL
.834b	f0 0d		beq $835a			beq 	_EPCNoInsert
.834d	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8350	ae aa 04	ldx $04aa			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8353	20 09 a2	jsr $a209			jsr 	MemorySearch
.8356	18		clc				clc 								; insert at this point.
.8357	20 61 a1	jsr $a161			jsr 	MemoryInsertLine 			; insert the line
.835a					_EPCNoInsert:
.835a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835b					WarmStart:
.835b	a2 ff		ldx #$ff			ldx 	#$FF
.835d	9a		txs				txs
.835e	20 30 a9	jsr $a930			jsr 	EXTInputLine 				; get line to lineBuffer
.8361	20 35 b5	jsr $b535			jsr 	TokeniseLine 				; tokenise the line
.8364	ad a9 04	lda $04a9			lda 	TokenLineNumber 			; line number ?
.8367	0d aa 04	ora $04aa			ora 	TokenLineNumber+1
.836a	d0 17		bne $8383			bne 	_WSEditCode 				; if so,edit code.
.836c	9c a8 04	stz $04a8			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.836f	a9 a8		lda #$a8			lda 	#((TokenOffset) & $FF)
.8371	85 30		sta $30				sta 	codePtr
.8373	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8375	85 31		sta $31				sta 	codePtr+1
.8377	ad ab 04	lda $04ab			lda 	TokenBuffer 				; nothing to run
.837a	c9 80		cmp #$80			cmp 	#KWC_EOL
.837c	f0 dd		beq $835b			beq 	WarmStart
.837e	20 ea 89	jsr $89ea			jsr 	RUNCodePointerLine 			; execute that line.
.8381	80 d8		bra $835b			bra 	WarmStart
.8383					_WSEditCode:
.8383	20 36 83	jsr $8336			jsr 	EditProgramCode
.8386	20 f4 83	jsr $83f4			jsr 	ClearCommand
.8389	80 d0		bra $835b			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838b					AssembleCommand:
.838b	a2 00		ldx #$00			ldx 	#0
.838d	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; start address
.8390	ad 08 04	lda $0408			lda 	NSMantissa0
.8393	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8396	ad 10 04	lda $0410			lda 	NSMantissa1
.8399	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839c	20 26 8d	jsr $8d26			jsr 	CheckComma
.839f	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; options
.83a2	ad 08 04	lda $0408			lda 	NSMantissa0
.83a5	8d a0 04	sta $04a0			sta 	AssemblerControl
.83a8	60		rts				rts
.83a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83aa					AssertCommand:
.83aa	a2 00		ldx #$00			ldx 	#0
.83ac	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; the assert test
.83af	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; exit if result is non zero.
.83b2	d0 05		bne $83b9			bne 	_ACExit
.83b4	a9 0a		lda #$0a		lda	#10
.83b6	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.83b9					_ACExit:
.83b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83ba					CallCommand:
.83ba	a2 00		ldx #$00			ldx 	#0
.83bc	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.83bf					_CCClear
.83bf	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c0	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.83c3	e0 04		cpx #$04			cpx 	#4
.83c5	d0 f8		bne $83bf			bne 	_CCClear
.83c7	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83c9					_CCCParam:
.83c9	b1 30		lda ($30),y			lda 	(codePtr),y
.83cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83cd	d0 09		bne $83d8			bne 	_CCCRun6502
.83cf	c8		iny				iny 								; skip comma
.83d0	e8		inx				inx	 								; next level
.83d1	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d4	e0 03		cpx #$03			cpx 	#3
.83d6	90 f1		bcc $83c9			bcc 	_CCCParam 					; done all 3 ?
.83d8					_CCCRun6502:
.83d8	5a		phy				phy 								; save position
.83d9	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83dc	85 37		sta $37				sta 	zTemp0+1
.83de	ad 08 04	lda $0408			lda 	NSMantissa0
.83e1	85 36		sta $36				sta 	zTemp0
.83e3	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e6	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83e9	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83ec	20 f1 83	jsr $83f1			jsr 	_CCCZTemp0 					; call zTemp0
.83ef	7a		ply				ply 								; restore position and exit
.83f0	60		rts				rts
.83f1					_CCCZTemp0:
.83f1	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f4					ClearCommand:
.83f4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f6	85 36		sta $36				sta 	0+zTemp0
.83f8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fa	85 37		sta $37				sta 	1+zTemp0
.83fc					_ClearZeroLoop:
.83fc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83fe	f0 24		beq $8424			beq 	_ClearZeroEnd
.8400	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8402	a9 00		lda #$00			lda 	#0
.8404					_ClearOneVariable:
.8404	91 36		sta ($36),y			sta 	(zTemp0),y
.8406	c8		iny				iny
.8407	c0 08		cpy #$08			cpy 	#8
.8409	d0 f9		bne $8404			bne 	_ClearOneVariable
.840b	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.840d	b1 36		lda ($36),y			lda 	(zTemp0),y
.840f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8411	d0 04		bne $8417			bne 	_ClearNotProcedure
.8413	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8415	91 36		sta ($36),y			sta 	(zTemp0),y
.8417					_ClearNotProcedure:
.8417	18		clc				clc 								; go to the next variable
.8418	b2 36		lda ($36)			lda 	(zTemp0)
.841a	65 36		adc $36				adc 	zTemp0
.841c	85 36		sta $36				sta 	zTemp0
.841e	90 dc		bcc $83fc			bcc 	_ClearZeroLoop
.8420	e6 37		inc $37				inc 	zTemp0+1
.8422	80 d8		bra $83fc			bra 	_ClearZeroLoop
.8424					_ClearZeroEnd:
.8424	18		clc				clc
.8425	a5 36		lda $36				lda 	zTemp0
.8427	69 01		adc #$01			adc 	#1
.8429	8d 8c 04	sta $048c			sta 	lowMemPtr
.842c	a5 37		lda $37				lda 	zTemp0+1
.842e	69 00		adc #$00			adc 	#0
.8430	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8433	20 c3 a2	jsr $a2c3			jsr 	StackReset
.8436	20 2d a3	jsr $a32d			jsr 	StringSystemInitialise
.8439	20 27 8c	jsr $8c27			jsr 	ProcedureScan
.843c	20 a6 89	jsr $89a6			jsr 	Command_Restore
.843f	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8442	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8445	9c a0 04	stz $04a0			stz 	AssemblerControl
.8448	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.844c					ClearScreen:
.844c	5a		phy				phy
.844d	a9 0c		lda #$0c			lda 	#12
.844f	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8452	7a		ply				ply
.8453	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8454					Command_Data:
.8454	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8456	a2 80		ldx #$80			ldx 	#KWC_EOL
.8458	20 79 8c	jsr $8c79			jsr 	ScanForward
.845b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845c					DimCommand:
.845c	b1 30		lda ($30),y			lda 	(codePtr),y
.845e	29 c0		and #$c0			and 	#$C0
.8460	c9 40		cmp #$40			cmp 	#$40
.8462	d0 7a		bne $84de			bne 	_DCSyntax
.8464	b1 30		lda ($30),y			lda 	(codePtr),y
.8466	18		clc				clc
.8467	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8469	85 3f		sta $3f				sta 	zaTemp+1
.846b	c8		iny				iny
.846c	b1 30		lda ($30),y			lda 	(codePtr),y
.846e	c8		iny				iny
.846f	85 3e		sta $3e				sta 	zaTemp
.8471	5a		phy				phy
.8472	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8474	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8476	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8478	c9 18		cmp #$18			cmp 	#NSTProcedure
.847a	f0 62		beq $84de			beq 	_DCSyntax
.847c	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.847e	29 04		and #$04			and 	#NSBIsArray
.8480	f0 64		beq $84e6			beq 	_DCType
.8482	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8484	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8486	d0 59		bne $84e1			bne 	_DCRedefine
.8488	7a		ply				ply
.8489	20 e9 84	jsr $84e9			jsr 	_DCGetSize 				; get array size, check it.
.848c	5a		phy				phy
.848d	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.848f	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8491	7a		ply				ply 							; is there a second (e.g. ,x)
.8492	b1 30		lda ($30),y			lda 	(codePtr),y
.8494	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8496	d0 0a		bne $84a2			bne 	_DCOneDimension
.8498	c8		iny				iny 							; skip comma
.8499	20 e9 84	jsr $84e9			jsr 	_DCGetSize 				; get 2nd array size
.849c	5a		phy				phy
.849d	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.849f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a1	7a		ply				ply
.84a2					_DCOneDimension:
.84a2	5a		phy				phy 							; save position
.84a3	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a7	aa		tax				tax
.84a8	c8		iny				iny
.84a9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ab	e8		inx				inx 							; bump them.
.84ac	1a		inc a				inc 	a
.84ad	20 8f 9d	jsr $9d8f			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b0	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b2	29 e0		and #$e0			and 	#$E0
.84b4	d0 23		bne $84d9			bne 	_DCSize
.84b6	a0 02		ldy #$02			ldy 	#2 						; get base type
.84b8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ba	20 f7 84	jsr $84f7			jsr 	ScaleByBaseType 		; scale by base type
.84bd	a5 36		lda $36				lda 	zTemp0
.84bf	a6 37		ldx $37				ldx 	zTemp0+1
.84c1	20 85 99	jsr $9985			jsr 	AllocateXABytes 		; allocate memory
.84c4	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c6	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c8	c8		iny				iny
.84c9	8a		txa				txa
.84ca	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cc	7a		ply				ply 							; get position back
.84cd	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 		; check )
.84d0	b1 30		lda ($30),y			lda 	(codePtr),y
.84d2	c8		iny				iny 							; consume in case
.84d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d5	f0 85		beq $845c			beq 	DimCommand
.84d7	88		dey				dey 							; undo consume
.84d8	60		rts				rts
.84d9					_DCSize:
.84d9	a9 16		lda #$16		lda	#22
.84db	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.84de					_DCSyntax:
.84de	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.84e1					_DCRedefine:
.84e1	a9 15		lda #$15		lda	#21
.84e3	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.84e6					_DCType:
.84e6	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.84e9					_DCGetSize:
.84e9	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84eb	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 	; get array dimension
.84ee	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f0	f0 e7		beq $84d9			beq 	_DCSize
.84f2	c9 fe		cmp #$fe			cmp 	#254
.84f4	f0 e3		beq $84d9			beq 	_DCSize
.84f6	60		rts				rts
.84f7					ScaleByBaseType:
.84f7	29 10		and #$10			and 	#NSBIsString 			; is it string
.84f9	d0 19		bne $8514			bne 	_SBBTString
.84fb	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84fd	48		pha				pha
.84fe	a5 36		lda $36				lda 	zTemp0
.8500	48		pha				pha
.8501	06 36		asl $36				asl 	zTemp0 					; x 2
.8503	26 37		rol $37				rol 	zTemp0+1
.8505	06 36		asl $36				asl 	zTemp0 					; x 4
.8507	26 37		rol $37				rol 	zTemp0+1
.8509	68		pla				pla 							; add stacked value = x 5
.850a	65 36		adc $36				adc 	zTemp0
.850c	85 36		sta $36				sta 	zTemp0
.850e	68		pla				pla
.850f	65 37		adc $37				adc 	zTemp0+1
.8511	85 37		sta $37				sta 	zTemp0+1
.8513	60		rts				rts
.8514					_SBBTString:
.8514	06 36		asl $36				asl 	zTemp0
.8516	26 37		rol $37				rol 	zTemp0+1
.8518	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8519					EndCommand:
.8519	4c 5b 83	jmp $835b			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.851c					ForCommand:
.851c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.851e	20 5e a2	jsr $a25e			jsr 	StackOpen
.8521	a2 00		ldx #$00			ldx 	#0
.8523	20 c0 97	jsr $97c0			jsr 	EvaluateTerm
.8526	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8529	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.852b	d0 49		bne $8576			bne		_FCError
.852d	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.852f	20 2e 8d	jsr $8d2e			jsr 	CheckNextA
.8532	e8		inx				inx
.8533	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; <from> in +1
.8536	b1 30		lda ($30),y			lda 	(codePtr),y
.8538	c8		iny				iny 								; consume it
.8539	48		pha				pha 								; save on stack for later
.853a	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.853c	f0 04		beq $8542			beq 	_FCNoSyntax
.853e	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8540	d0 37		bne $8579			bne 	_FCSyntaxError
.8542					_FCNoSyntax:
.8542	e8		inx				inx
.8543	20 46 9d	jsr $9d46			jsr 	EvaluateInteger
.8546	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop back position
.8549	68		pla				pla 								; restore DOWNTO or TO
.854a	5a		phy				phy 								; save Y on the stack
.854b	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.854d	f0 02		beq $8551			beq 	_FCNotDownTo
.854f	a9 02		lda #$02			lda 	#2
.8551					_FCNotDownTo:
.8551	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8552	a0 10		ldy #$10			ldy 	#16
.8554	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8556	a0 06		ldy #$06			ldy 	#6
.8558	ad 08 04	lda $0408			lda 	NSMantissa0
.855b	91 34		sta ($34),y			sta 	(basicStack),y
.855d	ad 10 04	lda $0410			lda 	NSMantissa1
.8560	c8		iny				iny
.8561	91 34		sta ($34),y			sta 	(basicStack),y
.8563	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8565	a2 01		ldx #$01			ldx 	#1
.8567	20 7c 85	jsr $857c			jsr 	FCIntegerToStack
.856a	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.856c	a2 02		ldx #$02			ldx 	#2
.856e	20 7c 85	jsr $857c			jsr 	FCIntegerToStack
.8571	20 9c 85	jsr $859c			jsr 	CopyIndexToReference
.8574	7a		ply				ply 								; restore position
.8575	60		rts				rts
.8576					_FCError:
.8576	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.8579					_FCSyntaxError:
.8579	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.857c					FCIntegerToStack:
.857c	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.857f	10 03		bpl $8584			bpl	 	_FCNotNegative
.8581	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8584					_FCNotNegative:
.8584	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8587	91 34		sta ($34),y			sta 	(basicStack),y
.8589	c8		iny				iny
.858a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.858d	91 34		sta ($34),y			sta 	(basicStack),y
.858f	c8		iny				iny
.8590	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8593	91 34		sta ($34),y			sta 	(basicStack),y
.8595	c8		iny				iny
.8596	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8599	91 34		sta ($34),y			sta 	(basicStack),y
.859b	60		rts				rts
.859c					CopyIndexToReference:
.859c	5a		phy				phy
.859d	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.859f	38		sec				sec 								; (because we copy from offset 8)
.85a0	b1 34		lda ($34),y			lda 	(basicStack),y
.85a2	e9 08		sbc #$08			sbc 	#8
.85a4	85 36		sta $36				sta 	zTemp0
.85a6	c8		iny				iny
.85a7	b1 34		lda ($34),y			lda 	(basicStack),y
.85a9	e9 00		sbc #$00			sbc 	#0
.85ab	85 37		sta $37				sta 	zTemp0+1
.85ad	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85af	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b1	b1 34		lda ($34),y			lda 	(basicStack),y
.85b3	0a		asl a				asl 	a 							; into carry
.85b4	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b6	90 14		bcc $85cc			bcc 	_CITRNormal
.85b8	38		sec				sec
.85b9					_CITRNegative:
.85b9	a9 00		lda #$00			lda 	#0
.85bb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85bd	91 36		sta ($36),y			sta 	(zTemp0),y
.85bf	c8		iny				iny
.85c0	ca		dex				dex
.85c1	d0 f6		bne $85b9			bne 	_CITRNegative
.85c3	88		dey				dey 								; look at MSB of mantissa
.85c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c6	09 80		ora #$80			ora 	#$80
.85c8	91 36		sta ($36),y			sta 	(zTemp0),y
.85ca	7a		ply				ply
.85cb	60		rts				rts
.85cc					_CITRNormal:
.85cc	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85ce	91 36		sta ($36),y			sta 	(zTemp0),y
.85d0	c8		iny				iny
.85d1	ca		dex				dex
.85d2	d0 f8		bne $85cc			bne 	_CITRNormal
.85d4	7a		ply				ply 								; and exit.
.85d5	60		rts				rts
.85d6					NextCommand:
.85d6	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85d8	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85da	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.85dd	5a		phy				phy
.85de	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e0	b1 34		lda ($34),y			lda 	(basicStack),y
.85e2	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e4	30 02		bmi $85e8			bmi 	_NCStepNeg
.85e6	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85e8					_NCStepNeg:
.85e8	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ea	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ec	18		clc				clc
.85ed					_NCBump:
.85ed	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85ef	91 34		sta ($34),y			sta 	(basicStack),y
.85f1	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f3	c8		iny				iny 								; next byte
.85f4	ca		dex				dex 								; do four times
.85f5	d0 f6		bne $85ed			bne 	_NCBump
.85f7	20 9c 85	jsr $859c			jsr		CopyIndexToReference		; copy it to the reference variable.
.85fa	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85fc	b1 34		lda ($34),y			lda 	(basicStack),y
.85fe	0a		asl a				asl 	a 							; sign bit to carry
.85ff	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8601	85 38		sta $38				sta 	zTemp1
.8603	90 02		bcc $8607			bcc 	_NCCompRev 					; use if step is +ve
.8605	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8607					_NCCompRev:
.8607	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8609	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.860b	85 39		sta $39				sta 	zTemp1+1
.860d	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.860f	38		sec				sec
.8610					_NCCompare:
.8610	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8612	b1 34		lda ($34),y			lda 	(basicStack),y
.8614	a4 39		ldy $39				ldy 	zTemp1+1
.8616	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8618	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861a	e6 39		inc $39				inc 	zTemp1+1
.861c	ca		dex				dex 								; do it 4 times.
.861d	d0 f1		bne $8610			bne 	_NCCompare
.861f	50 02		bvc $8623			bvc 	_NCNoOverflow 				; convert to signed comparison
.8621	49 80		eor #$80			eor 	#$80
.8623					_NCNoOverflow:
.8623	7a		ply				ply 								; restore Y position
.8624	0a		asl a				asl 	a 							; is bit 7 set.
.8625	90 04		bcc $862b			bcc 	_NCLoopback 				; if no , >= so loop back
.8627	20 7c a2	jsr $a27c			jsr 	StackClose 					; exit the loop
.862a	60		rts				rts
.862b					_NCLoopBack:
.862b	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; loop back
.862e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.862f					Command_GOSUB:
.862f	a2 00		ldx #$00			ldx 	#0
.8631	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8634	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8636	20 5e a2	jsr $a25e			jsr 	StackOpen 					; create frame
.8639	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save current position
.863c	4c 52 86	jmp $8652			jmp 	GotoStackX
.863f					Command_RETURN:
.863f	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8641	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8643	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8646	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; restore code position
.8649	20 7c a2	jsr $a27c			jsr 	StackClose
.864c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.864d					GotoCommand:
.864d	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.864f	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.8652					GotoStackX:
.8652	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8655	48		pha				pha 								; it is slightly inefficient, just in cases.
.8656	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8659	fa		plx				plx
.865a	20 09 a2	jsr $a209			jsr 	MemorySearch 				; transfer to line number AX.
.865d	90 05		bcc $8664			bcc 	_GotoError 					; not found, off end.
.865f	d0 03		bne $8664			bne 	_GotoError 					; not found exactly
.8661	4c e3 89	jmp $89e3			jmp 	RunNewLine 					; and go straight to new line code.
.8664					_GotoError:
.8664	a9 0d		lda #$0d		lda	#13
.8666	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8669					IfCommand:
.8669	a2 00		ldx #$00			ldx 	#0 							; If what.
.866b	20 23 9d	jsr $9d23			jsr 	EvaluateNumber
.866e	b1 30		lda ($30),y			lda 	(codePtr),y
.8670	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8672	d0 0a		bne $867e			bne 	_IFStructured
.8674	c8		iny				iny 								; consume THEN
.8675	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero
.8678	f0 01		beq $867b			beq 	_IfFail 					; if fail, go to next line
.867a	60		rts				rts 								; if THEN just continue
.867b					_IfFail:
.867b	4c 48 8a	jmp $8a48			jmp 	EOLCommand
.867e					_IfStructured:
.867e	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero
.8681	d0 07		bne $868a			bne 	_IfExit 					; if not, then continue normally.
.8683	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8685	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.8687	20 79 8c	jsr $8c79			jsr 	ScanForward 				; and run from there/
.868a					_IfExit:
.868a	60		rts				rts
.868b					ElseCode:
.868b	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.868d	aa		tax				tax 								; so just go to the structure exit
.868e	20 79 8c	jsr $8c79			jsr 	ScanForward
.8691	60		rts				rts
.8692					EndIf:
.8692	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8693					LetCommand:
.8693	a2 00		ldx #$00			ldx 	#0
.8695	b1 30		lda ($30),y			lda 	(codePtr),y
.8697	c9 10		cmp #$10			cmp 	#KWD_AT
.8699	d0 16		bne $86b1			bne 	_LCStandard
.869b	c8		iny				iny 								; skip equal
.869c	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; get a number
.869f	20 04 96	jsr $9604			jsr 	Dereference 				; dereference it
.86a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a5	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86a7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86aa	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86ac	d0 10		bne $86be			bne 	_LCMain
.86ae	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; was a reference before.
.86b1					_LCStandard:
.86b1	ad ce 92	lda $92ce			lda 	PrecedenceLevel+"*"			; precedence > this
.86b4	20 e8 92	jsr $92e8			jsr 	EvaluateExpressionAtPrecedence
.86b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86ba	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86bc	f0 0e		beq $86cc			beq 	_LetGoProc 					; it's a procedure call.
.86be					_LCMain:
.86be	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c0	20 2e 8d	jsr $8d2e			jsr 	CheckNextA
.86c3	e8		inx				inx 								; RHS
.86c4	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue
.86c7	ca		dex				dex
.86c8	20 cf 86	jsr $86cf			jsr 	AssignVariable
.86cb	60		rts				rts
.86cc					_LetGoProc:
.86cc	4c b0 88	jmp $88b0			jmp 	CallProcedure
.86cf					AssignVariable:
.86cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d2	48		pha				pha 								; save a copy
.86d3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d6	29 10		and #$10			and 	#NSBIsString
.86d8	d0 0b		bne $86e5			bne 	_ASError
.86da	68		pla				pla 								; get back
.86db	29 10		and #$10			and 	#NSBIsString 				; check type
.86dd	d0 03		bne $86e2			bne 	_ASString
.86df	4c 2c 95	jmp $952c			jmp 	AssignNumber
.86e2					_ASString:
.86e2	4c 9a 95	jmp $959a			jmp 	AssignString
.86e5					_ASError:
.86e5	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e8					Command_List:
.86e8	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86eb	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86ee	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f1	a9 ff		lda #$ff			lda 	#$FF
.86f3	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86f9	b1 30		lda ($30),y			lda 	(codePtr),y
.86fb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86fd	f0 1e		beq $871d			beq 	_CLSecond
.86ff	20 7b 87	jsr $877b			jsr 	CLIsDigit 					; if not digit, list all
.8702	b0 24		bcs $8728			bcs 	_CLStart
.8704	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8706	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.8709	b1 30		lda ($30),y			lda 	(codePtr),y
.870b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.870d	f0 0e		beq $871d			beq 	_CLSecond 					; if so go get it
.870f	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8712	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8715	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8718	8d 17 04	sta $0417			sta 	NSMantissa1+7
.871b	80 0b		bra $8728			bra 	_CLStart
.871d					_CLSecond:
.871d	c8		iny				iny 								; consume comma
.871e	20 7b 87	jsr $877b			jsr 	CLIsDigit 					; digit found
.8721	b0 05		bcs $8728			bcs 	_CLStart 					; if not, continue listing
.8723	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8725	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.8728					_CLStart
.8728	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872a	85 30		sta $30				sta 	codePtr
.872c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.872e	85 31		sta $31				sta 	codePtr+1
.8730					_CLLoop:
.8730	20 e6 a8	jsr $a8e6			jsr 	EXTBreakCheck 				; break check
.8733	f0 30		beq $8765			beq 	_CLExit
.8735	b2 30		lda ($30)			lda 	(codePtr)
.8737	f0 2c		beq $8765			beq 	_CLExit
.8739	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.873b	20 68 87	jsr $8768			jsr 	CLCompareLineNo
.873e	90 18		bcc $8758			bcc 	_CLNext
.8740	a2 07		ldx #$07			ldx 	#7
.8742	20 68 87	jsr $8768			jsr 	CLCompareLineNo
.8745	f0 02		beq $8749			beq 	_CLDoThisOne
.8747	b0 0f		bcs $8758			bcs 	_CLNext
.8749					_CLDoThisOne:
.8749	20 16 b3	jsr $b316			jsr 	ListConvertLine 			; convert line into token Buffer
.874c	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.874e	a9 ab		lda #$ab			lda 	#(tokenBuffer & $FF)
.8750	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8753	a9 0d		lda #$0d			lda 	#13 						; new line
.8755	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8758					_CLNext:
.8758	18		clc				clc
.8759	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.875b	65 30		adc $30				adc 	codePtr
.875d	85 30		sta $30				sta 	codePtr
.875f	90 02		bcc $8763			bcc 	_CREExit
.8761	e6 31		inc $31				inc 	codePtr+1
.8763					_CREExit:
.8763	80 cb		bra $8730			bra 	_CLLoop
.8765					_CLExit:
.8765	4c 5b 83	jmp $835b			jmp 	WarmStart
.8768					CLCompareLineNo:
.8768	38		sec				sec
.8769	a0 01		ldy #$01			ldy 	#1
.876b	b1 30		lda ($30),y			lda 	(codePtr),y
.876d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8770	85 36		sta $36				sta 	zTemp0
.8772	c8		iny				iny
.8773	b1 30		lda ($30),y			lda 	(codePtr),y
.8775	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8778	05 36		ora $36				ora 	zTemp0
.877a	60		rts				rts
.877b					CLIsDigit:
.877b	b1 30		lda ($30),y			lda 	(codePtr),y
.877d	c9 30		cmp #$30			cmp 	#"0"
.877f	90 03		bcc $8784			bcc	 	_CLIDExitFalse
.8781	c9 3a		cmp #$3a			cmp 	#"9"+1
.8783	60		rts				rts
.8784					_CLIDExitFalse:
.8784	38		sec				sec
.8785	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8786					Command_LOCAL:
.8786	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8788	20 94 87	jsr $8794			jsr 	LocaliseNextTerm 			; convert term to a local.
.878b	b1 30		lda ($30),y			lda 	(codePtr),y
.878d	c8		iny				iny
.878e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8790	f0 f4		beq $8786			beq 	Command_LOCAL
.8792	88		dey				dey 								; unpick pre-get
.8793	60		rts				rts
.8794					LocaliseNextTerm:
.8794	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; evaluate the term
.8797	bd 00 04	lda $0400,x			lda 	NSStatus,x
.879a	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.879c	f0 61		beq $87ff			beq		_LNTError
.879e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a1	85 36		sta $36				sta 	zTemp0
.87a3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87a6	85 37		sta $37				sta  	zTemp0+1
.87a8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87ab	29 10		and #$10			and 	#NSBIsString
.87ad	d0 1e		bne $87cd			bne 	_LNTPushString
.87af	5a		phy				phy
.87b0	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b2					_LNTPushNumLoop:
.87b2	b1 36		lda ($36),y			lda		(zTemp0),y
.87b4	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87b7	c8		iny				iny
.87b8	c0 05		cpy #$05			cpy 	#5
.87ba	d0 f6		bne $87b2			bne 	_LNTPushNumLoop
.87bc	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87be	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87c1	a5 37		lda $37				lda 	zTemp0+1
.87c3	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87c6	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87c8	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87cb	7a		ply				ply
.87cc	60		rts				rts
.87cd					_LNTPushString:
.87cd	5a		phy				phy
.87ce	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d0	85 38		sta $38				sta 	zTemp1
.87d2	a0 01		ldy #$01			ldy 	#1
.87d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d6	85 39		sta $39				sta 	zTemp1+1
.87d8	a0 00		ldy #$00			ldy 	#0 							; output string
.87da	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87dc	f0 0a		beq $87e8			beq 	_LNTStringOut
.87de					_LNTPushStrLoop:
.87de	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e0	f0 06		beq $87e8			beq 	_LNTStringOut
.87e2	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87e5	c8		iny				iny
.87e6	80 f6		bra $87de			bra 	_LNTPushStrLoop
.87e8					_LNTStringOut:
.87e8	98		tya				tya									; output length
.87e9	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87ef	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87f2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f5	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87f8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87fa	20 3c a2	jsr $a23c			jsr 	StackPushByte
.87fd	7a		ply				ply
.87fe	60		rts				rts
.87ff					_LNTError:
.87ff	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.8802					LocalPopValue:
.8802	20 55 a2	jsr $a255			jsr 	StackPopByte
.8805	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8807	d0 17		bne $8820			bne 	_LPVString
.8809	20 55 a2	jsr $a255			jsr 	StackPopByte 				; address
.880c	85 37		sta $37				sta 	zTemp0+1
.880e	20 55 a2	jsr $a255			jsr 	StackPopByte
.8811	85 36		sta $36				sta 	zTemp0
.8813	5a		phy				phy
.8814	a0 04		ldy #$04			ldy 	#4 							; copy back
.8816					_LPVNumberCopy:
.8816	20 55 a2	jsr $a255			jsr 	StackPopByte
.8819	91 36		sta ($36),y			sta 	(zTemp0),y
.881b	88		dey				dey
.881c	10 f8		bpl $8816			bpl 	_LPVNumberCopy
.881e	7a		ply				ply 								; and complete
.881f	60		rts				rts
.8820					_LPVString:
.8820	20 55 a2	jsr $a255			jsr 	StackPopByte 				; address of record => zTemp0
.8823	85 37		sta $37				sta 	zTemp0+1
.8825	20 55 a2	jsr $a255			jsr 	StackPopByte
.8828	85 36		sta $36				sta 	zTemp0
.882a	5a		phy				phy
.882b	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.882d	85 38		sta $38				sta 	zTemp1
.882f	a0 01		ldy #$01			ldy 	#1
.8831	b1 36		lda ($36),y			lda 	(zTemp0),y
.8833	85 39		sta $39				sta 	zTemp1+1
.8835	20 55 a2	jsr $a255			jsr 	StackPopByte 				; # to get => y
.8838	a8		tay				tay
.8839	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.883b	f0 0e		beq $884b			beq 	_LPVStringCopied
.883d	a9 00		lda #$00			lda 	#0 							; NULL on end
.883f	91 38		sta ($38),y			sta 	(zTemp1),y
.8841					_LPVStringCopy:
.8841	88		dey				dey
.8842	30 07		bmi $884b			bmi 	_LPVStringCopied
.8844	20 55 a2	jsr $a255			jsr 	StackPopByte
.8847	91 38		sta ($38),y			sta 	(zTemp1),y
.8849	80 f6		bra $8841			bra 	_LPVStringCopy
.884b					_LPVStringCopied:
.884b	fa		plx				plx
.884c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.884d					NewCommand:
.884d	20 e7 a1	jsr $a1e7			jsr 	MemoryNew
.8850	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8853	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear everything.
.8856	4c 5b 83	jmp $835b			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8859					Command_Print:
.8859	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.885a					_CPLoop:
.885a	08		php				php 								; save last action flag
.885b	b1 30		lda ($30),y			lda 	(codePtr),y
.885d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.885f	f0 46		beq $88a7			beq 	_CPExit
.8861	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8863	f0 42		beq $88a7			beq 	_CPExit
.8865	68		pla				pla 								; throw last action flag
.8866	b1 30		lda ($30),y			lda 	(codePtr),y
.8868	c8		iny				iny
.8869	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.886b	f0 37		beq $88a4			beq 	_CPContinueWithSameLine
.886d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.886f	f0 2e		beq $889f			beq 	_CPTab
.8871	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8873	f0 26		beq $889b			beq 	_CPNewLine
.8875	88		dey				dey 								; undo the get.
.8876	a2 00		ldx #$00			ldx 	#0
.8878	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get a value into slot 0
.887b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.887e	29 10		and #$10			and 	#NSBIsString
.8880	f0 0b		beq $888d			beq 	_CPNumber
.8882	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8885	ad 08 04	lda $0408			lda 	NSMantissa0
.8888	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.888b	80 cc		bra $8859			bra 	Command_Print 				; loop round clearing carry so NL if end
.888d					_CPNumber:
.888d	a9 05		lda #$05			lda 	#5 							; maximum decimals
.888f	20 f0 9b	jsr $9bf0			jsr 	ConvertNumberToString 		; convert to string
.8892	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8894	a9 1b		lda #$1b			lda 	#DecimalBuffer & $FF
.8896	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8899	80 be		bra $8859			bra 	Command_Print 				; loop round clearing carry so NL if end
.889b					_CPNewLine:
.889b	a9 0d		lda #$0d			lda 	#13
.889d	80 02		bra $88a1			bra 	_CPPrintChar
.889f					_CPTab:
.889f	a9 09		lda #$09			lda 	#9 							; print TAB
.88a1					_CPPrintChar:
.88a1	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.88a4					_CPContinueWithSameLine:
.88a4	38		sec				sec 								; loop round with carry set, which
.88a5	80 b3		bra $885a			bra 	_CPLoop 					; will inhibit final CR
.88a7					_CPExit:
.88a7	28		plp				plp 								; get last action flag
.88a8	b0 05		bcs $88af			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88aa	a9 0d		lda #$0d			lda 	#13 						; print new line
.88ac	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.88af					_CPExit2:
.88af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88b0					CallProcedure:
.88b0	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88b2	b1 30		lda ($30),y			lda 	(codePtr),y
.88b4	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88b6	f0 0c		beq $88c4			beq 	_CPEndParam
.88b8					_CPParamLoop:
.88b8	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get parameter onto stack
.88bb	e8		inx				inx 								; bump next stack
.88bc	b1 30		lda ($30),y			lda 	(codePtr),y
.88be	c8		iny				iny
.88bf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88c1	f0 f5		beq $88b8			beq 	_CPParamLoop
.88c3	88		dey				dey 								; unpick.
.88c4					_CPEndParam:
.88c4	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88c7	c8		iny				iny									; skip right bracket
.88c8	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88ca	20 5e a2	jsr $a25e			jsr 	StackOpen
.88cd	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop position
.88d0	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88d3	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88d5	ad 10 04	lda $0410			lda 	NSMantissa1
.88d8	85 37		sta $37				sta 	zTemp0+1
.88da	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88dc	b2 36		lda ($36)			lda 	(zTemp0)
.88de	85 30		sta $30				sta 	safePtr
.88e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e2	85 31		sta $31				sta 	safePtr+1
.88e4	c8		iny				iny
.88e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e7	85 32		sta $32				sta 	safePtr+2
.88e9	c8		iny				iny
.88ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ec	85 33		sta $33				sta 	safePtr+3
.88ee	c8		iny				iny 								; get Y offset -> Y
.88ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f1	a8		tay				tay
.88f2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88f4	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88f7	f0 13		beq $890c			beq 	_ParamExit 					; if so, exit.
.88f9					_ParamExtract:
.88f9	ca		dex				dex 								; put a local term on the level before
.88fa	20 94 87	jsr $8794			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88fd	20 cf 86	jsr $86cf			jsr 	AssignVariable 				; assign stacked value to the variable.
.8900	e8		inx				inx 								; advance to next parameter to do.
.8901	e8		inx				inx
.8902	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8905	f0 05		beq $890c			beq 	_ParamExit
.8907	20 26 8d	jsr $8d26			jsr 	CheckComma 					; comma seperating parameters
.890a	80 ed		bra $88f9			bra 	_ParamExtract
.890c					_ParamExit:
.890c	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check )
.890f	60		rts				rts 								; and continue from here
.8910					Command_ENDPROC:
.8910	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8912	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8914	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8917	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; restore code position
.891a	20 7c a2	jsr $a27c			jsr 	StackClose
.891d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.891e					Command_Read:
.891e	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8920	20 c0 97	jsr $97c0			jsr 	EvaluateTerm
.8923	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8926	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8928	f0 4a		beq $8974			beq 	_CRSyntax 					; check reference (bit 0)
.892a	20 bd 89	jsr $89bd			jsr 	SwapDataCodePtrs 			; swap code and data
.892d	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8930	d0 20		bne $8952			bne 	_CRContinueData
.8932					_CRKeepSearching:
.8932	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8934	aa		tax				tax
.8935	20 79 8c	jsr $8c79			jsr 	ScanForward
.8938	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.893a	f0 16		beq $8952			beq 	_CRHaveData 				; found it
.893c	18		clc				clc
.893d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.893f	65 30		adc $30				adc 	codePtr
.8941	85 30		sta $30				sta 	codePtr
.8943	90 02		bcc $8947			bcc 	_CREExit
.8945	e6 31		inc $31				inc 	codePtr+1
.8947					_CREExit:
.8947	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8949	b2 30		lda ($30)			lda 	(codePtr)
.894b	d0 e5		bne $8932			bne 	_CRKeepSearching
.894d	a9 0b		lda #$0b		lda	#11
.894f	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8952					_CRHaveData:
.8952					_CRContinueData:
.8952	a2 01		ldx #$01			ldx 	#1
.8954	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8957	ca		dex				dex
.8958	20 cf 86	jsr $86cf			jsr		AssignVariable 				; do the assignment
.895b	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.895e	b1 30		lda ($30),y			lda 	(codePtr),y
.8960	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8962	d0 04		bne $8968			bne 	_CRSwapBack
.8964	c8		iny				iny 								; consume comma
.8965	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8968					_CRSwapBack:
.8968	20 bd 89	jsr $89bd			jsr 	SwapDataCodePtrs			; swap them back.
.896b	b1 30		lda ($30),y			lda 	(codePtr),y
.896d	c8		iny				iny
.896e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8970	f0 ac		beq $891e			beq 	Command_Read 				; if so go round again.
.8972	88		dey				dey 								; unpick get.
.8973	60		rts				rts
.8974					_CRSyntax:
.8974	4c 84 9f	jmp $9f84			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8977					RemCommand:
.8977	b1 30		lda ($30),y			lda 	(codePtr),y
.8979	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.897b	d0 06		bne $8983			bne 	_RMExit
.897d	c8		iny				iny
.897e	98		tya				tya
.897f	38		sec				sec
.8980	71 30		adc ($30),y			adc 	(codePtr),y
.8982	a8		tay				tay
.8983					_RMExit:
.8983	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8984					Command_REPEAT:
.8984	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8986	20 5e a2	jsr $a25e			jsr 	StackOpen
.8989	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop position
.898c	60		rts				rts
.898d					Command_UNTIL:
.898d	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.898f	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8991	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8994	a2 00		ldx #$00			ldx 	#0
.8996	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; work out the number
.8999	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; check if zero
.899c	f0 04		beq $89a2			beq 	_CULoopBack 				; if so keep looping
.899e	20 7c a2	jsr $a27c			jsr 	StackClose		 			; return
.89a1	60		rts				rts
.89a2					_CULoopBack:
.89a2	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; loop back
.89a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a6					Command_Restore:
.89a6	20 bd 89	jsr $89bd			jsr 	SwapDataCodePtrs 			; swap code and data
.89a9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ab	85 30		sta $30				sta 	codePtr
.89ad	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89af	85 31		sta $31				sta 	codePtr+1
.89b1	20 bd 89	jsr $89bd			jsr 	SwapDataCodePtrs 			; put them back
.89b4	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b6	8d 9b 04	sta $049b			sta 	dataPointer+4
.89b9	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89bc	60		rts				rts
.89bd					SwapDataCodePtrs:
.89bd	da		phx				phx
.89be	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89c0					_SDCPLoop:
.89c0	b5 30		lda $30,x			lda 	safePtr,x
.89c2	48		pha				pha
.89c3	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89c6	95 30		sta $30,x			sta 	safePtr,x
.89c8	68		pla				pla
.89c9	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89cc	ca		dex				dex
.89cd	10 f1		bpl $89c0			bpl 	_SDCPLoop
.89cf	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89d2	8c 9b 04	sty $049b			sty 	dataPointer+4
.89d5	a8		tay				tay
.89d6	fa		plx				plx
.89d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89d8					CommandRUN:
.89d8	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89db	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89dd	85 30		sta $30				sta 	codePtr
.89df	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e1	85 31		sta $31				sta 	codePtr+1
.89e3					RUNNewLine:
.89e3	b2 30		lda ($30)			lda 	(codePtr)
.89e5	f0 5e		beq $8a45			beq 	CRNoProgram         		; no then END.
.89e7	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89e9	9a		txs				txs
.89ea					RUNCodePointerLine:
.89ea	a0 02		ldy #$02			ldy 	#2 							; start of program
.89ec					_CRIncMainLoop:
.89ec	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89ef	d0 05		bne $89f6			bne 	_CRNoBreakCheck
.89f1	20 e6 a8	jsr $a8e6			jsr 	EXTBreakCheck 				; break check
.89f4	f0 4a		beq $8a40			beq 	_CRBreak
.89f6					_CRNoBreakCheck:
.89f6	c8		iny				iny
.89f7					_CRMainLoop:
.89f7	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89fa	b1 30		lda ($30),y			lda 	(codePtr),y
.89fc	10 10		bpl $8a0e			bpl 	_CRNotKeyword
.89fe	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a00	b0 04		bcs $8a06			bcs 	_CRIsKeyword
.8a02	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a04	b0 34		bcs $8a3a			bcs		_CRSyntaxError
.8a06					_CRIsKeyword:
.8a06	c8		iny				iny 								; consume command
.8a07	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a08	aa		tax				tax 								; put in X for vector jump
.8a09	20 3d 8a	jsr $8a3d			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a0c	80 e9		bra $89f7			bra 	_CRMainLoop 				; and loop round
.8a0e					_CRNotKeyword:
.8a0e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a10	f0 da		beq $89ec			beq 	_CRIncMainLoop
.8a12	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a14	90 05		bcc $8a1b			bcc 	_CRNotVariable
.8a16					_CRGoLet:
.8a16	20 93 86	jsr $8693			jsr 	LetCommand
.8a19	80 dc		bra $89f7			bra 	_CRMainLoop
.8a1b					_CRNotVariable:
.8a1b	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a1d	f0 f7		beq $8a16			beq 	_CRGoLet
.8a1f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a21	f0 f3		beq $8a16			beq 	_CRGoLet
.8a23	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a25	f0 ef		beq $8a16			beq 	_CRGoLet
.8a27	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a29	f0 09		beq $8a34			beq 	_CRGoRem
.8a2b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a2d	d0 0b		bne $8a3a			bne 	_CRSyntaxError
.8a2f	20 2c 82	jsr $822c			jsr 	LabelHere
.8a32	80 c3		bra $89f7			bra 	_CRMainLoop
.8a34					_CRGoRem:
.8a34	c8		iny				iny
.8a35	20 77 89	jsr $8977			jsr 	RemCommand
.8a38	80 bd		bra $89f7			bra 	_CRMainLoop
.8a3a					_CRSyntaxError:
.8a3a	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.8a3d					_CRCallVector0:
.8a3d	7c e8 8a	jmp ($8ae8,x)			jmp 	(VectorSet0,x)
.8a40					_CRBreak:
.8a40	a9 01		lda #$01		lda	#1
.8a42	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8a45					CRNoProgram:
.8a45	4c 19 85	jmp $8519			jmp 	EndCommand
.8a48					EOLCommand:
.8a48	18		clc				clc
.8a49	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a4b	65 30		adc $30				adc 	codePtr
.8a4d	85 30		sta $30				sta 	codePtr
.8a4f	90 02		bcc $8a53			bcc 	_CREExit
.8a51	e6 31		inc $31				inc 	codePtr+1
.8a53					_CREExit:
.8a53	80 8e		bra $89e3			bra 	RunNewLine
.8a55					Shift1Command:
.8a55	b1 30		lda ($30),y			lda 	(codePtr),y
.8a57	c8		iny				iny
.8a58	0a		asl a				asl 	a
.8a59	aa		tax				tax
.8a5a	7c 80 8b	jmp ($8b80,x)			jmp 	(VectorSet1,x)
.8a5d					Shift2Command:
.8a5d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5f	c8		iny				iny
.8a60	0a		asl a				asl 	a
.8a61	aa		tax				tax
.8a62	7c 9a 8b	jmp ($8b9a,x)			jmp 	(VectorSet2,x)
.8a65					Unused1:
.8a65					Unused2:
.8a65					Unused3:
.8a65					Unused4:
.8a65	4c 84 9f	jmp $9f84			jmp 	SyntaxError
>8a68							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a68					VectorSetPunc:
>8a68	24 90					.word	ShiftLeft                        ; $00 <<
>8a6a	db 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a6c	d1 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a6e	84 9f					.word	SyntaxError                      ; $03 !!3
>8a70	84 9f					.word	SyntaxError                      ; $04 ><
>8a72	e5 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a74	27 90					.word	ShiftRight                       ; $06 >>
>8a76	84 9f					.word	SyntaxError                      ; $07 !!7
>8a78	84 9f					.word	SyntaxError                      ; $08 !!8
>8a7a	84 9f					.word	SyntaxError                      ; $09 !!9
>8a7c	84 9f					.word	SyntaxError                      ; $0a !!10
>8a7e	84 9f					.word	SyntaxError                      ; $0b !!11
>8a80	84 9f					.word	SyntaxError                      ; $0c !!12
>8a82	84 9f					.word	SyntaxError                      ; $0d !!13
>8a84	84 9f					.word	SyntaxError                      ; $0e !!14
>8a86	84 9f					.word	SyntaxError                      ; $0f !!15
>8a88	84 9f					.word	SyntaxError                      ; $10 @
>8a8a	84 9f					.word	SyntaxError                      ; $11 !!17
>8a8c	84 9f					.word	SyntaxError                      ; $12 !!18
>8a8e	84 9f					.word	SyntaxError                      ; $13 [
>8a90	a8 8e					.word	IntegerDivide                    ; $14 \
>8a92	84 9f					.word	SyntaxError                      ; $15 ]
>8a94	b5 91					.word	EorInteger                       ; $16 ^
>8a96	84 9f					.word	SyntaxError                      ; $17 _
>8a98	84 9f					.word	SyntaxError                      ; $18 `
>8a9a	84 9f					.word	SyntaxError                      ; $19 !!25
>8a9c	84 9f					.word	SyntaxError                      ; $1a !!26
>8a9e	84 9f					.word	SyntaxError                      ; $1b {
>8aa0	6f 91					.word	OraInteger                       ; $1c |
>8aa2	84 9f					.word	SyntaxError                      ; $1d }
>8aa4	84 9f					.word	SyntaxError                      ; $1e ~
>8aa6	84 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aa8	84 9f					.word	SyntaxError                      ; $20
>8aaa	fb 91					.word	WordIndirect                     ; $21 !
>8aac	84 9f					.word	SyntaxError                      ; $22 "
>8aae	84 9f					.word	SyntaxError                      ; $23 #
>8ab0	84 9f					.word	SyntaxError                      ; $24 $
>8ab2	f5 8e					.word	IntegerModulus                   ; $25 %
>8ab4	29 91					.word	AndInteger                       ; $26 &
>8ab6	84 9f					.word	SyntaxError                      ; $27 '
>8ab8	84 9f					.word	SyntaxError                      ; $28 (
>8aba	84 9f					.word	SyntaxError                      ; $29 )
>8abc	6a 8f					.word	MulInteger                       ; $2a *
>8abe	bb 90					.word	AddInteger                       ; $2b +
>8ac0	84 9f					.word	SyntaxError                      ; $2c ,
>8ac2	fe 90					.word	SubInteger                       ; $2d -
>8ac4	84 9f					.word	SyntaxError                      ; $2e .
>8ac6	e6 93					.word	FDivideCommand                   ; $2f /
>8ac8	84 9f					.word	SyntaxError                      ; $30 0
>8aca	84 9f					.word	SyntaxError                      ; $31 1
>8acc	84 9f					.word	SyntaxError                      ; $32 2
>8ace	84 9f					.word	SyntaxError                      ; $33 3
>8ad0	84 9f					.word	SyntaxError                      ; $34 4
>8ad2	84 9f					.word	SyntaxError                      ; $35 5
>8ad4	84 9f					.word	SyntaxError                      ; $36 6
>8ad6	84 9f					.word	SyntaxError                      ; $37 7
>8ad8	84 9f					.word	SyntaxError                      ; $38 8
>8ada	84 9f					.word	SyntaxError                      ; $39 9
>8adc	84 9f					.word	SyntaxError                      ; $3a :
>8ade	84 9f					.word	SyntaxError                      ; $3b ;
>8ae0	bd 8d					.word	BinaryCompareLess                ; $3c <
>8ae2	b3 8d					.word	BinaryCompareEqual               ; $3d =
>8ae4	c7 8d					.word	BinaryCompareGreater             ; $3e >
>8ae6	22 92					.word	ByteIndirect                     ; $3f ?
.8ae8					VectorSet0:
>8ae8	48 8a					.word	EOLCommand                       ; $80 !0:EOF
>8aea	55 8a					.word	Shift1Command                    ; $81 !1:SH1
>8aec	5d 8a					.word	Shift2Command                    ; $82 !2:SH2
>8aee	56 99					.word	AbsUnary                         ; $83 ABS(
>8af0	66 99					.word	AllocUnary                       ; $84 ALLOC(
>8af2	d6 99					.word	AscUnary                         ; $85 ASC(
>8af4	a1 9b					.word	ChrUnary                         ; $86 CHR$(
>8af6	9e a3					.word	UnaryEvent                       ; $87 EVENT(
>8af8	af 8d					.word	UnaryFalse                       ; $88 FALSE
>8afa	e3 99					.word	FracUnary                        ; $89 FRAC(
>8afc	69 a6					.word	UnaryHit                         ; $8a HIT(
>8afe	f9 99					.word	IntUnary                         ; $8b INT(
>8b00	60 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b02	b6 a6					.word	UnaryJoyB                        ; $8d JOYB(
>8b04	8f a6					.word	UnaryJoyX                        ; $8e JOYX(
>8b06	92 a6					.word	UnaryJoyY                        ; $8f JOYY(
>8b08	7b 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b0a	0b 9a					.word	LenUnary                         ; $91 LEN(
>8b0c	29 9a					.word	Unary_Max                        ; $92 MAX(
>8b0e	a5 9c					.word	Unary_Mid                        ; $93 MID$(
>8b10	25 9a					.word	Unary_Min                        ; $94 MIN(
>8b12	80 9a					.word	Unary_Not                        ; $95 NOT(
>8b14	96 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b16	8b 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b18	b5 9a					.word	Unary_Rnd                        ; $98 RND(
>8b1a	36 9b					.word	SgnUnary                         ; $99 SGN(
>8b1c	b3 9b					.word	SpcUnary                         ; $9a SPC(
>8b1e	ce 9b					.word	Unary_Str                        ; $9b STR$(
>8b20	0e a7					.word	UnaryTimer                       ; $9c TIMER(
>8b22	a3 8d					.word	UnaryTrue                        ; $9d TRUE
>8b24	56 9b					.word	ValUnary                         ; $9e VAL(
>8b26	1c 85					.word	ForCommand                       ; $9f FOR
>8b28	69 86					.word	IfCommand                        ; $a0 IF
>8b2a	65 8a					.word	Unused1                          ; $a1 PROC
>8b2c	84 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b2e	ef 8c					.word	Command_WHILE                    ; $a3 WHILE
>8b30	92 86					.word	EndIf                            ; $a4 ENDIF
>8b32	10 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b34	d6 85					.word	NextCommand                      ; $a6 NEXT
>8b36	65 8a					.word	Unused4                          ; $a7 THEN
>8b38	8d 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b3a	10 8d					.word	Command_WEND                     ; $a9 WEND
>8b3c	84 9f					.word	SyntaxError                      ; $aa BY
>8b3e	ba 83					.word	CallCommand                      ; $ab CALL
>8b40	0b a4					.word	CircleCommand                    ; $ac CIRCLE
>8b42	f4 83					.word	ClearCommand                     ; $ad CLEAR
>8b44	4c 84					.word	ClearScreen                      ; $ae CLS
>8b46	84 9f					.word	SyntaxError                      ; $af COLOR
>8b48	84 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b4a	54 84					.word	Command_Data                     ; $b1 DATA
>8b4c	5c 84					.word	DimCommand                       ; $b2 DIM
>8b4e	65 8a					.word	Unused3                          ; $b3 DOWNTO
>8b50	8b 86					.word	ElseCode                         ; $b4 ELSE
>8b52	84 9f					.word	SyntaxError                      ; $b5 FROM
>8b54	37 a6					.word	GfxCommand                       ; $b6 GFX
>8b56	2f 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b58	4d 86					.word	GotoCommand                      ; $b8 GOTO
>8b5a	84 9f					.word	SyntaxError                      ; $b9 HERE
>8b5c	35 a4					.word	ImageCommand                     ; $ba IMAGE
>8b5e	93 86					.word	LetCommand                       ; $bb LET
>8b60	8a a4					.word	LineCommand                      ; $bc LINE
>8b62	86 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b64	84 9f					.word	SyntaxError                      ; $be OFF
>8b66	84 9f					.word	SyntaxError                      ; $bf ON
>8b68	84 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b6a	ca a6					.word	PaletteCommand                   ; $c1 PALETTE
>8b6c	83 a4					.word	PlotCommand                      ; $c2 PLOT
>8b6e	59 88					.word	Command_Print                    ; $c3 PRINT
>8b70	1e 89					.word	Command_Read                     ; $c4 READ
>8b72	07 a4					.word	RectangleCommand                 ; $c5 RECT
>8b74	77 89					.word	RemCommand                       ; $c6 REM
>8b76	3f 86					.word	Command_RETURN                   ; $c7 RETURN
>8b78	84 9f					.word	SyntaxError                      ; $c8 SOLID
>8b7a	16 a4					.word	SpriteCommand                    ; $c9 SPRITE
>8b7c	52 a4					.word	TextCommand                      ; $ca TEXT
>8b7e	65 8a					.word	Unused2                          ; $cb TO
.8b80					VectorSet1:
>8b80	84 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b82	84 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b84	84 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b86	8b 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b88	aa 83					.word	AssertCommand                    ; $84 ASSERT
>8b8a	d7 a5					.word	BitmapCtrl                       ; $85 BITMAP
>8b8c	19 85					.word	EndCommand                       ; $86 END
>8b8e	e8 86					.word	Command_List                     ; $87 LIST
>8b90	4d 88					.word	NewCommand                       ; $88 NEW
>8b92	a6 89					.word	Command_Restore                  ; $89 RESTORE
>8b94	d8 89					.word	CommandRUN                       ; $8a RUN
>8b96	1c a6					.word	SpritesCtrl                      ; $8b SPRITES
>8b98	22 8c					.word	StopCommand                      ; $8c STOP
.8b9a					VectorSet2:
>8b9a	84 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9c	84 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b9e	84 9f					.word	SyntaxError                      ; $82 !2:SH2
>8ba0	43 9e					.word	Assemble_adc                     ; $83 ADC
>8ba2	3b 9e					.word	Assemble_and                     ; $84 AND
>8ba4	57 9e					.word	Assemble_asl                     ; $85 ASL
>8ba6	c1 9e					.word	Assemble_bcc                     ; $86 BCC
>8ba8	c5 9e					.word	Assemble_bcs                     ; $87 BCS
>8baa	cd 9e					.word	Assemble_beq                     ; $88 BEQ
>8bac	84 9e					.word	Assemble_bit                     ; $89 BIT
>8bae	b5 9e					.word	Assemble_bmi                     ; $8a BMI
>8bb0	c9 9e					.word	Assemble_bne                     ; $8b BNE
>8bb2	b1 9e					.word	Assemble_bpl                     ; $8c BPL
>8bb4	d1 9e					.word	Assemble_bra                     ; $8d BRA
>8bb6	d5 9e					.word	Assemble_brk                     ; $8e BRK
>8bb8	b9 9e					.word	Assemble_bvc                     ; $8f BVC
>8bba	bd 9e					.word	Assemble_bvs                     ; $90 BVS
>8bbc	dd 9e					.word	Assemble_clc                     ; $91 CLC
>8bbe	31 9f					.word	Assemble_cld                     ; $92 CLD
>8bc0	f1 9e					.word	Assemble_cli                     ; $93 CLI
>8bc2	21 9f					.word	Assemble_clv                     ; $94 CLV
>8bc4	4f 9e					.word	Assemble_cmp                     ; $95 CMP
>8bc6	98 9e					.word	Assemble_cpx                     ; $96 CPX
>8bc8	93 9e					.word	Assemble_cpy                     ; $97 CPY
>8bca	75 9e					.word	Assemble_dec                     ; $98 DEC
>8bcc	2d 9f					.word	Assemble_dex                     ; $99 DEX
>8bce	09 9f					.word	Assemble_dey                     ; $9a DEY
>8bd0	3f 9e					.word	Assemble_eor                     ; $9b EOR
>8bd2	7a 9e					.word	Assemble_inc                     ; $9c INC
>8bd4	3d 9f					.word	Assemble_inx                     ; $9d INX
>8bd6	29 9f					.word	Assemble_iny                     ; $9e INY
>8bd8	ac 9e					.word	Assemble_jmp                     ; $9f JMP
>8bda	a7 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bdc	4b 9e					.word	Assemble_lda                     ; $a1 LDA
>8bde	70 9e					.word	Assemble_ldx                     ; $a2 LDX
>8be0	8e 9e					.word	Assemble_ldy                     ; $a3 LDY
>8be2	61 9e					.word	Assemble_lsr                     ; $a4 LSR
>8be4	41 9f					.word	Assemble_nop                     ; $a5 NOP
>8be6	37 9e					.word	Assemble_ora                     ; $a6 ORA
>8be8	ed 9e					.word	Assemble_pha                     ; $a7 PHA
>8bea	d9 9e					.word	Assemble_php                     ; $a8 PHP
>8bec	35 9f					.word	Assemble_phx                     ; $a9 PHX
>8bee	f5 9e					.word	Assemble_phy                     ; $aa PHY
>8bf0	fd 9e					.word	Assemble_pla                     ; $ab PLA
>8bf2	e1 9e					.word	Assemble_plp                     ; $ac PLP
>8bf4	49 9f					.word	Assemble_plx                     ; $ad PLX
>8bf6	05 9f					.word	Assemble_ply                     ; $ae PLY
>8bf8	5c 9e					.word	Assemble_rol                     ; $af ROL
>8bfa	66 9e					.word	Assemble_ror                     ; $b0 ROR
>8bfc	e9 9e					.word	Assemble_rti                     ; $b1 RTI
>8bfe	f9 9e					.word	Assemble_rts                     ; $b2 RTS
>8c00	53 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c02	e5 9e					.word	Assemble_sec                     ; $b4 SEC
>8c04	45 9f					.word	Assemble_sed                     ; $b5 SED
>8c06	01 9f					.word	Assemble_sei                     ; $b6 SEI
>8c08	47 9e					.word	Assemble_sta                     ; $b7 STA
>8c0a	39 9f					.word	Assemble_stp                     ; $b8 STP
>8c0c	6b 9e					.word	Assemble_stx                     ; $b9 STX
>8c0e	89 9e					.word	Assemble_sty                     ; $ba STY
>8c10	7f 9e					.word	Assemble_stz                     ; $bb STZ
>8c12	1d 9f					.word	Assemble_tax                     ; $bc TAX
>8c14	19 9f					.word	Assemble_tay                     ; $bd TAY
>8c16	a2 9e					.word	Assemble_trb                     ; $be TRB
>8c18	9d 9e					.word	Assemble_tsb                     ; $bf TSB
>8c1a	25 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c1c	0d 9f					.word	Assemble_txa                     ; $c1 TXA
>8c1e	15 9f					.word	Assemble_txs                     ; $c2 TXS
>8c20	11 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c22					StopCommand:
.8c22	a9 08		lda #$08		lda	#8
.8c24	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c27					ProcedureScan:
.8c27	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c29	85 30		sta $30				sta 	codePtr
.8c2b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c2d	85 31		sta $31				sta 	codePtr+1
.8c2f					_PSLoop:
.8c2f	b2 30		lda ($30)			lda 	(codePtr)
.8c31	f0 42		beq $8c75			beq 	_PSExit
.8c33	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c35	b1 30		lda ($30),y			lda 	(codePtr),y
.8c37	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c39	d0 2d		bne $8c68			bne 	_PSNext
.8c3b	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c3c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3e	29 c0		and #$c0			and 	#$C0
.8c40	c9 40		cmp #$40			cmp 	#$40
.8c42	d0 32		bne $8c76			bne 	_PSSyntax
.8c44	b1 30		lda ($30),y			lda 	(codePtr),y
.8c46	18		clc				clc
.8c47	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c49	85 37		sta $37				sta 	zTemp0+1
.8c4b	c8		iny				iny 								; LSB
.8c4c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4e	85 36		sta $36				sta 	zTemp0
.8c50	c8		iny				iny 								; character after variable call.
.8c51	98		tya				tya 								; save Y offset at +7
.8c52	a0 07		ldy #$07			ldy 	#7
.8c54	91 36		sta ($36),y			sta 	(zTemp0),y
.8c56	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c58	a0 02		ldy #$02			ldy 	#2
.8c5a	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c5e					_PSCopy:
.8c5e	b5 30		lda $30,x			lda 	safePtr,x
.8c60	c8		iny				iny
.8c61	91 36		sta ($36),y			sta 	(zTemp0),y
.8c63	e8		inx				inx
.8c64	e0 04		cpx #$04			cpx 	#4
.8c66	d0 f6		bne $8c5e			bne 	_PSCopy
.8c68					_PSNext:
.8c68	18		clc				clc
.8c69	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c6b	65 30		adc $30				adc 	codePtr
.8c6d	85 30		sta $30				sta 	codePtr
.8c6f	90 02		bcc $8c73			bcc 	_CREExit
.8c71	e6 31		inc $31				inc 	codePtr+1
.8c73					_CREExit:
.8c73	80 ba		bra $8c2f			bra 	_PSLoop
.8c75					_PSExit:
.8c75	60		rts				rts
.8c76					_PSSyntax:
.8c76	4c 84 9f	jmp $9f84			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c79					ScanForward:
.8c79	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c7b	86 37		stx $37				stx 	zTemp0+1
.8c7d	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c7f					_ScanLoop:
.8c7f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c81	c8		iny				iny
.8c82	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c84	d0 0e		bne $8c94			bne 	_ScanGoNext
.8c86	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c88	f0 04		beq $8c8e			beq 	_ScanMatch
.8c8a	c5 37		cmp $37				cmp 	zTemp0+1
.8c8c	d0 06		bne $8c94			bne 	_ScanGoNext
.8c8e					_ScanMatch:
.8c8e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c90	d0 01		bne $8c93			bne 	_ScanNotEndEOL
.8c92	88		dey				dey
.8c93					_ScanNotEndEOL:
.8c93	60		rts				rts
.8c94					_ScanGoNext:
.8c94	20 99 8c	jsr $8c99			jsr  	ScanForwardOne
.8c97	80 e6		bra $8c7f			bra 	_ScanLoop
.8c99					ScanForwardOne:
.8c99	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c9b	90 3e		bcc $8cdb			bcc 	_SFWExit
.8c9d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c9f	90 18		bcc $8cb9			bcc 	_ScanSkipOne
.8ca1	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ca3	b0 2f		bcs $8cd4			bcs 	_ScanSkipData
.8ca5	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8ca7	90 32		bcc $8cdb			bcc 	_SFWExit 					; if not, ordinary keywords.
.8ca9	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8cab	b0 2e		bcs $8cdb			bcs 	_SFWExit
.8cad	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8caf	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8cb1	b0 28		bcs $8cdb			bcs 	_SFWExit
.8cb3	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cb5	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cb7	80 22		bra $8cdb			bra 	_SFWExit
.8cb9					_ScanSkipOne:
.8cb9	c8		iny				iny 								; consume the extra one.
.8cba	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cbc	d0 1d		bne $8cdb			bne 	_SFWExit
.8cbe	18		clc				clc
.8cbf	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cc1	65 30		adc $30				adc 	codePtr
.8cc3	85 30		sta $30				sta 	codePtr
.8cc5	90 02		bcc $8cc9			bcc 	_CREExit
.8cc7	e6 31		inc $31				inc 	codePtr+1
.8cc9					_CREExit:
.8cc9	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ccb	b2 30		lda ($30)			lda 	(codePtr)
.8ccd	d0 0c		bne $8cdb			bne 	_SFWExit 					; if not zero, more to scan
.8ccf	a9 13		lda #$13		lda	#19
.8cd1	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8cd4					_ScanSkipData:
.8cd4	88		dey				dey 								; point at data token
.8cd5	c8		iny				iny
.8cd6	98		tya				tya
.8cd7	38		sec				sec
.8cd8	71 30		adc ($30),y			adc 	(codePtr),y
.8cda	a8		tay				tay
.8cdb					_SFWExit:
.8cdb	60		rts				rts
.8cdc					ScanGetCurrentLineStep:
.8cdc	64 38		stz $38				stz 	zTemp1
.8cde	a0 03		ldy #$03			ldy 	#3
.8ce0					_SGCLSLoop:
.8ce0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce2	c8		iny				iny
.8ce3	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ce5	f0 05		beq $8cec			beq 	_SGCLSExit
.8ce7	20 99 8c	jsr $8c99			jsr 	ScanForwardOne
.8cea	80 f4		bra $8ce0			bra 	_SGCLSLoop
.8cec					_SGCLSExit:
.8cec	a5 38		lda $38				lda 	zTemp1
.8cee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cef					Command_WHILE:
.8cef	5a		phy				phy 								; save position of the test
.8cf0	a2 00		ldx #$00			ldx 	#0
.8cf2	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; work out the number
.8cf5	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; check if zero
.8cf8	f0 0e		beq $8d08			beq 	_WHExitLoop 				; if so exit the loop
.8cfa	98		tya				tya 								; position *after* test.
.8cfb	7a		ply				ply 								; restore position before test, at WHILE
.8cfc	88		dey				dey
.8cfd	48		pha				pha 								; push after test on the stack
.8cfe	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d00	20 5e a2	jsr $a25e			jsr 	StackOpen
.8d03	20 a2 a2	jsr $a2a2			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d06	7a		ply				ply 								; restore the position *after* the test
.8d07	60		rts				rts
.8d08					_WHExitLoop:
.8d08	68		pla				pla 								; throw post loop position
.8d09	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d0b	aa		tax				tax
.8d0c	20 79 8c	jsr $8c79			jsr 	ScanForward
.8d0f	60		rts				rts
.8d10					Command_WEND:
.8d10	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d12	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d14	20 8a a2	jsr $a28a			jsr 	StackCheckFrame
.8d17	20 b3 a2	jsr $a2b3			jsr 	STKLoadCodePosition 		; loop back
.8d1a	20 7c a2	jsr $a27c			jsr 	StackClose		 			; erase the frame
.8d1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d1e					CheckRightBracket:
.8d1e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d20	c8		iny				iny
.8d21	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d23	d0 0f		bne $8d34			bne 	CNAFail
.8d25	60		rts				rts
.8d26					CheckComma:
.8d26	b1 30		lda ($30),y			lda 	(codePtr),y
.8d28	c8		iny				iny
.8d29	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d2b	d0 07		bne $8d34			bne 	CNAFail
.8d2d	60		rts				rts
.8d2e					CheckNextA:
.8d2e	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d30	d0 02		bne $8d34			bne 	CNAFail
.8d32	c8		iny				iny 								; skip character
.8d33	60		rts				rts 								; and exit
.8d34					CNAFail:
.8d34	4c 84 9f	jmp $9f84			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d37					ErrorHandler:
.8d37	a8		tay				tay 								; find the error text
.8d38	f0 49		beq $8d83			beq 	_EHEnd
.8d3a	a2 00		ldx #$00			ldx 	#0
.8d3c	a9 9d		lda #$9d			lda 	#((ErrorText) & $FF)
.8d3e	85 36		sta $36				sta 	0+zTemp0
.8d40	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d42	85 37		sta $37				sta 	1+zTemp0
.8d44					_EHFind:
.8d44	88		dey				dey 								; found the error text ?
.8d45	f0 0e		beq $8d55			beq 	_EHFound
.8d47					_EHFindZero:
.8d47	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d49	e6 36		inc $36				inc 	zTemp0
.8d4b	d0 02		bne $8d4f			bne 	_EHFNoCarry
.8d4d	e6 37		inc $37				inc 	zTemp0+1
.8d4f					_EHFNoCarry:
.8d4f	c9 00		cmp #$00			cmp 	#0
.8d51	d0 f4		bne $8d47			bne 	_EHFindZero
.8d53	80 ef		bra $8d44			bra 	_EHFind
.8d55					_EHFound:
.8d55	a5 36		lda $36				lda 	zTemp0 						; print message
.8d57	a6 37		ldx $37				ldx 	zTemp0+1
.8d59	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8d5c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d60	d0 05		bne $8d67			bne 	_EHAtMsg
.8d62	c8		iny				iny
.8d63	b1 30		lda ($30),y			lda 	(codePtr),y
.8d65	f0 17		beq $8d7e			beq 	_EHCREnd
.8d67					_EHAtMsg:
.8d67	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d69	a9 86		lda #$86			lda 	#_AtMsg & $FF
.8d6b	20 90 8d	jsr $8d90			jsr 	PrintStringXA
.8d6e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d70	b1 30		lda ($30),y			lda 	(codePtr),y
.8d72	48		pha				pha
.8d73	c8		iny				iny
.8d74	b1 30		lda ($30),y			lda 	(codePtr),y
.8d76	aa		tax				tax
.8d77	68		pla				pla
.8d78	20 49 92	jsr $9249			jsr 	ConvertInt16 				; convert XA to string
.8d7b	20 90 8d	jsr $8d90			jsr 	PrintStringXA 				; and print it.
.8d7e					_EHCREnd:
.8d7e	a9 0d		lda #$0d			lda 	#13 						; new line
.8d80	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8d83					_EHEnd:
.8d83	4c 5b 83	jmp $835b			jmp 	WarmStart
>8d86	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d8e	20 00
.8d90					PrintStringXA:
.8d90	5a		phy				phy
.8d91	86 37		stx $37				stx 	zTemp0+1
.8d93	85 36		sta $36				sta 	zTemp0
.8d95	a0 00		ldy #$00			ldy 	#0
.8d97					_PSXALoop:
.8d97	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d99	f0 06		beq $8da1			beq 	_PSXAExit
.8d9b	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.8d9e	c8		iny				iny
.8d9f	80 f6		bra $8d97			bra 	_PSXALoop
.8da1					_PSXAExit:
.8da1	7a		ply				ply
.8da2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8da3					UnaryTrue:
.8da3	fa		plx				plx
.8da4					ReturnTrue:
.8da4	a9 01		lda #$01			lda 	#1  						; set to 1
.8da6	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.8da9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dae	60		rts				rts
.8daf					UnaryFalse:
.8daf	fa		plx				plx
.8db0					ReturnFalse:
.8db0	4c fa 9d	jmp $9dfa			jmp 	NSMSetZero 					; set it all to zero
.8db3					BinaryCompareEqual:
.8db3	fa		plx				plx
.8db4	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8db7	c9 00		cmp #$00			cmp 	#0
.8db9	f0 e9		beq $8da4			beq 	ReturnTrue
.8dbb	80 f3		bra $8db0			bra 	ReturnFalse
.8dbd					BinaryCompareLess:
.8dbd	fa		plx				plx
.8dbe	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8dc1	c9 ff		cmp #$ff			cmp 	#$FF
.8dc3	f0 df		beq $8da4			beq 	ReturnTrue
.8dc5	80 e9		bra $8db0			bra 	ReturnFalse
.8dc7					BinaryCompareGreater:
.8dc7	fa		plx				plx
.8dc8	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8dcb	c9 01		cmp #$01			cmp 	#1
.8dcd	f0 d5		beq $8da4			beq 	ReturnTrue
.8dcf	80 df		bra $8db0			bra 	ReturnFalse
.8dd1					BinaryCompareNotEqual:
.8dd1	fa		plx				plx
.8dd2	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8dd5	c9 00		cmp #$00			cmp 	#0
.8dd7	d0 cb		bne $8da4			bne 	ReturnTrue
.8dd9	80 d5		bra $8db0			bra 	ReturnFalse
.8ddb					BinaryCompareLessEqual:
.8ddb	fa		plx				plx
.8ddc	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8ddf	c9 01		cmp #$01			cmp 	#1
.8de1	d0 c1		bne $8da4			bne 	ReturnTrue
.8de3	80 cb		bra $8db0			bra 	ReturnFalse
.8de5					BinaryCompareGreaterEqual:
.8de5	fa		plx				plx
.8de6	20 ef 8d	jsr $8def			jsr 	CompareBaseCode
.8de9	c9 ff		cmp #$ff			cmp 	#$FF
.8deb	d0 b7		bne $8da4			bne 	ReturnTrue
.8ded	80 c1		bra $8db0			bra 	ReturnFalse
.8def					CompareBaseCode:
.8def	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; make both values if references.
.8df2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8df5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8df8	29 10		and #$10			and 	#NSTString
.8dfa	d0 40		bne $8e3c			bne 	_CBCString
.8dfc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8dff	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e02	d0 3b		bne $8e3f			bne 	_CBCFloat
.8e04	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e07	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e0a	29 08		and #$08			and 	#NSTFloat
.8e0c	d0 31		bne $8e3f			bne 	_CBCFloat
.8e0e	20 42 8e	jsr $8e42			jsr 	CompareFixMinusZero
.8e11	e8		inx				inx
.8e12	20 42 8e	jsr $8e42			jsr 	CompareFixMinusZero
.8e15	ca		dex				dex
.8e16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e19	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e1c	10 0b		bpl $8e29			bpl 	_CDCSameSign
.8e1e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e21	30 16		bmi $8e39			bmi 	_CBCLess 					; return $FF
.8e23					_CBCGreater:
.8e23	a9 01		lda #$01			lda 	#1
.8e25	60		rts				rts
.8e26					_CBCEqual:
.8e26	a9 00		lda #$00			lda 	#0
.8e28	60		rts				rts
.8e29					_CDCSameSign:
.8e29	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; unsigned subtract
.8e2c	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; or the mantissa together
.8e2f	f0 f5		beq $8e26			beq 	_CBCEqual 					; -0 == 0
.8e31	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e34	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e37	10 ea		bpl $8e23			bpl 	_CBCGreater
.8e39					_CBCLess:
.8e39	a9 ff		lda #$ff			lda 	#$FF
.8e3b	60		rts				rts
.8e3c					_CBCString:
.8e3c	4c eb 8f	jmp $8feb			jmp 	CompareStrings
.8e3f					_CBCFloat:
.8e3f	4c cc 93	jmp $93cc			jmp 	CompareFloat
.8e42					CompareFixMinusZero:
.8e42	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero
.8e45	d0 03		bne $8e4a			bne 	_CFXMZNotZero
.8e47	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e4a					_CFXMZNotZero:
.8e4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e4b					StringConcat:
.8e4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e4e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e51	29 18		and #$18			and 	#NSBTypeMask
.8e53	c9 10		cmp #$10			cmp 	#NSTString
.8e55	d0 4e		bne $8ea5			bne		_SCType
.8e57	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e59	e8		inx				inx
.8e5a	20 78 8e	jsr $8e78			jsr 	_SCSetupZ0 					; setup for second
.8e5d	20 83 8e	jsr $8e83			jsr 	_SCLengthZ0 				; length for second
.8e60	ca		dex				dex
.8e61	20 78 8e	jsr $8e78			jsr 	_SCSetupZ0 					; setup for first
.8e64	20 83 8e	jsr $8e83			jsr 	_SCLengthZ0 				; length for first
.8e67	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e69	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.8e6c	20 96 8e	jsr $8e96			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e6f	e8		inx				inx
.8e70	20 78 8e	jsr $8e78			jsr 	_SCSetupZ0 					; copy second out
.8e73	20 96 8e	jsr $8e96			jsr 	_SCCopy
.8e76	ca		dex				dex
.8e77	60		rts				rts
.8e78					_SCSetupZ0:
.8e78	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e7b	85 36		sta $36				sta 	zTemp0
.8e7d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e80	85 37		sta $37				sta 	zTemp0+1
.8e82	60		rts				rts
.8e83					_SCLengthZ0:
.8e83	5a		phy				phy
.8e84	a0 00		ldy #$00			ldy 	#0
.8e86					_SCLenLoop:
.8e86	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e88	f0 0a		beq $8e94			beq 	_SCLExit
.8e8a	c8		iny				iny
.8e8b	e6 38		inc $38				inc 	zTemp1
.8e8d	10 f7		bpl $8e86			bpl		_SCLenLoop
.8e8f	a9 09		lda #$09		lda	#9
.8e91	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8e94					_SCLExit:
.8e94	7a		ply				ply
.8e95	60		rts				rts
.8e96					_SCCopy:
.8e96	5a		phy				phy
.8e97	a0 00		ldy #$00			ldy 	#0
.8e99					_SCCopyLoop:
.8e99	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9b	f0 06		beq $8ea3			beq 	_SCCExit
.8e9d	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.8ea0	c8		iny				iny
.8ea1	80 f6		bra $8e99			bra 	_SCCopyLoop
.8ea3					_SCCExit:
.8ea3	7a		ply				ply
.8ea4	60		rts				rts
.8ea5					_SCType:
.8ea5	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8ea8					IntegerDivide:
.8ea8	fa		plx				plx
.8ea9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eac	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8eaf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb0	0a		asl a				asl 	a
.8eb1	10 05		bpl $8eb8			bpl 	_NotRef
.8eb3	48		pha				pha
.8eb4	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb7	68		pla				pla
.8eb8					_NotRef:
.8eb8	0a		asl a				asl 	a
.8eb9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ebe	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ec1	f0 03		beq $8ec6			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec3	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.8ec6					_IntegerCode:
.8ec6	20 e8 8e	jsr $8ee8			jsr 	CheckDivideZero 			; do div zero check
.8ec9	20 20 8f	jsr $8f20			jsr 	Int32Divide 				; do the division
.8ecc	20 dd 8f	jsr $8fdd			jsr 	CalculateSign 				; calculate result sign
.8ecf					NSMCopyPlusTwoToZero:
.8ecf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ed2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ed5	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ed8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8edb	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ede	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ee1	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8ee4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8ee7	60		rts				rts
.8ee8					CheckDivideZero:
.8ee8	e8		inx				inx
.8ee9	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero
.8eec	f0 02		beq $8ef0			beq 	_CDVError
.8eee	ca		dex				dex
.8eef	60		rts				rts
.8ef0					_CDVError:
.8ef0	a9 03		lda #$03		lda	#3
.8ef2	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8ef5					IntegerModulus:
.8ef5	fa		plx				plx
.8ef6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ef9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8efc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8efd	0a		asl a				asl 	a
.8efe	10 05		bpl $8f05			bpl 	_NotRef
.8f00	48		pha				pha
.8f01	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f04	68		pla				pla
.8f05					_NotRef:
.8f05	0a		asl a				asl 	a
.8f06	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f08	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f0b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f0e	f0 03		beq $8f13			beq 	_IntegerCode 				; if clear, then we have two integers
.8f10	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.8f13					_IntegerCode:
.8f13					IntegerModulusNoCheck:
.8f13	20 e8 8e	jsr $8ee8			jsr 	CheckDivideZero 			; do div zero check
.8f16	20 20 8f	jsr $8f20			jsr 	Int32Divide 				; do the division
.8f19	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f1c	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f1f	60		rts				rts
.8f20					Int32Divide:
.8f20	48		pha				pha 								; save AXY
.8f21	5a		phy				phy
.8f22	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f25	20 f6 9d	jsr $9df6			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f28	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f2a					_I32DivideLoop:
.8f2a	e8		inx				inx
.8f2b	e8		inx				inx
.8f2c	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f2f	ca		dex				dex
.8f30	ca		dex				dex
.8f31	20 10 9e	jsr $9e10			jsr 	NSMRotateLeft
.8f34	20 60 8f	jsr $8f60			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f37	90 03		bcc $8f3c			bcc 	_I32DivideNoCarryIn
.8f39	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f3c					_I32DivideNoCarryIn:
.8f3c	88		dey				dey 								; loop round till division completed.
.8f3d	d0 eb		bne $8f2a			bne 	_I32DivideLoop
.8f3f	7a		ply				ply 								; restore AXY and exit
.8f40	68		pla				pla
.8f41	60		rts				rts
.8f42					Int32ShiftDivide:
.8f42	48		pha				pha 								; save AY
.8f43	5a		phy				phy
.8f44	e8		inx				inx 								; clear S[X+2]
.8f45	e8		inx				inx
.8f46	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.8f49	ca		dex				dex
.8f4a	ca		dex				dex
.8f4b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f4d					_I32SDLoop:
.8f4d	20 60 8f	jsr $8f60			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f50	e8		inx				inx
.8f51	e8		inx				inx
.8f52	20 10 9e	jsr $9e10			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f55	ca		dex				dex
.8f56	ca		dex				dex
.8f57	20 10 9e	jsr $9e10			jsr 	NSMRotateLeft
.8f5a	88		dey				dey 	 							; do 31 times
.8f5b	d0 f0		bne $8f4d			bne 	_I32SDLoop
.8f5d	7a		ply				ply 								; restore AY and exit
.8f5e	68		pla				pla
.8f5f	60		rts				rts
.8f60					DivideCheckSubtract:
.8f60	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f63	b0 04		bcs $8f69			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f65	20 6f 90	jsr $906f			jsr 	AddTopTwoStack 				; add it back in
.8f68	18		clc				clc 								; and return False
.8f69					_DCSExit:
.8f69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f6a					MulInteger:
.8f6a	fa		plx				plx
.8f6b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f6e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f71	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f72	0a		asl a				asl 	a
.8f73	10 05		bpl $8f7a			bpl 	_NotRef
.8f75	48		pha				pha
.8f76	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f79	68		pla				pla
.8f7a					_NotRef:
.8f7a	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f7b	30 0b		bmi $8f88			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f7d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f80	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f83	f0 06		beq $8f8b			beq 	_IntegerCode 				; if clear, then we have two integers
.8f85	4c a3 94	jmp $94a3			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f88					_StringData:
.8f88	4c 98 9f	jmp $9f98			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f8b					_IntegerCode:
.8f8b	20 98 8f	jsr $8f98			jsr 	MultiplyShort
.8f8e	c9 00		cmp #$00			cmp 	#0
.8f90	f0 05		beq $8f97			beq 	_MIExit
.8f92	a9 04		lda #$04		lda	#4
.8f94	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.8f97					_MIExit:
.8f97	60		rts				rts
.8f98					MultiplyShort:
.8f98	5a		phy				phy 								; save Y
.8f99	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f9c	20 f6 9d	jsr $9df6			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8f9f	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8fa1					_I32MLoop:
.8fa1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fa4	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fa7	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8faa	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fad	f0 28		beq $8fd7			beq 	_I32MExit 					; exit if zero
.8faf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fb2	29 01		and #$01			and 	#1
.8fb4	f0 0e		beq $8fc4			beq 	_I32MNoAdd
.8fb6	20 6f 90	jsr $906f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fb9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fbc	10 06		bpl $8fc4			bpl 	_I32MNoAdd
.8fbe					_I32ShiftRight:
.8fbe	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift S[X] right
.8fc1	c8		iny				iny 								; increment shift count
.8fc2	80 0a		bra $8fce			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fc4					_I32MNoAdd:
.8fc4	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fc7	70 f5		bvs $8fbe			bvs 	_I32ShiftRight 				; instead.
.8fc9	e8		inx				inx
.8fca	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fcd	ca		dex				dex
.8fce					_I32MShiftUpper:
.8fce	e8		inx				inx 								; shift S[X+2] right
.8fcf	e8		inx				inx
.8fd0	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight
.8fd3	ca		dex				dex
.8fd4	ca		dex				dex
.8fd5	80 ca		bra $8fa1			bra 	_I32MLoop 					; try again.
.8fd7					_I32MExit:
.8fd7	20 dd 8f	jsr $8fdd			jsr 	CalculateSign
.8fda	98		tya				tya 								; shift in A
.8fdb	7a		ply				ply 								; restore Y and exit
.8fdc	60		rts				rts
.8fdd					CalculateSign:
.8fdd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fe0	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fe3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fe6	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fe7	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8fea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8feb					CompareStrings:
.8feb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8fee	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8ff1	29 10		and #$10			and 	#NSBIsString
.8ff3	f0 2c		beq $9021			beq 	_CSTypeError
.8ff5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ff8	85 36		sta $36				sta 	zTemp0
.8ffa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ffd	85 37		sta $37				sta 	zTemp0+1
.8fff	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9002	85 38		sta $38				sta 	zTemp1
.9004	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9007	85 39		sta $39				sta 	zTemp1+1
.9009	5a		phy				phy 								; save Y so we can access strings
.900a	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.900c					_CSLoop:
.900c	c8		iny				iny
.900d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.900f	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9011	d0 06		bne $9019			bne 	_CSDifferent
.9013	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9015	d0 f5		bne $900c			bne 	_CSLoop 					; still comparing
.9017					_CSExit:
.9017	7a		ply				ply 								; reached end, return zero in A from EOS
.9018	60		rts				rts
.9019					_CSDifferent:
.9019	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.901b	90 fa		bcc $9017			bcc		_CSExit
.901d	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.901f	80 f6		bra $9017			bra 	_CSExit
.9021					_CSTypeError:
.9021	4c 8e 9f	jmp $9f8e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9024					ShiftLeft:
.9024	38		sec				sec
.9025	80 01		bra $9028			bra 	ShiftMain
.9027					ShiftRight:
.9027	18		clc				clc
.9028					ShiftMain:
.9028	fa		plx				plx 								; restore X
.9029	08		php				php 								; save direction
.902a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.902d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9030	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9031	0a		asl a				asl 	a
.9032	10 05		bpl $9039			bpl 	_NotRef
.9034	48		pha				pha
.9035	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9038	68		pla				pla
.9039					_NotRef:
.9039	0a		asl a				asl 	a
.903a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.903c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.903f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9042	f0 03		beq $9047			beq 	_IntegerCode 				; if clear, then we have two integers
.9044	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9047					_IntegerCode:
.9047	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.904a	29 e0		and #$e0			and 	#$E0
.904c	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.904f	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9052	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9055	d0 13		bne $906a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9057					_SMLoop:
.9057	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.905a	30 11		bmi $906d			bmi 	_SMExit 					; exit if done.
.905c	28		plp				plp 								; restore direcition setting
.905d	08		php				php
.905e	90 05		bcc $9065			bcc 	_SMRight
.9060	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; shift left if CS
.9063	80 f2		bra $9057			bra 	_SMLoop
.9065					_SMRight:
.9065	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift right if CC
.9068	80 ed		bra $9057			bra 	_SMLoop
.906a					_SMExit0:
.906a	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; return zero.
.906d					_SMExit:
.906d	28		plp				plp 								; throw direction
.906e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.906f					AddTopTwoStack:
.906f	18		clc				clc
.9070	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9073	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9076	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9079	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.907c	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.907f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9082	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9085	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9088	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.908b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.908e	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9091	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9094	60		rts				rts
.9095					SubTopTwoStack:
.9095	38		sec				sec
.9096	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9099	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.909c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.909f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90a2	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90a5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90a8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90ab	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90ae	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90b1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90b4	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90b7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90ba	60		rts				rts
.90bb					AddInteger:
.90bb	fa		plx				plx
.90bc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90bf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90c2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c3	0a		asl a				asl 	a
.90c4	10 05		bpl $90cb			bpl 	_NotRef
.90c6	48		pha				pha
.90c7	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90ca	68		pla				pla
.90cb					_NotRef:
.90cb	0a		asl a				asl 	a 							; put MSB of type into A:7
.90cc	30 0b		bmi $90d9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90ce	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90d4	f0 06		beq $90dc			beq 	_IntegerCode 				; if clear, then we have two integers
.90d6	4c 23 93	jmp $9323			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90d9					_StringData:
.90d9	4c 4b 8e	jmp $8e4b			jmp 	StringConcat							; at least one string - don't know both are strings.
.90dc					_IntegerCode:
.90dc					AddCode:
.90dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90df	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e2	10 8b		bpl $906f			bpl 	AddTopTwoStack
.90e4	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; do a physical subtraction
.90e7	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90ea	10 09		bpl $90f5			bpl 	_AddExit
.90ec	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90ef	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90f2	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90f5					_AddExit:
.90f5	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; check for -0
.90f8	d0 03		bne $90fd			bne 	_AddNonZero
.90fa	9e 00 04	stz $0400,x			stz 	NSStatus,x
.90fd					_AddNonZero:
.90fd	60		rts				rts
.90fe					SubInteger:
.90fe	fa		plx				plx
.90ff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9102	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9105	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9106	0a		asl a				asl 	a
.9107	10 05		bpl $910e			bpl 	_NotRef
.9109	48		pha				pha
.910a	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.910d	68		pla				pla
.910e					_NotRef:
.910e	0a		asl a				asl 	a 							; put MSB of type into A:7
.910f	30 0b		bmi $911c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9111	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9114	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9117	f0 06		beq $911f			beq 	_IntegerCode 				; if clear, then we have two integers
.9119	4c 28 93	jmp $9328			jmp 	FloatingPointSub 							; otherwise at least one float.
.911c					_StringData:
.911c	4c 98 9f	jmp $9f98			jmp 	NotDoneError							; at least one string - don't know both are strings.
.911f					_IntegerCode:
.911f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9122	49 80		eor #$80			eor 	#$80
.9124	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9127	80 b3		bra $90dc			bra 	AddCode 					; and do the same code as add.
.9129					AndInteger:
.9129	fa		plx				plx
.912a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.912d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9130	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9131	0a		asl a				asl 	a
.9132	10 05		bpl $9139			bpl 	_NotRef
.9134	48		pha				pha
.9135	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9138	68		pla				pla
.9139					_NotRef:
.9139	0a		asl a				asl 	a
.913a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.913c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.913f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9142	f0 03		beq $9147			beq 	_IntegerCode 				; if clear, then we have two integers
.9144	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9147					_IntegerCode:
.9147	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.914a	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.914d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9150	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9153	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9156	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9159	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.915c	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.915f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9162	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9165	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9168	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.916b	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.916e	60		rts				rts
.916f					OraInteger:
.916f	fa		plx				plx
.9170	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9173	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9176	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9177	0a		asl a				asl 	a
.9178	10 05		bpl $917f			bpl 	_NotRef
.917a	48		pha				pha
.917b	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.917e	68		pla				pla
.917f					_NotRef:
.917f	0a		asl a				asl 	a
.9180	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9182	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9185	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9188	f0 03		beq $918d			beq 	_IntegerCode 				; if clear, then we have two integers
.918a	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.918d					_IntegerCode:
.918d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9190	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9193	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9196	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9199	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.919c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.919f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a2	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91a5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91a8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91ab	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91ae	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91b1	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91b4	60		rts				rts
.91b5					EorInteger:
.91b5	fa		plx				plx
.91b6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91b9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91bc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91bd	0a		asl a				asl 	a
.91be	10 05		bpl $91c5			bpl 	_NotRef
.91c0	48		pha				pha
.91c1	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c4	68		pla				pla
.91c5					_NotRef:
.91c5	0a		asl a				asl 	a
.91c6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91c8	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91cb	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91ce	f0 03		beq $91d3			beq 	_IntegerCode 				; if clear, then we have two integers
.91d0	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.91d3					_IntegerCode:
.91d3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91d6	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91d9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91dc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91df	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91e2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91e5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91e8	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91eb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91ee	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91f1	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91f4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91f7	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91fa	60		rts				rts
.91fb					WordIndirect:
.91fb	fa		plx				plx
.91fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91ff	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9202	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9203	0a		asl a				asl 	a
.9204	10 05		bpl $920b			bpl 	_NotRef
.9206	48		pha				pha
.9207	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.920a	68		pla				pla
.920b					_NotRef:
.920b	0a		asl a				asl 	a
.920c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.920e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9211	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9214	f0 03		beq $9219			beq 	_IntegerCode 				; if clear, then we have two integers
.9216	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9219					_IntegerCode:
.9219	20 dc 90	jsr $90dc			jsr 	AddCode 					; add the two values
.921c	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.921e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9221	60		rts				rts
.9222					ByteIndirect:
.9222	fa		plx				plx
.9223	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9226	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9229	0a		asl a				asl 	a 							; shift reference bit into sign bit
.922a	0a		asl a				asl 	a
.922b	10 05		bpl $9232			bpl 	_NotRef
.922d	48		pha				pha
.922e	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9231	68		pla				pla
.9232					_NotRef:
.9232	0a		asl a				asl 	a
.9233	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9235	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9238	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.923b	f0 03		beq $9240			beq 	_IntegerCode 				; if clear, then we have two integers
.923d	4c 8e 9f	jmp $9f8e			jmp 	TypeError 					; anything else, type mismatch.
.9240					_IntegerCode:
.9240	20 dc 90	jsr $90dc			jsr 	AddCode 					; add the two values
.9243	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9245	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9248	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9249					ConvertInt16:
.9249	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.924c	8e 10 04	stx $0410			stx 	NSMantissa1
.924f	9c 18 04	stz $0418			stz 	NSMantissa2
.9252	9c 20 04	stz $0420			stz 	NSMantissa3
.9255	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9258	a2 00		ldx #$00			ldx 	#0 							; stack level
.925a	a9 0a		lda #$0a			lda 	#10 						; base
.925c	80 00		bra $925e			bra 	ConvertInt32
.925e					ConvertInt32:
.925e	5a		phy				phy
.925f	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9261	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9264	10 08		bpl $926e			bpl 	_CI32NotNeg
.9266	48		pha				pha
.9267	a9 2d		lda #$2d			lda 	#'-'
.9269	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.926c	c8		iny				iny
.926d	68		pla				pla
.926e					_CI32NotNeg:
.926e	20 7c 92	jsr $927c			jsr 	_CI32DivideConvert 			; recursive conversion
.9271	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9273	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y
.9276	7a		ply				ply
.9277	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9279	a9 f9		lda #$f9			lda 	#NumberBuffer & $FF
.927b	60		rts				rts
.927c					_CI32DivideConvert:
.927c	e8		inx				inx 								; write to next slot up
.927d	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9280	ca		dex				dex
.9281	20 20 8f	jsr $8f20			jsr 	Int32Divide 				; divide
.9284	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.9287	48		pha				pha
.9288	20 cf 8e	jsr $8ecf			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.928b	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero ?
.928e	f0 06		beq $9296			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9290	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9293	20 7c 92	jsr $927c			jsr 	_CI32DivideConvert 			; and recusrively call.
.9296					_CI32NoRecurse:
.9296	68		pla				pla 								; remainder
.9297	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9299	90 02		bcc $929d			bcc 	_CI32NotHex
.929b	69 26		adc #$26			adc 	#6+32
.929d					_CI32NotHex:
.929d	69 30		adc #$30			adc 	#48
.929f	99 f9 05	sta $05f9,y			sta 	NumberBuffer,y 				; write out and exit
.92a2	c8		iny				iny
.92a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92a4					PrecedenceLevel:
>92a4	04					.byte	 4	; $00 <<
>92a5	02					.byte	 2	; $01 <=
>92a6	02					.byte	 2	; $02 <>
>92a7	00					.byte	 0	; $03 !!3
>92a8	00					.byte	 0	; $04 ><
>92a9	02					.byte	 2	; $05 >=
>92aa	04					.byte	 4	; $06 >>
>92ab	00					.byte	 0	; $07 !!7
>92ac	00					.byte	 0	; $08 !!8
>92ad	00					.byte	 0	; $09 !!9
>92ae	00					.byte	 0	; $0a !!10
>92af	00					.byte	 0	; $0b !!11
>92b0	00					.byte	 0	; $0c !!12
>92b1	00					.byte	 0	; $0d !!13
>92b2	00					.byte	 0	; $0e !!14
>92b3	00					.byte	 0	; $0f !!15
>92b4	00					.byte	 0	; $10 @
>92b5	00					.byte	 0	; $11 !!17
>92b6	00					.byte	 0	; $12 !!18
>92b7	00					.byte	 0	; $13 [
>92b8	04					.byte	 4	; $14 \
>92b9	00					.byte	 0	; $15 ]
>92ba	01					.byte	 1	; $16 ^
>92bb	00					.byte	 0	; $17 _
>92bc	00					.byte	 0	; $18 `
>92bd	00					.byte	 0	; $19 !!25
>92be	00					.byte	 0	; $1a !!26
>92bf	00					.byte	 0	; $1b {
>92c0	01					.byte	 1	; $1c |
>92c1	00					.byte	 0	; $1d }
>92c2	00					.byte	 0	; $1e ~
>92c3	00					.byte	 0	; $1f [7m<7F>[m
>92c4	00					.byte	 0	; $20
>92c5	05					.byte	 5	; $21 !
>92c6	00					.byte	 0	; $22 "
>92c7	00					.byte	 0	; $23 #
>92c8	05					.byte	 5	; $24 $
>92c9	04					.byte	 4	; $25 %
>92ca	01					.byte	 1	; $26 &
>92cb	00					.byte	 0	; $27 '
>92cc	00					.byte	 0	; $28 (
>92cd	00					.byte	 0	; $29 )
>92ce	04					.byte	 4	; $2a *
>92cf	03					.byte	 3	; $2b +
>92d0	00					.byte	 0	; $2c ,
>92d1	03					.byte	 3	; $2d -
>92d2	00					.byte	 0	; $2e .
>92d3	04					.byte	 4	; $2f /
>92d4	00					.byte	 0	; $30 0
>92d5	00					.byte	 0	; $31 1
>92d6	00					.byte	 0	; $32 2
>92d7	00					.byte	 0	; $33 3
>92d8	00					.byte	 0	; $34 4
>92d9	00					.byte	 0	; $35 5
>92da	00					.byte	 0	; $36 6
>92db	00					.byte	 0	; $37 7
>92dc	00					.byte	 0	; $38 8
>92dd	00					.byte	 0	; $39 9
>92de	00					.byte	 0	; $3a :
>92df	00					.byte	 0	; $3b ;
>92e0	02					.byte	 2	; $3c <
>92e1	02					.byte	 2	; $3d =
>92e2	02					.byte	 2	; $3e >
>92e3	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92e4					EvaluateExpressionAt0:
.92e4	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92e6					EvaluateExpression:
.92e6	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92e8					EvaluateExpressionAtPrecedence:
.92e8	48		pha				pha 								; save precedence level
.92e9	20 c0 97	jsr $97c0			jsr 	EvaluateTerm 				; evaluate term into level X.
.92ec	68		pla				pla 								; restore precedence level.
.92ed					_EXPRLoop:
.92ed	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92ef	b1 30		lda ($30),y			lda 	(codePtr),y
.92f1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92f3	b0 25		bcs $931a			bcs 	_EXPRExit
.92f5	da		phx				phx 								; read the operator precedence
.92f6	aa		tax				tax
.92f7	bd a4 92	lda $92a4,x			lda 	PrecedenceLevel,x
.92fa	fa		plx				plx
.92fb	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.92fd	f0 1b		beq $931a			beq 	_EXPRExit
.92ff	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9301	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9303	c5 37		cmp $37				cmp 	zTemp0+1
.9305	b0 13		bcs $931a			bcs		_EXPRExit 					; if current >= operator exit
.9307	48		pha				pha 								; save current precedence.
.9308	b1 30		lda ($30),y			lda 	(codePtr),y
.930a	c8		iny				iny
.930b	48		pha				pha
.930c	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.930e	e8		inx				inx 								; work out the right hand side.
.930f	20 e8 92	jsr $92e8			jsr 	EvaluateExpressionAtPrecedence
.9312	ca		dex				dex
.9313	68		pla				pla 								; get operator, call the code.
.9314	20 1d 93	jsr $931d			jsr 	_EXPRCaller
.9317	68		pla				pla 								; restore precedence level
.9318	80 d3		bra $92ed			bra 	_EXPRLoop 					; and go round.
.931a					_EXPRExit:
.931a	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.931c	60		rts				rts
.931d					_EXPRCaller:
.931d	da		phx				phx 								; save on stack, first thing is to restore it
.931e	0a		asl a				asl 	a 							; double so can use vectors into X
.931f	aa		tax				tax
.9320	7c 68 8a	jmp ($8a68,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9323					FloatingPointAdd:
.9323	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.9326	80 0b		bra $9333			bra 	FloatAdd
.9328					FloatingPointSub:
.9328	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.932b					FloatSubtract:
.932b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.932e	49 80		eor #$80			eor 	#$80
.9330	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9333					FloatAdd:
.9333	48		pha				pha
.9334	5a		phy				phy
.9335	20 dd 94	jsr $94dd			jsr 	NSNormalise 				; normalise S[X]
.9338	f0 5c		beq $9396			beq 	_FAReturn1
.933a	e8		inx				inx 								; normalise S[X+1]
.933b	20 dd 94	jsr $94dd			jsr 	NSNormalise
.933e	ca		dex				dex
.933f	c9 00		cmp #$00			cmp 	#0
.9341	f0 77		beq $93ba			beq 	_FAExit 					; if so, just return A
.9343	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9346	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9349	f0 1b		beq $9366			beq 	_FAExponentsEqual
.934b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.934e	a8		tay				tay
.934f	38		sec				sec 								; do a signed comparison of the exponents.
.9350	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9353	50 02		bvc $9357			bvc 	_FANoSignedChange
.9355	49 80		eor #$80			eor 	#$80
.9357					_FANoSignedChange:
.9357	29 80		and #$80			and 	#$80
.9359	10 03		bpl $935e			bpl 	_FAHaveMax
.935b	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.935e					_FAHaveMax:
.935e	20 bd 93	jsr $93bd			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9361	e8		inx				inx
.9362	20 bd 93	jsr $93bd			jsr 	_FAShiftToExponent
.9365	ca		dex				dex
.9366					_FAExponentsEqual:
.9366	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9369	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.936c	30 10		bmi $937e			bmi 	_FADifferentSigns
.936e	20 6f 90	jsr $906f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9371	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9374	10 44		bpl $93ba			bpl 	_FAExit 					; if no, we are done.
.9376	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9379	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.937c	80 3c		bra $93ba			bra 	_FAExit
.937e					_FADifferentSigns:
.937e	20 95 90	jsr $9095			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9381	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9384	10 06		bpl $938c			bpl 	_FACheckZero 				; if no, check for -0
.9386	20 a6 9d	jsr $9da6			jsr 	NSMNegate 					; netate result
.9389	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.938c					_FACheckZero:
.938c	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero	 				; check for -0
.938f	d0 29		bne $93ba			bne 	_FAExit
.9391	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9394	80 24		bra $93ba			bra 	_FAExit
.9396					_FAReturn1:
.9396	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9399	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.939c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.939f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93a2	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93a5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93a8	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93ae	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93b1	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93b4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93b7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93ba					_FAExit:
.93ba	7a		ply				ply
.93bb	68		pla				pla
.93bc	60		rts				rts
.93bd					_FAShiftToExponent:
.93bd					_FAShiftToExponent2:
.93bd	98		tya				tya 								; compare Y to exponent
.93be	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93c1	f0 08		beq $93cb			beq 	_FASEExit 					; exit if so.
.93c3	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight	 			; shift the mantissa right
.93c6	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93c9	80 f2		bra $93bd			bra 	_FAShiftToExponent2
.93cb					_FASEExit:
.93cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93cc					CompareFloat:
.93cc	20 2b 93	jsr $932b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93cf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93d2	29 f8		and #$f8			and 	#$F8
.93d4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93d7	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93da	f0 09		beq $93e5			beq 	_FCExit 					; zero, so approximately identical
.93dc	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93de	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93e1	10 02		bpl $93e5			bpl 	_FCExit
.93e3					_FCNegative:
.93e3	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93e5					_FCExit:
.93e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93e6					FDivideCommand:
.93e6	fa		plx				plx	 								; restore stack position
.93e7	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.93ea					FloatDivide:
.93ea	48		pha				pha
.93eb	e8		inx				inx
.93ec	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93ef	ca		dex				dex
.93f0	c9 00		cmp #$00			cmp 	#0
.93f2	f0 20		beq $9414			beq 	_FDZero
.93f4	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93f7	f0 19		beq $9412			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93f9	20 42 8f	jsr $8f42			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93fc	20 cf 8e	jsr $8ecf			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.93ff	20 dd 94	jsr $94dd			jsr		NSNormalise 				; renormalise
.9402	20 dd 8f	jsr $8fdd			jsr 	CalculateSign 				; calculate result sign
.9405	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9408	38		sec				sec
.9409	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.940c	38		sec				sec
.940d	e9 1e		sbc #$1e			sbc 	#30
.940f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9412					_FDExit:
.9412	68		pla				pla
.9413	60		rts				rts
.9414					_FDZero:
.9414	a9 03		lda #$03		lda	#3
.9416	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9419					FloatFractionalPart:
.9419	5a		phy				phy
.941a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.941d	29 7f		and #$7f			and 	#$7F
.941f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9422	20 dd 94	jsr $94dd			jsr 	NSNormalise
.9425	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9428	38		sec				sec
.9429	e9 e0		sbc #$e0			sbc 	#$E0
.942b	90 31		bcc $945e			bcc 	_FFPExit 					; already fractional
.942d	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.942f	b0 2a		bcs $945b			bcs 	_FFPZero
.9431	a8		tay				tay 								; put count to do in Y
.9432	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9435	20 60 94	jsr $9460			jsr 	_FFPPartial
.9438	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.943b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.943e	20 60 94	jsr $9460			jsr 	_FFPPartial
.9441	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9444	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9447	20 60 94	jsr $9460			jsr 	_FFPPartial
.944a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.944d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9450	20 60 94	jsr $9460			jsr 	_FFPPartial
.9453	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9456	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; zeroed check.
.9459	d0 03		bne $945e			bne 	_FFPExit
.945b					_FFPZero:
.945b	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.945e					_FFPExit:
.945e	7a		ply				ply
.945f	60		rts				rts
.9460					_FFPPartial:
.9460	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9462	f0 17		beq $947b			beq 	_FFFPPExit
.9464	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9466	b0 0c		bcs $9474			bcs 	_FFFPPWholeByte
.9468	5a		phy				phy
.9469					_FFFPPLeft:
.9469	0a		asl a				asl 	a
.946a	88		dey				dey
.946b	d0 fc		bne $9469			bne 	_FFFPPLeft
.946d	7a		ply				ply
.946e					_FFFPPRight:
.946e	4a		lsr a				lsr 	a
.946f	88		dey				dey
.9470	d0 fc		bne $946e			bne 	_FFFPPRight
.9472	80 07		bra $947b			bra 	_FFFPPExit
.9474					_FFFPPWholeByte:
.9474	98		tya				tya 								; subtract 8 from count
.9475	38		sec				sec
.9476	e9 08		sbc #$08			sbc 	#8
.9478	a8		tay				tay
.9479	a9 00		lda #$00			lda 	#0 							; and clear all
.947b					_FFFPPExit:
.947b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.947c					FloatIntegerPart:
.947c	48		pha				pha
.947d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.9480	f0 1f		beq $94a1			beq 	_FIPExit 					; if so do nothing
.9482	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; is it zero ?
.9485	f0 17		beq $949e			beq 	_FIPZero 					; if so return zero.
.9487	20 dd 94	jsr $94dd			jsr 	NSNormalise 				; normalise
.948a	f0 12		beq $949e			beq 	_FIPZero 					; normalised to zero, exit zero
.948c					_FIPShift:
.948c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.948f	10 08		bpl $9499			bpl 	_FIPCheckZero
.9491	20 1d 9e	jsr $9e1d			jsr 	NSMShiftRight 				; shift mantissa right
.9494	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.9497	80 f3		bra $948c			bra 	_FIPShift
.9499					_FIPCheckZero:
.9499	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; avoid -0 problem
.949c	d0 03		bne $94a1			bne 	_FIPExit 					; set to zero if mantissa zero.
.949e					_FIPZero:
.949e	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.94a1					_FIPExit:
.94a1	68		pla				pla
.94a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94a3					FloatingPointMultiply:
.94a3	20 cc 94	jsr $94cc			jsr 	FloatPrepare 				; prepare for floats
.94a6					FloatMultiply:
.94a6	48		pha				pha
.94a7	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94aa	f0 1b		beq $94c7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94ac	e8		inx				inx
.94ad	20 dd 94	jsr $94dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94b0	ca		dex				dex
.94b1	c9 00		cmp #$00			cmp 	#0
.94b3	f0 0f		beq $94c4			beq 	_FDSetZero
.94b5	20 98 8f	jsr $8f98			jsr 	MultiplyShort 				; calculate the result.
.94b8	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94bb	18		clc				clc
.94bc	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94bf	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94c2	80 03		bra $94c7			bra 	_FDExit
.94c4					_FDSetZero:
.94c4	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; return 0
.94c7					_FDExit:
.94c7	20 dd 94	jsr $94dd			jsr 	NSNormalise 				; normalise the result
.94ca	68		pla				pla
.94cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94cc					FloatPrepare:
.94cc	20 ff 95	jsr $95ff			jsr 	DereferenceTopTwo 			; dereference the top two values
.94cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94d2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94d5	29 10		and #$10			and 	#NSBIsString
.94d7	d0 01		bne $94da			bne 	_FDType
.94d9	60		rts				rts
.94da					_FDType:
.94da	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.94dd					NSNormalise:
.94dd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94e0	29 80		and #$80			and 	#$80
.94e2	09 08		ora #$08			ora 	#NSTFloat
.94e4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94e7	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; if zero exit
.94ea	d0 09		bne $94f5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94ec	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94ef	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94f2	a9 00		lda #$00			lda 	#0 							; set Z flag
.94f4	60		rts				rts
.94f5					_NSNormaliseOptimise:
.94f5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94f8	d0 22		bne $951c			bne 	_NSNormaliseLoop
.94fa	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.94fd	30 1d		bmi $951c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.94ff	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9502	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9505	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9508	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.950b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.950e	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9511	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9514	38		sec				sec
.9515	e9 08		sbc #$08			sbc 	#8
.9517	9d 28 04	sta $0428,x			sta 	NSExponent,x
.951a	80 d9		bra $94f5			bra 	_NSNormaliseOptimise
.951c					_NSNormaliseLoop:
.951c	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.951f	70 08		bvs $9529			bvs 	_NSNExit 					; exit if so with Z flag clear
.9521	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; shift mantissa left
.9524	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9527	80 f3		bra $951c			bra 	_NSNormaliseLoop
.9529					_NSNExit:
.9529	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.952b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.952c					AssignNumber:
.952c	5a		phy				phy
.952d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9530	85 36		sta $36				sta 	zTemp0
.9532	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9535	85 37		sta $37				sta 	zTemp0+1
.9537	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.953a	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.953c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.953f	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9541	c9 08		cmp #$08			cmp 	#NSTFloat
.9543	f0 2a		beq $956f			beq 	_ANFloat
.9545	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9548	f0 05		beq $954f			beq		_ANNotFloat
.954a	e8		inx				inx
.954b	20 7c 94	jsr $947c			jsr 	FloatIntegerPart 			; make it an integer
.954e	ca		dex				dex
.954f					_ANNotFloat:
.954f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9552	29 03		and #$03			and 	#3
.9554	d0 05		bne $955b			bne 	_ANByteWord
.9556	20 7b 95	jsr $957b			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9559	80 1e		bra $9579			bra 	_ANExit
.955b					_ANByteWord:
.955b	48		pha				pha 								; save count
.955c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.955f	92 36		sta ($36)			sta 	(zTemp0)
.9561	68		pla				pla
.9562	c9 01		cmp #$01			cmp	 	#1
.9564	f0 13		beq $9579			beq 	_ANExit
.9566	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9569	a0 01		ldy #$01			ldy 	#1
.956b	91 36		sta ($36),y			sta 	(zTemp0),y
.956d	80 0a		bra $9579			bra 	_ANExit
.956f					_ANFloat:
.956f	20 7b 95	jsr $957b			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9572	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9575	a0 04		ldy #$04			ldy 	#4
.9577	91 36		sta ($36),y			sta 	(zTemp0),y
.9579					_ANExit:
.9579	7a		ply				ply
.957a	60		rts				rts
.957b					_ANCopy4PackSign:
.957b	a0 03		ldy #$03			ldy 	#3
.957d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9580	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9582	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9585	91 36		sta ($36),y			sta 	(zTemp0),y
.9587	88		dey				dey
.9588	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.958b	91 36		sta ($36),y			sta 	(zTemp0),y
.958d	88		dey				dey
.958e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9591	91 36		sta ($36),y			sta 	(zTemp0),y
.9593	88		dey				dey
.9594	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9597	91 36		sta ($36),y			sta 	(zTemp0),y
.9599	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.959a					AssignString:
.959a	5a		phy				phy
.959b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.959e	85 38		sta $38				sta 	zTemp1
.95a0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95a3	85 39		sta $39				sta 	zTemp1+1
.95a5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95a8	85 36		sta $36				sta 	zTemp0
.95aa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95ad	85 37		sta $37				sta 	zTemp0+1
.95af	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95b1	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b3	f0 23		beq $95d8			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95b5	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95b6	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95b8	e9 02		sbc #$02			sbc 	#2
.95ba	85 3c		sta $3c				sta 	zsTemp
.95bc	a0 01		ldy #$01			ldy 	#1
.95be	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c0	e9 00		sbc #$00			sbc 	#0
.95c2	85 3d		sta $3d				sta 	zsTemp+1
.95c4	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95c6					_ASGetLength:
.95c6	c8		iny				iny
.95c7	b1 38		lda ($38),y			lda 	(zTemp1),y
.95c9	d0 fb		bne $95c6			bne 	_ASGetLength
.95cb	98		tya				tya 								; is this length <= current length
.95cc	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95ce	90 20		bcc $95f0			bcc 	_ASCopyString
.95d0	f0 1e		beq $95f0			beq 	_ASCopyString
.95d2	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95d4	a0 01		ldy #$01			ldy 	#1
.95d6	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95d8					_ASNewStringRequired:
.95d8	e8		inx				inx 								; concrete the new string.
.95d9	20 d0 a2	jsr $a2d0			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95dc	ca		dex				dex
.95dd	18		clc				clc
.95de	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95e1	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95e3	92 36		sta ($36)			sta 	(zTemp0)
.95e5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95e8	69 00		adc #$00			adc 	#0
.95ea	a0 01		ldy #$01			ldy 	#1
.95ec	91 36		sta ($36),y			sta 	(zTemp0),y
.95ee	80 0d		bra $95fd			bra 	_ASExit
.95f0					_ASCopyString:
.95f0	a0 00		ldy #$00			ldy 	#0
.95f2					_ASCopyLoop:
.95f2	b1 38		lda ($38),y			lda 	(zTemp1),y
.95f4	c8		iny				iny
.95f5	c8		iny				iny
.95f6	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f8	88		dey				dey
.95f9	c9 00		cmp #$00			cmp 	#0
.95fb	d0 f5		bne $95f2			bne 	_ASCopyLoop
.95fd					_ASExit:
.95fd	7a		ply				ply
.95fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.95ff					DereferenceTopTwo:
.95ff	e8		inx				inx
.9600	20 04 96	jsr $9604			jsr 	Dereference 				; deref x+1
.9603	ca		dex				dex  								; falls through to deref x
.9604					Dereference:
.9604	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9607	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9609	f0 57		beq $9662			beq 	_DRFExit 					; not a reference
.960b	5a		phy				phy
.960c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.960f	85 36		sta $36				sta 	zTemp0
.9611	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9614	85 37		sta $37				sta 	zTemp0+1
.9616	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9619	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.961b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.961e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9621	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9623	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9625	f0 0f		beq $9636			beq 	_DRFDereferenceTwo
.9627	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9629	f0 39		beq $9664			beq 	_DRFFull
.962b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.962e	29 03		and #$03			and 	#3
.9630	f0 32		beq $9664			beq 	_DRFFull 					; the whole word
.9632	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9634	f0 07		beq $963d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9636					_DRFDereferenceTwo:
.9636	a0 01		ldy #$01			ldy 	#1
.9638	b1 36		lda ($36),y			lda 	(zTemp0),y
.963a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.963d					_DRFClear23:
.963d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9640	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9643	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9646	29 18		and #$18			and 	#NSBTypeMask
.9648	9d 00 04	sta $0400,x			sta 	NSStatus,x
.964b	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.964d	d0 12		bne $9661			bne 	_DRFNotString
.964f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9652	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9655	d0 0a		bne $9661			bne 	_DRFNotString
.9657	a9 63		lda #$63			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9659	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.965c	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.965e	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9661					_DRFNotString
.9661	7a		ply				ply 								; restore Y and exit
.9662					_DRFExit:
.9662	60		rts				rts
.9663					_DRFNullString:
>9663	00						.byte 	0
.9664					_DRFFull:
.9664	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9666	b1 36		lda ($36),y			lda 	(zTemp0),y
.9668	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.966b	c8		iny				iny
.966c	b1 36		lda ($36),y			lda 	(zTemp0),y
.966e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9671	c8		iny				iny
.9672	b1 36		lda ($36),y			lda 	(zTemp0),y
.9674	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9677	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.967a	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.967d	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.967f	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9682	f0 06		beq $968a			beq 	_DRFNoExponent
.9684	c8		iny				iny 								; if not, read the exponent as well.
.9685	b1 36		lda ($36),y			lda 	(zTemp0),y
.9687	9d 28 04	sta $0428,x			sta 	NSExponent,x
.968a					_DRFNoExponent:
.968a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.968d	10 0d		bpl $969c			bpl 	_DRFExit2 					; if not, then exit.
.968f	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9691	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9694	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9697	09 80		ora #$80			ora 	#NSBIsNegative
.9699	9d 00 04	sta $0400,x			sta 	NSStatus,x
.969c					_DRFExit2:
.969c	7a		ply				ply
.969d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.969e					EncodeNumberStart:
.969e	38		sec				sec
.969f	80 01		bra $96a2			bra 	EncodeNumberContinue+1
.96a1					EncodeNumberContinue:
.96a1	18		clc				clc
.96a2					EncodeNumber:
.96a2	08		php				php 								; save reset.
.96a3	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96a5	f0 12		beq $96b9			beq 	_ENIsOkay
.96a7	c9 30		cmp #$30			cmp 	#"0"
.96a9	90 04		bcc $96af			bcc 	_ENBadNumber
.96ab	c9 3a		cmp #$3a			cmp 	#"9"+1
.96ad	90 0a		bcc $96b9			bcc 	_ENIsOkay
.96af					_ENBadNumber:
.96af	28		plp				plp 								; throw saved reset
.96b0	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96b3	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96b5	f0 7e		beq $9735			beq 	_ENConstructFinal
.96b7					_ENFail:
.96b7	18		clc				clc 								; not allowed
.96b8	60		rts				rts
.96b9					_ENIsOkay:
.96b9	28		plp				plp 								; are we restarting
.96ba	90 15		bcc $96d1			bcc 	_ENNoRestart
.96bc					_ENStartEncode:
.96bc	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96be	f0 0c		beq $96cc			beq 	_ENFirstDP
.96c0	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96c2	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.96c5	a9 01		lda #$01			lda 	#ESTA_Low
.96c7					_ENExitChange:
.96c7	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96ca	38		sec				sec
.96cb	60		rts				rts
.96cc					_ENFirstDP:
.96cc	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; clear integer part
.96cf	80 3f		bra $9710			bra 	_ESTASwitchFloat			; go straight to float and exi
.96d1					_ENNoRestart:
.96d1	48		pha				pha 								; save on stack.
.96d2	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96d5	c9 01		cmp #$01			cmp 	#ESTA_Low
.96d7	f0 09		beq $96e2			beq  	_ESTALowState
.96d9	c9 02		cmp #$02			cmp 	#ESTA_High
.96db	f0 29		beq $9706			beq 	_ESTAHighState
.96dd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96df	f0 3b		beq $971c			beq 	_ESTADecimalState
>96e1	db						.byte 	$DB 						; causes a break in the emulator
.96e2					_ESTALowState:
.96e2	68		pla				pla 								; get value back
.96e3	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96e5	f0 29		beq $9710			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96e7	29 0f		and #$0f			and 	#15 						; make digit
.96e9	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96ef	0a		asl a				asl 	a
.96f0	0a		asl a				asl 	a
.96f1	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96f4	0a		asl a				asl 	a
.96f5	6d 86 04	adc $0486			adc 	DigitTemp
.96f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96fb	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.96fd	90 05		bcc $9704			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.96ff	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9701	8d 85 04	sta $0485			sta 	EncodeState
.9704					_ESTANoSwitch:
.9704	38		sec				sec
.9705	60		rts				rts
.9706					_ESTAHighState:
.9706	68		pla				pla 								; get value back
.9707	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9709	f0 05		beq $9710			beq 	_ESTASwitchFloat
.970b	20 6f 97	jsr $976f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.970e	38		sec				sec
.970f	60		rts				rts
.9710					_ESTASwitchFloat:
.9710	9c 87 04	stz $0487			stz 	DecimalCount
.9713	e8		inx				inx 								; zero the decimal additive.
.9714	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.9717	ca		dex				dex
.9718	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.971a	80 ab		bra $96c7			bra 	_ENExitChange
.971c					_ESTADecimalState:
.971c	68		pla				pla 								; digit.
.971d	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.971f	f0 96		beq $96b7			beq 	_ENFail
.9721	e8		inx				inx 								; put digit into fractional part of X+1
.9722	20 6f 97	jsr $976f			jsr 	ESTAShiftDigitIntoMantissa
.9725	ca		dex				dex
.9726	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9729	ad 87 04	lda $0487			lda 	DecimalCount
.972c	c9 0b		cmp #$0b			cmp 	#11
.972e	f0 02		beq $9732			beq 	_ESTADSFail
.9730	38		sec				sec
.9731	60		rts				rts
.9732					_ESTADSFail:
.9732	4c 89 9f	jmp $9f89			jmp 	RangeError
.9735					_ENConstructFinal:
.9735	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9738	f0 33		beq $976d			beq 	_ENCFExit 					; no decimals
.973a	5a		phy				phy
.973b	0a		asl a				asl 	a 							; x 4 and CLC
.973c	0a		asl a				asl 	a
.973d	6d 87 04	adc $0487			adc 	DecimalCount
.9740	a8		tay				tay
.9741	b9 48 9f	lda $9f48,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9744	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9747	b9 49 9f	lda $9f49,y			lda 	DecimalScalarTable-5+1,y
.974a	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.974d	b9 4a 9f	lda $9f4a,y			lda 	DecimalScalarTable-5+2,y
.9750	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9753	b9 4b 9f	lda $9f4b,y			lda 	DecimalScalarTable-5+3,y
.9756	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9759	b9 4c 9f	lda $9f4c,y			lda 	DecimalScalarTable-5+4,y
.975c	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.975f	a9 08		lda #$08			lda 	#NSTFloat
.9761	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9764	7a		ply				ply
.9765	e8		inx				inx 								; multiply decimal const by decimal scalar
.9766	20 a6 94	jsr $94a6			jsr 	FloatMultiply
.9769	ca		dex				dex
.976a	20 33 93	jsr $9333			jsr 	FloatAdd 					; add to integer part.
.976d					_ENCFExit:
.976d	18		clc				clc 								; reject the digit.
.976e	60		rts				rts
.976f					ESTAShiftDigitIntoMantissa:
.976f	29 0f		and #$0f			and 	#15 						; save digit
.9771	48		pha				pha
.9772	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9775	48		pha				pha
.9776	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9779	48		pha				pha
.977a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.977d	48		pha				pha
.977e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9781	48		pha				pha
.9782	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 2
.9785	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 4
.9788	18		clc				clc 								; pop mantissa and add
.9789	68		pla				pla
.978a	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.978d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9790	68		pla				pla
.9791	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9794	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9797	68		pla				pla
.9798	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.979b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.979e	68		pla				pla
.979f	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97a2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97a5	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 10
.97a8	68		pla				pla 								; add digit
.97a9	18		clc				clc
.97aa	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97ad	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97b0	90 0d		bcc $97bf			bcc 	_ESTASDExit
.97b2	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97b5	d0 08		bne $97bf			bne 	_ESTASDExit
.97b7	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97ba	d0 03		bne $97bf			bne 	_ESTASDExit
.97bc	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97bf					_ESTASDExit:
.97bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97c0					EvaluateTerm:
.97c0	b1 30		lda ($30),y			lda 	(codePtr),y
.97c2	30 18		bmi $97dc			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97c4	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97c6	b0 6f		bcs $9837			bcs 	_ETVariable
.97c8	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97ca	90 6e		bcc $983a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97cc	c9 3a		cmp #$3a			cmp 	#'9'+1
.97ce	b0 6a		bcs $983a			bcs 	_ETPuncUnary
.97d0	20 9e 96	jsr $969e			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97d3					_ETNumber:
.97d3	c8		iny				iny 								; keep encoding until we have the numbers
.97d4	b1 30		lda ($30),y			lda 	(codePtr),y
.97d6	20 a1 96	jsr $96a1			jsr 	EncodeNumberContinue
.97d9	b0 f8		bcs $97d3			bcs 	_ETNumber 					; go back if accepted.
.97db	60		rts				rts
.97dc					_ETCheckUnary:
.97dc	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97de	f0 41		beq $9821			beq 	_ETString
.97e0	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97e2	f0 12		beq $97f6			beq 	_ETHexConstant
.97e4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97e6	90 0b		bcc $97f3			bcc 	_ETSyntaxError
.97e8	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.97ea	b0 07		bcs $97f3			bcs 	_ETSyntaxError
.97ec	da		phx				phx 								; push X on the stack
.97ed	0a		asl a				asl 	a 							; put vector x 2 into X
.97ee	aa		tax				tax
.97ef	c8		iny				iny 								; consume unary function token
.97f0	7c e8 8a	jmp ($8ae8,x)			jmp 	(VectorSet0,x) 				; and do it.
.97f3					_ETSyntaxError:
.97f3	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.97f6					_ETHexConstant:
.97f6	c8		iny				iny 								; skip #
.97f7	c8		iny				iny 								; skip count
.97f8	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; clear result
.97fb					_ETHLoop:
.97fb	b1 30		lda ($30),y			lda 	(codePtr),y
.97fd	c8		iny				iny 								; and consume
.97fe	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9800	f0 1e		beq $9820			beq 	_ETHExit
.9802	48		pha				pha 								; save on stack.
.9803	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 2
.9806	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 4
.9809	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 8
.980c	20 0f 9e	jsr $9e0f			jsr 	NSMShiftLeft 				; x 16
.980f	68		pla				pla 								; ASCII
.9810	c9 41		cmp #$41			cmp 	#'A'
.9812	90 02		bcc $9816			bcc 	_ETHNotChar
.9814	e9 07		sbc #$07			sbc 	#7
.9816					_ETHNotChar:
.9816	29 0f		and #$0f			and 	#15 						; digit now
.9818	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.981b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.981e	80 db		bra $97fb			bra 	_ETHLoop 					; go round.
.9820					_ETHExit:
.9820	60		rts				rts
.9821					_ETString:
.9821	c8		iny				iny 								; look at length
.9822	b1 30		lda ($30),y			lda 	(codePtr),y
.9824	48		pha				pha
.9825	c8		iny				iny 								; first character
.9826	20 f4 a1	jsr $a1f4			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9829	68		pla				pla 								; restore count and save
.982a	85 36		sta $36				sta 	zTemp0
.982c	98		tya				tya 								; add length to Y to skip it.
.982d	18		clc				clc
.982e	65 36		adc $36				adc 	zTemp0
.9830	a8		tay				tay
.9831	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9833	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9836	60		rts				rts
.9837					_ETVariable:
.9837	4c 91 98	jmp $9891			jmp 	VariableHandler
.983a					_ETPuncUnary:
.983a	c8		iny				iny 								; consume the unary character
.983b	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.983d	f0 2d		beq $986c			beq 	_ETUnaryNegate
.983f	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9841	f0 39		beq $987c			beq 	_ETDereference
.9843	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9845	f0 43		beq $988a			beq 	_ETParenthesis
.9847	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9849	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.984b	f0 06		beq $9853			beq 	_ETIndirection
.984d	e6 36		inc $36				inc 	zTemp0
.984f	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9851	d0 a0		bne $97f3			bne 	_ETSyntaxError
.9853					_ETIndirection:
.9853	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9855	1a		inc a				inc 	a
.9856	48		pha				pha
.9857	20 c0 97	jsr $97c0			jsr 	EvaluateTerm				; evaluate the term
.985a	20 04 96	jsr $9604			jsr 	Dereference 				; dereference it.
.985d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9860	d0 07		bne $9869			bne 	_ETTypeMismatch
.9862	68		pla				pla 								; indirection 1-2
.9863	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9865	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9868	60		rts				rts
.9869					_ETTypeMismatch:
.9869	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.986c					_ETUnaryNegate:
.986c	20 c0 97	jsr $97c0			jsr 	EvaluateTerm				; evaluate the term
.986f	20 04 96	jsr $9604			jsr 	Dereference 				; dereference it.
.9872	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9875	29 10		and #$10			and 	#NSTString
.9877	d0 f0		bne $9869			bne 	_ETTypeMismatch
.9879	4c a6 9d	jmp $9da6			jmp 	NSMNegate  					; just toggles the sign bit.
.987c					_ETDereference:
.987c	20 c0 97	jsr $97c0			jsr 	EvaluateTerm				; evaluate the term
.987f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9882	29 20		and #$20			and 	#NSBIsReference
.9884	f0 e3		beq $9869			beq 	_ETTypeMismatch
.9886	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9889	60		rts				rts
.988a					_ETParenthesis:
.988a	20 e6 92	jsr $92e6			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.988d	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check for )
.9890	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9891					VariableHandler:
.9891	b1 30		lda ($30),y			lda 	(codePtr),y
.9893	18		clc				clc
.9894	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9896	85 37		sta $37				sta 	zTemp0+1
.9898	c8		iny				iny
.9899	b1 30		lda ($30),y			lda 	(codePtr),y
.989b	85 36		sta $36				sta 	zTemp0
.989d	c8		iny				iny
.989e	18		clc				clc									; copy variable address+3 to mantissa
.989f	69 03		adc #$03			adc 	#3
.98a1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a4	a5 37		lda $37				lda 	zTemp0+1
.98a6	69 00		adc #$00			adc 	#0
.98a8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98ab	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98ae	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98b1	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98b4	5a		phy				phy
.98b5	a0 02		ldy #$02			ldy 	#2 							; read type
.98b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.98b9	7a		ply				ply
.98ba	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98bc	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98be	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98c1	29 04		and #$04			and 	#NSBIsArray
.98c3	d0 01		bne $98c6			bne 	_VHArray
.98c5	60		rts				rts
.98c6					_VHArray:
.98c6	e8		inx				inx
.98c7	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98ca	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98cc	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98cf	b1 30		lda ($30),y			lda 	(codePtr),y
.98d1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98d3	d0 06		bne $98db			bne 	_VHNoSecondIndex
.98d5	c8		iny				iny 								; skip the comma
.98d6	e8		inx				inx
.98d7	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98da	ca		dex				dex
.98db					_VHNoSecondIndex:
.98db	ca		dex				dex 								; set X back.
.98dc	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; and check the right bracket.
.98df	5a		phy				phy 								; save position
.98e0	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98e2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98e4	f0 6b		beq $9951			beq 	_VHBadIndex
.98e6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98e9	85 3e		sta $3e				sta 	zaTemp
.98eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98ee	85 3f		sta $3f				sta 	zaTemp+1
.98f0	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98f2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98f4	f0 02		beq $98f8			beq 	_VHHas2Mask
.98f6	a9 ff		lda #$ff			lda 	#$FF
.98f8					_VHHas2Mask:
.98f8	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.98fb	f0 54		beq $9951			beq 	_VHBadIndex
.98fd	0a		asl a				asl 	a 							; carry will be set if a second index
.98fe	90 09		bcc $9909			bcc 	_VHCheckFirstIndex
.9900	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9902	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9904	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9907	90 48		bcc $9951			bcc 	_VHBadIndex
.9909					_VHCheckFirstIndex:
.9909	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.990b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990d	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9910	90 3f		bcc $9951			bcc 	_VHBadIndex
.9912	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9914	64 37		stz $37				stz 	zTemp0+1
.9916	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9919	30 0f		bmi $992a			bmi 	_VHNoMultiply
.991b	da		phx				phx
.991c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.991f	48		pha				pha
.9920	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9922	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9924	1a		inc a				inc 	a 							; add 1 for zero base
.9925	fa		plx				plx
.9926	20 8f 9d	jsr $9d8f			jsr 	Multiply8x8 				; calculate -> Z0
.9929	fa		plx				plx
.992a					_VHNoMultiply:
.992a	18		clc				clc
.992b	a5 36		lda $36				lda 	zTemp0
.992d	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9930	85 36		sta $36				sta 	zTemp0
.9932	a5 37		lda $37				lda 	zTemp0+1
.9934	69 00		adc #$00			adc 	#0
.9936	85 37		sta $37				sta 	zTemp0+1
.9938	bd 00 04	lda $0400,x			lda 	NSStatus,x
.993b	20 f7 84	jsr $84f7			jsr 	ScaleByBaseType
.993e	18		clc				clc
.993f	b2 3e		lda ($3e)			lda 	(zaTemp)
.9941	65 36		adc $36				adc 	zTemp0
.9943	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9946	a0 01		ldy #$01			ldy 	#1
.9948	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.994a	65 37		adc $37				adc 	zTemp0+1
.994c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.994f	7a		ply				ply 								; restore position
.9950	60		rts				rts
.9951					_VHBadIndex:
.9951	a9 17		lda #$17		lda	#23
.9953	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9956					AbsUnary:
.9956	fa		plx				plx 								; restore stack pos
.9957	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.995a	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.995d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9960	29 7f		and #$7f			and 	#$7F
.9962	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9965	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9966					AllocUnary:
.9966	fa		plx				plx 								; restore stack pos
.9967	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger		; get bytes required.
.996a	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.996d	da		phx				phx 								; save X/Y
.996e	5a		phy				phy
.996f	8a		txa				txa 								; copy X into Y
.9970	a8		tay				tay
.9971	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9974	aa		tax				tax
.9975	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9978	20 85 99	jsr $9985			jsr 	AllocateXABytes 			; allocate memory
.997b	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.997e	8a		txa				txa
.997f	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9982	7a		ply				ply
.9983	fa		plx				plx
.9984	60		rts				rts
.9985					AllocateXABytes:
.9985	5a		phy				phy
.9986	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9989	84 36		sty $36				sty 	zTemp0
.998b	5a		phy				phy
.998c	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.998f	84 37		sty $37				sty 	zTemp0+1
.9991	5a		phy				phy
.9992	18		clc				clc 								; add to low memory pointer
.9993	6d 8c 04	adc $048c			adc 	lowMemPtr
.9996	8d 8c 04	sta $048c			sta 	lowMemPtr
.9999	8a		txa				txa
.999a	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.999d	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.99a0	b0 2f		bcs $99d1			bcs 	CISSMemory
.99a2	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99a5					_ClearMemory:
.99a5	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99a8	c5 36		cmp $36				cmp 	zTemp0
.99aa	d0 07		bne $99b3			bne 	_CMClearNext
.99ac	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99af	c5 37		cmp $37				cmp 	zTemp0+1
.99b1	f0 0c		beq $99bf			beq 	_CMExit
.99b3					_CMClearNext:
.99b3	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99b5	92 36		sta ($36)			sta 	(zTemp0)
.99b7	e6 36		inc $36				inc 	zTemp0
.99b9	d0 ea		bne $99a5			bne 	_ClearMemory
.99bb	e6 37		inc $37				inc		zTemp0+1
.99bd	80 e6		bra $99a5			bra 	_ClearMemory
.99bf					_CMExit:
.99bf	fa		plx				plx
.99c0	68		pla				pla
.99c1	7a		ply				ply
.99c2	60		rts				rts
.99c3					CheckIdentifierStringSpace:
.99c3	48		pha				pha
.99c4	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99c7	18		clc				clc
.99c8	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99ca	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99cd	b0 02		bcs $99d1			bcs 	CISSMemory
.99cf	68		pla				pla
.99d0	60		rts				rts
.99d1					CISSMemory:
.99d1	a9 06		lda #$06		lda	#6
.99d3	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99d6					AscUnary:
.99d6	fa		plx				plx 								; restore stack pos
.99d7	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.99da	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99dc	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.99df	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.99e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99e3					FracUnary:
.99e3	fa		plx				plx 								; restore stack pos
.99e4	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.99e7	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.99ea	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99ed	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99ef	f0 04		beq $99f5			beq 	_IUZero
.99f1	20 19 94	jsr $9419			jsr 	FloatFractionalPart
.99f4	60		rts				rts
.99f5					_IUZero:
.99f5	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.99f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99f9					IntUnary:
.99f9	fa		plx				plx 								; restore stack pos
.99fa	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.99fd	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9a00	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a03	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a05	f0 03		beq $9a0a			beq 	_IUExit
.9a07	20 7c 94	jsr $947c			jsr 	FloatIntegerPart
.9a0a					_IUExit:
.9a0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a0b					LenUnary:
.9a0b	fa		plx				plx 								; restore stack pos
.9a0c	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.9a0f	5a		phy				phy
.9a10	a0 00		ldy #$00			ldy 	#0 							; find length
.9a12					_LenFind:
.9a12	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a14	f0 06		beq $9a1c			beq 	_LenExit
.9a16	c8		iny				iny
.9a17	d0 f9		bne $9a12			bne 	_LenFind
.9a19	4c 89 9f	jmp $9f89			jmp 	RangeError 					; string > 255
.9a1c					_LenExit:
.9a1c	98		tya				tya
.9a1d	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9a20	7a		ply				ply
.9a21	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9a24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a25					Unary_Min:
.9a25	a9 01		lda #$01			lda 	#1
.9a27	80 02		bra $9a2b			bra 	UnaryMinMaxMain
.9a29					Unary_Max:
.9a29	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a2b					UnaryMinMaxMain:
.9a2b	fa		plx				plx 								; get index on number stack
.9a2c	48		pha				pha 								; save comparator
.9a2d	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get the first value.
.9a30					_UMMMLoop:
.9a30	b1 30		lda ($30),y			lda 	(codePtr),y
.9a32	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a34	f0 22		beq $9a58			beq 	_UMMMDone
.9a36	20 26 8d	jsr $8d26			jsr 	CheckComma 					; must be a comma
.9a39	e8		inx				inx
.9a3a	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue
.9a3d	ca		dex				dex
.9a3e	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a41	e8		inx				inx
.9a42	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a45	e8		inx				inx
.9a46	20 ef 8d	jsr $8def			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a49	ca		dex				dex
.9a4a	ca		dex				dex
.9a4b	85 36		sta $36				sta 	zTemp0 						; save required result
.9a4d	68		pla				pla 								; get and save comparator
.9a4e	48		pha				pha
.9a4f	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a51	d0 dd		bne $9a30			bne 	_UMMMLoop
.9a53	20 5b 9a	jsr $9a5b			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a56	80 d8		bra $9a30			bra 	_UMMMLoop
.9a58					_UMMMDone:
.9a58	68		pla				pla 								; throw the comparator
.9a59	c8		iny				iny 								; skip )
.9a5a	60		rts				rts
.9a5b					ExpCopyAboveDown:
.9a5b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a5e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a61	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a64	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a67	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a6a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a6d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a70	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a73	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a76	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a79	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a7c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a80					Unary_Not:
.9a80	fa		plx				plx
.9a81	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; get integer
.9a84	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9a87	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; zero mantissa ?
.9a8a	f0 04		beq $9a90			beq 	_NotZero
.9a8c	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.9a8f	60		rts				rts
.9a90					_NotZero:
.9a90	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.9a93					_UNBad:
.9a93	4c 93 9f	jmp $9f93			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a96					Unary_Random:
.9a96	fa		plx				plx
.9a97	20 15 9b	jsr $9b15			jsr 	Random32Bit 				; get a random number
.9a9a	20 fa 9a	jsr $9afa			jsr 	URCopyToMantissa  			; put in mantissa
.9a9d	b1 30		lda ($30),y			lda 	(codePtr),y
.9a9f	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9aa1	f0 08		beq $9aab			beq 	_URNoModulus
.9aa3	e8		inx				inx
.9aa4	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9aa7	ca		dex				dex
.9aa8	20 13 8f	jsr $8f13			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9aab					_URNoModulus:
.9aab	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9aae	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ab1	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9ab4	60		rts				rts
.9ab5					Unary_Rnd:
.9ab5	fa		plx				plx
.9ab6	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; number to use.
.9ab9	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; closing bracket
.9abc	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9abf	f0 2b		beq $9aec			beq 	_URCopySeed
.9ac1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ac4	10 23		bpl $9ae9			bpl 	_URDontSeed
.9ac6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ac9	49 17		eor #$17			eor 	#$17
.9acb	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ace	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ad1	49 a5		eor #$a5			eor 	#$A5
.9ad3	8d 89 04	sta $0489			sta 	RandomSeed+1
.9ad6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9ad9	49 c2		eor #$c2			eor 	#$C2
.9adb	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ade	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ae1	49 9d		eor #$9d			eor 	#$9D
.9ae3	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ae6	20 15 9b	jsr $9b15			jsr 	Random32Bit
.9ae9					_URDontSeed:
.9ae9	20 15 9b	jsr $9b15			jsr 	Random32Bit 				; generate a number.
.9aec					_URCopySeed:
.9aec	20 fa 9a	jsr $9afa			jsr 	URCopyToMantissa 			; copy into mantissa
.9aef	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9af1	8d 28 04	sta $0428			sta 	NSExponent
.9af4	a9 08		lda #$08			lda 	#NSTFloat
.9af6	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9af9	60		rts				rts
.9afa					URCopyToMantissa:
.9afa	ad 88 04	lda $0488			lda 	RandomSeed+0
.9afd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b00	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b03	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b06	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b09	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b0c	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b0f	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b11	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b14	60		rts				rts
.9b15					Random32Bit:
.9b15	5a		phy				phy
.9b16	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b18	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b1b	d0 03		bne $9b20			bne 	_Random1
.9b1d	a8		tay				tay 								; if so do it 256 times
.9b1e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b20					_Random1:
.9b20	0a		asl a				asl 	a 							; LSFR RNG
.9b21	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b24	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b27	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b2a	90 02		bcc $9b2e			bcc 	_Random2
.9b2c	49 c5		eor #$c5			eor 	#$C5
.9b2e					_Random2:
.9b2e	88		dey				dey
.9b2f	d0 ef		bne $9b20			bne 	_Random1
.9b31	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b34	7a		ply				ply
.9b35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b36					SgnUnary:
.9b36	fa		plx				plx 								; restore stack pos
.9b37	20 23 9d	jsr $9d23			jsr 	EvaluateNumber 				; get a float or int
.9b3a	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9b3d	20 2a 9e	jsr $9e2a			jsr 	NSMIsZero 					; if zero
.9b40	f0 10		beq $9b52			beq 	_SGZero  					; return Int Zero
.9b42	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b45	48		pha				pha
.9b46	a9 01		lda #$01			lda 	#1 							; set to 1
.9b48	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9b4b	68		pla				pla
.9b4c	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b4e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b51	60		rts				rts
.9b52	20 fa 9d	jsr $9dfa	_SGZero:jsr 	NSMSetZero
.9b55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b56					ValUnary:
.9b56	fa		plx				plx 								; restore stack pos
.9b57	20 6c 9b	jsr $9b6c			jsr 	ValMainCode 				; do the main val() code
.9b5a	b0 01		bcs $9b5d			bcs 	_VUError 					; couldn't convert
.9b5c	60		rts				rts
.9b5d					_VUError:
.9b5d	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.9b60					IsValUnary:
.9b60	fa		plx				plx 								; restore stack pos
.9b61	20 6c 9b	jsr $9b6c			jsr 	ValMainCode 				; do the main val() code
.9b64	b0 03		bcs $9b69			bcs 	_VUBad
.9b66	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.9b69					_VUBad:
.9b69	4c b0 8d	jmp $8db0			jmp 	ReturnFalse
.9b6c					ValMainCode:
.9b6c	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.9b6f	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check right bracket present
.9b72	5a		phy				phy
.9b73	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b75	f0 17		beq $9b8e			beq 	_VMCFail2
.9b77	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b79	48		pha				pha 								; save first character
.9b7a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b7c	d0 01		bne $9b7f			bne 	_VMCStart
.9b7e	c8		iny				iny 								; skip over -
.9b7f					_VMCStart:
.9b7f	38		sec				sec 								; initialise first time round.
.9b80					_VMCNext:
.9b80	c8		iny				iny 								; pre-increment
.9b81	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b83	f0 0c		beq $9b91			beq 	_VMCSuccess 				; successful.
.9b85	20 a2 96	jsr $96a2			jsr 	EncodeNumber 				; send it to the number-builder
.9b88	90 03		bcc $9b8d			bcc 	_VMCFail 					; if failed, give up.
.9b8a	18		clc				clc 								; next time round, countinue
.9b8b	80 f3		bra $9b80			bra 	_VMCNext
.9b8d					_VMCFail:
.9b8d	68		pla				pla
.9b8e					_VMCFail2:
.9b8e	7a		ply				ply
.9b8f	38		sec				sec
.9b90	60		rts				rts
.9b91					_VMCSuccess:
.9b91	a9 00		lda #$00			lda 	#0 							; construct final
.9b93	20 a2 96	jsr $96a2			jsr 	EncodeNumber
.9b96	68		pla				pla
.9b97	c9 2d		cmp #$2d			cmp 	#"-"
.9b99	d0 03		bne $9b9e			bne 	_VMCNotNegative
.9b9b	20 a6 9d	jsr $9da6			jsr		NSMNegate
.9b9e					_VMCNotNegative:
.9b9e	7a		ply				ply
.9b9f	18		clc				clc
.9ba0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ba1					ChrUnary:
.9ba1	fa		plx				plx 								; restore stack pos
.9ba2	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger			; get value
.9ba5	48		pha				pha
.9ba6	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9ba9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9bab	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.9bae	68		pla				pla 								; write number to it
.9baf	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.9bb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bb3					SpcUnary:
.9bb3	fa		plx				plx 								; restore stack pos
.9bb4	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger			; get value
.9bb7	5a		phy				phy
.9bb8	48		pha				pha 								; save count
.9bb9	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.9bbc	7a		ply				ply 								; to do count in Y
.9bbd					_SpcLoop:
.9bbd	c0 00		cpy #$00			cpy 	#0
.9bbf	f0 08		beq $9bc9			beq 	_SpcExit
.9bc1	a9 20		lda #$20			lda 	#32
.9bc3	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.9bc6	88		dey				dey
.9bc7	80 f4		bra $9bbd			bra 	_SPCLoop
.9bc9					_SpcExit:
.9bc9	7a		ply				ply
.9bca	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.9bcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bce					Unary_Str:
.9bce	fa		plx				plx
.9bcf	20 23 9d	jsr $9d23			jsr 	EvaluateNumber  			; get number
.9bd2	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; closing bracket
.9bd5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bd7	20 f0 9b	jsr $9bf0			jsr 	ConvertNumberToString 		; do the conversion.
.9bda	a9 21		lda #$21			lda		#33 						; create buffer
.9bdc	20 51 a3	jsr $a351			jsr 	StringTempAllocate 			; allocate memory
.9bdf	da		phx				phx
.9be0	a2 00		ldx #$00			ldx 	#0
.9be2					_USCopy:
.9be2	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9be5	20 8f a3	jsr $a38f			jsr 	StringTempWrite
.9be8	e8		inx				inx
.9be9	bd 1b 06	lda $061b,x			lda 	DecimalBuffer,x
.9bec	d0 f4		bne $9be2			bne 	_USCopy
.9bee	fa		plx				plx
.9bef	60		rts				rts
.9bf0					ConvertNumberToString:
.9bf0	5a		phy				phy 								; save code position
.9bf1	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bf4	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bf7	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9bfa	10 0a		bpl $9c06			bpl 	_CNTSNotNegative
.9bfc	29 7f		and #$7f			and 	#$7F 						; make +ve
.9bfe	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c01	a9 2d		lda #$2d			lda 	#"-"
.9c03	20 6c 9c	jsr $9c6c			jsr 	WriteDecimalBuffer
.9c06					_CNTSNotNegative:
.9c06	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c09	f0 15		beq $9c20			beq 	_CNTSNotFloat
.9c0b	e8		inx				inx 								; round up
.9c0c	a9 01		lda #$01			lda 	#1
.9c0e	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9c11	ca		dex				dex
.9c12	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c15	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c18	a9 08		lda #$08			lda 	#NSTFloat
.9c1a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c1d	20 33 93	jsr $9333			jsr 	FloatAdd
.9c20					_CNTSNotFloat:
.9c20	20 4e 9c	jsr $9c4e			jsr 	MakePlusTwoString
.9c23	20 19 94	jsr $9419			jsr 	FloatFractionalPart 		; get the fractional part
.9c26	20 dd 94	jsr $94dd			jsr 	NSNormalise					; normalise , exit if zero
.9c29	f0 21		beq $9c4c			beq 	_CNTSExit
.9c2b	a9 2e		lda #$2e			lda 	#"."
.9c2d	20 6c 9c	jsr $9c6c			jsr 	WriteDecimalBuffer 			; write decimal place
.9c30					_CNTSDecimal:
.9c30	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c33	30 17		bmi $9c4c			bmi 	_CNTSExit
.9c35	e8		inx				inx 								; x 10.0
.9c36	a9 0a		lda #$0a			lda 	#10
.9c38	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.9c3b	a9 08		lda #$08			lda 	#NSTFloat
.9c3d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c40	ca		dex				dex
.9c41	20 a6 94	jsr $94a6			jsr 	FloatMultiply
.9c44	20 4e 9c	jsr $9c4e			jsr 	MakePlusTwoString
.9c47	20 19 94	jsr $9419			jsr 	FloatFractionalPart 		; get the fractional part
.9c4a	80 e4		bra $9c30			bra 	_CNTSDecimal 				; keep going.
.9c4c					_CNTSExit:
.9c4c	7a		ply				ply
.9c4d	60		rts				rts
.9c4e					MakePlusTwoString:
.9c4e	da		phx				phx
.9c4f	20 d1 9d	jsr $9dd1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c52	e8		inx				inx 								; access it
.9c53	e8		inx				inx
.9c54	20 7c 94	jsr $947c			jsr 	FloatIntegerPart 			; make it an integer
.9c57	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c59	20 5e 92	jsr $925e			jsr 	ConvertInt32
.9c5c	a2 00		ldx #$00			ldx	 	#0
.9c5e					_MPTSCopy:
.9c5e	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c61	20 6c 9c	jsr $9c6c			jsr 	WriteDecimalBuffer
.9c64	e8		inx				inx
.9c65	bd f9 05	lda $05f9,x			lda 	NumberBuffer,x
.9c68	d0 f4		bne $9c5e			bne 	_MPTSCopy
.9c6a	fa		plx				plx
.9c6b	60		rts				rts
.9c6c					WriteDecimalBuffer:
.9c6c	da		phx				phx
.9c6d	ae 95 04	ldx $0495			ldx 	dbOffset
.9c70	9d 1b 06	sta $061b,x			sta 	DecimalBuffer,x
.9c73	9e 1c 06	stz $061c,x			stz 	DecimalBuffer+1,x
.9c76	ee 95 04	inc $0495			inc 	dbOffset
.9c79	fa		plx				plx
.9c7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c7b					Unary_Left:
.9c7b	fa		plx				plx
.9c7c	18		clc				clc 								; only one parameter
.9c7d	20 f2 9c	jsr $9cf2			jsr 	SubstringInitial 			; set up.
.9c80	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c83	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c86	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c89	80 2c		bra $9cb7			bra 	SubstringMain
.9c8b					Unary_Right:
.9c8b	fa		plx				plx
.9c8c	18		clc				clc 								; only one parameter
.9c8d	20 f2 9c	jsr $9cf2			jsr 	SubstringInitial 			; set up.
.9c90	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c93	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c96	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c99	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9c9c	b0 02		bcs $9ca0			bcs 	_URNotUnderflow
.9c9e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ca0					_URNotUnderFlow:
.9ca0	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ca3	80 12		bra $9cb7			bra 	SubStringMain
.9ca5					Unary_Mid:
.9ca5	fa		plx				plx
.9ca6	38		sec				sec 								; two parameters
.9ca7	20 f2 9c	jsr $9cf2			jsr 	SubstringInitial 			; set up.
.9caa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cad	f0 05		beq $9cb4			beq 	_UMError
.9caf	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cb2	80 03		bra $9cb7			bra 	SubStringMain
.9cb4					_UMError:
.9cb4	4c 93 9f	jmp $9f93			jmp 	ArgumentError
.9cb7					SubStringMain:
.9cb7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cba	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cbd	b0 2d		bcs $9cec			bcs 	_SSMNull 					; if so, return an empty string.
.9cbf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cc2	f0 28		beq $9cec			beq 	_SSMNull 					; return empty string.
.9cc4	18		clc				clc 								; add the offset +1 to the address and
.9cc5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cc8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ccb	85 36		sta $36				sta 	zTemp0
.9ccd	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cd0	69 00		adc #$00			adc 	#0
.9cd2	85 37		sta $37				sta 	zTemp0+1
.9cd4					_SSMNoCarry:
.9cd4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cd7	20 51 a3	jsr $a351			jsr 	StringTempAllocate 			; allocate that many characters
.9cda	5a		phy				phy 								; save Y
.9cdb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cdd					_SSMCopy:
.9cdd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cdf	f0 09		beq $9cea			beq 	_SSMEString 				; no more to copy
.9ce1	20 8f a3	jsr $a38f			jsr 	StringTempWrite 			; and write it out.
.9ce4	c8		iny				iny
.9ce5	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9ce8	d0 f3		bne $9cdd			bne 	_SSMCopy
.9cea					_SSMEString:
.9cea	7a		ply				ply
.9ceb					_SSMExit:
.9ceb	60		rts				rts
.9cec					_SSMNull:
.9cec	a9 00		lda #$00			lda 	#0
.9cee	20 51 a3	jsr $a351			jsr 	StringTempAllocate
.9cf1	60		rts				rts
.9cf2					SubstringInitial:
.9cf2	da		phx				phx 								; save initial stack position
.9cf3	08		php				php 								; save carry on stack indicating 2 parameters
.9cf4	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get a string
.9cf7	5a		phy				phy 								; calculate length to exponent.
.9cf8	a0 ff		ldy #$ff			ldy 	#$FF
.9cfa					_SIFindLength:
.9cfa	c8		iny				iny
.9cfb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9cfd	d0 fb		bne $9cfa			bne 	_SIFindLength
.9cff	98		tya				tya
.9d00	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d03	7a		ply				ply
.9d04	e8		inx				inx
.9d05	20 26 8d	jsr $8d26			jsr 	CheckComma 					; comma next
.9d08	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get next parameter
.9d0b	28		plp				plp 								; is it the last parameter ?
.9d0c	90 07		bcc $9d15			bcc 	_SSIExit 					; if so, exit.
.9d0e	e8		inx				inx
.9d0f	20 26 8d	jsr $8d26			jsr 	CheckComma 					; comma next
.9d12	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get last parameter
.9d15					_SSIExit:
.9d15	fa		plx				plx
.9d16	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket 			; check closing bracket
.9d19	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d1a					EvaluateValue:
.9d1a	48		pha				pha
.9d1b	20 e6 92	jsr $92e6			jsr		EvaluateExpression 			; expression
.9d1e	20 04 96	jsr $9604			jsr 	Dereference					; derefernce it
.9d21	68		pla				pla
.9d22	60		rts				rts
.9d23					EvaluateNumber:
.9d23	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get a value
.9d26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d29	29 10		and #$10			and 	#NSBIsString
.9d2b	d0 16		bne $9d43			bne 	HelperTypeError
.9d2d	60		rts				rts
.9d2e					EvaluateString:
.9d2e	20 1a 9d	jsr $9d1a			jsr 	EvaluateValue 				; get a value
.9d31	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d34	29 10		and #$10			and 	#NSBIsString
.9d36	f0 0b		beq $9d43			beq 	HelperTypeError
.9d38					CopyAddressToTemp0:
.9d38	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d3b	85 36		sta $36				sta 	zTemp0
.9d3d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d40	85 37		sta $37				sta 	zTemp0+1
.9d42	60		rts				rts
.9d43					HelperTypeError:
.9d43	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.9d46					EvaluateInteger:
.9d46	20 23 9d	jsr $9d23			jsr 	EvaluateNumber
.9d49	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d4c	d0 0a		bne $9d58			bne 	HelperValueError 			; if not, it's a float.
.9d4e	60		rts				rts
.9d4f					EvaluateUnsignedInteger:
.9d4f	20 46 9d	jsr $9d46			jsr 	EvaluateInteger 			; check integer is +ve
.9d52	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d55	30 01		bmi $9d58			bmi 	HelperValueError
.9d57	60		rts				rts
.9d58					HelperValueError:
.9d58	4c 93 9f	jmp $9f93			jmp 	ArgumentError
.9d5b					Evaluate16BitInteger:
.9d5b	20 4f 9d	jsr $9d4f			jsr	 	EvaluateUnsignedInteger		; get integer
.9d5e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d61	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d64	d0 f2		bne $9d58			bne 	HelperValueError
.9d66	60		rts				rts
.9d67					Evaluate16BitIntegerSigned:
.9d67	20 46 9d	jsr $9d46			jsr	 	EvaluateInteger				; get integer
.9d6a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d6d	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d70	d0 e6		bne $9d58			bne 	HelperValueError
.9d72	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d75	10 03		bpl $9d7a			bpl 	_EISNotSigned
.9d77	20 af 9d	jsr $9daf			jsr 	NSMNegateMantissa
.9d7a					_EISNotSigned:
.9d7a	60		rts				rts
.9d7b					Evaluate8BitInteger:
.9d7b	20 4f 9d	jsr $9d4f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d7e	d0 d8		bne $9d58			bne 	HelperValueError
.9d80	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d83	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d86	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d89	d0 cd		bne $9d58			bne 	HelperValueError
.9d8b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d8f					Multiply8x8:
.9d8f	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d90	85 36		sta $36			  	sta 	zTemp0
.9d92	86 37		stx $37				stx 	zTemp0+1
.9d94	a9 00		lda #$00			lda 	#0
.9d96	a2 08		ldx #$08			ldx 	#8
.9d98					_M88Loop:
.9d98	90 03		bcc $9d9d			bcc 	_M88NoAdd
.9d9a	18		clc				clc
.9d9b	65 37		adc $37				adc 	zTemp0+1
.9d9d					_M88NoAdd:
.9d9d	6a		ror a				ror 	a
.9d9e	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9da0	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9da1	d0 f5		bne $9d98			bne 	_M88Loop
.9da3	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9da5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9da6					NSMNegate:
.9da6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9da9	49 80		eor #$80			eor 	#NSBIsNegative
.9dab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dae	60		rts				rts
.9daf					NSMNegateMantissa:
.9daf	38		sec				sec
.9db0	a9 00		lda #$00			lda 	#0
.9db2	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9db5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db8	a9 00		lda #$00			lda 	#0
.9dba	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dbd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dc0	a9 00		lda #$00			lda 	#0
.9dc2	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dc5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dc8	a9 00		lda #$00			lda 	#0
.9dca	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dcd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd0	60		rts				rts
.9dd1					NSMShiftUpTwo:
.9dd1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dd7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dda	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ddd	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9de0	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9de6	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9de9	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9dec	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9def	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df2	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9df5	60		rts				rts
.9df6					NSMSetZeroMantissaOnly:
.9df6	a9 00		lda #$00			lda 	#0
.9df8	80 08		bra $9e02			bra 	NSMSetMantissa
.9dfa					NSMSetZero:
.9dfa	a9 00		lda #$00			lda 	#0
.9dfc					NSMSetByte:
.9dfc	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9dff	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e02					NSMSetMantissa:
.9e02	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e05	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e08	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e0b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e0e	60		rts				rts
.9e0f					NSMShiftLeft:
.9e0f	18		clc				clc
.9e10					NSMRotateLeft:
.9e10	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e13	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e16	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e19	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e1c	60		rts				rts
.9e1d					NSMShiftRight:
.9e1d	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e20	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e23	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e26	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e29	60		rts				rts
.9e2a					NSMIsZero:
.9e2a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e2d	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e30	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e33	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e36	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e37					Assemble_ora:
.9e37	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e3a	01					.byte $01
.9e3b					Assemble_and:
.9e3b	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e3e	21					.byte $21
.9e3f					Assemble_eor:
.9e3f	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e42	41					.byte $41
.9e43					Assemble_adc:
.9e43	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e46	61					.byte $61
.9e47					Assemble_sta:
.9e47	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e4a	81					.byte $81
.9e4b					Assemble_lda:
.9e4b	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e4e	a1					.byte $a1
.9e4f					Assemble_cmp:
.9e4f	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e52	c1					.byte $c1
.9e53					Assemble_sbc:
.9e53	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e56	e1					.byte $e1
.9e57					Assemble_asl:
.9e57	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e5a	02					.byte $02
>9e5b	75					.byte $75
.9e5c					Assemble_rol:
.9e5c	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e5f	22					.byte $22
>9e60	75					.byte $75
.9e61					Assemble_lsr:
.9e61	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e64	42					.byte $42
>9e65	75					.byte $75
.9e66					Assemble_ror:
.9e66	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e69	62					.byte $62
>9e6a	75					.byte $75
.9e6b					Assemble_stx:
.9e6b	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e6e	82					.byte $82
>9e6f	50					.byte $50
.9e70					Assemble_ldx:
.9e70	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e73	a2					.byte $a2
>9e74	d0					.byte $d0
.9e75					Assemble_dec:
.9e75	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e78	c2					.byte $c2
>9e79	55					.byte $55
.9e7a					Assemble_inc:
.9e7a	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e7d	e2					.byte $e2
>9e7e	55					.byte $55
.9e7f					Assemble_stz:
.9e7f	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e82	60					.byte $60
>9e83	44					.byte $44
.9e84					Assemble_bit:
.9e84	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e87	20					.byte $20
>9e88	55					.byte $55
.9e89					Assemble_sty:
.9e89	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e8c	80					.byte $80
>9e8d	54					.byte $54
.9e8e					Assemble_ldy:
.9e8e	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e91	a0					.byte $a0
>9e92	d5					.byte $d5
.9e93					Assemble_cpy:
.9e93	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e96	c0					.byte $c0
>9e97	d4					.byte $d4
.9e98					Assemble_cpx:
.9e98	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e9b	e0					.byte $e0
>9e9c	d0					.byte $d0
.9e9d					Assemble_tsb:
.9e9d	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea0	00					.byte $00
>9ea1	50					.byte $50
.9ea2					Assemble_trb:
.9ea2	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea5	10					.byte $10
>9ea6	50					.byte $50
.9ea7					Assemble_jsr:
.9ea7	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eaa	14					.byte $14
>9eab	10					.byte $10
.9eac					Assemble_jmp:
.9eac	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9eaf	40					.byte $40
>9eb0	10					.byte $10
.9eb1					Assemble_bpl:
.9eb1	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eb4	10					.byte $10
.9eb5					Assemble_bmi:
.9eb5	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eb8	30					.byte $30
.9eb9					Assemble_bvc:
.9eb9	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ebc	50					.byte $50
.9ebd					Assemble_bvs:
.9ebd	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec0	70					.byte $70
.9ec1					Assemble_bcc:
.9ec1	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec4	90					.byte $90
.9ec5					Assemble_bcs:
.9ec5	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec8	b0					.byte $b0
.9ec9					Assemble_bne:
.9ec9	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ecc	d0					.byte $d0
.9ecd					Assemble_beq:
.9ecd	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed0	f0					.byte $f0
.9ed1					Assemble_bra:
.9ed1	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed4	80					.byte $80
.9ed5					Assemble_brk:
.9ed5	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ed8	00					.byte $00
.9ed9					Assemble_php:
.9ed9	20 14 81	jsr $8114		jsr	AssembleGroup4
>9edc	08					.byte $08
.9edd					Assemble_clc:
.9edd	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee0	18					.byte $18
.9ee1					Assemble_plp:
.9ee1	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee4	28					.byte $28
.9ee5					Assemble_sec:
.9ee5	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee8	38					.byte $38
.9ee9					Assemble_rti:
.9ee9	20 14 81	jsr $8114		jsr	AssembleGroup4
>9eec	40					.byte $40
.9eed					Assemble_pha:
.9eed	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef0	48					.byte $48
.9ef1					Assemble_cli:
.9ef1	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef4	58					.byte $58
.9ef5					Assemble_phy:
.9ef5	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef8	5a					.byte $5a
.9ef9					Assemble_rts:
.9ef9	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efc	60					.byte $60
.9efd					Assemble_pla:
.9efd	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f00	68					.byte $68
.9f01					Assemble_sei:
.9f01	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f04	78					.byte $78
.9f05					Assemble_ply:
.9f05	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f08	7a					.byte $7a
.9f09					Assemble_dey:
.9f09	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0c	88					.byte $88
.9f0d					Assemble_txa:
.9f0d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f10	8a					.byte $8a
.9f11					Assemble_tya:
.9f11	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f14	98					.byte $98
.9f15					Assemble_txs:
.9f15	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f18	9a					.byte $9a
.9f19					Assemble_tay:
.9f19	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1c	a8					.byte $a8
.9f1d					Assemble_tax:
.9f1d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f20	aa					.byte $aa
.9f21					Assemble_clv:
.9f21	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f24	b8					.byte $b8
.9f25					Assemble_tsx:
.9f25	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f28	ba					.byte $ba
.9f29					Assemble_iny:
.9f29	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2c	c8					.byte $c8
.9f2d					Assemble_dex:
.9f2d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f30	ca					.byte $ca
.9f31					Assemble_cld:
.9f31	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f34	d8					.byte $d8
.9f35					Assemble_phx:
.9f35	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f38	da					.byte $da
.9f39					Assemble_stp:
.9f39	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3c	db					.byte $db
.9f3d					Assemble_inx:
.9f3d	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f40	e8					.byte $e8
.9f41					Assemble_nop:
.9f41	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f44	ea					.byte $ea
.9f45					Assemble_sed:
.9f45	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f48	f8					.byte $f8
.9f49					Assemble_plx:
.9f49	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f4c	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f4d					DecimalScalarTable:
>9f4d	66 66 66 66				.dword $66666666 ; 0.1
>9f51	de					.byte $de
>9f52	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f56	db					.byte $db
>9f57	4c 37 89 41				.dword $4189374c ; 0.001
>9f5b	d8					.byte $d8
>9f5c	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f60	d4					.byte $d4
>9f61	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f65	d1					.byte $d1
>9f66	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f6a	ce					.byte $ce
>9f6b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f6f	ca					.byte $ca
>9f70	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f74	c7					.byte $c7
>9f75	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f79	c4					.byte $c4
>9f7a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f7e	c0					.byte $c0
>9f7f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f83	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f84					SyntaxError:
.9f84	a9 02		lda #$02		lda	#2
.9f86	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f89					RangeError:
.9f89	a9 04		lda #$04		lda	#4
.9f8b	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f8e					TypeError:
.9f8e	a9 05		lda #$05		lda	#5
.9f90	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f93					ArgumentError:
.9f93	a9 07		lda #$07		lda	#7
.9f95	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f98					NotDoneError:
.9f98	a9 0c		lda #$0c		lda	#12
.9f9a	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.9f9d					ErrorText:
>9f9d	42 72 65 61 6b 00			.text	"Break",0
>9fa3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fab	72 72 6f 72 00
>9fb0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fb8	20 62 79 20 7a 65 72 6f 00
>9fc1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fc9	61 6e 67 65 00
>9fce	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fd6	6d 61 74 63 68 00
>9fdc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fe4	65 6d 6f 72 79 00
>9fea	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ff2	61 72 67 75 6d 65 6e 74 00
>9ffb	53 74 6f 70 00				.text	"Stop",0
>a000	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a008	6f 6f 20 6c 6f 6e 67 00
>a010	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a018	6e 20 66 61 69 6c 65 64 00
>a021	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a029	61 74 61 00
>a02d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a035	65 6e 74 65 64 00
>a03b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a043	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a04f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a057	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a064	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a06c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a079	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a081	68 6f 75 74 20 57 68 69 6c 65 00
>a08c	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a094	68 6f 75 74 20 46 6f 72 00
>a09d	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0a5	61 63 6b 20 66 75 6c 6c 00
>a0ae	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0b6	75 63 74 75 72 65 00
>a0bd	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0c5	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0d2	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0da	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0e8	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0f0	7a 65 00
>a0f3	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a0fb	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a103	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3118."
>a10b	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>a11b	32 32 2e 20 42 75 69 6c 64 20 33 31 31 38 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a12a					MemoryDeleteLine:
.a12a	20 49 a1	jsr $a149			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a12d	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a12f	a8		tay				tay
.a130					_MDDLLoop:
.a130	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a132	92 30		sta ($30)			sta 	(codePtr)
.a134	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a136	c5 3a		cmp $3a				cmp 	zTemp2
.a138	d0 07		bne $a141			bne 	_MDLDLNext
.a13a	a5 31		lda $31				lda 	codePtr+1
.a13c	c5 3b		cmp $3b				cmp 	zTemp2+1
.a13e	d0 01		bne $a141			bne 	_MDLDLNext
.a140					_MDDLExit:
.a140	60		rts				rts
.a141					_MDLDLNext:
.a141	e6 30		inc $30				inc 	codePtr						; next byte
.a143	d0 eb		bne $a130			bne 	_MDDLLoop
.a145	e6 31		inc $31				inc 	codePtr+1
.a147	80 e7		bra $a130			bra 	_MDDLLoop
.a149					IMemoryFindEnd:
.a149	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a14b	85 3a		sta $3a				sta 	0+zTemp2
.a14d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a14f	85 3b		sta $3b				sta 	1+zTemp2
.a151					_MDLFELoop:
.a151	b2 3a		lda ($3a)			lda 	(zTemp2)
.a153	f0 0b		beq $a160			beq 	_MDLFEExit
.a155	18		clc				clc
.a156	65 3a		adc $3a				adc 	zTemp2
.a158	85 3a		sta $3a				sta 	zTemp2
.a15a	90 f5		bcc $a151			bcc 	_MDLFELoop
.a15c	e6 3b		inc $3b				inc 	zTemp2+1
.a15e	80 f1		bra $a151			bra 	_MDLFELoop
.a160					_MDLFEExit:
.a160	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a161					MemoryInsertLine:
.a161	08		php				php
.a162	20 49 a1	jsr $a149			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a165	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a167	1a		inc a				inc 	a
.a168	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a16a	b0 36		bcs $a1a2			bcs 	_MDLIError
.a16c	28		plp				plp
.a16d	90 08		bcc $a177			bcc 	_MDLIFound
.a16f	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a171	85 30		sta $30				sta 	codePtr
.a173	a5 3b		lda $3b				lda 	zTemp2+1
.a175	85 31		sta $31				sta 	codePtr+1
.a177					_MDLIFound:
.a177	ad a8 04	lda $04a8			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a17a	a8		tay				tay
.a17b					_MDLIInsert:
.a17b	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a17d	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a17f	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a181	c5 3a		cmp $3a				cmp 	zTemp2
.a183	d0 06		bne $a18b			bne 	_MDLINext
.a185	a5 31		lda $31				lda 	codePtr+1
.a187	c5 3b		cmp $3b				cmp 	zTemp2+1
.a189	f0 0a		beq $a195			beq 	_MDLIHaveSpace
.a18b					_MDLINext:
.a18b	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a18d	d0 02		bne $a191			bne 	_MDLINoBorrow
.a18f	c6 3b		dec $3b				dec 	zTemp2+1
.a191					_MDLINoBorrow:
.a191	c6 3a		dec $3a				dec 	zTemp2
.a193	80 e6		bra $a17b			bra 	_MDLIInsert
.a195					_MDLIHaveSpace:
.a195	ac a8 04	ldy $04a8			ldy 	tokenOffset 				; bytes to copy
.a198	88		dey				dey 								; from offset-1 to 0
.a199					_MDLICopy:
.a199	b9 a8 04	lda $04a8,y			lda 	tokenOffset,y
.a19c	91 30		sta ($30),y			sta 	(codePtr),y
.a19e	88		dey				dey
.a19f	10 f8		bpl $a199			bpl 	_MDLICopy
.a1a1	60		rts				rts
.a1a2					_MDLIError:
.a1a2	a9 06		lda #$06		lda	#6
.a1a4	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a1a7					MDLAppendLine:
.a1a7	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1a9	85 36		sta $36				sta 	zTemp0
.a1ab	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ad	85 38		sta $38				sta 	0+zTemp1
.a1af	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1b1	85 39		sta $39				sta 	1+zTemp1
.a1b3	b2 38		lda ($38)			lda 	(zTemp1)
.a1b5	d0 0a		bne $a1c1			bne 	_MDLANoInitialise
.a1b7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1b9	8d 2b 06	sta $062b			sta 	0+AppendPointer
.a1bc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1be	8d 2c 06	sta $062c			sta 	1+AppendPointer
.a1c1					_MDLANoInitialise:
.a1c1	18		clc				clc
.a1c2	ad 2b 06	lda $062b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1c5	85 38		sta $38				sta 	zTemp1
.a1c7	72 36		adc ($36)			adc 	(zTemp0)
.a1c9	8d 2b 06	sta $062b			sta 	AppendPointer
.a1cc	ad 2c 06	lda $062c			lda 	AppendPointer+1
.a1cf	85 39		sta $39				sta 	zTemp1+1
.a1d1	69 00		adc #$00			adc 	#0
.a1d3	8d 2c 06	sta $062c			sta 	AppendPointer+1
.a1d6	a0 00		ldy #$00			ldy 	#0
.a1d8					_MDLACopy:
.a1d8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1da	91 38		sta ($38),y			sta 	(zTemp1),y
.a1dc	c8		iny				iny
.a1dd	98		tya				tya
.a1de	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1e0	d0 f6		bne $a1d8			bne 	_MDLACopy
.a1e2	a9 00		lda #$00			lda 	#0 							; end of program.
.a1e4	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e6	60		rts				rts
.062b					AppendPointer:
>062b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1e7					MemoryNew:
.a1e7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1e9	85 30		sta $30				sta 	codePtr
.a1eb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1ed	85 31		sta $31				sta 	codePtr+1
.a1ef	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1f1	92 30		sta ($30)			sta 	(codePtr)
.a1f3	60		rts				rts
.a1f4					MemoryInline:
.a1f4	98		tya				tya 								; put address into stack,x
.a1f5	18		clc				clc
.a1f6	65 30		adc $30				adc 	codePtr
.a1f8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1fb	a5 31		lda $31				lda 	codePtr+1
.a1fd	69 00		adc #$00			adc 	#0
.a1ff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a202	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a205	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a208	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a209					MemorySearch:
.a209	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a20b	86 37		stx $37				stx 	zTemp0+1
.a20d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a20f	85 30		sta $30				sta 	codePtr
.a211	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a213	85 31		sta $31				sta 	codePtr+1
.a215					_MTAXLoop:
.a215	b2 30		lda ($30)			lda 	(codePtr)
.a217	18		clc				clc
.a218	f0 21		beq $a23b			beq 	_MTAXExit 					; reached end, exit with CC.
.a21a	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a21c	b1 30		lda ($30),y			lda 	(codePtr),y
.a21e	38		sec				sec
.a21f	e5 36		sbc $36				sbc 	zTemp0
.a221	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a223	c8		iny				iny 								; do the MSB
.a224	b1 30		lda ($30),y			lda 	(codePtr),y
.a226	e5 37		sbc $37				sbc 	zTemp0+1
.a228	05 38		ora $38				ora 	zTemp1
.a22a	f0 0f		beq $a23b			beq 	_MTAXExit	 				; found
.a22c	b0 0d		bcs $a23b			bcs 	_MTAXExit 					; current < required exit
.a22e	18		clc				clc
.a22f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a231	65 30		adc $30				adc 	codePtr
.a233	85 30		sta $30				sta 	codePtr
.a235	90 02		bcc $a239			bcc 	_CREExit
.a237	e6 31		inc $31				inc 	codePtr+1
.a239					_CREExit:
.a239	80 da		bra $a215			bra 	_MTAXLoop
.a23b					_MTAXExit:
.a23b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a23c					StackPushByte:
.a23c	48		pha				pha 								; save byte
.a23d	a5 34		lda $34				lda 	BasicStack
.a23f	d0 09		bne $a24a			bne 	_SPBNoBorrow
.a241	c6 35		dec $35				dec 	BasicStack+1
.a243	48		pha				pha
.a244	a5 35		lda $35				lda 	BasicStack+1
.a246	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a248	90 06		bcc $a250			bcc 	_SPBMemory
.a24a					_SPBNoBorrow:
.a24a	c6 34		dec $34				dec 	BasicStack
.a24c	68		pla				pla 								; get back and write
.a24d	92 34		sta ($34)			sta 	(BasicStack)
.a24f	60		rts				rts
.a250					_SPBMemory:
.a250	a9 12		lda #$12		lda	#18
.a252	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a255					StackPopByte:
.a255	b2 34		lda ($34)			lda 	(BasicStack)
.a257	e6 34		inc $34				inc 	BasicStack
.a259	d0 02		bne $a25d			bne 	_SPBNoCarry
.a25b	e6 35		inc $35				inc 	BasicStack+1
.a25d					_SPBNoCarry:
.a25d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a25e					StackOpen:
.a25e	48		pha				pha 								; save frame byte
.a25f	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a261	0a		asl a				asl 	a 							; claim twice this for storage
.a262	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a264	38		sec				sec 								; so basically subtracting from
.a265	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a267	85 34		sta $34				sta 	basicStack
.a269	b0 08		bcs $a273			bcs 	_SONoBorrow
.a26b	c6 35		dec $35				dec 	basicStack+1
.a26d	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a26f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a271	90 04		bcc $a277			bcc 	_SOMemory
.a273					_SONoBorrow:
.a273	68		pla				pla 								; get marker back and write at TOS
.a274	92 34		sta ($34)			sta 	(basicStack)
.a276	60		rts				rts
.a277					_SOMemory:
.a277	a9 12		lda #$12		lda	#18
.a279	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a27c					StackClose:
.a27c	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a27e	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a280	0a		asl a				asl 	a 							; claim twice this.
.a281	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a283	85 34		sta $34				sta 	basicStack
.a285	90 02		bcc $a289			bcc 	_SCExit
.a287	e6 35		inc $35				inc 	basicStack+1
.a289					_SCExit:
.a289	60		rts				rts
.a28a					StackCheckFrame:
.a28a	48		pha				pha
.a28b					_StackRemoveLocals:
.a28b	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a28d	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a28f	b0 05		bcs $a296			bcs 	_SCNoLocal
.a291	20 02 88	jsr $8802			jsr 	LocalPopValue
.a294	80 f5		bra $a28b			bra 	_StackRemoveLocals
.a296					_SCNoLocal:
.a296	68		pla				pla
.a297	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a299	29 f0		and #$f0			and 	#$F0 						; check type bits
.a29b	d0 01		bne $a29e			bne 	_SCFError 					; different, we have structures mixed up
.a29d	60		rts				rts
.a29e					_SCFError:
.a29e	8a		txa				txa 								; report error X
.a29f	4c 37 8d	jmp $8d37			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a2a2					STKSaveCodePosition:
.a2a2	5a		phy				phy
.a2a3	98		tya				tya 								; save Y
.a2a4	a0 05		ldy #$05			ldy 	#5
.a2a6	91 34		sta ($34),y			sta 	(basicStack),y
.a2a8	88		dey				dey 								; save Code Pointer
.a2a9					_STKSaveLoop:
.a2a9	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a2ac	91 34		sta ($34),y			sta 	(basicStack),y
.a2ae	88		dey				dey
.a2af	d0 f8		bne $a2a9			bne 	_STKSaveLoop
.a2b1	7a		ply				ply
.a2b2	60		rts				rts
.a2b3					STKLoadCodePosition:
.a2b3	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a2b5					_STKLoadLoop:
.a2b5	b1 34		lda ($34),y			lda 	(basicStack),y
.a2b7	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a2ba	c8		iny				iny
.a2bb	c0 05		cpy #$05			cpy 	#5
.a2bd	d0 f6		bne $a2b5			bne 	_STKLoadLoop
.a2bf	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2c1	a8		tay				tay
.a2c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2c3					StackReset:
.a2c3	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2c5	85 34		sta $34				sta 	0+basicStack
.a2c7	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2c9	85 35		sta $35				sta 	1+basicStack
.a2cb	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2cd	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a2d0					StringConcrete:
.a2d0	5a		phy				phy 								; save position on stack
.a2d1	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a2d4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a2d7	85 38		sta $38				sta 	zTemp1
.a2d9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2dc	85 39		sta $39				sta 	zTemp1+1
.a2de	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a2e0					_SALength:
.a2e0	c8		iny				iny
.a2e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.a2e3	d0 fb		bne $a2e0			bne 	_SALength
.a2e5	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a2e7	b0 3f		bcs $a328			bcs 	_SALengthError
.a2e9	98		tya				tya 				 				; length of the new string
.a2ea	18		clc				clc
.a2eb	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a2ed	90 02		bcc $a2f1			bcc 	_SAHaveLength
.a2ef	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a2f1					_SAHaveLength:
.a2f1	48		pha				pha 								; save length.
.a2f2	38		sec				sec
.a2f3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a2f5	6d 8e 04	adc $048e			adc 	StringMemory
.a2f8	8d 8e 04	sta $048e			sta 	StringMemory
.a2fb	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a2fd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a300	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a302	6d 8f 04	adc $048f			adc 	StringMemory+1
.a305	8d 8f 04	sta $048f			sta 	StringMemory+1
.a308	85 3b		sta $3b				sta 	zTemp2+1
.a30a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a30d	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a30e	38		sec				sec
.a30f	e9 03		sbc #$03			sbc 	#3
.a311	92 3a		sta ($3a)			sta 	(zTemp2)
.a313	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a315	a0 01		ldy #$01			ldy 	#1
.a317	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a319					_SACopyNewString:
.a319	a0 00		ldy #$00			ldy 	#0
.a31b					_SACopyNSLoop:
.a31b	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a31d	c8		iny				iny 								; write two on in string storage
.a31e	c8		iny				iny
.a31f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a321	88		dey				dey 								; this makes it one one.
.a322	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a324	d0 f5		bne $a31b			bne 	_SACopyNSLoop
.a326	7a		ply				ply
.a327	60		rts				rts
.a328					_SALengthError:
.a328	a9 09		lda #$09		lda	#9
.a32a	4c 37 8d	jmp $8d37		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a32d					StringSystemInitialise:
.a32d	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a32f	8d 8e 04	sta $048e			sta 	0+StringMemory
.a332	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a334	8d 8f 04	sta $048f			sta 	1+StringMemory
.a337	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a33a	60		rts				rts
.a33b					StringSpaceInitialise:
.a33b	20 c3 99	jsr $99c3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a33e	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a340	8d 90 04	sta $0490			sta 	StringInitialised
.a343	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a346	8d 91 04	sta $0491			sta 	StringTempPointer
.a349	ad 8f 04	lda $048f			lda 	StringMemory+1
.a34c	3a		dec a				dec 	a
.a34d	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a350	60		rts				rts
.a351					StringTempAllocate:
.a351	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a353	b0 35		bcs $a38a			bcs 	_STALength
.a355	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a358	30 05		bmi $a35f			bmi 	_STAAllocate
.a35a	48		pha				pha 								; save value to subtract.
.a35b	20 3b a3	jsr $a33b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a35e	68		pla				pla 								; restore it
.a35f					_STAAllocate:
.a35f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a361	18		clc				clc  								; deliberate allows one more
.a362	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a365	8d 91 04	sta $0491			sta 	StringTempPointer
.a368	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a36b	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a36d	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a370	69 ff		adc #$ff			adc 	#$FF
.a372	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a375	85 3d		sta $3d				sta 	zsTemp+1
.a377	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a37a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a37d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a380	a9 10		lda #$10			lda 	#NSTString
.a382	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a385	a9 00		lda #$00			lda 	#0 							; clear the target string
.a387	92 3c		sta ($3c)			sta 	(zsTemp)
.a389	60		rts				rts
.a38a					_STALength:
.a38a	a9 09		lda #$09		lda	#9
.a38c	4c 37 8d	jmp $8d37		jmp	ErrorHandler
.a38f					StringTempWrite:
.a38f	48		pha				pha
.a390	92 3c		sta ($3c)			sta 	(zsTemp)
.a392	e6 3c		inc $3c				inc 	zsTemp
.a394	d0 02		bne $a398			bne 	_STWNoCarry
.a396	e6 3d		inc $3d				inc 	zsTemp+1
.a398					_STWNoCarry:
.a398	a9 00		lda #$00			lda 	#0
.a39a	92 3c		sta ($3c)			sta 	(zsTemp)
.a39c	68		pla				pla
.a39d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
=0					CONBlack = 0
=1					CONWhite = 1
=2					CONRed = 2
=3					CONCyan = 3
=4					CONPurple = 4
=5					CONGreen = 5
=6					CONBlue = 6
=7					CONYellow = 7
=8					CONOrange = 8
=9					CONBrown = 9
=10					CONYellowGreen = 10
=11					CONRosa = 11
=12					CONBlueGreen = 12
=13					CONLightBlue = 13
=14					CONPink = 14
=15					CONLightGreen = 15
=7					CONForeground = CONYellow
=6					CONBackground = CONBlue
=12					CLINumber = CONBlueGreen
=3					CLIToken = CONCyan
=13					CLIConstant = CONLightBlue
=10					CLIIdentifier = CONYellowGreen
=7					CLIPunctuation = CONYellow
=1					CLIData = CONWhite
.a39e					UnaryEvent:
.a39e	fa		plx				plx
.a39f	20 12 a7	jsr $a712			jsr 	TimerToStackX 				; timer in +0
.a3a2	e8		inx				inx  								; put reference into +1
.a3a3	20 c0 97	jsr $97c0			jsr 	EvaluateTerm
.a3a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a3a9	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a3ab	d0 57		bne $a404			bne 	_UEType
.a3ad	e8		inx				inx 								; put the step in +2
.a3ae	20 26 8d	jsr $8d26			jsr 	CheckComma
.a3b1	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.a3b4	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a3b7	ca		dex				dex
.a3b8	ca		dex				dex
.a3b9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a3bc	85 36		sta $36				sta 	zTemp0
.a3be	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3c1	85 37		sta $37				sta 	zTemp0+1
.a3c3	5a		phy				phy
.a3c4	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a3c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3c8	30 36		bmi $a400			bmi 	_UEFalse 					; exit if signed.
.a3ca	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a3cc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3cf	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3d1	c8		iny				iny
.a3d2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3d5	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3d7	c8		iny				iny
.a3d8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3db	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3dd	90 21		bcc $a400			bcc 	_UEFalse 					; no, return FALSE.
.a3df	18		clc				clc
.a3e0	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a3e2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3e5	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a3e8	91 36		sta ($36),y			sta 	(zTemp0),y
.a3ea	c8		iny				iny
.a3eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3ee	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a3f1	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f3	c8		iny				iny
.a3f4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3f7	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a3fa	91 36		sta ($36),y			sta 	(zTemp0),y
.a3fc	7a		ply				ply
.a3fd	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.a400					_UEFalse:
.a400	7a		ply				ply 								; restore Y
.a401	4c b0 8d	jmp $8db0			jmp 	ReturnFalse 				; and return False
.a404					_UEType:
.a404	4c 8e 9f	jmp $9f8e			jmp 	TypeError
.a407					RectangleCommand:
.a407	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a409	80 02		bra $a40d			bra 	ShapeDrawCmd
.a40b					CircleCommand:
.a40b	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a40d					ShapeDrawCmd:
.a40d	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a410					ShapeDraw:
.a410	0d 2e 06	ora $062e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a413	4c 8f a4	jmp $a48f			jmp 	ExecuteGraphicCommand	 	; and complete
.a416					SpriteCommand:
.a416	a2 00		ldx #$00			ldx 	#0
.a418	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get image number.
.a41b	5a		phy				phy
.a41c	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a41e	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a421	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a423	b0 0d		bcs $a432			bcs 	_SCRange
.a425	a0 ff		ldy #$ff			ldy 	#255
.a427	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a42a	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a42c	7a		ply				ply
.a42d	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a430	80 5d		bra $a48f			bra 	ExecuteGraphicCommand
.a432					_SCRange:
.a432	4c 89 9f	jmp $9f89			jmp 	RangeError
.a435					ImageCommand:
.a435	a2 00		ldx #$00			ldx 	#0
.a437	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get image number.
.a43a	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a43d					ImageRunDraw:
.a43d	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a43f	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a442	ad 34 06	lda $0634			lda 	gxDrawScale
.a445	0a		asl a				asl 	a
.a446	0a		asl a				asl 	a
.a447	0a		asl a				asl 	a
.a448	a8		tay				tay
.a449	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a44b	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a44e	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a451	60		rts				rts
.a452					TextCommand:
.a452	a2 00		ldx #$00			ldx 	#0
.a454	20 2e 9d	jsr $9d2e			jsr 	EvaluateString 				; get text
.a457	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a45a					TextRunDraw:
.a45a	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a45c	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a45f	a0 00		ldy #$00			ldy 	#0
.a461					_IRDLoop:
.a461	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a464	85 37		sta $37				sta 	zTemp0+1
.a466	ad 08 04	lda $0408			lda 	NSMantissa0
.a469	85 36		sta $36				sta 	zTemp0
.a46b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a46d	f0 13		beq $a482			beq 	_IRDExit
.a46f	5a		phy				phy									; save string pos
.a470	48		pha				pha 								; save char
.a471	ad 34 06	lda $0634			lda 	gxDrawScale 				; get scale
.a474	0a		asl a				asl 	a
.a475	0a		asl a				asl 	a
.a476	0a		asl a				asl 	a
.a477	a8		tay				tay
.a478	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a47a	fa		plx				plx 								; char to draw
.a47b	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a47e	7a		ply				ply 								; restore string pos
.a47f	c8		iny				iny
.a480	90 df		bcc $a461			bcc 	_IRDLoop 					; go back if no error.
.a482					_IRDExit:
.a482	60		rts				rts
.a483					PlotCommand:
.a483	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a485	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a488	80 05		bra $a48f			bra 	ExecuteGraphicCommand
.a48a					LineCommand:
.a48a	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a48c	20 9b a4	jsr $a49b			jsr 	RunGraphicsCommand
.a48f					ExecuteGraphicCommand:
.a48f	0d 2d 06	ora $062d			ora 	gxCommandID 				; make a full command
.a492	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw 				; draw it and exit
.a495	b0 01		bcs $a498			bcs 	_EGCError
.a497	60		rts				rts
.a498					_EGCError:
.a498	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.a49b					RunGraphicsCommand:
.a49b	8d 2d 06	sta $062d			sta 	gxCommandID					; save TODO graphics command.
.a49e	68		pla				pla 								; pop handler address
.a49f	fa		plx				plx
.a4a0	1a		inc a				inc 	a
.a4a1	d0 01		bne $a4a4			bne 	_RGINoCarry
.a4a3	e8		inx				inx
.a4a4					_RGINoCarry:
.a4a4	8d 32 06	sta $0632			sta 	GXHandler
.a4a7	8e 33 06	stx $0633			stx 	GXHandler+1
.a4aa					_RGICommandLoop:
.a4aa	b1 30		lda ($30),y			lda 	(codePtr),y
.a4ac	c8		iny				iny
.a4ad	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a4af	f0 53		beq $a504			beq 	_RGI_To
.a4b1	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a4b3	f0 55		beq $a50a			beq 	_RGI_Here
.a4b5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a4b7	f0 3d		beq $a4f6			beq 	_RGI_Exit
.a4b9	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a4bb	f0 39		beq $a4f6			beq 	_RGI_Exit
.a4bd	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a4bf	f0 3e		beq $a4ff			beq 	_RGI_Frame
.a4c1	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a4c3	f0 33		beq $a4f8			beq 	_RGI_Solid
.a4c5	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a4c7	f0 4b		beq $a514			beq 	_RGI_By
.a4c9	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a4cb	f0 17		beq $a4e4			beq 	_RGI_Move2
.a4cd	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a4cf	f0 65		beq $a536			beq 	_RGI_Dim
.a4d1	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a4d3	f0 78		beq $a54d			beq 	_RGI_Colour
.a4d5	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a4d7	f0 74		beq $a54d			beq 	_RGI_Colour
.a4d9	ae 2d 06	ldx $062d			ldx 	gxCommandID
.a4dc	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a4de	d0 03		bne $a4e3			bne 	_RGI_Move 					; move
.a4e0	4c 77 a5	jmp $a577			jmp		_RGI_SpriteInstructions
.a4e3					_RGI_Move:
.a4e3	88		dey				dey 								; unpick get.
.a4e4					_RGI_Move2:
.a4e4	20 9d a5	jsr $a59d			jsr 	GCGetCoordinatePair 		; move to here
.a4e7	20 c4 a5	jsr $a5c4			jsr 	GCCopyPairToStore 			; save
.a4ea	5a		phy				phy
.a4eb	20 ba a5	jsr $a5ba			jsr 	GCLoadAXY 					; load in
.a4ee	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4f0	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a4f3	7a		ply				ply
.a4f4	80 b4		bra $a4aa			bra 	_RGICommandLoop 			; and go round
.a4f6					_RGI_Exit:
.a4f6	88		dey				dey 								; unpick : / EOL
.a4f7	60		rts				rts
.a4f8					_RGI_Solid:
.a4f8	a9 02		lda #$02			lda 	#2
.a4fa	8d 2e 06	sta $062e			sta 	gxFillSolid
.a4fd	80 ab		bra $a4aa			bra 	_RGICommandLoop
.a4ff					_RGI_Frame:
.a4ff	9c 2e 06	stz $062e			stz 	gxFillSolid
.a502	80 a6		bra $a4aa			bra 	_RGICommandLoop
.a504					_RGI_To:
.a504	20 9d a5	jsr $a59d			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a507	20 c4 a5	jsr $a5c4			jsr 	GCCopyPairToStore
.a50a					_RGI_Here:
.a50a	5a		phy				phy
.a50b	20 ba a5	jsr $a5ba			jsr 	GCLoadAXY 					; load it into AXY
.a50e	20 74 a5	jsr $a574			jsr 	_RGICallHandler 			; go do whatever it is.
.a511	7a		ply				ply
.a512	80 96		bra $a4aa			bra 	_RGICommandLoop 			; and go round
.a514					_RGI_By:
.a514	20 aa a5	jsr $a5aa			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a517	18		clc				clc
.a518	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a51b	6d 2f 06	adc $062f			adc 	gxxPos
.a51e	8d 2f 06	sta $062f			sta 	gxXPos
.a521	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a524	6d 30 06	adc $0630			adc 	gxxPos+1
.a527	8d 30 06	sta $0630			sta 	gxXPos+1
.a52a	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a52d	18		clc				clc
.a52e	6d 31 06	adc $0631			adc 	gxYPos
.a531	8d 31 06	sta $0631			sta 	gxYPos
.a534	80 d4		bra $a50a			bra 	_RGI_Here
.a536					_RGI_Dim:
.a536	a2 01		ldx #$01			ldx	 	#1
.a538	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a53b	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a53e	c9 00		cmp #$00			cmp 	#0
.a540	f0 2f		beq $a571			beq 	_RGIRange
.a542	c9 09		cmp #$09			cmp 	#8+1
.a544	b0 2b		bcs $a571			bcs		_RGIRange
.a546	3a		dec a				dec 	a
.a547	8d 34 06	sta $0634			sta 	gxDrawScale
.a54a	4c aa a4	jmp $a4aa			jmp 	_RGICommandLoop
.a54d					_RGI_Colour:
.a54d	a2 01		ldx #$01			ldx 	#1 							; colour
.a54f	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a552	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a554	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero
.a557	b1 30		lda ($30),y			lda 	(codePtr),y
.a559	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a55b	d0 04		bne $a561			bne 	_RGICDefaultMode
.a55d	c8		iny				iny
.a55e	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a561					_RGICDefaultMode:
.a561	5a		phy				phy
.a562	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a564	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a567	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a56a	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a56d	7a		ply				ply
.a56e	4c aa a4	jmp $a4aa			jmp 	_RGICommandLoop 			; and go round
.a571					_RGIRange:
.a571	4c 89 9f	jmp $9f89			jmp 	RangeError
.a574					_RGICallHandler:
.a574	6c 32 06	jmp ($0632)			jmp 	(GXHandler)
.a577					_RGI_SpriteInstructions:
.a577	c9 be		cmp #$be			cmp 	#KWD_OFF
.a579	f0 07		beq $a582			beq 	_RGISpriteOff
.a57b	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a57d	f0 13		beq $a592			beq 	_RGISetImage
.a57f	4c e3 a4	jmp $a4e3			jmp 	_RGI_Move
.a582					_RGISpriteOff:
.a582	5a		phy				phy
.a583	a0 01		ldy #$01			ldy 	#1
.a585	a2 00		ldx #$00			ldx 	#0
.a587					_RGIDoCommandLoop:
.a587	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a589	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a58c	7a		ply				ply
.a58d	b0 e2		bcs $a571			bcs 	_RGIRange
.a58f	4c aa a4	jmp $a4aa			jmp 	_RGICommandLoop
.a592					_RGISetImage:
.a592	a2 01		ldx #$01			ldx 	#1
.a594	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger
.a597	5a		phy				phy
.a598	aa		tax				tax
.a599	a0 00		ldy #$00			ldy 	#0
.a59b	80 ea		bra $a587			bra 	_RGIDoCommandLoop
.a59d					GCGetCoordinatePair:
.a59d	a2 01		ldx #$01			ldx 	#1
.a59f	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.a5a2	20 26 8d	jsr $8d26			jsr 	CheckComma
.a5a5	e8		inx				inx
.a5a6	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger
.a5a9	60		rts				rts
.a5aa					GCSignedCoordinatePair:
.a5aa	a2 01		ldx #$01			ldx 	#1
.a5ac	20 67 9d	jsr $9d67			jsr 	Evaluate16BitIntegerSigned
.a5af	20 26 8d	jsr $8d26			jsr 	CheckComma
.a5b2	e8		inx				inx
.a5b3	20 67 9d	jsr $9d67			jsr 	Evaluate16BitIntegerSigned
.a5b6	60		rts				rts
.a5b7					_GCCPRange:
.a5b7	4c 89 9f	jmp $9f89			jmp 	RangeError
.a5ba					GCLoadAXY:
.a5ba	ad 30 06	lda $0630			lda 	gxXPos+1
.a5bd	ae 2f 06	ldx $062f			ldx 	gxXPos
.a5c0	ac 31 06	ldy $0631			ldy 	gxYPos
.a5c3	60		rts				rts
.a5c4					GCCopyPairToStore:
.a5c4	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a5c7	8d 2f 06	sta $062f			sta 	gxXPos
.a5ca	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a5cd	8d 30 06	sta $0630			sta 	gxXPos+1
.a5d0	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a5d3	8d 31 06	sta $0631			sta 	gxYPos
.a5d6	60		rts				rts
.062d					gxCommandID:
>062d							.fill 	1
.062e					gxFillSolid:
>062e							.fill 	1
.062f					gxXPos:
>062f							.fill 	2
.0631					gxYPos:
>0631							.fill 	1
.0632					gxHandler:
>0632							.fill 	2
.0634					gxDrawScale:
>0634							.fill 	1
.a5d7					BitmapCtrl:
.a5d7	b1 30		lda ($30),y			lda 	(codePtr),y
.a5d9	c8		iny				iny
.a5da	a2 01		ldx #$01			ldx 	#1
.a5dc	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a5de	f0 11		beq $a5f1			beq 	BitmapSwitch
.a5e0	ca		dex				dex
.a5e1	c9 be		cmp #$be			cmp 	#KWD_OFF
.a5e3	f0 0c		beq $a5f1			beq 	BitmapSwitch
.a5e5	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get the colour
.a5e8	5a		phy				phy
.a5e9	aa		tax				tax
.a5ea	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5ec	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a5ef	7a		ply				ply
.a5f0	60		rts				rts
.a5f1					BitmapSwitch:
.a5f1	5a		phy				phy
.a5f2	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5f4	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5f6	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a5f9	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5fb	a0 00		ldy #$00			ldy 	#0
.a5fd	a2 ff		ldx #$ff			ldx 	#$FF
.a5ff	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a602	9c 2e 06	stz $062e			stz 	gxFillSolid
.a605	9c 2f 06	stz $062f			stz 	gxXPos
.a608	9c 30 06	stz $0630			stz 	gxXPos+1
.a60b	9c 31 06	stz $0631			stz 	gxYPos
.a60e	9c 34 06	stz $0634			stz 	gxDrawScale
.a611	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a613	a2 00		ldx #$00			ldx 	#0
.a615	a0 00		ldy #$00			ldy 	#0
.a617	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a61a	7a		ply				ply
.a61b	60		rts				rts
.a61c					SpritesCtrl:
.a61c	b1 30		lda ($30),y			lda 	(codePtr),y
.a61e	c8		iny				iny
.a61f	a2 01		ldx #$01			ldx 	#1
.a621	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a623	f0 08		beq $a62d			beq 	SpriteSwitch
.a625	ca		dex				dex
.a626	c9 be		cmp #$be			cmp 	#KWD_OFF
.a628	f0 03		beq $a62d			beq 	SpriteSwitch
.a62a	4c 84 9f	jmp $9f84			jmp 	SyntaxError
.a62d					SpriteSwitch:
.a62d	5a		phy				phy
.a62e	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a630	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a632	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a635	7a		ply				ply
.a636	60		rts				rts
.a637					GfxCommand:
.a637	a2 00		ldx #$00			ldx 	#0
.a639	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; command
.a63c	20 26 8d	jsr $8d26			jsr 	CheckComma
.a63f	e8		inx				inx
.a640	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; X
.a643	20 26 8d	jsr $8d26			jsr 	CheckComma
.a646	e8		inx				inx
.a647	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; Y
.a64a	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a64d	4a		lsr a				lsr 	a
.a64e	d0 16		bne $a666			bne 	_GfxError
.a650	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a653	b0 11		bcs $a666			bcs 	_GfxError 					; bit 7 should have been zero
.a655	5a		phy				phy 								; save pos
.a656	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a659	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a65c	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a65f	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw
.a662	b0 02		bcs $a666			bcs 	_GfxError
.a664	7a		ply				ply 								; restore pos and exit.
.a665	60		rts				rts
.a666					_GfxError:
.a666	4c 89 9f	jmp $9f89			jmp 	RangeError
.a669					UnaryHit:
.a669	fa		plx				plx
.a66a	a9 36		lda #$36			lda 	#zTemp0
.a66c	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a66f	20 26 8d	jsr $8d26			jsr 	CheckComma
.a672	e8		inx				inx
.a673	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a676	20 1e 8d	jsr $8d1e			jsr		CheckRightBracket
.a679	ca		dex				dex 								; fix back up again.
.a67a	da		phx				phx 								; save X/Y
.a67b	5a		phy				phy
.a67c	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a67f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a682	aa		tax				tax
.a683	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a685	20 16 aa	jsr $aa16			jsr 	GXGraphicDraw 				; calculate result
.a688	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a689	7a		ply				ply 								; restore XY
.a68a	fa		plx				plx
.a68b	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte 					; return the hit result
.a68e	60		rts				rts
.a68f					UnaryJoyX:
.a68f	18		clc				clc
.a690	80 01		bra $a693			bra 	JoyMain
.a692					UnaryJoyY:
.a692	38		sec				sec
.a693					JoyMain:
.a693	fa		plx				plx 								; get pos
.a694	08		php				php 								; save carry (set for Y)
.a695	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a698	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a69b	20 e9 a8	jsr $a8e9			jsr 	EXTReadController 			; read the controller.
.a69e	28		plp				plp
.a69f	90 02		bcc $a6a3			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a6a1	4a		lsr a				lsr 	a
.a6a2	4a		lsr a				lsr 	a
.a6a3					_JMNoShift:
.a6a3	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a6a4	b0 0a		bcs $a6b0			bcs 	_JMIsRight
.a6a6	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a6a7	b0 04		bcs $a6ad			bcs 	_JMIsLeft
.a6a9	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; zero result
.a6ac	60		rts				rts
.a6ad					_JMIsLeft:
.a6ad	4c a4 8d	jmp $8da4			jmp 	ReturnTrue
.a6b0					_JMIsRight:
.a6b0	a9 01		lda #$01			lda 	#1
.a6b2	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.a6b5	60		rts				rts
.a6b6					UnaryJoyB:
.a6b6	fa		plx				plx 								; get pos
.a6b7	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6ba	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a6bd	20 e9 a8	jsr $a8e9			jsr 	EXTReadController 			; read the controller.
.a6c0	4a		lsr a				lsr 	a
.a6c1	4a		lsr a				lsr 	a
.a6c2	4a		lsr a				lsr 	a
.a6c3	4a		lsr a				lsr 	a
.a6c4	29 01		and #$01			and 	#1
.a6c6	20 fc 9d	jsr $9dfc			jsr 	NSMSetByte
.a6c9	60		rts				rts
.a6ca					PaletteCommand:
.a6ca	a2 00		ldx #$00			ldx 	#0
.a6cc	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; colour
.a6cf	20 26 8d	jsr $8d26			jsr 	CheckComma
.a6d2	e8		inx				inx
.a6d3	20 5b 9d	jsr $9d5b			jsr 	Evaluate16BitInteger 		; r
.a6d6	20 26 8d	jsr $8d26			jsr 	CheckComma
.a6d9	e8		inx				inx
.a6da	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; g
.a6dd	20 26 8d	jsr $8d26			jsr 	CheckComma
.a6e0	e8		inx				inx
.a6e1	20 7b 9d	jsr $9d7b			jsr 	Evaluate8BitInteger 		; b
.a6e4	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a6e7	85 36		sta $36				sta 	zTemp0
.a6e9	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6eb	85 37		sta $37				sta 	zTemp0+1
.a6ed	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6ef	26 37		rol $37				rol	 	zTemp0+1
.a6f1	06 36		asl $36				asl 	zTemp0
.a6f3	26 37		rol $37				rol	 	zTemp0+1
.a6f5	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6f7	85 01		sta $01				sta 	1
.a6f9	5a		phy				phy
.a6fa	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a6fd	92 36		sta ($36)			sta 	(zTemp0)
.a6ff	a0 01		ldy #$01			ldy 	#1
.a701	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a704	91 36		sta ($36),y			sta 	(zTemp0),y
.a706	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a709	c8		iny				iny
.a70a	91 36		sta ($36),y			sta 	(zTemp0),y
.a70c	7a		ply				ply
.a70d	60		rts				rts
.a70e					UnaryTimer:
.a70e	fa		plx				plx
.a70f	20 1e 8d	jsr $8d1e			jsr 	CheckRightBracket
.a712					TimerToStackX:
.a712	20 fa 9d	jsr $9dfa			jsr 	NSMSetZero 					; zero result
.a715	64 01		stz $01				stz 	1 							; access I/O
.a717	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a71a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a71d	ad 5a d6	lda $d65a			lda 	$D65A
.a720	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a723	ad 5b d6	lda $d65b			lda 	$D65B
.a726	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a729	60		rts				rts
.a72a					EXTPrintCharacter:
.a72a	48		pha				pha
.a72b	da		phx				phx
.a72c	5a		phy				phy
.a72d	a6 01		ldx $01				ldx 	1
.a72f	da		phx				phx
.a730	ac 36 06	ldy $0636			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a733	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a735	30 48		bmi $a77f			bmi 	_EXPCColour
.a737	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a739	90 4d		bcc $a788			bcc 	_EXPCControl
.a73b	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a73d	86 01		stx $01				stx 	1
.a73f	91 40		sta ($40),y			sta 	(EXTAddress),y
.a741	e6 01		inc $01				inc 	1 							; select colour memory
.a743	ad 37 06	lda $0637			lda 	EXTTextColour
.a746	91 40		sta ($40),y			sta 	(EXTAddress),y
.a748	c8		iny				iny 								; advance horizontal position
.a749	8c 36 06	sty $0636			sty 	EXTColumn
.a74c	cc 38 06	cpy $0638			cpy 	EXTScreenWidth 				; reached RHS ?
.a74f	90 66		bcc $a7b7			bcc 	_EXPCExit 					; no, then exit.
.a751					_EXPCCRLF:
.a751	ee 35 06	inc $0635			inc 	EXTRow  					; bump row
.a754	9c 36 06	stz $0636			stz 	EXTColumn 					; back to column 0
.a757	ad 35 06	lda $0635			lda 	EXTRow 						; check if reached the bottom ?
.a75a	cd 39 06	cmp $0639			cmp 	EXTScreenHeight 			; if so, then scroll.
.a75d	f0 18		beq $a777			beq 	_EXPCScroll
.a75f	18		clc				clc 								; add width to address.
.a760	a5 40		lda $40				lda 	EXTAddress
.a762	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a765	85 40		sta $40				sta 	EXTAddress
.a767	90 4e		bcc $a7b7			bcc 	_EXPCExit
.a769	e6 41		inc $41				inc 	EXTAddress+1
.a76b	80 4a		bra $a7b7			bra 	_EXPCExit
.a76d					_EXPCLeft:
.a76d	ce 36 06	dec $0636			dec 	EXTColumn
.a770	10 45		bpl $a7b7			bpl 	_EXPCExit
.a772					_EXPCBegin:
.a772	9c 36 06	stz $0636			stz 	EXTColumn
.a775	80 40		bra $a7b7			bra 	_EXPCExit
.a777					_EXPCScroll:
.a777	ce 35 06	dec $0635			dec 	EXTRow 						; the height-1 th line.
.a77a	20 44 a8	jsr $a844			jsr 	EXTScreenScroll 			; scroll the screen
.a77d	80 38		bra $a7b7			bra 	_EXPCExit
.a77f					_EXPCColour:
.a77f	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.a781	b0 34		bcs $a7b7			bcs 	_EXPCExit
.a783	20 24 a8	jsr $a824			jsr 	_EXPCHandleColour
.a786	80 2f		bra $a7b7			bra 	_EXPCExit
.a788					_EXPCControl:
.a788	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a78a	b0 2b		bcs $a7b7			bcs 	_EXPCExit
.a78c	0a		asl a				asl 	a 							; double into X
.a78d	aa		tax				tax
.a78e	7c 02 a8	jmp ($a802,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a791					_EXPCUp:
.a791	ad 35 06	lda $0635			lda 	EXTRow 						; already at top ?
.a794	f0 21		beq $a7b7			beq 	_EXPCExit
.a796	ce 35 06	dec $0635			dec 	EXTRow 						; up one in position/address
.a799	38		sec				sec
.a79a	a5 40		lda $40				lda 	EXTAddress
.a79c	ed 38 06	sbc $0638			sbc 	EXTScreenWidth
.a79f	85 40		sta $40				sta 	EXTAddress
.a7a1	b0 14		bcs $a7b7			bcs 	_EXPCExit
.a7a3	c6 41		dec $41				dec 	EXTAddress+1
.a7a5	80 10		bra $a7b7			bra 	_EXPCExit
.a7a7					_EXPCRight:
.a7a7	c8		iny				iny
.a7a8	8c 36 06	sty $0636			sty 	EXTColumn
.a7ab	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a7ae	d0 07		bne $a7b7			bne 	_EXPCExit
.a7b0					_EXPCEnd:
.a7b0	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a7b3	3a		dec a				dec 	a
.a7b4	8d 36 06	sta $0636			sta 	EXTColumn
.a7b7					_EXPCExit:
.a7b7	20 99 a8	jsr $a899			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7ba	68		pla				pla
.a7bb	85 01		sta $01				sta 	1
.a7bd	7a		ply				ply
.a7be	fa		plx				plx
.a7bf	68		pla				pla
.a7c0	60		rts				rts
.a7c1					_EXPCClearScreen:
.a7c1	20 56 a8	jsr $a856			jsr		EXTClearScreenCode
.a7c4	80 f1		bra $a7b7			bra 	_EXPCExit
.a7c6					_EXPCDown:
.a7c6	ad 39 06	lda $0639			lda 	EXTScreenHeight 			; at the bottom
.a7c9	3a		dec a				dec 	a
.a7ca	cd 35 06	cmp $0635			cmp 	EXTRow
.a7cd	f0 e8		beq $a7b7			beq 	_EXPCExit
.a7cf	ee 35 06	inc $0635			inc 	EXTRow 						; down one in position/address
.a7d2	18		clc				clc
.a7d3	a5 40		lda $40				lda 	EXTAddress
.a7d5	6d 38 06	adc $0638			adc 	EXTScreenWidth
.a7d8	85 40		sta $40				sta 	EXTAddress
.a7da	90 db		bcc $a7b7			bcc 	_EXPCExit
.a7dc	e6 41		inc $41				inc 	EXTAddress+1
.a7de	80 d7		bra $a7b7			bra 	_EXPCExit
.a7e0					_EXPCTab:
.a7e0	ad 36 06	lda $0636			lda 	EXTColumn 					; next tab stop
.a7e3	29 f8		and #$f8			and 	#$F8
.a7e5	18		clc				clc
.a7e6	69 08		adc #$08			adc 	#8
.a7e8	8d 36 06	sta $0636			sta 	EXTColumn
.a7eb	cd 38 06	cmp $0638			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a7ee	90 c7		bcc $a7b7			bcc 	_EXPCExit
.a7f0	80 be		bra $a7b0			bra 	_EXPCEnd
.a7f2					_EXPCBackSpace:
.a7f2	88		dey				dey
.a7f3	30 c2		bmi $a7b7			bmi 	_EXPCExit
.a7f5	ce 36 06	dec $0636			dec 	EXTColumn
.a7f8	a9 02		lda #$02			lda 	#2
.a7fa	85 01		sta $01				sta 	1
.a7fc	a9 20		lda #$20			lda 	#32
.a7fe	91 40		sta ($40),y			sta 	(EXTAddress),y
.a800	80 b5		bra $a7b7			bra 	_EXPCExit
.a802					_EXPCActionTable:
>a802	b7 a7						.word 	_EXPCExit 					; 00
>a804	72 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a806	6d a7						.word 	_EXPCLeft 					; 02 B Left
>a808	b7 a7						.word 	_EXPCExit 					; 03 <Break>
>a80a	b7 a7						.word 	_EXPCExit 					; 04
>a80c	b0 a7						.word 	_EXPCEnd 					; 05 E End of Line
>a80e	a7 a7						.word 	_EXPCRight 					; 06 F Right
>a810	b7 a7						.word 	_EXPCExit 					; 07
>a812	f2 a7						.word 	_EXPCBackspace 				; 08 H Backspace
>a814	e0 a7						.word 	_EXPCTab 					; 09 I Tab
>a816	b7 a7						.word 	_EXPCExit 					; 0A
>a818	b7 a7						.word 	_EXPCExit 					; 0B
>a81a	c1 a7						.word 	_EXPCClearScreen			; 0C L CLS
>a81c	51 a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a81e	c6 a7						.word 	_EXPCDown 					; 0E N Down
>a820	b7 a7						.word 	_EXPCExit 					; 0F
>a822	91 a7						.word 	_EXPCUp 					; 10 P Up
.a824					_EXPCHandleColour
.a824	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.a826	b0 16		bcs $a83e			bcs 	_EXPCBackground
.a828	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.a829	0a		asl a				asl 	a
.a82a	0a		asl a				asl 	a
.a82b	0a		asl a				asl 	a
.a82c	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.a82e					_EXPCUpdate:
.a82e	48		pha				pha 								; save new colour
.a82f	8a		txa				txa 								; get mask
.a830	2d 37 06	and $0637			and 	EXTTextColour 				; mask out old.
.a833	8d 37 06	sta $0637			sta 	EXTTextColour
.a836	68		pla				pla 								; or in new colour
.a837	0d 37 06	ora $0637			ora 	EXTTextColour
.a83a	8d 37 06	sta $0637			sta 	EXTTextColour
.a83d	60		rts				rts
.a83e					_EXPCBackground:
.a83e	29 0f		and #$0f			and 	#$0F 						; get the colour
.a840	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.a842	80 ea		bra $a82e			bra 	_EXPCUpdate
.a844					EXTScreenScroll:
.a844	a9 02		lda #$02			lda 	#2 							; select text page
.a846	85 01		sta $01				sta 	1
.a848	a9 20		lda #$20			lda		#32 						; fill with space
.a84a	20 d1 a9	jsr $a9d1			jsr 	EXTScrollFill
.a84d	e6 01		inc $01				inc 	1 							; select colour page
.a84f	ad 37 06	lda $0637			lda 	EXTTextColour
.a852	20 d1 a9	jsr $a9d1			jsr 	EXTScrollFill
.a855	60		rts				rts
.a856					EXTClearScreenCode:
.a856	a9 02		lda #$02			lda 	#2 							; select text page
.a858	85 01		sta $01				sta 	1
.a85a	a9 20		lda #$20			lda		#32 						; fill with space
.a85c	20 69 a8	jsr $a869			jsr 	_EXTCSFill
.a85f	e6 01		inc $01				inc 	1 							; select colour page
.a861	ad 37 06	lda $0637			lda 	EXTTextColour
.a864	20 69 a8	jsr $a869			jsr 	_EXTCSFill
.a867	80 22		bra $a88b			bra 	EXTHomeCursor
.a869					_EXTCSFill:
.a869	aa		tax				tax
.a86a	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a86c	85 40		sta $40				sta 	EXTAddress
.a86e	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a870	85 41		sta $41				sta 	EXTAddress+1
.a872					_EXTCSFill1:
.a872	a0 00		ldy #$00			ldy 	#0
.a874	8a		txa				txa
.a875					_EXTCSFill2:
.a875	91 40		sta ($40),y			sta 	(EXTAddress),y
.a877	c8		iny				iny
.a878	d0 fb		bne $a875			bne 	_EXTCSFill2
.a87a	e6 41		inc $41				inc 	EXTAddress+1
.a87c	a5 41		lda $41				lda 	EXTAddress+1
.a87e	c9 d2		cmp #$d2			cmp 	#$D2
.a880	d0 f0		bne $a872			bne 	_EXTCSFill1
.a882	8a		txa				txa
.a883					_EXTCSFill3:
.a883	91 40		sta ($40),y			sta 	(EXTAddress),y
.a885	c8		iny				iny
.a886	c0 c0		cpy #$c0			cpy 	#$C0
.a888	d0 f9		bne $a883			bne 	_EXTCSFill3
.a88a	60		rts				rts
.a88b					EXTHomeCursor:
.a88b	9c 35 06	stz $0635			stz 	EXTRow 						; reset row & column
.a88e	9c 36 06	stz $0636			stz 	EXTColumn
.a891	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a893	85 40		sta $40				sta 	EXTAddress
.a895	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a897	85 41		sta $41				sta 	EXTAddress+1
.a899					EXTSetHardwareCursor:
.a899	64 01		stz $01				stz 	1 							; I/O Page zero
.a89b	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a89d	8d 10 d0	sta $d010			sta 	$D010
.a8a0	a9 b1		lda #$b1			lda 	#$B1
.a8a2	8d 12 d0	sta $d012			sta 	$D012
.a8a5	ad 36 06	lda $0636			lda 	EXTColumn
.a8a8	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a8ab	9c 15 d0	stz $d015			stz 	$D015
.a8ae	ad 35 06	lda $0635			lda 	EXTRow
.a8b1	8d 16 d0	sta $d016			sta 	$D016
.a8b4	9c 17 d0	stz $d017			stz 	$D017
.a8b7	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0635					EXTRow:
>0635							.fill 	1
.0636					EXTColumn:
>0636							.fill 	1
.0637					EXTTextColour:
>0637							.fill 	1
.0638					EXTScreenWidth:
>0638							.fill 	1
.0639					EXTScreenHeight:
>0639							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a8b8					EXTInitialise:
.a8b8	64 01		stz $01				stz 	1 							; Access I/O
.a8ba	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a8bd	9c 08 d0	stz $d008			stz 	$D008
.a8c0	9c 09 d0	stz $d009			stz 	$D009
.a8c3	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a8c5	8d 58 d6	sta $d658			sta 	$D658
.a8c8	a9 76		lda #$76			lda 	#CONForeground * 16 + CONBackground
.a8ca	8d 37 06	sta $0637			sta 	EXTTextColour
.a8cd	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a8cf	8d 38 06	sta $0638			sta 	EXTScreenWidth
.a8d2	a9 3c		lda #$3c			lda 	#60
.a8d4	8d 39 06	sta $0639			sta 	EXTScreenHeight
.a8d7	64 01		stz $01				stz 	1
.a8d9	60		rts				rts
.a8da					EXTInputSingleCharacter:
.a8da	da		phx				phx
.a8db	5a		phy				phy
.a8dc					_EISCWait:
.a8dc	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a8df	c9 00		cmp #$00			cmp 	#0
.a8e1	f0 f9		beq $a8dc			beq 	_EISCWait
.a8e3	7a		ply				ply
.a8e4	fa		plx				plx
.a8e5	60		rts				rts
.a8e6					EXTBreakCheck:
.a8e6	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a8e9					EXTReadController:
.a8e9	da		phx				phx
.a8ea	a2 00		ldx #$00			ldx 	#0
.a8ec	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a8ee	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8f1	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a8f3	f0 04		beq $a8f9			beq 	_NoSet1
.a8f5	8a		txa				txa
.a8f6	09 01		ora #$01			ora 	#1
.a8f8	aa		tax				tax
.a8f9					_NoSet1:
.a8f9	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a8fb	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8fe	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a900	f0 04		beq $a906			beq 	_NoSet1
.a902	8a		txa				txa
.a903	09 02		ora #$02			ora 	#2
.a905	aa		tax				tax
.a906					_NoSet1:
.a906	a9 06		lda #$06			lda 	#(($32) >> 3)
.a908	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a90b	29 04		and #$04			and 	#($01 << (($32) & 7))
.a90d	f0 04		beq $a913			beq 	_NoSet1
.a90f	8a		txa				txa
.a910	09 04		ora #$04			ora 	#4
.a912	aa		tax				tax
.a913					_NoSet1:
.a913	a9 04		lda #$04			lda 	#(($25) >> 3)
.a915	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a918	29 20		and #$20			and 	#($01 << (($25) & 7))
.a91a	f0 04		beq $a920			beq 	_NoSet1
.a91c	8a		txa				txa
.a91d	09 08		ora #$08			ora 	#8
.a91f	aa		tax				tax
.a920					_NoSet1:
.a920	a9 04		lda #$04			lda 	#(($26) >> 3)
.a922	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a925	29 40		and #$40			and 	#($01 << (($26) & 7))
.a927	f0 04		beq $a92d			beq 	_NoSet1
.a929	8a		txa				txa
.a92a	09 10		ora #$10			ora 	#16
.a92c	aa		tax				tax
.a92d					_NoSet1:
.a92d	8a		txa				txa
.a92e	fa		plx				plx
.a92f	60		rts				rts
.a930					EXTInputLine:
.a930	48		pha				pha
.a931	da		phx				phx
.a932	5a		phy				phy
.a933	a5 01		lda $01				lda 	1 							; save I/O page
.a935	48		pha				pha
.a936					_EILLoop:
.a936	20 da a8	jsr $a8da			jsr 	ExtInputSingleCharacter
.a939	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a93b	f0 40		beq $a97d			beq 	_EILExit
.a93d	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a93f	f0 1c		beq $a95d			beq 	_EILBackspace
.a941	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a943	90 12		bcc $a957			bcc 	_EILPrintLoop
.a945	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a947	b0 0e		bcs $a957			bcs 	_EILPrintLoop
.a949	48		pha				pha 								; save character
.a94a	a9 02		lda #$02			lda 	#2  						; insert a space
.a94c	85 01		sta $01				sta 	1
.a94e	20 bf a9	jsr $a9bf			jsr 	EXTILInsert 				; insert in text screen
.a951	e6 01		inc $01				inc 	1
.a953	20 bf a9	jsr $a9bf			jsr 	EXTILInsert 				; insert in colour screen
.a956	68		pla				pla 								; get character back.
.a957					_EILPrintLoop:
.a957	20 2a a7	jsr $a72a			jsr 	ExtPrintCharacter
.a95a	80 da		bra $a936			bra 	_EILLoop
.a95c	60		rts				rts
.a95d					_EILBackspace:
.a95d	ad 36 06	lda $0636			lda 	EXTColumn					; can we backspace ?
.a960	f0 d4		beq $a936			beq 	_EILLoop
.a962	a9 02		lda #$02			lda 	#2 							; move cursor left
.a964	20 2a a7	jsr $a72a			jsr 	EXTPrintCharacter
.a967	a9 02		lda #$02			lda 	#2 							; text block
.a969	85 01		sta $01				sta 	1
.a96b	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a96d	20 aa a9	jsr $a9aa			jsr 	EXTILDelete
.a970	e6 01		inc $01				inc 	1 							; colour block
.a972	ac 36 06	ldy $0636			ldy 	EXTColumn 					; get attribute of last character
.a975	88		dey				dey
.a976	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a978	20 aa a9	jsr $a9aa			jsr 	EXTILDelete 				; backspace attribute
.a97b	80 b9		bra $a936			bra 	_EILLoop 					; and go round.
.a97d					_EILExit:
.a97d	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a97f	85 01		sta $01				sta 	1
.a981	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a983					_EILScrapeLine:
.a983	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a985	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a988	c8		iny				iny
.a989	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a98c	d0 f5		bne $a983			bne 	_EILScrapeLine
.a98e					_EILTrimSpaces:
.a98e	88		dey				dey
.a98f	f0 08		beq $a999			beq 	_EILEndTrim
.a991	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.a994	c9 20		cmp #$20			cmp 	#' '
.a996	f0 f6		beq $a98e			beq 	_EILTrimSpaces
.a998	c8		iny				iny 								; trim after non space character.
.a999					_EILEndTrim:
.a999	a9 00		lda #$00			lda 	#0 							; trim here.
.a99b	99 a8 05	sta $05a8,y			sta 	lineBuffer,y
.a99e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a9a0	20 2a a7	jsr $a72a			jsr 	ExtPrintCharacter
.a9a3	68		pla				pla 								; reset I/O page
.a9a4	85 01		sta $01				sta 	1
.a9a6	7a		ply				ply
.a9a7	fa		plx				plx
.a9a8	68		pla				pla
.a9a9	60		rts				rts
.a9aa					EXTILDelete:
.a9aa	48		pha				pha 								; save the new character
.a9ab	ac 36 06	ldy $0636			ldy 	EXTColumn 					; start copying from here.
.a9ae					_EXTDLoop:
.a9ae	c8		iny				iny 								; copy one byte down.
.a9af	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9b1	88		dey				dey
.a9b2	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9b4	c8		iny				iny 								; do till end of line.
.a9b5	cc 38 06	cpy $0638			cpy 	EXTScreenWidth
.a9b8	90 f4		bcc $a9ae			bcc 	_EXTDLoop
.a9ba	88		dey				dey 	 							; write in last slot.
.a9bb	68		pla				pla
.a9bc	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9be	60		rts				rts
.a9bf					EXTILInsert:
.a9bf	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; end position
.a9c2					_EXTILoop:
.a9c2	88		dey				dey 								; back one
.a9c3	cc 36 06	cpy $0636			cpy 	EXTColumn 					; exit if reached insert point.
.a9c6	f0 08		beq $a9d0			beq 	_EXTIExit
.a9c8	88		dey				dey 								; copy one byte up.
.a9c9	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a9cb	c8		iny				iny
.a9cc	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9ce	80 f2		bra $a9c2			bra 	_EXTILoop
.a9d0					_EXTIExit:
.a9d0	60		rts				rts
.a9d1					EXTScrollFill:
.a9d1	aa		tax				tax									; save value to fill with
.a9d2	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a9d4	48		pha				pha
.a9d5	a5 37		lda $37				lda 	zTemp0+1
.a9d7	48		pha				pha
.a9d8	a5 38		lda $38				lda 	zTemp1
.a9da	48		pha				pha
.a9db	a5 39		lda $39				lda 	zTemp1+1
.a9dd	48		pha				pha
.a9de	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a9e0	85 37		sta $37				sta 	zTemp0+1
.a9e2	85 39		sta $39				sta 	zTemp1+1
.a9e4	64 36		stz $36				stz 	zTemp0
.a9e6	ad 38 06	lda $0638			lda 	EXTScreenWidth
.a9e9	85 38		sta $38				sta 	zTemp1
.a9eb	a0 00		ldy #$00			ldy 	#0
.a9ed					_EXSFCopy1:
.a9ed	b1 38		lda ($38),y			lda 	(zTemp1),y
.a9ef	91 36		sta ($36),y			sta 	(zTemp0),y
.a9f1	c8		iny				iny
.a9f2	d0 f9		bne $a9ed			bne 	_EXSFCopy1
.a9f4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a9f6	e6 39		inc $39				inc 	zTemp1+1
.a9f8	a5 39		lda $39				lda 	zTemp1+1
.a9fa	c9 d3		cmp #$d3			cmp 	#$D3
.a9fc	d0 ef		bne $a9ed			bne 	_EXSFCopy1
.a9fe	ac 38 06	ldy $0638			ldy 	EXTScreenWidth 				; blank the bottom line.
.aa01	8a		txa				txa
.aa02					_EXSFFill1:
.aa02	88		dey				dey
.aa03	91 40		sta ($40),y			sta 	(EXTAddress),y
.aa05	c0 00		cpy #$00			cpy 	#0
.aa07	10 f9		bpl $aa02			bpl 	_EXSFFill1
.aa09	68		pla				pla
.aa0a	85 39		sta $39				sta 	zTemp1+1
.aa0c	68		pla				pla
.aa0d	85 38		sta $38				sta 	zTemp1
.aa0f	68		pla				pla
.aa10	85 37		sta $37				sta 	zTemp0+1
.aa12	68		pla				pla
.aa13	85 36		sta $36				sta 	zTemp0
.aa15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b7b4					GRVectorTable:
>b7b4	11 ac					.word	GXInitialise             ; $00 Initialise
>b7b6	2b ac					.word	GXControlBitmap          ; $01 BitmapCtl
>b7b8	73 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b7ba	c3 ab					.word	GXClearBitmap            ; $03 Clear
>b7bc	02 ae					.word	GXSetColourMode          ; $04 Colour
>b7be	ca af					.word	GXFontHandler            ; $05 DrawFont
>b7c0	12 b0					.word	GXSpriteHandler          ; $06 DrawSprite
>b7c2	7e b0					.word	GXSelect                 ; $07 SpriteUse
>b7c4	a7 b0					.word	GXSelectImage            ; $08 SpriteImage
>b7c6	2e b2					.word	GXCollide                ; $09 SpriteCollide
>b7c8	75 aa					.word	GRUndefined              ; $0a
>b7ca	75 aa					.word	GRUndefined              ; $0b
>b7cc	75 aa					.word	GRUndefined              ; $0c
>b7ce	75 aa					.word	GRUndefined              ; $0d
>b7d0	75 aa					.word	GRUndefined              ; $0e
>b7d2	75 aa					.word	GRUndefined              ; $0f
>b7d4	75 aa					.word	GRUndefined              ; $10
>b7d6	75 aa					.word	GRUndefined              ; $11
>b7d8	75 aa					.word	GRUndefined              ; $12
>b7da	75 aa					.word	GRUndefined              ; $13
>b7dc	75 aa					.word	GRUndefined              ; $14
>b7de	75 aa					.word	GRUndefined              ; $15
>b7e0	75 aa					.word	GRUndefined              ; $16
>b7e2	75 aa					.word	GRUndefined              ; $17
>b7e4	75 aa					.word	GRUndefined              ; $18
>b7e6	75 aa					.word	GRUndefined              ; $19
>b7e8	75 aa					.word	GRUndefined              ; $1a
>b7ea	75 aa					.word	GRUndefined              ; $1b
>b7ec	75 aa					.word	GRUndefined              ; $1c
>b7ee	75 aa					.word	GRUndefined              ; $1d
>b7f0	75 aa					.word	GRUndefined              ; $1e
>b7f2	75 aa					.word	GRUndefined              ; $1f
>b7f4	73 aa					.word	GXMove                   ; $20 Move
>b7f6	d0 ac					.word	GXLine                   ; $21 Line
>b7f8	4b ae					.word	GXFrameRectangle         ; $22 FrameRect
>b7fa	48 ae					.word	GXFillRectangle          ; $23 FillRect
>b7fc	7a aa					.word	GXFrameCircle            ; $24 FrameCircle
>b7fe	76 aa					.word	GXFillCircle             ; $25 FillCircle
>b800	75 aa					.word	GRUndefined              ; $26
>b802	75 aa					.word	GRUndefined              ; $27
>b804	30 ae					.word	GXPlotPoint              ; $28 Plot
>b806	3d b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f9					gxPixelBuffer = numberBuffer
.063a					gxCurrentX:
>063a							.fill 	2
.063c					gxCurrentY:
>063c							.fill 	2
.063e					gxLastX:
>063e							.fill 	2
.0640					gxLastY:
>0640							.fill 	2
.0642					gxX0:
>0642							.fill 	2
.0644					gxY0:
>0644							.fill 	2
.0646					gxX1:
>0646							.fill 	2
.0648					gxY1:
>0648							.fill 	2
.064a					gxSpritesOn:
>064a							.fill 	1
.064b					gxBitmapsOn:
>064b							.fill 	1
.064c					gxBasePage:
>064c							.fill 	1
.064d					gxSpritePage:
>064d							.fill 	1
.064e					gxHeight:
>064e							.fill 	1
.064f					gxMode:
>064f							.fill 	1
.0650					gxColour:
>0650							.fill 	1
.0651					gxEORValue:
>0651							.fill 	1
.0652					gxANDValue:
>0652							.fill 	1
.0653					gxOriginalLUTValue:
>0653							.fill 	1
.0654					gsOffset:
>0654							.fill 	1
.0655					GSCurrentSpriteID:
>0655							.fill 	1
.0656					GSCurrentSpriteAddr:
>0656							.fill 	2
.0658					GXSpriteOffsetBase:
>0658							.fill 	2
.065a					GXSpriteLow:
>065a							.fill 	64
.069a					GXSpriteHigh:
>069a							.fill 	64
.aa16					GXGraphicDraw:
.aa16	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.aa18	b0 06		bcs $aa20			bcs 	_GDCoordinate
.aa1a	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.aa1c	84 37		sty $37				sty 	gxzTemp0+1
.aa1e	80 4b		bra $aa6b			bra 	_GDExecuteA 				; and execute
.aa20					_GDCoordinate:
.aa20	48		pha				pha 								; save AXY
.aa21	da		phx				phx
.aa22	5a		phy				phy
.aa23	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.aa25					_GDCopy1:
.aa25	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa28	9d 3e 06	sta $063e,x			sta 	gxLastX,x
.aa2b	ca		dex				dex
.aa2c	10 f7		bpl $aa25			bpl 	_GDCopy1
.aa2e	68		pla				pla 								; update Y
.aa2f	8d 3c 06	sta $063c			sta 	gxCurrentY
.aa32	9c 3d 06	stz $063d			stz 	gxCurrentY+1
.aa35	68		pla				pla
.aa36	8d 3a 06	sta $063a			sta 	gxCurrentX
.aa39	68		pla				pla 								; get A (command+X.1) back
.aa3a	48		pha				pha
.aa3b	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa3d	8d 3b 06	sta $063b			sta 	gxCurrentX+1
.aa40	68		pla				pla 								; get command back
.aa41	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa43	48		pha				pha 								; push back.
.aa44	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa46	f0 17		beq $aa5f			beq 	_GDCopyToWorkArea
.aa48	ad 3b 06	lda $063b			lda 	gxCurrentX+1 				; X < 256 X okay
.aa4b	f0 07		beq $aa54			beq 	_GDCheckY
.aa4d	ad 3a 06	lda $063a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa50	c9 40		cmp #$40			cmp 	#64
.aa52	b0 08		bcs $aa5c			bcs 	_GDError1
.aa54					_GDCheckY:
.aa54	ad 3c 06	lda $063c			lda 	gxCurrentY 					; check Y < Height.
.aa57	cd 4e 06	cmp $064e			cmp 	gxHeight
.aa5a	90 03		bcc $aa5f			bcc 	_GDCopyToWorkArea
.aa5c					_GDError1:
.aa5c	68		pla				pla
.aa5d					_GDError2:
.aa5d	38		sec				sec
.aa5e	60		rts				rts
.aa5f					_GDCopyToWorkArea:
.aa5f	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa61					_GDCopy2:
.aa61	bd 3a 06	lda $063a,x			lda 	gxCurrentX,x
.aa64	9d 42 06	sta $0642,x			sta 	gxX0,x
.aa67	ca		dex				dex
.aa68	10 f7		bpl $aa61			bpl 	_GDCopy2
.aa6a	68		pla				pla 								; get command
.aa6b					_GDExecuteA:
.aa6b	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa6d	b0 ee		bcs $aa5d			bcs 	_GDError2
.aa6f	aa		tax				tax
.aa70	7c b4 b7	jmp ($b7b4,x)			jmp 	(GRVectorTable,x)
.aa73					GXMove:
.aa73	18		clc				clc
.aa74	60		rts				rts
.aa75					GRUndefined:
>aa75	db						.byte 	$DB 						; causes a break in the emulator
.aa76					GXFillCircle:
.aa76	a9 ff		lda #$ff			lda 	#255
.aa78	80 02		bra $aa7c			bra 	GXCircle
.aa7a					GXFrameCircle:
.aa7a	a9 00		lda #$00			lda 	#0
.aa7c					GXCircle:
.aa7c	8d dd 06	sta $06dd			sta 	gxIsFillMode					; save Fill flag
.aa7f	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.aa82	f0 26		beq $aaaa			beq 	_GXCFail
.aa84	20 d5 b2	jsr $b2d5			jsr 	GXSortXY 					; topleft/bottomright
.aa87	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start drawing
.aa8a	20 7c ab	jsr $ab7c			jsr 	GXCircleSetup 				; set up for drawing
.aa8d	9c de 06	stz $06de			stz 	gxYChanged
.aa90					_GXCircleDraw:
.aa90	ad db 06	lda $06db			lda 	gXCentre					; while x <= y
.aa93	cd dc 06	cmp $06dc			cmp 	gYCentre
.aa96	90 0a		bcc $aaa2			bcc 	_GXCircleContinue
.aa98	d0 03		bne $aa9d			bne 	_GXNoLast
.aa9a	20 af aa	jsr $aaaf			jsr 	GXPlot1
.aa9d					_GXNoLast:
.aa9d	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap 				; close the bitmap
.aaa0	18		clc				clc
.aaa1	60		rts				rts
.aaa2					_GXCircleContinue:
.aaa2	20 ac aa	jsr $aaac			jsr 	GXPlot2 					; draw it
.aaa5	20 29 ab	jsr $ab29			jsr 	GXCircleMove 				; adjust the coordinates
.aaa8	80 e6		bra $aa90			bra 	_GXCircleDraw
.aaaa					_GXCFail:
.aaaa	38		sec				sec
.aaab	60		rts				rts
.aaac					GXPlot2:
.aaac	20 af aa	jsr $aaaf			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aaaf					GXPlot1:
.aaaf	ad dc 06	lda $06dc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aab2	f0 03		beq $aab7			beq 	_GXPlot1Only
.aab4	20 d3 aa	jsr $aad3			jsr 	GXPlot0 						; plot and negate
.aab7					_GXPlot1Only:
.aab7	20 d3 aa	jsr $aad3			jsr 	GXPlot0 						; twice, undoing negation
.aaba	ad db 06	lda $06db			lda 	gXCentre 						; swap X and Y
.aabd	ae dc 06	ldx $06dc			ldx	 	gYCentre
.aac0	8d dc 06	sta $06dc			sta 	gYCentre
.aac3	8e db 06	stx $06db			stx 	gXCentre
.aac6	ad de 06	lda $06de			lda 	gxYChanged 						; toggle Y Changed flag
.aac9	a9 ff		lda #$ff			lda 	#$FF
.aacb	8d de 06	sta $06de			sta 	gxYChanged
.aace	60		rts				rts
.aacf	20 d3 aa	jsr $aad3			jsr 	GXPlot0 						; do once
.aad2	60		rts				rts
.aad3	ad dd 06	lda $06dd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aad6	f0 05		beq $aadd			beq 	_GXPlot0Always
.aad8	ad de 06	lda $06de			lda 	gxYChanged						; fill mode, only draw if changed.
.aadb	f0 2d		beq $ab0a			beq 	GXPlot0Exit
.aadd					_GXPlot0Always:
.aadd	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aadf	ad dc 06	lda $06dc			lda 	gYCentre
.aae2	20 0b ab	jsr $ab0b			jsr 	GXSubCopy
.aae5	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.aae7	ad db 06	lda $06db			lda 	gXCentre
.aaea	20 0b ab	jsr $ab0b			jsr 	GXSubCopy
.aaed	48		pha				pha 									; save last offset X
.aaee	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 					; calculate position/offset.
.aaf1	68		pla				pla
.aaf2	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.aaf3	85 36		sta $36				sta 	gxzTemp0
.aaf5	64 37		stz $37				stz 	gxzTemp0+1
.aaf7	26 37		rol $37				rol 	gxzTemp0+1
.aaf9	ad dd 06	lda $06dd			lda 	gxIsFillMode
.aafc	69 80		adc #$80			adc 	#128
.aafe	20 9b ae	jsr $ae9b			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.ab01	38		sec				sec 									; GY = -GY
.ab02	a9 00		lda #$00			lda 	#0
.ab04	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab07	8d dc 06	sta $06dc			sta 	gYCentre
.ab0a					GXPlot0Exit:
.ab0a	60		rts				rts
.ab0b					GXSubCopy:
.ab0b	85 36		sta $36				sta 	gxzTemp0
.ab0d	64 37		stz $37				stz 	gxzTemp0+1
.ab0f	29 80		and #$80			and 	#$80
.ab11	f0 02		beq $ab15			beq 	_GXNoSx
.ab13	c6 37		dec $37				dec 	gxzTemp0+1
.ab15					_GXNoSx:
.ab15	38		sec				sec
.ab16	bd 46 06	lda $0646,x			lda 	gXX1,x
.ab19	e5 36		sbc $36				sbc 	gxzTemp0
.ab1b	9d 42 06	sta $0642,x			sta 	gXX0,x
.ab1e	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.ab21	e5 37		sbc $37				sbc 	gxzTemp0+1
.ab23	9d 43 06	sta $0643,x			sta 	gXX0+1,x
.ab26	a5 36		lda $36				lda 	gxzTemp0 						; return A
.ab28	60		rts				rts
.ab29					GXCircleMove:
.ab29	9c de 06	stz $06de			stz 	gxYChanged 					; clear Y changed flag
.ab2c	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.ab2e	10 0d		bpl $ab3d			bpl 	_GXEMPositive
.ab30	ee db 06	inc $06db			inc 	gXCentre 					; X++
.ab33	ad db 06	lda $06db			lda 	gXCentre
.ab36	20 5c ab	jsr $ab5c			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab39	a9 06		lda #$06			lda 	#6  						; and add 6
.ab3b	80 15		bra $ab52			bra 	_GXEMAddD
.ab3d					_GXEMPositive:
.ab3d	ee db 06	inc $06db			inc 	gXCentre					; X++
.ab40	ce dc 06	dec $06dc			dec 	gyCentre 					; Y--
.ab43	38		sec				sec 								; calculate X-Y
.ab44	ad db 06	lda $06db			lda 	gXCentre
.ab47	ed dc 06	sbc $06dc			sbc 	gYCentre
.ab4a	20 5c ab	jsr $ab5c			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab4d	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab4f	ce de 06	dec $06de			dec 	gxYChanged
.ab52					_GXEMAddD:
.ab52	18		clc				clc
.ab53	65 38		adc $38				adc 	gxzTemp1
.ab55	85 38		sta $38				sta 	gxzTemp1
.ab57	90 02		bcc $ab5b			bcc 	_GXEMNoCarry
.ab59	e6 39		inc $39				inc 	gxzTemp1+1
.ab5b					_GXEMNoCarry:
.ab5b	60		rts				rts
.ab5c					_GXAdd4TimesToD:
.ab5c	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab5e	29 80		and #$80			and 	#$80
.ab60	f0 02		beq $ab64			beq 	_GXA4Unsigned
.ab62	a9 ff		lda #$ff			lda 	#$FF
.ab64					_GXA4Unsigned:
.ab64	85 37		sta $37				sta 	gxzTemp0+1
.ab66	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab68	26 37		rol $37				rol 	gxzTemp0+1
.ab6a	06 36		asl $36				asl 	gxzTemp0
.ab6c	26 37		rol $37				rol 	gxzTemp0+1
.ab6e	18		clc				clc 								; add
.ab6f	a5 36		lda $36				lda		gxzTemp0
.ab71	65 38		adc $38				adc 	gxzTemp1
.ab73	85 38		sta $38				sta 	gxzTemp1
.ab75	a5 37		lda $37				lda		gxzTemp0+1
.ab77	65 39		adc $39				adc 	gxzTemp1+1
.ab79	85 39		sta $39				sta 	gxzTemp1+1
.ab7b	60		rts				rts
.ab7c					GXCircleSetup:
.ab7c	38		sec				sec
.ab7d	ad 48 06	lda $0648			lda 	gxY1
.ab80	ed 44 06	sbc $0644			sbc 	gxY0
.ab83	4a		lsr a				lsr 	a
.ab84	8d da 06	sta $06da			sta 	gxRadius
.ab87	a2 00		ldx #$00			ldx 	#0
.ab89	20 ab ab	jsr $abab			jsr 	_GXCalculateCentre
.ab8c	a2 02		ldx #$02			ldx 	#2
.ab8e	20 ab ab	jsr $abab			jsr 	_GXCalculateCentre
.ab91	9c db 06	stz $06db			stz 	gXCentre
.ab94	ad da 06	lda $06da			lda 	gxRadius
.ab97	8d dc 06	sta $06dc			sta 	gYCentre
.ab9a	0a		asl a				asl 	a 							; R x 2
.ab9b	85 36		sta $36				sta 	gxzTemp0
.ab9d	38		sec				sec
.ab9e	a9 03		lda #$03			lda 	#3
.aba0	e5 36		sbc $36				sbc 	gxzTemp0
.aba2	85 38		sta $38				sta 	gxzTemp1
.aba4	a9 00		lda #$00			lda 	#0
.aba6	e9 00		sbc #$00			sbc 	#0
.aba8	85 39		sta $39				sta 	gxzTemp1+1
.abaa	60		rts				rts
.abab					_GXCalculateCentre:
.abab	38		sec				sec
.abac	bd 46 06	lda $0646,x			lda 	gxX1,x
.abaf	7d 42 06	adc $0642,x			adc 	gXX0,x
.abb2	9d 46 06	sta $0646,x			sta 	gXX1,x
.abb5	bd 47 06	lda $0647,x			lda 	gXX1+1,x
.abb8	7d 43 06	adc $0643,x			adc 	gXX0+1,x
.abbb	4a		lsr a				lsr 	a
.abbc	9d 47 06	sta $0647,x			sta 	gXX1+1,x
.abbf	7e 46 06	ror $0646,x			ror 	gXX1,x
.abc2	60		rts				rts
.06da					gxRadius:
>06da							.fill 	1
.06db					gXCentre:
>06db							.fill 	1
.06dc					gYCentre:
>06dc							.fill 	1
.06dd					gxIsFillMode:
>06dd							.fill 	1
.06de					gxYChanged:
>06de							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.abc3					GXClearBitmap:
.abc3	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP running.
.abc6	f0 24		beq $abec			beq 	_GXCBFail
.abc8	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start access
.abcb	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.abcd	ad 4e 06	lda $064e			lda 	gxHeight
.abd0	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.abd2	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.abd4					_GXCalcLastPage:
.abd4	98		tya				tya 								; add to base page
.abd5	18		clc				clc
.abd6	6d 4c 06	adc $064c			adc 	gxBasePage
.abd9	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abdb					_GXClearAll:
.abdb	20 ee ab	jsr $abee			jsr 	_GXClearBlock 				; clear 8k block
.abde	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abe0	a5 0b		lda $0b				lda 	GXEditSlot
.abe2	cd 4c 06	cmp $064c			cmp 	gxBasePage 					; until before base page
.abe5	b0 f4		bcs $abdb			bcs 	_GXClearAll
.abe7	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap	 			; stop access
.abea	18		clc				clc
.abeb	60		rts				rts
.abec					_GXCBFail:
.abec	38		sec				sec
.abed	60		rts				rts
.abee					_GXClearBlock:
.abee	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.abf0	85 38		sta $38				sta 	0+gxzTemp1
.abf2	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.abf4	85 39		sta $39				sta 	1+gxzTemp1
.abf6					_GXCB0:
.abf6	a5 36		lda $36				lda 	gxzTemp0
.abf8	a0 00		ldy #$00			ldy 	#0
.abfa					_GXCB1:
.abfa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abfc	c8		iny				iny
.abfd	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abff	c8		iny				iny
.ac00	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac02	c8		iny				iny
.ac03	91 38		sta ($38),y			sta 	(gxzTemp1),y
.ac05	c8		iny				iny
.ac06	d0 f2		bne $abfa			bne 	_GXCB1
.ac08	e6 39		inc $39				inc 	gxzTemp1+1
.ac0a	a5 39		lda $39				lda 	gxzTemp1+1
.ac0c	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.ac0e	d0 e6		bne $abf6			bne 	_GXCB0
.ac10	60		rts				rts
.ac11					GXInitialise:
.ac11	64 01		stz $01				stz 	1
.ac13	a9 01		lda #$01			lda 	#1
.ac15	8d 00 d0	sta $d000			sta 	$D000
.ac18	18		clc				clc
.ac19	9c 4a 06	stz $064a			stz 	GXSpritesOn
.ac1c	9c 4b 06	stz $064b			stz 	GXBitmapsOn
.ac1f	a2 0f		ldx #$0f			ldx 	#15
.ac21					_GXIClear:
.ac21	9e 3a 06	stz $063a,x			stz 	gxCurrentX,x
.ac24	ca		dex				dex
.ac25	10 fa		bpl $ac21			bpl 	_GXIClear
.ac27	20 c2 ac	jsr $acc2			jsr 	GXClearSpriteStore
.ac2a	60		rts				rts
.ac2b					GXControlBitmap:
.ac2b	64 01		stz $01				stz 	1
.ac2d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac2f	29 01		and #$01			and 	#1 							; set bitmap flag
.ac31	8d 4b 06	sta $064b			sta 	gxBitmapsOn
.ac34	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac35	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac38	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac3a	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac3c	90 02		bcc $ac40			bcc 	_CBNotOn
.ac3e	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac40					_CBNotOn:
.ac40	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac43	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac45	29 07		and #$07			and 	#7
.ac47	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac4a	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac4c	d0 02		bne $ac50			bne 	_CBNotDefault
.ac4e	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac50					_CBNotDefault:
.ac50	8d 4c 06	sta $064c			sta 	gxBasePage
.ac53	20 b4 ac	jsr $acb4			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac56	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac58	8d 03 d1	sta $d103			sta 	$D103
.ac5b	a5 36		lda $36				lda 	gxzTemp0
.ac5d	8d 02 d1	sta $d102			sta 	$D102
.ac60	9c 01 d1	stz $d101			stz 	$D101
.ac63	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac65	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac68	29 01		and #$01			and 	#1
.ac6a	f0 02		beq $ac6e			beq 	_CBHaveHeight
.ac6c	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac6e					_CBHaveHeight
.ac6e	8e 4e 06	stx $064e			stx 	gxHeight
.ac71	18		clc				clc
.ac72	60		rts				rts
.ac73					GXControlSprite:
.ac73	64 01		stz $01				stz 	1
.ac75	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac77	29 01		and #$01			and 	#1 							; set sprites flag
.ac79	8d 4a 06	sta $064a			sta 	gxSpritesOn
.ac7c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac7d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac80	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac82	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac84	90 02		bcc $ac88			bcc 	_CSNotOn
.ac86	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ac88					_CSNotOn:
.ac88	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac8b	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac8d	d0 02		bne $ac91			bne 	_CSNotDefault
.ac8f	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ac91					_CSNotDefault:
.ac91	8d 4d 06	sta $064d			sta 	gxSpritePage
.ac94	20 b4 ac	jsr $acb4			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac97	a5 36		lda $36				lda 	zTemp0
.ac99	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase
.ac9c	a5 37		lda $37				lda 	zTemp0+1
.ac9e	8d 59 06	sta $0659			sta 	GXSpriteOffsetBase+1
.aca1	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.aca3					_CSClear:
.aca3	9e 00 d9	stz $d900,x			stz 	$D900,x
.aca6	9e 00 da	stz $da00,x			stz 	$DA00,x
.aca9	ca		dex				dex
.acaa	d0 f7		bne $aca3			bne 	_CSClear
.acac	9c 57 06	stz $0657			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.acaf	20 c2 ac	jsr $acc2			jsr 	GXClearSpriteStore
.acb2	18		clc				clc
.acb3	60		rts				rts
.acb4					GXCalculateBaseAddress:
.acb4	85 36		sta $36				sta 	gxzTemp0
.acb6	64 37		stz $37				stz 	gxzTemp0+1
.acb8	a9 05		lda #$05			lda 	#5
.acba					_GXShift:
.acba	06 36		asl $36				asl 	gxzTemp0
.acbc	26 37		rol $37				rol 	gxzTemp0+1
.acbe	3a		dec a				dec		a
.acbf	d0 f9		bne $acba			bne 	_GXShift
.acc1	60		rts				rts
.acc2					GXClearSpriteStore:
.acc2	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.acc4					_GXCSSLoop:
.acc4	9e 9a 06	stz $069a,x			stz 	GXSpriteHigh,x
.acc7	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.acc9	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.accc	ca		dex				dex
.accd	10 f5		bpl $acc4			bpl 	_GXCSSLoop
.accf	60		rts				rts
.acd0					GXLine:
.acd0	ad 4b 06	lda $064b			lda 	GXBitmapsOn
.acd3	f0 28		beq $acfd			beq 	_GXLFail
.acd5	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap
.acd8	20 f3 b2	jsr $b2f3			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acdb	20 a3 ad	jsr $ada3			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.acde	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; calculate position/offset.
.ace1					_GXDrawLoop:
.ace1	ac 54 06	ldy $0654			ldy 	gsOffset 					; draw the pixel
.ace4	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ace6	2d 52 06	and $0652			and 	gxANDValue
.ace9	4d 51 06	eor $0651			eor 	gxEORValue
.acec	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acee	20 ff ac	jsr $acff			jsr 	GXLineIsComplete 			; is the line complete ?
.acf1	f0 05		beq $acf8			beq 	_GXLExit
.acf3	20 1a ad	jsr $ad1a			jsr 	GXLineAdvance 				; code as per advance method
.acf6	80 e9		bra $ace1			bra 	_GXDrawLoop
.acf8					_GXLExit:
.acf8	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.acfb	18		clc				clc
.acfc	60		rts				rts
.acfd					_GXLFail:
.acfd	38		sec				sec
.acfe	60		rts				rts
.acff					GXLineIsComplete:
.acff	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger 			; is dy larger
.ad02	d0 0f		bne $ad13			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ad04	ad 42 06	lda $0642			lda 	GXX0 						; compare X, LSB and MSB
.ad07	4d 46 06	eor $0646			eor 	GXX1
.ad0a	d0 06		bne $ad12			bne 	_GXLICExit
.ad0c	ad 43 06	lda $0643			lda 	GXX0+1
.ad0f	4d 47 06	eor $0647			eor 	GXX1+1
.ad12					_GXLICExit:
.ad12	60		rts				rts
.ad13					_GXLICCompareY:
.ad13	ad 48 06	lda $0648			lda 	GXY1
.ad16	4d 44 06	eor $0644			eor 	GXY0
.ad19	60		rts				rts
.ad1a					GXLineAdvance:
.ad1a	18		clc				clc 								; add adjust to position
.ad1b	ad e3 06	lda $06e3			lda 	GXPosition
.ad1e	6d e4 06	adc $06e4			adc 	GXAdjust
.ad21	8d e3 06	sta $06e3			sta 	GXPosition
.ad24	9c e6 06	stz $06e6			stz 	GXAddSelect 				; clear add select flag
.ad27	b0 05		bcs $ad2e			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ad29	cd e5 06	cmp $06e5			cmp 	GXTotal 					; if exceeded total
.ad2c	90 0a		bcc $ad38			bcc 	_GXLANoExtra
.ad2e					_GXLAOverflow:
.ad2e	ce e6 06	dec $06e6			dec 	GXAddSelect 				; set addselect to $FF
.ad31	38		sec				sec 								; subtract total and write back
.ad32	ed e5 06	sbc $06e5			sbc 	GXTotal
.ad35	8d e3 06	sta $06e3			sta 	GXPosition
.ad38					_GXLANoExtra:
.ad38	ad e1 06	lda $06e1			lda 	GXIsDiffYLarger
.ad3b	f0 0d		beq $ad4a			beq 	_GXDXLarger
.ad3d	20 9c ad	jsr $ad9c			jsr 	GXIncrementY
.ad40	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad43	f0 10		beq $ad55			beq 	_GXLAExit
.ad45	20 56 ad	jsr $ad56			jsr 	GXAdjustX
.ad48	80 0b		bra $ad55			bra 	_GXLAExit
.ad4a					_GXDXLarger:
.ad4a	20 56 ad	jsr $ad56			jsr 	GXAdjustX
.ad4d	ad e6 06	lda $06e6			lda 	GXAddSelect
.ad50	f0 03		beq $ad55			beq 	_GXLAExit
.ad52	20 9c ad	jsr $ad9c			jsr 	GXIncrementY
.ad55					_GXLAExit:
.ad55	60		rts				rts
.ad56					GXAdjustX:
.ad56	ad e2 06	lda $06e2			lda 	GXDXNegative
.ad59	10 25		bpl $ad80			bpl 	_GXAXRight
.ad5b	ad 42 06	lda $0642			lda 	GXX0
.ad5e	d0 03		bne $ad63			bne 	_GXAXNoBorrow
.ad60	ce 43 06	dec $0643			dec 	GXX0+1
.ad63					_GXAXNoBorrow:
.ad63	ce 42 06	dec $0642			dec 	GXX0
.ad66	ce 54 06	dec $0654			dec 	gsOffset 					; pixel left
.ad69	ad 54 06	lda $0654			lda 	gsOffset
.ad6c	c9 ff		cmp #$ff			cmp 	#$FF
.ad6e	d0 0f		bne $ad7f			bne 	_GXAYExit 					; underflow
.ad70	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad72	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad74	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad76	b0 07		bcs $ad7f			bcs 	_GXAYExit
.ad78	18		clc				clc
.ad79	69 20		adc #$20			adc 	#$20 						; fix up
.ad7b	85 3d		sta $3d				sta 	gxzScreen+1
.ad7d	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad7f					_GXAYExit:
.ad7f	60		rts				rts
.ad80					_GXAXRight:
.ad80	ee 42 06	inc $0642			inc 	GXX0
.ad83	d0 03		bne $ad88			bne 	_GXAXNoCarry
.ad85	ee 43 06	inc $0643			inc 	GXX0+1
.ad88					_GXAXNoCarry:
.ad88	ee 54 06	inc $0654			inc 	gsOffset 					; pixel right
.ad8b	d0 0e		bne $ad9b			bne 	_GXAXExit 					; if not overflowed, exit.
.ad8d	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ad8f	a5 3d		lda $3d				lda 	gxzScreen+1
.ad91	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ad93	90 06		bcc $ad9b			bcc 	_GXAXExit
.ad95	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ad97	85 3d		sta $3d				sta 	gxzScreen+1
.ad99	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ad9b					_GXAXExit:
.ad9b	60		rts				rts
.ad9c					GXIncrementY:
.ad9c	ee 44 06	inc $0644			inc 	GXY0
.ad9f	20 13 b2	jsr $b213			jsr 	GXMovePositionDown
.ada2	60		rts				rts
.ada3					GXLineSetup:
.ada3	ad 48 06	lda $0648			lda 	GXY1
.ada6	38		sec				sec
.ada7	ed 44 06	sbc $0644			sbc 	GXY0
.adaa	4a		lsr a				lsr 	a
.adab	8d e0 06	sta $06e0			sta 	GXDiffY
.adae	9c e2 06	stz $06e2			stz 	GXDXNegative 				; clear -ve flag
.adb1	38		sec				sec
.adb2	ad 46 06	lda $0646			lda 	GXX1
.adb5	ed 42 06	sbc $0642			sbc 	GXX0
.adb8	8d df 06	sta $06df			sta 	GXDiffX
.adbb	ad 47 06	lda $0647			lda 	GXX1+1 						; calculate MSB
.adbe	ed 43 06	sbc $0643			sbc 	GXX0+1
.adc1	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.adc2	6e df 06	ror $06df			ror 	GXDiffX
.adc5	0a		asl a				asl 	a
.adc6	10 0c		bpl $add4			bpl 	_GDXNotNegative
.adc8	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.adca	38		sec				sec
.adcb	ed df 06	sbc $06df			sbc 	GXDiffX
.adce	8d df 06	sta $06df			sta 	GXDiffX
.add1	ce e2 06	dec $06e2			dec 	GXDXNegative 				; -ve flag = $FF.
.add4					_GDXNotNegative:
.add4	9c e1 06	stz $06e1			stz 	GXIsDiffYLarger 			; clear larger flag
.add7	ad e0 06	lda $06e0			lda 	GXDiffY 					; set adjust and total.
.adda	8d e4 06	sta $06e4			sta 	GXAdjust
.addd	ad df 06	lda $06df			lda 	GXDiffX
.ade0	8d e5 06	sta $06e5			sta 	GXTotal
.ade3	ad e0 06	lda $06e0			lda 	GXDiffY 					; if dy > dx
.ade6	cd df 06	cmp $06df			cmp 	GXDiffX
.ade9	90 0f		bcc $adfa			bcc 	_GDXNotLarger
.adeb	ce e1 06	dec $06e1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.adee	ad df 06	lda $06df			lda 	GXDiffX 					; set adjust and total other way round
.adf1	8d e4 06	sta $06e4			sta 	GXAdjust
.adf4	ad e0 06	lda $06e0			lda 	GXDiffY
.adf7	8d e5 06	sta $06e5			sta 	GXTotal
.adfa					_GDXNotLarger:
.adfa	ad e5 06	lda $06e5			lda 	GXTotal
.adfd	4a		lsr a				lsr 	a
.adfe	8d e3 06	sta $06e3			sta 	GXPosition
.ae01	60		rts				rts
.06df					GXDiffX:
>06df							.fill 	1
.06e0					GXDiffY:
>06e0							.fill 	1
.06e1					GXIsDiffYLarger:
>06e1							.fill 	1
.06e2					GXDXNegative:
>06e2							.fill 	1
.06e3					GXPosition:
>06e3							.fill 	1
.06e4					GXAdjust:
>06e4							.fill 	1
.06e5					GXTotal:
>06e5							.fill 	1
.06e6					GXAddSelect:
>06e6							.fill 	1
.ae02					GXSetColourMode:
.ae02	a6 36		ldx $36				ldx 	gxzTemp0
.ae04	8e 50 06	stx $0650			stx 	gxColour 								; set colour
.ae07	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ae09	8d 4f 06	sta $064f			sta 	gxMode 									; set mode
.ae0c	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ae0e	9c 52 06	stz $0652			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ae11	ae 50 06	ldx $0650			ldx 	gxColour
.ae14	8e 51 06	stx $0651			stx 	gxEORValue
.ae17	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ae19	90 03		bcc $ae1e			bcc 	_GXSDCNotAndColour
.ae1b	8e 52 06	stx $0652			stx 	gxANDValue
.ae1e					_GXSDCNotAndColour:
.ae1e	d0 03		bne $ae23			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ae20	9c 51 06	stz $0651			stz 	gxEORValue
.ae23					_GXSDCNotAnd:
.ae23	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ae24	90 08		bcc $ae2e			bcc 	_GXSDCNoFlip
.ae26	ad 52 06	lda $0652			lda	 	gxANDValue
.ae29	49 ff		eor #$ff			eor 	#$FF
.ae2b	8d 52 06	sta $0652			sta 	gxANDValue
.ae2e					_GXSDCNoFlip:
.ae2e	18		clc				clc
.ae2f	60		rts				rts
.ae30					GXPlotPoint:
.ae30	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start drawing
.ae33	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae36	ac 54 06	ldy $0654			ldy 	gsOffset
.ae39	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae3b	2d 52 06	and $0652			and 	gxANDValue
.ae3e	4d 51 06	eor $0651			eor 	gxEORValue
.ae41	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae43	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae46	18		clc				clc
.ae47	60		rts				rts
.ae48					GXFillRectangle:
.ae48	38		sec				sec
.ae49	80 01		bra $ae4c			bra 	GXRectangle
.ae4b					GXFrameRectangle:
.ae4b	18		clc				clc
.ae4c					GXRectangle:
.ae4c	ad 4b 06	lda $064b			lda 	gxBitmapsOn
.ae4f	f0 35		beq $ae86			beq 	_GXRFail
.ae51	08		php				php 								; save Fill flag (CS)
.ae52	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; start drawing
.ae55	20 d5 b2	jsr $b2d5			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae58	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae5b	38		sec				sec 								; sec = Draw line
.ae5c	20 88 ae	jsr $ae88			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae5f	ad 44 06	lda $0644			lda 	gxY0 						; reached end of rectangle ?
.ae62	cd 48 06	cmp $0648			cmp 	gxY1
.ae65	f0 19		beq $ae80			beq 	_GXRectangleExit
.ae67					_GXRectLoop:
.ae67	20 13 b2	jsr $b213			jsr 	GXMovePositionDown 			; down one.
.ae6a	ee 44 06	inc $0644			inc 	gxY0 						; change Y pos
.ae6d	ad 44 06	lda $0644			lda 	gxY0 						; reached last line
.ae70	cd 48 06	cmp $0648			cmp 	gXY1
.ae73	f0 07		beq $ae7c			beq 	_GXLastLine
.ae75	28		plp				plp 								; get flag back
.ae76	08		php				php
.ae77	20 88 ae	jsr $ae88			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae7a	80 eb		bra $ae67			bra 	_GXRectLoop
.ae7c					_GXLastLine:
.ae7c	38		sec				sec
.ae7d	20 88 ae	jsr $ae88			jsr 	GXDrawLineX1X0
.ae80					_GXRectangleExit:
.ae80	68		pla				pla 								; throw fill flag.
.ae81	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae84	18		clc				clc
.ae85	60		rts				rts
.ae86					_GXRFail:
.ae86	38		sec				sec
.ae87	60		rts				rts
.ae88					GXDrawLineX1X0:
.ae88	08		php				php 								; save solid/either-end
.ae89	38		sec				sec
.ae8a	ad 46 06	lda $0646			lda		gXX1
.ae8d	ed 42 06	sbc $0642			sbc 	gXX0
.ae90	85 36		sta $36				sta 	gxzTemp0
.ae92	ad 47 06	lda $0647			lda 	gXX1+1
.ae95	ed 43 06	sbc $0643			sbc 	gXX0+1
.ae98	85 37		sta $37				sta 	gxzTemp0+1
.ae9a	28		plp				plp
.ae9b					GXDrawLineTemp0:
.ae9b	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.ae9d	48		pha				pha
.ae9e	a5 3d		lda $3d				lda 	gxzScreen+1
.aea0	48		pha				pha
.aea1	ad 54 06	lda $0654			lda 	gsOffset
.aea4	48		pha				pha
.aea5	a5 0b		lda $0b				lda 	GXEditSlot
.aea7	48		pha				pha
.aea8	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y offset
.aeab	90 1e		bcc $aecb			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.aead					_GXDLTLine:
.aead	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aeaf	2d 52 06	and $0652			and 	gxANDValue
.aeb2	4d 51 06	eor $0651			eor 	gxEORValue
.aeb5	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aeb7	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.aeb9	d0 04		bne $aebf			bne 	_GXDLTNoBorrow
.aebb	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.aebd	30 2e		bmi $aeed			bmi 	_GXDLTExit
.aebf					_GXDLTNoBorrow:
.aebf	c6 36		dec $36				dec 	gxzTemp0
.aec1	c8		iny				iny 								; next slot.
.aec2	d0 e9		bne $aead			bne 	_GXDLTLine
.aec4	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.aec6	20 fb ae	jsr $aefb			jsr 	GXDLTCheckWrap				; check for new page.
.aec9	80 e2		bra $aead			bra 	_GXDLTLine
.aecb					_GXDLTEndPoints:
.aecb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.aecd	2d 52 06	and $0652			and 	gxANDValue
.aed0	4d 51 06	eor $0651			eor 	gxEORValue
.aed3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aed5	98		tya				tya 								; advance to right side
.aed6	18		clc				clc
.aed7	65 36		adc $36				adc 	gxzTemp0
.aed9	a8		tay				tay
.aeda	a5 3d		lda $3d				lda 	gxzScreen+1
.aedc	65 37		adc $37				adc 	gxzTemp0+1
.aede	85 3d		sta $3d				sta 	gxzScreen+1
.aee0	20 fb ae	jsr $aefb			jsr 	GXDLTCheckWrap 			; fix up.
.aee3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aee5	2d 52 06	and $0652			and 	gxANDValue
.aee8	4d 51 06	eor $0651			eor 	gxEORValue
.aeeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aeed					_GXDLTExit:
.aeed	68		pla				pla
.aeee	85 0b		sta $0b				sta 	GXEditSlot
.aef0	68		pla				pla
.aef1	8d 54 06	sta $0654			sta 	gsOffset
.aef4	68		pla				pla
.aef5	85 3d		sta $3d				sta 	gxzScreen+1
.aef7	68		pla				pla
.aef8	85 3c		sta $3c				sta 	gxzScreen
.aefa	60		rts				rts
.aefb					GXDLTCheckWrap:
.aefb	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.aefd	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.aeff	90 06		bcc $af07			bcc 	_GXDLTCWExit
.af01	e9 20		sbc #$20			sbc 	#$20 						; fix up
.af03	85 3d		sta $3d				sta 	gxzScreen+1
.af05	e6 0b		inc $0b				inc 	GXEditSlot
.af07					_GXDLTCWExit:
.af07	60		rts				rts
.af08					GXDrawGraphicElement:
.af08	8d e7 06	sta $06e7			sta 	gxSize 						; save size
.af0b	3a		dec a				dec 	a
.af0c	8d e8 06	sta $06e8			sta 	gxMask 						; and mask
.af0f	ad 4b 06	lda $064b			lda 	gxBitmapsOn 				; check BMP on
.af12	f0 67		beq $af7b			beq 	_GXSLFail
.af14	ad 44 06	lda $0644			lda 	gxY0 						; push Y on stack
.af17	48		pha				pha
.af18	8c ea 06	sty $06ea			sty 	gxAcquireVector+1 			; and acquisition vector
.af1b	8e e9 06	stx $06e9			stx 	gxAcquireVector
.af1e	20 ad b1	jsr $b1ad			jsr 	gxOpenBitmap 				; open the bitmap.
.af21	ad ec 06	lda $06ec			lda 	gxUseMode 					; scale bits
.af24	4a		lsr a				lsr 	a
.af25	4a		lsr a				lsr 	a
.af26	4a		lsr a				lsr 	a
.af27	29 07		and #$07			and		#7
.af29	1a		inc a				inc 	a
.af2a	8d eb 06	sta $06eb			sta 	gxScale
.af2d	64 38		stz $38				stz 	gxzTemp1					; start first line
.af2f					_GXGELoop:
.af2f	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af31	2c ec 06	bit $06ec			bit 	gxUseMode 					; check for flip.
.af34	10 06		bpl $af3c			bpl		_GXNoVFlip
.af36	ad e8 06	lda $06e8			lda 	gxMask
.af39	38		sec				sec
.af3a	e5 38		sbc $38				sbc 	gxzTemp1
.af3c					_GXNoVFlip:
.af3c	aa		tax				tax 								; get the Xth line.
.af3d	20 7d af	jsr $af7d			jsr 	_GXCallAcquire 				; get that data.
.af40	ad eb 06	lda $06eb			lda 	gxScale 					; do scale identical copies of that line.
.af43	85 39		sta $39				sta 	gxzTemp1+1
.af45					_GXGELoop2:
.af45	ad 44 06	lda $0644			lda 	gxY0 						; off screen
.af48	cd 4e 06	cmp $064e			cmp 	gxHeight
.af4b	b0 10		bcs $af5d			bcs 	_GXDGEExit
.af4d	20 80 af	jsr $af80			jsr 	GXRenderOneLine 			; render line
.af50	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af52	d0 f1		bne $af45			bne 	_GXGELoop2
.af54	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af56	a5 38		lda $38				lda 	gxzTemp1
.af58	cd e7 06	cmp $06e7			cmp 	gxSize
.af5b	d0 d2		bne $af2f			bne 	_GXGELoop
.af5d					_GXDGEExit:
.af5d	68		pla				pla 								; restore Y for next time
.af5e	8d 44 06	sta $0644			sta 	gxY0
.af61	ae eb 06	ldx $06eb			ldx 	gxScale 					; get scale (1-8)
.af64					_GXShiftLeft:
.af64	18		clc				clc
.af65	ad e7 06	lda $06e7			lda 	gxSize
.af68	6d 42 06	adc $0642			adc 	gxX0
.af6b	8d 42 06	sta $0642			sta 	gxX0
.af6e	90 03		bcc $af73			bcc 	_GXSLNoCarry
.af70	ee 43 06	inc $0643			inc 	gxX0+1
.af73					_GXSLNoCarry:
.af73	ca		dex				dex
.af74	d0 ee		bne $af64			bne 	_GXShiftLeft
.af76	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.af79	18		clc				clc
.af7a	60		rts				rts
.af7b					_GXSLFail:
.af7b	38		sec				sec
.af7c	60		rts				rts
.af7d					_GXCallAcquire:
.af7d	6c e9 06	jmp ($06e9)			jmp 	(gxAcquireVector)
.af80					GXRenderOneLine:
.af80	20 bd b1	jsr $b1bd			jsr 	GXPositionCalc 				; calculate position/offset.
.af83	ac 54 06	ldy $0654			ldy 	gsOffset 					; Y contains position.
.af86	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.af88					_GXROLLoop1:
.af88	ad eb 06	lda $06eb			lda 	gxScale 					; set to do 'scale' times
.af8b	85 3b		sta $3b				sta 	gxzTemp2+1
.af8d					_GXROLLoop2:
.af8d	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.af8f	2c 4f 06	bit $064f			bit 	gxMode 						; check H Flip
.af92	50 06		bvc $af9a			bvc 	_GXNoHFlip
.af94	ad e8 06	lda $06e8			lda 	gxMask
.af97	38		sec				sec
.af98	e5 3a		sbc $3a				sbc 	gxzTemp2
.af9a					_GXNoHFlip:
.af9a	aa		tax				tax 								; read from the pixel buffer
.af9b	bd f9 05	lda $05f9,x			lda 	gxPixelBuffer,x
.af9e	d0 07		bne $afa7			bne 	_GXDraw 					; draw if non zero
.afa0	ad ec 06	lda $06ec			lda 	gxUseMode 					; check to see if solid background
.afa3	29 04		and #$04			and 	#4
.afa5	f0 0a		beq $afb1			beq 	_GXZeroPixel
.afa7					_GXDraw:
.afa7	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.afa9	2d 52 06	and $0652			and 	gxANDValue
.afac	5d f9 05	eor $05f9,x			eor 	gxPixelBuffer,x
.afaf	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.afb1					_GXZeroPixel:
.afb1	c8		iny				iny 								; advance pointer
.afb2	d0 05		bne $afb9			bne 	_GXNoShift
.afb4	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.afb6	20 fb ae	jsr $aefb			jsr 	GXDLTCheckWrap				; check for new page.
.afb9					_GXNoShift:
.afb9	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.afbb	d0 d0		bne $af8d			bne 	_GXROLLoop2
.afbd	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.afbf	a5 3a		lda $3a				lda 	gxzTemp2
.afc1	cd e7 06	cmp $06e7			cmp 	gxSize
.afc4	d0 c2		bne $af88			bne 	_GXROLLoop1
.afc6	ee 44 06	inc $0644			inc 	gxY0
.afc9	60		rts				rts
.06e7					gxSize:
>06e7							.fill 	1
.06e8					gxMask:
>06e8							.fill 	1
.06e9					gxAcquireVector:
>06e9							.fill 	2
.06eb					gxScale:
>06eb							.fill 	1
.06ec					gxUseMode:
>06ec							.fill 	1
.afca					GXFontHandler:
.afca	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afcc	4d 4f 06	eor $064f			eor 	gxMode
.afcf	8d ec 06	sta $06ec			sta 	gxUseMode
.afd2	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afd4	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.afd6	26 37		rol $37				rol	 	gxzTemp0+1
.afd8	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.afda	26 37		rol $37				rol	 	gxzTemp0+1
.afdc	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.afde	26 37		rol $37				rol	 	gxzTemp0+1
.afe0	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.afe2	09 c0		ora #$c0			ora 	#$C0
.afe4	85 37		sta $37				sta 	gxzTemp0+1
.afe6	a9 08		lda #$08			lda 	#8 							; size 8x8
.afe8	a2 f0		ldx #$f0			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.afea	a0 af		ldy #$af			ldy 	#GXGetGraphicDataFont >> 8
.afec	20 08 af	jsr $af08			jsr 	GXDrawGraphicElement
.afef	60		rts				rts
.aff0					GXGetGraphicDataFont:
.aff0	8a		txa				txa 								; X->Y
.aff1	a8		tay				tay
.aff2	a6 01		ldx $01				ldx 	1 							; preserve old value
.aff4	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.aff6	85 01		sta $01				sta 	1
.aff8	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.affa	86 01		stx $01				stx 	1 							; put old value back.
.affc	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.affe					_GXExpand:
.affe	9e f9 05	stz $05f9,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.b001	0a		asl a				asl 	a 							; shift bit 7 into C
.b002	90 08		bcc $b00c			bcc 	_GXNoPixel
.b004	48		pha				pha 								; if set, set pixel buffer to current colour.
.b005	ad 50 06	lda $0650			lda 	gxColour
.b008	9d f9 05	sta $05f9,x			sta 	gxPixelBuffer,x
.b00b	68		pla				pla
.b00c					_GXNoPixel:
.b00c	e8		inx				inx 								; do the whole byte.
.b00d	e0 08		cpx #$08			cpx 	#8
.b00f	d0 ed		bne $affe			bne 	_GXExpand
.b011	60		rts				rts
.b012					GXSpriteHandler:
.b012	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.b014	4d 4f 06	eor $064f			eor 	gxMode
.b017	8d ec 06	sta $06ec			sta 	gxUseMode
.b01a	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.b01c	da		phx				phx
.b01d	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap 				; can access sprite information
.b020	68		pla				pla
.b021	20 8e b2	jsr $b28e			jsr 	GXFindSprite 				; get the sprite address
.b024	08		php				php
.b025	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.b028	28		plp				plp
.b029	b0 0a		bcs $b035			bcs		_GXSHExit 					; exit if find failed.
.b02b	ad ed 06	lda $06ed			lda 	GXSizePixels 				; return size
.b02e	a2 36		ldx #$36			ldx 	#GXSpriteAcquire & $FF
.b030	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b032	20 08 af	jsr $af08			jsr 	GXDrawGraphicElement
.b035					_GXSHExit:
.b035	60		rts				rts
.b036					GXSpriteAcquire:
.b036	ad 4d 06	lda $064d			lda 	GXSpritePage				; point to base page
.b039	85 0b		sta $0b				sta 	GXEditSlot
.b03b	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b03d	a9 00		lda #$00			lda 	#0
.b03f	ae ee 06	ldx $06ee			ldx 	GXSizeBits
.b042					_GXTimesRowNumber:
.b042	18		clc				clc
.b043	65 36		adc $36				adc 	zTemp0
.b045	ca		dex				dex
.b046	10 fa		bpl $b042			bpl 	_GXTimesRowNumber
.b048	64 37		stz $37				stz 	gxzTemp0+1
.b04a	0a		asl a				asl 	a 							; row x 2,4,6,8
.b04b	26 37		rol $37				rol 	gxzTemp0+1
.b04d	0a		asl a				asl 	a 							; row x 4,8,12,16
.b04e	26 37		rol $37				rol 	gxzTemp0+1
.b050	0a		asl a				asl 	a 							; row x 8,16,24,32
.b051	26 37		rol $37				rol 	gxzTemp0+1
.b053	85 36		sta $36				sta 	gxzTemp0
.b055	18		clc				clc 								; add base address.
.b056	a5 36		lda $36				lda 	gxzTemp0
.b058	6d f0 06	adc $06f0			adc 	GXSpriteOffset
.b05b	85 36		sta $36				sta 	gxzTemp0
.b05d	a5 37		lda $37				lda 	gxzTemp0+1
.b05f	6d f1 06	adc $06f1			adc 	GXSpriteOffset+1
.b062					_GXSAFindPage:
.b062	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b064	90 06		bcc $b06c			bcc 	_GXSAFoundPage
.b066	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b068	e6 0b		inc $0b				inc 	GXEditSlot
.b06a	80 f6		bra $b062			bra 	_GXSAFindPage
.b06c					_GXSAFoundPage:
.b06c	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b06e	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b070	a0 00		ldy #$00			ldy 	#0
.b072					_GXSACopyLoop:
.b072	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b074	99 f9 05	sta $05f9,y			sta 	gxPixelBuffer,y
.b077	c8		iny				iny
.b078	cc ed 06	cpy $06ed			cpy 	GXSizePixels
.b07b	d0 f5		bne $b072			bne 	_GXSACopyLoop
.b07d	60		rts				rts
.b07e					GXSelect:
.b07e	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b081	f0 22		beq $b0a5			beq 	_GXSFail
.b083	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b085	c9 40		cmp #$40			cmp 	#64
.b087	b0 1c		bcs $b0a5			bcs 	_GXSFail
.b089	8d 55 06	sta $0655			sta 	GSCurrentSpriteID
.b08c	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b08e	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b090	06 36		asl $36				asl 	gxzTemp0
.b092	06 36		asl $36				asl 	gxzTemp0
.b094	06 36		asl $36				asl 	gxzTemp0
.b096	2a		rol a				rol 	a
.b097	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b099	8d 57 06	sta $0657			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b09c	85 37		sta $37				sta 	gxzTemp0+1
.b09e	a5 36		lda $36				lda 	gxzTemp0
.b0a0	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr
.b0a3	18		clc				clc
.b0a4	60		rts				rts
.b0a5					_GXSFail:
.b0a5	38		sec				sec
.b0a6	60		rts				rts
.b0a7					GXSelectImage:
.b0a7	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b0aa	f0 74		beq $b120			beq 	_GXSIFail
.b0ac	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b0af	f0 6f		beq $b120			beq 	_GXSIFail 					; (checking the MSB)
.b0b1	64 01		stz $01				stz 	1
.b0b3	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b0b5	d0 6b		bne $b122			bne 	_GXSIHide
.b0b7	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b0b9	48		pha				pha
.b0ba	20 ad b1	jsr $b1ad			jsr 	GXOpenBitmap
.b0bd	68		pla				pla
.b0be	20 8e b2	jsr $b28e			jsr 	GXFindSprite
.b0c1	b0 5a		bcs $b11d			bcs 	_GXSICloseFail 				; no image
.b0c3	a0 01		ldy #$01			ldy 	#1
.b0c5	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b0c8	85 36		sta $36				sta 	gxzTemp0
.b0ca	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b0cd	85 37		sta $37				sta 	gxzTemp0+1
.b0cf	ad f0 06	lda $06f0			lda 	GXSpriteOffset
.b0d2	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0d4	18		clc				clc
.b0d5	ad f1 06	lda $06f1			lda 	GXSpriteOffset+1
.b0d8	6d 58 06	adc $0658			adc 	GXSpriteOffsetBase
.b0db	c8		iny				iny
.b0dc	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0de	ad 59 06	lda $0659			lda 	GXSpriteOffsetBase+1
.b0e1	69 00		adc #$00			adc 	#0
.b0e3	c8		iny				iny
.b0e4	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0e6	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get raw size
.b0e9	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b0eb	2a		rol a				rol 	a 							; x 2
.b0ec	0a		asl a				asl 	a 							; x 4
.b0ed	0a		asl a				asl 	a 							; x 8
.b0ee	0a		asl a				asl 	a 							; x 16
.b0ef	0d ef 06	ora $06ef			ora 	GXSpriteLUT 				; Or with LUT
.b0f2	0a		asl a				asl 	a 							; 1 shift
.b0f3	09 01		ora #$01			ora 	#1 							; enable sprite.
.b0f5	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b0f7	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.b0fa	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b0fd	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b100	29 3f		and #$3f			and 	#$3F
.b102	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b105	ad ee 06	lda $06ee			lda 	GXSizeBits 					; get bit size
.b108	6a		ror a				ror 	a 							; shift into bits 6/7
.b109	6a		ror a				ror 	a
.b10a	6a		ror a				ror 	a
.b10b	29 c0		and #$c0			and 	#$C0
.b10d	1d 9a 06	ora $069a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b110	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b113	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b116	29 7f		and #$7f			and 	#$7F
.b118	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b11b	18		clc				clc
.b11c	60		rts				rts
.b11d					_GXSICloseFail:
.b11d	20 b5 b1	jsr $b1b5			jsr 	GXCloseBitmap
.b120					_GXSIFail:
.b120	38		sec				sec
.b121	60		rts				rts
.b122					_GXSIHide:
.b122	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b125	85 36		sta $36				sta 	gxzTemp0
.b127	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1
.b12a	85 37		sta $37				sta 	gxzTemp0+1
.b12c	a9 00		lda #$00			lda 	#0
.b12e	92 36		sta ($36)			sta 	(gxzTemp0)
.b130	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get sprite ID
.b133	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b136	09 80		ora #$80			ora 	#$80
.b138	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b13b	18		clc				clc
.b13c	60		rts				rts
.b13d					GXMoveSprite:
.b13d	ad 4a 06	lda $064a			lda 	gxSpritesOn
.b140	f0 65		beq $b1a7			beq 	_GXSIFail
.b142	ad 57 06	lda $0657			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b145	f0 60		beq $b1a7			beq 	_GXSIFail
.b147	85 37		sta $37				sta 	gxzTemp0+1
.b149	a0 04		ldy #$04			ldy 	#4
.b14b	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr
.b14e	85 36		sta $36				sta 	gxzTemp0
.b150	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b153	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b156	2a		rol a				rol 	a	 						; into bits 0,1.
.b157	2a		rol a				rol 	a
.b158	2a		rol a				rol 	a
.b159	29 03		and #$03			and 	#3
.b15b	aa		tax				tax
.b15c	bd a9 b1	lda $b1a9,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b15f	48		pha				pha
.b160	18		clc				clc
.b161	6d 42 06	adc $0642			adc 	gxX0						; copy position.
.b164	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b166	c8		iny				iny
.b167	ad 43 06	lda $0643			lda 	gxX0+1
.b16a	69 00		adc #$00			adc 	#0
.b16c	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b16e	c8		iny				iny
.b16f	68		pla				pla
.b170	18		clc				clc
.b171	6d 44 06	adc $0644			adc 	gxY0
.b174	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b176	a9 00		lda #$00			lda 	#0
.b178	69 00		adc #$00			adc 	#0
.b17a	c8		iny				iny
.b17b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b17d	4e 43 06	lsr $0643			lsr 	gxX0+1 						; divide X by 4
.b180	6e 42 06	ror $0642			ror 	gxX0
.b183	4e 42 06	lsr $0642			lsr 	gxX0
.b186	4e 44 06	lsr $0644			lsr 	gxY0 						; divide Y by 4
.b189	4e 44 06	lsr $0644			lsr 	gxY0
.b18c	ae 55 06	ldx $0655			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b18f	bd 5a 06	lda $065a,x			lda 	GXSpriteLow,x
.b192	29 80		and #$80			and 	#$80
.b194	0d 42 06	ora $0642			ora 	gxX0
.b197	9d 5a 06	sta $065a,x			sta 	GXSpriteLow,x
.b19a	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b19d	29 c0		and #$c0			and 	#$C0
.b19f	0d 44 06	ora $0644			ora 	gxY0
.b1a2	9d 9a 06	sta $069a,x			sta 	GXSpriteHigh,x
.b1a5	18		clc				clc
.b1a6	60		rts				rts
.b1a7					_GXSIFail:
.b1a7	38		sec				sec
.b1a8	60		rts				rts
.b1a9					_GXMSOffset:
>b1a9	1c						.byte 	32-8/2
>b1aa	18						.byte 	32-16/2
>b1ab	14						.byte 	32-24/2
>b1ac	10						.byte 	32-32/2
.b1ad					GXOpenBitmap:
.b1ad	78		sei				sei 								; no interrupts here
.b1ae	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b1b0	8d 53 06	sta $0653			sta 	gxOriginalLUTValue
.b1b3	58		cli				cli
.b1b4	60		rts				rts
.b1b5					GXCloseBitmap:
.b1b5	78		sei				sei
.b1b6	ad 53 06	lda $0653			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b1b9	85 0b		sta $0b				sta 	GXEditSlot
.b1bb	58		cli				cli
.b1bc	60		rts				rts
.b1bd					GXPositionCalc:
.b1bd	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b1bf	48		pha				pha
.b1c0	ad 44 06	lda $0644			lda 	GXY0 						; gxzScreen = Y0
.b1c3	85 3c		sta $3c				sta 	gxzScreen
.b1c5	64 3d		stz $3d				stz 	gxzScreen+1
.b1c7	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b1c9	26 3d		rol $3d				rol 	gxzScreen+1
.b1cb	06 3c		asl $3c				asl 	gxzScreen
.b1cd	26 3d		rol $3d				rol 	gxzScreen+1
.b1cf	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b1d0	65 3c		adc $3c				adc 	gxzScreen
.b1d2	85 3c		sta $3c				sta 	gxzScreen
.b1d4	90 02		bcc $b1d8			bcc 	_GXPCNoCarry
.b1d6	e6 3d		inc $3d				inc 	gxzScreen+1
.b1d8					_GXPCNoCarry:
.b1d8	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1da	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1dc	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1de	85 36		sta $36				sta 	gxzTemp0
.b1e0	64 3d		stz $3d				stz 	gxzScreen+1
.b1e2	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1e4					_GXPCMultiply32:
.b1e4	06 3c		asl $3c				asl 	gxzScreen
.b1e6	26 3d		rol $3d				rol 	gxzScreen+1
.b1e8	3a		dec a				dec 	a
.b1e9	d0 f9		bne $b1e4			bne 	_GXPCMultiply32
.b1eb	18		clc				clc
.b1ec	ad 42 06	lda $0642			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b1ef	65 3c		adc $3c				adc 	gxzScreen
.b1f1	8d 54 06	sta $0654			sta 	gsOffset
.b1f4	ad 43 06	lda $0643			lda 	GXX0+1
.b1f7	65 3d		adc $3d				adc 	gxzScreen+1
.b1f9	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b1fb	90 04		bcc $b201			bcc 	_GXPCNoOverflow
.b1fd	29 1f		and #$1f			and 	#$1F 						; fix it up
.b1ff	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b201					_GXPCNoOverflow:
.b201	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b203	85 3d		sta $3d				sta 	gxzScreen+1
.b205	64 3c		stz $3c				stz 	gxzScreen
.b207	18		clc				clc
.b208	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b20a	6d 4c 06	adc $064c			adc 	gxBasePage 					; by adding the base page
.b20d	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b20f	68		pla				pla
.b210	85 36		sta $36				sta 	gxzTemp0
.b212	60		rts				rts
.b213					GXMovePositionDown:
.b213	18		clc				clc 								; add 320 to offset/temp+1
.b214	ad 54 06	lda $0654			lda 	gsOffset
.b217	69 40		adc #$40			adc 	#64
.b219	8d 54 06	sta $0654			sta 	gsOffset
.b21c	a5 3d		lda $3d				lda 	gxzScreen+1
.b21e	69 01		adc #$01			adc 	#1
.b220	85 3d		sta $3d				sta 	gxzScreen+1
.b222	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b224	90 07		bcc $b22d			bcc 	_GXMPDExit
.b226	38		sec				sec  								; next page
.b227	e9 20		sbc #$20			sbc 	#$20
.b229	85 3d		sta $3d				sta 	gxzScreen+1
.b22b	e6 0b		inc $0b				inc 	GXEditSlot
.b22d					_GXMPDExit:
.b22d	60		rts				rts
.b22e					GXCollide:
.b22e	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b230	aa		tax				tax
.b231	05 37		ora $37				ora 	gxzTemp0+1
.b233	29 c0		and #$c0			and 	#$C0
.b235	38		sec				sec
.b236	d0 53		bne $b28b			bne 	_GXCollideFail 				; if either >= 64, fail.
.b238	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b23a	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b23d	1d 5a 06	ora $065a,x			ora 	GXSpriteLow,x
.b240	30 48		bmi $b28a			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b242	18		clc				clc 								; need to calculate sum of sizes.
.b243	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y
.b246	7d 9a 06	adc $069a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b249	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b24b	6a		ror a				ror 	a 							; 5/6/7
.b24c	4a		lsr a				lsr 	a 							; 4/5/6
.b24d	4a		lsr a				lsr 	a 							; 3/4/5
.b24e	4a		lsr a				lsr 	a 							; 2/3/4
.b24f	18		clc				clc
.b250	69 08		adc #$08			adc 	#$08
.b252	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b253	4a		lsr a				lsr 	a
.b254	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b256	b9 9a 06	lda $069a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b259	29 3f		and #$3f			and 	#$3F
.b25b	85 39		sta $39				sta 	gxzTemp1+1
.b25d	38		sec				sec
.b25e	bd 9a 06	lda $069a,x			lda 	GXSpriteHigh,x
.b261	29 3f		and #$3f			and 	#$3F
.b263	e5 39		sbc $39				sbc 	gxzTemp1+1
.b265	b0 03		bcs $b26a			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b267	49 ff		eor #$ff			eor 	#$FF
.b269	1a		inc a				inc 	a
.b26a					_GXCAbs1:
.b26a	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b26c	b0 1c		bcs $b28a			bcs 	_GXOkayFail
.b26e	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b270	38		sec				sec 								; calculate |x1-x0|
.b271	b9 5a 06	lda $065a,y			lda 	GXSpriteLow,y
.b274	fd 5a 06	sbc $065a,x			sbc 	GXSpriteLow,x
.b277	b0 03		bcs $b27c			bcs 	_GXCAbs2
.b279	49 ff		eor #$ff			eor 	#$FF
.b27b	1a		inc a				inc 	a
.b27c					_GXCAbs2:
.b27c	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b27e	b0 0a		bcs $b28a			bcs 	_GXOkayFail
.b280	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b282	90 02		bcc $b286			bcc 	_GXCHaveLowest
.b284	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b286					_GXCHaveLowest:
.b286	0a		asl a				asl 	a 							; scale to allow for >> 2
.b287	0a		asl a				asl 	a
.b288	18		clc				clc
.b289	60		rts				rts
.b28a					_GXOkayFail:
.b28a	18		clc				clc
.b28b					_GXCollideFail:
.b28b	a9 ff		lda #$ff			lda 	#$FF
.b28d	60		rts				rts
.b28e					GXFindSprite:
.b28e	aa		tax				tax
.b28f	ad 4d 06	lda $064d			lda 	GXSpritePage 				; access the base page of the sprite
.b292	85 0b		sta $0b				sta 	GXEditSlot
.b294	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b297	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b29a	f0 33		beq $b2cf			beq 	_GXFSFail
.b29c	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b29f	8d f1 06	sta $06f1			sta 	GXSpriteOffset+1
.b2a2	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b2a5	48		pha				pha 								; save twice
.b2a6	48		pha				pha
.b2a7	29 03		and #$03			and 	#3 							; get sprite size
.b2a9	8d ee 06	sta $06ee			sta 	GXSizeBits 					; save raw (0-3)
.b2ac	aa		tax				tax
.b2ad	bd d1 b2	lda $b2d1,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b2b0	8d ed 06	sta $06ed			sta 	GXSizePixels 					; save (8/16/24/32)
.b2b3	68		pla				pla 								; get LUT
.b2b4	4a		lsr a				lsr		a
.b2b5	4a		lsr a				lsr		a
.b2b6	29 03		and #$03			and 	#3
.b2b8	8d ef 06	sta $06ef			sta 	GXSpriteLUT
.b2bb	68		pla				pla 								; address, neeeds to be x 4
.b2bc	29 f0		and #$f0			and 	#$F0
.b2be	8d f0 06	sta $06f0			sta 	GXSpriteOffset
.b2c1	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2c4	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2c7	0e f0 06	asl $06f0			asl 	GXSpriteOffset
.b2ca	2e f1 06	rol $06f1			rol 	GXSpriteOffset+1
.b2cd	18		clc				clc
.b2ce	60		rts				rts
.b2cf					_GXFSFail:
.b2cf	38		sec				sec
.b2d0	60		rts				rts
.b2d1					_GXFXSSTTable:
>b2d1	08 10 18 20					.byte 	8,16,24,32
.06ed					GXSizePixels:
>06ed							.fill 	1
.06ee					GXSizeBits:
>06ee							.fill 	1
.06ef					GXSpriteLUT:
>06ef							.fill 	1
.06f0					GXSpriteOffset:
>06f0							.fill 	2
.b2d5					GXSortXY:
.b2d5	20 f3 b2	jsr $b2f3			jsr 	GXSortY 					; will be sorted on Y now
.b2d8	ad 42 06	lda $0642			lda 	gxX0 						; compare X0 v X1
.b2db	cd 46 06	cmp $0646			cmp 	gxX1
.b2de	ad 43 06	lda $0643			lda 	gXX0+1
.b2e1	ed 47 06	sbc $0647			sbc 	gXX1+1
.b2e4	90 0c		bcc $b2f2			bcc 	_GXSXYExit 					; X0 < X1 exit
.b2e6	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b2e8	a0 04		ldy #$04			ldy 	#4
.b2ea	20 07 b3	jsr $b307			jsr 	GXSwapXY
.b2ed	e8		inx				inx
.b2ee	c8		iny				iny
.b2ef	20 07 b3	jsr $b307			jsr 	GXSwapXY
.b2f2					_GXSXYExit:
.b2f2	60		rts				rts
.b2f3					GXSortY:
.b2f3	ad 44 06	lda $0644			lda 	gxY0 						; if Y0 >= Y1
.b2f6	cd 48 06	cmp $0648			cmp 	gxY1
.b2f9	90 0b		bcc $b306			bcc 	_GXSYSorted
.b2fb	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b2fd	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b2ff					_GXSwap1:
.b2ff	20 07 b3	jsr $b307			jsr 	GXSwapXY
.b302	88		dey				dey
.b303	ca		dex				dex
.b304	10 f9		bpl $b2ff			bpl 	_GXSwap1
.b306					_GXSYSorted:
.b306	60		rts				rts
.b307					GXSwapXY:
.b307	bd 42 06	lda $0642,x			lda 	gxX0,x
.b30a	48		pha				pha
.b30b	b9 42 06	lda $0642,y			lda 	gxX0,y
.b30e	9d 42 06	sta $0642,x			sta 	gxX0,x
.b311	68		pla				pla
.b312	99 42 06	sta $0642,y			sta 	gxX0,y
.b315	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b808					KeywordSet0:
>b808	00 65					.text	0,$65,""               ; $80 !0:EOF
>b80a	00 58					.text	0,$58,""               ; $81 !1:SH1
>b80c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b80e	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b814	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b81c	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b822	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b829	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b831	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b838	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b83f	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b845	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b84b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b853	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b85a	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b861	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b868	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b870	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b876	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b87c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b883	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b889	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b88f	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b897	28
>b898	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b8a0	28
>b8a1	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b8a7	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b8ad	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b8b3	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b8ba	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b8c2	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b8c8	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b8ce	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b8d3	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b8d7	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b8dd	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b8e5	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b8ec	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b8f3	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b8fb	43
>b8fc	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b902	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b908	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b90f	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b915	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b919	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b91f	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b927	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b92e	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b933	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b93a	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b942	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b948	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b94d	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b955	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b95b	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b961	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b966	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b96d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b973	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b979	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b980	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b985	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b98b	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b992	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b997	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b99b	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b9a3	45
>b9a4	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b9ac	45
>b9ad	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b9b3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b9ba	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b9c0	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b9c6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b9cb	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b9d3	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b9da	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b9e2	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>b9e8	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>b9ec	ff					.text	$FF
.b9ed					KeywordSet1:
>b9ed	00 65					.text	0,$65,""               ; $80 !0:EOF
>b9ef	00 58					.text	0,$58,""               ; $81 !1:SH1
>b9f1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b9f3	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>b9fb	4c 45
>b9fd	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>ba05	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ba0d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>ba12	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>ba18	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>ba1d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>ba25	45
>ba26	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>ba2b	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>ba33	53
>ba34	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ba3a	ff					.text	$FF
.ba3b					KeywordSet2:
>ba3b	00 65					.text	0,$65,""               ; $80 !0:EOF
>ba3d	00 58					.text	0,$58,""               ; $81 !1:SH1
>ba3f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ba41	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ba46	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ba4b	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba50	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba55	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba5a	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba5f	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba64	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba69	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba6e	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba73	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba78	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba7d	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ba82	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ba87	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ba8c	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ba91	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ba96	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ba9b	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>baa0	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>baa5	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>baaa	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>baaf	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>bab4	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>bab9	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>babe	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>bac3	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>bac8	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>bacd	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>bad2	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>bad7	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>badc	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>bae1	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>bae6	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>baeb	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>baf0	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>baf5	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>bafa	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>baff	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bb04	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>bb09	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bb0e	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bb13	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>bb18	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bb1d	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bb22	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bb27	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bb2c	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bb31	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bb36	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>bb3b	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>bb40	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>bb45	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bb4a	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb4f	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb54	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb59	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb5e	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb63	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb68	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb6d	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb72	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb77	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb7c	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bb81	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bb86	ff					.text	$FF
.b316					ListConvertLine:
.b316	9c 9d 04	stz $049d			stz 	tbOffset
.b319	9c ab 04	stz $04ab			stz 	tokenBuffer
.b31c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b31e	b1 30		lda ($30),y			lda 	(codePtr),y
.b320	aa		tax				tax
.b321	88		dey				dey
.b322	b1 30		lda ($30),y			lda 	(codePtr),y
.b324	20 49 92	jsr $9249			jsr 	ConvertInt16
.b327	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b329	86 37		stx $37				stx 	zTemp0+1
.b32b	a9 8c		lda #$8c			lda 	#CLINumber+$80
.b32d	20 74 b4	jsr $b474			jsr 	LCLWrite
.b330	a0 00		ldy #$00			ldy 	#0
.b332					_LCCopyNumber:
.b332	b1 36		lda ($36),y			lda 	(zTemp0),y
.b334	20 74 b4	jsr $b474			jsr 	LCLWrite
.b337	c8		iny				iny
.b338	b1 36		lda ($36),y			lda 	(zTemp0),y
.b33a	d0 f6		bne $b332			bne 	_LCCopyNumber
.b33c	20 dc 8c	jsr $8cdc			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b33f	48		pha				pha 								; save on stack
.b340	10 0c		bpl $b34e			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b342	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b343	6d a6 04	adc $04a6			adc 	listIndent
.b346	8d a6 04	sta $04a6			sta 	listIndent
.b349	10 03		bpl $b34e			bpl 	_LCNoAdjust
.b34b	9c a6 04	stz $04a6			stz 	listIndent
.b34e					_LCNoAdjust:
.b34e	18		clc				clc		 							; work out actual indent.
.b34f	ad a6 04	lda $04a6			lda 	listIndent
.b352	0a		asl a				asl 	a
.b353	69 06		adc #$06			adc 	#6
.b355	85 36		sta $36				sta 	zTemp0
.b357					_LCPadOut:
.b357	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b359	20 74 b4	jsr $b474			jsr 	LCLWrite
.b35c	ad 9d 04	lda $049d			lda 	tbOffset
.b35f	c5 36		cmp $36				cmp 	zTemp0
.b361	d0 f4		bne $b357			bne 	_LCPadOut
.b363	a0 03		ldy #$03			ldy 	#3 							; start position.
.b365					_LCMainLoop:
.b365	a9 87		lda #$87			lda 	#CLIPunctuation+$80
.b367	20 74 b4	jsr $b474			jsr 	LCLWrite
.b36a	b1 30		lda ($30),y			lda 	(codePtr),y
.b36c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b36e	f0 17		beq $b387			beq 	_LCExit
.b370	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b372	90 1e		bcc $b392			bcc 	_LCDoubles
.b374	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b376	90 2a		bcc $b3a2			bcc 	_LCShiftPunc
.b378	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b37a	90 35		bcc $b3b1			bcc 	_LCPunctuation
.b37c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b37e	90 3e		bcc $b3be			bcc 	_LCIdentifiers
.b380	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b382	90 5f		bcc $b3e3			bcc 	_LCTokens
.b384	4c 43 b4	jmp $b443			jmp 	_LCData 					; 254-5 are data objects
.b387					_LCExit:
.b387	68		pla				pla 								; get old indent adjust
.b388	30 07		bmi $b391			bmi 	_LCExit2
.b38a	18		clc				clc 								; add to indent if +ve
.b38b	6d a6 04	adc $04a6			adc 	listIndent
.b38e	8d a6 04	sta $04a6			sta 	listIndent
.b391					_LCExit2:
.b391	60		rts				rts
.b392					_LCDoubles:
.b392	48		pha				pha
.b393	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b394	29 02		and #$02			and 	#2
.b396	09 3c		ora #$3c			ora 	#60 						; make < >
.b398	20 74 b4	jsr $b474			jsr 	LCLWrite
.b39b	68		pla				pla 								; restore, do lower bit
.b39c	29 03		and #$03			and 	#3
.b39e	09 3c		ora #$3c			ora 	#60
.b3a0	80 0f		bra $b3b1			bra		_LCPunctuation 				; print, increment, loop
.b3a2					_LCShiftPunc:
.b3a2	aa		tax				tax 								; save in X
.b3a3	29 07		and #$07			and 	#7 							; lower 3 bits
.b3a5	f0 02		beq $b3a9			beq 	_LCNoAdd
.b3a7	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b3a9					_LCNoAdd:
.b3a9	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b3ab	90 02		bcc $b3af			bcc 	_LCNoAdd2
.b3ad	09 20		ora #$20			ora 	#32 						; adds $20
.b3af					_LCNoAdd2:
.b3af	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b3b1					_LCPunctuation:
.b3b1	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b3b3	d0 03		bne $b3b8			bne 	_LCPContinue
.b3b5	20 8a b4	jsr $b48a			jsr 	LCDeleteLastSpace
.b3b8					_LCPContinue:
.b3b8	c8		iny				iny 								; consume character
.b3b9	20 74 b4	jsr $b474			jsr 	LCLWrite 					; write it out.
.b3bc	80 a7		bra $b365			bra 	_LCMainLoop 				; go round again.
.b3be					_LCIdentifiers:
.b3be	18		clc				clc 								; convert to physical address
.b3bf	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b3c1	85 37		sta $37				sta 	zTemp0+1
.b3c3	c8		iny				iny
.b3c4	b1 30		lda ($30),y			lda 	(codePtr),y
.b3c6	85 36		sta $36				sta 	zTemp0
.b3c8	c8		iny				iny
.b3c9	5a		phy				phy 								; save position
.b3ca	a9 8a		lda #$8a			lda 	#CLIIdentifier+$80
.b3cc	20 74 b4	jsr $b474			jsr 	LCLWrite
.b3cf	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b3d1					_LCOutIdentifier:
.b3d1	c8		iny				iny
.b3d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3d4	29 7f		and #$7f			and 	#$7F
.b3d6	20 c6 b4	jsr $b4c6			jsr 	LCLLowerCase
.b3d9	20 74 b4	jsr $b474			jsr 	LCLWrite
.b3dc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b3de	10 f1		bpl $b3d1			bpl 	_LCOutIdentifier
.b3e0	7a		ply				ply 								; restore position
.b3e1	80 82		bra $b365			bra 	_LCMainLoop
.b3e3					_LCTokens:
.b3e3	aa		tax				tax 								; token in X
.b3e4	a9 3b		lda #$3b			lda 	#((KeywordSet2) & $FF)
.b3e6	85 36		sta $36				sta 	0+zTemp0
.b3e8	a9 ba		lda #$ba			lda 	#((KeywordSet2) >> 8)
.b3ea	85 37		sta $37				sta 	1+zTemp0
.b3ec	e0 82		cpx #$82			cpx 	#$82
.b3ee	f0 16		beq $b406			beq 	_LCUseShift
.b3f0	a9 ed		lda #$ed			lda 	#((KeywordSet1) & $FF)
.b3f2	85 36		sta $36				sta 	0+zTemp0
.b3f4	a9 b9		lda #$b9			lda 	#((KeywordSet1) >> 8)
.b3f6	85 37		sta $37				sta 	1+zTemp0
.b3f8	e0 81		cpx #$81			cpx 	#$81
.b3fa	f0 0a		beq $b406			beq 	_LCUseShift
.b3fc	a9 08		lda #$08			lda 	#((KeywordSet0) & $FF)
.b3fe	85 36		sta $36				sta 	0+zTemp0
.b400	a9 b8		lda #$b8			lda 	#((KeywordSet0) >> 8)
.b402	85 37		sta $37				sta 	1+zTemp0
.b404	80 01		bra $b407			bra 	_LCNoShift
.b406					_LCUseShift:
.b406	c8		iny				iny
.b407					_LCNoShift:
.b407	20 9e b4	jsr $b49e			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b40a	b1 30		lda ($30),y			lda 	(codePtr),y
.b40c	aa		tax				tax 								; into X
.b40d					_LCFindText:
.b40d	ca		dex				dex
.b40e	10 0e		bpl $b41e			bpl 	_LCFoundText 				; found text.
.b410	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b412	1a		inc a				inc 	a 							; one extra for size
.b413	38		sec				sec 								; one extra for checksum
.b414	65 36		adc $36				adc 	zTemp0 						; go to next token
.b416	85 36		sta $36				sta 	zTemp0
.b418	90 f3		bcc $b40d			bcc 	_LCFindText
.b41a	e6 37		inc $37				inc 	zTemp0+1
.b41c	80 ef		bra $b40d			bra 	_LCFindText
.b41e					_LCFoundText:
.b41e	5a		phy				phy 								; save List position
.b41f	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b421	aa		tax				tax
.b422	a9 83		lda #$83			lda 	#CLIToken+$80
.b424	20 74 b4	jsr $b474			jsr 	LCLWrite
.b427	a0 02		ldy #$02			ldy 	#2
.b429					_LCCopyToken:
.b429	b1 36		lda ($36),y			lda 	(zTemp0),y
.b42b	20 c6 b4	jsr $b4c6			jsr 	LCLLowerCase
.b42e	20 74 b4	jsr $b474			jsr 	LCLWrite
.b431	c8		iny				iny
.b432	ca		dex				dex
.b433	d0 f4		bne $b429			bne 	_LCCopyToken
.b435	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b437	f0 05		beq $b43e			beq 	_LCNoSpace
.b439	a9 20		lda #$20			lda 	#' '
.b43b	20 74 b4	jsr $b474			jsr 	LCLWrite
.b43e					_LCNoSpace:
.b43e	7a		ply				ply 								; restore position.
.b43f	c8		iny				iny 								; consume token
.b440	4c 65 b3	jmp $b365			jmp 	_LCMainLoop 				; and go around again.
.b443					_LCData:
.b443	48		pha				pha 								; save type $FE/$FF
.b444	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b446	c9 fe		cmp #$fe			cmp 	#$FE
.b448	f0 07		beq $b451			beq 	_LCHaveOpener
.b44a	a2 22		ldx #$22			ldx 	#'"'
.b44c	a9 81		lda #$81			lda 	#CLIData+$80
.b44e	20 74 b4	jsr $b474			jsr 	LCLWrite
.b451					_LCHaveOpener:
.b451	8a		txa				txa 								; output prefix (# or ")
.b452	20 74 b4	jsr $b474			jsr 	LCLWrite
.b455	c8		iny				iny 								; get count
.b456	b1 30		lda ($30),y			lda 	(codePtr),y
.b458	aa		tax				tax
.b459	c8		iny				iny 								; point at first character
.b45a					_LCOutData:
.b45a	b1 30		lda ($30),y			lda 	(codePtr),y
.b45c	c9 00		cmp #$00			cmp 	#0
.b45e	f0 03		beq $b463			beq 	_LCNoPrint
.b460	20 74 b4	jsr $b474			jsr 	LCLWrite
.b463					_LCNoPrint:
.b463	c8		iny				iny
.b464	ca		dex				dex
.b465	d0 f3		bne $b45a			bne 	_LCOutData
.b467	68		pla				pla 								; closing " required ?
.b468	c9 ff		cmp #$ff			cmp 	#$FF
.b46a	d0 05		bne $b471			bne 	_LCNoQuote
.b46c	a9 22		lda #$22			lda 	#'"'
.b46e	20 74 b4	jsr $b474			jsr 	LCLWrite
.b471					_LCNoQuote:
.b471	4c 65 b3	jmp $b365			jmp 	_LCMainLoop
.b474					LCLWrite:
.b474	da		phx				phx
.b475	ae 9d 04	ldx $049d			ldx 	tbOffset
.b478	9d ab 04	sta $04ab,x			sta 	tokenBuffer,x
.b47b	9e ac 04	stz $04ac,x			stz 	tokenBuffer+1,x
.b47e	ee 9d 04	inc $049d			inc 	tbOffset
.b481	09 00		ora #$00			ora 	#0 							; don't update if colour data
.b483	30 03		bmi $b488			bmi 	_LCLNoColour
.b485	8d a7 04	sta $04a7			sta 	LCLastCharacter
.b488					_LCLNoColour:
.b488	fa		plx				plx
.b489	60		rts				rts
.b48a					LCDeleteLastSpace:
.b48a	48		pha				pha
.b48b	da		phx				phx
.b48c	ae 9d 04	ldx $049d			ldx 	tbOffset
.b48f	f0 0a		beq $b49b			beq 	_LCDLSExit
.b491	bd aa 04	lda $04aa,x			lda 	tokenBuffer-1,x
.b494	c9 20		cmp #$20			cmp 	#' '
.b496	d0 03		bne $b49b			bne 	_LCDLSExit
.b498	ce 9d 04	dec $049d			dec 	tbOffset
.b49b					_LCDLSExit:
.b49b	fa		plx				plx
.b49c	68		pla				pla
.b49d	60		rts				rts
.b49e					LCCheckSpaceRequired:
.b49e	ad a7 04	lda $04a7			lda 	LCLastCharacter 			; check last character
.b4a1	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b4a3	f0 1b		beq $b4c0			beq 	_LCCSRSpace
.b4a5	c9 29		cmp #$29			cmp 	#')'
.b4a7	f0 17		beq $b4c0			beq 	_LCCSRSpace
.b4a9	c9 23		cmp #$23			cmp 	#'#'
.b4ab	f0 13		beq $b4c0			beq 	_LCCSRSpace
.b4ad	20 c6 b4	jsr $b4c6			jsr 	LCLLowerCase 				; saves a little effort
.b4b0	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b4b2	90 11		bcc $b4c5			bcc 	_LCCSRExit
.b4b4	c9 3a		cmp #$3a			cmp 	#"9"+1
.b4b6	90 08		bcc $b4c0			bcc 	_LCCSRSpace
.b4b8	c9 61		cmp #$61			cmp 	#"a"
.b4ba	90 09		bcc $b4c5			bcc 	_LCCSRExit
.b4bc	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4be	b0 05		bcs $b4c5			bcs 	_LCCSRExit
.b4c0					_LCCSRSpace:
.b4c0	a9 20		lda #$20			lda 	#' '
.b4c2	20 74 b4	jsr $b474			jsr 	LCLWrite
.b4c5					_LCCSRExit:
.b4c5	60		rts				rts
.b4c6					LCLLowerCase:
.b4c6	c9 41		cmp #$41			cmp 	#"A"
.b4c8	90 06		bcc $b4d0			bcc 	_LCLLCOut
.b4ca	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b4cc	b0 02		bcs $b4d0			bcs 	_LCLLCOut
.b4ce	69 20		adc #$20			adc 	#$20
.b4d0					_LCLLCOut:
.b4d0	60		rts				rts
.b4d1					LCLUpperCase:
.b4d1	c9 61		cmp #$61			cmp 	#"a"
.b4d3	90 06		bcc $b4db			bcc 	_LCLUCOut
.b4d5	c9 7b		cmp #$7b			cmp 	#"z"+1
.b4d7	b0 02		bcs $b4db			bcs 	_LCLUCOut
.b4d9	e9 1f		sbc #$1f			sbc 	#$1F
.b4db					_LCLUCOut:
.b4db	60		rts				rts
.b4dc					TokeniseSearchTable:
.b4dc	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b4de	85 36		sta $36				sta 	zTemp0
.b4e0	a0 00		ldy #$00			ldy 	#0
.b4e2	a9 80		lda #$80			lda 	#$80 						; token #
.b4e4	85 38		sta $38				sta 	zTemp1
.b4e6					_TSTLoop:
.b4e6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b4e8	30 49		bmi $b533			bmi 	_TSTFail 					; -ve = end of table
.b4ea	f0 2e		beq $b51a			beq 	_TSTNext 					; zero, check next it's a dummy
.b4ec	c8		iny				iny 								; get the hash
.b4ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4ef	88		dey				dey
.b4f0	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b4f3	d0 25		bne $b51a			bne 	_TSTNext
.b4f5	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b4f8	38		sec				sec
.b4f9	ed 80 04	sbc $0480			sbc 	identStart
.b4fc	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b4fe	d0 1a		bne $b51a			bne 	_TSTNext
.b500	5a		phy				phy 								; save Y , we might fail
.b501	c8		iny				iny 								; point to text
.b502	c8		iny				iny
.b503	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b506					_TSTCompareName:
.b506	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; compare text.
.b509	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b50b	d0 0c		bne $b519			bne 	_TSTNextPullY 				; fail, pullY and do next
.b50d	e8		inx				inx
.b50e	c8		iny				iny
.b50f	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b512	d0 f2		bne $b506			bne 	_TSTCompareName
.b514	7a		ply				ply 								; throw Y
.b515	a5 38		lda $38				lda 	zTemp1 						; get token #
.b517	38		sec				sec 								; return with CS = passed.
.b518	60		rts				rts
.b519					_TSTNextPullY:
.b519	7a		ply				ply 								; restore current, fall through.
.b51a					_TSTNext:
.b51a	e6 38		inc $38				inc 	zTemp1 						; token counter
.b51c	98		tya				tya
.b51d	18		clc				clc
.b51e	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b520	1a		inc a				inc 	a 							; +1
.b521	1a		inc a				inc 	a 							; +2
.b522	a8		tay				tay
.b523	10 c1		bpl $b4e6			bpl 	_TSTLoop 					; if Y < $80 loop back
.b525	98		tya				tya 								; add Y to zTemp0 and reset Y
.b526	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b528	18		clc				clc  								; but have tables > 255 bytes
.b529	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b52b	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b52d	90 b7		bcc $b4e6			bcc 	_TSTLoop
.b52f	e6 37		inc $37				inc 	zTemp0+1
.b531	80 b3		bra $b4e6			bra 	_TSTLoop
.b533					_TSTFail:
.b533	18		clc				clc
.b534	60		rts				rts
.b535					TokeniseLine:
.b535	20 bd b6	jsr $b6bd			jsr 	FixLineBufferCase 			; fix line case
.b538	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b53a	8d a8 04	sta $04a8			sta 	tokenOffset
.b53d	9c a9 04	stz $04a9			stz 	tokenLineNumber
.b540	9c aa 04	stz $04aa			stz 	tokenLineNumber+1
.b543	a2 ff		ldx #$ff			ldx 	#$FF
.b545					_TKFindFirst:
.b545	e8		inx				inx
.b546	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b549	f0 79		beq $b5c4			beq 	_TKExit
.b54b	c9 20		cmp #$20			cmp 	#' '
.b54d	90 f6		bcc $b545			bcc 	_TKFindFirst
.b54f	c9 30		cmp #$30			cmp 	#'0'
.b551	90 07		bcc $b55a			bcc 	_TKNoLineNumber
.b553	c9 3a		cmp #$3a			cmp 	#'9'+1
.b555	b0 03		bcs $b55a			bcs 	_TKNoLineNumber
.b557	20 e7 b6	jsr $b6e7			jsr 	TokeniseExtractLineNumber
.b55a					_TKNoLineNumber:
.b55a					_TKTokeniseLoop:
.b55a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b55d	f0 65		beq $b5c4			beq 	_TKExit
.b55f	e8		inx				inx
.b560	c9 20		cmp #$20			cmp 	#' '
.b562	f0 f6		beq $b55a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b564	ca		dex				dex 								; undo last get, A contains character, X is position.
.b565	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b567	f0 61		beq $b5ca			beq 	_TKTokeniseIdentifier
.b569	c9 41		cmp #$41			cmp 	#'A'
.b56b	90 04		bcc $b571			bcc 	_TKTokenisePunctuation
.b56d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b56f	90 59		bcc $b5ca			bcc 	_TKTokeniseIdentifier
.b571					_TKTokenisePunctuation:
.b571	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b573	f0 27		beq $b59c			beq 	_TKString
.b575	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b577	f0 28		beq $b5a1			beq 	_TKHexConstant
.b579	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b57b	f0 29		beq $b5a6			beq 	_TKCheckDouble
.b57d	c9 3e		cmp #$3e			cmp 	#'>'
.b57f	f0 25		beq $b5a6			beq 	_TKCheckDouble
.b581					_TKStandardPunctuation:
.b581	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get it back.
.b584	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b586	90 0e		bcc $b596			bcc 	_TKNoShift
.b588	48		pha				pha 								; save
.b589	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b58b	85 36		sta $36				sta 	zTemp0
.b58d	68		pla				pla
.b58e	29 20		and #$20			and 	#32 						; bit 5
.b590	4a		lsr a				lsr 	a 							; shift into bit 3
.b591	4a		lsr a				lsr 	a
.b592	05 36		ora $36				ora 	zTemp0
.b594	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b596					_TKNoShift:
.b596	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte 			; write the punctuation character
.b599	e8		inx				inx 								; consume the character
.b59a	80 be		bra $b55a			bra 	_TKTokeniseLoop 			; and loop round again.
.b59c					_TKString:
.b59c	20 4c b6	jsr $b64c			jsr 	TokeniseString
.b59f	80 b9		bra $b55a			bra 	_TKTokeniseLoop
.b5a1					_TKHexConstant:
.b5a1	20 87 b6	jsr $b687			jsr 	TokeniseHexConstant
.b5a4	80 b4		bra $b55a			bra 	_TKTokeniseLoop
.b5a6					_TKCheckDouble:
.b5a6	bd a9 05	lda $05a9,x			lda 	lineBuffer+1,x 				; get next character
.b5a9	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b5ab	90 d4		bcc $b581			bcc 	_TKStandardPunctuation
.b5ad	c9 3f		cmp #$3f			cmp 	#'>'+1
.b5af	b0 d0		bcs $b581			bcs 	_TKStandardPunctuation
.b5b1	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b5b4	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b5b6	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b5b7	7d a9 05	adc $05a9,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b5ba	38		sec				sec
.b5bb	e9 3c		sbc #$3c			sbc 	#'<'
.b5bd	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b5c0	e8		inx				inx 								; consume both
.b5c1	e8		inx				inx
.b5c2	80 96		bra $b55a			bra 	_TKTokeniseLoop
.b5c4	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b5c6	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b5c9	60		rts				rts
.b5ca					_TKTokeniseIdentifier:
.b5ca	8e 80 04	stx $0480			stx 	identStart 					; save start
.b5cd	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b5d0					_TKCheckLoop:
.b5d0	e8		inx				inx 								; look at next, we know first is identifier.
.b5d1	bd a8 05	lda $05a8,x			lda  	lineBuffer,x
.b5d4	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b5d6	f0 f8		beq $b5d0			beq 	_TKCheckLoop
.b5d8	c9 30		cmp #$30			cmp	 	#"0"
.b5da	90 0c		bcc $b5e8			bcc 	_TKEndIdentifier
.b5dc	c9 3a		cmp #$3a			cmp 	#"9"+1
.b5de	90 f0		bcc $b5d0			bcc 	_TKCheckLoop
.b5e0	c9 41		cmp #$41			cmp	 	#"A"
.b5e2	90 04		bcc $b5e8			bcc 	_TKEndIdentifier
.b5e4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b5e6	90 e8		bcc $b5d0			bcc 	_TKCheckLoop
.b5e8					_TKEndIdentifier:
.b5e8	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b5eb	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b5ed	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b5ef	f0 06		beq $b5f7			beq 	_TKHasTypeCharacter
.b5f1	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b5f3	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b5f5	d0 07		bne $b5fe			bne 	_TKNoTypeCharacter
.b5f7					_TKHasTypeCharacter:
.b5f7	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b5fa	e8		inx				inx 								; read next
.b5fb	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b5fe					_TKNoTypeCharacter:
.b5fe	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b600	d0 09		bne $b60b			bne 	_TKNoArray
.b602	e8		inx				inx 								; skip the (
.b603	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b606	09 04		ora #$04			ora 	#$04
.b608	8d 84 04	sta $0484			sta 	identTypeByte
.b60b					_TKNoArray:
.b60b	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b60e	20 a8 b6	jsr $b6a8			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b611	a0 b8		ldy #$b8			ldy 	#(KeywordSet0) >> 8
.b613	a9 08		lda #$08			lda 	#(KeywordSet0) & $FF
.b615	20 dc b4	jsr $b4dc			jsr 	TokeniseSearchTable
.b618	a2 00		ldx #$00			ldx 	#0
.b61a	b0 1f		bcs $b63b			bcs 	_TKFoundToken
.b61c	a0 b9		ldy #$b9			ldy 	#(KeywordSet1) >> 8
.b61e	a9 ed		lda #$ed			lda 	#(KeywordSet1) & $FF
.b620	20 dc b4	jsr $b4dc			jsr 	TokeniseSearchTable
.b623	a2 81		ldx #$81			ldx 	#$81
.b625	b0 14		bcs $b63b			bcs 	_TKFoundToken
.b627	a0 ba		ldy #$ba			ldy 	#(KeywordSet2) >> 8
.b629	a9 3b		lda #$3b			lda 	#(KeywordSet2) & $FF
.b62b	20 dc b4	jsr $b4dc			jsr 	TokeniseSearchTable
.b62e	a2 82		ldx #$82			ldx 	#$82
.b630	b0 09		bcs $b63b			bcs 	_TKFoundToken
.b632	20 38 b7	jsr $b738			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b635	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b638	4c 5a b5	jmp $b55a			jmp 	_TKTokeniseLoop 			; and go round again.
.b63b					_TKFoundToken:
.b63b	48		pha				pha 								; save token
.b63c	8a		txa				txa 								; shift in X, is there one ?
.b63d	f0 03		beq $b642			beq 	_TKNoTShift
.b63f	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte 			; if so, write it out
.b642					_TKNoTShift:
.b642	68		pla				pla 								; restore and write token
.b643	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b646	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b649	4c 5a b5	jmp $b55a			jmp 	_TKTokeniseLoop 			; and go round again.
.b64c					TokeniseString:
.b64c	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b64e	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b651	e8		inx				inx									; start of quoted string.
.b652	da		phx				phx 								; push start of string on top
.b653	ca		dex				dex
.b654					_TSFindEnd:
.b654	e8		inx				inx
.b655	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; next character
.b658	f0 04		beq $b65e			beq 	_TSEndOfString
.b65a	c9 22		cmp #$22			cmp 	#'"'
.b65c	d0 f6		bne $b654			bne 	_TSFindEnd
.b65e					_TSEndOfString:
.b65e	7a		ply				ply  								; so now Y is first character, X is character after end.
.b65f	48		pha				pha 								; save terminating character
.b660	20 68 b6	jsr $b668			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b663	68		pla				pla 								; terminating character
.b664	f0 01		beq $b667			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b666	e8		inx				inx
.b667					_TSNotQuote:
.b667	60		rts				rts
.b668					TOWriteBlockXY:
.b668	86 36		stx $36				stx 	zTemp0 						; write end character
.b66a	98		tya				tya
.b66b	49 ff		eor #$ff			eor 	#$FF
.b66d	38		sec				sec
.b66e	65 36		adc $36				adc 	zTemp0
.b670	1a		inc a				inc 	a 							; one extra for NULL
.b671	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b674					_TOBlockLoop:
.b674	c4 36		cpy $36				cpy 	zTemp0
.b676	f0 09		beq $b681			beq 	_TOBlockExit
.b678	b9 a8 05	lda $05a8,y			lda 	lineBuffer,y
.b67b	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b67e	c8		iny				iny
.b67f	80 f3		bra $b674			bra 	_TOBlockLoop
.b681					_TOBlockExit:
.b681	a9 00		lda #$00			lda 	#0
.b683	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b686	60		rts				rts
.b687					TokeniseHexConstant:
.b687	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b689	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b68c	e8		inx				inx									; start of quoted string.
.b68d	da		phx				phx 								; push start of constant on top
.b68e	ca		dex				dex
.b68f					_THFindLoop:
.b68f	e8		inx				inx
.b690	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b693	c9 30		cmp #$30			cmp 	#"0"
.b695	90 0c		bcc $b6a3			bcc 	_THFoundEnd
.b697	c9 3a		cmp #$3a			cmp 	#"9"+1
.b699	90 f4		bcc $b68f			bcc 	_THFindLoop
.b69b	c9 41		cmp #$41			cmp 	#"A"
.b69d	90 04		bcc $b6a3			bcc 	_THFoundEnd
.b69f	c9 47		cmp #$47			cmp 	#"F"+1
.b6a1	90 ec		bcc $b68f			bcc 	_THFindLoop
.b6a3					_THFoundEnd:
.b6a3	7a		ply				ply 								; restore start
.b6a4	20 68 b6	jsr $b668			jsr 	TOWriteBlockXY 				; output the block
.b6a7	60		rts				rts
.b6a8					TokeniseCalculateHash:
.b6a8	da		phx				phx
.b6a9	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b6ac	a9 00		lda #$00			lda 	#0
.b6ae					_TCHLoop:
.b6ae	18		clc				clc
.b6af	7d a8 05	adc $05a8,x			adc 	lineBuffer,x
.b6b2	e8		inx				inx
.b6b3	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b6b6	d0 f6		bne $b6ae			bne 	_TCHLoop
.b6b8	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b6bb	fa		plx				plx
.b6bc	60		rts				rts
.b6bd					FixLineBufferCase:
.b6bd	a2 00		ldx #$00			ldx 	#0
.b6bf					_FLBCLoop:
.b6bf	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next character
.b6c2	f0 22		beq $b6e6			beq 	_FLBCExit 					; end of string.
.b6c4	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b6c6	f0 11		beq $b6d9			beq 	_FLBCInQuotes
.b6c8	e8		inx				inx
.b6c9	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b6cb	90 f2		bcc $b6bf			bcc 	_FLBCLoop
.b6cd	c9 7b		cmp #$7b			cmp 	#'z'+1
.b6cf	b0 ee		bcs $b6bf			bcs 	_FLBCLoop
.b6d1	38		sec				sec 								; make U/C
.b6d2	e9 20		sbc #$20			sbc 	#32
.b6d4	9d a7 05	sta $05a7,x			sta	 	lineBuffer-1,x 				; write back
.b6d7	80 e6		bra $b6bf			bra 	_FLBCLoop
.b6d9					_FLBCInQuotes:
.b6d9	e8		inx				inx 								; advance
.b6da	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get next
.b6dd	f0 07		beq $b6e6			beq 	_FLBCExit 					; exit on EOS
.b6df	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b6e1	d0 f6		bne $b6d9			bne 	_FLBCInQuotes
.b6e3	e8		inx				inx 								; skip over it
.b6e4	80 d9		bra $b6bf			bra 	_FLBCLoop
.b6e6					_FLBCExit:
.b6e6	60		rts				rts
.b6e7					TokeniseExtractLineNumber:
.b6e7	ad aa 04	lda $04aa			lda 	tokenLineNumber+1 			; push current value on stack
.b6ea	48		pha				pha
.b6eb	ad a9 04	lda $04a9			lda 	tokenLineNumber
.b6ee	48		pha				pha
.b6ef	20 25 b7	jsr $b725			jsr 	_TELNTimes2 				; line # x 4
.b6f2	20 25 b7	jsr $b725			jsr 	_TELNTimes2 				; line # x 2
.b6f5	18		clc				clc 								; add stacked value
.b6f6	68		pla				pla
.b6f7	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b6fa	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b6fd	68		pla				pla
.b6fe	6d aa 04	adc $04aa			adc 	tokenLineNumber+1
.b701	8d aa 04	sta $04aa			sta 	tokenLineNumber+1 			; line # x 5
.b704	20 25 b7	jsr $b725			jsr 	_TELNTimes2 				; line # x 10
.b707	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; get and consume character
.b70a	e8		inx				inx
.b70b	29 0f		and #$0f			and 	#15 						; add to line #
.b70d	18		clc				clc
.b70e	6d a9 04	adc $04a9			adc 	tokenLineNumber
.b711	8d a9 04	sta $04a9			sta 	tokenLineNumber
.b714	90 03		bcc $b719			bcc 	_TLENNoCarry
.b716	ee aa 04	inc $04aa			inc 	tokenLineNumber+1
.b719					_TLENNoCarry:
.b719	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; more digits ?
.b71c	c9 30		cmp #$30			cmp 	#'0'
.b71e	90 04		bcc $b724			bcc 	_TLENExit
.b720	c9 3a		cmp #$3a			cmp 	#'9'+1
.b722	90 c3		bcc $b6e7			bcc 	TokeniseExtractLineNumber
.b724					_TLENExit:
.b724	60		rts				rts
.b725					_TELNTimes2:
.b725	0e a9 04	asl $04a9			asl 	tokenLineNumber
.b728	2e aa 04	rol $04aa			rol 	tokenLineNumber+1
.b72b	60		rts				rts
.b72c					TokeniseWriteByte:
.b72c	da		phx				phx
.b72d	ae a8 04	ldx $04a8			ldx 	tokenOffset 				; next slot to write to
.b730	9d a8 04	sta $04a8,x			sta 	tokenOffset,x 				; write byte out
.b733	ee a8 04	inc $04a8			inc 	tokenOffset 				; advance slot.
.b736	fa		plx				plx
.b737	60		rts				rts
.b738					CheckCreateVariableRecord:
.b738	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b73a	85 36		sta $36				sta 	0+zTemp0
.b73c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b73e	85 37		sta $37				sta 	1+zTemp0
.b740					_CCVSearch:
.b740	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b742	f0 2c		beq $b770			beq 	_CCVFail
.b744	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b746	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b748	cd 83 04	cmp $0483			cmp 	identHash
.b74b	d0 16		bne $b763			bne 	_CCVNext
.b74d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b74f	ae 80 04	ldx $0480			ldx 	identStart
.b752					_CCVCompare:
.b752	bd a8 05	lda $05a8,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b755	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b757	e8		inx				inx 								; advance pointers
.b758	c8		iny				iny
.b759	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b75a	d0 07		bne $b763			bne 	_CCVNext  					; didn't match go to next.
.b75c	90 f4		bcc $b752			bcc 	_CCVCompare 				; not finished yet.
.b75e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b761	f0 41		beq $b7a4			beq 	_CCVFound 					; yes, we were successful
.b763					_CCVNext:
.b763	18		clc				clc
.b764	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b766	65 36		adc $36				adc 	zTemp0
.b768	85 36		sta $36				sta 	zTemp0
.b76a	90 d4		bcc $b740			bcc 	_CCVSearch
.b76c	e6 37		inc $37				inc 	zTemp0+1
.b76e	80 d0		bra $b740			bra 	_CCVSearch
.b770					_CCVFail:
.b770	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b772	ad 83 04	lda $0483			lda 	identHash
.b775	91 36		sta ($36),y			sta 	(zTemp0),y
.b777	c8		iny				iny 								; offset 2 is the type byte
.b778	ad 84 04	lda $0484			lda 	identTypeByte
.b77b	91 36		sta ($36),y			sta 	(zTemp0),y
.b77d	c8		iny				iny
.b77e					_CCVData:
.b77e	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b780	91 36		sta ($36),y			sta 	(zTemp0),y
.b782	c8		iny				iny
.b783	c0 08		cpy #$08			cpy 	#8
.b785	90 f7		bcc $b77e			bcc 	_CCVData
.b787	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b78a					_CCVCopyName:
.b78a	bd a8 05	lda $05a8,x			lda 	lineBuffer,x
.b78d	91 36		sta ($36),y			sta 	(zTemp0),y
.b78f	e8		inx				inx
.b790	c8		iny				iny
.b791	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b794	d0 f4		bne $b78a			bne 	_CCVCopyName
.b796	98		tya				tya 								; patch offset
.b797	92 36		sta ($36)			sta 	(zTemp0)
.b799	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b79b	91 36		sta ($36),y			sta 	(zTemp0),y
.b79d	88		dey				dey
.b79e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b7a0	09 80		ora #$80			ora 	#$80
.b7a2	91 36		sta ($36),y			sta 	(zTemp0),y
.b7a4					_CCVFound:
.b7a4	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b7a6	38		sec				sec
.b7a7	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b7a9	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b7ab	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b7ae	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b7b0	20 2c b7	jsr $b72c			jsr 	TokeniseWriteByte
.b7b3	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
