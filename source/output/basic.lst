
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 22 15:33:08 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_GETDATEDOLLARLPAREN              = $89; $89 GETDATE$(
=$8a					KWD_GETTIMEDOLLARLPAREN              = $8a; $8a GETTIME$(
=$8b					KWD_HEXDOLLARLPAREN                  = $8b; $8b HEX$(
=$8c					KWD_INTLPAREN                        = $8c; $8c INT(
=$8d					KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e					KWD_LEFTDOLLARLPAREN                 = $8e; $8e LEFT$(
=$8f					KWD_LENLPAREN                        = $8f; $8f LEN(
=$90					KWD_MIDDOLLARLPAREN                  = $90; $90 MID$(
=$91					KWD_NOT                              = $91; $91 NOT
=$92					KWD_PAGE                             = $92; $92 PAGE
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TRUE                             = $98; $98 TRUE
=$99					KWD_VALLPAREN                        = $99; $99 VAL(
=$9a					KWD_FOR                              = $9a; $9a FOR
=$9b					KWD_IF                               = $9b; $9b IF
=$9c					KWD_PROC                             = $9c; $9c PROC
=$9d					KWD_REPEAT                           = $9d; $9d REPEAT
=$9e					KWD_WHILE                            = $9e; $9e WHILE
=$9f					KWD_ENDIF                            = $9f; $9f ENDIF
=$a0					KWD_ENDPROC                          = $a0; $a0 ENDPROC
=$a1					KWD_NEXT                             = $a1; $a1 NEXT
=$a2					KWD_UNTIL                            = $a2; $a2 UNTIL
=$a3					KWD_WEND                             = $a3; $a3 WEND
=$a4					KWD_ASSERT                           = $a4; $a4 ASSERT
=$a5					KWD_CALL                             = $a5; $a5 CALL
=$a6					KWD_CLS                              = $a6; $a6 CLS
=$a7					KWD_DATA                             = $a7; $a7 DATA
=$a8					KWD_DIM                              = $a8; $a8 DIM
=$a9					KWD_GOSUB                            = $a9; $a9 GOSUB
=$aa					KWD_GOTO                             = $aa; $aa GOTO
=$ab					KWD_LET                              = $ab; $ab LET
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_THEN                             = $b0; $b0 THEN
=$b1					KWD_TO                               = $b1; $b1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9a					KWC_FIRST_STRUCTURE = $9a
=$9f					KWC_FIRST_STRUCTURE_DEC = $9f
=$a3					KWC_LAST_STRUCTURE = $a3
=$83					KWC_FIRST_UNARY = $83
=$99					KWC_LAST_UNARY = $99

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 40 81	jsr $8140			jsr 	NewCommand 					; erase current program
.8016	20 5a 87	jsr $875a			jsr 	BackloadProgram
.8019	4c 57 81	jmp $8157			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler
>8023							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8024					VectorSetPunc:
>8024	9b 81					.word	ShiftLeft                        ; $00 <<
>8026	26 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8028	1c 8c					.word	BinaryCompareNotEqual            ; $02 <>
>802a	c5 8d					.word	SyntaxError                      ; $03 !!3
>802c	c5 8d					.word	SyntaxError                      ; $04 ><
>802e	30 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8030	9e 81					.word	ShiftRight                       ; $06 >>
>8032	c5 8d					.word	SyntaxError                      ; $07 !!7
>8034	c5 8d					.word	SyntaxError                      ; $08 !!8
>8036	c5 8d					.word	SyntaxError                      ; $09 !!9
>8038	c5 8d					.word	SyntaxError                      ; $0a !!10
>803a	c5 8d					.word	SyntaxError                      ; $0b !!11
>803c	c5 8d					.word	SyntaxError                      ; $0c !!12
>803e	c5 8d					.word	SyntaxError                      ; $0d !!13
>8040	c5 8d					.word	SyntaxError                      ; $0e !!14
>8042	c5 8d					.word	SyntaxError                      ; $0f !!15
>8044	c5 8d					.word	SyntaxError                      ; $10 @
>8046	c5 8d					.word	SyntaxError                      ; $11 !!17
>8048	c5 8d					.word	SyntaxError                      ; $12 !!18
>804a	c5 8d					.word	SyntaxError                      ; $13 [
>804c	88 8c					.word	IntegerDivide                    ; $14 \
>804e	c5 8d					.word	SyntaxError                      ; $15 ]
>8050	21 83					.word	EorInteger                       ; $16 ^
>8052	c5 8d					.word	SyntaxError                      ; $17 _
>8054	c5 8d					.word	SyntaxError                      ; $18 `
>8056	c5 8d					.word	SyntaxError                      ; $19 !!25
>8058	c5 8d					.word	SyntaxError                      ; $1a !!26
>805a	c5 8d					.word	SyntaxError                      ; $1b {
>805c	dc 82					.word	OraInteger                       ; $1c |
>805e	c5 8d					.word	SyntaxError                      ; $1d }
>8060	c5 8d					.word	SyntaxError                      ; $1e ~
>8062	c5 8d					.word	SyntaxError                      ; $1f [7m<7F>[m
>8064	c5 8d					.word	SyntaxError                      ; $20
>8066	c5 8d					.word	SyntaxError                      ; $21 !
>8068	c5 8d					.word	SyntaxError                      ; $22 "
>806a	c5 8d					.word	SyntaxError                      ; $23 #
>806c	c5 8d					.word	SyntaxError                      ; $24 $
>806e	d4 8c					.word	IntegerModulus                   ; $25 %
>8070	97 82					.word	AndInteger                       ; $26 &
>8072	c5 8d					.word	SyntaxError                      ; $27 '
>8074	c5 8d					.word	SyntaxError                      ; $28 (
>8076	c5 8d					.word	SyntaxError                      ; $29 )
>8078	44 8d					.word	MulInteger                       ; $2a *
>807a	31 82					.word	AddInteger                       ; $2b +
>807c	c5 8d					.word	SyntaxError                      ; $2c ,
>807e	6c 82					.word	SubInteger                       ; $2d -
>8080	c5 8d					.word	SyntaxError                      ; $2e .
>8082	c5 8d					.word	SyntaxError                      ; $2f /
>8084	c5 8d					.word	SyntaxError                      ; $30 0
>8086	c5 8d					.word	SyntaxError                      ; $31 1
>8088	c5 8d					.word	SyntaxError                      ; $32 2
>808a	c5 8d					.word	SyntaxError                      ; $33 3
>808c	c5 8d					.word	SyntaxError                      ; $34 4
>808e	c5 8d					.word	SyntaxError                      ; $35 5
>8090	c5 8d					.word	SyntaxError                      ; $36 6
>8092	c5 8d					.word	SyntaxError                      ; $37 7
>8094	c5 8d					.word	SyntaxError                      ; $38 8
>8096	c5 8d					.word	SyntaxError                      ; $39 9
>8098	c5 8d					.word	SyntaxError                      ; $3a :
>809a	c5 8d					.word	SyntaxError                      ; $3b ;
>809c	08 8c					.word	BinaryCompareLess                ; $3c <
>809e	fe 8b					.word	BinaryCompareEqual               ; $3d =
>80a0	12 8c					.word	BinaryCompareGreater             ; $3e >
>80a2	c5 8d					.word	SyntaxError                      ; $3f ?
.80a4					VectorSet0:
>80a4	8e 81					.word	EOLCommand                       ; $80 !0:EOF
>80a6	c5 8d					.word	SyntaxError                      ; $81 !1:SH1
>80a8	c5 8d					.word	SyntaxError                      ; $82 !2:SH2
>80aa	c5 8d					.word	SyntaxError                      ; $83 ABS(
>80ac	c5 8d					.word	SyntaxError                      ; $84 ALLOC(
>80ae	c5 8d					.word	SyntaxError                      ; $85 ASC(
>80b0	c5 8d					.word	SyntaxError                      ; $86 CHR$(
>80b2	c5 8d					.word	SyntaxError                      ; $87 DEC(
>80b4	fb 8b					.word	ReturnFalse                      ; $88 FALSE
>80b6	c5 8d					.word	SyntaxError                      ; $89 GETDATE$(
>80b8	c5 8d					.word	SyntaxError                      ; $8a GETTIME$(
>80ba	c5 8d					.word	SyntaxError                      ; $8b HEX$(
>80bc	c5 8d					.word	SyntaxError                      ; $8c INT(
>80be	c5 8d					.word	SyntaxError                      ; $8d ISVAL(
>80c0	c5 8d					.word	SyntaxError                      ; $8e LEFT$(
>80c2	c5 8d					.word	SyntaxError                      ; $8f LEN(
>80c4	c5 8d					.word	SyntaxError                      ; $90 MID$(
>80c6	c5 8d					.word	SyntaxError                      ; $91 NOT
>80c8	c5 8d					.word	SyntaxError                      ; $92 PAGE
>80ca	c5 8d					.word	SyntaxError                      ; $93 RIGHT$(
>80cc	c5 8d					.word	SyntaxError                      ; $94 RND(
>80ce	c5 8d					.word	SyntaxError                      ; $95 SGN(
>80d0	c5 8d					.word	SyntaxError                      ; $96 SPC(
>80d2	c5 8d					.word	SyntaxError                      ; $97 STR$(
>80d4	f0 8b					.word	ReturnTrue                       ; $98 TRUE
>80d6	c5 8d					.word	SyntaxError                      ; $99 VAL(
>80d8	c5 8d					.word	SyntaxError                      ; $9a FOR
>80da	c5 8d					.word	SyntaxError                      ; $9b IF
>80dc	c5 8d					.word	SyntaxError                      ; $9c PROC
>80de	c5 8d					.word	SyntaxError                      ; $9d REPEAT
>80e0	c5 8d					.word	SyntaxError                      ; $9e WHILE
>80e2	c5 8d					.word	SyntaxError                      ; $9f ENDIF
>80e4	c5 8d					.word	SyntaxError                      ; $a0 ENDPROC
>80e6	c5 8d					.word	SyntaxError                      ; $a1 NEXT
>80e8	c5 8d					.word	SyntaxError                      ; $a2 UNTIL
>80ea	c5 8d					.word	SyntaxError                      ; $a3 WEND
>80ec	22 81					.word	AssertCommand                    ; $a4 ASSERT
>80ee	30 81					.word	CallCommand                      ; $a5 CALL
>80f0	c5 8d					.word	SyntaxError                      ; $a6 CLS
>80f2	c5 8d					.word	SyntaxError                      ; $a7 DATA
>80f4	c5 8d					.word	SyntaxError                      ; $a8 DIM
>80f6	c5 8d					.word	SyntaxError                      ; $a9 GOSUB
>80f8	c5 8d					.word	SyntaxError                      ; $aa GOTO
>80fa	c5 8d					.word	SyntaxError                      ; $ab LET
>80fc	c5 8d					.word	SyntaxError                      ; $ac PRINT
>80fe	c5 8d					.word	SyntaxError                      ; $ad READ
>8100	4a 81					.word	RemCommand                       ; $ae REM
>8102	c5 8d					.word	SyntaxError                      ; $af RETURN
>8104	c5 8d					.word	SyntaxError                      ; $b0 THEN
>8106	c5 8d					.word	SyntaxError                      ; $b1 TO
.8108					VectorSet1:
>8108	c5 8d					.word	SyntaxError                      ; $80 !0:EOF
>810a	c5 8d					.word	SyntaxError                      ; $81 !1:SH1
>810c	c5 8d					.word	SyntaxError                      ; $82 !2:SH2
>810e	3c 81					.word	ClearCommand                     ; $83 CLEAR
>8110	3d 81					.word	EndCommand                       ; $84 END
>8112	c5 8d					.word	SyntaxError                      ; $85 LIST
>8114	40 81					.word	NewCommand                       ; $86 NEW
>8116	c5 8d					.word	SyntaxError                      ; $87 RESTORE
>8118	57 81					.word	CommandRUN                       ; $88 RUN
>811a	c5 8d					.word	SyntaxError                      ; $89 STOP
.811c					VectorSet2:
>811c	c5 8d					.word	SyntaxError                      ; $80 !0:EOF
>811e	c5 8d					.word	SyntaxError                      ; $81 !1:SH1
>8120	c5 8d					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8122					AssertCommand:
.8122	20 44 86	jsr $8644			jsr 	EvaluateInteger 			; the assert test
.8125	20 fa 86	jsr $86fa			jsr 	NSMIsZero 					; exit if result is non zero.
.8128	d0 05		bne $812f			bne 	_ACExit
.812a	a9 0a		lda #$0a		lda	#10
.812c	4c 1f 80	jmp $801f		jmp	ErrorHandler
.812f					_ACExit:
.812f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8130					CallCommand:
.8130	20 59 86	jsr $8659			jsr 	Evaluate16BitInteger
.8133	ad 10 06	lda $0610			lda 	NSMantissa1
.8136	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8139	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813c					ClearCommand:
.813c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.813d					EndCommand:
.813d	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8140					NewCommand:
.8140	20 07 87	jsr $8707			jsr 	MemoryNew
.8143	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8146	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear everything.
.8149	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.814a					RemCommand:
.814a	b1 30		lda ($30),y			lda 	(codePtr),y
.814c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.814e	d0 06		bne $8156			bne 	_RMExit
.8150	c8		iny				iny
.8151	98		tya				tya
.8152	38		sec				sec
.8153	71 30		adc ($30),y			adc 	(codePtr),y
.8155	a8		tay				tay
.8156					_RMExit:
.8156	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8157					CommandRUN:
.8157	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.815a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.815c	85 30		sta $30				sta 	codePtr
.815e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8160	85 31		sta $31				sta 	codePtr+1
.8162					RUNNewLine:
.8162	b2 30		lda ($30)			lda 	(codePtr)
.8164	f0 25		beq $818b			beq 	CRNoProgram         		; no then END.
.8166	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8168	9a		txs				txs
.8169					RUNCodePointerLine:
.8169	a0 02		ldy #$02			ldy 	#2 							; start of program
.816b					_CRIncMainLoop:
.816b	c8		iny				iny
.816c					_CRMainLoop:
.816c	b1 30		lda ($30),y			lda 	(codePtr),y
.816e	10 10		bpl $8180			bpl 	_CRNotKeyword
.8170	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8172	b0 04		bcs $8178			bcs 	_CRIsKeyword
.8174	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8176	b0 0d		bcs $8185			bcs		_CRSyntaxError
.8178					_CRIsKeyword:
.8178	c8		iny				iny 								; consume command
.8179	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.817a	aa		tax				tax 								; put in X for vector jump
.817b	20 88 81	jsr $8188			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.817e	80 ec		bra $816c			bra 	_CRMainLoop 				; and loop round
.8180					_CRNotKeyword:
.8180	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8182	f0 e7		beq $816b			beq 	_CRIncMainLoop
>8184	db						.byte 	$DB 						; causes a break in the emulator
.8185					_CRSyntaxError:
.8185	4c c5 8d	jmp $8dc5			jmp 	SyntaxError
.8188					_CRCallVector0:
.8188	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x)
.818b					CRNoProgram:
.818b	4c 3d 81	jmp $813d			jmp 	EndCommand
.818e					EOLCommand:
.818e	18		clc				clc
.818f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8191	65 30		adc $30				adc 	codePtr
.8193	85 30		sta $30				sta 	codePtr
.8195	90 02		bcc $8199			bcc 	_CREExit
.8197	e6 31		inc $31				inc 	codePtr+1
.8199					_CREExit:
.8199	80 c7		bra $8162			bra 	RunNewLine

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8bd7					CheckRightBracket:
.8bd7	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd9	c8		iny				iny
.8bda	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8bdc	d0 0f		bne $8bed			bne 	CNAFail
.8bde	60		rts				rts
.8bdf					CheckComma:
.8bdf	b1 30		lda ($30),y			lda 	(codePtr),y
.8be1	c8		iny				iny
.8be2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8be4	d0 07		bne $8bed			bne 	CNAFail
.8be6	60		rts				rts
.8be7					CheckNextA:
.8be7	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8be9	d0 02		bne $8bed			bne 	CNAFail
.8beb	c8		iny				iny 								; skip character
.8bec	60		rts				rts 								; and exit
.8bed					CNAFail:
.8bed	4c c5 8d	jmp $8dc5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8bf0					ReturnTrue:
.8bf0	a9 01		lda #$01			lda 	#1  						; set to 1
.8bf2	20 cc 86	jsr $86cc			jsr 	NSMSetByte
.8bf5	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8bf7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bfa	60		rts				rts
.8bfb					ReturnFalse:
.8bfb	4c ca 86	jmp $86ca			jmp 	NSMSetZero 					; set it all to zero
.8bfe					BinaryCompareEqual:
.8bfe	fa		plx				plx
.8bff	20 3a 8c	jsr $8c3a			jsr 	CompareBaseCode
.8c02	c9 00		cmp #$00			cmp 	#0
.8c04	f0 ea		beq $8bf0			beq 	ReturnTrue
.8c06	80 f3		bra $8bfb			bra 	ReturnFalse
.8c08					BinaryCompareLess:
.8c08	fa		plx				plx
.8c09	20 3a 8c	jsr $8c3a			jsr 	CompareBaseCode
.8c0c	c9 ff		cmp #$ff			cmp 	#$FF
.8c0e	f0 e0		beq $8bf0			beq 	ReturnTrue
.8c10	80 e9		bra $8bfb			bra 	ReturnFalse
.8c12					BinaryCompareGreater:
.8c12	fa		plx				plx
.8c13	20 3a 8c	jsr $8c3a			jsr 	CompareBaseCode
.8c16	c9 01		cmp #$01			cmp 	#1
.8c18	f0 d6		beq $8bf0			beq 	ReturnTrue
.8c1a	80 df		bra $8bfb			bra 	ReturnFalse
.8c1c					BinaryCompareNotEqual:
.8c1c	fa		plx				plx
.8c1d	20 3a 8c	jsr $8c3a			jsr 	CompareBaseCode
.8c20	c9 00		cmp #$00			cmp 	#0
.8c22	d0 cc		bne $8bf0			bne 	ReturnTrue
.8c24	80 d5		bra $8bfb			bra 	ReturnFalse
.8c26					BinaryCompareLessEqual:
.8c26	fa		plx				plx
.8c27	20 3a 8c	jsr $8c3a			jsr 	CompareBaseCode
.8c2a	c9 01		cmp #$01			cmp 	#1
.8c2c	d0 c2		bne $8bf0			bne 	ReturnTrue
.8c2e	80 cb		bra $8bfb			bra 	ReturnFalse
.8c30					BinaryCompareGreaterEqual:
.8c30	fa		plx				plx
.8c31	20 3a 8c	jsr $8c3a			jsr 	CompareBaseCode
.8c34	c9 ff		cmp #$ff			cmp 	#$FF
.8c36	d0 b8		bne $8bf0			bne 	ReturnTrue
.8c38	80 c1		bra $8bfb			bra 	ReturnFalse
.8c3a					CompareBaseCode:
.8c3a	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; make both values if references.
.8c3d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c40	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c43	29 10		and #$10			and 	#NSTString
.8c45	d0 36		bne $8c7d			bne 	_CBCString
.8c47	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c4a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c4d	d0 2f		bne $8c7e			bne 	_CBCFloat
.8c4f	20 7f 8c	jsr $8c7f			jsr 	CompareFixMinusZero
.8c52	e8		inx				inx
.8c53	20 7f 8c	jsr $8c7f			jsr 	CompareFixMinusZero
.8c56	ca		dex				dex
.8c57	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8c5a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8c5d	10 0b		bpl $8c6a			bpl 	_CDCSameSign
.8c5f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8c62	30 16		bmi $8c7a			bmi 	_CBCLess 					; return $FF
.8c64					_CBCGreater:
.8c64	a9 01		lda #$01			lda 	#1
.8c66	60		rts				rts
.8c67					_CBCEqual:
.8c67	a9 00		lda #$00			lda 	#0
.8c69	60		rts				rts
.8c6a					_CDCSameSign:
.8c6a	20 0b 82	jsr $820b			jsr 	SubTopTwoStack 				; unsigned subtract
.8c6d	20 fa 86	jsr $86fa			jsr 	NSMIsZero 					; or the mantissa together
.8c70	f0 f5		beq $8c67			beq 	_CBCEqual 					; -0 == 0
.8c72	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8c75	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8c78	10 ea		bpl $8c64			bpl 	_CBCGreater
.8c7a					_CBCLess:
.8c7a	a9 ff		lda #$ff			lda 	#$FF
.8c7c	60		rts				rts
.8c7d					_CBCString:
>8c7d	db						.byte 	$DB 						; causes a break in the emulator
.8c7e					_CBCFloat:
>8c7e	db						.byte 	$DB 						; causes a break in the emulator
.8c7f					CompareFixMinusZero:
.8c7f	20 fa 86	jsr $86fa			jsr 	NSMIsZero
.8c82	d0 03		bne $8c87			bne 	_CFXMZNotZero
.8c84	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8c87					_CFXMZNotZero:
.8c87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8c88					IntegerDivide:
.8c88	fa		plx				plx
.8c89	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c8c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c8f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c90	0a		asl a				asl 	a
.8c91	10 05		bpl $8c98			bpl 	_NotRef
.8c93	48		pha				pha
.8c94	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c97	68		pla				pla
.8c98					_NotRef:
.8c98	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c9a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c9d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ca0	f0 03		beq $8ca5			beq 	_IntegerCode 				; if clear, then we have two integers
.8ca2	4c cf 8d	jmp $8dcf			jmp 	TypeError 					; anything else, type mismatch.
.8ca5					_IntegerCode:
.8ca5	20 c7 8c	jsr $8cc7			jsr 	CheckDivideZero 			; do div zero check
.8ca8	20 fe 8c	jsr $8cfe			jsr 	Int32Divide 				; do the division
.8cab	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8cae	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cb1	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8cb4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8cb7	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8cba	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cbd	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8cc0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cc3	20 b7 8d	jsr $8db7			jsr 	CalculateSign 				; calculate result sign
.8cc6	60		rts				rts
.8cc7					CheckDivideZero:
.8cc7	e8		inx				inx
.8cc8	20 fa 86	jsr $86fa			jsr 	NSMIsZero
.8ccb	f0 02		beq $8ccf			beq 	_CDVError
.8ccd	ca		dex				dex
.8cce	60		rts				rts
.8ccf					_CDVError:
.8ccf	a9 03		lda #$03		lda	#3
.8cd1	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8cd4					IntegerModulus:
.8cd4	fa		plx				plx
.8cd5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8cd8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cdb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8cdc	0a		asl a				asl 	a
.8cdd	10 05		bpl $8ce4			bpl 	_NotRef
.8cdf	48		pha				pha
.8ce0	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ce3	68		pla				pla
.8ce4					_NotRef:
.8ce4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ce6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ce9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cec	f0 03		beq $8cf1			beq 	_IntegerCode 				; if clear, then we have two integers
.8cee	4c cf 8d	jmp $8dcf			jmp 	TypeError 					; anything else, type mismatch.
.8cf1					_IntegerCode:
.8cf1	20 c7 8c	jsr $8cc7			jsr 	CheckDivideZero 			; do div zero check
.8cf4	20 fe 8c	jsr $8cfe			jsr 	Int32Divide 				; do the division
.8cf7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8cfa	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8cfd	60		rts				rts
.8cfe					Int32Divide:
.8cfe	48		pha				pha 								; save AXY
.8cff	5a		phy				phy
.8d00	20 a1 86	jsr $86a1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d03	20 c6 86	jsr $86c6			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d06	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8d08					_I32DivideLoop:
.8d08	e8		inx				inx
.8d09	e8		inx				inx
.8d0a	20 df 86	jsr $86df			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8d0d	ca		dex				dex
.8d0e	ca		dex				dex
.8d0f	20 e0 86	jsr $86e0			jsr 	NSMRotateLeft
.8d12	20 3a 8d	jsr $8d3a			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d15	90 03		bcc $8d1a			bcc 	_I32DivideNoCarryIn
.8d17	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8d1a					_I32DivideNoCarryIn:
.8d1a	88		dey				dey 								; loop round till division completed.
.8d1b	d0 eb		bne $8d08			bne 	_I32DivideLoop
.8d1d	7a		ply				ply 								; restore AXY and exit
.8d1e	68		pla				pla
.8d1f	60		rts				rts
.8d20					Int32ShiftDivide:
.8d20	48		pha				pha 								; save AXY
.8d21	5a		phy				phy
.8d22	20 a1 86	jsr $86a1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d25	20 c6 86	jsr $86c6			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d28	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8d2a					_I32SDLoop:
.8d2a	20 3a 8d	jsr $8d3a			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d2d	20 e0 86	jsr $86e0			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8d30	e8		inx				inx
.8d31	20 e0 86	jsr $86e0			jsr 	NSMRotateLeft
.8d34	88		dey				dey 	 							; do 31 times
.8d35	d0 f3		bne $8d2a			bne 	_I32SDLoop
.8d37	7a		ply				ply 								; restore AXY and exit
.8d38	68		pla				pla
.8d39	60		rts				rts
.8d3a					DivideCheckSubtract:
.8d3a	20 0b 82	jsr $820b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8d3d	b0 04		bcs $8d43			bcs 	_DCSExit 					; if carry set, then could do, exit
.8d3f	20 e5 81	jsr $81e5			jsr 	AddTopTwoStack 				; add it back in
.8d42	18		clc				clc 								; and return False
.8d43					_DCSExit:
.8d43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8d44					MulInteger:
.8d44	fa		plx				plx
.8d45	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d48	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d4b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d4c	0a		asl a				asl 	a
.8d4d	10 05		bpl $8d54			bpl 	_NotRef
.8d4f	48		pha				pha
.8d50	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d53	68		pla				pla
.8d54					_NotRef:
.8d54	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d55	30 0b		bmi $8d62			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8d57	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d5a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d5d	f0 06		beq $8d65			beq 	_IntegerCode 				; if clear, then we have two integers
.8d5f	4c d9 8d	jmp $8dd9			jmp 	NotDoneError 							; otherwise at least one float.
.8d62					_StringData:
.8d62	4c d9 8d	jmp $8dd9			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8d65					_IntegerCode:
.8d65	20 72 8d	jsr $8d72			jsr 	MultiplyShort
.8d68	c9 00		cmp #$00			cmp 	#0
.8d6a	f0 05		beq $8d71			beq 	_MIExit
.8d6c	a9 04		lda #$04		lda	#4
.8d6e	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d71					_MIExit:
.8d71	60		rts				rts
.8d72					MultiplyShort:
.8d72	5a		phy				phy 								; save Y
.8d73	20 a1 86	jsr $86a1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d76	20 c6 86	jsr $86c6			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8d79	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8d7b					_I32MLoop:
.8d7b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8d7e	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8d81	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8d84	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8d87	f0 28		beq $8db1			beq 	_I32MExit 					; exit if zero
.8d89	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8d8c	29 01		and #$01			and 	#1
.8d8e	f0 0e		beq $8d9e			beq 	_I32MNoAdd
.8d90	20 e5 81	jsr $81e5			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8d93	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8d96	10 06		bpl $8d9e			bpl 	_I32MNoAdd
.8d98					_I32ShiftRight:
.8d98	20 ed 86	jsr $86ed			jsr 	NSMShiftRight 				; shift S[X] right
.8d9b	c8		iny				iny 								; increment shift count
.8d9c	80 0a		bra $8da8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8d9e					_I32MNoAdd:
.8d9e	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8da1	70 f5		bvs $8d98			bvs 	_I32ShiftRight 				; instead.
.8da3	e8		inx				inx
.8da4	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8da7	ca		dex				dex
.8da8					_I32MShiftUpper:
.8da8	e8		inx				inx 								; shift S[X+2] right
.8da9	e8		inx				inx
.8daa	20 ed 86	jsr $86ed			jsr 	NSMShiftRight
.8dad	ca		dex				dex
.8dae	ca		dex				dex
.8daf	80 ca		bra $8d7b			bra 	_I32MLoop 					; try again.
.8db1					_I32MExit:
.8db1	20 b7 8d	jsr $8db7			jsr 	CalculateSign
.8db4	98		tya				tya 								; shift in A
.8db5	7a		ply				ply 								; restore Y and exit
.8db6	60		rts				rts
.8db7					CalculateSign:
.8db7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8dba	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8dbd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8dc0	0a		asl a				asl 	a 							; shift bit 7 into carry
.8dc1	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8dc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.819b					ShiftLeft:
.819b	38		sec				sec
.819c	80 01		bra $819f			bra 	ShiftMain
.819e					ShiftRight:
.819e	18		clc				clc
.819f					ShiftMain:
.819f	fa		plx				plx 								; restore X
.81a0	08		php				php 								; save direction
.81a1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.81a4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.81a7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.81a8	0a		asl a				asl 	a
.81a9	10 05		bpl $81b0			bpl 	_NotRef
.81ab	48		pha				pha
.81ac	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81af	68		pla				pla
.81b0					_NotRef:
.81b0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.81b2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81b5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81b8	f0 03		beq $81bd			beq 	_IntegerCode 				; if clear, then we have two integers
.81ba	4c cf 8d	jmp $8dcf			jmp 	TypeError 					; anything else, type mismatch.
.81bd					_IntegerCode:
.81bd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.81c0	29 e0		and #$e0			and 	#$E0
.81c2	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.81c5	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.81c8	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.81cb	d0 13		bne $81e0			bne 	_SMExit0 					; if >= 32 it will always return zero.
.81cd					_SMLoop:
.81cd	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.81d0	30 11		bmi $81e3			bmi 	_SMExit 					; exit if done.
.81d2	28		plp				plp 								; restore direcition setting
.81d3	08		php				php
.81d4	90 05		bcc $81db			bcc 	_SMRight
.81d6	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; shift left if CS
.81d9	80 f2		bra $81cd			bra 	_SMLoop
.81db					_SMRight:
.81db	20 ed 86	jsr $86ed			jsr 	NSMShiftRight 				; shift right if CC
.81de	80 ed		bra $81cd			bra 	_SMLoop
.81e0					_SMExit0:
.81e0	20 ca 86	jsr $86ca			jsr 	NSMSetZero 					; return zero.
.81e3					_SMExit:
.81e3	28		plp				plp 								; throw direction
.81e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.81e5					AddTopTwoStack:
.81e5	18		clc				clc
.81e6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81e9	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.81ec	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81ef	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81f2	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.81f5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81f8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81fb	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.81fe	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8201	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8204	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8207	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.820a	60		rts				rts
.820b					SubTopTwoStack:
.820b	38		sec				sec
.820c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.820f	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8212	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8215	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8218	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.821b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.821e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8221	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8224	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8227	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.822a	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.822d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8230	60		rts				rts
.8231					AddInteger:
.8231	fa		plx				plx
.8232	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8235	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8238	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8239	0a		asl a				asl 	a
.823a	10 05		bpl $8241			bpl 	_NotRef
.823c	48		pha				pha
.823d	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8240	68		pla				pla
.8241					_NotRef:
.8241	0a		asl a				asl 	a 							; put MSB of type into A:7
.8242	30 0b		bmi $824f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8244	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8247	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.824a	f0 06		beq $8252			beq 	_IntegerCode 				; if clear, then we have two integers
.824c	4c d9 8d	jmp $8dd9			jmp 	NotDoneError 							; otherwise at least one float.
.824f					_StringData:
.824f	4c d9 8d	jmp $8dd9			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8252					_IntegerCode:
.8252					AddCode:
.8252	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8255	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8258	10 8b		bpl $81e5			bpl 	AddTopTwoStack
.825a	20 0b 82	jsr $820b			jsr 	SubTopTwoStack 				; do a physical subtraction
.825d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8260	10 09		bpl $826b			bpl 	_AddExit
.8262	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8265	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8268	20 7f 86	jsr $867f			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.826b					_AddExit:
.826b	60		rts				rts
.826c					SubInteger:
.826c	fa		plx				plx
.826d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8270	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8273	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8274	0a		asl a				asl 	a
.8275	10 05		bpl $827c			bpl 	_NotRef
.8277	48		pha				pha
.8278	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.827b	68		pla				pla
.827c					_NotRef:
.827c	0a		asl a				asl 	a 							; put MSB of type into A:7
.827d	30 0b		bmi $828a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.827f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8282	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8285	f0 06		beq $828d			beq 	_IntegerCode 				; if clear, then we have two integers
.8287	4c d9 8d	jmp $8dd9			jmp 	NotDoneError 							; otherwise at least one float.
.828a					_StringData:
.828a	4c d9 8d	jmp $8dd9			jmp 	NotDoneError							; at least one string - don't know both are strings.
.828d					_IntegerCode:
.828d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8290	49 80		eor #$80			eor 	#$80
.8292	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8295	80 bb		bra $8252			bra 	AddCode 					; and do the same code as add.
.8297					AndInteger:
.8297	fa		plx				plx
.8298	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.829b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.829e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.829f	0a		asl a				asl 	a
.82a0	10 05		bpl $82a7			bpl 	_NotRef
.82a2	48		pha				pha
.82a3	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82a6	68		pla				pla
.82a7					_NotRef:
.82a7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82a9	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82ac	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82af	f0 03		beq $82b4			beq 	_IntegerCode 				; if clear, then we have two integers
.82b1	4c cf 8d	jmp $8dcf			jmp 	TypeError 					; anything else, type mismatch.
.82b4					_IntegerCode:
.82b4	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82b7	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.82ba	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82bd	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82c0	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.82c3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82c6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82c9	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.82cc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82cf	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82d2	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.82d5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82d8	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.82db	60		rts				rts
.82dc					OraInteger:
.82dc	fa		plx				plx
.82dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82e0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82e3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82e4	0a		asl a				asl 	a
.82e5	10 05		bpl $82ec			bpl 	_NotRef
.82e7	48		pha				pha
.82e8	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82eb	68		pla				pla
.82ec					_NotRef:
.82ec	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82ee	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82f1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82f4	f0 03		beq $82f9			beq 	_IntegerCode 				; if clear, then we have two integers
.82f6	4c cf 8d	jmp $8dcf			jmp 	TypeError 					; anything else, type mismatch.
.82f9					_IntegerCode:
.82f9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82fc	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.82ff	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8302	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8305	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8308	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.830b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.830e	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8311	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8314	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8317	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.831a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.831d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8320	60		rts				rts
.8321					EorInteger:
.8321	fa		plx				plx
.8322	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8325	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8328	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8329	0a		asl a				asl 	a
.832a	10 05		bpl $8331			bpl 	_NotRef
.832c	48		pha				pha
.832d	20 e5 83	jsr $83e5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8330	68		pla				pla
.8331					_NotRef:
.8331	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8333	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8336	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8339	f0 03		beq $833e			beq 	_IntegerCode 				; if clear, then we have two integers
.833b	4c cf 8d	jmp $8dcf			jmp 	TypeError 					; anything else, type mismatch.
.833e					_IntegerCode:
.833e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8341	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8344	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8347	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.834a	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.834d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8350	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8353	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8356	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8359	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.835c	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.835f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8362	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8365	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.8366					PrecedenceLevel:
>8366	04					.byte	 4	; $00 <<
>8367	02					.byte	 2	; $01 <=
>8368	02					.byte	 2	; $02 <>
>8369	00					.byte	 0	; $03 !!3
>836a	00					.byte	 0	; $04 ><
>836b	02					.byte	 2	; $05 >=
>836c	04					.byte	 4	; $06 >>
>836d	00					.byte	 0	; $07 !!7
>836e	00					.byte	 0	; $08 !!8
>836f	00					.byte	 0	; $09 !!9
>8370	00					.byte	 0	; $0a !!10
>8371	00					.byte	 0	; $0b !!11
>8372	00					.byte	 0	; $0c !!12
>8373	00					.byte	 0	; $0d !!13
>8374	00					.byte	 0	; $0e !!14
>8375	00					.byte	 0	; $0f !!15
>8376	00					.byte	 0	; $10 @
>8377	00					.byte	 0	; $11 !!17
>8378	00					.byte	 0	; $12 !!18
>8379	00					.byte	 0	; $13 [
>837a	04					.byte	 4	; $14 \
>837b	00					.byte	 0	; $15 ]
>837c	01					.byte	 1	; $16 ^
>837d	00					.byte	 0	; $17 _
>837e	00					.byte	 0	; $18 `
>837f	00					.byte	 0	; $19 !!25
>8380	00					.byte	 0	; $1a !!26
>8381	00					.byte	 0	; $1b {
>8382	01					.byte	 1	; $1c |
>8383	00					.byte	 0	; $1d }
>8384	00					.byte	 0	; $1e ~
>8385	00					.byte	 0	; $1f [7m<7F>[m
>8386	00					.byte	 0	; $20
>8387	05					.byte	 5	; $21 !
>8388	00					.byte	 0	; $22 "
>8389	00					.byte	 0	; $23 #
>838a	05					.byte	 5	; $24 $
>838b	04					.byte	 4	; $25 %
>838c	01					.byte	 1	; $26 &
>838d	00					.byte	 0	; $27 '
>838e	00					.byte	 0	; $28 (
>838f	00					.byte	 0	; $29 )
>8390	04					.byte	 4	; $2a *
>8391	03					.byte	 3	; $2b +
>8392	00					.byte	 0	; $2c ,
>8393	03					.byte	 3	; $2d -
>8394	00					.byte	 0	; $2e .
>8395	04					.byte	 4	; $2f /
>8396	00					.byte	 0	; $30 0
>8397	00					.byte	 0	; $31 1
>8398	00					.byte	 0	; $32 2
>8399	00					.byte	 0	; $33 3
>839a	00					.byte	 0	; $34 4
>839b	00					.byte	 0	; $35 5
>839c	00					.byte	 0	; $36 6
>839d	00					.byte	 0	; $37 7
>839e	00					.byte	 0	; $38 8
>839f	00					.byte	 0	; $39 9
>83a0	00					.byte	 0	; $3a :
>83a1	00					.byte	 0	; $3b ;
>83a2	02					.byte	 2	; $3c <
>83a3	02					.byte	 2	; $3d =
>83a4	02					.byte	 2	; $3e >
>83a5	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.83a6					EvaluateExpressionAt0:
.83a6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.83a8					EvaluateExpression:
.83a8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.83aa					EvaluateExpressionAtPrecedence:
.83aa	48		pha				pha 								; save precedence level
.83ab	20 32 85	jsr $8532			jsr 	EvaluateTerm 				; evaluate term into level X.
.83ae	68		pla				pla 								; restore precedence level.
.83af					_EXPRLoop:
.83af	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.83b1	b1 30		lda ($30),y			lda 	(codePtr),y
.83b3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.83b5	b0 25		bcs $83dc			bcs 	_EXPRExit
.83b7	da		phx				phx 								; read the operator precedence
.83b8	aa		tax				tax
.83b9	bd 66 83	lda $8366,x			lda 	PrecedenceLevel,x
.83bc	fa		plx				plx
.83bd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.83bf	f0 1b		beq $83dc			beq 	_EXPRExit
.83c1	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.83c3	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.83c5	c5 37		cmp $37				cmp 	zTemp0+1
.83c7	b0 13		bcs $83dc			bcs		_EXPRExit 					; if current >= operator exit
.83c9	48		pha				pha 								; save current precedence.
.83ca	b1 30		lda ($30),y			lda 	(codePtr),y
.83cc	c8		iny				iny
.83cd	48		pha				pha
.83ce	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.83d0	e8		inx				inx 								; work out the right hand side.
.83d1	20 aa 83	jsr $83aa			jsr 	EvaluateExpressionAtPrecedence
.83d4	ca		dex				dex
.83d5	68		pla				pla 								; get operator, call the code.
.83d6	20 df 83	jsr $83df			jsr 	_EXPRCaller
.83d9	68		pla				pla 								; restore precedence level
.83da	80 d3		bra $83af			bra 	_EXPRLoop 					; and go round.
.83dc					_EXPRExit:
.83dc	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.83de	60		rts				rts
.83df					_EXPRCaller:
.83df	da		phx				phx 								; save on stack, first thing is to restore it
.83e0	0a		asl a				asl 	a 							; double so can use vectors into X
.83e1	aa		tax				tax
.83e2	7c 24 80	jmp ($8024,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.83e5					DereferenceTopTwo:
.83e5	e8		inx				inx
.83e6	20 ea 83	jsr $83ea			jsr 	Dereference 				; deref x+1
.83e9	ca		dex				dex  								; falls through to deref x
.83ea					Dereference:
.83ea	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.83ed	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.83ef	f0 57		beq $8448			beq 	_DRFExit 					; not a reference
.83f1	5a		phy				phy
.83f2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.83f5	85 36		sta $36				sta 	zTemp0
.83f7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83fa	85 37		sta $37				sta 	zTemp0+1
.83fc	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.83ff	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8401	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8404	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8407	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8409	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.840b	f0 0f		beq $841c			beq 	_DRFDereferenceTwo
.840d	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.840f	f0 39		beq $844a			beq 	_DRFFull
.8411	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8414	29 03		and #$03			and 	#3
.8416	f0 32		beq $844a			beq 	_DRFFull 					; the whole word
.8418	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.841a	f0 07		beq $8423			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.841c					_DRFDereferenceTwo:
.841c	a0 01		ldy #$01			ldy 	#1
.841e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8420	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8423					_DRFClear23:
.8423	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8426	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8429	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.842c	29 18		and #$18			and 	#NSBTypeMask
.842e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8431	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8433	d0 12		bne $8447			bne 	_DRFNotString
.8435	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8438	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.843b	d0 0a		bne $8447			bne 	_DRFNotString
.843d	a9 49		lda #$49			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.843f	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8442	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.8444	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8447					_DRFNotString
.8447	7a		ply				ply 								; restore Y and exit
.8448					_DRFExit:
.8448	60		rts				rts
.8449					_DRFNullString:
>8449	00						.byte 	0
.844a					_DRFFull:
.844a	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.844c	b1 36		lda ($36),y			lda 	(zTemp0),y
.844e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8451	c8		iny				iny
.8452	b1 36		lda ($36),y			lda 	(zTemp0),y
.8454	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8457	c8		iny				iny
.8458	b1 36		lda ($36),y			lda 	(zTemp0),y
.845a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.845d	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8460	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8463	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8465	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8468	f0 06		beq $8470			beq 	_DRFNoExponent
.846a	c8		iny				iny 								; if not, read the exponent as well.
.846b	b1 36		lda ($36),y			lda 	(zTemp0),y
.846d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8470					_DRFNoExponent:
.8470	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8473	10 0d		bpl $8482			bpl 	_DRFExit2 					; if not, then exit.
.8475	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8477	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.847a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.847d	09 80		ora #$80			ora 	#NSBIsNegative
.847f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8482					_DRFExit2:
.8482	7a		ply				ply
.8483	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.8484					EncodeNumberStart:
.8484	38		sec				sec
.8485	80 01		bra $8488			bra 	EncodeNumberContinue+1
.8487					EncodeNumberContinue:
.8487	18		clc				clc
.8488	08		php				php 								; save reset.
.8489	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.848b	f0 0b		beq $8498			beq 	_ENIsOkay
.848d	c9 30		cmp #$30			cmp 	#"0"
.848f	90 04		bcc $8495			bcc 	_ENBadNumber
.8491	c9 3a		cmp #$3a			cmp 	#"9"+1
.8493	90 03		bcc $8498			bcc 	_ENIsOkay
.8495					_ENBadNumber:
.8495	28		plp				plp 								; throw saved reset
.8496					_ENFail:
.8496	18		clc				clc 								; not allowed
.8497	60		rts				rts
.8498					_ENIsOkay:
.8498	28		plp				plp 								; are we restarting
.8499	90 0c		bcc $84a7			bcc 	_ENNoRestart
.849b					_ENStartEncode:
.849b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.849d	20 cc 86	jsr $86cc			jsr 	NSMSetByte
.84a0	a9 01		lda #$01			lda 	#ESTA_Low
.84a2					_ENExitChange:
.84a2	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.84a5	38		sec				sec
.84a6	60		rts				rts
.84a7					_ENNoRestart:
.84a7	48		pha				pha 								; save on stack.
.84a8	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.84ab	c9 01		cmp #$01			cmp 	#ESTA_Low
.84ad	f0 05		beq $84b4			beq  	_ESTALowState
.84af	c9 02		cmp #$02			cmp 	#ESTA_High
.84b1	f0 23		beq $84d6			beq 	_ESTAHighState
>84b3	db						.byte 	$DB 						; causes a break in the emulator
.84b4					_ESTALowState:
.84b4	68		pla				pla 								; get value back
.84b5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.84b7	f0 27		beq $84e0			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.84b9	29 0f		and #$0f			and 	#15 						; make digit
.84bb	85 36		sta $36				sta 	zTemp0 						; save it.
.84bd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.84c0	0a		asl a				asl 	a
.84c1	0a		asl a				asl 	a
.84c2	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84c5	0a		asl a				asl 	a
.84c6	65 36		adc $36				adc 	zTemp0
.84c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84cb	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.84cd	90 05		bcc $84d4			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.84cf	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.84d1	8d 05 07	sta $0705			sta 	EncodeState
.84d4					_ESTANoSwitch:
.84d4	38		sec				sec
.84d5	60		rts				rts
.84d6					_ESTAHighState:
.84d6	68		pla				pla 								; get value back
.84d7	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.84d9	f0 05		beq $84e0			beq 	_ESTASwitchFloat
.84db	20 e1 84	jsr $84e1			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.84de	38		sec				sec
.84df	60		rts				rts
.84e0					_ESTASwitchFloat:
>84e0	db						.byte 	$DB 						; causes a break in the emulator
.84e1					ESTAShiftDigitIntoMantissa:
.84e1	29 0f		and #$0f			and 	#15 						; save digit
.84e3	48		pha				pha
.84e4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.84e7	48		pha				pha
.84e8	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.84eb	48		pha				pha
.84ec	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84ef	48		pha				pha
.84f0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.84f3	48		pha				pha
.84f4	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; x 2
.84f7	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; x 4
.84fa	18		clc				clc 								; pop mantissa and add
.84fb	68		pla				pla
.84fc	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84ff	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8502	68		pla				pla
.8503	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8506	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8509	68		pla				pla
.850a	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.850d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8510	68		pla				pla
.8511	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8514	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8517	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; x 10
.851a	68		pla				pla 								; add digit
.851b	18		clc				clc
.851c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.851f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8522	90 0d		bcc $8531			bcc 	_ESTASDExit
.8524	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8527	d0 08		bne $8531			bne 	_ESTASDExit
.8529	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.852c	d0 03		bne $8531			bne 	_ESTASDExit
.852e	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8531					_ESTASDExit:
.8531	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8532					EvaluateTerm:
.8532	b1 30		lda ($30),y			lda 	(codePtr),y
.8534	30 18		bmi $854e			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8536	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8538	b0 6e		bcs $85a8			bcs 	_ETVariable
.853a	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.853c	90 6e		bcc $85ac			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.853e	c9 3a		cmp #$3a			cmp 	#'9'+1
.8540	b0 6a		bcs $85ac			bcs 	_ETPuncUnary
.8542	20 84 84	jsr $8484			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8545					_ETNumber:
.8545	c8		iny				iny 								; keep encoding until we have the numbers
.8546	b1 30		lda ($30),y			lda 	(codePtr),y
.8548	20 87 84	jsr $8487			jsr 	EncodeNumberContinue
.854b	b0 f8		bcs $8545			bcs 	_ETNumber 					; go back if accepted.
.854d	60		rts				rts
.854e					_ETCheckUnary:
.854e	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8550	f0 40		beq $8592			beq 	_ETString
.8552	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8554	f0 11		beq $8567			beq 	_ETHexConstant
.8556	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8558	90 0a		bcc $8564			bcc 	_ETSyntaxError
.855a	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1
.855c	b0 06		bcs $8564			bcs 	_ETSyntaxError
.855e	da		phx				phx 								; push X on the stack
.855f	0a		asl a				asl 	a 							; put vector x 2 into X
.8560	aa		tax				tax
.8561	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x) 				; and do it.
.8564					_ETSyntaxError:
.8564	4c c5 8d	jmp $8dc5			jmp 	SyntaxError
.8567					_ETHexConstant:
.8567	c8		iny				iny 								; skip #
.8568	c8		iny				iny 								; skip count
.8569	20 ca 86	jsr $86ca			jsr 	NSMSetZero 					; clear result
.856c					_ETHLoop:
.856c	b1 30		lda ($30),y			lda 	(codePtr),y
.856e	c8		iny				iny 								; and consume
.856f	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8571	f0 1e		beq $8591			beq 	_ETHExit
.8573	48		pha				pha 								; save on stack.
.8574	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; x 2
.8577	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; x 4
.857a	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; x 8
.857d	20 df 86	jsr $86df			jsr 	NSMShiftLeft 				; x 16
.8580	68		pla				pla 								; ASCII
.8581	c9 41		cmp #$41			cmp 	#'A'
.8583	90 02		bcc $8587			bcc 	_ETHNotChar
.8585	e9 07		sbc #$07			sbc 	#7
.8587					_ETHNotChar:
.8587	29 0f		and #$0f			and 	#15 						; digit now
.8589	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.858c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.858f	80 db		bra $856c			bra 	_ETHLoop 					; go round.
.8591					_ETHExit:
.8591	60		rts				rts
.8592					_ETString:
.8592	c8		iny				iny 								; look at length
.8593	b1 30		lda ($30),y			lda 	(codePtr),y
.8595	48		pha				pha
.8596	c8		iny				iny 								; first character
.8597	20 43 87	jsr $8743			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.859a	68		pla				pla 								; restore count and save
.859b	85 36		sta $36				sta 	zTemp0
.859d	98		tya				tya 								; add length to Y to skip it.
.859e	18		clc				clc
.859f	65 36		adc $36				adc 	zTemp0
.85a1	a8		tay				tay
.85a2	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.85a4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85a7	60		rts				rts
.85a8					_ETVariable:
>85a8	db						.byte 	$DB 						; causes a break in the emulator
.85a9	4c ff ff	jmp $ffff			jmp 	$FFFF
.85ac					_ETPuncUnary:
.85ac	c8		iny				iny 								; consume the unary character
.85ad	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.85af	f0 31		beq $85e2			beq 	_ETUnaryNegate
.85b1	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.85b3	f0 3d		beq $85f2			beq 	_ETDereference
.85b5	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.85b7	f0 58		beq $8611			beq 	_ETParenthesis
.85b9	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.85bb	f0 43		beq $8600			beq 	_ETStringReference
.85bd	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.85bf	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.85c1	f0 06		beq $85c9			beq 	_ETIndirection
.85c3	e6 36		inc $36				inc 	zTemp0
.85c5	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.85c7	d0 9b		bne $8564			bne 	_ETSyntaxError
.85c9					_ETIndirection:
.85c9	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.85cb	1a		inc a				inc 	a
.85cc	48		pha				pha
.85cd	20 32 85	jsr $8532			jsr 	EvaluateTerm				; evaluate the term
.85d0	20 ea 83	jsr $83ea			jsr 	Dereference 				; dereference it.
.85d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85d6	d0 07		bne $85df			bne 	_ETTypeMismatch
.85d8	68		pla				pla 								; indirection 1-2
.85d9	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.85db	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85de	60		rts				rts
.85df					_ETTypeMismatch:
.85df	4c cf 8d	jmp $8dcf			jmp 	TypeError
.85e2					_ETUnaryNegate:
.85e2	20 32 85	jsr $8532			jsr 	EvaluateTerm				; evaluate the term
.85e5	20 ea 83	jsr $83ea			jsr 	Dereference 				; dereference it.
.85e8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.85eb	29 10		and #$10			and 	#NSTString
.85ed	d0 f0		bne $85df			bne 	_ETTypeMismatch
.85ef	4c 76 86	jmp $8676			jmp 	NSMNegate  					; just toggles the sign bit.
.85f2					_ETDereference:
.85f2	20 32 85	jsr $8532			jsr 	EvaluateTerm				; evaluate the term
.85f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.85f8	29 20		and #$20			and 	#NSBIsReference
.85fa	f0 e3		beq $85df			beq 	_ETTypeMismatch
.85fc	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.85ff	60		rts				rts
.8600					_ETStringReference:
.8600	20 32 85	jsr $8532			jsr 	EvaluateTerm				; evaluate the term
.8603	20 ea 83	jsr $83ea			jsr 	Dereference 				; dereference it.
.8606	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8609	d0 d4		bne $85df			bne 	_ETTypeMismatch
.860b	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.860d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8610	60		rts				rts
.8611					_ETParenthesis:
.8611	20 a8 83	jsr $83a8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8614	20 d7 8b	jsr $8bd7			jsr 	CheckRightBracket 			; check for )
.8617	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.8618					EvaluateValue:
.8618	48		pha				pha
.8619	20 a6 83	jsr $83a6			jsr		EvaluateExpressionAt0 		; expression
.861c	20 ea 83	jsr $83ea			jsr 	Dereference					; derefernce it
.861f	68		pla				pla
.8620	60		rts				rts
.8621					EvaluateNumber:
.8621	20 18 86	jsr $8618			jsr 	EvaluateValue 				; get a value
.8624	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8627	29 10		and #$10			and 	#NSBIsString
.8629	d0 16		bne $8641			bne 	HelperTypeError
.862b	60		rts				rts
.862c					EvaluateString:
.862c	20 18 86	jsr $8618			jsr 	EvaluateValue 				; get a value
.862f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8632	29 10		and #$10			and 	#NSBIsString
.8634	f0 0b		beq $8641			beq 	HelperTypeError
.8636					CopyAddressToTemp0:
.8636	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8639	85 36		sta $36				sta 	zTemp0
.863b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.863e	85 37		sta $37				sta 	zTemp0+1
.8640	60		rts				rts
.8641					HelperTypeError:
.8641	4c cf 8d	jmp $8dcf			jmp 	TypeError
.8644					EvaluateInteger:
.8644	20 21 86	jsr $8621			jsr 	EvaluateNumber
.8647	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.864a	d0 0a		bne $8656			bne 	HelperValueError 			; if not, it's a float.
.864c	60		rts				rts
.864d					EvaluateUnsignedInteger:
.864d	20 44 86	jsr $8644			jsr 	EvaluateInteger 			; check integer is +ve
.8650	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8653	30 01		bmi $8656			bmi 	HelperValueError
.8655	60		rts				rts
.8656					HelperValueError:
.8656	4c d4 8d	jmp $8dd4			jmp 	ArgumentError
.8659					Evaluate16BitInteger:
.8659	20 4d 86	jsr $864d			jsr	 	EvaluateUnsignedInteger		; get integer
.865c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.865f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8662	d0 f2		bne $8656			bne 	HelperValueError
.8664	60		rts				rts
.8665					Evaluate8BitInteger:
.8665	20 4d 86	jsr $864d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8668	d0 ec		bne $8656			bne 	HelperValueError
.866a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.866d	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8670	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8673	d0 e1		bne $8656			bne 	HelperValueError
.8675	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8676					NSMNegate:
.8676	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8679	49 80		eor #$80			eor 	#NSBIsNegative
.867b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.867e	60		rts				rts
.867f					NSMNegateMantissa:
.867f	38		sec				sec
.8680	a9 00		lda #$00			lda 	#0
.8682	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8685	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8688	a9 00		lda #$00			lda 	#0
.868a	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.868d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8690	a9 00		lda #$00			lda 	#0
.8692	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8695	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8698	a9 00		lda #$00			lda 	#0
.869a	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.869d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86a0	60		rts				rts
.86a1					NSMShiftUpTwo:
.86a1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.86a4	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.86a7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86aa	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.86ad	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.86b0	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.86b3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86b6	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.86b9	bd 28 06	lda $0628,x			lda 	NSExponent,x
.86bc	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.86bf	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86c2	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.86c5	60		rts				rts
.86c6					NSMSetZeroMantissaOnly:
.86c6	a9 00		lda #$00			lda 	#0
.86c8	80 08		bra $86d2			bra 	NSMSetMantissa
.86ca					NSMSetZero:
.86ca	a9 00		lda #$00			lda 	#0
.86cc					NSMSetByte:
.86cc	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.86cf	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.86d2					NSMSetMantissa:
.86d2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.86d5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.86d8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.86db	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.86de	60		rts				rts
.86df					NSMShiftLeft:
.86df	18		clc				clc
.86e0					NSMRotateLeft:
.86e0	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.86e3	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.86e6	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.86e9	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.86ec	60		rts				rts
.86ed					NSMShiftRight:
.86ed	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.86f0	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.86f3	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.86f6	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.86f9	60		rts				rts
.86fa					NSMIsZero:
.86fa	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86fd	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8700	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8703	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8706	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8dc5					SyntaxError:
.8dc5	a9 02		lda #$02		lda	#2
.8dc7	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dca					RangeError:
.8dca	a9 04		lda #$04		lda	#4
.8dcc	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dcf					TypeError:
.8dcf	a9 05		lda #$05		lda	#5
.8dd1	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dd4					ArgumentError:
.8dd4	a9 07		lda #$07		lda	#7
.8dd6	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dd9					NotDoneError:
.8dd9	a9 0c		lda #$0c		lda	#12
.8ddb	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dde					ErrorText:
>8dde	42 72 65 61 6b 00			.text	"Break",0
>8de4	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8dec	72 72 6f 72 00
>8df1	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8df9	20 62 79 20 7a 65 72 6f 00
>8e02	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8e0a	61 6e 67 65 00
>8e0f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8e17	6d 61 74 63 68 00
>8e1d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8e25	65 6d 6f 72 79 00
>8e2b	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8e33	61 72 67 75 6d 65 6e 74 00
>8e3c	53 74 6f 70 00				.text	"Stop",0
>8e41	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8e49	6f 6f 20 6c 6f 6e 67 00
>8e51	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8e59	6e 20 66 61 69 6c 65 64 00
>8e62	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8e6a	61 74 61 00
>8e6e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8e76	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.8707					MemoryNew:
.8707	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8709	85 30		sta $30				sta 	codePtr
.870b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.870d	85 31		sta $31				sta 	codePtr+1
.870f	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8711	92 30		sta ($30)			sta 	(codePtr)
.8713	60		rts				rts
.8714					MemoryAppend:
.8714	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8716	85 30		sta $30				sta 	codePtr
.8718	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.871a	85 31		sta $31				sta 	codePtr+1
.871c					_MAFindEnd:
.871c	b2 30		lda ($30)			lda 	(codePtr)
.871e	f0 0d		beq $872d			beq 	_MAFoundEnd
.8720	18		clc				clc
.8721	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8723	65 30		adc $30				adc 	codePtr
.8725	85 30		sta $30				sta 	codePtr
.8727	90 02		bcc $872b			bcc 	_CREExit
.8729	e6 31		inc $31				inc 	codePtr+1
.872b					_CREExit:
.872b	80 ef		bra $871c			bra 	_MAFindEnd
.872d					_MAFoundEnd:
.872d	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8730	c0 04		cpy #$04			cpy 	#4 							; blank line
.8732	f0 0e		beq $8742			beq 	_MANoLine
.8734	a9 00		lda #$00			lda 	#0 							; end of program
.8736	91 30		sta ($30),y			sta 	(codePtr),y
.8738					_MACopy:
.8738	88		dey				dey
.8739	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.873c	91 30		sta ($30),y			sta 	(codePtr),y
.873e	c0 00		cpy #$00			cpy 	#0
.8740	d0 f6		bne $8738			bne 	_MACopy
.8742					_MANoLine:
.8742	60		rts				rts
.8743					MemoryInline:
.8743	98		tya				tya 								; put address into stack,x
.8744	18		clc				clc
.8745	65 30		adc $30				adc 	codePtr
.8747	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.874a	a5 31		lda $31				lda 	codePtr+1
.874c	69 00		adc #$00			adc 	#0
.874e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8751	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8754	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8757	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.8758					VariableOpen:
.8758	60		rts				rts
.8759					VariableClose:
.8759	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.875a					BackloadProgram:
.875a	a2 ff		ldx #$ff			ldx 	#$FF
.875c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.875f	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.8762	30 1e		bmi $8782			bmi 	_BPExit
.8764					_BPCopy:
.8764	e8		inx				inx  								; copy byte in
.8765	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.8768	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.876b	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.876e	30 0a		bmi $877a			bmi 	_BPEndLine 					; -ve = EOL
.8770	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8772	d0 02		bne $8776			bne 	_BPNotTab
.8774	a9 20		lda #$20			lda 	#' '
.8776					_BPNotTab:
.8776	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8778	b0 ea		bcs $8764			bcs 	_BPCopy
.877a					_BPEndLine:
.877a	20 52 89	jsr $8952			jsr 	TokeniseLine 				; tokenise the line.
.877d	20 14 87	jsr $8714			jsr 	MemoryAppend 				; append to current program
.8780	80 d8		bra $875a			bra 	BackloadProgram
.8782					_BPExit:
.8782	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8783					TokeniseSearchTable:
.8783	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8785	85 36		sta $36				sta 	zTemp0
.8787	a0 00		ldy #$00			ldy 	#0
.8789	a9 80		lda #$80			lda 	#$80 						; token #
.878b	85 38		sta $38				sta 	zTemp1
.878d					_TSTLoop:
.878d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.878f	30 49		bmi $87da			bmi 	_TSTFail 					; -ve = end of table
.8791	f0 2e		beq $87c1			beq 	_TSTNext 					; zero, check next it's a dummy
.8793	c8		iny				iny 								; get the hash
.8794	b1 36		lda ($36),y			lda 	(zTemp0),y
.8796	88		dey				dey
.8797	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.879a	d0 25		bne $87c1			bne 	_TSTNext
.879c	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.879f	38		sec				sec
.87a0	ed 00 07	sbc $0700			sbc 	identStart
.87a3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.87a5	d0 1a		bne $87c1			bne 	_TSTNext
.87a7	5a		phy				phy 								; save Y , we might fail
.87a8	c8		iny				iny 								; point to text
.87a9	c8		iny				iny
.87aa	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.87ad					_TSTCompareName:
.87ad	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.87b0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.87b2	d0 0c		bne $87c0			bne 	_TSTNextPullY 				; fail, pullY and do next
.87b4	e8		inx				inx
.87b5	c8		iny				iny
.87b6	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.87b9	d0 f2		bne $87ad			bne 	_TSTCompareName
.87bb	7a		ply				ply 								; throw Y
.87bc	a5 38		lda $38				lda 	zTemp1 						; get token #
.87be	38		sec				sec 								; return with CS = passed.
.87bf	60		rts				rts
.87c0					_TSTNextPullY:
.87c0	7a		ply				ply 								; restore current, fall through.
.87c1					_TSTNext:
.87c1	e6 38		inc $38				inc 	zTemp1 						; token counter
.87c3	98		tya				tya
.87c4	18		clc				clc
.87c5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.87c7	1a		inc a				inc 	a 							; +1
.87c8	1a		inc a				inc 	a 							; +2
.87c9	a8		tay				tay
.87ca	10 c1		bpl $878d			bpl 	_TSTLoop 					; if Y < $80 loop back
.87cc	98		tya				tya 								; add Y to zTemp0 and reset Y
.87cd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.87cf	18		clc				clc  								; but have tables > 255 bytes
.87d0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.87d2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.87d4	90 b7		bcc $878d			bcc 	_TSTLoop
.87d6	e6 37		inc $37				inc 	zTemp0+1
.87d8	80 b3		bra $878d			bra 	_TSTLoop
.87da					_TSTFail:
.87da	18		clc				clc
.87db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.87dc					KeywordSet0:
>87dc	00 65					.text	0,$65,""               ; $80 !0:EOF
>87de	00 58					.text	0,$58,""               ; $81 !1:SH1
>87e0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>87e2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>87e8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>87f0	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>87f6	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>87fd	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>8803	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>880a	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $89 GETDATE$(
>8812	45 24 28
>8815	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8a GETTIME$(
>881d	45 24 28
>8820	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8b HEX$(
>8827	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>882d	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>8835	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8e LEFT$(
>883d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8f LEN(
>8843	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $90 MID$(
>884a	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $91 NOT
>884f	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $92 PAGE
>8855	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>885d	28
>885e	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>8864	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>886a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>8870	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>8877	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $98 TRUE
>887d	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $99 VAL(
>8883	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9a FOR
>8888	02 8f 49 46				.text	2,$8f,"IF"             ; $9b IF
>888c	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9c PROC
>8892	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9d REPEAT
>889a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9e WHILE
>88a1	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9f ENDIF
>88a8	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a0 ENDPROC
>88b0	43
>88b1	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a1 NEXT
>88b7	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a2 UNTIL
>88be	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a3 WEND
>88c4	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $a4 ASSERT
>88cc	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a5 CALL
>88d2	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a6 CLS
>88d7	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a7 DATA
>88dd	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a8 DIM
>88e2	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a9 GOSUB
>88e9	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $aa GOTO
>88ef	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $ab LET
>88f4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>88fb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>8901	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>8906	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>890e	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b0 THEN
>8914	02 a3 54 4f				.text	2,$a3,"TO"             ; $b1 TO
>8918	ff					.text	$FF
.8919					KeywordSet1:
>8919	00 65					.text	0,$65,""               ; $80 !0:EOF
>891b	00 58					.text	0,$58,""               ; $81 !1:SH1
>891d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>891f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $83 CLEAR
>8926	03 d7 45 4e 44				.text	3,$d7,"END"            ; $84 END
>892b	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $85 LIST
>8931	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $86 NEW
>8936	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $87 RESTORE
>893e	45
>893f	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $88 RUN
>8944	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $89 STOP
>894a	ff					.text	$FF
.894b					KeywordSet2:
>894b	00 65					.text	0,$65,""               ; $80 !0:EOF
>894d	00 58					.text	0,$58,""               ; $81 !1:SH1
>894f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8951	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8952					TokeniseLine:
.8952	20 da 8a	jsr $8ada			jsr 	FixLineBufferCase 			; fix line case
.8955	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8957	8d 06 07	sta $0706			sta 	tokenOffset
.895a	9c 07 07	stz $0707			stz 	tokenLineNumber
.895d	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.8960	a2 ff		ldx #$ff			ldx 	#$FF
.8962					_TKFindFirst:
.8962	e8		inx				inx
.8963	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8966	f0 79		beq $89e1			beq 	_TKExit
.8968	c9 20		cmp #$20			cmp 	#' '
.896a	90 f6		bcc $8962			bcc 	_TKFindFirst
.896c	c9 30		cmp #$30			cmp 	#'0'
.896e	90 07		bcc $8977			bcc 	_TKNoLineNumber
.8970	c9 3a		cmp #$3a			cmp 	#'9'+1
.8972	b0 03		bcs $8977			bcs 	_TKNoLineNumber
.8974	20 04 8b	jsr $8b04			jsr 	TokeniseExtractLineNumber
.8977					_TKNoLineNumber:
.8977					_TKTokeniseLoop:
.8977	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.897a	f0 65		beq $89e1			beq 	_TKExit
.897c	e8		inx				inx
.897d	c9 20		cmp #$20			cmp 	#' '
.897f	f0 f6		beq $8977			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8981	ca		dex				dex 								; undo last get, A contains character, X is position.
.8982	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8984	f0 61		beq $89e7			beq 	_TKTokeniseIdentifier
.8986	c9 41		cmp #$41			cmp 	#'A'
.8988	90 04		bcc $898e			bcc 	_TKTokenisePunctuation
.898a	c9 5b		cmp #$5b			cmp 	#'Z'+1
.898c	90 59		bcc $89e7			bcc 	_TKTokeniseIdentifier
.898e					_TKTokenisePunctuation:
.898e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8990	f0 27		beq $89b9			beq 	_TKString
.8992	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8994	f0 28		beq $89be			beq 	_TKHexConstant
.8996	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8998	f0 29		beq $89c3			beq 	_TKCheckDouble
.899a	c9 3e		cmp #$3e			cmp 	#'>'
.899c	f0 25		beq $89c3			beq 	_TKCheckDouble
.899e					_TKStandardPunctuation:
.899e	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.89a1	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.89a3	90 0e		bcc $89b3			bcc 	_TKNoShift
.89a5	48		pha				pha 								; save
.89a6	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.89a8	85 36		sta $36				sta 	zTemp0
.89aa	68		pla				pla
.89ab	29 20		and #$20			and 	#32 						; bit 5
.89ad	4a		lsr a				lsr 	a 							; shift into bit 3
.89ae	4a		lsr a				lsr 	a
.89af	05 36		ora $36				ora 	zTemp0
.89b1	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.89b3					_TKNoShift:
.89b3	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte 			; write the punctuation character
.89b6	e8		inx				inx 								; consume the character
.89b7	80 be		bra $8977			bra 	_TKTokeniseLoop 			; and loop round again.
.89b9					_TKString:
.89b9	20 69 8a	jsr $8a69			jsr 	TokeniseString
.89bc	80 b9		bra $8977			bra 	_TKTokeniseLoop
.89be					_TKHexConstant:
.89be	20 a4 8a	jsr $8aa4			jsr 	TokeniseHexConstant
.89c1	80 b4		bra $8977			bra 	_TKTokeniseLoop
.89c3					_TKCheckDouble:
.89c3	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.89c6	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.89c8	90 d4		bcc $899e			bcc 	_TKStandardPunctuation
.89ca	c9 3f		cmp #$3f			cmp 	#'>'+1
.89cc	b0 d0		bcs $899e			bcs 	_TKStandardPunctuation
.89ce	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.89d1	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.89d3	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.89d4	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.89d7	38		sec				sec
.89d8	e9 3c		sbc #$3c			sbc 	#'<'
.89da	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.89dd	e8		inx				inx 								; consume both
.89de	e8		inx				inx
.89df	80 96		bra $8977			bra 	_TKTokeniseLoop
.89e1	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.89e3	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.89e6	60		rts				rts
.89e7					_TKTokeniseIdentifier:
.89e7	8e 00 07	stx $0700			stx 	identStart 					; save start
.89ea	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.89ed					_TKCheckLoop:
.89ed	e8		inx				inx 								; look at next, we know first is identifier.
.89ee	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.89f1	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.89f3	f0 f8		beq $89ed			beq 	_TKCheckLoop
.89f5	c9 30		cmp #$30			cmp	 	#"0"
.89f7	90 0c		bcc $8a05			bcc 	_TKEndIdentifier
.89f9	c9 3a		cmp #$3a			cmp 	#"9"+1
.89fb	90 f0		bcc $89ed			bcc 	_TKCheckLoop
.89fd	c9 41		cmp #$41			cmp	 	#"A"
.89ff	90 04		bcc $8a05			bcc 	_TKEndIdentifier
.8a01	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8a03	90 e8		bcc $89ed			bcc 	_TKCheckLoop
.8a05					_TKEndIdentifier:
.8a05	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8a08	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8a0a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8a0c	f0 06		beq $8a14			beq 	_TKHasTypeCharacter
.8a0e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8a10	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8a12	d0 07		bne $8a1b			bne 	_TKNoTypeCharacter
.8a14					_TKHasTypeCharacter:
.8a14	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8a17	e8		inx				inx 								; read next
.8a18	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a1b					_TKNoTypeCharacter:
.8a1b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8a1d	d0 09		bne $8a28			bne 	_TKNoArray
.8a1f	e8		inx				inx 								; skip the (
.8a20	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8a23	09 04		ora #$04			ora 	#$04
.8a25	8d 04 07	sta $0704			sta 	identTypeByte
.8a28					_TKNoArray:
.8a28	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8a2b	20 c5 8a	jsr $8ac5			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8a2e	a0 87		ldy #$87			ldy 	#(KeywordSet0) >> 8
.8a30	a9 dc		lda #$dc			lda 	#(KeywordSet0) & $FF
.8a32	20 83 87	jsr $8783			jsr 	TokeniseSearchTable
.8a35	a2 00		ldx #$00			ldx 	#0
.8a37	b0 1f		bcs $8a58			bcs 	_TKFoundToken
.8a39	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a3b	a9 19		lda #$19			lda 	#(KeywordSet1) & $FF
.8a3d	20 83 87	jsr $8783			jsr 	TokeniseSearchTable
.8a40	a2 81		ldx #$81			ldx 	#$81
.8a42	b0 14		bcs $8a58			bcs 	_TKFoundToken
.8a44	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a46	a9 19		lda #$19			lda 	#(KeywordSet1) & $FF
.8a48	20 83 87	jsr $8783			jsr 	TokeniseSearchTable
.8a4b	a2 82		ldx #$82			ldx 	#$82
.8a4d	b0 09		bcs $8a58			bcs 	_TKFoundToken
.8a4f	20 55 8b	jsr $8b55			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8a52	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a55	4c 77 89	jmp $8977			jmp 	_TKTokeniseLoop 			; and go round again.
.8a58					_TKFoundToken:
.8a58	48		pha				pha 								; save token
.8a59	8a		txa				txa 								; shift in X, is there one ?
.8a5a	f0 03		beq $8a5f			beq 	_TKNoTShift
.8a5c	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte 			; if so, write it out
.8a5f					_TKNoTShift:
.8a5f	68		pla				pla 								; restore and write token
.8a60	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8a63	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a66	4c 77 89	jmp $8977			jmp 	_TKTokeniseLoop 			; and go round again.
.8a69					TokeniseString:
.8a69	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8a6b	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8a6e	e8		inx				inx									; start of quoted string.
.8a6f	da		phx				phx 								; push start of string on top
.8a70	ca		dex				dex
.8a71					_TSFindEnd:
.8a71	e8		inx				inx
.8a72	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8a75	f0 04		beq $8a7b			beq 	_TSEndOfString
.8a77	c9 22		cmp #$22			cmp 	#'"'
.8a79	d0 f6		bne $8a71			bne 	_TSFindEnd
.8a7b					_TSEndOfString:
.8a7b	7a		ply				ply  								; so now Y is first character, X is character after end.
.8a7c	48		pha				pha 								; save terminating character
.8a7d	20 85 8a	jsr $8a85			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8a80	68		pla				pla 								; terminating character
.8a81	f0 01		beq $8a84			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8a83	e8		inx				inx
.8a84					_TSNotQuote:
.8a84	60		rts				rts
.8a85					TOWriteBlockXY:
.8a85	86 36		stx $36				stx 	zTemp0 						; write end character
.8a87	98		tya				tya
.8a88	49 ff		eor #$ff			eor 	#$FF
.8a8a	38		sec				sec
.8a8b	65 36		adc $36				adc 	zTemp0
.8a8d	1a		inc a				inc 	a 							; one extra for NULL
.8a8e	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8a91					_TOBlockLoop:
.8a91	c4 36		cpy $36				cpy 	zTemp0
.8a93	f0 09		beq $8a9e			beq 	_TOBlockExit
.8a95	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8a98	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8a9b	c8		iny				iny
.8a9c	80 f3		bra $8a91			bra 	_TOBlockLoop
.8a9e					_TOBlockExit:
.8a9e	a9 00		lda #$00			lda 	#0
.8aa0	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8aa3	60		rts				rts
.8aa4					TokeniseHexConstant:
.8aa4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8aa6	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8aa9	e8		inx				inx									; start of quoted string.
.8aaa	da		phx				phx 								; push start of constant on top
.8aab	ca		dex				dex
.8aac					_THFindLoop:
.8aac	e8		inx				inx
.8aad	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8ab0	c9 30		cmp #$30			cmp 	#"0"
.8ab2	90 0c		bcc $8ac0			bcc 	_THFoundEnd
.8ab4	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ab6	90 f4		bcc $8aac			bcc 	_THFindLoop
.8ab8	c9 41		cmp #$41			cmp 	#"A"
.8aba	90 04		bcc $8ac0			bcc 	_THFoundEnd
.8abc	c9 47		cmp #$47			cmp 	#"F"+1
.8abe	90 ec		bcc $8aac			bcc 	_THFindLoop
.8ac0					_THFoundEnd:
.8ac0	7a		ply				ply 								; restore start
.8ac1	20 85 8a	jsr $8a85			jsr 	TOWriteBlockXY 				; output the block
.8ac4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8ac5					TokeniseCalculateHash:
.8ac5	da		phx				phx
.8ac6	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8ac9	a9 00		lda #$00			lda 	#0
.8acb					_TCHLoop:
.8acb	18		clc				clc
.8acc	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8acf	e8		inx				inx
.8ad0	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8ad3	d0 f6		bne $8acb			bne 	_TCHLoop
.8ad5	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8ad8	fa		plx				plx
.8ad9	60		rts				rts
.8ada					FixLineBufferCase:
.8ada	a2 00		ldx #$00			ldx 	#0
.8adc					_FLBCLoop:
.8adc	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8adf	f0 22		beq $8b03			beq 	_FLBCExit 					; end of string.
.8ae1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8ae3	f0 11		beq $8af6			beq 	_FLBCInQuotes
.8ae5	e8		inx				inx
.8ae6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8ae8	90 f2		bcc $8adc			bcc 	_FLBCLoop
.8aea	c9 7b		cmp #$7b			cmp 	#'z'+1
.8aec	b0 ee		bcs $8adc			bcs 	_FLBCLoop
.8aee	38		sec				sec 								; make U/C
.8aef	e9 20		sbc #$20			sbc 	#32
.8af1	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8af4	80 e6		bra $8adc			bra 	_FLBCLoop
.8af6					_FLBCInQuotes:
.8af6	e8		inx				inx 								; advance
.8af7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8afa	f0 07		beq $8b03			beq 	_FLBCExit 					; exit on EOS
.8afc	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8afe	d0 f6		bne $8af6			bne 	_FLBCInQuotes
.8b00	e8		inx				inx 								; skip over it
.8b01	80 d9		bra $8adc			bra 	_FLBCLoop
.8b03					_FLBCExit:
.8b03	60		rts				rts
.8b04					TokeniseExtractLineNumber:
.8b04	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8b07	48		pha				pha
.8b08	ad 07 07	lda $0707			lda 	tokenLineNumber
.8b0b	48		pha				pha
.8b0c	20 42 8b	jsr $8b42			jsr 	_TELNTimes2 				; line # x 4
.8b0f	20 42 8b	jsr $8b42			jsr 	_TELNTimes2 				; line # x 2
.8b12	18		clc				clc 								; add stacked value
.8b13	68		pla				pla
.8b14	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b17	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b1a	68		pla				pla
.8b1b	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8b1e	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8b21	20 42 8b	jsr $8b42			jsr 	_TELNTimes2 				; line # x 10
.8b24	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8b27	e8		inx				inx
.8b28	29 0f		and #$0f			and 	#15 						; add to line #
.8b2a	18		clc				clc
.8b2b	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b2e	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b31	90 03		bcc $8b36			bcc 	_TLENNoCarry
.8b33	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8b36					_TLENNoCarry:
.8b36	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8b39	c9 30		cmp #$30			cmp 	#'0'
.8b3b	90 04		bcc $8b41			bcc 	_TLENExit
.8b3d	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b3f	90 c3		bcc $8b04			bcc 	TokeniseExtractLineNumber
.8b41					_TLENExit:
.8b41	60		rts				rts
.8b42					_TELNTimes2:
.8b42	0e 07 07	asl $0707			asl 	tokenLineNumber
.8b45	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8b48	60		rts				rts
.8b49					TokeniseWriteByte:
.8b49	da		phx				phx
.8b4a	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8b4d	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8b50	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8b53	fa		plx				plx
.8b54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8b55					CheckCreateVariableRecord:
.8b55	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b57	85 36		sta $36				sta 	0+zTemp0
.8b59	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8b5b	85 37		sta $37				sta 	1+zTemp0
.8b5d	20 58 87	jsr $8758			jsr 	VariableOpen 				; make variable space available
.8b60					_CCVSearch:
.8b60	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8b62	f0 2c		beq $8b90			beq 	_CCVFail
.8b64	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8b66	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8b68	cd 03 07	cmp $0703			cmp 	identHash
.8b6b	d0 16		bne $8b83			bne 	_CCVNext
.8b6d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8b6f	ae 00 07	ldx $0700			ldx 	identStart
.8b72					_CCVCompare:
.8b72	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8b75	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8b77	e8		inx				inx 								; advance pointers
.8b78	c8		iny				iny
.8b79	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8b7a	d0 07		bne $8b83			bne 	_CCVNext  					; didn't match go to next.
.8b7c	90 f4		bcc $8b72			bcc 	_CCVCompare 				; not finished yet.
.8b7e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8b81	f0 41		beq $8bc4			beq 	_CCVFound 					; yes, we were successful
.8b83					_CCVNext:
.8b83	18		clc				clc
.8b84	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8b86	65 36		adc $36				adc 	zTemp0
.8b88	85 36		sta $36				sta 	zTemp0
.8b8a	90 d4		bcc $8b60			bcc 	_CCVSearch
.8b8c	e6 37		inc $37				inc 	zTemp0+1
.8b8e	80 d0		bra $8b60			bra 	_CCVSearch
.8b90					_CCVFail:
.8b90	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8b92	ad 03 07	lda $0703			lda 	identHash
.8b95	91 36		sta ($36),y			sta 	(zTemp0),y
.8b97	c8		iny				iny 								; offset 2 is the type byte
.8b98	ad 04 07	lda $0704			lda 	identTypeByte
.8b9b	91 36		sta ($36),y			sta 	(zTemp0),y
.8b9d	c8		iny				iny
.8b9e					_CCVData:
.8b9e	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8ba0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba2	c8		iny				iny
.8ba3	c0 08		cpy #$08			cpy 	#8
.8ba5	90 f7		bcc $8b9e			bcc 	_CCVData
.8ba7	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8baa					_CCVCopyName:
.8baa	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8bad	91 36		sta ($36),y			sta 	(zTemp0),y
.8baf	e8		inx				inx
.8bb0	c8		iny				iny
.8bb1	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8bb4	d0 f4		bne $8baa			bne 	_CCVCopyName
.8bb6	98		tya				tya 								; patch offset
.8bb7	92 36		sta ($36)			sta 	(zTemp0)
.8bb9	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8bbb	91 36		sta ($36),y			sta 	(zTemp0),y
.8bbd	88		dey				dey
.8bbe	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8bc0	09 80		ora #$80			ora 	#$80
.8bc2	91 36		sta ($36),y			sta 	(zTemp0),y
.8bc4					_CCVFound:
.8bc4	20 59 87	jsr $8759			jsr 	VariableClose 				; map out variables, perhaps.
.8bc7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8bc9	38		sec				sec
.8bca	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8bcc	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8bce	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8bd1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8bd3	20 49 8b	jsr $8b49			jsr 	TokeniseWriteByte
.8bd6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
