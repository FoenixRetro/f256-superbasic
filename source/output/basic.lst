
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct  4 16:05:33 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					AssemblerAddress:
>071c							.fill 	2
.071e					AssemblerControl:
>071e							.fill 	1
.071f					ParamStart:
>071f							.fill 	2
.0721					IsGroup1:
>0721							.fill 	1
.0722					BaseOpcode:
>0722							.fill 	1
.0723					ModeMask:
>0723							.fill 	1
.0724					tokenOffset:
>0724							.fill 	1
.0725					tokenLineNumber:
>0725							.fill 	2
.0727					tokenBuffer:
>0727							.fill 	253
.0824					lineBuffer:
>0824							.fill 	MaxLineSize+1
.0875					numberBuffer:
>0875							.fill 	34
.0897					decimalBuffer:
>0897							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 3b 87	jsr $873b			jsr 	NewCommand 					; erase current program
.8006	20 20 97	jsr $9720			jsr 	BackloadProgram
.8009	4c 87 88	jmp $8887			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 a3 a5	jsr $a5a3			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	da 8c					.word	ShiftLeft                        ; $00 <<
>8016	d4 8b					.word	BinaryCompareLessEqual           ; $01 <=
>8018	ca 8b					.word	BinaryCompareNotEqual            ; $02 <>
>801a	56 a3					.word	SyntaxError                      ; $03 !!3
>801c	56 a3					.word	SyntaxError                      ; $04 ><
>801e	de 8b					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	dd 8c					.word	ShiftRight                       ; $06 >>
>8022	56 a3					.word	SyntaxError                      ; $07 !!7
>8024	56 a3					.word	SyntaxError                      ; $08 !!8
>8026	56 a3					.word	SyntaxError                      ; $09 !!9
>8028	56 a3					.word	SyntaxError                      ; $0a !!10
>802a	56 a3					.word	SyntaxError                      ; $0b !!11
>802c	56 a3					.word	SyntaxError                      ; $0c !!12
>802e	56 a3					.word	SyntaxError                      ; $0d !!13
>8030	56 a3					.word	SyntaxError                      ; $0e !!14
>8032	56 a3					.word	SyntaxError                      ; $0f !!15
>8034	56 a3					.word	SyntaxError                      ; $10 @
>8036	56 a3					.word	SyntaxError                      ; $11 !!17
>8038	56 a3					.word	SyntaxError                      ; $12 !!18
>803a	56 a3					.word	SyntaxError                      ; $13 [
>803c	8d 9d					.word	IntegerDivide                    ; $14 \
>803e	56 a3					.word	SyntaxError                      ; $15 ]
>8040	63 8e					.word	EorInteger                       ; $16 ^
>8042	56 a3					.word	SyntaxError                      ; $17 _
>8044	56 a3					.word	SyntaxError                      ; $18 `
>8046	56 a3					.word	SyntaxError                      ; $19 !!25
>8048	56 a3					.word	SyntaxError                      ; $1a !!26
>804a	56 a3					.word	SyntaxError                      ; $1b {
>804c	1d 8e					.word	OraInteger                       ; $1c |
>804e	56 a3					.word	SyntaxError                      ; $1d }
>8050	56 a3					.word	SyntaxError                      ; $1e ~
>8052	56 a3					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	56 a3					.word	SyntaxError                      ; $20
>8056	a9 8e					.word	WordIndirect                     ; $21 !
>8058	56 a3					.word	SyntaxError                      ; $22 "
>805a	56 a3					.word	SyntaxError                      ; $23 #
>805c	56 a3					.word	SyntaxError                      ; $24 $
>805e	da 9d					.word	IntegerModulus                   ; $25 %
>8060	d7 8d					.word	AndInteger                       ; $26 &
>8062	56 a3					.word	SyntaxError                      ; $27 '
>8064	56 a3					.word	SyntaxError                      ; $28 (
>8066	56 a3					.word	SyntaxError                      ; $29 )
>8068	4f 9e					.word	MulInteger                       ; $2a *
>806a	71 8d					.word	AddInteger                       ; $2b +
>806c	56 a3					.word	SyntaxError                      ; $2c ,
>806e	ac 8d					.word	SubInteger                       ; $2d -
>8070	56 a3					.word	SyntaxError                      ; $2e .
>8072	e6 9f					.word	FDivideCommand                   ; $2f /
>8074	56 a3					.word	SyntaxError                      ; $30 0
>8076	56 a3					.word	SyntaxError                      ; $31 1
>8078	56 a3					.word	SyntaxError                      ; $32 2
>807a	56 a3					.word	SyntaxError                      ; $33 3
>807c	56 a3					.word	SyntaxError                      ; $34 4
>807e	56 a3					.word	SyntaxError                      ; $35 5
>8080	56 a3					.word	SyntaxError                      ; $36 6
>8082	56 a3					.word	SyntaxError                      ; $37 7
>8084	56 a3					.word	SyntaxError                      ; $38 8
>8086	56 a3					.word	SyntaxError                      ; $39 9
>8088	56 a3					.word	SyntaxError                      ; $3a :
>808a	56 a3					.word	SyntaxError                      ; $3b ;
>808c	b6 8b					.word	BinaryCompareLess                ; $3c <
>808e	ac 8b					.word	BinaryCompareEqual               ; $3d =
>8090	c0 8b					.word	BinaryCompareGreater             ; $3e >
>8092	d0 8e					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	dc 88					.word	EOLCommand                       ; $80 !0:EOF
>8096	e9 88					.word	Shift1Command                    ; $81 !1:SH1
>8098	f1 88					.word	Shift2Command                    ; $82 !2:SH2
>809a	2c a1					.word	AbsUnary                         ; $83 ABS(
>809c	9a 93					.word	AllocUnary                       ; $84 ALLOC(
>809e	3c a1					.word	AscUnary                         ; $85 ASC(
>80a0	55 94					.word	ChrUnary                         ; $86 CHR$(
>80a2	a8 8b					.word	UnaryFalse                       ; $87 FALSE
>80a4	49 a1					.word	FracUnary                        ; $88 FRAC(
>80a6	5f a1					.word	IntUnary                         ; $89 INT(
>80a8	b5 a1					.word	IsValUnary                       ; $8a ISVAL(
>80aa	2f 95					.word	Unary_Left                       ; $8b LEFT$(
>80ac	71 a1					.word	LenUnary                         ; $8c LEN(
>80ae	59 95					.word	Unary_Mid                        ; $8d MID$(
>80b0	f2 93					.word	Unary_Not                        ; $8e NOT(
>80b2	3f 95					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	08 94					.word	Unary_Rnd                        ; $90 RND(
>80b6	8b a1					.word	SgnUnary                         ; $91 SGN(
>80b8	67 94					.word	SpcUnary                         ; $92 SPC(
>80ba	82 94					.word	Unary_Str                        ; $93 STR$(
>80bc	9c 8b					.word	UnaryTrue                        ; $94 TRUE
>80be	ab a1					.word	ValUnary                         ; $95 VAL(
>80c0	fe 84					.word	ForCommand                       ; $96 FOR
>80c2	42 86					.word	IfCommand                        ; $97 IF
>80c4	f9 88					.word	Unused1                          ; $98 PROC
>80c6	33 88					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	01 8b					.word	Command_WHILE                    ; $9a WHILE
>80ca	6b 86					.word	EndIf                            ; $9b ENDIF
>80cc	66 9d					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	b8 85					.word	NextCommand                      ; $9d NEXT
>80d0	f9 88					.word	Unused4                          ; $9e THEN
>80d2	3c 88					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	22 8b					.word	Command_WEND                     ; $a0 WEND
>80d6	d3 83					.word	CallCommand                      ; $a1 CALL
>80d8	56 a3					.word	SyntaxError                      ; $a2 CLS
>80da	36 84					.word	Command_Data                     ; $a3 DATA
>80dc	3e 84					.word	DimCommand                       ; $a4 DIM
>80de	f9 88					.word	Unused3                          ; $a5 DOWNTO
>80e0	64 86					.word	ElseCode                         ; $a6 ELSE
>80e2	11 86					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	2f 86					.word	GotoCommand                      ; $a8 GOTO
>80e6	6c 86					.word	LetCommand                       ; $a9 LET
>80e8	45 87					.word	Command_Print                    ; $aa PRINT
>80ea	cd 87					.word	Command_Read                     ; $ab READ
>80ec	26 88					.word	RemCommand                       ; $ac REM
>80ee	21 86					.word	Command_RETURN                   ; $ad RETURN
>80f0	f9 88					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	56 a3					.word	SyntaxError                      ; $80 !0:EOF
>80f4	56 a3					.word	SyntaxError                      ; $81 !1:SH1
>80f6	56 a3					.word	SyntaxError                      ; $82 !2:SH2
>80f8	a4 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>80fa	c3 83					.word	AssertCommand                    ; $84 ASSERT
>80fc	e1 83					.word	ClearCommand                     ; $85 CLEAR
>80fe	fb 84					.word	EndCommand                       ; $86 END
>8100	a5 86					.word	Command_List                     ; $87 LIST
>8102	3b 87					.word	NewCommand                       ; $88 NEW
>8104	55 88					.word	Command_Restore                  ; $89 RESTORE
>8106	87 88					.word	CommandRUN                       ; $8a RUN
>8108	fc 88					.word	StopCommand                      ; $8b STOP
.810a					VectorSet2:
>810a	56 a3					.word	SyntaxError                      ; $80 !0:EOF
>810c	56 a3					.word	SyntaxError                      ; $81 !1:SH1
>810e	56 a3					.word	SyntaxError                      ; $82 !2:SH2
>8110	19 a2					.word	Assemble_adc                     ; $83 ADC
>8112	11 a2					.word	Assemble_and                     ; $84 AND
>8114	2d a2					.word	Assemble_asl                     ; $85 ASL
>8116	97 a2					.word	Assemble_bcc                     ; $86 BCC
>8118	9b a2					.word	Assemble_bcs                     ; $87 BCS
>811a	a3 a2					.word	Assemble_beq                     ; $88 BEQ
>811c	5a a2					.word	Assemble_bit                     ; $89 BIT
>811e	8b a2					.word	Assemble_bmi                     ; $8a BMI
>8120	9f a2					.word	Assemble_bne                     ; $8b BNE
>8122	87 a2					.word	Assemble_bpl                     ; $8c BPL
>8124	a7 a2					.word	Assemble_bra                     ; $8d BRA
>8126	ab a2					.word	Assemble_brk                     ; $8e BRK
>8128	8f a2					.word	Assemble_bvc                     ; $8f BVC
>812a	93 a2					.word	Assemble_bvs                     ; $90 BVS
>812c	b3 a2					.word	Assemble_clc                     ; $91 CLC
>812e	07 a3					.word	Assemble_cld                     ; $92 CLD
>8130	c7 a2					.word	Assemble_cli                     ; $93 CLI
>8132	f7 a2					.word	Assemble_clv                     ; $94 CLV
>8134	25 a2					.word	Assemble_cmp                     ; $95 CMP
>8136	6e a2					.word	Assemble_cpx                     ; $96 CPX
>8138	69 a2					.word	Assemble_cpy                     ; $97 CPY
>813a	4b a2					.word	Assemble_dec                     ; $98 DEC
>813c	03 a3					.word	Assemble_dex                     ; $99 DEX
>813e	df a2					.word	Assemble_dey                     ; $9a DEY
>8140	15 a2					.word	Assemble_eor                     ; $9b EOR
>8142	50 a2					.word	Assemble_inc                     ; $9c INC
>8144	0f a3					.word	Assemble_inx                     ; $9d INX
>8146	ff a2					.word	Assemble_iny                     ; $9e INY
>8148	82 a2					.word	Assemble_jmp                     ; $9f JMP
>814a	7d a2					.word	Assemble_jsr                     ; $a0 JSR
>814c	21 a2					.word	Assemble_lda                     ; $a1 LDA
>814e	46 a2					.word	Assemble_ldx                     ; $a2 LDX
>8150	64 a2					.word	Assemble_ldy                     ; $a3 LDY
>8152	37 a2					.word	Assemble_lsr                     ; $a4 LSR
>8154	13 a3					.word	Assemble_nop                     ; $a5 NOP
>8156	0d a2					.word	Assemble_ora                     ; $a6 ORA
>8158	c3 a2					.word	Assemble_pha                     ; $a7 PHA
>815a	af a2					.word	Assemble_php                     ; $a8 PHP
>815c	0b a3					.word	Assemble_phx                     ; $a9 PHX
>815e	cb a2					.word	Assemble_phy                     ; $aa PHY
>8160	d3 a2					.word	Assemble_pla                     ; $ab PLA
>8162	b7 a2					.word	Assemble_plp                     ; $ac PLP
>8164	1b a3					.word	Assemble_plx                     ; $ad PLX
>8166	db a2					.word	Assemble_ply                     ; $ae PLY
>8168	32 a2					.word	Assemble_rol                     ; $af ROL
>816a	3c a2					.word	Assemble_ror                     ; $b0 ROR
>816c	bf a2					.word	Assemble_rti                     ; $b1 RTI
>816e	cf a2					.word	Assemble_rts                     ; $b2 RTS
>8170	29 a2					.word	Assemble_sbc                     ; $b3 SBC
>8172	bb a2					.word	Assemble_sec                     ; $b4 SEC
>8174	17 a3					.word	Assemble_sed                     ; $b5 SED
>8176	d7 a2					.word	Assemble_sei                     ; $b6 SEI
>8178	1d a2					.word	Assemble_sta                     ; $b7 STA
>817a	41 a2					.word	Assemble_stx                     ; $b8 STX
>817c	5f a2					.word	Assemble_sty                     ; $b9 STY
>817e	55 a2					.word	Assemble_stz                     ; $ba STZ
>8180	f3 a2					.word	Assemble_tax                     ; $bb TAX
>8182	ef a2					.word	Assemble_tay                     ; $bc TAY
>8184	78 a2					.word	Assemble_trb                     ; $bd TRB
>8186	73 a2					.word	Assemble_tsb                     ; $be TSB
>8188	fb a2					.word	Assemble_tsx                     ; $bf TSX
>818a	e3 a2					.word	Assemble_txa                     ; $c0 TXA
>818c	eb a2					.word	Assemble_txs                     ; $c1 TXS
>818e	e7 a2					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8190					AssembleGroup1:
.8190	a9 ff		lda #$ff			lda 	#$FF
.8192	8d 23 07	sta $0723			sta 	ModeMask 					; initialise the mode mask - all for all
.8195	80 02		bra $8199			bra 	AsmGroup12
.8197					AssembleGroup2:
.8197	a5 00		lda $00				lda 	$00
.8199					AsmGroup12:
.8199	8d 21 07	sta $0721			sta 	IsGroup1 					; save the 'group 1' flag
.819c	68		pla				pla 								; pop the return address to access the information following.
.819d	fa		plx				plx
.819e	20 27 82	jsr $8227			jsr 	AccessParameters 			; get opcode and save as base
.81a1	8d 22 07	sta $0722			sta 	BaseOpcode
.81a4	ad 21 07	lda $0721			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.81a7	d0 08		bne $81b1			bne 	_AG12HaveMask
.81a9	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81ab	20 2f 82	jsr $822f			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81ae	8d 23 07	sta $0723			sta 	ModeMask
.81b1					_AG12HaveMask:
.81b1	20 36 83	jsr $8336			jsr 	TypeAndCalculateOperand 	; get zero page type
.81b4	da		phx				phx 								; save found address mode
.81b5	20 93 82	jsr $8293			jsr 	AssembleModeX
.81b8	fa		plx				plx  								; restore address mode
.81b9	b0 0b		bcs $81c6			bcs 	_AG12Exit
.81bb	20 c7 81	jsr $81c7			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81be	20 93 82	jsr $8293			jsr 	AssembleModeX
.81c1	b0 03		bcs $81c6			bcs 	_AG12Exit
.81c3	4c 56 a3	jmp $a356			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81c6					_AG12Exit:
.81c6	60		rts				rts
.81c7					PromoteToAbsolute:
.81c7	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.81c9	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.81cb	f0 19		beq $81e6			beq 	_PTADo
.81cd	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.81cf	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.81d1	f0 13		beq $81e6			beq 	_PTADo
.81d3	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.81d5	e0 80		cpx #$80			cpx 	#AM_ZEROY
.81d7	f0 0d		beq $81e6			beq 	_PTADo
.81d9	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81db	e0 d1		cpx #$d1			cpx 	#AM_IND
.81dd	f0 07		beq $81e6			beq 	_PTADo
.81df	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.81e1	e0 c0		cpx #$c0			cpx 	#AM_INDX
.81e3	f0 01		beq $81e6			beq 	_PTADo
.81e5	60		rts				rts
.81e6					_PTADo:
.81e6	aa		tax				tax
.81e7	60		rts				rts
.81e8					AssembleGroup3:
.81e8	68		pla				pla 								; get parameters, which is just the opcode.
.81e9	fa		plx				plx
.81ea	20 27 82	jsr $8227			jsr 	AccessParameters 			; get and output opcode
.81ed	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.81f0	20 9a 83	jsr $839a			jsr 	CalculateOperand 			; get a 16 bit operand
.81f3	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.81f6	38		sec				sec
.81f7	ed 1c 07	sbc $071c			sbc 	AssemblerAddress
.81fa	48		pha				pha 								; LSB in A
.81fb	ad 10 06	lda $0610			lda 	NSMantissa1
.81fe	ed 1d 07	sbc $071d			sbc 	AssemblerAddress+1
.8201	aa		tax				tax 								; MSB in X
.8202	68		pla				pla
.8203	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8204	69 7f		adc #$7f			adc 	#$7F
.8206	90 01		bcc $8209			bcc 	_AG3NoCarry
.8208	e8		inx				inx
.8209					_AG3NoCarry:
.8209	38		sec				sec 								; fix back and write out anyways.
.820a	e9 80		sbc #$80			sbc 	#$80
.820c	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.820f	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8211	f0 0a		beq $821d			beq 	_AG3Exit
.8213	ad 1e 07	lda $071e			lda 	AssemblerControl 			; are we allowing bad values ?
.8216	29 01		and #$01			and 	#1
.8218	f0 03		beq $821d			beq 	_AG3Exit
.821a	4c 5b a3	jmp $a35b			jmp 	RangeError 					; no, branch is out of range
.821d					_AG3Exit:
.821d	60		rts				rts
.821e					AssembleGroup4:
.821e	68		pla				pla 								; pop address
.821f	fa		plx				plx
.8220	20 27 82	jsr $8227			jsr 	AccessParameters 			; access and get first
.8223	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte 			; output it.
.8226	60		rts				rts
.8227					AccessParameters:
.8227	8d 1f 07	sta $071f			sta 	ParamStart
.822a	8e 20 07	stx $0720			stx 	ParamStart+1
.822d	a9 01		lda #$01			lda 	#1
.822f					GetParameter:
.822f	5a		phy				phy
.8230	a8		tay				tay
.8231	ad 1f 07	lda $071f			lda 	ParamStart
.8234	85 36		sta $36				sta 	zTemp0
.8236	ad 20 07	lda $0720			lda 	ParamStart+1
.8239	85 37		sta $37				sta 	zTemp0+1
.823b	b1 36		lda ($36),y			lda 	(zTemp0),y
.823d	7a		ply				ply
.823e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.823f					AssemblerWriteByte:
.823f	48		pha			pha
.8240	ad 1e 07	lda $071e		lda 	AssemblerControl 				; check printing bytes ?
.8243	29 02		and #$02		and 	#2
.8245	f0 1b		beq $8262		beq 	_AWBNoPrint
.8247	ad 1d 07	lda $071d		lda		AssemblerAddress+1 				; print address
.824a	20 7d 82	jsr $827d		jsr 	PrintHex
.824d	ad 1c 07	lda $071c		lda		AssemblerAddress
.8250	20 7d 82	jsr $827d		jsr 	PrintHex
.8253	a9 20		lda #$20		lda 	#' '
.8255	20 a3 a5	jsr $a5a3		jsr 	EXTPrintCharacter
.8258	68		pla			pla 									; print byte
.8259	48		pha			pha
.825a	20 7d 82	jsr $827d		jsr 	PrintHex
.825d	a9 0d		lda #$0d		lda 	#13
.825f	20 a3 a5	jsr $a5a3		jsr 	EXTPrintCharacter
.8262					_AWBNoPrint:
.8262	ad 1c 07	lda $071c		lda		AssemblerAddress				; copy address to zTemp0
.8265	85 36		sta $36			sta 	zTemp0
.8267	ad 1d 07	lda $071d		lda		AssemblerAddress+1
.826a	f0 0e		beq $827a		beq 	_AWBRange
.826c	85 37		sta $37			sta 	zTemp0+1
.826e	68		pla			pla 									; write byte out
.826f	92 36		sta ($36)		sta 	(zTemp0)
.8271	ee 1c 07	inc $071c		inc 	AssemblerAddress 				; bump address
.8274	d0 03		bne $8279		bne 	_AWBNoCarry
.8276	ee 1d 07	inc $071d		inc 	AssemblerAddress+1
.8279					_AWBNoCarry:
.8279	60		rts			rts
.827a					_AWBRange:
.827a	4c 5b a3	jmp $a35b		jmp 	RangeError
.827d					PrintHex:
.827d	48		pha				pha
.827e	4a		lsr a				lsr 	a
.827f	4a		lsr a				lsr 	a
.8280	4a		lsr a				lsr 	a
.8281	4a		lsr a				lsr 	a
.8282	20 86 82	jsr $8286			jsr 	_PrintNibble
.8285	68		pla				pla
.8286					_PrintNibble:
.8286	29 0f		and #$0f			and 	#15
.8288	c9 0a		cmp #$0a			cmp 	#10
.828a	90 02		bcc $828e			bcc 	_NoShift
.828c	69 06		adc #$06			adc 	#6
.828e					_NoShift:
.828e	69 30		adc #$30			adc 	#48
.8290	4c a3 a5	jmp $a5a3			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8293					AssembleModeX:
.8293	5a		phy				phy
.8294	ad 21 07	lda $0721			lda 	IsGroup1
.8297	f0 17		beq $82b0			beq 	_AMXGroup2
.8299	8a		txa				txa 							; is it in group # 1
.829a	29 40		and #$40			and 	#AM_ISG1
.829c	f0 50		beq $82ee			beq 	_AMXFail 				; no, give up.
.829e	8a		txa				txa 							; get back.
.829f	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.82a1	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.82a3	d0 22		bne $82c7			bne 	_AMXHaveInfo
.82a5	ad 22 07	lda $0722			lda 	BaseOpcode 				; cannot store immediate.
.82a8	c9 81		cmp #$81			cmp 	#$81
.82aa	f0 42		beq $82ee			beq 	_AMXFail
.82ac	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.82ae	80 17		bra $82c7			bra 	_AMXHaveInfo 			; odd design decision there.
.82b0					_AMXGroup2:
.82b0	8a		txa				txa 							; is it in group 2 ?
.82b1	29 20		and #$20			and 	#AM_ISG2
.82b3	f0 39		beq $82ee			beq 	_AMXFail 				; no, give up.
.82b5	8a		txa				txa 							; get the offset into Y
.82b6	29 1f		and #$1f			and 	#$1F
.82b8	4a		lsr a				lsr 	a 						; make it 0-7.
.82b9	4a		lsr a				lsr  	a
.82ba	a8		tay				tay
.82bb	ad 23 07	lda $0723			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.82be					_AMXCheckOkay:
.82be	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.82bf	88		dey				dey
.82c0	10 fc		bpl $82be			bpl 	_AMXCheckOkay
.82c2	90 2a		bcc $82ee			bcc 	_AMXFail 				; not allowed.
.82c4	8a		txa				txa  							; get mask back
.82c5	29 1f		and #$1f			and 	#$1F
.82c7					_AMXHaveInfo:
.82c7	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.82c9	10 05		bpl $82d0			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.82cb	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.82ce	d0 1e		bne $82ee			bne 	_AMXFail
.82d0					_AMXAnySize:
.82d0	18		clc				clc 							; add offset to the base opcode
.82d1	6d 22 07	adc $0722			adc 	BaseOpcode
.82d4					_AMXOutputCode:
.82d4	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte 		; write the opcode out.
.82d7	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.82d9	f0 10		beq $82eb			beq 	_AMXExit
.82db	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.82de	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.82e1	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.82e3	30 06		bmi $82eb			bmi 	_AMXExit
.82e5	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.82e8	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.82eb					_AMXExit:
.82eb	7a		ply				ply
.82ec	38		sec				sec
.82ed	60		rts				rts
.82ee					_AMXFail:
.82ee	a0 00		ldy #$00			ldy 	#0
.82f0					_AMXCheckOddities:
.82f0	8a		txa				txa
.82f1	d9 19 83	cmp $8319,y			cmp 	ExtraOpcode+2,y 		; match address mode
.82f4	d0 16		bne $830c			bne 	_AMXCONext
.82f6	b9 17 83	lda $8317,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.82f9	cd 22 07	cmp $0722			cmp 	BaseOpcode
.82fc	d0 0e		bne $830c			bne 	_AMXCONext
.82fe	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8300	10 05		bpl $8307			bpl 	_AMXCONotZero
.8302	ad 09 06	lda $0609			lda 	NSMantissa0+1
.8305	d0 0d		bne $8314			bne 	_AMXCOFail
.8307					_AMXCONotZero:
.8307	b9 18 83	lda $8318,y			lda 	ExtraOpcode+1,y 		; get new opcode
.830a	80 c8		bra $82d4			bra 	_AMXOutputCode 			; and assemble it
.830c					_AMXCONext:
.830c	c8		iny				iny
.830d	c8		iny				iny
.830e	c8		iny				iny
.830f	b9 17 83	lda $8317,y			lda 	ExtraOpcode+0,y 		; end of table
.8312	d0 dc		bne $82f0			bne 	_AMXCheckOddities
.8314					_AMXCOFail:
.8314	7a		ply				ply
.8315	18		clc				clc
.8316	60		rts				rts
.8317					ExtraOpcode:
>8317	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>831a	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>831d	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8320	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8323	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8326	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8329	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>832c	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>832f	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8332	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8335	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8336					TypeAndCalculateOperand:
.8336	b1 30		lda ($30),y			lda 	(codePtr),y
.8338	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.833a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.833c	f0 5b		beq $8399			beq 	_TACOExit
.833e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8340	f0 57		beq $8399			beq 	_TACOExit
.8342	c8		iny				iny
.8343	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8345	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8347	f0 51		beq $839a			beq 	CalculateOperand
.8349	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.834b	f0 1f		beq $836c			beq 	_TACOIndirect
.834d	88		dey				dey 								; undo get of first character
.834e	20 9a 83	jsr $839a			jsr 	CalculateOperand 			; get operand
.8351	b1 30		lda ($30),y			lda 	(codePtr),y
.8353	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8355	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8357	d0 40		bne $8399			bne 	_TACOExit
.8359	c8		iny				iny
.835a	20 65 9d	jsr $9d65			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.835d	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.835f	c9 58		cmp #$58			cmp 	#'X'
.8361	f0 36		beq $8399			beq 	_TACOExit
.8363	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8365	c9 59		cmp #$59			cmp 	#'Y'
.8367	f0 30		beq $8399			beq 	_TACOExit
.8369					_TACOSyntax:
.8369	4c 56 a3	jmp $a356			jmp 	SyntaxError
.836c					_TACOIndirect:
.836c	20 9a 83	jsr $839a			jsr 	CalculateOperand 			; get the operand
.836f	b1 30		lda ($30),y			lda 	(codePtr),y
.8371	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8373	f0 17		beq $838c			beq 	_TACOIndX
.8375	20 74 9d	jsr $9d74			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8378	b1 30		lda ($30),y			lda 	(codePtr),y
.837a	a2 d1		ldx #$d1			ldx 	#AM_IND
.837c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.837e	d0 19		bne $8399			bne 	_TACOExit
.8380	c8		iny				iny
.8381	20 65 9d	jsr $9d65			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8384	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8386	d0 e1		bne $8369			bne 	_TACOSyntax
.8388	a2 d0		ldx #$d0			ldx 	#AM_INDY
.838a	80 0d		bra $8399			bra 	_TACOExit
.838c					_TACOIndX:
.838c	c8		iny				iny
.838d	20 65 9d	jsr $9d65			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8390	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8392	d0 d5		bne $8369			bne 	_TACOSyntax
.8394	20 74 9d	jsr $9d74			jsr 	CheckRightBracket			; check )
.8397	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8399					_TACOExit:
.8399	60		rts				rts
.839a					CalculateOperand:
.839a	48		pha				pha
.839b	da		phx				phx
.839c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.839e	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger
.83a1	fa		plx				plx
.83a2	68		pla				pla
.83a3	60		rts				rts
.9d65					TACOCheckXY:
>9d65	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.83a4					AssembleCommand:
.83a4	a2 00		ldx #$00			ldx 	#0
.83a6	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger 		; start address
.83a9	ad 08 06	lda $0608			lda 	NSMantissa0
.83ac	8d 1c 07	sta $071c			sta 	AssemblerAddress
.83af	ad 10 06	lda $0610			lda 	NSMantissa1
.83b2	8d 1d 07	sta $071d			sta 	AssemblerAddress+1
.83b5	20 7c 9d	jsr $9d7c			jsr 	CheckComma
.83b8	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger 		; options
.83bb	ad 08 06	lda $0608			lda 	NSMantissa0
.83be	8d 1e 07	sta $071e			sta 	AssemblerControl
.83c1	60		rts				rts
.83c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83c3					AssertCommand:
.83c3	a2 00		ldx #$00			ldx 	#0
.83c5	20 fa 95	jsr $95fa			jsr 	EvaluateInteger 			; the assert test
.83c8	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; exit if result is non zero.
.83cb	d0 05		bne $83d2			bne 	_ACExit
.83cd	a9 0a		lda #$0a		lda	#10
.83cf	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.83d2					_ACExit:
.83d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83d3					CallCommand:
.83d3	a2 00		ldx #$00			ldx 	#0
.83d5	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger
.83d8	ad 10 06	lda $0610			lda 	NSMantissa1
.83db	8d 09 06	sta $0609			sta 	NSMantissa0+1
.83de	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83e1					ClearCommand:
.83e1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83e3	85 36		sta $36				sta 	0+zTemp0
.83e5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83e7	85 37		sta $37				sta 	1+zTemp0
.83e9					_ClearZeroLoop:
.83e9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83eb	f0 24		beq $8411			beq 	_ClearZeroEnd
.83ed	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.83ef	a9 00		lda #$00			lda 	#0
.83f1					_ClearOneVariable:
.83f1	91 36		sta ($36),y			sta 	(zTemp0),y
.83f3	c8		iny				iny
.83f4	c0 08		cpy #$08			cpy 	#8
.83f6	d0 f9		bne $83f1			bne 	_ClearOneVariable
.83f8	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.83fa	b1 36		lda ($36),y			lda 	(zTemp0),y
.83fc	c9 18		cmp #$18			cmp 	#NSTProcedure
.83fe	d0 04		bne $8404			bne 	_ClearNotProcedure
.8400	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8402	91 36		sta ($36),y			sta 	(zTemp0),y
.8404					_ClearNotProcedure:
.8404	18		clc				clc 								; go to the next variable
.8405	b2 36		lda ($36)			lda 	(zTemp0)
.8407	65 36		adc $36				adc 	zTemp0
.8409	85 36		sta $36				sta 	zTemp0
.840b	90 dc		bcc $83e9			bcc 	_ClearZeroLoop
.840d	e6 37		inc $37				inc 	zTemp0+1
.840f	80 d8		bra $83e9			bra 	_ClearZeroLoop
.8411					_ClearZeroEnd:
.8411	18		clc				clc
.8412	a5 36		lda $36				lda 	zTemp0
.8414	69 01		adc #$01			adc 	#1
.8416	8d 0c 07	sta $070c			sta 	lowMemPtr
.8419	a5 37		lda $37				lda 	zTemp0+1
.841b	69 00		adc #$00			adc 	#0
.841d	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8420	20 13 97	jsr $9713			jsr 	StackReset
.8423	20 2f a5	jsr $a52f			jsr 	StringSystemInitialise
.8426	20 50 8a	jsr $8a50			jsr 	ProcedureScan
.8429	20 55 88	jsr $8855			jsr 	Command_Restore
.842c	9c 1c 07	stz $071c			stz 	AssemblerAddress
.842f	9c 1d 07	stz $071d			stz 	AssemblerAddress+1
.8432	9c 1e 07	stz $071e			stz 	AssemblerControl
.8435	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8436					Command_Data:
.8436	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8438	a2 80		ldx #$80			ldx 	#KWC_EOL
.843a	20 a2 8a	jsr $8aa2			jsr 	ScanForward
.843d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.843e					DimCommand:
.843e	b1 30		lda ($30),y			lda 	(codePtr),y
.8440	29 c0		and #$c0			and 	#$C0
.8442	c9 40		cmp #$40			cmp 	#$40
.8444	d0 7a		bne $84c0			bne 	_DCSyntax
.8446	b1 30		lda ($30),y			lda 	(codePtr),y
.8448	18		clc				clc
.8449	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.844b	85 3f		sta $3f				sta 	zaTemp+1
.844d	c8		iny				iny
.844e	b1 30		lda ($30),y			lda 	(codePtr),y
.8450	c8		iny				iny
.8451	85 3e		sta $3e				sta 	zaTemp
.8453	5a		phy				phy
.8454	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8456	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8458	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.845a	c9 18		cmp #$18			cmp 	#NSTProcedure
.845c	f0 62		beq $84c0			beq 	_DCSyntax
.845e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8460	29 04		and #$04			and 	#NSBIsArray
.8462	f0 64		beq $84c8			beq 	_DCType
.8464	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8466	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8468	d0 59		bne $84c3			bne 	_DCRedefine
.846a	7a		ply				ply
.846b	20 cb 84	jsr $84cb			jsr 	_DCGetSize 				; get array size, check it.
.846e	5a		phy				phy
.846f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8471	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8473	7a		ply				ply 							; is there a second (e.g. ,x)
.8474	b1 30		lda ($30),y			lda 	(codePtr),y
.8476	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8478	d0 0a		bne $8484			bne 	_DCOneDimension
.847a	c8		iny				iny 							; skip comma
.847b	20 cb 84	jsr $84cb			jsr 	_DCGetSize 				; get 2nd array size
.847e	5a		phy				phy
.847f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8481	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8483	7a		ply				ply
.8484					_DCOneDimension:
.8484	5a		phy				phy 							; save position
.8485	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8487	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8489	aa		tax				tax
.848a	c8		iny				iny
.848b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.848d	e8		inx				inx 							; bump them.
.848e	1a		inc a				inc 	a
.848f	20 f6 a1	jsr $a1f6			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8492	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8494	29 e0		and #$e0			and 	#$E0
.8496	d0 23		bne $84bb			bne 	_DCSize
.8498	a0 02		ldy #$02			ldy 	#2 						; get base type
.849a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.849c	20 d9 84	jsr $84d9			jsr 	ScaleByBaseType 		; scale by base type
.849f	a5 36		lda $36				lda 	zTemp0
.84a1	a6 37		ldx $37				ldx 	zTemp0+1
.84a3	20 b9 93	jsr $93b9			jsr 	AllocateXABytes 		; allocate memory
.84a6	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84a8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84aa	c8		iny				iny
.84ab	8a		txa				txa
.84ac	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84ae	7a		ply				ply 							; get position back
.84af	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 		; check )
.84b2	b1 30		lda ($30),y			lda 	(codePtr),y
.84b4	c8		iny				iny 							; consume in case
.84b5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84b7	f0 85		beq $843e			beq 	DimCommand
.84b9	88		dey				dey 							; undo consume
.84ba	60		rts				rts
.84bb					_DCSize:
.84bb	a9 16		lda #$16		lda	#22
.84bd	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.84c0					_DCSyntax:
.84c0	4c 56 a3	jmp $a356			jmp 	SyntaxError
.84c3					_DCRedefine:
.84c3	a9 15		lda #$15		lda	#21
.84c5	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.84c8					_DCType:
.84c8	4c 60 a3	jmp $a360			jmp 	TypeError
.84cb					_DCGetSize:
.84cb	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84cd	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger 	; get array dimension
.84d0	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84d2	f0 e7		beq $84bb			beq 	_DCSize
.84d4	c9 fe		cmp #$fe			cmp 	#254
.84d6	f0 e3		beq $84bb			beq 	_DCSize
.84d8	60		rts				rts
.84d9					ScaleByBaseType:
.84d9	29 10		and #$10			and 	#NSBIsString 			; is it string
.84db	d0 19		bne $84f6			bne 	_SBBTString
.84dd	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84df	48		pha				pha
.84e0	a5 36		lda $36				lda 	zTemp0
.84e2	48		pha				pha
.84e3	06 36		asl $36				asl 	zTemp0 					; x 2
.84e5	26 37		rol $37				rol 	zTemp0+1
.84e7	06 36		asl $36				asl 	zTemp0 					; x 4
.84e9	26 37		rol $37				rol 	zTemp0+1
.84eb	68		pla				pla 							; add stacked value = x 5
.84ec	65 36		adc $36				adc 	zTemp0
.84ee	85 36		sta $36				sta 	zTemp0
.84f0	68		pla				pla
.84f1	65 37		adc $37				adc 	zTemp0+1
.84f3	85 37		sta $37				sta 	zTemp0+1
.84f5	60		rts				rts
.84f6					_SBBTString:
.84f6	06 36		asl $36				asl 	zTemp0
.84f8	26 37		rol $37				rol 	zTemp0+1
.84fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.84fb					EndCommand:
.84fb	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.84fe					ForCommand:
.84fe	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8500	20 c0 96	jsr $96c0			jsr 	StackOpen
.8503	a2 00		ldx #$00			ldx 	#0
.8505	20 0a 92	jsr $920a			jsr 	EvaluateTerm
.8508	bd 00 06	lda $0600,x			lda 	NSStatus,x
.850b	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.850d	d0 49		bne $8558			bne		_FCError
.850f	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8511	20 84 9d	jsr $9d84			jsr 	CheckNextA
.8514	e8		inx				inx
.8515	20 fa 95	jsr $95fa			jsr 	EvaluateInteger 			; <from> in +1
.8518	b1 30		lda ($30),y			lda 	(codePtr),y
.851a	c8		iny				iny 								; consume it
.851b	48		pha				pha 								; save on stack for later
.851c	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.851e	f0 04		beq $8524			beq 	_FCNoSyntax
.8520	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8522	d0 37		bne $855b			bne 	_FCSyntaxError
.8524					_FCNoSyntax:
.8524	e8		inx				inx
.8525	20 fa 95	jsr $95fa			jsr 	EvaluateInteger
.8528	20 f2 96	jsr $96f2			jsr 	STKSaveCodePosition 		; save loop back position
.852b	68		pla				pla 								; restore DOWNTO or TO
.852c	5a		phy				phy 								; save Y on the stack
.852d	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.852f	f0 02		beq $8533			beq 	_FCNotDownTo
.8531	a9 02		lda #$02			lda 	#2
.8533					_FCNotDownTo:
.8533	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8534	a0 10		ldy #$10			ldy 	#16
.8536	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8538	a0 06		ldy #$06			ldy 	#6
.853a	ad 08 06	lda $0608			lda 	NSMantissa0
.853d	91 34		sta ($34),y			sta 	(basicStack),y
.853f	ad 10 06	lda $0610			lda 	NSMantissa1
.8542	c8		iny				iny
.8543	91 34		sta ($34),y			sta 	(basicStack),y
.8545	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8547	a2 01		ldx #$01			ldx 	#1
.8549	20 5e 85	jsr $855e			jsr 	FCIntegerToStack
.854c	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.854e	a2 02		ldx #$02			ldx 	#2
.8550	20 5e 85	jsr $855e			jsr 	FCIntegerToStack
.8553	20 7e 85	jsr $857e			jsr 	CopyIndexToReference
.8556	7a		ply				ply 								; restore position
.8557	60		rts				rts
.8558					_FCError:
.8558	4c 60 a3	jmp $a360			jmp 	TypeError
.855b					_FCSyntaxError:
.855b	4c 56 a3	jmp $a356			jmp 	SyntaxError
.855e					FCIntegerToStack:
.855e	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8561	10 03		bpl $8566			bpl	 	_FCNotNegative
.8563	20 38 96	jsr $9638			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8566					_FCNotNegative:
.8566	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8569	91 34		sta ($34),y			sta 	(basicStack),y
.856b	c8		iny				iny
.856c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.856f	91 34		sta ($34),y			sta 	(basicStack),y
.8571	c8		iny				iny
.8572	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8575	91 34		sta ($34),y			sta 	(basicStack),y
.8577	c8		iny				iny
.8578	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.857b	91 34		sta ($34),y			sta 	(basicStack),y
.857d	60		rts				rts
.857e					CopyIndexToReference:
.857e	5a		phy				phy
.857f	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8581	38		sec				sec 								; (because we copy from offset 8)
.8582	b1 34		lda ($34),y			lda 	(basicStack),y
.8584	e9 08		sbc #$08			sbc 	#8
.8586	85 36		sta $36				sta 	zTemp0
.8588	c8		iny				iny
.8589	b1 34		lda ($34),y			lda 	(basicStack),y
.858b	e9 00		sbc #$00			sbc 	#0
.858d	85 37		sta $37				sta 	zTemp0+1
.858f	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8591	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8593	b1 34		lda ($34),y			lda 	(basicStack),y
.8595	0a		asl a				asl 	a 							; into carry
.8596	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8598	90 14		bcc $85ae			bcc 	_CITRNormal
.859a	38		sec				sec
.859b					_CITRNegative:
.859b	a9 00		lda #$00			lda 	#0
.859d	f1 34		sbc ($34),y			sbc 	(basicStack),y
.859f	91 36		sta ($36),y			sta 	(zTemp0),y
.85a1	c8		iny				iny
.85a2	ca		dex				dex
.85a3	d0 f6		bne $859b			bne 	_CITRNegative
.85a5	88		dey				dey 								; look at MSB of mantissa
.85a6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85a8	09 80		ora #$80			ora 	#$80
.85aa	91 36		sta ($36),y			sta 	(zTemp0),y
.85ac	7a		ply				ply
.85ad	60		rts				rts
.85ae					_CITRNormal:
.85ae	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85b0	91 36		sta ($36),y			sta 	(zTemp0),y
.85b2	c8		iny				iny
.85b3	ca		dex				dex
.85b4	d0 f8		bne $85ae			bne 	_CITRNormal
.85b6	7a		ply				ply 								; and exit.
.85b7	60		rts				rts
.85b8					NextCommand:
.85b8	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85ba	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85bc	20 e7 96	jsr $96e7			jsr 	StackCheckFrame
.85bf	5a		phy				phy
.85c0	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85c2	b1 34		lda ($34),y			lda 	(basicStack),y
.85c4	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85c6	30 02		bmi $85ca			bmi 	_NCStepNeg
.85c8	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85ca					_NCStepNeg:
.85ca	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85cc	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ce	18		clc				clc
.85cf					_NCBump:
.85cf	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85d1	91 34		sta ($34),y			sta 	(basicStack),y
.85d3	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85d5	c8		iny				iny 								; next byte
.85d6	ca		dex				dex 								; do four times
.85d7	d0 f6		bne $85cf			bne 	_NCBump
.85d9	20 7e 85	jsr $857e			jsr		CopyIndexToReference		; copy it to the reference variable.
.85dc	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85de	b1 34		lda ($34),y			lda 	(basicStack),y
.85e0	0a		asl a				asl 	a 							; sign bit to carry
.85e1	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85e3	85 38		sta $38				sta 	zTemp1
.85e5	90 02		bcc $85e9			bcc 	_NCCompRev 					; use if step is +ve
.85e7	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.85e9					_NCCompRev:
.85e9	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.85eb	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.85ed	85 39		sta $39				sta 	zTemp1+1
.85ef	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.85f1	38		sec				sec
.85f2					_NCCompare:
.85f2	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.85f4	b1 34		lda ($34),y			lda 	(basicStack),y
.85f6	a4 39		ldy $39				ldy 	zTemp1+1
.85f8	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85fa	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.85fc	e6 39		inc $39				inc 	zTemp1+1
.85fe	ca		dex				dex 								; do it 4 times.
.85ff	d0 f1		bne $85f2			bne 	_NCCompare
.8601	50 02		bvc $8605			bvc 	_NCNoOverflow 				; convert to signed comparison
.8603	49 80		eor #$80			eor 	#$80
.8605					_NCNoOverflow:
.8605	7a		ply				ply 								; restore Y position
.8606	0a		asl a				asl 	a 							; is bit 7 set.
.8607	90 04		bcc $860d			bcc 	_NCLoopback 				; if no , >= so loop back
.8609	20 d9 96	jsr $96d9			jsr 	StackClose 					; exit the loop
.860c	60		rts				rts
.860d					_NCLoopBack:
.860d	20 03 97	jsr $9703			jsr 	STKLoadCodePosition 		; loop back
.8610	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8611					Command_GOSUB:
.8611	a2 00		ldx #$00			ldx 	#0
.8613	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8616	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8618	20 c0 96	jsr $96c0			jsr 	StackOpen 					; create frame
.861b	20 f2 96	jsr $96f2			jsr 	STKSaveCodePosition 		; save current position
.861e	4c 34 86	jmp $8634			jmp 	GotoStackX
.8621					Command_RETURN:
.8621	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8623	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8625	20 e7 96	jsr $96e7			jsr 	StackCheckFrame
.8628	20 03 97	jsr $9703			jsr 	STKLoadCodePosition 		; restore code position
.862b	20 d9 96	jsr $96d9			jsr 	StackClose
.862e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.862f					GotoCommand:
.862f	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8631	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger
.8634					GotoStackX:
.8634	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8637	48		pha				pha 								; it is slightly inefficient, just in cases.
.8638	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.863b	fa		plx				plx
.863c	20 33 9d	jsr $9d33			jsr 	MemoryTransferAX 			; transfer to line number AX.
.863f	4c 92 88	jmp $8892			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8642					IfCommand:
.8642	a2 00		ldx #$00			ldx 	#0 							; If what.
.8644	20 d7 95	jsr $95d7			jsr 	EvaluateNumber
.8647	b1 30		lda ($30),y			lda 	(codePtr),y
.8649	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.864b	d0 0a		bne $8657			bne 	_IFStructured
.864d	c8		iny				iny 								; consume THEN
.864e	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; is it zero
.8651	f0 01		beq $8654			beq 	_IfFail 					; if fail, go to next line
.8653	60		rts				rts 								; if THEN just continue
.8654					_IfFail:
.8654	4c dc 88	jmp $88dc			jmp 	EOLCommand
.8657					_IfStructured:
.8657	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; is it zero
.865a	d0 07		bne $8663			bne 	_IfExit 					; if not, then continue normally.
.865c	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.865e	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8660	20 a2 8a	jsr $8aa2			jsr 	ScanForward 				; and run from there/
.8663					_IfExit:
.8663	60		rts				rts
.8664					ElseCode:
.8664	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8666	aa		tax				tax 								; so just go to the structure exit
.8667	20 a2 8a	jsr $8aa2			jsr 	ScanForward
.866a	60		rts				rts
.866b					EndIf:
.866b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.866c					LetCommand:
.866c	a2 00		ldx #$00			ldx 	#0
.866e	ad 21 8f	lda $8f21			lda 	PrecedenceLevel+"*"			; precedence > this
.8671	20 3b 8f	jsr $8f3b			jsr 	EvaluateExpressionAtPrecedence
.8674	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8677	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8679	f0 0e		beq $8689			beq 	_LetGoProc 					; it's a procedure call.
.867b	a9 3d		lda #$3d			lda 	#"=" 						; check =
.867d	20 84 9d	jsr $9d84			jsr 	CheckNextA
.8680	e8		inx				inx 								; RHS
.8681	20 ce 95	jsr $95ce			jsr 	EvaluateValue
.8684	ca		dex				dex
.8685	20 8c 86	jsr $868c			jsr 	AssignVariable
.8688	60		rts				rts
.8689					_LetGoProc:
.8689	4c 9c 87	jmp $879c			jmp 	CallProcedure
.868c					AssignVariable:
.868c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.868f	48		pha				pha 								; save a copy
.8690	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8693	29 10		and #$10			and 	#NSBIsString
.8695	d0 0b		bne $86a2			bne 	_ASError
.8697	68		pla				pla 								; get back
.8698	29 10		and #$10			and 	#NSBIsString 				; check type
.869a	d0 03		bne $869f			bne 	_ASString
.869c	4c 76 8f	jmp $8f76			jmp 	AssignNumber
.869f					_ASString:
.869f	4c e4 8f	jmp $8fe4			jmp 	AssignString
.86a2					_ASError:
.86a2	4c 60 a3	jmp $a360			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86a5					Command_List:
.86a5	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86a8	9c 14 06	stz $0614			stz 	NSMantissa1+4
.86ab	a9 ff		lda #$ff			lda 	#$FF
.86ad	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.86b0	8d 17 06	sta $0617			sta 	NSMantissa1+7
.86b3	b1 30		lda ($30),y			lda 	(codePtr),y
.86b5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86b7	f0 1e		beq $86d7			beq 	_CLSecond
.86b9	20 30 87	jsr $8730			jsr 	CLIsDigit 					; if not digit, list all
.86bc	b0 24		bcs $86e2			bcs 	_CLStart
.86be	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86c0	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger
.86c3	b1 30		lda ($30),y			lda 	(codePtr),y
.86c5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86c7	f0 0e		beq $86d7			beq 	_CLSecond 					; if so go get it
.86c9	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.86cc	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.86cf	ad 14 06	lda $0614			lda 	NSMantissa1+4
.86d2	8d 17 06	sta $0617			sta 	NSMantissa1+7
.86d5	80 0b		bra $86e2			bra 	_CLStart
.86d7					_CLSecond:
.86d7	c8		iny				iny 								; consume comma
.86d8	20 30 87	jsr $8730			jsr 	CLIsDigit 					; digit found
.86db	b0 05		bcs $86e2			bcs 	_CLStart 					; if not, continue listing
.86dd	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.86df	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger
.86e2					_CLStart
.86e2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.86e4	85 30		sta $30				sta 	codePtr
.86e6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.86e8	85 31		sta $31				sta 	codePtr+1
.86ea					_CLLoop:
.86ea	b2 30		lda ($30)			lda 	(codePtr)
.86ec	f0 2c		beq $871a			beq 	_CLExit
.86ee	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.86f0	20 1d 87	jsr $871d			jsr 	CLCompareLineNo
.86f3	90 18		bcc $870d			bcc 	_CLNext
.86f5	a2 07		ldx #$07			ldx 	#7
.86f7	20 1d 87	jsr $871d			jsr 	CLCompareLineNo
.86fa	f0 02		beq $86fe			beq 	_CLDoThisOne
.86fc	b0 0f		bcs $870d			bcs 	_CLNext
.86fe					_CLDoThisOne:
.86fe	20 01 89	jsr $8901			jsr 	ListConvertLine 			; convert line into token Buffer
.8701	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8703	a9 27		lda #$27			lda 	#(tokenBuffer & $FF)
.8705	20 89 8b	jsr $8b89			jsr 	PrintStringXA
.8708	a9 0d		lda #$0d			lda 	#13 						; new line
.870a	20 a3 a5	jsr $a5a3			jsr 	EXTPrintCharacter
.870d					_CLNext:
.870d	18		clc				clc
.870e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8710	65 30		adc $30				adc 	codePtr
.8712	85 30		sta $30				sta 	codePtr
.8714	90 02		bcc $8718			bcc 	_CREExit
.8716	e6 31		inc $31				inc 	codePtr+1
.8718					_CREExit:
.8718	80 d0		bra $86ea			bra 	_CLLoop
.871a					_CLExit:
.871a	4c 0c 80	jmp $800c			jmp 	WarmStart
.871d					CLCompareLineNo:
.871d	38		sec				sec
.871e	a0 01		ldy #$01			ldy 	#1
.8720	b1 30		lda ($30),y			lda 	(codePtr),y
.8722	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8725	85 36		sta $36				sta 	zTemp0
.8727	c8		iny				iny
.8728	b1 30		lda ($30),y			lda 	(codePtr),y
.872a	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.872d	05 36		ora $36				ora 	zTemp0
.872f	60		rts				rts
.8730					CLIsDigit:
.8730	b1 30		lda ($30),y			lda 	(codePtr),y
.8732	c9 30		cmp #$30			cmp 	#"0"
.8734	90 03		bcc $8739			bcc	 	_CLIDExitFalse
.8736	c9 3a		cmp #$3a			cmp 	#"9"+1
.8738	60		rts				rts
.8739					_CLIDExitFalse:
.8739	38		sec				sec
.873a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.873b					NewCommand:
.873b	20 e2 9c	jsr $9ce2			jsr 	MemoryNew
.873e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8741	20 e1 83	jsr $83e1			jsr 	ClearCommand 				; clear everything.
.8744	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8745					Command_Print:
.8745	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8746					_CPLoop:
.8746	08		php				php 								; save last action flag
.8747	b1 30		lda ($30),y			lda 	(codePtr),y
.8749	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.874b	f0 46		beq $8793			beq 	_CPExit
.874d	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.874f	f0 42		beq $8793			beq 	_CPExit
.8751	68		pla				pla 								; throw last action flag
.8752	b1 30		lda ($30),y			lda 	(codePtr),y
.8754	c8		iny				iny
.8755	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8757	f0 37		beq $8790			beq 	_CPContinueWithSameLine
.8759	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.875b	f0 2e		beq $878b			beq 	_CPTab
.875d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.875f	f0 26		beq $8787			beq 	_CPNewLine
.8761	88		dey				dey 								; undo the get.
.8762	a2 00		ldx #$00			ldx 	#0
.8764	20 ce 95	jsr $95ce			jsr 	EvaluateValue 				; get a value into slot 0
.8767	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.876a	29 10		and #$10			and 	#NSBIsString
.876c	f0 0b		beq $8779			beq 	_CPNumber
.876e	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8771	ad 08 06	lda $0608			lda 	NSMantissa0
.8774	20 89 8b	jsr $8b89			jsr 	PrintStringXA
.8777	80 cc		bra $8745			bra 	Command_Print 				; loop round clearing carry so NL if end
.8779					_CPNumber:
.8779	a9 05		lda #$05			lda 	#5 							; maximum decimals
.877b	20 a4 94	jsr $94a4			jsr 	ConvertNumberToString 		; convert to string
.877e	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8780	a9 97		lda #$97			lda 	#DecimalBuffer & $FF
.8782	20 89 8b	jsr $8b89			jsr 	PrintStringXA
.8785	80 be		bra $8745			bra 	Command_Print 				; loop round clearing carry so NL if end
.8787					_CPNewLine:
.8787	a9 0d		lda #$0d			lda 	#13
.8789	80 02		bra $878d			bra 	_CPPrintChar
.878b					_CPTab:
.878b	a9 09		lda #$09			lda 	#9 							; print TAB
.878d					_CPPrintChar:
.878d	20 a3 a5	jsr $a5a3			jsr 	EXTPrintCharacter
.8790					_CPContinueWithSameLine:
.8790	38		sec				sec 								; loop round with carry set, which
.8791	80 b3		bra $8746			bra 	_CPLoop 					; will inhibit final CR
.8793					_CPExit:
.8793	28		plp				plp 								; get last action flag
.8794	b0 05		bcs $879b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8796	a9 0d		lda #$0d			lda 	#13 						; print new line
.8798	20 a3 a5	jsr $a5a3			jsr 	EXTPrintCharacter
.879b					_CPExit2:
.879b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.879c					CallProcedure:
.879c	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.879f	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.87a1	20 c0 96	jsr $96c0			jsr 	StackOpen
.87a4	20 f2 96	jsr $96f2			jsr 	STKSaveCodePosition 		; save loop position
.87a7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.87aa	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.87ac	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87af	85 37		sta $37				sta 	zTemp0+1
.87b1	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.87b3	b2 36		lda ($36)			lda 	(zTemp0)
.87b5	85 30		sta $30				sta 	safePtr
.87b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.87b9	85 31		sta $31				sta 	safePtr+1
.87bb	c8		iny				iny
.87bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.87be	85 32		sta $32				sta 	safePtr+2
.87c0	c8		iny				iny
.87c1	b1 36		lda ($36),y			lda 	(zTemp0),y
.87c3	85 33		sta $33				sta 	safePtr+3
.87c5	c8		iny				iny 								; get Y offset -> Y
.87c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.87c8	a8		tay				tay
.87c9	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 			; check )
.87cc	60		rts				rts 								; and continue from here
.9d66					Command_ENDPROC:
.9d66	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9d68	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9d6a	20 e7 96	jsr $96e7			jsr 	StackCheckFrame
.9d6d	20 03 97	jsr $9703			jsr 	STKLoadCodePosition 		; restore code position
.9d70	20 d9 96	jsr $96d9			jsr 	StackClose
.9d73	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.87cd					Command_Read:
.87cd	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.87cf	20 0a 92	jsr $920a			jsr 	EvaluateTerm
.87d2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.87d5	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.87d7	f0 4a		beq $8823			beq 	_CRSyntax 					; check reference (bit 0)
.87d9	20 6c 88	jsr $886c			jsr 	SwapDataCodePtrs 			; swap code and data
.87dc	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.87df	d0 20		bne $8801			bne 	_CRContinueData
.87e1					_CRKeepSearching:
.87e1	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.87e3	aa		tax				tax
.87e4	20 a2 8a	jsr $8aa2			jsr 	ScanForward
.87e7	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.87e9	f0 16		beq $8801			beq 	_CRHaveData 				; found it
.87eb	18		clc				clc
.87ec	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87ee	65 30		adc $30				adc 	codePtr
.87f0	85 30		sta $30				sta 	codePtr
.87f2	90 02		bcc $87f6			bcc 	_CREExit
.87f4	e6 31		inc $31				inc 	codePtr+1
.87f6					_CREExit:
.87f6	a0 03		ldy #$03			ldy 	#3 							; start of line.
.87f8	b2 30		lda ($30)			lda 	(codePtr)
.87fa	d0 e5		bne $87e1			bne 	_CRKeepSearching
.87fc	a9 0b		lda #$0b		lda	#11
.87fe	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.8801					_CRHaveData:
.8801					_CRContinueData:
.8801	a2 01		ldx #$01			ldx 	#1
.8803	20 ce 95	jsr $95ce			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8806	ca		dex				dex
.8807	20 8c 86	jsr $868c			jsr		AssignVariable 				; do the assignment
.880a	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.880d	b1 30		lda ($30),y			lda 	(codePtr),y
.880f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8811	d0 04		bne $8817			bne 	_CRSwapBack
.8813	c8		iny				iny 								; consume comma
.8814	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.8817					_CRSwapBack:
.8817	20 6c 88	jsr $886c			jsr 	SwapDataCodePtrs			; swap them back.
.881a	b1 30		lda ($30),y			lda 	(codePtr),y
.881c	c8		iny				iny
.881d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.881f	f0 ac		beq $87cd			beq 	Command_Read 				; if so go round again.
.8821	88		dey				dey 								; unpick get.
.8822	60		rts				rts
.8823					_CRSyntax:
.8823	4c 56 a3	jmp $a356			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8826					RemCommand:
.8826	b1 30		lda ($30),y			lda 	(codePtr),y
.8828	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.882a	d0 06		bne $8832			bne 	_RMExit
.882c	c8		iny				iny
.882d	98		tya				tya
.882e	38		sec				sec
.882f	71 30		adc ($30),y			adc 	(codePtr),y
.8831	a8		tay				tay
.8832					_RMExit:
.8832	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8833					Command_REPEAT:
.8833	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8835	20 c0 96	jsr $96c0			jsr 	StackOpen
.8838	20 f2 96	jsr $96f2			jsr 	STKSaveCodePosition 		; save loop position
.883b	60		rts				rts
.883c					Command_UNTIL:
.883c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.883e	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8840	20 e7 96	jsr $96e7			jsr 	StackCheckFrame
.8843	a2 00		ldx #$00			ldx 	#0
.8845	20 d7 95	jsr $95d7			jsr 	EvaluateNumber 				; work out the number
.8848	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; check if zero
.884b	f0 04		beq $8851			beq 	_CULoopBack 				; if so keep looping
.884d	20 d9 96	jsr $96d9			jsr 	StackClose		 			; return
.8850	60		rts				rts
.8851					_CULoopBack:
.8851	20 03 97	jsr $9703			jsr 	STKLoadCodePosition 		; loop back
.8854	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8855					Command_Restore:
.8855	20 6c 88	jsr $886c			jsr 	SwapDataCodePtrs 			; swap code and data
.8858	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.885a	85 30		sta $30				sta 	codePtr
.885c	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.885e	85 31		sta $31				sta 	codePtr+1
.8860	20 6c 88	jsr $886c			jsr 	SwapDataCodePtrs 			; put them back
.8863	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8865	8d 19 07	sta $0719			sta 	dataPointer+4
.8868	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.886b	60		rts				rts
.886c					SwapDataCodePtrs:
.886c	da		phx				phx
.886d	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.886f					_SDCPLoop:
.886f	b5 30		lda $30,x			lda 	safePtr,x
.8871	48		pha				pha
.8872	bd 15 07	lda $0715,x			lda 	dataPointer,x
.8875	95 30		sta $30,x			sta 	safePtr,x
.8877	68		pla				pla
.8878	9d 15 07	sta $0715,x			sta 	dataPointer,x
.887b	ca		dex				dex
.887c	10 f1		bpl $886f			bpl 	_SDCPLoop
.887e	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.8881	8c 19 07	sty $0719			sty 	dataPointer+4
.8884	a8		tay				tay
.8885	fa		plx				plx
.8886	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8887					CommandRUN:
.8887	20 e1 83	jsr $83e1			jsr 	ClearCommand 				; clear variable/stacks/etc.
.888a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.888c	85 30		sta $30				sta 	codePtr
.888e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8890	85 31		sta $31				sta 	codePtr+1
.8892					RUNNewLine:
.8892	b2 30		lda ($30)			lda 	(codePtr)
.8894	f0 43		beq $88d9			beq 	CRNoProgram         		; no then END.
.8896	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8898	9a		txs				txs
.8899					RUNCodePointerLine:
.8899	a0 02		ldy #$02			ldy 	#2 							; start of program
.889b					_CRIncMainLoop:
.889b	c8		iny				iny
.889c					_CRMainLoop:
.889c	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.889f	b1 30		lda ($30),y			lda 	(codePtr),y
.88a1	10 10		bpl $88b3			bpl 	_CRNotKeyword
.88a3	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.88a5	b0 04		bcs $88ab			bcs 	_CRIsKeyword
.88a7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.88a9	b0 28		bcs $88d3			bcs		_CRSyntaxError
.88ab					_CRIsKeyword:
.88ab	c8		iny				iny 								; consume command
.88ac	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.88ad	aa		tax				tax 								; put in X for vector jump
.88ae	20 d6 88	jsr $88d6			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.88b1	80 e9		bra $889c			bra 	_CRMainLoop 				; and loop round
.88b3					_CRNotKeyword:
.88b3	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.88b5	f0 e4		beq $889b			beq 	_CRIncMainLoop
.88b7	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.88b9	90 05		bcc $88c0			bcc 	_CRNotVariable
.88bb					_CRGoLet:
.88bb	20 6c 86	jsr $866c			jsr 	LetCommand
.88be	80 dc		bra $889c			bra 	_CRMainLoop
.88c0					_CRNotVariable:
.88c0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.88c2	f0 f7		beq $88bb			beq 	_CRGoLet
.88c4	c9 21		cmp #$21			cmp 	#KWD_PLING
.88c6	f0 f3		beq $88bb			beq 	_CRGoLet
.88c8	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.88ca	f0 01		beq $88cd			beq 	_CRGoRem
>88cc	db						.byte 	$DB 						; causes a break in the emulator
.88cd					_CRGoRem:
.88cd	c8		iny				iny
.88ce	20 26 88	jsr $8826			jsr 	RemCommand
.88d1	80 c9		bra $889c			bra 	_CRMainLoop
.88d3					_CRSyntaxError:
.88d3	4c 56 a3	jmp $a356			jmp 	SyntaxError
.88d6					_CRCallVector0:
.88d6	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.88d9					CRNoProgram:
.88d9	4c fb 84	jmp $84fb			jmp 	EndCommand
.88dc					EOLCommand:
.88dc	18		clc				clc
.88dd	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88df	65 30		adc $30				adc 	codePtr
.88e1	85 30		sta $30				sta 	codePtr
.88e3	90 02		bcc $88e7			bcc 	_CREExit
.88e5	e6 31		inc $31				inc 	codePtr+1
.88e7					_CREExit:
.88e7	80 a9		bra $8892			bra 	RunNewLine
.88e9					Shift1Command:
.88e9	b1 30		lda ($30),y			lda 	(codePtr),y
.88eb	c8		iny				iny
.88ec	0a		asl a				asl 	a
.88ed	aa		tax				tax
.88ee	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.88f1					Shift2Command:
.88f1	b1 30		lda ($30),y			lda 	(codePtr),y
.88f3	c8		iny				iny
.88f4	0a		asl a				asl 	a
.88f5	aa		tax				tax
.88f6	7c 0a 81	jmp ($810a,x)			jmp 	(VectorSet2,x)
.88f9					Unused1:
.88f9					Unused2:
.88f9					Unused3:
.88f9					Unused4:
.88f9	4c 56 a3	jmp $a356			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.88fc					StopCommand:
.88fc	a9 08		lda #$08		lda	#8
.88fe	4c 30 8b	jmp $8b30		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8901					ListConvertLine:
.8901	9c 1b 07	stz $071b			stz 	tbOffset
.8904	9c 27 07	stz $0727			stz 	tokenBuffer
.8907	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8909	b1 30		lda ($30),y			lda 	(codePtr),y
.890b	aa		tax				tax
.890c	88		dey				dey
.890d	b1 30		lda ($30),y			lda 	(codePtr),y
.890f	20 d0 9e	jsr $9ed0			jsr 	ConvertInt16
.8912	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8914	86 37		stx $37				stx 	zTemp0+1
.8916	a0 00		ldy #$00			ldy 	#0
.8918					_LCCopyNumber:
.8918	b1 36		lda ($36),y			lda 	(zTemp0),y
.891a	20 17 8a	jsr $8a17			jsr 	LCLWrite
.891d	c8		iny				iny
.891e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8920	d0 f6		bne $8918			bne 	_LCCopyNumber
.8922					_LCPadOut:
.8922	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8924	20 17 8a	jsr $8a17			jsr 	LCLWrite
.8927	ad 1b 07	lda $071b			lda 	tbOffset
.892a	c9 06		cmp #$06			cmp 	#6
.892c	d0 f4		bne $8922			bne 	_LCPadOut
.892e	a0 03		ldy #$03			ldy 	#3 							; start position.
.8930					_LCMainLoop:
.8930	b1 30		lda ($30),y			lda 	(codePtr),y
.8932	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8934	f0 17		beq $894d			beq 	_LCExit
.8936	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8938	90 14		bcc $894e			bcc 	_LCDoubles
.893a	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.893c	90 20		bcc $895e			bcc 	_LCShiftPunc
.893e	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8940	90 2b		bcc $896d			bcc 	_LCPunctuation
.8942	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8944	90 2d		bcc $8973			bcc 	_LCIdentifiers
.8946	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8948	90 49		bcc $8993			bcc 	_LCTokens
.894a	4c eb 89	jmp $89eb			jmp 	_LCData 					; 254-5 are data objects
.894d					_LCExit:
.894d	60		rts				rts
.894e					_LCDoubles:
.894e	48		pha				pha
.894f	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8950	29 02		and #$02			and 	#2
.8952	09 3c		ora #$3c			ora 	#60 						; make < >
.8954	20 17 8a	jsr $8a17			jsr 	LCLWrite
.8957	68		pla				pla 								; restore, do lower bit
.8958	29 03		and #$03			and 	#3
.895a	09 3c		ora #$3c			ora 	#60
.895c	80 0f		bra $896d			bra		_LCPunctuation 				; print, increment, loop
.895e					_LCShiftPunc:
.895e	aa		tax				tax 								; save in X
.895f	29 07		and #$07			and 	#7 							; lower 3 bits
.8961	f0 02		beq $8965			beq 	_LCNoAdd
.8963	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8965					_LCNoAdd:
.8965	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8967	90 02		bcc $896b			bcc 	_LCNoAdd2
.8969	09 20		ora #$20			ora 	#32 						; adds $20
.896b					_LCNoAdd2:
.896b	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.896d					_LCPunctuation:
.896d	c8		iny				iny 								; consume character
.896e	20 17 8a	jsr $8a17			jsr 	LCLWrite 					; write it out.
.8971	80 bd		bra $8930			bra 	_LCMainLoop 				; go round again.
.8973					_LCIdentifiers:
.8973	18		clc				clc 								; convert to physical address
.8974	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8976	85 37		sta $37				sta 	zTemp0+1
.8978	c8		iny				iny
.8979	b1 30		lda ($30),y			lda 	(codePtr),y
.897b	85 36		sta $36				sta 	zTemp0
.897d	c8		iny				iny
.897e	5a		phy				phy 								; save position
.897f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8981					_LCOutIdentifier:
.8981	c8		iny				iny
.8982	b1 36		lda ($36),y			lda 	(zTemp0),y
.8984	29 7f		and #$7f			and 	#$7F
.8986	20 45 8a	jsr $8a45			jsr 	LCLLowerCase
.8989	20 17 8a	jsr $8a17			jsr 	LCLWrite
.898c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.898e	10 f1		bpl $8981			bpl 	_LCOutIdentifier
.8990	7a		ply				ply 								; restore position
.8991	80 9d		bra $8930			bra 	_LCMainLoop
.8993					_LCTokens:
.8993	aa		tax				tax 								; token in X
.8994	a9 1c		lda #$1c			lda 	#((KeywordSet2) & $FF)
.8996	85 36		sta $36				sta 	0+zTemp0
.8998	a9 99		lda #$99			lda 	#((KeywordSet2) >> 8)
.899a	85 37		sta $37				sta 	1+zTemp0
.899c	e0 82		cpx #$82			cpx 	#$82
.899e	f0 16		beq $89b6			beq 	_LCUseShift
.89a0	a9 d8		lda #$d8			lda 	#((KeywordSet1) & $FF)
.89a2	85 36		sta $36				sta 	0+zTemp0
.89a4	a9 98		lda #$98			lda 	#((KeywordSet1) >> 8)
.89a6	85 37		sta $37				sta 	1+zTemp0
.89a8	e0 81		cpx #$81			cpx 	#$81
.89aa	f0 0a		beq $89b6			beq 	_LCUseShift
.89ac	a9 b6		lda #$b6			lda 	#((KeywordSet0) & $FF)
.89ae	85 36		sta $36				sta 	0+zTemp0
.89b0	a9 97		lda #$97			lda 	#((KeywordSet0) >> 8)
.89b2	85 37		sta $37				sta 	1+zTemp0
.89b4	80 01		bra $89b7			bra 	_LCNoShift
.89b6					_LCUseShift:
.89b6	c8		iny				iny
.89b7					_LCNoShift:
.89b7	20 26 8a	jsr $8a26			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.89ba	b1 30		lda ($30),y			lda 	(codePtr),y
.89bc	aa		tax				tax 								; into X
.89bd					_LCFindText:
.89bd	ca		dex				dex
.89be	10 0e		bpl $89ce			bpl 	_LCFoundText 				; found text.
.89c0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.89c2	1a		inc a				inc 	a 							; one extra for size
.89c3	38		sec				sec 								; one extra for checksum
.89c4	65 36		adc $36				adc 	zTemp0 						; go to next token
.89c6	85 36		sta $36				sta 	zTemp0
.89c8	90 f3		bcc $89bd			bcc 	_LCFindText
.89ca	e6 37		inc $37				inc 	zTemp0+1
.89cc	80 ef		bra $89bd			bra 	_LCFindText
.89ce					_LCFoundText:
.89ce	5a		phy				phy 								; save List position
.89cf	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.89d1	aa		tax				tax
.89d2	a0 02		ldy #$02			ldy 	#2
.89d4					_LCCopyToken:
.89d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.89d6	20 17 8a	jsr $8a17			jsr 	LCLWrite
.89d9	c8		iny				iny
.89da	ca		dex				dex
.89db	d0 f7		bne $89d4			bne 	_LCCopyToken
.89dd	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.89df	f0 05		beq $89e6			beq 	_LCNoSpace
.89e1	a9 20		lda #$20			lda 	#' '
.89e3	20 17 8a	jsr $8a17			jsr 	LCLWrite
.89e6					_LCNoSpace:
.89e6	7a		ply				ply 								; restore position.
.89e7	c8		iny				iny 								; consume token
.89e8	4c 30 89	jmp $8930			jmp 	_LCMainLoop 				; and go around again.
.89eb					_LCData:
.89eb	48		pha				pha 								; save type $FE/$FF
.89ec	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.89ee	c9 fe		cmp #$fe			cmp 	#$FE
.89f0	f0 02		beq $89f4			beq 	_LCHaveOpener
.89f2	a2 22		ldx #$22			ldx 	#'"'
.89f4					_LCHaveOpener:
.89f4	8a		txa				txa 								; output prefix (# or ")
.89f5	20 17 8a	jsr $8a17			jsr 	LCLWrite
.89f8	c8		iny				iny 								; get count
.89f9	b1 30		lda ($30),y			lda 	(codePtr),y
.89fb	aa		tax				tax
.89fc	c8		iny				iny 								; point at first character
.89fd					_LCOutData:
.89fd	b1 30		lda ($30),y			lda 	(codePtr),y
.89ff	c9 00		cmp #$00			cmp 	#0
.8a01	f0 03		beq $8a06			beq 	_LCNoPrint
.8a03	20 17 8a	jsr $8a17			jsr 	LCLWrite
.8a06					_LCNoPrint:
.8a06	c8		iny				iny
.8a07	ca		dex				dex
.8a08	d0 f3		bne $89fd			bne 	_LCOutData
.8a0a	68		pla				pla 								; closing " required ?
.8a0b	c9 ff		cmp #$ff			cmp 	#$FF
.8a0d	d0 05		bne $8a14			bne 	_LCNoQuote
.8a0f	a9 22		lda #$22			lda 	#'"'
.8a11	20 17 8a	jsr $8a17			jsr 	LCLWrite
.8a14					_LCNoQuote:
.8a14	4c 30 89	jmp $8930			jmp 	_LCMainLoop
.8a17					LCLWrite:
.8a17	da		phx				phx
.8a18	ae 1b 07	ldx $071b			ldx 	tbOffset
.8a1b	9d 27 07	sta $0727,x			sta 	tokenBuffer,x
.8a1e	9e 28 07	stz $0728,x			stz 	tokenBuffer+1,x
.8a21	ee 1b 07	inc $071b			inc 	tbOffset
.8a24	fa		plx				plx
.8a25	60		rts				rts
.8a26					LCCheckSpaceRequired:
.8a26	ae 1b 07	ldx $071b			ldx 	tbOffset
.8a29	bd 26 07	lda $0726,x			lda 	tokenBuffer-1,x 			; previous character
.8a2c	20 45 8a	jsr $8a45			jsr 	LCLLowerCase 				; saves a little effort
.8a2f	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8a31	90 11		bcc $8a44			bcc 	_LCCSRExit
.8a33	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a35	90 08		bcc $8a3f			bcc 	_LCCSRSpace
.8a37	c9 61		cmp #$61			cmp 	#"a"
.8a39	90 09		bcc $8a44			bcc 	_LCCSRExit
.8a3b	c9 7b		cmp #$7b			cmp 	#"z"+1
.8a3d	b0 05		bcs $8a44			bcs 	_LCCSRExit
.8a3f					_LCCSRSpace:
.8a3f	a9 20		lda #$20			lda 	#' '
.8a41	20 17 8a	jsr $8a17			jsr 	LCLWrite
.8a44					_LCCSRExit:
.8a44	60		rts				rts
.8a45					LCLLowerCase:
.8a45	c9 41		cmp #$41			cmp 	#"A"
.8a47	90 06		bcc $8a4f			bcc 	_LCLLCOut
.8a49	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8a4b	b0 02		bcs $8a4f			bcs 	_LCLLCOut
.8a4d	69 20		adc #$20			adc 	#$20
.8a4f					_LCLLCOut:
.8a4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8a50					ProcedureScan:
.8a50	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8a52	85 30		sta $30				sta 	codePtr
.8a54	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8a56	85 31		sta $31				sta 	codePtr+1
.8a58					_PSLoop:
.8a58	b2 30		lda ($30)			lda 	(codePtr)
.8a5a	f0 42		beq $8a9e			beq 	_PSExit
.8a5c	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8a5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a60	c9 98		cmp #$98			cmp 	#KWD_PROC
.8a62	d0 2d		bne $8a91			bne 	_PSNext
.8a64	c8		iny				iny 								; get the address of the record to zTemp0 and
.8a65	b1 30		lda ($30),y			lda 	(codePtr),y
.8a67	29 c0		and #$c0			and 	#$C0
.8a69	c9 40		cmp #$40			cmp 	#$40
.8a6b	d0 32		bne $8a9f			bne 	_PSSyntax
.8a6d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a6f	18		clc				clc
.8a70	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a72	85 37		sta $37				sta 	zTemp0+1
.8a74	c8		iny				iny 								; LSB
.8a75	b1 30		lda ($30),y			lda 	(codePtr),y
.8a77	85 36		sta $36				sta 	zTemp0
.8a79	c8		iny				iny 								; character after variable call.
.8a7a	98		tya				tya 								; save Y offset at +7
.8a7b	a0 07		ldy #$07			ldy 	#7
.8a7d	91 36		sta ($36),y			sta 	(zTemp0),y
.8a7f	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8a81	a0 02		ldy #$02			ldy 	#2
.8a83	91 36		sta ($36),y			sta 	(zTemp0),y
.8a85	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8a87					_PSCopy:
.8a87	b5 30		lda $30,x			lda 	safePtr,x
.8a89	c8		iny				iny
.8a8a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a8c	e8		inx				inx
.8a8d	e0 04		cpx #$04			cpx 	#4
.8a8f	d0 f6		bne $8a87			bne 	_PSCopy
.8a91					_PSNext:
.8a91	18		clc				clc
.8a92	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a94	65 30		adc $30				adc 	codePtr
.8a96	85 30		sta $30				sta 	codePtr
.8a98	90 02		bcc $8a9c			bcc 	_CREExit
.8a9a	e6 31		inc $31				inc 	codePtr+1
.8a9c					_CREExit:
.8a9c	80 ba		bra $8a58			bra 	_PSLoop
.8a9e					_PSExit:
.8a9e	60		rts				rts
.8a9f					_PSSyntax:
.8a9f	4c 56 a3	jmp $a356			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8aa2					ScanForward:
.8aa2	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8aa4	86 37		stx $37				stx 	zTemp0+1
.8aa6	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8aa8					_ScanLoop:
.8aa8	b1 30		lda ($30),y			lda 	(codePtr),y
.8aaa	c8		iny				iny
.8aab	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8aad	d0 0e		bne $8abd			bne 	_ScanGoNext
.8aaf	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ab1	f0 04		beq $8ab7			beq 	_ScanMatch
.8ab3	c5 37		cmp $37				cmp 	zTemp0+1
.8ab5	d0 06		bne $8abd			bne 	_ScanGoNext
.8ab7					_ScanMatch:
.8ab7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8ab9	d0 01		bne $8abc			bne 	_ScanNotEndEOL
.8abb	88		dey				dey
.8abc					_ScanNotEndEOL:
.8abc	60		rts				rts
.8abd					_ScanGoNext:
.8abd	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8abf	90 e7		bcc $8aa8			bcc 	_ScanLoop
.8ac1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8ac3	90 18		bcc $8add			bcc 	_ScanSkipOne
.8ac5	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ac7	b0 2f		bcs $8af8			bcs 	_ScanSkipData
.8ac9	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8acb	90 db		bcc $8aa8			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8acd	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8acf	b0 d7		bcs $8aa8			bcs 	_ScanLoop
.8ad1	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ad3	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ad5	b0 d1		bcs $8aa8			bcs 	_ScanLoop
.8ad7	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8ad9	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8adb	80 cb		bra $8aa8			bra 	_ScanLoop
.8add					_ScanSkipOne:
.8add	c8		iny				iny 								; consume the extra one.
.8ade	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8ae0	d0 c6		bne $8aa8			bne 	_ScanLoop
.8ae2	18		clc				clc
.8ae3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ae5	65 30		adc $30				adc 	codePtr
.8ae7	85 30		sta $30				sta 	codePtr
.8ae9	90 02		bcc $8aed			bcc 	_CREExit
.8aeb	e6 31		inc $31				inc 	codePtr+1
.8aed					_CREExit:
.8aed	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8aef	b2 30		lda ($30)			lda 	(codePtr)
.8af1	d0 b5		bne $8aa8			bne 	_ScanLoop 					; if not zero, more to scan
.8af3	a9 13		lda #$13		lda	#19
.8af5	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.8af8					_ScanSkipData:
.8af8	88		dey				dey 								; point at data token
.8af9	c8		iny				iny
.8afa	98		tya				tya
.8afb	38		sec				sec
.8afc	71 30		adc ($30),y			adc 	(codePtr),y
.8afe	a8		tay				tay
.8aff	80 a7		bra $8aa8			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8b01					Command_WHILE:
.8b01	5a		phy				phy 								; save position of the test
.8b02	a2 00		ldx #$00			ldx 	#0
.8b04	20 d7 95	jsr $95d7			jsr 	EvaluateNumber 				; work out the number
.8b07	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; check if zero
.8b0a	f0 0e		beq $8b1a			beq 	_WHExitLoop 				; if so exit the loop
.8b0c	98		tya				tya 								; position *after* test.
.8b0d	7a		ply				ply 								; restore position before test, at WHILE
.8b0e	88		dey				dey
.8b0f	48		pha				pha 								; push after test on the stack
.8b10	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8b12	20 c0 96	jsr $96c0			jsr 	StackOpen
.8b15	20 f2 96	jsr $96f2			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8b18	7a		ply				ply 								; restore the position *after* the test
.8b19	60		rts				rts
.8b1a					_WHExitLoop:
.8b1a	68		pla				pla 								; throw post loop position
.8b1b	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8b1d	aa		tax				tax
.8b1e	20 a2 8a	jsr $8aa2			jsr 	ScanForward
.8b21	60		rts				rts
.8b22					Command_WEND:
.8b22	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8b24	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8b26	20 e7 96	jsr $96e7			jsr 	StackCheckFrame
.8b29	20 03 97	jsr $9703			jsr 	STKLoadCodePosition 		; loop back
.8b2c	20 d9 96	jsr $96d9			jsr 	StackClose		 			; erase the frame
.8b2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9d74					CheckRightBracket:
.9d74	b1 30		lda ($30),y			lda 	(codePtr),y
.9d76	c8		iny				iny
.9d77	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9d79	d0 0f		bne $9d8a			bne 	CNAFail
.9d7b	60		rts				rts
.9d7c					CheckComma:
.9d7c	b1 30		lda ($30),y			lda 	(codePtr),y
.9d7e	c8		iny				iny
.9d7f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9d81	d0 07		bne $9d8a			bne 	CNAFail
.9d83	60		rts				rts
.9d84					CheckNextA:
.9d84	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9d86	d0 02		bne $9d8a			bne 	CNAFail
.9d88	c8		iny				iny 								; skip character
.9d89	60		rts				rts 								; and exit
.9d8a					CNAFail:
.9d8a	4c 56 a3	jmp $a356			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8b30					ErrorHandler:
.8b30	a8		tay				tay 								; find the error text
.8b31	f0 49		beq $8b7c			beq 	_EHEnd
.8b33	a2 00		ldx #$00			ldx 	#0
.8b35	a9 6f		lda #$6f			lda 	#((ErrorText) & $FF)
.8b37	85 36		sta $36				sta 	0+zTemp0
.8b39	a9 a3		lda #$a3			lda 	#((ErrorText) >> 8)
.8b3b	85 37		sta $37				sta 	1+zTemp0
.8b3d					_EHFind:
.8b3d	88		dey				dey 								; found the error text ?
.8b3e	f0 0e		beq $8b4e			beq 	_EHFound
.8b40					_EHFindZero:
.8b40	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8b42	e6 36		inc $36				inc 	zTemp0
.8b44	d0 02		bne $8b48			bne 	_EHFNoCarry
.8b46	e6 37		inc $37				inc 	zTemp0+1
.8b48					_EHFNoCarry:
.8b48	c9 00		cmp #$00			cmp 	#0
.8b4a	d0 f4		bne $8b40			bne 	_EHFindZero
.8b4c	80 ef		bra $8b3d			bra 	_EHFind
.8b4e					_EHFound:
.8b4e	a5 36		lda $36				lda 	zTemp0 						; print message
.8b50	a6 37		ldx $37				ldx 	zTemp0+1
.8b52	20 89 8b	jsr $8b89			jsr 	PrintStringXA
.8b55	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8b57	b1 30		lda ($30),y			lda 	(codePtr),y
.8b59	d0 05		bne $8b60			bne 	_EHAtMsg
.8b5b	c8		iny				iny
.8b5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b5e	f0 17		beq $8b77			beq 	_EHCREnd
.8b60					_EHAtMsg:
.8b60	a2 8b		ldx #$8b			ldx 	#_AtMsg >> 8 				; print " at "
.8b62	a9 7f		lda #$7f			lda 	#_AtMsg & $FF
.8b64	20 89 8b	jsr $8b89			jsr 	PrintStringXA
.8b67	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8b69	b1 30		lda ($30),y			lda 	(codePtr),y
.8b6b	48		pha				pha
.8b6c	c8		iny				iny
.8b6d	b1 30		lda ($30),y			lda 	(codePtr),y
.8b6f	aa		tax				tax
.8b70	68		pla				pla
.8b71	20 d0 9e	jsr $9ed0			jsr 	ConvertInt16 				; convert XA to string
.8b74	20 89 8b	jsr $8b89			jsr 	PrintStringXA 				; and print it.
.8b77					_EHCREnd:
.8b77	a9 0d		lda #$0d			lda 	#13 						; new line
.8b79	20 a3 a5	jsr $a5a3			jsr 	EXTPrintCharacter
.8b7c					_EHEnd:
.8b7c	4c 0c 80	jmp $800c			jmp 	WarmStart
>8b7f	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8b87	20 00
.8b89					PrintStringXA:
.8b89	5a		phy				phy
.8b8a	86 37		stx $37				stx 	zTemp0+1
.8b8c	85 36		sta $36				sta 	zTemp0
.8b8e	a0 00		ldy #$00			ldy 	#0
.8b90					_PSXALoop:
.8b90	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b92	f0 06		beq $8b9a			beq 	_PSXAExit
.8b94	20 a3 a5	jsr $a5a3			jsr 	EXTPrintCharacter
.8b97	c8		iny				iny
.8b98	80 f6		bra $8b90			bra 	_PSXALoop
.8b9a					_PSXAExit:
.8b9a	7a		ply				ply
.8b9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8b9c					UnaryTrue:
.8b9c	fa		plx				plx
.8b9d					ReturnTrue:
.8b9d	a9 01		lda #$01			lda 	#1  						; set to 1
.8b9f	20 85 96	jsr $9685			jsr 	NSMSetByte
.8ba2	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8ba4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ba7	60		rts				rts
.8ba8					UnaryFalse:
.8ba8	fa		plx				plx
.8ba9					ReturnFalse:
.8ba9	4c 83 96	jmp $9683			jmp 	NSMSetZero 					; set it all to zero
.8bac					BinaryCompareEqual:
.8bac	fa		plx				plx
.8bad	20 e8 8b	jsr $8be8			jsr 	CompareBaseCode
.8bb0	c9 00		cmp #$00			cmp 	#0
.8bb2	f0 e9		beq $8b9d			beq 	ReturnTrue
.8bb4	80 f3		bra $8ba9			bra 	ReturnFalse
.8bb6					BinaryCompareLess:
.8bb6	fa		plx				plx
.8bb7	20 e8 8b	jsr $8be8			jsr 	CompareBaseCode
.8bba	c9 ff		cmp #$ff			cmp 	#$FF
.8bbc	f0 df		beq $8b9d			beq 	ReturnTrue
.8bbe	80 e9		bra $8ba9			bra 	ReturnFalse
.8bc0					BinaryCompareGreater:
.8bc0	fa		plx				plx
.8bc1	20 e8 8b	jsr $8be8			jsr 	CompareBaseCode
.8bc4	c9 01		cmp #$01			cmp 	#1
.8bc6	f0 d5		beq $8b9d			beq 	ReturnTrue
.8bc8	80 df		bra $8ba9			bra 	ReturnFalse
.8bca					BinaryCompareNotEqual:
.8bca	fa		plx				plx
.8bcb	20 e8 8b	jsr $8be8			jsr 	CompareBaseCode
.8bce	c9 00		cmp #$00			cmp 	#0
.8bd0	d0 cb		bne $8b9d			bne 	ReturnTrue
.8bd2	80 d5		bra $8ba9			bra 	ReturnFalse
.8bd4					BinaryCompareLessEqual:
.8bd4	fa		plx				plx
.8bd5	20 e8 8b	jsr $8be8			jsr 	CompareBaseCode
.8bd8	c9 01		cmp #$01			cmp 	#1
.8bda	d0 c1		bne $8b9d			bne 	ReturnTrue
.8bdc	80 cb		bra $8ba9			bra 	ReturnFalse
.8bde					BinaryCompareGreaterEqual:
.8bde	fa		plx				plx
.8bdf	20 e8 8b	jsr $8be8			jsr 	CompareBaseCode
.8be2	c9 ff		cmp #$ff			cmp 	#$FF
.8be4	d0 b7		bne $8b9d			bne 	ReturnTrue
.8be6	80 c1		bra $8ba9			bra 	ReturnFalse
.8be8					CompareBaseCode:
.8be8	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; make both values if references.
.8beb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8bee	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8bf1	29 10		and #$10			and 	#NSTString
.8bf3	d0 40		bne $8c35			bne 	_CBCString
.8bf5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8bf8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8bfb	d0 3b		bne $8c38			bne 	_CBCFloat
.8bfd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c00	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c03	29 08		and #$08			and 	#NSTFloat
.8c05	d0 31		bne $8c38			bne 	_CBCFloat
.8c07	20 3b 8c	jsr $8c3b			jsr 	CompareFixMinusZero
.8c0a	e8		inx				inx
.8c0b	20 3b 8c	jsr $8c3b			jsr 	CompareFixMinusZero
.8c0e	ca		dex				dex
.8c0f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8c12	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8c15	10 0b		bpl $8c22			bpl 	_CDCSameSign
.8c17	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8c1a	30 16		bmi $8c32			bmi 	_CBCLess 					; return $FF
.8c1c					_CBCGreater:
.8c1c	a9 01		lda #$01			lda 	#1
.8c1e	60		rts				rts
.8c1f					_CBCEqual:
.8c1f	a9 00		lda #$00			lda 	#0
.8c21	60		rts				rts
.8c22					_CDCSameSign:
.8c22	20 4b 8d	jsr $8d4b			jsr 	SubTopTwoStack 				; unsigned subtract
.8c25	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; or the mantissa together
.8c28	f0 f5		beq $8c1f			beq 	_CBCEqual 					; -0 == 0
.8c2a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8c2d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8c30	10 ea		bpl $8c1c			bpl 	_CBCGreater
.8c32					_CBCLess:
.8c32	a9 ff		lda #$ff			lda 	#$FF
.8c34	60		rts				rts
.8c35					_CBCString:
.8c35	4c a1 8c	jmp $8ca1			jmp 	CompareStrings
.8c38					_CBCFloat:
.8c38	4c cc 9f	jmp $9fcc			jmp 	CompareFloat
.8c3b					CompareFixMinusZero:
.8c3b	20 b3 96	jsr $96b3			jsr 	NSMIsZero
.8c3e	d0 03		bne $8c43			bne 	_CFXMZNotZero
.8c40	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8c43					_CFXMZNotZero:
.8c43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8c44					StringConcat:
.8c44	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8c47	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8c4a	29 18		and #$18			and 	#NSBTypeMask
.8c4c	c9 10		cmp #$10			cmp 	#NSTString
.8c4e	d0 4e		bne $8c9e			bne		_SCType
.8c50	64 38		stz $38				stz 	zTemp1 						; counting total length
.8c52	e8		inx				inx
.8c53	20 71 8c	jsr $8c71			jsr 	_SCSetupZ0 					; setup for second
.8c56	20 7c 8c	jsr $8c7c			jsr 	_SCLengthZ0 				; length for second
.8c59	ca		dex				dex
.8c5a	20 71 8c	jsr $8c71			jsr 	_SCSetupZ0 					; setup for first
.8c5d	20 7c 8c	jsr $8c7c			jsr 	_SCLengthZ0 				; length for first
.8c60	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8c62	20 50 a5	jsr $a550			jsr 	StringTempAllocate
.8c65	20 8f 8c	jsr $8c8f			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8c68	e8		inx				inx
.8c69	20 71 8c	jsr $8c71			jsr 	_SCSetupZ0 					; copy second out
.8c6c	20 8f 8c	jsr $8c8f			jsr 	_SCCopy
.8c6f	ca		dex				dex
.8c70	60		rts				rts
.8c71					_SCSetupZ0:
.8c71	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c74	85 36		sta $36				sta 	zTemp0
.8c76	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c79	85 37		sta $37				sta 	zTemp0+1
.8c7b	60		rts				rts
.8c7c					_SCLengthZ0:
.8c7c	5a		phy				phy
.8c7d	a0 00		ldy #$00			ldy 	#0
.8c7f					_SCLenLoop:
.8c7f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c81	f0 0a		beq $8c8d			beq 	_SCLExit
.8c83	c8		iny				iny
.8c84	e6 38		inc $38				inc 	zTemp1
.8c86	10 f7		bpl $8c7f			bpl		_SCLenLoop
.8c88	a9 09		lda #$09		lda	#9
.8c8a	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.8c8d					_SCLExit:
.8c8d	7a		ply				ply
.8c8e	60		rts				rts
.8c8f					_SCCopy:
.8c8f	5a		phy				phy
.8c90	a0 00		ldy #$00			ldy 	#0
.8c92					_SCCopyLoop:
.8c92	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c94	f0 06		beq $8c9c			beq 	_SCCExit
.8c96	20 8e a5	jsr $a58e			jsr 	StringTempWrite
.8c99	c8		iny				iny
.8c9a	80 f6		bra $8c92			bra 	_SCCopyLoop
.8c9c					_SCCExit:
.8c9c	7a		ply				ply
.8c9d	60		rts				rts
.8c9e					_SCType:
.8c9e	4c 60 a3	jmp $a360			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9d8d					IntegerDivide:
.9d8d	fa		plx				plx
.9d8e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9d91	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9d94	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d95	0a		asl a				asl 	a
.9d96	10 05		bpl $9d9d			bpl 	_NotRef
.9d98	48		pha				pha
.9d99	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d9c	68		pla				pla
.9d9d					_NotRef:
.9d9d	0a		asl a				asl 	a
.9d9e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9da0	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9da3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9da6	f0 03		beq $9dab			beq 	_IntegerCode 				; if clear, then we have two integers
.9da8	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.9dab					_IntegerCode:
.9dab	20 cd 9d	jsr $9dcd			jsr 	CheckDivideZero 			; do div zero check
.9dae	20 05 9e	jsr $9e05			jsr 	Int32Divide 				; do the division
.9db1	20 c2 9e	jsr $9ec2			jsr 	CalculateSign 				; calculate result sign
.9db4					NSMCopyPlusTwoToZero:
.9db4	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9db7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9dba	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9dbd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9dc0	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9dc3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9dc6	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9dc9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9dcc	60		rts				rts
.9dcd					CheckDivideZero:
.9dcd	e8		inx				inx
.9dce	20 b3 96	jsr $96b3			jsr 	NSMIsZero
.9dd1	f0 02		beq $9dd5			beq 	_CDVError
.9dd3	ca		dex				dex
.9dd4	60		rts				rts
.9dd5					_CDVError:
.9dd5	a9 03		lda #$03		lda	#3
.9dd7	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.9dda					IntegerModulus:
.9dda	fa		plx				plx
.9ddb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9dde	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9de1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9de2	0a		asl a				asl 	a
.9de3	10 05		bpl $9dea			bpl 	_NotRef
.9de5	48		pha				pha
.9de6	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9de9	68		pla				pla
.9dea					_NotRef:
.9dea	0a		asl a				asl 	a
.9deb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ded	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9df0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9df3	f0 03		beq $9df8			beq 	_IntegerCode 				; if clear, then we have two integers
.9df5	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.9df8					_IntegerCode:
.9df8	20 cd 9d	jsr $9dcd			jsr 	CheckDivideZero 			; do div zero check
.9dfb	20 05 9e	jsr $9e05			jsr 	Int32Divide 				; do the division
.9dfe	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9e01	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9e04	60		rts				rts
.9e05					Int32Divide:
.9e05	48		pha				pha 								; save AXY
.9e06	5a		phy				phy
.9e07	20 5a 96	jsr $965a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9e0a	20 7f 96	jsr $967f			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9e0d	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9e0f					_I32DivideLoop:
.9e0f	e8		inx				inx
.9e10	e8		inx				inx
.9e11	20 98 96	jsr $9698			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9e14	ca		dex				dex
.9e15	ca		dex				dex
.9e16	20 99 96	jsr $9699			jsr 	NSMRotateLeft
.9e19	20 45 9e	jsr $9e45			jsr 	DivideCheckSubtract 		; check if subtract possible
.9e1c	90 03		bcc $9e21			bcc 	_I32DivideNoCarryIn
.9e1e	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9e21					_I32DivideNoCarryIn:
.9e21	88		dey				dey 								; loop round till division completed.
.9e22	d0 eb		bne $9e0f			bne 	_I32DivideLoop
.9e24	7a		ply				ply 								; restore AXY and exit
.9e25	68		pla				pla
.9e26	60		rts				rts
.9e27					Int32ShiftDivide:
.9e27	48		pha				pha 								; save AY
.9e28	5a		phy				phy
.9e29	e8		inx				inx 								; clear S[X+2]
.9e2a	e8		inx				inx
.9e2b	20 83 96	jsr $9683			jsr 	NSMSetZero
.9e2e	ca		dex				dex
.9e2f	ca		dex				dex
.9e30	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9e32					_I32SDLoop:
.9e32	20 45 9e	jsr $9e45			jsr 	DivideCheckSubtract 		; check if subtract possible
.9e35	e8		inx				inx
.9e36	e8		inx				inx
.9e37	20 99 96	jsr $9699			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9e3a	ca		dex				dex
.9e3b	ca		dex				dex
.9e3c	20 99 96	jsr $9699			jsr 	NSMRotateLeft
.9e3f	88		dey				dey 	 							; do 31 times
.9e40	d0 f0		bne $9e32			bne 	_I32SDLoop
.9e42	7a		ply				ply 								; restore AY and exit
.9e43	68		pla				pla
.9e44	60		rts				rts
.9e45					DivideCheckSubtract:
.9e45	20 4b 8d	jsr $8d4b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9e48	b0 04		bcs $9e4e			bcs 	_DCSExit 					; if carry set, then could do, exit
.9e4a	20 25 8d	jsr $8d25			jsr 	AddTopTwoStack 				; add it back in
.9e4d	18		clc				clc 								; and return False
.9e4e					_DCSExit:
.9e4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9e4f					MulInteger:
.9e4f	fa		plx				plx
.9e50	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e53	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e56	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e57	0a		asl a				asl 	a
.9e58	10 05		bpl $9e5f			bpl 	_NotRef
.9e5a	48		pha				pha
.9e5b	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e5e	68		pla				pla
.9e5f					_NotRef:
.9e5f	0a		asl a				asl 	a 							; put MSB of type into A:7
.9e60	30 0b		bmi $9e6d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9e62	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e65	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9e68	f0 06		beq $9e70			beq 	_IntegerCode 				; if clear, then we have two integers
.9e6a	4c a3 a0	jmp $a0a3			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9e6d					_StringData:
.9e6d	4c 6a a3	jmp $a36a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9e70					_IntegerCode:
.9e70	20 7d 9e	jsr $9e7d			jsr 	MultiplyShort
.9e73	c9 00		cmp #$00			cmp 	#0
.9e75	f0 05		beq $9e7c			beq 	_MIExit
.9e77	a9 04		lda #$04		lda	#4
.9e79	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.9e7c					_MIExit:
.9e7c	60		rts				rts
.9e7d					MultiplyShort:
.9e7d	5a		phy				phy 								; save Y
.9e7e	20 5a 96	jsr $965a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9e81	20 7f 96	jsr $967f			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9e84	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9e86					_I32MLoop:
.9e86	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9e89	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9e8c	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9e8f	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9e92	f0 28		beq $9ebc			beq 	_I32MExit 					; exit if zero
.9e94	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9e97	29 01		and #$01			and 	#1
.9e99	f0 0e		beq $9ea9			beq 	_I32MNoAdd
.9e9b	20 25 8d	jsr $8d25			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9e9e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9ea1	10 06		bpl $9ea9			bpl 	_I32MNoAdd
.9ea3					_I32ShiftRight:
.9ea3	20 a6 96	jsr $96a6			jsr 	NSMShiftRight 				; shift S[X] right
.9ea6	c8		iny				iny 								; increment shift count
.9ea7	80 0a		bra $9eb3			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9ea9					_I32MNoAdd:
.9ea9	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9eac	70 f5		bvs $9ea3			bvs 	_I32ShiftRight 				; instead.
.9eae	e8		inx				inx
.9eaf	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9eb2	ca		dex				dex
.9eb3					_I32MShiftUpper:
.9eb3	e8		inx				inx 								; shift S[X+2] right
.9eb4	e8		inx				inx
.9eb5	20 a6 96	jsr $96a6			jsr 	NSMShiftRight
.9eb8	ca		dex				dex
.9eb9	ca		dex				dex
.9eba	80 ca		bra $9e86			bra 	_I32MLoop 					; try again.
.9ebc					_I32MExit:
.9ebc	20 c2 9e	jsr $9ec2			jsr 	CalculateSign
.9ebf	98		tya				tya 								; shift in A
.9ec0	7a		ply				ply 								; restore Y and exit
.9ec1	60		rts				rts
.9ec2					CalculateSign:
.9ec2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9ec5	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9ec8	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9ecb	0a		asl a				asl 	a 							; shift bit 7 into carry
.9ecc	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9ecf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8ca1					CompareStrings:
.8ca1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8ca4	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8ca7	29 10		and #$10			and 	#NSBIsString
.8ca9	f0 2c		beq $8cd7			beq 	_CSTypeError
.8cab	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8cae	85 36		sta $36				sta 	zTemp0
.8cb0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cb3	85 37		sta $37				sta 	zTemp0+1
.8cb5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8cb8	85 38		sta $38				sta 	zTemp1
.8cba	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8cbd	85 39		sta $39				sta 	zTemp1+1
.8cbf	5a		phy				phy 								; save Y so we can access strings
.8cc0	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8cc2					_CSLoop:
.8cc2	c8		iny				iny
.8cc3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8cc5	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8cc7	d0 06		bne $8ccf			bne 	_CSDifferent
.8cc9	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8ccb	d0 f5		bne $8cc2			bne 	_CSLoop 					; still comparing
.8ccd					_CSExit:
.8ccd	7a		ply				ply 								; reached end, return zero in A from EOS
.8cce	60		rts				rts
.8ccf					_CSDifferent:
.8ccf	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8cd1	90 fa		bcc $8ccd			bcc		_CSExit
.8cd3	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8cd5	80 f6		bra $8ccd			bra 	_CSExit
.8cd7					_CSTypeError:
.8cd7	4c 60 a3	jmp $a360			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8cda					ShiftLeft:
.8cda	38		sec				sec
.8cdb	80 01		bra $8cde			bra 	ShiftMain
.8cdd					ShiftRight:
.8cdd	18		clc				clc
.8cde					ShiftMain:
.8cde	fa		plx				plx 								; restore X
.8cdf	08		php				php 								; save direction
.8ce0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ce3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ce6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ce7	0a		asl a				asl 	a
.8ce8	10 05		bpl $8cef			bpl 	_NotRef
.8cea	48		pha				pha
.8ceb	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8cee	68		pla				pla
.8cef					_NotRef:
.8cef	0a		asl a				asl 	a
.8cf0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8cf2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8cf5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cf8	f0 03		beq $8cfd			beq 	_IntegerCode 				; if clear, then we have two integers
.8cfa	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.8cfd					_IntegerCode:
.8cfd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8d00	29 e0		and #$e0			and 	#$E0
.8d02	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8d05	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8d08	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8d0b	d0 13		bne $8d20			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8d0d					_SMLoop:
.8d0d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8d10	30 11		bmi $8d23			bmi 	_SMExit 					; exit if done.
.8d12	28		plp				plp 								; restore direcition setting
.8d13	08		php				php
.8d14	90 05		bcc $8d1b			bcc 	_SMRight
.8d16	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; shift left if CS
.8d19	80 f2		bra $8d0d			bra 	_SMLoop
.8d1b					_SMRight:
.8d1b	20 a6 96	jsr $96a6			jsr 	NSMShiftRight 				; shift right if CC
.8d1e	80 ed		bra $8d0d			bra 	_SMLoop
.8d20					_SMExit0:
.8d20	20 83 96	jsr $9683			jsr 	NSMSetZero 					; return zero.
.8d23					_SMExit:
.8d23	28		plp				plp 								; throw direction
.8d24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8d25					AddTopTwoStack:
.8d25	18		clc				clc
.8d26	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8d29	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8d2c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d2f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8d32	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8d35	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d38	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8d3b	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8d3e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d41	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8d44	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8d47	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d4a	60		rts				rts
.8d4b					SubTopTwoStack:
.8d4b	38		sec				sec
.8d4c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8d4f	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8d52	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d55	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8d58	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8d5b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d5e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8d61	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8d64	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d67	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8d6a	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8d6d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d70	60		rts				rts
.8d71					AddInteger:
.8d71	fa		plx				plx
.8d72	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d75	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d78	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d79	0a		asl a				asl 	a
.8d7a	10 05		bpl $8d81			bpl 	_NotRef
.8d7c	48		pha				pha
.8d7d	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d80	68		pla				pla
.8d81					_NotRef:
.8d81	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d82	30 0b		bmi $8d8f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8d84	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d87	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d8a	f0 06		beq $8d92			beq 	_IntegerCode 				; if clear, then we have two integers
.8d8c	4c 2b 9f	jmp $9f2b			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8d8f					_StringData:
.8d8f	4c 44 8c	jmp $8c44			jmp 	StringConcat							; at least one string - don't know both are strings.
.8d92					_IntegerCode:
.8d92					AddCode:
.8d92	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8d95	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d98	10 8b		bpl $8d25			bpl 	AddTopTwoStack
.8d9a	20 4b 8d	jsr $8d4b			jsr 	SubTopTwoStack 				; do a physical subtraction
.8d9d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8da0	10 09		bpl $8dab			bpl 	_AddExit
.8da2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8da5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8da8	20 38 96	jsr $9638			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8dab					_AddExit:
.8dab	60		rts				rts
.8dac					SubInteger:
.8dac	fa		plx				plx
.8dad	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8db0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8db3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8db4	0a		asl a				asl 	a
.8db5	10 05		bpl $8dbc			bpl 	_NotRef
.8db7	48		pha				pha
.8db8	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8dbb	68		pla				pla
.8dbc					_NotRef:
.8dbc	0a		asl a				asl 	a 							; put MSB of type into A:7
.8dbd	30 0b		bmi $8dca			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8dbf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8dc2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dc5	f0 06		beq $8dcd			beq 	_IntegerCode 				; if clear, then we have two integers
.8dc7	4c 30 9f	jmp $9f30			jmp 	FloatingPointSub 							; otherwise at least one float.
.8dca					_StringData:
.8dca	4c 6a a3	jmp $a36a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8dcd					_IntegerCode:
.8dcd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8dd0	49 80		eor #$80			eor 	#$80
.8dd2	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8dd5	80 bb		bra $8d92			bra 	AddCode 					; and do the same code as add.
.8dd7					AndInteger:
.8dd7	fa		plx				plx
.8dd8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ddb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dde	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ddf	0a		asl a				asl 	a
.8de0	10 05		bpl $8de7			bpl 	_NotRef
.8de2	48		pha				pha
.8de3	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8de6	68		pla				pla
.8de7					_NotRef:
.8de7	0a		asl a				asl 	a
.8de8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8dea	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ded	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8df0	f0 03		beq $8df5			beq 	_IntegerCode 				; if clear, then we have two integers
.8df2	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.8df5					_IntegerCode:
.8df5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8df8	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8dfb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dfe	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e01	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8e04	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e07	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e0a	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8e0d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e10	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e13	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8e16	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e19	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8e1c	60		rts				rts
.8e1d					OraInteger:
.8e1d	fa		plx				plx
.8e1e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e21	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e24	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e25	0a		asl a				asl 	a
.8e26	10 05		bpl $8e2d			bpl 	_NotRef
.8e28	48		pha				pha
.8e29	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e2c	68		pla				pla
.8e2d					_NotRef:
.8e2d	0a		asl a				asl 	a
.8e2e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e30	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e33	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e36	f0 03		beq $8e3b			beq 	_IntegerCode 				; if clear, then we have two integers
.8e38	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.8e3b					_IntegerCode:
.8e3b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e3e	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8e41	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e44	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e47	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8e4a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e4d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e50	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8e53	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e56	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e59	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8e5c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e5f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8e62	60		rts				rts
.8e63					EorInteger:
.8e63	fa		plx				plx
.8e64	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e67	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e6a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e6b	0a		asl a				asl 	a
.8e6c	10 05		bpl $8e73			bpl 	_NotRef
.8e6e	48		pha				pha
.8e6f	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e72	68		pla				pla
.8e73					_NotRef:
.8e73	0a		asl a				asl 	a
.8e74	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e76	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e79	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e7c	f0 03		beq $8e81			beq 	_IntegerCode 				; if clear, then we have two integers
.8e7e	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.8e81					_IntegerCode:
.8e81	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e84	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8e87	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e8a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e8d	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8e90	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e93	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e96	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8e99	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e9c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e9f	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8ea2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ea5	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8ea8	60		rts				rts
.8ea9					WordIndirect:
.8ea9	fa		plx				plx
.8eaa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ead	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eb0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb1	0a		asl a				asl 	a
.8eb2	10 05		bpl $8eb9			bpl 	_NotRef
.8eb4	48		pha				pha
.8eb5	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb8	68		pla				pla
.8eb9					_NotRef:
.8eb9	0a		asl a				asl 	a
.8eba	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebc	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ebf	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ec2	f0 03		beq $8ec7			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec4	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.8ec7					_IntegerCode:
.8ec7	20 92 8d	jsr $8d92			jsr 	AddCode 					; add the two values
.8eca	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8ecc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ecf	60		rts				rts
.8ed0					ByteIndirect:
.8ed0	fa		plx				plx
.8ed1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ed4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ed7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ed8	0a		asl a				asl 	a
.8ed9	10 05		bpl $8ee0			bpl 	_NotRef
.8edb	48		pha				pha
.8edc	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8edf	68		pla				pla
.8ee0					_NotRef:
.8ee0	0a		asl a				asl 	a
.8ee1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ee3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ee6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ee9	f0 03		beq $8eee			beq 	_IntegerCode 				; if clear, then we have two integers
.8eeb	4c 60 a3	jmp $a360			jmp 	TypeError 					; anything else, type mismatch.
.8eee					_IntegerCode:
.8eee	20 92 8d	jsr $8d92			jsr 	AddCode 					; add the two values
.8ef1	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8ef3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ef6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9ed0					ConvertInt16:
.9ed0	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9ed3	8e 10 06	stx $0610			stx 	NSMantissa1
.9ed6	9c 18 06	stz $0618			stz 	NSMantissa2
.9ed9	9c 20 06	stz $0620			stz 	NSMantissa3
.9edc	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9edf	a2 00		ldx #$00			ldx 	#0 							; stack level
.9ee1	a9 0a		lda #$0a			lda 	#10 						; base
.9ee3	80 00		bra $9ee5			bra 	ConvertInt32
.9ee5					ConvertInt32:
.9ee5	5a		phy				phy
.9ee6	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9ee8	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9eeb	10 08		bpl $9ef5			bpl 	_CI32NotNeg
.9eed	48		pha				pha
.9eee	a9 2d		lda #$2d			lda 	#'-'
.9ef0	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9ef3	c8		iny				iny
.9ef4	68		pla				pla
.9ef5					_CI32NotNeg:
.9ef5	20 03 9f	jsr $9f03			jsr 	_CI32DivideConvert 			; recursive conversion
.9ef8	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9efa	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9efd	7a		ply				ply
.9efe	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9f00	a9 75		lda #$75			lda 	#NumberBuffer & $FF
.9f02	60		rts				rts
.9f03					_CI32DivideConvert:
.9f03	e8		inx				inx 								; write to next slot up
.9f04	20 85 96	jsr $9685			jsr 	NSMSetByte
.9f07	ca		dex				dex
.9f08	20 05 9e	jsr $9e05			jsr 	Int32Divide 				; divide
.9f0b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9f0e	48		pha				pha
.9f0f	20 b4 9d	jsr $9db4			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9f12	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; is it zero ?
.9f15	f0 06		beq $9f1d			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9f17	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9f1a	20 03 9f	jsr $9f03			jsr 	_CI32DivideConvert 			; and recusrively call.
.9f1d					_CI32NoRecurse:
.9f1d	68		pla				pla 								; remainder
.9f1e	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9f20	90 02		bcc $9f24			bcc 	_CI32NotHex
.9f22	69 26		adc #$26			adc 	#6+32
.9f24					_CI32NotHex:
.9f24	69 30		adc #$30			adc 	#48
.9f26	99 75 08	sta $0875,y			sta 	NumberBuffer,y 				; write out and exit
.9f29	c8		iny				iny
.9f2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8ef7					PrecedenceLevel:
>8ef7	04					.byte	 4	; $00 <<
>8ef8	02					.byte	 2	; $01 <=
>8ef9	02					.byte	 2	; $02 <>
>8efa	00					.byte	 0	; $03 !!3
>8efb	00					.byte	 0	; $04 ><
>8efc	02					.byte	 2	; $05 >=
>8efd	04					.byte	 4	; $06 >>
>8efe	00					.byte	 0	; $07 !!7
>8eff	00					.byte	 0	; $08 !!8
>8f00	00					.byte	 0	; $09 !!9
>8f01	00					.byte	 0	; $0a !!10
>8f02	00					.byte	 0	; $0b !!11
>8f03	00					.byte	 0	; $0c !!12
>8f04	00					.byte	 0	; $0d !!13
>8f05	00					.byte	 0	; $0e !!14
>8f06	00					.byte	 0	; $0f !!15
>8f07	00					.byte	 0	; $10 @
>8f08	00					.byte	 0	; $11 !!17
>8f09	00					.byte	 0	; $12 !!18
>8f0a	00					.byte	 0	; $13 [
>8f0b	04					.byte	 4	; $14 \
>8f0c	00					.byte	 0	; $15 ]
>8f0d	01					.byte	 1	; $16 ^
>8f0e	00					.byte	 0	; $17 _
>8f0f	00					.byte	 0	; $18 `
>8f10	00					.byte	 0	; $19 !!25
>8f11	00					.byte	 0	; $1a !!26
>8f12	00					.byte	 0	; $1b {
>8f13	01					.byte	 1	; $1c |
>8f14	00					.byte	 0	; $1d }
>8f15	00					.byte	 0	; $1e ~
>8f16	00					.byte	 0	; $1f [7m<7F>[m
>8f17	00					.byte	 0	; $20
>8f18	05					.byte	 5	; $21 !
>8f19	00					.byte	 0	; $22 "
>8f1a	00					.byte	 0	; $23 #
>8f1b	05					.byte	 5	; $24 $
>8f1c	04					.byte	 4	; $25 %
>8f1d	01					.byte	 1	; $26 &
>8f1e	00					.byte	 0	; $27 '
>8f1f	00					.byte	 0	; $28 (
>8f20	00					.byte	 0	; $29 )
>8f21	04					.byte	 4	; $2a *
>8f22	03					.byte	 3	; $2b +
>8f23	00					.byte	 0	; $2c ,
>8f24	03					.byte	 3	; $2d -
>8f25	00					.byte	 0	; $2e .
>8f26	04					.byte	 4	; $2f /
>8f27	00					.byte	 0	; $30 0
>8f28	00					.byte	 0	; $31 1
>8f29	00					.byte	 0	; $32 2
>8f2a	00					.byte	 0	; $33 3
>8f2b	00					.byte	 0	; $34 4
>8f2c	00					.byte	 0	; $35 5
>8f2d	00					.byte	 0	; $36 6
>8f2e	00					.byte	 0	; $37 7
>8f2f	00					.byte	 0	; $38 8
>8f30	00					.byte	 0	; $39 9
>8f31	00					.byte	 0	; $3a :
>8f32	00					.byte	 0	; $3b ;
>8f33	02					.byte	 2	; $3c <
>8f34	02					.byte	 2	; $3d =
>8f35	02					.byte	 2	; $3e >
>8f36	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8f37					EvaluateExpressionAt0:
.8f37	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8f39					EvaluateExpression:
.8f39	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8f3b					EvaluateExpressionAtPrecedence:
.8f3b	48		pha				pha 								; save precedence level
.8f3c	20 0a 92	jsr $920a			jsr 	EvaluateTerm 				; evaluate term into level X.
.8f3f	68		pla				pla 								; restore precedence level.
.8f40					_EXPRLoop:
.8f40	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8f42	b1 30		lda ($30),y			lda 	(codePtr),y
.8f44	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8f46	b0 25		bcs $8f6d			bcs 	_EXPRExit
.8f48	da		phx				phx 								; read the operator precedence
.8f49	aa		tax				tax
.8f4a	bd f7 8e	lda $8ef7,x			lda 	PrecedenceLevel,x
.8f4d	fa		plx				plx
.8f4e	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8f50	f0 1b		beq $8f6d			beq 	_EXPRExit
.8f52	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8f54	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8f56	c5 37		cmp $37				cmp 	zTemp0+1
.8f58	b0 13		bcs $8f6d			bcs		_EXPRExit 					; if current >= operator exit
.8f5a	48		pha				pha 								; save current precedence.
.8f5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f5d	c8		iny				iny
.8f5e	48		pha				pha
.8f5f	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8f61	e8		inx				inx 								; work out the right hand side.
.8f62	20 3b 8f	jsr $8f3b			jsr 	EvaluateExpressionAtPrecedence
.8f65	ca		dex				dex
.8f66	68		pla				pla 								; get operator, call the code.
.8f67	20 70 8f	jsr $8f70			jsr 	_EXPRCaller
.8f6a	68		pla				pla 								; restore precedence level
.8f6b	80 d3		bra $8f40			bra 	_EXPRLoop 					; and go round.
.8f6d					_EXPRExit:
.8f6d	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8f6f	60		rts				rts
.8f70					_EXPRCaller:
.8f70	da		phx				phx 								; save on stack, first thing is to restore it
.8f71	0a		asl a				asl 	a 							; double so can use vectors into X
.8f72	aa		tax				tax
.8f73	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9f2b					FloatingPointAdd:
.9f2b	20 cc a0	jsr $a0cc			jsr 	FloatPrepare 				; prepare for floats
.9f2e	80 0b		bra $9f3b			bra 	FloatAdd
.9f30					FloatingPointSub:
.9f30	20 cc a0	jsr $a0cc			jsr 	FloatPrepare 				; prepare for floats
.9f33					FloatSubtract:
.9f33	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9f36	49 80		eor #$80			eor 	#$80
.9f38	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9f3b					FloatAdd:
.9f3b	48		pha				pha
.9f3c	5a		phy				phy
.9f3d	20 dd a0	jsr $a0dd			jsr 	NSNormalise 				; normalise S[X]
.9f40	f0 54		beq $9f96			beq 	_FAReturn1
.9f42	e8		inx				inx 								; normalise S[X+1]
.9f43	20 dd a0	jsr $a0dd			jsr 	NSNormalise
.9f46	ca		dex				dex
.9f47	c9 00		cmp #$00			cmp 	#0
.9f49	f0 6f		beq $9fba			beq 	_FAExit 					; if so, just return A
.9f4b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9f4e	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9f51	f0 1b		beq $9f6e			beq 	_FAExponentsEqual
.9f53	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9f56	a8		tay				tay
.9f57	38		sec				sec 								; do a signed comparison of the exponents.
.9f58	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9f5b	50 02		bvc $9f5f			bvc 	_FANoSignedChange
.9f5d	49 80		eor #$80			eor 	#$80
.9f5f					_FANoSignedChange:
.9f5f	29 80		and #$80			and 	#$80
.9f61	10 03		bpl $9f66			bpl 	_FAHaveMax
.9f63	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9f66					_FAHaveMax:
.9f66	20 bd 9f	jsr $9fbd			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9f69	e8		inx				inx
.9f6a	20 bd 9f	jsr $9fbd			jsr 	_FAShiftToExponent
.9f6d	ca		dex				dex
.9f6e					_FAExponentsEqual:
.9f6e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9f71	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9f74	30 10		bmi $9f86			bmi 	_FADifferentSigns
.9f76	20 25 8d	jsr $8d25			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9f79	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9f7c	10 3c		bpl $9fba			bpl 	_FAExit 					; if no, we are done.
.9f7e	20 a6 96	jsr $96a6			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9f81	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9f84	80 34		bra $9fba			bra 	_FAExit
.9f86					_FADifferentSigns:
.9f86	20 4b 8d	jsr $8d4b			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9f89	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9f8c	10 2c		bpl $9fba			bpl 	_FAExit 					; if no, we are done.
.9f8e	20 2f 96	jsr $962f			jsr 	NSMNegate 					; netate result
.9f91	20 38 96	jsr $9638			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9f94	80 24		bra $9fba			bra 	_FAExit
.9f96					_FAReturn1:
.9f96	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9f99	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9f9c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9f9f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fa2	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9fa5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9fa8	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9fab	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9fae	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9fb1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9fb4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9fb7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9fba					_FAExit:
.9fba	7a		ply				ply
.9fbb	68		pla				pla
.9fbc	60		rts				rts
.9fbd					_FAShiftToExponent:
.9fbd					_FAShiftToExponent2:
.9fbd	98		tya				tya 								; compare Y to exponent
.9fbe	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9fc1	f0 08		beq $9fcb			beq 	_FASEExit 					; exit if so.
.9fc3	20 a6 96	jsr $96a6			jsr 	NSMShiftRight	 			; shift the mantissa right
.9fc6	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9fc9	80 f2		bra $9fbd			bra 	_FAShiftToExponent2
.9fcb					_FASEExit:
.9fcb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9fcc					CompareFloat:
.9fcc	20 33 9f	jsr $9f33			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9fcf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9fd2	29 f8		and #$f8			and 	#$F8
.9fd4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9fd7	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9fda	f0 09		beq $9fe5			beq 	_FCExit 					; zero, so approximately identical
.9fdc	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9fde	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9fe1	10 02		bpl $9fe5			bpl 	_FCExit
.9fe3					_FCNegative:
.9fe3	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9fe5					_FCExit:
.9fe5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9fe6					FDivideCommand:
.9fe6	fa		plx				plx	 								; restore stack position
.9fe7	20 cc a0	jsr $a0cc			jsr 	FloatPrepare 				; prepare for floats
.9fea					FloatDivide:
.9fea	48		pha				pha
.9feb	e8		inx				inx
.9fec	20 dd a0	jsr $a0dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9fef	ca		dex				dex
.9ff0	c9 00		cmp #$00			cmp 	#0
.9ff2	f0 20		beq $a014			beq 	_FDZero
.9ff4	20 dd a0	jsr $a0dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9ff7	f0 19		beq $a012			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9ff9	20 27 9e	jsr $9e27			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9ffc	20 b4 9d	jsr $9db4			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9fff	20 dd a0	jsr $a0dd			jsr		NSNormalise 				; renormalise
.a002	20 c2 9e	jsr $9ec2			jsr 	CalculateSign 				; calculate result sign
.a005	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a008	38		sec				sec
.a009	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a00c	38		sec				sec
.a00d	e9 1e		sbc #$1e			sbc 	#30
.a00f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a012					_FDExit:
.a012	68		pla				pla
.a013	60		rts				rts
.a014					_FDZero:
.a014	a9 03		lda #$03		lda	#3
.a016	4c 30 8b	jmp $8b30		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a019					FloatFractionalPart:
.a019	5a		phy				phy
.a01a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a01d	29 7f		and #$7f			and 	#$7F
.a01f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a022	20 dd a0	jsr $a0dd			jsr 	NSNormalise
.a025	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a028	38		sec				sec
.a029	e9 e0		sbc #$e0			sbc 	#$E0
.a02b	90 31		bcc $a05e			bcc 	_FFPExit 					; already fractional
.a02d	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a02f	b0 2a		bcs $a05b			bcs 	_FFPZero
.a031	a8		tay				tay 								; put count to do in Y
.a032	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a035	20 60 a0	jsr $a060			jsr 	_FFPPartial
.a038	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a03b	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a03e	20 60 a0	jsr $a060			jsr 	_FFPPartial
.a041	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a044	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a047	20 60 a0	jsr $a060			jsr 	_FFPPartial
.a04a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a04d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a050	20 60 a0	jsr $a060			jsr 	_FFPPartial
.a053	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a056	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; zeroed check.
.a059	d0 03		bne $a05e			bne 	_FFPExit
.a05b					_FFPZero:
.a05b	20 83 96	jsr $9683			jsr 	NSMSetZero
.a05e					_FFPExit:
.a05e	7a		ply				ply
.a05f	60		rts				rts
.a060					_FFPPartial:
.a060	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a062	f0 17		beq $a07b			beq 	_FFFPPExit
.a064	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a066	b0 0c		bcs $a074			bcs 	_FFFPPWholeByte
.a068	5a		phy				phy
.a069					_FFFPPLeft:
.a069	0a		asl a				asl 	a
.a06a	88		dey				dey
.a06b	d0 fc		bne $a069			bne 	_FFFPPLeft
.a06d	7a		ply				ply
.a06e					_FFFPPRight:
.a06e	4a		lsr a				lsr 	a
.a06f	88		dey				dey
.a070	d0 fc		bne $a06e			bne 	_FFFPPRight
.a072	80 07		bra $a07b			bra 	_FFFPPExit
.a074					_FFFPPWholeByte:
.a074	98		tya				tya 								; subtract 8 from count
.a075	38		sec				sec
.a076	e9 08		sbc #$08			sbc 	#8
.a078	a8		tay				tay
.a079	a9 00		lda #$00			lda 	#0 							; and clear all
.a07b					_FFFPPExit:
.a07b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a07c					FloatIntegerPart:
.a07c	48		pha				pha
.a07d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a080	f0 1f		beq $a0a1			beq 	_FIPExit 					; if so do nothing
.a082	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; is it zero ?
.a085	f0 17		beq $a09e			beq 	_FIPZero 					; if so return zero.
.a087	20 dd a0	jsr $a0dd			jsr 	NSNormalise 				; normalise
.a08a	f0 12		beq $a09e			beq 	_FIPZero 					; normalised to zero, exit zero
.a08c					_FIPShift:
.a08c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a08f	10 08		bpl $a099			bpl 	_FIPCheckZero
.a091	20 a6 96	jsr $96a6			jsr 	NSMShiftRight 				; shift mantissa right
.a094	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a097	80 f3		bra $a08c			bra 	_FIPShift
.a099					_FIPCheckZero:
.a099	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; avoid -0 problem
.a09c	d0 03		bne $a0a1			bne 	_FIPExit 					; set to zero if mantissa zero.
.a09e					_FIPZero:
.a09e	20 83 96	jsr $9683			jsr 	NSMSetZero
.a0a1					_FIPExit:
.a0a1	68		pla				pla
.a0a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a0a3					FloatingPointMultiply:
.a0a3	20 cc a0	jsr $a0cc			jsr 	FloatPrepare 				; prepare for floats
.a0a6					FloatMultiply:
.a0a6	48		pha				pha
.a0a7	20 dd a0	jsr $a0dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a0aa	f0 1b		beq $a0c7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a0ac	e8		inx				inx
.a0ad	20 dd a0	jsr $a0dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a0b0	ca		dex				dex
.a0b1	c9 00		cmp #$00			cmp 	#0
.a0b3	f0 0f		beq $a0c4			beq 	_FDSetZero
.a0b5	20 7d 9e	jsr $9e7d			jsr 	MultiplyShort 				; calculate the result.
.a0b8	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a0bb	18		clc				clc
.a0bc	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a0bf	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a0c2	80 03		bra $a0c7			bra 	_FDExit
.a0c4					_FDSetZero:
.a0c4	20 83 96	jsr $9683			jsr 	NSMSetZero 					; return 0
.a0c7					_FDExit:
.a0c7	20 dd a0	jsr $a0dd			jsr 	NSNormalise 				; normalise the result
.a0ca	68		pla				pla
.a0cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a0cc					FloatPrepare:
.a0cc	20 49 90	jsr $9049			jsr 	DereferenceTopTwo 			; dereference the top two values
.a0cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a0d2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a0d5	29 10		and #$10			and 	#NSBIsString
.a0d7	d0 01		bne $a0da			bne 	_FDType
.a0d9	60		rts				rts
.a0da					_FDType:
.a0da	4c 60 a3	jmp $a360			jmp 	TypeError
.a0dd					NSNormalise:
.a0dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a0e0	29 80		and #$80			and 	#$80
.a0e2	09 08		ora #$08			ora 	#NSTFloat
.a0e4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0e7	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; if zero exit
.a0ea	d0 09		bne $a0f5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a0ec	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a0ef	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a0f2	a9 00		lda #$00			lda 	#0 							; set Z flag
.a0f4	60		rts				rts
.a0f5					_NSNormaliseOptimise:
.a0f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a0f8	d0 22		bne $a11c			bne 	_NSNormaliseLoop
.a0fa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a0fd	30 1d		bmi $a11c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a0ff	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a102	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a105	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a108	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a10b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a10e	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a111	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a114	38		sec				sec
.a115	e9 08		sbc #$08			sbc 	#8
.a117	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a11a	80 d9		bra $a0f5			bra 	_NSNormaliseOptimise
.a11c					_NSNormaliseLoop:
.a11c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a11f	70 08		bvs $a129			bvs 	_NSNExit 					; exit if so with Z flag clear
.a121	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; shift mantissa left
.a124	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a127	80 f3		bra $a11c			bra 	_NSNormaliseLoop
.a129					_NSNExit:
.a129	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a12b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8f76					AssignNumber:
.8f76	5a		phy				phy
.8f77	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8f7a	85 36		sta $36				sta 	zTemp0
.8f7c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f7f	85 37		sta $37				sta 	zTemp0+1
.8f81	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8f84	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8f86	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f89	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8f8b	c9 08		cmp #$08			cmp 	#NSTFloat
.8f8d	f0 2a		beq $8fb9			beq 	_ANFloat
.8f8f	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8f92	f0 05		beq $8f99			beq		_ANNotFloat
.8f94	e8		inx				inx
.8f95	20 7c a0	jsr $a07c			jsr 	FloatIntegerPart 			; make it an integer
.8f98	ca		dex				dex
.8f99					_ANNotFloat:
.8f99	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8f9c	29 03		and #$03			and 	#3
.8f9e	d0 05		bne $8fa5			bne 	_ANByteWord
.8fa0	20 c5 8f	jsr $8fc5			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8fa3	80 1e		bra $8fc3			bra 	_ANExit
.8fa5					_ANByteWord:
.8fa5	48		pha				pha 								; save count
.8fa6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8fa9	92 36		sta ($36)			sta 	(zTemp0)
.8fab	68		pla				pla
.8fac	c9 01		cmp #$01			cmp	 	#1
.8fae	f0 13		beq $8fc3			beq 	_ANExit
.8fb0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8fb3	a0 01		ldy #$01			ldy 	#1
.8fb5	91 36		sta ($36),y			sta 	(zTemp0),y
.8fb7	80 0a		bra $8fc3			bra 	_ANExit
.8fb9					_ANFloat:
.8fb9	20 c5 8f	jsr $8fc5			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8fbc	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8fbf	a0 04		ldy #$04			ldy 	#4
.8fc1	91 36		sta ($36),y			sta 	(zTemp0),y
.8fc3					_ANExit:
.8fc3	7a		ply				ply
.8fc4	60		rts				rts
.8fc5					_ANCopy4PackSign:
.8fc5	a0 03		ldy #$03			ldy 	#3
.8fc7	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8fca	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8fcc	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8fcf	91 36		sta ($36),y			sta 	(zTemp0),y
.8fd1	88		dey				dey
.8fd2	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8fd5	91 36		sta ($36),y			sta 	(zTemp0),y
.8fd7	88		dey				dey
.8fd8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8fdb	91 36		sta ($36),y			sta 	(zTemp0),y
.8fdd	88		dey				dey
.8fde	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8fe1	91 36		sta ($36),y			sta 	(zTemp0),y
.8fe3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8fe4					AssignString:
.8fe4	5a		phy				phy
.8fe5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8fe8	85 38		sta $38				sta 	zTemp1
.8fea	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8fed	85 39		sta $39				sta 	zTemp1+1
.8fef	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ff2	85 36		sta $36				sta 	zTemp0
.8ff4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ff7	85 37		sta $37				sta 	zTemp0+1
.8ff9	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8ffb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ffd	f0 23		beq $9022			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8fff	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9000	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9002	e9 02		sbc #$02			sbc 	#2
.9004	85 3c		sta $3c				sta 	zsTemp
.9006	a0 01		ldy #$01			ldy 	#1
.9008	b1 36		lda ($36),y			lda 	(zTemp0),y
.900a	e9 00		sbc #$00			sbc 	#0
.900c	85 3d		sta $3d				sta 	zsTemp+1
.900e	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9010					_ASGetLength:
.9010	c8		iny				iny
.9011	b1 38		lda ($38),y			lda 	(zTemp1),y
.9013	d0 fb		bne $9010			bne 	_ASGetLength
.9015	98		tya				tya 								; is this length <= current length
.9016	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9018	90 20		bcc $903a			bcc 	_ASCopyString
.901a	f0 1e		beq $903a			beq 	_ASCopyString
.901c	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.901e	a0 01		ldy #$01			ldy 	#1
.9020	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9022					_ASNewStringRequired:
.9022	e8		inx				inx 								; concrete the new string.
.9023	20 d5 a4	jsr $a4d5			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9026	ca		dex				dex
.9027	18		clc				clc
.9028	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.902b	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.902d	92 36		sta ($36)			sta 	(zTemp0)
.902f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9032	69 00		adc #$00			adc 	#0
.9034	a0 01		ldy #$01			ldy 	#1
.9036	91 36		sta ($36),y			sta 	(zTemp0),y
.9038	80 0d		bra $9047			bra 	_ASExit
.903a					_ASCopyString:
.903a	a0 00		ldy #$00			ldy 	#0
.903c					_ASCopyLoop:
.903c	b1 38		lda ($38),y			lda 	(zTemp1),y
.903e	c8		iny				iny
.903f	c8		iny				iny
.9040	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9042	88		dey				dey
.9043	c9 00		cmp #$00			cmp 	#0
.9045	d0 f5		bne $903c			bne 	_ASCopyLoop
.9047					_ASExit:
.9047	7a		ply				ply
.9048	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9049					DereferenceTopTwo:
.9049	e8		inx				inx
.904a	20 4e 90	jsr $904e			jsr 	Dereference 				; deref x+1
.904d	ca		dex				dex  								; falls through to deref x
.904e					Dereference:
.904e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.9051	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9053	f0 57		beq $90ac			beq 	_DRFExit 					; not a reference
.9055	5a		phy				phy
.9056	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9059	85 36		sta $36				sta 	zTemp0
.905b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.905e	85 37		sta $37				sta 	zTemp0+1
.9060	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9063	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9065	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9068	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.906b	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.906d	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.906f	f0 0f		beq $9080			beq 	_DRFDereferenceTwo
.9071	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9073	f0 39		beq $90ae			beq 	_DRFFull
.9075	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9078	29 03		and #$03			and 	#3
.907a	f0 32		beq $90ae			beq 	_DRFFull 					; the whole word
.907c	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.907e	f0 07		beq $9087			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9080					_DRFDereferenceTwo:
.9080	a0 01		ldy #$01			ldy 	#1
.9082	b1 36		lda ($36),y			lda 	(zTemp0),y
.9084	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9087					_DRFClear23:
.9087	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.908a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.908d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.9090	29 18		and #$18			and 	#NSBTypeMask
.9092	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9095	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9097	d0 12		bne $90ab			bne 	_DRFNotString
.9099	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.909c	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.909f	d0 0a		bne $90ab			bne 	_DRFNotString
.90a1	a9 ad		lda #$ad			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.90a3	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.90a6	a9 90		lda #$90			lda 	#_DRFNullString >> 8
.90a8	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.90ab					_DRFNotString
.90ab	7a		ply				ply 								; restore Y and exit
.90ac					_DRFExit:
.90ac	60		rts				rts
.90ad					_DRFNullString:
>90ad	00						.byte 	0
.90ae					_DRFFull:
.90ae	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.90b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.90b2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90b5	c8		iny				iny
.90b6	b1 36		lda ($36),y			lda 	(zTemp0),y
.90b8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90bb	c8		iny				iny
.90bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.90be	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90c1	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.90c4	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.90c7	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.90c9	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.90cc	f0 06		beq $90d4			beq 	_DRFNoExponent
.90ce	c8		iny				iny 								; if not, read the exponent as well.
.90cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.90d1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.90d4					_DRFNoExponent:
.90d4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.90d7	10 0d		bpl $90e6			bpl 	_DRFExit2 					; if not, then exit.
.90d9	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.90db	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.90e1	09 80		ora #$80			ora 	#NSBIsNegative
.90e3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90e6					_DRFExit2:
.90e6	7a		ply				ply
.90e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.90e8					EncodeNumberStart:
.90e8	38		sec				sec
.90e9	80 01		bra $90ec			bra 	EncodeNumberContinue+1
.90eb					EncodeNumberContinue:
.90eb	18		clc				clc
.90ec					EncodeNumber:
.90ec	08		php				php 								; save reset.
.90ed	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.90ef	f0 12		beq $9103			beq 	_ENIsOkay
.90f1	c9 30		cmp #$30			cmp 	#"0"
.90f3	90 04		bcc $90f9			bcc 	_ENBadNumber
.90f5	c9 3a		cmp #$3a			cmp 	#"9"+1
.90f7	90 0a		bcc $9103			bcc 	_ENIsOkay
.90f9					_ENBadNumber:
.90f9	28		plp				plp 								; throw saved reset
.90fa	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.90fd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.90ff	f0 7e		beq $917f			beq 	_ENConstructFinal
.9101					_ENFail:
.9101	18		clc				clc 								; not allowed
.9102	60		rts				rts
.9103					_ENIsOkay:
.9103	28		plp				plp 								; are we restarting
.9104	90 15		bcc $911b			bcc 	_ENNoRestart
.9106					_ENStartEncode:
.9106	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9108	f0 0c		beq $9116			beq 	_ENFirstDP
.910a	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.910c	20 85 96	jsr $9685			jsr 	NSMSetByte
.910f	a9 01		lda #$01			lda 	#ESTA_Low
.9111					_ENExitChange:
.9111	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.9114	38		sec				sec
.9115	60		rts				rts
.9116					_ENFirstDP:
.9116	20 83 96	jsr $9683			jsr 	NSMSetZero 					; clear integer part
.9119	80 3f		bra $915a			bra 	_ESTASwitchFloat			; go straight to float and exi
.911b					_ENNoRestart:
.911b	48		pha				pha 								; save on stack.
.911c	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.911f	c9 01		cmp #$01			cmp 	#ESTA_Low
.9121	f0 09		beq $912c			beq  	_ESTALowState
.9123	c9 02		cmp #$02			cmp 	#ESTA_High
.9125	f0 29		beq $9150			beq 	_ESTAHighState
.9127	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9129	f0 3b		beq $9166			beq 	_ESTADecimalState
>912b	db						.byte 	$DB 						; causes a break in the emulator
.912c					_ESTALowState:
.912c	68		pla				pla 								; get value back
.912d	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.912f	f0 29		beq $915a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9131	29 0f		and #$0f			and 	#15 						; make digit
.9133	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.9136	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9139	0a		asl a				asl 	a
.913a	0a		asl a				asl 	a
.913b	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.913e	0a		asl a				asl 	a
.913f	6d 06 07	adc $0706			adc 	DigitTemp
.9142	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9145	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9147	90 05		bcc $914e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9149	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.914b	8d 05 07	sta $0705			sta 	EncodeState
.914e					_ESTANoSwitch:
.914e	38		sec				sec
.914f	60		rts				rts
.9150					_ESTAHighState:
.9150	68		pla				pla 								; get value back
.9151	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9153	f0 05		beq $915a			beq 	_ESTASwitchFloat
.9155	20 b9 91	jsr $91b9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9158	38		sec				sec
.9159	60		rts				rts
.915a					_ESTASwitchFloat:
.915a	9c 07 07	stz $0707			stz 	DecimalCount
.915d	e8		inx				inx 								; zero the decimal additive.
.915e	20 83 96	jsr $9683			jsr 	NSMSetZero
.9161	ca		dex				dex
.9162	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9164	80 ab		bra $9111			bra 	_ENExitChange
.9166					_ESTADecimalState:
.9166	68		pla				pla 								; digit.
.9167	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9169	f0 96		beq $9101			beq 	_ENFail
.916b	e8		inx				inx 								; put digit into fractional part of X+1
.916c	20 b9 91	jsr $91b9			jsr 	ESTAShiftDigitIntoMantissa
.916f	ca		dex				dex
.9170	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9173	ad 07 07	lda $0707			lda 	DecimalCount
.9176	c9 0b		cmp #$0b			cmp 	#11
.9178	f0 02		beq $917c			beq 	_ESTADSFail
.917a	38		sec				sec
.917b	60		rts				rts
.917c					_ESTADSFail:
.917c	4c 5b a3	jmp $a35b			jmp 	RangeError
.917f					_ENConstructFinal:
.917f	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9182	f0 33		beq $91b7			beq 	_ENCFExit 					; no decimals
.9184	5a		phy				phy
.9185	0a		asl a				asl 	a 							; x 4 and CLC
.9186	0a		asl a				asl 	a
.9187	6d 07 07	adc $0707			adc 	DecimalCount
.918a	a8		tay				tay
.918b	b9 1a a3	lda $a31a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.918e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9191	b9 1b a3	lda $a31b,y			lda 	DecimalScalarTable-5+1,y
.9194	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9197	b9 1c a3	lda $a31c,y			lda 	DecimalScalarTable-5+2,y
.919a	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.919d	b9 1d a3	lda $a31d,y			lda 	DecimalScalarTable-5+3,y
.91a0	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.91a3	b9 1e a3	lda $a31e,y			lda 	DecimalScalarTable-5+4,y
.91a6	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.91a9	a9 08		lda #$08			lda 	#NSTFloat
.91ab	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.91ae	7a		ply				ply
.91af	e8		inx				inx 								; multiply decimal const by decimal scalar
.91b0	20 a6 a0	jsr $a0a6			jsr 	FloatMultiply
.91b3	ca		dex				dex
.91b4	20 3b 9f	jsr $9f3b			jsr 	FloatAdd 					; add to integer part.
.91b7					_ENCFExit:
.91b7	18		clc				clc 								; reject the digit.
.91b8	60		rts				rts
.91b9					ESTAShiftDigitIntoMantissa:
.91b9	29 0f		and #$0f			and 	#15 						; save digit
.91bb	48		pha				pha
.91bc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.91bf	48		pha				pha
.91c0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.91c3	48		pha				pha
.91c4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91c7	48		pha				pha
.91c8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.91cb	48		pha				pha
.91cc	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; x 2
.91cf	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; x 4
.91d2	18		clc				clc 								; pop mantissa and add
.91d3	68		pla				pla
.91d4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.91d7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91da	68		pla				pla
.91db	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.91de	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91e1	68		pla				pla
.91e2	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.91e5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91e8	68		pla				pla
.91e9	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.91ec	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.91ef	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; x 10
.91f2	68		pla				pla 								; add digit
.91f3	18		clc				clc
.91f4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.91f7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91fa	90 0d		bcc $9209			bcc 	_ESTASDExit
.91fc	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.91ff	d0 08		bne $9209			bne 	_ESTASDExit
.9201	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9204	d0 03		bne $9209			bne 	_ESTASDExit
.9206	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.9209					_ESTASDExit:
.9209	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.920a					EvaluateTerm:
.920a	b1 30		lda ($30),y			lda 	(codePtr),y
.920c	30 18		bmi $9226			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.920e	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9210	b0 6f		bcs $9281			bcs 	_ETVariable
.9212	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9214	90 6e		bcc $9284			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9216	c9 3a		cmp #$3a			cmp 	#'9'+1
.9218	b0 6a		bcs $9284			bcs 	_ETPuncUnary
.921a	20 e8 90	jsr $90e8			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.921d					_ETNumber:
.921d	c8		iny				iny 								; keep encoding until we have the numbers
.921e	b1 30		lda ($30),y			lda 	(codePtr),y
.9220	20 eb 90	jsr $90eb			jsr 	EncodeNumberContinue
.9223	b0 f8		bcs $921d			bcs 	_ETNumber 					; go back if accepted.
.9225	60		rts				rts
.9226					_ETCheckUnary:
.9226	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9228	f0 41		beq $926b			beq 	_ETString
.922a	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.922c	f0 12		beq $9240			beq 	_ETHexConstant
.922e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9230	90 0b		bcc $923d			bcc 	_ETSyntaxError
.9232	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.9234	b0 07		bcs $923d			bcs 	_ETSyntaxError
.9236	da		phx				phx 								; push X on the stack
.9237	0a		asl a				asl 	a 							; put vector x 2 into X
.9238	aa		tax				tax
.9239	c8		iny				iny 								; consume unary function token
.923a	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.923d					_ETSyntaxError:
.923d	4c 56 a3	jmp $a356			jmp 	SyntaxError
.9240					_ETHexConstant:
.9240	c8		iny				iny 								; skip #
.9241	c8		iny				iny 								; skip count
.9242	20 83 96	jsr $9683			jsr 	NSMSetZero 					; clear result
.9245					_ETHLoop:
.9245	b1 30		lda ($30),y			lda 	(codePtr),y
.9247	c8		iny				iny 								; and consume
.9248	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.924a	f0 1e		beq $926a			beq 	_ETHExit
.924c	48		pha				pha 								; save on stack.
.924d	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; x 2
.9250	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; x 4
.9253	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; x 8
.9256	20 98 96	jsr $9698			jsr 	NSMShiftLeft 				; x 16
.9259	68		pla				pla 								; ASCII
.925a	c9 41		cmp #$41			cmp 	#'A'
.925c	90 02		bcc $9260			bcc 	_ETHNotChar
.925e	e9 07		sbc #$07			sbc 	#7
.9260					_ETHNotChar:
.9260	29 0f		and #$0f			and 	#15 						; digit now
.9262	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9265	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9268	80 db		bra $9245			bra 	_ETHLoop 					; go round.
.926a					_ETHExit:
.926a	60		rts				rts
.926b					_ETString:
.926b	c8		iny				iny 								; look at length
.926c	b1 30		lda ($30),y			lda 	(codePtr),y
.926e	48		pha				pha
.926f	c8		iny				iny 								; first character
.9270	20 1e 9d	jsr $9d1e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9273	68		pla				pla 								; restore count and save
.9274	85 36		sta $36				sta 	zTemp0
.9276	98		tya				tya 								; add length to Y to skip it.
.9277	18		clc				clc
.9278	65 36		adc $36				adc 	zTemp0
.927a	a8		tay				tay
.927b	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.927d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9280	60		rts				rts
.9281					_ETVariable:
.9281	4c db 92	jmp $92db			jmp 	VariableHandler
.9284					_ETPuncUnary:
.9284	c8		iny				iny 								; consume the unary character
.9285	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9287	f0 2d		beq $92b6			beq 	_ETUnaryNegate
.9289	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.928b	f0 39		beq $92c6			beq 	_ETDereference
.928d	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.928f	f0 43		beq $92d4			beq 	_ETParenthesis
.9291	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9293	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9295	f0 06		beq $929d			beq 	_ETIndirection
.9297	e6 36		inc $36				inc 	zTemp0
.9299	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.929b	d0 a0		bne $923d			bne 	_ETSyntaxError
.929d					_ETIndirection:
.929d	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.929f	1a		inc a				inc 	a
.92a0	48		pha				pha
.92a1	20 0a 92	jsr $920a			jsr 	EvaluateTerm				; evaluate the term
.92a4	20 4e 90	jsr $904e			jsr 	Dereference 				; dereference it.
.92a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.92aa	d0 07		bne $92b3			bne 	_ETTypeMismatch
.92ac	68		pla				pla 								; indirection 1-2
.92ad	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.92af	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92b2	60		rts				rts
.92b3					_ETTypeMismatch:
.92b3	4c 60 a3	jmp $a360			jmp 	TypeError
.92b6					_ETUnaryNegate:
.92b6	20 0a 92	jsr $920a			jsr 	EvaluateTerm				; evaluate the term
.92b9	20 4e 90	jsr $904e			jsr 	Dereference 				; dereference it.
.92bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.92bf	29 10		and #$10			and 	#NSTString
.92c1	d0 f0		bne $92b3			bne 	_ETTypeMismatch
.92c3	4c 2f 96	jmp $962f			jmp 	NSMNegate  					; just toggles the sign bit.
.92c6					_ETDereference:
.92c6	20 0a 92	jsr $920a			jsr 	EvaluateTerm				; evaluate the term
.92c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.92cc	29 20		and #$20			and 	#NSBIsReference
.92ce	f0 e3		beq $92b3			beq 	_ETTypeMismatch
.92d0	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.92d3	60		rts				rts
.92d4					_ETParenthesis:
.92d4	20 39 8f	jsr $8f39			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.92d7	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 			; check for )
.92da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.92db					VariableHandler:
.92db	b1 30		lda ($30),y			lda 	(codePtr),y
.92dd	18		clc				clc
.92de	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92e0	85 37		sta $37				sta 	zTemp0+1
.92e2	c8		iny				iny
.92e3	b1 30		lda ($30),y			lda 	(codePtr),y
.92e5	85 36		sta $36				sta 	zTemp0
.92e7	c8		iny				iny
.92e8	18		clc				clc									; copy variable address+3 to mantissa
.92e9	69 03		adc #$03			adc 	#3
.92eb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92ee	a5 37		lda $37				lda 	zTemp0+1
.92f0	69 00		adc #$00			adc 	#0
.92f2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92f5	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.92f8	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.92fb	9e 28 06	stz $0628,x			stz 	NSExponent,x
.92fe	5a		phy				phy
.92ff	a0 02		ldy #$02			ldy 	#2 							; read type
.9301	b1 36		lda ($36),y			lda 	(zTemp0),y
.9303	7a		ply				ply
.9304	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9306	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9308	9d 00 06	sta $0600,x			sta 	NSStatus,x
.930b	29 04		and #$04			and 	#NSBIsArray
.930d	d0 01		bne $9310			bne 	_VHArray
.930f	60		rts				rts
.9310					_VHArray:
.9310	e8		inx				inx
.9311	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9314	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9316	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9319	b1 30		lda ($30),y			lda 	(codePtr),y
.931b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.931d	d0 06		bne $9325			bne 	_VHNoSecondIndex
.931f	c8		iny				iny 								; skip the comma
.9320	e8		inx				inx
.9321	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9324	ca		dex				dex
.9325					_VHNoSecondIndex:
.9325	ca		dex				dex 								; set X back.
.9326	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 			; and check the right bracket.
.9329	5a		phy				phy 								; save position
.932a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.932d	85 3e		sta $3e				sta 	zaTemp
.932f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9332	85 3f		sta $3f				sta 	zaTemp+1
.9334	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9336	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9338	f0 02		beq $933c			beq 	_VHHas2Mask
.933a	a9 ff		lda #$ff			lda 	#$FF
.933c					_VHHas2Mask:
.933c	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.933f	f0 54		beq $9395			beq 	_VHBadIndex
.9341	0a		asl a				asl 	a 							; carry will be set if a second index
.9342	90 09		bcc $934d			bcc 	_VHCheckFirstIndex
.9344	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9346	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9348	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.934b	90 48		bcc $9395			bcc 	_VHBadIndex
.934d					_VHCheckFirstIndex:
.934d	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.934f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9351	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9354	90 3f		bcc $9395			bcc 	_VHBadIndex
.9356	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9358	64 37		stz $37				stz 	zTemp0+1
.935a	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.935d	30 0f		bmi $936e			bmi 	_VHNoMultiply
.935f	da		phx				phx
.9360	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9363	48		pha				pha
.9364	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9366	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9368	1a		inc a				inc 	a 							; add 1 for zero base
.9369	fa		plx				plx
.936a	20 f6 a1	jsr $a1f6			jsr 	Multiply8x8 				; calculate -> Z0
.936d	fa		plx				plx
.936e					_VHNoMultiply:
.936e	18		clc				clc
.936f	a5 36		lda $36				lda 	zTemp0
.9371	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9374	85 36		sta $36				sta 	zTemp0
.9376	a5 37		lda $37				lda 	zTemp0+1
.9378	69 00		adc #$00			adc 	#0
.937a	85 37		sta $37				sta 	zTemp0+1
.937c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.937f	20 d9 84	jsr $84d9			jsr 	ScaleByBaseType
.9382	18		clc				clc
.9383	b2 3e		lda ($3e)			lda 	(zaTemp)
.9385	65 36		adc $36				adc 	zTemp0
.9387	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.938a	a0 01		ldy #$01			ldy 	#1
.938c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.938e	65 37		adc $37				adc 	zTemp0+1
.9390	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9393	7a		ply				ply 								; restore position
.9394	60		rts				rts
.9395					_VHBadIndex:
.9395	a9 17		lda #$17		lda	#23
.9397	4c 30 8b	jmp $8b30		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a12c					AbsUnary:
.a12c	fa		plx				plx 								; restore stack pos
.a12d	20 d7 95	jsr $95d7			jsr 	EvaluateNumber 				; get a float or int
.a130	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.a133	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a136	29 7f		and #$7f			and 	#$7F
.a138	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a13b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.939a					AllocUnary:
.939a	fa		plx				plx 								; restore stack pos
.939b	20 0f 96	jsr $960f			jsr 	Evaluate16BitInteger		; get bytes required.
.939e	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.93a1	da		phx				phx 								; save X/Y
.93a2	5a		phy				phy
.93a3	8a		txa				txa 								; copy X into Y
.93a4	a8		tay				tay
.93a5	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.93a8	aa		tax				tax
.93a9	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.93ac	20 b9 93	jsr $93b9			jsr 	AllocateXABytes 			; allocate memory
.93af	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.93b2	8a		txa				txa
.93b3	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.93b6	7a		ply				ply
.93b7	fa		plx				plx
.93b8	60		rts				rts
.93b9					AllocateXABytes:
.93b9	5a		phy				phy
.93ba	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.93bd	84 36		sty $36				sty 	zTemp0
.93bf	5a		phy				phy
.93c0	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.93c3	84 37		sty $37				sty 	zTemp0+1
.93c5	5a		phy				phy
.93c6	18		clc				clc 								; add to low memory pointer
.93c7	6d 0c 07	adc $070c			adc 	lowMemPtr
.93ca	8d 0c 07	sta $070c			sta 	lowMemPtr
.93cd	8a		txa				txa
.93ce	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.93d1	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.93d4					_ClearMemory:
.93d4	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.93d7	c5 36		cmp $36				cmp 	zTemp0
.93d9	d0 07		bne $93e2			bne 	_CMClearNext
.93db	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.93de	c5 37		cmp $37				cmp 	zTemp0+1
.93e0	f0 0c		beq $93ee			beq 	_CMExit
.93e2					_CMClearNext:
.93e2	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.93e4	92 36		sta ($36)			sta 	(zTemp0)
.93e6	e6 36		inc $36				inc 	zTemp0
.93e8	d0 ea		bne $93d4			bne 	_ClearMemory
.93ea	e6 37		inc $37				inc		zTemp0+1
.93ec	80 e6		bra $93d4			bra 	_ClearMemory
.93ee					_CMExit:
.93ee	fa		plx				plx
.93ef	68		pla				pla
.93f0	7a		ply				ply
.93f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a13c					AscUnary:
.a13c	fa		plx				plx 								; restore stack pos
.a13d	20 e2 95	jsr $95e2			jsr 	EvaluateString 				; get a string
.a140	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a142	20 85 96	jsr $9685			jsr 	NSMSetByte
.a145	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.a148	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a149					FracUnary:
.a149	fa		plx				plx 								; restore stack pos
.a14a	20 d7 95	jsr $95d7			jsr 	EvaluateNumber 				; get a float or int
.a14d	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.a150	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a153	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a155	f0 04		beq $a15b			beq 	_IUZero
.a157	20 19 a0	jsr $a019			jsr 	FloatFractionalPart
.a15a	60		rts				rts
.a15b					_IUZero:
.a15b	20 83 96	jsr $9683			jsr 	NSMSetZero
.a15e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a15f					IntUnary:
.a15f	fa		plx				plx 								; restore stack pos
.a160	20 d7 95	jsr $95d7			jsr 	EvaluateNumber 				; get a float or int
.a163	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.a166	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a169	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a16b	f0 03		beq $a170			beq 	_IUExit
.a16d	20 7c a0	jsr $a07c			jsr 	FloatIntegerPart
.a170					_IUExit:
.a170	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a171					LenUnary:
.a171	fa		plx				plx 								; restore stack pos
.a172	20 e2 95	jsr $95e2			jsr 	EvaluateString 				; get a string
.a175	5a		phy				phy
.a176	a0 00		ldy #$00			ldy 	#0 							; find length
.a178					_LenFind:
.a178	b1 36		lda ($36),y			lda 	(zTemp0),y
.a17a	f0 06		beq $a182			beq 	_LenExit
.a17c	c8		iny				iny
.a17d	d0 f9		bne $a178			bne 	_LenFind
.a17f	4c 5b a3	jmp $a35b			jmp 	RangeError 					; string > 255
.a182					_LenExit:
.a182	98		tya				tya
.a183	20 85 96	jsr $9685			jsr 	NSMSetByte
.a186	7a		ply				ply
.a187	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.a18a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.93f2					Unary_Not:
.93f2	fa		plx				plx
.93f3	20 fa 95	jsr $95fa			jsr 	EvaluateInteger 			; get integer
.93f6	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.93f9	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; zero mantissa ?
.93fc	f0 04		beq $9402			beq 	_NotZero
.93fe	20 83 96	jsr $9683			jsr 	NSMSetZero
.9401	60		rts				rts
.9402					_NotZero:
.9402	4c 9d 8b	jmp $8b9d			jmp 	ReturnTrue
.9405					_UNBad:
.9405	4c 65 a3	jmp $a365			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9408					Unary_Rnd:
.9408	20 d7 95	jsr $95d7			jsr 	EvaluateNumber 				; number to use.
.940b	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 			; closing bracket
.940e	20 37 94	jsr $9437			jsr 	Random32Bit 				; generate a number.
.9411	ad 08 07	lda $0708			lda 	RandomSeed+0
.9414	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9417	ad 09 07	lda $0709			lda 	RandomSeed+1
.941a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.941d	ad 0a 07	lda $070a			lda 	RandomSeed+2
.9420	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9423	ad 0b 07	lda $070b			lda 	RandomSeed+3
.9426	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9428	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.942b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.942d	8d 28 06	sta $0628			sta 	NSExponent
.9430	a9 08		lda #$08			lda 	#NSTFloat
.9432	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>9435	db						.byte 	$DB 						; causes a break in the emulator
.9436	60		rts				rts
.9437					Random32Bit:
.9437	5a		phy				phy
.9438	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.943a	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.943d	d0 03		bne $9442			bne 	_Random1
.943f	a8		tay				tay 								; if so do it 256 times
.9440	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9442					_Random1:
.9442	0a		asl a				asl 	a 							; LSFR RNG
.9443	2e 09 07	rol $0709			rol 	RandomSeed+1
.9446	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9449	2e 0b 07	rol $070b			rol 	RandomSeed+3
.944c	90 02		bcc $9450			bcc 	_Random2
.944e	49 c5		eor #$c5			eor 	#$C5
.9450					_Random2:
.9450	88		dey				dey
.9451	d0 ef		bne $9442			bne 	_Random1
.9453	7a		ply				ply
.9454	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a18b					SgnUnary:
.a18b	fa		plx				plx 								; restore stack pos
.a18c	20 d7 95	jsr $95d7			jsr 	EvaluateNumber 				; get a float or int
.a18f	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.a192	20 b3 96	jsr $96b3			jsr 	NSMIsZero 					; if zero
.a195	f0 10		beq $a1a7			beq 	_SGZero  					; return Int Zero
.a197	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a19a	48		pha				pha
.a19b	a9 01		lda #$01			lda 	#1 							; set to 1
.a19d	20 85 96	jsr $9685			jsr 	NSMSetByte
.a1a0	68		pla				pla
.a1a1	29 80		and #$80			and		#$80 						; copy the sign byte out
.a1a3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1a6	60		rts				rts
.a1a7	20 83 96	jsr $9683	_SGZero:jsr 	NSMSetZero
.a1aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a1ab					ValUnary:
.a1ab	fa		plx				plx 								; restore stack pos
.a1ac	20 c1 a1	jsr $a1c1			jsr 	ValMainCode 				; do the main val() code
.a1af	b0 01		bcs $a1b2			bcs 	_VUError 					; couldn't convert
.a1b1	60		rts				rts
.a1b2					_VUError:
.a1b2	4c 60 a3	jmp $a360			jmp 	TypeError
.a1b5					IsValUnary:
.a1b5	fa		plx				plx 								; restore stack pos
.a1b6	20 c1 a1	jsr $a1c1			jsr 	ValMainCode 				; do the main val() code
.a1b9	b0 03		bcs $a1be			bcs 	_VUBad
.a1bb	4c 9d 8b	jmp $8b9d			jmp 	ReturnTrue
.a1be					_VUBad:
.a1be	4c a9 8b	jmp $8ba9			jmp 	ReturnFalse
.a1c1					ValMainCode:
.a1c1	20 e2 95	jsr $95e2			jsr 	EvaluateString 				; get a string
.a1c4	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 			; check right bracket present
.a1c7	5a		phy				phy
.a1c8	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a1ca	f0 17		beq $a1e3			beq 	_VMCFail2
.a1cc	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a1ce	48		pha				pha 								; save first character
.a1cf	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a1d1	d0 01		bne $a1d4			bne 	_VMCStart
.a1d3	c8		iny				iny 								; skip over -
.a1d4					_VMCStart:
.a1d4	38		sec				sec 								; initialise first time round.
.a1d5					_VMCNext:
.a1d5	c8		iny				iny 								; pre-increment
.a1d6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a1d8	f0 0c		beq $a1e6			beq 	_VMCSuccess 				; successful.
.a1da	20 ec 90	jsr $90ec			jsr 	EncodeNumber 				; send it to the number-builder
.a1dd	90 03		bcc $a1e2			bcc 	_VMCFail 					; if failed, give up.
.a1df	18		clc				clc 								; next time round, countinue
.a1e0	80 f3		bra $a1d5			bra 	_VMCNext
.a1e2					_VMCFail:
.a1e2	68		pla				pla
.a1e3					_VMCFail2:
.a1e3	7a		ply				ply
.a1e4	38		sec				sec
.a1e5	60		rts				rts
.a1e6					_VMCSuccess:
.a1e6	a9 00		lda #$00			lda 	#0 							; construct final
.a1e8	20 ec 90	jsr $90ec			jsr 	EncodeNumber
.a1eb	68		pla				pla
.a1ec	c9 2d		cmp #$2d			cmp 	#"-"
.a1ee	d0 03		bne $a1f3			bne 	_VMCNotNegative
.a1f0	20 2f 96	jsr $962f			jsr		NSMNegate
.a1f3					_VMCNotNegative:
.a1f3	7a		ply				ply
.a1f4	18		clc				clc
.a1f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9455					ChrUnary:
.9455	fa		plx				plx 								; restore stack pos
.9456	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger			; get value
.9459	48		pha				pha
.945a	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.945d	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.945f	20 50 a5	jsr $a550			jsr 	StringTempAllocate
.9462	68		pla				pla 								; write number to it
.9463	20 8e a5	jsr $a58e			jsr 	StringTempWrite
.9466	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9467					SpcUnary:
.9467	fa		plx				plx 								; restore stack pos
.9468	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger			; get value
.946b	5a		phy				phy
.946c	48		pha				pha 								; save count
.946d	20 50 a5	jsr $a550			jsr 	StringTempAllocate
.9470	7a		ply				ply 								; to do count in Y
.9471					_SpcLoop:
.9471	c0 00		cpy #$00			cpy 	#0
.9473	f0 08		beq $947d			beq 	_SpcExit
.9475	a9 20		lda #$20			lda 	#32
.9477	20 8e a5	jsr $a58e			jsr 	StringTempWrite
.947a	88		dey				dey
.947b	80 f4		bra $9471			bra 	_SPCLoop
.947d					_SpcExit:
.947d	7a		ply				ply
.947e	20 74 9d	jsr $9d74			jsr 	CheckRightBracket
.9481	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9482					Unary_Str:
.9482	fa		plx				plx
.9483	20 d7 95	jsr $95d7			jsr 	EvaluateNumber  			; get number
.9486	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 			; closing bracket
.9489	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.948b	20 a4 94	jsr $94a4			jsr 	ConvertNumberToString 		; do the conversion.
.948e	a9 21		lda #$21			lda		#33 						; create buffer
.9490	20 50 a5	jsr $a550			jsr 	StringTempAllocate 			; allocate memory
.9493	da		phx				phx
.9494	a2 00		ldx #$00			ldx 	#0
.9496					_USCopy:
.9496	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.9499	20 8e a5	jsr $a58e			jsr 	StringTempWrite
.949c	e8		inx				inx
.949d	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.94a0	d0 f4		bne $9496			bne 	_USCopy
.94a2	fa		plx				plx
.94a3	60		rts				rts
.94a4					ConvertNumberToString:
.94a4	5a		phy				phy 								; save code position
.94a5	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.94a8	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.94ab	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.94ae	10 0a		bpl $94ba			bpl 	_CNTSNotNegative
.94b0	29 7f		and #$7f			and 	#$7F 						; make +ve
.94b2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94b5	a9 2d		lda #$2d			lda 	#"-"
.94b7	20 20 95	jsr $9520			jsr 	WriteDecimalBuffer
.94ba					_CNTSNotNegative:
.94ba	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.94bd	f0 15		beq $94d4			beq 	_CNTSNotFloat
.94bf	e8		inx				inx 								; round up
.94c0	a9 01		lda #$01			lda 	#1
.94c2	20 85 96	jsr $9685			jsr 	NSMSetByte
.94c5	ca		dex				dex
.94c6	bd 28 06	lda $0628,x			lda		NSExponent,x
.94c9	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.94cc	a9 08		lda #$08			lda 	#NSTFloat
.94ce	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.94d1	20 3b 9f	jsr $9f3b			jsr 	FloatAdd
.94d4					_CNTSNotFloat:
.94d4	20 02 95	jsr $9502			jsr 	MakePlusTwoString
.94d7	20 19 a0	jsr $a019			jsr 	FloatFractionalPart 		; get the fractional part
.94da	20 dd a0	jsr $a0dd			jsr 	NSNormalise					; normalise , exit if zero
.94dd	f0 21		beq $9500			beq 	_CNTSExit
.94df	a9 2e		lda #$2e			lda 	#"."
.94e1	20 20 95	jsr $9520			jsr 	WriteDecimalBuffer 			; write decimal place
.94e4					_CNTSDecimal:
.94e4	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.94e7	30 17		bmi $9500			bmi 	_CNTSExit
.94e9	e8		inx				inx 								; x 10.0
.94ea	a9 0a		lda #$0a			lda 	#10
.94ec	20 85 96	jsr $9685			jsr 	NSMSetByte
.94ef	a9 08		lda #$08			lda 	#NSTFloat
.94f1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94f4	ca		dex				dex
.94f5	20 a6 a0	jsr $a0a6			jsr 	FloatMultiply
.94f8	20 02 95	jsr $9502			jsr 	MakePlusTwoString
.94fb	20 19 a0	jsr $a019			jsr 	FloatFractionalPart 		; get the fractional part
.94fe	80 e4		bra $94e4			bra 	_CNTSDecimal 				; keep going.
.9500					_CNTSExit:
.9500	7a		ply				ply
.9501	60		rts				rts
.9502					MakePlusTwoString:
.9502	da		phx				phx
.9503	20 5a 96	jsr $965a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9506	e8		inx				inx 								; access it
.9507	e8		inx				inx
.9508	20 7c a0	jsr $a07c			jsr 	FloatIntegerPart 			; make it an integer
.950b	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.950d	20 e5 9e	jsr $9ee5			jsr 	ConvertInt32
.9510	a2 00		ldx #$00			ldx	 	#0
.9512					_MPTSCopy:
.9512	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.9515	20 20 95	jsr $9520			jsr 	WriteDecimalBuffer
.9518	e8		inx				inx
.9519	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.951c	d0 f4		bne $9512			bne 	_MPTSCopy
.951e	fa		plx				plx
.951f	60		rts				rts
.9520					WriteDecimalBuffer:
.9520	da		phx				phx
.9521	ae 14 07	ldx $0714			ldx 	dbOffset
.9524	9d 97 08	sta $0897,x			sta 	DecimalBuffer,x
.9527	9e 98 08	stz $0898,x			stz 	DecimalBuffer+1,x
.952a	ee 14 07	inc $0714			inc 	dbOffset
.952d	fa		plx				plx
.952e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.952f					Unary_Left:
.952f	fa		plx				plx
.9530	18		clc				clc 								; only one parameter
.9531	20 a6 95	jsr $95a6			jsr 	SubstringInitial 			; set up.
.9534	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9537	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.953a	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.953d	80 2c		bra $956b			bra 	SubstringMain
.953f					Unary_Right:
.953f	fa		plx				plx
.9540	18		clc				clc 								; only one parameter
.9541	20 a6 95	jsr $95a6			jsr 	SubstringInitial 			; set up.
.9544	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9547	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.954a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.954d	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.9550	b0 02		bcs $9554			bcs 	_URNotUnderflow
.9552	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9554					_URNotUnderFlow:
.9554	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9557	80 12		bra $956b			bra 	SubStringMain
.9559					Unary_Mid:
.9559	fa		plx				plx
.955a	38		sec				sec 								; two parameters
.955b	20 a6 95	jsr $95a6			jsr 	SubstringInitial 			; set up.
.955e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9561	f0 05		beq $9568			beq 	_UMError
.9563	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9566	80 03		bra $956b			bra 	SubStringMain
.9568					_UMError:
.9568	4c 65 a3	jmp $a365			jmp 	ArgumentError
.956b					SubStringMain:
.956b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.956e	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9571	b0 2d		bcs $95a0			bcs 	_SSMNull 					; if so, return an empty string.
.9573	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9576	f0 28		beq $95a0			beq 	_SSMNull 					; return empty string.
.9578	18		clc				clc 								; add the offset +1 to the address and
.9579	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.957c	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.957f	85 36		sta $36				sta 	zTemp0
.9581	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9584	69 00		adc #$00			adc 	#0
.9586	85 37		sta $37				sta 	zTemp0+1
.9588					_SSMNoCarry:
.9588	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.958b	20 50 a5	jsr $a550			jsr 	StringTempAllocate 			; allocate that many characters
.958e	5a		phy				phy 								; save Y
.958f	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9591					_SSMCopy:
.9591	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9593	f0 09		beq $959e			beq 	_SSMEString 				; no more to copy
.9595	20 8e a5	jsr $a58e			jsr 	StringTempWrite 			; and write it out.
.9598	c8		iny				iny
.9599	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.959c	d0 f3		bne $9591			bne 	_SSMCopy
.959e					_SSMEString:
.959e	7a		ply				ply
.959f					_SSMExit:
.959f	60		rts				rts
.95a0					_SSMNull:
.95a0	a9 00		lda #$00			lda 	#0
.95a2	20 50 a5	jsr $a550			jsr 	StringTempAllocate
.95a5	60		rts				rts
.95a6					SubstringInitial:
.95a6	da		phx				phx 								; save initial stack position
.95a7	08		php				php 								; save carry on stack indicating 2 parameters
.95a8	20 e2 95	jsr $95e2			jsr 	EvaluateString 				; get a string
.95ab	5a		phy				phy 								; calculate length to exponent.
.95ac	a0 ff		ldy #$ff			ldy 	#$FF
.95ae					_SIFindLength:
.95ae	c8		iny				iny
.95af	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b1	d0 fb		bne $95ae			bne 	_SIFindLength
.95b3	98		tya				tya
.95b4	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95b7	7a		ply				ply
.95b8	e8		inx				inx
.95b9	20 7c 9d	jsr $9d7c			jsr 	CheckComma 					; comma next
.95bc	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger 		; get next parameter
.95bf	28		plp				plp 								; is it the last parameter ?
.95c0	90 07		bcc $95c9			bcc 	_SSIExit 					; if so, exit.
.95c2	e8		inx				inx
.95c3	20 7c 9d	jsr $9d7c			jsr 	CheckComma 					; comma next
.95c6	20 1b 96	jsr $961b			jsr 	Evaluate8BitInteger 		; get last parameter
.95c9					_SSIExit:
.95c9	fa		plx				plx
.95ca	20 74 9d	jsr $9d74			jsr 	CheckRightBracket 			; check closing bracket
.95cd	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.95ce					EvaluateValue:
.95ce	48		pha				pha
.95cf	20 39 8f	jsr $8f39			jsr		EvaluateExpression 			; expression
.95d2	20 4e 90	jsr $904e			jsr 	Dereference					; derefernce it
.95d5	68		pla				pla
.95d6	60		rts				rts
.95d7					EvaluateNumber:
.95d7	20 ce 95	jsr $95ce			jsr 	EvaluateValue 				; get a value
.95da	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.95dd	29 10		and #$10			and 	#NSBIsString
.95df	d0 16		bne $95f7			bne 	HelperTypeError
.95e1	60		rts				rts
.95e2					EvaluateString:
.95e2	20 ce 95	jsr $95ce			jsr 	EvaluateValue 				; get a value
.95e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.95e8	29 10		and #$10			and 	#NSBIsString
.95ea	f0 0b		beq $95f7			beq 	HelperTypeError
.95ec					CopyAddressToTemp0:
.95ec	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.95ef	85 36		sta $36				sta 	zTemp0
.95f1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.95f4	85 37		sta $37				sta 	zTemp0+1
.95f6	60		rts				rts
.95f7					HelperTypeError:
.95f7	4c 60 a3	jmp $a360			jmp 	TypeError
.95fa					EvaluateInteger:
.95fa	20 d7 95	jsr $95d7			jsr 	EvaluateNumber
.95fd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9600	d0 0a		bne $960c			bne 	HelperValueError 			; if not, it's a float.
.9602	60		rts				rts
.9603					EvaluateUnsignedInteger:
.9603	20 fa 95	jsr $95fa			jsr 	EvaluateInteger 			; check integer is +ve
.9606	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9609	30 01		bmi $960c			bmi 	HelperValueError
.960b	60		rts				rts
.960c					HelperValueError:
.960c	4c 65 a3	jmp $a365			jmp 	ArgumentError
.960f					Evaluate16BitInteger:
.960f	20 03 96	jsr $9603			jsr	 	EvaluateUnsignedInteger		; get integer
.9612	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9615	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9618	d0 f2		bne $960c			bne 	HelperValueError
.961a	60		rts				rts
.961b					Evaluate8BitInteger:
.961b	20 03 96	jsr $9603			jsr	 	EvaluateUnsignedInteger 	; get an integer
.961e	d0 ec		bne $960c			bne 	HelperValueError
.9620	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9623	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9626	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9629	d0 e1		bne $960c			bne 	HelperValueError
.962b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.962e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a1f6					Multiply8x8:
.a1f6	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a1f7	85 36		sta $36			  	sta 	zTemp0
.a1f9	86 37		stx $37				stx 	zTemp0+1
.a1fb	a9 00		lda #$00			lda 	#0
.a1fd	a2 08		ldx #$08			ldx 	#8
.a1ff					_M88Loop:
.a1ff	90 03		bcc $a204			bcc 	_M88NoAdd
.a201	18		clc				clc
.a202	65 37		adc $37				adc 	zTemp0+1
.a204					_M88NoAdd:
.a204	6a		ror a				ror 	a
.a205	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a207	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a208	d0 f5		bne $a1ff			bne 	_M88Loop
.a20a	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a20c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.962f					NSMNegate:
.962f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9632	49 80		eor #$80			eor 	#NSBIsNegative
.9634	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9637	60		rts				rts
.9638					NSMNegateMantissa:
.9638	38		sec				sec
.9639	a9 00		lda #$00			lda 	#0
.963b	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.963e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9641	a9 00		lda #$00			lda 	#0
.9643	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9646	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9649	a9 00		lda #$00			lda 	#0
.964b	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.964e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9651	a9 00		lda #$00			lda 	#0
.9653	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9656	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9659	60		rts				rts
.965a					NSMShiftUpTwo:
.965a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.965d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9660	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9663	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9666	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9669	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.966c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.966f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9672	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9675	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9678	bd 00 06	lda $0600,x			lda 	NSStatus,x
.967b	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.967e	60		rts				rts
.967f					NSMSetZeroMantissaOnly:
.967f	a9 00		lda #$00			lda 	#0
.9681	80 08		bra $968b			bra 	NSMSetMantissa
.9683					NSMSetZero:
.9683	a9 00		lda #$00			lda 	#0
.9685					NSMSetByte:
.9685	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9688	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.968b					NSMSetMantissa:
.968b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.968e	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9691	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9694	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9697	60		rts				rts
.9698					NSMShiftLeft:
.9698	18		clc				clc
.9699					NSMRotateLeft:
.9699	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.969c	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.969f	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.96a2	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.96a5	60		rts				rts
.96a6					NSMShiftRight:
.96a6	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.96a9	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.96ac	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.96af	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.96b2	60		rts				rts
.96b3					NSMIsZero:
.96b3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.96b6	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.96b9	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.96bc	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.96bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a20d					Assemble_ora:
.a20d	20 90 81	jsr $8190		jsr	AssembleGroup1
>a210	01					.byte $01
.a211					Assemble_and:
.a211	20 90 81	jsr $8190		jsr	AssembleGroup1
>a214	21					.byte $21
.a215					Assemble_eor:
.a215	20 90 81	jsr $8190		jsr	AssembleGroup1
>a218	41					.byte $41
.a219					Assemble_adc:
.a219	20 90 81	jsr $8190		jsr	AssembleGroup1
>a21c	61					.byte $61
.a21d					Assemble_sta:
.a21d	20 90 81	jsr $8190		jsr	AssembleGroup1
>a220	81					.byte $81
.a221					Assemble_lda:
.a221	20 90 81	jsr $8190		jsr	AssembleGroup1
>a224	a1					.byte $a1
.a225					Assemble_cmp:
.a225	20 90 81	jsr $8190		jsr	AssembleGroup1
>a228	c1					.byte $c1
.a229					Assemble_sbc:
.a229	20 90 81	jsr $8190		jsr	AssembleGroup1
>a22c	e1					.byte $e1
.a22d					Assemble_asl:
.a22d	20 97 81	jsr $8197		jsr	AssembleGroup2
>a230	02					.byte $02
>a231	75					.byte $75
.a232					Assemble_rol:
.a232	20 97 81	jsr $8197		jsr	AssembleGroup2
>a235	22					.byte $22
>a236	75					.byte $75
.a237					Assemble_lsr:
.a237	20 97 81	jsr $8197		jsr	AssembleGroup2
>a23a	42					.byte $42
>a23b	75					.byte $75
.a23c					Assemble_ror:
.a23c	20 97 81	jsr $8197		jsr	AssembleGroup2
>a23f	62					.byte $62
>a240	75					.byte $75
.a241					Assemble_stx:
.a241	20 97 81	jsr $8197		jsr	AssembleGroup2
>a244	82					.byte $82
>a245	50					.byte $50
.a246					Assemble_ldx:
.a246	20 97 81	jsr $8197		jsr	AssembleGroup2
>a249	a2					.byte $a2
>a24a	d0					.byte $d0
.a24b					Assemble_dec:
.a24b	20 97 81	jsr $8197		jsr	AssembleGroup2
>a24e	c2					.byte $c2
>a24f	55					.byte $55
.a250					Assemble_inc:
.a250	20 97 81	jsr $8197		jsr	AssembleGroup2
>a253	e2					.byte $e2
>a254	55					.byte $55
.a255					Assemble_stz:
.a255	20 97 81	jsr $8197		jsr	AssembleGroup2
>a258	60					.byte $60
>a259	44					.byte $44
.a25a					Assemble_bit:
.a25a	20 97 81	jsr $8197		jsr	AssembleGroup2
>a25d	20					.byte $20
>a25e	55					.byte $55
.a25f					Assemble_sty:
.a25f	20 97 81	jsr $8197		jsr	AssembleGroup2
>a262	80					.byte $80
>a263	54					.byte $54
.a264					Assemble_ldy:
.a264	20 97 81	jsr $8197		jsr	AssembleGroup2
>a267	a0					.byte $a0
>a268	d5					.byte $d5
.a269					Assemble_cpy:
.a269	20 97 81	jsr $8197		jsr	AssembleGroup2
>a26c	c0					.byte $c0
>a26d	d4					.byte $d4
.a26e					Assemble_cpx:
.a26e	20 97 81	jsr $8197		jsr	AssembleGroup2
>a271	e0					.byte $e0
>a272	d0					.byte $d0
.a273					Assemble_tsb:
.a273	20 97 81	jsr $8197		jsr	AssembleGroup2
>a276	00					.byte $00
>a277	50					.byte $50
.a278					Assemble_trb:
.a278	20 97 81	jsr $8197		jsr	AssembleGroup2
>a27b	10					.byte $10
>a27c	50					.byte $50
.a27d					Assemble_jsr:
.a27d	20 97 81	jsr $8197		jsr	AssembleGroup2
>a280	14					.byte $14
>a281	10					.byte $10
.a282					Assemble_jmp:
.a282	20 97 81	jsr $8197		jsr	AssembleGroup2
>a285	40					.byte $40
>a286	10					.byte $10
.a287					Assemble_bpl:
.a287	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a28a	10					.byte $10
.a28b					Assemble_bmi:
.a28b	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a28e	30					.byte $30
.a28f					Assemble_bvc:
.a28f	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a292	50					.byte $50
.a293					Assemble_bvs:
.a293	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a296	70					.byte $70
.a297					Assemble_bcc:
.a297	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a29a	90					.byte $90
.a29b					Assemble_bcs:
.a29b	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a29e	b0					.byte $b0
.a29f					Assemble_bne:
.a29f	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a2a2	d0					.byte $d0
.a2a3					Assemble_beq:
.a2a3	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a2a6	f0					.byte $f0
.a2a7					Assemble_bra:
.a2a7	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a2aa	80					.byte $80
.a2ab					Assemble_brk:
.a2ab	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2ae	00					.byte $00
.a2af					Assemble_php:
.a2af	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2b2	08					.byte $08
.a2b3					Assemble_clc:
.a2b3	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2b6	18					.byte $18
.a2b7					Assemble_plp:
.a2b7	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2ba	28					.byte $28
.a2bb					Assemble_sec:
.a2bb	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2be	38					.byte $38
.a2bf					Assemble_rti:
.a2bf	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2c2	40					.byte $40
.a2c3					Assemble_pha:
.a2c3	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2c6	48					.byte $48
.a2c7					Assemble_cli:
.a2c7	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2ca	58					.byte $58
.a2cb					Assemble_phy:
.a2cb	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2ce	5a					.byte $5a
.a2cf					Assemble_rts:
.a2cf	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2d2	60					.byte $60
.a2d3					Assemble_pla:
.a2d3	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2d6	68					.byte $68
.a2d7					Assemble_sei:
.a2d7	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2da	78					.byte $78
.a2db					Assemble_ply:
.a2db	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2de	7a					.byte $7a
.a2df					Assemble_dey:
.a2df	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2e2	88					.byte $88
.a2e3					Assemble_txa:
.a2e3	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2e6	8a					.byte $8a
.a2e7					Assemble_tya:
.a2e7	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2ea	98					.byte $98
.a2eb					Assemble_txs:
.a2eb	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2ee	9a					.byte $9a
.a2ef					Assemble_tay:
.a2ef	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2f2	a8					.byte $a8
.a2f3					Assemble_tax:
.a2f3	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2f6	aa					.byte $aa
.a2f7					Assemble_clv:
.a2f7	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2fa	b8					.byte $b8
.a2fb					Assemble_tsx:
.a2fb	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a2fe	ba					.byte $ba
.a2ff					Assemble_iny:
.a2ff	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a302	c8					.byte $c8
.a303					Assemble_dex:
.a303	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a306	ca					.byte $ca
.a307					Assemble_cld:
.a307	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a30a	d8					.byte $d8
.a30b					Assemble_phx:
.a30b	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a30e	da					.byte $da
.a30f					Assemble_inx:
.a30f	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a312	e8					.byte $e8
.a313					Assemble_nop:
.a313	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a316	ea					.byte $ea
.a317					Assemble_sed:
.a317	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a31a	f8					.byte $f8
.a31b					Assemble_plx:
.a31b	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a31e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a31f					DecimalScalarTable:
>a31f	66 66 66 66				.dword $66666666 ; 0.1
>a323	de					.byte $de
>a324	1f 85 eb 51				.dword $51eb851f ; 0.01
>a328	db					.byte $db
>a329	4c 37 89 41				.dword $4189374c ; 0.001
>a32d	d8					.byte $d8
>a32e	ac 8b db 68				.dword $68db8bac ; 0.0001
>a332	d4					.byte $d4
>a333	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a337	d1					.byte $d1
>a338	83 de 1b 43				.dword $431bde83 ; 1e-06
>a33c	ce					.byte $ce
>a33d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a341	ca					.byte $ca
>a342	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a346	c7					.byte $c7
>a347	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a34b	c4					.byte $c4
>a34c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a350	c0					.byte $c0
>a351	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a355	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a356					SyntaxError:
.a356	a9 02		lda #$02		lda	#2
.a358	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.a35b					RangeError:
.a35b	a9 04		lda #$04		lda	#4
.a35d	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.a360					TypeError:
.a360	a9 05		lda #$05		lda	#5
.a362	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.a365					ArgumentError:
.a365	a9 07		lda #$07		lda	#7
.a367	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.a36a					NotDoneError:
.a36a	a9 0c		lda #$0c		lda	#12
.a36c	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.a36f					ErrorText:
>a36f	42 72 65 61 6b 00			.text	"Break",0
>a375	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a37d	72 72 6f 72 00
>a382	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a38a	20 62 79 20 7a 65 72 6f 00
>a393	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a39b	61 6e 67 65 00
>a3a0	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a3a8	6d 61 74 63 68 00
>a3ae	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a3b6	65 6d 6f 72 79 00
>a3bc	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a3c4	61 72 67 75 6d 65 6e 74 00
>a3cd	53 74 6f 70 00				.text	"Stop",0
>a3d2	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a3da	6f 6f 20 6c 6f 6e 67 00
>a3e2	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a3ea	6e 20 66 61 69 6c 65 64 00
>a3f3	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a3fb	61 74 61 00
>a3ff	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a407	65 6e 74 65 64 00
>a40d	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a415	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a421	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a429	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a436	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a43e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a44b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a453	68 6f 75 74 20 57 68 69 6c 65 00
>a45e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a466	68 6f 75 74 20 46 6f 72 00
>a46f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a477	61 63 6b 20 66 75 6c 6c 00
>a480	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a488	75 63 74 75 72 65 00
>a48f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a497	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a4a4	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a4ac	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a4ba	41 72 72 61 79 20 73 69			.text	"Array size",0
>a4c2	7a 65 00
>a4c5	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a4cd	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.96c0					StackOpen:
.96c0	48		pha				pha 								; save frame byte
.96c1	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.96c3	0a		asl a				asl 	a 							; claim twice this for storage
.96c4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.96c6	38		sec				sec 								; so basically subtracting from
.96c7	65 34		adc $34				adc 	basicStack 	 				; basicStack
.96c9	85 34		sta $34				sta 	basicStack
.96cb	b0 08		bcs $96d5			bcs 	_SONoBorrow
.96cd	c6 35		dec $35				dec 	basicStack+1
.96cf	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.96d1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.96d3	90 04		bcc $96d9			bcc 	_SOMemory
.96d5					_SONoBorrow:
.96d5	68		pla				pla 								; get marker back and write at TOS
.96d6	92 34		sta ($34)			sta 	(basicStack)
.96d8	60		rts				rts
.96d9					_SOMemory:
.96d9							ERR_STACK
.96d9					StackClose:
.96d9	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.96db	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.96dd	0a		asl a				asl 	a 							; claim twice this.
.96de	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.96e0	85 34		sta $34				sta 	basicStack
.96e2	90 02		bcc $96e6			bcc 	_SCExit
.96e4	e6 35		inc $35				inc 	basicStack+1
.96e6					_SCExit:
.96e6	60		rts				rts
.96e7					StackCheckFrame:
.96e7	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.96e9	29 f0		and #$f0			and 	#$F0 						; check type bits
.96eb	d0 01		bne $96ee			bne 	_SCFError 					; different, we have structures mixed up
.96ed	60		rts				rts
.96ee					_SCFError:
.96ee	8a		txa				txa 								; report error X
.96ef	4c 30 8b	jmp $8b30			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.96f2					STKSaveCodePosition:
.96f2	5a		phy				phy
.96f3	98		tya				tya 								; save Y
.96f4	a0 05		ldy #$05			ldy 	#5
.96f6	91 34		sta ($34),y			sta 	(basicStack),y
.96f8	88		dey				dey 								; save Code Pointer
.96f9					_STKSaveLoop:
.96f9	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.96fc	91 34		sta ($34),y			sta 	(basicStack),y
.96fe	88		dey				dey
.96ff	d0 f8		bne $96f9			bne 	_STKSaveLoop
.9701	7a		ply				ply
.9702	60		rts				rts
.9703					STKLoadCodePosition:
.9703	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9705					_STKLoadLoop:
.9705	b1 34		lda ($34),y			lda 	(basicStack),y
.9707	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.970a	c8		iny				iny
.970b	c0 05		cpy #$05			cpy 	#5
.970d	d0 f6		bne $9705			bne 	_STKLoadLoop
.970f	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9711	a8		tay				tay
.9712	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9713					StackReset:
.9713	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9715	85 34		sta $34				sta 	0+basicStack
.9717	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9719	85 35		sta $35				sta 	1+basicStack
.971b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.971d	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.971f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a4d5					StringConcrete:
.a4d5	5a		phy				phy 								; save position on stack
.a4d6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a4d9	85 38		sta $38				sta 	zTemp1
.a4db	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a4de	85 39		sta $39				sta 	zTemp1+1
.a4e0	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a4e2					_SALength:
.a4e2	c8		iny				iny
.a4e3	b1 38		lda ($38),y			lda 	(zTemp1),y
.a4e5	d0 fb		bne $a4e2			bne 	_SALength
.a4e7	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a4e9	b0 3f		bcs $a52a			bcs 	_SALengthError
.a4eb	98		tya				tya 				 				; length of the new string
.a4ec	18		clc				clc
.a4ed	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a4ef	90 02		bcc $a4f3			bcc 	_SAHaveLength
.a4f1	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a4f3					_SAHaveLength:
.a4f3	48		pha				pha 								; save length.
.a4f4	38		sec				sec
.a4f5	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a4f7	6d 0e 07	adc $070e			adc 	StringMemory
.a4fa	8d 0e 07	sta $070e			sta 	StringMemory
.a4fd	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a4ff	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a502	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a504	6d 0f 07	adc $070f			adc 	StringMemory+1
.a507	8d 0f 07	sta $070f			sta 	StringMemory+1
.a50a	85 3b		sta $3b				sta 	zTemp2+1
.a50c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a50f	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a510	38		sec				sec
.a511	e9 03		sbc #$03			sbc 	#3
.a513	92 3a		sta ($3a)			sta 	(zTemp2)
.a515	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a517	a0 01		ldy #$01			ldy 	#1
.a519	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a51b					_SACopyNewString:
.a51b	a0 00		ldy #$00			ldy 	#0
.a51d					_SACopyNSLoop:
.a51d	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a51f	c8		iny				iny 								; write two on in string storage
.a520	c8		iny				iny
.a521	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a523	88		dey				dey 								; this makes it one one.
.a524	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a526	d0 f5		bne $a51d			bne 	_SACopyNSLoop
.a528	7a		ply				ply
.a529	60		rts				rts
.a52a					_SALengthError:
.a52a	a9 09		lda #$09		lda	#9
.a52c	4c 30 8b	jmp $8b30		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a52f					StringSystemInitialise:
.a52f	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a531	8d 0e 07	sta $070e			sta 	0+StringMemory
.a534	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a536	8d 0f 07	sta $070f			sta 	1+StringMemory
.a539	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a53c	60		rts				rts
.a53d					StringSpaceInitialise:
.a53d	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a53f	8d 10 07	sta $0710			sta 	StringInitialised
.a542	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a545	8d 11 07	sta $0711			sta 	StringTempPointer
.a548	ad 0f 07	lda $070f			lda 	StringMemory+1
.a54b	3a		dec a				dec 	a
.a54c	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a54f	60		rts				rts
.a550					StringTempAllocate:
.a550	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a552	b0 35		bcs $a589			bcs 	_STALength
.a554	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a557	30 05		bmi $a55e			bmi 	_STAAllocate
.a559	48		pha				pha 								; save value to subtract.
.a55a	20 3d a5	jsr $a53d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a55d	68		pla				pla 								; restore it
.a55e					_STAAllocate:
.a55e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a560	18		clc				clc  								; deliberate allows one more
.a561	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a564	8d 11 07	sta $0711			sta 	StringTempPointer
.a567	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a56a	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a56c	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a56f	69 ff		adc #$ff			adc 	#$FF
.a571	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a574	85 3d		sta $3d				sta 	zsTemp+1
.a576	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a579	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a57c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a57f	a9 10		lda #$10			lda 	#NSTString
.a581	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a584	a9 00		lda #$00			lda 	#0 							; clear the target string
.a586	92 3c		sta ($3c)			sta 	(zsTemp)
.a588	60		rts				rts
.a589					_STALength:
.a589	a9 09		lda #$09		lda	#9
.a58b	4c 30 8b	jmp $8b30		jmp	ErrorHandler
.a58e					StringTempWrite:
.a58e	48		pha				pha
.a58f	92 3c		sta ($3c)			sta 	(zsTemp)
.a591	e6 3c		inc $3c				inc 	zsTemp
.a593	d0 02		bne $a597			bne 	_STWNoCarry
.a595	e6 3d		inc $3d				inc 	zsTemp+1
.a597					_STWNoCarry:
.a597	a9 00		lda #$00			lda 	#0
.a599	92 3c		sta ($3c)			sta 	(zsTemp)
.a59b	68		pla				pla
.a59c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9720					BackloadProgram:
.9720	a2 ff		ldx #$ff			ldx 	#$FF
.9722	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.9725	20 4f 97	jsr $974f			jsr 	BLReadByte
.9728	30 1e		bmi $9748			bmi 	_BPExit
.972a					_BPCopy:
.972a	e8		inx				inx  								; copy byte in
.972b	9d 24 08	sta $0824,x			sta 	lineBuffer,x
.972e	9e 25 08	stz $0825,x			stz 	lineBuffer+1,x
.9731	20 4f 97	jsr $974f			jsr 	BLReadByte 					; read next byte
.9734	30 0a		bmi $9740			bmi 	_BPEndLine 					; -ve = EOL
.9736	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9738	d0 02		bne $973c			bne 	_BPNotTab
.973a	a9 20		lda #$20			lda 	#' '
.973c					_BPNotTab:
.973c	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.973e	b0 ea		bcs $972a			bcs 	_BPCopy
.9740					_BPEndLine:
.9740	20 63 9a	jsr $9a63			jsr 	TokeniseLine 				; tokenise the line.
.9743	20 ef 9c	jsr $9cef			jsr 	MemoryAppend 				; append to current program
.9746	80 d8		bra $9720			bra 	BackloadProgram
.9748					_BPExit:
.9748	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.974b	20 e1 83	jsr $83e1			jsr 	ClearCommand 				; clear variables etc.
.974e	60		rts				rts
.974f					BLReadByte:
.974f					_BLLoad:
.974f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9752	ee 50 97	inc $9750			inc 	_BLLoad+1
.9755	d0 03		bne $975a			bne 	_BLNoCarry
.9757	ee 51 97	inc $9751			inc 	_BLLoad+2
.975a					_BLNoCarry:
.975a	c9 00		cmp #$00			cmp 	#0
.975c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.975d					TokeniseSearchTable:
.975d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.975f	85 36		sta $36				sta 	zTemp0
.9761	a0 00		ldy #$00			ldy 	#0
.9763	a9 80		lda #$80			lda 	#$80 						; token #
.9765	85 38		sta $38				sta 	zTemp1
.9767					_TSTLoop:
.9767	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9769	30 49		bmi $97b4			bmi 	_TSTFail 					; -ve = end of table
.976b	f0 2e		beq $979b			beq 	_TSTNext 					; zero, check next it's a dummy
.976d	c8		iny				iny 								; get the hash
.976e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9770	88		dey				dey
.9771	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9774	d0 25		bne $979b			bne 	_TSTNext
.9776	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9779	38		sec				sec
.977a	ed 00 07	sbc $0700			sbc 	identStart
.977d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.977f	d0 1a		bne $979b			bne 	_TSTNext
.9781	5a		phy				phy 								; save Y , we might fail
.9782	c8		iny				iny 								; point to text
.9783	c8		iny				iny
.9784	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9787					_TSTCompareName:
.9787	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; compare text.
.978a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.978c	d0 0c		bne $979a			bne 	_TSTNextPullY 				; fail, pullY and do next
.978e	e8		inx				inx
.978f	c8		iny				iny
.9790	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9793	d0 f2		bne $9787			bne 	_TSTCompareName
.9795	7a		ply				ply 								; throw Y
.9796	a5 38		lda $38				lda 	zTemp1 						; get token #
.9798	38		sec				sec 								; return with CS = passed.
.9799	60		rts				rts
.979a					_TSTNextPullY:
.979a	7a		ply				ply 								; restore current, fall through.
.979b					_TSTNext:
.979b	e6 38		inc $38				inc 	zTemp1 						; token counter
.979d	98		tya				tya
.979e	18		clc				clc
.979f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.97a1	1a		inc a				inc 	a 							; +1
.97a2	1a		inc a				inc 	a 							; +2
.97a3	a8		tay				tay
.97a4	10 c1		bpl $9767			bpl 	_TSTLoop 					; if Y < $80 loop back
.97a6	98		tya				tya 								; add Y to zTemp0 and reset Y
.97a7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.97a9	18		clc				clc  								; but have tables > 255 bytes
.97aa	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.97ac	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.97ae	90 b7		bcc $9767			bcc 	_TSTLoop
.97b0	e6 37		inc $37				inc 	zTemp0+1
.97b2	80 b3		bra $9767			bra 	_TSTLoop
.97b4					_TSTFail:
.97b4	18		clc				clc
.97b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.97b6					KeywordSet0:
>97b6	00 65					.text	0,$65,""               ; $80 !0:EOF
>97b8	00 58					.text	0,$58,""               ; $81 !1:SH1
>97ba	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>97bc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>97c2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>97ca	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>97d0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>97d7	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>97de	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>97e5	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>97eb	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>97f3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>97fb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9801	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9808	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>980e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9816	28
>9817	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>981d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9823	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9829	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9830	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9836	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>983c	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9841	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9845	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>984b	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9853	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>985a	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9861	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9869	43
>986a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9870	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9876	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>987d	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9883	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9889	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>988e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9894	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9899	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>98a1	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>98a7	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>98ae	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>98b4	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>98b9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>98c0	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>98c6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>98cb	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>98d3	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>98d7	ff					.text	$FF
.98d8					KeywordSet1:
>98d8	00 65					.text	0,$65,""               ; $80 !0:EOF
>98da	00 58					.text	0,$58,""               ; $81 !1:SH1
>98dc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>98de	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>98e6	4c 45
>98e8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>98f0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>98f7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>98fc	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9902	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9907	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>990f	45
>9910	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9915	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>991b	ff					.text	$FF
.991c					KeywordSet2:
>991c	00 65					.text	0,$65,""               ; $80 !0:EOF
>991e	00 58					.text	0,$58,""               ; $81 !1:SH1
>9920	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9922	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9927	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>992c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9931	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9936	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>993b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9940	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9945	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>994a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>994f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9954	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9959	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>995e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9963	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9968	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>996d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9972	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9977	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>997c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9981	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9986	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>998b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9990	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9995	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>999a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>999f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>99a4	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>99a9	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>99ae	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>99b3	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>99b8	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>99bd	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>99c2	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>99c7	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>99cc	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>99d1	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>99d6	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>99db	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>99e0	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>99e5	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>99ea	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>99ef	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>99f4	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>99f9	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>99fe	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9a03	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9a08	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9a0d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9a12	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9a17	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9a1c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9a21	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9a26	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9a2b	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9a30	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9a35	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9a3a	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9a3f	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9a44	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9a49	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9a4e	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9a53	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9a58	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9a5d	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9a62	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9a63					TokeniseLine:
.9a63	20 eb 9b	jsr $9beb			jsr 	FixLineBufferCase 			; fix line case
.9a66	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9a68	8d 24 07	sta $0724			sta 	tokenOffset
.9a6b	9c 25 07	stz $0725			stz 	tokenLineNumber
.9a6e	9c 26 07	stz $0726			stz 	tokenLineNumber+1
.9a71	a2 ff		ldx #$ff			ldx 	#$FF
.9a73					_TKFindFirst:
.9a73	e8		inx				inx
.9a74	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9a77	f0 79		beq $9af2			beq 	_TKExit
.9a79	c9 20		cmp #$20			cmp 	#' '
.9a7b	90 f6		bcc $9a73			bcc 	_TKFindFirst
.9a7d	c9 30		cmp #$30			cmp 	#'0'
.9a7f	90 07		bcc $9a88			bcc 	_TKNoLineNumber
.9a81	c9 3a		cmp #$3a			cmp 	#'9'+1
.9a83	b0 03		bcs $9a88			bcs 	_TKNoLineNumber
.9a85	20 15 9c	jsr $9c15			jsr 	TokeniseExtractLineNumber
.9a88					_TKNoLineNumber:
.9a88					_TKTokeniseLoop:
.9a88	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9a8b	f0 65		beq $9af2			beq 	_TKExit
.9a8d	e8		inx				inx
.9a8e	c9 20		cmp #$20			cmp 	#' '
.9a90	f0 f6		beq $9a88			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9a92	ca		dex				dex 								; undo last get, A contains character, X is position.
.9a93	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9a95	f0 61		beq $9af8			beq 	_TKTokeniseIdentifier
.9a97	c9 41		cmp #$41			cmp 	#'A'
.9a99	90 04		bcc $9a9f			bcc 	_TKTokenisePunctuation
.9a9b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9a9d	90 59		bcc $9af8			bcc 	_TKTokeniseIdentifier
.9a9f					_TKTokenisePunctuation:
.9a9f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9aa1	f0 27		beq $9aca			beq 	_TKString
.9aa3	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9aa5	f0 28		beq $9acf			beq 	_TKHexConstant
.9aa7	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9aa9	f0 29		beq $9ad4			beq 	_TKCheckDouble
.9aab	c9 3e		cmp #$3e			cmp 	#'>'
.9aad	f0 25		beq $9ad4			beq 	_TKCheckDouble
.9aaf					_TKStandardPunctuation:
.9aaf	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get it back.
.9ab2	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9ab4	90 0e		bcc $9ac4			bcc 	_TKNoShift
.9ab6	48		pha				pha 								; save
.9ab7	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9ab9	85 36		sta $36				sta 	zTemp0
.9abb	68		pla				pla
.9abc	29 20		and #$20			and 	#32 						; bit 5
.9abe	4a		lsr a				lsr 	a 							; shift into bit 3
.9abf	4a		lsr a				lsr 	a
.9ac0	05 36		ora $36				ora 	zTemp0
.9ac2	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9ac4					_TKNoShift:
.9ac4	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte 			; write the punctuation character
.9ac7	e8		inx				inx 								; consume the character
.9ac8	80 be		bra $9a88			bra 	_TKTokeniseLoop 			; and loop round again.
.9aca					_TKString:
.9aca	20 7a 9b	jsr $9b7a			jsr 	TokeniseString
.9acd	80 b9		bra $9a88			bra 	_TKTokeniseLoop
.9acf					_TKHexConstant:
.9acf	20 b5 9b	jsr $9bb5			jsr 	TokeniseHexConstant
.9ad2	80 b4		bra $9a88			bra 	_TKTokeniseLoop
.9ad4					_TKCheckDouble:
.9ad4	bd 25 08	lda $0825,x			lda 	lineBuffer+1,x 				; get next character
.9ad7	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9ad9	90 d4		bcc $9aaf			bcc 	_TKStandardPunctuation
.9adb	c9 3f		cmp #$3f			cmp 	#'>'+1
.9add	b0 d0		bcs $9aaf			bcs 	_TKStandardPunctuation
.9adf	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9ae2	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9ae4	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9ae5	7d 25 08	adc $0825,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9ae8	38		sec				sec
.9ae9	e9 3c		sbc #$3c			sbc 	#'<'
.9aeb	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9aee	e8		inx				inx 								; consume both
.9aef	e8		inx				inx
.9af0	80 96		bra $9a88			bra 	_TKTokeniseLoop
.9af2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9af4	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9af7	60		rts				rts
.9af8					_TKTokeniseIdentifier:
.9af8	8e 00 07	stx $0700			stx 	identStart 					; save start
.9afb	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9afe					_TKCheckLoop:
.9afe	e8		inx				inx 								; look at next, we know first is identifier.
.9aff	bd 24 08	lda $0824,x			lda  	lineBuffer,x
.9b02	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9b04	f0 f8		beq $9afe			beq 	_TKCheckLoop
.9b06	c9 30		cmp #$30			cmp	 	#"0"
.9b08	90 0c		bcc $9b16			bcc 	_TKEndIdentifier
.9b0a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b0c	90 f0		bcc $9afe			bcc 	_TKCheckLoop
.9b0e	c9 41		cmp #$41			cmp	 	#"A"
.9b10	90 04		bcc $9b16			bcc 	_TKEndIdentifier
.9b12	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9b14	90 e8		bcc $9afe			bcc 	_TKCheckLoop
.9b16					_TKEndIdentifier:
.9b16	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9b19	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9b1b	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9b1d	f0 06		beq $9b25			beq 	_TKHasTypeCharacter
.9b1f	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9b21	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9b23	d0 07		bne $9b2c			bne 	_TKNoTypeCharacter
.9b25					_TKHasTypeCharacter:
.9b25	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9b28	e8		inx				inx 								; read next
.9b29	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9b2c					_TKNoTypeCharacter:
.9b2c	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9b2e	d0 09		bne $9b39			bne 	_TKNoArray
.9b30	e8		inx				inx 								; skip the (
.9b31	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9b34	09 04		ora #$04			ora 	#$04
.9b36	8d 04 07	sta $0704			sta 	identTypeByte
.9b39					_TKNoArray:
.9b39	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9b3c	20 d6 9b	jsr $9bd6			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9b3f	a0 97		ldy #$97			ldy 	#(KeywordSet0) >> 8
.9b41	a9 b6		lda #$b6			lda 	#(KeywordSet0) & $FF
.9b43	20 5d 97	jsr $975d			jsr 	TokeniseSearchTable
.9b46	a2 00		ldx #$00			ldx 	#0
.9b48	b0 1f		bcs $9b69			bcs 	_TKFoundToken
.9b4a	a0 98		ldy #$98			ldy 	#(KeywordSet1) >> 8
.9b4c	a9 d8		lda #$d8			lda 	#(KeywordSet1) & $FF
.9b4e	20 5d 97	jsr $975d			jsr 	TokeniseSearchTable
.9b51	a2 81		ldx #$81			ldx 	#$81
.9b53	b0 14		bcs $9b69			bcs 	_TKFoundToken
.9b55	a0 99		ldy #$99			ldy 	#(KeywordSet2) >> 8
.9b57	a9 1c		lda #$1c			lda 	#(KeywordSet2) & $FF
.9b59	20 5d 97	jsr $975d			jsr 	TokeniseSearchTable
.9b5c	a2 82		ldx #$82			ldx 	#$82
.9b5e	b0 09		bcs $9b69			bcs 	_TKFoundToken
.9b60	20 66 9c	jsr $9c66			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9b63	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9b66	4c 88 9a	jmp $9a88			jmp 	_TKTokeniseLoop 			; and go round again.
.9b69					_TKFoundToken:
.9b69	48		pha				pha 								; save token
.9b6a	8a		txa				txa 								; shift in X, is there one ?
.9b6b	f0 03		beq $9b70			beq 	_TKNoTShift
.9b6d	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte 			; if so, write it out
.9b70					_TKNoTShift:
.9b70	68		pla				pla 								; restore and write token
.9b71	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9b74	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9b77	4c 88 9a	jmp $9a88			jmp 	_TKTokeniseLoop 			; and go round again.
.9b7a					TokeniseString:
.9b7a	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9b7c	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9b7f	e8		inx				inx									; start of quoted string.
.9b80	da		phx				phx 								; push start of string on top
.9b81	ca		dex				dex
.9b82					_TSFindEnd:
.9b82	e8		inx				inx
.9b83	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character
.9b86	f0 04		beq $9b8c			beq 	_TSEndOfString
.9b88	c9 22		cmp #$22			cmp 	#'"'
.9b8a	d0 f6		bne $9b82			bne 	_TSFindEnd
.9b8c					_TSEndOfString:
.9b8c	7a		ply				ply  								; so now Y is first character, X is character after end.
.9b8d	48		pha				pha 								; save terminating character
.9b8e	20 96 9b	jsr $9b96			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9b91	68		pla				pla 								; terminating character
.9b92	f0 01		beq $9b95			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9b94	e8		inx				inx
.9b95					_TSNotQuote:
.9b95	60		rts				rts
.9b96					TOWriteBlockXY:
.9b96	86 36		stx $36				stx 	zTemp0 						; write end character
.9b98	98		tya				tya
.9b99	49 ff		eor #$ff			eor 	#$FF
.9b9b	38		sec				sec
.9b9c	65 36		adc $36				adc 	zTemp0
.9b9e	1a		inc a				inc 	a 							; one extra for NULL
.9b9f	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9ba2					_TOBlockLoop:
.9ba2	c4 36		cpy $36				cpy 	zTemp0
.9ba4	f0 09		beq $9baf			beq 	_TOBlockExit
.9ba6	b9 24 08	lda $0824,y			lda 	lineBuffer,y
.9ba9	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9bac	c8		iny				iny
.9bad	80 f3		bra $9ba2			bra 	_TOBlockLoop
.9baf					_TOBlockExit:
.9baf	a9 00		lda #$00			lda 	#0
.9bb1	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9bb4	60		rts				rts
.9bb5					TokeniseHexConstant:
.9bb5	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9bb7	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9bba	e8		inx				inx									; start of quoted string.
.9bbb	da		phx				phx 								; push start of constant on top
.9bbc	ca		dex				dex
.9bbd					_THFindLoop:
.9bbd	e8		inx				inx
.9bbe	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9bc1	c9 30		cmp #$30			cmp 	#"0"
.9bc3	90 0c		bcc $9bd1			bcc 	_THFoundEnd
.9bc5	c9 3a		cmp #$3a			cmp 	#"9"+1
.9bc7	90 f4		bcc $9bbd			bcc 	_THFindLoop
.9bc9	c9 41		cmp #$41			cmp 	#"A"
.9bcb	90 04		bcc $9bd1			bcc 	_THFoundEnd
.9bcd	c9 47		cmp #$47			cmp 	#"F"+1
.9bcf	90 ec		bcc $9bbd			bcc 	_THFindLoop
.9bd1					_THFoundEnd:
.9bd1	7a		ply				ply 								; restore start
.9bd2	20 96 9b	jsr $9b96			jsr 	TOWriteBlockXY 				; output the block
.9bd5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9bd6					TokeniseCalculateHash:
.9bd6	da		phx				phx
.9bd7	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9bda	a9 00		lda #$00			lda 	#0
.9bdc					_TCHLoop:
.9bdc	18		clc				clc
.9bdd	7d 24 08	adc $0824,x			adc 	lineBuffer,x
.9be0	e8		inx				inx
.9be1	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9be4	d0 f6		bne $9bdc			bne 	_TCHLoop
.9be6	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9be9	fa		plx				plx
.9bea	60		rts				rts
.9beb					FixLineBufferCase:
.9beb	a2 00		ldx #$00			ldx 	#0
.9bed					_FLBCLoop:
.9bed	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next character
.9bf0	f0 22		beq $9c14			beq 	_FLBCExit 					; end of string.
.9bf2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9bf4	f0 11		beq $9c07			beq 	_FLBCInQuotes
.9bf6	e8		inx				inx
.9bf7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9bf9	90 f2		bcc $9bed			bcc 	_FLBCLoop
.9bfb	c9 7b		cmp #$7b			cmp 	#'z'+1
.9bfd	b0 ee		bcs $9bed			bcs 	_FLBCLoop
.9bff	38		sec				sec 								; make U/C
.9c00	e9 20		sbc #$20			sbc 	#32
.9c02	9d 23 08	sta $0823,x			sta	 	lineBuffer-1,x 				; write back
.9c05	80 e6		bra $9bed			bra 	_FLBCLoop
.9c07					_FLBCInQuotes:
.9c07	e8		inx				inx 								; advance
.9c08	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next
.9c0b	f0 07		beq $9c14			beq 	_FLBCExit 					; exit on EOS
.9c0d	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9c0f	d0 f6		bne $9c07			bne 	_FLBCInQuotes
.9c11	e8		inx				inx 								; skip over it
.9c12	80 d9		bra $9bed			bra 	_FLBCLoop
.9c14					_FLBCExit:
.9c14	60		rts				rts
.9c15					TokeniseExtractLineNumber:
.9c15	ad 26 07	lda $0726			lda 	tokenLineNumber+1 			; push current value on stack
.9c18	48		pha				pha
.9c19	ad 25 07	lda $0725			lda 	tokenLineNumber
.9c1c	48		pha				pha
.9c1d	20 53 9c	jsr $9c53			jsr 	_TELNTimes2 				; line # x 4
.9c20	20 53 9c	jsr $9c53			jsr 	_TELNTimes2 				; line # x 2
.9c23	18		clc				clc 								; add stacked value
.9c24	68		pla				pla
.9c25	6d 25 07	adc $0725			adc 	tokenLineNumber
.9c28	8d 25 07	sta $0725			sta 	tokenLineNumber
.9c2b	68		pla				pla
.9c2c	6d 26 07	adc $0726			adc 	tokenLineNumber+1
.9c2f	8d 26 07	sta $0726			sta 	tokenLineNumber+1 			; line # x 5
.9c32	20 53 9c	jsr $9c53			jsr 	_TELNTimes2 				; line # x 10
.9c35	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get and consume character
.9c38	e8		inx				inx
.9c39	29 0f		and #$0f			and 	#15 						; add to line #
.9c3b	18		clc				clc
.9c3c	6d 25 07	adc $0725			adc 	tokenLineNumber
.9c3f	8d 25 07	sta $0725			sta 	tokenLineNumber
.9c42	90 03		bcc $9c47			bcc 	_TLENNoCarry
.9c44	ee 26 07	inc $0726			inc 	tokenLineNumber+1
.9c47					_TLENNoCarry:
.9c47	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; more digits ?
.9c4a	c9 30		cmp #$30			cmp 	#'0'
.9c4c	90 04		bcc $9c52			bcc 	_TLENExit
.9c4e	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c50	90 c3		bcc $9c15			bcc 	TokeniseExtractLineNumber
.9c52					_TLENExit:
.9c52	60		rts				rts
.9c53					_TELNTimes2:
.9c53	0e 25 07	asl $0725			asl 	tokenLineNumber
.9c56	2e 26 07	rol $0726			rol 	tokenLineNumber+1
.9c59	60		rts				rts
.9c5a					TokeniseWriteByte:
.9c5a	da		phx				phx
.9c5b	ae 24 07	ldx $0724			ldx 	tokenOffset 				; next slot to write to
.9c5e	9d 24 07	sta $0724,x			sta 	tokenOffset,x 				; write byte out
.9c61	ee 24 07	inc $0724			inc 	tokenOffset 				; advance slot.
.9c64	fa		plx				plx
.9c65	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9c66					CheckCreateVariableRecord:
.9c66	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9c68	85 36		sta $36				sta 	0+zTemp0
.9c6a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9c6c	85 37		sta $37				sta 	1+zTemp0
.9c6e					_CCVSearch:
.9c6e	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9c70	f0 2c		beq $9c9e			beq 	_CCVFail
.9c72	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9c74	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9c76	cd 03 07	cmp $0703			cmp 	identHash
.9c79	d0 16		bne $9c91			bne 	_CCVNext
.9c7b	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9c7d	ae 00 07	ldx $0700			ldx 	identStart
.9c80					_CCVCompare:
.9c80	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9c83	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9c85	e8		inx				inx 								; advance pointers
.9c86	c8		iny				iny
.9c87	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9c88	d0 07		bne $9c91			bne 	_CCVNext  					; didn't match go to next.
.9c8a	90 f4		bcc $9c80			bcc 	_CCVCompare 				; not finished yet.
.9c8c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9c8f	f0 41		beq $9cd2			beq 	_CCVFound 					; yes, we were successful
.9c91					_CCVNext:
.9c91	18		clc				clc
.9c92	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9c94	65 36		adc $36				adc 	zTemp0
.9c96	85 36		sta $36				sta 	zTemp0
.9c98	90 d4		bcc $9c6e			bcc 	_CCVSearch
.9c9a	e6 37		inc $37				inc 	zTemp0+1
.9c9c	80 d0		bra $9c6e			bra 	_CCVSearch
.9c9e					_CCVFail:
.9c9e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9ca0	ad 03 07	lda $0703			lda 	identHash
.9ca3	91 36		sta ($36),y			sta 	(zTemp0),y
.9ca5	c8		iny				iny 								; offset 2 is the type byte
.9ca6	ad 04 07	lda $0704			lda 	identTypeByte
.9ca9	91 36		sta ($36),y			sta 	(zTemp0),y
.9cab	c8		iny				iny
.9cac					_CCVData:
.9cac	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9cae	91 36		sta ($36),y			sta 	(zTemp0),y
.9cb0	c8		iny				iny
.9cb1	c0 08		cpy #$08			cpy 	#8
.9cb3	90 f7		bcc $9cac			bcc 	_CCVData
.9cb5	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9cb8					_CCVCopyName:
.9cb8	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9cbb	91 36		sta ($36),y			sta 	(zTemp0),y
.9cbd	e8		inx				inx
.9cbe	c8		iny				iny
.9cbf	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9cc2	d0 f4		bne $9cb8			bne 	_CCVCopyName
.9cc4	98		tya				tya 								; patch offset
.9cc5	92 36		sta ($36)			sta 	(zTemp0)
.9cc7	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9cc9	91 36		sta ($36),y			sta 	(zTemp0),y
.9ccb	88		dey				dey
.9ccc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9cce	09 80		ora #$80			ora 	#$80
.9cd0	91 36		sta ($36),y			sta 	(zTemp0),y
.9cd2					_CCVFound:
.9cd2	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9cd4	38		sec				sec
.9cd5	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9cd7	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9cd9	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9cdc	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9cde	20 5a 9c	jsr $9c5a			jsr 	TokeniseWriteByte
.9ce1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a59d					MemoryPeek:
.a59d	b2 36		lda ($36)			lda 	(zTemp0)
.a59f	60		rts				rts
.a5a0					MemoryPoke:
.a5a0	92 36		sta ($36)			sta 	(zTemp0)
.a5a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a5a3					EXTPrintCharacter:
.a5a3	48		pha				pha
.a5a4	da		phx				phx
.a5a5	5a		phy				phy
.a5a6	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a5a9	7a		ply				ply
.a5aa	fa		plx				plx
.a5ab	68		pla				pla
.a5ac	60		rts				rts
.a5ad					EXTInputSingleCharacter:
.a5ad	da		phx				phx
.a5ae	5a		phy				phy
.a5af					_EISCWait:
.a5af	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a5b2	c9 00		cmp #$00			cmp 	#0
.a5b4	f0 f9		beq $a5af			beq 	_EISCWait
.a5b6	7a		ply				ply
.a5b7	fa		plx				plx
.a5b8	60		rts				rts
.a5b9					EXTInputLine:
.a5b9	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a5bb					_ILLoop:
.a5bb	da		phx				phx 								; read character in
.a5bc	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a5bf	fa		plx				plx
.a5c0	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a5c2	f0 12		beq $a5d6			beq 	_ILBackspace
.a5c4	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a5c6	f0 15		beq $a5dd			beq 	_ILExit
.a5c8	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a5ca	90 ef		bcc $a5bb			bcc 	_ILLoop
.a5cc	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a5ce	f0 eb		beq $a5bb			beq 	_ILLoop
.a5d0	9d 24 08	sta $0824,x			sta 	lineBuffer,x 				; save it
.a5d3	e8		inx				inx
.a5d4	80 e5		bra $a5bb			bra 	_ILLoop
.a5d6					_ILBackspace:
.a5d6	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a5d8	f0 e1		beq $a5bb			beq 	_ILLoop
.a5da	ca		dex				dex 								; back one.
.a5db	80 de		bra $a5bb			bra 	_ILLoop
.a5dd					_ILExit:
.a5dd	20 a3 a5	jsr $a5a3			jsr 	EXTPrintCharacter
.a5e0	9e 24 08	stz $0824,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a5e3	60		rts				rts
.a5e4					EXTBreakCheck:
.a5e4	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9ce2					MemoryNew:
.9ce2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9ce4	85 30		sta $30				sta 	codePtr
.9ce6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9ce8	85 31		sta $31				sta 	codePtr+1
.9cea	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9cec	92 30		sta ($30)			sta 	(codePtr)
.9cee	60		rts				rts
.9cef					MemoryAppend:
.9cef	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9cf1	85 30		sta $30				sta 	codePtr
.9cf3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9cf5	85 31		sta $31				sta 	codePtr+1
.9cf7					_MAFindEnd:
.9cf7	b2 30		lda ($30)			lda 	(codePtr)
.9cf9	f0 0d		beq $9d08			beq 	_MAFoundEnd
.9cfb	18		clc				clc
.9cfc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9cfe	65 30		adc $30				adc 	codePtr
.9d00	85 30		sta $30				sta 	codePtr
.9d02	90 02		bcc $9d06			bcc 	_CREExit
.9d04	e6 31		inc $31				inc 	codePtr+1
.9d06					_CREExit:
.9d06	80 ef		bra $9cf7			bra 	_MAFindEnd
.9d08					_MAFoundEnd:
.9d08	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.9d0b	c0 04		cpy #$04			cpy 	#4 							; blank line
.9d0d	f0 0e		beq $9d1d			beq 	_MANoLine
.9d0f	a9 00		lda #$00			lda 	#0 							; end of program
.9d11	91 30		sta ($30),y			sta 	(codePtr),y
.9d13					_MACopy:
.9d13	88		dey				dey
.9d14	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.9d17	91 30		sta ($30),y			sta 	(codePtr),y
.9d19	c0 00		cpy #$00			cpy 	#0
.9d1b	d0 f6		bne $9d13			bne 	_MACopy
.9d1d					_MANoLine:
.9d1d	60		rts				rts
.9d1e					MemoryInline:
.9d1e	98		tya				tya 								; put address into stack,x
.9d1f	18		clc				clc
.9d20	65 30		adc $30				adc 	codePtr
.9d22	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9d25	a5 31		lda $31				lda 	codePtr+1
.9d27	69 00		adc #$00			adc 	#0
.9d29	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d2c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9d2f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9d32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9d33					MemoryTransferAX:
.9d33	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9d35	86 37		stx $37				stx 	zTemp0+1
.9d37	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9d39	85 30		sta $30				sta 	codePtr
.9d3b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9d3d	85 31		sta $31				sta 	codePtr+1
.9d3f					_MTAXLoop:
.9d3f	b2 30		lda ($30)			lda 	(codePtr)
.9d41	f0 1d		beq $9d60			beq 	_MTAXError 					; not found.
.9d43	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9d45	b1 30		lda ($30),y			lda 	(codePtr),y
.9d47	c5 36		cmp $36				cmp 	zTemp0
.9d49	d0 07		bne $9d52			bne 	_MTAXNext
.9d4b	c8		iny				iny 								; check MSB
.9d4c	b1 30		lda ($30),y			lda 	(codePtr),y
.9d4e	c5 37		cmp $37				cmp 	zTemp0+1
.9d50	f0 0d		beq $9d5f			beq 	_MTAXExit 					; success !
.9d52					_MTAXNext:
.9d52	18		clc				clc
.9d53	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9d55	65 30		adc $30				adc 	codePtr
.9d57	85 30		sta $30				sta 	codePtr
.9d59	90 02		bcc $9d5d			bcc 	_CREExit
.9d5b	e6 31		inc $31				inc 	codePtr+1
.9d5d					_CREExit:
.9d5d	80 e0		bra $9d3f			bra 	_MTAXLoop
.9d5f					_MTAXExit:
.9d5f	60		rts				rts
.9d60					_MTAXError:
.9d60	a9 0d		lda #$0d		lda	#13
.9d62	4c 30 8b	jmp $8b30		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
